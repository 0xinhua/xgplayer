window.HlsVodPlayer=function(e){var t={};function s(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}return s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(i,r,function(t){return e[t]}.bind(null,r));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}({"../../node_modules/events/events.js":
/*!**********************************************************************************!*\
  !*** /Users/jiangyuqing/Desktop/Projects/xgplayer/node_modules/events/events.js ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var i,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,s){return Function.prototype.apply.call(e,t,s)};i=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var l=10;function d(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function u(e,t,s,i){var r,a,n,o;if("function"!=typeof s)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof s);if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,s.listener?s.listener:s),a=e._events),n=a[t]),void 0===n)n=a[t]=s,++e._eventsCount;else if("function"==typeof n?n=a[t]=i?[s,n]:[n,s]:i?n.unshift(s):n.push(s),(r=d(e))>0&&n.length>r&&!n.warned){n.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=n.length,o=l,console&&console.warn&&console.warn(o)}return e}function h(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function c(e,t,s){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:s},r=h.bind(i);return r.listener=s,i.wrapFn=r,r}function f(e,t,s){var i=e._events;if(void 0===i)return[];var r=i[t];return void 0===r?[]:"function"==typeof r?s?[r.listener||r]:[r]:s?function(e){for(var t=new Array(e.length),s=0;s<t.length;++s)t[s]=e[s].listener||e[s];return t}(r):m(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var s=t[e];if("function"==typeof s)return 1;if(void 0!==s)return s.length}return 0}function m(e,t){for(var s=new Array(t),i=0;i<t;++i)s[i]=e[i];return s}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return d(this)},o.prototype.emit=function(e){for(var t=[],s=1;s<arguments.length;s++)t.push(arguments[s]);var i="error"===e,r=this._events;if(void 0!==r)i=i&&void 0===r.error;else if(!i)return!1;if(i){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var l=r[e];if(void 0===l)return!1;if("function"==typeof l)a(l,this,t);else{var d=l.length,u=m(l,d);for(s=0;s<d;++s)a(u[s],this,t)}return!0},o.prototype.addListener=function(e,t){return u(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return u(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var s,i,r,a,n;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(i=this._events))return this;if(void 0===(s=i[e]))return this;if(s===t||s.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,s.listener||t));else if("function"!=typeof s){for(r=-1,a=s.length-1;a>=0;a--)if(s[a]===t||s[a].listener===t){n=s[a].listener,r=a;break}if(r<0)return this;0===r?s.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(s,r),1===s.length&&(i[e]=s[0]),void 0!==i.removeListener&&this.emit("removeListener",e,n||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,s,i;if(void 0===(s=this._events))return this;if(void 0===s.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==s[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete s[e]),this;if(0===arguments.length){var r,a=Object.keys(s);for(i=0;i<a.length;++i)"removeListener"!==(r=a[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=s[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},"../xgplayer-buffer/index.js":
/*!***********************************!*\
  !*** ../xgplayer-buffer/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={Track:s(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:s(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:s(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:s(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:s(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:s(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:s(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").default}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
  !*** ../xgplayer-buffer/src/buffer.js ***!
  \****************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),s=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let i=this.array[0].slice(this.offset,this.offset+e);t.set(i,s),this.offset+=e,this.length-=e,e=0;break}{let i=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),s),this.array.shift(),this.offset=0,s+=i,this.length-=i,e-=i}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let s=0,i=this.offset+e;for(;i<this.offset+t+e;)i<this.array[0].length?s=256*s+this.array[0][i]:this.array[1]&&(s=256*s+this.array[1][i-this.array[0].length]),i++;return s}};t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new i,this.sources[e]}clear(){this.sources={}}}},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/track.js ***!
  \***************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=i;t.AudioTrack=class extends i{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}};t.VideoTrack=class extends i{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-codec/index.js":
/*!**********************************!*\
  !*** ../xgplayer-codec/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={Nalunit:s(/*! ./src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js").default,SpsParser:s(/*! ./src/h264/nalunit/sps */"../xgplayer-codec/src/h264/nalunit/sps.js").default,Compatibility:s(/*! ./src/compatibility */"../xgplayer-codec/src/compatibility.js").default}},"../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
  !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{static getSilentFrame(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},"../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
  !*** ../xgplayer-codec/src/compatibility.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=s(/*! ./aac/aac-helper */"../xgplayer-codec/src/aac/aac-helper.js"),n=(i=a)&&i.__esModule?i:{default:i};const{REMUX_EVENTS:o}=r.EVENTS;class l{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=0,this.lastAudioDts=0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[]}init(){this.before(o.REMUX_MEDIA,this.doFix.bind(this))}reset(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=0,this.lastAudioDts=0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:e,isFirstVideoSamples:t}=this.getFirstSample();this.filtInvalidSamples(),this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples),this.doFixVideo(t),this.doFixAudio(e)}doFixVideo(e){let{samples:t,meta:s}=this.videoTrack;if(!t||!t.length||!this._firstVideoSample)return;const i=t[0],r=i.dts,a=t.length;if(e&&this._firstAudioSample){const e=this._firstVideoSample.dts,r=e-this._firstAudioSample.dts;if(r>2*s.refSampleDuration){const a=Math.floor(r/s.refSampleDuration);for(let r=0;r<a;r++){const a=Object.assign({},i);a.dts=e-(r+1)*s.refSampleDuration,a.pts=a.dts+a.cts,t.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}}}let n;if(this.nextVideoDts)if((n=r-this.nextVideoDts)>2*s.refSampleDuration){const e=Math.floor(n/s.refSampleDuration);for(let i=0;i<e;i++){const e=Object.assign({},t[0]),a=r-(i+1)*s.refSampleDuration;e.dts=a>this.nextVideoDts?a:this.nextVideoDts,e.pts=e.dts+e.cts,this.videoTrack.samples.unshift(e),this.filledVideoSamples.push({dts:e.dts,size:e.data.byteLength})}}else Math.abs(n)<s.refSampleDuration&&(t[0].dts=this.nextVideoDts,t[0].cts=t[0].cts||t[0].pts-t[0].dts,t[0].pts=t[0].dts+t[0].cts);const o=t[t.length-1].dts,l=t.length>=2?o-t[t.length-2].dts:s.refSampleDuration;this.lastVideoSamplesLen=a,this.nextVideoDts=o+l,this.lastVideoDts=o;for(let e=0,i=t.length;e<i;e++){const i=t[e],r=t[e+1];if(!r)break;const a=r.dts-i.dts;if(a>2*s.refSampleDuration){let n=Math.floor(a/s.refSampleDuration),o=0;for(;o<n;){const a=Object.assign({},r);a.dts=i.dts+(o+1)*s.refSampleDuration,a.pts=a.dts+a.cts,t.splice(e,0,a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength}),o++,e++}}}this.videoTrack.samples=t}doFixAudio(e){let{samples:t,meta:s}=this.audioTrack;if(!t||!t.length)return;const i=t.length,r=n.default.getSilentFrame(s.codec,s.channelCount),a=this._firstAudioSample;if(t=l.sortAudioSamples(t),this._firstVideoSample&&e){const e=this._firstVideoSample.pts?this._firstVideoSample.pts:this._firstVideoSample.dts+this._firstVideoSample.cts;if(a.dts-e>s.refSampleDuration){const i=Math.floor((a.dts-e)/s.refSampleDuration);for(let e=0;e<i;e++){const i={data:r,datasize:r.byteLength,dts:a.dts-(e+1)*s.refSampleDuration,filtered:0};t.unshift(i),this.filledAudioSamples.push({dts:i.dts,size:i.data.byteLength})}}}let o;const d=t[0].dts;if(this.nextAudioDts)if(o=d-this.nextAudioDts,Math.abs(o)>s.refSampleDuration&&1===i&&1===this.lastAudioSamplesLen&&(s.refSampleDurationFixed=void 0),o>2*s.refSampleDuration)if(1===i&&1===this.lastAudioSamplesLen)s.refSampleDurationFixed=void 0!==s.refSampleDurationFixed?s.refSampleDurationFixed+o:s.refSampleDuration+o;else{const e=Math.floor(o/s.refSampleDuration);for(let i=0;i<e;i++){const e=d-(i+1)*s.refSampleDuration,r=Object.assign({},t[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else o&&(t[0].dts=this.nextAudioDts,t[0].pts=this.nextAudioDts);const u=t[t.length-1].dts,h=t.length>=2?u-t[t.length-2].dts:s.refSampleDuration;this.lastAudioSamplesLen=i,this.nextAudioDts=s.refSampleDurationFixed?u+s.refSampleDurationFixed:u+h,this.lastAudioDts=u;for(let e=0,i=t.length;e<i;e++){const i=t[e],a=t[e+1];if(!a)break;const n=a.dts-i.dts;if(n>2*s.refSampleDuration){let a=Math.floor(n/s.refSampleDuration),o=0;for(;o<a;){const a={data:r,datasize:r.byteLength,dts:i.dts+(o+1)*s.refSampleDuration,filtered:0,isSilent:!0};t.splice(e,0,a),this.filledAudioSamples.push({dts:a.dts,size:a.data.byteLength}),o++,e++}}}this.audioTrack.samples=l.sortAudioSamples(t)}getFirstSample(){let{samples:e}=this.videoTrack,{samples:t}=this.audioTrack,s=!1,i=!1;return!this._firstVideoSample&&e.length&&(this._firstVideoSample=l.findFirstVideoSample(e),s=!0),!this._firstAudioSample&&t.length&&(this._firstAudioSample=l.findFirstAudioSample(t),i=!0),{isFirstVideoSamples:s,isFirstAudioSamples:i}}fixRefSampleDuration(e,t){const s="video"===e.type,i=s?this.allVideoSamplesCount:this.allAudioSamplesCount,r=s?this._firstVideoSample.dts:this._firstAudioSample.dts,a=s?this.filledVideoSamples.length:this.filledAudioSamples.length;if((!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration))&&t.length>=1){const s=t[t.length-1].dts;e.refSampleDuration=Math.floor((s-r)/(i+a-1))}}recordSamplesCount(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}filtInvalidSamples(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter(e=>e.dts>=t.dts&&e.dts>this.lastAudioDts),this.videoTrack.samples=this.videoTrack.samples.filter(t=>t.dts>=e.dts&&t.dts>this.lastVideoDts)}static sortAudioSamples(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}static findFirstAudioSample(e){return e&&0!==e.length?l.sortAudioSamples(e)[0]:null}static findFirstVideoSample(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,s=t.length;e<s;e++)if(t[e].isKeyframe)return t[e]}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks?this.tracks.audioTrack:null}get videoTrack(){return this.tracks?this.tracks.videoTrack:null}}t.default=l},"../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),s=new Uint8Array(4);s.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(s.buffer).getUint32(0,!1),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){if(e<=this._currentWordBitsLeft){let t=this._currentWord>>>32-e;return this._currentWord<<=e,this._currentWordBitsLeft-=e,t}let t=this._currentWordBitsLeft?this._currentWord:0;this._currentWordBitsLeft;let s=e-this._currentWordBitsLeft;this._fillCurrentWord();let i=Math.min(s,this._currentWordBitsLeft),r=this._currentWord>>>32-i;return this._currentWord<<=i,this._currentWordBitsLeft-=i,t=t<<i|r}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! ./sps */"../xgplayer-codec/src/h264/nalunit/sps.js"),a=(i=r)&&i.__esModule?i:{default:i};class n{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,s=e.position;return 1===t.getInt32(s)||0===t.getInt16(s)&&1===t.getInt8(s+2)?n.getAnnexbNals(e):n.getAvccNals(e)}static getAnnexbNals(e){let t=[],s=n.getHeaderPositionAnnexB(e),i=s.pos,r=i;for(;i<e.length-4;){let a=e.buffer.slice(i,i+s.headerLength);s.pos===e.position&&e.skip(s.headerLength),r=(s=n.getHeaderPositionAnnexB(e)).pos;let o={header:a,body:new Uint8Array(e.buffer.slice(i+a.byteLength,r))};n.analyseNal(o),t.push(o),e.skip(r-e.position),i=r}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let s=e.dataview.getInt32();if(!(e.length-e.position>=s))break;{let i=e.buffer.slice(e.position,e.position+4);e.skip(4);let r=e.buffer.slice(e.position,e.position+s);e.skip(s);let a={header:i,body:r};n.analyseNal(a),t.push(a)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=a.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,s=0;for(;3!==s&&4!==s&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?s=4:1===e.dataview.getInt8(t+2)?s=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(s=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?s=3:t=e.length)),{pos:t,headerLength:s}}static getAvcc(e,t){let s=new Uint8Array(e.byteLength+t.byteLength+11);s[0]=1,s[1]=e[1],s[2]=e[2],s[3]=e[3],s[4]=255,s[5]=225;let i=6;return s.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),i),i+=2,s.set(e,i),s[i+=e.byteLength]=1,i++,s.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),i),i+=2,s.set(t,i),s}}t.default=n},"../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! ./golomb */"../xgplayer-codec/src/h264/nalunit/golomb.js"),a=(i=r)&&i.__esModule?i:{default:i};class n{static _ebsp2rbsp(e){let t=e,s=t.byteLength,i=new Uint8Array(s),r=0;for(let e=0;e<s;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(i[r]=t[e],r++);return new Uint8Array(i.buffer,0,r)}static parseSPS(e){let t=n._ebsp2rbsp(e),s=new a.default(t);s.readByte();let i=s.readByte();s.readByte();let r=s.readByte();s.readUEG();let o=n.getProfileString(i),l=n.getLevelString(r),d=1,u=420,h=[0,420,422,444],c=8;if((100===i||110===i||122===i||244===i||44===i||83===i||86===i||118===i||128===i||138===i||144===i)&&(3===(d=s.readUEG())&&s.readBits(1),d<=3&&(u=h[d]),c=s.readUEG()+8,s.readUEG(),s.readBits(1),s.readBool())){let e=3!==d?8:12;for(let t=0;t<e;t++)s.readBool()&&(t<6?n._skipScalingList(s,16):n._skipScalingList(s,64))}s.readUEG();let f=s.readUEG();if(0===f)s.readUEG();else if(1===f){s.readBits(1),s.readSEG(),s.readSEG();let e=s.readUEG();for(let t=0;t<e;t++)s.readSEG()}s.readUEG(),s.readBits(1);let p=s.readUEG(),m=s.readUEG(),g=s.readBits(1);0===g&&s.readBits(1),s.readBits(1);let _=0,y=0,A=0,E=0;s.readBool()&&(_=s.readUEG(),y=s.readUEG(),A=s.readUEG(),E=s.readUEG());let S=1,b=1,T=0,v=!0,x=0,w=0;if(s.readBool()){if(s.readBool()){let e=s.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],i=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(S=t[e-1],b=i[e-1]):255===e&&(S=s.readByte()<<8|s.readByte(),b=s.readByte()<<8|s.readByte())}if(s.readBool()&&s.readBool(),s.readBool()&&(s.readBits(4),s.readBool()&&s.readBits(24)),s.readBool()&&(s.readUEG(),s.readUEG()),s.readBool()){let e=s.readBits(32),t=s.readBits(32);v=s.readBool(),T=(x=t)/(w=2*e)}}let U=1;1===S&&1===b||(U=S/b);let D=0,R=0;if(0===d)D=1,R=2-g;else{D=3===d?1:2,R=(1===d?2:1)*(2-g)}let k=16*(p+1),M=16*(m+1)*(2-g);k-=(_+y)*D,M-=(A+E)*R;let L=Math.ceil(k*U);return s.destroy(),s=null,{profile_string:o,level_string:l,bit_depth:c,chroma_format:u,chroma_format_string:n.getChromaFormatString(u),frame_rate:{fixed:v,fps:T,fps_den:w,fps_num:x},par_ratio:{width:S,height:b},codec_size:{width:k,height:M},present_size:{width:L,height:M}}}static _skipScalingList(e,t){let s=8,i=8,r=0;for(let a=0;a<t;a++)0!==i&&(i=(s+(r=e.readSEG())+256)%256),s=0===i?s:i}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},e.frame_rate.fixed&&e.frame_rate.fps_num>0&&e.frame_rate.fps_den>0&&(t.frameRate=e.frame_rate);let s=t.frameRate.fps_den,i=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(s/i))}}t.default=n},"../xgplayer-demux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-demux/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={M3U8Parser:s(/*! ./src/hls/demuxer/m3u8parser */"../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,TsDemuxer:s(/*! ./src/hls/demuxer/ts */"../xgplayer-demux/src/hls/demuxer/ts.js").default,Playlist:s(/*! ./src/hls/playlist */"../xgplayer-demux/src/hls/playlist.js").default,FlvDemuxer:s(/*! ./src/flv/index */"../xgplayer-demux/src/flv/index.js").default}},"../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(/*! xgplayer-utils */"../xgplayer-utils/index.js");const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};t.default=class{constructor(){this.offset=0,this.readOffset=this.offset}resolve(e,t){if(t<3)throw new Error("not enough data for metainfo");const s={},i=this.parseValue(e),r=this.parseValue(e,t-i.bodySize);return s[i.data]=r.data,this.resetStatus(),s}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(e){const t=new DataView(e,this.readOffset).getUint16(0,!i.isLe);let s="";s=t>0?i.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let r=t+2;return this.readOffset+=r,{data:s,bodySize:t+2}}parseDate(e,t){const s=new DataView(e,this.readOffset,t);let r=s.getFloat64(0,!i.isLe);return r+=60*s.getInt16(8,!i.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(e,t){const s=this.parseString(e,t),i=this.parseValue(e,t-s.bodySize);return{data:{name:s.data,value:i.data},bodySize:s.bodySize+i.bodySize,isObjEnd:i.isObjEnd}}parseLongString(e){const t=new DataView(e,this.readOffset).getUint32(0,!i.isLe);let s="";return s=t>0?i.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:s,bodySize:t+4}}parseValue(e,t){let s=new ArrayBuffer;s=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:l,MIX_ARRAY:d,OBJECT_END:u,STRICT_ARRAY:h,DATE:c,LONE_STRING:f}=r,p=new DataView(s,this.readOffset,t);let m=!1;const g=p.getUint8(0);let _=1;this.readOffset+=1;let y=null;switch(g){case a:y=p.getFloat64(1,!i.isLe),this.readOffset+=8,_+=8;break;case n:y=!!p.getUint8(1),this.readOffset+=1,_+=1;break;case o:{const e=this.parseString(s);y=e.data,_+=e.bodySize;break}case l:{y={};let e=0;for(16777215&p.getUint32(t-4,!i.isLe)&&(e=3);_<t-4;){const i=this.parseObject(s,t-_-e);if(i.isObjectEnd)break;y[i.data.name]=i.data.value,_+=i.bodySize}if(_<=t-3){9===(16777215&p.getUint32(_-1,!i.isLe))&&(this.readOffset+=3,_+=3)}break}case d:{y={},_+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!i.isLe))&&(e=3);_<t-8;){const i=this.parseObject(s,t-_-e);if(i.isObjectEnd)break;y[i.data.name]=i.data.value,_+=i.bodySize}if(_<=t-3){9===(16777215&p.getUint32(_-1,!i.isLe))&&(_+=3,this.readOffset+=3)}break}case u:y=null,m=!0;break;case h:{y=[];const e=p.getUint32(1,!i.isLe);_+=4,this.readOffset+=4;for(let i=0;i<e;i++){const e=this.parseValue(s,t-_);y.push(e.data),_+=e.bodySize}break}case c:{const e=this.parseDate(s,t-1);y=e.data,_+=e.bodySize;break}case f:{const e=this.parseLongString(s,t-1);y=e.data,_+=e.bodySize;break}default:_=t}return{data:y,bodySize:_,isObjEnd:m}}}},"../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
  !*** ../xgplayer-demux/src/flv/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=s(/*! xgplayer-codec */"../xgplayer-codec/index.js"),n=s(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=s(/*! ./amf-parser */"../xgplayer-demux/src/flv/amf-parser.js"),l=(i=o)&&i.__esModule?i:{default:i};const d=r.EVENTS.DEMUX_EVENTS;class u{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(d.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}static getPlayType(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e;do{e=this._parseFlvTag()}while(e);this.emit(d.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}parseFlvHeader(e){if(u.isFlvFile(e)){this._firstFragmentLoaded=!0;const t=u.getPlayType(e[4]);t.hasVideo&&this.initVideoTrack(),t.hasAudio&&this.initAudioTrack()}else this.emit(d.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let e=new n.VideoTrack;e.meta=new r.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}initAudioTrack(){this._trackNum++;let e=new n.AudioTrack;e.meta=new r.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}_parseFlvTagHeader(){let e=0,t={},s=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&s)>>>5,t.tagType=31&s,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.logger.warn(this.TAG,"tagType "+t.tagType),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let i=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(i+=16777216*r),t.dts=i,this.loaderBuffer.shift(3),t}_processChunk(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(e){let t=this.tracks.audioTrack,s=this.tracks.videoTrack,i=this.loaderBuffer.shift(e.datasize);const r=(new l.default).resolve(i,i.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(d.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(a.audiosamplerate&&(e.sampleRate=a.audiosamplerate),a.audiochannels&&(e.channelCount=a.audiochannels),a.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(s&&!s.hasSpecificConfig){let e=s.meta;if("number"==typeof a.framerate){let t=Math.floor(1e3*a.framerate);if(t>0){let s=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=s,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let s,i,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,i=new Array(4),s=a-3):(t.objectType=2,i=new Array(2),s=a):-1!==r.indexOf("android")?(t.objectType=2,i=new Array(2),s=a):(t.objectType=5,s=t.sampleRateIndex,i=new Array(4),t.sampleRateIndex>=6?s=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,i=new Array(2),s=t.sampleRateIndex)),i[0]=t.objectType<<3,i[0]|=(15&t.sampleRateIndex)>>>1,i[1]=(15&t.sampleRateIndex)<<7,i[1]|=(15&t.channelCount)<<3,5===t.objectType&&(i[1]|=(15&s)>>>1,i[2]=(1&s)<<7,i[2]|=8,i[3]=0),t.config=i,t}_parseAACData(e){let t=this.tracks.audioTrack;if(!t)return;let s=t.meta;s||(s=new r.AudioTrackMeta);let i=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let a=(240&i)>>>4;t.format=a,10!==a&&this.emit(d.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(s.sampleRate=this._switchAudioSamplingFrequency(i),s.sampleRateIndex=(12&i)>>>2,s.frameLenth=(2&i)>>>1,s.channelCount=1&i,s.refSampleDuration=Math.floor(1024/s.audioSampleRate*s.timescale));let n=s.audioSampleRate,o=s.sampleRateIndex,l=s.refSampleDuration;delete e.tagType;let u=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);n=t.audiosamplerate||s.audioSampleRate,o=t.sampleRateIndex||s.sampleRateIndex,l=Math.floor(1024/n*s.timescale),s.channelCount=t.channelCount,s.sampleRate=n,s.sampleRateIndex=o,s.refSampleDuration=l,s.duration=this._context.mediaInfo.duration*s.timescale,s.config=t.config;const i=this._context.mediaInfo.audio;i.codec=t.codec,i.channelCount=t.channelCount,i.sampleRate=n,i.sampleRateIndex=t.audioSampleRateIndex,!this._hasScript||this._hasAudioSequence||this.tracks.videoTrack&&!this._hasVideoSequence?this._hasScript&&this._hasAudioSequence&&this.emit(d.AUDIO_METADATA_CHANGE):this.emit(d.METADATA_PARSED,"audio"),this._hasAudioSequence=!0}else e.data=e.data.slice(1,e.data.length),t.samples.push(e);u||this.logger.warn(this.TAG,"TAG length error at "+e.datasize)}_parseHevcData(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let s=15&t;if(this.tracks.videoTrack.codecID=s,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===s){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`);let t={},s=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>s;){let i=e.data.slice(Number.parseInt(s),4+s);t.size=i[3],t.size+=256*i[2],t.size+=256*i[1]*256,t.size+=256*i[0]*256*256,s+=4,t.data=e.data.slice(Number.parseInt(s),t.size+s),s+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(d.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(d.METADATA_PARSED,"video"):this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`))}else if(7===s){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let s=0;s<4;s++)e=256*e+t[s];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType){this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(d.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(d.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0)}else{if(!this._datasizeValidator(e.datasize))return void this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`);this.tracks.videoTrack.samples.push(e)}}else this.logger.warn(this.TAG,`video codeid is ${s}`),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`),this.tracks.videoTrack.samples.push(e),this.emit(d.DEMUX_COMPLETE);delete e.tagType}_avcSequenceHeaderParser(e){let t=this.tracks.videoTrack;if(!t)return;let s=0;t.meta||(t.meta=new r.VideoTrackMeta);let i=t.meta;i.configurationVersion=e[0],i.avcProfileIndication=e[1],i.profileCompatibility=e[2],i.avcLevelIndication=e[3]/10,i.nalUnitLength=1+(3&e[4]);let n=31&e[5];s=6;let o={};for(let t=0;t<n;t++){let t=255*e[s]+e[s+1];s+=2;let r=new Uint8Array(t);for(let i=0;i<t;i++)r[i]=e[s+i];let n="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),n+=t}i.codec=n,s+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let l=e[s];s++;for(let t=0;t<l;t++){let t=255*e[s]+e[s+1];s+=2;let i=new Uint8Array(t);for(let r=0;r<t;r++)i[r]=e[s+r];s+=t,this.tracks.videoTrack.meta.pps=i}Object.assign(i,a.SpsParser.toVideoMeta(o));const d=this._context.mediaInfo.video;d.codec=i.codec,d.profile=i.profile,d.level=i.level,d.chromaFormat=i.chromaFormat,d.frameRate=i.frameRate,d.parRatio=i.parRatio,d.width=d.width===i.presentWidth?d.width:i.presentWidth,d.height=d.height===i.presentHeight?d.width:i.presentHeight,i.duration=this._context.mediaInfo.duration*i.timescale,i.avcc=new Uint8Array(e.length),i.avcc.set(e),t.meta=i}_switchAudioSampleRate(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}_switchAudioSamplingFrequency(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}_switchAudioChannel(e){return[1,2][1&e]}_datasizeValidator(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}get loaderBuffer(){if(this._context.getInstance("LOADER_BUFFER"))return this._context.getInstance("LOADER_BUFFER");this.emit(d.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}t.default=u},"../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{static parse(e,t=""){let s={duration:0},r=e.split(/\r|\n/),a=(r=r.filter(e=>e)).shift();if(!a.match("#EXTM3U"))return null;for(a=r.shift();a;){let e=a.match(/#(.*):(.*)/);if(e&&e.length>2)switch(e[1]){case"EXT-X-VERSION":s.version=parseInt(e[2]);break;case"EXT-X-MEDIA-SEQUENCE":s.sequence=parseInt(e[2]);break;case"EXT-X-TARGETDURATION":s.targetduration=parseFloat(e[2]);break;case"EXTINF":i.parseFrag(e,r,s,t)}a=r.shift()}return s}static parseFrag(e,t,s,i){s.frags||(s.frags=[]);let r={start:s.duration,duration:1e3*parseFloat(e[2])};s.duration+=r.duration;let a=t.shift();a.match(/#(.*):(.*)/)&&(a=t.shift()),r.url=i+a,s.frags.push(r)}static parseURL(e){let t="",s=e.match(/(.*\/).*\.m3u8/);if(s&&s.length>0)for(let e=0;e<s.length;e++)s[e].match(/.*\/$/g)&&s[e].length>t.length&&(t=s[e]);return t}}t.default=i},"../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(/*! xgplayer-codec */"../xgplayer-codec/index.js"),r=s(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),a=s(/*! xgplayer-utils */"../xgplayer-utils/index.js");const n=a.EVENTS.DEMUX_EVENTS,o={1:["video","MPEG-1"],2:["video","MPEG-2"],27:["video","AVC.H264"],234:["video","VC-1"],3:["audio","MPEG-1"],4:["audio","MPEG-2"],15:["audio","MPEG-2.AAC"],17:["audio","MPEG-4.AAC"],128:["audio","LPCM"],129:["audio","AC3"],6:["audio","AC3"],130:["audio","DTS"],131:["audio","Dolby TrueHD"],132:["audio","AC3-Plus"],133:["audio","DTS-HD"],134:["audio","DTS-MA"],161:["audio","AC3-Plus-SEC"],162:["audio","DTS-HD-SEC"]};class l{constructor(e){this.configs=Object.assign({},e),this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}init(){this.on(n.DEMUX_START,this.demux.bind(this))}demux(){if(this.demuxing)return;let e=this.inputBuffer,t={pat:[],pmt:[]},s={};for(;e.length>=188;){for(;e.length>=1&&71!==e.array[0][e.offset];)e.shift(1);let i=e.shift(188),r=new a.Stream(i.buffer),n={};l.read(r,n,t),n.pes?(s[n.header.pid]||(s[n.header.pid]=[]),s[n.header.pid].push(n.pes),n.pes.ES.buffer=[n.pes.ES.buffer]):s[n.header.pid]&&s[n.header.pid][s[n.header.pid].length-1].ES.buffer.push(n.payload.stream)}for(let e=0;e<Object.keys(s).length;e++){let t=s[Object.keys(s)[e]];for(let i=0;i<t.length;i++)t[i].id=Object.keys(s)[e],t[i].ES.buffer=l.Merge(t[i].ES.buffer),"audio"===t[i].type?this.pushAudioSample(t[i]):"video"===t[i].type&&this.pushVideoSample(t[i])}this._hasAudioMeta&&this.emit(n.DEMUX_COMPLETE,"audio"),this._hasVideoMeta&&this.emit(n.DEMUX_COMPLETE,"video")}pushAudioSample(e){let t;this._tracks.audioTrack?t=this._tracks.audioTrack:(this._tracks.audioTrack=new r.AudioTrack,(t=this._tracks.audioTrack).meta=new a.AudioTrackMeta({audioSampleRate:e.ES.frequence,sampleRate:e.ES.frequence,channelCount:e.ES.channel,codec:"mp4a.40."+e.ES.audioObjectType,config:e.ES.audioConfig,id:2,sampleRateIndex:e.ES.frequencyIndex}),t.meta.refSampleDuration=Math.floor(1024/t.meta.audioSampleRate*t.meta.timescale),this._hasAudioMeta||(this._hasAudioMeta=!0,this.emit(n.METADATA_PARSED,"audio")));let s=new Uint8Array(e.ES.buffer.buffer.slice(e.ES.buffer.position,e.ES.buffer.length)),i=parseInt(e.pts/90),o=parseInt(e.pts/90),l=new a.AudioTrackSample({dts:i,pts:o,data:s});t.samples.push(l)}pushVideoSample(e){let t,s=i.Nalunit.getNalunits(e.ES.buffer);this._tracks.videoTrack?t=this._tracks.videoTrack:(this._tracks.videoTrack=new r.VideoTrack,(t=this._tracks.videoTrack).meta=new a.VideoTrackMeta);let o=0,d=!1,u=!1;for(let e=0;e<s.length;e++){let i=s[e];if(i.sps){if(t.sps&&l.compaireUint8(i.body,t.sps))continue;d=i,t.sps=i.body,t.meta.chromaFormat=d.sps.chroma_format,t.meta.codec="avc1.";for(var h=1;h<4;h++){var c=d.body[h].toString(16);c.length<2&&(c="0"+c),t.meta.codec+=c}t.meta.codecHeight=d.sps.codec_size.height,t.meta.codecWidth=d.sps.codec_size.width,t.meta.frameRate=d.sps.frame_rate,t.meta.id=1,t.meta.level=d.sps.level_string,t.meta.presentHeight=d.sps.present_size.height,t.meta.presentWidth=d.sps.present_size.width,t.meta.profile=d.sps.profile_string,t.meta.refSampleDuration=Math.floor(t.meta.timescale*(d.sps.frame_rate.fps_den/d.sps.frame_rate.fps_num)),t.meta.sarRatio=d.sps.sar_ratio?d.sps.sar_ratio:d.sps.par_ratio}else i.pps?(t.pps=i.body,u=i):o+=4+i.body.byteLength}d&&u&&(t.meta.avcc=i.Nalunit.getAvcc(d.body,u.body),this._hasVideoMeta||(this._hasVideoMeta=!0,this.emit(n.METADATA_PARSED,"video")));let f=new Uint8Array(o),p=0,m=!1;for(let e=0;e<s.length;e++){let t=s[e],i=t.body.byteLength;t.idr&&(m=!0),t.pps||t.sps||(f.set(new Uint8Array([i>>>24&255,i>>>16&255,i>>>8&255,255&i]),p),p+=4,f.set(t.body,p),p+=i)}let g=new a.VideoTrackSample({dts:parseInt(e.dts/90),pts:parseInt(e.pts/90),cts:(e.pts-e.dts)/90,originDts:e.dts,isKeyframe:m,data:f});t.samples.push(g)}static compaireUint8(e,t){if(e.byteLength!==t.byteLength)return!1;let s=!0;for(let i=0;i<e.byteLength;i++)e[i]!==t[i]&&(s=!1);return s}static Merge(e){let t,s=0,i=0;for(let t=0;t<e.length;t++)s+=e[t].length-e[t].position;t=new Uint8Array(s);for(let s=0;s<e.length;s++){let r=e[s];t.set(new Uint8Array(r.buffer,r.position),i),i+=r.length-r.position}return new a.Stream(t.buffer)}static read(e,t,s){l.readHeader(e,t),l.readPayload(e,t,s),"MEDIA"!==t.header.packet||1!==t.header.payload||t.unknownPIDs||(t.pes=l.PES(t))}static readPayload(e,t,s){let i=t.header.pid;switch(i){case 0:l.PAT(e,t,s);break;case 1:l.CAT(e,t,s);break;case 2:l.TSDT(e,t,s);break;case 8191:break;default:if(s.pat.some(e=>e.pid===i))l.PMT(e,t,s);else{let r=s.pmt?s.pmt.filter(e=>e.pid===i):[];r.length>0?l.Media(e,t,o[r[0].streamType][0]):t.unknownPIDs=!0}}}static readHeader(e,t){let s={};s.sync=e.readUint8();let i=e.readUint16();s.error=i>>>15,s.payload=i>>>14&1,s.priority=i>>>13&1,s.pid=8191&i,i=e.readUint8(),s.scrambling=i>>6&3,s.adaptation=i>>4&3,s.continuity=15&i,s.packet=0===s.pid?"PAT":"MEDIA",t.header=s}static PAT(e,t,s){let i={},r=e.readUint8();e.skip(r),r=e.readUint8(),i.tabelID=r,r=e.readUint16(),i.error=r>>>7,i.zero=r>>>6&1,i.sectionLength=4095&r,i.streamID=e.readUint16(),i.current=1&e.readUint8(),i.sectionNumber=e.readUint8(),i.lastSectionNumber=e.readUint8();let a=(i.sectionLength-9)/4,n=[];for(let t=0;t<a;t++){let t=e.readUint16(),s=8191&e.readUint16();n.push({program:t,pid:s,type:0===t?"network":"mapPID"})}n.length>0&&(s.pat=s.pat.concat(n)),i.list=n,i.program=e.readUint16(),i.pid=8191&e.readUint16(),t.payload=i}static PMT(e,t,s){let i={};t.header.packet="PMT";let r=e.readUint8();e.skip(r),r=e.readUint8(),i.tableID=r,r=e.readUint16(),i.sectionLength=4095&r,i.program=e.readUint16(),i.current=1&e.readUint8(),i.order=e.readUint8(),i.lastOrder=e.readUint8(),i.PCR_PID=8191&e.readUint16(),i.programLength=4095&e.readUint16();let a=(i.sectionLength-13)/5,n=[];for(let t=0;t<a;t++)n.push({streamType:e.readUint8(),pid:8191&e.readUint16(),es:4095&e.readUint16()});i.list=n,this.pmt||(this.pmt=[]),s.pmt=this.pmt.concat(n.map(e=>({pid:e.pid,es:e.es,streamType:e.streamType,program:i.program}))),t.payload=i}static Media(e,t,s){let i=t.header,r={};if(i.type=s,3===i.adaptation&&(r.adaptationLength=e.readUint8(),r.adaptationLength>0)){let t=e.readUint8();r.discontinue=t>>>7,r.access=t>>>6&1,r.priority=t>>>5&1,r.PCR=t>>>4&1,r.OPCR=t>>>3&1,r.splicePoint=t>>>2&1,r.transportPrivate=t>>>1&1,r.adaptationField=1&t;let s=e.position;if(1===r.PCR&&(r.programClockBase=e.readUint32()<<1,t=e.readUint16(),r.programClockBase|=t>>>15,r.programClockExtension=511&t),1===r.OPCR&&(r.originProgramClockBase=e.readUint32()<<1,t=e.readUint16(),r.originProgramClockBase+=t>>>15,r.originProgramClockExtension=511&t),1===r.splicePoint&&(r.spliceCountdown=e.readUint8()),1===r.transportPrivate){let t=e.readUint8(),s=[];for(let i=0;i<t;i++)s.push(e.readUint8())}if(1===r.adaptationField){let t=e.readUint8(),s=e.readUint8(),i=e.position,a=s>>>6&1,n=s>>>5&1;1===s>>>7&&(s=e.readUint16(),r.ltwValid=s>>>15,r.ltwOffset=61439&s),1===a&&(s=e.readUint24(),r.piecewiseRate=4194303&s),1===n&&(s=e.readInt8(),r.spliceType=s>>>4,r.dtsNextAU1=s>>>1&7,r.marker1=1&s,s=e.readUint16(),r.dtsNextAU2=s>>>1,r.marker2=1&s,s=e.readUint16(),r.dtsNextAU3=s),e.skip(t-1-(e.position-i))}let i=r.adaptationLength-1-(e.position-s);e.skip(i)}r.stream=new a.Stream(e.buffer.slice(e.position)),t.payload=r}static PES(e){let t={},s=e.payload.stream;if(1!==s.readUint24())t.ES={},t.ES.buffer=s;else{let e=s.readUint8();e>=224&&e<=239&&(t.type="video"),e>=192&&e<=223&&(t.type="audio");let i=s.readUint16();if(t.packetLength=i,"video"!==t.type&&"audio"!==t.type)throw new Error("format is not supported");{let e=s.readUint8();if(2!==e>>>6)throw new Error("error when parse pes header");e=s.readUint8(),t.ptsDTSFlag=e>>>6,t.escrFlag=e>>>5&1,t.esRateFlag=e>>>4&1,t.dsmFlag=e>>>3&1,t.additionalFlag=e>>>2&1,t.crcFlag=e>>>1&1,t.extensionFlag=1&e,t.pesHeaderLength=s.readUint8();let i=t.pesHeaderLength;if(2===t.ptsDTSFlag){let r=[];e=s.readUint8(),r.push(e>>>1&7),e=s.readUint16(),r.push(e>>>1),e=s.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2],i-=5,"video"===t.type&&(t.dts=t.pts)}if(3===t.ptsDTSFlag){let r=[];e=s.readUint8(),r.push(e>>>1&7),e=s.readUint16(),r.push(e>>>1),e=s.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2];let a=[];e=s.readUint8(),a.push(e>>>1&7),e=s.readUint16(),a.push(e>>>1),e=s.readUint16(),a.push(e>>>1),t.dts=a[0]<<30|a[1]<<15|a[2],i-=10}if(1===t.escrFlag){let r=[],a=[];e=s.readUint8(),r.push(e>>>3&7),r.push(3&e),e=s.readUint16(),r.push(e>>>13),r.push(3&e),e=s.readUint16(),r.push(e>>>13),a.push(3&e),e=s.readUint8(),a.push(e>>>1),t.escr=300*(r[0]<<30|r[1]<<28|r[2]<<15|r[3]<<13|r[4])+(a[0]<<7|a[1]),i-=6}if(1===t.esRateFlag&&(e=s.readUint24(),t.esRate=e>>>1&4194303,i-=3),1===t.dsmFlag)throw new Error("not support DSM_trick_mode");if(1===t.additionalFlag&&(e=s.readUint8(),t.additionalCopyInfo=127&e,i-=1),1===t.crcFlag&&(t.pesCRC=s.readUint16(),i-=2),1===t.extensionFlag)throw new Error("not support extension");i>0&&s.skip(i),t.ES=l.ES(s,t.type)}}return t}static ES(e,t){let s,i={};if("video"===t){if(1!==(s=e.readUint32())&&(e.back(4),1!==(s=e.readUint24())))throw new Error("h264 nal header parse failed");e.skip(2),i.buffer=e}else{if("audio"!==t)throw new Error(`ES ${t} is not supported`);{if((s=e.readUint16())>>>4!=4095)throw new Error("aac ES parse Error");const t=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];i.id=0==(s>>>3&1)?"MPEG-4":"MPEG-2",i.layer=s>>>1&3,i.absent=1&s,s=e.readUint16(),i.audioObjectType=1+(s>>>14&3),i.profile=i.audioObjectType-1,i.frequencyIndex=s>>>10&15,i.frequence=t[i.frequencyIndex],i.channel=s>>>6&7,i.frameLength=(3&s)<<11|e.readUint16()>>>5,i.audioConfig=l.getAudioConfig(i.audioObjectType,i.channel,i.frequencyIndex),e.skip(1),i.buffer=e}}return i}static TSDT(e,t,s){t.payload={}}static CAT(e,t,s){let i={};i.tableID=e.readUint8();let r=e.readUint16();i.sectionIndicator=r>>>7,i.sectionLength=4095&r,e.skip(2),r=e.readUint8(),i.version=r>>>3,i.currentNextIndicator=1&r,i.sectionNumber=e.readUint8(),i.lastSectionNumber=e.readUint8();let a=(this.sectionLength-9)/4,n=[];for(let e=0;e<a;e++)n.push({});i.crc32=e.readUint32(),t.payload=i}static getAudioConfig(e,t,s){let i,r,a=navigator.userAgent.toLowerCase();return/firefox/i.test(a)?s>=6?(e=5,i=new Array(4),r=s-3):(e=2,i=new Array(2),r=s):-1!==a.indexOf("android")?(e=2,i=new Array(2),r=s):(e=5,i=new Array(4),s>=6?r=s-3:(1===t&&(e=2,i=new Array(2)),r=s)),i[0]=e<<3,i[0]|=(14&s)>>1,i[1]=(1&s)<<7,i[1]|=t<<3,5===e&&(i[1]|=(14&r)>>1,i[2]=(1&r)<<7,i[2]|=8,i[3]=0),i}get inputBuffer(){return this._context.getInstance(this.configs.inputbuffer)}get _tracks(){return this._context.getInstance("TRACKS")}}t.default=l},"../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
  !*** ../xgplayer-demux/src/hls/playlist.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=e.autoclear||!1}get list(){return this._list}set baseURL(e){this.baseURL!==e&&(this.clear(),this._baseURL=e)}get baseURL(){return this._baseURL}push(e,t){this._ts[e]||(this._ts[e]={duration:t,downloaded:!1,downloading:!1,start:this.duration},this._list[this.duration]=e,this.duration+=t,this.fragLength+=1)}deleteFrag(e){this._ts[e]||(delete this._list[this._ts[e].start],delete this._ts[e],this.fragLength-=1)}pushM3U8(e){if(this.version=e.version,this.targetduration=e.targetduration,e.sequence>this.sequence){this.sequence=e.sequence;for(let t=0;t<e.frags.length;t++){let s=e.frags[t];this._ts[s.url]||this.push(s.url,s.duration)}}}downloaded(e,t){let s=this._ts[e];s&&(s.downloaded=t)}downloading(e,t){let s=this._ts[e];s&&(s.downloading=t)}getTsByName(e){return this._ts[e]}getTs(e){let t,s=Object.keys(this._list);if(void 0===e&&(e=this._lastget?this._lastget.time+this._lastget.duration:0),!(s.length<1||e>=this.duration)){s.sort((e,t)=>parseFloat(e)-parseFloat(t));for(let i=0;i<s.length&&e>=parseInt(s[i]);i++){let e=this._list[s[i]];t={url:e,downloaded:this._ts[e].downloaded,downloading:this._ts[e].downloading,time:parseInt(s[i]),duration:parseInt(this._ts[e].duration)},this.autoclear&&(delete this._ts[this._lastget.url],delete this._list[this._lastget.time]),this._lastget=t}return t}}clear(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0}}},"../xgplayer-loader/index.js":
/*!***********************************!*\
  !*** ../xgplayer-loader/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={FetchLoader:s(/*! ./src/fetch-loader */"../xgplayer-loader/src/fetch-loader.js").default}},"../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader/src/fetch-loader.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(/*! xgplayer-utils */"../xgplayer-utils/index.js").EVENTS.LOADER_EVENTS,r=0,a=1,n=2,o=3;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(i.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let s=this;this.url=e,this._canceled=!1;let i=this.getParams(t);return fetch(this.url,i).then(function(e){return s.status=e.status,s.loading=!0,s._onFetchResponse(e)})}_onFetchResponse(e){let t=this,s=this._context.getInstance(this.buffer);this._loaderTaskNo++;let l=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case n:e.json().then(e=>{t.loading=!1,t._canceled||(s?(s.push(e),t.emit(i.LOADER_COMPLETE,s)):t.emit(i.LOADER_COMPLETE,e))});break;case a:e.text().then(e=>{t.loading=!1,t._canceled||(s?(s.push(e),t.emit(i.LOADER_COMPLETE,s)):t.emit(i.LOADER_COMPLETE,e))});break;case o:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||(s?(s.push(new Uint8Array(e)),t.emit(i.LOADER_COMPLETE,s)):t.emit(i.LOADER_COMPLETE,e))});break;case r:default:return this._onReader(e.body.getReader(),l)}}_onReader(e,t){let s=this._context.getInstance(this.buffer);if(s||this._reader.cancel(),this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then(function(a){return a.done?(r.loading=!1,r.status=0,void r.emit(i.LOADER_COMPLETE,s)):r._canceled?void r._reader.cancel():(s.push(a.value),r.emit(i.LOADER_DATALOADED,s),r._onReader(e,t))}).catch(function(e){console.log(e)})}getParams(e){let t=Object.assign({},e),s=new Headers,i={method:"GET",headers:s,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&s.append(t,e[t])}return!1===t.cors&&(i.mode="same-origin"),t.withCredentials&&(i.credentials="include"),i}cancel(){this._reader&&(this._reader.cancel(),this._reader=null,this._canceled=!0)}}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(/*! xgplayer-utils */"../xgplayer-utils/index.js");class r{static size(e){return i.Buffer.writeUint32(e)}static initBox(e,t,...s){const a=new i.Buffer;return a.write(r.size(e),r.type(t),...s),a.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let s,i=8,a=r.mvhd(t.duration,t.timescale);s="video"===e?r.videoTrak(t):r.audioTrak(t);let n=r.mvex(t.duration,t.timescale||1e3,t.id);return[a,s,n].forEach(e=>{i+=e.byteLength}),r.initBox(i,"moov",a,s,n)}static mvhd(e,t=1e3){let s=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+s.length,"mvhd",new Uint8Array(s))}static videoTrak(e){let t=8,s=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),i=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[s,i].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",s,i)}static audioTrak(e){let t=8,s=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),i=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[s,i].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",s,i)}static tkhd(e){let t=e.id,s=e.duration,i=e.width,a=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,s>>>24&255,s>>>16&255,s>>>8&255,255&s,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,i>>>8&255,255&i,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new i.Buffer,s=e.duration,a=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,s>>24&255,s>>16&255,s>>8&255,255&s,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),t.buffer}static mdia(e){let t=8,s=r.mdhd(e.timescale,e.duration),i=r.hdlr(e.type),a=r.minf(e);return[s,i,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",s,i,a)}static mdhd(e=1e3,t){let s=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+s.byteLength,"mdhd",r.extension(0,0),s)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,s="video"===e.type?r.vmhd():r.smhd(),i=r.dinf(),a=r.stbl(e);return[s,i,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",s,i,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new i.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,s=r.stsd(e),i=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[s,i,a,n,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",s,i,a,n,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),s=r.esds(e.config);return r.initBox(8+t.byteLength+s.byteLength,"mp4a",t,s)}static esds(e=[43,146,8,0]){const t=e.length;let s=new i.Buffer,a=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return s.write(r.size(8+a.byteLength),r.type("esds"),a),s.buffer}static avc1(e){let t=new i.Buffer,s=e.width,a=e.height,n=e.parRatio.height,o=e.parRatio.width,l=e.avcc,d=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,s>>8&255,255&s,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),u=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),h=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+d.byteLength+l.byteLength+u.byteLength),r.type("avc1"),d,r.size(8+l.byteLength),r.type("avcC"),l,r.size(20),r.type("btrt"),u,r.size(16),r.type("pasp"),h),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e,t=1e3,s){let a=new i.Buffer,n=i.Buffer.writeUint32(e);return a.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),n,r.trex(s)),a.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,s=r.mfhd(),i=r.traf(e);return[s,i].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",s,i)}static mfhd(){let e=i.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,s=r.tfhd(e.id),i=r.tfdt(e.time),a=r.sdtp(e),n=r.trun(e,a.byteLength);return[s,i,n,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",s,i,n,a)}static tfhd(e){let t=i.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),i.Buffer.writeUint32(e))}static trun(e,t){let s=new i.Buffer,a=i.Buffer.writeUint32(e.samples.length),n=i.Buffer.writeUint32(92+16*e.samples.length+t);return s.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),e.samples.forEach(e=>{const t=e.flags;s.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),s.buffer}static sdtp(e){let t=new i.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const s=e.flags,i=s.isLeading<<6|s.dependsOn<<4|s.isDependedOn<<2|s.hasRedundancy;t.write(new Uint8Array([i]))}),t.buffer}static mdat(e){let t=new i.Buffer,s=8;e.samples.forEach(e=>{s+=e.size}),t.write(r.size(s),r.type("mdat"));let a=new Uint8Array(s),n=0;return a.set(t.buffer,n),n+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{a.set(e,n),n+=e.byteLength})}),a}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=s(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"),n=(i=a)&&i.__esModule?i:{default:i};const o=r.EVENTS.REMUX_EVENTS;class l{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(o.REMUX_MEDIA,this.remux.bind(this)),this.on(o.REMUX_METADATA,this.onMetaDataReady.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t,s,i=new r.Buffer,a=n.default.ftyp();if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");s=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");s=e}t=n.default.moov({type:e,meta:s.meta}),i.write(a,t);let l=this._context.getInstance("PRE_SOURCE_BUFFER"),d=l.getSource(e);d||(d=l.createSource(e)),d.mimetype=s.meta.codec,d.init=i,this.emit(o.INIT_SEGMENT,e)}calcDtsBase(e,t){if(!e.samples.length&&!t.samples.length)return;let s=1/0,i=1/0;e.samples&&e.samples.length&&(s=e.samples[0].dts),t.samples&&t.samples.length&&(i=t.samples[0].dts),this._dtsBase=Math.min(s,i),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let{samples:s}=t,i=-1;const a=[],l={samples:[]};for(;s.length;){const e=s.shift(),{isKeyframe:t}=e;let r,n,o=e.dts-this._dtsBase;-1===i&&(i=o),e.pts&&(r=(n=e.pts-this._dtsBase)-o),e.cts&&(n=e.cts+o,r=e.cts);let d={buffer:[],size:0};l.samples.push(d),d.buffer.push(e.data),d.size+=e.data.byteLength;let u=0;if(s.length>=1){u=s[0].dts-this._dtsBase-o}else u=a.length>=1?a[a.length-1].duration:this.videoMeta.refSampleDuration;this.videoAllDuration+=u,a.push({dts:o,cts:r,pts:n,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:u,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:o,type:"video"})}let d=new r.Buffer;const u=n.default.moof({id:t.meta.id,time:i,samples:a}),h=n.default.mdat(l);d.write(u,h),t.samples=[],t.length=0;let c=this._context.getInstance("PRE_SOURCE_BUFFER"),f=c.getSource("video");f||(f=c.createSource("video")),f.data.push(d),this.emit(o.MEDIA_SEGMENT,"video")}_remuxAudio(e){const{samples:t}=e;let s=-1,i=[];const a={samples:[]};if(!t||!t.length)return;let l=!1;for(;t.length;){let e=t.shift();const{data:r}=e;let n=e.dts-this._dtsBase;const o=n;l||(s=n,l=!0);let d=0;if(this.audioMeta.refSampleDurationFixed)d=this.audioMeta.refSampleDurationFixed;else if(t.length>=1){d=t[0].dts-this._dtsBase-n}else d=i.length>=1?i[i.length-1].duration:this.audioMeta.refSampleDuration;this.audioAllDuration+=d;const u={dts:n,pts:n,cts:0,size:r.byteLength,duration:d,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:o,type:"audio"};let h={buffer:[],size:0};h.buffer.push(r),h.size+=r.byteLength,a.samples.push(h),i.push(u)}const d=new r.Buffer,u=n.default.moof({id:e.meta.id,time:s,samples:i}),h=n.default.mdat(a);d.write(u,h),e.samples=[],e.length=0;let c=this._context.getInstance("PRE_SOURCE_BUFFER"),f=c.getSource("audio");f||(f=c.createSource("audio")),f.data.push(d),this.emit(o.MEDIA_SEGMENT,"audio",d)}initSilentAudio(e,t){const s=l.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:s,size:s.byteLength,originDts:e,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=l},"../xgplayer-utils/index.js":
/*!**********************************!*\
  !*** ../xgplayer-utils/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={Context:s(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:s(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:s(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:s(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:s(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:s(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,MediaInfo:s(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:s(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:s(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:s(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:s(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:s(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:s(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:s(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:s(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:s(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:s(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,s=arguments.length,i=Array(s>1?s-1:0),r=1;r<s;r++)i[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var l,d=i[Symbol.iterator]();!(a=(l=d.next()).done);a=!0){var u=l.value;t+=u.length}}catch(e){n=!0,o=e}finally{try{!a&&d.return&&d.return()}finally{if(n)throw o}}var h=new e(t),c=0,f=!0,p=!1,m=void 0;try{for(var g,_=i[Symbol.iterator]();!(f=(g=_.next()).done);f=!0){var y=g.value;h.set(y,c),c+=y.length}}catch(e){p=!0,m=e}finally{try{!f&&_.return&&_.return()}finally{if(p)throw m}}return h}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var i,r=s(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"),a=(i=r)&&i.__esModule?i:{default:i};e.exports=a.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},n=Object.assign({},i,r,a),o=[],l=[];for(let e in n)n.hasOwnProperty(e)&&o.push(n[e]);for(let e in n)n.hasOwnProperty(e)&&l.push(n[e]);t.default={ALLEVENTS:n,REMUX_EVENTS:a,DEMUX_EVENTS:r,LOADER_EVENTS:i,FlvAllowedEvents:o,HlsAllowedEvents:l}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/context.js ***!
  \****************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"),a=(i=r)&&i.__esModule?i:{default:i},n=s(/*! events */"../../node_modules/events/events.js");const o="__TO__";t.default=class{constructor(e=[]){this._emitter=new n.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new a.default,this.allowedEvents=e,this._hooks={}}getInstance(e){if(this._instanceMap[e])return this._instanceMap[e];throw new Error(`${e}实例尚未初始化`)}initInstance(e,...t){if(this._clsMap[e]){const s=new this._clsMap[e](...t);return this._instanceMap[e]=s,s.init&&s.init(),s}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const s=this._emitter,i=this._isMessageNameValid.bind(this),r=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.TAG=e,this._context=r}on(t,r){return i(t),this.listeners[t]?this.listeners[t].push(r):this.listeners[t]=[r],s.on(`${t}${o}${e}`,r),s.on(t,r)}before(e,t){i(e),r._hooks[e]?r._hooks[e].push(t):r._hooks[e]=[t]}once(t,r){return i(t),s.on(`${t}${o}${e}`,r),s.once(t,r)}emit(e,...t){i(e);const a=r._hooks[e];if(a)for(let e=0,t=a.length;e<t;e++){(0,a[e])()}return s.emit(e,...t)}emitTo(e,t,...r){return i(t),s.emit(`${t}${o}${e}`,...r)}off(e,t){return i(e),s.off(e,t)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let t in this.listeners)if(e(t)){const e=this.listeners[t]||[];for(let i=0;i<e.length;i++){const r=e[i];s.off(t,r)}}}destroy(){this.removeListeners(),delete r._instanceMap[e],super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=null,this._clsMap=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isle.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=i},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(s=>t[s].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),s=/(?:SymbianOS)/.test(e)||t,i=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),a=/(?:iPad|PlayBook)/.test(e)||i&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),n=/(?:iPhone)/.test(e)&&!a;return{isTablet:a,isPhone:n,isAndroid:i,isPc:!n&&!i&&!s,isSymbian:s,isWindowsPhone:t,isFireFox:r}},get isLe(){return i}};t.default=r},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/utf8.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{static decode(e){const t=[],s=e;let r=0;const a=e.length;for(;r<a;)if(s[r]<128)t.push(String.fromCharCode(s[r])),++r;else{if(s[r]<192);else if(s[r]<224){if(i._checkContinuation(s,r,1)){const e=(31&s[r])<<6|63&s[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(s[r]<240){if(i._checkContinuation(s,r,2)){const e=(15&s[r])<<12|(63&s[r+1])<<6|63&s[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(s[r]<248&&i._checkContinuation(s,r,3)){let e=(7&s[r])<<18|(63&s[r+1])<<12|(63&s[r+2])<<6|63&s[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,s){let i=e;if(t+s<i.length){for(;s--;)if(128!=(192&i[++t]))return!1;return!0}return!1}}t.default=i},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/media-info.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return i(e)}static isVideoReady(e){return!e.hasVideo||i(e.video)}static isAudioReady(e){return!e.hasAudio||i(e.video)}}t.default=r},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e){let t=i.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let s=Object.assign({},t,e);Object.entries(s).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=i},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let s=t.length-1,i=0,r=0,a=s,n=0;if(e<t[0].originDts)return n=-1;for(;r<=a;){if((i=r+Math.floor((a-r)/2))===s||e>t[i].lastSample.originDts&&e<t[i+1].originDts){n=i;break}t[i].originDts<e?r=i+1:a=i-1}return n}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,s=this._lastAppendLocation,i=0;-1!==s&&s<t.length&&e.originStartDts>=t[s].lastSample.originDts&&(s===t.length-1||s<t.length-1&&e.originStartDts<t[s+1].originStartDts)?i=s+1:t.length>0&&(i=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=i,this._list.splice(i,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),s=this._list[t].randomAccessPoints;for(;0===s.length&&t>0;)t--,s=this._list[t].randomAccessPoints;return s.length>0?s[s.length-1]:null}}},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/track-meta.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}};t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}}},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/track-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e){let t=i.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=i;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1}init(){let e=this;this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",t=>{e.addSourceBuffers()}),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",()=>{e.emit("TIME_UPDATE",this.container)}),this.container.addEventListener("waiting",()=>{e.emit("WAITING",this.container)})}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),s=this._context.getInstance("TRACKS");t=t.sources;let i=!1;for(let r=0,a=Object.keys(t).length;r<a;r++){let a=Object.keys(t)[r];if("audio"===a?e=s.audioTrack:"audio"===a&&(e=s.audioTrack),e){let s="audio"===a?21:40;e.meta&&e.meta.refSampleDuration&&(s=e.meta.refSampleDuration),t[a].data.length>=this.preloadTime/s&&(i=!0)}}if(i){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,s=Object.keys(t).length;e<s;e++){let s=Object.keys(t)[e],i=t[s],r="video"===s?"video/mp4;codecs="+i.mimetype:"audio/mp4;codecs="+i.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[s]=a,a.addEventListener("updateend",e=>{this.emit("SOURCE_UPDATE_END"),this.doAppend()}),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let s=Object.keys(this.sourceBuffers)[t],i=this.sourceBuffers[s];if(!i.updating){let t=e.sources[s];if(t&&!t.inited)i.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&i.appendBuffer(e.buffer.buffer)}}}}}},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/buffer.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),a=(i=r)&&i.__esModule?i:{default:i};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,a.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/stream.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),s=e%4;for(let e=0;e<t;e++)i.readByte(this.dataview,4);s>0&&i.readByte(this.dataview,s)}static readByte(e,t,s){let i;switch(t){case 1:i=s?e.getInt8(e.position):e.getUint8(e.position);break;case 2:i=s?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(s)throw new Error("not supported for readByte 3");i=e.getUint8(e.position)<<16,i|=e.getUint8(e.position+1)<<8,i|=e.getUint8(e.position+2);break;case 4:i=s?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(s)throw new Error("not supported for readBody 8");i=e.getUint32(e.position)<<32,i|=e.getUint32(e.position+4);break;default:i=""}return e.position+=t,i}readUint8(){return i.readByte(this.dataview,1)}readUint16(){return i.readByte(this.dataview,2)}readUint24(){return i.readByte(this.dataview,3)}readUint32(){return i.readByte(this.dataview,4)}readUint64(){return i.readByte(this.dataview,8)}readInt8(){return i.readByte(this.dataview,1,!0)}readInt16(){return i.readByte(this.dataview,2,!0)}readInt32(){return i.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=i},"./src/hls-vod.js":
/*!************************!*\
  !*** ./src/hls-vod.js ***!
  \************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=s(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),n=s(/*! xgplayer-loader */"../xgplayer-loader/index.js"),o=s(/*! xgplayer-codec */"../xgplayer-codec/index.js"),l=s(/*! xgplayer-remux/src/mp4/index */"../xgplayer-remux/src/mp4/index.js"),d=(i=l)&&i.__esModule?i:{default:i},u=s(/*! xgplayer-demux */"../xgplayer-demux/index.js");const h=r.EVENTS.LOADER_EVENTS,c=r.EVENTS.REMUX_EVENTS,f=r.EVENTS.DEMUX_EVENTS;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url="",this.baseurl="",this.sequence=0,this._playlist=null,this.retrytimes=this.configs.retrytimes||3,this.container=this.configs.container,this.preloadTime=this.configs.preloadTime||5,this._lastSeekTime=0}init(){this._context.registry("M3U8_BUFFER",a.XgBuffer),this._tsBuffer=this._context.registry("TS_BUFFER",a.XgBuffer)(),this._tracks=this._context.registry("TRACKS",a.Tracks)(),this._playlist=this._context.registry("PLAYLIST",u.Playlist)({autoclear:!0}),this._presource=this._context.registry("PRE_SOURCE_BUFFER",a.PreSource)(),this._compat=this._context.registry("COMPATIBILITY",o.Compatibility)(),this._context.registry("M3U8_LOADER",n.FetchLoader)({buffer:"M3U8_BUFFER",readtype:1}),this._tsloader=this._context.registry("TS_LOADER",n.FetchLoader)({buffer:"TS_BUFFER",readtype:3}),this._context.registry("TS_DEMUXER",u.TsDemuxer)({inputbuffer:"TS_BUFFER"}),this._context.registry("MP4_REMUXER",d.default),this.mse=this._context.registry("MSE",r.Mse)({container:this.container,preloadTime:this.preloadTime}),this.initEvents()}initEvents(){this.on(h.LOADER_COMPLETE,e=>{if("M3U8_BUFFER"===e.TAG){let t=u.M3U8Parser.parse(e.shift(),this.baseurl);this._playlist.pushM3U8(t),this.preloadTime||(this._playlist.targetduration?(this.preloadTime=this._playlist.targetduration,this.mse.preloadTime=this._playlist.targetduration):(this.preloadTime=5,this.mse.preloadTime=5));let s=this._playlist.getTs();s?(this._playlist.downloading(s.url,!0),this.emitTo("TS_LOADER",h.LADER_START,s.url)):this.retrytimes>0&&(this.retrytimes--,this.emitTo("M3U8_LOADER",h.LADER_START,this.url))}else"TS_BUFFER"===e.TAG&&(console.log("loaded"),this._preload(this.mse.container.currentTime),this._playlist.downloaded(this._tsloader.url,!0),this.emit(f.DEMUX_START))}),this.on(c.INIT_SEGMENT,e=>{this.mse.addSourceBuffers()}),this.on(c.MEDIA_SEGMENT,e=>{Object.keys(this.mse.sourceBuffers).length<1&&this.mse.addSourceBuffers(),this.mse.doAppend()}),this.on(c.REMUX_ERROR,e=>{console.log(e)}),this.on(f.METADATA_PARSED,e=>{let t=parseInt(this._playlist.duration);"video"===e?this._tracks.videoTrack.meta.duration=t:"audio"===e&&(this._tracks.audioTrack.meta.duration=t),this.emit(c.REMUX_METADATA,e)}),this.on(f.DEMUX_COMPLETE,()=>{this.emit(c.REMUX_MEDIA)}),this.on("TIME_UPDATE",e=>{this._preload(e.currentTime)})}seek(e){this._lastSeekTime=e,this._tsloader.cancel(),this._presource.sources.video&&(this._presource.sources.video.data=[]),this._presource.sources.audio&&(this._presource.sources.audio.data=[]),this._tracks.audioTrack&&(this._tracks.audioTrack.samples=[]),this._tracks.audioTrack&&(this._tracks.videoTrack.samples=[]),this._compat&&this._compat.reset(),this._tsBuffer&&(this._tsBuffer.array=[],this._tsBuffer.length=0,this._tsBuffer.offset=0),this._preload(e)}load(e){this.baseurl=u.M3U8Parser.parseURL(e),this.url=e,this.emitTo("M3U8_LOADER",h.LADER_START,e)}_preload(e){if(this._tsloader.loading)return;let t=this.mse.container;if(t.buffered.length<1){let e=this._playlist.getTs(0);!e||e.downloading||e.downloaded||(this._playlist.downloading(e.url,!0),this.emitTo("TS_LOADER",h.LADER_START,e.url))}else{let s=-1;e||(e=t.buffered.end(0));for(let i=0;i<t.buffered.length;i++)e>=t.buffered.start(i)&&e<t.buffered.end(i)&&(s=t.buffered.end(i));if(s<0){let t=this._playlist.getTs(1e3*e+1);!t||t.downloading||t.downloaded||(this._playlist.downloading(t.url,!0),this.emitTo("TS_LOADER",h.LADER_START,t.url))}else if(s<e+this.preloadTime){let t=this._playlist.getTs(1e3*s+1),i=t?(t.time+t.duration)/1e3:0;for(;t&&t.downloaded&&i<e+this.preloadTime;)i=(t=this._playlist.getTs(1e3*i+1))?(t.time+t.duration)/1e3:0;!t||t.downloading||t.downloaded||(this._playlist.downloading(t.url,!0),this.emitTo("TS_LOADER",h.LADER_START,t.url))}}}}},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HlsVodPlayer=void 0;var i=n(s(/*! xgplayer */"xgplayer")),r=s(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=n(s(/*! ./hls-vod */"./src/hls-vod.js"));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.HlsAllowedEvents,l=r.EVENTS.REMUX_EVENTS;class d extends i.default{constructor(e){super(e),this.hlsOps={},this.util=i.default.util,this.util.deepCopy(this.hlsOps,e),this._context=new r.Context(o),console.log(this)}get currentTime(){return super.currentTime}set currentTime(e){e=parseFloat(e),super.currentTime=parseInt(e),this._context&&this.__core__.seek(e)}_initEvents(){this.__core__.once(l.INIT_SEGMENT,()=>{const e=this._context.getInstance("MSE");super.start(e.url)}),this.once("canplay",()=>{this.play()})}_initSrcChangeHandler(){let e=this;Object.defineProperty(this,"src",{get:()=>e.currentSrc,set(t){e.config.url=t,e.paused?e.start(t):(e.pause(),e.once("pause",()=>{e.start(t)}),e.once("canplay",()=>{e.play()})),e.once("canplay",()=>{e.currentTime=0})},configurable:!0})}start(e=this.config.url){e&&(this.__core__=this._context.registry("HLS_LIVE_CONTROLLER",a.default)({container:this.video}),this._context.init(),this.__core__.load(e),this._initEvents(),this._initSrcChangeHandler())}}t.HlsVodPlayer=d,e.exports=d},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,s){e.exports=s(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!*************************!*\
  !*** external "Player" ***!
  \*************************/
/*! no static exports found */function(e,t){e.exports=window.Player}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9IbHNWb2RQbGF5ZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy9Vc2Vycy9qaWFuZ3l1cWluZy9EZXNrdG9wL1Byb2plY3RzL3hncGxheWVyL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy4uL3hncGxheWVyLWJ1ZmZlci9zcmMvYnVmZmVyLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci1idWZmZXIvc3JjL3ByZXNvdWNlLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci1idWZmZXIvc3JjL3RyYWNrLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci1jb2RlYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9IbHNWb2RQbGF5ZXIvLi4veGdwbGF5ZXItY29kZWMvc3JjL2FhYy9hYWMtaGVscGVyLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci1jb2RlYy9zcmMvY29tcGF0aWJpbGl0eS5qcyIsIndlYnBhY2s6Ly9IbHNWb2RQbGF5ZXIvLi4veGdwbGF5ZXItY29kZWMvc3JjL2gyNjQvbmFsdW5pdC9nb2xvbWIuanMiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy4uL3hncGxheWVyLWNvZGVjL3NyYy9oMjY0L25hbHVuaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy4uL3hncGxheWVyLWNvZGVjL3NyYy9oMjY0L25hbHVuaXQvc3BzLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci1kZW11eC9pbmRleC5qcyIsIndlYnBhY2s6Ly9IbHNWb2RQbGF5ZXIvLi4veGdwbGF5ZXItZGVtdXgvc3JjL2Zsdi9hbWYtcGFyc2VyLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci1kZW11eC9zcmMvZmx2L2luZGV4LmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci1kZW11eC9zcmMvaGxzL2RlbXV4ZXIvbTN1OHBhcnNlci5qcyIsIndlYnBhY2s6Ly9IbHNWb2RQbGF5ZXIvLi4veGdwbGF5ZXItZGVtdXgvc3JjL2hscy9kZW11eGVyL3RzLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci1kZW11eC9zcmMvaGxzL3BsYXlsaXN0LmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci1sb2FkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy4uL3hncGxheWVyLWxvYWRlci9zcmMvZmV0Y2gtbG9hZGVyLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci1yZW11eC9zcmMvbXA0L2ZtcDQuanMiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy4uL3hncGxheWVyLXJlbXV4L3NyYy9tcDQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy4uL3hncGxheWVyLXV0aWxzL2luZGV4LmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci11dGlscy9ub2RlX21vZHVsZXMvY29uY2F0LXR5cGVkLWFycmF5L2xpYi9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy4uL3hncGxheWVyLXV0aWxzL25vZGVfbW9kdWxlcy9jb25jYXQtdHlwZWQtYXJyYXkvbGliL2luZGV4LmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci11dGlscy9zcmMvY29uc3RhbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9IbHNWb2RQbGF5ZXIvLi4veGdwbGF5ZXItdXRpbHMvc3JjL2NvbnN0YW50cy93b3JrZXItY29tbWFuZHMuanMiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy4uL3hncGxheWVyLXV0aWxzL3NyYy9jb250ZXh0LmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci11dGlscy9zcmMvZW52L2lzbGUuanMiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy4uL3hncGxheWVyLXV0aWxzL3NyYy9lbnYvc25pZmZlci5qcyIsIndlYnBhY2s6Ly9IbHNWb2RQbGF5ZXIvLi4veGdwbGF5ZXItdXRpbHMvc3JjL2Vudi91dGY4LmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL21lZGlhLWluZm8uanMiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvbWVkaWEtc2FtcGxlLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL21lZGlhLXNlZ21lbnQtbGlzdC5qcyIsIndlYnBhY2s6Ly9IbHNWb2RQbGF5ZXIvLi4veGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy9tZWRpYS1zZWdtZW50LmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL3RyYWNrLW1ldGEuanMiLCJ3ZWJwYWNrOi8vSGxzVm9kUGxheWVyLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvdHJhY2stc2FtcGxlLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci11dGlscy9zcmMvbXNlL2luZGV4LmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci11dGlscy9zcmMvd3JpdGUvYnVmZmVyLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uLi94Z3BsYXllci11dGlscy9zcmMvd3JpdGUvc3RyZWFtLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uL3NyYy9obHMtdm9kLmpzIiwid2VicGFjazovL0hsc1ZvZFBsYXllci8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9IbHNWb2RQbGF5ZXIvZXh0ZXJuYWwgXCJQbGF5ZXJcIiJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlJlZmxlY3RPd25LZXlzIiwiUiIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJhcHBseSIsInRhcmdldCIsInJlY2VpdmVyIiwiYXJncyIsIkZ1bmN0aW9uIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25jYXQiLCJOdW1iZXJJc05hTiIsIk51bWJlciIsImlzTmFOIiwiRXZlbnRFbWl0dGVyIiwiaW5pdCIsInRoaXMiLCJfZXZlbnRzIiwidW5kZWZpbmVkIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCIkZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsIl9hZGRMaXN0ZW5lciIsInR5cGUiLCJsaXN0ZW5lciIsInByZXBlbmQiLCJldmVudHMiLCJleGlzdGluZyIsIndhcm5pbmciLCJUeXBlRXJyb3IiLCJuZXdMaXN0ZW5lciIsImVtaXQiLCJ1bnNoaWZ0IiwicHVzaCIsImxlbmd0aCIsIndhcm5lZCIsInciLCJFcnJvciIsIlN0cmluZyIsImVtaXR0ZXIiLCJjb3VudCIsImNvbnNvbGUiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJhcmd1bWVudHMiLCJmaXJlZCIsInJlbW92ZUxpc3RlbmVyIiwid3JhcEZuIiwiX29uY2VXcmFwIiwic3RhdGUiLCJ3cmFwcGVkIiwiX2xpc3RlbmVycyIsInVud3JhcCIsImV2bGlzdGVuZXIiLCJhcnIiLCJyZXQiLCJBcnJheSIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiY29weSIsInNldCIsImFyZyIsIlJhbmdlRXJyb3IiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlcnJvciIsImVyIiwiZXJyIiwibWVzc2FnZSIsImNvbnRleHQiLCJoYW5kbGVyIiwibGVuIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJvbiIsInByZXBlbmRMaXN0ZW5lciIsIm9uY2UiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdCIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsInNoaWZ0IiwiaW5kZXgiLCJwb3AiLCJzcGxpY2VPbmUiLCJvZmYiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJrZXlzIiwicmF3TGlzdGVuZXJzIiwiZXZlbnROYW1lcyIsIlRyYWNrIiwicmVxdWlyZSIsImRlZmF1bHQiLCJUcmFja3MiLCJBdWRpb1RyYWNrIiwiVmlkZW9UcmFjayIsIlhnQnVmZmVyIiwiUmVtdXhCdWZmZXIiLCJQcmVTb3VyY2UiLCJjb25zdHJ1Y3RvciIsImhpc3RvcnlMZW4iLCJhcnJheSIsIm9mZnNldCIsImRhdGEiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsIl9zaGlmdEJ1ZmZlciIsInNsaWNlIiwidG1wb2ZmIiwidG1wIiwidGVtcGxlbmd0aCIsImNsZWFyIiwiZGVzdHJveSIsInRvSW50Iiwic3RhcnQiLCJyZXRJbnQiLCJ2aWRlbyIsImF1ZGlvIiwiU291cmNlIiwibWltZXR5cGUiLCJzb3VyY2VzIiwiZ2V0U291cmNlIiwic291cmNlIiwiY3JlYXRlU291cmNlIiwiaWQiLCJzZXF1ZW5jZU51bWJlciIsInNhbXBsZXMiLCJkcm9wcGVkU2FtcGxlcyIsInJlc2V0IiwiZGlzdHJveSIsInN1cGVyIiwiVEFHIiwiZHJvcHBlZCIsImF1ZGlvVHJhY2siLCJ2aWRlb1RyYWNrIiwiTmFsdW5pdCIsIlNwc1BhcnNlciIsIkNvbXBhdGliaWxpdHkiLCJjb2RlYyIsImNoYW5uZWxDb3VudCIsIlJFTVVYX0VWRU5UUyIsIkVWRU5UUyIsIm5leHRBdWRpb0R0cyIsIm5leHRWaWRlb0R0cyIsImxhc3RBdWRpb1NhbXBsZXNMZW4iLCJsYXN0VmlkZW9TYW1wbGVzTGVuIiwibGFzdFZpZGVvRHRzIiwibGFzdEF1ZGlvRHRzIiwiYWxsQXVkaW9TYW1wbGVzQ291bnQiLCJhbGxWaWRlb1NhbXBsZXNDb3VudCIsIl9maXJzdEF1ZGlvU2FtcGxlIiwiX2ZpcnN0VmlkZW9TYW1wbGUiLCJmaWxsZWRBdWRpb1NhbXBsZXMiLCJmaWxsZWRWaWRlb1NhbXBsZXMiLCJiZWZvcmUiLCJSRU1VWF9NRURJQSIsImRvRml4IiwiaXNGaXJzdEF1ZGlvU2FtcGxlcyIsImlzRmlyc3RWaWRlb1NhbXBsZXMiLCJnZXRGaXJzdFNhbXBsZSIsImZpbHRJbnZhbGlkU2FtcGxlcyIsInJlY29yZFNhbXBsZXNDb3VudCIsImZpeFJlZlNhbXBsZUR1cmF0aW9uIiwibWV0YSIsImRvRml4VmlkZW8iLCJkb0ZpeEF1ZGlvIiwiZmlyc3QiLCJ2aWRlb1NhbXBsZXMiLCJmaXJzdFNhbXBsZSIsImZpcnN0RHRzIiwiZHRzIiwic2FtcGxlc0xlbiIsInZpZGVvRmlyc3REdHMiLCJnYXAiLCJyZWZTYW1wbGVEdXJhdGlvbiIsImZpbGxDb3VudCIsIk1hdGgiLCJmbG9vciIsImNsb25lZEZpcnN0U2FtcGxlIiwiYXNzaWduIiwicHRzIiwiY3RzIiwic2l6ZSIsImZpbGxGcmFtZUNvdW50IiwiY2xvbmVkU2FtcGxlIiwiY29tcHV0ZWQiLCJhYnMiLCJsYXN0RHRzIiwibGFzdFNhbXBsZUR1cmF0aW9uIiwiY3VycmVudCIsIm5leHQiLCJkdXJhdGlvbiIsImZpbGxGcmFtZUlkeCIsImZpbGxGcmFtZSIsInNwbGljZSIsImF1ZGlvU2FtcGxlcyIsInNpbGVudEZyYW1lIiwiQUFDIiwiZ2V0U2lsZW50RnJhbWUiLCJzb3J0QXVkaW9TYW1wbGVzIiwidmlkZW9GaXJzdFB0cyIsInNpbGVudFNhbXBsZUNvdW50Iiwic2lsZW50U2FtcGxlIiwiZGF0YXNpemUiLCJmaWx0ZXJlZCIsInJlZlNhbXBsZUR1cmF0aW9uRml4ZWQiLCJzaWxlbnRGcmFtZUNvdW50IiwiZnJhbWVJZHgiLCJpc1NpbGVudCIsImZpbmRGaXJzdFZpZGVvU2FtcGxlIiwiZmluZEZpcnN0QXVkaW9TYW1wbGUiLCJpc1ZpZGVvIiwiYWxsU2FtcGxlc0NvdW50IiwiZmlsbGVkU2FtcGxlc0NvdW50IiwiZmlsdGVyIiwic2FtcGxlIiwic29ydCIsImEiLCJiIiwic29ydGVkIiwiaXNLZXlmcmFtZSIsIl9jb250ZXh0IiwiZ2V0SW5zdGFuY2UiLCJ0cmFja3MiLCJ1aW50OGFycmF5IiwiX2J1ZmZlciIsIl9idWZmZXJJbmRleCIsIl90b3RhbEJ5dGVzIiwiX3RvdGFsQml0cyIsIl9jdXJyZW50V29yZCIsIl9jdXJyZW50V29yZEJpdHNMZWZ0IiwiX2ZpbGxDdXJyZW50V29yZCIsImJ1ZmZlckJ5dGVzTGVmdCIsImJ5dGVzUmVhZCIsIm1pbiIsIndvcmQiLCJzdWJhcnJheSIsIkRhdGFWaWV3IiwiYnVmZmVyIiwiZ2V0VWludDMyIiwicmVhZEJpdHMiLCJiaXRzIiwicmVzdWx0IiwiYml0c05lZWRMZWZ0IiwiYml0c1JlYWROZXh0IiwicmVzdWx0MiIsInJlYWRCb29sIiwicmVhZEJ5dGUiLCJfc2tpcExlYWRpbmdaZXJvIiwiemVyb0NvdW50IiwicmVhZFVFRyIsImxlYWRpbmdaZXJvcyIsInJlYWRTRUciLCJidWYiLCJkYXRhdmlldyIsImdldEludDMyIiwiZ2V0SW50MTYiLCJnZXRJbnQ4IiwiZ2V0QW5uZXhiTmFscyIsImdldEF2Y2NOYWxzIiwibmFscyIsImdldEhlYWRlclBvc2l0aW9uQW5uZXhCIiwicG9zIiwiZW5kIiwiaGVhZGVyIiwiaGVhZGVyTGVuZ3RoIiwic2tpcCIsInVuaXQiLCJib2R5IiwiYW5hbHlzZU5hbCIsIm5kciIsImlkciIsInNwcyIsInBhcnNlU1BTIiwicHBzIiwiU1BTUGFyc2VyIiwic3JjIiwic3JjTGVuZ3RoIiwiZHN0IiwiZHN0SWR4IiwicmJzcCIsIl9lYnNwMnJic3AiLCJnYiIsIkdvbG9tYiIsInByb2ZpbGVJZGMiLCJsZXZlbElkYyIsInByb2ZpbGVfc3RyaW5nIiwiZ2V0UHJvZmlsZVN0cmluZyIsImxldmVsX3N0cmluZyIsImdldExldmVsU3RyaW5nIiwiY2hyb21hX2Zvcm1hdF9pZGMiLCJjaHJvbWFfZm9ybWF0IiwiY2hyb21hX2Zvcm1hdF90YWJsZSIsImJpdF9kZXB0aCIsInNjYWxpbmdfbGlzdF9jb3VudCIsIl9za2lwU2NhbGluZ0xpc3QiLCJwaWNfb3JkZXJfY250X3R5cGUiLCJudW1fcmVmX2ZyYW1lc19pbl9waWNfb3JkZXJfY250X2N5Y2xlIiwicGljX3dpZHRoX2luX21ic19taW51czEiLCJwaWNfaGVpZ2h0X2luX21hcF91bml0c19taW51czEiLCJmcmFtZV9tYnNfb25seV9mbGFnIiwiZnJhbWVfY3JvcF9sZWZ0X29mZnNldCIsImZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0IiwiZnJhbWVfY3JvcF90b3Bfb2Zmc2V0IiwiZnJhbWVfY3JvcF9ib3R0b21fb2Zmc2V0IiwicGFyX3dpZHRoIiwicGFyX2hlaWdodCIsImZwcyIsImZwc19maXhlZCIsImZwc19udW0iLCJmcHNfZGVuIiwiYXNwZWN0X3JhdGlvX2lkYyIsInBhcl93X3RhYmxlIiwicGFyX2hfdGFibGUiLCJudW1fdW5pdHNfaW5fdGljayIsInRpbWVfc2NhbGUiLCJwYXJTY2FsZSIsImNyb3BfdW5pdF94IiwiY3JvcF91bml0X3kiLCJjb2RlY193aWR0aCIsImNvZGVjX2hlaWdodCIsInByZXNlbnRfd2lkdGgiLCJjZWlsIiwiY2hyb21hX2Zvcm1hdF9zdHJpbmciLCJnZXRDaHJvbWFGb3JtYXRTdHJpbmciLCJmcmFtZV9yYXRlIiwiZml4ZWQiLCJwYXJfcmF0aW8iLCJ3aWR0aCIsImhlaWdodCIsImNvZGVjX3NpemUiLCJwcmVzZW50X3NpemUiLCJsYXN0X3NjYWxlIiwibmV4dF9zY2FsZSIsImRlbHRhX3NjYWxlIiwidG9GaXhlZCIsImNocm9tYSIsInNwc0NvbmZpZyIsImNvZGVjV2lkdGgiLCJjb2RlY0hlaWdodCIsInByZXNlbnRXaWR0aCIsInByZXNlbnRIZWlnaHQiLCJwcm9maWxlIiwibGV2ZWwiLCJiaXREZXB0aCIsImNocm9tYUZvcm1hdCIsInBhclJhdGlvIiwiZnJhbWVSYXRlIiwiZnBzRGVuIiwiZnBzTnVtIiwidGltZXNjYWxlIiwiTTNVOFBhcnNlciIsIlRzRGVtdXhlciIsIlBsYXlsaXN0IiwiRmx2RGVtdXhlciIsIkRBVEFfVFlQRVMiLCJOVU1CRVIiLCJCT09MRUFOIiwiU1RSSU5HIiwiT0JKRUNUIiwiTUlYX0FSUkFZIiwiT0JKRUNUX0VORCIsIlNUUklDVF9BUlJBWSIsIkRBVEUiLCJMT05FX1NUUklORyIsInJlYWRPZmZzZXQiLCJyZXNvbHZlIiwibWV0YURhdGEiLCJwYXJzZVZhbHVlIiwiYm9keVNpemUiLCJyZXNldFN0YXR1cyIsInBhcnNlU3RyaW5nIiwic3RyTGVuIiwiZ2V0VWludDE2IiwiaXNMZSIsInN0ciIsIlVURjgiLCJkZWNvZGUiLCJwYXJzZURhdGUiLCJkdiIsInRzIiwiZ2V0RmxvYXQ2NCIsIkRhdGUiLCJwYXJzZU9iamVjdCIsImlzT2JqRW5kIiwicGFyc2VMb25nU3RyaW5nIiwiQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImdldFVpbnQ4Iiwib2JqRW5kU2l6ZSIsImFtZk9iaiIsImlzT2JqZWN0RW5kIiwiYW1mVmFyIiwiYXJyTGVuZ3RoIiwic2NyaXB0IiwiZGF0ZSIsImxvbmdTdHIiLCJERU1VWF9FVkVOVFMiLCJfZmlyc3RGcmFnbWVudExvYWRlZCIsIl90cmFja051bSIsIl9oYXNTY3JpcHQiLCJERU1VWF9TVEFSVCIsImRvUGFyc2VGbHYiLCJzdHJlYW1GbGFnIiwiaGFzVmlkZW8iLCJoYXNBdWRpbyIsImxvYWRlckJ1ZmZlciIsImNodW5rIiwiX3BhcnNlRmx2VGFnIiwiREVNVVhfQ09NUExFVEUiLCJwYXJzZUZsdkhlYWRlciIsImlzRmx2RmlsZSIsInBsYXlUeXBlIiwiZ2V0UGxheVR5cGUiLCJpbml0VmlkZW9UcmFjayIsImluaXRBdWRpb1RyYWNrIiwiREVNVVhfRVJST1IiLCJWaWRlb1RyYWNrTWV0YSIsIkF1ZGlvVHJhY2tNZXRhIiwiX3BhcnNlRmx2VGFnSGVhZGVyIiwiX3Byb2Nlc3NDaHVuayIsInRhZ1R5cGUiLCJsb2dnZXIiLCJ0aW1lc3RhbXAiLCJ0aW1lc3RhbXBFeHQiLCJfcGFyc2VTY3JpcHREYXRhIiwiX3BhcnNlQUFDRGF0YSIsIl9wYXJzZUhldmNEYXRhIiwiaW5mbyIsIkFNRlBhcnNlciIsIm9uTWV0YURhdGEiLCJtZWRpYUluZm8iLCJoc2FBdWRpbyIsIl9kYXRhc2l6ZVZhbGlkYXRvciIsIk1FRElBX0lORk8iLCJoYXNTcGVjaWZpY0NvbmZpZyIsImF1ZGlvc2FtcGxlcmF0ZSIsInNhbXBsZVJhdGUiLCJhdWRpb2NoYW5uZWxzIiwic2FtcGxlUmF0ZUluZGV4IiwiZnJhbWVyYXRlIiwiX2FhY1NlcXVlbmNlSGVhZGVyUGFyc2VyIiwib2JqZWN0VHlwZSIsIl9zd2l0Y2hBdWRpb1NhbXBsZVJhdGUiLCJmcmFtZUxlbmd0aCIsImRlcGVuZHNPbkNvcmVDb2RlciIsImV4dGVuc2lvbkZsYWdJbmRleCIsImV4dGVuc2lvblNhbXBsaW5nSW5kZXgiLCJjb25maWciLCJ1c2VyQWdlbnQiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ0b0xvd2VyQ2FzZSIsInNhbXBsaW5nSW5kZXgiLCJpbmRleE9mIiwidHJhY2siLCJmb3JtYXQiLCJfaGFzQXVkaW9TZXF1ZW5jZSIsIl9zd2l0Y2hBdWRpb1NhbXBsaW5nRnJlcXVlbmN5IiwiZnJhbWVMZW50aCIsImF1ZGlvU2FtcGxlUmF0ZSIsImF1ZGlvU2FtcGxlUmF0ZUluZGV4IiwidmFsaWRhdGUiLCJhYWNIZWFkZXIiLCJhdWRpb01lZGlhIiwiX2hhc1ZpZGVvU2VxdWVuY2UiLCJBVURJT19NRVRBREFUQV9DSEFOR0UiLCJNRVRBREFUQV9QQVJTRUQiLCJmcmFtZVR5cGUiLCJjb2RlY0lEIiwiYXZjUGFja2V0VHlwZSIsInBhcnNlSW50IiwibmFsdSIsInNpemVzIiwiYXZjY2xlbmd0aCIsIl9hdmNTZXF1ZW5jZUhlYWRlclBhcnNlciIsIlZJREVPX01FVEFEQVRBX0NIQU5HRSIsImNvbmZpZ3VyYXRpb25WZXJzaW9uIiwiYXZjUHJvZmlsZUluZGljYXRpb24iLCJwcm9maWxlQ29tcGF0aWJpbGl0eSIsImF2Y0xldmVsSW5kaWNhdGlvbiIsIm5hbFVuaXRMZW5ndGgiLCJudW1PZlNwcyIsImoiLCJjb2RlY1N0cmluZyIsImgiLCJ0b1N0cmluZyIsIm51bU9mUHBzIiwidG9WaWRlb01ldGEiLCJ2aWRlb01lZGlhIiwiYXZjYyIsInNhbXBsaW5nRnJlcXVlbmN5SW5kZXgiLCJfc3dpdGNoQXVkaW9DaGFubmVsIiwiZGF0YXNpemVDb25maXJtIiwidGV4dCIsImJhc2V1cmwiLCJyZWZzIiwic3BsaXQiLCJyZWYiLCJtYXRjaCIsInJlZm0iLCJ2ZXJzaW9uIiwic2VxdWVuY2UiLCJ0YXJnZXRkdXJhdGlvbiIsInBhcnNlRmxvYXQiLCJwYXJzZUZyYWciLCJmcmFncyIsImZyZWciLCJuZXh0bGluZSIsInVybCIsInVybHMiLCJTdHJlYW1UeXBlIiwiY29uZmlncyIsImRlbXV4aW5nIiwicGF0IiwicG10IiwiX2hhc1ZpZGVvTWV0YSIsIl9oYXNBdWRpb01ldGEiLCJkZW11eCIsImlucHV0QnVmZmVyIiwicGVzZXMiLCJ0c1N0cmVhbSIsIlN0cmVhbSIsInJlYWQiLCJwZXMiLCJwaWQiLCJFUyIsInBheWxvYWQiLCJzdHJlYW0iLCJlcGVzZXMiLCJNZXJnZSIsInB1c2hBdWRpb1NhbXBsZSIsInB1c2hWaWRlb1NhbXBsZSIsIl90cmFja3MiLCJmcmVxdWVuY2UiLCJjaGFubmVsIiwiYXVkaW9PYmplY3RUeXBlIiwiYXVkaW9Db25maWciLCJmcmVxdWVuY3lJbmRleCIsIkF1ZGlvVHJhY2tTYW1wbGUiLCJnZXROYWx1bml0cyIsInNhbXBsZUxlbmd0aCIsIm5hbCIsImNvbXBhaXJlVWludDgiLCJzYXJSYXRpbyIsInNhcl9yYXRpbyIsImdldEF2Y2MiLCJWaWRlb1RyYWNrU2FtcGxlIiwib3JpZ2luRHRzIiwiYnVmZmVycyIsInJlYWRIZWFkZXIiLCJyZWFkUGF5bG9hZCIsInBhY2tldCIsInVua25vd25QSURzIiwiUEVTIiwiUEFUIiwiQ0FUIiwiVFNEVCIsInNvbWUiLCJpdGVtIiwiUE1UIiwic3RzIiwiTWVkaWEiLCJzdHJlYW1UeXBlIiwic3luYyIsInJlYWRVaW50OCIsInJlYWRVaW50MTYiLCJwcmlvcml0eSIsInNjcmFtYmxpbmciLCJhZGFwdGF0aW9uIiwiY29udGludWl0eSIsInRhYmVsSUQiLCJ6ZXJvIiwic2VjdGlvbkxlbmd0aCIsInN0cmVhbUlEIiwic2VjdGlvbk51bWJlciIsImxhc3RTZWN0aW9uTnVtYmVyIiwiTiIsInByb2dyYW1OdW1iZXIiLCJwcm9ncmFtIiwidGFibGVJRCIsIm9yZGVyIiwibGFzdE9yZGVyIiwiUENSX1BJRCIsInByb2dyYW1MZW5ndGgiLCJlcyIsIm1hcCIsImFkYXB0YXRpb25MZW5ndGgiLCJkaXNjb250aW51ZSIsImFjY2VzcyIsIlBDUiIsIk9QQ1IiLCJzcGxpY2VQb2ludCIsInRyYW5zcG9ydFByaXZhdGUiLCJhZGFwdGF0aW9uRmllbGQiLCJfc3RhcnQiLCJwcm9ncmFtQ2xvY2tCYXNlIiwicmVhZFVpbnQzMiIsInByb2dyYW1DbG9ja0V4dGVuc2lvbiIsIm9yaWdpblByb2dyYW1DbG9ja0Jhc2UiLCJvcmlnaW5Qcm9ncmFtQ2xvY2tFeHRlbnNpb24iLCJzcGxpY2VDb3VudGRvd24iLCJ0cmFuc3BvcnRQcml2YXRlRGF0YSIsInBpZWNld2lzZSIsInNlYW1sZXNzIiwibHR3VmFsaWQiLCJsdHdPZmZzZXQiLCJyZWFkVWludDI0IiwicGllY2V3aXNlUmF0ZSIsInJlYWRJbnQ4Iiwic3BsaWNlVHlwZSIsImR0c05leHRBVTEiLCJtYXJrZXIxIiwiZHRzTmV4dEFVMiIsIm1hcmtlcjIiLCJkdHNOZXh0QVUzIiwibGFzdFN0dWZmaW5nIiwicGFja2V0TGVuZ3RoIiwicHRzRFRTRmxhZyIsImVzY3JGbGFnIiwiZXNSYXRlRmxhZyIsImRzbUZsYWciLCJhZGRpdGlvbmFsRmxhZyIsImNyY0ZsYWciLCJleHRlbnNpb25GbGFnIiwicGVzSGVhZGVyTGVuZ3RoIiwiTjEiLCJlc2NyIiwiZXgiLCJlc1JhdGUiLCJhZGRpdGlvbmFsQ29weUluZm8iLCJwZXNDUkMiLCJiYWNrIiwiZnEiLCJsYXllciIsImFic2VudCIsImdldEF1ZGlvQ29uZmlnIiwic2VjdGlvbkluZGljYXRvciIsImN1cnJlbnROZXh0SW5kaWNhdG9yIiwiY3JjMzIiLCJzYW1wbGVJbmRleCIsImV4dGVuc2lvblNhbXBsZUluZGV4IiwidGVzdCIsImlucHV0YnVmZmVyIiwiX2Jhc2VVUkwiLCJfbGlzdCIsIl90cyIsImZyYWdMZW5ndGgiLCJfbGFzdGdldCIsIl9hdWRvY2xlYXIiLCJhdXRvY2xlYXIiLCJiYXNlVVJMIiwiZG93bmxvYWRlZCIsImRvd25sb2FkaW5nIiwiZGVsZXRlRnJhZyIsInB1c2hNM1U4IiwiZnJhZyIsInRzbmFtZSIsImlzbG9hZGVkIiwibG9hZGluZyIsImdldFRzQnlOYW1lIiwiZ2V0VHMiLCJ0aW1lIiwidGltZWxpc3QiLCJGZXRjaExvYWRlciIsIkxPQURFUl9FVkVOVFMiLCJSRUFEX1NUUkVBTSIsIlJFQURfVEVYVCIsIlJFQURfSlNPTiIsIlJFQURfQlVGRkVSIiwic3RhdHVzIiwiX3JlYWRlciIsIl9jYW5jZWxlZCIsInJlYWR0eXBlIiwiX2xvYWRlclRhc2tObyIsIkxBREVSX1NUQVJUIiwibG9hZCIsIm9wdHMiLCJfdGhpcyIsInBhcmFtcyIsImdldFBhcmFtcyIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwiX29uRmV0Y2hSZXNwb25zZSIsInRhc2tubyIsIm9rIiwianNvbiIsIkxPQURFUl9DT01QTEVURSIsImFycmF5QnVmZmVyIiwiX29uUmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVhZGVyIiwiY2FuY2VsIiwidmFsIiwiZG9uZSIsIkxPQURFUl9EQVRBTE9BREVEIiwiY2F0Y2giLCJsb2ciLCJvcHRpb25zIiwiaGVhZGVycyIsIkhlYWRlcnMiLCJtZXRob2QiLCJjYWNoZSIsImNvbmZpZ0hlYWRlcnMiLCJhcHBlbmQiLCJjb3JzIiwid2l0aENyZWRlbnRpYWxzIiwiY3JlZGVudGlhbHMiLCJGbXA0IiwiQnVmZmVyIiwid3JpdGVVaW50MzIiLCJjb250ZW50Iiwid3JpdGUiLCJmbGFnIiwiaW5pdEJveCIsInRyYWsiLCJtdmhkIiwidmlkZW9UcmFrIiwiYXVkaW9UcmFrIiwibXZleCIsImZvckVhY2giLCJieXRlcyIsInRraGQiLCJtZGlhIiwic2FtcGxlcmF0ZSIsIm1lZGlhVGltZSIsIm1kaGQiLCJoZGxyIiwibWluZiIsImV4dGVuc2lvbiIsInZtaGQiLCJzbWhkIiwiZGluZiIsInN0YmwiLCJzdHNkIiwic3R0cyIsInN0c2MiLCJzdHN6Iiwic3RjbyIsIm1wNGEiLCJhdmMxIiwiZXNkcyIsImNvbmZpZ2xlbiIsImhTcGFjaW5nIiwidlNwYWNpbmciLCJidHJ0IiwicGFzcCIsInRyYWNrSUQiLCJtZWhkIiwidHJleCIsIm1maGQiLCJ0cmFmIiwidGZoZCIsInRmZHQiLCJzZHRwIiwidHJ1biIsInNkdHBMZW5ndGgiLCJzYW1wbGVDb3VudCIsImZsYWdzIiwiaXNMZWFkaW5nIiwiZGVwZW5kc09uIiwiaXNEZXBlbmRlZE9uIiwiaGFzUmVkdW5kYW5jeSIsImlzTm9uU3luYyIsIm51bSIsIm1kYXRCb3giLCJjaGFyQ29kZUF0IiwiTXA0UmVtdXhlciIsIl9kdHNCYXNlIiwiX2lzRHRzQmFzZUluaXRlZCIsIl9hdWRpb05leHREdHMiLCJfdmlkZW9OZXh0RHRzIiwiX3ZpZGVvU2VnbWVudExpc3QiLCJNZWRpYVNlZ21lbnRMaXN0IiwiX2F1ZGlvU2VnbWVudExpc3QiLCJicm93c2VyIiwic25pZmZlciIsIl9maWxsU2lsZW5jZUZyYW1lIiwidmlkZW9BbGxEdXJhdGlvbiIsImF1ZGlvQWxsRHVyYXRpb24iLCJyZW11eCIsIlJFTVVYX01FVEFEQVRBIiwib25NZXRhRGF0YVJlYWR5IiwiX2R0c0Jhc2VJbml0ZWQiLCJjYWxjRHRzQmFzZSIsIl9yZW11eFZpZGVvIiwiX3JlbXV4QXVkaW8iLCJzZWVrIiwibW9vdiIsImluaXRTZWdtZW50IiwiZnR5cCIsInByZXNvdXJjZWJ1ZmZlciIsIklOSVRfU0VHTUVOVCIsImF1ZGlvQmFzZSIsIkluZmluaXR5IiwidmlkZW9CYXNlIiwibXA0U2FtcGxlcyIsImF2Y1NhbXBsZSIsIm1kYXRTYW1wbGUiLCJzYW1wbGVEdXJhdGlvbiIsInZpZGVvTWV0YSIsIm1vb2ZNZGF0IiwibW9vZiIsIm1kYXQiLCJNRURJQV9TRUdNRU5UIiwiaXNGaXJzdER0c0luaXRlZCIsImF1ZGlvTWV0YSIsIm1wNFNhbXBsZSIsImluaXRTaWxlbnRBdWRpbyIsIl9hdWRpb01ldGEiLCJDb250ZXh0IiwiV09SS0VSX0NPTU1BTkRTIiwiTWVkaWFJbmZvIiwiTWVkaWFTYW1wbGUiLCJNZWRpYVNlZ21lbnQiLCJNc2UiLCJSZXN1bHRDb25zdHJ1Y3RvciIsInRvdGFsTGVuZ3RoIiwiX2xlbiIsImFycmF5cyIsIl9rZXkiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiaXRlcmF0b3IiLCJyZXR1cm4iLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJfYXJyIiwib2JqIiwiX2NvbmNhdCIsIl9jb25jYXQyIiwiTE9BREVSX0VSUk9SIiwiUkVNVVhfRVJST1IiLCJBTExFVkVOVFMiLCJGbHZBbGxvd2VkRXZlbnRzIiwiSGxzQWxsb3dlZEV2ZW50cyIsIkNPTlRFWFRfQ09NT01BTkRTIiwiT04iLCJPTkNFIiwiT0ZGIiwiRU1JVCIsIkRFU1RST1kiLCJESVJFQ1RfRU1JVF9GTEFHIiwiYWxsb3dlZEV2ZW50cyIsIl9lbWl0dGVyIiwiX2luc3RhbmNlTWFwIiwiX2Nsc01hcCIsIl9pbml0ZWQiLCJfaG9va3MiLCJ0YWciLCJpbml0SW5zdGFuY2UiLCJuZXdJbnN0YW5jZSIsInJlZ2lzdHJ5IiwiY2xzIiwiY2hlY2tNZXNzYWdlTmFtZSIsIl9pc01lc3NhZ2VOYW1lVmFsaWQiLCJzZWxmIiwibWVzc2FnZU5hbWUiLCJjYWxsYmFjayIsImJlZm9yZUxpc3QiLCJlbWl0VG8iLCJyZW1vdmVMaXN0ZW5lcnMiLCJoYXNPd24iLCJjYWxsYmFja3MiLCJkZXN0cm95SW5zdGFuY2VzIiwibGUiLCJzZXRJbnQxNiIsIkludDE2QXJyYXkiLCJvcyIsImlzUGMiLCJpc1RhYmxldCIsInVhIiwicmVnIiwiaWUiLCJmaXJmb3giLCJjaHJvbWUiLCJvcGVyYSIsInNhZmFyaSIsImlzV2luZG93c1Bob25lIiwiaXNTeW1iaWFuIiwiaXNBbmRyb2lkIiwiaXNGaXJlRm94IiwiaXNQaG9uZSIsIm91dCIsImlucHV0IiwiZnJvbUNoYXJDb2RlIiwiX2NoZWNrQ29udGludWF0aW9uIiwidWNzNCIsImpvaW4iLCJjaGVja0xlbmd0aCIsImlzT2JqZWN0RmlsbGVkIiwibWltZVR5cGUiLCJpc0NvbXBsZXRlIiwiaXNCYXNlSW5mb1JlYWR5IiwiaXNWaWRlb1JlYWR5IiwiaXNBdWRpb1JlYWR5IiwiX2RlZmF1bHQiLCJnZXREZWZhdWx0SW5mIiwiZW50cmllcyIsImsiLCJ2IiwiaXNSQVAiLCJfdHlwZSIsIl9sYXN0QXBwZW5kTG9jYXRpb24iLCJpc0VtcHR5IiwiX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlIiwiYmVnaW5EdHMiLCJsYXN0IiwibWlkIiwibGJvdW5kIiwidWJvdW5kIiwiaWR4IiwibGFzdFNhbXBsZSIsIl9zZWFyY2hOZWFyZXN0U2VnbWVudEFmdGVyIiwic2VnbWVudCIsImxhc3RBcHBlbmRJZHgiLCJpbnNlcnRJZHgiLCJvcmlnaW5TdGFydER0cyIsImdldExhc3RTZWdtZW50QmVmb3JlIiwiZ2V0TGFzdFNhbXBsZUJlZm9yZSIsImdldExhc3RSQVBCZWZvcmUiLCJzZWdtZW50SWR4IiwicmFuZG9tQWNjZXNzUG9pbnRzIiwic3RhcnREdHMiLCJlbmREdHMiLCJzdGFydFB0cyIsImVuZFB0cyIsIm9yaWdpbkVuZER0cyIsImFkZFJBUCIsImdldERlZmF1bHQiLCJjb250YWluZXIiLCJtZWRpYVNvdXJjZSIsInNvdXJjZUJ1ZmZlcnMiLCJwcmVsb2FkVGltZSIsIk1lZGlhU291cmNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJhZGRTb3VyY2VCdWZmZXJzIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmVhZHlTdGF0ZSIsImFkZCIsImR1ciIsIm1pbWUiLCJzb3VyY2VCdWZmZXIiLCJhZGRTb3VyY2VCdWZmZXIiLCJkb0FwcGVuZCIsInVwZGF0aW5nIiwiaW5pdGVkIiwiYXBwZW5kQnVmZmVyIiwidGVtcCIsImhleE51bSIsInBhZFN0YXJ0IiwicGFkU3RhcnQ0SGV4IiwibG9vcCIsInNpZ24iLCJyZXMiLCJyZWFkVWludDY0IiwicmVhZEludDE2IiwicmVhZEludDMyIiwiX3BsYXlsaXN0IiwicmV0cnl0aW1lcyIsIl9sYXN0U2Vla1RpbWUiLCJfdHNCdWZmZXIiLCJfcHJlc291cmNlIiwiX2NvbXBhdCIsIl90c2xvYWRlciIsIm1zZSIsImluaXRFdmVudHMiLCJtZGF0YSIsInBhcnNlIiwiX3ByZWxvYWQiLCJjdXJyZW50VGltZSIsInBhcnNlVVJMIiwiYnVmZmVyZWQiLCJjdXJyZW50YnVmZmVyZW5kIiwiZnJhZ2VuZCIsIkhsc1ZvZFBsYXllciIsIlBsYXllciIsImhsc09wcyIsInV0aWwiLCJkZWVwQ29weSIsIl9fY29yZV9fIiwiX2luaXRFdmVudHMiLCJwbGF5IiwiX2luaXRTcmNDaGFuZ2VIYW5kbGVyIiwiY3VycmVudFNyYyIsInBhdXNlZCIsInBhdXNlIiwiY29uZmlndXJhYmxlIiwiSGxzVm9kQ29udHJvbGxlciJdLCJtYXBwaW5ncyI6ImdDQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQTBEZixPQXJEQUYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVB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S3FiLE9BQU82RCxLQUNsQkEsSUFHTGxmLEtBQUtrOUIsU0FBV2w5QixLQUFLa04sU0FBUzhuQixTQUFTLHNCQUF1QjBJLFVBQTlDMTlCLENBQWdFLENBQUM4NUIsVUFBVzk1QixLQUFLeUcsUUFDakd6RyxLQUFLa04sU0FBU25OLE9BQ2RDLEtBQUtrOUIsU0FBU3pULEtBQUt2SyxHQUNuQmxmLEtBQUttOUIsY0FDTG45QixLQUFLcTlCLDBCLEVBcEVJUixlQXVFYmhnQyxFQUFPRCxRQUFVaWdDLEc7Ozs7Ozs7OzRDQzdFSGhnQyxFQUFPRCxRQUFVMmUsT0FBZSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiAkZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiAkZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIFJlZmxlY3RBcHBseSh0aGlzLmxpc3RlbmVyLCB0aGlzLnRhcmdldCwgYXJncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFRyYWNrOiByZXF1aXJlKCcuL3NyYy90cmFjaycpLmRlZmF1bHQsXG4gIFRyYWNrczogcmVxdWlyZSgnLi9zcmMvdHJhY2snKS5UcmFja3MsXG4gIEF1ZGlvVHJhY2s6IHJlcXVpcmUoJy4vc3JjL3RyYWNrJykuQXVkaW9UcmFjayxcbiAgVmlkZW9UcmFjazogcmVxdWlyZSgnLi9zcmMvdHJhY2snKS5WaWRlb1RyYWNrLFxuXG4gIFhnQnVmZmVyOiByZXF1aXJlKCcuL3NyYy9idWZmZXInKS5YZ0J1ZmZlcixcbiAgUmVtdXhCdWZmZXI6IHJlcXVpcmUoJy4vc3JjL2J1ZmZlcicpLlJlbXV4QnVmZmVyLFxuXG4gIFByZVNvdXJjZTogcmVxdWlyZSgnLi9zcmMvcHJlc291Y2UnKS5kZWZhdWx0XG59O1xuIiwiZXhwb3J0IGNsYXNzIFhnQnVmZmVyIHtcbiAgLyoqXG4gICAqIEEgYnVmZmVyIHRvIHN0b3JlIGxvYWRlZCBkYXRhLlxuICAgKlxuICAgKiBAY2xhc3MgTG9hZGVyQnVmZmVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBPcHRpb25hbCB0aGUgYnVmZmVyIHNpemVcbiAgICovXG4gIGNvbnN0cnVjdG9yIChsZW5ndGgpIHtcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aCB8fCAwXG4gICAgdGhpcy5oaXN0b3J5TGVuID0gbGVuZ3RoIHx8IDBcbiAgICB0aGlzLmFycmF5ID0gW11cbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdG8gcHVzaCBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZGF0YSAtIFRoZSBkYXRhIHRvIHB1c2ggaW50byB0aGUgYnVmZmVyXG4gICAqL1xuICBwdXNoIChkYXRhKSB7XG4gICAgdGhpcy5hcnJheS5wdXNoKGRhdGEpXG4gICAgdGhpcy5sZW5ndGggKz0gZGF0YS5ieXRlTGVuZ3RoXG4gICAgdGhpcy5oaXN0b3J5TGVuICs9IGRhdGEuYnl0ZUxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiB0byBzaGlmdCBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gVGhlIHNpemUgb2Ygc2hpZnQuXG4gICAqL1xuICBzaGlmdCAobGVuZ3RoKSB7XG4gICAgaWYgKHRoaXMuYXJyYXkubGVuZ3RoIDwgMSkge1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApXG4gICAgfVxuXG4gICAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2hpZnRCdWZmZXIoKVxuICAgIH1cbiAgICBpZiAoKHRoaXMub2Zmc2V0ICsgbGVuZ3RoKSA9PT0gdGhpcy5hcnJheVswXS5sZW5ndGgpIHtcbiAgICAgIGxldCByZXQgPSB0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aClcbiAgICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgICAgdGhpcy5hcnJheS5zaGlmdCgpXG4gICAgICB0aGlzLmxlbmd0aCAtPSBsZW5ndGhcbiAgICAgIHJldHVybiByZXRcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMub2Zmc2V0ICsgbGVuZ3RoKSA8IHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSB7XG4gICAgICBsZXQgcmV0ID0gdGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW5ndGgpXG4gICAgICB0aGlzLm9mZnNldCArPSBsZW5ndGhcbiAgICAgIHRoaXMubGVuZ3RoIC09IGxlbmd0aFxuICAgICAgcmV0dXJuIHJldFxuICAgIH1cblxuICAgIGxldCByZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgbGV0IHRtcG9mZiA9IDBcbiAgICB3aGlsZSAodGhpcy5hcnJheS5sZW5ndGggPiAwICYmIGxlbmd0aCA+IDApIHtcbiAgICAgIGlmICgodGhpcy5vZmZzZXQgKyBsZW5ndGgpIDwgdGhpcy5hcnJheVswXS5sZW5ndGgpIHtcbiAgICAgICAgbGV0IHRtcCA9IHRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKVxuICAgICAgICByZXQuc2V0KHRtcCwgdG1wb2ZmKVxuICAgICAgICB0aGlzLm9mZnNldCArPSBsZW5ndGhcbiAgICAgICAgdGhpcy5sZW5ndGggLT0gbGVuZ3RoXG4gICAgICAgIGxlbmd0aCA9IDBcbiAgICAgICAgYnJlYWtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCB0ZW1wbGVuZ3RoID0gdGhpcy5hcnJheVswXS5sZW5ndGggLSB0aGlzLm9mZnNldFxuICAgICAgICByZXQuc2V0KHRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSwgdG1wb2ZmKVxuICAgICAgICB0aGlzLmFycmF5LnNoaWZ0KClcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgICAgIHRtcG9mZiArPSB0ZW1wbGVuZ3RoXG4gICAgICAgIHRoaXMubGVuZ3RoIC09IHRlbXBsZW5ndGhcbiAgICAgICAgbGVuZ3RoIC09IHRlbXBsZW5ndGhcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGNsZWFyIHRoZSBidWZmZXIuXG4gICAqL1xuICBjbGVhciAoKSB7XG4gICAgdGhpcy5hcnJheSA9IFtdXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLmNsZWFyKClcbiAgICB0aGlzLmhpc3RvcnlMZW4gPSAwXG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gc2hpZnQgb25lIHVuaXQ4QXJyYXkuXG4gICAqL1xuICBfc2hpZnRCdWZmZXIgKCkge1xuICAgIHRoaXMubGVuZ3RoIC09IHRoaXMuYXJyYXlbMF0ubGVuZ3RoXG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgcmV0dXJuIHRoaXMuYXJyYXkuc2hpZnQoKVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgdWludDggZGF0YSB0byBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCAtIHRoZSBzdGFydCBwb3N0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gdGhlIGxlbmd0aCBvZiBkYXRhLlxuICAgKi9cbiAgdG9JbnQgKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICBsZXQgcmV0SW50ID0gMFxuICAgIGxldCBpID0gdGhpcy5vZmZzZXQgKyBzdGFydFxuICAgIHdoaWxlIChpIDwgdGhpcy5vZmZzZXQgKyBsZW5ndGggKyBzdGFydCkge1xuICAgICAgaWYgKGkgPCB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgICByZXRJbnQgPSByZXRJbnQgKiAyNTYgKyB0aGlzLmFycmF5WzBdW2ldXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYXJyYXlbMV0pIHtcbiAgICAgICAgcmV0SW50ID0gcmV0SW50ICogMjU2ICsgdGhpcy5hcnJheVsxXVtpIC0gdGhpcy5hcnJheVswXS5sZW5ndGhdXG4gICAgICB9XG5cbiAgICAgIGkrK1xuICAgIH1cbiAgICByZXR1cm4gcmV0SW50XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlbXV4QnVmZmVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMudmlkZW8gPSBbXVxuICAgIHRoaXMuYXVkaW8gPSBbXVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy52aWRlbyA9IFtdXG4gICAgdGhpcy5hdWRpbyA9IFtdXG4gIH1cbn1cbiIsImNsYXNzIFNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm1pbWV0eXBlID0gJyc7XG4gICAgdGhpcy5pbml0ID0gbnVsbDtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgfVxufVxuXG5jbGFzcyBQcmVTb3VyY2Uge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5zb3VyY2VzID0ge307XG4gIH1cblxuICBnZXRTb3VyY2UgKHNvdXJjZSkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZXNbc291cmNlXTtcbiAgfVxuXG4gIGNyZWF0ZVNvdXJjZSAobmFtZSkge1xuICAgIHRoaXMuc291cmNlc1tuYW1lXSA9IG5ldyBTb3VyY2UoKTtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2VzW25hbWVdO1xuICB9XG5cbiAgY2xlYXIgKCkge1xuICAgIHRoaXMuc291cmNlcyA9IHt9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByZVNvdXJjZTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3Rvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmlkID0gLTFcbiAgICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gMFxuICAgIHRoaXMuc2FtcGxlcyA9IFtdXG4gICAgdGhpcy5kcm9wcGVkU2FtcGxlcyA9IFtdXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdGhlIHRyYWNrLlxuICAgKi9cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMuc2VxdWVuY2VOdW1iZXIgPSAwXG4gICAgdGhpcy5zYW1wbGVzID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgfVxuICAvKipcbiAgICogZGVzdHJveSB0aGUgdHJhY2suXG4gICAqL1xuICBkaXN0cm95ICgpIHtcbiAgICB0aGlzLnJlc2V0KClcbiAgICB0aGlzLmlkID0gLTFcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXVkaW9UcmFjayBleHRlbmRzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3RvciBmb3IgYXVkaW8gdHJhY2suXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuVEFHID0gJ0F1ZGlvVHJhY2snXG4gICAgdGhpcy50eXBlID0gJ2F1ZGlvJ1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrIGV4dGVuZHMgVHJhY2sge1xuICAvKipcbiAgICogVGhlIGNvbnN0cnVjdG9yIGZvciB2aWRlbyB0cmFjay5cbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5UQUcgPSAnVmlkZW9UcmFjaydcbiAgICB0aGlzLnR5cGUgPSAndmlkZW8nXG4gICAgdGhpcy5kcm9wcGVkID0gMFxuICB9XG4gIC8qKlxuICAgKiByZXNldCB0aGUgdmlkZW8gdHJhY2suXG4gICAqL1xuICByZXNldCAoKSB7XG4gICAgdGhpcy5zZXF1ZW5jZU51bWJlciA9IDBcbiAgICB0aGlzLnNhbXBsZXMgPSBbXVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICAgIHRoaXMuZHJvcHBlZCA9IDBcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhY2tzIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuYXVkaW9UcmFjayA9IG51bGxcbiAgICB0aGlzLnZpZGVvVHJhY2sgPSBudWxsXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBOYWx1bml0OiByZXF1aXJlKCcuL3NyYy9oMjY0L25hbHVuaXQnKS5kZWZhdWx0LFxuICBTcHNQYXJzZXI6IHJlcXVpcmUoJy4vc3JjL2gyNjQvbmFsdW5pdC9zcHMnKS5kZWZhdWx0LFxuXG4gIENvbXBhdGliaWxpdHk6IHJlcXVpcmUoJy4vc3JjL2NvbXBhdGliaWxpdHknKS5kZWZhdWx0XG59O1xuIiwiXG5jbGFzcyBBQUMge1xuXG4gIHN0YXRpYyBnZXRTaWxlbnRGcmFtZShjb2RlYywgY2hhbm5lbENvdW50KSB7XG4gICAgaWYgKGNvZGVjID09PSAnbXA0YS40MC4yJykge1xuICAgICAgLy8gaGFuZGxlIExDLUFBQ1xuICAgICAgaWYgKGNoYW5uZWxDb3VudCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjMsIDB4ODBdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgyMSwgMHgwMCwgMHg0OSwgMHg5MCwgMHgwMiwgMHgxOSwgMHgwMCwgMHgyMywgMHg4MF0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDhlXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODAsIDB4MmMsIDB4ODAsIDB4MDgsIDB4MDIsIDB4MzhdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA1KSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgzOF0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgyLCAweDMwLCAweDA0LCAweDk5LCAweDAwLCAweDIxLCAweDkwLCAweDAyLCAweDAwLCAweGIyLCAweDAwLCAweDIwLCAweDA4LCAweGUwXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhhbmRsZSBIRS1BQUMgKG1wNGEuNDAuNSAvIG1wNGEuNDAuMjkpXG4gICAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICAgIC8vIGZmbXBlZyAteSAtZiBsYXZmaSAtaSBcImFldmFsc3JjPTA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgxLCAweDQwLCAweDIyLCAweDgwLCAweGEzLCAweDRlLCAweGU2LCAweDgwLCAweGJhLCAweDgsIDB4MCwgMHgwLCAweDAsIDB4MWMsIDB4NiwgMHhmMSwgMHhjMSwgMHhhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVlXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMikge1xuICAgICAgICAvLyBmZm1wZWcgLXkgLWYgbGF2ZmkgLWkgXCJhZXZhbHNyYz0wfDA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlX3YyIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgxLCAweDQwLCAweDIyLCAweDgwLCAweGEzLCAweDVlLCAweGU2LCAweDgwLCAweGJhLCAweDgsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHg5NSwgMHgwLCAweDYsIDB4ZjEsIDB4YTEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgICAgLy8gZmZtcGVnIC15IC1mIGxhdmZpIC1pIFwiYWV2YWxzcmM9MHwwfDA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlX3YyIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgxLCAweDQwLCAweDIyLCAweDgwLCAweGEzLCAweDVlLCAweGU2LCAweDgwLCAweGJhLCAweDgsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHg5NSwgMHgwLCAweDYsIDB4ZjEsIDB4YTEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFBQztcbiIsImltcG9ydCB7RVZFTlRTfSBmcm9tICd4Z3BsYXllci11dGlscydcbmltcG9ydCBBQUMgZnJvbSAnLi9hYWMvYWFjLWhlbHBlcidcblxuY29uc3Qge1JFTVVYX0VWRU5UU30gPSBFVkVOVFNcblxuY2xhc3MgQ29tcGF0aWJpbGl0eSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm5leHRBdWRpb0R0cyA9IDAgLy8g5qih5ouf5LiL5LiA5q616Z+z6aKR5pWw5o2u55qEZHRzXG4gICAgdGhpcy5uZXh0VmlkZW9EdHMgPSAwIC8vIOaooeaLn+S4i+S4gOauteinhumikeaVsOaNrueahGR0c1xuXG4gICAgdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuID0gMCAvLyDkuIrkuIDmrrXpn7PpopHmlbDmja7nmoTplb/luqZcbiAgICB0aGlzLmxhc3RWaWRlb1NhbXBsZXNMZW4gPSAwIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgdGhpcy5sYXN0VmlkZW9EdHMgPSAwIC8vIOS4iuS4gOautemfs+mikeaVsOaNrueahOmVv+W6plxuICAgIHRoaXMubGFzdEF1ZGlvRHRzID0gMCAvLyDkuIrkuIDmrrXop4bpopHmlbDmja7nmoTplb/luqZcblxuICAgIHRoaXMuYWxsQXVkaW9TYW1wbGVzQ291bnQgPSAwIC8vIOmfs+mikeaAu+aVsOaNrumHjyjljp/lp4vluKcpXG4gICAgdGhpcy5hbGxWaWRlb1NhbXBsZXNDb3VudCA9IDAgLy8g6KeG6aKR5oC75pWw5o2u6YePKOWOn+Wni+W4pylcblxuICAgIHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUgPSBudWxsXG4gICAgdGhpcy5fZmlyc3RWaWRlb1NhbXBsZSA9IG51bGxcblxuICAgIHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzID0gW10gLy8g6KGl5YWF6Z+z6aKR5bin77yI77yJXG4gICAgdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMgPSBbXSAvLyDooaXlhYXop4bpopHluKfvvIjvvIlcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMuYmVmb3JlKFJFTVVYX0VWRU5UUy5SRU1VWF9NRURJQSwgdGhpcy5kb0ZpeC5iaW5kKHRoaXMpKVxuICB9XG5cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMubmV4dEF1ZGlvRHRzID0gMCAvLyDmqKHmi5/kuIvkuIDmrrXpn7PpopHmlbDmja7nmoRkdHNcbiAgICB0aGlzLm5leHRWaWRlb0R0cyA9IDAgLy8g5qih5ouf5LiL5LiA5q616KeG6aKR5pWw5o2u55qEZHRzXG5cbiAgICB0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4gPSAwIC8vIOS4iuS4gOautemfs+mikeaVsOaNrueahOmVv+W6plxuICAgIHRoaXMubGFzdFZpZGVvU2FtcGxlc0xlbiA9IDAgLy8g5LiK5LiA5q616KeG6aKR5pWw5o2u55qE6ZW/5bqmXG5cbiAgICB0aGlzLmxhc3RWaWRlb0R0cyA9IDAgLy8g5LiK5LiA5q616Z+z6aKR5pWw5o2u55qE6ZW/5bqmXG4gICAgdGhpcy5sYXN0QXVkaW9EdHMgPSAwIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCA9IDAgLy8g6Z+z6aKR5oC75pWw5o2u6YePKOWOn+Wni+W4pylcbiAgICB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50ID0gMCAvLyDop4bpopHmgLvmlbDmja7ph48o5Y6f5aeL5binKVxuXG4gICAgdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSA9IG51bGxcbiAgICB0aGlzLl9maXJzdFZpZGVvU2FtcGxlID0gbnVsbFxuXG4gICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMgPSBbXSAvLyDooaXlhYXpn7PpopHluKfvvIjvvIlcbiAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcyA9IFtdIC8vIOihpeWFheinhumikeW4p++8iO+8iVxuICB9XG5cbiAgZG9GaXggKCkge1xuICAgIGNvbnN0IHsgaXNGaXJzdEF1ZGlvU2FtcGxlcywgaXNGaXJzdFZpZGVvU2FtcGxlcyB9ID0gdGhpcy5nZXRGaXJzdFNhbXBsZSgpXG5cbiAgICB0aGlzLmZpbHRJbnZhbGlkU2FtcGxlcygpXG5cbiAgICB0aGlzLnJlY29yZFNhbXBsZXNDb3VudCgpXG5cbiAgICBpZiAodGhpcy5fZmlyc3RWaWRlb1NhbXBsZSkge1xuICAgICAgdGhpcy5maXhSZWZTYW1wbGVEdXJhdGlvbih0aGlzLnZpZGVvVHJhY2subWV0YSwgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMpXG4gICAgfVxuICAgIGlmICh0aGlzLl9maXJzdEF1ZGlvU2FtcGxlKSB7XG4gICAgICB0aGlzLmZpeFJlZlNhbXBsZUR1cmF0aW9uKHRoaXMuYXVkaW9UcmFjay5tZXRhLCB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcylcbiAgICB9XG4gICAgdGhpcy5kb0ZpeFZpZGVvKGlzRmlyc3RWaWRlb1NhbXBsZXMpXG4gICAgdGhpcy5kb0ZpeEF1ZGlvKGlzRmlyc3RBdWRpb1NhbXBsZXMpXG4gIH1cblxuICBkb0ZpeFZpZGVvIChmaXJzdCkge1xuICAgIGxldCB7c2FtcGxlczogdmlkZW9TYW1wbGVzLCBtZXRhfSA9IHRoaXMudmlkZW9UcmFja1xuXG4gICAgaWYgKCF2aWRlb1NhbXBsZXMgfHwgIXZpZGVvU2FtcGxlcy5sZW5ndGggfHwgIXRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGNvbnNvbGUubG9nKGB2aWRlbyBsYXN0U2FtcGxlLCAke3ZpZGVvU2FtcGxlc1t2aWRlb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzfWApXG5cbiAgICBjb25zdCBmaXJzdFNhbXBsZSA9IHZpZGVvU2FtcGxlc1swXVxuICAgIGNvbnN0IGZpcnN0RHRzID0gZmlyc3RTYW1wbGUuZHRzXG5cbiAgICBjb25zdCBzYW1wbGVzTGVuID0gdmlkZW9TYW1wbGVzLmxlbmd0aDtcblxuICAgIC8vIHN0ZXAxLiDkv67lpI3kuI5hdWRpb+mmluW4p+W3rui3neWkquWkp+eahOmXrumimFxuICAgIGlmIChmaXJzdCAmJiB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlKSB7XG4gICAgICBjb25zdCB2aWRlb0ZpcnN0RHRzID0gdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5kdHNcbiAgICAgIGNvbnN0IGF1ZGlvRmlyc3REdHMgPSB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlLmR0c1xuICAgICAgY29uc3QgZ2FwID0gdmlkZW9GaXJzdER0cyAtIGF1ZGlvRmlyc3REdHNcbiAgICAgIGlmIChnYXAgPiAoMiAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pKSB7XG4gICAgICAgIGNvbnN0IGZpbGxDb3VudCA9IE1hdGguZmxvb3IoZ2FwIC8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbilcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGxDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgY2xvbmVkRmlyc3RTYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCBmaXJzdFNhbXBsZSkgLy8g6KeG6aKR5aS06YOo5bin57y65aSx6ZyA6KaB5aSN5Yi256ys5LiA5binXG4gICAgICAgICAgLy8g6YeN5paw6K6h566Xc2FtcGxl55qEZHRz5ZKMcHRzXG4gICAgICAgICAgY2xvbmVkRmlyc3RTYW1wbGUuZHRzID0gdmlkZW9GaXJzdER0cyAtIChpICsgMSkgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgICAgY2xvbmVkRmlyc3RTYW1wbGUucHRzID0gY2xvbmVkRmlyc3RTYW1wbGUuZHRzICsgY2xvbmVkRmlyc3RTYW1wbGUuY3RzXG5cbiAgICAgICAgICB2aWRlb1NhbXBsZXMudW5zaGlmdChjbG9uZWRGaXJzdFNhbXBsZSlcblxuICAgICAgICAgIHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgZHRzOiBjbG9uZWRGaXJzdFNhbXBsZS5kdHMsXG4gICAgICAgICAgICBzaXplOiBjbG9uZWRGaXJzdFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGdhcFxuICAgIC8vIHN0ZXAyLiDkv67lpI1zYW1wbGVz5q615LmL6Ze055qE6Ze06Led6Zeu6aKY44CBXG4gICAgaWYgKHRoaXMubmV4dFZpZGVvRHRzKSB7XG4gICAgICAvLyBzdGVwMS4g5aSE55CGc2FtcGxlc+auteS5i+mXtOeahOS4ouW4p+aDheWGtVxuICAgICAgLy8g5b2T5Y+R546wZHVyYXRpb27lt67ot53lpKfkuo4y5bin5pe26L+b6KGM6KGl5binXG4gICAgICBnYXAgPSBmaXJzdER0cyAtIHRoaXMubmV4dFZpZGVvRHRzXG4gICAgICBpZiAoZ2FwID4gKDIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgICBjb25zdCBmaWxsRnJhbWVDb3VudCA9IE1hdGguZmxvb3IoZ2FwIC8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbilcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGxGcmFtZUNvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjbG9uZWRTYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCB2aWRlb1NhbXBsZXNbMF0pXG4gICAgICAgICAgY29uc3QgY29tcHV0ZWQgPSBmaXJzdER0cyAtIChpICsgMSkgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG5cbiAgICAgICAgICBjbG9uZWRTYW1wbGUuZHRzID0gY29tcHV0ZWQgPiB0aGlzLm5leHRWaWRlb0R0cyA/IGNvbXB1dGVkIDogdGhpcy5uZXh0VmlkZW9EdHMgLy8g6KGl55qE56ys5LiA5bin5LiA5a6a6KaB5pivbmV4dFZpZGVvRHRzXG4gICAgICAgICAgY2xvbmVkU2FtcGxlLnB0cyA9IGNsb25lZFNhbXBsZS5kdHMgKyBjbG9uZWRTYW1wbGUuY3RzXG5cbiAgICAgICAgICB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcy51bnNoaWZ0KGNsb25lZFNhbXBsZSlcblxuICAgICAgICAgIHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgZHRzOiBjbG9uZWRTYW1wbGUuZHRzLFxuICAgICAgICAgICAgc2l6ZTogY2xvbmVkU2FtcGxlLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZ2FwKSA8IG1ldGEucmVmU2FtcGxlRHVyYXRpb24pIHtcbiAgICAgICAgLy8g5b2T5beu6Led5ZyoKy3kuIDluKfkuYvpl7Tml7blsIbnrKzkuIDluKfnmoRkdHPlvLrooYzlrprkvY3liLDmnJ/mnJvkvY3nva5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ+mHjeWumuS9jeinhumikeW4p2R0cycsIHZpZGVvU2FtcGxlc1swXS5kdHMsIHRoaXMubmV4dFZpZGVvRHRzKVxuICAgICAgICB2aWRlb1NhbXBsZXNbMF0uZHRzID0gdGhpcy5uZXh0VmlkZW9EdHNcbiAgICAgICAgdmlkZW9TYW1wbGVzWzBdLmN0cyA9IHZpZGVvU2FtcGxlc1swXS5jdHMgfHwgdmlkZW9TYW1wbGVzWzBdLnB0cyAtIHZpZGVvU2FtcGxlc1swXS5kdHNcbiAgICAgICAgdmlkZW9TYW1wbGVzWzBdLnB0cyA9IHZpZGVvU2FtcGxlc1swXS5kdHMgKyB2aWRlb1NhbXBsZXNbMF0uY3RzXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbGFzdER0cyA9IHZpZGVvU2FtcGxlc1t2aWRlb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzO1xuXG4gICAgY29uc3QgbGFzdFNhbXBsZUR1cmF0aW9uID0gdmlkZW9TYW1wbGVzLmxlbmd0aCA+PSAyID8gbGFzdER0cyAtIHZpZGVvU2FtcGxlc1t2aWRlb1NhbXBsZXMubGVuZ3RoIC0gMl0uZHRzIDogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuID0gc2FtcGxlc0xlblxuICAgIHRoaXMubmV4dFZpZGVvRHRzID0gbGFzdER0cyArIGxhc3RTYW1wbGVEdXJhdGlvblxuICAgIHRoaXMubGFzdFZpZGVvRHRzID0gbGFzdER0c1xuXG4gICAgLy8gc3RlcDIuIOS/ruWkjXNhbXBsZeauteS5i+WGheeahOmXtOi3nemXrumimFxuICAgIC8vIHN0ZXAzLiDkv67lpI1zYW1wbGVz5q615YaF6YOo55qEZHRz5byC5bi46Zeu6aKYXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZpZGVvU2FtcGxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudCA9IHZpZGVvU2FtcGxlc1tpXVxuICAgICAgY29uc3QgbmV4dCA9IHZpZGVvU2FtcGxlc1tpICsgMV1cblxuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IG5leHQuZHRzIC0gY3VycmVudC5kdHM7XG5cbiAgICAgIGlmIChkdXJhdGlvbiA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgLy8g5Lik5bin5LmL6Ze06Ze06ZqU5aSq5aSn77yM6ZyA6KaB6KGl56m655m95binXG4gICAgICAgIGxldCBmaWxsRnJhbWVDb3VudCA9IE1hdGguZmxvb3IoZHVyYXRpb24gLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgIGxldCBmaWxsRnJhbWVJZHggPSAwXG4gICAgICAgIHdoaWxlIChmaWxsRnJhbWVJZHggPCBmaWxsRnJhbWVDb3VudCkge1xuICAgICAgICAgIGNvbnN0IGZpbGxGcmFtZSA9IE9iamVjdC5hc3NpZ24oe30sIG5leHQpXG4gICAgICAgICAgZmlsbEZyYW1lLmR0cyA9IGN1cnJlbnQuZHRzICsgKGZpbGxGcmFtZUlkeCArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgIGZpbGxGcmFtZS5wdHMgPSBmaWxsRnJhbWUuZHRzICsgZmlsbEZyYW1lLmN0c1xuXG4gICAgICAgICAgdmlkZW9TYW1wbGVzLnNwbGljZShpLCAwLCBmaWxsRnJhbWUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogZmlsbEZyYW1lLmR0cyxcbiAgICAgICAgICAgIHNpemU6IGZpbGxGcmFtZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgZmlsbEZyYW1lSWR4KytcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcyA9IHZpZGVvU2FtcGxlcztcbiAgfVxuXG4gIGRvRml4QXVkaW8gKGZpcnN0KSB7XG4gICAgbGV0IHtzYW1wbGVzOiBhdWRpb1NhbXBsZXMsIG1ldGF9ID0gdGhpcy5hdWRpb1RyYWNrXG5cbiAgICBpZiAoIWF1ZGlvU2FtcGxlcyB8fCAhYXVkaW9TYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKGBhdWRpbyBsYXN0U2FtcGxlLCAke2F1ZGlvU2FtcGxlc1thdWRpb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzfWApXG5cbiAgICBjb25zdCBzYW1wbGVzTGVuID0gYXVkaW9TYW1wbGVzLmxlbmd0aDtcbiAgICBjb25zdCBzaWxlbnRGcmFtZSA9IEFBQy5nZXRTaWxlbnRGcmFtZShtZXRhLmNvZGVjLCBtZXRhLmNoYW5uZWxDb3VudClcblxuICAgIGNvbnN0IGZpcnN0U2FtcGxlID0gdGhpcy5fZmlyc3RBdWRpb1NhbXBsZVxuXG4gICAgLy8g5a+5YXVkaW9TYW1wbGVz5oyJ54WnZHRz5YGa5o6S5bqPXG4gICAgYXVkaW9TYW1wbGVzID0gQ29tcGF0aWJpbGl0eS5zb3J0QXVkaW9TYW1wbGVzKGF1ZGlvU2FtcGxlcylcblxuICAgIC8vIHN0ZXAwLiDpppbluKfkuI52aWRlb+mmluW4p+mXtOi3neWkp+eahOmXrumimFxuICAgIGlmICh0aGlzLl9maXJzdFZpZGVvU2FtcGxlICYmIGZpcnN0KSB7XG4gICAgICBjb25zdCB2aWRlb0ZpcnN0UHRzID0gdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5wdHMgPyB0aGlzLl9maXJzdFZpZGVvU2FtcGxlLnB0cyA6IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzICsgdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5jdHNcblxuICAgICAgaWYgKGZpcnN0U2FtcGxlLmR0cyAtIHZpZGVvRmlyc3RQdHMgPiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNpbGVudFNhbXBsZUNvdW50ID0gTWF0aC5mbG9vcigoZmlyc3RTYW1wbGUuZHRzIC0gdmlkZW9GaXJzdFB0cykgLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lsZW50U2FtcGxlQ291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHNpbGVudFNhbXBsZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IHNpbGVudEZyYW1lLFxuICAgICAgICAgICAgZGF0YXNpemU6IHNpbGVudEZyYW1lLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICBkdHM6IGZpcnN0U2FtcGxlLmR0cyAtIChpICsgMSkgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uLFxuICAgICAgICAgICAgZmlsdGVyZWQ6IDBcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdWRpb1NhbXBsZXMudW5zaGlmdChzaWxlbnRTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogc2lsZW50U2FtcGxlLmR0cyxcbiAgICAgICAgICAgIHNpemU6IHNpbGVudFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGdhcFxuICAgIGNvbnN0IGZpcnN0RHRzID0gYXVkaW9TYW1wbGVzWzBdLmR0c1xuXG4gICAgaWYgKHRoaXMubmV4dEF1ZGlvRHRzKSB7XG4gICAgICAvLyBzdGVwMS4g5aSE55CGc2FtcGxlc+auteS5i+mXtOeahOS4ouW4p+aDheWGtVxuICAgICAgLy8g5b2T5Y+R546wZHVyYXRpb27lt67ot53lpKfkuo4x5bin5pe26L+b6KGM6KGl5binXG4gICAgICBnYXAgPSBmaXJzdER0cyAtIHRoaXMubmV4dEF1ZGlvRHRzXG5cbiAgICAgIGlmIChNYXRoLmFicyhnYXApID4gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiAmJiBzYW1wbGVzTGVuID09PSAxICYmIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9PT0gMSkge1xuICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgPSB1bmRlZmluZWRcbiAgICAgIH1cblxuICAgICAgaWYgKGdhcCA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgaWYgKHNhbXBsZXNMZW4gPT09IDEgJiYgdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuID09PSAxKSB7XG4gICAgICAgICAgLy8g5aaC5p6cc2FtcGxl55qEbGVuZ3Ro5LiA55u05pivMe+8jOiAjOS4lOS4gOebtOS4jeespuWQiHJlZlNhbXBsZUR1cmF0aW9u77yM6ZyA6KaB5Yqo5oCB5L+u5pS5cmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgPSBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgIT09IHVuZGVmaW5lZCA/IG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCArIGdhcCA6IG1ldGEucmVmU2FtcGxlRHVyYXRpb24gKyBnYXBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBzaWxlbnRGcmFtZUNvdW50ID0gTWF0aC5mbG9vcihnYXAgLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWxlbnRGcmFtZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVkID0gZmlyc3REdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgICAgY29uc3Qgc2lsZW50U2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgYXVkaW9TYW1wbGVzWzBdLCB7XG4gICAgICAgICAgICAgIGR0czogY29tcHV0ZWQgPiB0aGlzLm5leHRBdWRpb0R0cyA/IGNvbXB1dGVkIDogdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgICBkdHM6IHNpbGVudFNhbXBsZS5kdHMsXG4gICAgICAgICAgICAgIHNpemU6IHNpbGVudFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcy51bnNoaWZ0KHNpbGVudFNhbXBsZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZ2FwKSB7XG4gICAgICAgIC8vIOW9k+W3rui3neWcqCstMeW4p+S5i+mXtOaXtuWwhuesrDHluKfnmoRkdHPlvLrooYzlrprkvY3liLDmnJ/mnJvkvY3nva5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ+mHjeWumuS9jemfs+mikeW4p2R0cycsIGF1ZGlvU2FtcGxlc1swXS5kdHMsIHRoaXMubmV4dEF1ZGlvRHRzKVxuICAgICAgICBhdWRpb1NhbXBsZXNbMF0uZHRzID0gdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgICAgYXVkaW9TYW1wbGVzWzBdLnB0cyA9IHRoaXMubmV4dEF1ZGlvRHRzXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGxhc3REdHMgPSBhdWRpb1NhbXBsZXNbYXVkaW9TYW1wbGVzLmxlbmd0aCAtIDFdLmR0cztcbiAgICBjb25zdCBsYXN0U2FtcGxlRHVyYXRpb24gPSBhdWRpb1NhbXBsZXMubGVuZ3RoID49IDIgPyBsYXN0RHRzIC0gYXVkaW9TYW1wbGVzW2F1ZGlvU2FtcGxlcy5sZW5ndGggLSAyXS5kdHMgOiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG5cbiAgICB0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4gPSBzYW1wbGVzTGVuO1xuICAgIHRoaXMubmV4dEF1ZGlvRHRzID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkID8gbGFzdER0cyArIG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCA6IGxhc3REdHMgKyBsYXN0U2FtcGxlRHVyYXRpb25cbiAgICB0aGlzLmxhc3RBdWRpb0R0cyA9IGxhc3REdHNcblxuICAgIC8vIHN0ZXAzLiDkv67lpI1zYW1wbGVz5q615YaF6YOo55qEZHRz5byC5bi46Zeu6aKYXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGF1ZGlvU2FtcGxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudCA9IGF1ZGlvU2FtcGxlc1tpXVxuICAgICAgY29uc3QgbmV4dCA9IGF1ZGlvU2FtcGxlc1tpICsgMV1cblxuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IG5leHQuZHRzIC0gY3VycmVudC5kdHM7XG5cbiAgICAgIGlmIChkdXJhdGlvbiA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgLy8g5Lik5bin5LmL6Ze06Ze06ZqU5aSq5aSn77yM6ZyA6KaB6KGl56m655m95binXG4gICAgICAgIGxldCBzaWxlbnRGcmFtZUNvdW50ID0gTWF0aC5mbG9vcihkdXJhdGlvbiAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG4gICAgICAgIGxldCBmcmFtZUlkeCA9IDBcblxuICAgICAgICB3aGlsZSAoZnJhbWVJZHggPCBzaWxlbnRGcmFtZUNvdW50KSB7XG4gICAgICAgICAgY29uc3Qgc2lsZW50U2FtcGxlID0ge1xuICAgICAgICAgICAgZGF0YTogc2lsZW50RnJhbWUsXG4gICAgICAgICAgICBkYXRhc2l6ZTogc2lsZW50RnJhbWUuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIGR0czogY3VycmVudC5kdHMgKyAoZnJhbWVJZHggKyAxKSAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24sXG4gICAgICAgICAgICBmaWx0ZXJlZDogMCxcbiAgICAgICAgICAgIGlzU2lsZW50OiB0cnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXVkaW9TYW1wbGVzLnNwbGljZShpLCAwLCBzaWxlbnRTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogc2lsZW50U2FtcGxlLmR0cyxcbiAgICAgICAgICAgIHNpemU6IHNpbGVudFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgZnJhbWVJZHgrK1xuICAgICAgICAgIGkrKyAvLyDkuI3lr7npnZnpn7PluKflgZrmr5TovoNcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzID0gQ29tcGF0aWJpbGl0eS5zb3J0QXVkaW9TYW1wbGVzKGF1ZGlvU2FtcGxlcylcbiAgfVxuXG4gIGdldEZpcnN0U2FtcGxlICgpIHtcbiAgICAvLyDojrflj5Z2aWRlb+WSjGF1ZGlv55qE6aaW5bin5pWw5o2uXG4gICAgbGV0IHtzYW1wbGVzOiB2aWRlb1NhbXBsZXN9ID0gdGhpcy52aWRlb1RyYWNrXG4gICAgbGV0IHtzYW1wbGVzOiBhdWRpb1NhbXBsZXN9ID0gdGhpcy5hdWRpb1RyYWNrXG5cbiAgICBsZXQgaXNGaXJzdFZpZGVvU2FtcGxlcyA9IGZhbHNlO1xuICAgIGxldCBpc0ZpcnN0QXVkaW9TYW1wbGVzID0gZmFsc2U7XG5cbiAgICBpZiAoIXRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUgJiYgdmlkZW9TYW1wbGVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fZmlyc3RWaWRlb1NhbXBsZSA9IENvbXBhdGliaWxpdHkuZmluZEZpcnN0VmlkZW9TYW1wbGUodmlkZW9TYW1wbGVzKVxuICAgICAgaXNGaXJzdFZpZGVvU2FtcGxlcyA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUgJiYgYXVkaW9TYW1wbGVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSA9IENvbXBhdGliaWxpdHkuZmluZEZpcnN0QXVkaW9TYW1wbGUoYXVkaW9TYW1wbGVzKSAvLyDlr7vmib5kdHPmnIDlsI/nmoTluKfkvZzkuLrpppbkuKrpn7PpopHluKdcbiAgICAgIGlzRmlyc3RBdWRpb1NhbXBsZXMgPSB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzRmlyc3RWaWRlb1NhbXBsZXMsXG4gICAgICBpc0ZpcnN0QXVkaW9TYW1wbGVzXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOWcqOayoeaciXJlZlNhbXBsZUR1cmF0aW9u55qE6Zeu6aKY5rWB5Lit77yMXG4gICAqL1xuICBmaXhSZWZTYW1wbGVEdXJhdGlvbiAobWV0YSwgc2FtcGxlcykge1xuICAgIGNvbnN0IGlzVmlkZW8gPSBtZXRhLnR5cGUgPT09ICd2aWRlbydcbiAgICBjb25zdCBhbGxTYW1wbGVzQ291bnQgPSBpc1ZpZGVvID8gdGhpcy5hbGxWaWRlb1NhbXBsZXNDb3VudCA6IHRoaXMuYWxsQXVkaW9TYW1wbGVzQ291bnRcbiAgICBjb25zdCBmaXJzdER0cyA9IGlzVmlkZW8gPyB0aGlzLl9maXJzdFZpZGVvU2FtcGxlLmR0cyA6IHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUuZHRzXG4gICAgY29uc3QgZmlsbGVkU2FtcGxlc0NvdW50ID0gaXNWaWRlbyA/IHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzLmxlbmd0aCA6IHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzLmxlbmd0aFxuXG4gICAgaWYgKCFtZXRhLnJlZlNhbXBsZUR1cmF0aW9uIHx8IG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPD0gMCB8fCBOdW1iZXIuaXNOYU4obWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgIGlmIChzYW1wbGVzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIGNvbnN0IGxhc3REdHMgPSBzYW1wbGVzW3NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzXG5cbiAgICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IoKGxhc3REdHMgLSBmaXJzdER0cykgLyAoKGFsbFNhbXBsZXNDb3VudCArIGZpbGxlZFNhbXBsZXNDb3VudCkgLSAxKSk7IC8vIOWwhnJlZlNhbXBsZUR1cmF0aW9u6YeN572u5Li66K6h566X5ZCO55qE5bmz5Z2H5YC8XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOiusOW9leaIquatouebruWJjeS4gOWFseaSreaUvuS6huWkmuWwkeW4p1xuICAgKi9cbiAgcmVjb3JkU2FtcGxlc0NvdW50ICgpIHtcbiAgICBjb25zdCB7IGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2sgfSA9IHRoaXNcblxuICAgIHRoaXMuYWxsQXVkaW9TYW1wbGVzQ291bnQgKz0gYXVkaW9UcmFjay5zYW1wbGVzLmxlbmd0aFxuICAgIHRoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQgKz0gdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIOWOu+mZpOS4jeWQiOazleeahOW4p++8iOWAkumAgOOAgemHjeWkjeW4p++8iVxuICAgKi9cbiAgZmlsdEludmFsaWRTYW1wbGVzICgpIHtcbiAgICBjb25zdCB7IF9maXJzdFZpZGVvU2FtcGxlLCBfZmlyc3RBdWRpb1NhbXBsZSB9ID0gdGhpc1xuXG4gICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMgPSB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcy5maWx0ZXIoKHNhbXBsZSkgPT4ge1xuICAgICAgcmV0dXJuIHNhbXBsZS5kdHMgPj0gX2ZpcnN0QXVkaW9TYW1wbGUuZHRzICYmIHNhbXBsZS5kdHMgPiB0aGlzLmxhc3RBdWRpb0R0c1xuICAgIH0pXG5cbiAgICB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcyA9IHRoaXMudmlkZW9UcmFjay5zYW1wbGVzLmZpbHRlcigoc2FtcGxlKSA9PiB7XG4gICAgICByZXR1cm4gc2FtcGxlLmR0cyA+PSBfZmlyc3RWaWRlb1NhbXBsZS5kdHMgJiYgc2FtcGxlLmR0cyA+IHRoaXMubGFzdFZpZGVvRHRzXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBzb3J0QXVkaW9TYW1wbGVzIChzYW1wbGVzKSB7XG4gICAgaWYgKHNhbXBsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gc2FtcGxlc1xuICAgIH1cblxuICAgIHJldHVybiBzYW1wbGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIHJldHVybiBhLmR0cyAtIGIuZHRzXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDlr7vmib5kdHPmnIDlsI/nmoRzYW1wbGVcbiAgICogQHBhcmFtIHNhbXBsZXNcbiAgICovXG4gIHN0YXRpYyBmaW5kRmlyc3RBdWRpb1NhbXBsZSAoc2FtcGxlcykge1xuICAgIGlmICghc2FtcGxlcyB8fCBzYW1wbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gQ29tcGF0aWJpbGl0eS5zb3J0QXVkaW9TYW1wbGVzKHNhbXBsZXMpWzBdXG4gIH1cblxuICBzdGF0aWMgZmluZEZpcnN0VmlkZW9TYW1wbGUgKHNhbXBsZXMpIHtcbiAgICBpZiAoIXNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IHNvcnRlZCA9IHNhbXBsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGEuZHRzIC0gYi5kdHM7XG4gICAgfSlcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzb3J0ZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChzb3J0ZWRbaV0uaXNLZXlmcmFtZSkge1xuICAgICAgICByZXR1cm4gc29ydGVkW2ldXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gIH1cblxuICBnZXQgYXVkaW9UcmFjayAoKSB7XG4gICAgaWYgKHRoaXMudHJhY2tzKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFja3MuYXVkaW9UcmFja1xuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHZpZGVvVHJhY2sgKCkge1xuICAgIGlmICh0aGlzLnRyYWNrcykge1xuICAgICAgcmV0dXJuIHRoaXMudHJhY2tzLnZpZGVvVHJhY2tcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQ29tcGF0aWJpbGl0eTtcbiIsImNsYXNzIEdvbG9tYiB7XG4gIGNvbnN0cnVjdG9yICh1aW50OGFycmF5KSB7XG4gICAgdGhpcy5UQUcgPSAnR29sb21iJ1xuICAgIHRoaXMuX2J1ZmZlciA9IHVpbnQ4YXJyYXlcbiAgICB0aGlzLl9idWZmZXJJbmRleCA9IDBcbiAgICB0aGlzLl90b3RhbEJ5dGVzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoXG4gICAgdGhpcy5fdG90YWxCaXRzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoICogOFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkID0gMFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPSAwXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9idWZmZXIgPSBudWxsXG4gIH1cblxuICBfZmlsbEN1cnJlbnRXb3JkICgpIHtcbiAgICBsZXQgYnVmZmVyQnl0ZXNMZWZ0ID0gdGhpcy5fdG90YWxCeXRlcyAtIHRoaXMuX2J1ZmZlckluZGV4XG4gICAgaWYgKGJ1ZmZlckJ5dGVzTGVmdCA8PSAwKSB7XG4gICAgICAvLyBUT0RPIOW8guW4uOWkhOeQhlxuICAgIH1cblxuICAgIGxldCBieXRlc1JlYWQgPSBNYXRoLm1pbig0LCBidWZmZXJCeXRlc0xlZnQpXG4gICAgbGV0IHdvcmQgPSBuZXcgVWludDhBcnJheSg0KVxuICAgIHdvcmQuc2V0KHRoaXMuX2J1ZmZlci5zdWJhcnJheSh0aGlzLl9idWZmZXJJbmRleCwgdGhpcy5fYnVmZmVySW5kZXggKyBieXRlc1JlYWQpKVxuICAgIHRoaXMuX2N1cnJlbnRXb3JkID0gbmV3IERhdGFWaWV3KHdvcmQuYnVmZmVyKS5nZXRVaW50MzIoMCwgZmFsc2UpXG5cbiAgICB0aGlzLl9idWZmZXJJbmRleCArPSBieXRlc1JlYWRcbiAgICB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0ID0gYnl0ZXNSZWFkICogOFxuICB9XG5cbiAgcmVhZEJpdHMgKGJpdHMpIHtcbiAgICBpZiAoYml0cyA+IDMyKSB7XG4gICAgICAvLyBUT0RPXG4gICAgfVxuXG4gICAgaWYgKGJpdHMgPD0gdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCkge1xuICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuX2N1cnJlbnRXb3JkID4+PiAoMzIgLSBiaXRzKVxuICAgICAgdGhpcy5fY3VycmVudFdvcmQgPDw9IGJpdHNcbiAgICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgLT0gYml0c1xuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0ID8gdGhpcy5fY3VycmVudFdvcmQgOiAwXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcmVzdWx0ID4+PiAoMzIgLSB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0KVxuICAgIGxldCBiaXRzTmVlZExlZnQgPSBiaXRzIC0gdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdFxuXG4gICAgdGhpcy5fZmlsbEN1cnJlbnRXb3JkKClcbiAgICBsZXQgYml0c1JlYWROZXh0ID0gTWF0aC5taW4oYml0c05lZWRMZWZ0LCB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0KVxuXG4gICAgbGV0IHJlc3VsdDIgPSB0aGlzLl9jdXJyZW50V29yZCA+Pj4gKDMyIC0gYml0c1JlYWROZXh0KVxuICAgIHRoaXMuX2N1cnJlbnRXb3JkIDw8PSBiaXRzUmVhZE5leHRcbiAgICB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0IC09IGJpdHNSZWFkTmV4dFxuXG4gICAgcmVzdWx0ID0gKHJlc3VsdCA8PCBiaXRzUmVhZE5leHQpIHwgcmVzdWx0MlxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHJlYWRCb29sICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkQml0cygxKSA9PT0gMVxuICB9XG5cbiAgcmVhZEJ5dGUgKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDgpXG4gIH1cblxuICBfc2tpcExlYWRpbmdaZXJvICgpIHtcbiAgICBsZXQgemVyb0NvdW50XG4gICAgZm9yICh6ZXJvQ291bnQgPSAwOyB6ZXJvQ291bnQgPCB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0OyB6ZXJvQ291bnQrKykge1xuICAgICAgaWYgKCh0aGlzLl9jdXJyZW50V29yZCAmICgweDgwMDAwMDAwID4+PiB6ZXJvQ291bnQpKSAhPT0gMCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50V29yZCA8PD0gemVyb0NvdW50XG4gICAgICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgLT0gemVyb0NvdW50XG4gICAgICAgIHJldHVybiB6ZXJvQ291bnRcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fZmlsbEN1cnJlbnRXb3JkKClcbiAgICByZXR1cm4gemVyb0NvdW50ICsgdGhpcy5fc2tpcExlYWRpbmdaZXJvKClcbiAgfVxuXG4gIHJlYWRVRUcgKCkgeyAvLyB1bnNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbiAgICBsZXQgbGVhZGluZ1plcm9zID0gdGhpcy5fc2tpcExlYWRpbmdaZXJvKClcbiAgICByZXR1cm4gdGhpcy5yZWFkQml0cyhsZWFkaW5nWmVyb3MgKyAxKSAtIDFcbiAgfVxuXG4gIHJlYWRTRUcgKCkgeyAvLyBzaWduZWQgZXhwb25lbnRpYWwgZ29sb21iXG4gICAgbGV0IHZhbHVlID0gdGhpcy5yZWFkVUVHKClcbiAgICBpZiAodmFsdWUgJiAweDAxKSB7XG4gICAgICByZXR1cm4gKHZhbHVlICsgMSkgPj4+IDFcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0xICogKHZhbHVlID4+PiAxKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHb2xvbWJcbiIsImltcG9ydCBTcHNQYXJzZXIgZnJvbSAnLi9zcHMnO1xuY2xhc3MgTmFsdW5pdCB7XG4gIHN0YXRpYyBnZXROYWx1bml0cyAoYnVmZmVyKSB7XG4gICAgaWYgKGJ1ZmZlci5sZW5ndGggLSBidWZmZXIucG9zaXRpb24gPCA0KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgbGV0IGJ1ZiA9IGJ1ZmZlci5kYXRhdmlldztcbiAgICBsZXQgcG9zaXRpb24gPSBidWZmZXIucG9zaXRpb247XG4gICAgaWYgKGJ1Zi5nZXRJbnQzMihwb3NpdGlvbikgPT09IDEgfHxcbiAgICAoYnVmLmdldEludDE2KHBvc2l0aW9uKSA9PT0gMCAmJiBidWYuZ2V0SW50OChwb3NpdGlvbiArIDIpID09PSAxKSkge1xuICAgICAgcmV0dXJuIE5hbHVuaXQuZ2V0QW5uZXhiTmFscyhidWZmZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTmFsdW5pdC5nZXRBdmNjTmFscyhidWZmZXIpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRBbm5leGJOYWxzIChidWZmZXIpIHtcbiAgICBsZXQgbmFscyA9IFtdO1xuICAgIGxldCBwb3NpdGlvbiA9IE5hbHVuaXQuZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIoYnVmZmVyKTtcbiAgICBsZXQgc3RhcnQgPSBwb3NpdGlvbi5wb3M7XG4gICAgbGV0IGVuZCA9IHN0YXJ0O1xuICAgIHdoaWxlIChzdGFydCA8IGJ1ZmZlci5sZW5ndGggLSA0KSB7XG4gICAgICBsZXQgaGVhZGVyID0gYnVmZmVyLmJ1ZmZlci5zbGljZShzdGFydCwgc3RhcnQgKyBwb3NpdGlvbi5oZWFkZXJMZW5ndGgpO1xuICAgICAgaWYgKHBvc2l0aW9uLnBvcyA9PT0gYnVmZmVyLnBvc2l0aW9uKSB7XG4gICAgICAgIGJ1ZmZlci5za2lwKHBvc2l0aW9uLmhlYWRlckxlbmd0aCk7XG4gICAgICB9XG4gICAgICBwb3NpdGlvbiA9IE5hbHVuaXQuZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIoYnVmZmVyKTtcbiAgICAgIGVuZCA9IHBvc2l0aW9uLnBvcztcbiAgICAgIGxldCBib2R5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlci5zbGljZShzdGFydCArIGhlYWRlci5ieXRlTGVuZ3RoLCBlbmQpKTtcbiAgICAgIGxldCB1bml0ID0ge2hlYWRlciwgYm9keX07XG4gICAgICBOYWx1bml0LmFuYWx5c2VOYWwodW5pdCk7XG4gICAgICBuYWxzLnB1c2godW5pdCk7XG4gICAgICBidWZmZXIuc2tpcChlbmQgLSBidWZmZXIucG9zaXRpb24pO1xuICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgfVxuICAgIHJldHVybiBuYWxzO1xuICB9XG5cbiAgc3RhdGljIGdldEF2Y2NOYWxzIChidWZmZXIpIHtcbiAgICBsZXQgbmFscyA9IFtdO1xuICAgIHdoaWxlIChidWZmZXIucG9zaXRpb24gPCBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgbGV0IGxlbmd0aCA9IGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQzMigpO1xuICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggLSBidWZmZXIucG9zaXRpb24gPj0gbGVuZ3RoKSB7XG4gICAgICAgIGxldCBoZWFkZXIgPSBidWZmZXIuYnVmZmVyLnNsaWNlKGJ1ZmZlci5wb3NpdGlvbiwgYnVmZmVyLnBvc2l0aW9uICsgNCk7XG4gICAgICAgIGJ1ZmZlci5za2lwKDQpXG4gICAgICAgIGxldCBib2R5ID0gYnVmZmVyLmJ1ZmZlci5zbGljZShidWZmZXIucG9zaXRpb24sIGJ1ZmZlci5wb3NpdGlvbiArIGxlbmd0aCk7XG4gICAgICAgIGJ1ZmZlci5za2lwKGxlbmd0aCk7XG4gICAgICAgIGxldCB1bml0ID0ge2hlYWRlciwgYm9keX07XG4gICAgICAgIE5hbHVuaXQuYW5hbHlzZU5hbCh1bml0KTtcbiAgICAgICAgbmFscy5wdXNoKHVuaXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuYWxzO1xuICB9XG5cbiAgc3RhdGljIGFuYWx5c2VOYWwgKHVuaXQpIHtcbiAgICBsZXQgdHlwZSA9IHVuaXQuYm9keVswXSAmIDB4MWY7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIC8vIE5EUlxuICAgICAgICB1bml0Lm5kciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICAvLyBJRFJcbiAgICAgICAgdW5pdC5pZHIgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjpcbiAgICAgICAgLy8gU0VJXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA3OlxuICAgICAgICAvLyBTUFNcbiAgICAgICAgdW5pdC5zcHMgPSBTcHNQYXJzZXIucGFyc2VTUFModW5pdC5ib2R5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIC8vIFBQU1xuICAgICAgICB1bml0LnBwcyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5OlxuICAgICAgICAvLyBBVURcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIgKGJ1ZmZlcikge1xuICAgIC8vIHNlcGVyYXRlXG4gICAgbGV0IHBvcyA9IGJ1ZmZlci5wb3NpdGlvbjtcbiAgICBsZXQgaGVhZGVyTGVuZ3RoID0gMDtcbiAgICB3aGlsZSAoaGVhZGVyTGVuZ3RoICE9PSAzICYmIGhlYWRlckxlbmd0aCAhPT0gNCAmJiBwb3MgPCBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MpID09PSAwKSB7XG4gICAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICAvLyAweDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDQ7XG4gICAgICAgIH0gZWxzZSBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDgocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICBoZWFkZXJMZW5ndGggPSAzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3MrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zID09PSBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MpID09PSAwKSB7XG4gICAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICAvLyAweDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgICBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDE2KHBvcykgPT09IDAgJiYgYnVmZmVyLmRhdGF2aWV3LmdldEludDgocG9zKSA9PT0gMSkge1xuICAgICAgICAgIC8vIDB4MDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9zID0gYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge3BvcywgaGVhZGVyTGVuZ3RofTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBdmNjIChzcHMsIHBwcykge1xuICAgIGxldCByZXQgPSBuZXcgVWludDhBcnJheShzcHMuYnl0ZUxlbmd0aCArIHBwcy5ieXRlTGVuZ3RoICsgMTEpO1xuICAgIHJldFswXSA9IDB4MDE7XG4gICAgcmV0WzFdID0gc3BzWzFdO1xuICAgIHJldFsyXSA9IHNwc1syXTtcbiAgICByZXRbM10gPSBzcHNbM107XG4gICAgcmV0WzRdID0gMjU1O1xuICAgIHJldFs1XSA9IDIyNTtcblxuICAgIGxldCBvZmZzZXQgPSA2O1xuXG4gICAgcmV0LnNldChuZXcgVWludDhBcnJheShbKHNwcy5ieXRlTGVuZ3RoID4+PiA4KSAmIDB4ZmYsIHNwcy5ieXRlTGVuZ3RoICYgMHhmZl0pLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSAyO1xuICAgIHJldC5zZXQoc3BzLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBzcHMuYnl0ZUxlbmd0aDtcblxuICAgIHJldFtvZmZzZXRdID0gMTtcbiAgICBvZmZzZXQrKztcblxuICAgIHJldC5zZXQobmV3IFVpbnQ4QXJyYXkoWyhwcHMuYnl0ZUxlbmd0aCA+Pj4gOCkgJiAweGZmLCBwcHMuYnl0ZUxlbmd0aCAmIDB4ZmZdKSwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gMjtcbiAgICByZXQuc2V0KHBwcywgb2Zmc2V0KTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5hbHVuaXQ7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgICovXG4vKiBlc2xpbnQtZGlzYWJsZSBvbmUtdmFyICAqL1xuaW1wb3J0IEdvbG9tYiBmcm9tICcuL2dvbG9tYidcblxuY2xhc3MgU1BTUGFyc2VyIHtcbiAgc3RhdGljIF9lYnNwMnJic3AgKHVpbnQ4YXJyYXkpIHtcbiAgICBsZXQgc3JjID0gdWludDhhcnJheVxuICAgIGxldCBzcmNMZW5ndGggPSBzcmMuYnl0ZUxlbmd0aFxuICAgIGxldCBkc3QgPSBuZXcgVWludDhBcnJheShzcmNMZW5ndGgpXG4gICAgbGV0IGRzdElkeCA9IDBcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3JjTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpID49IDIpIHtcbiAgICAgICAgaWYgKHNyY1tpXSA9PT0gMHgwMyAmJiBzcmNbaSAtIDFdID09PSAweDAwICYmIHNyY1tpIC0gMl0gPT09IDB4MDApIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkc3RbZHN0SWR4XSA9IHNyY1tpXVxuICAgICAgZHN0SWR4KytcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZHN0LmJ1ZmZlciwgMCwgZHN0SWR4KVxuICB9XG5cbiAgc3RhdGljIHBhcnNlU1BTICh1aW50OGFycmF5KSB7XG4gICAgbGV0IHJic3AgPSBTUFNQYXJzZXIuX2Vic3AycmJzcCh1aW50OGFycmF5KVxuICAgIGxldCBnYiA9IG5ldyBHb2xvbWIocmJzcClcblxuICAgIGdiLnJlYWRCeXRlKClcbiAgICBsZXQgcHJvZmlsZUlkYyA9IGdiLnJlYWRCeXRlKClcbiAgICBnYi5yZWFkQnl0ZSgpXG4gICAgbGV0IGxldmVsSWRjID0gZ2IucmVhZEJ5dGUoKVxuICAgIGdiLnJlYWRVRUcoKVxuXG4gICAgbGV0IHByb2ZpbGVfc3RyaW5nID0gU1BTUGFyc2VyLmdldFByb2ZpbGVTdHJpbmcocHJvZmlsZUlkYylcbiAgICBsZXQgbGV2ZWxfc3RyaW5nID0gU1BTUGFyc2VyLmdldExldmVsU3RyaW5nKGxldmVsSWRjKVxuICAgIGxldCBjaHJvbWFfZm9ybWF0X2lkYyA9IDFcbiAgICBsZXQgY2hyb21hX2Zvcm1hdCA9IDQyMFxuICAgIGxldCBjaHJvbWFfZm9ybWF0X3RhYmxlID0gWzAsIDQyMCwgNDIyLCA0NDRdXG4gICAgbGV0IGJpdF9kZXB0aCA9IDhcblxuICAgIGlmIChwcm9maWxlSWRjID09PSAxMDAgfHwgcHJvZmlsZUlkYyA9PT0gMTEwIHx8IHByb2ZpbGVJZGMgPT09IDEyMiB8fFxuICAgICAgcHJvZmlsZUlkYyA9PT0gMjQ0IHx8IHByb2ZpbGVJZGMgPT09IDQ0IHx8IHByb2ZpbGVJZGMgPT09IDgzIHx8XG4gICAgICBwcm9maWxlSWRjID09PSA4NiB8fCBwcm9maWxlSWRjID09PSAxMTggfHwgcHJvZmlsZUlkYyA9PT0gMTI4IHx8XG4gICAgICBwcm9maWxlSWRjID09PSAxMzggfHwgcHJvZmlsZUlkYyA9PT0gMTQ0KSB7XG4gICAgICBjaHJvbWFfZm9ybWF0X2lkYyA9IGdiLnJlYWRVRUcoKVxuICAgICAgaWYgKGNocm9tYV9mb3JtYXRfaWRjID09PSAzKSB7XG4gICAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgICB9XG4gICAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPD0gMykge1xuICAgICAgICBjaHJvbWFfZm9ybWF0ID0gY2hyb21hX2Zvcm1hdF90YWJsZVtjaHJvbWFfZm9ybWF0X2lkY11cbiAgICAgIH1cblxuICAgICAgYml0X2RlcHRoID0gZ2IucmVhZFVFRygpICsgOFxuICAgICAgZ2IucmVhZFVFRygpXG4gICAgICBnYi5yZWFkQml0cygxKVxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgbGV0IHNjYWxpbmdfbGlzdF9jb3VudCA9IChjaHJvbWFfZm9ybWF0X2lkYyAhPT0gMykgPyA4IDogMTJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2FsaW5nX2xpc3RfY291bnQ7IGkrKykge1xuICAgICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgICAgICBpZiAoaSA8IDYpIHtcbiAgICAgICAgICAgICAgU1BTUGFyc2VyLl9za2lwU2NhbGluZ0xpc3QoZ2IsIDE2KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgU1BTUGFyc2VyLl9za2lwU2NhbGluZ0xpc3QoZ2IsIDY0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnYi5yZWFkVUVHKClcbiAgICBsZXQgcGljX29yZGVyX2NudF90eXBlID0gZ2IucmVhZFVFRygpXG4gICAgaWYgKHBpY19vcmRlcl9jbnRfdHlwZSA9PT0gMCkge1xuICAgICAgZ2IucmVhZFVFRygpXG4gICAgfSBlbHNlIGlmIChwaWNfb3JkZXJfY250X3R5cGUgPT09IDEpIHtcbiAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgICBnYi5yZWFkU0VHKClcbiAgICAgIGdiLnJlYWRTRUcoKVxuICAgICAgbGV0IG51bV9yZWZfZnJhbWVzX2luX3BpY19vcmRlcl9jbnRfY3ljbGUgPSBnYi5yZWFkVUVHKClcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZTsgaSsrKSB7XG4gICAgICAgIGdiLnJlYWRTRUcoKVxuICAgICAgfVxuICAgIH1cbiAgICBnYi5yZWFkVUVHKClcbiAgICBnYi5yZWFkQml0cygxKVxuXG4gICAgbGV0IHBpY193aWR0aF9pbl9tYnNfbWludXMxID0gZ2IucmVhZFVFRygpXG4gICAgbGV0IHBpY19oZWlnaHRfaW5fbWFwX3VuaXRzX21pbnVzMSA9IGdiLnJlYWRVRUcoKVxuXG4gICAgbGV0IGZyYW1lX21ic19vbmx5X2ZsYWcgPSBnYi5yZWFkQml0cygxKVxuICAgIGlmIChmcmFtZV9tYnNfb25seV9mbGFnID09PSAwKSB7XG4gICAgICBnYi5yZWFkQml0cygxKVxuICAgIH1cbiAgICBnYi5yZWFkQml0cygxKVxuXG4gICAgbGV0IGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgPSAwXG4gICAgbGV0IGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0ID0gMFxuICAgIGxldCBmcmFtZV9jcm9wX3RvcF9vZmZzZXQgPSAwXG4gICAgbGV0IGZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCA9IDBcblxuICAgIGxldCBmcmFtZV9jcm9wcGluZ19mbGFnID0gZ2IucmVhZEJvb2woKVxuICAgIGlmIChmcmFtZV9jcm9wcGluZ19mbGFnKSB7XG4gICAgICBmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgICBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCA9IGdiLnJlYWRVRUcoKVxuICAgICAgZnJhbWVfY3JvcF90b3Bfb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgICBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQgPSBnYi5yZWFkVUVHKClcbiAgICB9XG5cbiAgICBsZXQgcGFyX3dpZHRoID0gMSwgcGFyX2hlaWdodCA9IDFcbiAgICBsZXQgZnBzID0gMCwgZnBzX2ZpeGVkID0gdHJ1ZSwgZnBzX251bSA9IDAsIGZwc19kZW4gPSAwXG5cbiAgICBsZXQgdnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnID0gZ2IucmVhZEJvb2woKVxuICAgIGlmICh2dWlfcGFyYW1ldGVyc19wcmVzZW50X2ZsYWcpIHtcbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7IC8vIGFzcGVjdF9yYXRpb19pbmZvX3ByZXNlbnRfZmxhZ1xuICAgICAgICBsZXQgYXNwZWN0X3JhdGlvX2lkYyA9IGdiLnJlYWRCeXRlKClcbiAgICAgICAgbGV0IHBhcl93X3RhYmxlID0gWzEsIDEyLCAxMCwgMTYsIDQwLCAyNCwgMjAsIDMyLCA4MCwgMTgsIDE1LCA2NCwgMTYwLCA0LCAzLCAyXVxuICAgICAgICBsZXQgcGFyX2hfdGFibGUgPSBbMSwgMTEsIDExLCAxMSwgMzMsIDExLCAxMSwgMTEsIDMzLCAxMSwgMTEsIDMzLCA5OSwgMywgMiwgMV1cblxuICAgICAgICBpZiAoYXNwZWN0X3JhdGlvX2lkYyA+IDAgJiYgYXNwZWN0X3JhdGlvX2lkYyA8IDE2KSB7XG4gICAgICAgICAgcGFyX3dpZHRoID0gcGFyX3dfdGFibGVbYXNwZWN0X3JhdGlvX2lkYyAtIDFdXG4gICAgICAgICAgcGFyX2hlaWdodCA9IHBhcl9oX3RhYmxlW2FzcGVjdF9yYXRpb19pZGMgLSAxXVxuICAgICAgICB9IGVsc2UgaWYgKGFzcGVjdF9yYXRpb19pZGMgPT09IDI1NSkge1xuICAgICAgICAgIHBhcl93aWR0aCA9IGdiLnJlYWRCeXRlKCkgPDwgOCB8IGdiLnJlYWRCeXRlKClcbiAgICAgICAgICBwYXJfaGVpZ2h0ID0gZ2IucmVhZEJ5dGUoKSA8PCA4IHwgZ2IucmVhZEJ5dGUoKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRCb29sKClcbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRCaXRzKDQpXG4gICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgICAgZ2IucmVhZEJpdHMoMjQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRVRUcoKVxuICAgICAgICBnYi5yZWFkVUVHKClcbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGxldCBudW1fdW5pdHNfaW5fdGljayA9IGdiLnJlYWRCaXRzKDMyKVxuICAgICAgICBsZXQgdGltZV9zY2FsZSA9IGdiLnJlYWRCaXRzKDMyKVxuICAgICAgICBmcHNfZml4ZWQgPSBnYi5yZWFkQm9vbCgpXG5cbiAgICAgICAgZnBzX251bSA9IHRpbWVfc2NhbGVcbiAgICAgICAgZnBzX2RlbiA9IG51bV91bml0c19pbl90aWNrICogMlxuICAgICAgICBmcHMgPSBmcHNfbnVtIC8gZnBzX2RlblxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwYXJTY2FsZSA9IDFcbiAgICBpZiAocGFyX3dpZHRoICE9PSAxIHx8IHBhcl9oZWlnaHQgIT09IDEpIHtcbiAgICAgIHBhclNjYWxlID0gcGFyX3dpZHRoIC8gcGFyX2hlaWdodFxuICAgIH1cblxuICAgIGxldCBjcm9wX3VuaXRfeCA9IDAsIGNyb3BfdW5pdF95ID0gMFxuICAgIGlmIChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMCkge1xuICAgICAgY3JvcF91bml0X3ggPSAxXG4gICAgICBjcm9wX3VuaXRfeSA9IDIgLSBmcmFtZV9tYnNfb25seV9mbGFnXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBzdWJfd2MgPSAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDMpID8gMSA6IDJcbiAgICAgIGxldCBzdWJfaGMgPSAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDEpID8gMiA6IDFcbiAgICAgIGNyb3BfdW5pdF94ID0gc3ViX3djXG4gICAgICBjcm9wX3VuaXRfeSA9IHN1Yl9oYyAqICgyIC0gZnJhbWVfbWJzX29ubHlfZmxhZylcbiAgICB9XG5cbiAgICBsZXQgY29kZWNfd2lkdGggPSAocGljX3dpZHRoX2luX21ic19taW51czEgKyAxKSAqIDE2XG4gICAgbGV0IGNvZGVjX2hlaWdodCA9ICgyIC0gZnJhbWVfbWJzX29ubHlfZmxhZykgKiAoKHBpY19oZWlnaHRfaW5fbWFwX3VuaXRzX21pbnVzMSArIDEpICogMTYpXG5cbiAgICBjb2RlY193aWR0aCAtPSAoZnJhbWVfY3JvcF9sZWZ0X29mZnNldCArIGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0KSAqIGNyb3BfdW5pdF94XG4gICAgY29kZWNfaGVpZ2h0IC09IChmcmFtZV9jcm9wX3RvcF9vZmZzZXQgKyBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQpICogY3JvcF91bml0X3lcblxuICAgIGxldCBwcmVzZW50X3dpZHRoID0gTWF0aC5jZWlsKGNvZGVjX3dpZHRoICogcGFyU2NhbGUpXG5cbiAgICBnYi5kZXN0cm95KClcbiAgICBnYiA9IG51bGxcblxuICAgIHJldHVybiB7XG4gICAgICBwcm9maWxlX3N0cmluZzogcHJvZmlsZV9zdHJpbmcsXG4gICAgICBsZXZlbF9zdHJpbmc6IGxldmVsX3N0cmluZyxcbiAgICAgIGJpdF9kZXB0aDogYml0X2RlcHRoLFxuICAgICAgY2hyb21hX2Zvcm1hdDogY2hyb21hX2Zvcm1hdCxcbiAgICAgIGNocm9tYV9mb3JtYXRfc3RyaW5nOiBTUFNQYXJzZXIuZ2V0Q2hyb21hRm9ybWF0U3RyaW5nKGNocm9tYV9mb3JtYXQpLFxuXG4gICAgICBmcmFtZV9yYXRlOiB7XG4gICAgICAgIGZpeGVkOiBmcHNfZml4ZWQsXG4gICAgICAgIGZwczogZnBzLFxuICAgICAgICBmcHNfZGVuOiBmcHNfZGVuLFxuICAgICAgICBmcHNfbnVtOiBmcHNfbnVtXG4gICAgICB9LFxuXG4gICAgICBwYXJfcmF0aW86IHtcbiAgICAgICAgd2lkdGg6IHBhcl93aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBwYXJfaGVpZ2h0XG4gICAgICB9LFxuXG4gICAgICBjb2RlY19zaXplOiB7XG4gICAgICAgIHdpZHRoOiBjb2RlY193aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjb2RlY19oZWlnaHRcbiAgICAgIH0sXG5cbiAgICAgIHByZXNlbnRfc2l6ZToge1xuICAgICAgICB3aWR0aDogcHJlc2VudF93aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjb2RlY19oZWlnaHRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX3NraXBTY2FsaW5nTGlzdCAoZ2IsIGNvdW50KSB7XG4gICAgbGV0IGxhc3Rfc2NhbGUgPSA4LCBuZXh0X3NjYWxlID0gOFxuICAgIGxldCBkZWx0YV9zY2FsZSA9IDBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIGlmIChuZXh0X3NjYWxlICE9PSAwKSB7XG4gICAgICAgIGRlbHRhX3NjYWxlID0gZ2IucmVhZFNFRygpXG4gICAgICAgIG5leHRfc2NhbGUgPSAobGFzdF9zY2FsZSArIGRlbHRhX3NjYWxlICsgMjU2KSAlIDI1NlxuICAgICAgfVxuICAgICAgbGFzdF9zY2FsZSA9IChuZXh0X3NjYWxlID09PSAwKSA/IGxhc3Rfc2NhbGUgOiBuZXh0X3NjYWxlXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFByb2ZpbGVTdHJpbmcgKHByb2ZpbGVJZGMpIHtcbiAgICBzd2l0Y2ggKHByb2ZpbGVJZGMpIHtcbiAgICAgIGNhc2UgNjY6XG4gICAgICAgIHJldHVybiAnQmFzZWxpbmUnXG4gICAgICBjYXNlIDc3OlxuICAgICAgICByZXR1cm4gJ01haW4nXG4gICAgICBjYXNlIDg4OlxuICAgICAgICByZXR1cm4gJ0V4dGVuZGVkJ1xuICAgICAgY2FzZSAxMDA6XG4gICAgICAgIHJldHVybiAnSGlnaCdcbiAgICAgIGNhc2UgMTEwOlxuICAgICAgICByZXR1cm4gJ0hpZ2gxMCdcbiAgICAgIGNhc2UgMTIyOlxuICAgICAgICByZXR1cm4gJ0hpZ2g0MjInXG4gICAgICBjYXNlIDI0NDpcbiAgICAgICAgcmV0dXJuICdIaWdoNDQ0J1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdVbmtub3duJ1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRMZXZlbFN0cmluZyAobGV2ZWxJZGMpIHtcbiAgICByZXR1cm4gKGxldmVsSWRjIC8gMTApLnRvRml4ZWQoMSlcbiAgfVxuXG4gIHN0YXRpYyBnZXRDaHJvbWFGb3JtYXRTdHJpbmcgKGNocm9tYSkge1xuICAgIHN3aXRjaCAoY2hyb21hKSB7XG4gICAgICBjYXNlIDQyMDpcbiAgICAgICAgcmV0dXJuICc0OjI6MCdcbiAgICAgIGNhc2UgNDIyOlxuICAgICAgICByZXR1cm4gJzQ6MjoyJ1xuICAgICAgY2FzZSA0NDQ6XG4gICAgICAgIHJldHVybiAnNDo0OjQnXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ1Vua25vd24nXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHRvVmlkZW9NZXRhIChzcHNDb25maWcpIHtcbiAgICBsZXQgbWV0YSA9IHt9XG4gICAgaWYgKHNwc0NvbmZpZyAmJiBzcHNDb25maWcuY29kZWNfc2l6ZSkge1xuICAgICAgbWV0YS5jb2RlY1dpZHRoID0gc3BzQ29uZmlnLmNvZGVjX3NpemUud2lkdGhcbiAgICAgIG1ldGEuY29kZWNIZWlnaHQgPSBzcHNDb25maWcuY29kZWNfc2l6ZS5oZWlnaHRcbiAgICAgIG1ldGEucHJlc2VudFdpZHRoID0gc3BzQ29uZmlnLnByZXNlbnRfc2l6ZS53aWR0aFxuICAgICAgbWV0YS5wcmVzZW50SGVpZ2h0ID0gc3BzQ29uZmlnLnByZXNlbnRfc2l6ZS5oZWlnaHRcbiAgICB9XG5cbiAgICBtZXRhLnByb2ZpbGUgPSBzcHNDb25maWcucHJvZmlsZV9zdHJpbmdcbiAgICBtZXRhLmxldmVsID0gc3BzQ29uZmlnLmxldmVsX3N0cmluZ1xuICAgIG1ldGEuYml0RGVwdGggPSBzcHNDb25maWcuYml0X2RlcHRoXG4gICAgbWV0YS5jaHJvbWFGb3JtYXQgPSBzcHNDb25maWcuY2hyb21hX2Zvcm1hdFxuXG4gICAgbWV0YS5wYXJSYXRpbyA9IHtcbiAgICAgIHdpZHRoOiBzcHNDb25maWcucGFyX3JhdGlvLndpZHRoLFxuICAgICAgaGVpZ2h0OiBzcHNDb25maWcucGFyX3JhdGlvLmhlaWdodFxuICAgIH1cblxuICAgIGlmIChzcHNDb25maWcuZnJhbWVfcmF0ZS5maXhlZCAmJiBzcHNDb25maWcuZnJhbWVfcmF0ZS5mcHNfbnVtID4gMCAmJiBzcHNDb25maWcuZnJhbWVfcmF0ZS5mcHNfZGVuID4gMCkge1xuICAgICAgbWV0YS5mcmFtZVJhdGUgPSBzcHNDb25maWcuZnJhbWVfcmF0ZVxuICAgIH1cblxuICAgIGxldCBmcHNEZW4gPSBtZXRhLmZyYW1lUmF0ZS5mcHNfZGVuXG4gICAgbGV0IGZwc051bSA9IG1ldGEuZnJhbWVSYXRlLmZwc19udW1cbiAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcihtZXRhLnRpbWVzY2FsZSAqIChmcHNEZW4gLyBmcHNOdW0pKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNQU1BhcnNlclxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIEhMU1xuICBNM1U4UGFyc2VyOiByZXF1aXJlKCcuL3NyYy9obHMvZGVtdXhlci9tM3U4cGFyc2VyJykuZGVmYXVsdCxcbiAgVHNEZW11eGVyOiByZXF1aXJlKCcuL3NyYy9obHMvZGVtdXhlci90cycpLmRlZmF1bHQsXG4gIFBsYXlsaXN0OiByZXF1aXJlKCcuL3NyYy9obHMvcGxheWxpc3QnKS5kZWZhdWx0LFxuICBGbHZEZW11eGVyOiByZXF1aXJlKCcuL3NyYy9mbHYvaW5kZXgnKS5kZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgaXNMZSwgVVRGOCB9IGZyb20gJ3hncGxheWVyLXV0aWxzJ1xuXG5jb25zdCBEQVRBX1RZUEVTID0ge1xuICBOVU1CRVI6IDAsXG4gIEJPT0xFQU46IDEsXG4gIFNUUklORzogMixcbiAgT0JKRUNUOiAzLFxuICBNSVhfQVJSQVk6IDgsXG4gIE9CSkVDVF9FTkQ6IDksXG4gIFNUUklDVF9BUlJBWTogMTAsXG4gIERBVEU6IDExLFxuICBMT05FX1NUUklORzogMTJcbn1cblxuLyoqXG4gKiBtZXRh5L+h5oGv6Kej5p6QXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFNRlBhcnNlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLnJlYWRPZmZzZXQgPSB0aGlzLm9mZnNldFxuICB9XG5cbiAgcmVzb2x2ZSAobWV0YSwgc2l6ZSkge1xuICAgIGlmIChzaXplIDwgMykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgZW5vdWdoIGRhdGEgZm9yIG1ldGFpbmZvJylcbiAgICB9XG4gICAgY29uc3QgbWV0YURhdGEgPSB7fVxuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlVmFsdWUobWV0YSlcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucGFyc2VWYWx1ZShtZXRhLCBzaXplIC0gbmFtZS5ib2R5U2l6ZSlcbiAgICBtZXRhRGF0YVtuYW1lLmRhdGFdID0gdmFsdWUuZGF0YVxuXG4gICAgdGhpcy5yZXNldFN0YXR1cygpXG4gICAgcmV0dXJuIG1ldGFEYXRhXG4gIH1cblxuICByZXNldFN0YXR1cyAoKSB7XG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgdGhpcy5yZWFkT2Zmc2V0ID0gdGhpcy5vZmZzZXRcbiAgfVxuXG4gIHBhcnNlU3RyaW5nIChidWZmZXIpIHtcbiAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhidWZmZXIsIHRoaXMucmVhZE9mZnNldClcbiAgICBjb25zdCBzdHJMZW4gPSBkdi5nZXRVaW50MTYoMCwgIWlzTGUpXG4gICAgbGV0IHN0ciA9ICcnXG4gICAgaWYgKHN0ckxlbiA+IDApIHtcbiAgICAgIHN0ciA9IFVURjguZGVjb2RlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0ICsgMiwgc3RyTGVuKSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gJydcbiAgICB9XG4gICAgbGV0IHNpemUgPSBzdHJMZW4gKyAyXG4gICAgdGhpcy5yZWFkT2Zmc2V0ICs9IHNpemVcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogc3RyLFxuICAgICAgYm9keVNpemU6IHN0ckxlbiArIDJcbiAgICB9XG4gIH1cblxuICBwYXJzZURhdGUgKGJ1ZmZlciwgc2l6ZSkge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0LCBzaXplKVxuICAgIGxldCB0cyA9IGR2LmdldEZsb2F0NjQoMCwgIWlzTGUpXG4gICAgY29uc3QgdGltZU9mZnNldCA9IGR2LmdldEludDE2KDgsICFpc0xlKVxuICAgIHRzICs9IHRpbWVPZmZzZXQgKiA2MCAqIDEwMDBcblxuICAgIHRoaXMucmVhZE9mZnNldCArPSAxMFxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBuZXcgRGF0ZSh0cyksXG4gICAgICBib2R5U2l6ZTogMTBcbiAgICB9XG4gIH1cblxuICBwYXJzZU9iamVjdCAoYnVmZmVyLCBzaXplKSB7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBzaXplKVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKGJ1ZmZlciwgc2l6ZSAtIG5hbWUuYm9keVNpemUpXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbmFtZTogbmFtZS5kYXRhLFxuICAgICAgICB2YWx1ZTogdmFsdWUuZGF0YVxuICAgICAgfSxcbiAgICAgIGJvZHlTaXplOiBuYW1lLmJvZHlTaXplICsgdmFsdWUuYm9keVNpemUsXG4gICAgICBpc09iakVuZDogdmFsdWUuaXNPYmpFbmRcbiAgICB9XG4gIH1cblxuICBwYXJzZUxvbmdTdHJpbmcgKGJ1ZmZlcikge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0KVxuICAgIGNvbnN0IHN0ckxlbiA9IGR2LmdldFVpbnQzMigwLCAhaXNMZSlcbiAgICBsZXQgc3RyID0gJydcbiAgICBpZiAoc3RyTGVuID4gMCkge1xuICAgICAgc3RyID0gVVRGOC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQgKyAyLCBzdHJMZW4pKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSAnJ1xuICAgIH1cbiAgICAvLyBjb25zdCBzaXplID0gc3RyTGVuICsgNDtcbiAgICB0aGlzLnJlYWRPZmZzZXQgKz0gc3RyTGVuICsgNFxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBzdHIsXG4gICAgICBib2R5U2l6ZTogc3RyTGVuICsgNFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmnpBtZXRh5Lit55qE5Y+Y6YePXG4gICAqL1xuICBwYXJzZVZhbHVlIChkYXRhLCBzaXplKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigpXG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgYnVmZmVyID0gZGF0YVxuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIgPSBkYXRhLmJ1ZmZlclxuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBOVU1CRVIsXG4gICAgICBCT09MRUFOLFxuICAgICAgU1RSSU5HLFxuICAgICAgT0JKRUNULFxuICAgICAgTUlYX0FSUkFZLFxuICAgICAgT0JKRUNUX0VORCxcbiAgICAgIFNUUklDVF9BUlJBWSxcbiAgICAgIERBVEUsXG4gICAgICBMT05FX1NUUklOR1xuICAgIH0gPSBEQVRBX1RZUEVTXG4gICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQsIHNpemUpXG4gICAgbGV0IGlzT2JqRW5kID0gZmFsc2VcbiAgICBjb25zdCB0eXBlID0gZGF0YVZpZXcuZ2V0VWludDgoMClcbiAgICBsZXQgb2Zmc2V0ID0gMVxuICAgIHRoaXMucmVhZE9mZnNldCArPSAxXG4gICAgbGV0IHZhbHVlID0gbnVsbFxuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIE5VTUJFUjoge1xuICAgICAgICB2YWx1ZSA9IGRhdGFWaWV3LmdldEZsb2F0NjQoMSwgIWlzTGUpXG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSA4XG4gICAgICAgIG9mZnNldCArPSA4XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIEJPT0xFQU46IHtcbiAgICAgICAgY29uc3QgYm9vbE51bSA9IGRhdGFWaWV3LmdldFVpbnQ4KDEpXG4gICAgICAgIHZhbHVlID0gISFib29sTnVtXG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSAxXG4gICAgICAgIG9mZnNldCArPSAxXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIFNUUklORzoge1xuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlcilcbiAgICAgICAgdmFsdWUgPSBzdHIuZGF0YVxuICAgICAgICBvZmZzZXQgKz0gc3RyLmJvZHlTaXplXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIE9CSkVDVDoge1xuICAgICAgICB2YWx1ZSA9IHt9XG4gICAgICAgIGxldCBvYmpFbmRTaXplID0gMFxuICAgICAgICBpZiAoZGF0YVZpZXcuZ2V0VWludDMyKHNpemUgLSA0LCAhaXNMZSkgJiAweDAwRkZGRkZGKSB7XG4gICAgICAgICAgb2JqRW5kU2l6ZSA9IDNcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLnJlYWRPZmZzZXQgKz0gb2Zmc2V0IC0gMTtcbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IHNpemUgLSA0KSB7XG4gICAgICAgICAgY29uc3QgYW1mT2JqID0gdGhpcy5wYXJzZU9iamVjdChidWZmZXIsIHNpemUgLSBvZmZzZXQgLSBvYmpFbmRTaXplKVxuICAgICAgICAgIGlmIChhbWZPYmouaXNPYmplY3RFbmQpIHsgYnJlYWsgfVxuICAgICAgICAgIHZhbHVlW2FtZk9iai5kYXRhLm5hbWVdID0gYW1mT2JqLmRhdGEudmFsdWVcbiAgICAgICAgICBvZmZzZXQgKz0gYW1mT2JqLmJvZHlTaXplXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA8PSBzaXplIC0gMykge1xuICAgICAgICAgIGNvbnN0IG1hcmsgPSBkYXRhVmlldy5nZXRVaW50MzIob2Zmc2V0IC0gMSwgIWlzTGUpICYgMHgwMEZGRkZGRlxuICAgICAgICAgIGlmIChtYXJrID09PSA5KSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gM1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgTUlYX0FSUkFZOiB7XG4gICAgICAgIHZhbHVlID0ge31cbiAgICAgICAgb2Zmc2V0ICs9IDRcbiAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDRcbiAgICAgICAgbGV0IG9iakVuZFNpemUgPSAwXG4gICAgICAgIGlmICgoZGF0YVZpZXcuZ2V0VWludDMyKHNpemUgLSA0LCAhaXNMZSkgJiAweDAwRkZGRkZGKSA9PT0gOSkge1xuICAgICAgICAgIG9iakVuZFNpemUgPSAzXG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgc2l6ZSAtIDgpIHtcbiAgICAgICAgICBjb25zdCBhbWZWYXIgPSB0aGlzLnBhcnNlT2JqZWN0KGJ1ZmZlciwgc2l6ZSAtIG9mZnNldCAtIG9iakVuZFNpemUpXG4gICAgICAgICAgaWYgKGFtZlZhci5pc09iamVjdEVuZCkgeyBicmVhayB9XG4gICAgICAgICAgdmFsdWVbYW1mVmFyLmRhdGEubmFtZV0gPSBhbWZWYXIuZGF0YS52YWx1ZVxuICAgICAgICAgIG9mZnNldCArPSBhbWZWYXIuYm9keVNpemVcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0IDw9IHNpemUgLSAzKSB7XG4gICAgICAgICAgY29uc3QgbWFya2VyID0gZGF0YVZpZXcuZ2V0VWludDMyKG9mZnNldCAtIDEsICFpc0xlKSAmIDB4MDBGRkZGRkZcbiAgICAgICAgICBpZiAobWFya2VyID09PSA5KSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gM1xuICAgICAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBPQkpFQ1RfRU5EOiB7XG4gICAgICAgIHZhbHVlID0gbnVsbFxuICAgICAgICBpc09iakVuZCA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBTVFJJQ1RfQVJSQVk6IHtcbiAgICAgICAgdmFsdWUgPSBbXVxuICAgICAgICBjb25zdCBhcnJMZW5ndGggPSBkYXRhVmlldy5nZXRVaW50MzIoMSwgIWlzTGUpXG4gICAgICAgIG9mZnNldCArPSA0XG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSA0XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzY3JpcHQgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBzaXplIC0gb2Zmc2V0KVxuICAgICAgICAgIHZhbHVlLnB1c2goc2NyaXB0LmRhdGEpXG4gICAgICAgICAgb2Zmc2V0ICs9IHNjcmlwdC5ib2R5U2l6ZVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgREFURToge1xuICAgICAgICBjb25zdCBkYXRlID0gdGhpcy5wYXJzZURhdGUoYnVmZmVyLCBzaXplIC0gMSlcbiAgICAgICAgdmFsdWUgPSBkYXRlLmRhdGFcbiAgICAgICAgb2Zmc2V0ICs9IGRhdGUuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBMT05FX1NUUklORzoge1xuICAgICAgICBjb25zdCBsb25nU3RyID0gdGhpcy5wYXJzZUxvbmdTdHJpbmcoYnVmZmVyLCBzaXplIC0gMSlcbiAgICAgICAgdmFsdWUgPSBsb25nU3RyLmRhdGFcbiAgICAgICAgb2Zmc2V0ICs9IGxvbmdTdHIuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBvZmZzZXQgPSBzaXplXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHZhbHVlLFxuICAgICAgYm9keVNpemU6IG9mZnNldCxcbiAgICAgIGlzT2JqRW5kOiBpc09iakVuZFxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRVZFTlRTLCBBdWRpb1RyYWNrTWV0YSwgVmlkZW9UcmFja01ldGEgfSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5pbXBvcnQgeyBTcHNQYXJzZXIgfSBmcm9tICd4Z3BsYXllci1jb2RlYyc7XG5pbXBvcnQgeyBWaWRlb1RyYWNrLCBBdWRpb1RyYWNrIH0gZnJvbSAneGdwbGF5ZXItYnVmZmVyJ1xuXG5pbXBvcnQgQU1GUGFyc2VyIGZyb20gJy4vYW1mLXBhcnNlcidcblxuY29uc3QgREVNVVhfRVZFTlRTID0gRVZFTlRTLkRFTVVYX0VWRU5UUztcblxuY2xhc3MgRmx2RGVtdXhlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkID0gZmFsc2VcbiAgICB0aGlzLl90cmFja051bSA9IDBcbiAgICB0aGlzLl9oYXNTY3JpcHQgPSBmYWxzZVxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuREVNVVhfU1RBUlQsIHRoaXMuZG9QYXJzZUZsdi5iaW5kKHRoaXMpKVxuICB9XG5cbiAgLyoqXG4gICAqIGlmIHRoZSBmbHYgaGVhZCBpcyB2YWxpZFxuICAgKiBAcGFyYW0gZGF0YVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0ZsdkZpbGUgKGRhdGEpIHtcbiAgICByZXR1cm4gIShkYXRhWzBdICE9PSAweDQ2IHx8IGRhdGFbMV0gIT09IDB4NEMgfHwgZGF0YVsyXSAhPT0gMHg1NiB8fCBkYXRhWzNdICE9PSAweDAxKVxuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoZSBzdHJlYW0gaGFzIGF1ZGlvIG9yIHZpZGVvLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RyZWFtRmxhZyAtIERhdGEgZnJvbSB0aGUgc3RyZWFtIHdoaWNoIGlzIGRlZmluZSB3aGV0aGVyIHRoZSBhdWRpbyAvIHZpZGVvIHRyYWNrIGlzIGV4aXN0LlxuICAgKi9cbiAgc3RhdGljIGdldFBsYXlUeXBlIChzdHJlYW1GbGFnKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgaGFzVmlkZW86IGZhbHNlLFxuICAgICAgaGFzQXVkaW86IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHN0cmVhbUZsYWcgJiAweDAxID4gMCkge1xuICAgICAgcmVzdWx0Lmhhc1ZpZGVvID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChzdHJlYW1GbGFnICYgMHgwNCA+IDApIHtcbiAgICAgIHJlc3VsdC5oYXNBdWRpbyA9IHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBkb1BhcnNlRmx2ICgpIHtcbiAgICBpZiAoIXRoaXMuX2ZpcnN0RnJhZ21lbnRMb2FkZWQpIHtcbiAgICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPCAxMykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IGhlYWRlciA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEzKVxuICAgICAgdGhpcy5wYXJzZUZsdkhlYWRlcihoZWFkZXIpXG4gICAgICB0aGlzLmRvUGFyc2VGbHYoKSAvLyDpgJLlvZLosIPnlKjvvIznu6fnu63op6PmnpBmbHbmtYFcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA8IDExKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbGV0IGNodW5rO1xuICAgICAgZG8ge1xuICAgICAgICBjaHVuayA9IHRoaXMuX3BhcnNlRmx2VGFnKClcbiAgICAgIH0gd2hpbGUgKGNodW5rKVxuXG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFKVxuICAgIH1cbiAgfVxuXG4gIHBhcnNlRmx2SGVhZGVyIChoZWFkZXIpIHtcbiAgICBpZiAoIUZsdkRlbXV4ZXIuaXNGbHZGaWxlKGhlYWRlcikpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIG5ldyBFcnJvcignaW52YWxpZCBmbHYgZmlsZScpKVxuICAgICAgdGhpcy5kb1BhcnNlRmx2KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZmlyc3RGcmFnbWVudExvYWRlZCA9IHRydWVcbiAgICAgIGNvbnN0IHBsYXlUeXBlID0gRmx2RGVtdXhlci5nZXRQbGF5VHlwZShoZWFkZXJbNF0pXG5cbiAgICAgIGlmIChwbGF5VHlwZS5oYXNWaWRlbykge1xuICAgICAgICB0aGlzLmluaXRWaWRlb1RyYWNrKClcbiAgICAgIH1cblxuICAgICAgaWYgKHBsYXlUeXBlLmhhc0F1ZGlvKSB7XG4gICAgICAgIHRoaXMuaW5pdEF1ZGlvVHJhY2soKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmRvUGFyc2VGbHYoKVxuICB9XG5cbiAgLyoqXG4gICAqIGluaXQgZGVmYXVsdCB2aWRlbyB0cmFjayBjb25maWdzXG4gICAqL1xuICBpbml0VmlkZW9UcmFjayAoKSB7XG4gICAgdGhpcy5fdHJhY2tOdW0rK1xuICAgIGxldCB2aWRlb1RyYWNrID0gbmV3IFZpZGVvVHJhY2soKVxuICAgIHZpZGVvVHJhY2subWV0YSA9IG5ldyBWaWRlb1RyYWNrTWV0YSgpXG4gICAgdmlkZW9UcmFjay5pZCA9IHZpZGVvVHJhY2subWV0YS5pZCA9IHRoaXMuX3RyYWNrTnVtXG5cbiAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrID0gdmlkZW9UcmFja1xuICB9XG5cbiAgLyoqXG4gICAqIGluaXQgZGVmYXVsdCBhdWRpbyB0cmFjayBjb25maWdzXG4gICAqL1xuICBpbml0QXVkaW9UcmFjayAoKSB7XG4gICAgdGhpcy5fdHJhY2tOdW0rK1xuICAgIGxldCBhdWRpb1RyYWNrID0gbmV3IEF1ZGlvVHJhY2soKVxuICAgIGF1ZGlvVHJhY2subWV0YSA9IG5ldyBBdWRpb1RyYWNrTWV0YSgpXG4gICAgYXVkaW9UcmFjay5pZCA9IGF1ZGlvVHJhY2subWV0YS5pZCA9IHRoaXMuX3RyYWNrTnVtXG5cbiAgICB0aGlzLnRyYWNrcy5hdWRpb1RyYWNrID0gYXVkaW9UcmFja1xuICB9XG5cbiAgLyoqXG4gICAqIFBhY2thZ2UgdGhlIGRhdGEgYXMgdGhlIGZvbGxvd2luZyBkYXRhIHN0cnVjdHVyZVxuICAgKiB7XG4gICAqICAgIGRhdGE6IFVpbnQ4QXJyYXkuIHRoZSBTdHJlYW0gZGF0YS5cbiAgICogICAgaW5mbzogVGhlIGZpcnN0IGJ5dGUgaW5mbyBvZiB0aGUgVGFnLlxuICAgKiAgICB0YWdUeXBlOiA444CBOeOAgTE4XG4gICAqICAgIHRpbWVTdGFtcDogdGhlIHRpbWVzdGVtcFxuICAgKiB9XG4gICAqL1xuICBfcGFyc2VGbHZUYWcgKCkge1xuICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPCAxMSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgbGV0IGNodW5rID0gdGhpcy5fcGFyc2VGbHZUYWdIZWFkZXIoKVxuICAgIGlmIChjaHVuaykge1xuICAgICAgdGhpcy5fcHJvY2Vzc0NodW5rKGNodW5rKVxuICAgIH1cbiAgICByZXR1cm4gY2h1bmtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgMTEgYnl0ZSB0YWcgSGVhZGVyXG4gICAqL1xuICBfcGFyc2VGbHZUYWdIZWFkZXIgKCkge1xuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgbGV0IGNodW5rID0ge31cblxuICAgIGxldCB0YWdUeXBlID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQob2Zmc2V0LCAxKVxuICAgIG9mZnNldCArPSAxXG5cbiAgICAvLyAyIGJpdCBGTVMgcmVzZXJ2ZWQsIDEgYml0IGZpbHRlcmVkLCA1IGJpdCB0YWcgdHlwZVxuICAgIGNodW5rLmZpbHRlcmVkID0gKHRhZ1R5cGUgJiAzMikgPj4+IDVcbiAgICBjaHVuay50YWdUeXBlID0gdGFnVHlwZSAmIDMxXG5cbiAgICAvLyAzIEJ5dGUgZGF0YXNpemVcbiAgICBjaHVuay5kYXRhc2l6ZSA9IHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KG9mZnNldCwgMylcbiAgICBvZmZzZXQgKz0gM1xuXG4gICAgaWYgKChjaHVuay50YWdUeXBlICE9PSA4ICYmIGNodW5rLnRhZ1R5cGUgIT09IDkgJiYgY2h1bmsudGFnVHlwZSAhPT0gMTEgJiYgY2h1bmsudGFnVHlwZSAhPT0gMTgpIHx8XG4gICAgICB0aGlzLmxvYWRlckJ1ZmZlci50b0ludCg4LCAzKSAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyICYmIHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlcbiAgICAgIH1cbiAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsICd0YWdUeXBlICcgKyBjaHVuay50YWdUeXBlKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoIDwgY2h1bmsuZGF0YXNpemUgKyAxNSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICAvLyByZWFkIHRoZSBkYXRhLlxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpXG5cbiAgICAvLyAzIEJ5dGUgdGltZXN0YW1wXG4gICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDAsIDMpXG4gICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMylcblxuICAgIC8vIDEgQnl0ZSB0aW1lc3RhbXBFeHRcbiAgICBsZXQgdGltZXN0YW1wRXh0ID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBpZiAodGltZXN0YW1wRXh0ID4gMCkge1xuICAgICAgdGltZXN0YW1wICs9IHRpbWVzdGFtcEV4dCAqIDB4MTAwMDAwMFxuICAgIH1cblxuICAgIGNodW5rLmR0cyA9IHRpbWVzdGFtcFxuXG4gICAgLy8gc3RyZWFtSWRcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgX3Byb2Nlc3NDaHVuayAoY2h1bmspIHtcbiAgICBzd2l0Y2ggKGNodW5rLnRhZ1R5cGUpIHtcbiAgICAgIGNhc2UgMTg6XG4gICAgICAgIHRoaXMuX3BhcnNlU2NyaXB0RGF0YShjaHVuaylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgODpcbiAgICAgICAgdGhpcy5fcGFyc2VBQUNEYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSA5OlxuICAgICAgICB0aGlzLl9wYXJzZUhldmNEYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAxMTpcbiAgICAgICAgLy8gZm9yIHNvbWUgQ0ROIHRoYXQgZGlkIG5vdCBwcm9jZXNzIHRoZSBjdXJyZWN0IFJUTVAgbWVzc2FnZXNcbiAgICAgICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMylcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHBhcnNlIGZsdiBzY3JpcHQgZGF0YVxuICAgKiBAcGFyYW0gY2h1bmtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZVNjcmlwdERhdGEgKGNodW5rKSB7XG4gICAgbGV0IGF1ZGlvVHJhY2sgPSB0aGlzLnRyYWNrcy5hdWRpb1RyYWNrXG4gICAgbGV0IHZpZGVvVHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG5cbiAgICBsZXQgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplKVxuXG4gICAgY29uc3QgaW5mbyA9IG5ldyBBTUZQYXJzZXIoKS5yZXNvbHZlKGRhdGEsIGRhdGEubGVuZ3RoKVxuXG4gICAgY29uc3Qgb25NZXRhRGF0YSA9IHRoaXMuX2NvbnRleHQub25NZXRhRGF0YSA9IGluZm8gPyBpbmZvLm9uTWV0YURhdGEgOiB1bmRlZmluZWRcblxuICAgIC8vIGZpbGwgbWVkaWFJbmZvXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gPSBvbk1ldGFEYXRhLmR1cmF0aW9uXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaGFzVmlkZW8gPSBvbk1ldGFEYXRhLmhhc1ZpZGVvXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaHNhQXVkaW8gPSBvbk1ldGFEYXRhLmhhc0F1ZGlvXG5cbiAgICBsZXQgdmFsaWRhdGUgPSB0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSlcbiAgICBpZiAodmFsaWRhdGUpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVESUFfSU5GTylcbiAgICAgIHRoaXMuX2hhc1NjcmlwdCA9IHRydWVcbiAgICB9XG5cbiAgICAvLyBFZGl0IGRlZmF1bHQgbWV0YS5cbiAgICBpZiAoYXVkaW9UcmFjayAmJiAhYXVkaW9UcmFjay5oYXNTcGVjaWZpY0NvbmZpZykge1xuICAgICAgbGV0IG1ldGEgPSBhdWRpb1RyYWNrLm1ldGFcbiAgICAgIGlmIChvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZSkge1xuICAgICAgICBtZXRhLnNhbXBsZVJhdGUgPSBvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZVxuICAgICAgfVxuXG4gICAgICBpZiAob25NZXRhRGF0YS5hdWRpb2NoYW5uZWxzKSB7XG4gICAgICAgIG1ldGEuY2hhbm5lbENvdW50ID0gb25NZXRhRGF0YS5hdWRpb2NoYW5uZWxzXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAob25NZXRhRGF0YS5hdWRpb3NhbXBsZXJhdGUpIHtcbiAgICAgICAgY2FzZSA0NDEwMDpcbiAgICAgICAgICBtZXRhLnNhbXBsZVJhdGVJbmRleCA9IDRcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDIyMDUwOlxuICAgICAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gN1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTEwMjU6XG4gICAgICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSAxMFxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2aWRlb1RyYWNrICYmICF2aWRlb1RyYWNrLmhhc1NwZWNpZmljQ29uZmlnKSB7XG4gICAgICBsZXQgbWV0YSA9IHZpZGVvVHJhY2subWV0YVxuICAgICAgaWYgKHR5cGVvZiBvbk1ldGFEYXRhLmZyYW1lcmF0ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbGV0IGZwc051bSA9IE1hdGguZmxvb3Iob25NZXRhRGF0YS5mcmFtZXJhdGUgKiAxMDAwKVxuICAgICAgICBpZiAoZnBzTnVtID4gMCkge1xuICAgICAgICAgIGxldCBmcHMgPSBmcHNOdW0gLyAxMDAwXG4gICAgICAgICAgaWYgKCFtZXRhLmZyYW1lUmF0ZSkge1xuICAgICAgICAgICAgbWV0YS5mcmFtZVJhdGUgPSB7fVxuICAgICAgICAgIH1cbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5maXhlZCA9IHRydWVcbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHMgPSBmcHNcbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHNfbnVtID0gZnBzTnVtXG4gICAgICAgICAgbWV0YS5mcmFtZVJhdGUuZnBzX2RlbiA9IDEwMDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlciAoZGF0YSkge1xuICAgIGxldCByZXQgPSB7fVxuICAgIHJldC5oYXNTcGVjaWZpY0NvbmZpZyA9IHRydWVcbiAgICByZXQub2JqZWN0VHlwZSA9IGRhdGFbMV0gPj4+IDNcbiAgICByZXQuc2FtcGxlUmF0ZUluZGV4ID0gKChkYXRhWzFdICYgNykgPDwgMSkgfCAoZGF0YVsyXSA+Pj4gNylcbiAgICByZXQuYXVkaW9zYW1wbGVyYXRlID0gdGhpcy5fc3dpdGNoQXVkaW9TYW1wbGVSYXRlKHJldC5zYW1wbGVSYXRlSW5kZXgpXG4gICAgcmV0LmNoYW5uZWxDb3VudCA9IChkYXRhWzJdICYgMTIwKSA+Pj4gM1xuICAgIHJldC5mcmFtZUxlbmd0aCA9IChkYXRhWzJdICYgNCkgPj4+IDJcbiAgICByZXQuZGVwZW5kc09uQ29yZUNvZGVyID0gKGRhdGFbMl0gJiAyKSA+Pj4gMVxuICAgIHJldC5leHRlbnNpb25GbGFnSW5kZXggPSBkYXRhWzJdICYgMVxuXG4gICAgcmV0LmNvZGVjID0gYG1wNGEuNDAuJHtyZXQub2JqZWN0VHlwZX1gXG4gICAgbGV0IHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGV4dGVuc2lvblNhbXBsaW5nSW5kZXg7XG5cbiAgICBsZXQgY29uZmlnO1xuICAgIGxldCBzYW1wbGluZ0luZGV4ID0gcmV0LnNhbXBsZVJhdGVJbmRleDtcblxuICAgIGlmICh1c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpICE9PSAtMSkge1xuICAgICAgLy8gZmlyZWZveDogdXNlIFNCUiAoSEUtQUFDKSBpZiBmcmVxIGxlc3MgdGhhbiAyNGtIelxuICAgICAgaWYgKHJldC5zYW1wbGVSYXRlSW5kZXggPj0gNikge1xuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDU7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSg0KTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIHsgLy8gdXNlIExDLUFBQ1xuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDI7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh1c2VyQWdlbnQuaW5kZXhPZignYW5kcm9pZCcpICE9PSAtMSkge1xuICAgICAgLy8gYW5kcm9pZDogYWx3YXlzIHVzZSBMQy1BQUNcbiAgICAgIHJldC5vYmplY3RUeXBlID0gMjtcbiAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSBzYW1wbGluZ0luZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3Igb3RoZXIgYnJvd3NlcnMsIGUuZy4gY2hyb21lLi4uXG4gICAgICAvLyBBbHdheXMgdXNlIEhFLUFBQyB0byBtYWtlIGl0IGVhc2llciB0byBzd2l0Y2ggYWFjIGNvZGVjIHByb2ZpbGVcbiAgICAgIHJldC5vYmplY3RUeXBlID0gNTtcbiAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4O1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuXG4gICAgICBpZiAocmV0LnNhbXBsZVJhdGVJbmRleCA+PSA2KSB7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4IC0gMztcbiAgICAgIH0gZWxzZSBpZiAocmV0LmNoYW5uZWxDb3VudCA9PT0gMSkgeyAvLyBNb25vIGNoYW5uZWxcbiAgICAgICAgcmV0Lm9iamVjdFR5cGUgPSAyO1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbmZpZ1swXSA9IHJldC5vYmplY3RUeXBlIDw8IDM7XG4gICAgY29uZmlnWzBdIHw9IChyZXQuc2FtcGxlUmF0ZUluZGV4ICYgMHgwRikgPj4+IDE7XG4gICAgY29uZmlnWzFdID0gKHJldC5zYW1wbGVSYXRlSW5kZXggJiAweDBGKSA8PCA3O1xuICAgIGNvbmZpZ1sxXSB8PSAocmV0LmNoYW5uZWxDb3VudCAmIDB4MEYpIDw8IDM7XG4gICAgaWYgKHJldC5vYmplY3RUeXBlID09PSA1KSB7XG4gICAgICBjb25maWdbMV0gfD0gKChleHRlbnNpb25TYW1wbGluZ0luZGV4ICYgMHgwRikgPj4+IDEpO1xuICAgICAgY29uZmlnWzJdID0gKGV4dGVuc2lvblNhbXBsaW5nSW5kZXggJiAweDAxKSA8PCA3O1xuICAgICAgLy8gZXh0ZW5kZWQgYXVkaW8gb2JqZWN0IHR5cGU6IGZvcmNlIHRvIDIgKExDLUFBQylcbiAgICAgIGNvbmZpZ1syXSB8PSAoMiA8PCAyKTtcbiAgICAgIGNvbmZpZ1szXSA9IDA7XG4gICAgfVxuICAgIHJldC5jb25maWcgPSBjb25maWdcbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICBfcGFyc2VBQUNEYXRhIChjaHVuaykge1xuICAgIGxldCB0cmFjayA9IHRoaXMudHJhY2tzLmF1ZGlvVHJhY2tcbiAgICBpZiAoIXRyYWNrKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgbWV0YSA9IHRyYWNrLm1ldGFcblxuICAgIGlmICghbWV0YSkge1xuICAgICAgbWV0YSA9IG5ldyBBdWRpb1RyYWNrTWV0YSgpXG4gICAgfVxuXG4gICAgbGV0IGluZm8gPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXVxuXG4gICAgY2h1bmsuZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gMSlcblxuICAgIGxldCBmb3JtYXQgPSAoaW5mbyAmIDI0MCkgPj4+IDRcblxuICAgIHRyYWNrLmZvcm1hdCA9IGZvcm1hdFxuXG4gICAgaWYgKGZvcm1hdCAhPT0gMTApIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIG5ldyBFcnJvcihgaW52YWxpZCBhdWRpbyBmb3JtYXQ6ICR7Zm9ybWF0fWApKVxuICAgIH1cblxuICAgIGlmIChmb3JtYXQgPT09IDEwICYmICF0aGlzLl9oYXNBdWRpb1NlcXVlbmNlKSB7XG4gICAgICBtZXRhLnNhbXBsZVJhdGUgPSB0aGlzLl9zd2l0Y2hBdWRpb1NhbXBsaW5nRnJlcXVlbmN5KGluZm8pXG4gICAgICBtZXRhLnNhbXBsZVJhdGVJbmRleCA9IChpbmZvICYgMTIpID4+PiAyXG4gICAgICBtZXRhLmZyYW1lTGVudGggPSAoaW5mbyAmIDIpID4+PiAxXG4gICAgICBtZXRhLmNoYW5uZWxDb3VudCA9IGluZm8gJiAxXG4gICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcigxMDI0IC8gbWV0YS5hdWRpb1NhbXBsZVJhdGUgKiBtZXRhLnRpbWVzY2FsZSlcbiAgICB9XG5cbiAgICBsZXQgYXVkaW9TYW1wbGVSYXRlID0gbWV0YS5hdWRpb1NhbXBsZVJhdGVcbiAgICBsZXQgYXVkaW9TYW1wbGVSYXRlSW5kZXggPSBtZXRhLnNhbXBsZVJhdGVJbmRleFxuICAgIGxldCByZWZTYW1wbGVEdXJhdGlvbiA9IG1ldGEucmVmU2FtcGxlRHVyYXRpb25cblxuICAgIGRlbGV0ZSBjaHVuay50YWdUeXBlXG4gICAgbGV0IHZhbGlkYXRlID0gdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoY2h1bmsuZGF0YXNpemUpXG5cbiAgICBpZiAoY2h1bmsuZGF0YVswXSA9PT0gMCkgeyAvLyBBQUMgU2VxdWVuY2UgSGVhZGVyXG4gICAgICBsZXQgYWFjSGVhZGVyID0gdGhpcy5fYWFjU2VxdWVuY2VIZWFkZXJQYXJzZXIoY2h1bmsuZGF0YSlcbiAgICAgIGF1ZGlvU2FtcGxlUmF0ZSA9IGFhY0hlYWRlci5hdWRpb3NhbXBsZXJhdGUgfHwgbWV0YS5hdWRpb1NhbXBsZVJhdGVcbiAgICAgIGF1ZGlvU2FtcGxlUmF0ZUluZGV4ID0gYWFjSGVhZGVyLnNhbXBsZVJhdGVJbmRleCB8fCBtZXRhLnNhbXBsZVJhdGVJbmRleFxuICAgICAgcmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKDEwMjQgLyBhdWRpb1NhbXBsZVJhdGUgKiBtZXRhLnRpbWVzY2FsZSlcblxuICAgICAgbWV0YS5jaGFubmVsQ291bnQgPSBhYWNIZWFkZXIuY2hhbm5lbENvdW50XG4gICAgICBtZXRhLnNhbXBsZVJhdGUgPSBhdWRpb1NhbXBsZVJhdGVcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gYXVkaW9TYW1wbGVSYXRlSW5kZXhcbiAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSByZWZTYW1wbGVEdXJhdGlvblxuICAgICAgbWV0YS5kdXJhdGlvbiA9IHRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmR1cmF0aW9uICogbWV0YS50aW1lc2NhbGVcbiAgICAgIG1ldGEuY29uZmlnID0gYWFjSGVhZGVyLmNvbmZpZ1xuXG4gICAgICBjb25zdCBhdWRpb01lZGlhID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uYXVkaW9cblxuICAgICAgLy8gZmlsbCBhdWRpbyBtZWRpYSBpbmZvXG4gICAgICBhdWRpb01lZGlhLmNvZGVjID0gYWFjSGVhZGVyLmNvZGVjXG4gICAgICBhdWRpb01lZGlhLmNoYW5uZWxDb3VudCA9IGFhY0hlYWRlci5jaGFubmVsQ291bnRcbiAgICAgIGF1ZGlvTWVkaWEuc2FtcGxlUmF0ZSA9IGF1ZGlvU2FtcGxlUmF0ZVxuICAgICAgYXVkaW9NZWRpYS5zYW1wbGVSYXRlSW5kZXggPSBhYWNIZWFkZXIuYXVkaW9TYW1wbGVSYXRlSW5kZXhcblxuICAgICAgaWYgKHRoaXMuX2hhc1NjcmlwdCAmJiAhdGhpcy5faGFzQXVkaW9TZXF1ZW5jZSAmJiAoIXRoaXMudHJhY2tzLnZpZGVvVHJhY2sgfHwgdGhpcy5faGFzVmlkZW9TZXF1ZW5jZSkpIHtcbiAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICdhdWRpbycpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2hhc1NjcmlwdCAmJiB0aGlzLl9oYXNBdWRpb1NlcXVlbmNlKSB7XG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuQVVESU9fTUVUQURBVEFfQ0hBTkdFKVxuICAgICAgfVxuICAgICAgO1xuICAgICAgdGhpcy5faGFzQXVkaW9TZXF1ZW5jZSA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgY2h1bmsuZGF0YSA9IGNodW5rLmRhdGEuc2xpY2UoMSwgY2h1bmsuZGF0YS5sZW5ndGgpXG4gICAgICB0cmFjay5zYW1wbGVzLnB1c2goY2h1bmspXG4gICAgfVxuICAgIGlmICghdmFsaWRhdGUpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsICdUQUcgbGVuZ3RoIGVycm9yIGF0ICcgKyBjaHVuay5kYXRhc2l6ZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgaGV2Yy9hdmMgdmlkZW8gZGF0YVxuICAgKiBAcGFyYW0gY2h1bmtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZUhldmNEYXRhIChjaHVuaykge1xuICAgIC8vIGhlYWRlclxuICAgIGxldCBpbmZvID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBjaHVuay5mcmFtZVR5cGUgPSAoaW5mbyAmIDB4ZjApID4+PiA0XG4gICAgY2h1bmsuaXNLZXlmcmFtZSA9IGNodW5rLmZyYW1lVHlwZSA9PT0gMVxuICAgIC8vIGxldCB0ZW1wQ29kZWNJRCA9IHRoaXMudHJhY2tzLnZpZGVvVHJhY2suY29kZWNJRFxuICAgIGxldCBjb2RlY0lEID0gaW5mbyAmIDB4MGZcbiAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLmNvZGVjSUQgPSBjb2RlY0lEXG5cbiAgICAvLyBoZXZj5ZKMYXZj55qEaGVhZGVy6Kej5p6Q5pa55byP5LiA5qC3XG4gICAgY2h1bmsuYXZjUGFja2V0VHlwZSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdXG4gICAgY2h1bmsuY3RzID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwgMylcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuXG4gICAgLy8gMTIgZm9yIGhldmMsIDcgZm9yIGF2Y1xuICAgIGlmIChjb2RlY0lEID09PSAxMikge1xuICAgICAgY29uc3QgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gNSlcbiAgICAgIGNodW5rLmRhdGEgPSBkYXRhXG5cbiAgICAgIGlmIChOdW1iZXIucGFyc2VJbnQoY2h1bmsuYXZjUGFja2V0VHlwZSkgIT09IDApIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKHRoaXMuVEFHLCBgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7Y2h1bmsuZGF0YXNpemV9YClcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmFsdSA9IHt9XG4gICAgICAgIGxldCByID0gMFxuICAgICAgICBuYWx1LmN0cyA9IGNodW5rLmN0c1xuICAgICAgICBuYWx1LmR0cyA9IGNodW5rLmR0c1xuICAgICAgICB3aGlsZSAoY2h1bmsuZGF0YS5sZW5ndGggPiByKSB7XG4gICAgICAgICAgbGV0IHNpemVzID0gY2h1bmsuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQociksIDQgKyByKVxuICAgICAgICAgIG5hbHUuc2l6ZSA9IHNpemVzWzNdXG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzJdICogMjU2XG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzFdICogMjU2ICogMjU2XG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzBdICogMjU2ICogMjU2ICogMjU2XG4gICAgICAgICAgciArPSA0XG4gICAgICAgICAgbmFsdS5kYXRhID0gY2h1bmsuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQociksIG5hbHUuc2l6ZSArIHIpXG4gICAgICAgICAgciArPSBuYWx1LnNpemVcbiAgICAgICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChuYWx1KVxuICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKE51bWJlci5wYXJzZUludChjaHVuay5hdmNQYWNrZXRUeXBlKSA9PT0gMCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKSkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsIGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2RlY0lEID09PSA3KSB7XG4gICAgICBsZXQgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gNSlcbiAgICAgIGlmIChkYXRhWzRdID09PSAwICYmIGRhdGFbNV0gPT09IDAgJiYgZGF0YVs2XSA9PT0gMCAmJiBkYXRhWzddID09PSAxKSB7XG4gICAgICAgIGxldCBhdmNjbGVuZ3RoID0gMFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgIGF2Y2NsZW5ndGggPSBhdmNjbGVuZ3RoICogMjU2ICsgZGF0YVtpXVxuICAgICAgICB9XG4gICAgICAgIGF2Y2NsZW5ndGggLT0gNFxuICAgICAgICBkYXRhID0gZGF0YS5zbGljZSg0LCBkYXRhLmxlbmd0aClcbiAgICAgICAgZGF0YVszXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgYXZjY2xlbmd0aCA9IChhdmNjbGVuZ3RoIC0gZGF0YVszXSkgLyAyNTZcbiAgICAgICAgZGF0YVsyXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgYXZjY2xlbmd0aCA9IChhdmNjbGVuZ3RoIC0gZGF0YVsyXSkgLyAyNTZcbiAgICAgICAgZGF0YVsxXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgZGF0YVswXSA9IChhdmNjbGVuZ3RoIC0gZGF0YVsxXSkgLyAyNTZcbiAgICAgIH1cblxuICAgICAgY2h1bmsuZGF0YSA9IGRhdGFcbiAgICAgIC8vIElmIGl0IGlzIEFWQyBzZXF1ZWNlIEhlYWRlci5cbiAgICAgIGlmIChjaHVuay5hdmNQYWNrZXRUeXBlID09PSAwKSB7XG4gICAgICAgIHRoaXMuX2F2Y1NlcXVlbmNlSGVhZGVyUGFyc2VyKGNodW5rLmRhdGEpXG4gICAgICAgIGxldCB2YWxpZGF0ZSA9IHRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKVxuICAgICAgICBpZiAodmFsaWRhdGUpIHtcbiAgICAgICAgICBpZiAodGhpcy5faGFzU2NyaXB0ICYmICF0aGlzLl9oYXNWaWRlb1NlcXVlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ3ZpZGVvJylcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2hhc1NjcmlwdCAmJiB0aGlzLl9oYXNWaWRlb1NlcXVlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLlZJREVPX01FVEFEQVRBX0NIQU5HRSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5faGFzVmlkZW9TZXF1ZW5jZSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKHRoaXMuVEFHLCBgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7Y2h1bmsuZGF0YXNpemV9YClcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmFja3MudmlkZW9UcmFjay5zYW1wbGVzLnB1c2goY2h1bmspXG4gICAgICAgIC8vIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsIGB2aWRlbyBjb2RlaWQgaXMgJHtjb2RlY0lEfWApXG4gICAgICBjaHVuay5kYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSAxKVxuICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2NodW5rLmRhdGFzaXplfWApXG4gICAgICB9XG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChjaHVuaylcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgfVxuICAgIGRlbGV0ZSBjaHVuay50YWdUeXBlXG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgYXZjIG1ldGFkYXRhXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIgKGRhdGEpIHtcbiAgICBsZXQgdHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG5cbiAgICBpZiAoIXRyYWNrKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgaWYgKCF0cmFjay5tZXRhKSB7XG4gICAgICB0cmFjay5tZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKClcbiAgICB9XG4gICAgbGV0IG1ldGEgPSB0cmFjay5tZXRhXG5cbiAgICBtZXRhLmNvbmZpZ3VyYXRpb25WZXJzaW9uID0gZGF0YVswXVxuICAgIG1ldGEuYXZjUHJvZmlsZUluZGljYXRpb24gPSBkYXRhWzFdXG4gICAgbWV0YS5wcm9maWxlQ29tcGF0aWJpbGl0eSA9IGRhdGFbMl1cbiAgICBtZXRhLmF2Y0xldmVsSW5kaWNhdGlvbiA9IGRhdGFbM10gLyAxMFxuICAgIG1ldGEubmFsVW5pdExlbmd0aCA9IChkYXRhWzRdICYgMHgwMykgKyAxXG5cbiAgICBsZXQgbnVtT2ZTcHMgPSBkYXRhWzVdICYgMHgxZlxuICAgIG9mZnNldCA9IDZcbiAgICBsZXQgY29uZmlnID0ge31cblxuICAgIC8vIHBhcnNlIFNQU1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZTcHM7IGkrKykge1xuICAgICAgbGV0IHNpemUgPSBkYXRhW29mZnNldF0gKiAyNTUgKyBkYXRhW29mZnNldCArIDFdXG4gICAgICBvZmZzZXQgKz0gMlxuXG4gICAgICBsZXQgc3BzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHNwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cblxuICAgICAgLy8gY29kZWMgc3RyaW5nXG4gICAgICBsZXQgY29kZWNTdHJpbmcgPSAnYXZjMS4nXG4gICAgICBmb3IgKGxldCBqID0gMTsgaiA8IDQ7IGorKykge1xuICAgICAgICBsZXQgaCA9IHNwc1tqXS50b1N0cmluZygxNilcbiAgICAgICAgaWYgKGgubGVuZ3RoIDwgMikge1xuICAgICAgICAgIGggPSAnMCcgKyBoXG4gICAgICAgIH1cbiAgICAgICAgY29kZWNTdHJpbmcgKz0gaFxuICAgICAgfVxuXG4gICAgICBtZXRhLmNvZGVjID0gY29kZWNTdHJpbmdcblxuICAgICAgb2Zmc2V0ICs9IHNpemVcbiAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YS5zcHMgPSBzcHNcbiAgICAgIGNvbmZpZyA9IFNwc1BhcnNlci5wYXJzZVNQUyhzcHMpXG4gICAgfVxuXG4gICAgbGV0IG51bU9mUHBzID0gZGF0YVtvZmZzZXRdXG5cbiAgICBvZmZzZXQrK1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PZlBwczsgaSsrKSB7XG4gICAgICBsZXQgc2l6ZSA9IGRhdGFbb2Zmc2V0XSAqIDI1NSArIGRhdGFbb2Zmc2V0ICsgMV1cbiAgICAgIG9mZnNldCArPSAyXG4gICAgICBsZXQgcHBzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHBwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSBzaXplXG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLm1ldGEucHBzID0gcHBzXG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihtZXRhLCBTcHNQYXJzZXIudG9WaWRlb01ldGEoY29uZmlnKSlcblxuICAgIC8vIGZpbGwgdmlkZW8gbWVkaWEgaW5mb1xuICAgIGNvbnN0IHZpZGVvTWVkaWEgPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby52aWRlb1xuXG4gICAgdmlkZW9NZWRpYS5jb2RlYyA9IG1ldGEuY29kZWNcbiAgICB2aWRlb01lZGlhLnByb2ZpbGUgPSBtZXRhLnByb2ZpbGVcbiAgICB2aWRlb01lZGlhLmxldmVsID0gbWV0YS5sZXZlbFxuICAgIHZpZGVvTWVkaWEuY2hyb21hRm9ybWF0ID0gbWV0YS5jaHJvbWFGb3JtYXRcbiAgICB2aWRlb01lZGlhLmZyYW1lUmF0ZSA9IG1ldGEuZnJhbWVSYXRlXG4gICAgdmlkZW9NZWRpYS5wYXJSYXRpbyA9IG1ldGEucGFyUmF0aW9cbiAgICB2aWRlb01lZGlhLndpZHRoID0gdmlkZW9NZWRpYS53aWR0aCA9PT0gbWV0YS5wcmVzZW50V2lkdGggPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50V2lkdGhcbiAgICB2aWRlb01lZGlhLmhlaWdodCA9IHZpZGVvTWVkaWEuaGVpZ2h0ID09PSBtZXRhLnByZXNlbnRIZWlnaHQgPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50SGVpZ2h0XG5cbiAgICBtZXRhLmR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gKiBtZXRhLnRpbWVzY2FsZVxuICAgIG1ldGEuYXZjYyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKVxuICAgIG1ldGEuYXZjYy5zZXQoZGF0YSlcbiAgICB0cmFjay5tZXRhID0gbWV0YVxuICB9XG5cbiAgLyoqXG4gICAqIGNob29zZSBhdWRpbyBzYW1wbGUgcmF0ZVxuICAgKiBAcGFyYW0gc2FtcGxpbmdGcmVxdWVuY3lJbmRleFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvU2FtcGxlUmF0ZSAoc2FtcGxpbmdGcmVxdWVuY3lJbmRleCkge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3QgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gc2FtcGxpbmcgZnJlcXVlbmNlXG4gICAqIEBwYXJhbSBpbmZvXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3dpdGNoQXVkaW9TYW1wbGluZ0ZyZXF1ZW5jeSAoaW5mbykge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4ID0gKGluZm8gJiAxMikgPj4+IDJcbiAgICBsZXQgc2FtcGxpbmdGcmVxdWVuY3lMaXN0ID0gWzU1MDAsIDExMDI1LCAyMjA1MCwgNDQxMDAsIDQ4MDAwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gY2hhbm5lbCBjb3VudFxuICAgKiBAcGFyYW0gaW5mb1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvQ2hhbm5lbCAoaW5mbykge1xuICAgIGxldCBzYW1wbGVUcmFja051bUluZGV4ID0gaW5mbyAmIDFcbiAgICBsZXQgc2FtcGxlVHJhY2tOdW1MaXN0ID0gWzEsIDJdXG4gICAgcmV0dXJuIHNhbXBsZVRyYWNrTnVtTGlzdFtzYW1wbGVUcmFja051bUluZGV4XVxuICB9XG5cbiAgLyoqXG4gICAqIGNoZWNrIGRhdGFzaXplIGlzIHZhbGlkIHVzZSA0IEJ5dGUgYWZ0ZXIgY3VycmVudCB0YWdcbiAgICogQHBhcmFtIGRhdGFzaXplXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RhdGFzaXplVmFsaWRhdG9yIChkYXRhc2l6ZSkge1xuICAgIGxldCBkYXRhc2l6ZUNvbmZpcm0gPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludCgwLCA0KVxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpXG4gICAgcmV0dXJuIGRhdGFzaXplQ29uZmlybSA9PT0gZGF0YXNpemUgKyAxMVxuICB9XG5cbiAgZ2V0IGxvYWRlckJ1ZmZlciAoKSB7XG4gICAgaWYgKHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0xPQURFUl9CVUZGRVInKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0xPQURFUl9CVUZGRVInKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBuZXcgRXJyb3IoJ+aJvuS4jeWIsCBsb2FkZXJCdWZmZXIg5a6e5L6LJykpXG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gIH1cblxuICBnZXQgbG9nZ2VyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTE9HR0VSJylcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGbHZEZW11eGVyXG4iLCIvKipcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgyMTYjc2VjdGlvbi00LjNcbiAqL1xuY2xhc3MgTTNVOFBhcnNlciB7XG4gIHN0YXRpYyBwYXJzZSAodGV4dCwgYmFzZXVybCA9ICcnKSB7XG4gICAgbGV0IHJldCA9IHtcbiAgICAgIGR1cmF0aW9uOiAwXG4gICAgfTtcbiAgICBsZXQgcmVmcyA9IHRleHQuc3BsaXQoL1xccnxcXG4vKTtcbiAgICByZWZzID0gcmVmcy5maWx0ZXIoKHJlZikgPT4ge1xuICAgICAgcmV0dXJuIHJlZjtcbiAgICB9KVxuICAgIGxldCByZWYgPSByZWZzLnNoaWZ0KClcbiAgICBpZiAoIXJlZi5tYXRjaCgnI0VYVE0zVScpKSB7XG4gICAgICAvLyBUT0RPOk0zVeagvOW8j+mUmeivr+OAglxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJlZiA9IHJlZnMuc2hpZnQoKVxuICAgIHdoaWxlIChyZWYpIHtcbiAgICAgIGxldCByZWZtID0gcmVmLm1hdGNoKC8jKC4qKTooLiopLyk7XG4gICAgICBpZiAocmVmbSAmJiByZWZtLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgc3dpdGNoIChyZWZtWzFdKSB7XG4gICAgICAgICAgY2FzZSAnRVhULVgtVkVSU0lPTic6XG4gICAgICAgICAgICByZXQudmVyc2lvbiA9IHBhcnNlSW50KHJlZm1bMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnRVhULVgtTUVESUEtU0VRVUVOQ0UnOlxuICAgICAgICAgICAgcmV0LnNlcXVlbmNlID0gcGFyc2VJbnQocmVmbVsyXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdFWFQtWC1UQVJHRVREVVJBVElPTic6XG4gICAgICAgICAgICByZXQudGFyZ2V0ZHVyYXRpb24gPSBwYXJzZUZsb2F0KHJlZm1bMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnRVhUSU5GJzpcbiAgICAgICAgICAgIE0zVThQYXJzZXIucGFyc2VGcmFnKHJlZm0sIHJlZnMsIHJldCwgYmFzZXVybCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlZiA9IHJlZnMuc2hpZnQoKVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgc3RhdGljIHBhcnNlRnJhZyAocmVmbSwgcmVmcywgcmV0LCBiYXNldXJsKSB7XG4gICAgaWYgKCFyZXQuZnJhZ3MpIHtcbiAgICAgIHJldC5mcmFncyA9IFtdXG4gICAgfVxuICAgIFxuICAgIGxldCBmcmVnID0ge1xuICAgICAgc3RhcnQ6IHJldC5kdXJhdGlvbixcbiAgICAgIGR1cmF0aW9uOiBwYXJzZUZsb2F0KHJlZm1bMl0pICogMTAwMFxuICAgIH1cblxuICAgIHJldC5kdXJhdGlvbiArPSBmcmVnLmR1cmF0aW9uO1xuICAgIGxldCBuZXh0bGluZSA9IHJlZnMuc2hpZnQoKTtcbiAgICBpZiAobmV4dGxpbmUubWF0Y2goLyMoLiopOiguKikvKSkge1xuICAgICAgbmV4dGxpbmUgPSByZWZzLnNoaWZ0KCk7XG4gICAgfVxuICAgIGZyZWcudXJsID0gYmFzZXVybCArIG5leHRsaW5lO1xuICAgIHJldC5mcmFncy5wdXNoKGZyZWcpO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlVVJMICh1cmwpIHtcbiAgICBsZXQgYmFzZXVybCA9ICcnO1xuICAgIGxldCB1cmxzID0gdXJsLm1hdGNoKC8oLipcXC8pLipcXC5tM3U4Lyk7XG4gICAgaWYgKHVybHMgJiYgdXJscy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHVybHNbaV0ubWF0Y2goLy4qXFwvJC9nKSAmJiB1cmxzW2ldLmxlbmd0aCA+IGJhc2V1cmwubGVuZ3RoKSB7XG4gICAgICAgICAgYmFzZXVybCA9IHVybHNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJhc2V1cmw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTTNVOFBhcnNlcjtcbiIsImltcG9ydCB7IE5hbHVuaXQgfSBmcm9tICd4Z3BsYXllci1jb2RlYyc7XG5pbXBvcnQgeyBBdWRpb1RyYWNrLCBWaWRlb1RyYWNrIH0gZnJvbSAneGdwbGF5ZXItYnVmZmVyJztcbmltcG9ydCB7XG4gIEF1ZGlvVHJhY2tNZXRhLFxuICBWaWRlb1RyYWNrTWV0YSxcbiAgQXVkaW9UcmFja1NhbXBsZSxcbiAgVmlkZW9UcmFja1NhbXBsZSxcbiAgRVZFTlRTLFxuICBTdHJlYW1cbn0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuXG5jb25zdCBERU1VWF9FVkVOVFMgPSBFVkVOVFMuREVNVVhfRVZFTlRTO1xuY29uc3QgU3RyZWFtVHlwZSA9IHtcbiAgMHgwMTogWyd2aWRlbycsICdNUEVHLTEnXSxcbiAgMHgwMjogWyd2aWRlbycsICdNUEVHLTInXSxcbiAgMHgxYjogWyd2aWRlbycsICdBVkMuSDI2NCddLFxuICAweGVhOiBbJ3ZpZGVvJywgJ1ZDLTEnXSxcbiAgMHgwMzogWydhdWRpbycsICdNUEVHLTEnXSxcbiAgMHgwNDogWydhdWRpbycsICdNUEVHLTInXSxcbiAgMHgwZjogWydhdWRpbycsICdNUEVHLTIuQUFDJ10sXG4gIDB4MTE6IFsnYXVkaW8nLCAnTVBFRy00LkFBQyddLFxuICAweDgwOiBbJ2F1ZGlvJywgJ0xQQ00nXSxcbiAgMHg4MTogWydhdWRpbycsICdBQzMnXSxcbiAgMHgwNjogWydhdWRpbycsICdBQzMnXSxcbiAgMHg4MjogWydhdWRpbycsICdEVFMnXSxcbiAgMHg4MzogWydhdWRpbycsICdEb2xieSBUcnVlSEQnXSxcbiAgMHg4NDogWydhdWRpbycsICdBQzMtUGx1cyddLFxuICAweDg1OiBbJ2F1ZGlvJywgJ0RUUy1IRCddLFxuICAweDg2OiBbJ2F1ZGlvJywgJ0RUUy1NQSddLFxuICAweGExOiBbJ2F1ZGlvJywgJ0FDMy1QbHVzLVNFQyddLFxuICAweGEyOiBbJ2F1ZGlvJywgJ0RUUy1IRC1TRUMnXVxufTtcblxuY2xhc3MgVHNEZW11eGVyIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZ3MpIHtcbiAgICB0aGlzLmNvbmZpZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWdzKTtcbiAgICB0aGlzLmRlbXV4aW5nID0gZmFsc2U7XG4gICAgdGhpcy5wYXQgPSBbXTtcbiAgICB0aGlzLnBtdCA9IFtdO1xuICAgIHRoaXMuX2hhc1ZpZGVvTWV0YSA9IGZhbHNlO1xuICAgIHRoaXMuX2hhc0F1ZGlvTWV0YSA9IGZhbHNlO1xuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuREVNVVhfU1RBUlQsIHRoaXMuZGVtdXguYmluZCh0aGlzKSlcbiAgfVxuXG4gIGRlbXV4ICgpIHtcbiAgICBpZiAodGhpcy5kZW11eGluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IGJ1ZmZlciA9IHRoaXMuaW5wdXRCdWZmZXI7XG4gICAgbGV0IGZyYWdzID0geyBwYXQ6IFtdLCBwbXQ6IFtdIH07XG4gICAgbGV0IHBlc2VzID0ge307XG5cbiAgICAvLyBSZWFkIFRTIHNlZ21lbnRcbiAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCA+PSAxODgpIHtcbiAgICAgIHdoaWxlIChidWZmZXIubGVuZ3RoID49IDEgJiYgYnVmZmVyLmFycmF5WzBdW2J1ZmZlci5vZmZzZXRdICE9PSA3MSkge1xuICAgICAgICBidWZmZXIuc2hpZnQoMSk7XG4gICAgICB9XG4gICAgICBsZXQgYnVmID0gYnVmZmVyLnNoaWZ0KDE4OCk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhidWYpO1xuICAgICAgbGV0IHRzU3RyZWFtID0gbmV3IFN0cmVhbShidWYuYnVmZmVyKTtcbiAgICAgIGxldCB0cyA9IHt9O1xuICAgICAgVHNEZW11eGVyLnJlYWQodHNTdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICBpZiAodHMucGVzKSB7XG4gICAgICAgIGlmICghcGVzZXNbdHMuaGVhZGVyLnBpZF0pIHtcbiAgICAgICAgICBwZXNlc1t0cy5oZWFkZXIucGlkXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHBlc2VzW3RzLmhlYWRlci5waWRdLnB1c2godHMucGVzKTtcbiAgICAgICAgdHMucGVzLkVTLmJ1ZmZlciA9IFt0cy5wZXMuRVMuYnVmZmVyXTtcbiAgICAgIH0gZWxzZSBpZiAocGVzZXNbdHMuaGVhZGVyLnBpZF0pIHtcbiAgICAgICAgcGVzZXNbdHMuaGVhZGVyLnBpZF1bcGVzZXNbdHMuaGVhZGVyLnBpZF0ubGVuZ3RoIC0gMV0uRVMuYnVmZmVyLnB1c2godHMucGF5bG9hZC5zdHJlYW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldCBGcmFtZXMgZGF0YVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXMocGVzZXMpLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZXBlc2VzID0gcGVzZXNbT2JqZWN0LmtleXMocGVzZXMpW2ldXTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZXBlc2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGVwZXNlc1tqXS5pZCA9IE9iamVjdC5rZXlzKHBlc2VzKVtpXTtcbiAgICAgICAgZXBlc2VzW2pdLkVTLmJ1ZmZlciA9IFRzRGVtdXhlci5NZXJnZShlcGVzZXNbal0uRVMuYnVmZmVyKTtcbiAgICAgICAgaWYgKGVwZXNlc1tqXS50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgdGhpcy5wdXNoQXVkaW9TYW1wbGUoZXBlc2VzW2pdKTtcbiAgICAgICAgfSBlbHNlIGlmIChlcGVzZXNbal0udHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgIHRoaXMucHVzaFZpZGVvU2FtcGxlKGVwZXNlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5faGFzQXVkaW9NZXRhKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFLCAnYXVkaW8nKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2hhc1ZpZGVvTWV0YSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSwgJ3ZpZGVvJyk7XG4gICAgfVxuICB9XG5cbiAgcHVzaEF1ZGlvU2FtcGxlIChwZXMpIHtcbiAgICBsZXQgdHJhY2s7XG4gICAgaWYgKCF0aGlzLl90cmFja3MuYXVkaW9UcmFjaykge1xuICAgICAgdGhpcy5fdHJhY2tzLmF1ZGlvVHJhY2sgPSBuZXcgQXVkaW9UcmFjaygpO1xuICAgICAgdHJhY2sgPSB0aGlzLl90cmFja3MuYXVkaW9UcmFjaztcbiAgICAgIHRyYWNrLm1ldGEgPSBuZXcgQXVkaW9UcmFja01ldGEoe1xuICAgICAgICBhdWRpb1NhbXBsZVJhdGU6IHBlcy5FUy5mcmVxdWVuY2UsXG4gICAgICAgIHNhbXBsZVJhdGU6IHBlcy5FUy5mcmVxdWVuY2UsXG4gICAgICAgIGNoYW5uZWxDb3VudDogcGVzLkVTLmNoYW5uZWwsXG4gICAgICAgIGNvZGVjOiAnbXA0YS40MC4nICsgcGVzLkVTLmF1ZGlvT2JqZWN0VHlwZSxcbiAgICAgICAgY29uZmlnOiBwZXMuRVMuYXVkaW9Db25maWcsXG4gICAgICAgIGlkOiAyLFxuICAgICAgICBzYW1wbGVSYXRlSW5kZXg6IHBlcy5FUy5mcmVxdWVuY3lJbmRleFxuICAgICAgfSk7XG4gICAgICB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcigxMDI0IC8gdHJhY2subWV0YS5hdWRpb1NhbXBsZVJhdGUgKiB0cmFjay5tZXRhLnRpbWVzY2FsZSk7XG4gICAgICBpZiAoIXRoaXMuX2hhc0F1ZGlvTWV0YSkge1xuICAgICAgICB0aGlzLl9oYXNBdWRpb01ldGEgPSB0cnVlXG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAnYXVkaW8nKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdHJhY2sgPSB0aGlzLl90cmFja3MuYXVkaW9UcmFjaztcbiAgICB9XG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShwZXMuRVMuYnVmZmVyLmJ1ZmZlci5zbGljZShwZXMuRVMuYnVmZmVyLnBvc2l0aW9uLCBwZXMuRVMuYnVmZmVyLmxlbmd0aCkpO1xuICAgIGxldCBkdHMgPSBwYXJzZUludChwZXMucHRzIC8gOTApO1xuICAgIGxldCBwdHMgPSBwYXJzZUludChwZXMucHRzIC8gOTApO1xuICAgIGxldCBzYW1wbGUgPSBuZXcgQXVkaW9UcmFja1NhbXBsZSh7ZHRzLCBwdHMsIGRhdGF9KTtcbiAgICB0cmFjay5zYW1wbGVzLnB1c2goc2FtcGxlKTtcbiAgfVxuXG4gIHB1c2hWaWRlb1NhbXBsZSAocGVzKSB7XG4gICAgbGV0IG5hbHMgPSBOYWx1bml0LmdldE5hbHVuaXRzKHBlcy5FUy5idWZmZXIpO1xuICAgIGxldCB0cmFjaztcbiAgICBpZiAoIXRoaXMuX3RyYWNrcy52aWRlb1RyYWNrKSB7XG4gICAgICB0aGlzLl90cmFja3MudmlkZW9UcmFjayA9IG5ldyBWaWRlb1RyYWNrKCk7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy52aWRlb1RyYWNrO1xuICAgICAgdHJhY2subWV0YSA9IG5ldyBWaWRlb1RyYWNrTWV0YSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy52aWRlb1RyYWNrO1xuICAgIH1cbiAgICBsZXQgc2FtcGxlTGVuZ3RoID0gMDtcbiAgICBsZXQgc3BzID0gZmFsc2U7XG4gICAgbGV0IHBwcyA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG5hbCA9IG5hbHNbaV07XG4gICAgICBpZiAobmFsLnNwcykge1xuICAgICAgICAvLyBUT0RP77yaVmlkZW9UcmFja+S/oeaBryDlkowgTWV0YSDkv6Hmga9cbiAgICAgICAgaWYgKHRyYWNrLnNwcyAmJiBUc0RlbXV4ZXIuY29tcGFpcmVVaW50OChuYWwuYm9keSwgdHJhY2suc3BzKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3BzID0gbmFsO1xuICAgICAgICB0cmFjay5zcHMgPSBuYWwuYm9keTtcbiAgICAgICAgdHJhY2subWV0YS5jaHJvbWFGb3JtYXQgPSBzcHMuc3BzLmNocm9tYV9mb3JtYXRcbiAgICAgICAgdHJhY2subWV0YS5jb2RlYyA9ICdhdmMxLic7XG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgNDsgaisrKSB7XG4gICAgICAgICAgdmFyIGggPSBzcHMuYm9keVtqXS50b1N0cmluZygxNik7XG4gICAgICAgICAgaWYgKGgubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgaCA9ICcwJyArIGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyYWNrLm1ldGEuY29kZWMgKz0gaDtcbiAgICAgICAgfVxuICAgICAgICB0cmFjay5tZXRhLmNvZGVjSGVpZ2h0ID0gc3BzLnNwcy5jb2RlY19zaXplLmhlaWdodDtcbiAgICAgICAgdHJhY2subWV0YS5jb2RlY1dpZHRoID0gc3BzLnNwcy5jb2RlY19zaXplLndpZHRoO1xuICAgICAgICB0cmFjay5tZXRhLmZyYW1lUmF0ZSA9IHNwcy5zcHMuZnJhbWVfcmF0ZTtcbiAgICAgICAgdHJhY2subWV0YS5pZCA9IDE7XG4gICAgICAgIHRyYWNrLm1ldGEubGV2ZWwgPSBzcHMuc3BzLmxldmVsX3N0cmluZztcbiAgICAgICAgdHJhY2subWV0YS5wcmVzZW50SGVpZ2h0ID0gc3BzLnNwcy5wcmVzZW50X3NpemUuaGVpZ2h0O1xuICAgICAgICB0cmFjay5tZXRhLnByZXNlbnRXaWR0aCA9IHNwcy5zcHMucHJlc2VudF9zaXplLndpZHRoO1xuICAgICAgICB0cmFjay5tZXRhLnByb2ZpbGUgPSBzcHMuc3BzLnByb2ZpbGVfc3RyaW5nO1xuICAgICAgICB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcih0cmFjay5tZXRhLnRpbWVzY2FsZSAqIChzcHMuc3BzLmZyYW1lX3JhdGUuZnBzX2RlbiAvIHNwcy5zcHMuZnJhbWVfcmF0ZS5mcHNfbnVtKSk7XG4gICAgICAgIHRyYWNrLm1ldGEuc2FyUmF0aW8gPSBzcHMuc3BzLnNhcl9yYXRpbyA/IHNwcy5zcHMuc2FyX3JhdGlvIDogc3BzLnNwcy5wYXJfcmF0aW87XG4gICAgICB9IGVsc2UgaWYgKG5hbC5wcHMpIHtcbiAgICAgICAgdHJhY2sucHBzID0gbmFsLmJvZHk7XG4gICAgICAgIHBwcyA9IG5hbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNhbXBsZUxlbmd0aCArPSAoNCArIG5hbC5ib2R5LmJ5dGVMZW5ndGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzcHMgJiYgcHBzKSB7XG4gICAgICB0cmFjay5tZXRhLmF2Y2MgPSBOYWx1bml0LmdldEF2Y2Moc3BzLmJvZHksIHBwcy5ib2R5KTtcbiAgICAgIGlmICghdGhpcy5faGFzVmlkZW9NZXRhKSB7XG4gICAgICAgIHRoaXMuX2hhc1ZpZGVvTWV0YSA9IHRydWVcbiAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoc2FtcGxlTGVuZ3RoKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgaXNLZXlmcmFtZSA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG5hbCA9IG5hbHNbaV07XG4gICAgICBsZXQgbGVuZ3RoID0gbmFsLmJvZHkuYnl0ZUxlbmd0aDtcbiAgICAgIGlmIChuYWwuaWRyKSB7XG4gICAgICAgIGlzS2V5ZnJhbWUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFuYWwucHBzICYmICFuYWwuc3BzKSB7XG4gICAgICAgIGRhdGEuc2V0KG5ldyBVaW50OEFycmF5KFtsZW5ndGggPj4+IDI0ICYgMHhmZixcbiAgICAgICAgICBsZW5ndGggPj4+IDE2ICYgMHhmZixcbiAgICAgICAgICBsZW5ndGggPj4+IDggJiAweGZmLFxuICAgICAgICAgIGxlbmd0aCAmIDB4ZmZcbiAgICAgICAgXSksIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICBkYXRhLnNldChuYWwuYm9keSwgb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IG5ldyBWaWRlb1RyYWNrU2FtcGxlKHtcbiAgICAgIGR0czogcGFyc2VJbnQocGVzLmR0cyAvIDkwKSxcbiAgICAgIHB0czogcGFyc2VJbnQocGVzLnB0cyAvIDkwKSxcbiAgICAgIGN0czogKHBlcy5wdHMgLSBwZXMuZHRzKSAvIDkwLFxuICAgICAgb3JpZ2luRHRzOiBwZXMuZHRzLFxuICAgICAgaXNLZXlmcmFtZSxcbiAgICAgIGRhdGFcbiAgICB9KVxuICAgIHRyYWNrLnNhbXBsZXMucHVzaChzYW1wbGUpO1xuICB9XG5cbiAgc3RhdGljIGNvbXBhaXJlVWludDggKGEsIGIpIHtcbiAgICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHJldCA9IHRydWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cbiAgc3RhdGljIE1lcmdlIChidWZmZXJzKSB7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZW5ndGggKz0gKGJ1ZmZlcnNbaV0ubGVuZ3RoIC0gYnVmZmVyc1tpXS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgYnVmZmVyID0gYnVmZmVyc1tpXTtcbiAgICAgIGRhdGEuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5wb3NpdGlvbiksIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gYnVmZmVyLmxlbmd0aCAtIGJ1ZmZlci5wb3NpdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdHJlYW0oZGF0YS5idWZmZXIpO1xuICB9XG5cbiAgc3RhdGljIHJlYWQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgVHNEZW11eGVyLnJlYWRIZWFkZXIoc3RyZWFtLCB0cyk7XG4gICAgVHNEZW11eGVyLnJlYWRQYXlsb2FkKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICBpZiAodHMuaGVhZGVyLnBhY2tldCA9PT0gJ01FRElBJyAmJiB0cy5oZWFkZXIucGF5bG9hZCA9PT0gMSAmJiAhdHMudW5rbm93blBJRHMpIHtcbiAgICAgIHRzLnBlcyA9IFRzRGVtdXhlci5QRVModHMpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyByZWFkUGF5bG9hZCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgaGVhZGVyID0gdHMuaGVhZGVyXG4gICAgbGV0IHBpZCA9IGhlYWRlci5waWQ7XG4gICAgc3dpdGNoIChwaWQpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgVHNEZW11eGVyLlBBVChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBUc0RlbXV4ZXIuQ0FUKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIFRzRGVtdXhlci5UU0RUKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDB4MWZmZjpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBUT0RPOiBzb21l55qE5YaZ5rOV5LiN5aSq5aW977yM5b6X5pS5XG4gICAgICAgIGlmIChmcmFncy5wYXQuc29tZSgoaXRlbSkgPT4geyByZXR1cm4gaXRlbS5waWQgPT09IHBpZDsgfSkpIHtcbiAgICAgICAgICBUc0RlbXV4ZXIuUE1UKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgc3RzID0gZnJhZ3MucG10ID8gZnJhZ3MucG10LmZpbHRlcigoaXRlbSkgPT4gaXRlbS5waWQgPT09IHBpZCkgOiBbXTtcbiAgICAgICAgICBpZiAoc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIFRzRGVtdXhlci5NZWRpYShzdHJlYW0sIHRzLCBTdHJlYW1UeXBlW3N0c1swXS5zdHJlYW1UeXBlXVswXSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHMudW5rbm93blBJRHMgPSB0cnVlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcmVhZEhlYWRlciAoc3RyZWFtLCB0cykge1xuICAgIGxldCBoZWFkZXIgPSB7fTtcbiAgICBoZWFkZXIuc3luYyA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgaGVhZGVyLmVycm9yID0gbmV4dCA+Pj4gMTU7XG4gICAgaGVhZGVyLnBheWxvYWQgPSBuZXh0ID4+PiAxNCAmIDE7XG4gICAgaGVhZGVyLnByaW9yaXR5ID0gbmV4dCA+Pj4gMTMgJiAxO1xuICAgIGhlYWRlci5waWQgPSBuZXh0ICYgMHgxZmZmO1xuXG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcblxuICAgIGhlYWRlci5zY3JhbWJsaW5nID0gbmV4dCA+PiA2ICYgMHgzOyAvLyDmmK/lkKbliqDlr4bvvIwwMOihqOekuuS4jeWKoOWvhlxuXG4gICAgLyoqXG4gICAgICogMDAgSVNPL0lFQ+acquadpeS9v+eUqOS/neeVmVxuICAgICAqIDAxIOayoeacieiwg+aVtOWtl+aute+8jOS7heWQq+aciTE4NELmnInmlYjlh4DojbdcbiAgICAgKiAwMiDmsqHmnInmnInmlYjlh4DojbfvvIzku4XlkKvmnIkxODNC6LCD5pW05a2X5q61XG4gICAgICogMDMgMH4xODJC6LCD5pW05a2X5q615ZCO5Li65pyJ5pWI5YeA6I23XG4gICAgICovXG4gICAgaGVhZGVyLmFkYXB0YXRpb24gPSBuZXh0ID4+IDQgJiAweDM7XG4gICAgaGVhZGVyLmNvbnRpbnVpdHkgPSBuZXh0ICYgMTU7XG4gICAgaGVhZGVyLnBhY2tldCA9IGhlYWRlci5waWQgPT09IDAgPyAnUEFUJyA6ICdNRURJQSc7XG4gICAgdHMuaGVhZGVyID0gaGVhZGVyO1xuICB9XG5cbiAgc3RhdGljIFBBVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgcmV0ID0ge307XG4gICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgc3RyZWFtLnNraXAobmV4dCk7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQudGFiZWxJRCA9IG5leHQ7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmVycm9yID0gbmV4dCA+Pj4gNztcbiAgICByZXQuemVybyA9IG5leHQgPj4+IDYgJiAxO1xuICAgIHJldC5zZWN0aW9uTGVuZ3RoID0gbmV4dCAmIDB4ZmZmO1xuICAgIHJldC5zdHJlYW1JRCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmN1cnJlbnQgPSBzdHJlYW0ucmVhZFVpbnQ4KCkgJiAxO1xuICAgIHJldC5zZWN0aW9uTnVtYmVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC5sYXN0U2VjdGlvbk51bWJlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgTiA9IChyZXQuc2VjdGlvbkxlbmd0aCAtIDkpIC8gNDtcbiAgICBsZXQgbGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBsZXQgcHJvZ3JhbU51bWJlciA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICBsZXQgcGlkID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgIHByb2dyYW06IHByb2dyYW1OdW1iZXIsXG4gICAgICAgIHBpZCxcbiAgICAgICAgdHlwZTogcHJvZ3JhbU51bWJlciA9PT0gMCA/ICduZXR3b3JrJyA6ICdtYXBQSUQnXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgZnJhZ3MucGF0ID0gZnJhZ3MucGF0LmNvbmNhdChsaXN0KTtcbiAgICB9XG4gICAgcmV0Lmxpc3QgPSBsaXN0O1xuICAgIHJldC5wcm9ncmFtID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQucGlkID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICB0cy5wYXlsb2FkID0gcmV0O1xuICAgIC8vIFRPRE8gQ1JDXG4gIH1cblxuICBzdGF0aWMgUE1UIChzdHJlYW0sIHRzLCBmcmFncykge1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBsZXQgaGVhZGVyID0gdHMuaGVhZGVyO1xuICAgIGhlYWRlci5wYWNrZXQgPSAnUE1UJztcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBzdHJlYW0uc2tpcChuZXh0KTtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC50YWJsZUlEID0gbmV4dDtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQuc2VjdGlvbkxlbmd0aCA9IG5leHQgJiAweGZmZjtcbiAgICByZXQucHJvZ3JhbSA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmN1cnJlbnQgPSBzdHJlYW0ucmVhZFVpbnQ4KCkgJiAxO1xuICAgIHJldC5vcmRlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQubGFzdE9yZGVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC5QQ1JfUElEID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICByZXQucHJvZ3JhbUxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweGZmZjtcbiAgICBsZXQgTiA9IChyZXQuc2VjdGlvbkxlbmd0aCAtIDEzKSAvIDU7XG4gICAgbGV0IGxpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgc3RyZWFtVHlwZTogc3RyZWFtLnJlYWRVaW50OCgpLFxuICAgICAgICBwaWQ6IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweDFmZmYsIC8vIDB4MDdlNSDop4bpopHvvIwweDA3ZTZcbiAgICAgICAgZXM6IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweGZmZlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldC5saXN0ID0gbGlzdDtcbiAgICBpZiAoIXRoaXMucG10KSB7XG4gICAgICB0aGlzLnBtdCA9IFtdO1xuICAgIH1cbiAgICBmcmFncy5wbXQgPSB0aGlzLnBtdC5jb25jYXQobGlzdC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBpZDogaXRlbS5waWQsXG4gICAgICAgIGVzOiBpdGVtLmVzLFxuICAgICAgICBzdHJlYW1UeXBlOiBpdGVtLnN0cmVhbVR5cGUsXG4gICAgICAgIHByb2dyYW06IHJldC5wcm9ncmFtXG4gICAgICB9O1xuICAgIH0pKTtcbiAgICB0cy5wYXlsb2FkID0gcmV0O1xuICB9XG5cbiAgc3RhdGljIE1lZGlhIChzdHJlYW0sIHRzLCB0eXBlKSB7XG4gICAgbGV0IGhlYWRlciA9IHRzLmhlYWRlcjtcbiAgICBsZXQgcGF5bG9hZCA9IHt9O1xuICAgIGhlYWRlci50eXBlID0gdHlwZTtcbiAgICBpZiAoaGVhZGVyLmFkYXB0YXRpb24gPT09IDB4MDMpIHtcbiAgICAgIHBheWxvYWQuYWRhcHRhdGlvbkxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICAgIGlmIChwYXlsb2FkLmFkYXB0YXRpb25MZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICBwYXlsb2FkLmRpc2NvbnRpbnVlID0gbmV4dCA+Pj4gNztcbiAgICAgICAgcGF5bG9hZC5hY2Nlc3MgPSBuZXh0ID4+PiA2ICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5wcmlvcml0eSA9IG5leHQgPj4+IDUgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLlBDUiA9IG5leHQgPj4+IDQgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLk9QQ1IgPSBuZXh0ID4+PiAzICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5zcGxpY2VQb2ludCA9IG5leHQgPj4+IDIgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLnRyYW5zcG9ydFByaXZhdGUgPSBuZXh0ID4+PiAxICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5hZGFwdGF0aW9uRmllbGQgPSBuZXh0ICYgMHgwMTtcbiAgICAgICAgbGV0IF9zdGFydCA9IHN0cmVhbS5wb3NpdGlvbjtcbiAgICAgICAgaWYgKHBheWxvYWQuUENSID09PSAxKSB7XG4gICAgICAgICAgcGF5bG9hZC5wcm9ncmFtQ2xvY2tCYXNlID0gc3RyZWFtLnJlYWRVaW50MzIoKSA8PCAxO1xuICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHBheWxvYWQucHJvZ3JhbUNsb2NrQmFzZSB8PSBuZXh0ID4+PiAxNTtcbiAgICAgICAgICBwYXlsb2FkLnByb2dyYW1DbG9ja0V4dGVuc2lvbiA9IG5leHQgJiAweDFmZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5PUENSID09PSAxKSB7XG4gICAgICAgICAgcGF5bG9hZC5vcmlnaW5Qcm9ncmFtQ2xvY2tCYXNlID0gc3RyZWFtLnJlYWRVaW50MzIoKSA8PCAxO1xuICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHBheWxvYWQub3JpZ2luUHJvZ3JhbUNsb2NrQmFzZSArPSBuZXh0ID4+PiAxNTtcbiAgICAgICAgICBwYXlsb2FkLm9yaWdpblByb2dyYW1DbG9ja0V4dGVuc2lvbiA9IG5leHQgJiAweDFmZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5zcGxpY2VQb2ludCA9PT0gMSkge1xuICAgICAgICAgIHBheWxvYWQuc3BsaWNlQ291bnRkb3duID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXlsb2FkLnRyYW5zcG9ydFByaXZhdGUgPT09IDEpIHtcbiAgICAgICAgICBsZXQgbGVuZ3RoID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICAgIGxldCB0cmFuc3BvcnRQcml2YXRlRGF0YSA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydFByaXZhdGVEYXRhLnB1c2goc3RyZWFtLnJlYWRVaW50OCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQuYWRhcHRhdGlvbkZpZWxkID09PSAxKSB7XG4gICAgICAgICAgbGV0IGxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDgoKVxuICAgICAgICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpXG4gICAgICAgICAgbGV0IHN0YXJ0ID0gc3RyZWFtLnBvc2l0aW9uO1xuICAgICAgICAgIGxldCBsdHcgPSBuZXh0ID4+PiA3O1xuICAgICAgICAgIGxldCBwaWVjZXdpc2UgPSBuZXh0ID4+PiA2ICYgMHgxO1xuICAgICAgICAgIGxldCBzZWFtbGVzcyA9IG5leHQgPj4+IDUgJiAweDE7XG4gICAgICAgICAgaWYgKGx0dyA9PT0gMSkge1xuICAgICAgICAgICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICAgICAgICBwYXlsb2FkLmx0d1ZhbGlkID0gbmV4dCA+Pj4gMTU7XG4gICAgICAgICAgICBwYXlsb2FkLmx0d09mZnNldCA9IG5leHQgJiAweGVmZmY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwaWVjZXdpc2UgPT09IDEpIHtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQyNCgpO1xuICAgICAgICAgICAgcGF5bG9hZC5waWVjZXdpc2VSYXRlID0gbmV4dCAmIDB4M2ZmZmZmO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2VhbWxlc3MgPT09IDEpIHtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZEludDgoKTtcbiAgICAgICAgICAgIHBheWxvYWQuc3BsaWNlVHlwZSA9IG5leHQgPj4+IDQ7XG4gICAgICAgICAgICBwYXlsb2FkLmR0c05leHRBVTEgPSBuZXh0ID4+PiAxICYgMHg3O1xuICAgICAgICAgICAgcGF5bG9hZC5tYXJrZXIxID0gbmV4dCAmIDB4MTtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgICAgcGF5bG9hZC5kdHNOZXh0QVUyID0gbmV4dCA+Pj4gMTtcbiAgICAgICAgICAgIHBheWxvYWQubWFya2VyMiA9IG5leHQgJiAweDE7XG4gICAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICAgIHBheWxvYWQuZHRzTmV4dEFVMyA9IG5leHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmVhbS5za2lwKGxlbmd0aCAtIDEgLSAoc3RyZWFtLnBvc2l0aW9uIC0gc3RhcnQpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGFzdFN0dWZmaW5nID0gcGF5bG9hZC5hZGFwdGF0aW9uTGVuZ3RoIC0gMSAtIChzdHJlYW0ucG9zaXRpb24gLSBfc3RhcnQpO1xuICAgICAgICBzdHJlYW0uc2tpcChsYXN0U3R1ZmZpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgICBwYXlsb2FkLnN0cmVhbSA9IG5ldyBTdHJlYW0oc3RyZWFtLmJ1ZmZlci5zbGljZShzdHJlYW0ucG9zaXRpb24pKTtcbiAgICB0cy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgfVxuXG4gIHN0YXRpYyBQRVMgKHRzKSB7XG4gICAgbGV0IHJldCA9IHt9O1xuICAgIGxldCBidWZmZXIgPSB0cy5wYXlsb2FkLnN0cmVhbTtcbiAgICBcbiAgICBsZXQgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgaWYgKG5leHQgIT09IDEpIHtcbiAgICAgIHJldC5FUyA9IHt9O1xuICAgICAgcmV0LkVTLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHN0cmVhbUlEID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgaWYgKHN0cmVhbUlEID49IDB4ZTAgJiYgc3RyZWFtSUQgPD0gMHhlZikge1xuICAgICAgICByZXQudHlwZSA9ICd2aWRlbyc7XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtSUQgPj0gMHhjMCAmJiBzdHJlYW1JRCA8PSAweGRmKSB7XG4gICAgICAgIHJldC50eXBlID0gJ2F1ZGlvJztcbiAgICAgIH1cbiAgICAgIGxldCBwYWNrZXRMZW5ndGggPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgcmV0LnBhY2tldExlbmd0aCA9IHBhY2tldExlbmd0aDtcbiAgICAgIGlmIChyZXQudHlwZSA9PT0gJ3ZpZGVvJyB8fCByZXQudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICBsZXQgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgbGV0IGZpcnN0ID0gbmV4dCA+Pj4gNjtcbiAgICAgICAgaWYgKGZpcnN0ICE9PSAweDAyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlcnJvciB3aGVuIHBhcnNlIHBlcyBoZWFkZXInKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICByZXQucHRzRFRTRmxhZyA9IG5leHQgPj4+IDY7XG4gICAgICAgIHJldC5lc2NyRmxhZyA9IG5leHQgPj4+IDUgJiAweDAxO1xuICAgICAgICByZXQuZXNSYXRlRmxhZyA9IG5leHQgPj4+IDQgJiAweDAxO1xuICAgICAgICByZXQuZHNtRmxhZyA9IG5leHQgPj4+IDMgJiAweDAxO1xuICAgICAgICByZXQuYWRkaXRpb25hbEZsYWcgPSBuZXh0ID4+PiAyICYgMHgwMTtcbiAgICAgICAgcmV0LmNyY0ZsYWcgPSBuZXh0ID4+PiAxICYgMHgwMTtcbiAgICAgICAgcmV0LmV4dGVuc2lvbkZsYWcgPSBuZXh0ICYgMHgwMTtcbiAgICAgICAgcmV0LnBlc0hlYWRlckxlbmd0aCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgbGV0IE4xID0gcmV0LnBlc0hlYWRlckxlbmd0aDtcblxuICAgICAgICBpZiAocmV0LnB0c0RUU0ZsYWcgPT09IDIpIHtcbiAgICAgICAgICBsZXQgcHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBwdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LnB0cyA9IChwdHNbMF0gPDwgMzAgfCBwdHNbMV0gPDwgMTUgfCBwdHNbMl0pO1xuICAgICAgICAgIE4xIC09IDU7XG4gICAgICAgICAgLy8g6KeG6aKR5aaC5p6c5rKh5pyJZHRz55SocHRzXG4gICAgICAgICAgaWYgKHJldC50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICByZXQuZHRzID0gcmV0LnB0cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5wdHNEVFNGbGFnID09PSAzKSB7XG4gICAgICAgICAgbGV0IHB0cyA9IFtdO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQ4KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSAmIDB4MDcpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIHJldC5wdHMgPSAocHRzWzBdIDw8IDMwIHwgcHRzWzFdIDw8IDE1IHwgcHRzWzJdKTtcbiAgICAgICAgICBsZXQgZHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBkdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LmR0cyA9IChkdHNbMF0gPDwgMzAgfCBkdHNbMV0gPDwgMTUgfCBkdHNbMl0pO1xuICAgICAgICAgIE4xIC09IDEwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZXNjckZsYWcgPT09IDEpIHtcbiAgICAgICAgICBsZXQgZXNjciA9IFtdXG4gICAgICAgICAgbGV0IGV4ID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCA+Pj4gMyAmIDB4MDcpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZXNjci5wdXNoKG5leHQgPj4+IDEzKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCAmIDB4MDMpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ID4+PiAxMyk7XG4gICAgICAgICAgZXgucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBleC5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIHJldC5lc2NyID0gKGVzY3JbMF0gPDwgMzAgfCBlc2NyWzFdIDw8IDI4IHwgZXNjclsyXSA8PCAxNSB8IGVzY3JbM10gPDwgMTMgfCBlc2NyWzRdKSAqIDMwMCArIChleFswXSA8PCA3IHwgZXhbMV0pO1xuICAgICAgICAgIE4xIC09IDY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5lc1JhdGVGbGFnID09PSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgICAgICAgcmV0LmVzUmF0ZSA9IG5leHQgPj4+IDEgJiAweDNmZmZmZjtcbiAgICAgICAgICBOMSAtPSAzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZHNtRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnQgRFNNX3RyaWNrX21vZGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmFkZGl0aW9uYWxGbGFnID09PSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICByZXQuYWRkaXRpb25hbENvcHlJbmZvID0gbmV4dCAmIDB4N2Y7XG4gICAgICAgICAgTjEgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmNyY0ZsYWcgPT09IDEpIHtcbiAgICAgICAgICByZXQucGVzQ1JDID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBOMSAtPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZXh0ZW5zaW9uRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnQgZXh0ZW5zaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE4xID4gMCkge1xuICAgICAgICAgIGJ1ZmZlci5za2lwKE4xKTtcbiAgICAgICAgfVxuICAgICAgICByZXQuRVMgPSBUc0RlbXV4ZXIuRVMoYnVmZmVyLCByZXQudHlwZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Zvcm1hdCBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgRVMgKGJ1ZmZlciwgdHlwZSkge1xuICAgIGxldCBuZXh0O1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDMyKCk7XG4gICAgICBpZiAobmV4dCAhPT0gMSkge1xuICAgICAgICBidWZmZXIuYmFjayg0KTtcbiAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgICAgIGlmIChuZXh0ICE9PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoMjY0IG5hbCBoZWFkZXIgcGFyc2UgZmFpbGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1ZmZlci5za2lwKDIpOy8vIDA5IEYwXG4gICAgICAvLyBUT0RPIHJlYWRuYWx1XG4gICAgICByZXQuYnVmZmVyID0gYnVmZmVyO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAvLyBhZHRz55qE5ZCM5q2l5a2X6IqC77yMMTLkvY1cbiAgICAgIGlmIChuZXh0ID4+PiA0ICE9PSAweGZmZikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FhYyBFUyBwYXJzZSBFcnJvcicpO1xuICAgICAgfVxuICAgICAgY29uc3QgZnEgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXTtcbiAgICAgIHJldC5pZCA9IChuZXh0ID4+PiAzICYgMHgwMSkgPT09IDAgPyAnTVBFRy00JyA6ICdNUEVHLTInO1xuICAgICAgcmV0LmxheWVyID0gbmV4dCA+Pj4gMSAmIDB4MDM7XG4gICAgICByZXQuYWJzZW50ID0gbmV4dCAmIDB4MDE7XG4gICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSAobmV4dCA+Pj4gMTQgJiAweDAzKSArIDE7XG4gICAgICByZXQucHJvZmlsZSA9IHJldC5hdWRpb09iamVjdFR5cGUgLSAxO1xuICAgICAgcmV0LmZyZXF1ZW5jeUluZGV4ID0gbmV4dCA+Pj4gMTAgJiAweDBmO1xuICAgICAgcmV0LmZyZXF1ZW5jZSA9IGZxW3JldC5mcmVxdWVuY3lJbmRleF07XG4gICAgICByZXQuY2hhbm5lbCA9IG5leHQgPj4+IDYgJiAweDA3O1xuICAgICAgcmV0LmZyYW1lTGVuZ3RoID0gKG5leHQgJiAweDAzKSA8PCAxMSB8IChidWZmZXIucmVhZFVpbnQxNigpID4+PiA1KTtcbiAgICAgIHJldC5hdWRpb0NvbmZpZyA9IFRzRGVtdXhlci5nZXRBdWRpb0NvbmZpZyhyZXQuYXVkaW9PYmplY3RUeXBlLCByZXQuY2hhbm5lbCwgcmV0LmZyZXF1ZW5jeUluZGV4KTtcbiAgICAgIGJ1ZmZlci5za2lwKDEpO1xuICAgICAgcmV0LmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFUyAke3R5cGV9IGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgc3RhdGljIFRTRFQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgLy8gVE9ET1xuICAgIHRzLnBheWxvYWQgPSB7fTtcbiAgfVxuXG4gIHN0YXRpYyBDQVQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgbGV0IHJldCA9IHt9XG4gICAgcmV0LnRhYmxlSUQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIHJldC5zZWN0aW9uSW5kaWNhdG9yID0gbmV4dCA+Pj4gNztcbiAgICByZXQuc2VjdGlvbkxlbmd0aCA9IG5leHQgJiAweDBmZmY7XG4gICAgc3RyZWFtLnNraXAoMik7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQudmVyc2lvbiA9IG5leHQgPj4+IDM7XG4gICAgcmV0LmN1cnJlbnROZXh0SW5kaWNhdG9yID0gbmV4dCAmIDB4MDE7XG4gICAgcmV0LnNlY3Rpb25OdW1iZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgcmV0Lmxhc3RTZWN0aW9uTnVtYmVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIGxldCBOID0gKHRoaXMuc2VjdGlvbkxlbmd0aCAtIDkpIC8gNDtcbiAgICBsZXQgbGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBsaXN0LnB1c2goe30pO1xuICAgIH1cbiAgICByZXQuY3JjMzIgPSBzdHJlYW0ucmVhZFVpbnQzMigpO1xuICAgIHRzLnBheWxvYWQgPSByZXQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0QXVkaW9Db25maWcgKGF1ZGlvT2JqZWN0VHlwZSwgY2hhbm5lbCwgc2FtcGxlSW5kZXgpIHtcbiAgICBsZXQgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpXG4gICAgbGV0IGNvbmZpZztcbiAgICBsZXQgZXh0ZW5zaW9uU2FtcGxlSW5kZXg7XG4gICAgaWYgKC9maXJlZm94L2kudGVzdCh1c2VyQWdlbnQpKSB7XG4gICAgICBpZiAoc2FtcGxlSW5kZXggPj0gNikge1xuICAgICAgICBhdWRpb09iamVjdFR5cGUgPSA1O1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gc2FtcGxlSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXVkaW9PYmplY3RUeXBlID0gMjtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGVJbmRleCA9IHNhbXBsZUluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoJ2FuZHJvaWQnKSAhPT0gLTEpIHtcbiAgICAgIGF1ZGlvT2JqZWN0VHlwZSA9IDI7XG4gICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICBleHRlbnNpb25TYW1wbGVJbmRleCA9IHNhbXBsZUluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBhdWRpb09iamVjdFR5cGUgPSA1O1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuICAgICAgaWYgKHNhbXBsZUluZGV4ID49IDYpIHtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxlSW5kZXggPSBzYW1wbGVJbmRleCAtIDM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY2hhbm5lbCA9PT0gMSkge1xuICAgICAgICAgIGF1ZGlvT2JqZWN0VHlwZSA9IDI7XG4gICAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICB9XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gc2FtcGxlSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uZmlnWzBdID0gYXVkaW9PYmplY3RUeXBlIDw8IDM7XG4gICAgY29uZmlnWzBdIHw9IChzYW1wbGVJbmRleCAmIDB4MGUpID4+IDE7XG4gICAgY29uZmlnWzFdID0gKHNhbXBsZUluZGV4ICYgMHgwMSkgPDwgNztcbiAgICBjb25maWdbMV0gfD0gY2hhbm5lbCA8PCAzO1xuICAgIGlmIChhdWRpb09iamVjdFR5cGUgPT09IDUpIHtcbiAgICAgIGNvbmZpZ1sxXSB8PSAoZXh0ZW5zaW9uU2FtcGxlSW5kZXggJiAweDBlKSA+PiAxO1xuICAgICAgY29uZmlnWzJdID0gKGV4dGVuc2lvblNhbXBsZUluZGV4ICYgMHgwMSkgPDwgNztcbiAgICAgIGNvbmZpZ1syXSB8PSAyIDw8IDI7XG4gICAgICBjb25maWdbM10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgZ2V0IGlucHV0QnVmZmVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmNvbmZpZ3MuaW5wdXRidWZmZXIpO1xuICB9XG5cbiAgZ2V0IF90cmFja3MgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUc0RlbXV4ZXI7XG4iLCJjbGFzcyBQbGF5bGlzdCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5fYmFzZVVSTCA9ICcnO1xuICAgIHRoaXMuX2xpc3QgPSB7fTtcbiAgICB0aGlzLl90cyA9IHt9O1xuICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgdGhpcy5zZXF1ZW5jZSA9IC0xO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZnJhZ0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbGFzdGdldCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9hdWRvY2xlYXIgPSBjb25maWdzLmF1dG9jbGVhciB8fCBmYWxzZTtcbiAgfVxuXG4gIGdldCBsaXN0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGlzdDtcbiAgfVxuXG4gIHNldCBiYXNlVVJMIChiYXNlVVJMKSB7XG4gICAgaWYgKHRoaXMuYmFzZVVSTCAhPT0gYmFzZVVSTCkge1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgdGhpcy5fYmFzZVVSTCA9IGJhc2VVUkw7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGJhc2VVUkwgKCkge1xuICAgIHJldHVybiB0aGlzLl9iYXNlVVJMO1xuICB9XG5cbiAgcHVzaCAodHMsIGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLl90c1t0c10pIHtcbiAgICAgIHRoaXMuX3RzW3RzXSA9IHtkdXJhdGlvbjogZHVyYXRpb24sIGRvd25sb2FkZWQ6IGZhbHNlLCBkb3dubG9hZGluZzogZmFsc2UsIHN0YXJ0OiB0aGlzLmR1cmF0aW9ufTtcbiAgICAgIHRoaXMuX2xpc3RbdGhpcy5kdXJhdGlvbl0gPSB0cztcbiAgICAgIHRoaXMuZHVyYXRpb24gKz0gZHVyYXRpb247XG4gICAgICB0aGlzLmZyYWdMZW5ndGggKz0gMTtcbiAgICB9XG4gIH1cblxuICBkZWxldGVGcmFnICh1cmwpIHtcbiAgICBpZiAoIXRoaXMuX3RzW3VybF0pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9saXN0W3RoaXMuX3RzW3VybF0uc3RhcnRdO1xuICAgICAgZGVsZXRlIHRoaXMuX3RzW3VybF07XG4gICAgICB0aGlzLmZyYWdMZW5ndGggLT0gMTtcbiAgICB9XG4gIH1cblxuICBwdXNoTTNVOCAoZGF0YSkge1xuICAgIC8vIOW4uOinhOS/oeaBr+abv+aNolxuICAgIHRoaXMudmVyc2lvbiA9IGRhdGEudmVyc2lvbjtcbiAgICB0aGlzLnRhcmdldGR1cmF0aW9uID0gZGF0YS50YXJnZXRkdXJhdGlvbjtcblxuICAgIC8vIOaWsOWIhueJh+S/oeaBr1xuICAgIGlmIChkYXRhLnNlcXVlbmNlID4gdGhpcy5zZXF1ZW5jZSkge1xuICAgICAgdGhpcy5zZXF1ZW5jZSA9IGRhdGEuc2VxdWVuY2U7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEuZnJhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGZyYWcgPSBkYXRhLmZyYWdzW2ldO1xuICAgICAgICBpZiAoIXRoaXMuX3RzW2ZyYWcudXJsXSkge1xuICAgICAgICAgIHRoaXMucHVzaChmcmFnLnVybCwgZnJhZy5kdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkb3dubG9hZGVkICh0c25hbWUsIGlzbG9hZGVkKSB7XG4gICAgbGV0IHRzID0gdGhpcy5fdHNbdHNuYW1lXTtcbiAgICBpZiAodHMpIHtcbiAgICAgIHRzLmRvd25sb2FkZWQgPSBpc2xvYWRlZFxuICAgIH1cbiAgfVxuXG4gIGRvd25sb2FkaW5nICh0c25hbWUsIGxvYWRpbmcpIHtcbiAgICBsZXQgdHMgPSB0aGlzLl90c1t0c25hbWVdO1xuICAgIGlmICh0cykge1xuICAgICAgdHMuZG93bmxvYWRpbmcgPSBsb2FkaW5nXG4gICAgfVxuICB9XG5cbiAgZ2V0VHNCeU5hbWUgKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fdHNbbmFtZV07XG4gIH1cblxuICBnZXRUcyAodGltZSkge1xuICAgIGxldCB0aW1lbGlzdCA9IE9iamVjdC5rZXlzKHRoaXMuX2xpc3QpO1xuICAgIGxldCB0cztcblxuICAgIGlmICh0aW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLl9sYXN0Z2V0KSB7XG4gICAgICAgIHRpbWUgPSB0aGlzLl9sYXN0Z2V0LnRpbWUgKyB0aGlzLl9sYXN0Z2V0LmR1cmF0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaXN0Lmxlbmd0aCA8IDEgfHwgdGltZSA+PSB0aGlzLmR1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aW1lbGlzdC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChhKSAtIHBhcnNlRmxvYXQoYilcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbWVsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGltZSA+PSBwYXJzZUludCh0aW1lbGlzdFtpXSkpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMuX2xpc3RbdGltZWxpc3RbaV1dO1xuICAgICAgICBsZXQgZG93bmxvYWRlZCA9IHRoaXMuX3RzW3VybF0uZG93bmxvYWRlZDtcbiAgICAgICAgbGV0IGRvd25sb2FkaW5nID0gdGhpcy5fdHNbdXJsXS5kb3dubG9hZGluZztcbiAgICAgICAgdHMgPSB7dXJsLCBkb3dubG9hZGVkLCBkb3dubG9hZGluZywgdGltZTogcGFyc2VJbnQodGltZWxpc3RbaV0pLCBkdXJhdGlvbjogcGFyc2VJbnQodGhpcy5fdHNbdXJsXS5kdXJhdGlvbil9O1xuICAgICAgICBpZiAodGhpcy5hdXRvY2xlYXIpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fdHNbdGhpcy5fbGFzdGdldC51cmxdO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXN0W3RoaXMuX2xhc3RnZXQudGltZV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFzdGdldCA9IHRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cztcbiAgfVxuXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLl9iYXNlVVJMID0gJyc7XG4gICAgdGhpcy5fbGlzdCA9IHt9O1xuICAgIHRoaXMuX3RzID0ge307XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICB0aGlzLnNlcXVlbmNlID0gLTE7XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGxheWxpc3Q7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgRmV0Y2hMb2FkZXI6IHJlcXVpcmUoJy4vc3JjL2ZldGNoLWxvYWRlcicpLmRlZmF1bHRcbn07XG4iLCJpbXBvcnQgeyBFVkVOVFMgfSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5cbmNvbnN0IExPQURFUl9FVkVOVFMgPSBFVkVOVFMuTE9BREVSX0VWRU5UUztcbmNvbnN0IFJFQURfU1RSRUFNID0gMDtcbmNvbnN0IFJFQURfVEVYVCA9IDE7XG5jb25zdCBSRUFEX0pTT04gPSAyO1xuY29uc3QgUkVBRF9CVUZGRVIgPSAzO1xuY2xhc3MgRmV0Y2hMb2FkZXIge1xuICBjb25zdHJ1Y3RvciAoY29uZmlncykge1xuICAgIHRoaXMuY29uZmlncyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZ3MpO1xuICAgIHRoaXMudXJsID0gbnVsbFxuICAgIHRoaXMuc3RhdHVzID0gMFxuICAgIHRoaXMuZXJyb3IgPSBudWxsXG4gICAgdGhpcy5fcmVhZGVyID0gbnVsbDtcbiAgICB0aGlzLl9jYW5jZWxlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVhZHR5cGUgPSB0aGlzLmNvbmZpZ3MucmVhZHR5cGU7XG4gICAgdGhpcy5idWZmZXIgPSB0aGlzLmNvbmZpZ3MuYnVmZmVyIHx8ICdMT0FERVJfQlVGRkVSJztcbiAgICB0aGlzLl9sb2FkZXJUYXNrTm8gPSAwO1xuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5vbihMT0FERVJfRVZFTlRTLkxBREVSX1NUQVJULCB0aGlzLmxvYWQuYmluZCh0aGlzKSlcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdsb2FkZXInXG4gIH1cblxuICBsb2FkICh1cmwsIG9wdHMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIHRoaXMuX2NhbmNlbGVkID0gZmFsc2U7XG5cbiAgICAvLyBUT0RPOiBBZGQgUmFuZ2VzXG4gICAgbGV0IHBhcmFtcyA9IHRoaXMuZ2V0UGFyYW1zKG9wdHMpXG4gICAgcmV0dXJuIGZldGNoKHRoaXMudXJsLCBwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBfdGhpcy5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXNcbiAgICAgIF90aGlzLmxvYWRpbmcgPSB0cnVlXG4gICAgICByZXR1cm4gX3RoaXMuX29uRmV0Y2hSZXNwb25zZShyZXNwb25zZSk7XG4gICAgfSlcbiAgfVxuXG4gIF9vbkZldGNoUmVzcG9uc2UgKHJlc3BvbnNlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmJ1ZmZlcik7XG4gICAgdGhpcy5fbG9hZGVyVGFza05vKys7XG4gICAgbGV0IHRhc2tubyA9IHRoaXMuX2xvYWRlclRhc2tObztcbiAgICBpZiAocmVzcG9uc2Uub2sgPT09IHRydWUpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5yZWFkdHlwZSkge1xuICAgICAgICBjYXNlIFJFQURfSlNPTjpcbiAgICAgICAgICByZXNwb25zZS5qc29uKCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICAgICAgICBpZiAoIV90aGlzLl9jYW5jZWxlZCkge1xuICAgICAgICAgICAgICBpZiAoYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBkYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJFQURfVEVYVDpcbiAgICAgICAgICByZXNwb25zZS50ZXh0KCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICAgICAgICBpZiAoIV90aGlzLl9jYW5jZWxlZCkge1xuICAgICAgICAgICAgICBpZiAoYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBkYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJFQURfQlVGRkVSOlxuICAgICAgICAgIHJlc3BvbnNlLmFycmF5QnVmZmVyKCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICAgICAgICBpZiAoIV90aGlzLl9jYW5jZWxlZCkge1xuICAgICAgICAgICAgICBpZiAoYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyLnB1c2gobmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSRUFEX1NUUkVBTTpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5fb25SZWFkZXIocmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKSwgdGFza25vKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfb25SZWFkZXIgKHJlYWRlciwgdGFza25vKSB7XG4gICAgbGV0IGJ1ZmZlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5idWZmZXIpO1xuXG4gICAgaWYgKCFidWZmZXIpIHtcbiAgICAgIHRoaXMuX3JlYWRlci5jYW5jZWwoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZWFkZXIgPSByZWFkZXJcbiAgICBpZiAodGhpcy5sb2FkaW5nID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IF90aGlzID0gdGhpc1xuICAgIC8vIHJlYWRlciByZWFkIGZ1bmN0aW9uIHJldHVybnMgYSBQcm9taXNlLiBnZXQgZGF0YSB3aGVuIGNhbGxiYWNrIGFuZCBoYXMgdmFsdWUuZG9uZSB3aGVuIGRpc2Nvbm5lY3RlZC5cbiAgICAvLyByZWFk5pa55rOV6L+U5Zue5LiA5LiqUHJvbWlzZS4g5Zue6LCD5Lit5Y+v5Lul6I635Y+W5Yiw5pWw5o2u44CC5b2TdmFsdWUuZG9uZeWtmOWcqOaXtu+8jOivtOaYjumTvuaOpeaWreW8gOOAglxuICAgIHRoaXMuX3JlYWRlciAmJiB0aGlzLl9yZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gKHZhbCkge1xuICAgICAgaWYgKHZhbC5kb25lKSB7XG4gICAgICAgIC8vIFRPRE86IOWujOaIkOWkhOeQhlxuICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgX3RoaXMuc3RhdHVzID0gMDtcbiAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgYnVmZmVyKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLl9jYW5jZWxlZCkge1xuICAgICAgICBfdGhpcy5fcmVhZGVyLmNhbmNlbCgpXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJ1ZmZlci5wdXNoKHZhbC52YWx1ZSlcbiAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfREFUQUxPQURFRCwgYnVmZmVyKVxuICAgICAgcmV0dXJuIF90aGlzLl9vblJlYWRlcihyZWFkZXIsIHRhc2tubylcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgIH0pXG4gIH1cblxuICBnZXRQYXJhbXMgKG9wdHMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMpXG4gICAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG5cbiAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICBtb2RlOiAnY29ycycsXG4gICAgICBjYWNoZTogJ2RlZmF1bHQnXG4gICAgfVxuXG4gICAgLy8gYWRkIGN1c3Rtb3IgaGVhZGVyc1xuICAgIC8vIOa3u+WKoOiHquWumuS5ieWktFxuICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWdzLmhlYWRlcnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBsZXQgY29uZmlnSGVhZGVycyA9IHRoaXMuY29uZmlncy5oZWFkZXJzXG4gICAgICBmb3IgKGxldCBrZXkgaW4gY29uZmlnSGVhZGVycykge1xuICAgICAgICBpZiAoY29uZmlnSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCBjb25maWdIZWFkZXJzW2tleV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jb3JzID09PSBmYWxzZSkge1xuICAgICAgcGFyYW1zLm1vZGUgPSAnc2FtZS1vcmlnaW4nXG4gICAgfVxuXG4gICAgLy8gd2l0aENyZWRlbnRpYWxzIGlzIGRpc2FibGVkIGJ5IGRlZmF1bHRcbiAgICAvLyB3aXRoQ3JlZGVudGlhbHMg5Zyo6buY6K6k5oOF5Ya15LiL5LiN6KKr5L2/55So44CCXG4gICAgaWYgKG9wdGlvbnMud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICBwYXJhbXMuY3JlZGVudGlhbHMgPSAnaW5jbHVkZSdcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBBZGQgcmFuZ2VzO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICBjYW5jZWwgKCkge1xuICAgIGlmICh0aGlzLl9yZWFkZXIpIHtcbiAgICAgIHRoaXMuX3JlYWRlci5jYW5jZWwoKVxuICAgICAgdGhpcy5fcmVhZGVyID0gbnVsbFxuICAgICAgdGhpcy5fY2FuY2VsZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGZXRjaExvYWRlclxuIiwiaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuXG4vLyBjb25zdCBVSU5UMzJfTUFYID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcbmNsYXNzIEZtcDQge1xuICBzdGF0aWMgc2l6ZSAodmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLndyaXRlVWludDMyKHZhbHVlKVxuICB9XG4gIHN0YXRpYyBpbml0Qm94IChzaXplLCBuYW1lLCAuLi5jb250ZW50KSB7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZShzaXplKSwgRm1wNC50eXBlKG5hbWUpLCAuLi5jb250ZW50KVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIGV4dGVuc2lvbiAodmVyc2lvbiwgZmxhZykge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXG4gICAgICB2ZXJzaW9uLFxuICAgICAgKGZsYWcgPj4gMTYpICYgMHhmZixcbiAgICAgIChmbGFnID4+IDgpICYgMHhmZixcbiAgICAgIGZsYWcgJiAweGZmXG4gICAgXSlcbiAgfVxuICBzdGF0aWMgZnR5cCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyNCwgJ2Z0eXAnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDY5LCAweDczLCAweDZGLCAweDZELCAvLyBpc29tLFxuICAgICAgMHgwLCAweDAsIDB4MDAsIDB4MDEsIC8vIG1pbm9yX3ZlcnNpb246IDB4MDFcbiAgICAgIDB4NjksIDB4NzMsIDB4NkYsIDB4NkQsIC8vIGlzb21cbiAgICAgIDB4NjEsIDB4NzYsIDB4NjMsIDB4MzEgLy8gYXZjMVxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBtb292ICh7IHR5cGUsIG1ldGEgfSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCBtdmhkID0gRm1wNC5tdmhkKG1ldGEuZHVyYXRpb24sIG1ldGEudGltZXNjYWxlKVxuICAgIGxldCB0cmFrXG5cbiAgICBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgdHJhayA9IEZtcDQudmlkZW9UcmFrKG1ldGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYWsgPSBGbXA0LmF1ZGlvVHJhayhtZXRhKVxuICAgIH1cblxuICAgIGxldCBtdmV4ID0gRm1wNC5tdmV4KG1ldGEuZHVyYXRpb24sIG1ldGEudGltZXNjYWxlIHx8IDEwMDAsIG1ldGEuaWQpO1xuICAgIFttdmhkLCB0cmFrLCBtdmV4XS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21vb3YnLCBtdmhkLCB0cmFrLCBtdmV4KVxuICB9XG4gIHN0YXRpYyBtdmhkIChkdXJhdGlvbiwgdGltZXNjYWxlID0gMTAwMCkge1xuICAgIC8vIGR1cmF0aW9uICo9IHRpbWVzY2FsZTtcbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3MgICAgIDHkvY3nmoRib3jniYjmnKwrM+S9jWZsYWdzICAgYm9454mI5pys77yMMOaIljHvvIzkuIDoiKzkuLow44CC77yI5Lul5LiL5a2X6IqC5pWw5Z2H5oyJdmVyc2lvbj0w77yJXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1lICAgIOWIm+W7uuaXtumXtCAg77yI55u45a+55LqOVVRD5pe26Ze0MTkwNC0wMS0wMembtueCueeahOenkuaVsO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uX3RpbWUgICDkv67mlLnml7bpl7RcblxuICAgICAgLyoqXG4gICAgICAgICAgICAgKiB0aW1lc2NhbGU6IDQgYnl0ZXPmlofku7blqpLkvZPlnKgx56eS5pe26Ze05YaF55qE5Yi75bqm5YC877yM5Y+v5Lul55CG6Kej5Li6MeenkumVv+W6plxuICAgICAgICAgICAgICovXG4gICAgICAodGltZXNjYWxlID4+PiAyNCkgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSA+Pj4gMTYpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUgPj4+IDgpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUpICYgMHhGRixcblxuICAgICAgLyoqXG4gICAgICAgICAgICAgKiBkdXJhdGlvbjogNCBieXRlc+ivpXRyYWNr55qE5pe26Ze06ZW/5bqm77yM55SoZHVyYXRpb27lkox0aW1lIHNjYWxl5YC85Y+v5Lul6K6h566XdHJhY2vml7bplb/vvIzmr5TlpoJhdWRpbyB0cmFja+eahHRpbWUgc2NhbGUgPSA4MDAwLFxuICAgICAgICAgICAgICogZHVyYXRpb24gPSA1NjAxMjjvvIzml7bplb/kuLo3MC4wMTbvvIx2aWRlbyB0cmFja+eahHRpbWUgc2NhbGUgPSA2MDAsIGR1cmF0aW9uID0gNDIwMDDvvIzml7bplb/kuLo3MFxuICAgICAgICAgICAgICovXG4gICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDgpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbikgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8gUHJlZmVycmVkIHJhdGU6IDEuMCAgIOaOqOiNkOaSreaUvumAn+eOh++8jOmrmDE25L2N5ZKM5L2OMTbkvY3liIbliKvkuLrlsI/mlbDngrnmlbTmlbDpg6jliIblkozlsI/mlbDpg6jliIbvvIzljbNbMTYuMTZdIOagvOW8j++8jOivpeWAvOS4ujEuMO+8iDB4MDAwMTAwMDDvvInooajnpLrmraPluLjliY3lkJHmkq3mlL5cbiAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJlZmVycmVkVm9sdW1lKDEuMCwgMmJ5dGVzKSArIHJlc2VydmVkKDJieXRlcylcbiAgICAgICAgICAgICAqIOS4jnJhdGXnsbvkvLzvvIxbOC44XSDmoLzlvI/vvIwxLjDvvIgweDAxMDDvvInooajnpLrmnIDlpKfpn7Pph49cbiAgICAgICAgICAgICAqL1xuICAgICAgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vICByZXNlcnZlZDogNCArIDQgYnl0ZXPkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyAtLS0tYmVnaW4gY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIOinhumikeWPmOaNouefqemYtSAgIOe6v+aAp+S7o+aVsFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDQwLCAweDAwLCAweDAwLCAweDAwLCAvLyAtLS0tZW5kIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBwcmVfZGVmaW5lZCA2ICogNCBieXRlcy0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmUtZGVmaW5lZCDkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gLS0tLWVuZCBwcmVfZGVmaW5lZCA2ICogNCBieXRlcy0tLS1cbiAgICAgIDB4RkYsIDB4RkYsIDB4RkYsIDB4RkYgLy8gbmV4dF90cmFja19JRCDkuIvkuIDkuKp0cmFja+S9v+eUqOeahGlk5Y+3XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDggKyBieXRlcy5sZW5ndGgsICdtdmhkJywgbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpKVxuICB9XG4gIHN0YXRpYyB2aWRlb1RyYWsgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcblxuICAgIGxldCB0a2hkID0gRm1wNC50a2hkKHtcbiAgICAgIGlkOiAxLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICB3aWR0aDogZGF0YS5wcmVzZW50V2lkdGgsXG4gICAgICBoZWlnaHQ6IGRhdGEucHJlc2VudEhlaWdodCxcbiAgICAgIHR5cGU6ICd2aWRlbydcbiAgICB9KVxuICAgIGxldCBtZGlhID0gRm1wNC5tZGlhKHtcbiAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIGF2Y2M6IGRhdGEuYXZjYyxcbiAgICAgIHBhclJhdGlvOiBkYXRhLnBhclJhdGlvLFxuICAgICAgd2lkdGg6IGRhdGEucHJlc2VudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkYXRhLnByZXNlbnRIZWlnaHRcbiAgICB9KTtcbiAgICBbdGtoZCwgbWRpYV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFrJywgdGtoZCwgbWRpYSlcbiAgfVxuICBzdGF0aWMgYXVkaW9UcmFrIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IHRraGQgPSBGbXA0LnRraGQoe1xuICAgICAgaWQ6IDIsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgIH0pXG4gICAgbGV0IG1kaWEgPSBGbXA0Lm1kaWEoe1xuICAgICAgdHlwZTogJ2F1ZGlvJyxcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIGR1cmF0aW9uOiBkYXRhLmR1cmF0aW9uLFxuICAgICAgY2hhbm5lbENvdW50OiBkYXRhLmNoYW5uZWxDb3VudCxcbiAgICAgIHNhbXBsZXJhdGU6IGRhdGEuc2FtcGxlUmF0ZSxcbiAgICAgIGNvbmZpZzogZGF0YS5jb25maWdcbiAgICB9KTtcbiAgICBbdGtoZCwgbWRpYV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFrJywgdGtoZCwgbWRpYSlcbiAgfVxuICBzdGF0aWMgdGtoZCAoZGF0YSkge1xuICAgIGxldCBpZCA9IGRhdGEuaWRcbiAgICBsZXQgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uXG4gICAgbGV0IHdpZHRoID0gZGF0YS53aWR0aFxuICAgIGxldCBoZWlnaHQgPSBkYXRhLmhlaWdodFxuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwNywgLy8gdmVyc2lvbigwKSArIGZsYWdzIDHkvY3niYjmnKwgYm9454mI5pys77yMMOaIljHvvIzkuIDoiKzkuLow44CC77yI5Lul5LiL5a2X6IqC5pWw5Z2H5oyJdmVyc2lvbj0w77yJ5oyJ5L2N5oiW5pON5L2c57uT5p6c5YC877yM6aKE5a6a5LmJ5aaC5LiL77yaXG4gICAgICAvLyAweDAwMDAwMSB0cmFja19lbmFibGVk77yM5ZCm5YiZ6K+ldHJhY2vkuI3ooqvmkq3mlL7vvJtcbiAgICAgIC8vIDB4MDAwMDAyIHRyYWNrX2luX21vdmll77yM6KGo56S66K+ldHJhY2vlnKjmkq3mlL7kuK3ooqvlvJXnlKjvvJtcbiAgICAgIC8vIDB4MDAwMDA0IHRyYWNrX2luX3ByZXZpZXfvvIzooajnpLror6V0cmFja+WcqOmihOiniOaXtuiiq+W8leeUqOOAglxuICAgICAgLy8g5LiA6Iis6K+l5YC85Li6N++8jDErMis0IOWmguaenOS4gOS4quWqkuS9k+aJgOaciXRyYWNr5Z2H5pyq6K6+572udHJhY2tfaW5fbW92aWXlkox0cmFja19pbl9wcmV2aWV377yM5bCG6KKr55CG6Kej5Li65omA5pyJdHJhY2vlnYforr7nva7kuobov5nkuKTpobnvvJvlr7nkuo5oaW50IHRyYWNr77yM6K+l5YC85Li6MFxuICAgICAgLy8gaGludCB0cmFjayDov5nkuKrnibnmrornmoR0cmFja+W5tuS4jeWMheWQq+WqkuS9k+aVsOaNru+8jOiAjOaYr+WMheWQq+S6huS4gOS6m+WwhuWFtuS7luaVsOaNrnRyYWNr5omT5YyF5oiQ5rWB5aqS5L2T55qE5oyH56S65L+h5oGv44CCXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1l5Yib5bu65pe26Ze077yI55u45a+55LqOVVRD5pe26Ze0MTkwNC0wMS0wMembtueCueeahOenkuaVsO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uIHRpbWUg5L+u5pS55pe26Ze0XG4gICAgICAoaWQgPj4+IDI0KSAmIDB4RkYsIC8vIHRyYWNrX0lEOiA0IGJ5dGVzIGlk5Y+377yM5LiN6IO96YeN5aSN5LiU5LiN6IO95Li6MFxuICAgICAgKGlkID4+PiAxNikgJiAweEZGLFxuICAgICAgKGlkID4+PiA4KSAmIDB4RkYsXG4gICAgICAoaWQpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiA0IGJ5dGVzICAgIOS/neeVmeS9jVxuICAgICAgKGR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBkdXJhdGlvbjogNCBieXRlcyB0cmFja+eahOaXtumXtOmVv+W6plxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiAyICogNCBieXRlcyAgICDkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBsYXllcigyYnl0ZXMpICsgYWx0ZXJuYXRlX2dyb3VwKDJieXRlcykgIOinhumikeWxgu+8jOm7mOiupOS4ujDvvIzlgLzlsI/nmoTlnKjkuIrlsYIudHJhY2vliIbnu4Tkv6Hmga/vvIzpu5jorqTkuLow6KGo56S66K+ldHJhY2vmnKrkuI7lhbbku5Z0cmFja+aciee+pOe7hOWFs+ezu1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdm9sdW1lKDJieXRlcykgKyByZXNlcnZlZCgyYnl0ZXMpICAgIFs4LjhdIOagvOW8j++8jOWmguaenOS4uumfs+mikXRyYWNr77yMMS4w77yIMHgwMTAw77yJ6KGo56S65pyA5aSn6Z+z6YeP77yb5ZCm5YiZ5Li6MCAgICvkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBjb21wb3NpdGlvbiBtYXRyaXgtLS0tXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyDop4bpopHlj5jmjaLnn6npmLVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgKHdpZHRoID4+PiA4KSAmIDB4RkYsIC8vIC8v5a695bqmXG4gICAgICAod2lkdGgpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAoaGVpZ2h0ID4+PiA4KSAmIDB4RkYsIC8vIOmrmOW6plxuICAgICAgKGhlaWdodCkgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoLCAndGtoZCcsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIGVkdHMgKGRhdGEpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvblxuICAgIGxldCBtZWRpYVRpbWUgPSBkYXRhLm1lZGlhVGltZVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMzYpLCBGbXA0LnR5cGUoJ2VkdHMnKSlcbiAgICAvLyBlbHN0XG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSgyOCksIEZtcDQudHlwZSgnZWxzdCcpKVxuICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeSBjb3VudFxuICAgICAgKGR1cmF0aW9uID4+IDI0KSAmIDB4ZmYsIChkdXJhdGlvbiA+PiAxNikgJiAweGZmLCAoZHVyYXRpb24gPj4gOCkgJiAweGZmLCBkdXJhdGlvbiAmIDB4ZmYsXG4gICAgICAobWVkaWFUaW1lID4+IDI0KSAmIDB4ZmYsIChtZWRpYVRpbWUgPj4gMTYpICYgMHhmZiwgKG1lZGlhVGltZSA+PiA4KSAmIDB4ZmYsIG1lZGlhVGltZSAmIDB4ZmYsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxIC8vIG1lZGlhIHJhdGVcbiAgICBdKSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBtZGlhIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IG1kaGQgPSBGbXA0Lm1kaGQoZGF0YS50aW1lc2NhbGUsIGRhdGEuZHVyYXRpb24pXG4gICAgbGV0IGhkbHIgPSBGbXA0LmhkbHIoZGF0YS50eXBlKVxuICAgIGxldCBtaW5mID0gRm1wNC5taW5mKGRhdGEpO1xuICAgIFttZGhkLCBoZGxyLCBtaW5mXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21kaWEnLCBtZGhkLCBoZGxyLCBtaW5mKVxuICB9XG4gIHN0YXRpYyBtZGhkICh0aW1lc2NhbGUgPSAxMDAwLCBkdXJhdGlvbikge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY3JlYXRpb25fdGltZSAgICDliJvlu7rml7bpl7RcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1vZGlmaWNhdGlvbl90aW1l5L+u5pS55pe26Ze0XG4gICAgICAodGltZXNjYWxlID4+PiAyNCkgJiAweEZGLCAvLyB0aW1lc2NhbGU6IDQgYnl0ZXMgICAg5paH5Lu25aqS5L2T5ZyoMeenkuaXtumXtOWGheeahOWIu+W6puWAvO+8jOWPr+S7peeQhuino+S4ujHnp5Lplb/luqZcbiAgICAgICh0aW1lc2NhbGUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlID4+PiA4KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlKSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsIC8vIGR1cmF0aW9uOiA0IGJ5dGVzICB0cmFja+eahOaXtumXtOmVv+W6plxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4NTUsIDB4QzQsIC8vIGxhbmd1YWdlOiB1bmQgKHVuZGV0ZXJtaW5lZCkg5aqS5L2T6K+t6KiA56CB44CC5pyA6auY5L2N5Li6MO+8jOWQjumdojE15L2N5Li6M+S4quWtl+espu+8iOingUlTTyA2MzktMi9U5qCH5YeG5Lit5a6a5LmJ77yJXG4gICAgICAweDAwLCAweDAwIC8vIHByZV9kZWZpbmVkID0gMFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxMiArIGNvbnRlbnQuYnl0ZUxlbmd0aCwgJ21kaGQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgaGRsciAodHlwZSkge1xuICAgIGxldCB2YWx1ZSA9IFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmVfZGVmaW5lZFxuICAgICAgMHg3NiwgMHg2OSwgMHg2NCwgMHg2NSwgLy8gaGFuZGxlcl90eXBlOiAndmlkZSdcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4NTYsIDB4NjksIDB4NjQsIDB4NjUsXG4gICAgICAweDZmLCAweDQ4LCAweDYxLCAweDZlLFxuICAgICAgMHg2NCwgMHg2YywgMHg2NSwgMHg3MiwgMHgwMCAvLyBuYW1lOiAnVmlkZW9IYW5kbGVyJ1xuICAgIF1cbiAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgdmFsdWUuc3BsaWNlKDgsIDQsIC4uLlsweDczLCAweDZmLCAweDc1LCAweDZlXSlcbiAgICAgIHZhbHVlLnNwbGljZSgyNCwgMTMsIC4uLlsweDUzLCAweDZmLCAweDc1LCAweDZlLFxuICAgICAgICAweDY0LCAweDQ4LCAweDYxLCAweDZlLFxuICAgICAgICAweDY0LCAweDZjLCAweDY1LCAweDcyLCAweDAwXSlcbiAgICB9XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgdmFsdWUubGVuZ3RoLCAnaGRscicsIG5ldyBVaW50OEFycmF5KHZhbHVlKSlcbiAgfVxuICBzdGF0aWMgbWluZiAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB2bWhkID0gZGF0YS50eXBlID09PSAndmlkZW8nID8gRm1wNC52bWhkKCkgOiBGbXA0LnNtaGQoKVxuICAgIGxldCBkaW5mID0gRm1wNC5kaW5mKClcbiAgICBsZXQgc3RibCA9IEZtcDQuc3RibChkYXRhKTtcbiAgICBbdm1oZCwgZGluZiwgc3RibF0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICdtaW5mJywgdm1oZCwgZGluZiwgc3RibClcbiAgfVxuICBzdGF0aWMgdm1oZCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyMCwgJ3ZtaGQnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAxLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgLy8gZ3JhcGhpY3Ntb2RlXG4gICAgICAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAgLy8gb3Bjb2xvclxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBzbWhkICgpIHtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc21oZCcsIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAvLyBiYWxhbmNlXG4gICAgICAweDAwLCAweDAwIC8vIHJlc2VydmVkXG4gICAgXSkpXG4gIH1cbiAgc3RhdGljIGRpbmYgKCkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgZHJlZiA9IFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeV9jb3VudFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwYywgLy8gZW50cnlfc2l6ZVxuICAgICAgMHg3NSwgMHg3MiwgMHg2YywgMHgyMCwgLy8gJ3VybCcgdHlwZVxuICAgICAgMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAxIC8vIGVudHJ5X2ZsYWdzXG4gICAgXVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMzYpLCBGbXA0LnR5cGUoJ2RpbmYnKSwgRm1wNC5zaXplKDI4KSwgRm1wNC50eXBlKCdkcmVmJyksIG5ldyBVaW50OEFycmF5KGRyZWYpKVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIHN0YmwgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgc3RzZCA9IEZtcDQuc3RzZChkYXRhKVxuICAgIGxldCBzdHRzID0gRm1wNC5zdHRzKClcbiAgICBsZXQgc3RzYyA9IEZtcDQuc3RzYygpXG4gICAgbGV0IHN0c3ogPSBGbXA0LnN0c3ooKVxuICAgIGxldCBzdGNvID0gRm1wNC5zdGNvKCk7XG4gICAgW3N0c2QsIHN0dHMsIHN0c2MsIHN0c3osIHN0Y29dLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnc3RibCcsIHN0c2QsIHN0dHMsIHN0c2MsIHN0c3osIHN0Y28pXG4gIH1cbiAgc3RhdGljIHN0c2QgKGRhdGEpIHtcbiAgICBsZXQgY29udGVudFxuICAgIGlmIChkYXRhLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIC8vIGlmICghZGF0YS5pc0FBQyAmJiBkYXRhLmNvZGVjID09PSAnbXA0Jykge1xuICAgICAgLy8gICAgIGNvbnRlbnQgPSBGTVA0Lm1wMyhkYXRhKTtcbiAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAvL1xuICAgICAgLy8gfVxuICAgICAgLy8g5pSv5oyBbXA0YVxuICAgICAgY29udGVudCA9IEZtcDQubXA0YShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ID0gRm1wNC5hdmMxKGRhdGEpXG4gICAgfVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYgKyBjb250ZW50LmJ5dGVMZW5ndGgsICdzdHNkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIG5ldyBVaW50OEFycmF5KFsweDAwLCAweDAwLCAweDAwLCAweDAxXSksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG1wNGEgKGRhdGEpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSwgLy8gZGF0YV9yZWZlcmVuY2VfaW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgZGF0YS5jaGFubmVsQ291bnQsIC8vIGNoYW5uZWxjb3VudFxuICAgICAgMHgwMCwgMHgxMCwgLy8gc2FtcGxlU2l6ZToxNmJpdHNcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkMlxuICAgICAgKGRhdGEuc2FtcGxlcmF0ZSA+PiA4KSAmIDB4ZmYsXG4gICAgICBkYXRhLnNhbXBsZXJhdGUgJiAweGZmLCAvL1xuICAgICAgMHgwMCwgMHgwMFxuICAgIF0pXG4gICAgbGV0IGVzZHMgPSBGbXA0LmVzZHMoZGF0YS5jb25maWcpXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoICsgZXNkcy5ieXRlTGVuZ3RoLCAnbXA0YScsIGNvbnRlbnQsIGVzZHMpXG4gIH1cbiAgc3RhdGljIGVzZHMgKGNvbmZpZyA9IFs0MywgMTQ2LCA4LCAwXSkge1xuICAgIGNvbnN0IGNvbmZpZ2xlbiA9IGNvbmZpZy5sZW5ndGhcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG5cbiAgICAgIDB4MDMsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgxNyArIGNvbmZpZ2xlbiwgLy8gbGVuZ3RoXG4gICAgICAweDAwLCAweDAxLCAvLyBlc19pZFxuICAgICAgMHgwMCwgLy8gc3RyZWFtX3ByaW9yaXR5XG5cbiAgICAgIDB4MDQsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgwZiArIGNvbmZpZ2xlbiwgLy8gbGVuZ3RoXG4gICAgICAweDQwLCAvLyBjb2RlYyA6IG1wZWc0X2F1ZGlvXG4gICAgICAweDE1LCAvLyBzdHJlYW1fdHlwZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gYnVmZmVyX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGF2Z0JpdHJhdGVcblxuICAgICAgMHgwNSAvLyBkZXNjcmlwdG9yX3R5cGVcbiAgICBdLmNvbmNhdChbY29uZmlnbGVuXSkuY29uY2F0KGNvbmZpZykuY29uY2F0KFsweDA2LCAweDAxLCAweDAyXSkpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSg4ICsgY29udGVudC5ieXRlTGVuZ3RoKSwgRm1wNC50eXBlKCdlc2RzJyksIGNvbnRlbnQpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgYXZjMSAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2l6ZSA9IDQwLy8gOChhdmMxKSs4KGF2Y2MpKzgoYnRydCkrMTYocGFzcClcbiAgICAvLyBsZXQgc3BzID0gZGF0YS5zcHNcbiAgICAvLyBsZXQgcHBzID0gZGF0YS5wcHNcbiAgICBsZXQgd2lkdGggPSBkYXRhLndpZHRoXG4gICAgbGV0IGhlaWdodCA9IGRhdGEuaGVpZ2h0XG4gICAgbGV0IGhTcGFjaW5nID0gZGF0YS5wYXJSYXRpby5oZWlnaHRcbiAgICBsZXQgdlNwYWNpbmcgPSBkYXRhLnBhclJhdGlvLndpZHRoXG4gICAgLy8gbGV0IGF2Y2NCdWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICAvLyBhdmNjQnVmZmVyLndyaXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAvLyAgIDB4MDEsIC8vIHZlcnNpb25cbiAgICAvLyAgIHNwc1sxXSwgLy8gcHJvZmlsZVxuICAgIC8vICAgc3BzWzJdLCAvLyBwcm9maWxlIGNvbXBhdGlibGVcbiAgICAvLyAgIHNwc1szXSwgLy8gbGV2ZWxcbiAgICAvLyAgIDB4ZmMgfCAzLFxuICAgIC8vICAgMHhFMCB8IDEgLy8g55uu5YmN5Y+q5aSE55CG5LiA5Liqc3BzXG4gICAgLy8gXS5jb25jYXQoW3Nwcy5sZW5ndGggPj4+IDggJiAweGZmLCBzcHMubGVuZ3RoICYgMHhmZl0pKSlcbiAgICAvLyBhdmNjQnVmZmVyLndyaXRlKHNwcywgbmV3IFVpbnQ4QXJyYXkoWzEsIHBwcy5sZW5ndGggPj4+IDggJiAweGZmLCBwcHMubGVuZ3RoICYgMHhmZl0pLCBwcHMpXG5cbiAgICBsZXQgYXZjYyA9IGRhdGEuYXZjY1xuICAgIGxldCBhdmMxID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAvLyBkYXRhX3JlZmVyZW5jZV9pbmRleFxuICAgICAgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAod2lkdGggPj4gOCkgJiAweGZmLFxuICAgICAgd2lkdGggJiAweGZmLCAvLyB3aWR0aFxuICAgICAgKGhlaWdodCA+PiA4KSAmIDB4ZmYsXG4gICAgICBoZWlnaHQgJiAweGZmLCAvLyBoZWlnaHRcbiAgICAgIDB4MDAsIDB4NDgsIDB4MDAsIDB4MDAsIC8vIGhvcml6cmVzb2x1dGlvblxuICAgICAgMHgwMCwgMHg0OCwgMHgwMCwgMHgwMCwgLy8gdmVydHJlc29sdXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAvLyBmcmFtZV9jb3VudFxuICAgICAgMHgxMixcbiAgICAgIDB4NjQsIDB4NjEsIDB4NjksIDB4NkMsIC8vIGRhaWx5bW90aW9uL2hscy5qc1xuICAgICAgMHg3OSwgMHg2RCwgMHg2RiwgMHg3NCxcbiAgICAgIDB4NjksIDB4NkYsIDB4NkUsIDB4MkYsXG4gICAgICAweDY4LCAweDZDLCAweDczLCAweDJFLFxuICAgICAgMHg2QSwgMHg3MywgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY29tcHJlc3Nvcm5hbWVcbiAgICAgIDB4MDAsIDB4MTgsIC8vIGRlcHRoID0gMjRcbiAgICAgIDB4MTEsIDB4MTFdKSAvLyBwcmVfZGVmaW5lZCA9IC0xXG4gICAgbGV0IGJ0cnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDFjLCAweDljLCAweDgwLCAvLyBidWZmZXJTaXplREJcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzAsIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzAgLy8gYXZnQml0cmF0ZVxuICAgIF0pXG4gICAgbGV0IHBhc3AgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAoaFNwYWNpbmcgPj4gMjQpLCAvLyBoU3BhY2luZ1xuICAgICAgKGhTcGFjaW5nID4+IDE2KSAmIDB4ZmYsXG4gICAgICAoaFNwYWNpbmcgPj4gOCkgJiAweGZmLFxuICAgICAgaFNwYWNpbmcgJiAweGZmLFxuICAgICAgKHZTcGFjaW5nID4+IDI0KSwgLy8gdlNwYWNpbmdcbiAgICAgICh2U3BhY2luZyA+PiAxNikgJiAweGZmLFxuICAgICAgKHZTcGFjaW5nID4+IDgpICYgMHhmZixcbiAgICAgIHZTcGFjaW5nICYgMHhmZlxuICAgIF0pXG5cbiAgICBidWZmZXIud3JpdGUoXG4gICAgICBGbXA0LnNpemUoc2l6ZSArIGF2YzEuYnl0ZUxlbmd0aCArIGF2Y2MuYnl0ZUxlbmd0aCArIGJ0cnQuYnl0ZUxlbmd0aCksIEZtcDQudHlwZSgnYXZjMScpLCBhdmMxLFxuICAgICAgRm1wNC5zaXplKDggKyBhdmNjLmJ5dGVMZW5ndGgpLCBGbXA0LnR5cGUoJ2F2Y0MnKSwgYXZjYyxcbiAgICAgIEZtcDQuc2l6ZSgyMCksIEZtcDQudHlwZSgnYnRydCcpLCBidHJ0LFxuICAgICAgRm1wNC5zaXplKDE2KSwgRm1wNC50eXBlKCdwYXNwJyksIHBhc3BcbiAgICApXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgc3R0cyAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBlbnRyeV9jb3VudFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3N0dHMnLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBzdHNjICgpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIGVudHJ5X2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc3RzYycsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHN0Y28gKCkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZW50cnlfY291bnRcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICdzdGNvJywgY29udGVudClcbiAgfVxuICBzdGF0aWMgc3RzeiAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gc2FtcGxlX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gc2FtcGxlX2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDIwLCAnc3RzeicsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG12ZXggKGR1cmF0aW9uLCB0aW1lc2NhbGUgPSAxMDAwLCB0cmFja0lEKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBtZWhkID0gQnVmZmVyLndyaXRlVWludDMyKGR1cmF0aW9uKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoNTYpLCBGbXA0LnR5cGUoJ212ZXgnKSwgRm1wNC5zaXplKDE2KSwgRm1wNC50eXBlKCdtZWhkJyksIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBtZWhkLCBGbXA0LnRyZXgodHJhY2tJRCkpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgdHJleCAoaWQpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIChpZCA+PiAyNCksXG4gICAgICAoaWQgPj4gMTYpICYgMHhmZixcbiAgICAgIChpZCA+PiA4KSAmIDB4ZmYsXG4gICAgICAoaWQgJiAweGZmKSwgLy8gdHJhY2tfSURcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGRlZmF1bHRfc2FtcGxlX2Rlc2NyaXB0aW9uX2luZGV4XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9kdXJhdGlvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZGVmYXVsdF9zYW1wbGVfc2l6ZVxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMSAvLyBkZWZhdWx0X3NhbXBsZV9mbGFnc1xuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoLCAndHJleCcsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG1vb2YgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgbWZoZCA9IEZtcDQubWZoZCgpXG4gICAgbGV0IHRyYWYgPSBGbXA0LnRyYWYoZGF0YSk7XG4gICAgW21maGQsIHRyYWZdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnbW9vZicsIG1maGQsIHRyYWYpXG4gIH1cbiAgc3RhdGljIG1maGQgKCkge1xuICAgIGxldCBjb250ZW50ID0gQnVmZmVyLndyaXRlVWludDMyKEZtcDQuc2VxdWVuY2UpXG4gICAgRm1wNC5zZXF1ZW5jZSArPSAxXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ21maGQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgdHJhZiAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB0ZmhkID0gRm1wNC50ZmhkKGRhdGEuaWQpXG4gICAgbGV0IHRmZHQgPSBGbXA0LnRmZHQoZGF0YS50aW1lKVxuICAgIGxldCBzZHRwID0gRm1wNC5zZHRwKGRhdGEpXG4gICAgbGV0IHRydW4gPSBGbXA0LnRydW4oZGF0YSwgc2R0cC5ieXRlTGVuZ3RoKTtcblxuICAgIFt0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ3RyYWYnLCB0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwKVxuICB9XG4gIHN0YXRpYyB0ZmhkIChpZCkge1xuICAgIGxldCBjb250ZW50ID0gQnVmZmVyLndyaXRlVWludDMyKGlkKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICd0ZmhkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHRmZHQgKHRpbWUpIHtcbiAgICAvLyBsZXQgdXBwZXIgPSBNYXRoLmZsb29yKHRpbWUgLyAoVUlOVDMyX01BWCArIDEpKSxcbiAgICAvLyAgICAgbG93ZXIgPSBNYXRoLmZsb29yKHRpbWUgJSAoVUlOVDMyX01BWCArIDEpKTtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAndGZkdCcsIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBCdWZmZXIud3JpdGVVaW50MzIodGltZSkpXG4gIH1cbiAgc3RhdGljIHRydW4gKGRhdGEsIHNkdHBMZW5ndGgpIHtcbiAgICAvLyBsZXQgaWQgPSBkYXRhLmlkO1xuICAgIC8vIGxldCBjZWlsID0gaWQgPT09IDEgPyAxNiA6IDEyO1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2FtcGxlQ291bnQgPSBCdWZmZXIud3JpdGVVaW50MzIoZGF0YS5zYW1wbGVzLmxlbmd0aClcbiAgICAvLyBtZGF0LWhlYWRlciA4XG4gICAgLy8gbW9vZi1oZWFkZXIgOFxuICAgIC8vIG1maGQgMTZcbiAgICAvLyB0cmFmLWhlYWRlciA4XG4gICAgLy8gdGhoZCAxNlxuICAgIC8vIHRmZHQgMjBcbiAgICAvLyB0cnVuLWhlYWRlciAxMlxuICAgIC8vIHNhbXBsZUNvdW50IDRcbiAgICAvLyBkYXRhLW9mZnNldCA0XG4gICAgLy8gc2FtcGxlcy5sZW5ndGhcbiAgICBsZXQgb2Zmc2V0ID0gQnVmZmVyLndyaXRlVWludDMyKDggKyA4ICsgMTYgKyA4ICsgMTYgKyAxNiArIDEyICsgNCArIDQgKyAxNiAqIGRhdGEuc2FtcGxlcy5sZW5ndGggKyBzZHRwTGVuZ3RoKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMjAgKyAxNiAqIGRhdGEuc2FtcGxlcy5sZW5ndGgpLCBGbXA0LnR5cGUoJ3RydW4nKSwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MEYsIDB4MDFdKSwgc2FtcGxlQ291bnQsIG9mZnNldClcblxuICAgIC8vIGxldCBzaXplID0gYnVmZmVyLmJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAgLy8gbGV0IHdyaXRlT2Zmc2V0ID0gMFxuICAgIC8vIGRhdGEuc2FtcGxlcy5mb3JFYWNoKCgpID0+IHtcbiAgICAvLyAgIHNpemUgKz0gMTZcbiAgICAvLyB9KVxuICAgIC8vXG4gICAgLy8gbGV0IHRydW5Cb3ggPSBuZXcgVWludDhBcnJheShzaXplKVxuXG4gICAgLy8gdHJ1bkJveC5zZXQoYnVmZmVyLmJ1ZmZlciwgMClcblxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBmbGFncyA9IGl0ZW0uZmxhZ3NcbiAgICAgIC8vIGNvbnNvbGUubG9nKGl0ZW0udHlwZSwgaXRlbS5kdHMsIGl0ZW0uZHVyYXRpb24pXG5cbiAgICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfZHVyYXRpb25cbiAgICAgICAgKGl0ZW0uZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDI0KSAmIDB4RkYsIC8vIHNhbXBsZV9zaXplXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uc2l6ZSkgJiAweEZGLFxuICAgICAgICAoZmxhZ3MuaXNMZWFkaW5nIDw8IDIpIHwgZmxhZ3MuZGVwZW5kc09uLCAvLyBzYW1wbGVfZmxhZ3NcbiAgICAgICAgKGZsYWdzLmlzRGVwZW5kZWRPbiA8PCA2KSB8IChmbGFncy5oYXNSZWR1bmRhbmN5IDw8IDQpIHwgZmxhZ3MuaXNOb25TeW5jLFxuICAgICAgICAweDAwLCAweDAwLCAvLyBzYW1wbGVfZGVncmFkYXRpb25fcHJpb3JpdHlcbiAgICAgICAgKGl0ZW0uY3RzID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfY29tcG9zaXRpb25fdGltZV9vZmZzZXRcbiAgICAgICAgKGl0ZW0uY3RzID4+PiAxNikgJiAweEZGLFxuICAgICAgICAoaXRlbS5jdHMgPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uY3RzKSAmIDB4RkZcbiAgICAgIF0pKVxuICAgICAgLy8gd3JpdGVPZmZzZXQgKz0gMTZcbiAgICAgIC8vIGJ1ZmZlci53cml0ZShCdWZmZXIud3JpdGVVaW50MzIoMCkpO1xuICAgIH0pXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgc2R0cCAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDEyICsgZGF0YS5zYW1wbGVzLmxlbmd0aCksIEZtcDQudHlwZSgnc2R0cCcpLCBGbXA0LmV4dGVuc2lvbigwLCAwKSlcbiAgICBkYXRhLnNhbXBsZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGZsYWdzID0gaXRlbS5mbGFnc1xuICAgICAgY29uc3QgbnVtID0gKGZsYWdzLmlzTGVhZGluZyA8PCA2KSB8IC8vIGlzX2xlYWRpbmc6IDIgKGJpdClcbiAgICAgICAgKGZsYWdzLmRlcGVuZHNPbiA8PCA0KSB8IC8vIHNhbXBsZV9kZXBlbmRzX29uXG4gICAgICAgIChmbGFncy5pc0RlcGVuZGVkT24gPDwgMikgfCAvLyBzYW1wbGVfaXNfZGVwZW5kZWRfb25cbiAgICAgICAgKGZsYWdzLmhhc1JlZHVuZGFuY3kpLy8gc2FtcGxlX2hhc19yZWR1bmRhbmN5XG5cbiAgICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbbnVtXSkpXG4gICAgfSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBtZGF0IChkYXRhKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBzaXplID0gOFxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLnNpemVcbiAgICB9KVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoc2l6ZSksIEZtcDQudHlwZSgnbWRhdCcpKVxuICAgIGxldCBtZGF0Qm94ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICBsZXQgb2Zmc2V0ID0gMFxuICAgIG1kYXRCb3guc2V0KGJ1ZmZlci5idWZmZXIsIG9mZnNldClcbiAgICBvZmZzZXQgKz0gOFxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaXRlbS5idWZmZXIuZm9yRWFjaCgodW5pdCkgPT4ge1xuICAgICAgICBtZGF0Qm94LnNldCh1bml0LCBvZmZzZXQpXG4gICAgICAgIG9mZnNldCArPSB1bml0LmJ5dGVMZW5ndGhcbiAgICAgICAgLy8gYnVmZmVyLndyaXRlKHVuaXQuZGF0YSk7XG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIG1kYXRCb3hcbiAgfVxufVxuRm1wNC50eXBlID0gKG5hbWUpID0+IHtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtuYW1lLmNoYXJDb2RlQXQoMCksIG5hbWUuY2hhckNvZGVBdCgxKSwgbmFtZS5jaGFyQ29kZUF0KDIpLCBuYW1lLmNoYXJDb2RlQXQoMyldKVxufVxuRm1wNC5zZXF1ZW5jZSA9IDFcblxuZXhwb3J0IGRlZmF1bHQgRm1wNFxuIiwiaW1wb3J0IHtcbiAgRVZFTlRTLFxuICBzbmlmZmVyLFxuICBNZWRpYVNlZ21lbnRMaXN0LFxuICBCdWZmZXJcbn0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuaW1wb3J0IEZtcDQgZnJvbSAnLi9mbXA0J1xuXG5jb25zdCBSRU1VWF9FVkVOVFMgPSBFVkVOVFMuUkVNVVhfRVZFTlRTXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1wNFJlbXV4ZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5fZHRzQmFzZSA9IDBcbiAgICB0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgPSBmYWxzZVxuICAgIHRoaXMuX2F1ZGlvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl92aWRlb05leHREdHMgPSBudWxsXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50TGlzdCA9IG5ldyBNZWRpYVNlZ21lbnRMaXN0KCd2aWRlbycpXG4gICAgdGhpcy5fYXVkaW9TZWdtZW50TGlzdCA9IG5ldyBNZWRpYVNlZ21lbnRMaXN0KCdhdWRpbycpXG4gICAgY29uc3Qge2Jyb3dzZXJ9ID0gc25pZmZlclxuICAgIHRoaXMuX2ZpbGxTaWxlbmNlRnJhbWUgPSBicm93c2VyID09PSAnaWUnXG5cbiAgICB0aGlzLnZpZGVvQWxsRHVyYXRpb24gPSAwXG4gICAgdGhpcy5hdWRpb0FsbER1cmF0aW9uID0gMFxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5vbihSRU1VWF9FVkVOVFMuUkVNVVhfTUVESUEsIHRoaXMucmVtdXguYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5SRU1VWF9NRVRBREFUQSwgdGhpcy5vbk1ldGFEYXRhUmVhZHkuYmluZCh0aGlzKSlcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2R0c0Jhc2UgPSAtMVxuICAgIHRoaXMuX2R0c0Jhc2VJbml0ZWQgPSBmYWxzZVxuICAgIHRoaXMuX3ZpZGVvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl9hdWRpb05leHREdHMgPSBudWxsXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50TGlzdC5jbGVhcigpXG4gICAgdGhpcy5fYXVkaW9TZWdtZW50TGlzdC5jbGVhcigpXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50TGlzdCA9IG51bGxcbiAgICB0aGlzLl9hdWRpb1NlZ21lbnRMaXN0ID0gbnVsbFxuICB9XG5cbiAgcmVtdXggKCkge1xuICAgIGNvbnN0IHsgYXVkaW9UcmFjaywgdmlkZW9UcmFjayB9ID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgICAhdGhpcy5faXNEdHNCYXNlSW5pdGVkICYmIHRoaXMuY2FsY0R0c0Jhc2UoYXVkaW9UcmFjaywgdmlkZW9UcmFjaylcblxuICAgIHRoaXMuX3JlbXV4VmlkZW8odmlkZW9UcmFjaylcbiAgICB0aGlzLl9yZW11eEF1ZGlvKGF1ZGlvVHJhY2spXG4gIH1cblxuICBzZWVrICgpIHtcbiAgICB0aGlzLl92aWRlb05leHREdHMgPSBudWxsXG4gICAgdGhpcy5fYXVkaW9OZXh0RHRzID0gbnVsbFxuICAgIHRoaXMuX3ZpZGVvU2VnbWVudExpc3QuY2xlYXIoKVxuICAgIHRoaXMuX2F1ZGlvU2VnbWVudExpc3QuY2xlYXIoKVxuICB9XG5cbiAgb25NZXRhRGF0YVJlYWR5ICh0eXBlKSB7XG4gICAgbGV0IGluaXRTZWdtZW50ID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGZ0eXAgPSBGbXA0LmZ0eXAoKVxuICAgIGxldCBtb292XG4gICAgbGV0IHRyYWNrXG5cbiAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgY29uc3QgeyBhdWRpb1RyYWNrIH0gPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKVxuICAgICAgdHJhY2sgPSBhdWRpb1RyYWNrO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IHZpZGVvVHJhY2sgfSA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gICAgICB0cmFjayA9IHZpZGVvVHJhY2s7XG4gICAgfVxuXG4gICAgbW9vdiA9IEZtcDQubW9vdih7IHR5cGUsIG1ldGE6IHRyYWNrLm1ldGEgfSlcblxuICAgIGluaXRTZWdtZW50LndyaXRlKGZ0eXAsIG1vb3YpXG5cbiAgICBsZXQgcHJlc291cmNlYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmdldFNvdXJjZSh0eXBlKTtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmNyZWF0ZVNvdXJjZSh0eXBlKTtcbiAgICB9XG5cbiAgICBzb3VyY2UubWltZXR5cGUgPSB0cmFjay5tZXRhLmNvZGVjO1xuICAgIHNvdXJjZS5pbml0ID0gaW5pdFNlZ21lbnQ7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5JTklUX1NFR01FTlQsIHR5cGUpXG4gIH1cblxuICBjYWxjRHRzQmFzZSAoYXVkaW9UcmFjaywgdmlkZW9UcmFjaykge1xuICAgIGlmICghYXVkaW9UcmFjay5zYW1wbGVzLmxlbmd0aCAmJiAhdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBhdWRpb0Jhc2UgPSBJbmZpbml0eVxuICAgIGxldCB2aWRlb0Jhc2UgPSBJbmZpbml0eVxuXG4gICAgaWYgKGF1ZGlvVHJhY2suc2FtcGxlcyAmJiBhdWRpb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICBhdWRpb0Jhc2UgPSBhdWRpb1RyYWNrLnNhbXBsZXNbMF0uZHRzXG4gICAgfVxuICAgIGlmICh2aWRlb1RyYWNrLnNhbXBsZXMgJiYgdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgdmlkZW9CYXNlID0gdmlkZW9UcmFjay5zYW1wbGVzWzBdLmR0c1xuICAgIH1cblxuICAgIHRoaXMuX2R0c0Jhc2UgPSBNYXRoLm1pbihhdWRpb0Jhc2UsIHZpZGVvQmFzZSlcbiAgICB0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgPSB0cnVlXG4gIH1cblxuICBfcmVtdXhWaWRlbyAodmlkZW9UcmFjaykge1xuICAgIGNvbnN0IHRyYWNrID0gdmlkZW9UcmFja1xuXG4gICAgaWYgKCF2aWRlb1RyYWNrLnNhbXBsZXMgfHwgIXZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCB7c2FtcGxlc30gPSB0cmFja1xuICAgIGxldCBmaXJzdER0cyA9IC0xXG5cbiAgICBjb25zdCBtcDRTYW1wbGVzID0gW11cbiAgICBjb25zdCBtZGF0Qm94ID0ge1xuICAgICAgc2FtcGxlczogW11cbiAgICB9XG5cbiAgICB3aGlsZSAoc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGF2Y1NhbXBsZSA9IHNhbXBsZXMuc2hpZnQoKVxuICAgICAgY29uc3QgeyBpc0tleWZyYW1lIH0gPSBhdmNTYW1wbGVcbiAgICAgIGxldCBkdHMgPSBhdmNTYW1wbGUuZHRzIC0gdGhpcy5fZHRzQmFzZVxuXG4gICAgICBpZiAoZmlyc3REdHMgPT09IC0xKSB7XG4gICAgICAgIGZpcnN0RHRzID0gZHRzXG4gICAgICB9XG5cbiAgICAgIGxldCBjdHNcbiAgICAgIGxldCBwdHNcbiAgICAgIGlmIChhdmNTYW1wbGUucHRzKSB7XG4gICAgICAgIHB0cyA9IGF2Y1NhbXBsZS5wdHMgLSB0aGlzLl9kdHNCYXNlXG4gICAgICAgIGN0cyA9IHB0cyAtIGR0c1xuICAgICAgfVxuICAgICAgaWYgKGF2Y1NhbXBsZS5jdHMpIHtcbiAgICAgICAgcHRzID0gYXZjU2FtcGxlLmN0cyArIGR0c1xuICAgICAgICBjdHMgPSBhdmNTYW1wbGUuY3RzXG4gICAgICB9XG5cbiAgICAgIGxldCBtZGF0U2FtcGxlID0ge1xuICAgICAgICBidWZmZXI6IFtdLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9XG4gICAgICBtZGF0Qm94LnNhbXBsZXMucHVzaChtZGF0U2FtcGxlKVxuICAgICAgbWRhdFNhbXBsZS5idWZmZXIucHVzaChhdmNTYW1wbGUuZGF0YSlcbiAgICAgIG1kYXRTYW1wbGUuc2l6ZSArPSBhdmNTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG5cbiAgICAgIGxldCBzYW1wbGVEdXJhdGlvbiA9IDBcbiAgICAgIGlmIChzYW1wbGVzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHREdHMgPSBzYW1wbGVzWzBdLmR0cyAtIHRoaXMuX2R0c0Jhc2VcbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBuZXh0RHRzIC0gZHRzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGggPj0gMSkgeyAvLyBsYXN0ZXN0IHNhbXBsZSwgdXNlIHNlY29uZCBsYXN0IGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlIG9ubHkgb25lIHNhbXBsZSwgdXNlIHJlZmVyZW5jZSBkdXJhdGlvblxuICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gdGhpcy52aWRlb01ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy52aWRlb0FsbER1cmF0aW9uICs9IHNhbXBsZUR1cmF0aW9uXG4gICAgICBtcDRTYW1wbGVzLnB1c2goe1xuICAgICAgICBkdHMsXG4gICAgICAgIGN0cyxcbiAgICAgICAgcHRzLFxuICAgICAgICBkYXRhOiBhdmNTYW1wbGUuZGF0YSxcbiAgICAgICAgc2l6ZTogYXZjU2FtcGxlLmRhdGEuYnl0ZUxlbmd0aCxcbiAgICAgICAgaXNLZXlmcmFtZSxcbiAgICAgICAgZHVyYXRpb246IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBmbGFnczoge1xuICAgICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgICBkZXBlbmRzT246IGlzS2V5ZnJhbWUgPyAyIDogMSxcbiAgICAgICAgICBpc0RlcGVuZGVkT246IGlzS2V5ZnJhbWUgPyAxIDogMCxcbiAgICAgICAgICBoYXNSZWR1bmRhbmN5OiAwLFxuICAgICAgICAgIGlzTm9uU3luYzogaXNLZXlmcmFtZSA/IDAgOiAxXG4gICAgICAgIH0sXG4gICAgICAgIG9yaWdpbkR0czogZHRzLFxuICAgICAgICB0eXBlOiAndmlkZW8nXG4gICAgICB9KVxuICAgIH1cblxuICAgIGxldCBtb29mTWRhdCA9IG5ldyBCdWZmZXIoKVxuXG4gICAgY29uc3QgbW9vZiA9IEZtcDQubW9vZih7XG4gICAgICBpZDogdHJhY2subWV0YS5pZCxcbiAgICAgIHRpbWU6IGZpcnN0RHRzLFxuICAgICAgc2FtcGxlczogbXA0U2FtcGxlc1xuICAgIH0pXG4gICAgY29uc3QgbWRhdCA9IEZtcDQubWRhdChtZGF0Qm94KVxuICAgIG1vb2ZNZGF0LndyaXRlKG1vb2YsIG1kYXQpXG5cbiAgICB0cmFjay5zYW1wbGVzID0gW11cbiAgICB0cmFjay5sZW5ndGggPSAwXG5cbiAgICBsZXQgcHJlc291cmNlYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmdldFNvdXJjZSgndmlkZW8nKTtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmNyZWF0ZVNvdXJjZSgndmlkZW8nKTtcbiAgICB9XG5cbiAgICBzb3VyY2UuZGF0YS5wdXNoKG1vb2ZNZGF0KTtcblxuICAgIHRoaXMuZW1pdChSRU1VWF9FVkVOVFMuTUVESUFfU0VHTUVOVCwgJ3ZpZGVvJylcbiAgfVxuXG4gIF9yZW11eEF1ZGlvICh0cmFjaykge1xuICAgIGNvbnN0IHtzYW1wbGVzfSA9IHRyYWNrXG4gICAgbGV0IGZpcnN0RHRzID0gLTFcbiAgICBsZXQgbXA0U2FtcGxlcyA9IFtdXG5cbiAgICBjb25zdCBtZGF0Qm94ID0ge1xuICAgICAgc2FtcGxlczogW11cbiAgICB9XG4gICAgaWYgKCFzYW1wbGVzIHx8ICFzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGxldCBpc0ZpcnN0RHRzSW5pdGVkID0gZmFsc2VcbiAgICB3aGlsZSAoc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIGxldCBzYW1wbGUgPSBzYW1wbGVzLnNoaWZ0KClcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gc2FtcGxlXG4gICAgICBsZXQgZHRzID0gc2FtcGxlLmR0cyAtIHRoaXMuX2R0c0Jhc2VcbiAgICAgIGNvbnN0IG9yaWdpbkR0cyA9IGR0c1xuICAgICAgaWYgKCFpc0ZpcnN0RHRzSW5pdGVkKSB7XG4gICAgICAgIGZpcnN0RHRzID0gZHRzXG4gICAgICAgIGlzRmlyc3REdHNJbml0ZWQgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGxldCBzYW1wbGVEdXJhdGlvbiA9IDBcblxuICAgICAgaWYgKHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQpIHtcbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSB0aGlzLmF1ZGlvTWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkXG4gICAgICB9IGVsc2UgaWYgKHNhbXBsZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dER0cyA9IHNhbXBsZXNbMF0uZHRzIC0gdGhpcy5fZHRzQmFzZTtcbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBuZXh0RHRzIC0gZHRzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGggPj0gMSkgeyAvLyB1c2Ugc2Vjb25kIGxhc3Qgc2FtcGxlIGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlIG9ubHkgb25lIHNhbXBsZSwgdXNlIHJlZmVyZW5jZSBzYW1wbGUgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gY29uc29sZS5sb2coJ3JlbXV4IGF1ZGlvICcsIGR0cylcbiAgICAgIHRoaXMuYXVkaW9BbGxEdXJhdGlvbiArPSBzYW1wbGVEdXJhdGlvblxuICAgICAgY29uc3QgbXA0U2FtcGxlID0ge1xuICAgICAgICBkdHMsXG4gICAgICAgIHB0czogZHRzLFxuICAgICAgICBjdHM6IDAsXG4gICAgICAgIHNpemU6IGRhdGEuYnl0ZUxlbmd0aCxcbiAgICAgICAgZHVyYXRpb246IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBmbGFnczoge1xuICAgICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgICBkZXBlbmRzT246IDIsXG4gICAgICAgICAgaXNEZXBlbmRlZE9uOiAxLFxuICAgICAgICAgIGhhc1JlZHVuZGFuY3k6IDAsXG4gICAgICAgICAgaXNOb25TeW5jOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGlzS2V5ZnJhbWU6IHRydWUsXG4gICAgICAgIG9yaWdpbkR0cyxcbiAgICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgICAgfVxuXG4gICAgICBsZXQgbWRhdFNhbXBsZSA9IHtcbiAgICAgICAgYnVmZmVyOiBbXSxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfVxuICAgICAgbWRhdFNhbXBsZS5idWZmZXIucHVzaChkYXRhKVxuICAgICAgbWRhdFNhbXBsZS5zaXplICs9IGRhdGEuYnl0ZUxlbmd0aFxuXG4gICAgICBtZGF0Qm94LnNhbXBsZXMucHVzaChtZGF0U2FtcGxlKVxuXG4gICAgICBtcDRTYW1wbGVzLnB1c2gobXA0U2FtcGxlKVxuICAgIH1cblxuICAgIGNvbnN0IG1vb2ZNZGF0ID0gbmV3IEJ1ZmZlcigpXG4gICAgY29uc3QgbW9vZiA9IEZtcDQubW9vZih7XG4gICAgICBpZDogdHJhY2subWV0YS5pZCxcbiAgICAgIHRpbWU6IGZpcnN0RHRzLFxuICAgICAgc2FtcGxlczogbXA0U2FtcGxlc1xuICAgIH0pXG4gICAgY29uc3QgbWRhdCA9IEZtcDQubWRhdChtZGF0Qm94KVxuICAgIG1vb2ZNZGF0LndyaXRlKG1vb2YsIG1kYXQpXG5cbiAgICB0cmFjay5zYW1wbGVzID0gW11cbiAgICB0cmFjay5sZW5ndGggPSAwXG5cbiAgICBsZXQgcHJlc291cmNlYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmdldFNvdXJjZSgnYXVkaW8nKTtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmNyZWF0ZVNvdXJjZSgnYXVkaW8nKTtcbiAgICB9XG4gICAgc291cmNlLmRhdGEucHVzaChtb29mTWRhdCk7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5NRURJQV9TRUdNRU5ULCAnYXVkaW8nLCBtb29mTWRhdClcbiAgfVxuXG4gIGluaXRTaWxlbnRBdWRpbyAoZHRzLCBkdXJhdGlvbikge1xuICAgIGNvbnN0IHVuaXQgPSBNcDRSZW11eGVyLmdldFNpbGVudEZyYW1lKHRoaXMuX2F1ZGlvTWV0YS5jaGFubmVsQ291bnQpXG4gICAgcmV0dXJuIHtcbiAgICAgIGR0cyxcbiAgICAgIHB0czogZHRzLFxuICAgICAgY3RzOiAwLFxuICAgICAgZHVyYXRpb24sXG4gICAgICB1bml0LFxuICAgICAgc2l6ZTogdW5pdC5ieXRlTGVuZ3RoLFxuICAgICAgb3JpZ2luRHRzOiBkdHMsXG4gICAgICB0eXBlOiAndmlkZW8nXG4gICAgfVxuICB9XG5cbiAgZ2V0IHZpZGVvTWV0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpLnZpZGVvVHJhY2subWV0YVxuICB9XG4gIGdldCBhdWRpb01ldGEgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKS5hdWRpb1RyYWNrLm1ldGFcbiAgfVxuXG4gIHN0YXRpYyBnZXRTaWxlbnRGcmFtZSAoY2hhbm5lbENvdW50KSB7XG4gICAgaWYgKGNoYW5uZWxDb3VudCA9PT0gMSkge1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIzLCAweDgwXSlcbiAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMikge1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDIxLCAweDAwLCAweDQ5LCAweDkwLCAweDAyLCAweDE5LCAweDAwLCAweDIzLCAweDgwXSlcbiAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMykge1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDhlXSlcbiAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNCkge1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgwLCAweDJjLCAweDgwLCAweDA4LCAweDAyLCAweDM4XSlcbiAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNSkge1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgyLCAweDMwLCAweDA0LCAweDk5LCAweDAwLCAweDIxLCAweDkwLCAweDAyLCAweDM4XSlcbiAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNikge1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgyLCAweDMwLCAweDA0LCAweDk5LCAweDAwLCAweDIxLCAweDkwLCAweDAyLCAweDAwLCAweGIyLCAweDAwLCAweDIwLCAweDA4LCAweGUwXSlcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIENvbnRleHQ6IHJlcXVpcmUoJy4vc3JjL2NvbnRleHQnKS5kZWZhdWx0LFxuXG4gIC8vIE1vZHVsZXMgZnJvbSBjb25zdGFudHNcbiAgRVZFTlRTOiByZXF1aXJlKCcuL3NyYy9jb25zdGFudHMvZXZlbnRzJykuZGVmYXVsdCxcbiAgV09SS0VSX0NPTU1BTkRTOiByZXF1aXJlKCcuL3NyYy9jb25zdGFudHMvd29ya2VyLWNvbW1hbmRzJykuZGVmYXVsdCxcblxuICAvLyBNb2R1bGVzIGZyb20gZW52XG4gIHNuaWZmZXI6IHJlcXVpcmUoJy4vc3JjL2Vudi9zbmlmZmVyJykuZGVmYXVsdCxcbiAgaXNMZTogcmVxdWlyZSgnLi9zcmMvZW52L2lzbGUnKS5kZWZhdWx0LFxuICBVVEY4OiByZXF1aXJlKCcuL3NyYy9lbnYvdXRmOCcpLmRlZmF1bHQsXG5cbiAgLy8gTW9kZWxzXG4gIE1lZGlhSW5mbzogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL21lZGlhLWluZm8nKS5kZWZhdWx0LFxuICBNZWRpYVNhbXBsZTogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL21lZGlhLXNhbXBsZScpLmRlZmF1bHQsXG4gIE1lZGlhU2VnbWVudDogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL21lZGlhLXNlZ21lbnQnKS5kZWZhdWx0LFxuICBNZWRpYVNlZ21lbnRMaXN0OiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvbWVkaWEtc2VnbWVudC1saXN0JykuZGVmYXVsdCxcbiAgQXVkaW9UcmFja01ldGE6IHJlcXVpcmUoJy4vc3JjL21vZGVscy90cmFjay1tZXRhJykuQXVkaW9UcmFja01ldGEsXG4gIFZpZGVvVHJhY2tNZXRhOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvdHJhY2stbWV0YScpLlZpZGVvVHJhY2tNZXRhLFxuICBBdWRpb1RyYWNrU2FtcGxlOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvdHJhY2stc2FtcGxlJykuQXVkaW9UcmFja1NhbXBsZSxcbiAgVmlkZW9UcmFja1NhbXBsZTogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL3RyYWNrLXNhbXBsZScpLlZpZGVvVHJhY2tTYW1wbGUsXG5cbiAgLy8gTW9kdWxlcyBmcm9tIG1zZVxuICBNc2U6IHJlcXVpcmUoJy4vc3JjL21zZS9pbmRleCcpLmRlZmF1bHQsXG5cbiAgLy8gTW9kdWxlcyBmcm9tIHdyaXRlXG4gIFN0cmVhbTogcmVxdWlyZSgnLi9zcmMvd3JpdGUvc3RyZWFtJykuZGVmYXVsdCxcbiAgQnVmZmVyOiByZXF1aXJlKCcuL3NyYy93cml0ZS9idWZmZXInKS5kZWZhdWx0XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChSZXN1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgdG90YWxMZW5ndGggPSAwO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcnJheXMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJyYXlzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGFycmF5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgIHZhciBhcnIgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgdG90YWxMZW5ndGggKz0gYXJyLmxlbmd0aDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBSZXN1bHRDb25zdHJ1Y3Rvcih0b3RhbExlbmd0aCk7XG4gIHZhciBvZmZzZXQgPSAwO1xuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gYXJyYXlzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICB2YXIgX2FyciA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgcmVzdWx0LnNldChfYXJyLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IF9hcnIubGVuZ3RoO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NvbmNhdCA9IHJlcXVpcmUoJy4vY29uY2F0Jyk7XG5cbnZhciBfY29uY2F0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbmNhdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm1vZHVsZS5leHBvcnRzID0gX2NvbmNhdDIuZGVmYXVsdDsiLCJjb25zdCBMT0FERVJfRVZFTlRTID0ge1xuICBMQURFUl9TVEFSVDogJ0xPQURFUl9TVEFSVCcsXG4gIExPQURFUl9EQVRBTE9BREVEOiAnTE9BREVSX0RBVEFMT0FERUQnLFxuICBMT0FERVJfQ09NUExFVEU6ICdMT0FERVJfQ09NUExFVEUnLFxuICBMT0FERVJfRVJST1I6ICdMT0FERVJfRVJST1InXG59XG5cbmNvbnN0IERFTVVYX0VWRU5UUyA9IHtcbiAgREVNVVhfU1RBUlQ6ICdERU1VWF9TVEFSVCcsXG4gIERFTVVYX0NPTVBMRVRFOiAnREVNVVhfQ09NUExFVEUnLFxuICBERU1VWF9FUlJPUjogJ0RFTVVYX0VSUk9SJyxcbiAgTUVUQURBVEFfUEFSU0VEOiAnTUVUQURBVEFfUEFSU0VEJyxcbiAgVklERU9fTUVUQURBVEFfQ0hBTkdFOiAnVklERU9fTUVUQURBVEFfQ0hBTkdFJyxcbiAgQVVESU9fTUVUQURBVEFfQ0hBTkdFOiAnQVVESU9fTUVUQURBVEFfQ0hBTkdFJyxcbiAgTUVESUFfSU5GTzogJ01FRElBX0lORk8nXG59XG5cbmNvbnN0IFJFTVVYX0VWRU5UUyA9IHtcbiAgUkVNVVhfTUVUQURBVEE6ICdSRU1VWF9NRVRBREFUQScsXG4gIFJFTVVYX01FRElBOiAnUkVNVVhfTUVESUEnLFxuICBNRURJQV9TRUdNRU5UOiAnTUVESUFfU0VHTUVOVCcsXG4gIFJFTVVYX0VSUk9SOiAnUkVNVVhfRVJST1InLFxuICBJTklUX1NFR01FTlQ6ICdJTklUX1NFR01FTlQnXG59XG5cbmNvbnN0IEFMTEVWRU5UUyA9IE9iamVjdC5hc3NpZ24oe30sIExPQURFUl9FVkVOVFMsIERFTVVYX0VWRU5UUywgUkVNVVhfRVZFTlRTKVxuXG5jb25zdCBGbHZBbGxvd2VkRXZlbnRzID0gW11cbmNvbnN0IEhsc0FsbG93ZWRFdmVudHMgPSBbXVxuXG5mb3IgKGxldCBrZXkgaW4gQUxMRVZFTlRTKSB7XG4gIGlmIChBTExFVkVOVFMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgIEZsdkFsbG93ZWRFdmVudHMucHVzaChBTExFVkVOVFNba2V5XSlcbiAgfVxufVxuXG5mb3IgKGxldCBrZXkgaW4gQUxMRVZFTlRTKSB7XG4gIGlmIChBTExFVkVOVFMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgIEhsc0FsbG93ZWRFdmVudHMucHVzaChBTExFVkVOVFNba2V5XSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEFMTEVWRU5UUyxcbiAgUkVNVVhfRVZFTlRTLFxuICBERU1VWF9FVkVOVFMsXG4gIExPQURFUl9FVkVOVFMsXG4gIEZsdkFsbG93ZWRFdmVudHMsXG4gIEhsc0FsbG93ZWRFdmVudHNcbn07XG4iLCJleHBvcnQgY29uc3QgQ09OVEVYVF9DT01PTUFORFMgPSB7XG4gIE9OOiAnb24nLFxuICBPTkNFOiAnb25jZScsXG4gIE9GRjogJ29mZicsXG4gIEVNSVQ6ICdlbWl0JyxcbiAgREVTVFJPWTogJ2Rlc3Ryb3knXG59XG4iLCJpbXBvcnQgTWVkaWFJbmZvIGZyb20gJy4vbW9kZWxzL21lZGlhLWluZm8nXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnXG5cbmNvbnN0IERJUkVDVF9FTUlUX0ZMQUcgPSAnX19UT19fJ1xuXG5jbGFzcyBDb250ZXh0IHtcbiAgY29uc3RydWN0b3IgKGFsbG93ZWRFdmVudHMgPSBbXSkge1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKClcbiAgICB0aGlzLl9pbnN0YW5jZU1hcCA9IHt9IC8vIOaJgOacieeahOino+eggea1geeoi+WunuS+i1xuICAgIHRoaXMuX2Nsc01hcCA9IHt9IC8vIOaehOmAoOWHveaVsOeahG1hcFxuICAgIHRoaXMuX2luaXRlZCA9IGZhbHNlXG4gICAgdGhpcy5tZWRpYUluZm8gPSBuZXcgTWVkaWFJbmZvKClcbiAgICB0aGlzLmFsbG93ZWRFdmVudHMgPSBhbGxvd2VkRXZlbnRzXG4gICAgdGhpcy5faG9va3MgPSB7fSAvLyDms6jlhozlnKjkuovku7bliY0v5ZCO55qE6ZKp5a2Q77yM5L6L5aaCIGJlZm9yZSgnREVNVVhfQ09NUExFVEUnKVxuICB9XG5cbiAgLyoqXG4gICAqIOS7juS4iuS4i+aWh+S4reiOt+WPluino+eggea1geeoi+WunuS+i++8jOWmguaenOayoeacieWunuS+i++8jOaehOmAoOS4gOS4qlxuICAgKiBAcGFyYW0gdGFnXG4gICAqIEBwYXJhbSBhcmdzXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgZ2V0SW5zdGFuY2UgKHRhZykge1xuICAgIGlmICh0aGlzLl9pbnN0YW5jZU1hcFt0YWddKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VNYXBbdGFnXVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGFnfeWunuS+i+WwmuacquWIneWni+WMlmApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOWIneWni+WMluWFt+S9k+WunuS+i1xuICAgKiBAcGFyYW0gdGFnXG4gICAqIEBwYXJhbSBhcmdzXG4gICAqL1xuICBpbml0SW5zdGFuY2UgKHRhZywgLi4uYXJncykge1xuICAgIGlmICh0aGlzLl9jbHNNYXBbdGFnXSkge1xuICAgICAgY29uc3QgbmV3SW5zdGFuY2UgPSBuZXcgdGhpcy5fY2xzTWFwW3RhZ10oLi4uYXJncylcbiAgICAgIHRoaXMuX2luc3RhbmNlTWFwW3RhZ10gPSBuZXdJbnN0YW5jZVxuICAgICAgaWYgKG5ld0luc3RhbmNlLmluaXQpIHtcbiAgICAgICAgbmV3SW5zdGFuY2UuaW5pdCgpIC8vIFRPRE86IGxpZmVjaXJjbGVcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdJbnN0YW5jZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGFnfeacquWcqGNvbnRleHTkuK3ms6jlhoxgKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDpgb/lhY3lpKfph4/nmoRpbml0SW5zdGFuY2XosIPnlKjvvIzliJ3lp4vljJbmiYDmnInnmoTnu4Tku7ZcbiAgICogQHBhcmFtIGNvbmZpZ1xuICAgKi9cbiAgaW5pdCAoY29uZmlnKSB7XG4gICAgaWYgKHRoaXMuX2luaXRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGZvciAobGV0IHRhZyBpbiB0aGlzLl9jbHNNYXApIHtcbiAgICAgIC8vIGlmIG5vdCBpbml0ZWQsIGluaXQgYW4gaW5zdGFuY2VcbiAgICAgIGlmICh0aGlzLl9jbHNNYXAuaGFzT3duUHJvcGVydHkodGFnKSAmJiAhdGhpcy5faW5zdGFuY2VNYXBbdGFnXSkge1xuICAgICAgICB0aGlzLmluaXRJbnN0YW5jZSh0YWcsIGNvbmZpZylcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5faW5pdGVkID0gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIOazqOWGjOS4gOS4quS4iuS4i+aWh+a1geeoi++8jOaPkOS+m+WuieWFqOeahOS6i+S7tuWPkemAgeacuuWItlxuICAgKiBAcGFyYW0gdGFnXG4gICAqIEBwYXJhbSBjbHNcbiAgICovXG4gIHJlZ2lzdHJ5ICh0YWcsIGNscykge1xuICAgIGNvbnN0IGVtaXR0ZXIgPSB0aGlzLl9lbWl0dGVyXG4gICAgY29uc3QgY2hlY2tNZXNzYWdlTmFtZSA9IHRoaXMuX2lzTWVzc2FnZU5hbWVWYWxpZC5iaW5kKHRoaXMpXG4gICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICBjb25zdCBlbmhhbmNlZCA9IGNsYXNzIGV4dGVuZHMgY2xzIHtcbiAgICAgIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge31cbiAgICAgICAgdGhpcy5UQUcgPSB0YWdcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IHNlbGZcbiAgICAgIH1cblxuICAgICAgb24gKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuXG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1ttZXNzYWdlTmFtZV0pIHtcbiAgICAgICAgICB0aGlzLmxpc3RlbmVyc1ttZXNzYWdlTmFtZV0ucHVzaChjYWxsYmFjaylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxpc3RlbmVyc1ttZXNzYWdlTmFtZV0gPSBbY2FsbGJhY2tdXG4gICAgICAgIH1cblxuICAgICAgICBlbWl0dGVyLm9uKGAke21lc3NhZ2VOYW1lfSR7RElSRUNUX0VNSVRfRkxBR30ke3RhZ31gLCBjYWxsYmFjaykgLy8g5bu656uL5a6a5ZCR6YCa5L+h55uR5ZCsXG4gICAgICAgIHJldHVybiBlbWl0dGVyLm9uKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiDlnKjmn5DkuKrkuovku7bop6blj5HliY3miafooYxcbiAgICAgICAqIEBwYXJhbSBtZXNzYWdlTmFtZVxuICAgICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICAgKi9cbiAgICAgIGJlZm9yZSAobWVzc2FnZU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG4gICAgICAgIGlmIChzZWxmLl9ob29rc1ttZXNzYWdlTmFtZV0pIHtcbiAgICAgICAgICBzZWxmLl9ob29rc1ttZXNzYWdlTmFtZV0ucHVzaChjYWxsYmFjaylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLl9ob29rc1ttZXNzYWdlTmFtZV0gPSBbY2FsbGJhY2tdXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgb25jZSAobWVzc2FnZU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG5cbiAgICAgICAgZW1pdHRlci5vbihgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgY2FsbGJhY2spXG4gICAgICAgIHJldHVybiBlbWl0dGVyLm9uY2UobWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgfVxuXG4gICAgICBlbWl0IChtZXNzYWdlTmFtZSwgLi4uYXJncykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuXG4gICAgICAgIGNvbnN0IGJlZm9yZUxpc3QgPSBzZWxmLl9ob29rc1ttZXNzYWdlTmFtZV1cbiAgICAgICAgaWYgKGJlZm9yZUxpc3QpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYmVmb3JlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBiZWZvcmVMaXN0W2ldXG4gICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbWl0dGVyLmVtaXQobWVzc2FnZU5hbWUsIC4uLmFyZ3MpXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICog5a6a5ZCR5Y+R6YCB57uZ5p+Q5Liq57uE5Lu25Y2V5L6L55qE5raI5oGvXG4gICAgICAgKiBAcGFyYW0gbWVzc2FnZU5hbWVcbiAgICAgICAqIEBwYXJhbSBhcmdzXG4gICAgICAgKi9cbiAgICAgIGVtaXRUbyAodGFnLCBtZXNzYWdlTmFtZSwgLi4uYXJncykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuXG4gICAgICAgIHJldHVybiBlbWl0dGVyLmVtaXQoYCR7bWVzc2FnZU5hbWV9JHtESVJFQ1RfRU1JVF9GTEFHfSR7dGFnfWAsIC4uLmFyZ3MpXG4gICAgICB9XG5cbiAgICAgIG9mZiAobWVzc2FnZU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG4gICAgICAgIHJldHVybiBlbWl0dGVyLm9mZihtZXNzYWdlTmFtZSwgY2FsbGJhY2spXG4gICAgICB9XG5cbiAgICAgIHJlbW92ZUxpc3RlbmVycyAoKSB7XG4gICAgICAgIGNvbnN0IGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZCh0aGlzLmxpc3RlbmVycylcblxuICAgICAgICBmb3IgKGxldCBtZXNzYWdlTmFtZSBpbiB0aGlzLmxpc3RlbmVycykge1xuICAgICAgICAgIGlmIChoYXNPd24obWVzc2FnZU5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSB0aGlzLmxpc3RlbmVyc1ttZXNzYWdlTmFtZV0gfHwgW11cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldXG4gICAgICAgICAgICAgIGVtaXR0ZXIub2ZmKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiDlnKjnu4Tku7bplIDmr4Hml7bvvIzpu5jorqTlsIblroPms6jlhoznmoTkuovku7blhajpg6jljbjovb3vvIznoa7kv53kuI3kvJrpgKDmiJDlhoXlrZjms4TmvI9cbiAgICAgICAqL1xuICAgICAgZGVzdHJveSAoKSB7XG4gICAgICAgIC8vIHN0ZXAxIHVubGlzdGVuIGV2ZW50c1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpXG5cbiAgICAgICAgLy8gc3RlcDIgcmVsZWFzZSBmcm9tIGNvbnRleHRcbiAgICAgICAgZGVsZXRlIHNlbGYuX2luc3RhbmNlTWFwW3RhZ11cbiAgICAgICAgc3VwZXIuZGVzdHJveSgpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2Nsc01hcFt0YWddID0gZW5oYW5jZWRcblxuICAgIC8qKlxuICAgICAqIGdldCBpbnN0YW5jZSBpbW1lZGlhdGVseVxuICAgICAqIGUuZyBjb25zdCBpbnN0YW5jZSA9IGNvbnRleHQucmVnaXN0cnkodGFnLCBDbHMpKGNvbmZpZylcbiAgICAgKiAqL1xuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaW5pdEluc3RhbmNlKHRhZywgLi4uYXJncylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5a+55a2Y5Zyo55qE5a6e5L6L6L+b6KGMXG4gICAqL1xuICBkZXN0cm95SW5zdGFuY2VzICgpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9pbnN0YW5jZU1hcCkuZm9yRWFjaCgodGFnKSA9PiB7XG4gICAgICBpZiAodGhpcy5faW5zdGFuY2VNYXBbdGFnXS5kZXN0cm95KSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlTWFwW3RhZ10uZGVzdHJveSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDnvJbop6PnoIHmtYHnqIvml6DpnIDlhbPms6jkuovku7bnmoTop6Pnu5FcbiAgICovXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBudWxsXG4gICAgdGhpcy5hbGxvd2VkRXZlbnRzID0gbnVsbFxuICAgIHRoaXMuX2Nsc01hcCA9IG51bGxcbiAgICB0aGlzLmRlc3Ryb3lJbnN0YW5jZXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIOWvueS/oemBk+i/m+ihjOaUtuaLolxuICAgKiBAcGFyYW0gbWVzc2FnZU5hbWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pc01lc3NhZ2VOYW1lVmFsaWQgKG1lc3NhZ2VOYW1lKSB7XG4gICAgaWYgKCF0aGlzLmFsbG93ZWRFdmVudHMuaW5kZXhPZihtZXNzYWdlTmFtZSkgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVucmVnaXN0ZXJlZCBtZXNzYWdlIG5hbWU6ICR7bWVzc2FnZU5hbWV9YClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGV4dFxuIiwiY29uc3QgbGUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gIChuZXcgRGF0YVZpZXcoYnVmKSkuc2V0SW50MTYoMCwgMjU2LCB0cnVlKSAvLyBsaXR0bGUtZW5kaWFuIHdyaXRlXG4gIHJldHVybiAobmV3IEludDE2QXJyYXkoYnVmKSlbMF0gPT09IDI1NiAvLyBwbGF0Zm9ybS1zcGVjIHJlYWQsIGlmIGVxdWFsIHRoZW4gTEVcbn0pKClcblxuZXhwb3J0IGRlZmF1bHQgbGVcbiIsImNvbnN0IGxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYnVmID0gbmV3IEFycmF5QnVmZmVyKDIpO1xuICAobmV3IERhdGFWaWV3KGJ1ZikpLnNldEludDE2KDAsIDI1NiwgdHJ1ZSkgLy8gbGl0dGxlLWVuZGlhbiB3cml0ZVxuICByZXR1cm4gKG5ldyBJbnQxNkFycmF5KGJ1ZikpWzBdID09PSAyNTYgLy8gcGxhdGZvcm0tc3BlYyByZWFkLCBpZiBlcXVhbCB0aGVuIExFXG59KSgpXG5cbmNvbnN0IHNuaWZmZXIgPSB7XG4gIGdldCBkZXZpY2UgKCkge1xuICAgIGxldCByID0gc25pZmZlci5vcztcbiAgICByZXR1cm4gci5pc1BjID8gJ3BjJyA6IHIuaXNUYWJsZXQgPyAndGFibGV0JyA6ICdtb2JpbGUnO1xuICB9LFxuICBnZXQgYnJvd3NlciAoKSB7XG4gICAgbGV0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCByZWcgPSB7XG4gICAgICBpZTogL3J2OihbXFxkLl0rKVxcKSBsaWtlIGdlY2tvLyxcbiAgICAgIGZpcmZveDogL2ZpcmVmb3hcXC8oW1xcZC5dKykvLFxuICAgICAgY2hyb21lOiAvY2hyb21lXFwvKFtcXGQuXSspLyxcbiAgICAgIG9wZXJhOiAvb3BlcmEuKFtcXGQuXSspLyxcbiAgICAgIHNhZmFyaTogL3ZlcnNpb25cXC8oW1xcZC5dKykuKnNhZmFyaS9cbiAgICB9O1xuICAgIHJldHVybiBbXS5jb25jYXQoT2JqZWN0LmtleXMocmVnKS5maWx0ZXIoa2V5ID0+IHJlZ1trZXldLnRlc3QodWEpKSlbMF07XG4gIH0sXG4gIGdldCBvcyAoKSB7XG4gICAgbGV0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgIGxldCBpc1dpbmRvd3NQaG9uZSA9IC8oPzpXaW5kb3dzIFBob25lKS8udGVzdCh1YSlcbiAgICBsZXQgaXNTeW1iaWFuID0gLyg/OlN5bWJpYW5PUykvLnRlc3QodWEpIHx8IGlzV2luZG93c1Bob25lO1xuICAgIGxldCBpc0FuZHJvaWQgPSAvKD86QW5kcm9pZCkvLnRlc3QodWEpO1xuICAgIGxldCBpc0ZpcmVGb3ggPSAvKD86RmlyZWZveCkvLnRlc3QodWEpO1xuICAgIGxldCBpc1RhYmxldCA9IC8oPzppUGFkfFBsYXlCb29rKS8udGVzdCh1YSkgfHwgKGlzQW5kcm9pZCAmJiAhLyg/Ok1vYmlsZSkvLnRlc3QodWEpKSB8fCAoaXNGaXJlRm94ICYmIC8oPzpUYWJsZXQpLy50ZXN0KHVhKSk7XG4gICAgbGV0IGlzUGhvbmUgPSAvKD86aVBob25lKS8udGVzdCh1YSkgJiYgIWlzVGFibGV0O1xuICAgIGxldCBpc1BjID0gIWlzUGhvbmUgJiYgIWlzQW5kcm9pZCAmJiAhaXNTeW1iaWFuO1xuICAgIHJldHVybiB7XG4gICAgICBpc1RhYmxldCxcbiAgICAgIGlzUGhvbmUsXG4gICAgICBpc0FuZHJvaWQsXG4gICAgICBpc1BjLFxuICAgICAgaXNTeW1iaWFuLFxuICAgICAgaXNXaW5kb3dzUGhvbmUsXG4gICAgICBpc0ZpcmVGb3hcbiAgICB9O1xuICB9LFxuXG4gIGdldCBpc0xlICgpIHtcbiAgICByZXR1cm4gbGVcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgc25pZmZlcjtcbiIsImNsYXNzIFVURjgge1xuICBzdGF0aWMgZGVjb2RlICh1aW50OGFycmF5KSB7XG4gICAgY29uc3Qgb3V0ID0gW107XG4gICAgY29uc3QgaW5wdXQgPSB1aW50OGFycmF5O1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBsZW5ndGggPSB1aW50OGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaW5wdXRbaV0gPCAweDgwKSB7XG4gICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoaW5wdXRbaV0pKTtcbiAgICAgICAgKytpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEMwKSB7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICB9IGVsc2UgaWYgKGlucHV0W2ldIDwgMHhFMCkge1xuICAgICAgICBpZiAoVVRGOC5fY2hlY2tDb250aW51YXRpb24oaW5wdXQsIGksIDEpKSB7XG4gICAgICAgICAgY29uc3QgdWNzNCA9IChpbnB1dFtpXSAmIDB4MUYpIDw8IDYgfCAoaW5wdXRbaSArIDFdICYgMHgzRik7XG4gICAgICAgICAgaWYgKHVjczQgPj0gMHg4MCkge1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEYwKSB7XG4gICAgICAgIGlmIChVVEY4Ll9jaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMikpIHtcbiAgICAgICAgICBjb25zdCB1Y3M0ID0gKGlucHV0W2ldICYgMHhGKSA8PCAxMiB8IChpbnB1dFtpICsgMV0gJiAweDNGKSA8PCA2IHwgaW5wdXRbaSArIDJdICYgMHgzRjtcbiAgICAgICAgICBpZiAodWNzNCA+PSAweDgwMCAmJiAodWNzNCAmIDB4RjgwMCkgIT09IDB4RDgwMCkge1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEY4KSB7XG4gICAgICAgIGlmIChVVEY4Ll9jaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMykpIHtcbiAgICAgICAgICBsZXQgdWNzNCA9IChpbnB1dFtpXSAmIDB4NykgPDwgMTggfCAoaW5wdXRbaSArIDFdICYgMHgzRikgPDwgMTIgfFxuICAgICAgICAgICAgICAgICAgICAoaW5wdXRbaSArIDJdICYgMHgzRikgPDwgNiB8IChpbnB1dFtpICsgM10gJiAweDNGKTtcbiAgICAgICAgICBpZiAodWNzNCA+IDB4MTAwMDAgJiYgdWNzNCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICB1Y3M0IC09IDB4MTAwMDA7XG4gICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCh1Y3M0ID4+PiAxMCkgfCAweEQ4MDApKTtcbiAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHVjczQgJiAweDNGRikgfCAweERDMDApKTtcbiAgICAgICAgICAgIGkgKz0gNDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgweEZGRkQpKTtcbiAgICAgICsraTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xuICB9XG5cbiAgc3RhdGljIF9jaGVja0NvbnRpbnVhdGlvbiAodWludDhhcnJheSwgc3RhcnQsIGNoZWNrTGVuZ3RoKSB7XG4gICAgbGV0IGFycmF5ID0gdWludDhhcnJheTtcbiAgICBpZiAoc3RhcnQgKyBjaGVja0xlbmd0aCA8IGFycmF5Lmxlbmd0aCkge1xuICAgICAgd2hpbGUgKGNoZWNrTGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKChhcnJheVsrK3N0YXJ0XSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVVEY4O1xuIiwiY29uc3QgaXNPYmplY3RGaWxsZWQgPSAob2JqKSA9PiB7XG4gIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGlmIChvYmpba2V5XSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFJbmZvIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMubWltZVR5cGUgPSBudWxsXG4gICAgdGhpcy5kdXJhdGlvbiA9IG51bGxcblxuICAgIHRoaXMuaGFzVmlkZW8gPSBudWxsXG4gICAgdGhpcy52aWRlbyA9IHtcbiAgICAgIGNvZGVjOiBudWxsLFxuICAgICAgd2lkdGg6IG51bGwsXG4gICAgICBoZWlnaHQ6IG51bGwsXG4gICAgICBwcm9maWxlOiBudWxsLFxuICAgICAgbGV2ZWw6IG51bGwsXG4gICAgICBmcmFtZVJhdGU6IHtcbiAgICAgICAgZml4ZWQ6IHRydWUsXG4gICAgICAgIGZwczogMjUsXG4gICAgICAgIGZwc19udW06IDI1MDAwLFxuICAgICAgICBmcHNfZGVuOiAxMDAwXG4gICAgICB9LFxuICAgICAgY2hyb21hRm9ybWF0OiBudWxsLFxuICAgICAgcGFyUmF0aW86IHtcbiAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgIGhlaWdodDogMVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaGFzQXVkaW8gPSBudWxsXG5cbiAgICB0aGlzLmF1ZGlvID0ge1xuICAgICAgY29kZWM6IG51bGwsXG4gICAgICBzYW1wbGVSYXRlOiBudWxsLFxuICAgICAgc2FtcGxlUmF0ZUluZGV4OiBudWxsLFxuICAgICAgY2hhbm5lbENvdW50OiBudWxsXG4gICAgfVxuICB9XG5cbiAgaXNDb21wbGV0ZSAoKSB7XG4gICAgcmV0dXJuIE1lZGlhSW5mby5pc0Jhc2VJbmZvUmVhZHkodGhpcykgJiYgTWVkaWFJbmZvLmlzVmlkZW9SZWFkeSh0aGlzKSAmJiBNZWRpYUluZm8uaXNBdWRpb1JlYWR5KHRoaXMpXG4gIH1cblxuICBzdGF0aWMgaXNCYXNlSW5mb1JlYWR5IChtZWRpYUluZm8pIHtcbiAgICByZXR1cm4gaXNPYmplY3RGaWxsZWQobWVkaWFJbmZvKVxuICB9XG5cbiAgc3RhdGljIGlzVmlkZW9SZWFkeSAobWVkaWFJbmZvKSB7XG4gICAgaWYgKCFtZWRpYUluZm8uaGFzVmlkZW8pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGlzT2JqZWN0RmlsbGVkKG1lZGlhSW5mby52aWRlbylcbiAgfVxuXG4gIHN0YXRpYyBpc0F1ZGlvUmVhZHkgKG1lZGlhSW5mbykge1xuICAgIGlmICghbWVkaWFJbmZvLmhhc0F1ZGlvKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBpc09iamVjdEZpbGxlZChtZWRpYUluZm8udmlkZW8pXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBNZWRpYVNhbXBsZS5nZXREZWZhdWx0SW5mKClcblxuICAgIGlmICghaW5mbyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5mbykgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRcbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBpbmZvKVxuXG4gICAgT2JqZWN0LmVudHJpZXMoc2FtcGxlKS5mb3JFYWNoKChbaywgdl0pID0+IHtcbiAgICAgIHRoaXNba10gPSB2XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0SW5mICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgZHVyYXRpb246IG51bGwsXG4gICAgICBwb3NpdGlvbjogbnVsbCxcbiAgICAgIGlzUkFQOiBmYWxzZSwgLy8gaXMgUmFuZG9tIGFjY2VzcyBwb2ludFxuICAgICAgb3JpZ2luRHRzOiBudWxsXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYVNlZ21lbnRMaXN0IHtcblxuICAgIGNvbnN0cnVjdG9yICh0eXBlKSB7XG4gICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLl9saXN0ID0gW107XG4gICAgICAgIHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbiA9IC0xOyAvLyBjYWNoZWQgbGFzdCBpbnNlcnQgbG9jYXRpb25cbiAgICB9XG5cbiAgICBnZXQgdHlwZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgIH1cblxuICAgIGdldCBsZW5ndGggKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5sZW5ndGg7XG4gICAgfVxuXG4gICAgaXNFbXB0eSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICBjbGVhciAoKSB7XG4gICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gLTE7XG4gICAgfVxuXG4gICAgX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuX2xpc3Q7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0yO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYXN0ID0gbGlzdC5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgbWlkID0gMDtcbiAgICAgICAgbGV0IGxib3VuZCA9IDA7XG4gICAgICAgIGxldCB1Ym91bmQgPSBsYXN0O1xuXG4gICAgICAgIGxldCBpZHggPSAwO1xuXG4gICAgICAgIGlmIChiZWdpbkR0cyA8IGxpc3RbMF0ub3JpZ2luRHRzKSB7XG4gICAgICAgICAgICBpZHggPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAobGJvdW5kIDw9IHVib3VuZCkge1xuICAgICAgICAgICAgbWlkID0gbGJvdW5kICsgTWF0aC5mbG9vcigodWJvdW5kIC0gbGJvdW5kKSAvIDIpO1xuICAgICAgICAgICAgaWYgKG1pZCA9PT0gbGFzdCB8fCAoYmVnaW5EdHMgPiBsaXN0W21pZF0ubGFzdFNhbXBsZS5vcmlnaW5EdHNcbiAgICAgICAgICAgICAgICAgICAgJiYgKGJlZ2luRHRzIDwgbGlzdFttaWQgKyAxXS5vcmlnaW5EdHMpKSkge1xuICAgICAgICAgICAgICAgIGlkeCA9IG1pZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlzdFttaWRdLm9yaWdpbkR0cyA8IGJlZ2luRHRzKSB7XG4gICAgICAgICAgICAgICAgbGJvdW5kID0gbWlkICsgMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWJvdW5kID0gbWlkIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cblxuICAgIF9zZWFyY2hOZWFyZXN0U2VnbWVudEFmdGVyIChiZWdpbkR0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpICsgMTtcbiAgICB9XG5cbiAgICBhcHBlbmQgKHNlZ21lbnQpIHtcbiAgICAgICAgbGV0IGxpc3QgPSB0aGlzLl9saXN0O1xuICAgICAgICBsZXQgbGFzdEFwcGVuZElkeCA9IHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbjtcbiAgICAgICAgbGV0IGluc2VydElkeCA9IDA7XG5cbiAgICAgICAgaWYgKGxhc3RBcHBlbmRJZHggIT09IC0xICYmIGxhc3RBcHBlbmRJZHggPCBsaXN0Lmxlbmd0aFxuICAgICAgICAgICAgJiYgc2VnbWVudC5vcmlnaW5TdGFydER0cyA+PSBsaXN0W2xhc3RBcHBlbmRJZHhdLmxhc3RTYW1wbGUub3JpZ2luRHRzXG4gICAgICAgICAgICAmJiAoKGxhc3RBcHBlbmRJZHggPT09IGxpc3QubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICB8fCAobGFzdEFwcGVuZElkeCA8IGxpc3QubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICAmJiBzZWdtZW50Lm9yaWdpblN0YXJ0RHRzIDwgbGlzdFtsYXN0QXBwZW5kSWR4ICsgMV0ub3JpZ2luU3RhcnREdHMpKSkge1xuICAgICAgICAgICAgaW5zZXJ0SWR4ID0gbGFzdEFwcGVuZElkeCArIDE7IC8vIHVzZSBjYWNoZWQgbG9jYXRpb24gaWR4XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0SWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoc2VnbWVudC5vcmlnaW5TdGFydER0cykgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gaW5zZXJ0SWR4O1xuICAgICAgICB0aGlzLl9saXN0LnNwbGljZShpbnNlcnRJZHgsIDAsIHNlZ21lbnQpO1xuICAgIH1cblxuICAgIGdldExhc3RTZWdtZW50QmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgaWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0W2lkeF07XG4gICAgICAgIH0gZWxzZSB7IC8vIC0xXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldExhc3RTYW1wbGVCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBzZWdtZW50ID0gdGhpcy5nZXRMYXN0U2VnbWVudEJlZm9yZShiZWdpbkR0cyk7XG4gICAgICAgIGlmIChzZWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VnbWVudC5sYXN0U2FtcGxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRMYXN0UkFQQmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgc2VnbWVudElkeCA9IHRoaXMuX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKGJlZ2luRHRzKTtcbiAgICAgICAgbGV0IHJhbmRvbUFjY2Vzc1BvaW50cyA9IHRoaXMuX2xpc3Rbc2VnbWVudElkeF0ucmFuZG9tQWNjZXNzUG9pbnRzO1xuICAgICAgICB3aGlsZSAocmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCA9PT0gMCAmJiBzZWdtZW50SWR4ID4gMCkge1xuICAgICAgICAgICAgc2VnbWVudElkeC0tO1xuICAgICAgICAgICAgcmFuZG9tQWNjZXNzUG9pbnRzID0gdGhpcy5fbGlzdFtzZWdtZW50SWR4XS5yYW5kb21BY2Nlc3NQb2ludHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhbmRvbUFjY2Vzc1BvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZG9tQWNjZXNzUG9pbnRzW3JhbmRvbUFjY2Vzc1BvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFTZWdtZW50IHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuc3RhcnREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5lbmREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5zdGFydFB0cyA9IC0xO1xuICAgICAgICB0aGlzLmVuZFB0cyA9IC0xO1xuICAgICAgICB0aGlzLm9yaWdpblN0YXJ0RHRzID0gLTE7XG4gICAgICAgIHRoaXMub3JpZ2luRW5kRHRzID0gLTE7XG4gICAgICAgIHRoaXMucmFuZG9tQWNjZXNzUG9pbnRzID0gW107XG4gICAgICAgIHRoaXMuZmlyc3RTYW1wbGUgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RTYW1wbGUgPSBudWxsO1xuICAgIH1cblxuICAgIGFkZFJBUCAoc2FtcGxlKSB7XG4gICAgICAgIHNhbXBsZS5pc1JBUCA9IHRydWU7XG4gICAgICAgIHRoaXMucmFuZG9tQWNjZXNzUG9pbnRzLnB1c2goc2FtcGxlKTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tNZXRhIHtcbiAgY29uc3RydWN0b3IgKG1ldGEpIHtcbiAgICBjb25zdCBfZGVmYXVsdCA9IHtcbiAgICAgIHNhbXBsZVJhdGU6IDQ4MDAwLFxuICAgICAgY2hhbm5lbENvdW50OiAyLFxuICAgICAgY29kZWM6ICdtcDRhLjQwLjInLFxuICAgICAgY29uZmlnOiBbNDEsIDQwMSwgMTM2LCAwXSxcbiAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgaWQ6IDIsXG4gICAgICByZWZTYW1wbGVEdXJhdGlvbjogMjEsXG4gICAgICBzYW1wbGVSYXRlSW5kZXg6IDMsXG4gICAgICB0aW1lc2NhbGU6IDEwMDAsXG4gICAgICB0eXBlOiAnYXVkaW8nXG4gICAgfVxuICAgIGlmIChtZXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgX2RlZmF1bHQsIG1ldGEpXG4gICAgfVxuICAgIHJldHVybiBfZGVmYXVsdFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrTWV0YSB7XG4gIGNvbnN0cnVjdG9yIChtZXRhKSB7XG4gICAgY29uc3QgX2RlZmF1bHQgPSB7XG4gICAgICBhdmNjOiBudWxsLFxuICAgICAgc3BzOiBuZXcgVWludDhBcnJheSgwKSxcbiAgICAgIHBwczogbmV3IFVpbnQ4QXJyYXkoMCksXG4gICAgICBjaHJvbWFGb3JtYXQ6IDQyMCxcbiAgICAgIGNvZGVjOiAnYXZjMS42NDAwMjAnLFxuICAgICAgY29kZWNIZWlnaHQ6IDcyMCxcbiAgICAgIGNvZGVjV2lkdGg6IDEyODAsXG4gICAgICBkdXJhdGlvbjogMCxcbiAgICAgIGZyYW1lUmF0ZToge1xuICAgICAgICBmaXhlZDogdHJ1ZSxcbiAgICAgICAgZnBzOiAyNSxcbiAgICAgICAgZnBzX251bTogMjUwMDAsXG4gICAgICAgIGZwc19kZW46IDEwMDBcbiAgICAgIH0sXG4gICAgICBpZDogMSxcbiAgICAgIGxldmVsOiAnMy4yJyxcbiAgICAgIHByZXNlbnRIZWlnaHQ6IDcyMCxcbiAgICAgIHByZXNlbnRXaWR0aDogMTI4MCxcbiAgICAgIHByb2ZpbGU6ICdIaWdoJyxcbiAgICAgIHJlZlNhbXBsZUR1cmF0aW9uOiA0MCxcbiAgICAgIHBhclJhdGlvOiB7XG4gICAgICAgIGhlaWdodDogMSxcbiAgICAgICAgd2lkdGg6IDFcbiAgICAgIH0sXG4gICAgICB0aW1lc2NhbGU6IDEwMDAsXG4gICAgICB0eXBlOiAndmlkZW8nXG4gICAgfVxuXG4gICAgaWYgKG1ldGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgbWV0YSlcbiAgICB9XG4gICAgcmV0dXJuIF9kZWZhdWx0XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBBdWRpb1RyYWNrU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBBdWRpb1RyYWNrU2FtcGxlLmdldERlZmF1bHQoKVxuICAgIGlmICghaW5mbykge1xuICAgICAgcmV0dXJuIF9kZWZhdWx0XG4gICAgfVxuICAgIGxldCBzYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgaW5mbylcblxuICAgIHJldHVybiBzYW1wbGVcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0ICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmlkZW9UcmFja1NhbXBsZSB7XG4gIGNvbnN0cnVjdG9yIChpbmZvKSB7XG4gICAgbGV0IF9kZWZhdWx0ID0gVmlkZW9UcmFja1NhbXBsZS5nZXREZWZhdWx0KClcblxuICAgIGlmICghaW5mbykge1xuICAgICAgcmV0dXJuIF9kZWZhdWx0XG4gICAgfVxuICAgIGxldCBzYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgaW5mbylcblxuICAgIHJldHVybiBzYW1wbGVcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0ICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgaXNLZXlmcmFtZTogZmFsc2UsIC8vIGlzIFJhbmRvbSBhY2Nlc3MgcG9pbnRcbiAgICAgIG9yaWdpbkR0czogbnVsbCxcbiAgICAgIGRhdGE6IG5ldyBVaW50OEFycmF5KClcbiAgICB9XG4gIH1cbn1cbiIsImNsYXNzIE1TRSB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5jb25maWdzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlncyk7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmNvbmZpZ3MuY29udGFpbmVyO1xuICAgIHRoaXMubWVkaWFTb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuc291cmNlQnVmZmVycyA9IHt9O1xuICAgIHRoaXMucHJlbG9hZFRpbWUgPSB0aGlzLmNvbmZpZ3MucHJlbG9hZFRpbWUgfHwgMTtcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdGhpcy5tZWRpYVNvdXJjZSA9IG5ldyBzZWxmLk1lZGlhU291cmNlKCk7XG4gICAgdGhpcy5tZWRpYVNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgKGUpID0+IHtcbiAgICAgIF90aGlzLmFkZFNvdXJjZUJ1ZmZlcnMoKTtcbiAgICB9KTtcbiAgICB0aGlzLmNvbnRhaW5lci5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHRoaXMubWVkaWFTb3VyY2UpO1xuICAgIHRoaXMudXJsID0gdGhpcy5jb250YWluZXIuc3JjO1xuICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCAoKSA9PiB7XG4gICAgICBfdGhpcy5lbWl0KCdUSU1FX1VQREFURScsIHRoaXMuY29udGFpbmVyKTtcbiAgICB9KTtcblxuICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3dhaXRpbmcnLCAoKSA9PiB7XG4gICAgICBfdGhpcy5lbWl0KCdXQUlUSU5HJywgdGhpcy5jb250YWluZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkU291cmNlQnVmZmVycyAoKSB7XG4gICAgaWYgKHRoaXMubWVkaWFTb3VyY2UucmVhZHlTdGF0ZSAhPT0gJ29wZW4nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzb3VyY2VzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgdHJhY2tzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJyk7XG4gICAgbGV0IHRyYWNrO1xuXG4gICAgc291cmNlcyA9IHNvdXJjZXMuc291cmNlcztcbiAgICBsZXQgYWRkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDAsIGsgPSBPYmplY3Qua2V5cyhzb3VyY2VzKS5sZW5ndGg7IGkgPCBrOyBpKyspIHtcbiAgICAgIGxldCB0eXBlID0gT2JqZWN0LmtleXMoc291cmNlcylbaV07XG4gICAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICB0cmFjayA9IHRyYWNrcy5hdWRpb1RyYWNrO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgIHRyYWNrID0gdHJhY2tzLmF1ZGlvVHJhY2s7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFjaykge1xuICAgICAgICBsZXQgZHVyID0gdHlwZSA9PT0gJ2F1ZGlvJyA/IDIxIDogNDA7XG4gICAgICAgIGlmICh0cmFjay5tZXRhICYmIHRyYWNrLm1ldGEucmVmU2FtcGxlRHVyYXRpb24pIGR1ciA9IHRyYWNrLm1ldGEucmVmU2FtcGxlRHVyYXRpb247XG4gICAgICAgIGlmIChzb3VyY2VzW3R5cGVdLmRhdGEubGVuZ3RoID49ICh0aGlzLnByZWxvYWRUaW1lIC8gZHVyKSkge1xuICAgICAgICAgIGFkZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWRkKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwLCBrID0gT2JqZWN0LmtleXMoc291cmNlcykubGVuZ3RoOyBpIDwgazsgaSsrKSB7XG4gICAgICAgIGxldCB0eXBlID0gT2JqZWN0LmtleXMoc291cmNlcylbaV07XG4gICAgICAgIGxldCBzb3VyY2UgPSBzb3VyY2VzW3R5cGVdXG4gICAgICAgIGxldCBtaW1lID0gKHR5cGUgPT09ICd2aWRlbycpID8gJ3ZpZGVvL21wNDtjb2RlY3M9JyArIHNvdXJjZS5taW1ldHlwZSA6ICdhdWRpby9tcDQ7Y29kZWNzPScgKyBzb3VyY2UubWltZXR5cGVcbiAgICAgICAgbGV0IHNvdXJjZUJ1ZmZlciA9IHRoaXMubWVkaWFTb3VyY2UuYWRkU291cmNlQnVmZmVyKG1pbWUpO1xuICAgICAgICB0aGlzLnNvdXJjZUJ1ZmZlcnNbdHlwZV0gPSBzb3VyY2VCdWZmZXI7XG4gICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCAoZSkgPT4ge1xuICAgICAgICAgIHRoaXMuZW1pdCgnU09VUkNFX1VQREFURV9FTkQnKTtcbiAgICAgICAgICB0aGlzLmRvQXBwZW5kKClcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZG9BcHBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkb0FwcGVuZCAoKSB7XG4gICAgbGV0IHNvdXJjZXMgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGlmIChzb3VyY2VzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHR5cGUgPSBPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpW2ldXG4gICAgICAgIGxldCBzb3VyY2VCdWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcnNbdHlwZV07XG4gICAgICAgIGlmICghc291cmNlQnVmZmVyLnVwZGF0aW5nKSB7XG4gICAgICAgICAgbGV0IHNvdXJjZSA9IHNvdXJjZXMuc291cmNlc1t0eXBlXTtcbiAgICAgICAgICBpZiAoc291cmNlICYmICFzb3VyY2UuaW5pdGVkKSB7XG4gICAgICAgICAgICBzb3VyY2VCdWZmZXIuYXBwZW5kQnVmZmVyKHNvdXJjZS5pbml0LmJ1ZmZlci5idWZmZXIpO1xuICAgICAgICAgICAgc291cmNlLmluaXRlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gc291cmNlLmRhdGEuc2hpZnQoKVxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFwcGVuZEJ1ZmZlcihkYXRhLmJ1ZmZlci5idWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgTVNFO1xuIiwiaW1wb3J0IENvbmNhdCBmcm9tICdjb25jYXQtdHlwZWQtYXJyYXknXG5cbmNsYXNzIEJ1ZmZlciB7XG4gIGNvbnN0cnVjdG9yIChidWZmZXIpIHtcbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlciB8fCBuZXcgVWludDhBcnJheSgwKVxuICB9XG5cbiAgd3JpdGUgKC4uLmJ1ZmZlcikge1xuICAgIGJ1ZmZlci5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgdGhpcy5idWZmZXIgPSBDb25jYXQoVWludDhBcnJheSwgdGhpcy5idWZmZXIsIGl0ZW0pXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyB3cml0ZVVpbnQzMiAodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgdmFsdWUgPj4gMjQsXG4gICAgICAodmFsdWUgPj4gMTYpICYgMHhmZixcbiAgICAgICh2YWx1ZSA+PiA4KSAmIDB4ZmYsXG4gICAgICB2YWx1ZSAmIDB4ZmZcbiAgICBdKVxuICB9XG5cbiAgc3RhdGljIHJlYWRBc0ludCAoYXJyKSB7XG4gICAgbGV0IHRlbXAgPSAnJ1xuXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQ0SGV4IChoZXhOdW0pIHtcbiAgICAgIGxldCBoZXhTdHIgPSBoZXhOdW0udG9TdHJpbmcoMTYpXG4gICAgICByZXR1cm4gaGV4U3RyLnBhZFN0YXJ0KDIsICcwJylcbiAgICB9XG5cbiAgICBhcnIuZm9yRWFjaChudW0gPT4ge1xuICAgICAgdGVtcCArPSBwYWRTdGFydDRIZXgobnVtKVxuICAgIH0pXG4gICAgcmV0dXJuIHBhcnNlSW50KHRlbXAsIDE2KVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1ZmZlclxuIiwiY2xhc3MgU3RyZWFtIHtcbiAgY29uc3RydWN0b3IgKGJ1ZmZlcikge1xuICAgIGlmIChidWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICB0aGlzLmRhdGF2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gICAgICB0aGlzLmRhdGF2aWV3LnBvc2l0aW9uID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIGlzIGludmFsaWQnKTtcbiAgICB9XG4gIH1cblxuICBnZXQgbGVuZ3RoICgpIHtcbiAgICByZXR1cm4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIHNldCBwb3NpdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLmRhdGF2aWV3LnBvc2l0aW9uID0gdmFsdWU7XG4gIH1cblxuICBnZXQgcG9zaXRpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGF2aWV3LnBvc2l0aW9uO1xuICB9XG5cbiAgYmFjayAoY291bnQpIHtcbiAgICB0aGlzLnBvc2l0aW9uIC09IGNvdW50O1xuICB9XG5cbiAgc2tpcCAoY291bnQpIHtcbiAgICBsZXQgbG9vcCA9IE1hdGguZmxvb3IoY291bnQgLyA0KTtcbiAgICBsZXQgbGFzdCA9IGNvdW50ICUgNDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvb3A7IGkrKykge1xuICAgICAgU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDQpO1xuICAgIH1cbiAgICBpZiAobGFzdCA+IDApIHtcbiAgICAgIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCBsYXN0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogW3JlYWRCeXRlIOS7jkRhdGFWaWV35Lit6K+75Y+W5pWw5o2uXVxuICAgKiBAcGFyYW0gIHtEYXRhVmlld30gYnVmZmVyIFtEYXRhVmlld+WunuS+i11cbiAgICogQHBhcmFtICB7TnVtYmVyfSBzaXplICAgW+ivu+WPluWtl+iKguaVsF1cbiAgICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgW+aVtOaVsF1cbiAgICovXG4gIHN0YXRpYyByZWFkQnl0ZSAoYnVmZmVyLCBzaXplLCBzaWduKSB7XG4gICAgbGV0IHJlcztcbiAgICBzd2l0Y2ggKHNpemUpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaWYgKHNpZ24pIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0SW50OChidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50OChidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRJbnQxNihidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50MTYoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaWYgKHNpZ24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBzdXBwb3J0ZWQgZm9yIHJlYWRCeXRlIDMnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0VWludDgoYnVmZmVyLnBvc2l0aW9uKSA8PCAxNjtcbiAgICAgICAgICByZXMgfD0gYnVmZmVyLmdldFVpbnQ4KGJ1ZmZlci5wb3NpdGlvbiArIDEpIDw8IDg7XG4gICAgICAgICAgcmVzIHw9IGJ1ZmZlci5nZXRVaW50OChidWZmZXIucG9zaXRpb24gKyAyKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgaWYgKHNpZ24pIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0SW50MzIoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0VWludDMyKGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIGlmIChzaWduKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3Qgc3VwcG9ydGVkIGZvciByZWFkQm9keSA4Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQzMihidWZmZXIucG9zaXRpb24pIDw8IDMyO1xuICAgICAgICAgIHJlcyB8PSBidWZmZXIuZ2V0VWludDMyKGJ1ZmZlci5wb3NpdGlvbiArIDQpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVzID0gJyc7XG4gICAgfVxuICAgIGJ1ZmZlci5wb3NpdGlvbiArPSBzaXplO1xuICAgIHJldHVybiByZXM7XG4gIH1cblxuICByZWFkVWludDggKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMSk7XG4gIH1cblxuICByZWFkVWludDE2ICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDIpO1xuICB9XG5cbiAgcmVhZFVpbnQyNCAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAzKTtcbiAgfVxuXG4gIHJlYWRVaW50MzIgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgNCk7XG4gIH1cblxuICByZWFkVWludDY0ICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDgpO1xuICB9XG5cbiAgcmVhZEludDggKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMSwgdHJ1ZSk7XG4gIH1cbiAgcmVhZEludDE2ICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDIsIHRydWUpO1xuICB9XG5cbiAgcmVhZEludDMyICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDQsIHRydWUpO1xuICB9XG5cbiAgd3JpdGVVaW50MzIgKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIHZhbHVlID4+PiAyNCAmIDB4ZmYsXG4gICAgICB2YWx1ZSA+Pj4gMTYgJiAweGZmLFxuICAgICAgdmFsdWUgPj4+IDggJiAweGZmLFxuICAgICAgdmFsdWUgJiAweGZmXG4gICAgXSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RyZWFtO1xuIiwiaW1wb3J0IHsgRVZFTlRTLCBNc2UgfSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5pbXBvcnQgeyBYZ0J1ZmZlciwgUHJlU291cmNlLCBUcmFja3MgfSBmcm9tICd4Z3BsYXllci1idWZmZXInO1xuaW1wb3J0IHsgRmV0Y2hMb2FkZXIgfSBmcm9tICd4Z3BsYXllci1sb2FkZXInO1xuaW1wb3J0IHsgQ29tcGF0aWJpbGl0eSB9IGZyb20gJ3hncGxheWVyLWNvZGVjJztcbmltcG9ydCBNcDRSZW11eGVyIGZyb20gJ3hncGxheWVyLXJlbXV4L3NyYy9tcDQvaW5kZXgnO1xuXG5pbXBvcnQge1BsYXlsaXN0LCBNM1U4UGFyc2VyLCBUc0RlbXV4ZXJ9IGZyb20gJ3hncGxheWVyLWRlbXV4JztcblxuY29uc3QgTE9BREVSX0VWRU5UUyA9IEVWRU5UUy5MT0FERVJfRVZFTlRTO1xuY29uc3QgUkVNVVhfRVZFTlRTID0gRVZFTlRTLlJFTVVYX0VWRU5UUztcbmNvbnN0IERFTVVYX0VWRU5UUyA9IEVWRU5UUy5ERU1VWF9FVkVOVFM7XG5cbmNsYXNzIEhsc1ZvZENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvciAoY29uZmlncykge1xuICAgIHRoaXMuY29uZmlncyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZ3MpO1xuICAgIHRoaXMudXJsID0gJyc7XG4gICAgdGhpcy5iYXNldXJsID0gJyc7XG4gICAgdGhpcy5zZXF1ZW5jZSA9IDA7XG4gICAgdGhpcy5fcGxheWxpc3QgPSBudWxsO1xuICAgIHRoaXMucmV0cnl0aW1lcyA9IHRoaXMuY29uZmlncy5yZXRyeXRpbWVzIHx8IDM7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmNvbmZpZ3MuY29udGFpbmVyO1xuICAgIHRoaXMucHJlbG9hZFRpbWUgPSB0aGlzLmNvbmZpZ3MucHJlbG9hZFRpbWUgfHwgNTtcbiAgICB0aGlzLl9sYXN0U2Vla1RpbWUgPSAwO1xuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgLy8g5Yid5aeL5YyWQnVmZmVyIO+8iE0zVTgvVFMvUGxheWxpc3QpO1xuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ00zVThfQlVGRkVSJywgWGdCdWZmZXIpO1xuICAgIHRoaXMuX3RzQnVmZmVyID0gdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnVFNfQlVGRkVSJywgWGdCdWZmZXIpKCk7XG4gICAgdGhpcy5fdHJhY2tzID0gdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnVFJBQ0tTJywgVHJhY2tzKSgpO1xuXG4gICAgdGhpcy5fcGxheWxpc3QgPSB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdQTEFZTElTVCcsIFBsYXlsaXN0KSh7YXV0b2NsZWFyOiB0cnVlfSk7XG4gICAgdGhpcy5fcHJlc291cmNlID0gdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnUFJFX1NPVVJDRV9CVUZGRVInLCBQcmVTb3VyY2UpKCk7XG5cbiAgICB0aGlzLl9jb21wYXQgPSB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdDT01QQVRJQklMSVRZJywgQ29tcGF0aWJpbGl0eSkoKTtcblxuICAgIC8vIOWIneWni+WMlk0zVThMb2FkZXI7XG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnTTNVOF9MT0FERVInLCBGZXRjaExvYWRlcikoeyBidWZmZXI6ICdNM1U4X0JVRkZFUicsIHJlYWR0eXBlOiAxIH0pO1xuICAgIHRoaXMuX3RzbG9hZGVyID0gdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnVFNfTE9BREVSJywgRmV0Y2hMb2FkZXIpKHsgYnVmZmVyOiAnVFNfQlVGRkVSJywgcmVhZHR5cGU6IDMgfSk7XG5cbiAgICAvLyDliJ3lp4vljJZUUyBEZW11eGVyXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnVFNfREVNVVhFUicsIFRzRGVtdXhlcikoeyBpbnB1dGJ1ZmZlcjogJ1RTX0JVRkZFUicgfSk7XG5cbiAgICAvLyDliJ3lp4vljJZNUDQgUmVtdXhlclxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ01QNF9SRU1VWEVSJywgTXA0UmVtdXhlcik7XG5cbiAgICAvLyDliJ3lp4vljJZNU0VcbiAgICB0aGlzLm1zZSA9IHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ01TRScsIE1zZSkoe2NvbnRhaW5lcjogdGhpcy5jb250YWluZXIsIHByZWxvYWRUaW1lOiB0aGlzLnByZWxvYWRUaW1lfSk7XG4gICAgdGhpcy5pbml0RXZlbnRzKCk7XG4gIH1cblxuICBpbml0RXZlbnRzICgpIHtcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCAoYnVmZmVyKSA9PiB7XG4gICAgICBpZiAoYnVmZmVyLlRBRyA9PT0gJ00zVThfQlVGRkVSJykge1xuICAgICAgICBsZXQgbWRhdGEgPSBNM1U4UGFyc2VyLnBhcnNlKGJ1ZmZlci5zaGlmdCgpLCB0aGlzLmJhc2V1cmwpO1xuICAgICAgICB0aGlzLl9wbGF5bGlzdC5wdXNoTTNVOChtZGF0YSk7XG4gICAgICAgIGlmICghdGhpcy5wcmVsb2FkVGltZSkge1xuICAgICAgICAgIGlmICh0aGlzLl9wbGF5bGlzdC50YXJnZXRkdXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5wcmVsb2FkVGltZSA9IHRoaXMuX3BsYXlsaXN0LnRhcmdldGR1cmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5tc2UucHJlbG9hZFRpbWUgPSB0aGlzLl9wbGF5bGlzdC50YXJnZXRkdXJhdGlvbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcmVsb2FkVGltZSA9IDU7XG4gICAgICAgICAgICB0aGlzLm1zZS5wcmVsb2FkVGltZSA9IDU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZyYWcgPSB0aGlzLl9wbGF5bGlzdC5nZXRUcygpO1xuICAgICAgICBpZiAoZnJhZykge1xuICAgICAgICAgIHRoaXMuX3BsYXlsaXN0LmRvd25sb2FkaW5nKGZyYWcudXJsLCB0cnVlKTtcbiAgICAgICAgICB0aGlzLmVtaXRUbygnVFNfTE9BREVSJywgTE9BREVSX0VWRU5UUy5MQURFUl9TVEFSVCwgZnJhZy51cmwpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMucmV0cnl0aW1lcyA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmV0cnl0aW1lcy0tO1xuICAgICAgICAgICAgdGhpcy5lbWl0VG8oJ00zVThfTE9BREVSJywgTE9BREVSX0VWRU5UUy5MQURFUl9TVEFSVCwgdGhpcy51cmwpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGJ1ZmZlci5UQUcgPT09ICdUU19CVUZGRVInKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdsb2FkZWQnKVxuICAgICAgICB0aGlzLl9wcmVsb2FkKHRoaXMubXNlLmNvbnRhaW5lci5jdXJyZW50VGltZSk7XG4gICAgICAgIHRoaXMuX3BsYXlsaXN0LmRvd25sb2FkZWQodGhpcy5fdHNsb2FkZXIudXJsLCB0cnVlKTtcbiAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9TVEFSVClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5vbihSRU1VWF9FVkVOVFMuSU5JVF9TRUdNRU5ULCAodHlwZSkgPT4ge1xuICAgICAgdGhpcy5tc2UuYWRkU291cmNlQnVmZmVycygpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbihSRU1VWF9FVkVOVFMuTUVESUFfU0VHTUVOVCwgKHR5cGUpID0+IHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLm1zZS5zb3VyY2VCdWZmZXJzKS5sZW5ndGggPCAxKSB7XG4gICAgICAgIHRoaXMubXNlLmFkZFNvdXJjZUJ1ZmZlcnMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5tc2UuZG9BcHBlbmQoKTtcbiAgICB9KVxuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLlJFTVVYX0VSUk9SLCAoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgfSlcblxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgKHR5cGUpID0+IHtcbiAgICAgIGxldCBkdXJhdGlvbiA9IHBhcnNlSW50KHRoaXMuX3BsYXlsaXN0LmR1cmF0aW9uKTtcbiAgICAgIGlmICh0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgIHRoaXMuX3RyYWNrcy52aWRlb1RyYWNrLm1ldGEuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICB0aGlzLl90cmFja3MuYXVkaW9UcmFjay5tZXRhLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICB9XG4gICAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLlJFTVVYX01FVEFEQVRBLCB0eXBlKVxuICAgIH0pXG5cbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSwgKCkgPT4ge1xuICAgICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5SRU1VWF9NRURJQSlcbiAgICB9KVxuXG4gICAgdGhpcy5vbignVElNRV9VUERBVEUnLCAoY29udGFpbmVyKSA9PiB7XG4gICAgICB0aGlzLl9wcmVsb2FkKGNvbnRhaW5lci5jdXJyZW50VGltZSk7XG4gICAgfSk7XG4gIH1cblxuICBzZWVrICh0aW1lKSB7XG4gICAgdGhpcy5fbGFzdFNlZWtUaW1lID0gdGltZTtcbiAgICB0aGlzLl90c2xvYWRlci5jYW5jZWwoKTtcbiAgICBpZiAodGhpcy5fcHJlc291cmNlLnNvdXJjZXMudmlkZW8pIHtcbiAgICAgIHRoaXMuX3ByZXNvdXJjZS5zb3VyY2VzLnZpZGVvLmRhdGEgPSBbXTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3ByZXNvdXJjZS5zb3VyY2VzLmF1ZGlvKSB7XG4gICAgICB0aGlzLl9wcmVzb3VyY2Uuc291cmNlcy5hdWRpby5kYXRhID0gW11cbiAgICB9XG4gICAgaWYgKHRoaXMuX3RyYWNrcy5hdWRpb1RyYWNrKSB7XG4gICAgICB0aGlzLl90cmFja3MuYXVkaW9UcmFjay5zYW1wbGVzID0gW107XG4gICAgfVxuICAgIGlmICh0aGlzLl90cmFja3MuYXVkaW9UcmFjaykge1xuICAgICAgdGhpcy5fdHJhY2tzLnZpZGVvVHJhY2suc2FtcGxlcyA9IFtdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb21wYXQpIHtcbiAgICAgIHRoaXMuX2NvbXBhdC5yZXNldCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl90c0J1ZmZlcikge1xuICAgICAgdGhpcy5fdHNCdWZmZXIuYXJyYXkgPSBbXTtcbiAgICAgIHRoaXMuX3RzQnVmZmVyLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLl90c0J1ZmZlci5vZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIHRoaXMuX3ByZWxvYWQodGltZSk7XG4gIH1cblxuICBsb2FkICh1cmwpIHtcbiAgICB0aGlzLmJhc2V1cmwgPSBNM1U4UGFyc2VyLnBhcnNlVVJMKHVybCk7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy5lbWl0VG8oJ00zVThfTE9BREVSJywgTE9BREVSX0VWRU5UUy5MQURFUl9TVEFSVCwgdXJsKVxuICB9XG5cbiAgX3ByZWxvYWQgKHRpbWUpIHtcbiAgICBpZiAodGhpcy5fdHNsb2FkZXIubG9hZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdmlkZW8gPSB0aGlzLm1zZS5jb250YWluZXI7XG4gICAgaWYgKHZpZGVvLmJ1ZmZlcmVkLmxlbmd0aCA8IDEpIHtcbiAgICAgIGxldCBmcmFnID0gdGhpcy5fcGxheWxpc3QuZ2V0VHMoMCk7XG4gICAgICBpZiAoZnJhZyAmJiAhZnJhZy5kb3dubG9hZGluZyAmJiAhZnJhZy5kb3dubG9hZGVkKSB7XG4gICAgICAgIHRoaXMuX3BsYXlsaXN0LmRvd25sb2FkaW5nKGZyYWcudXJsLCB0cnVlKTtcbiAgICAgICAgdGhpcy5lbWl0VG8oJ1RTX0xPQURFUicsIExPQURFUl9FVkVOVFMuTEFERVJfU1RBUlQsIGZyYWcudXJsKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBHZXQgY3VycmVudCB0aW1lIHJhbmdlXG4gICAgICBsZXQgY3VycmVudGJ1ZmZlcmVuZCA9IC0xO1xuICAgICAgaWYgKCF0aW1lKSB7XG4gICAgICAgIHRpbWUgPSB2aWRlby5idWZmZXJlZC5lbmQoMCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmlkZW8uYnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRpbWUgPj0gdmlkZW8uYnVmZmVyZWQuc3RhcnQoaSkgJiYgdGltZSA8IHZpZGVvLmJ1ZmZlcmVkLmVuZChpKSkge1xuICAgICAgICAgIGN1cnJlbnRidWZmZXJlbmQgPSB2aWRlby5idWZmZXJlZC5lbmQoaSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudGJ1ZmZlcmVuZCA8IDApIHtcbiAgICAgICAgbGV0IGZyYWcgPSB0aGlzLl9wbGF5bGlzdC5nZXRUcyh0aW1lICogMTAwMCArIDEpO1xuICAgICAgICBpZiAoZnJhZyAmJiAhZnJhZy5kb3dubG9hZGluZyAmJiAhZnJhZy5kb3dubG9hZGVkKSB7XG4gICAgICAgICAgdGhpcy5fcGxheWxpc3QuZG93bmxvYWRpbmcoZnJhZy51cmwsIHRydWUpO1xuICAgICAgICAgIHRoaXMuZW1pdFRvKCdUU19MT0FERVInLCBMT0FERVJfRVZFTlRTLkxBREVSX1NUQVJULCBmcmFnLnVybClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjdXJyZW50YnVmZmVyZW5kIDwgdGltZSArIHRoaXMucHJlbG9hZFRpbWUpIHtcbiAgICAgICAgbGV0IGZyYWcgPSB0aGlzLl9wbGF5bGlzdC5nZXRUcyhjdXJyZW50YnVmZmVyZW5kICogMTAwMCArIDEpOyAvLyBGSVhNRTog6L+Z6YeM55SoICsgMeWkquS4peagvOS6hu+8jOWcqGNvbXBhdOWGheS4gOe7j+WBj+enu+S/ruato++8jOWwseaXoOazleato+ehruiOt+WPluWIsOS4i+S4gOS4qnRz55qE5Zyw5Z2AXG4gICAgICAgIGxldCBmcmFnZW5kID0gZnJhZyA/IChmcmFnLnRpbWUgKyBmcmFnLmR1cmF0aW9uKSAvIDEwMDAgOiAwO1xuICAgICAgICB3aGlsZSAoZnJhZyAmJiBmcmFnLmRvd25sb2FkZWQgJiYgZnJhZ2VuZCA8ICh0aW1lICsgdGhpcy5wcmVsb2FkVGltZSkpIHtcbiAgICAgICAgICBmcmFnID0gdGhpcy5fcGxheWxpc3QuZ2V0VHMoZnJhZ2VuZCAqIDEwMDAgKyAxKTtcbiAgICAgICAgICBmcmFnZW5kID0gZnJhZyA/IChmcmFnLnRpbWUgKyBmcmFnLmR1cmF0aW9uKSAvIDEwMDAgOiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmcmFnICYmICFmcmFnLmRvd25sb2FkaW5nICYmICFmcmFnLmRvd25sb2FkZWQpIHtcbiAgICAgICAgICB0aGlzLl9wbGF5bGlzdC5kb3dubG9hZGluZyhmcmFnLnVybCwgdHJ1ZSk7XG4gICAgICAgICAgdGhpcy5lbWl0VG8oJ1RTX0xPQURFUicsIExPQURFUl9FVkVOVFMuTEFERVJfU1RBUlQsIGZyYWcudXJsKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBIbHNWb2RDb250cm9sbGVyO1xuIiwiaW1wb3J0IFBsYXllciBmcm9tICd4Z3BsYXllcidcbmltcG9ydCB7IENvbnRleHQsIEVWRU5UUyB9IGZyb20gJ3hncGxheWVyLXV0aWxzJztcbmltcG9ydCBIbHNWb2RDb250cm9sbGVyIGZyb20gJy4vaGxzLXZvZCc7XG5jb25zdCBIbHNBbGxvd2VkRXZlbnRzID0gRVZFTlRTLkhsc0FsbG93ZWRFdmVudHM7XG5jb25zdCBSRU1VWF9FVkVOVFMgPSBFVkVOVFMuUkVNVVhfRVZFTlRTO1xuXG5leHBvcnQgY2xhc3MgSGxzVm9kUGxheWVyIGV4dGVuZHMgUGxheWVyIHtcbiAgY29uc3RydWN0b3IgKG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKVxuICAgIHRoaXMuaGxzT3BzID0ge307XG4gICAgdGhpcy51dGlsID0gUGxheWVyLnV0aWw7XG4gICAgdGhpcy51dGlsLmRlZXBDb3B5KHRoaXMuaGxzT3BzLCBvcHRpb25zKTtcbiAgICB0aGlzLl9jb250ZXh0ID0gbmV3IENvbnRleHQoSGxzQWxsb3dlZEV2ZW50cyk7XG4gICAgY29uc29sZS5sb2codGhpcyk7XG4gIH1cblxuICBnZXQgY3VycmVudFRpbWUgKCkge1xuICAgIHJldHVybiBzdXBlci5jdXJyZW50VGltZTtcbiAgfVxuXG4gIHNldCBjdXJyZW50VGltZSAodGltZSkge1xuICAgIHRpbWUgPSBwYXJzZUZsb2F0KHRpbWUpO1xuICAgIHN1cGVyLmN1cnJlbnRUaW1lID0gcGFyc2VJbnQodGltZSk7XG4gICAgaWYgKHRoaXMuX2NvbnRleHQpIHtcbiAgICAgIHRoaXMuX19jb3JlX18uc2Vlayh0aW1lKTtcbiAgICB9XG4gIH1cblxuICBfaW5pdEV2ZW50cyAoKSB7XG4gICAgdGhpcy5fX2NvcmVfXy5vbmNlKFJFTVVYX0VWRU5UUy5JTklUX1NFR01FTlQsICgpID0+IHtcbiAgICAgIGNvbnN0IG1zZSA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ01TRScpO1xuICAgICAgc3VwZXIuc3RhcnQobXNlLnVybCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uY2UoJ2NhbnBsYXknLCAoKSA9PiB7XG4gICAgICB0aGlzLnBsYXkoKVxuICAgIH0pO1xuICB9XG5cbiAgX2luaXRTcmNDaGFuZ2VIYW5kbGVyICgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3JjJywge1xuICAgICAgZ2V0ICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmN1cnJlbnRTcmNcbiAgICAgIH0sXG4gICAgICBzZXQgKHVybCkge1xuICAgICAgICBfdGhpcy5jb25maWcudXJsID0gdXJsXG4gICAgICAgIGlmICghX3RoaXMucGF1c2VkKSB7XG4gICAgICAgICAgX3RoaXMucGF1c2UoKVxuICAgICAgICAgIF90aGlzLm9uY2UoJ3BhdXNlJywgKCkgPT4ge1xuICAgICAgICAgICAgX3RoaXMuc3RhcnQodXJsKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgX3RoaXMub25jZSgnY2FucGxheScsICgpID0+IHtcbiAgICAgICAgICAgIF90aGlzLnBsYXkoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuc3RhcnQodXJsKVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLm9uY2UoJ2NhbnBsYXknLCAoKSA9PiB7XG4gICAgICAgICAgX3RoaXMuY3VycmVudFRpbWUgPSAwXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxuXG4gIHN0YXJ0ICh1cmwgPSB0aGlzLmNvbmZpZy51cmwpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9fY29yZV9fID0gdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnSExTX0xJVkVfQ09OVFJPTExFUicsIEhsc1ZvZENvbnRyb2xsZXIpKHtjb250YWluZXI6IHRoaXMudmlkZW99KTtcbiAgICB0aGlzLl9jb250ZXh0LmluaXQoKTtcbiAgICB0aGlzLl9fY29yZV9fLmxvYWQodXJsKTtcbiAgICB0aGlzLl9pbml0RXZlbnRzKCk7XG4gICAgdGhpcy5faW5pdFNyY0NoYW5nZUhhbmRsZXIoKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBIbHNWb2RQbGF5ZXI7XG4iLCIoZnVuY3Rpb24oKSB7IG1vZHVsZS5leHBvcnRzID0gd2luZG93W1wiUGxheWVyXCJdOyB9KCkpOyJdLCJzb3VyY2VSb290IjoiIn0=