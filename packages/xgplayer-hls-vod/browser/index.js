window.HlsVodPlayer=function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}({"../../node_modules/events/events.js":
/*!*****************************************************************************************!*\
  !*** /Users/leonardo/Documents/front-end/player/xgplayer/node_modules/events/events.js ***!
  \*****************************************************************************************/
/*! no static exports found */function(t,e,i){"use strict";var s,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(t,e,i){return Function.prototype.apply.call(t,e,i)};s=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var n=Number.isNaN||function(t){return t!=t};function o(){o.init.call(this)}t.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var l=10;function d(t){return void 0===t._maxListeners?o.defaultMaxListeners:t._maxListeners}function h(t,e,i,s){var r,a,n,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(a=t._events)?(a=t._events=Object.create(null),t._eventsCount=0):(void 0!==a.newListener&&(t.emit("newListener",e,i.listener?i.listener:i),a=t._events),n=a[e]),void 0===n)n=a[e]=i,++t._eventsCount;else if("function"==typeof n?n=a[e]=s?[i,n]:[n,i]:s?n.unshift(i):n.push(i),(r=d(t))>0&&n.length>r&&!n.warned){n.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=t,l.type=e,l.count=n.length,o=l,console&&console.warn&&console.warn(o)}return t}function u(){for(var t=[],e=0;e<arguments.length;e++)t.push(arguments[e]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,t))}function c(t,e,i){var s={fired:!1,wrapFn:void 0,target:t,type:e,listener:i},r=u.bind(s);return r.listener=i,s.wrapFn=r,r}function f(t,e,i){var s=t._events;if(void 0===s)return[];var r=s[e];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(t){for(var e=new Array(t.length),i=0;i<e.length;++i)e[i]=t[i].listener||t[i];return e}(r):m(r,r.length)}function p(t){var e=this._events;if(void 0!==e){var i=e[t];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function m(t,e){for(var i=new Array(e),s=0;s<e;++s)i[s]=t[s];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");l=t}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},o.prototype.getMaxListeners=function(){return d(this)},o.prototype.emit=function(t){for(var e=[],i=1;i<arguments.length;i++)e.push(arguments[i]);var s="error"===t,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var n;if(e.length>0&&(n=e[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var l=r[t];if(void 0===l)return!1;if("function"==typeof l)a(l,this,e);else{var d=l.length,h=m(l,d);for(i=0;i<d;++i)a(h[i],this,e)}return!0},o.prototype.addListener=function(t,e){return h(this,t,e,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(t,e){return h(this,t,e,!0)},o.prototype.once=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.on(t,c(this,t,e)),this},o.prototype.prependOnceListener=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.prependListener(t,c(this,t,e)),this},o.prototype.removeListener=function(t,e){var i,s,r,a,n;if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);if(void 0===(s=this._events))return this;if(void 0===(i=s[t]))return this;if(i===e||i.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete s[t],s.removeListener&&this.emit("removeListener",t,i.listener||e));else if("function"!=typeof i){for(r=-1,a=i.length-1;a>=0;a--)if(i[a]===e||i[a].listener===e){n=i[a].listener,r=a;break}if(r<0)return this;0===r?i.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(i,r),1===i.length&&(s[t]=i[0]),void 0!==s.removeListener&&this.emit("removeListener",t,n||e)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(t){var e,i,s;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[t]),this;if(0===arguments.length){var r,a=Object.keys(i);for(s=0;s<a.length;++s)"removeListener"!==(r=a[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=i[t]))this.removeListener(t,e);else if(void 0!==e)for(s=e.length-1;s>=0;s--)this.removeListener(t,e[s]);return this},o.prototype.listeners=function(t){return f(this,t,!0)},o.prototype.rawListeners=function(t){return f(this,t,!1)},o.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):p.call(t,e)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},"../../node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},"../xgplayer-buffer/index.js":
/*!***********************************!*\
  !*** ../xgplayer-buffer/index.js ***!
  \***********************************/
/*! no static exports found */function(t,e,i){t.exports={Track:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:i(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").default}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
  !*** ../xgplayer-buffer/src/buffer.js ***!
  \****************************************/
/*! exports provided: XgBuffer, RemuxBuffer */function(t,e,i){"use strict";i.r(e),i.d(e,"XgBuffer",(function(){return s})),i.d(e,"RemuxBuffer",(function(){return r}));class s{constructor(t){this.length=t||0,this.historyLen=t||0,this.array=[],this.offset=0}push(t){this.array.push(t),this.length+=t.byteLength,this.historyLen+=t.byteLength}shift(t){if(this.array.length<1)return new Uint8Array(0);if(void 0===t)return this._shiftBuffer();if(this.offset+t===this.array[0].length){let e=this.array[0].slice(this.offset,this.offset+t);return this.offset=0,this.array.shift(),this.length-=t,e}if(this.offset+t<this.array[0].length){let e=this.array[0].slice(this.offset,this.offset+t);return this.offset+=t,this.length-=t,e}let e=new Uint8Array(t),i=0;for(;this.array.length>0&&t>0;){if(this.offset+t<this.array[0].length){let s=this.array[0].slice(this.offset,this.offset+t);e.set(s,i),this.offset+=t,this.length-=t,t=0;break}{let s=this.array[0].length-this.offset;e.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=s,this.length-=s,t-=s}}return e}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(t,e){let i=0,s=this.offset+t;for(;s<this.offset+e+t;)s<this.array[0].length?i=256*i+this.array[0][s]:this.array[1]&&(i=256*i+this.array[1][s-this.array[0].length]),s++;return i}}class r{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);class s{constructor(){this.mimetype="",this.init=null,this.data=[]}}e.default=class{constructor(){this.sources={}}getSource(t){return this.sources[t]}createSource(t){return this.sources[t]=new s,this.sources[t]}clear(){this.sources={}}destroy(){this.sources={}}}},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/track.js ***!
  \***************************************/
/*! exports provided: default, AudioTrack, VideoTrack, Tracks */function(t,e,i){"use strict";i.r(e),i.d(e,"default",(function(){return s})),i.d(e,"AudioTrack",(function(){return r})),i.d(e,"VideoTrack",(function(){return a})),i.d(e,"Tracks",(function(){return n}));class s{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}class r extends s{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}}class a extends s{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}}class n{constructor(){this.audioTrack=null,this.videoTrack=null}destroy(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-codec/index.js":
/*!**********************************!*\
  !*** ../xgplayer-codec/index.js ***!
  \**********************************/
/*! no static exports found */function(t,e,i){t.exports={Nalunit:i(/*! ./src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js").default,SpsParser:i(/*! ./src/h264/nalunit/sps */"../xgplayer-codec/src/h264/nalunit/sps.js").default,Compatibility:i(/*! ./src/compatibility */"../xgplayer-codec/src/compatibility.js").default}},"../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
  !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
  \***********************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);e.default=class{static getSilentFrame(t,e){if("mp4a.40.2"===t){if(1===e)return new Uint8Array([0,200,0,128,35,128]);if(2===e)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===e)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===e)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===e)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===e)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===e)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===e)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===e)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},"../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
  !*** ../xgplayer-codec/src/compatibility.js ***!
  \**********************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),r=i(/*! ./aac/aac-helper */"../xgplayer-codec/src/aac/aac-helper.js");const{REMUX_EVENTS:a,LOADER_EVENTS:n}=s.EVENTS;class o{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[],this.videoLastSample=null,this.audioLastSample=null,this._videoLargeGap=0,this._audioLargeGap=0}init(){this.before(a.REMUX_MEDIA,this.doFix.bind(this)),this.on(n.LOADER_COMPLETE,()=>{this.videoLastSample&&this.videoTrack.samples.unshift(this.videoLastSample)})}reset(){this.nextAudioDts=null,this.nextVideoDts=null,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.videoLastSample=null,this.audioLastSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:t,isFirstVideoSamples:e}=this.getFirstSample();this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples);const{changed:i,changedIdx:s}=o.detactChangeStream(this.videoTrack.samples);i&&!t?this.fixChangeStreamVideo(s):this.doFixVideo(e);const{changed:r,changedIdx:a}=o.detactChangeStream(this.audioTrack.samples);r?this.fixChangeStreamAudio(a):this.doFixAudio(t),this.removeInvalidSamples()}doFixVideo(t,e){let{samples:i,meta:s}=this.videoTrack;for(let t=0,e=i.length;t<e;t++){const e=i[t];e.originDts=e.dts}if(s.frameRate&&!1===s.frameRate.fixed)return;if(!i||!i.length||!this._firstVideoSample)return;const r=i[0];if(this._videoLargeGap>0&&o.doFixLargeGap(i,this._videoLargeGap),r.dts!==this._firstVideoSample.dts&&e&&(e&&(this.nextVideoDts=e),this._videoLargeGap=this.nextVideoDts-r.dts,o.doFixLargeGap(i,this._videoLargeGap)),t&&this._firstAudioSample){const t=this._firstVideoSample.originDts,e=t-(this._firstAudioSample.originDts||this._firstAudioSample.dts);if(e>2*s.refSampleDuration&&e<10*s.refSampleDuration){const a=Math.floor(e/s.refSampleDuration);for(let e=0;e<a;e++){const a=Object.assign({},r);a.dts=t-(e+1)*s.refSampleDuration,a.pts=a.dts+a.cts,i.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}this._firstVideoSample=this.filledVideoSamples[0]||this._firstVideoSample}else e<-2*s.refSampleDuration&&(this._videoLargeGap=-1*e,o.doFixLargeGap(i,-1*e))}const a=i.pop();if(i.length&&(i[i.length-1].duration=a.dts-i[i.length-1].dts),this.videoLastSample){const t=this.videoLastSample;t.duration=r.dts-t.dts,i.unshift(this.videoLastSample)}this.videoLastSample=a,this.videoTrack.samples=i}doFixAudio(t,e){let{samples:i,meta:s}=this.audioTrack;if(!i||!i.length)return;for(let t=0,e=i.length;t<e;t++){const e=i[t];e.originDts=e.dts}const a=i.length,n=r.default.getSilentFrame(s.codec,s.channelCount),l=this._firstAudioSample,d=i[0];if(this._audioLargeGap>0&&o.doFixLargeGap(i,this._audioLargeGap),d.dts!==this._firstAudioSample.dts&&(e||o.detectLargeGap(this.nextAudioDts,d))&&(e&&(this.nextAudioDts=e),this._audioLargeGap=this.nextAudioDts-d.dts,o.doFixLargeGap(i,this._audioLargeGap)),this._firstVideoSample&&t){const t=this._firstVideoSample.originDts||this._firstVideoSample.dts,e=l.dts-t;if(e>s.refSampleDuration&&e<10*s.refSampleDuration){const e=Math.floor((l.dts-t)/s.refSampleDuration);for(let t=0;t<e;t++){const e={data:n,datasize:n.byteLength,dts:l.dts-(t+1)*s.refSampleDuration,filtered:0};i.unshift(e),this.filledAudioSamples.push({dts:e.dts,size:e.data.byteLength})}this._firstAudioSample=this.filledAudioSamples[0]||this._firstAudioSample}else e<-1*s.refSampleDuration&&(this._audioLargeGap=-1*e,o.doFixLargeGap(i,-1*e))}let h;const u=i[0].dts;if(this.nextAudioDts){h=u-this.nextAudioDts;const t=Math.abs(h);if(t>s.refSampleDuration&&1===a&&1===this.lastAudioSamplesLen&&(s.refSampleDurationFixed=void 0),h>2*s.refSampleDuration&&h<10*s.refSampleDuration)if(1===a&&1===this.lastAudioSamplesLen)s.refSampleDurationFixed=void 0!==s.refSampleDurationFixed?s.refSampleDurationFixed+h:s.refSampleDuration+h;else{const t=Math.floor(h/s.refSampleDuration);for(let e=0;e<t;e++){const t=u-(e+1)*s.refSampleDuration,r=Object.assign({},i[0],{dts:t>this.nextAudioDts?t:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else t<=s.refSampleDuration&&t>0?(i[0].dts=this.nextAudioDts,i[0].pts=this.nextAudioDts):h<0&&o.doFixLargeGap(i,-1*h)}const c=i[i.length-1].originDts,f=i[i.length-1].dts,p=i.length>=2?c-i[i.length-2].originDts:s.refSampleDuration;this.lastAudioSamplesLen=a,this.nextAudioDts=s.refSampleDurationFixed?f+s.refSampleDurationFixed:f+p,this.lastAudioDts=f,i[i.length-1].duration=p;for(let t=0,e=i.length;t<e;t++){const e=i[t],s=i[t+1];if(!s)break;const r=s.dts-e.dts;i[t].duration=r}this.audioTrack.samples=o.sortAudioSamples(i)}fixChangeStreamVideo(t){const{samples:e,meta:i}=this.videoTrack,s=0===t?this.getStreamChangeStart(e[0]):e[t-1].dts,r=e[t].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return e[t].options?e[t].options.isContinue=!0:e[t].options={isContinue:!0},this.doFixVideo(!1);const a=e.slice(0,t),n=e.slice(t),o=e[0],l=n[0].dts-o.dts,d=o.options&&o.options.start+l?o.options.start:null;this.videoTrack.samples=e.slice(0,t),this.doFixVideo(!1),this.videoTrack.samples=e.slice(t),this.doFixVideo(!1,d),this.videoTrack.samples=a.concat(n)}fixChangeStreamAudio(t){const{samples:e,meta:i}=this.audioTrack,s=0===t?this.getStreamChangeStart(e[0]):e[t-1].dts,r=e[t].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return e[t].options?e[t].options.isContinue=!0:e[t].options={isContinue:!0},this.doFixAudio(!1);const a=e.slice(0,t),n=e.slice(t),o=e[0],l=n[0].dts-o.dts,d=o.options&&o.options.start+l?o.options.start:null;this.audioTrack.samples=a,this.doFixAudio(!1),this.audioTrack.samples=n,this.doFixAudio(!1,d),this.audioTrack.samples=a.concat(n)}getFirstSample(){let{samples:t}=this.videoTrack,{samples:e}=this.audioTrack,i=!1,s=!1;return!this._firstVideoSample&&t.length&&(this._firstVideoSample=o.findFirstVideoSample(t),this.removeInvalidSamples(),i=!0),!this._firstAudioSample&&e.length&&(this._firstAudioSample=o.findFirstAudioSample(e),this.removeInvalidSamples(),s=!0),{isFirstVideoSamples:i,isFirstAudioSamples:s}}fixRefSampleDuration(t,e){const i="video"===t.type,s=i?this.allVideoSamplesCount:this.allAudioSamplesCount,r=i?this._firstVideoSample.dts:this._firstAudioSample.dts,a=i?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!t.refSampleDuration||t.refSampleDuration<=0||Number.isNaN(t.refSampleDuration)){if(e.length>=1){const i=e[e.length-1].dts;t.refSampleDuration=Math.floor((i-r)/(s+a-1))}}else if(t.refSampleDuration&&e.length>=5){const i=(e[e.length-1].dts-e[0].dts)/(e.length-1);t.refSampleDuration=Math.floor(Math.abs(t.refSampleDuration-i)<=5?t.refSampleDuration:i)}}recordSamplesCount(){const{audioTrack:t,videoTrack:e}=this;this.allAudioSamplesCount+=t.samples.length,this.allVideoSamplesCount+=e.samples.length}removeInvalidSamples(){const{_firstVideoSample:t,_firstAudioSample:e}=this;e&&(this.audioTrack.samples=this.audioTrack.samples.filter((t,i)=>t===e||t.dts>e.dts)),t&&(this.videoTrack.samples=this.videoTrack.samples.filter((e,i)=>e===t||e.dts>t.dts))}getStreamChangeStart(t){return t.options&&t.options.start?t.options.start-this.dtsBase:1/0}static sortAudioSamples(t){return 1===t.length?t:t.sort((t,e)=>t.dts-e.dts)}static findFirstAudioSample(t){return t&&0!==t.length?o.sortAudioSamples(t)[0]:null}static findFirstVideoSample(t){if(!t.length)return null;const e=t.sort((t,e)=>t.dts-e.dts);for(let t=0,i=e.length;t<i;t++)if(e[t].isKeyframe)return e[t]}static detectLargeGap(t,e){if(null===t)return;const i=e.dts||0,s=t-i>=1e3||i-t>=1e3,r=e.options&&e.options.discontinue;return s||r}static doFixLargeGap(t,e){for(let i=0,s=t.length;i<s;i++){const s=t[i];s.dts+=e,s.pts&&(s.pts+=e)}}static detactChangeStream(t){let e=!1,i=-1;for(let s=0,r=t.length;s<r;s++)if(t[s].options&&t[s].options.meta){e=!0,i=s;break}return{changed:e,changedIdx:i}}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks&&this.tracks.audioTrack?this.tracks.audioTrack:{samples:[],meta:{}}}get videoTrack(){return this.tracks&&this.tracks.videoTrack?this.tracks.videoTrack:{samples:[],meta:{}}}get dtsBase(){const t=this._context.getInstance("MP4_REMUXER");return t?t._dtsBase:0}}e.default=o},"../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
  \****************************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);e.default=class{constructor(t){this.TAG="Golomb",this._buffer=t,this._bufferIndex=0,this._totalBytes=t.byteLength,this._totalBits=8*t.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let t=this._totalBytes-this._bufferIndex,e=Math.min(4,t),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+e)),this._currentWord=new DataView(i.buffer).getUint32(0),this._bufferIndex+=e,this._currentWordBitsLeft=8*e}readBits(t){let e=Math.min(this._currentWordBitsLeft,t),i=this._currentWord>>>32-e;if(t>32)throw new Error("Cannot read more than 32 bits at a time");return this._currentWordBitsLeft-=e,this._currentWordBitsLeft>0?this._currentWord<<=e:this._totalBytes-this._bufferIndex>0&&this._fillCurrentWord(),(e=t-e)>0&&this._currentWordBitsLeft?i<<e|this.readBits(e):i}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let t;for(t=0;t<this._currentWordBitsLeft;t++)if(0!=(this._currentWord&2147483648>>>t))return this._currentWord<<=t,this._currentWordBitsLeft-=t,t;return this._fillCurrentWord(),t+this._skipLeadingZero()}readUEG(){let t=this._skipLeadingZero();return this.readBits(t+1)-1}readSEG(){let t=this.readUEG();return 1&t?t+1>>>1:-1*(t>>>1)}}},"../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
  \***************************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);var s=i(/*! ./sps */"../xgplayer-codec/src/h264/nalunit/sps.js");class r{static getNalunits(t){if(t.length-t.position<4)return[];let e=t.dataview,i=t.position;return 1===e.getInt32(i)||0===e.getInt16(i)&&1===e.getInt8(i+2)?r.getAnnexbNals(t):r.getAvccNals(t)}static getAnnexbNals(t){let e=[],i=r.getHeaderPositionAnnexB(t),s=i.pos,a=s;for(;s<t.length-4;){let n=t.buffer.slice(s,s+i.headerLength);i.pos===t.position&&t.skip(i.headerLength),a=(i=r.getHeaderPositionAnnexB(t)).pos;let o={header:n,body:new Uint8Array(t.buffer.slice(s+n.byteLength,a))};r.analyseNal(o),e.push(o),t.skip(a-t.position),s=a}return e}static getAvccNals(t){let e=[];for(;t.position<t.length-4;){let i=t.dataview.getInt32();if(!(t.length-t.position>=i))break;{let s=t.buffer.slice(t.position,t.position+4);t.skip(4);let a=t.buffer.slice(t.position,t.position+i);t.skip(i);let n={header:s,body:a};r.analyseNal(n),e.push(n)}}return e}static analyseNal(t){switch(31&t.body[0]){case 1:t.ndr=!0;break;case 5:t.idr=!0;break;case 6:break;case 7:t.sps=s.default.parseSPS(t.body);break;case 8:t.pps=!0}}static getHeaderPositionAnnexB(t){let e=t.position,i=0;for(;3!==i&&4!==i&&e<t.length-4;)0===t.dataview.getInt16(e)?1===t.dataview.getInt16(e+2)?i=4:1===t.dataview.getInt8(e+2)?i=3:e++:e++;return e===t.length-4&&(0===t.dataview.getInt16(e)?1===t.dataview.getInt16(e+2)&&(i=4):(e++,0===t.dataview.getInt16(e)&&1===t.dataview.getInt8(e)?i=3:e=t.length)),{pos:e,headerLength:i}}static getAvcc(t,e){let i=new Uint8Array(t.byteLength+e.byteLength+11);i[0]=1,i[1]=t[1],i[2]=t[2],i[3]=t[3],i[4]=255,i[5]=225;let s=6;return i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),s),s+=2,i.set(t,s),i[s+=t.byteLength]=1,s++,i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),s),s+=2,i.set(e,s),i}}e.default=r},"../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
  \*************************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);var s=i(/*! ./golomb */"../xgplayer-codec/src/h264/nalunit/golomb.js");class r{static _ebsp2rbsp(t){let e=t,i=e.byteLength,s=new Uint8Array(i),r=0;for(let t=0;t<i;t++)t>=2&&3===e[t]&&0===e[t-1]&&0===e[t-2]||(s[r]=e[t],r++);return new Uint8Array(s.buffer,0,r)}static parseSPS(t){let e=r._ebsp2rbsp(t),i=new s.default(e);i.readByte();let a=i.readByte();i.readByte();let n=i.readByte();i.readUEG();let o=r.getProfileString(a),l=r.getLevelString(n),d=1,h=420,u=[0,420,422,444],c=8;if((100===a||110===a||122===a||244===a||44===a||83===a||86===a||118===a||128===a||138===a||144===a)&&(3===(d=i.readUEG())&&i.readBits(1),d<=3&&(h=u[d]),c=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let t=3!==d?8:12;for(let e=0;e<t;e++)i.readBool()&&(e<6?r._skipScalingList(i,16):r._skipScalingList(i,64))}i.readUEG();let f=i.readUEG();if(0===f)i.readUEG();else if(1===f){i.readBits(1),i.readSEG(),i.readSEG();let t=i.readUEG();for(let e=0;e<t;e++)i.readSEG()}i.readUEG(),i.readBits(1);let p=i.readUEG(),m=i.readUEG(),g=i.readBits(1);0===g&&i.readBits(1),i.readBits(1);let _=0,y=0,E=0,T=0;i.readBool()&&(_=i.readUEG(),y=i.readUEG(),E=i.readUEG(),T=i.readUEG());let S=1,A=1,v=0,b=!0,x=0,R=0;if(i.readBool()){if(i.readBool()){let t=i.readByte(),e=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],s=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];t>0&&t<16?(S=e[t-1],A=s[t-1]):255===t&&(S=i.readByte()<<8|i.readByte(),A=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let t=i.readBits(32),e=i.readBits(32);b=i.readBool(),v=(x=e)/(R=2*t)}}let w=1;1===S&&1===A||(w=S/A);let D=0,L=0;if(0===d)D=1,L=2-g;else{D=3===d?1:2,L=(1===d?2:1)*(2-g)}let U=16*(p+1),k=16*(m+1)*(2-g);U-=(_+y)*D,k-=(E+T)*L;let O=Math.ceil(U*w);return i.destroy(),i=null,{profile_string:o,level_string:l,bit_depth:c,chroma_format:h,chroma_format_string:r.getChromaFormatString(h),frame_rate:{fixed:b,fps:v,fps_den:R,fps_num:x},par_ratio:{width:S,height:A},codec_size:{width:U,height:k},present_size:{width:O,height:k}}}static _skipScalingList(t,e){let i=8,s=8,r=0;for(let a=0;a<e;a++)0!==s&&(s=(i+(r=t.readSEG())+256)%256),i=0===s?i:s}static getProfileString(t){switch(t){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(t){return(t/10).toFixed(1)}static getChromaFormatString(t){switch(t){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(t){let e={};t&&t.codec_size&&(e.codecWidth=t.codec_size.width,e.codecHeight=t.codec_size.height,e.presentWidth=t.present_size.width,e.presentHeight=t.present_size.height),e.profile=t.profile_string,e.level=t.level_string,e.bitDepth=t.bit_depth,e.chromaFormat=t.chroma_format,e.parRatio={width:t.par_ratio.width,height:t.par_ratio.height},e.frameRate=t.frame_rate;let i=e.frameRate.fps_den,s=e.frameRate.fps_num;e.refSampleDuration=Math.floor(e.timescale*(i/s))}}e.default=r},"../xgplayer-demux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-demux/index.js ***!
  \**********************************/
/*! no static exports found */function(t,e,i){t.exports={M3U8Parser:i(/*! ./src/hls/demuxer/m3u8parser */"../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,TsDemuxer:i(/*! ./src/hls/demuxer/ts */"../xgplayer-demux/src/hls/demuxer/ts.js").default,Playlist:i(/*! ./src/hls/playlist */"../xgplayer-demux/src/hls/playlist.js").default,FlvDemuxer:i(/*! ./src/flv/index */"../xgplayer-demux/src/flv/index.js").default}},"../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
  \***********************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e),i.d(e,"default",(function(){return a}));var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};class a{constructor(){this.offset=0,this.readOffset=this.offset}resolve(t,e){if(e<3)throw new Error("not enough data for metainfo");const i={},s=this.parseValue(t),r=this.parseValue(t,e-s.bodySize);return i[s.data]=r.data,this.resetStatus(),i}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(t){const e=new DataView(t,this.readOffset).getUint16(0,!s.isLe);let i="";i=e>0?s.UTF8.decode(new Uint8Array(t,this.readOffset+2,e)):"";let r=e+2;return this.readOffset+=r,{data:i,bodySize:e+2}}parseDate(t,e){const i=new DataView(t,this.readOffset,e);let r=i.getFloat64(0,!s.isLe);return r+=60*i.getInt16(8,!s.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(t,e){const i=this.parseString(t,e),s=this.parseValue(t,e-i.bodySize);return{data:{name:i.data,value:s.data},bodySize:i.bodySize+s.bodySize,isObjEnd:s.isObjEnd}}parseLongString(t){const e=new DataView(t,this.readOffset).getUint32(0,!s.isLe);let i="";return i=e>0?s.UTF8.decode(new Uint8Array(t,this.readOffset+2,e)):"",this.readOffset+=e+4,{data:i,bodySize:e+4}}parseValue(t,e){let i=new ArrayBuffer;i=t instanceof ArrayBuffer?t:t.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:l,MIX_ARRAY:d,OBJECT_END:h,STRICT_ARRAY:u,DATE:c,LONE_STRING:f}=r,p=new DataView(i,this.readOffset,e);let m=!1;const g=p.getUint8(0);let _=1;this.readOffset+=1;let y=null;switch(g){case a:y=p.getFloat64(1,!s.isLe),this.readOffset+=8,_+=8;break;case n:y=!!p.getUint8(1),this.readOffset+=1,_+=1;break;case o:{const t=this.parseString(i);y=t.data,_+=t.bodySize;break}case l:{y={};let t=0;for(16777215&p.getUint32(e-4,!s.isLe)&&(t=3);_<e-4;){const s=this.parseObject(i,e-_-t);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}if(_<=e-3){9===(16777215&p.getUint32(_-1,!s.isLe))&&(this.readOffset+=3,_+=3)}break}case d:{y={},_+=4,this.readOffset+=4;let t=0;for(9==(16777215&p.getUint32(e-4,!s.isLe))&&(t=3);_<e-8;){const s=this.parseObject(i,e-_-t);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}if(_<=e-3){9===(16777215&p.getUint32(_-1,!s.isLe))&&(_+=3,this.readOffset+=3)}break}case h:y=null,m=!0;break;case u:{y=[];const t=p.getUint32(1,!s.isLe);_+=4,this.readOffset+=4;for(let s=0;s<t;s++){const t=this.parseValue(i,e-_);y.push(t.data),_+=t.bodySize}break}case c:{const t=this.parseDate(i,e-1);y=t.data,_+=t.bodySize;break}case f:{const t=this.parseLongString(i,e-1);y=t.data,_+=t.bodySize;break}default:_=e}return{data:y,bodySize:_,isObjEnd:m}}}},"../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
  !*** ../xgplayer-demux/src/flv/index.js ***!
  \******************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),r=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),a=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),n=i(/*! ./amf-parser */"../xgplayer-demux/src/flv/amf-parser.js");const o=s.EVENTS.DEMUX_EVENTS;class l{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(o.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(t){return!(70!==t[0]||76!==t[1]||86!==t[2]||1!==t[3])}static getPlayType(t){const e={hasVideo:!1,hasAudio:!1};return!0&t&&(e.hasVideo=!0),!0&t&&(e.hasAudio=!0),e}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let t,e=1e4;do{t=this._parseFlvTag()}while(t&&e-- >0);this.emit(o.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const t=this.loaderBuffer.shift(13);this.parseFlvHeader(t),this.doParseFlv()}}parseFlvHeader(t){if(l.isFlvFile(t)){this._firstFragmentLoaded=!0;const e=l.getPlayType(t[4]);e.hasVideo&&this.initVideoTrack(),e.hasAudio&&this.initAudioTrack()}else this.emit(o.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let t=new a.VideoTrack;t.meta=new s.VideoTrackMeta,t.id=t.meta.id=this._trackNum,this.tracks.videoTrack=t}initAudioTrack(){this._trackNum++;let t=new a.AudioTrack;t.meta=new s.AudioTrackMeta,t.id=t.meta.id=this._trackNum,this.tracks.audioTrack=t}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let t=this._parseFlvTagHeader();return t&&this._processChunk(t),t}_parseFlvTagHeader(){let t=0,e={},i=this.loaderBuffer.toInt(t,1);if(t+=1,e.filtered=(32&i)>>>5,e.tagType=31&i,e.datasize=this.loaderBuffer.toInt(t,3),t+=3,8!==e.tagType&&9!==e.tagType&&11!==e.tagType&&18!==e.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.emit(o.DEMUX_ERROR,this.TAG,new Error("tagType "+e.tagType),!1),null;if(this.loaderBuffer.length<e.datasize+15)return null;this.loaderBuffer.shift(4);let s=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(s+=16777216*r),e.dts=s,this.loaderBuffer.shift(3),e}_processChunk(t){switch(t.tagType){case 18:this._parseScriptData(t);break;case 8:this._parseAACData(t);break;case 9:this._parseHevcData(t);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(t){let e=this.tracks.audioTrack,i=this.tracks.videoTrack,s=this.loaderBuffer.shift(t.datasize);const r=(new n.default).resolve(s,s.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(t.datasize)&&(this.emit(o.MEDIA_INFO),this._hasScript=!0),e&&!e.hasSpecificConfig){let t=e.meta;switch(a.audiosamplerate&&(t.sampleRate=a.audiosamplerate),a.audiochannels&&(t.channelCount=a.audiochannels),a.audiosamplerate){case 44100:t.sampleRateIndex=4;break;case 22050:t.sampleRateIndex=7;break;case 11025:t.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){let t=i.meta;if("number"==typeof a.framerate){let e=Math.floor(1e3*a.framerate);if(e>0){let i=e/1e3;t.frameRate||(t.frameRate={}),t.frameRate.fixed=!0,t.frameRate.fps=i,t.frameRate.fps_num=e,t.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(t){let e={hasSpecificConfig:!0};e.objectType=t[1]>>>3,e.sampleRateIndex=(7&t[1])<<1|t[2]>>>7,e.audiosamplerate=this._switchAudioSampleRate(e.sampleRateIndex),e.channelCount=(120&t[2])>>>3,e.frameLength=(4&t[2])>>>2,e.dependsOnCoreCoder=(2&t[2])>>>1,e.extensionFlagIndex=1&t[2],e.codec=`mp4a.40.${e.objectType}`;let i,s,r=window.navigator.userAgent.toLowerCase(),a=e.sampleRateIndex;return-1!==r.indexOf("firefox")?e.sampleRateIndex>=6?(e.objectType=5,s=new Array(4),i=a-3):(e.objectType=2,s=new Array(2),i=a):-1!==r.indexOf("android")?(e.objectType=2,s=new Array(2),i=a):(e.objectType=5,i=e.sampleRateIndex,s=new Array(4),e.sampleRateIndex>=6?i=e.sampleRateIndex-3:1===e.channelCount&&(e.objectType=2,s=new Array(2),i=e.sampleRateIndex)),s[0]=e.objectType<<3,s[0]|=(15&e.sampleRateIndex)>>>1,s[1]=(15&e.sampleRateIndex)<<7,s[1]|=(15&e.channelCount)<<3,5===e.objectType&&(s[1]|=(15&i)>>>1,s[2]=(1&i)<<7,s[2]|=8,s[3]=0),e.config=s,e}_parseAACData(t){let e=this.tracks.audioTrack;if(!e)return;let i=e.meta;i||(e.meta=new s.AudioTrackMeta,i=e.meta);let r=this.loaderBuffer.shift(1)[0];t.data=this.loaderBuffer.shift(t.datasize-1);let a=(240&r)>>>4;e.format=a,10!==a&&this.emit(o.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(r),i.sampleRateIndex=(12&r)>>>2,i.frameLenth=(2&r)>>>1,i.channelCount=1&r,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));let n=i.audioSampleRate,l=i.sampleRateIndex,d=i.refSampleDuration;delete t.tagType;let h=this._datasizeValidator(t.datasize);if(0===t.data[0]){let e=this._aacSequenceHeaderParser(t.data);n=e.audiosamplerate||i.audioSampleRate,l=e.sampleRateIndex||i.sampleRateIndex,d=Math.floor(1024/n*i.timescale),i.channelCount=e.channelCount,i.sampleRate=n,i.sampleRateIndex=l,i.refSampleDuration=d,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=e.config;const s=this._context.mediaInfo.audio;s.codec=e.codec,s.channelCount=e.channelCount,s.sampleRate=n,s.sampleRateIndex=e.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(o.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&this.emit(o.AUDIO_METADATA_CHANGE),this._hasAudioSequence=!0,this._metaChange=!0}else this._metaChange&&(t.options={meta:e.meta},this._metaChange=!1),t.data=t.data.slice(1,t.data.length),e.samples.push(t);h||this.emit(o.DEMUX_ERROR,this.TAG,new Error("TAG length error at "+t.datasize),!1)}_parseHevcData(t){let e=this.loaderBuffer.shift(1)[0];t.frameType=(240&e)>>>4,t.isKeyframe=1===t.frameType;let i=15&e;if(this.tracks.videoTrack.codecID=i,t.avcPacketType=this.loaderBuffer.shift(1)[0],t.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){const e=this.loaderBuffer.shift(t.datasize-5);if(t.data=e,0!==Number.parseInt(t.avcPacketType)){this._datasizeValidator(t.datasize)||this.emit(o.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${t.datasize}`),!1);let e={},i=0;for(e.cts=t.cts,e.dts=t.dts;t.data.length>i;){let s=t.data.slice(Number.parseInt(i),4+i);e.size=s[3],e.size+=256*s[2],e.size+=256*s[1]*256,e.size+=256*s[0]*256*256,i+=4,e.data=t.data.slice(Number.parseInt(i),e.size+i),i+=e.size,this.tracks.videoTrack.samples.push(e),this.emit(o.METADATA_PARSED,"video")}}else 0===Number.parseInt(t.avcPacketType)&&(this._datasizeValidator(t.datasize)?this.emit(o.METADATA_PARSED,"video"):this.emit(o.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${t.datasize}`),!1))}else if(7===i){let e=this.loaderBuffer.shift(t.datasize-5);if(0===e[4]&&0===e[5]&&0===e[6]&&1===e[7]){let t=0;for(let i=0;i<4;i++)t=256*t+e[i];t-=4,(e=e.slice(4,e.length))[3]=t%256,t=(t-e[3])/256,e[2]=t%256,t=(t-e[2])/256,e[1]=t%256,e[0]=(t-e[1])/256}if(t.data=e,0===t.avcPacketType){this._avcSequenceHeaderParser(t.data),this._datasizeValidator(t.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(o.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(o.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0),this._metaChange=!0}else{if(!this._datasizeValidator(t.datasize))return void this.emit(o.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${t.datasize}`),!1);this._metaChange&&(t.options={meta:Object.assign({},this.tracks.videoTrack.meta)},this._metaChange=!1),this.tracks.videoTrack.samples.push(t)}}else this.emit(o.DEMUX_ERROR,this.TAG,new Error(`video codeid is ${i}`),!1),t.data=this.loaderBuffer.shift(t.datasize-1),this._datasizeValidator(t.datasize)||this.emit(o.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${t.datasize}`),!1),this.tracks.videoTrack.samples.push(t),this.emit(o.DEMUX_COMPLETE);delete t.tagType}_avcSequenceHeaderParser(t){let e=this.tracks.videoTrack;if(!e)return;let i=0;e.meta||(e.meta=new s.VideoTrackMeta);let a=e.meta;a.configurationVersion=t[0],a.avcProfileIndication=t[1],a.profileCompatibility=t[2],a.avcLevelIndication=t[3]/10,a.nalUnitLength=1+(3&t[4]);let n=31&t[5];i=6;let o={};for(let e=0;e<n;e++){let e=255*t[i]+t[i+1];i+=2;let s=new Uint8Array(e);for(let r=0;r<e;r++)s[r]=t[i+r];let n="avc1.";for(let t=1;t<4;t++){let e=s[t].toString(16);e.length<2&&(e="0"+e),n+=e}a.codec=n,i+=e,this.tracks.videoTrack.meta.sps=s,o=r.SpsParser.parseSPS(s)}let l=t[i];i++;for(let e=0;e<l;e++){let e=255*t[i]+t[i+1];i+=2;let s=new Uint8Array(e);for(let r=0;r<e;r++)s[r]=t[i+r];i+=e,this.tracks.videoTrack.meta.pps=s}Object.assign(a,r.SpsParser.toVideoMeta(o));const d=this._context.mediaInfo.video;d.codec=a.codec,d.profile=a.profile,d.level=a.level,d.chromaFormat=a.chromaFormat,d.frameRate=a.frameRate,d.parRatio=a.parRatio,d.width=d.width===a.presentWidth?d.width:a.presentWidth,d.height=d.height===a.presentHeight?d.width:a.presentHeight,a.duration=this._context.mediaInfo.duration*a.timescale,a.avcc=new Uint8Array(t.length),a.avcc.set(t),e.meta=a}_switchAudioSampleRate(t){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][t]}_switchAudioSamplingFrequency(t){return[5500,11025,22050,44100,48e3][(12&t)>>>2]}_switchAudioChannel(t){return[1,2][1&t]}_datasizeValidator(t){let e=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),e===t+11}get loaderBuffer(){const t=this._context.getInstance("LOADER_BUFFER");if(t)return t;this.emit(o.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}e.default=l},"../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
  \*******************************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);class s{static parse(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i={duration:0};if(!t||!t.split)return;let r=t.split(/\r|\n/),a=(r=r.filter(t=>t)).shift();if(!a.match("#EXTM3U"))throw new Error('Invalid m3u8 file: not "#EXTM3U"');a=r.shift();let n=!1;for(;a;){let t=a.match(/#(.[A-Z|-]*):(.*)/),o=a.match(/#(.[A-Z|-]*)/);if(o&&t&&t.length>2)switch(t[1]){case"EXT-X-VERSION":i.version=parseInt(t[2]);break;case"EXT-X-MEDIA-SEQUENCE":i.sequence=parseInt(t[2]);break;case"EXT-X-TARGETDURATION":i.targetduration=parseFloat(t[2]);break;case"EXTINF":s.parseFrag(t,r,i,e,n),n=!1;break;case"EXT-X-KEY":s.parseDecrypt(t[2],i)}if(o&&o.length>1)switch(o[1]){case"EXT-X-DISCONTINUITY":n=!0}a=r.shift()}return i}static parseFrag(t,e,i,s,r){i.frags||(i.frags=[]);let a={start:i.duration,duration:1e3*parseFloat(t[2])};i.duration+=a.duration;let n=e.shift();n.match(/#(.*):(.*)/)&&(n=e.shift()),n.length>0&&"/"===n.charAt(0)&&s.match(/.*\/\/.*\.\w+/g)&&(s=s.match(/.*\/\/.*\.\w+/g)[0]),n.match(/.*:\/\/.*/)?a.url=n:a.url=s+n,a.discontinue=r,i.frags.push(a)}static parseURL(t){let e="",i=t.match(/(.*\/).*\.m3u8/);if(i&&i.length>0)for(let t=0;t<i.length;t++)i[t].match(/.*\/$/g)&&i[t].length>e.length&&(e=i[t]);return e}static parseDecrypt(t,e){e.encrypt={};let i=t.split(",");for(let t in i){let s=i[t];if(s.match(/METHOD=(.*)/)&&(e.encrypt.method=s.match(/METHOD=(.*)/)[1]),s.match(/URI="(.*)"/)&&(e.encrypt.uri=s.match(/URI="(.*)"/)[1]),s.match(/IV=0x(.*)/)){let t=s.match(/IV=0x(.*)/)[1],i=Math.ceil(t.length/2);e.encrypt.ivb=new Uint8Array(i);for(let s=i-1;s>=0;s--){let i=parseInt(t.substr(2*s,2),16);e.encrypt.ivb[s]=i}e.encrypt.iv=t}}}}e.default=s},"../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
  \***********************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);var s=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),r=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),a=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const n=a.EVENTS.DEMUX_EVENTS,o={1:["video","MPEG-1"],2:["video","MPEG-2"],27:["video","AVC.H264"],234:["video","VC-1"],3:["audio","MPEG-1"],4:["audio","MPEG-2"],15:["audio","MPEG-2.AAC"],17:["audio","MPEG-4.AAC"],128:["audio","LPCM"],129:["audio","AC3"],6:["audio","AC3"],130:["audio","DTS"],131:["audio","Dolby TrueHD"],132:["audio","AC3-Plus"],133:["audio","DTS-HD"],134:["audio","DTS-MA"],161:["audio","AC3-Plus-SEC"],162:["audio","DTS-HD-SEC"]};class l{constructor(t){this.configs=Object.assign({},t),this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}init(){this.on(n.DEMUX_START,this.demux.bind(this))}demux(t){if(this.demuxing)return;let e=this.inputBuffer,i={pat:[],pmt:[]},s={};for(;e.length>=188;){for(e.length>=1&&71!==e.array[0][e.offset]&&this.emit(n.DEMUX_ERROR,this.TAG,new Error(`Untrust sync code: ${e.array[0][e.offset]}, try to recover;`),!1);e.length>=1&&71!==e.array[0][e.offset];)e.shift(1);let t=e.shift(188),r=new a.Stream(t.buffer),o={};l.read(r,o,i),o.pes?(s[o.header.pid]||(s[o.header.pid]=[]),s[o.header.pid].push(o.pes),o.pes.ES.buffer=[o.pes.ES.buffer]):s[o.header.pid]&&s[o.header.pid][s[o.header.pid].length-1].ES.buffer.push(o.payload.stream)}let r=t,o=t;for(let t=0;t<Object.keys(s).length;t++){let e=s[Object.keys(s)[t]];for(let i=0;i<e.length;i++)e[i].id=Object.keys(s)[t],e[i].ES.buffer=l.Merge(e[i].ES.buffer),"audio"===e[i].type?(this.pushAudioSample(e[i],r),r={}):"video"===e[i].type&&(this.pushVideoSample(e[i],o),o={})}this._hasAudioMeta&&this.emit(n.DEMUX_COMPLETE,"audio"),this._hasVideoMeta&&this.emit(n.DEMUX_COMPLETE,"video")}pushAudioSample(t,e){let i;this._tracks.audioTrack?i=this._tracks.audioTrack:(this._tracks.audioTrack=new r.AudioTrack,i=this._tracks.audioTrack);let s=new a.AudioTrackMeta({audioSampleRate:t.ES.frequence,sampleRate:t.ES.frequence,channelCount:t.ES.channel,codec:"mp4a.40."+t.ES.audioObjectType,config:t.ES.audioConfig,id:2,sampleRateIndex:t.ES.frequencyIndex});s.refSampleDuration=Math.floor(1024/s.audioSampleRate*s.timescale);let o=l.compaireMeta(i.meta,s,!0);this._hasAudioMeta&&o||(i.meta=s,this._hasAudioMeta=!0,this.emit(n.METADATA_PARSED,"audio"));let d=new Uint8Array(t.ES.buffer.buffer.slice(t.ES.buffer.position,t.ES.buffer.length)),h=parseInt(t.pts/90),u=parseInt(t.pts/90),c=new a.AudioTrackSample({dts:h,pts:u,data:d,options:e});i.samples.push(c)}pushVideoSample(t,e){let i,o=s.Nalunit.getNalunits(t.ES.buffer),d=new a.VideoTrackMeta;this._tracks.videoTrack?i=this._tracks.videoTrack:(this._tracks.videoTrack=new r.VideoTrack,i=this._tracks.videoTrack);let h=0,u=!1,c=!1;for(let t=0;t<o.length;t++){let e=o[t];if(e.sps){u=e,i.sps=e.body,d.chromaFormat=u.sps.chroma_format,d.codec="avc1.";for(var f=1;f<4;f++){var p=u.body[f].toString(16);p.length<2&&(p="0"+p),d.codec+=p}d.codecHeight=u.sps.codec_size.height,d.codecWidth=u.sps.codec_size.width,d.frameRate=u.sps.frame_rate,d.id=1,d.level=u.sps.level_string,d.presentHeight=u.sps.present_size.height,d.presentWidth=u.sps.present_size.width,d.profile=u.sps.profile_string,d.refSampleDuration=Math.floor(d.timescale*(u.sps.frame_rate.fps_den/u.sps.frame_rate.fps_num)),d.sarRatio=u.sps.sar_ratio?u.sps.sar_ratio:u.sps.par_ratio}else e.pps?(i.pps=e.body,c=e):h+=4+e.body.byteLength}if(u&&c){d.avcc=s.Nalunit.getAvcc(u.body,c.body);let t=l.compaireMeta(i.meta,d,!0);this._hasVideoMeta&&t||(e?e.meta=Object.assign({},d):e={meta:Object.assign({},d)},i.meta=d,this._hasVideoMeta=!0,this.emit(n.METADATA_PARSED,"video"))}let m=new Uint8Array(h),g=0,_=!1;for(let t=0;t<o.length;t++){let e=o[t],i=e.body.byteLength;e.idr&&(_=!0),e.pps||e.sps||(m.set(new Uint8Array([i>>>24&255,i>>>16&255,i>>>8&255,255&i]),g),g+=4,m.set(e.body,g),g+=i)}let y=new a.VideoTrackSample({dts:parseInt(t.dts/90),pts:parseInt(t.pts/90),cts:(t.pts-t.dts)/90,originDts:t.dts,isKeyframe:_,data:m,options:e});i.samples.push(y)}destory(){this.off(n.DEMUX_START,this.demux),this.configs={},this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}static compaireArray(t,e,i){let s=0,r=0;if("Uint8Array"===i?(s=t.byteLength,r=e.byteLength):"Array"===i&&(s=t.length,r=e.length),s!==r)return!1;for(let i=0;i<s;i++)if(t[i]!==e[i])return!1;return!0}static compaireMeta(t,e,i){if(!t||!e)return!1;for(let s=0,r=Object.keys(t).length;s<r;s++){let r=t[Object.keys(t)[s]],a=e[Object.keys(t)[s]];if("object"!=typeof r){if(i&&"duration"!==Object.keys(t)[s]&&"refSampleDuration"!==Object.keys(t)[s]&&"refSampleDurationFixed"!==Object.keys(t)[s]&&r!==a)return!1}else if(void 0!==r.byteLength){if(void 0===a.byteLength)return!1;if(!l.compaireArray(r,a,"Uint8Array"))return!1}else if(void 0!==r.length){if(void 0===a.length)return!1;if(!l.compaireArray(r,a,"Array"))return!1}else if(!l.compaireMeta(r,a))return!1}return!0}static Merge(t){let e,i=0,s=0;for(let e=0;e<t.length;e++)i+=t[e].length-t[e].position;e=new Uint8Array(i);for(let i=0;i<t.length;i++){let r=t[i];e.set(new Uint8Array(r.buffer,r.position),s),s+=r.length-r.position}return new a.Stream(e.buffer)}static read(t,e,i){l.readHeader(t,e),l.readPayload(t,e,i),"MEDIA"!==e.header.packet||1!==e.header.payload||e.unknownPIDs||(e.pes=l.PES(e))}static readPayload(t,e,i){let s=e.header.pid;switch(s){case 0:l.PAT(t,e,i);break;case 1:l.CAT(t,e,i);break;case 2:l.TSDT(t,e,i);break;case 8191:break;default:if(i.pat.some(t=>t.pid===s))l.PMT(t,e,i);else{let r=i.pmt?i.pmt.filter(t=>t.pid===s):[];r.length>0?l.Media(t,e,o[r[0].streamType][0]):e.unknownPIDs=!0}}}static readHeader(t,e){let i={};i.sync=t.readUint8();let s=t.readUint16();i.error=s>>>15,i.payload=s>>>14&1,i.priority=s>>>13&1,i.pid=8191&s,s=t.readUint8(),i.scrambling=s>>6&3,i.adaptation=s>>4&3,i.continuity=15&s,i.packet=0===i.pid?"PAT":"MEDIA",e.header=i}static PAT(t,e,i){let s={},r=t.readUint8();t.skip(r),r=t.readUint8(),s.tabelID=r,r=t.readUint16(),s.error=r>>>7,s.zero=r>>>6&1,s.sectionLength=4095&r,s.streamID=t.readUint16(),s.current=1&t.readUint8(),s.sectionNumber=t.readUint8(),s.lastSectionNumber=t.readUint8();let a=(s.sectionLength-9)/4,n=[];for(let e=0;e<a;e++){let e=t.readUint16(),i=8191&t.readUint16();n.push({program:e,pid:i,type:0===e?"network":"mapPID"})}n.length>0&&(i.pat=i.pat.concat(n)),s.list=n,s.program=t.readUint16(),s.pid=8191&t.readUint16(),e.payload=s}static PMT(t,e,i){let s={};e.header.packet="PMT";let r=t.readUint8();t.skip(r),r=t.readUint8(),s.tableID=r,r=t.readUint16(),s.sectionLength=4095&r,s.program=t.readUint16(),s.current=1&t.readUint8(),s.order=t.readUint8(),s.lastOrder=t.readUint8(),s.PCR_PID=8191&t.readUint16(),s.programLength=4095&t.readUint16();let a=(s.sectionLength-13)/5,n=[];for(let e=0;e<a;e++)n.push({streamType:t.readUint8(),pid:8191&t.readUint16(),es:4095&t.readUint16()});s.list=n,this.pmt||(this.pmt=[]),i.pmt=this.pmt.concat(n.map(t=>({pid:t.pid,es:t.es,streamType:t.streamType,program:s.program}))),e.payload=s}static Media(t,e,i){let s=e.header,r={};if(s.type=i,3===s.adaptation&&(r.adaptationLength=t.readUint8(),r.adaptationLength>0)){let e=t.readUint8();r.discontinue=e>>>7,r.access=e>>>6&1,r.priority=e>>>5&1,r.PCR=e>>>4&1,r.OPCR=e>>>3&1,r.splicePoint=e>>>2&1,r.transportPrivate=e>>>1&1,r.adaptationField=1&e;let i=t.position;if(1===r.PCR&&(r.programClockBase=t.readUint32()<<1,e=t.readUint16(),r.programClockBase|=e>>>15,r.programClockExtension=511&e),1===r.OPCR&&(r.originProgramClockBase=t.readUint32()<<1,e=t.readUint16(),r.originProgramClockBase+=e>>>15,r.originProgramClockExtension=511&e),1===r.splicePoint&&(r.spliceCountdown=t.readUint8()),1===r.transportPrivate){let e=t.readUint8(),i=[];for(let s=0;s<e;s++)i.push(t.readUint8())}if(1===r.adaptationField){let e=t.readUint8(),i=t.readUint8(),s=t.position,a=i>>>6&1,n=i>>>5&1;1===i>>>7&&(i=t.readUint16(),r.ltwValid=i>>>15,r.ltwOffset=61439&i),1===a&&(i=t.readUint24(),r.piecewiseRate=4194303&i),1===n&&(i=t.readInt8(),r.spliceType=i>>>4,r.dtsNextAU1=i>>>1&7,r.marker1=1&i,i=t.readUint16(),r.dtsNextAU2=i>>>1,r.marker2=1&i,i=t.readUint16(),r.dtsNextAU3=i),t.skip(e-1-(t.position-s))}let s=r.adaptationLength-1-(t.position-i);t.skip(s)}r.stream=new a.Stream(t.buffer.slice(t.position)),e.payload=r}static PES(t){let e={},i=t.payload.stream;if(1!==i.readUint24())e.ES={},e.ES.buffer=i;else{let t=i.readUint8();t>=224&&t<=239&&(e.type="video"),t>=192&&t<=223&&(e.type="audio");let s=i.readUint16();if(e.packetLength=s,"video"!==e.type&&"audio"!==e.type)throw new Error("format is not supported");{let t=i.readUint8();if(2!==t>>>6)throw new Error("error when parse pes header");t=i.readUint8(),e.ptsDTSFlag=t>>>6,e.escrFlag=t>>>5&1,e.esRateFlag=t>>>4&1,e.dsmFlag=t>>>3&1,e.additionalFlag=t>>>2&1,e.crcFlag=t>>>1&1,e.extensionFlag=1&t,e.pesHeaderLength=i.readUint8();let s=e.pesHeaderLength;if(2===e.ptsDTSFlag){let r=[];t=i.readUint8(),r.push(t>>>1&7),t=i.readUint16(),r.push(t>>>1),t=i.readUint16(),r.push(t>>>1),e.pts=r[0]<<30|r[1]<<15|r[2],s-=5,"video"===e.type&&(e.dts=e.pts)}if(3===e.ptsDTSFlag){let r=[];t=i.readUint8(),r.push(t>>>1&7),t=i.readUint16(),r.push(t>>>1),t=i.readUint16(),r.push(t>>>1),e.pts=r[0]<<30|r[1]<<15|r[2];let a=[];t=i.readUint8(),a.push(t>>>1&7),t=i.readUint16(),a.push(t>>>1),t=i.readUint16(),a.push(t>>>1),e.dts=a[0]<<30|a[1]<<15|a[2],s-=10}if(1===e.escrFlag){let r=[],a=[];t=i.readUint8(),r.push(t>>>3&7),r.push(3&t),t=i.readUint16(),r.push(t>>>13),r.push(3&t),t=i.readUint16(),r.push(t>>>13),a.push(3&t),t=i.readUint8(),a.push(t>>>1),e.escr=300*(r[0]<<30|r[1]<<28|r[2]<<15|r[3]<<13|r[4])+(a[0]<<7|a[1]),s-=6}if(1===e.esRateFlag&&(t=i.readUint24(),e.esRate=t>>>1&4194303,s-=3),1===e.dsmFlag)throw new Error("not support DSM_trick_mode");if(1===e.additionalFlag&&(t=i.readUint8(),e.additionalCopyInfo=127&t,s-=1),1===e.crcFlag&&(e.pesCRC=i.readUint16(),s-=2),1===e.extensionFlag)throw new Error("not support extension");s>0&&i.skip(s),e.ES=l.ES(i,e.type)}}return e}static ES(t,e){let i,s={};if("video"===e){if(1!==(i=t.readUint32())&&(t.back(4),1!==(i=t.readUint24())))throw new Error("h264 nal header parse failed");t.skip(2),s.buffer=t}else{if("audio"!==e)throw new Error(`ES ${e} is not supported`);{if((i=t.readUint16())>>>4!=4095)throw new Error("aac ES parse Error");const e=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];s.id=0==(i>>>3&1)?"MPEG-4":"MPEG-2",s.layer=i>>>1&3,s.absent=1&i,i=t.readUint16(),s.audioObjectType=1+(i>>>14&3),s.profile=s.audioObjectType-1,s.frequencyIndex=i>>>10&15,s.frequence=e[s.frequencyIndex],s.channel=i>>>6&7,s.frameLength=(3&i)<<11|t.readUint16()>>>5,l.getAudioConfig(s),t.skip(1),s.buffer=t}}return s}static TSDT(t,e,i){e.payload={}}static CAT(t,e,i){let s={};s.tableID=t.readUint8();let r=t.readUint16();s.sectionIndicator=r>>>7,s.sectionLength=4095&r,t.skip(2),r=t.readUint8(),s.version=r>>>3,s.currentNextIndicator=1&r,s.sectionNumber=t.readUint8(),s.lastSectionNumber=t.readUint8();let a=(this.sectionLength-9)/4,n=[];for(let t=0;t<a;t++)n.push({});s.crc32=t.readUint32(),e.payload=s}static getAudioConfig(t){let e,i,s=navigator.userAgent.toLowerCase();/firefox/i.test(s)?t.frequencyIndex>=6?(t.audioObjectType=5,e=new Array(4),i=t.frequencyIndex-3):(t.audioObjectType=2,e=new Array(2),i=t.frequencyIndex):-1!==s.indexOf("android")?(t.audioObjectType=2,e=new Array(2),i=t.frequencyIndex):(t.audioObjectType=5,e=new Array(4),t.frequencyIndex>=6?i=t.frequencyIndex-3:(1===t.channel&&(t.audioObjectType=2,e=new Array(2)),i=t.frequencyIndex)),e[0]=t.audioObjectType<<3,e[0]|=(14&t.frequencyIndex)>>1,e[1]=(1&t.frequencyIndex)<<7,e[1]|=t.channel<<3,5===t.audioObjectType&&(e[1]|=(14&i)>>1,e[2]=(1&i)<<7,e[2]|=8,e[3]=0),t.audioConfig=e}get inputBuffer(){return this._context.getInstance(this.configs.inputbuffer)}get _tracks(){return this._context.getInstance("TRACKS")}}e.default=l},"../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
  !*** ../xgplayer-demux/src/hls/playlist.js ***!
  \*********************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);e.default=class{constructor(t){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=t.autoclear||!1}get list(){return this._list}set baseURL(t){this.baseURL!==t&&(this.clear(),this._baseURL=t)}get baseURL(){return this._baseURL}push(t,e,i){this._ts[t]||(this._ts[t]={duration:e,downloaded:!1,downloading:!1,start:this.duration,discontinue:!!i},this._list[this.duration]=t,this.duration+=e,this.fragLength+=1)}deleteFrag(t){this._ts[t]&&(this._ts[t].start>this._lastget.time&&(this._lastget={duration:this._ts[t].duration,time:this._ts[t].start,downloaded:!1,downloading:!1,url:t}),delete this._list[this._ts[t].start],delete this._ts[t],this.fragLength-=1)}pushM3U8(t,e){if(!t)throw new Error("No m3u8 data received.");if(this.version=t.version,this.targetduration=t.targetduration,t.encrypt&&!this.encrypt&&(this.encrypt=t.encrypt),!(t.sequence>this.sequence))throw new Error(`Old m3u8 file received, ${t.sequence}`);{this.sequence=t.sequence;let i=[];for(let e=0;e<t.frags.length;e++){let s=t.frags[e];this._ts[s.url]||(i.push(s.url),this.push(s.url,s.duration,s.discontinue))}if(i.length<1)throw new Error("Can not read ts file list.");if(e){let t=this.getTsList();for(let e=0;e<t.length;e++)i.indexOf(t[e])<0&&this.deleteFrag(t[e])}}}getTsList(){return Object.keys(this._ts)}downloaded(t,e){let i=this._ts[t];i&&(i.downloaded=e)}downloading(t,e){let i=this._ts[t];i&&(i.downloading=e)}getTsByName(t){return this._ts[t]}getTs(t){let e,i=Object.keys(this._list);if(void 0===t&&(t=this._lastget?this._lastget.time+this._lastget.duration:0),!(i.length<1||t>=this.duration)){i.sort((t,e)=>parseFloat(t)-parseFloat(e));for(let s=0;s<i.length&&t>=parseInt(i[s]);s++){let t=this._list[i[s]];e={url:t,downloaded:this._ts[t].downloaded,downloading:this._ts[t].downloading,time:parseInt(i[s]),duration:parseInt(this._ts[t].duration)},this.autoclear&&(delete this._ts[this._lastget.url],delete this._list[this._lastget.time]),this._lastget=e}return e}}clear(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0}clearDownloaded(){for(let t=0,e=Object.keys(this._ts).length;t<e;t++){let e=this._ts[Object.keys(this._ts)[t]];e.downloaded=!1,e.downloading=!1}}destroy(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=!1}}},"../xgplayer-loader/index.js":
/*!***********************************!*\
  !*** ../xgplayer-loader/index.js ***!
  \***********************************/
/*! no static exports found */function(t,e,i){t.exports={FetchLoader:i(/*! ./src/fetch-loader */"../xgplayer-loader/src/fetch-loader.js").default}},"../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader/src/fetch-loader.js ***!
  \**********************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const r=s.EVENTS.LOADER_EVENTS,a=0,n=1,o=2,l=3;e.default=class{constructor(t){this.configs=Object.assign({},t),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this._destroyed=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(r.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(t,e){let i=this;this.url=t,this._canceled=!1;let s=this.getParams(e);return i.loading=!0,fetch(this.url,s).then((function(t){if(t.ok)return i.status=t.status,i._onFetchResponse(t);i.loading=!1,i.emit(r.LOADER_ERROR,i.TAG,new Error("invalid response."))})).catch((function(t){throw i.loading=!1,i.emit(r.LOADER_ERROR,i.TAG,t),new Error(t.message)}))}_onFetchResponse(t){let e=this,i=this._context.getInstance(this.buffer);this._loaderTaskNo++;let s=this._loaderTaskNo;if(!0===t.ok)switch(this.readtype){case o:t.json().then(t=>{e.loading=!1,e._canceled||e._destroyed||(i?(i.push(t),e.emit(r.LOADER_COMPLETE,i)):e.emit(r.LOADER_COMPLETE,t))});break;case n:t.text().then(t=>{e.loading=!1,e._canceled||e._destroyed||(i?(i.push(t),e.emit(r.LOADER_COMPLETE,i)):e.emit(r.LOADER_COMPLETE,t))});break;case l:t.arrayBuffer().then(t=>{e.loading=!1,e._canceled||e._destroyed||(i?(i.push(new Uint8Array(t)),e.emit(r.LOADER_COMPLETE,i)):e.emit(r.LOADER_COMPLETE,t))});break;case a:default:return this._onReader(t.body.getReader(),s)}}_onReader(t,e){let i=this._context.getInstance(this.buffer);if(!i&&this._reader||this._destroyed)try{this._reader.cancel()}catch(t){}if(this._reader=t,!1===this.loading)return;let s=this;this._reader&&this._reader.read().then((function(a){if(!s._canceled&&!s._destroyed)return a.done?(s.loading=!1,s.status=0,void s.emit(r.LOADER_COMPLETE,i)):(i.push(a.value),s.emit(r.LOADER_DATALOADED,i),s._onReader(t,e));if(s._reader)try{s._reader.cancel()}catch(t){}})).catch(t=>{s.loading=!1,s.emit(r.LOADER_ERROR,s.TAG,t)})}getParams(t){let e=Object.assign({},t),i=new Headers,s={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let t=this.configs.headers;for(let e in t)t.hasOwnProperty(e)&&i.append(e,t[e])}if("object"==typeof e.headers){let t=e.headers;for(let e in t)t.hasOwnProperty(e)&&i.append(e,t[e])}return!1===e.cors&&(s.mode="same-origin"),e.withCredentials&&(s.credentials="include"),s}cancel(){if(this._reader){try{this._reader.cancel()}catch(t){}this._reader=null,this.loading=!1}this._canceled=!0}destroy(){this._destroyed=!0,this.cancel()}}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");class r{static size(t){return s.Buffer.writeUint32(t)}static initBox(t,e){const i=new s.Buffer;for(var a=arguments.length,n=Array(a>2?a-2:0),o=2;o<a;o++)n[o-2]=arguments[o];return i.write.apply(i,[r.size(t),r.type(e)].concat(n)),i.buffer}static extension(t,e){return new Uint8Array([t,e>>16&255,e>>8&255,255&e])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov(t){let e,{type:i,meta:s}=t,a=8,n=r.mvhd(s.duration,s.timescale);e="video"===i?r.videoTrak(s):r.audioTrak(s);let o=r.mvex(s.duration,s.timescale||1e3,s.id);return[n,e,o].forEach(t=>{a+=t.byteLength}),r.initBox(a,"moov",n,e,o)}static mvhd(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3,i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(t){let e=8,i=r.tkhd({id:1,duration:t.duration,timescale:t.timescale||1e3,width:t.presentWidth,height:t.presentHeight,type:"video"}),s=r.mdia({type:"video",timescale:t.timescale||1e3,duration:t.duration,avcc:t.avcc,parRatio:t.parRatio,width:t.presentWidth,height:t.presentHeight});return[i,s].forEach(t=>{e+=t.byteLength}),r.initBox(e,"trak",i,s)}static audioTrak(t){let e=8,i=r.tkhd({id:2,duration:t.duration,timescale:t.timescale||1e3,width:0,height:0,type:"audio"}),s=r.mdia({type:"audio",timescale:t.timescale||1e3,duration:t.duration,channelCount:t.channelCount,samplerate:t.sampleRate,config:t.config});return[i,s].forEach(t=>{e+=t.byteLength}),r.initBox(e,"trak",i,s)}static tkhd(t){let e=t.id,i=t.duration,s=t.width,a=t.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>>8&255,255&s,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(t){let e=new s.Buffer,i=t.duration,a=t.mediaTime;return e.write(r.size(36),r.type("edts")),e.write(r.size(28),r.type("elst")),e.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),e.buffer}static mdia(t){let e=8,i=r.mdhd(t.timescale,t.duration),s=r.hdlr(t.type),a=r.minf(t);return[i,s,a].forEach(t=>{e+=t.byteLength}),r.initBox(e,"mdia",i,s,a)}static mdhd(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3,e=arguments[1],i=new Uint8Array([0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,85,196,0,0]);return r.initBox(12+i.byteLength,"mdhd",r.extension(0,0),i)}static hdlr(t){let e=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===t&&(e.splice.apply(e,[8,4].concat([115,111,117,110])),e.splice.apply(e,[24,13].concat([83,111,117,110,100,72,97,110,100,108,101,114,0]))),r.initBox(8+e.length,"hdlr",new Uint8Array(e))}static minf(t){let e=8,i="video"===t.type?r.vmhd():r.smhd(),s=r.dinf(),a=r.stbl(t);return[i,s,a].forEach(t=>{e+=t.byteLength}),r.initBox(e,"minf",i,s,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let t=new s.Buffer;return t.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),t.buffer}static stbl(t){let e=8,i=r.stsd(t),s=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[i,s,a,n,o].forEach(t=>{e+=t.byteLength}),r.initBox(e,"stbl",i,s,a,n,o)}static stsd(t){let e;return e="audio"===t.type?r.mp4a(t):r.avc1(t),r.initBox(16+e.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),e)}static mp4a(t){let e=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t.channelCount,0,16,0,0,0,0,t.samplerate>>8&255,255&t.samplerate,0,0]),i=r.esds(t.config);return r.initBox(8+e.byteLength+i.byteLength,"mp4a",e,i)}static esds(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[43,146,8,0];const e=t.length;let i=new s.Buffer,a=new Uint8Array([0,0,0,0,3,23+e,0,1,0,4,15+e,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([e]).concat(t).concat([6,1,2]));return i.write(r.size(8+a.byteLength),r.type("esds"),a),i.buffer}static avc1(t){let e=new s.Buffer,i=t.width,a=t.height,n=t.parRatio.height,o=t.parRatio.width,l=t.avcc,d=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),h=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),u=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return e.write(r.size(40+d.byteLength+l.byteLength+h.byteLength),r.type("avc1"),d,r.size(8+l.byteLength),r.type("avcC"),l,r.size(20),r.type("btrt"),h,r.size(16),r.type("pasp"),u),e.buffer}static stts(){let t=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",t)}static stsc(){let t=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",t)}static stco(){let t=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",t)}static stsz(){let t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",t)}static mvex(t){arguments.length>1&&void 0!==arguments[1]&&arguments[1];let e=arguments[2],i=new s.Buffer,a=s.Buffer.writeUint32(t);return i.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),a,r.trex(e)),i.buffer}static trex(t){let e=new Uint8Array([0,0,0,0,t>>24,t>>16&255,t>>8&255,255&t,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+e.byteLength,"trex",e)}static moof(t){let e=8,i=r.mfhd(),s=r.traf(t);return[i,s].forEach(t=>{e+=t.byteLength}),r.initBox(e,"moof",i,s)}static mfhd(){let t=s.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),t)}static traf(t){let e=8,i=r.tfhd(t.id),s=r.tfdt(t.time),a=r.sdtp(t),n=r.trun(t,a.byteLength);return[i,s,n,a].forEach(t=>{e+=t.byteLength}),r.initBox(e,"traf",i,s,n,a)}static tfhd(t){let e=s.Buffer.writeUint32(t);return r.initBox(16,"tfhd",r.extension(0,0),e)}static tfdt(t){return r.initBox(16,"tfdt",r.extension(0,0),s.Buffer.writeUint32(t))}static trun(t,e){let i=new s.Buffer,a=s.Buffer.writeUint32(t.samples.length),n=s.Buffer.writeUint32(92+16*t.samples.length+e);return i.write(r.size(20+16*t.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),t.samples.forEach(t=>{const e=t.flags;i.write(new Uint8Array([t.duration>>>24&255,t.duration>>>16&255,t.duration>>>8&255,255&t.duration,t.size>>>24&255,t.size>>>16&255,t.size>>>8&255,255&t.size,e.isLeading<<2|e.dependsOn,e.isDependedOn<<6|e.hasRedundancy<<4|e.isNonSync,0,0,t.cts>>>24&255,t.cts>>>16&255,t.cts>>>8&255,255&t.cts]))}),i.buffer}static sdtp(t){let e=new s.Buffer;return e.write(r.size(12+t.samples.length),r.type("sdtp"),r.extension(0,0)),t.samples.forEach(t=>{const i=t.flags,s=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;e.write(new Uint8Array([s]))}),e.buffer}static mdat(t){let e=new s.Buffer,i=8;t.samples.forEach(t=>{i+=t.size}),e.write(r.size(i),r.type("mdat"));let a=new Uint8Array(i),n=0;return a.set(e.buffer,n),n+=8,t.samples.forEach(t=>{t.buffer.forEach(t=>{a.set(t,n),n+=t.byteLength})}),a}}r.type=t=>new Uint8Array([t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2),t.charCodeAt(3)]),r.sequence=1,e.default=r},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e),i.d(e,"default",(function(){return n}));var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),r=i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js");const a=s.EVENTS.REMUX_EVENTS;class n{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new s.MediaSegmentList("video"),this._audioSegmentList=new s.MediaSegmentList("audio");const{browser:t}=s.sniffer;this._fillSilenceFrame="ie"===t,this.isFirstVideo=!0,this.isFirstAudio=!0,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(a.REMUX_MEDIA,this.remux.bind(this)),this.on(a.REMUX_METADATA,this.onMetaDataReady.bind(this)),this.on(a.DETECT_CHANGE_STREAM,this.resetDtsBase.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:t,videoTrack:e}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(t,e),this._remuxVideo(e),this._remuxAudio(t)}resetDtsBase(){this._dtsBase=0,this._dtsBaseInited=!1}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(t){let e;if("audio"===t){const{audioTrack:t}=this._context.getInstance("TRACKS");e=t}else{const{videoTrack:t}=this._context.getInstance("TRACKS");e=t}let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(t);s||(s=i.createSource(t)),s.mimetype=e.meta.codec,s.init=this.remuxInitSegment(t,e.meta),this.emit(a.INIT_SEGMENT,t)}remuxInitSegment(t,e){let i=new s.Buffer,a=r.default.ftyp(),n=r.default.moov({type:t,meta:e});return i.write(a,n),i}calcDtsBase(t,e){if(!t&&e.samples.length)return e.samples[0].dts;if(!t.samples.length&&!e.samples.length)return;let i=1/0,s=1/0;t.samples&&t.samples.length&&(i=t.samples[0].dts),e.samples&&e.samples.length&&(s=e.samples[0].dts),this._dtsBase=Math.min(i,s),this._isDtsBaseInited=!0}_remuxVideo(t){const e=t||{};if(!t.samples||!t.samples.length)return;let{samples:i}=e,n=-1,o=null;const l=[],d={samples:[]};let h=1e4;for(;i.length&&h-- >0;){const t=i.shift(),{isKeyframe:e,options:s}=t;if(!this.isFirstAudio&&s&&s.meta){o=this.remuxInitSegment("video",s.meta),s.meta=null,i.unshift(t),s.isContinue||this.resetDtsBase();break}let r,h,u=t.dts-this._dtsBase;-1===n&&(n=u),void 0!==t.pts&&(r=(h=t.pts-this._dtsBase)-u),void 0!==t.cts&&(h=t.cts+u,r=t.cts);let c={buffer:[],size:0};d.samples.push(c),c.buffer.push(t.data),c.size+=t.data.byteLength;let f=0;if(t.duration)f=t.duration;else if(i.length>=1){f=i[0].dts-this._dtsBase-u}else f=l.length>=1?l[l.length-1].duration:this.videoMeta.refSampleDuration;this.videoAllDuration+=f,l.push({dts:u,cts:r,pts:h,data:t.data,size:t.data.byteLength,isKeyframe:e,duration:f,flags:{isLeading:0,dependsOn:e?2:1,isDependedOn:e?1:0,hasRedundancy:0,isNonSync:e?0:1},originDts:u,type:"video"}),e&&this.emit(a.RANDOM_ACCESS_POINT,h)}let u=new s.Buffer;if(l.length){const t=r.default.moof({id:e.meta.id,time:n,samples:l}),i=r.default.mdat(d);u.write(t,i),this.writeToSource("video",u)}if(o&&(this.writeToSource("video",o),i.length))return e.samples=i,this._remuxVideo(e);this.isFirstVideo=!1,this.emit(a.MEDIA_SEGMENT,"video");const c=l[l.length-1];this._videoNextDts=c.dts+c.duration,e.samples=[],e.length=0}_remuxAudio(t){const{samples:e}=t||{};let i=-1,n=[],o=null;const l={samples:[]};if(!e||!e.length)return;let d=1e4,h=!1;for(;e.length&&d-- >0;){let t=e.shift();const{data:s,options:r}=t;if(!this.isFirstAudio&&r&&r.meta){o=this.remuxInitSegment("audio",r.meta),r.meta=null,e.unshift(t),r.isContinue||this.resetDtsBase();break}let a=t.dts-this._dtsBase;const d=a;h||(i=a,h=!0);let u=0;if(t.duration)u=t.duration;else if(this.audioMeta.refSampleDurationFixed)u=this.audioMeta.refSampleDurationFixed;else if(e.length>=1){u=e[0].dts-this._dtsBase-a}else u=n.length>=1?n[n.length-1].duration:this.audioMeta.refSampleDuration;this.audioAllDuration+=u;const c={dts:a,pts:a,cts:0,size:s.byteLength,duration:t.duration?t.duration:u,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:d,type:"audio"};let f={buffer:[],size:0};f.buffer.push(s),f.size+=s.byteLength,l.samples.push(f),n.push(c)}const u=new s.Buffer;if(n.length){const e=r.default.moof({id:t.meta.id,time:i,samples:n}),s=r.default.mdat(l);u.write(e,s),this.writeToSource("audio",u)}if(o&&(this.writeToSource("audio",o),e.length))return t.samples=e,this._remuxAudio(t);this.isFirstAudio=!1,this.emit(a.MEDIA_SEGMENT,"audio",u);const c=n[n.length-1];this._videoNextDts=c.dts+c.duration,t.samples=[],t.length=0}writeToSource(t,e){let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(t);s||(s=i.createSource(t)),s.data.push(e)}initSilentAudio(t,e){const i=n.getSilentFrame(this._audioMeta.channelCount);return{dts:t,pts:t,cts:0,duration:e,unit:i,size:i.byteLength,originDts:t,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(t){return 1===t?new Uint8Array([0,200,0,128,35,128]):2===t?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===t?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===t?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===t?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===t?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}},"../xgplayer-utils/index.js":
/*!**********************************!*\
  !*** ../xgplayer-utils/index.js ***!
  \**********************************/
/*! no static exports found */function(t,e,i){t.exports={Context:i(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:i(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:i(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:i(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:i(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:i(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,MediaInfo:i(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:i(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:i(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:i(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:i(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:i(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:i(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default,Crypto:i(/*! ./src/crypto */"../xgplayer-utils/src/crypto/index.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){for(var e=0,i=arguments.length,s=Array(i>1?i-1:0),r=1;r<i;r++)s[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var l,d=s[Symbol.iterator]();!(a=(l=d.next()).done);a=!0){var h=l.value;e+=h.length}}catch(t){n=!0,o=t}finally{try{!a&&d.return&&d.return()}finally{if(n)throw o}}var u=new t(e),c=0,f=!0,p=!1,m=void 0;try{for(var g,_=s[Symbol.iterator]();!(f=(g=_.next()).done);f=!0){var y=g.value;u.set(y,c),c+=y.length}}catch(t){p=!0,m=t}finally{try{!f&&_.return&&_.return()}finally{if(p)throw m}}return u}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(t,e,i){"use strict";var s,r=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"),a=(s=r)&&s.__esModule?s:{default:s};t.exports=a.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);const s={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT",DETECT_CHANGE_STREAM:"DETECT_CHANGE_STREAM",RANDOM_ACCESS_POINT:"RANDOM_ACCESS_POINT"},n={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o={RETRY_TIME_EXCEEDED:"RETRY_TIME_EXCEEDED"},l=Object.assign({},s,r,a,n,o),d=[],h=[];for(let t in l)l.hasOwnProperty(t)&&d.push(l[t]);for(let t in l)l.hasOwnProperty(t)&&h.push(l[t]);e.default={ALLEVENTS:l,HLS_EVENTS:o,REMUX_EVENTS:a,DEMUX_EVENTS:r,MSE_EVENTS:n,LOADER_EVENTS:s,FlvAllowedEvents:d,HlsAllowedEvents:h,CRYTO_EVENTS:{START_DECRYPT:"START_DECRYPT",DECRYPTED:"DECRYPTED"}}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
  \**********************************************************/
/*! exports provided: CONTEXT_COMOMANDS */function(t,e,i){"use strict";i.r(e),i.d(e,"CONTEXT_COMOMANDS",(function(){return s}));const s={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/context.js ***!
  \****************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);var s=i(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"),r=i(/*! events */"../../node_modules/events/events.js");const a="__TO__";e.default=class{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this._emitter=new r.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new s.default,this.allowedEvents=t,this._hooks={},this._emitCounter={}}getInstance(t){const e=this._instanceMap[t];return e||null}initInstance(t){if(this._clsMap[t]){for(var e=arguments.length,i=Array(e>1?e-1:0),s=1;s<e;s++)i[s-1]=arguments[s];const r=new(Function.prototype.bind.apply(this._clsMap[t],[null].concat(i)));return this._instanceMap[t]=r,r.init&&r.init(),r}throw new Error(`${t}未在context中注册`)}init(t){if(!this._inited){for(let e in this._clsMap)this._clsMap.hasOwnProperty(e)&&!this._instanceMap[e]&&this.initInstance(e,t);this._inited=!0}}registry(t,e){var i=this;const s=this._emitter,r=this._isMessageNameValid.bind(this),n=this;return this._clsMap[t]=class extends e{constructor(e,i,s){super(e,i,s),this.listeners={},this.onceListeners={},this.TAG=t,this._context=n}on(e,i){return r(e),this.listeners[e]?this.listeners[e].push(i):this.listeners[e]=[i],s.on(`${e}${a}${t}`,i),s.on(e,i)}before(t,e){r(t),n._hooks[t]?n._hooks[t].push(e):n._hooks[t]=[e]}once(e,i){return r(e),this.onceListeners[e]?this.onceListeners[e].push(i):this.onceListeners[e]=[i],s.once(`${e}${a}${t}`,i),s.once(e,i)}emit(t){if(r(t),n._emitCounter[t]){if(n._emitCounter[t]+=1,n._emitCounter[t]%1e3==0){let e="con",i="sole";window.console&&(window[e+i].warn("invoke: ",t),window.localStorage.setItem(`xgplayer_invoke_${t}`,n._emitCounter[t]))}}else n._emitCounter[t]=1;const e=n._hooks?n._hooks[t]:null;if(e)for(let t=0,i=e.length;t<i;t++){(0,e[t])()}for(var i=arguments.length,a=Array(i>1?i-1:0),o=1;o<i;o++)a[o-1]=arguments[o];return s.emit.apply(s,[t].concat(a))}emitTo(t,e){r(e);for(var i=arguments.length,n=Array(i>2?i-2:0),o=2;o<i;o++)n[o-2]=arguments[o];return s.emit.apply(s,[`${e}${a}${t}`].concat(n))}off(t,e){return r(t),s.off(t,e)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let i in this.listeners)if(e(i)){const e=this.listeners[i]||[];for(let r=0;r<e.length;r++){const n=e[r];s.off(i,n),s.off(`${i}${a}${t}`,n)}}for(let i in this.onceListeners)if(e(i)){const e=this.onceListeners[i]||[];for(let r=0;r<e.length;r++){const n=e[r];s.off(i,n),s.off(`${i}${a}${t}`,n)}}}destroy(){if(this.removeListeners(),this.listeners={},delete n._instanceMap[t],super.destroy)return super.destroy()}},function(){for(var e=arguments.length,s=Array(e),r=0;r<e;r++)s[r]=arguments[r];return i.initInstance.apply(i,[t].concat(s))}}destroyInstances(){Object.keys(this._instanceMap).forEach(t=>{this._instanceMap[t].destroy&&this._instanceMap[t].destroy()})}destroy(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this._hooks=null,this._emitCounter={},this.destroyInstances()}_isMessageNameValid(t){if(!this.allowedEvents.indexOf(t)<0)throw new Error(`unregistered message name: ${t}`)}}},"../xgplayer-utils/src/crypto/index.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/crypto/index.js ***!
  \*********************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);const s=i(/*! ../constants/events */"../xgplayer-utils/src/constants/events.js").default.CRYTO_EVENTS;e.default=class{constructor(t){this.inputBuffer=t.inputbuffer,this.outputBuffer=t.outputbuffer,this.key=t.key,this.iv=t.iv,this.method=t.method,this.crypto=window.crypto||window.msCrypto}init(){this.on(s.START_DECRYPT,this.decript.bind(this))}decript(){if(this.aeskey)this.decriptData();else{this.crypto.subtle.importKey("raw",this.key.buffer,{name:"AES-CBC"},!1,["encrypt","decrypt"]).then(t=>{this.aeskey=t,this.decriptData()})}}decriptData(){let t=this._context.getInstance(this.inputBuffer),e=this._context.getInstance(this.outputBuffer),i=t.shift();i&&this.crypto.subtle.decrypt({name:"AES-CBC",iv:this.iv.buffer},this.aeskey,i).then(t=>{e.push(new Uint8Array(t)),this.emit(s.DECRYPTED),this.decriptData(i)})}}},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isle.js ***!
  \*****************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);const s=function(){const t=new ArrayBuffer(2);return new DataView(t).setInt16(0,256,!0),256===new Int16Array(t)[0]}();e.default=s},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);const s=function(){const t=new ArrayBuffer(2);return new DataView(t).setInt16(0,256,!0),256===new Int16Array(t)[0]}(),r={get device(){let t=r.os;return t.isPc?"pc":t.isTablet?"tablet":"mobile"},get browser(){let t=navigator.userAgent.toLowerCase(),e={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(e).filter(i=>e[i].test(t)))[0]},get os(){let t=navigator.userAgent,e=/(?:Windows Phone)/.test(t),i=/(?:SymbianOS)/.test(t)||e,s=/(?:Android)/.test(t),r=/(?:Firefox)/.test(t),a=/(?:iPad|PlayBook)/.test(t)||s&&!/(?:Mobile)/.test(t)||r&&/(?:Tablet)/.test(t),n=/(?:iPhone)/.test(t)&&!a;return{isTablet:a,isPhone:n,isAndroid:s,isPc:!n&&!s&&!i,isSymbian:i,isWindowsPhone:e,isFireFox:r}},get isLe(){return s}};e.default=r},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/utf8.js ***!
  \*****************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);class s{static decode(t){const e=[],i=t;let r=0;const a=t.length;for(;r<a;)if(i[r]<128)e.push(String.fromCharCode(i[r])),++r;else{if(i[r]<192);else if(i[r]<224){if(s._checkContinuation(i,r,1)){const t=(31&i[r])<<6|63&i[r+1];if(t>=128){e.push(String.fromCharCode(65535&t)),r+=2;continue}}}else if(i[r]<240){if(s._checkContinuation(i,r,2)){const t=(15&i[r])<<12|(63&i[r+1])<<6|63&i[r+2];if(t>=2048&&55296!=(63488&t)){e.push(String.fromCharCode(65535&t)),r+=3;continue}}}else if(i[r]<248&&s._checkContinuation(i,r,3)){let t=(7&i[r])<<18|(63&i[r+1])<<12|(63&i[r+2])<<6|63&i[r+3];if(t>65536&&t<1114112){t-=65536,e.push(String.fromCharCode(t>>>10|55296)),e.push(String.fromCharCode(1023&t|56320)),r+=4;continue}}e.push(String.fromCharCode(65533)),++r}return e.join("")}static _checkContinuation(t,e,i){let s=t;if(e+i<s.length){for(;i--;)if(128!=(192&s[++e]))return!1;return!0}return!1}}e.default=s},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/media-info.js ***!
  \**************************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e),i.d(e,"default",(function(){return r}));const s=t=>{for(let e in t)if(t.hasOwnProperty(e)&&null===t[e])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(t){return s(t)}static isVideoReady(t){return!t.hasVideo||s(t.video)}static isAudioReady(t){return!t.hasAudio||s(t.video)}}},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-sample.js ***!
  \****************************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e),i.d(e,"default",(function(){return s}));class s{constructor(t){let e=s.getDefaultInf();if(!t||"[object Object]"!==Object.prototype.toString.call(t))return e;let i=Object.assign({},e,t);Object.entries(i).forEach(t=>{let[e,i]=t;this[e]=i})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
  \**********************************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e),i.d(e,"default",(function(){return s}));class s{constructor(t){this._type=t,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(t){let e=this._list;if(0===e.length)return-2;let i=e.length-1,s=0,r=0,a=i,n=0;if(t<e[0].originDts)return n=-1;for(;r<=a;){if((s=r+Math.floor((a-r)/2))===i||t>e[s].lastSample.originDts&&t<e[s+1].originDts){n=s;break}e[s].originDts<t?r=s+1:a=s-1}return n}_searchNearestSegmentAfter(t){return this._searchNearestSegmentBefore(t)+1}append(t){let e=this._list,i=this._lastAppendLocation,s=0;-1!==i&&i<e.length&&t.originStartDts>=e[i].lastSample.originDts&&(i===e.length-1||i<e.length-1&&t.originStartDts<e[i+1].originStartDts)?s=i+1:e.length>0&&(s=this._searchNearestSegmentBefore(t.originStartDts)+1),this._lastAppendLocation=s,this._list.splice(s,0,t)}getLastSegmentBefore(t){let e=this._searchNearestSegmentBefore(t);return e>=0?this._list[e]:null}getLastSampleBefore(t){let e=this.getLastSegmentBefore(t);return null!==e?e.lastSample:null}getLastRAPBefore(t){let e=this._searchNearestSegmentBefore(t),i=this._list[e].randomAccessPoints;for(;0===i.length&&e>0;)e--,i=this._list[e].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment.js ***!
  \*****************************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e),i.d(e,"default",(function(){return s}));class s{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(t){t.isRAP=!0,this.randomAccessPoints.push(t)}}},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/track-meta.js ***!
  \**************************************************/
/*! exports provided: AudioTrackMeta, VideoTrackMeta */function(t,e,i){"use strict";i.r(e),i.d(e,"AudioTrackMeta",(function(){return s})),i.d(e,"VideoTrackMeta",(function(){return r}));class s{constructor(t){const e={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return t?Object.assign({},e,t):e}destroy(){this.init=null}}class r{constructor(t){const e={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return t?Object.assign({},e,t):e}destroy(){this.init=null,this.sps=null,this.pps=null}}},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/track-sample.js ***!
  \****************************************************/
/*! exports provided: AudioTrackSample, VideoTrackSample */function(t,e,i){"use strict";i.r(e),i.d(e,"AudioTrackSample",(function(){return s})),i.d(e,"VideoTrackSample",(function(){return r}));class s{constructor(t){let e=s.getDefault();return t?Object.assign({},e,t):e}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}class r{constructor(t){let e=r.getDefault();return t?Object.assign({},e,t):e}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);class s{constructor(t){this.configs=Object.assign({},t),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1,this.onSourceOpen=this.onSourceOpen.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onUpdateEnd=this.onUpdateEnd.bind(this),this.onWaiting=this.onWaiting.bind(this)}init(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate),this.container.addEventListener("waiting",this.onWaiting)}onTimeUpdate(){this.emit("TIME_UPDATE",this.container)}onWaiting(){this.emit("WAITING",this.container)}onSourceOpen(){this.addSourceBuffers()}onUpdateEnd(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let t,e=this._context.getInstance("PRE_SOURCE_BUFFER"),i=this._context.getInstance("TRACKS");e=e.sources;let s=!1;for(let r=0,a=Object.keys(e).length;r<a;r++){let a=Object.keys(e)[r];if("audio"===a?t=i.audioTrack:"video"===a&&(t=i.videoTrack),t){let i="audio"===a?21:40;t.meta&&t.meta.refSampleDuration&&(i=t.meta.refSampleDuration),e[a].data.length>=this.preloadTime/i&&(s=!0)}}if(s){if(Object.keys(this.sourceBuffers).length>0)return;for(let t=0,i=Object.keys(e).length;t<i;t++){let i=Object.keys(e)[t],s=e[i],r="video"===i?"video/mp4;codecs="+s.mimetype:"audio/mp4;codecs="+s.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[i]=a,a.addEventListener("updateend",this.onUpdateEnd),this.doAppend()}}}doAppend(){let t=this._context.getInstance("PRE_SOURCE_BUFFER");if(t)for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let i=Object.keys(this.sourceBuffers)[e],s=this.sourceBuffers[i];if(!s.updating){let e=t.sources[i];if(e&&!e.inited)s.appendBuffer(e.init.buffer.buffer),e.inited=!0;else if(e){let t=e.data.shift();t&&s.appendBuffer(t.buffer.buffer)}}}}endOfStream(){const{readyState:t,activeSourceBuffers:e}=this.mediaSource;if("open"===t&&0===e.length)try{this.mediaSource.endOfStream()}catch(t){}}remove(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;for(let i=0;i<Object.keys(this.sourceBuffers).length;i++){let s=this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];s.updating||s.remove(e,t)}}removeBuffers(){const t=[];for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let i,r=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];r.removeEventListener("updateend",this.onUpdateEnd),i=r.updating?new Promise(t=>{const e=function(){let i=3;const a=()=>{r.updating?i>0?(setTimeout(a,200),i--):t():(s.clearBuffer(r),r.addEventListener("updateend",()=>{t()}))};setTimeout(a,200),r.removeEventListener("updateend",e)};r.addEventListener("updateend",e)}):new Promise(t=>{s.clearBuffer(r),r.addEventListener("updateend",()=>{t()})}),t.push(i)}return Promise.all(t)}destroy(){return this.removeBuffers().then(()=>{for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let e=this.sourceBuffers[Object.keys(this.sourceBuffers)[t]];this.mediaSource.removeSourceBuffer(e),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[t]]}this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen),this.endOfStream(),window.URL.revokeObjectURL(this.url),this.url=null,this.configs={},this.container=null,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=1})}static clearBuffer(t){const e=t.buffered;let i=.1;for(let t=0,s=e.length;t<s;t++)i=e.end(t);try{t.remove(0,i)}catch(t){}}}e.default=s},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/buffer.js ***!
  \*********************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);var s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),r=i.n(s);e.default=class{constructor(t){this.buffer=t||new Uint8Array(0)}write(){for(var t=arguments.length,e=Array(t),i=0;i<t;i++)e[i]=arguments[i];e.forEach(t=>{this.buffer=r()(Uint8Array,this.buffer,t)})}static writeUint32(t){return new Uint8Array([t>>24,t>>16&255,t>>8&255,255&t])}static readAsInt(t){let e="";return t.forEach(t=>{e+=function(t){return t.toString(16).padStart(2,"0")}(t)}),parseInt(e,16)}}},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/stream.js ***!
  \*********************************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);class s{constructor(t){if(!(t instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=t,this.dataview=new DataView(t),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(t){this.dataview.position=t}get position(){return this.dataview.position}back(t){this.position-=t}skip(t){let e=Math.floor(t/4),i=t%4;for(let t=0;t<e;t++)s.readByte(this.dataview,4);i>0&&s.readByte(this.dataview,i)}static readByte(t,e,i){let s;switch(e){case 1:s=i?t.getInt8(t.position):t.getUint8(t.position);break;case 2:s=i?t.getInt16(t.position):t.getUint16(t.position);break;case 3:if(i)throw new Error("not supported for readByte 3");s=t.getUint8(t.position)<<16,s|=t.getUint8(t.position+1)<<8,s|=t.getUint8(t.position+2);break;case 4:s=i?t.getInt32(t.position):t.getUint32(t.position);break;case 8:if(i)throw new Error("not supported for readBody 8");s=t.getUint32(t.position)<<32,s|=t.getUint32(t.position+4);break;default:s=""}return t.position+=e,s}readUint8(){return s.readByte(this.dataview,1)}readUint16(){return s.readByte(this.dataview,2)}readUint24(){return s.readByte(this.dataview,3)}readUint32(){return s.readByte(this.dataview,4)}readUint64(){return s.readByte(this.dataview,8)}readInt8(){return s.readByte(this.dataview,1,!0)}readInt16(){return s.readByte(this.dataview,2,!0)}readInt32(){return s.readByte(this.dataview,4,!0)}writeUint32(t){return new Uint8Array([t>>>24&255,t>>>16&255,t>>>8&255,255&t])}}e.default=s},"./src/hls-vod.js":
/*!************************!*\
  !*** ./src/hls-vod.js ***!
  \************************/
/*! exports provided: default */function(t,e,i){"use strict";i.r(e);var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),r=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),a=i(/*! xgplayer-loader */"../xgplayer-loader/index.js"),n=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),o=i(/*! xgplayer-remux/src/mp4/index */"../xgplayer-remux/src/mp4/index.js"),l=i(/*! xgplayer-demux */"../xgplayer-demux/index.js");const d=s.EVENTS.LOADER_EVENTS,h=s.EVENTS.REMUX_EVENTS,u=s.EVENTS.DEMUX_EVENTS,c=s.EVENTS.HLS_EVENTS,f=s.EVENTS.CRYTO_EVENTS,p="HLS_ERROR";e.default=class{constructor(t){this.configs=Object.assign({},t),this.url="",this.baseurl="",this.sequence=0,this._playlist=null,this.retrytimes=this.configs.retrytimes||3,this.container=this.configs.container,this.preloadTime=this.configs.preloadTime||5,this._lastSeekTime=0,this._player=this.configs.player,this.m3u8Text=null}init(){this._context.registry("M3U8_BUFFER",r.XgBuffer),this._tsBuffer=this._context.registry("TS_BUFFER",r.XgBuffer)(),this._tracks=this._context.registry("TRACKS",r.Tracks)(),this._playlist=this._context.registry("PLAYLIST",l.Playlist)({autoclear:!0}),this._presource=this._context.registry("PRE_SOURCE_BUFFER",r.PreSource)(),this._compat=this._context.registry("COMPATIBILITY",n.Compatibility)(),this._context.registry("M3U8_LOADER",a.FetchLoader)({buffer:"M3U8_BUFFER",readtype:1}),this._tsloader=this._context.registry("TS_LOADER",a.FetchLoader)({buffer:"TS_BUFFER",readtype:3}),this._context.registry("TS_DEMUXER",l.TsDemuxer)({inputbuffer:"TS_BUFFER"}),this._context.registry("MP4_REMUXER",o.default),this.mse=this._context.registry("MSE",s.Mse)({container:this.container,preloadTime:this.preloadTime}),this.initEvents()}initEvents(){this.on(d.LOADER_COMPLETE,this._onLoaderCompete.bind(this)),this.on(d.LOADER_ERROR,this._onLoadError.bind(this)),this.on(h.INIT_SEGMENT,this._onInitSegment.bind(this)),this.on(h.MEDIA_SEGMENT,this._onMediaSegment.bind(this)),this.on(u.METADATA_PARSED,this._onMetadataParsed.bind(this)),this.on(u.DEMUX_COMPLETE,this._onDemuxComplete.bind(this)),this.on(u.DEMUX_ERROR,this._onDemuxError.bind(this)),this.on(h.REMUX_ERROR,this._onRemuxError.bind(this)),this.on("TIME_UPDATE",this._onTimeUpdate.bind(this)),this.on("WAITING",this._onWaiting.bind(this))}_onError(t,e,i,s){let r={errorType:t,errorDetails:`[${e}]: ${i.message}`,errorFatal:s};this._player&&this._player.emit(p,r)}_onLoadError(t,e){this._onError(d.LOADER_ERROR,t,e,!0),this.emit(c.RETRY_TIME_EXCEEDED)}_onDemuxError(t,e,i){void 0===i&&(i=!0),this._onError(d.LOADER_ERROR,t,e,i)}_onRemuxError(t,e,i){void 0===i&&(i=!0),this._onError(h.REMUX_ERROR,t,e,i)}_onWaiting(t){let e=!0;for(let t=0;t<Object.keys(this._playlist.list).length;t++)1e3*this.container.currentTime<parseInt(Object.keys(this._playlist.list)[t])&&(e=!1);if(e){let t=this._playlist.getTs(1e3*this.container.currentTime);t?t.downloaded&&(this._player.emit("ended"),this.mse.endOfStream()):(this._player.emit("ended"),this.mse.endOfStream())}}_onTimeUpdate(t){this._preload(t.currentTime)}_onDemuxComplete(){this.emit(h.REMUX_MEDIA)}_onMetadataParsed(t){let e=parseInt(this._playlist.duration);"video"===t?this._tracks.videoTrack.meta.duration=e:"audio"===t&&(this._tracks.audioTrack.meta.duration=e),this.emit(h.REMUX_METADATA,t)}_onMediaSegment(){Object.keys(this.mse.sourceBuffers).length<1&&this.mse.addSourceBuffers(),this.mse.doAppend()}_onInitSegment(){this.mse.addSourceBuffers()}_onLoaderCompete(t){if("M3U8_BUFFER"===t.TAG){this.m3u8Text=t.shift();let e=l.M3U8Parser.parse(this.m3u8Text,this.baseurl);try{this._playlist.pushM3U8(e)}catch(t){this._onError("M3U8_PARSER_ERROR","PLAYLIST",t,!0)}if(this._playlist.encrypt&&this._playlist.encrypt.uri&&!this._playlist.encrypt.key)this._context.registry("DECRYPT_BUFFER",r.XgBuffer)(),this._context.registry("KEY_BUFFER",r.XgBuffer)(),this._tsloader.buffer="DECRYPT_BUFFER",this._keyLoader=this._context.registry("KEY_LOADER",a.FetchLoader)({buffer:"KEY_BUFFER",readtype:3}),this.emitTo("KEY_LOADER",d.LADER_START,this._playlist.encrypt.uri);else{this.preloadTime||(this._playlist.targetduration?(this.preloadTime=this._playlist.targetduration,this.mse.preloadTime=this._playlist.targetduration):(this.preloadTime=5,this.mse.preloadTime=5));let t=this._playlist.getTs();t?(this._playlist.downloading(t.url,!0),this.emitTo("TS_LOADER",d.LADER_START,t.url)):this.retrytimes>0&&(this.retrytimes--,this.emitTo("M3U8_LOADER",d.LADER_START,this.url))}}else if("TS_BUFFER"===t.TAG)this._preload(this.mse.container.currentTime),this._playlist.downloaded(this._tsloader.url,!0),this.emit(u.DEMUX_START,Object.assign({url:this._tsloader.url},this._playlist._ts[this._tsloader.url]));else if("DECRYPT_BUFFER"===t.TAG)this.retrytimes=this.configs.retrytimes||3,this._playlist.downloaded(this._tsloader.url,!0),this.emitTo("CRYPTO",f.START_DECRYPT,Object.assign({url:this._tsloader.url},this._playlist._ts[this._tsloader.url]));else if("KEY_BUFFER"==t.TAG){this.retrytimes=this.configs.retrytimes||3,this._playlist.encrypt.key=t.shift(),this._crypto=this._context.registry("CRYPTO",s.Crypto)({key:this._playlist.encrypt.key,iv:this._playlist.encrypt.ivb,method:this._playlist.encrypt.method,inputbuffer:"DECRYPT_BUFFER",outputbuffer:"TS_BUFFER"}),this._crypto.on(f.DECRYPTED,this._onDcripted.bind(this));let e=this._playlist.getTs();e?(this._playlist.downloading(e.url,!0),this.emitTo("TS_LOADER",d.LADER_START,e.url)):this.retrytimes>0&&(this.retrytimes--,this.emitTo("M3U8_LOADER",d.LADER_START,this.url))}}_onDcripted(){this.emit(u.DEMUX_START)}seek(t){this._lastSeekTime=t,this._tsloader.destroy(),this._tsloader=this._context.registry("TS_LOADER",a.FetchLoader)({buffer:"TS_BUFFER",readtype:3}),this._presource.sources.video&&(this._presource.sources.video.data=[]),this._presource.sources.audio&&(this._presource.sources.audio.data=[]),this._tracks.audioTrack&&(this._tracks.audioTrack.samples=[]),this._tracks.audioTrack&&(this._tracks.videoTrack.samples=[]),this._compat&&this._compat.reset(),this._tsBuffer&&(this._tsBuffer.array=[],this._tsBuffer.length=0,this._tsBuffer.offset=0),this._playlist.clearDownloaded(),this._preload(t)}load(t){this.baseurl=l.M3U8Parser.parseURL(t),this.url=t,this.emitTo("M3U8_LOADER",d.LADER_START,t)}_preload(t){if(this._tsloader.loading)return;let e=this.mse.container;if(e.buffered.length<1){let t=this._playlist.getTs(0);!t||t.downloading||t.downloaded||(this._playlist.downloading(t.url,!0),this.emitTo("TS_LOADER",d.LADER_START,t.url))}else{let i=-1;t||(t=e.buffered.end(0));for(let s=0;s<e.buffered.length;s++)t>=e.buffered.start(s)&&t<e.buffered.end(s)&&(i=e.buffered.end(s));if(i<0){let e=this._playlist.getTs(1e3*t+1);!e||e.downloading||e.downloaded||(this._playlist.downloading(e.url,!0),this.emitTo("TS_LOADER",d.LADER_START,e.url))}else if(i<t+this.preloadTime){let e=this._playlist.getTs(1e3*i+1),s=e?(e.time+e.duration)/1e3:0;for(;e&&e.downloaded&&s<t+this.preloadTime;)s=(e=this._playlist.getTs(1e3*s+1))?(e.time+e.duration)/1e3:0;!e||e.downloading||e.downloaded||(this._playlist.downloading(e.url,!0),this.emitTo("TS_LOADER",d.LADER_START,e.url))}}}destory(){this.configs={},this.url="",this.baseurl="",this.sequence=0,this._playlist=null,this.retrytimes=3,this.container=void 0,this.preloadTime=5,this._lastSeekTime=0,this.m3u8Text=null,this.mse=null,this.off(d.LOADER_COMPLETE,this._onLoaderCompete),this.off(h.INIT_SEGMENT,this._onInitSegment),this.off(h.MEDIA_SEGMENT,this._onMediaSegment),this.off(u.METADATA_PARSED,this._onMetadataParsed),this.off(u.DEMUX_COMPLETE,this._onDemuxComplete),this.off("TIME_UPDATE",this._onTimeUpdate),this.off("WAITING",this._onWaiting)}}},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: HlsVodPlayer */function(t,e,i){"use strict";i.r(e),function(t){i.d(e,"HlsVodPlayer",(function(){return h}));var s=i(/*! xgplayer */"xgplayer"),r=i.n(s),a=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),n=i(/*! ./hls-vod */"./src/hls-vod.js");const o=a.EVENTS.HlsAllowedEvents,l=a.EVENTS.REMUX_EVENTS,d=a.EVENTS.HLS_EVENTS;class h extends r.a{constructor(t){super(t),this.hlsOps={},this.util=r.a.util,this.util.deepCopy(this.hlsOps,t),this._context=new a.Context(o)}get currentTime(){return super.currentTime}set currentTime(t){t=parseFloat(t),super.currentTime=parseInt(t),this._context&&this.__core__.seek(t)}_initEvents(){this.__core__.once(l.INIT_SEGMENT,()=>{const t=this._context.getInstance("MSE");super.start(t.url)}),this.__core__.once(d.RETRY_TIME_EXCEEDED,()=>{this.emit("error",new r.a.Errors("network",this.config.url))}),this.once("canplay",()=>{this.play()})}_initSrcChangeHandler(){let t=this;Object.defineProperty(this,"src",{get:()=>t.currentSrc,set(e){t.config.url=e,t.paused?t.start(e):(t.pause(),t.once("pause",()=>{t.start(e)}),t.once("canplay",()=>{t.play()})),t.once("canplay",()=>{t.currentTime=0})},configurable:!0})}start(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.config.url;t&&(this.__core__=this._context.registry("HLS_LIVE_CONTROLLER",n.default)({player:this,container:this.video}),this._context.init(),this.__core__.load(t),this._initEvents(),this._initSrcChangeHandler())}destroy(){this._context.destroy(),super.destroy()}}t.exports=h}.call(this,i(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */"../../node_modules/webpack/buildin/harmony-module.js")(t))},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(t,e,i){t.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!*************************!*\
  !*** external "Player" ***!
  \*************************/
/*! no static exports found */function(t,e){t.exports=window.Player}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,