window.HlsVodPlayer=function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../../node_modules/events/events.js":
/*!*****************************************************************************************!*\
  !*** /Users/leonardo/Documents/front-end/player/xgplayer/node_modules/events/events.js ***!
  \*****************************************************************************************/
/*! no static exports found */function(e,t,i){"use strict";var n,r="object"==typeof Reflect?Reflect:null,s=r&&"function"==typeof r.apply?r.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};n=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var u=10;function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function c(e,t,i,n){var r,s,a,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),s=e._events),a=s[t]),void 0===a)a=s[t]=i,++e._eventsCount;else if("function"==typeof a?a=s[t]=n?[i,a]:[a,i]:n?a.unshift(i):a.push(i),(r=l(e))>0&&a.length>r&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,o=u,console&&console.warn&&console.warn(o)}return e}function f(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,s(this.listener,this.target,e))}function d(e,t,i){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=f.bind(n);return r.listener=i,n.wrapFn=r,r}function h(e,t,i){var n=e._events;if(void 0===n)return[];var r=n[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):y(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function y(e,t){for(var i=new Array(t),n=0;n<t;++n)i[n]=e[n];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var n="error"===e,r=this._events;if(void 0!==r)n=n&&void 0===r.error;else if(!n)return!1;if(n){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var u=r[e];if(void 0===u)return!1;if("function"==typeof u)s(u,this,t);else{var l=u.length,c=y(u,l);for(i=0;i<l;++i)s(c[i],this,t)}return!0},o.prototype.addListener=function(e,t){return c(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return c(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,d(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,d(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,n,r,s,a;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(n=this._events))return this;if(void 0===(i=n[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(r=-1,s=i.length-1;s>=0;s--)if(i[s]===t||i[s].listener===t){a=i[s].listener,r=s;break}if(r<0)return this;0===r?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,r),1===i.length&&(n[e]=i[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,i,n;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,s=Object.keys(i);for(n=0;n<s.length;++n)"removeListener"!==(r=s[n])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},o.prototype.listeners=function(e){return h(this,e,!0)},o.prototype.rawListeners=function(e){return h(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},"../xgplayer-buffer/index.js":
/*!***********************************!*\
  !*** ../xgplayer-buffer/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Track:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:i(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").default}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
  !*** ../xgplayer-buffer/src/buffer.js ***!
  \****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}t.XgBuffer=function(){function e(t){r(this,e),this.length=t||0,this.historyLen=t||0,this.array=[],this.offset=0}return n(e,[{key:"push",value:function(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}},{key:"shift",value:function(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let n=this.array[0].slice(this.offset,this.offset+e);t.set(n,i),this.offset+=e,this.length-=e,e=0;break}{let n=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=n,this.length-=n,e-=n}}return t}},{key:"clear",value:function(){this.array=[],this.length=0,this.offset=0}},{key:"destroy",value:function(){this.clear(),this.historyLen=0}},{key:"_shiftBuffer",value:function(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}},{key:"toInt",value:function(e,t){let i=0,n=this.offset+e;for(;n<this.offset+t+e;)n<this.array[0].length?i=256*i+this.array[0][n]:this.array[1]&&(i=256*i+this.array[1][n-this.array[0].length]),n++;return i}}]),e}(),t.RemuxBuffer=function(){function e(){r(this,e),this.video=[],this.audio=[]}return n(e,[{key:"destroy",value:function(){this.video=[],this.audio=[]}}]),e}()},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}let s=function e(){r(this,e),this.mimetype="",this.init=null,this.data=[]},a=function(){function e(){r(this,e),this.sources={}}return n(e,[{key:"getSource",value:function(e){return this.sources[e]}},{key:"createSource",value:function(e){return this.sources[e]=new s,this.sources[e]}},{key:"clear",value:function(){this.sources={}}},{key:"destroy",value:function(){this.sources={}}}]),e}();t.default=a},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/track.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}let o=function(){function e(){a(this,e),this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}return n(e,[{key:"reset",value:function(){this.sequenceNumber=0,this.samples=[],this.length=0}},{key:"distroy",value:function(){this.reset(),this.id=-1}}]),e}();t.default=o;t.AudioTrack=function(e){function t(){a(this,t);var e=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.TAG="AudioTrack",e.type="audio",e}return s(t,e),t}(o),t.VideoTrack=function(e){function t(){a(this,t);var e=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.TAG="VideoTrack",e.type="video",e.dropped=0,e}return s(t,e),n(t,[{key:"reset",value:function(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}}]),t}(o),t.Tracks=function(){function e(){a(this,e),this.audioTrack=null,this.videoTrack=null}return n(e,[{key:"destroy",value:function(){this.audioTrack=null,this.videoTrack=null}}]),e}()},"../xgplayer-codec/index.js":
/*!**********************************!*\
  !*** ../xgplayer-codec/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Nalunit:i(/*! ./src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js").default,SpsParser:i(/*! ./src/h264/nalunit/sps */"../xgplayer-codec/src/h264/nalunit/sps.js").default,Compatibility:i(/*! ./src/compatibility */"../xgplayer-codec/src/compatibility.js").default}},"../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
  !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return n(e,null,[{key:"getSilentFrame",value:function(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}]),e}();t.default=r},"../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
  !*** ../xgplayer-codec/src/compatibility.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! ./aac/aac-helper */"../xgplayer-codec/src/aac/aac-helper.js"),o=(n=a)&&n.__esModule?n:{default:n};const{REMUX_EVENTS:u,DEMUX_EVENTS:l}=s.EVENTS;let c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[],this._videoLargeGap=0,this._audioLargeGap=0}return r(e,[{key:"init",value:function(){this.before(u.REMUX_MEDIA,this.doFix.bind(this))}},{key:"reset",value:function(){this.nextAudioDts=null,this.nextVideoDts=null,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.filledAudioSamples=[],this.filledVideoSamples=[]}},{key:"doFix",value:function(){const{isFirstAudioSamples:t,isFirstVideoSamples:i}=this.getFirstSample();this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples);const{changed:n,changedIdx:r}=e.detactChangeStream(this.videoTrack.samples);n&&!t?this.fixChangeStreamVideo(r):this.doFixVideo(i);const{changed:s,changedIdx:a}=e.detactChangeStream(this.audioTrack.samples);s?this.fixChangeStreamAudio(a):this.doFixAudio(t)}},{key:"doFixVideo",value:function(t,i){let{samples:n,meta:r}=this.videoTrack;if(r.frameRate&&!1===r.frameRate.fixed)return;if(!n||!n.length||!this._firstVideoSample)return;const s=n[0],a=n.length;this._videoLargeGap>0&&e.doFixLargeGap(n,this._videoLargeGap),s.dts!==this._firstVideoSample.dts&&(i||e.detectLargeGap(this.nextVideoDts,s))&&(i&&(this.nextVideoDts=i),this._videoLargeGap=this.nextVideoDts-s.dts,e.doFixLargeGap(n,this._videoLargeGap));const o=s.dts;if(t&&this._firstAudioSample){const e=this._firstVideoSample.dts,t=e-this._firstAudioSample.dts;if(t>2*r.refSampleDuration){const i=Math.floor(t/r.refSampleDuration);for(let t=0;t<i;t++){const i=Object.assign({},s);i.dts=e-(t+1)*r.refSampleDuration,i.pts=i.dts+i.cts,n.unshift(i),this.filledVideoSamples.push({dts:i.dts,size:i.data.byteLength})}}}let u;if(this.nextVideoDts){u=o-this.nextVideoDts;const t=Math.abs(u);if(u>2*r.refSampleDuration){const e=Math.floor(u/r.refSampleDuration);for(let t=0;t<e;t++){const e=Object.assign({},n[0]),i=o-(t+1)*r.refSampleDuration;e.dts=i>this.nextVideoDts?i:this.nextVideoDts,e.pts=e.dts+e.cts,this.videoTrack.samples.unshift(e),this.filledVideoSamples.push({dts:e.dts,size:e.data.byteLength})}}else t<=r.refSampleDuration&&t>0?(n[0].dts=this.nextVideoDts,n[0].originDts=n[0].dts,n[0].cts=void 0!==n[0].cts?n[0].cts:n[0].pts-n[0].dts,n[0].pts=n[0].dts+n[0].cts):u<0&&e.doFixLargeGap(n,-1*u)}const l=n[n.length-1].dts,c=n.length>=2?l-n[n.length-2].dts:r.refSampleDuration;this.lastVideoSamplesLen=a,this.nextVideoDts=l+c,this.lastVideoDts=l;for(let e=0,t=n.length;e<t;e++){const t=n[e],i=n[e+1];if(!i)break;const s=i.dts-t.dts;if(s>2*r.refSampleDuration){let a=Math.floor(s/r.refSampleDuration),o=0;for(;o<a;){const s=Object.assign({},i);s.dts=t.dts+(o+1)*r.refSampleDuration,s.pts=s.dts+s.cts,s<i.dts&&(n.splice(e,0,s),this.filledVideoSamples.push({dts:s.dts,size:s.data.byteLength})),o++,e++}}}this.videoTrack.samples=n}},{key:"doFixAudio",value:function(t,i){let{samples:n,meta:r}=this.audioTrack;if(!n||!n.length)return;const s=n.length,a=o.default.getSilentFrame(r.codec,r.channelCount),u=this._firstAudioSample,l=n[0];if(this._audioLargeGap>0&&e.doFixLargeGap(n,this._audioLargeGap),l.dts!==this._firstAudioSample.dts&&(i||e.detectLargeGap(this.nextAudioDts,l))&&(i&&(this.nextAudioDts=i),this._audioLargeGap=this.nextAudioDts-l.dts,e.doFixLargeGap(n,this._audioLargeGap)),this._firstVideoSample&&t){const e=this._firstVideoSample.pts?this._firstVideoSample.pts:this._firstVideoSample.dts+this._firstVideoSample.cts;if(u.dts-e>r.refSampleDuration){const t=Math.floor((u.dts-e)/r.refSampleDuration);for(let e=0;e<t;e++){const t={data:a,datasize:a.byteLength,dts:u.dts-(e+1)*r.refSampleDuration,filtered:0};n.unshift(t),this.filledAudioSamples.push({dts:t.dts,size:t.data.byteLength})}}}let c;const f=n[0].dts;if(this.nextAudioDts){c=f-this.nextAudioDts;const t=Math.abs(c);if(t>r.refSampleDuration&&1===s&&1===this.lastAudioSamplesLen&&(r.refSampleDurationFixed=void 0),c>2*r.refSampleDuration)if(1===s&&1===this.lastAudioSamplesLen)r.refSampleDurationFixed=void 0!==r.refSampleDurationFixed?r.refSampleDurationFixed+c:r.refSampleDuration+c;else{const e=Math.floor(c/r.refSampleDuration);for(let t=0;t<e;t++){const e=f-(t+1)*r.refSampleDuration,i=Object.assign({},n[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:i.dts,size:i.data.byteLength}),this.audioTrack.samples.unshift(i)}}else t<=r.refSampleDuration&&t>0?(n[0].dts=this.nextAudioDts,n[0].pts=this.nextAudioDts):c<0&&e.doFixLargeGap(n,-1*c)}const d=n[n.length-1].dts,h=n.length>=2?d-n[n.length-2].dts:r.refSampleDuration;this.lastAudioSamplesLen=s,this.nextAudioDts=r.refSampleDurationFixed?d+r.refSampleDurationFixed:d+h,this.lastAudioDts=d;for(let e=0,t=n.length;e<t;e++){const t=n[e],i=n[e+1];if(!i)break;const r=i.dts-t.dts;n[e].duration=r}this.audioTrack.samples=e.sortAudioSamples(n)}},{key:"fixChangeStreamVideo",value:function(e){const{samples:t,meta:i}=this.videoTrack,n=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(n-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixVideo(!1);const s=t.slice(0,e),a=t.slice(e),o=t[0],u=a[0].dts-o.dts,l=o.options&&o.options.start+u?o.options.start:null;this.videoTrack.samples=t.slice(0,e),this.doFixVideo(!1),this.videoTrack.samples=t.slice(e),this.doFixVideo(!1,l),this.videoTrack.samples=s.concat(a)}},{key:"fixChangeStreamAudio",value:function(e){const{samples:t,meta:i}=this.audioTrack,n=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(n-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixAudio(!1);const s=t.slice(0,e),a=t.slice(e),o=t[0],u=a[0].dts-o.dts,l=o.options&&o.options.start+u?o.options.start:null;this.audioTrack.samples=s,this.doFixAudio(!1),this.audioTrack.samples=a,this.doFixAudio(!1,l),this.audioTrack.samples=s.concat(a)}},{key:"getFirstSample",value:function(){let{samples:t}=this.videoTrack,{samples:i}=this.audioTrack,n=!1,r=!1;return!this._firstVideoSample&&t.length&&(this._firstVideoSample=e.findFirstVideoSample(t),n=!0),!this._firstAudioSample&&i.length&&(this._firstAudioSample=e.findFirstAudioSample(i),r=!0),{isFirstVideoSamples:n,isFirstAudioSamples:r}}},{key:"fixRefSampleDuration",value:function(e,t){const i="video"===e.type,n=i?this.allVideoSamplesCount:this.allAudioSamplesCount,r=i?this._firstVideoSample.dts:this._firstAudioSample.dts,s=i?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration)){if(t.length>=1){const i=t[t.length-1].dts;e.refSampleDuration=Math.floor((i-r)/(n+s-1))}}else if(e.refSampleDuration&&t.length>=5){const i=(t[t.length-1].dts-t[0].dts)/(t.length-1);e.refSampleDuration=Math.floor(Math.abs(e.refSampleDuration-i)<=5?e.refSampleDuration:i)}}},{key:"recordSamplesCount",value:function(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}},{key:"removeInvalidSamples",value:function(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter(e=>e.dts>=t.dts&&(void 0===this.lastAudioDts||e.dts>this.lastAudioDts)),this.videoTrack.samples=this.videoTrack.samples.filter(t=>t.dts>=e.dts&&(void 0===this.lastVideoDts||t.dts>this.lastVideoDts))}},{key:"getStreamChangeStart",value:function(e){return e.options&&e.options.start?e.options.start-this.dtsBase:1/0}},{key:"tracks",get:function(){return this._context.getInstance("TRACKS")}},{key:"audioTrack",get:function(){return this.tracks?this.tracks.audioTrack:null}},{key:"videoTrack",get:function(){return this.tracks?this.tracks.videoTrack:null}},{key:"dtsBase",get:function(){const e=this._context.getInstance("MP4_REMUXER");return e?e._dtsBase:0}}],[{key:"sortAudioSamples",value:function(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}},{key:"findFirstAudioSample",value:function(t){return t&&0!==t.length?e.sortAudioSamples(t)[0]:null}},{key:"findFirstVideoSample",value:function(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,i=t.length;e<i;e++)if(t[e].isKeyframe)return t[e]}},{key:"detectLargeGap",value:function(e,t){if(null===e)return;const i=t.dts||0,n=e-i>=1e3||i-e>=1e3,r=t.options&&t.options.discontinue;return n||r}},{key:"doFixLargeGap",value:function(e,t){for(let i=0,n=e.length;i<n;i++){const n=e[i];n.dts+=t,n.pts&&(n.pts+=t)}}},{key:"detactChangeStream",value:function(e){let t=!1,i=-1;for(let n=0,r=e.length;n<r;n++)if(e[n].options&&e[n].options.meta){t=!0,i=n;break}return{changed:t,changedIdx:i}}}]),e}();t.default=c},"../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.TAG="Golomb",this._buffer=t,this._bufferIndex=0,this._totalBytes=t.byteLength,this._totalBits=8*t.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}return n(e,[{key:"destroy",value:function(){this._buffer=null}},{key:"_fillCurrentWord",value:function(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}},{key:"readBits",value:function(e){let t=Math.min(this._currentWordBitsLeft,e),i=this._currentWord>>>32-t;if(e>32)throw new Error("Cannot read more than 32 bits at a time");return this._currentWordBitsLeft-=t,this._currentWordBitsLeft>0?this._currentWord<<=t:this._totalBytes-this._bufferIndex>0&&this._fillCurrentWord(),(t=e-t)>0&&this._currentWordBitsLeft?i<<t|this.readBits(t):i}},{key:"readBool",value:function(){return 1===this.readBits(1)}},{key:"readByte",value:function(){return this.readBits(8)}},{key:"_skipLeadingZero",value:function(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}},{key:"readUEG",value:function(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}},{key:"readSEG",value:function(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}]),e}();t.default=r},"../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),s=i(/*! ./sps */"../xgplayer-codec/src/h264/nalunit/sps.js"),a=(n=s)&&n.__esModule?n:{default:n};let o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"getNalunits",value:function(t){if(t.length-t.position<4)return[];let i=t.dataview,n=t.position;return 1===i.getInt32(n)||0===i.getInt16(n)&&1===i.getInt8(n+2)?e.getAnnexbNals(t):e.getAvccNals(t)}},{key:"getAnnexbNals",value:function(t){let i=[],n=e.getHeaderPositionAnnexB(t),r=n.pos,s=r;for(;r<t.length-4;){let a=t.buffer.slice(r,r+n.headerLength);n.pos===t.position&&t.skip(n.headerLength),s=(n=e.getHeaderPositionAnnexB(t)).pos;let o={header:a,body:new Uint8Array(t.buffer.slice(r+a.byteLength,s))};e.analyseNal(o),i.push(o),t.skip(s-t.position),r=s}return i}},{key:"getAvccNals",value:function(t){let i=[];for(;t.position<t.length-4;){let n=t.dataview.getInt32(t.position);if(!(t.length-t.position>=n))break;{let r=t.buffer.slice(t.position,t.position+4);t.skip(4);let s=t.buffer.slice(t.position,t.position+n);t.skip(n);let a={header:r,body:s};e.analyseNal(a),i.push(a)}}return i}},{key:"analyseNal",value:function(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=a.default.parseSPS(e.body);break;case 8:e.pps=!0}}},{key:"getHeaderPositionAnnexB",value:function(e){let t=e.position,i=0;for(;3!==i&&4!==i&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?i=4:1===e.dataview.getInt8(t+2)?i=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(i=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?i=3:t=e.length)),{pos:t,headerLength:i}}},{key:"getAvcc",value:function(e,t){let i=new Uint8Array(e.byteLength+t.byteLength+11);i[0]=1,i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=255,i[5]=225;let n=6;return i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),n),n+=2,i.set(e,n),i[n+=e.byteLength]=1,n++,i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),n),n+=2,i.set(t,n),i}}]),e}();t.default=o},"../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),s=i(/*! ./golomb */"../xgplayer-codec/src/h264/nalunit/golomb.js"),a=(n=s)&&n.__esModule?n:{default:n};let o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"_ebsp2rbsp",value:function(e){let t=e,i=t.byteLength,n=new Uint8Array(i),r=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(n[r]=t[e],r++);return new Uint8Array(n.buffer,0,r)}},{key:"parseSPS",value:function(t){let i=e._ebsp2rbsp(t),n=new a.default(i);n.readByte();let r=n.readByte();n.readByte();let s=n.readByte();n.readUEG();let o=e.getProfileString(r),u=e.getLevelString(s),l=1,c=420,f=[0,420,422,444],d=8;if((100===r||110===r||122===r||244===r||44===r||83===r||86===r||118===r||128===r||138===r||144===r)&&(3===(l=n.readUEG())&&n.readBits(1),l<=3&&(c=f[l]),d=n.readUEG()+8,n.readUEG(),n.readBits(1),n.readBool())){let t=3!==l?8:12;for(let i=0;i<t;i++)n.readBool()&&(i<6?e._skipScalingList(n,16):e._skipScalingList(n,64))}n.readUEG();let h=n.readUEG();if(0===h)n.readUEG();else if(1===h){n.readBits(1),n.readSEG(),n.readSEG();let e=n.readUEG();for(let t=0;t<e;t++)n.readSEG()}n.readUEG(),n.readBits(1);let p=n.readUEG(),y=n.readUEG(),m=n.readBits(1);0===m&&n.readBits(1),n.readBits(1);let g=0,v=0,_=0,b=0;n.readBool()&&(g=n.readUEG(),v=n.readUEG(),_=n.readUEG(),b=n.readUEG());let E=1,k=1,T=0,w=!0,x=0,A=0;if(n.readBool()){if(n.readBool()){let e=n.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],i=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(E=t[e-1],k=i[e-1]):255===e&&(E=n.readByte()<<8|n.readByte(),k=n.readByte()<<8|n.readByte())}if(n.readBool()&&n.readBool(),n.readBool()&&(n.readBits(4),n.readBool()&&n.readBits(24)),n.readBool()&&(n.readUEG(),n.readUEG()),n.readBool()){let e=n.readBits(32),t=n.readBits(32);w=n.readBool(),T=(x=t)/(A=2*e)}}let S=1;1===E&&1===k||(S=E/k);let R=0,O=0;if(0===l)R=1,O=2-m;else{R=3===l?1:2,O=(1===l?2:1)*(2-m)}let D=16*(p+1),U=16*(y+1)*(2-m);D-=(g+v)*R,U-=(_+b)*O;let j=Math.ceil(D*S);return n.destroy(),n=null,{profile_string:o,level_string:u,bit_depth:d,chroma_format:c,chroma_format_string:e.getChromaFormatString(c),frame_rate:{fixed:w,fps:T,fps_den:A,fps_num:x},par_ratio:{width:E,height:k},codec_size:{width:D,height:U},present_size:{width:j,height:U}}}},{key:"_skipScalingList",value:function(e,t){let i=8,n=8,r=0;for(let s=0;s<t;s++)0!==n&&(n=(i+(r=e.readSEG())+256)%256),i=0===n?i:n}},{key:"getProfileString",value:function(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}},{key:"getLevelString",value:function(e){return(e/10).toFixed(1)}},{key:"getChromaFormatString",value:function(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}},{key:"toVideoMeta",value:function(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},t.frameRate=e.frame_rate;let i=t.frameRate.fps_den,n=t.frameRate.fps_num;return t.refSampleDuration=Math.floor(t.timescale*(i/n)),t}}]),e}();t.default=o},"../xgplayer-demux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-demux/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={M3U8Parser:i(/*! ./src/hls/demuxer/m3u8parser */"../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,TsDemuxer:i(/*! ./src/hls/demuxer/ts */"../xgplayer-demux/src/hls/demuxer/ts.js").default,Playlist:i(/*! ./src/hls/playlist */"../xgplayer-demux/src/hls/playlist.js").default,FlvDemuxer:i(/*! ./src/flv/index */"../xgplayer-demux/src/flv/index.js").default}},"../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const s={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};let a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.offset=0,this.readOffset=this.offset}return n(e,[{key:"resolve",value:function(e,t){if(t<3)throw new Error("not enough data for metainfo");const i={},n=this.parseValue(e),r=this.parseValue(e,t-n.bodySize);return i[n.data]=r.data,this.resetStatus(),i}},{key:"resetStatus",value:function(){this.offset=0,this.readOffset=this.offset}},{key:"parseString",value:function(e){const t=new DataView(e,this.readOffset).getUint16(0,!r.isLe);let i="";i=t>0?r.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let n=t+2;return this.readOffset+=n,{data:i,bodySize:t+2}}},{key:"parseDate",value:function(e,t){const i=new DataView(e,this.readOffset,t);let n=i.getFloat64(0,!r.isLe);return n+=60*i.getInt16(8,!r.isLe)*1e3,this.readOffset+=10,{data:new Date(n),bodySize:10}}},{key:"parseObject",value:function(e,t){const i=this.parseString(e,t),n=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:n.data},bodySize:i.bodySize+n.bodySize,isObjEnd:n.isObjEnd}}},{key:"parseLongString",value:function(e){const t=new DataView(e,this.readOffset).getUint32(0,!r.isLe);let i="";return i=t>0?r.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}},{key:"parseValue",value:function(e,t){let i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:n,BOOLEAN:a,STRING:o,OBJECT:u,MIX_ARRAY:l,OBJECT_END:c,STRICT_ARRAY:f,DATE:d,LONE_STRING:h}=s,p=new DataView(i,this.readOffset,t);let y=!1;const m=p.getUint8(0);let g=1;this.readOffset+=1;let v=null;switch(m){case n:v=p.getFloat64(1,!r.isLe),this.readOffset+=8,g+=8;break;case a:v=!!p.getUint8(1),this.readOffset+=1,g+=1;break;case o:{const e=this.parseString(i);v=e.data,g+=e.bodySize;break}case u:{v={};let e=0;for(16777215&p.getUint32(t-4,!r.isLe)&&(e=3);g<t-4;){const n=this.parseObject(i,t-g-e);if(n.isObjectEnd)break;v[n.data.name]=n.data.value,g+=n.bodySize}if(g<=t-3){9===(16777215&p.getUint32(g-1,!r.isLe))&&(this.readOffset+=3,g+=3)}break}case l:{v={},g+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!r.isLe))&&(e=3);g<t-8;){const n=this.parseObject(i,t-g-e);if(n.isObjectEnd)break;v[n.data.name]=n.data.value,g+=n.bodySize}if(g<=t-3){9===(16777215&p.getUint32(g-1,!r.isLe))&&(g+=3,this.readOffset+=3)}break}case c:v=null,y=!0;break;case f:{v=[];const e=p.getUint32(1,!r.isLe);g+=4,this.readOffset+=4;for(let n=0;n<e;n++){const e=this.parseValue(i,t-g);v.push(e.data),g+=e.bodySize}break}case d:{const e=this.parseDate(i,t-1);v=e.data,g+=e.bodySize;break}case h:{const e=this.parseLongString(i,t-1);v=e.data,g+=e.bodySize;break}default:g=t}return{data:v,bodySize:g,isObjEnd:y}}}]),e}();t.default=a},"../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
  !*** ../xgplayer-demux/src/flv/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),o=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),u=i(/*! ./amf-parser */"../xgplayer-demux/src/flv/amf-parser.js"),l=(n=u)&&n.__esModule?n:{default:n};const c=s.EVENTS.DEMUX_EVENTS;let f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}return r(e,[{key:"init",value:function(){this.on(c.DEMUX_START,this.doParseFlv.bind(this))}},{key:"doParseFlv",value:function(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e,t=1e5;do{e=this._parseFlvTag()}while(e&&t-- >0);this.emit(c.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}},{key:"parseFlvHeader",value:function(t){if(e.isFlvFile(t)){this._firstFragmentLoaded=!0;const i=e.getPlayType(t[4]);i.hasVideo&&this.initVideoTrack(),i.hasAudio&&this.initAudioTrack()}else this.emit(c.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}},{key:"initVideoTrack",value:function(){this._trackNum++;let e=new o.VideoTrack;e.meta=new s.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}},{key:"initAudioTrack",value:function(){this._trackNum++;let e=new o.AudioTrack;e.meta=new s.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}},{key:"_parseFlvTag",value:function(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}},{key:"_parseFlvTagHeader",value:function(){let e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.emit(c.DEMUX_ERROR,this.TAG,new Error("tagType "+t.tagType),!1),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let n=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(n+=16777216*r),t.dts=n,this.loaderBuffer.shift(3),t}},{key:"_processChunk",value:function(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}},{key:"_parseScriptData",value:function(e){let t=this.tracks.audioTrack,i=this.tracks.videoTrack,n=this.loaderBuffer.shift(e.datasize);const r=(new l.default).resolve(n,n.length),s=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=s.duration,this._context.mediaInfo.hasVideo=s.hasVideo,this._context.mediaInfo.hsaAudio=s.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(c.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(s.audiosamplerate&&(e.sampleRate=s.audiosamplerate),s.audiochannels&&(e.channelCount=s.audiochannels),s.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){let e=i.meta;if("number"==typeof s.framerate){let t=Math.floor(1e3*s.framerate);if(t>0){let i=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=i,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}},{key:"_aacSequenceHeaderParser",value:function(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.originObjectType=t.objectType,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let i,n,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,n=new Array(4),i=a-3):(t.objectType=2,n=new Array(2),i=a):-1!==r.indexOf("android")||"safari"===s.sniffer.browser?(t.objectType=2,n=new Array(2),i=a):(t.objectType=5,i=t.sampleRateIndex,n=new Array(4),t.sampleRateIndex>=6?i=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,n=new Array(2),i=t.sampleRateIndex)),n[0]=t.objectType<<3,n[0]|=(15&t.sampleRateIndex)>>>1,n[1]=(15&t.sampleRateIndex)<<7,n[1]|=(15&t.channelCount)<<3,5===t.objectType&&(n[1]|=(15&i)>>>1,n[2]=(1&i)<<7,n[2]|=8,n[3]=0),t.config=n,t}},{key:"_parseAACData",value:function(e){let t=this.tracks.audioTrack;if(!t)return;let i=t.meta;i||(t.meta=new s.AudioTrackMeta,i=t.meta);let n=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let r=(240&n)>>>4;t.format=r,10!==r&&this.emit(c.DEMUX_ERROR,new Error(`invalid audio format: ${r}`)),10!==r||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(n),i.sampleRateIndex=(12&n)>>>2,i.frameLenth=(2&n)>>>1,i.channelCount=1&n,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));let a=i.audioSampleRate,o=i.sampleRateIndex,u=i.refSampleDuration;delete e.tagType;let l=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);a=t.audiosamplerate||i.audioSampleRate,o=t.sampleRateIndex||i.sampleRateIndex,u=Math.floor(1024/a*i.timescale),i.channelCount=t.channelCount,i.sampleRate=a,i.sampleRateIndex=o,i.refSampleDuration=u,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=t.config,i.objectType=t.objectType,i.originObjectType=t.originObjectType;const n=this._context.mediaInfo.audio;n.codec=t.codec,n.channelCount=t.channelCount,n.sampleRate=a,n.sampleRateIndex=t.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(c.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&(this.emit(c.METADATA_PARSED,"audio"),this.emit(c.AUDIO_METADATA_CHANGE)),this._hasAudioSequence=!0,this._metaChange=!0}else this._metaChange&&(e.options={meta:t.meta},this._metaChange=!1),e.data=e.data.slice(1,e.data.length),t.samples.push(e);l||this.emit(c.DEMUX_ERROR,this.TAG,new Error("TAG length error at "+e.datasize),!1)}},{key:"_parseHevcData",value:function(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.emit(c.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);let t={},i=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>i;){let n=e.data.slice(Number.parseInt(i),4+i);t.size=n[3],t.size+=256*n[2],t.size+=256*n[1]*256,t.size+=256*n[0]*256*256,i+=4,t.data=e.data.slice(Number.parseInt(i),t.size+i),i+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(c.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(c.METADATA_PARSED,"video"):this.emit(c.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1))}else if(7===i){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let i=0;i<4;i++)e=256*e+t[i];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType){this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(c.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&(this.emit(c.METADATA_PARSED,"audio"),this.emit(c.VIDEO_METADATA_CHANGE)),this._hasVideoSequence=!0),this._metaChange=!0}else{if(!this._datasizeValidator(e.datasize))return void this.emit(c.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);this._metaChange&&(e.options={meta:Object.assign({},this.tracks.videoTrack.meta)},this._metaChange=!1),this.tracks.videoTrack.samples.push(e)}}else this.emit(c.DEMUX_ERROR,this.TAG,new Error(`video codeid is ${i}`),!1),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.emit(c.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1),this.tracks.videoTrack.samples.push(e),this.emit(c.DEMUX_COMPLETE);delete e.tagType}},{key:"_avcSequenceHeaderParser",value:function(e){let t=this.tracks.videoTrack;if(!t)return;let i=0;t.meta||(t.meta=new s.VideoTrackMeta);let n=t.meta;n.configurationVersion=e[0],n.avcProfileIndication=e[1],n.profileCompatibility=e[2],n.avcLevelIndication=e[3]/10,n.nalUnitLength=1+(3&e[4]);let r=31&e[5];i=6;let o={};for(let t=0;t<r;t++){let t=255*e[i]+e[i+1];i+=2;let r=new Uint8Array(t);for(let n=0;n<t;n++)r[n]=e[i+n];let s="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),s+=t}n.codec=s,i+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let u=e[i];i++;for(let t=0;t<u;t++){let t=255*e[i]+e[i+1];i+=2;let n=new Uint8Array(t);for(let r=0;r<t;r++)n[r]=e[i+r];i+=t,this.tracks.videoTrack.meta.pps=n}Object.assign(n,a.SpsParser.toVideoMeta(o));const l=this._context.mediaInfo.video;l.codec=n.codec,l.profile=n.profile,l.level=n.level,l.chromaFormat=n.chromaFormat,l.frameRate=n.frameRate,l.parRatio=n.parRatio,l.width=l.width===n.presentWidth?l.width:n.presentWidth,l.height=l.height===n.presentHeight?l.width:n.presentHeight,n.duration=this._context.mediaInfo.duration*n.timescale,n.avcc=new Uint8Array(e.length),n.avcc.set(e),t.meta=n}},{key:"_switchAudioSampleRate",value:function(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}},{key:"_switchAudioSamplingFrequency",value:function(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}},{key:"_switchAudioChannel",value:function(e){return[1,2][1&e]}},{key:"_datasizeValidator",value:function(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}},{key:"loaderBuffer",get:function(){const e=this._context.getInstance("LOADER_BUFFER");if(e)return e;this.emit(c.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}},{key:"tracks",get:function(){return this._context.getInstance("TRACKS")}},{key:"logger",get:function(){return this._context.getInstance("LOGGER")}}],[{key:"isFlvFile",value:function(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}},{key:"getPlayType",value:function(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}}]),e}();t.default=f},"../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return n(e,null,[{key:"parse",value:function(t){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n={duration:0};if(!t||!t.split)return;let r=t.split(/\r|\n/),s=(r=r.filter(e=>e)).shift();if(!s.match("#EXTM3U"))throw new Error('Invalid m3u8 file: not "#EXTM3U"');for(s=r.shift();s;){let t=s.match(/#(.[A-Z|-]*):(.*)/),a=s.match(/#(.[A-Z|-]*)/);if(a&&t&&t.length>2)switch(t[1]){case"EXT-X-VERSION":n.version=parseInt(t[2]);break;case"EXT-X-MEDIA-SEQUENCE":n.sequence=parseInt(t[2]);break;case"EXT-X-TARGETDURATION":n.targetduration=parseFloat(t[2]);break;case"EXTINF":e.parseFrag(t,r,n,i);break;case"EXT-X-KEY":e.parseDecrypt(t[2],n)}if(a&&a.length>1)switch(a[1]){case"EXT-X-DISCONTINUITY":let t=(s=r.shift()).match(/#(.[A-Z|-]*):(.*)/);t.length>2&&"EXTINF"===t[1]&&e.parseFrag(t,r,n,i,!0)}s=r.shift()}return n}},{key:"parseFrag",value:function(e,t,i,n,r){i.frags||(i.frags=[]);let s={start:i.duration,duration:1e3*parseFloat(e[2])};i.duration+=s.duration;let a=t.shift();a.match(/#(.*):(.*)/)&&(a=t.shift()),a.length>0&&"/"===a.charAt(0)&&n.match(/.*\/\/.*\.\w+/g)&&(n=n.match(/.*\/\/.*\.\w+/g)[0]),a.match(/.*:\/\/.*/)?s.url=a:s.url=n+a,s.discontinue=r,i.frags.push(s)}},{key:"parseURL",value:function(e){let t="",i=e.match(/(.*\/).*\.m3u8/);if(i&&i.length>0)for(let e=0;e<i.length;e++)i[e].match(/.*\/$/g)&&i[e].length>t.length&&(t=i[e]);return t}},{key:"parseDecrypt",value:function(e,t){t.encrypt={};let i=e.split(",");for(let e in i){let n=i[e];if(n.match(/METHOD=(.*)/)&&(t.encrypt.method=n.match(/METHOD=(.*)/)[1]),n.match(/URI="(.*)"/)&&(t.encrypt.uri=n.match(/URI="(.*)"/)[1]),n.match(/IV=0x(.*)/)){let e=n.match(/IV=0x(.*)/)[1],i=Math.ceil(e.length/2);t.encrypt.ivb=new Uint8Array(i);for(let n=i-1;n>=0;n--){let i=parseInt(e.substr(2*n,2),16);t.encrypt.ivb[n]=i}t.encrypt.iv=e}}}}]),e}();t.default=r},"../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),r=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),s=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),a=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const o=a.EVENTS.DEMUX_EVENTS,u={1:["video","MPEG-1"],2:["video","MPEG-2"],27:["video","AVC.H264"],234:["video","VC-1"],3:["audio","MPEG-1"],4:["audio","MPEG-2"],15:["audio","MPEG-2.AAC"],17:["audio","MPEG-4.AAC"],128:["audio","LPCM"],129:["audio","AC3"],6:["audio","AC3"],130:["audio","DTS"],131:["audio","Dolby TrueHD"],132:["audio","AC3-Plus"],133:["audio","DTS-HD"],134:["audio","DTS-MA"],161:["audio","AC3-Plus-SEC"],162:["audio","DTS-HD-SEC"]};let l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.configs=Object.assign({},t),this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}return n(e,[{key:"init",value:function(){this.on(o.DEMUX_START,this.demux.bind(this))}},{key:"demux",value:function(t){if(this.demuxing)return;let i=this.inputBuffer,n={pat:[],pmt:[]},r={};for(;i.length>=188;){for(i.length>=1&&71!==i.array[0][i.offset]&&this.emit(o.DEMUX_ERROR,this.TAG,new Error(`Untrust sync code: ${i.array[0][i.offset]}, try to recover;`),!1);i.length>=1&&71!==i.array[0][i.offset];)i.shift(1);let t=i.shift(188),s=new a.Stream(t.buffer),u={};e.read(s,u,n),u.pes?(r[u.header.pid]||(r[u.header.pid]=[]),r[u.header.pid].push(u.pes),u.pes.ES.buffer=[u.pes.ES.buffer]):r[u.header.pid]&&r[u.header.pid][r[u.header.pid].length-1].ES.buffer.push(u.payload.stream)}let s=t,u=t;for(let t=0;t<Object.keys(r).length;t++){let i=r[Object.keys(r)[t]];for(let n=0;n<i.length;n++)i[n].id=Object.keys(r)[t],i[n].ES.buffer=e.Merge(i[n].ES.buffer),"audio"===i[n].type?(this.pushAudioSample(i[n],s),s={}):"video"===i[n].type&&(this.pushVideoSample(i[n],u),u={})}this._hasAudioMeta&&this.emit(o.DEMUX_COMPLETE,"audio"),this._hasVideoMeta&&this.emit(o.DEMUX_COMPLETE,"video")}},{key:"pushAudioSample",value:function(t,i){let n;this._tracks.audioTrack?n=this._tracks.audioTrack:(this._tracks.audioTrack=new s.AudioTrack,n=this._tracks.audioTrack);let r=new a.AudioTrackMeta({audioSampleRate:t.ES.frequence,sampleRate:t.ES.frequence,channelCount:t.ES.channel,codec:"mp4a.40."+t.ES.audioObjectType,config:t.ES.audioConfig,id:2,sampleRateIndex:t.ES.frequencyIndex});r.refSampleDuration=Math.floor(1024/r.audioSampleRate*r.timescale);let u=e.compaireMeta(n.meta,r,!0);this._hasAudioMeta&&u||(n.meta=r,this._hasAudioMeta=!0,this.emit(o.METADATA_PARSED,"audio"));let l=new Uint8Array(t.ES.buffer.buffer.slice(t.ES.buffer.position,t.ES.buffer.length)),c=parseInt(t.pts/90),f=parseInt(t.pts/90),d=new a.AudioTrackSample({dts:c,pts:f,data:l,options:i});n.samples.push(d)}},{key:"pushVideoSample",value:function(t,i){let n,u=r.Nalunit.getNalunits(t.ES.buffer),l=new a.VideoTrackMeta;this._tracks.videoTrack?n=this._tracks.videoTrack:(this._tracks.videoTrack=new s.VideoTrack,n=this._tracks.videoTrack);let c=0,f=!1,d=!1;for(let e=0;e<u.length;e++){let t=u[e];if(t.sps){f=t,n.sps=t.body,l.chromaFormat=f.sps.chroma_format,l.codec="avc1.";for(var h=1;h<4;h++){var p=f.body[h].toString(16);p.length<2&&(p="0"+p),l.codec+=p}l.codecHeight=f.sps.codec_size.height,l.codecWidth=f.sps.codec_size.width,l.frameRate=f.sps.frame_rate,l.id=1,l.level=f.sps.level_string,l.presentHeight=f.sps.present_size.height,l.presentWidth=f.sps.present_size.width,l.profile=f.sps.profile_string,l.refSampleDuration=Math.floor(l.timescale*(f.sps.frame_rate.fps_den/f.sps.frame_rate.fps_num)),l.sarRatio=f.sps.sar_ratio?f.sps.sar_ratio:f.sps.par_ratio}else t.pps?(n.pps=t.body,d=t):c+=4+t.body.byteLength}if(f&&d){l.avcc=r.Nalunit.getAvcc(f.body,d.body);let t=e.compaireMeta(n.meta,l,!0);this._hasVideoMeta&&t||(i?i.meta=Object.assign({},l):i={meta:Object.assign({},l)},n.meta=l,this._hasVideoMeta=!0,this.emit(o.METADATA_PARSED,"video"))}let y=new Uint8Array(c),m=0,g=!1;for(let e=0;e<u.length;e++){let t=u[e],i=t.body.byteLength;t.idr&&(g=!0),t.pps||t.sps||(y.set(new Uint8Array([i>>>24&255,i>>>16&255,i>>>8&255,255&i]),m),m+=4,y.set(t.body,m),m+=i)}let v=new a.VideoTrackSample({dts:parseInt(t.dts/90),pts:parseInt(t.pts/90),cts:(t.pts-t.dts)/90,originDts:t.dts,isKeyframe:g,data:y,options:i});n.samples.push(v)}},{key:"destory",value:function(){this.off(o.DEMUX_START,this.demux),this.configs={},this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}},{key:"inputBuffer",get:function(){return this._context.getInstance(this.configs.inputbuffer)}},{key:"_tracks",get:function(){return this._context.getInstance("TRACKS")}}],[{key:"compaireArray",value:function(e,t,i){let n=0,r=0;if("Uint8Array"===i?(n=e.byteLength,r=t.byteLength):"Array"===i&&(n=e.length,r=t.length),n!==r)return!1;for(let i=0;i<n;i++)if(e[i]!==t[i])return!1;return!0}},{key:"compaireMeta",value:function(t,i,n){if(!t||!i)return!1;for(let r=0,s=Object.keys(t).length;r<s;r++){let s=t[Object.keys(t)[r]],a=i[Object.keys(t)[r]];if("object"!=typeof s){if(n&&"duration"!==Object.keys(t)[r]&&"refSampleDuration"!==Object.keys(t)[r]&&"refSampleDurationFixed"!==Object.keys(t)[r]&&s!==a)return!1}else if(void 0!==s.byteLength){if(void 0===a.byteLength)return!1;if(!e.compaireArray(s,a,"Uint8Array"))return!1}else if(void 0!==s.length){if(void 0===a.length)return!1;if(!e.compaireArray(s,a,"Array"))return!1}else if(!e.compaireMeta(s,a))return!1}return!0}},{key:"Merge",value:function(e){let t,i=0,n=0;for(let t=0;t<e.length;t++)i+=e[t].length-e[t].position;t=new Uint8Array(i);for(let i=0;i<e.length;i++){let r=e[i];t.set(new Uint8Array(r.buffer,r.position),n),n+=r.length-r.position}return new a.Stream(t.buffer)}},{key:"read",value:function(t,i,n){e.readHeader(t,i),e.readPayload(t,i,n),"MEDIA"!==i.header.packet||1!==i.header.payload||i.unknownPIDs||(i.pes=e.PES(i))}},{key:"readPayload",value:function(t,i,n){let r=i.header.pid;switch(r){case 0:e.PAT(t,i,n);break;case 1:e.CAT(t,i,n);break;case 2:e.TSDT(t,i,n);break;case 8191:break;default:if(n.pat.some(e=>e.pid===r))e.PMT(t,i,n);else{let s=n.pmt?n.pmt.filter(e=>e.pid===r):[];s.length>0?e.Media(t,i,u[s[0].streamType][0]):i.unknownPIDs=!0}}}},{key:"readHeader",value:function(e,t){let i={};i.sync=e.readUint8();let n=e.readUint16();i.error=n>>>15,i.payload=n>>>14&1,i.priority=n>>>13&1,i.pid=8191&n,n=e.readUint8(),i.scrambling=n>>6&3,i.adaptation=n>>4&3,i.continuity=15&n,i.packet=0===i.pid?"PAT":"MEDIA",t.header=i}},{key:"PAT",value:function(e,t,i){let n={},r=e.readUint8();e.skip(r),r=e.readUint8(),n.tabelID=r,r=e.readUint16(),n.error=r>>>7,n.zero=r>>>6&1,n.sectionLength=4095&r,n.streamID=e.readUint16(),n.current=1&e.readUint8(),n.sectionNumber=e.readUint8(),n.lastSectionNumber=e.readUint8();let s=(n.sectionLength-9)/4,a=[];for(let t=0;t<s;t++){let t=e.readUint16(),i=8191&e.readUint16();a.push({program:t,pid:i,type:0===t?"network":"mapPID"})}a.length>0&&(i.pat=i.pat.concat(a)),n.list=a,n.program=e.readUint16(),n.pid=8191&e.readUint16(),t.payload=n}},{key:"PMT",value:function(e,t,i){let n={};t.header.packet="PMT";let r=e.readUint8();e.skip(r),r=e.readUint8(),n.tableID=r,r=e.readUint16(),n.sectionLength=4095&r,n.program=e.readUint16(),n.current=1&e.readUint8(),n.order=e.readUint8(),n.lastOrder=e.readUint8(),n.PCR_PID=8191&e.readUint16(),n.programLength=4095&e.readUint16();let s=(n.sectionLength-13)/5,a=[];for(let t=0;t<s;t++)a.push({streamType:e.readUint8(),pid:8191&e.readUint16(),es:4095&e.readUint16()});n.list=a,this.pmt||(this.pmt=[]),i.pmt=this.pmt.concat(a.map(e=>({pid:e.pid,es:e.es,streamType:e.streamType,program:n.program}))),t.payload=n}},{key:"Media",value:function(e,t,i){let n=t.header,r={};if(n.type=i,3===n.adaptation&&(r.adaptationLength=e.readUint8(),r.adaptationLength>0)){let t=e.readUint8();r.discontinue=t>>>7,r.access=t>>>6&1,r.priority=t>>>5&1,r.PCR=t>>>4&1,r.OPCR=t>>>3&1,r.splicePoint=t>>>2&1,r.transportPrivate=t>>>1&1,r.adaptationField=1&t;let i=e.position;if(1===r.PCR&&(r.programClockBase=e.readUint32()<<1,t=e.readUint16(),r.programClockBase|=t>>>15,r.programClockExtension=511&t),1===r.OPCR&&(r.originProgramClockBase=e.readUint32()<<1,t=e.readUint16(),r.originProgramClockBase+=t>>>15,r.originProgramClockExtension=511&t),1===r.splicePoint&&(r.spliceCountdown=e.readUint8()),1===r.transportPrivate){let t=e.readUint8(),i=[];for(let n=0;n<t;n++)i.push(e.readUint8())}if(1===r.adaptationField){let t=e.readUint8(),i=e.readUint8(),n=e.position,s=i>>>6&1,a=i>>>5&1;1===i>>>7&&(i=e.readUint16(),r.ltwValid=i>>>15,r.ltwOffset=61439&i),1===s&&(i=e.readUint24(),r.piecewiseRate=4194303&i),1===a&&(i=e.readInt8(),r.spliceType=i>>>4,r.dtsNextAU1=i>>>1&7,r.marker1=1&i,i=e.readUint16(),r.dtsNextAU2=i>>>1,r.marker2=1&i,i=e.readUint16(),r.dtsNextAU3=i),e.skip(t-1-(e.position-n))}let n=r.adaptationLength-1-(e.position-i);e.skip(n)}r.stream=new a.Stream(e.buffer.slice(e.position)),t.payload=r}},{key:"PES",value:function(t){let i={},n=t.payload.stream;if(1!==n.readUint24())i.ES={},i.ES.buffer=n;else{let t=n.readUint8();t>=224&&t<=239&&(i.type="video"),t>=192&&t<=223&&(i.type="audio");let r=n.readUint16();if(i.packetLength=r,"video"!==i.type&&"audio"!==i.type)throw new Error("format is not supported");{let t=n.readUint8();if(2!==t>>>6)throw new Error("error when parse pes header");t=n.readUint8(),i.ptsDTSFlag=t>>>6,i.escrFlag=t>>>5&1,i.esRateFlag=t>>>4&1,i.dsmFlag=t>>>3&1,i.additionalFlag=t>>>2&1,i.crcFlag=t>>>1&1,i.extensionFlag=1&t,i.pesHeaderLength=n.readUint8();let r=i.pesHeaderLength;if(2===i.ptsDTSFlag){let e=[];t=n.readUint8(),e.push(t>>>1&7),t=n.readUint16(),e.push(t>>>1),t=n.readUint16(),e.push(t>>>1),i.pts=e[0]<<30|e[1]<<15|e[2],r-=5,"video"===i.type&&(i.dts=i.pts)}if(3===i.ptsDTSFlag){let e=[];t=n.readUint8(),e.push(t>>>1&7),t=n.readUint16(),e.push(t>>>1),t=n.readUint16(),e.push(t>>>1),i.pts=e[0]<<30|e[1]<<15|e[2];let s=[];t=n.readUint8(),s.push(t>>>1&7),t=n.readUint16(),s.push(t>>>1),t=n.readUint16(),s.push(t>>>1),i.dts=s[0]<<30|s[1]<<15|s[2],r-=10}if(1===i.escrFlag){let e=[],s=[];t=n.readUint8(),e.push(t>>>3&7),e.push(3&t),t=n.readUint16(),e.push(t>>>13),e.push(3&t),t=n.readUint16(),e.push(t>>>13),s.push(3&t),t=n.readUint8(),s.push(t>>>1),i.escr=300*(e[0]<<30|e[1]<<28|e[2]<<15|e[3]<<13|e[4])+(s[0]<<7|s[1]),r-=6}if(1===i.esRateFlag&&(t=n.readUint24(),i.esRate=t>>>1&4194303,r-=3),1===i.dsmFlag)throw new Error("not support DSM_trick_mode");if(1===i.additionalFlag&&(t=n.readUint8(),i.additionalCopyInfo=127&t,r-=1),1===i.crcFlag&&(i.pesCRC=n.readUint16(),r-=2),1===i.extensionFlag)throw new Error("not support extension");r>0&&n.skip(r),i.ES=e.ES(n,i.type)}}return i}},{key:"ES",value:function(t,i){let n,r={};if("video"===i){if(1!==(n=t.readUint32())&&(t.back(4),1!==(n=t.readUint24())))throw new Error("h264 nal header parse failed");t.skip(2),r.buffer=t}else{if("audio"!==i)throw new Error(`ES ${i} is not supported`);{if((n=t.readUint16())>>>4!=4095)throw new Error("aac ES parse Error");const i=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];r.id=0==(n>>>3&1)?"MPEG-4":"MPEG-2",r.layer=n>>>1&3,r.absent=1&n,n=t.readUint16(),r.audioObjectType=1+(n>>>14&3),r.profile=r.audioObjectType-1,r.frequencyIndex=n>>>10&15,r.frequence=i[r.frequencyIndex],r.channel=n>>>6&7,r.frameLength=(3&n)<<11|t.readUint16()>>>5,e.getAudioConfig(r),t.skip(1),r.buffer=t}}return r}},{key:"TSDT",value:function(e,t,i){t.payload={}}},{key:"CAT",value:function(e,t,i){let n={};n.tableID=e.readUint8();let r=e.readUint16();n.sectionIndicator=r>>>7,n.sectionLength=4095&r,e.skip(2),r=e.readUint8(),n.version=r>>>3,n.currentNextIndicator=1&r,n.sectionNumber=e.readUint8(),n.lastSectionNumber=e.readUint8();let s=(this.sectionLength-9)/4,a=[];for(let e=0;e<s;e++)a.push({});n.crc32=e.readUint32(),t.payload=n}},{key:"getAudioConfig",value:function(e){let t,i,n=navigator.userAgent.toLowerCase();/firefox/i.test(n)?e.frequencyIndex>=6?(e.audioObjectType=5,t=new Array(4),i=e.frequencyIndex-3):(e.audioObjectType=2,t=new Array(2),i=e.frequencyIndex):-1!==n.indexOf("android")?(e.audioObjectType=2,t=new Array(2),i=e.frequencyIndex):(e.audioObjectType=5,t=new Array(4),e.frequencyIndex>=6?i=e.frequencyIndex-3:(1===e.channel&&(e.audioObjectType=2,t=new Array(2)),i=e.frequencyIndex)),t[0]=e.audioObjectType<<3,t[0]|=(14&e.frequencyIndex)>>1,t[1]=(1&e.frequencyIndex)<<7,t[1]|=e.channel<<3,5===e.audioObjectType&&(t[1]|=(14&i)>>1,t[2]=(1&i)<<7,t[2]|=8,t[3]=0),e.audioConfig=t}}]),e}();t.default=l},"../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
  !*** ../xgplayer-demux/src/hls/playlist.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=t.autoclear||!1}return n(e,[{key:"push",value:function(e,t,i){this._ts[e]||(this._ts[e]={duration:t,downloaded:!1,downloading:!1,start:this.duration,discontinue:!!i},this._list[this.duration]=e,this.duration+=t,this.fragLength+=1)}},{key:"deleteFrag",value:function(e){this._ts[e]&&(this._ts[e].start>this._lastget.time&&(this._lastget={duration:this._ts[e].duration,time:this._ts[e].start,downloaded:!1,downloading:!1,url:e}),delete this._list[this._ts[e].start],delete this._ts[e],this.fragLength-=1)}},{key:"pushM3U8",value:function(e,t){if(!e)throw new Error("No m3u8 data received.");if(this.version=e.version,this.targetduration=e.targetduration,e.encrypt&&!this.encrypt&&(this.encrypt=e.encrypt),!(e.sequence>this.sequence))throw new Error(`Old m3u8 file received, ${e.sequence}`);{this.sequence=e.sequence;let i=[];for(let t=0;t<e.frags.length;t++){let n=e.frags[t];this._ts[n.url]||(i.push(n.url),this.push(n.url,n.duration,n.discontinue))}if(i.length<1)throw new Error("Can not read ts file list.");if(t){let e=this.getTsList();for(let t=0;t<e.length;t++)i.indexOf(e[t])<0&&this.deleteFrag(e[t])}}}},{key:"getTsList",value:function(){return Object.keys(this._ts)}},{key:"downloaded",value:function(e,t){let i=this._ts[e];i&&(i.downloaded=t)}},{key:"downloading",value:function(e,t){let i=this._ts[e];i&&(i.downloading=t)}},{key:"getTsByName",value:function(e){return this._ts[e]}},{key:"getTs",value:function(e){let t,i=Object.keys(this._list);if(void 0===e&&(e=this._lastget?this._lastget.time+this._lastget.duration:0),!(i.length<1||e>=this.duration)){i.sort((e,t)=>parseFloat(e)-parseFloat(t));for(let n=0;n<i.length&&e>=parseInt(i[n]);n++){let e=this._list[i[n]];t={url:e,downloaded:this._ts[e].downloaded,downloading:this._ts[e].downloading,time:parseInt(i[n]),duration:parseInt(this._ts[e].duration)},this.autoclear&&(delete this._ts[this._lastget.url],delete this._list[this._lastget.time]),this._lastget=t}return t}}},{key:"clear",value:function(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0}},{key:"clearDownloaded",value:function(){for(let e=0,t=Object.keys(this._ts).length;e<t;e++){let t=this._ts[Object.keys(this._ts)[e]];t.downloaded=!1,t.downloading=!1}}},{key:"destroy",value:function(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=!1}},{key:"list",get:function(){return this._list}},{key:"baseURL",set:function(e){this.baseURL!==e&&(this.clear(),this._baseURL=e)},get:function(){return this._baseURL}}]),e}();t.default=r},"../xgplayer-loader/index.js":
/*!***********************************!*\
  !*** ../xgplayer-loader/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={FetchLoader:i(/*! ./src/fetch-loader */"../xgplayer-loader/src/fetch-loader.js").default}},"../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader/src/fetch-loader.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();const r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js").EVENTS.LOADER_EVENTS;let s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.configs=Object.assign({},t),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this._destroyed=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}return n(e,[{key:"init",value:function(){this.on(r.LADER_START,this.load.bind(this))}},{key:"load",value:function(e,t){let i=this;this.url=e,this._canceled=!1;let n=this.getParams(t);return i.loading=!0,fetch(this.url,n).then((function(e){if(e.ok)return i.status=e.status,i._onFetchResponse(e);i.loading=!1,i.emit(r.LOADER_ERROR,i.TAG,new Error("invalid response."))})).catch((function(e){throw i.loading=!1,i.emit(r.LOADER_ERROR,i.TAG,e),new Error(e.message)}))}},{key:"_onFetchResponse",value:function(e){let t=this,i=this._context.getInstance(this.buffer);this._loaderTaskNo++;let n=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case 2:e.json().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(r.LOADER_COMPLETE,i)):t.emit(r.LOADER_COMPLETE,e))});break;case 1:e.text().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(r.LOADER_COMPLETE,i)):t.emit(r.LOADER_COMPLETE,e))});break;case 3:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(new Uint8Array(e)),t.emit(r.LOADER_COMPLETE,i)):t.emit(r.LOADER_COMPLETE,e))});break;case 0:default:return this._onReader(e.body.getReader(),n)}}},{key:"_onReader",value:function(e,t){let i=this._context.getInstance(this.buffer);if(!i&&this._reader||this._destroyed)try{this._reader.cancel()}catch(e){}if(this._reader=e,!1===this.loading)return;let n=this;this._reader&&this._reader.read().then((function(s){if(s.done)return n.loading=!1,n.status=0,void n.emit(r.LOADER_COMPLETE,i);if(!n._canceled&&!n._destroyed)return i.push(s.value),n.emit(r.LOADER_DATALOADED,i),n._onReader(e,t);if(n._reader)try{n._reader.cancel()}catch(e){}})).catch(e=>{n.loading=!1,n.emit(r.LOADER_ERROR,n.TAG,e)})}},{key:"getParams",value:function(e){let t=Object.assign({},e),i=new Headers,n={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}if("object"==typeof t.headers){let e=t.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(n.mode="same-origin"),t.withCredentials&&(n.credentials="include"),n}},{key:"cancel",value:function(){if(this._reader){try{this._reader.cancel()}catch(e){}this._reader=null,this.loading=!1,this._canceled=!0}}},{key:"destroy",value:function(){this._destroyed=!0,this.cancel()}}],[{key:"type",get:function(){return"loader"}}]),e}();t.default=s},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");let s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return n(e,null,[{key:"size",value:function(e){return r.Buffer.writeUint32(e)}},{key:"initBox",value:function(t,i){const n=new r.Buffer;for(var s=arguments.length,a=Array(s>2?s-2:0),o=2;o<s;o++)a[o-2]=arguments[o];return n.write.apply(n,[e.size(t),e.type(i)].concat(a)),n.buffer}},{key:"extension",value:function(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}},{key:"ftyp",value:function(){return e.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}},{key:"moov",value:function(t){let i,{type:n,meta:r}=t,s=8,a=e.mvhd(r.duration,r.timescale);i="video"===n?e.videoTrak(r):e.audioTrak(r);let o=e.mvex(r.duration,r.timescale||1e3,r.id);return[a,i,o].forEach(e=>{s+=e.byteLength}),e.initBox(s,"moov",a,i,o)}},{key:"mvhd",value:function(t){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3,n=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return e.initBox(8+n.length,"mvhd",new Uint8Array(n))}},{key:"videoTrak",value:function(t){let i=8,n=e.tkhd({id:1,duration:t.duration,timescale:t.timescale||1e3,width:t.presentWidth,height:t.presentHeight,type:"video"}),r=e.mdia({type:"video",timescale:t.timescale||1e3,duration:t.duration,avcc:t.avcc,parRatio:t.parRatio,width:t.presentWidth,height:t.presentHeight});return[n,r].forEach(e=>{i+=e.byteLength}),e.initBox(i,"trak",n,r)}},{key:"audioTrak",value:function(t){let i=8,n=e.tkhd({id:2,duration:t.duration,timescale:t.timescale||1e3,width:0,height:0,type:"audio"}),r=e.mdia({type:"audio",timescale:t.timescale||1e3,duration:t.duration,channelCount:t.channelCount,samplerate:t.sampleRate,config:t.config});return[n,r].forEach(e=>{i+=e.byteLength}),e.initBox(i,"trak",n,r)}},{key:"tkhd",value:function(t){let i=t.id,n=t.duration,r=t.width,s=t.height,a=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,n>>>24&255,n>>>16&255,n>>>8&255,255&n,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,r>>>8&255,255&r,0,0,s>>>8&255,255&s,0,0]);return e.initBox(8+a.byteLength,"tkhd",a)}},{key:"edts",value:function(t){let i=new r.Buffer,n=t.duration,s=t.mediaTime;return i.write(e.size(36),e.type("edts")),i.write(e.size(28),e.type("elst")),i.write(new Uint8Array([0,0,0,1,n>>24&255,n>>16&255,n>>8&255,255&n,s>>24&255,s>>16&255,s>>8&255,255&s,0,0,0,1])),i.buffer}},{key:"mdia",value:function(t){let i=8,n=e.mdhd(t.timescale,t.duration),r=e.hdlr(t.type),s=e.minf(t);return[n,r,s].forEach(e=>{i+=e.byteLength}),e.initBox(i,"mdia",n,r,s)}},{key:"mdhd",value:function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3,i=arguments[1],n=new Uint8Array([0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,i>>>24&255,i>>>16&255,i>>>8&255,255&i,85,196,0,0]);return e.initBox(12+n.byteLength,"mdhd",e.extension(0,0),n)}},{key:"hdlr",value:function(t){let i=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===t&&(i.splice.apply(i,[8,4].concat([115,111,117,110])),i.splice.apply(i,[24,13].concat([83,111,117,110,100,72,97,110,100,108,101,114,0]))),e.initBox(8+i.length,"hdlr",new Uint8Array(i))}},{key:"minf",value:function(t){let i=8,n="video"===t.type?e.vmhd():e.smhd(),r=e.dinf(),s=e.stbl(t);return[n,r,s].forEach(e=>{i+=e.byteLength}),e.initBox(i,"minf",n,r,s)}},{key:"vmhd",value:function(){return e.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}},{key:"smhd",value:function(){return e.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}},{key:"dinf",value:function(){let t=new r.Buffer;return t.write(e.size(36),e.type("dinf"),e.size(28),e.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),t.buffer}},{key:"stbl",value:function(t){let i=8,n=e.stsd(t),r=e.stts(),s=e.stsc(),a=e.stsz(),o=e.stco();return[n,r,s,a,o].forEach(e=>{i+=e.byteLength}),e.initBox(i,"stbl",n,r,s,a,o)}},{key:"stsd",value:function(t){let i;return i="audio"===t.type?e.mp4a(t):e.avc1(t),e.initBox(16+i.byteLength,"stsd",e.extension(0,0),new Uint8Array([0,0,0,1]),i)}},{key:"mp4a",value:function(t){let i=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t.channelCount,0,16,0,0,0,0,t.samplerate>>8&255,255&t.samplerate,0,0]),n=e.esds(t.config);return e.initBox(8+i.byteLength+n.byteLength,"mp4a",i,n)}},{key:"esds",value:function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[43,146,8,0];const i=t.length;let n=new r.Buffer,s=new Uint8Array([0,0,0,0,3,23+i,0,1,0,4,15+i,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([i]).concat(t).concat([6,1,2]));return n.write(e.size(8+s.byteLength),e.type("esds"),s),n.buffer}},{key:"avc1",value:function(t){let i=new r.Buffer,n=t.width,s=t.height,a=t.parRatio.height,o=t.parRatio.width,u=t.avcc,l=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n>>8&255,255&n,s>>8&255,255&s,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),c=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),f=new Uint8Array([a>>24,a>>16&255,a>>8&255,255&a,o>>24,o>>16&255,o>>8&255,255&o]);return i.write(e.size(40+l.byteLength+u.byteLength+c.byteLength),e.type("avc1"),l,e.size(8+u.byteLength),e.type("avcC"),u,e.size(20),e.type("btrt"),c,e.size(16),e.type("pasp"),f),i.buffer}},{key:"stts",value:function(){let t=new Uint8Array([0,0,0,0,0,0,0,0]);return e.initBox(16,"stts",t)}},{key:"stsc",value:function(){let t=new Uint8Array([0,0,0,0,0,0,0,0]);return e.initBox(16,"stsc",t)}},{key:"stco",value:function(){let t=new Uint8Array([0,0,0,0,0,0,0,0]);return e.initBox(16,"stco",t)}},{key:"stsz",value:function(){let t=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return e.initBox(20,"stsz",t)}},{key:"mvex",value:function(t){arguments.length>1&&void 0!==arguments[1]&&arguments[1];let i=arguments[2],n=new r.Buffer,s=r.Buffer.writeUint32(t);return n.write(e.size(56),e.type("mvex"),e.size(16),e.type("mehd"),e.extension(0,0),s,e.trex(i)),n.buffer}},{key:"trex",value:function(t){let i=new Uint8Array([0,0,0,0,t>>24,t>>16&255,t>>8&255,255&t,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return e.initBox(8+i.byteLength,"trex",i)}},{key:"moof",value:function(t){let i=8,n=e.mfhd(),r=e.traf(t);return[n,r].forEach(e=>{i+=e.byteLength}),e.initBox(i,"moof",n,r)}},{key:"mfhd",value:function(){let t=r.Buffer.writeUint32(e.sequence);return e.sequence+=1,e.initBox(16,"mfhd",e.extension(0,0),t)}},{key:"traf",value:function(t){let i=8,n=e.tfhd(t.id),r=e.tfdt(t.time),s=e.sdtp(t),a=e.trun(t,s.byteLength);return[n,r,a,s].forEach(e=>{i+=e.byteLength}),e.initBox(i,"traf",n,r,a,s)}},{key:"tfhd",value:function(t){let i=r.Buffer.writeUint32(t);return e.initBox(16,"tfhd",e.extension(0,0),i)}},{key:"tfdt",value:function(t){return e.initBox(16,"tfdt",e.extension(0,0),r.Buffer.writeUint32(t))}},{key:"trun",value:function(t,i){let n=new r.Buffer,s=r.Buffer.writeUint32(t.samples.length),a=r.Buffer.writeUint32(92+16*t.samples.length+i);return n.write(e.size(20+16*t.samples.length),e.type("trun"),new Uint8Array([0,0,15,1]),s,a),t.samples.forEach(e=>{const t=e.flags;n.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),n.buffer}},{key:"sdtp",value:function(t){let i=new r.Buffer;return i.write(e.size(12+t.samples.length),e.type("sdtp"),e.extension(0,0)),t.samples.forEach(e=>{const t=e.flags,n=t.isLeading<<6|t.dependsOn<<4|t.isDependedOn<<2|t.hasRedundancy;i.write(new Uint8Array([n]))}),i.buffer}},{key:"mdat",value:function(t){let i=new r.Buffer,n=8;t.samples.forEach(e=>{n+=e.size}),i.write(e.size(n),e.type("mdat"));let s=new Uint8Array(n),a=0;return s.set(i.buffer,a),a+=8,t.samples.forEach(e=>{e.buffer.forEach(e=>{s.set(e,a),a+=e.byteLength})}),s}}]),e}();s.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),s.sequence=1,t.default=s},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"),o=(n=a)&&n.__esModule?n:{default:n};const u=s.EVENTS.REMUX_EVENTS;let l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._dtsBase=0,this._isDtsBaseInited=!1,this.isFirstVideo=!0,this.isFirstAudio=!0,this.videoAllDuration=0,this.audioAllDuration=0}return r(e,[{key:"init",value:function(){this.on(u.REMUX_MEDIA,this.remux.bind(this)),this.on(u.REMUX_METADATA,this.onMetaDataReady.bind(this)),this.on(u.DETECT_CHANGE_STREAM,this.resetDtsBase.bind(this))}},{key:"destroy",value:function(){this._dtsBase=-1,this._dtsBaseInited=!1}},{key:"reset",value:function(){this._dtsBase=0,this._isDtsBaseInited=!1}},{key:"remux",value:function(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}},{key:"resetDtsBase",value:function(){this._dtsBase=0,this._dtsBaseInited=!1}},{key:"seek",value:function(){}},{key:"onMetaDataReady",value:function(e){let t;if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");t=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");t=e}let i=this._context.getInstance("PRE_SOURCE_BUFFER"),n=i.getSource(e);n||(n=i.createSource(e)),n.mimetype=t.meta.codec,n.init=this.remuxInitSegment(e,t.meta),this.emit(u.INIT_SEGMENT,e)}},{key:"remuxInitSegment",value:function(e,t){let i=new s.Buffer,n=o.default.ftyp(),r=o.default.moov({type:e,meta:t});return i.write(n,r),i}},{key:"calcDtsBase",value:function(e,t){if(!e.samples.length&&!t.samples.length)return;let i=1/0,n=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(n=t.samples[0].dts),this._dtsBase=Math.min(i,n),this._isDtsBaseInited=!0}},{key:"_remuxVideo",value:function(e){const t=e;if(!e.samples||!e.samples.length)return;let{samples:i}=t,n=-1,r=null;const a=[],l={samples:[]};for(;i.length;){const e=i.shift(),{isKeyframe:t,options:s}=e;if(!this.isFirstAudio&&s&&s.meta){r=this.remuxInitSegment("video",s.meta),s.meta=null,i.unshift(e),s.isContinue||this.resetDtsBase();break}let o,u,c=e.dts-this._dtsBase;-1===n&&(n=c),void 0!==e.pts&&(o=(u=e.pts-this._dtsBase)-c),void 0!==e.cts&&(u=e.cts+c,o=e.cts);let f={buffer:[],size:0};l.samples.push(f),f.buffer.push(e.data),f.size+=e.data.byteLength;let d=0;if(i.length>=1){d=i[0].dts-this._dtsBase-c}else d=a.length>=1?a[a.length-1].duration:this.videoMeta.refSampleDuration;this.videoAllDuration+=d,a.push({dts:c,cts:o,pts:u,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:d,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:c,type:"video"})}let c=new s.Buffer;if(a.length){const e=o.default.moof({id:t.meta.id,time:n,samples:a}),i=o.default.mdat(l);c.write(e,i),this.writeToSource("video",c)}if(r&&(this.writeToSource("video",r),i.length))return t.samples=i,this._remuxVideo(t);this.isFirstVideo=!1,this.emit(u.MEDIA_SEGMENT,"video");const f=a[a.length-1];this._videoNextDts=f.dts+f.duration,t.samples=[],t.length=0}},{key:"_remuxAudio",value:function(e){const{samples:t}=e;let i=-1,n=[],r=null;const a={samples:[]};if(!t||!t.length)return;let l=!1;for(;t.length;){let e=t.shift();const{data:s,options:o}=e;if(!this.isFirstAudio&&o&&o.meta){r=this.remuxInitSegment("audio",o.meta),o.meta=null,t.unshift(e),o.isContinue||this.resetDtsBase();break}let u=e.dts-this._dtsBase;const c=u;l||(i=u,l=!0);let f=0;if(this.audioMeta.refSampleDurationFixed)f=this.audioMeta.refSampleDurationFixed;else if(t.length>=1){f=t[0].dts-this._dtsBase-u}else f=n.length>=1?n[n.length-1].duration:this.audioMeta.refSampleDuration;this.audioAllDuration+=f;const d={dts:u,pts:u,cts:0,size:s.byteLength,duration:e.duration?e.duration:f,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:c,type:"audio"};let h={buffer:[],size:0};h.buffer.push(s),h.size+=s.byteLength,a.samples.push(h),n.push(d)}const c=new s.Buffer;if(n.length){const t=o.default.moof({id:e.meta.id,time:i,samples:n}),r=o.default.mdat(a);c.write(t,r),this.writeToSource("audio",c)}if(r&&(this.writeToSource("audio",r),t.length))return e.samples=t,this._remuxAudio(e);this.isFirstAudio=!1,this.emit(u.MEDIA_SEGMENT,"audio",c);const f=n[n.length-1];this._videoNextDts=f.dts+f.duration,e.samples=[],e.length=0}},{key:"writeToSource",value:function(e,t){let i=this._context.getInstance("PRE_SOURCE_BUFFER"),n=i.getSource(e);n||(n=i.createSource(e)),n.data.push(t)}},{key:"initSilentAudio",value:function(t,i){const n=e.getSilentFrame(this.audioMeta.channelCount);return{dts:t,pts:t,cts:0,duration:i,unit:n,size:n.byteLength,originDts:t,type:"video"}}},{key:"videoMeta",get:function(){return this._context.getInstance("TRACKS").videoTrack.meta}},{key:"audioMeta",get:function(){return this._context.getInstance("TRACKS").audioTrack.meta}}],[{key:"getSilentFrame",value:function(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}]),e}();t.default=l},"../xgplayer-utils/index.js":
/*!**********************************!*\
  !*** ../xgplayer-utils/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Context:i(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:i(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:i(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:i(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:i(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:i(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,PageVisibility:i(/*! ./src/env/PageVisibility */"../xgplayer-utils/src/env/PageVisibility.js").default,MediaInfo:i(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:i(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:i(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:i(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:i(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:i(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:i(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default,MobileVideo:i(/*! ./src/mobile/mobile-video */"../xgplayer-utils/src/mobile/mobile-video.js"),Crypto:i(/*! ./src/crypto */"../xgplayer-utils/src/crypto/index.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,n=Array(i>1?i-1:0),r=1;r<i;r++)n[r-1]=arguments[r];var s=!0,a=!1,o=void 0;try{for(var u,l=n[Symbol.iterator]();!(s=(u=l.next()).done);s=!0){var c=u.value;t+=c.length}}catch(e){a=!0,o=e}finally{try{!s&&l.return&&l.return()}finally{if(a)throw o}}var f=new e(t),d=0,h=!0,p=!1,y=void 0;try{for(var m,g=n[Symbol.iterator]();!(h=(m=g.next()).done);h=!0){var v=m.value;f.set(v,d),d+=v.length}}catch(e){p=!0,y=e}finally{try{!h&&g.return&&g.return()}finally{if(p)throw y}}return f}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";var n,r=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"),s=(n=r)&&n.__esModule?n:{default:n};e.exports=s.default},"../xgplayer-utils/node_modules/webworkify-webpack/index.js":
/*!******************************************************************!*\
  !*** ../xgplayer-utils/node_modules/webworkify-webpack/index.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t,i){"use strict";function n(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.i=function(e){return e},i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},i.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/",i.oe=function(e){throw console.error(e),e};var n=i(i.s=ENTRY_MODULE);return n.default||n}var r="[\\.|\\-|\\+|\\w|/|@]+",s="\\(\\s*(/\\*.*?\\*/)?\\s*.*?("+r+").*?\\)";function a(e){return(e+"").replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}function o(e,t,n){var o={};o[n]=[];var u=t.toString(),l=u.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);if(!l)return o;for(var c,f=l[1],d=new RegExp("(\\\\n|\\W)"+a(f)+s,"g");c=d.exec(u);)"dll-reference"!==c[3]&&o[n].push(c[3]);for(d=new RegExp("\\("+a(f)+'\\("(dll-reference\\s('+r+'))"\\)\\)'+s,"g");c=d.exec(u);)e[c[2]]||(o[n].push(c[1]),e[c[2]]=i(c[1]).m),o[c[2]]=o[c[2]]||[],o[c[2]].push(c[4]);for(var h,p=Object.keys(o),y=0;y<p.length;y++)for(var m=0;m<o[p[y]].length;m++)h=o[p[y]][m],isNaN(1*h)||(o[p[y]][m]=1*o[p[y]][m]);return o}function u(e){return Object.keys(e).reduce((function(t,i){return t||e[i].length>0}),!1)}e.exports=function(e,t){t=t||{};var r={main:i.m},s=t.all?{main:Object.keys(r.main)}:function(e,t){for(var i={main:[t]},n={main:[]},r={main:{}};u(i);)for(var s=Object.keys(i),a=0;a<s.length;a++){var l=s[a],c=i[l].pop();if(r[l]=r[l]||{},!r[l][c]&&e[l][c]){r[l][c]=!0,n[l]=n[l]||[],n[l].push(c);for(var f=o(e,e[l][c],l),d=Object.keys(f),h=0;h<d.length;h++)i[d[h]]=i[d[h]]||[],i[d[h]]=i[d[h]].concat(f[d[h]])}}return n}(r,e),a="";Object.keys(s).filter((function(e){return"main"!==e})).forEach((function(e){for(var t=0;s[e][t];)t++;s[e].push(t),r[e][t]="(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })",a=a+"var "+e+" = ("+n.toString().replace("ENTRY_MODULE",JSON.stringify(t))+")({"+s[e].map((function(t){return JSON.stringify(t)+": "+r[e][t].toString()})).join(",")+"});\n"})),a=a+"new (("+n.toString().replace("ENTRY_MODULE",JSON.stringify(e))+")({"+s.main.map((function(e){return JSON.stringify(e)+": "+r.main[e].toString()})).join(",")+"}))(self);";var l=new window.Blob([a],{type:"text/javascript"});if(t.bare)return l;var c=(window.URL||window.webkitURL||window.mozURL||window.msURL).createObjectURL(l),f=new window.Worker(c);return f.objectURL=c,f}},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},s={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT",DETECT_CHANGE_STREAM:"DETECT_CHANGE_STREAM"},a={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o={RETRY_TIME_EXCEEDED:"RETRY_TIME_EXCEEDED"},u={VISIBILITY_CHANGE:"VISIBILITY_CHANGE"},l=Object.assign({},n,r,s,a,o,u),c=[],f=[];for(let e in l)l.hasOwnProperty(e)&&c.push(l[e]);for(let e in l)l.hasOwnProperty(e)&&f.push(l[e]);t.default={ALLEVENTS:l,HLS_EVENTS:o,REMUX_EVENTS:s,DEMUX_EVENTS:r,MSE_EVENTS:a,LOADER_EVENTS:n,FlvAllowedEvents:c,HlsAllowedEvents:f,CRYTO_EVENTS:{START_DECRYPT:"START_DECRYPT",DECRYPTED:"DECRYPTED"},BROWSER_EVENTS:u}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/context.js ***!
  \****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=function e(t,i,n){null===t&&(t=Function.prototype);var r=Object.getOwnPropertyDescriptor(t,i);if(void 0===r){var s=Object.getPrototypeOf(t);return null===s?void 0:e(s,i,n)}if("value"in r)return r.value;var a=r.get;return void 0!==a?a.call(n):void 0},s=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),a=i(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"),o=(n=a)&&n.__esModule?n:{default:n},u=i(/*! events */"../../node_modules/events/events.js");function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}let c=function(){function e(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];l(this,e),this._emitter=new u.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new o.default,this.allowedEvents=t,this._hooks={}}return s(e,[{key:"getInstance",value:function(e){const t=this._instanceMap[e];return t||null}},{key:"initInstance",value:function(e){if(this._clsMap[e]){for(var t=arguments.length,i=Array(t>1?t-1:0),n=1;n<t;n++)i[n-1]=arguments[n];const r=new(Function.prototype.bind.apply(this._clsMap[e],[null].concat(i)));return this._instanceMap[e]=r,r.init&&r.init(),r}throw new Error(`${e}未在context中注册`)}},{key:"init",value:function(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}},{key:"registry",value:function(e,t){var i=this;const n=this._emitter,a=this._isMessageNameValid.bind(this),o=this,u=function(t){function i(){var t;l(this,i);for(var n=arguments.length,r=Array(n),s=0;s<n;s++)r[s]=arguments[s];var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t=i.__proto__||Object.getPrototypeOf(i)).call.apply(t,[this].concat(r)));return a.listeners={},a.onceListeners={},a.TAG=e,a._context=o,a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,t),s(i,[{key:"on",value:function(t,i){return a(t),this.listeners[t]?this.listeners[t].push(i):this.listeners[t]=[i],n.on(`${t}__TO__${e}`,i),n.on(t,i)}},{key:"before",value:function(e,t){a(e),o._hooks[e]?o._hooks[e].push(t):o._hooks[e]=[t]}},{key:"once",value:function(t,i){return a(t),this.onceListeners[t]?this.onceListeners[t].push(i):this.onceListeners[t]=[i],n.once(`${t}__TO__${e}`,i),n.once(t,i)}},{key:"emit",value:function(e){a(e);const t=o._hooks?o._hooks[e]:null;if(t)for(let e=0,i=t.length;e<i;e++){(0,t[e])()}for(var i=arguments.length,r=Array(i>1?i-1:0),s=1;s<i;s++)r[s-1]=arguments[s];return n.emit.apply(n,[e].concat(r))}},{key:"emitTo",value:function(e,t){a(t);for(var i=arguments.length,r=Array(i>2?i-2:0),s=2;s<i;s++)r[s-2]=arguments[s];return n.emit.apply(n,[`${t}__TO__${e}`].concat(r))}},{key:"off",value:function(e,t){return a(e),n.off(e,t)}},{key:"removeListeners",value:function(){const t=Object.prototype.hasOwnProperty.bind(this.listeners);for(let i in this.listeners)if(t(i)){const t=this.listeners[i]||[];for(let r=0;r<t.length;r++){const s=t[r];n.off(i,s),n.off(`${i}__TO__${e}`,s)}}for(let i in this.onceListeners)if(t(i)){const t=this.onceListeners[i]||[];for(let r=0;r<t.length;r++){const s=t[r];n.off(i,s),n.off(`${i}__TO__${e}`,s)}}}},{key:"destroy",value:function(){if(this.removeListeners(),this.listeners={},delete o._instanceMap[e],r(i.prototype.__proto__||Object.getPrototypeOf(i.prototype),"destroy",this))return r(i.prototype.__proto__||Object.getPrototypeOf(i.prototype),"destroy",this).call(this)}}]),i}(t);return this._clsMap[e]=u,function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return i.initInstance.apply(i,[e].concat(n))}}},{key:"destroyInstances",value:function(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}},{key:"destroy",value:function(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this._hooks=null,this.destroyInstances()}},{key:"_isMessageNameValid",value:function(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}]),e}();t.default=c},"../xgplayer-utils/src/crypto/index.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/crypto/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),s=i(/*! ../constants/events */"../xgplayer-utils/src/constants/events.js");const a=((n=s)&&n.__esModule?n:{default:n}).default.CRYTO_EVENTS;let o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.inputBuffer=t.inputbuffer,this.outputBuffer=t.outputbuffer,this.key=t.key,this.iv=t.iv,this.method=t.method,this.crypto=window.crypto||window.msCrypto}return r(e,[{key:"init",value:function(){this.on(a.START_DECRYPT,this.decript.bind(this))}},{key:"decript",value:function(){if(this.aeskey)this.decriptData();else{this.crypto.subtle.importKey("raw",this.key.buffer,{name:"AES-CBC"},!1,["encrypt","decrypt"]).then(e=>{this.aeskey=e,this.decriptData()})}}},{key:"decriptData",value:function(){let e=this._context.getInstance(this.inputBuffer),t=this._context.getInstance(this.outputBuffer),i=e.shift();i&&this.crypto.subtle.decrypt({name:"AES-CBC",iv:this.iv.buffer},this.aeskey,i).then(e=>{t.push(new Uint8Array(e)),this.emit(a.DECRYPTED),this.decriptData(i)})}}]),e}();t.default=o},"../xgplayer-utils/src/env/PageVisibility.js":
/*!***************************************************!*\
  !*** ../xgplayer-utils/src/env/PageVisibility.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),s=i(/*! ../constants/events */"../xgplayer-utils/src/constants/events.js");const a=((n=s)&&n.__esModule?n:{default:n}).default.BROWSER_EVENTS;let o,u;void 0!==document.hidden?(o="hidden",u="visibilitychange"):void 0!==document.msHidden?(o="msHidden",u="msvisibilitychange"):void 0!==document.webkitHidden&&(o="webkitHidden",u="webkitvisibilitychange");let l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.callbacks={onShow:[],onHidden:[]},this.handleVisibilityChange=this.handleVisibilityChange.bind(this),this.init()}return r(e,[{key:"init",value:function(){document.addEventListener(u,this.handleVisibilityChange,!1)}},{key:"handleVisibilityChange",value:function(){this.emit(a.VISIBILITY_CHANGE,document[o])}},{key:"destroy",value:function(){document.removeEventListener(u,this.handleVisibilityChange)}}]),e}();t.default=l},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isle.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=n},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,n=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),s=/(?:iPad|PlayBook)/.test(e)||n&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),a=/(?:iPhone)/.test(e)&&!s;return{isTablet:s,isPhone:a,isAndroid:n,isPc:!a&&!n&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:r}},get isLe(){return n}};t.default=r},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/utf8.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return n(e,null,[{key:"decode",value:function(t){const i=[],n=t;let r=0;const s=t.length;for(;r<s;)if(n[r]<128)i.push(String.fromCharCode(n[r])),++r;else{if(n[r]<192);else if(n[r]<224){if(e._checkContinuation(n,r,1)){const e=(31&n[r])<<6|63&n[r+1];if(e>=128){i.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(n[r]<240){if(e._checkContinuation(n,r,2)){const e=(15&n[r])<<12|(63&n[r+1])<<6|63&n[r+2];if(e>=2048&&55296!=(63488&e)){i.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(n[r]<248&&e._checkContinuation(n,r,3)){let e=(7&n[r])<<18|(63&n[r+1])<<12|(63&n[r+2])<<6|63&n[r+3];if(e>65536&&e<1114112){e-=65536,i.push(String.fromCharCode(e>>>10|55296)),i.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}i.push(String.fromCharCode(65533)),++r}return i.join("")}},{key:"_checkContinuation",value:function(e,t,i){let n=e;if(t+i<n.length){for(;i--;)if(128!=(192&n[++t]))return!1;return!0}return!1}}]),e}();t.default=r},"../xgplayer-utils/src/mobile/audio-context.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/audio-context.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),s=i(/*! events */"../../node_modules/events/events.js");let a=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));i.config=Object.assign({},e);let n=window.AudioContext||window.webkitAudioContext;return i.context=new n,i.gainNode=i.context.createGain(),i.gainNode.connect(i.context.destination),i.meta=void 0,i.samples=[],i.preloadTime=i.config.preloadTime||3,i.duration=0,i._currentBuffer=void 0,i._nextBuffer=void 0,i._lastpts=void 0,i._preDecode=[],i._currentTime=0,i._decoding=!1,i._volume=i.config.volume||.6,i._played=!1,i.playFinish=null,i.waitNextID=null,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"decodeAudio",value:function(e){let{samples:t}=e,i=t;e.samples=[],this.setAudioData(i)}},{key:"setAudioData",value:function(e){for(let t=0;t<e.length;t++)e[t].pts=void 0===e[t].pts?e[t].dts:e[t].pts,this._preDecode.push(e[t]);this._preDecode.length>0&&(void 0===this._lastpts&&(this._lastpts=this._preDecode[0].pts),(this._preDecode[this._preDecode.length-1].pts-this._lastpts)/1e3>this.preloadTime&&this.decodeAAC())}},{key:"decodeAAC",value:function(){if(this._decoding)return;this._decoding=!0;let e=this._preDecode,i=[],n=this,r=e.shift();for(;r;){let n=t.getAACData(this.meta,r);i.push(n),this._lastpts=r.pts,r=e.shift()}let s=t.combileData(i);try{this.context.decodeAudioData(s.buffer,(function(e){let t=n.context.createBufferSource();t.buffer=e,n.samples.push({time:n.duration,duration:e.duration,data:t}),n.duration+=e.duration,n._currentBuffer||(n._currentBuffer=n.getTimeBuffer(n.currentTime)),!n._nextBuffer&&n._currentBuffer&&(n._nextBuffer=n.getTimeBuffer(n.currentTime+n._currentBuffer.duration)),n._decoding=!1,(n._preDecode.length>0&&n._preDecode[n._preDecode.length-1].pts-n._lastpts)/1e3>=n.preloadTime&&n.decodeAAC(),n.playFinish&&n.playFinish()}),e=>{console.error(e)})}catch(e){console.error(e)}}},{key:"onSourceEnded",value:function(){if(!this._nextBuffer||!this._played)return void(this.waitNextID=setTimeout(()=>{this.onSourceEnded()},200));let e=this._nextBuffer.data;e.start(),e.connect(this.gainNode);let t=this;setTimeout(()=>{t.onSourceEnded.call(this)},1e3*e.buffer.duration-10),this._currentBuffer=this._nextBuffer,this._currentTime=this._currentBuffer.time,this._nextBuffer=this.getTimeBuffer(this.currentTime),this._currentBuffer&&(this._nextBuffer=this.getTimeBuffer(this.currentTime+this._currentBuffer.duration)),this.emit("AUDIO_SOURCE_END")}},{key:"play",value:function(){if(this.playFinish)return;this._played=!0,"suspended"===this.context.state&&this.context.resume();let e=this;const t=()=>{let t=this._currentBuffer.data;t.connect(this.gainNode),t.start(),setTimeout(()=>{e.onSourceEnded.call(this)},1e3*t.buffer.duration-10)};return this._currentBuffer?(t(),Promise.resolve()):new Promise(e=>{this.playFinish=e}).then(()=>{this.playFinish=null,t()})}},{key:"pause",value:function(){const e=this.context;"running"===e.state&&e.suspend()}},{key:"getTimeBuffer",value:function(e){let t;for(let i=0;i<this.samples.length;i++){let n=this.samples[i];if(n.time<=e&&n.time+n.duration>e){t=n;break}}return t}},{key:"setAudioMetaData",value:function(e){this.meta=e}},{key:"destroy",value:function(){this.waitNextID&&window.clearTimeout(this.waitNextID),this.context.close()}},{key:"currentTime",get:function(){return this._currentTime}},{key:"muted",set:function(e){this.gainNode.gain.value=e?0:this._volume}},{key:"volume",get:function(){return this._volume},set:function(e){return e<0?(this._volume=0,void(this.gainNode.gain.value=0)):e>1?(this._volume=1,void(this.gainNode.gain.value=1)):(this._volume=e,void(this.gainNode.gain.value=e))}}],[{key:"getAACData",value:function(e,i){let n=new Uint8Array(i.data.byteLength+7),r=t.getAdts(e,i.data);return n.set(r),n.set(i.data,7),n}},{key:"combileData",value:function(e){let t=0;for(let i=0,n=e.length;i<n;i++)t+=e[i].byteLength;let i=new Uint8Array(t),n=0;for(let t=0,r=e.length;t<r;t++)i.set(e[t],n),n+=e[t].byteLength;return i}},{key:"getAdts",value:function(e,t){let i=new Uint8Array(7);i[0]=255,i[1]=240,i[1]=1|i[1],i[2]=192&e.objectType-1<<6,i[2]=i[2]|60&e.sampleRateIndex<<2,i[2]=i[2]|1&e.channelCount>>2,i[3]=192&e.channelCount<<6;let n=t.byteLength+7;return i[3]=i[3]|3&n>>11,i[4]=255&n>>3,i[5]=224&n<<5,i[5]=31|i[5],i[6]=252,i}}]),t}(((n=s)&&n.__esModule?n:{default:n}).default);t.default=a},"../xgplayer-utils/src/mobile/mobile-video.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/mobile-video.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),r=o(i(/*! ./video-context */"../xgplayer-utils/src/mobile/video-context.js")),s=o(i(/*! ./audio-context */"../xgplayer-utils/src/mobile/audio-context.js")),a=i(/*! ./ticker */"../xgplayer-utils/src/mobile/ticker.js");function o(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}let l=function(){function e(t){u(this,e),this.aCtx=t.aCtx,this.vCtx=t.vCtx,this.video=t.video,this.timeoutId=null,this.start=null}return n(e,[{key:"doReconcile",value:function(){const e=(this.vCtx.currentTime||0)-1e3*(this.aCtx.currentTime||0);this.timeoutId||(e>200?(this.video.start+=e,this.vCtx.pause(),this.timeoutId=setTimeout(()=>{this.vCtx.play(),this.timeoutId=null},e)):e<-120&&(this.video.start+=e))}},{key:"destroy",value:function(){this.start=null,this.aCtx=null,this.vCtx=null}}]),e}(),c=function(e){function t(){u(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._canvas=document.createElement("canvas"),e.handleAudioSourceEnd=e.handleAudioSourceEnd.bind(e),e.played=!1,e.pendingPlayTask=null,e._paused=!0,e.videoMetaInited=!1,e.audioMetaInited=!1,e.init(),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,HTMLElement),n(t,[{key:"init",value:function(){this.vCtx=new r.default(Object.assign({canvas:this._canvas},{style:{width:this.width,height:this.height}})),this.aCtx=new s.default({}),this.ticker=new((0,a.getTicker)()),this.reconciler=new l({vCtx:this.vCtx,aCtx:this.aCtx,video:this}),this.vCtx.oncanplay=()=>{this.played||this.appendChild(this._canvas),this.dispatchEvent(new Event("canplay"))},this.aCtx.on("AUDIO_SOURCE_END",this.handleAudioSourceEnd)}},{key:"handleAudioSourceEnd",value:function(){this.reconciler.doReconcile(),this.vCtx.cleanBuffer()}},{key:"_cleanBuffer",value:function(){this.vCtx.cleanBuffer()}},{key:"destroy",value:function(){this.aCtx.destroy(),this.vCtx.destroy(),this.ticker.stop(),this.start=null,this.reconciler.destroy(),this.aCtx=null,this.vCtx=null,this.ticker=null}},{key:"onDemuxComplete",value:function(e,t){this.aCtx.decodeAudio(t),this.vCtx.decodeVideo(e)}},{key:"setAudioMeta",value:function(e){this.audioMetaInited&&(this.aCtx.destroy(),this.aCtx=new s.default({})),this.aCtx.setAudioMetaData(e),this.audioMetaInited=!0}},{key:"setVideoMeta",value:function(e){this.videoMetaInited&&(this.vCtx.destroy(),this.vCtx=new r.default(Object.assign({canvas:this._canvas},{style:{width:this.width,height:this.height}}))),this.vCtx.setVideoMetaData(e),this.videoMetaInited=!0}},{key:"play",value:function(){this.pendingPlayTask||(this.played&&(this.destroy(),this.init()),this.pendingPlayTask=Promise.all([this.vCtx.play(),this.aCtx.play().then(()=>{this.aCtx.muted=!0})]).then(()=>{this.aCtx.muted=!1,this.ticker.start(()=>{this.start||(this.start=Date.now()),this._currentTime=Date.now()-this.start,this.vCtx._onTimer(this._currentTime)}),this.pendingPlayTask=null,this.played=!0,this.dispatchEvent(new Event("play")),this._paused=!1}))}},{key:"pause",value:function(){this._paused=!0,this.aCtx.pause(),this.vCtx.pause(),this.dispatchEvent(new Event("pause"))}},{key:"width",get:function(){return this.getAttribute("width")||this.videoWidth},set:function(e){this.style.display="inline-block";const t="number"==typeof e?`${e}px`:e;this.setAttribute("width",t),this.style.width=t,this._canvas.style.width=t,this._canvas.width=e}},{key:"height",get:function(){return this.getAttribute("height")},set:function(e){this.style.display="inline-block";const t="number"==typeof e?`${e}px`:e;this.setAttribute("height",t),this.style.height=t,this._canvas.style.height=t,this._canvas.height=e}},{key:"videoWidth",get:function(){return this.vCtx&&this.vCtx.videoWidth?this.vCtx.videoWidth:0}},{key:"videoHeight",get:function(){return this.vCtx&&this.vCtx.videoHeight?this.vCtx.videoHeight:0}},{key:"src",get:function(){return this.getAttribute("src")},set:function(e){this.setAttribute("src",e)}},{key:"readyState",get:function(){return this.videoMetaInited?this.vCtx.readyState:0}},{key:"seeking",get:function(){return!!this.videoMetaInited&&this.vCtx.seeking}},{key:"currentTime",get:function(){return this.videoMetaInited?this.vCtx.currentTime/1e3:0}},{key:"duration",get:function(){return this.audioMetaInited?this.aCtx.duration:0}},{key:"paused",get:function(){return this._paused}},{key:"playbackRate",get:function(){return this.hasAttribute("playbackRate")?this.getAttribute("playbackRate"):1},set:function(e){this.setAttribute("playbackrate",e),this.aCtx.playbackRate=e,this.vCtx.playbackRate=e,this.dispatchEvent(new Event("ratechange"))}},{key:"ended",get:function(){return!!this.audioMetaInited&&this.aCtx.ended}},{key:"autoplay",get:function(){return!!this.hasAttribute("autoplay")&&this.getAttribute("autoplay")},set:function(e){this.setAttribute("autoplay",e)}},{key:"volume",get:function(){return this.aCtx.volume},set:function(e){this.setAttribute("volume",e),this.aCtx.volume=e}},{key:"muted",get:function(){const e="true"===this.getAttribute("muted");return void 0!==e?e:!!this.getAttribute("volume")&&0===Number.parseInt(this.getAttribute("volume"))},set:function(e){this.setAttribute("muted",e),this.aCtx.muted=!!e}},{key:"error",get:function(){return this.vCtx.error||this.aCtx.error}},{key:"buffered",get:function(){return this.vCtx.buffered}}]),t}();customElements.define("mobile-video",c)},"../xgplayer-utils/src/mobile/sourcebuffer.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/sourcebuffer.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.config=Object.assign({},t),this.type=this.config.type,this.buffer=[],this.currentGop=void 0,this._lastGet=void 0}return n(e,[{key:"push",value:function(e){if("video"===this.type){if(e.isKeyframe){let t={samples:[],start:e.dts,end:e.dts,nextGop:void 0};this.currentGop&&(this.currentGop.nextGop=t),this.currentGop=t,this.buffer.push(this.currentGop)}this.currentGop&&(this.currentGop.samples.push(e),e.dts<this.currentGop.start&&(this.currentGop.start=e.dts),e.dts>this.currentGop.end&&(this.currentGop.end=e.dts))}}},{key:"get",value:function(e){if("video"===this.type){if(this.buffer.length<1)return;if(void 0===e){return this._getNext()}}}},{key:"_getNext",value:function(){if(this._lastGet){let e=this._lastGet.gop,t=e.samples[this._lastGet.index+1];if(t)return this._lastGet.index=this._lastGet.index+1,t;if(!(e=e.nextGop)||e.samples.length<1)return;return t=e.samples[0],this._lastGet={gop:e,index:0},t}{let e=this.buffer[0];if(e.samples.length<1)return;return this._lastGet={gop:e,index:0},e.samples[0]}}},{key:"remove",value:function(e,t){if(this.buffer.length<0)return;let i=0,n=this.buffer[0];for(;n;)n.end<t&&n.start>=e?(this.buffer.splice(i,1),n=this.buffer[i]):(i+=1,n=this.buffer[i])}}]),e}();t.default=r},"../xgplayer-utils/src/mobile/ticker.js":
/*!**********************************************!*\
  !*** ../xgplayer-utils/src/mobile/ticker.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function e(t,i,n){null===t&&(t=Function.prototype);var r=Object.getOwnPropertyDescriptor(t,i);if(void 0===r){var s=Object.getPrototypeOf(t);return null===s?void 0:e(s,i,n)}if("value"in r)return r.value;var a=r.get;return void 0!==a?a.call(n):void 0},r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}let u=function(){function e(t){o(this,e),this.options=Object.assign({},t||{},{interval:16}),this.callbacks=[]}return r(e,[{key:"start",value:function(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];this.callbacks=t}},{key:"onTick",value:function(){for(let e=0,t=this.callbacks.length;e<t;e++){(0,this.callbacks[e])()}}},{key:"setInterval",value:function(e){return this.options.interval=e,this}}]),e}(),l=function(e){function t(e){o(this,t);var i=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return i.prev=null,i.timerId=null,i._subTimerId=null,i._tickFunc=t.getTickFunc(),i.tick=i.tick.bind(i),i}return a(t,e),r(t,[{key:"start",value:function(){for(var e,i=arguments.length,r=Array(i),s=0;s<i;s++)r[s]=arguments[s];(e=n(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"start",this)).call.apply(e,[this].concat(r)),this.tick()}},{key:"tick",value:function(){this.nextTick(),this.onTick()}},{key:"nextTick",value:function(){const{_tickFunc:e}=this;this.timerId=e(this.tick)}},{key:"stop",value:function(){if(this.timerId){t.getCancelFunc()(this.timerId)}}},{key:"resume",value:function(){this.nextTick()}}],[{key:"getTickFunc",value:function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame}},{key:"getCancelFunc",value:function(){return window.cancelAnimationFrame||window.webkitCancelAnimationFrame}},{key:"isSupported",value:function(){return void 0!==t.getTickFunc()}}]),t}(u),c=function(e){function t(e){o(this,t);var i=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return i.timeoutId=null,i}return a(t,e),r(t,[{key:"start",value:function(){for(var e,i=arguments.length,r=Array(i),s=0;s<i;s++)r[s]=arguments[s];(e=n(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"nextTick",this)).call.apply(e,[this].concat(r)),this.timeoutId=window.setInterval(()=>{this.onTick()},this.options.interval||16)}},{key:"stop",value:function(){this.timeoutId&&window.clearInterval(this.timeoutId)}}]),t}(u);t.getTicker=()=>l.isSupported()?l:c},"../xgplayer-utils/src/mobile/video-context.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/video-context.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),r=c(i(/*! webworkify-webpack */"../xgplayer-utils/node_modules/webworkify-webpack/index.js")),s=c(i(/*! ../write/stream */"../xgplayer-utils/src/write/stream.js")),a=c(i(/*! ../../../xgplayer-codec/src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js")),o=c(i(/*! ./yuv-canvas */"../xgplayer-utils/src/mobile/yuv-canvas.js")),u=c(i(/*! ./sourcebuffer */"../xgplayer-utils/src/mobile/sourcebuffer.js")),l=c(i(/*! ../models/TimeRanges */"../xgplayer-utils/src/models/TimeRanges.js"));function c(e){return e&&e.__esModule?e:{default:e}}let f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.config=Object.assign({},t),this.canvas=this.config.canvas?this.config.canvas:document.createElement("canvas"),this.source=new u.default({type:"video"}),this.preloadTime=this.config.preloadTime||3,this.oncanplay=void 0,this.onFirstFrame=void 0,this.meta=void 0,this.readyStatus=0,this.paused=!0,this.count=0,this.currentTime=0,this.lastPlayed=0,this._decoderInited=!1,this._avccpushed=!1,this._decodedFrames={},this._lastSampleDts=void 0,this._baseDts=void 0,this._lastRenderTime=null,this.playFinish=null}return n(e,[{key:"pause",value:function(){this.paused=!0}},{key:"initWasmWorker",value:function(){let e=this;this.wasmworker=(0,r.default)(/*! ./worker.js */"../xgplayer-utils/src/mobile/worker.js"),this.wasmworker.postMessage({msg:"init",meta:this.meta}),this.wasmworker.addEventListener("message",t=>{switch(t.data.msg){case"DECODER_READY":e._decoderInited=!0;break;case"DECODED":this._onDecoded(t.data)}})}},{key:"setVideoMetaData",value:function(e){if(this.meta=e,!this._decoderInited)return void this.initWasmWorker();this._avccpushed=!0;let t=new Uint8Array(e.sps.byteLength+4);if(t.set([0,0,0,1]),t.set(e.sps,4),this.wasmworker.postMessage({msg:"decode",data:t}),(t=new Uint8Array(e.pps.byteLength+4)).set([0,0,0,1]),t.set(e.pps,4),this.wasmworker.postMessage({msg:"decode",data:t}),!this.yuvCanvas){let t=Object.assign({meta:e,canvas:this.canvas},this.config);this.yuvCanvas=new o.default(t)}this.readyStatus=1}},{key:"decodeVideo",value:function(e){if(!this._decoderInited)return;this._avccpushed||this.setVideoMetaData(this.meta);let{samples:t}=e,i=t.shift();for(;i;)this._baseDts||(this._baseDts=i.dts),this.source.push(i),i=t.shift();this._preload()}},{key:"_preload",value:function(){if(!this._lastSampleDts||this._lastSampleDts-this._baseDts<this.currentTime+1e3*this.preloadTime){let e=this.source.get();for(e&&(this._lastSampleDts=e.dts,this._analyseNal(e));e&&this._lastSampleDts-this._baseDts<this.currentTime+1e3*this.preloadTime;)(e=this.source.get())&&(this._analyseNal(e),this._lastSampleDts=e.dts)}}},{key:"_analyseNal",value:function(e){let t=a.default.getAvccNals(new s.default(e.data.buffer)),i=0;for(let e=0;e<t.length;e++){i+=t[e].body.byteLength+4}let n=0,r=new Uint8Array(i);for(let e=0;e<t.length;e++){let i=t[e];r.set([0,0,0,1],n),n+=4,r.set(new Uint8Array(i.body),n),n+=i.body.byteLength}this.wasmworker.postMessage({msg:"decode",data:r,info:{dts:e.dts,pts:e.pts?e.pts:e.dts+e.cts,key:e.isKeyframe}})}},{key:"_onDecoded",value:function(e){let{dts:t}=e.info;this._decodedFrames[t]=e,Object.keys(this._decodedFrames).length>10&&(this.playFinish&&this.playFinish(),this.oncanplay&&this.oncanplay())}},{key:"play",value:function(){return this.paused=!1,new Promise(e=>{this.playFinish=e}).then(()=>{this.playFinish=null})}},{key:"_onTimer",value:function(e){if(!this.paused){if(this.meta){this.meta.frameRate&&this.meta.frameRate.fixed&&this.meta.frameRate.fps;let t=Object.keys(this._decodedFrames);if(t.length>0){this.currentTime=e;let i=-1;for(let e=0;e<t.length&&Number.parseInt(t[e])-this._baseDts<=this.currentTime;e++)i=Number.parseInt(t[e-1]);let n=this._decodedFrames[i];n&&this.yuvCanvas.render(n.buffer,n.width,n.height,n.yLinesize,n.uvLinesize);for(let e=0;e<t.length;e++)Number.parseInt(t[e])<i&&delete this._decodedFrames[t[e]]}}this._lastRenderTime=Date.now()}}},{key:"cleanBuffer",value:function(){this.currentTime>1&&this.source.remove(0,this.currentTime-1)}},{key:"destroy",value:function(){this.wasmworker.postMessage({msg:"destroy"}),this.wasmworker=null,this.canvas=null,this.source=null,this._decoderInited=!1}},{key:"buffered",get:function(){const e=[];let t={start:null,end:null};for(let e=0;e<this.source.buffer.length;e++){const{start:i,end:n}=this.source.buffer[e];t.start||(t.start=i),t.end||(t.end=n),i-t.end>1e3?(t.start=t.start/1e3,t.end=t.end/1e3,t={start:i,end:n}):t.end=n}return null!==t.start&&null!==t.end&&(t.start=t.start/1e3,t.end=t.end/1e3,e.push(t)),new l.default(e)}}]),e}();t.default=f},"../xgplayer-utils/src/mobile/worker.js":
/*!**********************************************!*\
  !*** ../xgplayer-utils/src/mobile/worker.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,i){"use strict";var n,r=function(e){this.inited=!1,this.self=e,this.meta=this.self.meta,this.infolist={},e.par_broadwayOnBroadwayInited=this.broadwayOnBroadwayInited.bind(this),e.par_broadwayOnPictureDecoded=this.broadwayOnPictureDecoded.bind(this)};function s(){(n=new r(this)).init()}function a(e){self.importScripts("https://sf1-vcloudcdn.pstatp.com/obj/ttfe/media/decoder/h264/decoder.js"),addOnPostRun(s.bind(self))}r.prototype.toU8Array=function(e,t){return this.self.HEAPU8.subarray(e,e+t)},r.prototype.init=function(){Module._broadwayInit(),this.streamBuffer=this.toU8Array(Module._broadwayCreateStream(1048576),1048576)},r.prototype.broadwayOnPictureDecoded=function(e,t,i,n,r,s){let a=Object.assign({},this.infolist[s]),o=i,u=i/2;444!==this.meta.chromaFormat&&422!==this.meta.chromaFormat||(u=i);let l=this.toU8Array(e,n*o+r*u*2);this.infolist[s]=null;let c=new Uint8Array(l.length);c.set(l);let f=c.buffer;this.self.postMessage({msg:"DECODED",width:t,height:i,yLinesize:n,uvLinesize:r,info:a,buffer:f},[f])},r.prototype.broadwayOnBroadwayInited=function(){this.inited=!0,this.self.postMessage({msg:"DECODER_READY"})},r.prototype.decode=function(e,t){let i=parseInt((new Date).getTime()),n=i-1e9*Math.floor(i/1e9);this.infolist[n]=t,this.streamBuffer.set(e),Module._broadwayPlayStream(e.length,n)},r.prototype.destroy=function(){Module._broadwayExit()},e.exports=function(e){e.addEventListener("message",(function(t){var i=t.data;if(i.msg)switch(i.msg){case"init":console.log(i),e.meta=i.meta,a();break;case"decode":n.decode(i.data,i.info);break;case"destory":n.destroy()}else e.postMessage({msg:"ERROR:invalid message"})}),!1)}},"../xgplayer-utils/src/mobile/yuv-canvas.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/mobile/yuv-canvas.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.configs=Object.assign({},t),this.canvas=this.configs.canvas,this.meta=Object.assign({},this.configs.meta),this.chroma=this.meta.chromaFormat,this.height=this.meta.presentHeight,this.width=this.meta.presentWidth,this._initContextGL(),this.contextGL&&(this._initProgram(),this._initBuffers(),this._initTextures())}return n(e,[{key:"_initContextGL",value:function(){for(var e=this.canvas,t=null,i=["webgl","experimental-webgl","moz-webgl","webkit-3d"],n=0;!t&&n<i.length;){var r=i[n];try{t=this.contextOptions?e.getContext(r,this.contextOptions):e.getContext(r)}catch(e){t=null}t&&"function"==typeof t.getParameter||(t=null),++n}this.contextGL=t}},{key:"_initProgram",value:function(){var e,t,i=this.contextGL;e=["attribute vec4 vertexPos;","attribute vec4 texturePos;","attribute vec4 uTexturePos;","attribute vec4 vTexturePos;","varying vec2 textureCoord;","varying vec2 uTextureCoord;","varying vec2 vTextureCoord;","void main()","{","  gl_Position = vertexPos;","  textureCoord = texturePos.xy;","  uTextureCoord = uTexturePos.xy;","  vTextureCoord = vTexturePos.xy;","}"].join("\n"),t=["precision highp float;","varying highp vec2 textureCoord;","varying highp vec2 uTextureCoord;","varying highp vec2 vTextureCoord;","uniform sampler2D ySampler;","uniform sampler2D uSampler;","uniform sampler2D vSampler;","uniform mat4 YUV2RGB;","void main(void) {","  highp float y = texture2D(ySampler,  textureCoord).r;","  highp float u = texture2D(uSampler,  uTextureCoord).r;","  highp float v = texture2D(vSampler,  vTextureCoord).r;","  gl_FragColor = vec4(y, u, v, 1) * YUV2RGB;","}"].join("\n");var n=i.createShader(i.VERTEX_SHADER);i.shaderSource(n,e),i.compileShader(n),i.getShaderParameter(n,i.COMPILE_STATUS)||console.log("Vertex shader failed to compile: "+i.getShaderInfoLog(n));var r=i.createShader(i.FRAGMENT_SHADER);i.shaderSource(r,t),i.compileShader(r),i.getShaderParameter(r,i.COMPILE_STATUS)||console.log("Fragment shader failed to compile: "+i.getShaderInfoLog(r));var s=i.createProgram();i.attachShader(s,n),i.attachShader(s,r),i.linkProgram(s),i.getProgramParameter(s,i.LINK_STATUS)||console.log("Program failed to compile: "+i.getProgramInfoLog(s)),i.useProgram(s);var a=i.getUniformLocation(s,"YUV2RGB");i.uniformMatrix4fv(a,!1,[1.16438,0,1.59603,-.87079,1.16438,-.39176,-.81297,.52959,1.16438,2.01723,0,-1.08139,0,0,0,1]),this.shaderProgram=s}},{key:"_initBuffers",value:function(){var e=this.contextGL,t=this.shaderProgram,i=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,i),e.bufferData(e.ARRAY_BUFFER,new Float32Array([1,1,-1,1,1,-1,-1,-1]),e.STATIC_DRAW);var n=e.getAttribLocation(t,"vertexPos");e.enableVertexAttribArray(n),e.vertexAttribPointer(n,2,e.FLOAT,!1,0,0);var r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,new Float32Array([1,0,0,0,1,1,0,1]),e.STATIC_DRAW);var s=e.getAttribLocation(t,"texturePos");e.enableVertexAttribArray(s),e.vertexAttribPointer(s,2,e.FLOAT,!1,0,0),this.texturePosBuffer=r;var a=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,a),e.bufferData(e.ARRAY_BUFFER,new Float32Array([1,0,0,0,1,1,0,1]),e.STATIC_DRAW);var o=e.getAttribLocation(t,"uTexturePos");e.enableVertexAttribArray(o),e.vertexAttribPointer(o,2,e.FLOAT,!1,0,0),this.uTexturePosBuffer=a;var u=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,u),e.bufferData(e.ARRAY_BUFFER,new Float32Array([1,0,0,0,1,1,0,1]),e.STATIC_DRAW);var l=e.getAttribLocation(t,"vTexturePos");e.enableVertexAttribArray(l),e.vertexAttribPointer(l,2,e.FLOAT,!1,0,0),this.vTexturePosBuffer=u}},{key:"_initTextures",value:function(){var e=this.contextGL,t=this.shaderProgram,i=this._initTexture(),n=e.getUniformLocation(t,"ySampler");e.uniform1i(n,0),this.yTextureRef=i;var r=this._initTexture(),s=e.getUniformLocation(t,"uSampler");e.uniform1i(s,1),this.uTextureRef=r;var a=this._initTexture(),o=e.getUniformLocation(t,"vSampler");e.uniform1i(o,2),this.vTextureRef=a}},{key:"_initTexture",value:function(){var e=this.contextGL,t=e.createTexture();return e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.bindTexture(e.TEXTURE_2D,null),t}},{key:"_drawPictureGL",value:function(e,t,i,n,r){var s=n*i,a=r*i/2;444!==this.chroma&&422!==this.chroma||(a*=2);let o={yData:(e=new Uint8Array(e)).subarray(0,s),uData:e.subarray(s,s+a),vData:e.subarray(s+a,s+a+a)};this._drawPictureGL420(o,t,i,n,r)}},{key:"_drawPictureGL420",value:function(e,t,i,n,r){var s=this.contextGL,a=this.texturePosBuffer,o=this.uTexturePosBuffer,u=this.vTexturePosBuffer,l=this.yTextureRef,c=this.uTextureRef,f=this.vTextureRef,d=e.yData,h=e.uData,p=e.vData,y=n,m=i,g=t/2,v=i/2;422!==this.chroma&&444!==this.chroma||(v=i);var _=r,b=v;let E=this.canvas.width/this.width,k=this.canvas.height/this.height,T=0,w=0,x=this.canvas.width,A=this.canvas.height;E<k?(A=this.height*this.canvas.width/this.width,w=parseInt((this.canvas.height-this.height*this.canvas.width/this.width)/2)):(x=this.width*this.canvas.height/this.height,T=parseInt((this.canvas.width-this.width*this.canvas.height/this.height)/2)),s.viewport(T,w,x,A);var S=new Float32Array([1,0,0,0,1,1,0,1]);s.bindBuffer(s.ARRAY_BUFFER,a),s.bufferData(s.ARRAY_BUFFER,S,s.DYNAMIC_DRAW);var R=new Float32Array([1,0,0,0,1,1,0,1]);s.bindBuffer(s.ARRAY_BUFFER,o),s.bufferData(s.ARRAY_BUFFER,R,s.DYNAMIC_DRAW);var O=new Float32Array([1,0,0,0,1,1,0,1]);s.bindBuffer(s.ARRAY_BUFFER,u),s.bufferData(s.ARRAY_BUFFER,O,s.DYNAMIC_DRAW),s.activeTexture(s.TEXTURE0),s.bindTexture(s.TEXTURE_2D,l),s.texImage2D(s.TEXTURE_2D,0,s.LUMINANCE,y,m,0,s.LUMINANCE,s.UNSIGNED_BYTE,d),s.activeTexture(s.TEXTURE1),s.bindTexture(s.TEXTURE_2D,c),s.texImage2D(s.TEXTURE_2D,0,s.LUMINANCE,g,v,0,s.LUMINANCE,s.UNSIGNED_BYTE,h),s.activeTexture(s.TEXTURE2),s.bindTexture(s.TEXTURE_2D,f),s.texImage2D(s.TEXTURE_2D,0,s.LUMINANCE,_,b,0,s.LUMINANCE,s.UNSIGNED_BYTE,p),s.drawArrays(s.TRIANGLE_STRIP,0,4)}},{key:"_drawPictureRGB",value:function(e){}},{key:"render",value:function(e,t,i,n,r){this.contextGL?this._drawPictureGL(e,t,i,n,r):this._drawPictureRGB(e)}}]),e}();t.default=r},"../xgplayer-utils/src/models/TimeRanges.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/TimeRanges.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.ranges=t||[]}return n(e,[{key:"start",value:function(e){return this.ranges[e]?this.ranges[e].start:0}},{key:"end",value:function(e){return this.ranges[e]?this.ranges[e].end:0}},{key:"add",value:function(e){this.ranges.push(e)}},{key:"length",get:function(){return this.ranges.length}}]),e}();t.default=r},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/media-info.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();const r=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};let s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}return n(e,[{key:"isComplete",value:function(){return e.isBaseInfoReady(this)&&e.isVideoReady(this)&&e.isAudioReady(this)}}],[{key:"isBaseInfoReady",value:function(e){return r(e)}},{key:"isVideoReady",value:function(e){return!e.hasVideo||r(e.video)}},{key:"isAudioReady",value:function(e){return!e.hasAudio||r(e.video)}}]),e}();t.default=s},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);let i=e.getDefaultInf();if(!t||"[object Object]"!==Object.prototype.toString.call(t))return i;let n=Object.assign({},i,t);Object.entries(n).forEach(e=>{let[t,i]=e;this[t]=i})}return n(e,null,[{key:"getDefaultInf",value:function(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}]),e}();t.default=r},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._type=t,this._list=[],this._lastAppendLocation=-1}return n(e,[{key:"isEmpty",value:function(){return 0===this._list.length}},{key:"clear",value:function(){this._list=[],this._lastAppendLocation=-1}},{key:"_searchNearestSegmentBefore",value:function(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,n=0,r=0,s=i,a=0;if(e<t[0].originDts)return a=-1;for(;r<=s;){if((n=r+Math.floor((s-r)/2))===i||e>t[n].lastSample.originDts&&e<t[n+1].originDts){a=n;break}t[n].originDts<e?r=n+1:s=n-1}return a}},{key:"_searchNearestSegmentAfter",value:function(e){return this._searchNearestSegmentBefore(e)+1}},{key:"append",value:function(e){let t=this._list,i=this._lastAppendLocation,n=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?n=i+1:t.length>0&&(n=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=n,this._list.splice(n,0,e)}},{key:"getLastSegmentBefore",value:function(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}},{key:"getLastSampleBefore",value:function(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}},{key:"getLastRAPBefore",value:function(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}},{key:"type",get:function(){return this._type}},{key:"length",get:function(){return this._list.length}}]),e}();t.default=r},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}return n(e,[{key:"addRAP",value:function(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}]),e}();t.default=r},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/track-meta.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}t.AudioTrackMeta=function(){function e(t){r(this,e);const i={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return t?Object.assign({},i,t):i}return n(e,[{key:"destroy",value:function(){this.init=null}}]),e}(),t.VideoTrackMeta=function(){function e(t){r(this,e);const i={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return t?Object.assign({},i,t):i}return n(e,[{key:"destroy",value:function(){this.init=null,this.sps=null,this.pps=null}}]),e}()},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/track-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}t.AudioTrackSample=function(){function e(t){r(this,e);let i=e.getDefault();return t?Object.assign({},i,t):i}return n(e,null,[{key:"getDefault",value:function(){return{dts:null,pts:null,data:new Uint8Array}}}]),e}(),t.VideoTrackSample=function(){function e(t){r(this,e);let i=e.getDefault();return t?Object.assign({},i,t):i}return n(e,null,[{key:"getDefault",value:function(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}]),e}()},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.configs=Object.assign({},t),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1,this.onSourceOpen=this.onSourceOpen.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onUpdateEnd=this.onUpdateEnd.bind(this),this.onWaiting=this.onWaiting.bind(this)}return n(e,[{key:"init",value:function(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate),this.container.addEventListener("waiting",this.onWaiting)}},{key:"onTimeUpdate",value:function(){this.emit("TIME_UPDATE",this.container)}},{key:"onWaiting",value:function(){this.emit("WAITING",this.container)}},{key:"onSourceOpen",value:function(){this.addSourceBuffers()}},{key:"onUpdateEnd",value:function(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}},{key:"addSourceBuffers",value:function(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),i=this._context.getInstance("TRACKS");t=t.sources;let n=!1;for(let r=0,s=Object.keys(t).length;r<s;r++){let s=Object.keys(t)[r];if("audio"===s?e=i.audioTrack:"video"===s&&(e=i.videoTrack),e){let i="audio"===s?21:40;e.meta&&e.meta.refSampleDuration&&(i=e.meta.refSampleDuration),t[s].data.length>=this.preloadTime/i&&(n=!0)}}if(n){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,i=Object.keys(t).length;e<i;e++){let i=Object.keys(t)[e],n=t[i],r="video"===i?"video/mp4;codecs="+n.mimetype:"audio/mp4;codecs="+n.mimetype,s=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[i]=s,s.addEventListener("updateend",this.onUpdateEnd),this.doAppend()}}}},{key:"doAppend",value:function(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],n=this.sourceBuffers[i];if(!n.updating){let t=e.sources[i];if(t&&!t.inited)n.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&n.appendBuffer(e.buffer.buffer)}}}}},{key:"endOfStream",value:function(){const{readyState:e,activeSourceBuffers:t}=this.mediaSource;if("open"===e&&0===t.length)try{this.mediaSource.endOfStream()}catch(e){}}},{key:"remove",value:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;for(let i=0;i<Object.keys(this.sourceBuffers).length;i++){let n=this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];n.updating||n.remove(t,e)}}},{key:"removeBuffers",value:function(){const t=[];for(let i=0;i<Object.keys(this.sourceBuffers).length;i++){let n,r=this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];r.removeEventListener("updateend",this.onUpdateEnd),r.updating?n=new Promise(t=>{const i=function(){let n=3;const s=()=>{r.updating?n>0?(setTimeout(s,200),n--):t():(e.clearBuffer(r),t())};setTimeout(s,200),r.removeEventListener("updateend",i)};r.addEventListener("updateend",i)}):(e.clearBuffer(r),n=Promise.resolve()),t.push(n)}return Promise.all(t)}},{key:"destroy",value:function(){return this.removeBuffers().then(()=>{for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let t=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];this.mediaSource.removeSourceBuffer(t),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[e]]}this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen),this.endOfStream(),window.URL.revokeObjectURL(this.url),this.url=null,this.configs={},this.container=null,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=1})}}],[{key:"clearBuffer",value:function(e){const t=e.buffered;let i=.1;for(let e=0,n=t.length;e<n;e++)i=t.end(e);try{e.remove(0,i)}catch(e){}}}]),e}();t.default=r},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/buffer.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),a=(n=s)&&n.__esModule?n:{default:n};let o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.buffer=t||new Uint8Array(0)}return r(e,[{key:"write",value:function(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];t.forEach(e=>{this.buffer=(0,a.default)(Uint8Array,this.buffer,e)})}}],[{key:"writeUint32",value:function(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}},{key:"readAsInt",value:function(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}]),e}();t.default=o},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/stream.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();let r=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!(t instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=t,this.dataview=new DataView(t),this.dataview.position=0}return n(e,[{key:"back",value:function(e){this.position-=e}},{key:"skip",value:function(t){let i=Math.floor(t/4),n=t%4;for(let t=0;t<i;t++)e.readByte(this.dataview,4);n>0&&e.readByte(this.dataview,n)}},{key:"readUint8",value:function(){return e.readByte(this.dataview,1)}},{key:"readUint16",value:function(){return e.readByte(this.dataview,2)}},{key:"readUint24",value:function(){return e.readByte(this.dataview,3)}},{key:"readUint32",value:function(){return e.readByte(this.dataview,4)}},{key:"readUint64",value:function(){return e.readByte(this.dataview,8)}},{key:"readInt8",value:function(){return e.readByte(this.dataview,1,!0)}},{key:"readInt16",value:function(){return e.readByte(this.dataview,2,!0)}},{key:"readInt32",value:function(){return e.readByte(this.dataview,4,!0)}},{key:"writeUint32",value:function(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}},{key:"length",get:function(){return this.buffer.byteLength}},{key:"position",set:function(e){this.dataview.position=e},get:function(){return this.dataview.position}}],[{key:"readByte",value:function(e,t,i){let n;switch(t){case 1:n=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:n=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");n=e.getUint8(e.position)<<16,n|=e.getUint8(e.position+1)<<8,n|=e.getUint8(e.position+2);break;case 4:n=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");n=e.getUint32(e.position)<<32,n|=e.getUint32(e.position+4);break;default:n=""}return e.position+=t,n}}]),e}();t.default=r},"./src/hls-vod.js":
/*!************************!*\
  !*** ./src/hls-vod.js ***!
  \************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=i(/*! xgplayer-loader */"../xgplayer-loader/index.js"),u=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),l=i(/*! xgplayer-remux/src/mp4/index */"../xgplayer-remux/src/mp4/index.js"),c=(n=l)&&n.__esModule?n:{default:n},f=i(/*! xgplayer-demux */"../xgplayer-demux/index.js");const d=s.EVENTS.LOADER_EVENTS,h=s.EVENTS.REMUX_EVENTS,p=s.EVENTS.DEMUX_EVENTS,y=s.EVENTS.HLS_EVENTS,m=s.EVENTS.CRYTO_EVENTS;let g=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.configs=Object.assign({},t),this.url="",this.baseurl="",this.sequence=0,this._playlist=null,this.retrytimes=this.configs.retrytimes||3,this.container=this.configs.container,this.preloadTime=this.configs.preloadTime||5,this._lastSeekTime=0,this._player=this.configs.player,this.m3u8Text=null}return r(e,[{key:"init",value:function(){this._context.registry("M3U8_BUFFER",a.XgBuffer),this._tsBuffer=this._context.registry("TS_BUFFER",a.XgBuffer)(),this._tracks=this._context.registry("TRACKS",a.Tracks)(),this._playlist=this._context.registry("PLAYLIST",f.Playlist)({autoclear:!0}),this._presource=this._context.registry("PRE_SOURCE_BUFFER",a.PreSource)(),this._compat=this._context.registry("COMPATIBILITY",u.Compatibility)(),this._context.registry("M3U8_LOADER",o.FetchLoader)({buffer:"M3U8_BUFFER",readtype:1}),this._tsloader=this._context.registry("TS_LOADER",o.FetchLoader)({buffer:"TS_BUFFER",readtype:3}),this._context.registry("TS_DEMUXER",f.TsDemuxer)({inputbuffer:"TS_BUFFER"}),this._context.registry("MP4_REMUXER",c.default),this.mse=this._context.registry("MSE",s.Mse)({container:this.container,preloadTime:this.preloadTime}),this.initEvents()}},{key:"initEvents",value:function(){this.on(d.LOADER_COMPLETE,this._onLoaderCompete.bind(this)),this.on(d.LOADER_ERROR,this._onLoadError.bind(this)),this.on(h.INIT_SEGMENT,this._onInitSegment.bind(this)),this.on(h.MEDIA_SEGMENT,this._onMediaSegment.bind(this)),this.on(p.METADATA_PARSED,this._onMetadataParsed.bind(this)),this.on(p.DEMUX_COMPLETE,this._onDemuxComplete.bind(this)),this.on(p.DEMUX_ERROR,this._onDemuxError.bind(this)),this.on(h.REMUX_ERROR,this._onRemuxError.bind(this)),this.on("TIME_UPDATE",this._onTimeUpdate.bind(this)),this.on("WAITING",this._onWaiting.bind(this))}},{key:"_onError",value:function(e,t,i,n){let r={errorType:e,errorDetails:`[${t}]: ${i.message}`,errorFatal:n};this._player&&this._player.emit("HLS_ERROR",r)}},{key:"_onLoadError",value:function(e,t){this._onError(d.LOADER_ERROR,e,t,!0),this.emit(y.RETRY_TIME_EXCEEDED)}},{key:"_onDemuxError",value:function(e,t,i){void 0===i&&(i=!0),this._onError(d.LOADER_ERROR,e,t,i)}},{key:"_onRemuxError",value:function(e,t,i){void 0===i&&(i=!0),this._onError(h.REMUX_ERROR,e,t,i)}},{key:"_onWaiting",value:function(e){let t=!0;for(let e=0;e<Object.keys(this._playlist.list).length;e++)1e3*this.container.currentTime<parseInt(Object.keys(this._playlist.list)[e])&&(t=!1);if(t){let e=this._playlist.getTs(1e3*this.container.currentTime);e?e.downloaded&&(this._player.emit("ended"),this.mse.endOfStream()):(this._player.emit("ended"),this.mse.endOfStream())}}},{key:"_onTimeUpdate",value:function(e){this._preload(e.currentTime)}},{key:"_onDemuxComplete",value:function(){this.emit(h.REMUX_MEDIA)}},{key:"_onMetadataParsed",value:function(e){let t=parseInt(this._playlist.duration);"video"===e?this._tracks.videoTrack.meta.duration=t:"audio"===e&&(this._tracks.audioTrack.meta.duration=t),this.emit(h.REMUX_METADATA,e)}},{key:"_onMediaSegment",value:function(){Object.keys(this.mse.sourceBuffers).length<1&&this.mse.addSourceBuffers(),this.mse.doAppend()}},{key:"_onInitSegment",value:function(){this.mse.addSourceBuffers()}},{key:"_onLoaderCompete",value:function(e){if("M3U8_BUFFER"===e.TAG){this.m3u8Text=e.shift();let t=f.M3U8Parser.parse(this.m3u8Text,this.baseurl);try{this._playlist.pushM3U8(t)}catch(e){this._onError("M3U8_PARSER_ERROR","PLAYLIST",e,!0)}if(this._playlist.encrypt&&this._playlist.encrypt.uri&&!this._playlist.encrypt.key)this._context.registry("DECRYPT_BUFFER",a.XgBuffer)(),this._context.registry("KEY_BUFFER",a.XgBuffer)(),this._tsloader.buffer="DECRYPT_BUFFER",this._keyLoader=this._context.registry("KEY_LOADER",o.FetchLoader)({buffer:"KEY_BUFFER",readtype:3}),this.emitTo("KEY_LOADER",d.LADER_START,this._playlist.encrypt.uri);else{this.preloadTime||(this._playlist.targetduration?(this.preloadTime=this._playlist.targetduration,this.mse.preloadTime=this._playlist.targetduration):(this.preloadTime=5,this.mse.preloadTime=5));let e=this._playlist.getTs();e?(this._playlist.downloading(e.url,!0),this.emitTo("TS_LOADER",d.LADER_START,e.url)):this.retrytimes>0&&(this.retrytimes--,this.emitTo("M3U8_LOADER",d.LADER_START,this.url))}}else if("TS_BUFFER"===e.TAG)this._preload(this.mse.container.currentTime),this._playlist.downloaded(this._tsloader.url,!0),this.emit(p.DEMUX_START,Object.assign({url:this._tsloader.url},this._playlist._ts[this._tsloader.url]));else if("DECRYPT_BUFFER"===e.TAG)this.retrytimes=this.configs.retrytimes||3,this._playlist.downloaded(this._tsloader.url,!0),this.emitTo("CRYPTO",m.START_DECRYPT,Object.assign({url:this._tsloader.url},this._playlist._ts[this._tsloader.url]));else if("KEY_BUFFER"==e.TAG){this.retrytimes=this.configs.retrytimes||3,this._playlist.encrypt.key=e.shift(),this._crypto=this._context.registry("CRYPTO",s.Crypto)({key:this._playlist.encrypt.key,iv:this._playlist.encrypt.ivb,method:this._playlist.encrypt.method,inputbuffer:"DECRYPT_BUFFER",outputbuffer:"TS_BUFFER"}),this._crypto.on(m.DECRYPTED,this._onDcripted.bind(this));let t=this._playlist.getTs();t?(this._playlist.downloading(t.url,!0),this.emitTo("TS_LOADER",d.LADER_START,t.url)):this.retrytimes>0&&(this.retrytimes--,this.emitTo("M3U8_LOADER",d.LADER_START,this.url))}}},{key:"_onDcripted",value:function(){this.emit(p.DEMUX_START)}},{key:"seek",value:function(e){this._lastSeekTime=e,this._tsloader.cancel(),this._presource.sources.video&&(this._presource.sources.video.data=[]),this._presource.sources.audio&&(this._presource.sources.audio.data=[]),this._tracks.audioTrack&&(this._tracks.audioTrack.samples=[]),this._tracks.audioTrack&&(this._tracks.videoTrack.samples=[]),this._compat&&this._compat.reset(),this._tsBuffer&&(this._tsBuffer.array=[],this._tsBuffer.length=0,this._tsBuffer.offset=0),this._playlist.clearDownloaded(),this._preload(e)}},{key:"load",value:function(e){this.baseurl=f.M3U8Parser.parseURL(e),this.url=e,this.emitTo("M3U8_LOADER",d.LADER_START,e)}},{key:"_preload",value:function(e){if(this._tsloader.loading)return;let t=this.mse.container;if(t.buffered.length<1){let e=this._playlist.getTs(0);!e||e.downloading||e.downloaded||(this._playlist.downloading(e.url,!0),this.emitTo("TS_LOADER",d.LADER_START,e.url))}else{let i=-1;e||(e=t.buffered.end(0));for(let n=0;n<t.buffered.length;n++)e>=t.buffered.start(n)&&e<t.buffered.end(n)&&(i=t.buffered.end(n));if(i<0){let t=this._playlist.getTs(1e3*e+1);!t||t.downloading||t.downloaded||(this._playlist.downloading(t.url,!0),this.emitTo("TS_LOADER",d.LADER_START,t.url))}else if(i<e+this.preloadTime){let t=this._playlist.getTs(1e3*i+1),n=t?(t.time+t.duration)/1e3:0;for(;t&&t.downloaded&&n<e+this.preloadTime;)n=(t=this._playlist.getTs(1e3*n+1))?(t.time+t.duration)/1e3:0;!t||t.downloading||t.downloaded||(this._playlist.downloading(t.url,!0),this.emitTo("TS_LOADER",d.LADER_START,t.url))}}}},{key:"destory",value:function(){this.configs={},this.url="",this.baseurl="",this.sequence=0,this._playlist=null,this.retrytimes=3,this.container=void 0,this.preloadTime=5,this._lastSeekTime=0,this.m3u8Text=null,this.mse=null,this.off(d.LOADER_COMPLETE,this._onLoaderCompete),this.off(h.INIT_SEGMENT,this._onInitSegment),this.off(h.MEDIA_SEGMENT,this._onMediaSegment),this.off(p.METADATA_PARSED,this._onMetadataParsed),this.off(p.DEMUX_COMPLETE,this._onDemuxComplete),this.off("TIME_UPDATE",this._onTimeUpdate),this.off("WAITING",this._onWaiting)}}]),e}();t.default=g},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HlsVodPlayer=void 0;var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),r=function e(t,i,n){null===t&&(t=Function.prototype);var r=Object.getOwnPropertyDescriptor(t,i);if(void 0===r){var s=Object.getPrototypeOf(t);return null===s?void 0:e(s,i,n)}if("value"in r)return r.value;var a=r.get;return void 0!==a?a.call(n):void 0},s=u(i(/*! xgplayer */"xgplayer")),a=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),o=u(i(/*! ./hls-vod */"./src/hls-vod.js"));function u(e){return e&&e.__esModule?e:{default:e}}const l=a.EVENTS.HlsAllowedEvents,c=a.EVENTS.REMUX_EVENTS,f=a.EVENTS.HLS_EVENTS;let d=t.HlsVodPlayer=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return i.hlsOps={},i.util=s.default.util,i.util.deepCopy(i.hlsOps,e),i._context=new a.Context(l),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),n(t,[{key:"_initEvents",value:function(){this.__core__.once(c.INIT_SEGMENT,()=>{const e=this._context.getInstance("MSE");r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"start",this).call(this,e.url)}),this.__core__.once(f.RETRY_TIME_EXCEEDED,()=>{this.emit("error",new s.default.Errors("network",this.config.url))}),this.once("canplay",()=>{this.play()})}},{key:"_initSrcChangeHandler",value:function(){let e=this;Object.defineProperty(this,"src",{get:()=>e.currentSrc,set(t){e.config.url=t,e.paused?e.start(t):(e.pause(),e.once("pause",()=>{e.start(t)}),e.once("canplay",()=>{e.play()})),e.once("canplay",()=>{e.currentTime=0})},configurable:!0})}},{key:"start",value:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.config.url;e&&(this.__core__=this._context.registry("HLS_LIVE_CONTROLLER",o.default)({player:this,container:this.video}),this._context.init(),this.__core__.load(e),this._initEvents(),this._initSrcChangeHandler())}},{key:"destroy",value:function(){this._context.destroy(),r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"destroy",this).call(this)}},{key:"currentTime",get:function(){return r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"currentTime",this)},set:function(e){e=parseFloat(e),function e(t,i,n,r){var s=Object.getOwnPropertyDescriptor(t,i);if(void 0===s){var a=Object.getPrototypeOf(t);null!==a&&e(a,i,n,r)}else if("value"in s&&s.writable)s.value=n;else{var o=s.set;void 0!==o&&o.call(r,n)}return n}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"currentTime",parseInt(e),this),this._context&&this.__core__.seek(e)}}]),t}(s.default);e.exports=d},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!*************************!*\
  !*** external "Player" ***!
  \*************************/
/*! no static exports found */function(e,t){e.exports=window.Player}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,