(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("xgplayer"));
	else if(typeof define === 'function' && define.amd)
		define(["xgplayer"], factory);
	else if(typeof exports === 'object')
		exports["xgplayer-flv.js"] = factory(require("xgplayer"));
	else
		root["xgplayer-flv.js"] = factory(root["xgplayer"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_xgplayer__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/es6-promise/dist/es6-promise.js":
/*!******************************************************!*\
  !*** ./node_modules/es6-promise/dist/es6-promise.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.5+7f2b526d
 */

(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(undefined, function () {
  'use strict';

  function objectOrFunction(x) {
    var type = typeof x === 'undefined' ? 'undefined' : _typeof(x);
    return x !== null && (type === 'object' || type === 'function');
  }

  function isFunction(x) {
    return typeof x === 'function';
  }

  var _isArray = void 0;
  if (Array.isArray) {
    _isArray = Array.isArray;
  } else {
    _isArray = function _isArray(x) {
      return Object.prototype.toString.call(x) === '[object Array]';
    };
  }

  var isArray = _isArray;

  var len = 0;
  var vertxNext = void 0;
  var customSchedulerFn = void 0;

  var asap = function asap(callback, arg) {
    queue[len] = callback;
    queue[len + 1] = arg;
    len += 2;
    if (len === 2) {
      // If len is 2, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      if (customSchedulerFn) {
        customSchedulerFn(flush);
      } else {
        scheduleFlush();
      }
    }
  };

  function setScheduler(scheduleFn) {
    customSchedulerFn = scheduleFn;
  }

  function setAsap(asapFn) {
    asap = asapFn;
  }

  var browserWindow = typeof window !== 'undefined' ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

  // test for web worker but not in IE10
  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

  // node
  function useNextTick() {
    // node version 0.10.x displays a deprecation warning when nextTick is used recursively
    // see https://github.com/cujojs/when/issues/410 for details
    return function () {
      return process.nextTick(flush);
    };
  }

  // vertx
  function useVertxTimer() {
    if (typeof vertxNext !== 'undefined') {
      return function () {
        vertxNext(flush);
      };
    }

    return useSetTimeout();
  }

  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, { characterData: true });

    return function () {
      node.data = iterations = ++iterations % 2;
    };
  }

  // web worker
  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return function () {
      return channel.port2.postMessage(0);
    };
  }

  function useSetTimeout() {
    // Store setTimeout reference so es6-promise will be unaffected by
    // other code modifying setTimeout (like sinon.useFakeTimers())
    var globalSetTimeout = setTimeout;
    return function () {
      return globalSetTimeout(flush, 1);
    };
  }

  var queue = new Array(1000);
  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue[i];
      var arg = queue[i + 1];

      callback(arg);

      queue[i] = undefined;
      queue[i + 1] = undefined;
    }

    len = 0;
  }

  function attemptVertx() {
    try {
      var vertx = Function('return this')().require('vertx');
      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }

  var scheduleFlush = void 0;
  // Decide what async method to use to triggering processing of queued callbacks:
  if (isNode) {
    scheduleFlush = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush = useMessageChannel();
  } else if (browserWindow === undefined && "function" === 'function') {
    scheduleFlush = attemptVertx();
  } else {
    scheduleFlush = useSetTimeout();
  }

  function then(onFulfillment, onRejection) {
    var parent = this;

    var child = new this.constructor(noop);

    if (child[PROMISE_ID] === undefined) {
      makePromise(child);
    }

    var _state = parent._state;

    if (_state) {
      var callback = arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    } else {
      subscribe(parent, child, onFulfillment, onRejection);
    }

    return child;
  }

  /**
    `Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:
  
    ```javascript
    let promise = new Promise(function(resolve, reject){
      resolve(1);
    });
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    let promise = Promise.resolve(1);
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    @method resolve
    @static
    @param {Any} value value that the returned promise will be resolved with
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */
  function resolve$1(object) {
    /*jshint validthis:true */
    var Constructor = this;

    if (object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object.constructor === Constructor) {
      return object;
    }

    var promise = new Constructor(noop);
    resolve(promise, object);
    return promise;
  }

  var PROMISE_ID = Math.random().toString(36).substring(2);

  function noop() {}

  var PENDING = void 0;
  var FULFILLED = 1;
  var REJECTED = 2;

  var TRY_CATCH_ERROR = { error: null };

  function selfFulfillment() {
    return new TypeError("You cannot resolve a promise with itself");
  }

  function cannotReturnOwn() {
    return new TypeError('A promises callback cannot return that same promise.');
  }

  function getThen(promise) {
    try {
      return promise.then;
    } catch (error) {
      TRY_CATCH_ERROR.error = error;
      return TRY_CATCH_ERROR;
    }
  }

  function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
    try {
      then$$1.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }

  function handleForeignThenable(promise, thenable, then$$1) {
    asap(function (promise) {
      var sealed = false;
      var error = tryThen(then$$1, thenable, function (value) {
        if (sealed) {
          return;
        }
        sealed = true;
        if (thenable !== value) {
          resolve(promise, value);
        } else {
          fulfill(promise, value);
        }
      }, function (reason) {
        if (sealed) {
          return;
        }
        sealed = true;

        reject(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));

      if (!sealed && error) {
        sealed = true;
        reject(promise, error);
      }
    }, promise);
  }

  function handleOwnThenable(promise, thenable) {
    if (thenable._state === FULFILLED) {
      fulfill(promise, thenable._result);
    } else if (thenable._state === REJECTED) {
      reject(promise, thenable._result);
    } else {
      subscribe(thenable, undefined, function (value) {
        return resolve(promise, value);
      }, function (reason) {
        return reject(promise, reason);
      });
    }
  }

  function handleMaybeThenable(promise, maybeThenable, then$$1) {
    if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
      handleOwnThenable(promise, maybeThenable);
    } else {
      if (then$$1 === TRY_CATCH_ERROR) {
        reject(promise, TRY_CATCH_ERROR.error);
        TRY_CATCH_ERROR.error = null;
      } else if (then$$1 === undefined) {
        fulfill(promise, maybeThenable);
      } else if (isFunction(then$$1)) {
        handleForeignThenable(promise, maybeThenable, then$$1);
      } else {
        fulfill(promise, maybeThenable);
      }
    }
  }

  function resolve(promise, value) {
    if (promise === value) {
      reject(promise, selfFulfillment());
    } else if (objectOrFunction(value)) {
      handleMaybeThenable(promise, value, getThen(value));
    } else {
      fulfill(promise, value);
    }
  }

  function publishRejection(promise) {
    if (promise._onerror) {
      promise._onerror(promise._result);
    }

    publish(promise);
  }

  function fulfill(promise, value) {
    if (promise._state !== PENDING) {
      return;
    }

    promise._result = value;
    promise._state = FULFILLED;

    if (promise._subscribers.length !== 0) {
      asap(publish, promise);
    }
  }

  function reject(promise, reason) {
    if (promise._state !== PENDING) {
      return;
    }
    promise._state = REJECTED;
    promise._result = reason;

    asap(publishRejection, promise);
  }

  function subscribe(parent, child, onFulfillment, onRejection) {
    var _subscribers = parent._subscribers;
    var length = _subscribers.length;

    parent._onerror = null;

    _subscribers[length] = child;
    _subscribers[length + FULFILLED] = onFulfillment;
    _subscribers[length + REJECTED] = onRejection;

    if (length === 0 && parent._state) {
      asap(publish, parent);
    }
  }

  function publish(promise) {
    var subscribers = promise._subscribers;
    var settled = promise._state;

    if (subscribers.length === 0) {
      return;
    }

    var child = void 0,
        callback = void 0,
        detail = promise._result;

    for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];

      if (child) {
        invokeCallback(settled, child, callback, detail);
      } else {
        callback(detail);
      }
    }

    promise._subscribers.length = 0;
  }

  function tryCatch(callback, detail) {
    try {
      return callback(detail);
    } catch (e) {
      TRY_CATCH_ERROR.error = e;
      return TRY_CATCH_ERROR;
    }
  }

  function invokeCallback(settled, promise, callback, detail) {
    var hasCallback = isFunction(callback),
        value = void 0,
        error = void 0,
        succeeded = void 0,
        failed = void 0;

    if (hasCallback) {
      value = tryCatch(callback, detail);

      if (value === TRY_CATCH_ERROR) {
        failed = true;
        error = value.error;
        value.error = null;
      } else {
        succeeded = true;
      }

      if (promise === value) {
        reject(promise, cannotReturnOwn());
        return;
      }
    } else {
      value = detail;
      succeeded = true;
    }

    if (promise._state !== PENDING) {
      // noop
    } else if (hasCallback && succeeded) {
      resolve(promise, value);
    } else if (failed) {
      reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      reject(promise, value);
    }
  }

  function initializePromise(promise, resolver) {
    try {
      resolver(function resolvePromise(value) {
        resolve(promise, value);
      }, function rejectPromise(reason) {
        reject(promise, reason);
      });
    } catch (e) {
      reject(promise, e);
    }
  }

  var id = 0;
  function nextId() {
    return id++;
  }

  function makePromise(promise) {
    promise[PROMISE_ID] = id++;
    promise._state = undefined;
    promise._result = undefined;
    promise._subscribers = [];
  }

  function validationError() {
    return new Error('Array Methods must be provided an Array');
  }

  var Enumerator = function () {
    function Enumerator(Constructor, input) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(noop);

      if (!this.promise[PROMISE_ID]) {
        makePromise(this.promise);
      }

      if (isArray(input)) {
        this.length = input.length;
        this._remaining = input.length;

        this._result = new Array(this.length);

        if (this.length === 0) {
          fulfill(this.promise, this._result);
        } else {
          this.length = this.length || 0;
          this._enumerate(input);
          if (this._remaining === 0) {
            fulfill(this.promise, this._result);
          }
        }
      } else {
        reject(this.promise, validationError());
      }
    }

    Enumerator.prototype._enumerate = function _enumerate(input) {
      for (var i = 0; this._state === PENDING && i < input.length; i++) {
        this._eachEntry(input[i], i);
      }
    };

    Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
      var c = this._instanceConstructor;
      var resolve$$1 = c.resolve;

      if (resolve$$1 === resolve$1) {
        var _then = getThen(entry);

        if (_then === then && entry._state !== PENDING) {
          this._settledAt(entry._state, i, entry._result);
        } else if (typeof _then !== 'function') {
          this._remaining--;
          this._result[i] = entry;
        } else if (c === Promise$1) {
          var promise = new c(noop);
          handleMaybeThenable(promise, entry, _then);
          this._willSettleAt(promise, i);
        } else {
          this._willSettleAt(new c(function (resolve$$1) {
            return resolve$$1(entry);
          }), i);
        }
      } else {
        this._willSettleAt(resolve$$1(entry), i);
      }
    };

    Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
      var promise = this.promise;

      if (promise._state === PENDING) {
        this._remaining--;

        if (state === REJECTED) {
          reject(promise, value);
        } else {
          this._result[i] = value;
        }
      }

      if (this._remaining === 0) {
        fulfill(promise, this._result);
      }
    };

    Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
      var enumerator = this;

      subscribe(promise, undefined, function (value) {
        return enumerator._settledAt(FULFILLED, i, value);
      }, function (reason) {
        return enumerator._settledAt(REJECTED, i, reason);
      });
    };

    return Enumerator;
  }();

  /**
    `Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.
  
    Example:
  
    ```javascript
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```
  
    If any of the `promises` given to `all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:
  
    Example:
  
    ```javascript
    let promise1 = resolve(1);
    let promise2 = reject(new Error("2"));
    let promise3 = reject(new Error("3"));
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  
    @method all
    @static
    @param {Array} entries array of promises
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */
  function all(entries) {
    return new Enumerator(this, entries).promise;
  }

  /**
    `Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.
  
    Example:
  
    ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```
  
    `Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:
  
    ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```
  
    An example real-world use case is implementing timeouts:
  
    ```javascript
    Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  
    @method race
    @static
    @param {Array} promises array of promises to observe
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */
  function race(entries) {
    /*jshint validthis:true */
    var Constructor = this;

    if (!isArray(entries)) {
      return new Constructor(function (_, reject) {
        return reject(new TypeError('You must pass an array to race.'));
      });
    } else {
      return new Constructor(function (resolve, reject) {
        var length = entries.length;
        for (var i = 0; i < length; i++) {
          Constructor.resolve(entries[i]).then(resolve, reject);
        }
      });
    }
  }

  /**
    `Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:
  
    ```javascript
    let promise = new Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    let promise = Promise.reject(new Error('WHOOPS'));
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    @method reject
    @static
    @param {Any} reason value that the returned promise will be rejected with.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */
  function reject$1(reason) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(noop);
    reject(promise, reason);
    return promise;
  }

  function needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }

  function needsNew() {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }

  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise's eventual value or the reason
    why the promise cannot be fulfilled.
  
    Terminology
    -----------
  
    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
  
    A promise can be in one of three states: pending, fulfilled, or rejected.
  
    Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
  
    Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
  
  
    Basic Usage:
    ------------
  
    ```js
    let promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
  
      // on failure
      reject(reason);
    });
  
    promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Advanced Usage:
    ---------------
  
    Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
  
    ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        let xhr = new XMLHttpRequest();
  
        xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
  
        function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
  
    getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Unlike callbacks, promises are great composable primitives.
  
    ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
  
      return values;
    });
    ```
  
    @class Promise
    @param {Function} resolver
    Useful for tooling.
    @constructor
  */

  var Promise$1 = function () {
    function Promise(resolver) {
      this[PROMISE_ID] = nextId();
      this._result = this._state = undefined;
      this._subscribers = [];

      if (noop !== resolver) {
        typeof resolver !== 'function' && needsResolver();
        this instanceof Promise ? initializePromise(this, resolver) : needsNew();
      }
    }

    /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
     ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
     Chaining
    --------
     The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
     ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
     findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
     ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
     Assimilation
    ------------
     Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
     If the assimliated promise rejects, then the downstream promise will also reject.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
     Simple Example
    --------------
     Synchronous Example
     ```javascript
    let result;
     try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
     Advanced Example
    --------------
     Synchronous Example
     ```javascript
    let author, books;
     try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
     function foundBooks(books) {
     }
     function failure(reason) {
     }
     findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
     @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
    */

    /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
    ```js
    function findAuthor(){
    throw new Error('couldn't find that author');
    }
    // synchronous
    try {
    findAuthor();
    } catch(reason) {
    // something went wrong
    }
    // async with promises
    findAuthor().catch(function(reason){
    // something went wrong
    });
    ```
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
    */

    Promise.prototype.catch = function _catch(onRejection) {
      return this.then(null, onRejection);
    };

    /**
      `finally` will be invoked regardless of the promise's fate just as native
      try/catch/finally behaves
    
      Synchronous example:
    
      ```js
      findAuthor() {
        if (Math.random() > 0.5) {
          throw new Error();
        }
        return new Author();
      }
    
      try {
        return findAuthor(); // succeed or fail
      } catch(error) {
        return findOtherAuther();
      } finally {
        // always runs
        // doesn't affect the return value
      }
      ```
    
      Asynchronous example:
    
      ```js
      findAuthor().catch(function(reason){
        return findOtherAuther();
      }).finally(function(){
        // author was either found, or not
      });
      ```
    
      @method finally
      @param {Function} callback
      @return {Promise}
    */

    Promise.prototype.finally = function _finally(callback) {
      var promise = this;
      var constructor = promise.constructor;

      if (isFunction(callback)) {
        return promise.then(function (value) {
          return constructor.resolve(callback()).then(function () {
            return value;
          });
        }, function (reason) {
          return constructor.resolve(callback()).then(function () {
            throw reason;
          });
        });
      }

      return promise.then(callback, callback);
    };

    return Promise;
  }();

  Promise$1.prototype.then = then;
  Promise$1.all = all;
  Promise$1.race = race;
  Promise$1.resolve = resolve$1;
  Promise$1.reject = reject$1;
  Promise$1._setScheduler = setScheduler;
  Promise$1._setAsap = setAsap;
  Promise$1._asap = asap;

  /*global self*/
  function polyfill() {
    var local = void 0;

    if (typeof global !== 'undefined') {
      local = global;
    } else if (typeof self !== 'undefined') {
      local = self;
    } else {
      try {
        local = Function('return this')();
      } catch (e) {
        throw new Error('polyfill failed because global object is unavailable in this environment');
      }
    }

    var P = local.Promise;

    if (P) {
      var promiseToString = null;
      try {
        promiseToString = Object.prototype.toString.call(P.resolve());
      } catch (e) {
        // silently ignored
      }

      if (promiseToString === '[object Promise]' && !P.cast) {
        return;
      }
    }

    local.Promise = Promise$1;
  }

  // Strange compat..
  Promise$1.polyfill = polyfill;
  Promise$1.Promise = Promise$1;

  return Promise$1;
});

//# sourceMappingURL=es6-promise.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function (n) {
  if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function (type) {
  var er, handler, len, args, i, listeners;

  if (!this._events) this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler)) return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++) {
      listeners[i].apply(this, args);
    }
  }

  return true;
};

EventEmitter.prototype.addListener = function (type, listener) {
  var m;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function (type, listener) {
  if (!isFunction(listener)) throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function (type, listener) {
  var list, position, length, i;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events || !this._events[type]) return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener || isFunction(list.listener) && list.listener === listener) {
    delete this._events[type];
    if (this._events.removeListener) this.emit('removeListener', type, listener);
  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        position = i;
        break;
      }
    }

    if (position < 0) return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener) this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function (type) {
  var key, listeners;

  if (!this._events) return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length) {
      this.removeListener(type, listeners[listeners.length - 1]);
    }
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function (type) {
  var ret;
  if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function (type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function (emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),

/***/ "./node_modules/webworkify/index.js":
/*!******************************************!*\
  !*** ./node_modules/webworkify/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bundleFn = arguments[3];
var sources = arguments[4];
var cache = arguments[5];

var stringify = JSON.stringify;

module.exports = function (fn, options) {
    var wkey;
    var cacheKeys = Object.keys(cache);

    for (var i = 0, l = cacheKeys.length; i < l; i++) {
        var key = cacheKeys[i];
        var exp = cache[key].exports;
        // Using babel as a transpiler to use esmodule, the export will always
        // be an object with the default export as a property of it. To ensure
        // the existing api and babel esmodule exports are both supported we
        // check for both
        if (exp === fn || exp && exp.default === fn) {
            wkey = key;
            break;
        }
    }

    if (!wkey) {
        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
        var wcache = {};
        for (var i = 0, l = cacheKeys.length; i < l; i++) {
            var key = cacheKeys[i];
            wcache[key] = key;
        }
        sources[wkey] = ['function(require,module,exports){' + fn + '(self); }', wcache];
    }
    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);

    var scache = {};scache[wkey] = wkey;
    sources[skey] = ['function(require,module,exports){' +
    // try to call default if defined to also support babel esmodule exports
    'var f = require(' + stringify(wkey) + ');' + '(f.default ? f.default : f)(self);' + '}', scache];

    var workerSources = {};
    resolveSources(skey);

    function resolveSources(key) {
        workerSources[key] = true;

        for (var depPath in sources[key][1]) {
            var depKey = sources[key][1][depPath];
            if (!workerSources[depKey]) {
                resolveSources(depKey);
            }
        }
    }

    var src = '(' + bundleFn + ')({' + Object.keys(workerSources).map(function (key) {
        return stringify(key) + ':[' + sources[key][0] + ',' + stringify(sources[key][1]) + ']';
    }).join(',') + '},{},[' + stringify(skey) + '])';

    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;

    var blob = new Blob([src], { type: 'text/javascript' });
    if (options && options.bare) {
        return blob;
    }
    var workerUrl = URL.createObjectURL(blob);
    var worker = new Worker(workerUrl);
    worker.objectURL = workerUrl;
    return worker;
};

/***/ }),

/***/ "./src/flv/config.js":
/*!***************************!*\
  !*** ./src/flv/config.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createDefaultConfig = createDefaultConfig;
/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var defaultConfig = exports.defaultConfig = {
    enableWorker: false,
    enableStashBuffer: true,
    stashInitialSize: undefined,

    isLive: false,

    lazyLoad: true,
    lazyLoadMaxDuration: 3 * 60,
    lazyLoadRecoverDuration: 30,
    deferLoadAfterSourceOpen: true,

    // autoCleanupSourceBuffer: default as false, leave unspecified
    autoCleanupMaxBackwardDuration: 3 * 60,
    autoCleanupMinBackwardDuration: 2 * 60,

    statisticsInfoReportInterval: 600,

    fixAudioTimestampGap: true,

    accurateSeek: false,
    seekType: 'range', // [range, param, custom]
    seekParamStart: 'bstart',
    seekParamEnd: 'bend',
    rangeLoadZeroStart: false,
    customSeekHandler: undefined,
    reuseRedirectedURL: false
    // referrerPolicy: leave as unspecified
};

function createDefaultConfig() {
    return Object.assign({}, defaultConfig);
}

/***/ }),

/***/ "./src/flv/core/features.js":
/*!**********************************!*\
  !*** ./src/flv/core/features.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _ioController = __webpack_require__(/*! ../io/io-controller.js */ "./src/flv/io/io-controller.js");

var _ioController2 = _interopRequireDefault(_ioController);

var _config = __webpack_require__(/*! ../config.js */ "./src/flv/config.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Features = function () {
    function Features() {
        _classCallCheck(this, Features);
    }

    _createClass(Features, null, [{
        key: 'supportMSEH264Playback',
        value: function supportMSEH264Playback() {
            return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
        }
    }, {
        key: 'supportNetworkStreamIO',
        value: function supportNetworkStreamIO() {
            var ioctl = new _ioController2.default({}, (0, _config.createDefaultConfig)());
            var loaderType = ioctl.loaderType;
            ioctl.destroy();
            return loaderType == 'fetch-stream-loader' || loaderType == 'xhr-moz-chunked-loader';
        }
    }, {
        key: 'getNetworkLoaderTypeName',
        value: function getNetworkLoaderTypeName() {
            var ioctl = new _ioController2.default({}, (0, _config.createDefaultConfig)());
            var loaderType = ioctl.loaderType;
            ioctl.destroy();
            return loaderType;
        }
    }, {
        key: 'supportNativeMediaPlayback',
        value: function supportNativeMediaPlayback(mimeType) {
            if (Features.videoElement == undefined) {
                Features.videoElement = window.document.createElement('video');
            }
            var canPlay = Features.videoElement.canPlayType(mimeType);
            return canPlay === 'probably' || canPlay == 'maybe';
        }
    }, {
        key: 'getFeatureList',
        value: function getFeatureList() {
            var features = {
                mseFlvPlayback: false,
                mseLiveFlvPlayback: false,
                networkStreamIO: false,
                networkLoaderName: '',
                nativeMP4H264Playback: false,
                nativeWebmVP8Playback: false,
                nativeWebmVP9Playback: false
            };

            features.mseFlvPlayback = Features.supportMSEH264Playback();
            features.networkStreamIO = Features.supportNetworkStreamIO();
            features.networkLoaderName = Features.getNetworkLoaderTypeName();
            features.mseLiveFlvPlayback = features.mseFlvPlayback && features.networkStreamIO;
            features.nativeMP4H264Playback = Features.supportNativeMediaPlayback('video/mp4; codecs="avc1.42001E, mp4a.40.2"');
            features.nativeWebmVP8Playback = Features.supportNativeMediaPlayback('video/webm; codecs="vp8.0, vorbis"');
            features.nativeWebmVP9Playback = Features.supportNativeMediaPlayback('video/webm; codecs="vp9"');

            return features;
        }
    }]);

    return Features;
}();

exports.default = Features;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/core/media-info.js":
/*!************************************!*\
  !*** ./src/flv/core/media-info.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MediaInfo = function () {
    function MediaInfo() {
        _classCallCheck(this, MediaInfo);

        this.mimeType = null;
        this.duration = null;

        this.hasAudio = null;
        this.hasVideo = null;
        this.audioCodec = null;
        this.videoCodec = null;
        this.audioDataRate = null;
        this.videoDataRate = null;

        this.audioSampleRate = null;
        this.audioChannelCount = null;

        this.width = null;
        this.height = null;
        this.fps = null;
        this.profile = null;
        this.level = null;
        this.refFrames = null;
        this.chromaFormat = null;
        this.sarNum = null;
        this.sarDen = null;

        this.metadata = null;
        this.segments = null; // MediaInfo[]
        this.segmentCount = null;
        this.hasKeyframesIndex = null;
        this.keyframesIndex = null;
    }

    _createClass(MediaInfo, [{
        key: "isComplete",
        value: function isComplete() {
            var audioInfoComplete = this.hasAudio === false || this.hasAudio === true && this.audioCodec != null && this.audioSampleRate != null && this.audioChannelCount != null;

            var videoInfoComplete = this.hasVideo === false || this.hasVideo === true && this.videoCodec != null && this.width != null && this.height != null && this.fps != null && this.profile != null && this.level != null && this.refFrames != null && this.chromaFormat != null && this.sarNum != null && this.sarDen != null;

            // keyframesIndex may not be present
            return this.mimeType != null && this.duration != null && this.metadata != null && this.hasKeyframesIndex != null && audioInfoComplete && videoInfoComplete;
        }
    }, {
        key: "isSeekable",
        value: function isSeekable() {
            return this.hasKeyframesIndex === true;
        }
    }, {
        key: "getNearestKeyframe",
        value: function getNearestKeyframe(milliseconds) {
            if (this.keyframesIndex == null) {
                return null;
            }

            var table = this.keyframesIndex;
            var keyframeIdx = this._search(table.times, milliseconds);

            return {
                index: keyframeIdx,
                milliseconds: table.times[keyframeIdx],
                fileposition: table.filepositions[keyframeIdx]
            };
        }
    }, {
        key: "_search",
        value: function _search(list, value) {
            var idx = 0;

            var last = list.length - 1;
            var mid = 0;
            var lbound = 0;
            var ubound = last;

            if (value < list[0]) {
                idx = 0;
                lbound = ubound + 1; // skip search
            }

            while (lbound <= ubound) {
                mid = lbound + Math.floor((ubound - lbound) / 2);
                if (mid === last || value >= list[mid] && value < list[mid + 1]) {
                    idx = mid;
                    break;
                } else if (list[mid] < value) {
                    lbound = mid + 1;
                } else {
                    ubound = mid - 1;
                }
            }

            return idx;
        }
    }]);

    return MediaInfo;
}();

exports.default = MediaInfo;
module.exports = exports["default"];

/***/ }),

/***/ "./src/flv/core/media-segment-info.js":
/*!********************************************!*\
  !*** ./src/flv/core/media-segment-info.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Represents an media sample (audio / video)
var SampleInfo = exports.SampleInfo = function SampleInfo(dts, pts, duration, originalDts, isSync) {
    _classCallCheck(this, SampleInfo);

    this.dts = dts;
    this.pts = pts;
    this.duration = duration;
    this.originalDts = originalDts;
    this.isSyncPoint = isSync;
    this.fileposition = null;
};

// Media Segment concept is defined in Media Source Extensions spec.
// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.


var MediaSegmentInfo = exports.MediaSegmentInfo = function () {
    function MediaSegmentInfo() {
        _classCallCheck(this, MediaSegmentInfo);

        this.beginDts = 0;
        this.endDts = 0;
        this.beginPts = 0;
        this.endPts = 0;
        this.originalBeginDts = 0;
        this.originalEndDts = 0;
        this.syncPoints = []; // SampleInfo[n], for video IDR frames only
        this.firstSample = null; // SampleInfo
        this.lastSample = null; // SampleInfo
    }

    _createClass(MediaSegmentInfo, [{
        key: "appendSyncPoint",
        value: function appendSyncPoint(sampleInfo) {
            // also called Random Access Point
            sampleInfo.isSyncPoint = true;
            this.syncPoints.push(sampleInfo);
        }
    }]);

    return MediaSegmentInfo;
}();

// Ordered list for recording video IDR frames, sorted by originalDts


var IDRSampleList = exports.IDRSampleList = function () {
    function IDRSampleList() {
        _classCallCheck(this, IDRSampleList);

        this._list = [];
    }

    _createClass(IDRSampleList, [{
        key: "clear",
        value: function clear() {
            this._list = [];
        }
    }, {
        key: "appendArray",
        value: function appendArray(syncPoints) {
            var list = this._list;

            if (syncPoints.length === 0) {
                return;
            }

            if (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {
                this.clear();
            }

            Array.prototype.push.apply(list, syncPoints);
        }
    }, {
        key: "getLastSyncPointBeforeDts",
        value: function getLastSyncPointBeforeDts(dts) {
            if (this._list.length == 0) {
                return null;
            }

            var list = this._list;
            var idx = 0;
            var last = list.length - 1;
            var mid = 0;
            var lbound = 0;
            var ubound = last;

            if (dts < list[0].dts) {
                idx = 0;
                lbound = ubound + 1;
            }

            while (lbound <= ubound) {
                mid = lbound + Math.floor((ubound - lbound) / 2);
                if (mid === last || dts >= list[mid].dts && dts < list[mid + 1].dts) {
                    idx = mid;
                    break;
                } else if (list[mid].dts < dts) {
                    lbound = mid + 1;
                } else {
                    ubound = mid - 1;
                }
            }
            return this._list[idx];
        }
    }]);

    return IDRSampleList;
}();

// Data structure for recording information of media segments in single track.


var MediaSegmentInfoList = exports.MediaSegmentInfoList = function () {
    function MediaSegmentInfoList(type) {
        _classCallCheck(this, MediaSegmentInfoList);

        this._type = type;
        this._list = [];
        this._lastAppendLocation = -1; // cached last insert location
    }

    _createClass(MediaSegmentInfoList, [{
        key: "isEmpty",
        value: function isEmpty() {
            return this._list.length === 0;
        }
    }, {
        key: "clear",
        value: function clear() {
            this._list = [];
            this._lastAppendLocation = -1;
        }
    }, {
        key: "_searchNearestSegmentBefore",
        value: function _searchNearestSegmentBefore(originalBeginDts) {
            var list = this._list;
            if (list.length === 0) {
                return -2;
            }
            var last = list.length - 1;
            var mid = 0;
            var lbound = 0;
            var ubound = last;

            var idx = 0;

            if (originalBeginDts < list[0].originalBeginDts) {
                idx = -1;
                return idx;
            }

            while (lbound <= ubound) {
                mid = lbound + Math.floor((ubound - lbound) / 2);
                if (mid === last || originalBeginDts > list[mid].lastSample.originalDts && originalBeginDts < list[mid + 1].originalBeginDts) {
                    idx = mid;
                    break;
                } else if (list[mid].originalBeginDts < originalBeginDts) {
                    lbound = mid + 1;
                } else {
                    ubound = mid - 1;
                }
            }
            return idx;
        }
    }, {
        key: "_searchNearestSegmentAfter",
        value: function _searchNearestSegmentAfter(originalBeginDts) {
            return this._searchNearestSegmentBefore(originalBeginDts) + 1;
        }
    }, {
        key: "append",
        value: function append(mediaSegmentInfo) {
            var list = this._list;
            var msi = mediaSegmentInfo;
            var lastAppendIdx = this._lastAppendLocation;
            var insertIdx = 0;

            if (lastAppendIdx !== -1 && lastAppendIdx < list.length && msi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts && (lastAppendIdx === list.length - 1 || lastAppendIdx < list.length - 1 && msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts)) {
                insertIdx = lastAppendIdx + 1; // use cached location idx
            } else {
                if (list.length > 0) {
                    insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;
                }
            }

            this._lastAppendLocation = insertIdx;
            this._list.splice(insertIdx, 0, msi);
        }
    }, {
        key: "getLastSegmentBefore",
        value: function getLastSegmentBefore(originalBeginDts) {
            var idx = this._searchNearestSegmentBefore(originalBeginDts);
            if (idx >= 0) {
                return this._list[idx];
            } else {
                // -1
                return null;
            }
        }
    }, {
        key: "getLastSampleBefore",
        value: function getLastSampleBefore(originalBeginDts) {
            var segment = this.getLastSegmentBefore(originalBeginDts);
            if (segment != null) {
                return segment.lastSample;
            } else {
                return null;
            }
        }
    }, {
        key: "getLastSyncPointBefore",
        value: function getLastSyncPointBefore(originalBeginDts) {
            var segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);
            var syncPoints = this._list[segmentIdx].syncPoints;
            while (syncPoints.length === 0 && segmentIdx > 0) {
                segmentIdx--;
                syncPoints = this._list[segmentIdx].syncPoints;
            }
            if (syncPoints.length > 0) {
                return syncPoints[syncPoints.length - 1];
            } else {
                return null;
            }
        }
    }, {
        key: "type",
        get: function get() {
            return this._type;
        }
    }, {
        key: "length",
        get: function get() {
            return this._list.length;
        }
    }]);

    return MediaSegmentInfoList;
}();

/***/ }),

/***/ "./src/flv/core/mse-controller.js":
/*!****************************************!*\
  !*** ./src/flv/core/mse-controller.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *     http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _events = __webpack_require__(/*! events */ "./node_modules/events/events.js");

var _events2 = _interopRequireDefault(_events);

var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _browser = __webpack_require__(/*! ../utils/browser.js */ "./src/flv/utils/browser.js");

var _browser2 = _interopRequireDefault(_browser);

var _mseEvents = __webpack_require__(/*! ./mse-events.js */ "./src/flv/core/mse-events.js");

var _mseEvents2 = _interopRequireDefault(_mseEvents);

var _mediaSegmentInfo = __webpack_require__(/*! ./media-segment-info.js */ "./src/flv/core/media-segment-info.js");

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Media Source Extensions controller
var MSEController = function () {
    function MSEController(config) {
        _classCallCheck(this, MSEController);

        this.TAG = 'MSEController';

        this._config = config;
        this._emitter = new _events2.default();

        if (this._config.isLive && this._config.autoCleanupSourceBuffer == undefined) {
            // For live stream, do auto cleanup by default
            this._config.autoCleanupSourceBuffer = true;
        }
        this.definitionChange = false;
        this.e = {
            onSourceOpen: this._onSourceOpen.bind(this),
            onSourceEnded: this._onSourceEnded.bind(this),
            onSourceClose: this._onSourceClose.bind(this),
            onSourceBufferError: this._onSourceBufferError.bind(this),
            onSourceBufferUpdateEnd: this._onSourceBufferUpdateEnd.bind(this)
        };

        this._mediaSource = null;
        this._mediaSourceObjectURL = null;
        this._mediaElement = null;

        this._isBufferFull = false;
        this._hasPendingEos = false;

        this._requireSetMediaDuration = false;
        this._pendingMediaDuration = 0;

        this._pendingSourceBufferInit = [];
        this._mimeTypes = {
            video: null,
            audio: null
        };
        this._sourceBuffers = {
            video: null,
            audio: null
        };
        this._lastInitSegments = {
            video: null,
            audio: null
        };
        this._pendingSegments = {
            video: [],
            audio: []
        };
        this._pendingRemoveRanges = {
            video: [],
            audio: []
        };
        this._idrList = new _mediaSegmentInfo.IDRSampleList();
    }

    _createClass(MSEController, [{
        key: 'destroy',
        value: function destroy() {
            if (this._mediaElement || this._mediaSource) {
                this.detachMediaElement();
            }
            this.e = null;
            this._emitter.removeAllListeners();
            this._emitter = null;
        }
    }, {
        key: 'on',
        value: function on(event, listener) {
            this._emitter.addListener(event, listener);
        }
    }, {
        key: 'off',
        value: function off(event, listener) {
            this._emitter.removeListener(event, listener);
        }
    }, {
        key: 'attachMediaElement',
        value: function attachMediaElement(mediaElement) {
            if (this._mediaSource) {
                throw new _exception.IllegalStateException('MediaSource has been attached to an HTMLMediaElement!');
            }
            var ms = this._mediaSource = new window.MediaSource();
            ms.addEventListener('sourceopen', this.e.onSourceOpen);
            ms.addEventListener('sourceended', this.e.onSourceEnded);
            ms.addEventListener('sourceclose', this.e.onSourceClose);

            this._mediaElement = mediaElement;
            this._mediaSourceObjectURL = window.URL.createObjectURL(this._mediaSource);
            mediaElement.src = this._mediaSourceObjectURL;
        }
    }, {
        key: 'detachMediaElement',
        value: function detachMediaElement() {
            if (this._mediaSource) {
                var ms = this._mediaSource;
                for (var type in this._sourceBuffers) {
                    // pending segments should be discard
                    var ps = this._pendingSegments[type];
                    ps.splice(0, ps.length);
                    this._pendingSegments[type] = null;
                    this._pendingRemoveRanges[type] = null;
                    this._lastInitSegments[type] = null;

                    // remove all sourcebuffers
                    var sb = this._sourceBuffers[type];
                    if (sb) {
                        if (ms.readyState !== 'closed') {
                            ms.removeSourceBuffer(sb);
                            sb.removeEventListener('error', this.e.onSourceBufferError);
                            sb.removeEventListener('updateend', this.e.onSourceBufferUpdateEnd);
                        }
                        this._mimeTypes[type] = null;
                        this._sourceBuffers[type] = null;
                    }
                }
                if (ms.readyState === 'open') {
                    try {
                        ms.endOfStream();
                    } catch (error) {
                        _logger2.default.e(this.TAG, error.message);
                    }
                }
                ms.removeEventListener('sourceopen', this.e.onSourceOpen);
                ms.removeEventListener('sourceended', this.e.onSourceEnded);
                ms.removeEventListener('sourceclose', this.e.onSourceClose);
                this._pendingSourceBufferInit = [];
                this._isBufferFull = false;
                this._idrList.clear();
                this._mediaSource = null;
            }

            if (this._mediaElement) {
                this._mediaElement.src = '';
                this._mediaElement.removeAttribute('src');
                this._mediaElement = null;
            }
            if (this._mediaSourceObjectURL) {
                window.URL.revokeObjectURL(this._mediaSourceObjectURL);
                this._mediaSourceObjectURL = null;
            }
        }
    }, {
        key: 'newSourceInitSegment',
        value: function newSourceInitSegment(initSegment) {
            var is = initSegment;
            var mimeType = '' + is.container;
            if (is.codec && is.codec.length > 0) {
                mimeType += ';codecs=' + is.codec;
            }

            var ps = this._pendingSegments[is.type];
            ps.splice(0, ps.length);
            this._pendingSegments[is.type] = [];
            this._pendingRemoveRanges[is.type] = [];
            this._lastInitSegments[is.type] = [];
            var ms = this._mediaSource;
            this.definitionChange = true;
            if (this._sourceBuffers[is.type]) {
                ms.removeSourceBuffer(this._sourceBuffers[is.type]);
                var sb = this._sourceBuffers[is.type] = this._mediaSource.addSourceBuffer(mimeType);
                sb.addEventListener('error', this.e.onSourceBufferError);
                sb.addEventListener('updateend', this.e.onSourceBufferUpdateEnd);
            }
            // this.definitionChange = false;
        }
    }, {
        key: 'appendInitSegment',
        value: function appendInitSegment(initSegment, deferred) {
            if (!this._mediaSource || this._mediaSource.readyState !== 'open') {
                // sourcebuffer creation requires mediaSource.readyState === 'open'
                // so we defer the sourcebuffer creation, until sourceopen event triggered
                this._pendingSourceBufferInit.push(initSegment);
                // make sure that this InitSegment is in the front of pending segments queue
                this._pendingSegments[initSegment.type].push(initSegment);
                console.log('' + initSegment.type, initSegment);
                return;
            }

            var is = initSegment;
            var mimeType = '' + is.container;
            if (is.codec && is.codec.length > 0) {
                mimeType += ';codecs=' + is.codec;
            }

            var firstInitSegment = false;

            _logger2.default.v(this.TAG, 'Received Initialization Segment, mimeType: ' + mimeType);
            this._lastInitSegments[is.type] = is;

            if (mimeType !== this._mimeTypes[is.type]) {
                if (!this._mimeTypes[is.type]) {
                    // empty, first chance create sourcebuffer
                    firstInitSegment = true;
                    try {
                        var sb = this._sourceBuffers[is.type] = this._mediaSource.addSourceBuffer(mimeType);
                        sb.addEventListener('error', this.e.onSourceBufferError);
                        sb.addEventListener('updateend', this.e.onSourceBufferUpdateEnd);
                    } catch (error) {
                        _logger2.default.e(this.TAG, error.message);
                        this._emitter.emit(_mseEvents2.default.ERROR, { code: error.code, msg: error.message });
                        return;
                    }
                } else {
                    _logger2.default.v(this.TAG, 'Notice: ' + is.type + ' mimeType changed, origin: ' + this._mimeTypes[is.type] + ', target: ' + mimeType);
                }
                this._mimeTypes[is.type] = mimeType;
            }

            if (!deferred) {
                // deferred means this InitSegment has been pushed to pendingSegments queue
                this._pendingSegments[is.type].push(is);
            }
            if (!firstInitSegment) {
                // append immediately only if init segment in subsequence
                if (this._sourceBuffers[is.type] && !this._sourceBuffers[is.type].updating) {
                    this._doAppendSegments();
                }
            }
            if (_browser2.default.safari && is.container === 'audio/mpeg' && is.mediaDuration > 0) {
                // 'audio/mpeg' track under Safari may cause MediaElement's duration to be NaN
                // Manually correct MediaSource.duration to make progress bar seekable, and report right duration
                this._requireSetMediaDuration = true;
                this._pendingMediaDuration = is.mediaDuration / 1000; // in seconds
                this._updateMediaSourceDuration();
            }
        }
    }, {
        key: 'appendMediaSegment',
        value: function appendMediaSegment(mediaSegment) {
            var ms = mediaSegment;
            this._pendingSegments[ms.type].push(ms);

            if (this._config.autoCleanupSourceBuffer && this._needCleanupSourceBuffer()) {
                this._doCleanupSourceBuffer();
            }

            var sb = this._sourceBuffers[ms.type];
            if (sb && !sb.updating && !this._hasPendingRemoveRanges() && this.definitionChange === false) {
                this._doAppendSegments();
            }
        }
    }, {
        key: 'seek',
        value: function seek(seconds) {
            // remove all appended buffers
            for (var type in this._sourceBuffers) {
                if (!this._sourceBuffers[type]) {
                    continue;
                }

                // abort current buffer append algorithm
                var sb = this._sourceBuffers[type];
                if (this._mediaSource.readyState === 'open') {
                    try {
                        // If range removal algorithm is running, InvalidStateError will be throwed
                        // Ignore it.
                        sb.abort();
                    } catch (error) {
                        _logger2.default.e(this.TAG, error.message);
                    }
                }

                // IDRList should be clear
                this._idrList.clear();

                // pending segments should be discard
                var ps = this._pendingSegments[type];
                ps.splice(0, ps.length);

                if (this._mediaSource.readyState === 'closed') {
                    // Parent MediaSource object has been detached from HTMLMediaElement
                    continue;
                }

                // record ranges to be remove from SourceBuffer
                for (var i = 0; i < sb.buffered.length; i++) {
                    var start = sb.buffered.start(i);
                    var end = sb.buffered.end(i);
                    this._pendingRemoveRanges[type].push({ start: start, end: end });
                }

                // if sb is not updating, let's remove ranges now!
                if (!sb.updating) {
                    this._doRemoveRanges();
                }

                // Safari 10 may get InvalidStateError in the later appendBuffer() after SourceBuffer.remove() call
                // Internal parser's state may be invalid at this time. Re-append last InitSegment to workaround.
                // Related issue: https://bugs.webkit.org/show_bug.cgi?id=159230
                if (_browser2.default.safari) {
                    var lastInitSegment = this._lastInitSegments[type];
                    if (lastInitSegment) {
                        this._pendingSegments[type].push(lastInitSegment);
                        if (!sb.updating) {
                            this._doAppendSegments();
                        }
                    }
                }
            }
        }
    }, {
        key: 'endOfStream',
        value: function endOfStream() {
            var ms = this._mediaSource;
            var sb = this._sourceBuffers;
            if (!ms || ms.readyState !== 'open') {
                if (ms && ms.readyState === 'closed' && this._hasPendingSegments()) {
                    // If MediaSource hasn't turned into open state, and there're pending segments
                    // Mark pending endOfStream, defer call until all pending segments appended complete
                    this._hasPendingEos = true;
                }
                return;
            }
            if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {
                // If any sourcebuffer is updating, defer endOfStream operation
                // See _onSourceBufferUpdateEnd()
                this._hasPendingEos = true;
            } else {
                this._hasPendingEos = false;
                // Notify media data loading complete
                // This is helpful for correcting total duration to match last media segment
                // Otherwise MediaElement's ended event may not be triggered
                ms.endOfStream();
            }
        }
    }, {
        key: 'getNearestKeyframe',
        value: function getNearestKeyframe(dts) {
            return this._idrList.getLastSyncPointBeforeDts(dts);
        }
    }, {
        key: '_needCleanupSourceBuffer',
        value: function _needCleanupSourceBuffer() {
            if (!this._config.autoCleanupSourceBuffer) {
                return false;
            }

            var currentTime = this._mediaElement.currentTime;

            for (var type in this._sourceBuffers) {
                var sb = this._sourceBuffers[type];
                if (sb) {
                    var buffered = sb.buffered;
                    if (buffered.length >= 1) {
                        if (currentTime - buffered.start(0) >= this._config.autoCleanupMaxBackwardDuration) {
                            return true;
                        }
                    }
                }
            }

            return false;
        }
    }, {
        key: '_doCleanupSourceBuffer',
        value: function _doCleanupSourceBuffer() {
            var currentTime = this._mediaElement.currentTime;

            for (var type in this._sourceBuffers) {
                var sb = this._sourceBuffers[type];
                if (sb) {
                    var buffered = sb.buffered;
                    var doRemove = false;

                    for (var i = 0; i < buffered.length; i++) {
                        var start = buffered.start(i);
                        var end = buffered.end(i);

                        if (start <= currentTime && currentTime < end + 3) {
                            // padding 3 seconds
                            if (currentTime - start >= this._config.autoCleanupMaxBackwardDuration) {
                                doRemove = true;
                                var removeEnd = currentTime - this._config.autoCleanupMinBackwardDuration;
                                this._pendingRemoveRanges[type].push({ start: start, end: removeEnd });
                            }
                        } else if (end < currentTime) {
                            doRemove = true;
                            this._pendingRemoveRanges[type].push({ start: start, end: end });
                        }
                    }

                    if (doRemove && !sb.updating) {
                        this._doRemoveRanges();
                    }
                }
            }
        }
    }, {
        key: '_updateMediaSourceDuration',
        value: function _updateMediaSourceDuration() {
            var sb = this._sourceBuffers;
            if (this._mediaElement.readyState === 0 || this._mediaSource.readyState !== 'open') {
                return;
            }
            if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {
                return;
            }

            var current = this._mediaSource.duration;
            var target = this._pendingMediaDuration;

            if (target > 0 && (isNaN(current) || target > current)) {
                _logger2.default.v(this.TAG, 'Update MediaSource duration from ' + current + ' to ' + target);
                this._mediaSource.duration = target;
            }

            this._requireSetMediaDuration = false;
            this._pendingMediaDuration = 0;
        }
    }, {
        key: '_doRemoveRanges',
        value: function _doRemoveRanges() {
            for (var type in this._pendingRemoveRanges) {
                if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {
                    continue;
                }
                var sb = this._sourceBuffers[type];
                var ranges = this._pendingRemoveRanges[type];
                while (ranges.length && !sb.updating) {
                    var range = ranges.shift();
                    sb.remove(range.start, range.end);
                }
            }
        }
    }, {
        key: '_doAppendSegments',
        value: function _doAppendSegments() {
            var pendingSegments = this._pendingSegments;
            for (var type in pendingSegments) {
                if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {
                    continue;
                }

                if (pendingSegments[type].length > 0) {
                    var segment = pendingSegments[type].shift();

                    if (segment.timestampOffset) {
                        // For MPEG audio stream in MSE, if unbuffered-seeking occurred
                        // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.
                        var currentOffset = this._sourceBuffers[type].timestampOffset;
                        var targetOffset = segment.timestampOffset / 1000; // in seconds

                        var delta = Math.abs(currentOffset - targetOffset);
                        if (delta > 0.1) {
                            // If time delta > 100ms
                            _logger2.default.v(this.TAG, 'Update MPEG audio timestampOffset from ' + currentOffset + ' to ' + targetOffset);
                            this._sourceBuffers[type].timestampOffset = targetOffset;
                        }
                        delete segment.timestampOffset;
                    }

                    if (!segment.data || segment.data.byteLength === 0) {
                        // Ignore empty buffer
                        continue;
                    }

                    try {
                        this._sourceBuffers[type].appendBuffer(segment.data);
                        this._isBufferFull = false;
                        if (type === 'video' && segment.hasOwnProperty('info')) {
                            this._idrList.appendArray(segment.info.syncPoints);
                        }
                    } catch (error) {
                        this._pendingSegments[type].unshift(segment);
                        if (error.code === 22) {
                            // QuotaExceededError
                            /* Notice that FireFox may not throw QuotaExceededError if SourceBuffer is full
                             * Currently we can only do lazy-load to avoid SourceBuffer become scattered.
                             * SourceBuffer eviction policy may be changed in future version of FireFox.
                             *
                             * Related issues:
                             * https://bugzilla.mozilla.org/show_bug.cgi?id=1279885
                             * https://bugzilla.mozilla.org/show_bug.cgi?id=1280023
                             */

                            // report buffer full, abort network IO
                            if (!this._isBufferFull) {
                                this._emitter.emit(_mseEvents2.default.BUFFER_FULL);
                            }
                            this._isBufferFull = true;
                        } else {
                            _logger2.default.e(this.TAG, error.message);
                            this._emitter.emit(_mseEvents2.default.ERROR, { code: error.code, msg: error.message });
                        }
                    }
                }
            }
        }
    }, {
        key: '_onSourceOpen',
        value: function _onSourceOpen() {
            _logger2.default.v(this.TAG, 'MediaSource onSourceOpen');
            this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);
            // deferred sourcebuffer creation / initialization
            if (this._pendingSourceBufferInit.length > 0) {
                var pendings = this._pendingSourceBufferInit;
                while (pendings.length) {
                    var segment = pendings.shift();
                    this.appendInitSegment(segment, true);
                }
            }
            // there may be some pending media segments, append them
            if (this._hasPendingSegments()) {
                this._doAppendSegments();
            }
            this._emitter.emit(_mseEvents2.default.SOURCE_OPEN);
        }
    }, {
        key: '_onSourceEnded',
        value: function _onSourceEnded() {
            // fired on endOfStream
            _logger2.default.v(this.TAG, 'MediaSource onSourceEnded');
        }
    }, {
        key: '_onSourceClose',
        value: function _onSourceClose() {
            // fired on detaching from media element
            _logger2.default.v(this.TAG, 'MediaSource onSourceClose');
            if (this._mediaSource && this.e != null) {
                this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);
                this._mediaSource.removeEventListener('sourceended', this.e.onSourceEnded);
                this._mediaSource.removeEventListener('sourceclose', this.e.onSourceClose);
            }
        }
    }, {
        key: '_hasPendingSegments',
        value: function _hasPendingSegments() {
            var ps = this._pendingSegments;
            return ps.video.length > 0 || ps.audio.length > 0;
        }
    }, {
        key: '_hasPendingRemoveRanges',
        value: function _hasPendingRemoveRanges() {
            var prr = this._pendingRemoveRanges;
            return prr.video.length > 0 || prr.audio.length > 0;
        }
    }, {
        key: '_onSourceBufferUpdateEnd',
        value: function _onSourceBufferUpdateEnd() {
            if (this._requireSetMediaDuration) {
                this._updateMediaSourceDuration();
            } else if (this._hasPendingRemoveRanges()) {
                this._doRemoveRanges();
            } else if (this._hasPendingSegments()) {
                this._doAppendSegments();
            } else if (this._hasPendingEos) {
                this.endOfStream();
            }
            this._emitter.emit(_mseEvents2.default.UPDATE_END);
        }
    }, {
        key: '_onSourceBufferError',
        value: function _onSourceBufferError(e) {
            _logger2.default.e(this.TAG, 'SourceBuffer Error: ' + e);
            // this error might not always be fatal, just ignore it
        }
    }]);

    return MSEController;
}();

exports.default = MSEController;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/core/mse-events.js":
/*!************************************!*\
  !*** ./src/flv/core/mse-events.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MSEEvents = {
  ERROR: 'error',
  SOURCE_OPEN: 'source_open',
  UPDATE_END: 'update_end',
  BUFFER_FULL: 'buffer_full'
};

exports.default = MSEEvents;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/core/transmuxer.js":
/*!************************************!*\
  !*** ./src/flv/core/transmuxer.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _events = __webpack_require__(/*! events */ "./node_modules/events/events.js");

var _events2 = _interopRequireDefault(_events);

var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _loggingControl = __webpack_require__(/*! ../utils/logging-control.js */ "./src/flv/utils/logging-control.js");

var _loggingControl2 = _interopRequireDefault(_loggingControl);

var _transmuxingController = __webpack_require__(/*! ./transmuxing-controller.js */ "./src/flv/core/transmuxing-controller.js");

var _transmuxingController2 = _interopRequireDefault(_transmuxingController);

var _transmuxingEvents = __webpack_require__(/*! ./transmuxing-events.js */ "./src/flv/core/transmuxing-events.js");

var _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);

var _transmuxingWorker = __webpack_require__(/*! ./transmuxing-worker.js */ "./src/flv/core/transmuxing-worker.js");

var _transmuxingWorker2 = _interopRequireDefault(_transmuxingWorker);

var _mediaInfo = __webpack_require__(/*! ./media-info.js */ "./src/flv/core/media-info.js");

var _mediaInfo2 = _interopRequireDefault(_mediaInfo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Transmuxer = function () {
    function Transmuxer(mediaDataSource, config) {
        var _this = this;

        _classCallCheck(this, Transmuxer);

        this.TAG = 'Transmuxer';
        this._emitter = new _events2.default();
        this.isDefinitionChanging = false;
        if (config.enableWorker && typeof Worker !== 'undefined') {
            try {
                var work = __webpack_require__(/*! webworkify */ "./node_modules/webworkify/index.js");
                this._worker = work(_transmuxingWorker2.default);
                this._workerDestroying = false;
                this._worker.addEventListener('message', this._onWorkerMessage.bind(this));
                this._worker.postMessage({ cmd: 'init', param: [mediaDataSource, config] });
                this.e = {
                    onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)
                };
                _loggingControl2.default.registerListener(this.e.onLoggingConfigChanged);
                this._worker.postMessage({ cmd: 'logging_config', param: _loggingControl2.default.getConfig() });
            } catch (error) {
                _logger2.default.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');
                this._worker = null;
                this._controller = new _transmuxingController2.default(mediaDataSource, config);
            }
        } else {
            this._controller = new _transmuxingController2.default(mediaDataSource, config);
        }

        this._controller._emitter.on('metadata_arrived', function (onMetaData) {
            _this._emitter.emit('metadata_arrived', onMetaData);
        });

        if (this._controller) {
            var ctl = this._controller;
            ctl.on(_transmuxingEvents2.default.IO_ERROR, this._onIOError.bind(this));
            ctl.on(_transmuxingEvents2.default.DEMUX_ERROR, this._onDemuxError.bind(this));
            ctl.on(_transmuxingEvents2.default.INIT_SEGMENT, this._onInitSegment.bind(this));
            ctl.on(_transmuxingEvents2.default.MEDIA_SEGMENT, this._onMediaSegment.bind(this));
            ctl.on(_transmuxingEvents2.default.LOADING_COMPLETE, this._onLoadingComplete.bind(this));
            ctl.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));
            ctl.on(_transmuxingEvents2.default.MEDIA_INFO, this._onMediaInfo.bind(this));
            ctl.on(_transmuxingEvents2.default.STATISTICS_INFO, this._onStatisticsInfo.bind(this));
            ctl.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));
        }
    }

    _createClass(Transmuxer, [{
        key: 'destroy',
        value: function destroy() {
            if (this._worker) {
                if (!this._workerDestroying) {
                    this._workerDestroying = true;
                    this._worker.postMessage({ cmd: 'destroy' });
                    _loggingControl2.default.removeListener(this.e.onLoggingConfigChanged);
                    this.e = null;
                }
            } else {
                this._controller.destroy();
                this._controller = null;
            }
            this._emitter.removeAllListeners();
            this._emitter = null;
        }
    }, {
        key: 'on',
        value: function on(event, listener) {
            this._emitter && this._emitter.addListener(event, listener);
        }
    }, {
        key: 'off',
        value: function off(event, listener) {
            this._emitter && this._emitter.removeListener(event, listener);
        }
    }, {
        key: 'hasWorker',
        value: function hasWorker() {
            return this._worker != null;
        }
    }, {
        key: 'open',
        value: function open() {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'start' });
            } else {
                this._controller.start();
            }
        }
    }, {
        key: 'close',
        value: function close() {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'stop' });
            } else {
                this._controller.stop();
            }
        }
    }, {
        key: 'seek',
        value: function seek(milliseconds) {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'seek', param: milliseconds });
            } else {
                this._controller.seek(milliseconds);
            }
        }
    }, {
        key: 'pause',
        value: function pause() {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'pause' });
            } else {
                this._controller.pause();
            }
        }
    }, {
        key: 'resume',
        value: function resume() {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'resume' });
            } else {
                this._controller.resume();
            }
        }
    }, {
        key: '_onInitSegment',
        value: function _onInitSegment(type, initSegment) {
            var _this2 = this;

            // do async invoke
            Promise.resolve().then(function () {
                _this2._emitter && _this2._emitter.emit(_transmuxingEvents2.default.INIT_SEGMENT, type, initSegment);
            });
        }
    }, {
        key: '_onMediaSegment',
        value: function _onMediaSegment(type, mediaSegment) {
            var _this3 = this;

            Promise.resolve().then(function () {
                _this3._emitter && _this3._emitter.emit(_transmuxingEvents2.default.MEDIA_SEGMENT, type, mediaSegment);
            });
        }
    }, {
        key: '_onLoadingComplete',
        value: function _onLoadingComplete() {
            var _this4 = this;

            Promise.resolve().then(function () {
                _this4._emitter && _this4._emitter.emit(_transmuxingEvents2.default.LOADING_COMPLETE);
            });
        }
    }, {
        key: '_onRecoveredEarlyEof',
        value: function _onRecoveredEarlyEof() {
            var _this5 = this;

            Promise.resolve().then(function () {
                _this5._emitter && _this5._emitter.emit(_transmuxingEvents2.default.RECOVERED_EARLY_EOF);
            });
        }
    }, {
        key: '_onMediaInfo',
        value: function _onMediaInfo(mediaInfo) {
            var _this6 = this;

            Promise.resolve().then(function () {
                _this6._emitter && _this6._emitter.emit(_transmuxingEvents2.default.MEDIA_INFO, mediaInfo);
            });
        }
    }, {
        key: '_onStatisticsInfo',
        value: function _onStatisticsInfo(statisticsInfo) {
            var _this7 = this;

            Promise.resolve().then(function () {
                _this7._emitter && _this7._emitter.emit(_transmuxingEvents2.default.STATISTICS_INFO, statisticsInfo);
            });
        }
    }, {
        key: '_onIOError',
        value: function _onIOError(type, info) {
            var _this8 = this;

            Promise.resolve().then(function () {
                _this8._emitter && _this8._emitter.emit(_transmuxingEvents2.default.IO_ERROR, type, info);
            });
        }
    }, {
        key: '_onDemuxError',
        value: function _onDemuxError(type, info) {
            var _this9 = this;

            Promise.resolve().then(function () {
                _this9._emitter && _this9._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, type, info);
            });
        }
    }, {
        key: '_onRecommendSeekpoint',
        value: function _onRecommendSeekpoint(milliseconds) {
            var _this10 = this;

            Promise.resolve().then(function () {
                _this10._emitter && _this10._emitter.emit(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, milliseconds);
            });
        }
    }, {
        key: '_onLoggingConfigChanged',
        value: function _onLoggingConfigChanged(config) {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'logging_config', param: config });
            }
        }
    }, {
        key: '_onWorkerMessage',
        value: function _onWorkerMessage(e) {
            var message = e.data;
            var data = message.data;

            if (message.msg === 'destroyed' || this._workerDestroying) {
                this._workerDestroying = false;
                this._worker.terminate();
                this._worker = null;
                return;
            }

            switch (message.msg) {
                case _transmuxingEvents2.default.INIT_SEGMENT:
                case _transmuxingEvents2.default.MEDIA_SEGMENT:
                    this._emitter.emit(message.msg, data.type, data.data);
                    break;
                case _transmuxingEvents2.default.LOADING_COMPLETE:
                case _transmuxingEvents2.default.RECOVERED_EARLY_EOF:
                    this._emitter.emit(message.msg);
                    break;
                case _transmuxingEvents2.default.MEDIA_INFO:
                    Object.setPrototypeOf(data, _mediaInfo2.default.prototype);
                    this._emitter.emit(message.msg, data);
                    break;
                case _transmuxingEvents2.default.STATISTICS_INFO:
                    this._emitter.emit(message.msg, data);
                    break;
                case _transmuxingEvents2.default.IO_ERROR:
                case _transmuxingEvents2.default.DEMUX_ERROR:
                    this._emitter.emit(message.msg, data.type, data.info);
                    break;
                case _transmuxingEvents2.default.RECOMMEND_SEEKPOINT:
                    this._emitter.emit(message.msg, data);
                    break;
                case 'logcat_callback':
                    _logger2.default.emitter.emit('log', data.type, data.logcat);
                    break;
                default:
                    break;
            }
        }
    }]);

    return Transmuxer;
}();

exports.default = Transmuxer;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/core/transmuxing-controller.js":
/*!************************************************!*\
  !*** ./src/flv/core/transmuxing-controller.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * See the License for the specific language governing permissions and
limitations under the License.


var _events = __webpack_require__(/*! events */ "./node_modules/events/events.js");

var _events2 = _interopRequireDefault(_events);

var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _browser = __webpack_require__(/*! ../utils/browser.js */ "./src/flv/utils/browser.js");

var _browser2 = _interopRequireDefault(_browser);

var _mediaInfo = __webpack_require__(/*! ./media-info.js */ "./src/flv/core/media-info.js");

var _mediaInfo2 = _interopRequireDefault(_mediaInfo);

var _flvDemuxer = __webpack_require__(/*! ../demux/flv-demuxer.js */ "./src/flv/demux/flv-demuxer.js");

var _flvDemuxer2 = _interopRequireDefault(_flvDemuxer);

var _mp4Remuxer = __webpack_require__(/*! ../remux/mp4-remuxer.js */ "./src/flv/remux/mp4-remuxer.js");

var _mp4Remuxer2 = _interopRequireDefault(_mp4Remuxer);

var _demuxErrors = __webpack_require__(/*! ../demux/demux-errors.js */ "./src/flv/demux/demux-errors.js");

var _demuxErrors2 = _interopRequireDefault(_demuxErrors);

var _ioController = __webpack_require__(/*! ../io/io-controller.js */ "./src/flv/io/io-controller.js");

var _ioController2 = _interopRequireDefault(_ioController);

var _transmuxingEvents = __webpack_require__(/*! ./transmuxing-events.js */ "./src/flv/core/transmuxing-events.js");

var _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);

var _loader = __webpack_require__(/*! ../io/loader.js */ "./src/flv/io/loader.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Transmuxing (IO, Demuxing, Remuxing) controller, with multipart support
var TransmuxingController = function () {
    function TransmuxingController(mediaDataSource, config) {
        _classCallCheck(this, TransmuxingController);

        this.TAG = 'TransmuxingController';
        this._emitter = new _events2.default();

        this._config = config;

        // treat single part media as multipart media, which has only one segment
        if (!mediaDataSource.segments) {
            mediaDataSource.segments = [{
                duration: mediaDataSource.duration,
                filesize: mediaDataSource.filesize,
                url: mediaDataSource.url
            }];
        }

        // fill in default IO params if not exists
        if (typeof mediaDataSource.cors !== 'boolean') {
            mediaDataSource.cors = true;
        }
        if (typeof mediaDataSource.withCredentials !== 'boolean') {
            mediaDataSource.withCredentials = false;
        }

        this._mediaDataSource = mediaDataSource;
        this._currentSegmentIndex = 0;
        var totalDuration = 0;

        this._mediaDataSource.segments.forEach(function (segment) {
            // timestampBase for each segment, and calculate total duration
            segment.timestampBase = totalDuration;
            totalDuration += segment.duration;
            // params needed by IOController
            segment.cors = mediaDataSource.cors;
            segment.withCredentials = mediaDataSource.withCredentials;
            // referrer policy control, if exist
            if (config.referrerPolicy) {
                segment.referrerPolicy = config.referrerPolicy;
            }
        });

        if (!isNaN(totalDuration) && this._mediaDataSource.duration !== totalDuration) {
            this._mediaDataSource.duration = totalDuration;
        }

        this._mediaInfo = null;
        this._demuxer = null;
        this._remuxer = null;
        this._ioctl = null;

        this._pendingSeekTime = null;
        this._pendingResolveSeekPoint = null;

        this._statisticsReporter = null;
    }

    _createClass(TransmuxingController, [{
        key: 'destroy',
        value: function destroy() {
            this._mediaInfo = null;
            this._mediaDataSource = null;

            if (this._statisticsReporter) {
                this._disableStatisticsReporter();
            }
            if (this._ioctl) {
                this._ioctl.destroy();
                this._ioctl = null;
            }
            if (this._demuxer) {
                this._demuxer.destroy();
                this._demuxer = null;
            }
            if (this._remuxer) {
                this._remuxer.destroy();
                this._remuxer = null;
            }

            this._emitter.removeAllListeners();
            this._emitter = null;
        }
    }, {
        key: 'on',
        value: function on(event, listener) {
            this._emitter.addListener(event, listener);
        }
    }, {
        key: 'off',
        value: function off(event, listener) {
            this._emitter.removeListener(event, listener);
        }
    }, {
        key: 'start',
        value: function start() {
            this._loadSegment(0);
            this._enableStatisticsReporter();
        }
    }, {
        key: '_loadSegment',
        value: function _loadSegment(segmentIndex, optionalFrom) {
            this._currentSegmentIndex = segmentIndex;
            var dataSource = this._mediaDataSource.segments[segmentIndex];

            var ioctl = this._ioctl = new _ioController2.default(dataSource, this._config, segmentIndex);
            ioctl.onError = this._onIOException.bind(this);
            ioctl.onSeeked = this._onIOSeeked.bind(this);
            ioctl.onComplete = this._onIOComplete.bind(this);
            ioctl.onRedirect = this._onIORedirect.bind(this);
            ioctl.onRecoveredEarlyEof = this._onIORecoveredEarlyEof.bind(this);

            if (optionalFrom) {
                this._demuxer.bindDataSource(this._ioctl);
            } else {
                ioctl.onDataArrival = this._onInitChunkArrival.bind(this);
            }

            ioctl.open(optionalFrom);
        }
    }, {
        key: 'stop',
        value: function stop() {
            this._internalAbort();
            this._disableStatisticsReporter();
        }
    }, {
        key: '_internalAbort',
        value: function _internalAbort() {
            if (this._ioctl) {
                this._ioctl.destroy();
                this._ioctl = null;
            }
        }
    }, {
        key: 'pause',
        value: function pause() {
            // take a rest
            if (this._ioctl && this._ioctl.isWorking()) {
                this._ioctl.pause();
                this._disableStatisticsReporter();
            }
        }
    }, {
        key: 'resume',
        value: function resume() {
            if (this._ioctl && this._ioctl.isPaused()) {
                this._ioctl.resume();
                this._enableStatisticsReporter();
            }
        }
    }, {
        key: 'seek',
        value: function seek(milliseconds) {
            if (this._mediaInfo == null || !this._mediaInfo.isSeekable()) {
                return;
            }

            var targetSegmentIndex = this._searchSegmentIndexContains(milliseconds);

            if (targetSegmentIndex === this._currentSegmentIndex) {
                // intra-segment seeking
                var segmentInfo = this._mediaInfo.segments[targetSegmentIndex];

                if (segmentInfo == undefined) {
                    // current segment loading started, but mediainfo hasn't received yet
                    // wait for the metadata loaded, then seek to expected position
                    this._pendingSeekTime = milliseconds;
                } else {
                    var keyframe = segmentInfo.getNearestKeyframe(milliseconds);
                    this._remuxer.seek(keyframe.milliseconds);
                    this._ioctl.seek(keyframe.fileposition);
                    // Will be resolved in _onRemuxerMediaSegmentArrival()
                    this._pendingResolveSeekPoint = keyframe.milliseconds;
                }
            } else {
                // cross-segment seeking
                var targetSegmentInfo = this._mediaInfo.segments[targetSegmentIndex];

                if (targetSegmentInfo == undefined) {
                    // target segment hasn't been loaded. We need metadata then seek to expected time
                    this._pendingSeekTime = milliseconds;
                    this._internalAbort();
                    this._remuxer.seek();
                    this._remuxer.insertDiscontinuity();
                    this._loadSegment(targetSegmentIndex);
                    // Here we wait for the metadata loaded, then seek to expected position
                } else {
                    // We have target segment's metadata, direct seek to target position
                    var _keyframe = targetSegmentInfo.getNearestKeyframe(milliseconds);
                    this._internalAbort();
                    this._remuxer.seek(milliseconds);
                    this._remuxer.insertDiscontinuity();
                    this._demuxer.resetMediaInfo();
                    this._demuxer.timestampBase = this._mediaDataSource.segments[targetSegmentIndex].timestampBase;
                    this._loadSegment(targetSegmentIndex, _keyframe.fileposition);
                    this._pendingResolveSeekPoint = _keyframe.milliseconds;
                    this._reportSegmentMediaInfo(targetSegmentIndex);
                }
            }

            this._enableStatisticsReporter();
        }
    }, {
        key: '_searchSegmentIndexContains',
        value: function _searchSegmentIndexContains(milliseconds) {
            var segments = this._mediaDataSource.segments;
            var idx = segments.length - 1;

            for (var i = 0; i < segments.length; i++) {
                if (milliseconds < segments[i].timestampBase) {
                    idx = i - 1;
                    break;
                }
            }
            return idx;
        }
    }, {
        key: '_onInitChunkArrival',
        value: function _onInitChunkArrival(data, byteStart) {
            var _this = this;

            var probeData = null;
            var consumed = 0;

            if (byteStart > 0) {
                // IOController seeked immediately after opened, byteStart > 0 callback may received
                this._demuxer.bindDataSource(this._ioctl);
                this._demuxer.timestampBase = this._mediaDataSource.segments[this._currentSegmentIndex].timestampBase;

                consumed = this._demuxer.parseChunks(data, byteStart);
            } else if ((probeData = _flvDemuxer2.default.probe(data)).match) {
                // Always create new FLVDemuxer
                this._demuxer = new _flvDemuxer2.default(probeData, this._config);

                this._demuxer._emitter.on('metadata_arrived', function (onMetaData) {
                    _this._emitter.emit('metadata_arrived', onMetaData);
                });

                if (!this._remuxer) {
                    this._remuxer = new _mp4Remuxer2.default(this._config);
                }

                var mds = this._mediaDataSource;
                if (mds.duration != undefined && !isNaN(mds.duration)) {
                    this._demuxer.overridedDuration = mds.duration;
                }
                if (typeof mds.hasAudio === 'boolean') {
                    this._demuxer.overridedHasAudio = mds.hasAudio;
                }
                if (typeof mds.hasVideo === 'boolean') {
                    this._demuxer.overridedHasVideo = mds.hasVideo;
                }

                this._demuxer.timestampBase = mds.segments[this._currentSegmentIndex].timestampBase;

                this._demuxer.onError = this._onDemuxException.bind(this);
                this._demuxer.onMediaInfo = this._onMediaInfo.bind(this);

                this._remuxer.bindDataSource(this._demuxer.bindDataSource(this._ioctl));

                this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this);
                this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this);

                consumed = this._demuxer.parseChunks(data, byteStart);
            } else {
                probeData = null;
                _logger2.default.e(this.TAG, 'Non-FLV, Unsupported media type!');
                Promise.resolve().then(function () {
                    _this._internalAbort();
                });
                this._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, _demuxErrors2.default.FORMAT_UNSUPPORTED, 'Non-FLV, Unsupported media type');

                consumed = 0;
            }

            return consumed;
        }
    }, {
        key: '_onMediaInfo',
        value: function _onMediaInfo(mediaInfo) {
            var _this2 = this;

            if (this._mediaInfo == null) {
                // Store first segment's mediainfo as global mediaInfo
                this._mediaInfo = Object.assign({}, mediaInfo);
                this._mediaInfo.keyframesIndex = null;
                this._mediaInfo.segments = [];
                this._mediaInfo.segmentCount = this._mediaDataSource.segments.length;
                Object.setPrototypeOf(this._mediaInfo, _mediaInfo2.default.prototype);
            }

            var segmentInfo = Object.assign({}, mediaInfo);
            Object.setPrototypeOf(segmentInfo, _mediaInfo2.default.prototype);
            this._mediaInfo.segments[this._currentSegmentIndex] = segmentInfo;

            // notify mediaInfo update
            this._reportSegmentMediaInfo(this._currentSegmentIndex);

            if (this._pendingSeekTime != null) {
                Promise.resolve().then(function () {
                    var target = _this2._pendingSeekTime;
                    _this2._pendingSeekTime = null;
                    _this2.seek(target);
                });
            }
        }
    }, {
        key: '_onIOSeeked',
        value: function _onIOSeeked() {
            this._remuxer.insertDiscontinuity();
        }
    }, {
        key: '_onIOComplete',
        value: function _onIOComplete(extraData) {
            var segmentIndex = extraData;
            var nextSegmentIndex = segmentIndex + 1;

            if (nextSegmentIndex < this._mediaDataSource.segments.length) {
                this._internalAbort();
                this._loadSegment(nextSegmentIndex);
            } else {
                this._remuxer.flushStashedSamples();
                this._emitter.emit(_transmuxingEvents2.default.LOADING_COMPLETE);
                this._disableStatisticsReporter();
            }
        }
    }, {
        key: '_onIORedirect',
        value: function _onIORedirect(redirectedURL) {
            var segmentIndex = this._ioctl.extraData;
            this._mediaDataSource.segments[segmentIndex].redirectedURL = redirectedURL;
        }
    }, {
        key: '_onIORecoveredEarlyEof',
        value: function _onIORecoveredEarlyEof() {
            this._emitter.emit(_transmuxingEvents2.default.RECOVERED_EARLY_EOF);
        }
    }, {
        key: '_onIOException',
        value: function _onIOException(type, info) {
            _logger2.default.e(this.TAG, 'IOException: type = ' + type + ', code = ' + info.code + ', msg = ' + info.msg);
            this._emitter.emit(_transmuxingEvents2.default.IO_ERROR, type, info);
            this._disableStatisticsReporter();
        }
    }, {
        key: '_onDemuxException',
        value: function _onDemuxException(type, info) {
            _logger2.default.e(this.TAG, 'DemuxException: type = ' + type + ', info = ' + info);
            this._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, type, info);
        }
    }, {
        key: '_onRemuxerInitSegmentArrival',
        value: function _onRemuxerInitSegmentArrival(type, initSegment) {
            this._emitter.emit(_transmuxingEvents2.default.INIT_SEGMENT, type, initSegment);
        }
    }, {
        key: '_onRemuxerMediaSegmentArrival',
        value: function _onRemuxerMediaSegmentArrival(type, mediaSegment) {
            if (this._pendingSeekTime != null) {
                // Media segments after new-segment cross-seeking should be dropped.
                return;
            }
            this._emitter.emit(_transmuxingEvents2.default.MEDIA_SEGMENT, type, mediaSegment);

            // Resolve pending seekPoint
            if (this._pendingResolveSeekPoint != null && type === 'video') {
                var syncPoints = mediaSegment.info.syncPoints;
                var seekpoint = this._pendingResolveSeekPoint;
                this._pendingResolveSeekPoint = null;

                // Safari: Pass PTS for recommend_seekpoint
                if (_browser2.default.safari && syncPoints.length > 0 && syncPoints[0].originalDts === seekpoint) {
                    seekpoint = syncPoints[0].pts;
                }
                // else: use original DTS (keyframe.milliseconds)

                this._emitter.emit(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, seekpoint);
            }
        }
    }, {
        key: '_enableStatisticsReporter',
        value: function _enableStatisticsReporter() {
            if (this._statisticsReporter == null) {
                this._statisticsReporter = self.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);
            }
        }
    }, {
        key: '_disableStatisticsReporter',
        value: function _disableStatisticsReporter() {
            if (this._statisticsReporter) {
                self.clearInterval(this._statisticsReporter);
                this._statisticsReporter = null;
            }
        }
    }, {
        key: '_reportSegmentMediaInfo',
        value: function _reportSegmentMediaInfo(segmentIndex) {
            var segmentInfo = this._mediaInfo.segments[segmentIndex];
            var exportInfo = Object.assign({}, segmentInfo);

            exportInfo.duration = this._mediaInfo.duration;
            exportInfo.segmentCount = this._mediaInfo.segmentCount;
            delete exportInfo.segments;
            delete exportInfo.keyframesIndex;

            this._emitter.emit(_transmuxingEvents2.default.MEDIA_INFO, exportInfo);
        }
    }, {
        key: '_reportStatisticsInfo',
        value: function _reportStatisticsInfo() {
            var info = {};

            info.url = this._ioctl.currentURL;
            info.hasRedirect = this._ioctl.hasRedirect;
            if (info.hasRedirect) {
                info.redirectedURL = this._ioctl.currentRedirectedURL;
            }

            info.speed = this._ioctl.currentSpeed;
            info.loaderType = this._ioctl.loaderType;
            info.currentSegmentIndex = this._currentSegmentIndex;
            info.totalSegmentCount = this._mediaDataSource.segments.length;

            this._emitter.emit(_transmuxingEvents2.default.STATISTICS_INFO, info);
        }
    }]);

    return TransmuxingController;
}();

exports.default = TransmuxingController;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/core/transmuxing-events.js":
/*!********************************************!*\
  !*** ./src/flv/core/transmuxing-events.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var TransmuxingEvents = {
  IO_ERROR: 'io_error',
  DEMUX_ERROR: 'demux_error',
  INIT_SEGMENT: 'init_segment',
  MEDIA_SEGMENT: 'media_segment',
  LOADING_COMPLETE: 'loading_complete',
  RECOVERED_EARLY_EOF: 'recovered_early_eof',
  MEDIA_INFO: 'media_info',
  STATISTICS_INFO: 'statistics_info',
  RECOMMEND_SEEKPOINT: 'recommend_seekpoint'
};

exports.default = TransmuxingEvents;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/core/transmuxing-worker.js":
/*!********************************************!*\
  !*** ./src/flv/core/transmuxing-worker.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _loggingControl = __webpack_require__(/*! ../utils/logging-control.js */ "./src/flv/utils/logging-control.js");

var _loggingControl2 = _interopRequireDefault(_loggingControl);

var _polyfill = __webpack_require__(/*! ../utils/polyfill.js */ "./src/flv/utils/polyfill.js");

var _polyfill2 = _interopRequireDefault(_polyfill);

var _transmuxingController = __webpack_require__(/*! ./transmuxing-controller.js */ "./src/flv/core/transmuxing-controller.js");

var _transmuxingController2 = _interopRequireDefault(_transmuxingController);

var _transmuxingEvents = __webpack_require__(/*! ./transmuxing-events.js */ "./src/flv/core/transmuxing-events.js");

var _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* post message to worker:
   data: {
       cmd: string
       param: any
   }

   receive message from worker:
   data: {
       msg: string,
       data: any
   }
 */

var TransmuxingWorker = function TransmuxingWorker(self) {

    var TAG = 'TransmuxingWorker';
    var controller = null;
    var logcatListener = onLogcatCallback.bind(this);

    _polyfill2.default.install();

    self.addEventListener('message', function (e) {
        switch (e.data.cmd) {
            case 'init':
                controller = new _transmuxingController2.default(e.data.param[0], e.data.param[1]);
                controller.on(_transmuxingEvents2.default.IO_ERROR, onIOError.bind(this));
                controller.on(_transmuxingEvents2.default.DEMUX_ERROR, onDemuxError.bind(this));
                controller.on(_transmuxingEvents2.default.INIT_SEGMENT, onInitSegment.bind(this));
                controller.on(_transmuxingEvents2.default.MEDIA_SEGMENT, onMediaSegment.bind(this));
                controller.on(_transmuxingEvents2.default.LOADING_COMPLETE, onLoadingComplete.bind(this));
                controller.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(this));
                controller.on(_transmuxingEvents2.default.MEDIA_INFO, onMediaInfo.bind(this));
                controller.on(_transmuxingEvents2.default.STATISTICS_INFO, onStatisticsInfo.bind(this));
                controller.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(this));
                break;
            case 'destroy':
                if (controller) {
                    controller.destroy();
                    controller = null;
                }
                self.postMessage({ msg: 'destroyed' });
                break;
            case 'start':
                controller.start();
                break;
            case 'stop':
                controller.stop();
                break;
            case 'seek':
                controller.seek(e.data.param);
                break;
            case 'pause':
                controller.pause();
                break;
            case 'resume':
                controller.resume();
                break;
            case 'logging_config':
                {
                    var config = e.data.param;
                    _loggingControl2.default.applyConfig(config);

                    if (config.enableCallback === true) {
                        _loggingControl2.default.addLogListener(logcatListener);
                    } else {
                        _loggingControl2.default.removeLogListener(logcatListener);
                    }
                    break;
                }
        }
    });

    function onInitSegment(type, initSegment) {
        var obj = {
            msg: _transmuxingEvents2.default.INIT_SEGMENT,
            data: {
                type: type,
                data: initSegment
            }
        };
        self.postMessage(obj, [initSegment.data]); // data: ArrayBuffer
    }

    function onMediaSegment(type, mediaSegment) {
        var obj = {
            msg: _transmuxingEvents2.default.MEDIA_SEGMENT,
            data: {
                type: type,
                data: mediaSegment
            }
        };
        self.postMessage(obj, [mediaSegment.data]); // data: ArrayBuffer
    }

    function onLoadingComplete() {
        var obj = {
            msg: _transmuxingEvents2.default.LOADING_COMPLETE
        };
        self.postMessage(obj);
    }

    function onRecoveredEarlyEof() {
        var obj = {
            msg: _transmuxingEvents2.default.RECOVERED_EARLY_EOF
        };
        self.postMessage(obj);
    }

    function onMediaInfo(mediaInfo) {
        var obj = {
            msg: _transmuxingEvents2.default.MEDIA_INFO,
            data: mediaInfo
        };
        self.postMessage(obj);
    }

    function onStatisticsInfo(statInfo) {
        var obj = {
            msg: _transmuxingEvents2.default.STATISTICS_INFO,
            data: statInfo
        };
        self.postMessage(obj);
    }

    function onIOError(type, info) {
        self.postMessage({
            msg: _transmuxingEvents2.default.IO_ERROR,
            data: {
                type: type,
                info: info
            }
        });
    }

    function onDemuxError(type, info) {
        self.postMessage({
            msg: _transmuxingEvents2.default.DEMUX_ERROR,
            data: {
                type: type,
                info: info
            }
        });
    }

    function onRecommendSeekpoint(milliseconds) {
        self.postMessage({
            msg: _transmuxingEvents2.default.RECOMMEND_SEEKPOINT,
            data: milliseconds
        });
    }

    function onLogcatCallback(type, str) {
        self.postMessage({
            msg: 'logcat_callback',
            data: {
                type: type,
                logcat: str
            }
        });
    }
}; /*
    * Copyright (C) 2016 Bilibili. All Rights Reserved.
    *
    * @author zheng qian <xqq@xqq.im>
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

exports.default = TransmuxingWorker;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/demux/amf-parser.js":
/*!*************************************!*\
  !*** ./src/flv/demux/amf-parser.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _utf8Conv = __webpack_require__(/*! ../utils/utf8-conv.js */ "./src/flv/utils/utf8-conv.js");

var _utf8Conv2 = _interopRequireDefault(_utf8Conv);

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var le = function () {
    var buf = new ArrayBuffer(2);
    new DataView(buf).setInt16(0, 256, true); // little-endian write
    return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE
}();

var AMF = function () {
    function AMF() {
        _classCallCheck(this, AMF);
    }

    _createClass(AMF, null, [{
        key: 'parseScriptData',
        value: function parseScriptData(arrayBuffer, dataOffset, dataSize) {
            var data = {};

            try {
                var name = AMF.parseValue(arrayBuffer, dataOffset, dataSize);
                var value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);

                data[name.data] = value.data;
            } catch (e) {
                _logger2.default.e('AMF', e.toString());
            }

            return data;
        }
    }, {
        key: 'parseObject',
        value: function parseObject(arrayBuffer, dataOffset, dataSize) {
            if (dataSize < 3) {
                throw new _exception.IllegalStateException('Data not enough when parse ScriptDataObject');
            }
            var name = AMF.parseString(arrayBuffer, dataOffset, dataSize);
            var value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);
            var isObjectEnd = value.objectEnd;

            return {
                data: {
                    name: name.data,
                    value: value.data
                },
                size: name.size + value.size,
                objectEnd: isObjectEnd
            };
        }
    }, {
        key: 'parseVariable',
        value: function parseVariable(arrayBuffer, dataOffset, dataSize) {
            return AMF.parseObject(arrayBuffer, dataOffset, dataSize);
        }
    }, {
        key: 'parseString',
        value: function parseString(arrayBuffer, dataOffset, dataSize) {
            if (dataSize < 2) {
                throw new _exception.IllegalStateException('Data not enough when parse String');
            }
            var v = new DataView(arrayBuffer, dataOffset, dataSize);
            var length = v.getUint16(0, !le);

            var str = void 0;
            if (length > 0) {
                str = (0, _utf8Conv2.default)(new Uint8Array(arrayBuffer, dataOffset + 2, length));
            } else {
                str = '';
            }

            return {
                data: str,
                size: 2 + length
            };
        }
    }, {
        key: 'parseLongString',
        value: function parseLongString(arrayBuffer, dataOffset, dataSize) {
            if (dataSize < 4) {
                throw new _exception.IllegalStateException('Data not enough when parse LongString');
            }
            var v = new DataView(arrayBuffer, dataOffset, dataSize);
            var length = v.getUint32(0, !le);

            var str = void 0;
            if (length > 0) {
                str = (0, _utf8Conv2.default)(new Uint8Array(arrayBuffer, dataOffset + 4, length));
            } else {
                str = '';
            }

            return {
                data: str,
                size: 4 + length
            };
        }
    }, {
        key: 'parseDate',
        value: function parseDate(arrayBuffer, dataOffset, dataSize) {
            if (dataSize < 10) {
                throw new _exception.IllegalStateException('Data size invalid when parse Date');
            }
            var v = new DataView(arrayBuffer, dataOffset, dataSize);
            var timestamp = v.getFloat64(0, !le);
            var localTimeOffset = v.getInt16(8, !le);
            timestamp += localTimeOffset * 60 * 1000; // get UTC time

            return {
                data: new Date(timestamp),
                size: 8 + 2
            };
        }
    }, {
        key: 'parseValue',
        value: function parseValue(arrayBuffer, dataOffset, dataSize) {
            if (dataSize < 1) {
                throw new _exception.IllegalStateException('Data not enough when parse Value');
            }

            var v = new DataView(arrayBuffer, dataOffset, dataSize);

            var offset = 1;
            var type = v.getUint8(0);
            var value = void 0;
            var objectEnd = false;

            try {
                switch (type) {
                    case 0:
                        // Number(Double) type
                        value = v.getFloat64(1, !le);
                        offset += 8;
                        break;
                    case 1:
                        {
                            // Boolean type
                            var b = v.getUint8(1);
                            value = b ? true : false;
                            offset += 1;
                            break;
                        }
                    case 2:
                        {
                            // String type
                            var amfstr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);
                            value = amfstr.data;
                            offset += amfstr.size;
                            break;
                        }
                    case 3:
                        {
                            // Object(s) type
                            value = {};
                            var terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd
                            if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {
                                terminal = 3;
                            }
                            while (offset < dataSize - 4) {
                                // 4 === type(UI8) + ScriptDataObjectEnd(UI24)
                                var amfobj = AMF.parseObject(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);
                                if (amfobj.objectEnd) break;
                                value[amfobj.data.name] = amfobj.data.value;
                                offset += amfobj.size;
                            }
                            if (offset <= dataSize - 3) {
                                var marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;
                                if (marker === 9) {
                                    offset += 3;
                                }
                            }
                            break;
                        }
                    case 8:
                        {
                            // ECMA array type (Mixed array)
                            value = {};
                            offset += 4; // ECMAArrayLength(UI32)
                            var _terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd
                            if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {
                                _terminal = 3;
                            }
                            while (offset < dataSize - 8) {
                                // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)
                                var amfvar = AMF.parseVariable(arrayBuffer, dataOffset + offset, dataSize - offset - _terminal);
                                if (amfvar.objectEnd) break;
                                value[amfvar.data.name] = amfvar.data.value;
                                offset += amfvar.size;
                            }
                            if (offset <= dataSize - 3) {
                                var _marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;
                                if (_marker === 9) {
                                    offset += 3;
                                }
                            }
                            break;
                        }
                    case 9:
                        // ScriptDataObjectEnd
                        value = undefined;
                        offset = 1;
                        objectEnd = true;
                        break;
                    case 10:
                        {
                            // Strict array type
                            // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf
                            value = [];
                            var strictArrayLength = v.getUint32(1, !le);
                            offset += 4;
                            for (var i = 0; i < strictArrayLength; i++) {
                                var val = AMF.parseValue(arrayBuffer, dataOffset + offset, dataSize - offset);
                                value.push(val.data);
                                offset += val.size;
                            }
                            break;
                        }
                    case 11:
                        {
                            // Date type
                            var date = AMF.parseDate(arrayBuffer, dataOffset + 1, dataSize - 1);
                            value = date.data;
                            offset += date.size;
                            break;
                        }
                    case 12:
                        {
                            // Long string type
                            var amfLongStr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);
                            value = amfLongStr.data;
                            offset += amfLongStr.size;
                            break;
                        }
                    default:
                        // ignore and skip
                        offset = dataSize;
                        _logger2.default.w('AMF', 'Unsupported AMF value type ' + type);
                }
            } catch (e) {
                _logger2.default.e('AMF', e.toString());
            }

            return {
                data: value,
                size: offset,
                objectEnd: objectEnd
            };
        }
    }]);

    return AMF;
}();

exports.default = AMF;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/demux/demux-errors.js":
/*!***************************************!*\
  !*** ./src/flv/demux/demux-errors.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var DemuxErrors = {
  OK: 'OK',
  FORMAT_ERROR: 'FormatError',
  FORMAT_UNSUPPORTED: 'FormatUnsupported',
  CODEC_UNSUPPORTED: 'CodecUnsupported'
};

exports.default = DemuxErrors;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/demux/exp-golomb.js":
/*!*************************************!*\
  !*** ./src/flv/demux/exp-golomb.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Exponential-Golomb buffer decoder
var ExpGolomb = function () {
    function ExpGolomb(uint8array) {
        _classCallCheck(this, ExpGolomb);

        this.TAG = 'ExpGolomb';

        this._buffer = uint8array;
        this._buffer_index = 0;
        this._total_bytes = uint8array.byteLength;
        this._total_bits = uint8array.byteLength * 8;
        this._current_word = 0;
        this._current_word_bits_left = 0;
    }

    _createClass(ExpGolomb, [{
        key: 'destroy',
        value: function destroy() {
            this._buffer = null;
        }
    }, {
        key: '_fillCurrentWord',
        value: function _fillCurrentWord() {
            var buffer_bytes_left = this._total_bytes - this._buffer_index;
            if (buffer_bytes_left <= 0) throw new _exception.IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');

            var bytes_read = Math.min(4, buffer_bytes_left);
            var word = new Uint8Array(4);
            word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));
            this._current_word = new DataView(word.buffer).getUint32(0, false);

            this._buffer_index += bytes_read;
            this._current_word_bits_left = bytes_read * 8;
        }
    }, {
        key: 'readBits',
        value: function readBits(bits) {
            if (bits > 32) throw new _exception.InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');

            if (bits <= this._current_word_bits_left) {
                var _result = this._current_word >>> 32 - bits;
                this._current_word <<= bits;
                this._current_word_bits_left -= bits;
                return _result;
            }

            var result = this._current_word_bits_left ? this._current_word : 0;
            result = result >>> 32 - this._current_word_bits_left;
            var bits_need_left = bits - this._current_word_bits_left;

            this._fillCurrentWord();
            var bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);

            var result2 = this._current_word >>> 32 - bits_read_next;
            this._current_word <<= bits_read_next;
            this._current_word_bits_left -= bits_read_next;

            result = result << bits_read_next | result2;
            return result;
        }
    }, {
        key: 'readBool',
        value: function readBool() {
            return this.readBits(1) === 1;
        }
    }, {
        key: 'readByte',
        value: function readByte() {
            return this.readBits(8);
        }
    }, {
        key: '_skipLeadingZero',
        value: function _skipLeadingZero() {
            var zero_count = void 0;
            for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {
                if (0 !== (this._current_word & 0x80000000 >>> zero_count)) {
                    this._current_word <<= zero_count;
                    this._current_word_bits_left -= zero_count;
                    return zero_count;
                }
            }
            this._fillCurrentWord();
            return zero_count + this._skipLeadingZero();
        }
    }, {
        key: 'readUEG',
        value: function readUEG() {
            // unsigned exponential golomb
            var leading_zeros = this._skipLeadingZero();
            return this.readBits(leading_zeros + 1) - 1;
        }
    }, {
        key: 'readSEG',
        value: function readSEG() {
            // signed exponential golomb
            var value = this.readUEG();
            if (value & 0x01) {
                return value + 1 >>> 1;
            } else {
                return -1 * (value >>> 1);
            }
        }
    }]);

    return ExpGolomb;
}();

exports.default = ExpGolomb;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/demux/flv-demuxer.js":
/*!**************************************!*\
  !*** ./src/flv/demux/flv-demuxer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *     http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _amfParser = __webpack_require__(/*! ./amf-parser.js */ "./src/flv/demux/amf-parser.js");

var _amfParser2 = _interopRequireDefault(_amfParser);

var _spsParser = __webpack_require__(/*! ./sps-parser.js */ "./src/flv/demux/sps-parser.js");

var _spsParser2 = _interopRequireDefault(_spsParser);

var _demuxErrors = __webpack_require__(/*! ./demux-errors.js */ "./src/flv/demux/demux-errors.js");

var _demuxErrors2 = _interopRequireDefault(_demuxErrors);

var _mediaInfo = __webpack_require__(/*! ../core/media-info.js */ "./src/flv/core/media-info.js");

var _mediaInfo2 = _interopRequireDefault(_mediaInfo);

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

var _events = __webpack_require__(/*! events */ "./node_modules/events/events.js");

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Swap16(src) {
  return src >>> 8 & 0xFF | (src & 0xFF) << 8;
}

function Swap32(src) {
  return (src & 0xFF000000) >>> 24 | (src & 0x00FF0000) >>> 8 | (src & 0x0000FF00) << 8 | (src & 0x000000FF) << 24;
}

function ReadBig32(array, index) {
  return array[index] << 24 | array[index + 1] << 16 | array[index + 2] << 8 | array[index + 3];
}

var FLVDemuxer = function () {
  function FLVDemuxer(probeData, config) {
    _classCallCheck(this, FLVDemuxer);

    this.TAG = 'FLVDemuxer';

    this._emitter = new _events2.default();

    this._config = config;

    this._onError = null;
    this._onMediaInfo = null;
    this._onTrackMetadata = null;
    this._onDataAvailable = null;

    this._dataOffset = probeData.dataOffset;
    this._firstParse = true;
    this._dispatch = false;

    this._hasAudio = probeData.hasAudioTrack;
    this._hasVideo = probeData.hasVideoTrack;

    this._hasAudioFlagOverrided = false;
    this._hasVideoFlagOverrided = false;

    this._audioInitialMetadataDispatched = false;
    this._videoInitialMetadataDispatched = false;

    this._mediaInfo = new _mediaInfo2.default();
    this._mediaInfo.hasAudio = this._hasAudio;
    this._mediaInfo.hasVideo = this._hasVideo;
    this._metadata = null;
    this._audioMetadata = null;
    this._videoMetadata = null;

    this._naluLengthSize = 4;
    this._timestampBase = 0; // int32, in milliseconds
    this._timescale = 1000;
    this._duration = 0; // int32, in milliseconds
    this._durationOverrided = false;
    this._referenceFrameRate = {
      fixed: true,
      fps: 23.976,
      fps_num: 23976,
      fps_den: 1000
    };

    this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48000];

    this._mpegSamplingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];

    this._mpegAudioV10SampleRateTable = [44100, 48000, 32000, 0];
    this._mpegAudioV20SampleRateTable = [22050, 24000, 16000, 0];
    this._mpegAudioV25SampleRateTable = [11025, 12000, 8000, 0];

    this._mpegAudioL1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1];
    this._mpegAudioL2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1];
    this._mpegAudioL3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1];

    this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, samples: [], length: 0 };
    this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 0, samples: [], length: 0 };

    this._littleEndian = function () {
      var buf = new ArrayBuffer(2);
      new DataView(buf).setInt16(0, 256, true); // little-endian write
      return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE
    }();
  }

  _createClass(FLVDemuxer, [{
    key: 'destroy',
    value: function destroy() {
      this._mediaInfo = null;
      this._metadata = null;
      this._audioMetadata = null;
      this._videoMetadata = null;
      this._videoTrack = null;
      this._audioTrack = null;

      this._onError = null;
      this._onMediaInfo = null;
      this._onTrackMetadata = null;
      this._onDataAvailable = null;

      this._emitter.removeAllListeners();
      this._emitter = null;
    }
  }, {
    key: 'bindDataSource',
    value: function bindDataSource(loader) {
      loader.onDataArrival = this.parseChunks.bind(this);
      return this;
    }

    // prototype: function(type: string, metadata: any): void

  }, {
    key: 'resetMediaInfo',
    value: function resetMediaInfo() {
      this._mediaInfo = new _mediaInfo2.default();
    }
  }, {
    key: '_isInitialMetadataDispatched',
    value: function _isInitialMetadataDispatched() {
      if (this._hasAudio && this._hasVideo) {
        // both audio & video
        return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;
      }
      if (this._hasAudio && !this._hasVideo) {
        // audio only
        return this._audioInitialMetadataDispatched;
      }
      if (!this._hasAudio && this._hasVideo) {
        // video only
        return this._videoInitialMetadataDispatched;
      }
      return false;
    }

    // function parseChunks(chunk: ArrayBuffer, byteStart: number): number;

  }, {
    key: 'parseChunks',
    value: function parseChunks(chunk, byteStart) {
      if (!this._onError || !this._onMediaInfo || !this._onTrackMetadata || !this._onDataAvailable) {
        throw new _exception.IllegalStateException('Flv: onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified');
      }

      var offset = 0;
      var le = this._littleEndian;

      if (byteStart === 0) {
        // buffer with FLV header
        if (chunk.byteLength > 13) {
          var probeData = FLVDemuxer.probe(chunk);
          offset = probeData.dataOffset;
        } else {
          return 0;
        }
      }

      if (this._firstParse) {
        // handle PreviousTagSize0 before Tag1
        this._firstParse = false;
        if (byteStart + offset !== this._dataOffset) {
          _logger2.default.w(this.TAG, 'First time parsing but chunk byteStart invalid!');
        }

        var v = new DataView(chunk, offset);
        var prevTagSize0 = v.getUint32(0, !le);
        if (prevTagSize0 !== 0) {
          _logger2.default.w(this.TAG, 'PrevTagSize0 !== 0 !!!');
        }
        offset += 4;
      }

      while (offset < chunk.byteLength) {
        this._dispatch = true;

        var _v = new DataView(chunk, offset);

        if (offset + 11 + 4 > chunk.byteLength) {
          // data not enough for parsing an flv tag
          break;
        }

        var tagType = _v.getUint8(0);
        var dataSize = _v.getUint32(0, !le) & 0x00FFFFFF;

        if (offset + 11 + dataSize + 4 > chunk.byteLength) {
          // data not enough for parsing actual data body
          break;
        }

        if (tagType !== 8 && tagType !== 9 && tagType !== 18) {
          _logger2.default.w(this.TAG, 'Unsupported tag type ' + tagType + ', skipped');
          // consume the whole tag (skip it)
          offset += 11 + dataSize + 4;
          continue;
        }

        var ts2 = _v.getUint8(4);
        var ts1 = _v.getUint8(5);
        var ts0 = _v.getUint8(6);
        var ts3 = _v.getUint8(7);

        var timestamp = ts0 | ts1 << 8 | ts2 << 16 | ts3 << 24;

        var streamId = _v.getUint32(7, !le) & 0x00FFFFFF;
        if (streamId !== 0) {
          _logger2.default.w(this.TAG, 'Meet tag which has StreamID != 0!');
        }

        var dataOffset = offset + 11;

        switch (tagType) {
          case 8:
            // Audio
            this._parseAudioData(chunk, dataOffset, dataSize, timestamp);
            break;
          case 9:
            // Video
            this._parseVideoData(chunk, dataOffset, dataSize, timestamp, byteStart + offset);
            break;
          case 18:
            // ScriptDataObject
            this._parseScriptData(chunk, dataOffset, dataSize);
            break;
        }

        var prevTagSize = _v.getUint32(11 + dataSize, !le);
        if (prevTagSize !== 11 + dataSize) {
          _logger2.default.w(this.TAG, 'Invalid PrevTagSize ' + prevTagSize);
        }

        offset += 11 + dataSize + 4; // tagBody + dataSize + prevTagSize
      }

      // dispatch parsed frames to consumer (typically, the remuxer)
      if (this._isInitialMetadataDispatched()) {
        if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {
          this._onDataAvailable(this._audioTrack, this._videoTrack);
        }
      }

      return offset; // consumed bytes, just equals latest offset index
    }
  }, {
    key: '_parseScriptData',
    value: function _parseScriptData(arrayBuffer, dataOffset, dataSize) {
      var scriptData = _amfParser2.default.parseScriptData(arrayBuffer, dataOffset, dataSize);

      if (scriptData.hasOwnProperty('onMetaData')) {
        if (scriptData.onMetaData == null || _typeof(scriptData.onMetaData) !== 'object') {
          _logger2.default.w(this.TAG, 'Invalid onMetaData structure!');
          return;
        }
        if (this._metadata) {
          _logger2.default.w(this.TAG, 'Found another onMetaData tag!');
        }
        this._metadata = scriptData;
        var onMetaData = this._metadata.onMetaData;
        this._emitter.emit('metadata_arrived', onMetaData);

        if (typeof onMetaData.hasAudio === 'boolean') {
          // hasAudio
          if (this._hasAudioFlagOverrided === false) {
            this._hasAudio = onMetaData.hasAudio;
            this._mediaInfo.hasAudio = this._hasAudio;
          }
        }
        if (typeof onMetaData.hasVideo === 'boolean') {
          // hasVideo
          if (this._hasVideoFlagOverrided === false) {
            this._hasVideo = onMetaData.hasVideo;
            this._mediaInfo.hasVideo = this._hasVideo;
          }
        }
        if (typeof onMetaData.audiodatarate === 'number') {
          // audiodatarate
          this._mediaInfo.audioDataRate = onMetaData.audiodatarate;
        }
        if (typeof onMetaData.videodatarate === 'number') {
          // videodatarate
          this._mediaInfo.videoDataRate = onMetaData.videodatarate;
        }
        if (typeof onMetaData.width === 'number') {
          // width
          this._mediaInfo.width = onMetaData.width;
        }
        if (typeof onMetaData.height === 'number') {
          // height
          this._mediaInfo.height = onMetaData.height;
        }
        if (typeof onMetaData.duration === 'number') {
          // duration
          if (!this._durationOverrided) {
            var duration = Math.floor(onMetaData.duration * this._timescale);
            this._duration = duration;
            this._mediaInfo.duration = duration;
          }
        } else {
          this._mediaInfo.duration = 0;
        }
        if (typeof onMetaData.framerate === 'number') {
          // framerate
          var fps_num = Math.floor(onMetaData.framerate * 1000);
          if (fps_num > 0) {
            var fps = fps_num / 1000;
            this._referenceFrameRate.fixed = true;
            this._referenceFrameRate.fps = fps;
            this._referenceFrameRate.fps_num = fps_num;
            this._referenceFrameRate.fps_den = 1000;
            this._mediaInfo.fps = fps;
          }
        }
        if (_typeof(onMetaData.keyframes) === 'object') {
          // keyframes
          this._mediaInfo.hasKeyframesIndex = true;
          var keyframes = onMetaData.keyframes;
          this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);
          onMetaData.keyframes = null; // keyframes has been extracted, remove it
        } else {
          this._mediaInfo.hasKeyframesIndex = false;
        }
        this._dispatch = false;
        this._mediaInfo.metadata = onMetaData;
        _logger2.default.v(this.TAG, 'Parsed onMetaData');
        if (this._mediaInfo.isComplete()) {
          this._onMediaInfo(this._mediaInfo);
        }
      }
    }
  }, {
    key: '_parseKeyframesIndex',
    value: function _parseKeyframesIndex(keyframes) {
      var times = [];
      var filepositions = [];

      // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)
      for (var i = 1; i < keyframes.times.length; i++) {
        var time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);
        times.push(time);
        filepositions.push(keyframes.filepositions[i]);
      }

      return {
        times: times,
        filepositions: filepositions
      };
    }
  }, {
    key: '_parseAudioData',
    value: function _parseAudioData(arrayBuffer, dataOffset, dataSize, tagTimestamp) {
      if (dataSize <= 1) {
        _logger2.default.w(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');
        return;
      }

      if (this._hasAudioFlagOverrided === true && this._hasAudio === false) {
        // If hasAudio: false indicated explicitly in MediaDataSource,
        // Ignore all the audio packets
        return;
      }

      var le = this._littleEndian;
      var v = new DataView(arrayBuffer, dataOffset, dataSize);

      var soundSpec = v.getUint8(0);

      var soundFormat = soundSpec >>> 4;
      if (soundFormat !== 2 && soundFormat !== 10) {
        // MP3 or AAC
        this._onError(_demuxErrors2.default.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);
        return;
      }

      var soundRate = 0;
      var soundRateIndex = (soundSpec & 12) >>> 2;
      if (soundRateIndex >= 0 && soundRateIndex <= 4) {
        soundRate = this._flvSoundRateTable[soundRateIndex];
      } else {
        this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);
        return;
      }

      var soundSize = (soundSpec & 2) >>> 1; // unused
      var soundType = soundSpec & 1;

      var meta = this._audioMetadata;
      var track = this._audioTrack;

      if (!meta) {
        if (this._hasAudio === false && this._hasAudioFlagOverrided === false) {
          this._hasAudio = true;
          this._mediaInfo.hasAudio = true;
        }

        // initial metadata
        meta = this._audioMetadata = {};
        meta.type = 'audio';
        meta.id = track.id;
        meta.timescale = this._timescale;
        meta.duration = this._duration;
        meta.audioSampleRate = soundRate;
        meta.channelCount = soundType === 0 ? 1 : 2;
      }

      if (soundFormat === 10) {
        // AAC
        var aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);
        if (aacData == undefined) {
          return;
        }

        if (aacData.packetType === 0) {
          // AAC sequence header (AudioSpecificConfig)
          if (meta.config) {
            _logger2.default.w(this.TAG, 'Found another AudioSpecificConfig!');
          }
          var misc = aacData.data;
          meta.audioSampleRate = misc.samplingRate;
          meta.channelCount = misc.channelCount;
          meta.codec = misc.codec;
          meta.originalCodec = misc.originalCodec;
          meta.config = misc.config;
          // The decode result of an aac sample is 1024 PCM samples
          meta.refSampleDuration = 1024 / meta.audioSampleRate * meta.timescale;
          _logger2.default.v(this.TAG, 'Parsed AudioSpecificConfig');

          if (this._isInitialMetadataDispatched()) {
            // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer
            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {
              this._onDataAvailable(this._audioTrack, this._videoTrack);
            }
          } else {
            this._audioInitialMetadataDispatched = true;
          }
          // then notify new metadata
          this._dispatch = false;
          this._onTrackMetadata('audio', meta);

          var mi = this._mediaInfo;
          mi.audioCodec = meta.originalCodec;
          mi.audioSampleRate = meta.audioSampleRate;
          mi.audioChannelCount = meta.channelCount;
          if (mi.hasVideo) {
            if (mi.videoCodec != null) {
              mi.mimeType = 'video/x-flv; codecs="' + mi.videoCodec + ',' + mi.audioCodec + '"';
            }
          } else {
            mi.mimeType = 'video/x-flv; codecs="' + mi.audioCodec + '"';
          }
          if (mi.isComplete()) {
            this._onMediaInfo(mi);
          }
        } else if (aacData.packetType === 1) {
          // AAC raw frame data
          var dts = this._timestampBase + tagTimestamp;
          var aacSample = { unit: aacData.data, length: aacData.data.byteLength, dts: dts, pts: dts };
          track.samples.push(aacSample);
          track.length += aacData.data.length;
        } else {
          _logger2.default.e(this.TAG, 'Flv: Unsupported AAC data type ' + aacData.packetType);
        }
      } else if (soundFormat === 2) {
        // MP3
        if (!meta.codec) {
          // We need metadata for mp3 audio track, extract info from frame header
          var _misc = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, true);
          if (_misc == undefined) {
            return;
          }
          meta.audioSampleRate = _misc.samplingRate;
          meta.channelCount = _misc.channelCount;
          meta.codec = _misc.codec;
          meta.originalCodec = _misc.originalCodec;
          // The decode result of an mp3 sample is 1152 PCM samples
          meta.refSampleDuration = 1152 / meta.audioSampleRate * meta.timescale;
          _logger2.default.v(this.TAG, 'Parsed MPEG Audio Frame Header');

          this._audioInitialMetadataDispatched = true;
          this._onTrackMetadata('audio', meta);

          var _mi = this._mediaInfo;
          _mi.audioCodec = meta.codec;
          _mi.audioSampleRate = meta.audioSampleRate;
          _mi.audioChannelCount = meta.channelCount;
          _mi.audioDataRate = _misc.bitRate;
          if (_mi.hasVideo) {
            if (_mi.videoCodec != null) {
              _mi.mimeType = 'video/x-flv; codecs="' + _mi.videoCodec + ',' + _mi.audioCodec + '"';
            }
          } else {
            _mi.mimeType = 'video/x-flv; codecs="' + _mi.audioCodec + '"';
          }
          if (_mi.isComplete()) {
            this._onMediaInfo(_mi);
          }
        }

        // This packet is always a valid audio packet, extract it
        var data = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, false);
        if (data == undefined) {
          return;
        }
        var _dts = this._timestampBase + tagTimestamp;
        var mp3Sample = { unit: data, length: data.byteLength, dts: _dts, pts: _dts };
        track.samples.push(mp3Sample);
        track.length += data.length;
      }
    }
  }, {
    key: '_parseAACAudioData',
    value: function _parseAACAudioData(arrayBuffer, dataOffset, dataSize) {
      if (dataSize <= 1) {
        _logger2.default.w(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');
        return;
      }

      var result = {};
      var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);

      result.packetType = array[0];

      if (array[0] === 0) {
        result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);
      } else {
        result.data = array.subarray(1);
      }

      return result;
    }
  }, {
    key: '_parseAACAudioSpecificConfig',
    value: function _parseAACAudioSpecificConfig(arrayBuffer, dataOffset, dataSize) {
      var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);
      var config = null;

      /* Audio Object Type:
         0: Null
         1: AAC Main
         2: AAC LC
         3: AAC SSR (Scalable Sample Rate)
         4: AAC LTP (Long Term Prediction)
         5: HE-AAC / SBR (Spectral Band Replication)
         6: AAC Scalable
      */

      var audioObjectType = 0;
      var originalAudioObjectType = 0;
      var audioExtensionObjectType = null;
      var samplingIndex = 0;
      var extensionSamplingIndex = null;

      // 5 bits
      audioObjectType = originalAudioObjectType = array[0] >>> 3;
      // 4 bits
      samplingIndex = (array[0] & 0x07) << 1 | array[1] >>> 7;
      if (samplingIndex < 0 || samplingIndex >= this._mpegSamplingRates.length) {
        this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');
        return;
      }

      var samplingFrequence = this._mpegSamplingRates[samplingIndex];

      // 4 bits
      var channelConfig = (array[1] & 0x78) >>> 3;
      if (channelConfig < 0 || channelConfig >= 8) {
        this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');
        return;
      }

      if (audioObjectType === 5) {
        // HE-AAC?
        // 4 bits
        extensionSamplingIndex = (array[1] & 0x07) << 1 | array[2] >>> 7;
        // 5 bits
        audioExtensionObjectType = (array[2] & 0x7C) >>> 2;
      }

      // workarounds for various browsers
      var userAgent = self.navigator.userAgent.toLowerCase();

      if (userAgent.indexOf('firefox') !== -1) {
        // firefox: use SBR (HE-AAC) if freq less than 24kHz
        if (samplingIndex >= 6) {
          audioObjectType = 5;
          config = new Array(4);
          extensionSamplingIndex = samplingIndex - 3;
        } else {
          // use LC-AAC
          audioObjectType = 2;
          config = new Array(2);
          extensionSamplingIndex = samplingIndex;
        }
      } else if (userAgent.indexOf('android') !== -1) {
        // android: always use LC-AAC
        audioObjectType = 2;
        config = new Array(2);
        extensionSamplingIndex = samplingIndex;
      } else {
        // for other browsers, e.g. chrome...
        // Always use HE-AAC to make it easier to switch aac codec profile
        audioObjectType = 5;
        extensionSamplingIndex = samplingIndex;
        config = new Array(4);

        if (samplingIndex >= 6) {
          extensionSamplingIndex = samplingIndex - 3;
        } else if (channelConfig === 1) {
          // Mono channel
          audioObjectType = 2;
          config = new Array(2);
          extensionSamplingIndex = samplingIndex;
        }
      }

      config[0] = audioObjectType << 3;
      config[0] |= (samplingIndex & 0x0F) >>> 1;
      config[1] = (samplingIndex & 0x0F) << 7;
      config[1] |= (channelConfig & 0x0F) << 3;
      if (audioObjectType === 5) {
        config[1] |= (extensionSamplingIndex & 0x0F) >>> 1;
        config[2] = (extensionSamplingIndex & 0x01) << 7;
        // extended audio object type: force to 2 (LC-AAC)
        config[2] |= 2 << 2;
        config[3] = 0;
      }

      return {
        config: config,
        samplingRate: samplingFrequence,
        channelCount: channelConfig,
        codec: 'mp4a.40.' + audioObjectType,
        originalCodec: 'mp4a.40.' + originalAudioObjectType
      };
    }
  }, {
    key: '_parseMP3AudioData',
    value: function _parseMP3AudioData(arrayBuffer, dataOffset, dataSize, requestHeader) {
      if (dataSize < 4) {
        _logger2.default.w(this.TAG, 'Flv: Invalid MP3 packet, header missing!');
        return;
      }

      var le = this._littleEndian;
      var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);
      var result = null;

      if (requestHeader) {
        if (array[0] !== 0xFF) {
          return;
        }
        var ver = array[1] >>> 3 & 0x03;
        var layer = (array[1] & 0x06) >> 1;

        var bitrate_index = (array[2] & 0xF0) >>> 4;
        var sampling_freq_index = (array[2] & 0x0C) >>> 2;

        var channel_mode = array[3] >>> 6 & 0x03;
        var channel_count = channel_mode !== 3 ? 2 : 1;

        var sample_rate = 0;
        var bit_rate = 0;
        var object_type = 34; // Layer-3, listed in MPEG-4 Audio Object Types

        var codec = 'mp3';

        switch (ver) {
          case 0:
            // MPEG 2.5
            sample_rate = this._mpegAudioV25SampleRateTable[sampling_freq_index];
            break;
          case 2:
            // MPEG 2
            sample_rate = this._mpegAudioV20SampleRateTable[sampling_freq_index];
            break;
          case 3:
            // MPEG 1
            sample_rate = this._mpegAudioV10SampleRateTable[sampling_freq_index];
            break;
        }

        switch (layer) {
          case 1:
            // Layer 3
            object_type = 34;
            if (bitrate_index < this._mpegAudioL3BitRateTable.length) {
              bit_rate = this._mpegAudioL3BitRateTable[bitrate_index];
            }
            break;
          case 2:
            // Layer 2
            object_type = 33;
            if (bitrate_index < this._mpegAudioL2BitRateTable.length) {
              bit_rate = this._mpegAudioL2BitRateTable[bitrate_index];
            }
            break;
          case 3:
            // Layer 1
            object_type = 32;
            if (bitrate_index < this._mpegAudioL1BitRateTable.length) {
              bit_rate = this._mpegAudioL1BitRateTable[bitrate_index];
            }
            break;
        }

        result = {
          bitRate: bit_rate,
          samplingRate: sample_rate,
          channelCount: channel_count,
          codec: codec,
          originalCodec: codec
        };
      } else {
        result = array;
      }

      return result;
    }
  }, {
    key: '_parseVideoData',
    value: function _parseVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {
      if (dataSize <= 1) {
        _logger2.default.w(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');
        return;
      }

      if (this._hasVideoFlagOverrided === true && this._hasVideo === false) {
        // If hasVideo: false indicated explicitly in MediaDataSource,
        // Ignore all the video packets
        return;
      }

      var spec = new Uint8Array(arrayBuffer, dataOffset, dataSize)[0];

      var frameType = (spec & 240) >>> 4;
      var codecId = spec & 15;

      if (codecId !== 7) {
        this._onError(_demuxErrors2.default.CODEC_UNSUPPORTED, 'Flv: Unsupported codec in video frame: ' + codecId);
        return;
      }

      this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);
    }
  }, {
    key: '_parseAVCVideoPacket',
    value: function _parseAVCVideoPacket(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {
      if (dataSize < 4) {
        _logger2.default.w(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');
        return;
      }

      var le = this._littleEndian;
      var v = new DataView(arrayBuffer, dataOffset, dataSize);

      var packetType = v.getUint8(0);
      var cts_unsigned = v.getUint32(0, !le) & 0x00FFFFFF;
      var cts = cts_unsigned << 8 >> 8; // convert to 24-bit signed int

      if (packetType === 0) {
        // AVCDecoderConfigurationRecord
        this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);
      } else if (packetType === 1) {
        // One or more Nalus
        this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);
      } else if (packetType === 2) {
        // empty, AVC end of sequence
      } else {
        this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid video packet type ' + packetType);
        return;
      }
    }
  }, {
    key: '_parseAVCDecoderConfigurationRecord',
    value: function _parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset, dataSize) {
      if (dataSize < 7) {
        _logger2.default.w(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');
        return;
      }

      var meta = this._videoMetadata;
      var track = this._videoTrack;
      var le = this._littleEndian;
      var v = new DataView(arrayBuffer, dataOffset, dataSize);

      if (!meta) {
        if (this._hasVideo === false && this._hasVideoFlagOverrided === false) {
          this._hasVideo = true;
          this._mediaInfo.hasVideo = true;
        }

        meta = this._videoMetadata = {};
        meta.type = 'video';
        meta.id = track.id;
        meta.timescale = this._timescale;
        meta.duration = this._duration;
      } else {
        if (typeof meta.avcc !== 'undefined') {
          _logger2.default.w(this.TAG, 'Found another AVCDecoderConfigurationRecord!');
        }
      }

      var version = v.getUint8(0); // configurationVersion
      var avcProfile = v.getUint8(1); // avcProfileIndication
      var profileCompatibility = v.getUint8(2); // profile_compatibility
      var avcLevel = v.getUint8(3); // AVCLevelIndication

      if (version !== 1 || avcProfile === 0) {
        this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');
        return;
      }

      this._naluLengthSize = (v.getUint8(4) & 3) + 1; // lengthSizeMinusOne
      if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {
        // holy shit!!!
        this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Strange NaluLengthSizeMinusOne: ' + (this._naluLengthSize - 1));
        return;
      }

      var spsCount = v.getUint8(5) & 31; // numOfSequenceParameterSets
      if (spsCount === 0) {
        this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No SPS');
        return;
      } else if (spsCount > 1) {
        _logger2.default.w(this.TAG, 'Flv: Strange AVCDecoderConfigurationRecord: SPS Count = ' + spsCount);
      }

      var offset = 6;

      for (var i = 0; i < spsCount; i++) {
        var len = v.getUint16(offset, !le); // sequenceParameterSetLength
        offset += 2;

        if (len === 0) {
          continue;
        }

        // Notice: Nalu without startcode header (00 00 00 01)
        var sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);
        offset += len;

        var config = _spsParser2.default.parseSPS(sps);
        if (i !== 0) {
          // ignore other sps's config
          continue;
        }

        meta.codecWidth = config.codec_size.width;
        meta.codecHeight = config.codec_size.height;
        meta.presentWidth = config.present_size.width;
        meta.presentHeight = config.present_size.height;

        meta.profile = config.profile_string;
        meta.level = config.level_string;
        meta.bitDepth = config.bit_depth;
        meta.chromaFormat = config.chroma_format;
        meta.sarRatio = config.par_ratio;
        meta.frameRate = config.frame_rate;

        if (config.frame_rate.fixed === false || config.frame_rate.fps_num === 0 || config.frame_rate.fps_den === 0) {
          meta.frameRate = this._referenceFrameRate;
        }

        var fps_den = meta.frameRate.fps_den;
        var fps_num = meta.frameRate.fps_num;
        meta.refSampleDuration = meta.timescale * (fps_den / fps_num);

        var codecArray = sps.subarray(1, 4);
        var codecString = 'avc1.';
        for (var j = 0; j < 3; j++) {
          var h = codecArray[j].toString(16);
          if (h.length < 2) {
            h = '0' + h;
          }
          codecString += h;
        }
        meta.codec = codecString;

        var mi = this._mediaInfo;
        mi.width = meta.codecWidth;
        mi.height = meta.codecHeight;
        mi.fps = meta.frameRate.fps;
        mi.profile = meta.profile;
        mi.level = meta.level;
        mi.refFrames = config.ref_frames;
        mi.chromaFormat = config.chroma_format_string;
        mi.sarNum = meta.sarRatio.width;
        mi.sarDen = meta.sarRatio.height;
        mi.videoCodec = codecString;

        if (mi.hasAudio) {
          if (mi.audioCodec != null) {
            mi.mimeType = 'video/x-flv; codecs="' + mi.videoCodec + ',' + mi.audioCodec + '"';
          }
        } else {
          mi.mimeType = 'video/x-flv; codecs="' + mi.videoCodec + '"';
        }
        if (mi.isComplete()) {
          this._onMediaInfo(mi);
        }
      }

      var ppsCount = v.getUint8(offset); // numOfPictureParameterSets
      if (ppsCount === 0) {
        this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No PPS');
        return;
      } else if (ppsCount > 1) {
        _logger2.default.w(this.TAG, 'Flv: Strange AVCDecoderConfigurationRecord: PPS Count = ' + ppsCount);
      }

      offset++;

      for (var _i = 0; _i < ppsCount; _i++) {
        var _len = v.getUint16(offset, !le); // pictureParameterSetLength
        offset += 2;

        if (_len === 0) {
          continue;
        }

        // pps is useless for extracting video information
        offset += _len;
      }

      meta.avcc = new Uint8Array(dataSize);
      meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);
      _logger2.default.v(this.TAG, 'Parsed AVCDecoderConfigurationRecord');

      if (this._isInitialMetadataDispatched()) {
        // flush parsed frames
        if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {
          this._onDataAvailable(this._audioTrack, this._videoTrack);
        }
      } else {
        this._videoInitialMetadataDispatched = true;
      }
      // notify new metadata
      this._dispatch = false;
      this._onTrackMetadata('video', meta);
    }
  }, {
    key: '_parseAVCVideoData',
    value: function _parseAVCVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {
      var le = this._littleEndian;
      var v = new DataView(arrayBuffer, dataOffset, dataSize);

      var units = [],
          length = 0;

      var offset = 0;
      var lengthSize = this._naluLengthSize;
      var dts = this._timestampBase + tagTimestamp;
      var keyframe = frameType === 1; // from FLV Frame Type constants

      while (offset < dataSize) {
        if (offset + 4 >= dataSize) {
          _logger2.default.w(this.TAG, 'Malformed Nalu near timestamp ' + dts + ', offset = ' + offset + ', dataSize = ' + dataSize);
          break; // data not enough for next Nalu
        }
        // Nalu with length-header (AVC1)
        var naluSize = v.getUint32(offset, !le); // Big-Endian read
        if (lengthSize === 3) {
          naluSize >>>= 8;
        }
        if (naluSize > dataSize - lengthSize) {
          _logger2.default.w(this.TAG, 'Malformed Nalus near timestamp ' + dts + ', NaluSize > DataSize!');
          return;
        }

        var unitType = v.getUint8(offset + lengthSize) & 0x1F;

        if (unitType === 5) {
          // IDR
          keyframe = true;
        }

        var data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);
        var unit = { type: unitType, data: data };
        units.push(unit);
        length += data.byteLength;

        offset += lengthSize + naluSize;
      }

      if (units.length) {
        var track = this._videoTrack;
        var avcSample = {
          units: units,
          length: length,
          isKeyframe: keyframe,
          dts: dts,
          cts: cts,
          pts: dts + cts
        };
        if (keyframe) {
          avcSample.fileposition = tagPosition;
        }
        track.samples.push(avcSample);
        track.length += length;
      }
    }
  }, {
    key: 'onTrackMetadata',
    get: function get() {
      return this._onTrackMetadata;
    },
    set: function set(callback) {
      this._onTrackMetadata = callback;
    }

    // prototype: function(mediaInfo: MediaInfo): void

  }, {
    key: 'onMediaInfo',
    get: function get() {
      return this._onMediaInfo;
    },
    set: function set(callback) {
      this._onMediaInfo = callback;
    }

    // prototype: function(type: number, info: string): void

  }, {
    key: 'onError',
    get: function get() {
      return this._onError;
    },
    set: function set(callback) {
      this._onError = callback;
    }

    // prototype: function(videoTrack: any, audioTrack: any): void

  }, {
    key: 'onDataAvailable',
    get: function get() {
      return this._onDataAvailable;
    },
    set: function set(callback) {
      this._onDataAvailable = callback;
    }

    // timestamp base for output samples, must be in milliseconds

  }, {
    key: 'timestampBase',
    get: function get() {
      return this._timestampBase;
    },
    set: function set(base) {
      this._timestampBase = base;
    }
  }, {
    key: 'overridedDuration',
    get: function get() {
      return this._duration;
    }

    // Force-override media duration. Must be in milliseconds, int32
    ,
    set: function set(duration) {
      this._durationOverrided = true;
      this._duration = duration;
      this._mediaInfo.duration = duration;
    }

    // Force-override audio track present flag, boolean

  }, {
    key: 'overridedHasAudio',
    set: function set(hasAudio) {
      this._hasAudioFlagOverrided = true;
      this._hasAudio = hasAudio;
      this._mediaInfo.hasAudio = hasAudio;
    }

    // Force-override video track present flag, boolean

  }, {
    key: 'overridedHasVideo',
    set: function set(hasVideo) {
      this._hasVideoFlagOverrided = true;
      this._hasVideo = hasVideo;
      this._mediaInfo.hasVideo = hasVideo;
    }
  }], [{
    key: 'probe',
    value: function probe(buffer) {
      var data = new Uint8Array(buffer);
      var mismatch = { match: false };

      if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {
        return mismatch;
      }

      var hasAudio = (data[4] & 4) >>> 2 !== 0;
      var hasVideo = (data[4] & 1) !== 0;

      var offset = ReadBig32(data, 5);

      if (offset < 9) {
        return mismatch;
      }

      return {
        match: true,
        consumed: offset,
        dataOffset: offset,
        hasAudioTrack: hasAudio,
        hasVideoTrack: hasVideo
      };
    }
  }]);

  return FLVDemuxer;
}();

exports.default = FLVDemuxer;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/demux/sps-parser.js":
/*!*************************************!*\
  !*** ./src/flv/demux/sps-parser.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _expGolomb = __webpack_require__(/*! ./exp-golomb.js */ "./src/flv/demux/exp-golomb.js");

var _expGolomb2 = _interopRequireDefault(_expGolomb);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SPSParser = function () {
    function SPSParser() {
        _classCallCheck(this, SPSParser);
    }

    _createClass(SPSParser, null, [{
        key: '_ebsp2rbsp',
        value: function _ebsp2rbsp(uint8array) {
            var src = uint8array;
            var src_length = src.byteLength;
            var dst = new Uint8Array(src_length);
            var dst_idx = 0;

            for (var i = 0; i < src_length; i++) {
                if (i >= 2) {
                    // Unescape: Skip 0x03 after 00 00
                    if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {
                        continue;
                    }
                }
                dst[dst_idx] = src[i];
                dst_idx++;
            }

            return new Uint8Array(dst.buffer, 0, dst_idx);
        }
    }, {
        key: 'parseSPS',
        value: function parseSPS(uint8array) {
            var rbsp = SPSParser._ebsp2rbsp(uint8array);
            var gb = new _expGolomb2.default(rbsp);

            gb.readByte();
            var profile_idc = gb.readByte(); // profile_idc
            gb.readByte(); // constraint_set_flags[5] + reserved_zero[3]
            var level_idc = gb.readByte(); // level_idc
            gb.readUEG(); // seq_parameter_set_id

            var profile_string = SPSParser.getProfileString(profile_idc);
            var level_string = SPSParser.getLevelString(level_idc);
            var chroma_format_idc = 1;
            var chroma_format = 420;
            var chroma_format_table = [0, 420, 422, 444];
            var bit_depth = 8;

            if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 || profile_idc === 244 || profile_idc === 44 || profile_idc === 83 || profile_idc === 86 || profile_idc === 118 || profile_idc === 128 || profile_idc === 138 || profile_idc === 144) {

                chroma_format_idc = gb.readUEG();
                if (chroma_format_idc === 3) {
                    gb.readBits(1); // separate_colour_plane_flag
                }
                if (chroma_format_idc <= 3) {
                    chroma_format = chroma_format_table[chroma_format_idc];
                }

                bit_depth = gb.readUEG() + 8; // bit_depth_luma_minus8
                gb.readUEG(); // bit_depth_chroma_minus8
                gb.readBits(1); // qpprime_y_zero_transform_bypass_flag
                if (gb.readBool()) {
                    // seq_scaling_matrix_present_flag
                    var scaling_list_count = chroma_format_idc !== 3 ? 8 : 12;
                    for (var i = 0; i < scaling_list_count; i++) {
                        if (gb.readBool()) {
                            // seq_scaling_list_present_flag
                            if (i < 6) {
                                SPSParser._skipScalingList(gb, 16);
                            } else {
                                SPSParser._skipScalingList(gb, 64);
                            }
                        }
                    }
                }
            }
            gb.readUEG(); // log2_max_frame_num_minus4
            var pic_order_cnt_type = gb.readUEG();
            if (pic_order_cnt_type === 0) {
                gb.readUEG(); // log2_max_pic_order_cnt_lsb_minus_4
            } else if (pic_order_cnt_type === 1) {
                gb.readBits(1); // delta_pic_order_always_zero_flag
                gb.readSEG(); // offset_for_non_ref_pic
                gb.readSEG(); // offset_for_top_to_bottom_field
                var num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();
                for (var _i = 0; _i < num_ref_frames_in_pic_order_cnt_cycle; _i++) {
                    gb.readSEG(); // offset_for_ref_frame
                }
            }
            var ref_frames = gb.readUEG(); // max_num_ref_frames
            gb.readBits(1); // gaps_in_frame_num_value_allowed_flag

            var pic_width_in_mbs_minus1 = gb.readUEG();
            var pic_height_in_map_units_minus1 = gb.readUEG();

            var frame_mbs_only_flag = gb.readBits(1);
            if (frame_mbs_only_flag === 0) {
                gb.readBits(1); // mb_adaptive_frame_field_flag
            }
            gb.readBits(1); // direct_8x8_inference_flag

            var frame_crop_left_offset = 0;
            var frame_crop_right_offset = 0;
            var frame_crop_top_offset = 0;
            var frame_crop_bottom_offset = 0;

            var frame_cropping_flag = gb.readBool();
            if (frame_cropping_flag) {
                frame_crop_left_offset = gb.readUEG();
                frame_crop_right_offset = gb.readUEG();
                frame_crop_top_offset = gb.readUEG();
                frame_crop_bottom_offset = gb.readUEG();
            }

            var sar_width = 1,
                sar_height = 1;
            var fps = 0,
                fps_fixed = true,
                fps_num = 0,
                fps_den = 0;

            var vui_parameters_present_flag = gb.readBool();
            if (vui_parameters_present_flag) {
                if (gb.readBool()) {
                    // aspect_ratio_info_present_flag
                    var aspect_ratio_idc = gb.readByte();
                    var sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];
                    var sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];

                    if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {
                        sar_width = sar_w_table[aspect_ratio_idc - 1];
                        sar_height = sar_h_table[aspect_ratio_idc - 1];
                    } else if (aspect_ratio_idc === 255) {
                        sar_width = gb.readByte() << 8 | gb.readByte();
                        sar_height = gb.readByte() << 8 | gb.readByte();
                    }
                }

                if (gb.readBool()) {
                    // overscan_info_present_flag
                    gb.readBool(); // overscan_appropriate_flag
                }
                if (gb.readBool()) {
                    // video_signal_type_present_flag
                    gb.readBits(4); // video_format & video_full_range_flag
                    if (gb.readBool()) {
                        // colour_description_present_flag
                        gb.readBits(24); // colour_primaries & transfer_characteristics & matrix_coefficients
                    }
                }
                if (gb.readBool()) {
                    // chroma_loc_info_present_flag
                    gb.readUEG(); // chroma_sample_loc_type_top_field
                    gb.readUEG(); // chroma_sample_loc_type_bottom_field
                }
                if (gb.readBool()) {
                    // timing_info_present_flag
                    var num_units_in_tick = gb.readBits(32);
                    var time_scale = gb.readBits(32);
                    fps_fixed = gb.readBool(); // fixed_frame_rate_flag

                    fps_num = time_scale;
                    fps_den = num_units_in_tick * 2;
                    fps = fps_num / fps_den;
                }
            }

            var sarScale = 1;
            if (sar_width !== 1 || sar_height !== 1) {
                sarScale = sar_width / sar_height;
            }

            var crop_unit_x = 0,
                crop_unit_y = 0;
            if (chroma_format_idc === 0) {
                crop_unit_x = 1;
                crop_unit_y = 2 - frame_mbs_only_flag;
            } else {
                var sub_wc = chroma_format_idc === 3 ? 1 : 2;
                var sub_hc = chroma_format_idc === 1 ? 2 : 1;
                crop_unit_x = sub_wc;
                crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);
            }

            var codec_width = (pic_width_in_mbs_minus1 + 1) * 16;
            var codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);

            codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;
            codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;

            var present_width = Math.ceil(codec_width * sarScale);

            gb.destroy();
            gb = null;

            return {
                profile_string: profile_string, // baseline, high, high10, ...
                level_string: level_string, // 3, 3.1, 4, 4.1, 5, 5.1, ...
                bit_depth: bit_depth, // 8bit, 10bit, ...
                ref_frames: ref_frames,
                chroma_format: chroma_format, // 4:2:0, 4:2:2, ...
                chroma_format_string: SPSParser.getChromaFormatString(chroma_format),

                frame_rate: {
                    fixed: fps_fixed,
                    fps: fps,
                    fps_den: fps_den,
                    fps_num: fps_num
                },

                par_ratio: {
                    width: sar_width,
                    height: sar_height
                },

                codec_size: {
                    width: codec_width,
                    height: codec_height
                },

                present_size: {
                    width: present_width,
                    height: codec_height
                }
            };
        }
    }, {
        key: '_skipScalingList',
        value: function _skipScalingList(gb, count) {
            var last_scale = 8,
                next_scale = 8;
            var delta_scale = 0;
            for (var i = 0; i < count; i++) {
                if (next_scale !== 0) {
                    delta_scale = gb.readSEG();
                    next_scale = (last_scale + delta_scale + 256) % 256;
                }
                last_scale = next_scale === 0 ? last_scale : next_scale;
            }
        }
    }, {
        key: 'getProfileString',
        value: function getProfileString(profile_idc) {
            switch (profile_idc) {
                case 66:
                    return 'Baseline';
                case 77:
                    return 'Main';
                case 88:
                    return 'Extended';
                case 100:
                    return 'High';
                case 110:
                    return 'High10';
                case 122:
                    return 'High422';
                case 244:
                    return 'High444';
                default:
                    return 'Unknown';
            }
        }
    }, {
        key: 'getLevelString',
        value: function getLevelString(level_idc) {
            return (level_idc / 10).toFixed(1);
        }
    }, {
        key: 'getChromaFormatString',
        value: function getChromaFormatString(chroma) {
            switch (chroma) {
                case 420:
                    return '4:2:0';
                case 422:
                    return '4:2:2';
                case 444:
                    return '4:4:4';
                default:
                    return 'Unknown';
            }
        }
    }]);

    return SPSParser;
}();

exports.default = SPSParser;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/flv.js":
/*!************************!*\
  !*** ./src/flv/flv.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /*
                                                                                                                                                                                                                                                                               * Copyright (C) 2016 Bilibili. All Rights Reserved.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * @author zheng qian <xqq@xqq.im>
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               *     http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                               * limitations under the License.
                                                                                                                                                                                                                                                                               */

var _polyfill = __webpack_require__(/*! ./utils/polyfill.js */ "./src/flv/utils/polyfill.js");

var _polyfill2 = _interopRequireDefault(_polyfill);

var _features = __webpack_require__(/*! ./core/features.js */ "./src/flv/core/features.js");

var _features2 = _interopRequireDefault(_features);

var _flvPlayer = __webpack_require__(/*! ./player/flv-player.js */ "./src/flv/player/flv-player.js");

var _flvPlayer2 = _interopRequireDefault(_flvPlayer);

var _nativePlayer = __webpack_require__(/*! ./player/native-player.js */ "./src/flv/player/native-player.js");

var _nativePlayer2 = _interopRequireDefault(_nativePlayer);

var _playerEvents = __webpack_require__(/*! ./player/player-events.js */ "./src/flv/player/player-events.js");

var _playerEvents2 = _interopRequireDefault(_playerEvents);

var _playerErrors = __webpack_require__(/*! ./player/player-errors.js */ "./src/flv/player/player-errors.js");

var _loggingControl = __webpack_require__(/*! ./utils/logging-control.js */ "./src/flv/utils/logging-control.js");

var _loggingControl2 = _interopRequireDefault(_loggingControl);

var _exception = __webpack_require__(/*! ./utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// here are all the interfaces

// install polyfills
_polyfill2.default.install();

// factory method
function createPlayer(mediaDataSource, optionalConfig) {
    var mds = mediaDataSource;
    if (mds == null || (typeof mds === 'undefined' ? 'undefined' : _typeof(mds)) !== 'object') {
        throw new _exception.InvalidArgumentException('MediaDataSource must be an javascript object!');
    }

    if (!mds.hasOwnProperty('type')) {
        throw new _exception.InvalidArgumentException('MediaDataSource must has type field to indicate video file type!');
    }

    switch (mds.type) {
        case 'flv':
            return new _flvPlayer2.default(mds, optionalConfig);
        default:
            return new _nativePlayer2.default(mds, optionalConfig);
    }
}

// feature detection
function isSupported() {
    return _features2.default.supportMSEH264Playback();
}

function getFeatureList() {
    return _features2.default.getFeatureList();
}

// interfaces
var flvjs = {};

flvjs.createPlayer = createPlayer;
flvjs.isSupported = isSupported;
flvjs.getFeatureList = getFeatureList;

flvjs.Events = _playerEvents2.default;
flvjs.ErrorTypes = _playerErrors.ErrorTypes;
flvjs.ErrorDetails = _playerErrors.ErrorDetails;

flvjs.FlvPlayer = _flvPlayer2.default;
flvjs.NativePlayer = _nativePlayer2.default;
flvjs.LoggingControl = _loggingControl2.default;

Object.defineProperty(flvjs, 'version', {
    enumerable: true,
    get: function get() {
        // replaced by browserify-versionify transform
        return '__VERSION__';
    }
});

exports.default = flvjs;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/io/fetch-stream-loader.js":
/*!*******************************************!*\
  !*** ./src/flv/io/fetch-stream-loader.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _browser = __webpack_require__(/*! ../utils/browser.js */ "./src/flv/utils/browser.js");

var _browser2 = _interopRequireDefault(_browser);

var _loader = __webpack_require__(/*! ./loader.js */ "./src/flv/io/loader.js");

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/* fetch + stream IO loader. Currently working on chrome 43+.
 * fetch provides a better alternative http API to XMLHttpRequest
 *
 * fetch spec   https://fetch.spec.whatwg.org/
 * stream spec  https://streams.spec.whatwg.org/
 */
var FetchStreamLoader = function (_BaseLoader) {
    _inherits(FetchStreamLoader, _BaseLoader);

    _createClass(FetchStreamLoader, null, [{
        key: 'isSupported',
        value: function isSupported() {
            try {
                // fetch + stream is broken on Microsoft Edge. Disable before build 15048.
                // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8196907/
                // Fixed in Jan 10, 2017. Build 15048+ removed from blacklist.
                var isWorkWellEdge = _browser2.default.msedge && _browser2.default.version.minor >= 15048;
                var browserNotBlacklisted = _browser2.default.msedge ? isWorkWellEdge : true;
                return self.fetch && self.ReadableStream && browserNotBlacklisted;
            } catch (e) {
                return false;
            }
        }
    }]);

    function FetchStreamLoader(seekHandler, config) {
        _classCallCheck(this, FetchStreamLoader);

        var _this = _possibleConstructorReturn(this, (FetchStreamLoader.__proto__ || Object.getPrototypeOf(FetchStreamLoader)).call(this, 'fetch-stream-loader'));

        _this.TAG = 'FetchStreamLoader';

        _this._seekHandler = seekHandler;
        _this._config = config;
        _this._needStash = true;

        _this._requestAbort = false;
        _this._contentLength = null;
        _this._receivedLength = 0;
        return _this;
    }

    _createClass(FetchStreamLoader, [{
        key: 'destroy',
        value: function destroy() {
            if (this.isWorking()) {
                this.abort();
            }
            _get(FetchStreamLoader.prototype.__proto__ || Object.getPrototypeOf(FetchStreamLoader.prototype), 'destroy', this).call(this);
        }
    }, {
        key: 'open',
        value: function open(dataSource, range) {
            var _this2 = this;

            this._dataSource = dataSource;
            this._range = range;

            var sourceURL = dataSource.url;
            if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {
                sourceURL = dataSource.redirectedURL;
            }

            var seekConfig = this._seekHandler.getConfig(sourceURL, range);

            var headers = new self.Headers();

            if (_typeof(seekConfig.headers) === 'object') {
                var configHeaders = seekConfig.headers;
                for (var key in configHeaders) {
                    if (configHeaders.hasOwnProperty(key)) {
                        headers.append(key, configHeaders[key]);
                    }
                }
            }

            var params = {
                method: 'GET',
                headers: headers,
                mode: 'cors',
                cache: 'default',
                // The default policy of Fetch API in the whatwg standard
                // Safari incorrectly indicates 'no-referrer' as default policy, fuck it
                referrerPolicy: 'no-referrer-when-downgrade'
            };

            // cors is enabled by default
            if (dataSource.cors === false) {
                // no-cors means 'disregard cors policy', which can only be used in ServiceWorker
                params.mode = 'same-origin';
            }

            // withCredentials is disabled by default
            if (dataSource.withCredentials) {
                params.credentials = 'include';
            }

            // referrerPolicy from config
            if (dataSource.referrerPolicy) {
                params.referrerPolicy = dataSource.referrerPolicy;
            }

            this._status = _loader.LoaderStatus.kConnecting;
            self.fetch(seekConfig.url, params).then(function (res) {
                if (_this2._requestAbort) {
                    _this2._requestAbort = false;
                    _this2._status = _loader.LoaderStatus.kIdle;
                    return;
                }
                if (res.ok && res.status >= 200 && res.status <= 299) {
                    if (res.url !== seekConfig.url) {
                        if (_this2._onURLRedirect) {
                            var redirectedURL = _this2._seekHandler.removeURLParameters(res.url);
                            _this2._onURLRedirect(redirectedURL);
                        }
                    }

                    var lengthHeader = res.headers.get('Content-Length');
                    if (lengthHeader != null) {
                        _this2._contentLength = parseInt(lengthHeader);
                        if (_this2._contentLength !== 0) {
                            if (_this2._onContentLengthKnown) {
                                _this2._onContentLengthKnown(_this2._contentLength);
                            }
                        }
                    }

                    return _this2._pump.call(_this2, res.body.getReader());
                } else {
                    _this2._status = _loader.LoaderStatus.kError;
                    if (_this2._onError) {
                        _this2._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: res.status, msg: res.statusText });
                    } else {
                        throw new _exception.RuntimeException('FetchStreamLoader: Http code invalid, ' + res.status + ' ' + res.statusText);
                    }
                }
            }).catch(function (e) {
                _this2._status = _loader.LoaderStatus.kError;
                if (_this2._onError) {
                    _this2._onError(_loader.LoaderErrors.EXCEPTION, { code: -1, msg: e.message });
                } else {
                    throw e;
                }
            });
        }
    }, {
        key: 'abort',
        value: function abort() {
            this._requestAbort = true;
        }
    }, {
        key: '_pump',
        value: function _pump(reader) {
            var _this3 = this;

            // ReadableStreamReader
            return reader.read().then(function (result) {
                if (result.done) {
                    _this3._status = _loader.LoaderStatus.kComplete;
                    if (_this3._onComplete) {
                        _this3._onComplete(_this3._range.from, _this3._range.from + _this3._receivedLength - 1);
                    }
                } else {
                    if (_this3._requestAbort === true) {
                        _this3._requestAbort = false;
                        _this3._status = _loader.LoaderStatus.kComplete;
                        return reader.cancel();
                    }

                    _this3._status = _loader.LoaderStatus.kBuffering;

                    var chunk = result.value.buffer;
                    var byteStart = _this3._range.from + _this3._receivedLength;
                    _this3._receivedLength += chunk.byteLength;

                    if (_this3._onDataArrival) {
                        _this3._onDataArrival(chunk, byteStart, _this3._receivedLength);
                    }

                    _this3._pump(reader);
                }
            }).catch(function (e) {
                if (e.code === 11 && _browser2.default.msedge) {
                    // InvalidStateError on Microsoft Edge
                    // Workaround: Edge may throw InvalidStateError after ReadableStreamReader.cancel() call
                    // Ignore the unknown exception.
                    // Related issue: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11265202/
                    return;
                }

                _this3._status = _loader.LoaderStatus.kError;
                var type = 0;
                var info = null;

                if ((e.code === 19 || e.message === 'network error') && ( // NETWORK_ERR
                _this3._contentLength === null || _this3._contentLength !== null && _this3._receivedLength < _this3._contentLength)) {
                    type = _loader.LoaderErrors.EARLY_EOF;
                    info = { code: e.code, msg: 'Fetch stream meet Early-EOF' };
                } else {
                    type = _loader.LoaderErrors.EXCEPTION;
                    info = { code: e.code, msg: e.message };
                }

                if (_this3._onError) {
                    _this3._onError(type, info);
                } else {
                    throw new _exception.RuntimeException(info.msg);
                }
            });
        }
    }]);

    return FetchStreamLoader;
}(_loader.BaseLoader);

exports.default = FetchStreamLoader;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/io/io-controller.js":
/*!*************************************!*\
  !*** ./src/flv/io/io-controller.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _speedSampler = __webpack_require__(/*! ./speed-sampler.js */ "./src/flv/io/speed-sampler.js");

var _speedSampler2 = _interopRequireDefault(_speedSampler);

var _loader = __webpack_require__(/*! ./loader.js */ "./src/flv/io/loader.js");

var _fetchStreamLoader = __webpack_require__(/*! ./fetch-stream-loader.js */ "./src/flv/io/fetch-stream-loader.js");

var _fetchStreamLoader2 = _interopRequireDefault(_fetchStreamLoader);

var _xhrMozChunkedLoader = __webpack_require__(/*! ./xhr-moz-chunked-loader.js */ "./src/flv/io/xhr-moz-chunked-loader.js");

var _xhrMozChunkedLoader2 = _interopRequireDefault(_xhrMozChunkedLoader);

var _xhrMsstreamLoader = __webpack_require__(/*! ./xhr-msstream-loader.js */ "./src/flv/io/xhr-msstream-loader.js");

var _xhrMsstreamLoader2 = _interopRequireDefault(_xhrMsstreamLoader);

var _xhrRangeLoader = __webpack_require__(/*! ./xhr-range-loader.js */ "./src/flv/io/xhr-range-loader.js");

var _xhrRangeLoader2 = _interopRequireDefault(_xhrRangeLoader);

var _websocketLoader = __webpack_require__(/*! ./websocket-loader.js */ "./src/flv/io/websocket-loader.js");

var _websocketLoader2 = _interopRequireDefault(_websocketLoader);

var _rangeSeekHandler = __webpack_require__(/*! ./range-seek-handler.js */ "./src/flv/io/range-seek-handler.js");

var _rangeSeekHandler2 = _interopRequireDefault(_rangeSeekHandler);

var _paramSeekHandler = __webpack_require__(/*! ./param-seek-handler.js */ "./src/flv/io/param-seek-handler.js");

var _paramSeekHandler2 = _interopRequireDefault(_paramSeekHandler);

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * DataSource: {
 *     url: string,
 *     filesize: number,
 *     cors: boolean,
 *     withCredentials: boolean
 * }
 * 
 */

// Manage IO Loaders
var IOController = function () {
    function IOController(dataSource, config, extraData) {
        _classCallCheck(this, IOController);

        this.TAG = 'IOController';

        this._config = config;
        this._extraData = extraData;

        this._stashInitialSize = 1024 * 384; // default initial size: 384KB
        if (config.stashInitialSize != undefined && config.stashInitialSize > 0) {
            // apply from config
            this._stashInitialSize = config.stashInitialSize;
        }

        this._stashUsed = 0;
        this._stashSize = this._stashInitialSize;
        this._bufferSize = 1024 * 1024 * 3; // initial size: 3MB
        this._stashBuffer = new ArrayBuffer(this._bufferSize);
        this._stashByteStart = 0;
        this._enableStash = true;
        if (config.enableStashBuffer === false) {
            this._enableStash = false;
        }

        this._loader = null;
        this._loaderClass = null;
        this._seekHandler = null;

        this._dataSource = dataSource;
        this._isWebSocketURL = /wss?:\/\/(.+?)/.test(dataSource.url);
        this._refTotalLength = dataSource.filesize ? dataSource.filesize : null;
        this._totalLength = this._refTotalLength;
        this._fullRequestFlag = false;
        this._currentRange = null;
        this._redirectedURL = null;

        this._speedNormalized = 0;
        this._speedSampler = new _speedSampler2.default();
        this._speedNormalizeList = [64, 128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096];

        this._isEarlyEofReconnecting = false;

        this._paused = false;
        this._resumeFrom = 0;

        this._onDataArrival = null;
        this._onSeeked = null;
        this._onError = null;
        this._onComplete = null;
        this._onRedirect = null;
        this._onRecoveredEarlyEof = null;

        this._selectSeekHandler();
        this._selectLoader();
        this._createLoader();
    }

    _createClass(IOController, [{
        key: 'destroy',
        value: function destroy() {
            if (this._loader.isWorking()) {
                this._loader.abort();
            }
            this._loader.destroy();
            this._loader = null;
            this._loaderClass = null;
            this._dataSource = null;
            this._stashBuffer = null;
            this._stashUsed = this._stashSize = this._bufferSize = this._stashByteStart = 0;
            this._currentRange = null;
            this._speedSampler = null;

            this._isEarlyEofReconnecting = false;

            this._onDataArrival = null;
            this._onSeeked = null;
            this._onError = null;
            this._onComplete = null;
            this._onRedirect = null;
            this._onRecoveredEarlyEof = null;

            this._extraData = null;
        }
    }, {
        key: 'isWorking',
        value: function isWorking() {
            return this._loader && this._loader.isWorking() && !this._paused;
        }
    }, {
        key: 'isPaused',
        value: function isPaused() {
            return this._paused;
        }
    }, {
        key: '_selectSeekHandler',
        value: function _selectSeekHandler() {
            var config = this._config;

            if (config.seekType === 'range') {
                this._seekHandler = new _rangeSeekHandler2.default(this._config.rangeLoadZeroStart);
            } else if (config.seekType === 'param') {
                var paramStart = config.seekParamStart || 'bstart';
                var paramEnd = config.seekParamEnd || 'bend';

                this._seekHandler = new _paramSeekHandler2.default(paramStart, paramEnd);
            } else if (config.seekType === 'custom') {
                if (typeof config.customSeekHandler !== 'function') {
                    throw new _exception.InvalidArgumentException('Custom seekType specified in config but invalid customSeekHandler!');
                }
                this._seekHandler = new config.customSeekHandler();
            } else {
                throw new _exception.InvalidArgumentException('Invalid seekType in config: ' + config.seekType);
            }
        }
    }, {
        key: '_selectLoader',
        value: function _selectLoader() {
            if (this._isWebSocketURL) {
                this._loaderClass = _websocketLoader2.default;
            } else if (_fetchStreamLoader2.default.isSupported()) {
                this._loaderClass = _fetchStreamLoader2.default;
            } else if (_xhrMozChunkedLoader2.default.isSupported()) {
                this._loaderClass = _xhrMozChunkedLoader2.default;
            } else if (_xhrRangeLoader2.default.isSupported()) {
                this._loaderClass = _xhrRangeLoader2.default;
            } else {
                throw new _exception.RuntimeException('Your browser doesn\'t support xhr with arraybuffer responseType!');
            }
        }
    }, {
        key: '_createLoader',
        value: function _createLoader() {
            this._loader = new this._loaderClass(this._seekHandler, this._config);
            if (this._loader.needStashBuffer === false) {
                this._enableStash = false;
            }
            this._loader.onContentLengthKnown = this._onContentLengthKnown.bind(this);
            this._loader.onURLRedirect = this._onURLRedirect.bind(this);
            this._loader.onDataArrival = this._onLoaderChunkArrival.bind(this);
            this._loader.onComplete = this._onLoaderComplete.bind(this);
            this._loader.onError = this._onLoaderError.bind(this);
        }
    }, {
        key: 'open',
        value: function open(optionalFrom) {
            this._currentRange = { from: 0, to: -1 };
            if (optionalFrom) {
                this._currentRange.from = optionalFrom;
            }

            this._speedSampler.reset();
            if (!optionalFrom) {
                this._fullRequestFlag = true;
            }

            this._loader.open(this._dataSource, Object.assign({}, this._currentRange));
        }
    }, {
        key: 'abort',
        value: function abort() {
            this._loader.abort();

            if (this._paused) {
                this._paused = false;
                this._resumeFrom = 0;
            }
        }
    }, {
        key: 'pause',
        value: function pause() {
            if (this.isWorking()) {
                this._loader.abort();

                if (this._stashUsed !== 0) {
                    this._resumeFrom = this._stashByteStart;
                    this._currentRange.to = this._stashByteStart - 1;
                } else {
                    this._resumeFrom = this._currentRange.to + 1;
                }
                this._stashUsed = 0;
                this._stashByteStart = 0;
                this._paused = true;
            }
        }
    }, {
        key: 'resume',
        value: function resume() {
            if (this._paused) {
                this._paused = false;
                var bytes = this._resumeFrom;
                this._resumeFrom = 0;
                this._internalSeek(bytes, true);
            }
        }
    }, {
        key: 'seek',
        value: function seek(bytes) {
            this._paused = false;
            this._stashUsed = 0;
            this._stashByteStart = 0;
            this._internalSeek(bytes, true);
        }

        /**
         * When seeking request is from media seeking, unconsumed stash data should be dropped
         * However, stash data shouldn't be dropped if seeking requested from http reconnection
         *
         * @dropUnconsumed: Ignore and discard all unconsumed data in stash buffer
         */

    }, {
        key: '_internalSeek',
        value: function _internalSeek(bytes, dropUnconsumed) {
            if (this._loader.isWorking()) {
                this._loader.abort();
            }

            // dispatch & flush stash buffer before seek
            this._flushStashBuffer(dropUnconsumed);

            this._loader.destroy();
            this._loader = null;

            var requestRange = { from: bytes, to: -1 };
            this._currentRange = { from: requestRange.from, to: -1 };

            this._speedSampler.reset();
            this._stashSize = this._stashInitialSize;
            this._createLoader();
            this._loader.open(this._dataSource, requestRange);

            if (this._onSeeked) {
                this._onSeeked();
            }
        }
    }, {
        key: 'updateUrl',
        value: function updateUrl(url) {
            if (!url || typeof url !== 'string' || url.length === 0) {
                throw new _exception.InvalidArgumentException('Url must be a non-empty string!');
            }

            this._dataSource.url = url;

            // TODO: replace with new url
        }
    }, {
        key: '_expandBuffer',
        value: function _expandBuffer(expectedBytes) {
            var bufferNewSize = this._stashSize;
            while (bufferNewSize + 1024 * 1024 * 1 < expectedBytes) {
                bufferNewSize *= 2;
            }

            bufferNewSize += 1024 * 1024 * 1; // bufferSize = stashSize + 1MB
            if (bufferNewSize === this._bufferSize) {
                return;
            }

            var newBuffer = new ArrayBuffer(bufferNewSize);

            if (this._stashUsed > 0) {
                // copy existing data into new buffer
                var stashOldArray = new Uint8Array(this._stashBuffer, 0, this._stashUsed);
                var stashNewArray = new Uint8Array(newBuffer, 0, bufferNewSize);
                stashNewArray.set(stashOldArray, 0);
            }

            this._stashBuffer = newBuffer;
            this._bufferSize = bufferNewSize;
        }
    }, {
        key: '_normalizeSpeed',
        value: function _normalizeSpeed(input) {
            var list = this._speedNormalizeList;
            var last = list.length - 1;
            var mid = 0;
            var lbound = 0;
            var ubound = last;

            if (input < list[0]) {
                return list[0];
            }

            // binary search
            while (lbound <= ubound) {
                mid = lbound + Math.floor((ubound - lbound) / 2);
                if (mid === last || input >= list[mid] && input < list[mid + 1]) {
                    return list[mid];
                } else if (list[mid] < input) {
                    lbound = mid + 1;
                } else {
                    ubound = mid - 1;
                }
            }
        }
    }, {
        key: '_adjustStashSize',
        value: function _adjustStashSize(normalized) {
            var stashSizeKB = 0;

            if (this._config.isLive) {
                // live stream: always use single normalized speed for size of stashSizeKB
                stashSizeKB = normalized;
            } else {
                if (normalized < 512) {
                    stashSizeKB = normalized;
                } else if (normalized >= 512 && normalized <= 1024) {
                    stashSizeKB = Math.floor(normalized * 1.5);
                } else {
                    stashSizeKB = normalized * 2;
                }
            }

            if (stashSizeKB > 8192) {
                stashSizeKB = 8192;
            }

            var bufferSize = stashSizeKB * 1024 + 1024 * 1024 * 1; // stashSize + 1MB
            if (this._bufferSize < bufferSize) {
                this._expandBuffer(bufferSize);
            }
            this._stashSize = stashSizeKB * 1024;
        }
    }, {
        key: '_dispatchChunks',
        value: function _dispatchChunks(chunks, byteStart) {
            this._currentRange.to = byteStart + chunks.byteLength - 1;
            return this._onDataArrival(chunks, byteStart);
        }
    }, {
        key: '_onURLRedirect',
        value: function _onURLRedirect(redirectedURL) {
            this._redirectedURL = redirectedURL;
            if (this._onRedirect) {
                this._onRedirect(redirectedURL);
            }
        }
    }, {
        key: '_onContentLengthKnown',
        value: function _onContentLengthKnown(contentLength) {
            if (contentLength && this._fullRequestFlag) {
                this._totalLength = contentLength;
                this._fullRequestFlag = false;
            }
        }
    }, {
        key: '_onLoaderChunkArrival',
        value: function _onLoaderChunkArrival(chunk, byteStart, receivedLength) {
            if (!this._onDataArrival) {
                throw new _exception.IllegalStateException('IOController: No existing consumer (onDataArrival) callback!');
            }
            if (this._paused) {
                return;
            }
            if (this._isEarlyEofReconnecting) {
                // Auto-reconnect for EarlyEof succeed, notify to upper-layer by callback
                this._isEarlyEofReconnecting = false;
                if (this._onRecoveredEarlyEof) {
                    this._onRecoveredEarlyEof();
                }
            }

            this._speedSampler.addBytes(chunk.byteLength);

            // adjust stash buffer size according to network speed dynamically
            var KBps = this._speedSampler.lastSecondKBps;
            if (KBps !== 0) {
                var normalized = this._normalizeSpeed(KBps);
                if (this._speedNormalized !== normalized) {
                    this._speedNormalized = normalized;
                    this._adjustStashSize(normalized);
                }
            }

            if (!this._enableStash) {
                // disable stash
                if (this._stashUsed === 0) {
                    // dispatch chunk directly to consumer;
                    // check ret value (consumed bytes) and stash unconsumed to stashBuffer
                    var consumed = this._dispatchChunks(chunk, byteStart);
                    if (consumed < chunk.byteLength) {
                        // unconsumed data remain.
                        var remain = chunk.byteLength - consumed;
                        if (remain > this._bufferSize) {
                            this._expandBuffer(remain);
                        }
                        var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                        stashArray.set(new Uint8Array(chunk, consumed), 0);
                        this._stashUsed += remain;
                        this._stashByteStart = byteStart + consumed;
                    }
                } else {
                    // else: Merge chunk into stashBuffer, and dispatch stashBuffer to consumer.
                    if (this._stashUsed + chunk.byteLength > this._bufferSize) {
                        this._expandBuffer(this._stashUsed + chunk.byteLength);
                    }
                    var _stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                    _stashArray.set(new Uint8Array(chunk), this._stashUsed);
                    this._stashUsed += chunk.byteLength;
                    var _consumed = this._dispatchChunks(this._stashBuffer.slice(0, this._stashUsed), this._stashByteStart);
                    if (_consumed < this._stashUsed && _consumed > 0) {
                        // unconsumed data remain
                        var remainArray = new Uint8Array(this._stashBuffer, _consumed);
                        _stashArray.set(remainArray, 0);
                    }
                    this._stashUsed -= _consumed;
                    this._stashByteStart += _consumed;
                }
            } else {
                // enable stash
                if (this._stashUsed === 0 && this._stashByteStart === 0) {
                    // seeked? or init chunk?
                    // This is the first chunk after seek action
                    this._stashByteStart = byteStart;
                }
                if (this._stashUsed + chunk.byteLength <= this._stashSize) {
                    // just stash
                    var _stashArray2 = new Uint8Array(this._stashBuffer, 0, this._stashSize);
                    _stashArray2.set(new Uint8Array(chunk), this._stashUsed);
                    this._stashUsed += chunk.byteLength;
                } else {
                    // stashUsed + chunkSize > stashSize, size limit exceeded
                    var _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                    if (this._stashUsed > 0) {
                        // There're stash datas in buffer
                        // dispatch the whole stashBuffer, and stash remain data
                        // then append chunk to stashBuffer (stash)
                        var buffer = this._stashBuffer.slice(0, this._stashUsed);
                        var _consumed2 = this._dispatchChunks(buffer, this._stashByteStart);
                        if (_consumed2 < buffer.byteLength) {
                            if (_consumed2 > 0) {
                                var _remainArray = new Uint8Array(buffer, _consumed2);
                                _stashArray3.set(_remainArray, 0);
                                this._stashUsed = _remainArray.byteLength;
                                this._stashByteStart += _consumed2;
                            }
                        } else {
                            this._stashUsed = 0;
                            this._stashByteStart += _consumed2;
                        }
                        if (this._stashUsed + chunk.byteLength > this._bufferSize) {
                            this._expandBuffer(this._stashUsed + chunk.byteLength);
                            _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                        }
                        _stashArray3.set(new Uint8Array(chunk), this._stashUsed);
                        this._stashUsed += chunk.byteLength;
                    } else {
                        // stash buffer empty, but chunkSize > stashSize (oh, holy shit)
                        // dispatch chunk directly and stash remain data
                        var _consumed3 = this._dispatchChunks(chunk, byteStart);
                        if (_consumed3 < chunk.byteLength) {
                            var _remain = chunk.byteLength - _consumed3;
                            if (_remain > this._bufferSize) {
                                this._expandBuffer(_remain);
                                _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                            }
                            _stashArray3.set(new Uint8Array(chunk, _consumed3), 0);
                            this._stashUsed += _remain;
                            this._stashByteStart = byteStart + _consumed3;
                        }
                    }
                }
            }
        }
    }, {
        key: '_flushStashBuffer',
        value: function _flushStashBuffer(dropUnconsumed) {
            if (this._stashUsed > 0) {
                var buffer = this._stashBuffer.slice(0, this._stashUsed);
                var consumed = this._dispatchChunks(buffer, this._stashByteStart);
                var remain = buffer.byteLength - consumed;

                if (consumed < buffer.byteLength) {
                    if (dropUnconsumed) {
                        _logger2.default.w(this.TAG, remain + ' bytes unconsumed data remain when flush buffer, dropped');
                    } else {
                        if (consumed > 0) {
                            var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                            var remainArray = new Uint8Array(buffer, consumed);
                            stashArray.set(remainArray, 0);
                            this._stashUsed = remainArray.byteLength;
                            this._stashByteStart += consumed;
                        }
                        return 0;
                    }
                }
                this._stashUsed = 0;
                this._stashByteStart = 0;
                return remain;
            }
            return 0;
        }
    }, {
        key: '_onLoaderComplete',
        value: function _onLoaderComplete(from, to) {
            // Force-flush stash buffer, and drop unconsumed data
            this._flushStashBuffer(true);

            if (this._onComplete) {
                this._onComplete(this._extraData);
            }
        }
    }, {
        key: '_onLoaderError',
        value: function _onLoaderError(type, data) {
            _logger2.default.e(this.TAG, 'Loader error, code = ' + data.code + ', msg = ' + data.msg);

            this._flushStashBuffer(false);

            if (this._isEarlyEofReconnecting) {
                // Auto-reconnect for EarlyEof failed, throw UnrecoverableEarlyEof error to upper-layer
                this._isEarlyEofReconnecting = false;
                type = _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF;
            }

            switch (type) {
                case _loader.LoaderErrors.EARLY_EOF:
                    {
                        if (!this._config.isLive) {
                            // Do internal http reconnect if not live stream
                            if (this._totalLength) {
                                var nextFrom = this._currentRange.to + 1;
                                if (nextFrom < this._totalLength) {
                                    _logger2.default.w(this.TAG, 'Connection lost, trying reconnect...');
                                    this._isEarlyEofReconnecting = true;
                                    this._internalSeek(nextFrom, false);
                                }
                                return;
                            }
                            // else: We don't know totalLength, throw UnrecoverableEarlyEof
                        }
                        // live stream: throw UnrecoverableEarlyEof error to upper-layer
                        type = _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF;
                        break;
                    }
                case _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF:
                case _loader.LoaderErrors.CONNECTING_TIMEOUT:
                case _loader.LoaderErrors.HTTP_STATUS_CODE_INVALID:
                case _loader.LoaderErrors.EXCEPTION:
                    break;
            }

            if (this._onError) {
                this._onError(type, data);
            } else {
                throw new _exception.RuntimeException('IOException: ' + data.msg);
            }
        }
    }, {
        key: 'status',
        get: function get() {
            return this._loader.status;
        }
    }, {
        key: 'extraData',
        get: function get() {
            return this._extraData;
        },
        set: function set(data) {
            this._extraData = data;
        }

        // prototype: function onDataArrival(chunks: ArrayBuffer, byteStart: number): number

    }, {
        key: 'onDataArrival',
        get: function get() {
            return this._onDataArrival;
        },
        set: function set(callback) {
            this._onDataArrival = callback;
        }
    }, {
        key: 'onSeeked',
        get: function get() {
            return this._onSeeked;
        },
        set: function set(callback) {
            this._onSeeked = callback;
        }

        // prototype: function onError(type: number, info: {code: number, msg: string}): void

    }, {
        key: 'onError',
        get: function get() {
            return this._onError;
        },
        set: function set(callback) {
            this._onError = callback;
        }
    }, {
        key: 'onComplete',
        get: function get() {
            return this._onComplete;
        },
        set: function set(callback) {
            this._onComplete = callback;
        }
    }, {
        key: 'onRedirect',
        get: function get() {
            return this._onRedirect;
        },
        set: function set(callback) {
            this._onRedirect = callback;
        }
    }, {
        key: 'onRecoveredEarlyEof',
        get: function get() {
            return this._onRecoveredEarlyEof;
        },
        set: function set(callback) {
            this._onRecoveredEarlyEof = callback;
        }
    }, {
        key: 'currentURL',
        get: function get() {
            return this._dataSource.url;
        }
    }, {
        key: 'hasRedirect',
        get: function get() {
            return this._redirectedURL != null || this._dataSource.redirectedURL != undefined;
        }
    }, {
        key: 'currentRedirectedURL',
        get: function get() {
            return this._redirectedURL || this._dataSource.redirectedURL;
        }

        // in KB/s

    }, {
        key: 'currentSpeed',
        get: function get() {
            if (this._loaderClass === _xhrRangeLoader2.default) {
                // SpeedSampler is inaccuracy if loader is RangeLoader
                return this._loader.currentSpeed;
            }
            return this._speedSampler.lastSecondKBps;
        }
    }, {
        key: 'loaderType',
        get: function get() {
            return this._loader.type;
        }
    }]);

    return IOController;
}();

exports.default = IOController;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/io/loader.js":
/*!******************************!*\
  !*** ./src/flv/io/loader.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BaseLoader = exports.LoaderErrors = exports.LoaderStatus = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoaderStatus = exports.LoaderStatus = {
    kIdle: 0,
    kConnecting: 1,
    kBuffering: 2,
    kError: 3,
    kComplete: 4
};

var LoaderErrors = exports.LoaderErrors = {
    OK: 'OK',
    EXCEPTION: 'Exception',
    HTTP_STATUS_CODE_INVALID: 'HttpStatusCodeInvalid',
    CONNECTING_TIMEOUT: 'ConnectingTimeout',
    EARLY_EOF: 'EarlyEof',
    UNRECOVERABLE_EARLY_EOF: 'UnrecoverableEarlyEof'
};

/* Loader has callbacks which have following prototypes:
 *     function onContentLengthKnown(contentLength: number): void
 *     function onURLRedirect(url: string): void
 *     function onDataArrival(chunk: ArrayBuffer, byteStart: number, receivedLength: number): void
 *     function onError(errorType: number, errorInfo: {code: number, msg: string}): void
 *     function onComplete(rangeFrom: number, rangeTo: number): void
 */

var BaseLoader = exports.BaseLoader = function () {
    function BaseLoader(typeName) {
        _classCallCheck(this, BaseLoader);

        this._type = typeName || 'undefined';
        this._status = LoaderStatus.kIdle;
        this._needStash = false;
        // callbacks
        this._onContentLengthKnown = null;
        this._onURLRedirect = null;
        this._onDataArrival = null;
        this._onError = null;
        this._onComplete = null;
    }

    _createClass(BaseLoader, [{
        key: 'destroy',
        value: function destroy() {
            this._status = LoaderStatus.kIdle;
            this._onContentLengthKnown = null;
            this._onURLRedirect = null;
            this._onDataArrival = null;
            this._onError = null;
            this._onComplete = null;
        }
    }, {
        key: 'isWorking',
        value: function isWorking() {
            return this._status === LoaderStatus.kConnecting || this._status === LoaderStatus.kBuffering;
        }
    }, {
        key: 'open',


        // pure virtual
        value: function open(dataSource, range) {
            throw new _exception.NotImplementedException('Unimplemented abstract function!');
        }
    }, {
        key: 'abort',
        value: function abort() {
            throw new _exception.NotImplementedException('Unimplemented abstract function!');
        }
    }, {
        key: 'type',
        get: function get() {
            return this._type;
        }
    }, {
        key: 'status',
        get: function get() {
            return this._status;
        }
    }, {
        key: 'needStashBuffer',
        get: function get() {
            return this._needStash;
        }
    }, {
        key: 'onContentLengthKnown',
        get: function get() {
            return this._onContentLengthKnown;
        },
        set: function set(callback) {
            this._onContentLengthKnown = callback;
        }
    }, {
        key: 'onURLRedirect',
        get: function get() {
            return this._onURLRedirect;
        },
        set: function set(callback) {
            this._onURLRedirect = callback;
        }
    }, {
        key: 'onDataArrival',
        get: function get() {
            return this._onDataArrival;
        },
        set: function set(callback) {
            this._onDataArrival = callback;
        }
    }, {
        key: 'onError',
        get: function get() {
            return this._onError;
        },
        set: function set(callback) {
            this._onError = callback;
        }
    }, {
        key: 'onComplete',
        get: function get() {
            return this._onComplete;
        },
        set: function set(callback) {
            this._onComplete = callback;
        }
    }]);

    return BaseLoader;
}();

/***/ }),

/***/ "./src/flv/io/param-seek-handler.js":
/*!******************************************!*\
  !*** ./src/flv/io/param-seek-handler.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ParamSeekHandler = function () {
    function ParamSeekHandler(paramStart, paramEnd) {
        _classCallCheck(this, ParamSeekHandler);

        this._startName = paramStart;
        this._endName = paramEnd;
    }

    _createClass(ParamSeekHandler, [{
        key: 'getConfig',
        value: function getConfig(baseUrl, range) {
            var url = baseUrl;

            if (range.from !== 0 || range.to !== -1) {
                var needAnd = true;
                if (url.indexOf('?') === -1) {
                    url += '?';
                    needAnd = false;
                }

                if (needAnd) {
                    url += '&';
                }

                url += this._startName + '=' + range.from.toString();

                if (range.to !== -1) {
                    url += '&' + this._endName + '=' + range.to.toString();
                }
            }

            return {
                url: url,
                headers: {}
            };
        }
    }, {
        key: 'removeURLParameters',
        value: function removeURLParameters(seekedURL) {
            var baseURL = seekedURL.split('?')[0];
            var params = undefined;

            var queryIndex = seekedURL.indexOf('?');
            if (queryIndex !== -1) {
                params = seekedURL.substring(queryIndex + 1);
            }

            var resultParams = '';

            if (params != undefined && params.length > 0) {
                var pairs = params.split('&');

                for (var i = 0; i < pairs.length; i++) {
                    var pair = pairs[i].split('=');
                    var requireAnd = i > 0;

                    if (pair[0] !== this._startName && pair[0] !== this._endName) {
                        if (requireAnd) {
                            resultParams += '&';
                        }
                        resultParams += pairs[i];
                    }
                }
            }

            return resultParams.length === 0 ? baseURL : baseURL + '?' + resultParams;
        }
    }]);

    return ParamSeekHandler;
}();

exports.default = ParamSeekHandler;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/io/range-seek-handler.js":
/*!******************************************!*\
  !*** ./src/flv/io/range-seek-handler.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var RangeSeekHandler = function () {
    function RangeSeekHandler(zeroStart) {
        _classCallCheck(this, RangeSeekHandler);

        this._zeroStart = zeroStart || false;
    }

    _createClass(RangeSeekHandler, [{
        key: 'getConfig',
        value: function getConfig(url, range) {
            var headers = {};

            if (range.from !== 0 || range.to !== -1) {
                var param = void 0;
                if (range.to !== -1) {
                    param = 'bytes=' + range.from.toString() + '-' + range.to.toString();
                } else {
                    param = 'bytes=' + range.from.toString() + '-';
                }
                headers['Range'] = param;
            } else if (this._zeroStart) {
                headers['Range'] = 'bytes=0-';
            }

            return {
                url: url,
                headers: headers
            };
        }
    }, {
        key: 'removeURLParameters',
        value: function removeURLParameters(seekedURL) {
            return seekedURL;
        }
    }]);

    return RangeSeekHandler;
}();

exports.default = RangeSeekHandler;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/io/speed-sampler.js":
/*!*************************************!*\
  !*** ./src/flv/io/speed-sampler.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Utility class to calculate realtime network I/O speed
var SpeedSampler = function () {
    function SpeedSampler() {
        _classCallCheck(this, SpeedSampler);

        // milliseconds
        this._firstCheckpoint = 0;
        this._lastCheckpoint = 0;
        this._intervalBytes = 0;
        this._totalBytes = 0;
        this._lastSecondBytes = 0;

        // compatibility detection
        if (self.performance && self.performance.now) {
            this._now = self.performance.now.bind(self.performance);
        } else {
            this._now = Date.now;
        }
    }

    _createClass(SpeedSampler, [{
        key: "reset",
        value: function reset() {
            this._firstCheckpoint = this._lastCheckpoint = 0;
            this._totalBytes = this._intervalBytes = 0;
            this._lastSecondBytes = 0;
        }
    }, {
        key: "addBytes",
        value: function addBytes(bytes) {
            if (this._firstCheckpoint === 0) {
                this._firstCheckpoint = this._now();
                this._lastCheckpoint = this._firstCheckpoint;
                this._intervalBytes += bytes;
                this._totalBytes += bytes;
            } else if (this._now() - this._lastCheckpoint < 1000) {
                this._intervalBytes += bytes;
                this._totalBytes += bytes;
            } else {
                // duration >= 1000
                this._lastSecondBytes = this._intervalBytes;
                this._intervalBytes = bytes;
                this._totalBytes += bytes;
                this._lastCheckpoint = this._now();
            }
        }
    }, {
        key: "currentKBps",
        get: function get() {
            this.addBytes(0);

            var durationSeconds = (this._now() - this._lastCheckpoint) / 1000;
            if (durationSeconds == 0) durationSeconds = 1;
            return this._intervalBytes / durationSeconds / 1024;
        }
    }, {
        key: "lastSecondKBps",
        get: function get() {
            this.addBytes(0);

            if (this._lastSecondBytes !== 0) {
                return this._lastSecondBytes / 1024;
            } else {
                // lastSecondBytes === 0
                if (this._now() - this._lastCheckpoint >= 500) {
                    // if time interval since last checkpoint has exceeded 500ms
                    // the speed is nearly accurate
                    return this.currentKBps;
                } else {
                    // We don't know
                    return 0;
                }
            }
        }
    }, {
        key: "averageKBps",
        get: function get() {
            var durationSeconds = (this._now() - this._firstCheckpoint) / 1000;
            return this._totalBytes / durationSeconds / 1024;
        }
    }]);

    return SpeedSampler;
}();

exports.default = SpeedSampler;
module.exports = exports["default"];

/***/ }),

/***/ "./src/flv/io/websocket-loader.js":
/*!****************************************!*\
  !*** ./src/flv/io/websocket-loader.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _loader = __webpack_require__(/*! ./loader.js */ "./src/flv/io/loader.js");

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

// For FLV over WebSocket live stream
var WebSocketLoader = function (_BaseLoader) {
    _inherits(WebSocketLoader, _BaseLoader);

    _createClass(WebSocketLoader, null, [{
        key: 'isSupported',
        value: function isSupported() {
            try {
                return typeof self.WebSocket !== 'undefined';
            } catch (e) {
                return false;
            }
        }
    }]);

    function WebSocketLoader() {
        _classCallCheck(this, WebSocketLoader);

        var _this = _possibleConstructorReturn(this, (WebSocketLoader.__proto__ || Object.getPrototypeOf(WebSocketLoader)).call(this, 'websocket-loader'));

        _this.TAG = 'WebSocketLoader';

        _this._needStash = true;

        _this._ws = null;
        _this._requestAbort = false;
        _this._receivedLength = 0;
        return _this;
    }

    _createClass(WebSocketLoader, [{
        key: 'destroy',
        value: function destroy() {
            if (this._ws) {
                this.abort();
            }
            _get(WebSocketLoader.prototype.__proto__ || Object.getPrototypeOf(WebSocketLoader.prototype), 'destroy', this).call(this);
        }
    }, {
        key: 'open',
        value: function open(dataSource) {
            try {
                var ws = this._ws = new self.WebSocket(dataSource.url);
                ws.binaryType = 'arraybuffer';
                ws.onopen = this._onWebSocketOpen.bind(this);
                ws.onclose = this._onWebSocketClose.bind(this);
                ws.onmessage = this._onWebSocketMessage.bind(this);
                ws.onerror = this._onWebSocketError.bind(this);

                this._status = _loader.LoaderStatus.kConnecting;
            } catch (e) {
                this._status = _loader.LoaderStatus.kError;

                var info = { code: e.code, msg: e.message };

                if (this._onError) {
                    this._onError(_loader.LoaderErrors.EXCEPTION, info);
                } else {
                    throw new _exception.RuntimeException(info.msg);
                }
            }
        }
    }, {
        key: 'abort',
        value: function abort() {
            var ws = this._ws;
            if (ws && (ws.readyState === 0 || ws.readyState === 1)) {
                // CONNECTING || OPEN
                this._requestAbort = true;
                ws.close();
            }

            this._ws = null;
            this._status = _loader.LoaderStatus.kComplete;
        }
    }, {
        key: '_onWebSocketOpen',
        value: function _onWebSocketOpen(e) {
            this._status = _loader.LoaderStatus.kBuffering;
        }
    }, {
        key: '_onWebSocketClose',
        value: function _onWebSocketClose(e) {
            if (this._requestAbort === true) {
                this._requestAbort = false;
                return;
            }

            this._status = _loader.LoaderStatus.kComplete;

            if (this._onComplete) {
                this._onComplete(0, this._receivedLength - 1);
            }
        }
    }, {
        key: '_onWebSocketMessage',
        value: function _onWebSocketMessage(e) {
            var _this2 = this;

            if (e.data instanceof ArrayBuffer) {
                this._dispatchArrayBuffer(e.data);
            } else if (e.data instanceof Blob) {
                var reader = new FileReader();
                reader.onload = function () {
                    _this2._dispatchArrayBuffer(reader.result);
                };
                reader.readAsArrayBuffer(e.data);
            } else {
                this._status = _loader.LoaderStatus.kError;
                var info = { code: -1, msg: 'Unsupported WebSocket message type: ' + e.data.constructor.name };

                if (this._onError) {
                    this._onError(_loader.LoaderErrors.EXCEPTION, info);
                } else {
                    throw new _exception.RuntimeException(info.msg);
                }
            }
        }
    }, {
        key: '_dispatchArrayBuffer',
        value: function _dispatchArrayBuffer(arraybuffer) {
            var chunk = arraybuffer;
            var byteStart = this._receivedLength;
            this._receivedLength += chunk.byteLength;

            if (this._onDataArrival) {
                this._onDataArrival(chunk, byteStart, this._receivedLength);
            }
        }
    }, {
        key: '_onWebSocketError',
        value: function _onWebSocketError(e) {
            this._status = _loader.LoaderStatus.kError;

            var info = {
                code: e.code,
                msg: e.message
            };

            if (this._onError) {
                this._onError(_loader.LoaderErrors.EXCEPTION, info);
            } else {
                throw new _exception.RuntimeException(info.msg);
            }
        }
    }]);

    return WebSocketLoader;
}(_loader.BaseLoader);

exports.default = WebSocketLoader;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/io/xhr-moz-chunked-loader.js":
/*!**********************************************!*\
  !*** ./src/flv/io/xhr-moz-chunked-loader.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _loader = __webpack_require__(/*! ./loader.js */ "./src/flv/io/loader.js");

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

// For FireFox browser which supports `xhr.responseType = 'moz-chunked-arraybuffer'`
var MozChunkedLoader = function (_BaseLoader) {
    _inherits(MozChunkedLoader, _BaseLoader);

    _createClass(MozChunkedLoader, null, [{
        key: 'isSupported',
        value: function isSupported() {
            try {
                var xhr = new XMLHttpRequest();
                // Firefox 37- requires .open() to be called before setting responseType
                xhr.open('GET', 'https://example.com', true);
                xhr.responseType = 'moz-chunked-arraybuffer';
                return xhr.responseType === 'moz-chunked-arraybuffer';
            } catch (e) {
                _logger2.default.w('MozChunkedLoader', e.message);
                return false;
            }
        }
    }]);

    function MozChunkedLoader(seekHandler, config) {
        _classCallCheck(this, MozChunkedLoader);

        var _this = _possibleConstructorReturn(this, (MozChunkedLoader.__proto__ || Object.getPrototypeOf(MozChunkedLoader)).call(this, 'xhr-moz-chunked-loader'));

        _this.TAG = 'MozChunkedLoader';

        _this._seekHandler = seekHandler;
        _this._config = config;
        _this._needStash = true;

        _this._xhr = null;
        _this._requestAbort = false;
        _this._contentLength = null;
        _this._receivedLength = 0;
        return _this;
    }

    _createClass(MozChunkedLoader, [{
        key: 'destroy',
        value: function destroy() {
            if (this.isWorking()) {
                this.abort();
            }
            if (this._xhr) {
                this._xhr.onreadystatechange = null;
                this._xhr.onprogress = null;
                this._xhr.onloadend = null;
                this._xhr.onerror = null;
                this._xhr = null;
            }
            _get(MozChunkedLoader.prototype.__proto__ || Object.getPrototypeOf(MozChunkedLoader.prototype), 'destroy', this).call(this);
        }
    }, {
        key: 'open',
        value: function open(dataSource, range) {
            this._dataSource = dataSource;
            this._range = range;

            var sourceURL = dataSource.url;
            if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {
                sourceURL = dataSource.redirectedURL;
            }

            var seekConfig = this._seekHandler.getConfig(sourceURL, range);
            this._requestURL = seekConfig.url;

            var xhr = this._xhr = new XMLHttpRequest();
            xhr.open('GET', seekConfig.url, true);
            xhr.responseType = 'moz-chunked-arraybuffer';
            xhr.onreadystatechange = this._onReadyStateChange.bind(this);
            xhr.onprogress = this._onProgress.bind(this);
            xhr.onloadend = this._onLoadEnd.bind(this);
            xhr.onerror = this._onXhrError.bind(this);

            // cors is auto detected and enabled by xhr

            // withCredentials is disabled by default
            if (dataSource.withCredentials) {
                xhr.withCredentials = true;
            }

            if (_typeof(seekConfig.headers) === 'object') {
                var headers = seekConfig.headers;

                for (var key in headers) {
                    if (headers.hasOwnProperty(key)) {
                        xhr.setRequestHeader(key, headers[key]);
                    }
                }
            }

            this._status = _loader.LoaderStatus.kConnecting;
            xhr.send();
        }
    }, {
        key: 'abort',
        value: function abort() {
            this._requestAbort = true;
            if (this._xhr) {
                this._xhr.abort();
            }
            this._status = _loader.LoaderStatus.kComplete;
        }
    }, {
        key: '_onReadyStateChange',
        value: function _onReadyStateChange(e) {
            var xhr = e.target;

            if (xhr.readyState === 2) {
                // HEADERS_RECEIVED
                if (xhr.responseURL != undefined && xhr.responseURL !== this._requestURL) {
                    if (this._onURLRedirect) {
                        var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);
                        this._onURLRedirect(redirectedURL);
                    }
                }

                if (xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {
                    this._status = _loader.LoaderStatus.kError;
                    if (this._onError) {
                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });
                    } else {
                        throw new _exception.RuntimeException('MozChunkedLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);
                    }
                } else {
                    this._status = _loader.LoaderStatus.kBuffering;
                }
            }
        }
    }, {
        key: '_onProgress',
        value: function _onProgress(e) {
            if (this._status === _loader.LoaderStatus.kError) {
                // Ignore error response
                return;
            }

            if (this._contentLength === null) {
                if (e.total !== null && e.total !== 0) {
                    this._contentLength = e.total;
                    if (this._onContentLengthKnown) {
                        this._onContentLengthKnown(this._contentLength);
                    }
                }
            }

            var chunk = e.target.response;
            var byteStart = this._range.from + this._receivedLength;
            this._receivedLength += chunk.byteLength;

            if (this._onDataArrival) {
                this._onDataArrival(chunk, byteStart, this._receivedLength);
            }
        }
    }, {
        key: '_onLoadEnd',
        value: function _onLoadEnd(e) {
            if (this._requestAbort === true) {
                this._requestAbort = false;
                return;
            } else if (this._status === _loader.LoaderStatus.kError) {
                return;
            }

            this._status = _loader.LoaderStatus.kComplete;
            if (this._onComplete) {
                this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);
            }
        }
    }, {
        key: '_onXhrError',
        value: function _onXhrError(e) {
            this._status = _loader.LoaderStatus.kError;
            var type = 0;
            var info = null;

            if (this._contentLength && e.loaded < this._contentLength) {
                type = _loader.LoaderErrors.EARLY_EOF;
                info = { code: -1, msg: 'Moz-Chunked stream meet Early-Eof' };
            } else {
                type = _loader.LoaderErrors.EXCEPTION;
                info = { code: -1, msg: e.constructor.name + ' ' + e.type };
            }

            if (this._onError) {
                this._onError(type, info);
            } else {
                throw new _exception.RuntimeException(info.msg);
            }
        }
    }]);

    return MozChunkedLoader;
}(_loader.BaseLoader);

exports.default = MozChunkedLoader;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/io/xhr-msstream-loader.js":
/*!*******************************************!*\
  !*** ./src/flv/io/xhr-msstream-loader.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _loader = __webpack_require__(/*! ./loader.js */ "./src/flv/io/loader.js");

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/* Notice: ms-stream may cause IE/Edge browser crash if seek too frequently!!!
 * The browser may crash in wininet.dll. Disable for now.
 *
 * For IE11/Edge browser by microsoft which supports `xhr.responseType = 'ms-stream'`
 * Notice that ms-stream API sucks. The buffer is always expanding along with downloading.
 *
 * We need to abort the xhr if buffer size exceeded limit size (e.g. 16 MiB), then do reconnect.
 * in order to release previous ArrayBuffer to avoid memory leak
 *
 * Otherwise, the ArrayBuffer will increase to a terrible size that equals final file size.
 */
var MSStreamLoader = function (_BaseLoader) {
    _inherits(MSStreamLoader, _BaseLoader);

    _createClass(MSStreamLoader, null, [{
        key: 'isSupported',
        value: function isSupported() {
            try {
                if (typeof self.MSStream === 'undefined' || typeof self.MSStreamReader === 'undefined') {
                    return false;
                }

                var xhr = new XMLHttpRequest();
                xhr.open('GET', 'https://example.com', true);
                xhr.responseType = 'ms-stream';
                return xhr.responseType === 'ms-stream';
            } catch (e) {
                _logger2.default.w('MSStreamLoader', e.message);
                return false;
            }
        }
    }]);

    function MSStreamLoader(seekHandler, config) {
        _classCallCheck(this, MSStreamLoader);

        var _this = _possibleConstructorReturn(this, (MSStreamLoader.__proto__ || Object.getPrototypeOf(MSStreamLoader)).call(this, 'xhr-msstream-loader'));

        _this.TAG = 'MSStreamLoader';

        _this._seekHandler = seekHandler;
        _this._config = config;
        _this._needStash = true;

        _this._xhr = null;
        _this._reader = null; // MSStreamReader

        _this._totalRange = null;
        _this._currentRange = null;

        _this._currentRequestURL = null;
        _this._currentRedirectedURL = null;

        _this._contentLength = null;
        _this._receivedLength = 0;

        _this._bufferLimit = 16 * 1024 * 1024; // 16MB
        _this._lastTimeBufferSize = 0;
        _this._isReconnecting = false;
        return _this;
    }

    _createClass(MSStreamLoader, [{
        key: 'destroy',
        value: function destroy() {
            if (this.isWorking()) {
                this.abort();
            }
            if (this._reader) {
                this._reader.onprogress = null;
                this._reader.onload = null;
                this._reader.onerror = null;
                this._reader = null;
            }
            if (this._xhr) {
                this._xhr.onreadystatechange = null;
                this._xhr = null;
            }
            _get(MSStreamLoader.prototype.__proto__ || Object.getPrototypeOf(MSStreamLoader.prototype), 'destroy', this).call(this);
        }
    }, {
        key: 'open',
        value: function open(dataSource, range) {
            this._internalOpen(dataSource, range, false);
        }
    }, {
        key: '_internalOpen',
        value: function _internalOpen(dataSource, range, isSubrange) {
            this._dataSource = dataSource;

            if (!isSubrange) {
                this._totalRange = range;
            } else {
                this._currentRange = range;
            }

            var sourceURL = dataSource.url;
            if (this._config.reuseRedirectedURL) {
                if (this._currentRedirectedURL != undefined) {
                    sourceURL = this._currentRedirectedURL;
                } else if (dataSource.redirectedURL != undefined) {
                    sourceURL = dataSource.redirectedURL;
                }
            }

            var seekConfig = this._seekHandler.getConfig(sourceURL, range);
            this._currentRequestURL = seekConfig.url;

            var reader = this._reader = new self.MSStreamReader();
            reader.onprogress = this._msrOnProgress.bind(this);
            reader.onload = this._msrOnLoad.bind(this);
            reader.onerror = this._msrOnError.bind(this);

            var xhr = this._xhr = new XMLHttpRequest();
            xhr.open('GET', seekConfig.url, true);
            xhr.responseType = 'ms-stream';
            xhr.onreadystatechange = this._xhrOnReadyStateChange.bind(this);
            xhr.onerror = this._xhrOnError.bind(this);

            if (dataSource.withCredentials) {
                xhr.withCredentials = true;
            }

            if (_typeof(seekConfig.headers) === 'object') {
                var headers = seekConfig.headers;

                for (var key in headers) {
                    if (headers.hasOwnProperty(key)) {
                        xhr.setRequestHeader(key, headers[key]);
                    }
                }
            }

            if (this._isReconnecting) {
                this._isReconnecting = false;
            } else {
                this._status = _loader.LoaderStatus.kConnecting;
            }
            xhr.send();
        }
    }, {
        key: 'abort',
        value: function abort() {
            this._internalAbort();
            this._status = _loader.LoaderStatus.kComplete;
        }
    }, {
        key: '_internalAbort',
        value: function _internalAbort() {
            if (this._reader) {
                if (this._reader.readyState === 1) {
                    // LOADING
                    this._reader.abort();
                }
                this._reader.onprogress = null;
                this._reader.onload = null;
                this._reader.onerror = null;
                this._reader = null;
            }
            if (this._xhr) {
                this._xhr.abort();
                this._xhr.onreadystatechange = null;
                this._xhr = null;
            }
        }
    }, {
        key: '_xhrOnReadyStateChange',
        value: function _xhrOnReadyStateChange(e) {
            var xhr = e.target;

            if (xhr.readyState === 2) {
                // HEADERS_RECEIVED
                if (xhr.status >= 200 && xhr.status <= 299) {
                    this._status = _loader.LoaderStatus.kBuffering;

                    if (xhr.responseURL != undefined) {
                        var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);
                        if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {
                            this._currentRedirectedURL = redirectedURL;
                            if (this._onURLRedirect) {
                                this._onURLRedirect(redirectedURL);
                            }
                        }
                    }

                    var lengthHeader = xhr.getResponseHeader('Content-Length');
                    if (lengthHeader != null && this._contentLength == null) {
                        var length = parseInt(lengthHeader);
                        if (length > 0) {
                            this._contentLength = length;
                            if (this._onContentLengthKnown) {
                                this._onContentLengthKnown(this._contentLength);
                            }
                        }
                    }
                } else {
                    this._status = _loader.LoaderStatus.kError;
                    if (this._onError) {
                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });
                    } else {
                        throw new _exception.RuntimeException('MSStreamLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);
                    }
                }
            } else if (xhr.readyState === 3) {
                // LOADING
                if (xhr.status >= 200 && xhr.status <= 299) {
                    this._status = _loader.LoaderStatus.kBuffering;

                    var msstream = xhr.response;
                    this._reader.readAsArrayBuffer(msstream);
                }
            }
        }
    }, {
        key: '_xhrOnError',
        value: function _xhrOnError(e) {
            this._status = _loader.LoaderStatus.kError;
            var type = _loader.LoaderErrors.EXCEPTION;
            var info = { code: -1, msg: e.constructor.name + ' ' + e.type };

            if (this._onError) {
                this._onError(type, info);
            } else {
                throw new _exception.RuntimeException(info.msg);
            }
        }
    }, {
        key: '_msrOnProgress',
        value: function _msrOnProgress(e) {
            var reader = e.target;
            var bigbuffer = reader.result;
            if (bigbuffer == null) {
                // result may be null, workaround for buggy M$
                this._doReconnectIfNeeded();
                return;
            }

            var slice = bigbuffer.slice(this._lastTimeBufferSize);
            this._lastTimeBufferSize = bigbuffer.byteLength;
            var byteStart = this._totalRange.from + this._receivedLength;
            this._receivedLength += slice.byteLength;

            if (this._onDataArrival) {
                this._onDataArrival(slice, byteStart, this._receivedLength);
            }

            if (bigbuffer.byteLength >= this._bufferLimit) {
                _logger2.default.v(this.TAG, 'MSStream buffer exceeded max size near ' + (byteStart + slice.byteLength) + ', reconnecting...');
                this._doReconnectIfNeeded();
            }
        }
    }, {
        key: '_doReconnectIfNeeded',
        value: function _doReconnectIfNeeded() {
            if (this._contentLength == null || this._receivedLength < this._contentLength) {
                this._isReconnecting = true;
                this._lastTimeBufferSize = 0;
                this._internalAbort();

                var range = {
                    from: this._totalRange.from + this._receivedLength,
                    to: -1
                };
                this._internalOpen(this._dataSource, range, true);
            }
        }
    }, {
        key: '_msrOnLoad',
        value: function _msrOnLoad(e) {
            // actually it is onComplete event
            this._status = _loader.LoaderStatus.kComplete;
            if (this._onComplete) {
                this._onComplete(this._totalRange.from, this._totalRange.from + this._receivedLength - 1);
            }
        }
    }, {
        key: '_msrOnError',
        value: function _msrOnError(e) {
            this._status = _loader.LoaderStatus.kError;
            var type = 0;
            var info = null;

            if (this._contentLength && this._receivedLength < this._contentLength) {
                type = _loader.LoaderErrors.EARLY_EOF;
                info = { code: -1, msg: 'MSStream meet Early-Eof' };
            } else {
                type = _loader.LoaderErrors.EARLY_EOF;
                info = { code: -1, msg: e.constructor.name + ' ' + e.type };
            }

            if (this._onError) {
                this._onError(type, info);
            } else {
                throw new _exception.RuntimeException(info.msg);
            }
        }
    }]);

    return MSStreamLoader;
}(_loader.BaseLoader);

exports.default = MSStreamLoader;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/io/xhr-range-loader.js":
/*!****************************************!*\
  !*** ./src/flv/io/xhr-range-loader.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _speedSampler = __webpack_require__(/*! ./speed-sampler.js */ "./src/flv/io/speed-sampler.js");

var _speedSampler2 = _interopRequireDefault(_speedSampler);

var _loader = __webpack_require__(/*! ./loader.js */ "./src/flv/io/loader.js");

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

// Universal IO Loader, implemented by adding Range header in xhr's request header
var RangeLoader = function (_BaseLoader) {
    _inherits(RangeLoader, _BaseLoader);

    _createClass(RangeLoader, null, [{
        key: 'isSupported',
        value: function isSupported() {
            try {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', 'https://example.com', true);
                xhr.responseType = 'arraybuffer';
                return xhr.responseType === 'arraybuffer';
            } catch (e) {
                _logger2.default.w('RangeLoader', e.message);
                return false;
            }
        }
    }]);

    function RangeLoader(seekHandler, config) {
        _classCallCheck(this, RangeLoader);

        var _this = _possibleConstructorReturn(this, (RangeLoader.__proto__ || Object.getPrototypeOf(RangeLoader)).call(this, 'xhr-range-loader'));

        _this.TAG = 'RangeLoader';

        _this._seekHandler = seekHandler;
        _this._config = config;
        _this._needStash = false;

        _this._chunkSizeKBList = [128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 5120, 6144, 7168, 8192];
        _this._currentChunkSizeKB = 384;
        _this._currentSpeedNormalized = 0;
        _this._zeroSpeedChunkCount = 0;

        _this._xhr = null;
        _this._speedSampler = new _speedSampler2.default();

        _this._requestAbort = false;
        _this._waitForTotalLength = false;
        _this._totalLengthReceived = false;

        _this._currentRequestURL = null;
        _this._currentRedirectedURL = null;
        _this._currentRequestRange = null;
        _this._totalLength = null; // size of the entire file
        _this._contentLength = null; // Content-Length of entire request range
        _this._receivedLength = 0; // total received bytes
        _this._lastTimeLoaded = 0; // received bytes of current request sub-range
        return _this;
    }

    _createClass(RangeLoader, [{
        key: 'destroy',
        value: function destroy() {
            if (this.isWorking()) {
                this.abort();
            }
            if (this._xhr) {
                this._xhr.onreadystatechange = null;
                this._xhr.onprogress = null;
                this._xhr.onload = null;
                this._xhr.onerror = null;
                this._xhr = null;
            }
            _get(RangeLoader.prototype.__proto__ || Object.getPrototypeOf(RangeLoader.prototype), 'destroy', this).call(this);
        }
    }, {
        key: 'open',
        value: function open(dataSource, range) {
            this._dataSource = dataSource;
            this._range = range;
            this._status = _loader.LoaderStatus.kConnecting;

            var useRefTotalLength = false;
            if (this._dataSource.filesize != undefined && this._dataSource.filesize !== 0) {
                useRefTotalLength = true;
                this._totalLength = this._dataSource.filesize;
            }

            if (!this._totalLengthReceived && !useRefTotalLength) {
                // We need total filesize
                this._waitForTotalLength = true;
                this._internalOpen(this._dataSource, { from: 0, to: -1 });
            } else {
                // We have filesize, start loading
                this._openSubRange();
            }
        }
    }, {
        key: '_openSubRange',
        value: function _openSubRange() {
            var chunkSize = this._currentChunkSizeKB * 1024;

            var from = this._range.from + this._receivedLength;
            var to = from + chunkSize;

            if (this._contentLength != null) {
                if (to - this._range.from >= this._contentLength) {
                    to = this._range.from + this._contentLength - 1;
                }
            }

            this._currentRequestRange = { from: from, to: to };
            this._internalOpen(this._dataSource, this._currentRequestRange);
        }
    }, {
        key: '_internalOpen',
        value: function _internalOpen(dataSource, range) {
            this._lastTimeLoaded = 0;

            var sourceURL = dataSource.url;
            if (this._config.reuseRedirectedURL) {
                if (this._currentRedirectedURL != undefined) {
                    sourceURL = this._currentRedirectedURL;
                } else if (dataSource.redirectedURL != undefined) {
                    sourceURL = dataSource.redirectedURL;
                }
            }

            var seekConfig = this._seekHandler.getConfig(sourceURL, range);
            this._currentRequestURL = seekConfig.url;

            var xhr = this._xhr = new XMLHttpRequest();
            xhr.open('GET', seekConfig.url, true);
            xhr.responseType = 'arraybuffer';
            xhr.onreadystatechange = this._onReadyStateChange.bind(this);
            xhr.onprogress = this._onProgress.bind(this);
            xhr.onload = this._onLoad.bind(this);
            xhr.onerror = this._onXhrError.bind(this);

            if (dataSource.withCredentials) {
                xhr.withCredentials = true;
            }

            if (_typeof(seekConfig.headers) === 'object') {
                var headers = seekConfig.headers;

                for (var key in headers) {
                    if (headers.hasOwnProperty(key)) {
                        xhr.setRequestHeader(key, headers[key]);
                    }
                }
            }

            xhr.send();
        }
    }, {
        key: 'abort',
        value: function abort() {
            this._requestAbort = true;
            this._internalAbort();
            this._status = _loader.LoaderStatus.kComplete;
        }
    }, {
        key: '_internalAbort',
        value: function _internalAbort() {
            if (this._xhr) {
                this._xhr.onreadystatechange = null;
                this._xhr.onprogress = null;
                this._xhr.onload = null;
                this._xhr.onerror = null;
                this._xhr.abort();
                this._xhr = null;
            }
        }
    }, {
        key: '_onReadyStateChange',
        value: function _onReadyStateChange(e) {
            var xhr = e.target;

            if (xhr.readyState === 2) {
                // HEADERS_RECEIVED
                if (xhr.responseURL != undefined) {
                    // if the browser support this property
                    var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);
                    if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {
                        this._currentRedirectedURL = redirectedURL;
                        if (this._onURLRedirect) {
                            this._onURLRedirect(redirectedURL);
                        }
                    }
                }

                if (xhr.status >= 200 && xhr.status <= 299) {
                    if (this._waitForTotalLength) {
                        return;
                    }
                    this._status = _loader.LoaderStatus.kBuffering;
                } else {
                    this._status = _loader.LoaderStatus.kError;
                    if (this._onError) {
                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });
                    } else {
                        throw new _exception.RuntimeException('RangeLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);
                    }
                }
            }
        }
    }, {
        key: '_onProgress',
        value: function _onProgress(e) {
            if (this._status === _loader.LoaderStatus.kError) {
                // Ignore error response
                return;
            }

            if (this._contentLength === null) {
                var openNextRange = false;

                if (this._waitForTotalLength) {
                    this._waitForTotalLength = false;
                    this._totalLengthReceived = true;
                    openNextRange = true;

                    var total = e.total;
                    this._internalAbort();
                    if (total != null & total !== 0) {
                        this._totalLength = total;
                    }
                }

                // calculate currrent request range's contentLength
                if (this._range.to === -1) {
                    this._contentLength = this._totalLength - this._range.from;
                } else {
                    // to !== -1
                    this._contentLength = this._range.to - this._range.from + 1;
                }

                if (openNextRange) {
                    this._openSubRange();
                    return;
                }
                if (this._onContentLengthKnown) {
                    this._onContentLengthKnown(this._contentLength);
                }
            }

            var delta = e.loaded - this._lastTimeLoaded;
            this._lastTimeLoaded = e.loaded;
            this._speedSampler.addBytes(delta);
        }
    }, {
        key: '_normalizeSpeed',
        value: function _normalizeSpeed(input) {
            var list = this._chunkSizeKBList;
            var last = list.length - 1;
            var mid = 0;
            var lbound = 0;
            var ubound = last;

            if (input < list[0]) {
                return list[0];
            }

            while (lbound <= ubound) {
                mid = lbound + Math.floor((ubound - lbound) / 2);
                if (mid === last || input >= list[mid] && input < list[mid + 1]) {
                    return list[mid];
                } else if (list[mid] < input) {
                    lbound = mid + 1;
                } else {
                    ubound = mid - 1;
                }
            }
        }
    }, {
        key: '_onLoad',
        value: function _onLoad(e) {
            if (this._status === _loader.LoaderStatus.kError) {
                // Ignore error response
                return;
            }

            if (this._waitForTotalLength) {
                this._waitForTotalLength = false;
                return;
            }

            this._lastTimeLoaded = 0;
            var KBps = this._speedSampler.lastSecondKBps;
            if (KBps === 0) {
                this._zeroSpeedChunkCount++;
                if (this._zeroSpeedChunkCount >= 3) {
                    // Try get currentKBps after 3 chunks
                    KBps = this._speedSampler.currentKBps;
                }
            }

            if (KBps !== 0) {
                var normalized = this._normalizeSpeed(KBps);
                if (this._currentSpeedNormalized !== normalized) {
                    this._currentSpeedNormalized = normalized;
                    this._currentChunkSizeKB = normalized;
                }
            }

            var chunk = e.target.response;
            var byteStart = this._range.from + this._receivedLength;
            this._receivedLength += chunk.byteLength;

            var reportComplete = false;

            if (this._contentLength != null && this._receivedLength < this._contentLength) {
                // continue load next chunk
                this._openSubRange();
            } else {
                reportComplete = true;
            }

            // dispatch received chunk
            if (this._onDataArrival) {
                this._onDataArrival(chunk, byteStart, this._receivedLength);
            }

            if (reportComplete) {
                this._status = _loader.LoaderStatus.kComplete;
                if (this._onComplete) {
                    this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);
                }
            }
        }
    }, {
        key: '_onXhrError',
        value: function _onXhrError(e) {
            this._status = _loader.LoaderStatus.kError;
            var type = 0;
            var info = null;

            if (this._contentLength && this._receivedLength > 0 && this._receivedLength < this._contentLength) {
                type = _loader.LoaderErrors.EARLY_EOF;
                info = { code: -1, msg: 'RangeLoader meet Early-Eof' };
            } else {
                type = _loader.LoaderErrors.EXCEPTION;
                info = { code: -1, msg: e.constructor.name + ' ' + e.type };
            }

            if (this._onError) {
                this._onError(type, info);
            } else {
                throw new _exception.RuntimeException(info.msg);
            }
        }
    }, {
        key: 'currentSpeed',
        get: function get() {
            return this._speedSampler.lastSecondKBps;
        }
    }]);

    return RangeLoader;
}(_loader.BaseLoader);

exports.default = RangeLoader;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/player/flv-player.js":
/*!**************************************!*\
  !*** ./src/flv/player/flv-player.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _events = __webpack_require__(/*! events */ "./node_modules/events/events.js");

var _events2 = _interopRequireDefault(_events);

var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _browser = __webpack_require__(/*! ../utils/browser.js */ "./src/flv/utils/browser.js");

var _browser2 = _interopRequireDefault(_browser);

var _playerEvents = __webpack_require__(/*! ./player-events.js */ "./src/flv/player/player-events.js");

var _playerEvents2 = _interopRequireDefault(_playerEvents);

var _transmuxer = __webpack_require__(/*! ../core/transmuxer.js */ "./src/flv/core/transmuxer.js");

var _transmuxer2 = _interopRequireDefault(_transmuxer);

var _transmuxingEvents = __webpack_require__(/*! ../core/transmuxing-events.js */ "./src/flv/core/transmuxing-events.js");

var _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);

var _mseController = __webpack_require__(/*! ../core/mse-controller.js */ "./src/flv/core/mse-controller.js");

var _mseController2 = _interopRequireDefault(_mseController);

var _mseEvents = __webpack_require__(/*! ../core/mse-events.js */ "./src/flv/core/mse-events.js");

var _mseEvents2 = _interopRequireDefault(_mseEvents);

var _playerErrors = __webpack_require__(/*! ./player-errors.js */ "./src/flv/player/player-errors.js");

var _config = __webpack_require__(/*! ../config.js */ "./src/flv/config.js");

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable */
var FlvPlayer = function () {
  function FlvPlayer(mediaDataSource, config) {
    _classCallCheck(this, FlvPlayer);

    this.TAG = 'FlvPlayer';
    this._type = 'FlvPlayer';
    this._emitter = new _events2.default();

    this._config = (0, _config.createDefaultConfig)();
    if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {
      Object.assign(this._config, config);
    }

    if (mediaDataSource.type.toLowerCase() !== 'flv') {
      throw new _exception.InvalidArgumentException('FlvPlayer requires an flv MediaDataSource input!');
    }

    if (mediaDataSource.isLive === true) {
      this._config.isLive = true;
    }

    this.e = {
      onvLoadedMetadata: this._onvLoadedMetadata.bind(this),
      onvSeeking: this._onvSeeking.bind(this),
      onvCanPlay: this._onvCanPlay.bind(this),
      onvStalled: this._onvStalled.bind(this),
      onvProgress: this._onvProgress.bind(this)
    };

    if (window.performance && window.performance.now) {
      this._now = window.performance.now.bind(window.performance);
    } else {
      this._now = Date.now;
    }

    this._pendingSeekTime = null; // in seconds
    this._requestSetTime = false;
    this._seekpointRecord = null;
    this._progressChecker = null;

    this._mediaDataSource = mediaDataSource;
    this._mediaElement = null;
    this._msectl = null;
    this._transmuxer = null;

    this._mseSourceOpened = false;
    this._hasPendingLoad = false;
    this._receivedCanPlay = false;

    this._mediaInfo = null;
    this._statisticsInfo = null;

    var chromeNeedIDRFix = _browser2.default.chrome && (_browser2.default.version.major < 50 || _browser2.default.version.major === 50 && _browser2.default.version.build < 2661);
    this._alwaysSeekKeyframe = !!(chromeNeedIDRFix || _browser2.default.msedge || _browser2.default.msie);

    if (this._alwaysSeekKeyframe) {
      this._config.accurateSeek = false;
    }
    this._tempPendingSegments = {
      audio: [],
      video: []
    };
    this._definitionRetryTimes = 0;
  }

  _createClass(FlvPlayer, [{
    key: 'destroy',
    value: function destroy() {
      if (this._progressChecker != null) {
        window.clearInterval(this._progressChecker);
        this._progressChecker = null;
      }
      if (this._transmuxer) {
        this.unload();
      }
      if (this._mediaElement) {
        this.detachMediaElement();
      }
      this.e = null;
      this._mediaDataSource = null;

      this._emitter.removeAllListeners();
      this._emitter = null;
    }
  }, {
    key: 'on',
    value: function on(event, listener) {
      var _this = this;

      if (event === _playerEvents2.default.MEDIA_INFO) {
        if (this._mediaInfo != null) {
          Promise.resolve().then(function () {
            _this._emitter.emit(_playerEvents2.default.MEDIA_INFO, _this.mediaInfo);
          });
        }
      } else if (event === _playerEvents2.default.STATISTICS_INFO) {
        if (this._statisticsInfo != null) {
          Promise.resolve().then(function () {
            _this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, _this.statisticsInfo);
          });
        }
      }
      this._emitter.addListener(event, listener);
    }
  }, {
    key: 'off',
    value: function off(event, listener) {
      this._emitter.removeListener(event, listener);
    }
  }, {
    key: 'attachMediaElement',
    value: function attachMediaElement(mediaElement) {
      var _this2 = this;

      this._mediaElement = mediaElement;
      mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);
      mediaElement.addEventListener('seeking', this.e.onvSeeking);
      mediaElement.addEventListener('canplay', this.e.onvCanPlay);
      mediaElement.addEventListener('stalled', this.e.onvStalled);
      mediaElement.addEventListener('progress', this.e.onvProgress);

      this._msectl = new _mseController2.default(this._config);

      this._msectl.on(_mseEvents2.default.UPDATE_END, this._onmseUpdateEnd.bind(this));
      this._msectl.on(_mseEvents2.default.BUFFER_FULL, this._onmseBufferFull.bind(this));
      this._msectl.on(_mseEvents2.default.SOURCE_OPEN, function () {
        _this2._mseSourceOpened = true;
        if (_this2._hasPendingLoad) {
          _this2._hasPendingLoad = false;
          _this2.load();
        }
      });
      this._msectl.on(_mseEvents2.default.ERROR, function (info) {
        _this2._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_MSE_ERROR, info);
      });

      this._msectl.attachMediaElement(mediaElement);

      if (this._pendingSeekTime != null) {
        try {
          mediaElement.currentTime = this._pendingSeekTime;
          this._pendingSeekTime = null;
        } catch (e) {
          // IE11 may throw InvalidStateError if readyState === 0
          // We can defer set currentTime operation after loadedmetadata
        }
      }
    }
  }, {
    key: 'detachMediaElement',
    value: function detachMediaElement() {
      if (this._mediaElement) {
        this._msectl.detachMediaElement();
        this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);
        this._mediaElement.removeEventListener('seeking', this.e.onvSeeking);
        this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);
        this._mediaElement.removeEventListener('stalled', this.e.onvStalled);
        this._mediaElement.removeEventListener('progress', this.e.onvProgress);
        this._mediaElement = null;
      }
      if (this._msectl) {
        this._msectl.destroy();
        this._msectl = null;
      }
    }
  }, {
    key: 'onDefinitionChange',
    value: function onDefinitionChange(url) {
      var _this3 = this;

      var expectTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

      // setTimeout(() => {
      //   if (!this.isDefinitionDataReady && this._definitionRetryTimes < 3) {
      //     this._definitionRetryTimes += 1
      //     this.onDefinitionChange(url, expectTime)
      //   } else if (this.isDefinitionDataReady) {
      //     if (this._transmuxer !== this._tempTransmuxer) {
      //       this._transmuxer.destroy()
      //       this._transmuxer = this._tempTransmuxer
      //       let currentTime = this._mediaElement.currentTime
      //       this._tempTransmuxer.seek(currentTime * 1000)
      //     }
      //     Object.keys(this._tempPendingSegments).forEach(key => {
      //       this._msectl._pendingSegments[key] = this._tempPendingSegments[key]
      //     })
      //     this._tempPendingSegments = {
      //       audio: [],
      //       video: []
      //     }
      //
      //     this._definitionRetryTimes = 0
      //   } else if (this._definitionRetryTimes >= 3) {
      //     this._definitionRetryTimes = 0
      //     if (this._tempTransmuxer) {
      //       this._tempTransmuxer.destroy()
      //       this._tempTransmuxer = null
      //       this._emitter.emit(PlayerEvents.ERROR, ErrorTypes.NETWORK_ERROR, '', '清晰度切换失败！')
      //     }
      //     this._definitionRetryTimes = 0
      //   }
      //   this._tempPendingSegments = {
      //     audio: [],
      //     video: []
      //   }
      // }, expectTime * 1000)

      this._mediaDataSource.segments[0].url = url;
      this._tempMds = Object.assign({}, this._mediaDataSource, { url: url });

      this._tempTransmuxer = new _transmuxer2.default(this._tempMds, this._config);
      this._tempTransmuxer._emitter.on('metadata_arrived', function (onMetaData) {
        _this3._emitter.emit('metadata_arrived', onMetaData);
      });

      this._tempTransmuxer.on(_transmuxingEvents2.default.INIT_SEGMENT, function (type, is) {
        if (!_this3._config.isLive) {
          _this3._tempPendingSegments[type] = [is];
          // this._msectl.appendInitSegment(is)
          if (_this3._transmuxer !== _this3._tempTransmuxer && _this3._tempTransmuxer) {
            var currentTime = _this3._mediaElement.currentTime;
            _this3._tempTransmuxer.seek(currentTime * 1000);
          }
          // if (this._transmuxer !== this._tempTransmuxer) {
          //   this._transmuxer.destroy()
          // }
          // this._transmuxer = this._tempTransmuxer
        } else {
          _this3._msectl.doClearSourceBuffer();
          _this3._msectl.appendInitSegment(is);
          if (_this3._transmuxer !== _this3._tempTransmuxer) {
            _this3._transmuxer.destroy();
          }
          _this3._transmuxer = _this3._tempTransmuxer;
        }
      });

      this._tempTransmuxer.on(_transmuxingEvents2.default.MEDIA_SEGMENT, function (type, ms) {
        if (!_this3._config.isLive) {
          if (!_this3._tempTransmuxer) {
            _this3._msectl.appendMediaSegment(ms);
          } else {
            _this3._tempPendingSegments[type] && _this3._tempPendingSegments[type].push(ms);
            if (_this3.isDefinitionDataReady) {
              Object.keys(_this3._tempPendingSegments).forEach(function (key) {
                _this3._msectl._pendingSegments[key] = _this3._tempPendingSegments[key];
              });
              _this3._tempPendingSegments = {
                audio: [],
                video: []
              };
              _this3._transmuxer.destroy();
              _this3._transmuxer = _this3._tempTransmuxer;
              delete _this3._tempTransmuxer;
            }
          }
        } else {
          _this3._msectl.appendMediaSegment(ms);
        }

        // lazyLoad check
        if (_this3._config.lazyLoad && !_this3._config.isLive) {
          var currentTime = _this3._mediaElement.currentTime;
          if (ms.info.endDts >= (currentTime + _this3._config.lazyLoadMaxDuration) * 1000) {
            if (_this3._progressChecker == null) {
              _logger2.default.v(_this3.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');
              _this3._suspendTransmuxer();
            }
          }
        }
      });
      this._tempTransmuxer.on(_transmuxingEvents2.default.LOADING_COMPLETE, function () {
        _this3._msectl.endOfStream();
        _this3._emitter.emit(_playerEvents2.default.LOADING_COMPLETE);
      });
      this._tempTransmuxer.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, function () {
        _this3._emitter.emit(_playerEvents2.default.RECOVERED_EARLY_EOF);
      });
      this._tempTransmuxer.on(_transmuxingEvents2.default.IO_ERROR, function (detail, info) {
        _this3._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.NETWORK_ERROR, detail, info);
      });
      this._tempTransmuxer.on(_transmuxingEvents2.default.DEMUX_ERROR, function (detail, info) {
        _this3._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, detail, { code: -1, msg: info });
      });
      this._tempTransmuxer.on(_transmuxingEvents2.default.MEDIA_INFO, function (mediaInfo) {
        _this3._mediaInfo = mediaInfo;
        _this3._tempTransmuxer.seek((_this3._mediaElement.currentTime + expectTime) * 1000);
        _this3._emitter.emit(_playerEvents2.default.MEDIA_INFO, Object.assign({}, mediaInfo));
      });
      this._tempTransmuxer.on(_transmuxingEvents2.default.STATISTICS_INFO, function (statInfo) {
        _this3._statisticsInfo = _this3._fillStatisticsInfo(statInfo);
        _this3._emitter.emit(_playerEvents2.default.STATISTICS_INFO, Object.assign({}, _this3._statisticsInfo));
      });
      this._tempTransmuxer.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, function (milliseconds) {
        if (_this3._transmuxer === _this3._tempTransmuxer && _this3._mediaElement && !_this3._config.accurateSeek) {
          _this3._requestSetTime = true;
          _this3._mediaElement.currentTime = milliseconds / 1000;
        }
      });

      this._tempTransmuxer.open();
    }
  }, {
    key: 'load',
    value: function load() {
      var _this4 = this;

      if (!this._mediaElement) {
        throw new _exception.IllegalStateException('HTMLMediaElement must be attached before load()!');
      }
      if (this._transmuxer) {
        throw new _exception.IllegalStateException('FlvPlayer.load() has been called, please call unload() first!');
      }
      if (this._hasPendingLoad) {
        return;
      }

      if (this._config.deferLoadAfterSourceOpen && this._mseSourceOpened === false) {
        this._hasPendingLoad = true;
        return;
      }

      if (this._mediaElement.readyState > 0) {
        this._requestSetTime = true;
        // IE11 may throw InvalidStateError if readyState === 0
        this._mediaElement.currentTime = 0;
      }

      this._transmuxer = new _transmuxer2.default(this._mediaDataSource, this._config);
      this._transmuxer._emitter.on('metadata_arrived', function (onMetaData) {
        _this4._emitter.emit('metadata_arrived', onMetaData);
      });

      this._transmuxer.on(_transmuxingEvents2.default.INIT_SEGMENT, function (type, is) {
        _this4._msectl.appendInitSegment(is);
      });
      this._transmuxer.on(_transmuxingEvents2.default.MEDIA_SEGMENT, function (type, ms) {
        _this4._msectl.appendMediaSegment(ms);

        // lazyLoad check
        if (_this4._config.lazyLoad && !_this4._config.isLive) {
          var currentTime = _this4._mediaElement.currentTime;
          if (ms.info.endDts >= (currentTime + _this4._config.lazyLoadMaxDuration) * 1000) {
            if (_this4._progressChecker == null) {
              _logger2.default.v(_this4.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');
              _this4._suspendTransmuxer();
            }
          }
        }
      });
      this._transmuxer.on(_transmuxingEvents2.default.LOADING_COMPLETE, function () {
        _this4._msectl.endOfStream();
        _this4._emitter.emit(_playerEvents2.default.LOADING_COMPLETE);
      });
      this._transmuxer.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, function () {
        _this4._emitter.emit(_playerEvents2.default.RECOVERED_EARLY_EOF);
      });
      this._transmuxer.on(_transmuxingEvents2.default.IO_ERROR, function (detail, info) {
        _this4._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.NETWORK_ERROR, detail, info);
      });
      this._transmuxer.on(_transmuxingEvents2.default.DEMUX_ERROR, function (detail, info) {
        _this4._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, detail, { code: -1, msg: info });
      });
      this._transmuxer.on(_transmuxingEvents2.default.MEDIA_INFO, function (mediaInfo) {
        _this4._mediaInfo = mediaInfo;
        _this4._emitter.emit(_playerEvents2.default.MEDIA_INFO, Object.assign({}, mediaInfo));
      });
      this._transmuxer.on(_transmuxingEvents2.default.STATISTICS_INFO, function (statInfo) {
        _this4._statisticsInfo = _this4._fillStatisticsInfo(statInfo);
        _this4._emitter.emit(_playerEvents2.default.STATISTICS_INFO, Object.assign({}, _this4._statisticsInfo));
      });
      this._transmuxer.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, function (milliseconds) {
        if (_this4._mediaElement && !_this4._config.accurateSeek) {
          _this4._requestSetTime = true;
          _this4._mediaElement.currentTime = milliseconds / 1000;
        }
      });

      this._transmuxer.open();
    }
  }, {
    key: 'unload',
    value: function unload() {
      if (this._mediaElement) {
        this._mediaElement.pause();
      }
      if (this._msectl) {
        this._msectl.seek(0);
      }
      if (this._transmuxer) {
        this._transmuxer.close();
        this._transmuxer.destroy();
        this._transmuxer = null;
      }
    }
  }, {
    key: 'play',
    value: function play() {
      return this._mediaElement.play();
    }
  }, {
    key: 'pause',
    value: function pause() {
      this._mediaElement.pause();
    }
  }, {
    key: '_fillStatisticsInfo',
    value: function _fillStatisticsInfo(statInfo) {
      statInfo.playerType = this._type;

      if (!(this._mediaElement instanceof window.HTMLVideoElement)) {
        return statInfo;
      }

      var hasQualityInfo = true;
      var decoded = 0;
      var dropped = 0;

      if (this._mediaElement.getVideoPlaybackQuality) {
        var quality = this._mediaElement.getVideoPlaybackQuality();
        decoded = quality.totalVideoFrames;
        dropped = quality.droppedVideoFrames;
      } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {
        decoded = this._mediaElement.webkitDecodedFrameCount;
        dropped = this._mediaElement.webkitDroppedFrameCount;
      } else {
        hasQualityInfo = false;
      }

      if (hasQualityInfo) {
        statInfo.decodedFrames = decoded;
        statInfo.droppedFrames = dropped;
      }

      return statInfo;
    }
  }, {
    key: '_onmseUpdateEnd',
    value: function _onmseUpdateEnd() {
      if (!this._config.lazyLoad || this._config.isLive) {
        return;
      }

      var buffered = this._mediaElement.buffered;
      var currentTime = this._mediaElement.currentTime;
      var currentRangeStart = 0;
      var currentRangeEnd = 0;

      for (var i = 0; i < buffered.length; i++) {
        var start = buffered.start(i);
        var end = buffered.end(i);
        if (start <= currentTime && currentTime < end) {
          currentRangeStart = start;
          currentRangeEnd = end;
          break;
        }
      }

      if (currentRangeEnd >= currentTime + this._config.lazyLoadMaxDuration && this._progressChecker == null) {
        _logger2.default.v(this.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');
        this._suspendTransmuxer();
      }
    }
  }, {
    key: '_onmseBufferFull',
    value: function _onmseBufferFull() {
      _logger2.default.v(this.TAG, 'MSE SourceBuffer is full, suspend transmuxing task');
      if (this._progressChecker == null) {
        this._suspendTransmuxer();
      }
    }
  }, {
    key: '_suspendTransmuxer',
    value: function _suspendTransmuxer() {
      if (this._transmuxer) {
        this._transmuxer.pause();

        if (this._progressChecker == null) {
          this._progressChecker = window.setInterval(this._checkProgressAndResume.bind(this), 1000);
        }
      }
    }
  }, {
    key: '_checkProgressAndResume',
    value: function _checkProgressAndResume() {
      var currentTime = this._mediaElement.currentTime;
      var buffered = this._mediaElement.buffered;

      var needResume = false;

      for (var i = 0; i < buffered.length; i++) {
        var from = buffered.start(i);
        var to = buffered.end(i);
        if (currentTime >= from && currentTime < to) {
          if (currentTime >= to - this._config.lazyLoadRecoverDuration) {
            needResume = true;
          }
          break;
        }
      }

      if (needResume) {
        window.clearInterval(this._progressChecker);
        this._progressChecker = null;
        if (needResume) {
          _logger2.default.v(this.TAG, 'Continue loading from paused position');
          this._transmuxer.resume();
        }
      }
    }
  }, {
    key: '_isTimepointBuffered',
    value: function _isTimepointBuffered(seconds) {
      var buffered = this._mediaElement.buffered;

      for (var i = 0; i < buffered.length; i++) {
        var from = buffered.start(i);
        var to = buffered.end(i);
        if (seconds >= from && seconds < to) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: '_internalSeek',
    value: function _internalSeek(seconds) {
      var directSeek = this._isTimepointBuffered(seconds);

      var directSeekBegin = false;
      var directSeekBeginTime = 0;

      if (seconds < 1.0 && this._mediaElement.buffered.length > 0) {
        var videoBeginTime = this._mediaElement.buffered.start(0);
        if (videoBeginTime < 1.0 && seconds < videoBeginTime || _browser2.default.safari) {
          directSeekBegin = true;
          // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid
          directSeekBeginTime = _browser2.default.safari ? 0.1 : videoBeginTime;
        }
      }

      if (directSeekBegin) {
        // seek to video begin, set currentTime directly if beginPTS buffered
        this._requestSetTime = true;
        this._mediaElement.currentTime = directSeekBeginTime;
      } else if (directSeek) {
        // buffered position
        if (!this._alwaysSeekKeyframe) {
          this._requestSetTime = true;
          this._mediaElement.currentTime = seconds;
        } else {
          var idr = this._msectl.getNearestKeyframe(Math.floor(seconds * 1000));
          this._requestSetTime = true;
          if (idr != null) {
            this._mediaElement.currentTime = idr.dts / 1000;
          } else {
            this._mediaElement.currentTime = seconds;
          }
        }
        if (this._progressChecker != null) {
          this._checkProgressAndResume();
        }
      } else {
        if (this._progressChecker != null) {
          window.clearInterval(this._progressChecker);
          this._progressChecker = null;
        }
        this._msectl.seek(seconds);
        this._transmuxer.seek(Math.floor(seconds * 1000)); // in milliseconds
        // no need to set mediaElement.currentTime if non-accurateSeek,
        // just wait for the recommend_seekpoint callback
        if (this._config.accurateSeek) {
          this._requestSetTime = true;
          this._mediaElement.currentTime = seconds;
        }
      }
    }
  }, {
    key: '_checkAndApplyUnbufferedSeekpoint',
    value: function _checkAndApplyUnbufferedSeekpoint() {
      if (this._seekpointRecord) {
        if (this._seekpointRecord.recordTime <= this._now() - 100) {
          var target = this._mediaElement.currentTime;
          this._seekpointRecord = null;
          if (!this._isTimepointBuffered(target)) {
            if (this._progressChecker != null) {
              window.clearTimeout(this._progressChecker);
              this._progressChecker = null;
            }
            // .currentTime is consists with .buffered timestamp
            // Chrome/Edge use DTS, while FireFox/Safari use PTS
            this._msectl.seek(target);
            this._transmuxer.seek(Math.floor(target * 1000));
            // set currentTime if accurateSeek, or wait for recommend_seekpoint callback
            if (this._config.accurateSeek) {
              this._requestSetTime = true;
              this._mediaElement.currentTime = target;
            }
          }
        } else {
          window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);
        }
      }
    }
  }, {
    key: '_checkAndResumeStuckPlayback',
    value: function _checkAndResumeStuckPlayback(stalled) {
      var media = this._mediaElement;
      if (stalled || !this._receivedCanPlay || media.readyState < 2) {
        // HAVE_CURRENT_DATA
        var buffered = media.buffered;
        if (buffered.length > 0 && media.currentTime < buffered.start(0)) {
          _logger2.default.w(this.TAG, 'Playback seems stuck at ' + media.currentTime + ', seek to ' + buffered.start(0));
          this._requestSetTime = true;
          this._mediaElement.currentTime = buffered.start(0);
          this._mediaElement.removeEventListener('progress', this.e.onvProgress);
        }
      } else {
        // Playback didn't stuck, remove progress event listener
        this._mediaElement.removeEventListener('progress', this.e.onvProgress);
      }
    }
  }, {
    key: '_onvLoadedMetadata',
    value: function _onvLoadedMetadata(e) {
      if (this._pendingSeekTime != null) {
        this._mediaElement.currentTime = this._pendingSeekTime;
        this._pendingSeekTime = null;
      }
    }
  }, {
    key: '_onvSeeking',
    value: function _onvSeeking(e) {
      // handle seeking request from browser's progress bar
      var target = this._mediaElement.currentTime;
      var buffered = this._mediaElement.buffered;

      if (this._requestSetTime) {
        this._requestSetTime = false;
        return;
      }

      if (target < 1.0 && buffered.length > 0) {
        // seek to video begin, set currentTime directly if beginPTS buffered
        var videoBeginTime = buffered.start(0);
        if (videoBeginTime < 1.0 && target < videoBeginTime || _browser2.default.safari) {
          this._requestSetTime = true;
          // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid
          this._mediaElement.currentTime = _browser2.default.safari ? 0.1 : videoBeginTime;
          return;
        }
      }

      if (this._isTimepointBuffered(target)) {
        if (this._alwaysSeekKeyframe) {
          var idr = this._msectl.getNearestKeyframe(Math.floor(target * 1000));
          if (idr != null) {
            this._requestSetTime = true;
            this._mediaElement.currentTime = idr.dts / 1000;
          }
        }
        if (this._progressChecker != null) {
          this._checkProgressAndResume();
        }
        return;
      }

      this._seekpointRecord = {
        seekPoint: target,
        recordTime: this._now()
      };
      window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);
    }
  }, {
    key: '_onvCanPlay',
    value: function _onvCanPlay(e) {
      this._receivedCanPlay = true;
      this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);
    }
  }, {
    key: '_onvStalled',
    value: function _onvStalled(e) {
      this._checkAndResumeStuckPlayback(true);
    }
  }, {
    key: '_onvProgress',
    value: function _onvProgress(e) {
      this._checkAndResumeStuckPlayback();
    }
  }, {
    key: 'type',
    get: function get() {
      return this._type;
    }
  }, {
    key: 'buffered',
    get: function get() {
      return this._mediaElement.buffered;
    }
  }, {
    key: 'duration',
    get: function get() {
      return this._mediaElement.duration;
    }
  }, {
    key: 'volume',
    get: function get() {
      return this._mediaElement.volume;
    },
    set: function set(value) {
      this._mediaElement.volume = value;
    }
  }, {
    key: 'muted',
    get: function get() {
      return this._mediaElement.muted;
    },
    set: function set(muted) {
      this._mediaElement.muted = muted;
    }
  }, {
    key: 'currentTime',
    get: function get() {
      if (this._mediaElement) {
        return this._mediaElement.currentTime;
      }
      return 0;
    },
    set: function set(seconds) {
      if (this._mediaElement) {
        this._internalSeek(seconds);
      } else {
        this._pendingSeekTime = seconds;
      }
    }
  }, {
    key: 'mediaInfo',
    get: function get() {
      return Object.assign({}, this._mediaInfo);
    }
  }, {
    key: 'statisticsInfo',
    get: function get() {
      if (this._statisticsInfo == null) {
        this._statisticsInfo = {};
      }
      this._statisticsInfo = this._fillStatisticsInfo(this._statisticsInfo);
      return Object.assign({}, this._statisticsInfo);
    }
  }, {
    key: 'isDefinitionDataReady',
    get: function get() {
      var _this5 = this;

      var minSegmentLen = 10;
      return Object.keys(this._tempPendingSegments).every(function (key) {
        return _this5._tempPendingSegments[key].length >= minSegmentLen;
      });
    }
  }]);

  return FlvPlayer;
}();

exports.default = FlvPlayer;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/player/native-player.js":
/*!*****************************************!*\
  !*** ./src/flv/player/native-player.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * limitations under the License.


var _events = __webpack_require__(/*! events */ "./node_modules/events/events.js");

var _events2 = _interopRequireDefault(_events);

var _playerEvents = __webpack_require__(/*! ./player-events.js */ "./src/flv/player/player-events.js");

var _playerEvents2 = _interopRequireDefault(_playerEvents);

var _config = __webpack_require__(/*! ../config.js */ "./src/flv/config.js");

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. 
var NativePlayer = function () {
    function NativePlayer(mediaDataSource, config) {
        _classCallCheck(this, NativePlayer);

        this.TAG = 'NativePlayer';
        this._type = 'NativePlayer';
        this._emitter = new _events2.default();

        this._config = (0, _config.createDefaultConfig)();
        if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {
            Object.assign(this._config, config);
        }

        if (mediaDataSource.type.toLowerCase() === 'flv') {
            throw new _exception.InvalidArgumentException('NativePlayer does\'t support flv MediaDataSource input!');
        }
        if (mediaDataSource.hasOwnProperty('segments')) {
            throw new _exception.InvalidArgumentException('NativePlayer(' + mediaDataSource.type + ') doesn\'t support multipart playback!');
        }

        this.e = {
            onvLoadedMetadata: this._onvLoadedMetadata.bind(this)
        };

        this._pendingSeekTime = null;
        this._statisticsReporter = null;

        this._mediaDataSource = mediaDataSource;
        this._mediaElement = null;
    }

    _createClass(NativePlayer, [{
        key: 'destroy',
        value: function destroy() {
            if (this._mediaElement) {
                this.unload();
                this.detachMediaElement();
            }
            this.e = null;
            this._mediaDataSource = null;
            this._emitter.removeAllListeners();
            this._emitter = null;
        }
    }, {
        key: 'on',
        value: function on(event, listener) {
            var _this = this;

            if (event === _playerEvents2.default.MEDIA_INFO) {
                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {
                    // HAVE_NOTHING
                    Promise.resolve().then(function () {
                        _this._emitter.emit(_playerEvents2.default.MEDIA_INFO, _this.mediaInfo);
                    });
                }
            } else if (event === _playerEvents2.default.STATISTICS_INFO) {
                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {
                    Promise.resolve().then(function () {
                        _this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, _this.statisticsInfo);
                    });
                }
            }
            this._emitter.addListener(event, listener);
        }
    }, {
        key: 'off',
        value: function off(event, listener) {
            this._emitter.removeListener(event, listener);
        }
    }, {
        key: 'attachMediaElement',
        value: function attachMediaElement(mediaElement) {
            this._mediaElement = mediaElement;
            mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);

            if (this._pendingSeekTime != null) {
                try {
                    mediaElement.currentTime = this._pendingSeekTime;
                    this._pendingSeekTime = null;
                } catch (e) {
                    // IE11 may throw InvalidStateError if readyState === 0
                    // Defer set currentTime operation after loadedmetadata
                }
            }
        }
    }, {
        key: 'detachMediaElement',
        value: function detachMediaElement() {
            if (this._mediaElement) {
                this._mediaElement.src = '';
                this._mediaElement.removeAttribute('src');
                this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);
                this._mediaElement = null;
            }
            if (this._statisticsReporter != null) {
                window.clearInterval(this._statisticsReporter);
                this._statisticsReporter = null;
            }
        }
    }, {
        key: 'load',
        value: function load() {
            if (!this._mediaElement) {
                throw new _exception.IllegalStateException('HTMLMediaElement must be attached before load()!');
            }
            this._mediaElement.src = this._mediaDataSource.url;

            if (this._mediaElement.readyState > 0) {
                this._mediaElement.currentTime = 0;
            }

            this._mediaElement.preload = 'auto';
            this._mediaElement.load();
            this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);
        }
    }, {
        key: 'unload',
        value: function unload() {
            if (this._mediaElement) {
                this._mediaElement.src = '';
                this._mediaElement.removeAttribute('src');
            }
            if (this._statisticsReporter != null) {
                window.clearInterval(this._statisticsReporter);
                this._statisticsReporter = null;
            }
        }
    }, {
        key: 'play',
        value: function play() {
            return this._mediaElement.play();
        }
    }, {
        key: 'pause',
        value: function pause() {
            this._mediaElement.pause();
        }
    }, {
        key: '_onvLoadedMetadata',
        value: function _onvLoadedMetadata(e) {
            if (this._pendingSeekTime != null) {
                this._mediaElement.currentTime = this._pendingSeekTime;
                this._pendingSeekTime = null;
            }
            this._emitter.emit(_playerEvents2.default.MEDIA_INFO, this.mediaInfo);
        }
    }, {
        key: '_reportStatisticsInfo',
        value: function _reportStatisticsInfo() {
            this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, this.statisticsInfo);
        }
    }, {
        key: 'type',
        get: function get() {
            return this._type;
        }
    }, {
        key: 'buffered',
        get: function get() {
            return this._mediaElement.buffered;
        }
    }, {
        key: 'duration',
        get: function get() {
            return this._mediaElement.duration;
        }
    }, {
        key: 'volume',
        get: function get() {
            return this._mediaElement.volume;
        },
        set: function set(value) {
            this._mediaElement.volume = value;
        }
    }, {
        key: 'muted',
        get: function get() {
            return this._mediaElement.muted;
        },
        set: function set(muted) {
            this._mediaElement.muted = muted;
        }
    }, {
        key: 'currentTime',
        get: function get() {
            if (this._mediaElement) {
                return this._mediaElement.currentTime;
            }
            return 0;
        },
        set: function set(seconds) {
            if (this._mediaElement) {
                this._mediaElement.currentTime = seconds;
            } else {
                this._pendingSeekTime = seconds;
            }
        }
    }, {
        key: 'mediaInfo',
        get: function get() {
            var mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';
            var info = {
                mimeType: mediaPrefix + this._mediaDataSource.type
            };
            if (this._mediaElement) {
                info.duration = Math.floor(this._mediaElement.duration * 1000);
                if (this._mediaElement instanceof HTMLVideoElement) {
                    info.width = this._mediaElement.videoWidth;
                    info.height = this._mediaElement.videoHeight;
                }
            }
            return info;
        }
    }, {
        key: 'statisticsInfo',
        get: function get() {
            var info = {
                playerType: this._type,
                url: this._mediaDataSource.url
            };

            if (!(this._mediaElement instanceof HTMLVideoElement)) {
                return info;
            }

            var hasQualityInfo = true;
            var decoded = 0;
            var dropped = 0;

            if (this._mediaElement.getVideoPlaybackQuality) {
                var quality = this._mediaElement.getVideoPlaybackQuality();
                decoded = quality.totalVideoFrames;
                dropped = quality.droppedVideoFrames;
            } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {
                decoded = this._mediaElement.webkitDecodedFrameCount;
                dropped = this._mediaElement.webkitDroppedFrameCount;
            } else {
                hasQualityInfo = false;
            }

            if (hasQualityInfo) {
                info.decodedFrames = decoded;
                info.droppedFrames = dropped;
            }

            return info;
        }
    }]);

    return NativePlayer;
}();

exports.default = NativePlayer;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/player/player-errors.js":
/*!*****************************************!*\
  !*** ./src/flv/player/player-errors.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ErrorDetails = exports.ErrorTypes = undefined;

var _loader = __webpack_require__(/*! ../io/loader.js */ "./src/flv/io/loader.js");

var _demuxErrors = __webpack_require__(/*! ../demux/demux-errors.js */ "./src/flv/demux/demux-errors.js");

var _demuxErrors2 = _interopRequireDefault(_demuxErrors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ErrorTypes = exports.ErrorTypes = {
    NETWORK_ERROR: 'NetworkError',
    MEDIA_ERROR: 'MediaError',
    OTHER_ERROR: 'OtherError'
};

var ErrorDetails = exports.ErrorDetails = {
    NETWORK_EXCEPTION: _loader.LoaderErrors.EXCEPTION,
    NETWORK_STATUS_CODE_INVALID: _loader.LoaderErrors.HTTP_STATUS_CODE_INVALID,
    NETWORK_TIMEOUT: _loader.LoaderErrors.CONNECTING_TIMEOUT,
    NETWORK_UNRECOVERABLE_EARLY_EOF: _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF,

    MEDIA_MSE_ERROR: 'MediaMSEError',

    MEDIA_FORMAT_ERROR: _demuxErrors2.default.FORMAT_ERROR,
    MEDIA_FORMAT_UNSUPPORTED: _demuxErrors2.default.FORMAT_UNSUPPORTED,
    MEDIA_CODEC_UNSUPPORTED: _demuxErrors2.default.CODEC_UNSUPPORTED
};

/***/ }),

/***/ "./src/flv/player/player-events.js":
/*!*****************************************!*\
  !*** ./src/flv/player/player-events.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var PlayerEvents = {
  ERROR: 'error',
  LOADING_COMPLETE: 'loading_complete',
  RECOVERED_EARLY_EOF: 'recovered_early_eof',
  MEDIA_INFO: 'media_info',
  STATISTICS_INFO: 'statistics_info'
};

exports.default = PlayerEvents;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/remux/aac-silent.js":
/*!*************************************!*\
  !*** ./src/flv/remux/aac-silent.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * This file is modified from dailymotion's hls.js library (hls.js/src/helper/aac.js)
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var AAC = function () {
    function AAC() {
        _classCallCheck(this, AAC);
    }

    _createClass(AAC, null, [{
        key: 'getSilentFrame',
        value: function getSilentFrame(codec, channelCount) {
            if (codec === 'mp4a.40.2') {
                // handle LC-AAC
                if (channelCount === 1) {
                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);
                } else if (channelCount === 2) {
                    return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);
                } else if (channelCount === 3) {
                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);
                } else if (channelCount === 4) {
                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);
                } else if (channelCount === 5) {
                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);
                } else if (channelCount === 6) {
                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);
                }
            } else {
                // handle HE-AAC (mp4a.40.5 / mp4a.40.29)
                if (channelCount === 1) {
                    // ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
                } else if (channelCount === 2) {
                    // ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
                } else if (channelCount === 3) {
                    // ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
                }
            }
            return null;
        }
    }]);

    return AAC;
}();

exports.default = AAC;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/remux/mp4-generator.js":
/*!****************************************!*\
  !*** ./src/flv/remux/mp4-generator.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)
var MP4 = function () {
  function MP4() {
    _classCallCheck(this, MP4);
  }

  _createClass(MP4, null, [{
    key: 'init',
    value: function init() {
      MP4.types = {
        avc1: [],
        avcC: [],
        btrt: [],
        dinf: [],
        dref: [],
        esds: [],
        ftyp: [],
        hdlr: [],
        mdat: [],
        mdhd: [],
        mdia: [],
        mfhd: [],
        minf: [],
        moof: [],
        moov: [],
        mp4a: [],
        mvex: [],
        mvhd: [],
        sdtp: [],
        stbl: [],
        stco: [],
        stsc: [],
        stsd: [],
        stsz: [],
        stts: [],
        tfdt: [],
        tfhd: [],
        traf: [],
        trak: [],
        trun: [],
        trex: [],
        tkhd: [],
        vmhd: [],
        smhd: [],
        '.mp3': []
      };

      for (var name in MP4.types) {
        if (MP4.types.hasOwnProperty(name)) {
          MP4.types[name] = [name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)];
        }
      }

      var constants = MP4.constants = {};

      constants.FTYP = new Uint8Array([0x69, 0x73, 0x6F, 0x6D, // major_brand: isom
      0x0, 0x0, 0x0, 0x1, // minor_version: 0x01
      0x69, 0x73, 0x6F, 0x6D, // isom
      0x61, 0x76, 0x63, 0x31 // avc1
      ]);

      constants.STSD_PREFIX = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
      0x00, 0x00, 0x00, 0x01 // entry_count
      ]);

      constants.STTS = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
      0x00, 0x00, 0x00, 0x00 // entry_count
      ]);

      constants.STSC = constants.STCO = constants.STTS;

      constants.STSZ = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
      0x00, 0x00, 0x00, 0x00, // sample_size
      0x00, 0x00, 0x00, 0x00 // sample_count
      ]);

      constants.HDLR_VIDEO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
      0x00, 0x00, 0x00, 0x00, // pre_defined
      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
      0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x69, 0x64, 0x65, 0x6F, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: VideoHandler
      ]);

      constants.HDLR_AUDIO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
      0x00, 0x00, 0x00, 0x00, // pre_defined
      0x73, 0x6F, 0x75, 0x6E, // handler_type: 'soun'
      0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x6F, 0x75, 0x6E, 0x64, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: SoundHandler
      ]);

      constants.DREF = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
      0x00, 0x00, 0x00, 0x01, // entry_count
      0x00, 0x00, 0x00, 0x0C, // entry_size
      0x75, 0x72, 0x6C, 0x20, // type 'url '
      0x00, 0x00, 0x00, 0x01 // version(0) + flags
      ]);

      // Sound media header
      constants.SMHD = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
      0x00, 0x00, 0x00, 0x00 // balance(2) + reserved(2)
      ]);

      // video media header
      constants.VMHD = new Uint8Array([0x00, 0x00, 0x00, 0x01, // version(0) + flags
      0x00, 0x00, // graphicsmode: 2 bytes
      0x00, 0x00, 0x00, 0x00, // opcolor: 3 * 2 bytes
      0x00, 0x00]);
    }

    // Generate a box

  }, {
    key: 'box',
    value: function box(type) {
      var size = 8;
      var result = null;
      var datas = Array.prototype.slice.call(arguments, 1);
      var arrayCount = datas.length;

      for (var i = 0; i < arrayCount; i++) {
        size += datas[i].byteLength;
      }

      result = new Uint8Array(size);
      result[0] = size >>> 24 & 0xFF; // size
      result[1] = size >>> 16 & 0xFF;
      result[2] = size >>> 8 & 0xFF;
      result[3] = size & 0xFF;

      result.set(type, 4); // type

      var offset = 8;
      for (var _i = 0; _i < arrayCount; _i++) {
        // data body
        result.set(datas[_i], offset);
        offset += datas[_i].byteLength;
      }

      return result;
    }

    // emit ftyp & moov

  }, {
    key: 'generateInitSegment',
    value: function generateInitSegment(meta) {
      var ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);
      var moov = MP4.moov(meta);

      var result = new Uint8Array(ftyp.byteLength + moov.byteLength);
      result.set(ftyp, 0);
      result.set(moov, ftyp.byteLength);
      return result;
    }

    // Movie metadata box

  }, {
    key: 'moov',
    value: function moov(meta) {
      var mvhd = MP4.mvhd(meta.timescale, meta.duration);
      var trak = MP4.trak(meta);
      var mvex = MP4.mvex(meta);
      return MP4.box(MP4.types.moov, mvhd, trak, mvex);
    }

    // Movie header box

  }, {
    key: 'mvhd',
    value: function mvhd(timescale, duration) {
      return MP4.box(MP4.types.mvhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
      0x00, 0x00, 0x00, 0x00, // creation_time
      0x00, 0x00, 0x00, 0x00, // modification_time
      timescale >>> 24 & 0xFF, // timescale: 4 bytes
      timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes
      duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0
      0x01, 0x00, 0x00, 0x00, // PreferredVolume(1.0, 2bytes) + reserved(2bytes)
      0x00, 0x00, 0x00, 0x00, // reserved: 4 + 4 bytes
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----
      0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----
      0xFF, 0xFF, 0xFF, 0xFF // next_track_ID
      ]));
    }

    // Track box

  }, {
    key: 'trak',
    value: function trak(meta) {
      return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));
    }

    // Track header box

  }, {
    key: 'tkhd',
    value: function tkhd(meta) {
      var trackId = meta.id,
          duration = meta.duration;
      var width = meta.presentWidth,
          height = meta.presentHeight;

      return MP4.box(MP4.types.tkhd, new Uint8Array([0x00, 0x00, 0x00, 0x07, // version(0) + flags
      0x00, 0x00, 0x00, 0x00, // creation_time
      0x00, 0x00, 0x00, 0x00, // modification_time
      trackId >>> 24 & 0xFF, // track_ID: 4 bytes
      trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes
      duration >>> 24 & 0xFF, // duration: 4 bytes
      duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)
      0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)
      0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----
      width >>> 8 & 0xFF, // width and height
      width & 0xFF, 0x00, 0x00, height >>> 8 & 0xFF, height & 0xFF, 0x00, 0x00]));
    }

    // Media Box

  }, {
    key: 'mdia',
    value: function mdia(meta) {
      return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));
    }

    // Media header box

  }, {
    key: 'mdhd',
    value: function mdhd(meta) {
      var timescale = meta.timescale;
      var duration = meta.duration;
      return MP4.box(MP4.types.mdhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
      0x00, 0x00, 0x00, 0x00, // creation_time
      0x00, 0x00, 0x00, 0x00, // modification_time
      timescale >>> 24 & 0xFF, // timescale: 4 bytes
      timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes
      duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x55, 0xC4, // language: und (undetermined)
      0x00, 0x00 // pre_defined = 0
      ]));
    }

    // Media handler reference box

  }, {
    key: 'hdlr',
    value: function hdlr(meta) {
      var data = null;
      if (meta.type === 'audio') {
        data = MP4.constants.HDLR_AUDIO;
      } else {
        data = MP4.constants.HDLR_VIDEO;
      }
      return MP4.box(MP4.types.hdlr, data);
    }

    // Media infomation box

  }, {
    key: 'minf',
    value: function minf(meta) {
      var xmhd = null;
      if (meta.type === 'audio') {
        xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);
      } else {
        xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);
      }
      return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));
    }

    // Data infomation box

  }, {
    key: 'dinf',
    value: function dinf() {
      var result = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, MP4.constants.DREF));
      return result;
    }

    // Sample table box

  }, {
    key: 'stbl',
    value: function stbl(meta) {
      var result = MP4.box(MP4.types.stbl, // type: stbl
      MP4.stsd(meta), // Sample Description Table
      MP4.box(MP4.types.stts, MP4.constants.STTS), // Time-To-Sample
      MP4.box(MP4.types.stsc, MP4.constants.STSC), // Sample-To-Chunk
      MP4.box(MP4.types.stsz, MP4.constants.STSZ), // Sample size
      MP4.box(MP4.types.stco, MP4.constants.STCO) // Chunk offset
      );
      return result;
    }

    // Sample description box

  }, {
    key: 'stsd',
    value: function stsd(meta) {
      if (meta.type === 'audio') {
        if (meta.codec === 'mp3') {
          return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));
        }
        // else: aac -> mp4a
        return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));
      } else {
        return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));
      }
    }
  }, {
    key: 'mp3',
    value: function mp3(meta) {
      var channelCount = meta.channelCount;
      var sampleRate = meta.audioSampleRate;

      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)
      0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)
      0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes
      0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)
      0x00, 0x10, // sampleSize(2)
      0x00, 0x00, 0x00, 0x00, // reserved(4)
      sampleRate >>> 8 & 0xFF, // Audio sample rate
      sampleRate & 0xFF, 0x00, 0x00]);

      return MP4.box(MP4.types['.mp3'], data);
    }
  }, {
    key: 'mp4a',
    value: function mp4a(meta) {
      var channelCount = meta.channelCount;
      var sampleRate = meta.audioSampleRate;

      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)
      0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)
      0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes
      0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)
      0x00, 0x10, // sampleSize(2)
      0x00, 0x00, 0x00, 0x00, // reserved(4)
      sampleRate >>> 8 & 0xFF, // Audio sample rate
      sampleRate & 0xFF, 0x00, 0x00]);

      return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));
    }
  }, {
    key: 'esds',
    value: function esds(meta) {
      var config = meta.config || [];
      var configSize = config.length;
      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version 0 + flags

      0x03, // descriptor_type
      0x17 + configSize, // length3
      0x00, 0x01, // es_id
      0x00, // stream_priority

      0x04, // descriptor_type
      0x0F + configSize, // length
      0x40, // codec: mpeg4_audio
      0x15, // stream_type: Audio
      0x00, 0x00, 0x00, // buffer_size
      0x00, 0x00, 0x00, 0x00, // maxBitrate
      0x00, 0x00, 0x00, 0x00, // avgBitrate

      0x05 // descriptor_type
      ].concat([configSize]).concat(config).concat([0x06, 0x01, 0x02 // GASpecificConfig
      ]));
      return MP4.box(MP4.types.esds, data);
    }
  }, {
    key: 'avc1',
    value: function avc1(meta) {
      var avcc = meta.avcc;
      var width = meta.codecWidth,
          height = meta.codecHeight;

      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)
      0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)
      0x00, 0x00, 0x00, 0x00, // pre_defined(2) + reserved(2)
      0x00, 0x00, 0x00, 0x00, // pre_defined: 3 * 4 bytes
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, width >>> 8 & 0xFF, // width: 2 bytes
      width & 0xFF, height >>> 8 & 0xFF, // height: 2 bytes
      height & 0xFF, 0x00, 0x48, 0x00, 0x00, // horizresolution: 4 bytes
      0x00, 0x48, 0x00, 0x00, // vertresolution: 4 bytes
      0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes
      0x00, 0x01, // frame_count
      0x0A, // strlen
      0x78, 0x71, 0x71, 0x2F, // compressorname: 32 bytes
      0x66, 0x6C, 0x76, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, // depth
      0xFF, 0xFF // pre_defined = -1
      ]);
      return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));
    }

    // Movie Extends box

  }, {
    key: 'mvex',
    value: function mvex(meta) {
      return MP4.box(MP4.types.mvex, MP4.trex(meta));
    }

    // Track Extends box

  }, {
    key: 'trex',
    value: function trex(meta) {
      var trackId = meta.id;
      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
      trackId >>> 24 & 0xFF, // track_ID
      trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x01, // default_sample_description_index
      0x00, 0x00, 0x00, 0x00, // default_sample_duration
      0x00, 0x00, 0x00, 0x00, // default_sample_size
      0x00, 0x01, 0x00, 0x01 // default_sample_flags
      ]);
      return MP4.box(MP4.types.trex, data);
    }

    // Movie fragment box

  }, {
    key: 'moof',
    value: function moof(track, baseMediaDecodeTime) {
      return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));
    }
  }, {
    key: 'mfhd',
    value: function mfhd(sequenceNumber) {
      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, sequenceNumber >>> 24 & 0xFF, // sequence_number: int32
      sequenceNumber >>> 16 & 0xFF, sequenceNumber >>> 8 & 0xFF, sequenceNumber & 0xFF]);
      return MP4.box(MP4.types.mfhd, data);
    }

    // Track fragment box

  }, {
    key: 'traf',
    value: function traf(track, baseMediaDecodeTime) {
      var trackId = track.id;

      // Track fragment header box
      var tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags
      trackId >>> 24 & 0xFF, // track_ID
      trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF]));
      // Track Fragment Decode Time
      var tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags
      baseMediaDecodeTime >>> 24 & 0xFF, // baseMediaDecodeTime: int32
      baseMediaDecodeTime >>> 16 & 0xFF, baseMediaDecodeTime >>> 8 & 0xFF, baseMediaDecodeTime & 0xFF]));
      var sdtp = MP4.sdtp(track);
      var trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);
      if (trackId === 1) {
        console.log(trun);
      }
      return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);
    }

    // Sample Dependency Type box

  }, {
    key: 'sdtp',
    value: function sdtp(track) {
      var samples = track.samples || [];
      var sampleCount = samples.length;
      var data = new Uint8Array(4 + sampleCount);
      // 0~4 bytes: version(0) & flags
      for (var i = 0; i < sampleCount; i++) {
        var flags = samples[i].flags;
        data[i + 4] = flags.isLeading << 6 | // is_leading: 2 (bit)
        flags.dependsOn << 4 | // sample_depends_on
        flags.isDependedOn << 2 | // sample_is_depended_on
        flags.hasRedundancy; // sample_has_redundancy
      }
      return MP4.box(MP4.types.sdtp, data);
    }

    // Track fragment run box

  }, {
    key: 'trun',
    value: function trun(track, offset) {
      var samples = track.samples || [];
      var sampleCount = samples.length;
      var dataSize = 12 + 16 * sampleCount;
      var data = new Uint8Array(dataSize);
      offset += 8 + dataSize;

      data.set([0x00, 0x00, 0x0F, 0x01, // version(0) & flags
      sampleCount >>> 24 & 0xFF, // sample_count
      sampleCount >>> 16 & 0xFF, sampleCount >>> 8 & 0xFF, sampleCount & 0xFF, offset >>> 24 & 0xFF, // data_offset
      offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF], 0);

      for (var i = 0; i < sampleCount; i++) {
        // console.log(samples[i].duration)
        var duration = samples[i].duration;
        var size = samples[i].size;
        var flags = samples[i].flags;
        var cts = samples[i].cts;
        data.set([duration >>> 24 & 0xFF, // sample_duration
        duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, size >>> 24 & 0xFF, // sample_size
        size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, flags.isLeading << 2 | flags.dependsOn, // sample_flags
        flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.isNonSync, 0x00, 0x00, // sample_degradation_priority
        cts >>> 24 & 0xFF, // sample_composition_time_offset
        cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF], 12 + 16 * i);
      }
      return MP4.box(MP4.types.trun, data);
    }
  }, {
    key: 'mdat',
    value: function mdat(data) {
      return MP4.box(MP4.types.mdat, data);
    }
  }]);

  return MP4;
}();

MP4.init();

exports.default = MP4;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/remux/mp4-remuxer.js":
/*!**************************************!*\
  !*** ./src/flv/remux/mp4-remuxer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _logger = __webpack_require__(/*! ../utils/logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _mp4Generator = __webpack_require__(/*! ./mp4-generator.js */ "./src/flv/remux/mp4-generator.js");

var _mp4Generator2 = _interopRequireDefault(_mp4Generator);

var _aacSilent = __webpack_require__(/*! ./aac-silent.js */ "./src/flv/remux/aac-silent.js");

var _aacSilent2 = _interopRequireDefault(_aacSilent);

var _browser = __webpack_require__(/*! ../utils/browser.js */ "./src/flv/utils/browser.js");

var _browser2 = _interopRequireDefault(_browser);

var _mediaSegmentInfo = __webpack_require__(/*! ../core/media-segment-info.js */ "./src/flv/core/media-segment-info.js");

var _exception = __webpack_require__(/*! ../utils/exception.js */ "./src/flv/utils/exception.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Fragmented mp4 remuxer
var MP4Remuxer = function () {
  function MP4Remuxer(config) {
    _classCallCheck(this, MP4Remuxer);

    this.TAG = 'MP4Remuxer';

    this._config = config;
    this._isLive = config.isLive === true;

    this._dtsBase = -1;
    this._dtsBaseInited = false;
    this._audioDtsBase = Infinity;
    this._videoDtsBase = Infinity;
    this._audioNextDts = undefined;
    this._videoNextDts = undefined;
    this._audioStashedLastSample = null;
    this._videoStashedLastSample = null;

    this._audioMeta = null;
    this._videoMeta = null;

    this._audioSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('audio');
    this._videoSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('video');

    this._onInitSegment = null;
    this._onMediaSegment = null;

    // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment
    // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412
    this._forceFirstIDR = !!(_browser2.default.chrome && (_browser2.default.version.major < 50 || _browser2.default.version.major === 50 && _browser2.default.version.build < 2661));

    // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking
    // Make audio beginDts equals with video beginDts, in order to fix seek freeze
    this._fillSilentAfterSeek = _browser2.default.msedge || _browser2.default.msie;

    // While only FireFox supports 'audio/mp4, codecs="mp3"', use 'audio/mpeg' for chrome, safari, ...
    this._mp3UseMpegAudio = !_browser2.default.firefox;

    this._fillAudioTimestampGap = this._config.fixAudioTimestampGap;
  }

  _createClass(MP4Remuxer, [{
    key: 'destroy',
    value: function destroy() {
      this._dtsBase = -1;
      this._dtsBaseInited = false;
      this._audioMeta = null;
      this._videoMeta = null;
      this._audioSegmentInfoList.clear();
      this._audioSegmentInfoList = null;
      this._videoSegmentInfoList.clear();
      this._videoSegmentInfoList = null;
      this._onInitSegment = null;
      this._onMediaSegment = null;
    }
  }, {
    key: 'bindDataSource',
    value: function bindDataSource(producer) {
      producer.onDataAvailable = this.remux.bind(this);
      producer.onTrackMetadata = this._onTrackMetadataReceived.bind(this);
      return this;
    }

    /* prototype: function onInitSegment(type: string, initSegment: ArrayBuffer): void
         InitSegment: {
             type: string,
             data: ArrayBuffer,
             codec: string,
             container: string
         }
      */

  }, {
    key: 'insertDiscontinuity',
    value: function insertDiscontinuity() {
      this._audioNextDts = this._videoNextDts = undefined;
    }
  }, {
    key: 'seek',
    value: function seek(originalDts) {
      this._audioStashedLastSample = null;
      this._videoStashedLastSample = null;
      this._videoSegmentInfoList.clear();
      this._audioSegmentInfoList.clear();
    }
  }, {
    key: 'remux',
    value: function remux(audioTrack, videoTrack) {
      if (!this._onMediaSegment) {
        throw new _exception.IllegalStateException('MP4Remuxer: onMediaSegment callback must be specificed!');
      }
      if (!this._dtsBaseInited) {
        this._calculateDtsBase(audioTrack, videoTrack);
      }
      this._remuxVideo(videoTrack);
      this._remuxAudio(audioTrack);
    }
  }, {
    key: '_onTrackMetadataReceived',
    value: function _onTrackMetadataReceived(type, metadata) {
      var metabox = null;

      var container = 'mp4';
      var codec = metadata.codec;

      if (type === 'audio') {
        this._audioMeta = metadata;
        if (metadata.codec === 'mp3' && this._mp3UseMpegAudio) {
          // 'audio/mpeg' for MP3 audio track
          container = 'mpeg';
          codec = '';
          metabox = new Uint8Array();
        } else {
          // 'audio/mp4, codecs="codec"'
          metabox = _mp4Generator2.default.generateInitSegment(metadata);
        }
      } else if (type === 'video') {
        this._videoMeta = metadata;
        metabox = _mp4Generator2.default.generateInitSegment(metadata);
      } else {
        return;
      }

      // dispatch metabox (Initialization Segment)
      if (!this._onInitSegment) {
        throw new _exception.IllegalStateException('MP4Remuxer: onInitSegment callback must be specified!');
      }
      this._onInitSegment(type, {
        type: type,
        data: metabox.buffer,
        codec: codec,
        container: type + '/' + container,
        mediaDuration: metadata.duration // in timescale 1000 (milliseconds)
      });
    }
  }, {
    key: '_calculateDtsBase',
    value: function _calculateDtsBase(audioTrack, videoTrack) {
      if (this._dtsBaseInited) {
        return;
      }

      if (audioTrack.samples && audioTrack.samples.length) {
        this._audioDtsBase = audioTrack.samples[0].dts;
      }
      if (videoTrack.samples && videoTrack.samples.length) {
        this._videoDtsBase = videoTrack.samples[0].dts;
      }

      this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);
      this._dtsBaseInited = true;
    }
  }, {
    key: 'flushStashedSamples',
    value: function flushStashedSamples() {
      var videoSample = this._videoStashedLastSample;
      var audioSample = this._audioStashedLastSample;

      var videoTrack = {
        type: 'video',
        id: 1,
        sequenceNumber: 0,
        samples: [],
        length: 0
      };

      if (videoSample != null) {
        videoTrack.samples.push(videoSample);
        videoTrack.length = videoSample.length;
      }

      var audioTrack = {
        type: 'audio',
        id: 2,
        sequenceNumber: 0,
        samples: [],
        length: 0
      };

      if (audioSample != null) {
        audioTrack.samples.push(audioSample);
        audioTrack.length = audioSample.length;
      }

      this._videoStashedLastSample = null;
      this._audioStashedLastSample = null;

      this._remuxVideo(videoTrack, true);
      this._remuxAudio(audioTrack, true);
    }
  }, {
    key: '_remuxAudio',
    value: function _remuxAudio(audioTrack, force) {
      if (this._audioMeta == null) {
        return;
      }

      var track = audioTrack;
      var samples = track.samples;
      var dtsCorrection = void 0;
      var firstDts = -1,
          lastDts = -1,
          lastPts = -1;
      var refSampleDuration = this._audioMeta.refSampleDuration;

      var mpegRawTrack = this._audioMeta.codec === 'mp3' && this._mp3UseMpegAudio;
      var firstSegmentAfterSeek = this._dtsBaseInited && this._audioNextDts === undefined;

      var insertPrefixSilentFrame = false;

      if (!samples || samples.length === 0) {
        return;
      }
      if (samples.length === 1 && !force) {
        // If [sample count in current batch] === 1 && (force != true)
        // Ignore and keep in demuxer's queue
        return;
      } // else if (force === true) do remux

      var offset = 0;
      var mdatbox = null;
      var mdatBytes = 0;

      // calculate initial mdat size
      if (mpegRawTrack) {
        // for raw mpeg buffer
        offset = 0;
        mdatBytes = track.length;
      } else {
        // for fmp4 mdat box
        offset = 8; // size + type
        mdatBytes = 8 + track.length;
      }

      var lastSample = null;

      // Pop the lastSample and waiting for stash
      if (samples.length > 1) {
        lastSample = samples.pop();
        mdatBytes -= lastSample.length;
      }

      // Insert [stashed lastSample in the previous batch] to the front
      if (this._audioStashedLastSample != null) {
        var sample = this._audioStashedLastSample;
        this._audioStashedLastSample = null;
        samples.unshift(sample);
        mdatBytes += sample.length;
      }

      // Stash the lastSample of current batch, waiting for next batch
      if (lastSample != null) {
        this._audioStashedLastSample = lastSample;
      }

      var firstSampleOriginalDts = samples[0].dts - this._dtsBase;

      // calculate dtsCorrection
      if (this._audioNextDts) {
        dtsCorrection = firstSampleOriginalDts - this._audioNextDts;
      } else {
        // this._audioNextDts == undefined
        if (this._audioSegmentInfoList.isEmpty()) {
          dtsCorrection = 0;
          if (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {
            if (this._audioMeta.originalCodec !== 'mp3') {
              insertPrefixSilentFrame = true;
            }
          }
        } else {
          var _lastSample = this._audioSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);
          if (_lastSample != null) {
            var distance = firstSampleOriginalDts - (_lastSample.originalDts + _lastSample.duration);
            if (distance <= 3) {
              distance = 0;
            }
            var expectedDts = _lastSample.dts + _lastSample.duration + distance;
            dtsCorrection = firstSampleOriginalDts - expectedDts;
          } else {
            // lastSample == null, cannot found
            dtsCorrection = 0;
          }
        }
      }

      if (insertPrefixSilentFrame) {
        // align audio segment beginDts to match with current video segment's beginDts
        var firstSampleDts = firstSampleOriginalDts - dtsCorrection;
        var videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(firstSampleOriginalDts);
        if (videoSegment != null && videoSegment.beginDts < firstSampleDts) {
          var silentUnit = _aacSilent2.default.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);
          if (silentUnit) {
            var dts = videoSegment.beginDts;
            var silentFrameDuration = firstSampleDts - videoSegment.beginDts;
            _logger2.default.v(this.TAG, 'InsertPrefixSilentAudio: dts: ' + dts + ', duration: ' + silentFrameDuration);
            samples.unshift({ unit: silentUnit, dts: dts, pts: dts });
            mdatBytes += silentUnit.byteLength;
          } // silentUnit == null: Cannot generate, skip
        } else {
          insertPrefixSilentFrame = false;
        }
      }

      var mp4Samples = [];

      // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples
      for (var i = 0; i < samples.length; i++) {
        var _sample = samples[i];
        var unit = _sample.unit;
        var originalDts = _sample.dts - this._dtsBase;
        var _dts = originalDts - dtsCorrection;

        if (firstDts === -1) {
          firstDts = _dts;
        }

        var sampleDuration = 0;

        if (i !== samples.length - 1) {
          var nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;
          sampleDuration = nextDts - _dts;
        } else {
          // the last sample
          if (lastSample != null) {
            // use stashed sample's dts to calculate sample duration
            var _nextDts = lastSample.dts - this._dtsBase - dtsCorrection;
            sampleDuration = _nextDts - _dts;
          } else if (mp4Samples.length >= 1) {
            // use second last sample duration
            sampleDuration = mp4Samples[mp4Samples.length - 1].duration;
          } else {
            // the only one sample, use reference sample duration
            sampleDuration = Math.floor(refSampleDuration);
          }
        }

        var needFillSilentFrames = false;
        var silentFrames = null;

        // Silent frame generation, if large timestamp gap detected && config.fixAudioTimestampGap
        if (sampleDuration > refSampleDuration * 1.5 && this._audioMeta.codec !== 'mp3' && this._fillAudioTimestampGap && !_browser2.default.safari) {
          // We need to insert silent frames to fill timestamp gap
          needFillSilentFrames = true;
          var delta = Math.abs(sampleDuration - refSampleDuration);
          var frameCount = Math.ceil(delta / refSampleDuration);
          var currentDts = _dts + refSampleDuration; // Notice: in float

          _logger2.default.w(this.TAG, 'Large audio timestamp gap detected, may cause AV sync to drift. ' + 'Silent frames will be generated to avoid unsync.\n' + ('dts: ' + (_dts + sampleDuration) + ' ms, expected: ' + (_dts + Math.round(refSampleDuration)) + ' ms, ') + ('delta: ' + Math.round(delta) + ' ms, generate: ' + frameCount + ' frames'));

          var _silentUnit = _aacSilent2.default.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);
          if (_silentUnit == null) {
            _logger2.default.w(this.TAG, 'Unable to generate silent frame for ' + (this._audioMeta.originalCodec + ' with ' + this._audioMeta.channelCount + ' channels, repeat last frame'));
            // Repeat last frame
            _silentUnit = unit;
          }
          silentFrames = [];

          for (var j = 0; j < frameCount; j++) {
            var intDts = Math.round(currentDts); // round to integer
            if (silentFrames.length > 0) {
              // Set previous frame sample duration
              var previousFrame = silentFrames[silentFrames.length - 1];
              previousFrame.duration = intDts - previousFrame.dts;
            }
            var frame = {
              dts: intDts,
              pts: intDts,
              cts: 0,
              unit: _silentUnit,
              size: _silentUnit.byteLength,
              duration: 0, // wait for next sample
              originalDts: originalDts,
              flags: {
                isLeading: 0,
                dependsOn: 1,
                isDependedOn: 0,
                hasRedundancy: 0
              }
            };
            silentFrames.push(frame);
            mdatBytes += unit.byteLength;
            currentDts += refSampleDuration;
          }

          // last frame: align end time to next frame dts
          var lastFrame = silentFrames[silentFrames.length - 1];
          lastFrame.duration = _dts + sampleDuration - lastFrame.dts;

          // silentFrames.forEach((frame) => {
          //     Log.w(this.TAG, `SilentAudio: dts: ${frame.dts}, duration: ${frame.duration}`);
          // });

          // Set correct sample duration for current frame
          sampleDuration = Math.round(refSampleDuration);
        }

        mp4Samples.push({
          dts: _dts,
          pts: _dts,
          cts: 0,
          unit: _sample.unit,
          size: _sample.unit.byteLength,
          duration: sampleDuration,
          originalDts: originalDts,
          flags: {
            isLeading: 0,
            dependsOn: 1,
            isDependedOn: 0,
            hasRedundancy: 0
          }
        });

        if (needFillSilentFrames) {
          // Silent frames should be inserted after wrong-duration frame
          mp4Samples.push.apply(mp4Samples, silentFrames);
        }
      }

      // allocate mdatbox
      if (mpegRawTrack) {
        // allocate for raw mpeg buffer
        mdatbox = new Uint8Array(mdatBytes);
      } else {
        // allocate for fmp4 mdat box
        mdatbox = new Uint8Array(mdatBytes);
        // size field
        mdatbox[0] = mdatBytes >>> 24 & 0xFF;
        mdatbox[1] = mdatBytes >>> 16 & 0xFF;
        mdatbox[2] = mdatBytes >>> 8 & 0xFF;
        mdatbox[3] = mdatBytes & 0xFF;
        // type field (fourCC)
        mdatbox.set(_mp4Generator2.default.types.mdat, 4);
      }

      // Write samples into mdatbox
      for (var _i = 0; _i < mp4Samples.length; _i++) {
        var _unit = mp4Samples[_i].unit;
        mdatbox.set(_unit, offset);
        offset += _unit.byteLength;
      }

      var latest = mp4Samples[mp4Samples.length - 1];
      lastDts = latest.dts + latest.duration;
      this._audioNextDts = lastDts;

      // fill media segment info & add to info list
      var info = new _mediaSegmentInfo.MediaSegmentInfo();
      info.beginDts = firstDts;
      info.endDts = lastDts;
      info.beginPts = firstDts;
      info.endPts = lastDts;
      info.originalBeginDts = mp4Samples[0].originalDts;
      info.originalEndDts = latest.originalDts + latest.duration;
      info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, false);
      info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, false);
      if (!this._isLive) {
        this._audioSegmentInfoList.append(info);
      }

      track.samples = mp4Samples;
      track.sequenceNumber++;

      var moofbox = null;

      if (mpegRawTrack) {
        // Generate empty buffer, because useless for raw mpeg
        moofbox = new Uint8Array();
      } else {
        // Generate moof for fmp4 segment
        moofbox = _mp4Generator2.default.moof(track, firstDts);
      }

      track.samples = [];
      track.length = 0;

      var segment = {
        type: 'audio',
        data: this._mergeBoxes(moofbox, mdatbox).buffer,
        sampleCount: mp4Samples.length,
        info: info
      };

      if (mpegRawTrack && firstSegmentAfterSeek) {
        // For MPEG audio stream in MSE, if seeking occurred, before appending new buffer
        // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.
        segment.timestampOffset = firstDts;
      }

      this._onMediaSegment('audio', segment);
    }
  }, {
    key: '_remuxVideo',
    value: function _remuxVideo(videoTrack, force) {
      if (this._videoMeta == null) {
        return;
      }

      var track = videoTrack;
      var samples = track.samples;
      var dtsCorrection = void 0;
      var firstDts = -1,
          lastDts = -1;
      var firstPts = -1,
          lastPts = -1;

      if (!samples || samples.length === 0) {
        return;
      }
      if (samples.length === 1 && !force) {
        // If [sample count in current batch] === 1 && (force != true)
        // Ignore and keep in demuxer's queue
        return;
      } // else if (force === true) do remux

      var offset = 8;
      var mdatbox = null;
      var mdatBytes = 8 + videoTrack.length;

      var lastSample = null;

      // Pop the lastSample and waiting for stash
      if (samples.length > 1) {
        lastSample = samples.pop();
        mdatBytes -= lastSample.length;
      }

      // Insert [stashed lastSample in the previous batch] to the front
      if (this._videoStashedLastSample != null) {
        var sample = this._videoStashedLastSample;
        this._videoStashedLastSample = null;
        samples.unshift(sample);
        mdatBytes += sample.length;
      }

      // Stash the lastSample of current batch, waiting for next batch
      if (lastSample != null) {
        this._videoStashedLastSample = lastSample;
      }

      var firstSampleOriginalDts = samples[0].dts - this._dtsBase;

      // calculate dtsCorrection
      if (this._videoNextDts) {
        dtsCorrection = firstSampleOriginalDts - this._videoNextDts;
      } else {
        // this._videoNextDts == undefined
        if (this._videoSegmentInfoList.isEmpty()) {
          dtsCorrection = 0;
        } else {
          var _lastSample2 = this._videoSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);
          if (_lastSample2 != null) {
            var distance = firstSampleOriginalDts - (_lastSample2.originalDts + _lastSample2.duration);
            if (distance <= 3) {
              distance = 0;
            }
            var expectedDts = _lastSample2.dts + _lastSample2.duration + distance;
            dtsCorrection = firstSampleOriginalDts - expectedDts;
          } else {
            // lastSample == null, cannot found
            dtsCorrection = 0;
          }
        }
      }
      var info = new _mediaSegmentInfo.MediaSegmentInfo();
      var mp4Samples = [];

      // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples
      for (var i = 0; i < samples.length; i++) {
        var _sample2 = samples[i];
        var originalDts = _sample2.dts - this._dtsBase;
        var isKeyframe = _sample2.isKeyframe;
        var dts = originalDts - dtsCorrection;
        var cts = _sample2.cts;
        var pts = dts + cts;

        if (firstDts === -1) {
          firstDts = dts;
          firstPts = pts;
        }

        var sampleDuration = 0;

        if (i !== samples.length - 1) {
          var nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;
          sampleDuration = nextDts - dts;
        } else {
          // the last sample
          if (lastSample != null) {
            // use stashed sample's dts to calculate sample duration
            var _nextDts2 = lastSample.dts - this._dtsBase - dtsCorrection;
            sampleDuration = _nextDts2 - dts;
          } else if (mp4Samples.length >= 1) {
            // use second last sample duration
            sampleDuration = mp4Samples[mp4Samples.length - 1].duration;
          } else {
            // the only one sample, use reference sample duration
            sampleDuration = Math.floor(this._videoMeta.refSampleDuration);
          }
        }

        if (isKeyframe) {
          var syncPoint = new _mediaSegmentInfo.SampleInfo(dts, pts, sampleDuration, _sample2.dts, true);
          syncPoint.fileposition = _sample2.fileposition;
          info.appendSyncPoint(syncPoint);
        }

        mp4Samples.push({
          dts: dts,
          pts: pts,
          cts: cts,
          units: _sample2.units,
          size: _sample2.length,
          isKeyframe: isKeyframe,
          duration: sampleDuration,
          originalDts: originalDts,
          flags: {
            isLeading: 0,
            dependsOn: isKeyframe ? 2 : 1,
            isDependedOn: isKeyframe ? 1 : 0,
            hasRedundancy: 0,
            isNonSync: isKeyframe ? 0 : 1
          }
        });
      }

      // allocate mdatbox
      mdatbox = new Uint8Array(mdatBytes);
      mdatbox[0] = mdatBytes >>> 24 & 0xFF;
      mdatbox[1] = mdatBytes >>> 16 & 0xFF;
      mdatbox[2] = mdatBytes >>> 8 & 0xFF;
      mdatbox[3] = mdatBytes & 0xFF;
      mdatbox.set(_mp4Generator2.default.types.mdat, 4);

      // Write samples into mdatbox
      for (var _i2 = 0; _i2 < mp4Samples.length; _i2++) {
        var units = mp4Samples[_i2].units;
        while (units.length) {
          var unit = units.shift();
          var data = unit.data;
          mdatbox.set(data, offset);
          offset += data.byteLength;
        }
      }

      var latest = mp4Samples[mp4Samples.length - 1];
      lastDts = latest.dts + latest.duration;
      lastPts = latest.pts + latest.duration;
      this._videoNextDts = lastDts;

      // fill media segment info & add to info list
      info.beginDts = firstDts;
      info.endDts = lastDts;
      info.beginPts = firstPts;
      info.endPts = lastPts;
      info.originalBeginDts = mp4Samples[0].originalDts;
      info.originalEndDts = latest.originalDts + latest.duration;
      info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, mp4Samples[0].isKeyframe);
      info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, latest.isKeyframe);
      if (!this._isLive) {
        this._videoSegmentInfoList.append(info);
      }

      track.samples = mp4Samples;
      track.sequenceNumber++;

      // workaround for chrome < 50: force first sample as a random access point
      // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412
      if (this._forceFirstIDR) {
        var flags = mp4Samples[0].flags;
        flags.dependsOn = 2;
        flags.isNonSync = 0;
      }

      var moofbox = _mp4Generator2.default.moof(track, firstDts);
      track.samples = [];
      track.length = 0;

      this._onMediaSegment('video', {
        type: 'video',
        data: this._mergeBoxes(moofbox, mdatbox).buffer,
        sampleCount: mp4Samples.length,
        info: info
      });
    }
  }, {
    key: '_mergeBoxes',
    value: function _mergeBoxes(moof, mdat) {
      var result = new Uint8Array(moof.byteLength + mdat.byteLength);
      result.set(moof, 0);
      result.set(mdat, moof.byteLength);
      return result;
    }
  }, {
    key: 'onInitSegment',
    get: function get() {
      return this._onInitSegment;
    },
    set: function set(callback) {
      this._onInitSegment = callback;
    }

    /* prototype: function onMediaSegment(type: string, mediaSegment: MediaSegment): void
         MediaSegment: {
             type: string,
             data: ArrayBuffer,
             sampleCount: int32
             info: MediaSegmentInfo
         }
      */

  }, {
    key: 'onMediaSegment',
    get: function get() {
      return this._onMediaSegment;
    },
    set: function set(callback) {
      this._onMediaSegment = callback;
    }
  }]);

  return MP4Remuxer;
}();

exports.default = MP4Remuxer;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/utils/browser.js":
/*!**********************************!*\
  !*** ./src/flv/utils/browser.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Browser = {};

function detect() {
    // modified from jquery-browser-plugin

    var ua = self.navigator.userAgent.toLowerCase();

    var match = /(edge)\/([\w.]+)/.exec(ua) || /(opr)[\/]([\w.]+)/.exec(ua) || /(chrome)[ \/]([\w.]+)/.exec(ua) || /(iemobile)[\/]([\w.]+)/.exec(ua) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf('trident') >= 0 && /(rv)(?::| )([\w.]+)/.exec(ua) || ua.indexOf('compatible') < 0 && /(firefox)[ \/]([\w.]+)/.exec(ua) || [];

    var platform_match = /(ipad)/.exec(ua) || /(ipod)/.exec(ua) || /(windows phone)/.exec(ua) || /(iphone)/.exec(ua) || /(kindle)/.exec(ua) || /(android)/.exec(ua) || /(windows)/.exec(ua) || /(mac)/.exec(ua) || /(linux)/.exec(ua) || /(cros)/.exec(ua) || [];

    var matched = {
        browser: match[5] || match[3] || match[1] || '',
        version: match[2] || match[4] || '0',
        majorVersion: match[4] || match[2] || '0',
        platform: platform_match[0] || ''
    };

    var browser = {};
    if (matched.browser) {
        browser[matched.browser] = true;

        var versionArray = matched.majorVersion.split('.');
        browser.version = {
            major: parseInt(matched.majorVersion, 10),
            string: matched.version
        };
        if (versionArray.length > 1) {
            browser.version.minor = parseInt(versionArray[1], 10);
        }
        if (versionArray.length > 2) {
            browser.version.build = parseInt(versionArray[2], 10);
        }
    }

    if (matched.platform) {
        browser[matched.platform] = true;
    }

    if (browser.chrome || browser.opr || browser.safari) {
        browser.webkit = true;
    }

    // MSIE. IE11 has 'rv' identifer
    if (browser.rv || browser.iemobile) {
        if (browser.rv) {
            delete browser.rv;
        }
        var msie = 'msie';
        matched.browser = msie;
        browser[msie] = true;
    }

    // Microsoft Edge
    if (browser.edge) {
        delete browser.edge;
        var msedge = 'msedge';
        matched.browser = msedge;
        browser[msedge] = true;
    }

    // Opera 15+
    if (browser.opr) {
        var opera = 'opera';
        matched.browser = opera;
        browser[opera] = true;
    }

    // Stock android browsers are marked as Safari
    if (browser.safari && browser.android) {
        var android = 'android';
        matched.browser = android;
        browser[android] = true;
    }

    browser.name = matched.browser;
    browser.platform = matched.platform;

    for (var key in Browser) {
        if (Browser.hasOwnProperty(key)) {
            delete Browser[key];
        }
    }
    Object.assign(Browser, browser);
}

detect();

exports.default = Browser;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/utils/exception.js":
/*!************************************!*\
  !*** ./src/flv/utils/exception.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var RuntimeException = exports.RuntimeException = function () {
    function RuntimeException(message) {
        _classCallCheck(this, RuntimeException);

        this._message = message;
    }

    _createClass(RuntimeException, [{
        key: 'toString',
        value: function toString() {
            return this.name + ': ' + this.message;
        }
    }, {
        key: 'name',
        get: function get() {
            return 'RuntimeException';
        }
    }, {
        key: 'message',
        get: function get() {
            return this._message;
        }
    }]);

    return RuntimeException;
}();

var IllegalStateException = exports.IllegalStateException = function (_RuntimeException) {
    _inherits(IllegalStateException, _RuntimeException);

    function IllegalStateException(message) {
        _classCallCheck(this, IllegalStateException);

        return _possibleConstructorReturn(this, (IllegalStateException.__proto__ || Object.getPrototypeOf(IllegalStateException)).call(this, message));
    }

    _createClass(IllegalStateException, [{
        key: 'name',
        get: function get() {
            return 'IllegalStateException';
        }
    }]);

    return IllegalStateException;
}(RuntimeException);

var InvalidArgumentException = exports.InvalidArgumentException = function (_RuntimeException2) {
    _inherits(InvalidArgumentException, _RuntimeException2);

    function InvalidArgumentException(message) {
        _classCallCheck(this, InvalidArgumentException);

        return _possibleConstructorReturn(this, (InvalidArgumentException.__proto__ || Object.getPrototypeOf(InvalidArgumentException)).call(this, message));
    }

    _createClass(InvalidArgumentException, [{
        key: 'name',
        get: function get() {
            return 'InvalidArgumentException';
        }
    }]);

    return InvalidArgumentException;
}(RuntimeException);

var NotImplementedException = exports.NotImplementedException = function (_RuntimeException3) {
    _inherits(NotImplementedException, _RuntimeException3);

    function NotImplementedException(message) {
        _classCallCheck(this, NotImplementedException);

        return _possibleConstructorReturn(this, (NotImplementedException.__proto__ || Object.getPrototypeOf(NotImplementedException)).call(this, message));
    }

    _createClass(NotImplementedException, [{
        key: 'name',
        get: function get() {
            return 'NotImplementedException';
        }
    }]);

    return NotImplementedException;
}(RuntimeException);

/***/ }),

/***/ "./src/flv/utils/logger.js":
/*!*********************************!*\
  !*** ./src/flv/utils/logger.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _events = __webpack_require__(/*! events */ "./node_modules/events/events.js");

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Log = function () {
  function Log() {
    _classCallCheck(this, Log);
  }

  _createClass(Log, null, [{
    key: 'e',
    value: function e(tag, msg) {
      if (!tag || Log.FORCE_GLOBAL_TAG) {
        tag = Log.GLOBAL_TAG;
      }

      var str = '[' + tag + '] > ' + msg;

      if (Log.ENABLE_CALLBACK) {
        Log.emitter.emit('log', 'error', str);
      }

      if (!Log.ENABLE_ERROR) {
        return;
      }

      if (console.error) {
        console.error(str);
      } else if (console.warn) {
        console.warn(str);
      } else {
        console.log(str);
      }
    }
  }, {
    key: 'i',
    value: function i(tag, msg) {
      if (!tag || Log.FORCE_GLOBAL_TAG) {
        tag = Log.GLOBAL_TAG;
      }

      var str = '[' + tag + '] > ' + msg;

      if (Log.ENABLE_CALLBACK) {
        Log.emitter.emit('log', 'info', str);
      }

      if (!Log.ENABLE_INFO) {
        return;
      }

      if (console.info) {
        console.info(str);
      } else {
        console.log(str);
      }
    }
  }, {
    key: 'w',
    value: function w(tag, msg) {
      if (!tag || Log.FORCE_GLOBAL_TAG) {
        tag = Log.GLOBAL_TAG;
      }

      var str = '[' + tag + '] > ' + msg;

      if (Log.ENABLE_CALLBACK) {
        Log.emitter.emit('log', 'warn', str);
      }

      if (!Log.ENABLE_WARN) {
        return;
      }

      if (console.warn) {
        console.warn(str);
      } else {
        console.log(str);
      }
    }
  }, {
    key: 'd',
    value: function d(tag, msg) {
      if (!tag || Log.FORCE_GLOBAL_TAG) {
        tag = Log.GLOBAL_TAG;
      }

      var str = '[' + tag + '] > ' + msg;

      if (Log.ENABLE_CALLBACK) {
        Log.emitter.emit('log', 'debug', str);
      }

      if (!Log.ENABLE_DEBUG) {
        return;
      }

      if (console.debug) {
        console.debug(str);
      } else {
        console.log(str);
      }
    }
  }, {
    key: 'v',
    value: function v(tag, msg) {
      if (!tag || Log.FORCE_GLOBAL_TAG) {
        tag = Log.GLOBAL_TAG;
      }

      var str = '[' + tag + '] > ' + msg;

      if (Log.ENABLE_CALLBACK) {
        Log.emitter.emit('log', 'verbose', str);
      }

      if (!Log.ENABLE_VERBOSE) {
        return;
      }

      console.log(str);
    }
  }]);

  return Log;
}();

Log.GLOBAL_TAG = 'flv.js';
Log.FORCE_GLOBAL_TAG = false;
Log.ENABLE_ERROR = true;
Log.ENABLE_INFO = true;
Log.ENABLE_WARN = true;
Log.ENABLE_DEBUG = true;
Log.ENABLE_VERBOSE = true;

Log.ENABLE_CALLBACK = false;

Log.emitter = new _events2.default();

exports.default = Log;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/utils/logging-control.js":
/*!******************************************!*\
  !*** ./src/flv/utils/logging-control.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (C) 2016 Bilibili. All Rights Reserved.

author zheng qian <xqq@xqq.im>

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _events = __webpack_require__(/*! events */ "./node_modules/events/events.js");

var _events2 = _interopRequireDefault(_events);

var _logger = __webpack_require__(/*! ./logger.js */ "./src/flv/utils/logger.js");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoggingControl = function () {
    function LoggingControl() {
        _classCallCheck(this, LoggingControl);
    }

    _createClass(LoggingControl, null, [{
        key: 'getConfig',
        value: function getConfig() {
            return {
                globalTag: _logger2.default.GLOBAL_TAG,
                forceGlobalTag: _logger2.default.FORCE_GLOBAL_TAG,
                enableVerbose: _logger2.default.ENABLE_VERBOSE,
                enableDebug: _logger2.default.ENABLE_DEBUG,
                enableInfo: _logger2.default.ENABLE_INFO,
                enableWarn: _logger2.default.ENABLE_WARN,
                enableError: _logger2.default.ENABLE_ERROR,
                enableCallback: _logger2.default.ENABLE_CALLBACK
            };
        }
    }, {
        key: 'applyConfig',
        value: function applyConfig(config) {
            _logger2.default.GLOBAL_TAG = config.globalTag;
            _logger2.default.FORCE_GLOBAL_TAG = config.forceGlobalTag;
            _logger2.default.ENABLE_VERBOSE = config.enableVerbose;
            _logger2.default.ENABLE_DEBUG = config.enableDebug;
            _logger2.default.ENABLE_INFO = config.enableInfo;
            _logger2.default.ENABLE_WARN = config.enableWarn;
            _logger2.default.ENABLE_ERROR = config.enableError;
            _logger2.default.ENABLE_CALLBACK = config.enableCallback;
        }
    }, {
        key: '_notifyChange',
        value: function _notifyChange() {
            var emitter = LoggingControl.emitter;

            if (emitter.listenerCount('change') > 0) {
                var config = LoggingControl.getConfig();
                emitter.emit('change', config);
            }
        }
    }, {
        key: 'registerListener',
        value: function registerListener(listener) {
            LoggingControl.emitter.addListener('change', listener);
        }
    }, {
        key: 'removeListener',
        value: function removeListener(listener) {
            LoggingControl.emitter.removeListener('change', listener);
        }
    }, {
        key: 'addLogListener',
        value: function addLogListener(listener) {
            _logger2.default.emitter.addListener('log', listener);
            if (_logger2.default.emitter.listenerCount('log') > 0) {
                _logger2.default.ENABLE_CALLBACK = true;
                LoggingControl._notifyChange();
            }
        }
    }, {
        key: 'removeLogListener',
        value: function removeLogListener(listener) {
            _logger2.default.emitter.removeListener('log', listener);
            if (_logger2.default.emitter.listenerCount('log') === 0) {
                _logger2.default.ENABLE_CALLBACK = false;
                LoggingControl._notifyChange();
            }
        }
    }, {
        key: 'forceGlobalTag',
        get: function get() {
            return _logger2.default.FORCE_GLOBAL_TAG;
        },
        set: function set(enable) {
            _logger2.default.FORCE_GLOBAL_TAG = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'globalTag',
        get: function get() {
            return _logger2.default.GLOBAL_TAG;
        },
        set: function set(tag) {
            _logger2.default.GLOBAL_TAG = tag;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableAll',
        get: function get() {
            return _logger2.default.ENABLE_VERBOSE && _logger2.default.ENABLE_DEBUG && _logger2.default.ENABLE_INFO && _logger2.default.ENABLE_WARN && _logger2.default.ENABLE_ERROR;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_VERBOSE = enable;
            _logger2.default.ENABLE_DEBUG = enable;
            _logger2.default.ENABLE_INFO = enable;
            _logger2.default.ENABLE_WARN = enable;
            _logger2.default.ENABLE_ERROR = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableDebug',
        get: function get() {
            return _logger2.default.ENABLE_DEBUG;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_DEBUG = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableVerbose',
        get: function get() {
            return _logger2.default.ENABLE_VERBOSE;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_VERBOSE = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableInfo',
        get: function get() {
            return _logger2.default.ENABLE_INFO;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_INFO = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableWarn',
        get: function get() {
            return _logger2.default.ENABLE_WARN;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_WARN = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableError',
        get: function get() {
            return _logger2.default.ENABLE_ERROR;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_ERROR = enable;
            LoggingControl._notifyChange();
        }
    }]);

    return LoggingControl;
}();

LoggingControl.emitter = new _events2.default();

exports.default = LoggingControl;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/utils/polyfill.js":
/*!***********************************!*\
  !*** ./src/flv/utils/polyfill.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Polyfill = function () {
    function Polyfill() {
        _classCallCheck(this, Polyfill);
    }

    _createClass(Polyfill, null, [{
        key: 'install',
        value: function install() {
            // ES6 Object.setPrototypeOf
            Object.setPrototypeOf = Object.setPrototypeOf || function (obj, proto) {
                obj.__proto__ = proto;
                return obj;
            };

            // ES6 Object.assign
            Object.assign = Object.assign || function (target) {
                if (target === undefined || target === null) {
                    throw new TypeError('Cannot convert undefined or null to object');
                }

                var output = Object(target);
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    if (source !== undefined && source !== null) {
                        for (var key in source) {
                            if (source.hasOwnProperty(key)) {
                                output[key] = source[key];
                            }
                        }
                    }
                }
                return output;
            };

            // ES6 Promise (missing support in IE11)
            if (typeof self.Promise !== 'function') {
                __webpack_require__(/*! es6-promise */ "./node_modules/es6-promise/dist/es6-promise.js").polyfill();
            }
        }
    }]);

    return Polyfill;
}();

Polyfill.install();

exports.default = Polyfill;
module.exports = exports['default'];

/***/ }),

/***/ "./src/flv/utils/utf8-conv.js":
/*!************************************!*\
  !*** ./src/flv/utils/utf8-conv.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/*
 * Copyright (C) 2016 Bilibili. All Rights Reserved.
 *
 * This file is derived from C++ project libWinTF8 (https://github.com/m13253/libWinTF8)
 * @author zheng qian <xqq@xqq.im>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function checkContinuation(uint8array, start, checkLength) {
    var array = uint8array;
    if (start + checkLength < array.length) {
        while (checkLength--) {
            if ((array[++start] & 0xC0) !== 0x80) return false;
        }
        return true;
    } else {
        return false;
    }
}

function decodeUTF8(uint8array) {
    var out = [];
    var input = uint8array;
    var i = 0;
    var length = uint8array.length;

    while (i < length) {
        if (input[i] < 0x80) {
            out.push(String.fromCharCode(input[i]));
            ++i;
            continue;
        } else if (input[i] < 0xC0) {
            // fallthrough
        } else if (input[i] < 0xE0) {
            if (checkContinuation(input, i, 1)) {
                var ucs4 = (input[i] & 0x1F) << 6 | input[i + 1] & 0x3F;
                if (ucs4 >= 0x80) {
                    out.push(String.fromCharCode(ucs4 & 0xFFFF));
                    i += 2;
                    continue;
                }
            }
        } else if (input[i] < 0xF0) {
            if (checkContinuation(input, i, 2)) {
                var _ucs = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;
                if (_ucs >= 0x800 && (_ucs & 0xF800) !== 0xD800) {
                    out.push(String.fromCharCode(_ucs & 0xFFFF));
                    i += 3;
                    continue;
                }
            }
        } else if (input[i] < 0xF8) {
            if (checkContinuation(input, i, 3)) {
                var _ucs2 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 | (input[i + 2] & 0x3F) << 6 | input[i + 3] & 0x3F;
                if (_ucs2 > 0x10000 && _ucs2 < 0x110000) {
                    _ucs2 -= 0x10000;
                    out.push(String.fromCharCode(_ucs2 >>> 10 | 0xD800));
                    out.push(String.fromCharCode(_ucs2 & 0x3FF | 0xDC00));
                    i += 4;
                    continue;
                }
            }
        }
        out.push(String.fromCharCode(0xFFFD));
        ++i;
    }

    return out.join('');
}

exports.default = decodeUTF8;
module.exports = exports['default'];

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _xgplayer = __webpack_require__(/*! xgplayer */ "xgplayer");

var _xgplayer2 = _interopRequireDefault(_xgplayer);

var _flv = __webpack_require__(/*! ./flv/flv */ "./src/flv/flv.js");

var _flv2 = _interopRequireDefault(_flv);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FlvJsPlayer = function (_Player) {
  _inherits(FlvJsPlayer, _Player);

  function FlvJsPlayer(options) {
    _classCallCheck(this, FlvJsPlayer);

    var _this = _possibleConstructorReturn(this, (FlvJsPlayer.__proto__ || Object.getPrototypeOf(FlvJsPlayer)).call(this, options));

    _this.flvOpts = { type: 'flv' };
    _xgplayer2.default.util.deepCopy(_this.flvOpts, options);
    var player = _this;
    player.once('complete', function () {
      player.__flv__ = _flv2.default.createPlayer(_this.flvOpts);
      player.createInstance(player.__flv__);
    });
    return _this;
  }

  _createClass(FlvJsPlayer, [{
    key: 'createInstance',
    value: function createInstance(flv) {
      var player = this;
      var util = _xgplayer2.default.util;
      flv.attachMediaElement(player.video);
      flv.load();
      flv.play();
      if (this.flvOpts.isLive) {
        util.addClass(player.root, 'xgplayer-is-live');
        var live = util.createDom('xg-live', '正在直播', {}, 'xgplayer-live');
        player.controls.appendChild(live);
      }
      flv.on(_flv2.default.Events.ERROR, function (e) {
        player.emit('error', new _xgplayer2.default.Errors('other', player.config.url));
      });

      player.once('destroy', function () {
        flv.destroy();
        player.__flv__ = null;
      });
    }
  }, {
    key: 'switchURL',
    value: function switchURL(url) {
      var player = this;
      var flvPlayer = player.__flv__;
      player.config.url = url;
      if (!player.config.isLive) {
        flvPlayer.onDefinitionChange(url, player.config.retryTimes);
      } else {
        var tempFlvPlayer = _flv2.default.createPlayer(player.flvOpts);
        flvPlayer.destroy();
        player.createInstance(tempFlvPlayer);
        player.__flv__ = tempFlvPlayer;
      }
    }
  }]);

  return FlvJsPlayer;
}(_xgplayer2.default);

FlvJsPlayer.isSupported = _flv2.default.isSupported;
exports.default = FlvJsPlayer;
module.exports = exports['default'];

/***/ }),

/***/ 0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./src/index.js */"./src/index.js");


/***/ }),

/***/ "xgplayer":
/*!***************************!*\
  !*** external "xgplayer" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_xgplayer__;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9lczYtcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vbm9kZV9tb2R1bGVzL3dlYndvcmtpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9jb25maWcuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9jb3JlL2ZlYXR1cmVzLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvY29yZS9tZWRpYS1pbmZvLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvY29yZS9tZWRpYS1zZWdtZW50LWluZm8uanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9jb3JlL21zZS1jb250cm9sbGVyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvY29yZS9tc2UtZXZlbnRzLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvY29yZS90cmFuc211eGVyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvY29yZS90cmFuc211eGluZy1jb250cm9sbGVyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvY29yZS90cmFuc211eGluZy1ldmVudHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9jb3JlL3RyYW5zbXV4aW5nLXdvcmtlci5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9zcmMvZmx2L2RlbXV4L2FtZi1wYXJzZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9kZW11eC9kZW11eC1lcnJvcnMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9kZW11eC9leHAtZ29sb21iLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvZGVtdXgvZmx2LWRlbXV4ZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9kZW11eC9zcHMtcGFyc2VyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvZmx2LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvaW8vZmV0Y2gtc3RyZWFtLWxvYWRlci5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9zcmMvZmx2L2lvL2lvLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9pby9sb2FkZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9pby9wYXJhbS1zZWVrLWhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9pby9yYW5nZS1zZWVrLWhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9pby9zcGVlZC1zYW1wbGVyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvaW8vd2Vic29ja2V0LWxvYWRlci5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9zcmMvZmx2L2lvL3hoci1tb3otY2h1bmtlZC1sb2FkZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9pby94aHItbXNzdHJlYW0tbG9hZGVyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvaW8veGhyLXJhbmdlLWxvYWRlci5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9zcmMvZmx2L3BsYXllci9mbHYtcGxheWVyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvcGxheWVyL25hdGl2ZS1wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9wbGF5ZXIvcGxheWVyLWVycm9ycy5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9zcmMvZmx2L3BsYXllci9wbGF5ZXItZXZlbnRzLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi5qcy8uL3NyYy9mbHYvcmVtdXgvYWFjLXNpbGVudC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9zcmMvZmx2L3JlbXV4L21wNC1nZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi9yZW11eC9tcDQtcmVtdXhlci5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9zcmMvZmx2L3V0aWxzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi91dGlscy9leGNlcHRpb24uanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi91dGlscy9sb2dnZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi91dGlscy9sb2dnaW5nLWNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzLy4vc3JjL2Zsdi91dGlscy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9zcmMvZmx2L3V0aWxzL3V0ZjgtY29udi5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYuanMvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2LmpzL2V4dGVybmFsIFwieGdwbGF5ZXJcIiJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsIm9iamVjdE9yRnVuY3Rpb24iLCJ4IiwidHlwZSIsImlzRnVuY3Rpb24iLCJfaXNBcnJheSIsIkFycmF5IiwiaXNBcnJheSIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImxlbiIsInZlcnR4TmV4dCIsImN1c3RvbVNjaGVkdWxlckZuIiwiYXNhcCIsImNhbGxiYWNrIiwiYXJnIiwicXVldWUiLCJmbHVzaCIsInNjaGVkdWxlRmx1c2giLCJzZXRTY2hlZHVsZXIiLCJzY2hlZHVsZUZuIiwic2V0QXNhcCIsImFzYXBGbiIsImJyb3dzZXJXaW5kb3ciLCJ3aW5kb3ciLCJ1bmRlZmluZWQiLCJicm93c2VyR2xvYmFsIiwiQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImlzTm9kZSIsInNlbGYiLCJwcm9jZXNzIiwiaXNXb3JrZXIiLCJVaW50OENsYW1wZWRBcnJheSIsImltcG9ydFNjcmlwdHMiLCJNZXNzYWdlQ2hhbm5lbCIsInVzZU5leHRUaWNrIiwibmV4dFRpY2siLCJ1c2VWZXJ0eFRpbWVyIiwidXNlU2V0VGltZW91dCIsInVzZU11dGF0aW9uT2JzZXJ2ZXIiLCJpdGVyYXRpb25zIiwib2JzZXJ2ZXIiLCJub2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwiZGF0YSIsInVzZU1lc3NhZ2VDaGFubmVsIiwiY2hhbm5lbCIsInBvcnQxIiwib25tZXNzYWdlIiwicG9ydDIiLCJwb3N0TWVzc2FnZSIsImdsb2JhbFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiaSIsImF0dGVtcHRWZXJ0eCIsInZlcnR4IiwiRnVuY3Rpb24iLCJyZXF1aXJlIiwicnVuT25Mb29wIiwicnVuT25Db250ZXh0IiwiZSIsInRoZW4iLCJvbkZ1bGZpbGxtZW50Iiwib25SZWplY3Rpb24iLCJwYXJlbnQiLCJjaGlsZCIsImNvbnN0cnVjdG9yIiwibm9vcCIsIlBST01JU0VfSUQiLCJtYWtlUHJvbWlzZSIsIl9zdGF0ZSIsImFyZ3VtZW50cyIsImludm9rZUNhbGxiYWNrIiwiX3Jlc3VsdCIsInN1YnNjcmliZSIsInJlc29sdmUkMSIsIm9iamVjdCIsIkNvbnN0cnVjdG9yIiwicHJvbWlzZSIsInJlc29sdmUiLCJNYXRoIiwicmFuZG9tIiwic3Vic3RyaW5nIiwiUEVORElORyIsIkZVTEZJTExFRCIsIlJFSkVDVEVEIiwiVFJZX0NBVENIX0VSUk9SIiwiZXJyb3IiLCJzZWxmRnVsZmlsbG1lbnQiLCJUeXBlRXJyb3IiLCJjYW5ub3RSZXR1cm5Pd24iLCJnZXRUaGVuIiwidHJ5VGhlbiIsInRoZW4kJDEiLCJ2YWx1ZSIsImZ1bGZpbGxtZW50SGFuZGxlciIsInJlamVjdGlvbkhhbmRsZXIiLCJoYW5kbGVGb3JlaWduVGhlbmFibGUiLCJ0aGVuYWJsZSIsInNlYWxlZCIsImZ1bGZpbGwiLCJyZWFzb24iLCJyZWplY3QiLCJfbGFiZWwiLCJoYW5kbGVPd25UaGVuYWJsZSIsImhhbmRsZU1heWJlVGhlbmFibGUiLCJtYXliZVRoZW5hYmxlIiwicHVibGlzaFJlamVjdGlvbiIsIl9vbmVycm9yIiwicHVibGlzaCIsIl9zdWJzY3JpYmVycyIsImxlbmd0aCIsInN1YnNjcmliZXJzIiwic2V0dGxlZCIsImRldGFpbCIsInRyeUNhdGNoIiwiaGFzQ2FsbGJhY2siLCJzdWNjZWVkZWQiLCJmYWlsZWQiLCJpbml0aWFsaXplUHJvbWlzZSIsInJlc29sdmVyIiwicmVzb2x2ZVByb21pc2UiLCJyZWplY3RQcm9taXNlIiwiaWQiLCJuZXh0SWQiLCJ2YWxpZGF0aW9uRXJyb3IiLCJFcnJvciIsIkVudW1lcmF0b3IiLCJpbnB1dCIsIl9pbnN0YW5jZUNvbnN0cnVjdG9yIiwiX3JlbWFpbmluZyIsIl9lbnVtZXJhdGUiLCJfZWFjaEVudHJ5IiwiZW50cnkiLCJjIiwicmVzb2x2ZSQkMSIsIl90aGVuIiwiX3NldHRsZWRBdCIsIlByb21pc2UkMSIsIl93aWxsU2V0dGxlQXQiLCJzdGF0ZSIsImVudW1lcmF0b3IiLCJhbGwiLCJlbnRyaWVzIiwicmFjZSIsIl8iLCJyZWplY3QkMSIsIm5lZWRzUmVzb2x2ZXIiLCJuZWVkc05ldyIsIlByb21pc2UiLCJjYXRjaCIsIl9jYXRjaCIsImZpbmFsbHkiLCJfZmluYWxseSIsIl9zZXRTY2hlZHVsZXIiLCJfc2V0QXNhcCIsIl9hc2FwIiwicG9seWZpbGwiLCJsb2NhbCIsIlAiLCJwcm9taXNlVG9TdHJpbmciLCJjYXN0IiwiRXZlbnRFbWl0dGVyIiwiX2V2ZW50cyIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwic2V0TWF4TGlzdGVuZXJzIiwibiIsImlzTnVtYmVyIiwiaXNOYU4iLCJlbWl0IiwiZXIiLCJoYW5kbGVyIiwiYXJncyIsImxpc3RlbmVycyIsImlzT2JqZWN0IiwiZXJyIiwiY29udGV4dCIsImlzVW5kZWZpbmVkIiwic2xpY2UiLCJhcHBseSIsImFkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJtIiwibmV3TGlzdGVuZXIiLCJwdXNoIiwid2FybmVkIiwiY29uc29sZSIsInRyYWNlIiwib24iLCJvbmNlIiwiZmlyZWQiLCJnIiwicmVtb3ZlTGlzdGVuZXIiLCJsaXN0IiwicG9zaXRpb24iLCJzcGxpY2UiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJrZXkiLCJyZXQiLCJsaXN0ZW5lckNvdW50IiwiZXZsaXN0ZW5lciIsImVtaXR0ZXIiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwicnVuQ2xlYXJUaW1lb3V0IiwibWFya2VyIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiY29uY2F0IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJJdGVtIiwiYXJyYXkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib2ZmIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsIm5hbWUiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImV2YWwiLCJidW5kbGVGbiIsInNvdXJjZXMiLCJjYWNoZSIsInN0cmluZ2lmeSIsIkpTT04iLCJmbiIsIm9wdGlvbnMiLCJ3a2V5IiwiY2FjaGVLZXlzIiwia2V5cyIsImwiLCJleHAiLCJkZWZhdWx0IiwiZmxvb3IiLCJwb3ciLCJ3Y2FjaGUiLCJza2V5Iiwic2NhY2hlIiwid29ya2VyU291cmNlcyIsInJlc29sdmVTb3VyY2VzIiwiZGVwUGF0aCIsImRlcEtleSIsInNyYyIsIm1hcCIsImpvaW4iLCJVUkwiLCJ3ZWJraXRVUkwiLCJtb3pVUkwiLCJtc1VSTCIsImJsb2IiLCJCbG9iIiwiYmFyZSIsIndvcmtlclVybCIsImNyZWF0ZU9iamVjdFVSTCIsIndvcmtlciIsIldvcmtlciIsIm9iamVjdFVSTCIsImNyZWF0ZURlZmF1bHRDb25maWciLCJkZWZhdWx0Q29uZmlnIiwiZW5hYmxlV29ya2VyIiwiZW5hYmxlU3Rhc2hCdWZmZXIiLCJzdGFzaEluaXRpYWxTaXplIiwiaXNMaXZlIiwibGF6eUxvYWQiLCJsYXp5TG9hZE1heER1cmF0aW9uIiwibGF6eUxvYWRSZWNvdmVyRHVyYXRpb24iLCJkZWZlckxvYWRBZnRlclNvdXJjZU9wZW4iLCJhdXRvQ2xlYW51cE1heEJhY2t3YXJkRHVyYXRpb24iLCJhdXRvQ2xlYW51cE1pbkJhY2t3YXJkRHVyYXRpb24iLCJzdGF0aXN0aWNzSW5mb1JlcG9ydEludGVydmFsIiwiZml4QXVkaW9UaW1lc3RhbXBHYXAiLCJhY2N1cmF0ZVNlZWsiLCJzZWVrVHlwZSIsInNlZWtQYXJhbVN0YXJ0Iiwic2Vla1BhcmFtRW5kIiwicmFuZ2VMb2FkWmVyb1N0YXJ0IiwiY3VzdG9tU2Vla0hhbmRsZXIiLCJyZXVzZVJlZGlyZWN0ZWRVUkwiLCJhc3NpZ24iLCJGZWF0dXJlcyIsIk1lZGlhU291cmNlIiwiaXNUeXBlU3VwcG9ydGVkIiwiaW9jdGwiLCJJT0NvbnRyb2xsZXIiLCJsb2FkZXJUeXBlIiwiZGVzdHJveSIsIm1pbWVUeXBlIiwidmlkZW9FbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImNhblBsYXkiLCJjYW5QbGF5VHlwZSIsImZlYXR1cmVzIiwibXNlRmx2UGxheWJhY2siLCJtc2VMaXZlRmx2UGxheWJhY2siLCJuZXR3b3JrU3RyZWFtSU8iLCJuZXR3b3JrTG9hZGVyTmFtZSIsIm5hdGl2ZU1QNEgyNjRQbGF5YmFjayIsIm5hdGl2ZVdlYm1WUDhQbGF5YmFjayIsIm5hdGl2ZVdlYm1WUDlQbGF5YmFjayIsInN1cHBvcnRNU0VIMjY0UGxheWJhY2siLCJzdXBwb3J0TmV0d29ya1N0cmVhbUlPIiwiZ2V0TmV0d29ya0xvYWRlclR5cGVOYW1lIiwic3VwcG9ydE5hdGl2ZU1lZGlhUGxheWJhY2siLCJNZWRpYUluZm8iLCJkdXJhdGlvbiIsImhhc0F1ZGlvIiwiaGFzVmlkZW8iLCJhdWRpb0NvZGVjIiwidmlkZW9Db2RlYyIsImF1ZGlvRGF0YVJhdGUiLCJ2aWRlb0RhdGFSYXRlIiwiYXVkaW9TYW1wbGVSYXRlIiwiYXVkaW9DaGFubmVsQ291bnQiLCJ3aWR0aCIsImhlaWdodCIsImZwcyIsInByb2ZpbGUiLCJsZXZlbCIsInJlZkZyYW1lcyIsImNocm9tYUZvcm1hdCIsInNhck51bSIsInNhckRlbiIsIm1ldGFkYXRhIiwic2VnbWVudHMiLCJzZWdtZW50Q291bnQiLCJoYXNLZXlmcmFtZXNJbmRleCIsImtleWZyYW1lc0luZGV4IiwiYXVkaW9JbmZvQ29tcGxldGUiLCJ2aWRlb0luZm9Db21wbGV0ZSIsIm1pbGxpc2Vjb25kcyIsInRhYmxlIiwia2V5ZnJhbWVJZHgiLCJfc2VhcmNoIiwidGltZXMiLCJpbmRleCIsImZpbGVwb3NpdGlvbiIsImZpbGVwb3NpdGlvbnMiLCJpZHgiLCJsYXN0IiwibWlkIiwibGJvdW5kIiwidWJvdW5kIiwiU2FtcGxlSW5mbyIsImR0cyIsInB0cyIsIm9yaWdpbmFsRHRzIiwiaXNTeW5jIiwiaXNTeW5jUG9pbnQiLCJNZWRpYVNlZ21lbnRJbmZvIiwiYmVnaW5EdHMiLCJlbmREdHMiLCJiZWdpblB0cyIsImVuZFB0cyIsIm9yaWdpbmFsQmVnaW5EdHMiLCJvcmlnaW5hbEVuZER0cyIsInN5bmNQb2ludHMiLCJmaXJzdFNhbXBsZSIsImxhc3RTYW1wbGUiLCJzYW1wbGVJbmZvIiwiSURSU2FtcGxlTGlzdCIsIl9saXN0IiwiY2xlYXIiLCJNZWRpYVNlZ21lbnRJbmZvTGlzdCIsIl90eXBlIiwiX2xhc3RBcHBlbmRMb2NhdGlvbiIsIl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZSIsIm1lZGlhU2VnbWVudEluZm8iLCJtc2kiLCJsYXN0QXBwZW5kSWR4IiwiaW5zZXJ0SWR4Iiwic2VnbWVudCIsImdldExhc3RTZWdtZW50QmVmb3JlIiwic2VnbWVudElkeCIsIk1TRUNvbnRyb2xsZXIiLCJjb25maWciLCJUQUciLCJfY29uZmlnIiwiX2VtaXR0ZXIiLCJhdXRvQ2xlYW51cFNvdXJjZUJ1ZmZlciIsImRlZmluaXRpb25DaGFuZ2UiLCJvblNvdXJjZU9wZW4iLCJfb25Tb3VyY2VPcGVuIiwiYmluZCIsIm9uU291cmNlRW5kZWQiLCJfb25Tb3VyY2VFbmRlZCIsIm9uU291cmNlQ2xvc2UiLCJfb25Tb3VyY2VDbG9zZSIsIm9uU291cmNlQnVmZmVyRXJyb3IiLCJfb25Tb3VyY2VCdWZmZXJFcnJvciIsIm9uU291cmNlQnVmZmVyVXBkYXRlRW5kIiwiX29uU291cmNlQnVmZmVyVXBkYXRlRW5kIiwiX21lZGlhU291cmNlIiwiX21lZGlhU291cmNlT2JqZWN0VVJMIiwiX21lZGlhRWxlbWVudCIsIl9pc0J1ZmZlckZ1bGwiLCJfaGFzUGVuZGluZ0VvcyIsIl9yZXF1aXJlU2V0TWVkaWFEdXJhdGlvbiIsIl9wZW5kaW5nTWVkaWFEdXJhdGlvbiIsIl9wZW5kaW5nU291cmNlQnVmZmVySW5pdCIsIl9taW1lVHlwZXMiLCJ2aWRlbyIsImF1ZGlvIiwiX3NvdXJjZUJ1ZmZlcnMiLCJfbGFzdEluaXRTZWdtZW50cyIsIl9wZW5kaW5nU2VnbWVudHMiLCJfcGVuZGluZ1JlbW92ZVJhbmdlcyIsIl9pZHJMaXN0IiwiZGV0YWNoTWVkaWFFbGVtZW50IiwiZXZlbnQiLCJtZWRpYUVsZW1lbnQiLCJJbGxlZ2FsU3RhdGVFeGNlcHRpb24iLCJtcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwcyIsInNiIiwicmVhZHlTdGF0ZSIsInJlbW92ZVNvdXJjZUJ1ZmZlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlbmRPZlN0cmVhbSIsIkxvZyIsIm1lc3NhZ2UiLCJyZW1vdmVBdHRyaWJ1dGUiLCJyZXZva2VPYmplY3RVUkwiLCJpbml0U2VnbWVudCIsImlzIiwiY29udGFpbmVyIiwiY29kZWMiLCJhZGRTb3VyY2VCdWZmZXIiLCJkZWZlcnJlZCIsImxvZyIsImZpcnN0SW5pdFNlZ21lbnQiLCJ2IiwiTVNFRXZlbnRzIiwiRVJST1IiLCJjb2RlIiwibXNnIiwidXBkYXRpbmciLCJfZG9BcHBlbmRTZWdtZW50cyIsIkJyb3dzZXIiLCJzYWZhcmkiLCJtZWRpYUR1cmF0aW9uIiwiX3VwZGF0ZU1lZGlhU291cmNlRHVyYXRpb24iLCJtZWRpYVNlZ21lbnQiLCJfbmVlZENsZWFudXBTb3VyY2VCdWZmZXIiLCJfZG9DbGVhbnVwU291cmNlQnVmZmVyIiwiX2hhc1BlbmRpbmdSZW1vdmVSYW5nZXMiLCJzZWNvbmRzIiwiYWJvcnQiLCJidWZmZXJlZCIsInN0YXJ0IiwiZW5kIiwiX2RvUmVtb3ZlUmFuZ2VzIiwibGFzdEluaXRTZWdtZW50IiwiX2hhc1BlbmRpbmdTZWdtZW50cyIsImdldExhc3RTeW5jUG9pbnRCZWZvcmVEdHMiLCJjdXJyZW50VGltZSIsImRvUmVtb3ZlIiwicmVtb3ZlRW5kIiwiY3VycmVudCIsInRhcmdldCIsInJhbmdlcyIsInJhbmdlIiwic2hpZnQiLCJyZW1vdmUiLCJwZW5kaW5nU2VnbWVudHMiLCJ0aW1lc3RhbXBPZmZzZXQiLCJjdXJyZW50T2Zmc2V0IiwidGFyZ2V0T2Zmc2V0IiwiZGVsdGEiLCJhYnMiLCJieXRlTGVuZ3RoIiwiYXBwZW5kQnVmZmVyIiwiaGFzT3duUHJvcGVydHkiLCJhcHBlbmRBcnJheSIsImluZm8iLCJ1bnNoaWZ0IiwiQlVGRkVSX0ZVTEwiLCJwZW5kaW5ncyIsImFwcGVuZEluaXRTZWdtZW50IiwiU09VUkNFX09QRU4iLCJwcnIiLCJVUERBVEVfRU5EIiwiVHJhbnNtdXhlciIsIm1lZGlhRGF0YVNvdXJjZSIsImlzRGVmaW5pdGlvbkNoYW5naW5nIiwid29yayIsIl93b3JrZXIiLCJUcmFuc211eGluZ1dvcmtlciIsIl93b3JrZXJEZXN0cm95aW5nIiwiX29uV29ya2VyTWVzc2FnZSIsImNtZCIsInBhcmFtIiwib25Mb2dnaW5nQ29uZmlnQ2hhbmdlZCIsIl9vbkxvZ2dpbmdDb25maWdDaGFuZ2VkIiwiTG9nZ2luZ0NvbnRyb2wiLCJyZWdpc3Rlckxpc3RlbmVyIiwiZ2V0Q29uZmlnIiwiX2NvbnRyb2xsZXIiLCJUcmFuc211eGluZ0NvbnRyb2xsZXIiLCJvbk1ldGFEYXRhIiwiY3RsIiwiVHJhbnNtdXhpbmdFdmVudHMiLCJJT19FUlJPUiIsIl9vbklPRXJyb3IiLCJERU1VWF9FUlJPUiIsIl9vbkRlbXV4RXJyb3IiLCJJTklUX1NFR01FTlQiLCJfb25Jbml0U2VnbWVudCIsIk1FRElBX1NFR01FTlQiLCJfb25NZWRpYVNlZ21lbnQiLCJMT0FESU5HX0NPTVBMRVRFIiwiX29uTG9hZGluZ0NvbXBsZXRlIiwiUkVDT1ZFUkVEX0VBUkxZX0VPRiIsIl9vblJlY292ZXJlZEVhcmx5RW9mIiwiTUVESUFfSU5GTyIsIl9vbk1lZGlhSW5mbyIsIlNUQVRJU1RJQ1NfSU5GTyIsIl9vblN0YXRpc3RpY3NJbmZvIiwiUkVDT01NRU5EX1NFRUtQT0lOVCIsIl9vblJlY29tbWVuZFNlZWtwb2ludCIsInN0b3AiLCJzZWVrIiwicGF1c2UiLCJyZXN1bWUiLCJtZWRpYUluZm8iLCJzdGF0aXN0aWNzSW5mbyIsInRlcm1pbmF0ZSIsInNldFByb3RvdHlwZU9mIiwibG9nY2F0IiwiZmlsZXNpemUiLCJ1cmwiLCJjb3JzIiwid2l0aENyZWRlbnRpYWxzIiwiX21lZGlhRGF0YVNvdXJjZSIsIl9jdXJyZW50U2VnbWVudEluZGV4IiwidG90YWxEdXJhdGlvbiIsImZvckVhY2giLCJ0aW1lc3RhbXBCYXNlIiwicmVmZXJyZXJQb2xpY3kiLCJfbWVkaWFJbmZvIiwiX2RlbXV4ZXIiLCJfcmVtdXhlciIsIl9pb2N0bCIsIl9wZW5kaW5nU2Vla1RpbWUiLCJfcGVuZGluZ1Jlc29sdmVTZWVrUG9pbnQiLCJfc3RhdGlzdGljc1JlcG9ydGVyIiwiX2Rpc2FibGVTdGF0aXN0aWNzUmVwb3J0ZXIiLCJfbG9hZFNlZ21lbnQiLCJfZW5hYmxlU3RhdGlzdGljc1JlcG9ydGVyIiwic2VnbWVudEluZGV4Iiwib3B0aW9uYWxGcm9tIiwiZGF0YVNvdXJjZSIsIm9uRXJyb3IiLCJfb25JT0V4Y2VwdGlvbiIsIm9uU2Vla2VkIiwiX29uSU9TZWVrZWQiLCJvbkNvbXBsZXRlIiwiX29uSU9Db21wbGV0ZSIsIm9uUmVkaXJlY3QiLCJfb25JT1JlZGlyZWN0Iiwib25SZWNvdmVyZWRFYXJseUVvZiIsIl9vbklPUmVjb3ZlcmVkRWFybHlFb2YiLCJiaW5kRGF0YVNvdXJjZSIsIm9uRGF0YUFycml2YWwiLCJfb25Jbml0Q2h1bmtBcnJpdmFsIiwib3BlbiIsIl9pbnRlcm5hbEFib3J0IiwiaXNXb3JraW5nIiwiaXNQYXVzZWQiLCJpc1NlZWthYmxlIiwidGFyZ2V0U2VnbWVudEluZGV4IiwiX3NlYXJjaFNlZ21lbnRJbmRleENvbnRhaW5zIiwic2VnbWVudEluZm8iLCJrZXlmcmFtZSIsImdldE5lYXJlc3RLZXlmcmFtZSIsInRhcmdldFNlZ21lbnRJbmZvIiwiaW5zZXJ0RGlzY29udGludWl0eSIsInJlc2V0TWVkaWFJbmZvIiwiX3JlcG9ydFNlZ21lbnRNZWRpYUluZm8iLCJieXRlU3RhcnQiLCJwcm9iZURhdGEiLCJjb25zdW1lZCIsInBhcnNlQ2h1bmtzIiwiRkxWRGVtdXhlciIsInByb2JlIiwibWF0Y2giLCJNUDRSZW11eGVyIiwibWRzIiwib3ZlcnJpZGVkRHVyYXRpb24iLCJvdmVycmlkZWRIYXNBdWRpbyIsIm92ZXJyaWRlZEhhc1ZpZGVvIiwiX29uRGVtdXhFeGNlcHRpb24iLCJvbk1lZGlhSW5mbyIsIm9uSW5pdFNlZ21lbnQiLCJfb25SZW11eGVySW5pdFNlZ21lbnRBcnJpdmFsIiwib25NZWRpYVNlZ21lbnQiLCJfb25SZW11eGVyTWVkaWFTZWdtZW50QXJyaXZhbCIsIkRlbXV4RXJyb3JzIiwiRk9STUFUX1VOU1VQUE9SVEVEIiwiZXh0cmFEYXRhIiwibmV4dFNlZ21lbnRJbmRleCIsImZsdXNoU3Rhc2hlZFNhbXBsZXMiLCJyZWRpcmVjdGVkVVJMIiwic2Vla3BvaW50Iiwic2V0SW50ZXJ2YWwiLCJfcmVwb3J0U3RhdGlzdGljc0luZm8iLCJjbGVhckludGVydmFsIiwiZXhwb3J0SW5mbyIsImN1cnJlbnRVUkwiLCJoYXNSZWRpcmVjdCIsImN1cnJlbnRSZWRpcmVjdGVkVVJMIiwic3BlZWQiLCJjdXJyZW50U3BlZWQiLCJjdXJyZW50U2VnbWVudEluZGV4IiwidG90YWxTZWdtZW50Q291bnQiLCJjb250cm9sbGVyIiwibG9nY2F0TGlzdGVuZXIiLCJvbkxvZ2NhdENhbGxiYWNrIiwiUG9seWZpbGwiLCJpbnN0YWxsIiwib25JT0Vycm9yIiwib25EZW11eEVycm9yIiwib25Mb2FkaW5nQ29tcGxldGUiLCJvblN0YXRpc3RpY3NJbmZvIiwib25SZWNvbW1lbmRTZWVrcG9pbnQiLCJhcHBseUNvbmZpZyIsImVuYWJsZUNhbGxiYWNrIiwiYWRkTG9nTGlzdGVuZXIiLCJyZW1vdmVMb2dMaXN0ZW5lciIsIm9iaiIsInN0YXRJbmZvIiwic3RyIiwibGUiLCJidWYiLCJBcnJheUJ1ZmZlciIsIkRhdGFWaWV3Iiwic2V0SW50MTYiLCJJbnQxNkFycmF5IiwiQU1GIiwiYXJyYXlCdWZmZXIiLCJkYXRhT2Zmc2V0IiwiZGF0YVNpemUiLCJwYXJzZVZhbHVlIiwic2l6ZSIsInBhcnNlU3RyaW5nIiwiaXNPYmplY3RFbmQiLCJvYmplY3RFbmQiLCJwYXJzZU9iamVjdCIsImdldFVpbnQxNiIsIlVpbnQ4QXJyYXkiLCJnZXRVaW50MzIiLCJ0aW1lc3RhbXAiLCJnZXRGbG9hdDY0IiwibG9jYWxUaW1lT2Zmc2V0IiwiZ2V0SW50MTYiLCJEYXRlIiwib2Zmc2V0IiwiZ2V0VWludDgiLCJiIiwiYW1mc3RyIiwidGVybWluYWwiLCJhbWZvYmoiLCJhbWZ2YXIiLCJwYXJzZVZhcmlhYmxlIiwic3RyaWN0QXJyYXlMZW5ndGgiLCJ2YWwiLCJkYXRlIiwicGFyc2VEYXRlIiwiYW1mTG9uZ1N0ciIsInciLCJPSyIsIkZPUk1BVF9FUlJPUiIsIkNPREVDX1VOU1VQUE9SVEVEIiwiRXhwR29sb21iIiwidWludDhhcnJheSIsIl9idWZmZXIiLCJfYnVmZmVyX2luZGV4IiwiX3RvdGFsX2J5dGVzIiwiX3RvdGFsX2JpdHMiLCJfY3VycmVudF93b3JkIiwiX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQiLCJidWZmZXJfYnl0ZXNfbGVmdCIsImJ5dGVzX3JlYWQiLCJtaW4iLCJ3b3JkIiwic2V0Iiwic3ViYXJyYXkiLCJidWZmZXIiLCJiaXRzIiwiSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uIiwicmVzdWx0IiwiYml0c19uZWVkX2xlZnQiLCJfZmlsbEN1cnJlbnRXb3JkIiwiYml0c19yZWFkX25leHQiLCJyZXN1bHQyIiwicmVhZEJpdHMiLCJ6ZXJvX2NvdW50IiwiX3NraXBMZWFkaW5nWmVybyIsImxlYWRpbmdfemVyb3MiLCJyZWFkVUVHIiwiU3dhcDE2IiwiU3dhcDMyIiwiUmVhZEJpZzMyIiwiX29uRXJyb3IiLCJfb25UcmFja01ldGFkYXRhIiwiX29uRGF0YUF2YWlsYWJsZSIsIl9kYXRhT2Zmc2V0IiwiX2ZpcnN0UGFyc2UiLCJfZGlzcGF0Y2giLCJfaGFzQXVkaW8iLCJoYXNBdWRpb1RyYWNrIiwiX2hhc1ZpZGVvIiwiaGFzVmlkZW9UcmFjayIsIl9oYXNBdWRpb0ZsYWdPdmVycmlkZWQiLCJfaGFzVmlkZW9GbGFnT3ZlcnJpZGVkIiwiX2F1ZGlvSW5pdGlhbE1ldGFkYXRhRGlzcGF0Y2hlZCIsIl92aWRlb0luaXRpYWxNZXRhZGF0YURpc3BhdGNoZWQiLCJfbWV0YWRhdGEiLCJfYXVkaW9NZXRhZGF0YSIsIl92aWRlb01ldGFkYXRhIiwiX25hbHVMZW5ndGhTaXplIiwiX3RpbWVzdGFtcEJhc2UiLCJfdGltZXNjYWxlIiwiX2R1cmF0aW9uIiwiX2R1cmF0aW9uT3ZlcnJpZGVkIiwiX3JlZmVyZW5jZUZyYW1lUmF0ZSIsImZpeGVkIiwiZnBzX251bSIsImZwc19kZW4iLCJfZmx2U291bmRSYXRlVGFibGUiLCJfbXBlZ1NhbXBsaW5nUmF0ZXMiLCJfbXBlZ0F1ZGlvVjEwU2FtcGxlUmF0ZVRhYmxlIiwiX21wZWdBdWRpb1YyMFNhbXBsZVJhdGVUYWJsZSIsIl9tcGVnQXVkaW9WMjVTYW1wbGVSYXRlVGFibGUiLCJfbXBlZ0F1ZGlvTDFCaXRSYXRlVGFibGUiLCJfbXBlZ0F1ZGlvTDJCaXRSYXRlVGFibGUiLCJfbXBlZ0F1ZGlvTDNCaXRSYXRlVGFibGUiLCJfdmlkZW9UcmFjayIsInNlcXVlbmNlTnVtYmVyIiwic2FtcGxlcyIsIl9hdWRpb1RyYWNrIiwiX2xpdHRsZUVuZGlhbiIsImxvYWRlciIsImNodW5rIiwicHJldlRhZ1NpemUwIiwidGFnVHlwZSIsInRzMiIsInRzMSIsInRzMCIsInRzMyIsInN0cmVhbUlkIiwiX3BhcnNlQXVkaW9EYXRhIiwiX3BhcnNlVmlkZW9EYXRhIiwiX3BhcnNlU2NyaXB0RGF0YSIsInByZXZUYWdTaXplIiwiX2lzSW5pdGlhbE1ldGFkYXRhRGlzcGF0Y2hlZCIsInNjcmlwdERhdGEiLCJwYXJzZVNjcmlwdERhdGEiLCJhdWRpb2RhdGFyYXRlIiwidmlkZW9kYXRhcmF0ZSIsImZyYW1lcmF0ZSIsImtleWZyYW1lcyIsIl9wYXJzZUtleWZyYW1lc0luZGV4IiwiaXNDb21wbGV0ZSIsInRpbWUiLCJ0YWdUaW1lc3RhbXAiLCJzb3VuZFNwZWMiLCJzb3VuZEZvcm1hdCIsInNvdW5kUmF0ZSIsInNvdW5kUmF0ZUluZGV4Iiwic291bmRTaXplIiwic291bmRUeXBlIiwibWV0YSIsInRyYWNrIiwidGltZXNjYWxlIiwiY2hhbm5lbENvdW50IiwiYWFjRGF0YSIsIl9wYXJzZUFBQ0F1ZGlvRGF0YSIsInBhY2tldFR5cGUiLCJtaXNjIiwic2FtcGxpbmdSYXRlIiwib3JpZ2luYWxDb2RlYyIsInJlZlNhbXBsZUR1cmF0aW9uIiwibWkiLCJhYWNTYW1wbGUiLCJ1bml0IiwiX3BhcnNlTVAzQXVkaW9EYXRhIiwiYml0UmF0ZSIsIm1wM1NhbXBsZSIsIl9wYXJzZUFBQ0F1ZGlvU3BlY2lmaWNDb25maWciLCJhdWRpb09iamVjdFR5cGUiLCJvcmlnaW5hbEF1ZGlvT2JqZWN0VHlwZSIsImF1ZGlvRXh0ZW5zaW9uT2JqZWN0VHlwZSIsInNhbXBsaW5nSW5kZXgiLCJleHRlbnNpb25TYW1wbGluZ0luZGV4Iiwic2FtcGxpbmdGcmVxdWVuY2UiLCJjaGFubmVsQ29uZmlnIiwidXNlckFnZW50IiwibmF2aWdhdG9yIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwicmVxdWVzdEhlYWRlciIsInZlciIsImxheWVyIiwiYml0cmF0ZV9pbmRleCIsInNhbXBsaW5nX2ZyZXFfaW5kZXgiLCJjaGFubmVsX21vZGUiLCJjaGFubmVsX2NvdW50Iiwic2FtcGxlX3JhdGUiLCJiaXRfcmF0ZSIsIm9iamVjdF90eXBlIiwidGFnUG9zaXRpb24iLCJzcGVjIiwiZnJhbWVUeXBlIiwiY29kZWNJZCIsIl9wYXJzZUFWQ1ZpZGVvUGFja2V0IiwiY3RzX3Vuc2lnbmVkIiwiY3RzIiwiX3BhcnNlQVZDRGVjb2RlckNvbmZpZ3VyYXRpb25SZWNvcmQiLCJfcGFyc2VBVkNWaWRlb0RhdGEiLCJhdmNjIiwiYXZjUHJvZmlsZSIsInByb2ZpbGVDb21wYXRpYmlsaXR5IiwiYXZjTGV2ZWwiLCJzcHNDb3VudCIsInNwcyIsIlNQU1BhcnNlciIsInBhcnNlU1BTIiwiY29kZWNXaWR0aCIsImNvZGVjX3NpemUiLCJjb2RlY0hlaWdodCIsInByZXNlbnRXaWR0aCIsInByZXNlbnRfc2l6ZSIsInByZXNlbnRIZWlnaHQiLCJwcm9maWxlX3N0cmluZyIsImxldmVsX3N0cmluZyIsImJpdERlcHRoIiwiYml0X2RlcHRoIiwiY2hyb21hX2Zvcm1hdCIsInNhclJhdGlvIiwicGFyX3JhdGlvIiwiZnJhbWVSYXRlIiwiZnJhbWVfcmF0ZSIsImNvZGVjQXJyYXkiLCJjb2RlY1N0cmluZyIsImoiLCJoIiwicmVmX2ZyYW1lcyIsImNocm9tYV9mb3JtYXRfc3RyaW5nIiwicHBzQ291bnQiLCJ1bml0cyIsImxlbmd0aFNpemUiLCJuYWx1U2l6ZSIsInVuaXRUeXBlIiwiYXZjU2FtcGxlIiwiaXNLZXlmcmFtZSIsImJhc2UiLCJtaXNtYXRjaCIsInNyY19sZW5ndGgiLCJkc3QiLCJkc3RfaWR4IiwicmJzcCIsIl9lYnNwMnJic3AiLCJnYiIsInJlYWRCeXRlIiwicHJvZmlsZV9pZGMiLCJsZXZlbF9pZGMiLCJnZXRQcm9maWxlU3RyaW5nIiwiZ2V0TGV2ZWxTdHJpbmciLCJjaHJvbWFfZm9ybWF0X2lkYyIsImNocm9tYV9mb3JtYXRfdGFibGUiLCJyZWFkQm9vbCIsInNjYWxpbmdfbGlzdF9jb3VudCIsIl9za2lwU2NhbGluZ0xpc3QiLCJwaWNfb3JkZXJfY250X3R5cGUiLCJyZWFkU0VHIiwibnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZSIsInBpY193aWR0aF9pbl9tYnNfbWludXMxIiwicGljX2hlaWdodF9pbl9tYXBfdW5pdHNfbWludXMxIiwiZnJhbWVfbWJzX29ubHlfZmxhZyIsImZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQiLCJmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCIsImZyYW1lX2Nyb3BfdG9wX29mZnNldCIsImZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCIsImZyYW1lX2Nyb3BwaW5nX2ZsYWciLCJzYXJfd2lkdGgiLCJzYXJfaGVpZ2h0IiwiZnBzX2ZpeGVkIiwidnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnIiwiYXNwZWN0X3JhdGlvX2lkYyIsInNhcl93X3RhYmxlIiwic2FyX2hfdGFibGUiLCJudW1fdW5pdHNfaW5fdGljayIsInRpbWVfc2NhbGUiLCJzYXJTY2FsZSIsImNyb3BfdW5pdF94IiwiY3JvcF91bml0X3kiLCJzdWJfd2MiLCJzdWJfaGMiLCJjb2RlY193aWR0aCIsImNvZGVjX2hlaWdodCIsInByZXNlbnRfd2lkdGgiLCJjZWlsIiwiZ2V0Q2hyb21hRm9ybWF0U3RyaW5nIiwiY291bnQiLCJsYXN0X3NjYWxlIiwibmV4dF9zY2FsZSIsImRlbHRhX3NjYWxlIiwidG9GaXhlZCIsImNocm9tYSIsImNyZWF0ZVBsYXllciIsIm9wdGlvbmFsQ29uZmlnIiwiRmx2UGxheWVyIiwiTmF0aXZlUGxheWVyIiwiaXNTdXBwb3J0ZWQiLCJnZXRGZWF0dXJlTGlzdCIsImZsdmpzIiwiRXZlbnRzIiwiUGxheWVyRXZlbnRzIiwiRXJyb3JUeXBlcyIsIkVycm9yRGV0YWlscyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIkZldGNoU3RyZWFtTG9hZGVyIiwiaXNXb3JrV2VsbEVkZ2UiLCJtc2VkZ2UiLCJtaW5vciIsImJyb3dzZXJOb3RCbGFja2xpc3RlZCIsImZldGNoIiwiUmVhZGFibGVTdHJlYW0iLCJzZWVrSGFuZGxlciIsIl9zZWVrSGFuZGxlciIsIl9uZWVkU3Rhc2giLCJfcmVxdWVzdEFib3J0IiwiX2NvbnRlbnRMZW5ndGgiLCJfcmVjZWl2ZWRMZW5ndGgiLCJfZGF0YVNvdXJjZSIsIl9yYW5nZSIsInNvdXJjZVVSTCIsInNlZWtDb25maWciLCJoZWFkZXJzIiwiSGVhZGVycyIsImNvbmZpZ0hlYWRlcnMiLCJhcHBlbmQiLCJwYXJhbXMiLCJtZXRob2QiLCJtb2RlIiwiY3JlZGVudGlhbHMiLCJfc3RhdHVzIiwiTG9hZGVyU3RhdHVzIiwia0Nvbm5lY3RpbmciLCJyZXMiLCJrSWRsZSIsIm9rIiwic3RhdHVzIiwiX29uVVJMUmVkaXJlY3QiLCJyZW1vdmVVUkxQYXJhbWV0ZXJzIiwibGVuZ3RoSGVhZGVyIiwicGFyc2VJbnQiLCJfb25Db250ZW50TGVuZ3RoS25vd24iLCJfcHVtcCIsImJvZHkiLCJnZXRSZWFkZXIiLCJrRXJyb3IiLCJMb2FkZXJFcnJvcnMiLCJIVFRQX1NUQVRVU19DT0RFX0lOVkFMSUQiLCJzdGF0dXNUZXh0IiwiUnVudGltZUV4Y2VwdGlvbiIsIkVYQ0VQVElPTiIsInJlYWRlciIsInJlYWQiLCJkb25lIiwia0NvbXBsZXRlIiwiX29uQ29tcGxldGUiLCJmcm9tIiwiY2FuY2VsIiwia0J1ZmZlcmluZyIsIl9vbkRhdGFBcnJpdmFsIiwiRUFSTFlfRU9GIiwiQmFzZUxvYWRlciIsIl9leHRyYURhdGEiLCJfc3Rhc2hJbml0aWFsU2l6ZSIsIl9zdGFzaFVzZWQiLCJfc3Rhc2hTaXplIiwiX2J1ZmZlclNpemUiLCJfc3Rhc2hCdWZmZXIiLCJfc3Rhc2hCeXRlU3RhcnQiLCJfZW5hYmxlU3Rhc2giLCJfbG9hZGVyIiwiX2xvYWRlckNsYXNzIiwiX2lzV2ViU29ja2V0VVJMIiwidGVzdCIsIl9yZWZUb3RhbExlbmd0aCIsIl90b3RhbExlbmd0aCIsIl9mdWxsUmVxdWVzdEZsYWciLCJfY3VycmVudFJhbmdlIiwiX3JlZGlyZWN0ZWRVUkwiLCJfc3BlZWROb3JtYWxpemVkIiwiX3NwZWVkU2FtcGxlciIsIlNwZWVkU2FtcGxlciIsIl9zcGVlZE5vcm1hbGl6ZUxpc3QiLCJfaXNFYXJseUVvZlJlY29ubmVjdGluZyIsIl9wYXVzZWQiLCJfcmVzdW1lRnJvbSIsIl9vblNlZWtlZCIsIl9vblJlZGlyZWN0IiwiX3NlbGVjdFNlZWtIYW5kbGVyIiwiX3NlbGVjdExvYWRlciIsIl9jcmVhdGVMb2FkZXIiLCJSYW5nZVNlZWtIYW5kbGVyIiwicGFyYW1TdGFydCIsInBhcmFtRW5kIiwiUGFyYW1TZWVrSGFuZGxlciIsIldlYlNvY2tldExvYWRlciIsIk1vekNodW5rZWRMb2FkZXIiLCJSYW5nZUxvYWRlciIsIm5lZWRTdGFzaEJ1ZmZlciIsIm9uQ29udGVudExlbmd0aEtub3duIiwib25VUkxSZWRpcmVjdCIsIl9vbkxvYWRlckNodW5rQXJyaXZhbCIsIl9vbkxvYWRlckNvbXBsZXRlIiwiX29uTG9hZGVyRXJyb3IiLCJ0byIsInJlc2V0IiwiYnl0ZXMiLCJfaW50ZXJuYWxTZWVrIiwiZHJvcFVuY29uc3VtZWQiLCJfZmx1c2hTdGFzaEJ1ZmZlciIsInJlcXVlc3RSYW5nZSIsImV4cGVjdGVkQnl0ZXMiLCJidWZmZXJOZXdTaXplIiwibmV3QnVmZmVyIiwic3Rhc2hPbGRBcnJheSIsInN0YXNoTmV3QXJyYXkiLCJub3JtYWxpemVkIiwic3Rhc2hTaXplS0IiLCJidWZmZXJTaXplIiwiX2V4cGFuZEJ1ZmZlciIsImNodW5rcyIsImNvbnRlbnRMZW5ndGgiLCJyZWNlaXZlZExlbmd0aCIsImFkZEJ5dGVzIiwiS0JwcyIsImxhc3RTZWNvbmRLQnBzIiwiX25vcm1hbGl6ZVNwZWVkIiwiX2FkanVzdFN0YXNoU2l6ZSIsIl9kaXNwYXRjaENodW5rcyIsInJlbWFpbiIsInN0YXNoQXJyYXkiLCJyZW1haW5BcnJheSIsIlVOUkVDT1ZFUkFCTEVfRUFSTFlfRU9GIiwibmV4dEZyb20iLCJDT05ORUNUSU5HX1RJTUVPVVQiLCJ0eXBlTmFtZSIsIk5vdEltcGxlbWVudGVkRXhjZXB0aW9uIiwiX3N0YXJ0TmFtZSIsIl9lbmROYW1lIiwiYmFzZVVybCIsIm5lZWRBbmQiLCJzZWVrZWRVUkwiLCJiYXNlVVJMIiwic3BsaXQiLCJxdWVyeUluZGV4IiwicmVzdWx0UGFyYW1zIiwicGFpcnMiLCJwYWlyIiwicmVxdWlyZUFuZCIsInplcm9TdGFydCIsIl96ZXJvU3RhcnQiLCJfZmlyc3RDaGVja3BvaW50IiwiX2xhc3RDaGVja3BvaW50IiwiX2ludGVydmFsQnl0ZXMiLCJfdG90YWxCeXRlcyIsIl9sYXN0U2Vjb25kQnl0ZXMiLCJwZXJmb3JtYW5jZSIsIm5vdyIsIl9ub3ciLCJkdXJhdGlvblNlY29uZHMiLCJjdXJyZW50S0JwcyIsIldlYlNvY2tldCIsIl93cyIsIndzIiwiYmluYXJ5VHlwZSIsIm9ub3BlbiIsIl9vbldlYlNvY2tldE9wZW4iLCJvbmNsb3NlIiwiX29uV2ViU29ja2V0Q2xvc2UiLCJfb25XZWJTb2NrZXRNZXNzYWdlIiwib25lcnJvciIsIl9vbldlYlNvY2tldEVycm9yIiwiY2xvc2UiLCJfZGlzcGF0Y2hBcnJheUJ1ZmZlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImFycmF5YnVmZmVyIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJyZXNwb25zZVR5cGUiLCJfeGhyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwib25wcm9ncmVzcyIsIm9ubG9hZGVuZCIsIl9yZXF1ZXN0VVJMIiwiX29uUmVhZHlTdGF0ZUNoYW5nZSIsIl9vblByb2dyZXNzIiwiX29uTG9hZEVuZCIsIl9vblhockVycm9yIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJyZXNwb25zZVVSTCIsInRvdGFsIiwicmVzcG9uc2UiLCJsb2FkZWQiLCJNU1N0cmVhbUxvYWRlciIsIk1TU3RyZWFtIiwiTVNTdHJlYW1SZWFkZXIiLCJfcmVhZGVyIiwiX3RvdGFsUmFuZ2UiLCJfY3VycmVudFJlcXVlc3RVUkwiLCJfY3VycmVudFJlZGlyZWN0ZWRVUkwiLCJfYnVmZmVyTGltaXQiLCJfbGFzdFRpbWVCdWZmZXJTaXplIiwiX2lzUmVjb25uZWN0aW5nIiwiX2ludGVybmFsT3BlbiIsImlzU3VicmFuZ2UiLCJfbXNyT25Qcm9ncmVzcyIsIl9tc3JPbkxvYWQiLCJfbXNyT25FcnJvciIsIl94aHJPblJlYWR5U3RhdGVDaGFuZ2UiLCJfeGhyT25FcnJvciIsImdldFJlc3BvbnNlSGVhZGVyIiwibXNzdHJlYW0iLCJiaWdidWZmZXIiLCJfZG9SZWNvbm5lY3RJZk5lZWRlZCIsIl9jaHVua1NpemVLQkxpc3QiLCJfY3VycmVudENodW5rU2l6ZUtCIiwiX2N1cnJlbnRTcGVlZE5vcm1hbGl6ZWQiLCJfemVyb1NwZWVkQ2h1bmtDb3VudCIsIl93YWl0Rm9yVG90YWxMZW5ndGgiLCJfdG90YWxMZW5ndGhSZWNlaXZlZCIsIl9jdXJyZW50UmVxdWVzdFJhbmdlIiwiX2xhc3RUaW1lTG9hZGVkIiwidXNlUmVmVG90YWxMZW5ndGgiLCJfb3BlblN1YlJhbmdlIiwiY2h1bmtTaXplIiwiX29uTG9hZCIsIm9wZW5OZXh0UmFuZ2UiLCJyZXBvcnRDb21wbGV0ZSIsIm9udkxvYWRlZE1ldGFkYXRhIiwiX29udkxvYWRlZE1ldGFkYXRhIiwib252U2Vla2luZyIsIl9vbnZTZWVraW5nIiwib252Q2FuUGxheSIsIl9vbnZDYW5QbGF5Iiwib252U3RhbGxlZCIsIl9vbnZTdGFsbGVkIiwib252UHJvZ3Jlc3MiLCJfb252UHJvZ3Jlc3MiLCJfcmVxdWVzdFNldFRpbWUiLCJfc2Vla3BvaW50UmVjb3JkIiwiX3Byb2dyZXNzQ2hlY2tlciIsIl9tc2VjdGwiLCJfdHJhbnNtdXhlciIsIl9tc2VTb3VyY2VPcGVuZWQiLCJfaGFzUGVuZGluZ0xvYWQiLCJfcmVjZWl2ZWRDYW5QbGF5IiwiX3N0YXRpc3RpY3NJbmZvIiwiY2hyb21lTmVlZElEUkZpeCIsImNocm9tZSIsIm1ham9yIiwiYnVpbGQiLCJfYWx3YXlzU2Vla0tleWZyYW1lIiwibXNpZSIsIl90ZW1wUGVuZGluZ1NlZ21lbnRzIiwiX2RlZmluaXRpb25SZXRyeVRpbWVzIiwidW5sb2FkIiwiX29ubXNlVXBkYXRlRW5kIiwiX29ubXNlQnVmZmVyRnVsbCIsImxvYWQiLCJNRURJQV9FUlJPUiIsIk1FRElBX01TRV9FUlJPUiIsImF0dGFjaE1lZGlhRWxlbWVudCIsImV4cGVjdFRpbWUiLCJfdGVtcE1kcyIsIl90ZW1wVHJhbnNtdXhlciIsImRvQ2xlYXJTb3VyY2VCdWZmZXIiLCJhcHBlbmRNZWRpYVNlZ21lbnQiLCJpc0RlZmluaXRpb25EYXRhUmVhZHkiLCJfc3VzcGVuZFRyYW5zbXV4ZXIiLCJORVRXT1JLX0VSUk9SIiwiX2ZpbGxTdGF0aXN0aWNzSW5mbyIsInBsYXkiLCJwbGF5ZXJUeXBlIiwiSFRNTFZpZGVvRWxlbWVudCIsImhhc1F1YWxpdHlJbmZvIiwiZGVjb2RlZCIsImRyb3BwZWQiLCJnZXRWaWRlb1BsYXliYWNrUXVhbGl0eSIsInF1YWxpdHkiLCJ0b3RhbFZpZGVvRnJhbWVzIiwiZHJvcHBlZFZpZGVvRnJhbWVzIiwid2Via2l0RGVjb2RlZEZyYW1lQ291bnQiLCJ3ZWJraXREcm9wcGVkRnJhbWVDb3VudCIsImRlY29kZWRGcmFtZXMiLCJkcm9wcGVkRnJhbWVzIiwiY3VycmVudFJhbmdlU3RhcnQiLCJjdXJyZW50UmFuZ2VFbmQiLCJfY2hlY2tQcm9ncmVzc0FuZFJlc3VtZSIsIm5lZWRSZXN1bWUiLCJkaXJlY3RTZWVrIiwiX2lzVGltZXBvaW50QnVmZmVyZWQiLCJkaXJlY3RTZWVrQmVnaW4iLCJkaXJlY3RTZWVrQmVnaW5UaW1lIiwidmlkZW9CZWdpblRpbWUiLCJpZHIiLCJyZWNvcmRUaW1lIiwiX2NoZWNrQW5kQXBwbHlVbmJ1ZmZlcmVkU2Vla3BvaW50Iiwic3RhbGxlZCIsIm1lZGlhIiwic2Vla1BvaW50IiwiX2NoZWNrQW5kUmVzdW1lU3R1Y2tQbGF5YmFjayIsInZvbHVtZSIsIm11dGVkIiwibWluU2VnbWVudExlbiIsImV2ZXJ5IiwicHJlbG9hZCIsIm1lZGlhUHJlZml4IiwiSFRNTEF1ZGlvRWxlbWVudCIsInZpZGVvV2lkdGgiLCJ2aWRlb0hlaWdodCIsIk9USEVSX0VSUk9SIiwiTkVUV09SS19FWENFUFRJT04iLCJORVRXT1JLX1NUQVRVU19DT0RFX0lOVkFMSUQiLCJORVRXT1JLX1RJTUVPVVQiLCJORVRXT1JLX1VOUkVDT1ZFUkFCTEVfRUFSTFlfRU9GIiwiTUVESUFfRk9STUFUX0VSUk9SIiwiTUVESUFfRk9STUFUX1VOU1VQUE9SVEVEIiwiTUVESUFfQ09ERUNfVU5TVVBQT1JURUQiLCJBQUMiLCJNUDQiLCJ0eXBlcyIsImF2YzEiLCJhdmNDIiwiYnRydCIsImRpbmYiLCJkcmVmIiwiZXNkcyIsImZ0eXAiLCJoZGxyIiwibWRhdCIsIm1kaGQiLCJtZGlhIiwibWZoZCIsIm1pbmYiLCJtb29mIiwibW9vdiIsIm1wNGEiLCJtdmV4IiwibXZoZCIsInNkdHAiLCJzdGJsIiwic3RjbyIsInN0c2MiLCJzdHNkIiwic3RzeiIsInN0dHMiLCJ0ZmR0IiwidGZoZCIsInRyYWYiLCJ0cmFrIiwidHJ1biIsInRyZXgiLCJ0a2hkIiwidm1oZCIsInNtaGQiLCJjaGFyQ29kZUF0IiwiY29uc3RhbnRzIiwiRlRZUCIsIlNUU0RfUFJFRklYIiwiU1RUUyIsIlNUU0MiLCJTVENPIiwiU1RTWiIsIkhETFJfVklERU8iLCJIRExSX0FVRElPIiwiRFJFRiIsIlNNSEQiLCJWTUhEIiwiZGF0YXMiLCJhcnJheUNvdW50IiwiYm94IiwidHJhY2tJZCIsInhtaGQiLCJtcDMiLCJzYW1wbGVSYXRlIiwiY29uZmlnU2l6ZSIsImJhc2VNZWRpYURlY29kZVRpbWUiLCJzYW1wbGVDb3VudCIsImZsYWdzIiwiaXNMZWFkaW5nIiwiZGVwZW5kc09uIiwiaXNEZXBlbmRlZE9uIiwiaGFzUmVkdW5kYW5jeSIsImlzTm9uU3luYyIsImluaXQiLCJfaXNMaXZlIiwiX2R0c0Jhc2UiLCJfZHRzQmFzZUluaXRlZCIsIl9hdWRpb0R0c0Jhc2UiLCJJbmZpbml0eSIsIl92aWRlb0R0c0Jhc2UiLCJfYXVkaW9OZXh0RHRzIiwiX3ZpZGVvTmV4dER0cyIsIl9hdWRpb1N0YXNoZWRMYXN0U2FtcGxlIiwiX3ZpZGVvU3Rhc2hlZExhc3RTYW1wbGUiLCJfYXVkaW9NZXRhIiwiX3ZpZGVvTWV0YSIsIl9hdWRpb1NlZ21lbnRJbmZvTGlzdCIsIl92aWRlb1NlZ21lbnRJbmZvTGlzdCIsIl9mb3JjZUZpcnN0SURSIiwiX2ZpbGxTaWxlbnRBZnRlclNlZWsiLCJfbXAzVXNlTXBlZ0F1ZGlvIiwiZmlyZWZveCIsIl9maWxsQXVkaW9UaW1lc3RhbXBHYXAiLCJwcm9kdWNlciIsIm9uRGF0YUF2YWlsYWJsZSIsInJlbXV4Iiwib25UcmFja01ldGFkYXRhIiwiX29uVHJhY2tNZXRhZGF0YVJlY2VpdmVkIiwiYXVkaW9UcmFjayIsInZpZGVvVHJhY2siLCJfY2FsY3VsYXRlRHRzQmFzZSIsIl9yZW11eFZpZGVvIiwiX3JlbXV4QXVkaW8iLCJtZXRhYm94IiwiZ2VuZXJhdGVJbml0U2VnbWVudCIsInZpZGVvU2FtcGxlIiwiYXVkaW9TYW1wbGUiLCJmb3JjZSIsImR0c0NvcnJlY3Rpb24iLCJmaXJzdER0cyIsImxhc3REdHMiLCJsYXN0UHRzIiwibXBlZ1Jhd1RyYWNrIiwiZmlyc3RTZWdtZW50QWZ0ZXJTZWVrIiwiaW5zZXJ0UHJlZml4U2lsZW50RnJhbWUiLCJtZGF0Ym94IiwibWRhdEJ5dGVzIiwicG9wIiwic2FtcGxlIiwiZmlyc3RTYW1wbGVPcmlnaW5hbER0cyIsImlzRW1wdHkiLCJnZXRMYXN0U2FtcGxlQmVmb3JlIiwiZGlzdGFuY2UiLCJleHBlY3RlZER0cyIsImZpcnN0U2FtcGxlRHRzIiwidmlkZW9TZWdtZW50Iiwic2lsZW50VW5pdCIsImdldFNpbGVudEZyYW1lIiwic2lsZW50RnJhbWVEdXJhdGlvbiIsIm1wNFNhbXBsZXMiLCJzYW1wbGVEdXJhdGlvbiIsIm5leHREdHMiLCJuZWVkRmlsbFNpbGVudEZyYW1lcyIsInNpbGVudEZyYW1lcyIsImZyYW1lQ291bnQiLCJjdXJyZW50RHRzIiwicm91bmQiLCJpbnREdHMiLCJwcmV2aW91c0ZyYW1lIiwiZnJhbWUiLCJsYXN0RnJhbWUiLCJsYXRlc3QiLCJtb29mYm94IiwiX21lcmdlQm94ZXMiLCJmaXJzdFB0cyIsInN5bmNQb2ludCIsImFwcGVuZFN5bmNQb2ludCIsImRldGVjdCIsInVhIiwiZXhlYyIsInBsYXRmb3JtX21hdGNoIiwibWF0Y2hlZCIsIm1ham9yVmVyc2lvbiIsInBsYXRmb3JtIiwidmVyc2lvbkFycmF5Iiwic3RyaW5nIiwib3ByIiwid2Via2l0IiwicnYiLCJpZW1vYmlsZSIsImVkZ2UiLCJvcGVyYSIsImFuZHJvaWQiLCJfbWVzc2FnZSIsInRhZyIsIkZPUkNFX0dMT0JBTF9UQUciLCJHTE9CQUxfVEFHIiwiRU5BQkxFX0NBTExCQUNLIiwiRU5BQkxFX0VSUk9SIiwid2FybiIsIkVOQUJMRV9JTkZPIiwiRU5BQkxFX1dBUk4iLCJFTkFCTEVfREVCVUciLCJkZWJ1ZyIsIkVOQUJMRV9WRVJCT1NFIiwiZ2xvYmFsVGFnIiwiZm9yY2VHbG9iYWxUYWciLCJlbmFibGVWZXJib3NlIiwiZW5hYmxlRGVidWciLCJlbmFibGVJbmZvIiwiZW5hYmxlV2FybiIsImVuYWJsZUVycm9yIiwiX25vdGlmeUNoYW5nZSIsImVuYWJsZSIsInByb3RvIiwiX19wcm90b19fIiwib3V0cHV0Iiwic291cmNlIiwiY2hlY2tDb250aW51YXRpb24iLCJjaGVja0xlbmd0aCIsImRlY29kZVVURjgiLCJvdXQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ1Y3M0IiwiRmx2SnNQbGF5ZXIiLCJmbHZPcHRzIiwiUGxheWVyIiwidXRpbCIsImRlZXBDb3B5IiwicGxheWVyIiwiX19mbHZfXyIsIkZsdiIsImNyZWF0ZUluc3RhbmNlIiwiZmx2IiwiYWRkQ2xhc3MiLCJyb290IiwibGl2ZSIsImNyZWF0ZURvbSIsImNvbnRyb2xzIiwiYXBwZW5kQ2hpbGQiLCJFcnJvcnMiLCJmbHZQbGF5ZXIiLCJvbkRlZmluaXRpb25DaGFuZ2UiLCJyZXRyeVRpbWVzIiwidGVtcEZsdlBsYXllciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE87QUNWQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUEwQyxnQ0FBZ0M7QUFDMUU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnRUFBd0Qsa0JBQWtCO0FBQzFFO0FBQ0EseURBQWlELGNBQWM7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUF5QyxpQ0FBaUM7QUFDMUUsd0hBQWdILG1CQUFtQixFQUFFO0FBQ3JJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7OztBQUdBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbEZBOzs7Ozs7OztBQVFDLFdBQVVBLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQzNCLGdDQUFPQyxPQUFQLE9BQW1CLFFBQW5CLElBQStCLE9BQU9DLE1BQVAsS0FBa0IsV0FBakQsR0FBK0RBLE9BQU9ELE9BQVAsR0FBaUJELFNBQWhGLEdBQ0EsUUFBNkMsb0NBQU9BLE9BQVA7QUFBQTtBQUFBO0FBQUE7QUFBQSxvR0FBN0MsR0FDQyxTQUZEO0FBR0EsQ0FKQSxhQUlRLFlBQVk7QUFBRTs7QUFFdkIsV0FBU0csZ0JBQVQsQ0FBMEJDLENBQTFCLEVBQTZCO0FBQzNCLFFBQUlDLGNBQWNELENBQWQseUNBQWNBLENBQWQsQ0FBSjtBQUNBLFdBQU9BLE1BQU0sSUFBTixLQUFlQyxTQUFTLFFBQVQsSUFBcUJBLFNBQVMsVUFBN0MsQ0FBUDtBQUNEOztBQUVELFdBQVNDLFVBQVQsQ0FBb0JGLENBQXBCLEVBQXVCO0FBQ3JCLFdBQU8sT0FBT0EsQ0FBUCxLQUFhLFVBQXBCO0FBQ0Q7O0FBSUQsTUFBSUcsV0FBVyxLQUFLLENBQXBCO0FBQ0EsTUFBSUMsTUFBTUMsT0FBVixFQUFtQjtBQUNqQkYsZUFBV0MsTUFBTUMsT0FBakI7QUFDRCxHQUZELE1BRU87QUFDTEYsZUFBVyxrQkFBVUgsQ0FBVixFQUFhO0FBQ3RCLGFBQU9NLE9BQU9DLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQlQsQ0FBL0IsTUFBc0MsZ0JBQTdDO0FBQ0QsS0FGRDtBQUdEOztBQUVELE1BQUlLLFVBQVVGLFFBQWQ7O0FBRUEsTUFBSU8sTUFBTSxDQUFWO0FBQ0EsTUFBSUMsWUFBWSxLQUFLLENBQXJCO0FBQ0EsTUFBSUMsb0JBQW9CLEtBQUssQ0FBN0I7O0FBRUEsTUFBSUMsT0FBTyxTQUFTQSxJQUFULENBQWNDLFFBQWQsRUFBd0JDLEdBQXhCLEVBQTZCO0FBQ3RDQyxVQUFNTixHQUFOLElBQWFJLFFBQWI7QUFDQUUsVUFBTU4sTUFBTSxDQUFaLElBQWlCSyxHQUFqQjtBQUNBTCxXQUFPLENBQVA7QUFDQSxRQUFJQSxRQUFRLENBQVosRUFBZTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFVBQUlFLGlCQUFKLEVBQXVCO0FBQ3JCQSwwQkFBa0JLLEtBQWxCO0FBQ0QsT0FGRCxNQUVPO0FBQ0xDO0FBQ0Q7QUFDRjtBQUNGLEdBZEQ7O0FBZ0JBLFdBQVNDLFlBQVQsQ0FBc0JDLFVBQXRCLEVBQWtDO0FBQ2hDUix3QkFBb0JRLFVBQXBCO0FBQ0Q7O0FBRUQsV0FBU0MsT0FBVCxDQUFpQkMsTUFBakIsRUFBeUI7QUFDdkJULFdBQU9TLE1BQVA7QUFDRDs7QUFFRCxNQUFJQyxnQkFBZ0IsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0EsTUFBaEMsR0FBeUNDLFNBQTdEO0FBQ0EsTUFBSUMsZ0JBQWdCSCxpQkFBaUIsRUFBckM7QUFDQSxNQUFJSSwwQkFBMEJELGNBQWNFLGdCQUFkLElBQWtDRixjQUFjRyxzQkFBOUU7QUFDQSxNQUFJQyxTQUFTLE9BQU9DLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0IsT0FBT0MsT0FBUCxLQUFtQixXQUFsRCxJQUFpRSxHQUFHeEIsUUFBSCxDQUFZQyxJQUFaLENBQWlCdUIsT0FBakIsTUFBOEIsa0JBQTVHOztBQUVBO0FBQ0EsTUFBSUMsV0FBVyxPQUFPQyxpQkFBUCxLQUE2QixXQUE3QixJQUE0QyxPQUFPQyxhQUFQLEtBQXlCLFdBQXJFLElBQW9GLE9BQU9DLGNBQVAsS0FBMEIsV0FBN0g7O0FBRUE7QUFDQSxXQUFTQyxXQUFULEdBQXVCO0FBQ3JCO0FBQ0E7QUFDQSxXQUFPLFlBQVk7QUFDakIsYUFBT0wsUUFBUU0sUUFBUixDQUFpQnJCLEtBQWpCLENBQVA7QUFDRCxLQUZEO0FBR0Q7O0FBRUQ7QUFDQSxXQUFTc0IsYUFBVCxHQUF5QjtBQUN2QixRQUFJLE9BQU81QixTQUFQLEtBQXFCLFdBQXpCLEVBQXNDO0FBQ3BDLGFBQU8sWUFBWTtBQUNqQkEsa0JBQVVNLEtBQVY7QUFDRCxPQUZEO0FBR0Q7O0FBRUQsV0FBT3VCLGVBQVA7QUFDRDs7QUFFRCxXQUFTQyxtQkFBVCxHQUErQjtBQUM3QixRQUFJQyxhQUFhLENBQWpCO0FBQ0EsUUFBSUMsV0FBVyxJQUFJaEIsdUJBQUosQ0FBNEJWLEtBQTVCLENBQWY7QUFDQSxRQUFJMkIsT0FBT0MsU0FBU0MsY0FBVCxDQUF3QixFQUF4QixDQUFYO0FBQ0FILGFBQVNJLE9BQVQsQ0FBaUJILElBQWpCLEVBQXVCLEVBQUVJLGVBQWUsSUFBakIsRUFBdkI7O0FBRUEsV0FBTyxZQUFZO0FBQ2pCSixXQUFLSyxJQUFMLEdBQVlQLGFBQWEsRUFBRUEsVUFBRixHQUFlLENBQXhDO0FBQ0QsS0FGRDtBQUdEOztBQUVEO0FBQ0EsV0FBU1EsaUJBQVQsR0FBNkI7QUFDM0IsUUFBSUMsVUFBVSxJQUFJZixjQUFKLEVBQWQ7QUFDQWUsWUFBUUMsS0FBUixDQUFjQyxTQUFkLEdBQTBCcEMsS0FBMUI7QUFDQSxXQUFPLFlBQVk7QUFDakIsYUFBT2tDLFFBQVFHLEtBQVIsQ0FBY0MsV0FBZCxDQUEwQixDQUExQixDQUFQO0FBQ0QsS0FGRDtBQUdEOztBQUVELFdBQVNmLGFBQVQsR0FBeUI7QUFDdkI7QUFDQTtBQUNBLFFBQUlnQixtQkFBbUJDLFVBQXZCO0FBQ0EsV0FBTyxZQUFZO0FBQ2pCLGFBQU9ELGlCQUFpQnZDLEtBQWpCLEVBQXdCLENBQXhCLENBQVA7QUFDRCxLQUZEO0FBR0Q7O0FBRUQsTUFBSUQsUUFBUSxJQUFJWixLQUFKLENBQVUsSUFBVixDQUFaO0FBQ0EsV0FBU2EsS0FBVCxHQUFpQjtBQUNmLFNBQUssSUFBSXlDLElBQUksQ0FBYixFQUFnQkEsSUFBSWhELEdBQXBCLEVBQXlCZ0QsS0FBSyxDQUE5QixFQUFpQztBQUMvQixVQUFJNUMsV0FBV0UsTUFBTTBDLENBQU4sQ0FBZjtBQUNBLFVBQUkzQyxNQUFNQyxNQUFNMEMsSUFBSSxDQUFWLENBQVY7O0FBRUE1QyxlQUFTQyxHQUFUOztBQUVBQyxZQUFNMEMsQ0FBTixJQUFXakMsU0FBWDtBQUNBVCxZQUFNMEMsSUFBSSxDQUFWLElBQWVqQyxTQUFmO0FBQ0Q7O0FBRURmLFVBQU0sQ0FBTjtBQUNEOztBQUVELFdBQVNpRCxZQUFULEdBQXdCO0FBQ3RCLFFBQUk7QUFDRixVQUFJQyxRQUFRQyxTQUFTLGFBQVQsSUFBMEJDLE9BQTFCLENBQWtDLE9BQWxDLENBQVo7QUFDQW5ELGtCQUFZaUQsTUFBTUcsU0FBTixJQUFtQkgsTUFBTUksWUFBckM7QUFDQSxhQUFPekIsZUFBUDtBQUNELEtBSkQsQ0FJRSxPQUFPMEIsQ0FBUCxFQUFVO0FBQ1YsYUFBT3pCLGVBQVA7QUFDRDtBQUNGOztBQUVELE1BQUl0QixnQkFBZ0IsS0FBSyxDQUF6QjtBQUNBO0FBQ0EsTUFBSVksTUFBSixFQUFZO0FBQ1ZaLG9CQUFnQm1CLGFBQWhCO0FBQ0QsR0FGRCxNQUVPLElBQUlWLHVCQUFKLEVBQTZCO0FBQ2xDVCxvQkFBZ0J1QixxQkFBaEI7QUFDRCxHQUZNLE1BRUEsSUFBSVIsUUFBSixFQUFjO0FBQ25CZixvQkFBZ0JnQyxtQkFBaEI7QUFDRCxHQUZNLE1BRUEsSUFBSTNCLGtCQUFrQkUsU0FBbEIsSUFBK0IsZUFBbUIsVUFBdEQsRUFBa0U7QUFDdkVQLG9CQUFnQnlDLGNBQWhCO0FBQ0QsR0FGTSxNQUVBO0FBQ0x6QyxvQkFBZ0JzQixlQUFoQjtBQUNEOztBQUVELFdBQVMwQixJQUFULENBQWNDLGFBQWQsRUFBNkJDLFdBQTdCLEVBQTBDO0FBQ3hDLFFBQUlDLFNBQVMsSUFBYjs7QUFFQSxRQUFJQyxRQUFRLElBQUksS0FBS0MsV0FBVCxDQUFxQkMsSUFBckIsQ0FBWjs7QUFFQSxRQUFJRixNQUFNRyxVQUFOLE1BQXNCaEQsU0FBMUIsRUFBcUM7QUFDbkNpRCxrQkFBWUosS0FBWjtBQUNEOztBQUVELFFBQUlLLFNBQVNOLE9BQU9NLE1BQXBCOztBQUdBLFFBQUlBLE1BQUosRUFBWTtBQUNWLFVBQUk3RCxXQUFXOEQsVUFBVUQsU0FBUyxDQUFuQixDQUFmO0FBQ0E5RCxXQUFLLFlBQVk7QUFDZixlQUFPZ0UsZUFBZUYsTUFBZixFQUF1QkwsS0FBdkIsRUFBOEJ4RCxRQUE5QixFQUF3Q3VELE9BQU9TLE9BQS9DLENBQVA7QUFDRCxPQUZEO0FBR0QsS0FMRCxNQUtPO0FBQ0xDLGdCQUFVVixNQUFWLEVBQWtCQyxLQUFsQixFQUF5QkgsYUFBekIsRUFBd0NDLFdBQXhDO0FBQ0Q7O0FBRUQsV0FBT0UsS0FBUDtBQUNEOztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0JBLFdBQVNVLFNBQVQsQ0FBbUJDLE1BQW5CLEVBQTJCO0FBQ3pCO0FBQ0EsUUFBSUMsY0FBYyxJQUFsQjs7QUFFQSxRQUFJRCxVQUFVLFFBQU9BLE1BQVAseUNBQU9BLE1BQVAsT0FBa0IsUUFBNUIsSUFBd0NBLE9BQU9WLFdBQVAsS0FBdUJXLFdBQW5FLEVBQWdGO0FBQzlFLGFBQU9ELE1BQVA7QUFDRDs7QUFFRCxRQUFJRSxVQUFVLElBQUlELFdBQUosQ0FBZ0JWLElBQWhCLENBQWQ7QUFDQVksWUFBUUQsT0FBUixFQUFpQkYsTUFBakI7QUFDQSxXQUFPRSxPQUFQO0FBQ0Q7O0FBRUQsTUFBSVYsYUFBYVksS0FBS0MsTUFBTCxHQUFjOUUsUUFBZCxDQUF1QixFQUF2QixFQUEyQitFLFNBQTNCLENBQXFDLENBQXJDLENBQWpCOztBQUVBLFdBQVNmLElBQVQsR0FBZ0IsQ0FBRTs7QUFFbEIsTUFBSWdCLFVBQVUsS0FBSyxDQUFuQjtBQUNBLE1BQUlDLFlBQVksQ0FBaEI7QUFDQSxNQUFJQyxXQUFXLENBQWY7O0FBRUEsTUFBSUMsa0JBQWtCLEVBQUVDLE9BQU8sSUFBVCxFQUF0Qjs7QUFFQSxXQUFTQyxlQUFULEdBQTJCO0FBQ3pCLFdBQU8sSUFBSUMsU0FBSixDQUFjLDBDQUFkLENBQVA7QUFDRDs7QUFFRCxXQUFTQyxlQUFULEdBQTJCO0FBQ3pCLFdBQU8sSUFBSUQsU0FBSixDQUFjLHNEQUFkLENBQVA7QUFDRDs7QUFFRCxXQUFTRSxPQUFULENBQWlCYixPQUFqQixFQUEwQjtBQUN4QixRQUFJO0FBQ0YsYUFBT0EsUUFBUWpCLElBQWY7QUFDRCxLQUZELENBRUUsT0FBTzBCLEtBQVAsRUFBYztBQUNkRCxzQkFBZ0JDLEtBQWhCLEdBQXdCQSxLQUF4QjtBQUNBLGFBQU9ELGVBQVA7QUFDRDtBQUNGOztBQUVELFdBQVNNLE9BQVQsQ0FBaUJDLE9BQWpCLEVBQTBCQyxLQUExQixFQUFpQ0Msa0JBQWpDLEVBQXFEQyxnQkFBckQsRUFBdUU7QUFDckUsUUFBSTtBQUNGSCxjQUFRekYsSUFBUixDQUFhMEYsS0FBYixFQUFvQkMsa0JBQXBCLEVBQXdDQyxnQkFBeEM7QUFDRCxLQUZELENBRUUsT0FBT3BDLENBQVAsRUFBVTtBQUNWLGFBQU9BLENBQVA7QUFDRDtBQUNGOztBQUVELFdBQVNxQyxxQkFBVCxDQUErQm5CLE9BQS9CLEVBQXdDb0IsUUFBeEMsRUFBa0RMLE9BQWxELEVBQTJEO0FBQ3pEckYsU0FBSyxVQUFVc0UsT0FBVixFQUFtQjtBQUN0QixVQUFJcUIsU0FBUyxLQUFiO0FBQ0EsVUFBSVosUUFBUUssUUFBUUMsT0FBUixFQUFpQkssUUFBakIsRUFBMkIsVUFBVUosS0FBVixFQUFpQjtBQUN0RCxZQUFJSyxNQUFKLEVBQVk7QUFDVjtBQUNEO0FBQ0RBLGlCQUFTLElBQVQ7QUFDQSxZQUFJRCxhQUFhSixLQUFqQixFQUF3QjtBQUN0QmYsa0JBQVFELE9BQVIsRUFBaUJnQixLQUFqQjtBQUNELFNBRkQsTUFFTztBQUNMTSxrQkFBUXRCLE9BQVIsRUFBaUJnQixLQUFqQjtBQUNEO0FBQ0YsT0FWVyxFQVVULFVBQVVPLE1BQVYsRUFBa0I7QUFDbkIsWUFBSUYsTUFBSixFQUFZO0FBQ1Y7QUFDRDtBQUNEQSxpQkFBUyxJQUFUOztBQUVBRyxlQUFPeEIsT0FBUCxFQUFnQnVCLE1BQWhCO0FBQ0QsT0FqQlcsRUFpQlQsY0FBY3ZCLFFBQVF5QixNQUFSLElBQWtCLGtCQUFoQyxDQWpCUyxDQUFaOztBQW1CQSxVQUFJLENBQUNKLE1BQUQsSUFBV1osS0FBZixFQUFzQjtBQUNwQlksaUJBQVMsSUFBVDtBQUNBRyxlQUFPeEIsT0FBUCxFQUFnQlMsS0FBaEI7QUFDRDtBQUNGLEtBekJELEVBeUJHVCxPQXpCSDtBQTBCRDs7QUFFRCxXQUFTMEIsaUJBQVQsQ0FBMkIxQixPQUEzQixFQUFvQ29CLFFBQXBDLEVBQThDO0FBQzVDLFFBQUlBLFNBQVM1QixNQUFULEtBQW9CYyxTQUF4QixFQUFtQztBQUNqQ2dCLGNBQVF0QixPQUFSLEVBQWlCb0IsU0FBU3pCLE9BQTFCO0FBQ0QsS0FGRCxNQUVPLElBQUl5QixTQUFTNUIsTUFBVCxLQUFvQmUsUUFBeEIsRUFBa0M7QUFDdkNpQixhQUFPeEIsT0FBUCxFQUFnQm9CLFNBQVN6QixPQUF6QjtBQUNELEtBRk0sTUFFQTtBQUNMQyxnQkFBVXdCLFFBQVYsRUFBb0I5RSxTQUFwQixFQUErQixVQUFVMEUsS0FBVixFQUFpQjtBQUM5QyxlQUFPZixRQUFRRCxPQUFSLEVBQWlCZ0IsS0FBakIsQ0FBUDtBQUNELE9BRkQsRUFFRyxVQUFVTyxNQUFWLEVBQWtCO0FBQ25CLGVBQU9DLE9BQU94QixPQUFQLEVBQWdCdUIsTUFBaEIsQ0FBUDtBQUNELE9BSkQ7QUFLRDtBQUNGOztBQUVELFdBQVNJLG1CQUFULENBQTZCM0IsT0FBN0IsRUFBc0M0QixhQUF0QyxFQUFxRGIsT0FBckQsRUFBOEQ7QUFDNUQsUUFBSWEsY0FBY3hDLFdBQWQsS0FBOEJZLFFBQVFaLFdBQXRDLElBQXFEMkIsWUFBWWhDLElBQWpFLElBQXlFNkMsY0FBY3hDLFdBQWQsQ0FBMEJhLE9BQTFCLEtBQXNDSixTQUFuSCxFQUE4SDtBQUM1SDZCLHdCQUFrQjFCLE9BQWxCLEVBQTJCNEIsYUFBM0I7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJYixZQUFZUCxlQUFoQixFQUFpQztBQUMvQmdCLGVBQU94QixPQUFQLEVBQWdCUSxnQkFBZ0JDLEtBQWhDO0FBQ0FELHdCQUFnQkMsS0FBaEIsR0FBd0IsSUFBeEI7QUFDRCxPQUhELE1BR08sSUFBSU0sWUFBWXpFLFNBQWhCLEVBQTJCO0FBQ2hDZ0YsZ0JBQVF0QixPQUFSLEVBQWlCNEIsYUFBakI7QUFDRCxPQUZNLE1BRUEsSUFBSTdHLFdBQVdnRyxPQUFYLENBQUosRUFBeUI7QUFDOUJJLDhCQUFzQm5CLE9BQXRCLEVBQStCNEIsYUFBL0IsRUFBOENiLE9BQTlDO0FBQ0QsT0FGTSxNQUVBO0FBQ0xPLGdCQUFRdEIsT0FBUixFQUFpQjRCLGFBQWpCO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQVMzQixPQUFULENBQWlCRCxPQUFqQixFQUEwQmdCLEtBQTFCLEVBQWlDO0FBQy9CLFFBQUloQixZQUFZZ0IsS0FBaEIsRUFBdUI7QUFDckJRLGFBQU94QixPQUFQLEVBQWdCVSxpQkFBaEI7QUFDRCxLQUZELE1BRU8sSUFBSTlGLGlCQUFpQm9HLEtBQWpCLENBQUosRUFBNkI7QUFDbENXLDBCQUFvQjNCLE9BQXBCLEVBQTZCZ0IsS0FBN0IsRUFBb0NILFFBQVFHLEtBQVIsQ0FBcEM7QUFDRCxLQUZNLE1BRUE7QUFDTE0sY0FBUXRCLE9BQVIsRUFBaUJnQixLQUFqQjtBQUNEO0FBQ0Y7O0FBRUQsV0FBU2EsZ0JBQVQsQ0FBMEI3QixPQUExQixFQUFtQztBQUNqQyxRQUFJQSxRQUFROEIsUUFBWixFQUFzQjtBQUNwQjlCLGNBQVE4QixRQUFSLENBQWlCOUIsUUFBUUwsT0FBekI7QUFDRDs7QUFFRG9DLFlBQVEvQixPQUFSO0FBQ0Q7O0FBRUQsV0FBU3NCLE9BQVQsQ0FBaUJ0QixPQUFqQixFQUEwQmdCLEtBQTFCLEVBQWlDO0FBQy9CLFFBQUloQixRQUFRUixNQUFSLEtBQW1CYSxPQUF2QixFQUFnQztBQUM5QjtBQUNEOztBQUVETCxZQUFRTCxPQUFSLEdBQWtCcUIsS0FBbEI7QUFDQWhCLFlBQVFSLE1BQVIsR0FBaUJjLFNBQWpCOztBQUVBLFFBQUlOLFFBQVFnQyxZQUFSLENBQXFCQyxNQUFyQixLQUFnQyxDQUFwQyxFQUF1QztBQUNyQ3ZHLFdBQUtxRyxPQUFMLEVBQWMvQixPQUFkO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTd0IsTUFBVCxDQUFnQnhCLE9BQWhCLEVBQXlCdUIsTUFBekIsRUFBaUM7QUFDL0IsUUFBSXZCLFFBQVFSLE1BQVIsS0FBbUJhLE9BQXZCLEVBQWdDO0FBQzlCO0FBQ0Q7QUFDREwsWUFBUVIsTUFBUixHQUFpQmUsUUFBakI7QUFDQVAsWUFBUUwsT0FBUixHQUFrQjRCLE1BQWxCOztBQUVBN0YsU0FBS21HLGdCQUFMLEVBQXVCN0IsT0FBdkI7QUFDRDs7QUFFRCxXQUFTSixTQUFULENBQW1CVixNQUFuQixFQUEyQkMsS0FBM0IsRUFBa0NILGFBQWxDLEVBQWlEQyxXQUFqRCxFQUE4RDtBQUM1RCxRQUFJK0MsZUFBZTlDLE9BQU84QyxZQUExQjtBQUNBLFFBQUlDLFNBQVNELGFBQWFDLE1BQTFCOztBQUdBL0MsV0FBTzRDLFFBQVAsR0FBa0IsSUFBbEI7O0FBRUFFLGlCQUFhQyxNQUFiLElBQXVCOUMsS0FBdkI7QUFDQTZDLGlCQUFhQyxTQUFTM0IsU0FBdEIsSUFBbUN0QixhQUFuQztBQUNBZ0QsaUJBQWFDLFNBQVMxQixRQUF0QixJQUFrQ3RCLFdBQWxDOztBQUVBLFFBQUlnRCxXQUFXLENBQVgsSUFBZ0IvQyxPQUFPTSxNQUEzQixFQUFtQztBQUNqQzlELFdBQUtxRyxPQUFMLEVBQWM3QyxNQUFkO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTNkMsT0FBVCxDQUFpQi9CLE9BQWpCLEVBQTBCO0FBQ3hCLFFBQUlrQyxjQUFjbEMsUUFBUWdDLFlBQTFCO0FBQ0EsUUFBSUcsVUFBVW5DLFFBQVFSLE1BQXRCOztBQUVBLFFBQUkwQyxZQUFZRCxNQUFaLEtBQXVCLENBQTNCLEVBQThCO0FBQzVCO0FBQ0Q7O0FBRUQsUUFBSTlDLFFBQVEsS0FBSyxDQUFqQjtBQUFBLFFBQ0l4RCxXQUFXLEtBQUssQ0FEcEI7QUFBQSxRQUVJeUcsU0FBU3BDLFFBQVFMLE9BRnJCOztBQUlBLFNBQUssSUFBSXBCLElBQUksQ0FBYixFQUFnQkEsSUFBSTJELFlBQVlELE1BQWhDLEVBQXdDMUQsS0FBSyxDQUE3QyxFQUFnRDtBQUM5Q1ksY0FBUStDLFlBQVkzRCxDQUFaLENBQVI7QUFDQTVDLGlCQUFXdUcsWUFBWTNELElBQUk0RCxPQUFoQixDQUFYOztBQUVBLFVBQUloRCxLQUFKLEVBQVc7QUFDVE8sdUJBQWV5QyxPQUFmLEVBQXdCaEQsS0FBeEIsRUFBK0J4RCxRQUEvQixFQUF5Q3lHLE1BQXpDO0FBQ0QsT0FGRCxNQUVPO0FBQ0x6RyxpQkFBU3lHLE1BQVQ7QUFDRDtBQUNGOztBQUVEcEMsWUFBUWdDLFlBQVIsQ0FBcUJDLE1BQXJCLEdBQThCLENBQTlCO0FBQ0Q7O0FBRUQsV0FBU0ksUUFBVCxDQUFrQjFHLFFBQWxCLEVBQTRCeUcsTUFBNUIsRUFBb0M7QUFDbEMsUUFBSTtBQUNGLGFBQU96RyxTQUFTeUcsTUFBVCxDQUFQO0FBQ0QsS0FGRCxDQUVFLE9BQU90RCxDQUFQLEVBQVU7QUFDVjBCLHNCQUFnQkMsS0FBaEIsR0FBd0IzQixDQUF4QjtBQUNBLGFBQU8wQixlQUFQO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTZCxjQUFULENBQXdCeUMsT0FBeEIsRUFBaUNuQyxPQUFqQyxFQUEwQ3JFLFFBQTFDLEVBQW9EeUcsTUFBcEQsRUFBNEQ7QUFDMUQsUUFBSUUsY0FBY3ZILFdBQVdZLFFBQVgsQ0FBbEI7QUFBQSxRQUNJcUYsUUFBUSxLQUFLLENBRGpCO0FBQUEsUUFFSVAsUUFBUSxLQUFLLENBRmpCO0FBQUEsUUFHSThCLFlBQVksS0FBSyxDQUhyQjtBQUFBLFFBSUlDLFNBQVMsS0FBSyxDQUpsQjs7QUFNQSxRQUFJRixXQUFKLEVBQWlCO0FBQ2Z0QixjQUFRcUIsU0FBUzFHLFFBQVQsRUFBbUJ5RyxNQUFuQixDQUFSOztBQUVBLFVBQUlwQixVQUFVUixlQUFkLEVBQStCO0FBQzdCZ0MsaUJBQVMsSUFBVDtBQUNBL0IsZ0JBQVFPLE1BQU1QLEtBQWQ7QUFDQU8sY0FBTVAsS0FBTixHQUFjLElBQWQ7QUFDRCxPQUpELE1BSU87QUFDTDhCLG9CQUFZLElBQVo7QUFDRDs7QUFFRCxVQUFJdkMsWUFBWWdCLEtBQWhCLEVBQXVCO0FBQ3JCUSxlQUFPeEIsT0FBUCxFQUFnQlksaUJBQWhCO0FBQ0E7QUFDRDtBQUNGLEtBZkQsTUFlTztBQUNMSSxjQUFRb0IsTUFBUjtBQUNBRyxrQkFBWSxJQUFaO0FBQ0Q7O0FBRUQsUUFBSXZDLFFBQVFSLE1BQVIsS0FBbUJhLE9BQXZCLEVBQWdDO0FBQzlCO0FBQ0QsS0FGRCxNQUVPLElBQUlpQyxlQUFlQyxTQUFuQixFQUE4QjtBQUNuQ3RDLGNBQVFELE9BQVIsRUFBaUJnQixLQUFqQjtBQUNELEtBRk0sTUFFQSxJQUFJd0IsTUFBSixFQUFZO0FBQ2pCaEIsYUFBT3hCLE9BQVAsRUFBZ0JTLEtBQWhCO0FBQ0QsS0FGTSxNQUVBLElBQUkwQixZQUFZN0IsU0FBaEIsRUFBMkI7QUFDaENnQixjQUFRdEIsT0FBUixFQUFpQmdCLEtBQWpCO0FBQ0QsS0FGTSxNQUVBLElBQUltQixZQUFZNUIsUUFBaEIsRUFBMEI7QUFDL0JpQixhQUFPeEIsT0FBUCxFQUFnQmdCLEtBQWhCO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTeUIsaUJBQVQsQ0FBMkJ6QyxPQUEzQixFQUFvQzBDLFFBQXBDLEVBQThDO0FBQzVDLFFBQUk7QUFDRkEsZUFBUyxTQUFTQyxjQUFULENBQXdCM0IsS0FBeEIsRUFBK0I7QUFDdENmLGdCQUFRRCxPQUFSLEVBQWlCZ0IsS0FBakI7QUFDRCxPQUZELEVBRUcsU0FBUzRCLGFBQVQsQ0FBdUJyQixNQUF2QixFQUErQjtBQUNoQ0MsZUFBT3hCLE9BQVAsRUFBZ0J1QixNQUFoQjtBQUNELE9BSkQ7QUFLRCxLQU5ELENBTUUsT0FBT3pDLENBQVAsRUFBVTtBQUNWMEMsYUFBT3hCLE9BQVAsRUFBZ0JsQixDQUFoQjtBQUNEO0FBQ0Y7O0FBRUQsTUFBSStELEtBQUssQ0FBVDtBQUNBLFdBQVNDLE1BQVQsR0FBa0I7QUFDaEIsV0FBT0QsSUFBUDtBQUNEOztBQUVELFdBQVN0RCxXQUFULENBQXFCUyxPQUFyQixFQUE4QjtBQUM1QkEsWUFBUVYsVUFBUixJQUFzQnVELElBQXRCO0FBQ0E3QyxZQUFRUixNQUFSLEdBQWlCbEQsU0FBakI7QUFDQTBELFlBQVFMLE9BQVIsR0FBa0JyRCxTQUFsQjtBQUNBMEQsWUFBUWdDLFlBQVIsR0FBdUIsRUFBdkI7QUFDRDs7QUFFRCxXQUFTZSxlQUFULEdBQTJCO0FBQ3pCLFdBQU8sSUFBSUMsS0FBSixDQUFVLHlDQUFWLENBQVA7QUFDRDs7QUFFRCxNQUFJQyxhQUFhLFlBQVk7QUFDM0IsYUFBU0EsVUFBVCxDQUFvQmxELFdBQXBCLEVBQWlDbUQsS0FBakMsRUFBd0M7QUFDdEMsV0FBS0Msb0JBQUwsR0FBNEJwRCxXQUE1QjtBQUNBLFdBQUtDLE9BQUwsR0FBZSxJQUFJRCxXQUFKLENBQWdCVixJQUFoQixDQUFmOztBQUVBLFVBQUksQ0FBQyxLQUFLVyxPQUFMLENBQWFWLFVBQWIsQ0FBTCxFQUErQjtBQUM3QkMsb0JBQVksS0FBS1MsT0FBakI7QUFDRDs7QUFFRCxVQUFJOUUsUUFBUWdJLEtBQVIsQ0FBSixFQUFvQjtBQUNsQixhQUFLakIsTUFBTCxHQUFjaUIsTUFBTWpCLE1BQXBCO0FBQ0EsYUFBS21CLFVBQUwsR0FBa0JGLE1BQU1qQixNQUF4Qjs7QUFFQSxhQUFLdEMsT0FBTCxHQUFlLElBQUkxRSxLQUFKLENBQVUsS0FBS2dILE1BQWYsQ0FBZjs7QUFFQSxZQUFJLEtBQUtBLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckJYLGtCQUFRLEtBQUt0QixPQUFiLEVBQXNCLEtBQUtMLE9BQTNCO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsZUFBS3NDLE1BQUwsR0FBYyxLQUFLQSxNQUFMLElBQWUsQ0FBN0I7QUFDQSxlQUFLb0IsVUFBTCxDQUFnQkgsS0FBaEI7QUFDQSxjQUFJLEtBQUtFLFVBQUwsS0FBb0IsQ0FBeEIsRUFBMkI7QUFDekI5QixvQkFBUSxLQUFLdEIsT0FBYixFQUFzQixLQUFLTCxPQUEzQjtBQUNEO0FBQ0Y7QUFDRixPQWZELE1BZU87QUFDTDZCLGVBQU8sS0FBS3hCLE9BQVosRUFBcUIrQyxpQkFBckI7QUFDRDtBQUNGOztBQUVERSxlQUFXN0gsU0FBWCxDQUFxQmlJLFVBQXJCLEdBQWtDLFNBQVNBLFVBQVQsQ0FBb0JILEtBQXBCLEVBQTJCO0FBQzNELFdBQUssSUFBSTNFLElBQUksQ0FBYixFQUFnQixLQUFLaUIsTUFBTCxLQUFnQmEsT0FBaEIsSUFBMkI5QixJQUFJMkUsTUFBTWpCLE1BQXJELEVBQTZEMUQsR0FBN0QsRUFBa0U7QUFDaEUsYUFBSytFLFVBQUwsQ0FBZ0JKLE1BQU0zRSxDQUFOLENBQWhCLEVBQTBCQSxDQUExQjtBQUNEO0FBQ0YsS0FKRDs7QUFNQTBFLGVBQVc3SCxTQUFYLENBQXFCa0ksVUFBckIsR0FBa0MsU0FBU0EsVUFBVCxDQUFvQkMsS0FBcEIsRUFBMkJoRixDQUEzQixFQUE4QjtBQUM5RCxVQUFJaUYsSUFBSSxLQUFLTCxvQkFBYjtBQUNBLFVBQUlNLGFBQWFELEVBQUV2RCxPQUFuQjs7QUFHQSxVQUFJd0QsZUFBZTVELFNBQW5CLEVBQThCO0FBQzVCLFlBQUk2RCxRQUFRN0MsUUFBUTBDLEtBQVIsQ0FBWjs7QUFFQSxZQUFJRyxVQUFVM0UsSUFBVixJQUFrQndFLE1BQU0vRCxNQUFOLEtBQWlCYSxPQUF2QyxFQUFnRDtBQUM5QyxlQUFLc0QsVUFBTCxDQUFnQkosTUFBTS9ELE1BQXRCLEVBQThCakIsQ0FBOUIsRUFBaUNnRixNQUFNNUQsT0FBdkM7QUFDRCxTQUZELE1BRU8sSUFBSSxPQUFPK0QsS0FBUCxLQUFpQixVQUFyQixFQUFpQztBQUN0QyxlQUFLTixVQUFMO0FBQ0EsZUFBS3pELE9BQUwsQ0FBYXBCLENBQWIsSUFBa0JnRixLQUFsQjtBQUNELFNBSE0sTUFHQSxJQUFJQyxNQUFNSSxTQUFWLEVBQXFCO0FBQzFCLGNBQUk1RCxVQUFVLElBQUl3RCxDQUFKLENBQU1uRSxJQUFOLENBQWQ7QUFDQXNDLDhCQUFvQjNCLE9BQXBCLEVBQTZCdUQsS0FBN0IsRUFBb0NHLEtBQXBDO0FBQ0EsZUFBS0csYUFBTCxDQUFtQjdELE9BQW5CLEVBQTRCekIsQ0FBNUI7QUFDRCxTQUpNLE1BSUE7QUFDTCxlQUFLc0YsYUFBTCxDQUFtQixJQUFJTCxDQUFKLENBQU0sVUFBVUMsVUFBVixFQUFzQjtBQUM3QyxtQkFBT0EsV0FBV0YsS0FBWCxDQUFQO0FBQ0QsV0FGa0IsQ0FBbkIsRUFFSWhGLENBRko7QUFHRDtBQUNGLE9BakJELE1BaUJPO0FBQ0wsYUFBS3NGLGFBQUwsQ0FBbUJKLFdBQVdGLEtBQVgsQ0FBbkIsRUFBc0NoRixDQUF0QztBQUNEO0FBQ0YsS0F6QkQ7O0FBMkJBMEUsZUFBVzdILFNBQVgsQ0FBcUJ1SSxVQUFyQixHQUFrQyxTQUFTQSxVQUFULENBQW9CRyxLQUFwQixFQUEyQnZGLENBQTNCLEVBQThCeUMsS0FBOUIsRUFBcUM7QUFDckUsVUFBSWhCLFVBQVUsS0FBS0EsT0FBbkI7O0FBR0EsVUFBSUEsUUFBUVIsTUFBUixLQUFtQmEsT0FBdkIsRUFBZ0M7QUFDOUIsYUFBSytDLFVBQUw7O0FBRUEsWUFBSVUsVUFBVXZELFFBQWQsRUFBd0I7QUFDdEJpQixpQkFBT3hCLE9BQVAsRUFBZ0JnQixLQUFoQjtBQUNELFNBRkQsTUFFTztBQUNMLGVBQUtyQixPQUFMLENBQWFwQixDQUFiLElBQWtCeUMsS0FBbEI7QUFDRDtBQUNGOztBQUVELFVBQUksS0FBS29DLFVBQUwsS0FBb0IsQ0FBeEIsRUFBMkI7QUFDekI5QixnQkFBUXRCLE9BQVIsRUFBaUIsS0FBS0wsT0FBdEI7QUFDRDtBQUNGLEtBakJEOztBQW1CQXNELGVBQVc3SCxTQUFYLENBQXFCeUksYUFBckIsR0FBcUMsU0FBU0EsYUFBVCxDQUF1QjdELE9BQXZCLEVBQWdDekIsQ0FBaEMsRUFBbUM7QUFDdEUsVUFBSXdGLGFBQWEsSUFBakI7O0FBRUFuRSxnQkFBVUksT0FBVixFQUFtQjFELFNBQW5CLEVBQThCLFVBQVUwRSxLQUFWLEVBQWlCO0FBQzdDLGVBQU8rQyxXQUFXSixVQUFYLENBQXNCckQsU0FBdEIsRUFBaUMvQixDQUFqQyxFQUFvQ3lDLEtBQXBDLENBQVA7QUFDRCxPQUZELEVBRUcsVUFBVU8sTUFBVixFQUFrQjtBQUNuQixlQUFPd0MsV0FBV0osVUFBWCxDQUFzQnBELFFBQXRCLEVBQWdDaEMsQ0FBaEMsRUFBbUNnRCxNQUFuQyxDQUFQO0FBQ0QsT0FKRDtBQUtELEtBUkQ7O0FBVUEsV0FBTzBCLFVBQVA7QUFDRCxHQTVGZ0IsRUFBakI7O0FBOEZBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStDQSxXQUFTZSxHQUFULENBQWFDLE9BQWIsRUFBc0I7QUFDcEIsV0FBTyxJQUFJaEIsVUFBSixDQUFlLElBQWYsRUFBcUJnQixPQUFyQixFQUE4QmpFLE9BQXJDO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUVBLFdBQVNrRSxJQUFULENBQWNELE9BQWQsRUFBdUI7QUFDckI7QUFDQSxRQUFJbEUsY0FBYyxJQUFsQjs7QUFFQSxRQUFJLENBQUM3RSxRQUFRK0ksT0FBUixDQUFMLEVBQXVCO0FBQ3JCLGFBQU8sSUFBSWxFLFdBQUosQ0FBZ0IsVUFBVW9FLENBQVYsRUFBYTNDLE1BQWIsRUFBcUI7QUFDMUMsZUFBT0EsT0FBTyxJQUFJYixTQUFKLENBQWMsaUNBQWQsQ0FBUCxDQUFQO0FBQ0QsT0FGTSxDQUFQO0FBR0QsS0FKRCxNQUlPO0FBQ0wsYUFBTyxJQUFJWixXQUFKLENBQWdCLFVBQVVFLE9BQVYsRUFBbUJ1QixNQUFuQixFQUEyQjtBQUNoRCxZQUFJUyxTQUFTZ0MsUUFBUWhDLE1BQXJCO0FBQ0EsYUFBSyxJQUFJMUQsSUFBSSxDQUFiLEVBQWdCQSxJQUFJMEQsTUFBcEIsRUFBNEIxRCxHQUE1QixFQUFpQztBQUMvQndCLHNCQUFZRSxPQUFaLENBQW9CZ0UsUUFBUTFGLENBQVIsQ0FBcEIsRUFBZ0NRLElBQWhDLENBQXFDa0IsT0FBckMsRUFBOEN1QixNQUE5QztBQUNEO0FBQ0YsT0FMTSxDQUFQO0FBTUQ7QUFDRjs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDQSxXQUFTNEMsUUFBVCxDQUFrQjdDLE1BQWxCLEVBQTBCO0FBQ3hCO0FBQ0EsUUFBSXhCLGNBQWMsSUFBbEI7QUFDQSxRQUFJQyxVQUFVLElBQUlELFdBQUosQ0FBZ0JWLElBQWhCLENBQWQ7QUFDQW1DLFdBQU94QixPQUFQLEVBQWdCdUIsTUFBaEI7QUFDQSxXQUFPdkIsT0FBUDtBQUNEOztBQUVELFdBQVNxRSxhQUFULEdBQXlCO0FBQ3ZCLFVBQU0sSUFBSTFELFNBQUosQ0FBYyxvRkFBZCxDQUFOO0FBQ0Q7O0FBRUQsV0FBUzJELFFBQVQsR0FBb0I7QUFDbEIsVUFBTSxJQUFJM0QsU0FBSixDQUFjLHVIQUFkLENBQU47QUFDRDs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3R0EsTUFBSWlELFlBQVksWUFBWTtBQUMxQixhQUFTVyxPQUFULENBQWlCN0IsUUFBakIsRUFBMkI7QUFDekIsV0FBS3BELFVBQUwsSUFBbUJ3RCxRQUFuQjtBQUNBLFdBQUtuRCxPQUFMLEdBQWUsS0FBS0gsTUFBTCxHQUFjbEQsU0FBN0I7QUFDQSxXQUFLMEYsWUFBTCxHQUFvQixFQUFwQjs7QUFFQSxVQUFJM0MsU0FBU3FELFFBQWIsRUFBdUI7QUFDckIsZUFBT0EsUUFBUCxLQUFvQixVQUFwQixJQUFrQzJCLGVBQWxDO0FBQ0Esd0JBQWdCRSxPQUFoQixHQUEwQjlCLGtCQUFrQixJQUFsQixFQUF3QkMsUUFBeEIsQ0FBMUIsR0FBOEQ0QixVQUE5RDtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkFDLFlBQVFuSixTQUFSLENBQWtCb0osS0FBbEIsR0FBMEIsU0FBU0MsTUFBVCxDQUFnQnhGLFdBQWhCLEVBQTZCO0FBQ3JELGFBQU8sS0FBS0YsSUFBTCxDQUFVLElBQVYsRUFBZ0JFLFdBQWhCLENBQVA7QUFDRCxLQUZEOztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3Q0FzRixZQUFRbkosU0FBUixDQUFrQnNKLE9BQWxCLEdBQTRCLFNBQVNDLFFBQVQsQ0FBa0JoSixRQUFsQixFQUE0QjtBQUN0RCxVQUFJcUUsVUFBVSxJQUFkO0FBQ0EsVUFBSVosY0FBY1ksUUFBUVosV0FBMUI7O0FBRUEsVUFBSXJFLFdBQVdZLFFBQVgsQ0FBSixFQUEwQjtBQUN4QixlQUFPcUUsUUFBUWpCLElBQVIsQ0FBYSxVQUFVaUMsS0FBVixFQUFpQjtBQUNuQyxpQkFBTzVCLFlBQVlhLE9BQVosQ0FBb0J0RSxVQUFwQixFQUFnQ29ELElBQWhDLENBQXFDLFlBQVk7QUFDdEQsbUJBQU9pQyxLQUFQO0FBQ0QsV0FGTSxDQUFQO0FBR0QsU0FKTSxFQUlKLFVBQVVPLE1BQVYsRUFBa0I7QUFDbkIsaUJBQU9uQyxZQUFZYSxPQUFaLENBQW9CdEUsVUFBcEIsRUFBZ0NvRCxJQUFoQyxDQUFxQyxZQUFZO0FBQ3RELGtCQUFNd0MsTUFBTjtBQUNELFdBRk0sQ0FBUDtBQUdELFNBUk0sQ0FBUDtBQVNEOztBQUVELGFBQU92QixRQUFRakIsSUFBUixDQUFhcEQsUUFBYixFQUF1QkEsUUFBdkIsQ0FBUDtBQUNELEtBakJEOztBQW1CQSxXQUFPNEksT0FBUDtBQUNELEdBdFFlLEVBQWhCOztBQXdRQVgsWUFBVXhJLFNBQVYsQ0FBb0IyRCxJQUFwQixHQUEyQkEsSUFBM0I7QUFDQTZFLFlBQVVJLEdBQVYsR0FBZ0JBLEdBQWhCO0FBQ0FKLFlBQVVNLElBQVYsR0FBaUJBLElBQWpCO0FBQ0FOLFlBQVUzRCxPQUFWLEdBQW9CSixTQUFwQjtBQUNBK0QsWUFBVXBDLE1BQVYsR0FBbUI0QyxRQUFuQjtBQUNBUixZQUFVZ0IsYUFBVixHQUEwQjVJLFlBQTFCO0FBQ0E0SCxZQUFVaUIsUUFBVixHQUFxQjNJLE9BQXJCO0FBQ0EwSCxZQUFVa0IsS0FBVixHQUFrQnBKLElBQWxCOztBQUVBO0FBQ0EsV0FBU3FKLFFBQVQsR0FBb0I7QUFDbEIsUUFBSUMsUUFBUSxLQUFLLENBQWpCOztBQUVBLFFBQUksT0FBT3hLLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDakN3SyxjQUFReEssTUFBUjtBQUNELEtBRkQsTUFFTyxJQUFJLE9BQU9vQyxJQUFQLEtBQWdCLFdBQXBCLEVBQWlDO0FBQ3RDb0ksY0FBUXBJLElBQVI7QUFDRCxLQUZNLE1BRUE7QUFDTCxVQUFJO0FBQ0ZvSSxnQkFBUXRHLFNBQVMsYUFBVCxHQUFSO0FBQ0QsT0FGRCxDQUVFLE9BQU9JLENBQVAsRUFBVTtBQUNWLGNBQU0sSUFBSWtFLEtBQUosQ0FBVSwwRUFBVixDQUFOO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJaUMsSUFBSUQsTUFBTVQsT0FBZDs7QUFFQSxRQUFJVSxDQUFKLEVBQU87QUFDTCxVQUFJQyxrQkFBa0IsSUFBdEI7QUFDQSxVQUFJO0FBQ0ZBLDBCQUFrQi9KLE9BQU9DLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQjJKLEVBQUVoRixPQUFGLEVBQS9CLENBQWxCO0FBQ0QsT0FGRCxDQUVFLE9BQU9uQixDQUFQLEVBQVU7QUFDVjtBQUNEOztBQUVELFVBQUlvRyxvQkFBb0Isa0JBQXBCLElBQTBDLENBQUNELEVBQUVFLElBQWpELEVBQXVEO0FBQ3JEO0FBQ0Q7QUFDRjs7QUFFREgsVUFBTVQsT0FBTixHQUFnQlgsU0FBaEI7QUFDRDs7QUFFRDtBQUNBQSxZQUFVbUIsUUFBVixHQUFxQkEsUUFBckI7QUFDQW5CLFlBQVVXLE9BQVYsR0FBb0JYLFNBQXBCOztBQUVBLFNBQU9BLFNBQVA7QUFFQyxDQWxwQ0EsQ0FBRDs7QUFzcENBLG9DOzs7Ozs7Ozs7Ozs7Ozs7OztBQzlwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTd0IsWUFBVCxHQUF3QjtBQUN0QixPQUFLQyxPQUFMLEdBQWUsS0FBS0EsT0FBTCxJQUFnQixFQUEvQjtBQUNBLE9BQUtDLGFBQUwsR0FBcUIsS0FBS0EsYUFBTCxJQUFzQmhKLFNBQTNDO0FBQ0Q7QUFDRDNCLE9BQU9ELE9BQVAsR0FBaUIwSyxZQUFqQjs7QUFFQTtBQUNBQSxhQUFhQSxZQUFiLEdBQTRCQSxZQUE1Qjs7QUFFQUEsYUFBYWhLLFNBQWIsQ0FBdUJpSyxPQUF2QixHQUFpQy9JLFNBQWpDO0FBQ0E4SSxhQUFhaEssU0FBYixDQUF1QmtLLGFBQXZCLEdBQXVDaEosU0FBdkM7O0FBRUE7QUFDQTtBQUNBOEksYUFBYUcsbUJBQWIsR0FBbUMsRUFBbkM7O0FBRUE7QUFDQTtBQUNBSCxhQUFhaEssU0FBYixDQUF1Qm9LLGVBQXZCLEdBQXlDLFVBQVNDLENBQVQsRUFBWTtBQUNuRCxNQUFJLENBQUNDLFNBQVNELENBQVQsQ0FBRCxJQUFnQkEsSUFBSSxDQUFwQixJQUF5QkUsTUFBTUYsQ0FBTixDQUE3QixFQUNFLE1BQU05RSxVQUFVLDZCQUFWLENBQU47QUFDRixPQUFLMkUsYUFBTCxHQUFxQkcsQ0FBckI7QUFDQSxTQUFPLElBQVA7QUFDRCxDQUxEOztBQU9BTCxhQUFhaEssU0FBYixDQUF1QndLLElBQXZCLEdBQThCLFVBQVM5SyxJQUFULEVBQWU7QUFDM0MsTUFBSStLLEVBQUosRUFBUUMsT0FBUixFQUFpQnZLLEdBQWpCLEVBQXNCd0ssSUFBdEIsRUFBNEJ4SCxDQUE1QixFQUErQnlILFNBQS9COztBQUVBLE1BQUksQ0FBQyxLQUFLWCxPQUFWLEVBQ0UsS0FBS0EsT0FBTCxHQUFlLEVBQWY7O0FBRUY7QUFDQSxNQUFJdkssU0FBUyxPQUFiLEVBQXNCO0FBQ3BCLFFBQUksQ0FBQyxLQUFLdUssT0FBTCxDQUFhNUUsS0FBZCxJQUNDd0YsU0FBUyxLQUFLWixPQUFMLENBQWE1RSxLQUF0QixLQUFnQyxDQUFDLEtBQUs0RSxPQUFMLENBQWE1RSxLQUFiLENBQW1Cd0IsTUFEekQsRUFDa0U7QUFDaEU0RCxXQUFLcEcsVUFBVSxDQUFWLENBQUw7QUFDQSxVQUFJb0csY0FBYzdDLEtBQWxCLEVBQXlCO0FBQ3ZCLGNBQU02QyxFQUFOLENBRHVCLENBQ2I7QUFDWCxPQUZELE1BRU87QUFDTDtBQUNBLFlBQUlLLE1BQU0sSUFBSWxELEtBQUosQ0FBVSwyQ0FBMkM2QyxFQUEzQyxHQUFnRCxHQUExRCxDQUFWO0FBQ0FLLFlBQUlDLE9BQUosR0FBY04sRUFBZDtBQUNBLGNBQU1LLEdBQU47QUFDRDtBQUNGO0FBQ0Y7O0FBRURKLFlBQVUsS0FBS1QsT0FBTCxDQUFhdkssSUFBYixDQUFWOztBQUVBLE1BQUlzTCxZQUFZTixPQUFaLENBQUosRUFDRSxPQUFPLEtBQVA7O0FBRUYsTUFBSS9LLFdBQVcrSyxPQUFYLENBQUosRUFBeUI7QUFDdkIsWUFBUXJHLFVBQVV3QyxNQUFsQjtBQUNFO0FBQ0EsV0FBSyxDQUFMO0FBQ0U2RCxnQkFBUXhLLElBQVIsQ0FBYSxJQUFiO0FBQ0E7QUFDRixXQUFLLENBQUw7QUFDRXdLLGdCQUFReEssSUFBUixDQUFhLElBQWIsRUFBbUJtRSxVQUFVLENBQVYsQ0FBbkI7QUFDQTtBQUNGLFdBQUssQ0FBTDtBQUNFcUcsZ0JBQVF4SyxJQUFSLENBQWEsSUFBYixFQUFtQm1FLFVBQVUsQ0FBVixDQUFuQixFQUFpQ0EsVUFBVSxDQUFWLENBQWpDO0FBQ0E7QUFDRjtBQUNBO0FBQ0VzRyxlQUFPOUssTUFBTUcsU0FBTixDQUFnQmlMLEtBQWhCLENBQXNCL0ssSUFBdEIsQ0FBMkJtRSxTQUEzQixFQUFzQyxDQUF0QyxDQUFQO0FBQ0FxRyxnQkFBUVEsS0FBUixDQUFjLElBQWQsRUFBb0JQLElBQXBCO0FBZEo7QUFnQkQsR0FqQkQsTUFpQk8sSUFBSUUsU0FBU0gsT0FBVCxDQUFKLEVBQXVCO0FBQzVCQyxXQUFPOUssTUFBTUcsU0FBTixDQUFnQmlMLEtBQWhCLENBQXNCL0ssSUFBdEIsQ0FBMkJtRSxTQUEzQixFQUFzQyxDQUF0QyxDQUFQO0FBQ0F1RyxnQkFBWUYsUUFBUU8sS0FBUixFQUFaO0FBQ0E5SyxVQUFNeUssVUFBVS9ELE1BQWhCO0FBQ0EsU0FBSzFELElBQUksQ0FBVCxFQUFZQSxJQUFJaEQsR0FBaEIsRUFBcUJnRCxHQUFyQjtBQUNFeUgsZ0JBQVV6SCxDQUFWLEVBQWErSCxLQUFiLENBQW1CLElBQW5CLEVBQXlCUCxJQUF6QjtBQURGO0FBRUQ7O0FBRUQsU0FBTyxJQUFQO0FBQ0QsQ0FyREQ7O0FBdURBWCxhQUFhaEssU0FBYixDQUF1Qm1MLFdBQXZCLEdBQXFDLFVBQVN6TCxJQUFULEVBQWUwTCxRQUFmLEVBQXlCO0FBQzVELE1BQUlDLENBQUo7O0FBRUEsTUFBSSxDQUFDMUwsV0FBV3lMLFFBQVgsQ0FBTCxFQUNFLE1BQU03RixVQUFVLDZCQUFWLENBQU47O0FBRUYsTUFBSSxDQUFDLEtBQUswRSxPQUFWLEVBQ0UsS0FBS0EsT0FBTCxHQUFlLEVBQWY7O0FBRUY7QUFDQTtBQUNBLE1BQUksS0FBS0EsT0FBTCxDQUFhcUIsV0FBakIsRUFDRSxLQUFLZCxJQUFMLENBQVUsYUFBVixFQUF5QjlLLElBQXpCLEVBQ1VDLFdBQVd5TCxTQUFTQSxRQUFwQixJQUNBQSxTQUFTQSxRQURULEdBQ29CQSxRQUY5Qjs7QUFJRixNQUFJLENBQUMsS0FBS25CLE9BQUwsQ0FBYXZLLElBQWIsQ0FBTDtBQUNFO0FBQ0EsU0FBS3VLLE9BQUwsQ0FBYXZLLElBQWIsSUFBcUIwTCxRQUFyQixDQUZGLEtBR0ssSUFBSVAsU0FBUyxLQUFLWixPQUFMLENBQWF2SyxJQUFiLENBQVQsQ0FBSjtBQUNIO0FBQ0EsU0FBS3VLLE9BQUwsQ0FBYXZLLElBQWIsRUFBbUI2TCxJQUFuQixDQUF3QkgsUUFBeEIsRUFGRztBQUlIO0FBQ0EsU0FBS25CLE9BQUwsQ0FBYXZLLElBQWIsSUFBcUIsQ0FBQyxLQUFLdUssT0FBTCxDQUFhdkssSUFBYixDQUFELEVBQXFCMEwsUUFBckIsQ0FBckI7O0FBRUY7QUFDQSxNQUFJUCxTQUFTLEtBQUtaLE9BQUwsQ0FBYXZLLElBQWIsQ0FBVCxLQUFnQyxDQUFDLEtBQUt1SyxPQUFMLENBQWF2SyxJQUFiLEVBQW1COEwsTUFBeEQsRUFBZ0U7QUFDOUQsUUFBSSxDQUFDUixZQUFZLEtBQUtkLGFBQWpCLENBQUwsRUFBc0M7QUFDcENtQixVQUFJLEtBQUtuQixhQUFUO0FBQ0QsS0FGRCxNQUVPO0FBQ0xtQixVQUFJckIsYUFBYUcsbUJBQWpCO0FBQ0Q7O0FBRUQsUUFBSWtCLEtBQUtBLElBQUksQ0FBVCxJQUFjLEtBQUtwQixPQUFMLENBQWF2SyxJQUFiLEVBQW1CbUgsTUFBbkIsR0FBNEJ3RSxDQUE5QyxFQUFpRDtBQUMvQyxXQUFLcEIsT0FBTCxDQUFhdkssSUFBYixFQUFtQjhMLE1BQW5CLEdBQTRCLElBQTVCO0FBQ0FDLGNBQVFwRyxLQUFSLENBQWMsa0RBQ0EscUNBREEsR0FFQSxrREFGZCxFQUdjLEtBQUs0RSxPQUFMLENBQWF2SyxJQUFiLEVBQW1CbUgsTUFIakM7QUFJQSxVQUFJLE9BQU80RSxRQUFRQyxLQUFmLEtBQXlCLFVBQTdCLEVBQXlDO0FBQ3ZDO0FBQ0FELGdCQUFRQyxLQUFSO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQU8sSUFBUDtBQUNELENBaEREOztBQWtEQTFCLGFBQWFoSyxTQUFiLENBQXVCMkwsRUFBdkIsR0FBNEIzQixhQUFhaEssU0FBYixDQUF1Qm1MLFdBQW5EOztBQUVBbkIsYUFBYWhLLFNBQWIsQ0FBdUI0TCxJQUF2QixHQUE4QixVQUFTbE0sSUFBVCxFQUFlMEwsUUFBZixFQUF5QjtBQUNyRCxNQUFJLENBQUN6TCxXQUFXeUwsUUFBWCxDQUFMLEVBQ0UsTUFBTTdGLFVBQVUsNkJBQVYsQ0FBTjs7QUFFRixNQUFJc0csUUFBUSxLQUFaOztBQUVBLFdBQVNDLENBQVQsR0FBYTtBQUNYLFNBQUtDLGNBQUwsQ0FBb0JyTSxJQUFwQixFQUEwQm9NLENBQTFCOztBQUVBLFFBQUksQ0FBQ0QsS0FBTCxFQUFZO0FBQ1ZBLGNBQVEsSUFBUjtBQUNBVCxlQUFTRixLQUFULENBQWUsSUFBZixFQUFxQjdHLFNBQXJCO0FBQ0Q7QUFDRjs7QUFFRHlILElBQUVWLFFBQUYsR0FBYUEsUUFBYjtBQUNBLE9BQUtPLEVBQUwsQ0FBUWpNLElBQVIsRUFBY29NLENBQWQ7O0FBRUEsU0FBTyxJQUFQO0FBQ0QsQ0FuQkQ7O0FBcUJBO0FBQ0E5QixhQUFhaEssU0FBYixDQUF1QitMLGNBQXZCLEdBQXdDLFVBQVNyTSxJQUFULEVBQWUwTCxRQUFmLEVBQXlCO0FBQy9ELE1BQUlZLElBQUosRUFBVUMsUUFBVixFQUFvQnBGLE1BQXBCLEVBQTRCMUQsQ0FBNUI7O0FBRUEsTUFBSSxDQUFDeEQsV0FBV3lMLFFBQVgsQ0FBTCxFQUNFLE1BQU03RixVQUFVLDZCQUFWLENBQU47O0FBRUYsTUFBSSxDQUFDLEtBQUswRSxPQUFOLElBQWlCLENBQUMsS0FBS0EsT0FBTCxDQUFhdkssSUFBYixDQUF0QixFQUNFLE9BQU8sSUFBUDs7QUFFRnNNLFNBQU8sS0FBSy9CLE9BQUwsQ0FBYXZLLElBQWIsQ0FBUDtBQUNBbUgsV0FBU21GLEtBQUtuRixNQUFkO0FBQ0FvRixhQUFXLENBQUMsQ0FBWjs7QUFFQSxNQUFJRCxTQUFTWixRQUFULElBQ0N6TCxXQUFXcU0sS0FBS1osUUFBaEIsS0FBNkJZLEtBQUtaLFFBQUwsS0FBa0JBLFFBRHBELEVBQytEO0FBQzdELFdBQU8sS0FBS25CLE9BQUwsQ0FBYXZLLElBQWIsQ0FBUDtBQUNBLFFBQUksS0FBS3VLLE9BQUwsQ0FBYThCLGNBQWpCLEVBQ0UsS0FBS3ZCLElBQUwsQ0FBVSxnQkFBVixFQUE0QjlLLElBQTVCLEVBQWtDMEwsUUFBbEM7QUFFSCxHQU5ELE1BTU8sSUFBSVAsU0FBU21CLElBQVQsQ0FBSixFQUFvQjtBQUN6QixTQUFLN0ksSUFBSTBELE1BQVQsRUFBaUIxRCxNQUFNLENBQXZCLEdBQTJCO0FBQ3pCLFVBQUk2SSxLQUFLN0ksQ0FBTCxNQUFZaUksUUFBWixJQUNDWSxLQUFLN0ksQ0FBTCxFQUFRaUksUUFBUixJQUFvQlksS0FBSzdJLENBQUwsRUFBUWlJLFFBQVIsS0FBcUJBLFFBRDlDLEVBQ3lEO0FBQ3ZEYSxtQkFBVzlJLENBQVg7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsUUFBSThJLFdBQVcsQ0FBZixFQUNFLE9BQU8sSUFBUDs7QUFFRixRQUFJRCxLQUFLbkYsTUFBTCxLQUFnQixDQUFwQixFQUF1QjtBQUNyQm1GLFdBQUtuRixNQUFMLEdBQWMsQ0FBZDtBQUNBLGFBQU8sS0FBS29ELE9BQUwsQ0FBYXZLLElBQWIsQ0FBUDtBQUNELEtBSEQsTUFHTztBQUNMc00sV0FBS0UsTUFBTCxDQUFZRCxRQUFaLEVBQXNCLENBQXRCO0FBQ0Q7O0FBRUQsUUFBSSxLQUFLaEMsT0FBTCxDQUFhOEIsY0FBakIsRUFDRSxLQUFLdkIsSUFBTCxDQUFVLGdCQUFWLEVBQTRCOUssSUFBNUIsRUFBa0MwTCxRQUFsQztBQUNIOztBQUVELFNBQU8sSUFBUDtBQUNELENBM0NEOztBQTZDQXBCLGFBQWFoSyxTQUFiLENBQXVCbU0sa0JBQXZCLEdBQTRDLFVBQVN6TSxJQUFULEVBQWU7QUFDekQsTUFBSTBNLEdBQUosRUFBU3hCLFNBQVQ7O0FBRUEsTUFBSSxDQUFDLEtBQUtYLE9BQVYsRUFDRSxPQUFPLElBQVA7O0FBRUY7QUFDQSxNQUFJLENBQUMsS0FBS0EsT0FBTCxDQUFhOEIsY0FBbEIsRUFBa0M7QUFDaEMsUUFBSTFILFVBQVV3QyxNQUFWLEtBQXFCLENBQXpCLEVBQ0UsS0FBS29ELE9BQUwsR0FBZSxFQUFmLENBREYsS0FFSyxJQUFJLEtBQUtBLE9BQUwsQ0FBYXZLLElBQWIsQ0FBSixFQUNILE9BQU8sS0FBS3VLLE9BQUwsQ0FBYXZLLElBQWIsQ0FBUDtBQUNGLFdBQU8sSUFBUDtBQUNEOztBQUVEO0FBQ0EsTUFBSTJFLFVBQVV3QyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCLFNBQUt1RixHQUFMLElBQVksS0FBS25DLE9BQWpCLEVBQTBCO0FBQ3hCLFVBQUltQyxRQUFRLGdCQUFaLEVBQThCO0FBQzlCLFdBQUtELGtCQUFMLENBQXdCQyxHQUF4QjtBQUNEO0FBQ0QsU0FBS0Qsa0JBQUwsQ0FBd0IsZ0JBQXhCO0FBQ0EsU0FBS2xDLE9BQUwsR0FBZSxFQUFmO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBRURXLGNBQVksS0FBS1gsT0FBTCxDQUFhdkssSUFBYixDQUFaOztBQUVBLE1BQUlDLFdBQVdpTCxTQUFYLENBQUosRUFBMkI7QUFDekIsU0FBS21CLGNBQUwsQ0FBb0JyTSxJQUFwQixFQUEwQmtMLFNBQTFCO0FBQ0QsR0FGRCxNQUVPLElBQUlBLFNBQUosRUFBZTtBQUNwQjtBQUNBLFdBQU9BLFVBQVUvRCxNQUFqQjtBQUNFLFdBQUtrRixjQUFMLENBQW9Cck0sSUFBcEIsRUFBMEJrTCxVQUFVQSxVQUFVL0QsTUFBVixHQUFtQixDQUE3QixDQUExQjtBQURGO0FBRUQ7QUFDRCxTQUFPLEtBQUtvRCxPQUFMLENBQWF2SyxJQUFiLENBQVA7O0FBRUEsU0FBTyxJQUFQO0FBQ0QsQ0F0Q0Q7O0FBd0NBc0ssYUFBYWhLLFNBQWIsQ0FBdUI0SyxTQUF2QixHQUFtQyxVQUFTbEwsSUFBVCxFQUFlO0FBQ2hELE1BQUkyTSxHQUFKO0FBQ0EsTUFBSSxDQUFDLEtBQUtwQyxPQUFOLElBQWlCLENBQUMsS0FBS0EsT0FBTCxDQUFhdkssSUFBYixDQUF0QixFQUNFMk0sTUFBTSxFQUFOLENBREYsS0FFSyxJQUFJMU0sV0FBVyxLQUFLc0ssT0FBTCxDQUFhdkssSUFBYixDQUFYLENBQUosRUFDSDJNLE1BQU0sQ0FBQyxLQUFLcEMsT0FBTCxDQUFhdkssSUFBYixDQUFELENBQU4sQ0FERyxLQUdIMk0sTUFBTSxLQUFLcEMsT0FBTCxDQUFhdkssSUFBYixFQUFtQnVMLEtBQW5CLEVBQU47QUFDRixTQUFPb0IsR0FBUDtBQUNELENBVEQ7O0FBV0FyQyxhQUFhaEssU0FBYixDQUF1QnNNLGFBQXZCLEdBQXVDLFVBQVM1TSxJQUFULEVBQWU7QUFDcEQsTUFBSSxLQUFLdUssT0FBVCxFQUFrQjtBQUNoQixRQUFJc0MsYUFBYSxLQUFLdEMsT0FBTCxDQUFhdkssSUFBYixDQUFqQjs7QUFFQSxRQUFJQyxXQUFXNE0sVUFBWCxDQUFKLEVBQ0UsT0FBTyxDQUFQLENBREYsS0FFSyxJQUFJQSxVQUFKLEVBQ0gsT0FBT0EsV0FBVzFGLE1BQWxCO0FBQ0g7QUFDRCxTQUFPLENBQVA7QUFDRCxDQVZEOztBQVlBbUQsYUFBYXNDLGFBQWIsR0FBNkIsVUFBU0UsT0FBVCxFQUFrQjlNLElBQWxCLEVBQXdCO0FBQ25ELFNBQU84TSxRQUFRRixhQUFSLENBQXNCNU0sSUFBdEIsQ0FBUDtBQUNELENBRkQ7O0FBSUEsU0FBU0MsVUFBVCxDQUFvQmEsR0FBcEIsRUFBeUI7QUFDdkIsU0FBTyxPQUFPQSxHQUFQLEtBQWUsVUFBdEI7QUFDRDs7QUFFRCxTQUFTOEosUUFBVCxDQUFrQjlKLEdBQWxCLEVBQXVCO0FBQ3JCLFNBQU8sT0FBT0EsR0FBUCxLQUFlLFFBQXRCO0FBQ0Q7O0FBRUQsU0FBU3FLLFFBQVQsQ0FBa0JySyxHQUFsQixFQUF1QjtBQUNyQixTQUFPLFFBQU9BLEdBQVAseUNBQU9BLEdBQVAsT0FBZSxRQUFmLElBQTJCQSxRQUFRLElBQTFDO0FBQ0Q7O0FBRUQsU0FBU3dLLFdBQVQsQ0FBcUJ4SyxHQUFyQixFQUEwQjtBQUN4QixTQUFPQSxRQUFRLEtBQUssQ0FBcEI7QUFDRCxDOzs7Ozs7Ozs7Ozs7OztBQzdTRDtBQUNBLElBQUlpQixVQUFVbEMsT0FBT0QsT0FBUCxHQUFpQixFQUEvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJbU4sZ0JBQUo7QUFDQSxJQUFJQyxrQkFBSjs7QUFFQSxTQUFTQyxnQkFBVCxHQUE0QjtBQUN4QixVQUFNLElBQUkvRSxLQUFKLENBQVUsaUNBQVYsQ0FBTjtBQUNIO0FBQ0QsU0FBU2dGLG1CQUFULEdBQWdDO0FBQzVCLFVBQU0sSUFBSWhGLEtBQUosQ0FBVSxtQ0FBVixDQUFOO0FBQ0g7QUFDQSxhQUFZO0FBQ1QsUUFBSTtBQUNBLFlBQUksT0FBTzFFLFVBQVAsS0FBc0IsVUFBMUIsRUFBc0M7QUFDbEN1SiwrQkFBbUJ2SixVQUFuQjtBQUNILFNBRkQsTUFFTztBQUNIdUosK0JBQW1CRSxnQkFBbkI7QUFDSDtBQUNKLEtBTkQsQ0FNRSxPQUFPakosQ0FBUCxFQUFVO0FBQ1IrSSwyQkFBbUJFLGdCQUFuQjtBQUNIO0FBQ0QsUUFBSTtBQUNBLFlBQUksT0FBT0UsWUFBUCxLQUF3QixVQUE1QixFQUF3QztBQUNwQ0gsaUNBQXFCRyxZQUFyQjtBQUNILFNBRkQsTUFFTztBQUNISCxpQ0FBcUJFLG1CQUFyQjtBQUNIO0FBQ0osS0FORCxDQU1FLE9BQU9sSixDQUFQLEVBQVU7QUFDUmdKLDZCQUFxQkUsbUJBQXJCO0FBQ0g7QUFDSixDQW5CQSxHQUFEO0FBb0JBLFNBQVNFLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlCO0FBQ3JCLFFBQUlOLHFCQUFxQnZKLFVBQXpCLEVBQXFDO0FBQ2pDO0FBQ0EsZUFBT0EsV0FBVzZKLEdBQVgsRUFBZ0IsQ0FBaEIsQ0FBUDtBQUNIO0FBQ0Q7QUFDQSxRQUFJLENBQUNOLHFCQUFxQkUsZ0JBQXJCLElBQXlDLENBQUNGLGdCQUEzQyxLQUFnRXZKLFVBQXBFLEVBQWdGO0FBQzVFdUosMkJBQW1CdkosVUFBbkI7QUFDQSxlQUFPQSxXQUFXNkosR0FBWCxFQUFnQixDQUFoQixDQUFQO0FBQ0g7QUFDRCxRQUFJO0FBQ0E7QUFDQSxlQUFPTixpQkFBaUJNLEdBQWpCLEVBQXNCLENBQXRCLENBQVA7QUFDSCxLQUhELENBR0UsT0FBTXJKLENBQU4sRUFBUTtBQUNOLFlBQUk7QUFDQTtBQUNBLG1CQUFPK0ksaUJBQWlCdk0sSUFBakIsQ0FBc0IsSUFBdEIsRUFBNEI2TSxHQUE1QixFQUFpQyxDQUFqQyxDQUFQO0FBQ0gsU0FIRCxDQUdFLE9BQU1ySixDQUFOLEVBQVE7QUFDTjtBQUNBLG1CQUFPK0ksaUJBQWlCdk0sSUFBakIsQ0FBc0IsSUFBdEIsRUFBNEI2TSxHQUE1QixFQUFpQyxDQUFqQyxDQUFQO0FBQ0g7QUFDSjtBQUdKO0FBQ0QsU0FBU0MsZUFBVCxDQUF5QkMsTUFBekIsRUFBaUM7QUFDN0IsUUFBSVAsdUJBQXVCRyxZQUEzQixFQUF5QztBQUNyQztBQUNBLGVBQU9BLGFBQWFJLE1BQWIsQ0FBUDtBQUNIO0FBQ0Q7QUFDQSxRQUFJLENBQUNQLHVCQUF1QkUsbUJBQXZCLElBQThDLENBQUNGLGtCQUFoRCxLQUF1RUcsWUFBM0UsRUFBeUY7QUFDckZILDZCQUFxQkcsWUFBckI7QUFDQSxlQUFPQSxhQUFhSSxNQUFiLENBQVA7QUFDSDtBQUNELFFBQUk7QUFDQTtBQUNBLGVBQU9QLG1CQUFtQk8sTUFBbkIsQ0FBUDtBQUNILEtBSEQsQ0FHRSxPQUFPdkosQ0FBUCxFQUFTO0FBQ1AsWUFBSTtBQUNBO0FBQ0EsbUJBQU9nSixtQkFBbUJ4TSxJQUFuQixDQUF3QixJQUF4QixFQUE4QitNLE1BQTlCLENBQVA7QUFDSCxTQUhELENBR0UsT0FBT3ZKLENBQVAsRUFBUztBQUNQO0FBQ0E7QUFDQSxtQkFBT2dKLG1CQUFtQnhNLElBQW5CLENBQXdCLElBQXhCLEVBQThCK00sTUFBOUIsQ0FBUDtBQUNIO0FBQ0o7QUFJSjtBQUNELElBQUl4TSxRQUFRLEVBQVo7QUFDQSxJQUFJeU0sV0FBVyxLQUFmO0FBQ0EsSUFBSUMsWUFBSjtBQUNBLElBQUlDLGFBQWEsQ0FBQyxDQUFsQjs7QUFFQSxTQUFTQyxlQUFULEdBQTJCO0FBQ3ZCLFFBQUksQ0FBQ0gsUUFBRCxJQUFhLENBQUNDLFlBQWxCLEVBQWdDO0FBQzVCO0FBQ0g7QUFDREQsZUFBVyxLQUFYO0FBQ0EsUUFBSUMsYUFBYXRHLE1BQWpCLEVBQXlCO0FBQ3JCcEcsZ0JBQVEwTSxhQUFhRyxNQUFiLENBQW9CN00sS0FBcEIsQ0FBUjtBQUNILEtBRkQsTUFFTztBQUNIMk0scUJBQWEsQ0FBQyxDQUFkO0FBQ0g7QUFDRCxRQUFJM00sTUFBTW9HLE1BQVYsRUFBa0I7QUFDZDBHO0FBQ0g7QUFDSjs7QUFFRCxTQUFTQSxVQUFULEdBQXNCO0FBQ2xCLFFBQUlMLFFBQUosRUFBYztBQUNWO0FBQ0g7QUFDRCxRQUFJTSxVQUFVVixXQUFXTyxlQUFYLENBQWQ7QUFDQUgsZUFBVyxJQUFYOztBQUVBLFFBQUkvTSxNQUFNTSxNQUFNb0csTUFBaEI7QUFDQSxXQUFNMUcsR0FBTixFQUFXO0FBQ1BnTix1QkFBZTFNLEtBQWY7QUFDQUEsZ0JBQVEsRUFBUjtBQUNBLGVBQU8sRUFBRTJNLFVBQUYsR0FBZWpOLEdBQXRCLEVBQTJCO0FBQ3ZCLGdCQUFJZ04sWUFBSixFQUFrQjtBQUNkQSw2QkFBYUMsVUFBYixFQUF5QkssR0FBekI7QUFDSDtBQUNKO0FBQ0RMLHFCQUFhLENBQUMsQ0FBZDtBQUNBak4sY0FBTU0sTUFBTW9HLE1BQVo7QUFDSDtBQUNEc0csbUJBQWUsSUFBZjtBQUNBRCxlQUFXLEtBQVg7QUFDQUYsb0JBQWdCUSxPQUFoQjtBQUNIOztBQUVEL0wsUUFBUU0sUUFBUixHQUFtQixVQUFVZ0wsR0FBVixFQUFlO0FBQzlCLFFBQUlwQyxPQUFPLElBQUk5SyxLQUFKLENBQVV3RSxVQUFVd0MsTUFBVixHQUFtQixDQUE3QixDQUFYO0FBQ0EsUUFBSXhDLFVBQVV3QyxNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3RCLGFBQUssSUFBSTFELElBQUksQ0FBYixFQUFnQkEsSUFBSWtCLFVBQVV3QyxNQUE5QixFQUFzQzFELEdBQXRDLEVBQTJDO0FBQ3ZDd0gsaUJBQUt4SCxJQUFJLENBQVQsSUFBY2tCLFVBQVVsQixDQUFWLENBQWQ7QUFDSDtBQUNKO0FBQ0QxQyxVQUFNOEssSUFBTixDQUFXLElBQUltQyxJQUFKLENBQVNYLEdBQVQsRUFBY3BDLElBQWQsQ0FBWDtBQUNBLFFBQUlsSyxNQUFNb0csTUFBTixLQUFpQixDQUFqQixJQUFzQixDQUFDcUcsUUFBM0IsRUFBcUM7QUFDakNKLG1CQUFXUyxVQUFYO0FBQ0g7QUFDSixDQVhEOztBQWFBO0FBQ0EsU0FBU0csSUFBVCxDQUFjWCxHQUFkLEVBQW1CWSxLQUFuQixFQUEwQjtBQUN0QixTQUFLWixHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLWSxLQUFMLEdBQWFBLEtBQWI7QUFDSDtBQUNERCxLQUFLMU4sU0FBTCxDQUFleU4sR0FBZixHQUFxQixZQUFZO0FBQzdCLFNBQUtWLEdBQUwsQ0FBUzdCLEtBQVQsQ0FBZSxJQUFmLEVBQXFCLEtBQUt5QyxLQUExQjtBQUNILENBRkQ7QUFHQWxNLFFBQVFtTSxLQUFSLEdBQWdCLFNBQWhCO0FBQ0FuTSxRQUFRb00sT0FBUixHQUFrQixJQUFsQjtBQUNBcE0sUUFBUXFNLEdBQVIsR0FBYyxFQUFkO0FBQ0FyTSxRQUFRc00sSUFBUixHQUFlLEVBQWY7QUFDQXRNLFFBQVF1TSxPQUFSLEdBQWtCLEVBQWxCLEMsQ0FBc0I7QUFDdEJ2TSxRQUFRd00sUUFBUixHQUFtQixFQUFuQjs7QUFFQSxTQUFTaEssSUFBVCxHQUFnQixDQUFFOztBQUVsQnhDLFFBQVFrSyxFQUFSLEdBQWExSCxJQUFiO0FBQ0F4QyxRQUFRMEosV0FBUixHQUFzQmxILElBQXRCO0FBQ0F4QyxRQUFRbUssSUFBUixHQUFlM0gsSUFBZjtBQUNBeEMsUUFBUXlNLEdBQVIsR0FBY2pLLElBQWQ7QUFDQXhDLFFBQVFzSyxjQUFSLEdBQXlCOUgsSUFBekI7QUFDQXhDLFFBQVEwSyxrQkFBUixHQUE2QmxJLElBQTdCO0FBQ0F4QyxRQUFRK0ksSUFBUixHQUFldkcsSUFBZjtBQUNBeEMsUUFBUTBNLGVBQVIsR0FBMEJsSyxJQUExQjtBQUNBeEMsUUFBUTJNLG1CQUFSLEdBQThCbkssSUFBOUI7O0FBRUF4QyxRQUFRbUosU0FBUixHQUFvQixVQUFVeUQsSUFBVixFQUFnQjtBQUFFLFdBQU8sRUFBUDtBQUFXLENBQWpEOztBQUVBNU0sUUFBUTZNLE9BQVIsR0FBa0IsVUFBVUQsSUFBVixFQUFnQjtBQUM5QixVQUFNLElBQUl6RyxLQUFKLENBQVUsa0NBQVYsQ0FBTjtBQUNILENBRkQ7O0FBSUFuRyxRQUFROE0sR0FBUixHQUFjLFlBQVk7QUFBRSxXQUFPLEdBQVA7QUFBWSxDQUF4QztBQUNBOU0sUUFBUStNLEtBQVIsR0FBZ0IsVUFBVUMsR0FBVixFQUFlO0FBQzNCLFVBQU0sSUFBSTdHLEtBQUosQ0FBVSxnQ0FBVixDQUFOO0FBQ0gsQ0FGRDtBQUdBbkcsUUFBUWlOLEtBQVIsR0FBZ0IsWUFBVztBQUFFLFdBQU8sQ0FBUDtBQUFXLENBQXhDLEM7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2TEEsSUFBSTVDLENBQUo7O0FBRUE7QUFDQUEsSUFBSyxZQUFXO0FBQ2YsUUFBTyxJQUFQO0FBQ0EsQ0FGRyxFQUFKOztBQUlBLElBQUk7QUFDSDtBQUNBQSxLQUFJQSxLQUFLeEksU0FBUyxhQUFULEdBQUwsSUFBa0MsQ0FBQyxHQUFHcUwsSUFBSixFQUFVLE1BQVYsQ0FBdEM7QUFDQSxDQUhELENBR0UsT0FBT2pMLENBQVAsRUFBVTtBQUNYO0FBQ0EsS0FBSSxRQUFPekMsTUFBUCx5Q0FBT0EsTUFBUCxPQUFrQixRQUF0QixFQUFnQzZLLElBQUk3SyxNQUFKO0FBQ2hDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTFCLE9BQU9ELE9BQVAsR0FBaUJ3TSxDQUFqQixDOzs7Ozs7Ozs7Ozs7OztBQ25CQSxJQUFJOEMsV0FBV3ZLLFVBQVUsQ0FBVixDQUFmO0FBQ0EsSUFBSXdLLFVBQVV4SyxVQUFVLENBQVYsQ0FBZDtBQUNBLElBQUl5SyxRQUFRekssVUFBVSxDQUFWLENBQVo7O0FBRUEsSUFBSTBLLFlBQVlDLEtBQUtELFNBQXJCOztBQUVBeFAsT0FBT0QsT0FBUCxHQUFpQixVQUFVMlAsRUFBVixFQUFjQyxPQUFkLEVBQXVCO0FBQ3BDLFFBQUlDLElBQUo7QUFDQSxRQUFJQyxZQUFZclAsT0FBT3NQLElBQVAsQ0FBWVAsS0FBWixDQUFoQjs7QUFFQSxTQUFLLElBQUkzTCxJQUFJLENBQVIsRUFBV21NLElBQUlGLFVBQVV2SSxNQUE5QixFQUFzQzFELElBQUltTSxDQUExQyxFQUE2Q25NLEdBQTdDLEVBQWtEO0FBQzlDLFlBQUlpSixNQUFNZ0QsVUFBVWpNLENBQVYsQ0FBVjtBQUNBLFlBQUlvTSxNQUFNVCxNQUFNMUMsR0FBTixFQUFXOU0sT0FBckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQUlpUSxRQUFRTixFQUFSLElBQWNNLE9BQU9BLElBQUlDLE9BQUosS0FBZ0JQLEVBQXpDLEVBQTZDO0FBQ3pDRSxtQkFBTy9DLEdBQVA7QUFDQTtBQUNIO0FBQ0o7O0FBRUQsUUFBSSxDQUFDK0MsSUFBTCxFQUFXO0FBQ1BBLGVBQU9ySyxLQUFLMkssS0FBTCxDQUFXM0ssS0FBSzRLLEdBQUwsQ0FBUyxFQUFULEVBQWEsQ0FBYixJQUFrQjVLLEtBQUtDLE1BQUwsRUFBN0IsRUFBNEM5RSxRQUE1QyxDQUFxRCxFQUFyRCxDQUFQO0FBQ0EsWUFBSTBQLFNBQVMsRUFBYjtBQUNBLGFBQUssSUFBSXhNLElBQUksQ0FBUixFQUFXbU0sSUFBSUYsVUFBVXZJLE1BQTlCLEVBQXNDMUQsSUFBSW1NLENBQTFDLEVBQTZDbk0sR0FBN0MsRUFBa0Q7QUFDOUMsZ0JBQUlpSixNQUFNZ0QsVUFBVWpNLENBQVYsQ0FBVjtBQUNBd00sbUJBQU92RCxHQUFQLElBQWNBLEdBQWQ7QUFDSDtBQUNEeUMsZ0JBQVFNLElBQVIsSUFBZ0IsQ0FDWixzQ0FBc0NGLEVBQXRDLEdBQTJDLFdBRC9CLEVBRVpVLE1BRlksQ0FBaEI7QUFJSDtBQUNELFFBQUlDLE9BQU85SyxLQUFLMkssS0FBTCxDQUFXM0ssS0FBSzRLLEdBQUwsQ0FBUyxFQUFULEVBQWEsQ0FBYixJQUFrQjVLLEtBQUtDLE1BQUwsRUFBN0IsRUFBNEM5RSxRQUE1QyxDQUFxRCxFQUFyRCxDQUFYOztBQUVBLFFBQUk0UCxTQUFTLEVBQWIsQ0FBaUJBLE9BQU9WLElBQVAsSUFBZUEsSUFBZjtBQUNqQk4sWUFBUWUsSUFBUixJQUFnQixDQUNaO0FBQ0k7QUFDQSxzQkFGSixHQUV5QmIsVUFBVUksSUFBVixDQUZ6QixHQUUyQyxJQUYzQyxHQUdJLG9DQUhKLEdBSUEsR0FMWSxFQU1aVSxNQU5ZLENBQWhCOztBQVNBLFFBQUlDLGdCQUFnQixFQUFwQjtBQUNBQyxtQkFBZUgsSUFBZjs7QUFFQSxhQUFTRyxjQUFULENBQXdCM0QsR0FBeEIsRUFBNkI7QUFDekIwRCxzQkFBYzFELEdBQWQsSUFBcUIsSUFBckI7O0FBRUEsYUFBSyxJQUFJNEQsT0FBVCxJQUFvQm5CLFFBQVF6QyxHQUFSLEVBQWEsQ0FBYixDQUFwQixFQUFxQztBQUNqQyxnQkFBSTZELFNBQVNwQixRQUFRekMsR0FBUixFQUFhLENBQWIsRUFBZ0I0RCxPQUFoQixDQUFiO0FBQ0EsZ0JBQUksQ0FBQ0YsY0FBY0csTUFBZCxDQUFMLEVBQTRCO0FBQ3hCRiwrQkFBZUUsTUFBZjtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxRQUFJQyxNQUFNLE1BQU10QixRQUFOLEdBQWlCLEtBQWpCLEdBQ0o3TyxPQUFPc1AsSUFBUCxDQUFZUyxhQUFaLEVBQTJCSyxHQUEzQixDQUErQixVQUFVL0QsR0FBVixFQUFlO0FBQzVDLGVBQU8yQyxVQUFVM0MsR0FBVixJQUFpQixJQUFqQixHQUNEeUMsUUFBUXpDLEdBQVIsRUFBYSxDQUFiLENBREMsR0FFRCxHQUZDLEdBRUsyQyxVQUFVRixRQUFRekMsR0FBUixFQUFhLENBQWIsQ0FBVixDQUZMLEdBRWtDLEdBRnpDO0FBSUgsS0FMQyxFQUtDZ0UsSUFMRCxDQUtNLEdBTE4sQ0FESSxHQU9KLFFBUEksR0FPT3JCLFVBQVVhLElBQVYsQ0FQUCxHQU95QixJQVBuQzs7QUFVQSxRQUFJUyxNQUFNcFAsT0FBT29QLEdBQVAsSUFBY3BQLE9BQU9xUCxTQUFyQixJQUFrQ3JQLE9BQU9zUCxNQUF6QyxJQUFtRHRQLE9BQU91UCxLQUFwRTs7QUFFQSxRQUFJQyxPQUFPLElBQUlDLElBQUosQ0FBUyxDQUFDUixHQUFELENBQVQsRUFBZ0IsRUFBRXhRLE1BQU0saUJBQVIsRUFBaEIsQ0FBWDtBQUNBLFFBQUl3UCxXQUFXQSxRQUFReUIsSUFBdkIsRUFBNkI7QUFBRSxlQUFPRixJQUFQO0FBQWM7QUFDN0MsUUFBSUcsWUFBWVAsSUFBSVEsZUFBSixDQUFvQkosSUFBcEIsQ0FBaEI7QUFDQSxRQUFJSyxTQUFTLElBQUlDLE1BQUosQ0FBV0gsU0FBWCxDQUFiO0FBQ0FFLFdBQU9FLFNBQVAsR0FBbUJKLFNBQW5CO0FBQ0EsV0FBT0UsTUFBUDtBQUNILENBekVELEM7Ozs7Ozs7Ozs7Ozs7Ozs7O1FDMENnQkcsbUIsR0FBQUEsbUI7QUFoRGhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQk8sSUFBTUMsd0NBQWdCO0FBQ3pCQyxrQkFBYyxLQURXO0FBRXpCQyx1QkFBbUIsSUFGTTtBQUd6QkMsc0JBQWtCblEsU0FITzs7QUFLekJvUSxZQUFRLEtBTGlCOztBQU96QkMsY0FBVSxJQVBlO0FBUXpCQyx5QkFBcUIsSUFBSSxFQVJBO0FBU3pCQyw2QkFBeUIsRUFUQTtBQVV6QkMsOEJBQTBCLElBVkQ7O0FBWXpCO0FBQ0FDLG9DQUFnQyxJQUFJLEVBYlg7QUFjekJDLG9DQUFnQyxJQUFJLEVBZFg7O0FBZ0J6QkMsa0NBQThCLEdBaEJMOztBQWtCekJDLDBCQUFzQixJQWxCRzs7QUFvQnpCQyxrQkFBYyxLQXBCVztBQXFCekJDLGNBQVUsT0FyQmUsRUFxQkw7QUFDcEJDLG9CQUFnQixRQXRCUztBQXVCekJDLGtCQUFjLE1BdkJXO0FBd0J6QkMsd0JBQW9CLEtBeEJLO0FBeUJ6QkMsdUJBQW1CbFIsU0F6Qk07QUEwQnpCbVIsd0JBQW9CO0FBQ3BCO0FBM0J5QixDQUF0Qjs7QUE4QkEsU0FBU3BCLG1CQUFULEdBQStCO0FBQ2xDLFdBQU9sUixPQUFPdVMsTUFBUCxDQUFjLEVBQWQsRUFBa0JwQixhQUFsQixDQUFQO0FBQ0gsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FqQkNsREQ7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTs7OztBQUNBOzs7Ozs7SUFFTXFCLFE7Ozs7Ozs7aURBRThCO0FBQzVCLG1CQUFPdFIsT0FBT3VSLFdBQVAsSUFDQXZSLE9BQU91UixXQUFQLENBQW1CQyxlQUFuQixDQUFtQywyQ0FBbkMsQ0FEUDtBQUVIOzs7aURBRStCO0FBQzVCLGdCQUFJQyxRQUFRLElBQUlDLHNCQUFKLENBQWlCLEVBQWpCLEVBQXFCLGtDQUFyQixDQUFaO0FBQ0EsZ0JBQUlDLGFBQWFGLE1BQU1FLFVBQXZCO0FBQ0FGLGtCQUFNRyxPQUFOO0FBQ0EsbUJBQU9ELGNBQWMscUJBQWQsSUFBdUNBLGNBQWMsd0JBQTVEO0FBQ0g7OzttREFFaUM7QUFDOUIsZ0JBQUlGLFFBQVEsSUFBSUMsc0JBQUosQ0FBaUIsRUFBakIsRUFBcUIsa0NBQXJCLENBQVo7QUFDQSxnQkFBSUMsYUFBYUYsTUFBTUUsVUFBdkI7QUFDQUYsa0JBQU1HLE9BQU47QUFDQSxtQkFBT0QsVUFBUDtBQUNIOzs7bURBRWlDRSxRLEVBQVU7QUFDeEMsZ0JBQUlQLFNBQVNRLFlBQVQsSUFBeUI3UixTQUE3QixFQUF3QztBQUNwQ3FSLHlCQUFTUSxZQUFULEdBQXdCOVIsT0FBT3FCLFFBQVAsQ0FBZ0IwUSxhQUFoQixDQUE4QixPQUE5QixDQUF4QjtBQUNIO0FBQ0QsZ0JBQUlDLFVBQVVWLFNBQVNRLFlBQVQsQ0FBc0JHLFdBQXRCLENBQWtDSixRQUFsQyxDQUFkO0FBQ0EsbUJBQU9HLFlBQVksVUFBWixJQUEwQkEsV0FBVyxPQUE1QztBQUNIOzs7eUNBRXVCO0FBQ3BCLGdCQUFJRSxXQUFXO0FBQ1hDLGdDQUFnQixLQURMO0FBRVhDLG9DQUFvQixLQUZUO0FBR1hDLGlDQUFpQixLQUhOO0FBSVhDLG1DQUFtQixFQUpSO0FBS1hDLHVDQUF1QixLQUxaO0FBTVhDLHVDQUF1QixLQU5aO0FBT1hDLHVDQUF1QjtBQVBaLGFBQWY7O0FBVUFQLHFCQUFTQyxjQUFULEdBQTBCYixTQUFTb0Isc0JBQVQsRUFBMUI7QUFDQVIscUJBQVNHLGVBQVQsR0FBMkJmLFNBQVNxQixzQkFBVCxFQUEzQjtBQUNBVCxxQkFBU0ksaUJBQVQsR0FBNkJoQixTQUFTc0Isd0JBQVQsRUFBN0I7QUFDQVYscUJBQVNFLGtCQUFULEdBQThCRixTQUFTQyxjQUFULElBQTJCRCxTQUFTRyxlQUFsRTtBQUNBSCxxQkFBU0sscUJBQVQsR0FBaUNqQixTQUFTdUIsMEJBQVQsQ0FBb0MsNENBQXBDLENBQWpDO0FBQ0FYLHFCQUFTTSxxQkFBVCxHQUFpQ2xCLFNBQVN1QiwwQkFBVCxDQUFvQyxvQ0FBcEMsQ0FBakM7QUFDQVgscUJBQVNPLHFCQUFULEdBQWlDbkIsU0FBU3VCLDBCQUFULENBQW9DLDBCQUFwQyxDQUFqQzs7QUFFQSxtQkFBT1gsUUFBUDtBQUNIOzs7Ozs7a0JBSVVaLFE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDMUVmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFrQk13QixTO0FBRUYseUJBQWM7QUFBQTs7QUFDVixhQUFLakIsUUFBTCxHQUFnQixJQUFoQjtBQUNBLGFBQUtrQixRQUFMLEdBQWdCLElBQWhCOztBQUVBLGFBQUtDLFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSxhQUFLQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsYUFBS0MsVUFBTCxHQUFrQixJQUFsQjtBQUNBLGFBQUtDLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxhQUFLQyxhQUFMLEdBQXFCLElBQXJCO0FBQ0EsYUFBS0MsYUFBTCxHQUFxQixJQUFyQjs7QUFFQSxhQUFLQyxlQUFMLEdBQXVCLElBQXZCO0FBQ0EsYUFBS0MsaUJBQUwsR0FBeUIsSUFBekI7O0FBRUEsYUFBS0MsS0FBTCxHQUFhLElBQWI7QUFDQSxhQUFLQyxNQUFMLEdBQWMsSUFBZDtBQUNBLGFBQUtDLEdBQUwsR0FBVyxJQUFYO0FBQ0EsYUFBS0MsT0FBTCxHQUFlLElBQWY7QUFDQSxhQUFLQyxLQUFMLEdBQWEsSUFBYjtBQUNBLGFBQUtDLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxhQUFLQyxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsYUFBS0MsTUFBTCxHQUFjLElBQWQ7QUFDQSxhQUFLQyxNQUFMLEdBQWMsSUFBZDs7QUFFQSxhQUFLQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsYUFBS0MsUUFBTCxHQUFnQixJQUFoQixDQXpCVSxDQXlCYTtBQUN2QixhQUFLQyxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsYUFBS0MsaUJBQUwsR0FBeUIsSUFBekI7QUFDQSxhQUFLQyxjQUFMLEdBQXNCLElBQXRCO0FBQ0g7Ozs7cUNBRVk7QUFDVCxnQkFBSUMsb0JBQXFCLEtBQUt0QixRQUFMLEtBQWtCLEtBQW5CLElBQ0MsS0FBS0EsUUFBTCxLQUFrQixJQUFsQixJQUNBLEtBQUtFLFVBQUwsSUFBbUIsSUFEbkIsSUFFQSxLQUFLSSxlQUFMLElBQXdCLElBRnhCLElBR0EsS0FBS0MsaUJBQUwsSUFBMEIsSUFKbkQ7O0FBTUEsZ0JBQUlnQixvQkFBcUIsS0FBS3RCLFFBQUwsS0FBa0IsS0FBbkIsSUFDQyxLQUFLQSxRQUFMLEtBQWtCLElBQWxCLElBQ0EsS0FBS0UsVUFBTCxJQUFtQixJQURuQixJQUVBLEtBQUtLLEtBQUwsSUFBYyxJQUZkLElBR0EsS0FBS0MsTUFBTCxJQUFlLElBSGYsSUFJQSxLQUFLQyxHQUFMLElBQVksSUFKWixJQUtBLEtBQUtDLE9BQUwsSUFBZ0IsSUFMaEIsSUFNQSxLQUFLQyxLQUFMLElBQWMsSUFOZCxJQU9BLEtBQUtDLFNBQUwsSUFBa0IsSUFQbEIsSUFRQSxLQUFLQyxZQUFMLElBQXFCLElBUnJCLElBU0EsS0FBS0MsTUFBTCxJQUFlLElBVGYsSUFVQSxLQUFLQyxNQUFMLElBQWUsSUFYeEM7O0FBYUE7QUFDQSxtQkFBTyxLQUFLbkMsUUFBTCxJQUFpQixJQUFqQixJQUNBLEtBQUtrQixRQUFMLElBQWlCLElBRGpCLElBRUEsS0FBS2tCLFFBQUwsSUFBaUIsSUFGakIsSUFHQSxLQUFLRyxpQkFBTCxJQUEwQixJQUgxQixJQUlBRSxpQkFKQSxJQUtBQyxpQkFMUDtBQU1IOzs7cUNBRVk7QUFDVCxtQkFBTyxLQUFLSCxpQkFBTCxLQUEyQixJQUFsQztBQUNIOzs7MkNBRWtCSSxZLEVBQWM7QUFDN0IsZ0JBQUksS0FBS0gsY0FBTCxJQUF1QixJQUEzQixFQUFpQztBQUM3Qix1QkFBTyxJQUFQO0FBQ0g7O0FBRUQsZ0JBQUlJLFFBQVEsS0FBS0osY0FBakI7QUFDQSxnQkFBSUssY0FBYyxLQUFLQyxPQUFMLENBQWFGLE1BQU1HLEtBQW5CLEVBQTBCSixZQUExQixDQUFsQjs7QUFFQSxtQkFBTztBQUNISyx1QkFBT0gsV0FESjtBQUVIRiw4QkFBY0MsTUFBTUcsS0FBTixDQUFZRixXQUFaLENBRlg7QUFHSEksOEJBQWNMLE1BQU1NLGFBQU4sQ0FBb0JMLFdBQXBCO0FBSFgsYUFBUDtBQUtIOzs7Z0NBRU8zSixJLEVBQU1wRyxLLEVBQU87QUFDakIsZ0JBQUlxUSxNQUFNLENBQVY7O0FBRUEsZ0JBQUlDLE9BQU9sSyxLQUFLbkYsTUFBTCxHQUFjLENBQXpCO0FBQ0EsZ0JBQUlzUCxNQUFNLENBQVY7QUFDQSxnQkFBSUMsU0FBUyxDQUFiO0FBQ0EsZ0JBQUlDLFNBQVNILElBQWI7O0FBRUEsZ0JBQUl0USxRQUFRb0csS0FBSyxDQUFMLENBQVosRUFBcUI7QUFDakJpSyxzQkFBTSxDQUFOO0FBQ0FHLHlCQUFTQyxTQUFTLENBQWxCLENBRmlCLENBRUs7QUFDekI7O0FBRUQsbUJBQU9ELFVBQVVDLE1BQWpCLEVBQXlCO0FBQ3JCRixzQkFBTUMsU0FBU3RSLEtBQUsySyxLQUFMLENBQVcsQ0FBQzRHLFNBQVNELE1BQVYsSUFBb0IsQ0FBL0IsQ0FBZjtBQUNBLG9CQUFJRCxRQUFRRCxJQUFSLElBQWlCdFEsU0FBU29HLEtBQUttSyxHQUFMLENBQVQsSUFBc0J2USxRQUFRb0csS0FBS21LLE1BQU0sQ0FBWCxDQUFuRCxFQUFtRTtBQUMvREYsMEJBQU1FLEdBQU47QUFDQTtBQUNILGlCQUhELE1BR08sSUFBSW5LLEtBQUttSyxHQUFMLElBQVl2USxLQUFoQixFQUF1QjtBQUMxQndRLDZCQUFTRCxNQUFNLENBQWY7QUFDSCxpQkFGTSxNQUVBO0FBQ0hFLDZCQUFTRixNQUFNLENBQWY7QUFDSDtBQUNKOztBQUVELG1CQUFPRixHQUFQO0FBQ0g7Ozs7OztrQkFJVWxDLFM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaklmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7SUFDYXVDLFUsV0FBQUEsVSxHQUVULG9CQUFZQyxHQUFaLEVBQWlCQyxHQUFqQixFQUFzQnhDLFFBQXRCLEVBQWdDeUMsV0FBaEMsRUFBNkNDLE1BQTdDLEVBQXFEO0FBQUE7O0FBQ2pELFNBQUtILEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUtDLEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUt4QyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUt5QyxXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLFNBQUtFLFdBQUwsR0FBbUJELE1BQW5CO0FBQ0EsU0FBS1gsWUFBTCxHQUFvQixJQUFwQjtBQUNILEM7O0FBSUw7QUFDQTs7O0lBQ2FhLGdCLFdBQUFBLGdCO0FBRVQsZ0NBQWM7QUFBQTs7QUFDVixhQUFLQyxRQUFMLEdBQWdCLENBQWhCO0FBQ0EsYUFBS0MsTUFBTCxHQUFjLENBQWQ7QUFDQSxhQUFLQyxRQUFMLEdBQWdCLENBQWhCO0FBQ0EsYUFBS0MsTUFBTCxHQUFjLENBQWQ7QUFDQSxhQUFLQyxnQkFBTCxHQUF3QixDQUF4QjtBQUNBLGFBQUtDLGNBQUwsR0FBc0IsQ0FBdEI7QUFDQSxhQUFLQyxVQUFMLEdBQWtCLEVBQWxCLENBUFUsQ0FPZ0I7QUFDMUIsYUFBS0MsV0FBTCxHQUFtQixJQUFuQixDQVJVLENBUWdCO0FBQzFCLGFBQUtDLFVBQUwsR0FBa0IsSUFBbEIsQ0FUVSxDQVNnQjtBQUM3Qjs7Ozt3Q0FFZUMsVSxFQUFZO0FBQUc7QUFDM0JBLHVCQUFXWCxXQUFYLEdBQXlCLElBQXpCO0FBQ0EsaUJBQUtRLFVBQUwsQ0FBZ0I1TCxJQUFoQixDQUFxQitMLFVBQXJCO0FBQ0g7Ozs7OztBQUlMOzs7SUFDYUMsYSxXQUFBQSxhO0FBRVQsNkJBQWM7QUFBQTs7QUFDVixhQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNIOzs7O2dDQUVPO0FBQ0osaUJBQUtBLEtBQUwsR0FBYSxFQUFiO0FBQ0g7OztvQ0FFV0wsVSxFQUFZO0FBQ3BCLGdCQUFJbkwsT0FBTyxLQUFLd0wsS0FBaEI7O0FBRUEsZ0JBQUlMLFdBQVd0USxNQUFYLEtBQXNCLENBQTFCLEVBQTZCO0FBQ3pCO0FBQ0g7O0FBRUQsZ0JBQUltRixLQUFLbkYsTUFBTCxHQUFjLENBQWQsSUFBbUJzUSxXQUFXLENBQVgsRUFBY1YsV0FBZCxHQUE0QnpLLEtBQUtBLEtBQUtuRixNQUFMLEdBQWMsQ0FBbkIsRUFBc0I0UCxXQUF6RSxFQUFzRjtBQUNsRixxQkFBS2dCLEtBQUw7QUFDSDs7QUFFRDVYLGtCQUFNRyxTQUFOLENBQWdCdUwsSUFBaEIsQ0FBcUJMLEtBQXJCLENBQTJCYyxJQUEzQixFQUFpQ21MLFVBQWpDO0FBQ0g7OztrREFFeUJaLEcsRUFBSztBQUMzQixnQkFBSSxLQUFLaUIsS0FBTCxDQUFXM1EsTUFBWCxJQUFxQixDQUF6QixFQUE0QjtBQUN4Qix1QkFBTyxJQUFQO0FBQ0g7O0FBRUQsZ0JBQUltRixPQUFPLEtBQUt3TCxLQUFoQjtBQUNBLGdCQUFJdkIsTUFBTSxDQUFWO0FBQ0EsZ0JBQUlDLE9BQU9sSyxLQUFLbkYsTUFBTCxHQUFjLENBQXpCO0FBQ0EsZ0JBQUlzUCxNQUFNLENBQVY7QUFDQSxnQkFBSUMsU0FBUyxDQUFiO0FBQ0EsZ0JBQUlDLFNBQVNILElBQWI7O0FBRUEsZ0JBQUlLLE1BQU12SyxLQUFLLENBQUwsRUFBUXVLLEdBQWxCLEVBQXVCO0FBQ25CTixzQkFBTSxDQUFOO0FBQ0FHLHlCQUFTQyxTQUFTLENBQWxCO0FBQ0g7O0FBRUQsbUJBQU9ELFVBQVVDLE1BQWpCLEVBQXlCO0FBQ3JCRixzQkFBTUMsU0FBU3RSLEtBQUsySyxLQUFMLENBQVcsQ0FBQzRHLFNBQVNELE1BQVYsSUFBb0IsQ0FBL0IsQ0FBZjtBQUNBLG9CQUFJRCxRQUFRRCxJQUFSLElBQWlCSyxPQUFPdkssS0FBS21LLEdBQUwsRUFBVUksR0FBakIsSUFBd0JBLE1BQU12SyxLQUFLbUssTUFBTSxDQUFYLEVBQWNJLEdBQWpFLEVBQXVFO0FBQ25FTiwwQkFBTUUsR0FBTjtBQUNBO0FBQ0gsaUJBSEQsTUFHTyxJQUFJbkssS0FBS21LLEdBQUwsRUFBVUksR0FBVixHQUFnQkEsR0FBcEIsRUFBeUI7QUFDNUJILDZCQUFTRCxNQUFNLENBQWY7QUFDSCxpQkFGTSxNQUVBO0FBQ0hFLDZCQUFTRixNQUFNLENBQWY7QUFDSDtBQUNKO0FBQ0QsbUJBQU8sS0FBS3FCLEtBQUwsQ0FBV3ZCLEdBQVgsQ0FBUDtBQUNIOzs7Ozs7QUFJTDs7O0lBQ2F5QixvQixXQUFBQSxvQjtBQUVULGtDQUFZaFksSUFBWixFQUFrQjtBQUFBOztBQUNkLGFBQUtpWSxLQUFMLEdBQWFqWSxJQUFiO0FBQ0EsYUFBSzhYLEtBQUwsR0FBYSxFQUFiO0FBQ0EsYUFBS0ksbUJBQUwsR0FBMkIsQ0FBQyxDQUE1QixDQUhjLENBR2tCO0FBQ25DOzs7O2tDQVVTO0FBQ04sbUJBQU8sS0FBS0osS0FBTCxDQUFXM1EsTUFBWCxLQUFzQixDQUE3QjtBQUNIOzs7Z0NBRU87QUFDSixpQkFBSzJRLEtBQUwsR0FBYSxFQUFiO0FBQ0EsaUJBQUtJLG1CQUFMLEdBQTJCLENBQUMsQ0FBNUI7QUFDSDs7O29EQUUyQlgsZ0IsRUFBa0I7QUFDMUMsZ0JBQUlqTCxPQUFPLEtBQUt3TCxLQUFoQjtBQUNBLGdCQUFJeEwsS0FBS25GLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDbkIsdUJBQU8sQ0FBQyxDQUFSO0FBQ0g7QUFDRCxnQkFBSXFQLE9BQU9sSyxLQUFLbkYsTUFBTCxHQUFjLENBQXpCO0FBQ0EsZ0JBQUlzUCxNQUFNLENBQVY7QUFDQSxnQkFBSUMsU0FBUyxDQUFiO0FBQ0EsZ0JBQUlDLFNBQVNILElBQWI7O0FBRUEsZ0JBQUlELE1BQU0sQ0FBVjs7QUFFQSxnQkFBSWdCLG1CQUFtQmpMLEtBQUssQ0FBTCxFQUFRaUwsZ0JBQS9CLEVBQWlEO0FBQzdDaEIsc0JBQU0sQ0FBQyxDQUFQO0FBQ0EsdUJBQU9BLEdBQVA7QUFDSDs7QUFFRCxtQkFBT0csVUFBVUMsTUFBakIsRUFBeUI7QUFDckJGLHNCQUFNQyxTQUFTdFIsS0FBSzJLLEtBQUwsQ0FBVyxDQUFDNEcsU0FBU0QsTUFBVixJQUFvQixDQUEvQixDQUFmO0FBQ0Esb0JBQUlELFFBQVFELElBQVIsSUFBaUJlLG1CQUFtQmpMLEtBQUttSyxHQUFMLEVBQVVrQixVQUFWLENBQXFCWixXQUF4QyxJQUNBUSxtQkFBbUJqTCxLQUFLbUssTUFBTSxDQUFYLEVBQWNjLGdCQUR0RCxFQUMwRTtBQUN0RWhCLDBCQUFNRSxHQUFOO0FBQ0E7QUFDSCxpQkFKRCxNQUlPLElBQUluSyxLQUFLbUssR0FBTCxFQUFVYyxnQkFBVixHQUE2QkEsZ0JBQWpDLEVBQW1EO0FBQ3REYiw2QkFBU0QsTUFBTSxDQUFmO0FBQ0gsaUJBRk0sTUFFQTtBQUNIRSw2QkFBU0YsTUFBTSxDQUFmO0FBQ0g7QUFDSjtBQUNELG1CQUFPRixHQUFQO0FBQ0g7OzttREFFMEJnQixnQixFQUFrQjtBQUN6QyxtQkFBTyxLQUFLWSwyQkFBTCxDQUFpQ1osZ0JBQWpDLElBQXFELENBQTVEO0FBQ0g7OzsrQkFFTWEsZ0IsRUFBa0I7QUFDckIsZ0JBQUk5TCxPQUFPLEtBQUt3TCxLQUFoQjtBQUNBLGdCQUFJTyxNQUFNRCxnQkFBVjtBQUNBLGdCQUFJRSxnQkFBZ0IsS0FBS0osbUJBQXpCO0FBQ0EsZ0JBQUlLLFlBQVksQ0FBaEI7O0FBRUEsZ0JBQUlELGtCQUFrQixDQUFDLENBQW5CLElBQXdCQSxnQkFBZ0JoTSxLQUFLbkYsTUFBN0MsSUFDd0JrUixJQUFJZCxnQkFBSixJQUF3QmpMLEtBQUtnTSxhQUFMLEVBQW9CWCxVQUFwQixDQUErQlosV0FEL0UsS0FFMEJ1QixrQkFBa0JoTSxLQUFLbkYsTUFBTCxHQUFjLENBQWpDLElBQ0FtUixnQkFBZ0JoTSxLQUFLbkYsTUFBTCxHQUFjLENBQTlCLElBQ0RrUixJQUFJZCxnQkFBSixHQUF1QmpMLEtBQUtnTSxnQkFBZ0IsQ0FBckIsRUFBd0JmLGdCQUp2RSxDQUFKLEVBSStGO0FBQzNGZ0IsNEJBQVlELGdCQUFnQixDQUE1QixDQUQyRixDQUMzRDtBQUNuQyxhQU5ELE1BTU87QUFDSCxvQkFBSWhNLEtBQUtuRixNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7QUFDakJvUixnQ0FBWSxLQUFLSiwyQkFBTCxDQUFpQ0UsSUFBSWQsZ0JBQXJDLElBQXlELENBQXJFO0FBQ0g7QUFDSjs7QUFFRCxpQkFBS1csbUJBQUwsR0FBMkJLLFNBQTNCO0FBQ0EsaUJBQUtULEtBQUwsQ0FBV3RMLE1BQVgsQ0FBa0IrTCxTQUFsQixFQUE2QixDQUE3QixFQUFnQ0YsR0FBaEM7QUFDSDs7OzZDQUVvQmQsZ0IsRUFBa0I7QUFDbkMsZ0JBQUloQixNQUFNLEtBQUs0QiwyQkFBTCxDQUFpQ1osZ0JBQWpDLENBQVY7QUFDQSxnQkFBSWhCLE9BQU8sQ0FBWCxFQUFjO0FBQ1YsdUJBQU8sS0FBS3VCLEtBQUwsQ0FBV3ZCLEdBQVgsQ0FBUDtBQUNILGFBRkQsTUFFTztBQUFHO0FBQ04sdUJBQU8sSUFBUDtBQUNIO0FBQ0o7Ozs0Q0FFbUJnQixnQixFQUFrQjtBQUNsQyxnQkFBSWlCLFVBQVUsS0FBS0Msb0JBQUwsQ0FBMEJsQixnQkFBMUIsQ0FBZDtBQUNBLGdCQUFJaUIsV0FBVyxJQUFmLEVBQXFCO0FBQ2pCLHVCQUFPQSxRQUFRYixVQUFmO0FBQ0gsYUFGRCxNQUVPO0FBQ0gsdUJBQU8sSUFBUDtBQUNIO0FBQ0o7OzsrQ0FFc0JKLGdCLEVBQWtCO0FBQ3JDLGdCQUFJbUIsYUFBYSxLQUFLUCwyQkFBTCxDQUFpQ1osZ0JBQWpDLENBQWpCO0FBQ0EsZ0JBQUlFLGFBQWEsS0FBS0ssS0FBTCxDQUFXWSxVQUFYLEVBQXVCakIsVUFBeEM7QUFDQSxtQkFBT0EsV0FBV3RRLE1BQVgsS0FBc0IsQ0FBdEIsSUFBMkJ1UixhQUFhLENBQS9DLEVBQWtEO0FBQzlDQTtBQUNBakIsNkJBQWEsS0FBS0ssS0FBTCxDQUFXWSxVQUFYLEVBQXVCakIsVUFBcEM7QUFDSDtBQUNELGdCQUFJQSxXQUFXdFEsTUFBWCxHQUFvQixDQUF4QixFQUEyQjtBQUN2Qix1QkFBT3NRLFdBQVdBLFdBQVd0USxNQUFYLEdBQW9CLENBQS9CLENBQVA7QUFDSCxhQUZELE1BRU87QUFDSCx1QkFBTyxJQUFQO0FBQ0g7QUFDSjs7OzRCQXpHVTtBQUNQLG1CQUFPLEtBQUs4USxLQUFaO0FBQ0g7Ozs0QkFFWTtBQUNULG1CQUFPLEtBQUtILEtBQUwsQ0FBVzNRLE1BQWxCO0FBQ0g7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cWpCQ2hJTDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBO0lBQ013UixhO0FBRUYsMkJBQVlDLE1BQVosRUFBb0I7QUFBQTs7QUFDaEIsYUFBS0MsR0FBTCxHQUFXLGVBQVg7O0FBRUEsYUFBS0MsT0FBTCxHQUFlRixNQUFmO0FBQ0EsYUFBS0csUUFBTCxHQUFnQixJQUFJek8sZ0JBQUosRUFBaEI7O0FBRUEsWUFBSSxLQUFLd08sT0FBTCxDQUFhbEgsTUFBYixJQUF1QixLQUFLa0gsT0FBTCxDQUFhRSx1QkFBYixJQUF3Q3hYLFNBQW5FLEVBQThFO0FBQzFFO0FBQ0EsaUJBQUtzWCxPQUFMLENBQWFFLHVCQUFiLEdBQXVDLElBQXZDO0FBQ0g7QUFDRCxhQUFLQyxnQkFBTCxHQUF3QixLQUF4QjtBQUNBLGFBQUtqVixDQUFMLEdBQVM7QUFDTGtWLDBCQUFjLEtBQUtDLGFBQUwsQ0FBbUJDLElBQW5CLENBQXdCLElBQXhCLENBRFQ7QUFFTEMsMkJBQWUsS0FBS0MsY0FBTCxDQUFvQkYsSUFBcEIsQ0FBeUIsSUFBekIsQ0FGVjtBQUdMRywyQkFBZSxLQUFLQyxjQUFMLENBQW9CSixJQUFwQixDQUF5QixJQUF6QixDQUhWO0FBSUxLLGlDQUFxQixLQUFLQyxvQkFBTCxDQUEwQk4sSUFBMUIsQ0FBK0IsSUFBL0IsQ0FKaEI7QUFLTE8scUNBQXlCLEtBQUtDLHdCQUFMLENBQThCUixJQUE5QixDQUFtQyxJQUFuQztBQUxwQixTQUFUOztBQVFBLGFBQUtTLFlBQUwsR0FBb0IsSUFBcEI7QUFDQSxhQUFLQyxxQkFBTCxHQUE2QixJQUE3QjtBQUNBLGFBQUtDLGFBQUwsR0FBcUIsSUFBckI7O0FBRUEsYUFBS0MsYUFBTCxHQUFxQixLQUFyQjtBQUNBLGFBQUtDLGNBQUwsR0FBc0IsS0FBdEI7O0FBRUEsYUFBS0Msd0JBQUwsR0FBZ0MsS0FBaEM7QUFDQSxhQUFLQyxxQkFBTCxHQUE2QixDQUE3Qjs7QUFFQSxhQUFLQyx3QkFBTCxHQUFnQyxFQUFoQztBQUNBLGFBQUtDLFVBQUwsR0FBa0I7QUFDZEMsbUJBQU8sSUFETztBQUVkQyxtQkFBTztBQUZPLFNBQWxCO0FBSUEsYUFBS0MsY0FBTCxHQUFzQjtBQUNsQkYsbUJBQU8sSUFEVztBQUVsQkMsbUJBQU87QUFGVyxTQUF0QjtBQUlBLGFBQUtFLGlCQUFMLEdBQXlCO0FBQ3JCSCxtQkFBTyxJQURjO0FBRXJCQyxtQkFBTztBQUZjLFNBQXpCO0FBSUEsYUFBS0csZ0JBQUwsR0FBd0I7QUFDcEJKLG1CQUFPLEVBRGE7QUFFcEJDLG1CQUFPO0FBRmEsU0FBeEI7QUFJQSxhQUFLSSxvQkFBTCxHQUE0QjtBQUN4QkwsbUJBQU8sRUFEaUI7QUFFeEJDLG1CQUFPO0FBRmlCLFNBQTVCO0FBSUEsYUFBS0ssUUFBTCxHQUFnQixJQUFJL0MsK0JBQUosRUFBaEI7QUFDSDs7OztrQ0FFUztBQUNOLGdCQUFJLEtBQUtrQyxhQUFMLElBQXNCLEtBQUtGLFlBQS9CLEVBQTZDO0FBQ3pDLHFCQUFLZ0Isa0JBQUw7QUFDSDtBQUNELGlCQUFLN1csQ0FBTCxHQUFTLElBQVQ7QUFDQSxpQkFBSytVLFFBQUwsQ0FBY3RNLGtCQUFkO0FBQ0EsaUJBQUtzTSxRQUFMLEdBQWdCLElBQWhCO0FBQ0g7OzsyQkFFRStCLEssRUFBT3BQLFEsRUFBVTtBQUNoQixpQkFBS3FOLFFBQUwsQ0FBY3ROLFdBQWQsQ0FBMEJxUCxLQUExQixFQUFpQ3BQLFFBQWpDO0FBQ0g7Ozs0QkFFR29QLEssRUFBT3BQLFEsRUFBVTtBQUNqQixpQkFBS3FOLFFBQUwsQ0FBYzFNLGNBQWQsQ0FBNkJ5TyxLQUE3QixFQUFvQ3BQLFFBQXBDO0FBQ0g7OzsyQ0FFa0JxUCxZLEVBQWM7QUFDN0IsZ0JBQUksS0FBS2xCLFlBQVQsRUFBdUI7QUFDbkIsc0JBQU0sSUFBSW1CLGdDQUFKLENBQTBCLHVEQUExQixDQUFOO0FBQ0g7QUFDRCxnQkFBSUMsS0FBSyxLQUFLcEIsWUFBTCxHQUFvQixJQUFJdFksT0FBT3VSLFdBQVgsRUFBN0I7QUFDQW1JLGVBQUdDLGdCQUFILENBQW9CLFlBQXBCLEVBQWtDLEtBQUtsWCxDQUFMLENBQU9rVixZQUF6QztBQUNBK0IsZUFBR0MsZ0JBQUgsQ0FBb0IsYUFBcEIsRUFBbUMsS0FBS2xYLENBQUwsQ0FBT3FWLGFBQTFDO0FBQ0E0QixlQUFHQyxnQkFBSCxDQUFvQixhQUFwQixFQUFtQyxLQUFLbFgsQ0FBTCxDQUFPdVYsYUFBMUM7O0FBRUEsaUJBQUtRLGFBQUwsR0FBcUJnQixZQUFyQjtBQUNBLGlCQUFLakIscUJBQUwsR0FBNkJ2WSxPQUFPb1AsR0FBUCxDQUFXUSxlQUFYLENBQTJCLEtBQUswSSxZQUFoQyxDQUE3QjtBQUNBa0IseUJBQWF2SyxHQUFiLEdBQW1CLEtBQUtzSixxQkFBeEI7QUFDSDs7OzZDQUVvQjtBQUNqQixnQkFBSSxLQUFLRCxZQUFULEVBQXVCO0FBQ25CLG9CQUFJb0IsS0FBSyxLQUFLcEIsWUFBZDtBQUNBLHFCQUFLLElBQUk3WixJQUFULElBQWlCLEtBQUt3YSxjQUF0QixFQUFzQztBQUNsQztBQUNBLHdCQUFJVyxLQUFLLEtBQUtULGdCQUFMLENBQXNCMWEsSUFBdEIsQ0FBVDtBQUNBbWIsdUJBQUczTyxNQUFILENBQVUsQ0FBVixFQUFhMk8sR0FBR2hVLE1BQWhCO0FBQ0EseUJBQUt1VCxnQkFBTCxDQUFzQjFhLElBQXRCLElBQThCLElBQTlCO0FBQ0EseUJBQUsyYSxvQkFBTCxDQUEwQjNhLElBQTFCLElBQWtDLElBQWxDO0FBQ0EseUJBQUt5YSxpQkFBTCxDQUF1QnphLElBQXZCLElBQStCLElBQS9COztBQUVBO0FBQ0Esd0JBQUlvYixLQUFLLEtBQUtaLGNBQUwsQ0FBb0J4YSxJQUFwQixDQUFUO0FBQ0Esd0JBQUlvYixFQUFKLEVBQVE7QUFDSiw0QkFBSUgsR0FBR0ksVUFBSCxLQUFrQixRQUF0QixFQUFnQztBQUM1QkosK0JBQUdLLGtCQUFILENBQXNCRixFQUF0QjtBQUNBQSwrQkFBR0csbUJBQUgsQ0FBdUIsT0FBdkIsRUFBZ0MsS0FBS3ZYLENBQUwsQ0FBT3lWLG1CQUF2QztBQUNBMkIsK0JBQUdHLG1CQUFILENBQXVCLFdBQXZCLEVBQW9DLEtBQUt2WCxDQUFMLENBQU8yVix1QkFBM0M7QUFDSDtBQUNELDZCQUFLVSxVQUFMLENBQWdCcmEsSUFBaEIsSUFBd0IsSUFBeEI7QUFDQSw2QkFBS3dhLGNBQUwsQ0FBb0J4YSxJQUFwQixJQUE0QixJQUE1QjtBQUNIO0FBQ0o7QUFDRCxvQkFBSWliLEdBQUdJLFVBQUgsS0FBa0IsTUFBdEIsRUFBOEI7QUFDMUIsd0JBQUk7QUFDQUosMkJBQUdPLFdBQUg7QUFDSCxxQkFGRCxDQUVFLE9BQU83VixLQUFQLEVBQWM7QUFDWjhWLHlDQUFJelgsQ0FBSixDQUFNLEtBQUs2VSxHQUFYLEVBQWdCbFQsTUFBTStWLE9BQXRCO0FBQ0g7QUFDSjtBQUNEVCxtQkFBR00sbUJBQUgsQ0FBdUIsWUFBdkIsRUFBcUMsS0FBS3ZYLENBQUwsQ0FBT2tWLFlBQTVDO0FBQ0ErQixtQkFBR00sbUJBQUgsQ0FBdUIsYUFBdkIsRUFBc0MsS0FBS3ZYLENBQUwsQ0FBT3FWLGFBQTdDO0FBQ0E0QixtQkFBR00sbUJBQUgsQ0FBdUIsYUFBdkIsRUFBc0MsS0FBS3ZYLENBQUwsQ0FBT3VWLGFBQTdDO0FBQ0EscUJBQUthLHdCQUFMLEdBQWdDLEVBQWhDO0FBQ0EscUJBQUtKLGFBQUwsR0FBcUIsS0FBckI7QUFDQSxxQkFBS1ksUUFBTCxDQUFjN0MsS0FBZDtBQUNBLHFCQUFLOEIsWUFBTCxHQUFvQixJQUFwQjtBQUNIOztBQUVELGdCQUFJLEtBQUtFLGFBQVQsRUFBd0I7QUFDcEIscUJBQUtBLGFBQUwsQ0FBbUJ2SixHQUFuQixHQUF5QixFQUF6QjtBQUNBLHFCQUFLdUosYUFBTCxDQUFtQjRCLGVBQW5CLENBQW1DLEtBQW5DO0FBQ0EscUJBQUs1QixhQUFMLEdBQXFCLElBQXJCO0FBQ0g7QUFDRCxnQkFBSSxLQUFLRCxxQkFBVCxFQUFnQztBQUM1QnZZLHVCQUFPb1AsR0FBUCxDQUFXaUwsZUFBWCxDQUEyQixLQUFLOUIscUJBQWhDO0FBQ0EscUJBQUtBLHFCQUFMLEdBQTZCLElBQTdCO0FBQ0g7QUFDSjs7OzZDQUNxQitCLFcsRUFBYTtBQUMvQixnQkFBSUMsS0FBS0QsV0FBVDtBQUNBLGdCQUFJekksZ0JBQWMwSSxHQUFHQyxTQUFyQjtBQUNBLGdCQUFJRCxHQUFHRSxLQUFILElBQVlGLEdBQUdFLEtBQUgsQ0FBUzdVLE1BQVQsR0FBa0IsQ0FBbEMsRUFBcUM7QUFDakNpTSx5Q0FBdUIwSSxHQUFHRSxLQUExQjtBQUNIOztBQUVELGdCQUFJYixLQUFLLEtBQUtULGdCQUFMLENBQXNCb0IsR0FBRzliLElBQXpCLENBQVQ7QUFDQW1iLGVBQUczTyxNQUFILENBQVUsQ0FBVixFQUFhMk8sR0FBR2hVLE1BQWhCO0FBQ0EsaUJBQUt1VCxnQkFBTCxDQUFzQm9CLEdBQUc5YixJQUF6QixJQUFpQyxFQUFqQztBQUNBLGlCQUFLMmEsb0JBQUwsQ0FBMEJtQixHQUFHOWIsSUFBN0IsSUFBcUMsRUFBckM7QUFDQSxpQkFBS3lhLGlCQUFMLENBQXVCcUIsR0FBRzliLElBQTFCLElBQWtDLEVBQWxDO0FBQ0EsZ0JBQUlpYixLQUFLLEtBQUtwQixZQUFkO0FBQ0EsaUJBQUtaLGdCQUFMLEdBQXdCLElBQXhCO0FBQ0EsZ0JBQUksS0FBS3VCLGNBQUwsQ0FBb0JzQixHQUFHOWIsSUFBdkIsQ0FBSixFQUFrQztBQUM5QmliLG1CQUFHSyxrQkFBSCxDQUFzQixLQUFLZCxjQUFMLENBQW9Cc0IsR0FBRzliLElBQXZCLENBQXRCO0FBQ0Esb0JBQUlvYixLQUFLLEtBQUtaLGNBQUwsQ0FBb0JzQixHQUFHOWIsSUFBdkIsSUFBK0IsS0FBSzZaLFlBQUwsQ0FBa0JvQyxlQUFsQixDQUFrQzdJLFFBQWxDLENBQXhDO0FBQ0FnSSxtQkFBR0YsZ0JBQUgsQ0FBb0IsT0FBcEIsRUFBNkIsS0FBS2xYLENBQUwsQ0FBT3lWLG1CQUFwQztBQUNBMkIsbUJBQUdGLGdCQUFILENBQW9CLFdBQXBCLEVBQWlDLEtBQUtsWCxDQUFMLENBQU8yVix1QkFBeEM7QUFDSDtBQUNEO0FBRUg7OzswQ0FFaUJrQyxXLEVBQWFLLFEsRUFBVTtBQUNyQyxnQkFBSSxDQUFDLEtBQUtyQyxZQUFOLElBQXNCLEtBQUtBLFlBQUwsQ0FBa0J3QixVQUFsQixLQUFpQyxNQUEzRCxFQUFtRTtBQUMvRDtBQUNBO0FBQ0EscUJBQUtqQix3QkFBTCxDQUE4QnZPLElBQTlCLENBQW1DZ1EsV0FBbkM7QUFDQTtBQUNBLHFCQUFLbkIsZ0JBQUwsQ0FBc0JtQixZQUFZN2IsSUFBbEMsRUFBd0M2TCxJQUF4QyxDQUE2Q2dRLFdBQTdDO0FBQ0E5UCx3QkFBUW9RLEdBQVIsTUFBZU4sWUFBWTdiLElBQTNCLEVBQW1DNmIsV0FBbkM7QUFDQTtBQUNIOztBQUVELGdCQUFJQyxLQUFLRCxXQUFUO0FBQ0EsZ0JBQUl6SSxnQkFBYzBJLEdBQUdDLFNBQXJCO0FBQ0EsZ0JBQUlELEdBQUdFLEtBQUgsSUFBWUYsR0FBR0UsS0FBSCxDQUFTN1UsTUFBVCxHQUFrQixDQUFsQyxFQUFxQztBQUNqQ2lNLHlDQUF1QjBJLEdBQUdFLEtBQTFCO0FBQ0g7O0FBRUQsZ0JBQUlJLG1CQUFtQixLQUF2Qjs7QUFFQVgsNkJBQUlZLENBQUosQ0FBTSxLQUFLeEQsR0FBWCxFQUFnQixnREFBZ0R6RixRQUFoRTtBQUNBLGlCQUFLcUgsaUJBQUwsQ0FBdUJxQixHQUFHOWIsSUFBMUIsSUFBa0M4YixFQUFsQzs7QUFFQSxnQkFBSTFJLGFBQWEsS0FBS2lILFVBQUwsQ0FBZ0J5QixHQUFHOWIsSUFBbkIsQ0FBakIsRUFBMkM7QUFDdkMsb0JBQUksQ0FBQyxLQUFLcWEsVUFBTCxDQUFnQnlCLEdBQUc5YixJQUFuQixDQUFMLEVBQStCO0FBQUc7QUFDOUJvYyx1Q0FBbUIsSUFBbkI7QUFDQSx3QkFBSTtBQUNBLDRCQUFJaEIsS0FBSyxLQUFLWixjQUFMLENBQW9Cc0IsR0FBRzliLElBQXZCLElBQStCLEtBQUs2WixZQUFMLENBQWtCb0MsZUFBbEIsQ0FBa0M3SSxRQUFsQyxDQUF4QztBQUNBZ0ksMkJBQUdGLGdCQUFILENBQW9CLE9BQXBCLEVBQTZCLEtBQUtsWCxDQUFMLENBQU95VixtQkFBcEM7QUFDQTJCLDJCQUFHRixnQkFBSCxDQUFvQixXQUFwQixFQUFpQyxLQUFLbFgsQ0FBTCxDQUFPMlYsdUJBQXhDO0FBQ0gscUJBSkQsQ0FJRSxPQUFPaFUsS0FBUCxFQUFjO0FBQ1o4Vix5Q0FBSXpYLENBQUosQ0FBTSxLQUFLNlUsR0FBWCxFQUFnQmxULE1BQU0rVixPQUF0QjtBQUNBLDZCQUFLM0MsUUFBTCxDQUFjak8sSUFBZCxDQUFtQndSLG9CQUFVQyxLQUE3QixFQUFvQyxFQUFDQyxNQUFNN1csTUFBTTZXLElBQWIsRUFBbUJDLEtBQUs5VyxNQUFNK1YsT0FBOUIsRUFBcEM7QUFDQTtBQUNIO0FBQ0osaUJBWEQsTUFXTztBQUNIRCxxQ0FBSVksQ0FBSixDQUFNLEtBQUt4RCxHQUFYLGVBQTJCaUQsR0FBRzliLElBQTlCLG1DQUFnRSxLQUFLcWEsVUFBTCxDQUFnQnlCLEdBQUc5YixJQUFuQixDQUFoRSxrQkFBcUdvVCxRQUFyRztBQUNIO0FBQ0QscUJBQUtpSCxVQUFMLENBQWdCeUIsR0FBRzliLElBQW5CLElBQTJCb1QsUUFBM0I7QUFDSDs7QUFFRCxnQkFBSSxDQUFDOEksUUFBTCxFQUFlO0FBQ1g7QUFDQSxxQkFBS3hCLGdCQUFMLENBQXNCb0IsR0FBRzliLElBQXpCLEVBQStCNkwsSUFBL0IsQ0FBb0NpUSxFQUFwQztBQUNIO0FBQ0QsZ0JBQUksQ0FBQ00sZ0JBQUwsRUFBdUI7QUFBRztBQUN0QixvQkFBSSxLQUFLNUIsY0FBTCxDQUFvQnNCLEdBQUc5YixJQUF2QixLQUFnQyxDQUFDLEtBQUt3YSxjQUFMLENBQW9Cc0IsR0FBRzliLElBQXZCLEVBQTZCMGMsUUFBbEUsRUFBNEU7QUFDeEUseUJBQUtDLGlCQUFMO0FBQ0g7QUFDSjtBQUNELGdCQUFJQyxrQkFBUUMsTUFBUixJQUFrQmYsR0FBR0MsU0FBSCxLQUFpQixZQUFuQyxJQUFtREQsR0FBR2dCLGFBQUgsR0FBbUIsQ0FBMUUsRUFBNkU7QUFDekU7QUFDQTtBQUNBLHFCQUFLNUMsd0JBQUwsR0FBZ0MsSUFBaEM7QUFDQSxxQkFBS0MscUJBQUwsR0FBNkIyQixHQUFHZ0IsYUFBSCxHQUFtQixJQUFoRCxDQUp5RSxDQUlsQjtBQUN2RCxxQkFBS0MsMEJBQUw7QUFDSDtBQUNKOzs7MkNBRWtCQyxZLEVBQWM7QUFDN0IsZ0JBQUkvQixLQUFLK0IsWUFBVDtBQUNBLGlCQUFLdEMsZ0JBQUwsQ0FBc0JPLEdBQUdqYixJQUF6QixFQUErQjZMLElBQS9CLENBQW9Db1AsRUFBcEM7O0FBRUEsZ0JBQUksS0FBS25DLE9BQUwsQ0FBYUUsdUJBQWIsSUFBd0MsS0FBS2lFLHdCQUFMLEVBQTVDLEVBQTZFO0FBQ3pFLHFCQUFLQyxzQkFBTDtBQUNIOztBQUVELGdCQUFJOUIsS0FBSyxLQUFLWixjQUFMLENBQW9CUyxHQUFHamIsSUFBdkIsQ0FBVDtBQUNBLGdCQUFJb2IsTUFBTSxDQUFDQSxHQUFHc0IsUUFBVixJQUFzQixDQUFDLEtBQUtTLHVCQUFMLEVBQXZCLElBQXlELEtBQUtsRSxnQkFBTCxLQUEwQixLQUF2RixFQUE4RjtBQUMxRixxQkFBSzBELGlCQUFMO0FBQ0g7QUFDSjs7OzZCQUVJUyxPLEVBQVM7QUFDVjtBQUNBLGlCQUFLLElBQUlwZCxJQUFULElBQWlCLEtBQUt3YSxjQUF0QixFQUFzQztBQUNsQyxvQkFBSSxDQUFDLEtBQUtBLGNBQUwsQ0FBb0J4YSxJQUFwQixDQUFMLEVBQWdDO0FBQzVCO0FBQ0g7O0FBRUQ7QUFDQSxvQkFBSW9iLEtBQUssS0FBS1osY0FBTCxDQUFvQnhhLElBQXBCLENBQVQ7QUFDQSxvQkFBSSxLQUFLNlosWUFBTCxDQUFrQndCLFVBQWxCLEtBQWlDLE1BQXJDLEVBQTZDO0FBQ3pDLHdCQUFJO0FBQ0E7QUFDQTtBQUNBRCwyQkFBR2lDLEtBQUg7QUFDSCxxQkFKRCxDQUlFLE9BQU8xWCxLQUFQLEVBQWM7QUFDWjhWLHlDQUFJelgsQ0FBSixDQUFNLEtBQUs2VSxHQUFYLEVBQWdCbFQsTUFBTStWLE9BQXRCO0FBQ0g7QUFDSjs7QUFFRDtBQUNBLHFCQUFLZCxRQUFMLENBQWM3QyxLQUFkOztBQUVBO0FBQ0Esb0JBQUlvRCxLQUFLLEtBQUtULGdCQUFMLENBQXNCMWEsSUFBdEIsQ0FBVDtBQUNBbWIsbUJBQUczTyxNQUFILENBQVUsQ0FBVixFQUFhMk8sR0FBR2hVLE1BQWhCOztBQUVBLG9CQUFJLEtBQUswUyxZQUFMLENBQWtCd0IsVUFBbEIsS0FBaUMsUUFBckMsRUFBK0M7QUFDM0M7QUFDQTtBQUNIOztBQUVEO0FBQ0EscUJBQUssSUFBSTVYLElBQUksQ0FBYixFQUFnQkEsSUFBSTJYLEdBQUdrQyxRQUFILENBQVluVyxNQUFoQyxFQUF3QzFELEdBQXhDLEVBQTZDO0FBQ3pDLHdCQUFJOFosUUFBUW5DLEdBQUdrQyxRQUFILENBQVlDLEtBQVosQ0FBa0I5WixDQUFsQixDQUFaO0FBQ0Esd0JBQUkrWixNQUFNcEMsR0FBR2tDLFFBQUgsQ0FBWUUsR0FBWixDQUFnQi9aLENBQWhCLENBQVY7QUFDQSx5QkFBS2tYLG9CQUFMLENBQTBCM2EsSUFBMUIsRUFBZ0M2TCxJQUFoQyxDQUFxQyxFQUFDMFIsWUFBRCxFQUFRQyxRQUFSLEVBQXJDO0FBQ0g7O0FBRUQ7QUFDQSxvQkFBSSxDQUFDcEMsR0FBR3NCLFFBQVIsRUFBa0I7QUFDZCx5QkFBS2UsZUFBTDtBQUNIOztBQUVEO0FBQ0E7QUFDQTtBQUNBLG9CQUFJYixrQkFBUUMsTUFBWixFQUFvQjtBQUNoQix3QkFBSWEsa0JBQWtCLEtBQUtqRCxpQkFBTCxDQUF1QnphLElBQXZCLENBQXRCO0FBQ0Esd0JBQUkwZCxlQUFKLEVBQXFCO0FBQ2pCLDZCQUFLaEQsZ0JBQUwsQ0FBc0IxYSxJQUF0QixFQUE0QjZMLElBQTVCLENBQWlDNlIsZUFBakM7QUFDQSw0QkFBSSxDQUFDdEMsR0FBR3NCLFFBQVIsRUFBa0I7QUFDZCxpQ0FBS0MsaUJBQUw7QUFDSDtBQUNKO0FBQ0o7QUFDSjtBQUNKOzs7c0NBRWE7QUFDVixnQkFBSTFCLEtBQUssS0FBS3BCLFlBQWQ7QUFDQSxnQkFBSXVCLEtBQUssS0FBS1osY0FBZDtBQUNBLGdCQUFJLENBQUNTLEVBQUQsSUFBT0EsR0FBR0ksVUFBSCxLQUFrQixNQUE3QixFQUFxQztBQUNqQyxvQkFBSUosTUFBTUEsR0FBR0ksVUFBSCxLQUFrQixRQUF4QixJQUFvQyxLQUFLc0MsbUJBQUwsRUFBeEMsRUFBb0U7QUFDaEU7QUFDQTtBQUNBLHlCQUFLMUQsY0FBTCxHQUFzQixJQUF0QjtBQUNIO0FBQ0Q7QUFDSDtBQUNELGdCQUFJbUIsR0FBR2QsS0FBSCxJQUFZYyxHQUFHZCxLQUFILENBQVNvQyxRQUFyQixJQUFpQ3RCLEdBQUdiLEtBQUgsSUFBWWEsR0FBR2IsS0FBSCxDQUFTbUMsUUFBMUQsRUFBb0U7QUFDaEU7QUFDQTtBQUNBLHFCQUFLekMsY0FBTCxHQUFzQixJQUF0QjtBQUNILGFBSkQsTUFJTztBQUNILHFCQUFLQSxjQUFMLEdBQXNCLEtBQXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0FnQixtQkFBR08sV0FBSDtBQUNIO0FBQ0o7OzsyQ0FFa0IzRSxHLEVBQUs7QUFDcEIsbUJBQU8sS0FBSytELFFBQUwsQ0FBY2dELHlCQUFkLENBQXdDL0csR0FBeEMsQ0FBUDtBQUNIOzs7bURBRTBCO0FBQ3ZCLGdCQUFJLENBQUMsS0FBS2lDLE9BQUwsQ0FBYUUsdUJBQWxCLEVBQTJDO0FBQ3ZDLHVCQUFPLEtBQVA7QUFDSDs7QUFFRCxnQkFBSTZFLGNBQWMsS0FBSzlELGFBQUwsQ0FBbUI4RCxXQUFyQzs7QUFFQSxpQkFBSyxJQUFJN2QsSUFBVCxJQUFpQixLQUFLd2EsY0FBdEIsRUFBc0M7QUFDbEMsb0JBQUlZLEtBQUssS0FBS1osY0FBTCxDQUFvQnhhLElBQXBCLENBQVQ7QUFDQSxvQkFBSW9iLEVBQUosRUFBUTtBQUNKLHdCQUFJa0MsV0FBV2xDLEdBQUdrQyxRQUFsQjtBQUNBLHdCQUFJQSxTQUFTblcsTUFBVCxJQUFtQixDQUF2QixFQUEwQjtBQUN0Qiw0QkFBSTBXLGNBQWNQLFNBQVNDLEtBQVQsQ0FBZSxDQUFmLENBQWQsSUFBbUMsS0FBS3pFLE9BQUwsQ0FBYTdHLDhCQUFwRCxFQUFvRjtBQUNoRixtQ0FBTyxJQUFQO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7O0FBRUQsbUJBQU8sS0FBUDtBQUNIOzs7aURBRXdCO0FBQ3JCLGdCQUFJNEwsY0FBYyxLQUFLOUQsYUFBTCxDQUFtQjhELFdBQXJDOztBQUVBLGlCQUFLLElBQUk3ZCxJQUFULElBQWlCLEtBQUt3YSxjQUF0QixFQUFzQztBQUNsQyxvQkFBSVksS0FBSyxLQUFLWixjQUFMLENBQW9CeGEsSUFBcEIsQ0FBVDtBQUNBLG9CQUFJb2IsRUFBSixFQUFRO0FBQ0osd0JBQUlrQyxXQUFXbEMsR0FBR2tDLFFBQWxCO0FBQ0Esd0JBQUlRLFdBQVcsS0FBZjs7QUFFQSx5QkFBSyxJQUFJcmEsSUFBSSxDQUFiLEVBQWdCQSxJQUFJNlosU0FBU25XLE1BQTdCLEVBQXFDMUQsR0FBckMsRUFBMEM7QUFDdEMsNEJBQUk4WixRQUFRRCxTQUFTQyxLQUFULENBQWU5WixDQUFmLENBQVo7QUFDQSw0QkFBSStaLE1BQU1GLFNBQVNFLEdBQVQsQ0FBYS9aLENBQWIsQ0FBVjs7QUFFQSw0QkFBSThaLFNBQVNNLFdBQVQsSUFBd0JBLGNBQWNMLE1BQU0sQ0FBaEQsRUFBbUQ7QUFBRztBQUNsRCxnQ0FBSUssY0FBY04sS0FBZCxJQUF1QixLQUFLekUsT0FBTCxDQUFhN0csOEJBQXhDLEVBQXdFO0FBQ3BFNkwsMkNBQVcsSUFBWDtBQUNBLG9DQUFJQyxZQUFZRixjQUFjLEtBQUsvRSxPQUFMLENBQWE1Ryw4QkFBM0M7QUFDQSxxQ0FBS3lJLG9CQUFMLENBQTBCM2EsSUFBMUIsRUFBZ0M2TCxJQUFoQyxDQUFxQyxFQUFDMFIsT0FBT0EsS0FBUixFQUFlQyxLQUFLTyxTQUFwQixFQUFyQztBQUNIO0FBQ0oseUJBTkQsTUFNTyxJQUFJUCxNQUFNSyxXQUFWLEVBQXVCO0FBQzFCQyx1Q0FBVyxJQUFYO0FBQ0EsaUNBQUtuRCxvQkFBTCxDQUEwQjNhLElBQTFCLEVBQWdDNkwsSUFBaEMsQ0FBcUMsRUFBQzBSLE9BQU9BLEtBQVIsRUFBZUMsS0FBS0EsR0FBcEIsRUFBckM7QUFDSDtBQUNKOztBQUVELHdCQUFJTSxZQUFZLENBQUMxQyxHQUFHc0IsUUFBcEIsRUFBOEI7QUFDMUIsNkJBQUtlLGVBQUw7QUFDSDtBQUNKO0FBQ0o7QUFDSjs7O3FEQUU0QjtBQUN6QixnQkFBSXJDLEtBQUssS0FBS1osY0FBZDtBQUNBLGdCQUFJLEtBQUtULGFBQUwsQ0FBbUJzQixVQUFuQixLQUFrQyxDQUFsQyxJQUF1QyxLQUFLeEIsWUFBTCxDQUFrQndCLFVBQWxCLEtBQWlDLE1BQTVFLEVBQW9GO0FBQ2hGO0FBQ0g7QUFDRCxnQkFBS0QsR0FBR2QsS0FBSCxJQUFZYyxHQUFHZCxLQUFILENBQVNvQyxRQUF0QixJQUFvQ3RCLEdBQUdiLEtBQUgsSUFBWWEsR0FBR2IsS0FBSCxDQUFTbUMsUUFBN0QsRUFBd0U7QUFDcEU7QUFDSDs7QUFFRCxnQkFBSXNCLFVBQVUsS0FBS25FLFlBQUwsQ0FBa0J2RixRQUFoQztBQUNBLGdCQUFJMkosU0FBUyxLQUFLOUQscUJBQWxCOztBQUVBLGdCQUFJOEQsU0FBUyxDQUFULEtBQWVwVCxNQUFNbVQsT0FBTixLQUFrQkMsU0FBU0QsT0FBMUMsQ0FBSixFQUF3RDtBQUNwRHZDLGlDQUFJWSxDQUFKLENBQU0sS0FBS3hELEdBQVgsd0NBQW9EbUYsT0FBcEQsWUFBa0VDLE1BQWxFO0FBQ0EscUJBQUtwRSxZQUFMLENBQWtCdkYsUUFBbEIsR0FBNkIySixNQUE3QjtBQUNIOztBQUVELGlCQUFLL0Qsd0JBQUwsR0FBZ0MsS0FBaEM7QUFDQSxpQkFBS0MscUJBQUwsR0FBNkIsQ0FBN0I7QUFDSDs7OzBDQUVpQjtBQUNkLGlCQUFLLElBQUluYSxJQUFULElBQWlCLEtBQUsyYSxvQkFBdEIsRUFBNEM7QUFDeEMsb0JBQUksQ0FBQyxLQUFLSCxjQUFMLENBQW9CeGEsSUFBcEIsQ0FBRCxJQUE4QixLQUFLd2EsY0FBTCxDQUFvQnhhLElBQXBCLEVBQTBCMGMsUUFBNUQsRUFBc0U7QUFDbEU7QUFDSDtBQUNELG9CQUFJdEIsS0FBSyxLQUFLWixjQUFMLENBQW9CeGEsSUFBcEIsQ0FBVDtBQUNBLG9CQUFJa2UsU0FBUyxLQUFLdkQsb0JBQUwsQ0FBMEIzYSxJQUExQixDQUFiO0FBQ0EsdUJBQU9rZSxPQUFPL1csTUFBUCxJQUFpQixDQUFDaVUsR0FBR3NCLFFBQTVCLEVBQXNDO0FBQ2xDLHdCQUFJeUIsUUFBUUQsT0FBT0UsS0FBUCxFQUFaO0FBQ0FoRCx1QkFBR2lELE1BQUgsQ0FBVUYsTUFBTVosS0FBaEIsRUFBdUJZLE1BQU1YLEdBQTdCO0FBQ0g7QUFDSjtBQUNKOzs7NENBRW1CO0FBQ2hCLGdCQUFJYyxrQkFBa0IsS0FBSzVELGdCQUEzQjtBQUNBLGlCQUFLLElBQUkxYSxJQUFULElBQWlCc2UsZUFBakIsRUFBa0M7QUFDOUIsb0JBQUksQ0FBQyxLQUFLOUQsY0FBTCxDQUFvQnhhLElBQXBCLENBQUQsSUFBOEIsS0FBS3dhLGNBQUwsQ0FBb0J4YSxJQUFwQixFQUEwQjBjLFFBQTVELEVBQXNFO0FBQ2xFO0FBQ0g7O0FBRUQsb0JBQUk0QixnQkFBZ0J0ZSxJQUFoQixFQUFzQm1ILE1BQXRCLEdBQStCLENBQW5DLEVBQXNDO0FBQ2xDLHdCQUFJcVIsVUFBVThGLGdCQUFnQnRlLElBQWhCLEVBQXNCb2UsS0FBdEIsRUFBZDs7QUFFQSx3QkFBSTVGLFFBQVErRixlQUFaLEVBQTZCO0FBQ3pCO0FBQ0E7QUFDQSw0QkFBSUMsZ0JBQWdCLEtBQUtoRSxjQUFMLENBQW9CeGEsSUFBcEIsRUFBMEJ1ZSxlQUE5QztBQUNBLDRCQUFJRSxlQUFlakcsUUFBUStGLGVBQVIsR0FBMEIsSUFBN0MsQ0FKeUIsQ0FJMkI7O0FBRXBELDRCQUFJRyxRQUFRdFosS0FBS3VaLEdBQUwsQ0FBU0gsZ0JBQWdCQyxZQUF6QixDQUFaO0FBQ0EsNEJBQUlDLFFBQVEsR0FBWixFQUFpQjtBQUFHO0FBQ2hCakQsNkNBQUlZLENBQUosQ0FBTSxLQUFLeEQsR0FBWCw4Q0FBMEQyRixhQUExRCxZQUE4RUMsWUFBOUU7QUFDQSxpQ0FBS2pFLGNBQUwsQ0FBb0J4YSxJQUFwQixFQUEwQnVlLGVBQTFCLEdBQTRDRSxZQUE1QztBQUNIO0FBQ0QsK0JBQU9qRyxRQUFRK0YsZUFBZjtBQUNIOztBQUVELHdCQUFJLENBQUMvRixRQUFReFYsSUFBVCxJQUFpQndWLFFBQVF4VixJQUFSLENBQWE0YixVQUFiLEtBQTRCLENBQWpELEVBQW9EO0FBQ2hEO0FBQ0E7QUFDSDs7QUFFRCx3QkFBSTtBQUNBLDZCQUFLcEUsY0FBTCxDQUFvQnhhLElBQXBCLEVBQTBCNmUsWUFBMUIsQ0FBdUNyRyxRQUFReFYsSUFBL0M7QUFDQSw2QkFBS2dYLGFBQUwsR0FBcUIsS0FBckI7QUFDQSw0QkFBSWhhLFNBQVMsT0FBVCxJQUFvQndZLFFBQVFzRyxjQUFSLENBQXVCLE1BQXZCLENBQXhCLEVBQXdEO0FBQ3BELGlDQUFLbEUsUUFBTCxDQUFjbUUsV0FBZCxDQUEwQnZHLFFBQVF3RyxJQUFSLENBQWF2SCxVQUF2QztBQUNIO0FBQ0oscUJBTkQsQ0FNRSxPQUFPOVIsS0FBUCxFQUFjO0FBQ1osNkJBQUsrVSxnQkFBTCxDQUFzQjFhLElBQXRCLEVBQTRCaWYsT0FBNUIsQ0FBb0N6RyxPQUFwQztBQUNBLDRCQUFJN1MsTUFBTTZXLElBQU4sS0FBZSxFQUFuQixFQUF1QjtBQUFHO0FBQ3RCOzs7Ozs7Ozs7QUFTQTtBQUNBLGdDQUFJLENBQUMsS0FBS3hDLGFBQVYsRUFBeUI7QUFDckIscUNBQUtqQixRQUFMLENBQWNqTyxJQUFkLENBQW1Cd1Isb0JBQVU0QyxXQUE3QjtBQUNIO0FBQ0QsaUNBQUtsRixhQUFMLEdBQXFCLElBQXJCO0FBQ0gseUJBZkQsTUFlTztBQUNIeUIsNkNBQUl6WCxDQUFKLENBQU0sS0FBSzZVLEdBQVgsRUFBZ0JsVCxNQUFNK1YsT0FBdEI7QUFDQSxpQ0FBSzNDLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUJ3UixvQkFBVUMsS0FBN0IsRUFBb0MsRUFBQ0MsTUFBTTdXLE1BQU02VyxJQUFiLEVBQW1CQyxLQUFLOVcsTUFBTStWLE9BQTlCLEVBQXBDO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7QUFDSjs7O3dDQUVlO0FBQ1pELDZCQUFJWSxDQUFKLENBQU0sS0FBS3hELEdBQVgsRUFBZ0IsMEJBQWhCO0FBQ0EsaUJBQUtnQixZQUFMLENBQWtCMEIsbUJBQWxCLENBQXNDLFlBQXRDLEVBQW9ELEtBQUt2WCxDQUFMLENBQU9rVixZQUEzRDtBQUNBO0FBQ0EsZ0JBQUksS0FBS2tCLHdCQUFMLENBQThCalQsTUFBOUIsR0FBdUMsQ0FBM0MsRUFBOEM7QUFDMUMsb0JBQUlnWSxXQUFXLEtBQUsvRSx3QkFBcEI7QUFDQSx1QkFBTytFLFNBQVNoWSxNQUFoQixFQUF3QjtBQUNwQix3QkFBSXFSLFVBQVUyRyxTQUFTZixLQUFULEVBQWQ7QUFDQSx5QkFBS2dCLGlCQUFMLENBQXVCNUcsT0FBdkIsRUFBZ0MsSUFBaEM7QUFDSDtBQUNKO0FBQ0Q7QUFDQSxnQkFBSSxLQUFLbUYsbUJBQUwsRUFBSixFQUFnQztBQUM1QixxQkFBS2hCLGlCQUFMO0FBQ0g7QUFDRCxpQkFBSzVELFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUJ3UixvQkFBVStDLFdBQTdCO0FBQ0g7Ozt5Q0FFZ0I7QUFDYjtBQUNBNUQsNkJBQUlZLENBQUosQ0FBTSxLQUFLeEQsR0FBWCxFQUFnQiwyQkFBaEI7QUFDSDs7O3lDQUVnQjtBQUNiO0FBQ0E0Qyw2QkFBSVksQ0FBSixDQUFNLEtBQUt4RCxHQUFYLEVBQWdCLDJCQUFoQjtBQUNBLGdCQUFJLEtBQUtnQixZQUFMLElBQXFCLEtBQUs3VixDQUFMLElBQVUsSUFBbkMsRUFBeUM7QUFDckMscUJBQUs2VixZQUFMLENBQWtCMEIsbUJBQWxCLENBQXNDLFlBQXRDLEVBQW9ELEtBQUt2WCxDQUFMLENBQU9rVixZQUEzRDtBQUNBLHFCQUFLVyxZQUFMLENBQWtCMEIsbUJBQWxCLENBQXNDLGFBQXRDLEVBQXFELEtBQUt2WCxDQUFMLENBQU9xVixhQUE1RDtBQUNBLHFCQUFLUSxZQUFMLENBQWtCMEIsbUJBQWxCLENBQXNDLGFBQXRDLEVBQXFELEtBQUt2WCxDQUFMLENBQU91VixhQUE1RDtBQUNIO0FBQ0o7Ozs4Q0FFcUI7QUFDbEIsZ0JBQUk0QixLQUFLLEtBQUtULGdCQUFkO0FBQ0EsbUJBQU9TLEdBQUdiLEtBQUgsQ0FBU25ULE1BQVQsR0FBa0IsQ0FBbEIsSUFBdUJnVSxHQUFHWixLQUFILENBQVNwVCxNQUFULEdBQWtCLENBQWhEO0FBQ0g7OztrREFFeUI7QUFDdEIsZ0JBQUltWSxNQUFNLEtBQUszRSxvQkFBZjtBQUNBLG1CQUFPMkUsSUFBSWhGLEtBQUosQ0FBVW5ULE1BQVYsR0FBbUIsQ0FBbkIsSUFBd0JtWSxJQUFJL0UsS0FBSixDQUFVcFQsTUFBVixHQUFtQixDQUFsRDtBQUNIOzs7bURBRTBCO0FBQ3ZCLGdCQUFJLEtBQUsrUyx3QkFBVCxFQUFtQztBQUMvQixxQkFBSzZDLDBCQUFMO0FBQ0gsYUFGRCxNQUVPLElBQUksS0FBS0ksdUJBQUwsRUFBSixFQUFvQztBQUN2QyxxQkFBS00sZUFBTDtBQUNILGFBRk0sTUFFQSxJQUFJLEtBQUtFLG1CQUFMLEVBQUosRUFBZ0M7QUFDbkMscUJBQUtoQixpQkFBTDtBQUNILGFBRk0sTUFFQSxJQUFJLEtBQUsxQyxjQUFULEVBQXlCO0FBQzVCLHFCQUFLdUIsV0FBTDtBQUNIO0FBQ0QsaUJBQUt6QyxRQUFMLENBQWNqTyxJQUFkLENBQW1Cd1Isb0JBQVVpRCxVQUE3QjtBQUNIOzs7NkNBRW9CdmIsQyxFQUFHO0FBQ3BCeVgsNkJBQUl6WCxDQUFKLENBQU0sS0FBSzZVLEdBQVgsMkJBQXVDN1UsQ0FBdkM7QUFDQTtBQUNIOzs7Ozs7a0JBSVUyVSxhOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1aUJmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkEsSUFBTTJELFlBQVk7QUFDZEMsU0FBTyxPQURPO0FBRWQ4QyxlQUFhLGFBRkM7QUFHZEUsY0FBWSxZQUhFO0FBSWRMLGVBQWE7QUFKQyxDQUFsQjs7a0JBT2U1QyxTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FqQkN6QmY7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7SUFFTWtELFU7QUFFRix3QkFBWUMsZUFBWixFQUE2QjdHLE1BQTdCLEVBQXFDO0FBQUE7O0FBQUE7O0FBQ2pDLGFBQUtDLEdBQUwsR0FBVyxZQUFYO0FBQ0EsYUFBS0UsUUFBTCxHQUFnQixJQUFJek8sZ0JBQUosRUFBaEI7QUFDQSxhQUFLb1Ysb0JBQUwsR0FBNEIsS0FBNUI7QUFDQSxZQUFJOUcsT0FBT25ILFlBQVAsSUFBdUIsT0FBUUosTUFBUixLQUFvQixXQUEvQyxFQUE0RDtBQUN4RCxnQkFBSTtBQUNBLG9CQUFJc08sT0FBTyxtQkFBTzliLENBQUMsc0RBQVIsQ0FBWDtBQUNBLHFCQUFLK2IsT0FBTCxHQUFlRCxLQUFLRSwyQkFBTCxDQUFmO0FBQ0EscUJBQUtDLGlCQUFMLEdBQXlCLEtBQXpCO0FBQ0EscUJBQUtGLE9BQUwsQ0FBYTFFLGdCQUFiLENBQThCLFNBQTlCLEVBQXlDLEtBQUs2RSxnQkFBTCxDQUFzQjNHLElBQXRCLENBQTJCLElBQTNCLENBQXpDO0FBQ0EscUJBQUt3RyxPQUFMLENBQWF0YyxXQUFiLENBQXlCLEVBQUMwYyxLQUFLLE1BQU4sRUFBY0MsT0FBTyxDQUFDUixlQUFELEVBQWtCN0csTUFBbEIsQ0FBckIsRUFBekI7QUFDQSxxQkFBSzVVLENBQUwsR0FBUztBQUNMa2MsNENBQXdCLEtBQUtDLHVCQUFMLENBQTZCL0csSUFBN0IsQ0FBa0MsSUFBbEM7QUFEbkIsaUJBQVQ7QUFHQWdILHlDQUFlQyxnQkFBZixDQUFnQyxLQUFLcmMsQ0FBTCxDQUFPa2Msc0JBQXZDO0FBQ0EscUJBQUtOLE9BQUwsQ0FBYXRjLFdBQWIsQ0FBeUIsRUFBQzBjLEtBQUssZ0JBQU4sRUFBd0JDLE9BQU9HLHlCQUFlRSxTQUFmLEVBQS9CLEVBQXpCO0FBQ0gsYUFYRCxDQVdFLE9BQU8zYSxLQUFQLEVBQWM7QUFDWjhWLGlDQUFJelgsQ0FBSixDQUFNLEtBQUs2VSxHQUFYLEVBQWdCLDJFQUFoQjtBQUNBLHFCQUFLK0csT0FBTCxHQUFlLElBQWY7QUFDQSxxQkFBS1csV0FBTCxHQUFtQixJQUFJQywrQkFBSixDQUEwQmYsZUFBMUIsRUFBMkM3RyxNQUEzQyxDQUFuQjtBQUNIO0FBQ0osU0FqQkQsTUFpQk87QUFDSCxpQkFBSzJILFdBQUwsR0FBbUIsSUFBSUMsK0JBQUosQ0FBMEJmLGVBQTFCLEVBQTJDN0csTUFBM0MsQ0FBbkI7QUFDSDs7QUFFRCxhQUFLMkgsV0FBTCxDQUFpQnhILFFBQWpCLENBQTBCOU0sRUFBMUIsQ0FBNkIsa0JBQTdCLEVBQWlELHNCQUFjO0FBQzdELGtCQUFLOE0sUUFBTCxDQUFjak8sSUFBZCxDQUFtQixrQkFBbkIsRUFBdUMyVixVQUF2QztBQUNELFNBRkQ7O0FBSUEsWUFBSSxLQUFLRixXQUFULEVBQXNCO0FBQ2xCLGdCQUFJRyxNQUFNLEtBQUtILFdBQWY7QUFDQUcsZ0JBQUl6VSxFQUFKLENBQU8wVSw0QkFBa0JDLFFBQXpCLEVBQW1DLEtBQUtDLFVBQUwsQ0FBZ0J6SCxJQUFoQixDQUFxQixJQUFyQixDQUFuQztBQUNBc0gsZ0JBQUl6VSxFQUFKLENBQU8wVSw0QkFBa0JHLFdBQXpCLEVBQXNDLEtBQUtDLGFBQUwsQ0FBbUIzSCxJQUFuQixDQUF3QixJQUF4QixDQUF0QztBQUNBc0gsZ0JBQUl6VSxFQUFKLENBQU8wVSw0QkFBa0JLLFlBQXpCLEVBQXVDLEtBQUtDLGNBQUwsQ0FBb0I3SCxJQUFwQixDQUF5QixJQUF6QixDQUF2QztBQUNBc0gsZ0JBQUl6VSxFQUFKLENBQU8wVSw0QkFBa0JPLGFBQXpCLEVBQXdDLEtBQUtDLGVBQUwsQ0FBcUIvSCxJQUFyQixDQUEwQixJQUExQixDQUF4QztBQUNBc0gsZ0JBQUl6VSxFQUFKLENBQU8wVSw0QkFBa0JTLGdCQUF6QixFQUEyQyxLQUFLQyxrQkFBTCxDQUF3QmpJLElBQXhCLENBQTZCLElBQTdCLENBQTNDO0FBQ0FzSCxnQkFBSXpVLEVBQUosQ0FBTzBVLDRCQUFrQlcsbUJBQXpCLEVBQThDLEtBQUtDLG9CQUFMLENBQTBCbkksSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBOUM7QUFDQXNILGdCQUFJelUsRUFBSixDQUFPMFUsNEJBQWtCYSxVQUF6QixFQUFxQyxLQUFLQyxZQUFMLENBQWtCckksSUFBbEIsQ0FBdUIsSUFBdkIsQ0FBckM7QUFDQXNILGdCQUFJelUsRUFBSixDQUFPMFUsNEJBQWtCZSxlQUF6QixFQUEwQyxLQUFLQyxpQkFBTCxDQUF1QnZJLElBQXZCLENBQTRCLElBQTVCLENBQTFDO0FBQ0FzSCxnQkFBSXpVLEVBQUosQ0FBTzBVLDRCQUFrQmlCLG1CQUF6QixFQUE4QyxLQUFLQyxxQkFBTCxDQUEyQnpJLElBQTNCLENBQWdDLElBQWhDLENBQTlDO0FBQ0g7QUFDSjs7OztrQ0FFUztBQUNOLGdCQUFJLEtBQUt3RyxPQUFULEVBQWtCO0FBQ2Qsb0JBQUksQ0FBQyxLQUFLRSxpQkFBVixFQUE2QjtBQUN6Qix5QkFBS0EsaUJBQUwsR0FBeUIsSUFBekI7QUFDQSx5QkFBS0YsT0FBTCxDQUFhdGMsV0FBYixDQUF5QixFQUFDMGMsS0FBSyxTQUFOLEVBQXpCO0FBQ0FJLDZDQUFlL1QsY0FBZixDQUE4QixLQUFLckksQ0FBTCxDQUFPa2Msc0JBQXJDO0FBQ0EseUJBQUtsYyxDQUFMLEdBQVMsSUFBVDtBQUNIO0FBQ0osYUFQRCxNQU9PO0FBQ0gscUJBQUt1YyxXQUFMLENBQWlCcE4sT0FBakI7QUFDQSxxQkFBS29OLFdBQUwsR0FBbUIsSUFBbkI7QUFDSDtBQUNELGlCQUFLeEgsUUFBTCxDQUFjdE0sa0JBQWQ7QUFDQSxpQkFBS3NNLFFBQUwsR0FBZ0IsSUFBaEI7QUFDSDs7OzJCQUVFK0IsSyxFQUFPcFAsUSxFQUFVO0FBQ2hCLGlCQUFLcU4sUUFBTCxJQUFpQixLQUFLQSxRQUFMLENBQWN0TixXQUFkLENBQTBCcVAsS0FBMUIsRUFBaUNwUCxRQUFqQyxDQUFqQjtBQUNIOzs7NEJBRUdvUCxLLEVBQU9wUCxRLEVBQVU7QUFDakIsaUJBQUtxTixRQUFMLElBQWlCLEtBQUtBLFFBQUwsQ0FBYzFNLGNBQWQsQ0FBNkJ5TyxLQUE3QixFQUFvQ3BQLFFBQXBDLENBQWpCO0FBQ0g7OztvQ0FFVztBQUNSLG1CQUFPLEtBQUtrVSxPQUFMLElBQWdCLElBQXZCO0FBQ0g7OzsrQkFFTTtBQUNILGdCQUFJLEtBQUtBLE9BQVQsRUFBa0I7QUFDZCxxQkFBS0EsT0FBTCxDQUFhdGMsV0FBYixDQUF5QixFQUFDMGMsS0FBSyxPQUFOLEVBQXpCO0FBQ0gsYUFGRCxNQUVPO0FBQ0gscUJBQUtPLFdBQUwsQ0FBaUJoRCxLQUFqQjtBQUNIO0FBQ0o7OztnQ0FFTztBQUNKLGdCQUFJLEtBQUtxQyxPQUFULEVBQWtCO0FBQ2QscUJBQUtBLE9BQUwsQ0FBYXRjLFdBQWIsQ0FBeUIsRUFBQzBjLEtBQUssTUFBTixFQUF6QjtBQUNILGFBRkQsTUFFTztBQUNILHFCQUFLTyxXQUFMLENBQWlCdUIsSUFBakI7QUFDSDtBQUNKOzs7NkJBRUkvTCxZLEVBQWM7QUFDZixnQkFBSSxLQUFLNkosT0FBVCxFQUFrQjtBQUNkLHFCQUFLQSxPQUFMLENBQWF0YyxXQUFiLENBQXlCLEVBQUMwYyxLQUFLLE1BQU4sRUFBY0MsT0FBT2xLLFlBQXJCLEVBQXpCO0FBQ0gsYUFGRCxNQUVPO0FBQ0gscUJBQUt3SyxXQUFMLENBQWlCd0IsSUFBakIsQ0FBc0JoTSxZQUF0QjtBQUNIO0FBQ0o7OztnQ0FFTztBQUNKLGdCQUFJLEtBQUs2SixPQUFULEVBQWtCO0FBQ2QscUJBQUtBLE9BQUwsQ0FBYXRjLFdBQWIsQ0FBeUIsRUFBQzBjLEtBQUssT0FBTixFQUF6QjtBQUNILGFBRkQsTUFFTztBQUNILHFCQUFLTyxXQUFMLENBQWlCeUIsS0FBakI7QUFDSDtBQUNKOzs7aUNBRVE7QUFDTCxnQkFBSSxLQUFLcEMsT0FBVCxFQUFrQjtBQUNkLHFCQUFLQSxPQUFMLENBQWF0YyxXQUFiLENBQXlCLEVBQUMwYyxLQUFLLFFBQU4sRUFBekI7QUFDSCxhQUZELE1BRU87QUFDSCxxQkFBS08sV0FBTCxDQUFpQjBCLE1BQWpCO0FBQ0g7QUFDSjs7O3VDQUVjamlCLEksRUFBTTZiLFcsRUFBYTtBQUFBOztBQUM5QjtBQUNBcFMsb0JBQVF0RSxPQUFSLEdBQWtCbEIsSUFBbEIsQ0FBdUIsWUFBTTtBQUN6Qix1QkFBSzhVLFFBQUwsSUFBaUIsT0FBS0EsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjZWLDRCQUFrQkssWUFBckMsRUFBbURoaEIsSUFBbkQsRUFBeUQ2YixXQUF6RCxDQUFqQjtBQUNILGFBRkQ7QUFHSDs7O3dDQUVlN2IsSSxFQUFNZ2QsWSxFQUFjO0FBQUE7O0FBQ2hDdlQsb0JBQVF0RSxPQUFSLEdBQWtCbEIsSUFBbEIsQ0FBdUIsWUFBTTtBQUN6Qix1QkFBSzhVLFFBQUwsSUFBaUIsT0FBS0EsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjZWLDRCQUFrQk8sYUFBckMsRUFBb0RsaEIsSUFBcEQsRUFBMERnZCxZQUExRCxDQUFqQjtBQUNILGFBRkQ7QUFHSDs7OzZDQUVvQjtBQUFBOztBQUNqQnZULG9CQUFRdEUsT0FBUixHQUFrQmxCLElBQWxCLENBQXVCLFlBQU07QUFDekIsdUJBQUs4VSxRQUFMLElBQWlCLE9BQUtBLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI2Viw0QkFBa0JTLGdCQUFyQyxDQUFqQjtBQUNILGFBRkQ7QUFHSDs7OytDQUVzQjtBQUFBOztBQUNuQjNYLG9CQUFRdEUsT0FBUixHQUFrQmxCLElBQWxCLENBQXVCLFlBQU07QUFDekIsdUJBQUs4VSxRQUFMLElBQWlCLE9BQUtBLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI2Viw0QkFBa0JXLG1CQUFyQyxDQUFqQjtBQUNILGFBRkQ7QUFHSDs7O3FDQUVZWSxTLEVBQVc7QUFBQTs7QUFDcEJ6WSxvQkFBUXRFLE9BQVIsR0FBa0JsQixJQUFsQixDQUF1QixZQUFNO0FBQ3pCLHVCQUFLOFUsUUFBTCxJQUFpQixPQUFLQSxRQUFMLENBQWNqTyxJQUFkLENBQW1CNlYsNEJBQWtCYSxVQUFyQyxFQUFpRFUsU0FBakQsQ0FBakI7QUFDSCxhQUZEO0FBR0g7OzswQ0FFaUJDLGMsRUFBZ0I7QUFBQTs7QUFDOUIxWSxvQkFBUXRFLE9BQVIsR0FBa0JsQixJQUFsQixDQUF1QixZQUFNO0FBQ3pCLHVCQUFLOFUsUUFBTCxJQUFpQixPQUFLQSxRQUFMLENBQWNqTyxJQUFkLENBQW1CNlYsNEJBQWtCZSxlQUFyQyxFQUFzRFMsY0FBdEQsQ0FBakI7QUFDSCxhQUZEO0FBR0g7OzttQ0FFVW5pQixJLEVBQU1nZixJLEVBQU07QUFBQTs7QUFDbkJ2VixvQkFBUXRFLE9BQVIsR0FBa0JsQixJQUFsQixDQUF1QixZQUFNO0FBQ3pCLHVCQUFLOFUsUUFBTCxJQUFpQixPQUFLQSxRQUFMLENBQWNqTyxJQUFkLENBQW1CNlYsNEJBQWtCQyxRQUFyQyxFQUErQzVnQixJQUEvQyxFQUFxRGdmLElBQXJELENBQWpCO0FBQ0gsYUFGRDtBQUdIOzs7c0NBRWFoZixJLEVBQU1nZixJLEVBQU07QUFBQTs7QUFDdEJ2VixvQkFBUXRFLE9BQVIsR0FBa0JsQixJQUFsQixDQUF1QixZQUFNO0FBQ3pCLHVCQUFLOFUsUUFBTCxJQUFpQixPQUFLQSxRQUFMLENBQWNqTyxJQUFkLENBQW1CNlYsNEJBQWtCRyxXQUFyQyxFQUFrRDlnQixJQUFsRCxFQUF3RGdmLElBQXhELENBQWpCO0FBQ0gsYUFGRDtBQUdIOzs7OENBRXFCakosWSxFQUFjO0FBQUE7O0FBQ2hDdE0sb0JBQVF0RSxPQUFSLEdBQWtCbEIsSUFBbEIsQ0FBdUIsWUFBTTtBQUN6Qix3QkFBSzhVLFFBQUwsSUFBaUIsUUFBS0EsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjZWLDRCQUFrQmlCLG1CQUFyQyxFQUEwRDdMLFlBQTFELENBQWpCO0FBQ0gsYUFGRDtBQUdIOzs7Z0RBRXVCNkMsTSxFQUFRO0FBQzVCLGdCQUFJLEtBQUtnSCxPQUFULEVBQWtCO0FBQ2QscUJBQUtBLE9BQUwsQ0FBYXRjLFdBQWIsQ0FBeUIsRUFBQzBjLEtBQUssZ0JBQU4sRUFBd0JDLE9BQU9ySCxNQUEvQixFQUF6QjtBQUNIO0FBQ0o7Ozt5Q0FFZ0I1VSxDLEVBQUc7QUFDaEIsZ0JBQUkwWCxVQUFVMVgsRUFBRWhCLElBQWhCO0FBQ0EsZ0JBQUlBLE9BQU8wWSxRQUFRMVksSUFBbkI7O0FBRUEsZ0JBQUkwWSxRQUFRZSxHQUFSLEtBQWdCLFdBQWhCLElBQStCLEtBQUtxRCxpQkFBeEMsRUFBMkQ7QUFDdkQscUJBQUtBLGlCQUFMLEdBQXlCLEtBQXpCO0FBQ0EscUJBQUtGLE9BQUwsQ0FBYXdDLFNBQWI7QUFDQSxxQkFBS3hDLE9BQUwsR0FBZSxJQUFmO0FBQ0E7QUFDSDs7QUFFRCxvQkFBUWxFLFFBQVFlLEdBQWhCO0FBQ0kscUJBQUtrRSw0QkFBa0JLLFlBQXZCO0FBQ0EscUJBQUtMLDRCQUFrQk8sYUFBdkI7QUFDSSx5QkFBS25JLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI0USxRQUFRZSxHQUEzQixFQUFnQ3paLEtBQUtoRCxJQUFyQyxFQUEyQ2dELEtBQUtBLElBQWhEO0FBQ0E7QUFDSixxQkFBSzJkLDRCQUFrQlMsZ0JBQXZCO0FBQ0EscUJBQUtULDRCQUFrQlcsbUJBQXZCO0FBQ0kseUJBQUt2SSxRQUFMLENBQWNqTyxJQUFkLENBQW1CNFEsUUFBUWUsR0FBM0I7QUFDQTtBQUNKLHFCQUFLa0UsNEJBQWtCYSxVQUF2QjtBQUNJbmhCLDJCQUFPZ2lCLGNBQVAsQ0FBc0JyZixJQUF0QixFQUE0QnFSLG9CQUFVL1QsU0FBdEM7QUFDQSx5QkFBS3lZLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI0USxRQUFRZSxHQUEzQixFQUFnQ3paLElBQWhDO0FBQ0E7QUFDSixxQkFBSzJkLDRCQUFrQmUsZUFBdkI7QUFDSSx5QkFBSzNJLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI0USxRQUFRZSxHQUEzQixFQUFnQ3paLElBQWhDO0FBQ0E7QUFDSixxQkFBSzJkLDRCQUFrQkMsUUFBdkI7QUFDQSxxQkFBS0QsNEJBQWtCRyxXQUF2QjtBQUNJLHlCQUFLL0gsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjRRLFFBQVFlLEdBQTNCLEVBQWdDelosS0FBS2hELElBQXJDLEVBQTJDZ0QsS0FBS2djLElBQWhEO0FBQ0E7QUFDSixxQkFBSzJCLDRCQUFrQmlCLG1CQUF2QjtBQUNJLHlCQUFLN0ksUUFBTCxDQUFjak8sSUFBZCxDQUFtQjRRLFFBQVFlLEdBQTNCLEVBQWdDelosSUFBaEM7QUFDQTtBQUNKLHFCQUFLLGlCQUFMO0FBQ0l5WSxxQ0FBSTNPLE9BQUosQ0FBWWhDLElBQVosQ0FBaUIsS0FBakIsRUFBd0I5SCxLQUFLaEQsSUFBN0IsRUFBbUNnRCxLQUFLc2YsTUFBeEM7QUFDQTtBQUNKO0FBQ0k7QUEzQlI7QUE2Qkg7Ozs7OztrQkFJVTlDLFU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cWpCQ3BQZjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQTtJQUNNZ0IscUI7QUFFRixtQ0FBWWYsZUFBWixFQUE2QjdHLE1BQTdCLEVBQXFDO0FBQUE7O0FBQ2pDLGFBQUtDLEdBQUwsR0FBVyx1QkFBWDtBQUNBLGFBQUtFLFFBQUwsR0FBZ0IsSUFBSXpPLGdCQUFKLEVBQWhCOztBQUVBLGFBQUt3TyxPQUFMLEdBQWVGLE1BQWY7O0FBRUE7QUFDQSxZQUFJLENBQUM2RyxnQkFBZ0JoSyxRQUFyQixFQUErQjtBQUMzQmdLLDRCQUFnQmhLLFFBQWhCLEdBQTJCLENBQUM7QUFDeEJuQiwwQkFBVW1MLGdCQUFnQm5MLFFBREY7QUFFeEJpTywwQkFBVTlDLGdCQUFnQjhDLFFBRkY7QUFHeEJDLHFCQUFLL0MsZ0JBQWdCK0M7QUFIRyxhQUFELENBQTNCO0FBS0g7O0FBRUQ7QUFDQSxZQUFJLE9BQU8vQyxnQkFBZ0JnRCxJQUF2QixLQUFnQyxTQUFwQyxFQUErQztBQUMzQ2hELDRCQUFnQmdELElBQWhCLEdBQXVCLElBQXZCO0FBQ0g7QUFDRCxZQUFJLE9BQU9oRCxnQkFBZ0JpRCxlQUF2QixLQUEyQyxTQUEvQyxFQUEwRDtBQUN0RGpELDRCQUFnQmlELGVBQWhCLEdBQWtDLEtBQWxDO0FBQ0g7O0FBRUQsYUFBS0MsZ0JBQUwsR0FBd0JsRCxlQUF4QjtBQUNBLGFBQUttRCxvQkFBTCxHQUE0QixDQUE1QjtBQUNBLFlBQUlDLGdCQUFnQixDQUFwQjs7QUFFQSxhQUFLRixnQkFBTCxDQUFzQmxOLFFBQXRCLENBQStCcU4sT0FBL0IsQ0FBdUMsVUFBQ3RLLE9BQUQsRUFBYTtBQUNoRDtBQUNBQSxvQkFBUXVLLGFBQVIsR0FBd0JGLGFBQXhCO0FBQ0FBLDZCQUFpQnJLLFFBQVFsRSxRQUF6QjtBQUNBO0FBQ0FrRSxvQkFBUWlLLElBQVIsR0FBZWhELGdCQUFnQmdELElBQS9CO0FBQ0FqSyxvQkFBUWtLLGVBQVIsR0FBMEJqRCxnQkFBZ0JpRCxlQUExQztBQUNBO0FBQ0EsZ0JBQUk5SixPQUFPb0ssY0FBWCxFQUEyQjtBQUN2QnhLLHdCQUFRd0ssY0FBUixHQUF5QnBLLE9BQU9vSyxjQUFoQztBQUNIO0FBQ0osU0FYRDs7QUFhQSxZQUFJLENBQUNuWSxNQUFNZ1ksYUFBTixDQUFELElBQXlCLEtBQUtGLGdCQUFMLENBQXNCck8sUUFBdEIsS0FBbUN1TyxhQUFoRSxFQUErRTtBQUMzRSxpQkFBS0YsZ0JBQUwsQ0FBc0JyTyxRQUF0QixHQUFpQ3VPLGFBQWpDO0FBQ0g7O0FBRUQsYUFBS0ksVUFBTCxHQUFrQixJQUFsQjtBQUNBLGFBQUtDLFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSxhQUFLQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsYUFBS0MsTUFBTCxHQUFjLElBQWQ7O0FBRUEsYUFBS0MsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDQSxhQUFLQyx3QkFBTCxHQUFnQyxJQUFoQzs7QUFFQSxhQUFLQyxtQkFBTCxHQUEyQixJQUEzQjtBQUNIOzs7O2tDQUVTO0FBQ04saUJBQUtOLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxpQkFBS04sZ0JBQUwsR0FBd0IsSUFBeEI7O0FBRUEsZ0JBQUksS0FBS1ksbUJBQVQsRUFBOEI7QUFDMUIscUJBQUtDLDBCQUFMO0FBQ0g7QUFDRCxnQkFBSSxLQUFLSixNQUFULEVBQWlCO0FBQ2IscUJBQUtBLE1BQUwsQ0FBWWpRLE9BQVo7QUFDQSxxQkFBS2lRLE1BQUwsR0FBYyxJQUFkO0FBQ0g7QUFDRCxnQkFBSSxLQUFLRixRQUFULEVBQW1CO0FBQ2YscUJBQUtBLFFBQUwsQ0FBYy9QLE9BQWQ7QUFDQSxxQkFBSytQLFFBQUwsR0FBZ0IsSUFBaEI7QUFDSDtBQUNELGdCQUFJLEtBQUtDLFFBQVQsRUFBbUI7QUFDZixxQkFBS0EsUUFBTCxDQUFjaFEsT0FBZDtBQUNBLHFCQUFLZ1EsUUFBTCxHQUFnQixJQUFoQjtBQUNIOztBQUVELGlCQUFLcEssUUFBTCxDQUFjdE0sa0JBQWQ7QUFDQSxpQkFBS3NNLFFBQUwsR0FBZ0IsSUFBaEI7QUFDSDs7OzJCQUVFK0IsSyxFQUFPcFAsUSxFQUFVO0FBQ2hCLGlCQUFLcU4sUUFBTCxDQUFjdE4sV0FBZCxDQUEwQnFQLEtBQTFCLEVBQWlDcFAsUUFBakM7QUFDSDs7OzRCQUVHb1AsSyxFQUFPcFAsUSxFQUFVO0FBQ2pCLGlCQUFLcU4sUUFBTCxDQUFjMU0sY0FBZCxDQUE2QnlPLEtBQTdCLEVBQW9DcFAsUUFBcEM7QUFDSDs7O2dDQUVPO0FBQ0osaUJBQUsrWCxZQUFMLENBQWtCLENBQWxCO0FBQ0EsaUJBQUtDLHlCQUFMO0FBQ0g7OztxQ0FFWUMsWSxFQUFjQyxZLEVBQWM7QUFDckMsaUJBQUtoQixvQkFBTCxHQUE0QmUsWUFBNUI7QUFDQSxnQkFBSUUsYUFBYSxLQUFLbEIsZ0JBQUwsQ0FBc0JsTixRQUF0QixDQUErQmtPLFlBQS9CLENBQWpCOztBQUVBLGdCQUFJM1EsUUFBUSxLQUFLb1EsTUFBTCxHQUFjLElBQUluUSxzQkFBSixDQUFpQjRRLFVBQWpCLEVBQTZCLEtBQUsvSyxPQUFsQyxFQUEyQzZLLFlBQTNDLENBQTFCO0FBQ0EzUSxrQkFBTThRLE9BQU4sR0FBZ0IsS0FBS0MsY0FBTCxDQUFvQjNLLElBQXBCLENBQXlCLElBQXpCLENBQWhCO0FBQ0FwRyxrQkFBTWdSLFFBQU4sR0FBaUIsS0FBS0MsV0FBTCxDQUFpQjdLLElBQWpCLENBQXNCLElBQXRCLENBQWpCO0FBQ0FwRyxrQkFBTWtSLFVBQU4sR0FBbUIsS0FBS0MsYUFBTCxDQUFtQi9LLElBQW5CLENBQXdCLElBQXhCLENBQW5CO0FBQ0FwRyxrQkFBTW9SLFVBQU4sR0FBbUIsS0FBS0MsYUFBTCxDQUFtQmpMLElBQW5CLENBQXdCLElBQXhCLENBQW5CO0FBQ0FwRyxrQkFBTXNSLG1CQUFOLEdBQTRCLEtBQUtDLHNCQUFMLENBQTRCbkwsSUFBNUIsQ0FBaUMsSUFBakMsQ0FBNUI7O0FBRUEsZ0JBQUl3SyxZQUFKLEVBQWtCO0FBQ2QscUJBQUtWLFFBQUwsQ0FBY3NCLGNBQWQsQ0FBNkIsS0FBS3BCLE1BQWxDO0FBQ0gsYUFGRCxNQUVPO0FBQ0hwUSxzQkFBTXlSLGFBQU4sR0FBc0IsS0FBS0MsbUJBQUwsQ0FBeUJ0TCxJQUF6QixDQUE4QixJQUE5QixDQUF0QjtBQUNIOztBQUVEcEcsa0JBQU0yUixJQUFOLENBQVdmLFlBQVg7QUFDSDs7OytCQUVNO0FBQ0gsaUJBQUtnQixjQUFMO0FBQ0EsaUJBQUtwQiwwQkFBTDtBQUNIOzs7eUNBRWdCO0FBQ2IsZ0JBQUksS0FBS0osTUFBVCxFQUFpQjtBQUNiLHFCQUFLQSxNQUFMLENBQVlqUSxPQUFaO0FBQ0EscUJBQUtpUSxNQUFMLEdBQWMsSUFBZDtBQUNIO0FBQ0o7OztnQ0FFTztBQUFHO0FBQ1AsZ0JBQUksS0FBS0EsTUFBTCxJQUFlLEtBQUtBLE1BQUwsQ0FBWXlCLFNBQVosRUFBbkIsRUFBNEM7QUFDeEMscUJBQUt6QixNQUFMLENBQVlwQixLQUFaO0FBQ0EscUJBQUt3QiwwQkFBTDtBQUNIO0FBQ0o7OztpQ0FFUTtBQUNMLGdCQUFJLEtBQUtKLE1BQUwsSUFBZSxLQUFLQSxNQUFMLENBQVkwQixRQUFaLEVBQW5CLEVBQTJDO0FBQ3ZDLHFCQUFLMUIsTUFBTCxDQUFZbkIsTUFBWjtBQUNBLHFCQUFLeUIseUJBQUw7QUFDSDtBQUNKOzs7NkJBRUkzTixZLEVBQWM7QUFDZixnQkFBSSxLQUFLa04sVUFBTCxJQUFtQixJQUFuQixJQUEyQixDQUFDLEtBQUtBLFVBQUwsQ0FBZ0I4QixVQUFoQixFQUFoQyxFQUE4RDtBQUMxRDtBQUNIOztBQUVELGdCQUFJQyxxQkFBcUIsS0FBS0MsMkJBQUwsQ0FBaUNsUCxZQUFqQyxDQUF6Qjs7QUFFQSxnQkFBSWlQLHVCQUF1QixLQUFLcEMsb0JBQWhDLEVBQXNEO0FBQ2xEO0FBQ0Esb0JBQUlzQyxjQUFjLEtBQUtqQyxVQUFMLENBQWdCeE4sUUFBaEIsQ0FBeUJ1UCxrQkFBekIsQ0FBbEI7O0FBRUEsb0JBQUlFLGVBQWUxakIsU0FBbkIsRUFBOEI7QUFDMUI7QUFDQTtBQUNBLHlCQUFLNmhCLGdCQUFMLEdBQXdCdE4sWUFBeEI7QUFDSCxpQkFKRCxNQUlPO0FBQ0gsd0JBQUlvUCxXQUFXRCxZQUFZRSxrQkFBWixDQUErQnJQLFlBQS9CLENBQWY7QUFDQSx5QkFBS29OLFFBQUwsQ0FBY3BCLElBQWQsQ0FBbUJvRCxTQUFTcFAsWUFBNUI7QUFDQSx5QkFBS3FOLE1BQUwsQ0FBWXJCLElBQVosQ0FBaUJvRCxTQUFTOU8sWUFBMUI7QUFDQTtBQUNBLHlCQUFLaU4sd0JBQUwsR0FBZ0M2QixTQUFTcFAsWUFBekM7QUFDSDtBQUNKLGFBZkQsTUFlTztBQUNIO0FBQ0Esb0JBQUlzUCxvQkFBb0IsS0FBS3BDLFVBQUwsQ0FBZ0J4TixRQUFoQixDQUF5QnVQLGtCQUF6QixDQUF4Qjs7QUFFQSxvQkFBSUsscUJBQXFCN2pCLFNBQXpCLEVBQW9DO0FBQ2hDO0FBQ0EseUJBQUs2aEIsZ0JBQUwsR0FBd0J0TixZQUF4QjtBQUNBLHlCQUFLNk8sY0FBTDtBQUNBLHlCQUFLekIsUUFBTCxDQUFjcEIsSUFBZDtBQUNBLHlCQUFLb0IsUUFBTCxDQUFjbUMsbUJBQWQ7QUFDQSx5QkFBSzdCLFlBQUwsQ0FBa0J1QixrQkFBbEI7QUFDQTtBQUNILGlCQVJELE1BUU87QUFDSDtBQUNBLHdCQUFJRyxZQUFXRSxrQkFBa0JELGtCQUFsQixDQUFxQ3JQLFlBQXJDLENBQWY7QUFDQSx5QkFBSzZPLGNBQUw7QUFDQSx5QkFBS3pCLFFBQUwsQ0FBY3BCLElBQWQsQ0FBbUJoTSxZQUFuQjtBQUNBLHlCQUFLb04sUUFBTCxDQUFjbUMsbUJBQWQ7QUFDQSx5QkFBS3BDLFFBQUwsQ0FBY3FDLGNBQWQ7QUFDQSx5QkFBS3JDLFFBQUwsQ0FBY0gsYUFBZCxHQUE4QixLQUFLSixnQkFBTCxDQUFzQmxOLFFBQXRCLENBQStCdVAsa0JBQS9CLEVBQW1EakMsYUFBakY7QUFDQSx5QkFBS1UsWUFBTCxDQUFrQnVCLGtCQUFsQixFQUFzQ0csVUFBUzlPLFlBQS9DO0FBQ0EseUJBQUtpTix3QkFBTCxHQUFnQzZCLFVBQVNwUCxZQUF6QztBQUNBLHlCQUFLeVAsdUJBQUwsQ0FBNkJSLGtCQUE3QjtBQUNIO0FBQ0o7O0FBRUQsaUJBQUt0Qix5QkFBTDtBQUNIOzs7b0RBRTJCM04sWSxFQUFjO0FBQ3RDLGdCQUFJTixXQUFXLEtBQUtrTixnQkFBTCxDQUFzQmxOLFFBQXJDO0FBQ0EsZ0JBQUljLE1BQU1kLFNBQVN0TyxNQUFULEdBQWtCLENBQTVCOztBQUVBLGlCQUFLLElBQUkxRCxJQUFJLENBQWIsRUFBZ0JBLElBQUlnUyxTQUFTdE8sTUFBN0IsRUFBcUMxRCxHQUFyQyxFQUEwQztBQUN0QyxvQkFBSXNTLGVBQWVOLFNBQVNoUyxDQUFULEVBQVlzZixhQUEvQixFQUE4QztBQUMxQ3hNLDBCQUFNOVMsSUFBSSxDQUFWO0FBQ0E7QUFDSDtBQUNKO0FBQ0QsbUJBQU84UyxHQUFQO0FBQ0g7Ozs0Q0FFbUJ2VCxJLEVBQU15aUIsUyxFQUFXO0FBQUE7O0FBQ2pDLGdCQUFJQyxZQUFZLElBQWhCO0FBQ0EsZ0JBQUlDLFdBQVcsQ0FBZjs7QUFFQSxnQkFBSUYsWUFBWSxDQUFoQixFQUFtQjtBQUNmO0FBQ0EscUJBQUt2QyxRQUFMLENBQWNzQixjQUFkLENBQTZCLEtBQUtwQixNQUFsQztBQUNBLHFCQUFLRixRQUFMLENBQWNILGFBQWQsR0FBOEIsS0FBS0osZ0JBQUwsQ0FBc0JsTixRQUF0QixDQUErQixLQUFLbU4sb0JBQXBDLEVBQTBERyxhQUF4Rjs7QUFFQTRDLDJCQUFXLEtBQUt6QyxRQUFMLENBQWMwQyxXQUFkLENBQTBCNWlCLElBQTFCLEVBQWdDeWlCLFNBQWhDLENBQVg7QUFDSCxhQU5ELE1BTU8sSUFBSSxDQUFDQyxZQUFZRyxxQkFBV0MsS0FBWCxDQUFpQjlpQixJQUFqQixDQUFiLEVBQXFDK2lCLEtBQXpDLEVBQWdEO0FBQ25EO0FBQ0EscUJBQUs3QyxRQUFMLEdBQWdCLElBQUkyQyxvQkFBSixDQUFlSCxTQUFmLEVBQTBCLEtBQUs1TSxPQUEvQixDQUFoQjs7QUFFQSxxQkFBS29LLFFBQUwsQ0FBY25LLFFBQWQsQ0FBdUI5TSxFQUF2QixDQUEwQixrQkFBMUIsRUFBOEMsc0JBQWM7QUFDMUQsMEJBQUs4TSxRQUFMLENBQWNqTyxJQUFkLENBQW1CLGtCQUFuQixFQUF1QzJWLFVBQXZDO0FBQ0QsaUJBRkQ7O0FBSUEsb0JBQUksQ0FBQyxLQUFLMEMsUUFBVixFQUFvQjtBQUNoQix5QkFBS0EsUUFBTCxHQUFnQixJQUFJNkMsb0JBQUosQ0FBZSxLQUFLbE4sT0FBcEIsQ0FBaEI7QUFDSDs7QUFFRCxvQkFBSW1OLE1BQU0sS0FBS3RELGdCQUFmO0FBQ0Esb0JBQUlzRCxJQUFJM1IsUUFBSixJQUFnQjlTLFNBQWhCLElBQTZCLENBQUNxSixNQUFNb2IsSUFBSTNSLFFBQVYsQ0FBbEMsRUFBdUQ7QUFDbkQseUJBQUs0TyxRQUFMLENBQWNnRCxpQkFBZCxHQUFrQ0QsSUFBSTNSLFFBQXRDO0FBQ0g7QUFDRCxvQkFBSSxPQUFPMlIsSUFBSTFSLFFBQVgsS0FBd0IsU0FBNUIsRUFBdUM7QUFDbkMseUJBQUsyTyxRQUFMLENBQWNpRCxpQkFBZCxHQUFrQ0YsSUFBSTFSLFFBQXRDO0FBQ0g7QUFDRCxvQkFBSSxPQUFPMFIsSUFBSXpSLFFBQVgsS0FBd0IsU0FBNUIsRUFBdUM7QUFDbkMseUJBQUswTyxRQUFMLENBQWNrRCxpQkFBZCxHQUFrQ0gsSUFBSXpSLFFBQXRDO0FBQ0g7O0FBRUQscUJBQUswTyxRQUFMLENBQWNILGFBQWQsR0FBOEJrRCxJQUFJeFEsUUFBSixDQUFhLEtBQUttTixvQkFBbEIsRUFBd0NHLGFBQXRFOztBQUVBLHFCQUFLRyxRQUFMLENBQWNZLE9BQWQsR0FBd0IsS0FBS3VDLGlCQUFMLENBQXVCak4sSUFBdkIsQ0FBNEIsSUFBNUIsQ0FBeEI7QUFDQSxxQkFBSzhKLFFBQUwsQ0FBY29ELFdBQWQsR0FBNEIsS0FBSzdFLFlBQUwsQ0FBa0JySSxJQUFsQixDQUF1QixJQUF2QixDQUE1Qjs7QUFFQSxxQkFBSytKLFFBQUwsQ0FBY3FCLGNBQWQsQ0FBNkIsS0FBS3RCLFFBQUwsQ0FDZnNCLGNBRGUsQ0FDQSxLQUFLcEIsTUFETCxDQUE3Qjs7QUFJQSxxQkFBS0QsUUFBTCxDQUFjb0QsYUFBZCxHQUE4QixLQUFLQyw0QkFBTCxDQUFrQ3BOLElBQWxDLENBQXVDLElBQXZDLENBQTlCO0FBQ0EscUJBQUsrSixRQUFMLENBQWNzRCxjQUFkLEdBQStCLEtBQUtDLDZCQUFMLENBQW1DdE4sSUFBbkMsQ0FBd0MsSUFBeEMsQ0FBL0I7O0FBRUF1TSwyQkFBVyxLQUFLekMsUUFBTCxDQUFjMEMsV0FBZCxDQUEwQjVpQixJQUExQixFQUFnQ3lpQixTQUFoQyxDQUFYO0FBQ0gsYUFwQ00sTUFvQ0E7QUFDSEMsNEJBQVksSUFBWjtBQUNBakssaUNBQUl6WCxDQUFKLENBQU0sS0FBSzZVLEdBQVgsRUFBZ0Isa0NBQWhCO0FBQ0FwUCx3QkFBUXRFLE9BQVIsR0FBa0JsQixJQUFsQixDQUF1QixZQUFNO0FBQ3pCLDBCQUFLMmdCLGNBQUw7QUFDSCxpQkFGRDtBQUdBLHFCQUFLN0wsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjZWLDRCQUFrQkcsV0FBckMsRUFBa0Q2RixzQkFBWUMsa0JBQTlELEVBQWtGLGlDQUFsRjs7QUFFQWpCLDJCQUFXLENBQVg7QUFDSDs7QUFFRCxtQkFBT0EsUUFBUDtBQUNIOzs7cUNBRVl6RCxTLEVBQVc7QUFBQTs7QUFDcEIsZ0JBQUksS0FBS2UsVUFBTCxJQUFtQixJQUF2QixFQUE2QjtBQUN6QjtBQUNBLHFCQUFLQSxVQUFMLEdBQWtCNWlCLE9BQU91UyxNQUFQLENBQWMsRUFBZCxFQUFrQnNQLFNBQWxCLENBQWxCO0FBQ0EscUJBQUtlLFVBQUwsQ0FBZ0JyTixjQUFoQixHQUFpQyxJQUFqQztBQUNBLHFCQUFLcU4sVUFBTCxDQUFnQnhOLFFBQWhCLEdBQTJCLEVBQTNCO0FBQ0EscUJBQUt3TixVQUFMLENBQWdCdk4sWUFBaEIsR0FBK0IsS0FBS2lOLGdCQUFMLENBQXNCbE4sUUFBdEIsQ0FBK0J0TyxNQUE5RDtBQUNBOUcsdUJBQU9naUIsY0FBUCxDQUFzQixLQUFLWSxVQUEzQixFQUF1QzVPLG9CQUFVL1QsU0FBakQ7QUFDSDs7QUFFRCxnQkFBSTRrQixjQUFjN2tCLE9BQU91UyxNQUFQLENBQWMsRUFBZCxFQUFrQnNQLFNBQWxCLENBQWxCO0FBQ0E3aEIsbUJBQU9naUIsY0FBUCxDQUFzQjZDLFdBQXRCLEVBQW1DN1Esb0JBQVUvVCxTQUE3QztBQUNBLGlCQUFLMmlCLFVBQUwsQ0FBZ0J4TixRQUFoQixDQUF5QixLQUFLbU4sb0JBQTlCLElBQXNEc0MsV0FBdEQ7O0FBRUE7QUFDQSxpQkFBS00sdUJBQUwsQ0FBNkIsS0FBSzVDLG9CQUFsQzs7QUFFQSxnQkFBSSxLQUFLUyxnQkFBTCxJQUF5QixJQUE3QixFQUFtQztBQUMvQjVaLHdCQUFRdEUsT0FBUixHQUFrQmxCLElBQWxCLENBQXVCLFlBQU07QUFDekIsd0JBQUlnYSxTQUFTLE9BQUtvRixnQkFBbEI7QUFDQSwyQkFBS0EsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDQSwyQkFBS3RCLElBQUwsQ0FBVTlELE1BQVY7QUFDSCxpQkFKRDtBQUtIO0FBQ0o7OztzQ0FFYTtBQUNWLGlCQUFLa0YsUUFBTCxDQUFjbUMsbUJBQWQ7QUFDSDs7O3NDQUVhdUIsUyxFQUFXO0FBQ3JCLGdCQUFJbEQsZUFBZWtELFNBQW5CO0FBQ0EsZ0JBQUlDLG1CQUFtQm5ELGVBQWUsQ0FBdEM7O0FBRUEsZ0JBQUltRCxtQkFBbUIsS0FBS25FLGdCQUFMLENBQXNCbE4sUUFBdEIsQ0FBK0J0TyxNQUF0RCxFQUE4RDtBQUMxRCxxQkFBS3lkLGNBQUw7QUFDQSxxQkFBS25CLFlBQUwsQ0FBa0JxRCxnQkFBbEI7QUFDSCxhQUhELE1BR087QUFDSCxxQkFBSzNELFFBQUwsQ0FBYzRELG1CQUFkO0FBQ0EscUJBQUtoTyxRQUFMLENBQWNqTyxJQUFkLENBQW1CNlYsNEJBQWtCUyxnQkFBckM7QUFDQSxxQkFBS29DLDBCQUFMO0FBQ0g7QUFDSjs7O3NDQUVhd0QsYSxFQUFlO0FBQ3pCLGdCQUFJckQsZUFBZSxLQUFLUCxNQUFMLENBQVl5RCxTQUEvQjtBQUNBLGlCQUFLbEUsZ0JBQUwsQ0FBc0JsTixRQUF0QixDQUErQmtPLFlBQS9CLEVBQTZDcUQsYUFBN0MsR0FBNkRBLGFBQTdEO0FBQ0g7OztpREFFd0I7QUFDckIsaUJBQUtqTyxRQUFMLENBQWNqTyxJQUFkLENBQW1CNlYsNEJBQWtCVyxtQkFBckM7QUFDSDs7O3VDQUVjdGhCLEksRUFBTWdmLEksRUFBTTtBQUN2QnZELDZCQUFJelgsQ0FBSixDQUFNLEtBQUs2VSxHQUFYLDJCQUF1QzdZLElBQXZDLGlCQUF1RGdmLEtBQUt4QyxJQUE1RCxnQkFBMkV3QyxLQUFLdkMsR0FBaEY7QUFDQSxpQkFBSzFELFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI2Viw0QkFBa0JDLFFBQXJDLEVBQStDNWdCLElBQS9DLEVBQXFEZ2YsSUFBckQ7QUFDQSxpQkFBS3dFLDBCQUFMO0FBQ0g7OzswQ0FFaUJ4akIsSSxFQUFNZ2YsSSxFQUFNO0FBQzFCdkQsNkJBQUl6WCxDQUFKLENBQU0sS0FBSzZVLEdBQVgsOEJBQTBDN1ksSUFBMUMsaUJBQTBEZ2YsSUFBMUQ7QUFDQSxpQkFBS2pHLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI2Viw0QkFBa0JHLFdBQXJDLEVBQWtEOWdCLElBQWxELEVBQXdEZ2YsSUFBeEQ7QUFDSDs7O3FEQUU0QmhmLEksRUFBTTZiLFcsRUFBYTtBQUM1QyxpQkFBSzlDLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI2Viw0QkFBa0JLLFlBQXJDLEVBQW1EaGhCLElBQW5ELEVBQXlENmIsV0FBekQ7QUFDSDs7O3NEQUU2QjdiLEksRUFBTWdkLFksRUFBYztBQUM5QyxnQkFBSSxLQUFLcUcsZ0JBQUwsSUFBeUIsSUFBN0IsRUFBbUM7QUFDL0I7QUFDQTtBQUNIO0FBQ0QsaUJBQUt0SyxRQUFMLENBQWNqTyxJQUFkLENBQW1CNlYsNEJBQWtCTyxhQUFyQyxFQUFvRGxoQixJQUFwRCxFQUEwRGdkLFlBQTFEOztBQUVBO0FBQ0EsZ0JBQUksS0FBS3NHLHdCQUFMLElBQWlDLElBQWpDLElBQXlDdGpCLFNBQVMsT0FBdEQsRUFBK0Q7QUFDM0Qsb0JBQUl5WCxhQUFhdUYsYUFBYWdDLElBQWIsQ0FBa0J2SCxVQUFuQztBQUNBLG9CQUFJd1AsWUFBWSxLQUFLM0Qsd0JBQXJCO0FBQ0EscUJBQUtBLHdCQUFMLEdBQWdDLElBQWhDOztBQUVBO0FBQ0Esb0JBQUkxRyxrQkFBUUMsTUFBUixJQUFrQnBGLFdBQVd0USxNQUFYLEdBQW9CLENBQXRDLElBQTJDc1EsV0FBVyxDQUFYLEVBQWNWLFdBQWQsS0FBOEJrUSxTQUE3RSxFQUF3RjtBQUNwRkEsZ0NBQVl4UCxXQUFXLENBQVgsRUFBY1gsR0FBMUI7QUFDSDtBQUNEOztBQUVBLHFCQUFLaUMsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjZWLDRCQUFrQmlCLG1CQUFyQyxFQUEwRHFGLFNBQTFEO0FBQ0g7QUFDSjs7O29EQUUyQjtBQUN4QixnQkFBSSxLQUFLMUQsbUJBQUwsSUFBNEIsSUFBaEMsRUFBc0M7QUFDbEMscUJBQUtBLG1CQUFMLEdBQTJCemhCLEtBQUtvbEIsV0FBTCxDQUN2QixLQUFLQyxxQkFBTCxDQUEyQi9OLElBQTNCLENBQWdDLElBQWhDLENBRHVCLEVBRTNCLEtBQUtOLE9BQUwsQ0FBYTNHLDRCQUZjLENBQTNCO0FBR0g7QUFDSjs7O3FEQUU0QjtBQUN6QixnQkFBSSxLQUFLb1IsbUJBQVQsRUFBOEI7QUFDMUJ6aEIscUJBQUtzbEIsYUFBTCxDQUFtQixLQUFLN0QsbUJBQXhCO0FBQ0EscUJBQUtBLG1CQUFMLEdBQTJCLElBQTNCO0FBQ0g7QUFDSjs7O2dEQUV1QkksWSxFQUFjO0FBQ2xDLGdCQUFJdUIsY0FBYyxLQUFLakMsVUFBTCxDQUFnQnhOLFFBQWhCLENBQXlCa08sWUFBekIsQ0FBbEI7QUFDQSxnQkFBSTBELGFBQWFobkIsT0FBT3VTLE1BQVAsQ0FBYyxFQUFkLEVBQWtCc1MsV0FBbEIsQ0FBakI7O0FBRUFtQyx1QkFBVy9TLFFBQVgsR0FBc0IsS0FBSzJPLFVBQUwsQ0FBZ0IzTyxRQUF0QztBQUNBK1MsdUJBQVczUixZQUFYLEdBQTBCLEtBQUt1TixVQUFMLENBQWdCdk4sWUFBMUM7QUFDQSxtQkFBTzJSLFdBQVc1UixRQUFsQjtBQUNBLG1CQUFPNFIsV0FBV3pSLGNBQWxCOztBQUVBLGlCQUFLbUQsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjZWLDRCQUFrQmEsVUFBckMsRUFBaUQ2RixVQUFqRDtBQUNIOzs7Z0RBRXVCO0FBQ3BCLGdCQUFJckksT0FBTyxFQUFYOztBQUVBQSxpQkFBS3dELEdBQUwsR0FBVyxLQUFLWSxNQUFMLENBQVlrRSxVQUF2QjtBQUNBdEksaUJBQUt1SSxXQUFMLEdBQW1CLEtBQUtuRSxNQUFMLENBQVltRSxXQUEvQjtBQUNBLGdCQUFJdkksS0FBS3VJLFdBQVQsRUFBc0I7QUFDbEJ2SSxxQkFBS2dJLGFBQUwsR0FBcUIsS0FBSzVELE1BQUwsQ0FBWW9FLG9CQUFqQztBQUNIOztBQUVEeEksaUJBQUt5SSxLQUFMLEdBQWEsS0FBS3JFLE1BQUwsQ0FBWXNFLFlBQXpCO0FBQ0ExSSxpQkFBSzlMLFVBQUwsR0FBa0IsS0FBS2tRLE1BQUwsQ0FBWWxRLFVBQTlCO0FBQ0E4TCxpQkFBSzJJLG1CQUFMLEdBQTJCLEtBQUsvRSxvQkFBaEM7QUFDQTVELGlCQUFLNEksaUJBQUwsR0FBeUIsS0FBS2pGLGdCQUFMLENBQXNCbE4sUUFBdEIsQ0FBK0J0TyxNQUF4RDs7QUFFQSxpQkFBSzRSLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI2Viw0QkFBa0JlLGVBQXJDLEVBQXNEMUMsSUFBdEQ7QUFDSDs7Ozs7O2tCQUlVd0IscUI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQy9hZjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLElBQU1HLG9CQUFvQjtBQUN0QkMsWUFBVSxVQURZO0FBRXRCRSxlQUFhLGFBRlM7QUFHdEJFLGdCQUFjLGNBSFE7QUFJdEJFLGlCQUFlLGVBSk87QUFLdEJFLG9CQUFrQixrQkFMSTtBQU10QkUsdUJBQXFCLHFCQU5DO0FBT3RCRSxjQUFZLFlBUFU7QUFRdEJFLG1CQUFpQixpQkFSSztBQVN0QkUsdUJBQXFCO0FBVEMsQ0FBMUI7O2tCQVllakIsaUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNaZjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7OztBQWFBLElBQUlkLG9CQUFvQixTQUFwQkEsaUJBQW9CLENBQVUvZCxJQUFWLEVBQWdCOztBQUVwQyxRQUFJK1csTUFBTSxtQkFBVjtBQUNBLFFBQUlnUCxhQUFhLElBQWpCO0FBQ0EsUUFBSUMsaUJBQWlCQyxpQkFBaUIzTyxJQUFqQixDQUFzQixJQUF0QixDQUFyQjs7QUFFQTRPLHVCQUFTQyxPQUFUOztBQUVBbm1CLFNBQUtvWixnQkFBTCxDQUFzQixTQUF0QixFQUFpQyxVQUFVbFgsQ0FBVixFQUFhO0FBQzFDLGdCQUFRQSxFQUFFaEIsSUFBRixDQUFPZ2QsR0FBZjtBQUNJLGlCQUFLLE1BQUw7QUFDSTZILDZCQUFhLElBQUlySCwrQkFBSixDQUEwQnhjLEVBQUVoQixJQUFGLENBQU9pZCxLQUFQLENBQWEsQ0FBYixDQUExQixFQUEyQ2pjLEVBQUVoQixJQUFGLENBQU9pZCxLQUFQLENBQWEsQ0FBYixDQUEzQyxDQUFiO0FBQ0E0SCwyQkFBVzViLEVBQVgsQ0FBYzBVLDRCQUFrQkMsUUFBaEMsRUFBMENzSCxVQUFVOU8sSUFBVixDQUFlLElBQWYsQ0FBMUM7QUFDQXlPLDJCQUFXNWIsRUFBWCxDQUFjMFUsNEJBQWtCRyxXQUFoQyxFQUE2Q3FILGFBQWEvTyxJQUFiLENBQWtCLElBQWxCLENBQTdDO0FBQ0F5TywyQkFBVzViLEVBQVgsQ0FBYzBVLDRCQUFrQkssWUFBaEMsRUFBOEN1RixjQUFjbk4sSUFBZCxDQUFtQixJQUFuQixDQUE5QztBQUNBeU8sMkJBQVc1YixFQUFYLENBQWMwVSw0QkFBa0JPLGFBQWhDLEVBQStDdUYsZUFBZXJOLElBQWYsQ0FBb0IsSUFBcEIsQ0FBL0M7QUFDQXlPLDJCQUFXNWIsRUFBWCxDQUFjMFUsNEJBQWtCUyxnQkFBaEMsRUFBa0RnSCxrQkFBa0JoUCxJQUFsQixDQUF1QixJQUF2QixDQUFsRDtBQUNBeU8sMkJBQVc1YixFQUFYLENBQWMwVSw0QkFBa0JXLG1CQUFoQyxFQUFxRGdELG9CQUFvQmxMLElBQXBCLENBQXlCLElBQXpCLENBQXJEO0FBQ0F5TywyQkFBVzViLEVBQVgsQ0FBYzBVLDRCQUFrQmEsVUFBaEMsRUFBNEM4RSxZQUFZbE4sSUFBWixDQUFpQixJQUFqQixDQUE1QztBQUNBeU8sMkJBQVc1YixFQUFYLENBQWMwVSw0QkFBa0JlLGVBQWhDLEVBQWlEMkcsaUJBQWlCalAsSUFBakIsQ0FBc0IsSUFBdEIsQ0FBakQ7QUFDQXlPLDJCQUFXNWIsRUFBWCxDQUFjMFUsNEJBQWtCaUIsbUJBQWhDLEVBQXFEMEcscUJBQXFCbFAsSUFBckIsQ0FBMEIsSUFBMUIsQ0FBckQ7QUFDQTtBQUNKLGlCQUFLLFNBQUw7QUFDSSxvQkFBSXlPLFVBQUosRUFBZ0I7QUFDWkEsK0JBQVcxVSxPQUFYO0FBQ0EwVSxpQ0FBYSxJQUFiO0FBQ0g7QUFDRC9sQixxQkFBS3dCLFdBQUwsQ0FBaUIsRUFBQ21aLEtBQUssV0FBTixFQUFqQjtBQUNBO0FBQ0osaUJBQUssT0FBTDtBQUNJb0wsMkJBQVd0SyxLQUFYO0FBQ0E7QUFDSixpQkFBSyxNQUFMO0FBQ0lzSywyQkFBVy9GLElBQVg7QUFDQTtBQUNKLGlCQUFLLE1BQUw7QUFDSStGLDJCQUFXOUYsSUFBWCxDQUFnQi9kLEVBQUVoQixJQUFGLENBQU9pZCxLQUF2QjtBQUNBO0FBQ0osaUJBQUssT0FBTDtBQUNJNEgsMkJBQVc3RixLQUFYO0FBQ0E7QUFDSixpQkFBSyxRQUFMO0FBQ0k2RiwyQkFBVzVGLE1BQVg7QUFDQTtBQUNKLGlCQUFLLGdCQUFMO0FBQXVCO0FBQ25CLHdCQUFJckosU0FBUzVVLEVBQUVoQixJQUFGLENBQU9pZCxLQUFwQjtBQUNBRyw2Q0FBZW1JLFdBQWYsQ0FBMkIzUCxNQUEzQjs7QUFFQSx3QkFBSUEsT0FBTzRQLGNBQVAsS0FBMEIsSUFBOUIsRUFBb0M7QUFDaENwSSxpREFBZXFJLGNBQWYsQ0FBOEJYLGNBQTlCO0FBQ0gscUJBRkQsTUFFTztBQUNIMUgsaURBQWVzSSxpQkFBZixDQUFpQ1osY0FBakM7QUFDSDtBQUNEO0FBQ0g7QUE3Q0w7QUErQ0gsS0FoREQ7O0FBa0RBLGFBQVN2QixhQUFULENBQXVCdm1CLElBQXZCLEVBQTZCNmIsV0FBN0IsRUFBMEM7QUFDdEMsWUFBSThNLE1BQU07QUFDTmxNLGlCQUFLa0UsNEJBQWtCSyxZQURqQjtBQUVOaGUsa0JBQU07QUFDRmhELHNCQUFNQSxJQURKO0FBRUZnRCxzQkFBTTZZO0FBRko7QUFGQSxTQUFWO0FBT0EvWixhQUFLd0IsV0FBTCxDQUFpQnFsQixHQUFqQixFQUFzQixDQUFDOU0sWUFBWTdZLElBQWIsQ0FBdEIsRUFSc0MsQ0FRTTtBQUMvQzs7QUFFRCxhQUFTeWpCLGNBQVQsQ0FBd0J6bUIsSUFBeEIsRUFBOEJnZCxZQUE5QixFQUE0QztBQUN4QyxZQUFJMkwsTUFBTTtBQUNObE0saUJBQUtrRSw0QkFBa0JPLGFBRGpCO0FBRU5sZSxrQkFBTTtBQUNGaEQsc0JBQU1BLElBREo7QUFFRmdELHNCQUFNZ2E7QUFGSjtBQUZBLFNBQVY7QUFPQWxiLGFBQUt3QixXQUFMLENBQWlCcWxCLEdBQWpCLEVBQXNCLENBQUMzTCxhQUFhaGEsSUFBZCxDQUF0QixFQVJ3QyxDQVFLO0FBQ2hEOztBQUVELGFBQVNvbEIsaUJBQVQsR0FBNkI7QUFDekIsWUFBSU8sTUFBTTtBQUNObE0saUJBQUtrRSw0QkFBa0JTO0FBRGpCLFNBQVY7QUFHQXRmLGFBQUt3QixXQUFMLENBQWlCcWxCLEdBQWpCO0FBQ0g7O0FBRUQsYUFBU3JFLG1CQUFULEdBQStCO0FBQzNCLFlBQUlxRSxNQUFNO0FBQ05sTSxpQkFBS2tFLDRCQUFrQlc7QUFEakIsU0FBVjtBQUdBeGYsYUFBS3dCLFdBQUwsQ0FBaUJxbEIsR0FBakI7QUFDSDs7QUFFRCxhQUFTckMsV0FBVCxDQUFxQnBFLFNBQXJCLEVBQWdDO0FBQzVCLFlBQUl5RyxNQUFNO0FBQ05sTSxpQkFBS2tFLDRCQUFrQmEsVUFEakI7QUFFTnhlLGtCQUFNa2Y7QUFGQSxTQUFWO0FBSUFwZ0IsYUFBS3dCLFdBQUwsQ0FBaUJxbEIsR0FBakI7QUFDSDs7QUFFRCxhQUFTTixnQkFBVCxDQUEwQk8sUUFBMUIsRUFBb0M7QUFDaEMsWUFBSUQsTUFBTTtBQUNObE0saUJBQUtrRSw0QkFBa0JlLGVBRGpCO0FBRU4xZSxrQkFBTTRsQjtBQUZBLFNBQVY7QUFJQTltQixhQUFLd0IsV0FBTCxDQUFpQnFsQixHQUFqQjtBQUNIOztBQUVELGFBQVNULFNBQVQsQ0FBbUJsb0IsSUFBbkIsRUFBeUJnZixJQUF6QixFQUErQjtBQUMzQmxkLGFBQUt3QixXQUFMLENBQWlCO0FBQ2JtWixpQkFBS2tFLDRCQUFrQkMsUUFEVjtBQUViNWQsa0JBQU07QUFDRmhELHNCQUFNQSxJQURKO0FBRUZnZixzQkFBTUE7QUFGSjtBQUZPLFNBQWpCO0FBT0g7O0FBRUQsYUFBU21KLFlBQVQsQ0FBc0Jub0IsSUFBdEIsRUFBNEJnZixJQUE1QixFQUFrQztBQUM5QmxkLGFBQUt3QixXQUFMLENBQWlCO0FBQ2JtWixpQkFBS2tFLDRCQUFrQkcsV0FEVjtBQUViOWQsa0JBQU07QUFDRmhELHNCQUFNQSxJQURKO0FBRUZnZixzQkFBTUE7QUFGSjtBQUZPLFNBQWpCO0FBT0g7O0FBRUQsYUFBU3NKLG9CQUFULENBQThCdlMsWUFBOUIsRUFBNEM7QUFDeENqVSxhQUFLd0IsV0FBTCxDQUFpQjtBQUNibVosaUJBQUtrRSw0QkFBa0JpQixtQkFEVjtBQUViNWUsa0JBQU0rUztBQUZPLFNBQWpCO0FBSUg7O0FBRUQsYUFBU2dTLGdCQUFULENBQTBCL25CLElBQTFCLEVBQWdDNm9CLEdBQWhDLEVBQXFDO0FBQ2pDL21CLGFBQUt3QixXQUFMLENBQWlCO0FBQ2JtWixpQkFBSyxpQkFEUTtBQUVielosa0JBQU07QUFDRmhELHNCQUFNQSxJQURKO0FBRUZzaUIsd0JBQVF1RztBQUZOO0FBRk8sU0FBakI7QUFPSDtBQUVKLENBbkpELEMsQ0FyQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkEwTGVoSixpQjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxakJDMUxmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFJaUosS0FBTSxZQUFZO0FBQ2xCLFFBQUlDLE1BQU0sSUFBSUMsV0FBSixDQUFnQixDQUFoQixDQUFWO0FBQ0MsUUFBSUMsUUFBSixDQUFhRixHQUFiLENBQUQsQ0FBb0JHLFFBQXBCLENBQTZCLENBQTdCLEVBQWdDLEdBQWhDLEVBQXFDLElBQXJDLEVBRmtCLENBRTJCO0FBQzdDLFdBQVEsSUFBSUMsVUFBSixDQUFlSixHQUFmLENBQUQsQ0FBc0IsQ0FBdEIsTUFBNkIsR0FBcEMsQ0FIa0IsQ0FHd0I7QUFDN0MsQ0FKUSxFQUFUOztJQU1NSyxHOzs7Ozs7O3dDQUVxQkMsVyxFQUFhQyxVLEVBQVlDLFEsRUFBVTtBQUN0RCxnQkFBSXZtQixPQUFPLEVBQVg7O0FBRUEsZ0JBQUk7QUFDQSxvQkFBSTJMLE9BQU95YSxJQUFJSSxVQUFKLENBQWVILFdBQWYsRUFBNEJDLFVBQTVCLEVBQXdDQyxRQUF4QyxDQUFYO0FBQ0Esb0JBQUlyakIsUUFBUWtqQixJQUFJSSxVQUFKLENBQWVILFdBQWYsRUFBNEJDLGFBQWEzYSxLQUFLOGEsSUFBOUMsRUFBb0RGLFdBQVc1YSxLQUFLOGEsSUFBcEUsQ0FBWjs7QUFFQXptQixxQkFBSzJMLEtBQUszTCxJQUFWLElBQWtCa0QsTUFBTWxELElBQXhCO0FBQ0gsYUFMRCxDQUtFLE9BQU9nQixDQUFQLEVBQVU7QUFDUnlYLGlDQUFJelgsQ0FBSixDQUFNLEtBQU4sRUFBYUEsRUFBRXpELFFBQUYsRUFBYjtBQUNIOztBQUVELG1CQUFPeUMsSUFBUDtBQUNIOzs7b0NBRWtCcW1CLFcsRUFBYUMsVSxFQUFZQyxRLEVBQVU7QUFDbEQsZ0JBQUlBLFdBQVcsQ0FBZixFQUFrQjtBQUNkLHNCQUFNLElBQUl2TyxnQ0FBSixDQUEwQiw2Q0FBMUIsQ0FBTjtBQUNIO0FBQ0QsZ0JBQUlyTSxPQUFPeWEsSUFBSU0sV0FBSixDQUFnQkwsV0FBaEIsRUFBNkJDLFVBQTdCLEVBQXlDQyxRQUF6QyxDQUFYO0FBQ0EsZ0JBQUlyakIsUUFBUWtqQixJQUFJSSxVQUFKLENBQWVILFdBQWYsRUFBNEJDLGFBQWEzYSxLQUFLOGEsSUFBOUMsRUFBb0RGLFdBQVc1YSxLQUFLOGEsSUFBcEUsQ0FBWjtBQUNBLGdCQUFJRSxjQUFjempCLE1BQU0wakIsU0FBeEI7O0FBRUEsbUJBQU87QUFDSDVtQixzQkFBTTtBQUNGMkwsMEJBQU1BLEtBQUszTCxJQURUO0FBRUZrRCwyQkFBT0EsTUFBTWxEO0FBRlgsaUJBREg7QUFLSHltQixzQkFBTTlhLEtBQUs4YSxJQUFMLEdBQVl2akIsTUFBTXVqQixJQUxyQjtBQU1IRywyQkFBV0Q7QUFOUixhQUFQO0FBUUg7OztzQ0FFb0JOLFcsRUFBYUMsVSxFQUFZQyxRLEVBQVU7QUFDcEQsbUJBQU9ILElBQUlTLFdBQUosQ0FBZ0JSLFdBQWhCLEVBQTZCQyxVQUE3QixFQUF5Q0MsUUFBekMsQ0FBUDtBQUNIOzs7b0NBRWtCRixXLEVBQWFDLFUsRUFBWUMsUSxFQUFVO0FBQ2xELGdCQUFJQSxXQUFXLENBQWYsRUFBa0I7QUFDZCxzQkFBTSxJQUFJdk8sZ0NBQUosQ0FBMEIsbUNBQTFCLENBQU47QUFDSDtBQUNELGdCQUFJcUIsSUFBSSxJQUFJNE0sUUFBSixDQUFhSSxXQUFiLEVBQTBCQyxVQUExQixFQUFzQ0MsUUFBdEMsQ0FBUjtBQUNBLGdCQUFJcGlCLFNBQVNrVixFQUFFeU4sU0FBRixDQUFZLENBQVosRUFBZSxDQUFDaEIsRUFBaEIsQ0FBYjs7QUFFQSxnQkFBSUQsWUFBSjtBQUNBLGdCQUFJMWhCLFNBQVMsQ0FBYixFQUFnQjtBQUNaMGhCLHNCQUFNLHdCQUFXLElBQUlrQixVQUFKLENBQWVWLFdBQWYsRUFBNEJDLGFBQWEsQ0FBekMsRUFBNENuaUIsTUFBNUMsQ0FBWCxDQUFOO0FBQ0gsYUFGRCxNQUVPO0FBQ0gwaEIsc0JBQU0sRUFBTjtBQUNIOztBQUVELG1CQUFPO0FBQ0g3bEIsc0JBQU02bEIsR0FESDtBQUVIWSxzQkFBTSxJQUFJdGlCO0FBRlAsYUFBUDtBQUlIOzs7d0NBRXNCa2lCLFcsRUFBYUMsVSxFQUFZQyxRLEVBQVU7QUFDdEQsZ0JBQUlBLFdBQVcsQ0FBZixFQUFrQjtBQUNkLHNCQUFNLElBQUl2TyxnQ0FBSixDQUEwQix1Q0FBMUIsQ0FBTjtBQUNIO0FBQ0QsZ0JBQUlxQixJQUFJLElBQUk0TSxRQUFKLENBQWFJLFdBQWIsRUFBMEJDLFVBQTFCLEVBQXNDQyxRQUF0QyxDQUFSO0FBQ0EsZ0JBQUlwaUIsU0FBU2tWLEVBQUUyTixTQUFGLENBQVksQ0FBWixFQUFlLENBQUNsQixFQUFoQixDQUFiOztBQUVBLGdCQUFJRCxZQUFKO0FBQ0EsZ0JBQUkxaEIsU0FBUyxDQUFiLEVBQWdCO0FBQ1owaEIsc0JBQU0sd0JBQVcsSUFBSWtCLFVBQUosQ0FBZVYsV0FBZixFQUE0QkMsYUFBYSxDQUF6QyxFQUE0Q25pQixNQUE1QyxDQUFYLENBQU47QUFDSCxhQUZELE1BRU87QUFDSDBoQixzQkFBTSxFQUFOO0FBQ0g7O0FBRUQsbUJBQU87QUFDSDdsQixzQkFBTTZsQixHQURIO0FBRUhZLHNCQUFNLElBQUl0aUI7QUFGUCxhQUFQO0FBSUg7OztrQ0FFZ0JraUIsVyxFQUFhQyxVLEVBQVlDLFEsRUFBVTtBQUNoRCxnQkFBSUEsV0FBVyxFQUFmLEVBQW1CO0FBQ2Ysc0JBQU0sSUFBSXZPLGdDQUFKLENBQTBCLG1DQUExQixDQUFOO0FBQ0g7QUFDRCxnQkFBSXFCLElBQUksSUFBSTRNLFFBQUosQ0FBYUksV0FBYixFQUEwQkMsVUFBMUIsRUFBc0NDLFFBQXRDLENBQVI7QUFDQSxnQkFBSVUsWUFBWTVOLEVBQUU2TixVQUFGLENBQWEsQ0FBYixFQUFnQixDQUFDcEIsRUFBakIsQ0FBaEI7QUFDQSxnQkFBSXFCLGtCQUFrQjlOLEVBQUUrTixRQUFGLENBQVcsQ0FBWCxFQUFjLENBQUN0QixFQUFmLENBQXRCO0FBQ0FtQix5QkFBYUUsa0JBQWtCLEVBQWxCLEdBQXVCLElBQXBDLENBUGdELENBT0w7O0FBRTNDLG1CQUFPO0FBQ0hubkIsc0JBQU0sSUFBSXFuQixJQUFKLENBQVNKLFNBQVQsQ0FESDtBQUVIUixzQkFBTSxJQUFJO0FBRlAsYUFBUDtBQUlIOzs7bUNBRWlCSixXLEVBQWFDLFUsRUFBWUMsUSxFQUFVO0FBQ2pELGdCQUFJQSxXQUFXLENBQWYsRUFBa0I7QUFDZCxzQkFBTSxJQUFJdk8sZ0NBQUosQ0FBMEIsa0NBQTFCLENBQU47QUFDSDs7QUFFRCxnQkFBSXFCLElBQUksSUFBSTRNLFFBQUosQ0FBYUksV0FBYixFQUEwQkMsVUFBMUIsRUFBc0NDLFFBQXRDLENBQVI7O0FBRUEsZ0JBQUllLFNBQVMsQ0FBYjtBQUNBLGdCQUFJdHFCLE9BQU9xYyxFQUFFa08sUUFBRixDQUFXLENBQVgsQ0FBWDtBQUNBLGdCQUFJcmtCLGNBQUo7QUFDQSxnQkFBSTBqQixZQUFZLEtBQWhCOztBQUVBLGdCQUFJO0FBQ0Esd0JBQVE1cEIsSUFBUjtBQUNJLHlCQUFLLENBQUw7QUFBUztBQUNMa0csZ0NBQVFtVyxFQUFFNk4sVUFBRixDQUFhLENBQWIsRUFBZ0IsQ0FBQ3BCLEVBQWpCLENBQVI7QUFDQXdCLGtDQUFVLENBQVY7QUFDQTtBQUNKLHlCQUFLLENBQUw7QUFBUTtBQUFHO0FBQ1AsZ0NBQUlFLElBQUluTyxFQUFFa08sUUFBRixDQUFXLENBQVgsQ0FBUjtBQUNBcmtCLG9DQUFRc2tCLElBQUksSUFBSixHQUFXLEtBQW5CO0FBQ0FGLHNDQUFVLENBQVY7QUFDQTtBQUNIO0FBQ0QseUJBQUssQ0FBTDtBQUFRO0FBQUc7QUFDUCxnQ0FBSUcsU0FBU3JCLElBQUlNLFdBQUosQ0FBZ0JMLFdBQWhCLEVBQTZCQyxhQUFhLENBQTFDLEVBQTZDQyxXQUFXLENBQXhELENBQWI7QUFDQXJqQixvQ0FBUXVrQixPQUFPem5CLElBQWY7QUFDQXNuQixzQ0FBVUcsT0FBT2hCLElBQWpCO0FBQ0E7QUFDSDtBQUNELHlCQUFLLENBQUw7QUFBUTtBQUFFO0FBQ052akIsb0NBQVEsRUFBUjtBQUNBLGdDQUFJd2tCLFdBQVcsQ0FBZixDQUZJLENBRWU7QUFDbkIsZ0NBQUksQ0FBQ3JPLEVBQUUyTixTQUFGLENBQVlULFdBQVcsQ0FBdkIsRUFBMEIsQ0FBQ1QsRUFBM0IsSUFBaUMsVUFBbEMsTUFBa0QsQ0FBdEQsRUFBeUQ7QUFDckQ0QiwyQ0FBVyxDQUFYO0FBQ0g7QUFDRCxtQ0FBT0osU0FBU2YsV0FBVyxDQUEzQixFQUE4QjtBQUFHO0FBQzdCLG9DQUFJb0IsU0FBU3ZCLElBQUlTLFdBQUosQ0FBZ0JSLFdBQWhCLEVBQTZCQyxhQUFhZ0IsTUFBMUMsRUFBa0RmLFdBQVdlLE1BQVgsR0FBb0JJLFFBQXRFLENBQWI7QUFDQSxvQ0FBSUMsT0FBT2YsU0FBWCxFQUNJO0FBQ0oxakIsc0NBQU15a0IsT0FBTzNuQixJQUFQLENBQVkyTCxJQUFsQixJQUEwQmdjLE9BQU8zbkIsSUFBUCxDQUFZa0QsS0FBdEM7QUFDQW9rQiwwQ0FBVUssT0FBT2xCLElBQWpCO0FBQ0g7QUFDRCxnQ0FBSWEsVUFBVWYsV0FBVyxDQUF6QixFQUE0QjtBQUN4QixvQ0FBSWhjLFNBQVM4TyxFQUFFMk4sU0FBRixDQUFZTSxTQUFTLENBQXJCLEVBQXdCLENBQUN4QixFQUF6QixJQUErQixVQUE1QztBQUNBLG9DQUFJdmIsV0FBVyxDQUFmLEVBQWtCO0FBQ2QrYyw4Q0FBVSxDQUFWO0FBQ0g7QUFDSjtBQUNEO0FBQ0g7QUFDRCx5QkFBSyxDQUFMO0FBQVE7QUFBRTtBQUNOcGtCLG9DQUFRLEVBQVI7QUFDQW9rQixzQ0FBVSxDQUFWLENBRkksQ0FFVTtBQUNkLGdDQUFJSSxZQUFXLENBQWYsQ0FISSxDQUdlO0FBQ25CLGdDQUFJLENBQUNyTyxFQUFFMk4sU0FBRixDQUFZVCxXQUFXLENBQXZCLEVBQTBCLENBQUNULEVBQTNCLElBQWlDLFVBQWxDLE1BQWtELENBQXRELEVBQXlEO0FBQ3JENEIsNENBQVcsQ0FBWDtBQUNIO0FBQ0QsbUNBQU9KLFNBQVNmLFdBQVcsQ0FBM0IsRUFBOEI7QUFBRztBQUM3QixvQ0FBSXFCLFNBQVN4QixJQUFJeUIsYUFBSixDQUFrQnhCLFdBQWxCLEVBQStCQyxhQUFhZ0IsTUFBNUMsRUFBb0RmLFdBQVdlLE1BQVgsR0FBb0JJLFNBQXhFLENBQWI7QUFDQSxvQ0FBSUUsT0FBT2hCLFNBQVgsRUFDSTtBQUNKMWpCLHNDQUFNMGtCLE9BQU81bkIsSUFBUCxDQUFZMkwsSUFBbEIsSUFBMEJpYyxPQUFPNW5CLElBQVAsQ0FBWWtELEtBQXRDO0FBQ0Fva0IsMENBQVVNLE9BQU9uQixJQUFqQjtBQUNIO0FBQ0QsZ0NBQUlhLFVBQVVmLFdBQVcsQ0FBekIsRUFBNEI7QUFDeEIsb0NBQUloYyxVQUFTOE8sRUFBRTJOLFNBQUYsQ0FBWU0sU0FBUyxDQUFyQixFQUF3QixDQUFDeEIsRUFBekIsSUFBK0IsVUFBNUM7QUFDQSxvQ0FBSXZiLFlBQVcsQ0FBZixFQUFrQjtBQUNkK2MsOENBQVUsQ0FBVjtBQUNIO0FBQ0o7QUFDRDtBQUNIO0FBQ0QseUJBQUssQ0FBTDtBQUFTO0FBQ0xwa0IsZ0NBQVExRSxTQUFSO0FBQ0E4b0IsaUNBQVMsQ0FBVDtBQUNBVixvQ0FBWSxJQUFaO0FBQ0E7QUFDSix5QkFBSyxFQUFMO0FBQVM7QUFBRztBQUNSO0FBQ0ExakIsb0NBQVEsRUFBUjtBQUNBLGdDQUFJNGtCLG9CQUFvQnpPLEVBQUUyTixTQUFGLENBQVksQ0FBWixFQUFlLENBQUNsQixFQUFoQixDQUF4QjtBQUNBd0Isc0NBQVUsQ0FBVjtBQUNBLGlDQUFLLElBQUk3bUIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJcW5CLGlCQUFwQixFQUF1Q3JuQixHQUF2QyxFQUE0QztBQUN4QyxvQ0FBSXNuQixNQUFNM0IsSUFBSUksVUFBSixDQUFlSCxXQUFmLEVBQTRCQyxhQUFhZ0IsTUFBekMsRUFBaURmLFdBQVdlLE1BQTVELENBQVY7QUFDQXBrQixzQ0FBTTJGLElBQU4sQ0FBV2tmLElBQUkvbkIsSUFBZjtBQUNBc25CLDBDQUFVUyxJQUFJdEIsSUFBZDtBQUNIO0FBQ0Q7QUFDSDtBQUNELHlCQUFLLEVBQUw7QUFBUztBQUFHO0FBQ1IsZ0NBQUl1QixPQUFPNUIsSUFBSTZCLFNBQUosQ0FBYzVCLFdBQWQsRUFBMkJDLGFBQWEsQ0FBeEMsRUFBMkNDLFdBQVcsQ0FBdEQsQ0FBWDtBQUNBcmpCLG9DQUFROGtCLEtBQUtob0IsSUFBYjtBQUNBc25CLHNDQUFVVSxLQUFLdkIsSUFBZjtBQUNBO0FBQ0g7QUFDRCx5QkFBSyxFQUFMO0FBQVM7QUFBRztBQUNSLGdDQUFJeUIsYUFBYTlCLElBQUlNLFdBQUosQ0FBZ0JMLFdBQWhCLEVBQTZCQyxhQUFhLENBQTFDLEVBQTZDQyxXQUFXLENBQXhELENBQWpCO0FBQ0FyakIsb0NBQVFnbEIsV0FBV2xvQixJQUFuQjtBQUNBc25CLHNDQUFVWSxXQUFXekIsSUFBckI7QUFDQTtBQUNIO0FBQ0Q7QUFDSTtBQUNBYSxpQ0FBU2YsUUFBVDtBQUNBOU4seUNBQUkwUCxDQUFKLENBQU0sS0FBTixFQUFhLGdDQUFnQ25yQixJQUE3QztBQTVGUjtBQThGSCxhQS9GRCxDQStGRSxPQUFPZ0UsQ0FBUCxFQUFVO0FBQ1J5WCxpQ0FBSXpYLENBQUosQ0FBTSxLQUFOLEVBQWFBLEVBQUV6RCxRQUFGLEVBQWI7QUFDSDs7QUFFRCxtQkFBTztBQUNIeUMsc0JBQU1rRCxLQURIO0FBRUh1akIsc0JBQU1hLE1BRkg7QUFHSFYsMkJBQVdBO0FBSFIsYUFBUDtBQUtIOzs7Ozs7a0JBSVVSLEc7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xQZjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLElBQU16QyxjQUFjO0FBQ2hCeUUsTUFBSSxJQURZO0FBRWhCQyxnQkFBYyxhQUZFO0FBR2hCekUsc0JBQW9CLG1CQUhKO0FBSWhCMEUscUJBQW1CO0FBSkgsQ0FBcEI7O2tCQU9lM0UsVzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxakJDekJmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7QUFFQTtJQUNNNEUsUztBQUVGLHVCQUFZQyxVQUFaLEVBQXdCO0FBQUE7O0FBQ3BCLGFBQUszUyxHQUFMLEdBQVcsV0FBWDs7QUFFQSxhQUFLNFMsT0FBTCxHQUFlRCxVQUFmO0FBQ0EsYUFBS0UsYUFBTCxHQUFxQixDQUFyQjtBQUNBLGFBQUtDLFlBQUwsR0FBb0JILFdBQVc1TSxVQUEvQjtBQUNBLGFBQUtnTixXQUFMLEdBQW1CSixXQUFXNU0sVUFBWCxHQUF3QixDQUEzQztBQUNBLGFBQUtpTixhQUFMLEdBQXFCLENBQXJCO0FBQ0EsYUFBS0MsdUJBQUwsR0FBK0IsQ0FBL0I7QUFDSDs7OztrQ0FFUztBQUNOLGlCQUFLTCxPQUFMLEdBQWUsSUFBZjtBQUNIOzs7MkNBRWtCO0FBQ2YsZ0JBQUlNLG9CQUFvQixLQUFLSixZQUFMLEdBQW9CLEtBQUtELGFBQWpEO0FBQ0EsZ0JBQUlLLHFCQUFxQixDQUF6QixFQUNJLE1BQU0sSUFBSS9RLGdDQUFKLENBQTBCLHNEQUExQixDQUFOOztBQUVKLGdCQUFJZ1IsYUFBYTVtQixLQUFLNm1CLEdBQUwsQ0FBUyxDQUFULEVBQVlGLGlCQUFaLENBQWpCO0FBQ0EsZ0JBQUlHLE9BQU8sSUFBSW5DLFVBQUosQ0FBZSxDQUFmLENBQVg7QUFDQW1DLGlCQUFLQyxHQUFMLENBQVMsS0FBS1YsT0FBTCxDQUFhVyxRQUFiLENBQXNCLEtBQUtWLGFBQTNCLEVBQTBDLEtBQUtBLGFBQUwsR0FBcUJNLFVBQS9ELENBQVQ7QUFDQSxpQkFBS0gsYUFBTCxHQUFxQixJQUFJNUMsUUFBSixDQUFhaUQsS0FBS0csTUFBbEIsRUFBMEJyQyxTQUExQixDQUFvQyxDQUFwQyxFQUF1QyxLQUF2QyxDQUFyQjs7QUFFQSxpQkFBSzBCLGFBQUwsSUFBc0JNLFVBQXRCO0FBQ0EsaUJBQUtGLHVCQUFMLEdBQStCRSxhQUFhLENBQTVDO0FBQ0g7OztpQ0FFUU0sSSxFQUFNO0FBQ1gsZ0JBQUlBLE9BQU8sRUFBWCxFQUNJLE1BQU0sSUFBSUMsbUNBQUosQ0FBNkIsaURBQTdCLENBQU47O0FBRUosZ0JBQUlELFFBQVEsS0FBS1IsdUJBQWpCLEVBQTBDO0FBQ3RDLG9CQUFJVSxVQUFTLEtBQUtYLGFBQUwsS0FBd0IsS0FBS1MsSUFBMUM7QUFDQSxxQkFBS1QsYUFBTCxLQUF1QlMsSUFBdkI7QUFDQSxxQkFBS1IsdUJBQUwsSUFBZ0NRLElBQWhDO0FBQ0EsdUJBQU9FLE9BQVA7QUFDSDs7QUFFRCxnQkFBSUEsU0FBUyxLQUFLVix1QkFBTCxHQUErQixLQUFLRCxhQUFwQyxHQUFvRCxDQUFqRTtBQUNBVyxxQkFBU0EsV0FBWSxLQUFLLEtBQUtWLHVCQUEvQjtBQUNBLGdCQUFJVyxpQkFBaUJILE9BQU8sS0FBS1IsdUJBQWpDOztBQUVBLGlCQUFLWSxnQkFBTDtBQUNBLGdCQUFJQyxpQkFBaUJ2bkIsS0FBSzZtQixHQUFMLENBQVNRLGNBQVQsRUFBeUIsS0FBS1gsdUJBQTlCLENBQXJCOztBQUVBLGdCQUFJYyxVQUFVLEtBQUtmLGFBQUwsS0FBd0IsS0FBS2MsY0FBM0M7QUFDQSxpQkFBS2QsYUFBTCxLQUF1QmMsY0FBdkI7QUFDQSxpQkFBS2IsdUJBQUwsSUFBZ0NhLGNBQWhDOztBQUVBSCxxQkFBVUEsVUFBVUcsY0FBWCxHQUE2QkMsT0FBdEM7QUFDQSxtQkFBT0osTUFBUDtBQUNIOzs7bUNBRVU7QUFDUCxtQkFBTyxLQUFLSyxRQUFMLENBQWMsQ0FBZCxNQUFxQixDQUE1QjtBQUNIOzs7bUNBRVU7QUFDUCxtQkFBTyxLQUFLQSxRQUFMLENBQWMsQ0FBZCxDQUFQO0FBQ0g7OzsyQ0FFa0I7QUFDZixnQkFBSUMsbUJBQUo7QUFDQSxpQkFBS0EsYUFBYSxDQUFsQixFQUFxQkEsYUFBYSxLQUFLaEIsdUJBQXZDLEVBQWdFZ0IsWUFBaEUsRUFBOEU7QUFDMUUsb0JBQUksT0FBTyxLQUFLakIsYUFBTCxHQUFzQixlQUFlaUIsVUFBNUMsQ0FBSixFQUE4RDtBQUMxRCx5QkFBS2pCLGFBQUwsS0FBdUJpQixVQUF2QjtBQUNBLHlCQUFLaEIsdUJBQUwsSUFBZ0NnQixVQUFoQztBQUNBLDJCQUFPQSxVQUFQO0FBQ0g7QUFDSjtBQUNELGlCQUFLSixnQkFBTDtBQUNBLG1CQUFPSSxhQUFhLEtBQUtDLGdCQUFMLEVBQXBCO0FBQ0g7OztrQ0FFUztBQUFHO0FBQ1QsZ0JBQUlDLGdCQUFnQixLQUFLRCxnQkFBTCxFQUFwQjtBQUNBLG1CQUFPLEtBQUtGLFFBQUwsQ0FBY0csZ0JBQWdCLENBQTlCLElBQW1DLENBQTFDO0FBQ0g7OztrQ0FFUztBQUFHO0FBQ1QsZ0JBQUk5bUIsUUFBUSxLQUFLK21CLE9BQUwsRUFBWjtBQUNBLGdCQUFJL21CLFFBQVEsSUFBWixFQUFrQjtBQUNkLHVCQUFRQSxRQUFRLENBQVQsS0FBZ0IsQ0FBdkI7QUFDSCxhQUZELE1BRU87QUFDSCx1QkFBTyxDQUFDLENBQUQsSUFBTUEsVUFBVSxDQUFoQixDQUFQO0FBQ0g7QUFDSjs7Ozs7O2tCQUlVcWxCLFM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxakJDbkhmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLFNBQVMyQixNQUFULENBQWdCMWMsR0FBaEIsRUFBcUI7QUFDbkIsU0FBVUEsUUFBUSxDQUFULEdBQWMsSUFBZixHQUNMLENBQUNBLE1BQU0sSUFBUCxLQUFnQixDQURuQjtBQUVEOztBQUVELFNBQVMyYyxNQUFULENBQWdCM2MsR0FBaEIsRUFBcUI7QUFDbkIsU0FBUyxDQUFDQSxNQUFNLFVBQVAsTUFBdUIsRUFBeEIsR0FDTCxDQUFDQSxNQUFNLFVBQVAsTUFBdUIsQ0FEbEIsR0FFTCxDQUFDQSxNQUFNLFVBQVAsS0FBc0IsQ0FGakIsR0FHTCxDQUFDQSxNQUFNLFVBQVAsS0FBc0IsRUFIekI7QUFJRDs7QUFFRCxTQUFTNGMsU0FBVCxDQUFtQm5mLEtBQW5CLEVBQTBCbUksS0FBMUIsRUFBaUM7QUFDL0IsU0FBU25JLE1BQU1tSSxLQUFOLEtBQWdCLEVBQWpCLEdBQ0xuSSxNQUFNbUksUUFBUSxDQUFkLEtBQW9CLEVBRGYsR0FFTG5JLE1BQU1tSSxRQUFRLENBQWQsS0FBb0IsQ0FGZixHQUdMbkksTUFBTW1JLFFBQVEsQ0FBZCxDQUhIO0FBSUQ7O0lBR0t5UCxVO0FBRUosc0JBQVlILFNBQVosRUFBdUI5TSxNQUF2QixFQUErQjtBQUFBOztBQUM3QixTQUFLQyxHQUFMLEdBQVcsWUFBWDs7QUFFQSxTQUFLRSxRQUFMLEdBQWdCLElBQUl6TyxnQkFBSixFQUFoQjs7QUFFQSxTQUFLd08sT0FBTCxHQUFlRixNQUFmOztBQUVBLFNBQUt5VSxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsU0FBSzVMLFlBQUwsR0FBb0IsSUFBcEI7QUFDQSxTQUFLNkwsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDQSxTQUFLQyxnQkFBTCxHQUF3QixJQUF4Qjs7QUFFQSxTQUFLQyxXQUFMLEdBQW1COUgsVUFBVTRELFVBQTdCO0FBQ0EsU0FBS21FLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCLEtBQWpCOztBQUVBLFNBQUtDLFNBQUwsR0FBaUJqSSxVQUFVa0ksYUFBM0I7QUFDQSxTQUFLQyxTQUFMLEdBQWlCbkksVUFBVW9JLGFBQTNCOztBQUVBLFNBQUtDLHNCQUFMLEdBQThCLEtBQTlCO0FBQ0EsU0FBS0Msc0JBQUwsR0FBOEIsS0FBOUI7O0FBRUEsU0FBS0MsK0JBQUwsR0FBdUMsS0FBdkM7QUFDQSxTQUFLQywrQkFBTCxHQUF1QyxLQUF2Qzs7QUFFQSxTQUFLakwsVUFBTCxHQUFrQixJQUFJNU8sbUJBQUosRUFBbEI7QUFDQSxTQUFLNE8sVUFBTCxDQUFnQjFPLFFBQWhCLEdBQTJCLEtBQUtvWixTQUFoQztBQUNBLFNBQUsxSyxVQUFMLENBQWdCek8sUUFBaEIsR0FBMkIsS0FBS3FaLFNBQWhDO0FBQ0EsU0FBS00sU0FBTCxHQUFpQixJQUFqQjtBQUNBLFNBQUtDLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxTQUFLQyxjQUFMLEdBQXNCLElBQXRCOztBQUVBLFNBQUtDLGVBQUwsR0FBdUIsQ0FBdkI7QUFDQSxTQUFLQyxjQUFMLEdBQXNCLENBQXRCLENBakM2QixDQWlDSDtBQUMxQixTQUFLQyxVQUFMLEdBQWtCLElBQWxCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixDQUFqQixDQW5DNkIsQ0FtQ1I7QUFDckIsU0FBS0Msa0JBQUwsR0FBMEIsS0FBMUI7QUFDQSxTQUFLQyxtQkFBTCxHQUEyQjtBQUN6QkMsYUFBTyxJQURrQjtBQUV6QjNaLFdBQUssTUFGb0I7QUFHekI0WixlQUFTLEtBSGdCO0FBSXpCQyxlQUFTO0FBSmdCLEtBQTNCOztBQU9BLFNBQUtDLGtCQUFMLEdBQTBCLENBQUMsSUFBRCxFQUFPLEtBQVAsRUFBYyxLQUFkLEVBQXFCLEtBQXJCLEVBQTRCLEtBQTVCLENBQTFCOztBQUVBLFNBQUtDLGtCQUFMLEdBQTBCLENBQ3hCLEtBRHdCLEVBQ2pCLEtBRGlCLEVBQ1YsS0FEVSxFQUNILEtBREcsRUFDSSxLQURKLEVBQ1csS0FEWCxFQUV4QixLQUZ3QixFQUVqQixLQUZpQixFQUVWLEtBRlUsRUFFSCxLQUZHLEVBRUksS0FGSixFQUVXLElBRlgsRUFFaUIsSUFGakIsQ0FBMUI7O0FBS0EsU0FBS0MsNEJBQUwsR0FBb0MsQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLEtBQWYsRUFBc0IsQ0FBdEIsQ0FBcEM7QUFDQSxTQUFLQyw0QkFBTCxHQUFvQyxDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsS0FBZixFQUFzQixDQUF0QixDQUFwQztBQUNBLFNBQUtDLDRCQUFMLEdBQW9DLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxJQUFmLEVBQXFCLENBQXJCLENBQXBDOztBQUVBLFNBQUtDLHdCQUFMLEdBQWdDLENBQUMsQ0FBRCxFQUFJLEVBQUosRUFBUSxFQUFSLEVBQVksRUFBWixFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixFQUFvQyxHQUFwQyxFQUF5QyxHQUF6QyxFQUE4QyxHQUE5QyxFQUFtRCxHQUFuRCxFQUF3RCxHQUF4RCxFQUE2RCxHQUE3RCxFQUFrRSxHQUFsRSxFQUF1RSxDQUFDLENBQXhFLENBQWhDO0FBQ0EsU0FBS0Msd0JBQUwsR0FBZ0MsQ0FBQyxDQUFELEVBQUksRUFBSixFQUFRLEVBQVIsRUFBWSxFQUFaLEVBQWdCLEVBQWhCLEVBQW9CLEVBQXBCLEVBQXdCLEVBQXhCLEVBQTRCLEdBQTVCLEVBQWlDLEdBQWpDLEVBQXNDLEdBQXRDLEVBQTJDLEdBQTNDLEVBQWdELEdBQWhELEVBQXFELEdBQXJELEVBQTBELEdBQTFELEVBQStELEdBQS9ELEVBQW9FLENBQUMsQ0FBckUsQ0FBaEM7QUFDQSxTQUFLQyx3QkFBTCxHQUFnQyxDQUFDLENBQUQsRUFBSSxFQUFKLEVBQVEsRUFBUixFQUFZLEVBQVosRUFBZ0IsRUFBaEIsRUFBb0IsRUFBcEIsRUFBd0IsRUFBeEIsRUFBNEIsRUFBNUIsRUFBZ0MsR0FBaEMsRUFBcUMsR0FBckMsRUFBMEMsR0FBMUMsRUFBK0MsR0FBL0MsRUFBb0QsR0FBcEQsRUFBeUQsR0FBekQsRUFBOEQsR0FBOUQsRUFBbUUsQ0FBQyxDQUFwRSxDQUFoQzs7QUFFQSxTQUFLQyxXQUFMLEdBQW1CLEVBQUN2dkIsTUFBTSxPQUFQLEVBQWdCK0gsSUFBSSxDQUFwQixFQUF1QnluQixnQkFBZ0IsQ0FBdkMsRUFBMENDLFNBQVMsRUFBbkQsRUFBdUR0b0IsUUFBUSxDQUEvRCxFQUFuQjtBQUNBLFNBQUt1b0IsV0FBTCxHQUFtQixFQUFDMXZCLE1BQU0sT0FBUCxFQUFnQitILElBQUksQ0FBcEIsRUFBdUJ5bkIsZ0JBQWdCLENBQXZDLEVBQTBDQyxTQUFTLEVBQW5ELEVBQXVEdG9CLFFBQVEsQ0FBL0QsRUFBbkI7O0FBRUEsU0FBS3dvQixhQUFMLEdBQXNCLFlBQVk7QUFDaEMsVUFBSTVHLE1BQU0sSUFBSUMsV0FBSixDQUFnQixDQUFoQixDQUFWO0FBQ0MsVUFBSUMsUUFBSixDQUFhRixHQUFiLENBQUQsQ0FBb0JHLFFBQXBCLENBQTZCLENBQTdCLEVBQWdDLEdBQWhDLEVBQXFDLElBQXJDLEVBRmdDLENBRWE7QUFDN0MsYUFBUSxJQUFJQyxVQUFKLENBQWVKLEdBQWYsQ0FBRCxDQUFzQixDQUF0QixNQUE2QixHQUFwQyxDQUhnQyxDQUdVO0FBQzNDLEtBSm9CLEVBQXJCO0FBS0Q7Ozs7OEJBRVM7QUFDUixXQUFLOUYsVUFBTCxHQUFrQixJQUFsQjtBQUNBLFdBQUtrTCxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsV0FBS0MsY0FBTCxHQUFzQixJQUF0QjtBQUNBLFdBQUtDLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxXQUFLa0IsV0FBTCxHQUFtQixJQUFuQjtBQUNBLFdBQUtHLFdBQUwsR0FBbUIsSUFBbkI7O0FBRUEsV0FBS3JDLFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSxXQUFLNUwsWUFBTCxHQUFvQixJQUFwQjtBQUNBLFdBQUs2TCxnQkFBTCxHQUF3QixJQUF4QjtBQUNBLFdBQUtDLGdCQUFMLEdBQXdCLElBQXhCOztBQUVBLFdBQUt4VSxRQUFMLENBQWN0TSxrQkFBZDtBQUNBLFdBQUtzTSxRQUFMLEdBQWdCLElBQWhCO0FBQ0Q7OzttQ0E0QmM2VyxNLEVBQVE7QUFDckJBLGFBQU9uTCxhQUFQLEdBQXVCLEtBQUttQixXQUFMLENBQWlCeE0sSUFBakIsQ0FBc0IsSUFBdEIsQ0FBdkI7QUFDQSxhQUFPLElBQVA7QUFDRDs7QUFFRDs7OztxQ0FzRWlCO0FBQ2YsV0FBSzZKLFVBQUwsR0FBa0IsSUFBSTVPLG1CQUFKLEVBQWxCO0FBQ0Q7OzttREFFOEI7QUFDN0IsVUFBSSxLQUFLc1osU0FBTCxJQUFrQixLQUFLRSxTQUEzQixFQUFzQztBQUFHO0FBQ3ZDLGVBQU8sS0FBS0ksK0JBQUwsSUFBd0MsS0FBS0MsK0JBQXBEO0FBQ0Q7QUFDRCxVQUFJLEtBQUtQLFNBQUwsSUFBa0IsQ0FBQyxLQUFLRSxTQUE1QixFQUF1QztBQUFHO0FBQ3hDLGVBQU8sS0FBS0ksK0JBQVo7QUFDRDtBQUNELFVBQUksQ0FBQyxLQUFLTixTQUFOLElBQW1CLEtBQUtFLFNBQTVCLEVBQXVDO0FBQUc7QUFDeEMsZUFBTyxLQUFLSywrQkFBWjtBQUNEO0FBQ0QsYUFBTyxLQUFQO0FBQ0Q7O0FBRUQ7Ozs7Z0NBQ1kyQixLLEVBQU9wSyxTLEVBQVc7QUFDNUIsVUFBSSxDQUFDLEtBQUs0SCxRQUFOLElBQWtCLENBQUMsS0FBSzVMLFlBQXhCLElBQXdDLENBQUMsS0FBSzZMLGdCQUE5QyxJQUFrRSxDQUFDLEtBQUtDLGdCQUE1RSxFQUE4RjtBQUM1RixjQUFNLElBQUl2UyxnQ0FBSixDQUEwQiwyRkFBMUIsQ0FBTjtBQUNEOztBQUVELFVBQUlzUCxTQUFTLENBQWI7QUFDQSxVQUFJeEIsS0FBSyxLQUFLNkcsYUFBZDs7QUFFQSxVQUFJbEssY0FBYyxDQUFsQixFQUFxQjtBQUFHO0FBQ3RCLFlBQUlvSyxNQUFNalIsVUFBTixHQUFtQixFQUF2QixFQUEyQjtBQUN6QixjQUFJOEcsWUFBWUcsV0FBV0MsS0FBWCxDQUFpQitKLEtBQWpCLENBQWhCO0FBQ0F2RixtQkFBUzVFLFVBQVU0RCxVQUFuQjtBQUNELFNBSEQsTUFHTztBQUNMLGlCQUFPLENBQVA7QUFDRDtBQUNGOztBQUVELFVBQUksS0FBS21FLFdBQVQsRUFBc0I7QUFBRztBQUN2QixhQUFLQSxXQUFMLEdBQW1CLEtBQW5CO0FBQ0EsWUFBSWhJLFlBQVk2RSxNQUFaLEtBQXVCLEtBQUtrRCxXQUFoQyxFQUE2QztBQUMzQy9SLDJCQUFJMFAsQ0FBSixDQUFNLEtBQUt0UyxHQUFYLEVBQWdCLGlEQUFoQjtBQUNEOztBQUVELFlBQUl3RCxJQUFJLElBQUk0TSxRQUFKLENBQWE0RyxLQUFiLEVBQW9CdkYsTUFBcEIsQ0FBUjtBQUNBLFlBQUl3RixlQUFlelQsRUFBRTJOLFNBQUYsQ0FBWSxDQUFaLEVBQWUsQ0FBQ2xCLEVBQWhCLENBQW5CO0FBQ0EsWUFBSWdILGlCQUFpQixDQUFyQixFQUF3QjtBQUN0QnJVLDJCQUFJMFAsQ0FBSixDQUFNLEtBQUt0UyxHQUFYLEVBQWdCLHdCQUFoQjtBQUNEO0FBQ0R5UixrQkFBVSxDQUFWO0FBQ0Q7O0FBRUQsYUFBT0EsU0FBU3VGLE1BQU1qUixVQUF0QixFQUFrQztBQUNoQyxhQUFLOE8sU0FBTCxHQUFpQixJQUFqQjs7QUFFQSxZQUFJclIsS0FBSSxJQUFJNE0sUUFBSixDQUFhNEcsS0FBYixFQUFvQnZGLE1BQXBCLENBQVI7O0FBRUEsWUFBSUEsU0FBUyxFQUFULEdBQWMsQ0FBZCxHQUFrQnVGLE1BQU1qUixVQUE1QixFQUF3QztBQUN0QztBQUNBO0FBQ0Q7O0FBRUQsWUFBSW1SLFVBQVUxVCxHQUFFa08sUUFBRixDQUFXLENBQVgsQ0FBZDtBQUNBLFlBQUloQixXQUFXbE4sR0FBRTJOLFNBQUYsQ0FBWSxDQUFaLEVBQWUsQ0FBQ2xCLEVBQWhCLElBQXNCLFVBQXJDOztBQUVBLFlBQUl3QixTQUFTLEVBQVQsR0FBY2YsUUFBZCxHQUF5QixDQUF6QixHQUE2QnNHLE1BQU1qUixVQUF2QyxFQUFtRDtBQUNqRDtBQUNBO0FBQ0Q7O0FBRUQsWUFBSW1SLFlBQVksQ0FBWixJQUFpQkEsWUFBWSxDQUE3QixJQUFrQ0EsWUFBWSxFQUFsRCxFQUFzRDtBQUNwRHRVLDJCQUFJMFAsQ0FBSixDQUFNLEtBQUt0UyxHQUFYLDRCQUF3Q2tYLE9BQXhDO0FBQ0E7QUFDQXpGLG9CQUFVLEtBQUtmLFFBQUwsR0FBZ0IsQ0FBMUI7QUFDQTtBQUNEOztBQUVELFlBQUl5RyxNQUFNM1QsR0FBRWtPLFFBQUYsQ0FBVyxDQUFYLENBQVY7QUFDQSxZQUFJMEYsTUFBTTVULEdBQUVrTyxRQUFGLENBQVcsQ0FBWCxDQUFWO0FBQ0EsWUFBSTJGLE1BQU03VCxHQUFFa08sUUFBRixDQUFXLENBQVgsQ0FBVjtBQUNBLFlBQUk0RixNQUFNOVQsR0FBRWtPLFFBQUYsQ0FBVyxDQUFYLENBQVY7O0FBRUEsWUFBSU4sWUFBWWlHLE1BQU9ELE9BQU8sQ0FBZCxHQUFvQkQsT0FBTyxFQUEzQixHQUFrQ0csT0FBTyxFQUF6RDs7QUFFQSxZQUFJQyxXQUFXL1QsR0FBRTJOLFNBQUYsQ0FBWSxDQUFaLEVBQWUsQ0FBQ2xCLEVBQWhCLElBQXNCLFVBQXJDO0FBQ0EsWUFBSXNILGFBQWEsQ0FBakIsRUFBb0I7QUFDbEIzVSwyQkFBSTBQLENBQUosQ0FBTSxLQUFLdFMsR0FBWCxFQUFnQixtQ0FBaEI7QUFDRDs7QUFFRCxZQUFJeVEsYUFBYWdCLFNBQVMsRUFBMUI7O0FBRUEsZ0JBQVF5RixPQUFSO0FBQ0UsZUFBSyxDQUFMO0FBQVM7QUFDUCxpQkFBS00sZUFBTCxDQUFxQlIsS0FBckIsRUFBNEJ2RyxVQUE1QixFQUF3Q0MsUUFBeEMsRUFBa0RVLFNBQWxEO0FBQ0E7QUFDRixlQUFLLENBQUw7QUFBUztBQUNQLGlCQUFLcUcsZUFBTCxDQUFxQlQsS0FBckIsRUFBNEJ2RyxVQUE1QixFQUF3Q0MsUUFBeEMsRUFBa0RVLFNBQWxELEVBQTZEeEUsWUFBWTZFLE1BQXpFO0FBQ0E7QUFDRixlQUFLLEVBQUw7QUFBVTtBQUNSLGlCQUFLaUcsZ0JBQUwsQ0FBc0JWLEtBQXRCLEVBQTZCdkcsVUFBN0IsRUFBeUNDLFFBQXpDO0FBQ0E7QUFUSjs7QUFZQSxZQUFJaUgsY0FBY25VLEdBQUUyTixTQUFGLENBQVksS0FBS1QsUUFBakIsRUFBMkIsQ0FBQ1QsRUFBNUIsQ0FBbEI7QUFDQSxZQUFJMEgsZ0JBQWdCLEtBQUtqSCxRQUF6QixFQUFtQztBQUNqQzlOLDJCQUFJMFAsQ0FBSixDQUFNLEtBQUt0UyxHQUFYLDJCQUF1QzJYLFdBQXZDO0FBQ0Q7O0FBRURsRyxrQkFBVSxLQUFLZixRQUFMLEdBQWdCLENBQTFCLENBeERnQyxDQXdERjtBQUMvQjs7QUFFRDtBQUNBLFVBQUksS0FBS2tILDRCQUFMLEVBQUosRUFBeUM7QUFDdkMsWUFBSSxLQUFLL0MsU0FBTCxLQUFtQixLQUFLZ0MsV0FBTCxDQUFpQnZvQixNQUFqQixJQUEyQixLQUFLb29CLFdBQUwsQ0FBaUJwb0IsTUFBL0QsQ0FBSixFQUE0RTtBQUMxRSxlQUFLb21CLGdCQUFMLENBQXNCLEtBQUttQyxXQUEzQixFQUF3QyxLQUFLSCxXQUE3QztBQUNEO0FBQ0Y7O0FBRUQsYUFBT2pGLE1BQVAsQ0FqRzRCLENBaUdaO0FBQ2pCOzs7cUNBRWdCakIsVyxFQUFhQyxVLEVBQVlDLFEsRUFBVTtBQUNsRCxVQUFJbUgsYUFBYXRILG9CQUFJdUgsZUFBSixDQUFvQnRILFdBQXBCLEVBQWlDQyxVQUFqQyxFQUE2Q0MsUUFBN0MsQ0FBakI7O0FBRUEsVUFBSW1ILFdBQVc1UixjQUFYLENBQTBCLFlBQTFCLENBQUosRUFBNkM7QUFDM0MsWUFBSTRSLFdBQVdqUSxVQUFYLElBQXlCLElBQXpCLElBQWlDLFFBQU9pUSxXQUFXalEsVUFBbEIsTUFBaUMsUUFBdEUsRUFBZ0Y7QUFDOUVoRiwyQkFBSTBQLENBQUosQ0FBTSxLQUFLdFMsR0FBWCxFQUFnQiwrQkFBaEI7QUFDQTtBQUNEO0FBQ0QsWUFBSSxLQUFLc1YsU0FBVCxFQUFvQjtBQUNsQjFTLDJCQUFJMFAsQ0FBSixDQUFNLEtBQUt0UyxHQUFYLEVBQWdCLCtCQUFoQjtBQUNEO0FBQ0QsYUFBS3NWLFNBQUwsR0FBaUJ1QyxVQUFqQjtBQUNBLFlBQUlqUSxhQUFhLEtBQUswTixTQUFMLENBQWUxTixVQUFoQztBQUNBLGFBQUsxSCxRQUFMLENBQWNqTyxJQUFkLENBQW1CLGtCQUFuQixFQUF1QzJWLFVBQXZDOztBQUVBLFlBQUksT0FBT0EsV0FBV2xNLFFBQWxCLEtBQStCLFNBQW5DLEVBQThDO0FBQUc7QUFDL0MsY0FBSSxLQUFLd1osc0JBQUwsS0FBZ0MsS0FBcEMsRUFBMkM7QUFDekMsaUJBQUtKLFNBQUwsR0FBaUJsTixXQUFXbE0sUUFBNUI7QUFDQSxpQkFBSzBPLFVBQUwsQ0FBZ0IxTyxRQUFoQixHQUEyQixLQUFLb1osU0FBaEM7QUFDRDtBQUNGO0FBQ0QsWUFBSSxPQUFPbE4sV0FBV2pNLFFBQWxCLEtBQStCLFNBQW5DLEVBQThDO0FBQUc7QUFDL0MsY0FBSSxLQUFLd1osc0JBQUwsS0FBZ0MsS0FBcEMsRUFBMkM7QUFDekMsaUJBQUtILFNBQUwsR0FBaUJwTixXQUFXak0sUUFBNUI7QUFDQSxpQkFBS3lPLFVBQUwsQ0FBZ0J6TyxRQUFoQixHQUEyQixLQUFLcVosU0FBaEM7QUFDRDtBQUNGO0FBQ0QsWUFBSSxPQUFPcE4sV0FBV21RLGFBQWxCLEtBQW9DLFFBQXhDLEVBQWtEO0FBQUc7QUFDbkQsZUFBSzNOLFVBQUwsQ0FBZ0J0TyxhQUFoQixHQUFnQzhMLFdBQVdtUSxhQUEzQztBQUNEO0FBQ0QsWUFBSSxPQUFPblEsV0FBV29RLGFBQWxCLEtBQW9DLFFBQXhDLEVBQWtEO0FBQUc7QUFDbkQsZUFBSzVOLFVBQUwsQ0FBZ0JyTyxhQUFoQixHQUFnQzZMLFdBQVdvUSxhQUEzQztBQUNEO0FBQ0QsWUFBSSxPQUFPcFEsV0FBVzFMLEtBQWxCLEtBQTRCLFFBQWhDLEVBQTBDO0FBQUc7QUFDM0MsZUFBS2tPLFVBQUwsQ0FBZ0JsTyxLQUFoQixHQUF3QjBMLFdBQVcxTCxLQUFuQztBQUNEO0FBQ0QsWUFBSSxPQUFPMEwsV0FBV3pMLE1BQWxCLEtBQTZCLFFBQWpDLEVBQTJDO0FBQUc7QUFDNUMsZUFBS2lPLFVBQUwsQ0FBZ0JqTyxNQUFoQixHQUF5QnlMLFdBQVd6TCxNQUFwQztBQUNEO0FBQ0QsWUFBSSxPQUFPeUwsV0FBV25NLFFBQWxCLEtBQStCLFFBQW5DLEVBQTZDO0FBQUc7QUFDOUMsY0FBSSxDQUFDLEtBQUtvYSxrQkFBVixFQUE4QjtBQUM1QixnQkFBSXBhLFdBQVdsUCxLQUFLMkssS0FBTCxDQUFXMFEsV0FBV25NLFFBQVgsR0FBc0IsS0FBS2thLFVBQXRDLENBQWY7QUFDQSxpQkFBS0MsU0FBTCxHQUFpQm5hLFFBQWpCO0FBQ0EsaUJBQUsyTyxVQUFMLENBQWdCM08sUUFBaEIsR0FBMkJBLFFBQTNCO0FBQ0Q7QUFDRixTQU5ELE1BTU87QUFDTCxlQUFLMk8sVUFBTCxDQUFnQjNPLFFBQWhCLEdBQTJCLENBQTNCO0FBQ0Q7QUFDRCxZQUFJLE9BQU9tTSxXQUFXcVEsU0FBbEIsS0FBZ0MsUUFBcEMsRUFBOEM7QUFBRztBQUMvQyxjQUFJakMsVUFBVXpwQixLQUFLMkssS0FBTCxDQUFXMFEsV0FBV3FRLFNBQVgsR0FBdUIsSUFBbEMsQ0FBZDtBQUNBLGNBQUlqQyxVQUFVLENBQWQsRUFBaUI7QUFDZixnQkFBSTVaLE1BQU00WixVQUFVLElBQXBCO0FBQ0EsaUJBQUtGLG1CQUFMLENBQXlCQyxLQUF6QixHQUFpQyxJQUFqQztBQUNBLGlCQUFLRCxtQkFBTCxDQUF5QjFaLEdBQXpCLEdBQStCQSxHQUEvQjtBQUNBLGlCQUFLMFosbUJBQUwsQ0FBeUJFLE9BQXpCLEdBQW1DQSxPQUFuQztBQUNBLGlCQUFLRixtQkFBTCxDQUF5QkcsT0FBekIsR0FBbUMsSUFBbkM7QUFDQSxpQkFBSzdMLFVBQUwsQ0FBZ0JoTyxHQUFoQixHQUFzQkEsR0FBdEI7QUFDRDtBQUNGO0FBQ0QsWUFBSSxRQUFPd0wsV0FBV3NRLFNBQWxCLE1BQWdDLFFBQXBDLEVBQThDO0FBQUc7QUFDL0MsZUFBSzlOLFVBQUwsQ0FBZ0J0TixpQkFBaEIsR0FBb0MsSUFBcEM7QUFDQSxjQUFJb2IsWUFBWXRRLFdBQVdzUSxTQUEzQjtBQUNBLGVBQUs5TixVQUFMLENBQWdCck4sY0FBaEIsR0FBaUMsS0FBS29iLG9CQUFMLENBQTBCRCxTQUExQixDQUFqQztBQUNBdFEscUJBQVdzUSxTQUFYLEdBQXVCLElBQXZCLENBSjRDLENBSWQ7QUFDL0IsU0FMRCxNQUtPO0FBQ0wsZUFBSzlOLFVBQUwsQ0FBZ0J0TixpQkFBaEIsR0FBb0MsS0FBcEM7QUFDRDtBQUNELGFBQUsrWCxTQUFMLEdBQWlCLEtBQWpCO0FBQ0EsYUFBS3pLLFVBQUwsQ0FBZ0J6TixRQUFoQixHQUEyQmlMLFVBQTNCO0FBQ0FoRix5QkFBSVksQ0FBSixDQUFNLEtBQUt4RCxHQUFYLEVBQWdCLG1CQUFoQjtBQUNBLFlBQUksS0FBS29LLFVBQUwsQ0FBZ0JnTyxVQUFoQixFQUFKLEVBQWtDO0FBQ2hDLGVBQUt4UCxZQUFMLENBQWtCLEtBQUt3QixVQUF2QjtBQUNEO0FBQ0Y7QUFDRjs7O3lDQUVvQjhOLFMsRUFBVztBQUM5QixVQUFJNWEsUUFBUSxFQUFaO0FBQ0EsVUFBSUcsZ0JBQWdCLEVBQXBCOztBQUVBO0FBQ0EsV0FBSyxJQUFJN1MsSUFBSSxDQUFiLEVBQWdCQSxJQUFJc3RCLFVBQVU1YSxLQUFWLENBQWdCaFAsTUFBcEMsRUFBNEMxRCxHQUE1QyxFQUFpRDtBQUMvQyxZQUFJeXRCLE9BQU8sS0FBSzNDLGNBQUwsR0FBc0JucEIsS0FBSzJLLEtBQUwsQ0FBV2doQixVQUFVNWEsS0FBVixDQUFnQjFTLENBQWhCLElBQXFCLElBQWhDLENBQWpDO0FBQ0EwUyxjQUFNdEssSUFBTixDQUFXcWxCLElBQVg7QUFDQTVhLHNCQUFjekssSUFBZCxDQUFtQmtsQixVQUFVemEsYUFBVixDQUF3QjdTLENBQXhCLENBQW5CO0FBQ0Q7O0FBRUQsYUFBTztBQUNMMFMsZUFBT0EsS0FERjtBQUVMRyx1QkFBZUE7QUFGVixPQUFQO0FBSUQ7OztvQ0FFZStTLFcsRUFBYUMsVSxFQUFZQyxRLEVBQVU0SCxZLEVBQWM7QUFDL0QsVUFBSTVILFlBQVksQ0FBaEIsRUFBbUI7QUFDakI5Tix5QkFBSTBQLENBQUosQ0FBTSxLQUFLdFMsR0FBWCxFQUFnQix1REFBaEI7QUFDQTtBQUNEOztBQUVELFVBQUksS0FBS2tWLHNCQUFMLEtBQWdDLElBQWhDLElBQXdDLEtBQUtKLFNBQUwsS0FBbUIsS0FBL0QsRUFBc0U7QUFDcEU7QUFDQTtBQUNBO0FBQ0Q7O0FBRUQsVUFBSTdFLEtBQUssS0FBSzZHLGFBQWQ7QUFDQSxVQUFJdFQsSUFBSSxJQUFJNE0sUUFBSixDQUFhSSxXQUFiLEVBQTBCQyxVQUExQixFQUFzQ0MsUUFBdEMsQ0FBUjs7QUFFQSxVQUFJNkgsWUFBWS9VLEVBQUVrTyxRQUFGLENBQVcsQ0FBWCxDQUFoQjs7QUFFQSxVQUFJOEcsY0FBY0QsY0FBYyxDQUFoQztBQUNBLFVBQUlDLGdCQUFnQixDQUFoQixJQUFxQkEsZ0JBQWdCLEVBQXpDLEVBQTZDO0FBQUc7QUFDOUMsYUFBS2hFLFFBQUwsQ0FBYzFHLHNCQUFZMkUsaUJBQTFCLEVBQTZDLHVDQUF1QytGLFdBQXBGO0FBQ0E7QUFDRDs7QUFFRCxVQUFJQyxZQUFZLENBQWhCO0FBQ0EsVUFBSUMsaUJBQWlCLENBQUNILFlBQVksRUFBYixNQUFxQixDQUExQztBQUNBLFVBQUlHLGtCQUFrQixDQUFsQixJQUF1QkEsa0JBQWtCLENBQTdDLEVBQWdEO0FBQzlDRCxvQkFBWSxLQUFLdkMsa0JBQUwsQ0FBd0J3QyxjQUF4QixDQUFaO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsYUFBS2xFLFFBQUwsQ0FBYzFHLHNCQUFZMEUsWUFBMUIsRUFBd0MseUNBQXlDa0csY0FBakY7QUFDQTtBQUNEOztBQUVELFVBQUlDLFlBQVksQ0FBQ0osWUFBWSxDQUFiLE1BQW9CLENBQXBDLENBaEMrRCxDQWdDdkI7QUFDeEMsVUFBSUssWUFBYUwsWUFBWSxDQUE3Qjs7QUFHQSxVQUFJTSxPQUFPLEtBQUt0RCxjQUFoQjtBQUNBLFVBQUl1RCxRQUFRLEtBQUtqQyxXQUFqQjs7QUFFQSxVQUFJLENBQUNnQyxJQUFMLEVBQVc7QUFDVCxZQUFJLEtBQUsvRCxTQUFMLEtBQW1CLEtBQW5CLElBQTRCLEtBQUtJLHNCQUFMLEtBQWdDLEtBQWhFLEVBQXVFO0FBQ3JFLGVBQUtKLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxlQUFLMUssVUFBTCxDQUFnQjFPLFFBQWhCLEdBQTJCLElBQTNCO0FBQ0Q7O0FBRUQ7QUFDQW1kLGVBQU8sS0FBS3RELGNBQUwsR0FBc0IsRUFBN0I7QUFDQXNELGFBQUsxeEIsSUFBTCxHQUFZLE9BQVo7QUFDQTB4QixhQUFLM3BCLEVBQUwsR0FBVTRwQixNQUFNNXBCLEVBQWhCO0FBQ0EycEIsYUFBS0UsU0FBTCxHQUFpQixLQUFLcEQsVUFBdEI7QUFDQWtELGFBQUtwZCxRQUFMLEdBQWdCLEtBQUttYSxTQUFyQjtBQUNBaUQsYUFBSzdjLGVBQUwsR0FBdUJ5YyxTQUF2QjtBQUNBSSxhQUFLRyxZQUFMLEdBQXFCSixjQUFjLENBQWQsR0FBa0IsQ0FBbEIsR0FBc0IsQ0FBM0M7QUFDRDs7QUFFRCxVQUFJSixnQkFBZ0IsRUFBcEIsRUFBd0I7QUFBRztBQUN6QixZQUFJUyxVQUFVLEtBQUtDLGtCQUFMLENBQXdCMUksV0FBeEIsRUFBcUNDLGFBQWEsQ0FBbEQsRUFBcURDLFdBQVcsQ0FBaEUsQ0FBZDtBQUNBLFlBQUl1SSxXQUFXdHdCLFNBQWYsRUFBMEI7QUFDeEI7QUFDRDs7QUFFRCxZQUFJc3dCLFFBQVFFLFVBQVIsS0FBdUIsQ0FBM0IsRUFBOEI7QUFBRztBQUMvQixjQUFJTixLQUFLOVksTUFBVCxFQUFpQjtBQUNmNkMsNkJBQUkwUCxDQUFKLENBQU0sS0FBS3RTLEdBQVgsRUFBZ0Isb0NBQWhCO0FBQ0Q7QUFDRCxjQUFJb1osT0FBT0gsUUFBUTl1QixJQUFuQjtBQUNBMHVCLGVBQUs3YyxlQUFMLEdBQXVCb2QsS0FBS0MsWUFBNUI7QUFDQVIsZUFBS0csWUFBTCxHQUFvQkksS0FBS0osWUFBekI7QUFDQUgsZUFBSzFWLEtBQUwsR0FBYWlXLEtBQUtqVyxLQUFsQjtBQUNBMFYsZUFBS1MsYUFBTCxHQUFxQkYsS0FBS0UsYUFBMUI7QUFDQVQsZUFBSzlZLE1BQUwsR0FBY3FaLEtBQUtyWixNQUFuQjtBQUNBO0FBQ0E4WSxlQUFLVSxpQkFBTCxHQUF5QixPQUFPVixLQUFLN2MsZUFBWixHQUE4QjZjLEtBQUtFLFNBQTVEO0FBQ0FuVywyQkFBSVksQ0FBSixDQUFNLEtBQUt4RCxHQUFYLEVBQWdCLDRCQUFoQjs7QUFFQSxjQUFJLEtBQUs0WCw0QkFBTCxFQUFKLEVBQXlDO0FBQ3ZDO0FBQ0EsZ0JBQUksS0FBSy9DLFNBQUwsS0FBbUIsS0FBS2dDLFdBQUwsQ0FBaUJ2b0IsTUFBakIsSUFBMkIsS0FBS29vQixXQUFMLENBQWlCcG9CLE1BQS9ELENBQUosRUFBNEU7QUFDMUUsbUJBQUtvbUIsZ0JBQUwsQ0FBc0IsS0FBS21DLFdBQTNCLEVBQXdDLEtBQUtILFdBQTdDO0FBQ0Q7QUFDRixXQUxELE1BS087QUFDTCxpQkFBS3RCLCtCQUFMLEdBQXVDLElBQXZDO0FBQ0Q7QUFDRDtBQUNBLGVBQUtQLFNBQUwsR0FBaUIsS0FBakI7QUFDQSxlQUFLSixnQkFBTCxDQUFzQixPQUF0QixFQUErQm9FLElBQS9COztBQUVBLGNBQUlXLEtBQUssS0FBS3BQLFVBQWQ7QUFDQW9QLGFBQUc1ZCxVQUFILEdBQWdCaWQsS0FBS1MsYUFBckI7QUFDQUUsYUFBR3hkLGVBQUgsR0FBcUI2YyxLQUFLN2MsZUFBMUI7QUFDQXdkLGFBQUd2ZCxpQkFBSCxHQUF1QjRjLEtBQUtHLFlBQTVCO0FBQ0EsY0FBSVEsR0FBRzdkLFFBQVAsRUFBaUI7QUFDZixnQkFBSTZkLEdBQUczZCxVQUFILElBQWlCLElBQXJCLEVBQTJCO0FBQ3pCMmQsaUJBQUdqZixRQUFILEdBQWMsMEJBQTBCaWYsR0FBRzNkLFVBQTdCLEdBQTBDLEdBQTFDLEdBQWdEMmQsR0FBRzVkLFVBQW5ELEdBQWdFLEdBQTlFO0FBQ0Q7QUFDRixXQUpELE1BSU87QUFDTDRkLGVBQUdqZixRQUFILEdBQWMsMEJBQTBCaWYsR0FBRzVkLFVBQTdCLEdBQTBDLEdBQXhEO0FBQ0Q7QUFDRCxjQUFJNGQsR0FBR3BCLFVBQUgsRUFBSixFQUFxQjtBQUNuQixpQkFBS3hQLFlBQUwsQ0FBa0I0USxFQUFsQjtBQUNEO0FBQ0YsU0F4Q0QsTUF3Q08sSUFBSVAsUUFBUUUsVUFBUixLQUF1QixDQUEzQixFQUE4QjtBQUFHO0FBQ3RDLGNBQUluYixNQUFNLEtBQUswWCxjQUFMLEdBQXNCNEMsWUFBaEM7QUFDQSxjQUFJbUIsWUFBWSxFQUFDQyxNQUFNVCxRQUFROXVCLElBQWYsRUFBcUJtRSxRQUFRMnFCLFFBQVE5dUIsSUFBUixDQUFhNGIsVUFBMUMsRUFBc0QvSCxLQUFLQSxHQUEzRCxFQUFnRUMsS0FBS0QsR0FBckUsRUFBaEI7QUFDQThhLGdCQUFNbEMsT0FBTixDQUFjNWpCLElBQWQsQ0FBbUJ5bUIsU0FBbkI7QUFDQVgsZ0JBQU14cUIsTUFBTixJQUFnQjJxQixRQUFROXVCLElBQVIsQ0FBYW1FLE1BQTdCO0FBQ0QsU0FMTSxNQUtBO0FBQ0xzVSwyQkFBSXpYLENBQUosQ0FBTSxLQUFLNlUsR0FBWCxzQ0FBa0RpWixRQUFRRSxVQUExRDtBQUNEO0FBQ0YsT0F0REQsTUFzRE8sSUFBSVgsZ0JBQWdCLENBQXBCLEVBQXVCO0FBQUc7QUFDL0IsWUFBSSxDQUFDSyxLQUFLMVYsS0FBVixFQUFpQjtBQUNmO0FBQ0EsY0FBSWlXLFFBQU8sS0FBS08sa0JBQUwsQ0FBd0JuSixXQUF4QixFQUFxQ0MsYUFBYSxDQUFsRCxFQUFxREMsV0FBVyxDQUFoRSxFQUFtRSxJQUFuRSxDQUFYO0FBQ0EsY0FBSTBJLFNBQVF6d0IsU0FBWixFQUF1QjtBQUNyQjtBQUNEO0FBQ0Rrd0IsZUFBSzdjLGVBQUwsR0FBdUJvZCxNQUFLQyxZQUE1QjtBQUNBUixlQUFLRyxZQUFMLEdBQW9CSSxNQUFLSixZQUF6QjtBQUNBSCxlQUFLMVYsS0FBTCxHQUFhaVcsTUFBS2pXLEtBQWxCO0FBQ0EwVixlQUFLUyxhQUFMLEdBQXFCRixNQUFLRSxhQUExQjtBQUNBO0FBQ0FULGVBQUtVLGlCQUFMLEdBQXlCLE9BQU9WLEtBQUs3YyxlQUFaLEdBQThCNmMsS0FBS0UsU0FBNUQ7QUFDQW5XLDJCQUFJWSxDQUFKLENBQU0sS0FBS3hELEdBQVgsRUFBZ0IsZ0NBQWhCOztBQUVBLGVBQUtvViwrQkFBTCxHQUF1QyxJQUF2QztBQUNBLGVBQUtYLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCb0UsSUFBL0I7O0FBRUEsY0FBSVcsTUFBSyxLQUFLcFAsVUFBZDtBQUNBb1AsY0FBRzVkLFVBQUgsR0FBZ0JpZCxLQUFLMVYsS0FBckI7QUFDQXFXLGNBQUd4ZCxlQUFILEdBQXFCNmMsS0FBSzdjLGVBQTFCO0FBQ0F3ZCxjQUFHdmQsaUJBQUgsR0FBdUI0YyxLQUFLRyxZQUE1QjtBQUNBUSxjQUFHMWQsYUFBSCxHQUFtQnNkLE1BQUtRLE9BQXhCO0FBQ0EsY0FBSUosSUFBRzdkLFFBQVAsRUFBaUI7QUFDZixnQkFBSTZkLElBQUczZCxVQUFILElBQWlCLElBQXJCLEVBQTJCO0FBQ3pCMmQsa0JBQUdqZixRQUFILEdBQWMsMEJBQTBCaWYsSUFBRzNkLFVBQTdCLEdBQTBDLEdBQTFDLEdBQWdEMmQsSUFBRzVkLFVBQW5ELEdBQWdFLEdBQTlFO0FBQ0Q7QUFDRixXQUpELE1BSU87QUFDTDRkLGdCQUFHamYsUUFBSCxHQUFjLDBCQUEwQmlmLElBQUc1ZCxVQUE3QixHQUEwQyxHQUF4RDtBQUNEO0FBQ0QsY0FBSTRkLElBQUdwQixVQUFILEVBQUosRUFBcUI7QUFDbkIsaUJBQUt4UCxZQUFMLENBQWtCNFEsR0FBbEI7QUFDRDtBQUNGOztBQUVEO0FBQ0EsWUFBSXJ2QixPQUFPLEtBQUt3dkIsa0JBQUwsQ0FBd0JuSixXQUF4QixFQUFxQ0MsYUFBYSxDQUFsRCxFQUFxREMsV0FBVyxDQUFoRSxFQUFtRSxLQUFuRSxDQUFYO0FBQ0EsWUFBSXZtQixRQUFReEIsU0FBWixFQUF1QjtBQUNyQjtBQUNEO0FBQ0QsWUFBSXFWLE9BQU0sS0FBSzBYLGNBQUwsR0FBc0I0QyxZQUFoQztBQUNBLFlBQUl1QixZQUFZLEVBQUNILE1BQU12dkIsSUFBUCxFQUFhbUUsUUFBUW5FLEtBQUs0YixVQUExQixFQUFzQy9ILEtBQUtBLElBQTNDLEVBQWdEQyxLQUFLRCxJQUFyRCxFQUFoQjtBQUNBOGEsY0FBTWxDLE9BQU4sQ0FBYzVqQixJQUFkLENBQW1CNm1CLFNBQW5CO0FBQ0FmLGNBQU14cUIsTUFBTixJQUFnQm5FLEtBQUttRSxNQUFyQjtBQUNEO0FBQ0Y7Ozt1Q0FFa0JraUIsVyxFQUFhQyxVLEVBQVlDLFEsRUFBVTtBQUNwRCxVQUFJQSxZQUFZLENBQWhCLEVBQW1CO0FBQ2pCOU4seUJBQUkwUCxDQUFKLENBQU0sS0FBS3RTLEdBQVgsRUFBZ0IsNkRBQWhCO0FBQ0E7QUFDRDs7QUFFRCxVQUFJMlQsU0FBUyxFQUFiO0FBQ0EsVUFBSXZlLFFBQVEsSUFBSThiLFVBQUosQ0FBZVYsV0FBZixFQUE0QkMsVUFBNUIsRUFBd0NDLFFBQXhDLENBQVo7O0FBRUFpRCxhQUFPd0YsVUFBUCxHQUFvQi9qQixNQUFNLENBQU4sQ0FBcEI7O0FBRUEsVUFBSUEsTUFBTSxDQUFOLE1BQWEsQ0FBakIsRUFBb0I7QUFDbEJ1ZSxlQUFPeHBCLElBQVAsR0FBYyxLQUFLMnZCLDRCQUFMLENBQWtDdEosV0FBbEMsRUFBK0NDLGFBQWEsQ0FBNUQsRUFBK0RDLFdBQVcsQ0FBMUUsQ0FBZDtBQUNELE9BRkQsTUFFTztBQUNMaUQsZUFBT3hwQixJQUFQLEdBQWNpTCxNQUFNbWUsUUFBTixDQUFlLENBQWYsQ0FBZDtBQUNEOztBQUVELGFBQU9JLE1BQVA7QUFDRDs7O2lEQUU0Qm5ELFcsRUFBYUMsVSxFQUFZQyxRLEVBQVU7QUFDOUQsVUFBSXRiLFFBQVEsSUFBSThiLFVBQUosQ0FBZVYsV0FBZixFQUE0QkMsVUFBNUIsRUFBd0NDLFFBQXhDLENBQVo7QUFDQSxVQUFJM1EsU0FBUyxJQUFiOztBQUVBOzs7Ozs7Ozs7O0FBVUEsVUFBSWdhLGtCQUFrQixDQUF0QjtBQUNBLFVBQUlDLDBCQUEwQixDQUE5QjtBQUNBLFVBQUlDLDJCQUEyQixJQUEvQjtBQUNBLFVBQUlDLGdCQUFnQixDQUFwQjtBQUNBLFVBQUlDLHlCQUF5QixJQUE3Qjs7QUFFQTtBQUNBSix3QkFBa0JDLDBCQUEwQjVrQixNQUFNLENBQU4sTUFBYSxDQUF6RDtBQUNBO0FBQ0E4a0Isc0JBQWlCLENBQUM5a0IsTUFBTSxDQUFOLElBQVcsSUFBWixLQUFxQixDQUF0QixHQUE0QkEsTUFBTSxDQUFOLE1BQWEsQ0FBekQ7QUFDQSxVQUFJOGtCLGdCQUFnQixDQUFoQixJQUFxQkEsaUJBQWlCLEtBQUsvRCxrQkFBTCxDQUF3QjduQixNQUFsRSxFQUEwRTtBQUN4RSxhQUFLa21CLFFBQUwsQ0FBYzFHLHNCQUFZMEUsWUFBMUIsRUFBd0MsNENBQXhDO0FBQ0E7QUFDRDs7QUFFRCxVQUFJNEgsb0JBQW9CLEtBQUtqRSxrQkFBTCxDQUF3QitELGFBQXhCLENBQXhCOztBQUVBO0FBQ0EsVUFBSUcsZ0JBQWdCLENBQUNqbEIsTUFBTSxDQUFOLElBQVcsSUFBWixNQUFzQixDQUExQztBQUNBLFVBQUlpbEIsZ0JBQWdCLENBQWhCLElBQXFCQSxpQkFBaUIsQ0FBMUMsRUFBNkM7QUFDM0MsYUFBSzdGLFFBQUwsQ0FBYzFHLHNCQUFZMEUsWUFBMUIsRUFBd0Msd0NBQXhDO0FBQ0E7QUFDRDs7QUFFRCxVQUFJdUgsb0JBQW9CLENBQXhCLEVBQTJCO0FBQUc7QUFDNUI7QUFDQUksaUNBQTBCLENBQUMva0IsTUFBTSxDQUFOLElBQVcsSUFBWixLQUFxQixDQUF0QixHQUE0QkEsTUFBTSxDQUFOLE1BQWEsQ0FBbEU7QUFDQTtBQUNBNmtCLG1DQUEyQixDQUFDN2tCLE1BQU0sQ0FBTixJQUFXLElBQVosTUFBc0IsQ0FBakQ7QUFDRDs7QUFFRDtBQUNBLFVBQUlrbEIsWUFBWXJ4QixLQUFLc3hCLFNBQUwsQ0FBZUQsU0FBZixDQUF5QkUsV0FBekIsRUFBaEI7O0FBRUEsVUFBSUYsVUFBVUcsT0FBVixDQUFrQixTQUFsQixNQUFpQyxDQUFDLENBQXRDLEVBQXlDO0FBQ3ZDO0FBQ0EsWUFBSVAsaUJBQWlCLENBQXJCLEVBQXdCO0FBQ3RCSCw0QkFBa0IsQ0FBbEI7QUFDQWhhLG1CQUFTLElBQUl6WSxLQUFKLENBQVUsQ0FBVixDQUFUO0FBQ0E2eUIsbUNBQXlCRCxnQkFBZ0IsQ0FBekM7QUFDRCxTQUpELE1BSU87QUFBRztBQUNSSCw0QkFBa0IsQ0FBbEI7QUFDQWhhLG1CQUFTLElBQUl6WSxLQUFKLENBQVUsQ0FBVixDQUFUO0FBQ0E2eUIsbUNBQXlCRCxhQUF6QjtBQUNEO0FBQ0YsT0FYRCxNQVdPLElBQUlJLFVBQVVHLE9BQVYsQ0FBa0IsU0FBbEIsTUFBaUMsQ0FBQyxDQUF0QyxFQUF5QztBQUM5QztBQUNBViwwQkFBa0IsQ0FBbEI7QUFDQWhhLGlCQUFTLElBQUl6WSxLQUFKLENBQVUsQ0FBVixDQUFUO0FBQ0E2eUIsaUNBQXlCRCxhQUF6QjtBQUNELE9BTE0sTUFLQTtBQUNMO0FBQ0E7QUFDQUgsMEJBQWtCLENBQWxCO0FBQ0FJLGlDQUF5QkQsYUFBekI7QUFDQW5hLGlCQUFTLElBQUl6WSxLQUFKLENBQVUsQ0FBVixDQUFUOztBQUVBLFlBQUk0eUIsaUJBQWlCLENBQXJCLEVBQXdCO0FBQ3RCQyxtQ0FBeUJELGdCQUFnQixDQUF6QztBQUNELFNBRkQsTUFFTyxJQUFJRyxrQkFBa0IsQ0FBdEIsRUFBeUI7QUFBRztBQUNqQ04sNEJBQWtCLENBQWxCO0FBQ0FoYSxtQkFBUyxJQUFJelksS0FBSixDQUFVLENBQVYsQ0FBVDtBQUNBNnlCLG1DQUF5QkQsYUFBekI7QUFDRDtBQUNGOztBQUVEbmEsYUFBTyxDQUFQLElBQVlnYSxtQkFBbUIsQ0FBL0I7QUFDQWhhLGFBQU8sQ0FBUCxLQUFhLENBQUNtYSxnQkFBZ0IsSUFBakIsTUFBMkIsQ0FBeEM7QUFDQW5hLGFBQU8sQ0FBUCxJQUFZLENBQUNtYSxnQkFBZ0IsSUFBakIsS0FBMEIsQ0FBdEM7QUFDQW5hLGFBQU8sQ0FBUCxLQUFhLENBQUNzYSxnQkFBZ0IsSUFBakIsS0FBMEIsQ0FBdkM7QUFDQSxVQUFJTixvQkFBb0IsQ0FBeEIsRUFBMkI7QUFDekJoYSxlQUFPLENBQVAsS0FBYyxDQUFDb2EseUJBQXlCLElBQTFCLE1BQW9DLENBQWxEO0FBQ0FwYSxlQUFPLENBQVAsSUFBWSxDQUFDb2EseUJBQXlCLElBQTFCLEtBQW1DLENBQS9DO0FBQ0E7QUFDQXBhLGVBQU8sQ0FBUCxLQUFjLEtBQUssQ0FBbkI7QUFDQUEsZUFBTyxDQUFQLElBQVksQ0FBWjtBQUNEOztBQUVELGFBQU87QUFDTEEsZ0JBQVFBLE1BREg7QUFFTHNaLHNCQUFjZSxpQkFGVDtBQUdMcEIsc0JBQWNxQixhQUhUO0FBSUxsWCxlQUFPLGFBQWE0VyxlQUpmO0FBS0xULHVCQUFlLGFBQWFVO0FBTHZCLE9BQVA7QUFPRDs7O3VDQUVrQnhKLFcsRUFBYUMsVSxFQUFZQyxRLEVBQVVnSyxhLEVBQWU7QUFDbkUsVUFBSWhLLFdBQVcsQ0FBZixFQUFrQjtBQUNoQjlOLHlCQUFJMFAsQ0FBSixDQUFNLEtBQUt0UyxHQUFYLEVBQWdCLDBDQUFoQjtBQUNBO0FBQ0Q7O0FBRUQsVUFBSWlRLEtBQUssS0FBSzZHLGFBQWQ7QUFDQSxVQUFJMWhCLFFBQVEsSUFBSThiLFVBQUosQ0FBZVYsV0FBZixFQUE0QkMsVUFBNUIsRUFBd0NDLFFBQXhDLENBQVo7QUFDQSxVQUFJaUQsU0FBUyxJQUFiOztBQUVBLFVBQUkrRyxhQUFKLEVBQW1CO0FBQ2pCLFlBQUl0bEIsTUFBTSxDQUFOLE1BQWEsSUFBakIsRUFBdUI7QUFDckI7QUFDRDtBQUNELFlBQUl1bEIsTUFBT3ZsQixNQUFNLENBQU4sTUFBYSxDQUFkLEdBQW1CLElBQTdCO0FBQ0EsWUFBSXdsQixRQUFRLENBQUN4bEIsTUFBTSxDQUFOLElBQVcsSUFBWixLQUFxQixDQUFqQzs7QUFFQSxZQUFJeWxCLGdCQUFnQixDQUFDemxCLE1BQU0sQ0FBTixJQUFXLElBQVosTUFBc0IsQ0FBMUM7QUFDQSxZQUFJMGxCLHNCQUFzQixDQUFDMWxCLE1BQU0sQ0FBTixJQUFXLElBQVosTUFBc0IsQ0FBaEQ7O0FBRUEsWUFBSTJsQixlQUFnQjNsQixNQUFNLENBQU4sTUFBYSxDQUFkLEdBQW1CLElBQXRDO0FBQ0EsWUFBSTRsQixnQkFBZ0JELGlCQUFpQixDQUFqQixHQUFxQixDQUFyQixHQUF5QixDQUE3Qzs7QUFFQSxZQUFJRSxjQUFjLENBQWxCO0FBQ0EsWUFBSUMsV0FBVyxDQUFmO0FBQ0EsWUFBSUMsY0FBYyxFQUFsQixDQWZpQixDQWVNOztBQUV2QixZQUFJaFksUUFBUSxLQUFaOztBQUVBLGdCQUFRd1gsR0FBUjtBQUNFLGVBQUssQ0FBTDtBQUFTO0FBQ1BNLDBCQUFjLEtBQUszRSw0QkFBTCxDQUFrQ3dFLG1CQUFsQyxDQUFkO0FBQ0E7QUFDRixlQUFLLENBQUw7QUFBUztBQUNQRywwQkFBYyxLQUFLNUUsNEJBQUwsQ0FBa0N5RSxtQkFBbEMsQ0FBZDtBQUNBO0FBQ0YsZUFBSyxDQUFMO0FBQVM7QUFDUEcsMEJBQWMsS0FBSzdFLDRCQUFMLENBQWtDMEUsbUJBQWxDLENBQWQ7QUFDQTtBQVRKOztBQVlBLGdCQUFRRixLQUFSO0FBQ0UsZUFBSyxDQUFMO0FBQVM7QUFDUE8sMEJBQWMsRUFBZDtBQUNBLGdCQUFJTixnQkFBZ0IsS0FBS3BFLHdCQUFMLENBQThCbm9CLE1BQWxELEVBQTBEO0FBQ3hENHNCLHlCQUFXLEtBQUt6RSx3QkFBTCxDQUE4Qm9FLGFBQTlCLENBQVg7QUFDRDtBQUNEO0FBQ0YsZUFBSyxDQUFMO0FBQVM7QUFDUE0sMEJBQWMsRUFBZDtBQUNBLGdCQUFJTixnQkFBZ0IsS0FBS3JFLHdCQUFMLENBQThCbG9CLE1BQWxELEVBQTBEO0FBQ3hENHNCLHlCQUFXLEtBQUsxRSx3QkFBTCxDQUE4QnFFLGFBQTlCLENBQVg7QUFDRDtBQUNEO0FBQ0YsZUFBSyxDQUFMO0FBQVM7QUFDUE0sMEJBQWMsRUFBZDtBQUNBLGdCQUFJTixnQkFBZ0IsS0FBS3RFLHdCQUFMLENBQThCam9CLE1BQWxELEVBQTBEO0FBQ3hENHNCLHlCQUFXLEtBQUszRSx3QkFBTCxDQUE4QnNFLGFBQTlCLENBQVg7QUFDRDtBQUNEO0FBbEJKOztBQXFCQWxILGlCQUFTO0FBQ1BpRyxtQkFBU3NCLFFBREY7QUFFUDdCLHdCQUFjNEIsV0FGUDtBQUdQakMsd0JBQWNnQyxhQUhQO0FBSVA3WCxpQkFBT0EsS0FKQTtBQUtQbVcseUJBQWVuVztBQUxSLFNBQVQ7QUFPRCxPQTNERCxNQTJETztBQUNMd1EsaUJBQVN2ZSxLQUFUO0FBQ0Q7O0FBRUQsYUFBT3VlLE1BQVA7QUFDRDs7O29DQUVlbkQsVyxFQUFhQyxVLEVBQVlDLFEsRUFBVTRILFksRUFBYzhDLFcsRUFBYTtBQUM1RSxVQUFJMUssWUFBWSxDQUFoQixFQUFtQjtBQUNqQjlOLHlCQUFJMFAsQ0FBSixDQUFNLEtBQUt0UyxHQUFYLEVBQWdCLHVEQUFoQjtBQUNBO0FBQ0Q7O0FBRUQsVUFBSSxLQUFLbVYsc0JBQUwsS0FBZ0MsSUFBaEMsSUFBd0MsS0FBS0gsU0FBTCxLQUFtQixLQUEvRCxFQUFzRTtBQUNwRTtBQUNBO0FBQ0E7QUFDRDs7QUFFRCxVQUFJcUcsT0FBUSxJQUFJbkssVUFBSixDQUFlVixXQUFmLEVBQTRCQyxVQUE1QixFQUF3Q0MsUUFBeEMsQ0FBRCxDQUFvRCxDQUFwRCxDQUFYOztBQUVBLFVBQUk0SyxZQUFZLENBQUNELE9BQU8sR0FBUixNQUFpQixDQUFqQztBQUNBLFVBQUlFLFVBQVVGLE9BQU8sRUFBckI7O0FBRUEsVUFBSUUsWUFBWSxDQUFoQixFQUFtQjtBQUNqQixhQUFLL0csUUFBTCxDQUFjMUcsc0JBQVkyRSxpQkFBMUIsOENBQXVGOEksT0FBdkY7QUFDQTtBQUNEOztBQUVELFdBQUtDLG9CQUFMLENBQTBCaEwsV0FBMUIsRUFBdUNDLGFBQWEsQ0FBcEQsRUFBdURDLFdBQVcsQ0FBbEUsRUFBcUU0SCxZQUFyRSxFQUFtRjhDLFdBQW5GLEVBQWdHRSxTQUFoRztBQUNEOzs7eUNBRW9COUssVyxFQUFhQyxVLEVBQVlDLFEsRUFBVTRILFksRUFBYzhDLFcsRUFBYUUsUyxFQUFXO0FBQzVGLFVBQUk1SyxXQUFXLENBQWYsRUFBa0I7QUFDaEI5Tix5QkFBSTBQLENBQUosQ0FBTSxLQUFLdFMsR0FBWCxFQUFnQix1RUFBaEI7QUFDQTtBQUNEOztBQUVELFVBQUlpUSxLQUFLLEtBQUs2RyxhQUFkO0FBQ0EsVUFBSXRULElBQUksSUFBSTRNLFFBQUosQ0FBYUksV0FBYixFQUEwQkMsVUFBMUIsRUFBc0NDLFFBQXRDLENBQVI7O0FBRUEsVUFBSXlJLGFBQWEzVixFQUFFa08sUUFBRixDQUFXLENBQVgsQ0FBakI7QUFDQSxVQUFJK0osZUFBZWpZLEVBQUUyTixTQUFGLENBQVksQ0FBWixFQUFlLENBQUNsQixFQUFoQixJQUFzQixVQUF6QztBQUNBLFVBQUl5TCxNQUFPRCxnQkFBZ0IsQ0FBakIsSUFBdUIsQ0FBakMsQ0FYNEYsQ0FXdkQ7O0FBRXJDLFVBQUl0QyxlQUFlLENBQW5CLEVBQXNCO0FBQUc7QUFDdkIsYUFBS3dDLG1DQUFMLENBQXlDbkwsV0FBekMsRUFBc0RDLGFBQWEsQ0FBbkUsRUFBc0VDLFdBQVcsQ0FBakY7QUFDRCxPQUZELE1BRU8sSUFBSXlJLGVBQWUsQ0FBbkIsRUFBc0I7QUFBRztBQUM5QixhQUFLeUMsa0JBQUwsQ0FBd0JwTCxXQUF4QixFQUFxQ0MsYUFBYSxDQUFsRCxFQUFxREMsV0FBVyxDQUFoRSxFQUFtRTRILFlBQW5FLEVBQWlGOEMsV0FBakYsRUFBOEZFLFNBQTlGLEVBQXlHSSxHQUF6RztBQUNELE9BRk0sTUFFQSxJQUFJdkMsZUFBZSxDQUFuQixFQUFzQjtBQUMzQjtBQUNELE9BRk0sTUFFQTtBQUNMLGFBQUszRSxRQUFMLENBQWMxRyxzQkFBWTBFLFlBQTFCLHNDQUEwRTJHLFVBQTFFO0FBQ0E7QUFDRDtBQUNGOzs7d0RBRW1DM0ksVyxFQUFhQyxVLEVBQVlDLFEsRUFBVTtBQUNyRSxVQUFJQSxXQUFXLENBQWYsRUFBa0I7QUFDaEI5Tix5QkFBSTBQLENBQUosQ0FBTSxLQUFLdFMsR0FBWCxFQUFnQiwyREFBaEI7QUFDQTtBQUNEOztBQUVELFVBQUk2WSxPQUFPLEtBQUtyRCxjQUFoQjtBQUNBLFVBQUlzRCxRQUFRLEtBQUtwQyxXQUFqQjtBQUNBLFVBQUl6RyxLQUFLLEtBQUs2RyxhQUFkO0FBQ0EsVUFBSXRULElBQUksSUFBSTRNLFFBQUosQ0FBYUksV0FBYixFQUEwQkMsVUFBMUIsRUFBc0NDLFFBQXRDLENBQVI7O0FBRUEsVUFBSSxDQUFDbUksSUFBTCxFQUFXO0FBQ1QsWUFBSSxLQUFLN0QsU0FBTCxLQUFtQixLQUFuQixJQUE0QixLQUFLRyxzQkFBTCxLQUFnQyxLQUFoRSxFQUF1RTtBQUNyRSxlQUFLSCxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsZUFBSzVLLFVBQUwsQ0FBZ0J6TyxRQUFoQixHQUEyQixJQUEzQjtBQUNEOztBQUVEa2QsZUFBTyxLQUFLckQsY0FBTCxHQUFzQixFQUE3QjtBQUNBcUQsYUFBSzF4QixJQUFMLEdBQVksT0FBWjtBQUNBMHhCLGFBQUszcEIsRUFBTCxHQUFVNHBCLE1BQU01cEIsRUFBaEI7QUFDQTJwQixhQUFLRSxTQUFMLEdBQWlCLEtBQUtwRCxVQUF0QjtBQUNBa0QsYUFBS3BkLFFBQUwsR0FBZ0IsS0FBS21hLFNBQXJCO0FBQ0QsT0FYRCxNQVdPO0FBQ0wsWUFBSSxPQUFPaUQsS0FBS2dELElBQVosS0FBcUIsV0FBekIsRUFBc0M7QUFDcENqWiwyQkFBSTBQLENBQUosQ0FBTSxLQUFLdFMsR0FBWCxFQUFnQiw4Q0FBaEI7QUFDRDtBQUNGOztBQUVELFVBQUl2SyxVQUFVK04sRUFBRWtPLFFBQUYsQ0FBVyxDQUFYLENBQWQsQ0E1QnFFLENBNEJ2QztBQUM5QixVQUFJb0ssYUFBYXRZLEVBQUVrTyxRQUFGLENBQVcsQ0FBWCxDQUFqQixDQTdCcUUsQ0E2QnBDO0FBQ2pDLFVBQUlxSyx1QkFBdUJ2WSxFQUFFa08sUUFBRixDQUFXLENBQVgsQ0FBM0IsQ0E5QnFFLENBOEIxQjtBQUMzQyxVQUFJc0ssV0FBV3hZLEVBQUVrTyxRQUFGLENBQVcsQ0FBWCxDQUFmLENBL0JxRSxDQStCdEM7O0FBRS9CLFVBQUlqYyxZQUFZLENBQVosSUFBaUJxbUIsZUFBZSxDQUFwQyxFQUF1QztBQUNyQyxhQUFLdEgsUUFBTCxDQUFjMUcsc0JBQVkwRSxZQUExQixFQUF3Qyw0Q0FBeEM7QUFDQTtBQUNEOztBQUVELFdBQUtpRCxlQUFMLEdBQXVCLENBQUNqUyxFQUFFa08sUUFBRixDQUFXLENBQVgsSUFBZ0IsQ0FBakIsSUFBc0IsQ0FBN0MsQ0F0Q3FFLENBc0NwQjtBQUNqRCxVQUFJLEtBQUsrRCxlQUFMLEtBQXlCLENBQXpCLElBQThCLEtBQUtBLGVBQUwsS0FBeUIsQ0FBM0QsRUFBOEQ7QUFBRztBQUMvRCxhQUFLakIsUUFBTCxDQUFjMUcsc0JBQVkwRSxZQUExQiw2Q0FBZ0YsS0FBS2lELGVBQUwsR0FBdUIsQ0FBdkc7QUFDQTtBQUNEOztBQUVELFVBQUl3RyxXQUFXelksRUFBRWtPLFFBQUYsQ0FBVyxDQUFYLElBQWdCLEVBQS9CLENBNUNxRSxDQTRDakM7QUFDcEMsVUFBSXVLLGFBQWEsQ0FBakIsRUFBb0I7QUFDbEIsYUFBS3pILFFBQUwsQ0FBYzFHLHNCQUFZMEUsWUFBMUIsRUFBd0Msb0RBQXhDO0FBQ0E7QUFDRCxPQUhELE1BR08sSUFBSXlKLFdBQVcsQ0FBZixFQUFrQjtBQUN2QnJaLHlCQUFJMFAsQ0FBSixDQUFNLEtBQUt0UyxHQUFYLCtEQUEyRWljLFFBQTNFO0FBQ0Q7O0FBRUQsVUFBSXhLLFNBQVMsQ0FBYjs7QUFFQSxXQUFLLElBQUk3bUIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJcXhCLFFBQXBCLEVBQThCcnhCLEdBQTlCLEVBQW1DO0FBQ2pDLFlBQUloRCxNQUFNNGIsRUFBRXlOLFNBQUYsQ0FBWVEsTUFBWixFQUFvQixDQUFDeEIsRUFBckIsQ0FBVixDQURpQyxDQUNJO0FBQ3JDd0Isa0JBQVUsQ0FBVjs7QUFFQSxZQUFJN3BCLFFBQVEsQ0FBWixFQUFlO0FBQ2I7QUFDRDs7QUFFRDtBQUNBLFlBQUlzMEIsTUFBTSxJQUFJaEwsVUFBSixDQUFlVixXQUFmLEVBQTRCQyxhQUFhZ0IsTUFBekMsRUFBaUQ3cEIsR0FBakQsQ0FBVjtBQUNBNnBCLGtCQUFVN3BCLEdBQVY7O0FBRUEsWUFBSW1ZLFNBQVNvYyxvQkFBVUMsUUFBVixDQUFtQkYsR0FBbkIsQ0FBYjtBQUNBLFlBQUl0eEIsTUFBTSxDQUFWLEVBQWE7QUFDWDtBQUNBO0FBQ0Q7O0FBRURpdUIsYUFBS3dELFVBQUwsR0FBa0J0YyxPQUFPdWMsVUFBUCxDQUFrQnBnQixLQUFwQztBQUNBMmMsYUFBSzBELFdBQUwsR0FBbUJ4YyxPQUFPdWMsVUFBUCxDQUFrQm5nQixNQUFyQztBQUNBMGMsYUFBSzJELFlBQUwsR0FBb0J6YyxPQUFPMGMsWUFBUCxDQUFvQnZnQixLQUF4QztBQUNBMmMsYUFBSzZELGFBQUwsR0FBcUIzYyxPQUFPMGMsWUFBUCxDQUFvQnRnQixNQUF6Qzs7QUFFQTBjLGFBQUt4YyxPQUFMLEdBQWUwRCxPQUFPNGMsY0FBdEI7QUFDQTlELGFBQUt2YyxLQUFMLEdBQWF5RCxPQUFPNmMsWUFBcEI7QUFDQS9ELGFBQUtnRSxRQUFMLEdBQWdCOWMsT0FBTytjLFNBQXZCO0FBQ0FqRSxhQUFLcmMsWUFBTCxHQUFvQnVELE9BQU9nZCxhQUEzQjtBQUNBbEUsYUFBS21FLFFBQUwsR0FBZ0JqZCxPQUFPa2QsU0FBdkI7QUFDQXBFLGFBQUtxRSxTQUFMLEdBQWlCbmQsT0FBT29kLFVBQXhCOztBQUVBLFlBQUlwZCxPQUFPb2QsVUFBUCxDQUFrQnBILEtBQWxCLEtBQTRCLEtBQTVCLElBQ0ZoVyxPQUFPb2QsVUFBUCxDQUFrQm5ILE9BQWxCLEtBQThCLENBRDVCLElBRUZqVyxPQUFPb2QsVUFBUCxDQUFrQmxILE9BQWxCLEtBQThCLENBRmhDLEVBRW1DO0FBQ2pDNEMsZUFBS3FFLFNBQUwsR0FBaUIsS0FBS3BILG1CQUF0QjtBQUNEOztBQUVELFlBQUlHLFVBQVU0QyxLQUFLcUUsU0FBTCxDQUFlakgsT0FBN0I7QUFDQSxZQUFJRCxVQUFVNkMsS0FBS3FFLFNBQUwsQ0FBZWxILE9BQTdCO0FBQ0E2QyxhQUFLVSxpQkFBTCxHQUF5QlYsS0FBS0UsU0FBTCxJQUFrQjlDLFVBQVVELE9BQTVCLENBQXpCOztBQUVBLFlBQUlvSCxhQUFhbEIsSUFBSTNJLFFBQUosQ0FBYSxDQUFiLEVBQWdCLENBQWhCLENBQWpCO0FBQ0EsWUFBSThKLGNBQWMsT0FBbEI7QUFDQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSSxDQUFwQixFQUF1QkEsR0FBdkIsRUFBNEI7QUFDMUIsY0FBSUMsSUFBSUgsV0FBV0UsQ0FBWCxFQUFjNTFCLFFBQWQsQ0FBdUIsRUFBdkIsQ0FBUjtBQUNBLGNBQUk2MUIsRUFBRWp2QixNQUFGLEdBQVcsQ0FBZixFQUFrQjtBQUNoQml2QixnQkFBSSxNQUFNQSxDQUFWO0FBQ0Q7QUFDREYseUJBQWVFLENBQWY7QUFDRDtBQUNEMUUsYUFBSzFWLEtBQUwsR0FBYWthLFdBQWI7O0FBRUEsWUFBSTdELEtBQUssS0FBS3BQLFVBQWQ7QUFDQW9QLFdBQUd0ZCxLQUFILEdBQVcyYyxLQUFLd0QsVUFBaEI7QUFDQTdDLFdBQUdyZCxNQUFILEdBQVkwYyxLQUFLMEQsV0FBakI7QUFDQS9DLFdBQUdwZCxHQUFILEdBQVN5YyxLQUFLcUUsU0FBTCxDQUFlOWdCLEdBQXhCO0FBQ0FvZCxXQUFHbmQsT0FBSCxHQUFhd2MsS0FBS3hjLE9BQWxCO0FBQ0FtZCxXQUFHbGQsS0FBSCxHQUFXdWMsS0FBS3ZjLEtBQWhCO0FBQ0FrZCxXQUFHamQsU0FBSCxHQUFld0QsT0FBT3lkLFVBQXRCO0FBQ0FoRSxXQUFHaGQsWUFBSCxHQUFrQnVELE9BQU8wZCxvQkFBekI7QUFDQWpFLFdBQUcvYyxNQUFILEdBQVlvYyxLQUFLbUUsUUFBTCxDQUFjOWdCLEtBQTFCO0FBQ0FzZCxXQUFHOWMsTUFBSCxHQUFZbWMsS0FBS21FLFFBQUwsQ0FBYzdnQixNQUExQjtBQUNBcWQsV0FBRzNkLFVBQUgsR0FBZ0J3aEIsV0FBaEI7O0FBRUEsWUFBSTdELEdBQUc5ZCxRQUFQLEVBQWlCO0FBQ2YsY0FBSThkLEdBQUc1ZCxVQUFILElBQWlCLElBQXJCLEVBQTJCO0FBQ3pCNGQsZUFBR2pmLFFBQUgsR0FBYywwQkFBMEJpZixHQUFHM2QsVUFBN0IsR0FBMEMsR0FBMUMsR0FBZ0QyZCxHQUFHNWQsVUFBbkQsR0FBZ0UsR0FBOUU7QUFDRDtBQUNGLFNBSkQsTUFJTztBQUNMNGQsYUFBR2pmLFFBQUgsR0FBYywwQkFBMEJpZixHQUFHM2QsVUFBN0IsR0FBMEMsR0FBeEQ7QUFDRDtBQUNELFlBQUkyZCxHQUFHcEIsVUFBSCxFQUFKLEVBQXFCO0FBQ25CLGVBQUt4UCxZQUFMLENBQWtCNFEsRUFBbEI7QUFDRDtBQUNGOztBQUVELFVBQUlrRSxXQUFXbGEsRUFBRWtPLFFBQUYsQ0FBV0QsTUFBWCxDQUFmLENBaklxRSxDQWlJakM7QUFDcEMsVUFBSWlNLGFBQWEsQ0FBakIsRUFBb0I7QUFDbEIsYUFBS2xKLFFBQUwsQ0FBYzFHLHNCQUFZMEUsWUFBMUIsRUFBd0Msb0RBQXhDO0FBQ0E7QUFDRCxPQUhELE1BR08sSUFBSWtMLFdBQVcsQ0FBZixFQUFrQjtBQUN2QjlhLHlCQUFJMFAsQ0FBSixDQUFNLEtBQUt0UyxHQUFYLCtEQUEyRTBkLFFBQTNFO0FBQ0Q7O0FBRURqTTs7QUFFQSxXQUFLLElBQUk3bUIsS0FBSSxDQUFiLEVBQWdCQSxLQUFJOHlCLFFBQXBCLEVBQThCOXlCLElBQTlCLEVBQW1DO0FBQ2pDLFlBQUloRCxPQUFNNGIsRUFBRXlOLFNBQUYsQ0FBWVEsTUFBWixFQUFvQixDQUFDeEIsRUFBckIsQ0FBVixDQURpQyxDQUNJO0FBQ3JDd0Isa0JBQVUsQ0FBVjs7QUFFQSxZQUFJN3BCLFNBQVEsQ0FBWixFQUFlO0FBQ2I7QUFDRDs7QUFFRDtBQUNBNnBCLGtCQUFVN3BCLElBQVY7QUFDRDs7QUFFRGl4QixXQUFLZ0QsSUFBTCxHQUFZLElBQUkzSyxVQUFKLENBQWVSLFFBQWYsQ0FBWjtBQUNBbUksV0FBS2dELElBQUwsQ0FBVXZJLEdBQVYsQ0FBYyxJQUFJcEMsVUFBSixDQUFlVixXQUFmLEVBQTRCQyxVQUE1QixFQUF3Q0MsUUFBeEMsQ0FBZCxFQUFpRSxDQUFqRTtBQUNBOU4sdUJBQUlZLENBQUosQ0FBTSxLQUFLeEQsR0FBWCxFQUFnQixzQ0FBaEI7O0FBRUEsVUFBSSxLQUFLNFgsNEJBQUwsRUFBSixFQUF5QztBQUN2QztBQUNBLFlBQUksS0FBSy9DLFNBQUwsS0FBbUIsS0FBS2dDLFdBQUwsQ0FBaUJ2b0IsTUFBakIsSUFBMkIsS0FBS29vQixXQUFMLENBQWlCcG9CLE1BQS9ELENBQUosRUFBNEU7QUFDMUUsZUFBS29tQixnQkFBTCxDQUFzQixLQUFLbUMsV0FBM0IsRUFBd0MsS0FBS0gsV0FBN0M7QUFDRDtBQUNGLE9BTEQsTUFLTztBQUNMLGFBQUtyQiwrQkFBTCxHQUF1QyxJQUF2QztBQUNEO0FBQ0Q7QUFDQSxXQUFLUixTQUFMLEdBQWlCLEtBQWpCO0FBQ0EsV0FBS0osZ0JBQUwsQ0FBc0IsT0FBdEIsRUFBK0JvRSxJQUEvQjtBQUNEOzs7dUNBRWtCckksVyxFQUFhQyxVLEVBQVlDLFEsRUFBVTRILFksRUFBYzhDLFcsRUFBYUUsUyxFQUFXSSxHLEVBQUs7QUFDL0YsVUFBSXpMLEtBQUssS0FBSzZHLGFBQWQ7QUFDQSxVQUFJdFQsSUFBSSxJQUFJNE0sUUFBSixDQUFhSSxXQUFiLEVBQTBCQyxVQUExQixFQUFzQ0MsUUFBdEMsQ0FBUjs7QUFFQSxVQUFJaU4sUUFBUSxFQUFaO0FBQUEsVUFBZ0JydkIsU0FBUyxDQUF6Qjs7QUFFQSxVQUFJbWpCLFNBQVMsQ0FBYjtBQUNBLFVBQU1tTSxhQUFhLEtBQUtuSSxlQUF4QjtBQUNBLFVBQUl6WCxNQUFNLEtBQUswWCxjQUFMLEdBQXNCNEMsWUFBaEM7QUFDQSxVQUFJaE0sV0FBWWdQLGNBQWMsQ0FBOUIsQ0FUK0YsQ0FTNUQ7O0FBRW5DLGFBQU83SixTQUFTZixRQUFoQixFQUEwQjtBQUN4QixZQUFJZSxTQUFTLENBQVQsSUFBY2YsUUFBbEIsRUFBNEI7QUFDMUI5TiwyQkFBSTBQLENBQUosQ0FBTSxLQUFLdFMsR0FBWCxxQ0FBaURoQyxHQUFqRCxtQkFBa0V5VCxNQUFsRSxxQkFBd0ZmLFFBQXhGO0FBQ0EsZ0JBRjBCLENBRWxCO0FBQ1Q7QUFDRDtBQUNBLFlBQUltTixXQUFXcmEsRUFBRTJOLFNBQUYsQ0FBWU0sTUFBWixFQUFvQixDQUFDeEIsRUFBckIsQ0FBZixDQU53QixDQU1rQjtBQUMxQyxZQUFJMk4sZUFBZSxDQUFuQixFQUFzQjtBQUNwQkMsd0JBQWMsQ0FBZDtBQUNEO0FBQ0QsWUFBSUEsV0FBV25OLFdBQVdrTixVQUExQixFQUFzQztBQUNwQ2hiLDJCQUFJMFAsQ0FBSixDQUFNLEtBQUt0UyxHQUFYLHNDQUFrRGhDLEdBQWxEO0FBQ0E7QUFDRDs7QUFFRCxZQUFJOGYsV0FBV3RhLEVBQUVrTyxRQUFGLENBQVdELFNBQVNtTSxVQUFwQixJQUFrQyxJQUFqRDs7QUFFQSxZQUFJRSxhQUFhLENBQWpCLEVBQW9CO0FBQUc7QUFDckJ4UixxQkFBVyxJQUFYO0FBQ0Q7O0FBRUQsWUFBSW5pQixPQUFPLElBQUkrbUIsVUFBSixDQUFlVixXQUFmLEVBQTRCQyxhQUFhZ0IsTUFBekMsRUFBaURtTSxhQUFhQyxRQUE5RCxDQUFYO0FBQ0EsWUFBSW5FLE9BQU8sRUFBQ3Z5QixNQUFNMjJCLFFBQVAsRUFBaUIzekIsTUFBTUEsSUFBdkIsRUFBWDtBQUNBd3pCLGNBQU0zcUIsSUFBTixDQUFXMG1CLElBQVg7QUFDQXByQixrQkFBVW5FLEtBQUs0YixVQUFmOztBQUVBMEwsa0JBQVVtTSxhQUFhQyxRQUF2QjtBQUNEOztBQUVELFVBQUlGLE1BQU1ydkIsTUFBVixFQUFrQjtBQUNoQixZQUFJd3FCLFFBQVEsS0FBS3BDLFdBQWpCO0FBQ0EsWUFBSXFILFlBQVk7QUFDZEosaUJBQU9BLEtBRE87QUFFZHJ2QixrQkFBUUEsTUFGTTtBQUdkMHZCLHNCQUFZMVIsUUFIRTtBQUlkdE8sZUFBS0EsR0FKUztBQUtkMGQsZUFBS0EsR0FMUztBQU1kemQsZUFBTUQsTUFBTTBkO0FBTkUsU0FBaEI7QUFRQSxZQUFJcFAsUUFBSixFQUFjO0FBQ1p5UixvQkFBVXZnQixZQUFWLEdBQXlCNGQsV0FBekI7QUFDRDtBQUNEdEMsY0FBTWxDLE9BQU4sQ0FBYzVqQixJQUFkLENBQW1CK3FCLFNBQW5CO0FBQ0FqRixjQUFNeHFCLE1BQU4sSUFBZ0JBLE1BQWhCO0FBQ0Q7QUFDRjs7O3dCQTM0QnFCO0FBQ3BCLGFBQU8sS0FBS21tQixnQkFBWjtBQUNELEs7c0JBRW1CenNCLFEsRUFBVTtBQUM1QixXQUFLeXNCLGdCQUFMLEdBQXdCenNCLFFBQXhCO0FBQ0Q7O0FBRUQ7Ozs7d0JBQ2tCO0FBQ2hCLGFBQU8sS0FBSzRnQixZQUFaO0FBQ0QsSztzQkFFZTVnQixRLEVBQVU7QUFDeEIsV0FBSzRnQixZQUFMLEdBQW9CNWdCLFFBQXBCO0FBQ0Q7O0FBRUQ7Ozs7d0JBQ2M7QUFDWixhQUFPLEtBQUt3c0IsUUFBWjtBQUNELEs7c0JBRVd4c0IsUSxFQUFVO0FBQ3BCLFdBQUt3c0IsUUFBTCxHQUFnQnhzQixRQUFoQjtBQUNEOztBQUVEOzs7O3dCQUNzQjtBQUNwQixhQUFPLEtBQUswc0IsZ0JBQVo7QUFDRCxLO3NCQUVtQjFzQixRLEVBQVU7QUFDNUIsV0FBSzBzQixnQkFBTCxHQUF3QjFzQixRQUF4QjtBQUNEOztBQUVEOzs7O3dCQUNvQjtBQUNsQixhQUFPLEtBQUswdEIsY0FBWjtBQUNELEs7c0JBRWlCdUksSSxFQUFNO0FBQ3RCLFdBQUt2SSxjQUFMLEdBQXNCdUksSUFBdEI7QUFDRDs7O3dCQUV1QjtBQUN0QixhQUFPLEtBQUtySSxTQUFaO0FBQ0Q7O0FBRUQ7O3NCQUNzQm5hLFEsRUFBVTtBQUM5QixXQUFLb2Esa0JBQUwsR0FBMEIsSUFBMUI7QUFDQSxXQUFLRCxTQUFMLEdBQWlCbmEsUUFBakI7QUFDQSxXQUFLMk8sVUFBTCxDQUFnQjNPLFFBQWhCLEdBQTJCQSxRQUEzQjtBQUNEOztBQUVEOzs7O3NCQUNzQkMsUSxFQUFVO0FBQzlCLFdBQUt3WixzQkFBTCxHQUE4QixJQUE5QjtBQUNBLFdBQUtKLFNBQUwsR0FBaUJwWixRQUFqQjtBQUNBLFdBQUswTyxVQUFMLENBQWdCMU8sUUFBaEIsR0FBMkJBLFFBQTNCO0FBQ0Q7O0FBRUQ7Ozs7c0JBQ3NCQyxRLEVBQVU7QUFDOUIsV0FBS3daLHNCQUFMLEdBQThCLElBQTlCO0FBQ0EsV0FBS0gsU0FBTCxHQUFpQnJaLFFBQWpCO0FBQ0EsV0FBS3lPLFVBQUwsQ0FBZ0J6TyxRQUFoQixHQUEyQkEsUUFBM0I7QUFDRDs7OzBCQW5HWTZYLE0sRUFBUTtBQUNuQixVQUFJcnBCLE9BQU8sSUFBSSttQixVQUFKLENBQWVzQyxNQUFmLENBQVg7QUFDQSxVQUFJMEssV0FBVyxFQUFDaFIsT0FBTyxLQUFSLEVBQWY7O0FBRUEsVUFBSS9pQixLQUFLLENBQUwsTUFBWSxJQUFaLElBQW9CQSxLQUFLLENBQUwsTUFBWSxJQUFoQyxJQUF3Q0EsS0FBSyxDQUFMLE1BQVksSUFBcEQsSUFBNERBLEtBQUssQ0FBTCxNQUFZLElBQTVFLEVBQWtGO0FBQ2hGLGVBQU8rekIsUUFBUDtBQUNEOztBQUVELFVBQUl4aUIsV0FBWSxDQUFDdlIsS0FBSyxDQUFMLElBQVUsQ0FBWCxNQUFrQixDQUFuQixLQUEwQixDQUF6QztBQUNBLFVBQUl3UixXQUFXLENBQUN4UixLQUFLLENBQUwsSUFBVSxDQUFYLE1BQWtCLENBQWpDOztBQUVBLFVBQUlzbkIsU0FBUzhDLFVBQVVwcUIsSUFBVixFQUFnQixDQUFoQixDQUFiOztBQUVBLFVBQUlzbkIsU0FBUyxDQUFiLEVBQWdCO0FBQ2QsZUFBT3lNLFFBQVA7QUFDRDs7QUFFRCxhQUFPO0FBQ0xoUixlQUFPLElBREY7QUFFTEosa0JBQVUyRSxNQUZMO0FBR0xoQixvQkFBWWdCLE1BSFA7QUFJTHNELHVCQUFlclosUUFKVjtBQUtMdVosdUJBQWV0WjtBQUxWLE9BQVA7QUFPRDs7Ozs7O2tCQXU1QllxUixVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FqQkNyakNmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7Ozs7O0lBRU1tUCxTOzs7Ozs7O21DQUVnQnhKLFUsRUFBWTtBQUMxQixnQkFBSWhiLE1BQU1nYixVQUFWO0FBQ0EsZ0JBQUl3TCxhQUFheG1CLElBQUlvTyxVQUFyQjtBQUNBLGdCQUFJcVksTUFBTSxJQUFJbE4sVUFBSixDQUFlaU4sVUFBZixDQUFWO0FBQ0EsZ0JBQUlFLFVBQVUsQ0FBZDs7QUFFQSxpQkFBSyxJQUFJenpCLElBQUksQ0FBYixFQUFnQkEsSUFBSXV6QixVQUFwQixFQUFnQ3Z6QixHQUFoQyxFQUFxQztBQUNqQyxvQkFBSUEsS0FBSyxDQUFULEVBQVk7QUFDUjtBQUNBLHdCQUFJK00sSUFBSS9NLENBQUosTUFBVyxJQUFYLElBQW1CK00sSUFBSS9NLElBQUksQ0FBUixNQUFlLElBQWxDLElBQTBDK00sSUFBSS9NLElBQUksQ0FBUixNQUFlLElBQTdELEVBQW1FO0FBQy9EO0FBQ0g7QUFDSjtBQUNEd3pCLG9CQUFJQyxPQUFKLElBQWUxbUIsSUFBSS9NLENBQUosQ0FBZjtBQUNBeXpCO0FBQ0g7O0FBRUQsbUJBQU8sSUFBSW5OLFVBQUosQ0FBZWtOLElBQUk1SyxNQUFuQixFQUEyQixDQUEzQixFQUE4QjZLLE9BQTlCLENBQVA7QUFDSDs7O2lDQUVlMUwsVSxFQUFZO0FBQ3hCLGdCQUFJMkwsT0FBT25DLFVBQVVvQyxVQUFWLENBQXFCNUwsVUFBckIsQ0FBWDtBQUNBLGdCQUFJNkwsS0FBSyxJQUFJOUwsbUJBQUosQ0FBYzRMLElBQWQsQ0FBVDs7QUFFQUUsZUFBR0MsUUFBSDtBQUNBLGdCQUFJQyxjQUFjRixHQUFHQyxRQUFILEVBQWxCLENBTHdCLENBS1U7QUFDbENELGVBQUdDLFFBQUgsR0FOd0IsQ0FNUjtBQUNoQixnQkFBSUUsWUFBWUgsR0FBR0MsUUFBSCxFQUFoQixDQVB3QixDQU9RO0FBQ2hDRCxlQUFHcEssT0FBSCxHQVJ3QixDQVFUOztBQUVmLGdCQUFJdUksaUJBQWlCUixVQUFVeUMsZ0JBQVYsQ0FBMkJGLFdBQTNCLENBQXJCO0FBQ0EsZ0JBQUk5QixlQUFlVCxVQUFVMEMsY0FBVixDQUF5QkYsU0FBekIsQ0FBbkI7QUFDQSxnQkFBSUcsb0JBQW9CLENBQXhCO0FBQ0EsZ0JBQUkvQixnQkFBZ0IsR0FBcEI7QUFDQSxnQkFBSWdDLHNCQUFzQixDQUFDLENBQUQsRUFBSSxHQUFKLEVBQVMsR0FBVCxFQUFjLEdBQWQsQ0FBMUI7QUFDQSxnQkFBSWpDLFlBQVksQ0FBaEI7O0FBRUEsZ0JBQUk0QixnQkFBZ0IsR0FBaEIsSUFBdUJBLGdCQUFnQixHQUF2QyxJQUE4Q0EsZ0JBQWdCLEdBQTlELElBQ0FBLGdCQUFnQixHQURoQixJQUN1QkEsZ0JBQWdCLEVBRHZDLElBQzZDQSxnQkFBZ0IsRUFEN0QsSUFFQUEsZ0JBQWdCLEVBRmhCLElBRXNCQSxnQkFBZ0IsR0FGdEMsSUFFNkNBLGdCQUFnQixHQUY3RCxJQUdBQSxnQkFBZ0IsR0FIaEIsSUFHdUJBLGdCQUFnQixHQUgzQyxFQUdnRDs7QUFFNUNJLG9DQUFvQk4sR0FBR3BLLE9BQUgsRUFBcEI7QUFDQSxvQkFBSTBLLHNCQUFzQixDQUExQixFQUE2QjtBQUN6Qk4sdUJBQUd4SyxRQUFILENBQVksQ0FBWixFQUR5QixDQUNSO0FBQ3BCO0FBQ0Qsb0JBQUk4SyxxQkFBcUIsQ0FBekIsRUFBNEI7QUFDeEIvQixvQ0FBZ0JnQyxvQkFBb0JELGlCQUFwQixDQUFoQjtBQUNIOztBQUVEaEMsNEJBQVkwQixHQUFHcEssT0FBSCxLQUFlLENBQTNCLENBVjRDLENBVWI7QUFDL0JvSyxtQkFBR3BLLE9BQUgsR0FYNEMsQ0FXN0I7QUFDZm9LLG1CQUFHeEssUUFBSCxDQUFZLENBQVosRUFaNEMsQ0FZM0I7QUFDakIsb0JBQUl3SyxHQUFHUSxRQUFILEVBQUosRUFBbUI7QUFBRztBQUNsQix3QkFBSUMscUJBQXNCSCxzQkFBc0IsQ0FBdkIsR0FBNEIsQ0FBNUIsR0FBZ0MsRUFBekQ7QUFDQSx5QkFBSyxJQUFJbDBCLElBQUksQ0FBYixFQUFnQkEsSUFBSXEwQixrQkFBcEIsRUFBd0NyMEIsR0FBeEMsRUFBNkM7QUFDekMsNEJBQUk0ekIsR0FBR1EsUUFBSCxFQUFKLEVBQW1CO0FBQUc7QUFDbEIsZ0NBQUlwMEIsSUFBSSxDQUFSLEVBQVc7QUFDUHV4QiwwQ0FBVStDLGdCQUFWLENBQTJCVixFQUEzQixFQUErQixFQUEvQjtBQUNILDZCQUZELE1BRU87QUFDSHJDLDBDQUFVK0MsZ0JBQVYsQ0FBMkJWLEVBQTNCLEVBQStCLEVBQS9CO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7QUFDSjtBQUNEQSxlQUFHcEssT0FBSCxHQTlDd0IsQ0E4Q1Q7QUFDZixnQkFBSStLLHFCQUFxQlgsR0FBR3BLLE9BQUgsRUFBekI7QUFDQSxnQkFBSStLLHVCQUF1QixDQUEzQixFQUE4QjtBQUMxQlgsbUJBQUdwSyxPQUFILEdBRDBCLENBQ1g7QUFDbEIsYUFGRCxNQUVPLElBQUkrSyx1QkFBdUIsQ0FBM0IsRUFBOEI7QUFDakNYLG1CQUFHeEssUUFBSCxDQUFZLENBQVosRUFEaUMsQ0FDaEI7QUFDakJ3SyxtQkFBR1ksT0FBSCxHQUZpQyxDQUVsQjtBQUNmWixtQkFBR1ksT0FBSCxHQUhpQyxDQUdsQjtBQUNmLG9CQUFJQyx3Q0FBd0NiLEdBQUdwSyxPQUFILEVBQTVDO0FBQ0EscUJBQUssSUFBSXhwQixLQUFJLENBQWIsRUFBZ0JBLEtBQUl5MEIscUNBQXBCLEVBQTJEejBCLElBQTNELEVBQWdFO0FBQzVENHpCLHVCQUFHWSxPQUFILEdBRDRELENBQzdDO0FBQ2xCO0FBQ0o7QUFDRCxnQkFBSTVCLGFBQWFnQixHQUFHcEssT0FBSCxFQUFqQixDQTNEd0IsQ0EyRFE7QUFDaENvSyxlQUFHeEssUUFBSCxDQUFZLENBQVosRUE1RHdCLENBNERQOztBQUVqQixnQkFBSXNMLDBCQUEwQmQsR0FBR3BLLE9BQUgsRUFBOUI7QUFDQSxnQkFBSW1MLGlDQUFpQ2YsR0FBR3BLLE9BQUgsRUFBckM7O0FBRUEsZ0JBQUlvTCxzQkFBc0JoQixHQUFHeEssUUFBSCxDQUFZLENBQVosQ0FBMUI7QUFDQSxnQkFBSXdMLHdCQUF3QixDQUE1QixFQUErQjtBQUMzQmhCLG1CQUFHeEssUUFBSCxDQUFZLENBQVosRUFEMkIsQ0FDVjtBQUNwQjtBQUNEd0ssZUFBR3hLLFFBQUgsQ0FBWSxDQUFaLEVBckV3QixDQXFFUDs7QUFFakIsZ0JBQUl5TCx5QkFBeUIsQ0FBN0I7QUFDQSxnQkFBSUMsMEJBQTBCLENBQTlCO0FBQ0EsZ0JBQUlDLHdCQUF3QixDQUE1QjtBQUNBLGdCQUFJQywyQkFBMkIsQ0FBL0I7O0FBRUEsZ0JBQUlDLHNCQUFzQnJCLEdBQUdRLFFBQUgsRUFBMUI7QUFDQSxnQkFBSWEsbUJBQUosRUFBeUI7QUFDckJKLHlDQUF5QmpCLEdBQUdwSyxPQUFILEVBQXpCO0FBQ0FzTCwwQ0FBMEJsQixHQUFHcEssT0FBSCxFQUExQjtBQUNBdUwsd0NBQXdCbkIsR0FBR3BLLE9BQUgsRUFBeEI7QUFDQXdMLDJDQUEyQnBCLEdBQUdwSyxPQUFILEVBQTNCO0FBQ0g7O0FBRUQsZ0JBQUkwTCxZQUFZLENBQWhCO0FBQUEsZ0JBQW1CQyxhQUFhLENBQWhDO0FBQ0EsZ0JBQUkzakIsTUFBTSxDQUFWO0FBQUEsZ0JBQWE0akIsWUFBWSxJQUF6QjtBQUFBLGdCQUErQmhLLFVBQVUsQ0FBekM7QUFBQSxnQkFBNENDLFVBQVUsQ0FBdEQ7O0FBRUEsZ0JBQUlnSyw4QkFBOEJ6QixHQUFHUSxRQUFILEVBQWxDO0FBQ0EsZ0JBQUlpQiwyQkFBSixFQUFpQztBQUM3QixvQkFBSXpCLEdBQUdRLFFBQUgsRUFBSixFQUFtQjtBQUFHO0FBQ2xCLHdCQUFJa0IsbUJBQW1CMUIsR0FBR0MsUUFBSCxFQUF2QjtBQUNBLHdCQUFJMEIsY0FBYyxDQUFDLENBQUQsRUFBSSxFQUFKLEVBQVEsRUFBUixFQUFZLEVBQVosRUFBZ0IsRUFBaEIsRUFBb0IsRUFBcEIsRUFBd0IsRUFBeEIsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBaEMsRUFBb0MsRUFBcEMsRUFBd0MsRUFBeEMsRUFBNEMsRUFBNUMsRUFBZ0QsR0FBaEQsRUFBcUQsQ0FBckQsRUFBd0QsQ0FBeEQsRUFBMkQsQ0FBM0QsQ0FBbEI7QUFDQSx3QkFBSUMsY0FBYyxDQUFDLENBQUQsRUFBSSxFQUFKLEVBQVEsRUFBUixFQUFZLEVBQVosRUFBZ0IsRUFBaEIsRUFBb0IsRUFBcEIsRUFBd0IsRUFBeEIsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBaEMsRUFBb0MsRUFBcEMsRUFBd0MsRUFBeEMsRUFBNEMsRUFBNUMsRUFBaUQsRUFBakQsRUFBcUQsQ0FBckQsRUFBd0QsQ0FBeEQsRUFBMkQsQ0FBM0QsQ0FBbEI7O0FBRUEsd0JBQUlGLG1CQUFtQixDQUFuQixJQUF3QkEsbUJBQW1CLEVBQS9DLEVBQW1EO0FBQy9DSixvQ0FBWUssWUFBWUQsbUJBQW1CLENBQS9CLENBQVo7QUFDQUgscUNBQWFLLFlBQVlGLG1CQUFtQixDQUEvQixDQUFiO0FBQ0gscUJBSEQsTUFHTyxJQUFJQSxxQkFBcUIsR0FBekIsRUFBOEI7QUFDakNKLG9DQUFZdEIsR0FBR0MsUUFBSCxNQUFpQixDQUFqQixHQUFxQkQsR0FBR0MsUUFBSCxFQUFqQztBQUNBc0IscUNBQWF2QixHQUFHQyxRQUFILE1BQWlCLENBQWpCLEdBQXFCRCxHQUFHQyxRQUFILEVBQWxDO0FBQ0g7QUFDSjs7QUFFRCxvQkFBSUQsR0FBR1EsUUFBSCxFQUFKLEVBQW1CO0FBQUc7QUFDbEJSLHVCQUFHUSxRQUFILEdBRGUsQ0FDQztBQUNuQjtBQUNELG9CQUFJUixHQUFHUSxRQUFILEVBQUosRUFBbUI7QUFBRztBQUNsQlIsdUJBQUd4SyxRQUFILENBQVksQ0FBWixFQURlLENBQ0U7QUFDakIsd0JBQUl3SyxHQUFHUSxRQUFILEVBQUosRUFBbUI7QUFBRztBQUNsQlIsMkJBQUd4SyxRQUFILENBQVksRUFBWixFQURlLENBQ0c7QUFDckI7QUFDSjtBQUNELG9CQUFJd0ssR0FBR1EsUUFBSCxFQUFKLEVBQW1CO0FBQUc7QUFDbEJSLHVCQUFHcEssT0FBSCxHQURlLENBQ0E7QUFDZm9LLHVCQUFHcEssT0FBSCxHQUZlLENBRUE7QUFDbEI7QUFDRCxvQkFBSW9LLEdBQUdRLFFBQUgsRUFBSixFQUFtQjtBQUFHO0FBQ2xCLHdCQUFJcUIsb0JBQW9CN0IsR0FBR3hLLFFBQUgsQ0FBWSxFQUFaLENBQXhCO0FBQ0Esd0JBQUlzTSxhQUFhOUIsR0FBR3hLLFFBQUgsQ0FBWSxFQUFaLENBQWpCO0FBQ0FnTSxnQ0FBWXhCLEdBQUdRLFFBQUgsRUFBWixDQUhlLENBR2E7O0FBRTVCaEosOEJBQVVzSyxVQUFWO0FBQ0FySyw4QkFBVW9LLG9CQUFvQixDQUE5QjtBQUNBamtCLDBCQUFNNFosVUFBVUMsT0FBaEI7QUFDSDtBQUNKOztBQUVELGdCQUFJc0ssV0FBVyxDQUFmO0FBQ0EsZ0JBQUlULGNBQWMsQ0FBZCxJQUFtQkMsZUFBZSxDQUF0QyxFQUF5QztBQUNyQ1EsMkJBQVdULFlBQVlDLFVBQXZCO0FBQ0g7O0FBRUQsZ0JBQUlTLGNBQWMsQ0FBbEI7QUFBQSxnQkFBcUJDLGNBQWMsQ0FBbkM7QUFDQSxnQkFBSTNCLHNCQUFzQixDQUExQixFQUE2QjtBQUN6QjBCLDhCQUFjLENBQWQ7QUFDQUMsOEJBQWMsSUFBSWpCLG1CQUFsQjtBQUNILGFBSEQsTUFHTztBQUNILG9CQUFJa0IsU0FBVTVCLHNCQUFzQixDQUF2QixHQUE0QixDQUE1QixHQUFnQyxDQUE3QztBQUNBLG9CQUFJNkIsU0FBVTdCLHNCQUFzQixDQUF2QixHQUE0QixDQUE1QixHQUFnQyxDQUE3QztBQUNBMEIsOEJBQWNFLE1BQWQ7QUFDQUQsOEJBQWNFLFVBQVUsSUFBSW5CLG1CQUFkLENBQWQ7QUFDSDs7QUFFRCxnQkFBSW9CLGNBQWMsQ0FBQ3RCLDBCQUEwQixDQUEzQixJQUFnQyxFQUFsRDtBQUNBLGdCQUFJdUIsZUFBZSxDQUFDLElBQUlyQixtQkFBTCxLQUE2QixDQUFDRCxpQ0FBaUMsQ0FBbEMsSUFBdUMsRUFBcEUsQ0FBbkI7O0FBRUFxQiwyQkFBZSxDQUFDbkIseUJBQXlCQyx1QkFBMUIsSUFBcURjLFdBQXBFO0FBQ0FLLDRCQUFnQixDQUFDbEIsd0JBQXdCQyx3QkFBekIsSUFBcURhLFdBQXJFOztBQUVBLGdCQUFJSyxnQkFBZ0J2MEIsS0FBS3cwQixJQUFMLENBQVVILGNBQWNMLFFBQXhCLENBQXBCOztBQUVBL0IsZUFBR2xrQixPQUFIO0FBQ0Fra0IsaUJBQUssSUFBTDs7QUFFQSxtQkFBTztBQUNIN0IsZ0NBQWdCQSxjQURiLEVBQzhCO0FBQ2pDQyw4QkFBY0EsWUFGWCxFQUUwQjtBQUM3QkUsMkJBQVdBLFNBSFIsRUFHb0I7QUFDdkJVLDRCQUFZQSxVQUpUO0FBS0hULCtCQUFlQSxhQUxaLEVBSzRCO0FBQy9CVSxzQ0FBc0J0QixVQUFVNkUscUJBQVYsQ0FBZ0NqRSxhQUFoQyxDQU5uQjs7QUFRSEksNEJBQVk7QUFDUnBILDJCQUFPaUssU0FEQztBQUVSNWpCLHlCQUFLQSxHQUZHO0FBR1I2Wiw2QkFBU0EsT0FIRDtBQUlSRCw2QkFBU0E7QUFKRCxpQkFSVDs7QUFlSGlILDJCQUFXO0FBQ1AvZ0IsMkJBQU80akIsU0FEQTtBQUVQM2pCLDRCQUFRNGpCO0FBRkQsaUJBZlI7O0FBb0JIekQsNEJBQVk7QUFDUnBnQiwyQkFBTzBrQixXQURDO0FBRVJ6a0IsNEJBQVEwa0I7QUFGQSxpQkFwQlQ7O0FBeUJIcEUsOEJBQWM7QUFDVnZnQiwyQkFBTzRrQixhQURHO0FBRVYza0IsNEJBQVEwa0I7QUFGRTtBQXpCWCxhQUFQO0FBOEJIOzs7eUNBRXVCckMsRSxFQUFJeUMsSyxFQUFPO0FBQy9CLGdCQUFJQyxhQUFhLENBQWpCO0FBQUEsZ0JBQW9CQyxhQUFhLENBQWpDO0FBQ0EsZ0JBQUlDLGNBQWMsQ0FBbEI7QUFDQSxpQkFBSyxJQUFJeDJCLElBQUksQ0FBYixFQUFnQkEsSUFBSXEyQixLQUFwQixFQUEyQnIyQixHQUEzQixFQUFnQztBQUM1QixvQkFBSXUyQixlQUFlLENBQW5CLEVBQXNCO0FBQ2xCQyxrQ0FBYzVDLEdBQUdZLE9BQUgsRUFBZDtBQUNBK0IsaUNBQWEsQ0FBQ0QsYUFBYUUsV0FBYixHQUEyQixHQUE1QixJQUFtQyxHQUFoRDtBQUNIO0FBQ0RGLDZCQUFjQyxlQUFlLENBQWhCLEdBQXFCRCxVQUFyQixHQUFrQ0MsVUFBL0M7QUFDSDtBQUNKOzs7eUNBRXVCekMsVyxFQUFhO0FBQ2pDLG9CQUFRQSxXQUFSO0FBQ0kscUJBQUssRUFBTDtBQUNJLDJCQUFPLFVBQVA7QUFDSixxQkFBSyxFQUFMO0FBQ0ksMkJBQU8sTUFBUDtBQUNKLHFCQUFLLEVBQUw7QUFDSSwyQkFBTyxVQUFQO0FBQ0oscUJBQUssR0FBTDtBQUNJLDJCQUFPLE1BQVA7QUFDSixxQkFBSyxHQUFMO0FBQ0ksMkJBQU8sUUFBUDtBQUNKLHFCQUFLLEdBQUw7QUFDSSwyQkFBTyxTQUFQO0FBQ0oscUJBQUssR0FBTDtBQUNJLDJCQUFPLFNBQVA7QUFDSjtBQUNJLDJCQUFPLFNBQVA7QUFoQlI7QUFrQkg7Ozt1Q0FFcUJDLFMsRUFBVztBQUM3QixtQkFBTyxDQUFDQSxZQUFZLEVBQWIsRUFBaUIwQyxPQUFqQixDQUF5QixDQUF6QixDQUFQO0FBQ0g7Ozs4Q0FFNEJDLE0sRUFBUTtBQUNqQyxvQkFBUUEsTUFBUjtBQUNJLHFCQUFLLEdBQUw7QUFDSSwyQkFBTyxPQUFQO0FBQ0oscUJBQUssR0FBTDtBQUNJLDJCQUFPLE9BQVA7QUFDSixxQkFBSyxHQUFMO0FBQ0ksMkJBQU8sT0FBUDtBQUNKO0FBQ0ksMkJBQU8sU0FBUDtBQVJSO0FBVUg7Ozs7OztrQkFJVW5GLFM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OFFDeFJmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7QUFFQTtBQUNBaE4sbUJBQVNDLE9BQVQ7O0FBR0E7QUFDQSxTQUFTbVMsWUFBVCxDQUFzQjNhLGVBQXRCLEVBQXVDNGEsY0FBdkMsRUFBdUQ7QUFDbkQsUUFBSXBVLE1BQU14RyxlQUFWO0FBQ0EsUUFBSXdHLE9BQU8sSUFBUCxJQUFlLFFBQU9BLEdBQVAseUNBQU9BLEdBQVAsT0FBZSxRQUFsQyxFQUE0QztBQUN4QyxjQUFNLElBQUlzRyxtQ0FBSixDQUE2QiwrQ0FBN0IsQ0FBTjtBQUNIOztBQUVELFFBQUksQ0FBQ3RHLElBQUluSCxjQUFKLENBQW1CLE1BQW5CLENBQUwsRUFBaUM7QUFDN0IsY0FBTSxJQUFJeU4sbUNBQUosQ0FBNkIsa0VBQTdCLENBQU47QUFDSDs7QUFFRCxZQUFRdEcsSUFBSWptQixJQUFaO0FBQ0ksYUFBSyxLQUFMO0FBQ0ksbUJBQU8sSUFBSXM2QixtQkFBSixDQUFjclUsR0FBZCxFQUFtQm9VLGNBQW5CLENBQVA7QUFDSjtBQUNJLG1CQUFPLElBQUlFLHNCQUFKLENBQWlCdFUsR0FBakIsRUFBc0JvVSxjQUF0QixDQUFQO0FBSlI7QUFNSDs7QUFHRDtBQUNBLFNBQVNHLFdBQVQsR0FBdUI7QUFDbkIsV0FBTzNuQixtQkFBU29CLHNCQUFULEVBQVA7QUFDSDs7QUFFRCxTQUFTd21CLGNBQVQsR0FBMEI7QUFDdEIsV0FBTzVuQixtQkFBUzRuQixjQUFULEVBQVA7QUFDSDs7QUFHRDtBQUNBLElBQUlDLFFBQVEsRUFBWjs7QUFFQUEsTUFBTU4sWUFBTixHQUFxQkEsWUFBckI7QUFDQU0sTUFBTUYsV0FBTixHQUFvQkEsV0FBcEI7QUFDQUUsTUFBTUQsY0FBTixHQUF1QkEsY0FBdkI7O0FBRUFDLE1BQU1DLE1BQU4sR0FBZUMsc0JBQWY7QUFDQUYsTUFBTUcsVUFBTixHQUFtQkEsd0JBQW5CO0FBQ0FILE1BQU1JLFlBQU4sR0FBcUJBLDBCQUFyQjs7QUFFQUosTUFBTUosU0FBTixHQUFrQkEsbUJBQWxCO0FBQ0FJLE1BQU1ILFlBQU4sR0FBcUJBLHNCQUFyQjtBQUNBRyxNQUFNdGEsY0FBTixHQUF1QkEsd0JBQXZCOztBQUVBL2YsT0FBTzA2QixjQUFQLENBQXNCTCxLQUF0QixFQUE2QixTQUE3QixFQUF3QztBQUNwQ00sZ0JBQVksSUFEd0I7QUFFcENDLFNBQUssZUFBWTtBQUNiO0FBQ0EsZUFBTyxhQUFQO0FBQ0g7QUFMbUMsQ0FBeEM7O2tCQVFlUCxLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcEVmOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7Ozs7K2VBckJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7OztJQU1NUSxpQjs7Ozs7c0NBRW1CO0FBQ2pCLGdCQUFJO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQUlDLGlCQUFpQnZlLGtCQUFRd2UsTUFBUixJQUFrQnhlLGtCQUFRdE8sT0FBUixDQUFnQitzQixLQUFoQixJQUF5QixLQUFoRTtBQUNBLG9CQUFJQyx3QkFBd0IxZSxrQkFBUXdlLE1BQVIsR0FBaUJELGNBQWpCLEdBQWtDLElBQTlEO0FBQ0EsdUJBQVFyNUIsS0FBS3k1QixLQUFMLElBQWN6NUIsS0FBSzA1QixjQUFuQixJQUFxQ0YscUJBQTdDO0FBQ0gsYUFQRCxDQU9FLE9BQU90M0IsQ0FBUCxFQUFVO0FBQ1IsdUJBQU8sS0FBUDtBQUNIO0FBQ0o7OztBQUVELCtCQUFZeTNCLFdBQVosRUFBeUI3aUIsTUFBekIsRUFBaUM7QUFBQTs7QUFBQSwwSUFDdkIscUJBRHVCOztBQUU3QixjQUFLQyxHQUFMLEdBQVcsbUJBQVg7O0FBRUEsY0FBSzZpQixZQUFMLEdBQW9CRCxXQUFwQjtBQUNBLGNBQUszaUIsT0FBTCxHQUFlRixNQUFmO0FBQ0EsY0FBSytpQixVQUFMLEdBQWtCLElBQWxCOztBQUVBLGNBQUtDLGFBQUwsR0FBcUIsS0FBckI7QUFDQSxjQUFLQyxjQUFMLEdBQXNCLElBQXRCO0FBQ0EsY0FBS0MsZUFBTCxHQUF1QixDQUF2QjtBQVY2QjtBQVdoQzs7OztrQ0FFUztBQUNOLGdCQUFJLEtBQUtqWCxTQUFMLEVBQUosRUFBc0I7QUFDbEIscUJBQUt4SCxLQUFMO0FBQ0g7QUFDRDtBQUNIOzs7NkJBRUl3RyxVLEVBQVkxRixLLEVBQU87QUFBQTs7QUFDcEIsaUJBQUs0ZCxXQUFMLEdBQW1CbFksVUFBbkI7QUFDQSxpQkFBS21ZLE1BQUwsR0FBYzdkLEtBQWQ7O0FBRUEsZ0JBQUk4ZCxZQUFZcFksV0FBV3JCLEdBQTNCO0FBQ0EsZ0JBQUksS0FBSzFKLE9BQUwsQ0FBYW5HLGtCQUFiLElBQW1Da1IsV0FBV21ELGFBQVgsSUFBNEJ4bEIsU0FBbkUsRUFBOEU7QUFDMUV5NkIsNEJBQVlwWSxXQUFXbUQsYUFBdkI7QUFDSDs7QUFFRCxnQkFBSWtWLGFBQWEsS0FBS1IsWUFBTCxDQUFrQnBiLFNBQWxCLENBQTRCMmIsU0FBNUIsRUFBdUM5ZCxLQUF2QyxDQUFqQjs7QUFFQSxnQkFBSWdlLFVBQVUsSUFBSXI2QixLQUFLczZCLE9BQVQsRUFBZDs7QUFFQSxnQkFBSSxRQUFPRixXQUFXQyxPQUFsQixNQUE4QixRQUFsQyxFQUE0QztBQUN4QyxvQkFBSUUsZ0JBQWdCSCxXQUFXQyxPQUEvQjtBQUNBLHFCQUFLLElBQUl6dkIsR0FBVCxJQUFnQjJ2QixhQUFoQixFQUErQjtBQUMzQix3QkFBSUEsY0FBY3ZkLGNBQWQsQ0FBNkJwUyxHQUE3QixDQUFKLEVBQXVDO0FBQ25DeXZCLGdDQUFRRyxNQUFSLENBQWU1dkIsR0FBZixFQUFvQjJ2QixjQUFjM3ZCLEdBQWQsQ0FBcEI7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsZ0JBQUk2dkIsU0FBUztBQUNUQyx3QkFBUSxLQURDO0FBRVRMLHlCQUFTQSxPQUZBO0FBR1RNLHNCQUFNLE1BSEc7QUFJVHJ0Qix1QkFBTyxTQUpFO0FBS1Q7QUFDQTtBQUNBNFQsZ0NBQWdCO0FBUFAsYUFBYjs7QUFVQTtBQUNBLGdCQUFJYSxXQUFXcEIsSUFBWCxLQUFvQixLQUF4QixFQUErQjtBQUMzQjtBQUNBOFosdUJBQU9FLElBQVAsR0FBYyxhQUFkO0FBQ0g7O0FBRUQ7QUFDQSxnQkFBSTVZLFdBQVduQixlQUFmLEVBQWdDO0FBQzVCNlosdUJBQU9HLFdBQVAsR0FBcUIsU0FBckI7QUFDSDs7QUFFRDtBQUNBLGdCQUFJN1ksV0FBV2IsY0FBZixFQUErQjtBQUMzQnVaLHVCQUFPdlosY0FBUCxHQUF3QmEsV0FBV2IsY0FBbkM7QUFDSDs7QUFFRCxpQkFBSzJaLE9BQUwsR0FBZUMscUJBQWFDLFdBQTVCO0FBQ0EvNkIsaUJBQUt5NUIsS0FBTCxDQUFXVyxXQUFXMVosR0FBdEIsRUFBMkIrWixNQUEzQixFQUFtQ3Q0QixJQUFuQyxDQUF3QyxVQUFDNjRCLEdBQUQsRUFBUztBQUM3QyxvQkFBSSxPQUFLbEIsYUFBVCxFQUF3QjtBQUNwQiwyQkFBS0EsYUFBTCxHQUFxQixLQUFyQjtBQUNBLDJCQUFLZSxPQUFMLEdBQWVDLHFCQUFhRyxLQUE1QjtBQUNBO0FBQ0g7QUFDRCxvQkFBSUQsSUFBSUUsRUFBSixJQUFXRixJQUFJRyxNQUFKLElBQWMsR0FBZCxJQUFxQkgsSUFBSUcsTUFBSixJQUFjLEdBQWxELEVBQXdEO0FBQ3BELHdCQUFJSCxJQUFJdGEsR0FBSixLQUFZMFosV0FBVzFaLEdBQTNCLEVBQWdDO0FBQzVCLDRCQUFJLE9BQUswYSxjQUFULEVBQXlCO0FBQ3JCLGdDQUFJbFcsZ0JBQWdCLE9BQUswVSxZQUFMLENBQWtCeUIsbUJBQWxCLENBQXNDTCxJQUFJdGEsR0FBMUMsQ0FBcEI7QUFDQSxtQ0FBSzBhLGNBQUwsQ0FBb0JsVyxhQUFwQjtBQUNIO0FBQ0o7O0FBRUQsd0JBQUlvVyxlQUFlTixJQUFJWCxPQUFKLENBQVlsQixHQUFaLENBQWdCLGdCQUFoQixDQUFuQjtBQUNBLHdCQUFJbUMsZ0JBQWdCLElBQXBCLEVBQTBCO0FBQ3RCLCtCQUFLdkIsY0FBTCxHQUFzQndCLFNBQVNELFlBQVQsQ0FBdEI7QUFDQSw0QkFBSSxPQUFLdkIsY0FBTCxLQUF3QixDQUE1QixFQUErQjtBQUMzQixnQ0FBSSxPQUFLeUIscUJBQVQsRUFBZ0M7QUFDNUIsdUNBQUtBLHFCQUFMLENBQTJCLE9BQUt6QixjQUFoQztBQUNIO0FBQ0o7QUFDSjs7QUFFRCwyQkFBTyxPQUFLMEIsS0FBTCxDQUFXLzhCLElBQVgsQ0FBZ0IsTUFBaEIsRUFBc0JzOEIsSUFBSVUsSUFBSixDQUFTQyxTQUFULEVBQXRCLENBQVA7QUFDSCxpQkFuQkQsTUFtQk87QUFDSCwyQkFBS2QsT0FBTCxHQUFlQyxxQkFBYWMsTUFBNUI7QUFDQSx3QkFBSSxPQUFLclEsUUFBVCxFQUFtQjtBQUNmLCtCQUFLQSxRQUFMLENBQWNzUSxxQkFBYUMsd0JBQTNCLEVBQXFELEVBQUNwaEIsTUFBTXNnQixJQUFJRyxNQUFYLEVBQW1CeGdCLEtBQUtxZ0IsSUFBSWUsVUFBNUIsRUFBckQ7QUFDSCxxQkFGRCxNQUVPO0FBQ0gsOEJBQU0sSUFBSUMsMkJBQUosQ0FBcUIsMkNBQTJDaEIsSUFBSUcsTUFBL0MsR0FBd0QsR0FBeEQsR0FBOERILElBQUllLFVBQXZGLENBQU47QUFDSDtBQUNKO0FBQ0osYUFqQ0QsRUFpQ0duMEIsS0FqQ0gsQ0FpQ1MsVUFBQzFGLENBQUQsRUFBTztBQUNaLHVCQUFLMjRCLE9BQUwsR0FBZUMscUJBQWFjLE1BQTVCO0FBQ0Esb0JBQUksT0FBS3JRLFFBQVQsRUFBbUI7QUFDZiwyQkFBS0EsUUFBTCxDQUFjc1EscUJBQWFJLFNBQTNCLEVBQXNDLEVBQUN2aEIsTUFBTSxDQUFDLENBQVIsRUFBV0MsS0FBS3pZLEVBQUUwWCxPQUFsQixFQUF0QztBQUNILGlCQUZELE1BRU87QUFDSCwwQkFBTTFYLENBQU47QUFDSDtBQUNKLGFBeENEO0FBeUNIOzs7Z0NBRU87QUFDSixpQkFBSzQzQixhQUFMLEdBQXFCLElBQXJCO0FBQ0g7Ozs4QkFFS29DLE0sRUFBUTtBQUFBOztBQUFHO0FBQ2IsbUJBQU9BLE9BQU9DLElBQVAsR0FBY2g2QixJQUFkLENBQW1CLFVBQUN1b0IsTUFBRCxFQUFZO0FBQ2xDLG9CQUFJQSxPQUFPMFIsSUFBWCxFQUFpQjtBQUNiLDJCQUFLdkIsT0FBTCxHQUFlQyxxQkFBYXVCLFNBQTVCO0FBQ0Esd0JBQUksT0FBS0MsV0FBVCxFQUFzQjtBQUNsQiwrQkFBS0EsV0FBTCxDQUFpQixPQUFLcEMsTUFBTCxDQUFZcUMsSUFBN0IsRUFBbUMsT0FBS3JDLE1BQUwsQ0FBWXFDLElBQVosR0FBbUIsT0FBS3ZDLGVBQXhCLEdBQTBDLENBQTdFO0FBQ0g7QUFDSixpQkFMRCxNQUtPO0FBQ0gsd0JBQUksT0FBS0YsYUFBTCxLQUF1QixJQUEzQixFQUFpQztBQUM3QiwrQkFBS0EsYUFBTCxHQUFxQixLQUFyQjtBQUNBLCtCQUFLZSxPQUFMLEdBQWVDLHFCQUFhdUIsU0FBNUI7QUFDQSwrQkFBT0gsT0FBT00sTUFBUCxFQUFQO0FBQ0g7O0FBRUQsMkJBQUszQixPQUFMLEdBQWVDLHFCQUFhMkIsVUFBNUI7O0FBRUEsd0JBQUkxTyxRQUFRckQsT0FBT3RtQixLQUFQLENBQWFtbUIsTUFBekI7QUFDQSx3QkFBSTVHLFlBQVksT0FBS3VXLE1BQUwsQ0FBWXFDLElBQVosR0FBbUIsT0FBS3ZDLGVBQXhDO0FBQ0EsMkJBQUtBLGVBQUwsSUFBd0JqTSxNQUFNalIsVUFBOUI7O0FBRUEsd0JBQUksT0FBSzRmLGNBQVQsRUFBeUI7QUFDckIsK0JBQUtBLGNBQUwsQ0FBb0IzTyxLQUFwQixFQUEyQnBLLFNBQTNCLEVBQXNDLE9BQUtxVyxlQUEzQztBQUNIOztBQUVELDJCQUFLeUIsS0FBTCxDQUFXUyxNQUFYO0FBQ0g7QUFDSixhQXpCTSxFQXlCSnQwQixLQXpCSSxDQXlCRSxVQUFDMUYsQ0FBRCxFQUFPO0FBQ1osb0JBQUlBLEVBQUV3WSxJQUFGLEtBQVcsRUFBWCxJQUFpQkksa0JBQVF3ZSxNQUE3QixFQUFxQztBQUFHO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0g7O0FBRUQsdUJBQUt1QixPQUFMLEdBQWVDLHFCQUFhYyxNQUE1QjtBQUNBLG9CQUFJMTlCLE9BQU8sQ0FBWDtBQUNBLG9CQUFJZ2YsT0FBTyxJQUFYOztBQUVBLG9CQUFJLENBQUNoYixFQUFFd1ksSUFBRixLQUFXLEVBQVgsSUFBaUJ4WSxFQUFFMFgsT0FBRixLQUFjLGVBQWhDLE9BQW9EO0FBQ25ELHVCQUFLbWdCLGNBQUwsS0FBd0IsSUFBeEIsSUFDQSxPQUFLQSxjQUFMLEtBQXdCLElBQXhCLElBQWdDLE9BQUtDLGVBQUwsR0FBdUIsT0FBS0QsY0FGN0QsQ0FBSixFQUVtRjtBQUMvRTc3QiwyQkFBTzI5QixxQkFBYWMsU0FBcEI7QUFDQXpmLDJCQUFPLEVBQUN4QyxNQUFNeFksRUFBRXdZLElBQVQsRUFBZUMsS0FBSyw2QkFBcEIsRUFBUDtBQUNILGlCQUxELE1BS087QUFDSHpjLDJCQUFPMjlCLHFCQUFhSSxTQUFwQjtBQUNBL2UsMkJBQU8sRUFBQ3hDLE1BQU14WSxFQUFFd1ksSUFBVCxFQUFlQyxLQUFLelksRUFBRTBYLE9BQXRCLEVBQVA7QUFDSDs7QUFFRCxvQkFBSSxPQUFLMlIsUUFBVCxFQUFtQjtBQUNmLDJCQUFLQSxRQUFMLENBQWNydEIsSUFBZCxFQUFvQmdmLElBQXBCO0FBQ0gsaUJBRkQsTUFFTztBQUNILDBCQUFNLElBQUk4ZSwyQkFBSixDQUFxQjllLEtBQUt2QyxHQUExQixDQUFOO0FBQ0g7QUFDSixhQXBETSxDQUFQO0FBcURIOzs7O0VBekwyQmlpQixrQjs7a0JBNkxqQnhELGlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FqQkMxTmY7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUE7Ozs7Ozs7Ozs7QUFVQTtJQUNNam9CLFk7QUFFRiwwQkFBWTRRLFVBQVosRUFBd0JqTCxNQUF4QixFQUFnQ2lPLFNBQWhDLEVBQTJDO0FBQUE7O0FBQ3ZDLGFBQUtoTyxHQUFMLEdBQVcsY0FBWDs7QUFFQSxhQUFLQyxPQUFMLEdBQWVGLE1BQWY7QUFDQSxhQUFLK2xCLFVBQUwsR0FBa0I5WCxTQUFsQjs7QUFFQSxhQUFLK1gsaUJBQUwsR0FBeUIsT0FBTyxHQUFoQyxDQU51QyxDQU1EO0FBQ3RDLFlBQUlobUIsT0FBT2pILGdCQUFQLElBQTJCblEsU0FBM0IsSUFBd0NvWCxPQUFPakgsZ0JBQVAsR0FBMEIsQ0FBdEUsRUFBeUU7QUFDckU7QUFDQSxpQkFBS2l0QixpQkFBTCxHQUF5QmhtQixPQUFPakgsZ0JBQWhDO0FBQ0g7O0FBRUQsYUFBS2t0QixVQUFMLEdBQWtCLENBQWxCO0FBQ0EsYUFBS0MsVUFBTCxHQUFrQixLQUFLRixpQkFBdkI7QUFDQSxhQUFLRyxXQUFMLEdBQW1CLE9BQU8sSUFBUCxHQUFjLENBQWpDLENBZHVDLENBY0Y7QUFDckMsYUFBS0MsWUFBTCxHQUFvQixJQUFJaFcsV0FBSixDQUFnQixLQUFLK1YsV0FBckIsQ0FBcEI7QUFDQSxhQUFLRSxlQUFMLEdBQXVCLENBQXZCO0FBQ0EsYUFBS0MsWUFBTCxHQUFvQixJQUFwQjtBQUNBLFlBQUl0bUIsT0FBT2xILGlCQUFQLEtBQTZCLEtBQWpDLEVBQXdDO0FBQ3BDLGlCQUFLd3RCLFlBQUwsR0FBb0IsS0FBcEI7QUFDSDs7QUFFRCxhQUFLQyxPQUFMLEdBQWUsSUFBZjtBQUNBLGFBQUtDLFlBQUwsR0FBb0IsSUFBcEI7QUFDQSxhQUFLMUQsWUFBTCxHQUFvQixJQUFwQjs7QUFFQSxhQUFLSyxXQUFMLEdBQW1CbFksVUFBbkI7QUFDQSxhQUFLd2IsZUFBTCxHQUF1QixpQkFBaUJDLElBQWpCLENBQXNCemIsV0FBV3JCLEdBQWpDLENBQXZCO0FBQ0EsYUFBSytjLGVBQUwsR0FBdUIxYixXQUFXdEIsUUFBWCxHQUFzQnNCLFdBQVd0QixRQUFqQyxHQUE0QyxJQUFuRTtBQUNBLGFBQUtpZCxZQUFMLEdBQW9CLEtBQUtELGVBQXpCO0FBQ0EsYUFBS0UsZ0JBQUwsR0FBd0IsS0FBeEI7QUFDQSxhQUFLQyxhQUFMLEdBQXFCLElBQXJCO0FBQ0EsYUFBS0MsY0FBTCxHQUFzQixJQUF0Qjs7QUFFQSxhQUFLQyxnQkFBTCxHQUF3QixDQUF4QjtBQUNBLGFBQUtDLGFBQUwsR0FBcUIsSUFBSUMsc0JBQUosRUFBckI7QUFDQSxhQUFLQyxtQkFBTCxHQUEyQixDQUFDLEVBQUQsRUFBSyxHQUFMLEVBQVUsR0FBVixFQUFlLEdBQWYsRUFBb0IsR0FBcEIsRUFBeUIsR0FBekIsRUFBOEIsSUFBOUIsRUFBb0MsSUFBcEMsRUFBMEMsSUFBMUMsRUFBZ0QsSUFBaEQsRUFBc0QsSUFBdEQsQ0FBM0I7O0FBRUEsYUFBS0MsdUJBQUwsR0FBK0IsS0FBL0I7O0FBRUEsYUFBS0MsT0FBTCxHQUFlLEtBQWY7QUFDQSxhQUFLQyxXQUFMLEdBQW1CLENBQW5COztBQUVBLGFBQUsxQixjQUFMLEdBQXNCLElBQXRCO0FBQ0EsYUFBSzJCLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxhQUFLOVMsUUFBTCxHQUFnQixJQUFoQjtBQUNBLGFBQUsrUSxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsYUFBS2dDLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxhQUFLN2Usb0JBQUwsR0FBNEIsSUFBNUI7O0FBRUEsYUFBSzhlLGtCQUFMO0FBQ0EsYUFBS0MsYUFBTDtBQUNBLGFBQUtDLGFBQUw7QUFDSDs7OztrQ0FFUztBQUNOLGdCQUFJLEtBQUtwQixPQUFMLENBQWF0YSxTQUFiLEVBQUosRUFBOEI7QUFDMUIscUJBQUtzYSxPQUFMLENBQWE5aEIsS0FBYjtBQUNIO0FBQ0QsaUJBQUs4aEIsT0FBTCxDQUFhaHNCLE9BQWI7QUFDQSxpQkFBS2dzQixPQUFMLEdBQWUsSUFBZjtBQUNBLGlCQUFLQyxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsaUJBQUtyRCxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsaUJBQUtpRCxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsaUJBQUtILFVBQUwsR0FBa0IsS0FBS0MsVUFBTCxHQUFrQixLQUFLQyxXQUFMLEdBQW1CLEtBQUtFLGVBQUwsR0FBdUIsQ0FBOUU7QUFDQSxpQkFBS1MsYUFBTCxHQUFxQixJQUFyQjtBQUNBLGlCQUFLRyxhQUFMLEdBQXFCLElBQXJCOztBQUVBLGlCQUFLRyx1QkFBTCxHQUErQixLQUEvQjs7QUFFQSxpQkFBS3hCLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxpQkFBSzJCLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxpQkFBSzlTLFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSxpQkFBSytRLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxpQkFBS2dDLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxpQkFBSzdlLG9CQUFMLEdBQTRCLElBQTVCOztBQUVBLGlCQUFLb2QsVUFBTCxHQUFrQixJQUFsQjtBQUNIOzs7b0NBRVc7QUFDUixtQkFBTyxLQUFLUSxPQUFMLElBQWdCLEtBQUtBLE9BQUwsQ0FBYXRhLFNBQWIsRUFBaEIsSUFBNEMsQ0FBQyxLQUFLb2IsT0FBekQ7QUFDSDs7O21DQUVVO0FBQ1AsbUJBQU8sS0FBS0EsT0FBWjtBQUNIOzs7NkNBeUZvQjtBQUNqQixnQkFBSXJuQixTQUFTLEtBQUtFLE9BQWxCOztBQUVBLGdCQUFJRixPQUFPdEcsUUFBUCxLQUFvQixPQUF4QixFQUFpQztBQUM3QixxQkFBS29wQixZQUFMLEdBQW9CLElBQUk4RSwwQkFBSixDQUFxQixLQUFLMW5CLE9BQUwsQ0FBYXJHLGtCQUFsQyxDQUFwQjtBQUNILGFBRkQsTUFFTyxJQUFJbUcsT0FBT3RHLFFBQVAsS0FBb0IsT0FBeEIsRUFBaUM7QUFDcEMsb0JBQUltdUIsYUFBYTduQixPQUFPckcsY0FBUCxJQUF5QixRQUExQztBQUNBLG9CQUFJbXVCLFdBQVc5bkIsT0FBT3BHLFlBQVAsSUFBdUIsTUFBdEM7O0FBRUEscUJBQUtrcEIsWUFBTCxHQUFvQixJQUFJaUYsMEJBQUosQ0FBcUJGLFVBQXJCLEVBQWlDQyxRQUFqQyxDQUFwQjtBQUNILGFBTE0sTUFLQSxJQUFJOW5CLE9BQU90RyxRQUFQLEtBQW9CLFFBQXhCLEVBQWtDO0FBQ3JDLG9CQUFJLE9BQU9zRyxPQUFPbEcsaUJBQWQsS0FBb0MsVUFBeEMsRUFBb0Q7QUFDaEQsMEJBQU0sSUFBSTZaLG1DQUFKLENBQTZCLG9FQUE3QixDQUFOO0FBQ0g7QUFDRCxxQkFBS21QLFlBQUwsR0FBb0IsSUFBSTlpQixPQUFPbEcsaUJBQVgsRUFBcEI7QUFDSCxhQUxNLE1BS0E7QUFDSCxzQkFBTSxJQUFJNlosbUNBQUosa0NBQTREM1QsT0FBT3RHLFFBQW5FLENBQU47QUFDSDtBQUNKOzs7d0NBRWU7QUFDWixnQkFBSSxLQUFLK3NCLGVBQVQsRUFBMEI7QUFDdEIscUJBQUtELFlBQUwsR0FBb0J3Qix5QkFBcEI7QUFDSCxhQUZELE1BRU8sSUFBSTFGLDRCQUFrQlYsV0FBbEIsRUFBSixFQUFxQztBQUN4QyxxQkFBSzRFLFlBQUwsR0FBb0JsRSwyQkFBcEI7QUFDSCxhQUZNLE1BRUEsSUFBSTJGLDhCQUFpQnJHLFdBQWpCLEVBQUosRUFBb0M7QUFDdkMscUJBQUs0RSxZQUFMLEdBQW9CeUIsNkJBQXBCO0FBQ0gsYUFGTSxNQUVBLElBQUlDLHlCQUFZdEcsV0FBWixFQUFKLEVBQStCO0FBQ2xDLHFCQUFLNEUsWUFBTCxHQUFvQjBCLHdCQUFwQjtBQUNILGFBRk0sTUFFQTtBQUNILHNCQUFNLElBQUloRCwyQkFBSixDQUFxQixrRUFBckIsQ0FBTjtBQUNIO0FBQ0o7Ozt3Q0FFZTtBQUNaLGlCQUFLcUIsT0FBTCxHQUFlLElBQUksS0FBS0MsWUFBVCxDQUFzQixLQUFLMUQsWUFBM0IsRUFBeUMsS0FBSzVpQixPQUE5QyxDQUFmO0FBQ0EsZ0JBQUksS0FBS3FtQixPQUFMLENBQWE0QixlQUFiLEtBQWlDLEtBQXJDLEVBQTRDO0FBQ3hDLHFCQUFLN0IsWUFBTCxHQUFvQixLQUFwQjtBQUNIO0FBQ0QsaUJBQUtDLE9BQUwsQ0FBYTZCLG9CQUFiLEdBQW9DLEtBQUsxRCxxQkFBTCxDQUEyQmxrQixJQUEzQixDQUFnQyxJQUFoQyxDQUFwQztBQUNBLGlCQUFLK2xCLE9BQUwsQ0FBYThCLGFBQWIsR0FBNkIsS0FBSy9ELGNBQUwsQ0FBb0I5akIsSUFBcEIsQ0FBeUIsSUFBekIsQ0FBN0I7QUFDQSxpQkFBSytsQixPQUFMLENBQWExYSxhQUFiLEdBQTZCLEtBQUt5YyxxQkFBTCxDQUEyQjluQixJQUEzQixDQUFnQyxJQUFoQyxDQUE3QjtBQUNBLGlCQUFLK2xCLE9BQUwsQ0FBYWpiLFVBQWIsR0FBMEIsS0FBS2lkLGlCQUFMLENBQXVCL25CLElBQXZCLENBQTRCLElBQTVCLENBQTFCO0FBQ0EsaUJBQUsrbEIsT0FBTCxDQUFhcmIsT0FBYixHQUF1QixLQUFLc2QsY0FBTCxDQUFvQmhvQixJQUFwQixDQUF5QixJQUF6QixDQUF2QjtBQUNIOzs7NkJBRUl3SyxZLEVBQWM7QUFDZixpQkFBSzhiLGFBQUwsR0FBcUIsRUFBQ3JCLE1BQU0sQ0FBUCxFQUFVZ0QsSUFBSSxDQUFDLENBQWYsRUFBckI7QUFDQSxnQkFBSXpkLFlBQUosRUFBa0I7QUFDZCxxQkFBSzhiLGFBQUwsQ0FBbUJyQixJQUFuQixHQUEwQnphLFlBQTFCO0FBQ0g7O0FBRUQsaUJBQUtpYyxhQUFMLENBQW1CeUIsS0FBbkI7QUFDQSxnQkFBSSxDQUFDMWQsWUFBTCxFQUFtQjtBQUNmLHFCQUFLNmIsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDSDs7QUFFRCxpQkFBS04sT0FBTCxDQUFheGEsSUFBYixDQUFrQixLQUFLb1gsV0FBdkIsRUFBb0MxN0IsT0FBT3VTLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLEtBQUs4c0IsYUFBdkIsQ0FBcEM7QUFDSDs7O2dDQUVPO0FBQ0osaUJBQUtQLE9BQUwsQ0FBYTloQixLQUFiOztBQUVBLGdCQUFJLEtBQUs0aUIsT0FBVCxFQUFrQjtBQUNkLHFCQUFLQSxPQUFMLEdBQWUsS0FBZjtBQUNBLHFCQUFLQyxXQUFMLEdBQW1CLENBQW5CO0FBQ0g7QUFDSjs7O2dDQUVPO0FBQ0osZ0JBQUksS0FBS3JiLFNBQUwsRUFBSixFQUFzQjtBQUNsQixxQkFBS3NhLE9BQUwsQ0FBYTloQixLQUFiOztBQUVBLG9CQUFJLEtBQUt3aEIsVUFBTCxLQUFvQixDQUF4QixFQUEyQjtBQUN2Qix5QkFBS3FCLFdBQUwsR0FBbUIsS0FBS2pCLGVBQXhCO0FBQ0EseUJBQUtTLGFBQUwsQ0FBbUIyQixFQUFuQixHQUF3QixLQUFLcEMsZUFBTCxHQUF1QixDQUEvQztBQUNILGlCQUhELE1BR087QUFDSCx5QkFBS2lCLFdBQUwsR0FBbUIsS0FBS1IsYUFBTCxDQUFtQjJCLEVBQW5CLEdBQXdCLENBQTNDO0FBQ0g7QUFDRCxxQkFBS3hDLFVBQUwsR0FBa0IsQ0FBbEI7QUFDQSxxQkFBS0ksZUFBTCxHQUF1QixDQUF2QjtBQUNBLHFCQUFLZ0IsT0FBTCxHQUFlLElBQWY7QUFDSDtBQUNKOzs7aUNBRVE7QUFDTCxnQkFBSSxLQUFLQSxPQUFULEVBQWtCO0FBQ2QscUJBQUtBLE9BQUwsR0FBZSxLQUFmO0FBQ0Esb0JBQUlzQixRQUFRLEtBQUtyQixXQUFqQjtBQUNBLHFCQUFLQSxXQUFMLEdBQW1CLENBQW5CO0FBQ0EscUJBQUtzQixhQUFMLENBQW1CRCxLQUFuQixFQUEwQixJQUExQjtBQUNIO0FBQ0o7Ozs2QkFFSUEsSyxFQUFPO0FBQ1IsaUJBQUt0QixPQUFMLEdBQWUsS0FBZjtBQUNBLGlCQUFLcEIsVUFBTCxHQUFrQixDQUFsQjtBQUNBLGlCQUFLSSxlQUFMLEdBQXVCLENBQXZCO0FBQ0EsaUJBQUt1QyxhQUFMLENBQW1CRCxLQUFuQixFQUEwQixJQUExQjtBQUNIOztBQUVEOzs7Ozs7Ozs7c0NBTWNBLEssRUFBT0UsYyxFQUFnQjtBQUNqQyxnQkFBSSxLQUFLdEMsT0FBTCxDQUFhdGEsU0FBYixFQUFKLEVBQThCO0FBQzFCLHFCQUFLc2EsT0FBTCxDQUFhOWhCLEtBQWI7QUFDSDs7QUFFRDtBQUNBLGlCQUFLcWtCLGlCQUFMLENBQXVCRCxjQUF2Qjs7QUFFQSxpQkFBS3RDLE9BQUwsQ0FBYWhzQixPQUFiO0FBQ0EsaUJBQUtnc0IsT0FBTCxHQUFlLElBQWY7O0FBRUEsZ0JBQUl3QyxlQUFlLEVBQUN0RCxNQUFNa0QsS0FBUCxFQUFjRixJQUFJLENBQUMsQ0FBbkIsRUFBbkI7QUFDQSxpQkFBSzNCLGFBQUwsR0FBcUIsRUFBQ3JCLE1BQU1zRCxhQUFhdEQsSUFBcEIsRUFBMEJnRCxJQUFJLENBQUMsQ0FBL0IsRUFBckI7O0FBRUEsaUJBQUt4QixhQUFMLENBQW1CeUIsS0FBbkI7QUFDQSxpQkFBS3hDLFVBQUwsR0FBa0IsS0FBS0YsaUJBQXZCO0FBQ0EsaUJBQUsyQixhQUFMO0FBQ0EsaUJBQUtwQixPQUFMLENBQWF4YSxJQUFiLENBQWtCLEtBQUtvWCxXQUF2QixFQUFvQzRGLFlBQXBDOztBQUVBLGdCQUFJLEtBQUt4QixTQUFULEVBQW9CO0FBQ2hCLHFCQUFLQSxTQUFMO0FBQ0g7QUFDSjs7O2tDQUVTM2QsRyxFQUFLO0FBQ1gsZ0JBQUksQ0FBQ0EsR0FBRCxJQUFRLE9BQU9BLEdBQVAsS0FBZSxRQUF2QixJQUFtQ0EsSUFBSXJiLE1BQUosS0FBZSxDQUF0RCxFQUF5RDtBQUNyRCxzQkFBTSxJQUFJb2xCLG1DQUFKLENBQTZCLGlDQUE3QixDQUFOO0FBQ0g7O0FBRUQsaUJBQUt3UCxXQUFMLENBQWlCdlosR0FBakIsR0FBdUJBLEdBQXZCOztBQUVBO0FBQ0g7OztzQ0FFYW9mLGEsRUFBZTtBQUN6QixnQkFBSUMsZ0JBQWdCLEtBQUsvQyxVQUF6QjtBQUNBLG1CQUFPK0MsZ0JBQWdCLE9BQU8sSUFBUCxHQUFjLENBQTlCLEdBQWtDRCxhQUF6QyxFQUF3RDtBQUNwREMsaUNBQWlCLENBQWpCO0FBQ0g7O0FBRURBLDZCQUFpQixPQUFPLElBQVAsR0FBYyxDQUEvQixDQU55QixDQU1VO0FBQ25DLGdCQUFJQSxrQkFBa0IsS0FBSzlDLFdBQTNCLEVBQXdDO0FBQ3BDO0FBQ0g7O0FBRUQsZ0JBQUkrQyxZQUFZLElBQUk5WSxXQUFKLENBQWdCNlksYUFBaEIsQ0FBaEI7O0FBRUEsZ0JBQUksS0FBS2hELFVBQUwsR0FBa0IsQ0FBdEIsRUFBeUI7QUFBRztBQUN4QixvQkFBSWtELGdCQUFnQixJQUFJaFksVUFBSixDQUFlLEtBQUtpVixZQUFwQixFQUFrQyxDQUFsQyxFQUFxQyxLQUFLSCxVQUExQyxDQUFwQjtBQUNBLG9CQUFJbUQsZ0JBQWdCLElBQUlqWSxVQUFKLENBQWUrWCxTQUFmLEVBQTBCLENBQTFCLEVBQTZCRCxhQUE3QixDQUFwQjtBQUNBRyw4QkFBYzdWLEdBQWQsQ0FBa0I0VixhQUFsQixFQUFpQyxDQUFqQztBQUNIOztBQUVELGlCQUFLL0MsWUFBTCxHQUFvQjhDLFNBQXBCO0FBQ0EsaUJBQUsvQyxXQUFMLEdBQW1COEMsYUFBbkI7QUFDSDs7O3dDQUVlejVCLEssRUFBTztBQUNuQixnQkFBSWtFLE9BQU8sS0FBS3l6QixtQkFBaEI7QUFDQSxnQkFBSXZwQixPQUFPbEssS0FBS25GLE1BQUwsR0FBYyxDQUF6QjtBQUNBLGdCQUFJc1AsTUFBTSxDQUFWO0FBQ0EsZ0JBQUlDLFNBQVMsQ0FBYjtBQUNBLGdCQUFJQyxTQUFTSCxJQUFiOztBQUVBLGdCQUFJcE8sUUFBUWtFLEtBQUssQ0FBTCxDQUFaLEVBQXFCO0FBQ2pCLHVCQUFPQSxLQUFLLENBQUwsQ0FBUDtBQUNIOztBQUVEO0FBQ0EsbUJBQU9vSyxVQUFVQyxNQUFqQixFQUF5QjtBQUNyQkYsc0JBQU1DLFNBQVN0UixLQUFLMkssS0FBTCxDQUFXLENBQUM0RyxTQUFTRCxNQUFWLElBQW9CLENBQS9CLENBQWY7QUFDQSxvQkFBSUQsUUFBUUQsSUFBUixJQUFpQnBPLFNBQVNrRSxLQUFLbUssR0FBTCxDQUFULElBQXNCck8sUUFBUWtFLEtBQUttSyxNQUFNLENBQVgsQ0FBbkQsRUFBbUU7QUFDL0QsMkJBQU9uSyxLQUFLbUssR0FBTCxDQUFQO0FBQ0gsaUJBRkQsTUFFTyxJQUFJbkssS0FBS21LLEdBQUwsSUFBWXJPLEtBQWhCLEVBQXVCO0FBQzFCc08sNkJBQVNELE1BQU0sQ0FBZjtBQUNILGlCQUZNLE1BRUE7QUFDSEUsNkJBQVNGLE1BQU0sQ0FBZjtBQUNIO0FBQ0o7QUFDSjs7O3lDQUVnQndyQixVLEVBQVk7QUFDekIsZ0JBQUlDLGNBQWMsQ0FBbEI7O0FBRUEsZ0JBQUksS0FBS3BwQixPQUFMLENBQWFsSCxNQUFqQixFQUF5QjtBQUNyQjtBQUNBc3dCLDhCQUFjRCxVQUFkO0FBQ0gsYUFIRCxNQUdPO0FBQ0gsb0JBQUlBLGFBQWEsR0FBakIsRUFBc0I7QUFDbEJDLGtDQUFjRCxVQUFkO0FBQ0gsaUJBRkQsTUFFTyxJQUFJQSxjQUFjLEdBQWQsSUFBcUJBLGNBQWMsSUFBdkMsRUFBNkM7QUFDaERDLGtDQUFjOThCLEtBQUsySyxLQUFMLENBQVdreUIsYUFBYSxHQUF4QixDQUFkO0FBQ0gsaUJBRk0sTUFFQTtBQUNIQyxrQ0FBY0QsYUFBYSxDQUEzQjtBQUNIO0FBQ0o7O0FBRUQsZ0JBQUlDLGNBQWMsSUFBbEIsRUFBd0I7QUFDcEJBLDhCQUFjLElBQWQ7QUFDSDs7QUFFRCxnQkFBSUMsYUFBYUQsY0FBYyxJQUFkLEdBQXFCLE9BQU8sSUFBUCxHQUFjLENBQXBELENBcEJ5QixDQW9CK0I7QUFDeEQsZ0JBQUksS0FBS25ELFdBQUwsR0FBbUJvRCxVQUF2QixFQUFtQztBQUMvQixxQkFBS0MsYUFBTCxDQUFtQkQsVUFBbkI7QUFDSDtBQUNELGlCQUFLckQsVUFBTCxHQUFrQm9ELGNBQWMsSUFBaEM7QUFDSDs7O3dDQUVlRyxNLEVBQVE1YyxTLEVBQVc7QUFDL0IsaUJBQUtpYSxhQUFMLENBQW1CMkIsRUFBbkIsR0FBd0I1YixZQUFZNGMsT0FBT3pqQixVQUFuQixHQUFnQyxDQUF4RDtBQUNBLG1CQUFPLEtBQUs0ZixjQUFMLENBQW9CNkQsTUFBcEIsRUFBNEI1YyxTQUE1QixDQUFQO0FBQ0g7Ozt1Q0FFY3VCLGEsRUFBZTtBQUMxQixpQkFBSzJZLGNBQUwsR0FBc0IzWSxhQUF0QjtBQUNBLGdCQUFJLEtBQUtvWixXQUFULEVBQXNCO0FBQ2xCLHFCQUFLQSxXQUFMLENBQWlCcFosYUFBakI7QUFDSDtBQUNKOzs7OENBRXFCc2IsYSxFQUFlO0FBQ2pDLGdCQUFJQSxpQkFBaUIsS0FBSzdDLGdCQUExQixFQUE0QztBQUN4QyxxQkFBS0QsWUFBTCxHQUFvQjhDLGFBQXBCO0FBQ0EscUJBQUs3QyxnQkFBTCxHQUF3QixLQUF4QjtBQUNIO0FBQ0o7Ozs4Q0FFcUI1UCxLLEVBQU9wSyxTLEVBQVc4YyxjLEVBQWdCO0FBQ3BELGdCQUFJLENBQUMsS0FBSy9ELGNBQVYsRUFBMEI7QUFDdEIsc0JBQU0sSUFBSXhqQixnQ0FBSixDQUEwQiw4REFBMUIsQ0FBTjtBQUNIO0FBQ0QsZ0JBQUksS0FBS2lsQixPQUFULEVBQWtCO0FBQ2Q7QUFDSDtBQUNELGdCQUFJLEtBQUtELHVCQUFULEVBQWtDO0FBQzlCO0FBQ0EscUJBQUtBLHVCQUFMLEdBQStCLEtBQS9CO0FBQ0Esb0JBQUksS0FBS3plLG9CQUFULEVBQStCO0FBQzNCLHlCQUFLQSxvQkFBTDtBQUNIO0FBQ0o7O0FBRUQsaUJBQUtzZSxhQUFMLENBQW1CMkMsUUFBbkIsQ0FBNEIzUyxNQUFNalIsVUFBbEM7O0FBRUE7QUFDQSxnQkFBSTZqQixPQUFPLEtBQUs1QyxhQUFMLENBQW1CNkMsY0FBOUI7QUFDQSxnQkFBSUQsU0FBUyxDQUFiLEVBQWdCO0FBQ1osb0JBQUlSLGFBQWEsS0FBS1UsZUFBTCxDQUFxQkYsSUFBckIsQ0FBakI7QUFDQSxvQkFBSSxLQUFLN0MsZ0JBQUwsS0FBMEJxQyxVQUE5QixFQUEwQztBQUN0Qyx5QkFBS3JDLGdCQUFMLEdBQXdCcUMsVUFBeEI7QUFDQSx5QkFBS1csZ0JBQUwsQ0FBc0JYLFVBQXRCO0FBQ0g7QUFDSjs7QUFFRCxnQkFBSSxDQUFDLEtBQUsvQyxZQUFWLEVBQXdCO0FBQUc7QUFDdkIsb0JBQUksS0FBS0wsVUFBTCxLQUFvQixDQUF4QixFQUEyQjtBQUN2QjtBQUNBO0FBQ0Esd0JBQUlsWixXQUFXLEtBQUtrZCxlQUFMLENBQXFCaFQsS0FBckIsRUFBNEJwSyxTQUE1QixDQUFmO0FBQ0Esd0JBQUlFLFdBQVdrSyxNQUFNalIsVUFBckIsRUFBaUM7QUFBRztBQUNoQyw0QkFBSWtrQixTQUFTalQsTUFBTWpSLFVBQU4sR0FBbUIrRyxRQUFoQztBQUNBLDRCQUFJbWQsU0FBUyxLQUFLL0QsV0FBbEIsRUFBK0I7QUFDM0IsaUNBQUtxRCxhQUFMLENBQW1CVSxNQUFuQjtBQUNIO0FBQ0QsNEJBQUlDLGFBQWEsSUFBSWhaLFVBQUosQ0FBZSxLQUFLaVYsWUFBcEIsRUFBa0MsQ0FBbEMsRUFBcUMsS0FBS0QsV0FBMUMsQ0FBakI7QUFDQWdFLG1DQUFXNVcsR0FBWCxDQUFlLElBQUlwQyxVQUFKLENBQWU4RixLQUFmLEVBQXNCbEssUUFBdEIsQ0FBZixFQUFnRCxDQUFoRDtBQUNBLDZCQUFLa1osVUFBTCxJQUFtQmlFLE1BQW5CO0FBQ0EsNkJBQUs3RCxlQUFMLEdBQXVCeFosWUFBWUUsUUFBbkM7QUFDSDtBQUNKLGlCQWRELE1BY087QUFDSDtBQUNBLHdCQUFJLEtBQUtrWixVQUFMLEdBQWtCaFAsTUFBTWpSLFVBQXhCLEdBQXFDLEtBQUttZ0IsV0FBOUMsRUFBMkQ7QUFDdkQsNkJBQUtxRCxhQUFMLENBQW1CLEtBQUt2RCxVQUFMLEdBQWtCaFAsTUFBTWpSLFVBQTNDO0FBQ0g7QUFDRCx3QkFBSW1rQixjQUFhLElBQUloWixVQUFKLENBQWUsS0FBS2lWLFlBQXBCLEVBQWtDLENBQWxDLEVBQXFDLEtBQUtELFdBQTFDLENBQWpCO0FBQ0FnRSxnQ0FBVzVXLEdBQVgsQ0FBZSxJQUFJcEMsVUFBSixDQUFlOEYsS0FBZixDQUFmLEVBQXNDLEtBQUtnUCxVQUEzQztBQUNBLHlCQUFLQSxVQUFMLElBQW1CaFAsTUFBTWpSLFVBQXpCO0FBQ0Esd0JBQUkrRyxZQUFXLEtBQUtrZCxlQUFMLENBQXFCLEtBQUs3RCxZQUFMLENBQWtCenpCLEtBQWxCLENBQXdCLENBQXhCLEVBQTJCLEtBQUtzekIsVUFBaEMsQ0FBckIsRUFBa0UsS0FBS0ksZUFBdkUsQ0FBZjtBQUNBLHdCQUFJdFosWUFBVyxLQUFLa1osVUFBaEIsSUFBOEJsWixZQUFXLENBQTdDLEVBQWdEO0FBQUc7QUFDL0MsNEJBQUlxZCxjQUFjLElBQUlqWixVQUFKLENBQWUsS0FBS2lWLFlBQXBCLEVBQWtDclosU0FBbEMsQ0FBbEI7QUFDQW9kLG9DQUFXNVcsR0FBWCxDQUFlNlcsV0FBZixFQUE0QixDQUE1QjtBQUNIO0FBQ0QseUJBQUtuRSxVQUFMLElBQW1CbFosU0FBbkI7QUFDQSx5QkFBS3NaLGVBQUwsSUFBd0J0WixTQUF4QjtBQUNIO0FBQ0osYUEvQkQsTUErQk87QUFBRztBQUNOLG9CQUFJLEtBQUtrWixVQUFMLEtBQW9CLENBQXBCLElBQXlCLEtBQUtJLGVBQUwsS0FBeUIsQ0FBdEQsRUFBeUQ7QUFBRztBQUN4RDtBQUNBLHlCQUFLQSxlQUFMLEdBQXVCeFosU0FBdkI7QUFDSDtBQUNELG9CQUFJLEtBQUtvWixVQUFMLEdBQWtCaFAsTUFBTWpSLFVBQXhCLElBQXNDLEtBQUtrZ0IsVUFBL0MsRUFBMkQ7QUFDdkQ7QUFDQSx3QkFBSWlFLGVBQWEsSUFBSWhaLFVBQUosQ0FBZSxLQUFLaVYsWUFBcEIsRUFBa0MsQ0FBbEMsRUFBcUMsS0FBS0YsVUFBMUMsQ0FBakI7QUFDQWlFLGlDQUFXNVcsR0FBWCxDQUFlLElBQUlwQyxVQUFKLENBQWU4RixLQUFmLENBQWYsRUFBc0MsS0FBS2dQLFVBQTNDO0FBQ0EseUJBQUtBLFVBQUwsSUFBbUJoUCxNQUFNalIsVUFBekI7QUFDSCxpQkFMRCxNQUtPO0FBQUc7QUFDTix3QkFBSW1rQixlQUFhLElBQUloWixVQUFKLENBQWUsS0FBS2lWLFlBQXBCLEVBQWtDLENBQWxDLEVBQXFDLEtBQUtELFdBQTFDLENBQWpCO0FBQ0Esd0JBQUksS0FBS0YsVUFBTCxHQUFrQixDQUF0QixFQUF5QjtBQUFHO0FBQ3hCO0FBQ0E7QUFDQSw0QkFBSXhTLFNBQVMsS0FBSzJTLFlBQUwsQ0FBa0J6ekIsS0FBbEIsQ0FBd0IsQ0FBeEIsRUFBMkIsS0FBS3N6QixVQUFoQyxDQUFiO0FBQ0EsNEJBQUlsWixhQUFXLEtBQUtrZCxlQUFMLENBQXFCeFcsTUFBckIsRUFBNkIsS0FBSzRTLGVBQWxDLENBQWY7QUFDQSw0QkFBSXRaLGFBQVcwRyxPQUFPek4sVUFBdEIsRUFBa0M7QUFDOUIsZ0NBQUkrRyxhQUFXLENBQWYsRUFBa0I7QUFDZCxvQ0FBSXFkLGVBQWMsSUFBSWpaLFVBQUosQ0FBZXNDLE1BQWYsRUFBdUIxRyxVQUF2QixDQUFsQjtBQUNBb2QsNkNBQVc1VyxHQUFYLENBQWU2VyxZQUFmLEVBQTRCLENBQTVCO0FBQ0EscUNBQUtuRSxVQUFMLEdBQWtCbUUsYUFBWXBrQixVQUE5QjtBQUNBLHFDQUFLcWdCLGVBQUwsSUFBd0J0WixVQUF4QjtBQUNIO0FBQ0oseUJBUEQsTUFPTztBQUNILGlDQUFLa1osVUFBTCxHQUFrQixDQUFsQjtBQUNBLGlDQUFLSSxlQUFMLElBQXdCdFosVUFBeEI7QUFDSDtBQUNELDRCQUFJLEtBQUtrWixVQUFMLEdBQWtCaFAsTUFBTWpSLFVBQXhCLEdBQXFDLEtBQUttZ0IsV0FBOUMsRUFBMkQ7QUFDdkQsaUNBQUtxRCxhQUFMLENBQW1CLEtBQUt2RCxVQUFMLEdBQWtCaFAsTUFBTWpSLFVBQTNDO0FBQ0Fta0IsMkNBQWEsSUFBSWhaLFVBQUosQ0FBZSxLQUFLaVYsWUFBcEIsRUFBa0MsQ0FBbEMsRUFBcUMsS0FBS0QsV0FBMUMsQ0FBYjtBQUNIO0FBQ0RnRSxxQ0FBVzVXLEdBQVgsQ0FBZSxJQUFJcEMsVUFBSixDQUFlOEYsS0FBZixDQUFmLEVBQXNDLEtBQUtnUCxVQUEzQztBQUNBLDZCQUFLQSxVQUFMLElBQW1CaFAsTUFBTWpSLFVBQXpCO0FBQ0gscUJBdEJELE1Bc0JPO0FBQUc7QUFDTjtBQUNBLDRCQUFJK0csYUFBVyxLQUFLa2QsZUFBTCxDQUFxQmhULEtBQXJCLEVBQTRCcEssU0FBNUIsQ0FBZjtBQUNBLDRCQUFJRSxhQUFXa0ssTUFBTWpSLFVBQXJCLEVBQWlDO0FBQzdCLGdDQUFJa2tCLFVBQVNqVCxNQUFNalIsVUFBTixHQUFtQitHLFVBQWhDO0FBQ0EsZ0NBQUltZCxVQUFTLEtBQUsvRCxXQUFsQixFQUErQjtBQUMzQixxQ0FBS3FELGFBQUwsQ0FBbUJVLE9BQW5CO0FBQ0FDLCtDQUFhLElBQUloWixVQUFKLENBQWUsS0FBS2lWLFlBQXBCLEVBQWtDLENBQWxDLEVBQXFDLEtBQUtELFdBQTFDLENBQWI7QUFDSDtBQUNEZ0UseUNBQVc1VyxHQUFYLENBQWUsSUFBSXBDLFVBQUosQ0FBZThGLEtBQWYsRUFBc0JsSyxVQUF0QixDQUFmLEVBQWdELENBQWhEO0FBQ0EsaUNBQUtrWixVQUFMLElBQW1CaUUsT0FBbkI7QUFDQSxpQ0FBSzdELGVBQUwsR0FBdUJ4WixZQUFZRSxVQUFuQztBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBQ0o7OzswQ0FFaUI4YixjLEVBQWdCO0FBQzlCLGdCQUFJLEtBQUs1QyxVQUFMLEdBQWtCLENBQXRCLEVBQXlCO0FBQ3JCLG9CQUFJeFMsU0FBUyxLQUFLMlMsWUFBTCxDQUFrQnp6QixLQUFsQixDQUF3QixDQUF4QixFQUEyQixLQUFLc3pCLFVBQWhDLENBQWI7QUFDQSxvQkFBSWxaLFdBQVcsS0FBS2tkLGVBQUwsQ0FBcUJ4VyxNQUFyQixFQUE2QixLQUFLNFMsZUFBbEMsQ0FBZjtBQUNBLG9CQUFJNkQsU0FBU3pXLE9BQU96TixVQUFQLEdBQW9CK0csUUFBakM7O0FBRUEsb0JBQUlBLFdBQVcwRyxPQUFPek4sVUFBdEIsRUFBa0M7QUFDOUIsd0JBQUk2aUIsY0FBSixFQUFvQjtBQUNoQmhtQix5Q0FBSTBQLENBQUosQ0FBTSxLQUFLdFMsR0FBWCxFQUFtQmlxQixNQUFuQjtBQUNILHFCQUZELE1BRU87QUFDSCw0QkFBSW5kLFdBQVcsQ0FBZixFQUFrQjtBQUNkLGdDQUFJb2QsYUFBYSxJQUFJaFosVUFBSixDQUFlLEtBQUtpVixZQUFwQixFQUFrQyxDQUFsQyxFQUFxQyxLQUFLRCxXQUExQyxDQUFqQjtBQUNBLGdDQUFJaUUsY0FBYyxJQUFJalosVUFBSixDQUFlc0MsTUFBZixFQUF1QjFHLFFBQXZCLENBQWxCO0FBQ0FvZCx1Q0FBVzVXLEdBQVgsQ0FBZTZXLFdBQWYsRUFBNEIsQ0FBNUI7QUFDQSxpQ0FBS25FLFVBQUwsR0FBa0JtRSxZQUFZcGtCLFVBQTlCO0FBQ0EsaUNBQUtxZ0IsZUFBTCxJQUF3QnRaLFFBQXhCO0FBQ0g7QUFDRCwrQkFBTyxDQUFQO0FBQ0g7QUFDSjtBQUNELHFCQUFLa1osVUFBTCxHQUFrQixDQUFsQjtBQUNBLHFCQUFLSSxlQUFMLEdBQXVCLENBQXZCO0FBQ0EsdUJBQU82RCxNQUFQO0FBQ0g7QUFDRCxtQkFBTyxDQUFQO0FBQ0g7OzswQ0FFaUJ6RSxJLEVBQU1nRCxFLEVBQUk7QUFDeEI7QUFDQSxpQkFBS0ssaUJBQUwsQ0FBdUIsSUFBdkI7O0FBRUEsZ0JBQUksS0FBS3RELFdBQVQsRUFBc0I7QUFDbEIscUJBQUtBLFdBQUwsQ0FBaUIsS0FBS08sVUFBdEI7QUFDSDtBQUNKOzs7dUNBRWMzK0IsSSxFQUFNZ0QsSSxFQUFNO0FBQ3ZCeVksNkJBQUl6WCxDQUFKLENBQU0sS0FBSzZVLEdBQVgsNEJBQXdDN1YsS0FBS3daLElBQTdDLGdCQUE0RHhaLEtBQUt5WixHQUFqRTs7QUFFQSxpQkFBS2lsQixpQkFBTCxDQUF1QixLQUF2Qjs7QUFFQSxnQkFBSSxLQUFLMUIsdUJBQVQsRUFBa0M7QUFDOUI7QUFDQSxxQkFBS0EsdUJBQUwsR0FBK0IsS0FBL0I7QUFDQWhnQyx1QkFBTzI5QixxQkFBYXNGLHVCQUFwQjtBQUNIOztBQUVELG9CQUFRampDLElBQVI7QUFDSSxxQkFBSzI5QixxQkFBYWMsU0FBbEI7QUFBNkI7QUFDekIsNEJBQUksQ0FBQyxLQUFLM2xCLE9BQUwsQ0FBYWxILE1BQWxCLEVBQTBCO0FBQ3RCO0FBQ0EsZ0NBQUksS0FBSzR0QixZQUFULEVBQXVCO0FBQ25CLG9DQUFJMEQsV0FBVyxLQUFLeEQsYUFBTCxDQUFtQjJCLEVBQW5CLEdBQXdCLENBQXZDO0FBQ0Esb0NBQUk2QixXQUFXLEtBQUsxRCxZQUFwQixFQUFrQztBQUM5Qi9qQixxREFBSTBQLENBQUosQ0FBTSxLQUFLdFMsR0FBWCxFQUFnQixzQ0FBaEI7QUFDQSx5Q0FBS21uQix1QkFBTCxHQUErQixJQUEvQjtBQUNBLHlDQUFLd0IsYUFBTCxDQUFtQjBCLFFBQW5CLEVBQTZCLEtBQTdCO0FBQ0g7QUFDRDtBQUNIO0FBQ0Q7QUFDSDtBQUNEO0FBQ0FsakMsK0JBQU8yOUIscUJBQWFzRix1QkFBcEI7QUFDQTtBQUNIO0FBQ0QscUJBQUt0RixxQkFBYXNGLHVCQUFsQjtBQUNBLHFCQUFLdEYscUJBQWF3RixrQkFBbEI7QUFDQSxxQkFBS3hGLHFCQUFhQyx3QkFBbEI7QUFDQSxxQkFBS0QscUJBQWFJLFNBQWxCO0FBQ0k7QUF2QlI7O0FBMEJBLGdCQUFJLEtBQUsxUSxRQUFULEVBQW1CO0FBQ2YscUJBQUtBLFFBQUwsQ0FBY3J0QixJQUFkLEVBQW9CZ0QsSUFBcEI7QUFDSCxhQUZELE1BRU87QUFDSCxzQkFBTSxJQUFJODZCLDJCQUFKLENBQXFCLGtCQUFrQjk2QixLQUFLeVosR0FBNUMsQ0FBTjtBQUNIO0FBQ0o7Ozs0QkE3Zlk7QUFDVCxtQkFBTyxLQUFLMGlCLE9BQUwsQ0FBYWxDLE1BQXBCO0FBQ0g7Ozs0QkFFZTtBQUNaLG1CQUFPLEtBQUswQixVQUFaO0FBQ0gsUzswQkFFYTM3QixJLEVBQU07QUFDaEIsaUJBQUsyN0IsVUFBTCxHQUFrQjM3QixJQUFsQjtBQUNIOztBQUVEOzs7OzRCQUNvQjtBQUNoQixtQkFBTyxLQUFLdzdCLGNBQVo7QUFDSCxTOzBCQUVpQjM5QixRLEVBQVU7QUFDeEIsaUJBQUsyOUIsY0FBTCxHQUFzQjM5QixRQUF0QjtBQUNIOzs7NEJBRWM7QUFDWCxtQkFBTyxLQUFLcy9CLFNBQVo7QUFDSCxTOzBCQUVZdC9CLFEsRUFBVTtBQUNuQixpQkFBS3MvQixTQUFMLEdBQWlCdC9CLFFBQWpCO0FBQ0g7O0FBRUQ7Ozs7NEJBQ2M7QUFDVixtQkFBTyxLQUFLd3NCLFFBQVo7QUFDSCxTOzBCQUVXeHNCLFEsRUFBVTtBQUNsQixpQkFBS3dzQixRQUFMLEdBQWdCeHNCLFFBQWhCO0FBQ0g7Ozs0QkFFZ0I7QUFDYixtQkFBTyxLQUFLdTlCLFdBQVo7QUFDSCxTOzBCQUVjdjlCLFEsRUFBVTtBQUNyQixpQkFBS3U5QixXQUFMLEdBQW1CdjlCLFFBQW5CO0FBQ0g7Ozs0QkFFZ0I7QUFDYixtQkFBTyxLQUFLdS9CLFdBQVo7QUFDSCxTOzBCQUVjdi9CLFEsRUFBVTtBQUNyQixpQkFBS3UvQixXQUFMLEdBQW1Cdi9CLFFBQW5CO0FBQ0g7Ozs0QkFFeUI7QUFDdEIsbUJBQU8sS0FBSzBnQixvQkFBWjtBQUNILFM7MEJBRXVCMWdCLFEsRUFBVTtBQUM5QixpQkFBSzBnQixvQkFBTCxHQUE0QjFnQixRQUE1QjtBQUNIOzs7NEJBRWdCO0FBQ2IsbUJBQU8sS0FBS2s3QixXQUFMLENBQWlCdlosR0FBeEI7QUFDSDs7OzRCQUVpQjtBQUNkLG1CQUFRLEtBQUttZCxjQUFMLElBQXVCLElBQXZCLElBQStCLEtBQUs1RCxXQUFMLENBQWlCL1UsYUFBakIsSUFBa0N4bEIsU0FBekU7QUFDSDs7OzRCQUUwQjtBQUN2QixtQkFBTyxLQUFLbStCLGNBQUwsSUFBdUIsS0FBSzVELFdBQUwsQ0FBaUIvVSxhQUEvQztBQUNIOztBQUVEOzs7OzRCQUNtQjtBQUNmLGdCQUFJLEtBQUtvWSxZQUFMLEtBQXNCMEIsd0JBQTFCLEVBQXVDO0FBQ25DO0FBQ0EsdUJBQU8sS0FBSzNCLE9BQUwsQ0FBYXpYLFlBQXBCO0FBQ0g7QUFDRCxtQkFBTyxLQUFLbVksYUFBTCxDQUFtQjZDLGNBQTFCO0FBQ0g7Ozs0QkFFZ0I7QUFDYixtQkFBTyxLQUFLdkQsT0FBTCxDQUFhbi9CLElBQXBCO0FBQ0g7Ozs7OztrQkE0YVVpVCxZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxakJDcG9CZjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOzs7O0FBRU8sSUFBTTJwQixzQ0FBZTtBQUN4QkcsV0FBTyxDQURpQjtBQUV4QkYsaUJBQWEsQ0FGVztBQUd4QjBCLGdCQUFZLENBSFk7QUFJeEJiLFlBQVEsQ0FKZ0I7QUFLeEJTLGVBQVc7QUFMYSxDQUFyQjs7QUFRQSxJQUFNUixzQ0FBZTtBQUN4QnZTLFFBQUksSUFEb0I7QUFFeEIyUyxlQUFXLFdBRmE7QUFHeEJILDhCQUEwQix1QkFIRjtBQUl4QnVGLHdCQUFvQixtQkFKSTtBQUt4QjFFLGVBQVcsVUFMYTtBQU14QndFLDZCQUF5QjtBQU5ELENBQXJCOztBQVNQOzs7Ozs7OztJQU9hdkUsVSxXQUFBQSxVO0FBRVQsd0JBQVkwRSxRQUFaLEVBQXNCO0FBQUE7O0FBQ2xCLGFBQUtuckIsS0FBTCxHQUFhbXJCLFlBQVksV0FBekI7QUFDQSxhQUFLekcsT0FBTCxHQUFlQyxhQUFhRyxLQUE1QjtBQUNBLGFBQUtwQixVQUFMLEdBQWtCLEtBQWxCO0FBQ0E7QUFDQSxhQUFLMkIscUJBQUwsR0FBNkIsSUFBN0I7QUFDQSxhQUFLSixjQUFMLEdBQXNCLElBQXRCO0FBQ0EsYUFBS3NCLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxhQUFLblIsUUFBTCxHQUFnQixJQUFoQjtBQUNBLGFBQUsrUSxXQUFMLEdBQW1CLElBQW5CO0FBQ0g7Ozs7a0NBRVM7QUFDTixpQkFBS3pCLE9BQUwsR0FBZUMsYUFBYUcsS0FBNUI7QUFDQSxpQkFBS08scUJBQUwsR0FBNkIsSUFBN0I7QUFDQSxpQkFBS0osY0FBTCxHQUFzQixJQUF0QjtBQUNBLGlCQUFLc0IsY0FBTCxHQUFzQixJQUF0QjtBQUNBLGlCQUFLblIsUUFBTCxHQUFnQixJQUFoQjtBQUNBLGlCQUFLK1EsV0FBTCxHQUFtQixJQUFuQjtBQUNIOzs7b0NBRVc7QUFDUixtQkFBTyxLQUFLekIsT0FBTCxLQUFpQkMsYUFBYUMsV0FBOUIsSUFBNkMsS0FBS0YsT0FBTCxLQUFpQkMsYUFBYTJCLFVBQWxGO0FBQ0g7Ozs7O0FBc0REOzZCQUNLMWEsVSxFQUFZMUYsSyxFQUFPO0FBQ3BCLGtCQUFNLElBQUlrbEIsa0NBQUosQ0FBNEIsa0NBQTVCLENBQU47QUFDSDs7O2dDQUVPO0FBQ0osa0JBQU0sSUFBSUEsa0NBQUosQ0FBNEIsa0NBQTVCLENBQU47QUFDSDs7OzRCQTNEVTtBQUNQLG1CQUFPLEtBQUtwckIsS0FBWjtBQUNIOzs7NEJBRVk7QUFDVCxtQkFBTyxLQUFLMGtCLE9BQVo7QUFDSDs7OzRCQUVxQjtBQUNsQixtQkFBTyxLQUFLaEIsVUFBWjtBQUNIOzs7NEJBRTBCO0FBQ3ZCLG1CQUFPLEtBQUsyQixxQkFBWjtBQUNILFM7MEJBRXdCejhCLFEsRUFBVTtBQUMvQixpQkFBS3k4QixxQkFBTCxHQUE2Qno4QixRQUE3QjtBQUNIOzs7NEJBRW1CO0FBQ2hCLG1CQUFPLEtBQUtxOEIsY0FBWjtBQUNILFM7MEJBRWlCcjhCLFEsRUFBVTtBQUN4QixpQkFBS3E4QixjQUFMLEdBQXNCcjhCLFFBQXRCO0FBQ0g7Ozs0QkFFbUI7QUFDaEIsbUJBQU8sS0FBSzI5QixjQUFaO0FBQ0gsUzswQkFFaUIzOUIsUSxFQUFVO0FBQ3hCLGlCQUFLMjlCLGNBQUwsR0FBc0IzOUIsUUFBdEI7QUFDSDs7OzRCQUVhO0FBQ1YsbUJBQU8sS0FBS3dzQixRQUFaO0FBQ0gsUzswQkFFV3hzQixRLEVBQVU7QUFDbEIsaUJBQUt3c0IsUUFBTCxHQUFnQnhzQixRQUFoQjtBQUNIOzs7NEJBRWdCO0FBQ2IsbUJBQU8sS0FBS3U5QixXQUFaO0FBQ0gsUzswQkFFY3Y5QixRLEVBQVU7QUFDckIsaUJBQUt1OUIsV0FBTCxHQUFtQnY5QixRQUFuQjtBQUNIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pITDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBa0JNOC9CLGdCO0FBRUYsOEJBQVlGLFVBQVosRUFBd0JDLFFBQXhCLEVBQWtDO0FBQUE7O0FBQzlCLGFBQUs0QyxVQUFMLEdBQWtCN0MsVUFBbEI7QUFDQSxhQUFLOEMsUUFBTCxHQUFnQjdDLFFBQWhCO0FBQ0g7Ozs7a0NBRVM4QyxPLEVBQVNybEIsSyxFQUFPO0FBQ3RCLGdCQUFJcUUsTUFBTWdoQixPQUFWOztBQUVBLGdCQUFJcmxCLE1BQU1rZ0IsSUFBTixLQUFlLENBQWYsSUFBb0JsZ0IsTUFBTWtqQixFQUFOLEtBQWEsQ0FBQyxDQUF0QyxFQUF5QztBQUNyQyxvQkFBSW9DLFVBQVUsSUFBZDtBQUNBLG9CQUFJamhCLElBQUk4USxPQUFKLENBQVksR0FBWixNQUFxQixDQUFDLENBQTFCLEVBQTZCO0FBQ3pCOVEsMkJBQU8sR0FBUDtBQUNBaWhCLDhCQUFVLEtBQVY7QUFDSDs7QUFFRCxvQkFBSUEsT0FBSixFQUFhO0FBQ1RqaEIsMkJBQU8sR0FBUDtBQUNIOztBQUVEQSx1QkFBVSxLQUFLOGdCLFVBQWYsU0FBNkJubEIsTUFBTWtnQixJQUFOLENBQVc5OUIsUUFBWCxFQUE3Qjs7QUFFQSxvQkFBSTRkLE1BQU1rakIsRUFBTixLQUFhLENBQUMsQ0FBbEIsRUFBcUI7QUFDakI3ZSxpQ0FBVyxLQUFLK2dCLFFBQWhCLFNBQTRCcGxCLE1BQU1rakIsRUFBTixDQUFTOWdDLFFBQVQsRUFBNUI7QUFDSDtBQUNKOztBQUVELG1CQUFPO0FBQ0hpaUIscUJBQUtBLEdBREY7QUFFSDJaLHlCQUFTO0FBRk4sYUFBUDtBQUlIOzs7NENBRW1CdUgsUyxFQUFXO0FBQzNCLGdCQUFJQyxVQUFVRCxVQUFVRSxLQUFWLENBQWdCLEdBQWhCLEVBQXFCLENBQXJCLENBQWQ7QUFDQSxnQkFBSXJILFNBQVMvNkIsU0FBYjs7QUFFQSxnQkFBSXFpQyxhQUFhSCxVQUFVcFEsT0FBVixDQUFrQixHQUFsQixDQUFqQjtBQUNBLGdCQUFJdVEsZUFBZSxDQUFDLENBQXBCLEVBQXVCO0FBQ25CdEgseUJBQVNtSCxVQUFVcCtCLFNBQVYsQ0FBb0J1K0IsYUFBYSxDQUFqQyxDQUFUO0FBQ0g7O0FBRUQsZ0JBQUlDLGVBQWUsRUFBbkI7O0FBRUEsZ0JBQUl2SCxVQUFVLzZCLFNBQVYsSUFBdUIrNkIsT0FBT3AxQixNQUFQLEdBQWdCLENBQTNDLEVBQThDO0FBQzFDLG9CQUFJNDhCLFFBQVF4SCxPQUFPcUgsS0FBUCxDQUFhLEdBQWIsQ0FBWjs7QUFFQSxxQkFBSyxJQUFJbmdDLElBQUksQ0FBYixFQUFnQkEsSUFBSXNnQyxNQUFNNThCLE1BQTFCLEVBQWtDMUQsR0FBbEMsRUFBdUM7QUFDbkMsd0JBQUl1Z0MsT0FBT0QsTUFBTXRnQyxDQUFOLEVBQVNtZ0MsS0FBVCxDQUFlLEdBQWYsQ0FBWDtBQUNBLHdCQUFJSyxhQUFjeGdDLElBQUksQ0FBdEI7O0FBRUEsd0JBQUl1Z0MsS0FBSyxDQUFMLE1BQVksS0FBS1YsVUFBakIsSUFBK0JVLEtBQUssQ0FBTCxNQUFZLEtBQUtULFFBQXBELEVBQThEO0FBQzFELDRCQUFJVSxVQUFKLEVBQWdCO0FBQ1pILDRDQUFnQixHQUFoQjtBQUNIO0FBQ0RBLHdDQUFnQkMsTUFBTXRnQyxDQUFOLENBQWhCO0FBQ0g7QUFDSjtBQUNKOztBQUVELG1CQUFRcWdDLGFBQWEzOEIsTUFBYixLQUF3QixDQUF6QixHQUE4Qnc4QixPQUE5QixHQUF3Q0EsVUFBVSxHQUFWLEdBQWdCRyxZQUEvRDtBQUNIOzs7Ozs7a0JBSVVuRCxnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwRmY7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWtCTUgsZ0I7QUFFRiw4QkFBWTBELFNBQVosRUFBdUI7QUFBQTs7QUFDbkIsYUFBS0MsVUFBTCxHQUFrQkQsYUFBYSxLQUEvQjtBQUNIOzs7O2tDQUVTMWhCLEcsRUFBS3JFLEssRUFBTztBQUNsQixnQkFBSWdlLFVBQVUsRUFBZDs7QUFFQSxnQkFBSWhlLE1BQU1rZ0IsSUFBTixLQUFlLENBQWYsSUFBb0JsZ0IsTUFBTWtqQixFQUFOLEtBQWEsQ0FBQyxDQUF0QyxFQUF5QztBQUNyQyxvQkFBSXBoQixjQUFKO0FBQ0Esb0JBQUk5QixNQUFNa2pCLEVBQU4sS0FBYSxDQUFDLENBQWxCLEVBQXFCO0FBQ2pCcGhCLHVDQUFpQjlCLE1BQU1rZ0IsSUFBTixDQUFXOTlCLFFBQVgsRUFBakIsU0FBMEM0ZCxNQUFNa2pCLEVBQU4sQ0FBUzlnQyxRQUFULEVBQTFDO0FBQ0gsaUJBRkQsTUFFTztBQUNIMGYsdUNBQWlCOUIsTUFBTWtnQixJQUFOLENBQVc5OUIsUUFBWCxFQUFqQjtBQUNIO0FBQ0Q0N0Isd0JBQVEsT0FBUixJQUFtQmxjLEtBQW5CO0FBQ0gsYUFSRCxNQVFPLElBQUksS0FBS2trQixVQUFULEVBQXFCO0FBQ3hCaEksd0JBQVEsT0FBUixJQUFtQixVQUFuQjtBQUNIOztBQUVELG1CQUFPO0FBQ0gzWixxQkFBS0EsR0FERjtBQUVIMloseUJBQVNBO0FBRk4sYUFBUDtBQUlIOzs7NENBRW1CdUgsUyxFQUFXO0FBQzNCLG1CQUFPQSxTQUFQO0FBQ0g7Ozs7OztrQkFJVWxELGdCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25EZjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBO0lBQ01WLFk7QUFFRiw0QkFBYztBQUFBOztBQUNWO0FBQ0EsYUFBS3NFLGdCQUFMLEdBQXdCLENBQXhCO0FBQ0EsYUFBS0MsZUFBTCxHQUF1QixDQUF2QjtBQUNBLGFBQUtDLGNBQUwsR0FBc0IsQ0FBdEI7QUFDQSxhQUFLQyxXQUFMLEdBQW1CLENBQW5CO0FBQ0EsYUFBS0MsZ0JBQUwsR0FBd0IsQ0FBeEI7O0FBRUE7QUFDQSxZQUFJMWlDLEtBQUsyaUMsV0FBTCxJQUFvQjNpQyxLQUFLMmlDLFdBQUwsQ0FBaUJDLEdBQXpDLEVBQThDO0FBQzFDLGlCQUFLQyxJQUFMLEdBQVk3aUMsS0FBSzJpQyxXQUFMLENBQWlCQyxHQUFqQixDQUFxQnRyQixJQUFyQixDQUEwQnRYLEtBQUsyaUMsV0FBL0IsQ0FBWjtBQUNILFNBRkQsTUFFTztBQUNILGlCQUFLRSxJQUFMLEdBQVl0YSxLQUFLcWEsR0FBakI7QUFDSDtBQUNKOzs7O2dDQUVPO0FBQ0osaUJBQUtOLGdCQUFMLEdBQXdCLEtBQUtDLGVBQUwsR0FBdUIsQ0FBL0M7QUFDQSxpQkFBS0UsV0FBTCxHQUFtQixLQUFLRCxjQUFMLEdBQXNCLENBQXpDO0FBQ0EsaUJBQUtFLGdCQUFMLEdBQXdCLENBQXhCO0FBQ0g7OztpQ0FFUWpELEssRUFBTztBQUNaLGdCQUFJLEtBQUs2QyxnQkFBTCxLQUEwQixDQUE5QixFQUFpQztBQUM3QixxQkFBS0EsZ0JBQUwsR0FBd0IsS0FBS08sSUFBTCxFQUF4QjtBQUNBLHFCQUFLTixlQUFMLEdBQXVCLEtBQUtELGdCQUE1QjtBQUNBLHFCQUFLRSxjQUFMLElBQXVCL0MsS0FBdkI7QUFDQSxxQkFBS2dELFdBQUwsSUFBb0JoRCxLQUFwQjtBQUNILGFBTEQsTUFLTyxJQUFJLEtBQUtvRCxJQUFMLEtBQWMsS0FBS04sZUFBbkIsR0FBcUMsSUFBekMsRUFBK0M7QUFDbEQscUJBQUtDLGNBQUwsSUFBdUIvQyxLQUF2QjtBQUNBLHFCQUFLZ0QsV0FBTCxJQUFvQmhELEtBQXBCO0FBQ0gsYUFITSxNQUdBO0FBQUc7QUFDTixxQkFBS2lELGdCQUFMLEdBQXdCLEtBQUtGLGNBQTdCO0FBQ0EscUJBQUtBLGNBQUwsR0FBc0IvQyxLQUF0QjtBQUNBLHFCQUFLZ0QsV0FBTCxJQUFvQmhELEtBQXBCO0FBQ0EscUJBQUs4QyxlQUFMLEdBQXVCLEtBQUtNLElBQUwsRUFBdkI7QUFDSDtBQUNKOzs7NEJBRWlCO0FBQ2QsaUJBQUtuQyxRQUFMLENBQWMsQ0FBZDs7QUFFQSxnQkFBSW9DLGtCQUFrQixDQUFDLEtBQUtELElBQUwsS0FBYyxLQUFLTixlQUFwQixJQUF1QyxJQUE3RDtBQUNBLGdCQUFJTyxtQkFBbUIsQ0FBdkIsRUFBMEJBLGtCQUFrQixDQUFsQjtBQUMxQixtQkFBUSxLQUFLTixjQUFMLEdBQXNCTSxlQUF2QixHQUEwQyxJQUFqRDtBQUNIOzs7NEJBRW9CO0FBQ2pCLGlCQUFLcEMsUUFBTCxDQUFjLENBQWQ7O0FBRUEsZ0JBQUksS0FBS2dDLGdCQUFMLEtBQTBCLENBQTlCLEVBQWlDO0FBQzdCLHVCQUFPLEtBQUtBLGdCQUFMLEdBQXdCLElBQS9CO0FBQ0gsYUFGRCxNQUVPO0FBQUc7QUFDTixvQkFBSSxLQUFLRyxJQUFMLEtBQWMsS0FBS04sZUFBbkIsSUFBc0MsR0FBMUMsRUFBK0M7QUFDM0M7QUFDQTtBQUNBLDJCQUFPLEtBQUtRLFdBQVo7QUFDSCxpQkFKRCxNQUlPO0FBQ0g7QUFDQSwyQkFBTyxDQUFQO0FBQ0g7QUFDSjtBQUNKOzs7NEJBRWlCO0FBQ2QsZ0JBQUlELGtCQUFrQixDQUFDLEtBQUtELElBQUwsS0FBYyxLQUFLUCxnQkFBcEIsSUFBd0MsSUFBOUQ7QUFDQSxtQkFBUSxLQUFLRyxXQUFMLEdBQW1CSyxlQUFwQixHQUF1QyxJQUE5QztBQUNIOzs7Ozs7a0JBSVU5RSxZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzFFZjs7OztBQUNBOztBQUNBOzs7Ozs7OzsrZUFwQkE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTtJQUNNYyxlOzs7OztzQ0FFbUI7QUFDakIsZ0JBQUk7QUFDQSx1QkFBUSxPQUFPOStCLEtBQUtnakMsU0FBWixLQUEwQixXQUFsQztBQUNILGFBRkQsQ0FFRSxPQUFPOWdDLENBQVAsRUFBVTtBQUNSLHVCQUFPLEtBQVA7QUFDSDtBQUNKOzs7QUFFRCwrQkFBYztBQUFBOztBQUFBLHNJQUNKLGtCQURJOztBQUVWLGNBQUs2VSxHQUFMLEdBQVcsaUJBQVg7O0FBRUEsY0FBSzhpQixVQUFMLEdBQWtCLElBQWxCOztBQUVBLGNBQUtvSixHQUFMLEdBQVcsSUFBWDtBQUNBLGNBQUtuSixhQUFMLEdBQXFCLEtBQXJCO0FBQ0EsY0FBS0UsZUFBTCxHQUF1QixDQUF2QjtBQVJVO0FBU2I7Ozs7a0NBRVM7QUFDTixnQkFBSSxLQUFLaUosR0FBVCxFQUFjO0FBQ1YscUJBQUsxbkIsS0FBTDtBQUNIO0FBQ0Q7QUFDSDs7OzZCQUVJd0csVSxFQUFZO0FBQ2IsZ0JBQUk7QUFDQSxvQkFBSW1oQixLQUFLLEtBQUtELEdBQUwsR0FBVyxJQUFJampDLEtBQUtnakMsU0FBVCxDQUFtQmpoQixXQUFXckIsR0FBOUIsQ0FBcEI7QUFDQXdpQixtQkFBR0MsVUFBSCxHQUFnQixhQUFoQjtBQUNBRCxtQkFBR0UsTUFBSCxHQUFZLEtBQUtDLGdCQUFMLENBQXNCL3JCLElBQXRCLENBQTJCLElBQTNCLENBQVo7QUFDQTRyQixtQkFBR0ksT0FBSCxHQUFhLEtBQUtDLGlCQUFMLENBQXVCanNCLElBQXZCLENBQTRCLElBQTVCLENBQWI7QUFDQTRyQixtQkFBRzVoQyxTQUFILEdBQWUsS0FBS2tpQyxtQkFBTCxDQUF5QmxzQixJQUF6QixDQUE4QixJQUE5QixDQUFmO0FBQ0E0ckIsbUJBQUdPLE9BQUgsR0FBYSxLQUFLQyxpQkFBTCxDQUF1QnBzQixJQUF2QixDQUE0QixJQUE1QixDQUFiOztBQUVBLHFCQUFLdWpCLE9BQUwsR0FBZUMscUJBQWFDLFdBQTVCO0FBQ0gsYUFURCxDQVNFLE9BQU83NEIsQ0FBUCxFQUFVO0FBQ1IscUJBQUsyNEIsT0FBTCxHQUFlQyxxQkFBYWMsTUFBNUI7O0FBRUEsb0JBQUkxZSxPQUFPLEVBQUN4QyxNQUFNeFksRUFBRXdZLElBQVQsRUFBZUMsS0FBS3pZLEVBQUUwWCxPQUF0QixFQUFYOztBQUVBLG9CQUFJLEtBQUsyUixRQUFULEVBQW1CO0FBQ2YseUJBQUtBLFFBQUwsQ0FBY3NRLHFCQUFhSSxTQUEzQixFQUFzQy9lLElBQXRDO0FBQ0gsaUJBRkQsTUFFTztBQUNILDBCQUFNLElBQUk4ZSwyQkFBSixDQUFxQjllLEtBQUt2QyxHQUExQixDQUFOO0FBQ0g7QUFDSjtBQUNKOzs7Z0NBRU87QUFDSixnQkFBSXVvQixLQUFLLEtBQUtELEdBQWQ7QUFDQSxnQkFBSUMsT0FBT0EsR0FBRzNwQixVQUFILEtBQWtCLENBQWxCLElBQXVCMnBCLEdBQUczcEIsVUFBSCxLQUFrQixDQUFoRCxDQUFKLEVBQXdEO0FBQUc7QUFDdkQscUJBQUt1Z0IsYUFBTCxHQUFxQixJQUFyQjtBQUNBb0osbUJBQUdTLEtBQUg7QUFDSDs7QUFFRCxpQkFBS1YsR0FBTCxHQUFXLElBQVg7QUFDQSxpQkFBS3BJLE9BQUwsR0FBZUMscUJBQWF1QixTQUE1QjtBQUNIOzs7eUNBRWdCbjZCLEMsRUFBRztBQUNoQixpQkFBSzI0QixPQUFMLEdBQWVDLHFCQUFhMkIsVUFBNUI7QUFDSDs7OzBDQUVpQnY2QixDLEVBQUc7QUFDakIsZ0JBQUksS0FBSzQzQixhQUFMLEtBQXVCLElBQTNCLEVBQWlDO0FBQzdCLHFCQUFLQSxhQUFMLEdBQXFCLEtBQXJCO0FBQ0E7QUFDSDs7QUFFRCxpQkFBS2UsT0FBTCxHQUFlQyxxQkFBYXVCLFNBQTVCOztBQUVBLGdCQUFJLEtBQUtDLFdBQVQsRUFBc0I7QUFDbEIscUJBQUtBLFdBQUwsQ0FBaUIsQ0FBakIsRUFBb0IsS0FBS3RDLGVBQUwsR0FBdUIsQ0FBM0M7QUFDSDtBQUNKOzs7NENBRW1COTNCLEMsRUFBRztBQUFBOztBQUNuQixnQkFBSUEsRUFBRWhCLElBQUYsWUFBa0JnbUIsV0FBdEIsRUFBbUM7QUFDL0IscUJBQUswYyxvQkFBTCxDQUEwQjFoQyxFQUFFaEIsSUFBNUI7QUFDSCxhQUZELE1BRU8sSUFBSWdCLEVBQUVoQixJQUFGLFlBQWtCZ08sSUFBdEIsRUFBNEI7QUFDL0Isb0JBQUlndEIsU0FBUyxJQUFJMkgsVUFBSixFQUFiO0FBQ0EzSCx1QkFBTzRILE1BQVAsR0FBZ0IsWUFBTTtBQUNsQiwyQkFBS0Ysb0JBQUwsQ0FBMEIxSCxPQUFPeFIsTUFBakM7QUFDSCxpQkFGRDtBQUdBd1IsdUJBQU82SCxpQkFBUCxDQUF5QjdoQyxFQUFFaEIsSUFBM0I7QUFDSCxhQU5NLE1BTUE7QUFDSCxxQkFBSzI1QixPQUFMLEdBQWVDLHFCQUFhYyxNQUE1QjtBQUNBLG9CQUFJMWUsT0FBTyxFQUFDeEMsTUFBTSxDQUFDLENBQVIsRUFBV0MsS0FBSyx5Q0FBeUN6WSxFQUFFaEIsSUFBRixDQUFPc0IsV0FBUCxDQUFtQnFLLElBQTVFLEVBQVg7O0FBRUEsb0JBQUksS0FBSzBlLFFBQVQsRUFBbUI7QUFDZix5QkFBS0EsUUFBTCxDQUFjc1EscUJBQWFJLFNBQTNCLEVBQXNDL2UsSUFBdEM7QUFDSCxpQkFGRCxNQUVPO0FBQ0gsMEJBQU0sSUFBSThlLDJCQUFKLENBQXFCOWUsS0FBS3ZDLEdBQTFCLENBQU47QUFDSDtBQUNKO0FBQ0o7Ozs2Q0FFb0JxcEIsVyxFQUFhO0FBQzlCLGdCQUFJalcsUUFBUWlXLFdBQVo7QUFDQSxnQkFBSXJnQixZQUFZLEtBQUtxVyxlQUFyQjtBQUNBLGlCQUFLQSxlQUFMLElBQXdCak0sTUFBTWpSLFVBQTlCOztBQUVBLGdCQUFJLEtBQUs0ZixjQUFULEVBQXlCO0FBQ3JCLHFCQUFLQSxjQUFMLENBQW9CM08sS0FBcEIsRUFBMkJwSyxTQUEzQixFQUFzQyxLQUFLcVcsZUFBM0M7QUFDSDtBQUNKOzs7MENBRWlCOTNCLEMsRUFBRztBQUNqQixpQkFBSzI0QixPQUFMLEdBQWVDLHFCQUFhYyxNQUE1Qjs7QUFFQSxnQkFBSTFlLE9BQU87QUFDUHhDLHNCQUFNeFksRUFBRXdZLElBREQ7QUFFUEMscUJBQUt6WSxFQUFFMFg7QUFGQSxhQUFYOztBQUtBLGdCQUFJLEtBQUsyUixRQUFULEVBQW1CO0FBQ2YscUJBQUtBLFFBQUwsQ0FBY3NRLHFCQUFhSSxTQUEzQixFQUFzQy9lLElBQXRDO0FBQ0gsYUFGRCxNQUVPO0FBQ0gsc0JBQU0sSUFBSThlLDJCQUFKLENBQXFCOWUsS0FBS3ZDLEdBQTFCLENBQU47QUFDSDtBQUNKOzs7O0VBM0h5QmlpQixrQjs7a0JBK0hma0MsZTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BJZjs7OztBQUNBOztBQUNBOzs7Ozs7OzsrZUFwQkE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTtJQUNNQyxnQjs7Ozs7c0NBRW1CO0FBQ2pCLGdCQUFJO0FBQ0Esb0JBQUlrRixNQUFNLElBQUlDLGNBQUosRUFBVjtBQUNBO0FBQ0FELG9CQUFJcGhCLElBQUosQ0FBUyxLQUFULEVBQWdCLHFCQUFoQixFQUF1QyxJQUF2QztBQUNBb2hCLG9CQUFJRSxZQUFKLEdBQW1CLHlCQUFuQjtBQUNBLHVCQUFRRixJQUFJRSxZQUFKLEtBQXFCLHlCQUE3QjtBQUNILGFBTkQsQ0FNRSxPQUFPamlDLENBQVAsRUFBVTtBQUNSeVgsaUNBQUkwUCxDQUFKLENBQU0sa0JBQU4sRUFBMEJubkIsRUFBRTBYLE9BQTVCO0FBQ0EsdUJBQU8sS0FBUDtBQUNIO0FBQ0o7OztBQUVELDhCQUFZK2YsV0FBWixFQUF5QjdpQixNQUF6QixFQUFpQztBQUFBOztBQUFBLHdJQUN2Qix3QkFEdUI7O0FBRTdCLGNBQUtDLEdBQUwsR0FBVyxrQkFBWDs7QUFFQSxjQUFLNmlCLFlBQUwsR0FBb0JELFdBQXBCO0FBQ0EsY0FBSzNpQixPQUFMLEdBQWVGLE1BQWY7QUFDQSxjQUFLK2lCLFVBQUwsR0FBa0IsSUFBbEI7O0FBRUEsY0FBS3VLLElBQUwsR0FBWSxJQUFaO0FBQ0EsY0FBS3RLLGFBQUwsR0FBcUIsS0FBckI7QUFDQSxjQUFLQyxjQUFMLEdBQXNCLElBQXRCO0FBQ0EsY0FBS0MsZUFBTCxHQUF1QixDQUF2QjtBQVg2QjtBQVloQzs7OztrQ0FFUztBQUNOLGdCQUFJLEtBQUtqWCxTQUFMLEVBQUosRUFBc0I7QUFDbEIscUJBQUt4SCxLQUFMO0FBQ0g7QUFDRCxnQkFBSSxLQUFLNm9CLElBQVQsRUFBZTtBQUNYLHFCQUFLQSxJQUFMLENBQVVDLGtCQUFWLEdBQStCLElBQS9CO0FBQ0EscUJBQUtELElBQUwsQ0FBVUUsVUFBVixHQUF1QixJQUF2QjtBQUNBLHFCQUFLRixJQUFMLENBQVVHLFNBQVYsR0FBc0IsSUFBdEI7QUFDQSxxQkFBS0gsSUFBTCxDQUFVWCxPQUFWLEdBQW9CLElBQXBCO0FBQ0EscUJBQUtXLElBQUwsR0FBWSxJQUFaO0FBQ0g7QUFDRDtBQUNIOzs7NkJBRUlyaUIsVSxFQUFZMUYsSyxFQUFPO0FBQ3BCLGlCQUFLNGQsV0FBTCxHQUFtQmxZLFVBQW5CO0FBQ0EsaUJBQUttWSxNQUFMLEdBQWM3ZCxLQUFkOztBQUVBLGdCQUFJOGQsWUFBWXBZLFdBQVdyQixHQUEzQjtBQUNBLGdCQUFJLEtBQUsxSixPQUFMLENBQWFuRyxrQkFBYixJQUFtQ2tSLFdBQVdtRCxhQUFYLElBQTRCeGxCLFNBQW5FLEVBQThFO0FBQzFFeTZCLDRCQUFZcFksV0FBV21ELGFBQXZCO0FBQ0g7O0FBRUQsZ0JBQUlrVixhQUFhLEtBQUtSLFlBQUwsQ0FBa0JwYixTQUFsQixDQUE0QjJiLFNBQTVCLEVBQXVDOWQsS0FBdkMsQ0FBakI7QUFDQSxpQkFBS21vQixXQUFMLEdBQW1CcEssV0FBVzFaLEdBQTlCOztBQUVBLGdCQUFJdWpCLE1BQU0sS0FBS0csSUFBTCxHQUFZLElBQUlGLGNBQUosRUFBdEI7QUFDQUQsZ0JBQUlwaEIsSUFBSixDQUFTLEtBQVQsRUFBZ0J1WCxXQUFXMVosR0FBM0IsRUFBZ0MsSUFBaEM7QUFDQXVqQixnQkFBSUUsWUFBSixHQUFtQix5QkFBbkI7QUFDQUYsZ0JBQUlJLGtCQUFKLEdBQXlCLEtBQUtJLG1CQUFMLENBQXlCbnRCLElBQXpCLENBQThCLElBQTlCLENBQXpCO0FBQ0Eyc0IsZ0JBQUlLLFVBQUosR0FBaUIsS0FBS0ksV0FBTCxDQUFpQnB0QixJQUFqQixDQUFzQixJQUF0QixDQUFqQjtBQUNBMnNCLGdCQUFJTSxTQUFKLEdBQWdCLEtBQUtJLFVBQUwsQ0FBZ0JydEIsSUFBaEIsQ0FBcUIsSUFBckIsQ0FBaEI7QUFDQTJzQixnQkFBSVIsT0FBSixHQUFjLEtBQUttQixXQUFMLENBQWlCdHRCLElBQWpCLENBQXNCLElBQXRCLENBQWQ7O0FBRUE7O0FBRUE7QUFDQSxnQkFBSXlLLFdBQVduQixlQUFmLEVBQWdDO0FBQzVCcWpCLG9CQUFJcmpCLGVBQUosR0FBc0IsSUFBdEI7QUFDSDs7QUFFRCxnQkFBSSxRQUFPd1osV0FBV0MsT0FBbEIsTUFBOEIsUUFBbEMsRUFBNEM7QUFDeEMsb0JBQUlBLFVBQVVELFdBQVdDLE9BQXpCOztBQUVBLHFCQUFLLElBQUl6dkIsR0FBVCxJQUFnQnl2QixPQUFoQixFQUF5QjtBQUNyQix3QkFBSUEsUUFBUXJkLGNBQVIsQ0FBdUJwUyxHQUF2QixDQUFKLEVBQWlDO0FBQzdCcTVCLDRCQUFJWSxnQkFBSixDQUFxQmo2QixHQUFyQixFQUEwQnl2QixRQUFRenZCLEdBQVIsQ0FBMUI7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsaUJBQUtpd0IsT0FBTCxHQUFlQyxxQkFBYUMsV0FBNUI7QUFDQWtKLGdCQUFJYSxJQUFKO0FBQ0g7OztnQ0FFTztBQUNKLGlCQUFLaEwsYUFBTCxHQUFxQixJQUFyQjtBQUNBLGdCQUFJLEtBQUtzSyxJQUFULEVBQWU7QUFDWCxxQkFBS0EsSUFBTCxDQUFVN29CLEtBQVY7QUFDSDtBQUNELGlCQUFLc2YsT0FBTCxHQUFlQyxxQkFBYXVCLFNBQTVCO0FBQ0g7Ozs0Q0FFbUJuNkIsQyxFQUFHO0FBQ25CLGdCQUFJK2hDLE1BQU0vaEMsRUFBRWlhLE1BQVo7O0FBRUEsZ0JBQUk4bkIsSUFBSTFxQixVQUFKLEtBQW1CLENBQXZCLEVBQTBCO0FBQUc7QUFDekIsb0JBQUkwcUIsSUFBSWMsV0FBSixJQUFtQnJsQyxTQUFuQixJQUFnQ3VrQyxJQUFJYyxXQUFKLEtBQW9CLEtBQUtQLFdBQTdELEVBQTBFO0FBQ3RFLHdCQUFJLEtBQUtwSixjQUFULEVBQXlCO0FBQ3JCLDRCQUFJbFcsZ0JBQWdCLEtBQUswVSxZQUFMLENBQWtCeUIsbUJBQWxCLENBQXNDNEksSUFBSWMsV0FBMUMsQ0FBcEI7QUFDQSw2QkFBSzNKLGNBQUwsQ0FBb0JsVyxhQUFwQjtBQUNIO0FBQ0o7O0FBRUQsb0JBQUkrZSxJQUFJOUksTUFBSixLQUFlLENBQWYsS0FBcUI4SSxJQUFJOUksTUFBSixHQUFhLEdBQWIsSUFBb0I4SSxJQUFJOUksTUFBSixHQUFhLEdBQXRELENBQUosRUFBZ0U7QUFDNUQseUJBQUtOLE9BQUwsR0FBZUMscUJBQWFjLE1BQTVCO0FBQ0Esd0JBQUksS0FBS3JRLFFBQVQsRUFBbUI7QUFDZiw2QkFBS0EsUUFBTCxDQUFjc1EscUJBQWFDLHdCQUEzQixFQUFxRCxFQUFDcGhCLE1BQU11cEIsSUFBSTlJLE1BQVgsRUFBbUJ4Z0IsS0FBS3NwQixJQUFJbEksVUFBNUIsRUFBckQ7QUFDSCxxQkFGRCxNQUVPO0FBQ0gsOEJBQU0sSUFBSUMsMkJBQUosQ0FBcUIsMENBQTBDaUksSUFBSTlJLE1BQTlDLEdBQXVELEdBQXZELEdBQTZEOEksSUFBSWxJLFVBQXRGLENBQU47QUFDSDtBQUNKLGlCQVBELE1BT087QUFDSCx5QkFBS2xCLE9BQUwsR0FBZUMscUJBQWEyQixVQUE1QjtBQUNIO0FBQ0o7QUFDSjs7O29DQUVXdjZCLEMsRUFBRztBQUNYLGdCQUFJLEtBQUsyNEIsT0FBTCxLQUFpQkMscUJBQWFjLE1BQWxDLEVBQTBDO0FBQ3RDO0FBQ0E7QUFDSDs7QUFFRCxnQkFBSSxLQUFLN0IsY0FBTCxLQUF3QixJQUE1QixFQUFrQztBQUM5QixvQkFBSTczQixFQUFFOGlDLEtBQUYsS0FBWSxJQUFaLElBQW9COWlDLEVBQUU4aUMsS0FBRixLQUFZLENBQXBDLEVBQXVDO0FBQ25DLHlCQUFLakwsY0FBTCxHQUFzQjczQixFQUFFOGlDLEtBQXhCO0FBQ0Esd0JBQUksS0FBS3hKLHFCQUFULEVBQWdDO0FBQzVCLDZCQUFLQSxxQkFBTCxDQUEyQixLQUFLekIsY0FBaEM7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsZ0JBQUloTSxRQUFRN3JCLEVBQUVpYSxNQUFGLENBQVM4b0IsUUFBckI7QUFDQSxnQkFBSXRoQixZQUFZLEtBQUt1VyxNQUFMLENBQVlxQyxJQUFaLEdBQW1CLEtBQUt2QyxlQUF4QztBQUNBLGlCQUFLQSxlQUFMLElBQXdCak0sTUFBTWpSLFVBQTlCOztBQUVBLGdCQUFJLEtBQUs0ZixjQUFULEVBQXlCO0FBQ3JCLHFCQUFLQSxjQUFMLENBQW9CM08sS0FBcEIsRUFBMkJwSyxTQUEzQixFQUFzQyxLQUFLcVcsZUFBM0M7QUFDSDtBQUNKOzs7bUNBRVU5M0IsQyxFQUFHO0FBQ1YsZ0JBQUksS0FBSzQzQixhQUFMLEtBQXVCLElBQTNCLEVBQWlDO0FBQzdCLHFCQUFLQSxhQUFMLEdBQXFCLEtBQXJCO0FBQ0E7QUFDSCxhQUhELE1BR08sSUFBSSxLQUFLZSxPQUFMLEtBQWlCQyxxQkFBYWMsTUFBbEMsRUFBMEM7QUFDN0M7QUFDSDs7QUFFRCxpQkFBS2YsT0FBTCxHQUFlQyxxQkFBYXVCLFNBQTVCO0FBQ0EsZ0JBQUksS0FBS0MsV0FBVCxFQUFzQjtBQUNsQixxQkFBS0EsV0FBTCxDQUFpQixLQUFLcEMsTUFBTCxDQUFZcUMsSUFBN0IsRUFBbUMsS0FBS3JDLE1BQUwsQ0FBWXFDLElBQVosR0FBbUIsS0FBS3ZDLGVBQXhCLEdBQTBDLENBQTdFO0FBQ0g7QUFDSjs7O29DQUVXOTNCLEMsRUFBRztBQUNYLGlCQUFLMjRCLE9BQUwsR0FBZUMscUJBQWFjLE1BQTVCO0FBQ0EsZ0JBQUkxOUIsT0FBTyxDQUFYO0FBQ0EsZ0JBQUlnZixPQUFPLElBQVg7O0FBRUEsZ0JBQUksS0FBSzZjLGNBQUwsSUFBdUI3M0IsRUFBRWdqQyxNQUFGLEdBQVcsS0FBS25MLGNBQTNDLEVBQTJEO0FBQ3ZENzdCLHVCQUFPMjlCLHFCQUFhYyxTQUFwQjtBQUNBemYsdUJBQU8sRUFBQ3hDLE1BQU0sQ0FBQyxDQUFSLEVBQVdDLEtBQUssbUNBQWhCLEVBQVA7QUFDSCxhQUhELE1BR087QUFDSHpjLHVCQUFPMjlCLHFCQUFhSSxTQUFwQjtBQUNBL2UsdUJBQU8sRUFBQ3hDLE1BQU0sQ0FBQyxDQUFSLEVBQVdDLEtBQUt6WSxFQUFFTSxXQUFGLENBQWNxSyxJQUFkLEdBQXFCLEdBQXJCLEdBQTJCM0ssRUFBRWhFLElBQTdDLEVBQVA7QUFDSDs7QUFFRCxnQkFBSSxLQUFLcXRCLFFBQVQsRUFBbUI7QUFDZixxQkFBS0EsUUFBTCxDQUFjcnRCLElBQWQsRUFBb0JnZixJQUFwQjtBQUNILGFBRkQsTUFFTztBQUNILHNCQUFNLElBQUk4ZSwyQkFBSixDQUFxQjllLEtBQUt2QyxHQUExQixDQUFOO0FBQ0g7QUFDSjs7OztFQTVLMEJpaUIsa0I7O2tCQWdMaEJtQyxnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JMZjs7OztBQUNBOztBQUNBOzs7Ozs7OzsrZUFwQkE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTs7Ozs7Ozs7Ozs7SUFXTW9HLGM7Ozs7O3NDQUVtQjtBQUNqQixnQkFBSTtBQUNBLG9CQUFJLE9BQU9ubEMsS0FBS29sQyxRQUFaLEtBQXlCLFdBQXpCLElBQXdDLE9BQU9wbEMsS0FBS3FsQyxjQUFaLEtBQStCLFdBQTNFLEVBQXdGO0FBQ3BGLDJCQUFPLEtBQVA7QUFDSDs7QUFFRCxvQkFBSXBCLE1BQU0sSUFBSUMsY0FBSixFQUFWO0FBQ0FELG9CQUFJcGhCLElBQUosQ0FBUyxLQUFULEVBQWdCLHFCQUFoQixFQUF1QyxJQUF2QztBQUNBb2hCLG9CQUFJRSxZQUFKLEdBQW1CLFdBQW5CO0FBQ0EsdUJBQVFGLElBQUlFLFlBQUosS0FBcUIsV0FBN0I7QUFDSCxhQVRELENBU0UsT0FBT2ppQyxDQUFQLEVBQVU7QUFDUnlYLGlDQUFJMFAsQ0FBSixDQUFNLGdCQUFOLEVBQXdCbm5CLEVBQUUwWCxPQUExQjtBQUNBLHVCQUFPLEtBQVA7QUFDSDtBQUNKOzs7QUFFRCw0QkFBWStmLFdBQVosRUFBeUI3aUIsTUFBekIsRUFBaUM7QUFBQTs7QUFBQSxvSUFDdkIscUJBRHVCOztBQUU3QixjQUFLQyxHQUFMLEdBQVcsZ0JBQVg7O0FBRUEsY0FBSzZpQixZQUFMLEdBQW9CRCxXQUFwQjtBQUNBLGNBQUszaUIsT0FBTCxHQUFlRixNQUFmO0FBQ0EsY0FBSytpQixVQUFMLEdBQWtCLElBQWxCOztBQUVBLGNBQUt1SyxJQUFMLEdBQVksSUFBWjtBQUNBLGNBQUtrQixPQUFMLEdBQWUsSUFBZixDQVQ2QixDQVNQOztBQUV0QixjQUFLQyxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsY0FBSzNILGFBQUwsR0FBcUIsSUFBckI7O0FBRUEsY0FBSzRILGtCQUFMLEdBQTBCLElBQTFCO0FBQ0EsY0FBS0MscUJBQUwsR0FBNkIsSUFBN0I7O0FBRUEsY0FBSzFMLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxjQUFLQyxlQUFMLEdBQXVCLENBQXZCOztBQUVBLGNBQUswTCxZQUFMLEdBQW9CLEtBQUssSUFBTCxHQUFZLElBQWhDLENBcEI2QixDQW9CVTtBQUN2QyxjQUFLQyxtQkFBTCxHQUEyQixDQUEzQjtBQUNBLGNBQUtDLGVBQUwsR0FBdUIsS0FBdkI7QUF0QjZCO0FBdUJoQzs7OztrQ0FFUztBQUNOLGdCQUFJLEtBQUs3aUIsU0FBTCxFQUFKLEVBQXNCO0FBQ2xCLHFCQUFLeEgsS0FBTDtBQUNIO0FBQ0QsZ0JBQUksS0FBSytwQixPQUFULEVBQWtCO0FBQ2QscUJBQUtBLE9BQUwsQ0FBYWhCLFVBQWIsR0FBMEIsSUFBMUI7QUFDQSxxQkFBS2dCLE9BQUwsQ0FBYXhCLE1BQWIsR0FBc0IsSUFBdEI7QUFDQSxxQkFBS3dCLE9BQUwsQ0FBYTdCLE9BQWIsR0FBdUIsSUFBdkI7QUFDQSxxQkFBSzZCLE9BQUwsR0FBZSxJQUFmO0FBQ0g7QUFDRCxnQkFBSSxLQUFLbEIsSUFBVCxFQUFlO0FBQ1gscUJBQUtBLElBQUwsQ0FBVUMsa0JBQVYsR0FBK0IsSUFBL0I7QUFDQSxxQkFBS0QsSUFBTCxHQUFZLElBQVo7QUFDSDtBQUNEO0FBQ0g7Ozs2QkFFSXJpQixVLEVBQVkxRixLLEVBQU87QUFDcEIsaUJBQUt3cEIsYUFBTCxDQUFtQjlqQixVQUFuQixFQUErQjFGLEtBQS9CLEVBQXNDLEtBQXRDO0FBQ0g7OztzQ0FFYTBGLFUsRUFBWTFGLEssRUFBT3lwQixVLEVBQVk7QUFDekMsaUJBQUs3TCxXQUFMLEdBQW1CbFksVUFBbkI7O0FBRUEsZ0JBQUksQ0FBQytqQixVQUFMLEVBQWlCO0FBQ2IscUJBQUtQLFdBQUwsR0FBbUJscEIsS0FBbkI7QUFDSCxhQUZELE1BRU87QUFDSCxxQkFBS3VoQixhQUFMLEdBQXFCdmhCLEtBQXJCO0FBQ0g7O0FBRUQsZ0JBQUk4ZCxZQUFZcFksV0FBV3JCLEdBQTNCO0FBQ0EsZ0JBQUksS0FBSzFKLE9BQUwsQ0FBYW5HLGtCQUFqQixFQUFxQztBQUNqQyxvQkFBSSxLQUFLNDBCLHFCQUFMLElBQThCL2xDLFNBQWxDLEVBQTZDO0FBQ3pDeTZCLGdDQUFZLEtBQUtzTCxxQkFBakI7QUFDSCxpQkFGRCxNQUVPLElBQUkxakIsV0FBV21ELGFBQVgsSUFBNEJ4bEIsU0FBaEMsRUFBMkM7QUFDOUN5NkIsZ0NBQVlwWSxXQUFXbUQsYUFBdkI7QUFDSDtBQUNKOztBQUVELGdCQUFJa1YsYUFBYSxLQUFLUixZQUFMLENBQWtCcGIsU0FBbEIsQ0FBNEIyYixTQUE1QixFQUF1QzlkLEtBQXZDLENBQWpCO0FBQ0EsaUJBQUttcEIsa0JBQUwsR0FBMEJwTCxXQUFXMVosR0FBckM7O0FBRUEsZ0JBQUl3YixTQUFTLEtBQUtvSixPQUFMLEdBQWUsSUFBSXRsQyxLQUFLcWxDLGNBQVQsRUFBNUI7QUFDQW5KLG1CQUFPb0ksVUFBUCxHQUFvQixLQUFLeUIsY0FBTCxDQUFvQnp1QixJQUFwQixDQUF5QixJQUF6QixDQUFwQjtBQUNBNGtCLG1CQUFPNEgsTUFBUCxHQUFnQixLQUFLa0MsVUFBTCxDQUFnQjF1QixJQUFoQixDQUFxQixJQUFyQixDQUFoQjtBQUNBNGtCLG1CQUFPdUgsT0FBUCxHQUFpQixLQUFLd0MsV0FBTCxDQUFpQjN1QixJQUFqQixDQUFzQixJQUF0QixDQUFqQjs7QUFFQSxnQkFBSTJzQixNQUFNLEtBQUtHLElBQUwsR0FBWSxJQUFJRixjQUFKLEVBQXRCO0FBQ0FELGdCQUFJcGhCLElBQUosQ0FBUyxLQUFULEVBQWdCdVgsV0FBVzFaLEdBQTNCLEVBQWdDLElBQWhDO0FBQ0F1akIsZ0JBQUlFLFlBQUosR0FBbUIsV0FBbkI7QUFDQUYsZ0JBQUlJLGtCQUFKLEdBQXlCLEtBQUs2QixzQkFBTCxDQUE0QjV1QixJQUE1QixDQUFpQyxJQUFqQyxDQUF6QjtBQUNBMnNCLGdCQUFJUixPQUFKLEdBQWMsS0FBSzBDLFdBQUwsQ0FBaUI3dUIsSUFBakIsQ0FBc0IsSUFBdEIsQ0FBZDs7QUFFQSxnQkFBSXlLLFdBQVduQixlQUFmLEVBQWdDO0FBQzVCcWpCLG9CQUFJcmpCLGVBQUosR0FBc0IsSUFBdEI7QUFDSDs7QUFFRCxnQkFBSSxRQUFPd1osV0FBV0MsT0FBbEIsTUFBOEIsUUFBbEMsRUFBNEM7QUFDeEMsb0JBQUlBLFVBQVVELFdBQVdDLE9BQXpCOztBQUVBLHFCQUFLLElBQUl6dkIsR0FBVCxJQUFnQnl2QixPQUFoQixFQUF5QjtBQUNyQix3QkFBSUEsUUFBUXJkLGNBQVIsQ0FBdUJwUyxHQUF2QixDQUFKLEVBQWlDO0FBQzdCcTVCLDRCQUFJWSxnQkFBSixDQUFxQmo2QixHQUFyQixFQUEwQnl2QixRQUFRenZCLEdBQVIsQ0FBMUI7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsZ0JBQUksS0FBS2c3QixlQUFULEVBQTBCO0FBQ3RCLHFCQUFLQSxlQUFMLEdBQXVCLEtBQXZCO0FBQ0gsYUFGRCxNQUVPO0FBQ0gscUJBQUsvSyxPQUFMLEdBQWVDLHFCQUFhQyxXQUE1QjtBQUNIO0FBQ0RrSixnQkFBSWEsSUFBSjtBQUNIOzs7Z0NBRU87QUFDSixpQkFBS2hpQixjQUFMO0FBQ0EsaUJBQUsrWCxPQUFMLEdBQWVDLHFCQUFhdUIsU0FBNUI7QUFDSDs7O3lDQUVnQjtBQUNiLGdCQUFJLEtBQUtpSixPQUFULEVBQWtCO0FBQ2Qsb0JBQUksS0FBS0EsT0FBTCxDQUFhL3JCLFVBQWIsS0FBNEIsQ0FBaEMsRUFBbUM7QUFBRztBQUNsQyx5QkFBSytyQixPQUFMLENBQWEvcEIsS0FBYjtBQUNIO0FBQ0QscUJBQUsrcEIsT0FBTCxDQUFhaEIsVUFBYixHQUEwQixJQUExQjtBQUNBLHFCQUFLZ0IsT0FBTCxDQUFheEIsTUFBYixHQUFzQixJQUF0QjtBQUNBLHFCQUFLd0IsT0FBTCxDQUFhN0IsT0FBYixHQUF1QixJQUF2QjtBQUNBLHFCQUFLNkIsT0FBTCxHQUFlLElBQWY7QUFDSDtBQUNELGdCQUFJLEtBQUtsQixJQUFULEVBQWU7QUFDWCxxQkFBS0EsSUFBTCxDQUFVN29CLEtBQVY7QUFDQSxxQkFBSzZvQixJQUFMLENBQVVDLGtCQUFWLEdBQStCLElBQS9CO0FBQ0EscUJBQUtELElBQUwsR0FBWSxJQUFaO0FBQ0g7QUFDSjs7OytDQUVzQmxpQyxDLEVBQUc7QUFDdEIsZ0JBQUkraEMsTUFBTS9oQyxFQUFFaWEsTUFBWjs7QUFFQSxnQkFBSThuQixJQUFJMXFCLFVBQUosS0FBbUIsQ0FBdkIsRUFBMEI7QUFBRztBQUN6QixvQkFBSTBxQixJQUFJOUksTUFBSixJQUFjLEdBQWQsSUFBcUI4SSxJQUFJOUksTUFBSixJQUFjLEdBQXZDLEVBQTRDO0FBQ3hDLHlCQUFLTixPQUFMLEdBQWVDLHFCQUFhMkIsVUFBNUI7O0FBRUEsd0JBQUl3SCxJQUFJYyxXQUFKLElBQW1CcmxDLFNBQXZCLEVBQWtDO0FBQzlCLDRCQUFJd2xCLGdCQUFnQixLQUFLMFUsWUFBTCxDQUFrQnlCLG1CQUFsQixDQUFzQzRJLElBQUljLFdBQTFDLENBQXBCO0FBQ0EsNEJBQUlkLElBQUljLFdBQUosS0FBb0IsS0FBS1Msa0JBQXpCLElBQStDdGdCLGtCQUFrQixLQUFLdWdCLHFCQUExRSxFQUFpRztBQUM3RixpQ0FBS0EscUJBQUwsR0FBNkJ2Z0IsYUFBN0I7QUFDQSxnQ0FBSSxLQUFLa1csY0FBVCxFQUF5QjtBQUNyQixxQ0FBS0EsY0FBTCxDQUFvQmxXLGFBQXBCO0FBQ0g7QUFDSjtBQUNKOztBQUVELHdCQUFJb1csZUFBZTJJLElBQUltQyxpQkFBSixDQUFzQixnQkFBdEIsQ0FBbkI7QUFDQSx3QkFBSTlLLGdCQUFnQixJQUFoQixJQUF3QixLQUFLdkIsY0FBTCxJQUF1QixJQUFuRCxFQUF5RDtBQUNyRCw0QkFBSTEwQixTQUFTazJCLFNBQVNELFlBQVQsQ0FBYjtBQUNBLDRCQUFJajJCLFNBQVMsQ0FBYixFQUFnQjtBQUNaLGlDQUFLMDBCLGNBQUwsR0FBc0IxMEIsTUFBdEI7QUFDQSxnQ0FBSSxLQUFLbTJCLHFCQUFULEVBQWdDO0FBQzVCLHFDQUFLQSxxQkFBTCxDQUEyQixLQUFLekIsY0FBaEM7QUFDSDtBQUNKO0FBQ0o7QUFDSixpQkF2QkQsTUF1Qk87QUFDSCx5QkFBS2MsT0FBTCxHQUFlQyxxQkFBYWMsTUFBNUI7QUFDQSx3QkFBSSxLQUFLclEsUUFBVCxFQUFtQjtBQUNmLDZCQUFLQSxRQUFMLENBQWNzUSxxQkFBYUMsd0JBQTNCLEVBQXFELEVBQUNwaEIsTUFBTXVwQixJQUFJOUksTUFBWCxFQUFtQnhnQixLQUFLc3BCLElBQUlsSSxVQUE1QixFQUFyRDtBQUNILHFCQUZELE1BRU87QUFDSCw4QkFBTSxJQUFJQywyQkFBSixDQUFxQix3Q0FBd0NpSSxJQUFJOUksTUFBNUMsR0FBcUQsR0FBckQsR0FBMkQ4SSxJQUFJbEksVUFBcEYsQ0FBTjtBQUNIO0FBQ0o7QUFDSixhQWhDRCxNQWdDTyxJQUFJa0ksSUFBSTFxQixVQUFKLEtBQW1CLENBQXZCLEVBQTBCO0FBQUc7QUFDaEMsb0JBQUkwcUIsSUFBSTlJLE1BQUosSUFBYyxHQUFkLElBQXFCOEksSUFBSTlJLE1BQUosSUFBYyxHQUF2QyxFQUE0QztBQUN4Qyx5QkFBS04sT0FBTCxHQUFlQyxxQkFBYTJCLFVBQTVCOztBQUVBLHdCQUFJNEosV0FBV3BDLElBQUlnQixRQUFuQjtBQUNBLHlCQUFLSyxPQUFMLENBQWF2QixpQkFBYixDQUErQnNDLFFBQS9CO0FBQ0g7QUFDSjtBQUNKOzs7b0NBRVdua0MsQyxFQUFHO0FBQ1gsaUJBQUsyNEIsT0FBTCxHQUFlQyxxQkFBYWMsTUFBNUI7QUFDQSxnQkFBSTE5QixPQUFPMjlCLHFCQUFhSSxTQUF4QjtBQUNBLGdCQUFJL2UsT0FBTyxFQUFDeEMsTUFBTSxDQUFDLENBQVIsRUFBV0MsS0FBS3pZLEVBQUVNLFdBQUYsQ0FBY3FLLElBQWQsR0FBcUIsR0FBckIsR0FBMkIzSyxFQUFFaEUsSUFBN0MsRUFBWDs7QUFFQSxnQkFBSSxLQUFLcXRCLFFBQVQsRUFBbUI7QUFDZixxQkFBS0EsUUFBTCxDQUFjcnRCLElBQWQsRUFBb0JnZixJQUFwQjtBQUNILGFBRkQsTUFFTztBQUNILHNCQUFNLElBQUk4ZSwyQkFBSixDQUFxQjllLEtBQUt2QyxHQUExQixDQUFOO0FBQ0g7QUFDSjs7O3VDQUVjelksQyxFQUFHO0FBQ2QsZ0JBQUlnNkIsU0FBU2g2QixFQUFFaWEsTUFBZjtBQUNBLGdCQUFJbXFCLFlBQVlwSyxPQUFPeFIsTUFBdkI7QUFDQSxnQkFBSTRiLGFBQWEsSUFBakIsRUFBdUI7QUFBRztBQUN0QixxQkFBS0Msb0JBQUw7QUFDQTtBQUNIOztBQUVELGdCQUFJOThCLFFBQVE2OEIsVUFBVTc4QixLQUFWLENBQWdCLEtBQUtrOEIsbUJBQXJCLENBQVo7QUFDQSxpQkFBS0EsbUJBQUwsR0FBMkJXLFVBQVV4cEIsVUFBckM7QUFDQSxnQkFBSTZHLFlBQVksS0FBSzRoQixXQUFMLENBQWlCaEosSUFBakIsR0FBd0IsS0FBS3ZDLGVBQTdDO0FBQ0EsaUJBQUtBLGVBQUwsSUFBd0J2d0IsTUFBTXFULFVBQTlCOztBQUVBLGdCQUFJLEtBQUs0ZixjQUFULEVBQXlCO0FBQ3JCLHFCQUFLQSxjQUFMLENBQW9CanpCLEtBQXBCLEVBQTJCa2EsU0FBM0IsRUFBc0MsS0FBS3FXLGVBQTNDO0FBQ0g7O0FBRUQsZ0JBQUlzTSxVQUFVeHBCLFVBQVYsSUFBd0IsS0FBSzRvQixZQUFqQyxFQUErQztBQUMzQy9yQixpQ0FBSVksQ0FBSixDQUFNLEtBQUt4RCxHQUFYLCtDQUEwRDRNLFlBQVlsYSxNQUFNcVQsVUFBNUU7QUFDQSxxQkFBS3lwQixvQkFBTDtBQUNIO0FBQ0o7OzsrQ0FFc0I7QUFDbkIsZ0JBQUksS0FBS3hNLGNBQUwsSUFBdUIsSUFBdkIsSUFBK0IsS0FBS0MsZUFBTCxHQUF1QixLQUFLRCxjQUEvRCxFQUErRTtBQUMzRSxxQkFBSzZMLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxxQkFBS0QsbUJBQUwsR0FBMkIsQ0FBM0I7QUFDQSxxQkFBSzdpQixjQUFMOztBQUVBLG9CQUFJekcsUUFBUTtBQUNSa2dCLDBCQUFNLEtBQUtnSixXQUFMLENBQWlCaEosSUFBakIsR0FBd0IsS0FBS3ZDLGVBRDNCO0FBRVJ1Rix3QkFBSSxDQUFDO0FBRkcsaUJBQVo7QUFJQSxxQkFBS3NHLGFBQUwsQ0FBbUIsS0FBSzVMLFdBQXhCLEVBQXFDNWQsS0FBckMsRUFBNEMsSUFBNUM7QUFDSDtBQUNKOzs7bUNBRVVuYSxDLEVBQUc7QUFBRztBQUNiLGlCQUFLMjRCLE9BQUwsR0FBZUMscUJBQWF1QixTQUE1QjtBQUNBLGdCQUFJLEtBQUtDLFdBQVQsRUFBc0I7QUFDbEIscUJBQUtBLFdBQUwsQ0FBaUIsS0FBS2lKLFdBQUwsQ0FBaUJoSixJQUFsQyxFQUF3QyxLQUFLZ0osV0FBTCxDQUFpQmhKLElBQWpCLEdBQXdCLEtBQUt2QyxlQUE3QixHQUErQyxDQUF2RjtBQUNIO0FBQ0o7OztvQ0FFVzkzQixDLEVBQUc7QUFDWCxpQkFBSzI0QixPQUFMLEdBQWVDLHFCQUFhYyxNQUE1QjtBQUNBLGdCQUFJMTlCLE9BQU8sQ0FBWDtBQUNBLGdCQUFJZ2YsT0FBTyxJQUFYOztBQUVBLGdCQUFJLEtBQUs2YyxjQUFMLElBQXVCLEtBQUtDLGVBQUwsR0FBdUIsS0FBS0QsY0FBdkQsRUFBdUU7QUFDbkU3N0IsdUJBQU8yOUIscUJBQWFjLFNBQXBCO0FBQ0F6Zix1QkFBTyxFQUFDeEMsTUFBTSxDQUFDLENBQVIsRUFBV0MsS0FBSyx5QkFBaEIsRUFBUDtBQUNILGFBSEQsTUFHTztBQUNIemMsdUJBQU8yOUIscUJBQWFjLFNBQXBCO0FBQ0F6Zix1QkFBTyxFQUFDeEMsTUFBTSxDQUFDLENBQVIsRUFBV0MsS0FBS3pZLEVBQUVNLFdBQUYsQ0FBY3FLLElBQWQsR0FBcUIsR0FBckIsR0FBMkIzSyxFQUFFaEUsSUFBN0MsRUFBUDtBQUNIOztBQUVELGdCQUFJLEtBQUtxdEIsUUFBVCxFQUFtQjtBQUNmLHFCQUFLQSxRQUFMLENBQWNydEIsSUFBZCxFQUFvQmdmLElBQXBCO0FBQ0gsYUFGRCxNQUVPO0FBQ0gsc0JBQU0sSUFBSThlLDJCQUFKLENBQXFCOWUsS0FBS3ZDLEdBQTFCLENBQU47QUFDSDtBQUNKOzs7O0VBblF3QmlpQixrQjs7a0JBc1FkdUksYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JSZjs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7Ozs7OytlQXJCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBO0lBQ01uRyxXOzs7OztzQ0FFbUI7QUFDakIsZ0JBQUk7QUFDQSxvQkFBSWlGLE1BQU0sSUFBSUMsY0FBSixFQUFWO0FBQ0FELG9CQUFJcGhCLElBQUosQ0FBUyxLQUFULEVBQWdCLHFCQUFoQixFQUF1QyxJQUF2QztBQUNBb2hCLG9CQUFJRSxZQUFKLEdBQW1CLGFBQW5CO0FBQ0EsdUJBQVFGLElBQUlFLFlBQUosS0FBcUIsYUFBN0I7QUFDSCxhQUxELENBS0UsT0FBT2ppQyxDQUFQLEVBQVU7QUFDUnlYLGlDQUFJMFAsQ0FBSixDQUFNLGFBQU4sRUFBcUJubkIsRUFBRTBYLE9BQXZCO0FBQ0EsdUJBQU8sS0FBUDtBQUNIO0FBQ0o7OztBQUVELHlCQUFZK2YsV0FBWixFQUF5QjdpQixNQUF6QixFQUFpQztBQUFBOztBQUFBLDhIQUN2QixrQkFEdUI7O0FBRTdCLGNBQUtDLEdBQUwsR0FBVyxhQUFYOztBQUVBLGNBQUs2aUIsWUFBTCxHQUFvQkQsV0FBcEI7QUFDQSxjQUFLM2lCLE9BQUwsR0FBZUYsTUFBZjtBQUNBLGNBQUsraUIsVUFBTCxHQUFrQixLQUFsQjs7QUFFQSxjQUFLMk0sZ0JBQUwsR0FBd0IsQ0FDcEIsR0FEb0IsRUFDZixHQURlLEVBQ1YsR0FEVSxFQUNMLEdBREssRUFDQSxHQURBLEVBQ0ssSUFETCxFQUNXLElBRFgsRUFDaUIsSUFEakIsRUFDdUIsSUFEdkIsRUFDNkIsSUFEN0IsRUFDbUMsSUFEbkMsRUFDeUMsSUFEekMsRUFDK0MsSUFEL0MsRUFDcUQsSUFEckQsQ0FBeEI7QUFHQSxjQUFLQyxtQkFBTCxHQUEyQixHQUEzQjtBQUNBLGNBQUtDLHVCQUFMLEdBQStCLENBQS9CO0FBQ0EsY0FBS0Msb0JBQUwsR0FBNEIsQ0FBNUI7O0FBRUEsY0FBS3ZDLElBQUwsR0FBWSxJQUFaO0FBQ0EsY0FBS3JHLGFBQUwsR0FBcUIsSUFBSUMsc0JBQUosRUFBckI7O0FBRUEsY0FBS2xFLGFBQUwsR0FBcUIsS0FBckI7QUFDQSxjQUFLOE0sbUJBQUwsR0FBMkIsS0FBM0I7QUFDQSxjQUFLQyxvQkFBTCxHQUE0QixLQUE1Qjs7QUFFQSxjQUFLckIsa0JBQUwsR0FBMEIsSUFBMUI7QUFDQSxjQUFLQyxxQkFBTCxHQUE2QixJQUE3QjtBQUNBLGNBQUtxQixvQkFBTCxHQUE0QixJQUE1QjtBQUNBLGNBQUtwSixZQUFMLEdBQW9CLElBQXBCLENBekI2QixDQXlCRjtBQUMzQixjQUFLM0QsY0FBTCxHQUFzQixJQUF0QixDQTFCNkIsQ0EwQkE7QUFDN0IsY0FBS0MsZUFBTCxHQUF1QixDQUF2QixDQTNCNkIsQ0EyQkY7QUFDM0IsY0FBSytNLGVBQUwsR0FBdUIsQ0FBdkIsQ0E1QjZCLENBNEJGO0FBNUJFO0FBNkJoQzs7OztrQ0FFUztBQUNOLGdCQUFJLEtBQUtoa0IsU0FBTCxFQUFKLEVBQXNCO0FBQ2xCLHFCQUFLeEgsS0FBTDtBQUNIO0FBQ0QsZ0JBQUksS0FBSzZvQixJQUFULEVBQWU7QUFDWCxxQkFBS0EsSUFBTCxDQUFVQyxrQkFBVixHQUErQixJQUEvQjtBQUNBLHFCQUFLRCxJQUFMLENBQVVFLFVBQVYsR0FBdUIsSUFBdkI7QUFDQSxxQkFBS0YsSUFBTCxDQUFVTixNQUFWLEdBQW1CLElBQW5CO0FBQ0EscUJBQUtNLElBQUwsQ0FBVVgsT0FBVixHQUFvQixJQUFwQjtBQUNBLHFCQUFLVyxJQUFMLEdBQVksSUFBWjtBQUNIO0FBQ0Q7QUFDSDs7OzZCQU1JcmlCLFUsRUFBWTFGLEssRUFBTztBQUNwQixpQkFBSzRkLFdBQUwsR0FBbUJsWSxVQUFuQjtBQUNBLGlCQUFLbVksTUFBTCxHQUFjN2QsS0FBZDtBQUNBLGlCQUFLd2UsT0FBTCxHQUFlQyxxQkFBYUMsV0FBNUI7O0FBRUEsZ0JBQUlpTSxvQkFBb0IsS0FBeEI7QUFDQSxnQkFBSSxLQUFLL00sV0FBTCxDQUFpQnhaLFFBQWpCLElBQTZCL2dCLFNBQTdCLElBQTBDLEtBQUt1NkIsV0FBTCxDQUFpQnhaLFFBQWpCLEtBQThCLENBQTVFLEVBQStFO0FBQzNFdW1CLG9DQUFvQixJQUFwQjtBQUNBLHFCQUFLdEosWUFBTCxHQUFvQixLQUFLekQsV0FBTCxDQUFpQnhaLFFBQXJDO0FBQ0g7O0FBRUQsZ0JBQUksQ0FBQyxLQUFLb21CLG9CQUFOLElBQThCLENBQUNHLGlCQUFuQyxFQUFzRDtBQUNsRDtBQUNBLHFCQUFLSixtQkFBTCxHQUEyQixJQUEzQjtBQUNBLHFCQUFLZixhQUFMLENBQW1CLEtBQUs1TCxXQUF4QixFQUFxQyxFQUFDc0MsTUFBTSxDQUFQLEVBQVVnRCxJQUFJLENBQUMsQ0FBZixFQUFyQztBQUNILGFBSkQsTUFJTztBQUNIO0FBQ0EscUJBQUswSCxhQUFMO0FBQ0g7QUFDSjs7O3dDQUVlO0FBQ1osZ0JBQUlDLFlBQVksS0FBS1QsbUJBQUwsR0FBMkIsSUFBM0M7O0FBRUEsZ0JBQUlsSyxPQUFPLEtBQUtyQyxNQUFMLENBQVlxQyxJQUFaLEdBQW1CLEtBQUt2QyxlQUFuQztBQUNBLGdCQUFJdUYsS0FBS2hELE9BQU8ySyxTQUFoQjs7QUFFQSxnQkFBSSxLQUFLbk4sY0FBTCxJQUF1QixJQUEzQixFQUFpQztBQUM3QixvQkFBSXdGLEtBQUssS0FBS3JGLE1BQUwsQ0FBWXFDLElBQWpCLElBQXlCLEtBQUt4QyxjQUFsQyxFQUFrRDtBQUM5Q3dGLHlCQUFLLEtBQUtyRixNQUFMLENBQVlxQyxJQUFaLEdBQW1CLEtBQUt4QyxjQUF4QixHQUF5QyxDQUE5QztBQUNIO0FBQ0o7O0FBRUQsaUJBQUsrTSxvQkFBTCxHQUE0QixFQUFDdkssVUFBRCxFQUFPZ0QsTUFBUCxFQUE1QjtBQUNBLGlCQUFLc0csYUFBTCxDQUFtQixLQUFLNUwsV0FBeEIsRUFBcUMsS0FBSzZNLG9CQUExQztBQUNIOzs7c0NBRWEva0IsVSxFQUFZMUYsSyxFQUFPO0FBQzdCLGlCQUFLMHFCLGVBQUwsR0FBdUIsQ0FBdkI7O0FBRUEsZ0JBQUk1TSxZQUFZcFksV0FBV3JCLEdBQTNCO0FBQ0EsZ0JBQUksS0FBSzFKLE9BQUwsQ0FBYW5HLGtCQUFqQixFQUFxQztBQUNqQyxvQkFBSSxLQUFLNDBCLHFCQUFMLElBQThCL2xDLFNBQWxDLEVBQTZDO0FBQ3pDeTZCLGdDQUFZLEtBQUtzTCxxQkFBakI7QUFDSCxpQkFGRCxNQUVPLElBQUkxakIsV0FBV21ELGFBQVgsSUFBNEJ4bEIsU0FBaEMsRUFBMkM7QUFDOUN5NkIsZ0NBQVlwWSxXQUFXbUQsYUFBdkI7QUFDSDtBQUNKOztBQUVELGdCQUFJa1YsYUFBYSxLQUFLUixZQUFMLENBQWtCcGIsU0FBbEIsQ0FBNEIyYixTQUE1QixFQUF1QzlkLEtBQXZDLENBQWpCO0FBQ0EsaUJBQUttcEIsa0JBQUwsR0FBMEJwTCxXQUFXMVosR0FBckM7O0FBRUEsZ0JBQUl1akIsTUFBTSxLQUFLRyxJQUFMLEdBQVksSUFBSUYsY0FBSixFQUF0QjtBQUNBRCxnQkFBSXBoQixJQUFKLENBQVMsS0FBVCxFQUFnQnVYLFdBQVcxWixHQUEzQixFQUFnQyxJQUFoQztBQUNBdWpCLGdCQUFJRSxZQUFKLEdBQW1CLGFBQW5CO0FBQ0FGLGdCQUFJSSxrQkFBSixHQUF5QixLQUFLSSxtQkFBTCxDQUF5Qm50QixJQUF6QixDQUE4QixJQUE5QixDQUF6QjtBQUNBMnNCLGdCQUFJSyxVQUFKLEdBQWlCLEtBQUtJLFdBQUwsQ0FBaUJwdEIsSUFBakIsQ0FBc0IsSUFBdEIsQ0FBakI7QUFDQTJzQixnQkFBSUgsTUFBSixHQUFhLEtBQUtxRCxPQUFMLENBQWE3dkIsSUFBYixDQUFrQixJQUFsQixDQUFiO0FBQ0Eyc0IsZ0JBQUlSLE9BQUosR0FBYyxLQUFLbUIsV0FBTCxDQUFpQnR0QixJQUFqQixDQUFzQixJQUF0QixDQUFkOztBQUVBLGdCQUFJeUssV0FBV25CLGVBQWYsRUFBZ0M7QUFDNUJxakIsb0JBQUlyakIsZUFBSixHQUFzQixJQUF0QjtBQUNIOztBQUVELGdCQUFJLFFBQU93WixXQUFXQyxPQUFsQixNQUE4QixRQUFsQyxFQUE0QztBQUN4QyxvQkFBSUEsVUFBVUQsV0FBV0MsT0FBekI7O0FBRUEscUJBQUssSUFBSXp2QixHQUFULElBQWdCeXZCLE9BQWhCLEVBQXlCO0FBQ3JCLHdCQUFJQSxRQUFRcmQsY0FBUixDQUF1QnBTLEdBQXZCLENBQUosRUFBaUM7QUFDN0JxNUIsNEJBQUlZLGdCQUFKLENBQXFCajZCLEdBQXJCLEVBQTBCeXZCLFFBQVF6dkIsR0FBUixDQUExQjtBQUNIO0FBQ0o7QUFDSjs7QUFFRHE1QixnQkFBSWEsSUFBSjtBQUNIOzs7Z0NBRU87QUFDSixpQkFBS2hMLGFBQUwsR0FBcUIsSUFBckI7QUFDQSxpQkFBS2hYLGNBQUw7QUFDQSxpQkFBSytYLE9BQUwsR0FBZUMscUJBQWF1QixTQUE1QjtBQUNIOzs7eUNBRWdCO0FBQ2IsZ0JBQUksS0FBSytILElBQVQsRUFBZTtBQUNYLHFCQUFLQSxJQUFMLENBQVVDLGtCQUFWLEdBQStCLElBQS9CO0FBQ0EscUJBQUtELElBQUwsQ0FBVUUsVUFBVixHQUF1QixJQUF2QjtBQUNBLHFCQUFLRixJQUFMLENBQVVOLE1BQVYsR0FBbUIsSUFBbkI7QUFDQSxxQkFBS00sSUFBTCxDQUFVWCxPQUFWLEdBQW9CLElBQXBCO0FBQ0EscUJBQUtXLElBQUwsQ0FBVTdvQixLQUFWO0FBQ0EscUJBQUs2b0IsSUFBTCxHQUFZLElBQVo7QUFDSDtBQUNKOzs7NENBRW1CbGlDLEMsRUFBRztBQUNuQixnQkFBSStoQyxNQUFNL2hDLEVBQUVpYSxNQUFaOztBQUVBLGdCQUFJOG5CLElBQUkxcUIsVUFBSixLQUFtQixDQUF2QixFQUEwQjtBQUFHO0FBQ3pCLG9CQUFJMHFCLElBQUljLFdBQUosSUFBbUJybEMsU0FBdkIsRUFBa0M7QUFBRztBQUNqQyx3QkFBSXdsQixnQkFBZ0IsS0FBSzBVLFlBQUwsQ0FBa0J5QixtQkFBbEIsQ0FBc0M0SSxJQUFJYyxXQUExQyxDQUFwQjtBQUNBLHdCQUFJZCxJQUFJYyxXQUFKLEtBQW9CLEtBQUtTLGtCQUF6QixJQUErQ3RnQixrQkFBa0IsS0FBS3VnQixxQkFBMUUsRUFBaUc7QUFDN0YsNkJBQUtBLHFCQUFMLEdBQTZCdmdCLGFBQTdCO0FBQ0EsNEJBQUksS0FBS2tXLGNBQVQsRUFBeUI7QUFDckIsaUNBQUtBLGNBQUwsQ0FBb0JsVyxhQUFwQjtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxvQkFBSytlLElBQUk5SSxNQUFKLElBQWMsR0FBZCxJQUFxQjhJLElBQUk5SSxNQUFKLElBQWMsR0FBeEMsRUFBOEM7QUFDMUMsd0JBQUksS0FBS3lMLG1CQUFULEVBQThCO0FBQzFCO0FBQ0g7QUFDRCx5QkFBSy9MLE9BQUwsR0FBZUMscUJBQWEyQixVQUE1QjtBQUNILGlCQUxELE1BS087QUFDSCx5QkFBSzVCLE9BQUwsR0FBZUMscUJBQWFjLE1BQTVCO0FBQ0Esd0JBQUksS0FBS3JRLFFBQVQsRUFBbUI7QUFDZiw2QkFBS0EsUUFBTCxDQUFjc1EscUJBQWFDLHdCQUEzQixFQUFxRCxFQUFDcGhCLE1BQU11cEIsSUFBSTlJLE1BQVgsRUFBbUJ4Z0IsS0FBS3NwQixJQUFJbEksVUFBNUIsRUFBckQ7QUFDSCxxQkFGRCxNQUVPO0FBQ0gsOEJBQU0sSUFBSUMsMkJBQUosQ0FBcUIscUNBQXFDaUksSUFBSTlJLE1BQXpDLEdBQWtELEdBQWxELEdBQXdEOEksSUFBSWxJLFVBQWpGLENBQU47QUFDSDtBQUNKO0FBQ0o7QUFDSjs7O29DQUVXNzVCLEMsRUFBRztBQUNYLGdCQUFJLEtBQUsyNEIsT0FBTCxLQUFpQkMscUJBQWFjLE1BQWxDLEVBQTBDO0FBQ3RDO0FBQ0E7QUFDSDs7QUFFRCxnQkFBSSxLQUFLN0IsY0FBTCxLQUF3QixJQUE1QixFQUFrQztBQUM5QixvQkFBSXFOLGdCQUFnQixLQUFwQjs7QUFFQSxvQkFBSSxLQUFLUixtQkFBVCxFQUE4QjtBQUMxQix5QkFBS0EsbUJBQUwsR0FBMkIsS0FBM0I7QUFDQSx5QkFBS0Msb0JBQUwsR0FBNEIsSUFBNUI7QUFDQU8sb0NBQWdCLElBQWhCOztBQUVBLHdCQUFJcEMsUUFBUTlpQyxFQUFFOGlDLEtBQWQ7QUFDQSx5QkFBS2xpQixjQUFMO0FBQ0Esd0JBQUlraUIsU0FBUyxJQUFULEdBQWdCQSxVQUFVLENBQTlCLEVBQWlDO0FBQzdCLDZCQUFLdEgsWUFBTCxHQUFvQnNILEtBQXBCO0FBQ0g7QUFDSjs7QUFFRDtBQUNBLG9CQUFJLEtBQUs5SyxNQUFMLENBQVlxRixFQUFaLEtBQW1CLENBQUMsQ0FBeEIsRUFBMkI7QUFDdkIseUJBQUt4RixjQUFMLEdBQXNCLEtBQUsyRCxZQUFMLEdBQW9CLEtBQUt4RCxNQUFMLENBQVlxQyxJQUF0RDtBQUNILGlCQUZELE1BRU87QUFBRztBQUNOLHlCQUFLeEMsY0FBTCxHQUFzQixLQUFLRyxNQUFMLENBQVlxRixFQUFaLEdBQWlCLEtBQUtyRixNQUFMLENBQVlxQyxJQUE3QixHQUFvQyxDQUExRDtBQUNIOztBQUVELG9CQUFJNkssYUFBSixFQUFtQjtBQUNmLHlCQUFLSCxhQUFMO0FBQ0E7QUFDSDtBQUNELG9CQUFJLEtBQUt6TCxxQkFBVCxFQUFnQztBQUM1Qix5QkFBS0EscUJBQUwsQ0FBMkIsS0FBS3pCLGNBQWhDO0FBQ0g7QUFDSjs7QUFFRCxnQkFBSW5kLFFBQVExYSxFQUFFZ2pDLE1BQUYsR0FBVyxLQUFLNkIsZUFBNUI7QUFDQSxpQkFBS0EsZUFBTCxHQUF1QjdrQyxFQUFFZ2pDLE1BQXpCO0FBQ0EsaUJBQUtuSCxhQUFMLENBQW1CMkMsUUFBbkIsQ0FBNEI5akIsS0FBNUI7QUFDSDs7O3dDQUVldFcsSyxFQUFPO0FBQ25CLGdCQUFJa0UsT0FBTyxLQUFLZzhCLGdCQUFoQjtBQUNBLGdCQUFJOXhCLE9BQU9sSyxLQUFLbkYsTUFBTCxHQUFjLENBQXpCO0FBQ0EsZ0JBQUlzUCxNQUFNLENBQVY7QUFDQSxnQkFBSUMsU0FBUyxDQUFiO0FBQ0EsZ0JBQUlDLFNBQVNILElBQWI7O0FBRUEsZ0JBQUlwTyxRQUFRa0UsS0FBSyxDQUFMLENBQVosRUFBcUI7QUFDakIsdUJBQU9BLEtBQUssQ0FBTCxDQUFQO0FBQ0g7O0FBRUQsbUJBQU9vSyxVQUFVQyxNQUFqQixFQUF5QjtBQUNyQkYsc0JBQU1DLFNBQVN0UixLQUFLMkssS0FBTCxDQUFXLENBQUM0RyxTQUFTRCxNQUFWLElBQW9CLENBQS9CLENBQWY7QUFDQSxvQkFBSUQsUUFBUUQsSUFBUixJQUFpQnBPLFNBQVNrRSxLQUFLbUssR0FBTCxDQUFULElBQXNCck8sUUFBUWtFLEtBQUttSyxNQUFNLENBQVgsQ0FBbkQsRUFBbUU7QUFDL0QsMkJBQU9uSyxLQUFLbUssR0FBTCxDQUFQO0FBQ0gsaUJBRkQsTUFFTyxJQUFJbkssS0FBS21LLEdBQUwsSUFBWXJPLEtBQWhCLEVBQXVCO0FBQzFCc08sNkJBQVNELE1BQU0sQ0FBZjtBQUNILGlCQUZNLE1BRUE7QUFDSEUsNkJBQVNGLE1BQU0sQ0FBZjtBQUNIO0FBQ0o7QUFDSjs7O2dDQUVPelMsQyxFQUFHO0FBQ1AsZ0JBQUksS0FBSzI0QixPQUFMLEtBQWlCQyxxQkFBYWMsTUFBbEMsRUFBMEM7QUFDdEM7QUFDQTtBQUNIOztBQUVELGdCQUFJLEtBQUtnTCxtQkFBVCxFQUE4QjtBQUMxQixxQkFBS0EsbUJBQUwsR0FBMkIsS0FBM0I7QUFDQTtBQUNIOztBQUVELGlCQUFLRyxlQUFMLEdBQXVCLENBQXZCO0FBQ0EsZ0JBQUlwRyxPQUFPLEtBQUs1QyxhQUFMLENBQW1CNkMsY0FBOUI7QUFDQSxnQkFBSUQsU0FBUyxDQUFiLEVBQWdCO0FBQ1oscUJBQUtnRyxvQkFBTDtBQUNBLG9CQUFJLEtBQUtBLG9CQUFMLElBQTZCLENBQWpDLEVBQW9DO0FBQ2hDO0FBQ0FoRywyQkFBTyxLQUFLNUMsYUFBTCxDQUFtQmdGLFdBQTFCO0FBQ0g7QUFDSjs7QUFFRCxnQkFBSXBDLFNBQVMsQ0FBYixFQUFnQjtBQUNaLG9CQUFJUixhQUFhLEtBQUtVLGVBQUwsQ0FBcUJGLElBQXJCLENBQWpCO0FBQ0Esb0JBQUksS0FBSytGLHVCQUFMLEtBQWlDdkcsVUFBckMsRUFBaUQ7QUFDN0MseUJBQUt1Ryx1QkFBTCxHQUErQnZHLFVBQS9CO0FBQ0EseUJBQUtzRyxtQkFBTCxHQUEyQnRHLFVBQTNCO0FBQ0g7QUFDSjs7QUFFRCxnQkFBSXBTLFFBQVE3ckIsRUFBRWlhLE1BQUYsQ0FBUzhvQixRQUFyQjtBQUNBLGdCQUFJdGhCLFlBQVksS0FBS3VXLE1BQUwsQ0FBWXFDLElBQVosR0FBbUIsS0FBS3ZDLGVBQXhDO0FBQ0EsaUJBQUtBLGVBQUwsSUFBd0JqTSxNQUFNalIsVUFBOUI7O0FBRUEsZ0JBQUl1cUIsaUJBQWlCLEtBQXJCOztBQUVBLGdCQUFJLEtBQUt0TixjQUFMLElBQXVCLElBQXZCLElBQStCLEtBQUtDLGVBQUwsR0FBdUIsS0FBS0QsY0FBL0QsRUFBK0U7QUFDM0U7QUFDQSxxQkFBS2tOLGFBQUw7QUFDSCxhQUhELE1BR087QUFDSEksaUNBQWlCLElBQWpCO0FBQ0g7O0FBRUQ7QUFDQSxnQkFBSSxLQUFLM0ssY0FBVCxFQUF5QjtBQUNyQixxQkFBS0EsY0FBTCxDQUFvQjNPLEtBQXBCLEVBQTJCcEssU0FBM0IsRUFBc0MsS0FBS3FXLGVBQTNDO0FBQ0g7O0FBRUQsZ0JBQUlxTixjQUFKLEVBQW9CO0FBQ2hCLHFCQUFLeE0sT0FBTCxHQUFlQyxxQkFBYXVCLFNBQTVCO0FBQ0Esb0JBQUksS0FBS0MsV0FBVCxFQUFzQjtBQUNsQix5QkFBS0EsV0FBTCxDQUFpQixLQUFLcEMsTUFBTCxDQUFZcUMsSUFBN0IsRUFBbUMsS0FBS3JDLE1BQUwsQ0FBWXFDLElBQVosR0FBbUIsS0FBS3ZDLGVBQXhCLEdBQTBDLENBQTdFO0FBQ0g7QUFDSjtBQUNKOzs7b0NBRVc5M0IsQyxFQUFHO0FBQ1gsaUJBQUsyNEIsT0FBTCxHQUFlQyxxQkFBYWMsTUFBNUI7QUFDQSxnQkFBSTE5QixPQUFPLENBQVg7QUFDQSxnQkFBSWdmLE9BQU8sSUFBWDs7QUFFQSxnQkFBSSxLQUFLNmMsY0FBTCxJQUF1QixLQUFLQyxlQUFMLEdBQXVCLENBQTlDLElBQ3VCLEtBQUtBLGVBQUwsR0FBdUIsS0FBS0QsY0FEdkQsRUFDdUU7QUFDbkU3N0IsdUJBQU8yOUIscUJBQWFjLFNBQXBCO0FBQ0F6Zix1QkFBTyxFQUFDeEMsTUFBTSxDQUFDLENBQVIsRUFBV0MsS0FBSyw0QkFBaEIsRUFBUDtBQUNILGFBSkQsTUFJTztBQUNIemMsdUJBQU8yOUIscUJBQWFJLFNBQXBCO0FBQ0EvZSx1QkFBTyxFQUFDeEMsTUFBTSxDQUFDLENBQVIsRUFBV0MsS0FBS3pZLEVBQUVNLFdBQUYsQ0FBY3FLLElBQWQsR0FBcUIsR0FBckIsR0FBMkIzSyxFQUFFaEUsSUFBN0MsRUFBUDtBQUNIOztBQUVELGdCQUFJLEtBQUtxdEIsUUFBVCxFQUFtQjtBQUNmLHFCQUFLQSxRQUFMLENBQWNydEIsSUFBZCxFQUFvQmdmLElBQXBCO0FBQ0gsYUFGRCxNQUVPO0FBQ0gsc0JBQU0sSUFBSThlLDJCQUFKLENBQXFCOWUsS0FBS3ZDLEdBQTFCLENBQU47QUFDSDtBQUNKOzs7NEJBM1FrQjtBQUNmLG1CQUFPLEtBQUtvakIsYUFBTCxDQUFtQjZDLGNBQTFCO0FBQ0g7Ozs7RUE3RHFCaEUsa0I7O2tCQTBVWG9DLFc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxakJDbFdmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFDQTtJQUNNeEcsUztBQUNKLHFCQUFhN2EsZUFBYixFQUE4QjdHLE1BQTlCLEVBQXNDO0FBQUE7O0FBQ3BDLFNBQUtDLEdBQUwsR0FBVyxXQUFYO0FBQ0EsU0FBS1osS0FBTCxHQUFhLFdBQWI7QUFDQSxTQUFLYyxRQUFMLEdBQWdCLElBQUl6TyxnQkFBSixFQUFoQjs7QUFFQSxTQUFLd08sT0FBTCxHQUFlLGtDQUFmO0FBQ0EsUUFBSSxRQUFPRixNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQXRCLEVBQWdDO0FBQzlCdlksYUFBT3VTLE1BQVAsQ0FBYyxLQUFLa0csT0FBbkIsRUFBNEJGLE1BQTVCO0FBQ0Q7O0FBRUQsUUFBSTZHLGdCQUFnQnpmLElBQWhCLENBQXFCcXpCLFdBQXJCLE9BQXVDLEtBQTNDLEVBQWtEO0FBQ2hELFlBQU0sSUFBSTlHLG1DQUFKLENBQTZCLGtEQUE3QixDQUFOO0FBQ0Q7O0FBRUQsUUFBSTlNLGdCQUFnQjdOLE1BQWhCLEtBQTJCLElBQS9CLEVBQXFDO0FBQ25DLFdBQUtrSCxPQUFMLENBQWFsSCxNQUFiLEdBQXNCLElBQXRCO0FBQ0Q7O0FBRUQsU0FBSzVOLENBQUwsR0FBUztBQUNQb2xDLHlCQUFtQixLQUFLQyxrQkFBTCxDQUF3Qmp3QixJQUF4QixDQUE2QixJQUE3QixDQURaO0FBRVBrd0Isa0JBQVksS0FBS0MsV0FBTCxDQUFpQm53QixJQUFqQixDQUFzQixJQUF0QixDQUZMO0FBR1Bvd0Isa0JBQVksS0FBS0MsV0FBTCxDQUFpQnJ3QixJQUFqQixDQUFzQixJQUF0QixDQUhMO0FBSVBzd0Isa0JBQVksS0FBS0MsV0FBTCxDQUFpQnZ3QixJQUFqQixDQUFzQixJQUF0QixDQUpMO0FBS1B3d0IsbUJBQWEsS0FBS0MsWUFBTCxDQUFrQnp3QixJQUFsQixDQUF1QixJQUF2QjtBQUxOLEtBQVQ7O0FBUUEsUUFBSTdYLE9BQU9rakMsV0FBUCxJQUFzQmxqQyxPQUFPa2pDLFdBQVAsQ0FBbUJDLEdBQTdDLEVBQWtEO0FBQ2hELFdBQUtDLElBQUwsR0FBWXBqQyxPQUFPa2pDLFdBQVAsQ0FBbUJDLEdBQW5CLENBQXVCdHJCLElBQXZCLENBQTRCN1gsT0FBT2tqQyxXQUFuQyxDQUFaO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBS0UsSUFBTCxHQUFZdGEsS0FBS3FhLEdBQWpCO0FBQ0Q7O0FBRUQsU0FBS3JoQixnQkFBTCxHQUF3QixJQUF4QixDQWhDb0MsQ0FnQ1A7QUFDN0IsU0FBS3ltQixlQUFMLEdBQXVCLEtBQXZCO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDQSxTQUFLQyxnQkFBTCxHQUF3QixJQUF4Qjs7QUFFQSxTQUFLcm5CLGdCQUFMLEdBQXdCbEQsZUFBeEI7QUFDQSxTQUFLMUYsYUFBTCxHQUFxQixJQUFyQjtBQUNBLFNBQUtrd0IsT0FBTCxHQUFlLElBQWY7QUFDQSxTQUFLQyxXQUFMLEdBQW1CLElBQW5COztBQUVBLFNBQUtDLGdCQUFMLEdBQXdCLEtBQXhCO0FBQ0EsU0FBS0MsZUFBTCxHQUF1QixLQUF2QjtBQUNBLFNBQUtDLGdCQUFMLEdBQXdCLEtBQXhCOztBQUVBLFNBQUtwbkIsVUFBTCxHQUFrQixJQUFsQjtBQUNBLFNBQUtxbkIsZUFBTCxHQUF1QixJQUF2Qjs7QUFFQSxRQUFJQyxtQkFBb0IzdEIsa0JBQVE0dEIsTUFBUixLQUNyQjV0QixrQkFBUXRPLE9BQVIsQ0FBZ0JtOEIsS0FBaEIsR0FBd0IsRUFBeEIsSUFDRTd0QixrQkFBUXRPLE9BQVIsQ0FBZ0JtOEIsS0FBaEIsS0FBMEIsRUFBMUIsSUFBZ0M3dEIsa0JBQVF0TyxPQUFSLENBQWdCbzhCLEtBQWhCLEdBQXdCLElBRnJDLENBQXhCO0FBR0EsU0FBS0MsbUJBQUwsR0FBMkIsQ0FBQyxFQUFHSixvQkFBb0IzdEIsa0JBQVF3ZSxNQUE1QixJQUFzQ3hlLGtCQUFRZ3VCLElBQWpELENBQTVCOztBQUVBLFFBQUksS0FBS0QsbUJBQVQsRUFBOEI7QUFDNUIsV0FBSzd4QixPQUFMLENBQWF6RyxZQUFiLEdBQTRCLEtBQTVCO0FBQ0Q7QUFDRCxTQUFLdzRCLG9CQUFMLEdBQTRCO0FBQzFCdHdCLGFBQU8sRUFEbUI7QUFFMUJELGFBQU87QUFGbUIsS0FBNUI7QUFJQSxTQUFLd3dCLHFCQUFMLEdBQTZCLENBQTdCO0FBQ0Q7Ozs7OEJBRVU7QUFDVCxVQUFJLEtBQUtkLGdCQUFMLElBQXlCLElBQTdCLEVBQW1DO0FBQ2pDem9DLGVBQU82bEIsYUFBUCxDQUFxQixLQUFLNGlCLGdCQUExQjtBQUNBLGFBQUtBLGdCQUFMLEdBQXdCLElBQXhCO0FBQ0Q7QUFDRCxVQUFJLEtBQUtFLFdBQVQsRUFBc0I7QUFDcEIsYUFBS2EsTUFBTDtBQUNEO0FBQ0QsVUFBSSxLQUFLaHhCLGFBQVQsRUFBd0I7QUFDdEIsYUFBS2Msa0JBQUw7QUFDRDtBQUNELFdBQUs3VyxDQUFMLEdBQVMsSUFBVDtBQUNBLFdBQUsyZSxnQkFBTCxHQUF3QixJQUF4Qjs7QUFFQSxXQUFLNUosUUFBTCxDQUFjdE0sa0JBQWQ7QUFDQSxXQUFLc00sUUFBTCxHQUFnQixJQUFoQjtBQUNEOzs7dUJBRUcrQixLLEVBQU9wUCxRLEVBQVU7QUFBQTs7QUFDbkIsVUFBSW9QLFVBQVU4Zix1QkFBYXBaLFVBQTNCLEVBQXVDO0FBQ3JDLFlBQUksS0FBS3lCLFVBQUwsSUFBbUIsSUFBdkIsRUFBNkI7QUFDM0J4WixrQkFBUXRFLE9BQVIsR0FBa0JsQixJQUFsQixDQUF1QixZQUFNO0FBQzNCLGtCQUFLOFUsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjh2Qix1QkFBYXBaLFVBQWhDLEVBQTRDLE1BQUtVLFNBQWpEO0FBQ0QsV0FGRDtBQUdEO0FBQ0YsT0FORCxNQU1PLElBQUlwSCxVQUFVOGYsdUJBQWFsWixlQUEzQixFQUE0QztBQUNqRCxZQUFJLEtBQUs0b0IsZUFBTCxJQUF3QixJQUE1QixFQUFrQztBQUNoQzdnQyxrQkFBUXRFLE9BQVIsR0FBa0JsQixJQUFsQixDQUF1QixZQUFNO0FBQzNCLGtCQUFLOFUsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjh2Qix1QkFBYWxaLGVBQWhDLEVBQWlELE1BQUtTLGNBQXREO0FBQ0QsV0FGRDtBQUdEO0FBQ0Y7QUFDRCxXQUFLcEosUUFBTCxDQUFjdE4sV0FBZCxDQUEwQnFQLEtBQTFCLEVBQWlDcFAsUUFBakM7QUFDRDs7O3dCQUVJb1AsSyxFQUFPcFAsUSxFQUFVO0FBQ3BCLFdBQUtxTixRQUFMLENBQWMxTSxjQUFkLENBQTZCeU8sS0FBN0IsRUFBb0NwUCxRQUFwQztBQUNEOzs7dUNBRW1CcVAsWSxFQUFjO0FBQUE7O0FBQ2hDLFdBQUtoQixhQUFMLEdBQXFCZ0IsWUFBckI7QUFDQUEsbUJBQWFHLGdCQUFiLENBQThCLGdCQUE5QixFQUFnRCxLQUFLbFgsQ0FBTCxDQUFPb2xDLGlCQUF2RDtBQUNBcnVCLG1CQUFhRyxnQkFBYixDQUE4QixTQUE5QixFQUF5QyxLQUFLbFgsQ0FBTCxDQUFPc2xDLFVBQWhEO0FBQ0F2dUIsbUJBQWFHLGdCQUFiLENBQThCLFNBQTlCLEVBQXlDLEtBQUtsWCxDQUFMLENBQU93bEMsVUFBaEQ7QUFDQXp1QixtQkFBYUcsZ0JBQWIsQ0FBOEIsU0FBOUIsRUFBeUMsS0FBS2xYLENBQUwsQ0FBTzBsQyxVQUFoRDtBQUNBM3VCLG1CQUFhRyxnQkFBYixDQUE4QixVQUE5QixFQUEwQyxLQUFLbFgsQ0FBTCxDQUFPNGxDLFdBQWpEOztBQUVBLFdBQUtLLE9BQUwsR0FBZSxJQUFJdHhCLHVCQUFKLENBQWtCLEtBQUtHLE9BQXZCLENBQWY7O0FBRUEsV0FBS214QixPQUFMLENBQWFoK0IsRUFBYixDQUFnQnFRLG9CQUFVaUQsVUFBMUIsRUFBc0MsS0FBS3lyQixlQUFMLENBQXFCNXhCLElBQXJCLENBQTBCLElBQTFCLENBQXRDO0FBQ0EsV0FBSzZ3QixPQUFMLENBQWFoK0IsRUFBYixDQUFnQnFRLG9CQUFVNEMsV0FBMUIsRUFBdUMsS0FBSytyQixnQkFBTCxDQUFzQjd4QixJQUF0QixDQUEyQixJQUEzQixDQUF2QztBQUNBLFdBQUs2d0IsT0FBTCxDQUFhaCtCLEVBQWIsQ0FBZ0JxUSxvQkFBVStDLFdBQTFCLEVBQXVDLFlBQU07QUFDM0MsZUFBSzhxQixnQkFBTCxHQUF3QixJQUF4QjtBQUNBLFlBQUksT0FBS0MsZUFBVCxFQUEwQjtBQUN4QixpQkFBS0EsZUFBTCxHQUF1QixLQUF2QjtBQUNBLGlCQUFLYyxJQUFMO0FBQ0Q7QUFDRixPQU5EO0FBT0EsV0FBS2pCLE9BQUwsQ0FBYWgrQixFQUFiLENBQWdCcVEsb0JBQVVDLEtBQTFCLEVBQWlDLFVBQUN5QyxJQUFELEVBQVU7QUFDekMsZUFBS2pHLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI4dkIsdUJBQWFyZSxLQUFoQyxFQUNFc2UseUJBQVdzUSxXQURiLEVBRUVyUSwyQkFBYXNRLGVBRmYsRUFHRXBzQixJQUhGO0FBS0QsT0FORDs7QUFRQSxXQUFLaXJCLE9BQUwsQ0FBYW9CLGtCQUFiLENBQWdDdHdCLFlBQWhDOztBQUVBLFVBQUksS0FBS3NJLGdCQUFMLElBQXlCLElBQTdCLEVBQW1DO0FBQ2pDLFlBQUk7QUFDRnRJLHVCQUFhOEMsV0FBYixHQUEyQixLQUFLd0YsZ0JBQWhDO0FBQ0EsZUFBS0EsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDRCxTQUhELENBR0UsT0FBT3JmLENBQVAsRUFBVTtBQUNWO0FBQ0E7QUFDRDtBQUNGO0FBQ0Y7Ozt5Q0FFcUI7QUFDcEIsVUFBSSxLQUFLK1YsYUFBVCxFQUF3QjtBQUN0QixhQUFLa3dCLE9BQUwsQ0FBYXB2QixrQkFBYjtBQUNBLGFBQUtkLGFBQUwsQ0FBbUJ3QixtQkFBbkIsQ0FBdUMsZ0JBQXZDLEVBQXlELEtBQUt2WCxDQUFMLENBQU9vbEMsaUJBQWhFO0FBQ0EsYUFBS3J2QixhQUFMLENBQW1Cd0IsbUJBQW5CLENBQXVDLFNBQXZDLEVBQWtELEtBQUt2WCxDQUFMLENBQU9zbEMsVUFBekQ7QUFDQSxhQUFLdnZCLGFBQUwsQ0FBbUJ3QixtQkFBbkIsQ0FBdUMsU0FBdkMsRUFBa0QsS0FBS3ZYLENBQUwsQ0FBT3dsQyxVQUF6RDtBQUNBLGFBQUt6dkIsYUFBTCxDQUFtQndCLG1CQUFuQixDQUF1QyxTQUF2QyxFQUFrRCxLQUFLdlgsQ0FBTCxDQUFPMGxDLFVBQXpEO0FBQ0EsYUFBSzN2QixhQUFMLENBQW1Cd0IsbUJBQW5CLENBQXVDLFVBQXZDLEVBQW1ELEtBQUt2WCxDQUFMLENBQU80bEMsV0FBMUQ7QUFDQSxhQUFLN3ZCLGFBQUwsR0FBcUIsSUFBckI7QUFDRDtBQUNELFVBQUksS0FBS2t3QixPQUFULEVBQWtCO0FBQ2hCLGFBQUtBLE9BQUwsQ0FBYTkyQixPQUFiO0FBQ0EsYUFBSzgyQixPQUFMLEdBQWUsSUFBZjtBQUNEO0FBQ0Y7Ozt1Q0FFbUJ6bkIsRyxFQUFxQjtBQUFBOztBQUFBLFVBQWhCOG9CLFVBQWdCLHVFQUFILENBQUc7O0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQUszb0IsZ0JBQUwsQ0FBc0JsTixRQUF0QixDQUErQixDQUEvQixFQUFrQytNLEdBQWxDLEdBQXdDQSxHQUF4QztBQUNBLFdBQUsrb0IsUUFBTCxHQUFnQmxyQyxPQUFPdVMsTUFBUCxDQUFjLEVBQWQsRUFBa0IsS0FBSytQLGdCQUF2QixFQUF5QyxFQUFDSCxRQUFELEVBQXpDLENBQWhCOztBQUVBLFdBQUtncEIsZUFBTCxHQUF1QixJQUFJaHNCLG9CQUFKLENBQWUsS0FBSytyQixRQUFwQixFQUE4QixLQUFLenlCLE9BQW5DLENBQXZCO0FBQ0EsV0FBSzB5QixlQUFMLENBQXFCenlCLFFBQXJCLENBQThCOU0sRUFBOUIsQ0FBaUMsa0JBQWpDLEVBQXFELHNCQUFjO0FBQ2pFLGVBQUs4TSxRQUFMLENBQWNqTyxJQUFkLENBQW1CLGtCQUFuQixFQUF1QzJWLFVBQXZDO0FBQ0QsT0FGRDs7QUFJQSxXQUFLK3FCLGVBQUwsQ0FBcUJ2L0IsRUFBckIsQ0FBd0IwVSw0QkFBa0JLLFlBQTFDLEVBQXdELFVBQUNoaEIsSUFBRCxFQUFPOGIsRUFBUCxFQUFjO0FBQ3BFLFlBQUksQ0FBQyxPQUFLaEQsT0FBTCxDQUFhbEgsTUFBbEIsRUFBMEI7QUFDeEIsaUJBQUtpNUIsb0JBQUwsQ0FBMEI3cUMsSUFBMUIsSUFBa0MsQ0FBQzhiLEVBQUQsQ0FBbEM7QUFDQTtBQUNBLGNBQUksT0FBS291QixXQUFMLEtBQXFCLE9BQUtzQixlQUExQixJQUE2QyxPQUFLQSxlQUF0RCxFQUF1RTtBQUNyRSxnQkFBTTN0QixjQUFjLE9BQUs5RCxhQUFMLENBQW1COEQsV0FBdkM7QUFDQSxtQkFBSzJ0QixlQUFMLENBQXFCenBCLElBQXJCLENBQTBCbEUsY0FBYyxJQUF4QztBQUNEO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDRCxTQVhELE1BV087QUFDTCxpQkFBS29zQixPQUFMLENBQWF3QixtQkFBYjtBQUNBLGlCQUFLeEIsT0FBTCxDQUFhN3FCLGlCQUFiLENBQStCdEQsRUFBL0I7QUFDQSxjQUFJLE9BQUtvdUIsV0FBTCxLQUFxQixPQUFLc0IsZUFBOUIsRUFBK0M7QUFDN0MsbUJBQUt0QixXQUFMLENBQWlCLzJCLE9BQWpCO0FBQ0Q7QUFDRCxpQkFBSysyQixXQUFMLEdBQW1CLE9BQUtzQixlQUF4QjtBQUNEO0FBQ0YsT0FwQkQ7O0FBc0JBLFdBQUtBLGVBQUwsQ0FBcUJ2L0IsRUFBckIsQ0FBd0IwVSw0QkFBa0JPLGFBQTFDLEVBQXlELFVBQUNsaEIsSUFBRCxFQUFPaWIsRUFBUCxFQUFjO0FBQ3JFLFlBQUksQ0FBQyxPQUFLbkMsT0FBTCxDQUFhbEgsTUFBbEIsRUFBMEI7QUFDeEIsY0FBSSxDQUFDLE9BQUs0NUIsZUFBVixFQUEyQjtBQUN6QixtQkFBS3ZCLE9BQUwsQ0FBYXlCLGtCQUFiLENBQWdDendCLEVBQWhDO0FBQ0QsV0FGRCxNQUVPO0FBQ0wsbUJBQUs0dkIsb0JBQUwsQ0FBMEI3cUMsSUFBMUIsS0FBbUMsT0FBSzZxQyxvQkFBTCxDQUEwQjdxQyxJQUExQixFQUFnQzZMLElBQWhDLENBQXFDb1AsRUFBckMsQ0FBbkM7QUFDQSxnQkFBSSxPQUFLMHdCLHFCQUFULEVBQWdDO0FBQzlCdHJDLHFCQUFPc1AsSUFBUCxDQUFZLE9BQUtrN0Isb0JBQWpCLEVBQXVDL25CLE9BQXZDLENBQStDLGVBQU87QUFDcEQsdUJBQUttbkIsT0FBTCxDQUFhdnZCLGdCQUFiLENBQThCaE8sR0FBOUIsSUFBcUMsT0FBS20rQixvQkFBTCxDQUEwQm4rQixHQUExQixDQUFyQztBQUNELGVBRkQ7QUFHQSxxQkFBS20rQixvQkFBTCxHQUE0QjtBQUMxQnR3Qix1QkFBTyxFQURtQjtBQUUxQkQsdUJBQU87QUFGbUIsZUFBNUI7QUFJQSxxQkFBSzR2QixXQUFMLENBQWlCLzJCLE9BQWpCO0FBQ0EscUJBQUsrMkIsV0FBTCxHQUFtQixPQUFLc0IsZUFBeEI7QUFDQSxxQkFBTyxPQUFLQSxlQUFaO0FBQ0Q7QUFDRjtBQUNGLFNBbEJELE1Ba0JPO0FBQ0wsaUJBQUt2QixPQUFMLENBQWF5QixrQkFBYixDQUFnQ3p3QixFQUFoQztBQUNEOztBQUVEO0FBQ0EsWUFBSSxPQUFLbkMsT0FBTCxDQUFhakgsUUFBYixJQUF5QixDQUFDLE9BQUtpSCxPQUFMLENBQWFsSCxNQUEzQyxFQUFtRDtBQUNqRCxjQUFJaU0sY0FBYyxPQUFLOUQsYUFBTCxDQUFtQjhELFdBQXJDO0FBQ0EsY0FBSTVDLEdBQUcrRCxJQUFILENBQVE1SCxNQUFSLElBQWtCLENBQUN5RyxjQUFjLE9BQUsvRSxPQUFMLENBQWFoSCxtQkFBNUIsSUFBbUQsSUFBekUsRUFBK0U7QUFDN0UsZ0JBQUksT0FBS2s0QixnQkFBTCxJQUF5QixJQUE3QixFQUFtQztBQUNqQ3Z1QiwrQkFBSVksQ0FBSixDQUFNLE9BQUt4RCxHQUFYLEVBQWdCLCtEQUFoQjtBQUNBLHFCQUFLK3lCLGtCQUFMO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsT0FqQ0Q7QUFrQ0EsV0FBS0osZUFBTCxDQUFxQnYvQixFQUFyQixDQUF3QjBVLDRCQUFrQlMsZ0JBQTFDLEVBQTRELFlBQU07QUFDaEUsZUFBSzZvQixPQUFMLENBQWF6dUIsV0FBYjtBQUNBLGVBQUt6QyxRQUFMLENBQWNqTyxJQUFkLENBQW1COHZCLHVCQUFheFosZ0JBQWhDO0FBQ0QsT0FIRDtBQUlBLFdBQUtvcUIsZUFBTCxDQUFxQnYvQixFQUFyQixDQUF3QjBVLDRCQUFrQlcsbUJBQTFDLEVBQStELFlBQU07QUFDbkUsZUFBS3ZJLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI4dkIsdUJBQWF0WixtQkFBaEM7QUFDRCxPQUZEO0FBR0EsV0FBS2txQixlQUFMLENBQXFCdi9CLEVBQXJCLENBQXdCMFUsNEJBQWtCQyxRQUExQyxFQUFvRCxVQUFDdFosTUFBRCxFQUFTMFgsSUFBVCxFQUFrQjtBQUNwRSxlQUFLakcsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjh2Qix1QkFBYXJlLEtBQWhDLEVBQXVDc2UseUJBQVdnUixhQUFsRCxFQUFpRXZrQyxNQUFqRSxFQUF5RTBYLElBQXpFO0FBQ0QsT0FGRDtBQUdBLFdBQUt3c0IsZUFBTCxDQUFxQnYvQixFQUFyQixDQUF3QjBVLDRCQUFrQkcsV0FBMUMsRUFBdUQsVUFBQ3haLE1BQUQsRUFBUzBYLElBQVQsRUFBa0I7QUFDdkUsZUFBS2pHLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI4dkIsdUJBQWFyZSxLQUFoQyxFQUF1Q3NlLHlCQUFXc1EsV0FBbEQsRUFBK0Q3akMsTUFBL0QsRUFBdUUsRUFBQ2tWLE1BQU0sQ0FBQyxDQUFSLEVBQVdDLEtBQUt1QyxJQUFoQixFQUF2RTtBQUNELE9BRkQ7QUFHQSxXQUFLd3NCLGVBQUwsQ0FBcUJ2L0IsRUFBckIsQ0FBd0IwVSw0QkFBa0JhLFVBQTFDLEVBQXNELFVBQUNVLFNBQUQsRUFBZTtBQUNuRSxlQUFLZSxVQUFMLEdBQWtCZixTQUFsQjtBQUNBLGVBQUtzcEIsZUFBTCxDQUFxQnpwQixJQUFyQixDQUEwQixDQUFDLE9BQUtoSSxhQUFMLENBQW1COEQsV0FBbkIsR0FBaUN5dEIsVUFBbEMsSUFBZ0QsSUFBMUU7QUFDQSxlQUFLdnlCLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI4dkIsdUJBQWFwWixVQUFoQyxFQUE0Q25oQixPQUFPdVMsTUFBUCxDQUFjLEVBQWQsRUFBa0JzUCxTQUFsQixDQUE1QztBQUNELE9BSkQ7QUFLQSxXQUFLc3BCLGVBQUwsQ0FBcUJ2L0IsRUFBckIsQ0FBd0IwVSw0QkFBa0JlLGVBQTFDLEVBQTJELFVBQUNrSCxRQUFELEVBQWM7QUFDdkUsZUFBSzBoQixlQUFMLEdBQXVCLE9BQUt3QixtQkFBTCxDQUF5QmxqQixRQUF6QixDQUF2QjtBQUNBLGVBQUs3UCxRQUFMLENBQWNqTyxJQUFkLENBQW1COHZCLHVCQUFhbFosZUFBaEMsRUFBaURyaEIsT0FBT3VTLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLE9BQUswM0IsZUFBdkIsQ0FBakQ7QUFDRCxPQUhEO0FBSUEsV0FBS2tCLGVBQUwsQ0FBcUJ2L0IsRUFBckIsQ0FBd0IwVSw0QkFBa0JpQixtQkFBMUMsRUFBK0QsVUFBQzdMLFlBQUQsRUFBa0I7QUFDL0UsWUFBSSxPQUFLbTBCLFdBQUwsS0FBcUIsT0FBS3NCLGVBQTFCLElBQTZDLE9BQUt6eEIsYUFBbEQsSUFBbUUsQ0FBQyxPQUFLakIsT0FBTCxDQUFhekcsWUFBckYsRUFBbUc7QUFDakcsaUJBQUt5M0IsZUFBTCxHQUF1QixJQUF2QjtBQUNBLGlCQUFLL3ZCLGFBQUwsQ0FBbUI4RCxXQUFuQixHQUFpQzlILGVBQWUsSUFBaEQ7QUFDRDtBQUNGLE9BTEQ7O0FBT0EsV0FBS3kxQixlQUFMLENBQXFCN21CLElBQXJCO0FBQ0Q7OzsyQkFFTztBQUFBOztBQUNOLFVBQUksQ0FBQyxLQUFLNUssYUFBVixFQUF5QjtBQUN2QixjQUFNLElBQUlpQixnQ0FBSixDQUEwQixrREFBMUIsQ0FBTjtBQUNEO0FBQ0QsVUFBSSxLQUFLa3ZCLFdBQVQsRUFBc0I7QUFDcEIsY0FBTSxJQUFJbHZCLGdDQUFKLENBQTBCLCtEQUExQixDQUFOO0FBQ0Q7QUFDRCxVQUFJLEtBQUtvdkIsZUFBVCxFQUEwQjtBQUN4QjtBQUNEOztBQUVELFVBQUksS0FBS3R4QixPQUFMLENBQWE5Ryx3QkFBYixJQUF5QyxLQUFLbTRCLGdCQUFMLEtBQTBCLEtBQXZFLEVBQThFO0FBQzVFLGFBQUtDLGVBQUwsR0FBdUIsSUFBdkI7QUFDQTtBQUNEOztBQUVELFVBQUksS0FBS3J3QixhQUFMLENBQW1Cc0IsVUFBbkIsR0FBZ0MsQ0FBcEMsRUFBdUM7QUFDckMsYUFBS3l1QixlQUFMLEdBQXVCLElBQXZCO0FBQ0E7QUFDQSxhQUFLL3ZCLGFBQUwsQ0FBbUI4RCxXQUFuQixHQUFpQyxDQUFqQztBQUNEOztBQUVELFdBQUtxc0IsV0FBTCxHQUFtQixJQUFJMXFCLG9CQUFKLENBQWUsS0FBS21ELGdCQUFwQixFQUFzQyxLQUFLN0osT0FBM0MsQ0FBbkI7QUFDQSxXQUFLb3hCLFdBQUwsQ0FBaUJueEIsUUFBakIsQ0FBMEI5TSxFQUExQixDQUE2QixrQkFBN0IsRUFBaUQsc0JBQWM7QUFDN0QsZUFBSzhNLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUIsa0JBQW5CLEVBQXVDMlYsVUFBdkM7QUFDRCxPQUZEOztBQUlBLFdBQUt5cEIsV0FBTCxDQUFpQmorQixFQUFqQixDQUFvQjBVLDRCQUFrQkssWUFBdEMsRUFBb0QsVUFBQ2hoQixJQUFELEVBQU84YixFQUFQLEVBQWM7QUFDaEUsZUFBS211QixPQUFMLENBQWE3cUIsaUJBQWIsQ0FBK0J0RCxFQUEvQjtBQUNELE9BRkQ7QUFHQSxXQUFLb3VCLFdBQUwsQ0FBaUJqK0IsRUFBakIsQ0FBb0IwVSw0QkFBa0JPLGFBQXRDLEVBQXFELFVBQUNsaEIsSUFBRCxFQUFPaWIsRUFBUCxFQUFjO0FBQ2pFLGVBQUtndkIsT0FBTCxDQUFheUIsa0JBQWIsQ0FBZ0N6d0IsRUFBaEM7O0FBRUE7QUFDQSxZQUFJLE9BQUtuQyxPQUFMLENBQWFqSCxRQUFiLElBQXlCLENBQUMsT0FBS2lILE9BQUwsQ0FBYWxILE1BQTNDLEVBQW1EO0FBQ2pELGNBQUlpTSxjQUFjLE9BQUs5RCxhQUFMLENBQW1COEQsV0FBckM7QUFDQSxjQUFJNUMsR0FBRytELElBQUgsQ0FBUTVILE1BQVIsSUFBa0IsQ0FBQ3lHLGNBQWMsT0FBSy9FLE9BQUwsQ0FBYWhILG1CQUE1QixJQUFtRCxJQUF6RSxFQUErRTtBQUM3RSxnQkFBSSxPQUFLazRCLGdCQUFMLElBQXlCLElBQTdCLEVBQW1DO0FBQ2pDdnVCLCtCQUFJWSxDQUFKLENBQU0sT0FBS3hELEdBQVgsRUFBZ0IsK0RBQWhCO0FBQ0EscUJBQUsreUIsa0JBQUw7QUFDRDtBQUNGO0FBQ0Y7QUFDRixPQWJEO0FBY0EsV0FBSzFCLFdBQUwsQ0FBaUJqK0IsRUFBakIsQ0FBb0IwVSw0QkFBa0JTLGdCQUF0QyxFQUF3RCxZQUFNO0FBQzVELGVBQUs2b0IsT0FBTCxDQUFhenVCLFdBQWI7QUFDQSxlQUFLekMsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjh2Qix1QkFBYXhaLGdCQUFoQztBQUNELE9BSEQ7QUFJQSxXQUFLOG9CLFdBQUwsQ0FBaUJqK0IsRUFBakIsQ0FBb0IwVSw0QkFBa0JXLG1CQUF0QyxFQUEyRCxZQUFNO0FBQy9ELGVBQUt2SSxRQUFMLENBQWNqTyxJQUFkLENBQW1COHZCLHVCQUFhdFosbUJBQWhDO0FBQ0QsT0FGRDtBQUdBLFdBQUs0b0IsV0FBTCxDQUFpQmorQixFQUFqQixDQUFvQjBVLDRCQUFrQkMsUUFBdEMsRUFBZ0QsVUFBQ3RaLE1BQUQsRUFBUzBYLElBQVQsRUFBa0I7QUFDaEUsZUFBS2pHLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI4dkIsdUJBQWFyZSxLQUFoQyxFQUF1Q3NlLHlCQUFXZ1IsYUFBbEQsRUFBaUV2a0MsTUFBakUsRUFBeUUwWCxJQUF6RTtBQUNELE9BRkQ7QUFHQSxXQUFLa3JCLFdBQUwsQ0FBaUJqK0IsRUFBakIsQ0FBb0IwVSw0QkFBa0JHLFdBQXRDLEVBQW1ELFVBQUN4WixNQUFELEVBQVMwWCxJQUFULEVBQWtCO0FBQ25FLGVBQUtqRyxRQUFMLENBQWNqTyxJQUFkLENBQW1COHZCLHVCQUFhcmUsS0FBaEMsRUFBdUNzZSx5QkFBV3NRLFdBQWxELEVBQStEN2pDLE1BQS9ELEVBQXVFLEVBQUNrVixNQUFNLENBQUMsQ0FBUixFQUFXQyxLQUFLdUMsSUFBaEIsRUFBdkU7QUFDRCxPQUZEO0FBR0EsV0FBS2tyQixXQUFMLENBQWlCaitCLEVBQWpCLENBQW9CMFUsNEJBQWtCYSxVQUF0QyxFQUFrRCxVQUFDVSxTQUFELEVBQWU7QUFDL0QsZUFBS2UsVUFBTCxHQUFrQmYsU0FBbEI7QUFDQSxlQUFLbkosUUFBTCxDQUFjak8sSUFBZCxDQUFtQjh2Qix1QkFBYXBaLFVBQWhDLEVBQTRDbmhCLE9BQU91UyxNQUFQLENBQWMsRUFBZCxFQUFrQnNQLFNBQWxCLENBQTVDO0FBQ0QsT0FIRDtBQUlBLFdBQUtnb0IsV0FBTCxDQUFpQmorQixFQUFqQixDQUFvQjBVLDRCQUFrQmUsZUFBdEMsRUFBdUQsVUFBQ2tILFFBQUQsRUFBYztBQUNuRSxlQUFLMGhCLGVBQUwsR0FBdUIsT0FBS3dCLG1CQUFMLENBQXlCbGpCLFFBQXpCLENBQXZCO0FBQ0EsZUFBSzdQLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI4dkIsdUJBQWFsWixlQUFoQyxFQUFpRHJoQixPQUFPdVMsTUFBUCxDQUFjLEVBQWQsRUFBa0IsT0FBSzAzQixlQUF2QixDQUFqRDtBQUNELE9BSEQ7QUFJQSxXQUFLSixXQUFMLENBQWlCaitCLEVBQWpCLENBQW9CMFUsNEJBQWtCaUIsbUJBQXRDLEVBQTJELFVBQUM3TCxZQUFELEVBQWtCO0FBQzNFLFlBQUksT0FBS2dFLGFBQUwsSUFBc0IsQ0FBQyxPQUFLakIsT0FBTCxDQUFhekcsWUFBeEMsRUFBc0Q7QUFDcEQsaUJBQUt5M0IsZUFBTCxHQUF1QixJQUF2QjtBQUNBLGlCQUFLL3ZCLGFBQUwsQ0FBbUI4RCxXQUFuQixHQUFpQzlILGVBQWUsSUFBaEQ7QUFDRDtBQUNGLE9BTEQ7O0FBT0EsV0FBS20wQixXQUFMLENBQWlCdmxCLElBQWpCO0FBQ0Q7Ozs2QkFFUztBQUNSLFVBQUksS0FBSzVLLGFBQVQsRUFBd0I7QUFDdEIsYUFBS0EsYUFBTCxDQUFtQmlJLEtBQW5CO0FBQ0Q7QUFDRCxVQUFJLEtBQUtpb0IsT0FBVCxFQUFrQjtBQUNoQixhQUFLQSxPQUFMLENBQWFsb0IsSUFBYixDQUFrQixDQUFsQjtBQUNEO0FBQ0QsVUFBSSxLQUFLbW9CLFdBQVQsRUFBc0I7QUFDcEIsYUFBS0EsV0FBTCxDQUFpQnpFLEtBQWpCO0FBQ0EsYUFBS3lFLFdBQUwsQ0FBaUIvMkIsT0FBakI7QUFDQSxhQUFLKzJCLFdBQUwsR0FBbUIsSUFBbkI7QUFDRDtBQUNGOzs7MkJBRU87QUFDTixhQUFPLEtBQUtud0IsYUFBTCxDQUFtQmd5QixJQUFuQixFQUFQO0FBQ0Q7Ozs0QkFFUTtBQUNQLFdBQUtoeUIsYUFBTCxDQUFtQmlJLEtBQW5CO0FBQ0Q7Ozt3Q0F5RG9CNEcsUSxFQUFVO0FBQzdCQSxlQUFTb2pCLFVBQVQsR0FBc0IsS0FBSy96QixLQUEzQjs7QUFFQSxVQUFJLEVBQUUsS0FBSzhCLGFBQUwsWUFBOEJ4WSxPQUFPMHFDLGdCQUF2QyxDQUFKLEVBQThEO0FBQzVELGVBQU9yakIsUUFBUDtBQUNEOztBQUVELFVBQUlzakIsaUJBQWlCLElBQXJCO0FBQ0EsVUFBSUMsVUFBVSxDQUFkO0FBQ0EsVUFBSUMsVUFBVSxDQUFkOztBQUVBLFVBQUksS0FBS3J5QixhQUFMLENBQW1Cc3lCLHVCQUF2QixFQUFnRDtBQUM5QyxZQUFJQyxVQUFVLEtBQUt2eUIsYUFBTCxDQUFtQnN5Qix1QkFBbkIsRUFBZDtBQUNBRixrQkFBVUcsUUFBUUMsZ0JBQWxCO0FBQ0FILGtCQUFVRSxRQUFRRSxrQkFBbEI7QUFDRCxPQUpELE1BSU8sSUFBSSxLQUFLenlCLGFBQUwsQ0FBbUIweUIsdUJBQW5CLElBQThDanJDLFNBQWxELEVBQTZEO0FBQ2xFMnFDLGtCQUFVLEtBQUtweUIsYUFBTCxDQUFtQjB5Qix1QkFBN0I7QUFDQUwsa0JBQVUsS0FBS3J5QixhQUFMLENBQW1CMnlCLHVCQUE3QjtBQUNELE9BSE0sTUFHQTtBQUNMUix5QkFBaUIsS0FBakI7QUFDRDs7QUFFRCxVQUFJQSxjQUFKLEVBQW9CO0FBQ2xCdGpCLGlCQUFTK2pCLGFBQVQsR0FBeUJSLE9BQXpCO0FBQ0F2akIsaUJBQVNna0IsYUFBVCxHQUF5QlIsT0FBekI7QUFDRDs7QUFFRCxhQUFPeGpCLFFBQVA7QUFDRDs7O3NDQUVrQjtBQUNqQixVQUFJLENBQUMsS0FBSzlQLE9BQUwsQ0FBYWpILFFBQWQsSUFBMEIsS0FBS2lILE9BQUwsQ0FBYWxILE1BQTNDLEVBQW1EO0FBQ2pEO0FBQ0Q7O0FBRUQsVUFBSTBMLFdBQVcsS0FBS3ZELGFBQUwsQ0FBbUJ1RCxRQUFsQztBQUNBLFVBQUlPLGNBQWMsS0FBSzlELGFBQUwsQ0FBbUI4RCxXQUFyQztBQUNBLFVBQUlndkIsb0JBQW9CLENBQXhCO0FBQ0EsVUFBSUMsa0JBQWtCLENBQXRCOztBQUVBLFdBQUssSUFBSXJwQyxJQUFJLENBQWIsRUFBZ0JBLElBQUk2WixTQUFTblcsTUFBN0IsRUFBcUMxRCxHQUFyQyxFQUEwQztBQUN4QyxZQUFJOFosUUFBUUQsU0FBU0MsS0FBVCxDQUFlOVosQ0FBZixDQUFaO0FBQ0EsWUFBSStaLE1BQU1GLFNBQVNFLEdBQVQsQ0FBYS9aLENBQWIsQ0FBVjtBQUNBLFlBQUk4WixTQUFTTSxXQUFULElBQXdCQSxjQUFjTCxHQUExQyxFQUErQztBQUM3Q3F2Qiw4QkFBb0J0dkIsS0FBcEI7QUFDQXV2Qiw0QkFBa0J0dkIsR0FBbEI7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsVUFBSXN2QixtQkFBbUJqdkIsY0FBYyxLQUFLL0UsT0FBTCxDQUFhaEgsbUJBQTlDLElBQXFFLEtBQUtrNEIsZ0JBQUwsSUFBeUIsSUFBbEcsRUFBd0c7QUFDdEd2dUIseUJBQUlZLENBQUosQ0FBTSxLQUFLeEQsR0FBWCxFQUFnQiwrREFBaEI7QUFDQSxhQUFLK3lCLGtCQUFMO0FBQ0Q7QUFDRjs7O3VDQUVtQjtBQUNsQm53Qix1QkFBSVksQ0FBSixDQUFNLEtBQUt4RCxHQUFYLEVBQWdCLG9EQUFoQjtBQUNBLFVBQUksS0FBS214QixnQkFBTCxJQUF5QixJQUE3QixFQUFtQztBQUNqQyxhQUFLNEIsa0JBQUw7QUFDRDtBQUNGOzs7eUNBRXFCO0FBQ3BCLFVBQUksS0FBSzFCLFdBQVQsRUFBc0I7QUFDcEIsYUFBS0EsV0FBTCxDQUFpQmxvQixLQUFqQjs7QUFFQSxZQUFJLEtBQUtnb0IsZ0JBQUwsSUFBeUIsSUFBN0IsRUFBbUM7QUFDakMsZUFBS0EsZ0JBQUwsR0FBd0J6b0MsT0FBTzJsQixXQUFQLENBQW1CLEtBQUs2bEIsdUJBQUwsQ0FBNkIzekIsSUFBN0IsQ0FBa0MsSUFBbEMsQ0FBbkIsRUFBNEQsSUFBNUQsQ0FBeEI7QUFDRDtBQUNGO0FBQ0Y7Ozs4Q0FFMEI7QUFDekIsVUFBSXlFLGNBQWMsS0FBSzlELGFBQUwsQ0FBbUI4RCxXQUFyQztBQUNBLFVBQUlQLFdBQVcsS0FBS3ZELGFBQUwsQ0FBbUJ1RCxRQUFsQzs7QUFFQSxVQUFJMHZCLGFBQWEsS0FBakI7O0FBRUEsV0FBSyxJQUFJdnBDLElBQUksQ0FBYixFQUFnQkEsSUFBSTZaLFNBQVNuVyxNQUE3QixFQUFxQzFELEdBQXJDLEVBQTBDO0FBQ3hDLFlBQUk0NkIsT0FBTy9nQixTQUFTQyxLQUFULENBQWU5WixDQUFmLENBQVg7QUFDQSxZQUFJNDlCLEtBQUsvakIsU0FBU0UsR0FBVCxDQUFhL1osQ0FBYixDQUFUO0FBQ0EsWUFBSW9hLGVBQWV3Z0IsSUFBZixJQUF1QnhnQixjQUFjd2pCLEVBQXpDLEVBQTZDO0FBQzNDLGNBQUl4akIsZUFBZXdqQixLQUFLLEtBQUt2b0IsT0FBTCxDQUFhL0csdUJBQXJDLEVBQThEO0FBQzVEaTdCLHlCQUFhLElBQWI7QUFDRDtBQUNEO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJQSxVQUFKLEVBQWdCO0FBQ2R6ckMsZUFBTzZsQixhQUFQLENBQXFCLEtBQUs0aUIsZ0JBQTFCO0FBQ0EsYUFBS0EsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDQSxZQUFJZ0QsVUFBSixFQUFnQjtBQUNkdnhCLDJCQUFJWSxDQUFKLENBQU0sS0FBS3hELEdBQVgsRUFBZ0IsdUNBQWhCO0FBQ0EsZUFBS3F4QixXQUFMLENBQWlCam9CLE1BQWpCO0FBQ0Q7QUFDRjtBQUNGOzs7eUNBRXFCN0UsTyxFQUFTO0FBQzdCLFVBQUlFLFdBQVcsS0FBS3ZELGFBQUwsQ0FBbUJ1RCxRQUFsQzs7QUFFQSxXQUFLLElBQUk3WixJQUFJLENBQWIsRUFBZ0JBLElBQUk2WixTQUFTblcsTUFBN0IsRUFBcUMxRCxHQUFyQyxFQUEwQztBQUN4QyxZQUFJNDZCLE9BQU8vZ0IsU0FBU0MsS0FBVCxDQUFlOVosQ0FBZixDQUFYO0FBQ0EsWUFBSTQ5QixLQUFLL2pCLFNBQVNFLEdBQVQsQ0FBYS9aLENBQWIsQ0FBVDtBQUNBLFlBQUkyWixXQUFXaWhCLElBQVgsSUFBbUJqaEIsVUFBVWlrQixFQUFqQyxFQUFxQztBQUNuQyxpQkFBTyxJQUFQO0FBQ0Q7QUFDRjtBQUNELGFBQU8sS0FBUDtBQUNEOzs7a0NBRWNqa0IsTyxFQUFTO0FBQ3RCLFVBQUk2dkIsYUFBYSxLQUFLQyxvQkFBTCxDQUEwQjl2QixPQUExQixDQUFqQjs7QUFFQSxVQUFJK3ZCLGtCQUFrQixLQUF0QjtBQUNBLFVBQUlDLHNCQUFzQixDQUExQjs7QUFFQSxVQUFJaHdCLFVBQVUsR0FBVixJQUFpQixLQUFLckQsYUFBTCxDQUFtQnVELFFBQW5CLENBQTRCblcsTUFBNUIsR0FBcUMsQ0FBMUQsRUFBNkQ7QUFDM0QsWUFBSWttQyxpQkFBaUIsS0FBS3R6QixhQUFMLENBQW1CdUQsUUFBbkIsQ0FBNEJDLEtBQTVCLENBQWtDLENBQWxDLENBQXJCO0FBQ0EsWUFBSzh2QixpQkFBaUIsR0FBakIsSUFBd0Jqd0IsVUFBVWl3QixjQUFuQyxJQUFzRHp3QixrQkFBUUMsTUFBbEUsRUFBMEU7QUFDeEVzd0IsNEJBQWtCLElBQWxCO0FBQ0E7QUFDQUMsZ0NBQXNCeHdCLGtCQUFRQyxNQUFSLEdBQWlCLEdBQWpCLEdBQXVCd3dCLGNBQTdDO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJRixlQUFKLEVBQXFCO0FBQUU7QUFDckIsYUFBS3JELGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxhQUFLL3ZCLGFBQUwsQ0FBbUI4RCxXQUFuQixHQUFpQ3V2QixtQkFBakM7QUFDRCxPQUhELE1BR08sSUFBSUgsVUFBSixFQUFnQjtBQUFFO0FBQ3ZCLFlBQUksQ0FBQyxLQUFLdEMsbUJBQVYsRUFBK0I7QUFDN0IsZUFBS2IsZUFBTCxHQUF1QixJQUF2QjtBQUNBLGVBQUsvdkIsYUFBTCxDQUFtQjhELFdBQW5CLEdBQWlDVCxPQUFqQztBQUNELFNBSEQsTUFHTztBQUNMLGNBQUlrd0IsTUFBTSxLQUFLckQsT0FBTCxDQUFhN2tCLGtCQUFiLENBQWdDaGdCLEtBQUsySyxLQUFMLENBQVdxTixVQUFVLElBQXJCLENBQWhDLENBQVY7QUFDQSxlQUFLMHNCLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxjQUFJd0QsT0FBTyxJQUFYLEVBQWlCO0FBQ2YsaUJBQUt2ekIsYUFBTCxDQUFtQjhELFdBQW5CLEdBQWlDeXZCLElBQUl6MkIsR0FBSixHQUFVLElBQTNDO0FBQ0QsV0FGRCxNQUVPO0FBQ0wsaUJBQUtrRCxhQUFMLENBQW1COEQsV0FBbkIsR0FBaUNULE9BQWpDO0FBQ0Q7QUFDRjtBQUNELFlBQUksS0FBSzRzQixnQkFBTCxJQUF5QixJQUE3QixFQUFtQztBQUNqQyxlQUFLK0MsdUJBQUw7QUFDRDtBQUNGLE9BaEJNLE1BZ0JBO0FBQ0wsWUFBSSxLQUFLL0MsZ0JBQUwsSUFBeUIsSUFBN0IsRUFBbUM7QUFDakN6b0MsaUJBQU82bEIsYUFBUCxDQUFxQixLQUFLNGlCLGdCQUExQjtBQUNBLGVBQUtBLGdCQUFMLEdBQXdCLElBQXhCO0FBQ0Q7QUFDRCxhQUFLQyxPQUFMLENBQWFsb0IsSUFBYixDQUFrQjNFLE9BQWxCO0FBQ0EsYUFBSzhzQixXQUFMLENBQWlCbm9CLElBQWpCLENBQXNCM2MsS0FBSzJLLEtBQUwsQ0FBV3FOLFVBQVUsSUFBckIsQ0FBdEIsRUFOSyxDQU02QztBQUNsRDtBQUNBO0FBQ0EsWUFBSSxLQUFLdEUsT0FBTCxDQUFhekcsWUFBakIsRUFBK0I7QUFDN0IsZUFBS3kzQixlQUFMLEdBQXVCLElBQXZCO0FBQ0EsZUFBSy92QixhQUFMLENBQW1COEQsV0FBbkIsR0FBaUNULE9BQWpDO0FBQ0Q7QUFDRjtBQUNGOzs7d0RBRW9DO0FBQ25DLFVBQUksS0FBSzJzQixnQkFBVCxFQUEyQjtBQUN6QixZQUFJLEtBQUtBLGdCQUFMLENBQXNCd0QsVUFBdEIsSUFBb0MsS0FBSzVJLElBQUwsS0FBYyxHQUF0RCxFQUEyRDtBQUN6RCxjQUFJMW1CLFNBQVMsS0FBS2xFLGFBQUwsQ0FBbUI4RCxXQUFoQztBQUNBLGVBQUtrc0IsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDQSxjQUFJLENBQUMsS0FBS21ELG9CQUFMLENBQTBCanZCLE1BQTFCLENBQUwsRUFBd0M7QUFDdEMsZ0JBQUksS0FBSytyQixnQkFBTCxJQUF5QixJQUE3QixFQUFtQztBQUNqQ3pvQyxxQkFBTzRMLFlBQVAsQ0FBb0IsS0FBSzY4QixnQkFBekI7QUFDQSxtQkFBS0EsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDRDtBQUNEO0FBQ0E7QUFDQSxpQkFBS0MsT0FBTCxDQUFhbG9CLElBQWIsQ0FBa0I5RCxNQUFsQjtBQUNBLGlCQUFLaXNCLFdBQUwsQ0FBaUJub0IsSUFBakIsQ0FBc0IzYyxLQUFLMkssS0FBTCxDQUFXa08sU0FBUyxJQUFwQixDQUF0QjtBQUNBO0FBQ0EsZ0JBQUksS0FBS25GLE9BQUwsQ0FBYXpHLFlBQWpCLEVBQStCO0FBQzdCLG1CQUFLeTNCLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxtQkFBSy92QixhQUFMLENBQW1COEQsV0FBbkIsR0FBaUNJLE1BQWpDO0FBQ0Q7QUFDRjtBQUNGLFNBbEJELE1Ba0JPO0FBQ0wxYyxpQkFBT2lDLFVBQVAsQ0FBa0IsS0FBS2dxQyxpQ0FBTCxDQUF1Q3AwQixJQUF2QyxDQUE0QyxJQUE1QyxDQUFsQixFQUFxRSxFQUFyRTtBQUNEO0FBQ0Y7QUFDRjs7O2lEQUU2QnEwQixPLEVBQVM7QUFDckMsVUFBSUMsUUFBUSxLQUFLM3pCLGFBQWpCO0FBQ0EsVUFBSTB6QixXQUFXLENBQUMsS0FBS3BELGdCQUFqQixJQUFxQ3FELE1BQU1yeUIsVUFBTixHQUFtQixDQUE1RCxFQUErRDtBQUFFO0FBQy9ELFlBQUlpQyxXQUFXb3dCLE1BQU1wd0IsUUFBckI7QUFDQSxZQUFJQSxTQUFTblcsTUFBVCxHQUFrQixDQUFsQixJQUF1QnVtQyxNQUFNN3ZCLFdBQU4sR0FBb0JQLFNBQVNDLEtBQVQsQ0FBZSxDQUFmLENBQS9DLEVBQWtFO0FBQ2hFOUIsMkJBQUkwUCxDQUFKLENBQU0sS0FBS3RTLEdBQVgsK0JBQTJDNjBCLE1BQU03dkIsV0FBakQsa0JBQXlFUCxTQUFTQyxLQUFULENBQWUsQ0FBZixDQUF6RTtBQUNBLGVBQUt1c0IsZUFBTCxHQUF1QixJQUF2QjtBQUNBLGVBQUsvdkIsYUFBTCxDQUFtQjhELFdBQW5CLEdBQWlDUCxTQUFTQyxLQUFULENBQWUsQ0FBZixDQUFqQztBQUNBLGVBQUt4RCxhQUFMLENBQW1Cd0IsbUJBQW5CLENBQXVDLFVBQXZDLEVBQW1ELEtBQUt2WCxDQUFMLENBQU80bEMsV0FBMUQ7QUFDRDtBQUNGLE9BUkQsTUFRTztBQUNMO0FBQ0EsYUFBSzd2QixhQUFMLENBQW1Cd0IsbUJBQW5CLENBQXVDLFVBQXZDLEVBQW1ELEtBQUt2WCxDQUFMLENBQU80bEMsV0FBMUQ7QUFDRDtBQUNGOzs7dUNBRW1CNWxDLEMsRUFBRztBQUNyQixVQUFJLEtBQUtxZixnQkFBTCxJQUF5QixJQUE3QixFQUFtQztBQUNqQyxhQUFLdEosYUFBTCxDQUFtQjhELFdBQW5CLEdBQWlDLEtBQUt3RixnQkFBdEM7QUFDQSxhQUFLQSxnQkFBTCxHQUF3QixJQUF4QjtBQUNEO0FBQ0Y7OztnQ0FFWXJmLEMsRUFBRztBQUFFO0FBQ2hCLFVBQUlpYSxTQUFTLEtBQUtsRSxhQUFMLENBQW1COEQsV0FBaEM7QUFDQSxVQUFJUCxXQUFXLEtBQUt2RCxhQUFMLENBQW1CdUQsUUFBbEM7O0FBRUEsVUFBSSxLQUFLd3NCLGVBQVQsRUFBMEI7QUFDeEIsYUFBS0EsZUFBTCxHQUF1QixLQUF2QjtBQUNBO0FBQ0Q7O0FBRUQsVUFBSTdyQixTQUFTLEdBQVQsSUFBZ0JYLFNBQVNuVyxNQUFULEdBQWtCLENBQXRDLEVBQXlDO0FBQ3ZDO0FBQ0EsWUFBSWttQyxpQkFBaUIvdkIsU0FBU0MsS0FBVCxDQUFlLENBQWYsQ0FBckI7QUFDQSxZQUFLOHZCLGlCQUFpQixHQUFqQixJQUF3QnB2QixTQUFTb3ZCLGNBQWxDLElBQXFEendCLGtCQUFRQyxNQUFqRSxFQUF5RTtBQUN2RSxlQUFLaXRCLGVBQUwsR0FBdUIsSUFBdkI7QUFDQTtBQUNBLGVBQUsvdkIsYUFBTCxDQUFtQjhELFdBQW5CLEdBQWlDakIsa0JBQVFDLE1BQVIsR0FBaUIsR0FBakIsR0FBdUJ3d0IsY0FBeEQ7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsVUFBSSxLQUFLSCxvQkFBTCxDQUEwQmp2QixNQUExQixDQUFKLEVBQXVDO0FBQ3JDLFlBQUksS0FBSzBzQixtQkFBVCxFQUE4QjtBQUM1QixjQUFJMkMsTUFBTSxLQUFLckQsT0FBTCxDQUFhN2tCLGtCQUFiLENBQWdDaGdCLEtBQUsySyxLQUFMLENBQVdrTyxTQUFTLElBQXBCLENBQWhDLENBQVY7QUFDQSxjQUFJcXZCLE9BQU8sSUFBWCxFQUFpQjtBQUNmLGlCQUFLeEQsZUFBTCxHQUF1QixJQUF2QjtBQUNBLGlCQUFLL3ZCLGFBQUwsQ0FBbUI4RCxXQUFuQixHQUFpQ3l2QixJQUFJejJCLEdBQUosR0FBVSxJQUEzQztBQUNEO0FBQ0Y7QUFDRCxZQUFJLEtBQUttekIsZ0JBQUwsSUFBeUIsSUFBN0IsRUFBbUM7QUFDakMsZUFBSytDLHVCQUFMO0FBQ0Q7QUFDRDtBQUNEOztBQUVELFdBQUtoRCxnQkFBTCxHQUF3QjtBQUN0QjRELG1CQUFXMXZCLE1BRFc7QUFFdEJzdkIsb0JBQVksS0FBSzVJLElBQUw7QUFGVSxPQUF4QjtBQUlBcGpDLGFBQU9pQyxVQUFQLENBQWtCLEtBQUtncUMsaUNBQUwsQ0FBdUNwMEIsSUFBdkMsQ0FBNEMsSUFBNUMsQ0FBbEIsRUFBcUUsRUFBckU7QUFDRDs7O2dDQUVZcFYsQyxFQUFHO0FBQ2QsV0FBS3FtQyxnQkFBTCxHQUF3QixJQUF4QjtBQUNBLFdBQUt0d0IsYUFBTCxDQUFtQndCLG1CQUFuQixDQUF1QyxTQUF2QyxFQUFrRCxLQUFLdlgsQ0FBTCxDQUFPd2xDLFVBQXpEO0FBQ0Q7OztnQ0FFWXhsQyxDLEVBQUc7QUFDZCxXQUFLNHBDLDRCQUFMLENBQWtDLElBQWxDO0FBQ0Q7OztpQ0FFYTVwQyxDLEVBQUc7QUFDZixXQUFLNHBDLDRCQUFMO0FBQ0Q7Ozt3QkEvVFc7QUFDVixhQUFPLEtBQUszMUIsS0FBWjtBQUNEOzs7d0JBRWU7QUFDZCxhQUFPLEtBQUs4QixhQUFMLENBQW1CdUQsUUFBMUI7QUFDRDs7O3dCQUVlO0FBQ2QsYUFBTyxLQUFLdkQsYUFBTCxDQUFtQnpGLFFBQTFCO0FBQ0Q7Ozt3QkFFYTtBQUNaLGFBQU8sS0FBS3lGLGFBQUwsQ0FBbUI4ekIsTUFBMUI7QUFDRCxLO3NCQUVXM25DLEssRUFBTztBQUNqQixXQUFLNlQsYUFBTCxDQUFtQjh6QixNQUFuQixHQUE0QjNuQyxLQUE1QjtBQUNEOzs7d0JBRVk7QUFDWCxhQUFPLEtBQUs2VCxhQUFMLENBQW1CK3pCLEtBQTFCO0FBQ0QsSztzQkFFVUEsSyxFQUFPO0FBQ2hCLFdBQUsvekIsYUFBTCxDQUFtQit6QixLQUFuQixHQUEyQkEsS0FBM0I7QUFDRDs7O3dCQUVrQjtBQUNqQixVQUFJLEtBQUsvekIsYUFBVCxFQUF3QjtBQUN0QixlQUFPLEtBQUtBLGFBQUwsQ0FBbUI4RCxXQUExQjtBQUNEO0FBQ0QsYUFBTyxDQUFQO0FBQ0QsSztzQkFFZ0JULE8sRUFBUztBQUN4QixVQUFJLEtBQUtyRCxhQUFULEVBQXdCO0FBQ3RCLGFBQUt5bkIsYUFBTCxDQUFtQnBrQixPQUFuQjtBQUNELE9BRkQsTUFFTztBQUNMLGFBQUtpRyxnQkFBTCxHQUF3QmpHLE9BQXhCO0FBQ0Q7QUFDRjs7O3dCQUVnQjtBQUNmLGFBQU8vYyxPQUFPdVMsTUFBUCxDQUFjLEVBQWQsRUFBa0IsS0FBS3FRLFVBQXZCLENBQVA7QUFDRDs7O3dCQUVxQjtBQUNwQixVQUFJLEtBQUtxbkIsZUFBTCxJQUF3QixJQUE1QixFQUFrQztBQUNoQyxhQUFLQSxlQUFMLEdBQXVCLEVBQXZCO0FBQ0Q7QUFDRCxXQUFLQSxlQUFMLEdBQXVCLEtBQUt3QixtQkFBTCxDQUF5QixLQUFLeEIsZUFBOUIsQ0FBdkI7QUFDQSxhQUFPanFDLE9BQU91UyxNQUFQLENBQWMsRUFBZCxFQUFrQixLQUFLMDNCLGVBQXZCLENBQVA7QUFDRDs7O3dCQTRRNEI7QUFBQTs7QUFDM0IsVUFBTXlELGdCQUFnQixFQUF0QjtBQUNBLGFBQU8xdEMsT0FBT3NQLElBQVAsQ0FBWSxLQUFLazdCLG9CQUFqQixFQUF1Q21ELEtBQXZDLENBQTZDLFVBQUN0aEMsR0FBRDtBQUFBLGVBQVMsT0FBS20rQixvQkFBTCxDQUEwQm4rQixHQUExQixFQUErQnZGLE1BQS9CLElBQXlDNG1DLGFBQWxEO0FBQUEsT0FBN0MsQ0FBUDtBQUNEOzs7Ozs7a0JBR1l6VCxTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cWpCQzF1QmY7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBO0lBQ01DLFk7QUFFRiwwQkFBWTlhLGVBQVosRUFBNkI3RyxNQUE3QixFQUFxQztBQUFBOztBQUNqQyxhQUFLQyxHQUFMLEdBQVcsY0FBWDtBQUNBLGFBQUtaLEtBQUwsR0FBYSxjQUFiO0FBQ0EsYUFBS2MsUUFBTCxHQUFnQixJQUFJek8sZ0JBQUosRUFBaEI7O0FBRUEsYUFBS3dPLE9BQUwsR0FBZSxrQ0FBZjtBQUNBLFlBQUksUUFBT0YsTUFBUCx5Q0FBT0EsTUFBUCxPQUFrQixRQUF0QixFQUFnQztBQUM1QnZZLG1CQUFPdVMsTUFBUCxDQUFjLEtBQUtrRyxPQUFuQixFQUE0QkYsTUFBNUI7QUFDSDs7QUFFRCxZQUFJNkcsZ0JBQWdCemYsSUFBaEIsQ0FBcUJxekIsV0FBckIsT0FBdUMsS0FBM0MsRUFBa0Q7QUFDOUMsa0JBQU0sSUFBSTlHLG1DQUFKLENBQTZCLHlEQUE3QixDQUFOO0FBQ0g7QUFDRCxZQUFJOU0sZ0JBQWdCWCxjQUFoQixDQUErQixVQUEvQixDQUFKLEVBQWdEO0FBQzVDLGtCQUFNLElBQUl5TixtQ0FBSixtQkFBNkM5TSxnQkFBZ0J6ZixJQUE3RCw0Q0FBTjtBQUNIOztBQUVELGFBQUtnRSxDQUFMLEdBQVM7QUFDTG9sQywrQkFBbUIsS0FBS0Msa0JBQUwsQ0FBd0Jqd0IsSUFBeEIsQ0FBNkIsSUFBN0I7QUFEZCxTQUFUOztBQUlBLGFBQUtpSyxnQkFBTCxHQUF3QixJQUF4QjtBQUNBLGFBQUtFLG1CQUFMLEdBQTJCLElBQTNCOztBQUVBLGFBQUtaLGdCQUFMLEdBQXdCbEQsZUFBeEI7QUFDQSxhQUFLMUYsYUFBTCxHQUFxQixJQUFyQjtBQUNIOzs7O2tDQUVTO0FBQ04sZ0JBQUksS0FBS0EsYUFBVCxFQUF3QjtBQUNwQixxQkFBS2d4QixNQUFMO0FBQ0EscUJBQUtsd0Isa0JBQUw7QUFDSDtBQUNELGlCQUFLN1csQ0FBTCxHQUFTLElBQVQ7QUFDQSxpQkFBSzJlLGdCQUFMLEdBQXdCLElBQXhCO0FBQ0EsaUJBQUs1SixRQUFMLENBQWN0TSxrQkFBZDtBQUNBLGlCQUFLc00sUUFBTCxHQUFnQixJQUFoQjtBQUNIOzs7MkJBRUUrQixLLEVBQU9wUCxRLEVBQVU7QUFBQTs7QUFDaEIsZ0JBQUlvUCxVQUFVOGYsdUJBQWFwWixVQUEzQixFQUF1QztBQUNuQyxvQkFBSSxLQUFLekgsYUFBTCxJQUFzQixJQUF0QixJQUE4QixLQUFLQSxhQUFMLENBQW1Cc0IsVUFBbkIsS0FBa0MsQ0FBcEUsRUFBdUU7QUFBRztBQUN0RTVSLDRCQUFRdEUsT0FBUixHQUFrQmxCLElBQWxCLENBQXVCLFlBQU07QUFDekIsOEJBQUs4VSxRQUFMLENBQWNqTyxJQUFkLENBQW1COHZCLHVCQUFhcFosVUFBaEMsRUFBNEMsTUFBS1UsU0FBakQ7QUFDSCxxQkFGRDtBQUdIO0FBQ0osYUFORCxNQU1PLElBQUlwSCxVQUFVOGYsdUJBQWFsWixlQUEzQixFQUE0QztBQUMvQyxvQkFBSSxLQUFLM0gsYUFBTCxJQUFzQixJQUF0QixJQUE4QixLQUFLQSxhQUFMLENBQW1Cc0IsVUFBbkIsS0FBa0MsQ0FBcEUsRUFBdUU7QUFDbkU1Uiw0QkFBUXRFLE9BQVIsR0FBa0JsQixJQUFsQixDQUF1QixZQUFNO0FBQ3pCLDhCQUFLOFUsUUFBTCxDQUFjak8sSUFBZCxDQUFtQjh2Qix1QkFBYWxaLGVBQWhDLEVBQWlELE1BQUtTLGNBQXREO0FBQ0gscUJBRkQ7QUFHSDtBQUNKO0FBQ0QsaUJBQUtwSixRQUFMLENBQWN0TixXQUFkLENBQTBCcVAsS0FBMUIsRUFBaUNwUCxRQUFqQztBQUNIOzs7NEJBRUdvUCxLLEVBQU9wUCxRLEVBQVU7QUFDakIsaUJBQUtxTixRQUFMLENBQWMxTSxjQUFkLENBQTZCeU8sS0FBN0IsRUFBb0NwUCxRQUFwQztBQUNIOzs7MkNBRWtCcVAsWSxFQUFjO0FBQzdCLGlCQUFLaEIsYUFBTCxHQUFxQmdCLFlBQXJCO0FBQ0FBLHlCQUFhRyxnQkFBYixDQUE4QixnQkFBOUIsRUFBZ0QsS0FBS2xYLENBQUwsQ0FBT29sQyxpQkFBdkQ7O0FBRUEsZ0JBQUksS0FBSy9sQixnQkFBTCxJQUF5QixJQUE3QixFQUFtQztBQUMvQixvQkFBSTtBQUNBdEksaUNBQWE4QyxXQUFiLEdBQTJCLEtBQUt3RixnQkFBaEM7QUFDQSx5QkFBS0EsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDSCxpQkFIRCxDQUdFLE9BQU9yZixDQUFQLEVBQVU7QUFDUjtBQUNBO0FBQ0g7QUFDSjtBQUNKOzs7NkNBRW9CO0FBQ2pCLGdCQUFJLEtBQUsrVixhQUFULEVBQXdCO0FBQ3BCLHFCQUFLQSxhQUFMLENBQW1CdkosR0FBbkIsR0FBeUIsRUFBekI7QUFDQSxxQkFBS3VKLGFBQUwsQ0FBbUI0QixlQUFuQixDQUFtQyxLQUFuQztBQUNBLHFCQUFLNUIsYUFBTCxDQUFtQndCLG1CQUFuQixDQUF1QyxnQkFBdkMsRUFBeUQsS0FBS3ZYLENBQUwsQ0FBT29sQyxpQkFBaEU7QUFDQSxxQkFBS3J2QixhQUFMLEdBQXFCLElBQXJCO0FBQ0g7QUFDRCxnQkFBSSxLQUFLd0osbUJBQUwsSUFBNEIsSUFBaEMsRUFBc0M7QUFDbENoaUIsdUJBQU82bEIsYUFBUCxDQUFxQixLQUFLN0QsbUJBQTFCO0FBQ0EscUJBQUtBLG1CQUFMLEdBQTJCLElBQTNCO0FBQ0g7QUFDSjs7OytCQUVNO0FBQ0gsZ0JBQUksQ0FBQyxLQUFLeEosYUFBVixFQUF5QjtBQUNyQixzQkFBTSxJQUFJaUIsZ0NBQUosQ0FBMEIsa0RBQTFCLENBQU47QUFDSDtBQUNELGlCQUFLakIsYUFBTCxDQUFtQnZKLEdBQW5CLEdBQXlCLEtBQUttUyxnQkFBTCxDQUFzQkgsR0FBL0M7O0FBRUEsZ0JBQUksS0FBS3pJLGFBQUwsQ0FBbUJzQixVQUFuQixHQUFnQyxDQUFwQyxFQUF1QztBQUNuQyxxQkFBS3RCLGFBQUwsQ0FBbUI4RCxXQUFuQixHQUFpQyxDQUFqQztBQUNIOztBQUVELGlCQUFLOUQsYUFBTCxDQUFtQmswQixPQUFuQixHQUE2QixNQUE3QjtBQUNBLGlCQUFLbDBCLGFBQUwsQ0FBbUJteEIsSUFBbkI7QUFDQSxpQkFBSzNuQixtQkFBTCxHQUEyQmhpQixPQUFPMmxCLFdBQVAsQ0FDdkIsS0FBS0MscUJBQUwsQ0FBMkIvTixJQUEzQixDQUFnQyxJQUFoQyxDQUR1QixFQUUzQixLQUFLTixPQUFMLENBQWEzRyw0QkFGYyxDQUEzQjtBQUdIOzs7aUNBRVE7QUFDTCxnQkFBSSxLQUFLNEgsYUFBVCxFQUF3QjtBQUNwQixxQkFBS0EsYUFBTCxDQUFtQnZKLEdBQW5CLEdBQXlCLEVBQXpCO0FBQ0EscUJBQUt1SixhQUFMLENBQW1CNEIsZUFBbkIsQ0FBbUMsS0FBbkM7QUFDSDtBQUNELGdCQUFJLEtBQUs0SCxtQkFBTCxJQUE0QixJQUFoQyxFQUFzQztBQUNsQ2hpQix1QkFBTzZsQixhQUFQLENBQXFCLEtBQUs3RCxtQkFBMUI7QUFDQSxxQkFBS0EsbUJBQUwsR0FBMkIsSUFBM0I7QUFDSDtBQUNKOzs7K0JBRU07QUFDSCxtQkFBTyxLQUFLeEosYUFBTCxDQUFtQmd5QixJQUFuQixFQUFQO0FBQ0g7OztnQ0FFTztBQUNKLGlCQUFLaHlCLGFBQUwsQ0FBbUJpSSxLQUFuQjtBQUNIOzs7MkNBNkZrQmhlLEMsRUFBRztBQUNsQixnQkFBSSxLQUFLcWYsZ0JBQUwsSUFBeUIsSUFBN0IsRUFBbUM7QUFDL0IscUJBQUt0SixhQUFMLENBQW1COEQsV0FBbkIsR0FBaUMsS0FBS3dGLGdCQUF0QztBQUNBLHFCQUFLQSxnQkFBTCxHQUF3QixJQUF4QjtBQUNIO0FBQ0QsaUJBQUt0SyxRQUFMLENBQWNqTyxJQUFkLENBQW1COHZCLHVCQUFhcFosVUFBaEMsRUFBNEMsS0FBS1UsU0FBakQ7QUFDSDs7O2dEQUV1QjtBQUNwQixpQkFBS25KLFFBQUwsQ0FBY2pPLElBQWQsQ0FBbUI4dkIsdUJBQWFsWixlQUFoQyxFQUFpRCxLQUFLUyxjQUF0RDtBQUNIOzs7NEJBckdVO0FBQ1AsbUJBQU8sS0FBS2xLLEtBQVo7QUFDSDs7OzRCQUVjO0FBQ1gsbUJBQU8sS0FBSzhCLGFBQUwsQ0FBbUJ1RCxRQUExQjtBQUNIOzs7NEJBRWM7QUFDWCxtQkFBTyxLQUFLdkQsYUFBTCxDQUFtQnpGLFFBQTFCO0FBQ0g7Ozs0QkFFWTtBQUNULG1CQUFPLEtBQUt5RixhQUFMLENBQW1COHpCLE1BQTFCO0FBQ0gsUzswQkFFVTNuQyxLLEVBQU87QUFDZCxpQkFBSzZULGFBQUwsQ0FBbUI4ekIsTUFBbkIsR0FBNEIzbkMsS0FBNUI7QUFDSDs7OzRCQUVXO0FBQ1IsbUJBQU8sS0FBSzZULGFBQUwsQ0FBbUIrekIsS0FBMUI7QUFDSCxTOzBCQUVTQSxLLEVBQU87QUFDYixpQkFBSy96QixhQUFMLENBQW1CK3pCLEtBQW5CLEdBQTJCQSxLQUEzQjtBQUNIOzs7NEJBRWlCO0FBQ2QsZ0JBQUksS0FBSy96QixhQUFULEVBQXdCO0FBQ3BCLHVCQUFPLEtBQUtBLGFBQUwsQ0FBbUI4RCxXQUExQjtBQUNIO0FBQ0QsbUJBQU8sQ0FBUDtBQUNILFM7MEJBRWVULE8sRUFBUztBQUNyQixnQkFBSSxLQUFLckQsYUFBVCxFQUF3QjtBQUNwQixxQkFBS0EsYUFBTCxDQUFtQjhELFdBQW5CLEdBQWlDVCxPQUFqQztBQUNILGFBRkQsTUFFTztBQUNILHFCQUFLaUcsZ0JBQUwsR0FBd0JqRyxPQUF4QjtBQUNIO0FBQ0o7Ozs0QkFFZTtBQUNaLGdCQUFJOHdCLGNBQWUsS0FBS24wQixhQUFMLFlBQThCbzBCLGdCQUEvQixHQUFtRCxRQUFuRCxHQUE4RCxRQUFoRjtBQUNBLGdCQUFJbnZCLE9BQU87QUFDUDVMLDBCQUFVODZCLGNBQWMsS0FBS3ZyQixnQkFBTCxDQUFzQjNpQjtBQUR2QyxhQUFYO0FBR0EsZ0JBQUksS0FBSytaLGFBQVQsRUFBd0I7QUFDcEJpRixxQkFBSzFLLFFBQUwsR0FBZ0JsUCxLQUFLMkssS0FBTCxDQUFXLEtBQUtnSyxhQUFMLENBQW1CekYsUUFBbkIsR0FBOEIsSUFBekMsQ0FBaEI7QUFDQSxvQkFBSSxLQUFLeUYsYUFBTCxZQUE4Qmt5QixnQkFBbEMsRUFBb0Q7QUFDaERqdEIseUJBQUtqSyxLQUFMLEdBQWEsS0FBS2dGLGFBQUwsQ0FBbUJxMEIsVUFBaEM7QUFDQXB2Qix5QkFBS2hLLE1BQUwsR0FBYyxLQUFLK0UsYUFBTCxDQUFtQnMwQixXQUFqQztBQUNIO0FBQ0o7QUFDRCxtQkFBT3J2QixJQUFQO0FBQ0g7Ozs0QkFFb0I7QUFDakIsZ0JBQUlBLE9BQU87QUFDUGd0Qiw0QkFBWSxLQUFLL3pCLEtBRFY7QUFFUHVLLHFCQUFLLEtBQUtHLGdCQUFMLENBQXNCSDtBQUZwQixhQUFYOztBQUtBLGdCQUFJLEVBQUUsS0FBS3pJLGFBQUwsWUFBOEJreUIsZ0JBQWhDLENBQUosRUFBdUQ7QUFDbkQsdUJBQU9qdEIsSUFBUDtBQUNIOztBQUVELGdCQUFJa3RCLGlCQUFpQixJQUFyQjtBQUNBLGdCQUFJQyxVQUFVLENBQWQ7QUFDQSxnQkFBSUMsVUFBVSxDQUFkOztBQUVBLGdCQUFJLEtBQUtyeUIsYUFBTCxDQUFtQnN5Qix1QkFBdkIsRUFBZ0Q7QUFDNUMsb0JBQUlDLFVBQVUsS0FBS3Z5QixhQUFMLENBQW1Cc3lCLHVCQUFuQixFQUFkO0FBQ0FGLDBCQUFVRyxRQUFRQyxnQkFBbEI7QUFDQUgsMEJBQVVFLFFBQVFFLGtCQUFsQjtBQUNILGFBSkQsTUFJTyxJQUFJLEtBQUt6eUIsYUFBTCxDQUFtQjB5Qix1QkFBbkIsSUFBOENqckMsU0FBbEQsRUFBNkQ7QUFDaEUycUMsMEJBQVUsS0FBS3B5QixhQUFMLENBQW1CMHlCLHVCQUE3QjtBQUNBTCwwQkFBVSxLQUFLcnlCLGFBQUwsQ0FBbUIyeUIsdUJBQTdCO0FBQ0gsYUFITSxNQUdBO0FBQ0hSLGlDQUFpQixLQUFqQjtBQUNIOztBQUVELGdCQUFJQSxjQUFKLEVBQW9CO0FBQ2hCbHRCLHFCQUFLMnRCLGFBQUwsR0FBcUJSLE9BQXJCO0FBQ0FudEIscUJBQUs0dEIsYUFBTCxHQUFxQlIsT0FBckI7QUFDSDs7QUFFRCxtQkFBT3B0QixJQUFQO0FBQ0g7Ozs7OztrQkFnQlV1YixZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdPZjs7QUFDQTs7Ozs7O0FBbkJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQk8sSUFBTU0sa0NBQWE7QUFDdEJnUixtQkFBZSxjQURPO0FBRXRCVixpQkFBYSxZQUZTO0FBR3RCbUQsaUJBQWE7QUFIUyxDQUFuQjs7QUFNQSxJQUFNeFQsc0NBQWU7QUFDeEJ5VCx1QkFBbUI1USxxQkFBYUksU0FEUjtBQUV4QnlRLGlDQUE2QjdRLHFCQUFhQyx3QkFGbEI7QUFHeEI2USxxQkFBaUI5USxxQkFBYXdGLGtCQUhOO0FBSXhCdUwscUNBQWlDL1EscUJBQWFzRix1QkFKdEI7O0FBTXhCbUkscUJBQWlCLGVBTk87O0FBUXhCdUQsd0JBQW9CaG9CLHNCQUFZMEUsWUFSUjtBQVN4QnVqQiw4QkFBMEJqb0Isc0JBQVlDLGtCQVRkO0FBVXhCaW9CLDZCQUF5QmxvQixzQkFBWTJFO0FBVmIsQ0FBckIsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzQlA7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxJQUFNc1AsZUFBZTtBQUNqQnJlLFNBQU8sT0FEVTtBQUVqQjZFLG9CQUFrQixrQkFGRDtBQUdqQkUsdUJBQXFCLHFCQUhKO0FBSWpCRSxjQUFZLFlBSks7QUFLakJFLG1CQUFpQjtBQUxBLENBQXJCOztrQkFRZWtaLFk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDMUJmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBbUJNa1UsRzs7Ozs7Ozt1Q0FFb0I5eUIsSyxFQUFPNlYsWSxFQUFjO0FBQ3ZDLGdCQUFJN1YsVUFBVSxXQUFkLEVBQTJCO0FBQ3ZCO0FBQ0Esb0JBQUk2VixpQkFBaUIsQ0FBckIsRUFBd0I7QUFDcEIsMkJBQU8sSUFBSTlILFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixDQUFmLENBQVA7QUFDSCxpQkFGRCxNQUVPLElBQUk4SCxpQkFBaUIsQ0FBckIsRUFBd0I7QUFDM0IsMkJBQU8sSUFBSTlILFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxFQUEyQyxJQUEzQyxFQUFpRCxJQUFqRCxDQUFmLENBQVA7QUFDSCxpQkFGTSxNQUVBLElBQUk4SCxpQkFBaUIsQ0FBckIsRUFBd0I7QUFDM0IsMkJBQU8sSUFBSTlILFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxFQUEyQyxJQUEzQyxFQUFpRCxJQUFqRCxFQUF1RCxJQUF2RCxFQUE2RCxJQUE3RCxFQUFtRSxJQUFuRSxFQUF5RSxJQUF6RSxDQUFmLENBQVA7QUFDSCxpQkFGTSxNQUVBLElBQUk4SCxpQkFBaUIsQ0FBckIsRUFBd0I7QUFDM0IsMkJBQU8sSUFBSTlILFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxFQUEyQyxJQUEzQyxFQUFpRCxJQUFqRCxFQUF1RCxJQUF2RCxFQUE2RCxJQUE3RCxFQUFtRSxJQUFuRSxFQUF5RSxJQUF6RSxFQUErRSxJQUEvRSxFQUFxRixJQUFyRixFQUEyRixJQUEzRixFQUFpRyxJQUFqRyxFQUF1RyxJQUF2RyxDQUFmLENBQVA7QUFDSCxpQkFGTSxNQUVBLElBQUk4SCxpQkFBaUIsQ0FBckIsRUFBd0I7QUFDM0IsMkJBQU8sSUFBSTlILFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxFQUEyQyxJQUEzQyxFQUFpRCxJQUFqRCxFQUF1RCxJQUF2RCxFQUE2RCxJQUE3RCxFQUFtRSxJQUFuRSxFQUF5RSxJQUF6RSxFQUErRSxJQUEvRSxFQUFxRixJQUFyRixFQUEyRixJQUEzRixFQUFpRyxJQUFqRyxFQUF1RyxJQUF2RyxFQUE2RyxJQUE3RyxFQUFtSCxJQUFuSCxFQUF5SCxJQUF6SCxDQUFmLENBQVA7QUFDSCxpQkFGTSxNQUVBLElBQUk4SCxpQkFBaUIsQ0FBckIsRUFBd0I7QUFDM0IsMkJBQU8sSUFBSTlILFVBQUosQ0FBZSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxFQUEyQyxJQUEzQyxFQUFpRCxJQUFqRCxFQUF1RCxJQUF2RCxFQUE2RCxJQUE3RCxFQUFtRSxJQUFuRSxFQUF5RSxJQUF6RSxFQUErRSxJQUEvRSxFQUFxRixJQUFyRixFQUEyRixJQUEzRixFQUFpRyxJQUFqRyxFQUF1RyxJQUF2RyxFQUE2RyxJQUE3RyxFQUFtSCxJQUFuSCxFQUF5SCxJQUF6SCxFQUErSCxJQUEvSCxFQUFxSSxJQUFySSxFQUEySSxJQUEzSSxFQUFpSixJQUFqSixFQUF1SixJQUF2SixDQUFmLENBQVA7QUFDSDtBQUNKLGFBZkQsTUFlTztBQUNIO0FBQ0Esb0JBQUk4SCxpQkFBaUIsQ0FBckIsRUFBd0I7QUFDcEI7QUFDQSwyQkFBTyxJQUFJOUgsVUFBSixDQUFlLENBQUMsR0FBRCxFQUFNLElBQU4sRUFBWSxJQUFaLEVBQWtCLElBQWxCLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQW9DLElBQXBDLEVBQTBDLElBQTFDLEVBQWdELElBQWhELEVBQXNELEdBQXRELEVBQTJELEdBQTNELEVBQWdFLEdBQWhFLEVBQXFFLEdBQXJFLEVBQTBFLElBQTFFLEVBQWdGLEdBQWhGLEVBQXFGLElBQXJGLEVBQTJGLElBQTNGLEVBQWlHLEdBQWpHLEVBQXNHLElBQXRHLEVBQTRHLElBQTVHLEVBQWtILElBQWxILEVBQXdILElBQXhILEVBQThILElBQTlILEVBQW9JLElBQXBJLEVBQTBJLElBQTFJLEVBQWdKLElBQWhKLEVBQXNKLElBQXRKLEVBQTRKLElBQTVKLEVBQWtLLElBQWxLLEVBQXdLLElBQXhLLEVBQThLLElBQTlLLEVBQW9MLElBQXBMLEVBQTBMLElBQTFMLEVBQWdNLElBQWhNLEVBQXNNLElBQXRNLEVBQTRNLElBQTVNLEVBQWtOLElBQWxOLEVBQXdOLElBQXhOLEVBQThOLElBQTlOLEVBQW9PLElBQXBPLEVBQTBPLElBQTFPLEVBQWdQLElBQWhQLEVBQXNQLElBQXRQLEVBQTRQLElBQTVQLEVBQWtRLElBQWxRLEVBQXdRLElBQXhRLEVBQThRLElBQTlRLEVBQW9SLElBQXBSLEVBQTBSLElBQTFSLEVBQWdTLElBQWhTLEVBQXNTLElBQXRTLEVBQTRTLElBQTVTLEVBQWtULElBQWxULEVBQXdULElBQXhULEVBQThULElBQTlULEVBQW9VLElBQXBVLEVBQTBVLElBQTFVLEVBQWdWLElBQWhWLEVBQXNWLElBQXRWLENBQWYsQ0FBUDtBQUNILGlCQUhELE1BR08sSUFBSThILGlCQUFpQixDQUFyQixFQUF3QjtBQUMzQjtBQUNBLDJCQUFPLElBQUk5SCxVQUFKLENBQWUsQ0FBQyxHQUFELEVBQU0sSUFBTixFQUFZLElBQVosRUFBa0IsSUFBbEIsRUFBd0IsSUFBeEIsRUFBOEIsSUFBOUIsRUFBb0MsSUFBcEMsRUFBMEMsSUFBMUMsRUFBZ0QsSUFBaEQsRUFBc0QsR0FBdEQsRUFBMkQsR0FBM0QsRUFBZ0UsR0FBaEUsRUFBcUUsR0FBckUsRUFBMEUsR0FBMUUsRUFBK0UsSUFBL0UsRUFBcUYsR0FBckYsRUFBMEYsR0FBMUYsRUFBK0YsSUFBL0YsRUFBcUcsSUFBckcsRUFBMkcsR0FBM0csRUFBZ0gsSUFBaEgsRUFBc0gsSUFBdEgsRUFBNEgsSUFBNUgsRUFBa0ksSUFBbEksRUFBd0ksSUFBeEksRUFBOEksSUFBOUksRUFBb0osSUFBcEosRUFBMEosSUFBMUosRUFBZ0ssSUFBaEssRUFBc0ssSUFBdEssRUFBNEssSUFBNUssRUFBa0wsSUFBbEwsRUFBd0wsSUFBeEwsRUFBOEwsSUFBOUwsRUFBb00sSUFBcE0sRUFBME0sSUFBMU0sRUFBZ04sSUFBaE4sRUFBc04sSUFBdE4sRUFBNE4sSUFBNU4sRUFBa08sSUFBbE8sRUFBd08sSUFBeE8sRUFBOE8sSUFBOU8sRUFBb1AsSUFBcFAsRUFBMFAsSUFBMVAsRUFBZ1EsSUFBaFEsRUFBc1EsSUFBdFEsRUFBNFEsSUFBNVEsRUFBa1IsSUFBbFIsRUFBd1IsSUFBeFIsRUFBOFIsSUFBOVIsRUFBb1MsSUFBcFMsRUFBMFMsSUFBMVMsRUFBZ1QsSUFBaFQsRUFBc1QsSUFBdFQsRUFBNFQsSUFBNVQsRUFBa1UsSUFBbFUsRUFBd1UsSUFBeFUsRUFBOFUsSUFBOVUsRUFBb1YsSUFBcFYsQ0FBZixDQUFQO0FBQ0gsaUJBSE0sTUFHQSxJQUFJOEgsaUJBQWlCLENBQXJCLEVBQXdCO0FBQzNCO0FBQ0EsMkJBQU8sSUFBSTlILFVBQUosQ0FBZSxDQUFDLEdBQUQsRUFBTSxJQUFOLEVBQVksSUFBWixFQUFrQixJQUFsQixFQUF3QixJQUF4QixFQUE4QixJQUE5QixFQUFvQyxJQUFwQyxFQUEwQyxJQUExQyxFQUFnRCxJQUFoRCxFQUFzRCxHQUF0RCxFQUEyRCxHQUEzRCxFQUFnRSxHQUFoRSxFQUFxRSxHQUFyRSxFQUEwRSxHQUExRSxFQUErRSxJQUEvRSxFQUFxRixHQUFyRixFQUEwRixHQUExRixFQUErRixJQUEvRixFQUFxRyxJQUFyRyxFQUEyRyxHQUEzRyxFQUFnSCxJQUFoSCxFQUFzSCxJQUF0SCxFQUE0SCxJQUE1SCxFQUFrSSxJQUFsSSxFQUF3SSxJQUF4SSxFQUE4SSxJQUE5SSxFQUFvSixJQUFwSixFQUEwSixJQUExSixFQUFnSyxJQUFoSyxFQUFzSyxJQUF0SyxFQUE0SyxJQUE1SyxFQUFrTCxJQUFsTCxFQUF3TCxJQUF4TCxFQUE4TCxJQUE5TCxFQUFvTSxJQUFwTSxFQUEwTSxJQUExTSxFQUFnTixJQUFoTixFQUFzTixJQUF0TixFQUE0TixJQUE1TixFQUFrTyxJQUFsTyxFQUF3TyxJQUF4TyxFQUE4TyxJQUE5TyxFQUFvUCxJQUFwUCxFQUEwUCxJQUExUCxFQUFnUSxJQUFoUSxFQUFzUSxJQUF0USxFQUE0USxJQUE1USxFQUFrUixJQUFsUixFQUF3UixJQUF4UixFQUE4UixJQUE5UixFQUFvUyxJQUFwUyxFQUEwUyxJQUExUyxFQUFnVCxJQUFoVCxFQUFzVCxJQUF0VCxFQUE0VCxJQUE1VCxFQUFrVSxJQUFsVSxFQUF3VSxJQUF4VSxFQUE4VSxJQUE5VSxFQUFvVixJQUFwVixDQUFmLENBQVA7QUFDSDtBQUNKO0FBQ0QsbUJBQU8sSUFBUDtBQUNIOzs7Ozs7a0JBSVUra0IsRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2RGY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7SUFDTUMsRzs7Ozs7OzsyQkFDVztBQUNiQSxVQUFJQyxLQUFKLEdBQVk7QUFDVkMsY0FBTSxFQURJO0FBRVZDLGNBQU0sRUFGSTtBQUdWQyxjQUFNLEVBSEk7QUFJVkMsY0FBTSxFQUpJO0FBS1ZDLGNBQU0sRUFMSTtBQU1WQyxjQUFNLEVBTkk7QUFPVkMsY0FBTSxFQVBJO0FBUVZDLGNBQU0sRUFSSTtBQVNWQyxjQUFNLEVBVEk7QUFVVkMsY0FBTSxFQVZJO0FBV1ZDLGNBQU0sRUFYSTtBQVlWQyxjQUFNLEVBWkk7QUFhVkMsY0FBTSxFQWJJO0FBY1ZDLGNBQU0sRUFkSTtBQWVWQyxjQUFNLEVBZkk7QUFnQlZDLGNBQU0sRUFoQkk7QUFpQlZDLGNBQU0sRUFqQkk7QUFrQlZDLGNBQU0sRUFsQkk7QUFtQlZDLGNBQU0sRUFuQkk7QUFvQlZDLGNBQU0sRUFwQkk7QUFxQlZDLGNBQU0sRUFyQkk7QUFzQlZDLGNBQU0sRUF0Qkk7QUF1QlZDLGNBQU0sRUF2Qkk7QUF3QlZDLGNBQU0sRUF4Qkk7QUF5QlZDLGNBQU0sRUF6Qkk7QUEwQlZDLGNBQU0sRUExQkk7QUEyQlZDLGNBQU0sRUEzQkk7QUE0QlZDLGNBQU0sRUE1Qkk7QUE2QlZDLGNBQU0sRUE3Qkk7QUE4QlZDLGNBQU0sRUE5Qkk7QUErQlZDLGNBQU0sRUEvQkk7QUFnQ1ZDLGNBQU0sRUFoQ0k7QUFpQ1ZDLGNBQU0sRUFqQ0k7QUFrQ1ZDLGNBQU0sRUFsQ0k7QUFtQ1YsZ0JBQVE7QUFuQ0UsT0FBWjs7QUFzQ0EsV0FBSyxJQUFJdmlDLElBQVQsSUFBaUJvZ0MsSUFBSUMsS0FBckIsRUFBNEI7QUFDMUIsWUFBSUQsSUFBSUMsS0FBSixDQUFVbHdCLGNBQVYsQ0FBeUJuUSxJQUF6QixDQUFKLEVBQW9DO0FBQ2xDb2dDLGNBQUlDLEtBQUosQ0FBVXJnQyxJQUFWLElBQWtCLENBQ2hCQSxLQUFLd2lDLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FEZ0IsRUFFaEJ4aUMsS0FBS3dpQyxVQUFMLENBQWdCLENBQWhCLENBRmdCLEVBR2hCeGlDLEtBQUt3aUMsVUFBTCxDQUFnQixDQUFoQixDQUhnQixFQUloQnhpQyxLQUFLd2lDLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FKZ0IsQ0FBbEI7QUFNRDtBQUNGOztBQUVELFVBQUlDLFlBQVlyQyxJQUFJcUMsU0FBSixHQUFnQixFQUFoQzs7QUFFQUEsZ0JBQVVDLElBQVYsR0FBaUIsSUFBSXRuQixVQUFKLENBQWUsQ0FDOUIsSUFEOEIsRUFDeEIsSUFEd0IsRUFDbEIsSUFEa0IsRUFDWixJQURZLEVBQ047QUFDeEIsU0FGOEIsRUFFekIsR0FGeUIsRUFFcEIsR0FGb0IsRUFFZixHQUZlLEVBRVY7QUFDcEIsVUFIOEIsRUFHeEIsSUFId0IsRUFHbEIsSUFIa0IsRUFHWixJQUhZLEVBR047QUFDeEIsVUFKOEIsRUFJeEIsSUFKd0IsRUFJbEIsSUFKa0IsRUFJWixJQUpZLENBSVA7QUFKTyxPQUFmLENBQWpCOztBQU9BcW5CLGdCQUFVRSxXQUFWLEdBQXdCLElBQUl2bkIsVUFBSixDQUFlLENBQ3JDLElBRHFDLEVBQy9CLElBRCtCLEVBQ3pCLElBRHlCLEVBQ25CLElBRG1CLEVBQ2I7QUFDeEIsVUFGcUMsRUFFL0IsSUFGK0IsRUFFekIsSUFGeUIsRUFFbkIsSUFGbUIsQ0FFZDtBQUZjLE9BQWYsQ0FBeEI7O0FBS0FxbkIsZ0JBQVVHLElBQVYsR0FBaUIsSUFBSXhuQixVQUFKLENBQWUsQ0FDOUIsSUFEOEIsRUFDeEIsSUFEd0IsRUFDbEIsSUFEa0IsRUFDWixJQURZLEVBQ047QUFDeEIsVUFGOEIsRUFFeEIsSUFGd0IsRUFFbEIsSUFGa0IsRUFFWixJQUZZLENBRVA7QUFGTyxPQUFmLENBQWpCOztBQUtBcW5CLGdCQUFVSSxJQUFWLEdBQWlCSixVQUFVSyxJQUFWLEdBQWlCTCxVQUFVRyxJQUE1Qzs7QUFFQUgsZ0JBQVVNLElBQVYsR0FBaUIsSUFBSTNuQixVQUFKLENBQWUsQ0FDOUIsSUFEOEIsRUFDeEIsSUFEd0IsRUFDbEIsSUFEa0IsRUFDWixJQURZLEVBQ047QUFDeEIsVUFGOEIsRUFFeEIsSUFGd0IsRUFFbEIsSUFGa0IsRUFFWixJQUZZLEVBRU47QUFDeEIsVUFIOEIsRUFHeEIsSUFId0IsRUFHbEIsSUFIa0IsRUFHWixJQUhZLENBR1A7QUFITyxPQUFmLENBQWpCOztBQU1BcW5CLGdCQUFVTyxVQUFWLEdBQXVCLElBQUk1bkIsVUFBSixDQUFlLENBQ3BDLElBRG9DLEVBQzlCLElBRDhCLEVBQ3hCLElBRHdCLEVBQ2xCLElBRGtCLEVBQ1o7QUFDeEIsVUFGb0MsRUFFOUIsSUFGOEIsRUFFeEIsSUFGd0IsRUFFbEIsSUFGa0IsRUFFWjtBQUN4QixVQUhvQyxFQUc5QixJQUg4QixFQUd4QixJQUh3QixFQUdsQixJQUhrQixFQUdaO0FBQ3hCLFVBSm9DLEVBSTlCLElBSjhCLEVBSXhCLElBSndCLEVBSWxCLElBSmtCLEVBSVo7QUFDeEIsVUFMb0MsRUFLOUIsSUFMOEIsRUFLeEIsSUFMd0IsRUFLbEIsSUFMa0IsRUFNcEMsSUFOb0MsRUFNOUIsSUFOOEIsRUFNeEIsSUFOd0IsRUFNbEIsSUFOa0IsRUFPcEMsSUFQb0MsRUFPOUIsSUFQOEIsRUFPeEIsSUFQd0IsRUFPbEIsSUFQa0IsRUFRcEMsSUFSb0MsRUFROUIsSUFSOEIsRUFReEIsSUFSd0IsRUFRbEIsSUFSa0IsRUFTcEMsSUFUb0MsRUFTOUIsSUFUOEIsRUFTeEIsSUFUd0IsRUFTbEIsSUFUa0IsRUFTWixJQVRZLENBU1A7QUFUTyxPQUFmLENBQXZCOztBQVlBcW5CLGdCQUFVUSxVQUFWLEdBQXVCLElBQUk3bkIsVUFBSixDQUFlLENBQ3BDLElBRG9DLEVBQzlCLElBRDhCLEVBQ3hCLElBRHdCLEVBQ2xCLElBRGtCLEVBQ1o7QUFDeEIsVUFGb0MsRUFFOUIsSUFGOEIsRUFFeEIsSUFGd0IsRUFFbEIsSUFGa0IsRUFFWjtBQUN4QixVQUhvQyxFQUc5QixJQUg4QixFQUd4QixJQUh3QixFQUdsQixJQUhrQixFQUdaO0FBQ3hCLFVBSm9DLEVBSTlCLElBSjhCLEVBSXhCLElBSndCLEVBSWxCLElBSmtCLEVBSVo7QUFDeEIsVUFMb0MsRUFLOUIsSUFMOEIsRUFLeEIsSUFMd0IsRUFLbEIsSUFMa0IsRUFNcEMsSUFOb0MsRUFNOUIsSUFOOEIsRUFNeEIsSUFOd0IsRUFNbEIsSUFOa0IsRUFPcEMsSUFQb0MsRUFPOUIsSUFQOEIsRUFPeEIsSUFQd0IsRUFPbEIsSUFQa0IsRUFRcEMsSUFSb0MsRUFROUIsSUFSOEIsRUFReEIsSUFSd0IsRUFRbEIsSUFSa0IsRUFTcEMsSUFUb0MsRUFTOUIsSUFUOEIsRUFTeEIsSUFUd0IsRUFTbEIsSUFUa0IsRUFTWixJQVRZLENBU1A7QUFUTyxPQUFmLENBQXZCOztBQVlBcW5CLGdCQUFVUyxJQUFWLEdBQWlCLElBQUk5bkIsVUFBSixDQUFlLENBQzlCLElBRDhCLEVBQ3hCLElBRHdCLEVBQ2xCLElBRGtCLEVBQ1osSUFEWSxFQUNOO0FBQ3hCLFVBRjhCLEVBRXhCLElBRndCLEVBRWxCLElBRmtCLEVBRVosSUFGWSxFQUVOO0FBQ3hCLFVBSDhCLEVBR3hCLElBSHdCLEVBR2xCLElBSGtCLEVBR1osSUFIWSxFQUdOO0FBQ3hCLFVBSjhCLEVBSXhCLElBSndCLEVBSWxCLElBSmtCLEVBSVosSUFKWSxFQUlOO0FBQ3hCLFVBTDhCLEVBS3hCLElBTHdCLEVBS2xCLElBTGtCLEVBS1osSUFMWSxDQUtQO0FBTE8sT0FBZixDQUFqQjs7QUFRQTtBQUNBcW5CLGdCQUFVVSxJQUFWLEdBQWlCLElBQUkvbkIsVUFBSixDQUFlLENBQzlCLElBRDhCLEVBQ3hCLElBRHdCLEVBQ2xCLElBRGtCLEVBQ1osSUFEWSxFQUNOO0FBQ3hCLFVBRjhCLEVBRXhCLElBRndCLEVBRWxCLElBRmtCLEVBRVosSUFGWSxDQUVQO0FBRk8sT0FBZixDQUFqQjs7QUFLQTtBQUNBcW5CLGdCQUFVVyxJQUFWLEdBQWlCLElBQUlob0IsVUFBSixDQUFlLENBQzlCLElBRDhCLEVBQ3hCLElBRHdCLEVBQ2xCLElBRGtCLEVBQ1osSUFEWSxFQUNOO0FBQ3hCLFVBRjhCLEVBRXhCLElBRndCLEVBRWxCO0FBQ1osVUFIOEIsRUFHeEIsSUFId0IsRUFHbEIsSUFIa0IsRUFHWixJQUhZLEVBR047QUFDeEIsVUFKOEIsRUFJeEIsSUFKd0IsQ0FBZixDQUFqQjtBQU1EOztBQUVEOzs7O3dCQUNZL3BCLEksRUFBTTtBQUNoQixVQUFJeXBCLE9BQU8sQ0FBWDtBQUNBLFVBQUkrQyxTQUFTLElBQWI7QUFDQSxVQUFJd2xCLFFBQVE3eEMsTUFBTUcsU0FBTixDQUFnQmlMLEtBQWhCLENBQXNCL0ssSUFBdEIsQ0FBMkJtRSxTQUEzQixFQUFzQyxDQUF0QyxDQUFaO0FBQ0EsVUFBSXN0QyxhQUFhRCxNQUFNN3FDLE1BQXZCOztBQUVBLFdBQUssSUFBSTFELElBQUksQ0FBYixFQUFnQkEsSUFBSXd1QyxVQUFwQixFQUFnQ3h1QyxHQUFoQyxFQUFxQztBQUNuQ2dtQixnQkFBUXVvQixNQUFNdnVDLENBQU4sRUFBU21iLFVBQWpCO0FBQ0Q7O0FBRUQ0TixlQUFTLElBQUl6QyxVQUFKLENBQWVOLElBQWYsQ0FBVDtBQUNBK0MsYUFBTyxDQUFQLElBQWEvQyxTQUFTLEVBQVYsR0FBZ0IsSUFBNUIsQ0FYZ0IsQ0FXaUI7QUFDakMrQyxhQUFPLENBQVAsSUFBYS9DLFNBQVMsRUFBVixHQUFnQixJQUE1QjtBQUNBK0MsYUFBTyxDQUFQLElBQWEvQyxTQUFTLENBQVYsR0FBZSxJQUEzQjtBQUNBK0MsYUFBTyxDQUFQLElBQWEvQyxJQUFELEdBQVMsSUFBckI7O0FBRUErQyxhQUFPTCxHQUFQLENBQVduc0IsSUFBWCxFQUFpQixDQUFqQixFQWhCZ0IsQ0FnQkk7O0FBRXBCLFVBQUlzcUIsU0FBUyxDQUFiO0FBQ0EsV0FBSyxJQUFJN21CLEtBQUksQ0FBYixFQUFnQkEsS0FBSXd1QyxVQUFwQixFQUFnQ3h1QyxJQUFoQyxFQUFxQztBQUFFO0FBQ3JDK29CLGVBQU9MLEdBQVAsQ0FBVzZsQixNQUFNdnVDLEVBQU4sQ0FBWCxFQUFxQjZtQixNQUFyQjtBQUNBQSxrQkFBVTBuQixNQUFNdnVDLEVBQU4sRUFBU21iLFVBQW5CO0FBQ0Q7O0FBRUQsYUFBTzROLE1BQVA7QUFDRDs7QUFFRDs7Ozt3Q0FDNEJrRixJLEVBQU07QUFDaEMsVUFBSTZkLE9BQU9SLElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVVPLElBQWxCLEVBQXdCUixJQUFJcUMsU0FBSixDQUFjQyxJQUF0QyxDQUFYO0FBQ0EsVUFBSXRCLE9BQU9oQixJQUFJZ0IsSUFBSixDQUFTcmUsSUFBVCxDQUFYOztBQUVBLFVBQUlsRixTQUFTLElBQUl6QyxVQUFKLENBQWV3bEIsS0FBSzN3QixVQUFMLEdBQWtCbXhCLEtBQUtueEIsVUFBdEMsQ0FBYjtBQUNBNE4sYUFBT0wsR0FBUCxDQUFXb2pCLElBQVgsRUFBaUIsQ0FBakI7QUFDQS9pQixhQUFPTCxHQUFQLENBQVc0akIsSUFBWCxFQUFpQlIsS0FBSzN3QixVQUF0QjtBQUNBLGFBQU80TixNQUFQO0FBQ0Q7O0FBRUQ7Ozs7eUJBQ2FrRixJLEVBQU07QUFDakIsVUFBSXdlLE9BQU9uQixJQUFJbUIsSUFBSixDQUFTeGUsS0FBS0UsU0FBZCxFQUF5QkYsS0FBS3BkLFFBQTlCLENBQVg7QUFDQSxVQUFJdThCLE9BQU85QixJQUFJOEIsSUFBSixDQUFTbmYsSUFBVCxDQUFYO0FBQ0EsVUFBSXVlLE9BQU9sQixJQUFJa0IsSUFBSixDQUFTdmUsSUFBVCxDQUFYO0FBQ0EsYUFBT3FkLElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVVlLElBQWxCLEVBQXdCRyxJQUF4QixFQUE4QlcsSUFBOUIsRUFBb0NaLElBQXBDLENBQVA7QUFDRDs7QUFFRDs7Ozt5QkFDYXJlLFMsRUFBV3RkLFEsRUFBVTtBQUNoQyxhQUFPeTZCLElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVVrQixJQUFsQixFQUF3QixJQUFJbm1CLFVBQUosQ0FBZSxDQUM1QyxJQUQ0QyxFQUN0QyxJQURzQyxFQUNoQyxJQURnQyxFQUMxQixJQUQwQixFQUNwQjtBQUN4QixVQUY0QyxFQUV0QyxJQUZzQyxFQUVoQyxJQUZnQyxFQUUxQixJQUYwQixFQUVwQjtBQUN4QixVQUg0QyxFQUd0QyxJQUhzQyxFQUdoQyxJQUhnQyxFQUcxQixJQUgwQixFQUdwQjtBQUN2QjZILG9CQUFjLEVBQWYsR0FBcUIsSUFKdUIsRUFJakI7QUFDMUJBLG9CQUFjLEVBQWYsR0FBcUIsSUFMdUIsRUFNM0NBLGNBQWMsQ0FBZixHQUFvQixJQU53QixFQU8zQ0EsU0FBRCxHQUFjLElBUDhCLEVBUTNDdGQsYUFBYSxFQUFkLEdBQW9CLElBUndCLEVBUWxCO0FBQ3pCQSxtQkFBYSxFQUFkLEdBQW9CLElBVHdCLEVBVTNDQSxhQUFhLENBQWQsR0FBbUIsSUFWeUIsRUFXM0NBLFFBQUQsR0FBYSxJQVgrQixFQVk1QyxJQVo0QyxFQVl0QyxJQVpzQyxFQVloQyxJQVpnQyxFQVkxQixJQVowQixFQVlwQjtBQUN4QixVQWI0QyxFQWF0QyxJQWJzQyxFQWFoQyxJQWJnQyxFQWExQixJQWIwQixFQWFwQjtBQUN4QixVQWQ0QyxFQWN0QyxJQWRzQyxFQWNoQyxJQWRnQyxFQWMxQixJQWQwQixFQWNwQjtBQUN4QixVQWY0QyxFQWV0QyxJQWZzQyxFQWVoQyxJQWZnQyxFQWUxQixJQWYwQixFQWdCNUMsSUFoQjRDLEVBZ0J0QyxJQWhCc0MsRUFnQmhDLElBaEJnQyxFQWdCMUIsSUFoQjBCLEVBZ0JwQjtBQUN4QixVQWpCNEMsRUFpQnRDLElBakJzQyxFQWlCaEMsSUFqQmdDLEVBaUIxQixJQWpCMEIsRUFrQjVDLElBbEI0QyxFQWtCdEMsSUFsQnNDLEVBa0JoQyxJQWxCZ0MsRUFrQjFCLElBbEIwQixFQW1CNUMsSUFuQjRDLEVBbUJ0QyxJQW5Cc0MsRUFtQmhDLElBbkJnQyxFQW1CMUIsSUFuQjBCLEVBb0I1QyxJQXBCNEMsRUFvQnRDLElBcEJzQyxFQW9CaEMsSUFwQmdDLEVBb0IxQixJQXBCMEIsRUFxQjVDLElBckI0QyxFQXFCdEMsSUFyQnNDLEVBcUJoQyxJQXJCZ0MsRUFxQjFCLElBckIwQixFQXNCNUMsSUF0QjRDLEVBc0J0QyxJQXRCc0MsRUFzQmhDLElBdEJnQyxFQXNCMUIsSUF0QjBCLEVBdUI1QyxJQXZCNEMsRUF1QnRDLElBdkJzQyxFQXVCaEMsSUF2QmdDLEVBdUIxQixJQXZCMEIsRUF3QjVDLElBeEI0QyxFQXdCdEMsSUF4QnNDLEVBd0JoQyxJQXhCZ0MsRUF3QjFCLElBeEIwQixFQXdCcEI7QUFDeEIsVUF6QjRDLEVBeUJ0QyxJQXpCc0MsRUF5QmhDLElBekJnQyxFQXlCMUIsSUF6QjBCLEVBeUJwQjtBQUN4QixVQTFCNEMsRUEwQnRDLElBMUJzQyxFQTBCaEMsSUExQmdDLEVBMEIxQixJQTFCMEIsRUEyQjVDLElBM0I0QyxFQTJCdEMsSUEzQnNDLEVBMkJoQyxJQTNCZ0MsRUEyQjFCLElBM0IwQixFQTRCNUMsSUE1QjRDLEVBNEJ0QyxJQTVCc0MsRUE0QmhDLElBNUJnQyxFQTRCMUIsSUE1QjBCLEVBNkI1QyxJQTdCNEMsRUE2QnRDLElBN0JzQyxFQTZCaEMsSUE3QmdDLEVBNkIxQixJQTdCMEIsRUE4QjVDLElBOUI0QyxFQThCdEMsSUE5QnNDLEVBOEJoQyxJQTlCZ0MsRUE4QjFCLElBOUIwQixFQThCcEI7QUFDeEIsVUEvQjRDLEVBK0J0QyxJQS9Cc0MsRUErQmhDLElBL0JnQyxFQStCMUIsSUEvQjBCLENBK0JyQjtBQS9CcUIsT0FBZixDQUF4QixDQUFQO0FBaUNEOztBQUVEOzs7O3lCQUNhb2QsSSxFQUFNO0FBQ2pCLGFBQU9xZCxJQUFJbUQsR0FBSixDQUFRbkQsSUFBSUMsS0FBSixDQUFVNkIsSUFBbEIsRUFBd0I5QixJQUFJaUMsSUFBSixDQUFTdGYsSUFBVCxDQUF4QixFQUF3Q3FkLElBQUlZLElBQUosQ0FBU2plLElBQVQsQ0FBeEMsQ0FBUDtBQUNEOztBQUVEOzs7O3lCQUNhQSxJLEVBQU07QUFDakIsVUFBSXlnQixVQUFVemdCLEtBQUszcEIsRUFBbkI7QUFBQSxVQUF1QnVNLFdBQVdvZCxLQUFLcGQsUUFBdkM7QUFDQSxVQUFJUyxRQUFRMmMsS0FBSzJELFlBQWpCO0FBQUEsVUFBK0JyZ0IsU0FBUzBjLEtBQUs2RCxhQUE3Qzs7QUFFQSxhQUFPd1osSUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVWdDLElBQWxCLEVBQXdCLElBQUlqbkIsVUFBSixDQUFlLENBQzVDLElBRDRDLEVBQ3RDLElBRHNDLEVBQ2hDLElBRGdDLEVBQzFCLElBRDBCLEVBQ3BCO0FBQ3hCLFVBRjRDLEVBRXRDLElBRnNDLEVBRWhDLElBRmdDLEVBRTFCLElBRjBCLEVBRXBCO0FBQ3hCLFVBSDRDLEVBR3RDLElBSHNDLEVBR2hDLElBSGdDLEVBRzFCLElBSDBCLEVBR3BCO0FBQ3ZCb29CLGtCQUFZLEVBQWIsR0FBbUIsSUFKeUIsRUFJbkI7QUFDeEJBLGtCQUFZLEVBQWIsR0FBbUIsSUFMeUIsRUFNM0NBLFlBQVksQ0FBYixHQUFrQixJQU4wQixFQU8zQ0EsT0FBRCxHQUFZLElBUGdDLEVBUTVDLElBUjRDLEVBUXRDLElBUnNDLEVBUWhDLElBUmdDLEVBUTFCLElBUjBCLEVBUXBCO0FBQ3ZCNzlCLG1CQUFhLEVBQWQsR0FBb0IsSUFUd0IsRUFTbEI7QUFDekJBLG1CQUFhLEVBQWQsR0FBb0IsSUFWd0IsRUFXM0NBLGFBQWEsQ0FBZCxHQUFtQixJQVh5QixFQVkzQ0EsUUFBRCxHQUFhLElBWitCLEVBYTVDLElBYjRDLEVBYXRDLElBYnNDLEVBYWhDLElBYmdDLEVBYTFCLElBYjBCLEVBYXBCO0FBQ3hCLFVBZDRDLEVBY3RDLElBZHNDLEVBY2hDLElBZGdDLEVBYzFCLElBZDBCLEVBZTVDLElBZjRDLEVBZXRDLElBZnNDLEVBZWhDLElBZmdDLEVBZTFCLElBZjBCLEVBZXBCO0FBQ3hCLFVBaEI0QyxFQWdCdEMsSUFoQnNDLEVBZ0JoQyxJQWhCZ0MsRUFnQjFCLElBaEIwQixFQWdCcEI7QUFDeEIsVUFqQjRDLEVBaUJ0QyxJQWpCc0MsRUFpQmhDLElBakJnQyxFQWlCMUIsSUFqQjBCLEVBaUJwQjtBQUN4QixVQWxCNEMsRUFrQnRDLElBbEJzQyxFQWtCaEMsSUFsQmdDLEVBa0IxQixJQWxCMEIsRUFtQjVDLElBbkI0QyxFQW1CdEMsSUFuQnNDLEVBbUJoQyxJQW5CZ0MsRUFtQjFCLElBbkIwQixFQW9CNUMsSUFwQjRDLEVBb0J0QyxJQXBCc0MsRUFvQmhDLElBcEJnQyxFQW9CMUIsSUFwQjBCLEVBcUI1QyxJQXJCNEMsRUFxQnRDLElBckJzQyxFQXFCaEMsSUFyQmdDLEVBcUIxQixJQXJCMEIsRUFzQjVDLElBdEI0QyxFQXNCdEMsSUF0QnNDLEVBc0JoQyxJQXRCZ0MsRUFzQjFCLElBdEIwQixFQXVCNUMsSUF2QjRDLEVBdUJ0QyxJQXZCc0MsRUF1QmhDLElBdkJnQyxFQXVCMUIsSUF2QjBCLEVBd0I1QyxJQXhCNEMsRUF3QnRDLElBeEJzQyxFQXdCaEMsSUF4QmdDLEVBd0IxQixJQXhCMEIsRUF5QjVDLElBekI0QyxFQXlCdEMsSUF6QnNDLEVBeUJoQyxJQXpCZ0MsRUF5QjFCLElBekIwQixFQXlCcEI7QUFDdkJTLGdCQUFVLENBQVgsR0FBZ0IsSUExQjRCLEVBMEJ0QjtBQUNyQkEsV0FBRCxHQUFVLElBM0JrQyxFQTRCNUMsSUE1QjRDLEVBNEJ0QyxJQTVCc0MsRUE2QjNDQyxXQUFXLENBQVosR0FBaUIsSUE3QjJCLEVBOEIzQ0EsTUFBRCxHQUFXLElBOUJpQyxFQStCNUMsSUEvQjRDLEVBK0J0QyxJQS9Cc0MsQ0FBZixDQUF4QixDQUFQO0FBaUNEOztBQUVEOzs7O3lCQUNhMGMsSSxFQUFNO0FBQ2pCLGFBQU9xZCxJQUFJbUQsR0FBSixDQUFRbkQsSUFBSUMsS0FBSixDQUFVVyxJQUFsQixFQUF3QlosSUFBSVcsSUFBSixDQUFTaGUsSUFBVCxDQUF4QixFQUF3Q3FkLElBQUlTLElBQUosQ0FBUzlkLElBQVQsQ0FBeEMsRUFBd0RxZCxJQUFJYyxJQUFKLENBQVNuZSxJQUFULENBQXhELENBQVA7QUFDRDs7QUFFRDs7Ozt5QkFDYUEsSSxFQUFNO0FBQ2pCLFVBQUlFLFlBQVlGLEtBQUtFLFNBQXJCO0FBQ0EsVUFBSXRkLFdBQVdvZCxLQUFLcGQsUUFBcEI7QUFDQSxhQUFPeTZCLElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVVVLElBQWxCLEVBQXdCLElBQUkzbEIsVUFBSixDQUFlLENBQzVDLElBRDRDLEVBQ3RDLElBRHNDLEVBQ2hDLElBRGdDLEVBQzFCLElBRDBCLEVBQ3BCO0FBQ3hCLFVBRjRDLEVBRXRDLElBRnNDLEVBRWhDLElBRmdDLEVBRTFCLElBRjBCLEVBRXBCO0FBQ3hCLFVBSDRDLEVBR3RDLElBSHNDLEVBR2hDLElBSGdDLEVBRzFCLElBSDBCLEVBR3BCO0FBQ3ZCNkgsb0JBQWMsRUFBZixHQUFxQixJQUp1QixFQUlqQjtBQUMxQkEsb0JBQWMsRUFBZixHQUFxQixJQUx1QixFQU0zQ0EsY0FBYyxDQUFmLEdBQW9CLElBTndCLEVBTzNDQSxTQUFELEdBQWMsSUFQOEIsRUFRM0N0ZCxhQUFhLEVBQWQsR0FBb0IsSUFSd0IsRUFRbEI7QUFDekJBLG1CQUFhLEVBQWQsR0FBb0IsSUFUd0IsRUFVM0NBLGFBQWEsQ0FBZCxHQUFtQixJQVZ5QixFQVczQ0EsUUFBRCxHQUFhLElBWCtCLEVBWTVDLElBWjRDLEVBWXRDLElBWnNDLEVBWWhDO0FBQ1osVUFiNEMsRUFhdEMsSUFic0MsQ0FhakM7QUFiaUMsT0FBZixDQUF4QixDQUFQO0FBZUQ7O0FBRUQ7Ozs7eUJBQ2FvZCxJLEVBQU07QUFDakIsVUFBSTF1QixPQUFPLElBQVg7QUFDQSxVQUFJMHVCLEtBQUsxeEIsSUFBTCxLQUFjLE9BQWxCLEVBQTJCO0FBQ3pCZ0QsZUFBTytyQyxJQUFJcUMsU0FBSixDQUFjUSxVQUFyQjtBQUNELE9BRkQsTUFFTztBQUNMNXVDLGVBQU8rckMsSUFBSXFDLFNBQUosQ0FBY08sVUFBckI7QUFDRDtBQUNELGFBQU81QyxJQUFJbUQsR0FBSixDQUFRbkQsSUFBSUMsS0FBSixDQUFVUSxJQUFsQixFQUF3QnhzQyxJQUF4QixDQUFQO0FBQ0Q7O0FBRUQ7Ozs7eUJBQ2EwdUIsSSxFQUFNO0FBQ2pCLFVBQUkwZ0IsT0FBTyxJQUFYO0FBQ0EsVUFBSTFnQixLQUFLMXhCLElBQUwsS0FBYyxPQUFsQixFQUEyQjtBQUN6Qm95QyxlQUFPckQsSUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVWtDLElBQWxCLEVBQXdCbkMsSUFBSXFDLFNBQUosQ0FBY1UsSUFBdEMsQ0FBUDtBQUNELE9BRkQsTUFFTztBQUNMTSxlQUFPckQsSUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVWlDLElBQWxCLEVBQXdCbEMsSUFBSXFDLFNBQUosQ0FBY1csSUFBdEMsQ0FBUDtBQUNEO0FBQ0QsYUFBT2hELElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVVhLElBQWxCLEVBQXdCdUMsSUFBeEIsRUFBOEJyRCxJQUFJSyxJQUFKLEVBQTlCLEVBQTBDTCxJQUFJcUIsSUFBSixDQUFTMWUsSUFBVCxDQUExQyxDQUFQO0FBQ0Q7O0FBRUQ7Ozs7MkJBQ2U7QUFDYixVQUFJbEYsU0FBU3VpQixJQUFJbUQsR0FBSixDQUFRbkQsSUFBSUMsS0FBSixDQUFVSSxJQUFsQixFQUNYTCxJQUFJbUQsR0FBSixDQUFRbkQsSUFBSUMsS0FBSixDQUFVSyxJQUFsQixFQUF3Qk4sSUFBSXFDLFNBQUosQ0FBY1MsSUFBdEMsQ0FEVyxDQUFiO0FBR0EsYUFBT3JsQixNQUFQO0FBQ0Q7O0FBRUQ7Ozs7eUJBQ2FrRixJLEVBQU07QUFDakIsVUFBSWxGLFNBQVN1aUIsSUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVW9CLElBQWxCLEVBQXdCO0FBQ25DckIsVUFBSXdCLElBQUosQ0FBUzdlLElBQVQsQ0FEVyxFQUNLO0FBQ2hCcWQsVUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVXlCLElBQWxCLEVBQXdCMUIsSUFBSXFDLFNBQUosQ0FBY0csSUFBdEMsQ0FGVyxFQUVrQztBQUM3Q3hDLFVBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVVzQixJQUFsQixFQUF3QnZCLElBQUlxQyxTQUFKLENBQWNJLElBQXRDLENBSFcsRUFHa0M7QUFDN0N6QyxVQUFJbUQsR0FBSixDQUFRbkQsSUFBSUMsS0FBSixDQUFVd0IsSUFBbEIsRUFBd0J6QixJQUFJcUMsU0FBSixDQUFjTSxJQUF0QyxDQUpXLEVBSWtDO0FBQzdDM0MsVUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVXFCLElBQWxCLEVBQXdCdEIsSUFBSXFDLFNBQUosQ0FBY0ssSUFBdEMsQ0FMVyxDQUtpQztBQUxqQyxPQUFiO0FBT0EsYUFBT2psQixNQUFQO0FBQ0Q7O0FBRUQ7Ozs7eUJBQ2FrRixJLEVBQU07QUFDakIsVUFBSUEsS0FBSzF4QixJQUFMLEtBQWMsT0FBbEIsRUFBMkI7QUFDekIsWUFBSTB4QixLQUFLMVYsS0FBTCxLQUFlLEtBQW5CLEVBQTBCO0FBQ3hCLGlCQUFPK3lCLElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVV1QixJQUFsQixFQUF3QnhCLElBQUlxQyxTQUFKLENBQWNFLFdBQXRDLEVBQW1EdkMsSUFBSXNELEdBQUosQ0FBUTNnQixJQUFSLENBQW5ELENBQVA7QUFDRDtBQUNEO0FBQ0EsZUFBT3FkLElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVV1QixJQUFsQixFQUF3QnhCLElBQUlxQyxTQUFKLENBQWNFLFdBQXRDLEVBQW1EdkMsSUFBSWlCLElBQUosQ0FBU3RlLElBQVQsQ0FBbkQsQ0FBUDtBQUNELE9BTkQsTUFNTztBQUNMLGVBQU9xZCxJQUFJbUQsR0FBSixDQUFRbkQsSUFBSUMsS0FBSixDQUFVdUIsSUFBbEIsRUFBd0J4QixJQUFJcUMsU0FBSixDQUFjRSxXQUF0QyxFQUFtRHZDLElBQUlFLElBQUosQ0FBU3ZkLElBQVQsQ0FBbkQsQ0FBUDtBQUNEO0FBQ0Y7Ozt3QkFFV0EsSSxFQUFNO0FBQ2hCLFVBQUlHLGVBQWVILEtBQUtHLFlBQXhCO0FBQ0EsVUFBSXlnQixhQUFhNWdCLEtBQUs3YyxlQUF0Qjs7QUFFQSxVQUFJN1IsT0FBTyxJQUFJK21CLFVBQUosQ0FBZSxDQUN4QixJQUR3QixFQUNsQixJQURrQixFQUNaLElBRFksRUFDTixJQURNLEVBQ0E7QUFDeEIsVUFGd0IsRUFFbEIsSUFGa0IsRUFFWixJQUZZLEVBRU4sSUFGTSxFQUVBO0FBQ3hCLFVBSHdCLEVBR2xCLElBSGtCLEVBR1osSUFIWSxFQUdOLElBSE0sRUFHQTtBQUN4QixVQUp3QixFQUlsQixJQUprQixFQUlaLElBSlksRUFJTixJQUpNLEVBS3hCLElBTHdCLEVBS2xCOEgsWUFMa0IsRUFLSjtBQUNwQixVQU53QixFQU1sQixJQU5rQixFQU1aO0FBQ1osVUFQd0IsRUFPbEIsSUFQa0IsRUFPWixJQVBZLEVBT04sSUFQTSxFQU9BO0FBQ3ZCeWdCLHFCQUFlLENBQWhCLEdBQXFCLElBUkcsRUFRRztBQUMxQkEsZ0JBQUQsR0FBZSxJQVRTLEVBVXhCLElBVndCLEVBVWxCLElBVmtCLENBQWYsQ0FBWDs7QUFhQSxhQUFPdkQsSUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVSxNQUFWLENBQVIsRUFBMkJoc0MsSUFBM0IsQ0FBUDtBQUNEOzs7eUJBRVkwdUIsSSxFQUFNO0FBQ2pCLFVBQUlHLGVBQWVILEtBQUtHLFlBQXhCO0FBQ0EsVUFBSXlnQixhQUFhNWdCLEtBQUs3YyxlQUF0Qjs7QUFFQSxVQUFJN1IsT0FBTyxJQUFJK21CLFVBQUosQ0FBZSxDQUN4QixJQUR3QixFQUNsQixJQURrQixFQUNaLElBRFksRUFDTixJQURNLEVBQ0E7QUFDeEIsVUFGd0IsRUFFbEIsSUFGa0IsRUFFWixJQUZZLEVBRU4sSUFGTSxFQUVBO0FBQ3hCLFVBSHdCLEVBR2xCLElBSGtCLEVBR1osSUFIWSxFQUdOLElBSE0sRUFHQTtBQUN4QixVQUp3QixFQUlsQixJQUprQixFQUlaLElBSlksRUFJTixJQUpNLEVBS3hCLElBTHdCLEVBS2xCOEgsWUFMa0IsRUFLSjtBQUNwQixVQU53QixFQU1sQixJQU5rQixFQU1aO0FBQ1osVUFQd0IsRUFPbEIsSUFQa0IsRUFPWixJQVBZLEVBT04sSUFQTSxFQU9BO0FBQ3ZCeWdCLHFCQUFlLENBQWhCLEdBQXFCLElBUkcsRUFRRztBQUMxQkEsZ0JBQUQsR0FBZSxJQVRTLEVBVXhCLElBVndCLEVBVWxCLElBVmtCLENBQWYsQ0FBWDs7QUFhQSxhQUFPdkQsSUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVWdCLElBQWxCLEVBQXdCaHRDLElBQXhCLEVBQThCK3JDLElBQUlPLElBQUosQ0FBUzVkLElBQVQsQ0FBOUIsQ0FBUDtBQUNEOzs7eUJBRVlBLEksRUFBTTtBQUNqQixVQUFJOVksU0FBUzhZLEtBQUs5WSxNQUFMLElBQWUsRUFBNUI7QUFDQSxVQUFJMjVCLGFBQWEzNUIsT0FBT3pSLE1BQXhCO0FBQ0EsVUFBSW5FLE9BQU8sSUFBSSttQixVQUFKLENBQWUsQ0FDeEIsSUFEd0IsRUFDbEIsSUFEa0IsRUFDWixJQURZLEVBQ04sSUFETSxFQUNBOztBQUV4QixVQUh3QixFQUdsQjtBQUNOLGFBQU93b0IsVUFKaUIsRUFJTDtBQUNuQixVQUx3QixFQUtsQixJQUxrQixFQUtaO0FBQ1osVUFOd0IsRUFNbEI7O0FBRU4sVUFSd0IsRUFRbEI7QUFDTixhQUFPQSxVQVRpQixFQVNMO0FBQ25CLFVBVndCLEVBVWxCO0FBQ04sVUFYd0IsRUFXbEI7QUFDTixVQVp3QixFQVlsQixJQVprQixFQVlaLElBWlksRUFZTjtBQUNsQixVQWJ3QixFQWFsQixJQWJrQixFQWFaLElBYlksRUFhTixJQWJNLEVBYUE7QUFDeEIsVUFkd0IsRUFjbEIsSUFka0IsRUFjWixJQWRZLEVBY04sSUFkTSxFQWNBOztBQUV4QixVQWhCd0IsQ0FnQm5CO0FBaEJtQixRQWlCeEIza0MsTUFqQndCLENBaUJqQixDQUNQMmtDLFVBRE8sQ0FqQmlCLEVBbUJ2QjNrQyxNQW5CdUIsQ0FvQnhCZ0wsTUFwQndCLEVBcUJ4QmhMLE1BckJ3QixDQXFCakIsQ0FDUCxJQURPLEVBQ0QsSUFEQyxFQUNLLElBREwsQ0FDVTtBQURWLE9BckJpQixDQUFmLENBQVg7QUF3QkEsYUFBT21oQyxJQUFJbUQsR0FBSixDQUFRbkQsSUFBSUMsS0FBSixDQUFVTSxJQUFsQixFQUF3QnRzQyxJQUF4QixDQUFQO0FBQ0Q7Ozt5QkFFWTB1QixJLEVBQU07QUFDakIsVUFBSWdELE9BQU9oRCxLQUFLZ0QsSUFBaEI7QUFDQSxVQUFJM2YsUUFBUTJjLEtBQUt3RCxVQUFqQjtBQUFBLFVBQTZCbGdCLFNBQVMwYyxLQUFLMEQsV0FBM0M7O0FBRUEsVUFBSXB5QixPQUFPLElBQUkrbUIsVUFBSixDQUFlLENBQ3hCLElBRHdCLEVBQ2xCLElBRGtCLEVBQ1osSUFEWSxFQUNOLElBRE0sRUFDQTtBQUN4QixVQUZ3QixFQUVsQixJQUZrQixFQUVaLElBRlksRUFFTixJQUZNLEVBRUE7QUFDeEIsVUFId0IsRUFHbEIsSUFIa0IsRUFHWixJQUhZLEVBR04sSUFITSxFQUdBO0FBQ3hCLFVBSndCLEVBSWxCLElBSmtCLEVBSVosSUFKWSxFQUlOLElBSk0sRUFJQTtBQUN4QixVQUx3QixFQUtsQixJQUxrQixFQUtaLElBTFksRUFLTixJQUxNLEVBTXhCLElBTndCLEVBTWxCLElBTmtCLEVBTVosSUFOWSxFQU1OLElBTk0sRUFPdkJoVixVQUFVLENBQVgsR0FBZ0IsSUFQUSxFQU9GO0FBQ3JCQSxXQUFELEdBQVUsSUFSYyxFQVN2QkMsV0FBVyxDQUFaLEdBQWlCLElBVE8sRUFTRDtBQUN0QkEsWUFBRCxHQUFXLElBVmEsRUFXeEIsSUFYd0IsRUFXbEIsSUFYa0IsRUFXWixJQVhZLEVBV04sSUFYTSxFQVdBO0FBQ3hCLFVBWndCLEVBWWxCLElBWmtCLEVBWVosSUFaWSxFQVlOLElBWk0sRUFZQTtBQUN4QixVQWJ3QixFQWFsQixJQWJrQixFQWFaLElBYlksRUFhTixJQWJNLEVBYUE7QUFDeEIsVUFkd0IsRUFjbEIsSUFka0IsRUFjWjtBQUNaLFVBZndCLEVBZWxCO0FBQ04sVUFoQndCLEVBZ0JsQixJQWhCa0IsRUFnQlosSUFoQlksRUFnQk4sSUFoQk0sRUFnQkE7QUFDeEIsVUFqQndCLEVBaUJsQixJQWpCa0IsRUFpQlosSUFqQlksRUFpQk4sSUFqQk0sRUFrQnhCLElBbEJ3QixFQWtCbEIsSUFsQmtCLEVBa0JaLElBbEJZLEVBa0JOLElBbEJNLEVBbUJ4QixJQW5Cd0IsRUFtQmxCLElBbkJrQixFQW1CWixJQW5CWSxFQW1CTixJQW5CTSxFQW9CeEIsSUFwQndCLEVBb0JsQixJQXBCa0IsRUFvQlosSUFwQlksRUFvQk4sSUFwQk0sRUFxQnhCLElBckJ3QixFQXFCbEIsSUFyQmtCLEVBcUJaLElBckJZLEVBcUJOLElBckJNLEVBc0J4QixJQXRCd0IsRUFzQmxCLElBdEJrQixFQXNCWixJQXRCWSxFQXNCTixJQXRCTSxFQXVCeEIsSUF2QndCLEVBdUJsQixJQXZCa0IsRUF1QlosSUF2QlksRUF3QnhCLElBeEJ3QixFQXdCbEIsSUF4QmtCLEVBd0JaO0FBQ1osVUF6QndCLEVBeUJsQixJQXpCa0IsQ0F5QmI7QUF6QmEsT0FBZixDQUFYO0FBMkJBLGFBQU8rNUIsSUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVUMsSUFBbEIsRUFBd0Jqc0MsSUFBeEIsRUFBOEIrckMsSUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVUUsSUFBbEIsRUFBd0J4YSxJQUF4QixDQUE5QixDQUFQO0FBQ0Q7O0FBRUQ7Ozs7eUJBQ2FoRCxJLEVBQU07QUFDakIsYUFBT3FkLElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVVpQixJQUFsQixFQUF3QmxCLElBQUlnQyxJQUFKLENBQVNyZixJQUFULENBQXhCLENBQVA7QUFDRDs7QUFFRDs7Ozt5QkFDYUEsSSxFQUFNO0FBQ2pCLFVBQUl5Z0IsVUFBVXpnQixLQUFLM3BCLEVBQW5CO0FBQ0EsVUFBSS9FLE9BQU8sSUFBSSttQixVQUFKLENBQWUsQ0FDeEIsSUFEd0IsRUFDbEIsSUFEa0IsRUFDWixJQURZLEVBQ04sSUFETSxFQUNBO0FBQ3ZCb29CLGtCQUFZLEVBQWIsR0FBbUIsSUFGSyxFQUVDO0FBQ3hCQSxrQkFBWSxFQUFiLEdBQW1CLElBSEssRUFJdkJBLFlBQVksQ0FBYixHQUFrQixJQUpNLEVBS3ZCQSxPQUFELEdBQVksSUFMWSxFQU14QixJQU53QixFQU1sQixJQU5rQixFQU1aLElBTlksRUFNTixJQU5NLEVBTUE7QUFDeEIsVUFQd0IsRUFPbEIsSUFQa0IsRUFPWixJQVBZLEVBT04sSUFQTSxFQU9BO0FBQ3hCLFVBUndCLEVBUWxCLElBUmtCLEVBUVosSUFSWSxFQVFOLElBUk0sRUFRQTtBQUN4QixVQVR3QixFQVNsQixJQVRrQixFQVNaLElBVFksRUFTTixJQVRNLENBU0Q7QUFUQyxPQUFmLENBQVg7QUFXQSxhQUFPcEQsSUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVStCLElBQWxCLEVBQXdCL3RDLElBQXhCLENBQVA7QUFDRDs7QUFFRDs7Ozt5QkFDYTJ1QixLLEVBQU82Z0IsbUIsRUFBcUI7QUFDdkMsYUFBT3pELElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVVjLElBQWxCLEVBQXdCZixJQUFJYSxJQUFKLENBQVNqZSxNQUFNbkMsY0FBZixDQUF4QixFQUF3RHVmLElBQUk2QixJQUFKLENBQVNqZixLQUFULEVBQWdCNmdCLG1CQUFoQixDQUF4RCxDQUFQO0FBQ0Q7Ozt5QkFFWWhqQixjLEVBQWdCO0FBQzNCLFVBQUl4c0IsT0FBTyxJQUFJK21CLFVBQUosQ0FBZSxDQUN4QixJQUR3QixFQUNsQixJQURrQixFQUNaLElBRFksRUFDTixJQURNLEVBRXZCeUYsbUJBQW1CLEVBQXBCLEdBQTBCLElBRkYsRUFFUTtBQUMvQkEseUJBQW1CLEVBQXBCLEdBQTBCLElBSEYsRUFJdkJBLG1CQUFtQixDQUFwQixHQUF5QixJQUpELEVBS3ZCQSxjQUFELEdBQW1CLElBTEssQ0FBZixDQUFYO0FBT0EsYUFBT3VmLElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVVZLElBQWxCLEVBQXdCNXNDLElBQXhCLENBQVA7QUFDRDs7QUFFRDs7Ozt5QkFDYTJ1QixLLEVBQU82Z0IsbUIsRUFBcUI7QUFDdkMsVUFBSUwsVUFBVXhnQixNQUFNNXBCLEVBQXBCOztBQUVBO0FBQ0EsVUFBSTRvQyxPQUFPNUIsSUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVTJCLElBQWxCLEVBQXdCLElBQUk1bUIsVUFBSixDQUFlLENBQ2hELElBRGdELEVBQzFDLElBRDBDLEVBQ3BDLElBRG9DLEVBQzlCLElBRDhCLEVBQ3hCO0FBQ3ZCb29CLGtCQUFZLEVBQWIsR0FBbUIsSUFGNkIsRUFFdkI7QUFDeEJBLGtCQUFZLEVBQWIsR0FBbUIsSUFINkIsRUFJL0NBLFlBQVksQ0FBYixHQUFrQixJQUo4QixFQUsvQ0EsT0FBRCxHQUFZLElBTG9DLENBQWYsQ0FBeEIsQ0FBWDtBQU9BO0FBQ0EsVUFBSXpCLE9BQU8zQixJQUFJbUQsR0FBSixDQUFRbkQsSUFBSUMsS0FBSixDQUFVMEIsSUFBbEIsRUFBd0IsSUFBSTNtQixVQUFKLENBQWUsQ0FDaEQsSUFEZ0QsRUFDMUMsSUFEMEMsRUFDcEMsSUFEb0MsRUFDOUIsSUFEOEIsRUFDeEI7QUFDdkJ5b0IsOEJBQXdCLEVBQXpCLEdBQStCLElBRmlCLEVBRVg7QUFDcENBLDhCQUF3QixFQUF6QixHQUErQixJQUhpQixFQUkvQ0Esd0JBQXdCLENBQXpCLEdBQThCLElBSmtCLEVBSy9DQSxtQkFBRCxHQUF3QixJQUx3QixDQUFmLENBQXhCLENBQVg7QUFPQSxVQUFJckMsT0FBT3BCLElBQUlvQixJQUFKLENBQVN4ZSxLQUFULENBQVg7QUFDQSxVQUFJbWYsT0FBTy9CLElBQUkrQixJQUFKLENBQVNuZixLQUFULEVBQWdCd2UsS0FBS3Z4QixVQUFMLEdBQWtCLEVBQWxCLEdBQXVCLEVBQXZCLEdBQTRCLENBQTVCLEdBQWdDLEVBQWhDLEdBQXFDLENBQXJDLEdBQXlDLENBQXpELENBQVg7QUFDQSxVQUFJdXpCLFlBQVksQ0FBaEIsRUFBbUI7QUFDakJwbUMsZ0JBQVFvUSxHQUFSLENBQVkyMEIsSUFBWjtBQUNEO0FBQ0QsYUFBTy9CLElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVU0QixJQUFsQixFQUF3QkQsSUFBeEIsRUFBOEJELElBQTlCLEVBQW9DSSxJQUFwQyxFQUEwQ1gsSUFBMUMsQ0FBUDtBQUNEOztBQUVEOzs7O3lCQUNheGUsSyxFQUFPO0FBQ2xCLFVBQUlsQyxVQUFVa0MsTUFBTWxDLE9BQU4sSUFBaUIsRUFBL0I7QUFDQSxVQUFJZ2pCLGNBQWNoakIsUUFBUXRvQixNQUExQjtBQUNBLFVBQUluRSxPQUFPLElBQUkrbUIsVUFBSixDQUFlLElBQUkwb0IsV0FBbkIsQ0FBWDtBQUNBO0FBQ0EsV0FBSyxJQUFJaHZDLElBQUksQ0FBYixFQUFnQkEsSUFBSWd2QyxXQUFwQixFQUFpQ2h2QyxHQUFqQyxFQUFzQztBQUNwQyxZQUFJaXZDLFFBQVFqakIsUUFBUWhzQixDQUFSLEVBQVdpdkMsS0FBdkI7QUFDQTF2QyxhQUFLUyxJQUFJLENBQVQsSUFBZWl2QyxNQUFNQyxTQUFOLElBQW1CLENBQXBCLEdBQXlCO0FBQ3BCRCxjQUFNRSxTQUFOLElBQW1CLENBRHhCLEdBQzZCO0FBQ3hCRixjQUFNRyxZQUFOLElBQXNCLENBRjNCLEdBRWdDO0FBQzNCSCxjQUFNSSxhQUh6QixDQUZvQyxDQUtJO0FBQ3pDO0FBQ0QsYUFBTy9ELElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVVtQixJQUFsQixFQUF3Qm50QyxJQUF4QixDQUFQO0FBQ0Q7O0FBRUQ7Ozs7eUJBQ2EydUIsSyxFQUFPckgsTSxFQUFRO0FBQzFCLFVBQUltRixVQUFVa0MsTUFBTWxDLE9BQU4sSUFBaUIsRUFBL0I7QUFDQSxVQUFJZ2pCLGNBQWNoakIsUUFBUXRvQixNQUExQjtBQUNBLFVBQUlvaUIsV0FBVyxLQUFLLEtBQUtrcEIsV0FBekI7QUFDQSxVQUFJenZDLE9BQU8sSUFBSSttQixVQUFKLENBQWVSLFFBQWYsQ0FBWDtBQUNBZSxnQkFBVSxJQUFJZixRQUFkOztBQUVBdm1CLFdBQUttcEIsR0FBTCxDQUFTLENBQ1AsSUFETyxFQUNELElBREMsRUFDSyxJQURMLEVBQ1csSUFEWCxFQUNpQjtBQUN2QnNtQixzQkFBZ0IsRUFBakIsR0FBdUIsSUFGaEIsRUFFc0I7QUFDNUJBLHNCQUFnQixFQUFqQixHQUF1QixJQUhoQixFQUlOQSxnQkFBZ0IsQ0FBakIsR0FBc0IsSUFKZixFQUtOQSxXQUFELEdBQWdCLElBTFQsRUFNTm5vQixXQUFXLEVBQVosR0FBa0IsSUFOWCxFQU1pQjtBQUN2QkEsaUJBQVcsRUFBWixHQUFrQixJQVBYLEVBUU5BLFdBQVcsQ0FBWixHQUFpQixJQVJWLEVBU05BLE1BQUQsR0FBVyxJQVRKLENBQVQsRUFVRyxDQVZIOztBQVlBLFdBQUssSUFBSTdtQixJQUFJLENBQWIsRUFBZ0JBLElBQUlndkMsV0FBcEIsRUFBaUNodkMsR0FBakMsRUFBc0M7QUFDcEM7QUFDQSxZQUFJNlEsV0FBV21iLFFBQVFoc0IsQ0FBUixFQUFXNlEsUUFBMUI7QUFDQSxZQUFJbVYsT0FBT2dHLFFBQVFoc0IsQ0FBUixFQUFXZ21CLElBQXRCO0FBQ0EsWUFBSWlwQixRQUFRampCLFFBQVFoc0IsQ0FBUixFQUFXaXZDLEtBQXZCO0FBQ0EsWUFBSW5lLE1BQU05RSxRQUFRaHNCLENBQVIsRUFBVzh3QixHQUFyQjtBQUNBdnhCLGFBQUttcEIsR0FBTCxDQUFTLENBQ043WCxhQUFhLEVBQWQsR0FBb0IsSUFEYixFQUNtQjtBQUN6QkEscUJBQWEsRUFBZCxHQUFvQixJQUZiLEVBR05BLGFBQWEsQ0FBZCxHQUFtQixJQUhaLEVBSU5BLFFBQUQsR0FBYSxJQUpOLEVBS05tVixTQUFTLEVBQVYsR0FBZ0IsSUFMVCxFQUtlO0FBQ3JCQSxpQkFBUyxFQUFWLEdBQWdCLElBTlQsRUFPTkEsU0FBUyxDQUFWLEdBQWUsSUFQUixFQVFOQSxJQUFELEdBQVMsSUFSRixFQVNOaXBCLE1BQU1DLFNBQU4sSUFBbUIsQ0FBcEIsR0FBeUJELE1BQU1FLFNBVHhCLEVBU21DO0FBQ3pDRixjQUFNRyxZQUFOLElBQXNCLENBQXZCLEdBQTZCSCxNQUFNSSxhQUFOLElBQXVCLENBQXBELEdBQXlESixNQUFNSyxTQVZ4RCxFQVdQLElBWE8sRUFXRCxJQVhDLEVBV0s7QUFDWHhlLGdCQUFRLEVBQVQsR0FBZSxJQVpSLEVBWWM7QUFDcEJBLGdCQUFRLEVBQVQsR0FBZSxJQWJSLEVBY05BLFFBQVEsQ0FBVCxHQUFjLElBZFAsRUFlTkEsR0FBRCxHQUFRLElBZkQsQ0FBVCxFQWdCRyxLQUFLLEtBQUs5d0IsQ0FoQmI7QUFpQkQ7QUFDRCxhQUFPc3JDLElBQUltRCxHQUFKLENBQVFuRCxJQUFJQyxLQUFKLENBQVU4QixJQUFsQixFQUF3Qjl0QyxJQUF4QixDQUFQO0FBQ0Q7Ozt5QkFFWUEsSSxFQUFNO0FBQ2pCLGFBQU8rckMsSUFBSW1ELEdBQUosQ0FBUW5ELElBQUlDLEtBQUosQ0FBVVMsSUFBbEIsRUFBd0J6c0MsSUFBeEIsQ0FBUDtBQUNEOzs7Ozs7QUFHSCtyQyxJQUFJaUUsSUFBSjs7a0JBRWVqRSxHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FqQkNubEJmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBRUE7SUFDTS9vQixVO0FBQ0osc0JBQWFwTixNQUFiLEVBQXFCO0FBQUE7O0FBQ25CLFNBQUtDLEdBQUwsR0FBVyxZQUFYOztBQUVBLFNBQUtDLE9BQUwsR0FBZUYsTUFBZjtBQUNBLFNBQUtxNkIsT0FBTCxHQUFnQnI2QixPQUFPaEgsTUFBUCxLQUFrQixJQUFsQzs7QUFFQSxTQUFLc2hDLFFBQUwsR0FBZ0IsQ0FBQyxDQUFqQjtBQUNBLFNBQUtDLGNBQUwsR0FBc0IsS0FBdEI7QUFDQSxTQUFLQyxhQUFMLEdBQXFCQyxRQUFyQjtBQUNBLFNBQUtDLGFBQUwsR0FBcUJELFFBQXJCO0FBQ0EsU0FBS0UsYUFBTCxHQUFxQi94QyxTQUFyQjtBQUNBLFNBQUtneUMsYUFBTCxHQUFxQmh5QyxTQUFyQjtBQUNBLFNBQUtpeUMsdUJBQUwsR0FBK0IsSUFBL0I7QUFDQSxTQUFLQyx1QkFBTCxHQUErQixJQUEvQjs7QUFFQSxTQUFLQyxVQUFMLEdBQWtCLElBQWxCO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQixJQUFsQjs7QUFFQSxTQUFLQyxxQkFBTCxHQUE2QixJQUFJNzdCLHNDQUFKLENBQXlCLE9BQXpCLENBQTdCO0FBQ0EsU0FBSzg3QixxQkFBTCxHQUE2QixJQUFJOTdCLHNDQUFKLENBQXlCLE9BQXpCLENBQTdCOztBQUVBLFNBQUtpSixjQUFMLEdBQXNCLElBQXRCO0FBQ0EsU0FBS0UsZUFBTCxHQUF1QixJQUF2Qjs7QUFFQTtBQUNBO0FBQ0EsU0FBSzR5QixjQUFMLEdBQXNCLENBQUMsRUFBR24zQixrQkFBUTR0QixNQUFSLEtBQ0M1dEIsa0JBQVF0TyxPQUFSLENBQWdCbThCLEtBQWhCLEdBQXdCLEVBQXhCLElBQ0E3dEIsa0JBQVF0TyxPQUFSLENBQWdCbThCLEtBQWhCLEtBQTBCLEVBQTFCLElBQWdDN3RCLGtCQUFRdE8sT0FBUixDQUFnQm84QixLQUFoQixHQUF3QixJQUZ6RCxDQUFILENBQXZCOztBQUlBO0FBQ0E7QUFDQSxTQUFLc0osb0JBQUwsR0FBNkJwM0Isa0JBQVF3ZSxNQUFSLElBQWtCeGUsa0JBQVFndUIsSUFBdkQ7O0FBRUE7QUFDQSxTQUFLcUosZ0JBQUwsR0FBd0IsQ0FBQ3IzQixrQkFBUXMzQixPQUFqQzs7QUFFQSxTQUFLQyxzQkFBTCxHQUE4QixLQUFLcjdCLE9BQUwsQ0FBYTFHLG9CQUEzQztBQUNEOzs7OzhCQUVVO0FBQ1QsV0FBSzhnQyxRQUFMLEdBQWdCLENBQUMsQ0FBakI7QUFDQSxXQUFLQyxjQUFMLEdBQXNCLEtBQXRCO0FBQ0EsV0FBS1EsVUFBTCxHQUFrQixJQUFsQjtBQUNBLFdBQUtDLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxXQUFLQyxxQkFBTCxDQUEyQjk3QixLQUEzQjtBQUNBLFdBQUs4N0IscUJBQUwsR0FBNkIsSUFBN0I7QUFDQSxXQUFLQyxxQkFBTCxDQUEyQi83QixLQUEzQjtBQUNBLFdBQUsrN0IscUJBQUwsR0FBNkIsSUFBN0I7QUFDQSxXQUFLN3lCLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxXQUFLRSxlQUFMLEdBQXVCLElBQXZCO0FBQ0Q7OzttQ0FFZWl6QixRLEVBQVU7QUFDeEJBLGVBQVNDLGVBQVQsR0FBMkIsS0FBS0MsS0FBTCxDQUFXbDdCLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBM0I7QUFDQWc3QixlQUFTRyxlQUFULEdBQTJCLEtBQUtDLHdCQUFMLENBQThCcDdCLElBQTlCLENBQW1DLElBQW5DLENBQTNCO0FBQ0EsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7OzBDQWdDdUI7QUFDckIsV0FBS202QixhQUFMLEdBQXFCLEtBQUtDLGFBQUwsR0FBcUJoeUMsU0FBMUM7QUFDRDs7O3lCQUVLdVYsVyxFQUFhO0FBQ2pCLFdBQUswOEIsdUJBQUwsR0FBK0IsSUFBL0I7QUFDQSxXQUFLQyx1QkFBTCxHQUErQixJQUEvQjtBQUNBLFdBQUtJLHFCQUFMLENBQTJCLzdCLEtBQTNCO0FBQ0EsV0FBSzg3QixxQkFBTCxDQUEyQjk3QixLQUEzQjtBQUNEOzs7MEJBRU0wOEIsVSxFQUFZQyxVLEVBQVk7QUFDN0IsVUFBSSxDQUFDLEtBQUt2ekIsZUFBVixFQUEyQjtBQUN6QixjQUFNLElBQUluRyxnQ0FBSixDQUEwQix5REFBMUIsQ0FBTjtBQUNEO0FBQ0QsVUFBSSxDQUFDLEtBQUttNEIsY0FBVixFQUEwQjtBQUN4QixhQUFLd0IsaUJBQUwsQ0FBdUJGLFVBQXZCLEVBQW1DQyxVQUFuQztBQUNEO0FBQ0QsV0FBS0UsV0FBTCxDQUFpQkYsVUFBakI7QUFDQSxXQUFLRyxXQUFMLENBQWlCSixVQUFqQjtBQUNEOzs7NkNBRXlCejBDLEksRUFBTXdWLFEsRUFBVTtBQUN4QyxVQUFJcy9CLFVBQVUsSUFBZDs7QUFFQSxVQUFJLzRCLFlBQVksS0FBaEI7QUFDQSxVQUFJQyxRQUFReEcsU0FBU3dHLEtBQXJCOztBQUVBLFVBQUloYyxTQUFTLE9BQWIsRUFBc0I7QUFDcEIsYUFBSzJ6QyxVQUFMLEdBQWtCbitCLFFBQWxCO0FBQ0EsWUFBSUEsU0FBU3dHLEtBQVQsS0FBbUIsS0FBbkIsSUFBNEIsS0FBS2k0QixnQkFBckMsRUFBdUQ7QUFDckQ7QUFDQWw0QixzQkFBWSxNQUFaO0FBQ0FDLGtCQUFRLEVBQVI7QUFDQTg0QixvQkFBVSxJQUFJL3FCLFVBQUosRUFBVjtBQUNELFNBTEQsTUFLTztBQUNMO0FBQ0ErcUIsb0JBQVUvRix1QkFBSWdHLG1CQUFKLENBQXdCdi9CLFFBQXhCLENBQVY7QUFDRDtBQUNGLE9BWEQsTUFXTyxJQUFJeFYsU0FBUyxPQUFiLEVBQXNCO0FBQzNCLGFBQUs0ekMsVUFBTCxHQUFrQnArQixRQUFsQjtBQUNBcy9CLGtCQUFVL0YsdUJBQUlnRyxtQkFBSixDQUF3QnYvQixRQUF4QixDQUFWO0FBQ0QsT0FITSxNQUdBO0FBQ0w7QUFDRDs7QUFFRDtBQUNBLFVBQUksQ0FBQyxLQUFLeUwsY0FBVixFQUEwQjtBQUN4QixjQUFNLElBQUlqRyxnQ0FBSixDQUEwQix1REFBMUIsQ0FBTjtBQUNEO0FBQ0QsV0FBS2lHLGNBQUwsQ0FBb0JqaEIsSUFBcEIsRUFBMEI7QUFDeEJBLGNBQU1BLElBRGtCO0FBRXhCZ0QsY0FBTTh4QyxRQUFRem9CLE1BRlU7QUFHeEJyUSxlQUFPQSxLQUhpQjtBQUl4QkQsbUJBQWMvYixJQUFkLFNBQXNCK2IsU0FKRTtBQUt4QmUsdUJBQWV0SCxTQUFTbEIsUUFMQSxDQUtTO0FBTFQsT0FBMUI7QUFPRDs7O3NDQUVrQm1nQyxVLEVBQVlDLFUsRUFBWTtBQUN6QyxVQUFJLEtBQUt2QixjQUFULEVBQXlCO0FBQ3ZCO0FBQ0Q7O0FBRUQsVUFBSXNCLFdBQVdobEIsT0FBWCxJQUFzQmdsQixXQUFXaGxCLE9BQVgsQ0FBbUJ0b0IsTUFBN0MsRUFBcUQ7QUFDbkQsYUFBS2lzQyxhQUFMLEdBQXFCcUIsV0FBV2hsQixPQUFYLENBQW1CLENBQW5CLEVBQXNCNVksR0FBM0M7QUFDRDtBQUNELFVBQUk2OUIsV0FBV2psQixPQUFYLElBQXNCaWxCLFdBQVdqbEIsT0FBWCxDQUFtQnRvQixNQUE3QyxFQUFxRDtBQUNuRCxhQUFLbXNDLGFBQUwsR0FBcUJvQixXQUFXamxCLE9BQVgsQ0FBbUIsQ0FBbkIsRUFBc0I1WSxHQUEzQztBQUNEOztBQUVELFdBQUtxOEIsUUFBTCxHQUFnQjl0QyxLQUFLNm1CLEdBQUwsQ0FBUyxLQUFLbW5CLGFBQWQsRUFBNkIsS0FBS0UsYUFBbEMsQ0FBaEI7QUFDQSxXQUFLSCxjQUFMLEdBQXNCLElBQXRCO0FBQ0Q7OzswQ0FFc0I7QUFDckIsVUFBSTZCLGNBQWMsS0FBS3RCLHVCQUF2QjtBQUNBLFVBQUl1QixjQUFjLEtBQUt4Qix1QkFBdkI7O0FBRUEsVUFBSWlCLGFBQWE7QUFDZjEwQyxjQUFNLE9BRFM7QUFFZitILFlBQUksQ0FGVztBQUdmeW5CLHdCQUFnQixDQUhEO0FBSWZDLGlCQUFTLEVBSk07QUFLZnRvQixnQkFBUTtBQUxPLE9BQWpCOztBQVFBLFVBQUk2dEMsZUFBZSxJQUFuQixFQUF5QjtBQUN2Qk4sbUJBQVdqbEIsT0FBWCxDQUFtQjVqQixJQUFuQixDQUF3Qm1wQyxXQUF4QjtBQUNBTixtQkFBV3Z0QyxNQUFYLEdBQW9CNnRDLFlBQVk3dEMsTUFBaEM7QUFDRDs7QUFFRCxVQUFJc3RDLGFBQWE7QUFDZnowQyxjQUFNLE9BRFM7QUFFZitILFlBQUksQ0FGVztBQUdmeW5CLHdCQUFnQixDQUhEO0FBSWZDLGlCQUFTLEVBSk07QUFLZnRvQixnQkFBUTtBQUxPLE9BQWpCOztBQVFBLFVBQUk4dEMsZUFBZSxJQUFuQixFQUF5QjtBQUN2QlIsbUJBQVdobEIsT0FBWCxDQUFtQjVqQixJQUFuQixDQUF3Qm9wQyxXQUF4QjtBQUNBUixtQkFBV3R0QyxNQUFYLEdBQW9COHRDLFlBQVk5dEMsTUFBaEM7QUFDRDs7QUFFRCxXQUFLdXNDLHVCQUFMLEdBQStCLElBQS9CO0FBQ0EsV0FBS0QsdUJBQUwsR0FBK0IsSUFBL0I7O0FBRUEsV0FBS21CLFdBQUwsQ0FBaUJGLFVBQWpCLEVBQTZCLElBQTdCO0FBQ0EsV0FBS0csV0FBTCxDQUFpQkosVUFBakIsRUFBNkIsSUFBN0I7QUFDRDs7O2dDQUVZQSxVLEVBQVlTLEssRUFBTztBQUM5QixVQUFJLEtBQUt2QixVQUFMLElBQW1CLElBQXZCLEVBQTZCO0FBQzNCO0FBQ0Q7O0FBRUQsVUFBSWhpQixRQUFROGlCLFVBQVo7QUFDQSxVQUFJaGxCLFVBQVVrQyxNQUFNbEMsT0FBcEI7QUFDQSxVQUFJMGxCLHNCQUFKO0FBQ0EsVUFBSUMsV0FBVyxDQUFDLENBQWhCO0FBQUEsVUFBbUJDLFVBQVUsQ0FBQyxDQUE5QjtBQUFBLFVBQWlDQyxVQUFVLENBQUMsQ0FBNUM7QUFDQSxVQUFJbGpCLG9CQUFvQixLQUFLdWhCLFVBQUwsQ0FBZ0J2aEIsaUJBQXhDOztBQUVBLFVBQUltakIsZUFBZSxLQUFLNUIsVUFBTCxDQUFnQjMzQixLQUFoQixLQUEwQixLQUExQixJQUFtQyxLQUFLaTRCLGdCQUEzRDtBQUNBLFVBQUl1Qix3QkFBd0IsS0FBS3JDLGNBQUwsSUFBdUIsS0FBS0ksYUFBTCxLQUF1Qi94QyxTQUExRTs7QUFFQSxVQUFJaTBDLDBCQUEwQixLQUE5Qjs7QUFFQSxVQUFJLENBQUNobUIsT0FBRCxJQUFZQSxRQUFRdG9CLE1BQVIsS0FBbUIsQ0FBbkMsRUFBc0M7QUFDcEM7QUFDRDtBQUNELFVBQUlzb0IsUUFBUXRvQixNQUFSLEtBQW1CLENBQW5CLElBQXdCLENBQUMrdEMsS0FBN0IsRUFBb0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0QsT0F2QjZCLENBdUI1Qjs7QUFFRixVQUFJNXFCLFNBQVMsQ0FBYjtBQUNBLFVBQUlvckIsVUFBVSxJQUFkO0FBQ0EsVUFBSUMsWUFBWSxDQUFoQjs7QUFFQTtBQUNBLFVBQUlKLFlBQUosRUFBa0I7QUFDaEI7QUFDQWpyQixpQkFBUyxDQUFUO0FBQ0FxckIsb0JBQVloa0IsTUFBTXhxQixNQUFsQjtBQUNELE9BSkQsTUFJTztBQUNMO0FBQ0FtakIsaUJBQVMsQ0FBVCxDQUZLLENBRU07QUFDWHFyQixvQkFBWSxJQUFJaGtCLE1BQU14cUIsTUFBdEI7QUFDRDs7QUFFRCxVQUFJd1EsYUFBYSxJQUFqQjs7QUFFQTtBQUNBLFVBQUk4WCxRQUFRdG9CLE1BQVIsR0FBaUIsQ0FBckIsRUFBd0I7QUFDdEJ3USxxQkFBYThYLFFBQVFtbUIsR0FBUixFQUFiO0FBQ0FELHFCQUFhaCtCLFdBQVd4USxNQUF4QjtBQUNEOztBQUVEO0FBQ0EsVUFBSSxLQUFLc3NDLHVCQUFMLElBQWdDLElBQXBDLEVBQTBDO0FBQ3hDLFlBQUlvQyxTQUFTLEtBQUtwQyx1QkFBbEI7QUFDQSxhQUFLQSx1QkFBTCxHQUErQixJQUEvQjtBQUNBaGtCLGdCQUFReFEsT0FBUixDQUFnQjQyQixNQUFoQjtBQUNBRixxQkFBYUUsT0FBTzF1QyxNQUFwQjtBQUNEOztBQUVEO0FBQ0EsVUFBSXdRLGNBQWMsSUFBbEIsRUFBd0I7QUFDdEIsYUFBSzg3Qix1QkFBTCxHQUErQjk3QixVQUEvQjtBQUNEOztBQUVELFVBQUltK0IseUJBQXlCcm1CLFFBQVEsQ0FBUixFQUFXNVksR0FBWCxHQUFpQixLQUFLcThCLFFBQW5EOztBQUVBO0FBQ0EsVUFBSSxLQUFLSyxhQUFULEVBQXdCO0FBQ3RCNEIsd0JBQWdCVyx5QkFBeUIsS0FBS3ZDLGFBQTlDO0FBQ0QsT0FGRCxNQUVPO0FBQUU7QUFDUCxZQUFJLEtBQUtNLHFCQUFMLENBQTJCa0MsT0FBM0IsRUFBSixFQUEwQztBQUN4Q1osMEJBQWdCLENBQWhCO0FBQ0EsY0FBSSxLQUFLbkIsb0JBQUwsSUFBNkIsQ0FBQyxLQUFLRixxQkFBTCxDQUEyQmlDLE9BQTNCLEVBQWxDLEVBQXdFO0FBQ3RFLGdCQUFJLEtBQUtwQyxVQUFMLENBQWdCeGhCLGFBQWhCLEtBQWtDLEtBQXRDLEVBQTZDO0FBQzNDc2pCLHdDQUEwQixJQUExQjtBQUNEO0FBQ0Y7QUFDRixTQVBELE1BT087QUFDTCxjQUFJOTlCLGNBQWEsS0FBS2s4QixxQkFBTCxDQUEyQm1DLG1CQUEzQixDQUErQ0Ysc0JBQS9DLENBQWpCO0FBQ0EsY0FBSW4rQixlQUFjLElBQWxCLEVBQXdCO0FBQ3RCLGdCQUFJcytCLFdBQVlILDBCQUEwQm4rQixZQUFXWixXQUFYLEdBQXlCWSxZQUFXckQsUUFBOUQsQ0FBaEI7QUFDQSxnQkFBSTJoQyxZQUFZLENBQWhCLEVBQW1CO0FBQ2pCQSx5QkFBVyxDQUFYO0FBQ0Q7QUFDRCxnQkFBSUMsY0FBY3YrQixZQUFXZCxHQUFYLEdBQWlCYyxZQUFXckQsUUFBNUIsR0FBdUMyaEMsUUFBekQ7QUFDQWQsNEJBQWdCVyx5QkFBeUJJLFdBQXpDO0FBQ0QsV0FQRCxNQU9PO0FBQUU7QUFDUGYsNEJBQWdCLENBQWhCO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFVBQUlNLHVCQUFKLEVBQTZCO0FBQzNCO0FBQ0EsWUFBSVUsaUJBQWlCTCx5QkFBeUJYLGFBQTlDO0FBQ0EsWUFBSWlCLGVBQWUsS0FBS3RDLHFCQUFMLENBQTJCcjdCLG9CQUEzQixDQUFnRHE5QixzQkFBaEQsQ0FBbkI7QUFDQSxZQUFJTSxnQkFBZ0IsSUFBaEIsSUFBd0JBLGFBQWFqL0IsUUFBYixHQUF3QmcvQixjQUFwRCxFQUFvRTtBQUNsRSxjQUFJRSxhQUFhdkgsb0JBQUl3SCxjQUFKLENBQW1CLEtBQUszQyxVQUFMLENBQWdCeGhCLGFBQW5DLEVBQWtELEtBQUt3aEIsVUFBTCxDQUFnQjloQixZQUFsRSxDQUFqQjtBQUNBLGNBQUl3a0IsVUFBSixFQUFnQjtBQUNkLGdCQUFJeC9CLE1BQU11L0IsYUFBYWovQixRQUF2QjtBQUNBLGdCQUFJby9CLHNCQUFzQkosaUJBQWlCQyxhQUFhai9CLFFBQXhEO0FBQ0FzRSw2QkFBSVksQ0FBSixDQUFNLEtBQUt4RCxHQUFYLHFDQUFpRGhDLEdBQWpELG9CQUFtRTAvQixtQkFBbkU7QUFDQTltQixvQkFBUXhRLE9BQVIsQ0FBZ0IsRUFBQ3NULE1BQU04akIsVUFBUCxFQUFtQngvQixLQUFLQSxHQUF4QixFQUE2QkMsS0FBS0QsR0FBbEMsRUFBaEI7QUFDQTgrQix5QkFBYVUsV0FBV3ozQixVQUF4QjtBQUNELFdBUmlFLENBUWhFO0FBQ0gsU0FURCxNQVNPO0FBQ0w2MkIsb0NBQTBCLEtBQTFCO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJZSxhQUFhLEVBQWpCOztBQUVBO0FBQ0EsV0FBSyxJQUFJL3lDLElBQUksQ0FBYixFQUFnQkEsSUFBSWdzQixRQUFRdG9CLE1BQTVCLEVBQW9DMUQsR0FBcEMsRUFBeUM7QUFDdkMsWUFBSW95QyxVQUFTcG1CLFFBQVFoc0IsQ0FBUixDQUFiO0FBQ0EsWUFBSTh1QixPQUFPc2pCLFFBQU90akIsSUFBbEI7QUFDQSxZQUFJeGIsY0FBYzgrQixRQUFPaC9CLEdBQVAsR0FBYSxLQUFLcThCLFFBQXBDO0FBQ0EsWUFBSXI4QixPQUFNRSxjQUFjbytCLGFBQXhCOztBQUVBLFlBQUlDLGFBQWEsQ0FBQyxDQUFsQixFQUFxQjtBQUNuQkEscUJBQVd2K0IsSUFBWDtBQUNEOztBQUVELFlBQUk0L0IsaUJBQWlCLENBQXJCOztBQUVBLFlBQUloekMsTUFBTWdzQixRQUFRdG9CLE1BQVIsR0FBaUIsQ0FBM0IsRUFBOEI7QUFDNUIsY0FBSXV2QyxVQUFVam5CLFFBQVFoc0IsSUFBSSxDQUFaLEVBQWVvVCxHQUFmLEdBQXFCLEtBQUtxOEIsUUFBMUIsR0FBcUNpQyxhQUFuRDtBQUNBc0IsMkJBQWlCQyxVQUFVNy9CLElBQTNCO0FBQ0QsU0FIRCxNQUdPO0FBQUU7QUFDUCxjQUFJYyxjQUFjLElBQWxCLEVBQXdCO0FBQUU7QUFDeEIsZ0JBQUkrK0IsV0FBVS8rQixXQUFXZCxHQUFYLEdBQWlCLEtBQUtxOEIsUUFBdEIsR0FBaUNpQyxhQUEvQztBQUNBc0IsNkJBQWlCQyxXQUFVNy9CLElBQTNCO0FBQ0QsV0FIRCxNQUdPLElBQUkyL0IsV0FBV3J2QyxNQUFYLElBQXFCLENBQXpCLEVBQTRCO0FBQUU7QUFDbkNzdkMsNkJBQWlCRCxXQUFXQSxXQUFXcnZDLE1BQVgsR0FBb0IsQ0FBL0IsRUFBa0NtTixRQUFuRDtBQUNELFdBRk0sTUFFQTtBQUFFO0FBQ1BtaUMsNkJBQWlCcnhDLEtBQUsySyxLQUFMLENBQVdxaUIsaUJBQVgsQ0FBakI7QUFDRDtBQUNGOztBQUVELFlBQUl1a0IsdUJBQXVCLEtBQTNCO0FBQ0EsWUFBSUMsZUFBZSxJQUFuQjs7QUFFQTtBQUNBLFlBQUlILGlCQUFpQnJrQixvQkFBb0IsR0FBckMsSUFBNEMsS0FBS3VoQixVQUFMLENBQWdCMzNCLEtBQWhCLEtBQTBCLEtBQXRFLElBQStFLEtBQUttNEIsc0JBQXBGLElBQThHLENBQUN2M0Isa0JBQVFDLE1BQTNILEVBQW1JO0FBQ2pJO0FBQ0E4NUIsaUNBQXVCLElBQXZCO0FBQ0EsY0FBSWo0QixRQUFRdFosS0FBS3VaLEdBQUwsQ0FBUzgzQixpQkFBaUJya0IsaUJBQTFCLENBQVo7QUFDQSxjQUFJeWtCLGFBQWF6eEMsS0FBS3cwQixJQUFMLENBQVVsYixRQUFRMFQsaUJBQWxCLENBQWpCO0FBQ0EsY0FBSTBrQixhQUFhamdDLE9BQU11YixpQkFBdkIsQ0FMaUksQ0FLeEY7O0FBRXpDM1csMkJBQUkwUCxDQUFKLENBQU0sS0FBS3RTLEdBQVgsRUFBZ0IscUVBQ1Esb0RBRFIsZUFFZ0JoQyxPQUFNNC9CLGNBRnRCLHlCQUVzRDUvQixPQUFNelIsS0FBSzJ4QyxLQUFMLENBQVcza0IsaUJBQVgsQ0FGNUQsNEJBR2tCaHRCLEtBQUsyeEMsS0FBTCxDQUFXcjRCLEtBQVgsQ0FIbEIsdUJBR3FEbTRCLFVBSHJELGFBQWhCOztBQUtBLGNBQUlSLGNBQWF2SCxvQkFBSXdILGNBQUosQ0FBbUIsS0FBSzNDLFVBQUwsQ0FBZ0J4aEIsYUFBbkMsRUFBa0QsS0FBS3doQixVQUFMLENBQWdCOWhCLFlBQWxFLENBQWpCO0FBQ0EsY0FBSXdrQixlQUFjLElBQWxCLEVBQXdCO0FBQ3RCNTZCLDZCQUFJMFAsQ0FBSixDQUFNLEtBQUt0UyxHQUFYLEVBQWdCLDBDQUNhLEtBQUs4NkIsVUFBTCxDQUFnQnhoQixhQUQ3QixjQUNtRCxLQUFLd2hCLFVBQUwsQ0FBZ0I5aEIsWUFEbkUsa0NBQWhCO0FBRUE7QUFDQXdrQiwwQkFBYTlqQixJQUFiO0FBQ0Q7QUFDRHFrQix5QkFBZSxFQUFmOztBQUVBLGVBQUssSUFBSXpnQixJQUFJLENBQWIsRUFBZ0JBLElBQUkwZ0IsVUFBcEIsRUFBZ0MxZ0IsR0FBaEMsRUFBcUM7QUFDbkMsZ0JBQUk2Z0IsU0FBUzV4QyxLQUFLMnhDLEtBQUwsQ0FBV0QsVUFBWCxDQUFiLENBRG1DLENBQ0M7QUFDcEMsZ0JBQUlGLGFBQWF6dkMsTUFBYixHQUFzQixDQUExQixFQUE2QjtBQUMzQjtBQUNBLGtCQUFJOHZDLGdCQUFnQkwsYUFBYUEsYUFBYXp2QyxNQUFiLEdBQXNCLENBQW5DLENBQXBCO0FBQ0E4dkMsNEJBQWMzaUMsUUFBZCxHQUF5QjBpQyxTQUFTQyxjQUFjcGdDLEdBQWhEO0FBQ0Q7QUFDRCxnQkFBSXFnQyxRQUFRO0FBQ1ZyZ0MsbUJBQUttZ0MsTUFESztBQUVWbGdDLG1CQUFLa2dDLE1BRks7QUFHVnppQixtQkFBSyxDQUhLO0FBSVZoQyxvQkFBTThqQixXQUpJO0FBS1Y1c0Isb0JBQU00c0IsWUFBV3ozQixVQUxQO0FBTVZ0Syx3QkFBVSxDQU5BLEVBTUc7QUFDYnlDLDJCQUFhQSxXQVBIO0FBUVYyN0IscUJBQU87QUFDTEMsMkJBQVcsQ0FETjtBQUVMQywyQkFBVyxDQUZOO0FBR0xDLDhCQUFjLENBSFQ7QUFJTEMsK0JBQWU7QUFKVjtBQVJHLGFBQVo7QUFlQThELHlCQUFhL3FDLElBQWIsQ0FBa0JxckMsS0FBbEI7QUFDQXZCLHlCQUFhcGpCLEtBQUszVCxVQUFsQjtBQUNBazRCLDBCQUFjMWtCLGlCQUFkO0FBQ0Q7O0FBRUQ7QUFDQSxjQUFJK2tCLFlBQVlQLGFBQWFBLGFBQWF6dkMsTUFBYixHQUFzQixDQUFuQyxDQUFoQjtBQUNBZ3dDLG9CQUFVN2lDLFFBQVYsR0FBcUJ1QyxPQUFNNC9CLGNBQU4sR0FBdUJVLFVBQVV0Z0MsR0FBdEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E0L0IsMkJBQWlCcnhDLEtBQUsyeEMsS0FBTCxDQUFXM2tCLGlCQUFYLENBQWpCO0FBQ0Q7O0FBRURva0IsbUJBQVczcUMsSUFBWCxDQUFnQjtBQUNkZ0wsZUFBS0EsSUFEUztBQUVkQyxlQUFLRCxJQUZTO0FBR2QwZCxlQUFLLENBSFM7QUFJZGhDLGdCQUFNc2pCLFFBQU90akIsSUFKQztBQUtkOUksZ0JBQU1vc0IsUUFBT3RqQixJQUFQLENBQVkzVCxVQUxKO0FBTWR0SyxvQkFBVW1pQyxjQU5JO0FBT2QxL0IsdUJBQWFBLFdBUEM7QUFRZDI3QixpQkFBTztBQUNMQyx1QkFBVyxDQUROO0FBRUxDLHVCQUFXLENBRk47QUFHTEMsMEJBQWMsQ0FIVDtBQUlMQywyQkFBZTtBQUpWO0FBUk8sU0FBaEI7O0FBZ0JBLFlBQUk2RCxvQkFBSixFQUEwQjtBQUN4QjtBQUNBSCxxQkFBVzNxQyxJQUFYLENBQWdCTCxLQUFoQixDQUFzQmdyQyxVQUF0QixFQUFrQ0ksWUFBbEM7QUFDRDtBQUNGOztBQUVEO0FBQ0EsVUFBSXJCLFlBQUosRUFBa0I7QUFDaEI7QUFDQUcsa0JBQVUsSUFBSTNyQixVQUFKLENBQWU0ckIsU0FBZixDQUFWO0FBQ0QsT0FIRCxNQUdPO0FBQ0w7QUFDQUQsa0JBQVUsSUFBSTNyQixVQUFKLENBQWU0ckIsU0FBZixDQUFWO0FBQ0E7QUFDQUQsZ0JBQVEsQ0FBUixJQUFjQyxjQUFjLEVBQWYsR0FBcUIsSUFBbEM7QUFDQUQsZ0JBQVEsQ0FBUixJQUFjQyxjQUFjLEVBQWYsR0FBcUIsSUFBbEM7QUFDQUQsZ0JBQVEsQ0FBUixJQUFjQyxjQUFjLENBQWYsR0FBb0IsSUFBakM7QUFDQUQsZ0JBQVEsQ0FBUixJQUFjQyxTQUFELEdBQWMsSUFBM0I7QUFDQTtBQUNBRCxnQkFBUXZwQixHQUFSLENBQVk0aUIsdUJBQUlDLEtBQUosQ0FBVVMsSUFBdEIsRUFBNEIsQ0FBNUI7QUFDRDs7QUFFRDtBQUNBLFdBQUssSUFBSWhzQyxLQUFJLENBQWIsRUFBZ0JBLEtBQUkreUMsV0FBV3J2QyxNQUEvQixFQUF1QzFELElBQXZDLEVBQTRDO0FBQzFDLFlBQUk4dUIsUUFBT2lrQixXQUFXL3lDLEVBQVgsRUFBYzh1QixJQUF6QjtBQUNBbWpCLGdCQUFRdnBCLEdBQVIsQ0FBWW9HLEtBQVosRUFBa0JqSSxNQUFsQjtBQUNBQSxrQkFBVWlJLE1BQUszVCxVQUFmO0FBQ0Q7O0FBRUQsVUFBSXc0QixTQUFTWixXQUFXQSxXQUFXcnZDLE1BQVgsR0FBb0IsQ0FBL0IsQ0FBYjtBQUNBa3VDLGdCQUFVK0IsT0FBT3ZnQyxHQUFQLEdBQWF1Z0MsT0FBTzlpQyxRQUE5QjtBQUNBLFdBQUtpL0IsYUFBTCxHQUFxQjhCLE9BQXJCOztBQUVBO0FBQ0EsVUFBSXIyQixPQUFPLElBQUk5SCxrQ0FBSixFQUFYO0FBQ0E4SCxXQUFLN0gsUUFBTCxHQUFnQmkrQixRQUFoQjtBQUNBcDJCLFdBQUs1SCxNQUFMLEdBQWNpK0IsT0FBZDtBQUNBcjJCLFdBQUszSCxRQUFMLEdBQWdCKzlCLFFBQWhCO0FBQ0FwMkIsV0FBSzFILE1BQUwsR0FBYys5QixPQUFkO0FBQ0FyMkIsV0FBS3pILGdCQUFMLEdBQXdCaS9CLFdBQVcsQ0FBWCxFQUFjei9CLFdBQXRDO0FBQ0FpSSxXQUFLeEgsY0FBTCxHQUFzQjQvQixPQUFPcmdDLFdBQVAsR0FBcUJxZ0MsT0FBTzlpQyxRQUFsRDtBQUNBMEssV0FBS3RILFdBQUwsR0FBbUIsSUFBSWQsNEJBQUosQ0FBZTQvQixXQUFXLENBQVgsRUFBYzMvQixHQUE3QixFQUNqQjIvQixXQUFXLENBQVgsRUFBYzEvQixHQURHLEVBRWpCMC9CLFdBQVcsQ0FBWCxFQUFjbGlDLFFBRkcsRUFHakJraUMsV0FBVyxDQUFYLEVBQWN6L0IsV0FIRyxFQUlqQixLQUppQixDQUFuQjtBQUtBaUksV0FBS3JILFVBQUwsR0FBa0IsSUFBSWYsNEJBQUosQ0FBZXdnQyxPQUFPdmdDLEdBQXRCLEVBQ2hCdWdDLE9BQU90Z0MsR0FEUyxFQUVoQnNnQyxPQUFPOWlDLFFBRlMsRUFHaEI4aUMsT0FBT3JnQyxXQUhTLEVBSWhCLEtBSmdCLENBQWxCO0FBS0EsVUFBSSxDQUFDLEtBQUtrOEIsT0FBVixFQUFtQjtBQUNqQixhQUFLWSxxQkFBTCxDQUEyQnZYLE1BQTNCLENBQWtDdGQsSUFBbEM7QUFDRDs7QUFFRDJTLFlBQU1sQyxPQUFOLEdBQWdCK21CLFVBQWhCO0FBQ0E3a0IsWUFBTW5DLGNBQU47O0FBRUEsVUFBSTZuQixVQUFVLElBQWQ7O0FBRUEsVUFBSTlCLFlBQUosRUFBa0I7QUFDaEI7QUFDQThCLGtCQUFVLElBQUl0dEIsVUFBSixFQUFWO0FBQ0QsT0FIRCxNQUdPO0FBQ0w7QUFDQXN0QixrQkFBVXRJLHVCQUFJZSxJQUFKLENBQVNuZSxLQUFULEVBQWdCeWpCLFFBQWhCLENBQVY7QUFDRDs7QUFFRHpqQixZQUFNbEMsT0FBTixHQUFnQixFQUFoQjtBQUNBa0MsWUFBTXhxQixNQUFOLEdBQWUsQ0FBZjs7QUFFQSxVQUFJcVIsVUFBVTtBQUNaeFksY0FBTSxPQURNO0FBRVpnRCxjQUFNLEtBQUtzMEMsV0FBTCxDQUFpQkQsT0FBakIsRUFBMEIzQixPQUExQixFQUFtQ3JwQixNQUY3QjtBQUdab21CLHFCQUFhK0QsV0FBV3J2QyxNQUhaO0FBSVo2WCxjQUFNQTtBQUpNLE9BQWQ7O0FBT0EsVUFBSXUyQixnQkFBZ0JDLHFCQUFwQixFQUEyQztBQUN6QztBQUNBO0FBQ0FoOUIsZ0JBQVErRixlQUFSLEdBQTBCNjJCLFFBQTFCO0FBQ0Q7O0FBRUQsV0FBS2owQixlQUFMLENBQXFCLE9BQXJCLEVBQThCM0ksT0FBOUI7QUFDRDs7O2dDQUVZazhCLFUsRUFBWVEsSyxFQUFPO0FBQzlCLFVBQUksS0FBS3RCLFVBQUwsSUFBbUIsSUFBdkIsRUFBNkI7QUFDM0I7QUFDRDs7QUFFRCxVQUFJamlCLFFBQVEraUIsVUFBWjtBQUNBLFVBQUlqbEIsVUFBVWtDLE1BQU1sQyxPQUFwQjtBQUNBLFVBQUkwbEIsc0JBQUo7QUFDQSxVQUFJQyxXQUFXLENBQUMsQ0FBaEI7QUFBQSxVQUFtQkMsVUFBVSxDQUFDLENBQTlCO0FBQ0EsVUFBSWtDLFdBQVcsQ0FBQyxDQUFoQjtBQUFBLFVBQW1CakMsVUFBVSxDQUFDLENBQTlCOztBQUVBLFVBQUksQ0FBQzdsQixPQUFELElBQVlBLFFBQVF0b0IsTUFBUixLQUFtQixDQUFuQyxFQUFzQztBQUNwQztBQUNEO0FBQ0QsVUFBSXNvQixRQUFRdG9CLE1BQVIsS0FBbUIsQ0FBbkIsSUFBd0IsQ0FBQyt0QyxLQUE3QixFQUFvQztBQUNsQztBQUNBO0FBQ0E7QUFDRCxPQWxCNkIsQ0FrQjVCOztBQUVGLFVBQUk1cUIsU0FBUyxDQUFiO0FBQ0EsVUFBSW9yQixVQUFVLElBQWQ7QUFDQSxVQUFJQyxZQUFZLElBQUlqQixXQUFXdnRDLE1BQS9COztBQUVBLFVBQUl3USxhQUFhLElBQWpCOztBQUVBO0FBQ0EsVUFBSThYLFFBQVF0b0IsTUFBUixHQUFpQixDQUFyQixFQUF3QjtBQUN0QndRLHFCQUFhOFgsUUFBUW1tQixHQUFSLEVBQWI7QUFDQUQscUJBQWFoK0IsV0FBV3hRLE1BQXhCO0FBQ0Q7O0FBRUQ7QUFDQSxVQUFJLEtBQUt1c0MsdUJBQUwsSUFBZ0MsSUFBcEMsRUFBMEM7QUFDeEMsWUFBSW1DLFNBQVMsS0FBS25DLHVCQUFsQjtBQUNBLGFBQUtBLHVCQUFMLEdBQStCLElBQS9CO0FBQ0Fqa0IsZ0JBQVF4USxPQUFSLENBQWdCNDJCLE1BQWhCO0FBQ0FGLHFCQUFhRSxPQUFPMXVDLE1BQXBCO0FBQ0Q7O0FBRUQ7QUFDQSxVQUFJd1EsY0FBYyxJQUFsQixFQUF3QjtBQUN0QixhQUFLKzdCLHVCQUFMLEdBQStCLzdCLFVBQS9CO0FBQ0Q7O0FBRUQsVUFBSW0rQix5QkFBeUJybUIsUUFBUSxDQUFSLEVBQVc1WSxHQUFYLEdBQWlCLEtBQUtxOEIsUUFBbkQ7O0FBRUE7QUFDQSxVQUFJLEtBQUtNLGFBQVQsRUFBd0I7QUFDdEIyQix3QkFBZ0JXLHlCQUF5QixLQUFLdEMsYUFBOUM7QUFDRCxPQUZELE1BRU87QUFBRTtBQUNQLFlBQUksS0FBS00scUJBQUwsQ0FBMkJpQyxPQUEzQixFQUFKLEVBQTBDO0FBQ3hDWiwwQkFBZ0IsQ0FBaEI7QUFDRCxTQUZELE1BRU87QUFDTCxjQUFJeDlCLGVBQWEsS0FBS204QixxQkFBTCxDQUEyQmtDLG1CQUEzQixDQUErQ0Ysc0JBQS9DLENBQWpCO0FBQ0EsY0FBSW4rQixnQkFBYyxJQUFsQixFQUF3QjtBQUN0QixnQkFBSXMrQixXQUFZSCwwQkFBMEJuK0IsYUFBV1osV0FBWCxHQUF5QlksYUFBV3JELFFBQTlELENBQWhCO0FBQ0EsZ0JBQUkyaEMsWUFBWSxDQUFoQixFQUFtQjtBQUNqQkEseUJBQVcsQ0FBWDtBQUNEO0FBQ0QsZ0JBQUlDLGNBQWN2K0IsYUFBV2QsR0FBWCxHQUFpQmMsYUFBV3JELFFBQTVCLEdBQXVDMmhDLFFBQXpEO0FBQ0FkLDRCQUFnQlcseUJBQXlCSSxXQUF6QztBQUNELFdBUEQsTUFPTztBQUFFO0FBQ1BmLDRCQUFnQixDQUFoQjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFVBQUluMkIsT0FBTyxJQUFJOUgsa0NBQUosRUFBWDtBQUNBLFVBQUlzL0IsYUFBYSxFQUFqQjs7QUFFQTtBQUNBLFdBQUssSUFBSS95QyxJQUFJLENBQWIsRUFBZ0JBLElBQUlnc0IsUUFBUXRvQixNQUE1QixFQUFvQzFELEdBQXBDLEVBQXlDO0FBQ3ZDLFlBQUlveUMsV0FBU3BtQixRQUFRaHNCLENBQVIsQ0FBYjtBQUNBLFlBQUlzVCxjQUFjOCtCLFNBQU9oL0IsR0FBUCxHQUFhLEtBQUtxOEIsUUFBcEM7QUFDQSxZQUFJcmMsYUFBYWdmLFNBQU9oZixVQUF4QjtBQUNBLFlBQUloZ0IsTUFBTUUsY0FBY28rQixhQUF4QjtBQUNBLFlBQUk1Z0IsTUFBTXNoQixTQUFPdGhCLEdBQWpCO0FBQ0EsWUFBSXpkLE1BQU1ELE1BQU0wZCxHQUFoQjs7QUFFQSxZQUFJNmdCLGFBQWEsQ0FBQyxDQUFsQixFQUFxQjtBQUNuQkEscUJBQVd2K0IsR0FBWDtBQUNBMGdDLHFCQUFXemdDLEdBQVg7QUFDRDs7QUFFRCxZQUFJMi9CLGlCQUFpQixDQUFyQjs7QUFFQSxZQUFJaHpDLE1BQU1nc0IsUUFBUXRvQixNQUFSLEdBQWlCLENBQTNCLEVBQThCO0FBQzVCLGNBQUl1dkMsVUFBVWpuQixRQUFRaHNCLElBQUksQ0FBWixFQUFlb1QsR0FBZixHQUFxQixLQUFLcThCLFFBQTFCLEdBQXFDaUMsYUFBbkQ7QUFDQXNCLDJCQUFpQkMsVUFBVTcvQixHQUEzQjtBQUNELFNBSEQsTUFHTztBQUFFO0FBQ1AsY0FBSWMsY0FBYyxJQUFsQixFQUF3QjtBQUFFO0FBQ3hCLGdCQUFJKytCLFlBQVUvK0IsV0FBV2QsR0FBWCxHQUFpQixLQUFLcThCLFFBQXRCLEdBQWlDaUMsYUFBL0M7QUFDQXNCLDZCQUFpQkMsWUFBVTcvQixHQUEzQjtBQUNELFdBSEQsTUFHTyxJQUFJMi9CLFdBQVdydkMsTUFBWCxJQUFxQixDQUF6QixFQUE0QjtBQUFFO0FBQ25Dc3ZDLDZCQUFpQkQsV0FBV0EsV0FBV3J2QyxNQUFYLEdBQW9CLENBQS9CLEVBQWtDbU4sUUFBbkQ7QUFDRCxXQUZNLE1BRUE7QUFBRTtBQUNQbWlDLDZCQUFpQnJ4QyxLQUFLMkssS0FBTCxDQUFXLEtBQUs2akMsVUFBTCxDQUFnQnhoQixpQkFBM0IsQ0FBakI7QUFDRDtBQUNGOztBQUVELFlBQUl5RSxVQUFKLEVBQWdCO0FBQ2QsY0FBSTJnQixZQUFZLElBQUk1Z0MsNEJBQUosQ0FBZUMsR0FBZixFQUFvQkMsR0FBcEIsRUFBeUIyL0IsY0FBekIsRUFBeUNaLFNBQU9oL0IsR0FBaEQsRUFBcUQsSUFBckQsQ0FBaEI7QUFDQTJnQyxvQkFBVW5oQyxZQUFWLEdBQXlCdy9CLFNBQU94L0IsWUFBaEM7QUFDQTJJLGVBQUt5NEIsZUFBTCxDQUFxQkQsU0FBckI7QUFDRDs7QUFFRGhCLG1CQUFXM3FDLElBQVgsQ0FBZ0I7QUFDZGdMLGVBQUtBLEdBRFM7QUFFZEMsZUFBS0EsR0FGUztBQUdkeWQsZUFBS0EsR0FIUztBQUlkaUMsaUJBQU9xZixTQUFPcmYsS0FKQTtBQUtkL00sZ0JBQU1vc0IsU0FBTzF1QyxNQUxDO0FBTWQwdkIsc0JBQVlBLFVBTkU7QUFPZHZpQixvQkFBVW1pQyxjQVBJO0FBUWQxL0IsdUJBQWFBLFdBUkM7QUFTZDI3QixpQkFBTztBQUNMQyx1QkFBVyxDQUROO0FBRUxDLHVCQUFXL2IsYUFBYSxDQUFiLEdBQWlCLENBRnZCO0FBR0xnYywwQkFBY2hjLGFBQWEsQ0FBYixHQUFpQixDQUgxQjtBQUlMaWMsMkJBQWUsQ0FKVjtBQUtMQyx1QkFBV2xjLGFBQWEsQ0FBYixHQUFpQjtBQUx2QjtBQVRPLFNBQWhCO0FBaUJEOztBQUVEO0FBQ0E2ZSxnQkFBVSxJQUFJM3JCLFVBQUosQ0FBZTRyQixTQUFmLENBQVY7QUFDQUQsY0FBUSxDQUFSLElBQWNDLGNBQWMsRUFBZixHQUFxQixJQUFsQztBQUNBRCxjQUFRLENBQVIsSUFBY0MsY0FBYyxFQUFmLEdBQXFCLElBQWxDO0FBQ0FELGNBQVEsQ0FBUixJQUFjQyxjQUFjLENBQWYsR0FBb0IsSUFBakM7QUFDQUQsY0FBUSxDQUFSLElBQWNDLFNBQUQsR0FBYyxJQUEzQjtBQUNBRCxjQUFRdnBCLEdBQVIsQ0FBWTRpQix1QkFBSUMsS0FBSixDQUFVUyxJQUF0QixFQUE0QixDQUE1Qjs7QUFFQTtBQUNBLFdBQUssSUFBSWhzQyxNQUFJLENBQWIsRUFBZ0JBLE1BQUkreUMsV0FBV3J2QyxNQUEvQixFQUF1QzFELEtBQXZDLEVBQTRDO0FBQzFDLFlBQUkreUIsUUFBUWdnQixXQUFXL3lDLEdBQVgsRUFBYyt5QixLQUExQjtBQUNBLGVBQU9BLE1BQU1ydkIsTUFBYixFQUFxQjtBQUNuQixjQUFJb3JCLE9BQU9pRSxNQUFNcFksS0FBTixFQUFYO0FBQ0EsY0FBSXBiLE9BQU91dkIsS0FBS3Z2QixJQUFoQjtBQUNBMHlDLGtCQUFRdnBCLEdBQVIsQ0FBWW5wQixJQUFaLEVBQWtCc25CLE1BQWxCO0FBQ0FBLG9CQUFVdG5CLEtBQUs0YixVQUFmO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJdzRCLFNBQVNaLFdBQVdBLFdBQVdydkMsTUFBWCxHQUFvQixDQUEvQixDQUFiO0FBQ0FrdUMsZ0JBQVUrQixPQUFPdmdDLEdBQVAsR0FBYXVnQyxPQUFPOWlDLFFBQTlCO0FBQ0FnaEMsZ0JBQVU4QixPQUFPdGdDLEdBQVAsR0FBYXNnQyxPQUFPOWlDLFFBQTlCO0FBQ0EsV0FBS2svQixhQUFMLEdBQXFCNkIsT0FBckI7O0FBRUE7QUFDQXIyQixXQUFLN0gsUUFBTCxHQUFnQmkrQixRQUFoQjtBQUNBcDJCLFdBQUs1SCxNQUFMLEdBQWNpK0IsT0FBZDtBQUNBcjJCLFdBQUszSCxRQUFMLEdBQWdCa2dDLFFBQWhCO0FBQ0F2NEIsV0FBSzFILE1BQUwsR0FBY2crQixPQUFkO0FBQ0F0MkIsV0FBS3pILGdCQUFMLEdBQXdCaS9CLFdBQVcsQ0FBWCxFQUFjei9CLFdBQXRDO0FBQ0FpSSxXQUFLeEgsY0FBTCxHQUFzQjQvQixPQUFPcmdDLFdBQVAsR0FBcUJxZ0MsT0FBTzlpQyxRQUFsRDtBQUNBMEssV0FBS3RILFdBQUwsR0FBbUIsSUFBSWQsNEJBQUosQ0FBZTQvQixXQUFXLENBQVgsRUFBYzMvQixHQUE3QixFQUNqQjIvQixXQUFXLENBQVgsRUFBYzEvQixHQURHLEVBRWpCMC9CLFdBQVcsQ0FBWCxFQUFjbGlDLFFBRkcsRUFHakJraUMsV0FBVyxDQUFYLEVBQWN6L0IsV0FIRyxFQUlqQnkvQixXQUFXLENBQVgsRUFBYzNmLFVBSkcsQ0FBbkI7QUFLQTdYLFdBQUtySCxVQUFMLEdBQWtCLElBQUlmLDRCQUFKLENBQWV3Z0MsT0FBT3ZnQyxHQUF0QixFQUNoQnVnQyxPQUFPdGdDLEdBRFMsRUFFaEJzZ0MsT0FBTzlpQyxRQUZTLEVBR2hCOGlDLE9BQU9yZ0MsV0FIUyxFQUloQnFnQyxPQUFPdmdCLFVBSlMsQ0FBbEI7QUFLQSxVQUFJLENBQUMsS0FBS29jLE9BQVYsRUFBbUI7QUFDakIsYUFBS2EscUJBQUwsQ0FBMkJ4WCxNQUEzQixDQUFrQ3RkLElBQWxDO0FBQ0Q7O0FBRUQyUyxZQUFNbEMsT0FBTixHQUFnQittQixVQUFoQjtBQUNBN2tCLFlBQU1uQyxjQUFOOztBQUVBO0FBQ0E7QUFDQSxVQUFJLEtBQUt1a0IsY0FBVCxFQUF5QjtBQUN2QixZQUFJckIsUUFBUThELFdBQVcsQ0FBWCxFQUFjOUQsS0FBMUI7QUFDQUEsY0FBTUUsU0FBTixHQUFrQixDQUFsQjtBQUNBRixjQUFNSyxTQUFOLEdBQWtCLENBQWxCO0FBQ0Q7O0FBRUQsVUFBSXNFLFVBQVV0SSx1QkFBSWUsSUFBSixDQUFTbmUsS0FBVCxFQUFnQnlqQixRQUFoQixDQUFkO0FBQ0F6akIsWUFBTWxDLE9BQU4sR0FBZ0IsRUFBaEI7QUFDQWtDLFlBQU14cUIsTUFBTixHQUFlLENBQWY7O0FBRUEsV0FBS2dhLGVBQUwsQ0FBcUIsT0FBckIsRUFBOEI7QUFDNUJuaEIsY0FBTSxPQURzQjtBQUU1QmdELGNBQU0sS0FBS3MwQyxXQUFMLENBQWlCRCxPQUFqQixFQUEwQjNCLE9BQTFCLEVBQW1DcnBCLE1BRmI7QUFHNUJvbUIscUJBQWErRCxXQUFXcnZDLE1BSEk7QUFJNUI2WCxjQUFNQTtBQUpzQixPQUE5QjtBQU1EOzs7Z0NBRVk4d0IsSSxFQUFNTCxJLEVBQU07QUFDdkIsVUFBSWpqQixTQUFTLElBQUl6QyxVQUFKLENBQWUrbEIsS0FBS2x4QixVQUFMLEdBQWtCNndCLEtBQUs3d0IsVUFBdEMsQ0FBYjtBQUNBNE4sYUFBT0wsR0FBUCxDQUFXMmpCLElBQVgsRUFBaUIsQ0FBakI7QUFDQXRqQixhQUFPTCxHQUFQLENBQVdzakIsSUFBWCxFQUFpQkssS0FBS2x4QixVQUF0QjtBQUNBLGFBQU80TixNQUFQO0FBQ0Q7Ozt3QkE3bkJvQjtBQUNuQixhQUFPLEtBQUt2TCxjQUFaO0FBQ0QsSztzQkFFa0JwZ0IsUSxFQUFVO0FBQzNCLFdBQUtvZ0IsY0FBTCxHQUFzQnBnQixRQUF0QjtBQUNEOztBQUVEOzs7Ozs7Ozs7Ozt3QkFRc0I7QUFDcEIsYUFBTyxLQUFLc2dCLGVBQVo7QUFDRCxLO3NCQUVtQnRnQixRLEVBQVU7QUFDNUIsV0FBS3NnQixlQUFMLEdBQXVCdGdCLFFBQXZCO0FBQ0Q7Ozs7OztrQkEwbUJZbWxCLFU7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzl0QmY7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxJQUFJcEosVUFBVSxFQUFkOztBQUVBLFNBQVM4NkIsTUFBVCxHQUFrQjtBQUNkOztBQUVBLFFBQUlDLEtBQUs3MUMsS0FBS3N4QixTQUFMLENBQWVELFNBQWYsQ0FBeUJFLFdBQXpCLEVBQVQ7O0FBRUEsUUFBSXROLFFBQVEsbUJBQW1CNnhCLElBQW5CLENBQXdCRCxFQUF4QixLQUNSLG9CQUFvQkMsSUFBcEIsQ0FBeUJELEVBQXpCLENBRFEsSUFFUix3QkFBd0JDLElBQXhCLENBQTZCRCxFQUE3QixDQUZRLElBR1IseUJBQXlCQyxJQUF6QixDQUE4QkQsRUFBOUIsQ0FIUSxJQUlSLDZEQUE2REMsSUFBN0QsQ0FBa0VELEVBQWxFLENBSlEsSUFLUix1RUFBdUVDLElBQXZFLENBQTRFRCxFQUE1RSxDQUxRLElBTVIsd0JBQXdCQyxJQUF4QixDQUE2QkQsRUFBN0IsQ0FOUSxJQU9SLHFDQUFxQ0MsSUFBckMsQ0FBMENELEVBQTFDLENBUFEsSUFRUixrQkFBa0JDLElBQWxCLENBQXVCRCxFQUF2QixDQVJRLElBU1JBLEdBQUdya0IsT0FBSCxDQUFXLFNBQVgsS0FBeUIsQ0FBekIsSUFBOEIsc0JBQXNCc2tCLElBQXRCLENBQTJCRCxFQUEzQixDQVR0QixJQVVSQSxHQUFHcmtCLE9BQUgsQ0FBVyxZQUFYLElBQTJCLENBQTNCLElBQWdDLHlCQUF5QnNrQixJQUF6QixDQUE4QkQsRUFBOUIsQ0FWeEIsSUFXUixFQVhKOztBQWFBLFFBQUlFLGlCQUFpQixTQUFTRCxJQUFULENBQWNELEVBQWQsS0FDakIsU0FBU0MsSUFBVCxDQUFjRCxFQUFkLENBRGlCLElBRWpCLGtCQUFrQkMsSUFBbEIsQ0FBdUJELEVBQXZCLENBRmlCLElBR2pCLFdBQVdDLElBQVgsQ0FBZ0JELEVBQWhCLENBSGlCLElBSWpCLFdBQVdDLElBQVgsQ0FBZ0JELEVBQWhCLENBSmlCLElBS2pCLFlBQVlDLElBQVosQ0FBaUJELEVBQWpCLENBTGlCLElBTWpCLFlBQVlDLElBQVosQ0FBaUJELEVBQWpCLENBTmlCLElBT2pCLFFBQVFDLElBQVIsQ0FBYUQsRUFBYixDQVBpQixJQVFqQixVQUFVQyxJQUFWLENBQWVELEVBQWYsQ0FSaUIsSUFTakIsU0FBU0MsSUFBVCxDQUFjRCxFQUFkLENBVGlCLElBVWpCLEVBVko7O0FBWUEsUUFBSUcsVUFBVTtBQUNWM3BDLGlCQUFTNFgsTUFBTSxDQUFOLEtBQVlBLE1BQU0sQ0FBTixDQUFaLElBQXdCQSxNQUFNLENBQU4sQ0FBeEIsSUFBb0MsRUFEbkM7QUFFVnpYLGlCQUFTeVgsTUFBTSxDQUFOLEtBQVlBLE1BQU0sQ0FBTixDQUFaLElBQXdCLEdBRnZCO0FBR1ZneUIsc0JBQWNoeUIsTUFBTSxDQUFOLEtBQVlBLE1BQU0sQ0FBTixDQUFaLElBQXdCLEdBSDVCO0FBSVZpeUIsa0JBQVVILGVBQWUsQ0FBZixLQUFxQjtBQUpyQixLQUFkOztBQU9BLFFBQUkxcEMsVUFBVSxFQUFkO0FBQ0EsUUFBSTJwQyxRQUFRM3BDLE9BQVosRUFBcUI7QUFDakJBLGdCQUFRMnBDLFFBQVEzcEMsT0FBaEIsSUFBMkIsSUFBM0I7O0FBRUEsWUFBSThwQyxlQUFlSCxRQUFRQyxZQUFSLENBQXFCblUsS0FBckIsQ0FBMkIsR0FBM0IsQ0FBbkI7QUFDQXoxQixnQkFBUUcsT0FBUixHQUFrQjtBQUNkbThCLG1CQUFPcE4sU0FBU3lhLFFBQVFDLFlBQWpCLEVBQStCLEVBQS9CLENBRE87QUFFZEcsb0JBQVFKLFFBQVF4cEM7QUFGRixTQUFsQjtBQUlBLFlBQUkycEMsYUFBYTl3QyxNQUFiLEdBQXNCLENBQTFCLEVBQTZCO0FBQ3pCZ0gsb0JBQVFHLE9BQVIsQ0FBZ0Irc0IsS0FBaEIsR0FBd0JnQyxTQUFTNGEsYUFBYSxDQUFiLENBQVQsRUFBMEIsRUFBMUIsQ0FBeEI7QUFDSDtBQUNELFlBQUlBLGFBQWE5d0MsTUFBYixHQUFzQixDQUExQixFQUE2QjtBQUN6QmdILG9CQUFRRyxPQUFSLENBQWdCbzhCLEtBQWhCLEdBQXdCck4sU0FBUzRhLGFBQWEsQ0FBYixDQUFULEVBQTBCLEVBQTFCLENBQXhCO0FBQ0g7QUFDSjs7QUFFRCxRQUFJSCxRQUFRRSxRQUFaLEVBQXNCO0FBQ2xCN3BDLGdCQUFRMnBDLFFBQVFFLFFBQWhCLElBQTRCLElBQTVCO0FBQ0g7O0FBRUQsUUFBSTdwQyxRQUFRcThCLE1BQVIsSUFBa0JyOEIsUUFBUWdxQyxHQUExQixJQUFpQ2hxQyxRQUFRME8sTUFBN0MsRUFBcUQ7QUFDakQxTyxnQkFBUWlxQyxNQUFSLEdBQWlCLElBQWpCO0FBQ0g7O0FBRUQ7QUFDQSxRQUFJanFDLFFBQVFrcUMsRUFBUixJQUFjbHFDLFFBQVFtcUMsUUFBMUIsRUFBb0M7QUFDaEMsWUFBSW5xQyxRQUFRa3FDLEVBQVosRUFBZ0I7QUFDWixtQkFBT2xxQyxRQUFRa3FDLEVBQWY7QUFDSDtBQUNELFlBQUl6TixPQUFPLE1BQVg7QUFDQWtOLGdCQUFRM3BDLE9BQVIsR0FBa0J5OEIsSUFBbEI7QUFDQXo4QixnQkFBUXk4QixJQUFSLElBQWdCLElBQWhCO0FBQ0g7O0FBRUQ7QUFDQSxRQUFJejhCLFFBQVFvcUMsSUFBWixFQUFrQjtBQUNkLGVBQU9wcUMsUUFBUW9xQyxJQUFmO0FBQ0EsWUFBSW5kLFNBQVMsUUFBYjtBQUNBMGMsZ0JBQVEzcEMsT0FBUixHQUFrQml0QixNQUFsQjtBQUNBanRCLGdCQUFRaXRCLE1BQVIsSUFBa0IsSUFBbEI7QUFDSDs7QUFFRDtBQUNBLFFBQUlqdEIsUUFBUWdxQyxHQUFaLEVBQWlCO0FBQ2IsWUFBSUssUUFBUSxPQUFaO0FBQ0FWLGdCQUFRM3BDLE9BQVIsR0FBa0JxcUMsS0FBbEI7QUFDQXJxQyxnQkFBUXFxQyxLQUFSLElBQWlCLElBQWpCO0FBQ0g7O0FBRUQ7QUFDQSxRQUFJcnFDLFFBQVEwTyxNQUFSLElBQWtCMU8sUUFBUXNxQyxPQUE5QixFQUF1QztBQUNuQyxZQUFJQSxVQUFVLFNBQWQ7QUFDQVgsZ0JBQVEzcEMsT0FBUixHQUFrQnNxQyxPQUFsQjtBQUNBdHFDLGdCQUFRc3FDLE9BQVIsSUFBbUIsSUFBbkI7QUFDSDs7QUFFRHRxQyxZQUFRUSxJQUFSLEdBQWVtcEMsUUFBUTNwQyxPQUF2QjtBQUNBQSxZQUFRNnBDLFFBQVIsR0FBbUJGLFFBQVFFLFFBQTNCOztBQUVBLFNBQUssSUFBSXRyQyxHQUFULElBQWdCa1EsT0FBaEIsRUFBeUI7QUFDckIsWUFBSUEsUUFBUWtDLGNBQVIsQ0FBdUJwUyxHQUF2QixDQUFKLEVBQWlDO0FBQzdCLG1CQUFPa1EsUUFBUWxRLEdBQVIsQ0FBUDtBQUNIO0FBQ0o7QUFDRHJNLFdBQU91UyxNQUFQLENBQWNnSyxPQUFkLEVBQXVCek8sT0FBdkI7QUFDSDs7QUFFRHVwQzs7a0JBRWU5NkIsTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDL0hmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFrQmFraEIsZ0IsV0FBQUEsZ0I7QUFFVCw4QkFBWXBpQixPQUFaLEVBQXFCO0FBQUE7O0FBQ2pCLGFBQUtnOUIsUUFBTCxHQUFnQmg5QixPQUFoQjtBQUNIOzs7O21DQVVVO0FBQ1AsbUJBQU8sS0FBSy9NLElBQUwsR0FBWSxJQUFaLEdBQW1CLEtBQUsrTSxPQUEvQjtBQUNIOzs7NEJBVlU7QUFDUCxtQkFBTyxrQkFBUDtBQUNIOzs7NEJBRWE7QUFDVixtQkFBTyxLQUFLZzlCLFFBQVo7QUFDSDs7Ozs7O0lBUVExOUIscUIsV0FBQUEscUI7OztBQUVULG1DQUFZVSxPQUFaLEVBQXFCO0FBQUE7O0FBQUEsNklBQ1hBLE9BRFc7QUFFcEI7Ozs7NEJBRVU7QUFDUCxtQkFBTyx1QkFBUDtBQUNIOzs7O0VBUnNDb2lCLGdCOztJQVk5QnZSLHdCLFdBQUFBLHdCOzs7QUFFVCxzQ0FBWTdRLE9BQVosRUFBcUI7QUFBQTs7QUFBQSxtSkFDWEEsT0FEVztBQUVwQjs7Ozs0QkFFVTtBQUNQLG1CQUFPLDBCQUFQO0FBQ0g7Ozs7RUFSeUNvaUIsZ0I7O0lBWWpDdUYsdUIsV0FBQUEsdUI7OztBQUVULHFDQUFZM25CLE9BQVosRUFBcUI7QUFBQTs7QUFBQSxpSkFDWEEsT0FEVztBQUVwQjs7Ozs0QkFFVTtBQUNQLG1CQUFPLHlCQUFQO0FBQ0g7Ozs7RUFSd0NvaUIsZ0I7Ozs7Ozs7Ozs7Ozs7Ozs7OztxakJDOUQ3Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOzs7Ozs7OztJQUVNcmlCLEc7Ozs7Ozs7c0JBQ01rOUIsRyxFQUFLbDhCLEcsRUFBSztBQUNsQixVQUFJLENBQUNrOEIsR0FBRCxJQUFRbDlCLElBQUltOUIsZ0JBQWhCLEVBQWtDO0FBQUVELGNBQU1sOUIsSUFBSW85QixVQUFWO0FBQXNCOztBQUUxRCxVQUFJaHdCLFlBQVU4dkIsR0FBVixZQUFvQmw4QixHQUF4Qjs7QUFFQSxVQUFJaEIsSUFBSXE5QixlQUFSLEVBQXlCO0FBQ3ZCcjlCLFlBQUkzTyxPQUFKLENBQVloQyxJQUFaLENBQWlCLEtBQWpCLEVBQXdCLE9BQXhCLEVBQWlDK2QsR0FBakM7QUFDRDs7QUFFRCxVQUFJLENBQUNwTixJQUFJczlCLFlBQVQsRUFBdUI7QUFDckI7QUFDRDs7QUFFRCxVQUFJaHRDLFFBQVFwRyxLQUFaLEVBQW1CO0FBQ2pCb0csZ0JBQVFwRyxLQUFSLENBQWNrakIsR0FBZDtBQUNELE9BRkQsTUFFTyxJQUFJOWMsUUFBUWl0QyxJQUFaLEVBQWtCO0FBQ3ZCanRDLGdCQUFRaXRDLElBQVIsQ0FBYW53QixHQUFiO0FBQ0QsT0FGTSxNQUVBO0FBQ0w5YyxnQkFBUW9RLEdBQVIsQ0FBWTBNLEdBQVo7QUFDRDtBQUNGOzs7c0JBRVM4dkIsRyxFQUFLbDhCLEcsRUFBSztBQUNsQixVQUFJLENBQUNrOEIsR0FBRCxJQUFRbDlCLElBQUltOUIsZ0JBQWhCLEVBQWtDO0FBQUVELGNBQU1sOUIsSUFBSW85QixVQUFWO0FBQXNCOztBQUUxRCxVQUFJaHdCLFlBQVU4dkIsR0FBVixZQUFvQmw4QixHQUF4Qjs7QUFFQSxVQUFJaEIsSUFBSXE5QixlQUFSLEVBQXlCO0FBQ3ZCcjlCLFlBQUkzTyxPQUFKLENBQVloQyxJQUFaLENBQWlCLEtBQWpCLEVBQXdCLE1BQXhCLEVBQWdDK2QsR0FBaEM7QUFDRDs7QUFFRCxVQUFJLENBQUNwTixJQUFJdzlCLFdBQVQsRUFBc0I7QUFDcEI7QUFDRDs7QUFFRCxVQUFJbHRDLFFBQVFpVCxJQUFaLEVBQWtCO0FBQ2hCalQsZ0JBQVFpVCxJQUFSLENBQWE2SixHQUFiO0FBQ0QsT0FGRCxNQUVPO0FBQ0w5YyxnQkFBUW9RLEdBQVIsQ0FBWTBNLEdBQVo7QUFDRDtBQUNGOzs7c0JBRVM4dkIsRyxFQUFLbDhCLEcsRUFBSztBQUNsQixVQUFJLENBQUNrOEIsR0FBRCxJQUFRbDlCLElBQUltOUIsZ0JBQWhCLEVBQWtDO0FBQUVELGNBQU1sOUIsSUFBSW85QixVQUFWO0FBQXNCOztBQUUxRCxVQUFJaHdCLFlBQVU4dkIsR0FBVixZQUFvQmw4QixHQUF4Qjs7QUFFQSxVQUFJaEIsSUFBSXE5QixlQUFSLEVBQXlCO0FBQ3ZCcjlCLFlBQUkzTyxPQUFKLENBQVloQyxJQUFaLENBQWlCLEtBQWpCLEVBQXdCLE1BQXhCLEVBQWdDK2QsR0FBaEM7QUFDRDs7QUFFRCxVQUFJLENBQUNwTixJQUFJeTlCLFdBQVQsRUFBc0I7QUFDcEI7QUFDRDs7QUFFRCxVQUFJbnRDLFFBQVFpdEMsSUFBWixFQUFrQjtBQUNoQmp0QyxnQkFBUWl0QyxJQUFSLENBQWFud0IsR0FBYjtBQUNELE9BRkQsTUFFTztBQUNMOWMsZ0JBQVFvUSxHQUFSLENBQVkwTSxHQUFaO0FBQ0Q7QUFDRjs7O3NCQUVTOHZCLEcsRUFBS2w4QixHLEVBQUs7QUFDbEIsVUFBSSxDQUFDazhCLEdBQUQsSUFBUWw5QixJQUFJbTlCLGdCQUFoQixFQUFrQztBQUFFRCxjQUFNbDlCLElBQUlvOUIsVUFBVjtBQUFzQjs7QUFFMUQsVUFBSWh3QixZQUFVOHZCLEdBQVYsWUFBb0JsOEIsR0FBeEI7O0FBRUEsVUFBSWhCLElBQUlxOUIsZUFBUixFQUF5QjtBQUN2QnI5QixZQUFJM08sT0FBSixDQUFZaEMsSUFBWixDQUFpQixLQUFqQixFQUF3QixPQUF4QixFQUFpQytkLEdBQWpDO0FBQ0Q7O0FBRUQsVUFBSSxDQUFDcE4sSUFBSTA5QixZQUFULEVBQXVCO0FBQ3JCO0FBQ0Q7O0FBRUQsVUFBSXB0QyxRQUFRcXRDLEtBQVosRUFBbUI7QUFDakJydEMsZ0JBQVFxdEMsS0FBUixDQUFjdndCLEdBQWQ7QUFDRCxPQUZELE1BRU87QUFDTDljLGdCQUFRb1EsR0FBUixDQUFZME0sR0FBWjtBQUNEO0FBQ0Y7OztzQkFFUzh2QixHLEVBQUtsOEIsRyxFQUFLO0FBQ2xCLFVBQUksQ0FBQ2s4QixHQUFELElBQVFsOUIsSUFBSW05QixnQkFBaEIsRUFBa0M7QUFBRUQsY0FBTWw5QixJQUFJbzlCLFVBQVY7QUFBc0I7O0FBRTFELFVBQUlod0IsWUFBVTh2QixHQUFWLFlBQW9CbDhCLEdBQXhCOztBQUVBLFVBQUloQixJQUFJcTlCLGVBQVIsRUFBeUI7QUFDdkJyOUIsWUFBSTNPLE9BQUosQ0FBWWhDLElBQVosQ0FBaUIsS0FBakIsRUFBd0IsU0FBeEIsRUFBbUMrZCxHQUFuQztBQUNEOztBQUVELFVBQUksQ0FBQ3BOLElBQUk0OUIsY0FBVCxFQUF5QjtBQUN2QjtBQUNEOztBQUVEdHRDLGNBQVFvUSxHQUFSLENBQVkwTSxHQUFaO0FBQ0Q7Ozs7OztBQUdIcE4sSUFBSW85QixVQUFKLEdBQWlCLFFBQWpCO0FBQ0FwOUIsSUFBSW05QixnQkFBSixHQUF1QixLQUF2QjtBQUNBbjlCLElBQUlzOUIsWUFBSixHQUFtQixJQUFuQjtBQUNBdDlCLElBQUl3OUIsV0FBSixHQUFrQixJQUFsQjtBQUNBeDlCLElBQUl5OUIsV0FBSixHQUFrQixJQUFsQjtBQUNBejlCLElBQUkwOUIsWUFBSixHQUFtQixJQUFuQjtBQUNBMTlCLElBQUk0OUIsY0FBSixHQUFxQixJQUFyQjs7QUFFQTU5QixJQUFJcTlCLGVBQUosR0FBc0IsS0FBdEI7O0FBRUFyOUIsSUFBSTNPLE9BQUosR0FBYyxJQUFJeEMsZ0JBQUosRUFBZDs7a0JBRWVtUixHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FqQkNwSWY7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTs7OztBQUNBOzs7Ozs7OztJQUVNMkUsYzs7Ozs7OztvQ0FrRmlCO0FBQ2YsbUJBQU87QUFDSGs1QiwyQkFBVzc5QixpQkFBSW85QixVQURaO0FBRUhVLGdDQUFnQjk5QixpQkFBSW05QixnQkFGakI7QUFHSFksK0JBQWUvOUIsaUJBQUk0OUIsY0FIaEI7QUFJSEksNkJBQWFoK0IsaUJBQUkwOUIsWUFKZDtBQUtITyw0QkFBWWorQixpQkFBSXc5QixXQUxiO0FBTUhVLDRCQUFZbCtCLGlCQUFJeTlCLFdBTmI7QUFPSFUsNkJBQWFuK0IsaUJBQUlzOUIsWUFQZDtBQVFIdndCLGdDQUFnQi9NLGlCQUFJcTlCO0FBUmpCLGFBQVA7QUFVSDs7O29DQUVrQmxnQyxNLEVBQVE7QUFDdkI2Qyw2QkFBSW85QixVQUFKLEdBQWlCamdDLE9BQU8wZ0MsU0FBeEI7QUFDQTc5Qiw2QkFBSW05QixnQkFBSixHQUF1QmhnQyxPQUFPMmdDLGNBQTlCO0FBQ0E5OUIsNkJBQUk0OUIsY0FBSixHQUFxQnpnQyxPQUFPNGdDLGFBQTVCO0FBQ0EvOUIsNkJBQUkwOUIsWUFBSixHQUFtQnZnQyxPQUFPNmdDLFdBQTFCO0FBQ0FoK0IsNkJBQUl3OUIsV0FBSixHQUFrQnJnQyxPQUFPOGdDLFVBQXpCO0FBQ0FqK0IsNkJBQUl5OUIsV0FBSixHQUFrQnRnQyxPQUFPK2dDLFVBQXpCO0FBQ0FsK0IsNkJBQUlzOUIsWUFBSixHQUFtQm5nQyxPQUFPZ2hDLFdBQTFCO0FBQ0FuK0IsNkJBQUlxOUIsZUFBSixHQUFzQmxnQyxPQUFPNFAsY0FBN0I7QUFDSDs7O3dDQUVzQjtBQUNuQixnQkFBSTFiLFVBQVVzVCxlQUFldFQsT0FBN0I7O0FBRUEsZ0JBQUlBLFFBQVFGLGFBQVIsQ0FBc0IsUUFBdEIsSUFBa0MsQ0FBdEMsRUFBeUM7QUFDckMsb0JBQUlnTSxTQUFTd0gsZUFBZUUsU0FBZixFQUFiO0FBQ0F4VCx3QkFBUWhDLElBQVIsQ0FBYSxRQUFiLEVBQXVCOE4sTUFBdkI7QUFDSDtBQUNKOzs7eUNBRXVCbE4sUSxFQUFVO0FBQzlCMFUsMkJBQWV0VCxPQUFmLENBQXVCckIsV0FBdkIsQ0FBbUMsUUFBbkMsRUFBNkNDLFFBQTdDO0FBQ0g7Ozt1Q0FFcUJBLFEsRUFBVTtBQUM1QjBVLDJCQUFldFQsT0FBZixDQUF1QlQsY0FBdkIsQ0FBc0MsUUFBdEMsRUFBZ0RYLFFBQWhEO0FBQ0g7Ozt1Q0FFcUJBLFEsRUFBVTtBQUM1QitQLDZCQUFJM08sT0FBSixDQUFZckIsV0FBWixDQUF3QixLQUF4QixFQUErQkMsUUFBL0I7QUFDQSxnQkFBSStQLGlCQUFJM08sT0FBSixDQUFZRixhQUFaLENBQTBCLEtBQTFCLElBQW1DLENBQXZDLEVBQTBDO0FBQ3RDNk8saUNBQUlxOUIsZUFBSixHQUFzQixJQUF0QjtBQUNBMTRCLCtCQUFleTVCLGFBQWY7QUFDSDtBQUNKOzs7MENBRXdCbnVDLFEsRUFBVTtBQUMvQitQLDZCQUFJM08sT0FBSixDQUFZVCxjQUFaLENBQTJCLEtBQTNCLEVBQWtDWCxRQUFsQztBQUNBLGdCQUFJK1AsaUJBQUkzTyxPQUFKLENBQVlGLGFBQVosQ0FBMEIsS0FBMUIsTUFBcUMsQ0FBekMsRUFBNEM7QUFDeEM2TyxpQ0FBSXE5QixlQUFKLEdBQXNCLEtBQXRCO0FBQ0ExNEIsK0JBQWV5NUIsYUFBZjtBQUNIO0FBQ0o7Ozs0QkF2STJCO0FBQ3hCLG1CQUFPcCtCLGlCQUFJbTlCLGdCQUFYO0FBQ0gsUzswQkFFeUJrQixNLEVBQVE7QUFDOUJyK0IsNkJBQUltOUIsZ0JBQUosR0FBdUJrQixNQUF2QjtBQUNBMTVCLDJCQUFleTVCLGFBQWY7QUFDSDs7OzRCQUVzQjtBQUNuQixtQkFBT3ArQixpQkFBSW85QixVQUFYO0FBQ0gsUzswQkFFb0JGLEcsRUFBSztBQUN0Qmw5Qiw2QkFBSW85QixVQUFKLEdBQWlCRixHQUFqQjtBQUNBdjRCLDJCQUFleTVCLGFBQWY7QUFDSDs7OzRCQUVzQjtBQUNuQixtQkFBT3ArQixpQkFBSTQ5QixjQUFKLElBQ0E1OUIsaUJBQUkwOUIsWUFESixJQUVBMTlCLGlCQUFJdzlCLFdBRkosSUFHQXg5QixpQkFBSXk5QixXQUhKLElBSUF6OUIsaUJBQUlzOUIsWUFKWDtBQUtILFM7MEJBRW9CZSxNLEVBQVE7QUFDekJyK0IsNkJBQUk0OUIsY0FBSixHQUFxQlMsTUFBckI7QUFDQXIrQiw2QkFBSTA5QixZQUFKLEdBQW1CVyxNQUFuQjtBQUNBcitCLDZCQUFJdzlCLFdBQUosR0FBa0JhLE1BQWxCO0FBQ0FyK0IsNkJBQUl5OUIsV0FBSixHQUFrQlksTUFBbEI7QUFDQXIrQiw2QkFBSXM5QixZQUFKLEdBQW1CZSxNQUFuQjtBQUNBMTVCLDJCQUFleTVCLGFBQWY7QUFDSDs7OzRCQUV3QjtBQUNyQixtQkFBT3ArQixpQkFBSTA5QixZQUFYO0FBQ0gsUzswQkFFc0JXLE0sRUFBUTtBQUMzQnIrQiw2QkFBSTA5QixZQUFKLEdBQW1CVyxNQUFuQjtBQUNBMTVCLDJCQUFleTVCLGFBQWY7QUFDSDs7OzRCQUUwQjtBQUN2QixtQkFBT3ArQixpQkFBSTQ5QixjQUFYO0FBQ0gsUzswQkFFd0JTLE0sRUFBUTtBQUM3QnIrQiw2QkFBSTQ5QixjQUFKLEdBQXFCUyxNQUFyQjtBQUNBMTVCLDJCQUFleTVCLGFBQWY7QUFDSDs7OzRCQUV1QjtBQUNwQixtQkFBT3ArQixpQkFBSXc5QixXQUFYO0FBQ0gsUzswQkFFcUJhLE0sRUFBUTtBQUMxQnIrQiw2QkFBSXc5QixXQUFKLEdBQWtCYSxNQUFsQjtBQUNBMTVCLDJCQUFleTVCLGFBQWY7QUFDSDs7OzRCQUV1QjtBQUNwQixtQkFBT3ArQixpQkFBSXk5QixXQUFYO0FBQ0gsUzswQkFFcUJZLE0sRUFBUTtBQUMxQnIrQiw2QkFBSXk5QixXQUFKLEdBQWtCWSxNQUFsQjtBQUNBMTVCLDJCQUFleTVCLGFBQWY7QUFDSDs7OzRCQUV3QjtBQUNyQixtQkFBT3ArQixpQkFBSXM5QixZQUFYO0FBQ0gsUzswQkFFc0JlLE0sRUFBUTtBQUMzQnIrQiw2QkFBSXM5QixZQUFKLEdBQW1CZSxNQUFuQjtBQUNBMTVCLDJCQUFleTVCLGFBQWY7QUFDSDs7Ozs7O0FBNkRMejVCLGVBQWV0VCxPQUFmLEdBQXlCLElBQUl4QyxnQkFBSixFQUF6Qjs7a0JBRWU4VixjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BLZjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBa0JNNEgsUTs7Ozs7OztrQ0FFZTtBQUNiO0FBQ0EzbkIsbUJBQU9naUIsY0FBUCxHQUF3QmhpQixPQUFPZ2lCLGNBQVAsSUFBeUIsVUFBVXNHLEdBQVYsRUFBZW94QixLQUFmLEVBQXNCO0FBQ25FcHhCLG9CQUFJcXhCLFNBQUosR0FBZ0JELEtBQWhCO0FBQ0EsdUJBQU9weEIsR0FBUDtBQUNILGFBSEQ7O0FBS0E7QUFDQXRvQixtQkFBT3VTLE1BQVAsR0FBZ0J2UyxPQUFPdVMsTUFBUCxJQUFpQixVQUFVcUwsTUFBVixFQUFrQjtBQUMvQyxvQkFBSUEsV0FBV3pjLFNBQVgsSUFBd0J5YyxXQUFXLElBQXZDLEVBQTZDO0FBQ3pDLDBCQUFNLElBQUlwWSxTQUFKLENBQWMsNENBQWQsQ0FBTjtBQUNIOztBQUVELG9CQUFJbzBDLFNBQVM1NUMsT0FBTzRkLE1BQVAsQ0FBYjtBQUNBLHFCQUFLLElBQUl4YSxJQUFJLENBQWIsRUFBZ0JBLElBQUlrQixVQUFVd0MsTUFBOUIsRUFBc0MxRCxHQUF0QyxFQUEyQztBQUN2Qyx3QkFBSXkyQyxTQUFTdjFDLFVBQVVsQixDQUFWLENBQWI7QUFDQSx3QkFBSXkyQyxXQUFXMTRDLFNBQVgsSUFBd0IwNEMsV0FBVyxJQUF2QyxFQUE2QztBQUN6Qyw2QkFBSyxJQUFJeHRDLEdBQVQsSUFBZ0J3dEMsTUFBaEIsRUFBd0I7QUFDcEIsZ0NBQUlBLE9BQU9wN0IsY0FBUCxDQUFzQnBTLEdBQXRCLENBQUosRUFBZ0M7QUFDNUJ1dEMsdUNBQU92dEMsR0FBUCxJQUFjd3RDLE9BQU94dEMsR0FBUCxDQUFkO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7QUFDRCx1QkFBT3V0QyxNQUFQO0FBQ0gsYUFqQkQ7O0FBbUJBO0FBQ0EsZ0JBQUksT0FBT240QyxLQUFLMkgsT0FBWixLQUF3QixVQUE1QixFQUF3QztBQUNwQzVGLGdCQUFBLG1CQUFPQSxDQUFDLG1FQUFSLEVBQXVCb0csUUFBdkI7QUFDSDtBQUNKOzs7Ozs7QUFJTCtkLFNBQVNDLE9BQVQ7O2tCQUVlRCxROzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6RGY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsU0FBU215QixpQkFBVCxDQUEyQjN1QixVQUEzQixFQUF1Q2pPLEtBQXZDLEVBQThDNjhCLFdBQTlDLEVBQTJEO0FBQ3ZELFFBQUluc0MsUUFBUXVkLFVBQVo7QUFDQSxRQUFJak8sUUFBUTY4QixXQUFSLEdBQXNCbnNDLE1BQU05RyxNQUFoQyxFQUF3QztBQUNwQyxlQUFPaXpDLGFBQVAsRUFBc0I7QUFDbEIsZ0JBQUksQ0FBQ25zQyxNQUFNLEVBQUVzUCxLQUFSLElBQWlCLElBQWxCLE1BQTRCLElBQWhDLEVBQ0ksT0FBTyxLQUFQO0FBQ1A7QUFDRCxlQUFPLElBQVA7QUFDSCxLQU5ELE1BTU87QUFDSCxlQUFPLEtBQVA7QUFDSDtBQUNKOztBQUVELFNBQVM4OEIsVUFBVCxDQUFvQjd1QixVQUFwQixFQUFnQztBQUM1QixRQUFJOHVCLE1BQU0sRUFBVjtBQUNBLFFBQUlseUMsUUFBUW9qQixVQUFaO0FBQ0EsUUFBSS9uQixJQUFJLENBQVI7QUFDQSxRQUFJMEQsU0FBU3FrQixXQUFXcmtCLE1BQXhCOztBQUVBLFdBQU8xRCxJQUFJMEQsTUFBWCxFQUFtQjtBQUNmLFlBQUlpQixNQUFNM0UsQ0FBTixJQUFXLElBQWYsRUFBcUI7QUFDakI2MkMsZ0JBQUl6dUMsSUFBSixDQUFTMHVDLE9BQU9DLFlBQVAsQ0FBb0JweUMsTUFBTTNFLENBQU4sQ0FBcEIsQ0FBVDtBQUNBLGNBQUVBLENBQUY7QUFDQTtBQUNILFNBSkQsTUFJTyxJQUFJMkUsTUFBTTNFLENBQU4sSUFBVyxJQUFmLEVBQXFCO0FBQ3hCO0FBQ0gsU0FGTSxNQUVBLElBQUkyRSxNQUFNM0UsQ0FBTixJQUFXLElBQWYsRUFBcUI7QUFDeEIsZ0JBQUkwMkMsa0JBQWtCL3hDLEtBQWxCLEVBQXlCM0UsQ0FBekIsRUFBNEIsQ0FBNUIsQ0FBSixFQUFvQztBQUNoQyxvQkFBSWczQyxPQUFPLENBQUNyeUMsTUFBTTNFLENBQU4sSUFBVyxJQUFaLEtBQXFCLENBQXJCLEdBQTBCMkUsTUFBTTNFLElBQUksQ0FBVixJQUFlLElBQXBEO0FBQ0Esb0JBQUlnM0MsUUFBUSxJQUFaLEVBQWtCO0FBQ2RILHdCQUFJenVDLElBQUosQ0FBUzB1QyxPQUFPQyxZQUFQLENBQW9CQyxPQUFPLE1BQTNCLENBQVQ7QUFDQWgzQyx5QkFBSyxDQUFMO0FBQ0E7QUFDSDtBQUNKO0FBQ0osU0FUTSxNQVNBLElBQUkyRSxNQUFNM0UsQ0FBTixJQUFXLElBQWYsRUFBcUI7QUFDeEIsZ0JBQUkwMkMsa0JBQWtCL3hDLEtBQWxCLEVBQXlCM0UsQ0FBekIsRUFBNEIsQ0FBNUIsQ0FBSixFQUFvQztBQUNoQyxvQkFBSWczQyxPQUFPLENBQUNyeUMsTUFBTTNFLENBQU4sSUFBVyxHQUFaLEtBQW9CLEVBQXBCLEdBQXlCLENBQUMyRSxNQUFNM0UsSUFBSSxDQUFWLElBQWUsSUFBaEIsS0FBeUIsQ0FBbEQsR0FBc0QyRSxNQUFNM0UsSUFBSSxDQUFWLElBQWUsSUFBaEY7QUFDQSxvQkFBSWczQyxRQUFRLEtBQVIsSUFBaUIsQ0FBQ0EsT0FBTyxNQUFSLE1BQW9CLE1BQXpDLEVBQWlEO0FBQzdDSCx3QkFBSXp1QyxJQUFKLENBQVMwdUMsT0FBT0MsWUFBUCxDQUFvQkMsT0FBTyxNQUEzQixDQUFUO0FBQ0FoM0MseUJBQUssQ0FBTDtBQUNBO0FBQ0g7QUFDSjtBQUNKLFNBVE0sTUFTQSxJQUFJMkUsTUFBTTNFLENBQU4sSUFBVyxJQUFmLEVBQXFCO0FBQ3hCLGdCQUFJMDJDLGtCQUFrQi94QyxLQUFsQixFQUF5QjNFLENBQXpCLEVBQTRCLENBQTVCLENBQUosRUFBb0M7QUFDaEMsb0JBQUlnM0MsUUFBTyxDQUFDcnlDLE1BQU0zRSxDQUFOLElBQVcsR0FBWixLQUFvQixFQUFwQixHQUF5QixDQUFDMkUsTUFBTTNFLElBQUksQ0FBVixJQUFlLElBQWhCLEtBQXlCLEVBQWxELEdBQ0EsQ0FBQzJFLE1BQU0zRSxJQUFJLENBQVYsSUFBZSxJQUFoQixLQUF5QixDQUR6QixHQUM4QjJFLE1BQU0zRSxJQUFJLENBQVYsSUFBZSxJQUR4RDtBQUVBLG9CQUFJZzNDLFFBQU8sT0FBUCxJQUFrQkEsUUFBTyxRQUE3QixFQUF1QztBQUNuQ0EsNkJBQVEsT0FBUjtBQUNBSCx3QkFBSXp1QyxJQUFKLENBQVMwdUMsT0FBT0MsWUFBUCxDQUFxQkMsVUFBUyxFQUFWLEdBQWdCLE1BQXBDLENBQVQ7QUFDQUgsd0JBQUl6dUMsSUFBSixDQUFTMHVDLE9BQU9DLFlBQVAsQ0FBcUJDLFFBQU8sS0FBUixHQUFpQixNQUFyQyxDQUFUO0FBQ0FoM0MseUJBQUssQ0FBTDtBQUNBO0FBQ0g7QUFDSjtBQUNKO0FBQ0Q2MkMsWUFBSXp1QyxJQUFKLENBQVMwdUMsT0FBT0MsWUFBUCxDQUFvQixNQUFwQixDQUFUO0FBQ0EsVUFBRS8yQyxDQUFGO0FBQ0g7O0FBRUQsV0FBTzYyQyxJQUFJNXBDLElBQUosQ0FBUyxFQUFULENBQVA7QUFDSDs7a0JBRWMycEMsVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkZmOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVNSyxXOzs7QUFDSix1QkFBYWxyQyxPQUFiLEVBQXNCO0FBQUE7O0FBQUEsMEhBQ2RBLE9BRGM7O0FBRXBCLFVBQUttckMsT0FBTCxHQUFlLEVBQUUzNkMsTUFBTSxLQUFSLEVBQWY7QUFDQTQ2Qyx1QkFBT0MsSUFBUCxDQUFZQyxRQUFaLENBQXFCLE1BQUtILE9BQTFCLEVBQW1DbnJDLE9BQW5DO0FBQ0EsUUFBTXVyQyxjQUFOO0FBQ0FBLFdBQU83dUMsSUFBUCxDQUFZLFVBQVosRUFBd0IsWUFBTTtBQUM1QjZ1QyxhQUFPQyxPQUFQLEdBQWlCQyxjQUFJN2dCLFlBQUosQ0FBaUIsTUFBS3VnQixPQUF0QixDQUFqQjtBQUNBSSxhQUFPRyxjQUFQLENBQXNCSCxPQUFPQyxPQUE3QjtBQUNELEtBSEQ7QUFMb0I7QUFTckI7Ozs7bUNBQ2VHLEcsRUFBSztBQUNuQixVQUFNSixTQUFTLElBQWY7QUFDQSxVQUFNRixPQUFPRCxtQkFBT0MsSUFBcEI7QUFDQU0sVUFBSTlQLGtCQUFKLENBQXVCMFAsT0FBT3pnQyxLQUE5QjtBQUNBNmdDLFVBQUlqUSxJQUFKO0FBQ0FpUSxVQUFJcFAsSUFBSjtBQUNBLFVBQUksS0FBSzRPLE9BQUwsQ0FBYS9vQyxNQUFqQixFQUF5QjtBQUN2QmlwQyxhQUFLTyxRQUFMLENBQWNMLE9BQU9NLElBQXJCLEVBQTJCLGtCQUEzQjtBQUNBLFlBQU1DLE9BQU9ULEtBQUtVLFNBQUwsQ0FBZSxTQUFmLEVBQTBCLE1BQTFCLEVBQWtDLEVBQWxDLEVBQXNDLGVBQXRDLENBQWI7QUFDQVIsZUFBT1MsUUFBUCxDQUFnQkMsV0FBaEIsQ0FBNEJILElBQTVCO0FBQ0Q7QUFDREgsVUFBSWx2QyxFQUFKLENBQU9ndkMsY0FBSXRnQixNQUFKLENBQVdwZSxLQUFsQixFQUF5QixVQUFDdlksQ0FBRCxFQUFPO0FBQzlCKzJDLGVBQU9qd0MsSUFBUCxDQUFZLE9BQVosRUFBcUIsSUFBSTh2QyxtQkFBT2MsTUFBWCxDQUFrQixPQUFsQixFQUEyQlgsT0FBT25pQyxNQUFQLENBQWM0SixHQUF6QyxDQUFyQjtBQUNELE9BRkQ7O0FBSUF1NEIsYUFBTzd1QyxJQUFQLENBQVksU0FBWixFQUF1QixZQUFNO0FBQzNCaXZDLFlBQUlob0MsT0FBSjtBQUNBNG5DLGVBQU9DLE9BQVAsR0FBaUIsSUFBakI7QUFDRCxPQUhEO0FBSUQ7Ozs4QkFDVXg0QixHLEVBQUs7QUFDZCxVQUFNdTRCLFNBQVMsSUFBZjtBQUNBLFVBQU1ZLFlBQVlaLE9BQU9DLE9BQXpCO0FBQ0FELGFBQU9uaUMsTUFBUCxDQUFjNEosR0FBZCxHQUFvQkEsR0FBcEI7QUFDQSxVQUFJLENBQUN1NEIsT0FBT25pQyxNQUFQLENBQWNoSCxNQUFuQixFQUEyQjtBQUN6QitwQyxrQkFBVUMsa0JBQVYsQ0FBNkJwNUIsR0FBN0IsRUFBa0N1NEIsT0FBT25pQyxNQUFQLENBQWNpakMsVUFBaEQ7QUFDRCxPQUZELE1BRU87QUFDTCxZQUFNQyxnQkFBZ0JiLGNBQUk3Z0IsWUFBSixDQUFpQjJnQixPQUFPSixPQUF4QixDQUF0QjtBQUNBZ0Isa0JBQVV4b0MsT0FBVjtBQUNBNG5DLGVBQU9HLGNBQVAsQ0FBc0JZLGFBQXRCO0FBQ0FmLGVBQU9DLE9BQVAsR0FBaUJjLGFBQWpCO0FBQ0Q7QUFDRjs7OztFQTNDdUJsQixrQjs7QUE2QzFCRixZQUFZbGdCLFdBQVosR0FBMEJ5Z0IsY0FBSXpnQixXQUE5QjtrQkFDZWtnQixXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNqRGYsc0QiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJ4Z3BsYXllclwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ4Z3BsYXllci1mbHYuanNcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wieGdwbGF5ZXItZmx2LmpzXCJdID0gZmFjdG9yeShyb290W1wieGdwbGF5ZXJcIl0pO1xufSkod2luZG93LCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3hncGxheWVyX18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIvKiFcbiAqIEBvdmVydmlldyBlczYtcHJvbWlzZSAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE0IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzIChDb252ZXJzaW9uIHRvIEVTNiBBUEkgYnkgSmFrZSBBcmNoaWJhbGQpXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc3RlZmFucGVubmVyL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIHY0LjIuNSs3ZjJiNTI2ZFxuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5FUzZQcm9taXNlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvYmplY3RPckZ1bmN0aW9uKHgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgeDtcbiAgcmV0dXJuIHggIT09IG51bGwgJiYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuXG5cblxudmFyIF9pc0FycmF5ID0gdm9pZCAwO1xuaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xufSBlbHNlIHtcbiAgX2lzQXJyYXkgPSBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG59XG5cbnZhciBpc0FycmF5ID0gX2lzQXJyYXk7XG5cbnZhciBsZW4gPSAwO1xudmFyIHZlcnR4TmV4dCA9IHZvaWQgMDtcbnZhciBjdXN0b21TY2hlZHVsZXJGbiA9IHZvaWQgMDtcblxudmFyIGFzYXAgPSBmdW5jdGlvbiBhc2FwKGNhbGxiYWNrLCBhcmcpIHtcbiAgcXVldWVbbGVuXSA9IGNhbGxiYWNrO1xuICBxdWV1ZVtsZW4gKyAxXSA9IGFyZztcbiAgbGVuICs9IDI7XG4gIGlmIChsZW4gPT09IDIpIHtcbiAgICAvLyBJZiBsZW4gaXMgMiwgdGhhdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gc2NoZWR1bGUgYW4gYXN5bmMgZmx1c2guXG4gICAgLy8gSWYgYWRkaXRpb25hbCBjYWxsYmFja3MgYXJlIHF1ZXVlZCBiZWZvcmUgdGhlIHF1ZXVlIGlzIGZsdXNoZWQsIHRoZXlcbiAgICAvLyB3aWxsIGJlIHByb2Nlc3NlZCBieSB0aGlzIGZsdXNoIHRoYXQgd2UgYXJlIHNjaGVkdWxpbmcuXG4gICAgaWYgKGN1c3RvbVNjaGVkdWxlckZuKSB7XG4gICAgICBjdXN0b21TY2hlZHVsZXJGbihmbHVzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVkdWxlRmx1c2goKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNjaGVkdWxlcihzY2hlZHVsZUZuKSB7XG4gIGN1c3RvbVNjaGVkdWxlckZuID0gc2NoZWR1bGVGbjtcbn1cblxuZnVuY3Rpb24gc2V0QXNhcChhc2FwRm4pIHtcbiAgYXNhcCA9IGFzYXBGbjtcbn1cblxudmFyIGJyb3dzZXJXaW5kb3cgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbnZhciBicm93c2VyR2xvYmFsID0gYnJvd3NlcldpbmRvdyB8fCB7fTtcbnZhciBCcm93c2VyTXV0YXRpb25PYnNlcnZlciA9IGJyb3dzZXJHbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBicm93c2VyR2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgaXNOb2RlID0gdHlwZW9mIHNlbGYgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiB7fS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG5cbi8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG52YXIgaXNXb3JrZXIgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBub2RlXG5mdW5jdGlvbiB1c2VOZXh0VGljaygpIHtcbiAgLy8gbm9kZSB2ZXJzaW9uIDAuMTAueCBkaXNwbGF5cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgd2hlbiBuZXh0VGljayBpcyB1c2VkIHJlY3Vyc2l2ZWx5XG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY3Vqb2pzL3doZW4vaXNzdWVzLzQxMCBmb3IgZGV0YWlsc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgfTtcbn1cblxuLy8gdmVydHhcbmZ1bmN0aW9uIHVzZVZlcnR4VGltZXIoKSB7XG4gIGlmICh0eXBlb2YgdmVydHhOZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2ZXJ0eE5leHQoZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB1c2VNdXRhdGlvbk9ic2VydmVyKCkge1xuICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBCcm93c2VyTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG4gIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICBvYnNlcnZlci5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIG5vZGUuZGF0YSA9IGl0ZXJhdGlvbnMgPSArK2l0ZXJhdGlvbnMgJSAyO1xuICB9O1xufVxuXG4vLyB3ZWIgd29ya2VyXG5mdW5jdGlvbiB1c2VNZXNzYWdlQ2hhbm5lbCgpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlU2V0VGltZW91dCgpIHtcbiAgLy8gU3RvcmUgc2V0VGltZW91dCByZWZlcmVuY2Ugc28gZXM2LXByb21pc2Ugd2lsbCBiZSB1bmFmZmVjdGVkIGJ5XG4gIC8vIG90aGVyIGNvZGUgbW9kaWZ5aW5nIHNldFRpbWVvdXQgKGxpa2Ugc2lub24udXNlRmFrZVRpbWVycygpKVxuICB2YXIgZ2xvYmFsU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdsb2JhbFNldFRpbWVvdXQoZmx1c2gsIDEpO1xuICB9O1xufVxuXG52YXIgcXVldWUgPSBuZXcgQXJyYXkoMTAwMCk7XG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHZhciBjYWxsYmFjayA9IHF1ZXVlW2ldO1xuICAgIHZhciBhcmcgPSBxdWV1ZVtpICsgMV07XG5cbiAgICBjYWxsYmFjayhhcmcpO1xuXG4gICAgcXVldWVbaV0gPSB1bmRlZmluZWQ7XG4gICAgcXVldWVbaSArIDFdID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gYXR0ZW1wdFZlcnR4KCkge1xuICB0cnkge1xuICAgIHZhciB2ZXJ0eCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCkucmVxdWlyZSgndmVydHgnKTtcbiAgICB2ZXJ0eE5leHQgPSB2ZXJ0eC5ydW5Pbkxvb3AgfHwgdmVydHgucnVuT25Db250ZXh0O1xuICAgIHJldHVybiB1c2VWZXJ0eFRpbWVyKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xuICB9XG59XG5cbnZhciBzY2hlZHVsZUZsdXNoID0gdm9pZCAwO1xuLy8gRGVjaWRlIHdoYXQgYXN5bmMgbWV0aG9kIHRvIHVzZSB0byB0cmlnZ2VyaW5nIHByb2Nlc3Npbmcgb2YgcXVldWVkIGNhbGxiYWNrczpcbmlmIChpc05vZGUpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU5leHRUaWNrKCk7XG59IGVsc2UgaWYgKEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNdXRhdGlvbk9ic2VydmVyKCk7XG59IGVsc2UgaWYgKGlzV29ya2VyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNZXNzYWdlQ2hhbm5lbCgpO1xufSBlbHNlIGlmIChicm93c2VyV2luZG93ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IGF0dGVtcHRWZXJ0eCgpO1xufSBlbHNlIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZVNldFRpbWVvdXQoKTtcbn1cblxuZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgcGFyZW50ID0gdGhpcztcblxuICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihub29wKTtcblxuICBpZiAoY2hpbGRbUFJPTUlTRV9JRF0gPT09IHVuZGVmaW5lZCkge1xuICAgIG1ha2VQcm9taXNlKGNoaWxkKTtcbiAgfVxuXG4gIHZhciBfc3RhdGUgPSBwYXJlbnQuX3N0YXRlO1xuXG5cbiAgaWYgKF9zdGF0ZSkge1xuICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1tfc3RhdGUgLSAxXTtcbiAgICBhc2FwKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpbnZva2VDYWxsYmFjayhfc3RhdGUsIGNoaWxkLCBjYWxsYmFjaywgcGFyZW50Ll9yZXN1bHQpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbik7XG4gIH1cblxuICByZXR1cm4gY2hpbGQ7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZXNvbHZlYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIHJlc29sdmVkIHdpdGggdGhlXG4gIHBhc3NlZCBgdmFsdWVgLiBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVzb2x2ZSgxKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoMSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZXNvbHZlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHZhbHVlIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgZnVsZmlsbGVkIHdpdGggdGhlIGdpdmVuXG4gIGB2YWx1ZWBcbiovXG5mdW5jdGlvbiByZXNvbHZlJDEob2JqZWN0KSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICByZXNvbHZlKHByb21pc2UsIG9iamVjdCk7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgUFJPTUlTRV9JRCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyKTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBQRU5ESU5HID0gdm9pZCAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xuXG52YXIgVFJZX0NBVENIX0VSUk9SID0geyBlcnJvcjogbnVsbCB9O1xuXG5mdW5jdGlvbiBzZWxmRnVsZmlsbG1lbnQoKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKTtcbn1cblxuZnVuY3Rpb24gY2Fubm90UmV0dXJuT3duKCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpO1xufVxuXG5mdW5jdGlvbiBnZXRUaGVuKHByb21pc2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIFRSWV9DQVRDSF9FUlJPUi5lcnJvciA9IGVycm9yO1xuICAgIHJldHVybiBUUllfQ0FUQ0hfRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5VGhlbih0aGVuJCQxLCB2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7XG4gIHRyeSB7XG4gICAgdGhlbiQkMS5jYWxsKHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlLCB0aGVuJCQxKSB7XG4gIGFzYXAoZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICB2YXIgc2VhbGVkID0gZmFsc2U7XG4gICAgdmFyIGVycm9yID0gdHJ5VGhlbih0aGVuJCQxLCB0aGVuYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICBpZiAodGhlbmFibGUgIT09IHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuXG4gICAgICByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9LCAnU2V0dGxlOiAnICsgKHByb21pc2UuX2xhYmVsIHx8ICcgdW5rbm93biBwcm9taXNlJykpO1xuXG4gICAgaWYgKCFzZWFsZWQgJiYgZXJyb3IpIHtcbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICByZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgIH1cbiAgfSwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlKSB7XG4gIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IEZVTEZJTExFRCkge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSBpZiAodGhlbmFibGUuX3N0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgIHJlamVjdChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUodGhlbmFibGUsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkMSkge1xuICBpZiAobWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3RvciA9PT0gcHJvbWlzZS5jb25zdHJ1Y3RvciAmJiB0aGVuJCQxID09PSB0aGVuICYmIG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IucmVzb2x2ZSA9PT0gcmVzb2x2ZSQxKSB7XG4gICAgaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoZW4kJDEgPT09IFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgcmVqZWN0KHByb21pc2UsIFRSWV9DQVRDSF9FUlJPUi5lcnJvcik7XG4gICAgICBUUllfQ0FUQ0hfRVJST1IuZXJyb3IgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAodGhlbiQkMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0aGVuJCQxKSkge1xuICAgICAgaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlKHByb21pc2UsIHZhbHVlKSB7XG4gIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgIHJlamVjdChwcm9taXNlLCBzZWxmRnVsZmlsbG1lbnQoKSk7XG4gIH0gZWxzZSBpZiAob2JqZWN0T3JGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIHZhbHVlLCBnZXRUaGVuKHZhbHVlKSk7XG4gIH0gZWxzZSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaFJlamVjdGlvbihwcm9taXNlKSB7XG4gIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgcHJvbWlzZS5fb25lcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICB9XG5cbiAgcHVibGlzaChwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gZnVsZmlsbChwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBGVUxGSUxMRUQ7XG5cbiAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzYXAocHVibGlzaCwgcHJvbWlzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvbWlzZS5fc3RhdGUgPSBSRUpFQ1RFRDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gcmVhc29uO1xuXG4gIGFzYXAocHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX3N1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgdmFyIGxlbmd0aCA9IF9zdWJzY3JpYmVycy5sZW5ndGg7XG5cblxuICBwYXJlbnQuX29uZXJyb3IgPSBudWxsO1xuXG4gIF9zdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBGVUxGSUxMRURdID0gb25GdWxmaWxsbWVudDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIFJFSkVDVEVEXSA9IG9uUmVqZWN0aW9uO1xuXG4gIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgIGFzYXAocHVibGlzaCwgcGFyZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoKHByb21pc2UpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gIHZhciBzZXR0bGVkID0gcHJvbWlzZS5fc3RhdGU7XG5cbiAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGlsZCA9IHZvaWQgMCxcbiAgICAgIGNhbGxiYWNrID0gdm9pZCAwLFxuICAgICAgZGV0YWlsID0gcHJvbWlzZS5fcmVzdWx0O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldO1xuICAgIGNhbGxiYWNrID0gc3Vic2NyaWJlcnNbaSArIHNldHRsZWRdO1xuXG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfVxuICB9XG5cbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbn1cblxuZnVuY3Rpb24gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCkge1xuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjayhkZXRhaWwpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgVFJZX0NBVENIX0VSUk9SLmVycm9yID0gZTtcbiAgICByZXR1cm4gVFJZX0NBVENIX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIHByb21pc2UsIGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdmFyIGhhc0NhbGxiYWNrID0gaXNGdW5jdGlvbihjYWxsYmFjayksXG4gICAgICB2YWx1ZSA9IHZvaWQgMCxcbiAgICAgIGVycm9yID0gdm9pZCAwLFxuICAgICAgc3VjY2VlZGVkID0gdm9pZCAwLFxuICAgICAgZmFpbGVkID0gdm9pZCAwO1xuXG4gIGlmIChoYXNDYWxsYmFjaykge1xuICAgIHZhbHVlID0gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCk7XG5cbiAgICBpZiAodmFsdWUgPT09IFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgIGVycm9yID0gdmFsdWUuZXJyb3I7XG4gICAgICB2YWx1ZS5lcnJvciA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICByZWplY3QocHJvbWlzZSwgY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgLy8gbm9vcFxuICB9IGVsc2UgaWYgKGhhc0NhbGxiYWNrICYmIHN1Y2NlZWRlZCkge1xuICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGZhaWxlZCkge1xuICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gRlVMRklMTEVEKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gUkVKRUNURUQpIHtcbiAgICByZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVQcm9taXNlKHByb21pc2UsIHJlc29sdmVyKSB7XG4gIHRyeSB7XG4gICAgcmVzb2x2ZXIoZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UodmFsdWUpIHtcbiAgICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIHJlamVjdFByb21pc2UocmVhc29uKSB7XG4gICAgICByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlamVjdChwcm9taXNlLCBlKTtcbiAgfVxufVxuXG52YXIgaWQgPSAwO1xuZnVuY3Rpb24gbmV4dElkKCkge1xuICByZXR1cm4gaWQrKztcbn1cblxuZnVuY3Rpb24gbWFrZVByb21pc2UocHJvbWlzZSkge1xuICBwcm9taXNlW1BST01JU0VfSURdID0gaWQrKztcbiAgcHJvbWlzZS5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMgPSBbXTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGlvbkVycm9yKCkge1xuICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbn1cblxudmFyIEVudW1lcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEVudW1lcmF0b3IoQ29uc3RydWN0b3IsIGlucHV0KSB7XG4gICAgdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcblxuICAgIGlmICghdGhpcy5wcm9taXNlW1BST01JU0VfSURdKSB7XG4gICAgICBtYWtlUHJvbWlzZSh0aGlzLnByb21pc2UpO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgICB0aGlzLl9yZW1haW5pbmcgPSBpbnB1dC5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX3Jlc3VsdCA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG5cbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDtcbiAgICAgICAgdGhpcy5fZW51bWVyYXRlKGlucHV0KTtcbiAgICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdCh0aGlzLnByb21pc2UsIHZhbGlkYXRpb25FcnJvcigpKTtcbiAgICB9XG4gIH1cblxuICBFbnVtZXJhdG9yLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24gX2VudW1lcmF0ZShpbnB1dCkge1xuICAgIGZvciAodmFyIGkgPSAwOyB0aGlzLl9zdGF0ZSA9PT0gUEVORElORyAmJiBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX2VhY2hFbnRyeShpbnB1dFtpXSwgaSk7XG4gICAgfVxuICB9O1xuXG4gIEVudW1lcmF0b3IucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbiBfZWFjaEVudHJ5KGVudHJ5LCBpKSB7XG4gICAgdmFyIGMgPSB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yO1xuICAgIHZhciByZXNvbHZlJCQxID0gYy5yZXNvbHZlO1xuXG5cbiAgICBpZiAocmVzb2x2ZSQkMSA9PT0gcmVzb2x2ZSQxKSB7XG4gICAgICB2YXIgX3RoZW4gPSBnZXRUaGVuKGVudHJ5KTtcblxuICAgICAgaWYgKF90aGVuID09PSB0aGVuICYmIGVudHJ5Ll9zdGF0ZSAhPT0gUEVORElORykge1xuICAgICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuICAgICAgICB0aGlzLl9yZXN1bHRbaV0gPSBlbnRyeTtcbiAgICAgIH0gZWxzZSBpZiAoYyA9PT0gUHJvbWlzZSQxKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IGMobm9vcCk7XG4gICAgICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgZW50cnksIF90aGVuKTtcbiAgICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KHByb21pc2UsIGkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KG5ldyBjKGZ1bmN0aW9uIChyZXNvbHZlJCQxKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUkJDEoZW50cnkpO1xuICAgICAgICB9KSwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChyZXNvbHZlJCQxKGVudHJ5KSwgaSk7XG4gICAgfVxuICB9O1xuXG4gIEVudW1lcmF0b3IucHJvdG90eXBlLl9zZXR0bGVkQXQgPSBmdW5jdGlvbiBfc2V0dGxlZEF0KHN0YXRlLCBpLCB2YWx1ZSkge1xuICAgIHZhciBwcm9taXNlID0gdGhpcy5wcm9taXNlO1xuXG5cbiAgICBpZiAocHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuXG4gICAgICBpZiAoc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgICAgIHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9yZXN1bHRbaV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgfVxuICB9O1xuXG4gIEVudW1lcmF0b3IucHJvdG90eXBlLl93aWxsU2V0dGxlQXQgPSBmdW5jdGlvbiBfd2lsbFNldHRsZUF0KHByb21pc2UsIGkpIHtcbiAgICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG5cbiAgICBzdWJzY3JpYmUocHJvbWlzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoRlVMRklMTEVELCBpLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChSRUpFQ1RFRCwgaSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gRW51bWVyYXRvcjtcbn0oKTtcblxuLyoqXG4gIGBQcm9taXNlLmFsbGAgYWNjZXB0cyBhbiBhcnJheSBvZiBwcm9taXNlcywgYW5kIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaFxuICBpcyBmdWxmaWxsZWQgd2l0aCBhbiBhcnJheSBvZiBmdWxmaWxsbWVudCB2YWx1ZXMgZm9yIHRoZSBwYXNzZWQgcHJvbWlzZXMsIG9yXG4gIHJlamVjdGVkIHdpdGggdGhlIHJlYXNvbiBvZiB0aGUgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gYmUgcmVqZWN0ZWQuIEl0IGNhc3RzIGFsbFxuICBlbGVtZW50cyBvZiB0aGUgcGFzc2VkIGl0ZXJhYmxlIHRvIHByb21pc2VzIGFzIGl0IHJ1bnMgdGhpcyBhbGdvcml0aG0uXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlc29sdmUoMik7XG4gIGxldCBwcm9taXNlMyA9IHJlc29sdmUoMyk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBUaGUgYXJyYXkgaGVyZSB3b3VsZCBiZSBbIDEsIDIsIDMgXTtcbiAgfSk7XG4gIGBgYFxuXG4gIElmIGFueSBvZiB0aGUgYHByb21pc2VzYCBnaXZlbiB0byBgYWxsYCBhcmUgcmVqZWN0ZWQsIHRoZSBmaXJzdCBwcm9taXNlXG4gIHRoYXQgaXMgcmVqZWN0ZWQgd2lsbCBiZSBnaXZlbiBhcyBhbiBhcmd1bWVudCB0byB0aGUgcmV0dXJuZWQgcHJvbWlzZXMnc1xuICByZWplY3Rpb24gaGFuZGxlci4gRm9yIGV4YW1wbGU6XG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlamVjdChuZXcgRXJyb3IoXCIyXCIpKTtcbiAgbGV0IHByb21pc2UzID0gcmVqZWN0KG5ldyBFcnJvcihcIjNcIikpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnMgYmVjYXVzZSB0aGVyZSBhcmUgcmVqZWN0ZWQgcHJvbWlzZXMhXG4gIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgLy8gZXJyb3IubWVzc2FnZSA9PT0gXCIyXCJcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgYWxsXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gZW50cmllcyBhcnJheSBvZiBwcm9taXNlc1xuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIGBwcm9taXNlc2AgaGF2ZSBiZWVuXG4gIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQgaWYgYW55IG9mIHRoZW0gYmVjb21lIHJlamVjdGVkLlxuICBAc3RhdGljXG4qL1xuZnVuY3Rpb24gYWxsKGVudHJpZXMpIHtcbiAgcmV0dXJuIG5ldyBFbnVtZXJhdG9yKHRoaXMsIGVudHJpZXMpLnByb21pc2U7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yYWNlYCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2ggaXMgc2V0dGxlZCBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlXG4gIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIHNldHRsZS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMicpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIHJlc3VsdCA9PT0gJ3Byb21pc2UgMicgYmVjYXVzZSBpdCB3YXMgcmVzb2x2ZWQgYmVmb3JlIHByb21pc2UxXG4gICAgLy8gd2FzIHJlc29sdmVkLlxuICB9KTtcbiAgYGBgXG5cbiAgYFByb21pc2UucmFjZWAgaXMgZGV0ZXJtaW5pc3RpYyBpbiB0aGF0IG9ubHkgdGhlIHN0YXRlIG9mIHRoZSBmaXJzdFxuICBzZXR0bGVkIHByb21pc2UgbWF0dGVycy4gRm9yIGV4YW1wbGUsIGV2ZW4gaWYgb3RoZXIgcHJvbWlzZXMgZ2l2ZW4gdG8gdGhlXG4gIGBwcm9taXNlc2AgYXJyYXkgYXJndW1lbnQgYXJlIHJlc29sdmVkLCBidXQgdGhlIGZpcnN0IHNldHRsZWQgcHJvbWlzZSBoYXNcbiAgYmVjb21lIHJlamVjdGVkIGJlZm9yZSB0aGUgb3RoZXIgcHJvbWlzZXMgYmVjYW1lIGZ1bGZpbGxlZCwgdGhlIHJldHVybmVkXG4gIHByb21pc2Ugd2lsbCBiZWNvbWUgcmVqZWN0ZWQ6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcigncHJvbWlzZSAyJykpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgcHJvbWlzZSAyIGJlY2FtZSByZWplY3RlZCBiZWZvcmVcbiAgICAvLyBwcm9taXNlIDEgYmVjYW1lIGZ1bGZpbGxlZFxuICB9KTtcbiAgYGBgXG5cbiAgQW4gZXhhbXBsZSByZWFsLXdvcmxkIHVzZSBjYXNlIGlzIGltcGxlbWVudGluZyB0aW1lb3V0czpcblxuICBgYGBqYXZhc2NyaXB0XG4gIFByb21pc2UucmFjZShbYWpheCgnZm9vLmpzb24nKSwgdGltZW91dCg1MDAwKV0pXG4gIGBgYFxuXG4gIEBtZXRob2QgcmFjZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IHByb21pc2VzIGFycmF5IG9mIHByb21pc2VzIHRvIG9ic2VydmVcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2Ugd2hpY2ggc2V0dGxlcyBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlIGZpcnN0IHBhc3NlZFxuICBwcm9taXNlIHRvIHNldHRsZS5cbiovXG5mdW5jdGlvbiByYWNlKGVudHJpZXMpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAoIWlzQXJyYXkoZW50cmllcykpIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLicpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBsZW5ndGggPSBlbnRyaWVzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgQ29uc3RydWN0b3IucmVzb2x2ZShlbnRyaWVzW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlamVjdGAgcmV0dXJucyBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgcGFzc2VkIGByZWFzb25gLlxuICBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZWplY3RcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gcmVhc29uIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBnaXZlbiBgcmVhc29uYC5cbiovXG5mdW5jdGlvbiByZWplY3QkMShyZWFzb24pIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG4gIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gbmVlZHNSZXNvbHZlcigpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhIHJlc29sdmVyIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xufVxuXG5mdW5jdGlvbiBuZWVkc05ldygpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Byb21pc2UnOiBQbGVhc2UgdXNlIHRoZSAnbmV3JyBvcGVyYXRvciwgdGhpcyBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbn1cblxuLyoqXG4gIFByb21pc2Ugb2JqZWN0cyByZXByZXNlbnQgdGhlIGV2ZW50dWFsIHJlc3VsdCBvZiBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uLiBUaGVcbiAgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCwgd2hpY2hcbiAgcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGUgcmVhc29uXG4gIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuXG4gIFRlcm1pbm9sb2d5XG4gIC0tLS0tLS0tLS0tXG5cbiAgLSBgcHJvbWlzZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHdpdGggYSBgdGhlbmAgbWV0aG9kIHdob3NlIGJlaGF2aW9yIGNvbmZvcm1zIHRvIHRoaXMgc3BlY2lmaWNhdGlvbi5cbiAgLSBgdGhlbmFibGVgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB0aGF0IGRlZmluZXMgYSBgdGhlbmAgbWV0aG9kLlxuICAtIGB2YWx1ZWAgaXMgYW55IGxlZ2FsIEphdmFTY3JpcHQgdmFsdWUgKGluY2x1ZGluZyB1bmRlZmluZWQsIGEgdGhlbmFibGUsIG9yIGEgcHJvbWlzZSkuXG4gIC0gYGV4Y2VwdGlvbmAgaXMgYSB2YWx1ZSB0aGF0IGlzIHRocm93biB1c2luZyB0aGUgdGhyb3cgc3RhdGVtZW50LlxuICAtIGByZWFzb25gIGlzIGEgdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2h5IGEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQuXG4gIC0gYHNldHRsZWRgIHRoZSBmaW5hbCByZXN0aW5nIHN0YXRlIG9mIGEgcHJvbWlzZSwgZnVsZmlsbGVkIG9yIHJlamVjdGVkLlxuXG4gIEEgcHJvbWlzZSBjYW4gYmUgaW4gb25lIG9mIHRocmVlIHN0YXRlczogcGVuZGluZywgZnVsZmlsbGVkLCBvciByZWplY3RlZC5cblxuICBQcm9taXNlcyB0aGF0IGFyZSBmdWxmaWxsZWQgaGF2ZSBhIGZ1bGZpbGxtZW50IHZhbHVlIGFuZCBhcmUgaW4gdGhlIGZ1bGZpbGxlZFxuICBzdGF0ZS4gIFByb21pc2VzIHRoYXQgYXJlIHJlamVjdGVkIGhhdmUgYSByZWplY3Rpb24gcmVhc29uIGFuZCBhcmUgaW4gdGhlXG4gIHJlamVjdGVkIHN0YXRlLiAgQSBmdWxmaWxsbWVudCB2YWx1ZSBpcyBuZXZlciBhIHRoZW5hYmxlLlxuXG4gIFByb21pc2VzIGNhbiBhbHNvIGJlIHNhaWQgdG8gKnJlc29sdmUqIGEgdmFsdWUuICBJZiB0aGlzIHZhbHVlIGlzIGFsc28gYVxuICBwcm9taXNlLCB0aGVuIHRoZSBvcmlnaW5hbCBwcm9taXNlJ3Mgc2V0dGxlZCBzdGF0ZSB3aWxsIG1hdGNoIHRoZSB2YWx1ZSdzXG4gIHNldHRsZWQgc3RhdGUuICBTbyBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IHJlamVjdHMgd2lsbFxuICBpdHNlbGYgcmVqZWN0LCBhbmQgYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCBmdWxmaWxscyB3aWxsXG4gIGl0c2VsZiBmdWxmaWxsLlxuXG5cbiAgQmFzaWMgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLVxuXG4gIGBgYGpzXG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gb24gc3VjY2Vzc1xuICAgIHJlc29sdmUodmFsdWUpO1xuXG4gICAgLy8gb24gZmFpbHVyZVxuICAgIHJlamVjdChyZWFzb24pO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIEFkdmFuY2VkIFVzYWdlOlxuICAtLS0tLS0tLS0tLS0tLS1cblxuICBQcm9taXNlcyBzaGluZSB3aGVuIGFic3RyYWN0aW5nIGF3YXkgYXN5bmNocm9ub3VzIGludGVyYWN0aW9ucyBzdWNoIGFzXG4gIGBYTUxIdHRwUmVxdWVzdGBzLlxuXG4gIGBgYGpzXG4gIGZ1bmN0aW9uIGdldEpTT04odXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGhhbmRsZXI7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICB4aHIuc2VuZCgpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkRPTkUpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignZ2V0SlNPTjogYCcgKyB1cmwgKyAnYCBmYWlsZWQgd2l0aCBzdGF0dXM6IFsnICsgdGhpcy5zdGF0dXMgKyAnXScpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXRKU09OKCcvcG9zdHMuanNvbicpLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgVW5saWtlIGNhbGxiYWNrcywgcHJvbWlzZXMgYXJlIGdyZWF0IGNvbXBvc2FibGUgcHJpbWl0aXZlcy5cblxuICBgYGBqc1xuICBQcm9taXNlLmFsbChbXG4gICAgZ2V0SlNPTignL3Bvc3RzJyksXG4gICAgZ2V0SlNPTignL2NvbW1lbnRzJylcbiAgXSkudGhlbihmdW5jdGlvbih2YWx1ZXMpe1xuICAgIHZhbHVlc1swXSAvLyA9PiBwb3N0c0pTT05cbiAgICB2YWx1ZXNbMV0gLy8gPT4gY29tbWVudHNKU09OXG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9KTtcbiAgYGBgXG5cbiAgQGNsYXNzIFByb21pc2VcbiAgQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZXJcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAY29uc3RydWN0b3JcbiovXG5cbnZhciBQcm9taXNlJDEgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHtcbiAgICB0aGlzW1BST01JU0VfSURdID0gbmV4dElkKCk7XG4gICAgdGhpcy5fcmVzdWx0ID0gdGhpcy5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcblxuICAgIGlmIChub29wICE9PSByZXNvbHZlcikge1xuICAgICAgdHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nICYmIG5lZWRzUmVzb2x2ZXIoKTtcbiAgICAgIHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlID8gaW5pdGlhbGl6ZVByb21pc2UodGhpcywgcmVzb2x2ZXIpIDogbmVlZHNOZXcoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgVGhlIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsXG4gIHdoaWNoIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlXG4gIHJlYXNvbiB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbih1c2VyKXtcbiAgICAvLyB1c2VyIGlzIGF2YWlsYWJsZVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHVzZXIgaXMgdW5hdmFpbGFibGUsIGFuZCB5b3UgYXJlIGdpdmVuIHRoZSByZWFzb24gd2h5XG4gIH0pO1xuICBgYGBcbiAgIENoYWluaW5nXG4gIC0tLS0tLS0tXG4gICBUaGUgcmV0dXJuIHZhbHVlIG9mIGB0aGVuYCBpcyBpdHNlbGYgYSBwcm9taXNlLiAgVGhpcyBzZWNvbmQsICdkb3duc3RyZWFtJ1xuICBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmlyc3QgcHJvbWlzZSdzIGZ1bGZpbGxtZW50XG4gIG9yIHJlamVjdGlvbiBoYW5kbGVyLCBvciByZWplY3RlZCBpZiB0aGUgaGFuZGxlciB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgYGBganNcbiAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgcmV0dXJuIHVzZXIubmFtZTtcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHJldHVybiAnZGVmYXVsdCBuYW1lJztcbiAgfSkudGhlbihmdW5jdGlvbiAodXNlck5hbWUpIHtcbiAgICAvLyBJZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHVzZXJOYW1lYCB3aWxsIGJlIHRoZSB1c2VyJ3MgbmFtZSwgb3RoZXJ3aXNlIGl0XG4gICAgLy8gd2lsbCBiZSBgJ2RlZmF1bHQgbmFtZSdgXG4gIH0pO1xuICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScpO1xuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jyk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gbmV2ZXIgcmVhY2hlZFxuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgLy8gaWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGByZWFzb25gIHdpbGwgYmUgJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jy5cbiAgICAvLyBJZiBgZmluZFVzZXJgIHJlamVjdGVkLCBgcmVhc29uYCB3aWxsIGJlICdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jy5cbiAgfSk7XG4gIGBgYFxuICBJZiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIGRvZXMgbm90IHNwZWNpZnkgYSByZWplY3Rpb24gaGFuZGxlciwgcmVqZWN0aW9uIHJlYXNvbnMgd2lsbCBiZSBwcm9wYWdhdGVkIGZ1cnRoZXIgZG93bnN0cmVhbS5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHRocm93IG5ldyBQZWRhZ29naWNhbEV4Y2VwdGlvbignVXBzdHJlYW0gZXJyb3InKTtcbiAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyBuZXZlciByZWFjaGVkXG4gIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gbmV2ZXIgcmVhY2hlZFxuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgLy8gVGhlIGBQZWRnYWdvY2lhbEV4Y2VwdGlvbmAgaXMgcHJvcGFnYXRlZCBhbGwgdGhlIHdheSBkb3duIHRvIGhlcmVcbiAgfSk7XG4gIGBgYFxuICAgQXNzaW1pbGF0aW9uXG4gIC0tLS0tLS0tLS0tLVxuICAgU29tZXRpbWVzIHRoZSB2YWx1ZSB5b3Ugd2FudCB0byBwcm9wYWdhdGUgdG8gYSBkb3duc3RyZWFtIHByb21pc2UgY2FuIG9ubHkgYmVcbiAgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5LiBUaGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXR1cm5pbmcgYSBwcm9taXNlIGluIHRoZVxuICBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gaGFuZGxlci4gVGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIHRoZW4gYmUgcGVuZGluZ1xuICB1bnRpbCB0aGUgcmV0dXJuZWQgcHJvbWlzZSBpcyBzZXR0bGVkLiBUaGlzIGlzIGNhbGxlZCAqYXNzaW1pbGF0aW9uKi5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAvLyBUaGUgdXNlcidzIGNvbW1lbnRzIGFyZSBub3cgYXZhaWxhYmxlXG4gIH0pO1xuICBgYGBcbiAgIElmIHRoZSBhc3NpbWxpYXRlZCBwcm9taXNlIHJlamVjdHMsIHRoZW4gdGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIGFsc28gcmVqZWN0LlxuICAgYGBganNcbiAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgZnVsZmlsbHMsIHdlJ2xsIGhhdmUgdGhlIHZhbHVlIGhlcmVcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgcmVqZWN0cywgd2UnbGwgaGF2ZSB0aGUgcmVhc29uIGhlcmVcbiAgfSk7XG4gIGBgYFxuICAgU2ltcGxlIEV4YW1wbGVcbiAgLS0tLS0tLS0tLS0tLS1cbiAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgIGBgYGphdmFzY3JpcHRcbiAgbGV0IHJlc3VsdDtcbiAgIHRyeSB7XG4gICAgcmVzdWx0ID0gZmluZFJlc3VsdCgpO1xuICAgIC8vIHN1Y2Nlc3NcbiAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAvLyBmYWlsdXJlXG4gIH1cbiAgYGBgXG4gICBFcnJiYWNrIEV4YW1wbGVcbiAgIGBgYGpzXG4gIGZpbmRSZXN1bHQoZnVuY3Rpb24ocmVzdWx0LCBlcnIpe1xuICAgIGlmIChlcnIpIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH1cbiAgfSk7XG4gIGBgYFxuICAgUHJvbWlzZSBFeGFtcGxlO1xuICAgYGBgamF2YXNjcmlwdFxuICBmaW5kUmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIHN1Y2Nlc3NcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyBmYWlsdXJlXG4gIH0pO1xuICBgYGBcbiAgIEFkdmFuY2VkIEV4YW1wbGVcbiAgLS0tLS0tLS0tLS0tLS1cbiAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgIGBgYGphdmFzY3JpcHRcbiAgbGV0IGF1dGhvciwgYm9va3M7XG4gICB0cnkge1xuICAgIGF1dGhvciA9IGZpbmRBdXRob3IoKTtcbiAgICBib29rcyAgPSBmaW5kQm9va3NCeUF1dGhvcihhdXRob3IpO1xuICAgIC8vIHN1Y2Nlc3NcbiAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAvLyBmYWlsdXJlXG4gIH1cbiAgYGBgXG4gICBFcnJiYWNrIEV4YW1wbGVcbiAgIGBgYGpzXG4gICBmdW5jdGlvbiBmb3VuZEJvb2tzKGJvb2tzKSB7XG4gICB9XG4gICBmdW5jdGlvbiBmYWlsdXJlKHJlYXNvbikge1xuICAgfVxuICAgZmluZEF1dGhvcihmdW5jdGlvbihhdXRob3IsIGVycil7XG4gICAgaWYgKGVycikge1xuICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICBmaW5kQm9vb2tzQnlBdXRob3IoYXV0aG9yLCBmdW5jdGlvbihib29rcywgZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3VuZEJvb2tzKGJvb2tzKTtcbiAgICAgICAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgICAgICAgIGZhaWx1cmUocmVhc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICB9XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfVxuICB9KTtcbiAgYGBgXG4gICBQcm9taXNlIEV4YW1wbGU7XG4gICBgYGBqYXZhc2NyaXB0XG4gIGZpbmRBdXRob3IoKS5cbiAgICB0aGVuKGZpbmRCb29rc0J5QXV0aG9yKS5cbiAgICB0aGVuKGZ1bmN0aW9uKGJvb2tzKXtcbiAgICAgIC8vIGZvdW5kIGJvb2tzXG4gIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgfSk7XG4gIGBgYFxuICAgQG1ldGhvZCB0aGVuXG4gIEBwYXJhbSB7RnVuY3Rpb259IG9uRnVsZmlsbGVkXG4gIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0ZWRcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuXG4gIC8qKlxuICBgY2F0Y2hgIGlzIHNpbXBseSBzdWdhciBmb3IgYHRoZW4odW5kZWZpbmVkLCBvblJlamVjdGlvbilgIHdoaWNoIG1ha2VzIGl0IHRoZSBzYW1lXG4gIGFzIHRoZSBjYXRjaCBibG9jayBvZiBhIHRyeS9jYXRjaCBzdGF0ZW1lbnQuXG4gIGBgYGpzXG4gIGZ1bmN0aW9uIGZpbmRBdXRob3IoKXtcbiAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZG4ndCBmaW5kIHRoYXQgYXV0aG9yJyk7XG4gIH1cbiAgLy8gc3luY2hyb25vdXNcbiAgdHJ5IHtcbiAgZmluZEF1dGhvcigpO1xuICB9IGNhdGNoKHJlYXNvbikge1xuICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICB9XG4gIC8vIGFzeW5jIHdpdGggcHJvbWlzZXNcbiAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gIH0pO1xuICBgYGBcbiAgQG1ldGhvZCBjYXRjaFxuICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGlvblxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG5cblxuICBQcm9taXNlLnByb3RvdHlwZS5jYXRjaCA9IGZ1bmN0aW9uIF9jYXRjaChvblJlamVjdGlvbikge1xuICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3Rpb24pO1xuICB9O1xuXG4gIC8qKlxuICAgIGBmaW5hbGx5YCB3aWxsIGJlIGludm9rZWQgcmVnYXJkbGVzcyBvZiB0aGUgcHJvbWlzZSdzIGZhdGUganVzdCBhcyBuYXRpdmVcbiAgICB0cnkvY2F0Y2gvZmluYWxseSBiZWhhdmVzXG4gIFxuICAgIFN5bmNocm9ub3VzIGV4YW1wbGU6XG4gIFxuICAgIGBgYGpzXG4gICAgZmluZEF1dGhvcigpIHtcbiAgICAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC41KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBBdXRob3IoKTtcbiAgICB9XG4gIFxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZmluZEF1dGhvcigpOyAvLyBzdWNjZWVkIG9yIGZhaWxcbiAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmluZE90aGVyQXV0aGVyKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIGFsd2F5cyBydW5zXG4gICAgICAvLyBkb2Vzbid0IGFmZmVjdCB0aGUgcmV0dXJuIHZhbHVlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBBc3luY2hyb25vdXMgZXhhbXBsZTpcbiAgXG4gICAgYGBganNcbiAgICBmaW5kQXV0aG9yKCkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIHJldHVybiBmaW5kT3RoZXJBdXRoZXIoKTtcbiAgICB9KS5maW5hbGx5KGZ1bmN0aW9uKCl7XG4gICAgICAvLyBhdXRob3Igd2FzIGVpdGhlciBmb3VuZCwgb3Igbm90XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEBtZXRob2QgZmluYWxseVxuICAgIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cblxuXG4gIFByb21pc2UucHJvdG90eXBlLmZpbmFsbHkgPSBmdW5jdGlvbiBfZmluYWxseShjYWxsYmFjaykge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICB2YXIgY29uc3RydWN0b3IgPSBwcm9taXNlLmNvbnN0cnVjdG9yO1xuXG4gICAgaWYgKGlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2UudGhlbihjYWxsYmFjaywgY2FsbGJhY2spO1xuICB9O1xuXG4gIHJldHVybiBQcm9taXNlO1xufSgpO1xuXG5Qcm9taXNlJDEucHJvdG90eXBlLnRoZW4gPSB0aGVuO1xuUHJvbWlzZSQxLmFsbCA9IGFsbDtcblByb21pc2UkMS5yYWNlID0gcmFjZTtcblByb21pc2UkMS5yZXNvbHZlID0gcmVzb2x2ZSQxO1xuUHJvbWlzZSQxLnJlamVjdCA9IHJlamVjdCQxO1xuUHJvbWlzZSQxLl9zZXRTY2hlZHVsZXIgPSBzZXRTY2hlZHVsZXI7XG5Qcm9taXNlJDEuX3NldEFzYXAgPSBzZXRBc2FwO1xuUHJvbWlzZSQxLl9hc2FwID0gYXNhcDtcblxuLypnbG9iYWwgc2VsZiovXG5mdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgdmFyIGxvY2FsID0gdm9pZCAwO1xuXG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIGxvY2FsID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIGxvY2FsID0gc2VsZjtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgbG9jYWwgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncG9seWZpbGwgZmFpbGVkIGJlY2F1c2UgZ2xvYmFsIG9iamVjdCBpcyB1bmF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIFAgPSBsb2NhbC5Qcm9taXNlO1xuXG4gIGlmIChQKSB7XG4gICAgdmFyIHByb21pc2VUb1N0cmluZyA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2VUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChQLnJlc29sdmUoKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gc2lsZW50bHkgaWdub3JlZFxuICAgIH1cblxuICAgIGlmIChwcm9taXNlVG9TdHJpbmcgPT09ICdbb2JqZWN0IFByb21pc2VdJyAmJiAhUC5jYXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgbG9jYWwuUHJvbWlzZSA9IFByb21pc2UkMTtcbn1cblxuLy8gU3RyYW5nZSBjb21wYXQuLlxuUHJvbWlzZSQxLnBvbHlmaWxsID0gcG9seWZpbGw7XG5Qcm9taXNlJDEuUHJvbWlzZSA9IFByb21pc2UkMTtcblxucmV0dXJuIFByb21pc2UkMTtcblxufSkpKTtcblxuXG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzNi1wcm9taXNlLm1hcFxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4gKCcgKyBlciArICcpJyk7XG4gICAgICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG07XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlXG4gICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXG4gIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICB0aGlzLm9uKHR5cGUsIGcpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXR1cm4gdGhpcztcblxuICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgcG9zaXRpb24gPSAtMTtcblxuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcbiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAvLyBMSUZPIG9yZGVyXG4gICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSBbXTtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIGlmICh0aGlzLl9ldmVudHMpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKGV2bGlzdGVuZXIpKVxuICAgICAgcmV0dXJuIDE7XG4gICAgZWxzZSBpZiAoZXZsaXN0ZW5lcilcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgYnVuZGxlRm4gPSBhcmd1bWVudHNbM107XG52YXIgc291cmNlcyA9IGFyZ3VtZW50c1s0XTtcbnZhciBjYWNoZSA9IGFyZ3VtZW50c1s1XTtcblxudmFyIHN0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgb3B0aW9ucykge1xuICAgIHZhciB3a2V5O1xuICAgIHZhciBjYWNoZUtleXMgPSBPYmplY3Qua2V5cyhjYWNoZSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNhY2hlS2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGNhY2hlS2V5c1tpXTtcbiAgICAgICAgdmFyIGV4cCA9IGNhY2hlW2tleV0uZXhwb3J0cztcbiAgICAgICAgLy8gVXNpbmcgYmFiZWwgYXMgYSB0cmFuc3BpbGVyIHRvIHVzZSBlc21vZHVsZSwgdGhlIGV4cG9ydCB3aWxsIGFsd2F5c1xuICAgICAgICAvLyBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZGVmYXVsdCBleHBvcnQgYXMgYSBwcm9wZXJ0eSBvZiBpdC4gVG8gZW5zdXJlXG4gICAgICAgIC8vIHRoZSBleGlzdGluZyBhcGkgYW5kIGJhYmVsIGVzbW9kdWxlIGV4cG9ydHMgYXJlIGJvdGggc3VwcG9ydGVkIHdlXG4gICAgICAgIC8vIGNoZWNrIGZvciBib3RoXG4gICAgICAgIGlmIChleHAgPT09IGZuIHx8IGV4cCAmJiBleHAuZGVmYXVsdCA9PT0gZm4pIHtcbiAgICAgICAgICAgIHdrZXkgPSBrZXk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghd2tleSkge1xuICAgICAgICB3a2V5ID0gTWF0aC5mbG9vcihNYXRoLnBvdygxNiwgOCkgKiBNYXRoLnJhbmRvbSgpKS50b1N0cmluZygxNik7XG4gICAgICAgIHZhciB3Y2FjaGUgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYWNoZUtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gY2FjaGVLZXlzW2ldO1xuICAgICAgICAgICAgd2NhY2hlW2tleV0gPSBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgc291cmNlc1t3a2V5XSA9IFtcbiAgICAgICAgICAgICdmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsnICsgZm4gKyAnKHNlbGYpOyB9JyxcbiAgICAgICAgICAgIHdjYWNoZVxuICAgICAgICBdO1xuICAgIH1cbiAgICB2YXIgc2tleSA9IE1hdGguZmxvb3IoTWF0aC5wb3coMTYsIDgpICogTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMTYpO1xuXG4gICAgdmFyIHNjYWNoZSA9IHt9OyBzY2FjaGVbd2tleV0gPSB3a2V5O1xuICAgIHNvdXJjZXNbc2tleV0gPSBbXG4gICAgICAgICdmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsnICtcbiAgICAgICAgICAgIC8vIHRyeSB0byBjYWxsIGRlZmF1bHQgaWYgZGVmaW5lZCB0byBhbHNvIHN1cHBvcnQgYmFiZWwgZXNtb2R1bGUgZXhwb3J0c1xuICAgICAgICAgICAgJ3ZhciBmID0gcmVxdWlyZSgnICsgc3RyaW5naWZ5KHdrZXkpICsgJyk7JyArXG4gICAgICAgICAgICAnKGYuZGVmYXVsdCA/IGYuZGVmYXVsdCA6IGYpKHNlbGYpOycgK1xuICAgICAgICAnfScsXG4gICAgICAgIHNjYWNoZVxuICAgIF07XG5cbiAgICB2YXIgd29ya2VyU291cmNlcyA9IHt9O1xuICAgIHJlc29sdmVTb3VyY2VzKHNrZXkpO1xuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVNvdXJjZXMoa2V5KSB7XG4gICAgICAgIHdvcmtlclNvdXJjZXNba2V5XSA9IHRydWU7XG5cbiAgICAgICAgZm9yICh2YXIgZGVwUGF0aCBpbiBzb3VyY2VzW2tleV1bMV0pIHtcbiAgICAgICAgICAgIHZhciBkZXBLZXkgPSBzb3VyY2VzW2tleV1bMV1bZGVwUGF0aF07XG4gICAgICAgICAgICBpZiAoIXdvcmtlclNvdXJjZXNbZGVwS2V5XSkge1xuICAgICAgICAgICAgICAgIHJlc29sdmVTb3VyY2VzKGRlcEtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3JjID0gJygnICsgYnVuZGxlRm4gKyAnKSh7J1xuICAgICAgICArIE9iamVjdC5rZXlzKHdvcmtlclNvdXJjZXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5naWZ5KGtleSkgKyAnOlsnXG4gICAgICAgICAgICAgICAgKyBzb3VyY2VzW2tleV1bMF1cbiAgICAgICAgICAgICAgICArICcsJyArIHN0cmluZ2lmeShzb3VyY2VzW2tleV1bMV0pICsgJ10nXG4gICAgICAgICAgICA7XG4gICAgICAgIH0pLmpvaW4oJywnKVxuICAgICAgICArICd9LHt9LFsnICsgc3RyaW5naWZ5KHNrZXkpICsgJ10pJ1xuICAgIDtcblxuICAgIHZhciBVUkwgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkwgfHwgd2luZG93Lm1velVSTCB8fCB3aW5kb3cubXNVUkw7XG5cbiAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtzcmNdLCB7IHR5cGU6ICd0ZXh0L2phdmFzY3JpcHQnIH0pO1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYmFyZSkgeyByZXR1cm4gYmxvYjsgfVxuICAgIHZhciB3b3JrZXJVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIHZhciB3b3JrZXIgPSBuZXcgV29ya2VyKHdvcmtlclVybCk7XG4gICAgd29ya2VyLm9iamVjdFVSTCA9IHdvcmtlclVybDtcbiAgICByZXR1cm4gd29ya2VyO1xufTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgQmlsaWJpbGkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvciB6aGVuZyBxaWFuIDx4cXFAeHFxLmltPlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBlbmFibGVXb3JrZXI6IGZhbHNlLFxuICAgIGVuYWJsZVN0YXNoQnVmZmVyOiB0cnVlLFxuICAgIHN0YXNoSW5pdGlhbFNpemU6IHVuZGVmaW5lZCxcblxuICAgIGlzTGl2ZTogZmFsc2UsXG5cbiAgICBsYXp5TG9hZDogdHJ1ZSxcbiAgICBsYXp5TG9hZE1heER1cmF0aW9uOiAzICogNjAsXG4gICAgbGF6eUxvYWRSZWNvdmVyRHVyYXRpb246IDMwLFxuICAgIGRlZmVyTG9hZEFmdGVyU291cmNlT3BlbjogdHJ1ZSxcblxuICAgIC8vIGF1dG9DbGVhbnVwU291cmNlQnVmZmVyOiBkZWZhdWx0IGFzIGZhbHNlLCBsZWF2ZSB1bnNwZWNpZmllZFxuICAgIGF1dG9DbGVhbnVwTWF4QmFja3dhcmREdXJhdGlvbjogMyAqIDYwLFxuICAgIGF1dG9DbGVhbnVwTWluQmFja3dhcmREdXJhdGlvbjogMiAqIDYwLFxuXG4gICAgc3RhdGlzdGljc0luZm9SZXBvcnRJbnRlcnZhbDogNjAwLFxuXG4gICAgZml4QXVkaW9UaW1lc3RhbXBHYXA6IHRydWUsXG5cbiAgICBhY2N1cmF0ZVNlZWs6IGZhbHNlLFxuICAgIHNlZWtUeXBlOiAncmFuZ2UnLCAgLy8gW3JhbmdlLCBwYXJhbSwgY3VzdG9tXVxuICAgIHNlZWtQYXJhbVN0YXJ0OiAnYnN0YXJ0JyxcbiAgICBzZWVrUGFyYW1FbmQ6ICdiZW5kJyxcbiAgICByYW5nZUxvYWRaZXJvU3RhcnQ6IGZhbHNlLFxuICAgIGN1c3RvbVNlZWtIYW5kbGVyOiB1bmRlZmluZWQsXG4gICAgcmV1c2VSZWRpcmVjdGVkVVJMOiBmYWxzZVxuICAgIC8vIHJlZmVycmVyUG9saWN5OiBsZWF2ZSBhcyB1bnNwZWNpZmllZFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRDb25maWcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRDb25maWcpO1xufSIsIi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgQmlsaWJpbGkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvciB6aGVuZyBxaWFuIDx4cXFAeHFxLmltPlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgSU9Db250cm9sbGVyIGZyb20gJy4uL2lvL2lvLWNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHtjcmVhdGVEZWZhdWx0Q29uZmlnfSBmcm9tICcuLi9jb25maWcuanMnO1xuXG5jbGFzcyBGZWF0dXJlcyB7XG5cbiAgICBzdGF0aWMgc3VwcG9ydE1TRUgyNjRQbGF5YmFjaygpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5NZWRpYVNvdXJjZSAmJlxuICAgICAgICAgICAgICAgd2luZG93Lk1lZGlhU291cmNlLmlzVHlwZVN1cHBvcnRlZCgndmlkZW8vbXA0OyBjb2RlY3M9XCJhdmMxLjQyRTAxRSxtcDRhLjQwLjJcIicpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzdXBwb3J0TmV0d29ya1N0cmVhbUlPKCkge1xuICAgICAgICBsZXQgaW9jdGwgPSBuZXcgSU9Db250cm9sbGVyKHt9LCBjcmVhdGVEZWZhdWx0Q29uZmlnKCkpO1xuICAgICAgICBsZXQgbG9hZGVyVHlwZSA9IGlvY3RsLmxvYWRlclR5cGU7XG4gICAgICAgIGlvY3RsLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIGxvYWRlclR5cGUgPT0gJ2ZldGNoLXN0cmVhbS1sb2FkZXInIHx8IGxvYWRlclR5cGUgPT0gJ3hoci1tb3otY2h1bmtlZC1sb2FkZXInO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXROZXR3b3JrTG9hZGVyVHlwZU5hbWUoKSB7XG4gICAgICAgIGxldCBpb2N0bCA9IG5ldyBJT0NvbnRyb2xsZXIoe30sIGNyZWF0ZURlZmF1bHRDb25maWcoKSk7XG4gICAgICAgIGxldCBsb2FkZXJUeXBlID0gaW9jdGwubG9hZGVyVHlwZTtcbiAgICAgICAgaW9jdGwuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gbG9hZGVyVHlwZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc3VwcG9ydE5hdGl2ZU1lZGlhUGxheWJhY2sobWltZVR5cGUpIHtcbiAgICAgICAgaWYgKEZlYXR1cmVzLnZpZGVvRWxlbWVudCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIEZlYXR1cmVzLnZpZGVvRWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjYW5QbGF5ID0gRmVhdHVyZXMudmlkZW9FbGVtZW50LmNhblBsYXlUeXBlKG1pbWVUeXBlKTtcbiAgICAgICAgcmV0dXJuIGNhblBsYXkgPT09ICdwcm9iYWJseScgfHwgY2FuUGxheSA9PSAnbWF5YmUnO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRGZWF0dXJlTGlzdCgpIHtcbiAgICAgICAgbGV0IGZlYXR1cmVzID0ge1xuICAgICAgICAgICAgbXNlRmx2UGxheWJhY2s6IGZhbHNlLFxuICAgICAgICAgICAgbXNlTGl2ZUZsdlBsYXliYWNrOiBmYWxzZSxcbiAgICAgICAgICAgIG5ldHdvcmtTdHJlYW1JTzogZmFsc2UsXG4gICAgICAgICAgICBuZXR3b3JrTG9hZGVyTmFtZTogJycsXG4gICAgICAgICAgICBuYXRpdmVNUDRIMjY0UGxheWJhY2s6IGZhbHNlLFxuICAgICAgICAgICAgbmF0aXZlV2VibVZQOFBsYXliYWNrOiBmYWxzZSxcbiAgICAgICAgICAgIG5hdGl2ZVdlYm1WUDlQbGF5YmFjazogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICBmZWF0dXJlcy5tc2VGbHZQbGF5YmFjayA9IEZlYXR1cmVzLnN1cHBvcnRNU0VIMjY0UGxheWJhY2soKTtcbiAgICAgICAgZmVhdHVyZXMubmV0d29ya1N0cmVhbUlPID0gRmVhdHVyZXMuc3VwcG9ydE5ldHdvcmtTdHJlYW1JTygpO1xuICAgICAgICBmZWF0dXJlcy5uZXR3b3JrTG9hZGVyTmFtZSA9IEZlYXR1cmVzLmdldE5ldHdvcmtMb2FkZXJUeXBlTmFtZSgpO1xuICAgICAgICBmZWF0dXJlcy5tc2VMaXZlRmx2UGxheWJhY2sgPSBmZWF0dXJlcy5tc2VGbHZQbGF5YmFjayAmJiBmZWF0dXJlcy5uZXR3b3JrU3RyZWFtSU87XG4gICAgICAgIGZlYXR1cmVzLm5hdGl2ZU1QNEgyNjRQbGF5YmFjayA9IEZlYXR1cmVzLnN1cHBvcnROYXRpdmVNZWRpYVBsYXliYWNrKCd2aWRlby9tcDQ7IGNvZGVjcz1cImF2YzEuNDIwMDFFLCBtcDRhLjQwLjJcIicpO1xuICAgICAgICBmZWF0dXJlcy5uYXRpdmVXZWJtVlA4UGxheWJhY2sgPSBGZWF0dXJlcy5zdXBwb3J0TmF0aXZlTWVkaWFQbGF5YmFjaygndmlkZW8vd2VibTsgY29kZWNzPVwidnA4LjAsIHZvcmJpc1wiJyk7XG4gICAgICAgIGZlYXR1cmVzLm5hdGl2ZVdlYm1WUDlQbGF5YmFjayA9IEZlYXR1cmVzLnN1cHBvcnROYXRpdmVNZWRpYVBsYXliYWNrKCd2aWRlby93ZWJtOyBjb2RlY3M9XCJ2cDlcIicpO1xuXG4gICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmVhdHVyZXM7IiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmNsYXNzIE1lZGlhSW5mbyB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5taW1lVHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBudWxsO1xuXG4gICAgICAgIHRoaXMuaGFzQXVkaW8gPSBudWxsO1xuICAgICAgICB0aGlzLmhhc1ZpZGVvID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdWRpb0NvZGVjID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWRlb0NvZGVjID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdWRpb0RhdGFSYXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWRlb0RhdGFSYXRlID0gbnVsbDtcblxuICAgICAgICB0aGlzLmF1ZGlvU2FtcGxlUmF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYXVkaW9DaGFubmVsQ291bnQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMud2lkdGggPSBudWxsO1xuICAgICAgICB0aGlzLmhlaWdodCA9IG51bGw7XG4gICAgICAgIHRoaXMuZnBzID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcm9maWxlID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZXZlbCA9IG51bGw7XG4gICAgICAgIHRoaXMucmVmRnJhbWVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5jaHJvbWFGb3JtYXQgPSBudWxsO1xuICAgICAgICB0aGlzLnNhck51bSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2FyRGVuID0gbnVsbDtcblxuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWdtZW50cyA9IG51bGw7ICAvLyBNZWRpYUluZm9bXVxuICAgICAgICB0aGlzLnNlZ21lbnRDb3VudCA9IG51bGw7XG4gICAgICAgIHRoaXMuaGFzS2V5ZnJhbWVzSW5kZXggPSBudWxsO1xuICAgICAgICB0aGlzLmtleWZyYW1lc0luZGV4ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpc0NvbXBsZXRlKCkge1xuICAgICAgICBsZXQgYXVkaW9JbmZvQ29tcGxldGUgPSAodGhpcy5oYXNBdWRpbyA9PT0gZmFsc2UpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmhhc0F1ZGlvID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvQ29kZWMgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdWRpb1NhbXBsZVJhdGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdWRpb0NoYW5uZWxDb3VudCAhPSBudWxsKTtcblxuICAgICAgICBsZXQgdmlkZW9JbmZvQ29tcGxldGUgPSAodGhpcy5oYXNWaWRlbyA9PT0gZmFsc2UpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmhhc1ZpZGVvID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvQ29kZWMgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aWR0aCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZwcyAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZkZyYW1lcyAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNocm9tYUZvcm1hdCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhck51bSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhckRlbiAhPSBudWxsKTtcblxuICAgICAgICAvLyBrZXlmcmFtZXNJbmRleCBtYXkgbm90IGJlIHByZXNlbnRcbiAgICAgICAgcmV0dXJuIHRoaXMubWltZVR5cGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiAhPSBudWxsICYmXG4gICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgIHRoaXMuaGFzS2V5ZnJhbWVzSW5kZXggIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgYXVkaW9JbmZvQ29tcGxldGUgJiZcbiAgICAgICAgICAgICAgIHZpZGVvSW5mb0NvbXBsZXRlO1xuICAgIH1cblxuICAgIGlzU2Vla2FibGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc0tleWZyYW1lc0luZGV4ID09PSB0cnVlO1xuICAgIH1cblxuICAgIGdldE5lYXJlc3RLZXlmcmFtZShtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgaWYgKHRoaXMua2V5ZnJhbWVzSW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGFibGUgPSB0aGlzLmtleWZyYW1lc0luZGV4O1xuICAgICAgICBsZXQga2V5ZnJhbWVJZHggPSB0aGlzLl9zZWFyY2godGFibGUudGltZXMsIG1pbGxpc2Vjb25kcyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluZGV4OiBrZXlmcmFtZUlkeCxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogdGFibGUudGltZXNba2V5ZnJhbWVJZHhdLFxuICAgICAgICAgICAgZmlsZXBvc2l0aW9uOiB0YWJsZS5maWxlcG9zaXRpb25zW2tleWZyYW1lSWR4XVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9zZWFyY2gobGlzdCwgdmFsdWUpIHtcbiAgICAgICAgbGV0IGlkeCA9IDA7XG5cbiAgICAgICAgbGV0IGxhc3QgPSBsaXN0Lmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBtaWQgPSAwO1xuICAgICAgICBsZXQgbGJvdW5kID0gMDtcbiAgICAgICAgbGV0IHVib3VuZCA9IGxhc3Q7XG5cbiAgICAgICAgaWYgKHZhbHVlIDwgbGlzdFswXSkge1xuICAgICAgICAgICAgaWR4ID0gMDtcbiAgICAgICAgICAgIGxib3VuZCA9IHVib3VuZCArIDE7ICAvLyBza2lwIHNlYXJjaFxuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGxib3VuZCA8PSB1Ym91bmQpIHtcbiAgICAgICAgICAgIG1pZCA9IGxib3VuZCArIE1hdGguZmxvb3IoKHVib3VuZCAtIGxib3VuZCkgLyAyKTtcbiAgICAgICAgICAgIGlmIChtaWQgPT09IGxhc3QgfHwgKHZhbHVlID49IGxpc3RbbWlkXSAmJiB2YWx1ZSA8IGxpc3RbbWlkICsgMV0pKSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gbWlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0W21pZF0gPCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGxib3VuZCA9IG1pZCArIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVib3VuZCA9IG1pZCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNZWRpYUluZm87IiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIFJlcHJlc2VudHMgYW4gbWVkaWEgc2FtcGxlIChhdWRpbyAvIHZpZGVvKVxuZXhwb3J0IGNsYXNzIFNhbXBsZUluZm8ge1xuXG4gICAgY29uc3RydWN0b3IoZHRzLCBwdHMsIGR1cmF0aW9uLCBvcmlnaW5hbER0cywgaXNTeW5jKSB7XG4gICAgICAgIHRoaXMuZHRzID0gZHRzO1xuICAgICAgICB0aGlzLnB0cyA9IHB0cztcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICB0aGlzLm9yaWdpbmFsRHRzID0gb3JpZ2luYWxEdHM7XG4gICAgICAgIHRoaXMuaXNTeW5jUG9pbnQgPSBpc1N5bmM7XG4gICAgICAgIHRoaXMuZmlsZXBvc2l0aW9uID0gbnVsbDtcbiAgICB9XG5cbn1cblxuLy8gTWVkaWEgU2VnbWVudCBjb25jZXB0IGlzIGRlZmluZWQgaW4gTWVkaWEgU291cmNlIEV4dGVuc2lvbnMgc3BlYy5cbi8vIFBhcnRpY3VsYXJseSBpbiBJU08gQk1GRiBmb3JtYXQsIGFuIE1lZGlhIFNlZ21lbnQgY29udGFpbnMgYSBtb29mIGJveCBmb2xsb3dlZCBieSBhIG1kYXQgYm94LlxuZXhwb3J0IGNsYXNzIE1lZGlhU2VnbWVudEluZm8ge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYmVnaW5EdHMgPSAwO1xuICAgICAgICB0aGlzLmVuZER0cyA9IDA7XG4gICAgICAgIHRoaXMuYmVnaW5QdHMgPSAwO1xuICAgICAgICB0aGlzLmVuZFB0cyA9IDA7XG4gICAgICAgIHRoaXMub3JpZ2luYWxCZWdpbkR0cyA9IDA7XG4gICAgICAgIHRoaXMub3JpZ2luYWxFbmREdHMgPSAwO1xuICAgICAgICB0aGlzLnN5bmNQb2ludHMgPSBbXTsgICAgIC8vIFNhbXBsZUluZm9bbl0sIGZvciB2aWRlbyBJRFIgZnJhbWVzIG9ubHlcbiAgICAgICAgdGhpcy5maXJzdFNhbXBsZSA9IG51bGw7ICAvLyBTYW1wbGVJbmZvXG4gICAgICAgIHRoaXMubGFzdFNhbXBsZSA9IG51bGw7ICAgLy8gU2FtcGxlSW5mb1xuICAgIH1cblxuICAgIGFwcGVuZFN5bmNQb2ludChzYW1wbGVJbmZvKSB7ICAvLyBhbHNvIGNhbGxlZCBSYW5kb20gQWNjZXNzIFBvaW50XG4gICAgICAgIHNhbXBsZUluZm8uaXNTeW5jUG9pbnQgPSB0cnVlO1xuICAgICAgICB0aGlzLnN5bmNQb2ludHMucHVzaChzYW1wbGVJbmZvKTtcbiAgICB9XG5cbn1cblxuLy8gT3JkZXJlZCBsaXN0IGZvciByZWNvcmRpbmcgdmlkZW8gSURSIGZyYW1lcywgc29ydGVkIGJ5IG9yaWdpbmFsRHRzXG5leHBvcnQgY2xhc3MgSURSU2FtcGxlTGlzdCB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fbGlzdCA9IFtdO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9saXN0ID0gW107XG4gICAgfVxuXG4gICAgYXBwZW5kQXJyYXkoc3luY1BvaW50cykge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuX2xpc3Q7XG5cbiAgICAgICAgaWYgKHN5bmNQb2ludHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwICYmIHN5bmNQb2ludHNbMF0ub3JpZ2luYWxEdHMgPCBsaXN0W2xpc3QubGVuZ3RoIC0gMV0ub3JpZ2luYWxEdHMpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGxpc3QsIHN5bmNQb2ludHMpO1xuICAgIH1cblxuICAgIGdldExhc3RTeW5jUG9pbnRCZWZvcmVEdHMoZHRzKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0Lmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsaXN0ID0gdGhpcy5fbGlzdDtcbiAgICAgICAgbGV0IGlkeCA9IDA7XG4gICAgICAgIGxldCBsYXN0ID0gbGlzdC5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgbWlkID0gMDtcbiAgICAgICAgbGV0IGxib3VuZCA9IDA7XG4gICAgICAgIGxldCB1Ym91bmQgPSBsYXN0O1xuXG4gICAgICAgIGlmIChkdHMgPCBsaXN0WzBdLmR0cykge1xuICAgICAgICAgICAgaWR4ID0gMDtcbiAgICAgICAgICAgIGxib3VuZCA9IHVib3VuZCArIDE7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAobGJvdW5kIDw9IHVib3VuZCkge1xuICAgICAgICAgICAgbWlkID0gbGJvdW5kICsgTWF0aC5mbG9vcigodWJvdW5kIC0gbGJvdW5kKSAvIDIpO1xuICAgICAgICAgICAgaWYgKG1pZCA9PT0gbGFzdCB8fCAoZHRzID49IGxpc3RbbWlkXS5kdHMgJiYgZHRzIDwgbGlzdFttaWQgKyAxXS5kdHMpKSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gbWlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0W21pZF0uZHRzIDwgZHRzKSB7XG4gICAgICAgICAgICAgICAgbGJvdW5kID0gbWlkICsgMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWJvdW5kID0gbWlkIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdFtpZHhdO1xuICAgIH1cblxufVxuXG4vLyBEYXRhIHN0cnVjdHVyZSBmb3IgcmVjb3JkaW5nIGluZm9ybWF0aW9uIG9mIG1lZGlhIHNlZ21lbnRzIGluIHNpbmdsZSB0cmFjay5cbmV4cG9ydCBjbGFzcyBNZWRpYVNlZ21lbnRJbmZvTGlzdCB7XG5cbiAgICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLl9saXN0ID0gW107XG4gICAgICAgIHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbiA9IC0xOyAgLy8gY2FjaGVkIGxhc3QgaW5zZXJ0IGxvY2F0aW9uXG4gICAgfVxuXG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgIH1cblxuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aDtcbiAgICB9XG5cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5sZW5ndGggPT09IDA7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gLTE7XG4gICAgfVxuXG4gICAgX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKG9yaWdpbmFsQmVnaW5EdHMpIHtcbiAgICAgICAgbGV0IGxpc3QgPSB0aGlzLl9saXN0O1xuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGFzdCA9IGxpc3QubGVuZ3RoIC0gMTtcbiAgICAgICAgbGV0IG1pZCA9IDA7XG4gICAgICAgIGxldCBsYm91bmQgPSAwO1xuICAgICAgICBsZXQgdWJvdW5kID0gbGFzdDtcblxuICAgICAgICBsZXQgaWR4ID0gMDtcblxuICAgICAgICBpZiAob3JpZ2luYWxCZWdpbkR0cyA8IGxpc3RbMF0ub3JpZ2luYWxCZWdpbkR0cykge1xuICAgICAgICAgICAgaWR4ID0gLTE7XG4gICAgICAgICAgICByZXR1cm4gaWR4O1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGxib3VuZCA8PSB1Ym91bmQpIHtcbiAgICAgICAgICAgIG1pZCA9IGxib3VuZCArIE1hdGguZmxvb3IoKHVib3VuZCAtIGxib3VuZCkgLyAyKTtcbiAgICAgICAgICAgIGlmIChtaWQgPT09IGxhc3QgfHwgKG9yaWdpbmFsQmVnaW5EdHMgPiBsaXN0W21pZF0ubGFzdFNhbXBsZS5vcmlnaW5hbER0cyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAob3JpZ2luYWxCZWdpbkR0cyA8IGxpc3RbbWlkICsgMV0ub3JpZ2luYWxCZWdpbkR0cykpKSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gbWlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0W21pZF0ub3JpZ2luYWxCZWdpbkR0cyA8IG9yaWdpbmFsQmVnaW5EdHMpIHtcbiAgICAgICAgICAgICAgICBsYm91bmQgPSBtaWQgKyAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1Ym91bmQgPSBtaWQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuXG4gICAgX3NlYXJjaE5lYXJlc3RTZWdtZW50QWZ0ZXIob3JpZ2luYWxCZWdpbkR0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUob3JpZ2luYWxCZWdpbkR0cykgKyAxO1xuICAgIH1cblxuICAgIGFwcGVuZChtZWRpYVNlZ21lbnRJbmZvKSB7XG4gICAgICAgIGxldCBsaXN0ID0gdGhpcy5fbGlzdDtcbiAgICAgICAgbGV0IG1zaSA9IG1lZGlhU2VnbWVudEluZm87XG4gICAgICAgIGxldCBsYXN0QXBwZW5kSWR4ID0gdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uO1xuICAgICAgICBsZXQgaW5zZXJ0SWR4ID0gMDtcblxuICAgICAgICBpZiAobGFzdEFwcGVuZElkeCAhPT0gLTEgJiYgbGFzdEFwcGVuZElkeCA8IGxpc3QubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2kub3JpZ2luYWxCZWdpbkR0cyA+PSBsaXN0W2xhc3RBcHBlbmRJZHhdLmxhc3RTYW1wbGUub3JpZ2luYWxEdHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgobGFzdEFwcGVuZElkeCA9PT0gbGlzdC5sZW5ndGggLSAxKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxhc3RBcHBlbmRJZHggPCBsaXN0Lmxlbmd0aCAtIDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zaS5vcmlnaW5hbEJlZ2luRHRzIDwgbGlzdFtsYXN0QXBwZW5kSWR4ICsgMV0ub3JpZ2luYWxCZWdpbkR0cykpKSB7XG4gICAgICAgICAgICBpbnNlcnRJZHggPSBsYXN0QXBwZW5kSWR4ICsgMTsgIC8vIHVzZSBjYWNoZWQgbG9jYXRpb24gaWR4XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0SWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUobXNpLm9yaWdpbmFsQmVnaW5EdHMpICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbiA9IGluc2VydElkeDtcbiAgICAgICAgdGhpcy5fbGlzdC5zcGxpY2UoaW5zZXJ0SWR4LCAwLCBtc2kpO1xuICAgIH1cblxuICAgIGdldExhc3RTZWdtZW50QmVmb3JlKG9yaWdpbmFsQmVnaW5EdHMpIHtcbiAgICAgICAgbGV0IGlkeCA9IHRoaXMuX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKG9yaWdpbmFsQmVnaW5EdHMpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0W2lkeF07XG4gICAgICAgIH0gZWxzZSB7ICAvLyAtMVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRMYXN0U2FtcGxlQmVmb3JlKG9yaWdpbmFsQmVnaW5EdHMpIHtcbiAgICAgICAgbGV0IHNlZ21lbnQgPSB0aGlzLmdldExhc3RTZWdtZW50QmVmb3JlKG9yaWdpbmFsQmVnaW5EdHMpO1xuICAgICAgICBpZiAoc2VnbWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VnbWVudC5sYXN0U2FtcGxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRMYXN0U3luY1BvaW50QmVmb3JlKG9yaWdpbmFsQmVnaW5EdHMpIHtcbiAgICAgICAgbGV0IHNlZ21lbnRJZHggPSB0aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShvcmlnaW5hbEJlZ2luRHRzKTtcbiAgICAgICAgbGV0IHN5bmNQb2ludHMgPSB0aGlzLl9saXN0W3NlZ21lbnRJZHhdLnN5bmNQb2ludHM7XG4gICAgICAgIHdoaWxlIChzeW5jUG9pbnRzLmxlbmd0aCA9PT0gMCAmJiBzZWdtZW50SWR4ID4gMCkge1xuICAgICAgICAgICAgc2VnbWVudElkeC0tO1xuICAgICAgICAgICAgc3luY1BvaW50cyA9IHRoaXMuX2xpc3Rbc2VnbWVudElkeF0uc3luY1BvaW50cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3luY1BvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gc3luY1BvaW50c1tzeW5jUG9pbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnO1xuaW1wb3J0IExvZyBmcm9tICcuLi91dGlscy9sb2dnZXIuanMnO1xuaW1wb3J0IEJyb3dzZXIgZnJvbSAnLi4vdXRpbHMvYnJvd3Nlci5qcyc7XG5pbXBvcnQgTVNFRXZlbnRzIGZyb20gJy4vbXNlLWV2ZW50cy5qcyc7XG5pbXBvcnQge1NhbXBsZUluZm8sIElEUlNhbXBsZUxpc3R9IGZyb20gJy4vbWVkaWEtc2VnbWVudC1pbmZvLmpzJztcbmltcG9ydCB7SWxsZWdhbFN0YXRlRXhjZXB0aW9ufSBmcm9tICcuLi91dGlscy9leGNlcHRpb24uanMnO1xuXG4vLyBNZWRpYSBTb3VyY2UgRXh0ZW5zaW9ucyBjb250cm9sbGVyXG5jbGFzcyBNU0VDb250cm9sbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLlRBRyA9ICdNU0VDb250cm9sbGVyJztcblxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5pc0xpdmUgJiYgdGhpcy5fY29uZmlnLmF1dG9DbGVhbnVwU291cmNlQnVmZmVyID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gRm9yIGxpdmUgc3RyZWFtLCBkbyBhdXRvIGNsZWFudXAgYnkgZGVmYXVsdFxuICAgICAgICAgICAgdGhpcy5fY29uZmlnLmF1dG9DbGVhbnVwU291cmNlQnVmZmVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlZmluaXRpb25DaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lID0ge1xuICAgICAgICAgICAgb25Tb3VyY2VPcGVuOiB0aGlzLl9vblNvdXJjZU9wZW4uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIG9uU291cmNlRW5kZWQ6IHRoaXMuX29uU291cmNlRW5kZWQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIG9uU291cmNlQ2xvc2U6IHRoaXMuX29uU291cmNlQ2xvc2UuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIG9uU291cmNlQnVmZmVyRXJyb3I6IHRoaXMuX29uU291cmNlQnVmZmVyRXJyb3IuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIG9uU291cmNlQnVmZmVyVXBkYXRlRW5kOiB0aGlzLl9vblNvdXJjZUJ1ZmZlclVwZGF0ZUVuZC5iaW5kKHRoaXMpXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fbWVkaWFTb3VyY2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9tZWRpYVNvdXJjZU9iamVjdFVSTCA9IG51bGw7XG4gICAgICAgIHRoaXMuX21lZGlhRWxlbWVudCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5faXNCdWZmZXJGdWxsID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2hhc1BlbmRpbmdFb3MgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9yZXF1aXJlU2V0TWVkaWFEdXJhdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wZW5kaW5nTWVkaWFEdXJhdGlvbiA9IDA7XG5cbiAgICAgICAgdGhpcy5fcGVuZGluZ1NvdXJjZUJ1ZmZlckluaXQgPSBbXTtcbiAgICAgICAgdGhpcy5fbWltZVR5cGVzID0ge1xuICAgICAgICAgICAgdmlkZW86IG51bGwsXG4gICAgICAgICAgICBhdWRpbzogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9zb3VyY2VCdWZmZXJzID0ge1xuICAgICAgICAgICAgdmlkZW86IG51bGwsXG4gICAgICAgICAgICBhdWRpbzogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9sYXN0SW5pdFNlZ21lbnRzID0ge1xuICAgICAgICAgICAgdmlkZW86IG51bGwsXG4gICAgICAgICAgICBhdWRpbzogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wZW5kaW5nU2VnbWVudHMgPSB7XG4gICAgICAgICAgICB2aWRlbzogW10sXG4gICAgICAgICAgICBhdWRpbzogW11cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcGVuZGluZ1JlbW92ZVJhbmdlcyA9IHtcbiAgICAgICAgICAgIHZpZGVvOiBbXSxcbiAgICAgICAgICAgIGF1ZGlvOiBbXVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9pZHJMaXN0ID0gbmV3IElEUlNhbXBsZUxpc3QoKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5fbWVkaWFFbGVtZW50IHx8IHRoaXMuX21lZGlhU291cmNlKSB7XG4gICAgICAgICAgICB0aGlzLmRldGFjaE1lZGlhRWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLmFkZExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgYXR0YWNoTWVkaWFFbGVtZW50KG1lZGlhRWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5fbWVkaWFTb3VyY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oJ01lZGlhU291cmNlIGhhcyBiZWVuIGF0dGFjaGVkIHRvIGFuIEhUTUxNZWRpYUVsZW1lbnQhJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1zID0gdGhpcy5fbWVkaWFTb3VyY2UgPSBuZXcgd2luZG93Lk1lZGlhU291cmNlKCk7XG4gICAgICAgIG1zLmFkZEV2ZW50TGlzdGVuZXIoJ3NvdXJjZW9wZW4nLCB0aGlzLmUub25Tb3VyY2VPcGVuKTtcbiAgICAgICAgbXMuYWRkRXZlbnRMaXN0ZW5lcignc291cmNlZW5kZWQnLCB0aGlzLmUub25Tb3VyY2VFbmRlZCk7XG4gICAgICAgIG1zLmFkZEV2ZW50TGlzdGVuZXIoJ3NvdXJjZWNsb3NlJywgdGhpcy5lLm9uU291cmNlQ2xvc2UpO1xuXG4gICAgICAgIHRoaXMuX21lZGlhRWxlbWVudCA9IG1lZGlhRWxlbWVudDtcbiAgICAgICAgdGhpcy5fbWVkaWFTb3VyY2VPYmplY3RVUkwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCh0aGlzLl9tZWRpYVNvdXJjZSk7XG4gICAgICAgIG1lZGlhRWxlbWVudC5zcmMgPSB0aGlzLl9tZWRpYVNvdXJjZU9iamVjdFVSTDtcbiAgICB9XG5cbiAgICBkZXRhY2hNZWRpYUVsZW1lbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tZWRpYVNvdXJjZSkge1xuICAgICAgICAgICAgbGV0IG1zID0gdGhpcy5fbWVkaWFTb3VyY2U7XG4gICAgICAgICAgICBmb3IgKGxldCB0eXBlIGluIHRoaXMuX3NvdXJjZUJ1ZmZlcnMpIHtcbiAgICAgICAgICAgICAgICAvLyBwZW5kaW5nIHNlZ21lbnRzIHNob3VsZCBiZSBkaXNjYXJkXG4gICAgICAgICAgICAgICAgbGV0IHBzID0gdGhpcy5fcGVuZGluZ1NlZ21lbnRzW3R5cGVdO1xuICAgICAgICAgICAgICAgIHBzLnNwbGljZSgwLCBwcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdTZWdtZW50c1t0eXBlXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1JlbW92ZVJhbmdlc1t0eXBlXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdEluaXRTZWdtZW50c1t0eXBlXSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgYWxsIHNvdXJjZWJ1ZmZlcnNcbiAgICAgICAgICAgICAgICBsZXQgc2IgPSB0aGlzLl9zb3VyY2VCdWZmZXJzW3R5cGVdO1xuICAgICAgICAgICAgICAgIGlmIChzYikge1xuICAgICAgICAgICAgICAgICAgICBpZiAobXMucmVhZHlTdGF0ZSAhPT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zLnJlbW92ZVNvdXJjZUJ1ZmZlcihzYik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYi5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuZS5vblNvdXJjZUJ1ZmZlckVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNiLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWVuZCcsIHRoaXMuZS5vblNvdXJjZUJ1ZmZlclVwZGF0ZUVuZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWltZVR5cGVzW3R5cGVdID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc291cmNlQnVmZmVyc1t0eXBlXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1zLnJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG1zLmVuZE9mU3RyZWFtKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmUodGhpcy5UQUcsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1zLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NvdXJjZW9wZW4nLCB0aGlzLmUub25Tb3VyY2VPcGVuKTtcbiAgICAgICAgICAgIG1zLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NvdXJjZWVuZGVkJywgdGhpcy5lLm9uU291cmNlRW5kZWQpO1xuICAgICAgICAgICAgbXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignc291cmNlY2xvc2UnLCB0aGlzLmUub25Tb3VyY2VDbG9zZSk7XG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nU291cmNlQnVmZmVySW5pdCA9IFtdO1xuICAgICAgICAgICAgdGhpcy5faXNCdWZmZXJGdWxsID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9pZHJMaXN0LmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLl9tZWRpYVNvdXJjZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fbWVkaWFFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9tZWRpYUVsZW1lbnQuc3JjID0gJyc7XG4gICAgICAgICAgICB0aGlzLl9tZWRpYUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdzcmMnKTtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX21lZGlhU291cmNlT2JqZWN0VVJMKSB7XG4gICAgICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLl9tZWRpYVNvdXJjZU9iamVjdFVSTCk7XG4gICAgICAgICAgICB0aGlzLl9tZWRpYVNvdXJjZU9iamVjdFVSTCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV3U291cmNlSW5pdFNlZ21lbnQgKGluaXRTZWdtZW50KSB7XG4gICAgICAgIGxldCBpcyA9IGluaXRTZWdtZW50O1xuICAgICAgICBsZXQgbWltZVR5cGUgPSBgJHtpcy5jb250YWluZXJ9YDtcbiAgICAgICAgaWYgKGlzLmNvZGVjICYmIGlzLmNvZGVjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG1pbWVUeXBlICs9IGA7Y29kZWNzPSR7aXMuY29kZWN9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwcyA9IHRoaXMuX3BlbmRpbmdTZWdtZW50c1tpcy50eXBlXTtcbiAgICAgICAgcHMuc3BsaWNlKDAsIHBzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdTZWdtZW50c1tpcy50eXBlXSA9IFtdO1xuICAgICAgICB0aGlzLl9wZW5kaW5nUmVtb3ZlUmFuZ2VzW2lzLnR5cGVdID0gW107XG4gICAgICAgIHRoaXMuX2xhc3RJbml0U2VnbWVudHNbaXMudHlwZV0gPSBbXTtcbiAgICAgICAgbGV0IG1zID0gdGhpcy5fbWVkaWFTb3VyY2U7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbkNoYW5nZSA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLl9zb3VyY2VCdWZmZXJzW2lzLnR5cGVdKSB7XG4gICAgICAgICAgICBtcy5yZW1vdmVTb3VyY2VCdWZmZXIodGhpcy5fc291cmNlQnVmZmVyc1tpcy50eXBlXSk7XG4gICAgICAgICAgICBsZXQgc2IgPSB0aGlzLl9zb3VyY2VCdWZmZXJzW2lzLnR5cGVdID0gdGhpcy5fbWVkaWFTb3VyY2UuYWRkU291cmNlQnVmZmVyKG1pbWVUeXBlKTtcbiAgICAgICAgICAgIHNiLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5lLm9uU291cmNlQnVmZmVyRXJyb3IpO1xuICAgICAgICAgICAgc2IuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgdGhpcy5lLm9uU291cmNlQnVmZmVyVXBkYXRlRW5kKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLmRlZmluaXRpb25DaGFuZ2UgPSBmYWxzZTtcblxuICAgIH1cblxuICAgIGFwcGVuZEluaXRTZWdtZW50KGluaXRTZWdtZW50LCBkZWZlcnJlZCkge1xuICAgICAgICBpZiAoIXRoaXMuX21lZGlhU291cmNlIHx8IHRoaXMuX21lZGlhU291cmNlLnJlYWR5U3RhdGUgIT09ICdvcGVuJykge1xuICAgICAgICAgICAgLy8gc291cmNlYnVmZmVyIGNyZWF0aW9uIHJlcXVpcmVzIG1lZGlhU291cmNlLnJlYWR5U3RhdGUgPT09ICdvcGVuJ1xuICAgICAgICAgICAgLy8gc28gd2UgZGVmZXIgdGhlIHNvdXJjZWJ1ZmZlciBjcmVhdGlvbiwgdW50aWwgc291cmNlb3BlbiBldmVudCB0cmlnZ2VyZWRcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdTb3VyY2VCdWZmZXJJbml0LnB1c2goaW5pdFNlZ21lbnQpO1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhpcyBJbml0U2VnbWVudCBpcyBpbiB0aGUgZnJvbnQgb2YgcGVuZGluZyBzZWdtZW50cyBxdWV1ZVxuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1NlZ21lbnRzW2luaXRTZWdtZW50LnR5cGVdLnB1c2goaW5pdFNlZ21lbnQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYCR7aW5pdFNlZ21lbnQudHlwZX1gLCBpbml0U2VnbWVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpcyA9IGluaXRTZWdtZW50O1xuICAgICAgICBsZXQgbWltZVR5cGUgPSBgJHtpcy5jb250YWluZXJ9YDtcbiAgICAgICAgaWYgKGlzLmNvZGVjICYmIGlzLmNvZGVjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG1pbWVUeXBlICs9IGA7Y29kZWNzPSR7aXMuY29kZWN9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaXJzdEluaXRTZWdtZW50ID0gZmFsc2U7XG5cbiAgICAgICAgTG9nLnYodGhpcy5UQUcsICdSZWNlaXZlZCBJbml0aWFsaXphdGlvbiBTZWdtZW50LCBtaW1lVHlwZTogJyArIG1pbWVUeXBlKTtcbiAgICAgICAgdGhpcy5fbGFzdEluaXRTZWdtZW50c1tpcy50eXBlXSA9IGlzO1xuXG4gICAgICAgIGlmIChtaW1lVHlwZSAhPT0gdGhpcy5fbWltZVR5cGVzW2lzLnR5cGVdKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX21pbWVUeXBlc1tpcy50eXBlXSkgeyAgLy8gZW1wdHksIGZpcnN0IGNoYW5jZSBjcmVhdGUgc291cmNlYnVmZmVyXG4gICAgICAgICAgICAgICAgZmlyc3RJbml0U2VnbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNiID0gdGhpcy5fc291cmNlQnVmZmVyc1tpcy50eXBlXSA9IHRoaXMuX21lZGlhU291cmNlLmFkZFNvdXJjZUJ1ZmZlcihtaW1lVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIHNiLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5lLm9uU291cmNlQnVmZmVyRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBzYi5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCB0aGlzLmUub25Tb3VyY2VCdWZmZXJVcGRhdGVFbmQpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lKHRoaXMuVEFHLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KE1TRUV2ZW50cy5FUlJPUiwge2NvZGU6IGVycm9yLmNvZGUsIG1zZzogZXJyb3IubWVzc2FnZX0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBMb2cudih0aGlzLlRBRywgYE5vdGljZTogJHtpcy50eXBlfSBtaW1lVHlwZSBjaGFuZ2VkLCBvcmlnaW46ICR7dGhpcy5fbWltZVR5cGVzW2lzLnR5cGVdfSwgdGFyZ2V0OiAke21pbWVUeXBlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbWltZVR5cGVzW2lzLnR5cGVdID0gbWltZVR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRlZmVycmVkKSB7XG4gICAgICAgICAgICAvLyBkZWZlcnJlZCBtZWFucyB0aGlzIEluaXRTZWdtZW50IGhhcyBiZWVuIHB1c2hlZCB0byBwZW5kaW5nU2VnbWVudHMgcXVldWVcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdTZWdtZW50c1tpcy50eXBlXS5wdXNoKGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZpcnN0SW5pdFNlZ21lbnQpIHsgIC8vIGFwcGVuZCBpbW1lZGlhdGVseSBvbmx5IGlmIGluaXQgc2VnbWVudCBpbiBzdWJzZXF1ZW5jZVxuICAgICAgICAgICAgaWYgKHRoaXMuX3NvdXJjZUJ1ZmZlcnNbaXMudHlwZV0gJiYgIXRoaXMuX3NvdXJjZUJ1ZmZlcnNbaXMudHlwZV0udXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kb0FwcGVuZFNlZ21lbnRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJyb3dzZXIuc2FmYXJpICYmIGlzLmNvbnRhaW5lciA9PT0gJ2F1ZGlvL21wZWcnICYmIGlzLm1lZGlhRHVyYXRpb24gPiAwKSB7XG4gICAgICAgICAgICAvLyAnYXVkaW8vbXBlZycgdHJhY2sgdW5kZXIgU2FmYXJpIG1heSBjYXVzZSBNZWRpYUVsZW1lbnQncyBkdXJhdGlvbiB0byBiZSBOYU5cbiAgICAgICAgICAgIC8vIE1hbnVhbGx5IGNvcnJlY3QgTWVkaWFTb3VyY2UuZHVyYXRpb24gdG8gbWFrZSBwcm9ncmVzcyBiYXIgc2Vla2FibGUsIGFuZCByZXBvcnQgcmlnaHQgZHVyYXRpb25cbiAgICAgICAgICAgIHRoaXMuX3JlcXVpcmVTZXRNZWRpYUR1cmF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdNZWRpYUR1cmF0aW9uID0gaXMubWVkaWFEdXJhdGlvbiAvIDEwMDA7ICAvLyBpbiBzZWNvbmRzXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVNZWRpYVNvdXJjZUR1cmF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhcHBlbmRNZWRpYVNlZ21lbnQobWVkaWFTZWdtZW50KSB7XG4gICAgICAgIGxldCBtcyA9IG1lZGlhU2VnbWVudDtcbiAgICAgICAgdGhpcy5fcGVuZGluZ1NlZ21lbnRzW21zLnR5cGVdLnB1c2gobXMpO1xuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcuYXV0b0NsZWFudXBTb3VyY2VCdWZmZXIgJiYgdGhpcy5fbmVlZENsZWFudXBTb3VyY2VCdWZmZXIoKSkge1xuICAgICAgICAgICAgdGhpcy5fZG9DbGVhbnVwU291cmNlQnVmZmVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2IgPSB0aGlzLl9zb3VyY2VCdWZmZXJzW21zLnR5cGVdO1xuICAgICAgICBpZiAoc2IgJiYgIXNiLnVwZGF0aW5nICYmICF0aGlzLl9oYXNQZW5kaW5nUmVtb3ZlUmFuZ2VzKCkgJiYgdGhpcy5kZWZpbml0aW9uQ2hhbmdlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5fZG9BcHBlbmRTZWdtZW50cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VlayhzZWNvbmRzKSB7XG4gICAgICAgIC8vIHJlbW92ZSBhbGwgYXBwZW5kZWQgYnVmZmVyc1xuICAgICAgICBmb3IgKGxldCB0eXBlIGluIHRoaXMuX3NvdXJjZUJ1ZmZlcnMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fc291cmNlQnVmZmVyc1t0eXBlXSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhYm9ydCBjdXJyZW50IGJ1ZmZlciBhcHBlbmQgYWxnb3JpdGhtXG4gICAgICAgICAgICBsZXQgc2IgPSB0aGlzLl9zb3VyY2VCdWZmZXJzW3R5cGVdO1xuICAgICAgICAgICAgaWYgKHRoaXMuX21lZGlhU291cmNlLnJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHJhbmdlIHJlbW92YWwgYWxnb3JpdGhtIGlzIHJ1bm5pbmcsIEludmFsaWRTdGF0ZUVycm9yIHdpbGwgYmUgdGhyb3dlZFxuICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgaXQuXG4gICAgICAgICAgICAgICAgICAgIHNiLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmUodGhpcy5UQUcsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSURSTGlzdCBzaG91bGQgYmUgY2xlYXJcbiAgICAgICAgICAgIHRoaXMuX2lkckxpc3QuY2xlYXIoKTtcblxuICAgICAgICAgICAgLy8gcGVuZGluZyBzZWdtZW50cyBzaG91bGQgYmUgZGlzY2FyZFxuICAgICAgICAgICAgbGV0IHBzID0gdGhpcy5fcGVuZGluZ1NlZ21lbnRzW3R5cGVdO1xuICAgICAgICAgICAgcHMuc3BsaWNlKDAsIHBzLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9tZWRpYVNvdXJjZS5yZWFkeVN0YXRlID09PSAnY2xvc2VkJykge1xuICAgICAgICAgICAgICAgIC8vIFBhcmVudCBNZWRpYVNvdXJjZSBvYmplY3QgaGFzIGJlZW4gZGV0YWNoZWQgZnJvbSBIVE1MTWVkaWFFbGVtZW50XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlY29yZCByYW5nZXMgdG8gYmUgcmVtb3ZlIGZyb20gU291cmNlQnVmZmVyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNiLmJ1ZmZlcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gc2IuYnVmZmVyZWQuc3RhcnQoaSk7XG4gICAgICAgICAgICAgICAgbGV0IGVuZCA9IHNiLmJ1ZmZlcmVkLmVuZChpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVtb3ZlUmFuZ2VzW3R5cGVdLnB1c2goe3N0YXJ0LCBlbmR9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgc2IgaXMgbm90IHVwZGF0aW5nLCBsZXQncyByZW1vdmUgcmFuZ2VzIG5vdyFcbiAgICAgICAgICAgIGlmICghc2IudXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kb1JlbW92ZVJhbmdlcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTYWZhcmkgMTAgbWF5IGdldCBJbnZhbGlkU3RhdGVFcnJvciBpbiB0aGUgbGF0ZXIgYXBwZW5kQnVmZmVyKCkgYWZ0ZXIgU291cmNlQnVmZmVyLnJlbW92ZSgpIGNhbGxcbiAgICAgICAgICAgIC8vIEludGVybmFsIHBhcnNlcidzIHN0YXRlIG1heSBiZSBpbnZhbGlkIGF0IHRoaXMgdGltZS4gUmUtYXBwZW5kIGxhc3QgSW5pdFNlZ21lbnQgdG8gd29ya2Fyb3VuZC5cbiAgICAgICAgICAgIC8vIFJlbGF0ZWQgaXNzdWU6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTkyMzBcbiAgICAgICAgICAgIGlmIChCcm93c2VyLnNhZmFyaSkge1xuICAgICAgICAgICAgICAgIGxldCBsYXN0SW5pdFNlZ21lbnQgPSB0aGlzLl9sYXN0SW5pdFNlZ21lbnRzW3R5cGVdO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0SW5pdFNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1NlZ21lbnRzW3R5cGVdLnB1c2gobGFzdEluaXRTZWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzYi51cGRhdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9BcHBlbmRTZWdtZW50cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZW5kT2ZTdHJlYW0oKSB7XG4gICAgICAgIGxldCBtcyA9IHRoaXMuX21lZGlhU291cmNlO1xuICAgICAgICBsZXQgc2IgPSB0aGlzLl9zb3VyY2VCdWZmZXJzO1xuICAgICAgICBpZiAoIW1zIHx8IG1zLnJlYWR5U3RhdGUgIT09ICdvcGVuJykge1xuICAgICAgICAgICAgaWYgKG1zICYmIG1zLnJlYWR5U3RhdGUgPT09ICdjbG9zZWQnICYmIHRoaXMuX2hhc1BlbmRpbmdTZWdtZW50cygpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgTWVkaWFTb3VyY2UgaGFzbid0IHR1cm5lZCBpbnRvIG9wZW4gc3RhdGUsIGFuZCB0aGVyZSdyZSBwZW5kaW5nIHNlZ21lbnRzXG4gICAgICAgICAgICAgICAgLy8gTWFyayBwZW5kaW5nIGVuZE9mU3RyZWFtLCBkZWZlciBjYWxsIHVudGlsIGFsbCBwZW5kaW5nIHNlZ21lbnRzIGFwcGVuZGVkIGNvbXBsZXRlXG4gICAgICAgICAgICAgICAgdGhpcy5faGFzUGVuZGluZ0VvcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNiLnZpZGVvICYmIHNiLnZpZGVvLnVwZGF0aW5nIHx8IHNiLmF1ZGlvICYmIHNiLmF1ZGlvLnVwZGF0aW5nKSB7XG4gICAgICAgICAgICAvLyBJZiBhbnkgc291cmNlYnVmZmVyIGlzIHVwZGF0aW5nLCBkZWZlciBlbmRPZlN0cmVhbSBvcGVyYXRpb25cbiAgICAgICAgICAgIC8vIFNlZSBfb25Tb3VyY2VCdWZmZXJVcGRhdGVFbmQoKVxuICAgICAgICAgICAgdGhpcy5faGFzUGVuZGluZ0VvcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9oYXNQZW5kaW5nRW9zID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBOb3RpZnkgbWVkaWEgZGF0YSBsb2FkaW5nIGNvbXBsZXRlXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGhlbHBmdWwgZm9yIGNvcnJlY3RpbmcgdG90YWwgZHVyYXRpb24gdG8gbWF0Y2ggbGFzdCBtZWRpYSBzZWdtZW50XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgTWVkaWFFbGVtZW50J3MgZW5kZWQgZXZlbnQgbWF5IG5vdCBiZSB0cmlnZ2VyZWRcbiAgICAgICAgICAgIG1zLmVuZE9mU3RyZWFtKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXROZWFyZXN0S2V5ZnJhbWUoZHRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZHJMaXN0LmdldExhc3RTeW5jUG9pbnRCZWZvcmVEdHMoZHRzKTtcbiAgICB9XG5cbiAgICBfbmVlZENsZWFudXBTb3VyY2VCdWZmZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29uZmlnLmF1dG9DbGVhbnVwU291cmNlQnVmZmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVudFRpbWUgPSB0aGlzLl9tZWRpYUVsZW1lbnQuY3VycmVudFRpbWU7XG5cbiAgICAgICAgZm9yIChsZXQgdHlwZSBpbiB0aGlzLl9zb3VyY2VCdWZmZXJzKSB7XG4gICAgICAgICAgICBsZXQgc2IgPSB0aGlzLl9zb3VyY2VCdWZmZXJzW3R5cGVdO1xuICAgICAgICAgICAgaWYgKHNiKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJ1ZmZlcmVkID0gc2IuYnVmZmVyZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcmVkLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VGltZSAtIGJ1ZmZlcmVkLnN0YXJ0KDApID49IHRoaXMuX2NvbmZpZy5hdXRvQ2xlYW51cE1heEJhY2t3YXJkRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF9kb0NsZWFudXBTb3VyY2VCdWZmZXIoKSB7XG4gICAgICAgIGxldCBjdXJyZW50VGltZSA9IHRoaXMuX21lZGlhRWxlbWVudC5jdXJyZW50VGltZTtcblxuICAgICAgICBmb3IgKGxldCB0eXBlIGluIHRoaXMuX3NvdXJjZUJ1ZmZlcnMpIHtcbiAgICAgICAgICAgIGxldCBzYiA9IHRoaXMuX3NvdXJjZUJ1ZmZlcnNbdHlwZV07XG4gICAgICAgICAgICBpZiAoc2IpIHtcbiAgICAgICAgICAgICAgICBsZXQgYnVmZmVyZWQgPSBzYi5idWZmZXJlZDtcbiAgICAgICAgICAgICAgICBsZXQgZG9SZW1vdmUgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gYnVmZmVyZWQuc3RhcnQoaSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlbmQgPSBidWZmZXJlZC5lbmQoaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0IDw9IGN1cnJlbnRUaW1lICYmIGN1cnJlbnRUaW1lIDwgZW5kICsgMykgeyAgLy8gcGFkZGluZyAzIHNlY29uZHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VGltZSAtIHN0YXJ0ID49IHRoaXMuX2NvbmZpZy5hdXRvQ2xlYW51cE1heEJhY2t3YXJkRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb1JlbW92ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZUVuZCA9IGN1cnJlbnRUaW1lIC0gdGhpcy5fY29uZmlnLmF1dG9DbGVhbnVwTWluQmFja3dhcmREdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVtb3ZlUmFuZ2VzW3R5cGVdLnB1c2goe3N0YXJ0OiBzdGFydCwgZW5kOiByZW1vdmVFbmR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbmQgPCBjdXJyZW50VGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9SZW1vdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1JlbW92ZVJhbmdlc1t0eXBlXS5wdXNoKHtzdGFydDogc3RhcnQsIGVuZDogZW5kfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9SZW1vdmUgJiYgIXNiLnVwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvUmVtb3ZlUmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VwZGF0ZU1lZGlhU291cmNlRHVyYXRpb24oKSB7XG4gICAgICAgIGxldCBzYiA9IHRoaXMuX3NvdXJjZUJ1ZmZlcnM7XG4gICAgICAgIGlmICh0aGlzLl9tZWRpYUVsZW1lbnQucmVhZHlTdGF0ZSA9PT0gMCB8fCB0aGlzLl9tZWRpYVNvdXJjZS5yZWFkeVN0YXRlICE9PSAnb3BlbicpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNiLnZpZGVvICYmIHNiLnZpZGVvLnVwZGF0aW5nKSB8fCAoc2IuYXVkaW8gJiYgc2IuYXVkaW8udXBkYXRpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuX21lZGlhU291cmNlLmR1cmF0aW9uO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gdGhpcy5fcGVuZGluZ01lZGlhRHVyYXRpb247XG5cbiAgICAgICAgaWYgKHRhcmdldCA+IDAgJiYgKGlzTmFOKGN1cnJlbnQpIHx8IHRhcmdldCA+IGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBMb2cudih0aGlzLlRBRywgYFVwZGF0ZSBNZWRpYVNvdXJjZSBkdXJhdGlvbiBmcm9tICR7Y3VycmVudH0gdG8gJHt0YXJnZXR9YCk7XG4gICAgICAgICAgICB0aGlzLl9tZWRpYVNvdXJjZS5kdXJhdGlvbiA9IHRhcmdldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3JlcXVpcmVTZXRNZWRpYUR1cmF0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdNZWRpYUR1cmF0aW9uID0gMDtcbiAgICB9XG5cbiAgICBfZG9SZW1vdmVSYW5nZXMoKSB7XG4gICAgICAgIGZvciAobGV0IHR5cGUgaW4gdGhpcy5fcGVuZGluZ1JlbW92ZVJhbmdlcykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9zb3VyY2VCdWZmZXJzW3R5cGVdIHx8IHRoaXMuX3NvdXJjZUJ1ZmZlcnNbdHlwZV0udXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzYiA9IHRoaXMuX3NvdXJjZUJ1ZmZlcnNbdHlwZV07XG4gICAgICAgICAgICBsZXQgcmFuZ2VzID0gdGhpcy5fcGVuZGluZ1JlbW92ZVJhbmdlc1t0eXBlXTtcbiAgICAgICAgICAgIHdoaWxlIChyYW5nZXMubGVuZ3RoICYmICFzYi51cGRhdGluZykge1xuICAgICAgICAgICAgICAgIGxldCByYW5nZSA9IHJhbmdlcy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIHNiLnJlbW92ZShyYW5nZS5zdGFydCwgcmFuZ2UuZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9kb0FwcGVuZFNlZ21lbnRzKCkge1xuICAgICAgICBsZXQgcGVuZGluZ1NlZ21lbnRzID0gdGhpcy5fcGVuZGluZ1NlZ21lbnRzO1xuICAgICAgICBmb3IgKGxldCB0eXBlIGluIHBlbmRpbmdTZWdtZW50cykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9zb3VyY2VCdWZmZXJzW3R5cGVdIHx8IHRoaXMuX3NvdXJjZUJ1ZmZlcnNbdHlwZV0udXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBlbmRpbmdTZWdtZW50c1t0eXBlXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlZ21lbnQgPSBwZW5kaW5nU2VnbWVudHNbdHlwZV0uc2hpZnQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChzZWdtZW50LnRpbWVzdGFtcE9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgTVBFRyBhdWRpbyBzdHJlYW0gaW4gTVNFLCBpZiB1bmJ1ZmZlcmVkLXNlZWtpbmcgb2NjdXJyZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCBleHBsaWNpdGx5IHNldCB0aW1lc3RhbXBPZmZzZXQgdG8gdGhlIGRlc2lyZWQgcG9pbnQgaW4gdGltZWxpbmUgZm9yIG1wZWcgU291cmNlQnVmZmVyLlxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudE9mZnNldCA9IHRoaXMuX3NvdXJjZUJ1ZmZlcnNbdHlwZV0udGltZXN0YW1wT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0T2Zmc2V0ID0gc2VnbWVudC50aW1lc3RhbXBPZmZzZXQgLyAxMDAwOyAgLy8gaW4gc2Vjb25kc1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBkZWx0YSA9IE1hdGguYWJzKGN1cnJlbnRPZmZzZXQgLSB0YXJnZXRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGEgPiAwLjEpIHsgIC8vIElmIHRpbWUgZGVsdGEgPiAxMDBtc1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLnYodGhpcy5UQUcsIGBVcGRhdGUgTVBFRyBhdWRpbyB0aW1lc3RhbXBPZmZzZXQgZnJvbSAke2N1cnJlbnRPZmZzZXR9IHRvICR7dGFyZ2V0T2Zmc2V0fWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc291cmNlQnVmZmVyc1t0eXBlXS50aW1lc3RhbXBPZmZzZXQgPSB0YXJnZXRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlZ21lbnQudGltZXN0YW1wT2Zmc2V0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghc2VnbWVudC5kYXRhIHx8IHNlZ21lbnQuZGF0YS5ieXRlTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSBlbXB0eSBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc291cmNlQnVmZmVyc1t0eXBlXS5hcHBlbmRCdWZmZXIoc2VnbWVudC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNCdWZmZXJGdWxsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAndmlkZW8nICYmIHNlZ21lbnQuaGFzT3duUHJvcGVydHkoJ2luZm8nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faWRyTGlzdC5hcHBlbmRBcnJheShzZWdtZW50LmluZm8uc3luY1BvaW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nU2VnbWVudHNbdHlwZV0udW5zaGlmdChzZWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IDIyKSB7ICAvLyBRdW90YUV4Y2VlZGVkRXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vdGljZSB0aGF0IEZpcmVGb3ggbWF5IG5vdCB0aHJvdyBRdW90YUV4Y2VlZGVkRXJyb3IgaWYgU291cmNlQnVmZmVyIGlzIGZ1bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEN1cnJlbnRseSB3ZSBjYW4gb25seSBkbyBsYXp5LWxvYWQgdG8gYXZvaWQgU291cmNlQnVmZmVyIGJlY29tZSBzY2F0dGVyZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBTb3VyY2VCdWZmZXIgZXZpY3Rpb24gcG9saWN5IG1heSBiZSBjaGFuZ2VkIGluIGZ1dHVyZSB2ZXJzaW9uIG9mIEZpcmVGb3guXG4gICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogUmVsYXRlZCBpc3N1ZXM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjc5ODg1XG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjgwMDIzXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVwb3J0IGJ1ZmZlciBmdWxsLCBhYm9ydCBuZXR3b3JrIElPXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzQnVmZmVyRnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChNU0VFdmVudHMuQlVGRkVSX0ZVTEwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNCdWZmZXJGdWxsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lKHRoaXMuVEFHLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChNU0VFdmVudHMuRVJST1IsIHtjb2RlOiBlcnJvci5jb2RlLCBtc2c6IGVycm9yLm1lc3NhZ2V9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vblNvdXJjZU9wZW4oKSB7XG4gICAgICAgIExvZy52KHRoaXMuVEFHLCAnTWVkaWFTb3VyY2Ugb25Tb3VyY2VPcGVuJyk7XG4gICAgICAgIHRoaXMuX21lZGlhU291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NvdXJjZW9wZW4nLCB0aGlzLmUub25Tb3VyY2VPcGVuKTtcbiAgICAgICAgLy8gZGVmZXJyZWQgc291cmNlYnVmZmVyIGNyZWF0aW9uIC8gaW5pdGlhbGl6YXRpb25cbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdTb3VyY2VCdWZmZXJJbml0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBwZW5kaW5ncyA9IHRoaXMuX3BlbmRpbmdTb3VyY2VCdWZmZXJJbml0O1xuICAgICAgICAgICAgd2hpbGUgKHBlbmRpbmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxldCBzZWdtZW50ID0gcGVuZGluZ3Muc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZEluaXRTZWdtZW50KHNlZ21lbnQsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHRoZXJlIG1heSBiZSBzb21lIHBlbmRpbmcgbWVkaWEgc2VnbWVudHMsIGFwcGVuZCB0aGVtXG4gICAgICAgIGlmICh0aGlzLl9oYXNQZW5kaW5nU2VnbWVudHMoKSkge1xuICAgICAgICAgICAgdGhpcy5fZG9BcHBlbmRTZWdtZW50cygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChNU0VFdmVudHMuU09VUkNFX09QRU4pO1xuICAgIH1cblxuICAgIF9vblNvdXJjZUVuZGVkKCkge1xuICAgICAgICAvLyBmaXJlZCBvbiBlbmRPZlN0cmVhbVxuICAgICAgICBMb2cudih0aGlzLlRBRywgJ01lZGlhU291cmNlIG9uU291cmNlRW5kZWQnKTtcbiAgICB9XG5cbiAgICBfb25Tb3VyY2VDbG9zZSgpIHtcbiAgICAgICAgLy8gZmlyZWQgb24gZGV0YWNoaW5nIGZyb20gbWVkaWEgZWxlbWVudFxuICAgICAgICBMb2cudih0aGlzLlRBRywgJ01lZGlhU291cmNlIG9uU291cmNlQ2xvc2UnKTtcbiAgICAgICAgaWYgKHRoaXMuX21lZGlhU291cmNlICYmIHRoaXMuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9tZWRpYVNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgdGhpcy5lLm9uU291cmNlT3Blbik7XG4gICAgICAgICAgICB0aGlzLl9tZWRpYVNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdzb3VyY2VlbmRlZCcsIHRoaXMuZS5vblNvdXJjZUVuZGVkKTtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhU291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NvdXJjZWNsb3NlJywgdGhpcy5lLm9uU291cmNlQ2xvc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2hhc1BlbmRpbmdTZWdtZW50cygpIHtcbiAgICAgICAgbGV0IHBzID0gdGhpcy5fcGVuZGluZ1NlZ21lbnRzO1xuICAgICAgICByZXR1cm4gcHMudmlkZW8ubGVuZ3RoID4gMCB8fCBwcy5hdWRpby5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIF9oYXNQZW5kaW5nUmVtb3ZlUmFuZ2VzKCkge1xuICAgICAgICBsZXQgcHJyID0gdGhpcy5fcGVuZGluZ1JlbW92ZVJhbmdlcztcbiAgICAgICAgcmV0dXJuIHByci52aWRlby5sZW5ndGggPiAwIHx8IHByci5hdWRpby5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIF9vblNvdXJjZUJ1ZmZlclVwZGF0ZUVuZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlcXVpcmVTZXRNZWRpYUR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVNZWRpYVNvdXJjZUR1cmF0aW9uKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5faGFzUGVuZGluZ1JlbW92ZVJhbmdlcygpKSB7XG4gICAgICAgICAgICB0aGlzLl9kb1JlbW92ZVJhbmdlcygpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2hhc1BlbmRpbmdTZWdtZW50cygpKSB7XG4gICAgICAgICAgICB0aGlzLl9kb0FwcGVuZFNlZ21lbnRzKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5faGFzUGVuZGluZ0Vvcykge1xuICAgICAgICAgICAgdGhpcy5lbmRPZlN0cmVhbSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChNU0VFdmVudHMuVVBEQVRFX0VORCk7XG4gICAgfVxuXG4gICAgX29uU291cmNlQnVmZmVyRXJyb3IoZSkge1xuICAgICAgICBMb2cuZSh0aGlzLlRBRywgYFNvdXJjZUJ1ZmZlciBFcnJvcjogJHtlfWApO1xuICAgICAgICAvLyB0aGlzIGVycm9yIG1pZ2h0IG5vdCBhbHdheXMgYmUgZmF0YWwsIGp1c3QgaWdub3JlIGl0XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1TRUNvbnRyb2xsZXI7XG4iLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3QgTVNFRXZlbnRzID0ge1xuICAgIEVSUk9SOiAnZXJyb3InLFxuICAgIFNPVVJDRV9PUEVOOiAnc291cmNlX29wZW4nLFxuICAgIFVQREFURV9FTkQ6ICd1cGRhdGVfZW5kJyxcbiAgICBCVUZGRVJfRlVMTDogJ2J1ZmZlcl9mdWxsJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTVNFRXZlbnRzOyIsIi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgQmlsaWJpbGkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvciB6aGVuZyBxaWFuIDx4cXFAeHFxLmltPlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgTG9nIGZyb20gJy4uL3V0aWxzL2xvZ2dlci5qcyc7XG5pbXBvcnQgTG9nZ2luZ0NvbnRyb2wgZnJvbSAnLi4vdXRpbHMvbG9nZ2luZy1jb250cm9sLmpzJztcbmltcG9ydCBUcmFuc211eGluZ0NvbnRyb2xsZXIgZnJvbSAnLi90cmFuc211eGluZy1jb250cm9sbGVyLmpzJztcbmltcG9ydCBUcmFuc211eGluZ0V2ZW50cyBmcm9tICcuL3RyYW5zbXV4aW5nLWV2ZW50cy5qcyc7XG5pbXBvcnQgVHJhbnNtdXhpbmdXb3JrZXIgZnJvbSAnLi90cmFuc211eGluZy13b3JrZXIuanMnO1xuaW1wb3J0IE1lZGlhSW5mbyBmcm9tICcuL21lZGlhLWluZm8uanMnO1xuXG5jbGFzcyBUcmFuc211eGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKG1lZGlhRGF0YVNvdXJjZSwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuVEFHID0gJ1RyYW5zbXV4ZXInO1xuICAgICAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLmlzRGVmaW5pdGlvbkNoYW5naW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChjb25maWcuZW5hYmxlV29ya2VyICYmIHR5cGVvZiAoV29ya2VyKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IHdvcmsgPSByZXF1aXJlKCd3ZWJ3b3JraWZ5Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya2VyID0gd29yayhUcmFuc211eGluZ1dvcmtlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya2VyRGVzdHJveWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dvcmtlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5fb25Xb3JrZXJNZXNzYWdlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dvcmtlci5wb3N0TWVzc2FnZSh7Y21kOiAnaW5pdCcsIHBhcmFtOiBbbWVkaWFEYXRhU291cmNlLCBjb25maWddfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lID0ge1xuICAgICAgICAgICAgICAgICAgICBvbkxvZ2dpbmdDb25maWdDaGFuZ2VkOiB0aGlzLl9vbkxvZ2dpbmdDb25maWdDaGFuZ2VkLmJpbmQodGhpcylcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIExvZ2dpbmdDb250cm9sLnJlZ2lzdGVyTGlzdGVuZXIodGhpcy5lLm9uTG9nZ2luZ0NvbmZpZ0NoYW5nZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dvcmtlci5wb3N0TWVzc2FnZSh7Y21kOiAnbG9nZ2luZ19jb25maWcnLCBwYXJhbTogTG9nZ2luZ0NvbnRyb2wuZ2V0Q29uZmlnKCl9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgTG9nLmUodGhpcy5UQUcsICdFcnJvciB3aGlsZSBpbml0aWFsaXplIHRyYW5zbXV4aW5nIHdvcmtlciwgZmFsbGJhY2sgdG8gaW5saW5lIHRyYW5zbXV4aW5nJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250cm9sbGVyID0gbmV3IFRyYW5zbXV4aW5nQ29udHJvbGxlcihtZWRpYURhdGFTb3VyY2UsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb250cm9sbGVyID0gbmV3IFRyYW5zbXV4aW5nQ29udHJvbGxlcihtZWRpYURhdGFTb3VyY2UsIGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jb250cm9sbGVyLl9lbWl0dGVyLm9uKCdtZXRhZGF0YV9hcnJpdmVkJywgb25NZXRhRGF0YSA9PiB7XG4gICAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KCdtZXRhZGF0YV9hcnJpdmVkJywgb25NZXRhRGF0YSk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGxldCBjdGwgPSB0aGlzLl9jb250cm9sbGVyO1xuICAgICAgICAgICAgY3RsLm9uKFRyYW5zbXV4aW5nRXZlbnRzLklPX0VSUk9SLCB0aGlzLl9vbklPRXJyb3IuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICBjdGwub24oVHJhbnNtdXhpbmdFdmVudHMuREVNVVhfRVJST1IsIHRoaXMuX29uRGVtdXhFcnJvci5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIGN0bC5vbihUcmFuc211eGluZ0V2ZW50cy5JTklUX1NFR01FTlQsIHRoaXMuX29uSW5pdFNlZ21lbnQuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICBjdGwub24oVHJhbnNtdXhpbmdFdmVudHMuTUVESUFfU0VHTUVOVCwgdGhpcy5fb25NZWRpYVNlZ21lbnQuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICBjdGwub24oVHJhbnNtdXhpbmdFdmVudHMuTE9BRElOR19DT01QTEVURSwgdGhpcy5fb25Mb2FkaW5nQ29tcGxldGUuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICBjdGwub24oVHJhbnNtdXhpbmdFdmVudHMuUkVDT1ZFUkVEX0VBUkxZX0VPRiwgdGhpcy5fb25SZWNvdmVyZWRFYXJseUVvZi5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIGN0bC5vbihUcmFuc211eGluZ0V2ZW50cy5NRURJQV9JTkZPLCB0aGlzLl9vbk1lZGlhSW5mby5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIGN0bC5vbihUcmFuc211eGluZ0V2ZW50cy5TVEFUSVNUSUNTX0lORk8sIHRoaXMuX29uU3RhdGlzdGljc0luZm8uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICBjdGwub24oVHJhbnNtdXhpbmdFdmVudHMuUkVDT01NRU5EX1NFRUtQT0lOVCwgdGhpcy5fb25SZWNvbW1lbmRTZWVrcG9pbnQuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dvcmtlckRlc3Ryb3lpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3JrZXJEZXN0cm95aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3JrZXIucG9zdE1lc3NhZ2Uoe2NtZDogJ2Rlc3Ryb3knfSk7XG4gICAgICAgICAgICAgICAgTG9nZ2luZ0NvbnRyb2wucmVtb3ZlTGlzdGVuZXIodGhpcy5lLm9uTG9nZ2luZ0NvbmZpZ0NoYW5nZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb250cm9sbGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xsZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9lbWl0dGVyICYmIHRoaXMuX2VtaXR0ZXIuYWRkTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBvZmYoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIgJiYgdGhpcy5fZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cblxuICAgIGhhc1dvcmtlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtlciAhPSBudWxsO1xuICAgIH1cblxuICAgIG9wZW4oKSB7XG4gICAgICAgIGlmICh0aGlzLl93b3JrZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtlci5wb3N0TWVzc2FnZSh7Y21kOiAnc3RhcnQnfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb250cm9sbGVyLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dvcmtlcikge1xuICAgICAgICAgICAgdGhpcy5fd29ya2VyLnBvc3RNZXNzYWdlKHtjbWQ6ICdzdG9wJ30pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbGxlci5zdG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZWVrKG1pbGxpc2Vjb25kcykge1xuICAgICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl93b3JrZXIucG9zdE1lc3NhZ2Uoe2NtZDogJ3NlZWsnLCBwYXJhbTogbWlsbGlzZWNvbmRzfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb250cm9sbGVyLnNlZWsobWlsbGlzZWNvbmRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhdXNlKCkge1xuICAgICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl93b3JrZXIucG9zdE1lc3NhZ2Uoe2NtZDogJ3BhdXNlJ30pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbGxlci5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzdW1lKCkge1xuICAgICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl93b3JrZXIucG9zdE1lc3NhZ2Uoe2NtZDogJ3Jlc3VtZSd9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xsZXIucmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25Jbml0U2VnbWVudCh0eXBlLCBpbml0U2VnbWVudCkge1xuICAgICAgICAvLyBkbyBhc3luYyBpbnZva2VcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyICYmIHRoaXMuX2VtaXR0ZXIuZW1pdChUcmFuc211eGluZ0V2ZW50cy5JTklUX1NFR01FTlQsIHR5cGUsIGluaXRTZWdtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX29uTWVkaWFTZWdtZW50KHR5cGUsIG1lZGlhU2VnbWVudCkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIgJiYgdGhpcy5fZW1pdHRlci5lbWl0KFRyYW5zbXV4aW5nRXZlbnRzLk1FRElBX1NFR01FTlQsIHR5cGUsIG1lZGlhU2VnbWVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9vbkxvYWRpbmdDb21wbGV0ZSgpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyICYmIHRoaXMuX2VtaXR0ZXIuZW1pdChUcmFuc211eGluZ0V2ZW50cy5MT0FESU5HX0NPTVBMRVRFKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX29uUmVjb3ZlcmVkRWFybHlFb2YoKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fZW1pdHRlciAmJiB0aGlzLl9lbWl0dGVyLmVtaXQoVHJhbnNtdXhpbmdFdmVudHMuUkVDT1ZFUkVEX0VBUkxZX0VPRik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9vbk1lZGlhSW5mbyhtZWRpYUluZm8pIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyICYmIHRoaXMuX2VtaXR0ZXIuZW1pdChUcmFuc211eGluZ0V2ZW50cy5NRURJQV9JTkZPLCBtZWRpYUluZm8pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfb25TdGF0aXN0aWNzSW5mbyhzdGF0aXN0aWNzSW5mbykge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIgJiYgdGhpcy5fZW1pdHRlci5lbWl0KFRyYW5zbXV4aW5nRXZlbnRzLlNUQVRJU1RJQ1NfSU5GTywgc3RhdGlzdGljc0luZm8pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfb25JT0Vycm9yKHR5cGUsIGluZm8pIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyICYmIHRoaXMuX2VtaXR0ZXIuZW1pdChUcmFuc211eGluZ0V2ZW50cy5JT19FUlJPUiwgdHlwZSwgaW5mbyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9vbkRlbXV4RXJyb3IodHlwZSwgaW5mbykge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIgJiYgdGhpcy5fZW1pdHRlci5lbWl0KFRyYW5zbXV4aW5nRXZlbnRzLkRFTVVYX0VSUk9SLCB0eXBlLCBpbmZvKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX29uUmVjb21tZW5kU2Vla3BvaW50KG1pbGxpc2Vjb25kcykge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIgJiYgdGhpcy5fZW1pdHRlci5lbWl0KFRyYW5zbXV4aW5nRXZlbnRzLlJFQ09NTUVORF9TRUVLUE9JTlQsIG1pbGxpc2Vjb25kcyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9vbkxvZ2dpbmdDb25maWdDaGFuZ2VkKGNvbmZpZykge1xuICAgICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl93b3JrZXIucG9zdE1lc3NhZ2Uoe2NtZDogJ2xvZ2dpbmdfY29uZmlnJywgcGFyYW06IGNvbmZpZ30pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uV29ya2VyTWVzc2FnZShlKSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gZS5kYXRhO1xuICAgICAgICBsZXQgZGF0YSA9IG1lc3NhZ2UuZGF0YTtcblxuICAgICAgICBpZiAobWVzc2FnZS5tc2cgPT09ICdkZXN0cm95ZWQnIHx8IHRoaXMuX3dvcmtlckRlc3Ryb3lpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtlckRlc3Ryb3lpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtlciA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UubXNnKSB7XG4gICAgICAgICAgICBjYXNlIFRyYW5zbXV4aW5nRXZlbnRzLklOSVRfU0VHTUVOVDpcbiAgICAgICAgICAgIGNhc2UgVHJhbnNtdXhpbmdFdmVudHMuTUVESUFfU0VHTUVOVDpcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQobWVzc2FnZS5tc2csIGRhdGEudHlwZSwgZGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgVHJhbnNtdXhpbmdFdmVudHMuTE9BRElOR19DT01QTEVURTpcbiAgICAgICAgICAgIGNhc2UgVHJhbnNtdXhpbmdFdmVudHMuUkVDT1ZFUkVEX0VBUkxZX0VPRjpcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQobWVzc2FnZS5tc2cpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUcmFuc211eGluZ0V2ZW50cy5NRURJQV9JTkZPOlxuICAgICAgICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihkYXRhLCBNZWRpYUluZm8ucHJvdG90eXBlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQobWVzc2FnZS5tc2csIGRhdGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUcmFuc211eGluZ0V2ZW50cy5TVEFUSVNUSUNTX0lORk86XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KG1lc3NhZ2UubXNnLCBkYXRhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgVHJhbnNtdXhpbmdFdmVudHMuSU9fRVJST1I6XG4gICAgICAgICAgICBjYXNlIFRyYW5zbXV4aW5nRXZlbnRzLkRFTVVYX0VSUk9SOlxuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChtZXNzYWdlLm1zZywgZGF0YS50eXBlLCBkYXRhLmluZm8pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUcmFuc211eGluZ0V2ZW50cy5SRUNPTU1FTkRfU0VFS1BPSU5UOlxuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChtZXNzYWdlLm1zZywgZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsb2djYXRfY2FsbGJhY2snOlxuICAgICAgICAgICAgICAgIExvZy5lbWl0dGVyLmVtaXQoJ2xvZycsIGRhdGEudHlwZSwgZGF0YS5sb2djYXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBUcmFuc211eGVyO1xuIiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcbmltcG9ydCBMb2cgZnJvbSAnLi4vdXRpbHMvbG9nZ2VyLmpzJztcbmltcG9ydCBCcm93c2VyIGZyb20gJy4uL3V0aWxzL2Jyb3dzZXIuanMnO1xuaW1wb3J0IE1lZGlhSW5mbyBmcm9tICcuL21lZGlhLWluZm8uanMnO1xuaW1wb3J0IEZMVkRlbXV4ZXIgZnJvbSAnLi4vZGVtdXgvZmx2LWRlbXV4ZXIuanMnO1xuaW1wb3J0IE1QNFJlbXV4ZXIgZnJvbSAnLi4vcmVtdXgvbXA0LXJlbXV4ZXIuanMnO1xuaW1wb3J0IERlbXV4RXJyb3JzIGZyb20gJy4uL2RlbXV4L2RlbXV4LWVycm9ycy5qcyc7XG5pbXBvcnQgSU9Db250cm9sbGVyIGZyb20gJy4uL2lvL2lvLWNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IFRyYW5zbXV4aW5nRXZlbnRzIGZyb20gJy4vdHJhbnNtdXhpbmctZXZlbnRzLmpzJztcbmltcG9ydCB7TG9hZGVyU3RhdHVzLCBMb2FkZXJFcnJvcnN9IGZyb20gJy4uL2lvL2xvYWRlci5qcyc7XG5cbi8vIFRyYW5zbXV4aW5nIChJTywgRGVtdXhpbmcsIFJlbXV4aW5nKSBjb250cm9sbGVyLCB3aXRoIG11bHRpcGFydCBzdXBwb3J0XG5jbGFzcyBUcmFuc211eGluZ0NvbnRyb2xsZXIge1xuXG4gICAgY29uc3RydWN0b3IobWVkaWFEYXRhU291cmNlLCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5UQUcgPSAnVHJhbnNtdXhpbmdDb250cm9sbGVyJztcbiAgICAgICAgdGhpcy5fZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG5cbiAgICAgICAgLy8gdHJlYXQgc2luZ2xlIHBhcnQgbWVkaWEgYXMgbXVsdGlwYXJ0IG1lZGlhLCB3aGljaCBoYXMgb25seSBvbmUgc2VnbWVudFxuICAgICAgICBpZiAoIW1lZGlhRGF0YVNvdXJjZS5zZWdtZW50cykge1xuICAgICAgICAgICAgbWVkaWFEYXRhU291cmNlLnNlZ21lbnRzID0gW3tcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogbWVkaWFEYXRhU291cmNlLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGZpbGVzaXplOiBtZWRpYURhdGFTb3VyY2UuZmlsZXNpemUsXG4gICAgICAgICAgICAgICAgdXJsOiBtZWRpYURhdGFTb3VyY2UudXJsXG4gICAgICAgICAgICB9XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpbGwgaW4gZGVmYXVsdCBJTyBwYXJhbXMgaWYgbm90IGV4aXN0c1xuICAgICAgICBpZiAodHlwZW9mIG1lZGlhRGF0YVNvdXJjZS5jb3JzICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIG1lZGlhRGF0YVNvdXJjZS5jb3JzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG1lZGlhRGF0YVNvdXJjZS53aXRoQ3JlZGVudGlhbHMgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgbWVkaWFEYXRhU291cmNlLndpdGhDcmVkZW50aWFscyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbWVkaWFEYXRhU291cmNlID0gbWVkaWFEYXRhU291cmNlO1xuICAgICAgICB0aGlzLl9jdXJyZW50U2VnbWVudEluZGV4ID0gMDtcbiAgICAgICAgbGV0IHRvdGFsRHVyYXRpb24gPSAwO1xuXG4gICAgICAgIHRoaXMuX21lZGlhRGF0YVNvdXJjZS5zZWdtZW50cy5mb3JFYWNoKChzZWdtZW50KSA9PiB7XG4gICAgICAgICAgICAvLyB0aW1lc3RhbXBCYXNlIGZvciBlYWNoIHNlZ21lbnQsIGFuZCBjYWxjdWxhdGUgdG90YWwgZHVyYXRpb25cbiAgICAgICAgICAgIHNlZ21lbnQudGltZXN0YW1wQmFzZSA9IHRvdGFsRHVyYXRpb247XG4gICAgICAgICAgICB0b3RhbER1cmF0aW9uICs9IHNlZ21lbnQuZHVyYXRpb247XG4gICAgICAgICAgICAvLyBwYXJhbXMgbmVlZGVkIGJ5IElPQ29udHJvbGxlclxuICAgICAgICAgICAgc2VnbWVudC5jb3JzID0gbWVkaWFEYXRhU291cmNlLmNvcnM7XG4gICAgICAgICAgICBzZWdtZW50LndpdGhDcmVkZW50aWFscyA9IG1lZGlhRGF0YVNvdXJjZS53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgICAgICAvLyByZWZlcnJlciBwb2xpY3kgY29udHJvbCwgaWYgZXhpc3RcbiAgICAgICAgICAgIGlmIChjb25maWcucmVmZXJyZXJQb2xpY3kpIHtcbiAgICAgICAgICAgICAgICBzZWdtZW50LnJlZmVycmVyUG9saWN5ID0gY29uZmlnLnJlZmVycmVyUG9saWN5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWlzTmFOKHRvdGFsRHVyYXRpb24pICYmIHRoaXMuX21lZGlhRGF0YVNvdXJjZS5kdXJhdGlvbiAhPT0gdG90YWxEdXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fbWVkaWFEYXRhU291cmNlLmR1cmF0aW9uID0gdG90YWxEdXJhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21lZGlhSW5mbyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2RlbXV4ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9yZW11eGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5faW9jdGwgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX3BlbmRpbmdTZWVrVGltZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdSZXNvbHZlU2Vla1BvaW50ID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9zdGF0aXN0aWNzUmVwb3J0ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX21lZGlhSW5mbyA9IG51bGw7XG4gICAgICAgIHRoaXMuX21lZGlhRGF0YVNvdXJjZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuX3N0YXRpc3RpY3NSZXBvcnRlcikge1xuICAgICAgICAgICAgdGhpcy5fZGlzYWJsZVN0YXRpc3RpY3NSZXBvcnRlcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pb2N0bCkge1xuICAgICAgICAgICAgdGhpcy5faW9jdGwuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5faW9jdGwgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kZW11eGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9kZW11eGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuX2RlbXV4ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yZW11eGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW11eGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbXV4ZXIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5fZW1pdHRlciA9IG51bGw7XG4gICAgfVxuXG4gICAgb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuYWRkTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBvZmYoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5fbG9hZFNlZ21lbnQoMCk7XG4gICAgICAgIHRoaXMuX2VuYWJsZVN0YXRpc3RpY3NSZXBvcnRlcigpO1xuICAgIH1cblxuICAgIF9sb2FkU2VnbWVudChzZWdtZW50SW5kZXgsIG9wdGlvbmFsRnJvbSkge1xuICAgICAgICB0aGlzLl9jdXJyZW50U2VnbWVudEluZGV4ID0gc2VnbWVudEluZGV4O1xuICAgICAgICBsZXQgZGF0YVNvdXJjZSA9IHRoaXMuX21lZGlhRGF0YVNvdXJjZS5zZWdtZW50c1tzZWdtZW50SW5kZXhdO1xuXG4gICAgICAgIGxldCBpb2N0bCA9IHRoaXMuX2lvY3RsID0gbmV3IElPQ29udHJvbGxlcihkYXRhU291cmNlLCB0aGlzLl9jb25maWcsIHNlZ21lbnRJbmRleCk7XG4gICAgICAgIGlvY3RsLm9uRXJyb3IgPSB0aGlzLl9vbklPRXhjZXB0aW9uLmJpbmQodGhpcyk7XG4gICAgICAgIGlvY3RsLm9uU2Vla2VkID0gdGhpcy5fb25JT1NlZWtlZC5iaW5kKHRoaXMpO1xuICAgICAgICBpb2N0bC5vbkNvbXBsZXRlID0gdGhpcy5fb25JT0NvbXBsZXRlLmJpbmQodGhpcyk7XG4gICAgICAgIGlvY3RsLm9uUmVkaXJlY3QgPSB0aGlzLl9vbklPUmVkaXJlY3QuYmluZCh0aGlzKTtcbiAgICAgICAgaW9jdGwub25SZWNvdmVyZWRFYXJseUVvZiA9IHRoaXMuX29uSU9SZWNvdmVyZWRFYXJseUVvZi5iaW5kKHRoaXMpO1xuXG4gICAgICAgIGlmIChvcHRpb25hbEZyb20pIHtcbiAgICAgICAgICAgIHRoaXMuX2RlbXV4ZXIuYmluZERhdGFTb3VyY2UodGhpcy5faW9jdGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW9jdGwub25EYXRhQXJyaXZhbCA9IHRoaXMuX29uSW5pdENodW5rQXJyaXZhbC5iaW5kKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW9jdGwub3BlbihvcHRpb25hbEZyb20pO1xuICAgIH1cblxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsQWJvcnQoKTtcbiAgICAgICAgdGhpcy5fZGlzYWJsZVN0YXRpc3RpY3NSZXBvcnRlcigpO1xuICAgIH1cblxuICAgIF9pbnRlcm5hbEFib3J0KCkge1xuICAgICAgICBpZiAodGhpcy5faW9jdGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2lvY3RsLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuX2lvY3RsID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhdXNlKCkgeyAgLy8gdGFrZSBhIHJlc3RcbiAgICAgICAgaWYgKHRoaXMuX2lvY3RsICYmIHRoaXMuX2lvY3RsLmlzV29ya2luZygpKSB7XG4gICAgICAgICAgICB0aGlzLl9pb2N0bC5wYXVzZSgpO1xuICAgICAgICAgICAgdGhpcy5fZGlzYWJsZVN0YXRpc3RpY3NSZXBvcnRlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzdW1lKCkge1xuICAgICAgICBpZiAodGhpcy5faW9jdGwgJiYgdGhpcy5faW9jdGwuaXNQYXVzZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5faW9jdGwucmVzdW1lKCk7XG4gICAgICAgICAgICB0aGlzLl9lbmFibGVTdGF0aXN0aWNzUmVwb3J0ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlZWsobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIGlmICh0aGlzLl9tZWRpYUluZm8gPT0gbnVsbCB8fCAhdGhpcy5fbWVkaWFJbmZvLmlzU2Vla2FibGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRhcmdldFNlZ21lbnRJbmRleCA9IHRoaXMuX3NlYXJjaFNlZ21lbnRJbmRleENvbnRhaW5zKG1pbGxpc2Vjb25kcyk7XG5cbiAgICAgICAgaWYgKHRhcmdldFNlZ21lbnRJbmRleCA9PT0gdGhpcy5fY3VycmVudFNlZ21lbnRJbmRleCkge1xuICAgICAgICAgICAgLy8gaW50cmEtc2VnbWVudCBzZWVraW5nXG4gICAgICAgICAgICBsZXQgc2VnbWVudEluZm8gPSB0aGlzLl9tZWRpYUluZm8uc2VnbWVudHNbdGFyZ2V0U2VnbWVudEluZGV4XTtcblxuICAgICAgICAgICAgaWYgKHNlZ21lbnRJbmZvID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgc2VnbWVudCBsb2FkaW5nIHN0YXJ0ZWQsIGJ1dCBtZWRpYWluZm8gaGFzbid0IHJlY2VpdmVkIHlldFxuICAgICAgICAgICAgICAgIC8vIHdhaXQgZm9yIHRoZSBtZXRhZGF0YSBsb2FkZWQsIHRoZW4gc2VlayB0byBleHBlY3RlZCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdTZWVrVGltZSA9IG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGtleWZyYW1lID0gc2VnbWVudEluZm8uZ2V0TmVhcmVzdEtleWZyYW1lKG1pbGxpc2Vjb25kcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtdXhlci5zZWVrKGtleWZyYW1lLm1pbGxpc2Vjb25kcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5faW9jdGwuc2VlayhrZXlmcmFtZS5maWxlcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIC8vIFdpbGwgYmUgcmVzb2x2ZWQgaW4gX29uUmVtdXhlck1lZGlhU2VnbWVudEFycml2YWwoKVxuICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdSZXNvbHZlU2Vla1BvaW50ID0ga2V5ZnJhbWUubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY3Jvc3Mtc2VnbWVudCBzZWVraW5nXG4gICAgICAgICAgICBsZXQgdGFyZ2V0U2VnbWVudEluZm8gPSB0aGlzLl9tZWRpYUluZm8uc2VnbWVudHNbdGFyZ2V0U2VnbWVudEluZGV4XTtcblxuICAgICAgICAgICAgaWYgKHRhcmdldFNlZ21lbnRJbmZvID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIHRhcmdldCBzZWdtZW50IGhhc24ndCBiZWVuIGxvYWRlZC4gV2UgbmVlZCBtZXRhZGF0YSB0aGVuIHNlZWsgdG8gZXhwZWN0ZWQgdGltZVxuICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdTZWVrVGltZSA9IG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm5hbEFib3J0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtdXhlci5zZWVrKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtdXhlci5pbnNlcnREaXNjb250aW51aXR5KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9hZFNlZ21lbnQodGFyZ2V0U2VnbWVudEluZGV4KTtcbiAgICAgICAgICAgICAgICAvLyBIZXJlIHdlIHdhaXQgZm9yIHRoZSBtZXRhZGF0YSBsb2FkZWQsIHRoZW4gc2VlayB0byBleHBlY3RlZCBwb3NpdGlvblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRhcmdldCBzZWdtZW50J3MgbWV0YWRhdGEsIGRpcmVjdCBzZWVrIHRvIHRhcmdldCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIGxldCBrZXlmcmFtZSA9IHRhcmdldFNlZ21lbnRJbmZvLmdldE5lYXJlc3RLZXlmcmFtZShtaWxsaXNlY29uZHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsQWJvcnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW11eGVyLnNlZWsobWlsbGlzZWNvbmRzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW11eGVyLmluc2VydERpc2NvbnRpbnVpdHkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZW11eGVyLnJlc2V0TWVkaWFJbmZvKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVtdXhlci50aW1lc3RhbXBCYXNlID0gdGhpcy5fbWVkaWFEYXRhU291cmNlLnNlZ21lbnRzW3RhcmdldFNlZ21lbnRJbmRleF0udGltZXN0YW1wQmFzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkU2VnbWVudCh0YXJnZXRTZWdtZW50SW5kZXgsIGtleWZyYW1lLmZpbGVwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1Jlc29sdmVTZWVrUG9pbnQgPSBrZXlmcmFtZS5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVwb3J0U2VnbWVudE1lZGlhSW5mbyh0YXJnZXRTZWdtZW50SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZW5hYmxlU3RhdGlzdGljc1JlcG9ydGVyKCk7XG4gICAgfVxuXG4gICAgX3NlYXJjaFNlZ21lbnRJbmRleENvbnRhaW5zKG1pbGxpc2Vjb25kcykge1xuICAgICAgICBsZXQgc2VnbWVudHMgPSB0aGlzLl9tZWRpYURhdGFTb3VyY2Uuc2VnbWVudHM7XG4gICAgICAgIGxldCBpZHggPSBzZWdtZW50cy5sZW5ndGggLSAxO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChtaWxsaXNlY29uZHMgPCBzZWdtZW50c1tpXS50aW1lc3RhbXBCYXNlKSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlkeDtcbiAgICB9XG5cbiAgICBfb25Jbml0Q2h1bmtBcnJpdmFsKGRhdGEsIGJ5dGVTdGFydCkge1xuICAgICAgICBsZXQgcHJvYmVEYXRhID0gbnVsbDtcbiAgICAgICAgbGV0IGNvbnN1bWVkID0gMDtcblxuICAgICAgICBpZiAoYnl0ZVN0YXJ0ID4gMCkge1xuICAgICAgICAgICAgLy8gSU9Db250cm9sbGVyIHNlZWtlZCBpbW1lZGlhdGVseSBhZnRlciBvcGVuZWQsIGJ5dGVTdGFydCA+IDAgY2FsbGJhY2sgbWF5IHJlY2VpdmVkXG4gICAgICAgICAgICB0aGlzLl9kZW11eGVyLmJpbmREYXRhU291cmNlKHRoaXMuX2lvY3RsKTtcbiAgICAgICAgICAgIHRoaXMuX2RlbXV4ZXIudGltZXN0YW1wQmFzZSA9IHRoaXMuX21lZGlhRGF0YVNvdXJjZS5zZWdtZW50c1t0aGlzLl9jdXJyZW50U2VnbWVudEluZGV4XS50aW1lc3RhbXBCYXNlO1xuXG4gICAgICAgICAgICBjb25zdW1lZCA9IHRoaXMuX2RlbXV4ZXIucGFyc2VDaHVua3MoZGF0YSwgYnl0ZVN0YXJ0KTtcbiAgICAgICAgfSBlbHNlIGlmICgocHJvYmVEYXRhID0gRkxWRGVtdXhlci5wcm9iZShkYXRhKSkubWF0Y2gpIHtcbiAgICAgICAgICAgIC8vIEFsd2F5cyBjcmVhdGUgbmV3IEZMVkRlbXV4ZXJcbiAgICAgICAgICAgIHRoaXMuX2RlbXV4ZXIgPSBuZXcgRkxWRGVtdXhlcihwcm9iZURhdGEsIHRoaXMuX2NvbmZpZyk7XG5cbiAgICAgICAgICAgIHRoaXMuX2RlbXV4ZXIuX2VtaXR0ZXIub24oJ21ldGFkYXRhX2Fycml2ZWQnLCBvbk1ldGFEYXRhID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KCdtZXRhZGF0YV9hcnJpdmVkJywgb25NZXRhRGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3JlbXV4ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW11eGVyID0gbmV3IE1QNFJlbXV4ZXIodGhpcy5fY29uZmlnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IG1kcyA9IHRoaXMuX21lZGlhRGF0YVNvdXJjZTtcbiAgICAgICAgICAgIGlmIChtZHMuZHVyYXRpb24gIT0gdW5kZWZpbmVkICYmICFpc05hTihtZHMuZHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVtdXhlci5vdmVycmlkZWREdXJhdGlvbiA9IG1kcy5kdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWRzLmhhc0F1ZGlvID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZW11eGVyLm92ZXJyaWRlZEhhc0F1ZGlvID0gbWRzLmhhc0F1ZGlvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZHMuaGFzVmlkZW8gPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlbXV4ZXIub3ZlcnJpZGVkSGFzVmlkZW8gPSBtZHMuaGFzVmlkZW87XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2RlbXV4ZXIudGltZXN0YW1wQmFzZSA9IG1kcy5zZWdtZW50c1t0aGlzLl9jdXJyZW50U2VnbWVudEluZGV4XS50aW1lc3RhbXBCYXNlO1xuXG4gICAgICAgICAgICB0aGlzLl9kZW11eGVyLm9uRXJyb3IgPSB0aGlzLl9vbkRlbXV4RXhjZXB0aW9uLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9kZW11eGVyLm9uTWVkaWFJbmZvID0gdGhpcy5fb25NZWRpYUluZm8uYmluZCh0aGlzKTtcblxuICAgICAgICAgICAgdGhpcy5fcmVtdXhlci5iaW5kRGF0YVNvdXJjZSh0aGlzLl9kZW11eGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgLmJpbmREYXRhU291cmNlKHRoaXMuX2lvY3RsXG4gICAgICAgICAgICApKTtcblxuICAgICAgICAgICAgdGhpcy5fcmVtdXhlci5vbkluaXRTZWdtZW50ID0gdGhpcy5fb25SZW11eGVySW5pdFNlZ21lbnRBcnJpdmFsLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9yZW11eGVyLm9uTWVkaWFTZWdtZW50ID0gdGhpcy5fb25SZW11eGVyTWVkaWFTZWdtZW50QXJyaXZhbC5iaW5kKHRoaXMpO1xuXG4gICAgICAgICAgICBjb25zdW1lZCA9IHRoaXMuX2RlbXV4ZXIucGFyc2VDaHVua3MoZGF0YSwgYnl0ZVN0YXJ0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2JlRGF0YSA9IG51bGw7XG4gICAgICAgICAgICBMb2cuZSh0aGlzLlRBRywgJ05vbi1GTFYsIFVuc3VwcG9ydGVkIG1lZGlhIHR5cGUhJyk7XG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm5hbEFib3J0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChUcmFuc211eGluZ0V2ZW50cy5ERU1VWF9FUlJPUiwgRGVtdXhFcnJvcnMuRk9STUFUX1VOU1VQUE9SVEVELCAnTm9uLUZMViwgVW5zdXBwb3J0ZWQgbWVkaWEgdHlwZScpO1xuXG4gICAgICAgICAgICBjb25zdW1lZCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uc3VtZWQ7XG4gICAgfVxuXG4gICAgX29uTWVkaWFJbmZvKG1lZGlhSW5mbykge1xuICAgICAgICBpZiAodGhpcy5fbWVkaWFJbmZvID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFN0b3JlIGZpcnN0IHNlZ21lbnQncyBtZWRpYWluZm8gYXMgZ2xvYmFsIG1lZGlhSW5mb1xuICAgICAgICAgICAgdGhpcy5fbWVkaWFJbmZvID0gT2JqZWN0LmFzc2lnbih7fSwgbWVkaWFJbmZvKTtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhSW5mby5rZXlmcmFtZXNJbmRleCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9tZWRpYUluZm8uc2VnbWVudHMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhSW5mby5zZWdtZW50Q291bnQgPSB0aGlzLl9tZWRpYURhdGFTb3VyY2Uuc2VnbWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMuX21lZGlhSW5mbywgTWVkaWFJbmZvLnByb3RvdHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2VnbWVudEluZm8gPSBPYmplY3QuYXNzaWduKHt9LCBtZWRpYUluZm8pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc2VnbWVudEluZm8sIE1lZGlhSW5mby5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLl9tZWRpYUluZm8uc2VnbWVudHNbdGhpcy5fY3VycmVudFNlZ21lbnRJbmRleF0gPSBzZWdtZW50SW5mbztcblxuICAgICAgICAvLyBub3RpZnkgbWVkaWFJbmZvIHVwZGF0ZVxuICAgICAgICB0aGlzLl9yZXBvcnRTZWdtZW50TWVkaWFJbmZvKHRoaXMuX2N1cnJlbnRTZWdtZW50SW5kZXgpO1xuXG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nU2Vla1RpbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldCA9IHRoaXMuX3BlbmRpbmdTZWVrVGltZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nU2Vla1RpbWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Vlayh0YXJnZXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25JT1NlZWtlZCgpIHtcbiAgICAgICAgdGhpcy5fcmVtdXhlci5pbnNlcnREaXNjb250aW51aXR5KCk7XG4gICAgfVxuXG4gICAgX29uSU9Db21wbGV0ZShleHRyYURhdGEpIHtcbiAgICAgICAgbGV0IHNlZ21lbnRJbmRleCA9IGV4dHJhRGF0YTtcbiAgICAgICAgbGV0IG5leHRTZWdtZW50SW5kZXggPSBzZWdtZW50SW5kZXggKyAxO1xuXG4gICAgICAgIGlmIChuZXh0U2VnbWVudEluZGV4IDwgdGhpcy5fbWVkaWFEYXRhU291cmNlLnNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxBYm9ydCgpO1xuICAgICAgICAgICAgdGhpcy5fbG9hZFNlZ21lbnQobmV4dFNlZ21lbnRJbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZW11eGVyLmZsdXNoU3Rhc2hlZFNhbXBsZXMoKTtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChUcmFuc211eGluZ0V2ZW50cy5MT0FESU5HX0NPTVBMRVRFKTtcbiAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVTdGF0aXN0aWNzUmVwb3J0ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbklPUmVkaXJlY3QocmVkaXJlY3RlZFVSTCkge1xuICAgICAgICBsZXQgc2VnbWVudEluZGV4ID0gdGhpcy5faW9jdGwuZXh0cmFEYXRhO1xuICAgICAgICB0aGlzLl9tZWRpYURhdGFTb3VyY2Uuc2VnbWVudHNbc2VnbWVudEluZGV4XS5yZWRpcmVjdGVkVVJMID0gcmVkaXJlY3RlZFVSTDtcbiAgICB9XG5cbiAgICBfb25JT1JlY292ZXJlZEVhcmx5RW9mKCkge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoVHJhbnNtdXhpbmdFdmVudHMuUkVDT1ZFUkVEX0VBUkxZX0VPRik7XG4gICAgfVxuXG4gICAgX29uSU9FeGNlcHRpb24odHlwZSwgaW5mbykge1xuICAgICAgICBMb2cuZSh0aGlzLlRBRywgYElPRXhjZXB0aW9uOiB0eXBlID0gJHt0eXBlfSwgY29kZSA9ICR7aW5mby5jb2RlfSwgbXNnID0gJHtpbmZvLm1zZ31gKTtcbiAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KFRyYW5zbXV4aW5nRXZlbnRzLklPX0VSUk9SLCB0eXBlLCBpbmZvKTtcbiAgICAgICAgdGhpcy5fZGlzYWJsZVN0YXRpc3RpY3NSZXBvcnRlcigpO1xuICAgIH1cblxuICAgIF9vbkRlbXV4RXhjZXB0aW9uKHR5cGUsIGluZm8pIHtcbiAgICAgICAgTG9nLmUodGhpcy5UQUcsIGBEZW11eEV4Y2VwdGlvbjogdHlwZSA9ICR7dHlwZX0sIGluZm8gPSAke2luZm99YCk7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChUcmFuc211eGluZ0V2ZW50cy5ERU1VWF9FUlJPUiwgdHlwZSwgaW5mbyk7XG4gICAgfVxuXG4gICAgX29uUmVtdXhlckluaXRTZWdtZW50QXJyaXZhbCh0eXBlLCBpbml0U2VnbWVudCkge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoVHJhbnNtdXhpbmdFdmVudHMuSU5JVF9TRUdNRU5ULCB0eXBlLCBpbml0U2VnbWVudCk7XG4gICAgfVxuXG4gICAgX29uUmVtdXhlck1lZGlhU2VnbWVudEFycml2YWwodHlwZSwgbWVkaWFTZWdtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nU2Vla1RpbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gTWVkaWEgc2VnbWVudHMgYWZ0ZXIgbmV3LXNlZ21lbnQgY3Jvc3Mtc2Vla2luZyBzaG91bGQgYmUgZHJvcHBlZC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoVHJhbnNtdXhpbmdFdmVudHMuTUVESUFfU0VHTUVOVCwgdHlwZSwgbWVkaWFTZWdtZW50KTtcblxuICAgICAgICAvLyBSZXNvbHZlIHBlbmRpbmcgc2Vla1BvaW50XG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nUmVzb2x2ZVNlZWtQb2ludCAhPSBudWxsICYmIHR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgIGxldCBzeW5jUG9pbnRzID0gbWVkaWFTZWdtZW50LmluZm8uc3luY1BvaW50cztcbiAgICAgICAgICAgIGxldCBzZWVrcG9pbnQgPSB0aGlzLl9wZW5kaW5nUmVzb2x2ZVNlZWtQb2ludDtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdSZXNvbHZlU2Vla1BvaW50ID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gU2FmYXJpOiBQYXNzIFBUUyBmb3IgcmVjb21tZW5kX3NlZWtwb2ludFxuICAgICAgICAgICAgaWYgKEJyb3dzZXIuc2FmYXJpICYmIHN5bmNQb2ludHMubGVuZ3RoID4gMCAmJiBzeW5jUG9pbnRzWzBdLm9yaWdpbmFsRHRzID09PSBzZWVrcG9pbnQpIHtcbiAgICAgICAgICAgICAgICBzZWVrcG9pbnQgPSBzeW5jUG9pbnRzWzBdLnB0cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVsc2U6IHVzZSBvcmlnaW5hbCBEVFMgKGtleWZyYW1lLm1pbGxpc2Vjb25kcylcblxuICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KFRyYW5zbXV4aW5nRXZlbnRzLlJFQ09NTUVORF9TRUVLUE9JTlQsIHNlZWtwb2ludCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZW5hYmxlU3RhdGlzdGljc1JlcG9ydGVyKCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGlzdGljc1JlcG9ydGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRpc3RpY3NSZXBvcnRlciA9IHNlbGYuc2V0SW50ZXJ2YWwoXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVwb3J0U3RhdGlzdGljc0luZm8uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5zdGF0aXN0aWNzSW5mb1JlcG9ydEludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9kaXNhYmxlU3RhdGlzdGljc1JlcG9ydGVyKCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGlzdGljc1JlcG9ydGVyKSB7XG4gICAgICAgICAgICBzZWxmLmNsZWFySW50ZXJ2YWwodGhpcy5fc3RhdGlzdGljc1JlcG9ydGVyKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRpc3RpY3NSZXBvcnRlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfcmVwb3J0U2VnbWVudE1lZGlhSW5mbyhzZWdtZW50SW5kZXgpIHtcbiAgICAgICAgbGV0IHNlZ21lbnRJbmZvID0gdGhpcy5fbWVkaWFJbmZvLnNlZ21lbnRzW3NlZ21lbnRJbmRleF07XG4gICAgICAgIGxldCBleHBvcnRJbmZvID0gT2JqZWN0LmFzc2lnbih7fSwgc2VnbWVudEluZm8pO1xuXG4gICAgICAgIGV4cG9ydEluZm8uZHVyYXRpb24gPSB0aGlzLl9tZWRpYUluZm8uZHVyYXRpb247XG4gICAgICAgIGV4cG9ydEluZm8uc2VnbWVudENvdW50ID0gdGhpcy5fbWVkaWFJbmZvLnNlZ21lbnRDb3VudDtcbiAgICAgICAgZGVsZXRlIGV4cG9ydEluZm8uc2VnbWVudHM7XG4gICAgICAgIGRlbGV0ZSBleHBvcnRJbmZvLmtleWZyYW1lc0luZGV4O1xuXG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChUcmFuc211eGluZ0V2ZW50cy5NRURJQV9JTkZPLCBleHBvcnRJbmZvKTtcbiAgICB9XG5cbiAgICBfcmVwb3J0U3RhdGlzdGljc0luZm8oKSB7XG4gICAgICAgIGxldCBpbmZvID0ge307XG5cbiAgICAgICAgaW5mby51cmwgPSB0aGlzLl9pb2N0bC5jdXJyZW50VVJMO1xuICAgICAgICBpbmZvLmhhc1JlZGlyZWN0ID0gdGhpcy5faW9jdGwuaGFzUmVkaXJlY3Q7XG4gICAgICAgIGlmIChpbmZvLmhhc1JlZGlyZWN0KSB7XG4gICAgICAgICAgICBpbmZvLnJlZGlyZWN0ZWRVUkwgPSB0aGlzLl9pb2N0bC5jdXJyZW50UmVkaXJlY3RlZFVSTDtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZm8uc3BlZWQgPSB0aGlzLl9pb2N0bC5jdXJyZW50U3BlZWQ7XG4gICAgICAgIGluZm8ubG9hZGVyVHlwZSA9IHRoaXMuX2lvY3RsLmxvYWRlclR5cGU7XG4gICAgICAgIGluZm8uY3VycmVudFNlZ21lbnRJbmRleCA9IHRoaXMuX2N1cnJlbnRTZWdtZW50SW5kZXg7XG4gICAgICAgIGluZm8udG90YWxTZWdtZW50Q291bnQgPSB0aGlzLl9tZWRpYURhdGFTb3VyY2Uuc2VnbWVudHMubGVuZ3RoO1xuXG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChUcmFuc211eGluZ0V2ZW50cy5TVEFUSVNUSUNTX0lORk8sIGluZm8pO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBUcmFuc211eGluZ0NvbnRyb2xsZXI7XG4iLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3QgVHJhbnNtdXhpbmdFdmVudHMgPSB7XG4gICAgSU9fRVJST1I6ICdpb19lcnJvcicsXG4gICAgREVNVVhfRVJST1I6ICdkZW11eF9lcnJvcicsXG4gICAgSU5JVF9TRUdNRU5UOiAnaW5pdF9zZWdtZW50JyxcbiAgICBNRURJQV9TRUdNRU5UOiAnbWVkaWFfc2VnbWVudCcsXG4gICAgTE9BRElOR19DT01QTEVURTogJ2xvYWRpbmdfY29tcGxldGUnLFxuICAgIFJFQ09WRVJFRF9FQVJMWV9FT0Y6ICdyZWNvdmVyZWRfZWFybHlfZW9mJyxcbiAgICBNRURJQV9JTkZPOiAnbWVkaWFfaW5mbycsXG4gICAgU1RBVElTVElDU19JTkZPOiAnc3RhdGlzdGljc19pbmZvJyxcbiAgICBSRUNPTU1FTkRfU0VFS1BPSU5UOiAncmVjb21tZW5kX3NlZWtwb2ludCdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRyYW5zbXV4aW5nRXZlbnRzOyIsIi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgQmlsaWJpbGkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvciB6aGVuZyBxaWFuIDx4cXFAeHFxLmltPlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgTG9nIGZyb20gJy4uL3V0aWxzL2xvZ2dlci5qcyc7XG5pbXBvcnQgTG9nZ2luZ0NvbnRyb2wgZnJvbSAnLi4vdXRpbHMvbG9nZ2luZy1jb250cm9sLmpzJztcbmltcG9ydCBQb2x5ZmlsbCBmcm9tICcuLi91dGlscy9wb2x5ZmlsbC5qcyc7XG5pbXBvcnQgVHJhbnNtdXhpbmdDb250cm9sbGVyIGZyb20gJy4vdHJhbnNtdXhpbmctY29udHJvbGxlci5qcyc7XG5pbXBvcnQgVHJhbnNtdXhpbmdFdmVudHMgZnJvbSAnLi90cmFuc211eGluZy1ldmVudHMuanMnO1xuXG4vKiBwb3N0IG1lc3NhZ2UgdG8gd29ya2VyOlxuICAgZGF0YToge1xuICAgICAgIGNtZDogc3RyaW5nXG4gICAgICAgcGFyYW06IGFueVxuICAgfVxuXG4gICByZWNlaXZlIG1lc3NhZ2UgZnJvbSB3b3JrZXI6XG4gICBkYXRhOiB7XG4gICAgICAgbXNnOiBzdHJpbmcsXG4gICAgICAgZGF0YTogYW55XG4gICB9XG4gKi9cblxubGV0IFRyYW5zbXV4aW5nV29ya2VyID0gZnVuY3Rpb24gKHNlbGYpIHtcblxuICAgIGxldCBUQUcgPSAnVHJhbnNtdXhpbmdXb3JrZXInO1xuICAgIGxldCBjb250cm9sbGVyID0gbnVsbDtcbiAgICBsZXQgbG9nY2F0TGlzdGVuZXIgPSBvbkxvZ2NhdENhbGxiYWNrLmJpbmQodGhpcyk7XG5cbiAgICBQb2x5ZmlsbC5pbnN0YWxsKCk7XG5cbiAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBzd2l0Y2ggKGUuZGF0YS5jbWQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2luaXQnOlxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBuZXcgVHJhbnNtdXhpbmdDb250cm9sbGVyKGUuZGF0YS5wYXJhbVswXSwgZS5kYXRhLnBhcmFtWzFdKTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLklPX0VSUk9SLCBvbklPRXJyb3IuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5vbihUcmFuc211eGluZ0V2ZW50cy5ERU1VWF9FUlJPUiwgb25EZW11eEVycm9yLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIub24oVHJhbnNtdXhpbmdFdmVudHMuSU5JVF9TRUdNRU5ULCBvbkluaXRTZWdtZW50LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIub24oVHJhbnNtdXhpbmdFdmVudHMuTUVESUFfU0VHTUVOVCwgb25NZWRpYVNlZ21lbnQuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5vbihUcmFuc211eGluZ0V2ZW50cy5MT0FESU5HX0NPTVBMRVRFLCBvbkxvYWRpbmdDb21wbGV0ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLlJFQ09WRVJFRF9FQVJMWV9FT0YsIG9uUmVjb3ZlcmVkRWFybHlFb2YuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5vbihUcmFuc211eGluZ0V2ZW50cy5NRURJQV9JTkZPLCBvbk1lZGlhSW5mby5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLlNUQVRJU1RJQ1NfSU5GTywgb25TdGF0aXN0aWNzSW5mby5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLlJFQ09NTUVORF9TRUVLUE9JTlQsIG9uUmVjb21tZW5kU2Vla3BvaW50LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGVzdHJveSc6XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHttc2c6ICdkZXN0cm95ZWQnfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zdGFydCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc3RvcCc6XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zdG9wKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWVrJzpcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnNlZWsoZS5kYXRhLnBhcmFtKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3BhdXNlJzpcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyZXN1bWUnOlxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIucmVzdW1lKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsb2dnaW5nX2NvbmZpZyc6IHtcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlnID0gZS5kYXRhLnBhcmFtO1xuICAgICAgICAgICAgICAgIExvZ2dpbmdDb250cm9sLmFwcGx5Q29uZmlnKGNvbmZpZyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmVuYWJsZUNhbGxiYWNrID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZ2dpbmdDb250cm9sLmFkZExvZ0xpc3RlbmVyKGxvZ2NhdExpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBMb2dnaW5nQ29udHJvbC5yZW1vdmVMb2dMaXN0ZW5lcihsb2djYXRMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBvbkluaXRTZWdtZW50KHR5cGUsIGluaXRTZWdtZW50KSB7XG4gICAgICAgIGxldCBvYmogPSB7XG4gICAgICAgICAgICBtc2c6IFRyYW5zbXV4aW5nRXZlbnRzLklOSVRfU0VHTUVOVCxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGluaXRTZWdtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uob2JqLCBbaW5pdFNlZ21lbnQuZGF0YV0pOyAgLy8gZGF0YTogQXJyYXlCdWZmZXJcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1lZGlhU2VnbWVudCh0eXBlLCBtZWRpYVNlZ21lbnQpIHtcbiAgICAgICAgbGV0IG9iaiA9IHtcbiAgICAgICAgICAgIG1zZzogVHJhbnNtdXhpbmdFdmVudHMuTUVESUFfU0VHTUVOVCxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgIGRhdGE6IG1lZGlhU2VnbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKG9iaiwgW21lZGlhU2VnbWVudC5kYXRhXSk7ICAvLyBkYXRhOiBBcnJheUJ1ZmZlclxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTG9hZGluZ0NvbXBsZXRlKCkge1xuICAgICAgICBsZXQgb2JqID0ge1xuICAgICAgICAgICAgbXNnOiBUcmFuc211eGluZ0V2ZW50cy5MT0FESU5HX0NPTVBMRVRFXG4gICAgICAgIH07XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uob2JqKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblJlY292ZXJlZEVhcmx5RW9mKCkge1xuICAgICAgICBsZXQgb2JqID0ge1xuICAgICAgICAgICAgbXNnOiBUcmFuc211eGluZ0V2ZW50cy5SRUNPVkVSRURfRUFSTFlfRU9GXG4gICAgICAgIH07XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uob2JqKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1lZGlhSW5mbyhtZWRpYUluZm8pIHtcbiAgICAgICAgbGV0IG9iaiA9IHtcbiAgICAgICAgICAgIG1zZzogVHJhbnNtdXhpbmdFdmVudHMuTUVESUFfSU5GTyxcbiAgICAgICAgICAgIGRhdGE6IG1lZGlhSW5mb1xuICAgICAgICB9O1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKG9iaik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25TdGF0aXN0aWNzSW5mbyhzdGF0SW5mbykge1xuICAgICAgICBsZXQgb2JqID0ge1xuICAgICAgICAgICAgbXNnOiBUcmFuc211eGluZ0V2ZW50cy5TVEFUSVNUSUNTX0lORk8sXG4gICAgICAgICAgICBkYXRhOiBzdGF0SW5mb1xuICAgICAgICB9O1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKG9iaik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25JT0Vycm9yKHR5cGUsIGluZm8pIHtcbiAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBtc2c6IFRyYW5zbXV4aW5nRXZlbnRzLklPX0VSUk9SLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgICAgaW5mbzogaW5mb1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkRlbXV4RXJyb3IodHlwZSwgaW5mbykge1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIG1zZzogVHJhbnNtdXhpbmdFdmVudHMuREVNVVhfRVJST1IsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICBpbmZvOiBpbmZvXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uUmVjb21tZW5kU2Vla3BvaW50KG1pbGxpc2Vjb25kcykge1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIG1zZzogVHJhbnNtdXhpbmdFdmVudHMuUkVDT01NRU5EX1NFRUtQT0lOVCxcbiAgICAgICAgICAgIGRhdGE6IG1pbGxpc2Vjb25kc1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkxvZ2NhdENhbGxiYWNrKHR5cGUsIHN0cikge1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIG1zZzogJ2xvZ2NhdF9jYWxsYmFjaycsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICBsb2djYXQ6IHN0clxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRyYW5zbXV4aW5nV29ya2VyOyIsIi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgQmlsaWJpbGkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvciB6aGVuZyBxaWFuIDx4cXFAeHFxLmltPlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgTG9nIGZyb20gJy4uL3V0aWxzL2xvZ2dlci5qcyc7XG5pbXBvcnQgZGVjb2RlVVRGOCBmcm9tICcuLi91dGlscy91dGY4LWNvbnYuanMnO1xuaW1wb3J0IHtJbGxlZ2FsU3RhdGVFeGNlcHRpb259IGZyb20gJy4uL3V0aWxzL2V4Y2VwdGlvbi5qcyc7XG5cbmxldCBsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcigyKTtcbiAgICAobmV3IERhdGFWaWV3KGJ1ZikpLnNldEludDE2KDAsIDI1NiwgdHJ1ZSk7ICAvLyBsaXR0bGUtZW5kaWFuIHdyaXRlXG4gICAgcmV0dXJuIChuZXcgSW50MTZBcnJheShidWYpKVswXSA9PT0gMjU2OyAgLy8gcGxhdGZvcm0tc3BlYyByZWFkLCBpZiBlcXVhbCB0aGVuIExFXG59KSgpO1xuXG5jbGFzcyBBTUYge1xuXG4gICAgc3RhdGljIHBhcnNlU2NyaXB0RGF0YShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpIHtcbiAgICAgICAgbGV0IGRhdGEgPSB7fTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IG5hbWUgPSBBTUYucGFyc2VWYWx1ZShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gQU1GLnBhcnNlVmFsdWUoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQgKyBuYW1lLnNpemUsIGRhdGFTaXplIC0gbmFtZS5zaXplKTtcblxuICAgICAgICAgICAgZGF0YVtuYW1lLmRhdGFdID0gdmFsdWUuZGF0YTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgTG9nLmUoJ0FNRicsIGUudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcGFyc2VPYmplY3QoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKSB7XG4gICAgICAgIGlmIChkYXRhU2l6ZSA8IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oJ0RhdGEgbm90IGVub3VnaCB3aGVuIHBhcnNlIFNjcmlwdERhdGFPYmplY3QnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmFtZSA9IEFNRi5wYXJzZVN0cmluZyhhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpO1xuICAgICAgICBsZXQgdmFsdWUgPSBBTUYucGFyc2VWYWx1ZShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIG5hbWUuc2l6ZSwgZGF0YVNpemUgLSBuYW1lLnNpemUpO1xuICAgICAgICBsZXQgaXNPYmplY3RFbmQgPSB2YWx1ZS5vYmplY3RFbmQ7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLmRhdGEsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLmRhdGFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzaXplOiBuYW1lLnNpemUgKyB2YWx1ZS5zaXplLFxuICAgICAgICAgICAgb2JqZWN0RW5kOiBpc09iamVjdEVuZFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBwYXJzZVZhcmlhYmxlKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSkge1xuICAgICAgICByZXR1cm4gQU1GLnBhcnNlT2JqZWN0KGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHBhcnNlU3RyaW5nKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSkge1xuICAgICAgICBpZiAoZGF0YVNpemUgPCAyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCdEYXRhIG5vdCBlbm91Z2ggd2hlbiBwYXJzZSBTdHJpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdiA9IG5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpO1xuICAgICAgICBsZXQgbGVuZ3RoID0gdi5nZXRVaW50MTYoMCwgIWxlKTtcblxuICAgICAgICBsZXQgc3RyO1xuICAgICAgICBpZiAobGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RyID0gZGVjb2RlVVRGOChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIDIsIGxlbmd0aCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogc3RyLFxuICAgICAgICAgICAgc2l6ZTogMiArIGxlbmd0aFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBwYXJzZUxvbmdTdHJpbmcoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKSB7XG4gICAgICAgIGlmIChkYXRhU2l6ZSA8IDQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oJ0RhdGEgbm90IGVub3VnaCB3aGVuIHBhcnNlIExvbmdTdHJpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdiA9IG5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpO1xuICAgICAgICBsZXQgbGVuZ3RoID0gdi5nZXRVaW50MzIoMCwgIWxlKTtcblxuICAgICAgICBsZXQgc3RyO1xuICAgICAgICBpZiAobGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RyID0gZGVjb2RlVVRGOChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIDQsIGxlbmd0aCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogc3RyLFxuICAgICAgICAgICAgc2l6ZTogNCArIGxlbmd0aFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBwYXJzZURhdGUoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKSB7XG4gICAgICAgIGlmIChkYXRhU2l6ZSA8IDEwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCdEYXRhIHNpemUgaW52YWxpZCB3aGVuIHBhcnNlIERhdGUnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdiA9IG5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdi5nZXRGbG9hdDY0KDAsICFsZSk7XG4gICAgICAgIGxldCBsb2NhbFRpbWVPZmZzZXQgPSB2LmdldEludDE2KDgsICFsZSk7XG4gICAgICAgIHRpbWVzdGFtcCArPSBsb2NhbFRpbWVPZmZzZXQgKiA2MCAqIDEwMDA7ICAvLyBnZXQgVVRDIHRpbWVcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogbmV3IERhdGUodGltZXN0YW1wKSxcbiAgICAgICAgICAgIHNpemU6IDggKyAyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIHBhcnNlVmFsdWUoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKSB7XG4gICAgICAgIGlmIChkYXRhU2l6ZSA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oJ0RhdGEgbm90IGVub3VnaCB3aGVuIHBhcnNlIFZhbHVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdiA9IG5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpO1xuXG4gICAgICAgIGxldCBvZmZzZXQgPSAxO1xuICAgICAgICBsZXQgdHlwZSA9IHYuZ2V0VWludDgoMCk7XG4gICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgbGV0IG9iamVjdEVuZCA9IGZhbHNlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6ICAvLyBOdW1iZXIoRG91YmxlKSB0eXBlXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdi5nZXRGbG9hdDY0KDEsICFsZSk7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSA4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHsgIC8vIEJvb2xlYW4gdHlwZVxuICAgICAgICAgICAgICAgICAgICBsZXQgYiA9IHYuZ2V0VWludDgoMSk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYiA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIDI6IHsgIC8vIFN0cmluZyB0eXBlXG4gICAgICAgICAgICAgICAgICAgIGxldCBhbWZzdHIgPSBBTUYucGFyc2VTdHJpbmcoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQgKyAxLCBkYXRhU2l6ZSAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFtZnN0ci5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gYW1mc3RyLnNpemU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIDM6IHsgLy8gT2JqZWN0KHMpIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlcm1pbmFsID0gMDsgIC8vIHdvcmthcm91bmQgZm9yIG1hbGZvcm1lZCBPYmplY3RzIHdoaWNoIGhhcyBtaXNzaW5nIFNjcmlwdERhdGFPYmplY3RFbmRcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh2LmdldFVpbnQzMihkYXRhU2l6ZSAtIDQsICFsZSkgJiAweDAwRkZGRkZGKSA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBkYXRhU2l6ZSAtIDQpIHsgIC8vIDQgPT09IHR5cGUoVUk4KSArIFNjcmlwdERhdGFPYmplY3RFbmQoVUkyNClcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbWZvYmogPSBBTUYucGFyc2VPYmplY3QoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQgKyBvZmZzZXQsIGRhdGFTaXplIC0gb2Zmc2V0IC0gdGVybWluYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFtZm9iai5vYmplY3RFbmQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVthbWZvYmouZGF0YS5uYW1lXSA9IGFtZm9iai5kYXRhLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGFtZm9iai5zaXplO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPD0gZGF0YVNpemUgLSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya2VyID0gdi5nZXRVaW50MzIob2Zmc2V0IC0gMSwgIWxlKSAmIDB4MDBGRkZGRkY7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFya2VyID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgODogeyAvLyBFQ01BIGFycmF5IHR5cGUgKE1peGVkIGFycmF5KVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDsgIC8vIEVDTUFBcnJheUxlbmd0aChVSTMyKVxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVybWluYWwgPSAwOyAgLy8gd29ya2Fyb3VuZCBmb3IgbWFsZm9ybWVkIE1peGVkQXJyYXlzIHdoaWNoIGhhcyBtaXNzaW5nIFNjcmlwdERhdGFPYmplY3RFbmRcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh2LmdldFVpbnQzMihkYXRhU2l6ZSAtIDQsICFsZSkgJiAweDAwRkZGRkZGKSA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBkYXRhU2l6ZSAtIDgpIHsgIC8vIDggPT09IHR5cGUoVUk4KSArIEVDTUFBcnJheUxlbmd0aChVSTMyKSArIFNjcmlwdERhdGFWYXJpYWJsZUVuZChVSTI0KVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFtZnZhciA9IEFNRi5wYXJzZVZhcmlhYmxlKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0ICsgb2Zmc2V0LCBkYXRhU2l6ZSAtIG9mZnNldCAtIHRlcm1pbmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbWZ2YXIub2JqZWN0RW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVbYW1mdmFyLmRhdGEubmFtZV0gPSBhbWZ2YXIuZGF0YS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBhbWZ2YXIuc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDw9IGRhdGFTaXplIC0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtlciA9IHYuZ2V0VWludDMyKG9mZnNldCAtIDEsICFsZSkgJiAweDAwRkZGRkZGO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlciA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIDk6ICAvLyBTY3JpcHREYXRhT2JqZWN0RW5kXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAxO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3RFbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiB7ICAvLyBTdHJpY3QgYXJyYXkgdHlwZVxuICAgICAgICAgICAgICAgICAgICAvLyBTY3JpcHREYXRhVmFsdWVbbl0uIE5PVEU6IGFjY29yZGluZyB0byB2aWRlb19maWxlX2Zvcm1hdF9zcGVjX3YxMF8xLnBkZlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3RyaWN0QXJyYXlMZW5ndGggPSB2LmdldFVpbnQzMigxLCAhbGUpO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpY3RBcnJheUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsID0gQU1GLnBhcnNlVmFsdWUoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQgKyBvZmZzZXQsIGRhdGFTaXplIC0gb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2godmFsLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IHZhbC5zaXplO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIDExOiB7ICAvLyBEYXRlIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGUgPSBBTUYucGFyc2VEYXRlKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0ICsgMSwgZGF0YVNpemUgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBkYXRlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBkYXRlLnNpemU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIDEyOiB7ICAvLyBMb25nIHN0cmluZyB0eXBlXG4gICAgICAgICAgICAgICAgICAgIGxldCBhbWZMb25nU3RyID0gQU1GLnBhcnNlU3RyaW5nKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0ICsgMSwgZGF0YVNpemUgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhbWZMb25nU3RyLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBhbWZMb25nU3RyLnNpemU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgYW5kIHNraXBcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gZGF0YVNpemU7XG4gICAgICAgICAgICAgICAgICAgIExvZy53KCdBTUYnLCAnVW5zdXBwb3J0ZWQgQU1GIHZhbHVlIHR5cGUgJyArIHR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBMb2cuZSgnQU1GJywgZS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiB2YWx1ZSxcbiAgICAgICAgICAgIHNpemU6IG9mZnNldCxcbiAgICAgICAgICAgIG9iamVjdEVuZDogb2JqZWN0RW5kXG4gICAgICAgIH07XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFNRjsiLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3QgRGVtdXhFcnJvcnMgPSB7XG4gICAgT0s6ICdPSycsXG4gICAgRk9STUFUX0VSUk9SOiAnRm9ybWF0RXJyb3InLFxuICAgIEZPUk1BVF9VTlNVUFBPUlRFRDogJ0Zvcm1hdFVuc3VwcG9ydGVkJyxcbiAgICBDT0RFQ19VTlNVUFBPUlRFRDogJ0NvZGVjVW5zdXBwb3J0ZWQnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBEZW11eEVycm9yczsiLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtJbGxlZ2FsU3RhdGVFeGNlcHRpb24sIEludmFsaWRBcmd1bWVudEV4Y2VwdGlvbn0gZnJvbSAnLi4vdXRpbHMvZXhjZXB0aW9uLmpzJztcblxuLy8gRXhwb25lbnRpYWwtR29sb21iIGJ1ZmZlciBkZWNvZGVyXG5jbGFzcyBFeHBHb2xvbWIge1xuXG4gICAgY29uc3RydWN0b3IodWludDhhcnJheSkge1xuICAgICAgICB0aGlzLlRBRyA9ICdFeHBHb2xvbWInO1xuXG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IHVpbnQ4YXJyYXk7XG4gICAgICAgIHRoaXMuX2J1ZmZlcl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX3RvdGFsX2J5dGVzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoO1xuICAgICAgICB0aGlzLl90b3RhbF9iaXRzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoICogODtcbiAgICAgICAgdGhpcy5fY3VycmVudF93b3JkID0gMDtcbiAgICAgICAgdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCA9IDA7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBfZmlsbEN1cnJlbnRXb3JkKCkge1xuICAgICAgICBsZXQgYnVmZmVyX2J5dGVzX2xlZnQgPSB0aGlzLl90b3RhbF9ieXRlcyAtIHRoaXMuX2J1ZmZlcl9pbmRleDtcbiAgICAgICAgaWYgKGJ1ZmZlcl9ieXRlc19sZWZ0IDw9IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCdFeHBHb2xvbWI6IF9maWxsQ3VycmVudFdvcmQoKSBidXQgbm8gYnl0ZXMgYXZhaWxhYmxlJyk7XG5cbiAgICAgICAgbGV0IGJ5dGVzX3JlYWQgPSBNYXRoLm1pbig0LCBidWZmZXJfYnl0ZXNfbGVmdCk7XG4gICAgICAgIGxldCB3b3JkID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgICAgIHdvcmQuc2V0KHRoaXMuX2J1ZmZlci5zdWJhcnJheSh0aGlzLl9idWZmZXJfaW5kZXgsIHRoaXMuX2J1ZmZlcl9pbmRleCArIGJ5dGVzX3JlYWQpKTtcbiAgICAgICAgdGhpcy5fY3VycmVudF93b3JkID0gbmV3IERhdGFWaWV3KHdvcmQuYnVmZmVyKS5nZXRVaW50MzIoMCwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuX2J1ZmZlcl9pbmRleCArPSBieXRlc19yZWFkO1xuICAgICAgICB0aGlzLl9jdXJyZW50X3dvcmRfYml0c19sZWZ0ID0gYnl0ZXNfcmVhZCAqIDg7XG4gICAgfVxuXG4gICAgcmVhZEJpdHMoYml0cykge1xuICAgICAgICBpZiAoYml0cyA+IDMyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEV4Y2VwdGlvbignRXhwR29sb21iOiByZWFkQml0cygpIGJpdHMgZXhjZWVkZWQgbWF4IDMyYml0cyEnKTtcblxuICAgICAgICBpZiAoYml0cyA8PSB0aGlzLl9jdXJyZW50X3dvcmRfYml0c19sZWZ0KSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5fY3VycmVudF93b3JkID4+PiAoMzIgLSBiaXRzKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZCA8PD0gYml0cztcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQgLT0gYml0cztcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCA/IHRoaXMuX2N1cnJlbnRfd29yZCA6IDA7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA+Pj4gKDMyIC0gdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCk7XG4gICAgICAgIGxldCBiaXRzX25lZWRfbGVmdCA9IGJpdHMgLSB0aGlzLl9jdXJyZW50X3dvcmRfYml0c19sZWZ0O1xuXG4gICAgICAgIHRoaXMuX2ZpbGxDdXJyZW50V29yZCgpO1xuICAgICAgICBsZXQgYml0c19yZWFkX25leHQgPSBNYXRoLm1pbihiaXRzX25lZWRfbGVmdCwgdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCk7XG5cbiAgICAgICAgbGV0IHJlc3VsdDIgPSB0aGlzLl9jdXJyZW50X3dvcmQgPj4+ICgzMiAtIGJpdHNfcmVhZF9uZXh0KTtcbiAgICAgICAgdGhpcy5fY3VycmVudF93b3JkIDw8PSBiaXRzX3JlYWRfbmV4dDtcbiAgICAgICAgdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCAtPSBiaXRzX3JlYWRfbmV4dDtcblxuICAgICAgICByZXN1bHQgPSAocmVzdWx0IDw8IGJpdHNfcmVhZF9uZXh0KSB8IHJlc3VsdDI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVhZEJvb2woKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDEpID09PSAxO1xuICAgIH1cblxuICAgIHJlYWRCeXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkQml0cyg4KTtcbiAgICB9XG5cbiAgICBfc2tpcExlYWRpbmdaZXJvKCkge1xuICAgICAgICBsZXQgemVyb19jb3VudDtcbiAgICAgICAgZm9yICh6ZXJvX2NvdW50ID0gMDsgemVyb19jb3VudCA8IHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQ7IHplcm9fY291bnQrKykge1xuICAgICAgICAgICAgaWYgKDAgIT09ICh0aGlzLl9jdXJyZW50X3dvcmQgJiAoMHg4MDAwMDAwMCA+Pj4gemVyb19jb3VudCkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudF93b3JkIDw8PSB6ZXJvX2NvdW50O1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQgLT0gemVyb19jb3VudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb19jb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9maWxsQ3VycmVudFdvcmQoKTtcbiAgICAgICAgcmV0dXJuIHplcm9fY291bnQgKyB0aGlzLl9za2lwTGVhZGluZ1plcm8oKTtcbiAgICB9XG5cbiAgICByZWFkVUVHKCkgeyAgLy8gdW5zaWduZWQgZXhwb25lbnRpYWwgZ29sb21iXG4gICAgICAgIGxldCBsZWFkaW5nX3plcm9zID0gdGhpcy5fc2tpcExlYWRpbmdaZXJvKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKGxlYWRpbmdfemVyb3MgKyAxKSAtIDE7XG4gICAgfVxuXG4gICAgcmVhZFNFRygpIHsgIC8vIHNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5yZWFkVUVHKCk7XG4gICAgICAgIGlmICh2YWx1ZSAmIDB4MDEpIHtcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUgKyAxKSA+Pj4gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtMSAqICh2YWx1ZSA+Pj4gMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXhwR29sb21iOyIsIi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgQmlsaWJpbGkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvciB6aGVuZyBxaWFuIDx4cXFAeHFxLmltPlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgTG9nIGZyb20gJy4uL3V0aWxzL2xvZ2dlci5qcyc7XG5pbXBvcnQgQU1GIGZyb20gJy4vYW1mLXBhcnNlci5qcyc7XG5pbXBvcnQgU1BTUGFyc2VyIGZyb20gJy4vc3BzLXBhcnNlci5qcyc7XG5pbXBvcnQgRGVtdXhFcnJvcnMgZnJvbSAnLi9kZW11eC1lcnJvcnMuanMnO1xuaW1wb3J0IE1lZGlhSW5mbyBmcm9tICcuLi9jb3JlL21lZGlhLWluZm8uanMnO1xuaW1wb3J0IHtJbGxlZ2FsU3RhdGVFeGNlcHRpb259IGZyb20gJy4uL3V0aWxzL2V4Y2VwdGlvbi5qcyc7XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5cbmZ1bmN0aW9uIFN3YXAxNihzcmMpIHtcbiAgcmV0dXJuICgoKHNyYyA+Pj4gOCkgJiAweEZGKSB8XG4gICAgKChzcmMgJiAweEZGKSA8PCA4KSk7XG59XG5cbmZ1bmN0aW9uIFN3YXAzMihzcmMpIHtcbiAgcmV0dXJuICgoKHNyYyAmIDB4RkYwMDAwMDApID4+PiAyNCkgfFxuICAgICgoc3JjICYgMHgwMEZGMDAwMCkgPj4+IDgpIHxcbiAgICAoKHNyYyAmIDB4MDAwMEZGMDApIDw8IDgpIHxcbiAgICAoKHNyYyAmIDB4MDAwMDAwRkYpIDw8IDI0KSk7XG59XG5cbmZ1bmN0aW9uIFJlYWRCaWczMihhcnJheSwgaW5kZXgpIHtcbiAgcmV0dXJuICgoYXJyYXlbaW5kZXhdIDw8IDI0KSB8XG4gICAgKGFycmF5W2luZGV4ICsgMV0gPDwgMTYpIHxcbiAgICAoYXJyYXlbaW5kZXggKyAyXSA8PCA4KSB8XG4gICAgKGFycmF5W2luZGV4ICsgM10pKTtcbn1cblxuXG5jbGFzcyBGTFZEZW11eGVyIHtcblxuICBjb25zdHJ1Y3Rvcihwcm9iZURhdGEsIGNvbmZpZykge1xuICAgIHRoaXMuVEFHID0gJ0ZMVkRlbXV4ZXInO1xuXG4gICAgdGhpcy5fZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcblxuICAgIHRoaXMuX29uRXJyb3IgPSBudWxsO1xuICAgIHRoaXMuX29uTWVkaWFJbmZvID0gbnVsbDtcbiAgICB0aGlzLl9vblRyYWNrTWV0YWRhdGEgPSBudWxsO1xuICAgIHRoaXMuX29uRGF0YUF2YWlsYWJsZSA9IG51bGw7XG5cbiAgICB0aGlzLl9kYXRhT2Zmc2V0ID0gcHJvYmVEYXRhLmRhdGFPZmZzZXQ7XG4gICAgdGhpcy5fZmlyc3RQYXJzZSA9IHRydWU7XG4gICAgdGhpcy5fZGlzcGF0Y2ggPSBmYWxzZTtcblxuICAgIHRoaXMuX2hhc0F1ZGlvID0gcHJvYmVEYXRhLmhhc0F1ZGlvVHJhY2s7XG4gICAgdGhpcy5faGFzVmlkZW8gPSBwcm9iZURhdGEuaGFzVmlkZW9UcmFjaztcblxuICAgIHRoaXMuX2hhc0F1ZGlvRmxhZ092ZXJyaWRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2hhc1ZpZGVvRmxhZ092ZXJyaWRlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5fYXVkaW9Jbml0aWFsTWV0YWRhdGFEaXNwYXRjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fdmlkZW9Jbml0aWFsTWV0YWRhdGFEaXNwYXRjaGVkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9tZWRpYUluZm8gPSBuZXcgTWVkaWFJbmZvKCk7XG4gICAgdGhpcy5fbWVkaWFJbmZvLmhhc0F1ZGlvID0gdGhpcy5faGFzQXVkaW87XG4gICAgdGhpcy5fbWVkaWFJbmZvLmhhc1ZpZGVvID0gdGhpcy5faGFzVmlkZW87XG4gICAgdGhpcy5fbWV0YWRhdGEgPSBudWxsO1xuICAgIHRoaXMuX2F1ZGlvTWV0YWRhdGEgPSBudWxsO1xuICAgIHRoaXMuX3ZpZGVvTWV0YWRhdGEgPSBudWxsO1xuXG4gICAgdGhpcy5fbmFsdUxlbmd0aFNpemUgPSA0O1xuICAgIHRoaXMuX3RpbWVzdGFtcEJhc2UgPSAwOyAgLy8gaW50MzIsIGluIG1pbGxpc2Vjb25kc1xuICAgIHRoaXMuX3RpbWVzY2FsZSA9IDEwMDA7XG4gICAgdGhpcy5fZHVyYXRpb24gPSAwOyAgLy8gaW50MzIsIGluIG1pbGxpc2Vjb25kc1xuICAgIHRoaXMuX2R1cmF0aW9uT3ZlcnJpZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVmZXJlbmNlRnJhbWVSYXRlID0ge1xuICAgICAgZml4ZWQ6IHRydWUsXG4gICAgICBmcHM6IDIzLjk3NixcbiAgICAgIGZwc19udW06IDIzOTc2LFxuICAgICAgZnBzX2RlbjogMTAwMFxuICAgIH07XG5cbiAgICB0aGlzLl9mbHZTb3VuZFJhdGVUYWJsZSA9IFs1NTAwLCAxMTAyNSwgMjIwNTAsIDQ0MTAwLCA0ODAwMF07XG5cbiAgICB0aGlzLl9tcGVnU2FtcGxpbmdSYXRlcyA9IFtcbiAgICAgIDk2MDAwLCA4ODIwMCwgNjQwMDAsIDQ4MDAwLCA0NDEwMCwgMzIwMDAsXG4gICAgICAyNDAwMCwgMjIwNTAsIDE2MDAwLCAxMjAwMCwgMTEwMjUsIDgwMDAsIDczNTBcbiAgICBdO1xuXG4gICAgdGhpcy5fbXBlZ0F1ZGlvVjEwU2FtcGxlUmF0ZVRhYmxlID0gWzQ0MTAwLCA0ODAwMCwgMzIwMDAsIDBdO1xuICAgIHRoaXMuX21wZWdBdWRpb1YyMFNhbXBsZVJhdGVUYWJsZSA9IFsyMjA1MCwgMjQwMDAsIDE2MDAwLCAwXTtcbiAgICB0aGlzLl9tcGVnQXVkaW9WMjVTYW1wbGVSYXRlVGFibGUgPSBbMTEwMjUsIDEyMDAwLCA4MDAwLCAwXTtcblxuICAgIHRoaXMuX21wZWdBdWRpb0wxQml0UmF0ZVRhYmxlID0gWzAsIDMyLCA2NCwgOTYsIDEyOCwgMTYwLCAxOTIsIDIyNCwgMjU2LCAyODgsIDMyMCwgMzUyLCAzODQsIDQxNiwgNDQ4LCAtMV07XG4gICAgdGhpcy5fbXBlZ0F1ZGlvTDJCaXRSYXRlVGFibGUgPSBbMCwgMzIsIDQ4LCA1NiwgNjQsIDgwLCA5NiwgMTEyLCAxMjgsIDE2MCwgMTkyLCAyMjQsIDI1NiwgMzIwLCAzODQsIC0xXTtcbiAgICB0aGlzLl9tcGVnQXVkaW9MM0JpdFJhdGVUYWJsZSA9IFswLCAzMiwgNDAsIDQ4LCA1NiwgNjQsIDgwLCA5NiwgMTEyLCAxMjgsIDE2MCwgMTkyLCAyMjQsIDI1NiwgMzIwLCAtMV07XG5cbiAgICB0aGlzLl92aWRlb1RyYWNrID0ge3R5cGU6ICd2aWRlbycsIGlkOiAxLCBzZXF1ZW5jZU51bWJlcjogMCwgc2FtcGxlczogW10sIGxlbmd0aDogMH07XG4gICAgdGhpcy5fYXVkaW9UcmFjayA9IHt0eXBlOiAnYXVkaW8nLCBpZDogMiwgc2VxdWVuY2VOdW1iZXI6IDAsIHNhbXBsZXM6IFtdLCBsZW5ndGg6IDB9O1xuXG4gICAgdGhpcy5fbGl0dGxlRW5kaWFuID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gICAgICAobmV3IERhdGFWaWV3KGJ1ZikpLnNldEludDE2KDAsIDI1NiwgdHJ1ZSk7ICAvLyBsaXR0bGUtZW5kaWFuIHdyaXRlXG4gICAgICByZXR1cm4gKG5ldyBJbnQxNkFycmF5KGJ1ZikpWzBdID09PSAyNTY7ICAvLyBwbGF0Zm9ybS1zcGVjIHJlYWQsIGlmIGVxdWFsIHRoZW4gTEVcbiAgICB9KSgpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9tZWRpYUluZm8gPSBudWxsO1xuICAgIHRoaXMuX21ldGFkYXRhID0gbnVsbDtcbiAgICB0aGlzLl9hdWRpb01ldGFkYXRhID0gbnVsbDtcbiAgICB0aGlzLl92aWRlb01ldGFkYXRhID0gbnVsbDtcbiAgICB0aGlzLl92aWRlb1RyYWNrID0gbnVsbDtcbiAgICB0aGlzLl9hdWRpb1RyYWNrID0gbnVsbDtcblxuICAgIHRoaXMuX29uRXJyb3IgPSBudWxsO1xuICAgIHRoaXMuX29uTWVkaWFJbmZvID0gbnVsbDtcbiAgICB0aGlzLl9vblRyYWNrTWV0YWRhdGEgPSBudWxsO1xuICAgIHRoaXMuX29uRGF0YUF2YWlsYWJsZSA9IG51bGw7XG5cbiAgICB0aGlzLl9lbWl0dGVyLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBudWxsO1xuICB9XG5cbiAgc3RhdGljIHByb2JlKGJ1ZmZlcikge1xuICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICBsZXQgbWlzbWF0Y2ggPSB7bWF0Y2g6IGZhbHNlfTtcblxuICAgIGlmIChkYXRhWzBdICE9PSAweDQ2IHx8IGRhdGFbMV0gIT09IDB4NEMgfHwgZGF0YVsyXSAhPT0gMHg1NiB8fCBkYXRhWzNdICE9PSAweDAxKSB7XG4gICAgICByZXR1cm4gbWlzbWF0Y2g7XG4gICAgfVxuXG4gICAgbGV0IGhhc0F1ZGlvID0gKChkYXRhWzRdICYgNCkgPj4+IDIpICE9PSAwO1xuICAgIGxldCBoYXNWaWRlbyA9IChkYXRhWzRdICYgMSkgIT09IDA7XG5cbiAgICBsZXQgb2Zmc2V0ID0gUmVhZEJpZzMyKGRhdGEsIDUpO1xuXG4gICAgaWYgKG9mZnNldCA8IDkpIHtcbiAgICAgIHJldHVybiBtaXNtYXRjaDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2g6IHRydWUsXG4gICAgICBjb25zdW1lZDogb2Zmc2V0LFxuICAgICAgZGF0YU9mZnNldDogb2Zmc2V0LFxuICAgICAgaGFzQXVkaW9UcmFjazogaGFzQXVkaW8sXG4gICAgICBoYXNWaWRlb1RyYWNrOiBoYXNWaWRlb1xuICAgIH07XG4gIH1cblxuICBiaW5kRGF0YVNvdXJjZShsb2FkZXIpIHtcbiAgICBsb2FkZXIub25EYXRhQXJyaXZhbCA9IHRoaXMucGFyc2VDaHVua3MuYmluZCh0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHByb3RvdHlwZTogZnVuY3Rpb24odHlwZTogc3RyaW5nLCBtZXRhZGF0YTogYW55KTogdm9pZFxuICBnZXQgb25UcmFja01ldGFkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9vblRyYWNrTWV0YWRhdGE7XG4gIH1cblxuICBzZXQgb25UcmFja01ldGFkYXRhKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fb25UcmFja01ldGFkYXRhID0gY2FsbGJhY2s7XG4gIH1cblxuICAvLyBwcm90b3R5cGU6IGZ1bmN0aW9uKG1lZGlhSW5mbzogTWVkaWFJbmZvKTogdm9pZFxuICBnZXQgb25NZWRpYUluZm8oKSB7XG4gICAgcmV0dXJuIHRoaXMuX29uTWVkaWFJbmZvO1xuICB9XG5cbiAgc2V0IG9uTWVkaWFJbmZvKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fb25NZWRpYUluZm8gPSBjYWxsYmFjaztcbiAgfVxuXG4gIC8vIHByb3RvdHlwZTogZnVuY3Rpb24odHlwZTogbnVtYmVyLCBpbmZvOiBzdHJpbmcpOiB2b2lkXG4gIGdldCBvbkVycm9yKCkge1xuICAgIHJldHVybiB0aGlzLl9vbkVycm9yO1xuICB9XG5cbiAgc2V0IG9uRXJyb3IoY2FsbGJhY2spIHtcbiAgICB0aGlzLl9vbkVycm9yID0gY2FsbGJhY2s7XG4gIH1cblxuICAvLyBwcm90b3R5cGU6IGZ1bmN0aW9uKHZpZGVvVHJhY2s6IGFueSwgYXVkaW9UcmFjazogYW55KTogdm9pZFxuICBnZXQgb25EYXRhQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLl9vbkRhdGFBdmFpbGFibGU7XG4gIH1cblxuICBzZXQgb25EYXRhQXZhaWxhYmxlKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fb25EYXRhQXZhaWxhYmxlID0gY2FsbGJhY2s7XG4gIH1cblxuICAvLyB0aW1lc3RhbXAgYmFzZSBmb3Igb3V0cHV0IHNhbXBsZXMsIG11c3QgYmUgaW4gbWlsbGlzZWNvbmRzXG4gIGdldCB0aW1lc3RhbXBCYXNlKCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lc3RhbXBCYXNlO1xuICB9XG5cbiAgc2V0IHRpbWVzdGFtcEJhc2UoYmFzZSkge1xuICAgIHRoaXMuX3RpbWVzdGFtcEJhc2UgPSBiYXNlO1xuICB9XG5cbiAgZ2V0IG92ZXJyaWRlZER1cmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9kdXJhdGlvbjtcbiAgfVxuXG4gIC8vIEZvcmNlLW92ZXJyaWRlIG1lZGlhIGR1cmF0aW9uLiBNdXN0IGJlIGluIG1pbGxpc2Vjb25kcywgaW50MzJcbiAgc2V0IG92ZXJyaWRlZER1cmF0aW9uKGR1cmF0aW9uKSB7XG4gICAgdGhpcy5fZHVyYXRpb25PdmVycmlkZWQgPSB0cnVlO1xuICAgIHRoaXMuX2R1cmF0aW9uID0gZHVyYXRpb247XG4gICAgdGhpcy5fbWVkaWFJbmZvLmR1cmF0aW9uID0gZHVyYXRpb247XG4gIH1cblxuICAvLyBGb3JjZS1vdmVycmlkZSBhdWRpbyB0cmFjayBwcmVzZW50IGZsYWcsIGJvb2xlYW5cbiAgc2V0IG92ZXJyaWRlZEhhc0F1ZGlvKGhhc0F1ZGlvKSB7XG4gICAgdGhpcy5faGFzQXVkaW9GbGFnT3ZlcnJpZGVkID0gdHJ1ZTtcbiAgICB0aGlzLl9oYXNBdWRpbyA9IGhhc0F1ZGlvO1xuICAgIHRoaXMuX21lZGlhSW5mby5oYXNBdWRpbyA9IGhhc0F1ZGlvO1xuICB9XG5cbiAgLy8gRm9yY2Utb3ZlcnJpZGUgdmlkZW8gdHJhY2sgcHJlc2VudCBmbGFnLCBib29sZWFuXG4gIHNldCBvdmVycmlkZWRIYXNWaWRlbyhoYXNWaWRlbykge1xuICAgIHRoaXMuX2hhc1ZpZGVvRmxhZ092ZXJyaWRlZCA9IHRydWU7XG4gICAgdGhpcy5faGFzVmlkZW8gPSBoYXNWaWRlbztcbiAgICB0aGlzLl9tZWRpYUluZm8uaGFzVmlkZW8gPSBoYXNWaWRlbztcbiAgfVxuXG4gIHJlc2V0TWVkaWFJbmZvKCkge1xuICAgIHRoaXMuX21lZGlhSW5mbyA9IG5ldyBNZWRpYUluZm8oKTtcbiAgfVxuXG4gIF9pc0luaXRpYWxNZXRhZGF0YURpc3BhdGNoZWQoKSB7XG4gICAgaWYgKHRoaXMuX2hhc0F1ZGlvICYmIHRoaXMuX2hhc1ZpZGVvKSB7ICAvLyBib3RoIGF1ZGlvICYgdmlkZW9cbiAgICAgIHJldHVybiB0aGlzLl9hdWRpb0luaXRpYWxNZXRhZGF0YURpc3BhdGNoZWQgJiYgdGhpcy5fdmlkZW9Jbml0aWFsTWV0YWRhdGFEaXNwYXRjaGVkO1xuICAgIH1cbiAgICBpZiAodGhpcy5faGFzQXVkaW8gJiYgIXRoaXMuX2hhc1ZpZGVvKSB7ICAvLyBhdWRpbyBvbmx5XG4gICAgICByZXR1cm4gdGhpcy5fYXVkaW9Jbml0aWFsTWV0YWRhdGFEaXNwYXRjaGVkO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2hhc0F1ZGlvICYmIHRoaXMuX2hhc1ZpZGVvKSB7ICAvLyB2aWRlbyBvbmx5XG4gICAgICByZXR1cm4gdGhpcy5fdmlkZW9Jbml0aWFsTWV0YWRhdGFEaXNwYXRjaGVkO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBmdW5jdGlvbiBwYXJzZUNodW5rcyhjaHVuazogQXJyYXlCdWZmZXIsIGJ5dGVTdGFydDogbnVtYmVyKTogbnVtYmVyO1xuICBwYXJzZUNodW5rcyhjaHVuaywgYnl0ZVN0YXJ0KSB7XG4gICAgaWYgKCF0aGlzLl9vbkVycm9yIHx8ICF0aGlzLl9vbk1lZGlhSW5mbyB8fCAhdGhpcy5fb25UcmFja01ldGFkYXRhIHx8ICF0aGlzLl9vbkRhdGFBdmFpbGFibGUpIHtcbiAgICAgIHRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oJ0Zsdjogb25FcnJvciAmIG9uTWVkaWFJbmZvICYgb25UcmFja01ldGFkYXRhICYgb25EYXRhQXZhaWxhYmxlIGNhbGxiYWNrIG11c3QgYmUgc3BlY2lmaWVkJyk7XG4gICAgfVxuXG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgbGV0IGxlID0gdGhpcy5fbGl0dGxlRW5kaWFuO1xuXG4gICAgaWYgKGJ5dGVTdGFydCA9PT0gMCkgeyAgLy8gYnVmZmVyIHdpdGggRkxWIGhlYWRlclxuICAgICAgaWYgKGNodW5rLmJ5dGVMZW5ndGggPiAxMykge1xuICAgICAgICBsZXQgcHJvYmVEYXRhID0gRkxWRGVtdXhlci5wcm9iZShjaHVuayk7XG4gICAgICAgIG9mZnNldCA9IHByb2JlRGF0YS5kYXRhT2Zmc2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2ZpcnN0UGFyc2UpIHsgIC8vIGhhbmRsZSBQcmV2aW91c1RhZ1NpemUwIGJlZm9yZSBUYWcxXG4gICAgICB0aGlzLl9maXJzdFBhcnNlID0gZmFsc2U7XG4gICAgICBpZiAoYnl0ZVN0YXJ0ICsgb2Zmc2V0ICE9PSB0aGlzLl9kYXRhT2Zmc2V0KSB7XG4gICAgICAgIExvZy53KHRoaXMuVEFHLCAnRmlyc3QgdGltZSBwYXJzaW5nIGJ1dCBjaHVuayBieXRlU3RhcnQgaW52YWxpZCEnKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHYgPSBuZXcgRGF0YVZpZXcoY2h1bmssIG9mZnNldCk7XG4gICAgICBsZXQgcHJldlRhZ1NpemUwID0gdi5nZXRVaW50MzIoMCwgIWxlKTtcbiAgICAgIGlmIChwcmV2VGFnU2l6ZTAgIT09IDApIHtcbiAgICAgICAgTG9nLncodGhpcy5UQUcsICdQcmV2VGFnU2l6ZTAgIT09IDAgISEhJyk7XG4gICAgICB9XG4gICAgICBvZmZzZXQgKz0gNDtcbiAgICB9XG5cbiAgICB3aGlsZSAob2Zmc2V0IDwgY2h1bmsuYnl0ZUxlbmd0aCkge1xuICAgICAgdGhpcy5fZGlzcGF0Y2ggPSB0cnVlO1xuXG4gICAgICBsZXQgdiA9IG5ldyBEYXRhVmlldyhjaHVuaywgb2Zmc2V0KTtcblxuICAgICAgaWYgKG9mZnNldCArIDExICsgNCA+IGNodW5rLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgLy8gZGF0YSBub3QgZW5vdWdoIGZvciBwYXJzaW5nIGFuIGZsdiB0YWdcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGxldCB0YWdUeXBlID0gdi5nZXRVaW50OCgwKTtcbiAgICAgIGxldCBkYXRhU2l6ZSA9IHYuZ2V0VWludDMyKDAsICFsZSkgJiAweDAwRkZGRkZGO1xuXG4gICAgICBpZiAob2Zmc2V0ICsgMTEgKyBkYXRhU2l6ZSArIDQgPiBjaHVuay5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIC8vIGRhdGEgbm90IGVub3VnaCBmb3IgcGFyc2luZyBhY3R1YWwgZGF0YSBib2R5XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFnVHlwZSAhPT0gOCAmJiB0YWdUeXBlICE9PSA5ICYmIHRhZ1R5cGUgIT09IDE4KSB7XG4gICAgICAgIExvZy53KHRoaXMuVEFHLCBgVW5zdXBwb3J0ZWQgdGFnIHR5cGUgJHt0YWdUeXBlfSwgc2tpcHBlZGApO1xuICAgICAgICAvLyBjb25zdW1lIHRoZSB3aG9sZSB0YWcgKHNraXAgaXQpXG4gICAgICAgIG9mZnNldCArPSAxMSArIGRhdGFTaXplICsgNDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCB0czIgPSB2LmdldFVpbnQ4KDQpO1xuICAgICAgbGV0IHRzMSA9IHYuZ2V0VWludDgoNSk7XG4gICAgICBsZXQgdHMwID0gdi5nZXRVaW50OCg2KTtcbiAgICAgIGxldCB0czMgPSB2LmdldFVpbnQ4KDcpO1xuXG4gICAgICBsZXQgdGltZXN0YW1wID0gdHMwIHwgKHRzMSA8PCA4KSB8ICh0czIgPDwgMTYpIHwgKHRzMyA8PCAyNCk7XG5cbiAgICAgIGxldCBzdHJlYW1JZCA9IHYuZ2V0VWludDMyKDcsICFsZSkgJiAweDAwRkZGRkZGO1xuICAgICAgaWYgKHN0cmVhbUlkICE9PSAwKSB7XG4gICAgICAgIExvZy53KHRoaXMuVEFHLCAnTWVldCB0YWcgd2hpY2ggaGFzIFN0cmVhbUlEICE9IDAhJyk7XG4gICAgICB9XG5cbiAgICAgIGxldCBkYXRhT2Zmc2V0ID0gb2Zmc2V0ICsgMTE7XG5cbiAgICAgIHN3aXRjaCAodGFnVHlwZSkge1xuICAgICAgICBjYXNlIDg6ICAvLyBBdWRpb1xuICAgICAgICAgIHRoaXMuX3BhcnNlQXVkaW9EYXRhKGNodW5rLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSwgdGltZXN0YW1wKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA5OiAgLy8gVmlkZW9cbiAgICAgICAgICB0aGlzLl9wYXJzZVZpZGVvRGF0YShjaHVuaywgZGF0YU9mZnNldCwgZGF0YVNpemUsIHRpbWVzdGFtcCwgYnl0ZVN0YXJ0ICsgb2Zmc2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxODogIC8vIFNjcmlwdERhdGFPYmplY3RcbiAgICAgICAgICB0aGlzLl9wYXJzZVNjcmlwdERhdGEoY2h1bmssIGRhdGFPZmZzZXQsIGRhdGFTaXplKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgbGV0IHByZXZUYWdTaXplID0gdi5nZXRVaW50MzIoMTEgKyBkYXRhU2l6ZSwgIWxlKTtcbiAgICAgIGlmIChwcmV2VGFnU2l6ZSAhPT0gMTEgKyBkYXRhU2l6ZSkge1xuICAgICAgICBMb2cudyh0aGlzLlRBRywgYEludmFsaWQgUHJldlRhZ1NpemUgJHtwcmV2VGFnU2l6ZX1gKTtcbiAgICAgIH1cblxuICAgICAgb2Zmc2V0ICs9IDExICsgZGF0YVNpemUgKyA0OyAgLy8gdGFnQm9keSArIGRhdGFTaXplICsgcHJldlRhZ1NpemVcbiAgICB9XG5cbiAgICAvLyBkaXNwYXRjaCBwYXJzZWQgZnJhbWVzIHRvIGNvbnN1bWVyICh0eXBpY2FsbHksIHRoZSByZW11eGVyKVxuICAgIGlmICh0aGlzLl9pc0luaXRpYWxNZXRhZGF0YURpc3BhdGNoZWQoKSkge1xuICAgICAgaWYgKHRoaXMuX2Rpc3BhdGNoICYmICh0aGlzLl9hdWRpb1RyYWNrLmxlbmd0aCB8fCB0aGlzLl92aWRlb1RyYWNrLmxlbmd0aCkpIHtcbiAgICAgICAgdGhpcy5fb25EYXRhQXZhaWxhYmxlKHRoaXMuX2F1ZGlvVHJhY2ssIHRoaXMuX3ZpZGVvVHJhY2spO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXQ7ICAvLyBjb25zdW1lZCBieXRlcywganVzdCBlcXVhbHMgbGF0ZXN0IG9mZnNldCBpbmRleFxuICB9XG5cbiAgX3BhcnNlU2NyaXB0RGF0YShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpIHtcbiAgICBsZXQgc2NyaXB0RGF0YSA9IEFNRi5wYXJzZVNjcmlwdERhdGEoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKTtcblxuICAgIGlmIChzY3JpcHREYXRhLmhhc093blByb3BlcnR5KCdvbk1ldGFEYXRhJykpIHtcbiAgICAgIGlmIChzY3JpcHREYXRhLm9uTWV0YURhdGEgPT0gbnVsbCB8fCB0eXBlb2Ygc2NyaXB0RGF0YS5vbk1ldGFEYXRhICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBMb2cudyh0aGlzLlRBRywgJ0ludmFsaWQgb25NZXRhRGF0YSBzdHJ1Y3R1cmUhJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9tZXRhZGF0YSkge1xuICAgICAgICBMb2cudyh0aGlzLlRBRywgJ0ZvdW5kIGFub3RoZXIgb25NZXRhRGF0YSB0YWchJyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9tZXRhZGF0YSA9IHNjcmlwdERhdGE7XG4gICAgICBsZXQgb25NZXRhRGF0YSA9IHRoaXMuX21ldGFkYXRhLm9uTWV0YURhdGE7XG4gICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoJ21ldGFkYXRhX2Fycml2ZWQnLCBvbk1ldGFEYXRhKTtcblxuICAgICAgaWYgKHR5cGVvZiBvbk1ldGFEYXRhLmhhc0F1ZGlvID09PSAnYm9vbGVhbicpIHsgIC8vIGhhc0F1ZGlvXG4gICAgICAgIGlmICh0aGlzLl9oYXNBdWRpb0ZsYWdPdmVycmlkZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgdGhpcy5faGFzQXVkaW8gPSBvbk1ldGFEYXRhLmhhc0F1ZGlvO1xuICAgICAgICAgIHRoaXMuX21lZGlhSW5mby5oYXNBdWRpbyA9IHRoaXMuX2hhc0F1ZGlvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9uTWV0YURhdGEuaGFzVmlkZW8gPT09ICdib29sZWFuJykgeyAgLy8gaGFzVmlkZW9cbiAgICAgICAgaWYgKHRoaXMuX2hhc1ZpZGVvRmxhZ092ZXJyaWRlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB0aGlzLl9oYXNWaWRlbyA9IG9uTWV0YURhdGEuaGFzVmlkZW87XG4gICAgICAgICAgdGhpcy5fbWVkaWFJbmZvLmhhc1ZpZGVvID0gdGhpcy5faGFzVmlkZW87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb25NZXRhRGF0YS5hdWRpb2RhdGFyYXRlID09PSAnbnVtYmVyJykgeyAgLy8gYXVkaW9kYXRhcmF0ZVxuICAgICAgICB0aGlzLl9tZWRpYUluZm8uYXVkaW9EYXRhUmF0ZSA9IG9uTWV0YURhdGEuYXVkaW9kYXRhcmF0ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb25NZXRhRGF0YS52aWRlb2RhdGFyYXRlID09PSAnbnVtYmVyJykgeyAgLy8gdmlkZW9kYXRhcmF0ZVxuICAgICAgICB0aGlzLl9tZWRpYUluZm8udmlkZW9EYXRhUmF0ZSA9IG9uTWV0YURhdGEudmlkZW9kYXRhcmF0ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb25NZXRhRGF0YS53aWR0aCA9PT0gJ251bWJlcicpIHsgIC8vIHdpZHRoXG4gICAgICAgIHRoaXMuX21lZGlhSW5mby53aWR0aCA9IG9uTWV0YURhdGEud2lkdGg7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9uTWV0YURhdGEuaGVpZ2h0ID09PSAnbnVtYmVyJykgeyAgLy8gaGVpZ2h0XG4gICAgICAgIHRoaXMuX21lZGlhSW5mby5oZWlnaHQgPSBvbk1ldGFEYXRhLmhlaWdodDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb25NZXRhRGF0YS5kdXJhdGlvbiA9PT0gJ251bWJlcicpIHsgIC8vIGR1cmF0aW9uXG4gICAgICAgIGlmICghdGhpcy5fZHVyYXRpb25PdmVycmlkZWQpIHtcbiAgICAgICAgICBsZXQgZHVyYXRpb24gPSBNYXRoLmZsb29yKG9uTWV0YURhdGEuZHVyYXRpb24gKiB0aGlzLl90aW1lc2NhbGUpO1xuICAgICAgICAgIHRoaXMuX2R1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgICAgdGhpcy5fbWVkaWFJbmZvLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX21lZGlhSW5mby5kdXJhdGlvbiA9IDA7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9uTWV0YURhdGEuZnJhbWVyYXRlID09PSAnbnVtYmVyJykgeyAgLy8gZnJhbWVyYXRlXG4gICAgICAgIGxldCBmcHNfbnVtID0gTWF0aC5mbG9vcihvbk1ldGFEYXRhLmZyYW1lcmF0ZSAqIDEwMDApO1xuICAgICAgICBpZiAoZnBzX251bSA+IDApIHtcbiAgICAgICAgICBsZXQgZnBzID0gZnBzX251bSAvIDEwMDA7XG4gICAgICAgICAgdGhpcy5fcmVmZXJlbmNlRnJhbWVSYXRlLmZpeGVkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLl9yZWZlcmVuY2VGcmFtZVJhdGUuZnBzID0gZnBzO1xuICAgICAgICAgIHRoaXMuX3JlZmVyZW5jZUZyYW1lUmF0ZS5mcHNfbnVtID0gZnBzX251bTtcbiAgICAgICAgICB0aGlzLl9yZWZlcmVuY2VGcmFtZVJhdGUuZnBzX2RlbiA9IDEwMDA7XG4gICAgICAgICAgdGhpcy5fbWVkaWFJbmZvLmZwcyA9IGZwcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvbk1ldGFEYXRhLmtleWZyYW1lcyA9PT0gJ29iamVjdCcpIHsgIC8vIGtleWZyYW1lc1xuICAgICAgICB0aGlzLl9tZWRpYUluZm8uaGFzS2V5ZnJhbWVzSW5kZXggPSB0cnVlO1xuICAgICAgICBsZXQga2V5ZnJhbWVzID0gb25NZXRhRGF0YS5rZXlmcmFtZXM7XG4gICAgICAgIHRoaXMuX21lZGlhSW5mby5rZXlmcmFtZXNJbmRleCA9IHRoaXMuX3BhcnNlS2V5ZnJhbWVzSW5kZXgoa2V5ZnJhbWVzKTtcbiAgICAgICAgb25NZXRhRGF0YS5rZXlmcmFtZXMgPSBudWxsOyAgLy8ga2V5ZnJhbWVzIGhhcyBiZWVuIGV4dHJhY3RlZCwgcmVtb3ZlIGl0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9tZWRpYUluZm8uaGFzS2V5ZnJhbWVzSW5kZXggPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2Rpc3BhdGNoID0gZmFsc2U7XG4gICAgICB0aGlzLl9tZWRpYUluZm8ubWV0YWRhdGEgPSBvbk1ldGFEYXRhO1xuICAgICAgTG9nLnYodGhpcy5UQUcsICdQYXJzZWQgb25NZXRhRGF0YScpO1xuICAgICAgaWYgKHRoaXMuX21lZGlhSW5mby5pc0NvbXBsZXRlKCkpIHtcbiAgICAgICAgdGhpcy5fb25NZWRpYUluZm8odGhpcy5fbWVkaWFJbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfcGFyc2VLZXlmcmFtZXNJbmRleChrZXlmcmFtZXMpIHtcbiAgICBsZXQgdGltZXMgPSBbXTtcbiAgICBsZXQgZmlsZXBvc2l0aW9ucyA9IFtdO1xuXG4gICAgLy8gaWdub3JlIGZpcnN0IGtleWZyYW1lIHdoaWNoIGlzIGFjdHVhbGx5IEFWQyBTZXF1ZW5jZSBIZWFkZXIgKEFWQ0RlY29kZXJDb25maWd1cmF0aW9uUmVjb3JkKVxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwga2V5ZnJhbWVzLnRpbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgdGltZSA9IHRoaXMuX3RpbWVzdGFtcEJhc2UgKyBNYXRoLmZsb29yKGtleWZyYW1lcy50aW1lc1tpXSAqIDEwMDApO1xuICAgICAgdGltZXMucHVzaCh0aW1lKTtcbiAgICAgIGZpbGVwb3NpdGlvbnMucHVzaChrZXlmcmFtZXMuZmlsZXBvc2l0aW9uc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWVzOiB0aW1lcyxcbiAgICAgIGZpbGVwb3NpdGlvbnM6IGZpbGVwb3NpdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgX3BhcnNlQXVkaW9EYXRhKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSwgdGFnVGltZXN0YW1wKSB7XG4gICAgaWYgKGRhdGFTaXplIDw9IDEpIHtcbiAgICAgIExvZy53KHRoaXMuVEFHLCAnRmx2OiBJbnZhbGlkIGF1ZGlvIHBhY2tldCwgbWlzc2luZyBTb3VuZERhdGEgcGF5bG9hZCEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faGFzQXVkaW9GbGFnT3ZlcnJpZGVkID09PSB0cnVlICYmIHRoaXMuX2hhc0F1ZGlvID09PSBmYWxzZSkge1xuICAgICAgLy8gSWYgaGFzQXVkaW86IGZhbHNlIGluZGljYXRlZCBleHBsaWNpdGx5IGluIE1lZGlhRGF0YVNvdXJjZSxcbiAgICAgIC8vIElnbm9yZSBhbGwgdGhlIGF1ZGlvIHBhY2tldHNcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgbGUgPSB0aGlzLl9saXR0bGVFbmRpYW47XG4gICAgbGV0IHYgPSBuZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKTtcblxuICAgIGxldCBzb3VuZFNwZWMgPSB2LmdldFVpbnQ4KDApO1xuXG4gICAgbGV0IHNvdW5kRm9ybWF0ID0gc291bmRTcGVjID4+PiA0O1xuICAgIGlmIChzb3VuZEZvcm1hdCAhPT0gMiAmJiBzb3VuZEZvcm1hdCAhPT0gMTApIHsgIC8vIE1QMyBvciBBQUNcbiAgICAgIHRoaXMuX29uRXJyb3IoRGVtdXhFcnJvcnMuQ09ERUNfVU5TVVBQT1JURUQsICdGbHY6IFVuc3VwcG9ydGVkIGF1ZGlvIGNvZGVjIGlkeDogJyArIHNvdW5kRm9ybWF0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgc291bmRSYXRlID0gMDtcbiAgICBsZXQgc291bmRSYXRlSW5kZXggPSAoc291bmRTcGVjICYgMTIpID4+PiAyO1xuICAgIGlmIChzb3VuZFJhdGVJbmRleCA+PSAwICYmIHNvdW5kUmF0ZUluZGV4IDw9IDQpIHtcbiAgICAgIHNvdW5kUmF0ZSA9IHRoaXMuX2ZsdlNvdW5kUmF0ZVRhYmxlW3NvdW5kUmF0ZUluZGV4XTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fb25FcnJvcihEZW11eEVycm9ycy5GT1JNQVRfRVJST1IsICdGbHY6IEludmFsaWQgYXVkaW8gc2FtcGxlIHJhdGUgaWR4OiAnICsgc291bmRSYXRlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBzb3VuZFNpemUgPSAoc291bmRTcGVjICYgMikgPj4+IDE7ICAvLyB1bnVzZWRcbiAgICBsZXQgc291bmRUeXBlID0gKHNvdW5kU3BlYyAmIDEpO1xuXG5cbiAgICBsZXQgbWV0YSA9IHRoaXMuX2F1ZGlvTWV0YWRhdGE7XG4gICAgbGV0IHRyYWNrID0gdGhpcy5fYXVkaW9UcmFjaztcblxuICAgIGlmICghbWV0YSkge1xuICAgICAgaWYgKHRoaXMuX2hhc0F1ZGlvID09PSBmYWxzZSAmJiB0aGlzLl9oYXNBdWRpb0ZsYWdPdmVycmlkZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuX2hhc0F1ZGlvID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fbWVkaWFJbmZvLmhhc0F1ZGlvID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gaW5pdGlhbCBtZXRhZGF0YVxuICAgICAgbWV0YSA9IHRoaXMuX2F1ZGlvTWV0YWRhdGEgPSB7fTtcbiAgICAgIG1ldGEudHlwZSA9ICdhdWRpbyc7XG4gICAgICBtZXRhLmlkID0gdHJhY2suaWQ7XG4gICAgICBtZXRhLnRpbWVzY2FsZSA9IHRoaXMuX3RpbWVzY2FsZTtcbiAgICAgIG1ldGEuZHVyYXRpb24gPSB0aGlzLl9kdXJhdGlvbjtcbiAgICAgIG1ldGEuYXVkaW9TYW1wbGVSYXRlID0gc291bmRSYXRlO1xuICAgICAgbWV0YS5jaGFubmVsQ291bnQgPSAoc291bmRUeXBlID09PSAwID8gMSA6IDIpO1xuICAgIH1cblxuICAgIGlmIChzb3VuZEZvcm1hdCA9PT0gMTApIHsgIC8vIEFBQ1xuICAgICAgbGV0IGFhY0RhdGEgPSB0aGlzLl9wYXJzZUFBQ0F1ZGlvRGF0YShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIDEsIGRhdGFTaXplIC0gMSk7XG4gICAgICBpZiAoYWFjRGF0YSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWFjRGF0YS5wYWNrZXRUeXBlID09PSAwKSB7ICAvLyBBQUMgc2VxdWVuY2UgaGVhZGVyIChBdWRpb1NwZWNpZmljQ29uZmlnKVxuICAgICAgICBpZiAobWV0YS5jb25maWcpIHtcbiAgICAgICAgICBMb2cudyh0aGlzLlRBRywgJ0ZvdW5kIGFub3RoZXIgQXVkaW9TcGVjaWZpY0NvbmZpZyEnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWlzYyA9IGFhY0RhdGEuZGF0YTtcbiAgICAgICAgbWV0YS5hdWRpb1NhbXBsZVJhdGUgPSBtaXNjLnNhbXBsaW5nUmF0ZTtcbiAgICAgICAgbWV0YS5jaGFubmVsQ291bnQgPSBtaXNjLmNoYW5uZWxDb3VudDtcbiAgICAgICAgbWV0YS5jb2RlYyA9IG1pc2MuY29kZWM7XG4gICAgICAgIG1ldGEub3JpZ2luYWxDb2RlYyA9IG1pc2Mub3JpZ2luYWxDb2RlYztcbiAgICAgICAgbWV0YS5jb25maWcgPSBtaXNjLmNvbmZpZztcbiAgICAgICAgLy8gVGhlIGRlY29kZSByZXN1bHQgb2YgYW4gYWFjIHNhbXBsZSBpcyAxMDI0IFBDTSBzYW1wbGVzXG4gICAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSAxMDI0IC8gbWV0YS5hdWRpb1NhbXBsZVJhdGUgKiBtZXRhLnRpbWVzY2FsZTtcbiAgICAgICAgTG9nLnYodGhpcy5UQUcsICdQYXJzZWQgQXVkaW9TcGVjaWZpY0NvbmZpZycpO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc0luaXRpYWxNZXRhZGF0YURpc3BhdGNoZWQoKSkge1xuICAgICAgICAgIC8vIE5vbi1pbml0aWFsIG1ldGFkYXRhLCBmb3JjZSBkaXNwYXRjaCAob3IgZmx1c2gpIHBhcnNlZCBmcmFtZXMgdG8gcmVtdXhlclxuICAgICAgICAgIGlmICh0aGlzLl9kaXNwYXRjaCAmJiAodGhpcy5fYXVkaW9UcmFjay5sZW5ndGggfHwgdGhpcy5fdmlkZW9UcmFjay5sZW5ndGgpKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkRhdGFBdmFpbGFibGUodGhpcy5fYXVkaW9UcmFjaywgdGhpcy5fdmlkZW9UcmFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2F1ZGlvSW5pdGlhbE1ldGFkYXRhRGlzcGF0Y2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlbiBub3RpZnkgbmV3IG1ldGFkYXRhXG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX29uVHJhY2tNZXRhZGF0YSgnYXVkaW8nLCBtZXRhKTtcblxuICAgICAgICBsZXQgbWkgPSB0aGlzLl9tZWRpYUluZm87XG4gICAgICAgIG1pLmF1ZGlvQ29kZWMgPSBtZXRhLm9yaWdpbmFsQ29kZWM7XG4gICAgICAgIG1pLmF1ZGlvU2FtcGxlUmF0ZSA9IG1ldGEuYXVkaW9TYW1wbGVSYXRlO1xuICAgICAgICBtaS5hdWRpb0NoYW5uZWxDb3VudCA9IG1ldGEuY2hhbm5lbENvdW50O1xuICAgICAgICBpZiAobWkuaGFzVmlkZW8pIHtcbiAgICAgICAgICBpZiAobWkudmlkZW9Db2RlYyAhPSBudWxsKSB7XG4gICAgICAgICAgICBtaS5taW1lVHlwZSA9ICd2aWRlby94LWZsdjsgY29kZWNzPVwiJyArIG1pLnZpZGVvQ29kZWMgKyAnLCcgKyBtaS5hdWRpb0NvZGVjICsgJ1wiJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWkubWltZVR5cGUgPSAndmlkZW8veC1mbHY7IGNvZGVjcz1cIicgKyBtaS5hdWRpb0NvZGVjICsgJ1wiJztcbiAgICAgICAgfVxuICAgICAgICBpZiAobWkuaXNDb21wbGV0ZSgpKSB7XG4gICAgICAgICAgdGhpcy5fb25NZWRpYUluZm8obWkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFhY0RhdGEucGFja2V0VHlwZSA9PT0gMSkgeyAgLy8gQUFDIHJhdyBmcmFtZSBkYXRhXG4gICAgICAgIGxldCBkdHMgPSB0aGlzLl90aW1lc3RhbXBCYXNlICsgdGFnVGltZXN0YW1wO1xuICAgICAgICBsZXQgYWFjU2FtcGxlID0ge3VuaXQ6IGFhY0RhdGEuZGF0YSwgbGVuZ3RoOiBhYWNEYXRhLmRhdGEuYnl0ZUxlbmd0aCwgZHRzOiBkdHMsIHB0czogZHRzfTtcbiAgICAgICAgdHJhY2suc2FtcGxlcy5wdXNoKGFhY1NhbXBsZSk7XG4gICAgICAgIHRyYWNrLmxlbmd0aCArPSBhYWNEYXRhLmRhdGEubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgTG9nLmUodGhpcy5UQUcsIGBGbHY6IFVuc3VwcG9ydGVkIEFBQyBkYXRhIHR5cGUgJHthYWNEYXRhLnBhY2tldFR5cGV9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzb3VuZEZvcm1hdCA9PT0gMikgeyAgLy8gTVAzXG4gICAgICBpZiAoIW1ldGEuY29kZWMpIHtcbiAgICAgICAgLy8gV2UgbmVlZCBtZXRhZGF0YSBmb3IgbXAzIGF1ZGlvIHRyYWNrLCBleHRyYWN0IGluZm8gZnJvbSBmcmFtZSBoZWFkZXJcbiAgICAgICAgbGV0IG1pc2MgPSB0aGlzLl9wYXJzZU1QM0F1ZGlvRGF0YShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIDEsIGRhdGFTaXplIC0gMSwgdHJ1ZSk7XG4gICAgICAgIGlmIChtaXNjID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtZXRhLmF1ZGlvU2FtcGxlUmF0ZSA9IG1pc2Muc2FtcGxpbmdSYXRlO1xuICAgICAgICBtZXRhLmNoYW5uZWxDb3VudCA9IG1pc2MuY2hhbm5lbENvdW50O1xuICAgICAgICBtZXRhLmNvZGVjID0gbWlzYy5jb2RlYztcbiAgICAgICAgbWV0YS5vcmlnaW5hbENvZGVjID0gbWlzYy5vcmlnaW5hbENvZGVjO1xuICAgICAgICAvLyBUaGUgZGVjb2RlIHJlc3VsdCBvZiBhbiBtcDMgc2FtcGxlIGlzIDExNTIgUENNIHNhbXBsZXNcbiAgICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IDExNTIgLyBtZXRhLmF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlO1xuICAgICAgICBMb2cudih0aGlzLlRBRywgJ1BhcnNlZCBNUEVHIEF1ZGlvIEZyYW1lIEhlYWRlcicpO1xuXG4gICAgICAgIHRoaXMuX2F1ZGlvSW5pdGlhbE1ldGFkYXRhRGlzcGF0Y2hlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX29uVHJhY2tNZXRhZGF0YSgnYXVkaW8nLCBtZXRhKTtcblxuICAgICAgICBsZXQgbWkgPSB0aGlzLl9tZWRpYUluZm87XG4gICAgICAgIG1pLmF1ZGlvQ29kZWMgPSBtZXRhLmNvZGVjO1xuICAgICAgICBtaS5hdWRpb1NhbXBsZVJhdGUgPSBtZXRhLmF1ZGlvU2FtcGxlUmF0ZTtcbiAgICAgICAgbWkuYXVkaW9DaGFubmVsQ291bnQgPSBtZXRhLmNoYW5uZWxDb3VudDtcbiAgICAgICAgbWkuYXVkaW9EYXRhUmF0ZSA9IG1pc2MuYml0UmF0ZTtcbiAgICAgICAgaWYgKG1pLmhhc1ZpZGVvKSB7XG4gICAgICAgICAgaWYgKG1pLnZpZGVvQ29kZWMgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWkubWltZVR5cGUgPSAndmlkZW8veC1mbHY7IGNvZGVjcz1cIicgKyBtaS52aWRlb0NvZGVjICsgJywnICsgbWkuYXVkaW9Db2RlYyArICdcIic7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1pLm1pbWVUeXBlID0gJ3ZpZGVvL3gtZmx2OyBjb2RlY3M9XCInICsgbWkuYXVkaW9Db2RlYyArICdcIic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pLmlzQ29tcGxldGUoKSkge1xuICAgICAgICAgIHRoaXMuX29uTWVkaWFJbmZvKG1pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGlzIHBhY2tldCBpcyBhbHdheXMgYSB2YWxpZCBhdWRpbyBwYWNrZXQsIGV4dHJhY3QgaXRcbiAgICAgIGxldCBkYXRhID0gdGhpcy5fcGFyc2VNUDNBdWRpb0RhdGEoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQgKyAxLCBkYXRhU2l6ZSAtIDEsIGZhbHNlKTtcbiAgICAgIGlmIChkYXRhID09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgZHRzID0gdGhpcy5fdGltZXN0YW1wQmFzZSArIHRhZ1RpbWVzdGFtcDtcbiAgICAgIGxldCBtcDNTYW1wbGUgPSB7dW5pdDogZGF0YSwgbGVuZ3RoOiBkYXRhLmJ5dGVMZW5ndGgsIGR0czogZHRzLCBwdHM6IGR0c307XG4gICAgICB0cmFjay5zYW1wbGVzLnB1c2gobXAzU2FtcGxlKTtcbiAgICAgIHRyYWNrLmxlbmd0aCArPSBkYXRhLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICBfcGFyc2VBQUNBdWRpb0RhdGEoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKSB7XG4gICAgaWYgKGRhdGFTaXplIDw9IDEpIHtcbiAgICAgIExvZy53KHRoaXMuVEFHLCAnRmx2OiBJbnZhbGlkIEFBQyBwYWNrZXQsIG1pc3NpbmcgQUFDUGFja2V0VHlwZSBvci9hbmQgRGF0YSEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgbGV0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKTtcblxuICAgIHJlc3VsdC5wYWNrZXRUeXBlID0gYXJyYXlbMF07XG5cbiAgICBpZiAoYXJyYXlbMF0gPT09IDApIHtcbiAgICAgIHJlc3VsdC5kYXRhID0gdGhpcy5fcGFyc2VBQUNBdWRpb1NwZWNpZmljQ29uZmlnKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0ICsgMSwgZGF0YVNpemUgLSAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LmRhdGEgPSBhcnJheS5zdWJhcnJheSgxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgX3BhcnNlQUFDQXVkaW9TcGVjaWZpY0NvbmZpZyhhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpIHtcbiAgICBsZXQgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpO1xuICAgIGxldCBjb25maWcgPSBudWxsO1xuXG4gICAgLyogQXVkaW8gT2JqZWN0IFR5cGU6XG4gICAgICAgMDogTnVsbFxuICAgICAgIDE6IEFBQyBNYWluXG4gICAgICAgMjogQUFDIExDXG4gICAgICAgMzogQUFDIFNTUiAoU2NhbGFibGUgU2FtcGxlIFJhdGUpXG4gICAgICAgNDogQUFDIExUUCAoTG9uZyBUZXJtIFByZWRpY3Rpb24pXG4gICAgICAgNTogSEUtQUFDIC8gU0JSIChTcGVjdHJhbCBCYW5kIFJlcGxpY2F0aW9uKVxuICAgICAgIDY6IEFBQyBTY2FsYWJsZVxuICAgICovXG5cbiAgICBsZXQgYXVkaW9PYmplY3RUeXBlID0gMDtcbiAgICBsZXQgb3JpZ2luYWxBdWRpb09iamVjdFR5cGUgPSAwO1xuICAgIGxldCBhdWRpb0V4dGVuc2lvbk9iamVjdFR5cGUgPSBudWxsO1xuICAgIGxldCBzYW1wbGluZ0luZGV4ID0gMDtcbiAgICBsZXQgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IG51bGw7XG5cbiAgICAvLyA1IGJpdHNcbiAgICBhdWRpb09iamVjdFR5cGUgPSBvcmlnaW5hbEF1ZGlvT2JqZWN0VHlwZSA9IGFycmF5WzBdID4+PiAzO1xuICAgIC8vIDQgYml0c1xuICAgIHNhbXBsaW5nSW5kZXggPSAoKGFycmF5WzBdICYgMHgwNykgPDwgMSkgfCAoYXJyYXlbMV0gPj4+IDcpO1xuICAgIGlmIChzYW1wbGluZ0luZGV4IDwgMCB8fCBzYW1wbGluZ0luZGV4ID49IHRoaXMuX21wZWdTYW1wbGluZ1JhdGVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fb25FcnJvcihEZW11eEVycm9ycy5GT1JNQVRfRVJST1IsICdGbHY6IEFBQyBpbnZhbGlkIHNhbXBsaW5nIGZyZXF1ZW5jeSBpbmRleCEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgc2FtcGxpbmdGcmVxdWVuY2UgPSB0aGlzLl9tcGVnU2FtcGxpbmdSYXRlc1tzYW1wbGluZ0luZGV4XTtcblxuICAgIC8vIDQgYml0c1xuICAgIGxldCBjaGFubmVsQ29uZmlnID0gKGFycmF5WzFdICYgMHg3OCkgPj4+IDM7XG4gICAgaWYgKGNoYW5uZWxDb25maWcgPCAwIHx8IGNoYW5uZWxDb25maWcgPj0gOCkge1xuICAgICAgdGhpcy5fb25FcnJvcihEZW11eEVycm9ycy5GT1JNQVRfRVJST1IsICdGbHY6IEFBQyBpbnZhbGlkIGNoYW5uZWwgY29uZmlndXJhdGlvbicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChhdWRpb09iamVjdFR5cGUgPT09IDUpIHsgIC8vIEhFLUFBQz9cbiAgICAgIC8vIDQgYml0c1xuICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9ICgoYXJyYXlbMV0gJiAweDA3KSA8PCAxKSB8IChhcnJheVsyXSA+Pj4gNyk7XG4gICAgICAvLyA1IGJpdHNcbiAgICAgIGF1ZGlvRXh0ZW5zaW9uT2JqZWN0VHlwZSA9IChhcnJheVsyXSAmIDB4N0MpID4+PiAyO1xuICAgIH1cblxuICAgIC8vIHdvcmthcm91bmRzIGZvciB2YXJpb3VzIGJyb3dzZXJzXG4gICAgbGV0IHVzZXJBZ2VudCA9IHNlbGYubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdmaXJlZm94JykgIT09IC0xKSB7XG4gICAgICAvLyBmaXJlZm94OiB1c2UgU0JSIChIRS1BQUMpIGlmIGZyZXEgbGVzcyB0aGFuIDI0a0h6XG4gICAgICBpZiAoc2FtcGxpbmdJbmRleCA+PSA2KSB7XG4gICAgICAgIGF1ZGlvT2JqZWN0VHlwZSA9IDU7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSg0KTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIHsgIC8vIHVzZSBMQy1BQUNcbiAgICAgICAgYXVkaW9PYmplY3RUeXBlID0gMjtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdJbmRleDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdhbmRyb2lkJykgIT09IC0xKSB7XG4gICAgICAvLyBhbmRyb2lkOiBhbHdheXMgdXNlIExDLUFBQ1xuICAgICAgYXVkaW9PYmplY3RUeXBlID0gMjtcbiAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSBzYW1wbGluZ0luZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3Igb3RoZXIgYnJvd3NlcnMsIGUuZy4gY2hyb21lLi4uXG4gICAgICAvLyBBbHdheXMgdXNlIEhFLUFBQyB0byBtYWtlIGl0IGVhc2llciB0byBzd2l0Y2ggYWFjIGNvZGVjIHByb2ZpbGVcbiAgICAgIGF1ZGlvT2JqZWN0VHlwZSA9IDU7XG4gICAgICBleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdJbmRleDtcbiAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSg0KTtcblxuICAgICAgaWYgKHNhbXBsaW5nSW5kZXggPj0gNikge1xuICAgICAgICBleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdJbmRleCAtIDM7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb25maWcgPT09IDEpIHsgIC8vIE1vbm8gY2hhbm5lbFxuICAgICAgICBhdWRpb09iamVjdFR5cGUgPSAyO1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSBzYW1wbGluZ0luZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbmZpZ1swXSA9IGF1ZGlvT2JqZWN0VHlwZSA8PCAzO1xuICAgIGNvbmZpZ1swXSB8PSAoc2FtcGxpbmdJbmRleCAmIDB4MEYpID4+PiAxO1xuICAgIGNvbmZpZ1sxXSA9IChzYW1wbGluZ0luZGV4ICYgMHgwRikgPDwgNztcbiAgICBjb25maWdbMV0gfD0gKGNoYW5uZWxDb25maWcgJiAweDBGKSA8PCAzO1xuICAgIGlmIChhdWRpb09iamVjdFR5cGUgPT09IDUpIHtcbiAgICAgIGNvbmZpZ1sxXSB8PSAoKGV4dGVuc2lvblNhbXBsaW5nSW5kZXggJiAweDBGKSA+Pj4gMSk7XG4gICAgICBjb25maWdbMl0gPSAoZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCAmIDB4MDEpIDw8IDc7XG4gICAgICAvLyBleHRlbmRlZCBhdWRpbyBvYmplY3QgdHlwZTogZm9yY2UgdG8gMiAoTEMtQUFDKVxuICAgICAgY29uZmlnWzJdIHw9ICgyIDw8IDIpO1xuICAgICAgY29uZmlnWzNdID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICBzYW1wbGluZ1JhdGU6IHNhbXBsaW5nRnJlcXVlbmNlLFxuICAgICAgY2hhbm5lbENvdW50OiBjaGFubmVsQ29uZmlnLFxuICAgICAgY29kZWM6ICdtcDRhLjQwLicgKyBhdWRpb09iamVjdFR5cGUsXG4gICAgICBvcmlnaW5hbENvZGVjOiAnbXA0YS40MC4nICsgb3JpZ2luYWxBdWRpb09iamVjdFR5cGVcbiAgICB9O1xuICB9XG5cbiAgX3BhcnNlTVAzQXVkaW9EYXRhKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSwgcmVxdWVzdEhlYWRlcikge1xuICAgIGlmIChkYXRhU2l6ZSA8IDQpIHtcbiAgICAgIExvZy53KHRoaXMuVEFHLCAnRmx2OiBJbnZhbGlkIE1QMyBwYWNrZXQsIGhlYWRlciBtaXNzaW5nIScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBsZSA9IHRoaXMuX2xpdHRsZUVuZGlhbjtcbiAgICBsZXQgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpO1xuICAgIGxldCByZXN1bHQgPSBudWxsO1xuXG4gICAgaWYgKHJlcXVlc3RIZWFkZXIpIHtcbiAgICAgIGlmIChhcnJheVswXSAhPT0gMHhGRikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgdmVyID0gKGFycmF5WzFdID4+PiAzKSAmIDB4MDM7XG4gICAgICBsZXQgbGF5ZXIgPSAoYXJyYXlbMV0gJiAweDA2KSA+PiAxO1xuXG4gICAgICBsZXQgYml0cmF0ZV9pbmRleCA9IChhcnJheVsyXSAmIDB4RjApID4+PiA0O1xuICAgICAgbGV0IHNhbXBsaW5nX2ZyZXFfaW5kZXggPSAoYXJyYXlbMl0gJiAweDBDKSA+Pj4gMjtcblxuICAgICAgbGV0IGNoYW5uZWxfbW9kZSA9IChhcnJheVszXSA+Pj4gNikgJiAweDAzO1xuICAgICAgbGV0IGNoYW5uZWxfY291bnQgPSBjaGFubmVsX21vZGUgIT09IDMgPyAyIDogMTtcblxuICAgICAgbGV0IHNhbXBsZV9yYXRlID0gMDtcbiAgICAgIGxldCBiaXRfcmF0ZSA9IDA7XG4gICAgICBsZXQgb2JqZWN0X3R5cGUgPSAzNDsgIC8vIExheWVyLTMsIGxpc3RlZCBpbiBNUEVHLTQgQXVkaW8gT2JqZWN0IFR5cGVzXG5cbiAgICAgIGxldCBjb2RlYyA9ICdtcDMnO1xuXG4gICAgICBzd2l0Y2ggKHZlcikge1xuICAgICAgICBjYXNlIDA6ICAvLyBNUEVHIDIuNVxuICAgICAgICAgIHNhbXBsZV9yYXRlID0gdGhpcy5fbXBlZ0F1ZGlvVjI1U2FtcGxlUmF0ZVRhYmxlW3NhbXBsaW5nX2ZyZXFfaW5kZXhdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6ICAvLyBNUEVHIDJcbiAgICAgICAgICBzYW1wbGVfcmF0ZSA9IHRoaXMuX21wZWdBdWRpb1YyMFNhbXBsZVJhdGVUYWJsZVtzYW1wbGluZ19mcmVxX2luZGV4XTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOiAgLy8gTVBFRyAxXG4gICAgICAgICAgc2FtcGxlX3JhdGUgPSB0aGlzLl9tcGVnQXVkaW9WMTBTYW1wbGVSYXRlVGFibGVbc2FtcGxpbmdfZnJlcV9pbmRleF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAobGF5ZXIpIHtcbiAgICAgICAgY2FzZSAxOiAgLy8gTGF5ZXIgM1xuICAgICAgICAgIG9iamVjdF90eXBlID0gMzQ7XG4gICAgICAgICAgaWYgKGJpdHJhdGVfaW5kZXggPCB0aGlzLl9tcGVnQXVkaW9MM0JpdFJhdGVUYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGJpdF9yYXRlID0gdGhpcy5fbXBlZ0F1ZGlvTDNCaXRSYXRlVGFibGVbYml0cmF0ZV9pbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6ICAvLyBMYXllciAyXG4gICAgICAgICAgb2JqZWN0X3R5cGUgPSAzMztcbiAgICAgICAgICBpZiAoYml0cmF0ZV9pbmRleCA8IHRoaXMuX21wZWdBdWRpb0wyQml0UmF0ZVRhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgYml0X3JhdGUgPSB0aGlzLl9tcGVnQXVkaW9MMkJpdFJhdGVUYWJsZVtiaXRyYXRlX2luZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogIC8vIExheWVyIDFcbiAgICAgICAgICBvYmplY3RfdHlwZSA9IDMyO1xuICAgICAgICAgIGlmIChiaXRyYXRlX2luZGV4IDwgdGhpcy5fbXBlZ0F1ZGlvTDFCaXRSYXRlVGFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBiaXRfcmF0ZSA9IHRoaXMuX21wZWdBdWRpb0wxQml0UmF0ZVRhYmxlW2JpdHJhdGVfaW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBiaXRSYXRlOiBiaXRfcmF0ZSxcbiAgICAgICAgc2FtcGxpbmdSYXRlOiBzYW1wbGVfcmF0ZSxcbiAgICAgICAgY2hhbm5lbENvdW50OiBjaGFubmVsX2NvdW50LFxuICAgICAgICBjb2RlYzogY29kZWMsXG4gICAgICAgIG9yaWdpbmFsQ29kZWM6IGNvZGVjXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhcnJheTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgX3BhcnNlVmlkZW9EYXRhKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSwgdGFnVGltZXN0YW1wLCB0YWdQb3NpdGlvbikge1xuICAgIGlmIChkYXRhU2l6ZSA8PSAxKSB7XG4gICAgICBMb2cudyh0aGlzLlRBRywgJ0ZsdjogSW52YWxpZCB2aWRlbyBwYWNrZXQsIG1pc3NpbmcgVmlkZW9EYXRhIHBheWxvYWQhJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2hhc1ZpZGVvRmxhZ092ZXJyaWRlZCA9PT0gdHJ1ZSAmJiB0aGlzLl9oYXNWaWRlbyA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIElmIGhhc1ZpZGVvOiBmYWxzZSBpbmRpY2F0ZWQgZXhwbGljaXRseSBpbiBNZWRpYURhdGFTb3VyY2UsXG4gICAgICAvLyBJZ25vcmUgYWxsIHRoZSB2aWRlbyBwYWNrZXRzXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHNwZWMgPSAobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKSlbMF07XG5cbiAgICBsZXQgZnJhbWVUeXBlID0gKHNwZWMgJiAyNDApID4+PiA0O1xuICAgIGxldCBjb2RlY0lkID0gc3BlYyAmIDE1O1xuXG4gICAgaWYgKGNvZGVjSWQgIT09IDcpIHtcbiAgICAgIHRoaXMuX29uRXJyb3IoRGVtdXhFcnJvcnMuQ09ERUNfVU5TVVBQT1JURUQsIGBGbHY6IFVuc3VwcG9ydGVkIGNvZGVjIGluIHZpZGVvIGZyYW1lOiAke2NvZGVjSWR9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fcGFyc2VBVkNWaWRlb1BhY2tldChhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIDEsIGRhdGFTaXplIC0gMSwgdGFnVGltZXN0YW1wLCB0YWdQb3NpdGlvbiwgZnJhbWVUeXBlKTtcbiAgfVxuXG4gIF9wYXJzZUFWQ1ZpZGVvUGFja2V0KGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSwgdGFnVGltZXN0YW1wLCB0YWdQb3NpdGlvbiwgZnJhbWVUeXBlKSB7XG4gICAgaWYgKGRhdGFTaXplIDwgNCkge1xuICAgICAgTG9nLncodGhpcy5UQUcsICdGbHY6IEludmFsaWQgQVZDIHBhY2tldCwgbWlzc2luZyBBVkNQYWNrZXRUeXBlIG9yL2FuZCBDb21wb3NpdGlvblRpbWUnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgbGUgPSB0aGlzLl9saXR0bGVFbmRpYW47XG4gICAgbGV0IHYgPSBuZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKTtcblxuICAgIGxldCBwYWNrZXRUeXBlID0gdi5nZXRVaW50OCgwKTtcbiAgICBsZXQgY3RzX3Vuc2lnbmVkID0gdi5nZXRVaW50MzIoMCwgIWxlKSAmIDB4MDBGRkZGRkY7XG4gICAgbGV0IGN0cyA9IChjdHNfdW5zaWduZWQgPDwgOCkgPj4gODsgIC8vIGNvbnZlcnQgdG8gMjQtYml0IHNpZ25lZCBpbnRcblxuICAgIGlmIChwYWNrZXRUeXBlID09PSAwKSB7ICAvLyBBVkNEZWNvZGVyQ29uZmlndXJhdGlvblJlY29yZFxuICAgICAgdGhpcy5fcGFyc2VBVkNEZWNvZGVyQ29uZmlndXJhdGlvblJlY29yZChhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIDQsIGRhdGFTaXplIC0gNCk7XG4gICAgfSBlbHNlIGlmIChwYWNrZXRUeXBlID09PSAxKSB7ICAvLyBPbmUgb3IgbW9yZSBOYWx1c1xuICAgICAgdGhpcy5fcGFyc2VBVkNWaWRlb0RhdGEoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQgKyA0LCBkYXRhU2l6ZSAtIDQsIHRhZ1RpbWVzdGFtcCwgdGFnUG9zaXRpb24sIGZyYW1lVHlwZSwgY3RzKTtcbiAgICB9IGVsc2UgaWYgKHBhY2tldFR5cGUgPT09IDIpIHtcbiAgICAgIC8vIGVtcHR5LCBBVkMgZW5kIG9mIHNlcXVlbmNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX29uRXJyb3IoRGVtdXhFcnJvcnMuRk9STUFUX0VSUk9SLCBgRmx2OiBJbnZhbGlkIHZpZGVvIHBhY2tldCB0eXBlICR7cGFja2V0VHlwZX1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBfcGFyc2VBVkNEZWNvZGVyQ29uZmlndXJhdGlvblJlY29yZChhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpIHtcbiAgICBpZiAoZGF0YVNpemUgPCA3KSB7XG4gICAgICBMb2cudyh0aGlzLlRBRywgJ0ZsdjogSW52YWxpZCBBVkNEZWNvZGVyQ29uZmlndXJhdGlvblJlY29yZCwgbGFjayBvZiBkYXRhIScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBtZXRhID0gdGhpcy5fdmlkZW9NZXRhZGF0YTtcbiAgICBsZXQgdHJhY2sgPSB0aGlzLl92aWRlb1RyYWNrO1xuICAgIGxldCBsZSA9IHRoaXMuX2xpdHRsZUVuZGlhbjtcbiAgICBsZXQgdiA9IG5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpO1xuXG4gICAgaWYgKCFtZXRhKSB7XG4gICAgICBpZiAodGhpcy5faGFzVmlkZW8gPT09IGZhbHNlICYmIHRoaXMuX2hhc1ZpZGVvRmxhZ092ZXJyaWRlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5faGFzVmlkZW8gPSB0cnVlO1xuICAgICAgICB0aGlzLl9tZWRpYUluZm8uaGFzVmlkZW8gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBtZXRhID0gdGhpcy5fdmlkZW9NZXRhZGF0YSA9IHt9O1xuICAgICAgbWV0YS50eXBlID0gJ3ZpZGVvJztcbiAgICAgIG1ldGEuaWQgPSB0cmFjay5pZDtcbiAgICAgIG1ldGEudGltZXNjYWxlID0gdGhpcy5fdGltZXNjYWxlO1xuICAgICAgbWV0YS5kdXJhdGlvbiA9IHRoaXMuX2R1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGEuYXZjYyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgTG9nLncodGhpcy5UQUcsICdGb3VuZCBhbm90aGVyIEFWQ0RlY29kZXJDb25maWd1cmF0aW9uUmVjb3JkIScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCB2ZXJzaW9uID0gdi5nZXRVaW50OCgwKTsgIC8vIGNvbmZpZ3VyYXRpb25WZXJzaW9uXG4gICAgbGV0IGF2Y1Byb2ZpbGUgPSB2LmdldFVpbnQ4KDEpOyAgLy8gYXZjUHJvZmlsZUluZGljYXRpb25cbiAgICBsZXQgcHJvZmlsZUNvbXBhdGliaWxpdHkgPSB2LmdldFVpbnQ4KDIpOyAgLy8gcHJvZmlsZV9jb21wYXRpYmlsaXR5XG4gICAgbGV0IGF2Y0xldmVsID0gdi5nZXRVaW50OCgzKTsgIC8vIEFWQ0xldmVsSW5kaWNhdGlvblxuXG4gICAgaWYgKHZlcnNpb24gIT09IDEgfHwgYXZjUHJvZmlsZSA9PT0gMCkge1xuICAgICAgdGhpcy5fb25FcnJvcihEZW11eEVycm9ycy5GT1JNQVRfRVJST1IsICdGbHY6IEludmFsaWQgQVZDRGVjb2RlckNvbmZpZ3VyYXRpb25SZWNvcmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9uYWx1TGVuZ3RoU2l6ZSA9ICh2LmdldFVpbnQ4KDQpICYgMykgKyAxOyAgLy8gbGVuZ3RoU2l6ZU1pbnVzT25lXG4gICAgaWYgKHRoaXMuX25hbHVMZW5ndGhTaXplICE9PSAzICYmIHRoaXMuX25hbHVMZW5ndGhTaXplICE9PSA0KSB7ICAvLyBob2x5IHNoaXQhISFcbiAgICAgIHRoaXMuX29uRXJyb3IoRGVtdXhFcnJvcnMuRk9STUFUX0VSUk9SLCBgRmx2OiBTdHJhbmdlIE5hbHVMZW5ndGhTaXplTWludXNPbmU6ICR7dGhpcy5fbmFsdUxlbmd0aFNpemUgLSAxfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBzcHNDb3VudCA9IHYuZ2V0VWludDgoNSkgJiAzMTsgIC8vIG51bU9mU2VxdWVuY2VQYXJhbWV0ZXJTZXRzXG4gICAgaWYgKHNwc0NvdW50ID09PSAwKSB7XG4gICAgICB0aGlzLl9vbkVycm9yKERlbXV4RXJyb3JzLkZPUk1BVF9FUlJPUiwgJ0ZsdjogSW52YWxpZCBBVkNEZWNvZGVyQ29uZmlndXJhdGlvblJlY29yZDogTm8gU1BTJyk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChzcHNDb3VudCA+IDEpIHtcbiAgICAgIExvZy53KHRoaXMuVEFHLCBgRmx2OiBTdHJhbmdlIEFWQ0RlY29kZXJDb25maWd1cmF0aW9uUmVjb3JkOiBTUFMgQ291bnQgPSAke3Nwc0NvdW50fWApO1xuICAgIH1cblxuICAgIGxldCBvZmZzZXQgPSA2O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcHNDb3VudDsgaSsrKSB7XG4gICAgICBsZXQgbGVuID0gdi5nZXRVaW50MTYob2Zmc2V0LCAhbGUpOyAgLy8gc2VxdWVuY2VQYXJhbWV0ZXJTZXRMZW5ndGhcbiAgICAgIG9mZnNldCArPSAyO1xuXG4gICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBOb3RpY2U6IE5hbHUgd2l0aG91dCBzdGFydGNvZGUgaGVhZGVyICgwMCAwMCAwMCAwMSlcbiAgICAgIGxldCBzcHMgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIG9mZnNldCwgbGVuKTtcbiAgICAgIG9mZnNldCArPSBsZW47XG5cbiAgICAgIGxldCBjb25maWcgPSBTUFNQYXJzZXIucGFyc2VTUFMoc3BzKTtcbiAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgIC8vIGlnbm9yZSBvdGhlciBzcHMncyBjb25maWdcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIG1ldGEuY29kZWNXaWR0aCA9IGNvbmZpZy5jb2RlY19zaXplLndpZHRoO1xuICAgICAgbWV0YS5jb2RlY0hlaWdodCA9IGNvbmZpZy5jb2RlY19zaXplLmhlaWdodDtcbiAgICAgIG1ldGEucHJlc2VudFdpZHRoID0gY29uZmlnLnByZXNlbnRfc2l6ZS53aWR0aDtcbiAgICAgIG1ldGEucHJlc2VudEhlaWdodCA9IGNvbmZpZy5wcmVzZW50X3NpemUuaGVpZ2h0O1xuXG4gICAgICBtZXRhLnByb2ZpbGUgPSBjb25maWcucHJvZmlsZV9zdHJpbmc7XG4gICAgICBtZXRhLmxldmVsID0gY29uZmlnLmxldmVsX3N0cmluZztcbiAgICAgIG1ldGEuYml0RGVwdGggPSBjb25maWcuYml0X2RlcHRoO1xuICAgICAgbWV0YS5jaHJvbWFGb3JtYXQgPSBjb25maWcuY2hyb21hX2Zvcm1hdDtcbiAgICAgIG1ldGEuc2FyUmF0aW8gPSBjb25maWcucGFyX3JhdGlvO1xuICAgICAgbWV0YS5mcmFtZVJhdGUgPSBjb25maWcuZnJhbWVfcmF0ZTtcblxuICAgICAgaWYgKGNvbmZpZy5mcmFtZV9yYXRlLmZpeGVkID09PSBmYWxzZSB8fFxuICAgICAgICBjb25maWcuZnJhbWVfcmF0ZS5mcHNfbnVtID09PSAwIHx8XG4gICAgICAgIGNvbmZpZy5mcmFtZV9yYXRlLmZwc19kZW4gPT09IDApIHtcbiAgICAgICAgbWV0YS5mcmFtZVJhdGUgPSB0aGlzLl9yZWZlcmVuY2VGcmFtZVJhdGU7XG4gICAgICB9XG5cbiAgICAgIGxldCBmcHNfZGVuID0gbWV0YS5mcmFtZVJhdGUuZnBzX2RlbjtcbiAgICAgIGxldCBmcHNfbnVtID0gbWV0YS5mcmFtZVJhdGUuZnBzX251bTtcbiAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBtZXRhLnRpbWVzY2FsZSAqIChmcHNfZGVuIC8gZnBzX251bSk7XG5cbiAgICAgIGxldCBjb2RlY0FycmF5ID0gc3BzLnN1YmFycmF5KDEsIDQpO1xuICAgICAgbGV0IGNvZGVjU3RyaW5nID0gJ2F2YzEuJztcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSB7XG4gICAgICAgIGxldCBoID0gY29kZWNBcnJheVtqXS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChoLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICBoID0gJzAnICsgaDtcbiAgICAgICAgfVxuICAgICAgICBjb2RlY1N0cmluZyArPSBoO1xuICAgICAgfVxuICAgICAgbWV0YS5jb2RlYyA9IGNvZGVjU3RyaW5nO1xuXG4gICAgICBsZXQgbWkgPSB0aGlzLl9tZWRpYUluZm87XG4gICAgICBtaS53aWR0aCA9IG1ldGEuY29kZWNXaWR0aDtcbiAgICAgIG1pLmhlaWdodCA9IG1ldGEuY29kZWNIZWlnaHQ7XG4gICAgICBtaS5mcHMgPSBtZXRhLmZyYW1lUmF0ZS5mcHM7XG4gICAgICBtaS5wcm9maWxlID0gbWV0YS5wcm9maWxlO1xuICAgICAgbWkubGV2ZWwgPSBtZXRhLmxldmVsO1xuICAgICAgbWkucmVmRnJhbWVzID0gY29uZmlnLnJlZl9mcmFtZXM7XG4gICAgICBtaS5jaHJvbWFGb3JtYXQgPSBjb25maWcuY2hyb21hX2Zvcm1hdF9zdHJpbmc7XG4gICAgICBtaS5zYXJOdW0gPSBtZXRhLnNhclJhdGlvLndpZHRoO1xuICAgICAgbWkuc2FyRGVuID0gbWV0YS5zYXJSYXRpby5oZWlnaHQ7XG4gICAgICBtaS52aWRlb0NvZGVjID0gY29kZWNTdHJpbmc7XG5cbiAgICAgIGlmIChtaS5oYXNBdWRpbykge1xuICAgICAgICBpZiAobWkuYXVkaW9Db2RlYyAhPSBudWxsKSB7XG4gICAgICAgICAgbWkubWltZVR5cGUgPSAndmlkZW8veC1mbHY7IGNvZGVjcz1cIicgKyBtaS52aWRlb0NvZGVjICsgJywnICsgbWkuYXVkaW9Db2RlYyArICdcIic7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1pLm1pbWVUeXBlID0gJ3ZpZGVvL3gtZmx2OyBjb2RlY3M9XCInICsgbWkudmlkZW9Db2RlYyArICdcIic7XG4gICAgICB9XG4gICAgICBpZiAobWkuaXNDb21wbGV0ZSgpKSB7XG4gICAgICAgIHRoaXMuX29uTWVkaWFJbmZvKG1pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcHBzQ291bnQgPSB2LmdldFVpbnQ4KG9mZnNldCk7ICAvLyBudW1PZlBpY3R1cmVQYXJhbWV0ZXJTZXRzXG4gICAgaWYgKHBwc0NvdW50ID09PSAwKSB7XG4gICAgICB0aGlzLl9vbkVycm9yKERlbXV4RXJyb3JzLkZPUk1BVF9FUlJPUiwgJ0ZsdjogSW52YWxpZCBBVkNEZWNvZGVyQ29uZmlndXJhdGlvblJlY29yZDogTm8gUFBTJyk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChwcHNDb3VudCA+IDEpIHtcbiAgICAgIExvZy53KHRoaXMuVEFHLCBgRmx2OiBTdHJhbmdlIEFWQ0RlY29kZXJDb25maWd1cmF0aW9uUmVjb3JkOiBQUFMgQ291bnQgPSAke3Bwc0NvdW50fWApO1xuICAgIH1cblxuICAgIG9mZnNldCsrO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcHNDb3VudDsgaSsrKSB7XG4gICAgICBsZXQgbGVuID0gdi5nZXRVaW50MTYob2Zmc2V0LCAhbGUpOyAgLy8gcGljdHVyZVBhcmFtZXRlclNldExlbmd0aFxuICAgICAgb2Zmc2V0ICs9IDI7XG5cbiAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHBwcyBpcyB1c2VsZXNzIGZvciBleHRyYWN0aW5nIHZpZGVvIGluZm9ybWF0aW9uXG4gICAgICBvZmZzZXQgKz0gbGVuO1xuICAgIH1cblxuICAgIG1ldGEuYXZjYyA9IG5ldyBVaW50OEFycmF5KGRhdGFTaXplKTtcbiAgICBtZXRhLmF2Y2Muc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSksIDApO1xuICAgIExvZy52KHRoaXMuVEFHLCAnUGFyc2VkIEFWQ0RlY29kZXJDb25maWd1cmF0aW9uUmVjb3JkJyk7XG5cbiAgICBpZiAodGhpcy5faXNJbml0aWFsTWV0YWRhdGFEaXNwYXRjaGVkKCkpIHtcbiAgICAgIC8vIGZsdXNoIHBhcnNlZCBmcmFtZXNcbiAgICAgIGlmICh0aGlzLl9kaXNwYXRjaCAmJiAodGhpcy5fYXVkaW9UcmFjay5sZW5ndGggfHwgdGhpcy5fdmlkZW9UcmFjay5sZW5ndGgpKSB7XG4gICAgICAgIHRoaXMuX29uRGF0YUF2YWlsYWJsZSh0aGlzLl9hdWRpb1RyYWNrLCB0aGlzLl92aWRlb1RyYWNrKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdmlkZW9Jbml0aWFsTWV0YWRhdGFEaXNwYXRjaGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gbm90aWZ5IG5ldyBtZXRhZGF0YVxuICAgIHRoaXMuX2Rpc3BhdGNoID0gZmFsc2U7XG4gICAgdGhpcy5fb25UcmFja01ldGFkYXRhKCd2aWRlbycsIG1ldGEpO1xuICB9XG5cbiAgX3BhcnNlQVZDVmlkZW9EYXRhKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSwgdGFnVGltZXN0YW1wLCB0YWdQb3NpdGlvbiwgZnJhbWVUeXBlLCBjdHMpIHtcbiAgICBsZXQgbGUgPSB0aGlzLl9saXR0bGVFbmRpYW47XG4gICAgbGV0IHYgPSBuZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKTtcblxuICAgIGxldCB1bml0cyA9IFtdLCBsZW5ndGggPSAwO1xuXG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgY29uc3QgbGVuZ3RoU2l6ZSA9IHRoaXMuX25hbHVMZW5ndGhTaXplO1xuICAgIGxldCBkdHMgPSB0aGlzLl90aW1lc3RhbXBCYXNlICsgdGFnVGltZXN0YW1wO1xuICAgIGxldCBrZXlmcmFtZSA9IChmcmFtZVR5cGUgPT09IDEpOyAgLy8gZnJvbSBGTFYgRnJhbWUgVHlwZSBjb25zdGFudHNcblxuICAgIHdoaWxlIChvZmZzZXQgPCBkYXRhU2l6ZSkge1xuICAgICAgaWYgKG9mZnNldCArIDQgPj0gZGF0YVNpemUpIHtcbiAgICAgICAgTG9nLncodGhpcy5UQUcsIGBNYWxmb3JtZWQgTmFsdSBuZWFyIHRpbWVzdGFtcCAke2R0c30sIG9mZnNldCA9ICR7b2Zmc2V0fSwgZGF0YVNpemUgPSAke2RhdGFTaXplfWApO1xuICAgICAgICBicmVhazsgIC8vIGRhdGEgbm90IGVub3VnaCBmb3IgbmV4dCBOYWx1XG4gICAgICB9XG4gICAgICAvLyBOYWx1IHdpdGggbGVuZ3RoLWhlYWRlciAoQVZDMSlcbiAgICAgIGxldCBuYWx1U2l6ZSA9IHYuZ2V0VWludDMyKG9mZnNldCwgIWxlKTsgIC8vIEJpZy1FbmRpYW4gcmVhZFxuICAgICAgaWYgKGxlbmd0aFNpemUgPT09IDMpIHtcbiAgICAgICAgbmFsdVNpemUgPj4+PSA4O1xuICAgICAgfVxuICAgICAgaWYgKG5hbHVTaXplID4gZGF0YVNpemUgLSBsZW5ndGhTaXplKSB7XG4gICAgICAgIExvZy53KHRoaXMuVEFHLCBgTWFsZm9ybWVkIE5hbHVzIG5lYXIgdGltZXN0YW1wICR7ZHRzfSwgTmFsdVNpemUgPiBEYXRhU2l6ZSFgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgdW5pdFR5cGUgPSB2LmdldFVpbnQ4KG9mZnNldCArIGxlbmd0aFNpemUpICYgMHgxRjtcblxuICAgICAgaWYgKHVuaXRUeXBlID09PSA1KSB7ICAvLyBJRFJcbiAgICAgICAga2V5ZnJhbWUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0ICsgb2Zmc2V0LCBsZW5ndGhTaXplICsgbmFsdVNpemUpO1xuICAgICAgbGV0IHVuaXQgPSB7dHlwZTogdW5pdFR5cGUsIGRhdGE6IGRhdGF9O1xuICAgICAgdW5pdHMucHVzaCh1bml0KTtcbiAgICAgIGxlbmd0aCArPSBkYXRhLmJ5dGVMZW5ndGg7XG5cbiAgICAgIG9mZnNldCArPSBsZW5ndGhTaXplICsgbmFsdVNpemU7XG4gICAgfVxuXG4gICAgaWYgKHVuaXRzLmxlbmd0aCkge1xuICAgICAgbGV0IHRyYWNrID0gdGhpcy5fdmlkZW9UcmFjaztcbiAgICAgIGxldCBhdmNTYW1wbGUgPSB7XG4gICAgICAgIHVuaXRzOiB1bml0cyxcbiAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgIGlzS2V5ZnJhbWU6IGtleWZyYW1lLFxuICAgICAgICBkdHM6IGR0cyxcbiAgICAgICAgY3RzOiBjdHMsXG4gICAgICAgIHB0czogKGR0cyArIGN0cylcbiAgICAgIH07XG4gICAgICBpZiAoa2V5ZnJhbWUpIHtcbiAgICAgICAgYXZjU2FtcGxlLmZpbGVwb3NpdGlvbiA9IHRhZ1Bvc2l0aW9uO1xuICAgICAgfVxuICAgICAgdHJhY2suc2FtcGxlcy5wdXNoKGF2Y1NhbXBsZSk7XG4gICAgICB0cmFjay5sZW5ndGggKz0gbGVuZ3RoO1xuICAgIH1cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEZMVkRlbXV4ZXI7XG4iLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IEV4cEdvbG9tYiBmcm9tICcuL2V4cC1nb2xvbWIuanMnO1xuXG5jbGFzcyBTUFNQYXJzZXIge1xuXG4gICAgc3RhdGljIF9lYnNwMnJic3AodWludDhhcnJheSkge1xuICAgICAgICBsZXQgc3JjID0gdWludDhhcnJheTtcbiAgICAgICAgbGV0IHNyY19sZW5ndGggPSBzcmMuYnl0ZUxlbmd0aDtcbiAgICAgICAgbGV0IGRzdCA9IG5ldyBVaW50OEFycmF5KHNyY19sZW5ndGgpO1xuICAgICAgICBsZXQgZHN0X2lkeCA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcmNfbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID49IDIpIHtcbiAgICAgICAgICAgICAgICAvLyBVbmVzY2FwZTogU2tpcCAweDAzIGFmdGVyIDAwIDAwXG4gICAgICAgICAgICAgICAgaWYgKHNyY1tpXSA9PT0gMHgwMyAmJiBzcmNbaSAtIDFdID09PSAweDAwICYmIHNyY1tpIC0gMl0gPT09IDB4MDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHN0W2RzdF9pZHhdID0gc3JjW2ldO1xuICAgICAgICAgICAgZHN0X2lkeCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRzdC5idWZmZXIsIDAsIGRzdF9pZHgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBwYXJzZVNQUyh1aW50OGFycmF5KSB7XG4gICAgICAgIGxldCByYnNwID0gU1BTUGFyc2VyLl9lYnNwMnJic3AodWludDhhcnJheSk7XG4gICAgICAgIGxldCBnYiA9IG5ldyBFeHBHb2xvbWIocmJzcCk7XG5cbiAgICAgICAgZ2IucmVhZEJ5dGUoKTtcbiAgICAgICAgbGV0IHByb2ZpbGVfaWRjID0gZ2IucmVhZEJ5dGUoKTsgIC8vIHByb2ZpbGVfaWRjXG4gICAgICAgIGdiLnJlYWRCeXRlKCk7ICAvLyBjb25zdHJhaW50X3NldF9mbGFnc1s1XSArIHJlc2VydmVkX3plcm9bM11cbiAgICAgICAgbGV0IGxldmVsX2lkYyA9IGdiLnJlYWRCeXRlKCk7ICAvLyBsZXZlbF9pZGNcbiAgICAgICAgZ2IucmVhZFVFRygpOyAgLy8gc2VxX3BhcmFtZXRlcl9zZXRfaWRcblxuICAgICAgICBsZXQgcHJvZmlsZV9zdHJpbmcgPSBTUFNQYXJzZXIuZ2V0UHJvZmlsZVN0cmluZyhwcm9maWxlX2lkYyk7XG4gICAgICAgIGxldCBsZXZlbF9zdHJpbmcgPSBTUFNQYXJzZXIuZ2V0TGV2ZWxTdHJpbmcobGV2ZWxfaWRjKTtcbiAgICAgICAgbGV0IGNocm9tYV9mb3JtYXRfaWRjID0gMTtcbiAgICAgICAgbGV0IGNocm9tYV9mb3JtYXQgPSA0MjA7XG4gICAgICAgIGxldCBjaHJvbWFfZm9ybWF0X3RhYmxlID0gWzAsIDQyMCwgNDIyLCA0NDRdO1xuICAgICAgICBsZXQgYml0X2RlcHRoID0gODtcblxuICAgICAgICBpZiAocHJvZmlsZV9pZGMgPT09IDEwMCB8fCBwcm9maWxlX2lkYyA9PT0gMTEwIHx8IHByb2ZpbGVfaWRjID09PSAxMjIgfHxcbiAgICAgICAgICAgIHByb2ZpbGVfaWRjID09PSAyNDQgfHwgcHJvZmlsZV9pZGMgPT09IDQ0IHx8IHByb2ZpbGVfaWRjID09PSA4MyB8fFxuICAgICAgICAgICAgcHJvZmlsZV9pZGMgPT09IDg2IHx8IHByb2ZpbGVfaWRjID09PSAxMTggfHwgcHJvZmlsZV9pZGMgPT09IDEyOCB8fFxuICAgICAgICAgICAgcHJvZmlsZV9pZGMgPT09IDEzOCB8fCBwcm9maWxlX2lkYyA9PT0gMTQ0KSB7XG5cbiAgICAgICAgICAgIGNocm9tYV9mb3JtYXRfaWRjID0gZ2IucmVhZFVFRygpO1xuICAgICAgICAgICAgaWYgKGNocm9tYV9mb3JtYXRfaWRjID09PSAzKSB7XG4gICAgICAgICAgICAgICAgZ2IucmVhZEJpdHMoMSk7ICAvLyBzZXBhcmF0ZV9jb2xvdXJfcGxhbmVfZmxhZ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNocm9tYV9mb3JtYXRfaWRjIDw9IDMpIHtcbiAgICAgICAgICAgICAgICBjaHJvbWFfZm9ybWF0ID0gY2hyb21hX2Zvcm1hdF90YWJsZVtjaHJvbWFfZm9ybWF0X2lkY107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJpdF9kZXB0aCA9IGdiLnJlYWRVRUcoKSArIDg7ICAvLyBiaXRfZGVwdGhfbHVtYV9taW51czhcbiAgICAgICAgICAgIGdiLnJlYWRVRUcoKTsgIC8vIGJpdF9kZXB0aF9jaHJvbWFfbWludXM4XG4gICAgICAgICAgICBnYi5yZWFkQml0cygxKTsgIC8vIHFwcHJpbWVfeV96ZXJvX3RyYW5zZm9ybV9ieXBhc3NfZmxhZ1xuICAgICAgICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHsgIC8vIHNlcV9zY2FsaW5nX21hdHJpeF9wcmVzZW50X2ZsYWdcbiAgICAgICAgICAgICAgICBsZXQgc2NhbGluZ19saXN0X2NvdW50ID0gKGNocm9tYV9mb3JtYXRfaWRjICE9PSAzKSA/IDggOiAxMjtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjYWxpbmdfbGlzdF9jb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7ICAvLyBzZXFfc2NhbGluZ19saXN0X3ByZXNlbnRfZmxhZ1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCA2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU1BTUGFyc2VyLl9za2lwU2NhbGluZ0xpc3QoZ2IsIDE2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU1BTUGFyc2VyLl9za2lwU2NhbGluZ0xpc3QoZ2IsIDY0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnYi5yZWFkVUVHKCk7ICAvLyBsb2cyX21heF9mcmFtZV9udW1fbWludXM0XG4gICAgICAgIGxldCBwaWNfb3JkZXJfY250X3R5cGUgPSBnYi5yZWFkVUVHKCk7XG4gICAgICAgIGlmIChwaWNfb3JkZXJfY250X3R5cGUgPT09IDApIHtcbiAgICAgICAgICAgIGdiLnJlYWRVRUcoKTsgIC8vIGxvZzJfbWF4X3BpY19vcmRlcl9jbnRfbHNiX21pbnVzXzRcbiAgICAgICAgfSBlbHNlIGlmIChwaWNfb3JkZXJfY250X3R5cGUgPT09IDEpIHtcbiAgICAgICAgICAgIGdiLnJlYWRCaXRzKDEpOyAgLy8gZGVsdGFfcGljX29yZGVyX2Fsd2F5c196ZXJvX2ZsYWdcbiAgICAgICAgICAgIGdiLnJlYWRTRUcoKTsgIC8vIG9mZnNldF9mb3Jfbm9uX3JlZl9waWNcbiAgICAgICAgICAgIGdiLnJlYWRTRUcoKTsgIC8vIG9mZnNldF9mb3JfdG9wX3RvX2JvdHRvbV9maWVsZFxuICAgICAgICAgICAgbGV0IG51bV9yZWZfZnJhbWVzX2luX3BpY19vcmRlcl9jbnRfY3ljbGUgPSBnYi5yZWFkVUVHKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bV9yZWZfZnJhbWVzX2luX3BpY19vcmRlcl9jbnRfY3ljbGU7IGkrKykge1xuICAgICAgICAgICAgICAgIGdiLnJlYWRTRUcoKTsgIC8vIG9mZnNldF9mb3JfcmVmX2ZyYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlZl9mcmFtZXMgPSBnYi5yZWFkVUVHKCk7ICAvLyBtYXhfbnVtX3JlZl9mcmFtZXNcbiAgICAgICAgZ2IucmVhZEJpdHMoMSk7ICAvLyBnYXBzX2luX2ZyYW1lX251bV92YWx1ZV9hbGxvd2VkX2ZsYWdcblxuICAgICAgICBsZXQgcGljX3dpZHRoX2luX21ic19taW51czEgPSBnYi5yZWFkVUVHKCk7XG4gICAgICAgIGxldCBwaWNfaGVpZ2h0X2luX21hcF91bml0c19taW51czEgPSBnYi5yZWFkVUVHKCk7XG5cbiAgICAgICAgbGV0IGZyYW1lX21ic19vbmx5X2ZsYWcgPSBnYi5yZWFkQml0cygxKTtcbiAgICAgICAgaWYgKGZyYW1lX21ic19vbmx5X2ZsYWcgPT09IDApIHtcbiAgICAgICAgICAgIGdiLnJlYWRCaXRzKDEpOyAgLy8gbWJfYWRhcHRpdmVfZnJhbWVfZmllbGRfZmxhZ1xuICAgICAgICB9XG4gICAgICAgIGdiLnJlYWRCaXRzKDEpOyAgLy8gZGlyZWN0Xzh4OF9pbmZlcmVuY2VfZmxhZ1xuXG4gICAgICAgIGxldCBmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IGZyYW1lX2Nyb3BfdG9wX29mZnNldCA9IDA7XG4gICAgICAgIGxldCBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQgPSAwO1xuXG4gICAgICAgIGxldCBmcmFtZV9jcm9wcGluZ19mbGFnID0gZ2IucmVhZEJvb2woKTtcbiAgICAgICAgaWYgKGZyYW1lX2Nyb3BwaW5nX2ZsYWcpIHtcbiAgICAgICAgICAgIGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgPSBnYi5yZWFkVUVHKCk7XG4gICAgICAgICAgICBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCA9IGdiLnJlYWRVRUcoKTtcbiAgICAgICAgICAgIGZyYW1lX2Nyb3BfdG9wX29mZnNldCA9IGdiLnJlYWRVRUcoKTtcbiAgICAgICAgICAgIGZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCA9IGdiLnJlYWRVRUcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzYXJfd2lkdGggPSAxLCBzYXJfaGVpZ2h0ID0gMTtcbiAgICAgICAgbGV0IGZwcyA9IDAsIGZwc19maXhlZCA9IHRydWUsIGZwc19udW0gPSAwLCBmcHNfZGVuID0gMDtcblxuICAgICAgICBsZXQgdnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnID0gZ2IucmVhZEJvb2woKTtcbiAgICAgICAgaWYgKHZ1aV9wYXJhbWV0ZXJzX3ByZXNlbnRfZmxhZykge1xuICAgICAgICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHsgIC8vIGFzcGVjdF9yYXRpb19pbmZvX3ByZXNlbnRfZmxhZ1xuICAgICAgICAgICAgICAgIGxldCBhc3BlY3RfcmF0aW9faWRjID0gZ2IucmVhZEJ5dGUoKTtcbiAgICAgICAgICAgICAgICBsZXQgc2FyX3dfdGFibGUgPSBbMSwgMTIsIDEwLCAxNiwgNDAsIDI0LCAyMCwgMzIsIDgwLCAxOCwgMTUsIDY0LCAxNjAsIDQsIDMsIDJdO1xuICAgICAgICAgICAgICAgIGxldCBzYXJfaF90YWJsZSA9IFsxLCAxMSwgMTEsIDExLCAzMywgMTEsIDExLCAxMSwgMzMsIDExLCAxMSwgMzMsICA5OSwgMywgMiwgMV07XG5cbiAgICAgICAgICAgICAgICBpZiAoYXNwZWN0X3JhdGlvX2lkYyA+IDAgJiYgYXNwZWN0X3JhdGlvX2lkYyA8IDE2KSB7XG4gICAgICAgICAgICAgICAgICAgIHNhcl93aWR0aCA9IHNhcl93X3RhYmxlW2FzcGVjdF9yYXRpb19pZGMgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgc2FyX2hlaWdodCA9IHNhcl9oX3RhYmxlW2FzcGVjdF9yYXRpb19pZGMgLSAxXTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFzcGVjdF9yYXRpb19pZGMgPT09IDI1NSkge1xuICAgICAgICAgICAgICAgICAgICBzYXJfd2lkdGggPSBnYi5yZWFkQnl0ZSgpIDw8IDggfCBnYi5yZWFkQnl0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBzYXJfaGVpZ2h0ID0gZ2IucmVhZEJ5dGUoKSA8PCA4IHwgZ2IucmVhZEJ5dGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7ICAvLyBvdmVyc2Nhbl9pbmZvX3ByZXNlbnRfZmxhZ1xuICAgICAgICAgICAgICAgIGdiLnJlYWRCb29sKCk7ICAvLyBvdmVyc2Nhbl9hcHByb3ByaWF0ZV9mbGFnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2IucmVhZEJvb2woKSkgeyAgLy8gdmlkZW9fc2lnbmFsX3R5cGVfcHJlc2VudF9mbGFnXG4gICAgICAgICAgICAgICAgZ2IucmVhZEJpdHMoNCk7ICAvLyB2aWRlb19mb3JtYXQgJiB2aWRlb19mdWxsX3JhbmdlX2ZsYWdcbiAgICAgICAgICAgICAgICBpZiAoZ2IucmVhZEJvb2woKSkgeyAgLy8gY29sb3VyX2Rlc2NyaXB0aW9uX3ByZXNlbnRfZmxhZ1xuICAgICAgICAgICAgICAgICAgICBnYi5yZWFkQml0cygyNCk7ICAvLyBjb2xvdXJfcHJpbWFyaWVzICYgdHJhbnNmZXJfY2hhcmFjdGVyaXN0aWNzICYgbWF0cml4X2NvZWZmaWNpZW50c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7ICAvLyBjaHJvbWFfbG9jX2luZm9fcHJlc2VudF9mbGFnXG4gICAgICAgICAgICAgICAgZ2IucmVhZFVFRygpOyAgLy8gY2hyb21hX3NhbXBsZV9sb2NfdHlwZV90b3BfZmllbGRcbiAgICAgICAgICAgICAgICBnYi5yZWFkVUVHKCk7ICAvLyBjaHJvbWFfc2FtcGxlX2xvY190eXBlX2JvdHRvbV9maWVsZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHsgIC8vIHRpbWluZ19pbmZvX3ByZXNlbnRfZmxhZ1xuICAgICAgICAgICAgICAgIGxldCBudW1fdW5pdHNfaW5fdGljayA9IGdiLnJlYWRCaXRzKDMyKTtcbiAgICAgICAgICAgICAgICBsZXQgdGltZV9zY2FsZSA9IGdiLnJlYWRCaXRzKDMyKTtcbiAgICAgICAgICAgICAgICBmcHNfZml4ZWQgPSBnYi5yZWFkQm9vbCgpOyAgLy8gZml4ZWRfZnJhbWVfcmF0ZV9mbGFnXG5cbiAgICAgICAgICAgICAgICBmcHNfbnVtID0gdGltZV9zY2FsZTtcbiAgICAgICAgICAgICAgICBmcHNfZGVuID0gbnVtX3VuaXRzX2luX3RpY2sgKiAyO1xuICAgICAgICAgICAgICAgIGZwcyA9IGZwc19udW0gLyBmcHNfZGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNhclNjYWxlID0gMTtcbiAgICAgICAgaWYgKHNhcl93aWR0aCAhPT0gMSB8fCBzYXJfaGVpZ2h0ICE9PSAxKSB7XG4gICAgICAgICAgICBzYXJTY2FsZSA9IHNhcl93aWR0aCAvIHNhcl9oZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3JvcF91bml0X3ggPSAwLCBjcm9wX3VuaXRfeSA9IDA7XG4gICAgICAgIGlmIChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMCkge1xuICAgICAgICAgICAgY3JvcF91bml0X3ggPSAxO1xuICAgICAgICAgICAgY3JvcF91bml0X3kgPSAyIC0gZnJhbWVfbWJzX29ubHlfZmxhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBzdWJfd2MgPSAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDMpID8gMSA6IDI7XG4gICAgICAgICAgICBsZXQgc3ViX2hjID0gKGNocm9tYV9mb3JtYXRfaWRjID09PSAxKSA/IDIgOiAxO1xuICAgICAgICAgICAgY3JvcF91bml0X3ggPSBzdWJfd2M7XG4gICAgICAgICAgICBjcm9wX3VuaXRfeSA9IHN1Yl9oYyAqICgyIC0gZnJhbWVfbWJzX29ubHlfZmxhZyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY29kZWNfd2lkdGggPSAocGljX3dpZHRoX2luX21ic19taW51czEgKyAxKSAqIDE2O1xuICAgICAgICBsZXQgY29kZWNfaGVpZ2h0ID0gKDIgLSBmcmFtZV9tYnNfb25seV9mbGFnKSAqICgocGljX2hlaWdodF9pbl9tYXBfdW5pdHNfbWludXMxICsgMSkgKiAxNik7XG5cbiAgICAgICAgY29kZWNfd2lkdGggLT0gKGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgKyBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCkgKiBjcm9wX3VuaXRfeDtcbiAgICAgICAgY29kZWNfaGVpZ2h0IC09IChmcmFtZV9jcm9wX3RvcF9vZmZzZXQgKyBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQpICogY3JvcF91bml0X3k7XG5cbiAgICAgICAgbGV0IHByZXNlbnRfd2lkdGggPSBNYXRoLmNlaWwoY29kZWNfd2lkdGggKiBzYXJTY2FsZSk7XG5cbiAgICAgICAgZ2IuZGVzdHJveSgpO1xuICAgICAgICBnYiA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb2ZpbGVfc3RyaW5nOiBwcm9maWxlX3N0cmluZywgIC8vIGJhc2VsaW5lLCBoaWdoLCBoaWdoMTAsIC4uLlxuICAgICAgICAgICAgbGV2ZWxfc3RyaW5nOiBsZXZlbF9zdHJpbmcsICAvLyAzLCAzLjEsIDQsIDQuMSwgNSwgNS4xLCAuLi5cbiAgICAgICAgICAgIGJpdF9kZXB0aDogYml0X2RlcHRoLCAgLy8gOGJpdCwgMTBiaXQsIC4uLlxuICAgICAgICAgICAgcmVmX2ZyYW1lczogcmVmX2ZyYW1lcyxcbiAgICAgICAgICAgIGNocm9tYV9mb3JtYXQ6IGNocm9tYV9mb3JtYXQsICAvLyA0OjI6MCwgNDoyOjIsIC4uLlxuICAgICAgICAgICAgY2hyb21hX2Zvcm1hdF9zdHJpbmc6IFNQU1BhcnNlci5nZXRDaHJvbWFGb3JtYXRTdHJpbmcoY2hyb21hX2Zvcm1hdCksXG5cbiAgICAgICAgICAgIGZyYW1lX3JhdGU6IHtcbiAgICAgICAgICAgICAgICBmaXhlZDogZnBzX2ZpeGVkLFxuICAgICAgICAgICAgICAgIGZwczogZnBzLFxuICAgICAgICAgICAgICAgIGZwc19kZW46IGZwc19kZW4sXG4gICAgICAgICAgICAgICAgZnBzX251bTogZnBzX251bVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGFyX3JhdGlvOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHNhcl93aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHNhcl9oZWlnaHRcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNvZGVjX3NpemU6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogY29kZWNfd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBjb2RlY19oZWlnaHRcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHByZXNlbnRfc2l6ZToge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBwcmVzZW50X3dpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogY29kZWNfaGVpZ2h0XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIF9za2lwU2NhbGluZ0xpc3QoZ2IsIGNvdW50KSB7XG4gICAgICAgIGxldCBsYXN0X3NjYWxlID0gOCwgbmV4dF9zY2FsZSA9IDg7XG4gICAgICAgIGxldCBkZWx0YV9zY2FsZSA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgaWYgKG5leHRfc2NhbGUgIT09IDApIHtcbiAgICAgICAgICAgICAgICBkZWx0YV9zY2FsZSA9IGdiLnJlYWRTRUcoKTtcbiAgICAgICAgICAgICAgICBuZXh0X3NjYWxlID0gKGxhc3Rfc2NhbGUgKyBkZWx0YV9zY2FsZSArIDI1NikgJSAyNTY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0X3NjYWxlID0gKG5leHRfc2NhbGUgPT09IDApID8gbGFzdF9zY2FsZSA6IG5leHRfc2NhbGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0UHJvZmlsZVN0cmluZyhwcm9maWxlX2lkYykge1xuICAgICAgICBzd2l0Y2ggKHByb2ZpbGVfaWRjKSB7XG4gICAgICAgICAgICBjYXNlIDY2OlxuICAgICAgICAgICAgICAgIHJldHVybiAnQmFzZWxpbmUnO1xuICAgICAgICAgICAgY2FzZSA3NzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ01haW4nO1xuICAgICAgICAgICAgY2FzZSA4ODpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0V4dGVuZGVkJztcbiAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgIHJldHVybiAnSGlnaCc7XG4gICAgICAgICAgICBjYXNlIDExMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0hpZ2gxMCc7XG4gICAgICAgICAgICBjYXNlIDEyMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0hpZ2g0MjInO1xuICAgICAgICAgICAgY2FzZSAyNDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdIaWdoNDQ0JztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdVbmtub3duJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXRMZXZlbFN0cmluZyhsZXZlbF9pZGMpIHtcbiAgICAgICAgcmV0dXJuIChsZXZlbF9pZGMgLyAxMCkudG9GaXhlZCgxKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0Q2hyb21hRm9ybWF0U3RyaW5nKGNocm9tYSkge1xuICAgICAgICBzd2l0Y2ggKGNocm9tYSkge1xuICAgICAgICAgICAgY2FzZSA0MjA6XG4gICAgICAgICAgICAgICAgcmV0dXJuICc0OjI6MCc7XG4gICAgICAgICAgICBjYXNlIDQyMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gJzQ6MjoyJztcbiAgICAgICAgICAgIGNhc2UgNDQ0OlxuICAgICAgICAgICAgICAgIHJldHVybiAnNDo0OjQnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1Vua25vd24nO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNQU1BhcnNlcjtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgQmlsaWJpbGkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvciB6aGVuZyBxaWFuIDx4cXFAeHFxLmltPlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgUG9seWZpbGwgZnJvbSAnLi91dGlscy9wb2x5ZmlsbC5qcyc7XG5pbXBvcnQgRmVhdHVyZXMgZnJvbSAnLi9jb3JlL2ZlYXR1cmVzLmpzJztcbmltcG9ydCBGbHZQbGF5ZXIgZnJvbSAnLi9wbGF5ZXIvZmx2LXBsYXllci5qcyc7XG5pbXBvcnQgTmF0aXZlUGxheWVyIGZyb20gJy4vcGxheWVyL25hdGl2ZS1wbGF5ZXIuanMnO1xuaW1wb3J0IFBsYXllckV2ZW50cyBmcm9tICcuL3BsYXllci9wbGF5ZXItZXZlbnRzLmpzJztcbmltcG9ydCB7RXJyb3JUeXBlcywgRXJyb3JEZXRhaWxzfSBmcm9tICcuL3BsYXllci9wbGF5ZXItZXJyb3JzLmpzJztcbmltcG9ydCBMb2dnaW5nQ29udHJvbCBmcm9tICcuL3V0aWxzL2xvZ2dpbmctY29udHJvbC5qcyc7XG5pbXBvcnQge0ludmFsaWRBcmd1bWVudEV4Y2VwdGlvbn0gZnJvbSAnLi91dGlscy9leGNlcHRpb24uanMnO1xuXG4vLyBoZXJlIGFyZSBhbGwgdGhlIGludGVyZmFjZXNcblxuLy8gaW5zdGFsbCBwb2x5ZmlsbHNcblBvbHlmaWxsLmluc3RhbGwoKTtcblxuXG4vLyBmYWN0b3J5IG1ldGhvZFxuZnVuY3Rpb24gY3JlYXRlUGxheWVyKG1lZGlhRGF0YVNvdXJjZSwgb3B0aW9uYWxDb25maWcpIHtcbiAgICBsZXQgbWRzID0gbWVkaWFEYXRhU291cmNlO1xuICAgIGlmIChtZHMgPT0gbnVsbCB8fCB0eXBlb2YgbWRzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uKCdNZWRpYURhdGFTb3VyY2UgbXVzdCBiZSBhbiBqYXZhc2NyaXB0IG9iamVjdCEnKTtcbiAgICB9XG5cbiAgICBpZiAoIW1kcy5oYXNPd25Qcm9wZXJ0eSgndHlwZScpKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFeGNlcHRpb24oJ01lZGlhRGF0YVNvdXJjZSBtdXN0IGhhcyB0eXBlIGZpZWxkIHRvIGluZGljYXRlIHZpZGVvIGZpbGUgdHlwZSEnKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKG1kcy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2Zsdic6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsdlBsYXllcihtZHMsIG9wdGlvbmFsQ29uZmlnKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBuZXcgTmF0aXZlUGxheWVyKG1kcywgb3B0aW9uYWxDb25maWcpO1xuICAgIH1cbn1cblxuXG4vLyBmZWF0dXJlIGRldGVjdGlvblxuZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIEZlYXR1cmVzLnN1cHBvcnRNU0VIMjY0UGxheWJhY2soKTtcbn1cblxuZnVuY3Rpb24gZ2V0RmVhdHVyZUxpc3QoKSB7XG4gICAgcmV0dXJuIEZlYXR1cmVzLmdldEZlYXR1cmVMaXN0KCk7XG59XG5cblxuLy8gaW50ZXJmYWNlc1xubGV0IGZsdmpzID0ge307XG5cbmZsdmpzLmNyZWF0ZVBsYXllciA9IGNyZWF0ZVBsYXllcjtcbmZsdmpzLmlzU3VwcG9ydGVkID0gaXNTdXBwb3J0ZWQ7XG5mbHZqcy5nZXRGZWF0dXJlTGlzdCA9IGdldEZlYXR1cmVMaXN0O1xuXG5mbHZqcy5FdmVudHMgPSBQbGF5ZXJFdmVudHM7XG5mbHZqcy5FcnJvclR5cGVzID0gRXJyb3JUeXBlcztcbmZsdmpzLkVycm9yRGV0YWlscyA9IEVycm9yRGV0YWlscztcblxuZmx2anMuRmx2UGxheWVyID0gRmx2UGxheWVyO1xuZmx2anMuTmF0aXZlUGxheWVyID0gTmF0aXZlUGxheWVyO1xuZmx2anMuTG9nZ2luZ0NvbnRyb2wgPSBMb2dnaW5nQ29udHJvbDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGZsdmpzLCAndmVyc2lvbicsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyByZXBsYWNlZCBieSBicm93c2VyaWZ5LXZlcnNpb25pZnkgdHJhbnNmb3JtXG4gICAgICAgIHJldHVybiAnX19WRVJTSU9OX18nO1xuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmbHZqczsiLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IExvZyBmcm9tICcuLi91dGlscy9sb2dnZXIuanMnO1xuaW1wb3J0IEJyb3dzZXIgZnJvbSAnLi4vdXRpbHMvYnJvd3Nlci5qcyc7XG5pbXBvcnQge0Jhc2VMb2FkZXIsIExvYWRlclN0YXR1cywgTG9hZGVyRXJyb3JzfSBmcm9tICcuL2xvYWRlci5qcyc7XG5pbXBvcnQge1J1bnRpbWVFeGNlcHRpb259IGZyb20gJy4uL3V0aWxzL2V4Y2VwdGlvbi5qcyc7XG5cbi8qIGZldGNoICsgc3RyZWFtIElPIGxvYWRlci4gQ3VycmVudGx5IHdvcmtpbmcgb24gY2hyb21lIDQzKy5cbiAqIGZldGNoIHByb3ZpZGVzIGEgYmV0dGVyIGFsdGVybmF0aXZlIGh0dHAgQVBJIHRvIFhNTEh0dHBSZXF1ZXN0XG4gKlxuICogZmV0Y2ggc3BlYyAgIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnL1xuICogc3RyZWFtIHNwZWMgIGh0dHBzOi8vc3RyZWFtcy5zcGVjLndoYXR3Zy5vcmcvXG4gKi9cbmNsYXNzIEZldGNoU3RyZWFtTG9hZGVyIGV4dGVuZHMgQmFzZUxvYWRlciB7XG5cbiAgICBzdGF0aWMgaXNTdXBwb3J0ZWQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBmZXRjaCArIHN0cmVhbSBpcyBicm9rZW4gb24gTWljcm9zb2Z0IEVkZ2UuIERpc2FibGUgYmVmb3JlIGJ1aWxkIDE1MDQ4LlxuICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzgxOTY5MDcvXG4gICAgICAgICAgICAvLyBGaXhlZCBpbiBKYW4gMTAsIDIwMTcuIEJ1aWxkIDE1MDQ4KyByZW1vdmVkIGZyb20gYmxhY2tsaXN0LlxuICAgICAgICAgICAgbGV0IGlzV29ya1dlbGxFZGdlID0gQnJvd3Nlci5tc2VkZ2UgJiYgQnJvd3Nlci52ZXJzaW9uLm1pbm9yID49IDE1MDQ4O1xuICAgICAgICAgICAgbGV0IGJyb3dzZXJOb3RCbGFja2xpc3RlZCA9IEJyb3dzZXIubXNlZGdlID8gaXNXb3JrV2VsbEVkZ2UgOiB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIChzZWxmLmZldGNoICYmIHNlbGYuUmVhZGFibGVTdHJlYW0gJiYgYnJvd3Nlck5vdEJsYWNrbGlzdGVkKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3Ioc2Vla0hhbmRsZXIsIGNvbmZpZykge1xuICAgICAgICBzdXBlcignZmV0Y2gtc3RyZWFtLWxvYWRlcicpO1xuICAgICAgICB0aGlzLlRBRyA9ICdGZXRjaFN0cmVhbUxvYWRlcic7XG5cbiAgICAgICAgdGhpcy5fc2Vla0hhbmRsZXIgPSBzZWVrSGFuZGxlcjtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLl9uZWVkU3Rhc2ggPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX3JlcXVlc3RBYm9ydCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVjZWl2ZWRMZW5ndGggPSAwO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLmlzV29ya2luZygpKSB7XG4gICAgICAgICAgICB0aGlzLmFib3J0KCk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIG9wZW4oZGF0YVNvdXJjZSwgcmFuZ2UpIHtcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZSA9IGRhdGFTb3VyY2U7XG4gICAgICAgIHRoaXMuX3JhbmdlID0gcmFuZ2U7XG5cbiAgICAgICAgbGV0IHNvdXJjZVVSTCA9IGRhdGFTb3VyY2UudXJsO1xuICAgICAgICBpZiAodGhpcy5fY29uZmlnLnJldXNlUmVkaXJlY3RlZFVSTCAmJiBkYXRhU291cmNlLnJlZGlyZWN0ZWRVUkwgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzb3VyY2VVUkwgPSBkYXRhU291cmNlLnJlZGlyZWN0ZWRVUkw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2Vla0NvbmZpZyA9IHRoaXMuX3NlZWtIYW5kbGVyLmdldENvbmZpZyhzb3VyY2VVUkwsIHJhbmdlKTtcblxuICAgICAgICBsZXQgaGVhZGVycyA9IG5ldyBzZWxmLkhlYWRlcnMoKTtcblxuICAgICAgICBpZiAodHlwZW9mIHNlZWtDb25maWcuaGVhZGVycyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGxldCBjb25maWdIZWFkZXJzID0gc2Vla0NvbmZpZy5oZWFkZXJzO1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGNvbmZpZ0hlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgY29uZmlnSGVhZGVyc1trZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICBtb2RlOiAnY29ycycsXG4gICAgICAgICAgICBjYWNoZTogJ2RlZmF1bHQnLFxuICAgICAgICAgICAgLy8gVGhlIGRlZmF1bHQgcG9saWN5IG9mIEZldGNoIEFQSSBpbiB0aGUgd2hhdHdnIHN0YW5kYXJkXG4gICAgICAgICAgICAvLyBTYWZhcmkgaW5jb3JyZWN0bHkgaW5kaWNhdGVzICduby1yZWZlcnJlcicgYXMgZGVmYXVsdCBwb2xpY3ksIGZ1Y2sgaXRcbiAgICAgICAgICAgIHJlZmVycmVyUG9saWN5OiAnbm8tcmVmZXJyZXItd2hlbi1kb3duZ3JhZGUnXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gY29ycyBpcyBlbmFibGVkIGJ5IGRlZmF1bHRcbiAgICAgICAgaWYgKGRhdGFTb3VyY2UuY29ycyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIG5vLWNvcnMgbWVhbnMgJ2Rpc3JlZ2FyZCBjb3JzIHBvbGljeScsIHdoaWNoIGNhbiBvbmx5IGJlIHVzZWQgaW4gU2VydmljZVdvcmtlclxuICAgICAgICAgICAgcGFyYW1zLm1vZGUgPSAnc2FtZS1vcmlnaW4nO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2l0aENyZWRlbnRpYWxzIGlzIGRpc2FibGVkIGJ5IGRlZmF1bHRcbiAgICAgICAgaWYgKGRhdGFTb3VyY2Uud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICBwYXJhbXMuY3JlZGVudGlhbHMgPSAnaW5jbHVkZSc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZWZlcnJlclBvbGljeSBmcm9tIGNvbmZpZ1xuICAgICAgICBpZiAoZGF0YVNvdXJjZS5yZWZlcnJlclBvbGljeSkge1xuICAgICAgICAgICAgcGFyYW1zLnJlZmVycmVyUG9saWN5ID0gZGF0YVNvdXJjZS5yZWZlcnJlclBvbGljeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rQ29ubmVjdGluZztcbiAgICAgICAgc2VsZi5mZXRjaChzZWVrQ29uZmlnLnVybCwgcGFyYW1zKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0QWJvcnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0QWJvcnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0lkbGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcy5vayAmJiAocmVzLnN0YXR1cyA+PSAyMDAgJiYgcmVzLnN0YXR1cyA8PSAyOTkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy51cmwgIT09IHNlZWtDb25maWcudXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vblVSTFJlZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVkaXJlY3RlZFVSTCA9IHRoaXMuX3NlZWtIYW5kbGVyLnJlbW92ZVVSTFBhcmFtZXRlcnMocmVzLnVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblVSTFJlZGlyZWN0KHJlZGlyZWN0ZWRVUkwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGxlbmd0aEhlYWRlciA9IHJlcy5oZWFkZXJzLmdldCgnQ29udGVudC1MZW5ndGgnKTtcbiAgICAgICAgICAgICAgICBpZiAobGVuZ3RoSGVhZGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGVudExlbmd0aCA9IHBhcnNlSW50KGxlbmd0aEhlYWRlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb250ZW50TGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fb25Db250ZW50TGVuZ3RoS25vd24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkNvbnRlbnRMZW5ndGhLbm93bih0aGlzLl9jb250ZW50TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wdW1wLmNhbGwodGhpcywgcmVzLmJvZHkuZ2V0UmVhZGVyKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0Vycm9yO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoTG9hZGVyRXJyb3JzLkhUVFBfU1RBVFVTX0NPREVfSU5WQUxJRCwge2NvZGU6IHJlcy5zdGF0dXMsIG1zZzogcmVzLnN0YXR1c1RleHR9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbignRmV0Y2hTdHJlYW1Mb2FkZXI6IEh0dHAgY29kZSBpbnZhbGlkLCAnICsgcmVzLnN0YXR1cyArICcgJyArIHJlcy5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0Vycm9yO1xuICAgICAgICAgICAgaWYgKHRoaXMuX29uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkVycm9yKExvYWRlckVycm9ycy5FWENFUFRJT04sIHtjb2RlOiAtMSwgbXNnOiBlLm1lc3NhZ2V9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWJvcnQoKSB7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RBYm9ydCA9IHRydWU7XG4gICAgfVxuXG4gICAgX3B1bXAocmVhZGVyKSB7ICAvLyBSZWFkYWJsZVN0cmVhbVJlYWRlclxuICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWQoKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rQ29tcGxldGU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX29uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25Db21wbGV0ZSh0aGlzLl9yYW5nZS5mcm9tLCB0aGlzLl9yYW5nZS5mcm9tICsgdGhpcy5fcmVjZWl2ZWRMZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0QWJvcnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdEFib3J0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rQ29tcGxldGU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdHVzID0gTG9hZGVyU3RhdHVzLmtCdWZmZXJpbmc7XG5cbiAgICAgICAgICAgICAgICBsZXQgY2h1bmsgPSByZXN1bHQudmFsdWUuYnVmZmVyO1xuICAgICAgICAgICAgICAgIGxldCBieXRlU3RhcnQgPSB0aGlzLl9yYW5nZS5mcm9tICsgdGhpcy5fcmVjZWl2ZWRMZW5ndGg7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjZWl2ZWRMZW5ndGggKz0gY2h1bmsuYnl0ZUxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vbkRhdGFBcnJpdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRGF0YUFycml2YWwoY2h1bmssIGJ5dGVTdGFydCwgdGhpcy5fcmVjZWl2ZWRMZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX3B1bXAocmVhZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlLmNvZGUgPT09IDExICYmIEJyb3dzZXIubXNlZGdlKSB7ICAvLyBJbnZhbGlkU3RhdGVFcnJvciBvbiBNaWNyb3NvZnQgRWRnZVxuICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQ6IEVkZ2UgbWF5IHRocm93IEludmFsaWRTdGF0ZUVycm9yIGFmdGVyIFJlYWRhYmxlU3RyZWFtUmVhZGVyLmNhbmNlbCgpIGNhbGxcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgdGhlIHVua25vd24gZXhjZXB0aW9uLlxuICAgICAgICAgICAgICAgIC8vIFJlbGF0ZWQgaXNzdWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzExMjY1MjAyL1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc3RhdHVzID0gTG9hZGVyU3RhdHVzLmtFcnJvcjtcbiAgICAgICAgICAgIGxldCB0eXBlID0gMDtcbiAgICAgICAgICAgIGxldCBpbmZvID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKChlLmNvZGUgPT09IDE5IHx8IGUubWVzc2FnZSA9PT0gJ25ldHdvcmsgZXJyb3InKSAmJiAvLyBORVRXT1JLX0VSUlxuICAgICAgICAgICAgICAgICh0aGlzLl9jb250ZW50TGVuZ3RoID09PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuX2NvbnRlbnRMZW5ndGggIT09IG51bGwgJiYgdGhpcy5fcmVjZWl2ZWRMZW5ndGggPCB0aGlzLl9jb250ZW50TGVuZ3RoKSkpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gTG9hZGVyRXJyb3JzLkVBUkxZX0VPRjtcbiAgICAgICAgICAgICAgICBpbmZvID0ge2NvZGU6IGUuY29kZSwgbXNnOiAnRmV0Y2ggc3RyZWFtIG1lZXQgRWFybHktRU9GJ307XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHR5cGUgPSBMb2FkZXJFcnJvcnMuRVhDRVBUSU9OO1xuICAgICAgICAgICAgICAgIGluZm8gPSB7Y29kZTogZS5jb2RlLCBtc2c6IGUubWVzc2FnZX07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25FcnJvcih0eXBlLCBpbmZvKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oaW5mby5tc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmV0Y2hTdHJlYW1Mb2FkZXI7IiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBMb2cgZnJvbSAnLi4vdXRpbHMvbG9nZ2VyLmpzJztcbmltcG9ydCBTcGVlZFNhbXBsZXIgZnJvbSAnLi9zcGVlZC1zYW1wbGVyLmpzJztcbmltcG9ydCB7TG9hZGVyU3RhdHVzLCBMb2FkZXJFcnJvcnN9IGZyb20gJy4vbG9hZGVyLmpzJztcbmltcG9ydCBGZXRjaFN0cmVhbUxvYWRlciBmcm9tICcuL2ZldGNoLXN0cmVhbS1sb2FkZXIuanMnO1xuaW1wb3J0IE1vekNodW5rZWRMb2FkZXIgZnJvbSAnLi94aHItbW96LWNodW5rZWQtbG9hZGVyLmpzJztcbmltcG9ydCBNU1N0cmVhbUxvYWRlciBmcm9tICcuL3hoci1tc3N0cmVhbS1sb2FkZXIuanMnO1xuaW1wb3J0IFJhbmdlTG9hZGVyIGZyb20gJy4veGhyLXJhbmdlLWxvYWRlci5qcyc7XG5pbXBvcnQgV2ViU29ja2V0TG9hZGVyIGZyb20gJy4vd2Vic29ja2V0LWxvYWRlci5qcyc7XG5pbXBvcnQgUmFuZ2VTZWVrSGFuZGxlciBmcm9tICcuL3JhbmdlLXNlZWstaGFuZGxlci5qcyc7XG5pbXBvcnQgUGFyYW1TZWVrSGFuZGxlciBmcm9tICcuL3BhcmFtLXNlZWstaGFuZGxlci5qcyc7XG5pbXBvcnQge1J1bnRpbWVFeGNlcHRpb24sIElsbGVnYWxTdGF0ZUV4Y2VwdGlvbiwgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9ufSBmcm9tICcuLi91dGlscy9leGNlcHRpb24uanMnO1xuXG4vKipcbiAqIERhdGFTb3VyY2U6IHtcbiAqICAgICB1cmw6IHN0cmluZyxcbiAqICAgICBmaWxlc2l6ZTogbnVtYmVyLFxuICogICAgIGNvcnM6IGJvb2xlYW4sXG4gKiAgICAgd2l0aENyZWRlbnRpYWxzOiBib29sZWFuXG4gKiB9XG4gKiBcbiAqL1xuXG4vLyBNYW5hZ2UgSU8gTG9hZGVyc1xuY2xhc3MgSU9Db250cm9sbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGFTb3VyY2UsIGNvbmZpZywgZXh0cmFEYXRhKSB7XG4gICAgICAgIHRoaXMuVEFHID0gJ0lPQ29udHJvbGxlcic7XG5cbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLl9leHRyYURhdGEgPSBleHRyYURhdGE7XG5cbiAgICAgICAgdGhpcy5fc3Rhc2hJbml0aWFsU2l6ZSA9IDEwMjQgKiAzODQ7ICAvLyBkZWZhdWx0IGluaXRpYWwgc2l6ZTogMzg0S0JcbiAgICAgICAgaWYgKGNvbmZpZy5zdGFzaEluaXRpYWxTaXplICE9IHVuZGVmaW5lZCAmJiBjb25maWcuc3Rhc2hJbml0aWFsU2l6ZSA+IDApIHtcbiAgICAgICAgICAgIC8vIGFwcGx5IGZyb20gY29uZmlnXG4gICAgICAgICAgICB0aGlzLl9zdGFzaEluaXRpYWxTaXplID0gY29uZmlnLnN0YXNoSW5pdGlhbFNpemU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zdGFzaFVzZWQgPSAwO1xuICAgICAgICB0aGlzLl9zdGFzaFNpemUgPSB0aGlzLl9zdGFzaEluaXRpYWxTaXplO1xuICAgICAgICB0aGlzLl9idWZmZXJTaXplID0gMTAyNCAqIDEwMjQgKiAzOyAgLy8gaW5pdGlhbCBzaXplOiAzTUJcbiAgICAgICAgdGhpcy5fc3Rhc2hCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIodGhpcy5fYnVmZmVyU2l6ZSk7XG4gICAgICAgIHRoaXMuX3N0YXNoQnl0ZVN0YXJ0ID0gMDtcbiAgICAgICAgdGhpcy5fZW5hYmxlU3Rhc2ggPSB0cnVlO1xuICAgICAgICBpZiAoY29uZmlnLmVuYWJsZVN0YXNoQnVmZmVyID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5fZW5hYmxlU3Rhc2ggPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvYWRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xvYWRlckNsYXNzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2Vla0hhbmRsZXIgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2RhdGFTb3VyY2UgPSBkYXRhU291cmNlO1xuICAgICAgICB0aGlzLl9pc1dlYlNvY2tldFVSTCA9IC93c3M/OlxcL1xcLyguKz8pLy50ZXN0KGRhdGFTb3VyY2UudXJsKTtcbiAgICAgICAgdGhpcy5fcmVmVG90YWxMZW5ndGggPSBkYXRhU291cmNlLmZpbGVzaXplID8gZGF0YVNvdXJjZS5maWxlc2l6ZSA6IG51bGw7XG4gICAgICAgIHRoaXMuX3RvdGFsTGVuZ3RoID0gdGhpcy5fcmVmVG90YWxMZW5ndGg7XG4gICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0RmxhZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jdXJyZW50UmFuZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9yZWRpcmVjdGVkVVJMID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9zcGVlZE5vcm1hbGl6ZWQgPSAwO1xuICAgICAgICB0aGlzLl9zcGVlZFNhbXBsZXIgPSBuZXcgU3BlZWRTYW1wbGVyKCk7XG4gICAgICAgIHRoaXMuX3NwZWVkTm9ybWFsaXplTGlzdCA9IFs2NCwgMTI4LCAyNTYsIDM4NCwgNTEyLCA3NjgsIDEwMjQsIDE1MzYsIDIwNDgsIDMwNzIsIDQwOTZdO1xuXG4gICAgICAgIHRoaXMuX2lzRWFybHlFb2ZSZWNvbm5lY3RpbmcgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVzdW1lRnJvbSA9IDA7XG5cbiAgICAgICAgdGhpcy5fb25EYXRhQXJyaXZhbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uU2Vla2VkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25FcnJvciA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uQ29tcGxldGUgPSBudWxsO1xuICAgICAgICB0aGlzLl9vblJlZGlyZWN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25SZWNvdmVyZWRFYXJseUVvZiA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fc2VsZWN0U2Vla0hhbmRsZXIoKTtcbiAgICAgICAgdGhpcy5fc2VsZWN0TG9hZGVyKCk7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUxvYWRlcigpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9sb2FkZXIuaXNXb3JraW5nKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlci5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xvYWRlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuX2xvYWRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xvYWRlckNsYXNzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N0YXNoQnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3Rhc2hVc2VkID0gdGhpcy5fc3Rhc2hTaXplID0gdGhpcy5fYnVmZmVyU2l6ZSA9IHRoaXMuX3N0YXNoQnl0ZVN0YXJ0ID0gMDtcbiAgICAgICAgdGhpcy5fY3VycmVudFJhbmdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3BlZWRTYW1wbGVyID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9pc0Vhcmx5RW9mUmVjb25uZWN0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5fb25EYXRhQXJyaXZhbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uU2Vla2VkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25FcnJvciA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uQ29tcGxldGUgPSBudWxsO1xuICAgICAgICB0aGlzLl9vblJlZGlyZWN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25SZWNvdmVyZWRFYXJseUVvZiA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fZXh0cmFEYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICBpc1dvcmtpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkZXIgJiYgdGhpcy5fbG9hZGVyLmlzV29ya2luZygpICYmICF0aGlzLl9wYXVzZWQ7XG4gICAgfVxuXG4gICAgaXNQYXVzZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXVzZWQ7XG4gICAgfVxuXG4gICAgZ2V0IHN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRlci5zdGF0dXM7XG4gICAgfVxuXG4gICAgZ2V0IGV4dHJhRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4dHJhRGF0YTtcbiAgICB9XG5cbiAgICBzZXQgZXh0cmFEYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fZXh0cmFEYXRhID0gZGF0YTtcbiAgICB9XG5cbiAgICAvLyBwcm90b3R5cGU6IGZ1bmN0aW9uIG9uRGF0YUFycml2YWwoY2h1bmtzOiBBcnJheUJ1ZmZlciwgYnl0ZVN0YXJ0OiBudW1iZXIpOiBudW1iZXJcbiAgICBnZXQgb25EYXRhQXJyaXZhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uRGF0YUFycml2YWw7XG4gICAgfVxuXG4gICAgc2V0IG9uRGF0YUFycml2YWwoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb25EYXRhQXJyaXZhbCA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGdldCBvblNlZWtlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uU2Vla2VkO1xuICAgIH1cblxuICAgIHNldCBvblNlZWtlZChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9vblNlZWtlZCA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIC8vIHByb3RvdHlwZTogZnVuY3Rpb24gb25FcnJvcih0eXBlOiBudW1iZXIsIGluZm86IHtjb2RlOiBudW1iZXIsIG1zZzogc3RyaW5nfSk6IHZvaWRcbiAgICBnZXQgb25FcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uRXJyb3I7XG4gICAgfVxuXG4gICAgc2V0IG9uRXJyb3IoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb25FcnJvciA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGdldCBvbkNvbXBsZXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb25Db21wbGV0ZTtcbiAgICB9XG5cbiAgICBzZXQgb25Db21wbGV0ZShjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9vbkNvbXBsZXRlID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZ2V0IG9uUmVkaXJlY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vblJlZGlyZWN0O1xuICAgIH1cblxuICAgIHNldCBvblJlZGlyZWN0KGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29uUmVkaXJlY3QgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBnZXQgb25SZWNvdmVyZWRFYXJseUVvZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uUmVjb3ZlcmVkRWFybHlFb2Y7XG4gICAgfVxuXG4gICAgc2V0IG9uUmVjb3ZlcmVkRWFybHlFb2YoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb25SZWNvdmVyZWRFYXJseUVvZiA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGdldCBjdXJyZW50VVJMKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVNvdXJjZS51cmw7XG4gICAgfVxuXG4gICAgZ2V0IGhhc1JlZGlyZWN0KCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX3JlZGlyZWN0ZWRVUkwgIT0gbnVsbCB8fCB0aGlzLl9kYXRhU291cmNlLnJlZGlyZWN0ZWRVUkwgIT0gdW5kZWZpbmVkKTtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudFJlZGlyZWN0ZWRVUkwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWRpcmVjdGVkVVJMIHx8IHRoaXMuX2RhdGFTb3VyY2UucmVkaXJlY3RlZFVSTDtcbiAgICB9XG5cbiAgICAvLyBpbiBLQi9zXG4gICAgZ2V0IGN1cnJlbnRTcGVlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xvYWRlckNsYXNzID09PSBSYW5nZUxvYWRlcikge1xuICAgICAgICAgICAgLy8gU3BlZWRTYW1wbGVyIGlzIGluYWNjdXJhY3kgaWYgbG9hZGVyIGlzIFJhbmdlTG9hZGVyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZGVyLmN1cnJlbnRTcGVlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc3BlZWRTYW1wbGVyLmxhc3RTZWNvbmRLQnBzO1xuICAgIH1cblxuICAgIGdldCBsb2FkZXJUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZGVyLnR5cGU7XG4gICAgfVxuXG4gICAgX3NlbGVjdFNlZWtIYW5kbGVyKCkge1xuICAgICAgICBsZXQgY29uZmlnID0gdGhpcy5fY29uZmlnO1xuXG4gICAgICAgIGlmIChjb25maWcuc2Vla1R5cGUgPT09ICdyYW5nZScpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlZWtIYW5kbGVyID0gbmV3IFJhbmdlU2Vla0hhbmRsZXIodGhpcy5fY29uZmlnLnJhbmdlTG9hZFplcm9TdGFydCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLnNlZWtUeXBlID09PSAncGFyYW0nKSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1TdGFydCA9IGNvbmZpZy5zZWVrUGFyYW1TdGFydCB8fCAnYnN0YXJ0JztcbiAgICAgICAgICAgIGxldCBwYXJhbUVuZCA9IGNvbmZpZy5zZWVrUGFyYW1FbmQgfHwgJ2JlbmQnO1xuXG4gICAgICAgICAgICB0aGlzLl9zZWVrSGFuZGxlciA9IG5ldyBQYXJhbVNlZWtIYW5kbGVyKHBhcmFtU3RhcnQsIHBhcmFtRW5kKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcuc2Vla1R5cGUgPT09ICdjdXN0b20nKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5jdXN0b21TZWVrSGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFeGNlcHRpb24oJ0N1c3RvbSBzZWVrVHlwZSBzcGVjaWZpZWQgaW4gY29uZmlnIGJ1dCBpbnZhbGlkIGN1c3RvbVNlZWtIYW5kbGVyIScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc2Vla0hhbmRsZXIgPSBuZXcgY29uZmlnLmN1c3RvbVNlZWtIYW5kbGVyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uKGBJbnZhbGlkIHNlZWtUeXBlIGluIGNvbmZpZzogJHtjb25maWcuc2Vla1R5cGV9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2VsZWN0TG9hZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5faXNXZWJTb2NrZXRVUkwpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlckNsYXNzID0gV2ViU29ja2V0TG9hZGVyO1xuICAgICAgICB9IGVsc2UgaWYgKEZldGNoU3RyZWFtTG9hZGVyLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlckNsYXNzID0gRmV0Y2hTdHJlYW1Mb2FkZXI7XG4gICAgICAgIH0gZWxzZSBpZiAoTW96Q2h1bmtlZExvYWRlci5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2FkZXJDbGFzcyA9IE1vekNodW5rZWRMb2FkZXI7XG4gICAgICAgIH0gZWxzZSBpZiAoUmFuZ2VMb2FkZXIuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5fbG9hZGVyQ2xhc3MgPSBSYW5nZUxvYWRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKCdZb3VyIGJyb3dzZXIgZG9lc25cXCd0IHN1cHBvcnQgeGhyIHdpdGggYXJyYXlidWZmZXIgcmVzcG9uc2VUeXBlIScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NyZWF0ZUxvYWRlcigpIHtcbiAgICAgICAgdGhpcy5fbG9hZGVyID0gbmV3IHRoaXMuX2xvYWRlckNsYXNzKHRoaXMuX3NlZWtIYW5kbGVyLCB0aGlzLl9jb25maWcpO1xuICAgICAgICBpZiAodGhpcy5fbG9hZGVyLm5lZWRTdGFzaEJ1ZmZlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2VuYWJsZVN0YXNoID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbG9hZGVyLm9uQ29udGVudExlbmd0aEtub3duID0gdGhpcy5fb25Db250ZW50TGVuZ3RoS25vd24uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fbG9hZGVyLm9uVVJMUmVkaXJlY3QgPSB0aGlzLl9vblVSTFJlZGlyZWN0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2xvYWRlci5vbkRhdGFBcnJpdmFsID0gdGhpcy5fb25Mb2FkZXJDaHVua0Fycml2YWwuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fbG9hZGVyLm9uQ29tcGxldGUgPSB0aGlzLl9vbkxvYWRlckNvbXBsZXRlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2xvYWRlci5vbkVycm9yID0gdGhpcy5fb25Mb2FkZXJFcnJvci5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIG9wZW4ob3B0aW9uYWxGcm9tKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRSYW5nZSA9IHtmcm9tOiAwLCB0bzogLTF9O1xuICAgICAgICBpZiAob3B0aW9uYWxGcm9tKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50UmFuZ2UuZnJvbSA9IG9wdGlvbmFsRnJvbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NwZWVkU2FtcGxlci5yZXNldCgpO1xuICAgICAgICBpZiAoIW9wdGlvbmFsRnJvbSkge1xuICAgICAgICAgICAgdGhpcy5fZnVsbFJlcXVlc3RGbGFnID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvYWRlci5vcGVuKHRoaXMuX2RhdGFTb3VyY2UsIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX2N1cnJlbnRSYW5nZSkpO1xuICAgIH1cblxuICAgIGFib3J0KCkge1xuICAgICAgICB0aGlzLl9sb2FkZXIuYWJvcnQoKTtcblxuICAgICAgICBpZiAodGhpcy5fcGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc3VtZUZyb20gPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGF1c2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzV29ya2luZygpKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2FkZXIuYWJvcnQoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXNoVXNlZCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3VtZUZyb20gPSB0aGlzLl9zdGFzaEJ5dGVTdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50UmFuZ2UudG8gPSB0aGlzLl9zdGFzaEJ5dGVTdGFydCAtIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3VtZUZyb20gPSB0aGlzLl9jdXJyZW50UmFuZ2UudG8gKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc3Rhc2hVc2VkID0gMDtcbiAgICAgICAgICAgIHRoaXMuX3N0YXNoQnl0ZVN0YXJ0ID0gMDtcbiAgICAgICAgICAgIHRoaXMuX3BhdXNlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXN1bWUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGJ5dGVzID0gdGhpcy5fcmVzdW1lRnJvbTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc3VtZUZyb20gPSAwO1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxTZWVrKGJ5dGVzLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlZWsoYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5fcGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3N0YXNoVXNlZCA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXNoQnl0ZVN0YXJ0ID0gMDtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxTZWVrKGJ5dGVzLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHNlZWtpbmcgcmVxdWVzdCBpcyBmcm9tIG1lZGlhIHNlZWtpbmcsIHVuY29uc3VtZWQgc3Rhc2ggZGF0YSBzaG91bGQgYmUgZHJvcHBlZFxuICAgICAqIEhvd2V2ZXIsIHN0YXNoIGRhdGEgc2hvdWxkbid0IGJlIGRyb3BwZWQgaWYgc2Vla2luZyByZXF1ZXN0ZWQgZnJvbSBodHRwIHJlY29ubmVjdGlvblxuICAgICAqXG4gICAgICogQGRyb3BVbmNvbnN1bWVkOiBJZ25vcmUgYW5kIGRpc2NhcmQgYWxsIHVuY29uc3VtZWQgZGF0YSBpbiBzdGFzaCBidWZmZXJcbiAgICAgKi9cbiAgICBfaW50ZXJuYWxTZWVrKGJ5dGVzLCBkcm9wVW5jb25zdW1lZCkge1xuICAgICAgICBpZiAodGhpcy5fbG9hZGVyLmlzV29ya2luZygpKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2FkZXIuYWJvcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRpc3BhdGNoICYgZmx1c2ggc3Rhc2ggYnVmZmVyIGJlZm9yZSBzZWVrXG4gICAgICAgIHRoaXMuX2ZsdXNoU3Rhc2hCdWZmZXIoZHJvcFVuY29uc3VtZWQpO1xuXG4gICAgICAgIHRoaXMuX2xvYWRlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuX2xvYWRlciA9IG51bGw7XG5cbiAgICAgICAgbGV0IHJlcXVlc3RSYW5nZSA9IHtmcm9tOiBieXRlcywgdG86IC0xfTtcbiAgICAgICAgdGhpcy5fY3VycmVudFJhbmdlID0ge2Zyb206IHJlcXVlc3RSYW5nZS5mcm9tLCB0bzogLTF9O1xuXG4gICAgICAgIHRoaXMuX3NwZWVkU2FtcGxlci5yZXNldCgpO1xuICAgICAgICB0aGlzLl9zdGFzaFNpemUgPSB0aGlzLl9zdGFzaEluaXRpYWxTaXplO1xuICAgICAgICB0aGlzLl9jcmVhdGVMb2FkZXIoKTtcbiAgICAgICAgdGhpcy5fbG9hZGVyLm9wZW4odGhpcy5fZGF0YVNvdXJjZSwgcmVxdWVzdFJhbmdlKTtcblxuICAgICAgICBpZiAodGhpcy5fb25TZWVrZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX29uU2Vla2VkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVVcmwodXJsKSB7XG4gICAgICAgIGlmICghdXJsIHx8IHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8IHVybC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFeGNlcHRpb24oJ1VybCBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZyEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RhdGFTb3VyY2UudXJsID0gdXJsO1xuXG4gICAgICAgIC8vIFRPRE86IHJlcGxhY2Ugd2l0aCBuZXcgdXJsXG4gICAgfVxuXG4gICAgX2V4cGFuZEJ1ZmZlcihleHBlY3RlZEJ5dGVzKSB7XG4gICAgICAgIGxldCBidWZmZXJOZXdTaXplID0gdGhpcy5fc3Rhc2hTaXplO1xuICAgICAgICB3aGlsZSAoYnVmZmVyTmV3U2l6ZSArIDEwMjQgKiAxMDI0ICogMSA8IGV4cGVjdGVkQnl0ZXMpIHtcbiAgICAgICAgICAgIGJ1ZmZlck5ld1NpemUgKj0gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1ZmZlck5ld1NpemUgKz0gMTAyNCAqIDEwMjQgKiAxOyAgLy8gYnVmZmVyU2l6ZSA9IHN0YXNoU2l6ZSArIDFNQlxuICAgICAgICBpZiAoYnVmZmVyTmV3U2l6ZSA9PT0gdGhpcy5fYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5ld0J1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJOZXdTaXplKTtcblxuICAgICAgICBpZiAodGhpcy5fc3Rhc2hVc2VkID4gMCkgeyAgLy8gY29weSBleGlzdGluZyBkYXRhIGludG8gbmV3IGJ1ZmZlclxuICAgICAgICAgICAgbGV0IHN0YXNoT2xkQXJyYXkgPSBuZXcgVWludDhBcnJheSh0aGlzLl9zdGFzaEJ1ZmZlciwgMCwgdGhpcy5fc3Rhc2hVc2VkKTtcbiAgICAgICAgICAgIGxldCBzdGFzaE5ld0FycmF5ID0gbmV3IFVpbnQ4QXJyYXkobmV3QnVmZmVyLCAwLCBidWZmZXJOZXdTaXplKTtcbiAgICAgICAgICAgIHN0YXNoTmV3QXJyYXkuc2V0KHN0YXNoT2xkQXJyYXksIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3Rhc2hCdWZmZXIgPSBuZXdCdWZmZXI7XG4gICAgICAgIHRoaXMuX2J1ZmZlclNpemUgPSBidWZmZXJOZXdTaXplO1xuICAgIH1cblxuICAgIF9ub3JtYWxpemVTcGVlZChpbnB1dCkge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuX3NwZWVkTm9ybWFsaXplTGlzdDtcbiAgICAgICAgbGV0IGxhc3QgPSBsaXN0Lmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBtaWQgPSAwO1xuICAgICAgICBsZXQgbGJvdW5kID0gMDtcbiAgICAgICAgbGV0IHVib3VuZCA9IGxhc3Q7XG5cbiAgICAgICAgaWYgKGlucHV0IDwgbGlzdFswXSkge1xuICAgICAgICAgICAgcmV0dXJuIGxpc3RbMF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiaW5hcnkgc2VhcmNoXG4gICAgICAgIHdoaWxlIChsYm91bmQgPD0gdWJvdW5kKSB7XG4gICAgICAgICAgICBtaWQgPSBsYm91bmQgKyBNYXRoLmZsb29yKCh1Ym91bmQgLSBsYm91bmQpIC8gMik7XG4gICAgICAgICAgICBpZiAobWlkID09PSBsYXN0IHx8IChpbnB1dCA+PSBsaXN0W21pZF0gJiYgaW5wdXQgPCBsaXN0W21pZCArIDFdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0W21pZF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RbbWlkXSA8IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgbGJvdW5kID0gbWlkICsgMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWJvdW5kID0gbWlkIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9hZGp1c3RTdGFzaFNpemUobm9ybWFsaXplZCkge1xuICAgICAgICBsZXQgc3Rhc2hTaXplS0IgPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcuaXNMaXZlKSB7XG4gICAgICAgICAgICAvLyBsaXZlIHN0cmVhbTogYWx3YXlzIHVzZSBzaW5nbGUgbm9ybWFsaXplZCBzcGVlZCBmb3Igc2l6ZSBvZiBzdGFzaFNpemVLQlxuICAgICAgICAgICAgc3Rhc2hTaXplS0IgPSBub3JtYWxpemVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWQgPCA1MTIpIHtcbiAgICAgICAgICAgICAgICBzdGFzaFNpemVLQiA9IG5vcm1hbGl6ZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWQgPj0gNTEyICYmIG5vcm1hbGl6ZWQgPD0gMTAyNCkge1xuICAgICAgICAgICAgICAgIHN0YXNoU2l6ZUtCID0gTWF0aC5mbG9vcihub3JtYWxpemVkICogMS41KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Rhc2hTaXplS0IgPSBub3JtYWxpemVkICogMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFzaFNpemVLQiA+IDgxOTIpIHtcbiAgICAgICAgICAgIHN0YXNoU2l6ZUtCID0gODE5MjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBidWZmZXJTaXplID0gc3Rhc2hTaXplS0IgKiAxMDI0ICsgMTAyNCAqIDEwMjQgKiAxOyAgLy8gc3Rhc2hTaXplICsgMU1CXG4gICAgICAgIGlmICh0aGlzLl9idWZmZXJTaXplIDwgYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fZXhwYW5kQnVmZmVyKGJ1ZmZlclNpemUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXNoU2l6ZSA9IHN0YXNoU2l6ZUtCICogMTAyNDtcbiAgICB9XG5cbiAgICBfZGlzcGF0Y2hDaHVua3MoY2h1bmtzLCBieXRlU3RhcnQpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudFJhbmdlLnRvID0gYnl0ZVN0YXJ0ICsgY2h1bmtzLmJ5dGVMZW5ndGggLSAxO1xuICAgICAgICByZXR1cm4gdGhpcy5fb25EYXRhQXJyaXZhbChjaHVua3MsIGJ5dGVTdGFydCk7XG4gICAgfVxuXG4gICAgX29uVVJMUmVkaXJlY3QocmVkaXJlY3RlZFVSTCkge1xuICAgICAgICB0aGlzLl9yZWRpcmVjdGVkVVJMID0gcmVkaXJlY3RlZFVSTDtcbiAgICAgICAgaWYgKHRoaXMuX29uUmVkaXJlY3QpIHtcbiAgICAgICAgICAgIHRoaXMuX29uUmVkaXJlY3QocmVkaXJlY3RlZFVSTCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25Db250ZW50TGVuZ3RoS25vd24oY29udGVudExlbmd0aCkge1xuICAgICAgICBpZiAoY29udGVudExlbmd0aCAmJiB0aGlzLl9mdWxsUmVxdWVzdEZsYWcpIHtcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsTGVuZ3RoID0gY29udGVudExlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0RmxhZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uTG9hZGVyQ2h1bmtBcnJpdmFsKGNodW5rLCBieXRlU3RhcnQsIHJlY2VpdmVkTGVuZ3RoKSB7XG4gICAgICAgIGlmICghdGhpcy5fb25EYXRhQXJyaXZhbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbignSU9Db250cm9sbGVyOiBObyBleGlzdGluZyBjb25zdW1lciAob25EYXRhQXJyaXZhbCkgY2FsbGJhY2shJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3BhdXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pc0Vhcmx5RW9mUmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAvLyBBdXRvLXJlY29ubmVjdCBmb3IgRWFybHlFb2Ygc3VjY2VlZCwgbm90aWZ5IHRvIHVwcGVyLWxheWVyIGJ5IGNhbGxiYWNrXG4gICAgICAgICAgICB0aGlzLl9pc0Vhcmx5RW9mUmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5fb25SZWNvdmVyZWRFYXJseUVvZikge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uUmVjb3ZlcmVkRWFybHlFb2YoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NwZWVkU2FtcGxlci5hZGRCeXRlcyhjaHVuay5ieXRlTGVuZ3RoKTtcblxuICAgICAgICAvLyBhZGp1c3Qgc3Rhc2ggYnVmZmVyIHNpemUgYWNjb3JkaW5nIHRvIG5ldHdvcmsgc3BlZWQgZHluYW1pY2FsbHlcbiAgICAgICAgbGV0IEtCcHMgPSB0aGlzLl9zcGVlZFNhbXBsZXIubGFzdFNlY29uZEtCcHM7XG4gICAgICAgIGlmIChLQnBzICE9PSAwKSB7XG4gICAgICAgICAgICBsZXQgbm9ybWFsaXplZCA9IHRoaXMuX25vcm1hbGl6ZVNwZWVkKEtCcHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NwZWVkTm9ybWFsaXplZCAhPT0gbm9ybWFsaXplZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NwZWVkTm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWRqdXN0U3Rhc2hTaXplKG5vcm1hbGl6ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9lbmFibGVTdGFzaCkgeyAgLy8gZGlzYWJsZSBzdGFzaFxuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXNoVXNlZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIGRpc3BhdGNoIGNodW5rIGRpcmVjdGx5IHRvIGNvbnN1bWVyO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIHJldCB2YWx1ZSAoY29uc3VtZWQgYnl0ZXMpIGFuZCBzdGFzaCB1bmNvbnN1bWVkIHRvIHN0YXNoQnVmZmVyXG4gICAgICAgICAgICAgICAgbGV0IGNvbnN1bWVkID0gdGhpcy5fZGlzcGF0Y2hDaHVua3MoY2h1bmssIGJ5dGVTdGFydCk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnN1bWVkIDwgY2h1bmsuYnl0ZUxlbmd0aCkgeyAgLy8gdW5jb25zdW1lZCBkYXRhIHJlbWFpbi5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbWFpbiA9IGNodW5rLmJ5dGVMZW5ndGggLSBjb25zdW1lZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbWFpbiA+IHRoaXMuX2J1ZmZlclNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4cGFuZEJ1ZmZlcihyZW1haW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdGFzaEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fc3Rhc2hCdWZmZXIsIDAsIHRoaXMuX2J1ZmZlclNpemUpO1xuICAgICAgICAgICAgICAgICAgICBzdGFzaEFycmF5LnNldChuZXcgVWludDhBcnJheShjaHVuaywgY29uc3VtZWQpLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Rhc2hVc2VkICs9IHJlbWFpbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Rhc2hCeXRlU3RhcnQgPSBieXRlU3RhcnQgKyBjb25zdW1lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGVsc2U6IE1lcmdlIGNodW5rIGludG8gc3Rhc2hCdWZmZXIsIGFuZCBkaXNwYXRjaCBzdGFzaEJ1ZmZlciB0byBjb25zdW1lci5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3Rhc2hVc2VkICsgY2h1bmsuYnl0ZUxlbmd0aCA+IHRoaXMuX2J1ZmZlclNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXhwYW5kQnVmZmVyKHRoaXMuX3N0YXNoVXNlZCArIGNodW5rLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgc3Rhc2hBcnJheSA9IG5ldyBVaW50OEFycmF5KHRoaXMuX3N0YXNoQnVmZmVyLCAwLCB0aGlzLl9idWZmZXJTaXplKTtcbiAgICAgICAgICAgICAgICBzdGFzaEFycmF5LnNldChuZXcgVWludDhBcnJheShjaHVuayksIHRoaXMuX3N0YXNoVXNlZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Rhc2hVc2VkICs9IGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnN1bWVkID0gdGhpcy5fZGlzcGF0Y2hDaHVua3ModGhpcy5fc3Rhc2hCdWZmZXIuc2xpY2UoMCwgdGhpcy5fc3Rhc2hVc2VkKSwgdGhpcy5fc3Rhc2hCeXRlU3RhcnQpO1xuICAgICAgICAgICAgICAgIGlmIChjb25zdW1lZCA8IHRoaXMuX3N0YXNoVXNlZCAmJiBjb25zdW1lZCA+IDApIHsgIC8vIHVuY29uc3VtZWQgZGF0YSByZW1haW5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbWFpbkFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fc3Rhc2hCdWZmZXIsIGNvbnN1bWVkKTtcbiAgICAgICAgICAgICAgICAgICAgc3Rhc2hBcnJheS5zZXQocmVtYWluQXJyYXksIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFzaFVzZWQgLT0gY29uc3VtZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Rhc2hCeXRlU3RhcnQgKz0gY29uc3VtZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7ICAvLyBlbmFibGUgc3Rhc2hcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGFzaFVzZWQgPT09IDAgJiYgdGhpcy5fc3Rhc2hCeXRlU3RhcnQgPT09IDApIHsgIC8vIHNlZWtlZD8gb3IgaW5pdCBjaHVuaz9cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBjaHVuayBhZnRlciBzZWVrIGFjdGlvblxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXNoQnl0ZVN0YXJ0ID0gYnl0ZVN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXNoVXNlZCArIGNodW5rLmJ5dGVMZW5ndGggPD0gdGhpcy5fc3Rhc2hTaXplKSB7XG4gICAgICAgICAgICAgICAgLy8ganVzdCBzdGFzaFxuICAgICAgICAgICAgICAgIGxldCBzdGFzaEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fc3Rhc2hCdWZmZXIsIDAsIHRoaXMuX3N0YXNoU2l6ZSk7XG4gICAgICAgICAgICAgICAgc3Rhc2hBcnJheS5zZXQobmV3IFVpbnQ4QXJyYXkoY2h1bmspLCB0aGlzLl9zdGFzaFVzZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXNoVXNlZCArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgfSBlbHNlIHsgIC8vIHN0YXNoVXNlZCArIGNodW5rU2l6ZSA+IHN0YXNoU2l6ZSwgc2l6ZSBsaW1pdCBleGNlZWRlZFxuICAgICAgICAgICAgICAgIGxldCBzdGFzaEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fc3Rhc2hCdWZmZXIsIDAsIHRoaXMuX2J1ZmZlclNpemUpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdGFzaFVzZWQgPiAwKSB7ICAvLyBUaGVyZSdyZSBzdGFzaCBkYXRhcyBpbiBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlzcGF0Y2ggdGhlIHdob2xlIHN0YXNoQnVmZmVyLCBhbmQgc3Rhc2ggcmVtYWluIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlbiBhcHBlbmQgY2h1bmsgdG8gc3Rhc2hCdWZmZXIgKHN0YXNoKVxuICAgICAgICAgICAgICAgICAgICBsZXQgYnVmZmVyID0gdGhpcy5fc3Rhc2hCdWZmZXIuc2xpY2UoMCwgdGhpcy5fc3Rhc2hVc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnN1bWVkID0gdGhpcy5fZGlzcGF0Y2hDaHVua3MoYnVmZmVyLCB0aGlzLl9zdGFzaEJ5dGVTdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25zdW1lZCA8IGJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uc3VtZWQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbWFpbkFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBjb25zdW1lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rhc2hBcnJheS5zZXQocmVtYWluQXJyYXksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXNoVXNlZCA9IHJlbWFpbkFycmF5LmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Rhc2hCeXRlU3RhcnQgKz0gY29uc3VtZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGFzaFVzZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Rhc2hCeXRlU3RhcnQgKz0gY29uc3VtZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXNoVXNlZCArIGNodW5rLmJ5dGVMZW5ndGggPiB0aGlzLl9idWZmZXJTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9leHBhbmRCdWZmZXIodGhpcy5fc3Rhc2hVc2VkICsgY2h1bmsuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFzaEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fc3Rhc2hCdWZmZXIsIDAsIHRoaXMuX2J1ZmZlclNpemUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXNoQXJyYXkuc2V0KG5ldyBVaW50OEFycmF5KGNodW5rKSwgdGhpcy5fc3Rhc2hVc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Rhc2hVc2VkICs9IGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgIC8vIHN0YXNoIGJ1ZmZlciBlbXB0eSwgYnV0IGNodW5rU2l6ZSA+IHN0YXNoU2l6ZSAob2gsIGhvbHkgc2hpdClcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlzcGF0Y2ggY2h1bmsgZGlyZWN0bHkgYW5kIHN0YXNoIHJlbWFpbiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb25zdW1lZCA9IHRoaXMuX2Rpc3BhdGNoQ2h1bmtzKGNodW5rLCBieXRlU3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29uc3VtZWQgPCBjaHVuay5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVtYWluID0gY2h1bmsuYnl0ZUxlbmd0aCAtIGNvbnN1bWVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbWFpbiA+IHRoaXMuX2J1ZmZlclNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9leHBhbmRCdWZmZXIocmVtYWluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFzaEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fc3Rhc2hCdWZmZXIsIDAsIHRoaXMuX2J1ZmZlclNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3Rhc2hBcnJheS5zZXQobmV3IFVpbnQ4QXJyYXkoY2h1bmssIGNvbnN1bWVkKSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGFzaFVzZWQgKz0gcmVtYWluO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Rhc2hCeXRlU3RhcnQgPSBieXRlU3RhcnQgKyBjb25zdW1lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9mbHVzaFN0YXNoQnVmZmVyKGRyb3BVbmNvbnN1bWVkKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGFzaFVzZWQgPiAwKSB7XG4gICAgICAgICAgICBsZXQgYnVmZmVyID0gdGhpcy5fc3Rhc2hCdWZmZXIuc2xpY2UoMCwgdGhpcy5fc3Rhc2hVc2VkKTtcbiAgICAgICAgICAgIGxldCBjb25zdW1lZCA9IHRoaXMuX2Rpc3BhdGNoQ2h1bmtzKGJ1ZmZlciwgdGhpcy5fc3Rhc2hCeXRlU3RhcnQpO1xuICAgICAgICAgICAgbGV0IHJlbWFpbiA9IGJ1ZmZlci5ieXRlTGVuZ3RoIC0gY29uc3VtZWQ7XG5cbiAgICAgICAgICAgIGlmIChjb25zdW1lZCA8IGJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRyb3BVbmNvbnN1bWVkKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy53KHRoaXMuVEFHLCBgJHtyZW1haW59IGJ5dGVzIHVuY29uc3VtZWQgZGF0YSByZW1haW4gd2hlbiBmbHVzaCBidWZmZXIsIGRyb3BwZWRgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29uc3VtZWQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3Rhc2hBcnJheSA9IG5ldyBVaW50OEFycmF5KHRoaXMuX3N0YXNoQnVmZmVyLCAwLCB0aGlzLl9idWZmZXJTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZW1haW5BcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgY29uc3VtZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Rhc2hBcnJheS5zZXQocmVtYWluQXJyYXksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Rhc2hVc2VkID0gcmVtYWluQXJyYXkuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXNoQnl0ZVN0YXJ0ICs9IGNvbnN1bWVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N0YXNoVXNlZCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9zdGFzaEJ5dGVTdGFydCA9IDA7XG4gICAgICAgICAgICByZXR1cm4gcmVtYWluO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIF9vbkxvYWRlckNvbXBsZXRlKGZyb20sIHRvKSB7XG4gICAgICAgIC8vIEZvcmNlLWZsdXNoIHN0YXNoIGJ1ZmZlciwgYW5kIGRyb3AgdW5jb25zdW1lZCBkYXRhXG4gICAgICAgIHRoaXMuX2ZsdXNoU3Rhc2hCdWZmZXIodHJ1ZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX29uQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMuX29uQ29tcGxldGUodGhpcy5fZXh0cmFEYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbkxvYWRlckVycm9yKHR5cGUsIGRhdGEpIHtcbiAgICAgICAgTG9nLmUodGhpcy5UQUcsIGBMb2FkZXIgZXJyb3IsIGNvZGUgPSAke2RhdGEuY29kZX0sIG1zZyA9ICR7ZGF0YS5tc2d9YCk7XG5cbiAgICAgICAgdGhpcy5fZmx1c2hTdGFzaEJ1ZmZlcihmYWxzZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzRWFybHlFb2ZSZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgIC8vIEF1dG8tcmVjb25uZWN0IGZvciBFYXJseUVvZiBmYWlsZWQsIHRocm93IFVucmVjb3ZlcmFibGVFYXJseUVvZiBlcnJvciB0byB1cHBlci1sYXllclxuICAgICAgICAgICAgdGhpcy5faXNFYXJseUVvZlJlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdHlwZSA9IExvYWRlckVycm9ycy5VTlJFQ09WRVJBQkxFX0VBUkxZX0VPRjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBMb2FkZXJFcnJvcnMuRUFSTFlfRU9GOiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jb25maWcuaXNMaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERvIGludGVybmFsIGh0dHAgcmVjb25uZWN0IGlmIG5vdCBsaXZlIHN0cmVhbVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdG90YWxMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXh0RnJvbSA9IHRoaXMuX2N1cnJlbnRSYW5nZS50byArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dEZyb20gPCB0aGlzLl90b3RhbExlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy53KHRoaXMuVEFHLCAnQ29ubmVjdGlvbiBsb3N0LCB0cnlpbmcgcmVjb25uZWN0Li4uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNFYXJseUVvZlJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxTZWVrKG5leHRGcm9tLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gZWxzZTogV2UgZG9uJ3Qga25vdyB0b3RhbExlbmd0aCwgdGhyb3cgVW5yZWNvdmVyYWJsZUVhcmx5RW9mXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGxpdmUgc3RyZWFtOiB0aHJvdyBVbnJlY292ZXJhYmxlRWFybHlFb2YgZXJyb3IgdG8gdXBwZXItbGF5ZXJcbiAgICAgICAgICAgICAgICB0eXBlID0gTG9hZGVyRXJyb3JzLlVOUkVDT1ZFUkFCTEVfRUFSTFlfRU9GO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBMb2FkZXJFcnJvcnMuVU5SRUNPVkVSQUJMRV9FQVJMWV9FT0Y6XG4gICAgICAgICAgICBjYXNlIExvYWRlckVycm9ycy5DT05ORUNUSU5HX1RJTUVPVVQ6XG4gICAgICAgICAgICBjYXNlIExvYWRlckVycm9ycy5IVFRQX1NUQVRVU19DT0RFX0lOVkFMSUQ6XG4gICAgICAgICAgICBjYXNlIExvYWRlckVycm9ycy5FWENFUFRJT046XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb25FcnJvcikge1xuICAgICAgICAgICAgdGhpcy5fb25FcnJvcih0eXBlLCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKCdJT0V4Y2VwdGlvbjogJyArIGRhdGEubXNnKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBJT0NvbnRyb2xsZXI7IiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7Tm90SW1wbGVtZW50ZWRFeGNlcHRpb259IGZyb20gJy4uL3V0aWxzL2V4Y2VwdGlvbi5qcyc7XG5cbmV4cG9ydCBjb25zdCBMb2FkZXJTdGF0dXMgPSB7XG4gICAga0lkbGU6IDAsXG4gICAga0Nvbm5lY3Rpbmc6IDEsXG4gICAga0J1ZmZlcmluZzogMixcbiAgICBrRXJyb3I6IDMsXG4gICAga0NvbXBsZXRlOiA0XG59O1xuXG5leHBvcnQgY29uc3QgTG9hZGVyRXJyb3JzID0ge1xuICAgIE9LOiAnT0snLFxuICAgIEVYQ0VQVElPTjogJ0V4Y2VwdGlvbicsXG4gICAgSFRUUF9TVEFUVVNfQ09ERV9JTlZBTElEOiAnSHR0cFN0YXR1c0NvZGVJbnZhbGlkJyxcbiAgICBDT05ORUNUSU5HX1RJTUVPVVQ6ICdDb25uZWN0aW5nVGltZW91dCcsXG4gICAgRUFSTFlfRU9GOiAnRWFybHlFb2YnLFxuICAgIFVOUkVDT1ZFUkFCTEVfRUFSTFlfRU9GOiAnVW5yZWNvdmVyYWJsZUVhcmx5RW9mJ1xufTtcblxuLyogTG9hZGVyIGhhcyBjYWxsYmFja3Mgd2hpY2ggaGF2ZSBmb2xsb3dpbmcgcHJvdG90eXBlczpcbiAqICAgICBmdW5jdGlvbiBvbkNvbnRlbnRMZW5ndGhLbm93bihjb250ZW50TGVuZ3RoOiBudW1iZXIpOiB2b2lkXG4gKiAgICAgZnVuY3Rpb24gb25VUkxSZWRpcmVjdCh1cmw6IHN0cmluZyk6IHZvaWRcbiAqICAgICBmdW5jdGlvbiBvbkRhdGFBcnJpdmFsKGNodW5rOiBBcnJheUJ1ZmZlciwgYnl0ZVN0YXJ0OiBudW1iZXIsIHJlY2VpdmVkTGVuZ3RoOiBudW1iZXIpOiB2b2lkXG4gKiAgICAgZnVuY3Rpb24gb25FcnJvcihlcnJvclR5cGU6IG51bWJlciwgZXJyb3JJbmZvOiB7Y29kZTogbnVtYmVyLCBtc2c6IHN0cmluZ30pOiB2b2lkXG4gKiAgICAgZnVuY3Rpb24gb25Db21wbGV0ZShyYW5nZUZyb206IG51bWJlciwgcmFuZ2VUbzogbnVtYmVyKTogdm9pZFxuICovXG5leHBvcnQgY2xhc3MgQmFzZUxvYWRlciB7XG5cbiAgICBjb25zdHJ1Y3Rvcih0eXBlTmFtZSkge1xuICAgICAgICB0aGlzLl90eXBlID0gdHlwZU5hbWUgfHwgJ3VuZGVmaW5lZCc7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rSWRsZTtcbiAgICAgICAgdGhpcy5fbmVlZFN0YXNoID0gZmFsc2U7XG4gICAgICAgIC8vIGNhbGxiYWNrc1xuICAgICAgICB0aGlzLl9vbkNvbnRlbnRMZW5ndGhLbm93biA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uVVJMUmVkaXJlY3QgPSBudWxsO1xuICAgICAgICB0aGlzLl9vbkRhdGFBcnJpdmFsID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25FcnJvciA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uQ29tcGxldGUgPSBudWxsO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rSWRsZTtcbiAgICAgICAgdGhpcy5fb25Db250ZW50TGVuZ3RoS25vd24gPSBudWxsO1xuICAgICAgICB0aGlzLl9vblVSTFJlZGlyZWN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25EYXRhQXJyaXZhbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uRXJyb3IgPSBudWxsO1xuICAgICAgICB0aGlzLl9vbkNvbXBsZXRlID0gbnVsbDtcbiAgICB9XG5cbiAgICBpc1dvcmtpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0dXMgPT09IExvYWRlclN0YXR1cy5rQ29ubmVjdGluZyB8fCB0aGlzLl9zdGF0dXMgPT09IExvYWRlclN0YXR1cy5rQnVmZmVyaW5nO1xuICAgIH1cblxuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgICB9XG5cbiAgICBnZXQgc3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICAgIH1cblxuICAgIGdldCBuZWVkU3Rhc2hCdWZmZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uZWVkU3Rhc2g7XG4gICAgfVxuXG4gICAgZ2V0IG9uQ29udGVudExlbmd0aEtub3duKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb25Db250ZW50TGVuZ3RoS25vd247XG4gICAgfVxuXG4gICAgc2V0IG9uQ29udGVudExlbmd0aEtub3duKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29uQ29udGVudExlbmd0aEtub3duID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZ2V0IG9uVVJMUmVkaXJlY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vblVSTFJlZGlyZWN0O1xuICAgIH1cblxuICAgIHNldCBvblVSTFJlZGlyZWN0KGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29uVVJMUmVkaXJlY3QgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBnZXQgb25EYXRhQXJyaXZhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uRGF0YUFycml2YWw7XG4gICAgfVxuXG4gICAgc2V0IG9uRGF0YUFycml2YWwoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb25EYXRhQXJyaXZhbCA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGdldCBvbkVycm9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb25FcnJvcjtcbiAgICB9XG5cbiAgICBzZXQgb25FcnJvcihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9vbkVycm9yID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZ2V0IG9uQ29tcGxldGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vbkNvbXBsZXRlO1xuICAgIH1cblxuICAgIHNldCBvbkNvbXBsZXRlKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29uQ29tcGxldGUgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICAvLyBwdXJlIHZpcnR1YWxcbiAgICBvcGVuKGRhdGFTb3VyY2UsIHJhbmdlKSB7XG4gICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbignVW5pbXBsZW1lbnRlZCBhYnN0cmFjdCBmdW5jdGlvbiEnKTtcbiAgICB9XG5cbiAgICBhYm9ydCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXhjZXB0aW9uKCdVbmltcGxlbWVudGVkIGFic3RyYWN0IGZ1bmN0aW9uIScpO1xuICAgIH1cblxuXG59IiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmNsYXNzIFBhcmFtU2Vla0hhbmRsZXIge1xuXG4gICAgY29uc3RydWN0b3IocGFyYW1TdGFydCwgcGFyYW1FbmQpIHtcbiAgICAgICAgdGhpcy5fc3RhcnROYW1lID0gcGFyYW1TdGFydDtcbiAgICAgICAgdGhpcy5fZW5kTmFtZSA9IHBhcmFtRW5kO1xuICAgIH1cblxuICAgIGdldENvbmZpZyhiYXNlVXJsLCByYW5nZSkge1xuICAgICAgICBsZXQgdXJsID0gYmFzZVVybDtcblxuICAgICAgICBpZiAocmFuZ2UuZnJvbSAhPT0gMCB8fCByYW5nZS50byAhPT0gLTEpIHtcbiAgICAgICAgICAgIGxldCBuZWVkQW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZignPycpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHVybCArPSAnPyc7XG4gICAgICAgICAgICAgICAgbmVlZEFuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmVlZEFuZCkge1xuICAgICAgICAgICAgICAgIHVybCArPSAnJic7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVybCArPSBgJHt0aGlzLl9zdGFydE5hbWV9PSR7cmFuZ2UuZnJvbS50b1N0cmluZygpfWA7XG5cbiAgICAgICAgICAgIGlmIChyYW5nZS50byAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB1cmwgKz0gYCYke3RoaXMuX2VuZE5hbWV9PSR7cmFuZ2UudG8udG9TdHJpbmcoKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgaGVhZGVyczoge31cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW1vdmVVUkxQYXJhbWV0ZXJzKHNlZWtlZFVSTCkge1xuICAgICAgICBsZXQgYmFzZVVSTCA9IHNlZWtlZFVSTC5zcGxpdCgnPycpWzBdO1xuICAgICAgICBsZXQgcGFyYW1zID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGxldCBxdWVyeUluZGV4ID0gc2Vla2VkVVJMLmluZGV4T2YoJz8nKTtcbiAgICAgICAgaWYgKHF1ZXJ5SW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBwYXJhbXMgPSBzZWVrZWRVUkwuc3Vic3RyaW5nKHF1ZXJ5SW5kZXggKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXN1bHRQYXJhbXMgPSAnJztcblxuICAgICAgICBpZiAocGFyYW1zICE9IHVuZGVmaW5lZCAmJiBwYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHBhaXJzID0gcGFyYW1zLnNwbGl0KCcmJyk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgICAgICAgbGV0IHJlcXVpcmVBbmQgPSAoaSA+IDApO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBhaXJbMF0gIT09IHRoaXMuX3N0YXJ0TmFtZSAmJiBwYWlyWzBdICE9PSB0aGlzLl9lbmROYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlQW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRQYXJhbXMgKz0gJyYnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFBhcmFtcyArPSBwYWlyc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKHJlc3VsdFBhcmFtcy5sZW5ndGggPT09IDApID8gYmFzZVVSTCA6IGJhc2VVUkwgKyAnPycgKyByZXN1bHRQYXJhbXM7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhcmFtU2Vla0hhbmRsZXI7IiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmNsYXNzIFJhbmdlU2Vla0hhbmRsZXIge1xuXG4gICAgY29uc3RydWN0b3IoemVyb1N0YXJ0KSB7XG4gICAgICAgIHRoaXMuX3plcm9TdGFydCA9IHplcm9TdGFydCB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRDb25maWcodXJsLCByYW5nZSkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHt9O1xuXG4gICAgICAgIGlmIChyYW5nZS5mcm9tICE9PSAwIHx8IHJhbmdlLnRvICE9PSAtMSkge1xuICAgICAgICAgICAgbGV0IHBhcmFtO1xuICAgICAgICAgICAgaWYgKHJhbmdlLnRvICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHBhcmFtID0gYGJ5dGVzPSR7cmFuZ2UuZnJvbS50b1N0cmluZygpfS0ke3JhbmdlLnRvLnRvU3RyaW5nKCl9YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyYW0gPSBgYnl0ZXM9JHtyYW5nZS5mcm9tLnRvU3RyaW5nKCl9LWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWFkZXJzWydSYW5nZSddID0gcGFyYW07XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5femVyb1N0YXJ0KSB7XG4gICAgICAgICAgICBoZWFkZXJzWydSYW5nZSddID0gJ2J5dGVzPTAtJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW1vdmVVUkxQYXJhbWV0ZXJzKHNlZWtlZFVSTCkge1xuICAgICAgICByZXR1cm4gc2Vla2VkVVJMO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSYW5nZVNlZWtIYW5kbGVyOyIsIi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgQmlsaWJpbGkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvciB6aGVuZyBxaWFuIDx4cXFAeHFxLmltPlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBVdGlsaXR5IGNsYXNzIHRvIGNhbGN1bGF0ZSByZWFsdGltZSBuZXR3b3JrIEkvTyBzcGVlZFxuY2xhc3MgU3BlZWRTYW1wbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBtaWxsaXNlY29uZHNcbiAgICAgICAgdGhpcy5fZmlyc3RDaGVja3BvaW50ID0gMDtcbiAgICAgICAgdGhpcy5fbGFzdENoZWNrcG9pbnQgPSAwO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbEJ5dGVzID0gMDtcbiAgICAgICAgdGhpcy5fdG90YWxCeXRlcyA9IDA7XG4gICAgICAgIHRoaXMuX2xhc3RTZWNvbmRCeXRlcyA9IDA7XG5cbiAgICAgICAgLy8gY29tcGF0aWJpbGl0eSBkZXRlY3Rpb25cbiAgICAgICAgaWYgKHNlbGYucGVyZm9ybWFuY2UgJiYgc2VsZi5wZXJmb3JtYW5jZS5ub3cpIHtcbiAgICAgICAgICAgIHRoaXMuX25vdyA9IHNlbGYucGVyZm9ybWFuY2Uubm93LmJpbmQoc2VsZi5wZXJmb3JtYW5jZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9ub3cgPSBEYXRlLm5vdztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl9maXJzdENoZWNrcG9pbnQgPSB0aGlzLl9sYXN0Q2hlY2twb2ludCA9IDA7XG4gICAgICAgIHRoaXMuX3RvdGFsQnl0ZXMgPSB0aGlzLl9pbnRlcnZhbEJ5dGVzID0gMDtcbiAgICAgICAgdGhpcy5fbGFzdFNlY29uZEJ5dGVzID0gMDtcbiAgICB9XG5cbiAgICBhZGRCeXRlcyhieXRlcykge1xuICAgICAgICBpZiAodGhpcy5fZmlyc3RDaGVja3BvaW50ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9maXJzdENoZWNrcG9pbnQgPSB0aGlzLl9ub3coKTtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RDaGVja3BvaW50ID0gdGhpcy5fZmlyc3RDaGVja3BvaW50O1xuICAgICAgICAgICAgdGhpcy5faW50ZXJ2YWxCeXRlcyArPSBieXRlcztcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsQnl0ZXMgKz0gYnl0ZXM7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fbm93KCkgLSB0aGlzLl9sYXN0Q2hlY2twb2ludCA8IDEwMDApIHtcbiAgICAgICAgICAgIHRoaXMuX2ludGVydmFsQnl0ZXMgKz0gYnl0ZXM7XG4gICAgICAgICAgICB0aGlzLl90b3RhbEJ5dGVzICs9IGJ5dGVzO1xuICAgICAgICB9IGVsc2UgeyAgLy8gZHVyYXRpb24gPj0gMTAwMFxuICAgICAgICAgICAgdGhpcy5fbGFzdFNlY29uZEJ5dGVzID0gdGhpcy5faW50ZXJ2YWxCeXRlcztcbiAgICAgICAgICAgIHRoaXMuX2ludGVydmFsQnl0ZXMgPSBieXRlcztcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsQnl0ZXMgKz0gYnl0ZXM7XG4gICAgICAgICAgICB0aGlzLl9sYXN0Q2hlY2twb2ludCA9IHRoaXMuX25vdygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGN1cnJlbnRLQnBzKCkge1xuICAgICAgICB0aGlzLmFkZEJ5dGVzKDApO1xuXG4gICAgICAgIGxldCBkdXJhdGlvblNlY29uZHMgPSAodGhpcy5fbm93KCkgLSB0aGlzLl9sYXN0Q2hlY2twb2ludCkgLyAxMDAwO1xuICAgICAgICBpZiAoZHVyYXRpb25TZWNvbmRzID09IDApIGR1cmF0aW9uU2Vjb25kcyA9IDE7XG4gICAgICAgIHJldHVybiAodGhpcy5faW50ZXJ2YWxCeXRlcyAvIGR1cmF0aW9uU2Vjb25kcykgLyAxMDI0O1xuICAgIH1cblxuICAgIGdldCBsYXN0U2Vjb25kS0JwcygpIHtcbiAgICAgICAgdGhpcy5hZGRCeXRlcygwKTtcblxuICAgICAgICBpZiAodGhpcy5fbGFzdFNlY29uZEJ5dGVzICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFzdFNlY29uZEJ5dGVzIC8gMTAyNDtcbiAgICAgICAgfSBlbHNlIHsgIC8vIGxhc3RTZWNvbmRCeXRlcyA9PT0gMFxuICAgICAgICAgICAgaWYgKHRoaXMuX25vdygpIC0gdGhpcy5fbGFzdENoZWNrcG9pbnQgPj0gNTAwKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGltZSBpbnRlcnZhbCBzaW5jZSBsYXN0IGNoZWNrcG9pbnQgaGFzIGV4Y2VlZGVkIDUwMG1zXG4gICAgICAgICAgICAgICAgLy8gdGhlIHNwZWVkIGlzIG5lYXJseSBhY2N1cmF0ZVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRLQnBzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBrbm93XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgYXZlcmFnZUtCcHMoKSB7XG4gICAgICAgIGxldCBkdXJhdGlvblNlY29uZHMgPSAodGhpcy5fbm93KCkgLSB0aGlzLl9maXJzdENoZWNrcG9pbnQpIC8gMTAwMDtcbiAgICAgICAgcmV0dXJuICh0aGlzLl90b3RhbEJ5dGVzIC8gZHVyYXRpb25TZWNvbmRzKSAvIDEwMjQ7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwZWVkU2FtcGxlcjsiLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IExvZyBmcm9tICcuLi91dGlscy9sb2dnZXIuanMnO1xuaW1wb3J0IHtCYXNlTG9hZGVyLCBMb2FkZXJTdGF0dXMsIExvYWRlckVycm9yc30gZnJvbSAnLi9sb2FkZXIuanMnO1xuaW1wb3J0IHtSdW50aW1lRXhjZXB0aW9ufSBmcm9tICcuLi91dGlscy9leGNlcHRpb24uanMnO1xuXG4vLyBGb3IgRkxWIG92ZXIgV2ViU29ja2V0IGxpdmUgc3RyZWFtXG5jbGFzcyBXZWJTb2NrZXRMb2FkZXIgZXh0ZW5kcyBCYXNlTG9hZGVyIHtcblxuICAgIHN0YXRpYyBpc1N1cHBvcnRlZCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIHNlbGYuV2ViU29ja2V0ICE9PSAndW5kZWZpbmVkJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignd2Vic29ja2V0LWxvYWRlcicpO1xuICAgICAgICB0aGlzLlRBRyA9ICdXZWJTb2NrZXRMb2FkZXInO1xuXG4gICAgICAgIHRoaXMuX25lZWRTdGFzaCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fd3MgPSBudWxsO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0QWJvcnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVjZWl2ZWRMZW5ndGggPSAwO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl93cykge1xuICAgICAgICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBvcGVuKGRhdGFTb3VyY2UpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCB3cyA9IHRoaXMuX3dzID0gbmV3IHNlbGYuV2ViU29ja2V0KGRhdGFTb3VyY2UudXJsKTtcbiAgICAgICAgICAgIHdzLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgICAgd3Mub25vcGVuID0gdGhpcy5fb25XZWJTb2NrZXRPcGVuLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB3cy5vbmNsb3NlID0gdGhpcy5fb25XZWJTb2NrZXRDbG9zZS5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgd3Mub25tZXNzYWdlID0gdGhpcy5fb25XZWJTb2NrZXRNZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB3cy5vbmVycm9yID0gdGhpcy5fb25XZWJTb2NrZXRFcnJvci5iaW5kKHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0Nvbm5lY3Rpbmc7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rRXJyb3I7XG5cbiAgICAgICAgICAgIGxldCBpbmZvID0ge2NvZGU6IGUuY29kZSwgbXNnOiBlLm1lc3NhZ2V9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fb25FcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoTG9hZGVyRXJyb3JzLkVYQ0VQVElPTiwgaW5mbyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKGluZm8ubXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFib3J0KCkge1xuICAgICAgICBsZXQgd3MgPSB0aGlzLl93cztcbiAgICAgICAgaWYgKHdzICYmICh3cy5yZWFkeVN0YXRlID09PSAwIHx8IHdzLnJlYWR5U3RhdGUgPT09IDEpKSB7ICAvLyBDT05ORUNUSU5HIHx8IE9QRU5cbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RBYm9ydCA9IHRydWU7XG4gICAgICAgICAgICB3cy5jbG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fd3MgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0NvbXBsZXRlO1xuICAgIH1cblxuICAgIF9vbldlYlNvY2tldE9wZW4oZSkge1xuICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0J1ZmZlcmluZztcbiAgICB9XG5cbiAgICBfb25XZWJTb2NrZXRDbG9zZShlKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0QWJvcnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RBYm9ydCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3RhdHVzID0gTG9hZGVyU3RhdHVzLmtDb21wbGV0ZTtcblxuICAgICAgICBpZiAodGhpcy5fb25Db21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5fb25Db21wbGV0ZSgwLCB0aGlzLl9yZWNlaXZlZExlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uV2ViU29ja2V0TWVzc2FnZShlKSB7XG4gICAgICAgIGlmIChlLmRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2hBcnJheUJ1ZmZlcihlLmRhdGEpO1xuICAgICAgICB9IGVsc2UgaWYgKGUuZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwYXRjaEFycmF5QnVmZmVyKHJlYWRlci5yZXN1bHQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihlLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdHVzID0gTG9hZGVyU3RhdHVzLmtFcnJvcjtcbiAgICAgICAgICAgIGxldCBpbmZvID0ge2NvZGU6IC0xLCBtc2c6ICdVbnN1cHBvcnRlZCBXZWJTb2NrZXQgbWVzc2FnZSB0eXBlOiAnICsgZS5kYXRhLmNvbnN0cnVjdG9yLm5hbWV9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fb25FcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoTG9hZGVyRXJyb3JzLkVYQ0VQVElPTiwgaW5mbyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKGluZm8ubXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9kaXNwYXRjaEFycmF5QnVmZmVyKGFycmF5YnVmZmVyKSB7XG4gICAgICAgIGxldCBjaHVuayA9IGFycmF5YnVmZmVyO1xuICAgICAgICBsZXQgYnl0ZVN0YXJ0ID0gdGhpcy5fcmVjZWl2ZWRMZW5ndGg7XG4gICAgICAgIHRoaXMuX3JlY2VpdmVkTGVuZ3RoICs9IGNodW5rLmJ5dGVMZW5ndGg7XG5cbiAgICAgICAgaWYgKHRoaXMuX29uRGF0YUFycml2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRGF0YUFycml2YWwoY2h1bmssIGJ5dGVTdGFydCwgdGhpcy5fcmVjZWl2ZWRMZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uV2ViU29ja2V0RXJyb3IoZSkge1xuICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0Vycm9yO1xuXG4gICAgICAgIGxldCBpbmZvID0ge1xuICAgICAgICAgICAgY29kZTogZS5jb2RlLFxuICAgICAgICAgICAgbXNnOiBlLm1lc3NhZ2VcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5fb25FcnJvcikge1xuICAgICAgICAgICAgdGhpcy5fb25FcnJvcihMb2FkZXJFcnJvcnMuRVhDRVBUSU9OLCBpbmZvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKGluZm8ubXNnKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBXZWJTb2NrZXRMb2FkZXI7IiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBMb2cgZnJvbSAnLi4vdXRpbHMvbG9nZ2VyLmpzJztcbmltcG9ydCB7QmFzZUxvYWRlciwgTG9hZGVyU3RhdHVzLCBMb2FkZXJFcnJvcnN9IGZyb20gJy4vbG9hZGVyLmpzJztcbmltcG9ydCB7UnVudGltZUV4Y2VwdGlvbn0gZnJvbSAnLi4vdXRpbHMvZXhjZXB0aW9uLmpzJztcblxuLy8gRm9yIEZpcmVGb3ggYnJvd3NlciB3aGljaCBzdXBwb3J0cyBgeGhyLnJlc3BvbnNlVHlwZSA9ICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcidgXG5jbGFzcyBNb3pDaHVua2VkTG9hZGVyIGV4dGVuZHMgQmFzZUxvYWRlciB7XG5cbiAgICBzdGF0aWMgaXNTdXBwb3J0ZWQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAvLyBGaXJlZm94IDM3LSByZXF1aXJlcyAub3BlbigpIHRvIGJlIGNhbGxlZCBiZWZvcmUgc2V0dGluZyByZXNwb25zZVR5cGVcbiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCAnaHR0cHM6Ly9leGFtcGxlLmNvbScsIHRydWUpO1xuICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcic7XG4gICAgICAgICAgICByZXR1cm4gKHhoci5yZXNwb25zZVR5cGUgPT09ICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcicpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBMb2cudygnTW96Q2h1bmtlZExvYWRlcicsIGUubWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihzZWVrSGFuZGxlciwgY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKCd4aHItbW96LWNodW5rZWQtbG9hZGVyJyk7XG4gICAgICAgIHRoaXMuVEFHID0gJ01vekNodW5rZWRMb2FkZXInO1xuXG4gICAgICAgIHRoaXMuX3NlZWtIYW5kbGVyID0gc2Vla0hhbmRsZXI7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5fbmVlZFN0YXNoID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl94aHIgPSBudWxsO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0QWJvcnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fY29udGVudExlbmd0aCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlY2VpdmVkTGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5pc1dvcmtpbmcoKSkge1xuICAgICAgICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl94aHIpIHtcbiAgICAgICAgICAgIHRoaXMuX3hoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5feGhyLm9ucHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5feGhyLm9ubG9hZGVuZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl94aHIub25lcnJvciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl94aHIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBvcGVuKGRhdGFTb3VyY2UsIHJhbmdlKSB7XG4gICAgICAgIHRoaXMuX2RhdGFTb3VyY2UgPSBkYXRhU291cmNlO1xuICAgICAgICB0aGlzLl9yYW5nZSA9IHJhbmdlO1xuXG4gICAgICAgIGxldCBzb3VyY2VVUkwgPSBkYXRhU291cmNlLnVybDtcbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5yZXVzZVJlZGlyZWN0ZWRVUkwgJiYgZGF0YVNvdXJjZS5yZWRpcmVjdGVkVVJMICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc291cmNlVVJMID0gZGF0YVNvdXJjZS5yZWRpcmVjdGVkVVJMO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNlZWtDb25maWcgPSB0aGlzLl9zZWVrSGFuZGxlci5nZXRDb25maWcoc291cmNlVVJMLCByYW5nZSk7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RVUkwgPSBzZWVrQ29uZmlnLnVybDtcblxuICAgICAgICBsZXQgeGhyID0gdGhpcy5feGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhoci5vcGVuKCdHRVQnLCBzZWVrQ29uZmlnLnVybCwgdHJ1ZSk7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInO1xuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gdGhpcy5fb25SZWFkeVN0YXRlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHhoci5vbnByb2dyZXNzID0gdGhpcy5fb25Qcm9ncmVzcy5iaW5kKHRoaXMpO1xuICAgICAgICB4aHIub25sb2FkZW5kID0gdGhpcy5fb25Mb2FkRW5kLmJpbmQodGhpcyk7XG4gICAgICAgIHhoci5vbmVycm9yID0gdGhpcy5fb25YaHJFcnJvci5iaW5kKHRoaXMpO1xuXG4gICAgICAgIC8vIGNvcnMgaXMgYXV0byBkZXRlY3RlZCBhbmQgZW5hYmxlZCBieSB4aHJcblxuICAgICAgICAvLyB3aXRoQ3JlZGVudGlhbHMgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdFxuICAgICAgICBpZiAoZGF0YVNvdXJjZS53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzZWVrQ29uZmlnLmhlYWRlcnMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHNlZWtDb25maWcuaGVhZGVycztcblxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgaGVhZGVyc1trZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0Nvbm5lY3Rpbmc7XG4gICAgICAgIHhoci5zZW5kKCk7XG4gICAgfVxuXG4gICAgYWJvcnQoKSB7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RBYm9ydCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLl94aHIpIHtcbiAgICAgICAgICAgIHRoaXMuX3hoci5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rQ29tcGxldGU7XG4gICAgfVxuXG4gICAgX29uUmVhZHlTdGF0ZUNoYW5nZShlKSB7XG4gICAgICAgIGxldCB4aHIgPSBlLnRhcmdldDtcblxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDIpIHsgIC8vIEhFQURFUlNfUkVDRUlWRURcbiAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VVUkwgIT0gdW5kZWZpbmVkICYmIHhoci5yZXNwb25zZVVSTCAhPT0gdGhpcy5fcmVxdWVzdFVSTCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vblVSTFJlZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZWRpcmVjdGVkVVJMID0gdGhpcy5fc2Vla0hhbmRsZXIucmVtb3ZlVVJMUGFyYW1ldGVycyh4aHIucmVzcG9uc2VVUkwpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblVSTFJlZGlyZWN0KHJlZGlyZWN0ZWRVUkwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgIT09IDAgJiYgKHhoci5zdGF0dXMgPCAyMDAgfHwgeGhyLnN0YXR1cyA+IDI5OSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0Vycm9yO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoTG9hZGVyRXJyb3JzLkhUVFBfU1RBVFVTX0NPREVfSU5WQUxJRCwge2NvZGU6IHhoci5zdGF0dXMsIG1zZzogeGhyLnN0YXR1c1RleHR9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbignTW96Q2h1bmtlZExvYWRlcjogSHR0cCBjb2RlIGludmFsaWQsICcgKyB4aHIuc3RhdHVzICsgJyAnICsgeGhyLnN0YXR1c1RleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdHVzID0gTG9hZGVyU3RhdHVzLmtCdWZmZXJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25Qcm9ncmVzcyhlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0dXMgPT09IExvYWRlclN0YXR1cy5rRXJyb3IpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBlcnJvciByZXNwb25zZVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRlbnRMZW5ndGggPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChlLnRvdGFsICE9PSBudWxsICYmIGUudG90YWwgIT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gZS50b3RhbDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb25Db250ZW50TGVuZ3RoS25vd24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25Db250ZW50TGVuZ3RoS25vd24odGhpcy5fY29udGVudExlbmd0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNodW5rID0gZS50YXJnZXQucmVzcG9uc2U7XG4gICAgICAgIGxldCBieXRlU3RhcnQgPSB0aGlzLl9yYW5nZS5mcm9tICsgdGhpcy5fcmVjZWl2ZWRMZW5ndGg7XG4gICAgICAgIHRoaXMuX3JlY2VpdmVkTGVuZ3RoICs9IGNodW5rLmJ5dGVMZW5ndGg7XG5cbiAgICAgICAgaWYgKHRoaXMuX29uRGF0YUFycml2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRGF0YUFycml2YWwoY2h1bmssIGJ5dGVTdGFydCwgdGhpcy5fcmVjZWl2ZWRMZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uTG9hZEVuZChlKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0QWJvcnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RBYm9ydCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXR1cyA9PT0gTG9hZGVyU3RhdHVzLmtFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3RhdHVzID0gTG9hZGVyU3RhdHVzLmtDb21wbGV0ZTtcbiAgICAgICAgaWYgKHRoaXMuX29uQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMuX29uQ29tcGxldGUodGhpcy5fcmFuZ2UuZnJvbSwgdGhpcy5fcmFuZ2UuZnJvbSArIHRoaXMuX3JlY2VpdmVkTGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25YaHJFcnJvcihlKSB7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rRXJyb3I7XG4gICAgICAgIGxldCB0eXBlID0gMDtcbiAgICAgICAgbGV0IGluZm8gPSBudWxsO1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250ZW50TGVuZ3RoICYmIGUubG9hZGVkIDwgdGhpcy5fY29udGVudExlbmd0aCkge1xuICAgICAgICAgICAgdHlwZSA9IExvYWRlckVycm9ycy5FQVJMWV9FT0Y7XG4gICAgICAgICAgICBpbmZvID0ge2NvZGU6IC0xLCBtc2c6ICdNb3otQ2h1bmtlZCBzdHJlYW0gbWVldCBFYXJseS1Fb2YnfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHR5cGUgPSBMb2FkZXJFcnJvcnMuRVhDRVBUSU9OO1xuICAgICAgICAgICAgaW5mbyA9IHtjb2RlOiAtMSwgbXNnOiBlLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgKyBlLnR5cGV9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX29uRXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRXJyb3IodHlwZSwgaW5mbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbihpbmZvLm1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW96Q2h1bmtlZExvYWRlcjsiLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IExvZyBmcm9tICcuLi91dGlscy9sb2dnZXIuanMnO1xuaW1wb3J0IHtCYXNlTG9hZGVyLCBMb2FkZXJTdGF0dXMsIExvYWRlckVycm9yc30gZnJvbSAnLi9sb2FkZXIuanMnO1xuaW1wb3J0IHtSdW50aW1lRXhjZXB0aW9ufSBmcm9tICcuLi91dGlscy9leGNlcHRpb24uanMnO1xuXG4vKiBOb3RpY2U6IG1zLXN0cmVhbSBtYXkgY2F1c2UgSUUvRWRnZSBicm93c2VyIGNyYXNoIGlmIHNlZWsgdG9vIGZyZXF1ZW50bHkhISFcbiAqIFRoZSBicm93c2VyIG1heSBjcmFzaCBpbiB3aW5pbmV0LmRsbC4gRGlzYWJsZSBmb3Igbm93LlxuICpcbiAqIEZvciBJRTExL0VkZ2UgYnJvd3NlciBieSBtaWNyb3NvZnQgd2hpY2ggc3VwcG9ydHMgYHhoci5yZXNwb25zZVR5cGUgPSAnbXMtc3RyZWFtJ2BcbiAqIE5vdGljZSB0aGF0IG1zLXN0cmVhbSBBUEkgc3Vja3MuIFRoZSBidWZmZXIgaXMgYWx3YXlzIGV4cGFuZGluZyBhbG9uZyB3aXRoIGRvd25sb2FkaW5nLlxuICpcbiAqIFdlIG5lZWQgdG8gYWJvcnQgdGhlIHhociBpZiBidWZmZXIgc2l6ZSBleGNlZWRlZCBsaW1pdCBzaXplIChlLmcuIDE2IE1pQiksIHRoZW4gZG8gcmVjb25uZWN0LlxuICogaW4gb3JkZXIgdG8gcmVsZWFzZSBwcmV2aW91cyBBcnJheUJ1ZmZlciB0byBhdm9pZCBtZW1vcnkgbGVha1xuICpcbiAqIE90aGVyd2lzZSwgdGhlIEFycmF5QnVmZmVyIHdpbGwgaW5jcmVhc2UgdG8gYSB0ZXJyaWJsZSBzaXplIHRoYXQgZXF1YWxzIGZpbmFsIGZpbGUgc2l6ZS5cbiAqL1xuY2xhc3MgTVNTdHJlYW1Mb2FkZXIgZXh0ZW5kcyBCYXNlTG9hZGVyIHtcblxuICAgIHN0YXRpYyBpc1N1cHBvcnRlZCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5NU1N0cmVhbSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHNlbGYuTVNTdHJlYW1SZWFkZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB4aHIub3BlbignR0VUJywgJ2h0dHBzOi8vZXhhbXBsZS5jb20nLCB0cnVlKTtcbiAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnbXMtc3RyZWFtJztcbiAgICAgICAgICAgIHJldHVybiAoeGhyLnJlc3BvbnNlVHlwZSA9PT0gJ21zLXN0cmVhbScpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBMb2cudygnTVNTdHJlYW1Mb2FkZXInLCBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3Ioc2Vla0hhbmRsZXIsIGNvbmZpZykge1xuICAgICAgICBzdXBlcigneGhyLW1zc3RyZWFtLWxvYWRlcicpO1xuICAgICAgICB0aGlzLlRBRyA9ICdNU1N0cmVhbUxvYWRlcic7XG5cbiAgICAgICAgdGhpcy5fc2Vla0hhbmRsZXIgPSBzZWVrSGFuZGxlcjtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLl9uZWVkU3Rhc2ggPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX3hociA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlYWRlciA9IG51bGw7ICAvLyBNU1N0cmVhbVJlYWRlclxuXG4gICAgICAgIHRoaXMuX3RvdGFsUmFuZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9jdXJyZW50UmFuZ2UgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0VVJMID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY3VycmVudFJlZGlyZWN0ZWRVUkwgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBudWxsO1xuICAgICAgICB0aGlzLl9yZWNlaXZlZExlbmd0aCA9IDA7XG5cbiAgICAgICAgdGhpcy5fYnVmZmVyTGltaXQgPSAxNiAqIDEwMjQgKiAxMDI0OyAgLy8gMTZNQlxuICAgICAgICB0aGlzLl9sYXN0VGltZUJ1ZmZlclNpemUgPSAwO1xuICAgICAgICB0aGlzLl9pc1JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLmlzV29ya2luZygpKSB7XG4gICAgICAgICAgICB0aGlzLmFib3J0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3JlYWRlcikge1xuICAgICAgICAgICAgdGhpcy5fcmVhZGVyLm9ucHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fcmVhZGVyLm9ubG9hZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9yZWFkZXIub25lcnJvciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl94aHIpIHtcbiAgICAgICAgICAgIHRoaXMuX3hoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5feGhyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgb3BlbihkYXRhU291cmNlLCByYW5nZSkge1xuICAgICAgICB0aGlzLl9pbnRlcm5hbE9wZW4oZGF0YVNvdXJjZSwgcmFuZ2UsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBfaW50ZXJuYWxPcGVuKGRhdGFTb3VyY2UsIHJhbmdlLCBpc1N1YnJhbmdlKSB7XG4gICAgICAgIHRoaXMuX2RhdGFTb3VyY2UgPSBkYXRhU291cmNlO1xuXG4gICAgICAgIGlmICghaXNTdWJyYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5fdG90YWxSYW5nZSA9IHJhbmdlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJhbmdlID0gcmFuZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc291cmNlVVJMID0gZGF0YVNvdXJjZS51cmw7XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcucmV1c2VSZWRpcmVjdGVkVVJMKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudFJlZGlyZWN0ZWRVUkwgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc291cmNlVVJMID0gdGhpcy5fY3VycmVudFJlZGlyZWN0ZWRVUkw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFTb3VyY2UucmVkaXJlY3RlZFVSTCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VVUkwgPSBkYXRhU291cmNlLnJlZGlyZWN0ZWRVUkw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2Vla0NvbmZpZyA9IHRoaXMuX3NlZWtIYW5kbGVyLmdldENvbmZpZyhzb3VyY2VVUkwsIHJhbmdlKTtcbiAgICAgICAgdGhpcy5fY3VycmVudFJlcXVlc3RVUkwgPSBzZWVrQ29uZmlnLnVybDtcblxuICAgICAgICBsZXQgcmVhZGVyID0gdGhpcy5fcmVhZGVyID0gbmV3IHNlbGYuTVNTdHJlYW1SZWFkZXIoKTtcbiAgICAgICAgcmVhZGVyLm9ucHJvZ3Jlc3MgPSB0aGlzLl9tc3JPblByb2dyZXNzLmJpbmQodGhpcyk7XG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSB0aGlzLl9tc3JPbkxvYWQuYmluZCh0aGlzKTtcbiAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSB0aGlzLl9tc3JPbkVycm9yLmJpbmQodGhpcyk7XG5cbiAgICAgICAgbGV0IHhociA9IHRoaXMuX3hociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbignR0VUJywgc2Vla0NvbmZpZy51cmwsIHRydWUpO1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ21zLXN0cmVhbSc7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB0aGlzLl94aHJPblJlYWR5U3RhdGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgeGhyLm9uZXJyb3IgPSB0aGlzLl94aHJPbkVycm9yLmJpbmQodGhpcyk7XG5cbiAgICAgICAgaWYgKGRhdGFTb3VyY2Uud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygc2Vla0NvbmZpZy5oZWFkZXJzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSBzZWVrQ29uZmlnLmhlYWRlcnM7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlcnNba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzUmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdHVzID0gTG9hZGVyU3RhdHVzLmtDb25uZWN0aW5nO1xuICAgICAgICB9XG4gICAgICAgIHhoci5zZW5kKCk7XG4gICAgfVxuXG4gICAgYWJvcnQoKSB7XG4gICAgICAgIHRoaXMuX2ludGVybmFsQWJvcnQoKTtcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gTG9hZGVyU3RhdHVzLmtDb21wbGV0ZTtcbiAgICB9XG5cbiAgICBfaW50ZXJuYWxBYm9ydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlYWRlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JlYWRlci5yZWFkeVN0YXRlID09PSAxKSB7ICAvLyBMT0FESU5HXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZGVyLmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9yZWFkZXIub25wcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9yZWFkZXIub25sb2FkID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3JlYWRlci5vbmVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3JlYWRlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3hocikge1xuICAgICAgICAgICAgdGhpcy5feGhyLmFib3J0KCk7XG4gICAgICAgICAgICB0aGlzLl94aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3hociA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfeGhyT25SZWFkeVN0YXRlQ2hhbmdlKGUpIHtcbiAgICAgICAgbGV0IHhociA9IGUudGFyZ2V0O1xuXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gMikgeyAgLy8gSEVBREVSU19SRUNFSVZFRFxuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPD0gMjk5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdHVzID0gTG9hZGVyU3RhdHVzLmtCdWZmZXJpbmc7XG5cbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlVVJMICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVkaXJlY3RlZFVSTCA9IHRoaXMuX3NlZWtIYW5kbGVyLnJlbW92ZVVSTFBhcmFtZXRlcnMoeGhyLnJlc3BvbnNlVVJMKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZXNwb25zZVVSTCAhPT0gdGhpcy5fY3VycmVudFJlcXVlc3RVUkwgJiYgcmVkaXJlY3RlZFVSTCAhPT0gdGhpcy5fY3VycmVudFJlZGlyZWN0ZWRVUkwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSZWRpcmVjdGVkVVJMID0gcmVkaXJlY3RlZFVSTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vblVSTFJlZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25VUkxSZWRpcmVjdChyZWRpcmVjdGVkVVJMKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBsZW5ndGhIZWFkZXIgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJyk7XG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aEhlYWRlciAhPSBudWxsICYmIHRoaXMuX2NvbnRlbnRMZW5ndGggPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGVuZ3RoID0gcGFyc2VJbnQobGVuZ3RoSGVhZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBsZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fb25Db250ZW50TGVuZ3RoS25vd24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkNvbnRlbnRMZW5ndGhLbm93bih0aGlzLl9jb250ZW50TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdHVzID0gTG9hZGVyU3RhdHVzLmtFcnJvcjtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkVycm9yKExvYWRlckVycm9ycy5IVFRQX1NUQVRVU19DT0RFX0lOVkFMSUQsIHtjb2RlOiB4aHIuc3RhdHVzLCBtc2c6IHhoci5zdGF0dXNUZXh0fSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oJ01TU3RyZWFtTG9hZGVyOiBIdHRwIGNvZGUgaW52YWxpZCwgJyArIHhoci5zdGF0dXMgKyAnICcgKyB4aHIuc3RhdHVzVGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHhoci5yZWFkeVN0YXRlID09PSAzKSB7ICAvLyBMT0FESU5HXG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8PSAyOTkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0J1ZmZlcmluZztcblxuICAgICAgICAgICAgICAgIGxldCBtc3N0cmVhbSA9IHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIobXNzdHJlYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3hock9uRXJyb3IoZSkge1xuICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0Vycm9yO1xuICAgICAgICBsZXQgdHlwZSA9IExvYWRlckVycm9ycy5FWENFUFRJT047XG4gICAgICAgIGxldCBpbmZvID0ge2NvZGU6IC0xLCBtc2c6IGUuY29uc3RydWN0b3IubmFtZSArICcgJyArIGUudHlwZX07XG5cbiAgICAgICAgaWYgKHRoaXMuX29uRXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRXJyb3IodHlwZSwgaW5mbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbihpbmZvLm1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfbXNyT25Qcm9ncmVzcyhlKSB7XG4gICAgICAgIGxldCByZWFkZXIgPSBlLnRhcmdldDtcbiAgICAgICAgbGV0IGJpZ2J1ZmZlciA9IHJlYWRlci5yZXN1bHQ7XG4gICAgICAgIGlmIChiaWdidWZmZXIgPT0gbnVsbCkgeyAgLy8gcmVzdWx0IG1heSBiZSBudWxsLCB3b3JrYXJvdW5kIGZvciBidWdneSBNJFxuICAgICAgICAgICAgdGhpcy5fZG9SZWNvbm5lY3RJZk5lZWRlZCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNsaWNlID0gYmlnYnVmZmVyLnNsaWNlKHRoaXMuX2xhc3RUaW1lQnVmZmVyU2l6ZSk7XG4gICAgICAgIHRoaXMuX2xhc3RUaW1lQnVmZmVyU2l6ZSA9IGJpZ2J1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICBsZXQgYnl0ZVN0YXJ0ID0gdGhpcy5fdG90YWxSYW5nZS5mcm9tICsgdGhpcy5fcmVjZWl2ZWRMZW5ndGg7XG4gICAgICAgIHRoaXMuX3JlY2VpdmVkTGVuZ3RoICs9IHNsaWNlLmJ5dGVMZW5ndGg7XG5cbiAgICAgICAgaWYgKHRoaXMuX29uRGF0YUFycml2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRGF0YUFycml2YWwoc2xpY2UsIGJ5dGVTdGFydCwgdGhpcy5fcmVjZWl2ZWRMZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpZ2J1ZmZlci5ieXRlTGVuZ3RoID49IHRoaXMuX2J1ZmZlckxpbWl0KSB7XG4gICAgICAgICAgICBMb2cudih0aGlzLlRBRywgYE1TU3RyZWFtIGJ1ZmZlciBleGNlZWRlZCBtYXggc2l6ZSBuZWFyICR7Ynl0ZVN0YXJ0ICsgc2xpY2UuYnl0ZUxlbmd0aH0sIHJlY29ubmVjdGluZy4uLmApO1xuICAgICAgICAgICAgdGhpcy5fZG9SZWNvbm5lY3RJZk5lZWRlZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2RvUmVjb25uZWN0SWZOZWVkZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb250ZW50TGVuZ3RoID09IG51bGwgfHwgdGhpcy5fcmVjZWl2ZWRMZW5ndGggPCB0aGlzLl9jb250ZW50TGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1JlY29ubmVjdGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9sYXN0VGltZUJ1ZmZlclNpemUgPSAwO1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxBYm9ydCgpO1xuXG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSB7XG4gICAgICAgICAgICAgICAgZnJvbTogdGhpcy5fdG90YWxSYW5nZS5mcm9tICsgdGhpcy5fcmVjZWl2ZWRMZW5ndGgsXG4gICAgICAgICAgICAgICAgdG86IC0xXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxPcGVuKHRoaXMuX2RhdGFTb3VyY2UsIHJhbmdlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9tc3JPbkxvYWQoZSkgeyAgLy8gYWN0dWFsbHkgaXQgaXMgb25Db21wbGV0ZSBldmVudFxuICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0NvbXBsZXRlO1xuICAgICAgICBpZiAodGhpcy5fb25Db21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5fb25Db21wbGV0ZSh0aGlzLl90b3RhbFJhbmdlLmZyb20sIHRoaXMuX3RvdGFsUmFuZ2UuZnJvbSArIHRoaXMuX3JlY2VpdmVkTGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfbXNyT25FcnJvcihlKSB7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rRXJyb3I7XG4gICAgICAgIGxldCB0eXBlID0gMDtcbiAgICAgICAgbGV0IGluZm8gPSBudWxsO1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250ZW50TGVuZ3RoICYmIHRoaXMuX3JlY2VpdmVkTGVuZ3RoIDwgdGhpcy5fY29udGVudExlbmd0aCkge1xuICAgICAgICAgICAgdHlwZSA9IExvYWRlckVycm9ycy5FQVJMWV9FT0Y7XG4gICAgICAgICAgICBpbmZvID0ge2NvZGU6IC0xLCBtc2c6ICdNU1N0cmVhbSBtZWV0IEVhcmx5LUVvZid9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHlwZSA9IExvYWRlckVycm9ycy5FQVJMWV9FT0Y7XG4gICAgICAgICAgICBpbmZvID0ge2NvZGU6IC0xLCBtc2c6IGUuY29uc3RydWN0b3IubmFtZSArICcgJyArIGUudHlwZX07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb25FcnJvcikge1xuICAgICAgICAgICAgdGhpcy5fb25FcnJvcih0eXBlLCBpbmZvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKGluZm8ubXNnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTVNTdHJlYW1Mb2FkZXI7IiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBMb2cgZnJvbSAnLi4vdXRpbHMvbG9nZ2VyLmpzJztcbmltcG9ydCBTcGVlZFNhbXBsZXIgZnJvbSAnLi9zcGVlZC1zYW1wbGVyLmpzJztcbmltcG9ydCB7QmFzZUxvYWRlciwgTG9hZGVyU3RhdHVzLCBMb2FkZXJFcnJvcnN9IGZyb20gJy4vbG9hZGVyLmpzJztcbmltcG9ydCB7UnVudGltZUV4Y2VwdGlvbn0gZnJvbSAnLi4vdXRpbHMvZXhjZXB0aW9uLmpzJztcblxuLy8gVW5pdmVyc2FsIElPIExvYWRlciwgaW1wbGVtZW50ZWQgYnkgYWRkaW5nIFJhbmdlIGhlYWRlciBpbiB4aHIncyByZXF1ZXN0IGhlYWRlclxuY2xhc3MgUmFuZ2VMb2FkZXIgZXh0ZW5kcyBCYXNlTG9hZGVyIHtcblxuICAgIHN0YXRpYyBpc1N1cHBvcnRlZCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCAnaHR0cHM6Ly9leGFtcGxlLmNvbScsIHRydWUpO1xuICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgICAgICAgICByZXR1cm4gKHhoci5yZXNwb25zZVR5cGUgPT09ICdhcnJheWJ1ZmZlcicpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBMb2cudygnUmFuZ2VMb2FkZXInLCBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3Ioc2Vla0hhbmRsZXIsIGNvbmZpZykge1xuICAgICAgICBzdXBlcigneGhyLXJhbmdlLWxvYWRlcicpO1xuICAgICAgICB0aGlzLlRBRyA9ICdSYW5nZUxvYWRlcic7XG5cbiAgICAgICAgdGhpcy5fc2Vla0hhbmRsZXIgPSBzZWVrSGFuZGxlcjtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLl9uZWVkU3Rhc2ggPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9jaHVua1NpemVLQkxpc3QgPSBbXG4gICAgICAgICAgICAxMjgsIDI1NiwgMzg0LCA1MTIsIDc2OCwgMTAyNCwgMTUzNiwgMjA0OCwgMzA3MiwgNDA5NiwgNTEyMCwgNjE0NCwgNzE2OCwgODE5MlxuICAgICAgICBdO1xuICAgICAgICB0aGlzLl9jdXJyZW50Q2h1bmtTaXplS0IgPSAzODQ7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRTcGVlZE5vcm1hbGl6ZWQgPSAwO1xuICAgICAgICB0aGlzLl96ZXJvU3BlZWRDaHVua0NvdW50ID0gMDtcblxuICAgICAgICB0aGlzLl94aHIgPSBudWxsO1xuICAgICAgICB0aGlzLl9zcGVlZFNhbXBsZXIgPSBuZXcgU3BlZWRTYW1wbGVyKCk7XG5cbiAgICAgICAgdGhpcy5fcmVxdWVzdEFib3J0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3dhaXRGb3JUb3RhbExlbmd0aCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl90b3RhbExlbmd0aFJlY2VpdmVkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFJlcXVlc3RVUkwgPSBudWxsO1xuICAgICAgICB0aGlzLl9jdXJyZW50UmVkaXJlY3RlZFVSTCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0UmFuZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl90b3RhbExlbmd0aCA9IG51bGw7ICAvLyBzaXplIG9mIHRoZSBlbnRpcmUgZmlsZVxuICAgICAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gbnVsbDsgIC8vIENvbnRlbnQtTGVuZ3RoIG9mIGVudGlyZSByZXF1ZXN0IHJhbmdlXG4gICAgICAgIHRoaXMuX3JlY2VpdmVkTGVuZ3RoID0gMDsgIC8vIHRvdGFsIHJlY2VpdmVkIGJ5dGVzXG4gICAgICAgIHRoaXMuX2xhc3RUaW1lTG9hZGVkID0gMDsgIC8vIHJlY2VpdmVkIGJ5dGVzIG9mIGN1cnJlbnQgcmVxdWVzdCBzdWItcmFuZ2VcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5pc1dvcmtpbmcoKSkge1xuICAgICAgICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl94aHIpIHtcbiAgICAgICAgICAgIHRoaXMuX3hoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5feGhyLm9ucHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5feGhyLm9ubG9hZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl94aHIub25lcnJvciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl94aHIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudFNwZWVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BlZWRTYW1wbGVyLmxhc3RTZWNvbmRLQnBzO1xuICAgIH1cblxuICAgIG9wZW4oZGF0YVNvdXJjZSwgcmFuZ2UpIHtcbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZSA9IGRhdGFTb3VyY2U7XG4gICAgICAgIHRoaXMuX3JhbmdlID0gcmFuZ2U7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rQ29ubmVjdGluZztcblxuICAgICAgICBsZXQgdXNlUmVmVG90YWxMZW5ndGggPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGFTb3VyY2UuZmlsZXNpemUgIT0gdW5kZWZpbmVkICYmIHRoaXMuX2RhdGFTb3VyY2UuZmlsZXNpemUgIT09IDApIHtcbiAgICAgICAgICAgIHVzZVJlZlRvdGFsTGVuZ3RoID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsTGVuZ3RoID0gdGhpcy5fZGF0YVNvdXJjZS5maWxlc2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fdG90YWxMZW5ndGhSZWNlaXZlZCAmJiAhdXNlUmVmVG90YWxMZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG90YWwgZmlsZXNpemVcbiAgICAgICAgICAgIHRoaXMuX3dhaXRGb3JUb3RhbExlbmd0aCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcm5hbE9wZW4odGhpcy5fZGF0YVNvdXJjZSwge2Zyb206IDAsIHRvOiAtMX0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSBmaWxlc2l6ZSwgc3RhcnQgbG9hZGluZ1xuICAgICAgICAgICAgdGhpcy5fb3BlblN1YlJhbmdlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb3BlblN1YlJhbmdlKCkge1xuICAgICAgICBsZXQgY2h1bmtTaXplID0gdGhpcy5fY3VycmVudENodW5rU2l6ZUtCICogMTAyNDtcblxuICAgICAgICBsZXQgZnJvbSA9IHRoaXMuX3JhbmdlLmZyb20gKyB0aGlzLl9yZWNlaXZlZExlbmd0aDtcbiAgICAgICAgbGV0IHRvID0gZnJvbSArIGNodW5rU2l6ZTtcblxuICAgICAgICBpZiAodGhpcy5fY29udGVudExlbmd0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodG8gLSB0aGlzLl9yYW5nZS5mcm9tID49IHRoaXMuX2NvbnRlbnRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0byA9IHRoaXMuX3JhbmdlLmZyb20gKyB0aGlzLl9jb250ZW50TGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0UmFuZ2UgPSB7ZnJvbSwgdG99O1xuICAgICAgICB0aGlzLl9pbnRlcm5hbE9wZW4odGhpcy5fZGF0YVNvdXJjZSwgdGhpcy5fY3VycmVudFJlcXVlc3RSYW5nZSk7XG4gICAgfVxuXG4gICAgX2ludGVybmFsT3BlbihkYXRhU291cmNlLCByYW5nZSkge1xuICAgICAgICB0aGlzLl9sYXN0VGltZUxvYWRlZCA9IDA7XG5cbiAgICAgICAgbGV0IHNvdXJjZVVSTCA9IGRhdGFTb3VyY2UudXJsO1xuICAgICAgICBpZiAodGhpcy5fY29uZmlnLnJldXNlUmVkaXJlY3RlZFVSTCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRSZWRpcmVjdGVkVVJMICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNvdXJjZVVSTCA9IHRoaXMuX2N1cnJlbnRSZWRpcmVjdGVkVVJMO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhU291cmNlLnJlZGlyZWN0ZWRVUkwgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc291cmNlVVJMID0gZGF0YVNvdXJjZS5yZWRpcmVjdGVkVVJMO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNlZWtDb25maWcgPSB0aGlzLl9zZWVrSGFuZGxlci5nZXRDb25maWcoc291cmNlVVJMLCByYW5nZSk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0VVJMID0gc2Vla0NvbmZpZy51cmw7XG5cbiAgICAgICAgbGV0IHhociA9IHRoaXMuX3hociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbignR0VUJywgc2Vla0NvbmZpZy51cmwsIHRydWUpO1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHRoaXMuX29uUmVhZHlTdGF0ZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgICAgICB4aHIub25wcm9ncmVzcyA9IHRoaXMuX29uUHJvZ3Jlc3MuYmluZCh0aGlzKTtcbiAgICAgICAgeGhyLm9ubG9hZCA9IHRoaXMuX29uTG9hZC5iaW5kKHRoaXMpO1xuICAgICAgICB4aHIub25lcnJvciA9IHRoaXMuX29uWGhyRXJyb3IuYmluZCh0aGlzKTtcblxuICAgICAgICBpZiAoZGF0YVNvdXJjZS53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzZWVrQ29uZmlnLmhlYWRlcnMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHNlZWtDb25maWcuaGVhZGVycztcblxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgaGVhZGVyc1trZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB4aHIuc2VuZCgpO1xuICAgIH1cblxuICAgIGFib3J0KCkge1xuICAgICAgICB0aGlzLl9yZXF1ZXN0QWJvcnQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9pbnRlcm5hbEFib3J0KCk7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rQ29tcGxldGU7XG4gICAgfVxuXG4gICAgX2ludGVybmFsQWJvcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl94aHIpIHtcbiAgICAgICAgICAgIHRoaXMuX3hoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5feGhyLm9ucHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5feGhyLm9ubG9hZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl94aHIub25lcnJvciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl94aHIuYWJvcnQoKTtcbiAgICAgICAgICAgIHRoaXMuX3hociA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25SZWFkeVN0YXRlQ2hhbmdlKGUpIHtcbiAgICAgICAgbGV0IHhociA9IGUudGFyZ2V0O1xuXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gMikgeyAgLy8gSEVBREVSU19SRUNFSVZFRFxuICAgICAgICAgICAgaWYgKHhoci5yZXNwb25zZVVSTCAhPSB1bmRlZmluZWQpIHsgIC8vIGlmIHRoZSBicm93c2VyIHN1cHBvcnQgdGhpcyBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIGxldCByZWRpcmVjdGVkVVJMID0gdGhpcy5fc2Vla0hhbmRsZXIucmVtb3ZlVVJMUGFyYW1ldGVycyh4aHIucmVzcG9uc2VVUkwpO1xuICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VVUkwgIT09IHRoaXMuX2N1cnJlbnRSZXF1ZXN0VVJMICYmIHJlZGlyZWN0ZWRVUkwgIT09IHRoaXMuX2N1cnJlbnRSZWRpcmVjdGVkVVJMKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSZWRpcmVjdGVkVVJMID0gcmVkaXJlY3RlZFVSTDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX29uVVJMUmVkaXJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uVVJMUmVkaXJlY3QocmVkaXJlY3RlZFVSTCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8PSAyOTkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3dhaXRGb3JUb3RhbExlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXR1cyA9IExvYWRlclN0YXR1cy5rQnVmZmVyaW5nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0Vycm9yO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoTG9hZGVyRXJyb3JzLkhUVFBfU1RBVFVTX0NPREVfSU5WQUxJRCwge2NvZGU6IHhoci5zdGF0dXMsIG1zZzogeGhyLnN0YXR1c1RleHR9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbignUmFuZ2VMb2FkZXI6IEh0dHAgY29kZSBpbnZhbGlkLCAnICsgeGhyLnN0YXR1cyArICcgJyArIHhoci5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25Qcm9ncmVzcyhlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0dXMgPT09IExvYWRlclN0YXR1cy5rRXJyb3IpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBlcnJvciByZXNwb25zZVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRlbnRMZW5ndGggPT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBvcGVuTmV4dFJhbmdlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl93YWl0Rm9yVG90YWxMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93YWl0Rm9yVG90YWxMZW5ndGggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl90b3RhbExlbmd0aFJlY2VpdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBvcGVuTmV4dFJhbmdlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGxldCB0b3RhbCA9IGUudG90YWw7XG4gICAgICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxBYm9ydCgpO1xuICAgICAgICAgICAgICAgIGlmICh0b3RhbCAhPSBudWxsICYgdG90YWwgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG90YWxMZW5ndGggPSB0b3RhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBjdXJycmVudCByZXF1ZXN0IHJhbmdlJ3MgY29udGVudExlbmd0aFxuICAgICAgICAgICAgaWYgKHRoaXMuX3JhbmdlLnRvID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSB0aGlzLl90b3RhbExlbmd0aCAtIHRoaXMuX3JhbmdlLmZyb207XG4gICAgICAgICAgICB9IGVsc2UgeyAgLy8gdG8gIT09IC0xXG4gICAgICAgICAgICAgICAgdGhpcy5fY29udGVudExlbmd0aCA9IHRoaXMuX3JhbmdlLnRvIC0gdGhpcy5fcmFuZ2UuZnJvbSArIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcGVuTmV4dFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3BlblN1YlJhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX29uQ29udGVudExlbmd0aEtub3duKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25Db250ZW50TGVuZ3RoS25vd24odGhpcy5fY29udGVudExlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGVsdGEgPSBlLmxvYWRlZCAtIHRoaXMuX2xhc3RUaW1lTG9hZGVkO1xuICAgICAgICB0aGlzLl9sYXN0VGltZUxvYWRlZCA9IGUubG9hZGVkO1xuICAgICAgICB0aGlzLl9zcGVlZFNhbXBsZXIuYWRkQnl0ZXMoZGVsdGEpO1xuICAgIH1cblxuICAgIF9ub3JtYWxpemVTcGVlZChpbnB1dCkge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuX2NodW5rU2l6ZUtCTGlzdDtcbiAgICAgICAgbGV0IGxhc3QgPSBsaXN0Lmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBtaWQgPSAwO1xuICAgICAgICBsZXQgbGJvdW5kID0gMDtcbiAgICAgICAgbGV0IHVib3VuZCA9IGxhc3Q7XG5cbiAgICAgICAgaWYgKGlucHV0IDwgbGlzdFswXSkge1xuICAgICAgICAgICAgcmV0dXJuIGxpc3RbMF07XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAobGJvdW5kIDw9IHVib3VuZCkge1xuICAgICAgICAgICAgbWlkID0gbGJvdW5kICsgTWF0aC5mbG9vcigodWJvdW5kIC0gbGJvdW5kKSAvIDIpO1xuICAgICAgICAgICAgaWYgKG1pZCA9PT0gbGFzdCB8fCAoaW5wdXQgPj0gbGlzdFttaWRdICYmIGlucHV0IDwgbGlzdFttaWQgKyAxXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdFttaWRdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0W21pZF0gPCBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGxib3VuZCA9IG1pZCArIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVib3VuZCA9IG1pZCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25Mb2FkKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXR1cyA9PT0gTG9hZGVyU3RhdHVzLmtFcnJvcikge1xuICAgICAgICAgICAgLy8gSWdub3JlIGVycm9yIHJlc3BvbnNlXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fd2FpdEZvclRvdGFsTGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl93YWl0Rm9yVG90YWxMZW5ndGggPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xhc3RUaW1lTG9hZGVkID0gMDtcbiAgICAgICAgbGV0IEtCcHMgPSB0aGlzLl9zcGVlZFNhbXBsZXIubGFzdFNlY29uZEtCcHM7XG4gICAgICAgIGlmIChLQnBzID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl96ZXJvU3BlZWRDaHVua0NvdW50Kys7XG4gICAgICAgICAgICBpZiAodGhpcy5femVyb1NwZWVkQ2h1bmtDb3VudCA+PSAzKSB7XG4gICAgICAgICAgICAgICAgLy8gVHJ5IGdldCBjdXJyZW50S0JwcyBhZnRlciAzIGNodW5rc1xuICAgICAgICAgICAgICAgIEtCcHMgPSB0aGlzLl9zcGVlZFNhbXBsZXIuY3VycmVudEtCcHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoS0JwcyAhPT0gMCkge1xuICAgICAgICAgICAgbGV0IG5vcm1hbGl6ZWQgPSB0aGlzLl9ub3JtYWxpemVTcGVlZChLQnBzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50U3BlZWROb3JtYWxpemVkICE9PSBub3JtYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFNwZWVkTm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudENodW5rU2l6ZUtCID0gbm9ybWFsaXplZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjaHVuayA9IGUudGFyZ2V0LnJlc3BvbnNlO1xuICAgICAgICBsZXQgYnl0ZVN0YXJ0ID0gdGhpcy5fcmFuZ2UuZnJvbSArIHRoaXMuX3JlY2VpdmVkTGVuZ3RoO1xuICAgICAgICB0aGlzLl9yZWNlaXZlZExlbmd0aCArPSBjaHVuay5ieXRlTGVuZ3RoO1xuXG4gICAgICAgIGxldCByZXBvcnRDb21wbGV0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250ZW50TGVuZ3RoICE9IG51bGwgJiYgdGhpcy5fcmVjZWl2ZWRMZW5ndGggPCB0aGlzLl9jb250ZW50TGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBjb250aW51ZSBsb2FkIG5leHQgY2h1bmtcbiAgICAgICAgICAgIHRoaXMuX29wZW5TdWJSYW5nZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVwb3J0Q29tcGxldGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGlzcGF0Y2ggcmVjZWl2ZWQgY2h1bmtcbiAgICAgICAgaWYgKHRoaXMuX29uRGF0YUFycml2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRGF0YUFycml2YWwoY2h1bmssIGJ5dGVTdGFydCwgdGhpcy5fcmVjZWl2ZWRMZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlcG9ydENvbXBsZXRlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0NvbXBsZXRlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX29uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkNvbXBsZXRlKHRoaXMuX3JhbmdlLmZyb20sIHRoaXMuX3JhbmdlLmZyb20gKyB0aGlzLl9yZWNlaXZlZExlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uWGhyRXJyb3IoZSkge1xuICAgICAgICB0aGlzLl9zdGF0dXMgPSBMb2FkZXJTdGF0dXMua0Vycm9yO1xuICAgICAgICBsZXQgdHlwZSA9IDA7XG4gICAgICAgIGxldCBpbmZvID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5fY29udGVudExlbmd0aCAmJiB0aGlzLl9yZWNlaXZlZExlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdGhpcy5fcmVjZWl2ZWRMZW5ndGggPCB0aGlzLl9jb250ZW50TGVuZ3RoKSB7XG4gICAgICAgICAgICB0eXBlID0gTG9hZGVyRXJyb3JzLkVBUkxZX0VPRjtcbiAgICAgICAgICAgIGluZm8gPSB7Y29kZTogLTEsIG1zZzogJ1JhbmdlTG9hZGVyIG1lZXQgRWFybHktRW9mJ307XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0eXBlID0gTG9hZGVyRXJyb3JzLkVYQ0VQVElPTjtcbiAgICAgICAgICAgIGluZm8gPSB7Y29kZTogLTEsIG1zZzogZS5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgZS50eXBlfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9vbkVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkVycm9yKHR5cGUsIGluZm8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oaW5mby5tc2cpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhbmdlTG9hZGVyOyIsIi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgQmlsaWJpbGkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvciB6aGVuZyBxaWFuIDx4cXFAeHFxLmltPlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cydcbmltcG9ydCBMb2cgZnJvbSAnLi4vdXRpbHMvbG9nZ2VyLmpzJ1xuaW1wb3J0IEJyb3dzZXIgZnJvbSAnLi4vdXRpbHMvYnJvd3Nlci5qcydcbmltcG9ydCBQbGF5ZXJFdmVudHMgZnJvbSAnLi9wbGF5ZXItZXZlbnRzLmpzJ1xuaW1wb3J0IFRyYW5zbXV4ZXIgZnJvbSAnLi4vY29yZS90cmFuc211eGVyLmpzJ1xuaW1wb3J0IFRyYW5zbXV4aW5nRXZlbnRzIGZyb20gJy4uL2NvcmUvdHJhbnNtdXhpbmctZXZlbnRzLmpzJ1xuaW1wb3J0IE1TRUNvbnRyb2xsZXIgZnJvbSAnLi4vY29yZS9tc2UtY29udHJvbGxlci5qcydcbmltcG9ydCBNU0VFdmVudHMgZnJvbSAnLi4vY29yZS9tc2UtZXZlbnRzLmpzJ1xuaW1wb3J0IHtFcnJvclR5cGVzLCBFcnJvckRldGFpbHN9IGZyb20gJy4vcGxheWVyLWVycm9ycy5qcydcbmltcG9ydCB7Y3JlYXRlRGVmYXVsdENvbmZpZ30gZnJvbSAnLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHtJbnZhbGlkQXJndW1lbnRFeGNlcHRpb24sIElsbGVnYWxTdGF0ZUV4Y2VwdGlvbn0gZnJvbSAnLi4vdXRpbHMvZXhjZXB0aW9uLmpzJ1xuLyogZXNsaW50LWRpc2FibGUgKi9cbmNsYXNzIEZsdlBsYXllciB7XG4gIGNvbnN0cnVjdG9yIChtZWRpYURhdGFTb3VyY2UsIGNvbmZpZykge1xuICAgIHRoaXMuVEFHID0gJ0ZsdlBsYXllcidcbiAgICB0aGlzLl90eXBlID0gJ0ZsdlBsYXllcidcbiAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpXG5cbiAgICB0aGlzLl9jb25maWcgPSBjcmVhdGVEZWZhdWx0Q29uZmlnKClcbiAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fY29uZmlnLCBjb25maWcpXG4gICAgfVxuXG4gICAgaWYgKG1lZGlhRGF0YVNvdXJjZS50eXBlLnRvTG93ZXJDYXNlKCkgIT09ICdmbHYnKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uKCdGbHZQbGF5ZXIgcmVxdWlyZXMgYW4gZmx2IE1lZGlhRGF0YVNvdXJjZSBpbnB1dCEnKVxuICAgIH1cblxuICAgIGlmIChtZWRpYURhdGFTb3VyY2UuaXNMaXZlID09PSB0cnVlKSB7XG4gICAgICB0aGlzLl9jb25maWcuaXNMaXZlID0gdHJ1ZVxuICAgIH1cblxuICAgIHRoaXMuZSA9IHtcbiAgICAgIG9udkxvYWRlZE1ldGFkYXRhOiB0aGlzLl9vbnZMb2FkZWRNZXRhZGF0YS5iaW5kKHRoaXMpLFxuICAgICAgb252U2Vla2luZzogdGhpcy5fb252U2Vla2luZy5iaW5kKHRoaXMpLFxuICAgICAgb252Q2FuUGxheTogdGhpcy5fb252Q2FuUGxheS5iaW5kKHRoaXMpLFxuICAgICAgb252U3RhbGxlZDogdGhpcy5fb252U3RhbGxlZC5iaW5kKHRoaXMpLFxuICAgICAgb252UHJvZ3Jlc3M6IHRoaXMuX29udlByb2dyZXNzLmJpbmQodGhpcylcbiAgICB9XG5cbiAgICBpZiAod2luZG93LnBlcmZvcm1hbmNlICYmIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cpIHtcbiAgICAgIHRoaXMuX25vdyA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cuYmluZCh3aW5kb3cucGVyZm9ybWFuY2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX25vdyA9IERhdGUubm93XG4gICAgfVxuXG4gICAgdGhpcy5fcGVuZGluZ1NlZWtUaW1lID0gbnVsbCAvLyBpbiBzZWNvbmRzXG4gICAgdGhpcy5fcmVxdWVzdFNldFRpbWUgPSBmYWxzZVxuICAgIHRoaXMuX3NlZWtwb2ludFJlY29yZCA9IG51bGxcbiAgICB0aGlzLl9wcm9ncmVzc0NoZWNrZXIgPSBudWxsXG5cbiAgICB0aGlzLl9tZWRpYURhdGFTb3VyY2UgPSBtZWRpYURhdGFTb3VyY2VcbiAgICB0aGlzLl9tZWRpYUVsZW1lbnQgPSBudWxsXG4gICAgdGhpcy5fbXNlY3RsID0gbnVsbFxuICAgIHRoaXMuX3RyYW5zbXV4ZXIgPSBudWxsXG5cbiAgICB0aGlzLl9tc2VTb3VyY2VPcGVuZWQgPSBmYWxzZVxuICAgIHRoaXMuX2hhc1BlbmRpbmdMb2FkID0gZmFsc2VcbiAgICB0aGlzLl9yZWNlaXZlZENhblBsYXkgPSBmYWxzZVxuXG4gICAgdGhpcy5fbWVkaWFJbmZvID0gbnVsbFxuICAgIHRoaXMuX3N0YXRpc3RpY3NJbmZvID0gbnVsbFxuXG4gICAgbGV0IGNocm9tZU5lZWRJRFJGaXggPSAoQnJvd3Nlci5jaHJvbWUgJiZcbiAgICAgIChCcm93c2VyLnZlcnNpb24ubWFqb3IgPCA1MCB8fFxuICAgICAgICAoQnJvd3Nlci52ZXJzaW9uLm1ham9yID09PSA1MCAmJiBCcm93c2VyLnZlcnNpb24uYnVpbGQgPCAyNjYxKSkpXG4gICAgdGhpcy5fYWx3YXlzU2Vla0tleWZyYW1lID0gISEoKGNocm9tZU5lZWRJRFJGaXggfHwgQnJvd3Nlci5tc2VkZ2UgfHwgQnJvd3Nlci5tc2llKSlcblxuICAgIGlmICh0aGlzLl9hbHdheXNTZWVrS2V5ZnJhbWUpIHtcbiAgICAgIHRoaXMuX2NvbmZpZy5hY2N1cmF0ZVNlZWsgPSBmYWxzZVxuICAgIH1cbiAgICB0aGlzLl90ZW1wUGVuZGluZ1NlZ21lbnRzID0ge1xuICAgICAgYXVkaW86IFtdLFxuICAgICAgdmlkZW86IFtdXG4gICAgfVxuICAgIHRoaXMuX2RlZmluaXRpb25SZXRyeVRpbWVzID0gMFxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgaWYgKHRoaXMuX3Byb2dyZXNzQ2hlY2tlciAhPSBudWxsKSB7XG4gICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl9wcm9ncmVzc0NoZWNrZXIpXG4gICAgICB0aGlzLl9wcm9ncmVzc0NoZWNrZXIgPSBudWxsXG4gICAgfVxuICAgIGlmICh0aGlzLl90cmFuc211eGVyKSB7XG4gICAgICB0aGlzLnVubG9hZCgpXG4gICAgfVxuICAgIGlmICh0aGlzLl9tZWRpYUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuZGV0YWNoTWVkaWFFbGVtZW50KClcbiAgICB9XG4gICAgdGhpcy5lID0gbnVsbFxuICAgIHRoaXMuX21lZGlhRGF0YVNvdXJjZSA9IG51bGxcblxuICAgIHRoaXMuX2VtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKClcbiAgICB0aGlzLl9lbWl0dGVyID0gbnVsbFxuICB9XG5cbiAgb24gKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGlmIChldmVudCA9PT0gUGxheWVyRXZlbnRzLk1FRElBX0lORk8pIHtcbiAgICAgIGlmICh0aGlzLl9tZWRpYUluZm8gIT0gbnVsbCkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoUGxheWVyRXZlbnRzLk1FRElBX0lORk8sIHRoaXMubWVkaWFJbmZvKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXZlbnQgPT09IFBsYXllckV2ZW50cy5TVEFUSVNUSUNTX0lORk8pIHtcbiAgICAgIGlmICh0aGlzLl9zdGF0aXN0aWNzSW5mbyAhPSBudWxsKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChQbGF5ZXJFdmVudHMuU1RBVElTVElDU19JTkZPLCB0aGlzLnN0YXRpc3RpY3NJbmZvKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9lbWl0dGVyLmFkZExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcilcbiAgfVxuXG4gIG9mZiAoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgdGhpcy5fZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpXG4gIH1cblxuICBhdHRhY2hNZWRpYUVsZW1lbnQgKG1lZGlhRWxlbWVudCkge1xuICAgIHRoaXMuX21lZGlhRWxlbWVudCA9IG1lZGlhRWxlbWVudFxuICAgIG1lZGlhRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsIHRoaXMuZS5vbnZMb2FkZWRNZXRhZGF0YSlcbiAgICBtZWRpYUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Vla2luZycsIHRoaXMuZS5vbnZTZWVraW5nKVxuICAgIG1lZGlhRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjYW5wbGF5JywgdGhpcy5lLm9udkNhblBsYXkpXG4gICAgbWVkaWFFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N0YWxsZWQnLCB0aGlzLmUub252U3RhbGxlZClcbiAgICBtZWRpYUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCB0aGlzLmUub252UHJvZ3Jlc3MpXG5cbiAgICB0aGlzLl9tc2VjdGwgPSBuZXcgTVNFQ29udHJvbGxlcih0aGlzLl9jb25maWcpXG5cbiAgICB0aGlzLl9tc2VjdGwub24oTVNFRXZlbnRzLlVQREFURV9FTkQsIHRoaXMuX29ubXNlVXBkYXRlRW5kLmJpbmQodGhpcykpXG4gICAgdGhpcy5fbXNlY3RsLm9uKE1TRUV2ZW50cy5CVUZGRVJfRlVMTCwgdGhpcy5fb25tc2VCdWZmZXJGdWxsLmJpbmQodGhpcykpXG4gICAgdGhpcy5fbXNlY3RsLm9uKE1TRUV2ZW50cy5TT1VSQ0VfT1BFTiwgKCkgPT4ge1xuICAgICAgdGhpcy5fbXNlU291cmNlT3BlbmVkID0gdHJ1ZVxuICAgICAgaWYgKHRoaXMuX2hhc1BlbmRpbmdMb2FkKSB7XG4gICAgICAgIHRoaXMuX2hhc1BlbmRpbmdMb2FkID0gZmFsc2VcbiAgICAgICAgdGhpcy5sb2FkKClcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMuX21zZWN0bC5vbihNU0VFdmVudHMuRVJST1IsIChpbmZvKSA9PiB7XG4gICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoUGxheWVyRXZlbnRzLkVSUk9SLFxuICAgICAgICBFcnJvclR5cGVzLk1FRElBX0VSUk9SLFxuICAgICAgICBFcnJvckRldGFpbHMuTUVESUFfTVNFX0VSUk9SLFxuICAgICAgICBpbmZvXG4gICAgICApXG4gICAgfSlcblxuICAgIHRoaXMuX21zZWN0bC5hdHRhY2hNZWRpYUVsZW1lbnQobWVkaWFFbGVtZW50KVxuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdTZWVrVGltZSAhPSBudWxsKSB7XG4gICAgICB0cnkge1xuICAgICAgICBtZWRpYUVsZW1lbnQuY3VycmVudFRpbWUgPSB0aGlzLl9wZW5kaW5nU2Vla1RpbWVcbiAgICAgICAgdGhpcy5fcGVuZGluZ1NlZWtUaW1lID0gbnVsbFxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBJRTExIG1heSB0aHJvdyBJbnZhbGlkU3RhdGVFcnJvciBpZiByZWFkeVN0YXRlID09PSAwXG4gICAgICAgIC8vIFdlIGNhbiBkZWZlciBzZXQgY3VycmVudFRpbWUgb3BlcmF0aW9uIGFmdGVyIGxvYWRlZG1ldGFkYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZGV0YWNoTWVkaWFFbGVtZW50ICgpIHtcbiAgICBpZiAodGhpcy5fbWVkaWFFbGVtZW50KSB7XG4gICAgICB0aGlzLl9tc2VjdGwuZGV0YWNoTWVkaWFFbGVtZW50KClcbiAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsIHRoaXMuZS5vbnZMb2FkZWRNZXRhZGF0YSlcbiAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWVraW5nJywgdGhpcy5lLm9udlNlZWtpbmcpXG4gICAgICB0aGlzLl9tZWRpYUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2FucGxheScsIHRoaXMuZS5vbnZDYW5QbGF5KVxuICAgICAgdGhpcy5fbWVkaWFFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N0YWxsZWQnLCB0aGlzLmUub252U3RhbGxlZClcbiAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHRoaXMuZS5vbnZQcm9ncmVzcylcbiAgICAgIHRoaXMuX21lZGlhRWxlbWVudCA9IG51bGxcbiAgICB9XG4gICAgaWYgKHRoaXMuX21zZWN0bCkge1xuICAgICAgdGhpcy5fbXNlY3RsLmRlc3Ryb3koKVxuICAgICAgdGhpcy5fbXNlY3RsID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIG9uRGVmaW5pdGlvbkNoYW5nZSAodXJsLCBleHBlY3RUaW1lID0gMykge1xuICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIC8vICAgaWYgKCF0aGlzLmlzRGVmaW5pdGlvbkRhdGFSZWFkeSAmJiB0aGlzLl9kZWZpbml0aW9uUmV0cnlUaW1lcyA8IDMpIHtcbiAgICAvLyAgICAgdGhpcy5fZGVmaW5pdGlvblJldHJ5VGltZXMgKz0gMVxuICAgIC8vICAgICB0aGlzLm9uRGVmaW5pdGlvbkNoYW5nZSh1cmwsIGV4cGVjdFRpbWUpXG4gICAgLy8gICB9IGVsc2UgaWYgKHRoaXMuaXNEZWZpbml0aW9uRGF0YVJlYWR5KSB7XG4gICAgLy8gICAgIGlmICh0aGlzLl90cmFuc211eGVyICE9PSB0aGlzLl90ZW1wVHJhbnNtdXhlcikge1xuICAgIC8vICAgICAgIHRoaXMuX3RyYW5zbXV4ZXIuZGVzdHJveSgpXG4gICAgLy8gICAgICAgdGhpcy5fdHJhbnNtdXhlciA9IHRoaXMuX3RlbXBUcmFuc211eGVyXG4gICAgLy8gICAgICAgbGV0IGN1cnJlbnRUaW1lID0gdGhpcy5fbWVkaWFFbGVtZW50LmN1cnJlbnRUaW1lXG4gICAgLy8gICAgICAgdGhpcy5fdGVtcFRyYW5zbXV4ZXIuc2VlayhjdXJyZW50VGltZSAqIDEwMDApXG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgT2JqZWN0LmtleXModGhpcy5fdGVtcFBlbmRpbmdTZWdtZW50cykuZm9yRWFjaChrZXkgPT4ge1xuICAgIC8vICAgICAgIHRoaXMuX21zZWN0bC5fcGVuZGluZ1NlZ21lbnRzW2tleV0gPSB0aGlzLl90ZW1wUGVuZGluZ1NlZ21lbnRzW2tleV1cbiAgICAvLyAgICAgfSlcbiAgICAvLyAgICAgdGhpcy5fdGVtcFBlbmRpbmdTZWdtZW50cyA9IHtcbiAgICAvLyAgICAgICBhdWRpbzogW10sXG4gICAgLy8gICAgICAgdmlkZW86IFtdXG4gICAgLy8gICAgIH1cbiAgICAvL1xuICAgIC8vICAgICB0aGlzLl9kZWZpbml0aW9uUmV0cnlUaW1lcyA9IDBcbiAgICAvLyAgIH0gZWxzZSBpZiAodGhpcy5fZGVmaW5pdGlvblJldHJ5VGltZXMgPj0gMykge1xuICAgIC8vICAgICB0aGlzLl9kZWZpbml0aW9uUmV0cnlUaW1lcyA9IDBcbiAgICAvLyAgICAgaWYgKHRoaXMuX3RlbXBUcmFuc211eGVyKSB7XG4gICAgLy8gICAgICAgdGhpcy5fdGVtcFRyYW5zbXV4ZXIuZGVzdHJveSgpXG4gICAgLy8gICAgICAgdGhpcy5fdGVtcFRyYW5zbXV4ZXIgPSBudWxsXG4gICAgLy8gICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KFBsYXllckV2ZW50cy5FUlJPUiwgRXJyb3JUeXBlcy5ORVRXT1JLX0VSUk9SLCAnJywgJ+a4heaZsOW6puWIh+aNouWksei0pe+8gScpXG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgdGhpcy5fZGVmaW5pdGlvblJldHJ5VGltZXMgPSAwXG4gICAgLy8gICB9XG4gICAgLy8gICB0aGlzLl90ZW1wUGVuZGluZ1NlZ21lbnRzID0ge1xuICAgIC8vICAgICBhdWRpbzogW10sXG4gICAgLy8gICAgIHZpZGVvOiBbXVxuICAgIC8vICAgfVxuICAgIC8vIH0sIGV4cGVjdFRpbWUgKiAxMDAwKVxuXG4gICAgdGhpcy5fbWVkaWFEYXRhU291cmNlLnNlZ21lbnRzWzBdLnVybCA9IHVybFxuICAgIHRoaXMuX3RlbXBNZHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9tZWRpYURhdGFTb3VyY2UsIHt1cmx9KVxuXG4gICAgdGhpcy5fdGVtcFRyYW5zbXV4ZXIgPSBuZXcgVHJhbnNtdXhlcih0aGlzLl90ZW1wTWRzLCB0aGlzLl9jb25maWcpXG4gICAgdGhpcy5fdGVtcFRyYW5zbXV4ZXIuX2VtaXR0ZXIub24oJ21ldGFkYXRhX2Fycml2ZWQnLCBvbk1ldGFEYXRhID0+IHtcbiAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdCgnbWV0YWRhdGFfYXJyaXZlZCcsIG9uTWV0YURhdGEpO1xuICAgIH0pXG5cbiAgICB0aGlzLl90ZW1wVHJhbnNtdXhlci5vbihUcmFuc211eGluZ0V2ZW50cy5JTklUX1NFR01FTlQsICh0eXBlLCBpcykgPT4ge1xuICAgICAgaWYgKCF0aGlzLl9jb25maWcuaXNMaXZlKSB7XG4gICAgICAgIHRoaXMuX3RlbXBQZW5kaW5nU2VnbWVudHNbdHlwZV0gPSBbaXNdXG4gICAgICAgIC8vIHRoaXMuX21zZWN0bC5hcHBlbmRJbml0U2VnbWVudChpcylcbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zbXV4ZXIgIT09IHRoaXMuX3RlbXBUcmFuc211eGVyICYmIHRoaXMuX3RlbXBUcmFuc211eGVyKSB7XG4gICAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSB0aGlzLl9tZWRpYUVsZW1lbnQuY3VycmVudFRpbWVcbiAgICAgICAgICB0aGlzLl90ZW1wVHJhbnNtdXhlci5zZWVrKGN1cnJlbnRUaW1lICogMTAwMClcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiAodGhpcy5fdHJhbnNtdXhlciAhPT0gdGhpcy5fdGVtcFRyYW5zbXV4ZXIpIHtcbiAgICAgICAgLy8gICB0aGlzLl90cmFuc211eGVyLmRlc3Ryb3koKVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHRoaXMuX3RyYW5zbXV4ZXIgPSB0aGlzLl90ZW1wVHJhbnNtdXhlclxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fbXNlY3RsLmRvQ2xlYXJTb3VyY2VCdWZmZXIoKVxuICAgICAgICB0aGlzLl9tc2VjdGwuYXBwZW5kSW5pdFNlZ21lbnQoaXMpXG4gICAgICAgIGlmICh0aGlzLl90cmFuc211eGVyICE9PSB0aGlzLl90ZW1wVHJhbnNtdXhlcikge1xuICAgICAgICAgIHRoaXMuX3RyYW5zbXV4ZXIuZGVzdHJveSgpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdHJhbnNtdXhlciA9IHRoaXMuX3RlbXBUcmFuc211eGVyXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuX3RlbXBUcmFuc211eGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLk1FRElBX1NFR01FTlQsICh0eXBlLCBtcykgPT4ge1xuICAgICAgaWYgKCF0aGlzLl9jb25maWcuaXNMaXZlKSB7XG4gICAgICAgIGlmICghdGhpcy5fdGVtcFRyYW5zbXV4ZXIpIHtcbiAgICAgICAgICB0aGlzLl9tc2VjdGwuYXBwZW5kTWVkaWFTZWdtZW50KG1zKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3RlbXBQZW5kaW5nU2VnbWVudHNbdHlwZV0gJiYgdGhpcy5fdGVtcFBlbmRpbmdTZWdtZW50c1t0eXBlXS5wdXNoKG1zKVxuICAgICAgICAgIGlmICh0aGlzLmlzRGVmaW5pdGlvbkRhdGFSZWFkeSkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5fdGVtcFBlbmRpbmdTZWdtZW50cykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLl9tc2VjdGwuX3BlbmRpbmdTZWdtZW50c1trZXldID0gdGhpcy5fdGVtcFBlbmRpbmdTZWdtZW50c1trZXldXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy5fdGVtcFBlbmRpbmdTZWdtZW50cyA9IHtcbiAgICAgICAgICAgICAgYXVkaW86IFtdLFxuICAgICAgICAgICAgICB2aWRlbzogW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3RyYW5zbXV4ZXIuZGVzdHJveSgpXG4gICAgICAgICAgICB0aGlzLl90cmFuc211eGVyID0gdGhpcy5fdGVtcFRyYW5zbXV4ZXJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl90ZW1wVHJhbnNtdXhlclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fbXNlY3RsLmFwcGVuZE1lZGlhU2VnbWVudChtcylcbiAgICAgIH1cblxuICAgICAgLy8gbGF6eUxvYWQgY2hlY2tcbiAgICAgIGlmICh0aGlzLl9jb25maWcubGF6eUxvYWQgJiYgIXRoaXMuX2NvbmZpZy5pc0xpdmUpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRUaW1lID0gdGhpcy5fbWVkaWFFbGVtZW50LmN1cnJlbnRUaW1lXG4gICAgICAgIGlmIChtcy5pbmZvLmVuZER0cyA+PSAoY3VycmVudFRpbWUgKyB0aGlzLl9jb25maWcubGF6eUxvYWRNYXhEdXJhdGlvbikgKiAxMDAwKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3Byb2dyZXNzQ2hlY2tlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBMb2cudih0aGlzLlRBRywgJ01heGltdW0gYnVmZmVyaW5nIGR1cmF0aW9uIGV4Y2VlZGVkLCBzdXNwZW5kIHRyYW5zbXV4aW5nIHRhc2snKVxuICAgICAgICAgICAgdGhpcy5fc3VzcGVuZFRyYW5zbXV4ZXIoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5fdGVtcFRyYW5zbXV4ZXIub24oVHJhbnNtdXhpbmdFdmVudHMuTE9BRElOR19DT01QTEVURSwgKCkgPT4ge1xuICAgICAgdGhpcy5fbXNlY3RsLmVuZE9mU3RyZWFtKClcbiAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChQbGF5ZXJFdmVudHMuTE9BRElOR19DT01QTEVURSlcbiAgICB9KVxuICAgIHRoaXMuX3RlbXBUcmFuc211eGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLlJFQ09WRVJFRF9FQVJMWV9FT0YsICgpID0+IHtcbiAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChQbGF5ZXJFdmVudHMuUkVDT1ZFUkVEX0VBUkxZX0VPRilcbiAgICB9KVxuICAgIHRoaXMuX3RlbXBUcmFuc211eGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLklPX0VSUk9SLCAoZGV0YWlsLCBpbmZvKSA9PiB7XG4gICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoUGxheWVyRXZlbnRzLkVSUk9SLCBFcnJvclR5cGVzLk5FVFdPUktfRVJST1IsIGRldGFpbCwgaW5mbylcbiAgICB9KVxuICAgIHRoaXMuX3RlbXBUcmFuc211eGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLkRFTVVYX0VSUk9SLCAoZGV0YWlsLCBpbmZvKSA9PiB7XG4gICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoUGxheWVyRXZlbnRzLkVSUk9SLCBFcnJvclR5cGVzLk1FRElBX0VSUk9SLCBkZXRhaWwsIHtjb2RlOiAtMSwgbXNnOiBpbmZvfSlcbiAgICB9KVxuICAgIHRoaXMuX3RlbXBUcmFuc211eGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLk1FRElBX0lORk8sIChtZWRpYUluZm8pID0+IHtcbiAgICAgIHRoaXMuX21lZGlhSW5mbyA9IG1lZGlhSW5mb1xuICAgICAgdGhpcy5fdGVtcFRyYW5zbXV4ZXIuc2VlaygodGhpcy5fbWVkaWFFbGVtZW50LmN1cnJlbnRUaW1lICsgZXhwZWN0VGltZSkgKiAxMDAwKVxuICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KFBsYXllckV2ZW50cy5NRURJQV9JTkZPLCBPYmplY3QuYXNzaWduKHt9LCBtZWRpYUluZm8pKVxuICAgIH0pXG4gICAgdGhpcy5fdGVtcFRyYW5zbXV4ZXIub24oVHJhbnNtdXhpbmdFdmVudHMuU1RBVElTVElDU19JTkZPLCAoc3RhdEluZm8pID0+IHtcbiAgICAgIHRoaXMuX3N0YXRpc3RpY3NJbmZvID0gdGhpcy5fZmlsbFN0YXRpc3RpY3NJbmZvKHN0YXRJbmZvKVxuICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KFBsYXllckV2ZW50cy5TVEFUSVNUSUNTX0lORk8sIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX3N0YXRpc3RpY3NJbmZvKSlcbiAgICB9KVxuICAgIHRoaXMuX3RlbXBUcmFuc211eGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLlJFQ09NTUVORF9TRUVLUE9JTlQsIChtaWxsaXNlY29uZHMpID0+IHtcbiAgICAgIGlmICh0aGlzLl90cmFuc211eGVyID09PSB0aGlzLl90ZW1wVHJhbnNtdXhlciAmJiB0aGlzLl9tZWRpYUVsZW1lbnQgJiYgIXRoaXMuX2NvbmZpZy5hY2N1cmF0ZVNlZWspIHtcbiAgICAgICAgdGhpcy5fcmVxdWVzdFNldFRpbWUgPSB0cnVlXG4gICAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5jdXJyZW50VGltZSA9IG1pbGxpc2Vjb25kcyAvIDEwMDBcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5fdGVtcFRyYW5zbXV4ZXIub3BlbigpXG4gIH1cblxuICBsb2FkICgpIHtcbiAgICBpZiAoIXRoaXMuX21lZGlhRWxlbWVudCkge1xuICAgICAgdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbignSFRNTE1lZGlhRWxlbWVudCBtdXN0IGJlIGF0dGFjaGVkIGJlZm9yZSBsb2FkKCkhJylcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RyYW5zbXV4ZXIpIHtcbiAgICAgIHRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oJ0ZsdlBsYXllci5sb2FkKCkgaGFzIGJlZW4gY2FsbGVkLCBwbGVhc2UgY2FsbCB1bmxvYWQoKSBmaXJzdCEnKVxuICAgIH1cbiAgICBpZiAodGhpcy5faGFzUGVuZGluZ0xvYWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcuZGVmZXJMb2FkQWZ0ZXJTb3VyY2VPcGVuICYmIHRoaXMuX21zZVNvdXJjZU9wZW5lZCA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuX2hhc1BlbmRpbmdMb2FkID0gdHJ1ZVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX21lZGlhRWxlbWVudC5yZWFkeVN0YXRlID4gMCkge1xuICAgICAgdGhpcy5fcmVxdWVzdFNldFRpbWUgPSB0cnVlXG4gICAgICAvLyBJRTExIG1heSB0aHJvdyBJbnZhbGlkU3RhdGVFcnJvciBpZiByZWFkeVN0YXRlID09PSAwXG4gICAgICB0aGlzLl9tZWRpYUVsZW1lbnQuY3VycmVudFRpbWUgPSAwXG4gICAgfVxuXG4gICAgdGhpcy5fdHJhbnNtdXhlciA9IG5ldyBUcmFuc211eGVyKHRoaXMuX21lZGlhRGF0YVNvdXJjZSwgdGhpcy5fY29uZmlnKVxuICAgIHRoaXMuX3RyYW5zbXV4ZXIuX2VtaXR0ZXIub24oJ21ldGFkYXRhX2Fycml2ZWQnLCBvbk1ldGFEYXRhID0+IHtcbiAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdCgnbWV0YWRhdGFfYXJyaXZlZCcsIG9uTWV0YURhdGEpO1xuICAgIH0pXG5cbiAgICB0aGlzLl90cmFuc211eGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLklOSVRfU0VHTUVOVCwgKHR5cGUsIGlzKSA9PiB7XG4gICAgICB0aGlzLl9tc2VjdGwuYXBwZW5kSW5pdFNlZ21lbnQoaXMpXG4gICAgfSlcbiAgICB0aGlzLl90cmFuc211eGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLk1FRElBX1NFR01FTlQsICh0eXBlLCBtcykgPT4ge1xuICAgICAgdGhpcy5fbXNlY3RsLmFwcGVuZE1lZGlhU2VnbWVudChtcylcblxuICAgICAgLy8gbGF6eUxvYWQgY2hlY2tcbiAgICAgIGlmICh0aGlzLl9jb25maWcubGF6eUxvYWQgJiYgIXRoaXMuX2NvbmZpZy5pc0xpdmUpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRUaW1lID0gdGhpcy5fbWVkaWFFbGVtZW50LmN1cnJlbnRUaW1lXG4gICAgICAgIGlmIChtcy5pbmZvLmVuZER0cyA+PSAoY3VycmVudFRpbWUgKyB0aGlzLl9jb25maWcubGF6eUxvYWRNYXhEdXJhdGlvbikgKiAxMDAwKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3Byb2dyZXNzQ2hlY2tlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBMb2cudih0aGlzLlRBRywgJ01heGltdW0gYnVmZmVyaW5nIGR1cmF0aW9uIGV4Y2VlZGVkLCBzdXNwZW5kIHRyYW5zbXV4aW5nIHRhc2snKVxuICAgICAgICAgICAgdGhpcy5fc3VzcGVuZFRyYW5zbXV4ZXIoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5fdHJhbnNtdXhlci5vbihUcmFuc211eGluZ0V2ZW50cy5MT0FESU5HX0NPTVBMRVRFLCAoKSA9PiB7XG4gICAgICB0aGlzLl9tc2VjdGwuZW5kT2ZTdHJlYW0oKVxuICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KFBsYXllckV2ZW50cy5MT0FESU5HX0NPTVBMRVRFKVxuICAgIH0pXG4gICAgdGhpcy5fdHJhbnNtdXhlci5vbihUcmFuc211eGluZ0V2ZW50cy5SRUNPVkVSRURfRUFSTFlfRU9GLCAoKSA9PiB7XG4gICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoUGxheWVyRXZlbnRzLlJFQ09WRVJFRF9FQVJMWV9FT0YpXG4gICAgfSlcbiAgICB0aGlzLl90cmFuc211eGVyLm9uKFRyYW5zbXV4aW5nRXZlbnRzLklPX0VSUk9SLCAoZGV0YWlsLCBpbmZvKSA9PiB7XG4gICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoUGxheWVyRXZlbnRzLkVSUk9SLCBFcnJvclR5cGVzLk5FVFdPUktfRVJST1IsIGRldGFpbCwgaW5mbylcbiAgICB9KVxuICAgIHRoaXMuX3RyYW5zbXV4ZXIub24oVHJhbnNtdXhpbmdFdmVudHMuREVNVVhfRVJST1IsIChkZXRhaWwsIGluZm8pID0+IHtcbiAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChQbGF5ZXJFdmVudHMuRVJST1IsIEVycm9yVHlwZXMuTUVESUFfRVJST1IsIGRldGFpbCwge2NvZGU6IC0xLCBtc2c6IGluZm99KVxuICAgIH0pXG4gICAgdGhpcy5fdHJhbnNtdXhlci5vbihUcmFuc211eGluZ0V2ZW50cy5NRURJQV9JTkZPLCAobWVkaWFJbmZvKSA9PiB7XG4gICAgICB0aGlzLl9tZWRpYUluZm8gPSBtZWRpYUluZm9cbiAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChQbGF5ZXJFdmVudHMuTUVESUFfSU5GTywgT2JqZWN0LmFzc2lnbih7fSwgbWVkaWFJbmZvKSlcbiAgICB9KVxuICAgIHRoaXMuX3RyYW5zbXV4ZXIub24oVHJhbnNtdXhpbmdFdmVudHMuU1RBVElTVElDU19JTkZPLCAoc3RhdEluZm8pID0+IHtcbiAgICAgIHRoaXMuX3N0YXRpc3RpY3NJbmZvID0gdGhpcy5fZmlsbFN0YXRpc3RpY3NJbmZvKHN0YXRJbmZvKVxuICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KFBsYXllckV2ZW50cy5TVEFUSVNUSUNTX0lORk8sIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX3N0YXRpc3RpY3NJbmZvKSlcbiAgICB9KVxuICAgIHRoaXMuX3RyYW5zbXV4ZXIub24oVHJhbnNtdXhpbmdFdmVudHMuUkVDT01NRU5EX1NFRUtQT0lOVCwgKG1pbGxpc2Vjb25kcykgPT4ge1xuICAgICAgaWYgKHRoaXMuX21lZGlhRWxlbWVudCAmJiAhdGhpcy5fY29uZmlnLmFjY3VyYXRlU2Vlaykge1xuICAgICAgICB0aGlzLl9yZXF1ZXN0U2V0VGltZSA9IHRydWVcbiAgICAgICAgdGhpcy5fbWVkaWFFbGVtZW50LmN1cnJlbnRUaW1lID0gbWlsbGlzZWNvbmRzIC8gMTAwMFxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLl90cmFuc211eGVyLm9wZW4oKVxuICB9XG5cbiAgdW5sb2FkICgpIHtcbiAgICBpZiAodGhpcy5fbWVkaWFFbGVtZW50KSB7XG4gICAgICB0aGlzLl9tZWRpYUVsZW1lbnQucGF1c2UoKVxuICAgIH1cbiAgICBpZiAodGhpcy5fbXNlY3RsKSB7XG4gICAgICB0aGlzLl9tc2VjdGwuc2VlaygwKVxuICAgIH1cbiAgICBpZiAodGhpcy5fdHJhbnNtdXhlcikge1xuICAgICAgdGhpcy5fdHJhbnNtdXhlci5jbG9zZSgpXG4gICAgICB0aGlzLl90cmFuc211eGVyLmRlc3Ryb3koKVxuICAgICAgdGhpcy5fdHJhbnNtdXhlciA9IG51bGxcbiAgICB9XG4gIH1cblxuICBwbGF5ICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVkaWFFbGVtZW50LnBsYXkoKVxuICB9XG5cbiAgcGF1c2UgKCkge1xuICAgIHRoaXMuX21lZGlhRWxlbWVudC5wYXVzZSgpXG4gIH1cblxuICBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVcbiAgfVxuXG4gIGdldCBidWZmZXJlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lZGlhRWxlbWVudC5idWZmZXJlZFxuICB9XG5cbiAgZ2V0IGR1cmF0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVkaWFFbGVtZW50LmR1cmF0aW9uXG4gIH1cblxuICBnZXQgdm9sdW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVkaWFFbGVtZW50LnZvbHVtZVxuICB9XG5cbiAgc2V0IHZvbHVtZSAodmFsdWUpIHtcbiAgICB0aGlzLl9tZWRpYUVsZW1lbnQudm9sdW1lID0gdmFsdWVcbiAgfVxuXG4gIGdldCBtdXRlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lZGlhRWxlbWVudC5tdXRlZFxuICB9XG5cbiAgc2V0IG11dGVkIChtdXRlZCkge1xuICAgIHRoaXMuX21lZGlhRWxlbWVudC5tdXRlZCA9IG11dGVkXG4gIH1cblxuICBnZXQgY3VycmVudFRpbWUgKCkge1xuICAgIGlmICh0aGlzLl9tZWRpYUVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tZWRpYUVsZW1lbnQuY3VycmVudFRpbWVcbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIHNldCBjdXJyZW50VGltZSAoc2Vjb25kcykge1xuICAgIGlmICh0aGlzLl9tZWRpYUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2ludGVybmFsU2VlayhzZWNvbmRzKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wZW5kaW5nU2Vla1RpbWUgPSBzZWNvbmRzXG4gICAgfVxuICB9XG5cbiAgZ2V0IG1lZGlhSW5mbyAoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX21lZGlhSW5mbylcbiAgfVxuXG4gIGdldCBzdGF0aXN0aWNzSW5mbyAoKSB7XG4gICAgaWYgKHRoaXMuX3N0YXRpc3RpY3NJbmZvID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3N0YXRpc3RpY3NJbmZvID0ge31cbiAgICB9XG4gICAgdGhpcy5fc3RhdGlzdGljc0luZm8gPSB0aGlzLl9maWxsU3RhdGlzdGljc0luZm8odGhpcy5fc3RhdGlzdGljc0luZm8pXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX3N0YXRpc3RpY3NJbmZvKVxuICB9XG5cbiAgX2ZpbGxTdGF0aXN0aWNzSW5mbyAoc3RhdEluZm8pIHtcbiAgICBzdGF0SW5mby5wbGF5ZXJUeXBlID0gdGhpcy5fdHlwZVxuXG4gICAgaWYgKCEodGhpcy5fbWVkaWFFbGVtZW50IGluc3RhbmNlb2Ygd2luZG93LkhUTUxWaWRlb0VsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gc3RhdEluZm9cbiAgICB9XG5cbiAgICBsZXQgaGFzUXVhbGl0eUluZm8gPSB0cnVlXG4gICAgbGV0IGRlY29kZWQgPSAwXG4gICAgbGV0IGRyb3BwZWQgPSAwXG5cbiAgICBpZiAodGhpcy5fbWVkaWFFbGVtZW50LmdldFZpZGVvUGxheWJhY2tRdWFsaXR5KSB7XG4gICAgICBsZXQgcXVhbGl0eSA9IHRoaXMuX21lZGlhRWxlbWVudC5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eSgpXG4gICAgICBkZWNvZGVkID0gcXVhbGl0eS50b3RhbFZpZGVvRnJhbWVzXG4gICAgICBkcm9wcGVkID0gcXVhbGl0eS5kcm9wcGVkVmlkZW9GcmFtZXNcbiAgICB9IGVsc2UgaWYgKHRoaXMuX21lZGlhRWxlbWVudC53ZWJraXREZWNvZGVkRnJhbWVDb3VudCAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGRlY29kZWQgPSB0aGlzLl9tZWRpYUVsZW1lbnQud2Via2l0RGVjb2RlZEZyYW1lQ291bnRcbiAgICAgIGRyb3BwZWQgPSB0aGlzLl9tZWRpYUVsZW1lbnQud2Via2l0RHJvcHBlZEZyYW1lQ291bnRcbiAgICB9IGVsc2Uge1xuICAgICAgaGFzUXVhbGl0eUluZm8gPSBmYWxzZVxuICAgIH1cblxuICAgIGlmIChoYXNRdWFsaXR5SW5mbykge1xuICAgICAgc3RhdEluZm8uZGVjb2RlZEZyYW1lcyA9IGRlY29kZWRcbiAgICAgIHN0YXRJbmZvLmRyb3BwZWRGcmFtZXMgPSBkcm9wcGVkXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRJbmZvXG4gIH1cblxuICBfb25tc2VVcGRhdGVFbmQgKCkge1xuICAgIGlmICghdGhpcy5fY29uZmlnLmxhenlMb2FkIHx8IHRoaXMuX2NvbmZpZy5pc0xpdmUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBidWZmZXJlZCA9IHRoaXMuX21lZGlhRWxlbWVudC5idWZmZXJlZFxuICAgIGxldCBjdXJyZW50VGltZSA9IHRoaXMuX21lZGlhRWxlbWVudC5jdXJyZW50VGltZVxuICAgIGxldCBjdXJyZW50UmFuZ2VTdGFydCA9IDBcbiAgICBsZXQgY3VycmVudFJhbmdlRW5kID0gMFxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJlZC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHN0YXJ0ID0gYnVmZmVyZWQuc3RhcnQoaSlcbiAgICAgIGxldCBlbmQgPSBidWZmZXJlZC5lbmQoaSlcbiAgICAgIGlmIChzdGFydCA8PSBjdXJyZW50VGltZSAmJiBjdXJyZW50VGltZSA8IGVuZCkge1xuICAgICAgICBjdXJyZW50UmFuZ2VTdGFydCA9IHN0YXJ0XG4gICAgICAgIGN1cnJlbnRSYW5nZUVuZCA9IGVuZFxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjdXJyZW50UmFuZ2VFbmQgPj0gY3VycmVudFRpbWUgKyB0aGlzLl9jb25maWcubGF6eUxvYWRNYXhEdXJhdGlvbiAmJiB0aGlzLl9wcm9ncmVzc0NoZWNrZXIgPT0gbnVsbCkge1xuICAgICAgTG9nLnYodGhpcy5UQUcsICdNYXhpbXVtIGJ1ZmZlcmluZyBkdXJhdGlvbiBleGNlZWRlZCwgc3VzcGVuZCB0cmFuc211eGluZyB0YXNrJylcbiAgICAgIHRoaXMuX3N1c3BlbmRUcmFuc211eGVyKClcbiAgICB9XG4gIH1cblxuICBfb25tc2VCdWZmZXJGdWxsICgpIHtcbiAgICBMb2cudih0aGlzLlRBRywgJ01TRSBTb3VyY2VCdWZmZXIgaXMgZnVsbCwgc3VzcGVuZCB0cmFuc211eGluZyB0YXNrJylcbiAgICBpZiAodGhpcy5fcHJvZ3Jlc3NDaGVja2VyID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3N1c3BlbmRUcmFuc211eGVyKClcbiAgICB9XG4gIH1cblxuICBfc3VzcGVuZFRyYW5zbXV4ZXIgKCkge1xuICAgIGlmICh0aGlzLl90cmFuc211eGVyKSB7XG4gICAgICB0aGlzLl90cmFuc211eGVyLnBhdXNlKClcblxuICAgICAgaWYgKHRoaXMuX3Byb2dyZXNzQ2hlY2tlciA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzQ2hlY2tlciA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLl9jaGVja1Byb2dyZXNzQW5kUmVzdW1lLmJpbmQodGhpcyksIDEwMDApXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2NoZWNrUHJvZ3Jlc3NBbmRSZXN1bWUgKCkge1xuICAgIGxldCBjdXJyZW50VGltZSA9IHRoaXMuX21lZGlhRWxlbWVudC5jdXJyZW50VGltZVxuICAgIGxldCBidWZmZXJlZCA9IHRoaXMuX21lZGlhRWxlbWVudC5idWZmZXJlZFxuXG4gICAgbGV0IG5lZWRSZXN1bWUgPSBmYWxzZVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJlZC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGZyb20gPSBidWZmZXJlZC5zdGFydChpKVxuICAgICAgbGV0IHRvID0gYnVmZmVyZWQuZW5kKGkpXG4gICAgICBpZiAoY3VycmVudFRpbWUgPj0gZnJvbSAmJiBjdXJyZW50VGltZSA8IHRvKSB7XG4gICAgICAgIGlmIChjdXJyZW50VGltZSA+PSB0byAtIHRoaXMuX2NvbmZpZy5sYXp5TG9hZFJlY292ZXJEdXJhdGlvbikge1xuICAgICAgICAgIG5lZWRSZXN1bWUgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmVlZFJlc3VtZSkge1xuICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fcHJvZ3Jlc3NDaGVja2VyKVxuICAgICAgdGhpcy5fcHJvZ3Jlc3NDaGVja2VyID0gbnVsbFxuICAgICAgaWYgKG5lZWRSZXN1bWUpIHtcbiAgICAgICAgTG9nLnYodGhpcy5UQUcsICdDb250aW51ZSBsb2FkaW5nIGZyb20gcGF1c2VkIHBvc2l0aW9uJylcbiAgICAgICAgdGhpcy5fdHJhbnNtdXhlci5yZXN1bWUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9pc1RpbWVwb2ludEJ1ZmZlcmVkIChzZWNvbmRzKSB7XG4gICAgbGV0IGJ1ZmZlcmVkID0gdGhpcy5fbWVkaWFFbGVtZW50LmJ1ZmZlcmVkXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZnJvbSA9IGJ1ZmZlcmVkLnN0YXJ0KGkpXG4gICAgICBsZXQgdG8gPSBidWZmZXJlZC5lbmQoaSlcbiAgICAgIGlmIChzZWNvbmRzID49IGZyb20gJiYgc2Vjb25kcyA8IHRvKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgX2ludGVybmFsU2VlayAoc2Vjb25kcykge1xuICAgIGxldCBkaXJlY3RTZWVrID0gdGhpcy5faXNUaW1lcG9pbnRCdWZmZXJlZChzZWNvbmRzKVxuXG4gICAgbGV0IGRpcmVjdFNlZWtCZWdpbiA9IGZhbHNlXG4gICAgbGV0IGRpcmVjdFNlZWtCZWdpblRpbWUgPSAwXG5cbiAgICBpZiAoc2Vjb25kcyA8IDEuMCAmJiB0aGlzLl9tZWRpYUVsZW1lbnQuYnVmZmVyZWQubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IHZpZGVvQmVnaW5UaW1lID0gdGhpcy5fbWVkaWFFbGVtZW50LmJ1ZmZlcmVkLnN0YXJ0KDApXG4gICAgICBpZiAoKHZpZGVvQmVnaW5UaW1lIDwgMS4wICYmIHNlY29uZHMgPCB2aWRlb0JlZ2luVGltZSkgfHwgQnJvd3Nlci5zYWZhcmkpIHtcbiAgICAgICAgZGlyZWN0U2Vla0JlZ2luID0gdHJ1ZVxuICAgICAgICAvLyBhbHNvIHdvcmthcm91bmQgZm9yIFNhZmFyaTogU2VlayB0byAwIG1heSBjYXVzZSB2aWRlbyBzdHVjaywgdXNlIDAuMSB0byBhdm9pZFxuICAgICAgICBkaXJlY3RTZWVrQmVnaW5UaW1lID0gQnJvd3Nlci5zYWZhcmkgPyAwLjEgOiB2aWRlb0JlZ2luVGltZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXJlY3RTZWVrQmVnaW4pIHsgLy8gc2VlayB0byB2aWRlbyBiZWdpbiwgc2V0IGN1cnJlbnRUaW1lIGRpcmVjdGx5IGlmIGJlZ2luUFRTIGJ1ZmZlcmVkXG4gICAgICB0aGlzLl9yZXF1ZXN0U2V0VGltZSA9IHRydWVcbiAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5jdXJyZW50VGltZSA9IGRpcmVjdFNlZWtCZWdpblRpbWVcbiAgICB9IGVsc2UgaWYgKGRpcmVjdFNlZWspIHsgLy8gYnVmZmVyZWQgcG9zaXRpb25cbiAgICAgIGlmICghdGhpcy5fYWx3YXlzU2Vla0tleWZyYW1lKSB7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RTZXRUaW1lID0gdHJ1ZVxuICAgICAgICB0aGlzLl9tZWRpYUVsZW1lbnQuY3VycmVudFRpbWUgPSBzZWNvbmRzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgaWRyID0gdGhpcy5fbXNlY3RsLmdldE5lYXJlc3RLZXlmcmFtZShNYXRoLmZsb29yKHNlY29uZHMgKiAxMDAwKSlcbiAgICAgICAgdGhpcy5fcmVxdWVzdFNldFRpbWUgPSB0cnVlXG4gICAgICAgIGlmIChpZHIgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5jdXJyZW50VGltZSA9IGlkci5kdHMgLyAxMDAwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fbWVkaWFFbGVtZW50LmN1cnJlbnRUaW1lID0gc2Vjb25kc1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fcHJvZ3Jlc3NDaGVja2VyICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm9ncmVzc0FuZFJlc3VtZSgpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9wcm9ncmVzc0NoZWNrZXIgIT0gbnVsbCkge1xuICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl9wcm9ncmVzc0NoZWNrZXIpXG4gICAgICAgIHRoaXMuX3Byb2dyZXNzQ2hlY2tlciA9IG51bGxcbiAgICAgIH1cbiAgICAgIHRoaXMuX21zZWN0bC5zZWVrKHNlY29uZHMpXG4gICAgICB0aGlzLl90cmFuc211eGVyLnNlZWsoTWF0aC5mbG9vcihzZWNvbmRzICogMTAwMCkpIC8vIGluIG1pbGxpc2Vjb25kc1xuICAgICAgLy8gbm8gbmVlZCB0byBzZXQgbWVkaWFFbGVtZW50LmN1cnJlbnRUaW1lIGlmIG5vbi1hY2N1cmF0ZVNlZWssXG4gICAgICAvLyBqdXN0IHdhaXQgZm9yIHRoZSByZWNvbW1lbmRfc2Vla3BvaW50IGNhbGxiYWNrXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmFjY3VyYXRlU2Vlaykge1xuICAgICAgICB0aGlzLl9yZXF1ZXN0U2V0VGltZSA9IHRydWVcbiAgICAgICAgdGhpcy5fbWVkaWFFbGVtZW50LmN1cnJlbnRUaW1lID0gc2Vjb25kc1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9jaGVja0FuZEFwcGx5VW5idWZmZXJlZFNlZWtwb2ludCAoKSB7XG4gICAgaWYgKHRoaXMuX3NlZWtwb2ludFJlY29yZCkge1xuICAgICAgaWYgKHRoaXMuX3NlZWtwb2ludFJlY29yZC5yZWNvcmRUaW1lIDw9IHRoaXMuX25vdygpIC0gMTAwKSB7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0aGlzLl9tZWRpYUVsZW1lbnQuY3VycmVudFRpbWVcbiAgICAgICAgdGhpcy5fc2Vla3BvaW50UmVjb3JkID0gbnVsbFxuICAgICAgICBpZiAoIXRoaXMuX2lzVGltZXBvaW50QnVmZmVyZWQodGFyZ2V0KSkge1xuICAgICAgICAgIGlmICh0aGlzLl9wcm9ncmVzc0NoZWNrZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9wcm9ncmVzc0NoZWNrZXIpXG4gICAgICAgICAgICB0aGlzLl9wcm9ncmVzc0NoZWNrZXIgPSBudWxsXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIC5jdXJyZW50VGltZSBpcyBjb25zaXN0cyB3aXRoIC5idWZmZXJlZCB0aW1lc3RhbXBcbiAgICAgICAgICAvLyBDaHJvbWUvRWRnZSB1c2UgRFRTLCB3aGlsZSBGaXJlRm94L1NhZmFyaSB1c2UgUFRTXG4gICAgICAgICAgdGhpcy5fbXNlY3RsLnNlZWsodGFyZ2V0KVxuICAgICAgICAgIHRoaXMuX3RyYW5zbXV4ZXIuc2VlayhNYXRoLmZsb29yKHRhcmdldCAqIDEwMDApKVxuICAgICAgICAgIC8vIHNldCBjdXJyZW50VGltZSBpZiBhY2N1cmF0ZVNlZWssIG9yIHdhaXQgZm9yIHJlY29tbWVuZF9zZWVrcG9pbnQgY2FsbGJhY2tcbiAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLmFjY3VyYXRlU2Vlaykge1xuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdFNldFRpbWUgPSB0cnVlXG4gICAgICAgICAgICB0aGlzLl9tZWRpYUVsZW1lbnQuY3VycmVudFRpbWUgPSB0YXJnZXRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuX2NoZWNrQW5kQXBwbHlVbmJ1ZmZlcmVkU2Vla3BvaW50LmJpbmQodGhpcyksIDUwKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9jaGVja0FuZFJlc3VtZVN0dWNrUGxheWJhY2sgKHN0YWxsZWQpIHtcbiAgICBsZXQgbWVkaWEgPSB0aGlzLl9tZWRpYUVsZW1lbnRcbiAgICBpZiAoc3RhbGxlZCB8fCAhdGhpcy5fcmVjZWl2ZWRDYW5QbGF5IHx8IG1lZGlhLnJlYWR5U3RhdGUgPCAyKSB7IC8vIEhBVkVfQ1VSUkVOVF9EQVRBXG4gICAgICBsZXQgYnVmZmVyZWQgPSBtZWRpYS5idWZmZXJlZFxuICAgICAgaWYgKGJ1ZmZlcmVkLmxlbmd0aCA+IDAgJiYgbWVkaWEuY3VycmVudFRpbWUgPCBidWZmZXJlZC5zdGFydCgwKSkge1xuICAgICAgICBMb2cudyh0aGlzLlRBRywgYFBsYXliYWNrIHNlZW1zIHN0dWNrIGF0ICR7bWVkaWEuY3VycmVudFRpbWV9LCBzZWVrIHRvICR7YnVmZmVyZWQuc3RhcnQoMCl9YClcbiAgICAgICAgdGhpcy5fcmVxdWVzdFNldFRpbWUgPSB0cnVlXG4gICAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5jdXJyZW50VGltZSA9IGJ1ZmZlcmVkLnN0YXJ0KDApXG4gICAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHRoaXMuZS5vbnZQcm9ncmVzcylcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUGxheWJhY2sgZGlkbid0IHN0dWNrLCByZW1vdmUgcHJvZ3Jlc3MgZXZlbnQgbGlzdGVuZXJcbiAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHRoaXMuZS5vbnZQcm9ncmVzcylcbiAgICB9XG4gIH1cblxuICBfb252TG9hZGVkTWV0YWRhdGEgKGUpIHtcbiAgICBpZiAodGhpcy5fcGVuZGluZ1NlZWtUaW1lICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5jdXJyZW50VGltZSA9IHRoaXMuX3BlbmRpbmdTZWVrVGltZVxuICAgICAgdGhpcy5fcGVuZGluZ1NlZWtUaW1lID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIF9vbnZTZWVraW5nIChlKSB7IC8vIGhhbmRsZSBzZWVraW5nIHJlcXVlc3QgZnJvbSBicm93c2VyJ3MgcHJvZ3Jlc3MgYmFyXG4gICAgbGV0IHRhcmdldCA9IHRoaXMuX21lZGlhRWxlbWVudC5jdXJyZW50VGltZVxuICAgIGxldCBidWZmZXJlZCA9IHRoaXMuX21lZGlhRWxlbWVudC5idWZmZXJlZFxuXG4gICAgaWYgKHRoaXMuX3JlcXVlc3RTZXRUaW1lKSB7XG4gICAgICB0aGlzLl9yZXF1ZXN0U2V0VGltZSA9IGZhbHNlXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0IDwgMS4wICYmIGJ1ZmZlcmVkLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIHNlZWsgdG8gdmlkZW8gYmVnaW4sIHNldCBjdXJyZW50VGltZSBkaXJlY3RseSBpZiBiZWdpblBUUyBidWZmZXJlZFxuICAgICAgbGV0IHZpZGVvQmVnaW5UaW1lID0gYnVmZmVyZWQuc3RhcnQoMClcbiAgICAgIGlmICgodmlkZW9CZWdpblRpbWUgPCAxLjAgJiYgdGFyZ2V0IDwgdmlkZW9CZWdpblRpbWUpIHx8IEJyb3dzZXIuc2FmYXJpKSB7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RTZXRUaW1lID0gdHJ1ZVxuICAgICAgICAvLyBhbHNvIHdvcmthcm91bmQgZm9yIFNhZmFyaTogU2VlayB0byAwIG1heSBjYXVzZSB2aWRlbyBzdHVjaywgdXNlIDAuMSB0byBhdm9pZFxuICAgICAgICB0aGlzLl9tZWRpYUVsZW1lbnQuY3VycmVudFRpbWUgPSBCcm93c2VyLnNhZmFyaSA/IDAuMSA6IHZpZGVvQmVnaW5UaW1lXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9pc1RpbWVwb2ludEJ1ZmZlcmVkKHRhcmdldCkpIHtcbiAgICAgIGlmICh0aGlzLl9hbHdheXNTZWVrS2V5ZnJhbWUpIHtcbiAgICAgICAgbGV0IGlkciA9IHRoaXMuX21zZWN0bC5nZXROZWFyZXN0S2V5ZnJhbWUoTWF0aC5mbG9vcih0YXJnZXQgKiAxMDAwKSlcbiAgICAgICAgaWYgKGlkciAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fcmVxdWVzdFNldFRpbWUgPSB0cnVlXG4gICAgICAgICAgdGhpcy5fbWVkaWFFbGVtZW50LmN1cnJlbnRUaW1lID0gaWRyLmR0cyAvIDEwMDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX3Byb2dyZXNzQ2hlY2tlciAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvZ3Jlc3NBbmRSZXN1bWUoKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fc2Vla3BvaW50UmVjb3JkID0ge1xuICAgICAgc2Vla1BvaW50OiB0YXJnZXQsXG4gICAgICByZWNvcmRUaW1lOiB0aGlzLl9ub3coKVxuICAgIH1cbiAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzLl9jaGVja0FuZEFwcGx5VW5idWZmZXJlZFNlZWtwb2ludC5iaW5kKHRoaXMpLCA1MClcbiAgfVxuXG4gIF9vbnZDYW5QbGF5IChlKSB7XG4gICAgdGhpcy5fcmVjZWl2ZWRDYW5QbGF5ID0gdHJ1ZVxuICAgIHRoaXMuX21lZGlhRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjYW5wbGF5JywgdGhpcy5lLm9udkNhblBsYXkpXG4gIH1cblxuICBfb252U3RhbGxlZCAoZSkge1xuICAgIHRoaXMuX2NoZWNrQW5kUmVzdW1lU3R1Y2tQbGF5YmFjayh0cnVlKVxuICB9XG5cbiAgX29udlByb2dyZXNzIChlKSB7XG4gICAgdGhpcy5fY2hlY2tBbmRSZXN1bWVTdHVja1BsYXliYWNrKClcbiAgfVxuXG4gIGdldCBpc0RlZmluaXRpb25EYXRhUmVhZHkgKCkge1xuICAgIGNvbnN0IG1pblNlZ21lbnRMZW4gPSAxMFxuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl90ZW1wUGVuZGluZ1NlZ21lbnRzKS5ldmVyeSgoa2V5KSA9PiB0aGlzLl90ZW1wUGVuZGluZ1NlZ21lbnRzW2tleV0ubGVuZ3RoID49IG1pblNlZ21lbnRMZW4pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmx2UGxheWVyXG4iLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnO1xuaW1wb3J0IFBsYXllckV2ZW50cyBmcm9tICcuL3BsYXllci1ldmVudHMuanMnO1xuaW1wb3J0IHtjcmVhdGVEZWZhdWx0Q29uZmlnfSBmcm9tICcuLi9jb25maWcuanMnO1xuaW1wb3J0IHtJbnZhbGlkQXJndW1lbnRFeGNlcHRpb24sIElsbGVnYWxTdGF0ZUV4Y2VwdGlvbn0gZnJvbSAnLi4vdXRpbHMvZXhjZXB0aW9uLmpzJztcblxuLy8gUGxheWVyIHdyYXBwZXIgZm9yIGJyb3dzZXIncyBuYXRpdmUgcGxheWVyIChIVE1MVmlkZW9FbGVtZW50KSB3aXRob3V0IE1lZGlhU291cmNlIHNyYy4gXG5jbGFzcyBOYXRpdmVQbGF5ZXIge1xuXG4gICAgY29uc3RydWN0b3IobWVkaWFEYXRhU291cmNlLCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5UQUcgPSAnTmF0aXZlUGxheWVyJztcbiAgICAgICAgdGhpcy5fdHlwZSA9ICdOYXRpdmVQbGF5ZXInO1xuICAgICAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNyZWF0ZURlZmF1bHRDb25maWcoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuX2NvbmZpZywgY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZWRpYURhdGFTb3VyY2UudHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZmx2Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEV4Y2VwdGlvbignTmF0aXZlUGxheWVyIGRvZXNcXCd0IHN1cHBvcnQgZmx2IE1lZGlhRGF0YVNvdXJjZSBpbnB1dCEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVkaWFEYXRhU291cmNlLmhhc093blByb3BlcnR5KCdzZWdtZW50cycpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uKGBOYXRpdmVQbGF5ZXIoJHttZWRpYURhdGFTb3VyY2UudHlwZX0pIGRvZXNuJ3Qgc3VwcG9ydCBtdWx0aXBhcnQgcGxheWJhY2shYCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmUgPSB7XG4gICAgICAgICAgICBvbnZMb2FkZWRNZXRhZGF0YTogdGhpcy5fb252TG9hZGVkTWV0YWRhdGEuYmluZCh0aGlzKVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX3BlbmRpbmdTZWVrVGltZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N0YXRpc3RpY3NSZXBvcnRlciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fbWVkaWFEYXRhU291cmNlID0gbWVkaWFEYXRhU291cmNlO1xuICAgICAgICB0aGlzLl9tZWRpYUVsZW1lbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9tZWRpYUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMudW5sb2FkKCk7XG4gICAgICAgICAgICB0aGlzLmRldGFjaE1lZGlhRWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX21lZGlhRGF0YVNvdXJjZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoZXZlbnQgPT09IFBsYXllckV2ZW50cy5NRURJQV9JTkZPKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbWVkaWFFbGVtZW50ICE9IG51bGwgJiYgdGhpcy5fbWVkaWFFbGVtZW50LnJlYWR5U3RhdGUgIT09IDApIHsgIC8vIEhBVkVfTk9USElOR1xuICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoUGxheWVyRXZlbnRzLk1FRElBX0lORk8sIHRoaXMubWVkaWFJbmZvKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChldmVudCA9PT0gUGxheWVyRXZlbnRzLlNUQVRJU1RJQ1NfSU5GTykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21lZGlhRWxlbWVudCAhPSBudWxsICYmIHRoaXMuX21lZGlhRWxlbWVudC5yZWFkeVN0YXRlICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChQbGF5ZXJFdmVudHMuU1RBVElTVElDU19JTkZPLCB0aGlzLnN0YXRpc3RpY3NJbmZvKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lbWl0dGVyLmFkZExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgYXR0YWNoTWVkaWFFbGVtZW50KG1lZGlhRWxlbWVudCkge1xuICAgICAgICB0aGlzLl9tZWRpYUVsZW1lbnQgPSBtZWRpYUVsZW1lbnQ7XG4gICAgICAgIG1lZGlhRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsIHRoaXMuZS5vbnZMb2FkZWRNZXRhZGF0YSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdTZWVrVGltZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5jdXJyZW50VGltZSA9IHRoaXMuX3BlbmRpbmdTZWVrVGltZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nU2Vla1RpbWUgPSBudWxsO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIElFMTEgbWF5IHRocm93IEludmFsaWRTdGF0ZUVycm9yIGlmIHJlYWR5U3RhdGUgPT09IDBcbiAgICAgICAgICAgICAgICAvLyBEZWZlciBzZXQgY3VycmVudFRpbWUgb3BlcmF0aW9uIGFmdGVyIGxvYWRlZG1ldGFkYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXRhY2hNZWRpYUVsZW1lbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tZWRpYUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5zcmMgPSAnJztcbiAgICAgICAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3NyYycpO1xuICAgICAgICAgICAgdGhpcy5fbWVkaWFFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgdGhpcy5lLm9udkxvYWRlZE1ldGFkYXRhKTtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N0YXRpc3RpY3NSZXBvcnRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl9zdGF0aXN0aWNzUmVwb3J0ZXIpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGlzdGljc1JlcG9ydGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvYWQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbWVkaWFFbGVtZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCdIVE1MTWVkaWFFbGVtZW50IG11c3QgYmUgYXR0YWNoZWQgYmVmb3JlIGxvYWQoKSEnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tZWRpYUVsZW1lbnQuc3JjID0gdGhpcy5fbWVkaWFEYXRhU291cmNlLnVybDtcblxuICAgICAgICBpZiAodGhpcy5fbWVkaWFFbGVtZW50LnJlYWR5U3RhdGUgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9tZWRpYUVsZW1lbnQuY3VycmVudFRpbWUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbWVkaWFFbGVtZW50LnByZWxvYWQgPSAnYXV0byc7XG4gICAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5sb2FkKCk7XG4gICAgICAgIHRoaXMuX3N0YXRpc3RpY3NSZXBvcnRlciA9IHdpbmRvdy5zZXRJbnRlcnZhbChcbiAgICAgICAgICAgIHRoaXMuX3JlcG9ydFN0YXRpc3RpY3NJbmZvLmJpbmQodGhpcyksXG4gICAgICAgIHRoaXMuX2NvbmZpZy5zdGF0aXN0aWNzSW5mb1JlcG9ydEludGVydmFsKTtcbiAgICB9XG5cbiAgICB1bmxvYWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tZWRpYUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5zcmMgPSAnJztcbiAgICAgICAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3NyYycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zdGF0aXN0aWNzUmVwb3J0ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fc3RhdGlzdGljc1JlcG9ydGVyKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRpc3RpY3NSZXBvcnRlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwbGF5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWVkaWFFbGVtZW50LnBsYXkoKTtcbiAgICB9XG5cbiAgICBwYXVzZSgpIHtcbiAgICAgICAgdGhpcy5fbWVkaWFFbGVtZW50LnBhdXNlKCk7XG4gICAgfVxuXG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgIH1cblxuICAgIGdldCBidWZmZXJlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21lZGlhRWxlbWVudC5idWZmZXJlZDtcbiAgICB9XG5cbiAgICBnZXQgZHVyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZWRpYUVsZW1lbnQuZHVyYXRpb247XG4gICAgfVxuXG4gICAgZ2V0IHZvbHVtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21lZGlhRWxlbWVudC52b2x1bWU7XG4gICAgfVxuXG4gICAgc2V0IHZvbHVtZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tZWRpYUVsZW1lbnQudm9sdW1lID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IG11dGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWVkaWFFbGVtZW50Lm11dGVkO1xuICAgIH1cblxuICAgIHNldCBtdXRlZChtdXRlZCkge1xuICAgICAgICB0aGlzLl9tZWRpYUVsZW1lbnQubXV0ZWQgPSBtdXRlZDtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tZWRpYUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tZWRpYUVsZW1lbnQuY3VycmVudFRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgc2V0IGN1cnJlbnRUaW1lKHNlY29uZHMpIHtcbiAgICAgICAgaWYgKHRoaXMuX21lZGlhRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fbWVkaWFFbGVtZW50LmN1cnJlbnRUaW1lID0gc2Vjb25kcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdTZWVrVGltZSA9IHNlY29uZHM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgbWVkaWFJbmZvKCkge1xuICAgICAgICBsZXQgbWVkaWFQcmVmaXggPSAodGhpcy5fbWVkaWFFbGVtZW50IGluc3RhbmNlb2YgSFRNTEF1ZGlvRWxlbWVudCkgPyAnYXVkaW8vJyA6ICd2aWRlby8nO1xuICAgICAgICBsZXQgaW5mbyA9IHtcbiAgICAgICAgICAgIG1pbWVUeXBlOiBtZWRpYVByZWZpeCArIHRoaXMuX21lZGlhRGF0YVNvdXJjZS50eXBlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLl9tZWRpYUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGluZm8uZHVyYXRpb24gPSBNYXRoLmZsb29yKHRoaXMuX21lZGlhRWxlbWVudC5kdXJhdGlvbiAqIDEwMDApO1xuICAgICAgICAgICAgaWYgKHRoaXMuX21lZGlhRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpbmZvLndpZHRoID0gdGhpcy5fbWVkaWFFbGVtZW50LnZpZGVvV2lkdGg7XG4gICAgICAgICAgICAgICAgaW5mby5oZWlnaHQgPSB0aGlzLl9tZWRpYUVsZW1lbnQudmlkZW9IZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgZ2V0IHN0YXRpc3RpY3NJbmZvKCkge1xuICAgICAgICBsZXQgaW5mbyA9IHtcbiAgICAgICAgICAgIHBsYXllclR5cGU6IHRoaXMuX3R5cGUsXG4gICAgICAgICAgICB1cmw6IHRoaXMuX21lZGlhRGF0YVNvdXJjZS51cmxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoISh0aGlzLl9tZWRpYUVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGFzUXVhbGl0eUluZm8gPSB0cnVlO1xuICAgICAgICBsZXQgZGVjb2RlZCA9IDA7XG4gICAgICAgIGxldCBkcm9wcGVkID0gMDtcblxuICAgICAgICBpZiAodGhpcy5fbWVkaWFFbGVtZW50LmdldFZpZGVvUGxheWJhY2tRdWFsaXR5KSB7XG4gICAgICAgICAgICBsZXQgcXVhbGl0eSA9IHRoaXMuX21lZGlhRWxlbWVudC5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eSgpO1xuICAgICAgICAgICAgZGVjb2RlZCA9IHF1YWxpdHkudG90YWxWaWRlb0ZyYW1lcztcbiAgICAgICAgICAgIGRyb3BwZWQgPSBxdWFsaXR5LmRyb3BwZWRWaWRlb0ZyYW1lcztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9tZWRpYUVsZW1lbnQud2Via2l0RGVjb2RlZEZyYW1lQ291bnQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWNvZGVkID0gdGhpcy5fbWVkaWFFbGVtZW50LndlYmtpdERlY29kZWRGcmFtZUNvdW50O1xuICAgICAgICAgICAgZHJvcHBlZCA9IHRoaXMuX21lZGlhRWxlbWVudC53ZWJraXREcm9wcGVkRnJhbWVDb3VudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhhc1F1YWxpdHlJbmZvID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzUXVhbGl0eUluZm8pIHtcbiAgICAgICAgICAgIGluZm8uZGVjb2RlZEZyYW1lcyA9IGRlY29kZWQ7XG4gICAgICAgICAgICBpbmZvLmRyb3BwZWRGcmFtZXMgPSBkcm9wcGVkO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICBfb252TG9hZGVkTWV0YWRhdGEoZSkge1xuICAgICAgICBpZiAodGhpcy5fcGVuZGluZ1NlZWtUaW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhRWxlbWVudC5jdXJyZW50VGltZSA9IHRoaXMuX3BlbmRpbmdTZWVrVGltZTtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdTZWVrVGltZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KFBsYXllckV2ZW50cy5NRURJQV9JTkZPLCB0aGlzLm1lZGlhSW5mbyk7XG4gICAgfVxuXG4gICAgX3JlcG9ydFN0YXRpc3RpY3NJbmZvKCkge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoUGxheWVyRXZlbnRzLlNUQVRJU1RJQ1NfSU5GTywgdGhpcy5zdGF0aXN0aWNzSW5mbyk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5hdGl2ZVBsYXllcjsiLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtMb2FkZXJFcnJvcnN9IGZyb20gJy4uL2lvL2xvYWRlci5qcyc7XG5pbXBvcnQgRGVtdXhFcnJvcnMgZnJvbSAnLi4vZGVtdXgvZGVtdXgtZXJyb3JzLmpzJztcblxuZXhwb3J0IGNvbnN0IEVycm9yVHlwZXMgPSB7XG4gICAgTkVUV09SS19FUlJPUjogJ05ldHdvcmtFcnJvcicsXG4gICAgTUVESUFfRVJST1I6ICdNZWRpYUVycm9yJyxcbiAgICBPVEhFUl9FUlJPUjogJ090aGVyRXJyb3InXG59O1xuXG5leHBvcnQgY29uc3QgRXJyb3JEZXRhaWxzID0ge1xuICAgIE5FVFdPUktfRVhDRVBUSU9OOiBMb2FkZXJFcnJvcnMuRVhDRVBUSU9OLFxuICAgIE5FVFdPUktfU1RBVFVTX0NPREVfSU5WQUxJRDogTG9hZGVyRXJyb3JzLkhUVFBfU1RBVFVTX0NPREVfSU5WQUxJRCxcbiAgICBORVRXT1JLX1RJTUVPVVQ6IExvYWRlckVycm9ycy5DT05ORUNUSU5HX1RJTUVPVVQsXG4gICAgTkVUV09SS19VTlJFQ09WRVJBQkxFX0VBUkxZX0VPRjogTG9hZGVyRXJyb3JzLlVOUkVDT1ZFUkFCTEVfRUFSTFlfRU9GLFxuXG4gICAgTUVESUFfTVNFX0VSUk9SOiAnTWVkaWFNU0VFcnJvcicsXG5cbiAgICBNRURJQV9GT1JNQVRfRVJST1I6IERlbXV4RXJyb3JzLkZPUk1BVF9FUlJPUixcbiAgICBNRURJQV9GT1JNQVRfVU5TVVBQT1JURUQ6IERlbXV4RXJyb3JzLkZPUk1BVF9VTlNVUFBPUlRFRCxcbiAgICBNRURJQV9DT0RFQ19VTlNVUFBPUlRFRDogRGVtdXhFcnJvcnMuQ09ERUNfVU5TVVBQT1JURURcbn07IiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmNvbnN0IFBsYXllckV2ZW50cyA9IHtcbiAgICBFUlJPUjogJ2Vycm9yJyxcbiAgICBMT0FESU5HX0NPTVBMRVRFOiAnbG9hZGluZ19jb21wbGV0ZScsXG4gICAgUkVDT1ZFUkVEX0VBUkxZX0VPRjogJ3JlY292ZXJlZF9lYXJseV9lb2YnLFxuICAgIE1FRElBX0lORk86ICdtZWRpYV9pbmZvJyxcbiAgICBTVEFUSVNUSUNTX0lORk86ICdzdGF0aXN0aWNzX2luZm8nXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXJFdmVudHM7IiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgbW9kaWZpZWQgZnJvbSBkYWlseW1vdGlvbidzIGhscy5qcyBsaWJyYXJ5IChobHMuanMvc3JjL2hlbHBlci9hYWMuanMpXG4gKiBAYXV0aG9yIHpoZW5nIHFpYW4gPHhxcUB4cXEuaW0+XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmNsYXNzIEFBQyB7XG5cbiAgICBzdGF0aWMgZ2V0U2lsZW50RnJhbWUoY29kZWMsIGNoYW5uZWxDb3VudCkge1xuICAgICAgICBpZiAoY29kZWMgPT09ICdtcDRhLjQwLjInKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgTEMtQUFDXG4gICAgICAgICAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIzLCAweDgwXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgyMSwgMHgwMCwgMHg0OSwgMHg5MCwgMHgwMiwgMHgxOSwgMHgwMCwgMHgyMywgMHg4MF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4OGVdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgwLCAweDJjLCAweDgwLCAweDA4LCAweDAyLCAweDM4XSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgzOF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MDAsIDB4YjIsIDB4MDAsIDB4MjAsIDB4MDgsIDB4ZTBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBIRS1BQUMgKG1wNGEuNDAuNSAvIG1wNGEuNDAuMjkpXG4gICAgICAgICAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gZmZtcGVnIC15IC1mIGxhdmZpIC1pIFwiYWV2YWxzcmM9MDpkPTAuMDVcIiAtYzphIGxpYmZka19hYWMgLXByb2ZpbGU6YSBhYWNfaGUgLWI6YSA0ayBvdXRwdXQuYWFjICYmIGhleGR1bXAgLXYgLWUgJzE2LzEgXCIweCV4LFwiIFwiXFxuXCInIC12IG91dHB1dC5hYWNcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg0ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDFjLCAweDYsIDB4ZjEsIDB4YzEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAvLyBmZm1wZWcgLXkgLWYgbGF2ZmkgLWkgXCJhZXZhbHNyYz0wfDA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlX3YyIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDEsIDB4NDAsIDB4MjIsIDB4ODAsIDB4YTMsIDB4NWUsIDB4ZTYsIDB4ODAsIDB4YmEsIDB4OCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDk1LCAweDAsIDB4NiwgMHhmMSwgMHhhMSwgMHhhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVlXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMykge1xuICAgICAgICAgICAgICAgIC8vIGZmbXBlZyAteSAtZiBsYXZmaSAtaSBcImFldmFsc3JjPTB8MHwwOmQ9MC4wNVwiIC1jOmEgbGliZmRrX2FhYyAtcHJvZmlsZTphIGFhY19oZV92MiAtYjphIDRrIG91dHB1dC5hYWMgJiYgaGV4ZHVtcCAtdiAtZSAnMTYvMSBcIjB4JXgsXCIgXCJcXG5cIicgLXYgb3V0cHV0LmFhY1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgxLCAweDQwLCAweDIyLCAweDgwLCAweGEzLCAweDVlLCAweGU2LCAweDgwLCAweGJhLCAweDgsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHg5NSwgMHgwLCAweDYsIDB4ZjEsIDB4YTEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBQUM7IiwiLypcbiAqIENvcHlyaWdodCAoQykgMjAxNiBCaWxpYmlsaS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgZGVyaXZlZCBmcm9tIGRhaWx5bW90aW9uJ3MgaGxzLmpzIGxpYnJhcnkgKGhscy5qcy9zcmMvcmVtdXgvbXA0LWdlbmVyYXRvci5qcylcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gIE1QNCBib3hlcyBnZW5lcmF0b3IgZm9yIElTTyBCTUZGIChJU08gQmFzZSBNZWRpYSBGaWxlIEZvcm1hdCwgZGVmaW5lZCBpbiBJU08vSUVDIDE0NDk2LTEyKVxuY2xhc3MgTVA0IHtcbiAgc3RhdGljIGluaXQgKCkge1xuICAgIE1QNC50eXBlcyA9IHtcbiAgICAgIGF2YzE6IFtdLFxuICAgICAgYXZjQzogW10sXG4gICAgICBidHJ0OiBbXSxcbiAgICAgIGRpbmY6IFtdLFxuICAgICAgZHJlZjogW10sXG4gICAgICBlc2RzOiBbXSxcbiAgICAgIGZ0eXA6IFtdLFxuICAgICAgaGRscjogW10sXG4gICAgICBtZGF0OiBbXSxcbiAgICAgIG1kaGQ6IFtdLFxuICAgICAgbWRpYTogW10sXG4gICAgICBtZmhkOiBbXSxcbiAgICAgIG1pbmY6IFtdLFxuICAgICAgbW9vZjogW10sXG4gICAgICBtb292OiBbXSxcbiAgICAgIG1wNGE6IFtdLFxuICAgICAgbXZleDogW10sXG4gICAgICBtdmhkOiBbXSxcbiAgICAgIHNkdHA6IFtdLFxuICAgICAgc3RibDogW10sXG4gICAgICBzdGNvOiBbXSxcbiAgICAgIHN0c2M6IFtdLFxuICAgICAgc3RzZDogW10sXG4gICAgICBzdHN6OiBbXSxcbiAgICAgIHN0dHM6IFtdLFxuICAgICAgdGZkdDogW10sXG4gICAgICB0ZmhkOiBbXSxcbiAgICAgIHRyYWY6IFtdLFxuICAgICAgdHJhazogW10sXG4gICAgICB0cnVuOiBbXSxcbiAgICAgIHRyZXg6IFtdLFxuICAgICAgdGtoZDogW10sXG4gICAgICB2bWhkOiBbXSxcbiAgICAgIHNtaGQ6IFtdLFxuICAgICAgJy5tcDMnOiBbXVxuICAgIH1cblxuICAgIGZvciAobGV0IG5hbWUgaW4gTVA0LnR5cGVzKSB7XG4gICAgICBpZiAoTVA0LnR5cGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIE1QNC50eXBlc1tuYW1lXSA9IFtcbiAgICAgICAgICBuYW1lLmNoYXJDb2RlQXQoMCksXG4gICAgICAgICAgbmFtZS5jaGFyQ29kZUF0KDEpLFxuICAgICAgICAgIG5hbWUuY2hhckNvZGVBdCgyKSxcbiAgICAgICAgICBuYW1lLmNoYXJDb2RlQXQoMylcbiAgICAgICAgXVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBjb25zdGFudHMgPSBNUDQuY29uc3RhbnRzID0ge31cblxuICAgIGNvbnN0YW50cy5GVFlQID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHg2OSwgMHg3MywgMHg2RiwgMHg2RCwgLy8gbWFqb3JfYnJhbmQ6IGlzb21cbiAgICAgIDB4MCwgMHgwLCAweDAsIDB4MSwgLy8gbWlub3JfdmVyc2lvbjogMHgwMVxuICAgICAgMHg2OSwgMHg3MywgMHg2RiwgMHg2RCwgLy8gaXNvbVxuICAgICAgMHg2MSwgMHg3NiwgMHg2MywgMHgzMSAvLyBhdmMxXG4gICAgXSlcblxuICAgIGNvbnN0YW50cy5TVFNEX1BSRUZJWCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSAvLyBlbnRyeV9jb3VudFxuICAgIF0pXG5cbiAgICBjb25zdGFudHMuU1RUUyA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBlbnRyeV9jb3VudFxuICAgIF0pXG5cbiAgICBjb25zdGFudHMuU1RTQyA9IGNvbnN0YW50cy5TVENPID0gY29uc3RhbnRzLlNUVFNcblxuICAgIGNvbnN0YW50cy5TVFNaID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdmVyc2lvbigwKSArIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBzYW1wbGVfc2l6ZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBzYW1wbGVfY291bnRcbiAgICBdKVxuXG4gICAgY29uc3RhbnRzLkhETFJfVklERU8gPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAweDc2LCAweDY5LCAweDY0LCAweDY1LCAvLyBoYW5kbGVyX3R5cGU6ICd2aWRlJ1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQ6IDMgKiA0IGJ5dGVzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4NTYsIDB4NjksIDB4NjQsIDB4NjUsXG4gICAgICAweDZGLCAweDQ4LCAweDYxLCAweDZFLFxuICAgICAgMHg2NCwgMHg2QywgMHg2NSwgMHg3MiwgMHgwMCAvLyBuYW1lOiBWaWRlb0hhbmRsZXJcbiAgICBdKVxuXG4gICAgY29uc3RhbnRzLkhETFJfQVVESU8gPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAweDczLCAweDZGLCAweDc1LCAweDZFLCAvLyBoYW5kbGVyX3R5cGU6ICdzb3VuJ1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQ6IDMgKiA0IGJ5dGVzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4NTMsIDB4NkYsIDB4NzUsIDB4NkUsXG4gICAgICAweDY0LCAweDQ4LCAweDYxLCAweDZFLFxuICAgICAgMHg2NCwgMHg2QywgMHg2NSwgMHg3MiwgMHgwMCAvLyBuYW1lOiBTb3VuZEhhbmRsZXJcbiAgICBdKVxuXG4gICAgY29uc3RhbnRzLkRSRUYgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGVudHJ5X2NvdW50XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDBDLCAvLyBlbnRyeV9zaXplXG4gICAgICAweDc1LCAweDcyLCAweDZDLCAweDIwLCAvLyB0eXBlICd1cmwgJ1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSAvLyB2ZXJzaW9uKDApICsgZmxhZ3NcbiAgICBdKVxuXG4gICAgLy8gU291bmQgbWVkaWEgaGVhZGVyXG4gICAgY29uc3RhbnRzLlNNSEQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gYmFsYW5jZSgyKSArIHJlc2VydmVkKDIpXG4gICAgXSlcblxuICAgIC8vIHZpZGVvIG1lZGlhIGhlYWRlclxuICAgIGNvbnN0YW50cy5WTUhEID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gdmVyc2lvbigwKSArIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAvLyBncmFwaGljc21vZGU6IDIgYnl0ZXNcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG9wY29sb3I6IDMgKiAyIGJ5dGVzXG4gICAgICAweDAwLCAweDAwXG4gICAgXSlcbiAgfVxuXG4gIC8vIEdlbmVyYXRlIGEgYm94XG4gIHN0YXRpYyBib3ggKHR5cGUpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgcmVzdWx0ID0gbnVsbFxuICAgIGxldCBkYXRhcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgICBsZXQgYXJyYXlDb3VudCA9IGRhdGFzLmxlbmd0aFxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheUNvdW50OyBpKyspIHtcbiAgICAgIHNpemUgKz0gZGF0YXNbaV0uYnl0ZUxlbmd0aFxuICAgIH1cblxuICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHNpemUpXG4gICAgcmVzdWx0WzBdID0gKHNpemUgPj4+IDI0KSAmIDB4RkYgLy8gc2l6ZVxuICAgIHJlc3VsdFsxXSA9IChzaXplID4+PiAxNikgJiAweEZGXG4gICAgcmVzdWx0WzJdID0gKHNpemUgPj4+IDgpICYgMHhGRlxuICAgIHJlc3VsdFszXSA9IChzaXplKSAmIDB4RkZcblxuICAgIHJlc3VsdC5zZXQodHlwZSwgNCkgLy8gdHlwZVxuXG4gICAgbGV0IG9mZnNldCA9IDhcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Q291bnQ7IGkrKykgeyAvLyBkYXRhIGJvZHlcbiAgICAgIHJlc3VsdC5zZXQoZGF0YXNbaV0sIG9mZnNldClcbiAgICAgIG9mZnNldCArPSBkYXRhc1tpXS5ieXRlTGVuZ3RoXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLy8gZW1pdCBmdHlwICYgbW9vdlxuICBzdGF0aWMgZ2VuZXJhdGVJbml0U2VnbWVudCAobWV0YSkge1xuICAgIGxldCBmdHlwID0gTVA0LmJveChNUDQudHlwZXMuZnR5cCwgTVA0LmNvbnN0YW50cy5GVFlQKVxuICAgIGxldCBtb292ID0gTVA0Lm1vb3YobWV0YSlcblxuICAgIGxldCByZXN1bHQgPSBuZXcgVWludDhBcnJheShmdHlwLmJ5dGVMZW5ndGggKyBtb292LmJ5dGVMZW5ndGgpXG4gICAgcmVzdWx0LnNldChmdHlwLCAwKVxuICAgIHJlc3VsdC5zZXQobW9vdiwgZnR5cC5ieXRlTGVuZ3RoKVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8vIE1vdmllIG1ldGFkYXRhIGJveFxuICBzdGF0aWMgbW9vdiAobWV0YSkge1xuICAgIGxldCBtdmhkID0gTVA0Lm12aGQobWV0YS50aW1lc2NhbGUsIG1ldGEuZHVyYXRpb24pXG4gICAgbGV0IHRyYWsgPSBNUDQudHJhayhtZXRhKVxuICAgIGxldCBtdmV4ID0gTVA0Lm12ZXgobWV0YSlcbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubW9vdiwgbXZoZCwgdHJhaywgbXZleClcbiAgfVxuXG4gIC8vIE1vdmllIGhlYWRlciBib3hcbiAgc3RhdGljIG12aGQgKHRpbWVzY2FsZSwgZHVyYXRpb24pIHtcbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubXZoZCwgbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdmVyc2lvbigwKSArIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1lXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtb2RpZmljYXRpb25fdGltZVxuICAgICAgKHRpbWVzY2FsZSA+Pj4gMjQpICYgMHhGRiwgLy8gdGltZXNjYWxlOiA0IGJ5dGVzXG4gICAgICAodGltZXNjYWxlID4+PiAxNikgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSA+Pj4gOCkgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBkdXJhdGlvbjogNCBieXRlc1xuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIFByZWZlcnJlZCByYXRlOiAxLjBcbiAgICAgIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIFByZWZlcnJlZFZvbHVtZSgxLjAsIDJieXRlcykgKyByZXNlcnZlZCgyYnl0ZXMpXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZDogNCArIDQgYnl0ZXNcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyAtLS0tYmVnaW4gY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gLS0tLWJlZ2luIHByZV9kZWZpbmVkIDYgKiA0IGJ5dGVzLS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgcHJlX2RlZmluZWQgNiAqIDQgYnl0ZXMtLS0tXG4gICAgICAweEZGLCAweEZGLCAweEZGLCAweEZGIC8vIG5leHRfdHJhY2tfSURcbiAgICBdKSlcbiAgfVxuXG4gIC8vIFRyYWNrIGJveFxuICBzdGF0aWMgdHJhayAobWV0YSkge1xuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50cmFrLCBNUDQudGtoZChtZXRhKSwgTVA0Lm1kaWEobWV0YSkpXG4gIH1cblxuICAvLyBUcmFjayBoZWFkZXIgYm94XG4gIHN0YXRpYyB0a2hkIChtZXRhKSB7XG4gICAgbGV0IHRyYWNrSWQgPSBtZXRhLmlkLCBkdXJhdGlvbiA9IG1ldGEuZHVyYXRpb25cbiAgICBsZXQgd2lkdGggPSBtZXRhLnByZXNlbnRXaWR0aCwgaGVpZ2h0ID0gbWV0YS5wcmVzZW50SGVpZ2h0XG5cbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMudGtoZCwgbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwNywgLy8gdmVyc2lvbigwKSArIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1lXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtb2RpZmljYXRpb25fdGltZVxuICAgICAgKHRyYWNrSWQgPj4+IDI0KSAmIDB4RkYsIC8vIHRyYWNrX0lEOiA0IGJ5dGVzXG4gICAgICAodHJhY2tJZCA+Pj4gMTYpICYgMHhGRixcbiAgICAgICh0cmFja0lkID4+PiA4KSAmIDB4RkYsXG4gICAgICAodHJhY2tJZCkgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQ6IDQgYnl0ZXNcbiAgICAgIChkdXJhdGlvbiA+Pj4gMjQpICYgMHhGRiwgLy8gZHVyYXRpb246IDQgYnl0ZXNcbiAgICAgIChkdXJhdGlvbiA+Pj4gMTYpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZDogMiAqIDQgYnl0ZXNcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBsYXllcigyYnl0ZXMpICsgYWx0ZXJuYXRlX2dyb3VwKDJieXRlcylcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZvbHVtZSgyYnl0ZXMpICsgcmVzZXJ2ZWQoMmJ5dGVzKVxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8gLS0tLWJlZ2luIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDQwLCAweDAwLCAweDAwLCAweDAwLCAvLyAtLS0tZW5kIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgICh3aWR0aCA+Pj4gOCkgJiAweEZGLCAvLyB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICAod2lkdGgpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAoaGVpZ2h0ID4+PiA4KSAmIDB4RkYsXG4gICAgICAoaGVpZ2h0KSAmIDB4RkYsXG4gICAgICAweDAwLCAweDAwXG4gICAgXSkpXG4gIH1cblxuICAvLyBNZWRpYSBCb3hcbiAgc3RhdGljIG1kaWEgKG1ldGEpIHtcbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubWRpYSwgTVA0Lm1kaGQobWV0YSksIE1QNC5oZGxyKG1ldGEpLCBNUDQubWluZihtZXRhKSlcbiAgfVxuXG4gIC8vIE1lZGlhIGhlYWRlciBib3hcbiAgc3RhdGljIG1kaGQgKG1ldGEpIHtcbiAgICBsZXQgdGltZXNjYWxlID0gbWV0YS50aW1lc2NhbGVcbiAgICBsZXQgZHVyYXRpb24gPSBtZXRhLmR1cmF0aW9uXG4gICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm1kaGQsIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY3JlYXRpb25fdGltZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uX3RpbWVcbiAgICAgICh0aW1lc2NhbGUgPj4+IDI0KSAmIDB4RkYsIC8vIHRpbWVzY2FsZTogNCBieXRlc1xuICAgICAgKHRpbWVzY2FsZSA+Pj4gMTYpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUgPj4+IDgpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbiA+Pj4gMjQpICYgMHhGRiwgLy8gZHVyYXRpb246IDQgYnl0ZXNcbiAgICAgIChkdXJhdGlvbiA+Pj4gMTYpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAweDU1LCAweEM0LCAvLyBsYW5ndWFnZTogdW5kICh1bmRldGVybWluZWQpXG4gICAgICAweDAwLCAweDAwIC8vIHByZV9kZWZpbmVkID0gMFxuICAgIF0pKVxuICB9XG5cbiAgLy8gTWVkaWEgaGFuZGxlciByZWZlcmVuY2UgYm94XG4gIHN0YXRpYyBoZGxyIChtZXRhKSB7XG4gICAgbGV0IGRhdGEgPSBudWxsXG4gICAgaWYgKG1ldGEudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgZGF0YSA9IE1QNC5jb25zdGFudHMuSERMUl9BVURJT1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gTVA0LmNvbnN0YW50cy5IRExSX1ZJREVPXG4gICAgfVxuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5oZGxyLCBkYXRhKVxuICB9XG5cbiAgLy8gTWVkaWEgaW5mb21hdGlvbiBib3hcbiAgc3RhdGljIG1pbmYgKG1ldGEpIHtcbiAgICBsZXQgeG1oZCA9IG51bGxcbiAgICBpZiAobWV0YS50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICB4bWhkID0gTVA0LmJveChNUDQudHlwZXMuc21oZCwgTVA0LmNvbnN0YW50cy5TTUhEKVxuICAgIH0gZWxzZSB7XG4gICAgICB4bWhkID0gTVA0LmJveChNUDQudHlwZXMudm1oZCwgTVA0LmNvbnN0YW50cy5WTUhEKVxuICAgIH1cbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubWluZiwgeG1oZCwgTVA0LmRpbmYoKSwgTVA0LnN0YmwobWV0YSkpXG4gIH1cblxuICAvLyBEYXRhIGluZm9tYXRpb24gYm94XG4gIHN0YXRpYyBkaW5mICgpIHtcbiAgICBsZXQgcmVzdWx0ID0gTVA0LmJveChNUDQudHlwZXMuZGluZixcbiAgICAgIE1QNC5ib3goTVA0LnR5cGVzLmRyZWYsIE1QNC5jb25zdGFudHMuRFJFRilcbiAgICApXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLy8gU2FtcGxlIHRhYmxlIGJveFxuICBzdGF0aWMgc3RibCAobWV0YSkge1xuICAgIGxldCByZXN1bHQgPSBNUDQuYm94KE1QNC50eXBlcy5zdGJsLCAvLyB0eXBlOiBzdGJsXG4gICAgICBNUDQuc3RzZChtZXRhKSwgLy8gU2FtcGxlIERlc2NyaXB0aW9uIFRhYmxlXG4gICAgICBNUDQuYm94KE1QNC50eXBlcy5zdHRzLCBNUDQuY29uc3RhbnRzLlNUVFMpLCAvLyBUaW1lLVRvLVNhbXBsZVxuICAgICAgTVA0LmJveChNUDQudHlwZXMuc3RzYywgTVA0LmNvbnN0YW50cy5TVFNDKSwgLy8gU2FtcGxlLVRvLUNodW5rXG4gICAgICBNUDQuYm94KE1QNC50eXBlcy5zdHN6LCBNUDQuY29uc3RhbnRzLlNUU1opLCAvLyBTYW1wbGUgc2l6ZVxuICAgICAgTVA0LmJveChNUDQudHlwZXMuc3RjbywgTVA0LmNvbnN0YW50cy5TVENPKSAvLyBDaHVuayBvZmZzZXRcbiAgICApXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLy8gU2FtcGxlIGRlc2NyaXB0aW9uIGJveFxuICBzdGF0aWMgc3RzZCAobWV0YSkge1xuICAgIGlmIChtZXRhLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIGlmIChtZXRhLmNvZGVjID09PSAnbXAzJykge1xuICAgICAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RzZCwgTVA0LmNvbnN0YW50cy5TVFNEX1BSRUZJWCwgTVA0Lm1wMyhtZXRhKSlcbiAgICAgIH1cbiAgICAgIC8vIGVsc2U6IGFhYyAtPiBtcDRhXG4gICAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RzZCwgTVA0LmNvbnN0YW50cy5TVFNEX1BSRUZJWCwgTVA0Lm1wNGEobWV0YSkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zdHNkLCBNUDQuY29uc3RhbnRzLlNUU0RfUFJFRklYLCBNUDQuYXZjMShtZXRhKSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgbXAzIChtZXRhKSB7XG4gICAgbGV0IGNoYW5uZWxDb3VudCA9IG1ldGEuY2hhbm5lbENvdW50XG4gICAgbGV0IHNhbXBsZVJhdGUgPSBtZXRhLmF1ZGlvU2FtcGxlUmF0ZVxuXG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZCg0KVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gcmVzZXJ2ZWQoMikgKyBkYXRhX3JlZmVyZW5jZV9pbmRleCgyKVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQ6IDIgKiA0IGJ5dGVzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgY2hhbm5lbENvdW50LCAvLyBjaGFubmVsQ291bnQoMilcbiAgICAgIDB4MDAsIDB4MTAsIC8vIHNhbXBsZVNpemUoMilcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkKDQpXG4gICAgICAoc2FtcGxlUmF0ZSA+Pj4gOCkgJiAweEZGLCAvLyBBdWRpbyBzYW1wbGUgcmF0ZVxuICAgICAgKHNhbXBsZVJhdGUpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDBcbiAgICBdKVxuXG4gICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzWycubXAzJ10sIGRhdGEpXG4gIH1cblxuICBzdGF0aWMgbXA0YSAobWV0YSkge1xuICAgIGxldCBjaGFubmVsQ291bnQgPSBtZXRhLmNoYW5uZWxDb3VudFxuICAgIGxldCBzYW1wbGVSYXRlID0gbWV0YS5hdWRpb1NhbXBsZVJhdGVcblxuICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQoNClcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIHJlc2VydmVkKDIpICsgZGF0YV9yZWZlcmVuY2VfaW5kZXgoMilcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiAyICogNCBieXRlc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIGNoYW5uZWxDb3VudCwgLy8gY2hhbm5lbENvdW50KDIpXG4gICAgICAweDAwLCAweDEwLCAvLyBzYW1wbGVTaXplKDIpXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZCg0KVxuICAgICAgKHNhbXBsZVJhdGUgPj4+IDgpICYgMHhGRiwgLy8gQXVkaW8gc2FtcGxlIHJhdGVcbiAgICAgIChzYW1wbGVSYXRlKSAmIDB4RkYsXG4gICAgICAweDAwLCAweDAwXG4gICAgXSlcblxuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tcDRhLCBkYXRhLCBNUDQuZXNkcyhtZXRhKSlcbiAgfVxuXG4gIHN0YXRpYyBlc2RzIChtZXRhKSB7XG4gICAgbGV0IGNvbmZpZyA9IG1ldGEuY29uZmlnIHx8IFtdXG4gICAgbGV0IGNvbmZpZ1NpemUgPSBjb25maWcubGVuZ3RoXG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uIDAgKyBmbGFnc1xuXG4gICAgICAweDAzLCAvLyBkZXNjcmlwdG9yX3R5cGVcbiAgICAgIDB4MTcgKyBjb25maWdTaXplLCAvLyBsZW5ndGgzXG4gICAgICAweDAwLCAweDAxLCAvLyBlc19pZFxuICAgICAgMHgwMCwgLy8gc3RyZWFtX3ByaW9yaXR5XG5cbiAgICAgIDB4MDQsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgwRiArIGNvbmZpZ1NpemUsIC8vIGxlbmd0aFxuICAgICAgMHg0MCwgLy8gY29kZWM6IG1wZWc0X2F1ZGlvXG4gICAgICAweDE1LCAvLyBzdHJlYW1fdHlwZTogQXVkaW9cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGJ1ZmZlcl9zaXplXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtYXhCaXRyYXRlXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBhdmdCaXRyYXRlXG5cbiAgICAgIDB4MDUgLy8gZGVzY3JpcHRvcl90eXBlXG4gICAgXS5jb25jYXQoW1xuICAgICAgY29uZmlnU2l6ZVxuICAgIF0pLmNvbmNhdChcbiAgICAgIGNvbmZpZ1xuICAgICkuY29uY2F0KFtcbiAgICAgIDB4MDYsIDB4MDEsIDB4MDIgLy8gR0FTcGVjaWZpY0NvbmZpZ1xuICAgIF0pKVxuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5lc2RzLCBkYXRhKVxuICB9XG5cbiAgc3RhdGljIGF2YzEgKG1ldGEpIHtcbiAgICBsZXQgYXZjYyA9IG1ldGEuYXZjY1xuICAgIGxldCB3aWR0aCA9IG1ldGEuY29kZWNXaWR0aCwgaGVpZ2h0ID0gbWV0YS5jb2RlY0hlaWdodFxuXG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZCg0KVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gcmVzZXJ2ZWQoMikgKyBkYXRhX3JlZmVyZW5jZV9pbmRleCgyKVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWQoMikgKyByZXNlcnZlZCgyKVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWQ6IDMgKiA0IGJ5dGVzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgICh3aWR0aCA+Pj4gOCkgJiAweEZGLCAvLyB3aWR0aDogMiBieXRlc1xuICAgICAgKHdpZHRoKSAmIDB4RkYsXG4gICAgICAoaGVpZ2h0ID4+PiA4KSAmIDB4RkYsIC8vIGhlaWdodDogMiBieXRlc1xuICAgICAgKGhlaWdodCkgJiAweEZGLFxuICAgICAgMHgwMCwgMHg0OCwgMHgwMCwgMHgwMCwgLy8gaG9yaXpyZXNvbHV0aW9uOiA0IGJ5dGVzXG4gICAgICAweDAwLCAweDQ4LCAweDAwLCAweDAwLCAvLyB2ZXJ0cmVzb2x1dGlvbjogNCBieXRlc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQ6IDQgYnl0ZXNcbiAgICAgIDB4MDAsIDB4MDEsIC8vIGZyYW1lX2NvdW50XG4gICAgICAweDBBLCAvLyBzdHJsZW5cbiAgICAgIDB4NzgsIDB4NzEsIDB4NzEsIDB4MkYsIC8vIGNvbXByZXNzb3JuYW1lOiAzMiBieXRlc1xuICAgICAgMHg2NiwgMHg2QywgMHg3NiwgMHgyRSxcbiAgICAgIDB4NkEsIDB4NzMsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MTgsIC8vIGRlcHRoXG4gICAgICAweEZGLCAweEZGIC8vIHByZV9kZWZpbmVkID0gLTFcbiAgICBdKVxuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5hdmMxLCBkYXRhLCBNUDQuYm94KE1QNC50eXBlcy5hdmNDLCBhdmNjKSlcbiAgfVxuXG4gIC8vIE1vdmllIEV4dGVuZHMgYm94XG4gIHN0YXRpYyBtdmV4IChtZXRhKSB7XG4gICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm12ZXgsIE1QNC50cmV4KG1ldGEpKVxuICB9XG5cbiAgLy8gVHJhY2sgRXh0ZW5kcyBib3hcbiAgc3RhdGljIHRyZXggKG1ldGEpIHtcbiAgICBsZXQgdHJhY2tJZCA9IG1ldGEuaWRcbiAgICBsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuICAgICAgKHRyYWNrSWQgPj4+IDI0KSAmIDB4RkYsIC8vIHRyYWNrX0lEXG4gICAgICAodHJhY2tJZCA+Pj4gMTYpICYgMHhGRixcbiAgICAgICh0cmFja0lkID4+PiA4KSAmIDB4RkYsXG4gICAgICAodHJhY2tJZCkgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZGVmYXVsdF9zYW1wbGVfZGVzY3JpcHRpb25faW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGRlZmF1bHRfc2FtcGxlX2R1cmF0aW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9zaXplXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAxIC8vIGRlZmF1bHRfc2FtcGxlX2ZsYWdzXG4gICAgXSlcbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMudHJleCwgZGF0YSlcbiAgfVxuXG4gIC8vIE1vdmllIGZyYWdtZW50IGJveFxuICBzdGF0aWMgbW9vZiAodHJhY2ssIGJhc2VNZWRpYURlY29kZVRpbWUpIHtcbiAgICByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubW9vZiwgTVA0Lm1maGQodHJhY2suc2VxdWVuY2VOdW1iZXIpLCBNUDQudHJhZih0cmFjaywgYmFzZU1lZGlhRGVjb2RlVGltZSkpXG4gIH1cblxuICBzdGF0aWMgbWZoZCAoc2VxdWVuY2VOdW1iZXIpIHtcbiAgICBsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAoc2VxdWVuY2VOdW1iZXIgPj4+IDI0KSAmIDB4RkYsIC8vIHNlcXVlbmNlX251bWJlcjogaW50MzJcbiAgICAgIChzZXF1ZW5jZU51bWJlciA+Pj4gMTYpICYgMHhGRixcbiAgICAgIChzZXF1ZW5jZU51bWJlciA+Pj4gOCkgJiAweEZGLFxuICAgICAgKHNlcXVlbmNlTnVtYmVyKSAmIDB4RkZcbiAgICBdKVxuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tZmhkLCBkYXRhKVxuICB9XG5cbiAgLy8gVHJhY2sgZnJhZ21lbnQgYm94XG4gIHN0YXRpYyB0cmFmICh0cmFjaywgYmFzZU1lZGlhRGVjb2RlVGltZSkge1xuICAgIGxldCB0cmFja0lkID0gdHJhY2suaWRcblxuICAgIC8vIFRyYWNrIGZyYWdtZW50IGhlYWRlciBib3hcbiAgICBsZXQgdGZoZCA9IE1QNC5ib3goTVA0LnR5cGVzLnRmaGQsIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgJiBmbGFnc1xuICAgICAgKHRyYWNrSWQgPj4+IDI0KSAmIDB4RkYsIC8vIHRyYWNrX0lEXG4gICAgICAodHJhY2tJZCA+Pj4gMTYpICYgMHhGRixcbiAgICAgICh0cmFja0lkID4+PiA4KSAmIDB4RkYsXG4gICAgICAodHJhY2tJZCkgJiAweEZGXG4gICAgXSkpXG4gICAgLy8gVHJhY2sgRnJhZ21lbnQgRGVjb2RlIFRpbWVcbiAgICBsZXQgdGZkdCA9IE1QNC5ib3goTVA0LnR5cGVzLnRmZHQsIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgJiBmbGFnc1xuICAgICAgKGJhc2VNZWRpYURlY29kZVRpbWUgPj4+IDI0KSAmIDB4RkYsIC8vIGJhc2VNZWRpYURlY29kZVRpbWU6IGludDMyXG4gICAgICAoYmFzZU1lZGlhRGVjb2RlVGltZSA+Pj4gMTYpICYgMHhGRixcbiAgICAgIChiYXNlTWVkaWFEZWNvZGVUaW1lID4+PiA4KSAmIDB4RkYsXG4gICAgICAoYmFzZU1lZGlhRGVjb2RlVGltZSkgJiAweEZGXG4gICAgXSkpXG4gICAgbGV0IHNkdHAgPSBNUDQuc2R0cCh0cmFjaylcbiAgICBsZXQgdHJ1biA9IE1QNC50cnVuKHRyYWNrLCBzZHRwLmJ5dGVMZW5ndGggKyAxNiArIDE2ICsgOCArIDE2ICsgOCArIDgpXG4gICAgaWYgKHRyYWNrSWQgPT09IDEpIHtcbiAgICAgIGNvbnNvbGUubG9nKHRydW4pXG4gICAgfVxuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50cmFmLCB0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwKVxuICB9XG5cbiAgLy8gU2FtcGxlIERlcGVuZGVuY3kgVHlwZSBib3hcbiAgc3RhdGljIHNkdHAgKHRyYWNrKSB7XG4gICAgbGV0IHNhbXBsZXMgPSB0cmFjay5zYW1wbGVzIHx8IFtdXG4gICAgbGV0IHNhbXBsZUNvdW50ID0gc2FtcGxlcy5sZW5ndGhcbiAgICBsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KDQgKyBzYW1wbGVDb3VudClcbiAgICAvLyAwfjQgYnl0ZXM6IHZlcnNpb24oMCkgJiBmbGFnc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2FtcGxlQ291bnQ7IGkrKykge1xuICAgICAgbGV0IGZsYWdzID0gc2FtcGxlc1tpXS5mbGFnc1xuICAgICAgZGF0YVtpICsgNF0gPSAoZmxhZ3MuaXNMZWFkaW5nIDw8IDYpIHwgLy8gaXNfbGVhZGluZzogMiAoYml0KVxuICAgICAgICAgICAgICAgICAgICAgICAgKGZsYWdzLmRlcGVuZHNPbiA8PCA0KSB8IC8vIHNhbXBsZV9kZXBlbmRzX29uXG4gICAgICAgICAgICAgICAgICAgICAgICAoZmxhZ3MuaXNEZXBlbmRlZE9uIDw8IDIpIHwgLy8gc2FtcGxlX2lzX2RlcGVuZGVkX29uXG4gICAgICAgICAgICAgICAgICAgICAgICAoZmxhZ3MuaGFzUmVkdW5kYW5jeSkgLy8gc2FtcGxlX2hhc19yZWR1bmRhbmN5XG4gICAgfVxuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zZHRwLCBkYXRhKVxuICB9XG5cbiAgLy8gVHJhY2sgZnJhZ21lbnQgcnVuIGJveFxuICBzdGF0aWMgdHJ1biAodHJhY2ssIG9mZnNldCkge1xuICAgIGxldCBzYW1wbGVzID0gdHJhY2suc2FtcGxlcyB8fCBbXVxuICAgIGxldCBzYW1wbGVDb3VudCA9IHNhbXBsZXMubGVuZ3RoXG4gICAgbGV0IGRhdGFTaXplID0gMTIgKyAxNiAqIHNhbXBsZUNvdW50XG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShkYXRhU2l6ZSlcbiAgICBvZmZzZXQgKz0gOCArIGRhdGFTaXplXG5cbiAgICBkYXRhLnNldChbXG4gICAgICAweDAwLCAweDAwLCAweDBGLCAweDAxLCAvLyB2ZXJzaW9uKDApICYgZmxhZ3NcbiAgICAgIChzYW1wbGVDb3VudCA+Pj4gMjQpICYgMHhGRiwgLy8gc2FtcGxlX2NvdW50XG4gICAgICAoc2FtcGxlQ291bnQgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAoc2FtcGxlQ291bnQgPj4+IDgpICYgMHhGRixcbiAgICAgIChzYW1wbGVDb3VudCkgJiAweEZGLFxuICAgICAgKG9mZnNldCA+Pj4gMjQpICYgMHhGRiwgLy8gZGF0YV9vZmZzZXRcbiAgICAgIChvZmZzZXQgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAob2Zmc2V0ID4+PiA4KSAmIDB4RkYsXG4gICAgICAob2Zmc2V0KSAmIDB4RkZcbiAgICBdLCAwKVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzYW1wbGVDb3VudDsgaSsrKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZyhzYW1wbGVzW2ldLmR1cmF0aW9uKVxuICAgICAgbGV0IGR1cmF0aW9uID0gc2FtcGxlc1tpXS5kdXJhdGlvblxuICAgICAgbGV0IHNpemUgPSBzYW1wbGVzW2ldLnNpemVcbiAgICAgIGxldCBmbGFncyA9IHNhbXBsZXNbaV0uZmxhZ3NcbiAgICAgIGxldCBjdHMgPSBzYW1wbGVzW2ldLmN0c1xuICAgICAgZGF0YS5zZXQoW1xuICAgICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsIC8vIHNhbXBsZV9kdXJhdGlvblxuICAgICAgICAoZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChkdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuICAgICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgICAgKHNpemUgPj4+IDI0KSAmIDB4RkYsIC8vIHNhbXBsZV9zaXplXG4gICAgICAgIChzaXplID4+PiAxNikgJiAweEZGLFxuICAgICAgICAoc2l6ZSA+Pj4gOCkgJiAweEZGLFxuICAgICAgICAoc2l6ZSkgJiAweEZGLFxuICAgICAgICAoZmxhZ3MuaXNMZWFkaW5nIDw8IDIpIHwgZmxhZ3MuZGVwZW5kc09uLCAvLyBzYW1wbGVfZmxhZ3NcbiAgICAgICAgKGZsYWdzLmlzRGVwZW5kZWRPbiA8PCA2KSB8IChmbGFncy5oYXNSZWR1bmRhbmN5IDw8IDQpIHwgZmxhZ3MuaXNOb25TeW5jLFxuICAgICAgICAweDAwLCAweDAwLCAvLyBzYW1wbGVfZGVncmFkYXRpb25fcHJpb3JpdHlcbiAgICAgICAgKGN0cyA+Pj4gMjQpICYgMHhGRiwgLy8gc2FtcGxlX2NvbXBvc2l0aW9uX3RpbWVfb2Zmc2V0XG4gICAgICAgIChjdHMgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChjdHMgPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGN0cykgJiAweEZGXG4gICAgICBdLCAxMiArIDE2ICogaSlcbiAgICB9XG4gICAgcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLnRydW4sIGRhdGEpXG4gIH1cblxuICBzdGF0aWMgbWRhdCAoZGF0YSkge1xuICAgIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tZGF0LCBkYXRhKVxuICB9XG59XG5cbk1QNC5pbml0KClcblxuZXhwb3J0IGRlZmF1bHQgTVA0XG4iLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IExvZyBmcm9tICcuLi91dGlscy9sb2dnZXIuanMnXG5pbXBvcnQgTVA0IGZyb20gJy4vbXA0LWdlbmVyYXRvci5qcydcbmltcG9ydCBBQUMgZnJvbSAnLi9hYWMtc2lsZW50LmpzJ1xuaW1wb3J0IEJyb3dzZXIgZnJvbSAnLi4vdXRpbHMvYnJvd3Nlci5qcydcbmltcG9ydCB7U2FtcGxlSW5mbywgTWVkaWFTZWdtZW50SW5mbywgTWVkaWFTZWdtZW50SW5mb0xpc3R9IGZyb20gJy4uL2NvcmUvbWVkaWEtc2VnbWVudC1pbmZvLmpzJ1xuaW1wb3J0IHtJbGxlZ2FsU3RhdGVFeGNlcHRpb259IGZyb20gJy4uL3V0aWxzL2V4Y2VwdGlvbi5qcydcblxuLy8gRnJhZ21lbnRlZCBtcDQgcmVtdXhlclxuY2xhc3MgTVA0UmVtdXhlciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcpIHtcbiAgICB0aGlzLlRBRyA9ICdNUDRSZW11eGVyJ1xuXG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnXG4gICAgdGhpcy5faXNMaXZlID0gKGNvbmZpZy5pc0xpdmUgPT09IHRydWUpXG5cbiAgICB0aGlzLl9kdHNCYXNlID0gLTFcbiAgICB0aGlzLl9kdHNCYXNlSW5pdGVkID0gZmFsc2VcbiAgICB0aGlzLl9hdWRpb0R0c0Jhc2UgPSBJbmZpbml0eVxuICAgIHRoaXMuX3ZpZGVvRHRzQmFzZSA9IEluZmluaXR5XG4gICAgdGhpcy5fYXVkaW9OZXh0RHRzID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gdW5kZWZpbmVkXG4gICAgdGhpcy5fYXVkaW9TdGFzaGVkTGFzdFNhbXBsZSA9IG51bGxcbiAgICB0aGlzLl92aWRlb1N0YXNoZWRMYXN0U2FtcGxlID0gbnVsbFxuXG4gICAgdGhpcy5fYXVkaW9NZXRhID0gbnVsbFxuICAgIHRoaXMuX3ZpZGVvTWV0YSA9IG51bGxcblxuICAgIHRoaXMuX2F1ZGlvU2VnbWVudEluZm9MaXN0ID0gbmV3IE1lZGlhU2VnbWVudEluZm9MaXN0KCdhdWRpbycpXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50SW5mb0xpc3QgPSBuZXcgTWVkaWFTZWdtZW50SW5mb0xpc3QoJ3ZpZGVvJylcblxuICAgIHRoaXMuX29uSW5pdFNlZ21lbnQgPSBudWxsXG4gICAgdGhpcy5fb25NZWRpYVNlZ21lbnQgPSBudWxsXG5cbiAgICAvLyBXb3JrYXJvdW5kIGZvciBjaHJvbWUgPCA1MDogQWx3YXlzIGZvcmNlIGZpcnN0IHNhbXBsZSBhcyBhIFJhbmRvbSBBY2Nlc3MgUG9pbnQgaW4gbWVkaWEgc2VnbWVudFxuICAgIC8vIHNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yMjk0MTJcbiAgICB0aGlzLl9mb3JjZUZpcnN0SURSID0gISEoKEJyb3dzZXIuY2hyb21lICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQnJvd3Nlci52ZXJzaW9uLm1ham9yIDwgNTAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChCcm93c2VyLnZlcnNpb24ubWFqb3IgPT09IDUwICYmIEJyb3dzZXIudmVyc2lvbi5idWlsZCA8IDI2NjEpKSkpXG5cbiAgICAvLyBXb3JrYXJvdW5kIGZvciBJRTExL0VkZ2U6IEZpbGwgc2lsZW50IGFhYyBmcmFtZSBhZnRlciBrZXlmcmFtZS1zZWVraW5nXG4gICAgLy8gTWFrZSBhdWRpbyBiZWdpbkR0cyBlcXVhbHMgd2l0aCB2aWRlbyBiZWdpbkR0cywgaW4gb3JkZXIgdG8gZml4IHNlZWsgZnJlZXplXG4gICAgdGhpcy5fZmlsbFNpbGVudEFmdGVyU2VlayA9IChCcm93c2VyLm1zZWRnZSB8fCBCcm93c2VyLm1zaWUpXG5cbiAgICAvLyBXaGlsZSBvbmx5IEZpcmVGb3ggc3VwcG9ydHMgJ2F1ZGlvL21wNCwgY29kZWNzPVwibXAzXCInLCB1c2UgJ2F1ZGlvL21wZWcnIGZvciBjaHJvbWUsIHNhZmFyaSwgLi4uXG4gICAgdGhpcy5fbXAzVXNlTXBlZ0F1ZGlvID0gIUJyb3dzZXIuZmlyZWZveFxuXG4gICAgdGhpcy5fZmlsbEF1ZGlvVGltZXN0YW1wR2FwID0gdGhpcy5fY29uZmlnLmZpeEF1ZGlvVGltZXN0YW1wR2FwXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9kdHNCYXNlID0gLTFcbiAgICB0aGlzLl9kdHNCYXNlSW5pdGVkID0gZmFsc2VcbiAgICB0aGlzLl9hdWRpb01ldGEgPSBudWxsXG4gICAgdGhpcy5fdmlkZW9NZXRhID0gbnVsbFxuICAgIHRoaXMuX2F1ZGlvU2VnbWVudEluZm9MaXN0LmNsZWFyKClcbiAgICB0aGlzLl9hdWRpb1NlZ21lbnRJbmZvTGlzdCA9IG51bGxcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRJbmZvTGlzdC5jbGVhcigpXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50SW5mb0xpc3QgPSBudWxsXG4gICAgdGhpcy5fb25Jbml0U2VnbWVudCA9IG51bGxcbiAgICB0aGlzLl9vbk1lZGlhU2VnbWVudCA9IG51bGxcbiAgfVxuXG4gIGJpbmREYXRhU291cmNlIChwcm9kdWNlcikge1xuICAgIHByb2R1Y2VyLm9uRGF0YUF2YWlsYWJsZSA9IHRoaXMucmVtdXguYmluZCh0aGlzKVxuICAgIHByb2R1Y2VyLm9uVHJhY2tNZXRhZGF0YSA9IHRoaXMuX29uVHJhY2tNZXRhZGF0YVJlY2VpdmVkLmJpbmQodGhpcylcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyogcHJvdG90eXBlOiBmdW5jdGlvbiBvbkluaXRTZWdtZW50KHR5cGU6IHN0cmluZywgaW5pdFNlZ21lbnQ6IEFycmF5QnVmZmVyKTogdm9pZFxuICAgICAgIEluaXRTZWdtZW50OiB7XG4gICAgICAgICAgIHR5cGU6IHN0cmluZyxcbiAgICAgICAgICAgZGF0YTogQXJyYXlCdWZmZXIsXG4gICAgICAgICAgIGNvZGVjOiBzdHJpbmcsXG4gICAgICAgICAgIGNvbnRhaW5lcjogc3RyaW5nXG4gICAgICAgfVxuICAgICovXG4gIGdldCBvbkluaXRTZWdtZW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5fb25Jbml0U2VnbWVudFxuICB9XG5cbiAgc2V0IG9uSW5pdFNlZ21lbnQgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fb25Jbml0U2VnbWVudCA9IGNhbGxiYWNrXG4gIH1cblxuICAvKiBwcm90b3R5cGU6IGZ1bmN0aW9uIG9uTWVkaWFTZWdtZW50KHR5cGU6IHN0cmluZywgbWVkaWFTZWdtZW50OiBNZWRpYVNlZ21lbnQpOiB2b2lkXG4gICAgICAgTWVkaWFTZWdtZW50OiB7XG4gICAgICAgICAgIHR5cGU6IHN0cmluZyxcbiAgICAgICAgICAgZGF0YTogQXJyYXlCdWZmZXIsXG4gICAgICAgICAgIHNhbXBsZUNvdW50OiBpbnQzMlxuICAgICAgICAgICBpbmZvOiBNZWRpYVNlZ21lbnRJbmZvXG4gICAgICAgfVxuICAgICovXG4gIGdldCBvbk1lZGlhU2VnbWVudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29uTWVkaWFTZWdtZW50XG4gIH1cblxuICBzZXQgb25NZWRpYVNlZ21lbnQgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fb25NZWRpYVNlZ21lbnQgPSBjYWxsYmFja1xuICB9XG5cbiAgaW5zZXJ0RGlzY29udGludWl0eSAoKSB7XG4gICAgdGhpcy5fYXVkaW9OZXh0RHRzID0gdGhpcy5fdmlkZW9OZXh0RHRzID0gdW5kZWZpbmVkXG4gIH1cblxuICBzZWVrIChvcmlnaW5hbER0cykge1xuICAgIHRoaXMuX2F1ZGlvU3Rhc2hlZExhc3RTYW1wbGUgPSBudWxsXG4gICAgdGhpcy5fdmlkZW9TdGFzaGVkTGFzdFNhbXBsZSA9IG51bGxcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRJbmZvTGlzdC5jbGVhcigpXG4gICAgdGhpcy5fYXVkaW9TZWdtZW50SW5mb0xpc3QuY2xlYXIoKVxuICB9XG5cbiAgcmVtdXggKGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2spIHtcbiAgICBpZiAoIXRoaXMuX29uTWVkaWFTZWdtZW50KSB7XG4gICAgICB0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCdNUDRSZW11eGVyOiBvbk1lZGlhU2VnbWVudCBjYWxsYmFjayBtdXN0IGJlIHNwZWNpZmljZWQhJylcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9kdHNCYXNlSW5pdGVkKSB7XG4gICAgICB0aGlzLl9jYWxjdWxhdGVEdHNCYXNlKGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2spXG4gICAgfVxuICAgIHRoaXMuX3JlbXV4VmlkZW8odmlkZW9UcmFjaylcbiAgICB0aGlzLl9yZW11eEF1ZGlvKGF1ZGlvVHJhY2spXG4gIH1cblxuICBfb25UcmFja01ldGFkYXRhUmVjZWl2ZWQgKHR5cGUsIG1ldGFkYXRhKSB7XG4gICAgbGV0IG1ldGFib3ggPSBudWxsXG5cbiAgICBsZXQgY29udGFpbmVyID0gJ21wNCdcbiAgICBsZXQgY29kZWMgPSBtZXRhZGF0YS5jb2RlY1xuXG4gICAgaWYgKHR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIHRoaXMuX2F1ZGlvTWV0YSA9IG1ldGFkYXRhXG4gICAgICBpZiAobWV0YWRhdGEuY29kZWMgPT09ICdtcDMnICYmIHRoaXMuX21wM1VzZU1wZWdBdWRpbykge1xuICAgICAgICAvLyAnYXVkaW8vbXBlZycgZm9yIE1QMyBhdWRpbyB0cmFja1xuICAgICAgICBjb250YWluZXIgPSAnbXBlZydcbiAgICAgICAgY29kZWMgPSAnJ1xuICAgICAgICBtZXRhYm94ID0gbmV3IFVpbnQ4QXJyYXkoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gJ2F1ZGlvL21wNCwgY29kZWNzPVwiY29kZWNcIidcbiAgICAgICAgbWV0YWJveCA9IE1QNC5nZW5lcmF0ZUluaXRTZWdtZW50KG1ldGFkYXRhKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgdGhpcy5fdmlkZW9NZXRhID0gbWV0YWRhdGFcbiAgICAgIG1ldGFib3ggPSBNUDQuZ2VuZXJhdGVJbml0U2VnbWVudChtZXRhZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZGlzcGF0Y2ggbWV0YWJveCAoSW5pdGlhbGl6YXRpb24gU2VnbWVudClcbiAgICBpZiAoIXRoaXMuX29uSW5pdFNlZ21lbnQpIHtcbiAgICAgIHRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oJ01QNFJlbXV4ZXI6IG9uSW5pdFNlZ21lbnQgY2FsbGJhY2sgbXVzdCBiZSBzcGVjaWZpZWQhJylcbiAgICB9XG4gICAgdGhpcy5fb25Jbml0U2VnbWVudCh0eXBlLCB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZGF0YTogbWV0YWJveC5idWZmZXIsXG4gICAgICBjb2RlYzogY29kZWMsXG4gICAgICBjb250YWluZXI6IGAke3R5cGV9LyR7Y29udGFpbmVyfWAsXG4gICAgICBtZWRpYUR1cmF0aW9uOiBtZXRhZGF0YS5kdXJhdGlvbiAvLyBpbiB0aW1lc2NhbGUgMTAwMCAobWlsbGlzZWNvbmRzKVxuICAgIH0pXG4gIH1cblxuICBfY2FsY3VsYXRlRHRzQmFzZSAoYXVkaW9UcmFjaywgdmlkZW9UcmFjaykge1xuICAgIGlmICh0aGlzLl9kdHNCYXNlSW5pdGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoYXVkaW9UcmFjay5zYW1wbGVzICYmIGF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2F1ZGlvRHRzQmFzZSA9IGF1ZGlvVHJhY2suc2FtcGxlc1swXS5kdHNcbiAgICB9XG4gICAgaWYgKHZpZGVvVHJhY2suc2FtcGxlcyAmJiB2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl92aWRlb0R0c0Jhc2UgPSB2aWRlb1RyYWNrLnNhbXBsZXNbMF0uZHRzXG4gICAgfVxuXG4gICAgdGhpcy5fZHRzQmFzZSA9IE1hdGgubWluKHRoaXMuX2F1ZGlvRHRzQmFzZSwgdGhpcy5fdmlkZW9EdHNCYXNlKVxuICAgIHRoaXMuX2R0c0Jhc2VJbml0ZWQgPSB0cnVlXG4gIH1cblxuICBmbHVzaFN0YXNoZWRTYW1wbGVzICgpIHtcbiAgICBsZXQgdmlkZW9TYW1wbGUgPSB0aGlzLl92aWRlb1N0YXNoZWRMYXN0U2FtcGxlXG4gICAgbGV0IGF1ZGlvU2FtcGxlID0gdGhpcy5fYXVkaW9TdGFzaGVkTGFzdFNhbXBsZVxuXG4gICAgbGV0IHZpZGVvVHJhY2sgPSB7XG4gICAgICB0eXBlOiAndmlkZW8nLFxuICAgICAgaWQ6IDEsXG4gICAgICBzZXF1ZW5jZU51bWJlcjogMCxcbiAgICAgIHNhbXBsZXM6IFtdLFxuICAgICAgbGVuZ3RoOiAwXG4gICAgfVxuXG4gICAgaWYgKHZpZGVvU2FtcGxlICE9IG51bGwpIHtcbiAgICAgIHZpZGVvVHJhY2suc2FtcGxlcy5wdXNoKHZpZGVvU2FtcGxlKVxuICAgICAgdmlkZW9UcmFjay5sZW5ndGggPSB2aWRlb1NhbXBsZS5sZW5ndGhcbiAgICB9XG5cbiAgICBsZXQgYXVkaW9UcmFjayA9IHtcbiAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICBpZDogMixcbiAgICAgIHNlcXVlbmNlTnVtYmVyOiAwLFxuICAgICAgc2FtcGxlczogW10sXG4gICAgICBsZW5ndGg6IDBcbiAgICB9XG5cbiAgICBpZiAoYXVkaW9TYW1wbGUgIT0gbnVsbCkge1xuICAgICAgYXVkaW9UcmFjay5zYW1wbGVzLnB1c2goYXVkaW9TYW1wbGUpXG4gICAgICBhdWRpb1RyYWNrLmxlbmd0aCA9IGF1ZGlvU2FtcGxlLmxlbmd0aFxuICAgIH1cblxuICAgIHRoaXMuX3ZpZGVvU3Rhc2hlZExhc3RTYW1wbGUgPSBudWxsXG4gICAgdGhpcy5fYXVkaW9TdGFzaGVkTGFzdFNhbXBsZSA9IG51bGxcblxuICAgIHRoaXMuX3JlbXV4VmlkZW8odmlkZW9UcmFjaywgdHJ1ZSlcbiAgICB0aGlzLl9yZW11eEF1ZGlvKGF1ZGlvVHJhY2ssIHRydWUpXG4gIH1cblxuICBfcmVtdXhBdWRpbyAoYXVkaW9UcmFjaywgZm9yY2UpIHtcbiAgICBpZiAodGhpcy5fYXVkaW9NZXRhID09IG51bGwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCB0cmFjayA9IGF1ZGlvVHJhY2tcbiAgICBsZXQgc2FtcGxlcyA9IHRyYWNrLnNhbXBsZXNcbiAgICBsZXQgZHRzQ29ycmVjdGlvblxuICAgIGxldCBmaXJzdER0cyA9IC0xLCBsYXN0RHRzID0gLTEsIGxhc3RQdHMgPSAtMVxuICAgIGxldCByZWZTYW1wbGVEdXJhdGlvbiA9IHRoaXMuX2F1ZGlvTWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgbGV0IG1wZWdSYXdUcmFjayA9IHRoaXMuX2F1ZGlvTWV0YS5jb2RlYyA9PT0gJ21wMycgJiYgdGhpcy5fbXAzVXNlTXBlZ0F1ZGlvXG4gICAgbGV0IGZpcnN0U2VnbWVudEFmdGVyU2VlayA9IHRoaXMuX2R0c0Jhc2VJbml0ZWQgJiYgdGhpcy5fYXVkaW9OZXh0RHRzID09PSB1bmRlZmluZWRcblxuICAgIGxldCBpbnNlcnRQcmVmaXhTaWxlbnRGcmFtZSA9IGZhbHNlXG5cbiAgICBpZiAoIXNhbXBsZXMgfHwgc2FtcGxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoc2FtcGxlcy5sZW5ndGggPT09IDEgJiYgIWZvcmNlKSB7XG4gICAgICAvLyBJZiBbc2FtcGxlIGNvdW50IGluIGN1cnJlbnQgYmF0Y2hdID09PSAxICYmIChmb3JjZSAhPSB0cnVlKVxuICAgICAgLy8gSWdub3JlIGFuZCBrZWVwIGluIGRlbXV4ZXIncyBxdWV1ZVxuICAgICAgcmV0dXJuXG4gICAgfSAvLyBlbHNlIGlmIChmb3JjZSA9PT0gdHJ1ZSkgZG8gcmVtdXhcblxuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgbGV0IG1kYXRib3ggPSBudWxsXG4gICAgbGV0IG1kYXRCeXRlcyA9IDBcblxuICAgIC8vIGNhbGN1bGF0ZSBpbml0aWFsIG1kYXQgc2l6ZVxuICAgIGlmIChtcGVnUmF3VHJhY2spIHtcbiAgICAgIC8vIGZvciByYXcgbXBlZyBidWZmZXJcbiAgICAgIG9mZnNldCA9IDBcbiAgICAgIG1kYXRCeXRlcyA9IHRyYWNrLmxlbmd0aFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgZm1wNCBtZGF0IGJveFxuICAgICAgb2Zmc2V0ID0gOCAvLyBzaXplICsgdHlwZVxuICAgICAgbWRhdEJ5dGVzID0gOCArIHRyYWNrLmxlbmd0aFxuICAgIH1cblxuICAgIGxldCBsYXN0U2FtcGxlID0gbnVsbFxuXG4gICAgLy8gUG9wIHRoZSBsYXN0U2FtcGxlIGFuZCB3YWl0aW5nIGZvciBzdGFzaFxuICAgIGlmIChzYW1wbGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGxhc3RTYW1wbGUgPSBzYW1wbGVzLnBvcCgpXG4gICAgICBtZGF0Qnl0ZXMgLT0gbGFzdFNhbXBsZS5sZW5ndGhcbiAgICB9XG5cbiAgICAvLyBJbnNlcnQgW3N0YXNoZWQgbGFzdFNhbXBsZSBpbiB0aGUgcHJldmlvdXMgYmF0Y2hdIHRvIHRoZSBmcm9udFxuICAgIGlmICh0aGlzLl9hdWRpb1N0YXNoZWRMYXN0U2FtcGxlICE9IG51bGwpIHtcbiAgICAgIGxldCBzYW1wbGUgPSB0aGlzLl9hdWRpb1N0YXNoZWRMYXN0U2FtcGxlXG4gICAgICB0aGlzLl9hdWRpb1N0YXNoZWRMYXN0U2FtcGxlID0gbnVsbFxuICAgICAgc2FtcGxlcy51bnNoaWZ0KHNhbXBsZSlcbiAgICAgIG1kYXRCeXRlcyArPSBzYW1wbGUubGVuZ3RoXG4gICAgfVxuXG4gICAgLy8gU3Rhc2ggdGhlIGxhc3RTYW1wbGUgb2YgY3VycmVudCBiYXRjaCwgd2FpdGluZyBmb3IgbmV4dCBiYXRjaFxuICAgIGlmIChsYXN0U2FtcGxlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2F1ZGlvU3Rhc2hlZExhc3RTYW1wbGUgPSBsYXN0U2FtcGxlXG4gICAgfVxuXG4gICAgbGV0IGZpcnN0U2FtcGxlT3JpZ2luYWxEdHMgPSBzYW1wbGVzWzBdLmR0cyAtIHRoaXMuX2R0c0Jhc2VcblxuICAgIC8vIGNhbGN1bGF0ZSBkdHNDb3JyZWN0aW9uXG4gICAgaWYgKHRoaXMuX2F1ZGlvTmV4dER0cykge1xuICAgICAgZHRzQ29ycmVjdGlvbiA9IGZpcnN0U2FtcGxlT3JpZ2luYWxEdHMgLSB0aGlzLl9hdWRpb05leHREdHNcbiAgICB9IGVsc2UgeyAvLyB0aGlzLl9hdWRpb05leHREdHMgPT0gdW5kZWZpbmVkXG4gICAgICBpZiAodGhpcy5fYXVkaW9TZWdtZW50SW5mb0xpc3QuaXNFbXB0eSgpKSB7XG4gICAgICAgIGR0c0NvcnJlY3Rpb24gPSAwXG4gICAgICAgIGlmICh0aGlzLl9maWxsU2lsZW50QWZ0ZXJTZWVrICYmICF0aGlzLl92aWRlb1NlZ21lbnRJbmZvTGlzdC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICBpZiAodGhpcy5fYXVkaW9NZXRhLm9yaWdpbmFsQ29kZWMgIT09ICdtcDMnKSB7XG4gICAgICAgICAgICBpbnNlcnRQcmVmaXhTaWxlbnRGcmFtZSA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBsYXN0U2FtcGxlID0gdGhpcy5fYXVkaW9TZWdtZW50SW5mb0xpc3QuZ2V0TGFzdFNhbXBsZUJlZm9yZShmaXJzdFNhbXBsZU9yaWdpbmFsRHRzKVxuICAgICAgICBpZiAobGFzdFNhbXBsZSAhPSBudWxsKSB7XG4gICAgICAgICAgbGV0IGRpc3RhbmNlID0gKGZpcnN0U2FtcGxlT3JpZ2luYWxEdHMgLSAobGFzdFNhbXBsZS5vcmlnaW5hbER0cyArIGxhc3RTYW1wbGUuZHVyYXRpb24pKVxuICAgICAgICAgIGlmIChkaXN0YW5jZSA8PSAzKSB7XG4gICAgICAgICAgICBkaXN0YW5jZSA9IDBcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGV4cGVjdGVkRHRzID0gbGFzdFNhbXBsZS5kdHMgKyBsYXN0U2FtcGxlLmR1cmF0aW9uICsgZGlzdGFuY2VcbiAgICAgICAgICBkdHNDb3JyZWN0aW9uID0gZmlyc3RTYW1wbGVPcmlnaW5hbER0cyAtIGV4cGVjdGVkRHRzXG4gICAgICAgIH0gZWxzZSB7IC8vIGxhc3RTYW1wbGUgPT0gbnVsbCwgY2Fubm90IGZvdW5kXG4gICAgICAgICAgZHRzQ29ycmVjdGlvbiA9IDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbnNlcnRQcmVmaXhTaWxlbnRGcmFtZSkge1xuICAgICAgLy8gYWxpZ24gYXVkaW8gc2VnbWVudCBiZWdpbkR0cyB0byBtYXRjaCB3aXRoIGN1cnJlbnQgdmlkZW8gc2VnbWVudCdzIGJlZ2luRHRzXG4gICAgICBsZXQgZmlyc3RTYW1wbGVEdHMgPSBmaXJzdFNhbXBsZU9yaWdpbmFsRHRzIC0gZHRzQ29ycmVjdGlvblxuICAgICAgbGV0IHZpZGVvU2VnbWVudCA9IHRoaXMuX3ZpZGVvU2VnbWVudEluZm9MaXN0LmdldExhc3RTZWdtZW50QmVmb3JlKGZpcnN0U2FtcGxlT3JpZ2luYWxEdHMpXG4gICAgICBpZiAodmlkZW9TZWdtZW50ICE9IG51bGwgJiYgdmlkZW9TZWdtZW50LmJlZ2luRHRzIDwgZmlyc3RTYW1wbGVEdHMpIHtcbiAgICAgICAgbGV0IHNpbGVudFVuaXQgPSBBQUMuZ2V0U2lsZW50RnJhbWUodGhpcy5fYXVkaW9NZXRhLm9yaWdpbmFsQ29kZWMsIHRoaXMuX2F1ZGlvTWV0YS5jaGFubmVsQ291bnQpXG4gICAgICAgIGlmIChzaWxlbnRVbml0KSB7XG4gICAgICAgICAgbGV0IGR0cyA9IHZpZGVvU2VnbWVudC5iZWdpbkR0c1xuICAgICAgICAgIGxldCBzaWxlbnRGcmFtZUR1cmF0aW9uID0gZmlyc3RTYW1wbGVEdHMgLSB2aWRlb1NlZ21lbnQuYmVnaW5EdHNcbiAgICAgICAgICBMb2cudih0aGlzLlRBRywgYEluc2VydFByZWZpeFNpbGVudEF1ZGlvOiBkdHM6ICR7ZHRzfSwgZHVyYXRpb246ICR7c2lsZW50RnJhbWVEdXJhdGlvbn1gKVxuICAgICAgICAgIHNhbXBsZXMudW5zaGlmdCh7dW5pdDogc2lsZW50VW5pdCwgZHRzOiBkdHMsIHB0czogZHRzfSlcbiAgICAgICAgICBtZGF0Qnl0ZXMgKz0gc2lsZW50VW5pdC5ieXRlTGVuZ3RoXG4gICAgICAgIH0gLy8gc2lsZW50VW5pdCA9PSBudWxsOiBDYW5ub3QgZ2VuZXJhdGUsIHNraXBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc2VydFByZWZpeFNpbGVudEZyYW1lID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgbXA0U2FtcGxlcyA9IFtdXG5cbiAgICAvLyBDb3JyZWN0IGR0cyBmb3IgZWFjaCBzYW1wbGUsIGFuZCBjYWxjdWxhdGUgc2FtcGxlIGR1cmF0aW9uLiBUaGVuIG91dHB1dCB0byBtcDRTYW1wbGVzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzYW1wbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgc2FtcGxlID0gc2FtcGxlc1tpXVxuICAgICAgbGV0IHVuaXQgPSBzYW1wbGUudW5pdFxuICAgICAgbGV0IG9yaWdpbmFsRHRzID0gc2FtcGxlLmR0cyAtIHRoaXMuX2R0c0Jhc2VcbiAgICAgIGxldCBkdHMgPSBvcmlnaW5hbER0cyAtIGR0c0NvcnJlY3Rpb25cblxuICAgICAgaWYgKGZpcnN0RHRzID09PSAtMSkge1xuICAgICAgICBmaXJzdER0cyA9IGR0c1xuICAgICAgfVxuXG4gICAgICBsZXQgc2FtcGxlRHVyYXRpb24gPSAwXG5cbiAgICAgIGlmIChpICE9PSBzYW1wbGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgbGV0IG5leHREdHMgPSBzYW1wbGVzW2kgKyAxXS5kdHMgLSB0aGlzLl9kdHNCYXNlIC0gZHRzQ29ycmVjdGlvblxuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG5leHREdHMgLSBkdHNcbiAgICAgIH0gZWxzZSB7IC8vIHRoZSBsYXN0IHNhbXBsZVxuICAgICAgICBpZiAobGFzdFNhbXBsZSAhPSBudWxsKSB7IC8vIHVzZSBzdGFzaGVkIHNhbXBsZSdzIGR0cyB0byBjYWxjdWxhdGUgc2FtcGxlIGR1cmF0aW9uXG4gICAgICAgICAgbGV0IG5leHREdHMgPSBsYXN0U2FtcGxlLmR0cyAtIHRoaXMuX2R0c0Jhc2UgLSBkdHNDb3JyZWN0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBuZXh0RHRzIC0gZHRzXG4gICAgICAgIH0gZWxzZSBpZiAobXA0U2FtcGxlcy5sZW5ndGggPj0gMSkgeyAvLyB1c2Ugc2Vjb25kIGxhc3Qgc2FtcGxlIGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlIG9ubHkgb25lIHNhbXBsZSwgdXNlIHJlZmVyZW5jZSBzYW1wbGUgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IocmVmU2FtcGxlRHVyYXRpb24pXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IG5lZWRGaWxsU2lsZW50RnJhbWVzID0gZmFsc2VcbiAgICAgIGxldCBzaWxlbnRGcmFtZXMgPSBudWxsXG5cbiAgICAgIC8vIFNpbGVudCBmcmFtZSBnZW5lcmF0aW9uLCBpZiBsYXJnZSB0aW1lc3RhbXAgZ2FwIGRldGVjdGVkICYmIGNvbmZpZy5maXhBdWRpb1RpbWVzdGFtcEdhcFxuICAgICAgaWYgKHNhbXBsZUR1cmF0aW9uID4gcmVmU2FtcGxlRHVyYXRpb24gKiAxLjUgJiYgdGhpcy5fYXVkaW9NZXRhLmNvZGVjICE9PSAnbXAzJyAmJiB0aGlzLl9maWxsQXVkaW9UaW1lc3RhbXBHYXAgJiYgIUJyb3dzZXIuc2FmYXJpKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gaW5zZXJ0IHNpbGVudCBmcmFtZXMgdG8gZmlsbCB0aW1lc3RhbXAgZ2FwXG4gICAgICAgIG5lZWRGaWxsU2lsZW50RnJhbWVzID0gdHJ1ZVxuICAgICAgICBsZXQgZGVsdGEgPSBNYXRoLmFicyhzYW1wbGVEdXJhdGlvbiAtIHJlZlNhbXBsZUR1cmF0aW9uKVxuICAgICAgICBsZXQgZnJhbWVDb3VudCA9IE1hdGguY2VpbChkZWx0YSAvIHJlZlNhbXBsZUR1cmF0aW9uKVxuICAgICAgICBsZXQgY3VycmVudER0cyA9IGR0cyArIHJlZlNhbXBsZUR1cmF0aW9uIC8vIE5vdGljZTogaW4gZmxvYXRcblxuICAgICAgICBMb2cudyh0aGlzLlRBRywgJ0xhcmdlIGF1ZGlvIHRpbWVzdGFtcCBnYXAgZGV0ZWN0ZWQsIG1heSBjYXVzZSBBViBzeW5jIHRvIGRyaWZ0LiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NpbGVudCBmcmFtZXMgd2lsbCBiZSBnZW5lcmF0ZWQgdG8gYXZvaWQgdW5zeW5jLlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgZHRzOiAke2R0cyArIHNhbXBsZUR1cmF0aW9ufSBtcywgZXhwZWN0ZWQ6ICR7ZHRzICsgTWF0aC5yb3VuZChyZWZTYW1wbGVEdXJhdGlvbil9IG1zLCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGRlbHRhOiAke01hdGgucm91bmQoZGVsdGEpfSBtcywgZ2VuZXJhdGU6ICR7ZnJhbWVDb3VudH0gZnJhbWVzYClcblxuICAgICAgICBsZXQgc2lsZW50VW5pdCA9IEFBQy5nZXRTaWxlbnRGcmFtZSh0aGlzLl9hdWRpb01ldGEub3JpZ2luYWxDb2RlYywgdGhpcy5fYXVkaW9NZXRhLmNoYW5uZWxDb3VudClcbiAgICAgICAgaWYgKHNpbGVudFVuaXQgPT0gbnVsbCkge1xuICAgICAgICAgIExvZy53KHRoaXMuVEFHLCAnVW5hYmxlIHRvIGdlbmVyYXRlIHNpbGVudCBmcmFtZSBmb3IgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLl9hdWRpb01ldGEub3JpZ2luYWxDb2RlY30gd2l0aCAke3RoaXMuX2F1ZGlvTWV0YS5jaGFubmVsQ291bnR9IGNoYW5uZWxzLCByZXBlYXQgbGFzdCBmcmFtZWApXG4gICAgICAgICAgLy8gUmVwZWF0IGxhc3QgZnJhbWVcbiAgICAgICAgICBzaWxlbnRVbml0ID0gdW5pdFxuICAgICAgICB9XG4gICAgICAgIHNpbGVudEZyYW1lcyA9IFtdXG5cbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBmcmFtZUNvdW50OyBqKyspIHtcbiAgICAgICAgICBsZXQgaW50RHRzID0gTWF0aC5yb3VuZChjdXJyZW50RHRzKSAvLyByb3VuZCB0byBpbnRlZ2VyXG4gICAgICAgICAgaWYgKHNpbGVudEZyYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBTZXQgcHJldmlvdXMgZnJhbWUgc2FtcGxlIGR1cmF0aW9uXG4gICAgICAgICAgICBsZXQgcHJldmlvdXNGcmFtZSA9IHNpbGVudEZyYW1lc1tzaWxlbnRGcmFtZXMubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgIHByZXZpb3VzRnJhbWUuZHVyYXRpb24gPSBpbnREdHMgLSBwcmV2aW91c0ZyYW1lLmR0c1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgZnJhbWUgPSB7XG4gICAgICAgICAgICBkdHM6IGludER0cyxcbiAgICAgICAgICAgIHB0czogaW50RHRzLFxuICAgICAgICAgICAgY3RzOiAwLFxuICAgICAgICAgICAgdW5pdDogc2lsZW50VW5pdCxcbiAgICAgICAgICAgIHNpemU6IHNpbGVudFVuaXQuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLCAvLyB3YWl0IGZvciBuZXh0IHNhbXBsZVxuICAgICAgICAgICAgb3JpZ2luYWxEdHM6IG9yaWdpbmFsRHRzLFxuICAgICAgICAgICAgZmxhZ3M6IHtcbiAgICAgICAgICAgICAgaXNMZWFkaW5nOiAwLFxuICAgICAgICAgICAgICBkZXBlbmRzT246IDEsXG4gICAgICAgICAgICAgIGlzRGVwZW5kZWRPbjogMCxcbiAgICAgICAgICAgICAgaGFzUmVkdW5kYW5jeTogMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzaWxlbnRGcmFtZXMucHVzaChmcmFtZSlcbiAgICAgICAgICBtZGF0Qnl0ZXMgKz0gdW5pdC5ieXRlTGVuZ3RoXG4gICAgICAgICAgY3VycmVudER0cyArPSByZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGFzdCBmcmFtZTogYWxpZ24gZW5kIHRpbWUgdG8gbmV4dCBmcmFtZSBkdHNcbiAgICAgICAgbGV0IGxhc3RGcmFtZSA9IHNpbGVudEZyYW1lc1tzaWxlbnRGcmFtZXMubGVuZ3RoIC0gMV1cbiAgICAgICAgbGFzdEZyYW1lLmR1cmF0aW9uID0gZHRzICsgc2FtcGxlRHVyYXRpb24gLSBsYXN0RnJhbWUuZHRzXG5cbiAgICAgICAgLy8gc2lsZW50RnJhbWVzLmZvckVhY2goKGZyYW1lKSA9PiB7XG4gICAgICAgIC8vICAgICBMb2cudyh0aGlzLlRBRywgYFNpbGVudEF1ZGlvOiBkdHM6ICR7ZnJhbWUuZHRzfSwgZHVyYXRpb246ICR7ZnJhbWUuZHVyYXRpb259YCk7XG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIC8vIFNldCBjb3JyZWN0IHNhbXBsZSBkdXJhdGlvbiBmb3IgY3VycmVudCBmcmFtZVxuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IE1hdGgucm91bmQocmVmU2FtcGxlRHVyYXRpb24pXG4gICAgICB9XG5cbiAgICAgIG1wNFNhbXBsZXMucHVzaCh7XG4gICAgICAgIGR0czogZHRzLFxuICAgICAgICBwdHM6IGR0cyxcbiAgICAgICAgY3RzOiAwLFxuICAgICAgICB1bml0OiBzYW1wbGUudW5pdCxcbiAgICAgICAgc2l6ZTogc2FtcGxlLnVuaXQuYnl0ZUxlbmd0aCxcbiAgICAgICAgZHVyYXRpb246IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBvcmlnaW5hbER0czogb3JpZ2luYWxEdHMsXG4gICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgaXNMZWFkaW5nOiAwLFxuICAgICAgICAgIGRlcGVuZHNPbjogMSxcbiAgICAgICAgICBpc0RlcGVuZGVkT246IDAsXG4gICAgICAgICAgaGFzUmVkdW5kYW5jeTogMFxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBpZiAobmVlZEZpbGxTaWxlbnRGcmFtZXMpIHtcbiAgICAgICAgLy8gU2lsZW50IGZyYW1lcyBzaG91bGQgYmUgaW5zZXJ0ZWQgYWZ0ZXIgd3JvbmctZHVyYXRpb24gZnJhbWVcbiAgICAgICAgbXA0U2FtcGxlcy5wdXNoLmFwcGx5KG1wNFNhbXBsZXMsIHNpbGVudEZyYW1lcylcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhbGxvY2F0ZSBtZGF0Ym94XG4gICAgaWYgKG1wZWdSYXdUcmFjaykge1xuICAgICAgLy8gYWxsb2NhdGUgZm9yIHJhdyBtcGVnIGJ1ZmZlclxuICAgICAgbWRhdGJveCA9IG5ldyBVaW50OEFycmF5KG1kYXRCeXRlcylcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYWxsb2NhdGUgZm9yIGZtcDQgbWRhdCBib3hcbiAgICAgIG1kYXRib3ggPSBuZXcgVWludDhBcnJheShtZGF0Qnl0ZXMpXG4gICAgICAvLyBzaXplIGZpZWxkXG4gICAgICBtZGF0Ym94WzBdID0gKG1kYXRCeXRlcyA+Pj4gMjQpICYgMHhGRlxuICAgICAgbWRhdGJveFsxXSA9IChtZGF0Qnl0ZXMgPj4+IDE2KSAmIDB4RkZcbiAgICAgIG1kYXRib3hbMl0gPSAobWRhdEJ5dGVzID4+PiA4KSAmIDB4RkZcbiAgICAgIG1kYXRib3hbM10gPSAobWRhdEJ5dGVzKSAmIDB4RkZcbiAgICAgIC8vIHR5cGUgZmllbGQgKGZvdXJDQylcbiAgICAgIG1kYXRib3guc2V0KE1QNC50eXBlcy5tZGF0LCA0KVxuICAgIH1cblxuICAgIC8vIFdyaXRlIHNhbXBsZXMgaW50byBtZGF0Ym94XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtcDRTYW1wbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgdW5pdCA9IG1wNFNhbXBsZXNbaV0udW5pdFxuICAgICAgbWRhdGJveC5zZXQodW5pdCwgb2Zmc2V0KVxuICAgICAgb2Zmc2V0ICs9IHVuaXQuYnl0ZUxlbmd0aFxuICAgIH1cblxuICAgIGxldCBsYXRlc3QgPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV1cbiAgICBsYXN0RHRzID0gbGF0ZXN0LmR0cyArIGxhdGVzdC5kdXJhdGlvblxuICAgIHRoaXMuX2F1ZGlvTmV4dER0cyA9IGxhc3REdHNcblxuICAgIC8vIGZpbGwgbWVkaWEgc2VnbWVudCBpbmZvICYgYWRkIHRvIGluZm8gbGlzdFxuICAgIGxldCBpbmZvID0gbmV3IE1lZGlhU2VnbWVudEluZm8oKVxuICAgIGluZm8uYmVnaW5EdHMgPSBmaXJzdER0c1xuICAgIGluZm8uZW5kRHRzID0gbGFzdER0c1xuICAgIGluZm8uYmVnaW5QdHMgPSBmaXJzdER0c1xuICAgIGluZm8uZW5kUHRzID0gbGFzdER0c1xuICAgIGluZm8ub3JpZ2luYWxCZWdpbkR0cyA9IG1wNFNhbXBsZXNbMF0ub3JpZ2luYWxEdHNcbiAgICBpbmZvLm9yaWdpbmFsRW5kRHRzID0gbGF0ZXN0Lm9yaWdpbmFsRHRzICsgbGF0ZXN0LmR1cmF0aW9uXG4gICAgaW5mby5maXJzdFNhbXBsZSA9IG5ldyBTYW1wbGVJbmZvKG1wNFNhbXBsZXNbMF0uZHRzLFxuICAgICAgbXA0U2FtcGxlc1swXS5wdHMsXG4gICAgICBtcDRTYW1wbGVzWzBdLmR1cmF0aW9uLFxuICAgICAgbXA0U2FtcGxlc1swXS5vcmlnaW5hbER0cyxcbiAgICAgIGZhbHNlKVxuICAgIGluZm8ubGFzdFNhbXBsZSA9IG5ldyBTYW1wbGVJbmZvKGxhdGVzdC5kdHMsXG4gICAgICBsYXRlc3QucHRzLFxuICAgICAgbGF0ZXN0LmR1cmF0aW9uLFxuICAgICAgbGF0ZXN0Lm9yaWdpbmFsRHRzLFxuICAgICAgZmFsc2UpXG4gICAgaWYgKCF0aGlzLl9pc0xpdmUpIHtcbiAgICAgIHRoaXMuX2F1ZGlvU2VnbWVudEluZm9MaXN0LmFwcGVuZChpbmZvKVxuICAgIH1cblxuICAgIHRyYWNrLnNhbXBsZXMgPSBtcDRTYW1wbGVzXG4gICAgdHJhY2suc2VxdWVuY2VOdW1iZXIrK1xuXG4gICAgbGV0IG1vb2Zib3ggPSBudWxsXG5cbiAgICBpZiAobXBlZ1Jhd1RyYWNrKSB7XG4gICAgICAvLyBHZW5lcmF0ZSBlbXB0eSBidWZmZXIsIGJlY2F1c2UgdXNlbGVzcyBmb3IgcmF3IG1wZWdcbiAgICAgIG1vb2Zib3ggPSBuZXcgVWludDhBcnJheSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEdlbmVyYXRlIG1vb2YgZm9yIGZtcDQgc2VnbWVudFxuICAgICAgbW9vZmJveCA9IE1QNC5tb29mKHRyYWNrLCBmaXJzdER0cylcbiAgICB9XG5cbiAgICB0cmFjay5zYW1wbGVzID0gW11cbiAgICB0cmFjay5sZW5ndGggPSAwXG5cbiAgICBsZXQgc2VnbWVudCA9IHtcbiAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICBkYXRhOiB0aGlzLl9tZXJnZUJveGVzKG1vb2Zib3gsIG1kYXRib3gpLmJ1ZmZlcixcbiAgICAgIHNhbXBsZUNvdW50OiBtcDRTYW1wbGVzLmxlbmd0aCxcbiAgICAgIGluZm86IGluZm9cbiAgICB9XG5cbiAgICBpZiAobXBlZ1Jhd1RyYWNrICYmIGZpcnN0U2VnbWVudEFmdGVyU2Vlaykge1xuICAgICAgLy8gRm9yIE1QRUcgYXVkaW8gc3RyZWFtIGluIE1TRSwgaWYgc2Vla2luZyBvY2N1cnJlZCwgYmVmb3JlIGFwcGVuZGluZyBuZXcgYnVmZmVyXG4gICAgICAvLyBXZSBuZWVkIGV4cGxpY2l0bHkgc2V0IHRpbWVzdGFtcE9mZnNldCB0byB0aGUgZGVzaXJlZCBwb2ludCBpbiB0aW1lbGluZSBmb3IgbXBlZyBTb3VyY2VCdWZmZXIuXG4gICAgICBzZWdtZW50LnRpbWVzdGFtcE9mZnNldCA9IGZpcnN0RHRzXG4gICAgfVxuXG4gICAgdGhpcy5fb25NZWRpYVNlZ21lbnQoJ2F1ZGlvJywgc2VnbWVudClcbiAgfVxuXG4gIF9yZW11eFZpZGVvICh2aWRlb1RyYWNrLCBmb3JjZSkge1xuICAgIGlmICh0aGlzLl92aWRlb01ldGEgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IHRyYWNrID0gdmlkZW9UcmFja1xuICAgIGxldCBzYW1wbGVzID0gdHJhY2suc2FtcGxlc1xuICAgIGxldCBkdHNDb3JyZWN0aW9uXG4gICAgbGV0IGZpcnN0RHRzID0gLTEsIGxhc3REdHMgPSAtMVxuICAgIGxldCBmaXJzdFB0cyA9IC0xLCBsYXN0UHRzID0gLTFcblxuICAgIGlmICghc2FtcGxlcyB8fCBzYW1wbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmIChzYW1wbGVzLmxlbmd0aCA9PT0gMSAmJiAhZm9yY2UpIHtcbiAgICAgIC8vIElmIFtzYW1wbGUgY291bnQgaW4gY3VycmVudCBiYXRjaF0gPT09IDEgJiYgKGZvcmNlICE9IHRydWUpXG4gICAgICAvLyBJZ25vcmUgYW5kIGtlZXAgaW4gZGVtdXhlcidzIHF1ZXVlXG4gICAgICByZXR1cm5cbiAgICB9IC8vIGVsc2UgaWYgKGZvcmNlID09PSB0cnVlKSBkbyByZW11eFxuXG4gICAgbGV0IG9mZnNldCA9IDhcbiAgICBsZXQgbWRhdGJveCA9IG51bGxcbiAgICBsZXQgbWRhdEJ5dGVzID0gOCArIHZpZGVvVHJhY2subGVuZ3RoXG5cbiAgICBsZXQgbGFzdFNhbXBsZSA9IG51bGxcblxuICAgIC8vIFBvcCB0aGUgbGFzdFNhbXBsZSBhbmQgd2FpdGluZyBmb3Igc3Rhc2hcbiAgICBpZiAoc2FtcGxlcy5sZW5ndGggPiAxKSB7XG4gICAgICBsYXN0U2FtcGxlID0gc2FtcGxlcy5wb3AoKVxuICAgICAgbWRhdEJ5dGVzIC09IGxhc3RTYW1wbGUubGVuZ3RoXG4gICAgfVxuXG4gICAgLy8gSW5zZXJ0IFtzdGFzaGVkIGxhc3RTYW1wbGUgaW4gdGhlIHByZXZpb3VzIGJhdGNoXSB0byB0aGUgZnJvbnRcbiAgICBpZiAodGhpcy5fdmlkZW9TdGFzaGVkTGFzdFNhbXBsZSAhPSBudWxsKSB7XG4gICAgICBsZXQgc2FtcGxlID0gdGhpcy5fdmlkZW9TdGFzaGVkTGFzdFNhbXBsZVxuICAgICAgdGhpcy5fdmlkZW9TdGFzaGVkTGFzdFNhbXBsZSA9IG51bGxcbiAgICAgIHNhbXBsZXMudW5zaGlmdChzYW1wbGUpXG4gICAgICBtZGF0Qnl0ZXMgKz0gc2FtcGxlLmxlbmd0aFxuICAgIH1cblxuICAgIC8vIFN0YXNoIHRoZSBsYXN0U2FtcGxlIG9mIGN1cnJlbnQgYmF0Y2gsIHdhaXRpbmcgZm9yIG5leHQgYmF0Y2hcbiAgICBpZiAobGFzdFNhbXBsZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl92aWRlb1N0YXNoZWRMYXN0U2FtcGxlID0gbGFzdFNhbXBsZVxuICAgIH1cblxuICAgIGxldCBmaXJzdFNhbXBsZU9yaWdpbmFsRHRzID0gc2FtcGxlc1swXS5kdHMgLSB0aGlzLl9kdHNCYXNlXG5cbiAgICAvLyBjYWxjdWxhdGUgZHRzQ29ycmVjdGlvblxuICAgIGlmICh0aGlzLl92aWRlb05leHREdHMpIHtcbiAgICAgIGR0c0NvcnJlY3Rpb24gPSBmaXJzdFNhbXBsZU9yaWdpbmFsRHRzIC0gdGhpcy5fdmlkZW9OZXh0RHRzXG4gICAgfSBlbHNlIHsgLy8gdGhpcy5fdmlkZW9OZXh0RHRzID09IHVuZGVmaW5lZFxuICAgICAgaWYgKHRoaXMuX3ZpZGVvU2VnbWVudEluZm9MaXN0LmlzRW1wdHkoKSkge1xuICAgICAgICBkdHNDb3JyZWN0aW9uID0gMFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGxhc3RTYW1wbGUgPSB0aGlzLl92aWRlb1NlZ21lbnRJbmZvTGlzdC5nZXRMYXN0U2FtcGxlQmVmb3JlKGZpcnN0U2FtcGxlT3JpZ2luYWxEdHMpXG4gICAgICAgIGlmIChsYXN0U2FtcGxlICE9IG51bGwpIHtcbiAgICAgICAgICBsZXQgZGlzdGFuY2UgPSAoZmlyc3RTYW1wbGVPcmlnaW5hbER0cyAtIChsYXN0U2FtcGxlLm9yaWdpbmFsRHRzICsgbGFzdFNhbXBsZS5kdXJhdGlvbikpXG4gICAgICAgICAgaWYgKGRpc3RhbmNlIDw9IDMpIHtcbiAgICAgICAgICAgIGRpc3RhbmNlID0gMFxuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgZXhwZWN0ZWREdHMgPSBsYXN0U2FtcGxlLmR0cyArIGxhc3RTYW1wbGUuZHVyYXRpb24gKyBkaXN0YW5jZVxuICAgICAgICAgIGR0c0NvcnJlY3Rpb24gPSBmaXJzdFNhbXBsZU9yaWdpbmFsRHRzIC0gZXhwZWN0ZWREdHNcbiAgICAgICAgfSBlbHNlIHsgLy8gbGFzdFNhbXBsZSA9PSBudWxsLCBjYW5ub3QgZm91bmRcbiAgICAgICAgICBkdHNDb3JyZWN0aW9uID0gMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBpbmZvID0gbmV3IE1lZGlhU2VnbWVudEluZm8oKVxuICAgIGxldCBtcDRTYW1wbGVzID0gW11cblxuICAgIC8vIENvcnJlY3QgZHRzIGZvciBlYWNoIHNhbXBsZSwgYW5kIGNhbGN1bGF0ZSBzYW1wbGUgZHVyYXRpb24uIFRoZW4gb3V0cHV0IHRvIG1wNFNhbXBsZXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNhbXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBzYW1wbGUgPSBzYW1wbGVzW2ldXG4gICAgICBsZXQgb3JpZ2luYWxEdHMgPSBzYW1wbGUuZHRzIC0gdGhpcy5fZHRzQmFzZVxuICAgICAgbGV0IGlzS2V5ZnJhbWUgPSBzYW1wbGUuaXNLZXlmcmFtZVxuICAgICAgbGV0IGR0cyA9IG9yaWdpbmFsRHRzIC0gZHRzQ29ycmVjdGlvblxuICAgICAgbGV0IGN0cyA9IHNhbXBsZS5jdHNcbiAgICAgIGxldCBwdHMgPSBkdHMgKyBjdHNcblxuICAgICAgaWYgKGZpcnN0RHRzID09PSAtMSkge1xuICAgICAgICBmaXJzdER0cyA9IGR0c1xuICAgICAgICBmaXJzdFB0cyA9IHB0c1xuICAgICAgfVxuXG4gICAgICBsZXQgc2FtcGxlRHVyYXRpb24gPSAwXG5cbiAgICAgIGlmIChpICE9PSBzYW1wbGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgbGV0IG5leHREdHMgPSBzYW1wbGVzW2kgKyAxXS5kdHMgLSB0aGlzLl9kdHNCYXNlIC0gZHRzQ29ycmVjdGlvblxuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG5leHREdHMgLSBkdHNcbiAgICAgIH0gZWxzZSB7IC8vIHRoZSBsYXN0IHNhbXBsZVxuICAgICAgICBpZiAobGFzdFNhbXBsZSAhPSBudWxsKSB7IC8vIHVzZSBzdGFzaGVkIHNhbXBsZSdzIGR0cyB0byBjYWxjdWxhdGUgc2FtcGxlIGR1cmF0aW9uXG4gICAgICAgICAgbGV0IG5leHREdHMgPSBsYXN0U2FtcGxlLmR0cyAtIHRoaXMuX2R0c0Jhc2UgLSBkdHNDb3JyZWN0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBuZXh0RHRzIC0gZHRzXG4gICAgICAgIH0gZWxzZSBpZiAobXA0U2FtcGxlcy5sZW5ndGggPj0gMSkgeyAvLyB1c2Ugc2Vjb25kIGxhc3Qgc2FtcGxlIGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlIG9ubHkgb25lIHNhbXBsZSwgdXNlIHJlZmVyZW5jZSBzYW1wbGUgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IodGhpcy5fdmlkZW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0tleWZyYW1lKSB7XG4gICAgICAgIGxldCBzeW5jUG9pbnQgPSBuZXcgU2FtcGxlSW5mbyhkdHMsIHB0cywgc2FtcGxlRHVyYXRpb24sIHNhbXBsZS5kdHMsIHRydWUpXG4gICAgICAgIHN5bmNQb2ludC5maWxlcG9zaXRpb24gPSBzYW1wbGUuZmlsZXBvc2l0aW9uXG4gICAgICAgIGluZm8uYXBwZW5kU3luY1BvaW50KHN5bmNQb2ludClcbiAgICAgIH1cblxuICAgICAgbXA0U2FtcGxlcy5wdXNoKHtcbiAgICAgICAgZHRzOiBkdHMsXG4gICAgICAgIHB0czogcHRzLFxuICAgICAgICBjdHM6IGN0cyxcbiAgICAgICAgdW5pdHM6IHNhbXBsZS51bml0cyxcbiAgICAgICAgc2l6ZTogc2FtcGxlLmxlbmd0aCxcbiAgICAgICAgaXNLZXlmcmFtZTogaXNLZXlmcmFtZSxcbiAgICAgICAgZHVyYXRpb246IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBvcmlnaW5hbER0czogb3JpZ2luYWxEdHMsXG4gICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgaXNMZWFkaW5nOiAwLFxuICAgICAgICAgIGRlcGVuZHNPbjogaXNLZXlmcmFtZSA/IDIgOiAxLFxuICAgICAgICAgIGlzRGVwZW5kZWRPbjogaXNLZXlmcmFtZSA/IDEgOiAwLFxuICAgICAgICAgIGhhc1JlZHVuZGFuY3k6IDAsXG4gICAgICAgICAgaXNOb25TeW5jOiBpc0tleWZyYW1lID8gMCA6IDFcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBhbGxvY2F0ZSBtZGF0Ym94XG4gICAgbWRhdGJveCA9IG5ldyBVaW50OEFycmF5KG1kYXRCeXRlcylcbiAgICBtZGF0Ym94WzBdID0gKG1kYXRCeXRlcyA+Pj4gMjQpICYgMHhGRlxuICAgIG1kYXRib3hbMV0gPSAobWRhdEJ5dGVzID4+PiAxNikgJiAweEZGXG4gICAgbWRhdGJveFsyXSA9IChtZGF0Qnl0ZXMgPj4+IDgpICYgMHhGRlxuICAgIG1kYXRib3hbM10gPSAobWRhdEJ5dGVzKSAmIDB4RkZcbiAgICBtZGF0Ym94LnNldChNUDQudHlwZXMubWRhdCwgNClcblxuICAgIC8vIFdyaXRlIHNhbXBsZXMgaW50byBtZGF0Ym94XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtcDRTYW1wbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgdW5pdHMgPSBtcDRTYW1wbGVzW2ldLnVuaXRzXG4gICAgICB3aGlsZSAodW5pdHMubGVuZ3RoKSB7XG4gICAgICAgIGxldCB1bml0ID0gdW5pdHMuc2hpZnQoKVxuICAgICAgICBsZXQgZGF0YSA9IHVuaXQuZGF0YVxuICAgICAgICBtZGF0Ym94LnNldChkYXRhLCBvZmZzZXQpXG4gICAgICAgIG9mZnNldCArPSBkYXRhLmJ5dGVMZW5ndGhcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgbGF0ZXN0ID0gbXA0U2FtcGxlc1ttcDRTYW1wbGVzLmxlbmd0aCAtIDFdXG4gICAgbGFzdER0cyA9IGxhdGVzdC5kdHMgKyBsYXRlc3QuZHVyYXRpb25cbiAgICBsYXN0UHRzID0gbGF0ZXN0LnB0cyArIGxhdGVzdC5kdXJhdGlvblxuICAgIHRoaXMuX3ZpZGVvTmV4dER0cyA9IGxhc3REdHNcblxuICAgIC8vIGZpbGwgbWVkaWEgc2VnbWVudCBpbmZvICYgYWRkIHRvIGluZm8gbGlzdFxuICAgIGluZm8uYmVnaW5EdHMgPSBmaXJzdER0c1xuICAgIGluZm8uZW5kRHRzID0gbGFzdER0c1xuICAgIGluZm8uYmVnaW5QdHMgPSBmaXJzdFB0c1xuICAgIGluZm8uZW5kUHRzID0gbGFzdFB0c1xuICAgIGluZm8ub3JpZ2luYWxCZWdpbkR0cyA9IG1wNFNhbXBsZXNbMF0ub3JpZ2luYWxEdHNcbiAgICBpbmZvLm9yaWdpbmFsRW5kRHRzID0gbGF0ZXN0Lm9yaWdpbmFsRHRzICsgbGF0ZXN0LmR1cmF0aW9uXG4gICAgaW5mby5maXJzdFNhbXBsZSA9IG5ldyBTYW1wbGVJbmZvKG1wNFNhbXBsZXNbMF0uZHRzLFxuICAgICAgbXA0U2FtcGxlc1swXS5wdHMsXG4gICAgICBtcDRTYW1wbGVzWzBdLmR1cmF0aW9uLFxuICAgICAgbXA0U2FtcGxlc1swXS5vcmlnaW5hbER0cyxcbiAgICAgIG1wNFNhbXBsZXNbMF0uaXNLZXlmcmFtZSlcbiAgICBpbmZvLmxhc3RTYW1wbGUgPSBuZXcgU2FtcGxlSW5mbyhsYXRlc3QuZHRzLFxuICAgICAgbGF0ZXN0LnB0cyxcbiAgICAgIGxhdGVzdC5kdXJhdGlvbixcbiAgICAgIGxhdGVzdC5vcmlnaW5hbER0cyxcbiAgICAgIGxhdGVzdC5pc0tleWZyYW1lKVxuICAgIGlmICghdGhpcy5faXNMaXZlKSB7XG4gICAgICB0aGlzLl92aWRlb1NlZ21lbnRJbmZvTGlzdC5hcHBlbmQoaW5mbylcbiAgICB9XG5cbiAgICB0cmFjay5zYW1wbGVzID0gbXA0U2FtcGxlc1xuICAgIHRyYWNrLnNlcXVlbmNlTnVtYmVyKytcblxuICAgIC8vIHdvcmthcm91bmQgZm9yIGNocm9tZSA8IDUwOiBmb3JjZSBmaXJzdCBzYW1wbGUgYXMgYSByYW5kb20gYWNjZXNzIHBvaW50XG4gICAgLy8gc2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTIyOTQxMlxuICAgIGlmICh0aGlzLl9mb3JjZUZpcnN0SURSKSB7XG4gICAgICBsZXQgZmxhZ3MgPSBtcDRTYW1wbGVzWzBdLmZsYWdzXG4gICAgICBmbGFncy5kZXBlbmRzT24gPSAyXG4gICAgICBmbGFncy5pc05vblN5bmMgPSAwXG4gICAgfVxuXG4gICAgbGV0IG1vb2Zib3ggPSBNUDQubW9vZih0cmFjaywgZmlyc3REdHMpXG4gICAgdHJhY2suc2FtcGxlcyA9IFtdXG4gICAgdHJhY2subGVuZ3RoID0gMFxuXG4gICAgdGhpcy5fb25NZWRpYVNlZ21lbnQoJ3ZpZGVvJywge1xuICAgICAgdHlwZTogJ3ZpZGVvJyxcbiAgICAgIGRhdGE6IHRoaXMuX21lcmdlQm94ZXMobW9vZmJveCwgbWRhdGJveCkuYnVmZmVyLFxuICAgICAgc2FtcGxlQ291bnQ6IG1wNFNhbXBsZXMubGVuZ3RoLFxuICAgICAgaW5mbzogaW5mb1xuICAgIH0pXG4gIH1cblxuICBfbWVyZ2VCb3hlcyAobW9vZiwgbWRhdCkge1xuICAgIGxldCByZXN1bHQgPSBuZXcgVWludDhBcnJheShtb29mLmJ5dGVMZW5ndGggKyBtZGF0LmJ5dGVMZW5ndGgpXG4gICAgcmVzdWx0LnNldChtb29mLCAwKVxuICAgIHJlc3VsdC5zZXQobWRhdCwgbW9vZi5ieXRlTGVuZ3RoKVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNUDRSZW11eGVyXG4iLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxubGV0IEJyb3dzZXIgPSB7fTtcblxuZnVuY3Rpb24gZGV0ZWN0KCkge1xuICAgIC8vIG1vZGlmaWVkIGZyb20ganF1ZXJ5LWJyb3dzZXItcGx1Z2luXG5cbiAgICBsZXQgdWEgPSBzZWxmLm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcblxuICAgIGxldCBtYXRjaCA9IC8oZWRnZSlcXC8oW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIC8ob3ByKVtcXC9dKFtcXHcuXSspLy5leGVjKHVhKSB8fFxuICAgICAgICAvKGNocm9tZSlbIFxcL10oW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIC8oaWVtb2JpbGUpW1xcL10oW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIC8odmVyc2lvbikoYXBwbGV3ZWJraXQpWyBcXC9dKFtcXHcuXSspLiooc2FmYXJpKVsgXFwvXShbXFx3Ll0rKS8uZXhlYyh1YSkgfHxcbiAgICAgICAgLyh3ZWJraXQpWyBcXC9dKFtcXHcuXSspLioodmVyc2lvbilbIFxcL10oW1xcdy5dKykuKihzYWZhcmkpWyBcXC9dKFtcXHcuXSspLy5leGVjKHVhKSB8fFxuICAgICAgICAvKHdlYmtpdClbIFxcL10oW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIC8ob3BlcmEpKD86Lip2ZXJzaW9ufClbIFxcL10oW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIC8obXNpZSkgKFtcXHcuXSspLy5leGVjKHVhKSB8fFxuICAgICAgICB1YS5pbmRleE9mKCd0cmlkZW50JykgPj0gMCAmJiAvKHJ2KSg/Ojp8ICkoW1xcdy5dKykvLmV4ZWModWEpIHx8XG4gICAgICAgIHVhLmluZGV4T2YoJ2NvbXBhdGlibGUnKSA8IDAgJiYgLyhmaXJlZm94KVsgXFwvXShbXFx3Ll0rKS8uZXhlYyh1YSkgfHxcbiAgICAgICAgW107XG5cbiAgICBsZXQgcGxhdGZvcm1fbWF0Y2ggPSAvKGlwYWQpLy5leGVjKHVhKSB8fFxuICAgICAgICAvKGlwb2QpLy5leGVjKHVhKSB8fFxuICAgICAgICAvKHdpbmRvd3MgcGhvbmUpLy5leGVjKHVhKSB8fFxuICAgICAgICAvKGlwaG9uZSkvLmV4ZWModWEpIHx8XG4gICAgICAgIC8oa2luZGxlKS8uZXhlYyh1YSkgfHxcbiAgICAgICAgLyhhbmRyb2lkKS8uZXhlYyh1YSkgfHxcbiAgICAgICAgLyh3aW5kb3dzKS8uZXhlYyh1YSkgfHxcbiAgICAgICAgLyhtYWMpLy5leGVjKHVhKSB8fFxuICAgICAgICAvKGxpbnV4KS8uZXhlYyh1YSkgfHxcbiAgICAgICAgLyhjcm9zKS8uZXhlYyh1YSkgfHxcbiAgICAgICAgW107XG5cbiAgICBsZXQgbWF0Y2hlZCA9IHtcbiAgICAgICAgYnJvd3NlcjogbWF0Y2hbNV0gfHwgbWF0Y2hbM10gfHwgbWF0Y2hbMV0gfHwgJycsXG4gICAgICAgIHZlcnNpb246IG1hdGNoWzJdIHx8IG1hdGNoWzRdIHx8ICcwJyxcbiAgICAgICAgbWFqb3JWZXJzaW9uOiBtYXRjaFs0XSB8fCBtYXRjaFsyXSB8fCAnMCcsXG4gICAgICAgIHBsYXRmb3JtOiBwbGF0Zm9ybV9tYXRjaFswXSB8fCAnJ1xuICAgIH07XG5cbiAgICBsZXQgYnJvd3NlciA9IHt9O1xuICAgIGlmIChtYXRjaGVkLmJyb3dzZXIpIHtcbiAgICAgICAgYnJvd3NlclttYXRjaGVkLmJyb3dzZXJdID0gdHJ1ZTtcblxuICAgICAgICBsZXQgdmVyc2lvbkFycmF5ID0gbWF0Y2hlZC5tYWpvclZlcnNpb24uc3BsaXQoJy4nKTtcbiAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0ge1xuICAgICAgICAgICAgbWFqb3I6IHBhcnNlSW50KG1hdGNoZWQubWFqb3JWZXJzaW9uLCAxMCksXG4gICAgICAgICAgICBzdHJpbmc6IG1hdGNoZWQudmVyc2lvblxuICAgICAgICB9O1xuICAgICAgICBpZiAodmVyc2lvbkFycmF5Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGJyb3dzZXIudmVyc2lvbi5taW5vciA9IHBhcnNlSW50KHZlcnNpb25BcnJheVsxXSwgMTApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2ZXJzaW9uQXJyYXkubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgYnJvd3Nlci52ZXJzaW9uLmJ1aWxkID0gcGFyc2VJbnQodmVyc2lvbkFycmF5WzJdLCAxMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWF0Y2hlZC5wbGF0Zm9ybSkge1xuICAgICAgICBicm93c2VyW21hdGNoZWQucGxhdGZvcm1dID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoYnJvd3Nlci5jaHJvbWUgfHwgYnJvd3Nlci5vcHIgfHwgYnJvd3Nlci5zYWZhcmkpIHtcbiAgICAgICAgYnJvd3Nlci53ZWJraXQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIE1TSUUuIElFMTEgaGFzICdydicgaWRlbnRpZmVyXG4gICAgaWYgKGJyb3dzZXIucnYgfHwgYnJvd3Nlci5pZW1vYmlsZSkge1xuICAgICAgICBpZiAoYnJvd3Nlci5ydikge1xuICAgICAgICAgICAgZGVsZXRlIGJyb3dzZXIucnY7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1zaWUgPSAnbXNpZSc7XG4gICAgICAgIG1hdGNoZWQuYnJvd3NlciA9IG1zaWU7XG4gICAgICAgIGJyb3dzZXJbbXNpZV0gPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIE1pY3Jvc29mdCBFZGdlXG4gICAgaWYgKGJyb3dzZXIuZWRnZSkge1xuICAgICAgICBkZWxldGUgYnJvd3Nlci5lZGdlO1xuICAgICAgICBsZXQgbXNlZGdlID0gJ21zZWRnZSc7XG4gICAgICAgIG1hdGNoZWQuYnJvd3NlciA9IG1zZWRnZTtcbiAgICAgICAgYnJvd3Nlclttc2VkZ2VdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBPcGVyYSAxNStcbiAgICBpZiAoYnJvd3Nlci5vcHIpIHtcbiAgICAgICAgbGV0IG9wZXJhID0gJ29wZXJhJztcbiAgICAgICAgbWF0Y2hlZC5icm93c2VyID0gb3BlcmE7XG4gICAgICAgIGJyb3dzZXJbb3BlcmFdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBTdG9jayBhbmRyb2lkIGJyb3dzZXJzIGFyZSBtYXJrZWQgYXMgU2FmYXJpXG4gICAgaWYgKGJyb3dzZXIuc2FmYXJpICYmIGJyb3dzZXIuYW5kcm9pZCkge1xuICAgICAgICBsZXQgYW5kcm9pZCA9ICdhbmRyb2lkJztcbiAgICAgICAgbWF0Y2hlZC5icm93c2VyID0gYW5kcm9pZDtcbiAgICAgICAgYnJvd3NlclthbmRyb2lkXSA9IHRydWU7XG4gICAgfVxuXG4gICAgYnJvd3Nlci5uYW1lID0gbWF0Y2hlZC5icm93c2VyO1xuICAgIGJyb3dzZXIucGxhdGZvcm0gPSBtYXRjaGVkLnBsYXRmb3JtO1xuXG4gICAgZm9yIChsZXQga2V5IGluIEJyb3dzZXIpIHtcbiAgICAgICAgaWYgKEJyb3dzZXIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgZGVsZXRlIEJyb3dzZXJba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKEJyb3dzZXIsIGJyb3dzZXIpO1xufVxuXG5kZXRlY3QoKTtcblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlcjsiLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGNsYXNzIFJ1bnRpbWVFeGNlcHRpb24ge1xuXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICB0aGlzLl9tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB9XG5cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdSdW50aW1lRXhjZXB0aW9uJztcbiAgICB9XG5cbiAgICBnZXQgbWVzc2FnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21lc3NhZ2U7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyAnOiAnICsgdGhpcy5tZXNzYWdlO1xuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgSWxsZWdhbFN0YXRlRXhjZXB0aW9uIGV4dGVuZHMgUnVudGltZUV4Y2VwdGlvbiB7XG5cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ0lsbGVnYWxTdGF0ZUV4Y2VwdGlvbic7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQXJndW1lbnRFeGNlcHRpb24gZXh0ZW5kcyBSdW50aW1lRXhjZXB0aW9uIHtcblxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uJztcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIE5vdEltcGxlbWVudGVkRXhjZXB0aW9uIGV4dGVuZHMgUnVudGltZUV4Y2VwdGlvbiB7XG5cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ05vdEltcGxlbWVudGVkRXhjZXB0aW9uJztcbiAgICB9XG5cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgQmlsaWJpbGkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvciB6aGVuZyBxaWFuIDx4cXFAeHFxLmltPlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cydcblxuY2xhc3MgTG9nIHtcbiAgc3RhdGljIGUgKHRhZywgbXNnKSB7XG4gICAgaWYgKCF0YWcgfHwgTG9nLkZPUkNFX0dMT0JBTF9UQUcpIHsgdGFnID0gTG9nLkdMT0JBTF9UQUcgfVxuXG4gICAgbGV0IHN0ciA9IGBbJHt0YWd9XSA+ICR7bXNnfWBcblxuICAgIGlmIChMb2cuRU5BQkxFX0NBTExCQUNLKSB7XG4gICAgICBMb2cuZW1pdHRlci5lbWl0KCdsb2cnLCAnZXJyb3InLCBzdHIpXG4gICAgfVxuXG4gICAgaWYgKCFMb2cuRU5BQkxFX0VSUk9SKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoY29uc29sZS5lcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihzdHIpXG4gICAgfSBlbHNlIGlmIChjb25zb2xlLndhcm4pIHtcbiAgICAgIGNvbnNvbGUud2FybihzdHIpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKHN0cilcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgaSAodGFnLCBtc2cpIHtcbiAgICBpZiAoIXRhZyB8fCBMb2cuRk9SQ0VfR0xPQkFMX1RBRykgeyB0YWcgPSBMb2cuR0xPQkFMX1RBRyB9XG5cbiAgICBsZXQgc3RyID0gYFske3RhZ31dID4gJHttc2d9YFxuXG4gICAgaWYgKExvZy5FTkFCTEVfQ0FMTEJBQ0spIHtcbiAgICAgIExvZy5lbWl0dGVyLmVtaXQoJ2xvZycsICdpbmZvJywgc3RyKVxuICAgIH1cblxuICAgIGlmICghTG9nLkVOQUJMRV9JTkZPKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoY29uc29sZS5pbmZvKSB7XG4gICAgICBjb25zb2xlLmluZm8oc3RyKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhzdHIpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHcgKHRhZywgbXNnKSB7XG4gICAgaWYgKCF0YWcgfHwgTG9nLkZPUkNFX0dMT0JBTF9UQUcpIHsgdGFnID0gTG9nLkdMT0JBTF9UQUcgfVxuXG4gICAgbGV0IHN0ciA9IGBbJHt0YWd9XSA+ICR7bXNnfWBcblxuICAgIGlmIChMb2cuRU5BQkxFX0NBTExCQUNLKSB7XG4gICAgICBMb2cuZW1pdHRlci5lbWl0KCdsb2cnLCAnd2FybicsIHN0cilcbiAgICB9XG5cbiAgICBpZiAoIUxvZy5FTkFCTEVfV0FSTikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGNvbnNvbGUud2Fybikge1xuICAgICAgY29uc29sZS53YXJuKHN0cilcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coc3RyKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBkICh0YWcsIG1zZykge1xuICAgIGlmICghdGFnIHx8IExvZy5GT1JDRV9HTE9CQUxfVEFHKSB7IHRhZyA9IExvZy5HTE9CQUxfVEFHIH1cblxuICAgIGxldCBzdHIgPSBgWyR7dGFnfV0gPiAke21zZ31gXG5cbiAgICBpZiAoTG9nLkVOQUJMRV9DQUxMQkFDSykge1xuICAgICAgTG9nLmVtaXR0ZXIuZW1pdCgnbG9nJywgJ2RlYnVnJywgc3RyKVxuICAgIH1cblxuICAgIGlmICghTG9nLkVOQUJMRV9ERUJVRykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGNvbnNvbGUuZGVidWcpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoc3RyKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhzdHIpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHYgKHRhZywgbXNnKSB7XG4gICAgaWYgKCF0YWcgfHwgTG9nLkZPUkNFX0dMT0JBTF9UQUcpIHsgdGFnID0gTG9nLkdMT0JBTF9UQUcgfVxuXG4gICAgbGV0IHN0ciA9IGBbJHt0YWd9XSA+ICR7bXNnfWBcblxuICAgIGlmIChMb2cuRU5BQkxFX0NBTExCQUNLKSB7XG4gICAgICBMb2cuZW1pdHRlci5lbWl0KCdsb2cnLCAndmVyYm9zZScsIHN0cilcbiAgICB9XG5cbiAgICBpZiAoIUxvZy5FTkFCTEVfVkVSQk9TRSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coc3RyKVxuICB9XG59XG5cbkxvZy5HTE9CQUxfVEFHID0gJ2Zsdi5qcydcbkxvZy5GT1JDRV9HTE9CQUxfVEFHID0gZmFsc2VcbkxvZy5FTkFCTEVfRVJST1IgPSB0cnVlXG5Mb2cuRU5BQkxFX0lORk8gPSB0cnVlXG5Mb2cuRU5BQkxFX1dBUk4gPSB0cnVlXG5Mb2cuRU5BQkxFX0RFQlVHID0gdHJ1ZVxuTG9nLkVOQUJMRV9WRVJCT1NFID0gdHJ1ZVxuXG5Mb2cuRU5BQkxFX0NBTExCQUNLID0gZmFsc2VcblxuTG9nLmVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKClcblxuZXhwb3J0IGRlZmF1bHQgTG9nXG4iLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnO1xuaW1wb3J0IExvZyBmcm9tICcuL2xvZ2dlci5qcyc7XG5cbmNsYXNzIExvZ2dpbmdDb250cm9sIHtcblxuICAgIHN0YXRpYyBnZXQgZm9yY2VHbG9iYWxUYWcoKSB7XG4gICAgICAgIHJldHVybiBMb2cuRk9SQ0VfR0xPQkFMX1RBRztcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0IGZvcmNlR2xvYmFsVGFnKGVuYWJsZSkge1xuICAgICAgICBMb2cuRk9SQ0VfR0xPQkFMX1RBRyA9IGVuYWJsZTtcbiAgICAgICAgTG9nZ2luZ0NvbnRyb2wuX25vdGlmeUNoYW5nZSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgZ2xvYmFsVGFnKCkge1xuICAgICAgICByZXR1cm4gTG9nLkdMT0JBTF9UQUc7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldCBnbG9iYWxUYWcodGFnKSB7XG4gICAgICAgIExvZy5HTE9CQUxfVEFHID0gdGFnO1xuICAgICAgICBMb2dnaW5nQ29udHJvbC5fbm90aWZ5Q2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBlbmFibGVBbGwoKSB7XG4gICAgICAgIHJldHVybiBMb2cuRU5BQkxFX1ZFUkJPU0VcbiAgICAgICAgICAgICYmIExvZy5FTkFCTEVfREVCVUdcbiAgICAgICAgICAgICYmIExvZy5FTkFCTEVfSU5GT1xuICAgICAgICAgICAgJiYgTG9nLkVOQUJMRV9XQVJOXG4gICAgICAgICAgICAmJiBMb2cuRU5BQkxFX0VSUk9SO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXQgZW5hYmxlQWxsKGVuYWJsZSkge1xuICAgICAgICBMb2cuRU5BQkxFX1ZFUkJPU0UgPSBlbmFibGU7XG4gICAgICAgIExvZy5FTkFCTEVfREVCVUcgPSBlbmFibGU7XG4gICAgICAgIExvZy5FTkFCTEVfSU5GTyA9IGVuYWJsZTtcbiAgICAgICAgTG9nLkVOQUJMRV9XQVJOID0gZW5hYmxlO1xuICAgICAgICBMb2cuRU5BQkxFX0VSUk9SID0gZW5hYmxlO1xuICAgICAgICBMb2dnaW5nQ29udHJvbC5fbm90aWZ5Q2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBlbmFibGVEZWJ1ZygpIHtcbiAgICAgICAgcmV0dXJuIExvZy5FTkFCTEVfREVCVUc7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldCBlbmFibGVEZWJ1ZyhlbmFibGUpIHtcbiAgICAgICAgTG9nLkVOQUJMRV9ERUJVRyA9IGVuYWJsZTtcbiAgICAgICAgTG9nZ2luZ0NvbnRyb2wuX25vdGlmeUNoYW5nZSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgZW5hYmxlVmVyYm9zZSgpIHtcbiAgICAgICAgcmV0dXJuIExvZy5FTkFCTEVfVkVSQk9TRTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0IGVuYWJsZVZlcmJvc2UoZW5hYmxlKSB7XG4gICAgICAgIExvZy5FTkFCTEVfVkVSQk9TRSA9IGVuYWJsZTtcbiAgICAgICAgTG9nZ2luZ0NvbnRyb2wuX25vdGlmeUNoYW5nZSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgZW5hYmxlSW5mbygpIHtcbiAgICAgICAgcmV0dXJuIExvZy5FTkFCTEVfSU5GTztcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0IGVuYWJsZUluZm8oZW5hYmxlKSB7XG4gICAgICAgIExvZy5FTkFCTEVfSU5GTyA9IGVuYWJsZTtcbiAgICAgICAgTG9nZ2luZ0NvbnRyb2wuX25vdGlmeUNoYW5nZSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgZW5hYmxlV2FybigpIHtcbiAgICAgICAgcmV0dXJuIExvZy5FTkFCTEVfV0FSTjtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0IGVuYWJsZVdhcm4oZW5hYmxlKSB7XG4gICAgICAgIExvZy5FTkFCTEVfV0FSTiA9IGVuYWJsZTtcbiAgICAgICAgTG9nZ2luZ0NvbnRyb2wuX25vdGlmeUNoYW5nZSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgZW5hYmxlRXJyb3IoKSB7XG4gICAgICAgIHJldHVybiBMb2cuRU5BQkxFX0VSUk9SO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXQgZW5hYmxlRXJyb3IoZW5hYmxlKSB7XG4gICAgICAgIExvZy5FTkFCTEVfRVJST1IgPSBlbmFibGU7XG4gICAgICAgIExvZ2dpbmdDb250cm9sLl9ub3RpZnlDaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0Q29uZmlnKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2xvYmFsVGFnOiBMb2cuR0xPQkFMX1RBRyxcbiAgICAgICAgICAgIGZvcmNlR2xvYmFsVGFnOiBMb2cuRk9SQ0VfR0xPQkFMX1RBRyxcbiAgICAgICAgICAgIGVuYWJsZVZlcmJvc2U6IExvZy5FTkFCTEVfVkVSQk9TRSxcbiAgICAgICAgICAgIGVuYWJsZURlYnVnOiBMb2cuRU5BQkxFX0RFQlVHLFxuICAgICAgICAgICAgZW5hYmxlSW5mbzogTG9nLkVOQUJMRV9JTkZPLFxuICAgICAgICAgICAgZW5hYmxlV2FybjogTG9nLkVOQUJMRV9XQVJOLFxuICAgICAgICAgICAgZW5hYmxlRXJyb3I6IExvZy5FTkFCTEVfRVJST1IsXG4gICAgICAgICAgICBlbmFibGVDYWxsYmFjazogTG9nLkVOQUJMRV9DQUxMQkFDS1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBhcHBseUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgTG9nLkdMT0JBTF9UQUcgPSBjb25maWcuZ2xvYmFsVGFnO1xuICAgICAgICBMb2cuRk9SQ0VfR0xPQkFMX1RBRyA9IGNvbmZpZy5mb3JjZUdsb2JhbFRhZztcbiAgICAgICAgTG9nLkVOQUJMRV9WRVJCT1NFID0gY29uZmlnLmVuYWJsZVZlcmJvc2U7XG4gICAgICAgIExvZy5FTkFCTEVfREVCVUcgPSBjb25maWcuZW5hYmxlRGVidWc7XG4gICAgICAgIExvZy5FTkFCTEVfSU5GTyA9IGNvbmZpZy5lbmFibGVJbmZvO1xuICAgICAgICBMb2cuRU5BQkxFX1dBUk4gPSBjb25maWcuZW5hYmxlV2FybjtcbiAgICAgICAgTG9nLkVOQUJMRV9FUlJPUiA9IGNvbmZpZy5lbmFibGVFcnJvcjtcbiAgICAgICAgTG9nLkVOQUJMRV9DQUxMQkFDSyA9IGNvbmZpZy5lbmFibGVDYWxsYmFjaztcbiAgICB9XG5cbiAgICBzdGF0aWMgX25vdGlmeUNoYW5nZSgpIHtcbiAgICAgICAgbGV0IGVtaXR0ZXIgPSBMb2dnaW5nQ29udHJvbC5lbWl0dGVyO1xuXG4gICAgICAgIGlmIChlbWl0dGVyLmxpc3RlbmVyQ291bnQoJ2NoYW5nZScpID4gMCkge1xuICAgICAgICAgICAgbGV0IGNvbmZpZyA9IExvZ2dpbmdDb250cm9sLmdldENvbmZpZygpO1xuICAgICAgICAgICAgZW1pdHRlci5lbWl0KCdjaGFuZ2UnLCBjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHJlZ2lzdGVyTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgTG9nZ2luZ0NvbnRyb2wuZW1pdHRlci5hZGRMaXN0ZW5lcignY2hhbmdlJywgbGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICBMb2dnaW5nQ29udHJvbC5lbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdjaGFuZ2UnLCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgc3RhdGljIGFkZExvZ0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIExvZy5lbWl0dGVyLmFkZExpc3RlbmVyKCdsb2cnLCBsaXN0ZW5lcik7XG4gICAgICAgIGlmIChMb2cuZW1pdHRlci5saXN0ZW5lckNvdW50KCdsb2cnKSA+IDApIHtcbiAgICAgICAgICAgIExvZy5FTkFCTEVfQ0FMTEJBQ0sgPSB0cnVlO1xuICAgICAgICAgICAgTG9nZ2luZ0NvbnRyb2wuX25vdGlmeUNoYW5nZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHJlbW92ZUxvZ0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIExvZy5lbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdsb2cnLCBsaXN0ZW5lcik7XG4gICAgICAgIGlmIChMb2cuZW1pdHRlci5saXN0ZW5lckNvdW50KCdsb2cnKSA9PT0gMCkge1xuICAgICAgICAgICAgTG9nLkVOQUJMRV9DQUxMQkFDSyA9IGZhbHNlO1xuICAgICAgICAgICAgTG9nZ2luZ0NvbnRyb2wuX25vdGlmeUNoYW5nZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbkxvZ2dpbmdDb250cm9sLmVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2dpbmdDb250cm9sOyIsIi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgQmlsaWJpbGkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogQGF1dGhvciB6aGVuZyBxaWFuIDx4cXFAeHFxLmltPlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5jbGFzcyBQb2x5ZmlsbCB7XG5cbiAgICBzdGF0aWMgaW5zdGFsbCgpIHtcbiAgICAgICAgLy8gRVM2IE9iamVjdC5zZXRQcm90b3R5cGVPZlxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKG9iaiwgcHJvdG8pIHtcbiAgICAgICAgICAgIG9iai5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gRVM2IE9iamVjdC5hc3NpZ25cbiAgICAgICAgT2JqZWN0LmFzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgb3V0cHV0ID0gT2JqZWN0KHRhcmdldCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBFUzYgUHJvbWlzZSAobWlzc2luZyBzdXBwb3J0IGluIElFMTEpXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZi5Qcm9taXNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXF1aXJlKCdlczYtcHJvbWlzZScpLnBvbHlmaWxsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuUG9seWZpbGwuaW5zdGFsbCgpO1xuXG5leHBvcnQgZGVmYXVsdCBQb2x5ZmlsbDsiLCIvKlxuICogQ29weXJpZ2h0IChDKSAyMDE2IEJpbGliaWxpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgZmlsZSBpcyBkZXJpdmVkIGZyb20gQysrIHByb2plY3QgbGliV2luVEY4IChodHRwczovL2dpdGh1Yi5jb20vbTEzMjUzL2xpYldpblRGOClcbiAqIEBhdXRob3IgemhlbmcgcWlhbiA8eHFxQHhxcS5pbT5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZnVuY3Rpb24gY2hlY2tDb250aW51YXRpb24odWludDhhcnJheSwgc3RhcnQsIGNoZWNrTGVuZ3RoKSB7XG4gICAgbGV0IGFycmF5ID0gdWludDhhcnJheTtcbiAgICBpZiAoc3RhcnQgKyBjaGVja0xlbmd0aCA8IGFycmF5Lmxlbmd0aCkge1xuICAgICAgICB3aGlsZSAoY2hlY2tMZW5ndGgtLSkge1xuICAgICAgICAgICAgaWYgKChhcnJheVsrK3N0YXJ0XSAmIDB4QzApICE9PSAweDgwKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZWNvZGVVVEY4KHVpbnQ4YXJyYXkpIHtcbiAgICBsZXQgb3V0ID0gW107XG4gICAgbGV0IGlucHV0ID0gdWludDhhcnJheTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbmd0aCA9IHVpbnQ4YXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGlucHV0W2ldIDwgMHg4MCkge1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShpbnB1dFtpXSkpO1xuICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEMwKSB7XG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0W2ldIDwgMHhFMCkge1xuICAgICAgICAgICAgaWYgKGNoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAxKSkge1xuICAgICAgICAgICAgICAgIGxldCB1Y3M0ID0gKGlucHV0W2ldICYgMHgxRikgPDwgNiB8IChpbnB1dFtpICsgMV0gJiAweDNGKTtcbiAgICAgICAgICAgICAgICBpZiAodWNzNCA+PSAweDgwKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUodWNzNCAmIDB4RkZGRikpO1xuICAgICAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RjApIHtcbiAgICAgICAgICAgIGlmIChjaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMikpIHtcbiAgICAgICAgICAgICAgICBsZXQgdWNzNCA9IChpbnB1dFtpXSAmIDB4RikgPDwgMTIgfCAoaW5wdXRbaSArIDFdICYgMHgzRikgPDwgNiB8IGlucHV0W2kgKyAyXSAmIDB4M0Y7XG4gICAgICAgICAgICAgICAgaWYgKHVjczQgPj0gMHg4MDAgJiYgKHVjczQgJiAweEY4MDApICE9PSAweEQ4MDApIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0W2ldIDwgMHhGOCkge1xuICAgICAgICAgICAgaWYgKGNoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAzKSkge1xuICAgICAgICAgICAgICAgIGxldCB1Y3M0ID0gKGlucHV0W2ldICYgMHg3KSA8PCAxOCB8IChpbnB1dFtpICsgMV0gJiAweDNGKSA8PCAxMlxuICAgICAgICAgICAgICAgICAgICAgICAgIHwgKGlucHV0W2kgKyAyXSAmIDB4M0YpIDw8IDYgfCAoaW5wdXRbaSArIDNdICYgMHgzRik7XG4gICAgICAgICAgICAgICAgaWYgKHVjczQgPiAweDEwMDAwICYmIHVjczQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICAgICAgICB1Y3M0IC09IDB4MTAwMDA7XG4gICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHVjczQgPj4+IDEwKSB8IDB4RDgwMCkpO1xuICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCh1Y3M0ICYgMHgzRkYpIHwgMHhEQzAwKSk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRkZEKSk7XG4gICAgICAgICsraTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWNvZGVVVEY4OyIsImltcG9ydCBQbGF5ZXIgZnJvbSAneGdwbGF5ZXInXG5pbXBvcnQgRmx2IGZyb20gJy4vZmx2L2ZsdidcblxuY2xhc3MgRmx2SnNQbGF5ZXIgZXh0ZW5kcyBQbGF5ZXIge1xuICBjb25zdHJ1Y3RvciAob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpXG4gICAgdGhpcy5mbHZPcHRzID0geyB0eXBlOiAnZmx2JyB9XG4gICAgUGxheWVyLnV0aWwuZGVlcENvcHkodGhpcy5mbHZPcHRzLCBvcHRpb25zKVxuICAgIGNvbnN0IHBsYXllciA9IHRoaXNcbiAgICBwbGF5ZXIub25jZSgnY29tcGxldGUnLCAoKSA9PiB7XG4gICAgICBwbGF5ZXIuX19mbHZfXyA9IEZsdi5jcmVhdGVQbGF5ZXIodGhpcy5mbHZPcHRzKVxuICAgICAgcGxheWVyLmNyZWF0ZUluc3RhbmNlKHBsYXllci5fX2Zsdl9fKVxuICAgIH0pXG4gIH1cbiAgY3JlYXRlSW5zdGFuY2UgKGZsdikge1xuICAgIGNvbnN0IHBsYXllciA9IHRoaXNcbiAgICBjb25zdCB1dGlsID0gUGxheWVyLnV0aWxcbiAgICBmbHYuYXR0YWNoTWVkaWFFbGVtZW50KHBsYXllci52aWRlbylcbiAgICBmbHYubG9hZCgpXG4gICAgZmx2LnBsYXkoKVxuICAgIGlmICh0aGlzLmZsdk9wdHMuaXNMaXZlKSB7XG4gICAgICB1dGlsLmFkZENsYXNzKHBsYXllci5yb290LCAneGdwbGF5ZXItaXMtbGl2ZScpXG4gICAgICBjb25zdCBsaXZlID0gdXRpbC5jcmVhdGVEb20oJ3hnLWxpdmUnLCAn5q2j5Zyo55u05pKtJywge30sICd4Z3BsYXllci1saXZlJylcbiAgICAgIHBsYXllci5jb250cm9scy5hcHBlbmRDaGlsZChsaXZlKVxuICAgIH1cbiAgICBmbHYub24oRmx2LkV2ZW50cy5FUlJPUiwgKGUpID0+IHtcbiAgICAgIHBsYXllci5lbWl0KCdlcnJvcicsIG5ldyBQbGF5ZXIuRXJyb3JzKCdvdGhlcicsIHBsYXllci5jb25maWcudXJsKSlcbiAgICB9KVxuXG4gICAgcGxheWVyLm9uY2UoJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgICBmbHYuZGVzdHJveSgpXG4gICAgICBwbGF5ZXIuX19mbHZfXyA9IG51bGxcbiAgICB9KVxuICB9XG4gIHN3aXRjaFVSTCAodXJsKSB7XG4gICAgY29uc3QgcGxheWVyID0gdGhpc1xuICAgIGNvbnN0IGZsdlBsYXllciA9IHBsYXllci5fX2Zsdl9fXG4gICAgcGxheWVyLmNvbmZpZy51cmwgPSB1cmxcbiAgICBpZiAoIXBsYXllci5jb25maWcuaXNMaXZlKSB7XG4gICAgICBmbHZQbGF5ZXIub25EZWZpbml0aW9uQ2hhbmdlKHVybCwgcGxheWVyLmNvbmZpZy5yZXRyeVRpbWVzKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0ZW1wRmx2UGxheWVyID0gRmx2LmNyZWF0ZVBsYXllcihwbGF5ZXIuZmx2T3B0cylcbiAgICAgIGZsdlBsYXllci5kZXN0cm95KClcbiAgICAgIHBsYXllci5jcmVhdGVJbnN0YW5jZSh0ZW1wRmx2UGxheWVyKVxuICAgICAgcGxheWVyLl9fZmx2X18gPSB0ZW1wRmx2UGxheWVyXG4gICAgfVxuICB9XG59XG5GbHZKc1BsYXllci5pc1N1cHBvcnRlZCA9IEZsdi5pc1N1cHBvcnRlZFxuZXhwb3J0IGRlZmF1bHQgRmx2SnNQbGF5ZXJcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV94Z3BsYXllcl9fOyJdLCJzb3VyY2VSb290IjoiIn0=