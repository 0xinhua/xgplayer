{"version":3,"file":"index.min.js","sources":["../src/glutil.js","../src/filter.js","../src/filter/basic.js","../src/fmt/yuyv422.js","../src/fmt/rgb32.js","../src/fmt/rgb24.js","../src/fmt/nv12.js","../src/fmt/yuv420.js","../src/fmt/rgba.js","../src/fmt/rgb.js","../src/index.js"],"sourcesContent":["class GLUtil {\n  static createTexture (gl, filter, data, width, height) {\n    let textureRef = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, textureRef);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    if (data instanceof Uint8Array) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    } else if (data instanceof HTMLVideoElement) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    } else if (data instanceof HTMLImageElement) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    } else if (data instanceof ImageData) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    }\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return textureRef;\n  }\n\n  static createBuffer (gl, data) {\n    let buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n    return buffer;\n  }\n\n  static createShader (gl, type, source) {\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      throw new Error(gl.getShaderInfoLog(shader));\n    }\n\n    return shader;\n  }\n\n  static createProgram (gl, vertexSource, fragmentSource) {\n    var program = gl.createProgram();\n\n    var vertexShader = GLUtil.createShader(gl, gl.VERTEX_SHADER, vertexSource);\n    var fragmentShader = GLUtil.createShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new Error(gl.getProgramInfoLog(program));\n    }\n\n    var wrapper = {program: program};\n\n    var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (var i = 0; i < numAttributes; i++) {\n      var attribute = gl.getActiveAttrib(program, i);\n      wrapper[attribute.name] = gl.getAttribLocation(program, attribute.name);\n    }\n    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (var i$1 = 0; i$1 < numUniforms; i$1++) {\n      var uniform = gl.getActiveUniform(program, i$1);\n      wrapper[uniform.name] = gl.getUniformLocation(program, uniform.name);\n    }\n\n    return wrapper;\n  }\n\n  static bindAttribute (gl, buffer, attribute, numComponents) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attribute);\n    gl.vertexAttribPointer(attribute, numComponents, gl.FLOAT, false, 0, 0);\n  }\n}\n\nexport default GLUtil;\n","class Filter {\n  constructor() {\n    this.inputTextures = []\n  }\n}\n\nexport default Filter;\n","import Filter from '../filter';\nimport GLUtil from '../glutil';\nclass Basic extends Filter {\n  constructor (config) {\n    super();\n    this.vShader = [\n      'attribute vec4 vertexPos;',\n      'attribute vec2 texturePos;',\n      'varying vec2 textureCoord;',\n      'void main()',\n      '{',\n      '  gl_Position = vertexPos;',\n      '  textureCoord = texturePos;',\n      '}'].join('\\n');\n    this.fShader = [\n      'precision highp float;',\n      'varying highp vec2 textureCoord;',\n      'uniform highp float opacity;',\n      'uniform sampler2D sampler;',\n      'uniform highp float flipx;',\n      'uniform highp float flipy;',\n      'void main(void) {',\n      '  float cordx = textureCoord.x;',\n      '  if(flipx > 0.5) {',\n      '     cordx = 1.0 - textureCoord.x;',\n      '  }',\n      '  float cordy = 1.0 - textureCoord.y;',\n      '  if(flipy > 0.5) {',\n      '    cordy = textureCoord.y;',\n      '  }',\n      '  vec4 color = texture2D(sampler,vec2(cordx, cordy));',\n      '  gl_FragColor = vec4(color[0],color[1],color[2],opacity);',\n      '}'].join('\\n');\n    \n    this.opacity = config.opacity === undefined ? 1 : config.opacity;\n    this.flip = config.flip;\n  }\n\n  init (render) {\n    this.rend = render;\n    this.canvas = render.canvas;\n    let gl = this.gl = render.gl;\n    this.pw = GLUtil.createProgram(gl, this.vShader, this.fShader);\n    this.program = this.pw.program;\n    gl.useProgram(this.program);\n\n    // vertexPos\n    let vertexPosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]));\n    GLUtil.bindAttribute(gl, vertexPosBuffer, this.pw.vertexPos, 2);\n\n    // texturePos\n    let texturePosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]));\n    GLUtil.bindAttribute(gl, texturePosBuffer, this.pw.texturePos, 2);\n\n    GLUtil.createTexture(gl, gl.LINEAR);\n    gl.uniform1i(this.pw.sampler, 0);\n    \n    gl.uniform1f(this.pw.opacity, this.opacity);\n\n    let flipx = 0;\n    let flipy = 0;\n\n    if (this.flip === 'x' || this.flip === 'xy') {\n      flipx = 1;\n    }\n\n    if (this.flip === 'y' || this.flip === 'xy') {\n      flipy = 1;\n    }\n\n    gl.uniform1f(this.pw.flipx, flipx);\n    gl.uniform1f(this.pw.flipy, flipy);\n  }\n\n  setFlip (flip) {\n    let flipx = 0;\n    let flipy = 0;\n    this.flip = flip;\n    if (this.flip === 'x' || this.flip === 'xy') {\n      flipx = 1;\n    }\n\n    if (this.flip === 'y' || this.flip === 'xy') {\n      flipy = 1;\n    }\n\n    this.gl.uniform1f(this.pw.flipx, flipx);\n    this.gl.uniform1f(this.pw.flipy, flipy);\n  }\n\n  render (texture, width, height) {\n    let gl = this.gl;\n    let program = this.program;\n    gl.useProgram(program);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n}\n\nexport default Basic;\n","import Filter from '../filter';\nimport GLUtil from '../glutil';\nclass Yuyv422 extends Filter {\n  constructor (config) {\n    super();\n    this.vShader = ['attribute vec4 vertexPos;',\n      'attribute vec2 texturePos;',\n      'varying vec2 textureCoord;',\n      'void main()',\n      '{',\n      '  gl_Position = vertexPos;',\n      '  textureCoord = texturePos;',\n      '}'].join('\\n');\n    this.fShader = ['precision highp float;',\n      'varying highp vec2 textureCoord;',\n      'uniform sampler2D sampler;',\n      'uniform vec2 outerSize;',\n      'uniform mat4 yuv2rgb;',\n      'void main(void) {',\n      '  float cx = 1.0 / outerSize.x;',\n      '  float odd = floor(mod(textureCoord.x * outerSize.x, 2.0));',\n      '  float x = textureCoord.x + 0.5 * cx - odd * cx;',\n      '  vec4 color = texture2D(sampler, vec2(x, textureCoord.y));',\n      '  float ydata = odd < 0.5?color[0]:color[2];',\n      '  float udata = color[1];',\n      '  float vdata = color[3];',\n      '  gl_FragColor = vec4(ydata, udata, vdata, 1) * yuv2rgb;',\n      '}'].join('\\n');\n  }\n\n  init (render) {\n    this.rend = render;\n    this.canvas = render.canvas;\n    let gl = this.gl = render.gl;\n    this.pw = GLUtil.createProgram(gl, this.vShader, this.fShader);\n    this.program = this.pw.program;\n    gl.useProgram(this.program);\n    // vertexPos\n    let vertexPosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]));\n    GLUtil.bindAttribute(gl, vertexPosBuffer, this.pw.vertexPos, 2);\n\n    // texturePos\n    this.texturePosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]));\n    GLUtil.bindAttribute(gl, this.texturePosBuffer, this.pw.texturePos, 2);\n\n    let textureRef = GLUtil.createTexture(gl, gl.LINEAR);\n    gl.uniform1i(this.pw.sampler, 0);\n\n    this.inputTextures.push(textureRef);\n\n    let yuv2rgb = [\n      1.16438, 0.00000, 1.59603, -0.87079,\n      1.16438, -0.39176, -0.81297, 0.52959,\n      1.16438, 2.01723, 0.00000, -1.08139,\n      0, 0, 0, 1\n    ];\n    gl.uniformMatrix4fv(this.pw.yuv2rgb, false, yuv2rgb);\n  }\n\n  render (data, width, height) {\n    data = data[0];\n    let gl = this.gl;\n    let program = this.program;\n    let textureRef = this.inputTextures[0];\n\n    if (this.width !== width || this.height !== height) {\n      this.width = width;\n      this.height = height;\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    if (!this.outputTexuture) {\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.rend.fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.outputTexuture, 0);\n\n    gl.useProgram(program);\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n\n    gl.uniform2fv(this.pw.outerSize, [width, height]);\n\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, textureRef);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width / 2, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n    return {\n      texture: this.outputTexuture,\n      width,\n      height\n    };\n  }\n}\n\nexport default Yuyv422;\n","import Filter from '../filter';\nimport GLUtil from '../glutil';\nclass Rgb32 extends Filter {\n  constructor (config) {\n    super();\n    this.vShader = [\n      'attribute vec4 vertexPos;',\n      'attribute vec2 texturePos;',\n      'varying vec2 textureCoord;',\n      'void main()',\n      '{',\n      '  gl_Position = vertexPos;',\n      '  textureCoord = texturePos;',\n      '}'].join('\\n');\n    this.fShader = [\n      'precision highp float;',\n      'varying highp vec2 textureCoord;',\n      'uniform sampler2D sampler;',\n      'void main(void) {',\n      '  vec4 color = texture2D(sampler, textureCoord);',\n      '  gl_FragColor = vec4(color[2],color[1],color[0],color[3]);',\n      '}'].join('\\n'); \n  }\n\n  init (render) {\n    this.rend = render;\n    this.canvas = render.canvas;\n    let gl = this.gl = render.gl;\n    this.pw = GLUtil.createProgram(gl, this.vShader, this.fShader);\n    this.program = this.pw.program;\n\n    gl.useProgram(this.program);\n    // vertexPos\n    let vertexPosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]));\n    GLUtil.bindAttribute(gl, vertexPosBuffer, this.pw.vertexPos, 2);\n\n    // texturePos\n    this.texturePosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]));\n    GLUtil.bindAttribute(gl, this.texturePosBuffer, this.pw.texturePos, 2);\n\n    let textureRef = GLUtil.createTexture(gl, gl.LINEAR);\n    gl.uniform1i(this.pw.sampler, 0);\n\n    this.inputTextures.push(textureRef);\n  }\n\n  render (data, width, height) {\n    data = data[0];\n    let gl = this.gl;\n    let program = this.program;\n    let textureRef = this.inputTextures[0];\n\n    if (this.width !== width || this.height !== height) {\n      this.width = width;\n      this.height = height;\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    if (!this.outputTexuture) {\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.rend.fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.outputTexuture, 0);\n\n    gl.useProgram(program);\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, textureRef);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n    return {\n      texture: this.outputTexuture,\n      width,\n      height\n    };\n  }\n}\n\nexport default Rgb32;\n","import Filter from '../filter';\nimport GLUtil from '../glutil';\nclass Rgb24 extends Filter {\n  constructor (config) {\n    super();\n    this.vShader = [\n      'attribute vec4 vertexPos;',\n      'attribute vec2 texturePos;',\n      'varying vec2 textureCoord;',\n      'void main()',\n      '{',\n      '  gl_Position = vertexPos;',\n      '  textureCoord = texturePos;',\n      '}'].join('\\n');\n    this.fShader = [\n      'precision highp float;',\n      'varying highp vec2 textureCoord;',\n      'uniform sampler2D sampler;',\n      'uniform vec2 outerSize;',\n      'uniform mat4 YUV2RGB;',\n      'void main(void) {',\n      '  float my = floor(mod(textureCoord.y * outerSize.y, 4.0));',\n      '  float cy = 1.0 / outerSize.y;',\n\n      '  float mx = floor(mod(outerSize.x, 4.0));',\n      '  float cx = 1.0 / outerSize.x;',\n      '  float width =  outerSize.x + mx;',\n      '  float x = textureCoord.x + (mx * cx * textureCoord.y * outerSize.y);',\n      '  x = cx * mod(x * outerSize.x, width);',\n      '  float bdata, gdata, rdata;',\n\n      '  vec4 color = texture2D(sampler, vec2(x, textureCoord.y));',\n      '  rdata = color[0];',\n      '  gdata = color[1];',\n      '  bdata = color[2];',\n      '  gl_FragColor = vec4(bdata, gdata, rdata, 1);',\n      '}'].join('\\n'); \n  }\n\n  init (render) {\n    this.rend = render;\n    this.canvas = render.canvas;\n    let gl = this.gl = render.gl;\n    this.pw = GLUtil.createProgram(gl, this.vShader, this.fShader);\n    this.program = this.pw.program;\n    gl.useProgram(this.program);\n    // vertexPos\n    let vertexPosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]));\n    GLUtil.bindAttribute(gl, vertexPosBuffer, this.pw.vertexPos, 2);\n\n    // texturePos\n    this.texturePosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]));\n    GLUtil.bindAttribute(gl, this.texturePosBuffer, this.pw.texturePos, 2);\n\n    let textureRef = GLUtil.createTexture(gl, gl.LINEAR);\n    gl.uniform1i(this.pw.sampler, 0);\n    this.inputTextures.push(textureRef);\n  }\n\n  render (data, width, height) {\n    data = data[0];\n    let gl = this.gl;\n    let program = this.program;\n    let textureRef = this.inputTextures[0];\n\n    if (this.width !== width || this.height !== height) {\n      this.width = width;\n      this.height = height;\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    if (!this.outputTexuture) {\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.rend.fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.outputTexuture, 0);\n\n    gl.useProgram(program);\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n\n    let outerSizeRef = gl.getUniformLocation(program, 'outerSize');\n    gl.uniform2fv(outerSizeRef, [width, height]);\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, textureRef);\n    let inputx = width - (width % 4);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, inputx, height, 0, gl.RGB, gl.UNSIGNED_BYTE, data);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n    return {\n      texture: this.outputTexuture,\n      width,\n      height\n    };\n  }\n}\n\nexport default Rgb24;\n","import Filter from '../filter';\nimport GLUtil from '../glutil';\nclass Nv12 extends Filter {\n  constructor (config) {\n    super();\n    this.vShader = [\n      'attribute vec4 vertexPos;',\n      'attribute vec2 yTexturePos;',\n      'attribute vec2 uvTexturePos;',\n      'varying vec2 yTextureCoord;',\n      'varying vec2 uvTextureCoord;',\n      'void main()',\n      '{',\n      '  gl_Position = vertexPos;',\n      '  yTextureCoord = yTexturePos;',\n      '  uvTextureCoord = uvTexturePos;',\n      '}'].join('\\n');\n    this.fShader = ['precision highp float;',\n      'varying highp vec2 yTextureCoord;',\n      'varying highp vec2 uvTextureCoord;',\n      'uniform sampler2D ySampler;',\n      'uniform sampler2D uvSampler;',\n      'uniform mat4 yuv2rgb;',\n      'void main(void) {',\n      '  vec4 colory = texture2D(ySampler, yTextureCoord);',\n      '  vec4 coloruv = texture2D(uvSampler, vec2(yTextureCoord.x / 2.0, yTextureCoord.y));',\n      '  gl_FragColor = vec4(colory[0], coloruv[0], coloruv[1], 1) * yuv2rgb;',\n      '}'].join('\\n');\n  }\n\n  init (render) {\n    this.rend = render;\n    this.canvas = render.canvas;\n    let gl = this.gl = render.gl;\n    this.pw = GLUtil.createProgram(gl, this.vShader, this.fShader);\n    this.program = this.pw.program;\n    gl.useProgram(this.program);\n    // vertexPos\n    let vertexPosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]));\n    GLUtil.bindAttribute(gl, vertexPosBuffer, this.pw.vertexPos, 2);\n\n    // texturePos\n    let yTexturePosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]));\n    GLUtil.bindAttribute(gl, yTexturePosBuffer, this.pw.yTexturePos, 2);\n\n    let uvTexturePosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]));\n    GLUtil.bindAttribute(gl, uvTexturePosBuffer, this.pw.uvTexturePos, 2);\n\n    let yTextureRef = GLUtil.createTexture(gl, gl.LINEAR);\n    gl.uniform1i(this.pw.ySampler, 0);\n\n    this.inputTextures.push(yTextureRef);\n\n    let uvTextureRef = GLUtil.createTexture(gl, gl.LINEAR);\n    gl.uniform1i(this.pw.uvSampler, 1);\n\n    this.inputTextures.push(uvTextureRef);\n\n    let yuv2rgb = [\n      1.16438, 0.00000, 1.59603, -0.87079,\n      1.16438, -0.39176, -0.81297, 0.52959,\n      1.16438, 2.01723, 0.00000, -1.08139,\n      0, 0, 0, 1\n    ];\n    gl.uniformMatrix4fv(this.pw.yuv2rgb, false, yuv2rgb);\n  }\n\n  render (data, width, height) {\n    let ydata = data[0];\n    let uvdata = data[1];\n    let gl = this.gl;\n    let program = this.program;\n    let yTextureRef = this.inputTextures[0];\n    let uvTextureRef = this.inputTextures[1];\n\n    if (this.width !== width || this.height !== height) {\n      this.width = width;\n      this.height = height;\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    if (!this.outputTexuture) {\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.rend.fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.outputTexuture, 0);\n\n    gl.useProgram(program);\n\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, yTextureRef);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width, height, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, ydata);\n\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, uvTextureRef);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width / 2, height / 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, uvdata);\n\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    return {\n      texture: this.outputTexuture,\n      width,\n      height\n    };\n  }\n}\n\nexport default Nv12;\n","import Filter from '../filter';\nimport GLUtil from '../glutil';\nclass Yuv420 extends Filter {\n  constructor (render, config) {\n    super();\n    this.vShader = ['attribute vec4 vertexPos;',\n      'attribute vec2 yTexturePos;',\n      'attribute vec2 uTexturePos;',\n      'attribute vec2 vTexturePos;',\n      'varying vec2 yTextureCoord;',\n      'varying vec2 uTextureCoord;',\n      'varying vec2 vTextureCoord;',\n      'void main()',\n      '{',\n      '  gl_Position = vertexPos;',\n      '  yTextureCoord = yTexturePos;',\n      '  uTextureCoord = uTexturePos;',\n      '  vTextureCoord = vTexturePos;',\n      '}'].join('\\n');\n    this.fShader = [\n      'precision highp float;',\n      'varying highp vec2 yTextureCoord;',\n      'varying highp vec2 uTextureCoord;',\n      'varying highp vec2 vTextureCoord;',\n      'uniform sampler2D ySampler;',\n      'uniform sampler2D uSampler;',\n      'uniform sampler2D vSampler;',\n      'uniform mat4 yuv2rgb;',\n\n      'void main(void) {',\n      '  highp float y = texture2D(ySampler,  yTextureCoord).r;',\n      '  highp float u = texture2D(uSampler,  uTextureCoord).r;',\n      '  highp float v = texture2D(vSampler,  vTextureCoord).r;',\n      '  gl_FragColor = vec4(y, u, v, 1) * yuv2rgb;',\n      '}'\n    ].join('\\n');\n  }\n\n  init (render) {\n    this.rend = render;\n    this.canvas = render.canvas;\n    let gl = this.gl = render.gl;\n    this.pw = GLUtil.createProgram(gl, this.vShader, this.fShader);\n    this.program = this.pw.program;\n    gl.useProgram(this.program);\n    // vertexPos\n    let vertexPosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]));\n    GLUtil.bindAttribute(gl, vertexPosBuffer, this.pw.vertexPos, 2);\n\n    // texturePos\n    let yTexturePosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]));\n    GLUtil.bindAttribute(gl, yTexturePosBuffer, this.pw.yTexturePos, 2);\n\n    let uTexturePosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]));\n    GLUtil.bindAttribute(gl, uTexturePosBuffer, this.pw.uTexturePos, 2);\n\n    let vTexturePosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]));\n    GLUtil.bindAttribute(gl, vTexturePosBuffer, this.pw.vTexturePos, 2);\n\n    let yTextureRef = GLUtil.createTexture(gl, gl.LINEAR);\n    gl.uniform1i(this.pw.ySampler, 0);\n\n    this.inputTextures.push(yTextureRef);\n\n    let uTextureRef = GLUtil.createTexture(gl, gl.LINEAR);\n    gl.uniform1i(this.pw.uSampler, 1);\n\n    this.inputTextures.push(uTextureRef);\n\n    let vTextureRef = GLUtil.createTexture(gl, gl.LINEAR);\n    gl.uniform1i(this.pw.vSampler, 2);\n\n    this.inputTextures.push(vTextureRef);\n\n    let yuv2rgb = [\n      1.16438, 0.00000, 1.59603, -0.87079,\n      1.16438, -0.39176, -0.81297, 0.52959,\n      1.16438, 2.01723, 0.00000, -1.08139,\n      0, 0, 0, 1\n    ];\n    gl.uniformMatrix4fv(this.pw.yuv2rgb, false, yuv2rgb);\n  }\n\n  render (data, width, height) {\n    let ydata = data[0];\n    let udata = data[1];\n    let vdata = data[2];\n    let gl = this.gl;\n    let program = this.program;\n    let yTextureRef = this.inputTextures[0];\n    let uTextureRef = this.inputTextures[1];\n    let vTextureRef = this.inputTextures[2];\n\n    if (this.width !== width || this.height !== height) {\n      this.width = width;\n      this.height = height;\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    if (!this.outputTexuture) {\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.rend.fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.outputTexuture, 0);\n\n    gl.useProgram(program);\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, yTextureRef);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width, height, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, ydata);\n\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, uTextureRef);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width / 2, height / 2, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, udata);\n\n    gl.activeTexture(gl.TEXTURE2);\n    gl.bindTexture(gl.TEXTURE_2D, vTextureRef);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width / 2, height / 2, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, vdata);\n\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n    return {\n      texture: this.outputTexuture,\n      width: width,\n      height: height\n    };\n  }\n}\n\nexport default Yuv420;\n","import Filter from '../filter';\nimport GLUtil from '../glutil';\nclass Rgba extends Filter {\n  constructor (config) {\n    super();\n    this.vShader = [\n      'attribute vec4 vertexPos;',\n      'attribute vec2 texturePos;',\n      'varying vec2 textureCoord;',\n      'void main()',\n      '{',\n      '  gl_Position = vertexPos;',\n      '  textureCoord = texturePos;',\n      '}'].join('\\n');\n    this.fShader = [\n      'precision highp float;',\n      'varying highp vec2 textureCoord;',\n      'uniform sampler2D sampler;',\n      'void main(void) {',\n      '  vec4 color = texture2D(sampler, textureCoord);',\n      '  gl_FragColor = vec4(color[0],color[1],color[2],color[3]);',\n      '}'].join('\\n');\n  }\n\n  init (render) {\n    this.rend = render;\n    this.canvas = render.canvas;\n    let gl = this.gl = render.gl;\n    this.pw = GLUtil.createProgram(gl, this.vShader, this.fShader);\n    this.program = this.pw.program;\n\n    gl.useProgram(this.program);\n    // vertexPos\n    let vertexPosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]));\n    GLUtil.bindAttribute(gl, vertexPosBuffer, this.pw.vertexPos, 2);\n\n    // texturePos\n    this.texturePosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]));\n    GLUtil.bindAttribute(gl, this.texturePosBuffer, this.pw.texturePos, 2);\n\n    let textureRef = GLUtil.createTexture(gl, gl.LINEAR);\n    gl.uniform1i(this.pw.sampler, 0);\n\n    this.inputTextures.push(textureRef);\n  }\n\n  render (data, width, height) {\n    if (data instanceof ImageData) {\n      data = data.data;\n    } else {\n      data = data[0];\n    }\n\n    let gl = this.gl;\n    let program = this.program;\n    let textureRef = this.inputTextures[0];\n\n    if (this.width !== width || this.height !== height) {\n      this.width = width;\n      this.height = height;\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    if (!this.outputTexuture) {\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.rend.fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.outputTexuture, 0);\n\n    gl.useProgram(program);\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, textureRef);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n    return {\n      texture: this.outputTexuture,\n      width,\n      height\n    };\n  }\n}\n\nexport default Rgba;\n","import Filter from '../filter';\nimport GLUtil from '../glutil';\nclass Rgb extends Filter {\n  constructor (config) {\n    super();\n    this.vShader = [\n      'attribute vec4 vertexPos;',\n      'attribute vec2 texturePos;',\n      'varying vec2 textureCoord;',\n      'void main()',\n      '{',\n      '  gl_Position = vertexPos;',\n      '  textureCoord = texturePos;',\n      '}'].join('\\n');\n    this.fShader = [\n      'precision highp float;',\n      'varying highp vec2 textureCoord;',\n      'uniform sampler2D sampler;',\n      'uniform vec2 outerSize;',\n      'uniform mat4 YUV2RGB;',\n      'void main(void) {',\n      '  float my = floor(mod(textureCoord.y * outerSize.y, 4.0));',\n      '  float cy = 1.0 / outerSize.y;',\n\n      '  float mx = floor(mod(outerSize.x, 4.0));',\n      '  float cx = 1.0 / outerSize.x;',\n      '  float width =  outerSize.x + mx;',\n      '  float x = textureCoord.x + (mx * cx * textureCoord.y * outerSize.y);',\n      '  x = cx * mod(x * outerSize.x, width);',\n      '  float bdata, gdata, rdata;',\n\n      '  vec4 color = texture2D(sampler, vec2(x, textureCoord.y));',\n      '  rdata = color[0];',\n      '  gdata = color[1];',\n      '  bdata = color[2];',\n      '  gl_FragColor = vec4(rdata, gdata, bdata, 1);',\n      '}'].join('\\n');\n  }\n\n  init (render) {\n    this.rend = render;\n    this.canvas = render.canvas;\n    let gl = this.gl = render.gl;\n    this.pw = GLUtil.createProgram(gl, this.vShader, this.fShader);\n    this.program = this.pw.program;\n    gl.useProgram(this.program);\n    // vertexPos\n    let vertexPosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]));\n    GLUtil.bindAttribute(gl, vertexPosBuffer, this.pw.vertexPos, 2);\n\n    // texturePos\n    this.texturePosBuffer = GLUtil.createBuffer(gl, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]));\n    GLUtil.bindAttribute(gl, this.texturePosBuffer, this.pw.texturePos, 2);\n\n    let textureRef = GLUtil.createTexture(gl, gl.LINEAR);\n    gl.uniform1i(this.pw.sampler, 0);\n    this.inputTextures.push(textureRef);\n  }\n\n  render (data, width, height) {\n    data = data[0];\n    let gl = this.gl;\n    let program = this.program;\n    let textureRef = this.inputTextures[0];\n\n    if (this.width !== width || this.height !== height) {\n      this.width = width;\n      this.height = height;\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    if (!this.outputTexuture) {\n      this.outputTexuture = GLUtil.createTexture(gl, gl.LINEAR, new Uint8Array(width * height * 4), width, height);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.rend.fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.outputTexuture, 0);\n\n    gl.useProgram(program);\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n\n    let outerSizeRef = gl.getUniformLocation(program, 'outerSize');\n    gl.uniform2fv(outerSizeRef, [width, height]);\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, textureRef);\n    let inputx = width - (width % 4);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, inputx, height, 0, gl.RGB, gl.UNSIGNED_BYTE, data);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n    return {\n      texture: this.outputTexuture,\n      width,\n      height\n    };\n  }\n}\n\nexport default Rgb;\n","import GLUtil from './glutil';\nimport Basic from './filter/basic';\n\nimport Yuyv422 from './fmt/yuyv422';\nimport Rgb32 from './fmt/rgb32';\nimport Rgb24 from './fmt/rgb24';\nimport Nv12 from './fmt/nv12';\nimport Yuv420 from './fmt/yuv420';\nimport Rgba from './fmt/rgba';\nimport Rgb from './fmt/rgb';\n\nclass Render {\n  constructor (config) {\n    this.canvas = config.canvas;\n    // input\n    if (config.video) {\n      this.video = config.video;\n      config.flip = 'y';\n    } else if (config.image) {\n      this.image = config.image;\n    } else {\n      this._initFmt(config)\n    }\n\n    this.filters = [];\n\n    this.basicFilter = new Basic({\n      opacity: config.opacity !== undefined ? config.opacity : 1,\n      flip: config.flip || undefined\n    });\n\n    if (config.filters) {\n      for (let i = 0; i < config.filters.length; i++) {\n        this.filters.push(config.filters[i]);\n      }\n    }\n    this._init();\n  }\n\n  _initFmt (config) {\n    switch (config.format) {\n      case 'YUY2':\n        this.fmt = new Yuyv422(this);\n        break;\n      case 'RGBA':\n        this.fmt = new Rgba(this);\n        break;\n      case 'RGB':\n        this.fmt = new Rgb(this);\n        break;\n      case 'RGB32':\n        this.fmt = new Rgb32(this);\n        break;\n      case 'RGB24':\n        this.fmt = new Rgb24(this);\n        break;\n      case 'NV12':\n        this.fmt = new Nv12(this);\n        break;\n      case 'YUV420':\n        this.fmt = new Yuv420(this);\n        break;\n      default:\n        break;\n    }\n  }\n\n  _initImage () {\n\n  }\n\n  _init () {\n    this._initContextGL();\n\n    if (!this.gl) {\n      throw new Error(`fail to init gl`)\n    }\n\n    let gl = this.gl;\n    this.fb = gl.createFramebuffer();\n\n    if (this.fmt) {\n      this.fmt.init(this);\n    } else if (this.video) {\n      const width = this.video.videoWidth;\n      const height = this.video.videoHeight;\n      let emptyPixels = new Uint8Array(width * height * 4);\n      this.videoTexture = GLUtil.createTexture(gl, gl.LINEAR, emptyPixels, width, height);\n    }\n    this.basicFilter.init(this)\n\n    for (let i = 0; i < this.filters.length; i++) {\n      let filter = this.filters[i];\n      filter.init(this);\n    }\n  }\n\n  _initContextGL () {\n    let canvas = this.canvas;\n    let gl = null;\n\n    let validContextNames = ['webgl', 'experimental-webgl', 'moz-webgl', 'webkit-3d'];\n    let nameIndex = 0;\n\n    while (!gl && nameIndex < validContextNames.length) {\n      let contextName = validContextNames[nameIndex];\n\n      try {\n        gl = canvas.getContext(contextName);\n      } catch (e) {\n        gl = null;\n      }\n\n      if (!gl || typeof gl.getParameter !== 'function') {\n        gl = null;\n      }\n\n      ++nameIndex;\n    };\n\n    this.gl = gl;\n  };\n\n  _drawPicture (data, iWidth, iHeight) {\n    let { texture, width, height } = this.fmt.render(data, iWidth, iHeight);\n    this._applyFilters(texture, width, height);\n  }\n\n  _drawVideo () {\n    let gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, this.videoTexture);\n    // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.video);\n    this._applyFilters(this.videoTexture, this.video.videoWidth, this.video.videoHeight)\n  }\n\n  _applyFilters (texture, width, height) {\n    let gl = this.gl;\n\n    for (let i = 0; i < this.filters.length; i++) {\n      let filter = this.filters[i];\n      let data = filter.render(texture, width, height);\n      texture = data.texture;\n      width = data.width;\n      height = data.height;\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    if (this.width !== width || this.height !== height) {\n      this.width = this.canvas.width = width;\n      this.height = this.canvas.height = height;\n    }\n    this.basicFilter.render(texture, width, height);\n  }\n\n  render (data, width, height) {\n    if (this.fmt) {\n      if (this.width !== width || this.height !== height) {\n        this.width = this.canvas.width = width;\n        this.height = this.canvas.height = height;\n      }\n\n      this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n      this._drawPicture(data, width, height)\n    } else if (this.video) {\n      this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n      this._drawVideo();\n    }\n  }\n}\n\nexport default Render;\n"],"names":["GLUtil","gl","filter","data","width","height","textureRef","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","Uint8Array","texImage2D","RGBA","UNSIGNED_BYTE","HTMLVideoElement","HTMLImageElement","ImageData","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Error","getShaderInfoLog","vertexSource","fragmentSource","program","createProgram","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","wrapper","numAttributes","ACTIVE_ATTRIBUTES","i","attribute","getActiveAttrib","name","getAttribLocation","numUniforms","ACTIVE_UNIFORMS","i$1","uniform","getActiveUniform","getUniformLocation","numComponents","enableVertexAttribArray","vertexAttribPointer","FLOAT","Filter","inputTextures","Basic","config","vShader","join","fShader","opacity","undefined","flip","render","rend","canvas","this","pw","useProgram","vertexPosBuffer","Float32Array","bindAttribute","vertexPos","texturePosBuffer","texturePos","LINEAR","uniform1i","sampler","uniform1f","flipx","flipy","texture","activeTexture","TEXTURE0","drawArrays","TRIANGLE_STRIP","Yuyv422","push","yuv2rgb","uniformMatrix4fv","outputTexuture","bindFramebuffer","FRAMEBUFFER","fb","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","uniform2fv","outerSize","pixelStorei","UNPACK_ALIGNMENT","Rgb32","Rgb24","outerSizeRef","inputx","RGB","Nv12","yTexturePosBuffer","yTexturePos","uvTexturePosBuffer","uvTexturePos","yTextureRef","ySampler","uvTextureRef","uvSampler","ydata","uvdata","LUMINANCE","TEXTURE1","Yuv420","uTexturePosBuffer","uTexturePos","vTexturePosBuffer","vTexturePos","uTextureRef","uSampler","vTextureRef","vSampler","udata","vdata","TEXTURE2","Rgba","Rgb","video","image","_initFmt","filters","basicFilter","length","_init","format","fmt","_initContextGL","createFramebuffer","init","videoWidth","videoHeight","emptyPixels","videoTexture","validContextNames","nameIndex","contextName","getContext","e","getParameter","iWidth","iHeight","_applyFilters","_drawPicture","_drawVideo"],"mappings":"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"}