window.FlvPlayer=function(e){var t={};function i(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(r,s,function(t){return e[t]}.bind(null,s));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../xgplayer-buffer/src/Track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/Track.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-buffer/src/index.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/index.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RemuxBuffer=t.Tracks=t.VideoTrack=t.AudioTrack=t.XgBuffer=void 0;var r,s=i(/*! ./Track */"../xgplayer-buffer/src/Track.js"),n=(r=s)&&r.__esModule?r:{default:r};t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let r=this.array[0].slice(this.offset,this.offset+e);t.set(r,i),this.offset+=e,this.length-=e,e=0;break}{let r=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=r,this.length-=r,e-=r}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,r=this.offset+e;for(;r<this.offset+t+e;)r<this.array[0].length?i=256*i+this.array[0][r]:this.array[1]&&(i=256*i+this.array[1][r-this.array[0].length]),r++;return i}};t.AudioTrack=class extends n.default{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}};t.VideoTrack=class extends n.default{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}};t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new r,this.sources[e]}clear(){this.sources={}}}},"../xgplayer-loader-fetch/dist/index.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader-fetch/dist/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,i){"use strict";window,e.exports=function(e){var t={};function i(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(r,s,function(t){return e[t]}.bind(null,s));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){e.exports=i(1)},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var r,s=(r=i(2))&&r.__esModule?r:{default:r},n=i(5);window.Context=s.default,t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER"}static get type(){return"loader"}load(e,t){let i=this;this.url=e;let r=this.getParams(t);return fetch(this.url,r).then((function(e){return i.status=e.status,i.loading=!0,i._onFetchResponse(e)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);if(!0===e.ok)switch(this.readtype){case 2:e.json().then(e=>{i?(i.push(e),t.emit(n.LOADER_EVENTS.LOADER_COMPLETE,i)):t.emit(n.LOADER_EVENTS.LOADER_COMPLETE,e)});break;case 1:e.text().then(e=>{i?(i.push(e),t.emit(n.LOADER_EVENTS.LOADER_COMPLETE,i)):t.emit(n.LOADER_EVENTS.LOADER_COMPLETE,e)});break;case 0:default:return this._onReader(e.body.getReader())}}_onReader(e){let t=this._context.getInstance(this.buffer);if(t||this._reader.cancel(),this._reader=e,!1===this.loading)return;let i=this;this._reader&&this._reader.read().then((function(r){return r.done?(i.loading=!1,i.status=0,void i.emit(n.LOADER_EVENTS.LOADER_COMPLETE,t)):(t.push(r.value),i.emit(n.LOADER_EVENTS.LOADER_DATALOADED,t),i._onReader(e))})).catch((function(e){console.log(e)}))}getParams(e){let t=Object.assign({},e),i=new Headers,r={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(r.mode="same-origin"),t.withCredentials&&(r.credentials="include"),r}cancel(){this._reader&&(this._reader.cancel(),this._reader=null)}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var r,s=(r=i(3))&&r.__esModule?r:{default:r};const n=i(4);t.default=class{constructor(e=[]){this._emitter=new n.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new s.default,this.allowedEvents=e}getInstance(e){if(this._instanceMap[e])return this._instanceMap[e];throw new Error(`${e}实例尚未初始化`)}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,r=this._isMessageNameValid.bind(this),s=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.TAG=e,this._context=s}on(e,t){return r(e),this.listeners[e]?this.listeners[e].push(t):this.listeners[e]=[t],i.on(e,t)}once(e,t){return r(e),i.once(e,t)}emit(e,...t){return r(e),i.emit(e,...t)}off(e,t){return r(e),i.off(e,t)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let t in this.listeners)if(e(t)){const e=this.listeners[t]||[];for(let r=0;r<e.length;r++){const s=e[r];i.off(t,s)}}}destroy(){this.removeListeners(),delete s._instanceMap[e],super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=null,this._clsMap=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const r=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class s{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return s.isBaseInfoReady(this)&&s.isVideoReady(this)&&s.isAudioReady(this)}static isBaseInfoReady(e){return r(e)}static isVideoReady(e){return!e.hasVideo||r(e.video)}static isAudioReady(e){return!e.hasAudio||r(e.video)}}t.default=s},function(e,t,i){var r,s="object"==typeof Reflect?Reflect:null,n=s&&"function"==typeof s.apply?s.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};r=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var u=10;function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function d(e,t,i,r){var s,n,a,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(n=e._events)?(n=e._events=Object.create(null),e._eventsCount=0):(void 0!==n.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),n=e._events),a=n[t]),void 0===a)a=n[t]=i,++e._eventsCount;else if("function"==typeof a?a=n[t]=r?[i,a]:[a,i]:r?a.unshift(i):a.push(i),(s=l(e))>0&&a.length>s&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,o=u,console&&console.warn&&console.warn(o)}return e}function f(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,n(this.listener,this.target,e))}function c(e,t,i){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},s=f.bind(r);return s.listener=i,r.wrapFn=s,s}function h(e,t,i){var r=e._events;if(void 0===r)return[];var s=r[t];return void 0===s?[]:"function"==typeof s?i?[s.listener||s]:[s]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(s):_(s,s.length)}function p(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function _(e,t){for(var i=new Array(t),r=0;r<t;++r)i[r]=e[r];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var r="error"===e,s=this._events;if(void 0!==s)r=r&&void 0===s.error;else if(!r)return!1;if(r){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var u=s[e];if(void 0===u)return!1;if("function"==typeof u)n(u,this,t);else{var l=u.length,d=_(u,l);for(i=0;i<l;++i)n(d[i],this,t)}return!0},o.prototype.addListener=function(e,t){return d(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return d(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,r,s,n,a;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(i=r[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(s=-1,n=i.length-1;n>=0;n--)if(i[n]===t||i[n].listener===t){a=i[n].listener,s=n;break}if(s<0)return this;0===s?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,s),1===i.length&&(r[e]=i[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,i,r;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var s,n=Object.keys(i);for(r=0;r<n.length;++r)"removeListener"!==(s=n[r])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},o.prototype.listeners=function(e){return h(this,e,!0)},o.prototype.rawListeners=function(e){return h(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const r=t.LOADER_EVENTS={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},s=t.DEMUX_EVENTS={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},n=t.REMUX_EVENTS={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},a=Object.assign({},r,s,n),o=t.flvAllowedEvents=[];for(let e in a)a.hasOwnProperty(e)&&o.push(a[e]);t.default=a}])},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! xgplayer-utils/dist/write/Buffer */"../xgplayer-utils/dist/write/Buffer.js"),n=(r=s)&&r.__esModule?r:{default:r};class a{static size(e){return n.default.writeUint32(e)}static initBox(e,t,...i){const r=new n.default;return r.write(a.size(e),a.type(t),...i),r.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return a.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let i,r=8,s=a.mvhd(t.duration,t.timescale);i="video"===e?a.videoTrak(t):a.audioTrak(t);let n=a.mvex(t.duration,t.timescale||1e3,t.id);return[s,i,n].forEach(e=>{r+=e.byteLength}),a.initBox(r,"moov",s,i,n)}static mvhd(e,t=1e3){let i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return a.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=a.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),r=a.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,r].forEach(e=>{t+=e.byteLength}),a.initBox(t,"trak",i,r)}static audioTrak(e){let t=8,i=a.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),r=a.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,r].forEach(e=>{t+=e.byteLength}),a.initBox(t,"trak",i,r)}static tkhd(e){let t=e.id,i=e.duration,r=e.width,s=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,r>>>8&255,255&r,0,0,s>>>8&255,255&s,0,0]);return a.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new n.default,i=e.duration,r=e.mediaTime;return t.write(a.size(36),a.type("edts")),t.write(a.size(28),a.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,r>>24&255,r>>16&255,r>>8&255,255&r,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=a.mdhd(e.timescale,e.duration),r=a.hdlr(e.type),s=a.minf(e);return[i,r,s].forEach(e=>{t+=e.byteLength}),a.initBox(t,"mdia",i,r,s)}static mdhd(e=1e3,t){let i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return a.initBox(12+i.byteLength,"mdhd",a.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),a.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?a.vmhd():a.smhd(),r=a.dinf(),s=a.stbl(e);return[i,r,s].forEach(e=>{t+=e.byteLength}),a.initBox(t,"minf",i,r,s)}static vmhd(){return a.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return a.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new n.default;return e.write(a.size(36),a.type("dinf"),a.size(28),a.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=a.stsd(e),r=a.stts(),s=a.stsc(),n=a.stsz(),o=a.stco();return[i,r,s,n,o].forEach(e=>{t+=e.byteLength}),a.initBox(t,"stbl",i,r,s,n,o)}static stsd(e){let t;return t="audio"===e.type?a.mp4a(e):a.avc1(e),a.initBox(16+t.byteLength,"stsd",a.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=a.esds(e.config);return a.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(e=[43,146,8,0]){const t=e.length;let i=new n.default,r=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(a.size(8+r.byteLength),a.type("esds"),r),i.buffer}static avc1(e){let t=new n.default,i=e.width,r=e.height,s=e.parRatio.height,o=e.parRatio.width,u=e.avcc,l=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,r>>8&255,255&r,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),d=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),f=new Uint8Array([s>>24,s>>16&255,s>>8&255,255&s,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(a.size(40+l.byteLength+u.byteLength+d.byteLength),a.type("avc1"),l,a.size(8+u.byteLength),a.type("avcC"),u,a.size(20),a.type("btrt"),d,a.size(16),a.type("pasp"),f),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return a.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return a.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return a.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return a.initBox(20,"stsz",e)}static mvex(e,t=1e3,i){let r=new n.default,s=n.default.writeUint32(e);return r.write(a.size(56),a.type("mvex"),a.size(16),a.type("mehd"),a.extension(0,0),s,a.trex(i)),r.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return a.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=a.mfhd(),r=a.traf(e);return[i,r].forEach(e=>{t+=e.byteLength}),a.initBox(t,"moof",i,r)}static mfhd(){let e=n.default.writeUint32(a.sequence);return a.sequence+=1,a.initBox(16,"mfhd",a.extension(0,0),e)}static traf(e){let t=8,i=a.tfhd(e.id),r=a.tfdt(e.time),s=a.sdtp(e),n=a.trun(e,s.byteLength);return console.log(n),[i,r,s,n].forEach(e=>{t+=e.byteLength}),a.initBox(t,"traf",i,r,s,n)}static tfhd(e){let t=n.default.writeUint32(e);return a.initBox(16,"tfhd",a.extension(0,0),t)}static tfdt(e){return a.initBox(16,"tfdt",a.extension(0,0),n.default.writeUint32(e))}static trun(e,t){let i=new n.default,r=n.default.writeUint32(e.samples.length),s=n.default.writeUint32(92+16*e.samples.length+t);i.write(a.size(20+16*e.samples.length),a.type("trun"),new Uint8Array([0,0,15,1]),r,s);let o=i.buffer.byteLength,u=0;e.samples.forEach(()=>{o+=16});let l=new Uint8Array(o);return l.set(i.buffer,0),u+=i.buffer.byteLength,e.samples.forEach(t=>{l.set(n.default.writeUint32(t.duration),u),u+=4,l.set(n.default.writeUint32(t.size),u),u+=4,1===e.id?(l.set(n.default.writeUint32(t.isKeyframe?33554432:16842752),u),u+=4,l.set(n.default.writeUint32(t.cts),u),u+=4):(l.set(n.default.writeUint32(16777216),u),u+=4,l.set(n.default.writeUint32(0),u),u+=4)}),l}static sdtp(e){let t=new n.default;return t.write(a.size(12+e.samples.length),a.type("sdtp"),a.extension(0,0)),e.samples.forEach(i=>{t.write(new Uint8Array(1===e.id?[i.key?32:16]:[16]))}),t.buffer}static mdat(e){let t=new n.default,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(a.size(i),a.type("mdat"));let r=new Uint8Array(i),s=0;return r.set(t.buffer,s),s+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{r.set(e,s),s+=e.byteLength})}),r}}a.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),a.sequence=1,t.default=a},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(/*! xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js"),s=d(i(/*! xgplayer-utils/src/models/MediaSegmentList */"../xgplayer-utils/src/models/MediaSegmentList.js")),n=d(i(/*! xgplayer-utils/src/models/MediaSegment */"../xgplayer-utils/src/models/MediaSegment.js")),a=d(i(/*! xgplayer-utils/src/models/MediaSample */"../xgplayer-utils/src/models/MediaSample.js")),o=d(i(/*! xgplayer-utils/src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js")),u=d(i(/*! xgplayer-utils/src/write/Buffer */"../xgplayer-utils/src/write/Buffer.js")),l=d(i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"));function d(e){return e&&e.__esModule?e:{default:e}}class f{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new s.default("video"),this._audioSegmentList=new s.default("audio");const{browser:e}=o.default;this._fillSilenceFrame="ie"===e}init(){this.on(r.DEMUX_EVENTS.DEMUX_COMPLETE,this.remux.bind(this)),this.on(r.DEMUX_EVENTS.METADATA_PARSED,this.onMetaDataReady.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t,i,s=new u.default,n=l.default.ftyp();if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");i=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");i=e}t=l.default.moov({type:e,meta:i.meta}),s.write(n,t);let a=this._context.getInstance("PRE_SOURCE_BUFFER"),o=a.getSource(e);o||(o=a.createSource(e)),o.mimetype=i.meta.codec,o.init=s,this.emit(r.REMUX_EVENTS.INIT_SEGMENT,e)}calcDtsBase(e,t){let i=1/0,r=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(r=t.samples[0].dts),this._dtsBase=Math.min(i,r),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let i,{samples:s}=t,o=-1,d=-1,f=-1,c=-1;const h=[],p={samples:[]},_=new n.default;for(;s.length;){const e=s.shift(),{isKeyframe:t}=e;let r=e.dts-this._dtsBase;const n=e.cts;if(void 0===i)if(this._videoNextDts)i=r-this._videoNextDts>=1e3?0:r-this._videoNextDts;else if(this._videoSegmentList.isEmpty())i=0;else{const e=this._videoSegmentList.getLastSegmentBefore(r);if(e){let t;const{lastDts:s,gap:n}=e;i=r-(s+(t=r-(s+n)>3?r-(s+n):0))}else i=0}const u=r,l=(r-=i)+n;-1===o&&(o=r,f=l);let d={buffer:[],size:0};p.samples.push(d),d.buffer.push(e.data),d.size+=e.data.byteLength,p.samples.push(d);let c=0;if(s.length>=1){c=s[0].dts-this._dtsBase-i-r}else c=h.length>=1?h[h.length-1].duration:this.videoMeta.refSampleDuration;if(t){const t=new a.default({dts:r,pts:l,duration:c,originDts:e.dts,isRAP:!0});_.addRAP(t)}h.push({dts:r,cts:n,pts:l,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:c,originDts:u})}const y=h[0],m=h[h.length-1];d=m.dts+m.duration,c=m.pts+m.duration,this._videoNextDts=d,_.startDts=o,_.endDts=d,_.startPts=f,_.endPts=c,_.originStartDts=y.originDts,_.originEndDts=m.originDts+m.duration,_.gap=i;const v=new a.default({dts:y.dts,pts:y.pts,duration:y.duration,isKeyframe:y.isKeyframe,originDts:y.originDts}),g=new a.default({dts:m.dts,pts:m.pts,duration:m.duration,isKeyframe:m.isKeyframe,originDts:m.originDts});_.firstSample=v,_.lastSample=g;let E=new u.default;const b=l.default.moof({id:t.meta.id,time:this._dtsBase,samples:h}),A=l.default.mdat(p);E.write(b,A),t.samples=[],t.length=0;let w=this._context.getInstance("PRE_SOURCE_BUFFER"),T=w.getSource("video");T||(T=w.createSource("video")),T.data.push(E),this.emit(r.REMUX_EVENTS.MEDIA_SEGMENT,"video")}_remuxAudio(e){const{samples:t}=e;let i,s,o=-1,d=-1,f=[];const c={samples:[]};if(!t||!t.length)return;let h=!1;for(;t.length;){let e=t.shift();const{data:r}=e;let n=e.dts-this._dtsBase,a=!1;if(void 0===i)if(this._audioNextDts)i=n-this._audioNextDts>=1e3?0:n-this._audioNextDts;else if(this._audioSegmentList.isEmpty())i=0;else{const e=this._audioSegmentList.getLastSegmentBefore(n);if(e){let t;const{lastDts:r,gap:s}=e;i=n-(r+(t=n-(r+s)>3?n-(r+s):0))}else a=this._fillSilenceFrame&&!this._videoSegmentList.isEmpty(),i=0}const u=n;if(n-=i,a){const e=this._videoSegmentList.getLastSampleBefore(u);e&&e.startDts<n?(s=n-e.startDts,n=e.startDts):a=!1}if(h||(o=n,h=!0),a){t.unshift(e);const i=this.initSilentAudio(n,s);f.push(i);let r={buffer:[],size:0};r.buffer.push({data:i.unit}),r.size+=i.unit.byteLength,c.samples.push(r);continue}let l=0;if(t.length>=1){l=t[0].dts-this._dtsBase-i-n}else l=f.length>=1?f[f.length-1].duration:this.audioMeta.refSampleDuration;const d={dts:n,pts:n,cts:0,size:r.byteLength,duration:l,originDts:u};let p={buffer:[],size:0};p.buffer.push(r),p.size+=r.byteLength,c.samples.push(p),f.push(d)}const p=f[f.length-1];d=p.dts+p.duration,this._audioNextDts=d;const _=new n.default;_.startDts=o,_.endDts=d,_.startPts=o,_.endPts=d,_.originStartDts=f[0].originDts,_.originEndDts=p.originDts+p.duration,_.gap=i,_.firstSample=new a.default({dts:f[0].dts,pts:f[0].pts,duration:f[0].duration,originDts:f[0].originDts}),_.lastSample=new a.default({dts:p.dts,pts:p.pts,duration:p.duration,originDts:p.originDts}),e.samples=f;const y=new u.default;e.time=o;const m=l.default.moof({id:e.meta.id,time:o,samples:f}),v=l.default.mdat(c);y.write(m,v),e.samples=[],e.length=0;let g=this._context.getInstance("PRE_SOURCE_BUFFER"),E=g.getSource("audio");E||(E=g.createSource("audio")),E.data.push(y),this.emit(r.REMUX_EVENTS.MEDIA_SEGMENT,"audio",y)}initSilentAudio(e,t){const i=f.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=f},"../xgplayer-utils/dist/Context.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/dist/Context.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! ./models/MediaInfo */"../xgplayer-utils/dist/models/MediaInfo.js"),n=(r=s)&&r.__esModule?r:{default:r};const a=i(/*! events */"./node_modules/events/events.js");t.default=class{constructor(e=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new n.default,this.allowedEvents=e}getInstance(e){if(this._instanceMap[e])return this._instanceMap[e];throw new Error(`${e}实例尚未初始化`)}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,r=this._isMessageNameValid.bind(this),s=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.TAG=e,this._context=s}on(e,t){return r(e),this.listeners[e]?this.listeners[e].push(t):this.listeners[e]=[t],i.on(e,t)}once(e,t){return r(e),i.once(e,t)}emit(e,...t){return r(e),console.log(`[${this.TAG}] ${e}`,this),i.emit(e,...t)}off(e,t){return r(e),i.off(e,t)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let t in this.listeners)if(e(t)){const e=this.listeners[t]||[];for(let r=0;r<e.length;r++){const s=e[r];i.off(t,s)}}}destroy(){this.removeListeners(),delete s._instanceMap[e],super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=null,this._clsMap=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/dist/constants/events.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/dist/constants/events.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=t.LOADER_EVENTS={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},s=t.DEMUX_EVENTS={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},n=t.REMUX_EVENTS={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},a=Object.assign({},r,s,n),o=t.flvAllowedEvents=[];for(let e in a)a.hasOwnProperty(e)&&o.push(a[e]);t.default=a},"../xgplayer-utils/dist/models/MediaInfo.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/dist/models/MediaInfo.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class s{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return s.isBaseInfoReady(this)&&s.isVideoReady(this)&&s.isAudioReady(this)}static isBaseInfoReady(e){return r(e)}static isVideoReady(e){return!e.hasVideo||r(e.video)}static isAudioReady(e){return!e.hasAudio||r(e.video)}}t.default=s},"../xgplayer-utils/dist/write/Buffer.js":
/*!**********************************************!*\
  !*** ../xgplayer-utils/dist/write/Buffer.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),n=(r=s)&&r.__esModule?r:{default:r};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,n.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,r=Array(i>1?i-1:0),s=1;s<i;s++)r[s-1]=arguments[s];var n=!0,a=!1,o=void 0;try{for(var u,l=r[Symbol.iterator]();!(n=(u=l.next()).done);n=!0){var d=u.value;t+=d.length}}catch(e){a=!0,o=e}finally{try{!n&&l.return&&l.return()}finally{if(a)throw o}}var f=new e(t),c=0,h=!0,p=!1,_=void 0;try{for(var y,m=r[Symbol.iterator]();!(h=(y=m.next()).done);h=!0){var v=y.value;f.set(v,c),c+=v.length}}catch(e){p=!0,_=e}finally{try{!h&&m.return&&m.return()}finally{if(p)throw _}}return f}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";var r,s=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"),n=(r=s)&&r.__esModule?r:{default:r};e.exports=n.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=t.LOADER_EVENTS={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},s=t.DEMUX_EVENTS={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},n=t.REMUX_EVENTS={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},a=Object.assign({},r,s,n),o=t.flvAllowedEvents=[];for(let e in a)a.hasOwnProperty(e)&&o.push(a[e]);t.default=a},"../xgplayer-utils/src/env/isLE.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isLE.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=r},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),s={get device(){let e=s.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,r=/(?:Android)/.test(e),s=/(?:Firefox)/.test(e),n=/(?:iPad|PlayBook)/.test(e)||r&&!/(?:Mobile)/.test(e)||s&&/(?:Tablet)/.test(e),a=/(?:iPhone)/.test(e)&&!n;return{isTablet:n,isPhone:a,isAndroid:r,isPc:!a&&!r&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:s}},get isLe(){return r}};t.default=s},"../xgplayer-utils/src/h264/SPSParser.js":
/*!***********************************************!*\
  !*** ../xgplayer-utils/src/h264/SPSParser.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! ./golomb */"../xgplayer-utils/src/h264/golomb.js"),n=(r=s)&&r.__esModule?r:{default:r};class a{static _ebsp2rbsp(e){let t=e,i=t.byteLength,r=new Uint8Array(i),s=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(r[s]=t[e],s++);return new Uint8Array(r.buffer,0,s)}static parseSPS(e){let t=a._ebsp2rbsp(e),i=new n.default(t);i.readByte();let r=i.readByte();i.readByte();let s=i.readByte();i.readUEG();let o=a.getProfileString(r),u=a.getLevelString(s),l=1,d=420,f=[0,420,422,444],c=8;if((100===r||110===r||122===r||244===r||44===r||83===r||86===r||118===r||128===r||138===r||144===r)&&(3===(l=i.readUEG())&&i.readBits(1),l<=3&&(d=f[l]),c=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==l?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?a._skipScalingList(i,16):a._skipScalingList(i,64))}i.readUEG();let h=i.readUEG();if(0===h)i.readUEG();else if(1===h){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let p=i.readUEG(),_=i.readUEG(),y=i.readBits(1);0===y&&i.readBits(1),i.readBits(1);let m=0,v=0,g=0,E=0;i.readBool()&&(m=i.readUEG(),v=i.readUEG(),g=i.readUEG(),E=i.readUEG());let b=1,A=1,w=0,T=!0,S=0,M=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],r=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(b=t[e-1],A=r[e-1]):255===e&&(b=i.readByte()<<8|i.readByte(),A=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);T=i.readBool(),w=(S=t)/(M=2*e)}}let R=1;1===b&&1===A||(R=b/A);let x=0,O=0;if(0===l)x=1,O=2-y;else{x=3===l?1:2,O=(1===l?2:1)*(2-y)}let D=16*(p+1),L=16*(_+1)*(2-y);D-=(m+v)*x,L-=(g+E)*O;let k=Math.ceil(D*R);return i.destroy(),i=null,{profile_string:o,level_string:u,bit_depth:c,chroma_format:d,chroma_format_string:a.getChromaFormatString(d),frame_rate:{fixed:T,fps:w,fps_den:M,fps_num:S},par_ratio:{width:b,height:A},codec_size:{width:D,height:L},present_size:{width:k,height:L}}}static _skipScalingList(e,t){let i=8,r=8,s=0;for(let n=0;n<t;n++)0!==r&&(r=(i+(s=e.readSEG())+256)%256),i=0===r?i:r}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},e.frame_rate.fixed&&e.frame_rate.fps_num>0&&e.frame_rate.fps_den>0&&(t.frameRate=e.frame_rate);let i=t.frameRate.fps_den,r=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/r))}}t.default=a},"../xgplayer-utils/src/h264/golomb.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/h264/golomb.js ***!
  \********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0,!1),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){if(e<=this._currentWordBitsLeft){let t=this._currentWord>>>32-e;return this._currentWord<<=e,this._currentWordBitsLeft-=e,t}let t=this._currentWordBitsLeft?this._currentWord:0;this._currentWordBitsLeft;let i=e-this._currentWordBitsLeft;this._fillCurrentWord();let r=Math.min(i,this._currentWordBitsLeft),s=this._currentWord>>>32-r;return this._currentWord<<=r,this._currentWordBitsLeft-=r,t=t<<r|s}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-utils/src/models/MediaSample.js":
/*!***************************************************!*\
  !*** ../xgplayer-utils/src/models/MediaSample.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(e){let t=r.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=r},"../xgplayer-utils/src/models/MediaSegment.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/MediaSegment.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/MediaSegmentList.js":
/*!********************************************************!*\
  !*** ../xgplayer-utils/src/models/MediaSegmentList.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,r=0,s=0,n=i,a=0;if(e<t[0].originDts)return a=-1;for(;s<=n;){if((r=s+Math.floor((n-s)/2))===i||e>t[r].lastSample.originDts&&e<t[r+1].originDts){a=r;break}t[r].originDts<e?s=r+1:n=r-1}return a}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,r=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?r=i+1:t.length>0&&(r=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=r,this._list.splice(r,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},"../xgplayer-utils/src/models/trackMeta.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/models/trackMeta.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}};t.VideoTrackMeta=class{constructor(e){const t={avcc:null,chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}}},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={}}init(){let e=this;this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",t=>{e.addSourceBuffers()}),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src}addSourceBuffers(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e.sources.audio&&e.sources.video)for(let t=0,i=Object.keys(e.sources).length;t<i;t++){let i=e.sources[Object.keys(e.sources)[t]],r="video"===Object.keys(e.sources)[t]?"video/mp4;codecs="+i.mimetype:"audio/mp4;codecs="+i.mimetype,s=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[Object.keys(e.sources)[t]]=s,s.addEventListener("updateend",()=>{this.doAppend()}),this.doAppend()}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],r=this.sourceBuffers[i];if(!r.updating){let t=e.sources[i];if(t&&!t.inited)console.log(`${i}`,t.init.buffer),r.appendBuffer(t.init.buffer.buffer),t.inited=!0;else{let e=t.data.shift();e&&r.appendBuffer(e.buffer.buffer)}}}}}},"../xgplayer-utils/src/write/Buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/Buffer.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),n=(r=s)&&r.__esModule?r:{default:r};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,n.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";var r,s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n="object"===("undefined"==typeof Reflect?"undefined":s(Reflect))?Reflect:null,a=n&&"function"==typeof n.apply?n.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};r=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function u(){u.init.call(this)}e.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var l=10;function d(e){return void 0===e._maxListeners?u.defaultMaxListeners:e._maxListeners}function f(e,t,i,r){var n,a,o,u;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===i?"undefined":s(i)));if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),o=a[t]),void 0===o)o=a[t]=i,++e._eventsCount;else if("function"==typeof o?o=a[t]=r?[i,o]:[o,i]:r?o.unshift(i):o.push(i),(n=d(e))>0&&o.length>n&&!o.warned){o.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=o.length,u=l,console&&console.warn&&console.warn(u)}return e}function c(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function h(e,t,i){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},s=c.bind(r);return s.listener=i,r.wrapFn=s,s}function p(e,t,i){var r=e._events;if(void 0===r)return[];var s=r[t];return void 0===s?[]:"function"==typeof s?i?[s.listener||s]:[s]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(s):y(s,s.length)}function _(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function y(e,t){for(var i=new Array(t),r=0;r<t;++r)i[r]=e[r];return i}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},u.prototype.getMaxListeners=function(){return d(this)},u.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var r="error"===e,s=this._events;if(void 0!==s)r=r&&void 0===s.error;else if(!r)return!1;if(r){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var u=s[e];if(void 0===u)return!1;if("function"==typeof u)a(u,this,t);else{var l=u.length,d=y(u,l);for(i=0;i<l;++i)a(d[i],this,t)}return!0},u.prototype.addListener=function(e,t){return f(this,e,t,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(e,t){return f(this,e,t,!0)},u.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":s(t)));return this.on(e,h(this,e,t)),this},u.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":s(t)));return this.prependListener(e,h(this,e,t)),this},u.prototype.removeListener=function(e,t){var i,r,n,a,o;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":s(t)));if(void 0===(r=this._events))return this;if(void 0===(i=r[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(n=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){o=i[a].listener,n=a;break}if(n<0)return this;0===n?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,n),1===i.length&&(r[e]=i[0]),void 0!==r.removeListener&&this.emit("removeListener",e,o||t)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){var t,i,r;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var s,n=Object.keys(i);for(r=0;r<n.length;++r)"removeListener"!==(s=n[r])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},u.prototype.listeners=function(e){return p(this,e,!0)},u.prototype.rawListeners=function(e){return p(this,e,!1)},u.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):_.call(e,t)},u.prototype.listenerCount=_,u.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},"./src/Flv.js":
/*!********************!*\
  !*** ./src/Flv.js ***!
  \********************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),s=f(i(/*! ./parse/demux */"./src/parse/demux/index.js")),n=f(i(/*! xgplayer-remux/src/mp4 */"../xgplayer-remux/src/mp4/index.js")),a=f(i(/*! xgplayer-utils/src/mse */"../xgplayer-utils/src/mse/index.js")),o=f(i(/*! xgplayer-loader-fetch */"../xgplayer-loader-fetch/dist/index.js")),u=f(i(/*! xgplayer-buffer/src/presouce */"../xgplayer-buffer/src/presouce.js")),l=i(/*! xgplayer-buffer/src/index */"../xgplayer-buffer/src/index.js"),d=i(/*! xgplayer-utils/dist/constants/events */"../xgplayer-utils/dist/constants/events.js");function f(e){return e&&e.__esModule?e:{default:e}}var c="FLVController",h=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.TAG=c,this._player=t,this.state={initSegmentArrived:!1,range:{start:0,end:""}}}return r(e,[{key:"init",value:function(){this._context.registry("FLV_DEMUXER",s.default),this._context.registry("FETCH_LOADER",o.default),this._context.registry("LOADER_BUFFER",l.XgBuffer),this._context.registry("TRACKS",l.Tracks),this._context.registry("MP4_REMUXER",n.default),this._context.registry("PRE_SOURCE_BUFFER",u.default),this.mse=this._context.registry("MSE",a.default)({container:this._player}),this.initListeners()}},{key:"initListeners",value:function(){this.on(d.REMUX_EVENTS.MEDIA_SEGMENT,this.handleMediaSegment.bind(this)),this.on(d.DEMUX_EVENTS.MEDIA_INFO,this.handleMediaInfo.bind(this)),this.on(d.REMUX_EVENTS.INIT_SEGMENT,this.handleAppendInitSegment.bind(this))}},{key:"handleMediaInfo",value:function(){this._context.mediaInfo||this.emit(d.DEMUX_EVENTS.DEMUX_ERROR,new Error("failed to get mediainfo"));var e=this._context.getInstance("LOADER_BUFFER"),t=this._context.getInstance("FETCH_LOADER");this.isSeekable&&(t.cancel(),this.state.range={start:0,end:e.historyLen-1})}},{key:"handleMediaSegment",value:function(){this.mse.doAppend()}},{key:"handleAppendInitSegment",value:function(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}},{key:"seek",value:function(e){if(!this._player.isLive&&this.isSeekable)if(this.state.initSegmentArrived){var t=this._player.config.preloadTime,i=void 0===t?15:t,r=this.getRange(e,i);this.state.range=r,this.loadData()}else this.loadMeta()}},{key:"loadData",value:function(){var e=this.state,t=e.start,i=e.end;this._context.getInstance("FETCH_LOADER").load(this._player.config.url,{Range:"bytes="+t+"-"+i})}},{key:"loadMeta",value:function(){this._context.getInstance("FETCH_LOADER").load(this._player.config.url)}},{key:"getRange",value:function(e,t){var i=this._context.onMetaData.keyframes,r=this._context.getInstance("TRACKS").videoTrack.meta.timescale,s=function(e){for(var t=0,r=i.times.length;t<r;t++){var s=i.times[t],n=t+1<r?i.times[t+1]:Number.MAX_SAFE_INTEGER;if(s<=e&&e<=n)return t}return""};return{start:s(e*r),end:s((e+t)*r)}}},{key:"destroy",value:function(){}},{key:"isSeekable",get:function(){return!this._context||!this._context.mediaInfo.isComplete()||null!==this._context.mediaInfo.keyframes&&void 0!==this._context.mediaInfo.keyframes}}]),e}();t.default=h},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,i){"use strict";var r=u(i(/*! xgplayer */"xgplayer")),s=u(i(/*! xgplayer-utils/dist/Context */"../xgplayer-utils/dist/Context.js")),n=u(i(/*! ./Flv */"./src/Flv.js")),a=i(/*! xgplayer-utils/dist/constants/events */"../xgplayer-utils/dist/constants/events.js"),o=u(a);function u(e){return e&&e.__esModule?e:{default:e}}r.default.install("flvplayer",(function(){var e=this,t=r.default.util,i=new s.default(a.flvAllowedEvents),u=e.config.preloadTime||15,l=e.start,d=void 0;e.start=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.config.url;r&&(d=i.registry("FLV_CONTROLLER",n.default)(e),i.init(),d.once(o.default.INIT_SEGMENT,(function(){if(e.config.isLive){t.addClass(e.root,"xgplayer-is-live");var i=t.createDom("xg-live","正在直播",{},"xgplayer-live");e.controls.appendChild(i);var r=setInterval((function(){if(e.paused&&e.buffered.length)for(var t=0,i=e.buffered.length;t<i;t++)if(e.buffered.start(t)>e.currentTime){e.currentTime=e.buffered.start(t),clearInterval(r);break}}),200)}else clearTimeout(d.timer)})),l.call(e,d.mse.url),f())};var f=function(){Object.defineProperty(e,"src",{get:function(){return e.currentSrc},set:function(t){e.config.url=t,e.paused?e.start(t):(e.pause(),e.once("pause",(function(){e.start(t)})),e.once("canplay",(function(){e.play()}))),e.once("canplay",(function(){e.currentTime=0}))},configurable:!0})},c=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.currentTime,i=e.getBufferedRange();t<i[1]?e.config.isLive||i[1]-t<u&&d.seek(i[1]+1):d.seek(t)};e.on("timeupdate",(function(){c(e.currentTime+1),function(e,t){if(!e.config.isLive&&e.duration-e.currentTime<2){var i=e.getBufferedRange();e.currentTime-i[1]<.1&&t.mse.endOfStream()}}(e,d)})),e.on("seeking",(function(){c()})),e.on("waiting",(function(){if("live"===d.type)for(var t=e.buffered,i=t.length,r=e.currentTime,s=0;s<i;s++)if(t.start(s)>r){e.currentTime=t.start(s)+.1;break}})),e.once("destroy",(function(){d.destroy()}))}))},"./src/parse/demux/AMFParser.js":
/*!**************************************!*\
  !*** ./src/parse/demux/AMFParser.js ***!
  \**************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),s=a(i(/*! ../../../../xgplayer-utils/src/env/isLE */"../xgplayer-utils/src/env/isLE.js")),n=a(i(/*! ../../utils/UTF8 */"./src/utils/UTF8.js"));function a(e){return e&&e.__esModule?e:{default:e}}var o=0,u=1,l=2,d=3,f=8,c=9,h=10,p=11,_=12,y=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.offset=0,this.readOffset=this.offset}return r(e,[{key:"resolve",value:function(e,t){if(t<3)throw new Error("not enough data for metainfo");var i={},r=this.parseValue(e),s=this.parseValue(e,t-r.bodySize);return i[r.data]=s.data,this.resetStatus(),i}},{key:"resetStatus",value:function(){this.offset=0,this.readOffset=this.offset}},{key:"parseString",value:function(e){var t=new DataView(e,this.readOffset).getUint16(0,!s.default),i="";i=t>0?n.default.decode(new Uint8Array(e,this.readOffset+2,t)):"";var r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}},{key:"parseDate",value:function(e,t){var i=new DataView(e,this.readOffset,t),r=i.getFloat64(0,!s.default);return r+=60*i.getInt16(8,!s.default)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}},{key:"parseObject",value:function(e,t){var i=this.parseString(e,t),r=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:r.data},bodySize:i.bodySize+r.bodySize,isObjEnd:r.isObjEnd}}},{key:"parseLongString",value:function(e){var t=new DataView(e,this.readOffset).getUint32(0,!s.default),i="";return i=t>0?n.default.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}},{key:"parseValue",value:function(e,t){var i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;var r=o,n=u,a=l,y=d,m=f,v=c,g=h,E=p,b=_,A=new DataView(i,this.readOffset,t),w=!1,T=A.getUint8(0),S=1;this.readOffset+=1;var M=null;switch(T){case r:M=A.getFloat64(1,!s.default),this.readOffset+=8,S+=8;break;case n:M=!!A.getUint8(1),this.readOffset+=1,S+=1;break;case a:var R=this.parseString(i);M=R.data,S+=R.bodySize;break;case y:M={};var x=0;for(16777215&A.getUint32(t-4,!s.default)&&(x=3);S<t-4;){var O=this.parseObject(i,t-S-x);if(O.isObjectEnd)break;M[O.data.name]=O.data.value,S+=O.bodySize}if(S<=t-3)9===(16777215&A.getUint32(S-1,!s.default))&&(this.readOffset+=3,S+=3);break;case m:M={},S+=4,this.readOffset+=4;var D=0;for(9==(16777215&A.getUint32(t-4,!s.default))&&(D=3);S<t-8;){var L=this.parseObject(i,t-S-D);if(L.isObjectEnd)break;M[L.data.name]=L.data.value,S+=L.bodySize}if(S<=t-3)9===(16777215&A.getUint32(S-1,!s.default))&&(S+=3,this.readOffset+=3);break;case v:M=null,w=!0;break;case g:M=[];var k=A.getUint32(1,!s.default);S+=4,this.readOffset+=4;for(var U=0;U<k;U++){var B=this.parseValue(i,t-S);M.push(B.data),S+=B.bodySize}break;case E:var j=this.parseDate(i,t-1);M=j.data,S+=j.bodySize;break;case b:var I=this.parseLongString(i,t-1);M=I.data,S+=I.bodySize;break;default:S=t}return{data:M,bodySize:S,isObjEnd:w}}}]),e}();t.default=y},"./src/parse/demux/index.js":
/*!**********************************!*\
  !*** ./src/parse/demux/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),s=i(/*! ../../../../xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js"),n=l(i(/*! ./AMFParser */"./src/parse/demux/AMFParser.js")),a=l(i(/*! ../../../../xgplayer-utils/src/h264/SPSParser */"../xgplayer-utils/src/h264/SPSParser.js")),o=i(/*! ../../../../xgplayer-utils/src/models/trackMeta */"../xgplayer-utils/src/models/trackMeta.js"),u=i(/*! ../../../../xgplayer-buffer/src */"../xgplayer-buffer/src/index.js");function l(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}return r(e,[{key:"init",value:function(){this.on(s.LOADER_EVENTS.LOADER_DATALOADED,this.handleDataLoaded.bind(this))}},{key:"handleDataLoaded",value:function(){this.parseFlvStream()}},{key:"parseFlvStream",value:function(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;this._parseFlvTag()&&this.parseFlvStream()}else{if(this.loaderBuffer.length<13)return;var e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.parseFlvStream()}}},{key:"parseFlvHeader",value:function(t){if(e.isFlvFile(t)){this._firstFragmentLoaded=!0;var i=e.getPlayType(t[4]);i.hasVideo&&this.initVideoTrack(),i.hasAudio&&this.initAudioTrack()}else this.emit(s.DEMUX_EVENTS.DEMUX_ERROR,new Error("invalid flv file")),this.parseFlvStream();this.handleDataLoaded()}},{key:"initVideoTrack",value:function(){this._trackNum++;var e=new u.VideoTrack;e.meta=new o.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}},{key:"initAudioTrack",value:function(){this._trackNum++;var e=new u.AudioTrack;e.meta=new o.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}},{key:"_parseFlvTag",value:function(){if(this.loaderBuffer.length<11)return null;var e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}},{key:"_parseFlvTagHeader",value:function(){var e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.logger.warn(this.TAG,"tagType "+t.tagType),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);var r=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);var s=this.loaderBuffer.shift(1)[0];return s>0&&(r+=16777216*s),t.dts=r,this.loaderBuffer.shift(3),t}},{key:"_processChunk",value:function(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}},{key:"_parseScriptData",value:function(e){var t=this.tracks.audioTrack,i=this.tracks.videoTrack,r=this.loaderBuffer.shift(e.datasize),a=(new n.default).resolve(r,r.length),o=this._context.onMetaData=a?a.onMetaData:void 0;if(this._context.mediaInfo.duration=o.duration,this._context.mediaInfo.hasVideo=o.hasVideo,this._context.mediaInfo.hsaAudio=o.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(s.DEMUX_EVENTS.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){var u=t.meta;switch(o.audiosamplerate&&(u.sampleRate=o.audiosamplerate),o.audiochannels&&(u.channelCount=o.audiochannels),o.audiosamplerate){case 44100:u.sampleRateIndex=4;break;case 22050:u.sampleRateIndex=7;break;case 11025:u.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){var l=i.meta;if("number"==typeof o.framerate){var d=Math.floor(1e3*o.framerate);if(d>0){var f=d/1e3;l.frameRate||(l.frameRate={}),l.frameRate.fixed=!0,l.frameRate.fps=f,l.frameRate.fps_num=d,l.frameRate.fps_den=1e3}}}}},{key:"_aacSequenceHeaderParser",value:function(e){var t={hasSpecificConfig:!0};return t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec="mp4a.40."+t.objectType,t}},{key:"_parseAACData",value:function(e){var t=this.tracks.audioTrack;if(t){var i=t.meta;i||(i=new o.AudioTrackMeta);var r=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);var n=(240&r)>>>4;t.format=n,10!==n&&this.emit(s.DEMUX_EVENTS.DEMUX_ERROR,new Error("invalid audio format: "+n)),10!==n||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(r),i.sampleRateIndex=(12&r)>>>2,i.frameLenth=(2&r)>>>1,i.channelCount=1&r,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));var a=i.audioSampleRate,u=i.sampleRateIndex,l=i.refSampleDuration;delete e.tagType;var d=this._datasizeValidator(e.datasize);if(0===e.data[0]){var f=this._aacSequenceHeaderParser(e.data);a=f.audiosamplerate||i.audioSampleRate,u=f.sampleRateIndex||i.sampleRateIndex,l=Math.floor(1024/a*i.timescale),i.channelCount=f.channelCount,i.sampleRate=a,i.sampleRateIndex=u,i.refSampleDuration=l,i.duration=this._context.mediaInfo.duration*i.timescale;var c=this._context.mediaInfo.audio;c.codec=f.codec,c.channelCount=f.channelCount,c.sampleRate=a,c.sampleRateIndex=f.audioSampleRateIndex,!this._hasScript||this._hasAudioSequence||this.tracks.videoTrack&&!this._hasVideoSequence?this._hasScript&&this._hasAudioSequence&&this.emit(s.DEMUX_EVENTS.AUDIO_METADATA_CHANGE):this.emit(s.DEMUX_EVENTS.METADATA_PARSED,"audio"),this._hasAudioSequence=!0}else e.data=e.data.slice(1,e.data.length),t.samples.push(e),this.emit(s.DEMUX_EVENTS.DEMUX_COMPLETE);d||this.logger.warn(this.TAG,"TAG length error at "+e.datasize)}}},{key:"_parseHevcData",value:function(e){var t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=5===e.frameType;var i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){var r=this.loaderBuffer.shift(e.datasize-5);if(e.data=r,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize);var n={},a=0;for(n.cts=e.cts,n.dts=e.dts;e.data.length>a;){var o=e.data.slice(Number.parseInt(a),4+a);n.size=o[3],n.size+=256*o[2],n.size+=256*o[1]*256,n.size+=256*o[0]*256*256,a+=4,n.data=e.data.slice(Number.parseInt(a),n.size+a),a+=n.size,this.tracks.videoTrack.samples.push(n),this.emit(s.DEMUX_EVENTS.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(s.DEMUX_EVENTS.METADATA_PARSED,"video"):this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize))}else if(7===i){var u=this.loaderBuffer.shift(e.datasize-5);if(0===u[4]&&0===u[5]&&0===u[6]&&1===u[7]){for(var l=0,d=0;d<4;d++)l=256*l+u[d];l-=4,(u=u.slice(4,u.length))[3]=l%256,l=(l-u[3])/256,u[2]=l%256,l=(l-u[2])/256,u[1]=l%256,u[0]=(l-u[1])/256}if(e.data=u,0===e.avcPacketType)this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(s.DEMUX_EVENTS.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(s.DEMUX_EVENTS.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0);else this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize),this.tracks.videoTrack.samples.push(e),this.emit(s.DEMUX_EVENTS.DEMUX_COMPLETE)}else this.logger.warn(this.TAG,"video codeid is "+i),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize),this.tracks.videoTrack.samples.push(e),this.emit(s.DEMUX_EVENTS.DEMUX_COMPLETE);delete e.tagType}},{key:"_avcSequenceHeaderParser",value:function(e){var t=this.tracks.videoTrack;if(t){var i=0;t.meta||(t.meta=new o.VideoTrackMeta);var r=t.meta;r.configurationVersion=e[0],r.avcProfileIndication=e[1],r.profileCompatibility=e[2],r.avcLevelIndication=e[3]/10,r.nalUnitLength=1+(3&e[4]);var s=31&e[5];i=6;for(var n={},u=0;u<s;u++){var l=255*e[i]+e[i+1];i+=2;for(var d=new Uint8Array(l),f=0;f<l;f++)d[f]=e[i+f];for(var c="avc1.",h=1;h<4;h++){var p=d[h].toString(16);p.length<2&&(p="0"+p),c+=p}r.codec=c,i+=l,this.tracks.videoTrack.sps=d,n=a.default.parseSPS(d)}var _=e[i];i++;for(var y=0;y<_;y++){var m=255*e[i]+e[i+1];i+=2;for(var v=new Uint8Array(m),g=0;g<m;g++)v[g]=e[i+g];i+=m,this.tracks.videoTrack.pps=v}Object.assign(r,a.default.toVideoMeta(n));var E=this._context.mediaInfo.video;E.codec=r.codec,E.profile=r.profile,E.level=r.level,E.chromaFormat=r.chromaFormat,E.frameRate=r.frameRate,E.parRatio=r.parRatio,E.width=E.width===r.presentWidth?E.width:r.presentWidth,E.height=E.height===r.presentHeight?E.width:r.presentHeight,r.duration=this._context.mediaInfo.duration*r.timescale,r.avcc=new Uint8Array(e.length),r.avcc.set(e),t.meta=r}}},{key:"_switchAudioSampleRate",value:function(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}},{key:"_switchAudioSamplingFrequency",value:function(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}},{key:"_switchAudioChannel",value:function(e){return[1,2][1&e]}},{key:"_datasizeValidator",value:function(e){var t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}},{key:"loaderBuffer",get:function(){if(this._context.getInstance("LOADER_BUFFER"))return this._context.getInstance("LOADER_BUFFER");this.emit(s.DEMUX_EVENTS.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}},{key:"tracks",get:function(){return this._context.getInstance("TRACKS")}},{key:"logger",get:function(){return this._context.getInstance("LOGGER")}}],[{key:"isFlvFile",value:function(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}},{key:"getPlayType",value:function(e){var t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}}]),e}();t.default=d},"./src/utils/UTF8.js":
/*!***************************!*\
  !*** ./src/utils/UTF8.js ***!
  \***************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}();var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"decode",value:function(t){for(var i=[],r=t,s=0,n=t.length;s<n;)if(r[s]<128)i.push(String.fromCharCode(r[s])),++s;else{if(r[s]<192);else if(r[s]<224){if(e._checkContinuation(r,s,1)){var a=(31&r[s])<<6|63&r[s+1];if(a>=128){i.push(String.fromCharCode(65535&a)),s+=2;continue}}}else if(r[s]<240){if(e._checkContinuation(r,s,2)){var o=(15&r[s])<<12|(63&r[s+1])<<6|63&r[s+2];if(o>=2048&&55296!=(63488&o)){i.push(String.fromCharCode(65535&o)),s+=3;continue}}}else if(r[s]<248&&e._checkContinuation(r,s,3)){var u=(7&r[s])<<18|(63&r[s+1])<<12|(63&r[s+2])<<6|63&r[s+3];if(u>65536&&u<1114112){u-=65536,i.push(String.fromCharCode(u>>>10|55296)),i.push(String.fromCharCode(1023&u|56320)),s+=4;continue}}i.push(String.fromCharCode(65533)),++s}return i.join("")}},{key:"_checkContinuation",value:function(e,t,i){var r=e;if(t+i<r.length){for(;i--;)if(128!=(192&r[++t]))return!1;return!0}return!1}}]),e}();t.default=s},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!*************************!*\
  !*** external "Player" ***!
  \*************************/
/*! no static exports found */function(e,t){e.exports=window.Player}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,