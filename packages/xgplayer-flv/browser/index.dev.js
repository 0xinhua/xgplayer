window.FlvPlayer=function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}({"../xgplayer-buffer/src/Track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/Track.js ***!
  \***************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-buffer/src/index.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/index.js ***!
  \***************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RemuxBuffer=t.Tracks=t.VideoTrack=t.AudioTrack=t.XgBuffer=void 0;var n,i=r(/*! ./Track */"../xgplayer-buffer/src/Track.js"),s=(n=i)&&n.__esModule?n:{default:n};t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),r=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let n=this.array[0].slice(this.offset,this.offset+e);t.set(n,r),this.offset+=e,this.length-=e,e=0;break}{let n=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),r),this.array.shift(),this.offset=0,r+=n,this.length-=n,e-=n}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let r=0,n=this.offset+e;for(;n<this.offset+t+e;)n<this.array[0].length?r=256*r+this.array[0][n]:this.array[1]&&(r=256*r+this.array[1][n-this.array[0].length]),n++;return r}};t.AudioTrack=class extends s.default{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}};t.VideoTrack=class extends s.default{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}};t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-loader-fetch/dist/index.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader-fetch/dist/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,r){"use strict";window,e.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){e.exports=r(1)},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n,i=(n=r(2))&&n.__esModule?n:{default:n},s=r(5);window.Context=i.default,t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this.buffer=this.configs.buffer||"LOADER_BUFFER"}static get type(){return"loader"}load(e,t){let r=this;this.url=e;let n=this.getParams(t);return fetch(this.url,n).then((function(e){return r.status=e.status,r.loading=!0,r._onFetchResponse(e)}))}_onFetchResponse(e){if(!0===e.ok)return this._onReader(e.body.getReader())}_onReader(e){let t=this._context.getInstance(this.buffer||"LOADER_BUFFER");if(t||this._reader.cancel(),this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then((function(n){return n.done?(r.loading=!1,r.status=0,void r.emit(s.LOADER_EVENTS.LOADER_COMPLETE,t)):(t.push(n.value),r.emit(s.LOADER_EVENTS.LOADER_DATALOADED,t),r._onReader(e))})).catch((function(e){console.log(e)}))}getParams(e){let t=Object.assign({},e),r=new Headers,n={method:"GET",headers:r,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&r.append(t,e[t])}return!1===t.cors&&(n.mode="same-origin"),t.withCredentials&&(n.credentials="include"),n}cancel(){this._reader&&(this._reader.cancel(),this._reader=null)}}},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n,i=(n=r(3))&&n.__esModule?n:{default:n};const s=r(4);t.default=class{constructor(e=[]){this._emitter=new s.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new i.default,this.allowedEvents=e}getInstance(e){if(this._instanceMap[e])return this._instanceMap[e];throw new Error(`${e}实例尚未初始化`)}initInstance(e,...t){if(this._clsMap[e]){const r=new this._clsMap[e](...t);return this._instanceMap[e]=r,r.init&&r.init(),r}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const r=this._emitter,n=this._isMessageNameValid.bind(this),i=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.TAG=e,this._context=i}on(e,t){return n(e),this.listeners[e]?this.listeners[e].push(t):this.listeners[e]=[t],r.on(e,t)}once(e,t){return n(e),r.once(e,t)}emit(e,...t){return n(e),console.log(`[${this.TAG}] ${e}`,this),r.emit(e,...t)}off(e,t){return n(e),r.off(e,t)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let t in this.listeners)if(e(t)){const e=this.listeners[t]||[];for(let n=0;n<e.length;n++){const i=e[n];r.off(t,i)}}}destroy(){this.removeListeners(),delete i._instanceMap[e],super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=null,this._clsMap=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});const n=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class i{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return i.isBaseInfoReady(this)&&i.isVideoReady(this)&&i.isAudioReady(this)}static isBaseInfoReady(e){return n(e)}static isVideoReady(e){return!e.hasVideo||n(e.video)}static isAudioReady(e){return!e.hasAudio||n(e.video)}}t.default=i},function(e,t,r){var n,i="object"==typeof Reflect?Reflect:null,s=i&&"function"==typeof i.apply?i.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function l(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function c(e,t,r,n){var i,s,o,a;if("function"!=typeof r)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof r);if(void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),s=e._events),o=s[t]),void 0===o)o=s[t]=r,++e._eventsCount;else if("function"==typeof o?o=s[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),(i=l(e))>0&&o.length>i&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=o.length,a=u,console&&console.warn&&console.warn(a)}return e}function f(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,s(this.listener,this.target,e))}function d(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=f.bind(n);return i.listener=r,n.wrapFn=i,i}function h(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):v(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function v(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return l(this)},a.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var u=i[e];if(void 0===u)return!1;if("function"==typeof u)s(u,this,t);else{var l=u.length,c=v(u,l);for(r=0;r<l;++r)s(c[r],this,t)}return!0},a.prototype.addListener=function(e,t){return c(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return c(this,e,t,!0)},a.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,d(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,d(this,e,t)),this},a.prototype.removeListener=function(e,t){var r,n,i,s,o;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,s=r.length-1;s>=0;s--)if(r[s]===t||r[s].listener===t){o=r[s].listener,i=s;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,s=Object.keys(r);for(n=0;n<s.length;++n)"removeListener"!==(i=s[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},a.prototype.listeners=function(e){return h(this,e,!0)},a.prototype.rawListeners=function(e){return h(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},a.prototype.listenerCount=p,a.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});const n=t.LOADER_EVENTS={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},i=t.DEMUX_EVENTS={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},s=t.REMUX_EVENTS={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},o=Object.assign({},n,i,s),a=t.flvAllowedEvents=[];for(let e in o)o.hasOwnProperty(e)&&a.push(o[e]);t.default=o}])},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t){throw new Error("Module build failed (from ./node_modules/babel-loader/lib/index.js):\nSyntaxError: Unexpected character '∂' (62:20)\n\n[0m [90m 60 | [39m    } [36melse[39m {\n [90m 61 | [39m      [36mconst[39m { videoTrack } [33m=[39m [36mthis[39m[33m.[39m_context[33m.[39mgetInstance([32m'TRACKS'[39m)\n[31m[1m>[22m[39m[90m 62 | [39m      moov [33m=[39m [33mFmp4[39m[33m.[39mmo∂ov({ type[33m,[39m meta[33m:[39m videoTrack[33m.[39mmeta })\n [90m    | [39m                    [31m[1m^[22m[39m\n [90m 63 | [39m    }\n [90m 64 | [39m\n [90m 65 | [39m    initSegment[33m.[39mwrite(ftyp[33m,[39m moov)[0m\n")},"../xgplayer-utils/dist/Context.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/dist/Context.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,i=r(/*! ./models/MediaInfo */"../xgplayer-utils/dist/models/MediaInfo.js"),s=(n=i)&&n.__esModule?n:{default:n};const o=r(/*! events */"./node_modules/events/events.js");t.default=class{constructor(e=[]){this._emitter=new o.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new s.default,this.allowedEvents=e}getInstance(e){if(this._instanceMap[e])return this._instanceMap[e];throw new Error(`${e}实例尚未初始化`)}initInstance(e,...t){if(this._clsMap[e]){const r=new this._clsMap[e](...t);return this._instanceMap[e]=r,r.init&&r.init(),r}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const r=this._emitter,n=this._isMessageNameValid.bind(this),i=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.TAG=e,this._context=i}on(e,t){return n(e),this.listeners[e]?this.listeners[e].push(t):this.listeners[e]=[t],r.on(e,t)}once(e,t){return n(e),r.once(e,t)}emit(e,...t){return n(e),console.log(`[${this.TAG}] ${e}`,this),r.emit(e,...t)}off(e,t){return n(e),r.off(e,t)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let t in this.listeners)if(e(t)){const e=this.listeners[t]||[];for(let n=0;n<e.length;n++){const i=e[n];r.off(t,i)}}}destroy(){this.removeListeners(),delete i._instanceMap[e],super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=null,this._clsMap=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/dist/constants/events.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/dist/constants/events.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=t.LOADER_EVENTS={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},i=t.DEMUX_EVENTS={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},s=t.REMUX_EVENTS={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},o=Object.assign({},n,i,s),a=t.flvAllowedEvents=[];for(let e in o)o.hasOwnProperty(e)&&a.push(o[e]);t.default=o},"../xgplayer-utils/dist/models/MediaInfo.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/dist/models/MediaInfo.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class i{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return i.isBaseInfoReady(this)&&i.isVideoReady(this)&&i.isAudioReady(this)}static isBaseInfoReady(e){return n(e)}static isVideoReady(e){return!e.hasVideo||n(e.video)}static isAudioReady(e){return!e.hasAudio||n(e.video)}}t.default=i},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=t.LOADER_EVENTS={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},i=t.DEMUX_EVENTS={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},s=t.REMUX_EVENTS={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},o=Object.assign({},n,i,s),a=t.flvAllowedEvents=[];for(let e in o)o.hasOwnProperty(e)&&a.push(o[e]);t.default=o},"../xgplayer-utils/src/env/isLE.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isLE.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=n},"../xgplayer-utils/src/h264/SPSParser.js":
/*!***********************************************!*\
  !*** ../xgplayer-utils/src/h264/SPSParser.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,i=r(/*! ./golomb */"../xgplayer-utils/src/h264/golomb.js"),s=(n=i)&&n.__esModule?n:{default:n};class o{static _ebsp2rbsp(e){let t=e,r=t.byteLength,n=new Uint8Array(r),i=0;for(let e=0;e<r;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(n[i]=t[e],i++);return new Uint8Array(n.buffer,0,i)}static parseSPS(e){let t=o._ebsp2rbsp(e),r=new s.default(t);r.readByte();let n=r.readByte();r.readByte();let i=r.readByte();r.readUEG();let a=o.getProfileString(n),u=o.getLevelString(i),l=1,c=420,f=[0,420,422,444],d=8;if((100===n||110===n||122===n||244===n||44===n||83===n||86===n||118===n||128===n||138===n||144===n)&&(3===(l=r.readUEG())&&r.readBits(1),l<=3&&(c=f[l]),d=r.readUEG()+8,r.readUEG(),r.readBits(1),r.readBool())){let e=3!==l?8:12;for(let t=0;t<e;t++)r.readBool()&&(t<6?o._skipScalingList(r,16):o._skipScalingList(r,64))}r.readUEG();let h=r.readUEG();if(0===h)r.readUEG();else if(1===h){r.readBits(1),r.readSEG(),r.readSEG();let e=r.readUEG();for(let t=0;t<e;t++)r.readSEG()}r.readUEG(),r.readBits(1);let p=r.readUEG(),v=r.readUEG(),_=r.readBits(1);0===_&&r.readBits(1),r.readBits(1);let m=0,y=0,g=0,E=0;r.readBool()&&(m=r.readUEG(),y=r.readUEG(),g=r.readUEG(),E=r.readUEG());let b=1,A=1,O=0,T=!0,w=0,M=0;if(r.readBool()){if(r.readBool()){let e=r.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],n=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(b=t[e-1],A=n[e-1]):255===e&&(b=r.readByte()<<8|r.readByte(),A=r.readByte()<<8|r.readByte())}if(r.readBool()&&r.readBool(),r.readBool()&&(r.readBits(4),r.readBool()&&r.readBits(24)),r.readBool()&&(r.readUEG(),r.readUEG()),r.readBool()){let e=r.readBits(32),t=r.readBits(32);T=r.readBool(),O=(w=t)/(M=2*e)}}let R=1;1===b&&1===A||(R=b/A);let S=0,x=0;if(0===l)S=1,x=2-_;else{S=3===l?1:2,x=(1===l?2:1)*(2-_)}let j=16*(p+1),L=16*(v+1)*(2-_);j-=(m+y)*S,L-=(g+E)*x;let D=Math.ceil(j*R);return r.destroy(),r=null,{profile_string:a,level_string:u,bit_depth:d,chroma_format:c,chroma_format_string:o.getChromaFormatString(c),frame_rate:{fixed:T,fps:O,fps_den:M,fps_num:w},par_ratio:{width:b,height:A},codec_size:{width:j,height:L},present_size:{width:D,height:L}}}static _skipScalingList(e,t){let r=8,n=8,i=0;for(let s=0;s<t;s++)0!==n&&(n=(r+(i=e.readSEG())+256)%256),r=0===n?r:n}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},e.frame_rate.fixed&&e.frame_rate.fps_num>0&&e.frame_rate.fps_den>0&&(t.frameRate=e.frame_rate);let r=t.frameRate.fps_den,n=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(r/n))}}t.default=o},"../xgplayer-utils/src/h264/golomb.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/h264/golomb.js ***!
  \********************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),r=new Uint8Array(4);r.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(r.buffer).getUint32(0,!1),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){if(e<=this._currentWordBitsLeft){let t=this._currentWord>>>32-e;return this._currentWord<<=e,this._currentWordBitsLeft-=e,t}let t=this._currentWordBitsLeft?this._currentWord:0;this._currentWordBitsLeft;let r=e-this._currentWordBitsLeft;this._fillCurrentWord();let n=Math.min(r,this._currentWordBitsLeft),i=this._currentWord>>>32-n;return this._currentWord<<=n,this._currentWordBitsLeft-=n,t=t<<n|i}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-utils/src/models/trackMeta.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/models/trackMeta.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}};t.VideoTrackMeta=class{constructor(e){const t={avcc:null,chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}}},"./node_modules/d/index.js":
/*!*********************************!*\
  !*** ./node_modules/d/index.js ***!
  \*********************************/
/*! no static exports found */function(e,t,r){"use strict";var n=r(/*! type/value/is */"./node_modules/type/value/is.js"),i=r(/*! type/plain-function/is */"./node_modules/type/plain-function/is.js"),s=r(/*! es5-ext/object/assign */"./node_modules/es5-ext/object/assign/index.js"),o=r(/*! es5-ext/object/normalize-options */"./node_modules/es5-ext/object/normalize-options.js"),a=r(/*! es5-ext/string/#/contains */"./node_modules/es5-ext/string/#/contains/index.js");(e.exports=function(e,t){var r,i,u,l,c;return arguments.length<2||"string"!=typeof e?(l=t,t=e,e=null):l=arguments[2],n(e)?(r=a.call(e,"c"),i=a.call(e,"e"),u=a.call(e,"w")):(r=u=!0,i=!1),c={value:t,configurable:r,enumerable:i,writable:u},l?s(o(l),c):c}).gs=function(e,t,r){var u,l,c,f;return"string"!=typeof e?(c=r,r=t,t=e,e=null):c=arguments[3],n(t)?i(t)?n(r)?i(r)||(c=r,r=void 0):r=void 0:(c=t,t=r=void 0):t=void 0,n(e)?(u=a.call(e,"c"),l=a.call(e,"e")):(u=!0,l=!1),f={get:t,set:r,configurable:u,enumerable:l},c?s(o(c),f):f}},"./node_modules/es5-ext/function/noop.js":
/*!***********************************************!*\
  !*** ./node_modules/es5-ext/function/noop.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=function(){}},"./node_modules/es5-ext/object/assign/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=r(/*! ./is-implemented */"./node_modules/es5-ext/object/assign/is-implemented.js")()?Object.assign:r(/*! ./shim */"./node_modules/es5-ext/object/assign/shim.js")},"./node_modules/es5-ext/object/assign/is-implemented.js":
/*!**************************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/is-implemented.js ***!
  \**************************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}},"./node_modules/es5-ext/object/assign/shim.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/shim.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,r){"use strict";var n=r(/*! ../keys */"./node_modules/es5-ext/object/keys/index.js"),i=r(/*! ../valid-value */"./node_modules/es5-ext/object/valid-value.js"),s=Math.max;e.exports=function(e,t){var r,o,a,u=s(arguments.length,2);for(e=Object(i(e)),a=function(n){try{e[n]=t[n]}catch(e){r||(r=e)}},o=1;o<u;++o)t=arguments[o],n(t).forEach(a);if(void 0!==r)throw r;return e}},"./node_modules/es5-ext/object/is-value.js":
/*!*************************************************!*\
  !*** ./node_modules/es5-ext/object/is-value.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,r){"use strict";var n=r(/*! ../function/noop */"./node_modules/es5-ext/function/noop.js")();e.exports=function(e){return e!==n&&null!==e}},"./node_modules/es5-ext/object/keys/index.js":
/*!***************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=r(/*! ./is-implemented */"./node_modules/es5-ext/object/keys/is-implemented.js")()?Object.keys:r(/*! ./shim */"./node_modules/es5-ext/object/keys/shim.js")},"./node_modules/es5-ext/object/keys/is-implemented.js":
/*!************************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/is-implemented.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=function(){try{return Object.keys("primitive"),!0}catch(e){return!1}}},"./node_modules/es5-ext/object/keys/shim.js":
/*!**************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/shim.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,r){"use strict";var n=r(/*! ../is-value */"./node_modules/es5-ext/object/is-value.js"),i=Object.keys;e.exports=function(e){return i(n(e)?Object(e):e)}},"./node_modules/es5-ext/object/normalize-options.js":
/*!**********************************************************!*\
  !*** ./node_modules/es5-ext/object/normalize-options.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,r){"use strict";var n=r(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js"),i=Array.prototype.forEach,s=Object.create,o=function(e,t){var r;for(r in e)t[r]=e[r]};e.exports=function(e){var t=s(null);return i.call(arguments,(function(e){n(e)&&o(Object(e),t)})),t}},"./node_modules/es5-ext/object/valid-callable.js":
/*!*******************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-callable.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e}},"./node_modules/es5-ext/object/valid-value.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-value.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,r){"use strict";var n=r(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js");e.exports=function(e){if(!n(e))throw new TypeError("Cannot use null or undefined");return e}},"./node_modules/es5-ext/string/#/contains/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/index.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=r(/*! ./is-implemented */"./node_modules/es5-ext/string/#/contains/is-implemented.js")()?String.prototype.contains:r(/*! ./shim */"./node_modules/es5-ext/string/#/contains/shim.js")},"./node_modules/es5-ext/string/#/contains/is-implemented.js":
/*!******************************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/is-implemented.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t,r){"use strict";var n="razdwatrzy";e.exports=function(){return"function"==typeof n.contains&&(!0===n.contains("dwa")&&!1===n.contains("foo"))}},"./node_modules/es5-ext/string/#/contains/shim.js":
/*!********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/shim.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,r){"use strict";var n=String.prototype.indexOf;e.exports=function(e){return n.call(this,e,arguments[1])>-1}},"./node_modules/event-emitter/index.js":
/*!*********************************************!*\
  !*** ./node_modules/event-emitter/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,r){"use strict";var n,i,s,o,a,u,l,c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f=r(/*! d */"./node_modules/d/index.js"),d=r(/*! es5-ext/object/valid-callable */"./node_modules/es5-ext/object/valid-callable.js"),h=Function.prototype.apply,p=Function.prototype.call,v=Object.create,_=Object.defineProperty,m=Object.defineProperties,y=Object.prototype.hasOwnProperty,g={configurable:!0,enumerable:!1,writable:!0};i=function(e,t){var r,i;return d(t),i=this,n.call(this,e,r=function(){s.call(i,e,r),h.call(t,this,arguments)}),r.__eeOnceListener__=t,this},a={on:n=function(e,t){var r;return d(t),y.call(this,"__ee__")?r=this.__ee__:(r=g.value=v(null),_(this,"__ee__",g),g.value=null),r[e]?"object"===c(r[e])?r[e].push(t):r[e]=[r[e],t]:r[e]=t,this},once:i,off:s=function(e,t){var r,n,i,s;if(d(t),!y.call(this,"__ee__"))return this;if(!(r=this.__ee__)[e])return this;if("object"===(void 0===(n=r[e])?"undefined":c(n)))for(s=0;i=n[s];++s)i!==t&&i.__eeOnceListener__!==t||(2===n.length?r[e]=n[s?0:1]:n.splice(s,1));else n!==t&&n.__eeOnceListener__!==t||delete r[e];return this},emit:o=function(e){var t,r,n,i,s;if(y.call(this,"__ee__")&&(i=this.__ee__[e]))if("object"===(void 0===i?"undefined":c(i))){for(r=arguments.length,s=new Array(r-1),t=1;t<r;++t)s[t-1]=arguments[t];for(i=i.slice(),t=0;n=i[t];++t)h.call(n,this,s)}else switch(arguments.length){case 1:p.call(i,this);break;case 2:p.call(i,this,arguments[1]);break;case 3:p.call(i,this,arguments[1],arguments[2]);break;default:for(r=arguments.length,s=new Array(r-1),t=1;t<r;++t)s[t-1]=arguments[t];h.call(i,this,s)}}},u={on:f(n),once:f(i),off:f(s),emit:f(o)},l=m({},u),e.exports=t=function(e){return null==e?v(l):m(Object(e),u)},t.methods=a},"./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */function(e,t,r){"use strict";var n,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s="object"===("undefined"==typeof Reflect?"undefined":i(Reflect))?Reflect:null,o=s&&"function"==typeof s.apply?s.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function u(){u.init.call(this)}e.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var l=10;function c(e){return void 0===e._maxListeners?u.defaultMaxListeners:e._maxListeners}function f(e,t,r,n){var s,o,a,u;if("function"!=typeof r)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===r?"undefined":i(r)));if(void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]),void 0===a)a=o[t]=r,++e._eventsCount;else if("function"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(s=c(e))>0&&a.length>s&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=a.length,u=l,console&&console.warn&&console.warn(u)}return e}function d(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,o(this.listener,this.target,e))}function h(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=d.bind(n);return i.listener=r,n.wrapFn=i,i}function p(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):_(i,i.length)}function v(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function _(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},u.prototype.getMaxListeners=function(){return c(this)},u.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=i[e];if(void 0===u)return!1;if("function"==typeof u)o(u,this,t);else{var l=u.length,c=_(u,l);for(r=0;r<l;++r)o(c[r],this,t)}return!0},u.prototype.addListener=function(e,t){return f(this,e,t,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(e,t){return f(this,e,t,!0)},u.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":i(t)));return this.on(e,h(this,e,t)),this},u.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":i(t)));return this.prependListener(e,h(this,e,t)),this},u.prototype.removeListener=function(e,t){var r,n,s,o,a;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":i(t)));if(void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(s=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,s=o;break}if(s<0)return this;0===s?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,s),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,s=Object.keys(r);for(n=0;n<s.length;++n)"removeListener"!==(i=s[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},u.prototype.listeners=function(e){return p(this,e,!0)},u.prototype.rawListeners=function(e){return p(this,e,!1)},u.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):v.call(e,t)},u.prototype.listenerCount=v,u.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},"./node_modules/type/function/is.js":
/*!******************************************!*\
  !*** ./node_modules/type/function/is.js ***!
  \******************************************/
/*! no static exports found */function(e,t,r){"use strict";var n=r(/*! ../prototype/is */"./node_modules/type/prototype/is.js");e.exports=function(e){if("function"!=typeof e)return!1;if(!hasOwnProperty.call(e,"length"))return!1;try{if("number"!=typeof e.length)return!1;if("function"!=typeof e.call)return!1;if("function"!=typeof e.apply)return!1}catch(e){return!1}return!n(e)}},"./node_modules/type/object/is.js":
/*!****************************************!*\
  !*** ./node_modules/type/object/is.js ***!
  \****************************************/
/*! no static exports found */function(e,t,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=r(/*! ../value/is */"./node_modules/type/value/is.js"),s={object:!0,function:!0,undefined:!0};e.exports=function(e){return!!i(e)&&hasOwnProperty.call(s,void 0===e?"undefined":n(e))}},"./node_modules/type/plain-function/is.js":
/*!************************************************!*\
  !*** ./node_modules/type/plain-function/is.js ***!
  \************************************************/
/*! no static exports found */function(e,t,r){"use strict";var n=r(/*! ../function/is */"./node_modules/type/function/is.js"),i=/^\s*class[\s{\/}]/,s=Function.prototype.toString;e.exports=function(e){return!!n(e)&&!i.test(s.call(e))}},"./node_modules/type/prototype/is.js":
/*!*******************************************!*\
  !*** ./node_modules/type/prototype/is.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,r){"use strict";var n=r(/*! ../object/is */"./node_modules/type/object/is.js");e.exports=function(e){if(!n(e))return!1;try{return!!e.constructor&&e.constructor.prototype===e}catch(e){return!1}}},"./node_modules/type/value/is.js":
/*!***************************************!*\
  !*** ./node_modules/type/value/is.js ***!
  \***************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=function(e){return null!=e}},"./src/Flv.js":
/*!********************!*\
  !*** ./src/Flv.js ***!
  \********************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=c(r(/*! ./parse/demux */"./src/parse/demux/index.js")),s=c(r(/*! xgplayer-remux/src/mp4 */"../xgplayer-remux/src/mp4/index.js")),o=c(r(/*! xgplayer-loader-fetch */"../xgplayer-loader-fetch/dist/index.js")),a=r(/*! xgplayer-buffer/src/index */"../xgplayer-buffer/src/index.js"),u=r(/*! xgplayer-utils/dist/constants/events */"../xgplayer-utils/dist/constants/events.js"),l=c(r(/*! ./parse/MSE */"./src/parse/MSE.js"));function c(e){return e&&e.__esModule?e:{default:e}}var f="FLVController",d=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.TAG=f,this._player=t,this.mse=new l.default(this._player.video),this.state={initSegmentArrived:!1,range:{start:0,end:""}}}return n(e,[{key:"init",value:function(){this._context.registry("FLV_DEMUXER",i.default),this._context.registry("FETCH_LOADER",o.default),this._context.registry("LOADER_BUFFER",a.XgBuffer),this._context.registry("TRACKS",a.Tracks),this._context.registry("MP4_REMUXER",s.default),this.initListeners(),this.initSourceOpenAndInitSegmentEvent()}},{key:"initListeners",value:function(){this.on(u.REMUX_EVENTS.MEDIA_SEGMENT,this.handleMediaSegment.bind(this)),this.on(u.DEMUX_EVENTS.MEDIA_INFO,this.handleMediaInfo.bind(this))}},{key:"handleMediaInfo",value:function(){this._context.mediaInfo||this.emit(u.DEMUX_EVENTS.DEMUX_ERROR,new Error("failed to get mediainfo"));var e=this._context.getInstance("LOADER_BUFFER"),t=this._context.getInstance("FETCH_LOADER");this.isSeekable&&(t.cancel(),this.state.range={start:0,end:e.historyLen-1})}},{key:"handleMediaSegment",value:function(e){this.mse.appendBuffer(e)}},{key:"initSourceOpenAndInitSegmentEvent",value:function(){var e,t,r=this,n=(e=void 0,t=void 0,{promise:new Promise((function(r,n){e=r,t=n})),resolve:e,reject:t});this.mse.once("sourceopen",n.resolve),this.on(u.REMUX_EVENTS.INIT_SEGMENT,(function(e,t){r.handleAppendInitSegment(e,t)}))}},{key:"handleAppendInitSegment",value:function(e,t){this.state.initSegmentArrived=!0,this.mse.appendBuffer(t)}},{key:"seek",value:function(e){if(!this._player.isLive&&this.isSeekable)if(this.state.initSegmentArrived){var t=this._player.config.preloadTime,r=void 0===t?15:t,n=this.getRange(e,r);this.state.range=n,this.loadData()}else this.loadMeta()}},{key:"loadData",value:function(){var e=this.state,t=e.start,r=e.end;this._context.getInstance("FETCH_LOADER").load(this._player.config.url,{Range:"bytes="+t+"-"+r})}},{key:"loadMeta",value:function(){this._context.getInstance("FETCH_LOADER").load(this._player.config.url)}},{key:"getRange",value:function(e,t){var r=this._context.mediaInfo,n=r.timeScale,i=r.keyframes,s=function(e){for(var t=0,r=i.times.length;t<r;t++){var n=i.times[t],s=t+1<r?i.times[t+1]:Number.MAX_SAFE_INTEGER;if(n<=e&&e<=s)return t}return""};return{start:s(e*n),end:s((e+t)*n)}}},{key:"destroy",value:function(){}},{key:"isSeekable",get:function(){return!this._context||!this._context.mediaInfo.isComplete()||null!==this._context.mediaInfo.keyframes&&void 0!==this._context.mediaInfo.keyframes}}]),e}();t.default=d},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,r){"use strict";var n=u(r(/*! xgplayer */"xgplayer")),i=u(r(/*! xgplayer-utils/dist/Context */"../xgplayer-utils/dist/Context.js")),s=u(r(/*! ./Flv */"./src/Flv.js")),o=r(/*! xgplayer-utils/dist/constants/events */"../xgplayer-utils/dist/constants/events.js"),a=u(o);function u(e){return e&&e.__esModule?e:{default:e}}n.default.install("flvplayer",(function(){var e=this,t=n.default.util,r=new i.default(o.flvAllowedEvents),u=e.config.preloadTime||15,l=e.start,c=void 0;Object.defineProperty(e,"src",{get:function(){return e.currentSrc},set:function(t){e.config.url=t,e.paused?e.start(t):(e.pause(),e.once("pause",(function(){e.start(t)})),e.once("canplay",(function(){e.play()}))),e.once("canplay",(function(){e.currentTime=0}))},configurable:!0}),e.start=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.config.url;n&&(c=r.registry("FLV_CONTROLLER",s.default)(e),r.init(),c.once(a.default.INIT_SEGMENT,(function(){if(e.config.isLive){t.addClass(e.root,"xgplayer-is-live");var r=t.createDom("xg-live","正在直播",{},"xgplayer-live");e.controls.appendChild(r);var n=setInterval((function(){if(e.paused&&e.buffered.length)for(var t=0,r=e.buffered.length;t<r;t++)if(e.buffered.start(t)>e.currentTime){e.currentTime=e.buffered.start(t),clearInterval(n);break}}),200)}else clearTimeout(c.timer)})),l.call(e,c.mse.url))};var f=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.currentTime,r=e.getBufferedRange();t<r[1]?e.config.isLive||r[1]-t<u&&c.seek(r[1]+1):c.seek(t)};e.on("timeupdate",(function(){f(e.currentTime+1),function(e,t){if(!e.config.isLive&&e.duration-e.currentTime<2){var r=e.getBufferedRange();e.currentTime-r[1]<.1&&t.mse.endOfStream()}}(e,c)})),e.on("seeking",(function(){f()})),e.on("waiting",(function(){if("live"===c.type)for(var t=e.buffered,r=t.length,n=e.currentTime,i=0;i<r;i++)if(t.start(i)>n){e.currentTime=t.start(i)+.1;break}})),e.once("destroy",(function(){c.destroy()}))}))},"./src/parse/MSE.js":
/*!**************************!*\
  !*** ./src/parse/MSE.js ***!
  \**************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,i=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=r(/*! event-emitter */"./node_modules/event-emitter/index.js"),o=(n=s)&&n.__esModule?n:{default:n};var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.codecs='video/mp4; codecs="avc1.64001E, mp4a.40.5"';var r=this;(0,o.default)(this),this.mediaSource=new window.MediaSource,t.src=window.URL.createObjectURL(this.mediaSource),this.url=t.src,this.sourceOpened=!1,this.handleSourceOpen=this.onSourceOpen.bind(this),this.mediaSource.addEventListener("sourceopen",this.handleSourceOpen),this.mediaSource.addEventListener("sourceclose",(function(){r.emit("sourceclose")}))}return i(e,[{key:"onSourceOpen",value:function(){var e=this;this.sourceOpened=!0,e.sourceBuffer=e.mediaSource.addSourceBuffer(e.codecs),e.sourceBuffer.addEventListener("error",(function(t){e.emit("error",{type:"sourceBuffer",error:t})})),e.sourceBuffer.addEventListener("updateend",(function(t){e.emit("updateend")})),e.emit("sourceopen"),e.sourceBuffer.addEventListener("error",(function(t){e.emit("error",{type:"mediaSource",error:t})}))}},{key:"appendBuffer",value:function(e){if(!this.sourceOpened)return!1;var t=this.sourceBuffer;if(!1===t.updating&&"open"===this.state)return t.appendBuffer(e),!0;if("closed"===this.state)this.emit("error",{type:"sourceBuffer",error:new Error("mediaSource is not attached to video or mediaSource is closed")});else{if("ended"!==this.state)return!0===t.updating&&this.emit("warn",{type:"sourceBuffer",error:new Error("mediaSource is busy")}),!1;this.emit("error",{type:"sourceBuffer",error:new Error("mediaSource is closed")})}}},{key:"destroy",value:function(){this.__ee__={}}},{key:"removeBuffer",value:function(e,t){this.sourceBuffer.remove(e,t)}},{key:"endOfStream",value:function(){"open"===this.mediaSource.readyState&&this.mediaSource.endOfStream()}},{key:"state",get:function(){return this.mediaSource.readyState}},{key:"duration",get:function(){return this.mediaSource.duration},set:function(e){this.mediaSource.duration=e}}],[{key:"isSupported",value:function(e){return window.MediaSource&&window.MediaSource.isTypeSupported(e)}}]),e}();t.default=a},"./src/parse/demux/AMFParser.js":
/*!**************************************!*\
  !*** ./src/parse/demux/AMFParser.js ***!
  \**************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=o(r(/*! ../../../../xgplayer-utils/src/env/isLE */"../xgplayer-utils/src/env/isLE.js")),s=o(r(/*! ../../utils/UTF8 */"./src/utils/UTF8.js"));function o(e){return e&&e.__esModule?e:{default:e}}var a=0,u=1,l=2,c=3,f=8,d=9,h=10,p=11,v=12,_=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.offset=0,this.readOffset=this.offset}return n(e,[{key:"resolve",value:function(e,t){if(t<3)throw new Error("not enough data for metainfo");var r={},n=this.parseValue(e),i=this.parseValue(e,t-n.bodySize);return r[n.data]=i.data,this.resetStatus(),r}},{key:"resetStatus",value:function(){this.offset=0,this.readOffset=this.offset}},{key:"parseString",value:function(e){var t=new DataView(e,this.readOffset).getUint16(0,!i.default),r="";r=t>0?s.default.decode(new Uint8Array(e,this.readOffset+2,t)):"";var n=t+2;return this.readOffset+=n,{data:r,bodySize:t+2}}},{key:"parseDate",value:function(e,t){var r=new DataView(e,this.readOffset,t),n=r.getFloat64(0,!i.default);return n+=60*r.getInt16(8,!i.default)*1e3,this.readOffset+=10,{data:new Date(n),bodySize:10}}},{key:"parseObject",value:function(e,t){var r=this.parseString(e,t),n=this.parseValue(e,t-r.bodySize);return{data:{name:r.data,value:n.data},bodySize:r.bodySize+n.bodySize,isObjEnd:n.isObjEnd}}},{key:"parseLongString",value:function(e){var t=new DataView(e,this.readOffset).getUint32(0,!i.default),r="";return r=t>0?s.default.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:r,bodySize:t+4}}},{key:"parseValue",value:function(e,t){var r=new ArrayBuffer;r=e instanceof ArrayBuffer?e:e.buffer;var n=a,s=u,o=l,_=c,m=f,y=d,g=h,E=p,b=v,A=new DataView(r,this.readOffset,t),O=!1,T=A.getUint8(0),w=1;this.readOffset+=1;var M=null;switch(T){case n:M=A.getFloat64(1,!i.default),this.readOffset+=8,w+=8;break;case s:M=!!A.getUint8(1),this.readOffset+=1,w+=1;break;case o:var R=this.parseString(r);M=R.data,w+=R.bodySize;break;case _:M={};var S=0;for(16777215&A.getUint32(t-4,!i.default)&&(S=3);w<t-4;){var x=this.parseObject(r,t-w-S);if(x.isObjectEnd)break;M[x.data.name]=x.data.value,w+=x.bodySize}if(w<=t-3)9===(16777215&A.getUint32(w-1,!i.default))&&(this.readOffset+=3,w+=3);break;case m:M={},w+=4,this.readOffset+=4;var j=0;for(9==(16777215&A.getUint32(t-4,!i.default))&&(j=3);w<t-8;){var L=this.parseObject(r,t-w-j);if(L.isObjectEnd)break;M[L.data.name]=L.data.value,w+=L.bodySize}if(w<=t-3)9===(16777215&A.getUint32(w-1,!i.default))&&(w+=3,this.readOffset+=3);break;case y:M=null,O=!0;break;case g:M=[];var D=A.getUint32(1,!i.default);w+=4,this.readOffset+=4;for(var k=0;k<D;k++){var I=this.parseValue(r,t-w);M.push(I.data),w+=I.bodySize}break;case E:var B=this.parseDate(r,t-1);M=B.data,w+=B.bodySize;break;case b:var C=this.parseLongString(r,t-1);M=C.data,w+=C.bodySize;break;default:w=t}return{data:M,bodySize:w,isObjEnd:O}}}]),e}();t.default=_},"./src/parse/demux/index.js":
/*!**********************************!*\
  !*** ./src/parse/demux/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=r(/*! ../../../../xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js"),s=l(r(/*! ./AMFParser */"./src/parse/demux/AMFParser.js")),o=l(r(/*! ../../../../xgplayer-utils/src/h264/SPSParser */"../xgplayer-utils/src/h264/SPSParser.js")),a=r(/*! ../../../../xgplayer-utils/src/models/trackMeta */"../xgplayer-utils/src/models/trackMeta.js"),u=r(/*! ../../../../xgplayer-buffer/src */"../xgplayer-buffer/src/index.js");function l(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}return n(e,[{key:"init",value:function(){this.on(i.LOADER_EVENTS.LOADER_DATALOADED,this.handleDataLoaded.bind(this))}},{key:"handleDataLoaded",value:function(){this.parseFlvStream()}},{key:"parseFlvStream",value:function(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;this._parseFlvTag()&&this.parseFlvStream()}else{if(this.loaderBuffer.length<13)return;var e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.parseFlvStream()}}},{key:"parseFlvHeader",value:function(t){if(e.isFlvFile(t)){this._firstFragmentLoaded=!0;var r=e.getPlayType(t[4]);r.hasVideo&&this.initVideoTrack(),r.hasAudio&&this.initAudioTrack()}else this.emit(i.DEMUX_EVENTS.DEMUX_ERROR,new Error("invalid flv file")),this.parseFlvStream();this.handleDataLoaded()}},{key:"initVideoTrack",value:function(){this._trackNum++;var e=new u.VideoTrack;e.meta=new a.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}},{key:"initAudioTrack",value:function(){this._trackNum++;var e=new u.AudioTrack;e.meta=new a.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}},{key:"_parseFlvTag",value:function(){if(this.loaderBuffer.length<11)return null;var e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}},{key:"_parseFlvTagHeader",value:function(){var e=0,t={},r=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&r)>>>5,t.tagType=31&r,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.logger.warn(this.TAG,"tagType "+t.tagType),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);var n=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);var i=this.loaderBuffer.shift(1)[0];return i>0&&(n+=16777216*i),t.dts=n,this.loaderBuffer.shift(3),t}},{key:"_processChunk",value:function(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}},{key:"_parseScriptData",value:function(e){var t=this.tracks.audioTrack,r=this.tracks.videoTrack,n=this.loaderBuffer.shift(e.datasize),o=(new s.default).resolve(n,n.length),a=this._context.onMetaData=o?o.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hsaAudio,this._datasizeValidator(e.datasize)&&(this.emit(i.DEMUX_EVENTS.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){var u=t.meta;switch(a.audiosamplerate&&(u.sampleRate=a.audiosamplerate),a.audiochannels&&(u.channelCount=a.audiochannels),a.audiosamplerate){case 44100:u.sampleRateIndex=4;break;case 22050:u.sampleRateIndex=7;break;case 11025:u.sampleRateIndex=10}}if(r&&!r.hasSpecificConfig){var l=r.meta;if("number"==typeof a.framerate){var c=Math.floor(1e3*a.framerate);if(c>0){var f=c/1e3;l.frameRate||(l.frameRate={}),l.frameRate.fixed=!0,l.frameRate.fps=f,l.frameRate.fps_num=c,l.frameRate.fps_den=1e3}}}}},{key:"_aacSequenceHeaderParser",value:function(e){var t={hasSpecificConfig:!0};return t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec="mp4a.40."+t.objectType,t}},{key:"_parseAACData",value:function(e){var t=this.tracks.audioTrack;if(t){var r=t.meta;r||(r=new a.AudioTrackMeta);var n=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);var s=(240&n)>>>4;t.format=s,10!==s&&this.emit(i.DEMUX_EVENTS.DEMUX_ERROR,new Error("invalid audio format: "+s)),10!==s||this._hasAudioSequence||(r.sampleRate=this._switchAudioSamplingFrequency(n),r.sampleRateIndex=(12&n)>>>2,r.frameLenth=(2&n)>>>1,r.channelCount=1&n,r.refSampleDuration=Math.floor(1024/r.audioSampleRate*r.timescale));var o=r.audioSampleRate,u=r.sampleRateIndex,l=r.refSampleDuration;delete e.tagType;var c=this._datasizeValidator(e.datasize);if(0===e.data[0]){var f=this._aacSequenceHeaderParser(e.data);o=f.audiosamplerate||r.audioSampleRate,u=f.sampleRateIndex||r.sampleRateIndex,l=Math.floor(1024/o*r.timescale),r.channelCount=f.channelCount,r.sampleRate=o,r.sampleRateIndex=u,r.refSampleDuration=l,r.duration=this._context.mediaInfo.duration;var d=this._context.mediaInfo.audio;d.codec=f.codec,d.channelCount=f.channelCount,d.sampleRate=o,d.sampleRateIndex=f.audioSampleRateIndex,!this._hasScript||this._hasAudioSequence||this.tracks.videoTrack&&!this._hasVideoSequence?this._hasScript&&this._hasAudioSequence&&this.emit(i.DEMUX_EVENTS.AUDIO_METADATA_CHANGE):this.emit(i.DEMUX_EVENTS.METADATA_PARSED,"audio"),this._hasAudioSequence=!0}else e.data=e.data.slice(1,e.data.length),t.samples.push(e),this.emit(i.DEMUX_EVENTS.DEMUX_COMPLETE);c||this.logger.warn(this.TAG,"TAG length error at "+e.datasize)}}},{key:"_parseHevcData",value:function(e){var t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=5===e.frameType;var r=15&t;if(this.tracks.videoTrack.codecID=r,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===r){var n=this.loaderBuffer.shift(e.datasize-5);if(e.data=n,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize);var s={},o=0;for(s.cts=e.cts,s.dts=e.dts;e.data.length>o;){var a=e.data.slice(Number.parseInt(o),4+o);s.size=a[3],s.size+=256*a[2],s.size+=256*a[1]*256,s.size+=256*a[0]*256*256,o+=4,s.data=e.data.slice(Number.parseInt(o),s.size+o),o+=s.size,this.tracks.videoTrack.samples.push(s),this.emit(i.DEMUX_EVENTS.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(i.DEMUX_EVENTS.METADATA_PARSED,"video"):this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize))}else if(7===r){var u=this.loaderBuffer.shift(e.datasize-5);if(0===u[4]&&0===u[5]&&0===u[6]&&1===u[7]){for(var l=0,c=0;c<4;c++)l=256*l+u[c];l-=4,(u=u.slice(4,u.length))[3]=l%256,l=(l-u[3])/256,u[2]=l%256,l=(l-u[2])/256,u[1]=l%256,u[0]=(l-u[1])/256}if(e.data=u,0===e.avcPacketType)this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(i.DEMUX_EVENTS.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(i.DEMUX_EVENTS.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0);else this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize),this.tracks.videoTrack.samples.push(e),this.emit(i.DEMUX_EVENTS.DEMUX_COMPLETE)}else this.logger.warn(this.TAG,"video codeid is "+r),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize),this.tracks.videoTrack.samples.push(e),this.emit(i.DEMUX_EVENTS.DEMUX_COMPLETE);delete e.tagType}},{key:"_avcSequenceHeaderParser",value:function(e){var t=this.tracks.videoTrack;if(t){var r=0;t.meta||(t.meta=new a.VideoTrackMeta);var n=t.meta;n.configurationVersion=e[0],n.avcProfileIndication=e[1],n.profileCompatibility=e[2],n.avcLevelIndication=e[3]/10,n.nalUnitLength=1+(3&e[4]);var i=31&e[5];r=6;for(var s={},u=0;u<i;u++){var l=255*e[r]+e[r+1];r+=2;for(var c=new Uint8Array(l),f=0;f<l;f++)c[f]=e[r+f];for(var d="avc1.",h=1;h<4;h++){var p=c[h].toString(16);p.length<2&&(p="0"+p),d+=p}n.codec=d,r+=l,this.tracks.videoTrack.sps=c,s=o.default.parseSPS(c)}var v=e[r];r++;for(var _=0;_<v;_++){var m=255*e[r]+e[r+1];r+=2;for(var y=new Uint8Array(m),g=0;g<m;g++)y[g]=e[r+g];r+=m,this.tracks.videoTrack.pps=y}Object.assign(n,o.default.toVideoMeta(s));var E=this._context.mediaInfo.video;E.codec=n.codec,E.profile=n.profile,E.level=n.level,E.chromaFormat=n.chromaFormat,E.frameRate=n.frameRate,E.parRatio=n.parRatio,E.width=E.width===n.presentWidth?E.width:n.presentWidth,E.height=E.height===n.presentHeight?E.width:n.presentHeight,n.duration=this._context.mediaInfo.duration,n.avcc=new Uint8Array(e.length),n.avcc.set(e),t.meta=n}}},{key:"_switchAudioSampleRate",value:function(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}},{key:"_switchAudioSamplingFrequency",value:function(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}},{key:"_switchAudioChannel",value:function(e){return[1,2][1&e]}},{key:"_datasizeValidator",value:function(e){var t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}},{key:"loaderBuffer",get:function(){if(this._context.getInstance("LOADER_BUFFER"))return this._context.getInstance("LOADER_BUFFER");this.emit(i.DEMUX_EVENTS.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}},{key:"tracks",get:function(){return this._context.getInstance("TRACKS")}},{key:"logger",get:function(){return this._context.getInstance("LOGGER")}}],[{key:"isFlvFile",value:function(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}},{key:"getPlayType",value:function(e){var t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}}]),e}();t.default=c},"./src/utils/UTF8.js":
/*!***************************!*\
  !*** ./src/utils/UTF8.js ***!
  \***************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return n(e,null,[{key:"decode",value:function(t){for(var r=[],n=t,i=0,s=t.length;i<s;)if(n[i]<128)r.push(String.fromCharCode(n[i])),++i;else{if(n[i]<192);else if(n[i]<224){if(e._checkContinuation(n,i,1)){var o=(31&n[i])<<6|63&n[i+1];if(o>=128){r.push(String.fromCharCode(65535&o)),i+=2;continue}}}else if(n[i]<240){if(e._checkContinuation(n,i,2)){var a=(15&n[i])<<12|(63&n[i+1])<<6|63&n[i+2];if(a>=2048&&55296!=(63488&a)){r.push(String.fromCharCode(65535&a)),i+=3;continue}}}else if(n[i]<248&&e._checkContinuation(n,i,3)){var u=(7&n[i])<<18|(63&n[i+1])<<12|(63&n[i+2])<<6|63&n[i+3];if(u>65536&&u<1114112){u-=65536,r.push(String.fromCharCode(u>>>10|55296)),r.push(String.fromCharCode(1023&u|56320)),i+=4;continue}}r.push(String.fromCharCode(65533)),++i}return r.join("")}},{key:"_checkContinuation",value:function(e,t,r){var n=e;if(t+r<n.length){for(;r--;)if(128!=(192&n[++t]))return!1;return!0}return!1}}]),e}();t.default=i},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,r){e.exports=r(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!*************************!*\
  !*** external "Player" ***!
  \*************************/
/*! no static exports found */function(e,t){e.exports=window.Player}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,