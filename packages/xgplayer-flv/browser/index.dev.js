window.FlvPlayer=function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}({"../xgplayer-buffer/src/Track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/Track.js ***!
  \***************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-buffer/src/index.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/index.js ***!
  \***************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RemuxBuffer=t.VideoTrack=t.AudioTrack=t.XgBuffer=void 0;var i,n=r(/*! ./Track */"../xgplayer-buffer/src/Track.js"),s=(i=n)&&i.__esModule?i:{default:i};t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),r=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let i=this.array[0].slice(this.offset,this.offset+e);t.set(i,r),this.offset+=e,this.length-=e,e=0;break}{let i=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),r),this.array.shift(),this.offset=0,r+=i,this.length-=i,e-=i}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let r=0,i=this.offset+e;for(;i<this.offset+t+e;)i<this.array[0].length?r=256*r+this.array[0][i]:this.array[1]&&(r=256*r+this.array[1][i-this.array[0].length]),i++;return r}};t.AudioTrack=class extends s.default{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}};t.VideoTrack=class extends s.default{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}};t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-utils/src/Context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/Context.js ***!
  \****************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,n=r(/*! ./models/MediaInfo */"../xgplayer-utils/src/models/MediaInfo.js"),s=(i=n)&&i.__esModule?i:{default:i};const a=r(/*! events */"./node_modules/events/events.js");t.default=class{constructor(e=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new s.default,this.allowedEvents=e}getInstance(e){if(this._instanceMap[e])return this._instanceMap[e];throw new Error(`${e}实例尚未初始化`)}initInstance(e,...t){if(this._clsMap[e]){const r=new this._clsMap[e](...t);return this._instanceMap[e]=r,r.init&&r.init(),r}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const r=this._emitter,i=this._isMessageNameValid.bind(this),n=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.TAG=e,this._context=n}on(e,t){return i(e),this.listeners[e]?this.listeners[e].push(t):this.listeners[e]=[t],r.on(e,t)}once(e,t){return i(e),r.once(e,t)}emit(e,...t){return i(e),console.log(`[${this.TAG}] ${e}`,this),r.emit(e,...t)}off(e,t){return i(e),r.off(e,t)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let t in this.listeners)if(e(t)){const e=this.listeners[t]||[];for(let i=0;i<e.length;i++){const n=e[i];r.off(t,n)}}}destroy(){this.removeListeners(),delete n._instanceMap[e],super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=null,this._clsMap=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=t.LOADER_EVENTS={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},n=t.DEMUX_EVENTS={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},s=t.REMUX_EVENTS={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},a=Object.assign({},i,n,s),o=t.flvAllowedEvents=[];for(let e in a)a.hasOwnProperty(e)&&o.push(a[e]);t.default=a},"../xgplayer-utils/src/env/isLE.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isLE.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=i},"../xgplayer-utils/src/h264/SPSParser.js":
/*!***********************************************!*\
  !*** ../xgplayer-utils/src/h264/SPSParser.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,n=r(/*! ./golomb */"../xgplayer-utils/src/h264/golomb.js"),s=(i=n)&&i.__esModule?i:{default:i};class a{static _ebsp2rbsp(e){let t=e,r=t.byteLength,i=new Uint8Array(r),n=0;for(let e=0;e<r;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(i[n]=t[e],n++);return new Uint8Array(i.buffer,0,n)}static parseSPS(e){let t=a._ebsp2rbsp(e),r=new s.default(t);r.readByte();let i=r.readByte();r.readByte();let n=r.readByte();r.readUEG();let o=a.getProfileString(i),u=a.getLevelString(n),c=1,f=420,l=[0,420,422,444],d=8;if((100===i||110===i||122===i||244===i||44===i||83===i||86===i||118===i||128===i||138===i||144===i)&&(3===(c=r.readUEG())&&r.readBits(1),c<=3&&(f=l[c]),d=r.readUEG()+8,r.readUEG(),r.readBits(1),r.readBool())){let e=3!==c?8:12;for(let t=0;t<e;t++)r.readBool()&&(t<6?a._skipScalingList(r,16):a._skipScalingList(r,64))}r.readUEG();let h=r.readUEG();if(0===h)r.readUEG();else if(1===h){r.readBits(1),r.readSEG(),r.readSEG();let e=r.readUEG();for(let t=0;t<e;t++)r.readSEG()}r.readUEG(),r.readBits(1);let p=r.readUEG(),v=r.readUEG(),y=r.readBits(1);0===y&&r.readBits(1),r.readBits(1);let _=0,m=0,g=0,b=0;r.readBool()&&(_=r.readUEG(),m=r.readUEG(),g=r.readUEG(),b=r.readUEG());let E=1,S=1,x=0,w=!0,T=0,j=0;if(r.readBool()){if(r.readBool()){let e=r.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],i=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(E=t[e-1],S=i[e-1]):255===e&&(E=r.readByte()<<8|r.readByte(),S=r.readByte()<<8|r.readByte())}if(r.readBool()&&r.readBool(),r.readBool()&&(r.readBits(4),r.readBool()&&r.readBits(24)),r.readBool()&&(r.readUEG(),r.readUEG()),r.readBool()){let e=r.readBits(32),t=r.readBits(32);w=r.readBool(),x=(T=t)/(j=2*e)}}let k=1;1===E&&1===S||(k=E/S);let O=0,A=0;if(0===c)O=1,A=2-y;else{O=3===c?1:2,A=(1===c?2:1)*(2-y)}let M=16*(p+1),R=16*(v+1)*(2-y);M-=(_+m)*O,R-=(g+b)*A;let L=Math.ceil(M*k);return r.destroy(),r=null,{profile_string:o,level_string:u,bit_depth:d,chroma_format:f,chroma_format_string:a.getChromaFormatString(f),frame_rate:{fixed:w,fps:x,fps_den:j,fps_num:T},par_ratio:{width:E,height:S},codec_size:{width:M,height:R},present_size:{width:L,height:R}}}static _skipScalingList(e,t){let r=8,i=8,n=0;for(let s=0;s<t;s++)0!==i&&(i=(r+(n=e.readSEG())+256)%256),r=0===i?r:i}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},e.frame_rate.fixed&&e.frame_rate.fps_num>0&&e.frame_rate.fps_den>0&&(t.frameRate=e.frame_rate);let r=t.frameRate.fps_den,i=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(r/i))}}t.default=a},"../xgplayer-utils/src/h264/golomb.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/h264/golomb.js ***!
  \********************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),r=new Uint8Array(4);r.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(r.buffer).getUint32(0,!1),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){if(e<=this._currentWordBitsLeft){let t=this._currentWord>>>32-e;return this._currentWord<<=e,this._currentWordBitsLeft-=e,t}let t=this._currentWordBitsLeft?this._currentWord:0;this._currentWordBitsLeft;let r=e-this._currentWordBitsLeft;this._fillCurrentWord();let i=Math.min(r,this._currentWordBitsLeft),n=this._currentWord>>>32-i;return this._currentWord<<=i,this._currentWordBitsLeft-=i,t=t<<i|n}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-utils/src/models/MediaInfo.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/models/MediaInfo.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class n{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return n.isBaseInfoReady(this)&&n.isVideoReady(this)&&n.isAudioReady(this)}static isBaseInfoReady(e){return i(e)}static isVideoReady(e){return!e.hasVideo||i(e.video)}static isAudioReady(e){return!e.hasAudio||i(e.video)}}t.default=n},"../xgplayer-utils/src/models/trackMeta.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/models/trackMeta.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}};t.VideoTrackMeta=class{constructor(e){const t={avcc:null,chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}}},"./node_modules/d/index.js":
/*!*********************************!*\
  !*** ./node_modules/d/index.js ***!
  \*********************************/
/*! no static exports found */function(e,t,r){"use strict";var i=r(/*! type/value/is */"./node_modules/type/value/is.js"),n=r(/*! type/plain-function/is */"./node_modules/type/plain-function/is.js"),s=r(/*! es5-ext/object/assign */"./node_modules/es5-ext/object/assign/index.js"),a=r(/*! es5-ext/object/normalize-options */"./node_modules/es5-ext/object/normalize-options.js"),o=r(/*! es5-ext/string/#/contains */"./node_modules/es5-ext/string/#/contains/index.js");(e.exports=function(e,t){var r,n,u,c,f;return arguments.length<2||"string"!=typeof e?(c=t,t=e,e=null):c=arguments[2],i(e)?(r=o.call(e,"c"),n=o.call(e,"e"),u=o.call(e,"w")):(r=u=!0,n=!1),f={value:t,configurable:r,enumerable:n,writable:u},c?s(a(c),f):f}).gs=function(e,t,r){var u,c,f,l;return"string"!=typeof e?(f=r,r=t,t=e,e=null):f=arguments[3],i(t)?n(t)?i(r)?n(r)||(f=r,r=void 0):r=void 0:(f=t,t=r=void 0):t=void 0,i(e)?(u=o.call(e,"c"),c=o.call(e,"e")):(u=!0,c=!1),l={get:t,set:r,configurable:u,enumerable:c},f?s(a(f),l):l}},"./node_modules/es5-ext/function/noop.js":
/*!***********************************************!*\
  !*** ./node_modules/es5-ext/function/noop.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=function(){}},"./node_modules/es5-ext/object/assign/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=r(/*! ./is-implemented */"./node_modules/es5-ext/object/assign/is-implemented.js")()?Object.assign:r(/*! ./shim */"./node_modules/es5-ext/object/assign/shim.js")},"./node_modules/es5-ext/object/assign/is-implemented.js":
/*!**************************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/is-implemented.js ***!
  \**************************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}},"./node_modules/es5-ext/object/assign/shim.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/shim.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,r){"use strict";var i=r(/*! ../keys */"./node_modules/es5-ext/object/keys/index.js"),n=r(/*! ../valid-value */"./node_modules/es5-ext/object/valid-value.js"),s=Math.max;e.exports=function(e,t){var r,a,o,u=s(arguments.length,2);for(e=Object(n(e)),o=function(i){try{e[i]=t[i]}catch(e){r||(r=e)}},a=1;a<u;++a)t=arguments[a],i(t).forEach(o);if(void 0!==r)throw r;return e}},"./node_modules/es5-ext/object/is-value.js":
/*!*************************************************!*\
  !*** ./node_modules/es5-ext/object/is-value.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,r){"use strict";var i=r(/*! ../function/noop */"./node_modules/es5-ext/function/noop.js")();e.exports=function(e){return e!==i&&null!==e}},"./node_modules/es5-ext/object/keys/index.js":
/*!***************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=r(/*! ./is-implemented */"./node_modules/es5-ext/object/keys/is-implemented.js")()?Object.keys:r(/*! ./shim */"./node_modules/es5-ext/object/keys/shim.js")},"./node_modules/es5-ext/object/keys/is-implemented.js":
/*!************************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/is-implemented.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=function(){try{return Object.keys("primitive"),!0}catch(e){return!1}}},"./node_modules/es5-ext/object/keys/shim.js":
/*!**************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/shim.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,r){"use strict";var i=r(/*! ../is-value */"./node_modules/es5-ext/object/is-value.js"),n=Object.keys;e.exports=function(e){return n(i(e)?Object(e):e)}},"./node_modules/es5-ext/object/normalize-options.js":
/*!**********************************************************!*\
  !*** ./node_modules/es5-ext/object/normalize-options.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,r){"use strict";var i=r(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js"),n=Array.prototype.forEach,s=Object.create,a=function(e,t){var r;for(r in e)t[r]=e[r]};e.exports=function(e){var t=s(null);return n.call(arguments,(function(e){i(e)&&a(Object(e),t)})),t}},"./node_modules/es5-ext/object/valid-callable.js":
/*!*******************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-callable.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e}},"./node_modules/es5-ext/object/valid-value.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-value.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,r){"use strict";var i=r(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js");e.exports=function(e){if(!i(e))throw new TypeError("Cannot use null or undefined");return e}},"./node_modules/es5-ext/string/#/contains/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/index.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=r(/*! ./is-implemented */"./node_modules/es5-ext/string/#/contains/is-implemented.js")()?String.prototype.contains:r(/*! ./shim */"./node_modules/es5-ext/string/#/contains/shim.js")},"./node_modules/es5-ext/string/#/contains/is-implemented.js":
/*!******************************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/is-implemented.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t,r){"use strict";var i="razdwatrzy";e.exports=function(){return"function"==typeof i.contains&&(!0===i.contains("dwa")&&!1===i.contains("foo"))}},"./node_modules/es5-ext/string/#/contains/shim.js":
/*!********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/shim.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,r){"use strict";var i=String.prototype.indexOf;e.exports=function(e){return i.call(this,e,arguments[1])>-1}},"./node_modules/event-emitter/index.js":
/*!*********************************************!*\
  !*** ./node_modules/event-emitter/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,r){"use strict";var i,n,s,a,o,u,c,f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l=r(/*! d */"./node_modules/d/index.js"),d=r(/*! es5-ext/object/valid-callable */"./node_modules/es5-ext/object/valid-callable.js"),h=Function.prototype.apply,p=Function.prototype.call,v=Object.create,y=Object.defineProperty,_=Object.defineProperties,m=Object.prototype.hasOwnProperty,g={configurable:!0,enumerable:!1,writable:!0};n=function(e,t){var r,n;return d(t),n=this,i.call(this,e,r=function(){s.call(n,e,r),h.call(t,this,arguments)}),r.__eeOnceListener__=t,this},o={on:i=function(e,t){var r;return d(t),m.call(this,"__ee__")?r=this.__ee__:(r=g.value=v(null),y(this,"__ee__",g),g.value=null),r[e]?"object"===f(r[e])?r[e].push(t):r[e]=[r[e],t]:r[e]=t,this},once:n,off:s=function(e,t){var r,i,n,s;if(d(t),!m.call(this,"__ee__"))return this;if(!(r=this.__ee__)[e])return this;if("object"===(void 0===(i=r[e])?"undefined":f(i)))for(s=0;n=i[s];++s)n!==t&&n.__eeOnceListener__!==t||(2===i.length?r[e]=i[s?0:1]:i.splice(s,1));else i!==t&&i.__eeOnceListener__!==t||delete r[e];return this},emit:a=function(e){var t,r,i,n,s;if(m.call(this,"__ee__")&&(n=this.__ee__[e]))if("object"===(void 0===n?"undefined":f(n))){for(r=arguments.length,s=new Array(r-1),t=1;t<r;++t)s[t-1]=arguments[t];for(n=n.slice(),t=0;i=n[t];++t)h.call(i,this,s)}else switch(arguments.length){case 1:p.call(n,this);break;case 2:p.call(n,this,arguments[1]);break;case 3:p.call(n,this,arguments[1],arguments[2]);break;default:for(r=arguments.length,s=new Array(r-1),t=1;t<r;++t)s[t-1]=arguments[t];h.call(n,this,s)}}},u={on:l(i),once:l(n),off:l(s),emit:l(a)},c=_({},u),e.exports=t=function(e){return null==e?v(c):_(Object(e),u)},t.methods=o},"./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */function(e,t,r){"use strict";var i,n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s="object"===("undefined"==typeof Reflect?"undefined":n(Reflect))?Reflect:null,a=s&&"function"==typeof s.apply?s.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};i=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function u(){u.init.call(this)}e.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var c=10;function f(e){return void 0===e._maxListeners?u.defaultMaxListeners:e._maxListeners}function l(e,t,r,i){var s,a,o,u;if("function"!=typeof r)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===r?"undefined":n(r)));if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),a=e._events),o=a[t]),void 0===o)o=a[t]=r,++e._eventsCount;else if("function"==typeof o?o=a[t]=i?[r,o]:[o,r]:i?o.unshift(r):o.push(r),(s=f(e))>0&&o.length>s&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,u=c,console&&console.warn&&console.warn(u)}return e}function d(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function h(e,t,r){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},n=d.bind(i);return n.listener=r,i.wrapFn=n,n}function p(e,t,r){var i=e._events;if(void 0===i)return[];var n=i[t];return void 0===n?[]:"function"==typeof n?r?[n.listener||n]:[n]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(n):y(n,n.length)}function v(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function y(e,t){for(var r=new Array(t),i=0;i<t;++i)r[i]=e[i];return r}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},u.prototype.getMaxListeners=function(){return f(this)},u.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var i="error"===e,n=this._events;if(void 0!==n)i=i&&void 0===n.error;else if(!i)return!1;if(i){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var o=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw o.context=s,o}var u=n[e];if(void 0===u)return!1;if("function"==typeof u)a(u,this,t);else{var c=u.length,f=y(u,c);for(r=0;r<c;++r)a(f[r],this,t)}return!0},u.prototype.addListener=function(e,t){return l(this,e,t,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(e,t){return l(this,e,t,!0)},u.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":n(t)));return this.on(e,h(this,e,t)),this},u.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":n(t)));return this.prependListener(e,h(this,e,t)),this},u.prototype.removeListener=function(e,t){var r,i,s,a,o;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":n(t)));if(void 0===(i=this._events))return this;if(void 0===(r=i[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(s=-1,a=r.length-1;a>=0;a--)if(r[a]===t||r[a].listener===t){o=r[a].listener,s=a;break}if(s<0)return this;0===s?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,s),1===r.length&&(i[e]=r[0]),void 0!==i.removeListener&&this.emit("removeListener",e,o||t)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){var t,r,i;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var n,s=Object.keys(r);for(i=0;i<s.length;++i)"removeListener"!==(n=s[i])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},u.prototype.listeners=function(e){return p(this,e,!0)},u.prototype.rawListeners=function(e){return p(this,e,!1)},u.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):v.call(e,t)},u.prototype.listenerCount=v,u.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},"./node_modules/type/function/is.js":
/*!******************************************!*\
  !*** ./node_modules/type/function/is.js ***!
  \******************************************/
/*! no static exports found */function(e,t,r){"use strict";var i=r(/*! ../prototype/is */"./node_modules/type/prototype/is.js");e.exports=function(e){if("function"!=typeof e)return!1;if(!hasOwnProperty.call(e,"length"))return!1;try{if("number"!=typeof e.length)return!1;if("function"!=typeof e.call)return!1;if("function"!=typeof e.apply)return!1}catch(e){return!1}return!i(e)}},"./node_modules/type/object/is.js":
/*!****************************************!*\
  !*** ./node_modules/type/object/is.js ***!
  \****************************************/
/*! no static exports found */function(e,t,r){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n=r(/*! ../value/is */"./node_modules/type/value/is.js"),s={object:!0,function:!0,undefined:!0};e.exports=function(e){return!!n(e)&&hasOwnProperty.call(s,void 0===e?"undefined":i(e))}},"./node_modules/type/plain-function/is.js":
/*!************************************************!*\
  !*** ./node_modules/type/plain-function/is.js ***!
  \************************************************/
/*! no static exports found */function(e,t,r){"use strict";var i=r(/*! ../function/is */"./node_modules/type/function/is.js"),n=/^\s*class[\s{\/}]/,s=Function.prototype.toString;e.exports=function(e){return!!i(e)&&!n.test(s.call(e))}},"./node_modules/type/prototype/is.js":
/*!*******************************************!*\
  !*** ./node_modules/type/prototype/is.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,r){"use strict";var i=r(/*! ../object/is */"./node_modules/type/object/is.js");e.exports=function(e){if(!i(e))return!1;try{return!!e.constructor&&e.constructor.prototype===e}catch(e){return!1}}},"./node_modules/type/value/is.js":
/*!***************************************!*\
  !*** ./node_modules/type/value/is.js ***!
  \***************************************/
/*! no static exports found */function(e,t,r){"use strict";e.exports=function(e){return null!=e}},"./src/Flv.js":
/*!********************!*\
  !*** ./src/Flv.js ***!
  \********************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,r,i){return r&&e(t.prototype,r),i&&e(t,i),t}}(),n=l(r(/*! ./parse/demux */"./src/parse/demux/index.js")),s=l(r(!function(){var e=new Error("Cannot find module 'xgplayer-remux/src/mp4'");throw e.code="MODULE_NOT_FOUND",e}())),a=l(r(!function(){var e=new Error("Cannot find module 'xgplayer-loader-fetch/src/index'");throw e.code="MODULE_NOT_FOUND",e}())),o=r(!function(){var e=new Error("Cannot find module 'xgplayer-buffer/src/index'");throw e.code="MODULE_NOT_FOUND",e}()),u=r(!function(){var e=new Error("Cannot find module 'xgplayer-buffer/src/track'");throw e.code="MODULE_NOT_FOUND",e}()),c=r(/*! ../../xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js"),f=l(r(/*! ./parse/MSE */"./src/parse/MSE.js"));function l(e){return e&&e.__esModule?e:{default:e}}var d="FLVController",h=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.TAG=d,this._player=t,this.mse=new f.default(this._player.video),this.state={initSegmentArrived:!1,range:{start:0,end:""}}}return i(e,[{key:"init",value:function(){this._context.registry("FLV_DEMUXER",n.default),this._context.registry("FETCH_LOADER",a.default),this._context.registry("LOADER_BUFFER",o.XgBuffer),this._context.registry("TRACKS",u.Tracks),this._context.registry("MP4_REMUXER",s.default),this.initListeners(),this.initSourceOpenAndInitSegmentEvent()}},{key:"initListeners",value:function(){this.on(c.REMUX_EVENTS.MEDIA_SEGMENT,this.handleMediaSegment.bind(this)),this.on(c.DEMUX_EVENTS.MEDIA_INFO,this.handleMediaInfo.bind(this))}},{key:"handleMediaInfo",value:function(){this._context.mediaInfo||this.emit(c.DEMUX_EVENTS.DEMUX_ERROR,new Error("failed to get mediainfo"));var e=this._context.getInstance("LOADER_BUFFER"),t=this._context.getInstance("FETCH_LOADER");this.isSeekable&&(t.cancel(),this.state.range={start:0,end:e.historyLen-1})}},{key:"handleMediaSegment",value:function(e){this.mse.appendBuffer(e)}},{key:"initSourceOpenAndInitSegmentEvent",value:function(){var e,t,r=this,i=(e=void 0,t=void 0,{promise:new Promise((function(r,i){e=r,t=i})),resolve:e,reject:t});this.mse.once("sourceopen",i.resolve),this.on(c.REMUX_EVENTS.INIT_SEGMENT,(function(e,t){r.handleAppendInitSegment(e,t)}))}},{key:"handleAppendInitSegment",value:function(e,t){this.state.initSegmentArrived=!0,this.mse.appendBuffer(t)}},{key:"seek",value:function(e){if(!this._player.isLive&&this.isSeekable)if(this.state.initSegmentArrived){var t=this._player.config.preloadTime,r=void 0===t?15:t,i=this.getRange(e,r);this.state.range=i,this.loadData()}else this.loadMeta()}},{key:"loadData",value:function(){var e=this.state,t=e.start,r=e.end;this._context.getInstance("FETCH_LOADER").load(this._player.config.url,{Range:"bytes="+t+"-"+r})}},{key:"loadMeta",value:function(){this._context.getInstance("FETCH_LOADER").load(this._player.config.url)}},{key:"getRange",value:function(e,t){var r=this._context.mediaInfo,i=r.timeScale,n=r.keyframes,s=function(e){for(var t=0,r=n.times.length;t<r;t++){var i=n.times[t],s=t+1<r?n.times[t+1]:Number.MAX_SAFE_INTEGER;if(i<=e&&e<=s)return t}return""};return{start:s(e*i),end:s((e+t)*i)}}},{key:"destroy",value:function(){}},{key:"isSeekable",get:function(){return!this._context||!this._context.mediaInfo.isComplete()||null!==this._context.mediaInfo.keyframes&&void 0!==this._context.mediaInfo.keyframes}}]),e}();t.default=h},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,r){"use strict";var i=u(r(/*! xgplayer */"xgplayer")),n=u(r(/*! ../../xgplayer-utils/src/Context */"../xgplayer-utils/src/Context.js")),s=u(r(/*! ./Flv */"./src/Flv.js")),a=r(/*! ../../xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js"),o=u(a);function u(e){return e&&e.__esModule?e:{default:e}}i.default.install("flvplayer",(function(){var e=this,t=i.default.util,r=new n.default(a.flvAllowedEvents),u=e.config.preloadTime||15,c=e.start,f=void 0;Object.defineProperty(e,"src",{get:function(){return e.currentSrc},set:function(t){e.config.url=t,e.paused?e.start(t):(e.pause(),e.once("pause",(function(){e.start(t)})),e.once("canplay",(function(){e.play()}))),e.once("canplay",(function(){e.currentTime=0}))},configurable:!0}),e.start=function(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.config.url;i&&(f=r.registry("FLV_CONTROLLER",s.default)(e),r.init(),f.once(o.default.INIT_SEGMENT,(function(){if(e.config.isLive){t.addClass(e.root,"xgplayer-is-live");var r=t.createDom("xg-live","正在直播",{},"xgplayer-live");e.controls.appendChild(r);var i=setInterval((function(){if(e.paused&&e.buffered.length)for(var t=0,r=e.buffered.length;t<r;t++)if(e.buffered.start(t)>e.currentTime){e.currentTime=e.buffered.start(t),clearInterval(i);break}}),200)}else clearTimeout(f.timer)})),c.call(e,f.mse.url))};var l=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.currentTime,r=e.getBufferedRange();t<r[1]?e.config.isLive||r[1]-t<u&&f.seek(r[1]+1):f.seek(t)};e.on("timeupdate",(function(){l(e.currentTime+1),function(e,t){if(!e.config.isLive&&e.duration-e.currentTime<2){var r=e.getBufferedRange();e.currentTime-r[1]<.1&&t.mse.endOfStream()}}(e,f)})),e.on("seeking",(function(){l()})),e.on("waiting",(function(){if("live"===f.type)for(var t=e.buffered,r=t.length,i=e.currentTime,n=0;n<r;n++)if(t.start(n)>i){e.currentTime=t.start(n)+.1;break}})),e.once("destroy",(function(){f.destroy()}))}))},"./src/parse/MSE.js":
/*!**************************!*\
  !*** ./src/parse/MSE.js ***!
  \**************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,n=function(){function e(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,r,i){return r&&e(t.prototype,r),i&&e(t,i),t}}(),s=r(/*! event-emitter */"./node_modules/event-emitter/index.js"),a=(i=s)&&i.__esModule?i:{default:i};var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.codecs='video/mp4; codecs="avc1.64001E, mp4a.40.5"';var r=this;(0,a.default)(this),this.mediaSource=new window.MediaSource,t.src=window.URL.createObjectURL(this.mediaSource),this.url=t.src,this.sourceOpened=!1,this.handleSourceOpen=this.onSourceOpen.bind(this),this.mediaSource.addEventListener("sourceopen",this.handleSourceOpen),this.mediaSource.addEventListener("sourceclose",(function(){r.emit("sourceclose")}))}return n(e,[{key:"onSourceOpen",value:function(){var e=this;this.sourceOpened=!0,e.sourceBuffer=e.mediaSource.addSourceBuffer(e.codecs),e.sourceBuffer.addEventListener("error",(function(t){e.emit("error",{type:"sourceBuffer",error:t})})),e.sourceBuffer.addEventListener("updateend",(function(t){e.emit("updateend")})),e.emit("sourceopen"),e.sourceBuffer.addEventListener("error",(function(t){e.emit("error",{type:"mediaSource",error:t})}))}},{key:"appendBuffer",value:function(e){if(!this.sourceOpened)return!1;var t=this.sourceBuffer;if(!1===t.updating&&"open"===this.state)return t.appendBuffer(e),!0;if("closed"===this.state)this.emit("error",{type:"sourceBuffer",error:new Error("mediaSource is not attached to video or mediaSource is closed")});else{if("ended"!==this.state)return!0===t.updating&&this.emit("warn",{type:"sourceBuffer",error:new Error("mediaSource is busy")}),!1;this.emit("error",{type:"sourceBuffer",error:new Error("mediaSource is closed")})}}},{key:"destroy",value:function(){this.__ee__={}}},{key:"removeBuffer",value:function(e,t){this.sourceBuffer.remove(e,t)}},{key:"endOfStream",value:function(){"open"===this.mediaSource.readyState&&this.mediaSource.endOfStream()}},{key:"state",get:function(){return this.mediaSource.readyState}},{key:"duration",get:function(){return this.mediaSource.duration},set:function(e){this.mediaSource.duration=e}}],[{key:"isSupported",value:function(e){return window.MediaSource&&window.MediaSource.isTypeSupported(e)}}]),e}();t.default=o},"./src/parse/demux/AMFParser.js":
/*!**************************************!*\
  !*** ./src/parse/demux/AMFParser.js ***!
  \**************************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,r,i){return r&&e(t.prototype,r),i&&e(t,i),t}}(),n=a(r(/*! ../../../../xgplayer-utils/src/env/isLE */"../xgplayer-utils/src/env/isLE.js")),s=a(r(/*! ../../utils/UTF8 */"./src/utils/UTF8.js"));function a(e){return e&&e.__esModule?e:{default:e}}var o=0,u=1,c=2,f=3,l=8,d=9,h=10,p=11,v=12,y=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.offset=0,this.readOffset=this.offset}return i(e,[{key:"resolve",value:function(e,t){if(t<3)throw new Error("not enough data for metainfo");var r={},i=this.parseValue(e),n=this.parseValue(e,t-i.bodySize);return r[i.data]=n.data,this.resetStatus(),r}},{key:"resetStatus",value:function(){this.offset=0,this.readOffset=this.offset}},{key:"parseString",value:function(e){var t=new DataView(e,this.readOffset).getUint16(0,!n.default),r="";r=t>0?s.default.decode(new Uint8Array(e,this.readOffset+2,t)):"";var i=t+2;return this.readOffset+=i,{data:r,bodySize:t+2}}},{key:"parseDate",value:function(e,t){var r=new DataView(e,this.readOffset,t),i=r.getFloat64(0,!n.default);return i+=60*r.getInt16(8,!n.default)*1e3,this.readOffset+=10,{data:new Date(i),bodySize:10}}},{key:"parseObject",value:function(e,t){var r=this.parseString(e,t),i=this.parseValue(e,t-r.bodySize);return{data:{name:r.data,value:i.data},bodySize:r.bodySize+i.bodySize,isObjEnd:i.isObjEnd}}},{key:"parseLongString",value:function(e){var t=new DataView(e,this.readOffset).getUint32(0,!n.default),r="";return r=t>0?s.default.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:r,bodySize:t+4}}},{key:"parseValue",value:function(e,t){var r=new ArrayBuffer;r=e instanceof ArrayBuffer?e:e.buffer;var i=o,s=u,a=c,y=f,_=l,m=d,g=h,b=p,E=v,S=new DataView(r,this.readOffset,t),x=!1,w=S.getUint8(0),T=1;this.readOffset+=1;var j=null;switch(w){case i:j=S.getFloat64(1,!n.default),this.readOffset+=8,T+=8;break;case s:j=!!S.getUint8(1),this.readOffset+=1,T+=1;break;case a:var k=this.parseString(r);j=k.data,T+=k.bodySize;break;case y:j={};var O=0;for(16777215&S.getUint32(t-4,!n.default)&&(O=3);T<t-4;){var A=this.parseObject(r,t-T-O);if(A.isObjectEnd)break;j[A.data.name]=A.data.value,T+=A.bodySize}if(T<=t-3)9===(16777215&S.getUint32(T-1,!n.default))&&(this.readOffset+=3,T+=3);break;case _:j={},T+=4,this.readOffset+=4;var M=0;for(9==(16777215&S.getUint32(t-4,!n.default))&&(M=3);T<t-8;){var R=this.parseObject(r,t-T-M);if(R.isObjectEnd)break;j[R.data.name]=R.data.value,T+=R.bodySize}if(T<=t-3)9===(16777215&S.getUint32(T-1,!n.default))&&(T+=3,this.readOffset+=3);break;case m:j=null,x=!0;break;case g:j=[];var L=S.getUint32(1,!n.default);T+=4,this.readOffset+=4;for(var D=0;D<L;D++){var B=this.parseValue(r,t-T);j.push(B.data),T+=B.bodySize}break;case b:var I=this.parseDate(r,t-1);j=I.data,T+=I.bodySize;break;case E:var U=this.parseLongString(r,t-1);j=U.data,T+=U.bodySize;break;default:T=t}return{data:j,bodySize:T,isObjEnd:x}}}]),e}();t.default=y},"./src/parse/demux/index.js":
/*!**********************************!*\
  !*** ./src/parse/demux/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,r,i){return r&&e(t.prototype,r),i&&e(t,i),t}}(),n=r(/*! ../../../../xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js"),s=c(r(/*! ./AMFParser */"./src/parse/demux/AMFParser.js")),a=c(r(/*! ../../../../xgplayer-utils/src/h264/SPSParser */"../xgplayer-utils/src/h264/SPSParser.js")),o=r(/*! ../../../../xgplayer-utils/src/models/trackMeta */"../xgplayer-utils/src/models/trackMeta.js"),u=r(/*! ../../../../xgplayer-buffer/src */"../xgplayer-buffer/src/index.js");function c(e){return e&&e.__esModule?e:{default:e}}var f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}return i(e,[{key:"init",value:function(){this.on(n.LOADER_EVENTS.LOADER_DATALOADED,this.handleDataLoaded.bind(this))}},{key:"handleDataLoaded",value:function(){this.parseFlvStream()}},{key:"parseFlvStream",value:function(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;this._parseFlvTag()&&this.parseFlvStream()}else{if(this.loaderBuffer.length<13)return;var e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.parseFlvStream()}}},{key:"parseFlvHeader",value:function(t){if(e.isFlvFile(t)){this._firstFragmentLoaded=!0;var r=e.getPlayType(t[4]);r.hasVideo&&this.initVideoTrack(),r.hasAudio&&this.initAudioTrack()}else this.emit(n.DEMUX_EVENTS.DEMUX_ERROR,new Error("invalid flv file")),this.parseFlvStream();this.handleDataLoaded()}},{key:"initVideoTrack",value:function(){this._trackNum++;var e=new u.VideoTrack;e.meta=new o.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}},{key:"initAudioTrack",value:function(){this._trackNum++;var e=new u.AudioTrack;e.meta=new o.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}},{key:"_parseFlvTag",value:function(){if(this.loaderBuffer.length<11)return null;var e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}},{key:"_parseFlvTagHeader",value:function(){var e=0,t={},r=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&r)>>>5,t.tagType=31&r,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.logger.warn(this.TAG,"tagType "+t.tagType),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);var i=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);var n=this.loaderBuffer.shift(1)[0];return n>0&&(i+=16777216*n),t.dts=i,this.loaderBuffer.shift(3),t}},{key:"_processChunk",value:function(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}},{key:"_parseScriptData",value:function(e){var t=this.tracks.audioTrack,r=this.tracks.videoTrack,i=this.loaderBuffer.shift(e.datasize),a=(new s.default).resolve(i,i.length),o=this._context.onMetaData=a?a.onMetaData:void 0;if(this._context.mediaInfo.duration=o.duration,this._context.mediaInfo.hasVideo=o.hasVideo,this._context.mediaInfo.hsaAudio=o.hsaAudio,this._datasizeValidator(e.datasize)&&(this.emit(n.DEMUX_EVENTS.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){var u=t.meta;switch(o.audiosamplerate&&(u.sampleRate=o.audiosamplerate),o.audiochannels&&(u.channelCount=o.audiochannels),o.audiosamplerate){case 44100:u.sampleRateIndex=4;break;case 22050:u.sampleRateIndex=7;break;case 11025:u.sampleRateIndex=10}}if(r&&!r.hasSpecificConfig){var c=r.meta;if("number"==typeof o.framerate){var f=Math.floor(1e3*o.framerate);if(f>0){var l=f/1e3;c.frameRate||(c.frameRate={}),c.frameRate.fixed=!0,c.frameRate.fps=l,c.frameRate.fps_num=f,c.frameRate.fps_den=1e3}}}}},{key:"_aacSequenceHeaderParser",value:function(e){var t={hasSpecificConfig:!0};return t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec="mp4a.40."+t.objectType,t}},{key:"_parseAACData",value:function(e){var t=this.tracks.audioTrack;if(t){var r=t.meta;r||(r=new o.AudioTrackMeta);var i=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);var s=(240&i)>>>4;t.format=s,10!==s&&this.emit(n.DEMUX_EVENTS.DEMUX_ERROR,new Error("invalid audio format: "+s)),10!==s||this._hasAudioSequence||(r.sampleRate=this._switchAudioSamplingFrequency(i),r.sampleRateIndex=(12&i)>>>2,r.frameLenth=(2&i)>>>1,r.channelCount=1&i,r.refSampleDuration=Math.floor(1024/r.audioSampleRate*r.timescale));var a=r.audioSampleRate,u=r.sampleRateIndex,c=r.refSampleDuration;delete e.tagType;var f=this._datasizeValidator(e.datasize);if(0===e.data[0]){var l=this._aacSequenceHeaderParser(e.data);a=l.audiosamplerate||r.audioSampleRate,u=l.sampleRateIndex||r.sampleRateIndex,c=Math.floor(1024/a*r.timescale),r.channelCount=l.channelCount,r.sampleRate=a,r.sampleRateIndex=u,r.refSampleDuration=c,r.duration=this._context.mediaInfo.duration;var d=this._context.mediaInfo.audio;d.codec=l.codec,d.channelCount=l.channelCount,d.sampleRate=a,d.sampleRateIndex=l.audioSampleRateIndex,!this._hasScript||this._hasAudioSequence||this.tracks.videoTrack&&!this._hasVideoSequence?this._hasScript&&this._hasAudioSequence&&this.emit(n.DEMUX_EVENTS.AUDIO_METADATA_CHANGE):this.emit(n.DEMUX_EVENTS.METADATA_PARSED,"audio"),this._hasAudioSequence=!0}else e.data=e.data.slice(1,e.data.length),t.samples.push(e),this.emit(n.DEMUX_EVENTS.DEMUX_COMPLETE);f||this.logger.warn(this.TAG,"TAG length error at "+e.datasize)}}},{key:"_parseHevcData",value:function(e){var t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=5===e.frameType;var r=15&t;if(this.tracks.videoTrack.codecID=r,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===r){var i=this.loaderBuffer.shift(e.datasize-5);if(e.data=i,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize);var s={},a=0;for(s.cts=e.cts,s.dts=e.dts;e.data.length>a;){var o=e.data.slice(Number.parseInt(a),4+a);s.size=o[3],s.size+=256*o[2],s.size+=256*o[1]*256,s.size+=256*o[0]*256*256,a+=4,s.data=e.data.slice(Number.parseInt(a),s.size+a),a+=s.size,this.tracks.videoTrack.samples.push(s),this.emit(n.DEMUX_EVENTS.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(n.DEMUX_EVENTS.METADATA_PARSED,"video"):this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize))}else if(7===r){var u=this.loaderBuffer.shift(e.datasize-5);if(0===u[4]&&0===u[5]&&0===u[6]&&1===u[7]){for(var c=0,f=0;f<4;f++)c=256*c+u[f];c-=4,(u=u.slice(4,u.length))[3]=c%256,c=(c-u[3])/256,u[2]=c%256,c=(c-u[2])/256,u[1]=c%256,u[0]=(c-u[1])/256}if(e.data=u,0===e.avcPacketType)this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(n.DEMUX_EVENTS.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(n.DEMUX_EVENTS.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0);else this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize),this.tracks.videoTrack.samples.push(e),this.emit(n.DEMUX_EVENTS.DEMUX_COMPLETE)}else this.logger.warn(this.TAG,"video codeid is "+r),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize),this.tracks.videoTrack.samples.push(e),this.emit(n.DEMUX_EVENTS.DEMUX_COMPLETE);delete e.tagType}},{key:"_avcSequenceHeaderParser",value:function(e){var t=this.tracks.videoTrack;if(t){var r=0;t.meta||(t.meta=new o.VideoTrackMeta);var i=t.meta;i.configurationVersion=e[0],i.avcProfileIndication=e[1],i.profileCompatibility=e[2],i.avcLevelIndication=e[3]/10,i.nalUnitLength=1+(3&e[4]);var n=31&e[5];r=6;for(var s={},u=0;u<n;u++){var c=255*e[r]+e[r+1];r+=2;for(var f=new Uint8Array(c),l=0;l<c;l++)f[l]=e[r+l];for(var d="avc1.",h=1;h<4;h++){var p=f[h].toString(16);p.length<2&&(p="0"+p),d+=p}i.codec=d,r+=c,this.tracks.videoTrack.sps=f,s=a.default.parseSPS(f)}var v=e[r];r++;for(var y=0;y<v;y++){var _=255*e[r]+e[r+1];r+=2;for(var m=new Uint8Array(_),g=0;g<_;g++)m[g]=e[r+g];r+=_,this.tracks.videoTrack.pps=m}Object.assign(i,a.default.toVideoMeta(s));var b=this._context.mediaInfo.video;b.codec=i.codec,b.profile=i.profile,b.level=i.level,b.chromaFormat=i.chromaFormat,b.frameRate=i.frameRate,b.parRatio=i.parRatio,b.width=b.width===i.presentWidth?b.width:i.presentWidth,b.height=b.height===i.presentHeight?b.width:i.presentHeight,i.duration=this._context.mediaInfo.duration,i.avcc=new Uint8Array(e.length),i.avcc.set(e),t.meta=i}}},{key:"_switchAudioSampleRate",value:function(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}},{key:"_switchAudioSamplingFrequency",value:function(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}},{key:"_switchAudioChannel",value:function(e){return[1,2][1&e]}},{key:"_datasizeValidator",value:function(e){var t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}},{key:"loaderBuffer",get:function(){if(this._context.getInstance("LOADER_BUFFER"))return this._context.getInstance("LOADER_BUFFER");this.emit(n.DEMUX_EVENTS.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}},{key:"tracks",get:function(){return this._context.getInstance("TRACKS")}},{key:"logger",get:function(){return this._context.getInstance("LOGGER")}}],[{key:"isFlvFile",value:function(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}},{key:"getPlayType",value:function(e){var t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}}]),e}();t.default=f},"./src/utils/UTF8.js":
/*!***************************!*\
  !*** ./src/utils/UTF8.js ***!
  \***************************/
/*! no static exports found */function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,r,i){return r&&e(t.prototype,r),i&&e(t,i),t}}();var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return i(e,null,[{key:"decode",value:function(t){for(var r=[],i=t,n=0,s=t.length;n<s;)if(i[n]<128)r.push(String.fromCharCode(i[n])),++n;else{if(i[n]<192);else if(i[n]<224){if(e._checkContinuation(i,n,1)){var a=(31&i[n])<<6|63&i[n+1];if(a>=128){r.push(String.fromCharCode(65535&a)),n+=2;continue}}}else if(i[n]<240){if(e._checkContinuation(i,n,2)){var o=(15&i[n])<<12|(63&i[n+1])<<6|63&i[n+2];if(o>=2048&&55296!=(63488&o)){r.push(String.fromCharCode(65535&o)),n+=3;continue}}}else if(i[n]<248&&e._checkContinuation(i,n,3)){var u=(7&i[n])<<18|(63&i[n+1])<<12|(63&i[n+2])<<6|63&i[n+3];if(u>65536&&u<1114112){u-=65536,r.push(String.fromCharCode(u>>>10|55296)),r.push(String.fromCharCode(1023&u|56320)),n+=4;continue}}r.push(String.fromCharCode(65533)),++n}return r.join("")}},{key:"_checkContinuation",value:function(e,t,r){var i=e;if(t+r<i.length){for(;r--;)if(128!=(192&i[++t]))return!1;return!0}return!1}}]),e}();t.default=n},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,r){e.exports=r(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!*************************!*\
  !*** external "Player" ***!
  \*************************/
/*! no static exports found */function(e,t){e.exports=window.Player}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,