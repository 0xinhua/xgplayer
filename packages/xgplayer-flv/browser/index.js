window.FlvPlayer=function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../xgplayer-flv-live/dist/index.js":
/*!****************************!*\
  !*** .-live/dist/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){"use strict";var s;window,e.exports=(s=i(/*! xgplayer */"xgplayer"),function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../../node_modules/events/events.js":
/*!*****************************************************************************************!*\
      !*** /Users/leonardo/Documents/front-end/player/xgplayer/node_modules/events/events.js ***!
      \*****************************************************************************************/
/*! no static exports found */function(e,t,i){var s,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};s=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var d=10;function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function h(e,t,i,s){var r,a,n,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),n=a[t]),void 0===n)n=a[t]=i,++e._eventsCount;else if("function"==typeof n?n=a[t]=s?[i,n]:[n,i]:s?n.unshift(i):n.push(i),(r=l(e))>0&&n.length>r&&!n.warned){n.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=t,d.count=n.length,o=d,console&&console.warn&&console.warn(o)}return e}function u(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function c(e,t,i){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=u.bind(s);return r.listener=i,s.wrapFn=r,r}function f(e,t,i){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):m(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function m(e,t){for(var i=new Array(t),s=0;s<t;++s)i[s]=e[s];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return d},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");d=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var s="error"===e,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var d=r[e];if(void 0===d)return!1;if("function"==typeof d)a(d,this,t);else{var l=d.length,h=m(d,l);for(i=0;i<l;++i)a(h[i],this,t)}return!0},o.prototype.addListener=function(e,t){return h(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return h(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,s,r,a,n;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(s=this._events))return this;if(void 0===(i=s[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(r=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){n=i[a].listener,r=a;break}if(r<0)return this;0===r?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,r),1===i.length&&(s[e]=i[0]),void 0!==s.removeListener&&this.emit("removeListener",e,n||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,i,s;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,a=Object.keys(i);for(s=0;s<a.length;++s)"removeListener"!==(r=a[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},"../xgplayer-buffer/index.js":
/*!***********************************!*\
      !*** ../xgplayer-buffer/index.js ***!
      \***********************************/
/*! no static exports found */function(e,t,i){e.exports={Track:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:i(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").default}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
      !*** ../xgplayer-buffer/src/buffer.js ***!
      \****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let s=this.array[0].slice(this.offset,this.offset+e);t.set(s,i),this.offset+=e,this.length-=e,e=0;break}{let s=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=s,this.length-=s,e-=s}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,s=this.offset+e;for(;s<this.offset+t+e;)s<this.array[0].length?i=256*i+this.array[0][s]:this.array[1]&&(i=256*i+this.array[1][s-this.array[0].length]),s++;return i}},t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
      !*** ../xgplayer-buffer/src/presouce.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new s,this.sources[e]}clear(){this.sources={}}destroy(){this.sources={}}}},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
      !*** ../xgplayer-buffer/src/track.js ***!
      \***************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=s,t.AudioTrack=class extends s{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}},t.VideoTrack=class extends s{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}},t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}destroy(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-codec/index.js":
/*!**********************************!*\
      !*** ../xgplayer-codec/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Nalunit:i(/*! ./src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js").default,SpsParser:i(/*! ./src/h264/nalunit/sps */"../xgplayer-codec/src/h264/nalunit/sps.js").default,Compatibility:i(/*! ./src/compatibility */"../xgplayer-codec/src/compatibility.js").default}},"../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
      !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{static getSilentFrame(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},"../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
      !*** ../xgplayer-codec/src/compatibility.js ***!
      \**********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=(s=i(/*! ./aac/aac-helper */"../xgplayer-codec/src/aac/aac-helper.js"))&&s.__esModule?s:{default:s};const{REMUX_EVENTS:n,DEMUX_EVENTS:o}=r.EVENTS;class d{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[],this._videoLargeGap=0,this._audioLargeGap=0}init(){this.before(n.REMUX_MEDIA,this.doFix.bind(this))}reset(){this.nextAudioDts=null,this.nextVideoDts=null,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:e,isFirstVideoSamples:t}=this.getFirstSample();this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples);const{changed:i,changedIdx:s}=d.detactChangeStream(this.videoTrack.samples);i&&!e?this.fixChangeStreamVideo(s):this.doFixVideo(t);const{changed:r,changedIdx:a}=d.detactChangeStream(this.audioTrack.samples);r?this.fixChangeStreamAudio(a):this.doFixAudio(e)}doFixVideo(e,t){let{samples:i,meta:s}=this.videoTrack;if(s.frameRate&&!1===s.frameRate.fixed)return;if(!i||!i.length||!this._firstVideoSample)return;const r=i[0],a=i.length;this._videoLargeGap>0&&d.doFixLargeGap(i,this._videoLargeGap),r.dts!==this._firstVideoSample.dts&&(t||d.detectLargeGap(this.nextVideoDts,r))&&(t&&(this.nextVideoDts=t),this._videoLargeGap=this.nextVideoDts-r.dts,d.doFixLargeGap(i,this._videoLargeGap));const n=r.dts;if(e&&this._firstAudioSample){const e=this._firstVideoSample.dts,t=e-this._firstAudioSample.dts;if(t>2*s.refSampleDuration){const a=Math.floor(t/s.refSampleDuration);for(let t=0;t<a;t++){const a=Object.assign({},r);a.dts=e-(t+1)*s.refSampleDuration,a.pts=a.dts+a.cts,i.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}}}let o;if(this.nextVideoDts){o=n-this.nextVideoDts;const e=Math.abs(o);if(o>2*s.refSampleDuration){const e=Math.floor(o/s.refSampleDuration);for(let t=0;t<e;t++){const e=Object.assign({},i[0]),r=n-(t+1)*s.refSampleDuration;e.dts=r>this.nextVideoDts?r:this.nextVideoDts,e.pts=e.dts+e.cts,this.videoTrack.samples.unshift(e),this.filledVideoSamples.push({dts:e.dts,size:e.data.byteLength})}}else e<=s.refSampleDuration&&e>0?(i[0].dts=this.nextVideoDts,i[0].originDts=i[0].dts,i[0].cts=void 0!==i[0].cts?i[0].cts:i[0].pts-i[0].dts,i[0].pts=i[0].dts+i[0].cts):o<0&&d.doFixLargeGap(i,-1*o)}const l=i[i.length-1].dts,h=i.length>=2?l-i[i.length-2].dts:s.refSampleDuration;this.lastVideoSamplesLen=a,this.nextVideoDts=l+h,this.lastVideoDts=l;for(let e=0,t=i.length;e<t;e++){const t=i[e],r=i[e+1];if(!r)break;const a=r.dts-t.dts;if(a>2*s.refSampleDuration){let n=Math.floor(a/s.refSampleDuration),o=0;for(;o<n;){const a=Object.assign({},r);a.dts=t.dts+(o+1)*s.refSampleDuration,a.pts=a.dts+a.cts,a<r.dts&&(i.splice(e,0,a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})),o++,e++}}}this.videoTrack.samples=i}doFixAudio(e,t){let{samples:i,meta:s}=this.audioTrack;if(!i||!i.length)return;const r=i.length,n=a.default.getSilentFrame(s.codec,s.channelCount),o=this._firstAudioSample,l=i[0];if(this._audioLargeGap>0&&d.doFixLargeGap(i,this._audioLargeGap),l.dts!==this._firstAudioSample.dts&&(t||d.detectLargeGap(this.nextAudioDts,l))&&(t&&(this.nextAudioDts=t),this._audioLargeGap=this.nextAudioDts-l.dts,d.doFixLargeGap(i,this._audioLargeGap)),this._firstVideoSample&&e){const e=this._firstVideoSample.pts?this._firstVideoSample.pts:this._firstVideoSample.dts+this._firstVideoSample.cts;if(o.dts-e>s.refSampleDuration){const t=Math.floor((o.dts-e)/s.refSampleDuration);for(let e=0;e<t;e++){const t={data:n,datasize:n.byteLength,dts:o.dts-(e+1)*s.refSampleDuration,filtered:0};i.unshift(t),this.filledAudioSamples.push({dts:t.dts,size:t.data.byteLength})}}}let h;const u=i[0].dts;if(this.nextAudioDts){h=u-this.nextAudioDts;const e=Math.abs(h);if(e>s.refSampleDuration&&1===r&&1===this.lastAudioSamplesLen&&(s.refSampleDurationFixed=void 0),h>2*s.refSampleDuration)if(1===r&&1===this.lastAudioSamplesLen)s.refSampleDurationFixed=void 0!==s.refSampleDurationFixed?s.refSampleDurationFixed+h:s.refSampleDuration+h;else{const e=Math.floor(h/s.refSampleDuration);for(let t=0;t<e;t++){const e=u-(t+1)*s.refSampleDuration,r=Object.assign({},i[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else e<=s.refSampleDuration&&e>0?(i[0].dts=this.nextAudioDts,i[0].pts=this.nextAudioDts):h<0&&d.doFixLargeGap(i,-1*h)}const c=i[i.length-1].dts,f=i.length>=2?c-i[i.length-2].dts:s.refSampleDuration;this.lastAudioSamplesLen=r,this.nextAudioDts=s.refSampleDurationFixed?c+s.refSampleDurationFixed:c+f,this.lastAudioDts=c;for(let e=0,t=i.length;e<t;e++){const t=i[e],s=i[e+1];if(!s)break;const r=s.dts-t.dts;i[e].duration=r}this.audioTrack.samples=d.sortAudioSamples(i)}fixChangeStreamVideo(e){const{samples:t,meta:i}=this.videoTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixVideo(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.videoTrack.samples=t.slice(0,e),this.doFixVideo(!1),this.videoTrack.samples=t.slice(e),this.doFixVideo(!1,l),this.videoTrack.samples=a.concat(n)}fixChangeStreamAudio(e){const{samples:t,meta:i}=this.audioTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixAudio(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.audioTrack.samples=a,this.doFixAudio(!1),this.audioTrack.samples=n,this.doFixAudio(!1,l),this.audioTrack.samples=a.concat(n)}getFirstSample(){let{samples:e}=this.videoTrack,{samples:t}=this.audioTrack,i=!1,s=!1;return!this._firstVideoSample&&e.length&&(this._firstVideoSample=d.findFirstVideoSample(e),i=!0),!this._firstAudioSample&&t.length&&(this._firstAudioSample=d.findFirstAudioSample(t),s=!0),{isFirstVideoSamples:i,isFirstAudioSamples:s}}fixRefSampleDuration(e,t){const i="video"===e.type,s=i?this.allVideoSamplesCount:this.allAudioSamplesCount,r=i?this._firstVideoSample.dts:this._firstAudioSample.dts,a=i?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration)){if(t.length>=1){const i=t[t.length-1].dts;e.refSampleDuration=Math.floor((i-r)/(s+a-1))}}else if(e.refSampleDuration&&t.length>=5){const i=(t[t.length-1].dts-t[0].dts)/(t.length-1);e.refSampleDuration=Math.floor(Math.abs(e.refSampleDuration-i)<=5?e.refSampleDuration:i)}}recordSamplesCount(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}removeInvalidSamples(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter(e=>e.dts>=t.dts&&(void 0===this.lastAudioDts||e.dts>this.lastAudioDts)),this.videoTrack.samples=this.videoTrack.samples.filter(t=>t.dts>=e.dts&&(void 0===this.lastVideoDts||t.dts>this.lastVideoDts))}getStreamChangeStart(e){return e.options&&e.options.start?e.options.start-this.dtsBase:1/0}static sortAudioSamples(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}static findFirstAudioSample(e){return e&&0!==e.length?d.sortAudioSamples(e)[0]:null}static findFirstVideoSample(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,i=t.length;e<i;e++)if(t[e].isKeyframe)return t[e]}static detectLargeGap(e,t){if(null===e)return;const i=t.dts||0,s=e-i>=1e3||i-e>=1e3,r=t.options&&t.options.discontinue;return s||r}static doFixLargeGap(e,t){console.log("fix large gap");for(let i=0,s=e.length;i<s;i++){const s=e[i];s.dts+=t,s.pts&&(s.pts+=t)}}static detactChangeStream(e){let t=!1,i=-1;for(let s=0,r=e.length;s<r;s++)if(e[s].options&&e[s].options.meta){t=!0,i=s;break}return{changed:t,changedIdx:i}}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks?this.tracks.audioTrack:null}get videoTrack(){return this.tracks?this.tracks.videoTrack:null}get dtsBase(){const e=this._context.getInstance("MP4_REMUXER");return e?e._dtsBase:0}}t.default=d},"../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){let t=Math.min(this._currentWordBitsLeft,e),i=this._currentWord>>>32-t;if(e>32)throw new Error("Cannot read more than 32 bits at a time");return this._currentWordBitsLeft-=t,this._currentWordBitsLeft>0?this._currentWord<<=t:this._totalBytes-this._bufferIndex>0&&this._fillCurrentWord(),(t=e-t)>0&&this._currentWordBitsLeft?i<<t|this.readBits(t):i}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
      \***************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./sps */"../xgplayer-codec/src/h264/nalunit/sps.js"))&&s.__esModule?s:{default:s};class a{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,i=e.position;return 1===t.getInt32(i)||0===t.getInt16(i)&&1===t.getInt8(i+2)?a.getAnnexbNals(e):a.getAvccNals(e)}static getAnnexbNals(e){let t=[],i=a.getHeaderPositionAnnexB(e),s=i.pos,r=s;for(;s<e.length-4;){let n=e.buffer.slice(s,s+i.headerLength);i.pos===e.position&&e.skip(i.headerLength),r=(i=a.getHeaderPositionAnnexB(e)).pos;let o={header:n,body:new Uint8Array(e.buffer.slice(s+n.byteLength,r))};a.analyseNal(o),t.push(o),e.skip(r-e.position),s=r}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let i=e.dataview.getInt32();if(!(e.length-e.position>=i))break;{let s=e.buffer.slice(e.position,e.position+4);e.skip(4);let r=e.buffer.slice(e.position,e.position+i);e.skip(i);let n={header:s,body:r};a.analyseNal(n),t.push(n)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=r.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,i=0;for(;3!==i&&4!==i&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?i=4:1===e.dataview.getInt8(t+2)?i=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(i=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?i=3:t=e.length)),{pos:t,headerLength:i}}static getAvcc(e,t){let i=new Uint8Array(e.byteLength+t.byteLength+11);i[0]=1,i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=255,i[5]=225;let s=6;return i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),s),s+=2,i.set(e,s),i[s+=e.byteLength]=1,s++,i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),s),s+=2,i.set(t,s),i}}t.default=a},"../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
      \*************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./golomb */"../xgplayer-codec/src/h264/nalunit/golomb.js"))&&s.__esModule?s:{default:s};class a{static _ebsp2rbsp(e){let t=e,i=t.byteLength,s=new Uint8Array(i),r=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(s[r]=t[e],r++);return new Uint8Array(s.buffer,0,r)}static parseSPS(e){let t=a._ebsp2rbsp(e),i=new r.default(t);i.readByte();let s=i.readByte();i.readByte();let n=i.readByte();i.readUEG();let o=a.getProfileString(s),d=a.getLevelString(n),l=1,h=420,u=8;if((100===s||110===s||122===s||244===s||44===s||83===s||86===s||118===s||128===s||138===s||144===s)&&(3===(l=i.readUEG())&&i.readBits(1),l<=3&&(h=[0,420,422,444][l]),u=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==l?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?a._skipScalingList(i,16):a._skipScalingList(i,64))}i.readUEG();let c=i.readUEG();if(0===c)i.readUEG();else if(1===c){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let f=i.readUEG(),p=i.readUEG(),m=i.readBits(1);0===m&&i.readBits(1),i.readBits(1);let g=0,_=0,y=0,E=0;i.readBool()&&(g=i.readUEG(),_=i.readUEG(),y=i.readUEG(),E=i.readUEG());let v=1,A=1,S=0,b=!0,T=0,x=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],s=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(v=t[e-1],A=s[e-1]):255===e&&(v=i.readByte()<<8|i.readByte(),A=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);b=i.readBool(),S=(T=t)/(x=2*e)}}let w=1;1===v&&1===A||(w=v/A);let D=0,R=0;0===l?(D=1,R=2-m):(D=3===l?1:2,R=(1===l?2:1)*(2-m));let L=16*(f+1),O=16*(p+1)*(2-m);L-=(g+_)*D,O-=(y+E)*R;let M=Math.ceil(L*w);return i.destroy(),i=null,{profile_string:o,level_string:d,bit_depth:u,chroma_format:h,chroma_format_string:a.getChromaFormatString(h),frame_rate:{fixed:b,fps:S,fps_den:x,fps_num:T},par_ratio:{width:v,height:A},codec_size:{width:L,height:O},present_size:{width:M,height:O}}}static _skipScalingList(e,t){let i=8,s=8,r=0;for(let a=0;a<t;a++)0!==s&&(s=(i+(r=e.readSEG())+256)%256),i=0===s?i:s}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},t.frameRate=e.frame_rate;let i=t.frameRate.fps_den,s=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/s))}}t.default=a},"../xgplayer-demux/index.js":
/*!**********************************!*\
      !*** ../xgplayer-demux/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={M3U8Parser:i(/*! ./src/hls/demuxer/m3u8parser */"../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,TsDemuxer:i(/*! ./src/hls/demuxer/ts */"../xgplayer-demux/src/hls/demuxer/ts.js").default,Playlist:i(/*! ./src/hls/playlist */"../xgplayer-demux/src/hls/playlist.js").default,FlvDemuxer:i(/*! ./src/flv/index */"../xgplayer-demux/src/flv/index.js").default}},"../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
      !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};t.default=class{constructor(){this.offset=0,this.readOffset=this.offset}resolve(e,t){if(t<3)throw new Error("not enough data for metainfo");const i={},s=this.parseValue(e),r=this.parseValue(e,t-s.bodySize);return i[s.data]=r.data,this.resetStatus(),i}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(e){const t=new DataView(e,this.readOffset).getUint16(0,!s.isLe);let i="";i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}parseDate(e,t){const i=new DataView(e,this.readOffset,t);let r=i.getFloat64(0,!s.isLe);return r+=60*i.getInt16(8,!s.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(e,t){const i=this.parseString(e,t),s=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:s.data},bodySize:i.bodySize+s.bodySize,isObjEnd:s.isObjEnd}}parseLongString(e){const t=new DataView(e,this.readOffset).getUint32(0,!s.isLe);let i="";return i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}parseValue(e,t){let i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:d,MIX_ARRAY:l,OBJECT_END:h,STRICT_ARRAY:u,DATE:c,LONE_STRING:f}=r,p=new DataView(i,this.readOffset,t);let m=!1;const g=p.getUint8(0);let _=1;this.readOffset+=1;let y=null;switch(g){case a:y=p.getFloat64(1,!s.isLe),this.readOffset+=8,_+=8;break;case n:y=!!p.getUint8(1),this.readOffset+=1,_+=1;break;case o:{const e=this.parseString(i);y=e.data,_+=e.bodySize;break}case d:{y={};let e=0;for(16777215&p.getUint32(t-4,!s.isLe)&&(e=3);_<t-4;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(this.readOffset+=3,_+=3);break}case l:{y={},_+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!s.isLe))&&(e=3);_<t-8;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(_+=3,this.readOffset+=3);break}case h:y=null,m=!0;break;case u:{y=[];const e=p.getUint32(1,!s.isLe);_+=4,this.readOffset+=4;for(let s=0;s<e;s++){const e=this.parseValue(i,t-_);y.push(e.data),_+=e.bodySize}break}case c:{const e=this.parseDate(i,t-1);y=e.data,_+=e.bodySize;break}case f:{const e=this.parseLongString(i,t-1);y=e.data,_+=e.bodySize;break}default:_=t}return{data:y,bodySize:_,isObjEnd:m}}}},"../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
      !*** ../xgplayer-demux/src/flv/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),n=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=(s=i(/*! ./amf-parser */"../xgplayer-demux/src/flv/amf-parser.js"))&&s.__esModule?s:{default:s};const d=r.EVENTS.DEMUX_EVENTS;class l{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(d.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}static getPlayType(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e,t=1e5;do{e=this._parseFlvTag()}while(e&&t-- >0);this.emit(d.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}parseFlvHeader(e){if(l.isFlvFile(e)){this._firstFragmentLoaded=!0;const t=l.getPlayType(e[4]);t.hasVideo&&this.initVideoTrack(),t.hasAudio&&this.initAudioTrack()}else this.emit(d.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let e=new n.VideoTrack;e.meta=new r.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}initAudioTrack(){this._trackNum++;let e=new n.AudioTrack;e.meta=new r.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}_parseFlvTagHeader(){let e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.emit(d.DEMUX_ERROR,this.TAG,new Error("tagType "+t.tagType),!1),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let s=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(s+=16777216*r),t.dts=s,this.loaderBuffer.shift(3),t}_processChunk(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(e){let t=this.tracks.audioTrack,i=this.tracks.videoTrack,s=this.loaderBuffer.shift(e.datasize);const r=(new o.default).resolve(s,s.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(d.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(a.audiosamplerate&&(e.sampleRate=a.audiosamplerate),a.audiochannels&&(e.channelCount=a.audiochannels),a.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){let e=i.meta;if("number"==typeof a.framerate){let t=Math.floor(1e3*a.framerate);if(t>0){let i=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=i,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let i,s,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,s=new Array(4),i=a-3):(t.objectType=2,s=new Array(2),i=a):-1!==r.indexOf("android")?(t.objectType=2,s=new Array(2),i=a):(t.objectType=5,i=t.sampleRateIndex,s=new Array(4),t.sampleRateIndex>=6?i=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,s=new Array(2),i=t.sampleRateIndex)),s[0]=t.objectType<<3,s[0]|=(15&t.sampleRateIndex)>>>1,s[1]=(15&t.sampleRateIndex)<<7,s[1]|=(15&t.channelCount)<<3,5===t.objectType&&(s[1]|=(15&i)>>>1,s[2]=(1&i)<<7,s[2]|=8,s[3]=0),t.config=s,t}_parseAACData(e){let t=this.tracks.audioTrack;if(!t)return;let i=t.meta;i||(t.meta=new r.AudioTrackMeta,i=t.meta);let s=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let a=(240&s)>>>4;t.format=a,10!==a&&this.emit(d.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(s),i.sampleRateIndex=(12&s)>>>2,i.frameLenth=(2&s)>>>1,i.channelCount=1&s,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));let n=i.audioSampleRate,o=i.sampleRateIndex,l=i.refSampleDuration;delete e.tagType;let h=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);n=t.audiosamplerate||i.audioSampleRate,o=t.sampleRateIndex||i.sampleRateIndex,l=Math.floor(1024/n*i.timescale),i.channelCount=t.channelCount,i.sampleRate=n,i.sampleRateIndex=o,i.refSampleDuration=l,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=t.config;const s=this._context.mediaInfo.audio;s.codec=t.codec,s.channelCount=t.channelCount,s.sampleRate=n,s.sampleRateIndex=t.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(d.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&this.emit(d.AUDIO_METADATA_CHANGE),this._hasAudioSequence=!0,this._metaChange=!0}else this._metaChange&&(e.options={meta:t.meta},this._metaChange=!1),e.data=e.data.slice(1,e.data.length),t.samples.push(e);h||this.emit(d.DEMUX_ERROR,this.TAG,new Error("TAG length error at "+e.datasize),!1)}_parseHevcData(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);let t={},i=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>i;){let s=e.data.slice(Number.parseInt(i),4+i);t.size=s[3],t.size+=256*s[2],t.size+=256*s[1]*256,t.size+=256*s[0]*256*256,i+=4,t.data=e.data.slice(Number.parseInt(i),t.size+i),i+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(d.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(d.METADATA_PARSED,"video"):this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1))}else if(7===i){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let i=0;i<4;i++)e=256*e+t[i];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType)this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(d.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(d.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0),this._metaChange=!0;else{if(!this._datasizeValidator(e.datasize))return void this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);this._metaChange&&(e.options={meta:Object.assign({},this.tracks.videoTrack.meta)},this._metaChange=!1),this.tracks.videoTrack.samples.push(e)}}else this.emit(d.DEMUX_ERROR,this.TAG,new Error(`video codeid is ${i}`),!1),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1),this.tracks.videoTrack.samples.push(e),this.emit(d.DEMUX_COMPLETE);delete e.tagType}_avcSequenceHeaderParser(e){let t=this.tracks.videoTrack;if(!t)return;let i=0;t.meta||(t.meta=new r.VideoTrackMeta);let s=t.meta;s.configurationVersion=e[0],s.avcProfileIndication=e[1],s.profileCompatibility=e[2],s.avcLevelIndication=e[3]/10,s.nalUnitLength=1+(3&e[4]);let n=31&e[5];i=6;let o={};for(let t=0;t<n;t++){let t=255*e[i]+e[i+1];i+=2;let r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e[i+s];let n="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),n+=t}s.codec=n,i+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let d=e[i];i++;for(let t=0;t<d;t++){let t=255*e[i]+e[i+1];i+=2;let s=new Uint8Array(t);for(let r=0;r<t;r++)s[r]=e[i+r];i+=t,this.tracks.videoTrack.meta.pps=s}Object.assign(s,a.SpsParser.toVideoMeta(o));const l=this._context.mediaInfo.video;l.codec=s.codec,l.profile=s.profile,l.level=s.level,l.chromaFormat=s.chromaFormat,l.frameRate=s.frameRate,l.parRatio=s.parRatio,l.width=l.width===s.presentWidth?l.width:s.presentWidth,l.height=l.height===s.presentHeight?l.width:s.presentHeight,s.duration=this._context.mediaInfo.duration*s.timescale,s.avcc=new Uint8Array(e.length),s.avcc.set(e),t.meta=s}_switchAudioSampleRate(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}_switchAudioSamplingFrequency(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}_switchAudioChannel(e){return[1,2][1&e]}_datasizeValidator(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}get loaderBuffer(){const e=this._context.getInstance("LOADER_BUFFER");if(e)return e;this.emit(d.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}t.default=l},"../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
      !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
      \*******************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static parse(e,t=""){let i={duration:0};if(!e||!e.split)return;let r=e.split(/\r|\n/),a=(r=r.filter(e=>e)).shift();if(!a.match("#EXTM3U"))throw new Error('Invalid m3u8 file: not "#EXTM3U"');for(a=r.shift();a;){let e=a.match(/#(.[A-Z|-]*):(.*)/),n=a.match(/#(.[A-Z|-]*)/);if(n&&e&&e.length>2)switch(e[1]){case"EXT-X-VERSION":i.version=parseInt(e[2]);break;case"EXT-X-MEDIA-SEQUENCE":i.sequence=parseInt(e[2]);break;case"EXT-X-TARGETDURATION":i.targetduration=parseFloat(e[2]);break;case"EXTINF":s.parseFrag(e,r,i,t);break;case"EXT-X-KEY":s.parseDecrypt(e[2],i)}if(n&&n.length>1)switch(n[1]){case"EXT-X-DISCONTINUITY":let e=(a=r.shift()).match(/#(.[A-Z|-]*):(.*)/);e.length>2&&"EXTINF"===e[1]&&s.parseFrag(e,r,i,t,!0)}a=r.shift()}return i}static parseFrag(e,t,i,s,r){i.frags||(i.frags=[]);let a={start:i.duration,duration:1e3*parseFloat(e[2])};i.duration+=a.duration;let n=t.shift();n.match(/#(.*):(.*)/)&&(n=t.shift()),n.length>0&&"/"===n.charAt(0)&&s.match(/.*\/\/.*\.\w+/g)&&(s=s.match(/.*\/\/.*\.\w+/g)[0]),n.match(/.*:\/\/.*/)?a.url=n:a.url=s+n,a.discontinue=r,i.frags.push(a)}static parseURL(e){let t="",i=e.match(/(.*\/).*\.m3u8/);if(i&&i.length>0)for(let e=0;e<i.length;e++)i[e].match(/.*\/$/g)&&i[e].length>t.length&&(t=i[e]);return t}static parseDecrypt(e,t){t.encrypt={};let i=e.split(",");for(let e in i){let s=i[e];if(s.match(/METHOD=(.*)/)&&(t.encrypt.method=s.match(/METHOD=(.*)/)[1]),s.match(/URI="(.*)"/)&&(t.encrypt.uri=s.match(/URI="(.*)"/)[1]),s.match(/IV=0x(.*)/)){let e=s.match(/IV=0x(.*)/)[1],i=Math.ceil(e.length/2);t.encrypt.ivb=new Uint8Array(i);for(let s=i-1;s>=0;s--){let i=parseInt(e.substr(2*s,2),16);t.encrypt.ivb[s]=i}t.encrypt.iv=e}}}}t.default=s},"../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
      !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),r=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),a=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const n=a.EVENTS.DEMUX_EVENTS,o={1:["video","MPEG-1"],2:["video","MPEG-2"],27:["video","AVC.H264"],234:["video","VC-1"],3:["audio","MPEG-1"],4:["audio","MPEG-2"],15:["audio","MPEG-2.AAC"],17:["audio","MPEG-4.AAC"],128:["audio","LPCM"],129:["audio","AC3"],6:["audio","AC3"],130:["audio","DTS"],131:["audio","Dolby TrueHD"],132:["audio","AC3-Plus"],133:["audio","DTS-HD"],134:["audio","DTS-MA"],161:["audio","AC3-Plus-SEC"],162:["audio","DTS-HD-SEC"]};class d{constructor(e){this.configs=Object.assign({},e),this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}init(){this.on(n.DEMUX_START,this.demux.bind(this))}demux(e){if(this.demuxing)return;let t=this.inputBuffer,i={pat:[],pmt:[]},s={};for(;t.length>=188;){for(t.length>=1&&71!==t.array[0][t.offset]&&this.emit(n.DEMUX_ERROR,this.TAG,new Error(`Untrust sync code: ${t.array[0][t.offset]}, try to recover;`),!1);t.length>=1&&71!==t.array[0][t.offset];)t.shift(1);let e=t.shift(188),r=new a.Stream(e.buffer),o={};d.read(r,o,i),o.pes?(s[o.header.pid]||(s[o.header.pid]=[]),s[o.header.pid].push(o.pes),o.pes.ES.buffer=[o.pes.ES.buffer]):s[o.header.pid]&&s[o.header.pid][s[o.header.pid].length-1].ES.buffer.push(o.payload.stream)}let r=e,o=e;for(let e=0;e<Object.keys(s).length;e++){let t=s[Object.keys(s)[e]];for(let i=0;i<t.length;i++)t[i].id=Object.keys(s)[e],t[i].ES.buffer=d.Merge(t[i].ES.buffer),"audio"===t[i].type?(this.pushAudioSample(t[i],r),r={}):"video"===t[i].type&&(this.pushVideoSample(t[i],o),o={})}this._hasAudioMeta&&this.emit(n.DEMUX_COMPLETE,"audio"),this._hasVideoMeta&&this.emit(n.DEMUX_COMPLETE,"video")}pushAudioSample(e,t){let i;this._tracks.audioTrack?i=this._tracks.audioTrack:(this._tracks.audioTrack=new r.AudioTrack,i=this._tracks.audioTrack);let s=new a.AudioTrackMeta({audioSampleRate:e.ES.frequence,sampleRate:e.ES.frequence,channelCount:e.ES.channel,codec:"mp4a.40."+e.ES.audioObjectType,config:e.ES.audioConfig,id:2,sampleRateIndex:e.ES.frequencyIndex});s.refSampleDuration=Math.floor(1024/s.audioSampleRate*s.timescale);let o=d.compaireMeta(i.meta,s,!0);this._hasAudioMeta&&o||(i.meta=s,this._hasAudioMeta=!0,this.emit(n.METADATA_PARSED,"audio"));let l=new Uint8Array(e.ES.buffer.buffer.slice(e.ES.buffer.position,e.ES.buffer.length)),h=parseInt(e.pts/90),u=parseInt(e.pts/90),c=new a.AudioTrackSample({dts:h,pts:u,data:l,options:t});i.samples.push(c)}pushVideoSample(e,t){let i,o=s.Nalunit.getNalunits(e.ES.buffer),l=new a.VideoTrackMeta;this._tracks.videoTrack?i=this._tracks.videoTrack:(this._tracks.videoTrack=new r.VideoTrack,i=this._tracks.videoTrack);let h=0,u=!1,c=!1;for(let e=0;e<o.length;e++){let t=o[e];if(t.sps){u=t,i.sps=t.body,l.chromaFormat=u.sps.chroma_format,l.codec="avc1.";for(var f=1;f<4;f++){var p=u.body[f].toString(16);p.length<2&&(p="0"+p),l.codec+=p}l.codecHeight=u.sps.codec_size.height,l.codecWidth=u.sps.codec_size.width,l.frameRate=u.sps.frame_rate,l.id=1,l.level=u.sps.level_string,l.presentHeight=u.sps.present_size.height,l.presentWidth=u.sps.present_size.width,l.profile=u.sps.profile_string,l.refSampleDuration=Math.floor(l.timescale*(u.sps.frame_rate.fps_den/u.sps.frame_rate.fps_num)),l.sarRatio=u.sps.sar_ratio?u.sps.sar_ratio:u.sps.par_ratio}else t.pps?(i.pps=t.body,c=t):h+=4+t.body.byteLength}if(u&&c){l.avcc=s.Nalunit.getAvcc(u.body,c.body);let e=d.compaireMeta(i.meta,l,!0);this._hasVideoMeta&&e||(t?t.meta=Object.assign({},l):t={meta:Object.assign({},l)},i.meta=l,this._hasVideoMeta=!0,this.emit(n.METADATA_PARSED,"video"))}let m=new Uint8Array(h),g=0,_=!1;for(let e=0;e<o.length;e++){let t=o[e],i=t.body.byteLength;t.idr&&(_=!0),t.pps||t.sps||(m.set(new Uint8Array([i>>>24&255,i>>>16&255,i>>>8&255,255&i]),g),g+=4,m.set(t.body,g),g+=i)}let y=new a.VideoTrackSample({dts:parseInt(e.dts/90),pts:parseInt(e.pts/90),cts:(e.pts-e.dts)/90,originDts:e.dts,isKeyframe:_,data:m,options:t});i.samples.push(y)}destory(){this.off(n.DEMUX_START,this.demux),this.configs={},this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}static compaireArray(e,t,i){let s=0,r=0;if("Uint8Array"===i?(s=e.byteLength,r=t.byteLength):"Array"===i&&(s=e.length,r=t.length),s!==r)return!1;for(let i=0;i<s;i++)if(e[i]!==t[i])return!1;return!0}static compaireMeta(e,t,i){if(!e||!t)return!1;for(let s=0,r=Object.keys(e).length;s<r;s++){let r=e[Object.keys(e)[s]],a=t[Object.keys(e)[s]];if("object"!=typeof r){if(i&&"duration"!==Object.keys(e)[s]&&"refSampleDuration"!==Object.keys(e)[s]&&"refSampleDurationFixed"!==Object.keys(e)[s]&&r!==a)return!1}else if(void 0!==r.byteLength){if(void 0===a.byteLength)return!1;if(!d.compaireArray(r,a,"Uint8Array"))return!1}else if(void 0!==r.length){if(void 0===a.length)return!1;if(!d.compaireArray(r,a,"Array"))return!1}else if(!d.compaireMeta(r,a))return!1}return!0}static Merge(e){let t,i=0,s=0;for(let t=0;t<e.length;t++)i+=e[t].length-e[t].position;t=new Uint8Array(i);for(let i=0;i<e.length;i++){let r=e[i];t.set(new Uint8Array(r.buffer,r.position),s),s+=r.length-r.position}return new a.Stream(t.buffer)}static read(e,t,i){d.readHeader(e,t),d.readPayload(e,t,i),"MEDIA"!==t.header.packet||1!==t.header.payload||t.unknownPIDs||(t.pes=d.PES(t))}static readPayload(e,t,i){let s=t.header.pid;switch(s){case 0:d.PAT(e,t,i);break;case 1:d.CAT(e,t,i);break;case 2:d.TSDT(e,t,i);break;case 8191:break;default:if(i.pat.some(e=>e.pid===s))d.PMT(e,t,i);else{let r=i.pmt?i.pmt.filter(e=>e.pid===s):[];r.length>0?d.Media(e,t,o[r[0].streamType][0]):t.unknownPIDs=!0}}}static readHeader(e,t){let i={};i.sync=e.readUint8();let s=e.readUint16();i.error=s>>>15,i.payload=s>>>14&1,i.priority=s>>>13&1,i.pid=8191&s,s=e.readUint8(),i.scrambling=s>>6&3,i.adaptation=s>>4&3,i.continuity=15&s,i.packet=0===i.pid?"PAT":"MEDIA",t.header=i}static PAT(e,t,i){let s={},r=e.readUint8();e.skip(r),r=e.readUint8(),s.tabelID=r,r=e.readUint16(),s.error=r>>>7,s.zero=r>>>6&1,s.sectionLength=4095&r,s.streamID=e.readUint16(),s.current=1&e.readUint8(),s.sectionNumber=e.readUint8(),s.lastSectionNumber=e.readUint8();let a=(s.sectionLength-9)/4,n=[];for(let t=0;t<a;t++){let t=e.readUint16(),i=8191&e.readUint16();n.push({program:t,pid:i,type:0===t?"network":"mapPID"})}n.length>0&&(i.pat=i.pat.concat(n)),s.list=n,s.program=e.readUint16(),s.pid=8191&e.readUint16(),t.payload=s}static PMT(e,t,i){let s={};t.header.packet="PMT";let r=e.readUint8();e.skip(r),r=e.readUint8(),s.tableID=r,r=e.readUint16(),s.sectionLength=4095&r,s.program=e.readUint16(),s.current=1&e.readUint8(),s.order=e.readUint8(),s.lastOrder=e.readUint8(),s.PCR_PID=8191&e.readUint16(),s.programLength=4095&e.readUint16();let a=(s.sectionLength-13)/5,n=[];for(let t=0;t<a;t++)n.push({streamType:e.readUint8(),pid:8191&e.readUint16(),es:4095&e.readUint16()});s.list=n,this.pmt||(this.pmt=[]),i.pmt=this.pmt.concat(n.map(e=>({pid:e.pid,es:e.es,streamType:e.streamType,program:s.program}))),t.payload=s}static Media(e,t,i){let s=t.header,r={};if(s.type=i,3===s.adaptation&&(r.adaptationLength=e.readUint8(),r.adaptationLength>0)){let t=e.readUint8();r.discontinue=t>>>7,r.access=t>>>6&1,r.priority=t>>>5&1,r.PCR=t>>>4&1,r.OPCR=t>>>3&1,r.splicePoint=t>>>2&1,r.transportPrivate=t>>>1&1,r.adaptationField=1&t;let i=e.position;if(1===r.PCR&&(r.programClockBase=e.readUint32()<<1,t=e.readUint16(),r.programClockBase|=t>>>15,r.programClockExtension=511&t),1===r.OPCR&&(r.originProgramClockBase=e.readUint32()<<1,t=e.readUint16(),r.originProgramClockBase+=t>>>15,r.originProgramClockExtension=511&t),1===r.splicePoint&&(r.spliceCountdown=e.readUint8()),1===r.transportPrivate){let t=e.readUint8(),i=[];for(let s=0;s<t;s++)i.push(e.readUint8())}if(1===r.adaptationField){let t=e.readUint8(),i=e.readUint8(),s=e.position,a=i>>>6&1,n=i>>>5&1;1==i>>>7&&(i=e.readUint16(),r.ltwValid=i>>>15,r.ltwOffset=61439&i),1===a&&(i=e.readUint24(),r.piecewiseRate=4194303&i),1===n&&(i=e.readInt8(),r.spliceType=i>>>4,r.dtsNextAU1=i>>>1&7,r.marker1=1&i,i=e.readUint16(),r.dtsNextAU2=i>>>1,r.marker2=1&i,i=e.readUint16(),r.dtsNextAU3=i),e.skip(t-1-(e.position-s))}let s=r.adaptationLength-1-(e.position-i);e.skip(s)}r.stream=new a.Stream(e.buffer.slice(e.position)),t.payload=r}static PES(e){let t={},i=e.payload.stream;if(1!==i.readUint24())t.ES={},t.ES.buffer=i;else{let e=i.readUint8();e>=224&&e<=239&&(t.type="video"),e>=192&&e<=223&&(t.type="audio");let s=i.readUint16();if(t.packetLength=s,"video"!==t.type&&"audio"!==t.type)throw new Error("format is not supported");{let e=i.readUint8();if(2!=e>>>6)throw new Error("error when parse pes header");e=i.readUint8(),t.ptsDTSFlag=e>>>6,t.escrFlag=e>>>5&1,t.esRateFlag=e>>>4&1,t.dsmFlag=e>>>3&1,t.additionalFlag=e>>>2&1,t.crcFlag=e>>>1&1,t.extensionFlag=1&e,t.pesHeaderLength=i.readUint8();let s=t.pesHeaderLength;if(2===t.ptsDTSFlag){let r=[];e=i.readUint8(),r.push(e>>>1&7),e=i.readUint16(),r.push(e>>>1),e=i.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2],s-=5,"video"===t.type&&(t.dts=t.pts)}if(3===t.ptsDTSFlag){let r=[];e=i.readUint8(),r.push(e>>>1&7),e=i.readUint16(),r.push(e>>>1),e=i.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2];let a=[];e=i.readUint8(),a.push(e>>>1&7),e=i.readUint16(),a.push(e>>>1),e=i.readUint16(),a.push(e>>>1),t.dts=a[0]<<30|a[1]<<15|a[2],s-=10}if(1===t.escrFlag){let r=[],a=[];e=i.readUint8(),r.push(e>>>3&7),r.push(3&e),e=i.readUint16(),r.push(e>>>13),r.push(3&e),e=i.readUint16(),r.push(e>>>13),a.push(3&e),e=i.readUint8(),a.push(e>>>1),t.escr=300*(r[0]<<30|r[1]<<28|r[2]<<15|r[3]<<13|r[4])+(a[0]<<7|a[1]),s-=6}if(1===t.esRateFlag&&(e=i.readUint24(),t.esRate=e>>>1&4194303,s-=3),1===t.dsmFlag)throw new Error("not support DSM_trick_mode");if(1===t.additionalFlag&&(e=i.readUint8(),t.additionalCopyInfo=127&e,s-=1),1===t.crcFlag&&(t.pesCRC=i.readUint16(),s-=2),1===t.extensionFlag)throw new Error("not support extension");s>0&&i.skip(s),t.ES=d.ES(i,t.type)}}return t}static ES(e,t){let i,s={};if("video"===t){if(1!==(i=e.readUint32())&&(e.back(4),1!==(i=e.readUint24())))throw new Error("h264 nal header parse failed");e.skip(2),s.buffer=e}else{if("audio"!==t)throw new Error(`ES ${t} is not supported`);{if((i=e.readUint16())>>>4!=4095)throw new Error("aac ES parse Error");const t=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];s.id=0==(i>>>3&1)?"MPEG-4":"MPEG-2",s.layer=i>>>1&3,s.absent=1&i,i=e.readUint16(),s.audioObjectType=1+(i>>>14&3),s.profile=s.audioObjectType-1,s.frequencyIndex=i>>>10&15,s.frequence=t[s.frequencyIndex],s.channel=i>>>6&7,s.frameLength=(3&i)<<11|e.readUint16()>>>5,d.getAudioConfig(s),e.skip(1),s.buffer=e}}return s}static TSDT(e,t,i){t.payload={}}static CAT(e,t,i){let s={};s.tableID=e.readUint8();let r=e.readUint16();s.sectionIndicator=r>>>7,s.sectionLength=4095&r,e.skip(2),r=e.readUint8(),s.version=r>>>3,s.currentNextIndicator=1&r,s.sectionNumber=e.readUint8(),s.lastSectionNumber=e.readUint8();let a=(this.sectionLength-9)/4,n=[];for(let e=0;e<a;e++)n.push({});s.crc32=e.readUint32(),t.payload=s}static getAudioConfig(e){let t,i,s=navigator.userAgent.toLowerCase();/firefox/i.test(s)?e.frequencyIndex>=6?(e.audioObjectType=5,t=new Array(4),i=e.frequencyIndex-3):(e.audioObjectType=2,t=new Array(2),i=e.frequencyIndex):-1!==s.indexOf("android")?(e.audioObjectType=2,t=new Array(2),i=e.frequencyIndex):(e.audioObjectType=5,t=new Array(4),e.frequencyIndex>=6?i=e.frequencyIndex-3:(1===e.channel&&(e.audioObjectType=2,t=new Array(2)),i=e.frequencyIndex)),t[0]=e.audioObjectType<<3,t[0]|=(14&e.frequencyIndex)>>1,t[1]=(1&e.frequencyIndex)<<7,t[1]|=e.channel<<3,5===e.audioObjectType&&(t[1]|=(14&i)>>1,t[2]=(1&i)<<7,t[2]|=8,t[3]=0),e.audioConfig=t}get inputBuffer(){return this._context.getInstance(this.configs.inputbuffer)}get _tracks(){return this._context.getInstance("TRACKS")}}t.default=d},"../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
      !*** ../xgplayer-demux/src/hls/playlist.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=e.autoclear||!1}get list(){return this._list}set baseURL(e){this.baseURL!==e&&(this.clear(),this._baseURL=e)}get baseURL(){return this._baseURL}push(e,t,i){this._ts[e]||(this._ts[e]={duration:t,downloaded:!1,downloading:!1,start:this.duration,discontinue:!!i},this._list[this.duration]=e,this.duration+=t,this.fragLength+=1)}deleteFrag(e){this._ts[e]&&(this._ts[e].start>this._lastget.time&&(this._lastget={duration:this._ts[e].duration,time:this._ts[e].start,downloaded:!1,downloading:!1,url:e}),delete this._list[this._ts[e].start],delete this._ts[e],this.fragLength-=1)}pushM3U8(e,t){if(!e)throw new Error("No m3u8 data received.");if(this.version=e.version,this.targetduration=e.targetduration,e.encrypt&&!this.encrypt&&(this.encrypt=e.encrypt),!(e.sequence>this.sequence))throw new Error(`Old m3u8 file received, ${e.sequence}`);{this.sequence=e.sequence;let i=[];for(let t=0;t<e.frags.length;t++){let s=e.frags[t];this._ts[s.url]||(i.push(s.url),this.push(s.url,s.duration,s.discontinue))}if(i.length<1)throw new Error("Can not read ts file list.");if(t){let e=this.getTsList();for(let t=0;t<e.length;t++)i.indexOf(e[t])<0&&this.deleteFrag(e[t])}}}getTsList(){return Object.keys(this._ts)}downloaded(e,t){let i=this._ts[e];i&&(i.downloaded=t)}downloading(e,t){let i=this._ts[e];i&&(i.downloading=t)}getTsByName(e){return this._ts[e]}getTs(e){let t,i=Object.keys(this._list);if(void 0===e&&(e=this._lastget?this._lastget.time+this._lastget.duration:0),!(i.length<1||e>=this.duration)){i.sort((e,t)=>parseFloat(e)-parseFloat(t));for(let s=0;s<i.length&&e>=parseInt(i[s]);s++){let e=this._list[i[s]];t={url:e,downloaded:this._ts[e].downloaded,downloading:this._ts[e].downloading,time:parseInt(i[s]),duration:parseInt(this._ts[e].duration)},this.autoclear&&(delete this._ts[this._lastget.url],delete this._list[this._lastget.time]),this._lastget=t}return t}}clear(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0}clearDownloaded(){for(let e=0,t=Object.keys(this._ts).length;e<t;e++){let t=this._ts[Object.keys(this._ts)[e]];t.downloaded=!1,t.downloading=!1}}destroy(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=!1}}},"../xgplayer-loader/index.js":
/*!***********************************!*\
      !*** ../xgplayer-loader/index.js ***!
      \***********************************/
/*! no static exports found */function(e,t,i){e.exports={FetchLoader:i(/*! ./src/fetch-loader */"../xgplayer-loader/src/fetch-loader.js").default}},"../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
      !*** ../xgplayer-loader/src/fetch-loader.js ***!
      \**********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js").EVENTS.LOADER_EVENTS;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this._destroyed=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(s.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let i=this;this.url=e,this._canceled=!1;let r=this.getParams(t);return i.loading=!0,fetch(this.url,r).then((function(e){if(e.ok)return i.status=e.status,i._onFetchResponse(e);i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,new Error("invalid response."))})).catch((function(e){throw i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,e),new Error(e.message)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);this._loaderTaskNo++;let r=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case 2:e.json().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 1:e.text().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 3:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(new Uint8Array(e)),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 0:default:return this._onReader(e.body.getReader(),r)}}_onReader(e,t){let i=this._context.getInstance(this.buffer);if(!i&&this._reader||this._destroyed)try{this._reader.cancel()}catch(e){}if(this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then((function(a){if(a.done)return r.loading=!1,r.status=0,void r.emit(s.LOADER_COMPLETE,i);if(!r._canceled&&!r._destroyed)return i.push(a.value),r.emit(s.LOADER_DATALOADED,i),r._onReader(e,t);if(r._reader)try{r._reader.cancel()}catch(e){}})).catch(e=>{r.loading=!1,r.emit(s.LOADER_ERROR,r.TAG,e)})}getParams(e){let t=Object.assign({},e),i=new Headers,s={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}if("object"==typeof t.headers){let e=t.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(s.mode="same-origin"),t.withCredentials&&(s.credentials="include"),s}cancel(){if(this._reader){try{this._reader.cancel()}catch(e){}this._reader=null,this.loading=!1,this._canceled=!0}}destroy(){this._destroyed=!0,this.cancel()}}},"../xgplayer-remux/index.js":
/*!**********************************!*\
      !*** ../xgplayer-remux/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Mp4Remuxer:i(/*! ./src/mp4 */"../xgplayer-remux/src/mp4/index.js").default}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
      !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");class r{static size(e){return s.Buffer.writeUint32(e)}static initBox(e,t,...i){const a=new s.Buffer;return a.write(r.size(e),r.type(t),...i),a.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let i,s=8,a=r.mvhd(t.duration,t.timescale);i="video"===e?r.videoTrak(t):r.audioTrak(t);let n=r.mvex(t.duration,t.timescale||1e3,t.id);return[a,i,n].forEach(e=>{s+=e.byteLength}),r.initBox(s,"moov",a,i,n)}static mvhd(e,t=1e3){let i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),s=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static audioTrak(e){let t=8,i=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),s=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static tkhd(e){let t=e.id,i=e.duration,s=e.width,a=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>>8&255,255&s,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new s.Buffer,i=e.duration,a=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=r.mdhd(e.timescale,e.duration),s=r.hdlr(e.type),a=r.minf(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",i,s,a)}static mdhd(e=1e3,t){let i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+i.byteLength,"mdhd",r.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?r.vmhd():r.smhd(),s=r.dinf(),a=r.stbl(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",i,s,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new s.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=r.stsd(e),s=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[i,s,a,n,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",i,s,a,n,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=r.esds(e.config);return r.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(e=[43,146,8,0]){const t=e.length;let i=new s.Buffer,a=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(r.size(8+a.byteLength),r.type("esds"),a),i.buffer}static avc1(e){let t=new s.Buffer,i=e.width,a=e.height,n=e.parRatio.height,o=e.parRatio.width,d=e.avcc,l=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),h=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),u=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+l.byteLength+d.byteLength+h.byteLength),r.type("avc1"),l,r.size(8+d.byteLength),r.type("avcC"),d,r.size(20),r.type("btrt"),h,r.size(16),r.type("pasp"),u),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e,t=1e3,i){let a=new s.Buffer,n=s.Buffer.writeUint32(e);return a.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),n,r.trex(i)),a.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=r.mfhd(),s=r.traf(e);return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",i,s)}static mfhd(){let e=s.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,i=r.tfhd(e.id),s=r.tfdt(e.time),a=r.sdtp(e),n=r.trun(e,a.byteLength);return[i,s,n,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",i,s,n,a)}static tfhd(e){let t=s.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),s.Buffer.writeUint32(e))}static trun(e,t){let i=new s.Buffer,a=s.Buffer.writeUint32(e.samples.length),n=s.Buffer.writeUint32(92+16*e.samples.length+t);return i.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new s.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,s=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([s]))}),t.buffer}static mdat(e){let t=new s.Buffer,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(r.size(i),r.type("mdat"));let a=new Uint8Array(i),n=0;return a.set(t.buffer,n),n+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{a.set(e,n),n+=e.byteLength})}),a}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
      !*** ../xgplayer-remux/src/mp4/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=(s=i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"))&&s.__esModule?s:{default:s};const n=r.EVENTS.REMUX_EVENTS;class o{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e,this.isFirstVideo=!0,this.isFirstAudio=!0,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(n.REMUX_MEDIA,this.remux.bind(this)),this.on(n.REMUX_METADATA,this.onMetaDataReady.bind(this)),this.on(n.DETECT_CHANGE_STREAM,this.resetDtsBase.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}resetDtsBase(){this._dtsBase=0,this._dtsBaseInited=!1}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t;if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");t=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");t=e}let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.mimetype=t.meta.codec,s.init=this.remuxInitSegment(e,t.meta),this.emit(n.INIT_SEGMENT,e)}remuxInitSegment(e,t){let i=new r.Buffer,s=a.default.ftyp(),n=a.default.moov({type:e,meta:t});return i.write(s,n),i}calcDtsBase(e,t){if(!e.samples.length&&!t.samples.length)return;let i=1/0,s=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(s=t.samples[0].dts),this._dtsBase=Math.min(i,s),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let{samples:i}=t,s=-1,o=null;const d=[],l={samples:[]};for(;i.length;){const e=i.shift(),{isKeyframe:t,options:r}=e;if(!this.isFirstAudio&&r&&r.meta){o=this.remuxInitSegment("video",r.meta),r.meta=null,i.unshift(e),r.isContinue||this.resetDtsBase();break}let a,h,u=e.dts-this._dtsBase;-1===s&&(s=u),void 0!==e.pts&&(a=(h=e.pts-this._dtsBase)-u),void 0!==e.cts&&(h=e.cts+u,a=e.cts);let c={buffer:[],size:0};l.samples.push(c),c.buffer.push(e.data),c.size+=e.data.byteLength;let f=0;f=i.length>=1?i[0].dts-this._dtsBase-u:d.length>=1?d[d.length-1].duration:this.videoMeta.refSampleDuration,this.videoAllDuration+=f,d.push({dts:u,cts:a,pts:h,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:f,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:u,type:"video"}),t&&this.emit(n.RANDOM_ACCESS_POINT,h)}let h=new r.Buffer;if(d.length){const e=a.default.moof({id:t.meta.id,time:s,samples:d}),i=a.default.mdat(l);h.write(e,i),this.writeToSource("video",h)}if(o&&(this.writeToSource("video",o),i.length))return t.samples=i,this._remuxVideo(t);this.isFirstVideo=!1,this.emit(n.MEDIA_SEGMENT,"video");const u=d[d.length-1];this._videoNextDts=u.dts+u.duration,t.samples=[],t.length=0}_remuxAudio(e){const{samples:t}=e;let i=-1,s=[],o=null;const d={samples:[]};if(!t||!t.length)return;let l=!1;for(;t.length;){let e=t.shift();const{data:r,options:a}=e;if(!this.isFirstAudio&&a&&a.meta){o=this.remuxInitSegment("audio",a.meta),a.meta=null,t.unshift(e),a.isContinue||this.resetDtsBase();break}let n=e.dts-this._dtsBase;const h=n;l||(i=n,l=!0);let u=0;u=this.audioMeta.refSampleDurationFixed?this.audioMeta.refSampleDurationFixed:t.length>=1?t[0].dts-this._dtsBase-n:s.length>=1?s[s.length-1].duration:this.audioMeta.refSampleDuration,this.audioAllDuration+=u;const c={dts:n,pts:n,cts:0,size:r.byteLength,duration:e.duration?e.duration:u,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:h,type:"audio"};let f={buffer:[],size:0};f.buffer.push(r),f.size+=r.byteLength,d.samples.push(f),s.push(c)}const h=new r.Buffer;if(s.length){const t=a.default.moof({id:e.meta.id,time:i,samples:s}),r=a.default.mdat(d);h.write(t,r),this.writeToSource("audio",h)}if(o&&(this.writeToSource("audio",o),t.length))return e.samples=t,this._remuxAudio(e);this.isFirstAudio=!1,this.emit(n.MEDIA_SEGMENT,"audio",h);const u=s[s.length-1];this._videoNextDts=u.dts+u.duration,e.samples=[],e.length=0}writeToSource(e,t){let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.data.push(t)}initSilentAudio(e,t){const i=o.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=o},"../xgplayer-utils/index.js":
/*!**********************************!*\
      !*** ../xgplayer-utils/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Context:i(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:i(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:i(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:i(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:i(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:i(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,MediaInfo:i(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:i(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:i(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:i(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:i(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:i(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:i(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default,Crypto:i(/*! ./src/crypto */"../xgplayer-utils/src/crypto/index.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
      !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
      \***********************************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,s=Array(i>1?i-1:0),r=1;r<i;r++)s[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var d,l=s[Symbol.iterator]();!(a=(d=l.next()).done);a=!0){var h=d.value;t+=h.length}}catch(e){n=!0,o=e}finally{try{!a&&l.return&&l.return()}finally{if(n)throw o}}var u=new e(t),c=0,f=!0,p=!1,m=void 0;try{for(var g,_=s[Symbol.iterator]();!(f=(g=_.next()).done);f=!0){var y=g.value;u.set(y,c),c+=y.length}}catch(e){p=!0,m=e}finally{try{!f&&_.return&&_.return()}finally{if(p)throw m}}return u}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
      !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
      \**********************************************************************/
/*! no static exports found */function(e,t,i){var s,r=(s=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"))&&s.__esModule?s:{default:s};e.exports=r.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
      !*** ../xgplayer-utils/src/constants/events.js ***!
      \*************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT",DETECT_CHANGE_STREAM:"DETECT_CHANGE_STREAM",RANDOM_ACCESS_POINT:"RANDOM_ACCESS_POINT"},n={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o={RETRY_TIME_EXCEEDED:"RETRY_TIME_EXCEEDED"},d=Object.assign({},s,r,a,n,o),l=[],h=[];for(let e in d)d.hasOwnProperty(e)&&l.push(d[e]);for(let e in d)d.hasOwnProperty(e)&&h.push(d[e]);t.default={ALLEVENTS:d,HLS_EVENTS:o,REMUX_EVENTS:a,DEMUX_EVENTS:r,MSE_EVENTS:n,LOADER_EVENTS:s,FlvAllowedEvents:l,HlsAllowedEvents:h,CRYTO_EVENTS:{START_DECRYPT:"START_DECRYPT",DECRYPTED:"DECRYPTED"}}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
      !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
      \**********************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
      !*** ../xgplayer-utils/src/context.js ***!
      \****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"))&&s.__esModule?s:{default:s},a=i(/*! events */"../../node_modules/events/events.js");const n="__TO__";t.default=class{constructor(e=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new r.default,this.allowedEvents=e,this._hooks={}}getInstance(e){return this._instanceMap[e]||null}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,s=this._isMessageNameValid.bind(this),r=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.onceListeners={},this.TAG=e,this._context=r}on(t,r){return s(t),this.listeners[t]?this.listeners[t].push(r):this.listeners[t]=[r],i.on(`${t}${n}${e}`,r),i.on(t,r)}before(e,t){s(e),r._hooks[e]?r._hooks[e].push(t):r._hooks[e]=[t]}once(t,r){return s(t),this.onceListeners[t]?this.onceListeners[t].push(r):this.onceListeners[t]=[r],i.once(`${t}${n}${e}`,r),i.once(t,r)}emit(e,...t){s(e);const a=r._hooks?r._hooks[e]:null;if(a)for(let e=0,t=a.length;e<t;e++)(0,a[e])();return i.emit(e,...t)}emitTo(e,t,...r){return s(t),i.emit(`${t}${n}${e}`,...r)}off(e,t){return s(e),i.off(e,t)}removeListeners(){const t=Object.prototype.hasOwnProperty.bind(this.listeners);for(let s in this.listeners)if(t(s)){const t=this.listeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}for(let s in this.onceListeners)if(t(s)){const t=this.onceListeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}}destroy(){if(this.removeListeners(),this.listeners={},delete r._instanceMap[e],super.destroy)return super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this._hooks=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/src/crypto/index.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/crypto/index.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){var s;Object.defineProperty(t,"__esModule",{value:!0});const r=((s=i(/*! ../constants/events */"../xgplayer-utils/src/constants/events.js"))&&s.__esModule?s:{default:s}).default.CRYTO_EVENTS;t.default=class{constructor(e){this.inputBuffer=e.inputbuffer,this.outputBuffer=e.outputbuffer,this.key=e.key,this.iv=e.iv,this.method=e.method,this.crypto=window.crypto||window.msCrypto}init(){this.on(r.START_DECRYPT,this.decript.bind(this))}decript(){this.aeskey?this.decriptData():this.crypto.subtle.importKey("raw",this.key.buffer,{name:"AES-CBC"},!1,["encrypt","decrypt"]).then(e=>{this.aeskey=e,this.decriptData()})}decriptData(){let e=this._context.getInstance(this.inputBuffer),t=this._context.getInstance(this.outputBuffer),i=e.shift();i&&this.crypto.subtle.decrypt({name:"AES-CBC",iv:this.iv.buffer},this.aeskey,i).then(e=>{t.push(new Uint8Array(e)),this.emit(r.DECRYPTED),this.decriptData(i)})}}},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
      !*** ../xgplayer-utils/src/env/isle.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=s},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
      !*** ../xgplayer-utils/src/env/sniffer.js ***!
      \********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,s=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),a=/(?:iPad|PlayBook)/.test(e)||s&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),n=/(?:iPhone)/.test(e)&&!a;return{isTablet:a,isPhone:n,isAndroid:s,isPc:!n&&!s&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:r}},get isLe(){return s}};t.default=r},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
      !*** ../xgplayer-utils/src/env/utf8.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static decode(e){const t=[],i=e;let r=0;const a=e.length;for(;r<a;)if(i[r]<128)t.push(String.fromCharCode(i[r])),++r;else{if(i[r]<192);else if(i[r]<224){if(s._checkContinuation(i,r,1)){const e=(31&i[r])<<6|63&i[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(i[r]<240){if(s._checkContinuation(i,r,2)){const e=(15&i[r])<<12|(63&i[r+1])<<6|63&i[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(i[r]<248&&s._checkContinuation(i,r,3)){let e=(7&i[r])<<18|(63&i[r+1])<<12|(63&i[r+2])<<6|63&i[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,i){let s=e;if(t+i<s.length){for(;i--;)if(128!=(192&s[++t]))return!1;return!0}return!1}}t.default=s},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
      !*** ../xgplayer-utils/src/models/media-info.js ***!
      \**************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return s(e)}static isVideoReady(e){return!e.hasVideo||s(e.video)}static isAudioReady(e){return!e.hasAudio||s(e.video)}}t.default=r},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
      !*** ../xgplayer-utils/src/models/media-sample.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=s},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
      !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
      \**********************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,s=0,r=0,a=i,n=0;if(e<t[0].originDts)return-1;for(;r<=a;){if((s=r+Math.floor((a-r)/2))===i||e>t[s].lastSample.originDts&&e<t[s+1].originDts){n=s;break}t[s].originDts<e?r=s+1:a=s-1}return n}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,s=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?s=i+1:t.length>0&&(s=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=s,this._list.splice(s,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
      !*** ../xgplayer-utils/src/models/media-segment.js ***!
      \*****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
      !*** ../xgplayer-utils/src/models/track-meta.js ***!
      \**************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}destroy(){this.init=null}},t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}destroy(){this.init=null,this.sps=null,this.pps=null}}},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
      !*** ../xgplayer-utils/src/models/track-sample.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=s;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
      !*** ../xgplayer-utils/src/mse/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1,this.onSourceOpen=this.onSourceOpen.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onUpdateEnd=this.onUpdateEnd.bind(this),this.onWaiting=this.onWaiting.bind(this)}init(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate),this.container.addEventListener("waiting",this.onWaiting)}onTimeUpdate(){this.emit("TIME_UPDATE",this.container)}onWaiting(){this.emit("WAITING",this.container)}onSourceOpen(){this.addSourceBuffers()}onUpdateEnd(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),i=this._context.getInstance("TRACKS");t=t.sources;let s=!1;for(let r=0,a=Object.keys(t).length;r<a;r++){let a=Object.keys(t)[r];if("audio"===a?e=i.audioTrack:"video"===a&&(e=i.videoTrack),e){let i="audio"===a?21:40;e.meta&&e.meta.refSampleDuration&&(i=e.meta.refSampleDuration),t[a].data.length>=this.preloadTime/i&&(s=!0)}}if(s){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,i=Object.keys(t).length;e<i;e++){let i=Object.keys(t)[e],s=t[i],r="video"===i?"video/mp4;codecs="+s.mimetype:"audio/mp4;codecs="+s.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[i]=a,a.addEventListener("updateend",this.onUpdateEnd),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],s=this.sourceBuffers[i];if(!s.updating){let t=e.sources[i];if(t&&!t.inited)s.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&s.appendBuffer(e.buffer.buffer)}}}}endOfStream(){const{readyState:e,activeSourceBuffers:t}=this.mediaSource;if("open"===e&&0===t.length)try{this.mediaSource.endOfStream()}catch(e){}}remove(e,t=0){for(let i=0;i<Object.keys(this.sourceBuffers).length;i++){let s=this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];s.updating||s.remove(t,e)}}removeBuffers(){const e=[];for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i,r=this.sourceBuffers[Object.keys(this.sourceBuffers)[t]];r.removeEventListener("updateend",this.onUpdateEnd),i=r.updating?new Promise(e=>{const t=function(){let i=3;const a=()=>{r.updating?i>0?(setTimeout(a,200),i--):e():(s.clearBuffer(r),r.addEventListener("updateend",()=>{e()}))};setTimeout(a,200),r.removeEventListener("updateend",t)};r.addEventListener("updateend",t)}):new Promise(e=>{s.clearBuffer(r),r.addEventListener("updateend",()=>{r.buffered.length&&console.log(r.buffered.start(0),`  ${r.buffered.end(0)}`),e()})}),e.push(i)}return Promise.all(e)}destroy(){return this.removeBuffers().then(()=>{for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let t=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];this.mediaSource.removeSourceBuffer(t),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[e]]}this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen),this.endOfStream(),window.URL.revokeObjectURL(this.url),this.url=null,this.configs={},this.container=null,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=1})}static clearBuffer(e){const t=e.buffered;let i=.1;for(let e=0,s=t.length;e<s;e++)i=t.end(e);try{e.remove(0,i)}catch(e){}}}t.default=s},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/write/buffer.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"))&&s.__esModule?s:{default:s};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,r.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/write/stream.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),i=e%4;for(let e=0;e<t;e++)s.readByte(this.dataview,4);i>0&&s.readByte(this.dataview,i)}static readByte(e,t,i){let s;switch(t){case 1:s=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:s=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");s=e.getUint8(e.position)<<16,s|=e.getUint8(e.position+1)<<8,s|=e.getUint8(e.position+2);break;case 4:s=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");s=e.getUint32(e.position)<<32,s|=e.getUint32(e.position+4);break;default:s=""}return e.position+=t,s}readUint8(){return s.readByte(this.dataview,1)}readUint16(){return s.readByte(this.dataview,2)}readUint24(){return s.readByte(this.dataview,3)}readUint32(){return s.readByte(this.dataview,4)}readUint64(){return s.readByte(this.dataview,8)}readInt8(){return s.readByte(this.dataview,1,!0)}readInt16(){return s.readByte(this.dataview,2,!0)}readInt32(){return s.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=s},"./src/flv-live.js":
/*!*************************!*\
      !*** ./src/flv-live.js ***!
      \*************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=h(i(/*! xgplayer-remux */"../xgplayer-remux/index.js")),r=i(/*! xgplayer-loader */"../xgplayer-loader/index.js"),a=i(/*! xgplayer-demux */"../xgplayer-demux/index.js"),n=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),d=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),l=h(i(/*! xgplayer */"xgplayer"));function h(e){return e&&e.__esModule?e:{default:e}}const u=o.EVENTS.REMUX_EVENTS,c=o.EVENTS.DEMUX_EVENTS,f=o.EVENTS.LOADER_EVENTS,p=o.EVENTS.MSE_EVENTS;class m{warn(){}}t.default=class{constructor(e){this.TAG="FLVController",this._player=e,this.state={initSegmentArrived:!1,randomAccessPoints:[]},this.bufferClearTimer=null}init(){this._context.registry("FETCH_LOADER",r.FetchLoader),this._context.registry("LOADER_BUFFER",n.XgBuffer),this._context.registry("FLV_DEMUXER",a.FlvDemuxer),this._context.registry("TRACKS",n.Tracks),this._context.registry("MP4_REMUXER",s.default.Mp4Remuxer),this._context.registry("PRE_SOURCE_BUFFER",n.PreSource),!1!==this._player.config.compatibility&&this._context.registry("COMPATIBILITY",d.Compatibility),this._context.registry("LOGGER",m),this.mse=this._context.registry("MSE",o.Mse)({container:this._player.video}),this._handleTimeUpdate=this._handleTimeUpdate.bind(this),this.initListeners()}initListeners(){this.on(f.LOADER_DATALOADED,this._handleLoaderDataLoaded.bind(this)),this.on(f.LOADER_ERROR,this._handleNetworkError.bind(this)),this.on(c.MEDIA_INFO,this._handleMediaInfo.bind(this)),this.on(c.METADATA_PARSED,this._handleMetadataParsed.bind(this)),this.on(c.DEMUX_COMPLETE,this._handleDemuxComplete.bind(this)),this.on(c.DEMUX_ERROR,this._handleDemuxError.bind(this)),this.on(u.INIT_SEGMENT,this._handleAppendInitSegment.bind(this)),this.on(u.MEDIA_SEGMENT,this._handleMediaSegment.bind(this)),this.on(u.RANDOM_ACCESS_POINT,this._handleAddRAP.bind(this)),this.on(p.SOURCE_UPDATE_END,this._handleSourceUpdateEnd.bind(this)),this._player.on("timeupdate",this._handleTimeUpdate)}_handleMediaInfo(){this._context.mediaInfo||this.emit(c.DEMUX_ERROR,new Error("failed to get mediainfo"))}_handleLoaderDataLoaded(){this.emitTo("FLV_DEMUXER",c.DEMUX_START)}_handleMetadataParsed(e){this.emit(u.REMUX_METADATA,e)}_handleDemuxComplete(){this.emit(u.REMUX_MEDIA)}_handleAppendInitSegment(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}_handleMediaSegment(){this.mse.addSourceBuffers(),this.mse.doAppend()}_handleSourceUpdateEnd(){const e=this._player.currentTime,t=this._player.video,i=this._player.config.preloadTime||5,{length:s}=t.buffered;if(0===s)return;const r=t.buffered.end(s-1);r-e>2*i&&(this._player.currentTime=r-i),this.mse.doAppend()}_handleTimeUpdate(){const e=this._player.currentTime;let t=this._player.video.buffered;if(!t||!t.length)return;const i=this._player.getBufferedRange()[0];if(e-i>10){if(this.bufferClearTimer||!this.state.randomAccessPoints.length)return;let t=1/0;for(let i=0;i<this.state.randomAccessPoints.length;i++){const s=Math.ceil(this.state.randomAccessPoints[i]/1e3);if(s>e-2)break;t=s}this.mse.remove(Math.min(t,e-3),i),this.bufferClearTimer=setTimeout(()=>{this.bufferClearTimer=null},5e3)}}_handleNetworkError(e,t){this._player.emit("error",new l.default.Errors("network",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,!0)}_handleDemuxError(e,t,i){void 0===i&&(i=!1),this._player.emit("error",new l.default.Errors("parse",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,i)}_handleAddRAP(e){this.state.randomAccessPoints&&this.state.randomAccessPoints.push(e)}_onError(e,t,i,s){let r={errorType:e,errorDetails:`[${t}]: ${i.message}`,errorFatal:s||!1};this._player.emit("FLV_ERROR",r)}seek(){this.state.initSegmentArrived||this.loadData()}loadData(){this.emit(f.LADER_START,this._player.config.url)}pause(){const e=this._context.getInstance("FETCH_LOADER");e&&e.cancel()}destroy(){this._player.off("timeupdate",this._handleTimeUpdate),this._player=null,this.mse=null,this.state.randomAccessPoints=[]}}},"./src/index.js":
/*!**********************!*\
      !*** ./src/index.js ***!
      \**********************/
/*! no static exports found */function(e,t,i){var s=n(i(/*! xgplayer */"xgplayer")),r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=n(i(/*! ./flv-live */"./src/flv-live.js"));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.FlvAllowedEvents;class d extends s.default{constructor(e){super(e),this.context=new r.Context(o),this.initEvents(),this.loaderCompleteTimer=null}start(){this.initFlv(),this.context.init(),super.start(this.flv.mse.url)}initFlvEvents(e){const t=this;e.once(r.EVENTS.REMUX_EVENTS.INIT_SEGMENT,()=>{if(s.default.util.addClass(t.root,"xgplayer-is-live"),!s.default.util.findDom(this.root,"xg-live")){const e=s.default.util.createDom("xg-live","正在直播",{},"xgplayer-live");t.controls.appendChild(e)}}),e.once(r.EVENTS.LOADER_EVENTS.LOADER_COMPLETE,()=>{t.paused?t.emit("ended"):this.loaderCompleteTimer=setInterval(()=>{const e=t.getBufferedRange()[1];Math.abs(t.currentTime-e)<.5&&(t.emit("ended"),window.clearInterval(this.loaderCompleteTimer))},200)})}initEvents(){this.on("timeupdate",()=>{this.loadData()}),this.on("seeking",()=>{const e=this.currentTime,t=this.getBufferedRange();(e>t[1]||e<t[0])&&this.flv.seek(this.currentTime)})}initFlv(){const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.initFlvEvents(e),this.flv=e}play(){this._hasStart?this._destroy().then(()=>{this.context=new r.Context(o);const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.initFlvEvents(e),this.flv=e,this.context.init(),super.start(e.mse.url),super.play()}):super.play()}pause(){super.pause(),this.flv&&this.flv.pause()}loadData(e=this.currentTime){this.flv&&this.flv.seek(e)}destroy(){this._destroy().then(()=>{super.destroy()})}_destroy(){return this.flv.mse.destroy().then(()=>{this.context.destroy(),this.flv=null,this.context=null,this.loaderCompleteTimer&&window.clearInterval(this.loaderCompleteTimer)})}get src(){return this.currentSrc}set src(e){this.player.config.url=e,this.paused?this.start(e):(this.pause(),this.once("pause",()=>{this.start(e)}),this.once("canplay",()=>{this.play()})),this.once("canplay",()=>{this.currentTime=0})}}e.exports=d},0:
/*!****************************!*\
      !*** multi ./src/index.js ***!
      \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!***************************!*\
      !*** external "xgplayer" ***!
      \***************************/
/*! no static exports found */function(e,t){e.exports=s}}))},"../xgplayer-flv-vod/dist/index.js":
/*!***************************!*\
  !*** .-vod/dist/index.js ***!
  \***************************/
/*! no static exports found */function(e,t,i){"use strict";var s;window,e.exports=(s=i(/*! xgplayer */"xgplayer"),function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=11)}([function(e,t,i){e.exports={Context:i(13).default,EVENTS:i(4).default,WORKER_COMMANDS:i(15).default,sniffer:i(16).default,isLe:i(17).default,UTF8:i(18).default,MediaInfo:i(3).default,MediaSample:i(19).default,MediaSegment:i(20).default,MediaSegmentList:i(21).default,AudioTrackMeta:i(5).AudioTrackMeta,VideoTrackMeta:i(5).VideoTrackMeta,AudioTrackSample:i(6).AudioTrackSample,VideoTrackSample:i(6).VideoTrackSample,Mse:i(22).default,Stream:i(23).default,Buffer:i(24).default,Crypto:i(27).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=s,t.AudioTrack=class extends s{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}},t.VideoTrack=class extends s{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}},t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}destroy(){this.audioTrack=null,this.videoTrack=null}}},function(e,t){e.exports=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return s(e)}static isVideoReady(e){return!e.hasVideo||s(e.video)}static isAudioReady(e){return!e.hasAudio||s(e.video)}}t.default=r},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT",DETECT_CHANGE_STREAM:"DETECT_CHANGE_STREAM"},n={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o={RETRY_TIME_EXCEEDED:"RETRY_TIME_EXCEEDED"},d=Object.assign({},s,r,a,n,o),l=[],h=[];for(let e in d)d.hasOwnProperty(e)&&l.push(d[e]);for(let e in d)d.hasOwnProperty(e)&&h.push(d[e]);t.default={ALLEVENTS:d,HLS_EVENTS:o,REMUX_EVENTS:a,DEMUX_EVENTS:r,MSE_EVENTS:n,LOADER_EVENTS:s,FlvAllowedEvents:l,HlsAllowedEvents:h,CRYTO_EVENTS:{START_DECRYPT:"START_DECRYPT",DECRYPTED:"DECRYPTED"}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}destroy(){this.init=null}},t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}destroy(){this.init=null,this.sps=null,this.pps=null}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=s;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},function(e,t,i){e.exports={Nalunit:i(30).default,SpsParser:i(8).default,Compatibility:i(32).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(31))&&s.__esModule?s:{default:s};class a{static _ebsp2rbsp(e){let t=e,i=t.byteLength,s=new Uint8Array(i),r=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(s[r]=t[e],r++);return new Uint8Array(s.buffer,0,r)}static parseSPS(e){let t=a._ebsp2rbsp(e),i=new r.default(t);i.readByte();let s=i.readByte();i.readByte();let n=i.readByte();i.readUEG();let o=a.getProfileString(s),d=a.getLevelString(n),l=1,h=420,u=8;if((100===s||110===s||122===s||244===s||44===s||83===s||86===s||118===s||128===s||138===s||144===s)&&(3===(l=i.readUEG())&&i.readBits(1),l<=3&&(h=[0,420,422,444][l]),u=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==l?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?a._skipScalingList(i,16):a._skipScalingList(i,64))}i.readUEG();let c=i.readUEG();if(0===c)i.readUEG();else if(1===c){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let f=i.readUEG(),p=i.readUEG(),m=i.readBits(1);0===m&&i.readBits(1),i.readBits(1);let g=0,_=0,y=0,E=0;i.readBool()&&(g=i.readUEG(),_=i.readUEG(),y=i.readUEG(),E=i.readUEG());let v=1,A=1,S=0,b=!0,T=0,x=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],s=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(v=t[e-1],A=s[e-1]):255===e&&(v=i.readByte()<<8|i.readByte(),A=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);b=i.readBool(),S=(T=t)/(x=2*e)}}let w=1;1===v&&1===A||(w=v/A);let D=0,R=0;0===l?(D=1,R=2-m):(D=3===l?1:2,R=(1===l?2:1)*(2-m));let L=16*(f+1),O=16*(p+1)*(2-m);L-=(g+_)*D,O-=(y+E)*R;let M=Math.ceil(L*w);return i.destroy(),i=null,{profile_string:o,level_string:d,bit_depth:u,chroma_format:h,chroma_format_string:a.getChromaFormatString(h),frame_rate:{fixed:b,fps:S,fps_den:x,fps_num:T},par_ratio:{width:v,height:A},codec_size:{width:L,height:O},present_size:{width:M,height:O}}}static _skipScalingList(e,t){let i=8,s=8,r=0;for(let a=0;a<t;a++)0!==s&&(s=(i+(r=e.readSEG())+256)%256),i=0===s?i:s}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},t.frameRate=e.frame_rate;let i=t.frameRate.fps_den,s=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/s))}}t.default=a},function(e,t,i){e.exports={Track:i(1).default,Tracks:i(1).Tracks,AudioTrack:i(1).AudioTrack,VideoTrack:i(1).VideoTrack,XgBuffer:i(10).XgBuffer,RemuxBuffer:i(10).RemuxBuffer,PreSource:i(34).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let s=this.array[0].slice(this.offset,this.offset+e);t.set(s,i),this.offset+=e,this.length-=e,e=0;break}{let s=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=s,this.length-=s,e-=s}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,s=this.offset+e;for(;s<this.offset+t+e;)s<this.array[0].length?i=256*i+this.array[0][s]:this.array[1]&&(i=256*i+this.array[1][s-this.array[0].length]),s++;return i}},t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},function(e,t,i){e.exports=i(12)},function(e,t,i){var s=n(i(2)),r=i(0),a=n(i(28));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.FlvAllowedEvents,d=(e,t)=>{if(!e.config.isLive&&e.duration-e.currentTime<2){const i=e.getBufferedRange();e.currentTime-i[1]<.1&&(e.emit("ended"),t.mse.endOfStream())}};class l extends s.default{constructor(e){super(e),this.context=new r.Context(o),this.initEvents()}start(){const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.flv=e,this.context.init(),super.start(e.mse.url)}initEvents(){this.on("timeupdate",this.handleTimeUpdate.bind(this)),this.on("seeking",this.handleSeek.bind(this)),this.once("destroy",this._destroy.bind(this))}handleTimeUpdate(){this.loadData(),d(this,this.flv)}handleSeek(){const e=this.currentTime,t=this.getBufferedRange();(e>t[1]||e<t[0])&&this.flv.seek(this.currentTime)}_destroy(){this.context.destroy(),this.context=null,this.flv=null}loadData(e=this.currentTime){const t=this.getBufferedRange();t[1]-e<(this.config.preloadTime||15)-5&&this.flv.loadNext(t[1]+1)}get src(){return this.currentSrc}set src(e){this.player.config.url=e,this.paused?this.start(e):(this.pause(),this.once("pause",()=>{this.start(e)}),this.once("canplay",()=>{this.play()})),this.once("canplay",()=>{this.currentTime=0})}}e.exports=l},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(3))&&s.__esModule?s:{default:s},a=i(14);const n="__TO__";t.default=class{constructor(e=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new r.default,this.allowedEvents=e,this._hooks={}}getInstance(e){return this._instanceMap[e]||null}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,s=this._isMessageNameValid.bind(this),r=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.onceListeners={},this.TAG=e,this._context=r}on(t,r){return s(t),this.listeners[t]?this.listeners[t].push(r):this.listeners[t]=[r],i.on(`${t}${n}${e}`,r),i.on(t,r)}before(e,t){s(e),r._hooks[e]?r._hooks[e].push(t):r._hooks[e]=[t]}once(t,r){return s(t),this.onceListeners[t]?this.onceListeners[t].push(r):this.onceListeners[t]=[r],i.once(`${t}${n}${e}`,r),i.once(t,r)}emit(e,...t){s(e);const a=r._hooks?r._hooks[e]:null;if(a)for(let e=0,t=a.length;e<t;e++)(0,a[e])();return i.emit(e,...t)}emitTo(e,t,...r){return s(t),i.emit(`${t}${n}${e}`,...r)}off(e,t){return s(e),i.off(e,t)}removeListeners(){const t=Object.prototype.hasOwnProperty.bind(this.listeners);for(let s in this.listeners)if(t(s)){const t=this.listeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}for(let s in this.onceListeners)if(t(s)){const t=this.onceListeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}}destroy(){if(this.removeListeners(),this.listeners={},delete r._instanceMap[e],super.destroy)return super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this._hooks=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},function(e,t,i){var s,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};s=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var d=10;function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function h(e,t,i,s){var r,a,n,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),n=a[t]),void 0===n)n=a[t]=i,++e._eventsCount;else if("function"==typeof n?n=a[t]=s?[i,n]:[n,i]:s?n.unshift(i):n.push(i),(r=l(e))>0&&n.length>r&&!n.warned){n.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=t,d.count=n.length,o=d,console&&console.warn&&console.warn(o)}return e}function u(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function c(e,t,i){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=u.bind(s);return r.listener=i,s.wrapFn=r,r}function f(e,t,i){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):m(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function m(e,t){for(var i=new Array(t),s=0;s<t;++s)i[s]=e[s];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return d},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");d=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var s="error"===e,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var d=r[e];if(void 0===d)return!1;if("function"==typeof d)a(d,this,t);else{var l=d.length,h=m(d,l);for(i=0;i<l;++i)a(h[i],this,t)}return!0},o.prototype.addListener=function(e,t){return h(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return h(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,s,r,a,n;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(s=this._events))return this;if(void 0===(i=s[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(r=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){n=i[a].listener,r=a;break}if(r<0)return this;0===r?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,r),1===i.length&&(s[e]=i[0]),void 0!==s.removeListener&&this.emit("removeListener",e,n||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,i,s;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,a=Object.keys(i);for(s=0;s<a.length;++s)"removeListener"!==(r=a[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,s=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),a=/(?:iPad|PlayBook)/.test(e)||s&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),n=/(?:iPhone)/.test(e)&&!a;return{isTablet:a,isPhone:n,isAndroid:s,isPc:!n&&!s&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:r}},get isLe(){return s}};t.default=r},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static decode(e){const t=[],i=e;let r=0;const a=e.length;for(;r<a;)if(i[r]<128)t.push(String.fromCharCode(i[r])),++r;else{if(i[r]<192);else if(i[r]<224){if(s._checkContinuation(i,r,1)){const e=(31&i[r])<<6|63&i[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(i[r]<240){if(s._checkContinuation(i,r,2)){const e=(15&i[r])<<12|(63&i[r+1])<<6|63&i[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(i[r]<248&&s._checkContinuation(i,r,3)){let e=(7&i[r])<<18|(63&i[r+1])<<12|(63&i[r+2])<<6|63&i[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,i){let s=e;if(t+i<s.length){for(;i--;)if(128!=(192&s[++t]))return!1;return!0}return!1}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,s=0,r=0,a=i,n=0;if(e<t[0].originDts)return-1;for(;r<=a;){if((s=r+Math.floor((a-r)/2))===i||e>t[s].lastSample.originDts&&e<t[s+1].originDts){n=s;break}t[s].originDts<e?r=s+1:a=s-1}return n}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,s=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?s=i+1:t.length>0&&(s=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=s,this._list.splice(s,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1,this.onSourceOpen=this.onSourceOpen.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onUpdateEnd=this.onUpdateEnd.bind(this),this.onWaiting=this.onWaiting.bind(this)}init(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate),this.container.addEventListener("waiting",this.onWaiting)}onTimeUpdate(){this.emit("TIME_UPDATE",this.container)}onWaiting(){this.emit("WAITING",this.container)}onSourceOpen(){this.addSourceBuffers()}onUpdateEnd(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),i=this._context.getInstance("TRACKS");t=t.sources;let s=!1;for(let r=0,a=Object.keys(t).length;r<a;r++){let a=Object.keys(t)[r];if("audio"===a?e=i.audioTrack:"video"===a&&(e=i.videoTrack),e){let i="audio"===a?21:40;e.meta&&e.meta.refSampleDuration&&(i=e.meta.refSampleDuration),t[a].data.length>=this.preloadTime/i&&(s=!0)}}if(s){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,i=Object.keys(t).length;e<i;e++){let i=Object.keys(t)[e],s=t[i],r="video"===i?"video/mp4;codecs="+s.mimetype:"audio/mp4;codecs="+s.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[i]=a,a.addEventListener("updateend",this.onUpdateEnd),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],s=this.sourceBuffers[i];if(!s.updating){let t=e.sources[i];if(t&&!t.inited)s.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&s.appendBuffer(e.buffer.buffer)}}}}endOfStream(){const{readyState:e,activeSourceBuffers:t}=this.mediaSource;if("open"===e&&0===t.length)try{this.mediaSource.endOfStream()}catch(e){}}remove(e,t=0){for(let i=0;i<Object.keys(this.sourceBuffers).length;i++){let s=this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];s.updating||s.remove(t,e)}}removeBuffers(){const e=[];for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i,r=this.sourceBuffers[Object.keys(this.sourceBuffers)[t]];r.removeEventListener("updateend",this.onUpdateEnd),r.updating?i=new Promise(e=>{const t=function(){let i=3;const a=()=>{r.updating?i>0?(setTimeout(a,200),i--):e():(s.clearBuffer(r),e())};setTimeout(a,200),r.removeEventListener("updateend",t)};r.addEventListener("updateend",t)}):(s.clearBuffer(r),i=Promise.resolve()),e.push(i)}return Promise.all(e)}destroy(){return this.removeBuffers().then(()=>{for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let t=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];this.mediaSource.removeSourceBuffer(t),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[e]]}this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen),this.endOfStream(),window.URL.revokeObjectURL(this.url),this.url=null,this.configs={},this.container=null,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=1})}static clearBuffer(e){const t=e.buffered;let i=.1;for(let e=0,s=t.length;e<s;e++)i=t.end(e);try{e.remove(0,i)}catch(e){}}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),i=e%4;for(let e=0;e<t;e++)s.readByte(this.dataview,4);i>0&&s.readByte(this.dataview,i)}static readByte(e,t,i){let s;switch(t){case 1:s=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:s=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");s=e.getUint8(e.position)<<16,s|=e.getUint8(e.position+1)<<8,s|=e.getUint8(e.position+2);break;case 4:s=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");s=e.getUint32(e.position)<<32,s|=e.getUint32(e.position+4);break;default:s=""}return e.position+=t,s}readUint8(){return s.readByte(this.dataview,1)}readUint16(){return s.readByte(this.dataview,2)}readUint24(){return s.readByte(this.dataview,3)}readUint32(){return s.readByte(this.dataview,4)}readUint64(){return s.readByte(this.dataview,8)}readInt8(){return s.readByte(this.dataview,1,!0)}readInt16(){return s.readByte(this.dataview,2,!0)}readInt32(){return s.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(25))&&s.__esModule?s:{default:s};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,r.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},function(e,t,i){var s,r=(s=i(26))&&s.__esModule?s:{default:s};e.exports=r.default},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,s=Array(i>1?i-1:0),r=1;r<i;r++)s[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var d,l=s[Symbol.iterator]();!(a=(d=l.next()).done);a=!0){var h=d.value;t+=h.length}}catch(e){n=!0,o=e}finally{try{!a&&l.return&&l.return()}finally{if(n)throw o}}var u=new e(t),c=0,f=!0,p=!1,m=void 0;try{for(var g,_=s[Symbol.iterator]();!(f=(g=_.next()).done);f=!0){var y=g.value;u.set(y,c),c+=y.length}}catch(e){p=!0,m=e}finally{try{!f&&_.return&&_.return()}finally{if(p)throw m}}return u}},function(e,t,i){var s;Object.defineProperty(t,"__esModule",{value:!0});const r=((s=i(4))&&s.__esModule?s:{default:s}).default.CRYTO_EVENTS;t.default=class{constructor(e){this.inputBuffer=e.inputbuffer,this.outputBuffer=e.outputbuffer,this.key=e.key,this.iv=e.iv,this.method=e.method,this.crypto=window.crypto||window.msCrypto}init(){this.on(r.START_DECRYPT,this.decript.bind(this))}decript(){this.aeskey?this.decriptData():this.crypto.subtle.importKey("raw",this.key.buffer,{name:"AES-CBC"},!1,["encrypt","decrypt"]).then(e=>{this.aeskey=e,this.decriptData()})}decriptData(){let e=this._context.getInstance(this.inputBuffer),t=this._context.getInstance(this.outputBuffer),i=e.shift();i&&this.crypto.subtle.decrypt({name:"AES-CBC",iv:this.iv.buffer},this.aeskey,i).then(e=>{t.push(new Uint8Array(e)),this.emit(r.DECRYPTED),this.decriptData(i)})}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=h(i(29)),r=h(i(36)),a=i(39),n=i(9),o=i(0),d=i(7),l=h(i(2));function h(e){return e&&e.__esModule?e:{default:e}}const u=o.EVENTS.REMUX_EVENTS,c=o.EVENTS.DEMUX_EVENTS,f=o.EVENTS.LOADER_EVENTS,p="FLVController";class m{warn(){}}const g="FLV_ERROR";class _{constructor(e){this.TAG=p,this._player=e,this.state={initSegmentArrived:!1,range:{start:0,end:""},rangeSupport:!0}}static findFilePosition(e,t){for(let i=0,s=t.times.length;i<s;i++){const r=t.times[i],a=i+1<s?t.times[i+1]:Number.MAX_SAFE_INTEGER;if(r<=e&&e<=a)return t.filepositions[i]}return""}init(){this._context.registry("FETCH_LOADER",a.FetchLoader),this._context.registry("LOADER_BUFFER",n.XgBuffer),this._context.registry("FLV_DEMUXER",s.default),this._context.registry("TRACKS",n.Tracks),this._context.registry("MP4_REMUXER",r.default.Mp4Remuxer),this._context.registry("PRE_SOURCE_BUFFER",n.PreSource),this._context.registry("COMPATIBILITY",d.Compatibility),this._context.registry("LOGGER",m),this.mse=this._context.registry("MSE",o.Mse)({container:this._player.video}),this.initListeners(),setTimeout(()=>{this.loadMeta()},0)}initListeners(){this.on(f.LOADER_DATALOADED,this._handleLoaderDataLoaded.bind(this)),this.on(f.LOADER_ERROR,this._handleNetworkError.bind(this)),this.on(c.MEDIA_INFO,this._handleMediaInfo.bind(this)),this.on(c.METADATA_PARSED,this._handleMetadataParsed.bind(this)),this.on(c.DEMUX_COMPLETE,this._handleDemuxComplete.bind(this)),this.on(c.DEMUX_ERROR,this._handleDemuxError.bind(this)),this.on(u.INIT_SEGMENT,this._handleAppendInitSegment.bind(this)),this.on(u.MEDIA_SEGMENT,this._handleMediaSegment.bind(this))}_handleMediaInfo(){this._context.onMetaData||this.emit(c.DEMUX_ERROR,new Error("failed to get mediainfo"));const e=this._context.getInstance("LOADER_BUFFER"),t=this._context.getInstance("FETCH_LOADER");this.isSeekable&&(t.cancel(),this.state.range={start:0,end:e.historyLen-1},setTimeout(()=>{this.loadNext(0)}))}_handleLoaderDataLoaded(){this.emitTo("FLV_DEMUXER",c.DEMUX_START)}_handleMetadataParsed(e){this.emit(u.REMUX_METADATA,e)}_handleDemuxComplete(){this.emit(u.REMUX_MEDIA)}_handleAppendInitSegment(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}_handleMediaSegment(){this.mse.addSourceBuffers(),this.mse.doAppend()}_handleNetworkError(e,t){this._player.emit("error",new l.default.Errors("network",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,!0)}_handleDemuxError(e,t,i){void 0===i&&(i=!1),this._player.emit("error",new l.default.Errors("parse",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,i)}_onError(e,t,i,s){let r={errorType:e,errorDetails:`[${t}]: ${i.message}`,errorFatal:s||!1};this._player.emit(g,r)}seek(e){if(!this._context.onMetaData)return void this.loadMeta();if(!this.isSeekable)return;this._context.getInstance("LOADER_BUFFER").clear();const{preloadTime:t=15}=this._player.config,i=this.getSeekRange(e,t);this.state.range=i,this.compat&&this.compat.reset(),this.loadData()}loadNext(e){this._context.onMetaData&&(this.loader.loading||this.getNextRange(e)&&this.loadData())}loadData(){const{start:e,end:t}=this.state.range;this.emit(f.LADER_START,this._player.config.url,{headers:{method:"get",Range:`bytes=${e}-${t}`}})}loadMeta(){this.loader.load(this._player.config.url,{headers:{Range:"bytes=0-"}}).catch(()=>{this.state.rangeSupport=!1,this.loadFallback()})}loadFallback(){this.loader.load(this._player.config.url).catch(()=>{this._player.emit("error",new l.default.Errors("network",this._player.config.url))})}getSeekRange(e,t){const{keyframes:i}=this._context.onMetaData,s=this._context.mediaInfo.duration,r=e,a=e+t,n=_.findFilePosition(r,i);return a>=s||r>=s?{start:n,end:""}:{start:n,end:_.findFilePosition(a,i)}}getNextRange(e){if(""===this.state.range.end)return;const{end:t}=this.getSeekRange(e,this.config.preloadTime||15);return t<=this.state.range.end&&""!==t?void 0:(this.state.range={start:this.state.range.end+1,end:t},!0)}destroy(){this._player=null,this.mse=null,this.state={initSegmentArrived:!1,range:{start:0,end:""},rangeSupport:!0}}get isSeekable(){return!!this.state.rangeSupport&&(!this._context||!this._context.mediaInfo.isComplete()||null!==this._context.mediaInfo.keyframes&&void 0!==this._context.mediaInfo.keyframes)}get config(){return this._player.config}get loader(){return this._context.getInstance("FETCH_LOADER")}get compat(){return this._context.getInstance("COMPATIBILITY")}}t.default=_},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(0),a=i(7),n=i(9),o=(s=i(35))&&s.__esModule?s:{default:s};const d=r.EVENTS.DEMUX_EVENTS;class l{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(d.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}static getPlayType(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e,t=1e5;do{e=this._parseFlvTag()}while(e&&t-- >0);this.emit(d.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}parseFlvHeader(e){if(l.isFlvFile(e)){this._firstFragmentLoaded=!0;const t=l.getPlayType(e[4]);t.hasVideo&&this.initVideoTrack(),t.hasAudio&&this.initAudioTrack()}else this.emit(d.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let e=new n.VideoTrack;e.meta=new r.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}initAudioTrack(){this._trackNum++;let e=new n.AudioTrack;e.meta=new r.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}_parseFlvTagHeader(){let e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.emit(d.DEMUX_ERROR,this.TAG,new Error("tagType "+t.tagType),!1),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let s=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(s+=16777216*r),t.dts=s,this.loaderBuffer.shift(3),t}_processChunk(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(e){let t=this.tracks.audioTrack,i=this.tracks.videoTrack,s=this.loaderBuffer.shift(e.datasize);const r=(new o.default).resolve(s,s.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(d.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(a.audiosamplerate&&(e.sampleRate=a.audiosamplerate),a.audiochannels&&(e.channelCount=a.audiochannels),a.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){let e=i.meta;if("number"==typeof a.framerate){let t=Math.floor(1e3*a.framerate);if(t>0){let i=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=i,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let i,s,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,s=new Array(4),i=a-3):(t.objectType=2,s=new Array(2),i=a):-1!==r.indexOf("android")?(t.objectType=2,s=new Array(2),i=a):(t.objectType=5,i=t.sampleRateIndex,s=new Array(4),t.sampleRateIndex>=6?i=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,s=new Array(2),i=t.sampleRateIndex)),s[0]=t.objectType<<3,s[0]|=(15&t.sampleRateIndex)>>>1,s[1]=(15&t.sampleRateIndex)<<7,s[1]|=(15&t.channelCount)<<3,5===t.objectType&&(s[1]|=(15&i)>>>1,s[2]=(1&i)<<7,s[2]|=8,s[3]=0),t.config=s,t}_parseAACData(e){let t=this.tracks.audioTrack;if(!t)return;let i=t.meta;i||(t.meta=new r.AudioTrackMeta,i=t.meta);let s=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let a=(240&s)>>>4;t.format=a,10!==a&&this.emit(d.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(s),i.sampleRateIndex=(12&s)>>>2,i.frameLenth=(2&s)>>>1,i.channelCount=1&s,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));let n=i.audioSampleRate,o=i.sampleRateIndex,l=i.refSampleDuration;delete e.tagType;let h=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);n=t.audiosamplerate||i.audioSampleRate,o=t.sampleRateIndex||i.sampleRateIndex,l=Math.floor(1024/n*i.timescale),i.channelCount=t.channelCount,i.sampleRate=n,i.sampleRateIndex=o,i.refSampleDuration=l,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=t.config;const s=this._context.mediaInfo.audio;s.codec=t.codec,s.channelCount=t.channelCount,s.sampleRate=n,s.sampleRateIndex=t.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(d.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&this.emit(d.AUDIO_METADATA_CHANGE),this._hasAudioSequence=!0,this._metaChange=!0}else this._metaChange&&(e.options={meta:t.meta},this._metaChange=!1),e.data=e.data.slice(1,e.data.length),t.samples.push(e);h||this.emit(d.DEMUX_ERROR,this.TAG,new Error("TAG length error at "+e.datasize),!1)}_parseHevcData(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);let t={},i=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>i;){let s=e.data.slice(Number.parseInt(i),4+i);t.size=s[3],t.size+=256*s[2],t.size+=256*s[1]*256,t.size+=256*s[0]*256*256,i+=4,t.data=e.data.slice(Number.parseInt(i),t.size+i),i+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(d.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(d.METADATA_PARSED,"video"):this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1))}else if(7===i){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let i=0;i<4;i++)e=256*e+t[i];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType)this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(d.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(d.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0),this._metaChange=!0;else{if(!this._datasizeValidator(e.datasize))return void this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);this._metaChange&&(e.options={meta:Object.assign({},this.tracks.videoTrack.meta)},this._metaChange=!1),this.tracks.videoTrack.samples.push(e)}}else this.emit(d.DEMUX_ERROR,this.TAG,new Error(`video codeid is ${i}`),!1),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1),this.tracks.videoTrack.samples.push(e),this.emit(d.DEMUX_COMPLETE);delete e.tagType}_avcSequenceHeaderParser(e){let t=this.tracks.videoTrack;if(!t)return;let i=0;t.meta||(t.meta=new r.VideoTrackMeta);let s=t.meta;s.configurationVersion=e[0],s.avcProfileIndication=e[1],s.profileCompatibility=e[2],s.avcLevelIndication=e[3]/10,s.nalUnitLength=1+(3&e[4]);let n=31&e[5];i=6;let o={};for(let t=0;t<n;t++){let t=255*e[i]+e[i+1];i+=2;let r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e[i+s];let n="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),n+=t}s.codec=n,i+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let d=e[i];i++;for(let t=0;t<d;t++){let t=255*e[i]+e[i+1];i+=2;let s=new Uint8Array(t);for(let r=0;r<t;r++)s[r]=e[i+r];i+=t,this.tracks.videoTrack.meta.pps=s}Object.assign(s,a.SpsParser.toVideoMeta(o));const l=this._context.mediaInfo.video;l.codec=s.codec,l.profile=s.profile,l.level=s.level,l.chromaFormat=s.chromaFormat,l.frameRate=s.frameRate,l.parRatio=s.parRatio,l.width=l.width===s.presentWidth?l.width:s.presentWidth,l.height=l.height===s.presentHeight?l.width:s.presentHeight,s.duration=this._context.mediaInfo.duration*s.timescale,s.avcc=new Uint8Array(e.length),s.avcc.set(e),t.meta=s}_switchAudioSampleRate(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}_switchAudioSamplingFrequency(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}_switchAudioChannel(e){return[1,2][1&e]}_datasizeValidator(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}get loaderBuffer(){const e=this._context.getInstance("LOADER_BUFFER");if(e)return e;this.emit(d.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}t.default=l},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(8))&&s.__esModule?s:{default:s};class a{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,i=e.position;return 1===t.getInt32(i)||0===t.getInt16(i)&&1===t.getInt8(i+2)?a.getAnnexbNals(e):a.getAvccNals(e)}static getAnnexbNals(e){let t=[],i=a.getHeaderPositionAnnexB(e),s=i.pos,r=s;for(;s<e.length-4;){let n=e.buffer.slice(s,s+i.headerLength);i.pos===e.position&&e.skip(i.headerLength),r=(i=a.getHeaderPositionAnnexB(e)).pos;let o={header:n,body:new Uint8Array(e.buffer.slice(s+n.byteLength,r))};a.analyseNal(o),t.push(o),e.skip(r-e.position),s=r}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let i=e.dataview.getInt32();if(!(e.length-e.position>=i))break;{let s=e.buffer.slice(e.position,e.position+4);e.skip(4);let r=e.buffer.slice(e.position,e.position+i);e.skip(i);let n={header:s,body:r};a.analyseNal(n),t.push(n)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=r.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,i=0;for(;3!==i&&4!==i&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?i=4:1===e.dataview.getInt8(t+2)?i=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(i=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?i=3:t=e.length)),{pos:t,headerLength:i}}static getAvcc(e,t){let i=new Uint8Array(e.byteLength+t.byteLength+11);i[0]=1,i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=255,i[5]=225;let s=6;return i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),s),s+=2,i.set(e,s),i[s+=e.byteLength]=1,s++,i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),s),s+=2,i.set(t,s),i}}t.default=a},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){let t=Math.min(this._currentWordBitsLeft,e),i=this._currentWord>>>32-t;if(e>32)throw new Error("Cannot read more than 32 bits at a time");return this._currentWordBitsLeft-=t,this._currentWordBitsLeft>0?this._currentWord<<=t:this._totalBytes-this._bufferIndex>0&&this._fillCurrentWord(),(t=e-t)>0&&this._currentWordBitsLeft?i<<t|this.readBits(t):i}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(0),a=(s=i(33))&&s.__esModule?s:{default:s};const{REMUX_EVENTS:n,DEMUX_EVENTS:o}=r.EVENTS;class d{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[],this._videoLargeGap=0,this._audioLargeGap=0}init(){this.before(n.REMUX_MEDIA,this.doFix.bind(this))}reset(){this.nextAudioDts=null,this.nextVideoDts=null,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:e,isFirstVideoSamples:t}=this.getFirstSample();this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples);const{changed:i,changedIdx:s}=d.detactChangeStream(this.videoTrack.samples);i&&!e?this.fixChangeStreamVideo(s):this.doFixVideo(t);const{changed:r,changedIdx:a}=d.detactChangeStream(this.audioTrack.samples);r?this.fixChangeStreamAudio(a):this.doFixAudio(e)}doFixVideo(e,t){let{samples:i,meta:s}=this.videoTrack;if(s.frameRate&&!1===s.frameRate.fixed)return;if(!i||!i.length||!this._firstVideoSample)return;const r=i[0],a=i.length;this._videoLargeGap>0&&d.doFixLargeGap(i,this._videoLargeGap),r.dts!==this._firstVideoSample.dts&&(t||d.detectLargeGap(this.nextVideoDts,r))&&(t&&(this.nextVideoDts=t),this._videoLargeGap=this.nextVideoDts-r.dts,d.doFixLargeGap(i,this._videoLargeGap));const n=r.dts;if(e&&this._firstAudioSample){const e=this._firstVideoSample.dts,t=e-this._firstAudioSample.dts;if(t>2*s.refSampleDuration){const a=Math.floor(t/s.refSampleDuration);for(let t=0;t<a;t++){const a=Object.assign({},r);a.dts=e-(t+1)*s.refSampleDuration,a.pts=a.dts+a.cts,i.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}}}let o;if(this.nextVideoDts){o=n-this.nextVideoDts;const e=Math.abs(o);if(o>2*s.refSampleDuration){const e=Math.floor(o/s.refSampleDuration);for(let t=0;t<e;t++){const e=Object.assign({},i[0]),r=n-(t+1)*s.refSampleDuration;e.dts=r>this.nextVideoDts?r:this.nextVideoDts,e.pts=e.dts+e.cts,this.videoTrack.samples.unshift(e),this.filledVideoSamples.push({dts:e.dts,size:e.data.byteLength})}}else e<=s.refSampleDuration&&e>0?(i[0].dts=this.nextVideoDts,i[0].originDts=i[0].dts,i[0].cts=void 0!==i[0].cts?i[0].cts:i[0].pts-i[0].dts,i[0].pts=i[0].dts+i[0].cts):o<0&&d.doFixLargeGap(i,-1*o)}const l=i[i.length-1].dts,h=i.length>=2?l-i[i.length-2].dts:s.refSampleDuration;this.lastVideoSamplesLen=a,this.nextVideoDts=l+h,this.lastVideoDts=l;for(let e=0,t=i.length;e<t;e++){const t=i[e],r=i[e+1];if(!r)break;const a=r.dts-t.dts;if(a>2*s.refSampleDuration){let n=Math.floor(a/s.refSampleDuration),o=0;for(;o<n;){const a=Object.assign({},r);a.dts=t.dts+(o+1)*s.refSampleDuration,a.pts=a.dts+a.cts,a<r.dts&&(i.splice(e,0,a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})),o++,e++}}}this.videoTrack.samples=i}doFixAudio(e,t){let{samples:i,meta:s}=this.audioTrack;if(!i||!i.length)return;const r=i.length,n=a.default.getSilentFrame(s.codec,s.channelCount),o=this._firstAudioSample,l=i[0];if(this._audioLargeGap>0&&d.doFixLargeGap(i,this._audioLargeGap),l.dts!==this._firstAudioSample.dts&&(t||d.detectLargeGap(this.nextAudioDts,l))&&(t&&(this.nextAudioDts=t),this._audioLargeGap=this.nextAudioDts-l.dts,d.doFixLargeGap(i,this._audioLargeGap)),this._firstVideoSample&&e){const e=this._firstVideoSample.pts?this._firstVideoSample.pts:this._firstVideoSample.dts+this._firstVideoSample.cts;if(o.dts-e>s.refSampleDuration){const t=Math.floor((o.dts-e)/s.refSampleDuration);for(let e=0;e<t;e++){const t={data:n,datasize:n.byteLength,dts:o.dts-(e+1)*s.refSampleDuration,filtered:0};i.unshift(t),this.filledAudioSamples.push({dts:t.dts,size:t.data.byteLength})}}}let h;const u=i[0].dts;if(this.nextAudioDts){h=u-this.nextAudioDts;const e=Math.abs(h);if(e>s.refSampleDuration&&1===r&&1===this.lastAudioSamplesLen&&(s.refSampleDurationFixed=void 0),h>2*s.refSampleDuration)if(1===r&&1===this.lastAudioSamplesLen)s.refSampleDurationFixed=void 0!==s.refSampleDurationFixed?s.refSampleDurationFixed+h:s.refSampleDuration+h;else{const e=Math.floor(h/s.refSampleDuration);for(let t=0;t<e;t++){const e=u-(t+1)*s.refSampleDuration,r=Object.assign({},i[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else e<=s.refSampleDuration&&e>0?(i[0].dts=this.nextAudioDts,i[0].pts=this.nextAudioDts):h<0&&d.doFixLargeGap(i,-1*h)}const c=i[i.length-1].dts,f=i.length>=2?c-i[i.length-2].dts:s.refSampleDuration;this.lastAudioSamplesLen=r,this.nextAudioDts=s.refSampleDurationFixed?c+s.refSampleDurationFixed:c+f,this.lastAudioDts=c;for(let e=0,t=i.length;e<t;e++){const t=i[e],s=i[e+1];if(!s)break;const r=s.dts-t.dts;i[e].duration=r}this.audioTrack.samples=d.sortAudioSamples(i)}fixChangeStreamVideo(e){const{samples:t,meta:i}=this.videoTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixVideo(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.videoTrack.samples=t.slice(0,e),this.doFixVideo(!1),this.videoTrack.samples=t.slice(e),this.doFixVideo(!1,l),this.videoTrack.samples=a.concat(n)}fixChangeStreamAudio(e){const{samples:t,meta:i}=this.audioTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixAudio(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.audioTrack.samples=a,this.doFixAudio(!1),this.audioTrack.samples=n,this.doFixAudio(!1,l),this.audioTrack.samples=a.concat(n)}getFirstSample(){let{samples:e}=this.videoTrack,{samples:t}=this.audioTrack,i=!1,s=!1;return!this._firstVideoSample&&e.length&&(this._firstVideoSample=d.findFirstVideoSample(e),i=!0),!this._firstAudioSample&&t.length&&(this._firstAudioSample=d.findFirstAudioSample(t),s=!0),{isFirstVideoSamples:i,isFirstAudioSamples:s}}fixRefSampleDuration(e,t){const i="video"===e.type,s=i?this.allVideoSamplesCount:this.allAudioSamplesCount,r=i?this._firstVideoSample.dts:this._firstAudioSample.dts,a=i?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration)){if(t.length>=1){const i=t[t.length-1].dts;e.refSampleDuration=Math.floor((i-r)/(s+a-1))}}else if(e.refSampleDuration&&t.length>=5){const i=(t[t.length-1].dts-t[0].dts)/(t.length-1);e.refSampleDuration=Math.floor(Math.abs(e.refSampleDuration-i)<=5?e.refSampleDuration:i)}}recordSamplesCount(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}removeInvalidSamples(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter(e=>e.dts>=t.dts&&(void 0===this.lastAudioDts||e.dts>this.lastAudioDts)),this.videoTrack.samples=this.videoTrack.samples.filter(t=>t.dts>=e.dts&&(void 0===this.lastVideoDts||t.dts>this.lastVideoDts))}getStreamChangeStart(e){return e.options&&e.options.start?e.options.start-this.dtsBase:1/0}static sortAudioSamples(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}static findFirstAudioSample(e){return e&&0!==e.length?d.sortAudioSamples(e)[0]:null}static findFirstVideoSample(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,i=t.length;e<i;e++)if(t[e].isKeyframe)return t[e]}static detectLargeGap(e,t){if(null===e)return;const i=t.dts||0,s=e-i>=1e3||i-e>=1e3,r=t.options&&t.options.discontinue;return s||r}static doFixLargeGap(e,t){console.log("fix large gap");for(let i=0,s=e.length;i<s;i++){const s=e[i];s.dts+=t,s.pts&&(s.pts+=t)}}static detactChangeStream(e){let t=!1,i=-1;for(let s=0,r=e.length;s<r;s++)if(e[s].options&&e[s].options.meta){t=!0,i=s;break}return{changed:t,changedIdx:i}}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks?this.tracks.audioTrack:null}get videoTrack(){return this.tracks?this.tracks.videoTrack:null}get dtsBase(){const e=this._context.getInstance("MP4_REMUXER");return e?e._dtsBase:0}}t.default=d},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{static getSilentFrame(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new s,this.sources[e]}clear(){this.sources={}}destroy(){this.sources={}}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(0);const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};t.default=class{constructor(){this.offset=0,this.readOffset=this.offset}resolve(e,t){if(t<3)throw new Error("not enough data for metainfo");const i={},s=this.parseValue(e),r=this.parseValue(e,t-s.bodySize);return i[s.data]=r.data,this.resetStatus(),i}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(e){const t=new DataView(e,this.readOffset).getUint16(0,!s.isLe);let i="";i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}parseDate(e,t){const i=new DataView(e,this.readOffset,t);let r=i.getFloat64(0,!s.isLe);return r+=60*i.getInt16(8,!s.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(e,t){const i=this.parseString(e,t),s=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:s.data},bodySize:i.bodySize+s.bodySize,isObjEnd:s.isObjEnd}}parseLongString(e){const t=new DataView(e,this.readOffset).getUint32(0,!s.isLe);let i="";return i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}parseValue(e,t){let i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:d,MIX_ARRAY:l,OBJECT_END:h,STRICT_ARRAY:u,DATE:c,LONE_STRING:f}=r,p=new DataView(i,this.readOffset,t);let m=!1;const g=p.getUint8(0);let _=1;this.readOffset+=1;let y=null;switch(g){case a:y=p.getFloat64(1,!s.isLe),this.readOffset+=8,_+=8;break;case n:y=!!p.getUint8(1),this.readOffset+=1,_+=1;break;case o:{const e=this.parseString(i);y=e.data,_+=e.bodySize;break}case d:{y={};let e=0;for(16777215&p.getUint32(t-4,!s.isLe)&&(e=3);_<t-4;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(this.readOffset+=3,_+=3);break}case l:{y={},_+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!s.isLe))&&(e=3);_<t-8;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(_+=3,this.readOffset+=3);break}case h:y=null,m=!0;break;case u:{y=[];const e=p.getUint32(1,!s.isLe);_+=4,this.readOffset+=4;for(let s=0;s<e;s++){const e=this.parseValue(i,t-_);y.push(e.data),_+=e.bodySize}break}case c:{const e=this.parseDate(i,t-1);y=e.data,_+=e.bodySize;break}case f:{const e=this.parseLongString(i,t-1);y=e.data,_+=e.bodySize;break}default:_=t}return{data:y,bodySize:_,isObjEnd:m}}}},function(e,t,i){e.exports={Mp4Remuxer:i(37).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(0),a=(s=i(38))&&s.__esModule?s:{default:s};const n=r.EVENTS.REMUX_EVENTS;class o{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e,this.isFirstVideo=!0,this.isFirstAudio=!0,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(n.REMUX_MEDIA,this.remux.bind(this)),this.on(n.REMUX_METADATA,this.onMetaDataReady.bind(this)),this.on(n.DETECT_CHANGE_STREAM,this.resetDtsBase.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}resetDtsBase(){this._dtsBase=0,this._dtsBaseInited=!1}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t;if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");t=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");t=e}let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.mimetype=t.meta.codec,s.init=this.remuxInitSegment(e,t.meta),this.emit(n.INIT_SEGMENT,e)}remuxInitSegment(e,t){let i=new r.Buffer,s=a.default.ftyp(),n=a.default.moov({type:e,meta:t});return i.write(s,n),i}calcDtsBase(e,t){if(!e.samples.length&&!t.samples.length)return;let i=1/0,s=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(s=t.samples[0].dts),this._dtsBase=Math.min(i,s),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let{samples:i}=t,s=-1,o=null;const d=[],l={samples:[]};for(;i.length;){const e=i.shift(),{isKeyframe:t,options:r}=e;if(!this.isFirstAudio&&r&&r.meta){o=this.remuxInitSegment("video",r.meta),r.meta=null,i.unshift(e),r.isContinue||this.resetDtsBase();break}let a,n,h=e.dts-this._dtsBase;-1===s&&(s=h),void 0!==e.pts&&(a=(n=e.pts-this._dtsBase)-h),void 0!==e.cts&&(n=e.cts+h,a=e.cts);let u={buffer:[],size:0};l.samples.push(u),u.buffer.push(e.data),u.size+=e.data.byteLength;let c=0;c=i.length>=1?i[0].dts-this._dtsBase-h:d.length>=1?d[d.length-1].duration:this.videoMeta.refSampleDuration,this.videoAllDuration+=c,d.push({dts:h,cts:a,pts:n,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:c,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:h,type:"video"})}let h=new r.Buffer;if(d.length){const e=a.default.moof({id:t.meta.id,time:s,samples:d}),i=a.default.mdat(l);h.write(e,i),this.writeToSource("video",h)}if(o&&(this.writeToSource("video",o),i.length))return t.samples=i,this._remuxVideo(t);this.isFirstVideo=!1,this.emit(n.MEDIA_SEGMENT,"video");const u=d[d.length-1];this._videoNextDts=u.dts+u.duration,t.samples=[],t.length=0}_remuxAudio(e){const{samples:t}=e;let i=-1,s=[],o=null;const d={samples:[]};if(!t||!t.length)return;let l=!1;for(;t.length;){let e=t.shift();const{data:r,options:a}=e;if(!this.isFirstAudio&&a&&a.meta){o=this.remuxInitSegment("audio",a.meta),a.meta=null,t.unshift(e),a.isContinue||this.resetDtsBase();break}let n=e.dts-this._dtsBase;const h=n;l||(i=n,l=!0);let u=0;u=this.audioMeta.refSampleDurationFixed?this.audioMeta.refSampleDurationFixed:t.length>=1?t[0].dts-this._dtsBase-n:s.length>=1?s[s.length-1].duration:this.audioMeta.refSampleDuration,this.audioAllDuration+=u;const c={dts:n,pts:n,cts:0,size:r.byteLength,duration:e.duration?e.duration:u,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:h,type:"audio"};let f={buffer:[],size:0};f.buffer.push(r),f.size+=r.byteLength,d.samples.push(f),s.push(c)}const h=new r.Buffer;if(s.length){const t=a.default.moof({id:e.meta.id,time:i,samples:s}),r=a.default.mdat(d);h.write(t,r),this.writeToSource("audio",h)}if(o&&(this.writeToSource("audio",o),t.length))return e.samples=t,this._remuxAudio(e);this.isFirstAudio=!1,this.emit(n.MEDIA_SEGMENT,"audio",h);const u=s[s.length-1];this._videoNextDts=u.dts+u.duration,e.samples=[],e.length=0}writeToSource(e,t){let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.data.push(t)}initSilentAudio(e,t){const i=o.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=o},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(0);class r{static size(e){return s.Buffer.writeUint32(e)}static initBox(e,t,...i){const a=new s.Buffer;return a.write(r.size(e),r.type(t),...i),a.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let i,s=8,a=r.mvhd(t.duration,t.timescale);i="video"===e?r.videoTrak(t):r.audioTrak(t);let n=r.mvex(t.duration,t.timescale||1e3,t.id);return[a,i,n].forEach(e=>{s+=e.byteLength}),r.initBox(s,"moov",a,i,n)}static mvhd(e,t=1e3){let i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),s=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static audioTrak(e){let t=8,i=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),s=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static tkhd(e){let t=e.id,i=e.duration,s=e.width,a=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>>8&255,255&s,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new s.Buffer,i=e.duration,a=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=r.mdhd(e.timescale,e.duration),s=r.hdlr(e.type),a=r.minf(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",i,s,a)}static mdhd(e=1e3,t){let i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+i.byteLength,"mdhd",r.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?r.vmhd():r.smhd(),s=r.dinf(),a=r.stbl(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",i,s,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new s.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=r.stsd(e),s=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[i,s,a,n,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",i,s,a,n,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=r.esds(e.config);return r.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(e=[43,146,8,0]){const t=e.length;let i=new s.Buffer,a=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(r.size(8+a.byteLength),r.type("esds"),a),i.buffer}static avc1(e){let t=new s.Buffer,i=e.width,a=e.height,n=e.parRatio.height,o=e.parRatio.width,d=e.avcc,l=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),h=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),u=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+l.byteLength+d.byteLength+h.byteLength),r.type("avc1"),l,r.size(8+d.byteLength),r.type("avcC"),d,r.size(20),r.type("btrt"),h,r.size(16),r.type("pasp"),u),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e,t=1e3,i){let a=new s.Buffer,n=s.Buffer.writeUint32(e);return a.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),n,r.trex(i)),a.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=r.mfhd(),s=r.traf(e);return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",i,s)}static mfhd(){let e=s.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,i=r.tfhd(e.id),s=r.tfdt(e.time),a=r.sdtp(e),n=r.trun(e,a.byteLength);return[i,s,n,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",i,s,n,a)}static tfhd(e){let t=s.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),s.Buffer.writeUint32(e))}static trun(e,t){let i=new s.Buffer,a=s.Buffer.writeUint32(e.samples.length),n=s.Buffer.writeUint32(92+16*e.samples.length+t);return i.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new s.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,s=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([s]))}),t.buffer}static mdat(e){let t=new s.Buffer,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(r.size(i),r.type("mdat"));let a=new Uint8Array(i),n=0;return a.set(t.buffer,n),n+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{a.set(e,n),n+=e.byteLength})}),a}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},function(e,t,i){e.exports={FetchLoader:i(40).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=i(0).EVENTS.LOADER_EVENTS;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this._destroyed=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(s.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let i=this;this.url=e,this._canceled=!1;let r=this.getParams(t);return i.loading=!0,fetch(this.url,r).then((function(e){if(e.ok)return i.status=e.status,i._onFetchResponse(e);i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,new Error("invalid response."))})).catch((function(e){throw i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,e),new Error(e.message)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);this._loaderTaskNo++;let r=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case 2:e.json().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 1:e.text().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 3:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(new Uint8Array(e)),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 0:default:return this._onReader(e.body.getReader(),r)}}_onReader(e,t){let i=this._context.getInstance(this.buffer);if(!i&&this._reader||this._destroyed)try{this._reader.cancel()}catch(e){}if(this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then((function(a){if(a.done)return r.loading=!1,r.status=0,void r.emit(s.LOADER_COMPLETE,i);if(!r._canceled&&!r._destroyed)return i.push(a.value),r.emit(s.LOADER_DATALOADED,i),r._onReader(e,t);if(r._reader)try{r._reader.cancel()}catch(e){}})).catch(e=>{r.loading=!1,r.emit(s.LOADER_ERROR,r.TAG,e)})}getParams(e){let t=Object.assign({},e),i=new Headers,s={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}if("object"==typeof t.headers){let e=t.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(s.mode="same-origin"),t.withCredentials&&(s.credentials="include"),s}cancel(){if(this._reader){try{this._reader.cancel()}catch(e){}this._reader=null,this.loading=!1,this._canceled=!0}}destroy(){this._destroyed=!0,this.cancel()}}}]))},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,i){"use strict";var s=a(i(/*! xgplayer-flv-live */"../xgplayer-flv-live/dist/index.js")),r=a(i(/*! xgplayer-flv-vod */"../xgplayer-flv-vod/dist/index.js"));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t.isLive?new s.default(t):new r.default(t)}},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!*************************!*\
  !*** external "Player" ***!
  \*************************/
/*! no static exports found */function(e,t){e.exports=window.Player}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vRmx2UGxheWVyL3dlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXItZmx2L1VzZXJzL2xlb25hcmRvL0RvY3VtZW50cy9mcm9udC1lbmQvcGxheWVyL3hncGxheWVyL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vRmx2UGxheWVyL3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWJ1ZmZlci9zcmMvYnVmZmVyLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1idWZmZXIvc3JjL3ByZXNvdWNlLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1idWZmZXIvc3JjL3RyYWNrLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1jb2RlYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItY29kZWMvc3JjL2FhYy9hYWMtaGVscGVyLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1jb2RlYy9zcmMvY29tcGF0aWJpbGl0eS5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItY29kZWMvc3JjL2gyNjQvbmFsdW5pdC9nb2xvbWIuanMiLCJ3ZWJwYWNrOi8vRmx2UGxheWVyL3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWNvZGVjL3NyYy9oMjY0L25hbHVuaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vRmx2UGxheWVyL3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWNvZGVjL3NyYy9oMjY0L25hbHVuaXQvc3BzLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1kZW11eC9pbmRleC5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItZGVtdXgvc3JjL2Zsdi9hbWYtcGFyc2VyLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1kZW11eC9zcmMvZmx2L2luZGV4LmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1kZW11eC9zcmMvaGxzL2RlbXV4ZXIvbTN1OHBhcnNlci5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItZGVtdXgvc3JjL2hscy9kZW11eGVyL3RzLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1kZW11eC9zcmMvaGxzL3BsYXlsaXN0LmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1sb2FkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vRmx2UGxheWVyL3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWxvYWRlci9zcmMvZmV0Y2gtbG9hZGVyLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1yZW11eC9pbmRleC5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItcmVtdXgvc3JjL21wNC9mbXA0LmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1yZW11eC9zcmMvbXA0L2luZGV4LmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9pbmRleC5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvbm9kZV9tb2R1bGVzL2NvbmNhdC10eXBlZC1hcnJheS9saWIvY29uY2F0LmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9ub2RlX21vZHVsZXMvY29uY2F0LXR5cGVkLWFycmF5L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL2NvbnN0YW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vRmx2UGxheWVyL3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9jb25zdGFudHMvd29ya2VyLWNvbW1hbmRzLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvY29udGV4dC5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL2NyeXB0by9pbmRleC5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL2Vudi9pc2xlLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvZW52L3NuaWZmZXIuanMiLCJ3ZWJwYWNrOi8vRmx2UGxheWVyL3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9lbnYvdXRmOC5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy9tZWRpYS1pbmZvLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL21lZGlhLXNhbXBsZS5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy9tZWRpYS1zZWdtZW50LWxpc3QuanMiLCJ3ZWJwYWNrOi8vRmx2UGxheWVyL3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvbWVkaWEtc2VnbWVudC5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy90cmFjay1tZXRhLmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL3RyYWNrLXNhbXBsZS5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL21zZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL3dyaXRlL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL3dyaXRlL3N0cmVhbS5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvd2VicGFjazovL3hncGxheWVyLWZsdi9zcmMvZmx2LWxpdmUuanMiLCJ3ZWJwYWNrOi8vRmx2UGxheWVyL3dlYnBhY2s6Ly94Z3BsYXllci1mbHYvc3JjL2luZGV4LmpzIiwid2VicGFjazovL0ZsdlBsYXllci93ZWJwYWNrOi94Z3BsYXllci1mbHYvZXh0ZXJuYWwgXCJ4Z3BsYXllclwiIiwid2VicGFjazovL0ZsdlBsYXllci8uLXZvZC9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL0ZsdlBsYXllci8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9GbHZQbGF5ZXIvZXh0ZXJuYWwgXCJQbGF5ZXJcIiJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfeGdwbGF5ZXJfXyIsIndpbmRvdyIsInJlcXVpcmUiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJ0YXJnZXQiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uY2F0IiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJ0aGlzIiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiJGdldE1heExpc3RlbmVycyIsInRoYXQiLCJfYWRkTGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwiVHlwZUVycm9yIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsInB1c2giLCJsZW5ndGgiLCJ3YXJuZWQiLCJ3IiwiRXJyb3IiLCJTdHJpbmciLCJlbWl0dGVyIiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIm9uY2VXcmFwcGVyIiwiYXJndW1lbnRzIiwiZmlyZWQiLCJyZW1vdmVMaXN0ZW5lciIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwiYXJyIiwicmV0IiwiQXJyYXkiLCJhcnJheUNsb25lIiwibGlzdGVuZXJDb3VudCIsImNvcHkiLCJzZXQiLCJhcmciLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXJyb3IiLCJlciIsImVyciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwiaGFuZGxlciIsImxlbiIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwib24iLCJwcmVwZW5kTGlzdGVuZXIiLCJvbmNlIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3QiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsImluZGV4IiwicG9wIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwia2V5cyIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJUcmFjayIsImRlZmF1bHQiLCJUcmFja3MiLCJBdWRpb1RyYWNrIiwiVmlkZW9UcmFjayIsIlhnQnVmZmVyIiwiUmVtdXhCdWZmZXIiLCJQcmVTb3VyY2UiLCJjb25zdHJ1Y3RvciIsImhpc3RvcnlMZW4iLCJhcnJheSIsIm9mZnNldCIsImRhdGEiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsIl9zaGlmdEJ1ZmZlciIsInNsaWNlIiwidG1wb2ZmIiwidG1wIiwidGVtcGxlbmd0aCIsImNsZWFyIiwiZGVzdHJveSIsInRvSW50Iiwic3RhcnQiLCJyZXRJbnQiLCJ2aWRlbyIsImF1ZGlvIiwiU291cmNlIiwibWltZXR5cGUiLCJzb3VyY2VzIiwiZ2V0U291cmNlIiwic291cmNlIiwiY3JlYXRlU291cmNlIiwiaWQiLCJzZXF1ZW5jZU51bWJlciIsInNhbXBsZXMiLCJkcm9wcGVkU2FtcGxlcyIsInJlc2V0IiwiZGlzdHJveSIsInN1cGVyIiwiVEFHIiwiZHJvcHBlZCIsImF1ZGlvVHJhY2siLCJ2aWRlb1RyYWNrIiwiTmFsdW5pdCIsIlNwc1BhcnNlciIsIkNvbXBhdGliaWxpdHkiLCJjb2RlYyIsImNoYW5uZWxDb3VudCIsIlJFTVVYX0VWRU5UUyIsIkRFTVVYX0VWRU5UUyIsIkVWRU5UUyIsIm5leHRBdWRpb0R0cyIsIm5leHRWaWRlb0R0cyIsImxhc3RBdWRpb1NhbXBsZXNMZW4iLCJsYXN0VmlkZW9TYW1wbGVzTGVuIiwibGFzdFZpZGVvRHRzIiwibGFzdEF1ZGlvRHRzIiwiYWxsQXVkaW9TYW1wbGVzQ291bnQiLCJhbGxWaWRlb1NhbXBsZXNDb3VudCIsIl9maXJzdEF1ZGlvU2FtcGxlIiwiX2ZpcnN0VmlkZW9TYW1wbGUiLCJmaWxsZWRBdWRpb1NhbXBsZXMiLCJmaWxsZWRWaWRlb1NhbXBsZXMiLCJfdmlkZW9MYXJnZUdhcCIsIl9hdWRpb0xhcmdlR2FwIiwiYmVmb3JlIiwiUkVNVVhfTUVESUEiLCJkb0ZpeCIsImlzRmlyc3RBdWRpb1NhbXBsZXMiLCJpc0ZpcnN0VmlkZW9TYW1wbGVzIiwiZ2V0Rmlyc3RTYW1wbGUiLCJyZWNvcmRTYW1wbGVzQ291bnQiLCJmaXhSZWZTYW1wbGVEdXJhdGlvbiIsIm1ldGEiLCJjaGFuZ2VkIiwidmlkZW9DaGFuZ2VkIiwiY2hhbmdlZElkeCIsInZpZGVvQ2hhbmdlZElkeCIsImRldGFjdENoYW5nZVN0cmVhbSIsImZpeENoYW5nZVN0cmVhbVZpZGVvIiwiZG9GaXhWaWRlbyIsImF1ZGlvQ2hhbmdlZCIsImF1ZGlvQ2hhbmdlZElkeCIsImZpeENoYW5nZVN0cmVhbUF1ZGlvIiwiZG9GaXhBdWRpbyIsImZpcnN0Iiwic3RyZWFtQ2hhbmdlU3RhcnQiLCJ2aWRlb1NhbXBsZXMiLCJmcmFtZVJhdGUiLCJmaXhlZCIsImZpcnN0U2FtcGxlIiwic2FtcGxlc0xlbiIsImRvRml4TGFyZ2VHYXAiLCJkdHMiLCJkZXRlY3RMYXJnZUdhcCIsImZpcnN0RHRzIiwidmlkZW9GaXJzdER0cyIsImdhcCIsInJlZlNhbXBsZUR1cmF0aW9uIiwiZmlsbENvdW50IiwiTWF0aCIsImZsb29yIiwiY2xvbmVkRmlyc3RTYW1wbGUiLCJhc3NpZ24iLCJwdHMiLCJjdHMiLCJzaXplIiwiYWJzR2FwIiwiYWJzIiwiZmlsbEZyYW1lQ291bnQiLCJjbG9uZWRTYW1wbGUiLCJjb21wdXRlZCIsIm9yaWdpbkR0cyIsImxhc3REdHMiLCJsYXN0U2FtcGxlRHVyYXRpb24iLCJjdXJyZW50IiwibmV4dCIsImR1cmF0aW9uIiwiZmlsbEZyYW1lSWR4IiwiZmlsbEZyYW1lIiwic3BsaWNlIiwiYXVkaW9TYW1wbGVzIiwic2lsZW50RnJhbWUiLCJBQUMiLCJnZXRTaWxlbnRGcmFtZSIsIl9maXJzdFNhbXBsZSIsInZpZGVvRmlyc3RQdHMiLCJzaWxlbnRTYW1wbGVDb3VudCIsInNpbGVudFNhbXBsZSIsImRhdGFzaXplIiwiZmlsdGVyZWQiLCJyZWZTYW1wbGVEdXJhdGlvbkZpeGVkIiwic2lsZW50RnJhbWVDb3VudCIsInNvcnRBdWRpb1NhbXBsZXMiLCJjaGFuZ2VJZHgiLCJwcmV2RHRzIiwiZ2V0U3RyZWFtQ2hhbmdlU3RhcnQiLCJjdXJEdHMiLCJvcHRpb25zIiwiaXNDb250aW51ZSIsImZpcnN0UGFydFNhbXBsZXMiLCJzZWNvbmRQYXJ0U2FtcGxlcyIsImZpcnN0UGFydER1cmF0aW9uIiwiZmluZEZpcnN0VmlkZW9TYW1wbGUiLCJmaW5kRmlyc3RBdWRpb1NhbXBsZSIsImlzVmlkZW8iLCJhbGxTYW1wbGVzQ291bnQiLCJmaWxsZWRTYW1wbGVzQ291bnQiLCJkdXJhdGlvbkF2ZyIsInJlbW92ZUludmFsaWRTYW1wbGVzIiwiZmlsdGVyIiwic2FtcGxlIiwiZHRzQmFzZSIsIkluZmluaXR5Iiwic29ydCIsImEiLCJiIiwic29ydGVkIiwiaXNLZXlmcmFtZSIsIm5leHREdHMiLCJjb25kMSIsImNvbmQyIiwiZGlzY29udGludWUiLCJsb2ciLCJfY29udGV4dCIsImdldEluc3RhbmNlIiwidHJhY2tzIiwicmVtdXhlciIsIl9kdHNCYXNlIiwidWludDhhcnJheSIsIl9idWZmZXIiLCJfYnVmZmVySW5kZXgiLCJfdG90YWxCeXRlcyIsIl90b3RhbEJpdHMiLCJfY3VycmVudFdvcmQiLCJfY3VycmVudFdvcmRCaXRzTGVmdCIsIl9maWxsQ3VycmVudFdvcmQiLCJidWZmZXJCeXRlc0xlZnQiLCJieXRlc1JlYWQiLCJtaW4iLCJ3b3JkIiwic3ViYXJyYXkiLCJEYXRhVmlldyIsImJ1ZmZlciIsImdldFVpbnQzMiIsInJlYWRCaXRzIiwiYml0cyIsInZhbHUiLCJyZWFkQm9vbCIsInJlYWRCeXRlIiwiX3NraXBMZWFkaW5nWmVybyIsInplcm9Db3VudCIsInJlYWRVRUciLCJsZWFkaW5nWmVyb3MiLCJyZWFkU0VHIiwiYnVmIiwiZGF0YXZpZXciLCJnZXRJbnQzMiIsImdldEludDE2IiwiZ2V0SW50OCIsImdldEFubmV4Yk5hbHMiLCJnZXRBdmNjTmFscyIsIm5hbHMiLCJnZXRIZWFkZXJQb3NpdGlvbkFubmV4QiIsInBvcyIsImVuZCIsImhlYWRlciIsImhlYWRlckxlbmd0aCIsInNraXAiLCJ1bml0IiwiYm9keSIsImFuYWx5c2VOYWwiLCJuZHIiLCJpZHIiLCJzcHMiLCJwYXJzZVNQUyIsInBwcyIsIlNQU1BhcnNlciIsInNyYyIsInNyY0xlbmd0aCIsImRzdCIsImRzdElkeCIsInJic3AiLCJfZWJzcDJyYnNwIiwiZ2IiLCJHb2xvbWIiLCJwcm9maWxlSWRjIiwibGV2ZWxJZGMiLCJwcm9maWxlX3N0cmluZyIsImdldFByb2ZpbGVTdHJpbmciLCJsZXZlbF9zdHJpbmciLCJnZXRMZXZlbFN0cmluZyIsImNocm9tYV9mb3JtYXRfaWRjIiwiY2hyb21hX2Zvcm1hdCIsImJpdF9kZXB0aCIsInNjYWxpbmdfbGlzdF9jb3VudCIsIl9za2lwU2NhbGluZ0xpc3QiLCJwaWNfb3JkZXJfY250X3R5cGUiLCJudW1fcmVmX2ZyYW1lc19pbl9waWNfb3JkZXJfY250X2N5Y2xlIiwicGljX3dpZHRoX2luX21ic19taW51czEiLCJwaWNfaGVpZ2h0X2luX21hcF91bml0c19taW51czEiLCJmcmFtZV9tYnNfb25seV9mbGFnIiwiZnJhbWVfY3JvcF9sZWZ0X29mZnNldCIsImZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0IiwiZnJhbWVfY3JvcF90b3Bfb2Zmc2V0IiwiZnJhbWVfY3JvcF9ib3R0b21fb2Zmc2V0IiwicGFyX3dpZHRoIiwicGFyX2hlaWdodCIsImZwcyIsImZwc19maXhlZCIsImZwc19udW0iLCJmcHNfZGVuIiwiYXNwZWN0X3JhdGlvX2lkYyIsInBhcl93X3RhYmxlIiwicGFyX2hfdGFibGUiLCJudW1fdW5pdHNfaW5fdGljayIsInRpbWVfc2NhbGUiLCJwYXJTY2FsZSIsImNyb3BfdW5pdF94IiwiY3JvcF91bml0X3kiLCJjb2RlY193aWR0aCIsImNvZGVjX2hlaWdodCIsInByZXNlbnRfd2lkdGgiLCJjZWlsIiwiY2hyb21hX2Zvcm1hdF9zdHJpbmciLCJnZXRDaHJvbWFGb3JtYXRTdHJpbmciLCJmcmFtZV9yYXRlIiwicGFyX3JhdGlvIiwid2lkdGgiLCJoZWlnaHQiLCJjb2RlY19zaXplIiwicHJlc2VudF9zaXplIiwibGFzdF9zY2FsZSIsIm5leHRfc2NhbGUiLCJkZWx0YV9zY2FsZSIsInRvRml4ZWQiLCJjaHJvbWEiLCJzcHNDb25maWciLCJjb2RlY1dpZHRoIiwiY29kZWNIZWlnaHQiLCJwcmVzZW50V2lkdGgiLCJwcmVzZW50SGVpZ2h0IiwicHJvZmlsZSIsImxldmVsIiwiYml0RGVwdGgiLCJjaHJvbWFGb3JtYXQiLCJwYXJSYXRpbyIsImZwc0RlbiIsImZwc051bSIsInRpbWVzY2FsZSIsIk0zVThQYXJzZXIiLCJUc0RlbXV4ZXIiLCJQbGF5bGlzdCIsIkZsdkRlbXV4ZXIiLCJEQVRBX1RZUEVTIiwiTlVNQkVSIiwiQk9PTEVBTiIsIlNUUklORyIsIk9CSkVDVCIsIk1JWF9BUlJBWSIsIk9CSkVDVF9FTkQiLCJTVFJJQ1RfQVJSQVkiLCJEQVRFIiwiTE9ORV9TVFJJTkciLCJyZWFkT2Zmc2V0IiwicmVzb2x2ZSIsIm1ldGFEYXRhIiwicGFyc2VWYWx1ZSIsImJvZHlTaXplIiwicmVzZXRTdGF0dXMiLCJwYXJzZVN0cmluZyIsInN0ckxlbiIsImdldFVpbnQxNiIsImlzTGUiLCJzdHIiLCJVVEY4IiwiZGVjb2RlIiwicGFyc2VEYXRlIiwiZHYiLCJ0cyIsImdldEZsb2F0NjQiLCJEYXRlIiwicGFyc2VPYmplY3QiLCJpc09iakVuZCIsInBhcnNlTG9uZ1N0cmluZyIsIkFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJnZXRVaW50OCIsIm9iakVuZFNpemUiLCJhbWZPYmoiLCJpc09iamVjdEVuZCIsImFtZlZhciIsImFyckxlbmd0aCIsInNjcmlwdCIsImRhdGUiLCJsb25nU3RyIiwiX2ZpcnN0RnJhZ21lbnRMb2FkZWQiLCJfdHJhY2tOdW0iLCJfaGFzU2NyaXB0IiwiREVNVVhfU1RBUlQiLCJkb1BhcnNlRmx2Iiwic3RyZWFtRmxhZyIsInJlc3VsdCIsImhhc1ZpZGVvIiwiaGFzQXVkaW8iLCJsb2FkZXJCdWZmZXIiLCJjaHVuayIsImxvb3BNYXgiLCJfcGFyc2VGbHZUYWciLCJERU1VWF9DT01QTEVURSIsInBhcnNlRmx2SGVhZGVyIiwiaXNGbHZGaWxlIiwicGxheVR5cGUiLCJnZXRQbGF5VHlwZSIsImluaXRWaWRlb1RyYWNrIiwiaW5pdEF1ZGlvVHJhY2siLCJERU1VWF9FUlJPUiIsIlZpZGVvVHJhY2tNZXRhIiwiQXVkaW9UcmFja01ldGEiLCJfcGFyc2VGbHZUYWdIZWFkZXIiLCJfcHJvY2Vzc0NodW5rIiwidGFnVHlwZSIsInRpbWVzdGFtcCIsInRpbWVzdGFtcEV4dCIsIl9wYXJzZVNjcmlwdERhdGEiLCJfcGFyc2VBQUNEYXRhIiwiX3BhcnNlSGV2Y0RhdGEiLCJpbmZvIiwiQU1GUGFyc2VyIiwib25NZXRhRGF0YSIsIm1lZGlhSW5mbyIsImhzYUF1ZGlvIiwiX2RhdGFzaXplVmFsaWRhdG9yIiwiTUVESUFfSU5GTyIsImhhc1NwZWNpZmljQ29uZmlnIiwiYXVkaW9zYW1wbGVyYXRlIiwic2FtcGxlUmF0ZSIsImF1ZGlvY2hhbm5lbHMiLCJzYW1wbGVSYXRlSW5kZXgiLCJmcmFtZXJhdGUiLCJfYWFjU2VxdWVuY2VIZWFkZXJQYXJzZXIiLCJvYmplY3RUeXBlIiwiX3N3aXRjaEF1ZGlvU2FtcGxlUmF0ZSIsImZyYW1lTGVuZ3RoIiwiZGVwZW5kc09uQ29yZUNvZGVyIiwiZXh0ZW5zaW9uRmxhZ0luZGV4IiwiZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCIsImNvbmZpZyIsInVzZXJBZ2VudCIsIm5hdmlnYXRvciIsInRvTG93ZXJDYXNlIiwic2FtcGxpbmdJbmRleCIsImluZGV4T2YiLCJ0cmFjayIsImZvcm1hdCIsIl9oYXNBdWRpb1NlcXVlbmNlIiwiX3N3aXRjaEF1ZGlvU2FtcGxpbmdGcmVxdWVuY3kiLCJmcmFtZUxlbnRoIiwiYXVkaW9TYW1wbGVSYXRlIiwiYXVkaW9TYW1wbGVSYXRlSW5kZXgiLCJ2YWxpZGF0ZSIsImFhY0hlYWRlciIsImF1ZGlvTWVkaWEiLCJNRVRBREFUQV9QQVJTRUQiLCJBVURJT19NRVRBREFUQV9DSEFOR0UiLCJfbWV0YUNoYW5nZSIsImZyYW1lVHlwZSIsImNvZGVjSUQiLCJhdmNQYWNrZXRUeXBlIiwicGFyc2VJbnQiLCJuYWx1Iiwic2l6ZXMiLCJhdmNjbGVuZ3RoIiwiX2F2Y1NlcXVlbmNlSGVhZGVyUGFyc2VyIiwiX2hhc1ZpZGVvU2VxdWVuY2UiLCJWSURFT19NRVRBREFUQV9DSEFOR0UiLCJjb25maWd1cmF0aW9uVmVyc2lvbiIsImF2Y1Byb2ZpbGVJbmRpY2F0aW9uIiwicHJvZmlsZUNvbXBhdGliaWxpdHkiLCJhdmNMZXZlbEluZGljYXRpb24iLCJuYWxVbml0TGVuZ3RoIiwibnVtT2ZTcHMiLCJqIiwiY29kZWNTdHJpbmciLCJoIiwidG9TdHJpbmciLCJudW1PZlBwcyIsInRvVmlkZW9NZXRhIiwidmlkZW9NZWRpYSIsImF2Y2MiLCJzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4IiwiX3N3aXRjaEF1ZGlvQ2hhbm5lbCIsImRhdGFzaXplQ29uZmlybSIsInRleHQiLCJiYXNldXJsIiwic3BsaXQiLCJyZWZzIiwicmVmIiwibWF0Y2giLCJyZWZtIiwicmVmZCIsInZlcnNpb24iLCJzZXF1ZW5jZSIsInRhcmdldGR1cmF0aW9uIiwicGFyc2VGbG9hdCIsInBhcnNlRnJhZyIsInBhcnNlRGVjcnlwdCIsImZyYWdzIiwiZnJlZyIsIm5leHRsaW5lIiwiY2hhckF0IiwidXJsIiwidXJscyIsImVuY3J5cHQiLCJjbWQiLCJtZXRob2QiLCJ1cmkiLCJpdiIsIml2YiIsImltIiwic3Vic3RyIiwiU3RyZWFtVHlwZSIsImNvbmZpZ3MiLCJkZW11eGluZyIsInBhdCIsInBtdCIsIl9oYXNWaWRlb01ldGEiLCJfaGFzQXVkaW9NZXRhIiwiZGVtdXgiLCJmcmFnIiwiaW5wdXRCdWZmZXIiLCJwZXNlcyIsInRzU3RyZWFtIiwiU3RyZWFtIiwicmVhZCIsInBlcyIsInBpZCIsIkVTIiwicGF5bG9hZCIsInN0cmVhbSIsIkF1ZGlvT3B0aW9ucyIsIlZpZGVvT3B0aW9ucyIsImVwZXNlcyIsIk1lcmdlIiwicHVzaEF1ZGlvU2FtcGxlIiwicHVzaFZpZGVvU2FtcGxlIiwiX3RyYWNrcyIsImZyZXF1ZW5jZSIsImNoYW5uZWwiLCJhdWRpb09iamVjdFR5cGUiLCJhdWRpb0NvbmZpZyIsImZyZXF1ZW5jeUluZGV4IiwibWV0YUVxdWFsIiwiY29tcGFpcmVNZXRhIiwiQXVkaW9UcmFja1NhbXBsZSIsImdldE5hbHVuaXRzIiwic2FtcGxlTGVuZ3RoIiwibmFsIiwic2FyUmF0aW8iLCJzYXJfcmF0aW8iLCJnZXRBdmNjIiwiVmlkZW9UcmFja1NhbXBsZSIsImRlc3RvcnkiLCJhbCIsImJsIiwiaWdub3JlRHVyYXRpb24iLCJrIiwiaXRlbWEiLCJpdGVtYiIsImNvbXBhaXJlQXJyYXkiLCJidWZmZXJzIiwicmVhZEhlYWRlciIsInJlYWRQYXlsb2FkIiwicGFja2V0IiwidW5rbm93blBJRHMiLCJQRVMiLCJQQVQiLCJDQVQiLCJUU0RUIiwic29tZSIsIml0ZW0iLCJQTVQiLCJzdHMiLCJNZWRpYSIsInN0cmVhbVR5cGUiLCJzeW5jIiwicmVhZFVpbnQ4IiwicmVhZFVpbnQxNiIsInByaW9yaXR5Iiwic2NyYW1ibGluZyIsImFkYXB0YXRpb24iLCJjb250aW51aXR5IiwidGFiZWxJRCIsInplcm8iLCJzZWN0aW9uTGVuZ3RoIiwic3RyZWFtSUQiLCJzZWN0aW9uTnVtYmVyIiwibGFzdFNlY3Rpb25OdW1iZXIiLCJOIiwicHJvZ3JhbU51bWJlciIsInByb2dyYW0iLCJ0YWJsZUlEIiwib3JkZXIiLCJsYXN0T3JkZXIiLCJQQ1JfUElEIiwicHJvZ3JhbUxlbmd0aCIsImVzIiwibWFwIiwiYWRhcHRhdGlvbkxlbmd0aCIsImFjY2VzcyIsIlBDUiIsIk9QQ1IiLCJzcGxpY2VQb2ludCIsInRyYW5zcG9ydFByaXZhdGUiLCJhZGFwdGF0aW9uRmllbGQiLCJfc3RhcnQiLCJwcm9ncmFtQ2xvY2tCYXNlIiwicmVhZFVpbnQzMiIsInByb2dyYW1DbG9ja0V4dGVuc2lvbiIsIm9yaWdpblByb2dyYW1DbG9ja0Jhc2UiLCJvcmlnaW5Qcm9ncmFtQ2xvY2tFeHRlbnNpb24iLCJzcGxpY2VDb3VudGRvd24iLCJ0cmFuc3BvcnRQcml2YXRlRGF0YSIsInBpZWNld2lzZSIsInNlYW1sZXNzIiwibHR3VmFsaWQiLCJsdHdPZmZzZXQiLCJyZWFkVWludDI0IiwicGllY2V3aXNlUmF0ZSIsInJlYWRJbnQ4Iiwic3BsaWNlVHlwZSIsImR0c05leHRBVTEiLCJtYXJrZXIxIiwiZHRzTmV4dEFVMiIsIm1hcmtlcjIiLCJkdHNOZXh0QVUzIiwibGFzdFN0dWZmaW5nIiwicGFja2V0TGVuZ3RoIiwicHRzRFRTRmxhZyIsImVzY3JGbGFnIiwiZXNSYXRlRmxhZyIsImRzbUZsYWciLCJhZGRpdGlvbmFsRmxhZyIsImNyY0ZsYWciLCJleHRlbnNpb25GbGFnIiwicGVzSGVhZGVyTGVuZ3RoIiwiTjEiLCJlc2NyIiwiZXgiLCJlc1JhdGUiLCJhZGRpdGlvbmFsQ29weUluZm8iLCJwZXNDUkMiLCJiYWNrIiwiZnEiLCJsYXllciIsImFic2VudCIsImdldEF1ZGlvQ29uZmlnIiwic2VjdGlvbkluZGljYXRvciIsImN1cnJlbnROZXh0SW5kaWNhdG9yIiwiY3JjMzIiLCJleHRlbnNpb25TYW1wbGVJbmRleCIsInRlc3QiLCJpbnB1dGJ1ZmZlciIsIl9iYXNlVVJMIiwiX2xpc3QiLCJfdHMiLCJmcmFnTGVuZ3RoIiwiX2xhc3RnZXQiLCJfYXVkb2NsZWFyIiwiYXV0b2NsZWFyIiwiYmFzZVVSTCIsImRvd25sb2FkZWQiLCJkb3dubG9hZGluZyIsImRlbGV0ZUZyYWciLCJ0aW1lIiwicHVzaE0zVTgiLCJkZWxldGVwcmUiLCJuZXdmcmFnbGlzdCIsInRzbGlzdCIsImdldFRzTGlzdCIsInRzbmFtZSIsImlzbG9hZGVkIiwibG9hZGluZyIsImdldFRzQnlOYW1lIiwiZ2V0VHMiLCJ0aW1lbGlzdCIsImNsZWFyRG93bmxvYWRlZCIsIkZldGNoTG9hZGVyIiwiTE9BREVSX0VWRU5UUyIsInN0YXR1cyIsIl9yZWFkZXIiLCJfY2FuY2VsZWQiLCJfZGVzdHJveWVkIiwicmVhZHR5cGUiLCJfbG9hZGVyVGFza05vIiwiTEFERVJfU1RBUlQiLCJsb2FkIiwib3B0cyIsIl90aGlzIiwicGFyYW1zIiwiZ2V0UGFyYW1zIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsIl9vbkZldGNoUmVzcG9uc2UiLCJMT0FERVJfRVJST1IiLCJjYXRjaCIsInRhc2tubyIsImpzb24iLCJMT0FERVJfQ09NUExFVEUiLCJhcnJheUJ1ZmZlciIsIl9vblJlYWRlciIsImdldFJlYWRlciIsInJlYWRlciIsImNhbmNlbCIsImUiLCJ2YWwiLCJkb25lIiwiTE9BREVSX0RBVEFMT0FERUQiLCJoZWFkZXJzIiwiSGVhZGVycyIsImNhY2hlIiwiY29uZmlnSGVhZGVycyIsImFwcGVuZCIsIm9wdEhlYWRlcnMiLCJjb3JzIiwid2l0aENyZWRlbnRpYWxzIiwiY3JlZGVudGlhbHMiLCJNcDRSZW11eGVyIiwiRm1wNCIsIkJ1ZmZlciIsIndyaXRlVWludDMyIiwiY29udGVudCIsIndyaXRlIiwiZmxhZyIsImluaXRCb3giLCJ0cmFrIiwibXZoZCIsInZpZGVvVHJhayIsImF1ZGlvVHJhayIsIm12ZXgiLCJmb3JFYWNoIiwiYnl0ZXMiLCJ0a2hkIiwibWRpYSIsInNhbXBsZXJhdGUiLCJtZWRpYVRpbWUiLCJtZGhkIiwiaGRsciIsIm1pbmYiLCJleHRlbnNpb24iLCJ2bWhkIiwic21oZCIsImRpbmYiLCJzdGJsIiwic3RzZCIsInN0dHMiLCJzdHNjIiwic3RzeiIsInN0Y28iLCJtcDRhIiwiYXZjMSIsImVzZHMiLCJjb25maWdsZW4iLCJoU3BhY2luZyIsInZTcGFjaW5nIiwiYnRydCIsInBhc3AiLCJ0cmFja0lEIiwibWVoZCIsInRyZXgiLCJtZmhkIiwidHJhZiIsInRmaGQiLCJ0ZmR0Iiwic2R0cCIsInRydW4iLCJzZHRwTGVuZ3RoIiwic2FtcGxlQ291bnQiLCJmbGFncyIsImlzTGVhZGluZyIsImRlcGVuZHNPbiIsImlzRGVwZW5kZWRPbiIsImhhc1JlZHVuZGFuY3kiLCJpc05vblN5bmMiLCJudW0iLCJtZGF0Qm94IiwiY2hhckNvZGVBdCIsIl9pc0R0c0Jhc2VJbml0ZWQiLCJfYXVkaW9OZXh0RHRzIiwiX3ZpZGVvTmV4dER0cyIsIl92aWRlb1NlZ21lbnRMaXN0IiwiTWVkaWFTZWdtZW50TGlzdCIsIl9hdWRpb1NlZ21lbnRMaXN0IiwiYnJvd3NlciIsInNuaWZmZXIiLCJfZmlsbFNpbGVuY2VGcmFtZSIsImlzRmlyc3RWaWRlbyIsImlzRmlyc3RBdWRpbyIsInZpZGVvQWxsRHVyYXRpb24iLCJhdWRpb0FsbER1cmF0aW9uIiwicmVtdXgiLCJSRU1VWF9NRVRBREFUQSIsIm9uTWV0YURhdGFSZWFkeSIsIkRFVEVDVF9DSEFOR0VfU1RSRUFNIiwicmVzZXREdHNCYXNlIiwiX2R0c0Jhc2VJbml0ZWQiLCJjYWxjRHRzQmFzZSIsIl9yZW11eFZpZGVvIiwiX3JlbXV4QXVkaW8iLCJzZWVrIiwicHJlc291cmNlYnVmZmVyIiwicmVtdXhJbml0U2VnbWVudCIsIklOSVRfU0VHTUVOVCIsImluaXRTZWdtZW50IiwiZnR5cCIsIm1vb3YiLCJhdWRpb0Jhc2UiLCJ2aWRlb0Jhc2UiLCJtcDRTYW1wbGVzIiwiYXZjU2FtcGxlIiwibWRhdFNhbXBsZSIsInNhbXBsZUR1cmF0aW9uIiwidmlkZW9NZXRhIiwiUkFORE9NX0FDQ0VTU19QT0lOVCIsIm1vb2ZNZGF0IiwibW9vZiIsIm1kYXQiLCJ3cml0ZVRvU291cmNlIiwiTUVESUFfU0VHTUVOVCIsImxhc3RTYW1wbGUiLCJpc0ZpcnN0RHRzSW5pdGVkIiwiYXVkaW9NZXRhIiwibXA0U2FtcGxlIiwiaW5pdFNpbGVudEF1ZGlvIiwiX2F1ZGlvTWV0YSIsIkNvbnRleHQiLCJXT1JLRVJfQ09NTUFORFMiLCJNZWRpYUluZm8iLCJNZWRpYVNhbXBsZSIsIk1lZGlhU2VnbWVudCIsIk1zZSIsIkNyeXB0byIsIlJlc3VsdENvbnN0cnVjdG9yIiwidG90YWxMZW5ndGgiLCJfbGVuIiwiYXJyYXlzIiwiX2tleSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJpdGVyYXRvciIsInJldHVybiIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsIl9hcnIiLCJvYmoiLCJfY29uY2F0MiIsIlJFTVVYX0VSUk9SIiwiTVNFX0VWRU5UUyIsIlNPVVJDRV9VUERBVEVfRU5EIiwiSExTX0VWRU5UUyIsIlJFVFJZX1RJTUVfRVhDRUVERUQiLCJBTExFVkVOVFMiLCJGbHZBbGxvd2VkRXZlbnRzIiwiSGxzQWxsb3dlZEV2ZW50cyIsIkNSWVRPX0VWRU5UUyIsIlNUQVJUX0RFQ1JZUFQiLCJERUNSWVBURUQiLCJDT05URVhUX0NPTU9NQU5EUyIsIk9OIiwiT05DRSIsIk9GRiIsIkVNSVQiLCJERVNUUk9ZIiwiRElSRUNUX0VNSVRfRkxBRyIsImFsbG93ZWRFdmVudHMiLCJfZW1pdHRlciIsIl9pbnN0YW5jZU1hcCIsIl9jbHNNYXAiLCJfaW5pdGVkIiwiX2hvb2tzIiwidGFnIiwiaW5pdEluc3RhbmNlIiwibmV3SW5zdGFuY2UiLCJyZWdpc3RyeSIsImNscyIsImNoZWNrTWVzc2FnZU5hbWUiLCJfaXNNZXNzYWdlTmFtZVZhbGlkIiwic2VsZiIsIm9uY2VMaXN0ZW5lcnMiLCJtZXNzYWdlTmFtZSIsImNhbGxiYWNrIiwiYmVmb3JlTGlzdCIsImVtaXRUbyIsInJlbW92ZUxpc3RlbmVycyIsImhhc093biIsImNhbGxiYWNrcyIsImRlc3Ryb3lJbnN0YW5jZXMiLCJvdXRwdXRCdWZmZXIiLCJvdXRwdXRidWZmZXIiLCJjcnlwdG8iLCJtc0NyeXB0byIsImRlY3JpcHQiLCJhZXNrZXkiLCJkZWNyaXB0RGF0YSIsInN1YnRsZSIsImltcG9ydEtleSIsImRlY3J5cHQiLCJyZXMiLCJsZSIsInNldEludDE2IiwiSW50MTZBcnJheSIsIm9zIiwiaXNQYyIsImlzVGFibGV0IiwidWEiLCJyZWciLCJpZSIsImZpcmZveCIsImNocm9tZSIsIm9wZXJhIiwic2FmYXJpIiwiaXNXaW5kb3dzUGhvbmUiLCJpc1N5bWJpYW4iLCJpc0FuZHJvaWQiLCJpc0ZpcmVGb3giLCJpc1Bob25lIiwib3V0IiwiaW5wdXQiLCJmcm9tQ2hhckNvZGUiLCJfY2hlY2tDb250aW51YXRpb24iLCJ1Y3M0Iiwiam9pbiIsImNoZWNrTGVuZ3RoIiwiaXNPYmplY3RGaWxsZWQiLCJtaW1lVHlwZSIsImlzQ29tcGxldGUiLCJpc0Jhc2VJbmZvUmVhZHkiLCJpc1ZpZGVvUmVhZHkiLCJpc0F1ZGlvUmVhZHkiLCJfZGVmYXVsdCIsImdldERlZmF1bHRJbmYiLCJlbnRyaWVzIiwidiIsImlzUkFQIiwiX3R5cGUiLCJfbGFzdEFwcGVuZExvY2F0aW9uIiwiaXNFbXB0eSIsIl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZSIsImJlZ2luRHRzIiwibGFzdCIsIm1pZCIsImxib3VuZCIsInVib3VuZCIsImlkeCIsIl9zZWFyY2hOZWFyZXN0U2VnbWVudEFmdGVyIiwic2VnbWVudCIsImxhc3RBcHBlbmRJZHgiLCJpbnNlcnRJZHgiLCJvcmlnaW5TdGFydER0cyIsImdldExhc3RTZWdtZW50QmVmb3JlIiwiZ2V0TGFzdFNhbXBsZUJlZm9yZSIsImdldExhc3RSQVBCZWZvcmUiLCJzZWdtZW50SWR4IiwicmFuZG9tQWNjZXNzUG9pbnRzIiwic3RhcnREdHMiLCJlbmREdHMiLCJzdGFydFB0cyIsImVuZFB0cyIsIm9yaWdpbkVuZER0cyIsImFkZFJBUCIsImdldERlZmF1bHQiLCJNU0UiLCJjb250YWluZXIiLCJtZWRpYVNvdXJjZSIsInNvdXJjZUJ1ZmZlcnMiLCJwcmVsb2FkVGltZSIsIm9uU291cmNlT3BlbiIsIm9uVGltZVVwZGF0ZSIsIm9uVXBkYXRlRW5kIiwib25XYWl0aW5nIiwiTWVkaWFTb3VyY2UiLCJhZGRFdmVudExpc3RlbmVyIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiYWRkU291cmNlQnVmZmVycyIsImRvQXBwZW5kIiwicmVhZHlTdGF0ZSIsImFkZCIsImR1ciIsIm1pbWUiLCJzb3VyY2VCdWZmZXIiLCJhZGRTb3VyY2VCdWZmZXIiLCJ1cGRhdGluZyIsImluaXRlZCIsImFwcGVuZEJ1ZmZlciIsImVuZE9mU3RyZWFtIiwiYWN0aXZlU291cmNlQnVmZmVycyIsInJlbW92ZSIsInJlbW92ZUJ1ZmZlcnMiLCJ0YXNrTGlzdCIsInRhc2siLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUHJvbWlzZSIsImRvQ2xlYW5CdWZmZXIiLCJyZXRyeVRpbWUiLCJjbGVhbiIsInNldFRpbWVvdXQiLCJjbGVhckJ1ZmZlciIsImJ1ZmZlcmVkIiwiYWxsIiwicmVtb3ZlU291cmNlQnVmZmVyIiwicmV2b2tlT2JqZWN0VVJMIiwiYkVuZCIsInRlbXAiLCJoZXhOdW0iLCJwYWRTdGFydCIsImxvb3AiLCJzaWduIiwicmVhZFVpbnQ2NCIsInJlYWRJbnQxNiIsInJlYWRJbnQzMiIsIkxvZ2dlciIsInBsYXllciIsIl9wbGF5ZXIiLCJpbml0U2VnbWVudEFycml2ZWQiLCJidWZmZXJDbGVhclRpbWVyIiwiUmVtdXhlciIsImNvbXBhdGliaWxpdHkiLCJtc2UiLCJfaGFuZGxlVGltZVVwZGF0ZSIsImluaXRMaXN0ZW5lcnMiLCJfaGFuZGxlTG9hZGVyRGF0YUxvYWRlZCIsIl9oYW5kbGVOZXR3b3JrRXJyb3IiLCJfaGFuZGxlTWVkaWFJbmZvIiwiX2hhbmRsZU1ldGFkYXRhUGFyc2VkIiwiX2hhbmRsZURlbXV4Q29tcGxldGUiLCJfaGFuZGxlRGVtdXhFcnJvciIsIl9oYW5kbGVBcHBlbmRJbml0U2VnbWVudCIsIl9oYW5kbGVNZWRpYVNlZ21lbnQiLCJfaGFuZGxlQWRkUkFQIiwiX2hhbmRsZVNvdXJjZVVwZGF0ZUVuZCIsImN1cnJlbnRUaW1lIiwiYnVmZmVyRW5kIiwiYnVmZmVyU3RhcnQiLCJnZXRCdWZmZXJlZFJhbmdlIiwicmFwIiwiUGxheWVyIiwiRXJyb3JzIiwiX29uRXJyb3IiLCJmYXRhbCIsIm1vZCIsImVycm9yVHlwZSIsImVycm9yRGV0YWlscyIsImVycm9yRmF0YWwiLCJsb2FkRGF0YSIsInBhdXNlIiwibG9hZGVyIiwiZmx2QWxsb3dlZEV2ZW50cyIsIkZsdlBsYXllciIsImluaXRFdmVudHMiLCJsb2FkZXJDb21wbGV0ZVRpbWVyIiwiaW5pdEZsdiIsImZsdiIsImluaXRGbHZFdmVudHMiLCJ1dGlsIiwiYWRkQ2xhc3MiLCJyb290IiwiZmluZERvbSIsImxpdmUiLCJjcmVhdGVEb20iLCJjb250cm9scyIsImFwcGVuZENoaWxkIiwicGF1c2VkIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwicmFuZ2UiLCJGTFYiLCJwbGF5IiwiX2hhc1N0YXJ0IiwiX2Rlc3Ryb3kiLCJjdXJyZW50U3JjIiwiZiIsImciLCJfIiwieSIsIkUiLCJTIiwiQSIsIlQiLCJEIiwieCIsIkwiLCJPIiwiTSIsIkIiLCJpc0xpdmUiLCJoYW5kbGVUaW1lVXBkYXRlIiwiaGFuZGxlU2VlayIsImxvYWROZXh0IiwidSIsInJhbmdlU3VwcG9ydCIsInRpbWVzIiwiTUFYX1NBRkVfSU5URUdFUiIsImZpbGVwb3NpdGlvbnMiLCJsb2FkTWV0YSIsImlzU2Vla2FibGUiLCJnZXRTZWVrUmFuZ2UiLCJjb21wYXQiLCJnZXROZXh0UmFuZ2UiLCJSYW5nZSIsImxvYWRGYWxsYmFjayIsImtleWZyYW1lcyIsImZpbmRGaWxlUG9zaXRpb24iLCJGbHZMaXZlUGxheWVyIiwiRmx2Vm9kUGxheWVyIl0sIm1hcHBpbmdzIjoiNkJBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBMERmLE9BckRBRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksR0FJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEc7Ozs7MkRDekUxQyxJQUFTQyxFQUFqQkMsT0FQRGxDLEVBQU9ELFNBT1drQyxFQVBPRSxpQkFBUSxZLFlDRGpDLElBQUl2QyxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBR0EsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxLQUdBRixFQUFPRCxRQTBEZixPQXJEQUYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWUEsRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPQSxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVlBLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxHOzs7OzhDQzNEckQsSUFPSUksRUFQQUMsRUFBdUIsaUJBQVpDLFFBQXVCQSxRQUFVLEtBQzVDQyxFQUFlRixHQUF3QixtQkFBWkEsRUFBRUcsTUFDN0JILEVBQUVHLE1BQ0YsU0FBc0JDLEVBQVFDLEVBQVVDLEdBQ3hDLE9BQU9DLFNBQVNmLFVBQVVXLE1BQU1wQyxLQUFLcUMsRUFBUUMsRUFBVUMsSUFLekRQLEVBREVDLEdBQTBCLG1CQUFkQSxFQUFFUSxRQUNDUixFQUFFUSxRQUNWbEMsT0FBT21DLHNCQUNDLFNBQXdCTCxHQUN2QyxPQUFPOUIsT0FBT29DLG9CQUFvQk4sR0FDL0JPLE9BQU9yQyxPQUFPbUMsc0JBQXNCTCxLQUd4QixTQUF3QkEsR0FDdkMsT0FBTzlCLE9BQU9vQyxvQkFBb0JOLElBUXRDLElBQUlRLEVBQWNDLE9BQU9DLE9BQVMsU0FBcUJqQyxHQUNyRCxPQUFPQSxHQUFVQSxHQUduQixTQUFTa0MsSUFDUEEsRUFBYUMsS0FBS2pELEtBQUtrRCxNQUV6QnRELEVBQU9ELFFBQVVxRCxFQUdqQkEsRUFBYUEsYUFBZUEsRUFFNUJBLEVBQWF2QixVQUFVMEIsZUFDdkJILEVBQWF2QixVQUFVMkIsYUFBZSxFQUN0Q0osRUFBYXZCLFVBQVU0QixxQkFJdkIsSUFBSUMsRUFBc0IsR0FvQzFCLFNBQVNDLEVBQWlCQyxHQUN4QixnQkFBSUEsRUFBS0gsY0FDQUwsRUFBYU0sb0JBQ2ZFLEVBQUtILGNBbURkLFNBQVNJLEVBQWFwQixFQUFRcUIsRUFBTUMsRUFBVUMsR0FDNUMsSUFBSTNELEVBQ0E0RCxFQUNBQyxFQW5Ic0JDLEVBcUgxQixHQUF3QixtQkFBYkosRUFDVCxNQUFNLElBQUlLLFVBQVUsMEVBQTRFTCxHQXFCbEcsUUFBSSxLQWxCSkUsRUFBU3hCLEVBQU9jLFVBRWRVLEVBQVN4QixFQUFPYyxRQUFVNUMsT0FBT1ksT0FBTyxNQUN4Q2tCLEVBQU9lLGFBQWUsYUFJbEJTLEVBQU9JLGNBQ1Q1QixFQUFPNkIsS0FBSyxjQUFlUixFQUNmQyxFQUFTQSxTQUFXQSxFQUFTQSxTQUFXQSxHQUlwREUsRUFBU3hCLEVBQU9jLFNBRWxCVyxFQUFXRCxFQUFPSCxhQUdoQkksRUFFRkEsRUFBV0QsRUFBT0gsR0FBUUMsSUFDeEJ0QixFQUFPZSxrQkFlVCxHQWJ3QixtQkFBYlUsRUFFVEEsRUFBV0QsRUFBT0gsR0FDaEJFLEVBQVUsQ0FBQ0QsRUFBVUcsR0FBWSxDQUFDQSxFQUFVSCxHQUVyQ0MsRUFDVEUsRUFBU0ssUUFBUVIsR0FFakJHLEVBQVNNLEtBQUtULElBSWhCMUQsRUFBSXNELEVBQWlCbEIsSUFDYixHQUFLeUIsRUFBU08sT0FBU3BFLElBQU02RCxFQUFTUSxPQUFRLENBQ3BEUixFQUFTUSxVQUdULElBQUlDLEVBQUksSUFBSUMsTUFBTSwrQ0FDRVYsRUFBU08sT0FBUyxJQUFNSSxPQUFPZixHQUFRLHFFQUczRGEsRUFBRW5FLEtBQU8sOEJBQ1RtRSxFQUFFRyxRQUFVckMsRUFDWmtDLEVBQUViLEtBQU9BLEVBQ1RhLEVBQUVJLE1BQVFiLEVBQVNPLE9BeEtHTixFQXlLSFEsRUF4S25CSyxTQUFXQSxRQUFRQyxNQUFNRCxRQUFRQyxLQUFLZCxHQTRLMUMsT0FBTzFCLEVBY1QsU0FBU3lDLElBRVAsSUFEQSxJQUFJdkMsRUFBTyxHQUNGMUMsRUFBSSxFQUFHQSxFQUFJa0YsVUFBVVYsT0FBUXhFLElBQUswQyxFQUFLNkIsS0FBS1csVUFBVWxGLElBQzFEcUQsS0FBSzhCLFFBQ1I5QixLQUFLYixPQUFPNEMsZUFBZS9CLEtBQUtRLEtBQU1SLEtBQUtnQyxRQUMzQ2hDLEtBQUs4QixTQUNMN0MsRUFBYWUsS0FBS1MsU0FBVVQsS0FBS2IsT0FBUUUsSUFJN0MsU0FBUzRDLEVBQVU5QyxFQUFRcUIsRUFBTUMsR0FDL0IsSUFBSXlCLEVBQVEsQ0FBRUosT0FBT0EsRUFBT0UsWUFBUUEsRUFBVzdDLE9BQVFBLEVBQVFxQixLQUFNQSxFQUFNQyxTQUFVQSxHQUNqRjBCLEVBQVVQLEVBQVl6RCxLQUFLK0QsR0FHL0IsT0FGQUMsRUFBUTFCLFNBQVdBLEVBQ25CeUIsRUFBTUYsT0FBU0csRUFDUkEsRUFnSVQsU0FBU0MsRUFBV2pELEVBQVFxQixFQUFNNkIsR0FDaEMsSUFBSTFCLEVBQVN4QixFQUFPYyxRQUVwQixRQUFJLElBQUFVLEVBQ0YsTUFBTyxHQUVULElBQUkyQixFQUFhM0IsRUFBT0gsR0FDeEIsZ0JBQUk4QixFQUNLLEdBRWlCLG1CQUFmQSxFQUNGRCxFQUFTLENBQUNDLEVBQVc3QixVQUFZNkIsR0FBYyxDQUFDQSxHQUVsREQsRUFzRFQsU0FBeUJFLEdBRXZCLElBREEsSUFBSUMsRUFBTSxJQUFJQyxNQUFNRixFQUFJcEIsUUFDZnhFLEVBQUksRUFBR0EsRUFBSTZGLEVBQUlyQixTQUFVeEUsRUFDaEM2RixFQUFJN0YsR0FBSzRGLEVBQUk1RixHQUFHOEQsVUFBWThCLEVBQUk1RixHQUVsQyxPQUFPNkYsRUFMVCxDQXJEb0JGLEdBQWNJLEVBQVdKLEVBQVlBLEVBQVduQixRQW9CcEUsU0FBU3dCLEVBQWNuQyxHQUNyQixJQUFJRyxFQUFTWCxLQUFLQyxRQUVsQixRQUFJLElBQUFVLEVBQXNCLENBQ3hCLElBQUkyQixFQUFhM0IsRUFBT0gsR0FFeEIsR0FBMEIsbUJBQWY4QixFQUNULE9BQU8sRUFDRixRQUFJLElBQUFBLEVBQ1QsT0FBT0EsRUFBV25CLE9BSXRCLE9BQU8sRUFPVCxTQUFTdUIsRUFBV0gsRUFBS25FLEdBRXZCLElBREEsSUFBSXdFLEVBQU8sSUFBSUgsTUFBTXJFLEdBQ1p6QixFQUFJLEVBQUdBLEVBQUl5QixJQUFLekIsRUFDdkJpRyxFQUFLakcsR0FBSzRGLEVBQUk1RixHQUNoQixPQUFPaUcsRUE1V1R2RixPQUFPQyxlQUFld0MsRUFBYyxzQkFBdUIsQ0FDekR2QyxZQUFZQSxFQUNaQyxJQUFLLFdBQ0gsT0FBTzRDLEdBRVR5QyxJQUFLLFNBQVNDLEdBQ1osR0FBbUIsaUJBQVJBLEdBQW9CQSxFQUFNLEdBQUtuRCxFQUFZbUQsR0FDcEQsTUFBTSxJQUFJQyxXQUFXLGtHQUFvR0QsRUFBTSxLQUVqSTFDLEVBQXNCMEMsS0FJMUJoRCxFQUFhQyxLQUFPLG9CQUVkQyxLQUFLQyxTQUNMRCxLQUFLQyxVQUFZNUMsT0FBTzJGLGVBQWVoRCxNQUFNQyxVQUMvQ0QsS0FBS0MsUUFBVTVDLE9BQU9ZLE9BQU8sTUFDN0IrQixLQUFLRSxhQUFlLEdBR3RCRixLQUFLRyxjQUFnQkgsS0FBS0csdUJBSzVCTCxFQUFhdkIsVUFBVTBFLGdCQUFrQixTQUF5QjdFLEdBQ2hFLEdBQWlCLGlCQUFOQSxHQUFrQkEsRUFBSSxHQUFLdUIsRUFBWXZCLEdBQ2hELE1BQU0sSUFBSTJFLFdBQVcsZ0ZBQWtGM0UsRUFBSSxLQUc3RyxPQURBNEIsS0FBS0csY0FBZ0IvQixFQUNkNEIsTUFTVEYsRUFBYXZCLFVBQVUyRSxnQkFBa0IsV0FDdkMsT0FBTzdDLEVBQWlCTCxPQUcxQkYsRUFBYXZCLFVBQVV5QyxLQUFPLFNBQWNSLEdBRTFDLElBREEsSUFBSW5CLEVBQU8sR0FDRjFDLEVBQUksRUFBR0EsRUFBSWtGLFVBQVVWLE9BQVF4RSxJQUFLMEMsRUFBSzZCLEtBQUtXLFVBQVVsRixJQUMvRCxJQUFJd0csRUFBb0IsVUFBVDNDLEVBRVhHLEVBQVNYLEtBQUtDLFFBQ2xCLFFBQUksSUFBQVUsRUFDRndDLEVBQVdBLFlBQVd4QyxFQUFPeUMsV0FDMUIsSUFBS0QsRUFDUixPQUFPLEVBR1QsR0FBSUEsRUFBUyxDQUNYLElBQUlFLEVBR0osR0FGSWhFLEVBQUs4QixPQUFTLElBQ2hCa0MsRUFBS2hFLEVBQUssSUFDUmdFLGFBQWMvQixNQUdoQixNQUFNK0IsRUFHUixJQUFJQyxFQUFNLElBQUloQyxNQUFNLG9CQUFzQitCLEVBQUssS0FBT0EsRUFBR0UsUUFBVSxJQUFNLEtBRXpFLE1BREFELEVBQUlFLFFBQVVILEVBQ1JDLEVBR1IsSUFBSUcsRUFBVTlDLEVBQU9ILEdBRXJCLFFBQUksSUFBQWlELEVBQ0YsT0FBTyxFQUVULEdBQXVCLG1CQUFaQSxFQUNUeEUsRUFBYXdFLEVBQVN6RCxLQUFNWCxPQUU1QixLQUFJcUUsRUFBTUQsRUFBUXRDLE9BQ2R3QyxFQUFZakIsRUFBV2UsRUFBU0MsR0FDcEMsSUFBUy9HLEVBQUksRUFBR0EsRUFBSStHLElBQU8vRyxFQUN6QnNDLEVBQWEwRSxFQUFVaEgsR0FBSXFELEtBQU1YLEdBR3JDLFVBbUVGUyxFQUFhdkIsVUFBVXFGLFlBQWMsU0FBcUJwRCxFQUFNQyxHQUM5RCxPQUFPRixFQUFhUCxLQUFNUSxFQUFNQyxPQUdsQ1gsRUFBYXZCLFVBQVVzRixHQUFLL0QsRUFBYXZCLFVBQVVxRixZQUVuRDlELEVBQWF2QixVQUFVdUYsZ0JBQ25CLFNBQXlCdEQsRUFBTUMsR0FDN0IsT0FBT0YsRUFBYVAsS0FBTVEsRUFBTUMsT0FxQnRDWCxFQUFhdkIsVUFBVXdGLEtBQU8sU0FBY3ZELEVBQU1DLEdBQ2hELEdBQXdCLG1CQUFiQSxFQUNULE1BQU0sSUFBSUssVUFBVSwwRUFBNEVMLEdBR2xHLE9BREFULEtBQUs2RCxHQUFHckQsRUFBTXlCLEVBQVVqQyxLQUFNUSxFQUFNQyxJQUM3QlQsTUFHVEYsRUFBYXZCLFVBQVV5RixvQkFDbkIsU0FBNkJ4RCxFQUFNQyxHQUNqQyxHQUF3QixtQkFBYkEsRUFDVCxNQUFNLElBQUlLLFVBQVUsMEVBQTRFTCxHQUdsRyxPQURBVCxLQUFLOEQsZ0JBQWdCdEQsRUFBTXlCLEVBQVVqQyxLQUFNUSxFQUFNQyxJQUMxQ1QsTUFJYkYsRUFBYXZCLFVBQVV3RCxlQUNuQixTQUF3QnZCLEVBQU1DLEdBQzVCLElBQUl3RCxFQUFNdEQsRUFBUXVELEVBQVV2SCxFQUFHd0gsRUFFL0IsR0FBd0IsbUJBQWIxRCxFQUNULE1BQU0sSUFBSUssVUFBVSwwRUFBNEVMLEdBSWxHLFFBQUksS0FESkUsRUFBU1gsS0FBS0MsU0FFWixPQUFPRCxLQUdULFFBQUksS0FESmlFLEVBQU90RCxFQUFPSCxJQUVaLE9BQU9SLEtBRVQsR0FBSWlFLElBQVN4RCxHQUFZd0QsRUFBS3hELFdBQWFBLEVBQ2IsS0FBdEJULEtBQUtFLGFBQ1RGLEtBQUtDLFFBQVU1QyxPQUFPWSxPQUFPLGNBRXRCMEMsRUFBT0gsR0FDVkcsRUFBT29CLGdCQUNUL0IsS0FBS2dCLEtBQUssaUJBQWtCUixFQUFNeUQsRUFBS3hELFVBQVlBLFNBRWxELEdBQW9CLG1CQUFUd0QsRUFBcUIsQ0FHckMsSUFGQUMsR0FBWSxFQUVQdkgsRUFBSXNILEVBQUs5QyxPQUFTLEVBQUd4RSxHQUFLLEVBQUdBLElBQ2hDLEdBQUlzSCxFQUFLdEgsS0FBTzhELEdBQVl3RCxFQUFLdEgsR0FBRzhELFdBQWFBLEVBQVUsQ0FDekQwRCxFQUFtQkYsRUFBS3RILEdBQUc4RCxTQUMzQnlELEVBQVd2SCxFQUNYLE1BSUosR0FBSXVILEVBQVcsRUFDYixPQUFPbEUsS0FFUSxJQUFia0UsRUFDRkQsRUFBS0csUUFpSWYsU0FBbUJILEVBQU1JLEdBQ3ZCLEtBQU9BLEVBQVEsRUFBSUosRUFBSzlDLE9BQVFrRCxJQUM5QkosRUFBS0ksR0FBU0osRUFBS0ksRUFBUSxHQUM3QkosRUFBS0ssTUFIUCxDQS9Ib0JMLEVBQU1DLEdBR0UsSUFBaEJELEVBQUs5QyxTQUNQUixFQUFPSCxHQUFReUQsRUFBSyxhQUVsQnRELEVBQU9vQixnQkFDVC9CLEtBQUtnQixLQUFLLGlCQUFrQlIsRUFBTTJELEdBQW9CMUQsR0FHMUQsT0FBT1QsTUFHYkYsRUFBYXZCLFVBQVVnRyxJQUFNekUsRUFBYXZCLFVBQVV3RCxlQUVwRGpDLEVBQWF2QixVQUFVaUcsbUJBQ25CLFNBQTRCaEUsR0FDMUIsSUFBSW1ELEVBQVdoRCxFQUFRaEUsRUFHdkIsUUFBSSxLQURKZ0UsRUFBU1gsS0FBS0MsU0FFWixPQUFPRCxLQUdULFFBQUksSUFBQVcsRUFBT29CLGVBVVQsT0FUeUIsSUFBckJGLFVBQVVWLFFBQ1puQixLQUFLQyxRQUFVNUMsT0FBT1ksT0FBTyxNQUM3QitCLEtBQUtFLGFBQWUsWUFDWFMsRUFBT0gsS0FDWSxLQUF0QlIsS0FBS0UsYUFDVEYsS0FBS0MsUUFBVTVDLE9BQU9ZLE9BQU8sYUFFdEIwQyxFQUFPSCxJQUVYUixLQUlULEdBQXlCLElBQXJCNkIsVUFBVVYsT0FBYyxDQUMxQixJQUNJakQsRUFEQXVHLEVBQU9wSCxPQUFPb0gsS0FBSzlELEdBRXZCLElBQUtoRSxFQUFJLEVBQUdBLEVBQUk4SCxFQUFLdEQsU0FBVXhFLEVBRWpCLG9CQURadUIsRUFBTXVHLEVBQUs5SCxLQUVYcUQsS0FBS3dFLG1CQUFtQnRHLEdBSzFCLE9BSEE4QixLQUFLd0UsbUJBQW1CLGtCQUN4QnhFLEtBQUtDLFFBQVU1QyxPQUFPWSxPQUFPLE1BQzdCK0IsS0FBS0UsYUFBZSxFQUNiRixLQUtULEdBQXlCLG1CQUZ6QjJELEVBQVloRCxFQUFPSCxJQUdqQlIsS0FBSytCLGVBQWV2QixFQUFNbUQsUUFDckIsUUFBSSxJQUFBQSxFQUVULElBQUtoSCxFQUFJZ0gsRUFBVXhDLE9BQVMsRUFBR3hFLEdBQUssRUFBR0EsSUFDckNxRCxLQUFLK0IsZUFBZXZCLEVBQU1tRCxFQUFVaEgsSUFJeEMsT0FBT3FELE1Bb0JiRixFQUFhdkIsVUFBVW9GLFVBQVksU0FBbUJuRCxHQUNwRCxPQUFPNEIsRUFBV3BDLEtBQU1RLE9BRzFCVixFQUFhdkIsVUFBVW1HLGFBQWUsU0FBc0JsRSxHQUMxRCxPQUFPNEIsRUFBV3BDLEtBQU1RLE9BRzFCVixFQUFhNkMsY0FBZ0IsU0FBU25CLEVBQVNoQixHQUM3QyxNQUFxQyxtQkFBMUJnQixFQUFRbUIsY0FDVm5CLEVBQVFtQixjQUFjbkMsR0FFdEJtQyxFQUFjN0YsS0FBSzBFLEVBQVNoQixJQUl2Q1YsRUFBYXZCLFVBQVVvRSxjQUFnQkEsRUFpQnZDN0MsRUFBYXZCLFVBQVVvRyxXQUFhLFdBQ2xDLE9BQU8zRSxLQUFLRSxhQUFlLEVBQUlwQixFQUFla0IsS0FBS0MsU0FBVyxLOzs7OzhDQ3phaEV2RCxFQUFPRCxRQUFVLENBQ2ZtSSxNQUFPL0Ysb0JBQVEsbUNBQWVnRyxRQUM5QkMsT0FBUWpHLG9CQUFRLG1DQUFlaUcsT0FDL0JDLFdBQVlsRyxvQkFBUSxtQ0FBZWtHLFdBQ25DQyxXQUFZbkcsb0JBQVEsbUNBQWVtRyxXQUVuQ0MsU0FBVXBHLHFCQUFRLG9DQUFnQm9HLFNBQ2xDQyxZQUFhckcscUJBQVEsb0NBQWdCcUcsWUFFckNDLFVBQVd0Ryx1QkFBUSxzQ0FBa0JnRyxVOzs7O2lHQ1QxQkksU0FBTixNQU9MRyxZQUFhakUsR0FDWG5CLEtBQUttQixPQUFTQSxHQUFVLEVBQ3hCbkIsS0FBS3FGLFdBQWFsRSxHQUFVLEVBQzVCbkIsS0FBS3NGLE1BQVEsR0FDYnRGLEtBQUt1RixPQUFTLEVBUWhCckUsS0FBTXNFLEdBQ0p4RixLQUFLc0YsTUFBTXBFLEtBQUtzRSxHQUNoQnhGLEtBQUttQixRQUFVcUUsRUFBS0MsV0FDcEJ6RixLQUFLcUYsWUFBY0csRUFBS0MsV0FRMUJyQixNQUFPakQsR0FDTCxHQUFJbkIsS0FBS3NGLE1BQU1uRSxPQUFTLEVBQ3RCLE9BQU8sSUFBSXVFLFdBQVcsR0FHeEIsUUFBSSxJQUFBdkUsRUFDRixPQUFPbkIsS0FBSzJGLGVBRWQsR0FBSzNGLEtBQUt1RixPQUFTcEUsSUFBWW5CLEtBQUtzRixNQUFNLEdBQUduRSxPQUFRLENBQ25ELElBQUlxQixFQUFNeEMsS0FBS3NGLE1BQU0sR0FBR00sTUFBTTVGLEtBQUt1RixPQUFRdkYsS0FBS3VGLE9BQVNwRSxHQUl6RCxPQUhBbkIsS0FBS3VGLE9BQVMsRUFDZHZGLEtBQUtzRixNQUFNbEIsUUFDWHBFLEtBQUttQixRQUFVQSxFQUNScUIsRUFHVCxHQUFLeEMsS0FBS3VGLE9BQVNwRSxFQUFVbkIsS0FBS3NGLE1BQU0sR0FBR25FLE9BQVEsQ0FDakQsSUFBSXFCLEVBQU14QyxLQUFLc0YsTUFBTSxHQUFHTSxNQUFNNUYsS0FBS3VGLE9BQVF2RixLQUFLdUYsT0FBU3BFLEdBR3pELE9BRkFuQixLQUFLdUYsUUFBVXBFLEVBQ2ZuQixLQUFLbUIsUUFBVUEsRUFDUnFCLEVBR1QsSUFBSUEsRUFBTSxJQUFJa0QsV0FBV3ZFLEdBQ3JCMEUsRUFBUyxFQUNiLEtBQU83RixLQUFLc0YsTUFBTW5FLE9BQVMsR0FBS0EsRUFBUyxHQUFHLENBQzFDLEdBQUtuQixLQUFLdUYsT0FBU3BFLEVBQVVuQixLQUFLc0YsTUFBTSxHQUFHbkUsT0FBUSxDQUNqRCxJQUFJMkUsRUFBTTlGLEtBQUtzRixNQUFNLEdBQUdNLE1BQU01RixLQUFLdUYsT0FBUXZGLEtBQUt1RixPQUFTcEUsR0FDekRxQixFQUFJSyxJQUFJaUQsRUFBS0QsR0FDYjdGLEtBQUt1RixRQUFVcEUsRUFDZm5CLEtBQUttQixRQUFVQSxFQUNmQSxFQUFTLEVBQ1QsTUFDSyxDQUNMLElBQUk0RSxFQUFhL0YsS0FBS3NGLE1BQU0sR0FBR25FLE9BQVNuQixLQUFLdUYsT0FDN0MvQyxFQUFJSyxJQUFJN0MsS0FBS3NGLE1BQU0sR0FBR00sTUFBTTVGLEtBQUt1RixPQUFRdkYsS0FBS3NGLE1BQU0sR0FBR25FLFFBQVMwRSxHQUNoRTdGLEtBQUtzRixNQUFNbEIsUUFDWHBFLEtBQUt1RixPQUFTLEVBQ2RNLEdBQVVFLEVBQ1YvRixLQUFLbUIsUUFBVTRFLEVBQ2Y1RSxHQUFVNEUsR0FHZCxPQUFPdkQsRUFNVHdELFFBQ0VoRyxLQUFLc0YsTUFBUSxHQUNidEYsS0FBS21CLE9BQVMsRUFDZG5CLEtBQUt1RixPQUFTLEVBR2hCVSxVQUNFakcsS0FBS2dHLFFBQ0xoRyxLQUFLcUYsV0FBYSxFQU1wQk0sZUFHRSxPQUZBM0YsS0FBS21CLFFBQVVuQixLQUFLc0YsTUFBTSxHQUFHbkUsT0FDN0JuQixLQUFLdUYsT0FBUyxFQUNQdkYsS0FBS3NGLE1BQU1sQixRQVNwQjhCLE1BQU9DLEVBQU9oRixHQUNaLElBQUlpRixFQUFTLEVBQ1R6SixFQUFJcUQsS0FBS3VGLE9BQVNZLEVBQ3RCLEtBQU94SixFQUFJcUQsS0FBS3VGLE9BQVNwRSxFQUFTZ0YsR0FDNUJ4SixFQUFJcUQsS0FBS3NGLE1BQU0sR0FBR25FLE9BQ3BCaUYsRUFBa0IsSUFBVEEsRUFBZXBHLEtBQUtzRixNQUFNLEdBQUczSSxHQUM3QnFELEtBQUtzRixNQUFNLEtBQ3BCYyxFQUFrQixJQUFUQSxFQUFlcEcsS0FBS3NGLE1BQU0sR0FBRzNJLEVBQUlxRCxLQUFLc0YsTUFBTSxHQUFHbkUsU0FHMUR4RSxJQUVGLE9BQU95SixJLEVBSUVsQixZQUFOLE1BQ0xFLGNBQ0VwRixLQUFLcUcsTUFBUSxHQUNickcsS0FBS3NHLE1BQVEsR0FHZkwsVUFDRWpHLEtBQUtxRyxNQUFRLEdBQ2JyRyxLQUFLc0csTUFBUSxNOzs7OytGQ2pJakIsTUFBTUMsRUFDSm5CLGNBQ0VwRixLQUFLd0csU0FBVyxHQUNoQnhHLEtBQUtELEtBQU8sS0FDWkMsS0FBS3dGLEtBQU8sSSxVQUloQixNQUNFSixjQUNFcEYsS0FBS3lHLFFBQVUsR0FHakJDLFVBQVdDLEdBQ1QsT0FBTzNHLEtBQUt5RyxRQUFRRSxHQUd0QkMsYUFBYzFKLEdBRVosT0FEQThDLEtBQUt5RyxRQUFRdkosR0FBUSxJQUFJcUosRUFDbEJ2RyxLQUFLeUcsUUFBUXZKLEdBR3RCOEksUUFDRWhHLEtBQUt5RyxRQUFVLEdBR2pCUixVQUNFakcsS0FBS3lHLFFBQVUsTTs7OzsrRkMzQkosTUFBTTdCLEVBSW5CUSxjQUNFcEYsS0FBSzZHLElBQU0sRUFDWDdHLEtBQUs4RyxlQUFpQixFQUN0QjlHLEtBQUsrRyxRQUFVLEdBQ2YvRyxLQUFLZ0gsZUFBaUIsR0FDdEJoSCxLQUFLbUIsT0FBUyxFQU1oQjhGLFFBQ0VqSCxLQUFLOEcsZUFBaUIsRUFDdEI5RyxLQUFLK0csUUFBVSxHQUNmL0csS0FBS21CLE9BQVMsRUFLaEIrRixVQUNFbEgsS0FBS2lILFFBQ0xqSCxLQUFLNkcsSUFBTSxHLFVBekJNakMsRSxFQTZCUkcsV0FBTixjQUF5QkgsRUFJOUJRLGNBQ0UrQixRQUNBbkgsS0FBS29ILElBQU0sYUFDWHBILEtBQUtRLEtBQU8sVSxFQUlId0UsV0FBTixjQUF5QkosRUFJOUJRLGNBQ0UrQixRQUNBbkgsS0FBS29ILElBQU0sYUFDWHBILEtBQUtRLEtBQU8sUUFDWlIsS0FBS3FILFFBQVUsRUFLakJKLFFBQ0VqSCxLQUFLOEcsZUFBaUIsRUFDdEI5RyxLQUFLK0csUUFBVSxHQUNmL0csS0FBS21CLE9BQVMsRUFDZG5CLEtBQUtxSCxRQUFVLEksRUFJTnZDLE9BQU4sTUFDTE0sY0FDRXBGLEtBQUtzSCxXQUFhLEtBQ2xCdEgsS0FBS3VILFdBQWEsS0FHcEJ0QixVQUNFakcsS0FBS3NILFdBQWEsS0FDbEJ0SCxLQUFLdUgsV0FBYSxROzs7OzhDQ3JFdEI3SyxFQUFPRCxRQUFVLENBQ2YrSyxRQUFTM0ksMkJBQVEsK0NBQXNCZ0csUUFDdkM0QyxVQUFXNUksK0JBQVEsNkNBQTBCZ0csUUFFN0M2QyxjQUFlN0ksNEJBQVEsMENBQXVCZ0csVTs7Ozt5R0NIaEQsTUFFRSxzQkFBc0I4QyxFQUFPQyxHQUMzQixHQUFjLGNBQVZELEVBQXVCLENBRXpCLEdBQXFCLElBQWpCQyxFQUNGLE9BQU8sSUFBSWxDLFdBQVcsQ0FBQyxFQUFNLElBQU0sRUFBTSxJQUFNLEdBQU0sTUFDaEQsR0FBcUIsSUFBakJrQyxFQUNULE9BQU8sSUFBSWxDLFdBQVcsQ0FBQyxHQUFNLEVBQU0sR0FBTSxJQUFNLEVBQU0sR0FBTSxFQUFNLEdBQU0sTUFDbEUsR0FBcUIsSUFBakJrQyxFQUNULE9BQU8sSUFBSWxDLFdBQVcsQ0FBQyxFQUFNLElBQU0sRUFBTSxJQUFNLEdBQU0sSUFBTSxFQUFNLEdBQU0sR0FBTSxFQUFNLElBQU0sRUFBTSxNQUMxRixHQUFxQixJQUFqQmtDLEVBQ1QsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxJQUFNLEVBQU0sR0FBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxJQUFNLEVBQU0sRUFBTSxLQUN4SCxHQUFxQixJQUFqQmtDLEVBQ1QsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxJQUFNLEVBQU0sR0FBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxFQUFNLElBQU0sRUFBTSxHQUFNLElBQU0sRUFBTSxLQUMxSSxHQUFxQixJQUFqQmtDLEVBQ1QsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxJQUFNLEVBQU0sR0FBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxFQUFNLElBQU0sRUFBTSxHQUFNLElBQU0sRUFBTSxFQUFNLElBQU0sRUFBTSxHQUFNLEVBQU0sVUFFMUssQ0FFTCxHQUFxQixJQUFqQmtDLEVBRUYsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEVBQUssR0FBTSxHQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLEVBQUssRUFBSyxFQUFLLEVBQUssR0FBTSxFQUFLLElBQU0sSUFBTSxHQUFLLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sS0FDdlcsR0FBcUIsSUFBakJrQyxFQUVULE9BQU8sSUFBSWxDLFdBQVcsQ0FBQyxFQUFLLEdBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxFQUFLLEVBQUssRUFBSyxFQUFLLEVBQUssSUFBTSxFQUFLLEVBQUssSUFBTSxJQUFNLEdBQUssR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEtBQ3JXLEdBQXFCLElBQWpCa0MsRUFFVCxPQUFPLElBQUlsQyxXQUFXLENBQUMsRUFBSyxHQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sRUFBSyxFQUFLLEVBQUssRUFBSyxFQUFLLElBQU0sRUFBSyxFQUFLLElBQU0sSUFBTSxHQUFLLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxLQUc5VyxPQUFPLFE7Ozs7K0ZDaENYLEksRUFBQSxFQUFBL0ksdUJBQUEsOEIsS0FDQUEseUJBQUEsNkMsMkJBRUEsTUFBTSxhQUFDa0wsRUFBRCxhQUFlQyxHQUFnQkMsU0FFckMsTUFBTUwsRUFDSnRDLGNBQ0VwRixLQUFLZ0ksYUFBZSxFQUNwQmhJLEtBQUtpSSxhQUFlLEVBRXBCakksS0FBS2tJLG9CQUFzQixFQUMzQmxJLEtBQUttSSxvQkFBc0IsRUFFM0JuSSxLQUFLb0ksb0JBQ0xwSSxLQUFLcUksb0JBRUxySSxLQUFLc0kscUJBQXVCLEVBQzVCdEksS0FBS3VJLHFCQUF1QixFQUU1QnZJLEtBQUt3SSxrQkFBb0IsS0FDekJ4SSxLQUFLeUksa0JBQW9CLEtBRXpCekksS0FBSzBJLG1CQUFxQixHQUMxQjFJLEtBQUsySSxtQkFBcUIsR0FFMUIzSSxLQUFLNEksZUFBaUIsRUFDdEI1SSxLQUFLNkksZUFBaUIsRUFHeEI5SSxPQUNFQyxLQUFLOEksT0FBT2pCLEVBQWFrQixZQUFhL0ksS0FBS2dKLE1BQU03SyxLQUFLNkIsT0FHeERpSCxRQUNFakgsS0FBS2dJLGFBQWUsS0FDcEJoSSxLQUFLaUksYUFBZSxLQUVwQmpJLEtBQUtrSSxvQkFBc0IsRUFDM0JsSSxLQUFLbUksb0JBQXNCLEVBRTNCbkksS0FBS29JLG9CQUNMcEksS0FBS3FJLG9CQVFMckksS0FBSzBJLG1CQUFxQixHQUMxQjFJLEtBQUsySSxtQkFBcUIsR0FHNUJLLFFBQ0UsTUFBTSxvQkFBRUMsRUFBRixvQkFBdUJDLEdBQXdCbEosS0FBS21KLGlCQUUxRG5KLEtBQUtvSixxQkFFRHBKLEtBQUt5SSxtQkFDUHpJLEtBQUtxSixxQkFBcUJySixLQUFLdUgsV0FBVytCLEtBQU10SixLQUFLdUgsV0FBV1IsU0FFOUQvRyxLQUFLd0ksbUJBQ1B4SSxLQUFLcUoscUJBQXFCckosS0FBS3NILFdBQVdnQyxLQUFNdEosS0FBS3NILFdBQVdQLFNBR2xFLE1BQVF3QyxRQUFTQyxFQUFjQyxXQUFZQyxHQUFvQmhDLEVBQWNpQyxtQkFBbUIzSixLQUFLdUgsV0FBV1IsU0FDNUd5QyxJQUFpQlAsRUFDbkJqSixLQUFLNEoscUJBQXFCRixHQUUxQjFKLEtBQUs2SixXQUFXWCxHQUdsQixNQUFRSyxRQUFTTyxFQUFjTCxXQUFZTSxHQUFvQnJDLEVBQWNpQyxtQkFBbUIzSixLQUFLc0gsV0FBV1AsU0FDNUcrQyxFQUNGOUosS0FBS2dLLHFCQUFxQkQsR0FFMUIvSixLQUFLaUssV0FBV2hCLEdBTXBCWSxXQUFZSyxFQUFPQyxHQUNqQixJQUFLcEQsUUFBU3FELEVBQVYsS0FBd0JkLEdBQVF0SixLQUFLdUgsV0FFekMsR0FBSStCLEVBQUtlLGdCQUFhZixFQUFLZSxVQUFVQyxNQUNuQyxPQUdGLElBQUtGLElBQWlCQSxFQUFhakosU0FBV25CLEtBQUt5SSxrQkFDakQsT0FLRixNQUFNOEIsRUFBY0gsRUFBYSxHQUUzQkksRUFBYUosRUFBYWpKLE9BRzVCbkIsS0FBSzRJLGVBQWlCLEdBQ3hCbEIsRUFBYytDLGNBQWNMLEVBQWNwSyxLQUFLNEksZ0JBRzdDMkIsRUFBWUcsTUFBUTFLLEtBQUt5SSxrQkFBa0JpQyxNQUFRUCxHQUFxQnpDLEVBQWNpRCxlQUFlM0ssS0FBS2lJLGFBQWNzQyxNQUN0SEosSUFDRm5LLEtBQUtpSSxhQUFla0MsR0FHdEJuSyxLQUFLNEksZUFBaUI1SSxLQUFLaUksYUFBZXNDLEVBQVlHLElBQ3REaEQsRUFBYytDLGNBQWNMLEVBQWNwSyxLQUFLNEksaUJBR2pELE1BQU1nQyxFQUFXTCxFQUFZRyxJQUc3QixHQUFJUixHQUFTbEssS0FBS3dJLGtCQUFtQixDQUNuQyxNQUFNcUMsRUFBZ0I3SyxLQUFLeUksa0JBQWtCaUMsSUFFdkNJLEVBQU1ELEVBRFU3SyxLQUFLd0ksa0JBQWtCa0MsSUFFN0MsR0FBSUksRUFBTyxFQUFJeEIsRUFBS3lCLGtCQUFvQixDQUN0QyxNQUFNQyxFQUFZQyxLQUFLQyxNQUFNSixFQUFNeEIsRUFBS3lCLG1CQUV4QyxJQUFLLElBQUlwTyxFQUFJLEVBQUdBLEVBQUlxTyxFQUFXck8sSUFBSyxDQUNsQyxNQUFNd08sRUFBb0I5TixPQUFPK04sT0FBTyxHQUFJYixHQUU1Q1ksRUFBa0JULElBQU1HLEdBQWlCbE8sRUFBSSxHQUFLMk0sRUFBS3lCLGtCQUN2REksRUFBa0JFLElBQU1GLEVBQWtCVCxJQUFNUyxFQUFrQkcsSUFFbEVsQixFQUFhbkosUUFBUWtLLEdBRXJCbkwsS0FBSzJJLG1CQUFtQnpILEtBQUssQ0FDM0J3SixJQUFLUyxFQUFrQlQsSUFDdkJhLEtBQU1KLEVBQWtCM0YsS0FBS0MsZUFNckMsSUFBSXFGLEVBRUosR0FBSTlLLEtBQUtpSSxhQUFjLENBR3JCNkMsRUFBTUYsRUFBVzVLLEtBQUtpSSxhQUN0QixNQUFNdUQsRUFBU1AsS0FBS1EsSUFBSVgsR0FDeEIsR0FBSUEsRUFBTyxFQUFJeEIsRUFBS3lCLGtCQUFvQixDQUN0QyxNQUFNVyxFQUFpQlQsS0FBS0MsTUFBTUosRUFBTXhCLEVBQUt5QixtQkFFN0MsSUFBSyxJQUFJcE8sRUFBSSxFQUFHQSxFQUFJK08sRUFBZ0IvTyxJQUFLLENBQ3ZDLE1BQU1nUCxFQUFldE8sT0FBTytOLE9BQU8sR0FBSWhCLEVBQWEsSUFDOUN3QixFQUFXaEIsR0FBWWpPLEVBQUksR0FBSzJNLEVBQUt5QixrQkFFM0NZLEVBQWFqQixJQUFNa0IsRUFBVzVMLEtBQUtpSSxhQUFlMkQsRUFBVzVMLEtBQUtpSSxhQUNsRTBELEVBQWFOLElBQU1NLEVBQWFqQixJQUFNaUIsRUFBYUwsSUFFbkR0TCxLQUFLdUgsV0FBV1IsUUFBUTlGLFFBQVEwSyxHQUVoQzNMLEtBQUsySSxtQkFBbUJ6SCxLQUFLLENBQzNCd0osSUFBS2lCLEVBQWFqQixJQUNsQmEsS0FBTUksRUFBYW5HLEtBQUtDLG1CQUduQitGLEdBQVVsQyxFQUFLeUIsbUJBQXFCUyxFQUFTLEdBR3REcEIsRUFBYSxHQUFHTSxJQUFNMUssS0FBS2lJLGFBQzNCbUMsRUFBYSxHQUFHeUIsVUFBWXpCLEVBQWEsR0FBR00sSUFDNUNOLEVBQWEsR0FBR2tCLGFBQU1sQixFQUFhLEdBQUdrQixJQUFvQmxCLEVBQWEsR0FBR2tCLElBQU1sQixFQUFhLEdBQUdpQixJQUFNakIsRUFBYSxHQUFHTSxJQUN0SE4sRUFBYSxHQUFHaUIsSUFBTWpCLEVBQWEsR0FBR00sSUFBTU4sRUFBYSxHQUFHa0IsS0FDbkRSLEVBQU0sR0FFZnBELEVBQWMrQyxjQUFjTCxHQUFnQixFQUFJVSxHQUdwRCxNQUFNZ0IsRUFBVTFCLEVBQWFBLEVBQWFqSixPQUFTLEdBQUd1SixJQUVoRHFCLEVBQXFCM0IsRUFBYWpKLFFBQVUsRUFBSTJLLEVBQVUxQixFQUFhQSxFQUFhakosT0FBUyxHQUFHdUosSUFBTXBCLEVBQUt5QixrQkFFakgvSyxLQUFLbUksb0JBQXNCcUMsRUFDM0J4SyxLQUFLaUksYUFBZTZELEVBQVVDLEVBQzlCL0wsS0FBS29JLGFBQWUwRCxFQUlwQixJQUFLLElBQUluUCxFQUFJLEVBQUcrRyxFQUFNMEcsRUFBYWpKLE9BQVF4RSxFQUFJK0csRUFBSy9HLElBQUssQ0FDdkQsTUFBTXFQLEVBQVU1QixFQUFhek4sR0FDdkJzUCxFQUFPN0IsRUFBYXpOLEVBQUksR0FFOUIsSUFBS3NQLEVBQ0gsTUFHRixNQUFNQyxFQUFXRCxFQUFLdkIsSUFBTXNCLEVBQVF0QixJQUVwQyxHQUFJd0IsRUFBWSxFQUFJNUMsRUFBS3lCLGtCQUFvQixDQUUzQyxJQUFJVyxFQUFpQlQsS0FBS0MsTUFBTWdCLEVBQVc1QyxFQUFLeUIsbUJBRTVDb0IsRUFBZSxFQUNuQixLQUFPQSxFQUFlVCxHQUFnQixDQUNwQyxNQUFNVSxFQUFZL08sT0FBTytOLE9BQU8sR0FBSWEsR0FDcENHLEVBQVUxQixJQUFNc0IsRUFBUXRCLEtBQU95QixFQUFlLEdBQUs3QyxFQUFLeUIsa0JBQ3hEcUIsRUFBVWYsSUFBTWUsRUFBVTFCLElBQU0wQixFQUFVZCxJQUN0Q2MsRUFBWUgsRUFBS3ZCLE1BQ25CTixFQUFhaUMsT0FBTzFQLEVBQUcsRUFBR3lQLEdBRTFCcE0sS0FBSzJJLG1CQUFtQnpILEtBQUssQ0FDM0J3SixJQUFLMEIsRUFBVTFCLElBQ2ZhLEtBQU1hLEVBQVU1RyxLQUFLQyxjQUl6QjBHLElBQ0F4UCxNQUtOcUQsS0FBS3VILFdBQVdSLFFBQVVxRCxFQUc1QkgsV0FBWUMsRUFBT0MsR0FDakIsSUFBS3BELFFBQVN1RixFQUFWLEtBQXdCaEQsR0FBUXRKLEtBQUtzSCxXQUV6QyxJQUFLZ0YsSUFBaUJBLEVBQWFuTCxPQUNqQyxPQUlGLE1BQU1xSixFQUFhOEIsRUFBYW5MLE9BQzFCb0wsRUFBY0MsVUFBSUMsZUFBZW5ELEVBQUszQixNQUFPMkIsRUFBSzFCLGNBRWxEMkMsRUFBY3ZLLEtBQUt3SSxrQkFFbkJrRSxFQUFlSixFQUFhLEdBZWxDLEdBWkl0TSxLQUFLNkksZUFBaUIsR0FDeEJuQixFQUFjK0MsY0FBYzZCLEVBQWN0TSxLQUFLNkksZ0JBRzdDNkQsRUFBYWhDLE1BQVExSyxLQUFLd0ksa0JBQWtCa0MsTUFBUVAsR0FBcUJ6QyxFQUFjaUQsZUFBZTNLLEtBQUtnSSxhQUFjMEUsTUFDdkh2QyxJQUNGbkssS0FBS2dJLGFBQWVtQyxHQUV0Qm5LLEtBQUs2SSxlQUFpQjdJLEtBQUtnSSxhQUFlMEUsRUFBYWhDLElBQ3ZEaEQsRUFBYytDLGNBQWM2QixFQUFjdE0sS0FBSzZJLGlCQUc3QzdJLEtBQUt5SSxtQkFBcUJ5QixFQUFPLENBQ25DLE1BQU15QyxFQUFnQjNNLEtBQUt5SSxrQkFBa0I0QyxJQUFNckwsS0FBS3lJLGtCQUFrQjRDLElBQU1yTCxLQUFLeUksa0JBQWtCaUMsSUFBTTFLLEtBQUt5SSxrQkFBa0I2QyxJQUVwSSxHQUFJZixFQUFZRyxJQUFNaUMsRUFBZ0JyRCxFQUFLeUIsa0JBQW1CLENBQzVELE1BQU02QixFQUFvQjNCLEtBQUtDLE9BQU9YLEVBQVlHLElBQU1pQyxHQUFpQnJELEVBQUt5QixtQkFFOUUsSUFBSyxJQUFJcE8sRUFBSSxFQUFHQSxFQUFJaVEsRUFBbUJqUSxJQUFLLENBQzFDLE1BQU1rUSxFQUFlLENBQ25CckgsS0FBTStHLEVBQ05PLFNBQVVQLEVBQVk5RyxXQUN0QmlGLElBQUtILEVBQVlHLEtBQU8vTixFQUFJLEdBQUsyTSxFQUFLeUIsa0JBQ3RDZ0MsU0FBVSxHQUdaVCxFQUFhckwsUUFBUTRMLEdBRXJCN00sS0FBSzBJLG1CQUFtQnhILEtBQUssQ0FDM0J3SixJQUFLbUMsRUFBYW5DLElBQ2xCYSxLQUFNc0IsRUFBYXJILEtBQUtDLGVBTWhDLElBQUlxRixFQUNKLE1BQU1GLEVBQVcwQixFQUFhLEdBQUc1QixJQUVqQyxHQUFJMUssS0FBS2dJLGFBQWMsQ0FHckI4QyxFQUFNRixFQUFXNUssS0FBS2dJLGFBQ3RCLE1BQU13RCxFQUFTUCxLQUFLUSxJQUFJWCxHQU14QixHQUpJVSxFQUFTbEMsRUFBS3lCLG1CQUFvQyxJQUFmUCxHQUFpRCxJQUE3QnhLLEtBQUtrSSxzQkFDOURvQixFQUFLMEQsK0JBR0hsQyxFQUFPLEVBQUl4QixFQUFLeUIsa0JBQ2xCLEdBQW1CLElBQWZQLEdBQWlELElBQTdCeEssS0FBS2tJLG9CQUUzQm9CLEVBQUswRCxnQ0FBeUIxRCxFQUFLMEQsdUJBQXVDMUQsRUFBSzBELHVCQUF5QmxDLEVBQU14QixFQUFLeUIsa0JBQW9CRCxNQUNsSSxDQUNMLE1BQU1tQyxFQUFtQmhDLEtBQUtDLE1BQU1KLEVBQU14QixFQUFLeUIsbUJBRS9DLElBQUssSUFBSXBPLEVBQUksRUFBR0EsRUFBSXNRLEVBQWtCdFEsSUFBSyxDQUN6QyxNQUFNaVAsRUFBV2hCLEdBQVlqTyxFQUFJLEdBQUsyTSxFQUFLeUIsa0JBQ3JDOEIsRUFBZXhQLE9BQU8rTixPQUFPLEdBQUlrQixFQUFhLEdBQUksQ0FDdEQ1QixJQUFLa0IsRUFBVzVMLEtBQUtnSSxhQUFlNEQsRUFBVzVMLEtBQUtnSSxlQUd0RGhJLEtBQUswSSxtQkFBbUJ4SCxLQUFLLENBQzNCd0osSUFBS21DLEVBQWFuQyxJQUNsQmEsS0FBTXNCLEVBQWFySCxLQUFLQyxhQUUxQnpGLEtBQUtzSCxXQUFXUCxRQUFROUYsUUFBUTRMLFNBRzNCckIsR0FBVWxDLEVBQUt5QixtQkFBcUJTLEVBQVMsR0FHdERjLEVBQWEsR0FBRzVCLElBQU0xSyxLQUFLZ0ksYUFDM0JzRSxFQUFhLEdBQUdqQixJQUFNckwsS0FBS2dJLGNBQ2xCOEMsRUFBTSxHQUNmcEQsRUFBYytDLGNBQWM2QixHQUFnQixFQUFJeEIsR0FHcEQsTUFBTWdCLEVBQVVRLEVBQWFBLEVBQWFuTCxPQUFTLEdBQUd1SixJQUNoRHFCLEVBQXFCTyxFQUFhbkwsUUFBVSxFQUFJMkssRUFBVVEsRUFBYUEsRUFBYW5MLE9BQVMsR0FBR3VKLElBQU1wQixFQUFLeUIsa0JBRWpIL0ssS0FBS2tJLG9CQUFzQnNDLEVBQzNCeEssS0FBS2dJLGFBQWVzQixFQUFLMEQsdUJBQXlCbEIsRUFBVXhDLEVBQUswRCx1QkFBeUJsQixFQUFVQyxFQUNwRy9MLEtBQUtxSSxhQUFleUQsRUFHcEIsSUFBSyxJQUFJblAsRUFBSSxFQUFHK0csRUFBTTRJLEVBQWFuTCxPQUFReEUsRUFBSStHLEVBQUsvRyxJQUFLLENBQ3ZELE1BQU1xUCxFQUFVTSxFQUFhM1AsR0FDdkJzUCxFQUFPSyxFQUFhM1AsRUFBSSxHQUU5QixJQUFLc1AsRUFDSCxNQUdGLE1BQU1DLEVBQVdELEVBQUt2QixJQUFNc0IsRUFBUXRCLElBQ3BDNEIsRUFBYTNQLEdBQUd1UCxTQUFXQSxFQThCN0JsTSxLQUFLc0gsV0FBV1AsUUFBVVcsRUFBY3dGLGlCQUFpQlosR0FHM0QxQyxxQkFBc0J1RCxHQUNwQixNQUFNLFFBQUVwRyxFQUFGLEtBQVd1QyxHQUFTdEosS0FBS3VILFdBQ3pCNkYsRUFBd0IsSUFBZEQsRUFBa0JuTixLQUFLcU4scUJBQXFCdEcsRUFBUSxJQUFNQSxFQUFRb0csRUFBWSxHQUFHekMsSUFDM0Y0QyxFQUFTdkcsRUFBUW9HLEdBQVd6QyxJQUdsQyxHQUZtQk8sS0FBS1EsSUFBSTJCLEVBQVVFLElBQVcsRUFBSWhFLEVBQUt5QixrQkFVeEQsT0FQS2hFLEVBQVFvRyxHQUFXSSxRQUt0QnhHLEVBQVFvRyxHQUFXSSxRQUFRQyxjQUozQnpHLEVBQVFvRyxHQUFXSSxRQUFVLENBQzNCQyxZQUFZQSxHQUtUeE4sS0FBSzZKLGVBR2QsTUFBTTRELEVBQW1CMUcsRUFBUW5CLE1BQU0sRUFBR3VILEdBQ3BDTyxFQUFvQjNHLEVBQVFuQixNQUFNdUgsR0FDbEM1QyxFQUFjeEQsRUFBUSxHQUd0QjRHLEVBRGVELEVBQWtCLEdBQ0FoRCxJQUFNSCxFQUFZRyxJQUNuRFAsRUFBb0JJLEVBQVlnRCxTQUFXaEQsRUFBWWdELFFBQVFwSCxNQUFRd0gsRUFBb0JwRCxFQUFZZ0QsUUFBUXBILE1BQVEsS0FFN0huRyxLQUFLdUgsV0FBV1IsUUFBVUEsRUFBUW5CLE1BQU0sRUFBR3VILEdBRTNDbk4sS0FBSzZKLGVBRUw3SixLQUFLdUgsV0FBV1IsUUFBVUEsRUFBUW5CLE1BQU11SCxHQUV4Q25OLEtBQUs2SixjQUFrQk0sR0FFdkJuSyxLQUFLdUgsV0FBV1IsUUFBVTBHLEVBQWlCL04sT0FBT2dPLEdBR3BEMUQscUJBQXNCbUQsR0FDcEIsTUFBTSxRQUFFcEcsRUFBRixLQUFXdUMsR0FBU3RKLEtBQUtzSCxXQUV6QjhGLEVBQXdCLElBQWRELEVBQWtCbk4sS0FBS3FOLHFCQUFxQnRHLEVBQVEsSUFBTUEsRUFBUW9HLEVBQVksR0FBR3pDLElBQzNGNEMsRUFBU3ZHLEVBQVFvRyxHQUFXekMsSUFHbEMsR0FGbUJPLEtBQUtRLElBQUkyQixFQUFVRSxJQUFXLEVBQUloRSxFQUFLeUIsa0JBVXhELE9BUEtoRSxFQUFRb0csR0FBV0ksUUFLdEJ4RyxFQUFRb0csR0FBV0ksUUFBUUMsY0FKM0J6RyxFQUFRb0csR0FBV0ksUUFBVSxDQUMzQkMsWUFBWUEsR0FLVHhOLEtBQUtpSyxlQUdkLE1BQU13RCxFQUFtQjFHLEVBQVFuQixNQUFNLEVBQUd1SCxHQUNwQ08sRUFBb0IzRyxFQUFRbkIsTUFBTXVILEdBQ2xDNUMsRUFBY3hELEVBQVEsR0FHdEI0RyxFQURlRCxFQUFrQixHQUNBaEQsSUFBTUgsRUFBWUcsSUFDbkRQLEVBQW9CSSxFQUFZZ0QsU0FBV2hELEVBQVlnRCxRQUFRcEgsTUFBUXdILEVBQW9CcEQsRUFBWWdELFFBQVFwSCxNQUFRLEtBRTdIbkcsS0FBS3NILFdBQVdQLFFBQVUwRyxFQUUxQnpOLEtBQUtpSyxlQUVMakssS0FBS3NILFdBQVdQLFFBQVUyRyxFQUUxQjFOLEtBQUtpSyxjQUFrQkUsR0FFdkJuSyxLQUFLc0gsV0FBV1AsUUFBVTBHLEVBQWlCL04sT0FBT2dPLEdBR3BEdkUsaUJBRUUsSUFBS3BDLFFBQVNxRCxHQUFnQnBLLEtBQUt1SCxZQUM5QlIsUUFBU3VGLEdBQWdCdE0sS0FBS3NILFdBRS9CNEIsS0FDQUQsS0FZSixPQVZLakosS0FBS3lJLG1CQUFxQjJCLEVBQWFqSixTQUMxQ25CLEtBQUt5SSxrQkFBb0JmLEVBQWNrRyxxQkFBcUJ4RCxHQUM1RGxCLE9BR0dsSixLQUFLd0ksbUJBQXFCOEQsRUFBYW5MLFNBQzFDbkIsS0FBS3dJLGtCQUFvQmQsRUFBY21HLHFCQUFxQnZCLEdBQzVEckQsTUFHSyxDQUNMQyxzQkFDQUQsdUJBT0pJLHFCQUFzQkMsRUFBTXZDLEdBQzFCLE1BQU0rRyxFQUF3QixVQUFkeEUsRUFBSzlJLEtBQ2Z1TixFQUFrQkQsRUFBVTlOLEtBQUt1SSxxQkFBdUJ2SSxLQUFLc0kscUJBQzdEc0MsRUFBV2tELEVBQVU5TixLQUFLeUksa0JBQWtCaUMsSUFBTTFLLEtBQUt3SSxrQkFBa0JrQyxJQUN6RXNELEVBQXFCRixFQUFVOU4sS0FBSzJJLG1CQUFtQnhILE9BQVNuQixLQUFLMEksbUJBQW1CdkgsT0FFOUYsSUFBS21JLEVBQUt5QixtQkFBcUJ6QixFQUFLeUIsbUJBQXFCLEdBQUtuTCxPQUFPQyxNQUFNeUosRUFBS3lCLG9CQUM5RSxHQUFJaEUsRUFBUTVGLFFBQVUsRUFBRyxDQUN2QixNQUFNMkssRUFBVS9FLEVBQVFBLEVBQVE1RixPQUFTLEdBQUd1SixJQUU1Q3BCLEVBQUt5QixrQkFBb0JFLEtBQUtDLE9BQU9ZLEVBQVVsQixJQUFjbUQsRUFBa0JDLEVBQXNCLFVBRWxHLEdBQUkxRSxFQUFLeUIsbUJBQ1ZoRSxFQUFRNUYsUUFBVSxFQUFHLENBQ3ZCLE1BRU04TSxHQUZVbEgsRUFBUUEsRUFBUTVGLE9BQVMsR0FBR3VKLElBQzNCM0QsRUFBUSxHQUFHMkQsTUFDZ0IzRCxFQUFRNUYsT0FBUyxHQUU3RG1JLEVBQUt5QixrQkFBb0JFLEtBQUtDLE1BQU1ELEtBQUtRLElBQUluQyxFQUFLeUIsa0JBQW9Ca0QsSUFBZ0IsRUFBSTNFLEVBQUt5QixrQkFBb0JrRCxJQVF6SDdFLHFCQUNFLE1BQU0sV0FBRTlCLEVBQUYsV0FBY0MsR0FBZXZILEtBRW5DQSxLQUFLc0ksc0JBQXdCaEIsRUFBV1AsUUFBUTVGLE9BQ2hEbkIsS0FBS3VJLHNCQUF3QmhCLEVBQVdSLFFBQVE1RixPQU1sRCtNLHVCQUNFLE1BQU0sa0JBQUV6RixFQUFGLGtCQUFxQkQsR0FBc0J4SSxLQUVqREEsS0FBS3NILFdBQVdQLFFBQVUvRyxLQUFLc0gsV0FBV1AsUUFBUW9ILE9BQVFDLEdBQ2pEQSxFQUFPMUQsS0FBT2xDLEVBQWtCa0MsZUFBUTFLLEtBQUtxSSxjQUE4QitGLEVBQU8xRCxJQUFNMUssS0FBS3FJLGVBR3RHckksS0FBS3VILFdBQVdSLFFBQVUvRyxLQUFLdUgsV0FBV1IsUUFBUW9ILE9BQVFDLEdBQ2pEQSxFQUFPMUQsS0FBT2pDLEVBQWtCaUMsZUFBUTFLLEtBQUtvSSxjQUE4QmdHLEVBQU8xRCxJQUFNMUssS0FBS29JLGVBSXhHaUYscUJBQXNCZSxHQUNwQixPQUFJQSxFQUFPYixTQUFXYSxFQUFPYixRQUFRcEgsTUFDNUJpSSxFQUFPYixRQUFRcEgsTUFBUW5HLEtBQUtxTyxRQUU5QkMsSUFHVCx3QkFBeUJ2SCxHQUN2QixPQUF1QixJQUFuQkEsRUFBUTVGLE9BQ0g0RixFQUdGQSxFQUFRd0gsS0FBSyxDQUFDQyxFQUFHQyxJQUNmRCxFQUFFOUQsSUFBTStELEVBQUUvRCxLQVFyQiw0QkFBNkIzRCxHQUMzQixPQUFLQSxHQUE4QixJQUFuQkEsRUFBUTVGLE9BSWpCdUcsRUFBY3dGLGlCQUFpQm5HLEdBQVMsR0FIdEMsS0FNWCw0QkFBNkJBLEdBQzNCLElBQUtBLEVBQVE1RixPQUNYLE9BQU8sS0FHVCxNQUFNdU4sRUFBUzNILEVBQVF3SCxLQUFLLENBQUNDLEVBQUdDLElBQ3ZCRCxFQUFFOUQsSUFBTStELEVBQUUvRCxLQUduQixJQUFLLElBQUkvTixFQUFJLEVBQUcrRyxFQUFNZ0wsRUFBT3ZOLE9BQVF4RSxFQUFJK0csRUFBSy9HLElBQzVDLEdBQUkrUixFQUFPL1IsR0FBR2dTLFdBQ1osT0FBT0QsRUFBTy9SLEdBS3BCLHNCQUF1QmlTLEVBQVNyRSxHQUM5QixHQUFnQixPQUFacUUsRUFDRixPQUVGLE1BQU10QixFQUFTL0MsRUFBWUcsS0FBTyxFQUM1Qm1FLEVBQVFELEVBQVV0QixHQUFVLEtBQVFBLEVBQVNzQixHQUFXLElBQ3hERSxFQUFRdkUsRUFBWWdELFNBQVdoRCxFQUFZZ0QsUUFBUXdCLFlBRXpELE9BQU9GLEdBQVNDLEVBR2xCLHFCQUFzQi9ILEVBQVMrRCxHQUM3QnBKLFFBQVFzTixJQUFJLGlCQUNaLElBQUssSUFBSXJTLEVBQUksRUFBRytHLEVBQU1xRCxFQUFRNUYsT0FBUXhFLEVBQUkrRyxFQUFLL0csSUFBSyxDQUNsRCxNQUFNeVIsRUFBU3JILEVBQVFwSyxHQUN2QnlSLEVBQU8xRCxLQUFPSSxFQUNWc0QsRUFBTy9DLE1BQ1QrQyxFQUFPL0MsS0FBT1AsSUFRcEIsMEJBQTJCL0QsR0FDekIsSUFBSXdDLEtBQ0FFLEdBQWMsRUFDbEIsSUFBSyxJQUFJOU0sRUFBSSxFQUFHK0csRUFBTXFELEVBQVE1RixPQUFReEUsRUFBSStHLEVBQUsvRyxJQUM3QyxHQUFJb0ssRUFBUXBLLEdBQUc0USxTQUFXeEcsRUFBUXBLLEdBQUc0USxRQUFRakUsS0FBTSxDQUNqREMsS0FDQUUsRUFBYTlNLEVBQ2IsTUFJSixNQUFPLENBQ0w0TSxVQUNBRSxjQUlKLGFBQ0UsT0FBT3pKLEtBQUtpUCxTQUFTQyxZQUFZLFVBR25DLGlCQUNFLE9BQUlsUCxLQUFLbVAsT0FDQW5QLEtBQUttUCxPQUFPN0gsV0FFZCxLQUdULGlCQUNFLE9BQUl0SCxLQUFLbVAsT0FDQW5QLEtBQUttUCxPQUFPNUgsV0FFZCxLQUdULGNBQ0UsTUFBTTZILEVBQVVwUCxLQUFLaVAsU0FBU0MsWUFBWSxlQUMxQyxPQUFJRSxFQUNLQSxFQUFRQyxTQUVWLEcsVUFHSTNILEc7Ozs7eUdDbm5CZixNQUNFdEMsWUFBYWtLLEdBQ1h0UCxLQUFLb0gsSUFBTSxTQUNYcEgsS0FBS3VQLFFBQVVELEVBQ2Z0UCxLQUFLd1AsYUFBZSxFQUNwQnhQLEtBQUt5UCxZQUFjSCxFQUFXN0osV0FDOUJ6RixLQUFLMFAsV0FBcUMsRUFBeEJKLEVBQVc3SixXQUM3QnpGLEtBQUsyUCxhQUFlLEVBQ3BCM1AsS0FBSzRQLHFCQUF1QixFQUc5QjNKLFVBQ0VqRyxLQUFLdVAsUUFBVSxLQUdqQk0sbUJBQ0UsSUFBSUMsRUFBa0I5UCxLQUFLeVAsWUFBY3pQLEtBQUt3UCxhQUsxQ08sRUFBWTlFLEtBQUsrRSxJQUFJLEVBQUdGLEdBQ3hCRyxFQUFPLElBQUl2SyxXQUFXLEdBQzFCdUssRUFBS3BOLElBQUk3QyxLQUFLdVAsUUFBUVcsU0FBU2xRLEtBQUt3UCxhQUFjeFAsS0FBS3dQLGFBQWVPLElBQ3RFL1AsS0FBSzJQLGFBQWUsSUFBSVEsU0FBU0YsRUFBS0csUUFBUUMsVUFBVSxHQUV4RHJRLEtBQUt3UCxjQUFnQk8sRUFDckIvUCxLQUFLNFAscUJBQW1DLEVBQVpHLEVBRzlCTyxTQUFVL0UsR0FDUixJQUFJZ0YsRUFBT3RGLEtBQUsrRSxJQUFJaFEsS0FBSzRQLHFCQUFzQnJFLEdBQzNDaUYsRUFBT3hRLEtBQUsyUCxlQUFrQixHQUFLWSxFQUN2QyxHQUFJaEYsRUFBTyxHQUNULE1BQU0sSUFBSWpLLE1BQU0sMkNBVWxCLE9BUkF0QixLQUFLNFAsc0JBQXdCVyxFQUN6QnZRLEtBQUs0UCxxQkFBdUIsRUFDOUI1UCxLQUFLMlAsZUFBaUJZLEVBQ2J2USxLQUFLeVAsWUFBY3pQLEtBQUt3UCxhQUFlLEdBQ2hEeFAsS0FBSzZQLG9CQUdQVSxFQUFPaEYsRUFBT2dGLEdBQ0gsR0FBS3ZRLEtBQUs0UCxxQkFDWlksR0FBUUQsRUFBT3ZRLEtBQUtzUSxTQUFTQyxHQUU3QkMsRUFJWEMsV0FDRSxPQUE0QixJQUFyQnpRLEtBQUtzUSxTQUFTLEdBR3ZCSSxXQUNFLE9BQU8xUSxLQUFLc1EsU0FBUyxHQUd2QkssbUJBQ0UsSUFBSUMsRUFDSixJQUFLQSxFQUFZLEVBQUdBLEVBQVk1USxLQUFLNFAscUJBQXNCZ0IsSUFDekQsR0FBeUQsSUFBcEQ1USxLQUFLMlAsYUFBZ0IsYUFBZWlCLEdBR3ZDLE9BRkE1USxLQUFLMlAsZUFBaUJpQixFQUN0QjVRLEtBQUs0UCxzQkFBd0JnQixFQUN0QkEsRUFJWCxPQURBNVEsS0FBSzZQLG1CQUNFZSxFQUFZNVEsS0FBSzJRLG1CQUcxQkUsVUFDRSxJQUFJQyxFQUFlOVEsS0FBSzJRLG1CQUN4QixPQUFPM1EsS0FBS3NRLFNBQVNRLEVBQWUsR0FBSyxFQUczQ0MsVUFDRSxJQUFJblQsRUFBUW9DLEtBQUs2USxVQUNqQixPQUFZLEVBQVJqVCxFQUNNQSxFQUFRLElBQU8sR0FFZixHQUFLQSxJQUFVLE07Ozs7K0ZDbEY3QixJLE9BQUFqQixjQUFBLCtDLDJCQUNBLE1BQU02SyxFQUNKLG1CQUFvQjRJLEdBQ2xCLEdBQUlBLEVBQU9qUCxPQUFTaVAsRUFBT2xNLFNBQVcsRUFDcEMsTUFBTyxHQUdULElBQUk4TSxFQUFNWixFQUFPYSxTQUNiL00sRUFBV2tNLEVBQU9sTSxTQUN0QixPQUErQixJQUEzQjhNLEVBQUlFLFNBQVNoTixJQUNXLElBQTNCOE0sRUFBSUcsU0FBU2pOLElBQWlELElBQTlCOE0sRUFBSUksUUFBUWxOLEVBQVcsR0FDL0NzRCxFQUFRNkosY0FBY2pCLEdBRXRCNUksRUFBUThKLFlBQVlsQixHQUkvQixxQkFBc0JBLEdBQ3BCLElBQUltQixFQUFPLEdBQ1ByTixFQUFXc0QsRUFBUWdLLHdCQUF3QnBCLEdBQzNDakssRUFBUWpDLEVBQVN1TixJQUNqQkMsRUFBTXZMLEVBQ1YsS0FBT0EsRUFBUWlLLEVBQU9qUCxPQUFTLEdBQUcsQ0FDaEMsSUFBSXdRLEVBQVN2QixFQUFPQSxPQUFPeEssTUFBTU8sRUFBT0EsRUFBUWpDLEVBQVMwTixjQUNyRDFOLEVBQVN1TixNQUFRckIsRUFBT2xNLFVBQzFCa00sRUFBT3lCLEtBQUszTixFQUFTME4sY0FHdkJGLEdBREF4TixFQUFXc0QsRUFBUWdLLHdCQUF3QnBCLElBQzVCcUIsSUFDZixJQUNJSyxFQUFPLENBQUNILFNBQVFJLEtBRFQsSUFBSXJNLFdBQVcwSyxFQUFPQSxPQUFPeEssTUFBTU8sRUFBUXdMLEVBQU9sTSxXQUFZaU0sS0FFekVsSyxFQUFRd0ssV0FBV0YsR0FDbkJQLEVBQUtyUSxLQUFLNFEsR0FDVjFCLEVBQU95QixLQUFLSCxFQUFNdEIsRUFBT2xNLFVBQ3pCaUMsRUFBUXVMLEVBRVYsT0FBT0gsRUFHVCxtQkFBb0JuQixHQUNsQixJQUFJbUIsRUFBTyxHQUNYLEtBQU9uQixFQUFPbE0sU0FBV2tNLEVBQU9qUCxPQUFTLEdBQUcsQ0FDMUMsSUFBSUEsRUFBU2lQLEVBQU9hLFNBQVNDLFdBQzdCLEtBQUlkLEVBQU9qUCxPQUFTaVAsRUFBT2xNLFVBQVkvQyxHQVNyQyxNQVQ2QyxDQUM3QyxJQUFJd1EsRUFBU3ZCLEVBQU9BLE9BQU94SyxNQUFNd0ssRUFBT2xNLFNBQVVrTSxFQUFPbE0sU0FBVyxHQUNwRWtNLEVBQU95QixLQUFLLEdBQ1osSUFBSUUsRUFBTzNCLEVBQU9BLE9BQU94SyxNQUFNd0ssRUFBT2xNLFNBQVVrTSxFQUFPbE0sU0FBVy9DLEdBQ2xFaVAsRUFBT3lCLEtBQUsxUSxHQUNaLElBQUkyUSxFQUFPLENBQUNILFNBQVFJLFFBQ3BCdkssRUFBUXdLLFdBQVdGLEdBQ25CUCxFQUFLclEsS0FBSzRRLElBS2QsT0FBT1AsRUFHVCxrQkFBbUJPLEdBRWpCLE9BRDBCLEdBQWZBLEVBQUtDLEtBQUssSUFFbkIsS0FBSyxFQUVIRCxFQUFLRyxPQUNMLE1BQ0YsS0FBSyxFQUVISCxFQUFLSSxPQUNMLE1BQ0YsS0FBSyxFQUVILE1BQ0YsS0FBSyxFQUVISixFQUFLSyxJQUFNMUssVUFBVTJLLFNBQVNOLEVBQUtDLE1BQ25DLE1BQ0YsS0FBSyxFQUVIRCxFQUFLTyxRQVVYLCtCQUFnQ2pDLEdBRTlCLElBQUlxQixFQUFNckIsRUFBT2xNLFNBQ2IwTixFQUFlLEVBQ25CLEtBQXdCLElBQWpCQSxHQUF1QyxJQUFqQkEsR0FBc0JILEVBQU1yQixFQUFPalAsT0FBUyxHQUNqQyxJQUFsQ2lQLEVBQU9hLFNBQVNFLFNBQVNNLEdBQ2UsSUFBdENyQixFQUFPYSxTQUFTRSxTQUFTTSxFQUFNLEdBRWpDRyxFQUFlLEVBQytCLElBQXJDeEIsRUFBT2EsU0FBU0csUUFBUUssRUFBTSxHQUN2Q0csRUFBZSxFQUVmSCxJQUdGQSxJQW9CSixPQWhCSUEsSUFBUXJCLEVBQU9qUCxPQUFTLElBQ1ksSUFBbENpUCxFQUFPYSxTQUFTRSxTQUFTTSxHQUNlLElBQXRDckIsRUFBT2EsU0FBU0UsU0FBU00sRUFBTSxLQUVqQ0csRUFBZSxJQUdqQkgsSUFDc0MsSUFBbENyQixFQUFPYSxTQUFTRSxTQUFTTSxJQUErQyxJQUFqQ3JCLEVBQU9hLFNBQVNHLFFBQVFLLEdBRWpFRyxFQUFlLEVBRWZILEVBQU1yQixFQUFPalAsU0FJWixDQUFDc1EsTUFBS0csZ0JBR2YsZUFBZ0JPLEVBQUtFLEdBQ25CLElBQUk3UCxFQUFNLElBQUlrRCxXQUFXeU0sRUFBSTFNLFdBQWE0TSxFQUFJNU0sV0FBYSxJQUMzRGpELEVBQUksR0FBSyxFQUNUQSxFQUFJLEdBQUsyUCxFQUFJLEdBQ2IzUCxFQUFJLEdBQUsyUCxFQUFJLEdBQ2IzUCxFQUFJLEdBQUsyUCxFQUFJLEdBQ2IzUCxFQUFJLEdBQUssSUFDVEEsRUFBSSxHQUFLLElBRVQsSUFBSStDLEVBQVMsRUFhYixPQVhBL0MsRUFBSUssSUFBSSxJQUFJNkMsV0FBVyxDQUFFeU0sRUFBSTFNLGFBQWUsRUFBSyxJQUF1QixJQUFqQjBNLEVBQUkxTSxhQUFxQkYsR0FDaEZBLEdBQVUsRUFDVi9DLEVBQUlLLElBQUlzUCxFQUFLNU0sR0FHYi9DLEVBRkErQyxHQUFVNE0sRUFBSTFNLFlBRUEsRUFDZEYsSUFFQS9DLEVBQUlLLElBQUksSUFBSTZDLFdBQVcsQ0FBRTJNLEVBQUk1TSxhQUFlLEVBQUssSUFBdUIsSUFBakI0TSxFQUFJNU0sYUFBcUJGLEdBQ2hGQSxHQUFVLEVBQ1YvQyxFQUFJSyxJQUFJd1AsRUFBSzlNLEdBQ04vQyxHLFVBSUlnRixHOzs7OytGQ3RKZixJLE9BQUE3SyxpQkFBQSxrRCwyQkFFQSxNQUFNMlYsRUFDSixrQkFBbUJoRCxHQUNqQixJQUFJaUQsRUFBTWpELEVBQ05rRCxFQUFZRCxFQUFJOU0sV0FDaEJnTixFQUFNLElBQUkvTSxXQUFXOE0sR0FDckJFLEVBQVMsRUFFYixJQUFLLElBQUkvVixFQUFJLEVBQUdBLEVBQUk2VixFQUFXN1YsSUFDekJBLEdBQUssR0FDUSxJQUFYNFYsRUFBSTVWLElBQThCLElBQWY0VixFQUFJNVYsRUFBSSxJQUE4QixJQUFmNFYsRUFBSTVWLEVBQUksS0FJeEQ4VixFQUFJQyxHQUFVSCxFQUFJNVYsR0FDbEIrVixLQUdGLE9BQU8sSUFBSWhOLFdBQVcrTSxFQUFJckMsT0FBUSxFQUFHc0MsR0FHdkMsZ0JBQWlCcEQsR0FDZixJQUFJcUQsRUFBT0wsRUFBVU0sV0FBV3RELEdBQzVCdUQsRUFBSyxJQUFJQyxVQUFPSCxHQUVwQkUsRUFBR25DLFdBQ0gsSUFBSXFDLEVBQWFGLEVBQUduQyxXQUNwQm1DLEVBQUduQyxXQUNILElBQUlzQyxFQUFXSCxFQUFHbkMsV0FDbEJtQyxFQUFHaEMsVUFFSCxJQUFJb0MsRUFBaUJYLEVBQVVZLGlCQUFpQkgsR0FDNUNJLEVBQWViLEVBQVVjLGVBQWVKLEdBQ3hDSyxFQUFvQixFQUNwQkMsRUFBZ0IsSUFFaEJDLEVBQVksRUFFaEIsSUFBbUIsTUFBZlIsR0FBcUMsTUFBZkEsR0FBcUMsTUFBZkEsR0FDL0IsTUFBZkEsR0FBcUMsS0FBZkEsR0FBb0MsS0FBZkEsR0FDNUIsS0FBZkEsR0FBb0MsTUFBZkEsR0FBcUMsTUFBZkEsR0FDNUIsTUFBZkEsR0FBcUMsTUFBZkEsS0FFSSxLQUQxQk0sRUFBb0JSLEVBQUdoQyxZQUVyQmdDLEVBQUd2QyxTQUFTLEdBRVYrQyxHQUFxQixJQUN2QkMsRUFac0IsQ0FBQyxFQUFHLElBQUssSUFBSyxLQVlBRCxJQUd0Q0UsRUFBWVYsRUFBR2hDLFVBQVksRUFDM0JnQyxFQUFHaEMsVUFDSGdDLEVBQUd2QyxTQUFTLEdBQ1J1QyxFQUFHcEMsWUFBWSxDQUNqQixJQUFJK0MsRUFBNEMsSUFBdEJILEVBQTJCLEVBQUksR0FDekQsSUFBSyxJQUFJMVcsRUFBSSxFQUFHQSxFQUFJNlcsRUFBb0I3VyxJQUNsQ2tXLEVBQUdwQyxhQUNEOVQsRUFBSSxFQUNOMlYsRUFBVW1CLGlCQUFpQlosRUFBSSxJQUUvQlAsRUFBVW1CLGlCQUFpQlosRUFBSSxLQU16Q0EsRUFBR2hDLFVBQ0gsSUFBSTZDLEVBQXFCYixFQUFHaEMsVUFDNUIsR0FBMkIsSUFBdkI2QyxFQUNGYixFQUFHaEMsZUFDRSxHQUEyQixJQUF2QjZDLEVBQTBCLENBQ25DYixFQUFHdkMsU0FBUyxHQUNadUMsRUFBRzlCLFVBQ0g4QixFQUFHOUIsVUFDSCxJQUFJNEMsRUFBd0NkLEVBQUdoQyxVQUMvQyxJQUFLLElBQUlsVSxFQUFJLEVBQUdBLEVBQUlnWCxFQUF1Q2hYLElBQ3pEa1csRUFBRzlCLFVBR1A4QixFQUFHaEMsVUFDSGdDLEVBQUd2QyxTQUFTLEdBRVosSUFBSXNELEVBQTBCZixFQUFHaEMsVUFDN0JnRCxFQUFpQ2hCLEVBQUdoQyxVQUVwQ2lELEVBQXNCakIsRUFBR3ZDLFNBQVMsR0FDVixJQUF4QndELEdBQ0ZqQixFQUFHdkMsU0FBUyxHQUVkdUMsRUFBR3ZDLFNBQVMsR0FFWixJQUFJeUQsRUFBeUIsRUFDekJDLEVBQTBCLEVBQzFCQyxFQUF3QixFQUN4QkMsRUFBMkIsRUFFTHJCLEVBQUdwQyxhQUUzQnNELEVBQXlCbEIsRUFBR2hDLFVBQzVCbUQsRUFBMEJuQixFQUFHaEMsVUFDN0JvRCxFQUF3QnBCLEVBQUdoQyxVQUMzQnFELEVBQTJCckIsRUFBR2hDLFdBR2hDLElBQUlzRCxFQUFZLEVBQUdDLEVBQWEsRUFDNUJDLEVBQU0sRUFBR0MsS0FBa0JDLEVBQVUsRUFBR0MsRUFBVSxFQUd0RCxHQURrQzNCLEVBQUdwQyxXQUNKLENBQy9CLEdBQUlvQyxFQUFHcEMsV0FBWSxDQUNqQixJQUFJZ0UsRUFBbUI1QixFQUFHbkMsV0FDdEJnRSxFQUFjLENBQUMsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FDekVDLEVBQWMsQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUV4RUYsRUFBbUIsR0FBS0EsRUFBbUIsSUFDN0NOLEVBQVlPLEVBQVlELEVBQW1CLEdBQzNDTCxFQUFhTyxFQUFZRixFQUFtQixJQUNkLE1BQXJCQSxJQUNUTixFQUFZdEIsRUFBR25DLFlBQWMsRUFBSW1DLEVBQUduQyxXQUNwQzBELEVBQWF2QixFQUFHbkMsWUFBYyxFQUFJbUMsRUFBR25DLFlBaUJ6QyxHQWJJbUMsRUFBR3BDLFlBQ0xvQyxFQUFHcEMsV0FFRG9DLEVBQUdwQyxhQUNMb0MsRUFBR3ZDLFNBQVMsR0FDUnVDLEVBQUdwQyxZQUNMb0MsRUFBR3ZDLFNBQVMsS0FHWnVDLEVBQUdwQyxhQUNMb0MsRUFBR2hDLFVBQ0hnQyxFQUFHaEMsV0FFRGdDLEVBQUdwQyxXQUFZLENBQ2pCLElBQUltRSxFQUFvQi9CLEVBQUd2QyxTQUFTLElBQ2hDdUUsRUFBYWhDLEVBQUd2QyxTQUFTLElBQzdCZ0UsRUFBWXpCLEVBQUdwQyxXQUlmNEQsR0FGQUUsRUFBVU0sSUFDVkwsRUFBOEIsRUFBcEJJLElBS2QsSUFBSUUsRUFBVyxFQUNHLElBQWRYLEdBQWtDLElBQWZDLElBQ3JCVSxFQUFXWCxFQUFZQyxHQUd6QixJQUFJVyxFQUFjLEVBQUdDLEVBQWMsRUFDVCxJQUF0QjNCLEdBQ0YwQixFQUFjLEVBQ2RDLEVBQWMsRUFBSWxCLElBSWxCaUIsRUFGb0MsSUFBdEIxQixFQUEyQixFQUFJLEVBRzdDMkIsR0FGb0MsSUFBdEIzQixFQUEyQixFQUFJLElBRXJCLEVBQUlTLElBRzlCLElBQUltQixFQUE4QyxJQUEvQnJCLEVBQTBCLEdBQ3pDc0IsRUFBbUYsSUFBdENyQixFQUFpQyxJQUE5RCxFQUFJQyxHQUV4Qm1CLElBQWdCbEIsRUFBeUJDLEdBQTJCZSxFQUNwRUcsSUFBaUJqQixFQUF3QkMsR0FBNEJjLEVBRXJFLElBQUlHLEVBQWdCbEssS0FBS21LLEtBQUtILEVBQWNILEdBSzVDLE9BSEFqQyxFQUFHNU0sVUFDSDRNLEVBQUssS0FFRSxDQUNMSSxlQUFnQkEsRUFDaEJFLGFBQWNBLEVBQ2RJLFVBQVdBLEVBQ1hELGNBQWVBLEVBQ2YrQixxQkFBc0IvQyxFQUFVZ0Qsc0JBQXNCaEMsR0FFdERpQyxXQUFZLENBQ1ZqTCxNQUFPZ0ssRUFDUEQsSUFBS0EsRUFDTEcsUUFBU0EsRUFDVEQsUUFBU0EsR0FHWGlCLFVBQVcsQ0FDVEMsTUFBT3RCLEVBQ1B1QixPQUFRdEIsR0FHVnVCLFdBQVksQ0FDVkYsTUFBT1IsRUFDUFMsT0FBUVIsR0FHVlUsYUFBYyxDQUNaSCxNQUFPTixFQUNQTyxPQUFRUixJQUtkLHdCQUF5QnJDLEVBQUlwUixHQUMzQixJQUFJb1UsRUFBYSxFQUFHQyxFQUFhLEVBQzdCQyxFQUFjLEVBQ2xCLElBQUssSUFBSXBaLEVBQUksRUFBR0EsRUFBSThFLEVBQU85RSxJQUNOLElBQWZtWixJQUVGQSxHQUFjRCxHQURkRSxFQUFjbEQsRUFBRzlCLFdBQ3dCLEtBQU8sS0FFbEQ4RSxFQUE2QixJQUFmQyxFQUFvQkQsRUFBYUMsRUFJbkQsd0JBQXlCL0MsR0FDdkIsT0FBUUEsR0FDTixLQUFLLEdBQ0gsTUFBTyxXQUNULEtBQUssR0FDSCxNQUFPLE9BQ1QsS0FBSyxHQUNILE1BQU8sV0FDVCxLQUFLLElBQ0gsTUFBTyxPQUNULEtBQUssSUFDSCxNQUFPLFNBQ1QsS0FBSyxJQUNILE1BQU8sVUFDVCxLQUFLLElBQ0gsTUFBTyxVQUNULFFBQ0UsTUFBTyxXQUliLHNCQUF1QkMsR0FDckIsT0FBUUEsRUFBVyxJQUFJZ0QsUUFBUSxHQUdqQyw2QkFBOEJDLEdBQzVCLE9BQVFBLEdBQ04sS0FBSyxJQUNILE1BQU8sUUFDVCxLQUFLLElBQ0gsTUFBTyxRQUNULEtBQUssSUFDSCxNQUFPLFFBQ1QsUUFDRSxNQUFPLFdBSWIsbUJBQW9CQyxHQUNsQixJQUFJNU0sRUFBTyxHQUNQNE0sR0FBYUEsRUFBVVAsYUFDekJyTSxFQUFLNk0sV0FBYUQsRUFBVVAsV0FBV0YsTUFDdkNuTSxFQUFLOE0sWUFBY0YsRUFBVVAsV0FBV0QsT0FDeENwTSxFQUFLK00sYUFBZUgsRUFBVU4sYUFBYUgsTUFDM0NuTSxFQUFLZ04sY0FBZ0JKLEVBQVVOLGFBQWFGLFFBRzlDcE0sRUFBS2lOLFFBQVVMLEVBQVVqRCxlQUN6QjNKLEVBQUtrTixNQUFRTixFQUFVL0MsYUFDdkI3SixFQUFLbU4sU0FBV1AsRUFBVTNDLFVBQzFCakssRUFBS29OLGFBQWVSLEVBQVU1QyxjQUU5QmhLLEVBQUtxTixTQUFXLENBQ2RsQixNQUFPUyxFQUFVVixVQUFVQyxNQUMzQkMsT0FBUVEsRUFBVVYsVUFBVUUsUUFHOUJwTSxFQUFLZSxVQUFZNkwsRUFBVVgsV0FFM0IsSUFBSXFCLEVBQVN0TixFQUFLZSxVQUFVbUssUUFDeEJxQyxFQUFTdk4sRUFBS2UsVUFBVWtLLFFBQzVCakwsRUFBS3lCLGtCQUFvQkUsS0FBS0MsTUFBTTVCLEVBQUt3TixXQUFhRixFQUFTQyxLLFVBSXBEdkUsRzs7Ozs4Q0M3UmY1VixFQUFPRCxRQUFVLENBRWZzYSxXQUFZbFkscUNBQVEsbURBQWdDZ0csUUFDcERtUyxVQUFXblksNkJBQVEsMkNBQXdCZ0csUUFDM0NvUyxTQUFVcFksMkJBQVEseUNBQXNCZ0csUUFDeENxUyxXQUFZclksd0JBQVEsc0NBQW1CZ0csVTs7OzsrRkNMekMsTUFBQWxJLHVCQUFBLDhCQUVBLE1BQU13YSxFQUFhLENBQ2pCQyxPQUFRLEVBQ1JDLFFBQVMsRUFDVEMsT0FBUSxFQUNSQyxPQUFRLEVBQ1JDLFVBQVcsRUFDWEMsV0FBWSxFQUNaQyxhQUFjLEdBQ2RDLEtBQU0sR0FDTkMsWUFBYSxJLFVBTUEsTUFDYnhTLGNBQ0VwRixLQUFLdUYsT0FBUyxFQUNkdkYsS0FBSzZYLFdBQWE3WCxLQUFLdUYsT0FHekJ1UyxRQUFTeE8sRUFBTWlDLEdBQ2IsR0FBSUEsRUFBTyxFQUNULE1BQU0sSUFBSWpLLE1BQU0sZ0NBRWxCLE1BQU15VyxFQUFXLEdBQ1g3YSxFQUFPOEMsS0FBS2dZLFdBQVcxTyxHQUN2QjFMLEVBQVFvQyxLQUFLZ1ksV0FBVzFPLEVBQU1pQyxFQUFPck8sRUFBSythLFVBSWhELE9BSEFGLEVBQVM3YSxFQUFLc0ksTUFBUTVILEVBQU00SCxLQUU1QnhGLEtBQUtrWSxjQUNFSCxFQUdURyxjQUNFbFksS0FBS3VGLE9BQVMsRUFDZHZGLEtBQUs2WCxXQUFhN1gsS0FBS3VGLE9BR3pCNFMsWUFBYS9ILEdBQ1gsTUFDTWdJLEVBREssSUFBSWpJLFNBQVNDLEVBQVFwUSxLQUFLNlgsWUFDbkJRLFVBQVUsR0FBSUMsUUFDaEMsSUFBSUMsRUFBTSxHQUVSQSxFQURFSCxFQUFTLEVBQ0xJLE9BQUtDLE9BQU8sSUFBSS9TLFdBQVcwSyxFQUFRcFEsS0FBSzZYLFdBQWEsRUFBR08sSUFFeEQsR0FFUixJQUFJN00sRUFBTzZNLEVBQVMsRUFFcEIsT0FEQXBZLEtBQUs2WCxZQUFjdE0sRUFDWixDQUNML0YsS0FBTStTLEVBQ05OLFNBQVVHLEVBQVMsR0FJdkJNLFVBQVd0SSxFQUFRN0UsR0FDakIsTUFBTW9OLEVBQUssSUFBSXhJLFNBQVNDLEVBQVFwUSxLQUFLNlgsV0FBWXRNLEdBQ2pELElBQUlxTixFQUFLRCxFQUFHRSxXQUFXLEdBQUlQLFFBSzNCLE9BSEFNLEdBQW1CLEdBREFELEVBQUd4SCxTQUFTLEdBQUltSCxRQUNYLElBRXhCdFksS0FBSzZYLFlBQWMsR0FDWixDQUNMclMsS0FBTSxJQUFJc1QsS0FBS0YsR0FDZlgsU0FBVSxJQUlkYyxZQUFhM0ksRUFBUTdFLEdBQ25CLE1BQU1yTyxFQUFPOEMsS0FBS21ZLFlBQVkvSCxFQUFRN0UsR0FDaEMzTixFQUFRb0MsS0FBS2dZLFdBQVc1SCxFQUFRN0UsRUFBT3JPLEVBQUsrYSxVQUNsRCxNQUFPLENBQ0x6UyxLQUFNLENBQ0p0SSxLQUFNQSxFQUFLc0ksS0FDWDVILE1BQU9BLEVBQU00SCxNQUVmeVMsU0FBVS9hLEVBQUsrYSxTQUFXcmEsRUFBTXFhLFNBQ2hDZSxTQUFVcGIsRUFBTW9iLFVBSXBCQyxnQkFBaUI3SSxHQUNmLE1BQ01nSSxFQURLLElBQUlqSSxTQUFTQyxFQUFRcFEsS0FBSzZYLFlBQ25CeEgsVUFBVSxHQUFJaUksUUFDaEMsSUFBSUMsRUFBTSxHQVFWLE9BTkVBLEVBREVILEVBQVMsRUFDTEksT0FBS0MsT0FBTyxJQUFJL1MsV0FBVzBLLEVBQVFwUSxLQUFLNlgsV0FBYSxFQUFHTyxJQUV4RCxHQUdScFksS0FBSzZYLFlBQWNPLEVBQVMsRUFDckIsQ0FDTDVTLEtBQU0rUyxFQUNOTixTQUFVRyxFQUFTLEdBT3ZCSixXQUFZeFMsRUFBTStGLEdBQ2hCLElBQUk2RSxFQUFTLElBQUk4SSxZQUVmOUksRUFERTVLLGFBQWdCMFQsWUFDVDFULEVBRUFBLEVBQUs0SyxPQUVoQixNQUFNLE9BQ0pnSCxFQURJLFFBRUpDLEVBRkksT0FHSkMsRUFISSxPQUlKQyxFQUpJLFVBS0pDLEVBTEksV0FNSkMsRUFOSSxhQU9KQyxFQVBJLEtBUUpDLEVBUkksWUFTSkMsR0FDRVQsRUFDRWdDLEVBQVcsSUFBSWhKLFNBQVNDLEVBQVFwUSxLQUFLNlgsV0FBWXRNLEdBQ3ZELElBQUl5TixLQUNKLE1BQU14WSxFQUFPMlksRUFBU0MsU0FBUyxHQUMvQixJQUFJN1QsRUFBUyxFQUNidkYsS0FBSzZYLFlBQWMsRUFDbkIsSUFBSWphLEVBQVEsS0FFWixPQUFRNEMsR0FDTixLQUFLNFcsRUFDSHhaLEVBQVF1YixFQUFTTixXQUFXLEdBQUlQLFFBQ2hDdFksS0FBSzZYLFlBQWMsRUFDbkJ0UyxHQUFVLEVBQ1YsTUFFRixLQUFLOFIsRUFFSHpaLElBRGdCdWIsRUFBU0MsU0FBUyxHQUVsQ3BaLEtBQUs2WCxZQUFjLEVBQ25CdFMsR0FBVSxFQUNWLE1BRUYsS0FBSytSLEVBQVEsQ0FDWCxNQUFNaUIsRUFBTXZZLEtBQUttWSxZQUFZL0gsR0FDN0J4UyxFQUFRMmEsRUFBSS9TLEtBQ1pELEdBQVVnVCxFQUFJTixTQUNkLE1BRUYsS0FBS1YsRUFBUSxDQUNYM1osRUFBUSxHQUNSLElBQUl5YixFQUFhLEVBS2pCLElBSjBDLFNBQXRDRixFQUFTOUksVUFBVTlFLEVBQU8sR0FBSStNLFVBQ2hDZSxFQUFhLEdBR1I5VCxFQUFTZ0csRUFBTyxHQUFHLENBQ3hCLE1BQU0rTixFQUFTdFosS0FBSytZLFlBQVkzSSxFQUFRN0UsRUFBT2hHLEVBQVM4VCxHQUN4RCxHQUFJQyxFQUFPQyxZQUFlLE1BQzFCM2IsRUFBTTBiLEVBQU85VCxLQUFLdEksTUFBUW9jLEVBQU85VCxLQUFLNUgsTUFDdEMySCxHQUFVK1QsRUFBT3JCLFNBRWYxUyxHQUFVZ0csRUFBTyxHQUVOLElBRHdDLFNBQXhDNE4sRUFBUzlJLFVBQVU5SyxFQUFTLEdBQUkrUyxXQUUzQ3RZLEtBQUs2WCxZQUFjLEVBQ25CdFMsR0FBVSxHQUdkLE1BRUYsS0FBS2lTLEVBQVcsQ0FDZDVaLEVBQVEsR0FDUjJILEdBQVUsRUFDVnZGLEtBQUs2WCxZQUFjLEVBQ25CLElBQUl3QixFQUFhLEVBS2pCLElBSjJELElBQWhCLFNBQXRDRixFQUFTOUksVUFBVTlFLEVBQU8sR0FBSStNLFdBQ2pDZSxFQUFhLEdBR1I5VCxFQUFTZ0csRUFBTyxHQUFHLENBQ3hCLE1BQU1pTyxFQUFTeFosS0FBSytZLFlBQVkzSSxFQUFRN0UsRUFBT2hHLEVBQVM4VCxHQUN4RCxHQUFJRyxFQUFPRCxZQUFlLE1BQzFCM2IsRUFBTTRiLEVBQU9oVSxLQUFLdEksTUFBUXNjLEVBQU9oVSxLQUFLNUgsTUFDdEMySCxHQUFVaVUsRUFBT3ZCLFNBRWYxUyxHQUFVZ0csRUFBTyxHQUVKLElBRHdDLFNBQXhDNE4sRUFBUzlJLFVBQVU5SyxFQUFTLEdBQUkrUyxXQUU3Qy9TLEdBQVUsRUFDVnZGLEtBQUs2WCxZQUFjLEdBR3ZCLE1BR0YsS0FBS0osRUFDSDdaLEVBQVEsS0FDUm9iLEtBQ0EsTUFHRixLQUFLdEIsRUFBYyxDQUNqQjlaLEVBQVEsR0FDUixNQUFNNmIsRUFBWU4sRUFBUzlJLFVBQVUsR0FBSWlJLFFBQ3pDL1MsR0FBVSxFQUNWdkYsS0FBSzZYLFlBQWMsRUFDbkIsSUFBSyxJQUFJbGIsRUFBSSxFQUFHQSxFQUFJOGMsRUFBVzljLElBQUssQ0FDbEMsTUFBTStjLEVBQVMxWixLQUFLZ1ksV0FBVzVILEVBQVE3RSxFQUFPaEcsR0FDOUMzSCxFQUFNc0QsS0FBS3dZLEVBQU9sVSxNQUNsQkQsR0FBVW1VLEVBQU96QixTQUVuQixNQUdGLEtBQUtOLEVBQU0sQ0FDVCxNQUFNZ0MsRUFBTzNaLEtBQUswWSxVQUFVdEksRUFBUTdFLEVBQU8sR0FDM0MzTixFQUFRK2IsRUFBS25VLEtBQ2JELEdBQVVvVSxFQUFLMUIsU0FDZixNQUdGLEtBQUtMLEVBQWEsQ0FDaEIsTUFBTWdDLEVBQVU1WixLQUFLaVosZ0JBQWdCN0ksRUFBUTdFLEVBQU8sR0FDcEQzTixFQUFRZ2MsRUFBUXBVLEtBQ2hCRCxHQUFVcVUsRUFBUTNCLFNBQ2xCLE1BR0YsUUFDRTFTLEVBQVNnRyxFQUliLE1BQU8sQ0FDTC9GLEtBQU01SCxFQUNOcWEsU0FBVTFTLEVBQ1Z5VCxTQUFVQSxNOzs7OytGQzdPaEIsSSxFQUFBLEVBQUFyYyx1QkFBQSw4QkFDQSxFQUFBQSx1QkFBQSw4QkFDQSxFQUFBQSx3QkFBQSwrQixLQUVBQSxxQkFBQSw2QywyQkFFQSxNQUFNbUwsRUFBZUMsU0FBT0QsYUFFNUIsTUFBTW9QLEVBQ0o5UixjQUNFcEYsS0FBSzZaLHdCQUNMN1osS0FBSzhaLFVBQVksRUFDakI5WixLQUFLK1osY0FHUGhhLE9BQ0VDLEtBQUs2RCxHQUFHaUUsRUFBYWtTLFlBQWFoYSxLQUFLaWEsV0FBVzliLEtBQUs2QixPQVF6RCxpQkFBa0J3RixHQUNoQixRQUFxQixLQUFaQSxFQUFLLElBQTJCLEtBQVpBLEVBQUssSUFBMkIsS0FBWkEsRUFBSyxJQUEyQixJQUFaQSxFQUFLLElBTzVFLG1CQUFvQjBVLEdBQ2xCLE1BQU1DLEVBQVMsQ0FDYkMsVUFBVUEsRUFDVkMsVUFBVUEsR0FXWixPQUFPLEVBUkhILElBQ0ZDLEVBQU9DLGNBQVcsRUFHaEJGLElBQ0ZDLEVBQU9FLGFBR0ZGLEVBR1RGLGFBQ0UsR0FBS2phLEtBQUs2WixxQkFPSCxDQUNMLEdBQUk3WixLQUFLc2EsYUFBYW5aLE9BQVMsR0FDN0IsT0FFRixJQUFJb1osRUFFQUMsRUFBVSxJQUNkLEdBQ0VELEVBQVF2YSxLQUFLeWEscUJBQ05GLEdBQVNDLEtBQVksR0FFOUJ4YSxLQUFLZ0IsS0FBSzhHLEVBQWE0UyxvQkFsQk8sQ0FDOUIsR0FBSTFhLEtBQUtzYSxhQUFhblosT0FBUyxHQUM3QixPQUVGLE1BQU13USxFQUFTM1IsS0FBS3NhLGFBQWFsVyxNQUFNLElBQ3ZDcEUsS0FBSzJhLGVBQWVoSixHQUNwQjNSLEtBQUtpYSxjQWdCVFUsZUFBZ0JoSixHQUNkLEdBQUt1RixFQUFXMEQsVUFBVWpKLEdBR25CLENBQ0wzUixLQUFLNlosd0JBQ0wsTUFBTWdCLEVBQVczRCxFQUFXNEQsWUFBWW5KLEVBQU8sSUFFM0NrSixFQUFTVCxVQUNYcGEsS0FBSythLGlCQUdIRixFQUFTUixVQUNYcmEsS0FBS2diLHNCQVhQaGIsS0FBS2dCLEtBQUs4RyxFQUFhbVQsWUFBYSxJQUFJM1osTUFBTSxxQkFDOUN0QixLQUFLaWEsYUFhUGphLEtBQUtpYSxhQU1QYyxpQkFDRS9hLEtBQUs4WixZQUNMLElBQUl2UyxFQUFhLElBQUl2QyxhQUNyQnVDLEVBQVcrQixLQUFPLElBQUk0UixpQkFDdEIzVCxFQUFXVixHQUFLVSxFQUFXK0IsS0FBS3pDLEdBQUs3RyxLQUFLOFosVUFFMUM5WixLQUFLbVAsT0FBTzVILFdBQWFBLEVBTTNCeVQsaUJBQ0VoYixLQUFLOFosWUFDTCxJQUFJeFMsRUFBYSxJQUFJdkMsYUFDckJ1QyxFQUFXZ0MsS0FBTyxJQUFJNlIsaUJBQ3RCN1QsRUFBV1QsR0FBS1MsRUFBV2dDLEtBQUt6QyxHQUFLN0csS0FBSzhaLFVBRTFDOVosS0FBS21QLE9BQU83SCxXQUFhQSxFQVkzQm1ULGVBQ0UsR0FBSXphLEtBQUtzYSxhQUFhblosT0FBUyxHQUM3QixPQUFPLEtBRVQsSUFBSW9aLEVBQVF2YSxLQUFLb2IscUJBSWpCLE9BSEliLEdBQ0Z2YSxLQUFLcWIsY0FBY2QsR0FFZEEsRUFNVGEscUJBQ0UsSUFBSTdWLEVBQVMsRUFDVGdWLEVBQVEsR0FFUmUsRUFBVXRiLEtBQUtzYSxhQUFhcFUsTUFBTVgsRUFBUSxHQVc5QyxHQVZBQSxHQUFVLEVBR1ZnVixFQUFNeE4sVUFBc0IsR0FBVnVPLEtBQWtCLEVBQ3BDZixFQUFNZSxRQUFvQixHQUFWQSxFQUdoQmYsRUFBTXpOLFNBQVc5TSxLQUFLc2EsYUFBYXBVLE1BQU1YLEVBQVEsR0FDakRBLEdBQVUsRUFFYSxJQUFsQmdWLEVBQU1lLFNBQW1DLElBQWxCZixFQUFNZSxTQUFtQyxLQUFsQmYsRUFBTWUsU0FBb0MsS0FBbEJmLEVBQU1lLFNBQzdDLElBQWxDdGIsS0FBS3NhLGFBQWFwVSxNQUFNLEVBQUcsR0FLM0IsT0FKSWxHLEtBQUtzYSxjQUFnQnRhLEtBQUtzYSxhQUFhblosT0FBUyxHQUNsRG5CLEtBQUtzYSxhQUFhbFcsTUFBTSxHQUUxQnBFLEtBQUtnQixLQUFLOEcsRUFBYW1ULFlBQWFqYixLQUFLb0gsSUFBSyxJQUFJOUYsTUFBTSxXQUFhaVosRUFBTWUsYUFDcEUsS0FHVCxHQUFJdGIsS0FBS3NhLGFBQWFuWixPQUFTb1osRUFBTXpOLFNBQVcsR0FDOUMsT0FBTyxLQUlUOU0sS0FBS3NhLGFBQWFsVyxNQUFNLEdBR3hCLElBQUltWCxFQUFZdmIsS0FBS3NhLGFBQWFwVSxNQUFNLEVBQUcsR0FDM0NsRyxLQUFLc2EsYUFBYWxXLE1BQU0sR0FHeEIsSUFBSW9YLEVBQWV4YixLQUFLc2EsYUFBYWxXLE1BQU0sR0FBRyxHQVM5QyxPQVJJb1gsRUFBZSxJQUNqQkQsR0FBNEIsU0FBZkMsR0FHZmpCLEVBQU03UCxJQUFNNlEsRUFHWnZiLEtBQUtzYSxhQUFhbFcsTUFBTSxHQUNqQm1XLEVBR1RjLGNBQWVkLEdBQ2IsT0FBUUEsRUFBTWUsU0FDWixLQUFLLEdBQ0h0YixLQUFLeWIsaUJBQWlCbEIsR0FDdEIsTUFDRixLQUFLLEVBQ0h2YSxLQUFLMGIsY0FBY25CLEdBQ25CLE1BQ0YsS0FBSyxFQUNIdmEsS0FBSzJiLGVBQWVwQixHQUNwQixNQUNGLEtBQUssR0FFSHZhLEtBQUtzYSxhQUFhbFcsTUFBTSxHQUN4QixNQUNGLFFBQ0VwRSxLQUFLc2EsYUFBYWxXLE1BQU0sSUFTOUJxWCxpQkFBa0JsQixHQUNoQixJQUFJalQsRUFBYXRILEtBQUttUCxPQUFPN0gsV0FDekJDLEVBQWF2SCxLQUFLbVAsT0FBTzVILFdBRXpCL0IsRUFBT3hGLEtBQUtzYSxhQUFhbFcsTUFBTW1XLEVBQU16TixVQUV6QyxNQUFNOE8sR0FBTyxJQUFJQyxXQUFZL0QsUUFBUXRTLEVBQU1BLEVBQUtyRSxRQUUxQzJhLEVBQWE5YixLQUFLaVAsU0FBUzZNLFdBQWFGLEVBQU9BLEVBQUtFLGtCQWMxRCxHQVhBOWIsS0FBS2lQLFNBQVM4TSxVQUFVN1AsU0FBVzRQLEVBQVc1UCxTQUM5Q2xNLEtBQUtpUCxTQUFTOE0sVUFBVTNCLFNBQVcwQixFQUFXMUIsU0FDOUNwYSxLQUFLaVAsU0FBUzhNLFVBQVVDLFNBQVdGLEVBQVd6QixTQUUvQnJhLEtBQUtpYyxtQkFBbUIxQixFQUFNek4sWUFFM0M5TSxLQUFLZ0IsS0FBSzhHLEVBQWFvVSxZQUN2QmxjLEtBQUsrWixlQUlIelMsSUFBZUEsRUFBVzZVLGtCQUFtQixDQUMvQyxJQUFJN1MsRUFBT2hDLEVBQVdnQyxLQVN0QixPQVJJd1MsRUFBV00sa0JBQ2I5UyxFQUFLK1MsV0FBYVAsRUFBV00saUJBRzNCTixFQUFXUSxnQkFDYmhULEVBQUsxQixhQUFla1UsRUFBV1EsZUFHekJSLEVBQVdNLGlCQUNqQixLQUFLLE1BQ0g5UyxFQUFLaVQsZ0JBQWtCLEVBQ3ZCLE1BQ0YsS0FBSyxNQUNIalQsRUFBS2lULGdCQUFrQixFQUN2QixNQUNGLEtBQUssTUFDSGpULEVBQUtpVCxnQkFBa0IsSUFJN0IsR0FBSWhWLElBQWVBLEVBQVc0VSxrQkFBbUIsQ0FDL0MsSUFBSTdTLEVBQU8vQixFQUFXK0IsS0FDdEIsR0FBb0MsaUJBQXpCd1MsRUFBV1UsVUFBd0IsQ0FDNUMsSUFBSTNGLEVBQVM1TCxLQUFLQyxNQUE2QixJQUF2QjRRLEVBQVdVLFdBQ25DLEdBQUkzRixFQUFTLEVBQUcsQ0FDZCxJQUFJeEMsRUFBTXdDLEVBQVMsSUFDZHZOLEVBQUtlLFlBQ1JmLEVBQUtlLFVBQVksSUFFbkJmLEVBQUtlLFVBQVVDLFNBQ2ZoQixFQUFLZSxVQUFVZ0ssSUFBTUEsRUFDckIvSyxFQUFLZSxVQUFVa0ssUUFBVXNDLEVBQ3pCdk4sRUFBS2UsVUFBVW1LLFFBQVUsT0FNakNpSSx5QkFBMEJqWCxHQUN4QixJQUFJaEQsRUFBTSxDQUNWQSxzQkFDQUEsRUFBSWthLFdBQWFsWCxFQUFLLEtBQU8sRUFDN0JoRCxFQUFJK1osaUJBQThCLEVBQVYvVyxFQUFLLEtBQVcsRUFBTUEsRUFBSyxLQUFPLEVBQzFEaEQsRUFBSTRaLGdCQUFrQnBjLEtBQUsyYyx1QkFBdUJuYSxFQUFJK1osaUJBQ3REL1osRUFBSW9GLGNBQTBCLElBQVZwQyxFQUFLLE1BQWMsRUFDdkNoRCxFQUFJb2EsYUFBeUIsRUFBVnBYLEVBQUssTUFBWSxFQUNwQ2hELEVBQUlxYSxvQkFBZ0MsRUFBVnJYLEVBQUssTUFBWSxFQUMzQ2hELEVBQUlzYSxtQkFBK0IsRUFBVnRYLEVBQUssR0FFOUJoRCxFQUFJbUYsaUJBQW1CbkYsRUFBSWthLGFBQzNCLElBQ0lLLEVBRUFDLEVBSEFDLEVBQVlyZSxPQUFPc2UsVUFBVUQsVUFBVUUsY0FJdkNDLEVBQWdCNWEsRUFBSStaLGdCQThDeEIsT0E1Q3NDLElBQWxDVSxFQUFVSSxRQUFRLFdBRWhCN2EsRUFBSStaLGlCQUFtQixHQUN6Qi9aLEVBQUlrYSxXQUFhLEVBQ2pCTSxFQUFTLElBQUl2YSxNQUFNLEdBQ25Cc2EsRUFBeUJLLEVBQWdCLElBRXpDNWEsRUFBSWthLFdBQWEsRUFDakJNLEVBQVMsSUFBSXZhLE1BQU0sR0FDbkJzYSxFQUF5QkssSUFFZ0IsSUFBbENILEVBQVVJLFFBQVEsWUFFM0I3YSxFQUFJa2EsV0FBYSxFQUNqQk0sRUFBUyxJQUFJdmEsTUFBTSxHQUNuQnNhLEVBQXlCSyxJQUl6QjVhLEVBQUlrYSxXQUFhLEVBQ2pCSyxFQUF5QnZhLEVBQUkrWixnQkFDN0JTLEVBQVMsSUFBSXZhLE1BQU0sR0FFZkQsRUFBSStaLGlCQUFtQixFQUN6QlEsRUFBeUJ2YSxFQUFJK1osZ0JBQWtCLEVBQ2pCLElBQXJCL1osRUFBSW9GLGVBQ2JwRixFQUFJa2EsV0FBYSxFQUNqQk0sRUFBUyxJQUFJdmEsTUFBTSxHQUNuQnNhLEVBQXlCdmEsRUFBSStaLGtCQUlqQ1MsRUFBTyxHQUFLeGEsRUFBSWthLFlBQWMsRUFDOUJNLEVBQU8sS0FBNkIsR0FBdEJ4YSxFQUFJK1osbUJBQTRCLEVBQzlDUyxFQUFPLElBQTRCLEdBQXRCeGEsRUFBSStaLGtCQUEyQixFQUM1Q1MsRUFBTyxLQUEwQixHQUFuQnhhLEVBQUlvRixlQUF3QixFQUNuQixJQUFuQnBGLEVBQUlrYSxhQUNOTSxFQUFPLEtBQWlDLEdBQXpCRCxLQUFtQyxFQUNsREMsRUFBTyxJQUErQixFQUF6QkQsSUFBa0MsRUFFL0NDLEVBQU8sSUFBTyxFQUNkQSxFQUFPLEdBQUssR0FFZHhhLEVBQUl3YSxPQUFTQSxFQUNOeGEsRUFHVGtaLGNBQWVuQixHQUNiLElBQUkrQyxFQUFRdGQsS0FBS21QLE9BQU83SCxXQUN4QixJQUFLZ1csRUFDSCxPQUdGLElBQUloVSxFQUFPZ1UsRUFBTWhVLEtBRVpBLElBQ0hnVSxFQUFNaFUsS0FBTyxJQUFJNlIsaUJBQ2pCN1IsRUFBT2dVLEVBQU1oVSxNQUdmLElBQUlzUyxFQUFPNWIsS0FBS3NhLGFBQWFsVyxNQUFNLEdBQUcsR0FFdENtVyxFQUFNL1UsS0FBT3hGLEtBQUtzYSxhQUFhbFcsTUFBTW1XLEVBQU16TixTQUFXLEdBRXRELElBQUl5USxHQUFpQixJQUFQM0IsS0FBZ0IsRUFFOUIwQixFQUFNQyxPQUFTQSxFQUVBLEtBQVhBLEdBQ0Z2ZCxLQUFLZ0IsS0FBSzhHLEVBQWFtVCxZQUFhLElBQUkzWiwrQkFBK0JpYyxNQUcxRCxLQUFYQSxHQUFrQnZkLEtBQUt3ZCxvQkFDekJsVSxFQUFLK1MsV0FBYXJjLEtBQUt5ZCw4QkFBOEI3QixHQUNyRHRTLEVBQUtpVCxpQkFBMEIsR0FBUFgsS0FBZSxFQUN2Q3RTLEVBQUtvVSxZQUFxQixFQUFQOUIsS0FBYyxFQUNqQ3RTLEVBQUsxQixhQUFzQixFQUFQZ1UsRUFDcEJ0UyxFQUFLeUIsa0JBQW9CRSxLQUFLQyxNQUFNLEtBQU81QixFQUFLcVUsZ0JBQWtCclUsRUFBS3dOLFlBR3pFLElBQUk2RyxFQUFrQnJVLEVBQUtxVSxnQkFDdkJDLEVBQXVCdFUsRUFBS2lULGdCQUM1QnhSLEVBQW9CekIsRUFBS3lCLHlCQUV0QndQLEVBQU1lLFFBQ2IsSUFBSXVDLEVBQVc3ZCxLQUFLaWMsbUJBQW1CMUIsRUFBTXpOLFVBRTdDLEdBQXNCLElBQWxCeU4sRUFBTS9VLEtBQUssR0FBVSxDQUN2QixJQUFJc1ksRUFBWTlkLEtBQUt5Yyx5QkFBeUJsQyxFQUFNL1UsTUFDcERtWSxFQUFrQkcsRUFBVTFCLGlCQUFtQjlTLEVBQUtxVSxnQkFDcERDLEVBQXVCRSxFQUFVdkIsaUJBQW1CalQsRUFBS2lULGdCQUN6RHhSLEVBQW9CRSxLQUFLQyxNQUFNLEtBQU95UyxFQUFrQnJVLEVBQUt3TixXQUU3RHhOLEVBQUsxQixhQUFla1csRUFBVWxXLGFBQzlCMEIsRUFBSytTLFdBQWFzQixFQUNsQnJVLEVBQUtpVCxnQkFBa0JxQixFQUN2QnRVLEVBQUt5QixrQkFBb0JBLEVBQ3pCekIsRUFBSzRDLFNBQVdsTSxLQUFLaVAsU0FBUzhNLFVBQVU3UCxTQUFXNUMsRUFBS3dOLFVBQ3hEeE4sRUFBSzBULE9BQVNjLEVBQVVkLE9BRXhCLE1BQU1lLEVBQWEvZCxLQUFLaVAsU0FBUzhNLFVBQVV6VixNQUczQ3lYLEVBQVdwVyxNQUFRbVcsRUFBVW5XLE1BQzdCb1csRUFBV25XLGFBQWVrVyxFQUFVbFcsYUFDcENtVyxFQUFXMUIsV0FBYXNCLEVBQ3hCSSxFQUFXeEIsZ0JBQWtCdUIsRUFBVUYscUJBRW5DNWQsS0FBSytaLGFBQWUvWixLQUFLd2Qsa0JBQzNCeGQsS0FBS2dCLEtBQUs4RyxFQUFha1csZ0JBQWlCLFNBQy9CaGUsS0FBSytaLFlBQWMvWixLQUFLd2QsbUJBQ2pDeGQsS0FBS2dCLEtBQUs4RyxFQUFhbVcsdUJBR3pCamUsS0FBS3dkLHFCQUVMeGQsS0FBS2tlLG9CQUVEbGUsS0FBS2tlLGNBQ1AzRCxFQUFNaE4sUUFBVSxDQUNkakUsS0FBTWdVLEVBQU1oVSxNQUVkdEosS0FBS2tlLGdCQUdQM0QsRUFBTS9VLEtBQU8rVSxFQUFNL1UsS0FBS0ksTUFBTSxFQUFHMlUsRUFBTS9VLEtBQUtyRSxRQUM1Q21jLEVBQU12VyxRQUFRN0YsS0FBS3FaLEdBRWhCc0QsR0FDSDdkLEtBQUtnQixLQUFLOEcsRUFBYW1ULFlBQWFqYixLQUFLb0gsSUFBSyxJQUFJOUYsTUFBTSx1QkFBeUJpWixFQUFNek4sY0FVM0Y2TyxlQUFnQnBCLEdBRWQsSUFBSXFCLEVBQU81YixLQUFLc2EsYUFBYWxXLE1BQU0sR0FBRyxHQUN0Q21XLEVBQU00RCxXQUFvQixJQUFQdkMsS0FBaUIsRUFDcENyQixFQUFNNUwsV0FBaUMsSUFBcEI0TCxFQUFNNEQsVUFFekIsSUFBSUMsRUFBaUIsR0FBUHhDLEVBU2QsR0FSQTViLEtBQUttUCxPQUFPNUgsV0FBVzZXLFFBQVVBLEVBR2pDN0QsRUFBTThELGNBQWdCcmUsS0FBS3NhLGFBQWFsVyxNQUFNLEdBQUcsR0FDakRtVyxFQUFNalAsSUFBTXRMLEtBQUtzYSxhQUFhcFUsTUFBTSxFQUFHLEdBQ3ZDbEcsS0FBS3NhLGFBQWFsVyxNQUFNLEdBR1IsS0FBWmdhLEVBQWdCLENBQ2xCLE1BQU01WSxFQUFPeEYsS0FBS3NhLGFBQWFsVyxNQUFNbVcsRUFBTXpOLFNBQVcsR0FHdEQsR0FGQXlOLEVBQU0vVSxLQUFPQSxFQUVnQyxJQUF6QzVGLE9BQU8wZSxTQUFTL0QsRUFBTThELGVBQXNCLENBQ3pDcmUsS0FBS2ljLG1CQUFtQjFCLEVBQU16TixXQUNqQzlNLEtBQUtnQixLQUFLOEcsRUFBYW1ULFlBQWFqYixLQUFLb0gsSUFBSyxJQUFJOUYscUNBQXFDaVosRUFBTXpOLGdCQUUvRixJQUFJeVIsRUFBTyxHQUNQOWdCLEVBQUksRUFHUixJQUZBOGdCLEVBQUtqVCxJQUFNaVAsRUFBTWpQLElBQ2pCaVQsRUFBSzdULElBQU02UCxFQUFNN1AsSUFDVjZQLEVBQU0vVSxLQUFLckUsT0FBUzFELEdBQUcsQ0FDNUIsSUFBSStnQixFQUFRakUsRUFBTS9VLEtBQUtJLE1BQU1oRyxPQUFPMGUsU0FBUzdnQixHQUFJLEVBQUlBLEdBQ3JEOGdCLEVBQUtoVCxLQUFPaVQsRUFBTSxHQUNsQkQsRUFBS2hULE1BQW1CLElBQVhpVCxFQUFNLEdBQ25CRCxFQUFLaFQsTUFBbUIsSUFBWGlULEVBQU0sR0FBVyxJQUM5QkQsRUFBS2hULE1BQW1CLElBQVhpVCxFQUFNLEdBQVcsSUFBTSxJQUNwQy9nQixHQUFLLEVBQ0w4Z0IsRUFBSy9ZLEtBQU8rVSxFQUFNL1UsS0FBS0ksTUFBTWhHLE9BQU8wZSxTQUFTN2dCLEdBQUk4Z0IsRUFBS2hULEtBQU85TixHQUM3REEsR0FBSzhnQixFQUFLaFQsS0FDVnZMLEtBQUttUCxPQUFPNUgsV0FBV1IsUUFBUTdGLEtBQUtxZCxHQUNwQ3ZlLEtBQUtnQixLQUFLOEcsRUFBYWtXLGdCQUFpQixlQUVRLElBQXpDcGUsT0FBTzBlLFNBQVMvRCxFQUFNOEQsaUJBQzFCcmUsS0FBS2ljLG1CQUFtQjFCLEVBQU16TixVQUdqQzlNLEtBQUtnQixLQUFLOEcsRUFBYWtXLGdCQUFpQixTQUZ4Q2hlLEtBQUtnQixLQUFLOEcsRUFBYW1ULFlBQWFqYixLQUFLb0gsSUFBSyxJQUFJOUYscUNBQXFDaVosRUFBTXpOLHNCQUs1RixHQUFnQixJQUFac1IsRUFBZSxDQUN4QixJQUFJNVksRUFBT3hGLEtBQUtzYSxhQUFhbFcsTUFBTW1XLEVBQU16TixTQUFXLEdBQ3BELEdBQWdCLElBQVp0SCxFQUFLLElBQXdCLElBQVpBLEVBQUssSUFBd0IsSUFBWkEsRUFBSyxJQUF3QixJQUFaQSxFQUFLLEdBQVUsQ0FDcEUsSUFBSWlaLEVBQWEsRUFDakIsSUFBSyxJQUFJOWhCLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUNyQjhoQixFQUEwQixJQUFiQSxFQUFtQmpaLEVBQUs3SSxHQUV2QzhoQixHQUFjLEdBQ2RqWixFQUFPQSxFQUFLSSxNQUFNLEVBQUdKLEVBQUtyRSxTQUNyQixHQUFLc2QsRUFBYSxJQUN2QkEsR0FBY0EsRUFBYWpaLEVBQUssSUFBTSxJQUN0Q0EsRUFBSyxHQUFLaVosRUFBYSxJQUN2QkEsR0FBY0EsRUFBYWpaLEVBQUssSUFBTSxJQUN0Q0EsRUFBSyxHQUFLaVosRUFBYSxJQUN2QmpaLEVBQUssSUFBTWlaLEVBQWFqWixFQUFLLElBQU0sSUFLckMsR0FGQStVLEVBQU0vVSxLQUFPQSxFQUVlLElBQXhCK1UsRUFBTThELGNBQ1JyZSxLQUFLMGUseUJBQXlCbkUsRUFBTS9VLE1BQ3JCeEYsS0FBS2ljLG1CQUFtQjFCLEVBQU16TixZQUV2QzlNLEtBQUsrWixhQUFlL1osS0FBSzJlLGtCQUMzQjNlLEtBQUtnQixLQUFLOEcsRUFBYWtXLGdCQUFpQixTQUMvQmhlLEtBQUsrWixZQUFjL1osS0FBSzJlLG1CQUNqQzNlLEtBQUtnQixLQUFLOEcsRUFBYThXLHVCQUd6QjVlLEtBQUsyZSxzQkFFUDNlLEtBQUtrZSxtQkFDQSxDQUNMLElBQUtsZSxLQUFLaWMsbUJBQW1CMUIsRUFBTXpOLFVBRWpDLFlBREE5TSxLQUFLZ0IsS0FBSzhHLEVBQWFtVCxZQUFhamIsS0FBS29ILElBQUssSUFBSTlGLHFDQUFxQ2laLEVBQU16TixnQkFHM0Y5TSxLQUFLa2UsY0FDUDNELEVBQU1oTixRQUFVLENBQ2RqRSxLQUFNak0sT0FBTytOLE9BQU8sR0FBSXBMLEtBQUttUCxPQUFPNUgsV0FBVytCLE9BRWpEdEosS0FBS2tlLGdCQUVQbGUsS0FBS21QLE9BQU81SCxXQUFXUixRQUFRN0YsS0FBS3FaLFNBSXRDdmEsS0FBS2dCLEtBQUs4RyxFQUFhbVQsWUFBYWpiLEtBQUtvSCxJQUFLLElBQUk5Rix5QkFBeUI4YyxTQUMzRTdELEVBQU0vVSxLQUFPeEYsS0FBS3NhLGFBQWFsVyxNQUFNbVcsRUFBTXpOLFNBQVcsR0FDakQ5TSxLQUFLaWMsbUJBQW1CMUIsRUFBTXpOLFdBQ2pDOU0sS0FBS2dCLEtBQUs4RyxFQUFhbVQsWUFBYWpiLEtBQUtvSCxJQUFLLElBQUk5RixxQ0FBcUNpWixFQUFNek4sZ0JBRS9GOU0sS0FBS21QLE9BQU81SCxXQUFXUixRQUFRN0YsS0FBS3FaLEdBQ3BDdmEsS0FBS2dCLEtBQUs4RyxFQUFhNFMsdUJBRWxCSCxFQUFNZSxRQVFmb0QseUJBQTBCbFosR0FDeEIsSUFBSThYLEVBQVF0ZCxLQUFLbVAsT0FBTzVILFdBRXhCLElBQUsrVixFQUNILE9BR0YsSUFBSS9YLEVBQVMsRUFFUitYLEVBQU1oVSxPQUNUZ1UsRUFBTWhVLEtBQU8sSUFBSTRSLGtCQUVuQixJQUFJNVIsRUFBT2dVLEVBQU1oVSxLQUVqQkEsRUFBS3VWLHFCQUF1QnJaLEVBQUssR0FDakM4RCxFQUFLd1YscUJBQXVCdFosRUFBSyxHQUNqQzhELEVBQUt5VixxQkFBdUJ2WixFQUFLLEdBQ2pDOEQsRUFBSzBWLG1CQUFxQnhaLEVBQUssR0FBSyxHQUNwQzhELEVBQUsyVixjQUFtQyxHQUFSLEVBQVZ6WixFQUFLLElBRTNCLElBQUkwWixFQUFxQixHQUFWMVosRUFBSyxHQUNwQkQsRUFBUyxFQUNULElBQUl5WCxFQUFTLEdBR2IsSUFBSyxJQUFJcmdCLEVBQUksRUFBR0EsRUFBSXVpQixFQUFVdmlCLElBQUssQ0FDakMsSUFBSTRPLEVBQXNCLElBQWYvRixFQUFLRCxHQUFnQkMsRUFBS0QsRUFBUyxHQUM5Q0EsR0FBVSxFQUVWLElBQUk0TSxFQUFNLElBQUl6TSxXQUFXNkYsR0FDekIsSUFBSyxJQUFJNFQsRUFBSSxFQUFHQSxFQUFJNVQsRUFBTTRULElBQ3hCaE4sRUFBSWdOLEdBQUszWixFQUFLRCxFQUFTNFosR0FJekIsSUFBSUMsRUFBYyxRQUNsQixJQUFLLElBQUlELEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUFLLENBQzFCLElBQUlFLEVBQUlsTixFQUFJZ04sR0FBR0csU0FBUyxJQUNwQkQsRUFBRWxlLE9BQVMsSUFDYmtlLEVBQUksSUFBTUEsR0FFWkQsR0FBZUMsRUFHakIvVixFQUFLM0IsTUFBUXlYLEVBRWI3WixHQUFVZ0csRUFDVnZMLEtBQUttUCxPQUFPNUgsV0FBVytCLEtBQUs2SSxJQUFNQSxFQUNsQzZLLEVBQVN2VixZQUFVMkssU0FBU0QsR0FHOUIsSUFBSW9OLEVBQVcvWixFQUFLRCxHQUVwQkEsSUFFQSxJQUFLLElBQUk1SSxFQUFJLEVBQUdBLEVBQUk0aUIsRUFBVTVpQixJQUFLLENBQ2pDLElBQUk0TyxFQUFzQixJQUFmL0YsRUFBS0QsR0FBZ0JDLEVBQUtELEVBQVMsR0FDOUNBLEdBQVUsRUFDVixJQUFJOE0sRUFBTSxJQUFJM00sV0FBVzZGLEdBQ3pCLElBQUssSUFBSTRULEVBQUksRUFBR0EsRUFBSTVULEVBQU00VCxJQUN4QjlNLEVBQUk4TSxHQUFLM1osRUFBS0QsRUFBUzRaLEdBRXpCNVosR0FBVWdHLEVBQ1Z2TCxLQUFLbVAsT0FBTzVILFdBQVcrQixLQUFLK0ksSUFBTUEsRUFHcENoVixPQUFPK04sT0FBTzlCLEVBQU03QixZQUFVK1gsWUFBWXhDLElBRzFDLE1BQU15QyxFQUFhemYsS0FBS2lQLFNBQVM4TSxVQUFVMVYsTUFFM0NvWixFQUFXOVgsTUFBUTJCLEVBQUszQixNQUN4QjhYLEVBQVdsSixRQUFVak4sRUFBS2lOLFFBQzFCa0osRUFBV2pKLE1BQVFsTixFQUFLa04sTUFDeEJpSixFQUFXL0ksYUFBZXBOLEVBQUtvTixhQUMvQitJLEVBQVdwVixVQUFZZixFQUFLZSxVQUM1Qm9WLEVBQVc5SSxTQUFXck4sRUFBS3FOLFNBQzNCOEksRUFBV2hLLE1BQVFnSyxFQUFXaEssUUFBVW5NLEVBQUsrTSxhQUFlb0osRUFBV2hLLE1BQVFuTSxFQUFLK00sYUFDcEZvSixFQUFXL0osT0FBUytKLEVBQVcvSixTQUFXcE0sRUFBS2dOLGNBQWdCbUosRUFBV2hLLE1BQVFuTSxFQUFLZ04sY0FFdkZoTixFQUFLNEMsU0FBV2xNLEtBQUtpUCxTQUFTOE0sVUFBVTdQLFNBQVc1QyxFQUFLd04sVUFDeER4TixFQUFLb1csS0FBTyxJQUFJaGEsV0FBV0YsRUFBS3JFLFFBQ2hDbUksRUFBS29XLEtBQUs3YyxJQUFJMkMsR0FDZDhYLEVBQU1oVSxLQUFPQSxFQVNmcVQsdUJBQXdCZ0QsR0FFdEIsTUFENEIsQ0FBQyxLQUFPLE1BQU8sS0FBTyxLQUFPLE1BQU8sS0FBTyxLQUFPLE1BQU8sS0FBTyxLQUFPLE1BQU8sSUFBTSxNQUNuRkEsR0FTL0JsQyw4QkFBK0I3QixHQUc3QixNQUQ0QixDQUFDLEtBQU0sTUFBTyxNQUFPLE1BQU8sT0FEbkIsR0FBUEEsS0FBZSxHQVcvQ2dFLG9CQUFxQmhFLEdBR25CLE1BRHlCLENBQUMsRUFBRyxHQURJLEVBQVBBLEdBVzVCSyxtQkFBb0JuUCxHQUNsQixJQUFJK1MsRUFBa0I3ZixLQUFLc2EsYUFBYXBVLE1BQU0sRUFBRyxHQUVqRCxPQURBbEcsS0FBS3NhLGFBQWFsVyxNQUFNLEdBQ2pCeWIsSUFBb0IvUyxFQUFXLEdBR3hDLG1CQUNFLE1BQU1zRCxFQUFTcFEsS0FBS2lQLFNBQVNDLFlBQVksaUJBQ3pDLEdBQUlrQixFQUNGLE9BQU9BLEVBRVBwUSxLQUFLZ0IsS0FBSzhHLEVBQWFtVCxZQUFhLElBQUkzWixNQUFNLHdCQUlsRCxhQUNFLE9BQU90QixLQUFLaVAsU0FBU0MsWUFBWSxVQUduQyxhQUNFLE9BQU9sUCxLQUFLaVAsU0FBU0MsWUFBWSxXLFVBSXRCZ0ksRzs7OzsrRkMvcUJmLE1BQU1ILEVBQ0osYUFBYytJLEVBQU1DLEVBQVUsSUFDNUIsSUFBSXZkLEVBQU0sQ0FDUjBKLFNBQVUsR0FFWixJQUFLNFQsSUFBU0EsRUFBS0UsTUFDakIsT0FFRixJQUFJQyxFQUFPSCxFQUFLRSxNQUFNLFNBSWxCRSxHQUhKRCxFQUFPQSxFQUFLOVIsT0FBUStSLEdBQ1hBLElBRU05YixRQUNmLElBQUs4YixFQUFJQyxNQUFNLFdBQ2IsTUFBTSxJQUFJN2UsTUFBTyxvQ0FJbkIsSUFEQTRlLEVBQU1ELEVBQUs3YixRQUNKOGIsR0FBSyxDQUNWLElBQUlFLEVBQU9GLEVBQUlDLE1BQU0scUJBQ2pCRSxFQUFPSCxFQUFJQyxNQUFNLGdCQUNyQixHQUFJRSxHQUFRRCxHQUFRQSxFQUFLamYsT0FBUyxFQUNoQyxPQUFRaWYsRUFBSyxJQUNYLElBQUssZ0JBQ0g1ZCxFQUFJOGQsUUFBVWhDLFNBQVM4QixFQUFLLElBQzVCLE1BQ0YsSUFBSyx1QkFDSDVkLEVBQUkrZCxTQUFXakMsU0FBUzhCLEVBQUssSUFDN0IsTUFDRixJQUFLLHVCQUNINWQsRUFBSWdlLGVBQWlCQyxXQUFXTCxFQUFLLElBQ3JDLE1BQ0YsSUFBSyxTQUNIckosRUFBVzJKLFVBQVVOLEVBQU1ILEVBQU16ZCxFQUFLdWQsR0FDdEMsTUFDRixJQUFLLFlBQ0hoSixFQUFXNEosYUFBYVAsRUFBSyxHQUFHNWQsR0FLcEMsR0FBRzZkLEdBQVFBLEVBQUtsZixPQUFTLEVBQ3pCLE9BQU9rZixFQUFLLElBQ1YsSUFBSyxzQkFFSCxJQUFJRCxHQURKRixFQUFNRCxFQUFLN2IsU0FDSStiLE1BQU0scUJBQ2xCQyxFQUFLamYsT0FBUSxHQUFpQixXQUFaaWYsRUFBSyxJQUN4QnJKLEVBQVcySixVQUFVTixFQUFNSCxFQUFNemQsRUFBS3VkLE1BTzlDRyxFQUFNRCxFQUFLN2IsUUFFYixPQUFPNUIsRUFHVCxpQkFBa0I0ZCxFQUFNSCxFQUFNemQsRUFBS3VkLEVBQVNoUixHQUNyQ3ZNLEVBQUlvZSxRQUNQcGUsRUFBSW9lLE1BQVEsSUFHZCxJQUFJQyxFQUFPLENBQ1QxYSxNQUFPM0QsRUFBSTBKLFNBQ1hBLFNBQWdDLElBQXRCdVUsV0FBV0wsRUFBSyxLQUc1QjVkLEVBQUkwSixVQUFZMlUsRUFBSzNVLFNBQ3JCLElBQUk0VSxFQUFXYixFQUFLN2IsUUFDaEIwYyxFQUFTWCxNQUFNLGdCQUNqQlcsRUFBV2IsRUFBSzdiLFNBRWQwYyxFQUFTM2YsT0FBUyxHQUE0QixNQUF2QjJmLEVBQVNDLE9BQU8sSUFBY2hCLEVBQVFJLE1BQU0sb0JBQ3JFSixFQUFVQSxFQUFRSSxNQUFNLGtCQUFrQixJQUV4Q1csRUFBU1gsTUFBTSxhQUNqQlUsRUFBS0csSUFBTUYsRUFFWEQsRUFBS0csSUFBTWpCLEVBQVVlLEVBRXZCRCxFQUFLOVIsWUFBY0EsRUFDbkJ2TSxFQUFJb2UsTUFBTTFmLEtBQUsyZixHQUdqQixnQkFBaUJHLEdBQ2YsSUFBSWpCLEVBQVUsR0FDVmtCLEVBQU9ELEVBQUliLE1BQU0sa0JBQ3JCLEdBQUljLEdBQVFBLEVBQUs5ZixPQUFTLEVBQ3hCLElBQUssSUFBSXhFLEVBQUksRUFBR0EsRUFBSXNrQixFQUFLOWYsT0FBUXhFLElBQzNCc2tCLEVBQUt0a0IsR0FBR3dqQixNQUFNLFdBQWFjLEVBQUt0a0IsR0FBR3dFLE9BQVM0ZSxFQUFRNWUsU0FDdEQ0ZSxFQUFVa0IsRUFBS3RrQixJQUlyQixPQUFPb2pCLEVBR1Qsb0JBQW9CSyxFQUFNNWQsR0FDeEJBLEVBQUkwZSxRQUFVLEdBQ2QsSUFBSWpCLEVBQU9HLEVBQUtKLE1BQU0sS0FDdEIsSUFBSyxJQUFJcmpCLEtBQUtzakIsRUFBTSxDQUNsQixJQUFJa0IsRUFBTWxCLEVBQUt0akIsR0FRZixHQVBHd2tCLEVBQUloQixNQUFNLGlCQUNYM2QsRUFBSTBlLFFBQVFFLE9BQVNELEVBQUloQixNQUFNLGVBQWUsSUFFN0NnQixFQUFJaEIsTUFBTSxnQkFDWDNkLEVBQUkwZSxRQUFRRyxJQUFNRixFQUFJaEIsTUFBTSxjQUFjLElBR3pDZ0IsRUFBSWhCLE1BQU0sYUFBYyxDQUN6QixJQUFJbUIsRUFBS0gsRUFBSWhCLE1BQU0sYUFBYSxHQUM1QmhmLEVBQVM4SixLQUFLbUssS0FBS2tNLEVBQUduZ0IsT0FBUyxHQUNuQ3FCLEVBQUkwZSxRQUFRSyxJQUFNLElBQUk3YixXQUFXdkUsR0FDakMsSUFBSSxJQUFJeEUsRUFBSXdFLEVBQVMsRUFBR3hFLEdBQUksRUFBR0EsSUFBSyxDQUNsQyxJQUFJNmtCLEVBQUtsRCxTQUFTZ0QsRUFBR0csT0FBVyxFQUFKOWtCLEVBQU8sR0FBSSxJQUN2QzZGLEVBQUkwZSxRQUFRSyxJQUFJNWtCLEdBQUs2a0IsRUFFdkJoZixFQUFJMGUsUUFBUUksR0FBS0EsSyxVQU1WdkssRzs7OzsrRkNoSWYsTUFBQXBhLHVCQUFBLDhCQUNBLEVBQUFBLHdCQUFBLCtCQUNBLEVBQUFBLHVCQUFBLDhCQVNBLE1BQU1tTCxFQUFlQyxTQUFPRCxhQUN0QjRaLEVBQWEsQ0FDakIsRUFBTSxDQUFDLFFBQVMsVUFDaEIsRUFBTSxDQUFDLFFBQVMsVUFDaEIsR0FBTSxDQUFDLFFBQVMsWUFDaEIsSUFBTSxDQUFDLFFBQVMsUUFDaEIsRUFBTSxDQUFDLFFBQVMsVUFDaEIsRUFBTSxDQUFDLFFBQVMsVUFDaEIsR0FBTSxDQUFDLFFBQVMsY0FDaEIsR0FBTSxDQUFDLFFBQVMsY0FDaEIsSUFBTSxDQUFDLFFBQVMsUUFDaEIsSUFBTSxDQUFDLFFBQVMsT0FDaEIsRUFBTSxDQUFDLFFBQVMsT0FDaEIsSUFBTSxDQUFDLFFBQVMsT0FDaEIsSUFBTSxDQUFDLFFBQVMsZ0JBQ2hCLElBQU0sQ0FBQyxRQUFTLFlBQ2hCLElBQU0sQ0FBQyxRQUFTLFVBQ2hCLElBQU0sQ0FBQyxRQUFTLFVBQ2hCLElBQU0sQ0FBQyxRQUFTLGdCQUNoQixJQUFNLENBQUMsUUFBUyxlQUdsQixNQUFNMUssRUFDSjVSLFlBQWF1YyxHQUNYM2hCLEtBQUsyaEIsUUFBVXRrQixPQUFPK04sT0FBTyxHQUFJdVcsR0FDakMzaEIsS0FBSzRoQixZQUNMNWhCLEtBQUs2aEIsSUFBTSxHQUNYN2hCLEtBQUs4aEIsSUFBTSxHQUNYOWhCLEtBQUsraEIsaUJBQ0wvaEIsS0FBS2dpQixpQkFHUGppQixPQUNFQyxLQUFLNkQsR0FBR2lFLEVBQWFrUyxZQUFhaGEsS0FBS2lpQixNQUFNOWpCLEtBQUs2QixPQUdwRGlpQixNQUFPQyxHQUNMLEdBQUlsaUIsS0FBSzRoQixTQUNQLE9BR0YsSUFBSXhSLEVBQVNwUSxLQUFLbWlCLFlBQ2R2QixFQUFRLENBQUVpQixJQUFLLEdBQUlDLElBQUssSUFDeEJNLEVBQVEsR0FHWixLQUFPaFMsRUFBT2pQLFFBQVUsS0FBSyxDQUkzQixJQUhJaVAsRUFBT2pQLFFBQVUsR0FBd0MsS0FBbkNpUCxFQUFPOUssTUFBTSxHQUFHOEssRUFBTzdLLFNBQy9DdkYsS0FBS2dCLEtBQUs4RyxFQUFhbVQsWUFBYWpiLEtBQUtvSCxJQUFLLElBQUk5Riw0QkFBNEI4TyxFQUFPOUssTUFBTSxHQUFHOEssRUFBTzdLLGdDQUVoRzZLLEVBQU9qUCxRQUFVLEdBQXdDLEtBQW5DaVAsRUFBTzlLLE1BQU0sR0FBRzhLLEVBQU83SyxTQUNsRDZLLEVBQU9oTSxNQUFNLEdBRWYsSUFBSTRNLEVBQU1aLEVBQU9oTSxNQUFNLEtBRW5CaWUsRUFBVyxJQUFJQyxTQUFPdFIsRUFBSVosUUFDMUJ3SSxFQUFLLEdBQ1Q1QixFQUFVdUwsS0FBS0YsRUFBVXpKLEVBQUlnSSxHQUN6QmhJLEVBQUc0SixLQUNBSixFQUFNeEosRUFBR2pILE9BQU84USxPQUNuQkwsRUFBTXhKLEVBQUdqSCxPQUFPOFEsS0FBTyxJQUV6QkwsRUFBTXhKLEVBQUdqSCxPQUFPOFEsS0FBS3ZoQixLQUFLMFgsRUFBRzRKLEtBQzdCNUosRUFBRzRKLElBQUlFLEdBQUd0UyxPQUFTLENBQUN3SSxFQUFHNEosSUFBSUUsR0FBR3RTLFNBQ3JCZ1MsRUFBTXhKLEVBQUdqSCxPQUFPOFEsTUFDekJMLEVBQU14SixFQUFHakgsT0FBTzhRLEtBQUtMLEVBQU14SixFQUFHakgsT0FBTzhRLEtBQUt0aEIsT0FBUyxHQUFHdWhCLEdBQUd0UyxPQUFPbFAsS0FBSzBYLEVBQUcrSixRQUFRQyxRQUlwRixJQUFJQyxFQUFlWCxFQUNmWSxFQUFlWixFQUduQixJQUFLLElBQUl2bEIsRUFBSSxFQUFHQSxFQUFJVSxPQUFPb0gsS0FBSzJkLEdBQU9qaEIsT0FBUXhFLElBQUssQ0FDbEQsSUFBSW9tQixFQUFTWCxFQUFNL2tCLE9BQU9vSCxLQUFLMmQsR0FBT3psQixJQUN0QyxJQUFLLElBQUl3aUIsRUFBSSxFQUFHQSxFQUFJNEQsRUFBTzVoQixPQUFRZ2UsSUFDakM0RCxFQUFPNUQsR0FBR3RZLEdBQUt4SixPQUFPb0gsS0FBSzJkLEdBQU96bEIsR0FDbENvbUIsRUFBTzVELEdBQUd1RCxHQUFHdFMsT0FBUzRHLEVBQVVnTSxNQUFNRCxFQUFPNUQsR0FBR3VELEdBQUd0UyxRQUM1QixVQUFuQjJTLEVBQU81RCxHQUFHM2UsTUFDWlIsS0FBS2lqQixnQkFBZ0JGLEVBQU81RCxHQUFJMEQsR0FDaENBLEVBQWUsSUFDYSxVQUFuQkUsRUFBTzVELEdBQUczZSxPQUNuQlIsS0FBS2tqQixnQkFBZ0JILEVBQU81RCxHQUFJMkQsR0FDaENBLEVBQWUsSUFLakI5aUIsS0FBS2dpQixlQUNQaGlCLEtBQUtnQixLQUFLOEcsRUFBYTRTLGVBQWdCLFNBRXJDMWEsS0FBSytoQixlQUNQL2hCLEtBQUtnQixLQUFLOEcsRUFBYTRTLGVBQWdCLFNBSTNDdUksZ0JBQWlCVCxFQUFLalYsR0FDcEIsSUFBSStQLEVBQ0N0ZCxLQUFLbWpCLFFBQVE3YixXQUloQmdXLEVBQVF0ZCxLQUFLbWpCLFFBQVE3YixZQUhyQnRILEtBQUttakIsUUFBUTdiLFdBQWEsSUFBSXZDLGFBQzlCdVksRUFBUXRkLEtBQUttakIsUUFBUTdiLFlBSXZCLElBQUlnQyxFQUFPLElBQUk2UixpQkFBZSxDQUM1QndDLGdCQUFpQjZFLEVBQUlFLEdBQUdVLFVBQ3hCL0csV0FBWW1HLEVBQUlFLEdBQUdVLFVBQ25CeGIsYUFBYzRhLEVBQUlFLEdBQUdXLFFBQ3JCMWIsTUFBTyxXQUFhNmEsRUFBSUUsR0FBR1ksZ0JBQzNCdEcsT0FBUXdGLEVBQUlFLEdBQUdhLFlBQ2YxYyxHQUFJLEVBQ0owVixnQkFBaUJpRyxFQUFJRSxHQUFHYyxpQkFFMUJsYSxFQUFLeUIsa0JBQW9CRSxLQUFLQyxNQUFNLEtBQU81QixFQUFLcVUsZ0JBQWtCclUsRUFBS3dOLFdBRXZFLElBQUkyTSxFQUFZek0sRUFBVTBNLGFBQWFwRyxFQUFNaFUsS0FBTUEsTUFFOUN0SixLQUFLZ2lCLGVBQWtCeUIsSUFDMUJuRyxFQUFNaFUsS0FBT0EsRUFDYnRKLEtBQUtnaUIsaUJBQ0xoaUIsS0FBS2dCLEtBQUs4RyxFQUFha1csZ0JBQWlCLFVBRzFDLElBQUl4WSxFQUFPLElBQUlFLFdBQVc4YyxFQUFJRSxHQUFHdFMsT0FBT0EsT0FBT3hLLE1BQU00YyxFQUFJRSxHQUFHdFMsT0FBT2xNLFNBQVVzZSxFQUFJRSxHQUFHdFMsT0FBT2pQLFNBQ3ZGdUosRUFBTTRULFNBQVNrRSxFQUFJblgsSUFBTSxJQUN6QkEsRUFBTWlULFNBQVNrRSxFQUFJblgsSUFBTSxJQUN6QitDLEVBQVMsSUFBSXVWLG1CQUFpQixDQUFDalosTUFBS1csTUFBSzdGLE9BQU0rSCxZQUNuRCtQLEVBQU12VyxRQUFRN0YsS0FBS2tOLEdBR3JCOFUsZ0JBQWlCVixFQUFLalYsR0FDcEIsSUFDSStQLEVBREEvTCxFQUFPL0osVUFBUW9jLFlBQVlwQixFQUFJRSxHQUFHdFMsUUFFbEM5RyxFQUFPLElBQUk0UixpQkFDVmxiLEtBQUttakIsUUFBUTViLFdBSWhCK1YsRUFBUXRkLEtBQUttakIsUUFBUTViLFlBSHJCdkgsS0FBS21qQixRQUFRNWIsV0FBYSxJQUFJdkMsYUFDOUJzWSxFQUFRdGQsS0FBS21qQixRQUFRNWIsWUFJdkIsSUFBSXNjLEVBQWUsRUFDZjFSLEtBQ0FFLEtBQ0osSUFBSyxJQUFJMVYsRUFBSSxFQUFHQSxFQUFJNFUsRUFBS3BRLE9BQVF4RSxJQUFLLENBQ3BDLElBQUltbkIsRUFBTXZTLEVBQUs1VSxHQUNmLEdBQUltbkIsRUFBSTNSLElBQUssQ0FDWEEsRUFBTTJSLEVBQ054RyxFQUFNbkwsSUFBTTJSLEVBQUkvUixLQUNoQnpJLEVBQUtvTixhQUFldkUsRUFBSUEsSUFBSW1CLGNBQzVCaEssRUFBSzNCLE1BQVEsUUFDYixJQUFLLElBQUl3WCxFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFBSyxDQUMxQixJQUFJRSxFQUFJbE4sRUFBSUosS0FBS29OLEdBQUdHLFNBQVMsSUFDekJELEVBQUVsZSxPQUFTLElBQ2JrZSxFQUFJLElBQU1BLEdBRVovVixFQUFLM0IsT0FBUzBYLEVBRWhCL1YsRUFBSzhNLFlBQWNqRSxFQUFJQSxJQUFJd0QsV0FBV0QsT0FDdENwTSxFQUFLNk0sV0FBYWhFLEVBQUlBLElBQUl3RCxXQUFXRixNQUNyQ25NLEVBQUtlLFVBQVk4SCxFQUFJQSxJQUFJb0QsV0FDekJqTSxFQUFLekMsR0FBSyxFQUNWeUMsRUFBS2tOLE1BQVFyRSxFQUFJQSxJQUFJZ0IsYUFDckI3SixFQUFLZ04sY0FBZ0JuRSxFQUFJQSxJQUFJeUQsYUFBYUYsT0FDMUNwTSxFQUFLK00sYUFBZWxFLEVBQUlBLElBQUl5RCxhQUFhSCxNQUN6Q25NLEVBQUtpTixRQUFVcEUsRUFBSUEsSUFBSWMsZUFDdkIzSixFQUFLeUIsa0JBQW9CRSxLQUFLQyxNQUFNNUIsRUFBS3dOLFdBQWEzRSxFQUFJQSxJQUFJb0QsV0FBV2YsUUFBVXJDLEVBQUlBLElBQUlvRCxXQUFXaEIsVUFDdEdqTCxFQUFLeWEsU0FBVzVSLEVBQUlBLElBQUk2UixVQUFZN1IsRUFBSUEsSUFBSTZSLFVBQVk3UixFQUFJQSxJQUFJcUQsZUFDdkRzTyxFQUFJelIsS0FDYmlMLEVBQU1qTCxJQUFNeVIsRUFBSS9SLEtBQ2hCTSxFQUFNeVIsR0FFTkQsR0FBaUIsRUFBSUMsRUFBSS9SLEtBQUt0TSxXQUlsQyxHQUFJME0sR0FBT0UsRUFBSyxDQUNkL0ksRUFBS29XLEtBQU9sWSxVQUFReWMsUUFBUTlSLEVBQUlKLEtBQU1NLEVBQUlOLE1BQzFDLElBQUkwUixFQUFZek0sRUFBVTBNLGFBQWFwRyxFQUFNaFUsS0FBTUEsTUFDOUN0SixLQUFLK2hCLGVBQWtCMEIsSUFDdEJsVyxFQUNGQSxFQUFRakUsS0FBT2pNLE9BQU8rTixPQUFPLEdBQUk5QixHQUVqQ2lFLEVBQVUsQ0FDUmpFLEtBQU1qTSxPQUFPK04sT0FBTyxHQUFJOUIsSUFHNUJnVSxFQUFNaFUsS0FBT0EsRUFDYnRKLEtBQUsraEIsaUJBQ0wvaEIsS0FBS2dCLEtBQUs4RyxFQUFha1csZ0JBQWlCLFVBSTVDLElBQUl4WSxFQUFPLElBQUlFLFdBQVdtZSxHQUN0QnRlLEVBQVMsRUFDVG9KLEtBQ0osSUFBSyxJQUFJaFMsRUFBSSxFQUFHQSxFQUFJNFUsRUFBS3BRLE9BQVF4RSxJQUFLLENBQ3BDLElBQUltbkIsRUFBTXZTLEVBQUs1VSxHQUNYd0UsRUFBUzJpQixFQUFJL1IsS0FBS3RNLFdBQ2xCcWUsRUFBSTVSLE1BQ052RCxNQUVHbVYsRUFBSXpSLEtBQVF5UixFQUFJM1IsTUFDbkIzTSxFQUFLM0MsSUFBSSxJQUFJNkMsV0FBVyxDQUFDdkUsSUFBVyxHQUFLLElBQ3ZDQSxJQUFXLEdBQUssSUFDaEJBLElBQVcsRUFBSSxJQUNOLElBQVRBLElBQ0VvRSxHQUNKQSxHQUFVLEVBQ1ZDLEVBQUszQyxJQUFJaWhCLEVBQUkvUixLQUFNeE0sR0FDbkJBLEdBQVVwRSxHQUdkLElBQUlpTixFQUFTLElBQUk4VixtQkFBaUIsQ0FDaEN4WixJQUFLNFQsU0FBU2tFLEVBQUk5WCxJQUFNLElBQ3hCVyxJQUFLaVQsU0FBU2tFLEVBQUluWCxJQUFNLElBQ3hCQyxLQUFNa1gsRUFBSW5YLElBQU1tWCxFQUFJOVgsS0FBTyxHQUMzQm1CLFVBQVcyVyxFQUFJOVgsSUFDZmlFLGFBQ0FuSixPQUNBK0gsWUFFRitQLEVBQU12VyxRQUFRN0YsS0FBS2tOLEdBR3JCK1YsVUFDRW5rQixLQUFLdUUsSUFBSXVELEVBQWFrUyxZQUFhaGEsS0FBS2lpQixPQUN4Q2ppQixLQUFLMmhCLFFBQVUsR0FDZjNoQixLQUFLNGhCLFlBQ0w1aEIsS0FBSzZoQixJQUFNLEdBQ1g3aEIsS0FBSzhoQixJQUFNLEdBQ1g5aEIsS0FBSytoQixpQkFDTC9oQixLQUFLZ2lCLGlCQUdQLHFCQUFzQnhULEVBQUdDLEVBQUdqTyxHQUMxQixJQUFJNGpCLEVBQUssRUFDTEMsRUFBSyxFQVFULEdBUGEsZUFBVDdqQixHQUNGNGpCLEVBQUs1VixFQUFFL0ksV0FDUDRlLEVBQUs1VixFQUFFaEosWUFDVyxVQUFUakYsSUFDVDRqQixFQUFLNVYsRUFBRXJOLE9BQ1BrakIsRUFBSzVWLEVBQUV0TixRQUVMaWpCLElBQU9DLEVBQ1QsT0FBTyxFQUdULElBQUssSUFBSTFuQixFQUFJLEVBQUdBLEVBQUl5bkIsRUFBSXpuQixJQUN0QixHQUFJNlIsRUFBRTdSLEtBQU84UixFQUFFOVIsR0FDYixPQUFPLEVBR1gsT0FBTyxFQUdULG9CQUFxQjZSLEVBQUdDLEVBQUc2VixHQUN6QixJQUFLOVYsSUFBTUMsRUFDVCxPQUFPLEVBR1QsSUFBSyxJQUFJOVIsRUFBSSxFQUFHNG5CLEVBQUlsbkIsT0FBT29ILEtBQUsrSixHQUFHck4sT0FBUXhFLEVBQUk0bkIsRUFBRzVuQixJQUFLLENBQ3JELElBQUk2bkIsRUFBUWhXLEVBQUVuUixPQUFPb0gsS0FBSytKLEdBQUc3UixJQUN6QjhuQixFQUFRaFcsRUFBRXBSLE9BQU9vSCxLQUFLK0osR0FBRzdSLElBQzdCLEdBQXFCLGlCQUFWNm5CLEdBQ1QsR0FBS0YsR0FBd0MsYUFBdEJqbkIsT0FBT29ILEtBQUsrSixHQUFHN1IsSUFBMkMsc0JBQXRCVSxPQUFPb0gsS0FBSytKLEdBQUc3UixJQUFvRCwyQkFBdEJVLE9BQU9vSCxLQUFLK0osR0FBRzdSLElBQW9DNm5CLElBQVVDLEVBQ25LLE9BQU8sT0FFSixRQUFJLElBQUFELEVBQU0vZSxXQUEwQixDQUN6QyxZQUFJZ2YsRUFBTWhmLFdBQ1IsT0FBTyxFQUVULElBQUt1UixFQUFVME4sY0FBY0YsRUFBT0MsRUFBTyxjQUN6QyxPQUFPLE9BRUosUUFBSSxJQUFBRCxFQUFNcmpCLE9BQXNCLENBQ3JDLFlBQUlzakIsRUFBTXRqQixPQUNSLE9BQU8sRUFFVCxJQUFLNlYsRUFBVTBOLGNBQWNGLEVBQU9DLEVBQU8sU0FDekMsT0FBTyxPQUdULElBQUt6TixFQUFVME0sYUFBYWMsRUFBT0MsR0FDakMsT0FBTyxFQUliLFNBR0YsYUFBY0UsR0FDWixJQUFJbmYsRUFDQXJFLEVBQVMsRUFDVG9FLEVBQVMsRUFDYixJQUFLLElBQUk1SSxFQUFJLEVBQUdBLEVBQUlnb0IsRUFBUXhqQixPQUFReEUsSUFDbEN3RSxHQUFXd2pCLEVBQVFob0IsR0FBR3dFLE9BQVN3akIsRUFBUWhvQixHQUFHdUgsU0FHNUNzQixFQUFPLElBQUlFLFdBQVd2RSxHQUN0QixJQUFLLElBQUl4RSxFQUFJLEVBQUdBLEVBQUlnb0IsRUFBUXhqQixPQUFReEUsSUFBSyxDQUN2QyxJQUFJeVQsRUFBU3VVLEVBQVFob0IsR0FDckI2SSxFQUFLM0MsSUFBSSxJQUFJNkMsV0FBVzBLLEVBQU9BLE9BQVFBLEVBQU9sTSxVQUFXcUIsR0FDekRBLEdBQVU2SyxFQUFPalAsT0FBU2lQLEVBQU9sTSxTQUVuQyxPQUFPLElBQUlvZSxTQUFPOWMsRUFBSzRLLFFBR3pCLFlBQWF3UyxFQUFRaEssRUFBSWdJLEdBQ3ZCNUosRUFBVTROLFdBQVdoQyxFQUFRaEssR0FDN0I1QixFQUFVNk4sWUFBWWpDLEVBQVFoSyxFQUFJZ0ksR0FDVCxVQUFyQmhJLEVBQUdqSCxPQUFPbVQsUUFBNEMsSUFBdEJsTSxFQUFHakgsT0FBT2dSLFNBQWtCL0osRUFBR21NLGNBQ2pFbk0sRUFBRzRKLElBQU14TCxFQUFVZ08sSUFBSXBNLElBSTNCLG1CQUFvQmdLLEVBQVFoSyxFQUFJZ0ksR0FDOUIsSUFDSTZCLEVBRFM3SixFQUFHakgsT0FDQzhRLElBQ2pCLE9BQVFBLEdBQ04sS0FBSyxFQUNIekwsRUFBVWlPLElBQUlyQyxFQUFRaEssRUFBSWdJLEdBQzFCLE1BQ0YsS0FBSyxFQUNINUosRUFBVWtPLElBQUl0QyxFQUFRaEssRUFBSWdJLEdBQzFCLE1BQ0YsS0FBSyxFQUNINUosRUFBVW1PLEtBQUt2QyxFQUFRaEssRUFBSWdJLEdBQzNCLE1BQ0YsS0FBSyxLQUNILE1BQ0YsUUFFRSxHQUFJQSxFQUFNaUIsSUFBSXVELEtBQU1DLEdBQWtCQSxFQUFLNUMsTUFBUUEsR0FDakR6TCxFQUFVc08sSUFBSTFDLEVBQVFoSyxFQUFJZ0ksT0FDckIsQ0FDTCxJQUFJMkUsRUFBTTNFLEVBQU1rQixJQUFNbEIsRUFBTWtCLElBQUkzVCxPQUFRa1gsR0FBU0EsRUFBSzVDLE1BQVFBLEdBQU8sR0FDakU4QyxFQUFJcGtCLE9BQVMsRUFDZjZWLEVBQVV3TyxNQUFNNUMsRUFBUWhLLEVBQUk4SSxFQUFXNkQsRUFBSSxHQUFHRSxZQUFZLElBRTFEN00sRUFBR21NLGlCQU1iLGtCQUFtQm5DLEVBQVFoSyxHQUN6QixJQUFJakgsRUFBUyxHQUNiQSxFQUFPK1QsS0FBTzlDLEVBQU8rQyxZQUNyQixJQUFJMVosRUFBTzJXLEVBQU9nRCxhQUNsQmpVLEVBQU92TyxNQUFRNkksSUFBUyxHQUN4QjBGLEVBQU9nUixRQUFVMVcsSUFBUyxHQUFLLEVBQy9CMEYsRUFBT2tVLFNBQVc1WixJQUFTLEdBQUssRUFDaEMwRixFQUFPOFEsSUFBYSxLQUFQeFcsRUFFYkEsRUFBTzJXLEVBQU8rQyxZQUVkaFUsRUFBT21VLFdBQWE3WixHQUFRLEVBQUksRUFRaEMwRixFQUFPb1UsV0FBYTlaLEdBQVEsRUFBSSxFQUNoQzBGLEVBQU9xVSxXQUFvQixHQUFQL1osRUFDcEIwRixFQUFPbVQsT0FBd0IsSUFBZm5ULEVBQU84USxJQUFZLE1BQVEsUUFDM0M3SixFQUFHakgsT0FBU0EsRUFHZCxXQUFZaVIsRUFBUWhLLEVBQUlnSSxHQUN0QixJQUFJcGUsRUFBTSxHQUNOeUosRUFBTzJXLEVBQU8rQyxZQUNsQi9DLEVBQU8vUSxLQUFLNUYsR0FDWkEsRUFBTzJXLEVBQU8rQyxZQUNkbmpCLEVBQUl5akIsUUFBVWhhLEVBQ2RBLEVBQU8yVyxFQUFPZ0QsYUFDZHBqQixFQUFJWSxNQUFRNkksSUFBUyxFQUNyQnpKLEVBQUkwakIsS0FBT2phLElBQVMsRUFBSSxFQUN4QnpKLEVBQUkyakIsY0FBdUIsS0FBUGxhLEVBQ3BCekosRUFBSTRqQixTQUFXeEQsRUFBT2dELGFBQ3RCcGpCLEVBQUl3SixRQUErQixFQUFyQjRXLEVBQU8rQyxZQUNyQm5qQixFQUFJNmpCLGNBQWdCekQsRUFBTytDLFlBQzNCbmpCLEVBQUk4akIsa0JBQW9CMUQsRUFBTytDLFlBQy9CLElBQUlZLEdBQUsvakIsRUFBSTJqQixjQUFnQixHQUFLLEVBQzlCbGlCLEVBQU8sR0FDWCxJQUFLLElBQUl0SCxFQUFJLEVBQUdBLEVBQUk0cEIsRUFBRzVwQixJQUFLLENBQzFCLElBQUk2cEIsRUFBZ0I1RCxFQUFPZ0QsYUFDdkJuRCxFQUE0QixLQUF0QkcsRUFBT2dELGFBQ2pCM2hCLEVBQUsvQyxLQUFLLENBQ1J1bEIsUUFBU0QsRUFDVC9ELE1BQ0FqaUIsS0FBd0IsSUFBbEJnbUIsRUFBc0IsVUFBWSxXQUd4Q3ZpQixFQUFLOUMsT0FBUyxJQUNoQnlmLEVBQU1pQixJQUFNakIsRUFBTWlCLElBQUluaUIsT0FBT3VFLElBRS9CekIsRUFBSXlCLEtBQU9BLEVBQ1h6QixFQUFJaWtCLFFBQVU3RCxFQUFPZ0QsYUFDckJwakIsRUFBSWlnQixJQUE0QixLQUF0QkcsRUFBT2dELGFBQ2pCaE4sRUFBRytKLFFBQVVuZ0IsRUFJZixXQUFZb2dCLEVBQVFoSyxFQUFJZ0ksR0FDdEIsSUFBSXBlLEVBQU0sR0FDR29XLEVBQUdqSCxPQUNUbVQsT0FBUyxNQUNoQixJQUFJN1ksRUFBTzJXLEVBQU8rQyxZQUNsQi9DLEVBQU8vUSxLQUFLNUYsR0FDWkEsRUFBTzJXLEVBQU8rQyxZQUNkbmpCLEVBQUlra0IsUUFBVXphLEVBQ2RBLEVBQU8yVyxFQUFPZ0QsYUFDZHBqQixFQUFJMmpCLGNBQXVCLEtBQVBsYSxFQUNwQnpKLEVBQUlpa0IsUUFBVTdELEVBQU9nRCxhQUNyQnBqQixFQUFJd0osUUFBK0IsRUFBckI0VyxFQUFPK0MsWUFDckJuakIsRUFBSW1rQixNQUFRL0QsRUFBTytDLFlBQ25CbmpCLEVBQUlva0IsVUFBWWhFLEVBQU8rQyxZQUN2Qm5qQixFQUFJcWtCLFFBQWdDLEtBQXRCakUsRUFBT2dELGFBQ3JCcGpCLEVBQUlza0IsY0FBc0MsS0FBdEJsRSxFQUFPZ0QsYUFDM0IsSUFBSVcsR0FBSy9qQixFQUFJMmpCLGNBQWdCLElBQU0sRUFDL0JsaUIsRUFBTyxHQUNYLElBQUssSUFBSXRILEVBQUksRUFBR0EsRUFBSTRwQixFQUFHNXBCLElBQ3JCc0gsRUFBSy9DLEtBQUssQ0FDUnVrQixXQUFZN0MsRUFBTytDLFlBQ25CbEQsSUFBMkIsS0FBdEJHLEVBQU9nRCxhQUNabUIsR0FBMEIsS0FBdEJuRSxFQUFPZ0QsZUFHZnBqQixFQUFJeUIsS0FBT0EsRUFDTmpFLEtBQUs4aEIsTUFDUjloQixLQUFLOGhCLElBQU0sSUFFYmxCLEVBQU1rQixJQUFNOWhCLEtBQUs4aEIsSUFBSXBpQixPQUFPdUUsRUFBSytpQixJQUFLM0IsS0FFbEM1QyxJQUFLNEMsRUFBSzVDLElBQ1ZzRSxHQUFJMUIsRUFBSzBCLEdBQ1R0QixXQUFZSixFQUFLSSxXQUNqQmdCLFFBQVNqa0IsRUFBSWlrQixZQUdqQjdOLEVBQUcrSixRQUFVbmdCLEVBR2YsYUFBY29nQixFQUFRaEssRUFBSXBZLEdBQ3hCLElBQUltUixFQUFTaUgsRUFBR2pILE9BQ1pnUixFQUFVLEdBRWQsR0FEQWhSLEVBQU9uUixLQUFPQSxFQUNZLElBQXRCbVIsRUFBT29VLGFBQ1RwRCxFQUFRc0UsaUJBQW1CckUsRUFBTytDLFlBQzlCaEQsRUFBUXNFLGlCQUFtQixHQUFHLENBQ2hDLElBQUloYixFQUFPMlcsRUFBTytDLFlBQ2xCaEQsRUFBUTVULFlBQWM5QyxJQUFTLEVBQy9CMFcsRUFBUXVFLE9BQVNqYixJQUFTLEVBQUksRUFDOUIwVyxFQUFRa0QsU0FBVzVaLElBQVMsRUFBSSxFQUNoQzBXLEVBQVF3RSxJQUFNbGIsSUFBUyxFQUFJLEVBQzNCMFcsRUFBUXlFLEtBQU9uYixJQUFTLEVBQUksRUFDNUIwVyxFQUFRMEUsWUFBY3BiLElBQVMsRUFBSSxFQUNuQzBXLEVBQVEyRSxpQkFBbUJyYixJQUFTLEVBQUksRUFDeEMwVyxFQUFRNEUsZ0JBQXlCLEVBQVB0YixFQUMxQixJQUFJdWIsRUFBUzVFLEVBQU8xZSxTQWdCcEIsR0Fmb0IsSUFBaEJ5ZSxFQUFRd0UsTUFDVnhFLEVBQVE4RSxpQkFBbUI3RSxFQUFPOEUsY0FBZ0IsRUFDbER6YixFQUFPMlcsRUFBT2dELGFBQ2RqRCxFQUFROEUsa0JBQW9CeGIsSUFBUyxHQUNyQzBXLEVBQVFnRixzQkFBK0IsSUFBUDFiLEdBRWIsSUFBakIwVyxFQUFReUUsT0FDVnpFLEVBQVFpRix1QkFBeUJoRixFQUFPOEUsY0FBZ0IsRUFDeER6YixFQUFPMlcsRUFBT2dELGFBQ2RqRCxFQUFRaUYsd0JBQTBCM2IsSUFBUyxHQUMzQzBXLEVBQVFrRiw0QkFBcUMsSUFBUDViLEdBRVosSUFBeEIwVyxFQUFRMEUsY0FDVjFFLEVBQVFtRixnQkFBa0JsRixFQUFPK0MsYUFFRixJQUE3QmhELEVBQVEyRSxpQkFBd0IsQ0FDbEMsSUFBSW5tQixFQUFTeWhCLEVBQU8rQyxZQUNoQm9DLEVBQXVCLEdBQzNCLElBQUssSUFBSXByQixFQUFJLEVBQUdBLEVBQUl3RSxFQUFReEUsSUFDMUJvckIsRUFBcUI3bUIsS0FBSzBoQixFQUFPK0MsYUFHckMsR0FBZ0MsSUFBNUJoRCxFQUFRNEUsZ0JBQXVCLENBQ2pDLElBQUlwbUIsRUFBU3loQixFQUFPK0MsWUFDaEIxWixFQUFPMlcsRUFBTytDLFlBQ2R4ZixFQUFReWMsRUFBTzFlLFNBRWY4akIsRUFBWS9iLElBQVMsRUFBSSxFQUN6QmdjLEVBQVdoYyxJQUFTLEVBQUksRUFDaEIsR0FIRkEsSUFBUyxJQUlqQkEsRUFBTzJXLEVBQU9nRCxhQUNkakQsRUFBUXVGLFNBQVdqYyxJQUFTLEdBQzVCMFcsRUFBUXdGLFVBQW1CLE1BQVBsYyxHQUVKLElBQWQrYixJQUNGL2IsRUFBTzJXLEVBQU93RixhQUNkekYsRUFBUTBGLGNBQXVCLFFBQVBwYyxHQUVULElBQWJnYyxJQUNGaGMsRUFBTzJXLEVBQU8wRixXQUNkM0YsRUFBUTRGLFdBQWF0YyxJQUFTLEVBQzlCMFcsRUFBUTZGLFdBQWF2YyxJQUFTLEVBQUksRUFDbEMwVyxFQUFROEYsUUFBaUIsRUFBUHhjLEVBQ2xCQSxFQUFPMlcsRUFBT2dELGFBQ2RqRCxFQUFRK0YsV0FBYXpjLElBQVMsRUFDOUIwVyxFQUFRZ0csUUFBaUIsRUFBUDFjLEVBQ2xCQSxFQUFPMlcsRUFBT2dELGFBQ2RqRCxFQUFRaUcsV0FBYTNjLEdBRXZCMlcsRUFBTy9RLEtBQUsxUSxFQUFTLEdBQUt5aEIsRUFBTzFlLFNBQVdpQyxJQUU5QyxJQUFJMGlCLEVBQWVsRyxFQUFRc0UsaUJBQW1CLEdBQUtyRSxFQUFPMWUsU0FBV3NqQixHQUNyRTVFLEVBQU8vUSxLQUFLZ1gsR0FHaEJsRyxFQUFRQyxPQUFTLElBQUlOLFNBQU9NLEVBQU94UyxPQUFPeEssTUFBTWdkLEVBQU8xZSxXQUN2RDBVLEVBQUcrSixRQUFVQSxFQUdmLFdBQVkvSixHQUNWLElBQUlwVyxFQUFNLEdBQ040TixFQUFTd0ksRUFBRytKLFFBQVFDLE9BR3hCLEdBQWEsSUFERnhTLEVBQU9nWSxhQUVoQjVsQixFQUFJa2dCLEdBQUssR0FDVGxnQixFQUFJa2dCLEdBQUd0UyxPQUFTQSxNQUNYLENBQ0wsSUFBSWdXLEVBQVdoVyxFQUFPdVYsWUFDbEJTLEdBQVksS0FBUUEsR0FBWSxNQUNsQzVqQixFQUFJaEMsS0FBTyxTQUVUNGxCLEdBQVksS0FBUUEsR0FBWSxNQUNsQzVqQixFQUFJaEMsS0FBTyxTQUViLElBQUlzb0IsRUFBZTFZLEVBQU93VixhQUUxQixHQURBcGpCLEVBQUlzbUIsYUFBZUEsRUFDRixVQUFidG1CLEVBQUloQyxNQUFpQyxVQUFiZ0MsRUFBSWhDLEtBNkY5QixNQUFNLElBQUljLE1BQU0sMkJBN0ZnQyxDQUNoRCxJQUFJMkssRUFBT21FLEVBQU91VixZQUVsQixHQUFjLEdBREYxWixJQUFTLEVBRW5CLE1BQU0sSUFBSTNLLE1BQU0sK0JBRWxCMkssRUFBT21FLEVBQU91VixZQUNkbmpCLEVBQUl1bUIsV0FBYTljLElBQVMsRUFDMUJ6SixFQUFJd21CLFNBQVcvYyxJQUFTLEVBQUksRUFDNUJ6SixFQUFJeW1CLFdBQWFoZCxJQUFTLEVBQUksRUFDOUJ6SixFQUFJMG1CLFFBQVVqZCxJQUFTLEVBQUksRUFDM0J6SixFQUFJMm1CLGVBQWlCbGQsSUFBUyxFQUFJLEVBQ2xDekosRUFBSTRtQixRQUFVbmQsSUFBUyxFQUFJLEVBQzNCekosRUFBSTZtQixjQUF1QixFQUFQcGQsRUFDcEJ6SixFQUFJOG1CLGdCQUFrQmxaLEVBQU91VixZQUM3QixJQUFJNEQsRUFBSy9tQixFQUFJOG1CLGdCQUViLEdBQXVCLElBQW5COW1CLEVBQUl1bUIsV0FBa0IsQ0FDeEIsSUFBSTFkLEVBQU0sR0FDVlksRUFBT21FLEVBQU91VixZQUNkdGEsRUFBSW5LLEtBQUsrSyxJQUFTLEVBQUksR0FDdEJBLEVBQU9tRSxFQUFPd1YsYUFDZHZhLEVBQUluSyxLQUFLK0ssSUFBUyxHQUNsQkEsRUFBT21FLEVBQU93VixhQUNkdmEsRUFBSW5LLEtBQUsrSyxJQUFTLEdBQ2xCekosRUFBSTZJLElBQU9BLEVBQUksSUFBTSxHQUFLQSxFQUFJLElBQU0sR0FBS0EsRUFBSSxHQUM3Q2tlLEdBQU0sRUFFVyxVQUFiL21CLEVBQUloQyxPQUNOZ0MsRUFBSWtJLElBQU1sSSxFQUFJNkksS0FHbEIsR0FBdUIsSUFBbkI3SSxFQUFJdW1CLFdBQWtCLENBQ3hCLElBQUkxZCxFQUFNLEdBQ1ZZLEVBQU9tRSxFQUFPdVYsWUFDZHRhLEVBQUluSyxLQUFLK0ssSUFBUyxFQUFJLEdBQ3RCQSxFQUFPbUUsRUFBT3dWLGFBQ2R2YSxFQUFJbkssS0FBSytLLElBQVMsR0FDbEJBLEVBQU9tRSxFQUFPd1YsYUFDZHZhLEVBQUluSyxLQUFLK0ssSUFBUyxHQUNsQnpKLEVBQUk2SSxJQUFPQSxFQUFJLElBQU0sR0FBS0EsRUFBSSxJQUFNLEdBQUtBLEVBQUksR0FDN0MsSUFBSVgsRUFBTSxHQUNWdUIsRUFBT21FLEVBQU91VixZQUNkamIsRUFBSXhKLEtBQUsrSyxJQUFTLEVBQUksR0FDdEJBLEVBQU9tRSxFQUFPd1YsYUFDZGxiLEVBQUl4SixLQUFLK0ssSUFBUyxHQUNsQkEsRUFBT21FLEVBQU93VixhQUNkbGIsRUFBSXhKLEtBQUsrSyxJQUFTLEdBQ2xCekosRUFBSWtJLElBQU9BLEVBQUksSUFBTSxHQUFLQSxFQUFJLElBQU0sR0FBS0EsRUFBSSxHQUM3QzZlLEdBQU0sR0FFUixHQUFxQixJQUFqQi9tQixFQUFJd21CLFNBQWdCLENBQ3RCLElBQUlRLEVBQU8sR0FDUEMsRUFBSyxHQUNUeGQsRUFBT21FLEVBQU91VixZQUNkNkQsRUFBS3RvQixLQUFLK0ssSUFBUyxFQUFJLEdBQ3ZCdWQsRUFBS3RvQixLQUFZLEVBQVArSyxHQUNWQSxFQUFPbUUsRUFBT3dWLGFBQ2Q0RCxFQUFLdG9CLEtBQUsrSyxJQUFTLElBQ25CdWQsRUFBS3RvQixLQUFZLEVBQVArSyxHQUNWQSxFQUFPbUUsRUFBT3dWLGFBQ2Q0RCxFQUFLdG9CLEtBQUsrSyxJQUFTLElBQ25Cd2QsRUFBR3ZvQixLQUFZLEVBQVArSyxHQUNSQSxFQUFPbUUsRUFBT3VWLFlBQ2Q4RCxFQUFHdm9CLEtBQUsrSyxJQUFTLEdBQ2pCekosRUFBSWduQixLQUFtRixLQUEzRUEsRUFBSyxJQUFNLEdBQUtBLEVBQUssSUFBTSxHQUFLQSxFQUFLLElBQU0sR0FBS0EsRUFBSyxJQUFNLEdBQUtBLEVBQUssS0FBYUMsRUFBRyxJQUFNLEVBQUlBLEVBQUcsSUFDOUdGLEdBQU0sRUFPUixHQUx1QixJQUFuQi9tQixFQUFJeW1CLGFBQ05oZCxFQUFPbUUsRUFBT2dZLGFBQ2Q1bEIsRUFBSWtuQixPQUFTemQsSUFBUyxFQUFJLFFBQzFCc2QsR0FBTSxHQUVZLElBQWhCL21CLEVBQUkwbUIsUUFDTixNQUFNLElBQUk1bkIsTUFBTSw4QkFXbEIsR0FUMkIsSUFBdkJrQixFQUFJMm1CLGlCQUNObGQsRUFBT21FLEVBQU91VixZQUNkbmpCLEVBQUltbkIsbUJBQTRCLElBQVAxZCxFQUN6QnNkLEdBQU0sR0FFWSxJQUFoQi9tQixFQUFJNG1CLFVBQ041bUIsRUFBSW9uQixPQUFTeFosRUFBT3dWLGFBQ3BCMkQsR0FBTSxHQUVrQixJQUF0Qi9tQixFQUFJNm1CLGNBQ04sTUFBTSxJQUFJL25CLE1BQU0seUJBRWRpb0IsRUFBSyxHQUNQblosRUFBT3lCLEtBQUswWCxHQUVkL21CLEVBQUlrZ0IsR0FBSzFMLEVBQVUwTCxHQUFHdFMsRUFBUTVOLEVBQUloQyxPQUt0QyxPQUFPZ0MsRUFHVCxVQUFXNE4sRUFBUTVQLEdBQ2pCLElBQUl5TCxFQUNBekosRUFBTSxHQUNWLEdBQWEsVUFBVGhDLEVBQWtCLENBRXBCLEdBQWEsS0FEYnlMLEVBQU9tRSxFQUFPc1gsZ0JBRVp0WCxFQUFPeVosS0FBSyxHQUVDLEtBRGI1ZCxFQUFPbUUsRUFBT2dZLGVBRVosTUFBTSxJQUFJOW1CLE1BQU0sZ0NBR3BCOE8sRUFBT3lCLEtBQUssR0FFWnJQLEVBQUk0TixPQUFTQSxNQUNSLElBQWEsVUFBVDVQLEVBcUJULE1BQU0sSUFBSWMsWUFBWWQsc0JBckJLLENBRzNCLElBRkF5TCxFQUFPbUUsRUFBT3dWLGdCQUVELEdBQU0sS0FDakIsTUFBTSxJQUFJdGtCLE1BQU0sc0JBRWxCLE1BQU13b0IsRUFBSyxDQUFDLEtBQU8sTUFBTyxLQUFPLEtBQU8sTUFBTyxLQUFPLEtBQU8sTUFBTyxLQUFPLEtBQU8sTUFBTyxJQUFNLE1BQy9GdG5CLEVBQUlxRSxHQUE2QixJQUF2Qm9GLElBQVMsRUFBSSxHQUFjLFNBQVcsU0FDaER6SixFQUFJdW5CLE1BQVE5ZCxJQUFTLEVBQUksRUFDekJ6SixFQUFJd25CLE9BQWdCLEVBQVAvZCxFQUNiQSxFQUFPbUUsRUFBT3dWLGFBQ2RwakIsRUFBSThnQixnQkFBeUMsR0FBdEJyWCxJQUFTLEdBQUssR0FDckN6SixFQUFJK1QsUUFBVS9ULEVBQUk4Z0IsZ0JBQWtCLEVBQ3BDOWdCLEVBQUlnaEIsZUFBaUJ2WCxJQUFTLEdBQUssR0FDbkN6SixFQUFJNGdCLFVBQVkwRyxFQUFHdG5CLEVBQUlnaEIsZ0JBQ3ZCaGhCLEVBQUk2Z0IsUUFBVXBYLElBQVMsRUFBSSxFQUMzQnpKLEVBQUlvYSxhQUFzQixFQUFQM1EsSUFBZ0IsR0FBTW1FLEVBQU93VixlQUFpQixFQUNqRTVPLEVBQVVpVCxlQUFlem5CLEdBQ3pCNE4sRUFBT3lCLEtBQUssR0FDWnJQLEVBQUk0TixPQUFTQSxHQUtmLE9BQU81TixFQUdULFlBQWFvZ0IsRUFBUWhLLEVBQUlnSSxHQUV2QmhJLEVBQUcrSixRQUFVLEdBR2YsV0FBWUMsRUFBUWhLLEVBQUlnSSxHQUN0QixJQUFJcGUsRUFBTSxHQUNWQSxFQUFJa2tCLFFBQVU5RCxFQUFPK0MsWUFDckIsSUFBSTFaLEVBQU8yVyxFQUFPZ0QsYUFDbEJwakIsRUFBSTBuQixpQkFBbUJqZSxJQUFTLEVBQ2hDekosRUFBSTJqQixjQUF1QixLQUFQbGEsRUFDcEIyVyxFQUFPL1EsS0FBSyxHQUNaNUYsRUFBTzJXLEVBQU8rQyxZQUNkbmpCLEVBQUk4ZCxRQUFVclUsSUFBUyxFQUN2QnpKLEVBQUkybkIscUJBQThCLEVBQVBsZSxFQUMzQnpKLEVBQUk2akIsY0FBZ0J6RCxFQUFPK0MsWUFDM0JuakIsRUFBSThqQixrQkFBb0IxRCxFQUFPK0MsWUFDL0IsSUFBSVksR0FBS3ZtQixLQUFLbW1CLGNBQWdCLEdBQUssRUFDL0JsaUIsRUFBTyxHQUNYLElBQUssSUFBSXRILEVBQUksRUFBR0EsRUFBSTRwQixFQUFHNXBCLElBQ3JCc0gsRUFBSy9DLEtBQUssSUFFWnNCLEVBQUk0bkIsTUFBUXhILEVBQU84RSxhQUNuQjlPLEVBQUcrSixRQUFVbmdCLEVBR2Ysc0JBQXVCQSxHQUNyQixJQUNJd2EsRUFDQXFOLEVBRkFwTixFQUFZQyxVQUFVRCxVQUFVRSxjQUdoQyxXQUFXbU4sS0FBS3JOLEdBQ2R6YSxFQUFJZ2hCLGdCQUFrQixHQUN4QmhoQixFQUFJOGdCLGdCQUFrQixFQUN0QnRHLEVBQVMsSUFBSXZhLE1BQU0sR0FDbkI0bkIsRUFBdUI3bkIsRUFBSWdoQixlQUFpQixJQUU1Q2hoQixFQUFJOGdCLGdCQUFrQixFQUN0QnRHLEVBQVMsSUFBSXZhLE1BQU0sR0FDbkI0bkIsRUFBdUI3bkIsRUFBSWdoQixpQkFFYyxJQUFsQ3ZHLEVBQVVJLFFBQVEsWUFDM0I3YSxFQUFJOGdCLGdCQUFrQixFQUN0QnRHLEVBQVMsSUFBSXZhLE1BQU0sR0FDbkI0bkIsRUFBdUI3bkIsRUFBSWdoQixpQkFFM0JoaEIsRUFBSThnQixnQkFBa0IsRUFDdEJ0RyxFQUFTLElBQUl2YSxNQUFNLEdBQ2ZELEVBQUlnaEIsZ0JBQWtCLEVBQ3hCNkcsRUFBdUI3bkIsRUFBSWdoQixlQUFpQixHQUV4QixJQUFoQmhoQixFQUFJNmdCLFVBQ043Z0IsRUFBSThnQixnQkFBa0IsRUFDdEJ0RyxFQUFTLElBQUl2YSxNQUFNLElBRXJCNG5CLEVBQXVCN25CLEVBQUlnaEIsaUJBSS9CeEcsRUFBTyxHQUFLeGEsRUFBSThnQixpQkFBbUIsRUFDbkN0RyxFQUFPLEtBQTRCLEdBQXJCeGEsRUFBSWdoQixpQkFBMEIsRUFDNUN4RyxFQUFPLElBQTJCLEVBQXJCeGEsRUFBSWdoQixpQkFBMEIsRUFDM0N4RyxFQUFPLElBQU14YSxFQUFJNmdCLFNBQVcsRUFDQSxJQUF4QjdnQixFQUFJOGdCLGtCQUNOdEcsRUFBTyxLQUE4QixHQUF2QnFOLElBQWdDLEVBQzlDck4sRUFBTyxJQUE2QixFQUF2QnFOLElBQWdDLEVBQzdDck4sRUFBTyxJQUFNLEVBQ2JBLEVBQU8sR0FBSyxHQUVkeGEsRUFBSStnQixZQUFjdkcsRUFHcEIsa0JBQ0UsT0FBT2hkLEtBQUtpUCxTQUFTQyxZQUFZbFAsS0FBSzJoQixRQUFRNEksYUFHaEQsY0FDRSxPQUFPdnFCLEtBQUtpUCxTQUFTQyxZQUFZLFcsVUFJdEI4SCxHOzs7O3lHQ3B3QmYsTUFDRTVSLFlBQWF1YyxHQUNYM2hCLEtBQUt3cUIsU0FBVyxHQUNoQnhxQixLQUFLeXFCLE1BQVEsR0FDYnpxQixLQUFLMHFCLElBQU0sR0FDWDFxQixLQUFLc2dCLFFBQVUsRUFDZnRnQixLQUFLdWdCLFVBQVksRUFDakJ2Z0IsS0FBS3dnQixlQUFpQixFQUN0QnhnQixLQUFLa00sU0FBVyxFQUNoQmxNLEtBQUsycUIsV0FBYSxFQUNsQjNxQixLQUFLNHFCLGdCQUNMNXFCLEtBQUs2cUIsV0FBYWxKLEVBQVFtSixjQUc1QixXQUNFLE9BQU85cUIsS0FBS3lxQixNQUdkLFlBQWFNLEdBQ1AvcUIsS0FBSytxQixVQUFZQSxJQUNuQi9xQixLQUFLZ0csUUFDTGhHLEtBQUt3cUIsU0FBV08sR0FJcEIsY0FDRSxPQUFPL3FCLEtBQUt3cUIsU0FHZHRwQixLQUFNMFgsRUFBSTFNLEVBQVU2QyxHQUNiL08sS0FBSzBxQixJQUFJOVIsS0FDWjVZLEtBQUswcUIsSUFBSTlSLEdBQU0sQ0FBQzFNLFNBQVVBLEVBQ3hCOGUsWUFBWUEsRUFDWkMsYUFBYUEsRUFDYjlrQixNQUFPbkcsS0FBS2tNLFNBQ1o2QyxjQUFhQSxHQUVmL08sS0FBS3lxQixNQUFNenFCLEtBQUtrTSxVQUFZME0sRUFDNUI1WSxLQUFLa00sVUFBWUEsRUFDakJsTSxLQUFLMnFCLFlBQWMsR0FJdkJPLFdBQVlsSyxHQUNOaGhCLEtBQUswcUIsSUFBSTFKLEtBQ1BoaEIsS0FBSzBxQixJQUFJMUosR0FBSzdhLE1BQVFuRyxLQUFLNHFCLFNBQVNPLE9BQ3RDbnJCLEtBQUs0cUIsU0FBVyxDQUNkMWUsU0FBVWxNLEtBQUswcUIsSUFBSTFKLEdBQUs5VSxTQUN4QmlmLEtBQU1uckIsS0FBSzBxQixJQUFJMUosR0FBSzdhLE1BQ3BCNmtCLFlBQVlBLEVBQ1pDLGFBQWFBLEVBQ2JqSyxJQUFLQSxXQUdGaGhCLEtBQUt5cUIsTUFBTXpxQixLQUFLMHFCLElBQUkxSixHQUFLN2EsY0FDekJuRyxLQUFLMHFCLElBQUkxSixHQUNoQmhoQixLQUFLMnFCLFlBQWMsR0FJdkJTLFNBQVU1bEIsRUFBTTZsQixHQUVkLElBQUs3bEIsRUFDSCxNQUFNLElBQUlsRSxNQUFPLDBCQVNuQixHQU5BdEIsS0FBS3NnQixRQUFVOWEsRUFBSzhhLFFBQ3BCdGdCLEtBQUt3Z0IsZUFBaUJoYixFQUFLZ2IsZUFDeEJoYixFQUFLMGIsVUFBWWxoQixLQUFLa2hCLFVBQ3ZCbGhCLEtBQUtraEIsUUFBVTFiLEVBQUswYixXQUdsQjFiLEVBQUsrYSxTQUFXdmdCLEtBQUt1Z0IsVUF3QnZCLE1BQU0sSUFBSWpmLGlDQUFpQ2tFLEVBQUsrYSxZQXhCZixDQUNqQ3ZnQixLQUFLdWdCLFNBQVcvYSxFQUFLK2EsU0FDckIsSUFBSStLLEVBQWMsR0FDbEIsSUFBSyxJQUFJM3VCLEVBQUksRUFBR0EsRUFBSTZJLEVBQUtvYixNQUFNemYsT0FBUXhFLElBQUssQ0FDMUMsSUFBSXVsQixFQUFPMWMsRUFBS29iLE1BQU1qa0IsR0FDakJxRCxLQUFLMHFCLElBQUl4SSxFQUFLbEIsT0FDakJzSyxFQUFZcHFCLEtBQUtnaEIsRUFBS2xCLEtBQ3RCaGhCLEtBQUtrQixLQUFLZ2hCLEVBQUtsQixJQUFLa0IsRUFBS2hXLFNBQVVnVyxFQUFLblQsY0FJNUMsR0FBR3VjLEVBQVlucUIsT0FBUyxFQUN0QixNQUFNLElBQUlHLE1BQU8sOEJBR25CLEdBQUkrcEIsRUFBVyxDQUNiLElBQUlFLEVBQVN2ckIsS0FBS3dyQixZQUNsQixJQUFLLElBQUk3dUIsRUFBSSxFQUFHQSxFQUFJNHVCLEVBQU9wcUIsT0FBUXhFLElBQzdCMnVCLEVBQVlqTyxRQUFRa08sRUFBTzV1QixJQUFNLEdBQ25DcUQsS0FBS2tyQixXQUFXSyxFQUFPNXVCLE1BU2pDNnVCLFlBQ0UsT0FBT251QixPQUFPb0gsS0FBS3pFLEtBQUswcUIsS0FHMUJNLFdBQVlTLEVBQVFDLEdBQ2xCLElBQUk5UyxFQUFLNVksS0FBSzBxQixJQUFJZSxHQUNkN1MsSUFDRkEsRUFBR29TLFdBQWFVLEdBSXBCVCxZQUFhUSxFQUFRRSxHQUNuQixJQUFJL1MsRUFBSzVZLEtBQUswcUIsSUFBSWUsR0FDZDdTLElBQ0ZBLEVBQUdxUyxZQUFjVSxHQUlyQkMsWUFBYTF1QixHQUNYLE9BQU84QyxLQUFLMHFCLElBQUl4dEIsR0FHbEIydUIsTUFBT1YsR0FDTCxJQUNJdlMsRUFEQWtULEVBQVd6dUIsT0FBT29ILEtBQUt6RSxLQUFLeXFCLE9BV2hDLFFBQUksSUFSQVUsSUFFQUEsRUFERW5yQixLQUFLNHFCLFNBQ0E1cUIsS0FBSzRxQixTQUFTTyxLQUFPbnJCLEtBQUs0cUIsU0FBUzFlLFNBRW5DLEtBSVA0ZixFQUFTM3FCLE9BQVMsR0FBS2dxQixHQUFRbnJCLEtBQUtrTSxVQUF4QyxDQUdBNGYsRUFBU3ZkLEtBQUssQ0FBQ0MsRUFBR0MsSUFDVGdTLFdBQVdqUyxHQUFLaVMsV0FBV2hTLElBRXBDLElBQUssSUFBSTlSLEVBQUksRUFBR0EsRUFBSW12QixFQUFTM3FCLFFBQ3ZCZ3FCLEdBQVE3TSxTQUFTd04sRUFBU252QixJQURLQSxJQUNBLENBQ2pDLElBQUlxa0IsRUFBTWhoQixLQUFLeXFCLE1BQU1xQixFQUFTbnZCLElBRzlCaWMsRUFBSyxDQUFDb0ksTUFBS2dLLFdBRk1ockIsS0FBSzBxQixJQUFJMUosR0FBS2dLLFdBRVJDLFlBRExqckIsS0FBSzBxQixJQUFJMUosR0FBS2lLLFlBQ0lFLEtBQU03TSxTQUFTd04sRUFBU252QixJQUFLdVAsU0FBVW9TLFNBQVN0ZSxLQUFLMHFCLElBQUkxSixHQUFLOVUsV0FDOUZsTSxLQUFLOHFCLG1CQUNBOXFCLEtBQUswcUIsSUFBSTFxQixLQUFLNHFCLFNBQVM1SixZQUN2QmhoQixLQUFLeXFCLE1BQU16cUIsS0FBSzRxQixTQUFTTyxPQUVsQ25yQixLQUFLNHFCLFNBQVdoUyxFQUtwQixPQUFPQSxHQUdUNVMsUUFDRWhHLEtBQUt3cUIsU0FBVyxHQUNoQnhxQixLQUFLeXFCLE1BQVEsR0FDYnpxQixLQUFLMHFCLElBQU0sR0FDWDFxQixLQUFLc2dCLFFBQVUsRUFDZnRnQixLQUFLdWdCLFVBQVksRUFDakJ2Z0IsS0FBS3dnQixlQUFpQixFQUN0QnhnQixLQUFLa00sU0FBVyxFQUdsQjZmLGtCQUNFLElBQUssSUFBSXB2QixFQUFJLEVBQUdDLEVBQUlTLE9BQU9vSCxLQUFLekUsS0FBSzBxQixLQUFLdnBCLE9BQVF4RSxFQUFJQyxFQUFHRCxJQUFLLENBQzVELElBQUlpYyxFQUFLNVksS0FBSzBxQixJQUFJcnRCLE9BQU9vSCxLQUFLekUsS0FBSzBxQixLQUFLL3RCLElBQ3hDaWMsRUFBR29TLGNBQ0hwUyxFQUFHcVMsZ0JBSVBobEIsVUFDRWpHLEtBQUt3cUIsU0FBVyxHQUNoQnhxQixLQUFLeXFCLE1BQVEsR0FDYnpxQixLQUFLMHFCLElBQU0sR0FDWDFxQixLQUFLc2dCLFFBQVUsRUFDZnRnQixLQUFLdWdCLFVBQVksRUFDakJ2Z0IsS0FBS3dnQixlQUFpQixFQUN0QnhnQixLQUFLa00sU0FBVyxFQUNoQmxNLEtBQUsycUIsV0FBYSxFQUNsQjNxQixLQUFLNHFCLGdCQUNMNXFCLEtBQUs2cUIsaUI7Ozs7OENDMUxUbnVCLEVBQU9ELFFBQVUsQ0FDZnV2QixZQUFhbnRCLDJCQUFRLDBDQUFzQmdHLFU7Ozs7K0ZDQzdDLE1BQU1vbkIsRUFGTnR2Qix1QkFBQSw4QkFFc0JvTCxPQUFPa2tCLGMsVUFLN0IsTUFDRTdtQixZQUFhdWMsR0FDWDNoQixLQUFLMmhCLFFBQVV0a0IsT0FBTytOLE9BQU8sR0FBSXVXLEdBQ2pDM2hCLEtBQUtnaEIsSUFBTSxLQUNYaGhCLEtBQUtrc0IsT0FBUyxFQUNkbHNCLEtBQUtvRCxNQUFRLEtBQ2JwRCxLQUFLbXNCLFFBQVUsS0FDZm5zQixLQUFLb3NCLGFBQ0xwc0IsS0FBS3FzQixjQUNMcnNCLEtBQUtzc0IsU0FBV3RzQixLQUFLMmhCLFFBQVEySyxTQUM3QnRzQixLQUFLb1EsT0FBU3BRLEtBQUsyaEIsUUFBUXZSLFFBQVUsZ0JBQ3JDcFEsS0FBS3VzQixjQUFnQixFQUd2QnhzQixPQUNFQyxLQUFLNkQsR0FBR29vQixFQUFjTyxZQUFheHNCLEtBQUt5c0IsS0FBS3R1QixLQUFLNkIsT0FHcEQsa0JBQ0UsTUFBTyxTQUdUeXNCLEtBQU16TCxFQUFLMEwsR0FDVCxJQUFJQyxFQUFRM3NCLEtBQ1pBLEtBQUtnaEIsSUFBTUEsRUFDWGhoQixLQUFLb3NCLGFBR0wsSUFBSVEsRUFBUzVzQixLQUFLNnNCLFVBQVVILEdBRTVCLE9BREFDLEVBQU1oQixXQUNDbUIsTUFBTTlzQixLQUFLZ2hCLElBQUs0TCxHQUFRRyxNQUFLLFNBQVVDLEdBQzVDLEdBQUlBLEVBQVNDLEdBRVgsT0FEQU4sRUFBTVQsT0FBU2MsRUFBU2QsT0FDakJTLEVBQU1PLGlCQUFpQkYsR0FFaENMLEVBQU1oQixXQUNOZ0IsRUFBTTNyQixLQUFLaXJCLEVBQWNrQixhQUFjUixFQUFNdmxCLElBQUssSUFBSTlGLE1BQU8seUJBQzVEOHJCLE9BQU0sU0FBVWhxQixHQUdqQixNQUZBdXBCLEVBQU1oQixXQUNOZ0IsRUFBTTNyQixLQUFLaXJCLEVBQWNrQixhQUFjUixFQUFNdmxCLElBQUtoRSxHQUM1QyxJQUFJOUIsTUFBTThCLEVBQU1HLFlBSTFCMnBCLGlCQUFrQkYsR0FDaEIsSUFBSUwsRUFBUTNzQixLQUNSb1EsRUFBU3BRLEtBQUtpUCxTQUFTQyxZQUFZbFAsS0FBS29RLFFBQzVDcFEsS0FBS3VzQixnQkFDTCxJQUFJYyxFQUFTcnRCLEtBQUt1c0IsY0FDbEIsSUFBSSxJQUFBUyxFQUFTQyxHQUNYLE9BQVFqdEIsS0FBS3NzQixVQUNYLEtBckRVLEVBc0RSVSxFQUFTTSxPQUFPUCxLQUFNdm5CLElBQ3BCbW5CLEVBQU1oQixXQUNEZ0IsRUFBTVAsV0FBY08sRUFBTU4sYUFDekJqYyxHQUNGQSxFQUFPbFAsS0FBS3NFLEdBQ1ptbkIsRUFBTTNyQixLQUFLaXJCLEVBQWNzQixnQkFBaUJuZCxJQUUxQ3VjLEVBQU0zckIsS0FBS2lyQixFQUFjc0IsZ0JBQWlCL25CLE1BSWhELE1BQ0YsS0FuRVUsRUFvRVJ3bkIsRUFBU2xOLE9BQU9pTixLQUFNdm5CLElBQ3BCbW5CLEVBQU1oQixXQUNEZ0IsRUFBTVAsV0FBY08sRUFBTU4sYUFDekJqYyxHQUNGQSxFQUFPbFAsS0FBS3NFLEdBQ1ptbkIsRUFBTTNyQixLQUFLaXJCLEVBQWNzQixnQkFBaUJuZCxJQUUxQ3VjLEVBQU0zckIsS0FBS2lyQixFQUFjc0IsZ0JBQWlCL25CLE1BSWhELE1BQ0YsS0E5RVksRUErRVZ3bkIsRUFBU1EsY0FBY1QsS0FBTXZuQixJQUMzQm1uQixFQUFNaEIsV0FDRGdCLEVBQU1QLFdBQWNPLEVBQU1OLGFBQ3pCamMsR0FDRkEsRUFBT2xQLEtBQUssSUFBSXdFLFdBQVdGLElBQzNCbW5CLEVBQU0zckIsS0FBS2lyQixFQUFjc0IsZ0JBQWlCbmQsSUFFMUN1YyxFQUFNM3JCLEtBQUtpckIsRUFBY3NCLGdCQUFpQi9uQixNQUloRCxNQUNGLEtBOUZZLEVBK0ZaLFFBQ0UsT0FBT3hGLEtBQUt5dEIsVUFBVVQsRUFBU2piLEtBQUsyYixZQUFhTCxJQUt6REksVUFBV0UsRUFBUU4sR0FDakIsSUFBSWpkLEVBQVNwUSxLQUFLaVAsU0FBU0MsWUFBWWxQLEtBQUtvUSxRQUM1QyxJQUFNQSxHQUFVcFEsS0FBS21zQixTQUFZbnNCLEtBQUtxc0IsV0FDcEMsSUFDRXJzQixLQUFLbXNCLFFBQVF5QixTQUNiLE1BQU9DLElBTVgsR0FEQTd0QixLQUFLbXNCLFFBQVV3QixPQUNYM3RCLEtBQUsyckIsUUFDUCxPQUdGLElBQUlnQixFQUFRM3NCLEtBR1pBLEtBQUttc0IsU0FBV25zQixLQUFLbXNCLFFBQVE1SixPQUFPd0ssTUFBSyxTQUFVZSxHQUNqRCxHQUFJQSxFQUFJQyxLQUtOLE9BSEFwQixFQUFNaEIsV0FDTmdCLEVBQU1ULE9BQVMsT0FDZlMsRUFBTTNyQixLQUFLaXJCLEVBQWNzQixnQkFBaUJuZCxHQUk1QyxJQUFJdWMsRUFBTVAsWUFBYU8sRUFBTU4sV0FhN0IsT0FGQWpjLEVBQU9sUCxLQUFLNHNCLEVBQUlsd0IsT0FDaEIrdUIsRUFBTTNyQixLQUFLaXJCLEVBQWMrQixrQkFBbUI1ZCxHQUNyQ3VjLEVBQU1jLFVBQVVFLEVBQVFOLEdBWjdCLEdBQUtWLEVBQU1SLFFBQ1QsSUFDRVEsRUFBTVIsUUFBUXlCLFNBQ2QsTUFBT0MsUUFVWlQsTUFBT2hxQixJQUNSdXBCLEVBQU1oQixXQUNOZ0IsRUFBTTNyQixLQUFLaXJCLEVBQWNrQixhQUFjUixFQUFNdmxCLElBQUtoRSxLQUl0RHlwQixVQUFXSCxHQUNULElBQUluZixFQUFVbFEsT0FBTytOLE9BQU8sR0FBSXNoQixHQUM1QnVCLEVBQVUsSUFBSUMsUUFFZHRCLEVBQVMsQ0FDWHhMLE9BQVEsTUFDUjZNLFFBQVNBLEVBQ1Rud0IsS0FBTSxPQUNOcXdCLE1BQU8sV0FLVCxHQUFvQyxpQkFBekJudUIsS0FBSzJoQixRQUFRc00sUUFBc0IsQ0FDNUMsSUFBSUcsRUFBZ0JwdUIsS0FBSzJoQixRQUFRc00sUUFDakMsSUFBSyxJQUFJL3ZCLEtBQU9rd0IsRUFDVkEsRUFBYzV2QixlQUFlTixJQUMvQit2QixFQUFRSSxPQUFPbndCLEVBQUtrd0IsRUFBY2x3QixJQUt4QyxHQUErQixpQkFBcEJxUCxFQUFRMGdCLFFBQXNCLENBQ3ZDLElBQUlLLEVBQWEvZ0IsRUFBUTBnQixRQUN6QixJQUFLLElBQUkvdkIsS0FBT293QixFQUNWQSxFQUFXOXZCLGVBQWVOLElBQzVCK3ZCLEVBQVFJLE9BQU9ud0IsRUFBS293QixFQUFXcHdCLElBZ0JyQyxXQVhJcVAsRUFBUWdoQixPQUNWM0IsRUFBTzl1QixLQUFPLGVBS1p5UCxFQUFRaWhCLGtCQUNWNUIsRUFBTzZCLFlBQWMsV0FJaEI3QixFQUdUZ0IsU0FDRSxHQUFJNXRCLEtBQUttc0IsUUFBUyxDQUNoQixJQUNFbnNCLEtBQUttc0IsUUFBUXlCLFNBQ2IsTUFBT0MsSUFHVDd0QixLQUFLbXNCLFFBQVUsS0FDZm5zQixLQUFLMnJCLFdBQ0wzckIsS0FBS29zQixjQUlUbm1CLFVBQ0VqRyxLQUFLcXNCLGNBQ0xyc0IsS0FBSzR0QixZOzs7OzhDQ25OVGx4QixFQUFPRCxRQUFVLENBQ2ZpeUIsV0FBWTd2QixrQkFBUSxzQ0FBYWdHLFU7Ozs7K0ZDRG5DLE1BQUFsSSx1QkFBQSw4QkFHQSxNQUFNZ3lCLEVBQ0osWUFBYS93QixHQUNYLE9BQU9neEIsU0FBT0MsWUFBWWp4QixHQUU1QixlQUFnQjJOLEVBQU1yTyxLQUFTNHhCLEdBQzdCLE1BQU0xZSxFQUFTLElBQUl3ZSxTQUVuQixPQURBeGUsRUFBTzJlLE1BQU1KLEVBQUtwakIsS0FBS0EsR0FBT29qQixFQUFLbnVCLEtBQUt0RCxNQUFVNHhCLEdBQzNDMWUsRUFBT0EsT0FFaEIsaUJBQWtCa1EsRUFBUzBPLEdBQ3pCLE9BQU8sSUFBSXRwQixXQUFXLENBQ3BCNGEsRUFDQzBPLEdBQVEsR0FBTSxJQUNkQSxHQUFRLEVBQUssSUFDUCxJQUFQQSxJQUdKLGNBQ0UsT0FBT0wsRUFBS00sUUFBUSxHQUFJLE9BQVEsSUFBSXZwQixXQUFXLENBQzdDLElBQU0sSUFBTSxJQUFNLElBQ2xCLEVBQUssRUFBSyxFQUFNLEVBQ2hCLElBQU0sSUFBTSxJQUFNLElBQ2xCLEdBQU0sSUFBTSxHQUFNLE1BR3RCLGFBQWEsS0FBRWxGLEVBQUYsS0FBUThJLElBQ25CLElBRUk0bEIsRUFGQTNqQixFQUFPLEVBQ1A0akIsRUFBT1IsRUFBS1EsS0FBSzdsQixFQUFLNEMsU0FBVTVDLEVBQUt3TixXQUl2Q29ZLEVBRFcsVUFBVDF1QixFQUNLbXVCLEVBQUtTLFVBQVU5bEIsR0FFZnFsQixFQUFLVSxVQUFVL2xCLEdBR3hCLElBQUlnbUIsRUFBT1gsRUFBS1csS0FBS2htQixFQUFLNEMsU0FBVTVDLEVBQUt3TixXQUFhLElBQU14TixFQUFLekMsSUFJakUsTUFIQSxDQUFDc29CLEVBQU1ELEVBQU1JLEdBQU1DLFFBQVFsSyxJQUN6QjlaLEdBQVE4WixFQUFLNWYsYUFFUmtwQixFQUFLTSxRQUFRMWpCLEVBQU0sT0FBUTRqQixFQUFNRCxFQUFNSSxHQUVoRCxZQUFhcGpCLEVBQVU0SyxFQUFZLEtBRWpDLElBQUkwWSxFQUFRLElBQUk5cEIsV0FBVyxDQUN6QixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUtqQm9SLElBQWMsR0FBTSxJQUNwQkEsSUFBYyxHQUFNLElBQ3BCQSxJQUFjLEVBQUssSUFDTixJQUFiQSxFQU1BNUssSUFBYSxHQUFNLElBQ25CQSxJQUFhLEdBQU0sSUFDbkJBLElBQWEsRUFBSyxJQUNOLElBQVpBLEVBQ0QsRUFBTSxFQUFNLEVBQU0sRUFLbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsR0FBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsSUFBTSxJQUFNLElBQU0sTUFFcEIsT0FBT3lpQixFQUFLTSxRQUFRLEVBQUlPLEVBQU1ydUIsT0FBUSxPQUFRLElBQUl1RSxXQUFXOHBCLElBRS9ELGlCQUFrQmhxQixHQUNoQixJQUFJK0YsRUFBTyxFQUVQa2tCLEVBQU9kLEVBQUtjLEtBQUssQ0FDbkI1b0IsR0FBSSxFQUNKcUYsU0FBVTFHLEVBQUswRyxTQUNmNEssVUFBV3RSLEVBQUtzUixXQUFhLElBQzdCckIsTUFBT2pRLEVBQUs2USxhQUNaWCxPQUFRbFEsRUFBSzhRLGNBQ2I5VixLQUFNLFVBRUprdkIsRUFBT2YsRUFBS2UsS0FBSyxDQUNuQmx2QixLQUFNLFFBQ05zVyxVQUFXdFIsRUFBS3NSLFdBQWEsSUFDN0I1SyxTQUFVMUcsRUFBSzBHLFNBQ2Z3VCxLQUFNbGEsRUFBS2thLEtBQ1gvSSxTQUFVblIsRUFBS21SLFNBQ2ZsQixNQUFPalEsRUFBSzZRLGFBQ1pYLE9BQVFsUSxFQUFLOFEsZ0JBS2YsTUFIQSxDQUFDbVosRUFBTUMsR0FBTUgsUUFBUWxLLElBQ25COVosR0FBUThaLEVBQUs1ZixhQUVSa3BCLEVBQUtNLFFBQVExakIsRUFBTSxPQUFRa2tCLEVBQU1DLEdBRTFDLGlCQUFrQmxxQixHQUNoQixJQUFJK0YsRUFBTyxFQUNQa2tCLEVBQU9kLEVBQUtjLEtBQUssQ0FDbkI1b0IsR0FBSSxFQUNKcUYsU0FBVTFHLEVBQUswRyxTQUNmNEssVUFBV3RSLEVBQUtzUixXQUFhLElBQzdCckIsTUFBTyxFQUNQQyxPQUFRLEVBQ1JsVixLQUFNLFVBRUprdkIsRUFBT2YsRUFBS2UsS0FBSyxDQUNuQmx2QixLQUFNLFFBQ05zVyxVQUFXdFIsRUFBS3NSLFdBQWEsSUFDN0I1SyxTQUFVMUcsRUFBSzBHLFNBQ2Z0RSxhQUFjcEMsRUFBS29DLGFBQ25CK25CLFdBQVlucUIsRUFBSzZXLFdBQ2pCVyxPQUFReFgsRUFBS3dYLFNBS2YsTUFIQSxDQUFDeVMsRUFBTUMsR0FBTUgsUUFBUWxLLElBQ25COVosR0FBUThaLEVBQUs1ZixhQUVSa3BCLEVBQUtNLFFBQVExakIsRUFBTSxPQUFRa2tCLEVBQU1DLEdBRTFDLFlBQWFscUIsR0FDWCxJQUFJcUIsRUFBS3JCLEVBQUtxQixHQUNWcUYsRUFBVzFHLEVBQUswRyxTQUNoQnVKLEVBQVFqUSxFQUFLaVEsTUFDYkMsRUFBU2xRLEVBQUtrUSxPQUNkb1osRUFBVSxJQUFJcHBCLFdBQVcsQ0FDM0IsRUFBTSxFQUFNLEVBQU0sRUFNbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDakJtQixJQUFPLEdBQU0sSUFDYkEsSUFBTyxHQUFNLElBQ2JBLElBQU8sRUFBSyxJQUNOLElBQU5BLEVBQ0QsRUFBTSxFQUFNLEVBQU0sRUFDakJxRixJQUFhLEdBQU0sSUFDbkJBLElBQWEsR0FBTSxJQUNuQkEsSUFBYSxFQUFLLElBQ04sSUFBWkEsRUFDRCxFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixHQUFNLEVBQU0sRUFBTSxFQUNqQnVKLElBQVUsRUFBSyxJQUNOLElBQVRBLEVBQ0QsRUFBTSxFQUNMQyxJQUFXLEVBQUssSUFDTixJQUFWQSxFQUNELEVBQU0sSUFFUixPQUFPaVosRUFBS00sUUFBUSxFQUFJSCxFQUFRcnBCLFdBQVksT0FBUXFwQixHQUV0RCxZQUFhdHBCLEdBQ1gsSUFBSTRLLEVBQVMsSUFBSXdlLFNBQ2IxaUIsRUFBVzFHLEVBQUswRyxTQUNoQjBqQixFQUFZcHFCLEVBQUtvcUIsVUFVckIsT0FUQXhmLEVBQU8yZSxNQUFNSixFQUFLcGpCLEtBQUssSUFBS29qQixFQUFLbnVCLEtBQUssU0FFdEM0UCxFQUFPMmUsTUFBTUosRUFBS3BqQixLQUFLLElBQUtvakIsRUFBS251QixLQUFLLFNBQ3RDNFAsRUFBTzJlLE1BQU0sSUFBSXJwQixXQUFXLENBQzFCLEVBQU0sRUFBTSxFQUFNLEVBQ2pCd0csR0FBWSxHQUFNLElBQU9BLEdBQVksR0FBTSxJQUFPQSxHQUFZLEVBQUssSUFBaUIsSUFBWEEsRUFDekUwakIsR0FBYSxHQUFNLElBQU9BLEdBQWEsR0FBTSxJQUFPQSxHQUFhLEVBQUssSUFBa0IsSUFBWkEsRUFDN0UsRUFBTSxFQUFNLEVBQU0sS0FFYnhmLEVBQU9BLE9BRWhCLFlBQWE1SyxHQUNYLElBQUkrRixFQUFPLEVBQ1Bza0IsRUFBT2xCLEVBQUtrQixLQUFLcnFCLEVBQUtzUixVQUFXdFIsRUFBSzBHLFVBQ3RDNGpCLEVBQU9uQixFQUFLbUIsS0FBS3RxQixFQUFLaEYsTUFDdEJ1dkIsRUFBT3BCLEVBQUtvQixLQUFLdnFCLEdBSXJCLE1BSEEsQ0FBQ3FxQixFQUFNQyxFQUFNQyxHQUFNUixRQUFRbEssSUFDekI5WixHQUFROFosRUFBSzVmLGFBRVJrcEIsRUFBS00sUUFBUTFqQixFQUFNLE9BQVFza0IsRUFBTUMsRUFBTUMsR0FFaEQsWUFBYWpaLEVBQVksSUFBTTVLLEdBQzdCLElBQUk0aUIsRUFBVSxJQUFJcHBCLFdBQVcsQ0FDM0IsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDakJvUixJQUFjLEdBQU0sSUFDcEJBLElBQWMsR0FBTSxJQUNwQkEsSUFBYyxFQUFLLElBQ04sSUFBYkEsRUFDQTVLLElBQWEsR0FBTSxJQUNuQkEsSUFBYSxHQUFNLElBQ25CQSxJQUFhLEVBQUssSUFDTixJQUFaQSxFQUNELEdBQU0sSUFDTixFQUFNLElBRVIsT0FBT3lpQixFQUFLTSxRQUFRLEdBQUtILEVBQVFycEIsV0FBWSxPQUFRa3BCLEVBQUtxQixVQUFVLEVBQUcsR0FBSWxCLEdBRTdFLFlBQWF0dUIsR0FDWCxJQUFJNUMsRUFBUSxDQUFDLEVBQ1gsRUFBTSxFQUFNLEVBQ1osRUFBTSxFQUFNLEVBQU0sRUFDbEIsSUFBTSxJQUFNLElBQU0sSUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsR0FBTSxJQUFNLElBQU0sSUFDbEIsSUFBTSxHQUFNLEdBQU0sSUFDbEIsSUFBTSxJQUFNLElBQU0sSUFBTSxHQVExQixNQU5hLFVBQVQ0QyxJQUNGNUMsRUFBTXlPLE9BQU8sRUFBRyxFQUFPLElBQU0sSUFBTSxJQUFNLEtBQ3pDek8sRUFBTXlPLE9BQU8sR0FBSSxHQUFRLEdBQU0sSUFBTSxJQUFNLElBQ3pDLElBQU0sR0FBTSxHQUFNLElBQ2xCLElBQU0sSUFBTSxJQUFNLElBQU0sSUFFckJzaUIsRUFBS00sUUFBUSxFQUFJcnhCLEVBQU11RCxPQUFRLE9BQVEsSUFBSXVFLFdBQVc5SCxJQUUvRCxZQUFhNEgsR0FDWCxJQUFJK0YsRUFBTyxFQUNQMGtCLEVBQXFCLFVBQWR6cUIsRUFBS2hGLEtBQW1CbXVCLEVBQUtzQixPQUFTdEIsRUFBS3VCLE9BQ2xEQyxFQUFPeEIsRUFBS3dCLE9BQ1pDLEVBQU96QixFQUFLeUIsS0FBSzVxQixHQUlyQixNQUhBLENBQUN5cUIsRUFBTUUsRUFBTUMsR0FBTWIsUUFBUWxLLElBQ3pCOVosR0FBUThaLEVBQUs1ZixhQUVSa3BCLEVBQUtNLFFBQVExakIsRUFBTSxPQUFRMGtCLEVBQU1FLEVBQU1DLEdBRWhELGNBQ0UsT0FBT3pCLEVBQUtNLFFBQVEsR0FBSSxPQUFRLElBQUl2cEIsV0FBVyxDQUM3QyxFQUNBLEVBQU0sRUFBTSxFQUNaLEVBQU0sRUFDTixFQUFNLEVBQ04sRUFBTSxFQUNOLEVBQU0sS0FHVixjQUNFLE9BQU9pcEIsRUFBS00sUUFBUSxHQUFJLE9BQVEsSUFBSXZwQixXQUFXLENBQzdDLEVBQ0EsRUFBTSxFQUFNLEVBQ1osRUFBTSxFQUNOLEVBQU0sS0FHVixjQUNFLElBQUkwSyxFQUFTLElBQUl3ZSxTQVVqQixPQURBeGUsRUFBTzJlLE1BQU1KLEVBQUtwakIsS0FBSyxJQUFLb2pCLEVBQUtudUIsS0FBSyxRQUFTbXVCLEVBQUtwakIsS0FBSyxJQUFLb2pCLEVBQUtudUIsS0FBSyxRQUFTLElBQUlrRixXQVIxRSxDQUFDLEVBQ1YsRUFBTSxFQUFNLEVBQ1osRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sR0FDbEIsSUFBTSxJQUFNLElBQU0sR0FDbEIsRUFDQSxFQUFNLEVBQU0sS0FHUDBLLEVBQU9BLE9BRWhCLFlBQWE1SyxHQUNYLElBQUkrRixFQUFPLEVBQ1A4a0IsRUFBTzFCLEVBQUswQixLQUFLN3FCLEdBQ2pCOHFCLEVBQU8zQixFQUFLMkIsT0FDWkMsRUFBTzVCLEVBQUs0QixPQUNaQyxFQUFPN0IsRUFBSzZCLE9BQ1pDLEVBQU85QixFQUFLOEIsT0FJaEIsTUFIQSxDQUFDSixFQUFNQyxFQUFNQyxFQUFNQyxFQUFNQyxHQUFNbEIsUUFBUWxLLElBQ3JDOVosR0FBUThaLEVBQUs1ZixhQUVSa3BCLEVBQUtNLFFBQVExakIsRUFBTSxPQUFROGtCLEVBQU1DLEVBQU1DLEVBQU1DLEVBQU1DLEdBRTVELFlBQWFqckIsR0FDWCxJQUFJc3BCLEVBWUosT0FKRUEsRUFQZ0IsVUFBZHRwQixFQUFLaEYsS0FPR211QixFQUFLK0IsS0FBS2xyQixHQUVWbXBCLEVBQUtnQyxLQUFLbnJCLEdBRWZtcEIsRUFBS00sUUFBUSxHQUFLSCxFQUFRcnBCLFdBQVksT0FBUWtwQixFQUFLcUIsVUFBVSxFQUFHLEdBQUksSUFBSXRxQixXQUFXLENBQUMsRUFBTSxFQUFNLEVBQU0sSUFBUW9wQixHQUV2SCxZQUFhdHBCLEdBQ1gsSUFBSXNwQixFQUFVLElBQUlwcEIsV0FBVyxDQUMzQixFQUFNLEVBQU0sRUFDWixFQUFNLEVBQU0sRUFDWixFQUFNLEVBQ04sRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTUYsRUFBS29DLGFBQ1gsRUFBTSxHQUNOLEVBQU0sRUFBTSxFQUFNLEVBQ2pCcEMsRUFBS21xQixZQUFjLEVBQUssSUFDUCxJQUFsQm5xQixFQUFLbXFCLFdBQ0wsRUFBTSxJQUVKaUIsRUFBT2pDLEVBQUtpQyxLQUFLcHJCLEVBQUt3WCxRQUMxQixPQUFPMlIsRUFBS00sUUFBUSxFQUFJSCxFQUFRcnBCLFdBQWFtckIsRUFBS25yQixXQUFZLE9BQVFxcEIsRUFBUzhCLEdBRWpGLFlBQWE1VCxFQUFTLENBQUMsR0FBSSxJQUFLLEVBQUcsSUFDakMsTUFBTTZULEVBQVk3VCxFQUFPN2IsT0FDekIsSUFBSWlQLEVBQVMsSUFBSXdlLFNBQ2JFLEVBQVUsSUFBSXBwQixXQUFXLENBQzNCLEVBQ0EsRUFBTSxFQUFNLEVBRVosRUFDQSxHQUFPbXJCLEVBQ1AsRUFBTSxFQUNOLEVBRUEsRUFDQSxHQUFPQSxFQUNQLEdBQ0EsR0FDQSxFQUFNLEVBQU0sRUFDWixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUVsQixHQUNBbnhCLE9BQU8sQ0FBQ214QixJQUFZbnhCLE9BQU9zZCxHQUFRdGQsT0FBTyxDQUFDLEVBQU0sRUFBTSxLQUV6RCxPQURBMFEsRUFBTzJlLE1BQU1KLEVBQUtwakIsS0FBSyxFQUFJdWpCLEVBQVFycEIsWUFBYWtwQixFQUFLbnVCLEtBQUssUUFBU3N1QixHQUM1RDFlLEVBQU9BLE9BRWhCLFlBQWE1SyxHQUNYLElBQUk0SyxFQUFTLElBQUl3ZSxTQUliblosRUFBUWpRLEVBQUtpUSxNQUNiQyxFQUFTbFEsRUFBS2tRLE9BQ2RvYixFQUFXdHJCLEVBQUttUixTQUFTakIsT0FDekJxYixFQUFXdnJCLEVBQUttUixTQUFTbEIsTUFZekJpSyxFQUFPbGEsRUFBS2thLEtBQ1ppUixFQUFPLElBQUlqckIsV0FBVyxDQUN4QixFQUFNLEVBQU0sRUFDWixFQUFNLEVBQU0sRUFDWixFQUFNLEVBQ04sRUFBTSxFQUNOLEVBQU0sRUFDTixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNqQitQLEdBQVMsRUFBSyxJQUNQLElBQVJBLEVBQ0NDLEdBQVUsRUFBSyxJQUNQLElBQVRBLEVBQ0EsRUFBTSxHQUFNLEVBQU0sRUFDbEIsRUFBTSxHQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUNOLEdBQ0EsSUFBTSxHQUFNLElBQU0sSUFDbEIsSUFBTSxJQUFNLElBQU0sSUFDbEIsSUFBTSxJQUFNLElBQU0sR0FDbEIsSUFBTSxJQUFNLElBQU0sR0FDbEIsSUFBTSxJQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQU0sRUFDbEIsRUFBTSxFQUFNLEVBQ1osRUFBTSxHQUNOLEdBQU0sS0FDSnNiLEVBQU8sSUFBSXRyQixXQUFXLENBQ3hCLEVBQU0sR0FBTSxJQUFNLElBQ2xCLEVBQU0sR0FBTSxJQUFNLElBQ2xCLEVBQU0sR0FBTSxJQUFNLE1BRWhCdXJCLEVBQU8sSUFBSXZyQixXQUFXLENBQ3ZCb3JCLEdBQVksR0FDWkEsR0FBWSxHQUFNLElBQ2xCQSxHQUFZLEVBQUssSUFDUCxJQUFYQSxFQUNDQyxHQUFZLEdBQ1pBLEdBQVksR0FBTSxJQUNsQkEsR0FBWSxFQUFLLElBQ1AsSUFBWEEsSUFTRixPQU5BM2dCLEVBQU8yZSxNQUNMSixFQUFLcGpCLEtBaEVJLEdBZ0VRb2xCLEVBQUtsckIsV0FBYWlhLEVBQUtqYSxXQUFhdXJCLEVBQUt2ckIsWUFBYWtwQixFQUFLbnVCLEtBQUssUUFBU213QixFQUMxRmhDLEVBQUtwakIsS0FBSyxFQUFJbVUsRUFBS2phLFlBQWFrcEIsRUFBS251QixLQUFLLFFBQVNrZixFQUNuRGlQLEVBQUtwakIsS0FBSyxJQUFLb2pCLEVBQUtudUIsS0FBSyxRQUFTd3dCLEVBQ2xDckMsRUFBS3BqQixLQUFLLElBQUtvakIsRUFBS251QixLQUFLLFFBQVN5d0IsR0FFN0I3Z0IsRUFBT0EsT0FFaEIsY0FDRSxJQUFJMGUsRUFBVSxJQUFJcHBCLFdBQVcsQ0FDM0IsRUFDQSxFQUFNLEVBQU0sRUFDWixFQUFNLEVBQU0sRUFBTSxJQUVwQixPQUFPaXBCLEVBQUtNLFFBQVEsR0FBSSxPQUFRSCxHQUVsQyxjQUNFLElBQUlBLEVBQVUsSUFBSXBwQixXQUFXLENBQzNCLEVBQ0EsRUFBTSxFQUFNLEVBQ1osRUFBTSxFQUFNLEVBQU0sSUFFcEIsT0FBT2lwQixFQUFLTSxRQUFRLEdBQUksT0FBUUgsR0FFbEMsY0FDRSxJQUFJQSxFQUFVLElBQUlwcEIsV0FBVyxDQUMzQixFQUNBLEVBQU0sRUFBTSxFQUNaLEVBQU0sRUFBTSxFQUFNLElBRXBCLE9BQU9pcEIsRUFBS00sUUFBUSxHQUFJLE9BQVFILEdBRWxDLGNBQ0UsSUFBSUEsRUFBVSxJQUFJcHBCLFdBQVcsQ0FDM0IsRUFDQSxFQUFNLEVBQU0sRUFDWixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxJQUVwQixPQUFPaXBCLEVBQUtNLFFBQVEsR0FBSSxPQUFRSCxHQUVsQyxZQUFhNWlCLEVBQVU0SyxFQUFZLElBQU1vYSxHQUN2QyxJQUFJOWdCLEVBQVMsSUFBSXdlLFNBQ2J1QyxFQUFPdkMsU0FBT0MsWUFBWTNpQixHQUU5QixPQURBa0UsRUFBTzJlLE1BQU1KLEVBQUtwakIsS0FBSyxJQUFLb2pCLEVBQUtudUIsS0FBSyxRQUFTbXVCLEVBQUtwakIsS0FBSyxJQUFLb2pCLEVBQUtudUIsS0FBSyxRQUFTbXVCLEVBQUtxQixVQUFVLEVBQUcsR0FBSW1CLEVBQU14QyxFQUFLeUMsS0FBS0YsSUFDaEg5Z0IsRUFBT0EsT0FFaEIsWUFBYXZKLEdBQ1gsSUFBSWlvQixFQUFVLElBQUlwcEIsV0FBVyxDQUMzQixFQUNBLEVBQU0sRUFBTSxFQUNYbUIsR0FBTSxHQUNOQSxHQUFNLEdBQU0sSUFDWkEsR0FBTSxFQUFLLElBQ04sSUFBTEEsRUFDRCxFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxFQUNsQixFQUFNLEVBQU0sRUFBTSxJQUVwQixPQUFPOG5CLEVBQUtNLFFBQVEsRUFBSUgsRUFBUXJwQixXQUFZLE9BQVFxcEIsR0FFdEQsWUFBYXRwQixHQUNYLElBQUkrRixFQUFPLEVBQ1A4bEIsRUFBTzFDLEVBQUswQyxPQUNaQyxFQUFPM0MsRUFBSzJDLEtBQUs5ckIsR0FJckIsTUFIQSxDQUFDNnJCLEVBQU1DLEdBQU0vQixRQUFRbEssSUFDbkI5WixHQUFROFosRUFBSzVmLGFBRVJrcEIsRUFBS00sUUFBUTFqQixFQUFNLE9BQVE4bEIsRUFBTUMsR0FFMUMsY0FDRSxJQUFJeEMsRUFBVUYsU0FBT0MsWUFBWUYsRUFBS3BPLFVBRXRDLE9BREFvTyxFQUFLcE8sVUFBWSxFQUNWb08sRUFBS00sUUFBUSxHQUFJLE9BQVFOLEVBQUtxQixVQUFVLEVBQUcsR0FBSWxCLEdBRXhELFlBQWF0cEIsR0FDWCxJQUFJK0YsRUFBTyxFQUNQZ21CLEVBQU81QyxFQUFLNEMsS0FBSy9yQixFQUFLcUIsSUFDdEIycUIsRUFBTzdDLEVBQUs2QyxLQUFLaHNCLEVBQUsybEIsTUFDdEJzRyxFQUFPOUMsRUFBSzhDLEtBQUtqc0IsR0FDakJrc0IsRUFBTy9DLEVBQUsrQyxLQUFLbHNCLEVBQU1pc0IsRUFBS2hzQixZQUtoQyxNQUhBLENBQUM4ckIsRUFBTUMsRUFBTUUsRUFBTUQsR0FBTWxDLFFBQVFsSyxJQUMvQjlaLEdBQVE4WixFQUFLNWYsYUFFUmtwQixFQUFLTSxRQUFRMWpCLEVBQU0sT0FBUWdtQixFQUFNQyxFQUFNRSxFQUFNRCxHQUV0RCxZQUFhNXFCLEdBQ1gsSUFBSWlvQixFQUFVRixTQUFPQyxZQUFZaG9CLEdBQ2pDLE9BQU84bkIsRUFBS00sUUFBUSxHQUFJLE9BQVFOLEVBQUtxQixVQUFVLEVBQUcsR0FBSWxCLEdBRXhELFlBQWEzRCxHQUdYLE9BQU93RCxFQUFLTSxRQUFRLEdBQUksT0FBUU4sRUFBS3FCLFVBQVUsRUFBRyxHQUFJcEIsU0FBT0MsWUFBWTFELElBRTNFLFlBQWEzbEIsRUFBTW1zQixHQUdqQixJQUFJdmhCLEVBQVMsSUFBSXdlLFNBQ2JnRCxFQUFjaEQsU0FBT0MsWUFBWXJwQixFQUFLdUIsUUFBUTVGLFFBVzlDb0UsRUFBU3FwQixTQUFPQyxZQUFZLEdBQXdDLEdBQUtycEIsRUFBS3VCLFFBQVE1RixPQUFTd3dCLEdBcUNuRyxPQXBDQXZoQixFQUFPMmUsTUFBTUosRUFBS3BqQixLQUFLLEdBQUssR0FBSy9GLEVBQUt1QixRQUFRNUYsUUFBU3d0QixFQUFLbnVCLEtBQUssUUFBUyxJQUFJa0YsV0FBVyxDQUFDLEVBQU0sRUFBTSxHQUFNLElBQVFrc0IsRUFBYXJzQixHQVlqSUMsRUFBS3VCLFFBQVF3b0IsUUFBU2xLLElBQ3BCLE1BQU13TSxFQUFReE0sRUFBS3dNLE1BR25CemhCLEVBQU8yZSxNQUFNLElBQUlycEIsV0FBVyxDQUN6QjJmLEVBQUtuWixXQUFhLEdBQU0sSUFDeEJtWixFQUFLblosV0FBYSxHQUFNLElBQ3hCbVosRUFBS25aLFdBQWEsRUFBSyxJQUNOLElBQWpCbVosRUFBS25aLFNBQ0xtWixFQUFLOVosT0FBUyxHQUFNLElBQ3BCOFosRUFBSzlaLE9BQVMsR0FBTSxJQUNwQjhaLEVBQUs5WixPQUFTLEVBQUssSUFDTixJQUFiOFosRUFBSzlaLEtBQ0xzbUIsRUFBTUMsV0FBYSxFQUFLRCxFQUFNRSxVQUM5QkYsRUFBTUcsY0FBZ0IsRUFBTUgsRUFBTUksZUFBaUIsRUFBS0osRUFBTUssVUFDL0QsRUFBTSxFQUNMN00sRUFBSy9aLE1BQVEsR0FBTSxJQUNuQitaLEVBQUsvWixNQUFRLEdBQU0sSUFDbkIrWixFQUFLL1osTUFBUSxFQUFLLElBQ04sSUFBWitaLEVBQUsvWixTQUtIOEUsRUFBT0EsT0FFaEIsWUFBYTVLLEdBQ1gsSUFBSTRLLEVBQVMsSUFBSXdlLFNBV2pCLE9BVkF4ZSxFQUFPMmUsTUFBTUosRUFBS3BqQixLQUFLLEdBQUsvRixFQUFLdUIsUUFBUTVGLFFBQVN3dEIsRUFBS251QixLQUFLLFFBQVNtdUIsRUFBS3FCLFVBQVUsRUFBRyxJQUN2RnhxQixFQUFLdUIsUUFBUXdvQixRQUFRbEssSUFDbkIsTUFBTXdNLEVBQVF4TSxFQUFLd00sTUFDYk0sRUFBT04sRUFBTUMsV0FBYSxFQUM3QkQsRUFBTUUsV0FBYSxFQUNuQkYsRUFBTUcsY0FBZ0IsRUFDdEJILEVBQU1JLGNBRVQ3aEIsRUFBTzJlLE1BQU0sSUFBSXJwQixXQUFXLENBQUN5c0IsT0FFeEIvaEIsRUFBT0EsT0FFaEIsWUFBYTVLLEdBQ1gsSUFBSTRLLEVBQVMsSUFBSXdlLFNBQ2JyakIsRUFBTyxFQUNYL0YsRUFBS3VCLFFBQVF3b0IsUUFBUWxLLElBQ25COVosR0FBUThaLEVBQUs5WixPQUVmNkUsRUFBTzJlLE1BQU1KLEVBQUtwakIsS0FBS0EsR0FBT29qQixFQUFLbnVCLEtBQUssU0FDeEMsSUFBSTR4QixFQUFVLElBQUkxc0IsV0FBVzZGLEdBQ3pCaEcsRUFBUyxFQVViLE9BVEE2c0IsRUFBUXZ2QixJQUFJdU4sRUFBT0EsT0FBUTdLLEdBQzNCQSxHQUFVLEVBQ1ZDLEVBQUt1QixRQUFRd29CLFFBQVFsSyxJQUNuQkEsRUFBS2pWLE9BQU9tZixRQUFTemQsSUFDbkJzZ0IsRUFBUXZ2QixJQUFJaVAsRUFBTXZNLEdBQ2xCQSxHQUFVdU0sRUFBS3JNLGVBSVoyc0IsR0FHWHpELEVBQUtudUIsS0FBUXRELEdBQ0osSUFBSXdJLFdBQVcsQ0FBQ3hJLEVBQUttMUIsV0FBVyxHQUFJbjFCLEVBQUttMUIsV0FBVyxHQUFJbjFCLEVBQUttMUIsV0FBVyxHQUFJbjFCLEVBQUttMUIsV0FBVyxLQUVyRzFELEVBQUtwTyxTQUFXLEUsVUFFRG9PLEc7Ozs7K0ZDeG1CZixJLEVBQUEsRUFBQWh5Qix1QkFBQSw4QixLQU1BQSxlQUFBLHVDLDJCQUVBLE1BQU1rTCxFQUFlRSxTQUFPRixhQUViLE1BQU02bUIsRUFDbkJ0cEIsY0FDRXBGLEtBQUtxUCxTQUFXLEVBQ2hCclAsS0FBS3N5QixvQkFDTHR5QixLQUFLdXlCLGNBQWdCLEtBQ3JCdnlCLEtBQUt3eUIsY0FBZ0IsS0FDckJ4eUIsS0FBS3l5QixrQkFBb0IsSUFBSUMsbUJBQWlCLFNBQzlDMXlCLEtBQUsyeUIsa0JBQW9CLElBQUlELG1CQUFpQixTQUM5QyxNQUFNLFFBQUNFLEdBQVdDLFVBQ2xCN3lCLEtBQUs4eUIsa0JBQWdDLE9BQVpGLEVBRXpCNXlCLEtBQUsreUIsZ0JBQ0wveUIsS0FBS2d6QixnQkFFTGh6QixLQUFLaXpCLGlCQUFtQixFQUN4Qmp6QixLQUFLa3pCLGlCQUFtQixFQUcxQm56QixPQUNFQyxLQUFLNkQsR0FBR2dFLEVBQWFrQixZQUFhL0ksS0FBS216QixNQUFNaDFCLEtBQUs2QixPQUNsREEsS0FBSzZELEdBQUdnRSxFQUFhdXJCLGVBQWdCcHpCLEtBQUtxekIsZ0JBQWdCbDFCLEtBQUs2QixPQUMvREEsS0FBSzZELEdBQUdnRSxFQUFheXJCLHFCQUFzQnR6QixLQUFLdXpCLGFBQWFwMUIsS0FBSzZCLE9BR3BFaUcsVUFDRWpHLEtBQUtxUCxVQUFZLEVBQ2pCclAsS0FBS3d6QixrQkFDTHh6QixLQUFLd3lCLGNBQWdCLEtBQ3JCeHlCLEtBQUt1eUIsY0FBZ0IsS0FDckJ2eUIsS0FBS3l5QixrQkFBa0J6c0IsUUFDdkJoRyxLQUFLMnlCLGtCQUFrQjNzQixRQUN2QmhHLEtBQUt5eUIsa0JBQW9CLEtBQ3pCenlCLEtBQUsyeUIsa0JBQW9CLEtBRzNCUSxRQUNFLE1BQU0sV0FBRTdyQixFQUFGLFdBQWNDLEdBQWV2SCxLQUFLaVAsU0FBU0MsWUFBWSxXQUM1RGxQLEtBQUtzeUIsa0JBQW9CdHlCLEtBQUt5ekIsWUFBWW5zQixFQUFZQyxHQUV2RHZILEtBQUswekIsWUFBWW5zQixHQUNqQnZILEtBQUsyekIsWUFBWXJzQixHQUduQmlzQixlQUVFdnpCLEtBQUtxUCxTQUFXLEVBQ2hCclAsS0FBS3d6QixrQkFHUEksT0FDRTV6QixLQUFLd3lCLGNBQWdCLEtBQ3JCeHlCLEtBQUt1eUIsY0FBZ0IsS0FDckJ2eUIsS0FBS3l5QixrQkFBa0J6c0IsUUFDdkJoRyxLQUFLMnlCLGtCQUFrQjNzQixRQUd6QnF0QixnQkFBaUI3eUIsR0FDZixJQUFJOGMsRUFFSixHQUFhLFVBQVQ5YyxFQUFrQixDQUNwQixNQUFNLFdBQUU4RyxHQUFldEgsS0FBS2lQLFNBQVNDLFlBQVksVUFDakRvTyxFQUFRaFcsTUFDSCxDQUNMLE1BQU0sV0FBRUMsR0FBZXZILEtBQUtpUCxTQUFTQyxZQUFZLFVBQ2pEb08sRUFBUS9WLEVBR1YsSUFBSXNzQixFQUFrQjd6QixLQUFLaVAsU0FBU0MsWUFBWSxxQkFDNUN2SSxFQUFTa3RCLEVBQWdCbnRCLFVBQVVsRyxHQUNsQ21HLElBQ0hBLEVBQVNrdEIsRUFBZ0JqdEIsYUFBYXBHLElBR3hDbUcsRUFBT0gsU0FBVzhXLEVBQU1oVSxLQUFLM0IsTUFDN0JoQixFQUFPNUcsS0FBT0MsS0FBSzh6QixpQkFBaUJ0ekIsRUFBTThjLEVBQU1oVSxNQUloRHRKLEtBQUtnQixLQUFLNkcsRUFBYWtzQixhQUFjdnpCLEdBR3ZDc3pCLGlCQUFrQnR6QixFQUFNOEksR0FDdEIsSUFBSTBxQixFQUFjLElBQUlwRixTQUNsQnFGLEVBQU90RixVQUFLc0YsT0FDWkMsRUFBT3ZGLFVBQUt1RixLQUFLLENBQUUxekIsT0FBTThJLEtBQU1BLElBR25DLE9BREEwcUIsRUFBWWpGLE1BQU1rRixFQUFNQyxHQUNqQkYsRUFHVFAsWUFBYW5zQixFQUFZQyxHQUN2QixJQUFLRCxFQUFXUCxRQUFRNUYsU0FBV29HLEVBQVdSLFFBQVE1RixPQUNwRCxPQUdGLElBQUlnekIsRUFBWTdsQixJQUNaOGxCLEVBQVk5bEIsSUFFWmhILEVBQVdQLFNBQVdPLEVBQVdQLFFBQVE1RixTQUMzQ2d6QixFQUFZN3NCLEVBQVdQLFFBQVEsR0FBRzJELEtBRWhDbkQsRUFBV1IsU0FBV1EsRUFBV1IsUUFBUTVGLFNBQzNDaXpCLEVBQVk3c0IsRUFBV1IsUUFBUSxHQUFHMkQsS0FHcEMxSyxLQUFLcVAsU0FBV3BFLEtBQUsrRSxJQUFJbWtCLEVBQVdDLEdBQ3BDcDBCLEtBQUtzeUIsb0JBR1BvQixZQUFhbnNCLEdBQ1gsTUFBTStWLEVBQVEvVixFQUVkLElBQUtBLEVBQVdSLFVBQVlRLEVBQVdSLFFBQVE1RixPQUM3QyxPQUdGLElBQUksUUFBQzRGLEdBQVd1VyxFQUNaMVMsR0FBWSxFQUVab3BCLEVBQWMsS0FDbEIsTUFBTUssRUFBYSxHQUNiakMsRUFBVSxDQUNkcnJCLFFBQVMsSUFHWCxLQUFPQSxFQUFRNUYsUUFBUSxDQUNyQixNQUFNbXpCLEVBQVl2dEIsRUFBUTNDLFNBRXBCLFdBQUV1SyxFQUFGLFFBQWNwQixHQUFZK21CLEVBQ2hDLElBQUt0MEIsS0FBS2d6QixjQUFnQnpsQixHQUFXQSxFQUFRakUsS0FBTSxDQUNqRDBxQixFQUFjaDBCLEtBQUs4ekIsaUJBQWlCLFFBQVN2bUIsRUFBUWpFLE1BQ3JEaUUsRUFBUWpFLEtBQU8sS0FDZnZDLEVBQVE5RixRQUFRcXpCLEdBQ1gvbUIsRUFBUUMsWUFDWHhOLEtBQUt1ekIsZUFFUCxNQUdGLElBTUlqb0IsRUFDQUQsRUFQQVgsRUFBTTRwQixFQUFVNXBCLElBQU0xSyxLQUFLcVAsVUFFYixJQUFkekUsSUFDRkEsRUFBV0YsWUFLVDRwQixFQUFVanBCLE1BRVpDLEdBREFELEVBQU1pcEIsRUFBVWpwQixJQUFNckwsS0FBS3FQLFVBQ2YzRSxZQUVWNHBCLEVBQVVocEIsTUFDWkQsRUFBTWlwQixFQUFVaHBCLElBQU1aLEVBQ3RCWSxFQUFNZ3BCLEVBQVVocEIsS0FHbEIsSUFBSWlwQixFQUFhLENBQ2Zua0IsT0FBUSxHQUNSN0UsS0FBTSxHQUVSNm1CLEVBQVFyckIsUUFBUTdGLEtBQUtxekIsR0FDckJBLEVBQVdua0IsT0FBT2xQLEtBQUtvekIsRUFBVTl1QixNQUNqQyt1QixFQUFXaHBCLE1BQVErb0IsRUFBVTl1QixLQUFLQyxXQUVsQyxJQUFJK3VCLEVBQWlCLEVBR25CQSxFQUZFenRCLEVBQVE1RixRQUFVLEVBQ0o0RixFQUFRLEdBQUcyRCxJQUFNMUssS0FBS3FQLFNBQ1gzRSxFQUV2QjJwQixFQUFXbHpCLFFBQVUsRUFDTmt6QixFQUFXQSxFQUFXbHpCLE9BQVMsR0FBRytLLFNBRWxDbE0sS0FBS3kwQixVQUFVMXBCLGtCQUdwQy9LLEtBQUtpekIsa0JBQW9CdUIsRUFFekJILEVBQVduekIsS0FBSyxDQUNkd0osTUFDQVksTUFDQUQsTUFDQTdGLEtBQU04dUIsRUFBVTl1QixLQUNoQitGLEtBQU0rb0IsRUFBVTl1QixLQUFLQyxXQUNyQmtKLGFBQ0F6QyxTQUFVc29CLEVBQ1YzQyxNQUFPLENBQ0xDLFVBQVcsRUFDWEMsVUFBV3BqQixFQUFhLEVBQUksRUFDNUJxakIsYUFBY3JqQixFQUFhLEVBQUksRUFDL0JzakIsY0FBZSxFQUNmQyxVQUFXdmpCLEVBQWEsRUFBSSxHQUU5QjlDLFVBQVduQixFQUNYbEssS0FBTSxVQUdKbU8sR0FDRjNPLEtBQUtnQixLQUFLNkcsRUFBYTZzQixvQkFBcUJycEIsR0FJaEQsSUFBSXNwQixFQUFXLElBQUkvRixTQUNuQixHQUFJeUYsRUFBV2x6QixPQUFRLENBQ3JCLE1BQU15ekIsRUFBT2pHLFVBQUtpRyxLQUFLLENBQ3JCL3RCLEdBQUl5VyxFQUFNaFUsS0FBS3pDLEdBQ2Zza0IsS0FBTXZnQixFQUNON0QsUUFBU3N0QixJQUVMUSxFQUFPbEcsVUFBS2tHLEtBQUt6QyxHQUN2QnVDLEVBQVM1RixNQUFNNkYsRUFBTUMsR0FFckI3MEIsS0FBSzgwQixjQUFjLFFBQVNILEdBRzlCLEdBQUlYLElBQ0ZoMEIsS0FBSzgwQixjQUFjLFFBQVNkLEdBRXhCanRCLEVBQVE1RixRQUdWLE9BREFtYyxFQUFNdlcsUUFBVUEsRUFDVC9HLEtBQUswekIsWUFBWXBXLEdBSTVCdGQsS0FBSyt5QixnQkFDTC95QixLQUFLZ0IsS0FBSzZHLEVBQWFrdEIsY0FBZSxTQUV0QyxNQUFNQyxFQUFhWCxFQUFXQSxFQUFXbHpCLE9BQVMsR0FDbERuQixLQUFLd3lCLGNBQWdCd0MsRUFBV3RxQixJQUFNc3FCLEVBQVc5b0IsU0FDakRvUixFQUFNdlcsUUFBVSxHQUNoQnVXLEVBQU1uYyxPQUFTLEVBR2pCd3lCLFlBQWFyVyxHQUNYLE1BQU0sUUFBQ3ZXLEdBQVd1VyxFQUNsQixJQUFJMVMsR0FBWSxFQUNaeXBCLEVBQWEsR0FFYkwsRUFBYyxLQUNsQixNQUFNNUIsRUFBVSxDQUNkcnJCLFFBQVMsSUFFWCxJQUFLQSxJQUFZQSxFQUFRNUYsT0FDdkIsT0FFRixJQUFJOHpCLEtBQ0osS0FBT2x1QixFQUFRNUYsUUFBUSxDQUNyQixJQUFJaU4sRUFBU3JILEVBQVEzQyxRQUNyQixNQUFNLEtBQUVvQixFQUFGLFFBQVErSCxHQUFZYSxFQUMxQixJQUFLcE8sS0FBS2d6QixjQUFnQnpsQixHQUFXQSxFQUFRakUsS0FBTSxDQUNqRDBxQixFQUFjaDBCLEtBQUs4ekIsaUJBQWlCLFFBQVN2bUIsRUFBUWpFLE1BQ3JEaUUsRUFBUWpFLEtBQU8sS0FDZnZDLEVBQVE5RixRQUFRbU4sR0FDWGIsRUFBUUMsWUFDWHhOLEtBQUt1ekIsZUFFUCxNQUdGLElBQUk3b0IsRUFBTTBELEVBQU8xRCxJQUFNMUssS0FBS3FQLFNBQzVCLE1BQU14RCxFQUFZbkIsRUFDYnVxQixJQUNIcnFCLEVBQVdGLEVBQ1h1cUIsTUFHRixJQUFJVCxFQUFpQixFQUduQkEsRUFERXgwQixLQUFLazFCLFVBQVVsb0IsdUJBQ0FoTixLQUFLazFCLFVBQVVsb0IsdUJBQ3ZCakcsRUFBUTVGLFFBQVUsRUFDWDRGLEVBQVEsR0FBRzJELElBQU0xSyxLQUFLcVAsU0FDWDNFLEVBRXZCMnBCLEVBQVdsekIsUUFBVSxFQUNOa3pCLEVBQVdBLEVBQVdsekIsT0FBUyxHQUFHK0ssU0FFbENsTSxLQUFLazFCLFVBQVVucUIsa0JBS3BDL0ssS0FBS2t6QixrQkFBb0JzQixFQUN6QixNQUFNVyxFQUFZLENBQ2hCenFCLE1BQ0FXLElBQUtYLEVBQ0xZLElBQUssRUFDTEMsS0FBTS9GLEVBQUtDLFdBQ1h5RyxTQUFVa0MsRUFBT2xDLFNBQVdrQyxFQUFPbEMsU0FBV3NvQixFQUM5QzNDLE1BQU8sQ0FDTEMsVUFBVyxFQUNYQyxVQUFXLEVBQ1hDLGFBQWMsRUFDZEMsY0FBZSxFQUNmQyxVQUFXLEdBRWJ2akIsWUFBWUEsRUFDWjlDLFlBQ0FyTCxLQUFNLFNBR1IsSUFBSSt6QixFQUFhLENBQ2Zua0IsT0FBUSxHQUNSN0UsS0FBTSxHQUVSZ3BCLEVBQVdua0IsT0FBT2xQLEtBQUtzRSxHQUN2Qit1QixFQUFXaHBCLE1BQVEvRixFQUFLQyxXQUV4QjJzQixFQUFRcnJCLFFBQVE3RixLQUFLcXpCLEdBRXJCRixFQUFXbnpCLEtBQUtpMEIsR0FHbEIsTUFBTVIsRUFBVyxJQUFJL0YsU0FFckIsR0FBSXlGLEVBQVdsekIsT0FBUSxDQUNyQixNQUFNeXpCLEVBQU9qRyxVQUFLaUcsS0FBSyxDQUNyQi90QixHQUFJeVcsRUFBTWhVLEtBQUt6QyxHQUNmc2tCLEtBQU12Z0IsRUFDTjdELFFBQVNzdEIsSUFFTFEsRUFBT2xHLFVBQUtrRyxLQUFLekMsR0FDdkJ1QyxFQUFTNUYsTUFBTTZGLEVBQU1DLEdBRXJCNzBCLEtBQUs4MEIsY0FBYyxRQUFTSCxHQUc5QixHQUFJWCxJQUNGaDBCLEtBQUs4MEIsY0FBYyxRQUFTZCxHQUN4Qmp0QixFQUFRNUYsUUFHVixPQURBbWMsRUFBTXZXLFFBQVVBLEVBQ1QvRyxLQUFLMnpCLFlBQVlyVyxHQUk1QnRkLEtBQUtnekIsZ0JBQ0xoekIsS0FBS2dCLEtBQUs2RyxFQUFha3RCLGNBQWUsUUFBU0osR0FFL0MsTUFBTUssRUFBYVgsRUFBV0EsRUFBV2x6QixPQUFTLEdBQ2xEbkIsS0FBS3d5QixjQUFnQndDLEVBQVd0cUIsSUFBTXNxQixFQUFXOW9CLFNBQ2pEb1IsRUFBTXZXLFFBQVUsR0FDaEJ1VyxFQUFNbmMsT0FBUyxFQUdqQjJ6QixjQUFldDBCLEVBQU00UCxHQUNuQixJQUFJeWpCLEVBQWtCN3pCLEtBQUtpUCxTQUFTQyxZQUFZLHFCQUM1Q3ZJLEVBQVNrdEIsRUFBZ0JudEIsVUFBVWxHLEdBQ2xDbUcsSUFDSEEsRUFBU2t0QixFQUFnQmp0QixhQUFhcEcsSUFHeENtRyxFQUFPbkIsS0FBS3RFLEtBQUtrUCxHQUduQmdsQixnQkFBaUIxcUIsRUFBS3dCLEdBQ3BCLE1BQU00RixFQUFPNGMsRUFBV2ppQixlQUFlek0sS0FBS3ExQixXQUFXenRCLGNBQ3ZELE1BQU8sQ0FDTDhDLE1BQ0FXLElBQUtYLEVBQ0xZLElBQUssRUFDTFksV0FDQTRGLE9BQ0F2RyxLQUFNdUcsRUFBS3JNLFdBQ1hvRyxVQUFXbkIsRUFDWGxLLEtBQU0sU0FJVixnQkFDRSxPQUFPUixLQUFLaVAsU0FBU0MsWUFBWSxVQUFVM0gsV0FBVytCLEtBRXhELGdCQUNFLE9BQU90SixLQUFLaVAsU0FBU0MsWUFBWSxVQUFVNUgsV0FBV2dDLEtBR3hELHNCQUF1QjFCLEdBQ3JCLE9BQXFCLElBQWpCQSxFQUNLLElBQUlsQyxXQUFXLENBQUMsRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLE1BQzNCLElBQWpCa0MsRUFDRixJQUFJbEMsV0FBVyxDQUFDLEdBQU0sRUFBTSxHQUFNLElBQU0sRUFBTSxHQUFNLEVBQU0sR0FBTSxNQUM3QyxJQUFqQmtDLEVBQ0YsSUFBSWxDLFdBQVcsQ0FBQyxFQUFNLElBQU0sRUFBTSxJQUFNLEdBQU0sSUFBTSxFQUFNLEdBQU0sR0FBTSxFQUFNLElBQU0sRUFBTSxNQUNyRSxJQUFqQmtDLEVBQ0YsSUFBSWxDLFdBQVcsQ0FBQyxFQUFNLElBQU0sRUFBTSxJQUFNLEdBQU0sSUFBTSxFQUFNLEdBQU0sR0FBTSxFQUFNLElBQU0sRUFBTSxJQUFNLEdBQU0sSUFBTSxFQUFNLEVBQU0sS0FDbkcsSUFBakJrQyxFQUNGLElBQUlsQyxXQUFXLENBQUMsRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxHQUFNLEdBQU0sRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLEdBQU0sSUFBTSxFQUFNLEtBQ3JILElBQWpCa0MsRUFDRixJQUFJbEMsV0FBVyxDQUFDLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxJQUFNLEVBQU0sR0FBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxFQUFNLElBQU0sRUFBTSxHQUFNLElBQU0sRUFBTSxFQUFNLElBQU0sRUFBTSxHQUFNLEVBQU0sTUFFeEssTSxVQXRZVWdwQixHOzs7OzhDQ1ZyQmh5QixFQUFPRCxRQUFVLENBQ2Y2NEIsUUFBU3oyQixzQkFBUSxvQ0FBaUJnRyxRQUdsQ2tELE9BQVFsSiwrQkFBUSw2Q0FBMEJnRyxRQUMxQzB3QixnQkFBaUIxMkIsd0NBQVEsc0RBQW1DZ0csUUFHNURndUIsUUFBU2gwQiwwQkFBUSx3Q0FBcUJnRyxRQUN0Q3lULEtBQU16Wix1QkFBUSxxQ0FBa0JnRyxRQUNoQzJULEtBQU0zWix1QkFBUSxxQ0FBa0JnRyxRQUdoQzJ3QixVQUFXMzJCLGdDQUFRLDhDQUEyQmdHLFFBQzlDNHdCLFlBQWE1MkIsa0NBQVEsZ0RBQTZCZ0csUUFDbEQ2d0IsYUFBYzcyQixtQ0FBUSxpREFBOEJnRyxRQUNwRDZ0QixpQkFBa0I3ekIsd0NBQVEsc0RBQW1DZ0csUUFDN0RzVyxlQUFnQnRjLGdDQUFRLDhDQUEyQnNjLGVBQ25ERCxlQUFnQnJjLGdDQUFRLDhDQUEyQnFjLGVBQ25EeUksaUJBQWtCOWtCLGtDQUFRLGdEQUE2QjhrQixpQkFDdkRPLGlCQUFrQnJsQixrQ0FBUSxnREFBNkJxbEIsaUJBR3ZEeVIsSUFBSzkyQix3QkFBUSxzQ0FBbUJnRyxRQUdoQ3lkLE9BQVF6akIsMkJBQVEseUNBQXNCZ0csUUFDdEMrcEIsT0FBUS92QiwyQkFBUSx5Q0FBc0JnRyxRQUd0Qyt3QixPQUFRLzJCLHFCQUFRLHlDQUFnQmdHLFU7Ozs7OENDNUJsQ3hILE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUMzQ21CLE9BQU9BLElBR1RuQixFQUFRb0ksUUFBVSxTQUFVZ3hCLEdBRzFCLElBRkEsSUFBSUMsRUFBYyxFQUVUQyxFQUFPbDBCLFVBQVVWLE9BQVE2MEIsRUFBU3Z6QixNQUFNc3pCLEVBQU8sRUFBSUEsRUFBTyxFQUFJLEdBQUlFLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDaEdELEVBQU9DLEVBQU8sR0FBS3AwQixVQUFVbzBCLEdBRy9CLElBQUlDLEtBQ0FDLEtBQ0FDLFNBRUosSUFDRSxJQUFLLElBQTJDQyxFQUF2Q0MsRUFBWU4sRUFBT3Q0QixPQUFPNjRCLGNBQXNCTCxHQUE2QkcsRUFBUUMsRUFBVXJxQixRQUFROGhCLE1BQU9tSSxLQUFrQyxDQUN2SixJQUFJM3pCLEVBQU04ekIsRUFBTXo0QixNQUVoQms0QixHQUFldnpCLEVBQUlwQixRQUVyQixNQUFPbUMsR0FDUDZ5QixLQUNBQyxFQUFpQjl5QixFQVJuQixRQVVFLEtBQ080eUIsR0FBNkJJLEVBQVVFLFFBQzFDRixFQUFVRSxTQUZkLFFBS0UsR0FBSUwsRUFDRixNQUFNQyxHQUtaLElBQUlqYyxFQUFTLElBQUkwYixFQUFrQkMsR0FDL0J2d0IsRUFBUyxFQUNUa3hCLEtBQ0FDLEtBQ0FDLFNBRUosSUFDRSxJQUFLLElBQTRDQyxFQUF4Q0MsRUFBYWIsRUFBT3Q0QixPQUFPNjRCLGNBQXVCRSxHQUE4QkcsRUFBU0MsRUFBVzVxQixRQUFROGhCLE1BQU8wSSxLQUFtQyxDQUM3SixJQUFJSyxFQUFPRixFQUFPaDVCLE1BRWxCdWMsRUFBT3RYLElBQUlpMEIsRUFBTXZ4QixHQUNqQkEsR0FBVXV4QixFQUFLMzFCLFFBRWpCLE1BQU9tQyxHQUNQb3pCLEtBQ0FDLEVBQWtCcnpCLEVBVHBCLFFBV0UsS0FDT216QixHQUE4QkksRUFBV0wsUUFDNUNLLEVBQVdMLFNBRmYsUUFLRSxHQUFJRSxFQUNGLE1BQU1DLEdBS1osT0FBT3hjLEk7Ozs7OENDaEVULElBSWdDNGMsRUFGNUJDLEdBRTRCRCxFQUpsQmw0QixpQkFBUSxxRUFJK0JrNEIsRUFBSWg1QixXQUFhZzVCLEVBQU0sQ0FBRWx5QixRQUFTa3lCLEdBRXZGcjZCLEVBQU9ELFFBQVV1NkIsRUFBU255QixTOzs7OytGQ1IxQixNQUFNb25CLEVBQWdCLENBQ3BCTyxZQUFhLGVBQ2J3QixrQkFBbUIsb0JBQ25CVCxnQkFBaUIsa0JBQ2pCSixhQUFjLGdCQUdWcmxCLEVBQWUsQ0FDbkJrUyxZQUFhLGNBQ2JVLGVBQWdCLGlCQUNoQk8sWUFBYSxjQUNiK0MsZ0JBQWlCLGtCQUNqQlksc0JBQXVCLHdCQUN2Qlgsc0JBQXVCLHdCQUN2Qi9CLFdBQVksY0FHUnJVLEVBQWUsQ0FDbkJ1ckIsZUFBZ0IsaUJBQ2hCcnFCLFlBQWEsY0FDYmdzQixjQUFlLGdCQUNma0MsWUFBYSxjQUNibEQsYUFBYyxlQUNkVCxxQkFBc0IsdUJBQ3RCb0Isb0JBQXFCLHVCQUdqQndDLEVBQWEsQ0FDakJDLGtCQUFtQixxQkFJZkMsRUFBYSxDQUNqQkMsb0JBQXFCLHVCQU9qQkMsRUFBWWo2QixPQUFPK04sT0FBTyxHQUFJNmdCLEVBQWVua0IsRUFBY0QsRUFBY3F2QixFQUFZRSxHQUVyRkcsRUFBbUIsR0FDbkJDLEVBQW1CLEdBRXpCLElBQUssSUFBSXQ1QixLQUFPbzVCLEVBQ1ZBLEVBQVU5NEIsZUFBZU4sSUFDM0JxNUIsRUFBaUJyMkIsS0FBS28yQixFQUFVcDVCLElBSXBDLElBQUssSUFBSUEsS0FBT281QixFQUNWQSxFQUFVOTRCLGVBQWVOLElBQzNCczVCLEVBQWlCdDJCLEtBQUtvMkIsRUFBVXA1QixJLFVBSXJCLENBQ2JvNUIsWUFDQUYsYUFDQXZ2QixlQUNBQyxlQUNBb3ZCLGFBQ0FqTCxnQkFDQXNMLG1CQUNBQyxtQkFDQUMsYUE5Qm1CLENBQ25CQyxjQUFlLGdCQUNmQyxVQUFXLGU7Ozs7K0ZDdENvQkMsRUFBcEJBLGtCQUFvQkEsQ0FDL0JDLEdBQUksS0FDSkMsS0FBTSxPQUNOQyxJQUFLLE1BQ0xDLEtBQU0sT0FDTkMsUUFBUyxZOzs7OytGQ0xYLEksT0FBQXQ3Qiw0QkFBQSxnRCwyQkFDQSxFQUFBQSxlQUFBLHVDQUVBLE1BQU11N0IsRUFBbUIsUyxVQUV6QixNQUNFOXlCLFlBQWEreUIsRUFBZ0IsSUFDM0JuNEIsS0FBS280QixTQUFXLElBQUl0NEIsZUFDcEJFLEtBQUtxNEIsYUFBZSxHQUNwQnI0QixLQUFLczRCLFFBQVUsR0FDZnQ0QixLQUFLdTRCLFdBQ0x2NEIsS0FBSytiLFVBQVksSUFBSXlaLFVBQ3JCeDFCLEtBQUttNEIsY0FBZ0JBLEVBQ3JCbjRCLEtBQUt3NEIsT0FBUyxHQVNoQnRwQixZQUFhdXBCLEdBRVgsT0FEaUJ6NEIsS0FBS3E0QixhQUFhSSxJQUsxQixLQVNYQyxhQUFjRCxLQUFRcDVCLEdBQ3BCLEdBQUlXLEtBQUtzNEIsUUFBUUcsR0FBTSxDQUNyQixNQUFNRSxFQUFjLElBQUkzNEIsS0FBS3M0QixRQUFRRyxNQUFRcDVCLEdBSzdDLE9BSkFXLEtBQUtxNEIsYUFBYUksR0FBT0UsRUFDckJBLEVBQVk1NEIsTUFDZDQ0QixFQUFZNTRCLE9BRVA0NEIsRUFFUCxNQUFNLElBQUlyM0IsU0FBU20zQixpQkFRdkIxNEIsS0FBTWlkLEdBQ0osSUFBSWhkLEtBQUt1NEIsUUFBVCxDQUdBLElBQUssSUFBSUUsS0FBT3o0QixLQUFLczRCLFFBRWZ0NEIsS0FBS3M0QixRQUFROTVCLGVBQWVpNkIsS0FBU3o0QixLQUFLcTRCLGFBQWFJLElBQ3pEejRCLEtBQUswNEIsYUFBYUQsRUFBS3piLEdBRzNCaGQsS0FBS3U0QixZQVFQSyxTQUFVSCxFQUFLSSxHQUNiLE1BQU1yM0IsRUFBVXhCLEtBQUtvNEIsU0FDZlUsRUFBbUI5NEIsS0FBSys0QixvQkFBb0I1NkIsS0FBSzZCLE1BQ2pEZzVCLEVBQU9oNUIsS0ErSGIsT0FOQUEsS0FBS3M0QixRQUFRRyxHQXhISSxjQUFjSSxFQUM3Qnp6QixlQUFnQi9GLEdBQ2Q4SCxTQUFTOUgsR0FDVFcsS0FBSzJELFVBQVksR0FDakIzRCxLQUFLaTVCLGNBQWdCLEdBQ3JCajVCLEtBQUtvSCxJQUFNcXhCLEVBQ1h6NEIsS0FBS2lQLFNBQVcrcEIsRUFHbEJuMUIsR0FBSXExQixFQUFhQyxHQVVmLE9BVEFMLEVBQWlCSSxHQUVibDVCLEtBQUsyRCxVQUFVdTFCLEdBQ2pCbDVCLEtBQUsyRCxVQUFVdTFCLEdBQWFoNEIsS0FBS2k0QixHQUVqQ241QixLQUFLMkQsVUFBVXUxQixHQUFlLENBQUNDLEdBR2pDMzNCLEVBQVFxQyxNQUFNcTFCLElBQWNoQixJQUFtQk8sSUFBT1UsR0FDL0MzM0IsRUFBUXFDLEdBQUdxMUIsRUFBYUMsR0FRakNyd0IsT0FBUW93QixFQUFhQyxHQUNuQkwsRUFBaUJJLEdBQ2JGLEVBQUtSLE9BQU9VLEdBQ2RGLEVBQUtSLE9BQU9VLEdBQWFoNEIsS0FBS2k0QixHQUU5QkgsRUFBS1IsT0FBT1UsR0FBZSxDQUFDQyxHQUloQ3AxQixLQUFNbTFCLEVBQWFDLEdBVWpCLE9BVEFMLEVBQWlCSSxHQUVibDVCLEtBQUtpNUIsY0FBY0MsR0FDckJsNUIsS0FBS2k1QixjQUFjQyxHQUFhaDRCLEtBQUtpNEIsR0FFckNuNUIsS0FBS2k1QixjQUFjQyxHQUFlLENBQUNDLEdBR3JDMzNCLEVBQVF1QyxRQUFRbTFCLElBQWNoQixJQUFtQk8sSUFBT1UsR0FDakQzM0IsRUFBUXVDLEtBQUttMUIsRUFBYUMsR0FHbkNuNEIsS0FBTWs0QixLQUFnQjc1QixHQUNwQnk1QixFQUFpQkksR0FFakIsTUFBTUUsRUFBYUosRUFBS1IsT0FBU1EsRUFBS1IsT0FBT1UsR0FBZSxLQUU1RCxHQUFJRSxFQUNGLElBQUssSUFBSXo4QixFQUFJLEVBQUcrRyxFQUFNMDFCLEVBQVdqNEIsT0FBUXhFLEVBQUkrRyxFQUFLL0csS0FBSyxFQUNwQ3k4QixFQUFXejhCLE1BSWhDLE9BQU82RSxFQUFRUixLQUFLazRCLEtBQWdCNzVCLEdBUXRDZzZCLE9BQVFaLEVBQUtTLEtBQWdCNzVCLEdBRzNCLE9BRkF5NUIsRUFBaUJJLEdBRVYxM0IsRUFBUVIsUUFBUWs0QixJQUFjaEIsSUFBbUJPLE9BQVVwNUIsR0FHcEVrRixJQUFLMjBCLEVBQWFDLEdBRWhCLE9BREFMLEVBQWlCSSxHQUNWMTNCLEVBQVErQyxJQUFJMjBCLEVBQWFDLEdBR2xDRyxrQkFDRSxNQUFNQyxFQUFTbDhCLE9BQU9rQixVQUFVQyxlQUFlTCxLQUFLNkIsS0FBSzJELFdBRXpELElBQUssSUFBSXUxQixLQUFlbDVCLEtBQUsyRCxVQUMzQixHQUFJNDFCLEVBQU9MLEdBQWMsQ0FDdkIsTUFBTU0sRUFBWXg1QixLQUFLMkQsVUFBVXUxQixJQUFnQixHQUNqRCxJQUFLLElBQUl2OEIsRUFBSSxFQUFHQSxFQUFJNjhCLEVBQVVyNEIsT0FBUXhFLElBQUssQ0FDekMsTUFBTXc4QixFQUFXSyxFQUFVNzhCLEdBQzNCNkUsRUFBUStDLElBQUkyMEIsRUFBYUMsR0FDekIzM0IsRUFBUStDLE9BQU8yMEIsSUFBY2hCLElBQW1CTyxJQUFPVSxJQUs3RCxJQUFLLElBQUlELEtBQWVsNUIsS0FBS2k1QixjQUMzQixHQUFJTSxFQUFPTCxHQUFjLENBQ3ZCLE1BQU1NLEVBQVl4NUIsS0FBS2k1QixjQUFjQyxJQUFnQixHQUNyRCxJQUFLLElBQUl2OEIsRUFBSSxFQUFHQSxFQUFJNjhCLEVBQVVyNEIsT0FBUXhFLElBQUssQ0FDekMsTUFBTXc4QixFQUFXSyxFQUFVNzhCLEdBQzNCNkUsRUFBUStDLElBQUkyMEIsRUFBYUMsR0FDekIzM0IsRUFBUStDLE9BQU8yMEIsSUFBY2hCLElBQW1CTyxJQUFPVSxLQVMvRGx6QixVQU9FLEdBTEFqRyxLQUFLczVCLGtCQUNMdDVCLEtBQUsyRCxVQUFZLFVBR1ZxMUIsRUFBS1gsYUFBYUksR0FDckJ0eEIsTUFBTWxCLFFBQ1IsT0FBT2tCLE1BQU1sQixZQVVaLElBQUk1RyxJQUNGVyxLQUFLMDRCLGFBQWFELEtBQVFwNUIsR0FPckNvNkIsbUJBQ0VwOEIsT0FBT29ILEtBQUt6RSxLQUFLcTRCLGNBQWM5SSxRQUFTa0osSUFDbEN6NEIsS0FBS3E0QixhQUFhSSxHQUFLeHlCLFNBQ3pCakcsS0FBS3E0QixhQUFhSSxHQUFLeHlCLFlBUTdCQSxVQUNFakcsS0FBS280QixTQUFXLEtBQ2hCcDRCLEtBQUttNEIsY0FBZ0IsR0FDckJuNEIsS0FBS3M0QixRQUFVLEtBQ2Z0NEIsS0FBS2lQLFNBQVcsS0FDaEJqUCxLQUFLdzRCLE9BQVMsS0FDZHg0QixLQUFLeTVCLG1CQVFQVixvQkFBcUJHLEdBQ25CLElBQUtsNUIsS0FBS200QixjQUFjOWEsUUFBUTZiLEdBQWUsRUFDN0MsTUFBTSxJQUFJNTNCLG9DQUFvQzQzQixROzs7OzhDQzdPcEQsSSxtREFDQSxNQUFNekIsSSxFQUROOTZCLDRCQUFBLCtDLDRCQUNxQm9MLFFBQU8wdkIsYSxVQUM1QixNQUNJcnlCLFlBQVk0WCxHQUNSaGQsS0FBS21pQixZQUFjbkYsRUFBT3VOLFlBQzFCdnFCLEtBQUswNUIsYUFBZTFjLEVBQU8yYyxhQUMzQjM1QixLQUFLOUIsSUFBTThlLEVBQU85ZSxJQUNsQjhCLEtBQUtzaEIsR0FBS3RFLEVBQU9zRSxHQUNqQnRoQixLQUFLb2hCLE9BQVNwRSxFQUFPb0UsT0FFckJwaEIsS0FBSzQ1QixPQUFVaDdCLE9BQU9nN0IsUUFBVWg3QixPQUFPaTdCLFNBRzNDOTVCLE9BQ0lDLEtBQUs2RCxHQUFHNHpCLEVBQWFDLGNBQWUxM0IsS0FBSzg1QixRQUFRMzdCLEtBQUs2QixPQUcxRDg1QixVQUNROTVCLEtBQUsrNUIsT0FPTC81QixLQUFLZzZCLGNBTk9oNkIsS0FBSzQ1QixPQUFPSyxPQUFPQyxVQUFVLE1BQU9sNkIsS0FBSzlCLElBQUlrUyxPQUFRLENBQUVsVCxLQUFNLGNBQW9CLENBQUMsVUFBVyxZQUNuRzZ2QixLQUFLN3VCLElBQ1A4QixLQUFLKzVCLE9BQVM3N0IsRUFDZDhCLEtBQUtnNkIsZ0JBT2pCQSxjQUNJLElBQUl6UCxFQUFjdnFCLEtBQUtpUCxTQUFTQyxZQUFZbFAsS0FBS21pQixhQUM3Q3dYLEVBQWUzNUIsS0FBS2lQLFNBQVNDLFlBQVlsUCxLQUFLMDVCLGNBQzlDbDBCLEVBQU8ra0IsRUFBWW5tQixRQUNwQm9CLEdBQ0N4RixLQUFLNDVCLE9BQU9LLE9BQU9FLFFBQVEsQ0FBRWo5QixLQUFNLFVBQVdva0IsR0FBSXRoQixLQUFLc2hCLEdBQUdsUixRQUFVcFEsS0FBSys1QixPQUFRdjBCLEdBQU11bkIsS0FBS3FOLElBQ3hGVCxFQUFhejRCLEtBQUssSUFBSXdFLFdBQVcwMEIsSUFDakNwNkIsS0FBS2dCLEtBQUt5MkIsRUFBYUUsV0FDdkIzM0IsS0FBS2c2QixZQUFZeDBCLFE7Ozs7K0ZDckNqQyxNQUFNNjBCLEVBQU0sV0FDVixNQUFNcnBCLEVBQU0sSUFBSWtJLFlBQVksR0FFNUIsT0FEQyxJQUFJL0ksU0FBU2EsR0FBTXNwQixTQUFTLEVBQUcsUUFDSSxNQUE1QixJQUFJQyxXQUFXdnBCLEdBQU0sR0FIbkIsRyxVQU1HcXBCLEc7Ozs7K0ZDTmYsTUFBTUEsRUFBTSxXQUNWLE1BQU1ycEIsRUFBTSxJQUFJa0ksWUFBWSxHQUU1QixPQURDLElBQUkvSSxTQUFTYSxHQUFNc3BCLFNBQVMsRUFBRyxRQUNJLE1BQTVCLElBQUlDLFdBQVd2cEIsR0FBTSxHQUhuQixHQU1ONmhCLEVBQVUsQ0FDZCxhQUNFLElBQUlwMUIsRUFBSW8xQixFQUFRMkgsR0FDaEIsT0FBTy84QixFQUFFZzlCLEtBQU8sS0FBT2g5QixFQUFFaTlCLFNBQVcsU0FBVyxVQUVqRCxjQUNFLElBQUlDLEVBQUt6ZCxVQUFVRCxVQUFVRSxjQUN6QnlkLEVBQU0sQ0FDUkMsR0FBSSwyQkFDSkMsT0FBUSxvQkFDUkMsT0FBUSxtQkFDUkMsTUFBTyxpQkFDUEMsT0FBUSw2QkFFVixNQUFPLEdBQUd2N0IsT0FBT3JDLE9BQU9vSCxLQUFLbTJCLEdBQUt6c0IsT0FBT2pRLEdBQU8wOEIsRUFBSTE4QixHQUFLb3NCLEtBQUtxUSxLQUFNLElBRXRFLFNBQ0UsSUFBSUEsRUFBS3pkLFVBQVVELFVBQ2ZpZSxFQUFpQixvQkFBb0I1USxLQUFLcVEsR0FDMUNRLEVBQVksZ0JBQWdCN1EsS0FBS3FRLElBQU9PLEVBQ3hDRSxFQUFZLGNBQWM5USxLQUFLcVEsR0FDL0JVLEVBQVksY0FBYy9RLEtBQUtxUSxHQUMvQkQsRUFBVyxvQkFBb0JwUSxLQUFLcVEsSUFBUVMsSUFBYyxhQUFhOVEsS0FBS3FRLElBQVNVLEdBQWEsYUFBYS9RLEtBQUtxUSxHQUNwSFcsRUFBVSxhQUFhaFIsS0FBS3FRLEtBQVFELEVBRXhDLE1BQU8sQ0FDTEEsV0FDQVksVUFDQUYsWUFDQVgsTUFMVWEsSUFBWUYsSUFBY0QsRUFNcENBLFlBQ0FELGlCQUNBRyxjQUlKLFdBQ0UsT0FBT2hCLEksVUFJSXhILEc7Ozs7K0ZDL0NmLE1BQU1yYSxFQUNKLGNBQWVsSixHQUNiLE1BQU1pc0IsRUFBTSxHQUNOQyxFQUFRbHNCLEVBQ2QsSUFBSTNTLEVBQUksRUFDUixNQUFNd0UsRUFBU21PLEVBQVduTyxPQUUxQixLQUFPeEUsRUFBSXdFLEdBQ1QsR0FBSXE2QixFQUFNNytCLEdBQUssSUFDYjQrQixFQUFJcjZCLEtBQUtLLE9BQU9rNkIsYUFBYUQsRUFBTTcrQixPQUNqQ0EsTUFGSixDQUlPLEdBQUk2K0IsRUFBTTcrQixHQUFLLFVBRWYsR0FBSTYrQixFQUFNNytCLEdBQUssS0FDcEIsR0FBSTZiLEVBQUtrakIsbUJBQW1CRixFQUFPNytCLEVBQUcsR0FBSSxDQUN4QyxNQUFNZy9CLEdBQW1CLEdBQVhILEVBQU03K0IsS0FBYyxFQUFvQixHQUFmNitCLEVBQU03K0IsRUFBSSxHQUNqRCxHQUFJZy9CLEdBQVEsSUFBTSxDQUNoQkosRUFBSXI2QixLQUFLSyxPQUFPazZCLGFBQW9CLE1BQVBFLElBQzdCaC9CLEdBQUssRUFDTCxnQkFHQyxHQUFJNitCLEVBQU03K0IsR0FBSyxLQUNwQixHQUFJNmIsRUFBS2tqQixtQkFBbUJGLEVBQU83K0IsRUFBRyxHQUFJLENBQ3hDLE1BQU1nL0IsR0FBbUIsR0FBWEgsRUFBTTcrQixLQUFhLElBQXFCLEdBQWY2K0IsRUFBTTcrQixFQUFJLEtBQWMsRUFBbUIsR0FBZjYrQixFQUFNNytCLEVBQUksR0FDN0UsR0FBSWcvQixHQUFRLE1BQTZCLFFBQVosTUFBUEEsR0FBMkIsQ0FDL0NKLEVBQUlyNkIsS0FBS0ssT0FBT2s2QixhQUFvQixNQUFQRSxJQUM3QmgvQixHQUFLLEVBQ0wsZ0JBR0MsR0FBSTYrQixFQUFNNytCLEdBQUssS0FDaEI2YixFQUFLa2pCLG1CQUFtQkYsRUFBTzcrQixFQUFHLEdBQUksQ0FDeEMsSUFBSWcvQixHQUFtQixFQUFYSCxFQUFNNytCLEtBQWEsSUFBcUIsR0FBZjYrQixFQUFNNytCLEVBQUksS0FBYyxJQUNuQyxHQUFmNitCLEVBQU03K0IsRUFBSSxLQUFjLEVBQW9CLEdBQWY2K0IsRUFBTTcrQixFQUFJLEdBQ2xELEdBQUlnL0IsRUFBTyxPQUFXQSxFQUFPLFFBQVUsQ0FDckNBLEdBQVEsTUFDUkosRUFBSXI2QixLQUFLSyxPQUFPazZCLGFBQWNFLElBQVMsR0FBTSxRQUM3Q0osRUFBSXI2QixLQUFLSyxPQUFPazZCLGFBQXFCLEtBQVBFLEVBQWdCLFFBQzlDaC9CLEdBQUssRUFDTCxVQUlONCtCLEVBQUlyNkIsS0FBS0ssT0FBT2s2QixhQUFhLFVBQzNCOStCLEVBR0osT0FBTzQrQixFQUFJSyxLQUFLLElBR2xCLDBCQUEyQnRzQixFQUFZbkosRUFBTzAxQixHQUM1QyxJQUFJdjJCLEVBQVFnSyxFQUNaLEdBQUluSixFQUFRMDFCLEVBQWN2MkIsRUFBTW5FLE9BQVEsQ0FDdEMsS0FBTzA2QixLQUNMLEdBQWdDLE1BQVYsSUFBakJ2MkIsSUFBUWEsSUFDWCxPQUFPLEVBR1gsT0FBTyxFQUVQLFUsVUFLU3FTLEc7Ozs7K0ZDbkVmLE1BQU1zakIsRUFBa0IvRSxJQUN0QixJQUFLLElBQUk3NEIsS0FBTzY0QixFQUNkLEdBQUlBLEVBQUl2NEIsZUFBZU4sSUFDSixPQUFiNjRCLEVBQUk3NEIsR0FDTixPQUFPLEVBSWIsT0FBTyxHQUdNLE1BQU1zM0IsRUFDbkJwd0IsY0FDRXBGLEtBQUsrN0IsU0FBVyxLQUNoQi83QixLQUFLa00sU0FBVyxLQUVoQmxNLEtBQUtvYSxTQUFXLEtBQ2hCcGEsS0FBS3FHLE1BQVEsQ0FDWHNCLE1BQU8sS0FDUDhOLE1BQU8sS0FDUEMsT0FBUSxLQUNSYSxRQUFTLEtBQ1RDLE1BQU8sS0FDUG5NLFVBQVcsQ0FDVEMsT0FBT0EsRUFDUCtKLElBQUssR0FDTEUsUUFBUyxLQUNUQyxRQUFTLEtBRVhrQyxhQUFjLEtBQ2RDLFNBQVUsQ0FDUmxCLE1BQU8sRUFDUEMsT0FBUSxJQUlaMVYsS0FBS3FhLFNBQVcsS0FFaEJyYSxLQUFLc0csTUFBUSxDQUNYcUIsTUFBTyxLQUNQMFUsV0FBWSxLQUNaRSxnQkFBaUIsS0FDakIzVSxhQUFjLE1BSWxCbzBCLGFBQ0UsT0FBT3hHLEVBQVV5RyxnQkFBZ0JqOEIsT0FBU3cxQixFQUFVMEcsYUFBYWw4QixPQUFTdzFCLEVBQVUyRyxhQUFhbjhCLE1BR25HLHVCQUF3QitiLEdBQ3RCLE9BQU8rZixFQUFlL2YsR0FHeEIsb0JBQXFCQSxHQUNuQixPQUFLQSxFQUFVM0IsVUFJUjBoQixFQUFlL2YsRUFBVTFWLE9BR2xDLG9CQUFxQjBWLEdBQ25CLE9BQUtBLEVBQVUxQixVQUlSeWhCLEVBQWUvZixFQUFVMVYsUSxVQXhEZm12QixHOzs7OytGQ1hOLE1BQU1DLEVBQ25CcndCLFlBQWF3VyxHQUNYLElBQUl3Z0IsRUFBVzNHLEVBQVk0RyxnQkFFM0IsSUFBS3pnQixHQUFpRCxvQkFBekN2ZSxPQUFPa0IsVUFBVStnQixTQUFTeGlCLEtBQUs4ZSxHQUMxQyxPQUFPd2dCLEVBRVQsSUFBSWh1QixFQUFTL1EsT0FBTytOLE9BQU8sR0FBSWd4QixFQUFVeGdCLEdBRXpDdmUsT0FBT2kvQixRQUFRbHVCLEdBQVFtaEIsUUFBUSxFQUFFaEwsRUFBR2dZLE1BQ2xDdjhCLEtBQUt1a0IsR0FBS2dZLElBSWQsdUJBQ0UsTUFBTyxDQUNMN3hCLElBQUssS0FDTFcsSUFBSyxLQUNMYSxTQUFVLEtBQ1ZoSSxTQUFVLEtBQ1ZzNEIsT0FBT0EsRUFDUDN3QixVQUFXLE8sVUFyQkk0cEIsRzs7Ozt5R0NBTixNQUVYcndCLFlBQWE1RSxHQUNUUixLQUFLeThCLE1BQVFqOEIsRUFDYlIsS0FBS3lxQixNQUFRLEdBQ2J6cUIsS0FBSzA4QixxQkFBdUIsRUFHaEMsV0FDSSxPQUFPMThCLEtBQUt5OEIsTUFHaEIsYUFDSSxPQUFPejhCLEtBQUt5cUIsTUFBTXRwQixPQUd0Qnc3QixVQUNJLE9BQTZCLElBQXRCMzhCLEtBQUt5cUIsTUFBTXRwQixPQUd0QjZFLFFBQ0loRyxLQUFLeXFCLE1BQVEsR0FDYnpxQixLQUFLMDhCLHFCQUF1QixFQUdoQ0UsNEJBQTZCQyxHQUN6QixJQUFJNTRCLEVBQU9qRSxLQUFLeXFCLE1BQ2hCLEdBQW9CLElBQWhCeG1CLEVBQUs5QyxPQUNMLE9BQVEsRUFFWixJQUFJMjdCLEVBQU83NEIsRUFBSzlDLE9BQVMsRUFDckI0N0IsRUFBTSxFQUNOQyxFQUFTLEVBQ1RDLEVBQVNILEVBRVRJLEVBQU0sRUFFVixHQUFJTCxFQUFXNTRCLEVBQUssR0FBRzRILFVBRW5CLE9BRE8sRUFJWCxLQUFPbXhCLEdBQVVDLEdBQVEsQ0FFckIsSUFEQUYsRUFBTUMsRUFBUy94QixLQUFLQyxPQUFPK3hCLEVBQVNELEdBQVUsTUFDbENGLEdBQVNELEVBQVc1NEIsRUFBSzg0QixHQUFLL0gsV0FBV25wQixXQUN6Q2d4QixFQUFXNTRCLEVBQUs4NEIsRUFBTSxHQUFHbHhCLFVBQWEsQ0FDOUNxeEIsRUFBTUgsRUFDTixNQUNPOTRCLEVBQUs4NEIsR0FBS2x4QixVQUFZZ3hCLEVBQzdCRyxFQUFTRCxFQUFNLEVBRWZFLEVBQVNGLEVBQU0sRUFHdkIsT0FBT0csRUFHWEMsMkJBQTRCTixHQUN4QixPQUFPNzhCLEtBQUs0OEIsNEJBQTRCQyxHQUFZLEVBR3hEeE8sT0FBUStPLEdBQ0osSUFBSW41QixFQUFPakUsS0FBS3lxQixNQUNaNFMsRUFBZ0JyOUIsS0FBSzA4QixvQkFDckJZLEVBQVksR0FFTyxJQUFuQkQsR0FBd0JBLEVBQWdCcDVCLEVBQUs5QyxRQUMxQ2k4QixFQUFRRyxnQkFBa0J0NUIsRUFBS281QixHQUFlckksV0FBV25wQixZQUN2RHd4QixJQUFrQnA1QixFQUFLOUMsT0FBUyxHQUM3Qms4QixFQUFnQnA1QixFQUFLOUMsT0FBUyxHQUMzQmk4QixFQUFRRyxlQUFpQnQ1QixFQUFLbzVCLEVBQWdCLEdBQUdFLGdCQUM1REQsRUFBWUQsRUFBZ0IsRUFFeEJwNUIsRUFBSzlDLE9BQVMsSUFDZG04QixFQUFZdDlCLEtBQUs0OEIsNEJBQTRCUSxFQUFRRyxnQkFBa0IsR0FJL0V2OUIsS0FBSzA4QixvQkFBc0JZLEVBQzNCdDlCLEtBQUt5cUIsTUFBTXBlLE9BQU9peEIsRUFBVyxFQUFHRixHQUdwQ0kscUJBQXNCWCxHQUNsQixJQUFJSyxFQUFNbDlCLEtBQUs0OEIsNEJBQTRCQyxHQUMzQyxPQUFJSyxHQUFPLEVBQ0FsOUIsS0FBS3lxQixNQUFNeVMsR0FFWCxLQUlmTyxvQkFBcUJaLEdBQ2pCLElBQUlPLEVBQVVwOUIsS0FBS3c5QixxQkFBcUJYLEdBQ3hDLE9BQWdCLE9BQVpPLEVBQ09BLEVBQVFwSSxXQUVSLEtBSWYwSSxpQkFBa0JiLEdBQ2QsSUFBSWMsRUFBYTM5QixLQUFLNDhCLDRCQUE0QkMsR0FDOUNlLEVBQXFCNTlCLEtBQUt5cUIsTUFBTWtULEdBQVlDLG1CQUNoRCxLQUFxQyxJQUE5QkEsRUFBbUJ6OEIsUUFBZ0J3OEIsRUFBYSxHQUNuREEsSUFDQUMsRUFBcUI1OUIsS0FBS3lxQixNQUFNa1QsR0FBWUMsbUJBRWhELE9BQUlBLEVBQW1CejhCLE9BQVMsRUFDckJ5OEIsRUFBbUJBLEVBQW1CejhCLE9BQVMsR0FFL0MsUTs7Ozt5R0M5R0osTUFDWGlFLGNBQ0lwRixLQUFLNjlCLFVBQVksRUFDakI3OUIsS0FBSzg5QixRQUFVLEVBQ2Y5OUIsS0FBSys5QixVQUFZLEVBQ2pCLzlCLEtBQUtnK0IsUUFBVSxFQUNmaCtCLEtBQUt1OUIsZ0JBQWtCLEVBQ3ZCdjlCLEtBQUtpK0IsY0FBZ0IsRUFDckJqK0IsS0FBSzQ5QixtQkFBcUIsR0FDMUI1OUIsS0FBS3VLLFlBQWMsS0FDbkJ2SyxLQUFLZzFCLFdBQWEsS0FHdEJrSixPQUFROXZCLEdBQ0pBLEVBQU9vdUIsU0FDUHg4QixLQUFLNDlCLG1CQUFtQjE4QixLQUFLa04sTTs7OztpR0NmeEIrTSxlQUFOLE1BQ0wvVixZQUFha0UsR0FDWCxNQUFNOHlCLEVBQVcsQ0FDZi9mLFdBQVksS0FDWnpVLGFBQWMsRUFDZEQsTUFBTyxZQUNQcVYsT0FBUSxDQUFDLEdBQUksSUFBSyxJQUFLLEdBQ3ZCOVEsU0FBVSxFQUNWckYsR0FBSSxFQUNKa0Usa0JBQW1CLEdBQ25Cd1IsZ0JBQWlCLEVBQ2pCekYsVUFBVyxJQUNYdFcsS0FBTSxTQUVSLE9BQUk4SSxFQUNLak0sT0FBTytOLE9BQU8sR0FBSWd4QixFQUFVOXlCLEdBRTlCOHlCLEVBR1RuMkIsVUFDRWpHLEtBQUtELEtBQU8sTyxFQUlIbWIsZUFBTixNQUNMOVYsWUFBYWtFLEdBQ1gsTUFBTTh5QixFQUFXLENBQ2YxYyxLQUFNLEtBQ052TixJQUFLLElBQUl6TSxXQUFXLEdBQ3BCMk0sSUFBSyxJQUFJM00sV0FBVyxHQUNwQmdSLGFBQWMsSUFDZC9PLE1BQU8sY0FDUHlPLFlBQWEsSUFDYkQsV0FBWSxLQUNaakssU0FBVSxFQUNWN0IsVUFBVyxDQUNUQyxPQUFPQSxFQUNQK0osSUFBSyxHQUNMRSxRQUFTLEtBQ1RDLFFBQVMsS0FFWDNOLEdBQUksRUFDSjJQLE1BQU8sTUFDUEYsY0FBZSxJQUNmRCxhQUFjLEtBQ2RFLFFBQVMsT0FDVHhMLGtCQUFtQixHQUNuQjRMLFNBQVUsQ0FDUmpCLE9BQVEsRUFDUkQsTUFBTyxHQUVUcUIsVUFBVyxJQUNYdFcsS0FBTSxTQUdSLE9BQUk4SSxFQUNLak0sT0FBTytOLE9BQU8sR0FBSWd4QixFQUFVOXlCLEdBRTlCOHlCLEVBR1RuMkIsVUFDRWpHLEtBQUtELEtBQU8sS0FDWkMsS0FBS21TLElBQU0sS0FDWG5TLEtBQUtxUyxJQUFNLFE7Ozs7K0ZDakVSLE1BQU1zUixFQUNYdmUsWUFBYXdXLEdBQ1gsSUFBSXdnQixFQUFXelksRUFBaUJ3YSxhQUNoQyxPQUFLdmlCLEVBR1F2ZSxPQUFPK04sT0FBTyxHQUFJZ3hCLEVBQVV4Z0IsR0FGaEN3Z0IsRUFPWCxvQkFDRSxNQUFPLENBQ0wxeEIsSUFBSyxLQUNMVyxJQUFLLEtBQ0w3RixLQUFNLElBQUlFLGEsRUFmSGllLG1CQW9CTixNQUFNTyxFQUNYOWUsWUFBYXdXLEdBQ1gsSUFBSXdnQixFQUFXbFksRUFBaUJpYSxhQUVoQyxPQUFLdmlCLEVBR1F2ZSxPQUFPK04sT0FBTyxHQUFJZ3hCLEVBQVV4Z0IsR0FGaEN3Z0IsRUFPWCxvQkFDRSxNQUFPLENBQ0wxeEIsSUFBSyxLQUNMVyxJQUFLLEtBQ0xzRCxZQUFZQSxFQUNaOUMsVUFBVyxLQUNYckcsS0FBTSxJQUFJRSxhLEVBbEJId2Usb0I7Ozs7K0ZDcEJiLE1BQU1rYSxFQUNKaDVCLFlBQWF1YyxHQUNYM2hCLEtBQUsyaEIsUUFBVXRrQixPQUFPK04sT0FBTyxHQUFJdVcsR0FDakMzaEIsS0FBS3ErQixVQUFZcitCLEtBQUsyaEIsUUFBUTBjLFVBQzlCcitCLEtBQUtzK0IsWUFBYyxLQUNuQnQrQixLQUFLdStCLGNBQWdCLEdBQ3JCditCLEtBQUt3K0IsWUFBY3grQixLQUFLMmhCLFFBQVE2YyxhQUFlLEVBQy9DeCtCLEtBQUt5K0IsYUFBZXorQixLQUFLeStCLGFBQWF0Z0MsS0FBSzZCLE1BQzNDQSxLQUFLMCtCLGFBQWUxK0IsS0FBSzArQixhQUFhdmdDLEtBQUs2QixNQUMzQ0EsS0FBSzIrQixZQUFjMytCLEtBQUsyK0IsWUFBWXhnQyxLQUFLNkIsTUFDekNBLEtBQUs0K0IsVUFBWTUrQixLQUFLNCtCLFVBQVV6Z0MsS0FBSzZCLE1BR3ZDRCxPQUVFQyxLQUFLcytCLFlBQWMsSUFBSXRGLEtBQUs2RixZQUM1QjcrQixLQUFLcytCLFlBQVlRLGlCQUFpQixhQUFjOStCLEtBQUt5K0IsY0FDckR6K0IsS0FBS3ErQixVQUFVOXJCLElBQU13c0IsSUFBSUMsZ0JBQWdCaC9CLEtBQUtzK0IsYUFDOUN0K0IsS0FBS2doQixJQUFNaGhCLEtBQUtxK0IsVUFBVTlyQixJQUMxQnZTLEtBQUtxK0IsVUFBVVMsaUJBQWlCLGFBQWM5K0IsS0FBSzArQixjQUNuRDErQixLQUFLcStCLFVBQVVTLGlCQUFpQixVQUFXOStCLEtBQUs0K0IsV0FHbERGLGVBQ0UxK0IsS0FBS2dCLEtBQUssY0FBZWhCLEtBQUtxK0IsV0FHaENPLFlBQ0U1K0IsS0FBS2dCLEtBQUssVUFBV2hCLEtBQUtxK0IsV0FHNUJJLGVBQ0V6K0IsS0FBS2kvQixtQkFHUE4sY0FDRTMrQixLQUFLZ0IsS0FBSyxxQkFDVmhCLEtBQUtrL0IsV0FFUEQsbUJBQ0UsR0FBb0MsU0FBaENqL0IsS0FBS3MrQixZQUFZYSxXQUNuQixPQUVGLElBRUk3aEIsRUFGQTdXLEVBQVV6RyxLQUFLaVAsU0FBU0MsWUFBWSxxQkFDcENDLEVBQVNuUCxLQUFLaVAsU0FBU0MsWUFBWSxVQUd2Q3pJLEVBQVVBLEVBQVFBLFFBQ2xCLElBQUkyNEIsS0FDSixJQUFLLElBQUl6aUMsRUFBSSxFQUFHNG5CLEVBQUlsbkIsT0FBT29ILEtBQUtnQyxHQUFTdEYsT0FBUXhFLEVBQUk0bkIsRUFBRzVuQixJQUFLLENBQzNELElBQUk2RCxFQUFPbkQsT0FBT29ILEtBQUtnQyxHQUFTOUosR0FPaEMsR0FOYSxVQUFUNkQsRUFDRjhjLEVBQVFuTyxFQUFPN0gsV0FDRyxVQUFUOUcsSUFDVDhjLEVBQVFuTyxFQUFPNUgsWUFHYitWLEVBQU8sQ0FDVCxJQUFJK2hCLEVBQWUsVUFBVDcrQixFQUFtQixHQUFLLEdBQzlCOGMsRUFBTWhVLE1BQVFnVSxFQUFNaFUsS0FBS3lCLG9CQUFtQnMwQixFQUFNL2hCLEVBQU1oVSxLQUFLeUIsbUJBQzdEdEUsRUFBUWpHLEdBQU1nRixLQUFLckUsUUFBV25CLEtBQUt3K0IsWUFBY2EsSUFDbkRELE9BS04sR0FBSUEsRUFBSyxDQUNQLEdBQUkvaEMsT0FBT29ILEtBQUt6RSxLQUFLdStCLGVBQWVwOUIsT0FBUyxFQUMzQyxPQUVGLElBQUssSUFBSXhFLEVBQUksRUFBRzRuQixFQUFJbG5CLE9BQU9vSCxLQUFLZ0MsR0FBU3RGLE9BQVF4RSxFQUFJNG5CLEVBQUc1bkIsSUFBSyxDQUMzRCxJQUFJNkQsRUFBT25ELE9BQU9vSCxLQUFLZ0MsR0FBUzlKLEdBQzVCZ0ssRUFBU0YsRUFBUWpHLEdBQ2pCOCtCLEVBQWlCLFVBQVQ5K0IsRUFBb0Isb0JBQXNCbUcsRUFBT0gsU0FBVyxvQkFBc0JHLEVBQU9ILFNBQ2pHKzRCLEVBQWV2L0IsS0FBS3MrQixZQUFZa0IsZ0JBQWdCRixHQUNwRHQvQixLQUFLdStCLGNBQWMvOUIsR0FBUSsrQixFQUMzQkEsRUFBYVQsaUJBQWlCLFlBQWE5K0IsS0FBSzIrQixhQUNoRDMrQixLQUFLay9CLGFBS1hBLFdBQ0UsSUFBSXo0QixFQUFVekcsS0FBS2lQLFNBQVNDLFlBQVkscUJBQ3hDLEdBQUl6SSxFQUNGLElBQUssSUFBSTlKLEVBQUksRUFBR0EsRUFBSVUsT0FBT29ILEtBQUt6RSxLQUFLdStCLGVBQWVwOUIsT0FBUXhFLElBQUssQ0FDL0QsSUFBSTZELEVBQU9uRCxPQUFPb0gsS0FBS3pFLEtBQUt1K0IsZUFBZTVoQyxHQUN2QzRpQyxFQUFldi9CLEtBQUt1K0IsY0FBYy85QixHQUN0QyxJQUFLKytCLEVBQWFFLFNBQVUsQ0FDMUIsSUFBSTk0QixFQUFTRixFQUFRQSxRQUFRakcsR0FDN0IsR0FBSW1HLElBQVdBLEVBQU8rNEIsT0FFcEJILEVBQWFJLGFBQWFoNUIsRUFBTzVHLEtBQUtxUSxPQUFPQSxRQUM3Q3pKLEVBQU8rNEIsZUFDRixHQUFJLzRCLEVBQVEsQ0FDakIsSUFBSW5CLEVBQU9tQixFQUFPbkIsS0FBS3BCLFFBQ25Cb0IsR0FDRis1QixFQUFhSSxhQUFhbjZCLEVBQUs0SyxPQUFPQSxXQVFsRHd2QixjQUNFLE1BQU0sV0FBRVQsRUFBRixvQkFBY1UsR0FBd0I3L0IsS0FBS3MrQixZQUNqRCxHQUFtQixTQUFmYSxHQUF3RCxJQUEvQlUsRUFBb0IxK0IsT0FDL0MsSUFDRW5CLEtBQUtzK0IsWUFBWXNCLGNBQ2pCLE1BQU8vUixLQU1iaVMsT0FBUXB1QixFQUFLdkwsRUFBUSxHQUNuQixJQUFLLElBQUl4SixFQUFJLEVBQUdBLEVBQUlVLE9BQU9vSCxLQUFLekUsS0FBS3UrQixlQUFlcDlCLE9BQVF4RSxJQUFLLENBQy9ELElBQUl5VCxFQUFTcFEsS0FBS3UrQixjQUFjbGhDLE9BQU9vSCxLQUFLekUsS0FBS3UrQixlQUFlNWhDLElBQzNEeVQsRUFBT3F2QixVQUVWcnZCLEVBQU8wdkIsT0FBTzM1QixFQUFPdUwsSUFJM0JxdUIsZ0JBQ0UsTUFBTUMsRUFBVyxHQUNqQixJQUFLLElBQUlyakMsRUFBSSxFQUFHQSxFQUFJVSxPQUFPb0gsS0FBS3pFLEtBQUt1K0IsZUFBZXA5QixPQUFReEUsSUFBSyxDQUMvRCxJQUdJc2pDLEVBSEE3dkIsRUFBU3BRLEtBQUt1K0IsY0FBY2xoQyxPQUFPb0gsS0FBS3pFLEtBQUt1K0IsZUFBZTVoQyxJQUNoRXlULEVBQU84dkIsb0JBQW9CLFlBQWFsZ0MsS0FBSzIrQixhQUkzQ3NCLEVBREU3dkIsRUFBT3F2QixTQUNGLElBQUlVLFFBQVNyb0IsSUFDbEIsTUFBTXNvQixFQUFnQixXQUNwQixJQUFJQyxFQUFZLEVBRWhCLE1BQU1DLEVBQVEsS0FDUGx3QixFQUFPcXZCLFNBS0RZLEVBQVksR0FDckJFLFdBQVdELEVBQU8sS0FDbEJELEtBRUF2b0IsS0FSQXNtQixFQUFJb0MsWUFBWXB3QixHQUNoQkEsRUFBTzB1QixpQkFBaUIsWUFBYSxLQUNuQ2huQixRQVVOeW9CLFdBQVdELEVBQU8sS0FDbEJsd0IsRUFBTzh2QixvQkFBb0IsWUFBYUUsSUFFMUNod0IsRUFBTzB1QixpQkFBaUIsWUFBYXNCLEtBR2hDLElBQUlELFFBQVNyb0IsSUFDbEJzbUIsRUFBSW9DLFlBQVlwd0IsR0FDaEJBLEVBQU8wdUIsaUJBQWlCLFlBQWEsS0FDL0IxdUIsRUFBT3F3QixTQUFTdC9CLFFBQ2xCTyxRQUFRc04sSUFBSW9CLEVBQU9xd0IsU0FBU3Q2QixNQUFNLFFBQVNpSyxFQUFPcXdCLFNBQVMvdUIsSUFBSSxNQUVqRW9HLFFBT05rb0IsRUFBUzkrQixLQUFLKytCLEdBR2hCLE9BQU9FLFFBQVFPLElBQUlWLEdBR3JCLzVCLFVBQ0UsT0FBT2pHLEtBQUsrL0IsZ0JBQWdCaFQsS0FBSyxLQUMvQixJQUFLLElBQUlwd0IsRUFBSSxFQUFHQSxFQUFJVSxPQUFPb0gsS0FBS3pFLEtBQUt1K0IsZUFBZXA5QixPQUFReEUsSUFBSyxDQUMvRCxJQUFJeVQsRUFBU3BRLEtBQUt1K0IsY0FBY2xoQyxPQUFPb0gsS0FBS3pFLEtBQUt1K0IsZUFBZTVoQyxJQUNoRXFELEtBQUtzK0IsWUFBWXFDLG1CQUFtQnZ3QixVQUM3QnBRLEtBQUt1K0IsY0FBY2xoQyxPQUFPb0gsS0FBS3pFLEtBQUt1K0IsZUFBZTVoQyxJQUc1RHFELEtBQUtxK0IsVUFBVTZCLG9CQUFvQixhQUFjbGdDLEtBQUswK0IsY0FDdEQxK0IsS0FBS3ErQixVQUFVNkIsb0JBQW9CLFVBQVdsZ0MsS0FBSzQrQixXQUNuRDUrQixLQUFLcytCLFlBQVk0QixvQkFBb0IsYUFBY2xnQyxLQUFLeStCLGNBRXhEeitCLEtBQUs0L0IsY0FDTGhoQyxPQUFPbWdDLElBQUk2QixnQkFBZ0I1Z0MsS0FBS2doQixLQUVoQ2hoQixLQUFLZ2hCLElBQU0sS0FDWGhoQixLQUFLMmhCLFFBQVUsR0FDZjNoQixLQUFLcStCLFVBQVksS0FDakJyK0IsS0FBS3MrQixZQUFjLEtBQ25CdCtCLEtBQUt1K0IsY0FBZ0IsR0FDckJ2K0IsS0FBS3crQixZQUFjLElBSXZCLG1CQUFvQnB1QixHQUNsQixNQUFNcXdCLEVBQVdyd0IsRUFBT3F3QixTQUN4QixJQUFJSSxFQUFPLEdBQ1gsSUFBSyxJQUFJbGtDLEVBQUksRUFBRytHLEVBQU0rOEIsRUFBU3QvQixPQUFReEUsRUFBSStHLEVBQUsvRyxJQUM5Q2trQyxFQUFPSixFQUFTL3VCLElBQUkvVSxHQUV0QixJQUNFeVQsRUFBTzB2QixPQUFPLEVBQUdlLEdBQ2pCLE1BQU9oVCxNLFVBS0V1USxHOzs7OytGQ3JOZixJLE9BQUF6aEMsMkJBQUEsb0UscUNBRUEsTUFDRXlJLFlBQWFnTCxHQUNYcFEsS0FBS29RLE9BQVNBLEdBQVUsSUFBSTFLLFdBQVcsR0FHekNxcEIsU0FBVTNlLEdBQ1JBLEVBQU9tZixRQUFRbEssSUFDYnJsQixLQUFLb1EsVUFBUyxXQUFPMUssV0FBWTFGLEtBQUtvUSxPQUFRaVYsS0FJbEQsbUJBQW9Cem5CLEdBQ2xCLE9BQU8sSUFBSThILFdBQVcsQ0FDcEI5SCxHQUFTLEdBQ1JBLEdBQVMsR0FBTSxJQUNmQSxHQUFTLEVBQUssSUFDUCxJQUFSQSxJQUlKLGlCQUFrQjJFLEdBQ2hCLElBQUl1K0IsRUFBTyxHQVVYLE9BSEF2K0IsRUFBSWd0QixRQUFRNEMsSUFDVjJPLEdBTkYsU0FBdUJDLEdBRXJCLE9BRGFBLEVBQU96aEIsU0FBUyxJQUNmMGhCLFNBQVMsRUFBRyxLQUY1QixDQU11QjdPLEtBRWhCN1QsU0FBU3dpQixFQUFNLE87Ozs7K0ZDakMxQixNQUFNeGUsRUFDSmxkLFlBQWFnTCxHQUNYLEtBQUlBLGFBQWtCOEksYUFLcEIsTUFBTSxJQUFJNVgsTUFBTSxtQkFKaEJ0QixLQUFLb1EsT0FBU0EsRUFDZHBRLEtBQUtpUixTQUFXLElBQUlkLFNBQVNDLEdBQzdCcFEsS0FBS2lSLFNBQVMvTSxTQUFXLEVBTTdCLGFBQ0UsT0FBT2xFLEtBQUtvUSxPQUFPM0ssV0FHckIsYUFBYzdILEdBQ1pvQyxLQUFLaVIsU0FBUy9NLFNBQVd0RyxFQUczQixlQUNFLE9BQU9vQyxLQUFLaVIsU0FBUy9NLFNBR3ZCMmxCLEtBQU1wb0IsR0FDSnpCLEtBQUtrRSxVQUFZekMsRUFHbkJvUSxLQUFNcFEsR0FDSixJQUFJdy9CLEVBQU9oMkIsS0FBS0MsTUFBTXpKLEVBQVEsR0FDMUJxN0IsRUFBT3I3QixFQUFRLEVBQ25CLElBQUssSUFBSTlFLEVBQUksRUFBR0EsRUFBSXNrQyxFQUFNdGtDLElBQ3hCMmxCLEVBQU81UixTQUFTMVEsS0FBS2lSLFNBQVUsR0FFN0I2ckIsRUFBTyxHQUNUeGEsRUFBTzVSLFNBQVMxUSxLQUFLaVIsU0FBVTZyQixHQVVuQyxnQkFBaUIxc0IsRUFBUTdFLEVBQU0yMUIsR0FDN0IsSUFBSTlHLEVBQ0osT0FBUTd1QixHQUNOLEtBQUssRUFFRDZ1QixFQURFOEcsRUFDSTl3QixFQUFPZ0IsUUFBUWhCLEVBQU9sTSxVQUV0QmtNLEVBQU9nSixTQUFTaEosRUFBT2xNLFVBRS9CLE1BQ0YsS0FBSyxFQUVEazJCLEVBREU4RyxFQUNJOXdCLEVBQU9lLFNBQVNmLEVBQU9sTSxVQUV2QmtNLEVBQU9pSSxVQUFVakksRUFBT2xNLFVBRWhDLE1BQ0YsS0FBSyxFQUNILEdBQUlnOUIsRUFDRixNQUFNLElBQUk1L0IsTUFBTSxnQ0FFaEI4NEIsRUFBTWhxQixFQUFPZ0osU0FBU2hKLEVBQU9sTSxXQUFhLEdBQzFDazJCLEdBQU9ocUIsRUFBT2dKLFNBQVNoSixFQUFPbE0sU0FBVyxJQUFNLEVBQy9DazJCLEdBQU9ocUIsRUFBT2dKLFNBQVNoSixFQUFPbE0sU0FBVyxHQUUzQyxNQUNGLEtBQUssRUFFRGsyQixFQURFOEcsRUFDSTl3QixFQUFPYyxTQUFTZCxFQUFPbE0sVUFFdkJrTSxFQUFPQyxVQUFVRCxFQUFPbE0sVUFFaEMsTUFDRixLQUFLLEVBQ0gsR0FBSWc5QixFQUNGLE1BQU0sSUFBSTUvQixNQUFNLGdDQUVoQjg0QixFQUFNaHFCLEVBQU9DLFVBQVVELEVBQU9sTSxXQUFhLEdBQzNDazJCLEdBQU9ocUIsRUFBT0MsVUFBVUQsRUFBT2xNLFNBQVcsR0FFNUMsTUFDRixRQUNFazJCLEVBQU0sR0FHVixPQURBaHFCLEVBQU9sTSxVQUFZcUgsRUFDWjZ1QixFQUdUelUsWUFDRSxPQUFPckQsRUFBTzVSLFNBQVMxUSxLQUFLaVIsU0FBVSxHQUd4QzJVLGFBQ0UsT0FBT3RELEVBQU81UixTQUFTMVEsS0FBS2lSLFNBQVUsR0FHeENtWCxhQUNFLE9BQU85RixFQUFPNVIsU0FBUzFRLEtBQUtpUixTQUFVLEdBR3hDeVcsYUFDRSxPQUFPcEYsRUFBTzVSLFNBQVMxUSxLQUFLaVIsU0FBVSxHQUd4Q2t3QixhQUNFLE9BQU83ZSxFQUFPNVIsU0FBUzFRLEtBQUtpUixTQUFVLEdBR3hDcVgsV0FDRSxPQUFPaEcsRUFBTzVSLFNBQVMxUSxLQUFLaVIsU0FBVSxNQUV4Q213QixZQUNFLE9BQU85ZSxFQUFPNVIsU0FBUzFRLEtBQUtpUixTQUFVLE1BR3hDb3dCLFlBQ0UsT0FBTy9lLEVBQU81UixTQUFTMVEsS0FBS2lSLFNBQVUsTUFHeEM0ZCxZQUFhanhCLEdBQ1gsT0FBTyxJQUFJOEgsV0FBVyxDQUNwQjlILElBQVUsR0FBSyxJQUNmQSxJQUFVLEdBQUssSUFDZkEsSUFBVSxFQUFJLElBQ04sSUFBUkEsSyxVQUtTMGtCLEc7Ozs7K0ZDcklmLEksSUFBQTNsQix1QkFBQSwrQkFDQSxFQUFBQSx3QkFBQSwrQkFDQSxFQUFBQSx1QkFBQSw4QkFDQSxFQUFBQSx3QkFBQSwrQkFDQSxFQUFBQSx1QkFBQSw4QkFDQSxFQUFBQSx1QkFBQSw4QixJQUNBQSxpQkFBQSxhLG1EQUVBLE1BQU1rTCxFQUFlRSxTQUFPRixhQUN0QkMsRUFBZUMsU0FBT0QsYUFDdEJta0IsRUFBZ0Jsa0IsU0FBT2trQixjQUN2QmlMLEVBQWFudkIsU0FBT212QixXQUkxQixNQUFNb0ssRUFDSjMvQixTLFVBS2EsTUFDYnlELFlBQWFtOEIsR0FDWHZoQyxLQUFLb0gsSUFWRyxnQkFXUnBILEtBQUt3aEMsUUFBVUQsRUFFZnZoQyxLQUFLa0MsTUFBUSxDQUNYdS9CLG9CQUFvQkEsRUFDcEI3RCxtQkFBb0IsSUFHdEI1OUIsS0FBSzBoQyxpQkFBbUIsS0FHMUIzaEMsT0FDRUMsS0FBS2lQLFNBQVMycEIsU0FBUyxlQUFnQjVNLGVBQ3ZDaHNCLEtBQUtpUCxTQUFTMnBCLFNBQVMsZ0JBQWlCM3pCLFlBRXhDakYsS0FBS2lQLFNBQVMycEIsU0FBUyxjQUFlMWhCLGNBQ3RDbFgsS0FBS2lQLFNBQVMycEIsU0FBUyxTQUFVOXpCLFVBRWpDOUUsS0FBS2lQLFNBQVMycEIsU0FBUyxjQUFlK0ksVUFBUWpULFlBQzlDMXVCLEtBQUtpUCxTQUFTMnBCLFNBQVMsb0JBQXFCenpCLGtCQUV4Q25GLEtBQUt3aEMsUUFBUXhrQixPQUFPNGtCLGVBQ3RCNWhDLEtBQUtpUCxTQUFTMnBCLFNBQVMsZ0JBQWlCbHhCLGlCQUcxQzFILEtBQUtpUCxTQUFTMnBCLFNBQVMsU0FBVTBJLEdBQ2pDdGhDLEtBQUs2aEMsSUFBTTdoQyxLQUFLaVAsU0FBUzJwQixTQUFTLE1BQU9qRCxFQUE5QjMxQixLQUFtQyxDQUFFcStCLFVBQVdyK0IsS0FBS3doQyxRQUFRbjdCLFFBRXhFckcsS0FBSzhoQyxrQkFBb0I5aEMsS0FBSzhoQyxrQkFBa0IzakMsS0FBSzZCLE1BRXJEQSxLQUFLK2hDLGdCQUdQQSxnQkFDRS9oQyxLQUFLNkQsR0FBR29vQixFQUFjK0Isa0JBQW1CaHVCLEtBQUtnaUMsd0JBQXdCN2pDLEtBQUs2QixPQUMzRUEsS0FBSzZELEdBQUdvb0IsRUFBY2tCLGFBQWNudEIsS0FBS2lpQyxvQkFBb0I5akMsS0FBSzZCLE9BRWxFQSxLQUFLNkQsR0FBR2lFLEVBQWFvVSxXQUFZbGMsS0FBS2tpQyxpQkFBaUIvakMsS0FBSzZCLE9BQzVEQSxLQUFLNkQsR0FBR2lFLEVBQWFrVyxnQkFBaUJoZSxLQUFLbWlDLHNCQUFzQmhrQyxLQUFLNkIsT0FDdEVBLEtBQUs2RCxHQUFHaUUsRUFBYTRTLGVBQWdCMWEsS0FBS29pQyxxQkFBcUJqa0MsS0FBSzZCLE9BQ3BFQSxLQUFLNkQsR0FBR2lFLEVBQWFtVCxZQUFhamIsS0FBS3FpQyxrQkFBa0Jsa0MsS0FBSzZCLE9BRTlEQSxLQUFLNkQsR0FBR2dFLEVBQWFrc0IsYUFBYy96QixLQUFLc2lDLHlCQUF5Qm5rQyxLQUFLNkIsT0FDdEVBLEtBQUs2RCxHQUFHZ0UsRUFBYWt0QixjQUFlLzBCLEtBQUt1aUMsb0JBQW9CcGtDLEtBQUs2QixPQUNsRUEsS0FBSzZELEdBQUdnRSxFQUFhNnNCLG9CQUFxQjEwQixLQUFLd2lDLGNBQWNya0MsS0FBSzZCLE9BRWxFQSxLQUFLNkQsR0FBR3F6QixFQUFXQyxrQkFBbUJuM0IsS0FBS3lpQyx1QkFBdUJ0a0MsS0FBSzZCLE9BRXZFQSxLQUFLd2hDLFFBQVEzOUIsR0FBRyxhQUFjN0QsS0FBSzhoQyxtQkFHckNJLG1CQUNPbGlDLEtBQUtpUCxTQUFTOE0sV0FDakIvYixLQUFLZ0IsS0FBSzhHLEVBQWFtVCxZQUFhLElBQUkzWixNQUFNLDRCQUlsRDBnQywwQkFDRWhpQyxLQUFLcTVCLE9BQU8sY0FBZXZ4QixFQUFha1MsYUFHMUNtb0Isc0JBQXVCM2hDLEdBQ3JCUixLQUFLZ0IsS0FBSzZHLEVBQWF1ckIsZUFBZ0I1eUIsR0FFekM0aEMsdUJBQ0VwaUMsS0FBS2dCLEtBQUs2RyxFQUFha0IsYUFHekJ1NUIsMkJBQ0V0aUMsS0FBS2tDLE1BQU11L0Isc0JBQ1h6aEMsS0FBSzZoQyxJQUFJNUMsbUJBR1hzRCxzQkFDRXZpQyxLQUFLNmhDLElBQUk1QyxtQkFDVGovQixLQUFLNmhDLElBQUkzQyxXQUdYdUQseUJBQ0UsTUFBTXRYLEVBQU9uckIsS0FBS3doQyxRQUFRa0IsWUFDcEJyOEIsRUFBUXJHLEtBQUt3aEMsUUFBUW43QixNQUNyQm00QixFQUFjeCtCLEtBQUt3aEMsUUFBUXhrQixPQUFPd2hCLGFBQWUsR0FFakQsT0FBRXI5QixHQUFXa0YsRUFBTW82QixTQUV6QixHQUFlLElBQVh0L0IsRUFDRixPQUdGLE1BQU13aEMsRUFBWXQ4QixFQUFNbzZCLFNBQVMvdUIsSUFBSXZRLEVBQVMsR0FDMUN3aEMsRUFBWXhYLEVBQXFCLEVBQWRxVCxJQUNyQngrQixLQUFLd2hDLFFBQVFrQixZQUFjQyxFQUFZbkUsR0FFekN4K0IsS0FBSzZoQyxJQUFJM0MsV0FHWDRDLG9CQUNFLE1BQU0zVyxFQUFPbnJCLEtBQUt3aEMsUUFBUWtCLFlBRzFCLElBQUlqQyxFQURVemdDLEtBQUt3aEMsUUFBUW43QixNQUNObzZCLFNBRXJCLElBQUtBLElBQWFBLEVBQVN0L0IsT0FDekIsT0FHRixNQUFNeWhDLEVBQWM1aUMsS0FBS3doQyxRQUFRcUIsbUJBQW1CLEdBQ3BELEdBQUkxWCxFQUFPeVgsRUFBYyxHQUFJLENBRTNCLEdBQUk1aUMsS0FBSzBoQyxtQkFBcUIxaEMsS0FBS2tDLE1BQU0wN0IsbUJBQW1CejhCLE9BQzFELE9BRUYsSUFBSTJoQyxFQUFNeDBCLElBQ1YsSUFBSyxJQUFJM1IsRUFBSSxFQUFHQSxFQUFJcUQsS0FBS2tDLE1BQU0wN0IsbUJBQW1CejhCLE9BQVF4RSxJQUFLLENBQzdELE1BQU1ta0MsRUFBTzcxQixLQUFLbUssS0FBS3BWLEtBQUtrQyxNQUFNMDdCLG1CQUFtQmpoQyxHQUFLLEtBQzFELEdBQUlta0MsRUFBTzNWLEVBQU8sRUFDaEIsTUFFQTJYLEVBQU1oQyxFQUlWOWdDLEtBQUs2aEMsSUFBSS9CLE9BQU83MEIsS0FBSytFLElBQUk4eUIsRUFBSzNYLEVBQU8sR0FBSXlYLEdBRXpDNWlDLEtBQUswaEMsaUJBQW1CbkIsV0FBVyxLQUNqQ3ZnQyxLQUFLMGhDLGlCQUFtQixNQUN2QixNQUlQTyxvQkFBcUJ4SixFQUFLbjFCLEdBQ3hCdEQsS0FBS3doQyxRQUFReGdDLEtBQUssUUFBUyxJQUFJK2hDLFVBQU9DLE9BQU8sVUFBV2hqQyxLQUFLd2hDLFFBQVF4a0IsT0FBT2dFLE1BQzVFaGhCLEtBQUtpakMsU0FBU2hYLEVBQWNrQixhQUFjc0wsRUFBS24xQixNQUdqRCsrQixrQkFBbUI1SixFQUFLbjFCLEVBQUs0L0IsWUFDdkJBLElBQ0ZBLE1BRUZsakMsS0FBS3doQyxRQUFReGdDLEtBQUssUUFBUyxJQUFJK2hDLFVBQU9DLE9BQU8sUUFBU2hqQyxLQUFLd2hDLFFBQVF4a0IsT0FBT2dFLE1BQzFFaGhCLEtBQUtpakMsU0FBU2hYLEVBQWNrQixhQUFjc0wsRUFBS24xQixFQUFLNC9CLEdBR3REVixjQUFlTSxHQUNUOWlDLEtBQUtrQyxNQUFNMDdCLG9CQUNiNTlCLEtBQUtrQyxNQUFNMDdCLG1CQUFtQjE4QixLQUFLNGhDLEdBSXZDRyxTQUFVemlDLEVBQU0yaUMsRUFBSzcvQixFQUFLNC9CLEdBQ3hCLElBQUk5L0IsRUFBUSxDQUNWZ2dDLFVBQVc1aUMsRUFDWDZpQyxpQkFBa0JGLE9BQVM3L0IsRUFBSUMsVUFDL0IrL0IsV0FBWUosT0FFZGxqQyxLQUFLd2hDLFFBQVF4Z0MsS0EvSkMsWUErSmVvQyxHQUcvQnd3QixPQUNPNXpCLEtBQUtrQyxNQUFNdS9CLG9CQUNkemhDLEtBQUt1akMsV0FJVEEsV0FDRXZqQyxLQUFLZ0IsS0FBS2lyQixFQUFjTyxZQUFheHNCLEtBQUt3aEMsUUFBUXhrQixPQUFPZ0UsS0FHM0R3aUIsUUFDRSxNQUFNQyxFQUFTempDLEtBQUtpUCxTQUFTQyxZQUFZLGdCQUVyQ3UwQixHQUNGQSxFQUFPN1YsU0FJWDNuQixVQUNFakcsS0FBS3doQyxRQUFRajlCLElBQUksYUFBY3ZFLEtBQUs4aEMsbUJBQ3BDOWhDLEtBQUt3aEMsUUFBVSxLQUNmeGhDLEtBQUs2aEMsSUFBTSxLQUNYN2hDLEtBQUtrQyxNQUFNMDdCLG1CQUFxQixNOzs7OzhDQzNNcEMsSSxJQUFBamhDLGlCQUFBLGFBQ0EsRUFBQUEsdUJBQUEsOEIsSUFDQUEsbUJBQUEsc0IsbURBQ0EsTUFBTSttQyxFQUFtQjM3QixTQUFPd3ZCLGlCQUVoQyxNQUFNb00sVUFBa0JaLFVBQ3RCMzlCLFlBQWE0WCxHQUNYN1YsTUFBTTZWLEdBQ05oZCxLQUFLd0QsUUFBVSxJQUFJOHhCLFVBQVFvTyxHQUMzQjFqQyxLQUFLNGpDLGFBQ0w1akMsS0FBSzZqQyxvQkFBc0IsS0FJN0IxOUIsUUFDRW5HLEtBQUs4akMsVUFDTDlqQyxLQUFLd0QsUUFBUXpELE9BQ2JvSCxNQUFNaEIsTUFBTW5HLEtBQUsrakMsSUFBSWxDLElBQUk3Z0IsS0FHM0JnakIsY0FBZUQsR0FDYixNQUFNeEMsRUFBU3ZoQyxLQUNmK2pDLEVBQUloZ0MsS0FBS2dFLFNBQU9GLGFBQWFrc0IsYUFBYyxLQUV6QyxHQURBZ1AsVUFBT2tCLEtBQUtDLFNBQVMzQyxFQUFPNEMsS0FBTSxxQkFDN0JwQixVQUFPa0IsS0FBS0csUUFBUXBrQyxLQUFLbWtDLEtBQU0sV0FBWSxDQUM5QyxNQUFNRSxFQUFPdEIsVUFBT2tCLEtBQUtLLFVBQVUsVUFBVyxPQUFRLEdBQUksaUJBQzFEL0MsRUFBT2dELFNBQVNDLFlBQVlILE1BSWhDTixFQUFJaGdDLEtBQUtnRSxTQUFPa2tCLGNBQWNzQixnQkFBaUIsS0FFeENnVSxFQUFPa0QsT0FTVmxELEVBQU92Z0MsS0FBSyxTQVJaaEIsS0FBSzZqQyxvQkFBc0JhLFlBQVksS0FDckMsTUFBTWh6QixFQUFNNnZCLEVBQU9zQixtQkFBbUIsR0FDbEM1M0IsS0FBS1EsSUFBSTgxQixFQUFPbUIsWUFBY2h4QixHQUFPLEtBQ3ZDNnZCLEVBQU92Z0MsS0FBSyxTQUNacEMsT0FBTytsQyxjQUFjM2tDLEtBQUs2akMsdUJBRTNCLE9BT1RELGFBQ0U1akMsS0FBSzZELEdBQUcsYUFBYyxLQUNwQjdELEtBQUt1akMsYUFHUHZqQyxLQUFLNkQsR0FBRyxVQUFXLEtBQ2pCLE1BQU1zbkIsRUFBT25yQixLQUFLMGlDLFlBQ1prQyxFQUFRNWtDLEtBQUs2aUMsb0JBQ2YxWCxFQUFPeVosRUFBTSxJQUFNelosRUFBT3laLEVBQU0sS0FDbEM1a0MsS0FBSytqQyxJQUFJblEsS0FBSzV6QixLQUFLMGlDLGVBTXpCb0IsVUFDRSxNQUFNQyxFQUFNL2pDLEtBQUt3RCxRQUFRbzFCLFNBQVMsaUJBQWtCaU0sRUFBeEM3a0MsU0FBNkNBLE1BQ3pEQSxLQUFLZ2tDLGNBQWNELEdBQ25CL2pDLEtBQUsrakMsSUFBTUEsRUFHYmUsT0FDTTlrQyxLQUFLK2tDLFVBQ1Ava0MsS0FBS2dsQyxXQUFXalksS0FBSyxLQUNuQi9zQixLQUFLd0QsUUFBVSxJQUFJOHhCLFVBQVFvTyxHQUMzQixNQUFNSyxFQUFNL2pDLEtBQUt3RCxRQUFRbzFCLFNBQVMsaUJBQWtCaU0sRUFBeEM3a0MsU0FBNkNBLE1BQ3pEQSxLQUFLZ2tDLGNBQWNELEdBQ25CL2pDLEtBQUsrakMsSUFBTUEsRUFDWC9qQyxLQUFLd0QsUUFBUXpELE9BQ2JvSCxNQUFNaEIsTUFBTTQ5QixFQUFJbEMsSUFBSTdnQixLQUNwQjdaLE1BQU0yOUIsU0FJUjM5QixNQUFNMjlCLE9BSVZ0QixRQUNFcjhCLE1BQU1xOEIsUUFDRnhqQyxLQUFLK2pDLEtBQ1AvakMsS0FBSytqQyxJQUFJUCxRQUliRCxTQUFVcFksRUFBT25yQixLQUFLMGlDLGFBQ2hCMWlDLEtBQUsrakMsS0FDUC9qQyxLQUFLK2pDLElBQUluUSxLQUFLekksR0FJbEJsbEIsVUFDRWpHLEtBQUtnbEMsV0FBV2pZLEtBQUssS0FDbkI1bEIsTUFBTWxCLFlBSVYrK0IsV0FDRSxPQUFPaGxDLEtBQUsrakMsSUFBSWxDLElBQUk1N0IsVUFBVThtQixLQUFLLEtBQ2pDL3NCLEtBQUt3RCxRQUFReUMsVUFDYmpHLEtBQUsrakMsSUFBTSxLQUNYL2pDLEtBQUt3RCxRQUFVLEtBQ1h4RCxLQUFLNmpDLHFCQUNQamxDLE9BQU8rbEMsY0FBYzNrQyxLQUFLNmpDLHVCQUtoQyxVQUNFLE9BQU83akMsS0FBS2lsQyxXQUdkLFFBQVNqa0IsR0FDUGhoQixLQUFLdWhDLE9BQU92a0IsT0FBT2dFLElBQU1BLEVBQ3BCaGhCLEtBQUt5a0MsT0FTUnprQyxLQUFLbUcsTUFBTTZhLElBUlhoaEIsS0FBS3dqQyxRQUNMeGpDLEtBQUsrRCxLQUFLLFFBQVMsS0FDakIvRCxLQUFLbUcsTUFBTTZhLEtBRWJoaEIsS0FBSytELEtBQUssVUFBVyxLQUNuQi9ELEtBQUs4a0MsVUFLVDlrQyxLQUFLK0QsS0FBSyxVQUFXLEtBQ25CL0QsS0FBSzBpQyxZQUFjLEtBS3pCaG1DLEVBQU9ELFFBQVVrbkMsRzs7Ozs7Ozs7NENDeklqQmpuQyxFQUFPRCxRQUFVa0MsTzs7OzsyRENBb1EsSUFBU2t2QixFQUFqQmp2QixPQUE1TWxDLEVBQU9ELFNBQXNOb3hCLEVBQTVNaHZCLGlCQUFRLFlBQThNLFNBQVNndkIsR0FBRyxJQUFJaHdCLEVBQUUsR0FBRyxTQUFTbEIsRUFBRStCLEdBQUcsR0FBR2IsRUFBRWEsR0FBRyxPQUFPYixFQUFFYSxHQUFHakMsUUFBUSxJQUFJZ0IsRUFBRUksRUFBRWEsR0FBRyxDQUFDL0IsRUFBRStCLEVBQUU5QixHQUFFLEVBQUdILFFBQVEsSUFBSSxPQUFPb3hCLEVBQUVudkIsR0FBRzVCLEtBQUtXLEVBQUVoQixRQUFRZ0IsRUFBRUEsRUFBRWhCLFFBQVFFLEdBQUdjLEVBQUViLEdBQUUsRUFBR2EsRUFBRWhCLFFBQVEsT0FBT0UsRUFBRUksRUFBRTh3QixFQUFFbHhCLEVBQUVLLEVBQUVhLEVBQUVsQixFQUFFTSxFQUFFLFNBQVM0d0IsRUFBRWh3QixFQUFFYSxHQUFHL0IsRUFBRVMsRUFBRXl3QixFQUFFaHdCLElBQUlSLE9BQU9DLGVBQWV1d0IsRUFBRWh3QixFQUFFLENBQUNOLFlBQVcsRUFBR0MsSUFBSWtCLEtBQUsvQixFQUFFYyxFQUFFLFNBQVNvd0IsR0FBRyxvQkFBb0Jud0IsUUFBUUEsT0FBT0MsYUFBYU4sT0FBT0MsZUFBZXV3QixFQUFFbndCLE9BQU9DLFlBQVksQ0FBQ0MsTUFBTSxXQUFXUCxPQUFPQyxlQUFldXdCLEVBQUUsYUFBYSxDQUFDandCLE9BQU0sS0FBTWpCLEVBQUVrQixFQUFFLFNBQVNnd0IsRUFBRWh3QixHQUFHLEdBQUcsRUFBRUEsSUFBSWd3QixFQUFFbHhCLEVBQUVreEIsSUFBSSxFQUFFaHdCLEVBQUUsT0FBT2d3QixFQUFFLEdBQUcsRUFBRWh3QixHQUFHLGlCQUFpQmd3QixHQUFHQSxHQUFHQSxFQUFFOXZCLFdBQVcsT0FBTzh2QixFQUFFLElBQUludkIsRUFBRXJCLE9BQU9ZLE9BQU8sTUFBTSxHQUFHdEIsRUFBRWMsRUFBRWlCLEdBQUdyQixPQUFPQyxlQUFlb0IsRUFBRSxVQUFVLENBQUNuQixZQUFXLEVBQUdLLE1BQU1pd0IsSUFBSSxFQUFFaHdCLEdBQUcsaUJBQWlCZ3dCLEVBQUUsSUFBSSxJQUFJcHdCLEtBQUtvd0IsRUFBRWx4QixFQUFFTSxFQUFFeUIsRUFBRWpCLEVBQUUsU0FBU0ksR0FBRyxPQUFPZ3dCLEVBQUVod0IsSUFBSU0sS0FBSyxLQUFLVixJQUFJLE9BQU9pQixHQUFHL0IsRUFBRXlCLEVBQUUsU0FBU3l2QixHQUFHLElBQUlod0IsRUFBRWd3QixHQUFHQSxFQUFFOXZCLFdBQVcsV0FBVyxPQUFPOHZCLEVBQUVocEIsU0FBUyxXQUFXLE9BQU9ncEIsR0FBRyxPQUFPbHhCLEVBQUVNLEVBQUVZLEVBQUUsSUFBSUEsR0FBR0EsR0FBR2xCLEVBQUVTLEVBQUUsU0FBU3l3QixFQUFFaHdCLEdBQUcsT0FBT1IsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLK3dCLEVBQUVod0IsSUFBSWxCLEVBQUU4QixFQUFFLEdBQUc5QixFQUFFQSxFQUFFK0IsRUFBRSxJQUFqNUIsQ0FBczVCLENBQUMsU0FBU212QixFQUFFaHdCLEVBQUVsQixHQUFnQmt4QixFQUFFcHhCLFFBQVEsQ0FBQzY0QixRQUFRMzRCLEVBQUUsSUFBSWtJLFFBQVFrRCxPQUFPcEwsRUFBRSxHQUFHa0ksUUFBUTB3QixnQkFBZ0I1NEIsRUFBRSxJQUFJa0ksUUFBUWd1QixRQUFRbDJCLEVBQUUsSUFBSWtJLFFBQVF5VCxLQUFLM2IsRUFBRSxJQUFJa0ksUUFBUTJULEtBQUs3YixFQUFFLElBQUlrSSxRQUFRMndCLFVBQVU3NEIsRUFBRSxHQUFHa0ksUUFBUTR3QixZQUFZOTRCLEVBQUUsSUFBSWtJLFFBQVE2d0IsYUFBYS80QixFQUFFLElBQUlrSSxRQUFRNnRCLGlCQUFpQi8xQixFQUFFLElBQUlrSSxRQUFRc1csZUFBZXhlLEVBQUUsR0FBR3dlLGVBQWVELGVBQWV2ZSxFQUFFLEdBQUd1ZSxlQUFleUksaUJBQWlCaG5CLEVBQUUsR0FBR2duQixpQkFBaUJPLGlCQUFpQnZuQixFQUFFLEdBQUd1bkIsaUJBQWlCeVIsSUFBSWg1QixFQUFFLElBQUlrSSxRQUFReWQsT0FBTzNsQixFQUFFLElBQUlrSSxRQUFRK3BCLE9BQU9qeUIsRUFBRSxJQUFJa0ksUUFBUSt3QixPQUFPajVCLEVBQUUsSUFBSWtJLFVBQVUsU0FBU2dwQixFQUFFaHdCLEVBQUVsQixHQUFnQlUsT0FBT0MsZUFBZU8sRUFBRSxhQUFhLENBQUNELE9BQU0sSUFBSyxNQUFNYyxFQUFFMEcsY0FBY3BGLEtBQUs2RyxJQUFJLEVBQUU3RyxLQUFLOEcsZUFBZSxFQUFFOUcsS0FBSytHLFFBQVEsR0FBRy9HLEtBQUtnSCxlQUFlLEdBQUdoSCxLQUFLbUIsT0FBTyxFQUFFLFFBQVFuQixLQUFLOEcsZUFBZSxFQUFFOUcsS0FBSytHLFFBQVEsR0FBRy9HLEtBQUttQixPQUFPLEVBQUUsVUFBVW5CLEtBQUtpSCxRQUFRakgsS0FBSzZHLElBQUksR0FBR2hKLEVBQUVnSCxRQUFRbkcsRUFBRWIsRUFBRWtILFdBQVcsY0FBY3JHLEVBQUUwRyxjQUFjK0IsUUFBUW5ILEtBQUtvSCxJQUFJLGFBQWFwSCxLQUFLUSxLQUFLLFVBQVUzQyxFQUFFbUgsV0FBVyxjQUFjdEcsRUFBRTBHLGNBQWMrQixRQUFRbkgsS0FBS29ILElBQUksYUFBYXBILEtBQUtRLEtBQUssUUFBUVIsS0FBS3FILFFBQVEsRUFBRSxRQUFRckgsS0FBSzhHLGVBQWUsRUFBRTlHLEtBQUsrRyxRQUFRLEdBQUcvRyxLQUFLbUIsT0FBTyxFQUFFbkIsS0FBS3FILFFBQVEsSUFBSXhKLEVBQUVpSCxPQUFPLE1BQU1NLGNBQWNwRixLQUFLc0gsV0FBVyxLQUFLdEgsS0FBS3VILFdBQVcsS0FBSyxVQUFVdkgsS0FBS3NILFdBQVcsS0FBS3RILEtBQUt1SCxXQUFXLFFBQVEsU0FBUzFKLEVBQUVsQixHQUFHa0IsRUFBRXBCLFFBQVFveEIsR0FBRyxTQUFTQSxFQUFFaHdCLEVBQUVsQixHQUFnQlUsT0FBT0MsZUFBZU8sRUFBRSxhQUFhLENBQUNELE9BQU0sSUFBSyxNQUFNYyxFQUFFbXZCLElBQUksSUFBSSxJQUFJaHdCLEtBQUtnd0IsRUFBRSxHQUFHQSxFQUFFcnZCLGVBQWVYLElBQUksT0FBT2d3QixFQUFFaHdCLEdBQUcsT0FBTSxFQUFHLE9BQU0sR0FBSSxNQUFNSixFQUFFMkgsY0FBY3BGLEtBQUsrN0IsU0FBUyxLQUFLLzdCLEtBQUtrTSxTQUFTLEtBQUtsTSxLQUFLb2EsU0FBUyxLQUFLcGEsS0FBS3FHLE1BQU0sQ0FBQ3NCLE1BQU0sS0FBSzhOLE1BQU0sS0FBS0MsT0FBTyxLQUFLYSxRQUFRLEtBQUtDLE1BQU0sS0FBS25NLFVBQVUsQ0FBQ0MsT0FBTSxFQUFHK0osSUFBSSxHQUFHRSxRQUFRLEtBQUtDLFFBQVEsS0FBS2tDLGFBQWEsS0FBS0MsU0FBUyxDQUFDbEIsTUFBTSxFQUFFQyxPQUFPLElBQUkxVixLQUFLcWEsU0FBUyxLQUFLcmEsS0FBS3NHLE1BQU0sQ0FBQ3FCLE1BQU0sS0FBSzBVLFdBQVcsS0FBS0UsZ0JBQWdCLEtBQUszVSxhQUFhLE1BQU0sYUFBYSxPQUFPbkssRUFBRXcrQixnQkFBZ0JqOEIsT0FBT3ZDLEVBQUV5K0IsYUFBYWw4QixPQUFPdkMsRUFBRTArQixhQUFhbjhCLE1BQU0sdUJBQXVCNnRCLEdBQUcsT0FBT252QixFQUFFbXZCLEdBQUcsb0JBQW9CQSxHQUFHLE9BQU9BLEVBQUV6VCxVQUFVMWIsRUFBRW12QixFQUFFeG5CLE9BQU8sb0JBQW9Cd25CLEdBQUcsT0FBT0EsRUFBRXhULFVBQVUzYixFQUFFbXZCLEVBQUV4bkIsUUFBUXhJLEVBQUVnSCxRQUFRcEgsR0FBRyxTQUFTb3dCLEVBQUVod0IsRUFBRWxCLEdBQWdCVSxPQUFPQyxlQUFlTyxFQUFFLGFBQWEsQ0FBQ0QsT0FBTSxJQUFLLE1BQU1jLEVBQUUsQ0FBQzh0QixZQUFZLGVBQWV3QixrQkFBa0Isb0JBQW9CVCxnQkFBZ0Isa0JBQWtCSixhQUFhLGdCQUFnQjF2QixFQUFFLENBQUN1YyxZQUFZLGNBQWNVLGVBQWUsaUJBQWlCTyxZQUFZLGNBQWMrQyxnQkFBZ0Isa0JBQWtCWSxzQkFBc0Isd0JBQXdCWCxzQkFBc0Isd0JBQXdCL0IsV0FBVyxjQUFjMU4sRUFBRSxDQUFDNGtCLGVBQWUsaUJBQWlCcnFCLFlBQVksY0FBY2dzQixjQUFjLGdCQUFnQmtDLFlBQVksY0FBY2xELGFBQWEsZUFBZVQscUJBQXFCLHdCQUF3QmwxQixFQUFFLENBQUMrNEIsa0JBQWtCLHFCQUFxQi81QixFQUFFLENBQUNpNkIsb0JBQW9CLHVCQUF1QnA2QixFQUFFSSxPQUFPK04sT0FBTyxHQUFHMU0sRUFBRWpCLEVBQUUrUSxFQUFFcFEsRUFBRWhCLEdBQUdSLEVBQUUsR0FBR3lpQixFQUFFLEdBQUcsSUFBSSxJQUFJd08sS0FBSzV3QixFQUFFQSxFQUFFdUIsZUFBZXF2QixJQUFJanhCLEVBQUVzRSxLQUFLakUsRUFBRTR3QixJQUFJLElBQUksSUFBSUEsS0FBSzV3QixFQUFFQSxFQUFFdUIsZUFBZXF2QixJQUFJeE8sRUFBRW5lLEtBQUtqRSxFQUFFNHdCLElBQUlod0IsRUFBRWdILFFBQVEsQ0FBQ3l5QixVQUFVcjZCLEVBQUVtNkIsV0FBV2g2QixFQUFFeUssYUFBYTJHLEVBQUUxRyxhQUFhckssRUFBRXk1QixXQUFXOTRCLEVBQUU2dEIsY0FBY3Z0QixFQUFFNjRCLGlCQUFpQjM2QixFQUFFNDZCLGlCQUFpQm5ZLEVBQUVvWSxhQUFhLENBQUNDLGNBQWMsZ0JBQWdCQyxVQUFVLGVBQWUsU0FBUzlKLEVBQUVod0IsRUFBRWxCLEdBQWdCVSxPQUFPQyxlQUFlTyxFQUFFLGFBQWEsQ0FBQ0QsT0FBTSxJQUFLQyxFQUFFc2QsZUFBZSxNQUFNL1YsWUFBWXlvQixHQUFHLE1BQU1od0IsRUFBRSxDQUFDd2UsV0FBVyxLQUFLelUsYUFBYSxFQUFFRCxNQUFNLFlBQVlxVixPQUFPLENBQUMsR0FBRyxJQUFJLElBQUksR0FBRzlRLFNBQVMsRUFBRXJGLEdBQUcsRUFBRWtFLGtCQUFrQixHQUFHd1IsZ0JBQWdCLEVBQUV6RixVQUFVLElBQUl0VyxLQUFLLFNBQVMsT0FBT3F0QixFQUFFeHdCLE9BQU8rTixPQUFPLEdBQUd2TixFQUFFZ3dCLEdBQUdod0IsRUFBRSxVQUFVbUMsS0FBS0QsS0FBSyxPQUFPbEMsRUFBRXFkLGVBQWUsTUFBTTlWLFlBQVl5b0IsR0FBRyxNQUFNaHdCLEVBQUUsQ0FBQzZoQixLQUFLLEtBQUt2TixJQUFJLElBQUl6TSxXQUFXLEdBQUcyTSxJQUFJLElBQUkzTSxXQUFXLEdBQUdnUixhQUFhLElBQUkvTyxNQUFNLGNBQWN5TyxZQUFZLElBQUlELFdBQVcsS0FBS2pLLFNBQVMsRUFBRTdCLFVBQVUsQ0FBQ0MsT0FBTSxFQUFHK0osSUFBSSxHQUFHRSxRQUFRLEtBQUtDLFFBQVEsS0FBSzNOLEdBQUcsRUFBRTJQLE1BQU0sTUFBTUYsY0FBYyxJQUFJRCxhQUFhLEtBQUtFLFFBQVEsT0FBT3hMLGtCQUFrQixHQUFHNEwsU0FBUyxDQUFDakIsT0FBTyxFQUFFRCxNQUFNLEdBQUdxQixVQUFVLElBQUl0VyxLQUFLLFNBQVMsT0FBT3F0QixFQUFFeHdCLE9BQU8rTixPQUFPLEdBQUd2TixFQUFFZ3dCLEdBQUdod0IsRUFBRSxVQUFVbUMsS0FBS0QsS0FBSyxLQUFLQyxLQUFLbVMsSUFBSSxLQUFLblMsS0FBS3FTLElBQUksUUFBUSxTQUFTd2IsRUFBRWh3QixFQUFFbEIsR0FBZ0JVLE9BQU9DLGVBQWVPLEVBQUUsYUFBYSxDQUFDRCxPQUFNLElBQUssTUFBTWMsRUFBRTBHLFlBQVl5b0IsR0FBRyxJQUFJaHdCLEVBQUVhLEVBQUV5L0IsYUFBYSxPQUFPdFEsRUFBRXh3QixPQUFPK04sT0FBTyxHQUFHdk4sRUFBRWd3QixHQUFHaHdCLEVBQUUsb0JBQW9CLE1BQU0sQ0FBQzZNLElBQUksS0FBS1csSUFBSSxLQUFLN0YsS0FBSyxJQUFJRSxhQUFhN0gsRUFBRThsQixpQkFBaUJqbEIsRUFBRSxNQUFNakIsRUFBRTJILFlBQVl5b0IsR0FBRyxJQUFJaHdCLEVBQUVKLEVBQUUwZ0MsYUFBYSxPQUFPdFEsRUFBRXh3QixPQUFPK04sT0FBTyxHQUFHdk4sRUFBRWd3QixHQUFHaHdCLEVBQUUsb0JBQW9CLE1BQU0sQ0FBQzZNLElBQUksS0FBS1csSUFBSSxLQUFLc0QsWUFBVyxFQUFHOUMsVUFBVSxLQUFLckcsS0FBSyxJQUFJRSxhQUFhN0gsRUFBRXFtQixpQkFBaUJ6bUIsR0FBRyxTQUFTb3dCLEVBQUVod0IsRUFBRWxCLEdBQWdCa3hCLEVBQUVweEIsUUFBUSxDQUFDK0ssUUFBUTdLLEVBQUUsSUFBSWtJLFFBQVE0QyxVQUFVOUssRUFBRSxHQUFHa0ksUUFBUTZDLGNBQWMvSyxFQUFFLElBQUlrSSxVQUFVLFNBQVNncEIsRUFBRWh3QixFQUFFbEIsR0FBZ0JVLE9BQU9DLGVBQWVPLEVBQUUsYUFBYSxDQUFDRCxPQUFNLElBQUssSUFBSWMsRUFBVThQLEdBQUc5UCxFQUFUL0IsRUFBRSxNQUFhK0IsRUFBRVgsV0FBV1csRUFBRSxDQUFDbUcsUUFBUW5HLEdBQUcsTUFBTU4sRUFBRSxrQkFBa0J5dkIsR0FBRyxJQUFJaHdCLEVBQUVnd0IsRUFBRWx4QixFQUFFa0IsRUFBRTRILFdBQVcvRyxFQUFFLElBQUlnSCxXQUFXL0ksR0FBR2MsRUFBRSxFQUFFLElBQUksSUFBSW93QixFQUFFLEVBQUVBLEVBQUVseEIsRUFBRWt4QixJQUFJQSxHQUFHLEdBQUcsSUFBSWh3QixFQUFFZ3dCLElBQUksSUFBSWh3QixFQUFFZ3dCLEVBQUUsSUFBSSxJQUFJaHdCLEVBQUVnd0IsRUFBRSxLQUFLbnZCLEVBQUVqQixHQUFHSSxFQUFFZ3dCLEdBQUdwd0IsS0FBSyxPQUFPLElBQUlpSSxXQUFXaEgsRUFBRTBSLE9BQU8sRUFBRTNTLEdBQUcsZ0JBQWdCb3dCLEdBQUcsSUFBSWh3QixFQUFFTyxFQUFFd1UsV0FBV2liLEdBQUdseEIsRUFBRSxJQUFJNlIsRUFBRTNKLFFBQVFoSCxHQUFHbEIsRUFBRStULFdBQVcsSUFBSWhTLEVBQUUvQixFQUFFK1QsV0FBVy9ULEVBQUUrVCxXQUFXLElBQUlqVCxFQUFFZCxFQUFFK1QsV0FBVy9ULEVBQUVrVSxVQUFVLElBQUl6VCxFQUFFZ0IsRUFBRThVLGlCQUFpQnhVLEdBQUd6QixFQUFFbUIsRUFBRWdWLGVBQWUzVixHQUFHYixFQUFFLEVBQUV5aUIsRUFBRSxJQUFzQnJpQixFQUFFLEVBQUUsSUFBSSxNQUFNMEIsR0FBRyxNQUFNQSxHQUFHLE1BQU1BLEdBQUcsTUFBTUEsR0FBRyxLQUFLQSxHQUFHLEtBQUtBLEdBQUcsS0FBS0EsR0FBRyxNQUFNQSxHQUFHLE1BQU1BLEdBQUcsTUFBTUEsR0FBRyxNQUFNQSxLQUFLLEtBQUs5QixFQUFFRCxFQUFFa1UsWUFBWWxVLEVBQUUyVCxTQUFTLEdBQUcxVCxHQUFHLElBQUl5aUIsRUFBcEssQ0FBQyxFQUFFLElBQUksSUFBSSxLQUE2SnppQixJQUFJSSxFQUFFTCxFQUFFa1UsVUFBVSxFQUFFbFUsRUFBRWtVLFVBQVVsVSxFQUFFMlQsU0FBUyxHQUFHM1QsRUFBRThULFlBQVksQ0FBQyxJQUFJb2QsRUFBRSxJQUFJanhCLEVBQUUsRUFBRSxHQUFHLElBQUksSUFBSWlCLEVBQUUsRUFBRUEsRUFBRWd3QixFQUFFaHdCLElBQUlsQixFQUFFOFQsYUFBYTVTLEVBQUUsRUFBRU8sRUFBRXFWLGlCQUFpQjlXLEVBQUUsSUFBSXlCLEVBQUVxVixpQkFBaUI5VyxFQUFFLEtBQUtBLEVBQUVrVSxVQUFVLElBQUlxMEIsRUFBRXZvQyxFQUFFa1UsVUFBVSxHQUFHLElBQUlxMEIsRUFBRXZvQyxFQUFFa1UsZUFBZSxHQUFHLElBQUlxMEIsRUFBRSxDQUFDdm9DLEVBQUUyVCxTQUFTLEdBQUczVCxFQUFFb1UsVUFBVXBVLEVBQUVvVSxVQUFVLElBQUk4YyxFQUFFbHhCLEVBQUVrVSxVQUFVLElBQUksSUFBSWhULEVBQUUsRUFBRUEsRUFBRWd3QixFQUFFaHdCLElBQUlsQixFQUFFb1UsVUFBVXBVLEVBQUVrVSxVQUFVbFUsRUFBRTJULFNBQVMsR0FBRyxJQUFJN1IsRUFBRTlCLEVBQUVrVSxVQUFVOVQsRUFBRUosRUFBRWtVLFVBQVVzMEIsRUFBRXhvQyxFQUFFMlQsU0FBUyxHQUFHLElBQUk2MEIsR0FBR3hvQyxFQUFFMlQsU0FBUyxHQUFHM1QsRUFBRTJULFNBQVMsR0FBRyxJQUFJODBCLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRTVvQyxFQUFFOFQsYUFBYTIwQixFQUFFem9DLEVBQUVrVSxVQUFVdzBCLEVBQUUxb0MsRUFBRWtVLFVBQVV5MEIsRUFBRTNvQyxFQUFFa1UsVUFBVTAwQixFQUFFNW9DLEVBQUVrVSxXQUFXLElBQUkyMEIsRUFBRSxFQUFFakosRUFBRSxFQUFFa0osRUFBRSxFQUFFaDNCLEdBQUUsRUFBRzFQLEVBQUUsRUFBRTJtQyxFQUFFLEVBQUUsR0FBRy9vQyxFQUFFOFQsV0FBVyxDQUFDLEdBQUc5VCxFQUFFOFQsV0FBVyxDQUFDLElBQUlvZCxFQUFFbHhCLEVBQUUrVCxXQUFXN1MsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxFQUFFLEdBQUdhLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHbXZCLEVBQUUsR0FBR0EsRUFBRSxJQUFJMlgsRUFBRTNuQyxFQUFFZ3dCLEVBQUUsR0FBRzBPLEVBQUU3OUIsRUFBRW12QixFQUFFLElBQUksTUFBTUEsSUFBSTJYLEVBQUU3b0MsRUFBRStULFlBQVksRUFBRS9ULEVBQUUrVCxXQUFXNnJCLEVBQUU1L0IsRUFBRStULFlBQVksRUFBRS9ULEVBQUUrVCxZQUFZLEdBQUcvVCxFQUFFOFQsWUFBWTlULEVBQUU4VCxXQUFXOVQsRUFBRThULGFBQWE5VCxFQUFFMlQsU0FBUyxHQUFHM1QsRUFBRThULFlBQVk5VCxFQUFFMlQsU0FBUyxLQUFLM1QsRUFBRThULGFBQWE5VCxFQUFFa1UsVUFBVWxVLEVBQUVrVSxXQUFXbFUsRUFBRThULFdBQVcsQ0FBQyxJQUFJb2QsRUFBRWx4QixFQUFFMlQsU0FBUyxJQUFJelMsRUFBRWxCLEVBQUUyVCxTQUFTLElBQUk3QixFQUFFOVIsRUFBRThULFdBQVdnMUIsR0FBRzFtQyxFQUFFbEIsSUFBSTZuQyxFQUFFLEVBQUU3WCxJQUFJLElBQUl4c0IsRUFBRSxFQUFFLElBQUlta0MsR0FBRyxJQUFJakosSUFBSWw3QixFQUFFbWtDLEVBQUVqSixHQUFHLElBQUlvSixFQUFFLEVBQUVDLEVBQUUsRUFBSyxJQUFJaHBDLEdBQUUrb0MsRUFBRSxFQUFFQyxFQUFFLEVBQUVULElBQU9RLEVBQUUsSUFBSS9vQyxFQUFFLEVBQUUsRUFBRWdwQyxHQUFHLElBQUlocEMsRUFBRSxFQUFFLElBQUksRUFBRXVvQyxJQUFHLElBQUlVLEVBQUUsSUFBSXBuQyxFQUFFLEdBQUdxbkMsRUFBRSxJQUFJL29DLEVBQUUsSUFBSSxFQUFFb29DLEdBQUdVLElBQUlULEVBQUVDLEdBQUdNLEVBQUVHLElBQUlSLEVBQUVDLEdBQUdLLEVBQUUsSUFBSUcsRUFBRTk2QixLQUFLbUssS0FBS3l3QixFQUFFeGtDLEdBQUcsT0FBTzFFLEVBQUVzSixVQUFVdEosRUFBRSxLQUFLLENBQUNzVyxlQUFlN1YsRUFBRStWLGFBQWFsVyxFQUFFc1csVUFBVXZXLEVBQUVzVyxjQUFjK0wsRUFBRWhLLHFCQUFxQmpYLEVBQUVrWCxzQkFBc0IrSixHQUFHOUosV0FBVyxDQUFDakwsTUFBTW1FLEVBQUU0RixJQUFJb3hCLEVBQUVqeEIsUUFBUWt4QixFQUFFbnhCLFFBQVF4VixHQUFHeVcsVUFBVSxDQUFDQyxNQUFNK3ZCLEVBQUU5dkIsT0FBTzZtQixHQUFHNW1CLFdBQVcsQ0FBQ0YsTUFBTW93QixFQUFFbndCLE9BQU9vd0IsR0FBR2x3QixhQUFhLENBQUNILE1BQU1zd0IsRUFBRXJ3QixPQUFPb3dCLElBQUksd0JBQXdCalksRUFBRWh3QixHQUFHLElBQUlsQixFQUFFLEVBQUUrQixFQUFFLEVBQUVqQixFQUFFLEVBQUUsSUFBSSxJQUFJK1EsRUFBRSxFQUFFQSxFQUFFM1EsRUFBRTJRLElBQUksSUFBSTlQLElBQUlBLEdBQUcvQixHQUFHYyxFQUFFb3dCLEVBQUU5YyxXQUFXLEtBQUssS0FBS3BVLEVBQUUsSUFBSStCLEVBQUUvQixFQUFFK0IsRUFBRSx3QkFBd0JtdkIsR0FBRyxPQUFPQSxHQUFHLEtBQUssR0FBRyxNQUFNLFdBQVcsS0FBSyxHQUFHLE1BQU0sT0FBTyxLQUFLLEdBQUcsTUFBTSxXQUFXLEtBQUssSUFBSSxNQUFNLE9BQU8sS0FBSyxJQUFJLE1BQU0sU0FBUyxLQUFLLElBQUksTUFBTSxVQUFVLEtBQUssSUFBSSxNQUFNLFVBQVUsUUFBUSxNQUFNLFdBQVcsc0JBQXNCQSxHQUFHLE9BQU9BLEVBQUUsSUFBSTdYLFFBQVEsR0FBRyw2QkFBNkI2WCxHQUFHLE9BQU9BLEdBQUcsS0FBSyxJQUFJLE1BQU0sUUFBUSxLQUFLLElBQUksTUFBTSxRQUFRLEtBQUssSUFBSSxNQUFNLFFBQVEsUUFBUSxNQUFNLFdBQVcsbUJBQW1CQSxHQUFHLElBQUlod0IsRUFBRSxHQUFHZ3dCLEdBQUdBLEVBQUVsWSxhQUFhOVgsRUFBRXNZLFdBQVcwWCxFQUFFbFksV0FBV0YsTUFBTTVYLEVBQUV1WSxZQUFZeVgsRUFBRWxZLFdBQVdELE9BQU83WCxFQUFFd1ksYUFBYXdYLEVBQUVqWSxhQUFhSCxNQUFNNVgsRUFBRXlZLGNBQWN1WCxFQUFFalksYUFBYUYsUUFBUTdYLEVBQUUwWSxRQUFRc1gsRUFBRTVhLGVBQWVwVixFQUFFMlksTUFBTXFYLEVBQUUxYSxhQUFhdFYsRUFBRTRZLFNBQVNvWCxFQUFFdGEsVUFBVTFWLEVBQUU2WSxhQUFhbVgsRUFBRXZhLGNBQWN6VixFQUFFOFksU0FBUyxDQUFDbEIsTUFBTW9ZLEVBQUVyWSxVQUFVQyxNQUFNQyxPQUFPbVksRUFBRXJZLFVBQVVFLFFBQVE3WCxFQUFFd00sVUFBVXdqQixFQUFFdFksV0FBVyxJQUFJNVksRUFBRWtCLEVBQUV3TSxVQUFVbUssUUFBUTlWLEVBQUViLEVBQUV3TSxVQUFVa0ssUUFBUTFXLEVBQUVrTixrQkFBa0JFLEtBQUtDLE1BQU1yTixFQUFFaVosV0FBV25hLEVBQUUrQixLQUFLYixFQUFFZ0gsUUFBUXpHLEdBQUcsU0FBU3l2QixFQUFFaHdCLEVBQUVsQixHQUFnQmt4QixFQUFFcHhCLFFBQVEsQ0FBQ21JLE1BQU1qSSxFQUFFLEdBQUdrSSxRQUFRQyxPQUFPbkksRUFBRSxHQUFHbUksT0FBT0MsV0FBV3BJLEVBQUUsR0FBR29JLFdBQVdDLFdBQVdySSxFQUFFLEdBQUdxSSxXQUFXQyxTQUFTdEksRUFBRSxJQUFJc0ksU0FBU0MsWUFBWXZJLEVBQUUsSUFBSXVJLFlBQVlDLFVBQVV4SSxFQUFFLElBQUlrSSxVQUFVLFNBQVNncEIsRUFBRWh3QixFQUFFbEIsR0FBZ0JVLE9BQU9DLGVBQWVPLEVBQUUsYUFBYSxDQUFDRCxPQUFNLElBQUtDLEVBQUVvSCxTQUFTLE1BQU1HLFlBQVl5b0IsR0FBRzd0QixLQUFLbUIsT0FBTzBzQixHQUFHLEVBQUU3dEIsS0FBS3FGLFdBQVd3b0IsR0FBRyxFQUFFN3RCLEtBQUtzRixNQUFNLEdBQUd0RixLQUFLdUYsT0FBTyxFQUFFLEtBQUtzb0IsR0FBRzd0QixLQUFLc0YsTUFBTXBFLEtBQUsyc0IsR0FBRzd0QixLQUFLbUIsUUFBUTBzQixFQUFFcG9CLFdBQVd6RixLQUFLcUYsWUFBWXdvQixFQUFFcG9CLFdBQVcsTUFBTW9vQixHQUFHLEdBQUc3dEIsS0FBS3NGLE1BQU1uRSxPQUFPLEVBQUUsT0FBTyxJQUFJdUUsV0FBVyxHQUFHLFFBQUcsSUFBU21vQixFQUFFLE9BQU83dEIsS0FBSzJGLGVBQWUsR0FBRzNGLEtBQUt1RixPQUFPc29CLElBQUk3dEIsS0FBS3NGLE1BQU0sR0FBR25FLE9BQU8sQ0FBQyxJQUFJdEQsRUFBRW1DLEtBQUtzRixNQUFNLEdBQUdNLE1BQU01RixLQUFLdUYsT0FBT3ZGLEtBQUt1RixPQUFPc29CLEdBQUcsT0FBTzd0QixLQUFLdUYsT0FBTyxFQUFFdkYsS0FBS3NGLE1BQU1sQixRQUFRcEUsS0FBS21CLFFBQVEwc0IsRUFBRWh3QixFQUFFLEdBQUdtQyxLQUFLdUYsT0FBT3NvQixFQUFFN3RCLEtBQUtzRixNQUFNLEdBQUduRSxPQUFPLENBQUMsSUFBSXRELEVBQUVtQyxLQUFLc0YsTUFBTSxHQUFHTSxNQUFNNUYsS0FBS3VGLE9BQU92RixLQUFLdUYsT0FBT3NvQixHQUFHLE9BQU83dEIsS0FBS3VGLFFBQVFzb0IsRUFBRTd0QixLQUFLbUIsUUFBUTBzQixFQUFFaHdCLEVBQUUsSUFBSUEsRUFBRSxJQUFJNkgsV0FBV21vQixHQUFHbHhCLEVBQUUsRUFBRSxLQUFLcUQsS0FBS3NGLE1BQU1uRSxPQUFPLEdBQUcwc0IsRUFBRSxHQUFHLENBQUMsR0FBRzd0QixLQUFLdUYsT0FBT3NvQixFQUFFN3RCLEtBQUtzRixNQUFNLEdBQUduRSxPQUFPLENBQUMsSUFBSXpDLEVBQUVzQixLQUFLc0YsTUFBTSxHQUFHTSxNQUFNNUYsS0FBS3VGLE9BQU92RixLQUFLdUYsT0FBT3NvQixHQUFHaHdCLEVBQUVnRixJQUFJbkUsRUFBRS9CLEdBQUdxRCxLQUFLdUYsUUFBUXNvQixFQUFFN3RCLEtBQUttQixRQUFRMHNCLEVBQUVBLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSW52QixFQUFFc0IsS0FBS3NGLE1BQU0sR0FBR25FLE9BQU9uQixLQUFLdUYsT0FBTzFILEVBQUVnRixJQUFJN0MsS0FBS3NGLE1BQU0sR0FBR00sTUFBTTVGLEtBQUt1RixPQUFPdkYsS0FBS3NGLE1BQU0sR0FBR25FLFFBQVF4RSxHQUFHcUQsS0FBS3NGLE1BQU1sQixRQUFRcEUsS0FBS3VGLE9BQU8sRUFBRTVJLEdBQUcrQixFQUFFc0IsS0FBS21CLFFBQVF6QyxFQUFFbXZCLEdBQUdudkIsR0FBRyxPQUFPYixFQUFFLFFBQVFtQyxLQUFLc0YsTUFBTSxHQUFHdEYsS0FBS21CLE9BQU8sRUFBRW5CLEtBQUt1RixPQUFPLEVBQUUsVUFBVXZGLEtBQUtnRyxRQUFRaEcsS0FBS3FGLFdBQVcsRUFBRSxlQUFlLE9BQU9yRixLQUFLbUIsUUFBUW5CLEtBQUtzRixNQUFNLEdBQUduRSxPQUFPbkIsS0FBS3VGLE9BQU8sRUFBRXZGLEtBQUtzRixNQUFNbEIsUUFBUSxNQUFNeXBCLEVBQUVod0IsR0FBRyxJQUFJbEIsRUFBRSxFQUFFK0IsRUFBRXNCLEtBQUt1RixPQUFPc29CLEVBQUUsS0FBS252QixFQUFFc0IsS0FBS3VGLE9BQU8xSCxFQUFFZ3dCLEdBQUdudkIsRUFBRXNCLEtBQUtzRixNQUFNLEdBQUduRSxPQUFPeEUsRUFBRSxJQUFJQSxFQUFFcUQsS0FBS3NGLE1BQU0sR0FBRzVHLEdBQUdzQixLQUFLc0YsTUFBTSxLQUFLM0ksRUFBRSxJQUFJQSxFQUFFcUQsS0FBS3NGLE1BQU0sR0FBRzVHLEVBQUVzQixLQUFLc0YsTUFBTSxHQUFHbkUsU0FBU3pDLElBQUksT0FBTy9CLElBQUlrQixFQUFFcUgsWUFBWSxNQUFNRSxjQUFjcEYsS0FBS3FHLE1BQU0sR0FBR3JHLEtBQUtzRyxNQUFNLEdBQUcsVUFBVXRHLEtBQUtxRyxNQUFNLEdBQUdyRyxLQUFLc0csTUFBTSxNQUFNLFNBQVN1bkIsRUFBRWh3QixFQUFFbEIsR0FBR2t4QixFQUFFcHhCLFFBQVFFLEVBQUUsS0FBSyxTQUFTa3hCLEVBQUVod0IsRUFBRWxCLEdBQWdCLElBQUkrQixFQUFFTixFQUFFekIsRUFBRSxJQUFJYyxFQUFFZCxFQUFFLEdBQUc2UixFQUFFcFEsRUFBRXpCLEVBQUUsS0FBSyxTQUFTeUIsRUFBRXl2QixHQUFHLE9BQU9BLEdBQUdBLEVBQUU5dkIsV0FBVzh2QixFQUFFLENBQUNocEIsUUFBUWdwQixHQUFHLE1BQU16d0IsRUFBRUssRUFBRXNLLE9BQU93dkIsaUJBQWlCdDZCLEVBQUUsQ0FBQzR3QixFQUFFaHdCLEtBQUssSUFBSWd3QixFQUFFN1EsT0FBT2dwQixRQUFRblksRUFBRTNoQixTQUFTMmhCLEVBQUU2VSxZQUFZLEVBQUUsQ0FBQyxNQUFNL2xDLEVBQUVreEIsRUFBRWdWLG1CQUFtQmhWLEVBQUU2VSxZQUFZL2xDLEVBQUUsR0FBRyxLQUFLa3hCLEVBQUU3c0IsS0FBSyxTQUFTbkQsRUFBRWdrQyxJQUFJakMsaUJBQWlCLE1BQU1oakMsVUFBVThCLEVBQUVtRyxRQUFRTyxZQUFZeW9CLEdBQUcxbUIsTUFBTTBtQixHQUFHN3RCLEtBQUt3RCxRQUFRLElBQUkvRixFQUFFNjNCLFFBQVFsNEIsR0FBRzRDLEtBQUs0akMsYUFBYSxRQUFRLE1BQU0vVixFQUFFN3RCLEtBQUt3RCxRQUFRbzFCLFNBQVMsaUJBQWlCcHFCLEVBQUUzSixRQUF6QzdFLENBQWtEQSxNQUFNQSxLQUFLK2pDLElBQUlsVyxFQUFFN3RCLEtBQUt3RCxRQUFRekQsT0FBT29ILE1BQU1oQixNQUFNMG5CLEVBQUVnVSxJQUFJN2dCLEtBQUssYUFBYWhoQixLQUFLNkQsR0FBRyxhQUFhN0QsS0FBS2ltQyxpQkFBaUI5bkMsS0FBSzZCLE9BQU9BLEtBQUs2RCxHQUFHLFVBQVU3RCxLQUFLa21DLFdBQVcvbkMsS0FBSzZCLE9BQU9BLEtBQUsrRCxLQUFLLFVBQVUvRCxLQUFLZ2xDLFNBQVM3bUMsS0FBSzZCLE9BQU8sbUJBQW1CQSxLQUFLdWpDLFdBQVd0bUMsRUFBRStDLEtBQUtBLEtBQUsrakMsS0FBSyxhQUFhLE1BQU1sVyxFQUFFN3RCLEtBQUswaUMsWUFBWTdrQyxFQUFFbUMsS0FBSzZpQyxvQkFBb0JoVixFQUFFaHdCLEVBQUUsSUFBSWd3QixFQUFFaHdCLEVBQUUsS0FBS21DLEtBQUsrakMsSUFBSW5RLEtBQUs1ekIsS0FBSzBpQyxhQUFhLFdBQVcxaUMsS0FBS3dELFFBQVF5QyxVQUFVakcsS0FBS3dELFFBQVEsS0FBS3hELEtBQUsrakMsSUFBSSxLQUFLLFNBQVNsVyxFQUFFN3RCLEtBQUswaUMsYUFBYSxNQUFNN2tDLEVBQUVtQyxLQUFLNmlDLG1CQUFtQmhsQyxFQUFFLEdBQUdnd0IsR0FBRzd0QixLQUFLZ2QsT0FBT3doQixhQUFhLElBQUksR0FBR3grQixLQUFLK2pDLElBQUlvQyxTQUFTdG9DLEVBQUUsR0FBRyxHQUFHLFVBQVUsT0FBT21DLEtBQUtpbEMsV0FBVyxRQUFRcFgsR0FBRzd0QixLQUFLdWhDLE9BQU92a0IsT0FBT2dFLElBQUk2TSxFQUFFN3RCLEtBQUt5a0MsT0FBT3prQyxLQUFLbUcsTUFBTTBuQixJQUFJN3RCLEtBQUt3akMsUUFBUXhqQyxLQUFLK0QsS0FBSyxRQUFRLEtBQUsvRCxLQUFLbUcsTUFBTTBuQixLQUFLN3RCLEtBQUsrRCxLQUFLLFVBQVUsS0FBSy9ELEtBQUs4a0MsVUFBVTlrQyxLQUFLK0QsS0FBSyxVQUFVLEtBQUsvRCxLQUFLMGlDLFlBQVksS0FBSzdVLEVBQUVweEIsUUFBUUcsR0FBRyxTQUFTaXhCLEVBQUVod0IsRUFBRWxCLEdBQWdCVSxPQUFPQyxlQUFlTyxFQUFFLGFBQWEsQ0FBQ0QsT0FBTSxJQUFLLElBQUljLEVBQVM4UCxHQUFHOVAsRUFBUi9CLEVBQUUsS0FBWStCLEVBQUVYLFdBQVdXLEVBQUUsQ0FBQ21HLFFBQVFuRyxHQUFHTixFQUFFekIsRUFBRSxJQUFJLE1BQU1TLEVBQUUsU0FBU1MsRUFBRWdILFFBQVEsTUFBTU8sWUFBWXlvQixFQUFFLElBQUk3dEIsS0FBS280QixTQUFTLElBQUloNkIsRUFBRTBCLGFBQWFFLEtBQUtxNEIsYUFBYSxHQUFHcjRCLEtBQUtzNEIsUUFBUSxHQUFHdDRCLEtBQUt1NEIsU0FBUSxFQUFHdjRCLEtBQUsrYixVQUFVLElBQUl2TixFQUFFM0osUUFBUTdFLEtBQUttNEIsY0FBY3RLLEVBQUU3dEIsS0FBS3c0QixPQUFPLEdBQUcsWUFBWTNLLEdBQWdDLE9BQXJCN3RCLEtBQUtxNEIsYUFBYXhLLElBQWEsS0FBSyxhQUFhQSxLQUFLaHdCLEdBQUcsR0FBR21DLEtBQUtzNEIsUUFBUXpLLEdBQUcsQ0FBQyxNQUFNbHhCLEVBQUUsSUFBSXFELEtBQUtzNEIsUUFBUXpLLE1BQU1od0IsR0FBRyxPQUFPbUMsS0FBS3E0QixhQUFheEssR0FBR2x4QixFQUFFQSxFQUFFb0QsTUFBTXBELEVBQUVvRCxPQUFPcEQsRUFBRSxNQUFNLElBQUkyRSxTQUFTdXNCLGlCQUFpQixLQUFLQSxHQUFHLElBQUk3dEIsS0FBS3U0QixRQUFRLENBQUMsSUFBSSxJQUFJMTZCLEtBQUttQyxLQUFLczRCLFFBQVF0NEIsS0FBS3M0QixRQUFROTVCLGVBQWVYLEtBQUttQyxLQUFLcTRCLGFBQWF4NkIsSUFBSW1DLEtBQUswNEIsYUFBYTc2QixFQUFFZ3dCLEdBQUc3dEIsS0FBS3U0QixTQUFRLEdBQUksU0FBUzFLLEVBQUVod0IsR0FBRyxNQUFNbEIsRUFBRXFELEtBQUtvNEIsU0FBUzE1QixFQUFFc0IsS0FBSys0QixvQkFBb0I1NkIsS0FBSzZCLE1BQU12QyxFQUFFdUMsS0FBSyxPQUFPQSxLQUFLczRCLFFBQVF6SyxHQUFHLGNBQWNod0IsRUFBRXVILGVBQWV2SCxHQUFHc0osU0FBU3RKLEdBQUdtQyxLQUFLMkQsVUFBVSxHQUFHM0QsS0FBS2k1QixjQUFjLEdBQUdqNUIsS0FBS29ILElBQUl5bUIsRUFBRTd0QixLQUFLaVAsU0FBU3hSLEVBQUUsR0FBR0ksRUFBRUosR0FBRyxPQUFPaUIsRUFBRWIsR0FBR21DLEtBQUsyRCxVQUFVOUYsR0FBR21DLEtBQUsyRCxVQUFVOUYsR0FBR3FELEtBQUt6RCxHQUFHdUMsS0FBSzJELFVBQVU5RixHQUFHLENBQUNKLEdBQUdkLEVBQUVrSCxNQUFNaEcsSUFBSVQsSUFBSXl3QixJQUFJcHdCLEdBQUdkLEVBQUVrSCxHQUFHaEcsRUFBRUosR0FBRyxPQUFPb3dCLEVBQUVod0IsR0FBR2EsRUFBRW12QixHQUFHcHdCLEVBQUUrNkIsT0FBTzNLLEdBQUdwd0IsRUFBRSs2QixPQUFPM0ssR0FBRzNzQixLQUFLckQsR0FBR0osRUFBRSs2QixPQUFPM0ssR0FBRyxDQUFDaHdCLEdBQUcsS0FBS0EsRUFBRUosR0FBRyxPQUFPaUIsRUFBRWIsR0FBR21DLEtBQUtpNUIsY0FBY3A3QixHQUFHbUMsS0FBS2k1QixjQUFjcDdCLEdBQUdxRCxLQUFLekQsR0FBR3VDLEtBQUtpNUIsY0FBY3A3QixHQUFHLENBQUNKLEdBQUdkLEVBQUVvSCxRQUFRbEcsSUFBSVQsSUFBSXl3QixJQUFJcHdCLEdBQUdkLEVBQUVvSCxLQUFLbEcsRUFBRUosR0FBRyxLQUFLb3dCLEtBQUtod0IsR0FBR2EsRUFBRW12QixHQUFHLE1BQU1yZixFQUFFL1EsRUFBRSs2QixPQUFPLzZCLEVBQUUrNkIsT0FBTzNLLEdBQUcsS0FBSyxHQUFHcmYsRUFBRSxJQUFJLElBQUlxZixFQUFFLEVBQUVod0IsRUFBRTJRLEVBQUVyTixPQUFPMHNCLEVBQUVod0IsRUFBRWd3QixLQUFLLEVBQUdyZixFQUFFcWYsTUFBTSxPQUFPbHhCLEVBQUVxRSxLQUFLNnNCLEtBQUtod0IsR0FBRyxPQUFPZ3dCLEVBQUVod0IsS0FBS0osR0FBRyxPQUFPaUIsRUFBRWIsR0FBR2xCLEVBQUVxRSxRQUFRbkQsSUFBSVQsSUFBSXl3QixPQUFPcHdCLEdBQUcsSUFBSW93QixFQUFFaHdCLEdBQUcsT0FBT2EsRUFBRW12QixHQUFHbHhCLEVBQUU0SCxJQUFJc3BCLEVBQUVod0IsR0FBRyxrQkFBa0IsTUFBTUEsRUFBRVIsT0FBT2tCLFVBQVVDLGVBQWVMLEtBQUs2QixLQUFLMkQsV0FBVyxJQUFJLElBQUlqRixLQUFLc0IsS0FBSzJELFVBQVUsR0FBRzlGLEVBQUVhLEdBQUcsQ0FBQyxNQUFNYixFQUFFbUMsS0FBSzJELFVBQVVqRixJQUFJLEdBQUcsSUFBSSxJQUFJakIsRUFBRSxFQUFFQSxFQUFFSSxFQUFFc0QsT0FBTzFELElBQUksQ0FBQyxNQUFNK1EsRUFBRTNRLEVBQUVKLEdBQUdkLEVBQUU0SCxJQUFJN0YsRUFBRThQLEdBQUc3UixFQUFFNEgsT0FBTzdGLElBQUl0QixJQUFJeXdCLElBQUlyZixJQUFJLElBQUksSUFBSTlQLEtBQUtzQixLQUFLaTVCLGNBQWMsR0FBR3A3QixFQUFFYSxHQUFHLENBQUMsTUFBTWIsRUFBRW1DLEtBQUtpNUIsY0FBY3Y2QixJQUFJLEdBQUcsSUFBSSxJQUFJakIsRUFBRSxFQUFFQSxFQUFFSSxFQUFFc0QsT0FBTzFELElBQUksQ0FBQyxNQUFNK1EsRUFBRTNRLEVBQUVKLEdBQUdkLEVBQUU0SCxJQUFJN0YsRUFBRThQLEdBQUc3UixFQUFFNEgsT0FBTzdGLElBQUl0QixJQUFJeXdCLElBQUlyZixLQUFLLFVBQVUsR0FBR3hPLEtBQUtzNUIsa0JBQWtCdDVCLEtBQUsyRCxVQUFVLFVBQVVsRyxFQUFFNDZCLGFBQWF4SyxHQUFHMW1CLE1BQU1sQixRQUFRLE9BQU9rQixNQUFNbEIsWUFBWSxJQUFJcEksSUFBSW1DLEtBQUswNEIsYUFBYTdLLEtBQUtod0IsR0FBRyxtQkFBbUJSLE9BQU9vSCxLQUFLekUsS0FBS3E0QixjQUFjOUksUUFBUTFCLElBQUk3dEIsS0FBS3E0QixhQUFheEssR0FBRzVuQixTQUFTakcsS0FBS3E0QixhQUFheEssR0FBRzVuQixZQUFZLFVBQVVqRyxLQUFLbzRCLFNBQVMsS0FBS3A0QixLQUFLbTRCLGNBQWMsR0FBR240QixLQUFLczRCLFFBQVEsS0FBS3Q0QixLQUFLaVAsU0FBUyxLQUFLalAsS0FBS3c0QixPQUFPLEtBQUt4NEIsS0FBS3k1QixtQkFBbUIsb0JBQW9CNUwsR0FBRyxJQUFJN3RCLEtBQUttNEIsY0FBYzlhLFFBQVF3USxHQUFHLEVBQUUsTUFBTSxJQUFJdnNCLG9DQUFvQ3VzQixRQUFRLFNBQVNBLEVBQUVod0IsRUFBRWxCLEdBQWdCLElBQUkrQixFQUFFakIsRUFBRSxpQkFBaUJ1QixRQUFRQSxRQUFRLEtBQUt3UCxFQUFFL1EsR0FBRyxtQkFBbUJBLEVBQUV5QixNQUFNekIsRUFBRXlCLE1BQU0sU0FBUzJ1QixFQUFFaHdCLEVBQUVsQixHQUFHLE9BQU8yQyxTQUFTZixVQUFVVyxNQUFNcEMsS0FBSyt3QixFQUFFaHdCLEVBQUVsQixJQUFJK0IsRUFBRWpCLEdBQUcsbUJBQW1CQSxFQUFFOEIsUUFBUTlCLEVBQUU4QixRQUFRbEMsT0FBT21DLHNCQUFzQixTQUFTcXVCLEdBQUcsT0FBT3h3QixPQUFPb0Msb0JBQW9Cb3VCLEdBQUdudUIsT0FBT3JDLE9BQU9tQyxzQkFBc0JxdUIsS0FBSyxTQUFTQSxHQUFHLE9BQU94d0IsT0FBT29DLG9CQUFvQm91QixJQUFJLElBQUl6dkIsRUFBRXdCLE9BQU9DLE9BQU8sU0FBU2d1QixHQUFHLE9BQU9BLEdBQUdBLEdBQUcsU0FBU3p3QixJQUFJQSxFQUFFMkMsS0FBS2pELEtBQUtrRCxNQUFNNnRCLEVBQUVweEIsUUFBUVcsRUFBRUEsRUFBRTBDLGFBQWExQyxFQUFFQSxFQUFFbUIsVUFBVTBCLGFBQVEsRUFBTzdDLEVBQUVtQixVQUFVMkIsYUFBYSxFQUFFOUMsRUFBRW1CLFVBQVU0QixtQkFBYyxFQUFPLElBQUlsRCxFQUFFLEdBQUcsU0FBU0wsRUFBRWl4QixHQUFHLFlBQU8sSUFBU0EsRUFBRTF0QixjQUFjL0MsRUFBRWdELG9CQUFvQnl0QixFQUFFMXRCLGNBQWMsU0FBU2tmLEVBQUV3TyxFQUFFaHdCLEVBQUVsQixFQUFFK0IsR0FBRyxJQUFJakIsRUFBRStRLEVBQUVwUSxFQUFFaEIsRUFBRSxHQUFHLG1CQUFtQlQsRUFBRSxNQUFNLElBQUltRSxVQUFVLDBFQUEwRW5FLEdBQUcsUUFBRyxLQUFVNlIsRUFBRXFmLEVBQUU1dEIsVUFBVXVPLEVBQUVxZixFQUFFNXRCLFFBQVE1QyxPQUFPWSxPQUFPLE1BQU00dkIsRUFBRTN0QixhQUFhLFNBQUksSUFBU3NPLEVBQUV6TixjQUFjOHNCLEVBQUU3c0IsS0FBSyxjQUFjbkQsRUFBRWxCLEVBQUU4RCxTQUFTOUQsRUFBRThELFNBQVM5RCxHQUFHNlIsRUFBRXFmLEVBQUU1dEIsU0FBUzdCLEVBQUVvUSxFQUFFM1EsU0FBSSxJQUFTTyxFQUFFQSxFQUFFb1EsRUFBRTNRLEdBQUdsQixJQUFJa3hCLEVBQUUzdEIsa0JBQWtCLEdBQUcsbUJBQW1COUIsRUFBRUEsRUFBRW9RLEVBQUUzUSxHQUFHYSxFQUFFLENBQUMvQixFQUFFeUIsR0FBRyxDQUFDQSxFQUFFekIsR0FBRytCLEVBQUVOLEVBQUU2QyxRQUFRdEUsR0FBR3lCLEVBQUU4QyxLQUFLdkUsSUFBSWMsRUFBRWIsRUFBRWl4QixJQUFJLEdBQUd6dkIsRUFBRStDLE9BQU8xRCxJQUFJVyxFQUFFZ0QsT0FBTyxDQUFDaEQsRUFBRWdELFFBQU8sRUFBRyxJQUFJbkUsRUFBRSxJQUFJcUUsTUFBTSwrQ0FBK0NsRCxFQUFFK0MsT0FBTyxJQUFJSSxPQUFPMUQsR0FBRyxxRUFBcUVaLEVBQUVDLEtBQUssOEJBQThCRCxFQUFFdUUsUUFBUXFzQixFQUFFNXdCLEVBQUV1RCxLQUFLM0MsRUFBRVosRUFBRXdFLE1BQU1yRCxFQUFFK0MsT0FBTy9ELEVBQUVILEVBQUV5RSxTQUFTQSxRQUFRQyxNQUFNRCxRQUFRQyxLQUFLdkUsR0FBRyxPQUFPeXdCLEVBQUUsU0FBU3VZLElBQUksSUFBSSxJQUFJdlksRUFBRSxHQUFHaHdCLEVBQUUsRUFBRUEsRUFBRWdFLFVBQVVWLE9BQU90RCxJQUFJZ3dCLEVBQUUzc0IsS0FBS1csVUFBVWhFLElBQUltQyxLQUFLOEIsUUFBUTlCLEtBQUtiLE9BQU80QyxlQUFlL0IsS0FBS1EsS0FBS1IsS0FBS2dDLFFBQVFoQyxLQUFLOEIsT0FBTSxFQUFHME0sRUFBRXhPLEtBQUtTLFNBQVNULEtBQUtiLE9BQU8wdUIsSUFBSSxTQUFTN3dCLEVBQUU2d0IsRUFBRWh3QixFQUFFbEIsR0FBRyxJQUFJK0IsRUFBRSxDQUFDb0QsT0FBTSxFQUFHRSxZQUFPLEVBQU83QyxPQUFPMHVCLEVBQUVydEIsS0FBSzNDLEVBQUU0QyxTQUFTOUQsR0FBR2MsRUFBRTJvQyxFQUFFam9DLEtBQUtPLEdBQUcsT0FBT2pCLEVBQUVnRCxTQUFTOUQsRUFBRStCLEVBQUVzRCxPQUFPdkUsRUFBRUEsRUFBRSxTQUFTeW5DLEVBQUVyWCxFQUFFaHdCLEVBQUVsQixHQUFHLElBQUkrQixFQUFFbXZCLEVBQUU1dEIsUUFBUSxRQUFHLElBQVN2QixFQUFFLE1BQU0sR0FBRyxJQUFJakIsRUFBRWlCLEVBQUViLEdBQUcsWUFBTyxJQUFTSixFQUFFLEdBQUcsbUJBQW1CQSxFQUFFZCxFQUFFLENBQUNjLEVBQUVnRCxVQUFVaEQsR0FBRyxDQUFDQSxHQUFHZCxFQUFFLFNBQVNreEIsR0FBRyxJQUFJLElBQUlod0IsRUFBRSxJQUFJNEUsTUFBTW9yQixFQUFFMXNCLFFBQVF4RSxFQUFFLEVBQUVBLEVBQUVrQixFQUFFc0QsU0FBU3hFLEVBQUVrQixFQUFFbEIsR0FBR2t4QixFQUFFbHhCLEdBQUc4RCxVQUFVb3RCLEVBQUVseEIsR0FBRyxPQUFPa0IsRUFBN0YsQ0FBZ0dKLEdBQUdWLEVBQUVVLEVBQUVBLEVBQUUwRCxRQUFRLFNBQVMxQyxFQUFFb3ZCLEdBQUcsSUFBSWh3QixFQUFFbUMsS0FBS0MsUUFBUSxRQUFHLElBQVNwQyxFQUFFLENBQUMsSUFBSWxCLEVBQUVrQixFQUFFZ3dCLEdBQUcsR0FBRyxtQkFBbUJseEIsRUFBRSxPQUFPLEVBQUUsUUFBRyxJQUFTQSxFQUFFLE9BQU9BLEVBQUV3RSxPQUFPLE9BQU8sRUFBRSxTQUFTcEUsRUFBRTh3QixFQUFFaHdCLEdBQUcsSUFBSSxJQUFJbEIsRUFBRSxJQUFJOEYsTUFBTTVFLEdBQUdhLEVBQUUsRUFBRUEsRUFBRWIsSUFBSWEsRUFBRS9CLEVBQUUrQixHQUFHbXZCLEVBQUVudkIsR0FBRyxPQUFPL0IsRUFBRVUsT0FBT0MsZUFBZUYsRUFBRSxzQkFBc0IsQ0FBQ0csWUFBVyxFQUFHQyxJQUFJLFdBQVcsT0FBT1AsR0FBRzRGLElBQUksU0FBU2dyQixHQUFHLEdBQUcsaUJBQWlCQSxHQUFHQSxFQUFFLEdBQUd6dkIsRUFBRXl2QixHQUFHLE1BQU0sSUFBSTlxQixXQUFXLGtHQUFrRzhxQixFQUFFLEtBQUs1d0IsRUFBRTR3QixLQUFLendCLEVBQUUyQyxLQUFLLGdCQUFXLElBQVNDLEtBQUtDLFNBQVNELEtBQUtDLFVBQVU1QyxPQUFPMkYsZUFBZWhELE1BQU1DLFVBQVVELEtBQUtDLFFBQVE1QyxPQUFPWSxPQUFPLE1BQU0rQixLQUFLRSxhQUFhLEdBQUdGLEtBQUtHLGNBQWNILEtBQUtHLG9CQUFlLEdBQVEvQyxFQUFFbUIsVUFBVTBFLGdCQUFnQixTQUFTNHFCLEdBQUcsR0FBRyxpQkFBaUJBLEdBQUdBLEVBQUUsR0FBR3p2QixFQUFFeXZCLEdBQUcsTUFBTSxJQUFJOXFCLFdBQVcsZ0ZBQWdGOHFCLEVBQUUsS0FBSyxPQUFPN3RCLEtBQUtHLGNBQWMwdEIsRUFBRTd0QixNQUFNNUMsRUFBRW1CLFVBQVUyRSxnQkFBZ0IsV0FBVyxPQUFPdEcsRUFBRW9ELE9BQU81QyxFQUFFbUIsVUFBVXlDLEtBQUssU0FBUzZzQixHQUFHLElBQUksSUFBSWh3QixFQUFFLEdBQUdsQixFQUFFLEVBQUVBLEVBQUVrRixVQUFVVixPQUFPeEUsSUFBSWtCLEVBQUVxRCxLQUFLVyxVQUFVbEYsSUFBSSxJQUFJK0IsRUFBRSxVQUFVbXZCLEVBQUVwd0IsRUFBRXVDLEtBQUtDLFFBQVEsUUFBRyxJQUFTeEMsRUFBRWlCLEVBQUVBLFFBQUcsSUFBU2pCLEVBQUUyRixXQUFXLElBQUkxRSxFQUFFLE9BQU0sRUFBRyxHQUFHQSxFQUFFLENBQUMsSUFBSU4sRUFBRSxHQUFHUCxFQUFFc0QsT0FBTyxJQUFJL0MsRUFBRVAsRUFBRSxJQUFJTyxhQUFha0QsTUFBTSxNQUFNbEQsRUFBRSxJQUFJaEIsRUFBRSxJQUFJa0UsTUFBTSxvQkFBb0JsRCxFQUFFLEtBQUtBLEVBQUVtRixRQUFRLElBQUksS0FBSyxNQUFNbkcsRUFBRW9HLFFBQVFwRixFQUFFaEIsRUFBRSxJQUFJSCxFQUFFUSxFQUFFb3dCLEdBQUcsUUFBRyxJQUFTNXdCLEVBQUUsT0FBTSxFQUFHLEdBQUcsbUJBQW1CQSxFQUFFdVIsRUFBRXZSLEVBQUUrQyxLQUFLbkMsT0FBTyxDQUFDLElBQUlqQixFQUFFSyxFQUFFa0UsT0FBT2tlLEVBQUV0aUIsRUFBRUUsRUFBRUwsR0FBRyxJQUFJRCxFQUFFLEVBQUVBLEVBQUVDLElBQUlELEVBQUU2UixFQUFFNlEsRUFBRTFpQixHQUFHcUQsS0FBS25DLEdBQUcsT0FBTSxHQUFJVCxFQUFFbUIsVUFBVXFGLFlBQVksU0FBU2lxQixFQUFFaHdCLEdBQUcsT0FBT3doQixFQUFFcmYsS0FBSzZ0QixFQUFFaHdCLEdBQUUsSUFBS1QsRUFBRW1CLFVBQVVzRixHQUFHekcsRUFBRW1CLFVBQVVxRixZQUFZeEcsRUFBRW1CLFVBQVV1RixnQkFBZ0IsU0FBUytwQixFQUFFaHdCLEdBQUcsT0FBT3doQixFQUFFcmYsS0FBSzZ0QixFQUFFaHdCLEdBQUUsSUFBS1QsRUFBRW1CLFVBQVV3RixLQUFLLFNBQVM4cEIsRUFBRWh3QixHQUFHLEdBQUcsbUJBQW1CQSxFQUFFLE1BQU0sSUFBSWlELFVBQVUsMEVBQTBFakQsR0FBRyxPQUFPbUMsS0FBSzZELEdBQUdncUIsRUFBRTd3QixFQUFFZ0QsS0FBSzZ0QixFQUFFaHdCLElBQUltQyxNQUFNNUMsRUFBRW1CLFVBQVV5RixvQkFBb0IsU0FBUzZwQixFQUFFaHdCLEdBQUcsR0FBRyxtQkFBbUJBLEVBQUUsTUFBTSxJQUFJaUQsVUFBVSwwRUFBMEVqRCxHQUFHLE9BQU9tQyxLQUFLOEQsZ0JBQWdCK3BCLEVBQUU3d0IsRUFBRWdELEtBQUs2dEIsRUFBRWh3QixJQUFJbUMsTUFBTTVDLEVBQUVtQixVQUFVd0QsZUFBZSxTQUFTOHJCLEVBQUVod0IsR0FBRyxJQUFJbEIsRUFBRStCLEVBQUVqQixFQUFFK1EsRUFBRXBRLEVBQUUsR0FBRyxtQkFBbUJQLEVBQUUsTUFBTSxJQUFJaUQsVUFBVSwwRUFBMEVqRCxHQUFHLFFBQUcsS0FBVWEsRUFBRXNCLEtBQUtDLFNBQVMsT0FBT0QsS0FBSyxRQUFHLEtBQVVyRCxFQUFFK0IsRUFBRW12QixJQUFJLE9BQU83dEIsS0FBSyxHQUFHckQsSUFBSWtCLEdBQUdsQixFQUFFOEQsV0FBVzVDLEVBQUUsS0FBS21DLEtBQUtFLGFBQWFGLEtBQUtDLFFBQVE1QyxPQUFPWSxPQUFPLGNBQWNTLEVBQUVtdkIsR0FBR252QixFQUFFcUQsZ0JBQWdCL0IsS0FBS2dCLEtBQUssaUJBQWlCNnNCLEVBQUVseEIsRUFBRThELFVBQVU1QyxTQUFTLEdBQUcsbUJBQW1CbEIsRUFBRSxDQUFDLElBQUljLEdBQUcsRUFBRStRLEVBQUU3UixFQUFFd0UsT0FBTyxFQUFFcU4sR0FBRyxFQUFFQSxJQUFJLEdBQUc3UixFQUFFNlIsS0FBSzNRLEdBQUdsQixFQUFFNlIsR0FBRy9OLFdBQVc1QyxFQUFFLENBQUNPLEVBQUV6QixFQUFFNlIsR0FBRy9OLFNBQVNoRCxFQUFFK1EsRUFBRSxNQUFNLEdBQUcvUSxFQUFFLEVBQUUsT0FBT3VDLEtBQUssSUFBSXZDLEVBQUVkLEVBQUV5SCxRQUFRLFNBQVN5cEIsRUFBRWh3QixHQUFHLEtBQUtBLEVBQUUsRUFBRWd3QixFQUFFMXNCLE9BQU90RCxJQUFJZ3dCLEVBQUVod0IsR0FBR2d3QixFQUFFaHdCLEVBQUUsR0FBR2d3QixFQUFFdnBCLE1BQWxELENBQXlEM0gsRUFBRWMsR0FBRyxJQUFJZCxFQUFFd0UsU0FBU3pDLEVBQUVtdkIsR0FBR2x4QixFQUFFLFNBQUksSUFBUytCLEVBQUVxRCxnQkFBZ0IvQixLQUFLZ0IsS0FBSyxpQkFBaUI2c0IsRUFBRXp2QixHQUFHUCxHQUFHLE9BQU9tQyxNQUFNNUMsRUFBRW1CLFVBQVVnRyxJQUFJbkgsRUFBRW1CLFVBQVV3RCxlQUFlM0UsRUFBRW1CLFVBQVVpRyxtQkFBbUIsU0FBU3FwQixHQUFHLElBQUlod0IsRUFBRWxCLEVBQUUrQixFQUFFLFFBQUcsS0FBVS9CLEVBQUVxRCxLQUFLQyxTQUFTLE9BQU9ELEtBQUssUUFBRyxJQUFTckQsRUFBRW9GLGVBQWUsT0FBTyxJQUFJRixVQUFVVixRQUFRbkIsS0FBS0MsUUFBUTVDLE9BQU9ZLE9BQU8sTUFBTStCLEtBQUtFLGFBQWEsUUFBRyxJQUFTdkQsRUFBRWt4QixLQUFLLEtBQUs3dEIsS0FBS0UsYUFBYUYsS0FBS0MsUUFBUTVDLE9BQU9ZLE9BQU8sYUFBYXRCLEVBQUVreEIsSUFBSTd0QixLQUFLLEdBQUcsSUFBSTZCLFVBQVVWLE9BQU8sQ0FBQyxJQUFJMUQsRUFBRStRLEVBQUVuUixPQUFPb0gsS0FBSzlILEdBQUcsSUFBSStCLEVBQUUsRUFBRUEsRUFBRThQLEVBQUVyTixTQUFTekMsRUFBRSxvQkFBb0JqQixFQUFFK1EsRUFBRTlQLEtBQUtzQixLQUFLd0UsbUJBQW1CL0csR0FBRyxPQUFPdUMsS0FBS3dFLG1CQUFtQixrQkFBa0J4RSxLQUFLQyxRQUFRNUMsT0FBT1ksT0FBTyxNQUFNK0IsS0FBS0UsYUFBYSxFQUFFRixLQUFLLEdBQUcsbUJBQW1CbkMsRUFBRWxCLEVBQUVreEIsSUFBSTd0QixLQUFLK0IsZUFBZThyQixFQUFFaHdCLFFBQVEsUUFBRyxJQUFTQSxFQUFFLElBQUlhLEVBQUViLEVBQUVzRCxPQUFPLEVBQUV6QyxHQUFHLEVBQUVBLElBQUlzQixLQUFLK0IsZUFBZThyQixFQUFFaHdCLEVBQUVhLElBQUksT0FBT3NCLE1BQU01QyxFQUFFbUIsVUFBVW9GLFVBQVUsU0FBU2txQixHQUFHLE9BQU9xWCxFQUFFbGxDLEtBQUs2dEIsR0FBRSxJQUFLendCLEVBQUVtQixVQUFVbUcsYUFBYSxTQUFTbXBCLEdBQUcsT0FBT3FYLEVBQUVsbEMsS0FBSzZ0QixHQUFFLElBQUt6d0IsRUFBRXVGLGNBQWMsU0FBU2tyQixFQUFFaHdCLEdBQUcsTUFBTSxtQkFBbUJnd0IsRUFBRWxyQixjQUFja3JCLEVBQUVsckIsY0FBYzlFLEdBQUdZLEVBQUUzQixLQUFLK3dCLEVBQUVod0IsSUFBSVQsRUFBRW1CLFVBQVVvRSxjQUFjbEUsRUFBRXJCLEVBQUVtQixVQUFVb0csV0FBVyxXQUFXLE9BQU8zRSxLQUFLRSxhQUFhLEVBQUV4QixFQUFFc0IsS0FBS0MsU0FBUyxLQUFLLFNBQVM0dEIsRUFBRWh3QixFQUFFbEIsR0FBZ0JVLE9BQU9DLGVBQWVPLEVBQUUsYUFBYSxDQUFDRCxPQUFNLElBQUtDLEVBQUUrNUIsa0JBQWtCLENBQUNDLEdBQUcsS0FBS0MsS0FBSyxPQUFPQyxJQUFJLE1BQU1DLEtBQUssT0FBT0MsUUFBUSxZQUFZLFNBQVNwSyxFQUFFaHdCLEVBQUVsQixHQUFnQlUsT0FBT0MsZUFBZU8sRUFBRSxhQUFhLENBQUNELE9BQU0sSUFBSyxNQUFNYyxFQUFFLFdBQVcsTUFBTW12QixFQUFFLElBQUkzVSxZQUFZLEdBQUcsT0FBTyxJQUFJL0ksU0FBUzBkLEdBQUd5TSxTQUFTLEVBQUUsS0FBSSxHQUFJLE1BQU0sSUFBSUMsV0FBVzFNLEdBQUcsR0FBeEcsR0FBOEdwd0IsRUFBRSxDQUFDLGFBQWEsSUFBSW93QixFQUFFcHdCLEVBQUUrOEIsR0FBRyxPQUFPM00sRUFBRTRNLEtBQUssS0FBSzVNLEVBQUU2TSxTQUFTLFNBQVMsVUFBVSxjQUFjLElBQUk3TSxFQUFFM1EsVUFBVUQsVUFBVUUsY0FBY3RmLEVBQUUsQ0FBQ2c5QixHQUFHLDJCQUEyQkMsT0FBTyxvQkFBb0JDLE9BQU8sbUJBQW1CQyxNQUFNLGlCQUFpQkMsT0FBTyw2QkFBNkIsTUFBTSxHQUFHdjdCLE9BQU9yQyxPQUFPb0gsS0FBSzVHLEdBQUdzUSxPQUFPeFIsR0FBR2tCLEVBQUVsQixHQUFHMnRCLEtBQUt1RCxLQUFLLElBQUksU0FBUyxJQUFJQSxFQUFFM1EsVUFBVUQsVUFBVXBmLEVBQUUsb0JBQW9CeXNCLEtBQUt1RCxHQUFHbHhCLEVBQUUsZ0JBQWdCMnRCLEtBQUt1RCxJQUFJaHdCLEVBQUVhLEVBQUUsY0FBYzRyQixLQUFLdUQsR0FBR3B3QixFQUFFLGNBQWM2c0IsS0FBS3VELEdBQUdyZixFQUFFLG9CQUFvQjhiLEtBQUt1RCxJQUFJbnZCLElBQUksYUFBYTRyQixLQUFLdUQsSUFBSXB3QixHQUFHLGFBQWE2c0IsS0FBS3VELEdBQUd6dkIsRUFBRSxhQUFha3NCLEtBQUt1RCxLQUFLcmYsRUFBRSxNQUFNLENBQUNrc0IsU0FBU2xzQixFQUFFOHNCLFFBQVFsOUIsRUFBRWc5QixVQUFVMThCLEVBQUUrN0IsTUFBTXI4QixJQUFJTSxJQUFJL0IsRUFBRXcrQixVQUFVeCtCLEVBQUV1K0IsZUFBZXI5QixFQUFFdzlCLFVBQVU1OUIsSUFBSSxXQUFXLE9BQU9pQixJQUFJYixFQUFFZ0gsUUFBUXBILEdBQUcsU0FBU293QixFQUFFaHdCLEVBQUVsQixHQUFnQlUsT0FBT0MsZUFBZU8sRUFBRSxhQUFhLENBQUNELE9BQU0sSUFBSyxNQUFNYyxFQUFFLFdBQVcsTUFBTW12QixFQUFFLElBQUkzVSxZQUFZLEdBQUcsT0FBTyxJQUFJL0ksU0FBUzBkLEdBQUd5TSxTQUFTLEVBQUUsS0FBSSxHQUFJLE1BQU0sSUFBSUMsV0FBVzFNLEdBQUcsR0FBeEcsR0FBOEdod0IsRUFBRWdILFFBQVFuRyxHQUFHLFNBQVNtdkIsRUFBRWh3QixFQUFFbEIsR0FBZ0JVLE9BQU9DLGVBQWVPLEVBQUUsYUFBYSxDQUFDRCxPQUFNLElBQUssTUFBTWMsRUFBRSxjQUFjbXZCLEdBQUcsTUFBTWh3QixFQUFFLEdBQUdsQixFQUFFa3hCLEVBQUUsSUFBSXB3QixFQUFFLEVBQUUsTUFBTStRLEVBQUVxZixFQUFFMXNCLE9BQU8sS0FBSzFELEVBQUUrUSxHQUFHLEdBQUc3UixFQUFFYyxHQUFHLElBQUlJLEVBQUVxRCxLQUFLSyxPQUFPazZCLGFBQWE5K0IsRUFBRWMsT0FBT0EsTUFBTSxDQUFDLEdBQUdkLEVBQUVjLEdBQUcsVUFBVSxHQUFHZCxFQUFFYyxHQUFHLEtBQUssR0FBR2lCLEVBQUVnOUIsbUJBQW1CLytCLEVBQUVjLEVBQUUsR0FBRyxDQUFDLE1BQU1vd0IsR0FBRyxHQUFHbHhCLEVBQUVjLEtBQUssRUFBRSxHQUFHZCxFQUFFYyxFQUFFLEdBQUcsR0FBR293QixHQUFHLElBQUksQ0FBQ2h3QixFQUFFcUQsS0FBS0ssT0FBT2s2QixhQUFhLE1BQU01TixJQUFJcHdCLEdBQUcsRUFBRSxnQkFBZ0IsR0FBR2QsRUFBRWMsR0FBRyxLQUFLLEdBQUdpQixFQUFFZzlCLG1CQUFtQi8rQixFQUFFYyxFQUFFLEdBQUcsQ0FBQyxNQUFNb3dCLEdBQUcsR0FBR2x4QixFQUFFYyxLQUFLLElBQUksR0FBR2QsRUFBRWMsRUFBRSxLQUFLLEVBQUUsR0FBR2QsRUFBRWMsRUFBRSxHQUFHLEdBQUdvd0IsR0FBRyxNQUFNLFFBQVEsTUFBTUEsR0FBRyxDQUFDaHdCLEVBQUVxRCxLQUFLSyxPQUFPazZCLGFBQWEsTUFBTTVOLElBQUlwd0IsR0FBRyxFQUFFLGdCQUFnQixHQUFHZCxFQUFFYyxHQUFHLEtBQUtpQixFQUFFZzlCLG1CQUFtQi8rQixFQUFFYyxFQUFFLEdBQUcsQ0FBQyxJQUFJb3dCLEdBQUcsRUFBRWx4QixFQUFFYyxLQUFLLElBQUksR0FBR2QsRUFBRWMsRUFBRSxLQUFLLElBQUksR0FBR2QsRUFBRWMsRUFBRSxLQUFLLEVBQUUsR0FBR2QsRUFBRWMsRUFBRSxHQUFHLEdBQUdvd0IsRUFBRSxPQUFPQSxFQUFFLFFBQVEsQ0FBQ0EsR0FBRyxNQUFNaHdCLEVBQUVxRCxLQUFLSyxPQUFPazZCLGFBQWE1TixJQUFJLEdBQUcsUUFBUWh3QixFQUFFcUQsS0FBS0ssT0FBT2s2QixhQUFhLEtBQUs1TixFQUFFLFFBQVFwd0IsR0FBRyxFQUFFLFVBQVVJLEVBQUVxRCxLQUFLSyxPQUFPazZCLGFBQWEsVUFBVWgrQixFQUFFLE9BQU9JLEVBQUUrOUIsS0FBSyxJQUFJLDBCQUEwQi9OLEVBQUVod0IsRUFBRWxCLEdBQUcsSUFBSStCLEVBQUVtdkIsRUFBRSxHQUFHaHdCLEVBQUVsQixFQUFFK0IsRUFBRXlDLE9BQU8sQ0FBQyxLQUFLeEUsS0FBSyxHQUFHLE1BQU0sSUFBSStCLElBQUliLElBQUksT0FBTSxFQUFHLE9BQU0sRUFBRyxPQUFNLEdBQUlBLEVBQUVnSCxRQUFRbkcsR0FBRyxTQUFTbXZCLEVBQUVod0IsRUFBRWxCLEdBQWdCVSxPQUFPQyxlQUFlTyxFQUFFLGFBQWEsQ0FBQ0QsT0FBTSxJQUFLLE1BQU1jLEVBQUUwRyxZQUFZeW9CLEdBQUcsSUFBSWh3QixFQUFFYSxFQUFFMjlCLGdCQUFnQixJQUFJeE8sR0FBRyxvQkFBb0J4d0IsT0FBT2tCLFVBQVUrZ0IsU0FBU3hpQixLQUFLK3dCLEdBQUcsT0FBT2h3QixFQUFFLElBQUlsQixFQUFFVSxPQUFPK04sT0FBTyxHQUFHdk4sRUFBRWd3QixHQUFHeHdCLE9BQU9pL0IsUUFBUTMvQixHQUFHNHlCLFFBQVEsRUFBRTFCLEVBQUVod0IsTUFBTW1DLEtBQUs2dEIsR0FBR2h3QixJQUFJLHVCQUF1QixNQUFNLENBQUM2TSxJQUFJLEtBQUtXLElBQUksS0FBS2EsU0FBUyxLQUFLaEksU0FBUyxLQUFLczRCLE9BQU0sRUFBRzN3QixVQUFVLE9BQU9oTyxFQUFFZ0gsUUFBUW5HLEdBQUcsU0FBU212QixFQUFFaHdCLEVBQUVsQixHQUFnQlUsT0FBT0MsZUFBZU8sRUFBRSxhQUFhLENBQUNELE9BQU0sSUFBS0MsRUFBRWdILFFBQVEsTUFBTU8sY0FBY3BGLEtBQUs2OUIsVUFBVSxFQUFFNzlCLEtBQUs4OUIsUUFBUSxFQUFFOTlCLEtBQUsrOUIsVUFBVSxFQUFFLzlCLEtBQUtnK0IsUUFBUSxFQUFFaCtCLEtBQUt1OUIsZ0JBQWdCLEVBQUV2OUIsS0FBS2krQixjQUFjLEVBQUVqK0IsS0FBSzQ5QixtQkFBbUIsR0FBRzU5QixLQUFLdUssWUFBWSxLQUFLdkssS0FBS2cxQixXQUFXLEtBQUssT0FBT25ILEdBQUdBLEVBQUUyTyxPQUFNLEVBQUd4OEIsS0FBSzQ5QixtQkFBbUIxOEIsS0FBSzJzQixNQUFNLFNBQVNBLEVBQUVod0IsRUFBRWxCLEdBQWdCVSxPQUFPQyxlQUFlTyxFQUFFLGFBQWEsQ0FBQ0QsT0FBTSxJQUFLQyxFQUFFZ0gsUUFBUSxNQUFNTyxZQUFZeW9CLEdBQUc3dEIsS0FBS3k4QixNQUFNNU8sRUFBRTd0QixLQUFLeXFCLE1BQU0sR0FBR3pxQixLQUFLMDhCLHFCQUFxQixFQUFFLFdBQVcsT0FBTzE4QixLQUFLeThCLE1BQU0sYUFBYSxPQUFPejhCLEtBQUt5cUIsTUFBTXRwQixPQUFPLFVBQVUsT0FBTyxJQUFJbkIsS0FBS3lxQixNQUFNdHBCLE9BQU8sUUFBUW5CLEtBQUt5cUIsTUFBTSxHQUFHenFCLEtBQUswOEIscUJBQXFCLEVBQUUsNEJBQTRCN08sR0FBRyxJQUFJaHdCLEVBQUVtQyxLQUFLeXFCLE1BQU0sR0FBRyxJQUFJNXNCLEVBQUVzRCxPQUFPLE9BQU8sRUFBRSxJQUFJeEUsRUFBRWtCLEVBQUVzRCxPQUFPLEVBQUV6QyxFQUFFLEVBQUVqQixFQUFFLEVBQUUrUSxFQUFFN1IsRUFBRXlCLEVBQUUsRUFBRSxHQUFHeXZCLEVBQUVod0IsRUFBRSxHQUFHZ08sVUFBVSxPQUFVLEVBQUUsS0FBS3BPLEdBQUcrUSxHQUFHLENBQUMsSUFBSTlQLEVBQUVqQixFQUFFd04sS0FBS0MsT0FBT3NELEVBQUUvUSxHQUFHLE1BQU1kLEdBQUdreEIsRUFBRWh3QixFQUFFYSxHQUFHczJCLFdBQVducEIsV0FBV2dpQixFQUFFaHdCLEVBQUVhLEVBQUUsR0FBR21OLFVBQVUsQ0FBQ3pOLEVBQUVNLEVBQUUsTUFBTWIsRUFBRWEsR0FBR21OLFVBQVVnaUIsRUFBRXB3QixFQUFFaUIsRUFBRSxFQUFFOFAsRUFBRTlQLEVBQUUsRUFBRSxPQUFPTixFQUFFLDJCQUEyQnl2QixHQUFHLE9BQU83dEIsS0FBSzQ4Qiw0QkFBNEIvTyxHQUFHLEVBQUUsT0FBT0EsR0FBRyxJQUFJaHdCLEVBQUVtQyxLQUFLeXFCLE1BQU05dEIsRUFBRXFELEtBQUswOEIsb0JBQW9CaCtCLEVBQUUsR0FBRyxJQUFJL0IsR0FBR0EsRUFBRWtCLEVBQUVzRCxRQUFRMHNCLEVBQUUwUCxnQkFBZ0IxL0IsRUFBRWxCLEdBQUdxNEIsV0FBV25wQixZQUFZbFAsSUFBSWtCLEVBQUVzRCxPQUFPLEdBQUd4RSxFQUFFa0IsRUFBRXNELE9BQU8sR0FBRzBzQixFQUFFMFAsZUFBZTEvQixFQUFFbEIsRUFBRSxHQUFHNGdDLGdCQUFnQjcrQixFQUFFL0IsRUFBRSxFQUFFa0IsRUFBRXNELE9BQU8sSUFBSXpDLEVBQUVzQixLQUFLNDhCLDRCQUE0Qi9PLEVBQUUwUCxnQkFBZ0IsR0FBR3Y5QixLQUFLMDhCLG9CQUFvQmgrQixFQUFFc0IsS0FBS3lxQixNQUFNcGUsT0FBTzNOLEVBQUUsRUFBRW12QixHQUFHLHFCQUFxQkEsR0FBRyxJQUFJaHdCLEVBQUVtQyxLQUFLNDhCLDRCQUE0Qi9PLEdBQUcsT0FBT2h3QixHQUFHLEVBQUVtQyxLQUFLeXFCLE1BQU01c0IsR0FBRyxLQUFLLG9CQUFvQmd3QixHQUFHLElBQUlod0IsRUFBRW1DLEtBQUt3OUIscUJBQXFCM1AsR0FBRyxPQUFPLE9BQU9od0IsRUFBRUEsRUFBRW0zQixXQUFXLEtBQUssaUJBQWlCbkgsR0FBRyxJQUFJaHdCLEVBQUVtQyxLQUFLNDhCLDRCQUE0Qi9PLEdBQUdseEIsRUFBRXFELEtBQUt5cUIsTUFBTTVzQixHQUFHKy9CLG1CQUFtQixLQUFLLElBQUlqaEMsRUFBRXdFLFFBQVF0RCxFQUFFLEdBQUdBLElBQUlsQixFQUFFcUQsS0FBS3lxQixNQUFNNXNCLEdBQUcrL0IsbUJBQW1CLE9BQU9qaEMsRUFBRXdFLE9BQU8sRUFBRXhFLEVBQUVBLEVBQUV3RSxPQUFPLEdBQUcsUUFBUSxTQUFTMHNCLEVBQUVod0IsRUFBRWxCLEdBQWdCVSxPQUFPQyxlQUFlTyxFQUFFLGFBQWEsQ0FBQ0QsT0FBTSxJQUFLLE1BQU1jLEVBQUUwRyxZQUFZeW9CLEdBQUc3dEIsS0FBSzJoQixRQUFRdGtCLE9BQU8rTixPQUFPLEdBQUd5aUIsR0FBRzd0QixLQUFLcStCLFVBQVVyK0IsS0FBSzJoQixRQUFRMGMsVUFBVXIrQixLQUFLcytCLFlBQVksS0FBS3QrQixLQUFLdStCLGNBQWMsR0FBR3YrQixLQUFLdytCLFlBQVl4K0IsS0FBSzJoQixRQUFRNmMsYUFBYSxFQUFFeCtCLEtBQUt5K0IsYUFBYXorQixLQUFLeStCLGFBQWF0Z0MsS0FBSzZCLE1BQU1BLEtBQUswK0IsYUFBYTErQixLQUFLMCtCLGFBQWF2Z0MsS0FBSzZCLE1BQU1BLEtBQUsyK0IsWUFBWTMrQixLQUFLMitCLFlBQVl4Z0MsS0FBSzZCLE1BQU1BLEtBQUs0K0IsVUFBVTUrQixLQUFLNCtCLFVBQVV6Z0MsS0FBSzZCLE1BQU0sT0FBT0EsS0FBS3MrQixZQUFZLElBQUl0RixLQUFLNkYsWUFBWTcrQixLQUFLcytCLFlBQVlRLGlCQUFpQixhQUFhOStCLEtBQUt5K0IsY0FBY3orQixLQUFLcStCLFVBQVU5ckIsSUFBSXdzQixJQUFJQyxnQkFBZ0JoL0IsS0FBS3MrQixhQUFhdCtCLEtBQUtnaEIsSUFBSWhoQixLQUFLcStCLFVBQVU5ckIsSUFBSXZTLEtBQUtxK0IsVUFBVVMsaUJBQWlCLGFBQWE5K0IsS0FBSzArQixjQUFjMStCLEtBQUtxK0IsVUFBVVMsaUJBQWlCLFVBQVU5K0IsS0FBSzQrQixXQUFXLGVBQWU1K0IsS0FBS2dCLEtBQUssY0FBY2hCLEtBQUtxK0IsV0FBVyxZQUFZcitCLEtBQUtnQixLQUFLLFVBQVVoQixLQUFLcStCLFdBQVcsZUFBZXIrQixLQUFLaS9CLG1CQUFtQixjQUFjai9CLEtBQUtnQixLQUFLLHFCQUFxQmhCLEtBQUtrL0IsV0FBVyxtQkFBbUIsR0FBRyxTQUFTbC9CLEtBQUtzK0IsWUFBWWEsV0FBVyxPQUFPLElBQUl0UixFQUFFaHdCLEVBQUVtQyxLQUFLaVAsU0FBU0MsWUFBWSxxQkFBcUJ2UyxFQUFFcUQsS0FBS2lQLFNBQVNDLFlBQVksVUFBVXJSLEVBQUVBLEVBQUU0SSxRQUFRLElBQUkvSCxHQUFFLEVBQUcsSUFBSSxJQUFJakIsRUFBRSxFQUFFK1EsRUFBRW5SLE9BQU9vSCxLQUFLNUcsR0FBR3NELE9BQU8xRCxFQUFFK1EsRUFBRS9RLElBQUksQ0FBQyxJQUFJK1EsRUFBRW5SLE9BQU9vSCxLQUFLNUcsR0FBR0osR0FBRyxHQUFHLFVBQVUrUSxFQUFFcWYsRUFBRWx4QixFQUFFMkssV0FBVyxVQUFVa0gsSUFBSXFmLEVBQUVseEIsRUFBRTRLLFlBQVlzbUIsRUFBRSxDQUFDLElBQUlseEIsRUFBRSxVQUFVNlIsRUFBRSxHQUFHLEdBQUdxZixFQUFFdmtCLE1BQU11a0IsRUFBRXZrQixLQUFLeUIsb0JBQW9CcE8sRUFBRWt4QixFQUFFdmtCLEtBQUt5QixtQkFBbUJsTixFQUFFMlEsR0FBR2hKLEtBQUtyRSxRQUFRbkIsS0FBS3crQixZQUFZN2hDLElBQUkrQixHQUFFLElBQUssR0FBR0EsRUFBRSxDQUFDLEdBQUdyQixPQUFPb0gsS0FBS3pFLEtBQUt1K0IsZUFBZXA5QixPQUFPLEVBQUUsT0FBTyxJQUFJLElBQUkwc0IsRUFBRSxFQUFFbHhCLEVBQUVVLE9BQU9vSCxLQUFLNUcsR0FBR3NELE9BQU8wc0IsRUFBRWx4QixFQUFFa3hCLElBQUksQ0FBQyxJQUFJbHhCLEVBQUVVLE9BQU9vSCxLQUFLNUcsR0FBR2d3QixHQUFHbnZCLEVBQUViLEVBQUVsQixHQUFHYyxFQUFFLFVBQVVkLEVBQUUsb0JBQW9CK0IsRUFBRThILFNBQVMsb0JBQW9COUgsRUFBRThILFNBQVNnSSxFQUFFeE8sS0FBS3MrQixZQUFZa0IsZ0JBQWdCL2hDLEdBQUd1QyxLQUFLdStCLGNBQWM1aEMsR0FBRzZSLEVBQUVBLEVBQUVzd0IsaUJBQWlCLFlBQVk5K0IsS0FBSzIrQixhQUFhMytCLEtBQUtrL0IsYUFBYSxXQUFXLElBQUlyUixFQUFFN3RCLEtBQUtpUCxTQUFTQyxZQUFZLHFCQUFxQixHQUFHMmUsRUFBRSxJQUFJLElBQUlod0IsRUFBRSxFQUFFQSxFQUFFUixPQUFPb0gsS0FBS3pFLEtBQUt1K0IsZUFBZXA5QixPQUFPdEQsSUFBSSxDQUFDLElBQUlsQixFQUFFVSxPQUFPb0gsS0FBS3pFLEtBQUt1K0IsZUFBZTFnQyxHQUFHYSxFQUFFc0IsS0FBS3UrQixjQUFjNWhDLEdBQUcsSUFBSStCLEVBQUUrZ0MsU0FBUyxDQUFDLElBQUk1aEMsRUFBRWd3QixFQUFFcG5CLFFBQVE5SixHQUFHLEdBQUdrQixJQUFJQSxFQUFFNmhDLE9BQU9oaEMsRUFBRWloQyxhQUFhOWhDLEVBQUVrQyxLQUFLcVEsT0FBT0EsUUFBUXZTLEVBQUU2aEMsUUFBTyxPQUFRLEdBQUc3aEMsRUFBRSxDQUFDLElBQUlnd0IsRUFBRWh3QixFQUFFMkgsS0FBS3BCLFFBQVF5cEIsR0FBR252QixFQUFFaWhDLGFBQWE5UixFQUFFemQsT0FBT0EsV0FBVyxjQUFjLE1BQU0rdUIsV0FBV3RSLEVBQUVnUyxvQkFBb0JoaUMsR0FBR21DLEtBQUtzK0IsWUFBWSxHQUFHLFNBQVN6USxHQUFHLElBQUlod0IsRUFBRXNELE9BQU8sSUFBSW5CLEtBQUtzK0IsWUFBWXNCLGNBQWMsTUFBTS9SLEtBQUssT0FBT0EsRUFBRWh3QixFQUFFLEdBQUcsSUFBSSxJQUFJbEIsRUFBRSxFQUFFQSxFQUFFVSxPQUFPb0gsS0FBS3pFLEtBQUt1K0IsZUFBZXA5QixPQUFPeEUsSUFBSSxDQUFDLElBQUkrQixFQUFFc0IsS0FBS3UrQixjQUFjbGhDLE9BQU9vSCxLQUFLekUsS0FBS3UrQixlQUFlNWhDLElBQUkrQixFQUFFK2dDLFVBQVUvZ0MsRUFBRW9oQyxPQUFPamlDLEVBQUVnd0IsSUFBSSxnQkFBZ0IsTUFBTUEsRUFBRSxHQUFHLElBQUksSUFBSWh3QixFQUFFLEVBQUVBLEVBQUVSLE9BQU9vSCxLQUFLekUsS0FBS3UrQixlQUFlcDlCLE9BQU90RCxJQUFJLENBQUMsSUFBSWxCLEVBQUVjLEVBQUV1QyxLQUFLdStCLGNBQWNsaEMsT0FBT29ILEtBQUt6RSxLQUFLdStCLGVBQWUxZ0MsSUFBSUosRUFBRXlpQyxvQkFBb0IsWUFBWWxnQyxLQUFLMitCLGFBQWFsaEMsRUFBRWdpQyxTQUFTOWlDLEVBQUUsSUFBSXdqQyxRQUFRdFMsSUFBSSxNQUFNaHdCLEVBQUUsV0FBVyxJQUFJbEIsRUFBRSxFQUFFLE1BQU02UixFQUFFLEtBQUsvUSxFQUFFZ2lDLFNBQVM5aUMsRUFBRSxHQUFHNGpDLFdBQVcveEIsRUFBRSxLQUFLN1IsS0FBS2t4QixLQUFLbnZCLEVBQUU4aEMsWUFBWS9pQyxHQUFHb3dCLE1BQU0wUyxXQUFXL3hCLEVBQUUsS0FBSy9RLEVBQUV5aUMsb0JBQW9CLFlBQVlyaUMsSUFBSUosRUFBRXFoQyxpQkFBaUIsWUFBWWpoQyxNQUFNYSxFQUFFOGhDLFlBQVkvaUMsR0FBR2QsRUFBRXdqQyxRQUFRcm9CLFdBQVcrVixFQUFFM3NCLEtBQUt2RSxHQUFHLE9BQU93akMsUUFBUU8sSUFBSTdTLEdBQUcsVUFBVSxPQUFPN3RCLEtBQUsrL0IsZ0JBQWdCaFQsS0FBSyxLQUFLLElBQUksSUFBSWMsRUFBRSxFQUFFQSxFQUFFeHdCLE9BQU9vSCxLQUFLekUsS0FBS3UrQixlQUFlcDlCLE9BQU8wc0IsSUFBSSxDQUFDLElBQUlod0IsRUFBRW1DLEtBQUt1K0IsY0FBY2xoQyxPQUFPb0gsS0FBS3pFLEtBQUt1K0IsZUFBZTFRLElBQUk3dEIsS0FBS3MrQixZQUFZcUMsbUJBQW1COWlDLFVBQVVtQyxLQUFLdStCLGNBQWNsaEMsT0FBT29ILEtBQUt6RSxLQUFLdStCLGVBQWUxUSxJQUFJN3RCLEtBQUtxK0IsVUFBVTZCLG9CQUFvQixhQUFhbGdDLEtBQUswK0IsY0FBYzErQixLQUFLcStCLFVBQVU2QixvQkFBb0IsVUFBVWxnQyxLQUFLNCtCLFdBQVc1K0IsS0FBS3MrQixZQUFZNEIsb0JBQW9CLGFBQWFsZ0MsS0FBS3krQixjQUFjeitCLEtBQUs0L0IsY0FBY2hoQyxPQUFPbWdDLElBQUk2QixnQkFBZ0I1Z0MsS0FBS2doQixLQUFLaGhCLEtBQUtnaEIsSUFBSSxLQUFLaGhCLEtBQUsyaEIsUUFBUSxHQUFHM2hCLEtBQUtxK0IsVUFBVSxLQUFLcitCLEtBQUtzK0IsWUFBWSxLQUFLdCtCLEtBQUt1K0IsY0FBYyxHQUFHditCLEtBQUt3K0IsWUFBWSxJQUFJLG1CQUFtQjNRLEdBQUcsTUFBTWh3QixFQUFFZ3dCLEVBQUU0UyxTQUFTLElBQUk5akMsRUFBRSxHQUFHLElBQUksSUFBSWt4QixFQUFFLEVBQUVudkIsRUFBRWIsRUFBRXNELE9BQU8wc0IsRUFBRW52QixFQUFFbXZCLElBQUlseEIsRUFBRWtCLEVBQUU2VCxJQUFJbWMsR0FBRyxJQUFJQSxFQUFFaVMsT0FBTyxFQUFFbmpDLEdBQUcsTUFBTWt4QixNQUFNaHdCLEVBQUVnSCxRQUFRbkcsR0FBRyxTQUFTbXZCLEVBQUVod0IsRUFBRWxCLEdBQWdCVSxPQUFPQyxlQUFlTyxFQUFFLGFBQWEsQ0FBQ0QsT0FBTSxJQUFLLE1BQU1jLEVBQUUwRyxZQUFZeW9CLEdBQUcsS0FBS0EsYUFBYTNVLGFBQWEsTUFBTSxJQUFJNVgsTUFBTSxtQkFBbUJ0QixLQUFLb1EsT0FBT3lkLEVBQUU3dEIsS0FBS2lSLFNBQVMsSUFBSWQsU0FBUzBkLEdBQUc3dEIsS0FBS2lSLFNBQVMvTSxTQUFTLEVBQUUsYUFBYSxPQUFPbEUsS0FBS29RLE9BQU8zSyxXQUFXLGFBQWFvb0IsR0FBRzd0QixLQUFLaVIsU0FBUy9NLFNBQVMycEIsRUFBRSxlQUFlLE9BQU83dEIsS0FBS2lSLFNBQVMvTSxTQUFTLEtBQUsycEIsR0FBRzd0QixLQUFLa0UsVUFBVTJwQixFQUFFLEtBQUtBLEdBQUcsSUFBSWh3QixFQUFFb04sS0FBS0MsTUFBTTJpQixFQUFFLEdBQUdseEIsRUFBRWt4QixFQUFFLEVBQUUsSUFBSSxJQUFJQSxFQUFFLEVBQUVBLEVBQUVod0IsRUFBRWd3QixJQUFJbnZCLEVBQUVnUyxTQUFTMVEsS0FBS2lSLFNBQVMsR0FBR3RVLEVBQUUsR0FBRytCLEVBQUVnUyxTQUFTMVEsS0FBS2lSLFNBQVN0VSxHQUFHLGdCQUFnQmt4QixFQUFFaHdCLEVBQUVsQixHQUFHLElBQUkrQixFQUFFLE9BQU9iLEdBQUcsS0FBSyxFQUFFYSxFQUFFL0IsRUFBRWt4QixFQUFFemMsUUFBUXljLEVBQUUzcEIsVUFBVTJwQixFQUFFelUsU0FBU3lVLEVBQUUzcEIsVUFBVSxNQUFNLEtBQUssRUFBRXhGLEVBQUUvQixFQUFFa3hCLEVBQUUxYyxTQUFTMGMsRUFBRTNwQixVQUFVMnBCLEVBQUV4VixVQUFVd1YsRUFBRTNwQixVQUFVLE1BQU0sS0FBSyxFQUFFLEdBQUd2SCxFQUFFLE1BQU0sSUFBSTJFLE1BQU0sZ0NBQWdDNUMsRUFBRW12QixFQUFFelUsU0FBU3lVLEVBQUUzcEIsV0FBVyxHQUFHeEYsR0FBR212QixFQUFFelUsU0FBU3lVLEVBQUUzcEIsU0FBUyxJQUFJLEVBQUV4RixHQUFHbXZCLEVBQUV6VSxTQUFTeVUsRUFBRTNwQixTQUFTLEdBQUcsTUFBTSxLQUFLLEVBQUV4RixFQUFFL0IsRUFBRWt4QixFQUFFM2MsU0FBUzJjLEVBQUUzcEIsVUFBVTJwQixFQUFFeGQsVUFBVXdkLEVBQUUzcEIsVUFBVSxNQUFNLEtBQUssRUFBRSxHQUFHdkgsRUFBRSxNQUFNLElBQUkyRSxNQUFNLGdDQUFnQzVDLEVBQUVtdkIsRUFBRXhkLFVBQVV3ZCxFQUFFM3BCLFdBQVcsR0FBR3hGLEdBQUdtdkIsRUFBRXhkLFVBQVV3ZCxFQUFFM3BCLFNBQVMsR0FBRyxNQUFNLFFBQVF4RixFQUFFLEdBQUcsT0FBT212QixFQUFFM3BCLFVBQVVyRyxFQUFFYSxFQUFFLFlBQVksT0FBT0EsRUFBRWdTLFNBQVMxUSxLQUFLaVIsU0FBUyxHQUFHLGFBQWEsT0FBT3ZTLEVBQUVnUyxTQUFTMVEsS0FBS2lSLFNBQVMsR0FBRyxhQUFhLE9BQU92UyxFQUFFZ1MsU0FBUzFRLEtBQUtpUixTQUFTLEdBQUcsYUFBYSxPQUFPdlMsRUFBRWdTLFNBQVMxUSxLQUFLaVIsU0FBUyxHQUFHLGFBQWEsT0FBT3ZTLEVBQUVnUyxTQUFTMVEsS0FBS2lSLFNBQVMsR0FBRyxXQUFXLE9BQU92UyxFQUFFZ1MsU0FBUzFRLEtBQUtpUixTQUFTLEdBQUUsR0FBSSxZQUFZLE9BQU92UyxFQUFFZ1MsU0FBUzFRLEtBQUtpUixTQUFTLEdBQUUsR0FBSSxZQUFZLE9BQU92UyxFQUFFZ1MsU0FBUzFRLEtBQUtpUixTQUFTLEdBQUUsR0FBSSxZQUFZNGMsR0FBRyxPQUFPLElBQUlub0IsV0FBVyxDQUFDbW9CLElBQUksR0FBRyxJQUFJQSxJQUFJLEdBQUcsSUFBSUEsSUFBSSxFQUFFLElBQUksSUFBSUEsS0FBS2h3QixFQUFFZ0gsUUFBUW5HLEdBQUcsU0FBU212QixFQUFFaHdCLEVBQUVsQixHQUFnQlUsT0FBT0MsZUFBZU8sRUFBRSxhQUFhLENBQUNELE9BQU0sSUFBSyxJQUFJYyxFQUFVOFAsR0FBRzlQLEVBQVQvQixFQUFFLE1BQWErQixFQUFFWCxXQUFXVyxFQUFFLENBQUNtRyxRQUFRbkcsR0FBR2IsRUFBRWdILFFBQVEsTUFBTU8sWUFBWXlvQixHQUFHN3RCLEtBQUtvUSxPQUFPeWQsR0FBRyxJQUFJbm9CLFdBQVcsR0FBRyxTQUFTbW9CLEdBQUdBLEVBQUUwQixRQUFRMUIsSUFBSTd0QixLQUFLb1EsUUFBTyxFQUFHNUIsRUFBRTNKLFNBQVNhLFdBQVcxRixLQUFLb1EsT0FBT3lkLEtBQUssbUJBQW1CQSxHQUFHLE9BQU8sSUFBSW5vQixXQUFXLENBQUNtb0IsR0FBRyxHQUFHQSxHQUFHLEdBQUcsSUFBSUEsR0FBRyxFQUFFLElBQUksSUFBSUEsSUFBSSxpQkFBaUJBLEdBQUcsSUFBSWh3QixFQUFFLEdBQUcsT0FBT2d3QixFQUFFMEIsUUFBUTFCLElBQUlod0IsR0FBRyxTQUFTZ3dCLEdBQUcsT0FBT0EsRUFBRXZPLFNBQVMsSUFBSTBoQixTQUFTLEVBQUUsS0FBN0MsQ0FBbURuVCxLQUFLdlAsU0FBU3pnQixFQUFFLE9BQU8sU0FBU2d3QixFQUFFaHdCLEVBQUVsQixHQUFnQixJQUFJK0IsRUFBVThQLEdBQUc5UCxFQUFUL0IsRUFBRSxNQUFhK0IsRUFBRVgsV0FBV1csRUFBRSxDQUFDbUcsUUFBUW5HLEdBQUdtdkIsRUFBRXB4QixRQUFRK1IsRUFBRTNKLFNBQVMsU0FBU2dwQixFQUFFaHdCLEVBQUVsQixHQUFnQlUsT0FBT0MsZUFBZU8sRUFBRSxhQUFhLENBQUNELE9BQU0sSUFBS0MsRUFBRWdILFFBQVEsU0FBU2dwQixHQUFHLElBQUksSUFBSWh3QixFQUFFLEVBQUVsQixFQUFFa0YsVUFBVVYsT0FBT3pDLEVBQUUrRCxNQUFNOUYsRUFBRSxFQUFFQSxFQUFFLEVBQUUsR0FBR2MsRUFBRSxFQUFFQSxFQUFFZCxFQUFFYyxJQUFJaUIsRUFBRWpCLEVBQUUsR0FBR29FLFVBQVVwRSxHQUFHLElBQUkrUSxHQUFFLEVBQUdwUSxHQUFFLEVBQUdoQixPQUFFLEVBQU8sSUFBSSxJQUFJLElBQUlILEVBQUVMLEVBQUU4QixFQUFFaEIsT0FBTzY0QixjQUFjL25CLEdBQUd2UixFQUFFTCxFQUFFcVAsUUFBUThoQixNQUFNdmYsR0FBRSxFQUFHLENBQUMsSUFBSTZRLEVBQUVwaUIsRUFBRVcsTUFBTUMsR0FBR3doQixFQUFFbGUsUUFBUSxNQUFNMHNCLEdBQUd6dkIsR0FBRSxFQUFHaEIsRUFBRXl3QixFQUE3RyxRQUF1SCxLQUFLcmYsR0FBRzVSLEVBQUU0NUIsUUFBUTU1QixFQUFFNDVCLFNBQXBCLFFBQXFDLEdBQUdwNEIsRUFBRSxNQUFNaEIsR0FBRyxJQUFJZ3BDLEVBQUUsSUFBSXZZLEVBQUVod0IsR0FBR2IsRUFBRSxFQUFFa29DLEdBQUUsRUFBR3ptQyxHQUFFLEVBQUcxQixPQUFFLEVBQU8sSUFBSSxJQUFJLElBQUlvb0MsRUFBRUMsRUFBRTFtQyxFQUFFaEIsT0FBTzY0QixjQUFjMk8sR0FBR0MsRUFBRUMsRUFBRW41QixRQUFROGhCLE1BQU1tWCxHQUFFLEVBQUcsQ0FBQyxJQUFJRyxFQUFFRixFQUFFdm5DLE1BQU13b0MsRUFBRXZqQyxJQUFJd2lDLEVBQUVyb0MsR0FBR0EsR0FBR3FvQyxFQUFFbGtDLFFBQVEsTUFBTTBzQixHQUFHcHZCLEdBQUUsRUFBRzFCLEVBQUU4d0IsRUFBeEgsUUFBa0ksS0FBS3FYLEdBQUdFLEVBQUU1TyxRQUFRNE8sRUFBRTVPLFNBQXBCLFFBQXFDLEdBQUcvM0IsRUFBRSxNQUFNMUIsR0FBRyxPQUFPcXBDLElBQUksU0FBU3ZZLEVBQUVod0IsRUFBRWxCLEdBQWlFLElBQUkrQixFQUFyRHJCLE9BQU9DLGVBQWVPLEVBQUUsYUFBYSxDQUFDRCxPQUFNLElBQWtCLE1BQU00USxJQUFJOVAsRUFBZi9CLEVBQUUsS0FBbUIrQixFQUFFWCxXQUFXVyxFQUFFLENBQUNtRyxRQUFRbkcsSUFBSW1HLFFBQVE0eUIsYUFBYTU1QixFQUFFZ0gsUUFBUSxNQUFNTyxZQUFZeW9CLEdBQUc3dEIsS0FBS21pQixZQUFZMEwsRUFBRXRELFlBQVl2cUIsS0FBSzA1QixhQUFhN0wsRUFBRThMLGFBQWEzNUIsS0FBSzlCLElBQUkydkIsRUFBRTN2QixJQUFJOEIsS0FBS3NoQixHQUFHdU0sRUFBRXZNLEdBQUd0aEIsS0FBS29oQixPQUFPeU0sRUFBRXpNLE9BQU9waEIsS0FBSzQ1QixPQUFPaDdCLE9BQU9nN0IsUUFBUWg3QixPQUFPaTdCLFNBQVMsT0FBTzc1QixLQUFLNkQsR0FBRzJLLEVBQUVrcEIsY0FBYzEzQixLQUFLODVCLFFBQVEzN0IsS0FBSzZCLE9BQU8sVUFBYUEsS0FBSys1QixPQUFPLzVCLEtBQUtnNkIsY0FBbUJoNkIsS0FBSzQ1QixPQUFPSyxPQUFPQyxVQUFVLE1BQU1sNkIsS0FBSzlCLElBQUlrUyxPQUFPLENBQUNsVCxLQUFLLFlBQVcsRUFBRyxDQUFDLFVBQVUsWUFBWTZ2QixLQUFLYyxJQUFJN3RCLEtBQUsrNUIsT0FBT2xNLEVBQUU3dEIsS0FBS2c2QixnQkFBaUIsY0FBYyxJQUFJbk0sRUFBRTd0QixLQUFLaVAsU0FBU0MsWUFBWWxQLEtBQUttaUIsYUFBYXRrQixFQUFFbUMsS0FBS2lQLFNBQVNDLFlBQVlsUCxLQUFLMDVCLGNBQWMvOEIsRUFBRWt4QixFQUFFenBCLFFBQVF6SCxHQUFHcUQsS0FBSzQ1QixPQUFPSyxPQUFPRSxRQUFRLENBQUNqOUIsS0FBSyxVQUFVb2tCLEdBQUd0aEIsS0FBS3NoQixHQUFHbFIsUUFBUXBRLEtBQUsrNUIsT0FBT3A5QixHQUFHb3dCLEtBQUtjLElBQUlod0IsRUFBRXFELEtBQUssSUFBSXdFLFdBQVdtb0IsSUFBSTd0QixLQUFLZ0IsS0FBS3dOLEVBQUVtcEIsV0FBVzMzQixLQUFLZzZCLFlBQVlyOUIsUUFBUSxTQUFTa3hCLEVBQUVod0IsRUFBRWxCLEdBQWdCVSxPQUFPQyxlQUFlTyxFQUFFLGFBQWEsQ0FBQ0QsT0FBTSxJQUFLLElBQUljLEVBQUUyZ0IsRUFBRTFpQixFQUFFLEtBQUtjLEVBQUU0aEIsRUFBRTFpQixFQUFFLEtBQUs2UixFQUFFN1IsRUFBRSxJQUFJeUIsRUFBRXpCLEVBQUUsR0FBR1MsRUFBRVQsRUFBRSxHQUFHTSxFQUFFTixFQUFFLEdBQUdDLEVBQUV5aUIsRUFBRTFpQixFQUFFLElBQUksU0FBUzBpQixFQUFFd08sR0FBRyxPQUFPQSxHQUFHQSxFQUFFOXZCLFdBQVc4dkIsRUFBRSxDQUFDaHBCLFFBQVFncEIsR0FBRyxNQUFNdVksRUFBRWhwQyxFQUFFMkssT0FBT0YsYUFBYTdLLEVBQUVJLEVBQUUySyxPQUFPRCxhQUFhbzlCLEVBQUU5bkMsRUFBRTJLLE9BQU9ra0IsY0FBY3h0QixFQUFFLGdCQUFnQixNQUFNMUIsRUFBRTRFLFNBQVMsTUFBTXdqQyxFQUFFLFlBQVksTUFBTUMsRUFBRWhnQyxZQUFZeW9CLEdBQUc3dEIsS0FBS29ILElBQUkzSSxFQUFFdUIsS0FBS3doQyxRQUFRM1QsRUFBRTd0QixLQUFLa0MsTUFBTSxDQUFDdS9CLG9CQUFtQixFQUFHbUQsTUFBTSxDQUFDeitCLE1BQU0sRUFBRXVMLElBQUksSUFBSTIwQixjQUFhLEdBQUksd0JBQXdCeFksRUFBRWh3QixHQUFHLElBQUksSUFBSWxCLEVBQUUsRUFBRStCLEVBQUViLEVBQUV5b0MsTUFBTW5sQyxPQUFPeEUsRUFBRStCLEVBQUUvQixJQUFJLENBQUMsTUFBTWMsRUFBRUksRUFBRXlvQyxNQUFNM3BDLEdBQUc2UixFQUFFN1IsRUFBRSxFQUFFK0IsRUFBRWIsRUFBRXlvQyxNQUFNM3BDLEVBQUUsR0FBR2lELE9BQU8ybUMsaUJBQWlCLEdBQUc5b0MsR0FBR293QixHQUFHQSxHQUFHcmYsRUFBRSxPQUFPM1EsRUFBRTJvQyxjQUFjN3BDLEdBQUcsTUFBTSxHQUFHLE9BQU9xRCxLQUFLaVAsU0FBUzJwQixTQUFTLGVBQWVwcUIsRUFBRXdkLGFBQWFoc0IsS0FBS2lQLFNBQVMycEIsU0FBUyxnQkFBZ0J4NkIsRUFBRTZHLFVBQVVqRixLQUFLaVAsU0FBUzJwQixTQUFTLGNBQWNsNkIsRUFBRW1HLFNBQVM3RSxLQUFLaVAsU0FBUzJwQixTQUFTLFNBQVN4NkIsRUFBRTBHLFFBQVE5RSxLQUFLaVAsU0FBUzJwQixTQUFTLGNBQWNuN0IsRUFBRW9ILFFBQVE2cEIsWUFBWTF1QixLQUFLaVAsU0FBUzJwQixTQUFTLG9CQUFvQng2QixFQUFFK0csV0FBV25GLEtBQUtpUCxTQUFTMnBCLFNBQVMsZ0JBQWdCMzdCLEVBQUV5SyxlQUFlMUgsS0FBS2lQLFNBQVMycEIsU0FBUyxTQUFTNzdCLEdBQUdpRCxLQUFLNmhDLElBQUk3aEMsS0FBS2lQLFNBQVMycEIsU0FBUyxNQUFNeDdCLEVBQUV1NEIsSUFBL0IzMUIsQ0FBb0MsQ0FBQ3ErQixVQUFVcitCLEtBQUt3aEMsUUFBUW43QixRQUFRckcsS0FBSytoQyxnQkFBZ0J4QixXQUFXLEtBQUt2Z0MsS0FBS3ltQyxZQUFZLEdBQUcsZ0JBQWdCem1DLEtBQUs2RCxHQUFHcWhDLEVBQUVsWCxrQkFBa0JodUIsS0FBS2dpQyx3QkFBd0I3akMsS0FBSzZCLE9BQU9BLEtBQUs2RCxHQUFHcWhDLEVBQUUvWCxhQUFhbnRCLEtBQUtpaUMsb0JBQW9COWpDLEtBQUs2QixPQUFPQSxLQUFLNkQsR0FBRzdHLEVBQUVrZixXQUFXbGMsS0FBS2tpQyxpQkFBaUIvakMsS0FBSzZCLE9BQU9BLEtBQUs2RCxHQUFHN0csRUFBRWdoQixnQkFBZ0JoZSxLQUFLbWlDLHNCQUFzQmhrQyxLQUFLNkIsT0FBT0EsS0FBSzZELEdBQUc3RyxFQUFFMGQsZUFBZTFhLEtBQUtvaUMscUJBQXFCamtDLEtBQUs2QixPQUFPQSxLQUFLNkQsR0FBRzdHLEVBQUVpZSxZQUFZamIsS0FBS3FpQyxrQkFBa0Jsa0MsS0FBSzZCLE9BQU9BLEtBQUs2RCxHQUFHdWlDLEVBQUVyUyxhQUFhL3pCLEtBQUtzaUMseUJBQXlCbmtDLEtBQUs2QixPQUFPQSxLQUFLNkQsR0FBR3VpQyxFQUFFclIsY0FBYy8wQixLQUFLdWlDLG9CQUFvQnBrQyxLQUFLNkIsT0FBTyxtQkFBbUJBLEtBQUtpUCxTQUFTNk0sWUFBWTliLEtBQUtnQixLQUFLaEUsRUFBRWllLFlBQVksSUFBSTNaLE1BQU0sNEJBQTRCLE1BQU11c0IsRUFBRTd0QixLQUFLaVAsU0FBU0MsWUFBWSxpQkFBaUJyUixFQUFFbUMsS0FBS2lQLFNBQVNDLFlBQVksZ0JBQWdCbFAsS0FBSzBtQyxhQUFhN29DLEVBQUUrdkIsU0FBUzV0QixLQUFLa0MsTUFBTTBpQyxNQUFNLENBQUN6K0IsTUFBTSxFQUFFdUwsSUFBSW1jLEVBQUV4b0IsV0FBVyxHQUFHazdCLFdBQVcsS0FBS3ZnQyxLQUFLbW1DLFNBQVMsTUFBTSwwQkFBMEJubUMsS0FBS3E1QixPQUFPLGNBQWNyOEIsRUFBRWdkLGFBQWEsc0JBQXNCNlQsR0FBRzd0QixLQUFLZ0IsS0FBS29sQyxFQUFFaFQsZUFBZXZGLEdBQUcsdUJBQXVCN3RCLEtBQUtnQixLQUFLb2xDLEVBQUVyOUIsYUFBYSwyQkFBMkIvSSxLQUFLa0MsTUFBTXUvQixvQkFBbUIsRUFBR3poQyxLQUFLNmhDLElBQUk1QyxtQkFBbUIsc0JBQXNCai9CLEtBQUs2aEMsSUFBSTVDLG1CQUFtQmovQixLQUFLNmhDLElBQUkzQyxXQUFXLG9CQUFvQnJSLEVBQUVod0IsR0FBR21DLEtBQUt3aEMsUUFBUXhnQyxLQUFLLFFBQVEsSUFBSXBFLEVBQUVpSSxRQUFRbStCLE9BQU8sVUFBVWhqQyxLQUFLd2hDLFFBQVF4a0IsT0FBT2dFLE1BQU1oaEIsS0FBS2lqQyxTQUFTaUMsRUFBRS9YLGFBQWFVLEVBQUVod0IsR0FBRSxHQUFJLGtCQUFrQmd3QixFQUFFaHdCLEVBQUVsQixRQUFHLElBQVNBLElBQUlBLEdBQUUsR0FBSXFELEtBQUt3aEMsUUFBUXhnQyxLQUFLLFFBQVEsSUFBSXBFLEVBQUVpSSxRQUFRbStCLE9BQU8sUUFBUWhqQyxLQUFLd2hDLFFBQVF4a0IsT0FBT2dFLE1BQU1oaEIsS0FBS2lqQyxTQUFTaUMsRUFBRS9YLGFBQWFVLEVBQUVod0IsRUFBRWxCLEdBQUcsU0FBU2t4QixFQUFFaHdCLEVBQUVsQixFQUFFK0IsR0FBRyxJQUFJakIsRUFBRSxDQUFDMmxDLFVBQVV2VixFQUFFd1YsaUJBQWlCeGxDLE9BQU9sQixFQUFFNEcsVUFBVSsvQixXQUFXNWtDLElBQUcsR0FBSXNCLEtBQUt3aEMsUUFBUXhnQyxLQUFLbWtDLEVBQUUxbkMsR0FBRyxLQUFLb3dCLEdBQUcsSUFBSTd0QixLQUFLaVAsU0FBUzZNLFdBQVcsWUFBWTliLEtBQUt5bUMsV0FBVyxJQUFJem1DLEtBQUswbUMsV0FBVyxPQUFPMW1DLEtBQUtpUCxTQUFTQyxZQUFZLGlCQUFpQmxKLFFBQVEsTUFBTXc0QixZQUFZM2dDLEVBQUUsSUFBSW1DLEtBQUt3aEMsUUFBUXhrQixPQUFPcmdCLEVBQUVxRCxLQUFLMm1DLGFBQWE5WSxFQUFFaHdCLEdBQUdtQyxLQUFLa0MsTUFBTTBpQyxNQUFNam9DLEVBQUVxRCxLQUFLNG1DLFFBQVE1bUMsS0FBSzRtQyxPQUFPMy9CLFFBQVFqSCxLQUFLdWpDLFdBQVcsU0FBUzFWLEdBQUc3dEIsS0FBS2lQLFNBQVM2TSxhQUFhOWIsS0FBS3lqQyxPQUFPOVgsU0FBUzNyQixLQUFLNm1DLGFBQWFoWixJQUFJN3RCLEtBQUt1akMsWUFBWSxXQUFXLE1BQU1wOUIsTUFBTTBuQixFQUFFbmMsSUFBSTdULEdBQUdtQyxLQUFLa0MsTUFBTTBpQyxNQUFNNWtDLEtBQUtnQixLQUFLa2tDLEVBQUUxWSxZQUFZeHNCLEtBQUt3aEMsUUFBUXhrQixPQUFPZ0UsSUFBSSxDQUFDaU4sUUFBUSxDQUFDN00sT0FBTyxNQUFNMGxCLGVBQWVqWixLQUFLaHdCLE9BQU8sV0FBV21DLEtBQUt5akMsT0FBT2hYLEtBQUt6c0IsS0FBS3doQyxRQUFReGtCLE9BQU9nRSxJQUFJLENBQUNpTixRQUFRLENBQUM2WSxNQUFNLGNBQWMxWixNQUFNLEtBQUtwdEIsS0FBS2tDLE1BQU1ta0MsY0FBYSxFQUFHcm1DLEtBQUsrbUMsaUJBQWlCLGVBQWUvbUMsS0FBS3lqQyxPQUFPaFgsS0FBS3pzQixLQUFLd2hDLFFBQVF4a0IsT0FBT2dFLEtBQUtvTSxNQUFNLEtBQUtwdEIsS0FBS3doQyxRQUFReGdDLEtBQUssUUFBUSxJQUFJcEUsRUFBRWlJLFFBQVFtK0IsT0FBTyxVQUFVaGpDLEtBQUt3aEMsUUFBUXhrQixPQUFPZ0UsUUFBUSxhQUFhNk0sRUFBRWh3QixHQUFHLE1BQU1tcEMsVUFBVXJxQyxHQUFHcUQsS0FBS2lQLFNBQVM2TSxXQUFXcGQsRUFBRXNCLEtBQUtpUCxTQUFTOE0sVUFBVTdQLFNBQVN6TyxFQUFFb3dCLEVBQUVyZixFQUFFcWYsRUFBRWh3QixFQUFFTyxFQUFFZ25DLEVBQUU2QixpQkFBaUJ4cEMsRUFBRWQsR0FBRyxPQUFPNlIsR0FBRzlQLEdBQUdqQixHQUFHaUIsRUFBRSxDQUFDeUgsTUFBTS9ILEVBQUVzVCxJQUFJLElBQUksQ0FBQ3ZMLE1BQU0vSCxFQUFFc1QsSUFBSTB6QixFQUFFNkIsaUJBQWlCejRCLEVBQUU3UixJQUFJLGFBQWFreEIsR0FBRyxHQUFHLEtBQUs3dEIsS0FBS2tDLE1BQU0waUMsTUFBTWx6QixJQUFJLE9BQU8sTUFBTUEsSUFBSTdULEdBQUdtQyxLQUFLMm1DLGFBQWE5WSxFQUFFN3RCLEtBQUtnZCxPQUFPd2hCLGFBQWEsSUFBSSxPQUFPM2dDLEdBQUdtQyxLQUFLa0MsTUFBTTBpQyxNQUFNbHpCLEtBQUssS0FBSzdULE9BQUUsR0FBUW1DLEtBQUtrQyxNQUFNMGlDLE1BQU0sQ0FBQ3orQixNQUFNbkcsS0FBS2tDLE1BQU0waUMsTUFBTWx6QixJQUFJLEVBQUVBLElBQUk3VCxJQUFHLEdBQUksVUFBVW1DLEtBQUt3aEMsUUFBUSxLQUFLeGhDLEtBQUs2aEMsSUFBSSxLQUFLN2hDLEtBQUtrQyxNQUFNLENBQUN1L0Isb0JBQW1CLEVBQUdtRCxNQUFNLENBQUN6K0IsTUFBTSxFQUFFdUwsSUFBSSxJQUFJMjBCLGNBQWEsR0FBSSxpQkFBaUIsUUFBUXJtQyxLQUFLa0MsTUFBTW1rQyxnQkFBZ0JybUMsS0FBS2lQLFdBQVdqUCxLQUFLaVAsU0FBUzhNLFVBQVVpZ0IsY0FBYyxPQUFPaDhCLEtBQUtpUCxTQUFTOE0sVUFBVWlyQixnQkFBVyxJQUFTaG5DLEtBQUtpUCxTQUFTOE0sVUFBVWlyQixXQUFXLGFBQWEsT0FBT2huQyxLQUFLd2hDLFFBQVF4a0IsT0FBTyxhQUFhLE9BQU9oZCxLQUFLaVAsU0FBU0MsWUFBWSxnQkFBZ0IsYUFBYSxPQUFPbFAsS0FBS2lQLFNBQVNDLFlBQVksa0JBQWtCclIsRUFBRWdILFFBQVF1Z0MsR0FBRyxTQUFTdlgsRUFBRWh3QixFQUFFbEIsR0FBZ0JVLE9BQU9DLGVBQWVPLEVBQUUsYUFBYSxDQUFDRCxPQUFNLElBQUssSUFBSWMsRUFBRWpCLEVBQUVkLEVBQUUsR0FBRzZSLEVBQUU3UixFQUFFLEdBQUd5QixFQUFFekIsRUFBRSxHQUFXTSxHQUFHeUIsRUFBVC9CLEVBQUUsTUFBYStCLEVBQUVYLFdBQVdXLEVBQUUsQ0FBQ21HLFFBQVFuRyxHQUFHLE1BQU05QixFQUFFYSxFQUFFc0ssT0FBT0QsYUFBYSxNQUFNdVgsRUFBRWphLGNBQWNwRixLQUFLNlosc0JBQXFCLEVBQUc3WixLQUFLOFosVUFBVSxFQUFFOVosS0FBSytaLFlBQVcsRUFBRyxPQUFPL1osS0FBSzZELEdBQUdqSCxFQUFFb2QsWUFBWWhhLEtBQUtpYSxXQUFXOWIsS0FBSzZCLE9BQU8saUJBQWlCNnRCLEdBQUcsUUFBUSxLQUFLQSxFQUFFLElBQUksS0FBS0EsRUFBRSxJQUFJLEtBQUtBLEVBQUUsSUFBSSxJQUFJQSxFQUFFLElBQUksbUJBQW1CQSxHQUFHLE1BQU1od0IsRUFBRSxDQUFDdWMsVUFBUyxFQUFHQyxVQUFTLEdBQUksT0FBTSxFQUFHd1QsSUFBSWh3QixFQUFFdWMsVUFBUyxJQUFJLEVBQUd5VCxJQUFJaHdCLEVBQUV3YyxVQUFTLEdBQUl4YyxFQUFFLGFBQWEsR0FBR21DLEtBQUs2WixxQkFBcUIsQ0FBQyxHQUFHN1osS0FBS3NhLGFBQWFuWixPQUFPLEdBQUcsT0FBTyxJQUFJMHNCLEVBQUVod0IsRUFBRSxJQUFJLEdBQUdnd0IsRUFBRTd0QixLQUFLeWEscUJBQXFCb1QsR0FBR2h3QixLQUFLLEdBQUdtQyxLQUFLZ0IsS0FBS3BFLEVBQUU4ZCxvQkFBb0IsQ0FBQyxHQUFHMWEsS0FBS3NhLGFBQWFuWixPQUFPLEdBQUcsT0FBTyxNQUFNMHNCLEVBQUU3dEIsS0FBS3NhLGFBQWFsVyxNQUFNLElBQUlwRSxLQUFLMmEsZUFBZWtULEdBQUc3dEIsS0FBS2lhLGNBQWMsZUFBZTRULEdBQUcsR0FBR3hPLEVBQUV6RSxVQUFVaVQsR0FBRyxDQUFDN3RCLEtBQUs2WixzQkFBcUIsRUFBRyxNQUFNaGMsRUFBRXdoQixFQUFFdkUsWUFBWStTLEVBQUUsSUFBSWh3QixFQUFFdWMsVUFBVXBhLEtBQUsrYSxpQkFBaUJsZCxFQUFFd2MsVUFBVXJhLEtBQUtnYixzQkFBc0JoYixLQUFLZ0IsS0FBS3BFLEVBQUVxZSxZQUFZLElBQUkzWixNQUFNLHFCQUFxQnRCLEtBQUtpYSxhQUFhamEsS0FBS2lhLGFBQWEsaUJBQWlCamEsS0FBSzhaLFlBQVksSUFBSStULEVBQUUsSUFBSXp2QixFQUFFNEcsV0FBVzZvQixFQUFFdmtCLEtBQUssSUFBSTdMLEVBQUV5ZCxlQUFlMlMsRUFBRWhuQixHQUFHZ25CLEVBQUV2a0IsS0FBS3pDLEdBQUc3RyxLQUFLOFosVUFBVTlaLEtBQUttUCxPQUFPNUgsV0FBV3NtQixFQUFFLGlCQUFpQjd0QixLQUFLOFosWUFBWSxJQUFJK1QsRUFBRSxJQUFJenZCLEVBQUUyRyxXQUFXOG9CLEVBQUV2a0IsS0FBSyxJQUFJN0wsRUFBRTBkLGVBQWUwUyxFQUFFaG5CLEdBQUdnbkIsRUFBRXZrQixLQUFLekMsR0FBRzdHLEtBQUs4WixVQUFVOVosS0FBS21QLE9BQU83SCxXQUFXdW1CLEVBQUUsZUFBZSxHQUFHN3RCLEtBQUtzYSxhQUFhblosT0FBTyxHQUFHLE9BQU8sS0FBSyxJQUFJMHNCLEVBQUU3dEIsS0FBS29iLHFCQUFxQixPQUFPeVMsR0FBRzd0QixLQUFLcWIsY0FBY3dTLEdBQUdBLEVBQUUscUJBQXFCLElBQUlBLEVBQUUsRUFBRWh3QixFQUFFLEdBQUdsQixFQUFFcUQsS0FBS3NhLGFBQWFwVSxNQUFNMm5CLEVBQUUsR0FBRyxHQUFHQSxHQUFHLEVBQUVod0IsRUFBRWtQLFVBQVUsR0FBR3BRLEtBQUssRUFBRWtCLEVBQUV5ZCxRQUFRLEdBQUczZSxFQUFFa0IsRUFBRWlQLFNBQVM5TSxLQUFLc2EsYUFBYXBVLE1BQU0ybkIsRUFBRSxHQUFHQSxHQUFHLEVBQUUsSUFBSWh3QixFQUFFeWQsU0FBUyxJQUFJemQsRUFBRXlkLFNBQVMsS0FBS3pkLEVBQUV5ZCxTQUFTLEtBQUt6ZCxFQUFFeWQsU0FBUyxJQUFJdGIsS0FBS3NhLGFBQWFwVSxNQUFNLEVBQUUsR0FBRyxPQUFPbEcsS0FBS3NhLGNBQWN0YSxLQUFLc2EsYUFBYW5aLE9BQU8sR0FBR25CLEtBQUtzYSxhQUFhbFcsTUFBTSxHQUFHcEUsS0FBS2dCLEtBQUtwRSxFQUFFcWUsWUFBWWpiLEtBQUtvSCxJQUFJLElBQUk5RixNQUFNLFdBQVd6RCxFQUFFeWQsVUFBUyxHQUFJLEtBQUssR0FBR3RiLEtBQUtzYSxhQUFhblosT0FBT3RELEVBQUVpUCxTQUFTLEdBQUcsT0FBTyxLQUFLOU0sS0FBS3NhLGFBQWFsVyxNQUFNLEdBQUcsSUFBSTFGLEVBQUVzQixLQUFLc2EsYUFBYXBVLE1BQU0sRUFBRSxHQUFHbEcsS0FBS3NhLGFBQWFsVyxNQUFNLEdBQUcsSUFBSTNHLEVBQUV1QyxLQUFLc2EsYUFBYWxXLE1BQU0sR0FBRyxHQUFHLE9BQU8zRyxFQUFFLElBQUlpQixHQUFHLFNBQVNqQixHQUFHSSxFQUFFNk0sSUFBSWhNLEVBQUVzQixLQUFLc2EsYUFBYWxXLE1BQU0sR0FBR3ZHLEVBQUUsY0FBY2d3QixHQUFHLE9BQU9BLEVBQUV2UyxTQUFTLEtBQUssR0FBR3RiLEtBQUt5YixpQkFBaUJvUyxHQUFHLE1BQU0sS0FBSyxFQUFFN3RCLEtBQUswYixjQUFjbVMsR0FBRyxNQUFNLEtBQUssRUFBRTd0QixLQUFLMmIsZUFBZWtTLEdBQUcsTUFBTSxLQUFLLEdBQUc3dEIsS0FBS3NhLGFBQWFsVyxNQUFNLEdBQUcsTUFBTSxRQUFRcEUsS0FBS3NhLGFBQWFsVyxNQUFNLElBQUksaUJBQWlCeXBCLEdBQUcsSUFBSWh3QixFQUFFbUMsS0FBS21QLE9BQU83SCxXQUFXM0ssRUFBRXFELEtBQUttUCxPQUFPNUgsV0FBVzdJLEVBQUVzQixLQUFLc2EsYUFBYWxXLE1BQU15cEIsRUFBRS9nQixVQUFVLE1BQU1yUCxHQUFHLElBQUlSLEVBQUU0SCxTQUFTaVQsUUFBUXBaLEVBQUVBLEVBQUV5QyxRQUFRcU4sRUFBRXhPLEtBQUtpUCxTQUFTNk0sV0FBV3JlLEVBQUVBLEVBQUVxZSxnQkFBVyxFQUFPLEdBQUc5YixLQUFLaVAsU0FBUzhNLFVBQVU3UCxTQUFTc0MsRUFBRXRDLFNBQVNsTSxLQUFLaVAsU0FBUzhNLFVBQVUzQixTQUFTNUwsRUFBRTRMLFNBQVNwYSxLQUFLaVAsU0FBUzhNLFVBQVVDLFNBQVN4TixFQUFFNkwsU0FBU3JhLEtBQUtpYyxtQkFBbUI0UixFQUFFL2dCLFlBQVk5TSxLQUFLZ0IsS0FBS3BFLEVBQUVzZixZQUFZbGMsS0FBSytaLFlBQVcsR0FBSWxjLElBQUlBLEVBQUVzZSxrQkFBa0IsQ0FBQyxJQUFJMFIsRUFBRWh3QixFQUFFeUwsS0FBSyxPQUFPa0YsRUFBRTROLGtCQUFrQnlSLEVBQUV4UixXQUFXN04sRUFBRTROLGlCQUFpQjVOLEVBQUU4TixnQkFBZ0J1UixFQUFFam1CLGFBQWE0RyxFQUFFOE4sZUFBZTlOLEVBQUU0TixpQkFBaUIsS0FBSyxNQUFNeVIsRUFBRXRSLGdCQUFnQixFQUFFLE1BQU0sS0FBSyxNQUFNc1IsRUFBRXRSLGdCQUFnQixFQUFFLE1BQU0sS0FBSyxNQUFNc1IsRUFBRXRSLGdCQUFnQixJQUFJLEdBQUc1ZixJQUFJQSxFQUFFd2Ysa0JBQWtCLENBQUMsSUFBSTBSLEVBQUVseEIsRUFBRTJNLEtBQUssR0FBRyxpQkFBaUJrRixFQUFFZ08sVUFBVSxDQUFDLElBQUkzZSxFQUFFb04sS0FBS0MsTUFBTSxJQUFJc0QsRUFBRWdPLFdBQVcsR0FBRzNlLEVBQUUsRUFBRSxDQUFDLElBQUlsQixFQUFFa0IsRUFBRSxJQUFJZ3dCLEVBQUV4akIsWUFBWXdqQixFQUFFeGpCLFVBQVUsSUFBSXdqQixFQUFFeGpCLFVBQVVDLE9BQU0sRUFBR3VqQixFQUFFeGpCLFVBQVVnSyxJQUFJMVgsRUFBRWt4QixFQUFFeGpCLFVBQVVrSyxRQUFRMVcsRUFBRWd3QixFQUFFeGpCLFVBQVVtSyxRQUFRLE9BQU8seUJBQXlCcVosR0FBRyxJQUFJaHdCLEVBQUUsQ0FBQ3NlLG1CQUFrQixHQUFJdGUsRUFBRTZlLFdBQVdtUixFQUFFLEtBQUssRUFBRWh3QixFQUFFMGUsaUJBQWlCLEVBQUVzUixFQUFFLEtBQUssRUFBRUEsRUFBRSxLQUFLLEVBQUVod0IsRUFBRXVlLGdCQUFnQnBjLEtBQUsyYyx1QkFBdUI5ZSxFQUFFMGUsaUJBQWlCMWUsRUFBRStKLGNBQWMsSUFBSWltQixFQUFFLE1BQU0sRUFBRWh3QixFQUFFK2UsYUFBYSxFQUFFaVIsRUFBRSxNQUFNLEVBQUVod0IsRUFBRWdmLG9CQUFvQixFQUFFZ1IsRUFBRSxNQUFNLEVBQUVod0IsRUFBRWlmLG1CQUFtQixFQUFFK1EsRUFBRSxHQUFHaHdCLEVBQUU4SixpQkFBaUI5SixFQUFFNmUsYUFBYSxJQUFJL2YsRUFBRStCLEVBQUVqQixFQUFFbUIsT0FBT3NlLFVBQVVELFVBQVVFLGNBQWMzTyxFQUFFM1EsRUFBRTBlLGdCQUFnQixPQUFPLElBQUk5ZSxFQUFFNGYsUUFBUSxXQUFXeGYsRUFBRTBlLGlCQUFpQixHQUFHMWUsRUFBRTZlLFdBQVcsRUFBRWhlLEVBQUUsSUFBSStELE1BQU0sR0FBRzlGLEVBQUU2UixFQUFFLElBQUkzUSxFQUFFNmUsV0FBVyxFQUFFaGUsRUFBRSxJQUFJK0QsTUFBTSxHQUFHOUYsRUFBRTZSLElBQUksSUFBSS9RLEVBQUU0ZixRQUFRLFlBQVl4ZixFQUFFNmUsV0FBVyxFQUFFaGUsRUFBRSxJQUFJK0QsTUFBTSxHQUFHOUYsRUFBRTZSLElBQUkzUSxFQUFFNmUsV0FBVyxFQUFFL2YsRUFBRWtCLEVBQUUwZSxnQkFBZ0I3ZCxFQUFFLElBQUkrRCxNQUFNLEdBQUc1RSxFQUFFMGUsaUJBQWlCLEVBQUU1ZixFQUFFa0IsRUFBRTBlLGdCQUFnQixFQUFFLElBQUkxZSxFQUFFK0osZUFBZS9KLEVBQUU2ZSxXQUFXLEVBQUVoZSxFQUFFLElBQUkrRCxNQUFNLEdBQUc5RixFQUFFa0IsRUFBRTBlLGtCQUFrQjdkLEVBQUUsR0FBR2IsRUFBRTZlLFlBQVksRUFBRWhlLEVBQUUsS0FBSyxHQUFHYixFQUFFMGUsbUJBQW1CLEVBQUU3ZCxFQUFFLElBQUksR0FBR2IsRUFBRTBlLGtCQUFrQixFQUFFN2QsRUFBRSxLQUFLLEdBQUdiLEVBQUUrSixlQUFlLEVBQUUsSUFBSS9KLEVBQUU2ZSxhQUFhaGUsRUFBRSxLQUFLLEdBQUcvQixLQUFLLEVBQUUrQixFQUFFLElBQUksRUFBRS9CLElBQUksRUFBRStCLEVBQUUsSUFBSSxFQUFFQSxFQUFFLEdBQUcsR0FBR2IsRUFBRW1mLE9BQU90ZSxFQUFFYixFQUFFLGNBQWNnd0IsR0FBRyxJQUFJaHdCLEVBQUVtQyxLQUFLbVAsT0FBTzdILFdBQVcsSUFBSXpKLEVBQUUsT0FBTyxJQUFJbEIsRUFBRWtCLEVBQUV5TCxLQUFLM00sSUFBSWtCLEVBQUV5TCxLQUFLLElBQUk3TCxFQUFFMGQsZUFBZXhlLEVBQUVrQixFQUFFeUwsTUFBTSxJQUFJNUssRUFBRXNCLEtBQUtzYSxhQUFhbFcsTUFBTSxHQUFHLEdBQUd5cEIsRUFBRXJvQixLQUFLeEYsS0FBS3NhLGFBQWFsVyxNQUFNeXBCLEVBQUUvZ0IsU0FBUyxHQUFHLElBQUkwQixHQUFHLElBQUk5UCxLQUFLLEVBQUViLEVBQUUwZixPQUFPL08sRUFBRSxLQUFLQSxHQUFHeE8sS0FBS2dCLEtBQUtwRSxFQUFFcWUsWUFBWSxJQUFJM1osK0JBQStCa04sTUFBTSxLQUFLQSxHQUFHeE8sS0FBS3dkLG9CQUFvQjdnQixFQUFFMGYsV0FBV3JjLEtBQUt5ZCw4QkFBOEIvZSxHQUFHL0IsRUFBRTRmLGlCQUFpQixHQUFHN2QsS0FBSyxFQUFFL0IsRUFBRStnQixZQUFZLEVBQUVoZixLQUFLLEVBQUUvQixFQUFFaUwsYUFBYSxFQUFFbEosRUFBRS9CLEVBQUVvTyxrQkFBa0JFLEtBQUtDLE1BQU0sS0FBS3ZPLEVBQUVnaEIsZ0JBQWdCaGhCLEVBQUVtYSxZQUFZLElBQUkxWSxFQUFFekIsRUFBRWdoQixnQkFBZ0J2Z0IsRUFBRVQsRUFBRTRmLGdCQUFnQnRmLEVBQUVOLEVBQUVvTyx5QkFBeUI4aUIsRUFBRXZTLFFBQVEsSUFBSStELEVBQUVyZixLQUFLaWMsbUJBQW1CNFIsRUFBRS9nQixVQUFVLEdBQUcsSUFBSStnQixFQUFFcm9CLEtBQUssR0FBRyxDQUFDLElBQUkzSCxFQUFFbUMsS0FBS3ljLHlCQUF5Qm9SLEVBQUVyb0IsTUFBTXBILEVBQUVQLEVBQUV1ZSxpQkFBaUJ6ZixFQUFFZ2hCLGdCQUFnQnZnQixFQUFFUyxFQUFFMGUsaUJBQWlCNWYsRUFBRTRmLGdCQUFnQnRmLEVBQUVnTyxLQUFLQyxNQUFNLEtBQUs5TSxFQUFFekIsRUFBRW1hLFdBQVduYSxFQUFFaUwsYUFBYS9KLEVBQUUrSixhQUFhakwsRUFBRTBmLFdBQVdqZSxFQUFFekIsRUFBRTRmLGdCQUFnQm5mLEVBQUVULEVBQUVvTyxrQkFBa0I5TixFQUFFTixFQUFFdVAsU0FBU2xNLEtBQUtpUCxTQUFTOE0sVUFBVTdQLFNBQVN2UCxFQUFFbWEsVUFBVW5hLEVBQUVxZ0IsT0FBT25mLEVBQUVtZixPQUFPLE1BQU10ZSxFQUFFc0IsS0FBS2lQLFNBQVM4TSxVQUFVelYsTUFBTTVILEVBQUVpSixNQUFNOUosRUFBRThKLE1BQU1qSixFQUFFa0osYUFBYS9KLEVBQUUrSixhQUFhbEosRUFBRTJkLFdBQVdqZSxFQUFFTSxFQUFFNmQsZ0JBQWdCMWUsRUFBRStmLHFCQUFxQjVkLEtBQUsrWixhQUFhL1osS0FBS3dkLGtCQUFrQnhkLEtBQUtnQixLQUFLcEUsRUFBRW9oQixnQkFBZ0IsU0FBU2hlLEtBQUsrWixZQUFZL1osS0FBS3dkLG1CQUFtQnhkLEtBQUtnQixLQUFLcEUsRUFBRXFoQix1QkFBdUJqZSxLQUFLd2QsbUJBQWtCLEVBQUd4ZCxLQUFLa2UsYUFBWSxPQUFRbGUsS0FBS2tlLGNBQWMyUCxFQUFFdGdCLFFBQVEsQ0FBQ2pFLEtBQUt6TCxFQUFFeUwsTUFBTXRKLEtBQUtrZSxhQUFZLEdBQUkyUCxFQUFFcm9CLEtBQUtxb0IsRUFBRXJvQixLQUFLSSxNQUFNLEVBQUVpb0IsRUFBRXJvQixLQUFLckUsUUFBUXRELEVBQUVrSixRQUFRN0YsS0FBSzJzQixHQUFHeE8sR0FBR3JmLEtBQUtnQixLQUFLcEUsRUFBRXFlLFlBQVlqYixLQUFLb0gsSUFBSSxJQUFJOUYsTUFBTSx1QkFBdUJ1c0IsRUFBRS9nQixXQUFVLEdBQUksZUFBZStnQixHQUFHLElBQUlod0IsRUFBRW1DLEtBQUtzYSxhQUFhbFcsTUFBTSxHQUFHLEdBQUd5cEIsRUFBRTFQLFdBQVcsSUFBSXRnQixLQUFLLEVBQUVnd0IsRUFBRWxmLFdBQVcsSUFBSWtmLEVBQUUxUCxVQUFVLElBQUl4aEIsRUFBRSxHQUFHa0IsRUFBRSxHQUFHbUMsS0FBS21QLE9BQU81SCxXQUFXNlcsUUFBUXpoQixFQUFFa3hCLEVBQUV4UCxjQUFjcmUsS0FBS3NhLGFBQWFsVyxNQUFNLEdBQUcsR0FBR3lwQixFQUFFdmlCLElBQUl0TCxLQUFLc2EsYUFBYXBVLE1BQU0sRUFBRSxHQUFHbEcsS0FBS3NhLGFBQWFsVyxNQUFNLEdBQUcsS0FBS3pILEVBQUUsQ0FBQyxNQUFNa0IsRUFBRW1DLEtBQUtzYSxhQUFhbFcsTUFBTXlwQixFQUFFL2dCLFNBQVMsR0FBRyxHQUFHK2dCLEVBQUVyb0IsS0FBSzNILEVBQUUsSUFBSStCLE9BQU8wZSxTQUFTdVAsRUFBRXhQLGVBQWUsQ0FBQ3JlLEtBQUtpYyxtQkFBbUI0UixFQUFFL2dCLFdBQVc5TSxLQUFLZ0IsS0FBS3BFLEVBQUVxZSxZQUFZamIsS0FBS29ILElBQUksSUFBSTlGLHFDQUFxQ3VzQixFQUFFL2dCLGFBQVksR0FBSSxJQUFJalAsRUFBRSxHQUFHbEIsRUFBRSxFQUFFLElBQUlrQixFQUFFeU4sSUFBSXVpQixFQUFFdmlCLElBQUl6TixFQUFFNk0sSUFBSW1qQixFQUFFbmpCLElBQUltakIsRUFBRXJvQixLQUFLckUsT0FBT3hFLEdBQUcsQ0FBQyxJQUFJK0IsRUFBRW12QixFQUFFcm9CLEtBQUtJLE1BQU1oRyxPQUFPMGUsU0FBUzNoQixHQUFHLEVBQUVBLEdBQUdrQixFQUFFME4sS0FBSzdNLEVBQUUsR0FBR2IsRUFBRTBOLE1BQU0sSUFBSTdNLEVBQUUsR0FBR2IsRUFBRTBOLE1BQU0sSUFBSTdNLEVBQUUsR0FBRyxJQUFJYixFQUFFME4sTUFBTSxJQUFJN00sRUFBRSxHQUFHLElBQUksSUFBSS9CLEdBQUcsRUFBRWtCLEVBQUUySCxLQUFLcW9CLEVBQUVyb0IsS0FBS0ksTUFBTWhHLE9BQU8wZSxTQUFTM2hCLEdBQUdrQixFQUFFME4sS0FBSzVPLEdBQUdBLEdBQUdrQixFQUFFME4sS0FBS3ZMLEtBQUttUCxPQUFPNUgsV0FBV1IsUUFBUTdGLEtBQUtyRCxHQUFHbUMsS0FBS2dCLEtBQUtwRSxFQUFFb2hCLGdCQUFnQixlQUFlLElBQUlwZSxPQUFPMGUsU0FBU3VQLEVBQUV4UCxpQkFBaUJyZSxLQUFLaWMsbUJBQW1CNFIsRUFBRS9nQixVQUFVOU0sS0FBS2dCLEtBQUtwRSxFQUFFb2hCLGdCQUFnQixTQUFTaGUsS0FBS2dCLEtBQUtwRSxFQUFFcWUsWUFBWWpiLEtBQUtvSCxJQUFJLElBQUk5RixxQ0FBcUN1c0IsRUFBRS9nQixhQUFZLFNBQVUsR0FBRyxJQUFJblEsRUFBRSxDQUFDLElBQUlrQixFQUFFbUMsS0FBS3NhLGFBQWFsVyxNQUFNeXBCLEVBQUUvZ0IsU0FBUyxHQUFHLEdBQUcsSUFBSWpQLEVBQUUsSUFBSSxJQUFJQSxFQUFFLElBQUksSUFBSUEsRUFBRSxJQUFJLElBQUlBLEVBQUUsR0FBRyxDQUFDLElBQUlnd0IsRUFBRSxFQUFFLElBQUksSUFBSWx4QixFQUFFLEVBQUVBLEVBQUUsRUFBRUEsSUFBSWt4QixFQUFFLElBQUlBLEVBQUVod0IsRUFBRWxCLEdBQUdreEIsR0FBRyxHQUFHaHdCLEVBQUVBLEVBQUUrSCxNQUFNLEVBQUUvSCxFQUFFc0QsU0FBUyxHQUFHMHNCLEVBQUUsSUFBSUEsR0FBR0EsRUFBRWh3QixFQUFFLElBQUksSUFBSUEsRUFBRSxHQUFHZ3dCLEVBQUUsSUFBSUEsR0FBR0EsRUFBRWh3QixFQUFFLElBQUksSUFBSUEsRUFBRSxHQUFHZ3dCLEVBQUUsSUFBSWh3QixFQUFFLElBQUlnd0IsRUFBRWh3QixFQUFFLElBQUksSUFBSSxHQUFHZ3dCLEVBQUVyb0IsS0FBSzNILEVBQUUsSUFBSWd3QixFQUFFeFAsY0FBZXJlLEtBQUswZSx5QkFBeUJtUCxFQUFFcm9CLE1BQU14RixLQUFLaWMsbUJBQW1CNFIsRUFBRS9nQixZQUFZOU0sS0FBSytaLGFBQWEvWixLQUFLMmUsa0JBQWtCM2UsS0FBS2dCLEtBQUtwRSxFQUFFb2hCLGdCQUFnQixTQUFTaGUsS0FBSytaLFlBQVkvWixLQUFLMmUsbUJBQW1CM2UsS0FBS2dCLEtBQUtwRSxFQUFFZ2lCLHVCQUF1QjVlLEtBQUsyZSxtQkFBa0IsR0FBSTNlLEtBQUtrZSxhQUFZLE1BQU8sQ0FBQyxJQUFJbGUsS0FBS2ljLG1CQUFtQjRSLEVBQUUvZ0IsVUFBVSxZQUFZOU0sS0FBS2dCLEtBQUtwRSxFQUFFcWUsWUFBWWpiLEtBQUtvSCxJQUFJLElBQUk5RixxQ0FBcUN1c0IsRUFBRS9nQixhQUFZLEdBQUk5TSxLQUFLa2UsY0FBYzJQLEVBQUV0Z0IsUUFBUSxDQUFDakUsS0FBS2pNLE9BQU8rTixPQUFPLEdBQUdwTCxLQUFLbVAsT0FBTzVILFdBQVcrQixPQUFPdEosS0FBS2tlLGFBQVksR0FBSWxlLEtBQUttUCxPQUFPNUgsV0FBV1IsUUFBUTdGLEtBQUsyc0IsU0FBUzd0QixLQUFLZ0IsS0FBS3BFLEVBQUVxZSxZQUFZamIsS0FBS29ILElBQUksSUFBSTlGLHlCQUF5QjNFLE1BQUssR0FBSWt4QixFQUFFcm9CLEtBQUt4RixLQUFLc2EsYUFBYWxXLE1BQU15cEIsRUFBRS9nQixTQUFTLEdBQUc5TSxLQUFLaWMsbUJBQW1CNFIsRUFBRS9nQixXQUFXOU0sS0FBS2dCLEtBQUtwRSxFQUFFcWUsWUFBWWpiLEtBQUtvSCxJQUFJLElBQUk5RixxQ0FBcUN1c0IsRUFBRS9nQixhQUFZLEdBQUk5TSxLQUFLbVAsT0FBTzVILFdBQVdSLFFBQVE3RixLQUFLMnNCLEdBQUc3dEIsS0FBS2dCLEtBQUtwRSxFQUFFOGQsdUJBQXVCbVQsRUFBRXZTLFFBQVEseUJBQXlCdVMsR0FBRyxJQUFJaHdCLEVBQUVtQyxLQUFLbVAsT0FBTzVILFdBQVcsSUFBSTFKLEVBQUUsT0FBTyxJQUFJbEIsRUFBRSxFQUFFa0IsRUFBRXlMLE9BQU96TCxFQUFFeUwsS0FBSyxJQUFJN0wsRUFBRXlkLGdCQUFnQixJQUFJeGMsRUFBRWIsRUFBRXlMLEtBQUs1SyxFQUFFbWdCLHFCQUFxQmdQLEVBQUUsR0FBR252QixFQUFFb2dCLHFCQUFxQitPLEVBQUUsR0FBR252QixFQUFFcWdCLHFCQUFxQjhPLEVBQUUsR0FBR252QixFQUFFc2dCLG1CQUFtQjZPLEVBQUUsR0FBRyxHQUFHbnZCLEVBQUV1Z0IsY0FBYyxHQUFHLEVBQUU0TyxFQUFFLElBQUksSUFBSXp2QixFQUFFLEdBQUd5dkIsRUFBRSxHQUFHbHhCLEVBQUUsRUFBRSxJQUFJUyxFQUFFLEdBQUcsSUFBSSxJQUFJUyxFQUFFLEVBQUVBLEVBQUVPLEVBQUVQLElBQUksQ0FBQyxJQUFJQSxFQUFFLElBQUlnd0IsRUFBRWx4QixHQUFHa3hCLEVBQUVseEIsRUFBRSxHQUFHQSxHQUFHLEVBQUUsSUFBSWMsRUFBRSxJQUFJaUksV0FBVzdILEdBQUcsSUFBSSxJQUFJYSxFQUFFLEVBQUVBLEVBQUViLEVBQUVhLElBQUlqQixFQUFFaUIsR0FBR212QixFQUFFbHhCLEVBQUUrQixHQUFHLElBQUlOLEVBQUUsUUFBUSxJQUFJLElBQUl5dkIsRUFBRSxFQUFFQSxFQUFFLEVBQUVBLElBQUksQ0FBQyxJQUFJaHdCLEVBQUVKLEVBQUVvd0IsR0FBR3ZPLFNBQVMsSUFBSXpoQixFQUFFc0QsT0FBTyxJQUFJdEQsRUFBRSxJQUFJQSxHQUFHTyxHQUFHUCxFQUFFYSxFQUFFaUosTUFBTXZKLEVBQUV6QixHQUFHa0IsRUFBRW1DLEtBQUttUCxPQUFPNUgsV0FBVytCLEtBQUs2SSxJQUFJMVUsRUFBRUwsRUFBRW9SLEVBQUUvRyxVQUFVMkssU0FBUzNVLEdBQUcsSUFBSVIsRUFBRTR3QixFQUFFbHhCLEdBQUdBLElBQUksSUFBSSxJQUFJa0IsRUFBRSxFQUFFQSxFQUFFWixFQUFFWSxJQUFJLENBQUMsSUFBSUEsRUFBRSxJQUFJZ3dCLEVBQUVseEIsR0FBR2t4QixFQUFFbHhCLEVBQUUsR0FBR0EsR0FBRyxFQUFFLElBQUkrQixFQUFFLElBQUlnSCxXQUFXN0gsR0FBRyxJQUFJLElBQUlKLEVBQUUsRUFBRUEsRUFBRUksRUFBRUosSUFBSWlCLEVBQUVqQixHQUFHb3dCLEVBQUVseEIsRUFBRWMsR0FBR2QsR0FBR2tCLEVBQUVtQyxLQUFLbVAsT0FBTzVILFdBQVcrQixLQUFLK0ksSUFBSTNULEVBQUVyQixPQUFPK04sT0FBTzFNLEVBQUU4UCxFQUFFL0csVUFBVStYLFlBQVlwaUIsSUFBSSxNQUFNUixFQUFFb0QsS0FBS2lQLFNBQVM4TSxVQUFVMVYsTUFBTXpKLEVBQUUrSyxNQUFNakosRUFBRWlKLE1BQU0vSyxFQUFFMlosUUFBUTdYLEVBQUU2WCxRQUFRM1osRUFBRTRaLE1BQU05WCxFQUFFOFgsTUFBTTVaLEVBQUU4WixhQUFhaFksRUFBRWdZLGFBQWE5WixFQUFFeU4sVUFBVTNMLEVBQUUyTCxVQUFVek4sRUFBRStaLFNBQVNqWSxFQUFFaVksU0FBUy9aLEVBQUU2WSxNQUFNN1ksRUFBRTZZLFFBQVEvVyxFQUFFMlgsYUFBYXpaLEVBQUU2WSxNQUFNL1csRUFBRTJYLGFBQWF6WixFQUFFOFksT0FBTzlZLEVBQUU4WSxTQUFTaFgsRUFBRTRYLGNBQWMxWixFQUFFNlksTUFBTS9XLEVBQUU0WCxjQUFjNVgsRUFBRXdOLFNBQVNsTSxLQUFLaVAsU0FBUzhNLFVBQVU3UCxTQUFTeE4sRUFBRW9ZLFVBQVVwWSxFQUFFZ2hCLEtBQUssSUFBSWhhLFdBQVdtb0IsRUFBRTFzQixRQUFRekMsRUFBRWdoQixLQUFLN2MsSUFBSWdyQixHQUFHaHdCLEVBQUV5TCxLQUFLNUssRUFBRSx1QkFBdUJtdkIsR0FBRyxNQUFNLENBQUMsS0FBSyxNQUFNLEtBQUssS0FBSyxNQUFNLEtBQUssS0FBSyxNQUFNLEtBQUssS0FBSyxNQUFNLElBQUksTUFBTUEsR0FBRyw4QkFBOEJBLEdBQUcsTUFBTSxDQUFDLEtBQUssTUFBTSxNQUFNLE1BQU0sT0FBTyxHQUFHQSxLQUFLLEdBQUcsb0JBQW9CQSxHQUFHLE1BQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRUEsR0FBRyxtQkFBbUJBLEdBQUcsSUFBSWh3QixFQUFFbUMsS0FBS3NhLGFBQWFwVSxNQUFNLEVBQUUsR0FBRyxPQUFPbEcsS0FBS3NhLGFBQWFsVyxNQUFNLEdBQUd2RyxJQUFJZ3dCLEVBQUUsR0FBRyxtQkFBbUIsTUFBTUEsRUFBRTd0QixLQUFLaVAsU0FBU0MsWUFBWSxpQkFBaUIsR0FBRzJlLEVBQUUsT0FBT0EsRUFBRTd0QixLQUFLZ0IsS0FBS3BFLEVBQUVxZSxZQUFZLElBQUkzWixNQUFNLHdCQUF3QixhQUFhLE9BQU90QixLQUFLaVAsU0FBU0MsWUFBWSxVQUFVLGFBQWEsT0FBT2xQLEtBQUtpUCxTQUFTQyxZQUFZLFdBQVdyUixFQUFFZ0gsUUFBUXdhLEdBQUcsU0FBU3dPLEVBQUVod0IsRUFBRWxCLEdBQWdCVSxPQUFPQyxlQUFlTyxFQUFFLGFBQWEsQ0FBQ0QsT0FBTSxJQUFLLElBQUljLEVBQVM4UCxHQUFHOVAsRUFBUi9CLEVBQUUsS0FBWStCLEVBQUVYLFdBQVdXLEVBQUUsQ0FBQ21HLFFBQVFuRyxHQUFHLE1BQU1OLEVBQUUsbUJBQW1CeXZCLEdBQUcsR0FBR0EsRUFBRTFzQixPQUFPMHNCLEVBQUUzcEIsU0FBUyxFQUFFLE1BQU0sR0FBRyxJQUFJckcsRUFBRWd3QixFQUFFNWMsU0FBU3RVLEVBQUVreEIsRUFBRTNwQixTQUFTLE9BQU8sSUFBSXJHLEVBQUVxVCxTQUFTdlUsSUFBSSxJQUFJa0IsRUFBRXNULFNBQVN4VSxJQUFJLElBQUlrQixFQUFFdVQsUUFBUXpVLEVBQUUsR0FBR3lCLEVBQUVpVCxjQUFjd2MsR0FBR3p2QixFQUFFa1QsWUFBWXVjLEdBQUcscUJBQXFCQSxHQUFHLElBQUlod0IsRUFBRSxHQUFHbEIsRUFBRXlCLEVBQUVvVCx3QkFBd0JxYyxHQUFHbnZCLEVBQUUvQixFQUFFOFUsSUFBSWhVLEVBQUVpQixFQUFFLEtBQUtBLEVBQUVtdkIsRUFBRTFzQixPQUFPLEdBQUcsQ0FBQyxJQUFJcU4sRUFBRXFmLEVBQUV6ZCxPQUFPeEssTUFBTWxILEVBQUVBLEVBQUUvQixFQUFFaVYsY0FBY2pWLEVBQUU4VSxNQUFNb2MsRUFBRTNwQixVQUFVMnBCLEVBQUVoYyxLQUFLbFYsRUFBRWlWLGNBQWNuVSxHQUFHZCxFQUFFeUIsRUFBRW9ULHdCQUF3QnFjLElBQUlwYyxJQUFJLElBQUlyVSxFQUFFLENBQUN1VSxPQUFPbkQsRUFBRXVELEtBQUssSUFBSXJNLFdBQVdtb0IsRUFBRXpkLE9BQU94SyxNQUFNbEgsRUFBRThQLEVBQUUvSSxXQUFXaEksS0FBS1csRUFBRTRULFdBQVc1VSxHQUFHUyxFQUFFcUQsS0FBSzlELEdBQUd5d0IsRUFBRWhjLEtBQUtwVSxFQUFFb3dCLEVBQUUzcEIsVUFBVXhGLEVBQUVqQixFQUFFLE9BQU9JLEVBQUUsbUJBQW1CZ3dCLEdBQUcsSUFBSWh3QixFQUFFLEdBQUcsS0FBS2d3QixFQUFFM3BCLFNBQVMycEIsRUFBRTFzQixPQUFPLEdBQUcsQ0FBQyxJQUFJeEUsRUFBRWt4QixFQUFFNWMsU0FBU0MsV0FBVyxLQUFLMmMsRUFBRTFzQixPQUFPMHNCLEVBQUUzcEIsVUFBVXZILEdBQUcsTUFBTSxDQUFDLElBQUkrQixFQUFFbXZCLEVBQUV6ZCxPQUFPeEssTUFBTWlvQixFQUFFM3BCLFNBQVMycEIsRUFBRTNwQixTQUFTLEdBQUcycEIsRUFBRWhjLEtBQUssR0FBRyxJQUFJcFUsRUFBRW93QixFQUFFemQsT0FBT3hLLE1BQU1pb0IsRUFBRTNwQixTQUFTMnBCLEVBQUUzcEIsU0FBU3ZILEdBQUdreEIsRUFBRWhjLEtBQUtsVixHQUFHLElBQUk2UixFQUFFLENBQUNtRCxPQUFPalQsRUFBRXFULEtBQUt0VSxHQUFHVyxFQUFFNFQsV0FBV3hELEdBQUczUSxFQUFFcUQsS0FBS3NOLElBQUksT0FBTzNRLEVBQUUsa0JBQWtCZ3dCLEdBQUcsT0FBTyxHQUFHQSxFQUFFOWIsS0FBSyxJQUFJLEtBQUssRUFBRThiLEVBQUU1YixLQUFJLEVBQUcsTUFBTSxLQUFLLEVBQUU0YixFQUFFM2IsS0FBSSxFQUFHLE1BQU0sS0FBSyxFQUFFLE1BQU0sS0FBSyxFQUFFMmIsRUFBRTFiLElBQUkzRCxFQUFFM0osUUFBUXVOLFNBQVN5YixFQUFFOWIsTUFBTSxNQUFNLEtBQUssRUFBRThiLEVBQUV4YixLQUFJLEdBQUksK0JBQStCd2IsR0FBRyxJQUFJaHdCLEVBQUVnd0IsRUFBRTNwQixTQUFTdkgsRUFBRSxFQUFFLEtBQUssSUFBSUEsR0FBRyxJQUFJQSxHQUFHa0IsRUFBRWd3QixFQUFFMXNCLE9BQU8sR0FBRyxJQUFJMHNCLEVBQUU1YyxTQUFTRSxTQUFTdFQsR0FBRyxJQUFJZ3dCLEVBQUU1YyxTQUFTRSxTQUFTdFQsRUFBRSxHQUFHbEIsRUFBRSxFQUFFLElBQUlreEIsRUFBRTVjLFNBQVNHLFFBQVF2VCxFQUFFLEdBQUdsQixFQUFFLEVBQUVrQixJQUFJQSxJQUFJLE9BQU9BLElBQUlnd0IsRUFBRTFzQixPQUFPLElBQUksSUFBSTBzQixFQUFFNWMsU0FBU0UsU0FBU3RULEdBQUcsSUFBSWd3QixFQUFFNWMsU0FBU0UsU0FBU3RULEVBQUUsS0FBS2xCLEVBQUUsSUFBSWtCLElBQUksSUFBSWd3QixFQUFFNWMsU0FBU0UsU0FBU3RULElBQUksSUFBSWd3QixFQUFFNWMsU0FBU0csUUFBUXZULEdBQUdsQixFQUFFLEVBQUVrQixFQUFFZ3dCLEVBQUUxc0IsU0FBUyxDQUFDc1EsSUFBSTVULEVBQUUrVCxhQUFhalYsR0FBRyxlQUFla3hCLEVBQUVod0IsR0FBRyxJQUFJbEIsRUFBRSxJQUFJK0ksV0FBV21vQixFQUFFcG9CLFdBQVc1SCxFQUFFNEgsV0FBVyxJQUFJOUksRUFBRSxHQUFHLEVBQUVBLEVBQUUsR0FBR2t4QixFQUFFLEdBQUdseEIsRUFBRSxHQUFHa3hCLEVBQUUsR0FBR2x4QixFQUFFLEdBQUdreEIsRUFBRSxHQUFHbHhCLEVBQUUsR0FBRyxJQUFJQSxFQUFFLEdBQUcsSUFBSSxJQUFJK0IsRUFBRSxFQUFFLE9BQU8vQixFQUFFa0csSUFBSSxJQUFJNkMsV0FBVyxDQUFDbW9CLEVBQUVwb0IsYUFBYSxFQUFFLElBQUksSUFBSW9vQixFQUFFcG9CLGFBQWEvRyxHQUFHQSxHQUFHLEVBQUUvQixFQUFFa0csSUFBSWdyQixFQUFFbnZCLEdBQUcvQixFQUFFK0IsR0FBR212QixFQUFFcG9CLFlBQVksRUFBRS9HLElBQUkvQixFQUFFa0csSUFBSSxJQUFJNkMsV0FBVyxDQUFDN0gsRUFBRTRILGFBQWEsRUFBRSxJQUFJLElBQUk1SCxFQUFFNEgsYUFBYS9HLEdBQUdBLEdBQUcsRUFBRS9CLEVBQUVrRyxJQUFJaEYsRUFBRWEsR0FBRy9CLEdBQUdrQixFQUFFZ0gsUUFBUXpHLEdBQUcsU0FBU3l2QixFQUFFaHdCLEVBQUVsQixHQUFnQlUsT0FBT0MsZUFBZU8sRUFBRSxhQUFhLENBQUNELE9BQU0sSUFBS0MsRUFBRWdILFFBQVEsTUFBTU8sWUFBWXlvQixHQUFHN3RCLEtBQUtvSCxJQUFJLFNBQVNwSCxLQUFLdVAsUUFBUXNlLEVBQUU3dEIsS0FBS3dQLGFBQWEsRUFBRXhQLEtBQUt5UCxZQUFZb2UsRUFBRXBvQixXQUFXekYsS0FBSzBQLFdBQVcsRUFBRW1lLEVBQUVwb0IsV0FBV3pGLEtBQUsyUCxhQUFhLEVBQUUzUCxLQUFLNFAscUJBQXFCLEVBQUUsVUFBVTVQLEtBQUt1UCxRQUFRLEtBQUssbUJBQW1CLElBQUlzZSxFQUFFN3RCLEtBQUt5UCxZQUFZelAsS0FBS3dQLGFBQWEzUixFQUFFb04sS0FBSytFLElBQUksRUFBRTZkLEdBQUdseEIsRUFBRSxJQUFJK0ksV0FBVyxHQUFHL0ksRUFBRWtHLElBQUk3QyxLQUFLdVAsUUFBUVcsU0FBU2xRLEtBQUt3UCxhQUFheFAsS0FBS3dQLGFBQWEzUixJQUFJbUMsS0FBSzJQLGFBQWEsSUFBSVEsU0FBU3hULEVBQUV5VCxRQUFRQyxVQUFVLEdBQUdyUSxLQUFLd1AsY0FBYzNSLEVBQUVtQyxLQUFLNFAscUJBQXFCLEVBQUUvUixFQUFFLFNBQVNnd0IsR0FBRyxJQUFJaHdCLEVBQUVvTixLQUFLK0UsSUFBSWhRLEtBQUs0UCxxQkFBcUJpZSxHQUFHbHhCLEVBQUVxRCxLQUFLMlAsZUFBZSxHQUFHOVIsRUFBRSxHQUFHZ3dCLEVBQUUsR0FBRyxNQUFNLElBQUl2c0IsTUFBTSwyQ0FBMkMsT0FBT3RCLEtBQUs0UCxzQkFBc0IvUixFQUFFbUMsS0FBSzRQLHFCQUFxQixFQUFFNVAsS0FBSzJQLGVBQWU5UixFQUFFbUMsS0FBS3lQLFlBQVl6UCxLQUFLd1AsYUFBYSxHQUFHeFAsS0FBSzZQLG9CQUFvQmhTLEVBQUVnd0IsRUFBRWh3QixHQUFHLEdBQUdtQyxLQUFLNFAscUJBQXFCalQsR0FBR2tCLEVBQUVtQyxLQUFLc1EsU0FBU3pTLEdBQUdsQixFQUFFLFdBQVcsT0FBTyxJQUFJcUQsS0FBS3NRLFNBQVMsR0FBRyxXQUFXLE9BQU90USxLQUFLc1EsU0FBUyxHQUFHLG1CQUFtQixJQUFJdWQsRUFBRSxJQUFJQSxFQUFFLEVBQUVBLEVBQUU3dEIsS0FBSzRQLHFCQUFxQmllLElBQUksR0FBRyxJQUFJN3RCLEtBQUsyUCxhQUFhLGFBQWFrZSxHQUFHLE9BQU83dEIsS0FBSzJQLGVBQWVrZSxFQUFFN3RCLEtBQUs0UCxzQkFBc0JpZSxFQUFFQSxFQUFFLE9BQU83dEIsS0FBSzZQLG1CQUFtQmdlLEVBQUU3dEIsS0FBSzJRLG1CQUFtQixVQUFVLElBQUlrZCxFQUFFN3RCLEtBQUsyUSxtQkFBbUIsT0FBTzNRLEtBQUtzUSxTQUFTdWQsRUFBRSxHQUFHLEVBQUUsVUFBVSxJQUFJQSxFQUFFN3RCLEtBQUs2USxVQUFVLE9BQU8sRUFBRWdkLEVBQUVBLEVBQUUsSUFBSSxHQUFHLEdBQUdBLElBQUksTUFBTSxTQUFTQSxFQUFFaHdCLEVBQUVsQixHQUFnQlUsT0FBT0MsZUFBZU8sRUFBRSxhQUFhLENBQUNELE9BQU0sSUFBSyxJQUFJYyxFQUFFakIsRUFBRWQsRUFBRSxHQUFXeUIsR0FBR00sRUFBVC9CLEVBQUUsTUFBYStCLEVBQUVYLFdBQVdXLEVBQUUsQ0FBQ21HLFFBQVFuRyxHQUFHLE1BQU1tSixhQUFhekssRUFBRTBLLGFBQWE3SyxHQUFHUSxFQUFFc0ssT0FBTyxNQUFNbkwsRUFBRXdJLGNBQWNwRixLQUFLZ0ksYUFBYSxFQUFFaEksS0FBS2lJLGFBQWEsRUFBRWpJLEtBQUtrSSxvQkFBb0IsRUFBRWxJLEtBQUttSSxvQkFBb0IsRUFBRW5JLEtBQUtvSSxrQkFBYSxFQUFPcEksS0FBS3FJLGtCQUFhLEVBQU9ySSxLQUFLc0kscUJBQXFCLEVBQUV0SSxLQUFLdUkscUJBQXFCLEVBQUV2SSxLQUFLd0ksa0JBQWtCLEtBQUt4SSxLQUFLeUksa0JBQWtCLEtBQUt6SSxLQUFLMEksbUJBQW1CLEdBQUcxSSxLQUFLMkksbUJBQW1CLEdBQUczSSxLQUFLNEksZUFBZSxFQUFFNUksS0FBSzZJLGVBQWUsRUFBRSxPQUFPN0ksS0FBSzhJLE9BQU8xTCxFQUFFMkwsWUFBWS9JLEtBQUtnSixNQUFNN0ssS0FBSzZCLE9BQU8sUUFBUUEsS0FBS2dJLGFBQWEsS0FBS2hJLEtBQUtpSSxhQUFhLEtBQUtqSSxLQUFLa0ksb0JBQW9CLEVBQUVsSSxLQUFLbUksb0JBQW9CLEVBQUVuSSxLQUFLb0ksa0JBQWEsRUFBT3BJLEtBQUtxSSxrQkFBYSxFQUFPckksS0FBSzBJLG1CQUFtQixHQUFHMUksS0FBSzJJLG1CQUFtQixHQUFHLFFBQVEsTUFBTU0sb0JBQW9CNGtCLEVBQUUza0Isb0JBQW9CckwsR0FBR21DLEtBQUttSixpQkFBaUJuSixLQUFLb0oscUJBQXFCcEosS0FBS3lJLG1CQUFtQnpJLEtBQUtxSixxQkFBcUJySixLQUFLdUgsV0FBVytCLEtBQUt0SixLQUFLdUgsV0FBV1IsU0FBUy9HLEtBQUt3SSxtQkFBbUJ4SSxLQUFLcUoscUJBQXFCckosS0FBS3NILFdBQVdnQyxLQUFLdEosS0FBS3NILFdBQVdQLFNBQVMsTUFBTXdDLFFBQVE1TSxFQUFFOE0sV0FBVy9LLEdBQUc5QixFQUFFK00sbUJBQW1CM0osS0FBS3VILFdBQVdSLFNBQVNwSyxJQUFJa3hCLEVBQUU3dEIsS0FBSzRKLHFCQUFxQmxMLEdBQUdzQixLQUFLNkosV0FBV2hNLEdBQUcsTUFBTTBMLFFBQVE5TCxFQUFFZ00sV0FBVytFLEdBQUc1UixFQUFFK00sbUJBQW1CM0osS0FBS3NILFdBQVdQLFNBQVN0SixFQUFFdUMsS0FBS2dLLHFCQUFxQndFLEdBQUd4TyxLQUFLaUssV0FBVzRqQixHQUFHLFdBQVdBLEVBQUVod0IsR0FBRyxJQUFJa0osUUFBUXBLLEVBQUUyTSxLQUFLNUssR0FBR3NCLEtBQUt1SCxXQUFXLEdBQUc3SSxFQUFFMkwsWUFBVyxJQUFLM0wsRUFBRTJMLFVBQVVDLE1BQU0sT0FBTyxJQUFJM04sSUFBSUEsRUFBRXdFLFNBQVNuQixLQUFLeUksa0JBQWtCLE9BQU8sTUFBTWhMLEVBQUVkLEVBQUUsR0FBRzZSLEVBQUU3UixFQUFFd0UsT0FBT25CLEtBQUs0SSxlQUFlLEdBQUdoTSxFQUFFNk4sY0FBYzlOLEVBQUVxRCxLQUFLNEksZ0JBQWdCbkwsRUFBRWlOLE1BQU0xSyxLQUFLeUksa0JBQWtCaUMsTUFBTTdNLEdBQUdqQixFQUFFK04sZUFBZTNLLEtBQUtpSSxhQUFheEssTUFBTUksSUFBSW1DLEtBQUtpSSxhQUFhcEssR0FBR21DLEtBQUs0SSxlQUFlNUksS0FBS2lJLGFBQWF4SyxFQUFFaU4sSUFBSTlOLEVBQUU2TixjQUFjOU4sRUFBRXFELEtBQUs0SSxpQkFBaUIsTUFBTXhLLEVBQUVYLEVBQUVpTixJQUFJLEdBQUdtakIsR0FBRzd0QixLQUFLd0ksa0JBQWtCLENBQUMsTUFBTXFsQixFQUFFN3RCLEtBQUt5SSxrQkFBa0JpQyxJQUFJN00sRUFBRWd3QixFQUFFN3RCLEtBQUt3SSxrQkFBa0JrQyxJQUFJLEdBQUc3TSxFQUFFLEVBQUVhLEVBQUVxTSxrQkFBa0IsQ0FBQyxNQUFNeUQsRUFBRXZELEtBQUtDLE1BQU1yTixFQUFFYSxFQUFFcU0sbUJBQW1CLElBQUksSUFBSWxOLEVBQUUsRUFBRUEsRUFBRTJRLEVBQUUzUSxJQUFJLENBQUMsTUFBTTJRLEVBQUVuUixPQUFPK04sT0FBTyxHQUFHM04sR0FBRytRLEVBQUU5RCxJQUFJbWpCLEdBQUdod0IsRUFBRSxHQUFHYSxFQUFFcU0sa0JBQWtCeUQsRUFBRW5ELElBQUltRCxFQUFFOUQsSUFBSThELEVBQUVsRCxJQUFJM08sRUFBRXNFLFFBQVF1TixHQUFHeE8sS0FBSzJJLG1CQUFtQnpILEtBQUssQ0FBQ3dKLElBQUk4RCxFQUFFOUQsSUFBSWEsS0FBS2lELEVBQUVoSixLQUFLQyxlQUFlLElBQUlySSxFQUFFLEdBQUc0QyxLQUFLaUksYUFBYSxDQUFDN0ssRUFBRWdCLEVBQUU0QixLQUFLaUksYUFBYSxNQUFNNGxCLEVBQUU1aUIsS0FBS1EsSUFBSXJPLEdBQUcsR0FBR0EsRUFBRSxFQUFFc0IsRUFBRXFNLGtCQUFrQixDQUFDLE1BQU04aUIsRUFBRTVpQixLQUFLQyxNQUFNOU4sRUFBRXNCLEVBQUVxTSxtQkFBbUIsSUFBSSxJQUFJbE4sRUFBRSxFQUFFQSxFQUFFZ3dCLEVBQUVod0IsSUFBSSxDQUFDLE1BQU1nd0IsRUFBRXh3QixPQUFPK04sT0FBTyxHQUFHek8sRUFBRSxJQUFJYyxFQUFFVyxHQUFHUCxFQUFFLEdBQUdhLEVBQUVxTSxrQkFBa0I4aUIsRUFBRW5qQixJQUFJak4sRUFBRXVDLEtBQUtpSSxhQUFheEssRUFBRXVDLEtBQUtpSSxhQUFhNGxCLEVBQUV4aUIsSUFBSXdpQixFQUFFbmpCLElBQUltakIsRUFBRXZpQixJQUFJdEwsS0FBS3VILFdBQVdSLFFBQVE5RixRQUFRNHNCLEdBQUc3dEIsS0FBSzJJLG1CQUFtQnpILEtBQUssQ0FBQ3dKLElBQUltakIsRUFBRW5qQixJQUFJYSxLQUFLc2lCLEVBQUVyb0IsS0FBS0MsbUJBQW1Cb29CLEdBQUdudkIsRUFBRXFNLG1CQUFtQjhpQixFQUFFLEdBQUdseEIsRUFBRSxHQUFHK04sSUFBSTFLLEtBQUtpSSxhQUFhdEwsRUFBRSxHQUFHa1AsVUFBVWxQLEVBQUUsR0FBRytOLElBQUkvTixFQUFFLEdBQUcyTyxTQUFJLElBQVMzTyxFQUFFLEdBQUcyTyxJQUFJM08sRUFBRSxHQUFHMk8sSUFBSTNPLEVBQUUsR0FBRzBPLElBQUkxTyxFQUFFLEdBQUcrTixJQUFJL04sRUFBRSxHQUFHME8sSUFBSTFPLEVBQUUsR0FBRytOLElBQUkvTixFQUFFLEdBQUcyTyxLQUFLbE8sRUFBRSxHQUFHUixFQUFFNk4sY0FBYzlOLEdBQUcsRUFBRVMsR0FBRyxNQUFNSCxFQUFFTixFQUFFQSxFQUFFd0UsT0FBTyxHQUFHdUosSUFBSTJVLEVBQUUxaUIsRUFBRXdFLFFBQVEsRUFBRWxFLEVBQUVOLEVBQUVBLEVBQUV3RSxPQUFPLEdBQUd1SixJQUFJaE0sRUFBRXFNLGtCQUFrQi9LLEtBQUttSSxvQkFBb0JxRyxFQUFFeE8sS0FBS2lJLGFBQWFoTCxFQUFFb2lCLEVBQUVyZixLQUFLb0ksYUFBYW5MLEVBQUUsSUFBSSxJQUFJNHdCLEVBQUUsRUFBRWh3QixFQUFFbEIsRUFBRXdFLE9BQU8wc0IsRUFBRWh3QixFQUFFZ3dCLElBQUksQ0FBQyxNQUFNaHdCLEVBQUVsQixFQUFFa3hCLEdBQUdwd0IsRUFBRWQsRUFBRWt4QixFQUFFLEdBQUcsSUFBSXB3QixFQUFFLE1BQU0sTUFBTStRLEVBQUUvUSxFQUFFaU4sSUFBSTdNLEVBQUU2TSxJQUFJLEdBQUc4RCxFQUFFLEVBQUU5UCxFQUFFcU0sa0JBQWtCLENBQUMsSUFBSTNNLEVBQUU2TSxLQUFLQyxNQUFNc0QsRUFBRTlQLEVBQUVxTSxtQkFBbUIzTixFQUFFLEVBQUUsS0FBS0EsRUFBRWdCLEdBQUcsQ0FBQyxNQUFNb1EsRUFBRW5SLE9BQU8rTixPQUFPLEdBQUczTixHQUFHK1EsRUFBRTlELElBQUk3TSxFQUFFNk0sS0FBS3ROLEVBQUUsR0FBR3NCLEVBQUVxTSxrQkFBa0J5RCxFQUFFbkQsSUFBSW1ELEVBQUU5RCxJQUFJOEQsRUFBRWxELElBQUlrRCxFQUFFL1EsRUFBRWlOLE1BQU0vTixFQUFFMFAsT0FBT3doQixFQUFFLEVBQUVyZixHQUFHeE8sS0FBSzJJLG1CQUFtQnpILEtBQUssQ0FBQ3dKLElBQUk4RCxFQUFFOUQsSUFBSWEsS0FBS2lELEVBQUVoSixLQUFLQyxjQUFjckksSUFBSXl3QixNQUFNN3RCLEtBQUt1SCxXQUFXUixRQUFRcEssRUFBRSxXQUFXa3hCLEVBQUVod0IsR0FBRyxJQUFJa0osUUFBUXBLLEVBQUUyTSxLQUFLNUssR0FBR3NCLEtBQUtzSCxXQUFXLElBQUkzSyxJQUFJQSxFQUFFd0UsT0FBTyxPQUFPLE1BQU0xRCxFQUFFZCxFQUFFd0UsT0FBT3FOLEVBQUVwUSxFQUFFeUcsUUFBUTRILGVBQWUvTixFQUFFaUosTUFBTWpKLEVBQUVrSixjQUFjeEssRUFBRTRDLEtBQUt3SSxrQkFBa0J2TCxFQUFFTixFQUFFLEdBQUcsR0FBR3FELEtBQUs2SSxlQUFlLEdBQUdqTSxFQUFFNk4sY0FBYzlOLEVBQUVxRCxLQUFLNkksZ0JBQWdCNUwsRUFBRXlOLE1BQU0xSyxLQUFLd0ksa0JBQWtCa0MsTUFBTTdNLEdBQUdqQixFQUFFK04sZUFBZTNLLEtBQUtnSSxhQUFhL0ssTUFBTVksSUFBSW1DLEtBQUtnSSxhQUFhbkssR0FBR21DLEtBQUs2SSxlQUFlN0ksS0FBS2dJLGFBQWEvSyxFQUFFeU4sSUFBSTlOLEVBQUU2TixjQUFjOU4sRUFBRXFELEtBQUs2SSxpQkFBaUI3SSxLQUFLeUksbUJBQW1Cb2xCLEVBQUUsQ0FBQyxNQUFNQSxFQUFFN3RCLEtBQUt5SSxrQkFBa0I0QyxJQUFJckwsS0FBS3lJLGtCQUFrQjRDLElBQUlyTCxLQUFLeUksa0JBQWtCaUMsSUFBSTFLLEtBQUt5SSxrQkFBa0I2QyxJQUFJLEdBQUdsTyxFQUFFc04sSUFBSW1qQixFQUFFbnZCLEVBQUVxTSxrQkFBa0IsQ0FBQyxNQUFNbE4sRUFBRW9OLEtBQUtDLE9BQU85TixFQUFFc04sSUFBSW1qQixHQUFHbnZCLEVBQUVxTSxtQkFBbUIsSUFBSSxJQUFJOGlCLEVBQUUsRUFBRUEsRUFBRWh3QixFQUFFZ3dCLElBQUksQ0FBQyxNQUFNaHdCLEVBQUUsQ0FBQzJILEtBQUtnSixFQUFFMUIsU0FBUzBCLEVBQUUvSSxXQUFXaUYsSUFBSXROLEVBQUVzTixLQUFLbWpCLEVBQUUsR0FBR252QixFQUFFcU0sa0JBQWtCZ0MsU0FBUyxHQUFHcFEsRUFBRXNFLFFBQVFwRCxHQUFHbUMsS0FBSzBJLG1CQUFtQnhILEtBQUssQ0FBQ3dKLElBQUk3TSxFQUFFNk0sSUFBSWEsS0FBSzFOLEVBQUUySCxLQUFLQyxlQUFlLElBQUk0WixFQUFFLE1BQU0rbUIsRUFBRXpwQyxFQUFFLEdBQUcrTixJQUFJLEdBQUcxSyxLQUFLZ0ksYUFBYSxDQUFDcVgsRUFBRSttQixFQUFFcG1DLEtBQUtnSSxhQUFhLE1BQU02bEIsRUFBRTVpQixLQUFLUSxJQUFJNFQsR0FBRyxHQUFHd08sRUFBRW52QixFQUFFcU0sbUJBQW1CLElBQUl0TixHQUFHLElBQUl1QyxLQUFLa0ksc0JBQXNCeEosRUFBRXNPLDRCQUF1QixHQUFRcVMsRUFBRSxFQUFFM2dCLEVBQUVxTSxrQkFBa0IsR0FBRyxJQUFJdE4sR0FBRyxJQUFJdUMsS0FBS2tJLG9CQUFvQnhKLEVBQUVzTyw0QkFBdUIsSUFBU3RPLEVBQUVzTyx1QkFBdUJ0TyxFQUFFc08sdUJBQXVCcVMsRUFBRTNnQixFQUFFcU0sa0JBQWtCc1UsTUFBTSxDQUFDLE1BQU13TyxFQUFFNWlCLEtBQUtDLE1BQU1tVSxFQUFFM2dCLEVBQUVxTSxtQkFBbUIsSUFBSSxJQUFJbE4sRUFBRSxFQUFFQSxFQUFFZ3dCLEVBQUVod0IsSUFBSSxDQUFDLE1BQU1nd0IsRUFBRXVZLEdBQUd2b0MsRUFBRSxHQUFHYSxFQUFFcU0sa0JBQWtCdE4sRUFBRUosT0FBTytOLE9BQU8sR0FBR3pPLEVBQUUsR0FBRyxDQUFDK04sSUFBSW1qQixFQUFFN3RCLEtBQUtnSSxhQUFhNmxCLEVBQUU3dEIsS0FBS2dJLGVBQWVoSSxLQUFLMEksbUJBQW1CeEgsS0FBSyxDQUFDd0osSUFBSWpOLEVBQUVpTixJQUFJYSxLQUFLOU4sRUFBRStILEtBQUtDLGFBQWF6RixLQUFLc0gsV0FBV1AsUUFBUTlGLFFBQVF4RCxTQUFTb3dCLEdBQUdudkIsRUFBRXFNLG1CQUFtQjhpQixFQUFFLEdBQUdseEIsRUFBRSxHQUFHK04sSUFBSTFLLEtBQUtnSSxhQUFhckwsRUFBRSxHQUFHME8sSUFBSXJMLEtBQUtnSSxjQUFjcVgsRUFBRSxHQUFHemlCLEVBQUU2TixjQUFjOU4sR0FBRyxFQUFFMGlCLEdBQUcsTUFBTXJpQixFQUFFTCxFQUFFQSxFQUFFd0UsT0FBTyxHQUFHdUosSUFBSXc2QixFQUFFdm9DLEVBQUV3RSxRQUFRLEVBQUVuRSxFQUFFTCxFQUFFQSxFQUFFd0UsT0FBTyxHQUFHdUosSUFBSWhNLEVBQUVxTSxrQkFBa0IvSyxLQUFLa0ksb0JBQW9CekssRUFBRXVDLEtBQUtnSSxhQUFhdEosRUFBRXNPLHVCQUF1QmhRLEVBQUUwQixFQUFFc08sdUJBQXVCaFEsRUFBRWtvQyxFQUFFbGxDLEtBQUtxSSxhQUFhckwsRUFBRSxJQUFJLElBQUk2d0IsRUFBRSxFQUFFaHdCLEVBQUVsQixFQUFFd0UsT0FBTzBzQixFQUFFaHdCLEVBQUVnd0IsSUFBSSxDQUFDLE1BQU1od0IsRUFBRWxCLEVBQUVreEIsR0FBR252QixFQUFFL0IsRUFBRWt4QixFQUFFLEdBQUcsSUFBSW52QixFQUFFLE1BQU0sTUFBTWpCLEVBQUVpQixFQUFFZ00sSUFBSTdNLEVBQUU2TSxJQUFJL04sRUFBRWt4QixHQUFHM2hCLFNBQVN6TyxFQUFFdUMsS0FBS3NILFdBQVdQLFFBQVFuSyxFQUFFc1EsaUJBQWlCdlEsR0FBRyxxQkFBcUJreEIsR0FBRyxNQUFNOW1CLFFBQVFsSixFQUFFeUwsS0FBSzNNLEdBQUdxRCxLQUFLdUgsV0FBVzdJLEVBQUUsSUFBSW12QixFQUFFN3RCLEtBQUtxTixxQkFBcUJ4UCxFQUFFLElBQUlBLEVBQUVnd0IsRUFBRSxHQUFHbmpCLElBQUlqTixFQUFFSSxFQUFFZ3dCLEdBQUduakIsSUFBSSxHQUFHTyxLQUFLUSxJQUFJL00sRUFBRWpCLElBQUksRUFBRWQsRUFBRW9PLGtCQUFrQixPQUFPbE4sRUFBRWd3QixHQUFHdGdCLFFBQVExUCxFQUFFZ3dCLEdBQUd0Z0IsUUFBUUMsWUFBVyxFQUFHM1AsRUFBRWd3QixHQUFHdGdCLFFBQVEsQ0FBQ0MsWUFBVyxHQUFJeE4sS0FBSzZKLFlBQVcsR0FBSSxNQUFNMkUsRUFBRTNRLEVBQUUrSCxNQUFNLEVBQUVpb0IsR0FBR3p2QixFQUFFUCxFQUFFK0gsTUFBTWlvQixHQUFHendCLEVBQUVTLEVBQUUsR0FBR1osRUFBRW1CLEVBQUUsR0FBR3NNLElBQUl0TixFQUFFc04sSUFBSTlOLEVBQUVRLEVBQUVtUSxTQUFTblEsRUFBRW1RLFFBQVFwSCxNQUFNbEosRUFBRUcsRUFBRW1RLFFBQVFwSCxNQUFNLEtBQUtuRyxLQUFLdUgsV0FBV1IsUUFBUWxKLEVBQUUrSCxNQUFNLEVBQUVpb0IsR0FBRzd0QixLQUFLNkosWUFBVyxHQUFJN0osS0FBS3VILFdBQVdSLFFBQVFsSixFQUFFK0gsTUFBTWlvQixHQUFHN3RCLEtBQUs2SixZQUFXLEVBQUdqTixHQUFHb0QsS0FBS3VILFdBQVdSLFFBQVF5SCxFQUFFOU8sT0FBT3RCLEdBQUcscUJBQXFCeXZCLEdBQUcsTUFBTTltQixRQUFRbEosRUFBRXlMLEtBQUszTSxHQUFHcUQsS0FBS3NILFdBQVc1SSxFQUFFLElBQUltdkIsRUFBRTd0QixLQUFLcU4scUJBQXFCeFAsRUFBRSxJQUFJQSxFQUFFZ3dCLEVBQUUsR0FBR25qQixJQUFJak4sRUFBRUksRUFBRWd3QixHQUFHbmpCLElBQUksR0FBR08sS0FBS1EsSUFBSS9NLEVBQUVqQixJQUFJLEVBQUVkLEVBQUVvTyxrQkFBa0IsT0FBT2xOLEVBQUVnd0IsR0FBR3RnQixRQUFRMVAsRUFBRWd3QixHQUFHdGdCLFFBQVFDLFlBQVcsRUFBRzNQLEVBQUVnd0IsR0FBR3RnQixRQUFRLENBQUNDLFlBQVcsR0FBSXhOLEtBQUtpSyxZQUFXLEdBQUksTUFBTXVFLEVBQUUzUSxFQUFFK0gsTUFBTSxFQUFFaW9CLEdBQUd6dkIsRUFBRVAsRUFBRStILE1BQU1pb0IsR0FBR3p3QixFQUFFUyxFQUFFLEdBQUdaLEVBQUVtQixFQUFFLEdBQUdzTSxJQUFJdE4sRUFBRXNOLElBQUk5TixFQUFFUSxFQUFFbVEsU0FBU25RLEVBQUVtUSxRQUFRcEgsTUFBTWxKLEVBQUVHLEVBQUVtUSxRQUFRcEgsTUFBTSxLQUFLbkcsS0FBS3NILFdBQVdQLFFBQVF5SCxFQUFFeE8sS0FBS2lLLFlBQVcsR0FBSWpLLEtBQUtzSCxXQUFXUCxRQUFRM0ksRUFBRTRCLEtBQUtpSyxZQUFXLEVBQUdyTixHQUFHb0QsS0FBS3NILFdBQVdQLFFBQVF5SCxFQUFFOU8sT0FBT3RCLEdBQUcsaUJBQWlCLElBQUkySSxRQUFROG1CLEdBQUc3dEIsS0FBS3VILFlBQVlSLFFBQVFsSixHQUFHbUMsS0FBS3NILFdBQVczSyxHQUFFLEVBQUcrQixHQUFFLEVBQUcsT0FBT3NCLEtBQUt5SSxtQkFBbUJvbEIsRUFBRTFzQixTQUFTbkIsS0FBS3lJLGtCQUFrQjdMLEVBQUVnUixxQkFBcUJpZ0IsR0FBR2x4QixHQUFFLElBQUtxRCxLQUFLd0ksbUJBQW1CM0ssRUFBRXNELFNBQVNuQixLQUFLd0ksa0JBQWtCNUwsRUFBRWlSLHFCQUFxQmhRLEdBQUdhLEdBQUUsR0FBSSxDQUFDd0ssb0JBQW9Cdk0sRUFBRXNNLG9CQUFvQnZLLEdBQUcscUJBQXFCbXZCLEVBQUVod0IsR0FBRyxNQUFNbEIsRUFBRSxVQUFVa3hCLEVBQUVydEIsS0FBSzlCLEVBQUUvQixFQUFFcUQsS0FBS3VJLHFCQUFxQnZJLEtBQUtzSSxxQkFBcUI3SyxFQUFFZCxFQUFFcUQsS0FBS3lJLGtCQUFrQmlDLElBQUkxSyxLQUFLd0ksa0JBQWtCa0MsSUFBSThELEVBQUU3UixFQUFFcUQsS0FBSzJJLG1CQUFtQnhILE9BQU9uQixLQUFLMEksbUJBQW1CdkgsT0FBTyxJQUFJMHNCLEVBQUU5aUIsbUJBQW1COGlCLEVBQUU5aUIsbUJBQW1CLEdBQUduTCxPQUFPQyxNQUFNZ3VCLEVBQUU5aUIsb0JBQW9CLEdBQUdsTixFQUFFc0QsUUFBUSxFQUFFLENBQUMsTUFBTXhFLEVBQUVrQixFQUFFQSxFQUFFc0QsT0FBTyxHQUFHdUosSUFBSW1qQixFQUFFOWlCLGtCQUFrQkUsS0FBS0MsT0FBT3ZPLEVBQUVjLElBQUlpQixFQUFFOFAsRUFBRSxVQUFVLEdBQUdxZixFQUFFOWlCLG1CQUFtQmxOLEVBQUVzRCxRQUFRLEVBQUUsQ0FBQyxNQUFNeEUsR0FBR2tCLEVBQUVBLEVBQUVzRCxPQUFPLEdBQUd1SixJQUFJN00sRUFBRSxHQUFHNk0sTUFBTTdNLEVBQUVzRCxPQUFPLEdBQUcwc0IsRUFBRTlpQixrQkFBa0JFLEtBQUtDLE1BQU1ELEtBQUtRLElBQUlvaUIsRUFBRTlpQixrQkFBa0JwTyxJQUFJLEVBQUVreEIsRUFBRTlpQixrQkFBa0JwTyxJQUFJLHFCQUFxQixNQUFNMkssV0FBV3VtQixFQUFFdG1CLFdBQVcxSixHQUFHbUMsS0FBS0EsS0FBS3NJLHNCQUFzQnVsQixFQUFFOW1CLFFBQVE1RixPQUFPbkIsS0FBS3VJLHNCQUFzQjFLLEVBQUVrSixRQUFRNUYsT0FBTyx1QkFBdUIsTUFBTXNILGtCQUFrQm9sQixFQUFFcmxCLGtCQUFrQjNLLEdBQUdtQyxLQUFLQSxLQUFLc0gsV0FBV1AsUUFBUS9HLEtBQUtzSCxXQUFXUCxRQUFRb0gsT0FBTzBmLEdBQUdBLEVBQUVuakIsS0FBSzdNLEVBQUU2TSxXQUFNLElBQVMxSyxLQUFLcUksY0FBY3dsQixFQUFFbmpCLElBQUkxSyxLQUFLcUksZUFBZXJJLEtBQUt1SCxXQUFXUixRQUFRL0csS0FBS3VILFdBQVdSLFFBQVFvSCxPQUFPdFEsR0FBR0EsRUFBRTZNLEtBQUttakIsRUFBRW5qQixXQUFNLElBQVMxSyxLQUFLb0ksY0FBY3ZLLEVBQUU2TSxJQUFJMUssS0FBS29JLGVBQWUscUJBQXFCeWxCLEdBQUcsT0FBT0EsRUFBRXRnQixTQUFTc2dCLEVBQUV0Z0IsUUFBUXBILE1BQU0wbkIsRUFBRXRnQixRQUFRcEgsTUFBTW5HLEtBQUtxTyxRQUFRLElBQUksd0JBQXdCd2YsR0FBRyxPQUFPLElBQUlBLEVBQUUxc0IsT0FBTzBzQixFQUFFQSxFQUFFdGYsS0FBSyxDQUFDc2YsRUFBRWh3QixJQUFJZ3dCLEVBQUVuakIsSUFBSTdNLEVBQUU2TSxLQUFLLDRCQUE0Qm1qQixHQUFHLE9BQU9BLEdBQUcsSUFBSUEsRUFBRTFzQixPQUFPdkUsRUFBRXNRLGlCQUFpQjJnQixHQUFHLEdBQUcsS0FBSyw0QkFBNEJBLEdBQUcsSUFBSUEsRUFBRTFzQixPQUFPLE9BQU8sS0FBSyxNQUFNdEQsRUFBRWd3QixFQUFFdGYsS0FBSyxDQUFDc2YsRUFBRWh3QixJQUFJZ3dCLEVBQUVuakIsSUFBSTdNLEVBQUU2TSxLQUFLLElBQUksSUFBSW1qQixFQUFFLEVBQUVseEIsRUFBRWtCLEVBQUVzRCxPQUFPMHNCLEVBQUVseEIsRUFBRWt4QixJQUFJLEdBQUdod0IsRUFBRWd3QixHQUFHbGYsV0FBVyxPQUFPOVEsRUFBRWd3QixHQUFHLHNCQUFzQkEsRUFBRWh3QixHQUFHLEdBQUcsT0FBT2d3QixFQUFFLE9BQU8sTUFBTWx4QixFQUFFa0IsRUFBRTZNLEtBQUssRUFBRWhNLEVBQUVtdkIsRUFBRWx4QixHQUFHLEtBQUtBLEVBQUVreEIsR0FBRyxJQUFJcHdCLEVBQUVJLEVBQUUwUCxTQUFTMVAsRUFBRTBQLFFBQVF3QixZQUFZLE9BQU9yUSxHQUFHakIsRUFBRSxxQkFBcUJvd0IsRUFBRWh3QixHQUFHNkQsUUFBUXNOLElBQUksaUJBQWlCLElBQUksSUFBSXJTLEVBQUUsRUFBRStCLEVBQUVtdkIsRUFBRTFzQixPQUFPeEUsRUFBRStCLEVBQUUvQixJQUFJLENBQUMsTUFBTStCLEVBQUVtdkIsRUFBRWx4QixHQUFHK0IsRUFBRWdNLEtBQUs3TSxFQUFFYSxFQUFFMk0sTUFBTTNNLEVBQUUyTSxLQUFLeE4sSUFBSSwwQkFBMEJnd0IsR0FBRyxJQUFJaHdCLEdBQUUsRUFBR2xCLEdBQUcsRUFBRSxJQUFJLElBQUkrQixFQUFFLEVBQUVqQixFQUFFb3dCLEVBQUUxc0IsT0FBT3pDLEVBQUVqQixFQUFFaUIsSUFBSSxHQUFHbXZCLEVBQUVudkIsR0FBRzZPLFNBQVNzZ0IsRUFBRW52QixHQUFHNk8sUUFBUWpFLEtBQUssQ0FBQ3pMLEdBQUUsRUFBR2xCLEVBQUUrQixFQUFFLE1BQU0sTUFBTSxDQUFDNkssUUFBUTFMLEVBQUU0TCxXQUFXOU0sR0FBRyxhQUFhLE9BQU9xRCxLQUFLaVAsU0FBU0MsWUFBWSxVQUFVLGlCQUFpQixPQUFPbFAsS0FBS21QLE9BQU9uUCxLQUFLbVAsT0FBTzdILFdBQVcsS0FBSyxpQkFBaUIsT0FBT3RILEtBQUttUCxPQUFPblAsS0FBS21QLE9BQU81SCxXQUFXLEtBQUssY0FBYyxNQUFNc21CLEVBQUU3dEIsS0FBS2lQLFNBQVNDLFlBQVksZUFBZSxPQUFPMmUsRUFBRUEsRUFBRXhlLFNBQVMsR0FBR3hSLEVBQUVnSCxRQUFRakksR0FBRyxTQUFTaXhCLEVBQUVod0IsRUFBRWxCLEdBQWdCVSxPQUFPQyxlQUFlTyxFQUFFLGFBQWEsQ0FBQ0QsT0FBTSxJQUFLQyxFQUFFZ0gsUUFBUSxNQUFNLHNCQUFzQmdwQixFQUFFaHdCLEdBQUcsR0FBRyxjQUFjZ3dCLEVBQUUsQ0FBQyxHQUFHLElBQUlod0IsRUFBRSxPQUFPLElBQUk2SCxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLE1BQU0sR0FBRyxJQUFJN0gsRUFBRSxPQUFPLElBQUk2SCxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sR0FBRyxJQUFJN0gsRUFBRSxPQUFPLElBQUk2SCxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxHQUFHLElBQUk3SCxFQUFFLE9BQU8sSUFBSTZILFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLEdBQUcsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLEVBQUUsS0FBSyxHQUFHLElBQUk3SCxFQUFFLE9BQU8sSUFBSTZILFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLEdBQUcsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLEVBQUUsS0FBSyxHQUFHLElBQUk3SCxFQUFFLE9BQU8sSUFBSTZILFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLEdBQUcsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxHQUFHLElBQUk3SCxFQUFFLE9BQU8sSUFBSTZILFdBQVcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxJQUFJN0gsRUFBRSxPQUFPLElBQUk2SCxXQUFXLENBQUMsRUFBRSxHQUFH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LEVBQU9ELFFBQVVtQyxPQUFlIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwieGdwbGF5ZXJcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wieGdwbGF5ZXJcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wieGdwbGF5ZXItZmx2XCJdID0gZmFjdG9yeShyZXF1aXJlKFwieGdwbGF5ZXJcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInhncGxheWVyLWZsdlwiXSA9IGZhY3Rvcnkocm9vdFtcInhncGxheWVyXCJdKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV94Z3BsYXllcl9fKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XG4gICAgfVxuICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gIH1cbn0pO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB9IGVsc2UgaWYgKHByZXBlbmQpIHtcbiAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIG0gPSAkZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIC8vIE5vIGVycm9yIGNvZGUgZm9yIHRoaXMgc2luY2UgaXQgaXMgYSBXYXJuaW5nXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyBTdHJpbmcodHlwZSkgKyAnIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0Jyk7XG4gICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgUmVmbGVjdEFwcGx5KHRoaXMubGlzdGVuZXIsIHRoaXMudGFyZ2V0LCBhcmdzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID9cbiAgICB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0T3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgVHJhY2s6IHJlcXVpcmUoJy4vc3JjL3RyYWNrJykuZGVmYXVsdCxcbiAgVHJhY2tzOiByZXF1aXJlKCcuL3NyYy90cmFjaycpLlRyYWNrcyxcbiAgQXVkaW9UcmFjazogcmVxdWlyZSgnLi9zcmMvdHJhY2snKS5BdWRpb1RyYWNrLFxuICBWaWRlb1RyYWNrOiByZXF1aXJlKCcuL3NyYy90cmFjaycpLlZpZGVvVHJhY2ssXG5cbiAgWGdCdWZmZXI6IHJlcXVpcmUoJy4vc3JjL2J1ZmZlcicpLlhnQnVmZmVyLFxuICBSZW11eEJ1ZmZlcjogcmVxdWlyZSgnLi9zcmMvYnVmZmVyJykuUmVtdXhCdWZmZXIsXG5cbiAgUHJlU291cmNlOiByZXF1aXJlKCcuL3NyYy9wcmVzb3VjZScpLmRlZmF1bHRcbn07XG4iLCJleHBvcnQgY2xhc3MgWGdCdWZmZXIge1xuICAvKipcbiAgICogQSBidWZmZXIgdG8gc3RvcmUgbG9hZGVkIGRhdGEuXG4gICAqXG4gICAqIEBjbGFzcyBMb2FkZXJCdWZmZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIE9wdGlvbmFsIHRoZSBidWZmZXIgc2l6ZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGxlbmd0aCkge1xuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoIHx8IDBcbiAgICB0aGlzLmhpc3RvcnlMZW4gPSBsZW5ndGggfHwgMFxuICAgIHRoaXMuYXJyYXkgPSBbXVxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiB0byBwdXNoIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRhIC0gVGhlIGRhdGEgdG8gcHVzaCBpbnRvIHRoZSBidWZmZXJcbiAgICovXG4gIHB1c2ggKGRhdGEpIHtcbiAgICB0aGlzLmFycmF5LnB1c2goZGF0YSlcbiAgICB0aGlzLmxlbmd0aCArPSBkYXRhLmJ5dGVMZW5ndGhcbiAgICB0aGlzLmhpc3RvcnlMZW4gKz0gZGF0YS5ieXRlTGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIHNoaWZ0IGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBUaGUgc2l6ZSBvZiBzaGlmdC5cbiAgICovXG4gIHNoaWZ0IChsZW5ndGgpIHtcbiAgICBpZiAodGhpcy5hcnJheS5sZW5ndGggPCAxKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMClcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zaGlmdEJ1ZmZlcigpXG4gICAgfVxuICAgIGlmICgodGhpcy5vZmZzZXQgKyBsZW5ndGgpID09PSB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgbGV0IHJldCA9IHRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKVxuICAgICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgICB0aGlzLmFycmF5LnNoaWZ0KClcbiAgICAgIHRoaXMubGVuZ3RoIC09IGxlbmd0aFxuICAgICAgcmV0dXJuIHJldFxuICAgIH1cblxuICAgIGlmICgodGhpcy5vZmZzZXQgKyBsZW5ndGgpIDwgdGhpcy5hcnJheVswXS5sZW5ndGgpIHtcbiAgICAgIGxldCByZXQgPSB0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aClcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aFxuICAgICAgdGhpcy5sZW5ndGggLT0gbGVuZ3RoXG4gICAgICByZXR1cm4gcmV0XG4gICAgfVxuXG4gICAgbGV0IHJldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICBsZXQgdG1wb2ZmID0gMFxuICAgIHdoaWxlICh0aGlzLmFycmF5Lmxlbmd0aCA+IDAgJiYgbGVuZ3RoID4gMCkge1xuICAgICAgaWYgKCh0aGlzLm9mZnNldCArIGxlbmd0aCkgPCB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgICBsZXQgdG1wID0gdGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW5ndGgpXG4gICAgICAgIHJldC5zZXQodG1wLCB0bXBvZmYpXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aFxuICAgICAgICB0aGlzLmxlbmd0aCAtPSBsZW5ndGhcbiAgICAgICAgbGVuZ3RoID0gMFxuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHRlbXBsZW5ndGggPSB0aGlzLmFycmF5WzBdLmxlbmd0aCAtIHRoaXMub2Zmc2V0XG4gICAgICAgIHJldC5zZXQodGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5hcnJheVswXS5sZW5ndGgpLCB0bXBvZmYpXG4gICAgICAgIHRoaXMuYXJyYXkuc2hpZnQoKVxuICAgICAgICB0aGlzLm9mZnNldCA9IDBcbiAgICAgICAgdG1wb2ZmICs9IHRlbXBsZW5ndGhcbiAgICAgICAgdGhpcy5sZW5ndGggLT0gdGVtcGxlbmd0aFxuICAgICAgICBsZW5ndGggLT0gdGVtcGxlbmd0aFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gY2xlYXIgdGhlIGJ1ZmZlci5cbiAgICovXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLmFycmF5ID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuY2xlYXIoKVxuICAgIHRoaXMuaGlzdG9yeUxlbiA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBzaGlmdCBvbmUgdW5pdDhBcnJheS5cbiAgICovXG4gIF9zaGlmdEJ1ZmZlciAoKSB7XG4gICAgdGhpcy5sZW5ndGggLT0gdGhpcy5hcnJheVswXS5sZW5ndGhcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICByZXR1cm4gdGhpcy5hcnJheS5zaGlmdCgpXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCB1aW50OCBkYXRhIHRvIG51bWJlci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gdGhlIHN0YXJ0IHBvc3Rpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSB0aGUgbGVuZ3RoIG9mIGRhdGEuXG4gICAqL1xuICB0b0ludCAoc3RhcnQsIGxlbmd0aCkge1xuICAgIGxldCByZXRJbnQgPSAwXG4gICAgbGV0IGkgPSB0aGlzLm9mZnNldCArIHN0YXJ0XG4gICAgd2hpbGUgKGkgPCB0aGlzLm9mZnNldCArIGxlbmd0aCArIHN0YXJ0KSB7XG4gICAgICBpZiAoaSA8IHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSB7XG4gICAgICAgIHJldEludCA9IHJldEludCAqIDI1NiArIHRoaXMuYXJyYXlbMF1baV1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hcnJheVsxXSkge1xuICAgICAgICByZXRJbnQgPSByZXRJbnQgKiAyNTYgKyB0aGlzLmFycmF5WzFdW2kgLSB0aGlzLmFycmF5WzBdLmxlbmd0aF1cbiAgICAgIH1cblxuICAgICAgaSsrXG4gICAgfVxuICAgIHJldHVybiByZXRJbnRcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVtdXhCdWZmZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy52aWRlbyA9IFtdXG4gICAgdGhpcy5hdWRpbyA9IFtdXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLnZpZGVvID0gW11cbiAgICB0aGlzLmF1ZGlvID0gW11cbiAgfVxufVxuIiwiY2xhc3MgU291cmNlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMubWltZXR5cGUgPSAnJztcbiAgICB0aGlzLmluaXQgPSBudWxsO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICB9XG59XG5cbmNsYXNzIFByZVNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnNvdXJjZXMgPSB7fTtcbiAgfVxuXG4gIGdldFNvdXJjZSAoc291cmNlKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc1tzb3VyY2VdO1xuICB9XG5cbiAgY3JlYXRlU291cmNlIChuYW1lKSB7XG4gICAgdGhpcy5zb3VyY2VzW25hbWVdID0gbmV3IFNvdXJjZSgpO1xuICAgIHJldHVybiB0aGlzLnNvdXJjZXNbbmFtZV07XG4gIH1cblxuICBjbGVhciAoKSB7XG4gICAgdGhpcy5zb3VyY2VzID0ge307XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLnNvdXJjZXMgPSB7fTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcmVTb3VyY2U7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFjayB7XG4gIC8qKlxuICAgKiBUaGUgY29uc3RydWN0b3IuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5pZCA9IC0xXG4gICAgdGhpcy5zZXF1ZW5jZU51bWJlciA9IDBcbiAgICB0aGlzLnNhbXBsZXMgPSBbXVxuICAgIHRoaXMuZHJvcHBlZFNhbXBsZXMgPSBbXVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSB0cmFjay5cbiAgICovXG4gIHJlc2V0ICgpIHtcbiAgICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gMFxuICAgIHRoaXMuc2FtcGxlcyA9IFtdXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gIH1cbiAgLyoqXG4gICAqIGRlc3Ryb3kgdGhlIHRyYWNrLlxuICAgKi9cbiAgZGlzdHJveSAoKSB7XG4gICAgdGhpcy5yZXNldCgpXG4gICAgdGhpcy5pZCA9IC0xXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2sgZXh0ZW5kcyBUcmFjayB7XG4gIC8qKlxuICAgKiBUaGUgY29uc3RydWN0b3IgZm9yIGF1ZGlvIHRyYWNrLlxuICAgKi9cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLlRBRyA9ICdBdWRpb1RyYWNrJ1xuICAgIHRoaXMudHlwZSA9ICdhdWRpbydcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmlkZW9UcmFjayBleHRlbmRzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3RvciBmb3IgdmlkZW8gdHJhY2suXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuVEFHID0gJ1ZpZGVvVHJhY2snXG4gICAgdGhpcy50eXBlID0gJ3ZpZGVvJ1xuICAgIHRoaXMuZHJvcHBlZCA9IDBcbiAgfVxuICAvKipcbiAgICogcmVzZXQgdGhlIHZpZGVvIHRyYWNrLlxuICAgKi9cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMuc2VxdWVuY2VOdW1iZXIgPSAwXG4gICAgdGhpcy5zYW1wbGVzID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgICB0aGlzLmRyb3BwZWQgPSAwXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRyYWNrcyB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmF1ZGlvVHJhY2sgPSBudWxsXG4gICAgdGhpcy52aWRlb1RyYWNrID0gbnVsbFxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5hdWRpb1RyYWNrID0gbnVsbFxuICAgIHRoaXMudmlkZW9UcmFjayA9IG51bGxcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIE5hbHVuaXQ6IHJlcXVpcmUoJy4vc3JjL2gyNjQvbmFsdW5pdCcpLmRlZmF1bHQsXG4gIFNwc1BhcnNlcjogcmVxdWlyZSgnLi9zcmMvaDI2NC9uYWx1bml0L3NwcycpLmRlZmF1bHQsXG5cbiAgQ29tcGF0aWJpbGl0eTogcmVxdWlyZSgnLi9zcmMvY29tcGF0aWJpbGl0eScpLmRlZmF1bHRcbn07XG4iLCJcbmNsYXNzIEFBQyB7XG5cbiAgc3RhdGljIGdldFNpbGVudEZyYW1lKGNvZGVjLCBjaGFubmVsQ291bnQpIHtcbiAgICBpZiAoY29kZWMgPT09ICdtcDRhLjQwLjInKSB7XG4gICAgICAvLyBoYW5kbGUgTEMtQUFDXG4gICAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMywgMHg4MF0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDIxLCAweDAwLCAweDQ5LCAweDkwLCAweDAyLCAweDE5LCAweDAwLCAweDIzLCAweDgwXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMykge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4OGVdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA0KSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MCwgMHgyYywgMHg4MCwgMHgwOCwgMHgwMiwgMHgzOF0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgyLCAweDMwLCAweDA0LCAweDk5LCAweDAwLCAweDIxLCAweDkwLCAweDAyLCAweDM4XSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNikge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MDAsIDB4YjIsIDB4MDAsIDB4MjAsIDB4MDgsIDB4ZTBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaGFuZGxlIEhFLUFBQyAobXA0YS40MC41IC8gbXA0YS40MC4yOSlcbiAgICAgIGlmIChjaGFubmVsQ291bnQgPT09IDEpIHtcbiAgICAgICAgLy8gZmZtcGVnIC15IC1mIGxhdmZpIC1pIFwiYWV2YWxzcmM9MDpkPTAuMDVcIiAtYzphIGxpYmZka19hYWMgLXByb2ZpbGU6YSBhYWNfaGUgLWI6YSA0ayBvdXRwdXQuYWFjICYmIGhleGR1bXAgLXYgLWUgJzE2LzEgXCIweCV4LFwiIFwiXFxuXCInIC12IG91dHB1dC5hYWNcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDEsIDB4NDAsIDB4MjIsIDB4ODAsIDB4YTMsIDB4NGUsIDB4ZTYsIDB4ODAsIDB4YmEsIDB4OCwgMHgwLCAweDAsIDB4MCwgMHgxYywgMHg2LCAweGYxLCAweGMxLCAweGEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWVdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICAgIC8vIGZmbXBlZyAteSAtZiBsYXZmaSAtaSBcImFldmFsc3JjPTB8MDpkPTAuMDVcIiAtYzphIGxpYmZka19hYWMgLXByb2ZpbGU6YSBhYWNfaGVfdjIgLWI6YSA0ayBvdXRwdXQuYWFjICYmIGhleGR1bXAgLXYgLWUgJzE2LzEgXCIweCV4LFwiIFwiXFxuXCInIC12IG91dHB1dC5hYWNcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDEsIDB4NDAsIDB4MjIsIDB4ODAsIDB4YTMsIDB4NWUsIDB4ZTYsIDB4ODAsIDB4YmEsIDB4OCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDk1LCAweDAsIDB4NiwgMHhmMSwgMHhhMSwgMHhhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVlXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMykge1xuICAgICAgICAvLyBmZm1wZWcgLXkgLWYgbGF2ZmkgLWkgXCJhZXZhbHNyYz0wfDB8MDpkPTAuMDVcIiAtYzphIGxpYmZka19hYWMgLXByb2ZpbGU6YSBhYWNfaGVfdjIgLWI6YSA0ayBvdXRwdXQuYWFjICYmIGhleGR1bXAgLXYgLWUgJzE2LzEgXCIweCV4LFwiIFwiXFxuXCInIC12IG91dHB1dC5hYWNcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDEsIDB4NDAsIDB4MjIsIDB4ODAsIDB4YTMsIDB4NWUsIDB4ZTYsIDB4ODAsIDB4YmEsIDB4OCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDk1LCAweDAsIDB4NiwgMHhmMSwgMHhhMSwgMHhhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVlXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQUFDO1xuIiwiaW1wb3J0IHtFVkVOVFN9IGZyb20gJ3hncGxheWVyLXV0aWxzJ1xuaW1wb3J0IEFBQyBmcm9tICcuL2FhYy9hYWMtaGVscGVyJ1xuXG5jb25zdCB7UkVNVVhfRVZFTlRTLCBERU1VWF9FVkVOVFN9ID0gRVZFTlRTXG5cbmNsYXNzIENvbXBhdGliaWxpdHkge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5uZXh0QXVkaW9EdHMgPSAwIC8vIOaooeaLn+S4i+S4gOautemfs+mikeaVsOaNrueahGR0c1xuICAgIHRoaXMubmV4dFZpZGVvRHRzID0gMCAvLyDmqKHmi5/kuIvkuIDmrrXop4bpopHmlbDmja7nmoRkdHNcblxuICAgIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9IDAgLy8g5LiK5LiA5q616Z+z6aKR5pWw5o2u55qE6ZW/5bqmXG4gICAgdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuID0gMCAvLyDkuIrkuIDmrrXop4bpopHmlbDmja7nmoTplb/luqZcblxuICAgIHRoaXMubGFzdFZpZGVvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOautemfs+mikeaVsOaNrueahOmVv+W6plxuICAgIHRoaXMubGFzdEF1ZGlvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCA9IDAgLy8g6Z+z6aKR5oC75pWw5o2u6YePKOWOn+Wni+W4pylcbiAgICB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50ID0gMCAvLyDop4bpopHmgLvmlbDmja7ph48o5Y6f5aeL5binKVxuXG4gICAgdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSA9IG51bGxcbiAgICB0aGlzLl9maXJzdFZpZGVvU2FtcGxlID0gbnVsbFxuXG4gICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMgPSBbXSAvLyDooaXlhYXpn7PpopHluKfvvIjvvIlcbiAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcyA9IFtdIC8vIOihpeWFheinhumikeW4p++8iO+8iVxuXG4gICAgdGhpcy5fdmlkZW9MYXJnZUdhcCA9IDBcbiAgICB0aGlzLl9hdWRpb0xhcmdlR2FwID0gMFxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5iZWZvcmUoUkVNVVhfRVZFTlRTLlJFTVVYX01FRElBLCB0aGlzLmRvRml4LmJpbmQodGhpcykpXG4gIH1cblxuICByZXNldCAoKSB7XG4gICAgdGhpcy5uZXh0QXVkaW9EdHMgPSBudWxsIC8vIOS8sOeul+S4i+S4gOautemfs+mikeaVsOaNrueahGR0c1xuICAgIHRoaXMubmV4dFZpZGVvRHRzID0gbnVsbCAvLyDkvLDnrpfkuIvkuIDmrrXop4bpopHmlbDmja7nmoRkdHNcblxuICAgIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9IDAgLy8g5LiK5LiA5q616Z+z6aKR5pWw5o2u55qE6ZW/5bqmXG4gICAgdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuID0gMCAvLyDkuIrkuIDmrrXop4bpopHmlbDmja7nmoTplb/luqZcblxuICAgIHRoaXMubGFzdFZpZGVvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOautemfs+mikeaVsOaNrueahOmVv+W6plxuICAgIHRoaXMubGFzdEF1ZGlvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgLy8gdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCA9IDAgLy8g6Z+z6aKR5oC75pWw5o2u6YePKOWOn+Wni+W4pylcbiAgICAvLyB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50ID0gMCAvLyDop4bpopHmgLvmlbDmja7ph48o5Y6f5aeL5binKVxuXG4gICAgLy8gdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSA9IG51bGxcbiAgICAvLyB0aGlzLl9maXJzdFZpZGVvU2FtcGxlID0gbnVsbFxuXG4gICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMgPSBbXSAvLyDooaXlhYXpn7PpopHluKfvvIjvvIlcbiAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcyA9IFtdIC8vIOihpeWFheinhumikeW4p++8iO+8iVxuICB9XG5cbiAgZG9GaXggKCkge1xuICAgIGNvbnN0IHsgaXNGaXJzdEF1ZGlvU2FtcGxlcywgaXNGaXJzdFZpZGVvU2FtcGxlcyB9ID0gdGhpcy5nZXRGaXJzdFNhbXBsZSgpXG5cbiAgICB0aGlzLnJlY29yZFNhbXBsZXNDb3VudCgpXG5cbiAgICBpZiAodGhpcy5fZmlyc3RWaWRlb1NhbXBsZSkge1xuICAgICAgdGhpcy5maXhSZWZTYW1wbGVEdXJhdGlvbih0aGlzLnZpZGVvVHJhY2subWV0YSwgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMpXG4gICAgfVxuICAgIGlmICh0aGlzLl9maXJzdEF1ZGlvU2FtcGxlKSB7XG4gICAgICB0aGlzLmZpeFJlZlNhbXBsZUR1cmF0aW9uKHRoaXMuYXVkaW9UcmFjay5tZXRhLCB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcylcbiAgICB9XG5cbiAgICBjb25zdCB7IGNoYW5nZWQ6IHZpZGVvQ2hhbmdlZCwgY2hhbmdlZElkeDogdmlkZW9DaGFuZ2VkSWR4IH0gPSBDb21wYXRpYmlsaXR5LmRldGFjdENoYW5nZVN0cmVhbSh0aGlzLnZpZGVvVHJhY2suc2FtcGxlcylcbiAgICBpZiAodmlkZW9DaGFuZ2VkICYmICFpc0ZpcnN0QXVkaW9TYW1wbGVzKSB7XG4gICAgICB0aGlzLmZpeENoYW5nZVN0cmVhbVZpZGVvKHZpZGVvQ2hhbmdlZElkeClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb0ZpeFZpZGVvKGlzRmlyc3RWaWRlb1NhbXBsZXMpXG4gICAgfVxuXG4gICAgY29uc3QgeyBjaGFuZ2VkOiBhdWRpb0NoYW5nZWQsIGNoYW5nZWRJZHg6IGF1ZGlvQ2hhbmdlZElkeCB9ID0gQ29tcGF0aWJpbGl0eS5kZXRhY3RDaGFuZ2VTdHJlYW0odGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMpXG4gICAgaWYgKGF1ZGlvQ2hhbmdlZCkge1xuICAgICAgdGhpcy5maXhDaGFuZ2VTdHJlYW1BdWRpbyhhdWRpb0NoYW5nZWRJZHgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9GaXhBdWRpbyhpc0ZpcnN0QXVkaW9TYW1wbGVzKVxuICAgIH1cblxuICAgIC8vIHRoaXMucmVtb3ZlSW52YWxpZFNhbXBsZXMoKVxuICB9XG5cbiAgZG9GaXhWaWRlbyAoZmlyc3QsIHN0cmVhbUNoYW5nZVN0YXJ0KSB7XG4gICAgbGV0IHtzYW1wbGVzOiB2aWRlb1NhbXBsZXMsIG1ldGF9ID0gdGhpcy52aWRlb1RyYWNrXG5cbiAgICBpZiAobWV0YS5mcmFtZVJhdGUgJiYgbWV0YS5mcmFtZVJhdGUuZml4ZWQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF2aWRlb1NhbXBsZXMgfHwgIXZpZGVvU2FtcGxlcy5sZW5ndGggfHwgIXRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGNvbnNvbGUubG9nKGB2aWRlbyBsYXN0U2FtcGxlLCAke3ZpZGVvU2FtcGxlc1t2aWRlb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzfWApXG5cbiAgICBjb25zdCBmaXJzdFNhbXBsZSA9IHZpZGVvU2FtcGxlc1swXVxuXG4gICAgY29uc3Qgc2FtcGxlc0xlbiA9IHZpZGVvU2FtcGxlcy5sZW5ndGg7XG5cbiAgICAvLyBzdGVwMC7kv67lpI1obHPmtYHlh7rnjrDlt6jlpKdnYXDvvIzpnIDopoHlvLrliLbph43lrprkvY3nmoTpl67pophcbiAgICBpZiAodGhpcy5fdmlkZW9MYXJnZUdhcCA+IDApIHtcbiAgICAgIENvbXBhdGliaWxpdHkuZG9GaXhMYXJnZUdhcCh2aWRlb1NhbXBsZXMsIHRoaXMuX3ZpZGVvTGFyZ2VHYXApXG4gICAgfVxuXG4gICAgaWYgKGZpcnN0U2FtcGxlLmR0cyAhPT0gdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5kdHMgJiYgKHN0cmVhbUNoYW5nZVN0YXJ0IHx8IENvbXBhdGliaWxpdHkuZGV0ZWN0TGFyZ2VHYXAodGhpcy5uZXh0VmlkZW9EdHMsIGZpcnN0U2FtcGxlKSkpIHtcbiAgICAgIGlmIChzdHJlYW1DaGFuZ2VTdGFydCkge1xuICAgICAgICB0aGlzLm5leHRWaWRlb0R0cyA9IHN0cmVhbUNoYW5nZVN0YXJ0IC8vIEZJWDogSGxz5Lit6YCU5YiHY29kZWPvvIzlnKjlpoLmnpznm7TmjqVzZWVr5Yiw5ZCO6Z2i55qE54K55Lya5a+86Ie0bGFyZ2VHYXDorqHnrpflpLHotKVcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdmlkZW9MYXJnZUdhcCA9IHRoaXMubmV4dFZpZGVvRHRzIC0gZmlyc3RTYW1wbGUuZHRzXG4gICAgICBDb21wYXRpYmlsaXR5LmRvRml4TGFyZ2VHYXAodmlkZW9TYW1wbGVzLCB0aGlzLl92aWRlb0xhcmdlR2FwKVxuICAgIH1cblxuICAgIGNvbnN0IGZpcnN0RHRzID0gZmlyc3RTYW1wbGUuZHRzXG5cbiAgICAvLyBzdGVwMS4g5L+u5aSN5LiOYXVkaW/pppbluKflt67ot53lpKrlpKfnmoTpl67pophcbiAgICBpZiAoZmlyc3QgJiYgdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSkge1xuICAgICAgY29uc3QgdmlkZW9GaXJzdER0cyA9IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzXG4gICAgICBjb25zdCBhdWRpb0ZpcnN0RHRzID0gdGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHNcbiAgICAgIGNvbnN0IGdhcCA9IHZpZGVvRmlyc3REdHMgLSBhdWRpb0ZpcnN0RHRzXG4gICAgICBpZiAoZ2FwID4gKDIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgICBjb25zdCBmaWxsQ291bnQgPSBNYXRoLmZsb29yKGdhcCAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxsQ291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGNsb25lZEZpcnN0U2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgZmlyc3RTYW1wbGUpIC8vIOinhumikeWktOmDqOW4p+e8uuWksemcgOimgeWkjeWItuesrOS4gOW4p1xuICAgICAgICAgIC8vIOmHjeaWsOiuoeeul3NhbXBsZeeahGR0c+WSjHB0c1xuICAgICAgICAgIGNsb25lZEZpcnN0U2FtcGxlLmR0cyA9IHZpZGVvRmlyc3REdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgIGNsb25lZEZpcnN0U2FtcGxlLnB0cyA9IGNsb25lZEZpcnN0U2FtcGxlLmR0cyArIGNsb25lZEZpcnN0U2FtcGxlLmN0c1xuXG4gICAgICAgICAgdmlkZW9TYW1wbGVzLnVuc2hpZnQoY2xvbmVkRmlyc3RTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogY2xvbmVkRmlyc3RTYW1wbGUuZHRzLFxuICAgICAgICAgICAgc2l6ZTogY2xvbmVkRmlyc3RTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBnYXBcbiAgICAvLyBzdGVwMi4g5L+u5aSNc2FtcGxlc+auteS5i+mXtOeahOmXtOi3nemXrumimOOAgVxuICAgIGlmICh0aGlzLm5leHRWaWRlb0R0cykge1xuICAgICAgLy8gc3RlcDEuIOWkhOeQhnNhbXBsZXPmrrXkuYvpl7TnmoTkuKLluKfmg4XlhrVcbiAgICAgIC8vIOW9k+WPkeeOsGR1cmF0aW9u5beu6Led5aSn5LqOMuW4p+aXtui/m+ihjOihpeW4p1xuICAgICAgZ2FwID0gZmlyc3REdHMgLSB0aGlzLm5leHRWaWRlb0R0c1xuICAgICAgY29uc3QgYWJzR2FwID0gTWF0aC5hYnMoZ2FwKVxuICAgICAgaWYgKGdhcCA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgY29uc3QgZmlsbEZyYW1lQ291bnQgPSBNYXRoLmZsb29yKGdhcCAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxsRnJhbWVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgY2xvbmVkU2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgdmlkZW9TYW1wbGVzWzBdKVxuICAgICAgICAgIGNvbnN0IGNvbXB1dGVkID0gZmlyc3REdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgICAgICAgY2xvbmVkU2FtcGxlLmR0cyA9IGNvbXB1dGVkID4gdGhpcy5uZXh0VmlkZW9EdHMgPyBjb21wdXRlZCA6IHRoaXMubmV4dFZpZGVvRHRzIC8vIOihpeeahOesrOS4gOW4p+S4gOWumuimgeaYr25leHRWaWRlb0R0c1xuICAgICAgICAgIGNsb25lZFNhbXBsZS5wdHMgPSBjbG9uZWRTYW1wbGUuZHRzICsgY2xvbmVkU2FtcGxlLmN0c1xuXG4gICAgICAgICAgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMudW5zaGlmdChjbG9uZWRTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogY2xvbmVkU2FtcGxlLmR0cyxcbiAgICAgICAgICAgIHNpemU6IGNsb25lZFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFic0dhcCA8PSBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uICYmIGFic0dhcCA+IDApIHtcbiAgICAgICAgLy8g5b2T5beu6Led5ZyoKy3kuIDluKfkuYvpl7Tml7blsIbnrKzkuIDluKfnmoRkdHPlvLrooYzlrprkvY3liLDmnJ/mnJvkvY3nva5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ+mHjeWumuS9jeinhumikeW4p2R0cycsIHZpZGVvU2FtcGxlc1swXS5kdHMsIHRoaXMubmV4dFZpZGVvRHRzKVxuICAgICAgICB2aWRlb1NhbXBsZXNbMF0uZHRzID0gdGhpcy5uZXh0VmlkZW9EdHNcbiAgICAgICAgdmlkZW9TYW1wbGVzWzBdLm9yaWdpbkR0cyA9IHZpZGVvU2FtcGxlc1swXS5kdHNcbiAgICAgICAgdmlkZW9TYW1wbGVzWzBdLmN0cyA9IHZpZGVvU2FtcGxlc1swXS5jdHMgIT09IHVuZGVmaW5lZCA/IHZpZGVvU2FtcGxlc1swXS5jdHMgOiB2aWRlb1NhbXBsZXNbMF0ucHRzIC0gdmlkZW9TYW1wbGVzWzBdLmR0c1xuICAgICAgICB2aWRlb1NhbXBsZXNbMF0ucHRzID0gdmlkZW9TYW1wbGVzWzBdLmR0cyArIHZpZGVvU2FtcGxlc1swXS5jdHNcbiAgICAgIH0gZWxzZSBpZiAoZ2FwIDwgMCkge1xuICAgICAgICAvLyDlh7rnjrDlpKfnmoRnYXBcbiAgICAgICAgQ29tcGF0aWJpbGl0eS5kb0ZpeExhcmdlR2FwKHZpZGVvU2FtcGxlcywgKC0xICogZ2FwKSlcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGFzdER0cyA9IHZpZGVvU2FtcGxlc1t2aWRlb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzO1xuXG4gICAgY29uc3QgbGFzdFNhbXBsZUR1cmF0aW9uID0gdmlkZW9TYW1wbGVzLmxlbmd0aCA+PSAyID8gbGFzdER0cyAtIHZpZGVvU2FtcGxlc1t2aWRlb1NhbXBsZXMubGVuZ3RoIC0gMl0uZHRzIDogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuID0gc2FtcGxlc0xlblxuICAgIHRoaXMubmV4dFZpZGVvRHRzID0gbGFzdER0cyArIGxhc3RTYW1wbGVEdXJhdGlvblxuICAgIHRoaXMubGFzdFZpZGVvRHRzID0gbGFzdER0c1xuXG4gICAgLy8gc3RlcDIuIOS/ruWkjXNhbXBsZeauteS5i+WGheeahOmXtOi3nemXrumimFxuICAgIC8vIHN0ZXAzLiDkv67lpI1zYW1wbGVz5q615YaF6YOo55qEZHRz5byC5bi46Zeu6aKYXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZpZGVvU2FtcGxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudCA9IHZpZGVvU2FtcGxlc1tpXVxuICAgICAgY29uc3QgbmV4dCA9IHZpZGVvU2FtcGxlc1tpICsgMV1cblxuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IG5leHQuZHRzIC0gY3VycmVudC5kdHM7XG5cbiAgICAgIGlmIChkdXJhdGlvbiA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgLy8g5Lik5bin5LmL6Ze06Ze06ZqU5aSq5aSn77yM6ZyA6KaB6KGl56m655m95binXG4gICAgICAgIGxldCBmaWxsRnJhbWVDb3VudCA9IE1hdGguZmxvb3IoZHVyYXRpb24gLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgIGxldCBmaWxsRnJhbWVJZHggPSAwXG4gICAgICAgIHdoaWxlIChmaWxsRnJhbWVJZHggPCBmaWxsRnJhbWVDb3VudCkge1xuICAgICAgICAgIGNvbnN0IGZpbGxGcmFtZSA9IE9iamVjdC5hc3NpZ24oe30sIG5leHQpXG4gICAgICAgICAgZmlsbEZyYW1lLmR0cyA9IGN1cnJlbnQuZHRzICsgKGZpbGxGcmFtZUlkeCArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgIGZpbGxGcmFtZS5wdHMgPSBmaWxsRnJhbWUuZHRzICsgZmlsbEZyYW1lLmN0c1xuICAgICAgICAgIGlmIChmaWxsRnJhbWUgPCBuZXh0LmR0cykge1xuICAgICAgICAgICAgdmlkZW9TYW1wbGVzLnNwbGljZShpLCAwLCBmaWxsRnJhbWUpXG5cbiAgICAgICAgICAgIHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgICBkdHM6IGZpbGxGcmFtZS5kdHMsXG4gICAgICAgICAgICAgIHNpemU6IGZpbGxGcmFtZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmlsbEZyYW1lSWR4KytcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcyA9IHZpZGVvU2FtcGxlcztcbiAgfVxuXG4gIGRvRml4QXVkaW8gKGZpcnN0LCBzdHJlYW1DaGFuZ2VTdGFydCkge1xuICAgIGxldCB7c2FtcGxlczogYXVkaW9TYW1wbGVzLCBtZXRhfSA9IHRoaXMuYXVkaW9UcmFja1xuXG4gICAgaWYgKCFhdWRpb1NhbXBsZXMgfHwgIWF1ZGlvU2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZyhgYXVkaW8gbGFzdFNhbXBsZSwgJHthdWRpb1NhbXBsZXNbYXVkaW9TYW1wbGVzLmxlbmd0aCAtIDFdLmR0c31gKVxuXG4gICAgY29uc3Qgc2FtcGxlc0xlbiA9IGF1ZGlvU2FtcGxlcy5sZW5ndGg7XG4gICAgY29uc3Qgc2lsZW50RnJhbWUgPSBBQUMuZ2V0U2lsZW50RnJhbWUobWV0YS5jb2RlYywgbWV0YS5jaGFubmVsQ291bnQpXG5cbiAgICBjb25zdCBmaXJzdFNhbXBsZSA9IHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGVcblxuICAgIGNvbnN0IF9maXJzdFNhbXBsZSA9IGF1ZGlvU2FtcGxlc1swXVxuICAgIC8vIOWvuWF1ZGlvU2FtcGxlc+aMieeFp2R0c+WBmuaOkuW6j1xuICAgIC8vIGF1ZGlvU2FtcGxlcyA9IENvbXBhdGliaWxpdHkuc29ydEF1ZGlvU2FtcGxlcyhhdWRpb1NhbXBsZXMpXG4gICAgaWYgKHRoaXMuX2F1ZGlvTGFyZ2VHYXAgPiAwKSB7XG4gICAgICBDb21wYXRpYmlsaXR5LmRvRml4TGFyZ2VHYXAoYXVkaW9TYW1wbGVzLCB0aGlzLl9hdWRpb0xhcmdlR2FwKVxuICAgIH1cblxuICAgIGlmIChfZmlyc3RTYW1wbGUuZHRzICE9PSB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlLmR0cyAmJiAoc3RyZWFtQ2hhbmdlU3RhcnQgfHwgQ29tcGF0aWJpbGl0eS5kZXRlY3RMYXJnZUdhcCh0aGlzLm5leHRBdWRpb0R0cywgX2ZpcnN0U2FtcGxlKSkpIHtcbiAgICAgIGlmIChzdHJlYW1DaGFuZ2VTdGFydCkge1xuICAgICAgICB0aGlzLm5leHRBdWRpb0R0cyA9IHN0cmVhbUNoYW5nZVN0YXJ0IC8vIEZJWDogSGxz5Lit6YCU5YiHY29kZWPvvIzlnKjlpoLmnpznm7TmjqVzZWVr5Yiw5ZCO6Z2i55qE54K55Lya5a+86Ie0bGFyZ2VHYXDorqHnrpflpLHotKVcbiAgICAgIH1cbiAgICAgIHRoaXMuX2F1ZGlvTGFyZ2VHYXAgPSB0aGlzLm5leHRBdWRpb0R0cyAtIF9maXJzdFNhbXBsZS5kdHNcbiAgICAgIENvbXBhdGliaWxpdHkuZG9GaXhMYXJnZUdhcChhdWRpb1NhbXBsZXMsIHRoaXMuX2F1ZGlvTGFyZ2VHYXApXG4gICAgfVxuICAgIC8vIHN0ZXAwLiDpppbluKfkuI52aWRlb+mmluW4p+mXtOi3neWkp+eahOmXrumimFxuICAgIGlmICh0aGlzLl9maXJzdFZpZGVvU2FtcGxlICYmIGZpcnN0KSB7XG4gICAgICBjb25zdCB2aWRlb0ZpcnN0UHRzID0gdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5wdHMgPyB0aGlzLl9maXJzdFZpZGVvU2FtcGxlLnB0cyA6IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzICsgdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5jdHNcblxuICAgICAgaWYgKGZpcnN0U2FtcGxlLmR0cyAtIHZpZGVvRmlyc3RQdHMgPiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNpbGVudFNhbXBsZUNvdW50ID0gTWF0aC5mbG9vcigoZmlyc3RTYW1wbGUuZHRzIC0gdmlkZW9GaXJzdFB0cykgLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lsZW50U2FtcGxlQ291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHNpbGVudFNhbXBsZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IHNpbGVudEZyYW1lLFxuICAgICAgICAgICAgZGF0YXNpemU6IHNpbGVudEZyYW1lLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICBkdHM6IGZpcnN0U2FtcGxlLmR0cyAtIChpICsgMSkgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uLFxuICAgICAgICAgICAgZmlsdGVyZWQ6IDBcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdWRpb1NhbXBsZXMudW5zaGlmdChzaWxlbnRTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogc2lsZW50U2FtcGxlLmR0cyxcbiAgICAgICAgICAgIHNpemU6IHNpbGVudFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGdhcFxuICAgIGNvbnN0IGZpcnN0RHRzID0gYXVkaW9TYW1wbGVzWzBdLmR0c1xuXG4gICAgaWYgKHRoaXMubmV4dEF1ZGlvRHRzKSB7XG4gICAgICAvLyBzdGVwMS4g5aSE55CGc2FtcGxlc+auteS5i+mXtOeahOS4ouW4p+aDheWGtVxuICAgICAgLy8g5b2T5Y+R546wZHVyYXRpb27lt67ot53lpKfkuo4x5bin5pe26L+b6KGM6KGl5binXG4gICAgICBnYXAgPSBmaXJzdER0cyAtIHRoaXMubmV4dEF1ZGlvRHRzXG4gICAgICBjb25zdCBhYnNHYXAgPSBNYXRoLmFicyhnYXApXG5cbiAgICAgIGlmIChhYnNHYXAgPiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uICYmIHNhbXBsZXNMZW4gPT09IDEgJiYgdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuID09PSAxKSB7XG4gICAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICBpZiAoZ2FwID4gKDIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgICBpZiAoc2FtcGxlc0xlbiA9PT0gMSAmJiB0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4gPT09IDEpIHtcbiAgICAgICAgICAvLyDlpoLmnpxzYW1wbGXnmoRsZW5ndGjkuIDnm7TmmK8x77yM6ICM5LiU5LiA55u05LiN56ym5ZCIcmVmU2FtcGxlRHVyYXRpb27vvIzpnIDopoHliqjmgIHkv67mlLlyZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCA9IG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCAhPT0gdW5kZWZpbmVkID8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkICsgZ2FwIDogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiArIGdhcFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHNpbGVudEZyYW1lQ291bnQgPSBNYXRoLmZsb29yKGdhcCAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpbGVudEZyYW1lQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZWQgPSBmaXJzdER0cyAtIChpICsgMSkgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgICAgICBjb25zdCBzaWxlbnRTYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCBhdWRpb1NhbXBsZXNbMF0sIHtcbiAgICAgICAgICAgICAgZHRzOiBjb21wdXRlZCA+IHRoaXMubmV4dEF1ZGlvRHRzID8gY29tcHV0ZWQgOiB0aGlzLm5leHRBdWRpb0R0c1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgICAgIGR0czogc2lsZW50U2FtcGxlLmR0cyxcbiAgICAgICAgICAgICAgc2l6ZTogc2lsZW50U2FtcGxlLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzLnVuc2hpZnQoc2lsZW50U2FtcGxlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhYnNHYXAgPD0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiAmJiBhYnNHYXAgPiAwKSB7XG4gICAgICAgIC8vIOW9k+W3rui3neavlOi+g+Wwj+eahOaXtuWAmeWwhumfs+mikeW4p+mHjeWumuS9jVxuICAgICAgICAvLyBjb25zb2xlLmxvZygn6YeN5a6a5L2N6Z+z6aKR5binZHRzJywgYXVkaW9TYW1wbGVzWzBdLmR0cywgdGhpcy5uZXh0QXVkaW9EdHMpXG4gICAgICAgIGF1ZGlvU2FtcGxlc1swXS5kdHMgPSB0aGlzLm5leHRBdWRpb0R0c1xuICAgICAgICBhdWRpb1NhbXBsZXNbMF0ucHRzID0gdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgIH0gZWxzZSBpZiAoZ2FwIDwgMCkge1xuICAgICAgICBDb21wYXRpYmlsaXR5LmRvRml4TGFyZ2VHYXAoYXVkaW9TYW1wbGVzLCAoLTEgKiBnYXApKVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsYXN0RHRzID0gYXVkaW9TYW1wbGVzW2F1ZGlvU2FtcGxlcy5sZW5ndGggLSAxXS5kdHM7XG4gICAgY29uc3QgbGFzdFNhbXBsZUR1cmF0aW9uID0gYXVkaW9TYW1wbGVzLmxlbmd0aCA+PSAyID8gbGFzdER0cyAtIGF1ZGlvU2FtcGxlc1thdWRpb1NhbXBsZXMubGVuZ3RoIC0gMl0uZHRzIDogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuID0gc2FtcGxlc0xlbjtcbiAgICB0aGlzLm5leHRBdWRpb0R0cyA9IG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCA/IGxhc3REdHMgKyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgOiBsYXN0RHRzICsgbGFzdFNhbXBsZUR1cmF0aW9uXG4gICAgdGhpcy5sYXN0QXVkaW9EdHMgPSBsYXN0RHRzXG5cbiAgICAvLyBzdGVwMy4g5L+u5aSNc2FtcGxlc+auteWGhemDqOeahGR0c+W8guW4uOmXrumimFxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhdWRpb1NhbXBsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSBhdWRpb1NhbXBsZXNbaV1cbiAgICAgIGNvbnN0IG5leHQgPSBhdWRpb1NhbXBsZXNbaSArIDFdXG5cbiAgICAgIGlmICghbmV4dCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY29uc3QgZHVyYXRpb24gPSBuZXh0LmR0cyAtIGN1cnJlbnQuZHRzO1xuICAgICAgYXVkaW9TYW1wbGVzW2ldLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAvKlxuICAgICAgaWYgKGR1cmF0aW9uID4gKDIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgICAvLyDkuKTluKfkuYvpl7Tpl7TpmpTlpKrlpKfvvIzpnIDopoHooaXnqbrnmb3luKdcbiAgICAgICAgLyoqXG4gICAgICAgIGxldCBzaWxlbnRGcmFtZUNvdW50ID0gTWF0aC5mbG9vcihkdXJhdGlvbiAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG4gICAgICAgIGxldCBmcmFtZUlkeCA9IDBcblxuICAgICAgICB3aGlsZSAoZnJhbWVJZHggPCBzaWxlbnRGcmFtZUNvdW50KSB7XG4gICAgICAgICAgY29uc3Qgc2lsZW50U2FtcGxlID0ge1xuICAgICAgICAgICAgZGF0YTogc2lsZW50RnJhbWUsXG4gICAgICAgICAgICBkYXRhc2l6ZTogc2lsZW50RnJhbWUuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIGR0czogY3VycmVudC5kdHMgKyAoZnJhbWVJZHggKyAxKSAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24sXG4gICAgICAgICAgICBmaWx0ZXJlZDogMCxcbiAgICAgICAgICAgIGlzU2lsZW50OiB0cnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXVkaW9TYW1wbGVzLnNwbGljZShpLCAwLCBzaWxlbnRTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogc2lsZW50U2FtcGxlLmR0cyxcbiAgICAgICAgICAgIHNpemU6IHNpbGVudFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgZnJhbWVJZHgrK1xuICAgICAgICAgIGkrKyAvLyDkuI3lr7npnZnpn7PluKflgZrmr5TovoNcbiAgICAgICAgfVxuICAgICAgfSAqL1xuICAgIH1cblxuICAgIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzID0gQ29tcGF0aWJpbGl0eS5zb3J0QXVkaW9TYW1wbGVzKGF1ZGlvU2FtcGxlcylcbiAgfVxuXG4gIGZpeENoYW5nZVN0cmVhbVZpZGVvIChjaGFuZ2VJZHgpIHtcbiAgICBjb25zdCB7IHNhbXBsZXMsIG1ldGEgfSA9IHRoaXMudmlkZW9UcmFjaztcbiAgICBjb25zdCBwcmV2RHRzID0gY2hhbmdlSWR4ID09PSAwID8gdGhpcy5nZXRTdHJlYW1DaGFuZ2VTdGFydChzYW1wbGVzWzBdKSA6IHNhbXBsZXNbY2hhbmdlSWR4IC0gMV0uZHRzO1xuICAgIGNvbnN0IGN1ckR0cyA9IHNhbXBsZXNbY2hhbmdlSWR4XS5kdHM7XG4gICAgY29uc3QgaXNDb250aW51ZSA9IE1hdGguYWJzKHByZXZEdHMgLSBjdXJEdHMpIDw9IDIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uO1xuXG4gICAgaWYgKGlzQ29udGludWUpIHtcbiAgICAgIGlmICghc2FtcGxlc1tjaGFuZ2VJZHhdLm9wdGlvbnMpIHtcbiAgICAgICAgc2FtcGxlc1tjaGFuZ2VJZHhdLm9wdGlvbnMgPSB7XG4gICAgICAgICAgaXNDb250aW51ZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzYW1wbGVzW2NoYW5nZUlkeF0ub3B0aW9ucy5pc0NvbnRpbnVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmRvRml4VmlkZW8oZmFsc2UpXG4gICAgfVxuXG4gICAgY29uc3QgZmlyc3RQYXJ0U2FtcGxlcyA9IHNhbXBsZXMuc2xpY2UoMCwgY2hhbmdlSWR4KTtcbiAgICBjb25zdCBzZWNvbmRQYXJ0U2FtcGxlcyA9IHNhbXBsZXMuc2xpY2UoY2hhbmdlSWR4KTtcbiAgICBjb25zdCBmaXJzdFNhbXBsZSA9IHNhbXBsZXNbMF1cblxuICAgIGNvbnN0IGNoYW5nZVNhbXBsZSA9IHNlY29uZFBhcnRTYW1wbGVzWzBdXG4gICAgY29uc3QgZmlyc3RQYXJ0RHVyYXRpb24gPSBjaGFuZ2VTYW1wbGUuZHRzIC0gZmlyc3RTYW1wbGUuZHRzXG4gICAgY29uc3Qgc3RyZWFtQ2hhbmdlU3RhcnQgPSBmaXJzdFNhbXBsZS5vcHRpb25zICYmIGZpcnN0U2FtcGxlLm9wdGlvbnMuc3RhcnQgKyBmaXJzdFBhcnREdXJhdGlvbiA/IGZpcnN0U2FtcGxlLm9wdGlvbnMuc3RhcnQgOiBudWxsXG5cbiAgICB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcyA9IHNhbXBsZXMuc2xpY2UoMCwgY2hhbmdlSWR4KTtcblxuICAgIHRoaXMuZG9GaXhWaWRlbyhmYWxzZSk7XG5cbiAgICB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcyA9IHNhbXBsZXMuc2xpY2UoY2hhbmdlSWR4KTtcblxuICAgIHRoaXMuZG9GaXhWaWRlbyhmYWxzZSwgc3RyZWFtQ2hhbmdlU3RhcnQpO1xuXG4gICAgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMgPSBmaXJzdFBhcnRTYW1wbGVzLmNvbmNhdChzZWNvbmRQYXJ0U2FtcGxlcylcbiAgfVxuXG4gIGZpeENoYW5nZVN0cmVhbUF1ZGlvIChjaGFuZ2VJZHgpIHtcbiAgICBjb25zdCB7IHNhbXBsZXMsIG1ldGEgfSA9IHRoaXMuYXVkaW9UcmFjaztcblxuICAgIGNvbnN0IHByZXZEdHMgPSBjaGFuZ2VJZHggPT09IDAgPyB0aGlzLmdldFN0cmVhbUNoYW5nZVN0YXJ0KHNhbXBsZXNbMF0pIDogc2FtcGxlc1tjaGFuZ2VJZHggLSAxXS5kdHM7XG4gICAgY29uc3QgY3VyRHRzID0gc2FtcGxlc1tjaGFuZ2VJZHhdLmR0cztcbiAgICBjb25zdCBpc0NvbnRpbnVlID0gTWF0aC5hYnMocHJldkR0cyAtIGN1ckR0cykgPD0gMiAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb247XG5cbiAgICBpZiAoaXNDb250aW51ZSkge1xuICAgICAgaWYgKCFzYW1wbGVzW2NoYW5nZUlkeF0ub3B0aW9ucykge1xuICAgICAgICBzYW1wbGVzW2NoYW5nZUlkeF0ub3B0aW9ucyA9IHtcbiAgICAgICAgICBpc0NvbnRpbnVlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNhbXBsZXNbY2hhbmdlSWR4XS5vcHRpb25zLmlzQ29udGludWUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZG9GaXhBdWRpbyhmYWxzZSlcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdFBhcnRTYW1wbGVzID0gc2FtcGxlcy5zbGljZSgwLCBjaGFuZ2VJZHgpO1xuICAgIGNvbnN0IHNlY29uZFBhcnRTYW1wbGVzID0gc2FtcGxlcy5zbGljZShjaGFuZ2VJZHgpO1xuICAgIGNvbnN0IGZpcnN0U2FtcGxlID0gc2FtcGxlc1swXVxuXG4gICAgY29uc3QgY2hhbmdlU2FtcGxlID0gc2Vjb25kUGFydFNhbXBsZXNbMF1cbiAgICBjb25zdCBmaXJzdFBhcnREdXJhdGlvbiA9IGNoYW5nZVNhbXBsZS5kdHMgLSBmaXJzdFNhbXBsZS5kdHNcbiAgICBjb25zdCBzdHJlYW1DaGFuZ2VTdGFydCA9IGZpcnN0U2FtcGxlLm9wdGlvbnMgJiYgZmlyc3RTYW1wbGUub3B0aW9ucy5zdGFydCArIGZpcnN0UGFydER1cmF0aW9uID8gZmlyc3RTYW1wbGUub3B0aW9ucy5zdGFydCA6IG51bGxcblxuICAgIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzID0gZmlyc3RQYXJ0U2FtcGxlcztcblxuICAgIHRoaXMuZG9GaXhBdWRpbyhmYWxzZSk7XG5cbiAgICB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcyA9IHNlY29uZFBhcnRTYW1wbGVzO1xuXG4gICAgdGhpcy5kb0ZpeEF1ZGlvKGZhbHNlLCBzdHJlYW1DaGFuZ2VTdGFydCk7XG5cbiAgICB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcyA9IGZpcnN0UGFydFNhbXBsZXMuY29uY2F0KHNlY29uZFBhcnRTYW1wbGVzKVxuICB9XG5cbiAgZ2V0Rmlyc3RTYW1wbGUgKCkge1xuICAgIC8vIOiOt+WPlnZpZGVv5ZKMYXVkaW/nmoTpppbluKfmlbDmja5cbiAgICBsZXQge3NhbXBsZXM6IHZpZGVvU2FtcGxlc30gPSB0aGlzLnZpZGVvVHJhY2tcbiAgICBsZXQge3NhbXBsZXM6IGF1ZGlvU2FtcGxlc30gPSB0aGlzLmF1ZGlvVHJhY2tcblxuICAgIGxldCBpc0ZpcnN0VmlkZW9TYW1wbGVzID0gZmFsc2U7XG4gICAgbGV0IGlzRmlyc3RBdWRpb1NhbXBsZXMgPSBmYWxzZTtcblxuICAgIGlmICghdGhpcy5fZmlyc3RWaWRlb1NhbXBsZSAmJiB2aWRlb1NhbXBsZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9maXJzdFZpZGVvU2FtcGxlID0gQ29tcGF0aWJpbGl0eS5maW5kRmlyc3RWaWRlb1NhbXBsZSh2aWRlb1NhbXBsZXMpXG4gICAgICBpc0ZpcnN0VmlkZW9TYW1wbGVzID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmICghdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSAmJiBhdWRpb1NhbXBsZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlID0gQ29tcGF0aWJpbGl0eS5maW5kRmlyc3RBdWRpb1NhbXBsZShhdWRpb1NhbXBsZXMpIC8vIOWvu+aJvmR0c+acgOWwj+eahOW4p+S9nOS4uummluS4qumfs+mikeW4p1xuICAgICAgaXNGaXJzdEF1ZGlvU2FtcGxlcyA9IHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNGaXJzdFZpZGVvU2FtcGxlcyxcbiAgICAgIGlzRmlyc3RBdWRpb1NhbXBsZXNcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5Zyo5rKh5pyJcmVmU2FtcGxlRHVyYXRpb27nmoTpl67popjmtYHkuK3vvIxcbiAgICovXG4gIGZpeFJlZlNhbXBsZUR1cmF0aW9uIChtZXRhLCBzYW1wbGVzKSB7XG4gICAgY29uc3QgaXNWaWRlbyA9IG1ldGEudHlwZSA9PT0gJ3ZpZGVvJ1xuICAgIGNvbnN0IGFsbFNhbXBsZXNDb3VudCA9IGlzVmlkZW8gPyB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50IDogdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudFxuICAgIGNvbnN0IGZpcnN0RHRzID0gaXNWaWRlbyA/IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzIDogdGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHNcbiAgICBjb25zdCBmaWxsZWRTYW1wbGVzQ291bnQgPSBpc1ZpZGVvID8gdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMubGVuZ3RoIDogdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMubGVuZ3RoXG5cbiAgICBpZiAoIW1ldGEucmVmU2FtcGxlRHVyYXRpb24gfHwgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA8PSAwIHx8IE51bWJlci5pc05hTihtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgY29uc3QgbGFzdER0cyA9IHNhbXBsZXNbc2FtcGxlcy5sZW5ndGggLSAxXS5kdHNcblxuICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcigobGFzdER0cyAtIGZpcnN0RHRzKSAvICgoYWxsU2FtcGxlc0NvdW50ICsgZmlsbGVkU2FtcGxlc0NvdW50KSAtIDEpKTsgLy8g5bCGcmVmU2FtcGxlRHVyYXRpb27ph43nva7kuLrorqHnrpflkI7nmoTlubPlnYflgLxcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG1ldGEucmVmU2FtcGxlRHVyYXRpb24pIHtcbiAgICAgIGlmIChzYW1wbGVzLmxlbmd0aCA+PSA1KSB7XG4gICAgICAgIGNvbnN0IGxhc3REdHMgPSBzYW1wbGVzW3NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzXG4gICAgICAgIGNvbnN0IGZpcnN0RHRzID0gc2FtcGxlc1swXS5kdHNcbiAgICAgICAgY29uc3QgZHVyYXRpb25BdmcgPSAobGFzdER0cyAtIGZpcnN0RHRzKSAvIChzYW1wbGVzLmxlbmd0aCAtIDEpXG5cbiAgICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5hYnMobWV0YS5yZWZTYW1wbGVEdXJhdGlvbiAtIGR1cmF0aW9uQXZnKSA8PSA1ID8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA6IGR1cmF0aW9uQXZnKTsgLy8g5bCGcmVmU2FtcGxlRHVyYXRpb27ph43nva7kuLrorqHnrpflkI7nmoTlubPlnYflgLxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6K6w5b2V5oiq5q2i55uu5YmN5LiA5YWx5pKt5pS+5LqG5aSa5bCR5binXG4gICAqL1xuICByZWNvcmRTYW1wbGVzQ291bnQgKCkge1xuICAgIGNvbnN0IHsgYXVkaW9UcmFjaywgdmlkZW9UcmFjayB9ID0gdGhpc1xuXG4gICAgdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCArPSBhdWRpb1RyYWNrLnNhbXBsZXMubGVuZ3RoXG4gICAgdGhpcy5hbGxWaWRlb1NhbXBsZXNDb3VudCArPSB2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICog5Y676Zmk5LiN5ZCI5rOV55qE5bin77yI5YCS6YCA44CB6YeN5aSN5bin77yJXG4gICAqL1xuICByZW1vdmVJbnZhbGlkU2FtcGxlcyAoKSB7XG4gICAgY29uc3QgeyBfZmlyc3RWaWRlb1NhbXBsZSwgX2ZpcnN0QXVkaW9TYW1wbGUgfSA9IHRoaXNcblxuICAgIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzID0gdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMuZmlsdGVyKChzYW1wbGUpID0+IHtcbiAgICAgIHJldHVybiBzYW1wbGUuZHRzID49IF9maXJzdEF1ZGlvU2FtcGxlLmR0cyAmJiAodGhpcy5sYXN0QXVkaW9EdHMgPT09IHVuZGVmaW5lZCB8fCBzYW1wbGUuZHRzID4gdGhpcy5sYXN0QXVkaW9EdHMpXG4gICAgfSlcblxuICAgIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzID0gdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMuZmlsdGVyKChzYW1wbGUpID0+IHtcbiAgICAgIHJldHVybiBzYW1wbGUuZHRzID49IF9maXJzdFZpZGVvU2FtcGxlLmR0cyAmJiAodGhpcy5sYXN0VmlkZW9EdHMgPT09IHVuZGVmaW5lZCB8fCBzYW1wbGUuZHRzID4gdGhpcy5sYXN0VmlkZW9EdHMpXG4gICAgfSlcbiAgfVxuXG4gIGdldFN0cmVhbUNoYW5nZVN0YXJ0IChzYW1wbGUpIHtcbiAgICBpZiAoc2FtcGxlLm9wdGlvbnMgJiYgc2FtcGxlLm9wdGlvbnMuc3RhcnQpIHtcbiAgICAgIHJldHVybiBzYW1wbGUub3B0aW9ucy5zdGFydCAtIHRoaXMuZHRzQmFzZTtcbiAgICB9XG4gICAgcmV0dXJuIEluZmluaXR5XG4gIH1cblxuICBzdGF0aWMgc29ydEF1ZGlvU2FtcGxlcyAoc2FtcGxlcykge1xuICAgIGlmIChzYW1wbGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHNhbXBsZXNcbiAgICB9XG5cbiAgICByZXR1cm4gc2FtcGxlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gYS5kdHMgLSBiLmR0c1xuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICog5a+75om+ZHRz5pyA5bCP55qEc2FtcGxlXG4gICAqIEBwYXJhbSBzYW1wbGVzXG4gICAqL1xuICBzdGF0aWMgZmluZEZpcnN0QXVkaW9TYW1wbGUgKHNhbXBsZXMpIHtcbiAgICBpZiAoIXNhbXBsZXMgfHwgc2FtcGxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIENvbXBhdGliaWxpdHkuc29ydEF1ZGlvU2FtcGxlcyhzYW1wbGVzKVswXVxuICB9XG5cbiAgc3RhdGljIGZpbmRGaXJzdFZpZGVvU2FtcGxlIChzYW1wbGVzKSB7XG4gICAgaWYgKCFzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBzb3J0ZWQgPSBzYW1wbGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIHJldHVybiBhLmR0cyAtIGIuZHRzO1xuICAgIH0pXG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc29ydGVkLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoc29ydGVkW2ldLmlzS2V5ZnJhbWUpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRlZFtpXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBkZXRlY3RMYXJnZUdhcCAobmV4dER0cywgZmlyc3RTYW1wbGUpIHtcbiAgICBpZiAobmV4dER0cyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjdXJEdHMgPSBmaXJzdFNhbXBsZS5kdHMgfHwgMFxuICAgIGNvbnN0IGNvbmQxID0gbmV4dER0cyAtIGN1ckR0cyA+PSAxMDAwIHx8IGN1ckR0cyAtIG5leHREdHMgPj0gMTAwMCAvLyBmaXggaGxz5rWB5Ye6546w5aSn6YeP5rWBZHRz6Ze06Led6Zeu6aKYXG4gICAgY29uc3QgY29uZDIgPSBmaXJzdFNhbXBsZS5vcHRpb25zICYmIGZpcnN0U2FtcGxlLm9wdGlvbnMuZGlzY29udGludWVcblxuICAgIHJldHVybiBjb25kMSB8fCBjb25kMlxuICB9XG5cbiAgc3RhdGljIGRvRml4TGFyZ2VHYXAgKHNhbXBsZXMsIGdhcCkge1xuICAgIGNvbnNvbGUubG9nKCdmaXggbGFyZ2UgZ2FwJylcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2FtcGxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3Qgc2FtcGxlID0gc2FtcGxlc1tpXTtcbiAgICAgIHNhbXBsZS5kdHMgKz0gZ2FwXG4gICAgICBpZiAoc2FtcGxlLnB0cykge1xuICAgICAgICBzYW1wbGUucHRzICs9IGdhcFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDkuK3pgJTmjaLmtYFcbiAgICovXG4gIHN0YXRpYyBkZXRhY3RDaGFuZ2VTdHJlYW0gKHNhbXBsZXMpIHtcbiAgICBsZXQgY2hhbmdlZCA9IGZhbHNlO1xuICAgIGxldCBjaGFuZ2VkSWR4ID0gLTE7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNhbXBsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChzYW1wbGVzW2ldLm9wdGlvbnMgJiYgc2FtcGxlc1tpXS5vcHRpb25zLm1ldGEpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgY2hhbmdlZElkeCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBjaGFuZ2VkLFxuICAgICAgY2hhbmdlZElkeFxuICAgIH1cbiAgfVxuXG4gIGdldCB0cmFja3MgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKVxuICB9XG5cbiAgZ2V0IGF1ZGlvVHJhY2sgKCkge1xuICAgIGlmICh0aGlzLnRyYWNrcykge1xuICAgICAgcmV0dXJuIHRoaXMudHJhY2tzLmF1ZGlvVHJhY2tcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCB2aWRlb1RyYWNrICgpIHtcbiAgICBpZiAodGhpcy50cmFja3MpIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgZHRzQmFzZSAoKSB7XG4gICAgY29uc3QgcmVtdXhlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ01QNF9SRU1VWEVSJyk7XG4gICAgaWYgKHJlbXV4ZXIpIHtcbiAgICAgIHJldHVybiByZW11eGVyLl9kdHNCYXNlXG4gICAgfVxuICAgIHJldHVybiAwXG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IENvbXBhdGliaWxpdHk7XG4iLCJjbGFzcyBHb2xvbWIge1xuICBjb25zdHJ1Y3RvciAodWludDhhcnJheSkge1xuICAgIHRoaXMuVEFHID0gJ0dvbG9tYidcbiAgICB0aGlzLl9idWZmZXIgPSB1aW50OGFycmF5XG4gICAgdGhpcy5fYnVmZmVySW5kZXggPSAwXG4gICAgdGhpcy5fdG90YWxCeXRlcyA9IHVpbnQ4YXJyYXkuYnl0ZUxlbmd0aFxuICAgIHRoaXMuX3RvdGFsQml0cyA9IHVpbnQ4YXJyYXkuYnl0ZUxlbmd0aCAqIDhcbiAgICB0aGlzLl9jdXJyZW50V29yZCA9IDBcbiAgICB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0ID0gMFxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fYnVmZmVyID0gbnVsbFxuICB9XG5cbiAgX2ZpbGxDdXJyZW50V29yZCAoKSB7XG4gICAgbGV0IGJ1ZmZlckJ5dGVzTGVmdCA9IHRoaXMuX3RvdGFsQnl0ZXMgLSB0aGlzLl9idWZmZXJJbmRleFxuICAgIGlmIChidWZmZXJCeXRlc0xlZnQgPD0gMCkge1xuICAgICAgLy8gVE9ETyDlvILluLjlpITnkIZcbiAgICB9XG5cbiAgICBsZXQgYnl0ZXNSZWFkID0gTWF0aC5taW4oNCwgYnVmZmVyQnl0ZXNMZWZ0KVxuICAgIGxldCB3b3JkID0gbmV3IFVpbnQ4QXJyYXkoNClcbiAgICB3b3JkLnNldCh0aGlzLl9idWZmZXIuc3ViYXJyYXkodGhpcy5fYnVmZmVySW5kZXgsIHRoaXMuX2J1ZmZlckluZGV4ICsgYnl0ZXNSZWFkKSlcbiAgICB0aGlzLl9jdXJyZW50V29yZCA9IG5ldyBEYXRhVmlldyh3b3JkLmJ1ZmZlcikuZ2V0VWludDMyKDApXG5cbiAgICB0aGlzLl9idWZmZXJJbmRleCArPSBieXRlc1JlYWRcbiAgICB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0ID0gYnl0ZXNSZWFkICogOFxuICB9XG5cbiAgcmVhZEJpdHMgKHNpemUpIHtcbiAgICBsZXQgYml0cyA9IE1hdGgubWluKHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQsIHNpemUpOy8vIDp1aW50XG4gICAgbGV0IHZhbHUgPSB0aGlzLl9jdXJyZW50V29yZCA+Pj4gKDMyIC0gYml0cyk7XG4gICAgaWYgKHNpemUgPiAzMikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVhZCBtb3JlIHRoYW4gMzIgYml0cyBhdCBhIHRpbWUnKTtcbiAgICB9XG4gICAgdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCAtPSBiaXRzO1xuICAgIGlmICh0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy5fY3VycmVudFdvcmQgPDw9IGJpdHM7XG4gICAgfSBlbHNlIGlmICh0aGlzLl90b3RhbEJ5dGVzIC0gdGhpcy5fYnVmZmVySW5kZXggPiAwKSB7XG4gICAgICB0aGlzLl9maWxsQ3VycmVudFdvcmQoKTtcbiAgICB9XG5cbiAgICBiaXRzID0gc2l6ZSAtIGJpdHM7XG4gICAgaWYgKGJpdHMgPiAwICYmIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQpIHtcbiAgICAgIHJldHVybiB2YWx1IDw8IGJpdHMgfCB0aGlzLnJlYWRCaXRzKGJpdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdmFsdTtcbiAgICB9XG4gIH1cblxuICByZWFkQm9vbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZEJpdHMoMSkgPT09IDFcbiAgfVxuXG4gIHJlYWRCeXRlICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkQml0cyg4KVxuICB9XG5cbiAgX3NraXBMZWFkaW5nWmVybyAoKSB7XG4gICAgbGV0IHplcm9Db3VudFxuICAgIGZvciAoemVyb0NvdW50ID0gMDsgemVyb0NvdW50IDwgdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdDsgemVyb0NvdW50KyspIHtcbiAgICAgIGlmICgodGhpcy5fY3VycmVudFdvcmQgJiAoMHg4MDAwMDAwMCA+Pj4gemVyb0NvdW50KSkgIT09IDApIHtcbiAgICAgICAgdGhpcy5fY3VycmVudFdvcmQgPDw9IHplcm9Db3VudFxuICAgICAgICB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0IC09IHplcm9Db3VudFxuICAgICAgICByZXR1cm4gemVyb0NvdW50XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2ZpbGxDdXJyZW50V29yZCgpXG4gICAgcmV0dXJuIHplcm9Db3VudCArIHRoaXMuX3NraXBMZWFkaW5nWmVybygpXG4gIH1cblxuICByZWFkVUVHICgpIHsgLy8gdW5zaWduZWQgZXhwb25lbnRpYWwgZ29sb21iXG4gICAgbGV0IGxlYWRpbmdaZXJvcyA9IHRoaXMuX3NraXBMZWFkaW5nWmVybygpXG4gICAgcmV0dXJuIHRoaXMucmVhZEJpdHMobGVhZGluZ1plcm9zICsgMSkgLSAxXG4gIH1cblxuICByZWFkU0VHICgpIHsgLy8gc2lnbmVkIGV4cG9uZW50aWFsIGdvbG9tYlxuICAgIGxldCB2YWx1ZSA9IHRoaXMucmVhZFVFRygpXG4gICAgaWYgKHZhbHVlICYgMHgwMSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSArIDEpID4+PiAxXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAtMSAqICh2YWx1ZSA+Pj4gMSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR29sb21iXG4iLCJpbXBvcnQgU3BzUGFyc2VyIGZyb20gJy4vc3BzJztcbmNsYXNzIE5hbHVuaXQge1xuICBzdGF0aWMgZ2V0TmFsdW5pdHMgKGJ1ZmZlcikge1xuICAgIGlmIChidWZmZXIubGVuZ3RoIC0gYnVmZmVyLnBvc2l0aW9uIDwgNCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGxldCBidWYgPSBidWZmZXIuZGF0YXZpZXc7XG4gICAgbGV0IHBvc2l0aW9uID0gYnVmZmVyLnBvc2l0aW9uO1xuICAgIGlmIChidWYuZ2V0SW50MzIocG9zaXRpb24pID09PSAxIHx8XG4gICAgKGJ1Zi5nZXRJbnQxNihwb3NpdGlvbikgPT09IDAgJiYgYnVmLmdldEludDgocG9zaXRpb24gKyAyKSA9PT0gMSkpIHtcbiAgICAgIHJldHVybiBOYWx1bml0LmdldEFubmV4Yk5hbHMoYnVmZmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE5hbHVuaXQuZ2V0QXZjY05hbHMoYnVmZmVyKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0QW5uZXhiTmFscyAoYnVmZmVyKSB7XG4gICAgbGV0IG5hbHMgPSBbXTtcbiAgICBsZXQgcG9zaXRpb24gPSBOYWx1bml0LmdldEhlYWRlclBvc2l0aW9uQW5uZXhCKGJ1ZmZlcik7XG4gICAgbGV0IHN0YXJ0ID0gcG9zaXRpb24ucG9zO1xuICAgIGxldCBlbmQgPSBzdGFydDtcbiAgICB3aGlsZSAoc3RhcnQgPCBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgbGV0IGhlYWRlciA9IGJ1ZmZlci5idWZmZXIuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgcG9zaXRpb24uaGVhZGVyTGVuZ3RoKTtcbiAgICAgIGlmIChwb3NpdGlvbi5wb3MgPT09IGJ1ZmZlci5wb3NpdGlvbikge1xuICAgICAgICBidWZmZXIuc2tpcChwb3NpdGlvbi5oZWFkZXJMZW5ndGgpO1xuICAgICAgfVxuICAgICAgcG9zaXRpb24gPSBOYWx1bml0LmdldEhlYWRlclBvc2l0aW9uQW5uZXhCKGJ1ZmZlcik7XG4gICAgICBlbmQgPSBwb3NpdGlvbi5wb3M7XG4gICAgICBsZXQgYm9keSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIuc2xpY2Uoc3RhcnQgKyBoZWFkZXIuYnl0ZUxlbmd0aCwgZW5kKSk7XG4gICAgICBsZXQgdW5pdCA9IHtoZWFkZXIsIGJvZHl9O1xuICAgICAgTmFsdW5pdC5hbmFseXNlTmFsKHVuaXQpO1xuICAgICAgbmFscy5wdXNoKHVuaXQpO1xuICAgICAgYnVmZmVyLnNraXAoZW5kIC0gYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgIHN0YXJ0ID0gZW5kO1xuICAgIH1cbiAgICByZXR1cm4gbmFscztcbiAgfVxuXG4gIHN0YXRpYyBnZXRBdmNjTmFscyAoYnVmZmVyKSB7XG4gICAgbGV0IG5hbHMgPSBbXTtcbiAgICB3aGlsZSAoYnVmZmVyLnBvc2l0aW9uIDwgYnVmZmVyLmxlbmd0aCAtIDQpIHtcbiAgICAgIGxldCBsZW5ndGggPSBidWZmZXIuZGF0YXZpZXcuZ2V0SW50MzIoKTtcbiAgICAgIGlmIChidWZmZXIubGVuZ3RoIC0gYnVmZmVyLnBvc2l0aW9uID49IGxlbmd0aCkge1xuICAgICAgICBsZXQgaGVhZGVyID0gYnVmZmVyLmJ1ZmZlci5zbGljZShidWZmZXIucG9zaXRpb24sIGJ1ZmZlci5wb3NpdGlvbiArIDQpO1xuICAgICAgICBidWZmZXIuc2tpcCg0KVxuICAgICAgICBsZXQgYm9keSA9IGJ1ZmZlci5idWZmZXIuc2xpY2UoYnVmZmVyLnBvc2l0aW9uLCBidWZmZXIucG9zaXRpb24gKyBsZW5ndGgpO1xuICAgICAgICBidWZmZXIuc2tpcChsZW5ndGgpO1xuICAgICAgICBsZXQgdW5pdCA9IHtoZWFkZXIsIGJvZHl9O1xuICAgICAgICBOYWx1bml0LmFuYWx5c2VOYWwodW5pdCk7XG4gICAgICAgIG5hbHMucHVzaCh1bml0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmFscztcbiAgfVxuXG4gIHN0YXRpYyBhbmFseXNlTmFsICh1bml0KSB7XG4gICAgbGV0IHR5cGUgPSB1bml0LmJvZHlbMF0gJiAweDFmO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICAvLyBORFJcbiAgICAgICAgdW5pdC5uZHIgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgLy8gSURSXG4gICAgICAgIHVuaXQuaWRyID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDY6XG4gICAgICAgIC8vIFNFSVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNzpcbiAgICAgICAgLy8gU1BTXG4gICAgICAgIHVuaXQuc3BzID0gU3BzUGFyc2VyLnBhcnNlU1BTKHVuaXQuYm9keSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA4OlxuICAgICAgICAvLyBQUFNcbiAgICAgICAgdW5pdC5wcHMgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgOTpcbiAgICAgICAgLy8gQVVEXG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldEhlYWRlclBvc2l0aW9uQW5uZXhCIChidWZmZXIpIHtcbiAgICAvLyBzZXBlcmF0ZVxuICAgIGxldCBwb3MgPSBidWZmZXIucG9zaXRpb247XG4gICAgbGV0IGhlYWRlckxlbmd0aCA9IDA7XG4gICAgd2hpbGUgKGhlYWRlckxlbmd0aCAhPT0gMyAmJiBoZWFkZXJMZW5ndGggIT09IDQgJiYgcG9zIDwgYnVmZmVyLmxlbmd0aCAtIDQpIHtcbiAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zKSA9PT0gMCkge1xuICAgICAgICBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDE2KHBvcyArIDIpID09PSAxKSB7XG4gICAgICAgICAgLy8gMHgwMDAwMDFcbiAgICAgICAgICBoZWFkZXJMZW5ndGggPSA0O1xuICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQ4KHBvcyArIDIpID09PSAxKSB7XG4gICAgICAgICAgaGVhZGVyTGVuZ3RoID0gMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb3MrKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9zKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvcyA9PT0gYnVmZmVyLmxlbmd0aCAtIDQpIHtcbiAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zKSA9PT0gMCkge1xuICAgICAgICBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDE2KHBvcyArIDIpID09PSAxKSB7XG4gICAgICAgICAgLy8gMHgwMDAwMDFcbiAgICAgICAgICBoZWFkZXJMZW5ndGggPSA0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3MrKztcbiAgICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MpID09PSAwICYmIGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQ4KHBvcykgPT09IDEpIHtcbiAgICAgICAgICAvLyAweDAwMDAwMDFcbiAgICAgICAgICBoZWFkZXJMZW5ndGggPSAzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvcyA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtwb3MsIGhlYWRlckxlbmd0aH07XG4gIH1cblxuICBzdGF0aWMgZ2V0QXZjYyAoc3BzLCBwcHMpIHtcbiAgICBsZXQgcmV0ID0gbmV3IFVpbnQ4QXJyYXkoc3BzLmJ5dGVMZW5ndGggKyBwcHMuYnl0ZUxlbmd0aCArIDExKTtcbiAgICByZXRbMF0gPSAweDAxO1xuICAgIHJldFsxXSA9IHNwc1sxXTtcbiAgICByZXRbMl0gPSBzcHNbMl07XG4gICAgcmV0WzNdID0gc3BzWzNdO1xuICAgIHJldFs0XSA9IDI1NTtcbiAgICByZXRbNV0gPSAyMjU7XG5cbiAgICBsZXQgb2Zmc2V0ID0gNjtcblxuICAgIHJldC5zZXQobmV3IFVpbnQ4QXJyYXkoWyhzcHMuYnl0ZUxlbmd0aCA+Pj4gOCkgJiAweGZmLCBzcHMuYnl0ZUxlbmd0aCAmIDB4ZmZdKSwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gMjtcbiAgICByZXQuc2V0KHNwcywgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gc3BzLmJ5dGVMZW5ndGg7XG5cbiAgICByZXRbb2Zmc2V0XSA9IDE7XG4gICAgb2Zmc2V0Kys7XG5cbiAgICByZXQuc2V0KG5ldyBVaW50OEFycmF5KFsocHBzLmJ5dGVMZW5ndGggPj4+IDgpICYgMHhmZiwgcHBzLmJ5dGVMZW5ndGggJiAweGZmXSksIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IDI7XG4gICAgcmV0LnNldChwcHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOYWx1bml0O1xuIiwiLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICAqL1xuLyogZXNsaW50LWRpc2FibGUgb25lLXZhciAgKi9cbmltcG9ydCBHb2xvbWIgZnJvbSAnLi9nb2xvbWInXG5cbmNsYXNzIFNQU1BhcnNlciB7XG4gIHN0YXRpYyBfZWJzcDJyYnNwICh1aW50OGFycmF5KSB7XG4gICAgbGV0IHNyYyA9IHVpbnQ4YXJyYXlcbiAgICBsZXQgc3JjTGVuZ3RoID0gc3JjLmJ5dGVMZW5ndGhcbiAgICBsZXQgZHN0ID0gbmV3IFVpbnQ4QXJyYXkoc3JjTGVuZ3RoKVxuICAgIGxldCBkc3RJZHggPSAwXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNyY0xlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaSA+PSAyKSB7XG4gICAgICAgIGlmIChzcmNbaV0gPT09IDB4MDMgJiYgc3JjW2kgLSAxXSA9PT0gMHgwMCAmJiBzcmNbaSAtIDJdID09PSAweDAwKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZHN0W2RzdElkeF0gPSBzcmNbaV1cbiAgICAgIGRzdElkeCsrXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRzdC5idWZmZXIsIDAsIGRzdElkeClcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZVNQUyAodWludDhhcnJheSkge1xuICAgIGxldCByYnNwID0gU1BTUGFyc2VyLl9lYnNwMnJic3AodWludDhhcnJheSlcbiAgICBsZXQgZ2IgPSBuZXcgR29sb21iKHJic3ApXG5cbiAgICBnYi5yZWFkQnl0ZSgpXG4gICAgbGV0IHByb2ZpbGVJZGMgPSBnYi5yZWFkQnl0ZSgpXG4gICAgZ2IucmVhZEJ5dGUoKVxuICAgIGxldCBsZXZlbElkYyA9IGdiLnJlYWRCeXRlKClcbiAgICBnYi5yZWFkVUVHKClcblxuICAgIGxldCBwcm9maWxlX3N0cmluZyA9IFNQU1BhcnNlci5nZXRQcm9maWxlU3RyaW5nKHByb2ZpbGVJZGMpXG4gICAgbGV0IGxldmVsX3N0cmluZyA9IFNQU1BhcnNlci5nZXRMZXZlbFN0cmluZyhsZXZlbElkYylcbiAgICBsZXQgY2hyb21hX2Zvcm1hdF9pZGMgPSAxXG4gICAgbGV0IGNocm9tYV9mb3JtYXQgPSA0MjBcbiAgICBsZXQgY2hyb21hX2Zvcm1hdF90YWJsZSA9IFswLCA0MjAsIDQyMiwgNDQ0XVxuICAgIGxldCBiaXRfZGVwdGggPSA4XG5cbiAgICBpZiAocHJvZmlsZUlkYyA9PT0gMTAwIHx8IHByb2ZpbGVJZGMgPT09IDExMCB8fCBwcm9maWxlSWRjID09PSAxMjIgfHxcbiAgICAgIHByb2ZpbGVJZGMgPT09IDI0NCB8fCBwcm9maWxlSWRjID09PSA0NCB8fCBwcm9maWxlSWRjID09PSA4MyB8fFxuICAgICAgcHJvZmlsZUlkYyA9PT0gODYgfHwgcHJvZmlsZUlkYyA9PT0gMTE4IHx8IHByb2ZpbGVJZGMgPT09IDEyOCB8fFxuICAgICAgcHJvZmlsZUlkYyA9PT0gMTM4IHx8IHByb2ZpbGVJZGMgPT09IDE0NCkge1xuICAgICAgY2hyb21hX2Zvcm1hdF9pZGMgPSBnYi5yZWFkVUVHKClcbiAgICAgIGlmIChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMykge1xuICAgICAgICBnYi5yZWFkQml0cygxKVxuICAgICAgfVxuICAgICAgaWYgKGNocm9tYV9mb3JtYXRfaWRjIDw9IDMpIHtcbiAgICAgICAgY2hyb21hX2Zvcm1hdCA9IGNocm9tYV9mb3JtYXRfdGFibGVbY2hyb21hX2Zvcm1hdF9pZGNdXG4gICAgICB9XG5cbiAgICAgIGJpdF9kZXB0aCA9IGdiLnJlYWRVRUcoKSArIDhcbiAgICAgIGdiLnJlYWRVRUcoKVxuICAgICAgZ2IucmVhZEJpdHMoMSlcbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGxldCBzY2FsaW5nX2xpc3RfY291bnQgPSAoY2hyb21hX2Zvcm1hdF9pZGMgIT09IDMpID8gOCA6IDEyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NhbGluZ19saXN0X2NvdW50OyBpKyspIHtcbiAgICAgICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICAgICAgaWYgKGkgPCA2KSB7XG4gICAgICAgICAgICAgIFNQU1BhcnNlci5fc2tpcFNjYWxpbmdMaXN0KGdiLCAxNilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIFNQU1BhcnNlci5fc2tpcFNjYWxpbmdMaXN0KGdiLCA2NClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZ2IucmVhZFVFRygpXG4gICAgbGV0IHBpY19vcmRlcl9jbnRfdHlwZSA9IGdiLnJlYWRVRUcoKVxuICAgIGlmIChwaWNfb3JkZXJfY250X3R5cGUgPT09IDApIHtcbiAgICAgIGdiLnJlYWRVRUcoKVxuICAgIH0gZWxzZSBpZiAocGljX29yZGVyX2NudF90eXBlID09PSAxKSB7XG4gICAgICBnYi5yZWFkQml0cygxKVxuICAgICAgZ2IucmVhZFNFRygpXG4gICAgICBnYi5yZWFkU0VHKClcbiAgICAgIGxldCBudW1fcmVmX2ZyYW1lc19pbl9waWNfb3JkZXJfY250X2N5Y2xlID0gZ2IucmVhZFVFRygpXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bV9yZWZfZnJhbWVzX2luX3BpY19vcmRlcl9jbnRfY3ljbGU7IGkrKykge1xuICAgICAgICBnYi5yZWFkU0VHKClcbiAgICAgIH1cbiAgICB9XG4gICAgZ2IucmVhZFVFRygpXG4gICAgZ2IucmVhZEJpdHMoMSlcblxuICAgIGxldCBwaWNfd2lkdGhfaW5fbWJzX21pbnVzMSA9IGdiLnJlYWRVRUcoKVxuICAgIGxldCBwaWNfaGVpZ2h0X2luX21hcF91bml0c19taW51czEgPSBnYi5yZWFkVUVHKClcblxuICAgIGxldCBmcmFtZV9tYnNfb25seV9mbGFnID0gZ2IucmVhZEJpdHMoMSlcbiAgICBpZiAoZnJhbWVfbWJzX29ubHlfZmxhZyA9PT0gMCkge1xuICAgICAgZ2IucmVhZEJpdHMoMSlcbiAgICB9XG4gICAgZ2IucmVhZEJpdHMoMSlcblxuICAgIGxldCBmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0ID0gMFxuICAgIGxldCBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCA9IDBcbiAgICBsZXQgZnJhbWVfY3JvcF90b3Bfb2Zmc2V0ID0gMFxuICAgIGxldCBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQgPSAwXG5cbiAgICBsZXQgZnJhbWVfY3JvcHBpbmdfZmxhZyA9IGdiLnJlYWRCb29sKClcbiAgICBpZiAoZnJhbWVfY3JvcHBpbmdfZmxhZykge1xuICAgICAgZnJhbWVfY3JvcF9sZWZ0X29mZnNldCA9IGdiLnJlYWRVRUcoKVxuICAgICAgZnJhbWVfY3JvcF9yaWdodF9vZmZzZXQgPSBnYi5yZWFkVUVHKClcbiAgICAgIGZyYW1lX2Nyb3BfdG9wX29mZnNldCA9IGdiLnJlYWRVRUcoKVxuICAgICAgZnJhbWVfY3JvcF9ib3R0b21fb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgfVxuXG4gICAgbGV0IHBhcl93aWR0aCA9IDEsIHBhcl9oZWlnaHQgPSAxXG4gICAgbGV0IGZwcyA9IDAsIGZwc19maXhlZCA9IHRydWUsIGZwc19udW0gPSAwLCBmcHNfZGVuID0gMFxuXG4gICAgbGV0IHZ1aV9wYXJhbWV0ZXJzX3ByZXNlbnRfZmxhZyA9IGdiLnJlYWRCb29sKClcbiAgICBpZiAodnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnKSB7XG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkgeyAvLyBhc3BlY3RfcmF0aW9faW5mb19wcmVzZW50X2ZsYWdcbiAgICAgICAgbGV0IGFzcGVjdF9yYXRpb19pZGMgPSBnYi5yZWFkQnl0ZSgpXG4gICAgICAgIGxldCBwYXJfd190YWJsZSA9IFsxLCAxMiwgMTAsIDE2LCA0MCwgMjQsIDIwLCAzMiwgODAsIDE4LCAxNSwgNjQsIDE2MCwgNCwgMywgMl1cbiAgICAgICAgbGV0IHBhcl9oX3RhYmxlID0gWzEsIDExLCAxMSwgMTEsIDMzLCAxMSwgMTEsIDExLCAzMywgMTEsIDExLCAzMywgOTksIDMsIDIsIDFdXG5cbiAgICAgICAgaWYgKGFzcGVjdF9yYXRpb19pZGMgPiAwICYmIGFzcGVjdF9yYXRpb19pZGMgPCAxNikge1xuICAgICAgICAgIHBhcl93aWR0aCA9IHBhcl93X3RhYmxlW2FzcGVjdF9yYXRpb19pZGMgLSAxXVxuICAgICAgICAgIHBhcl9oZWlnaHQgPSBwYXJfaF90YWJsZVthc3BlY3RfcmF0aW9faWRjIC0gMV1cbiAgICAgICAgfSBlbHNlIGlmIChhc3BlY3RfcmF0aW9faWRjID09PSAyNTUpIHtcbiAgICAgICAgICBwYXJfd2lkdGggPSBnYi5yZWFkQnl0ZSgpIDw8IDggfCBnYi5yZWFkQnl0ZSgpXG4gICAgICAgICAgcGFyX2hlaWdodCA9IGdiLnJlYWRCeXRlKCkgPDwgOCB8IGdiLnJlYWRCeXRlKClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICBnYi5yZWFkQm9vbCgpXG4gICAgICB9XG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICBnYi5yZWFkQml0cyg0KVxuICAgICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICAgIGdiLnJlYWRCaXRzKDI0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICBnYi5yZWFkVUVHKClcbiAgICAgICAgZ2IucmVhZFVFRygpXG4gICAgICB9XG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICBsZXQgbnVtX3VuaXRzX2luX3RpY2sgPSBnYi5yZWFkQml0cygzMilcbiAgICAgICAgbGV0IHRpbWVfc2NhbGUgPSBnYi5yZWFkQml0cygzMilcbiAgICAgICAgZnBzX2ZpeGVkID0gZ2IucmVhZEJvb2woKVxuXG4gICAgICAgIGZwc19udW0gPSB0aW1lX3NjYWxlXG4gICAgICAgIGZwc19kZW4gPSBudW1fdW5pdHNfaW5fdGljayAqIDJcbiAgICAgICAgZnBzID0gZnBzX251bSAvIGZwc19kZW5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcGFyU2NhbGUgPSAxXG4gICAgaWYgKHBhcl93aWR0aCAhPT0gMSB8fCBwYXJfaGVpZ2h0ICE9PSAxKSB7XG4gICAgICBwYXJTY2FsZSA9IHBhcl93aWR0aCAvIHBhcl9oZWlnaHRcbiAgICB9XG5cbiAgICBsZXQgY3JvcF91bml0X3ggPSAwLCBjcm9wX3VuaXRfeSA9IDBcbiAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDApIHtcbiAgICAgIGNyb3BfdW5pdF94ID0gMVxuICAgICAgY3JvcF91bml0X3kgPSAyIC0gZnJhbWVfbWJzX29ubHlfZmxhZ1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgc3ViX3djID0gKGNocm9tYV9mb3JtYXRfaWRjID09PSAzKSA/IDEgOiAyXG4gICAgICBsZXQgc3ViX2hjID0gKGNocm9tYV9mb3JtYXRfaWRjID09PSAxKSA/IDIgOiAxXG4gICAgICBjcm9wX3VuaXRfeCA9IHN1Yl93Y1xuICAgICAgY3JvcF91bml0X3kgPSBzdWJfaGMgKiAoMiAtIGZyYW1lX21ic19vbmx5X2ZsYWcpXG4gICAgfVxuXG4gICAgbGV0IGNvZGVjX3dpZHRoID0gKHBpY193aWR0aF9pbl9tYnNfbWludXMxICsgMSkgKiAxNlxuICAgIGxldCBjb2RlY19oZWlnaHQgPSAoMiAtIGZyYW1lX21ic19vbmx5X2ZsYWcpICogKChwaWNfaGVpZ2h0X2luX21hcF91bml0c19taW51czEgKyAxKSAqIDE2KVxuXG4gICAgY29kZWNfd2lkdGggLT0gKGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgKyBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCkgKiBjcm9wX3VuaXRfeFxuICAgIGNvZGVjX2hlaWdodCAtPSAoZnJhbWVfY3JvcF90b3Bfb2Zmc2V0ICsgZnJhbWVfY3JvcF9ib3R0b21fb2Zmc2V0KSAqIGNyb3BfdW5pdF95XG5cbiAgICBsZXQgcHJlc2VudF93aWR0aCA9IE1hdGguY2VpbChjb2RlY193aWR0aCAqIHBhclNjYWxlKVxuXG4gICAgZ2IuZGVzdHJveSgpXG4gICAgZ2IgPSBudWxsXG5cbiAgICByZXR1cm4ge1xuICAgICAgcHJvZmlsZV9zdHJpbmc6IHByb2ZpbGVfc3RyaW5nLFxuICAgICAgbGV2ZWxfc3RyaW5nOiBsZXZlbF9zdHJpbmcsXG4gICAgICBiaXRfZGVwdGg6IGJpdF9kZXB0aCxcbiAgICAgIGNocm9tYV9mb3JtYXQ6IGNocm9tYV9mb3JtYXQsXG4gICAgICBjaHJvbWFfZm9ybWF0X3N0cmluZzogU1BTUGFyc2VyLmdldENocm9tYUZvcm1hdFN0cmluZyhjaHJvbWFfZm9ybWF0KSxcblxuICAgICAgZnJhbWVfcmF0ZToge1xuICAgICAgICBmaXhlZDogZnBzX2ZpeGVkLFxuICAgICAgICBmcHM6IGZwcyxcbiAgICAgICAgZnBzX2RlbjogZnBzX2RlbixcbiAgICAgICAgZnBzX251bTogZnBzX251bVxuICAgICAgfSxcblxuICAgICAgcGFyX3JhdGlvOiB7XG4gICAgICAgIHdpZHRoOiBwYXJfd2lkdGgsXG4gICAgICAgIGhlaWdodDogcGFyX2hlaWdodFxuICAgICAgfSxcblxuICAgICAgY29kZWNfc2l6ZToge1xuICAgICAgICB3aWR0aDogY29kZWNfd2lkdGgsXG4gICAgICAgIGhlaWdodDogY29kZWNfaGVpZ2h0XG4gICAgICB9LFxuXG4gICAgICBwcmVzZW50X3NpemU6IHtcbiAgICAgICAgd2lkdGg6IHByZXNlbnRfd2lkdGgsXG4gICAgICAgIGhlaWdodDogY29kZWNfaGVpZ2h0XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9za2lwU2NhbGluZ0xpc3QgKGdiLCBjb3VudCkge1xuICAgIGxldCBsYXN0X3NjYWxlID0gOCwgbmV4dF9zY2FsZSA9IDhcbiAgICBsZXQgZGVsdGFfc2NhbGUgPSAwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBpZiAobmV4dF9zY2FsZSAhPT0gMCkge1xuICAgICAgICBkZWx0YV9zY2FsZSA9IGdiLnJlYWRTRUcoKVxuICAgICAgICBuZXh0X3NjYWxlID0gKGxhc3Rfc2NhbGUgKyBkZWx0YV9zY2FsZSArIDI1NikgJSAyNTZcbiAgICAgIH1cbiAgICAgIGxhc3Rfc2NhbGUgPSAobmV4dF9zY2FsZSA9PT0gMCkgPyBsYXN0X3NjYWxlIDogbmV4dF9zY2FsZVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRQcm9maWxlU3RyaW5nIChwcm9maWxlSWRjKSB7XG4gICAgc3dpdGNoIChwcm9maWxlSWRjKSB7XG4gICAgICBjYXNlIDY2OlxuICAgICAgICByZXR1cm4gJ0Jhc2VsaW5lJ1xuICAgICAgY2FzZSA3NzpcbiAgICAgICAgcmV0dXJuICdNYWluJ1xuICAgICAgY2FzZSA4ODpcbiAgICAgICAgcmV0dXJuICdFeHRlbmRlZCdcbiAgICAgIGNhc2UgMTAwOlxuICAgICAgICByZXR1cm4gJ0hpZ2gnXG4gICAgICBjYXNlIDExMDpcbiAgICAgICAgcmV0dXJuICdIaWdoMTAnXG4gICAgICBjYXNlIDEyMjpcbiAgICAgICAgcmV0dXJuICdIaWdoNDIyJ1xuICAgICAgY2FzZSAyNDQ6XG4gICAgICAgIHJldHVybiAnSGlnaDQ0NCdcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnVW5rbm93bidcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0TGV2ZWxTdHJpbmcgKGxldmVsSWRjKSB7XG4gICAgcmV0dXJuIChsZXZlbElkYyAvIDEwKS50b0ZpeGVkKDEpXG4gIH1cblxuICBzdGF0aWMgZ2V0Q2hyb21hRm9ybWF0U3RyaW5nIChjaHJvbWEpIHtcbiAgICBzd2l0Y2ggKGNocm9tYSkge1xuICAgICAgY2FzZSA0MjA6XG4gICAgICAgIHJldHVybiAnNDoyOjAnXG4gICAgICBjYXNlIDQyMjpcbiAgICAgICAgcmV0dXJuICc0OjI6MidcbiAgICAgIGNhc2UgNDQ0OlxuICAgICAgICByZXR1cm4gJzQ6NDo0J1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdVbmtub3duJ1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyB0b1ZpZGVvTWV0YSAoc3BzQ29uZmlnKSB7XG4gICAgbGV0IG1ldGEgPSB7fVxuICAgIGlmIChzcHNDb25maWcgJiYgc3BzQ29uZmlnLmNvZGVjX3NpemUpIHtcbiAgICAgIG1ldGEuY29kZWNXaWR0aCA9IHNwc0NvbmZpZy5jb2RlY19zaXplLndpZHRoXG4gICAgICBtZXRhLmNvZGVjSGVpZ2h0ID0gc3BzQ29uZmlnLmNvZGVjX3NpemUuaGVpZ2h0XG4gICAgICBtZXRhLnByZXNlbnRXaWR0aCA9IHNwc0NvbmZpZy5wcmVzZW50X3NpemUud2lkdGhcbiAgICAgIG1ldGEucHJlc2VudEhlaWdodCA9IHNwc0NvbmZpZy5wcmVzZW50X3NpemUuaGVpZ2h0XG4gICAgfVxuXG4gICAgbWV0YS5wcm9maWxlID0gc3BzQ29uZmlnLnByb2ZpbGVfc3RyaW5nXG4gICAgbWV0YS5sZXZlbCA9IHNwc0NvbmZpZy5sZXZlbF9zdHJpbmdcbiAgICBtZXRhLmJpdERlcHRoID0gc3BzQ29uZmlnLmJpdF9kZXB0aFxuICAgIG1ldGEuY2hyb21hRm9ybWF0ID0gc3BzQ29uZmlnLmNocm9tYV9mb3JtYXRcblxuICAgIG1ldGEucGFyUmF0aW8gPSB7XG4gICAgICB3aWR0aDogc3BzQ29uZmlnLnBhcl9yYXRpby53aWR0aCxcbiAgICAgIGhlaWdodDogc3BzQ29uZmlnLnBhcl9yYXRpby5oZWlnaHRcbiAgICB9XG5cbiAgICBtZXRhLmZyYW1lUmF0ZSA9IHNwc0NvbmZpZy5mcmFtZV9yYXRlXG5cbiAgICBsZXQgZnBzRGVuID0gbWV0YS5mcmFtZVJhdGUuZnBzX2RlblxuICAgIGxldCBmcHNOdW0gPSBtZXRhLmZyYW1lUmF0ZS5mcHNfbnVtXG4gICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IobWV0YS50aW1lc2NhbGUgKiAoZnBzRGVuIC8gZnBzTnVtKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTUFNQYXJzZXJcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBITFNcbiAgTTNVOFBhcnNlcjogcmVxdWlyZSgnLi9zcmMvaGxzL2RlbXV4ZXIvbTN1OHBhcnNlcicpLmRlZmF1bHQsXG4gIFRzRGVtdXhlcjogcmVxdWlyZSgnLi9zcmMvaGxzL2RlbXV4ZXIvdHMnKS5kZWZhdWx0LFxuICBQbGF5bGlzdDogcmVxdWlyZSgnLi9zcmMvaGxzL3BsYXlsaXN0JykuZGVmYXVsdCxcbiAgRmx2RGVtdXhlcjogcmVxdWlyZSgnLi9zcmMvZmx2L2luZGV4JykuZGVmYXVsdFxufTtcbiIsImltcG9ydCB7IGlzTGUsIFVURjggfSBmcm9tICd4Z3BsYXllci11dGlscydcblxuY29uc3QgREFUQV9UWVBFUyA9IHtcbiAgTlVNQkVSOiAwLFxuICBCT09MRUFOOiAxLFxuICBTVFJJTkc6IDIsXG4gIE9CSkVDVDogMyxcbiAgTUlYX0FSUkFZOiA4LFxuICBPQkpFQ1RfRU5EOiA5LFxuICBTVFJJQ1RfQVJSQVk6IDEwLFxuICBEQVRFOiAxMSxcbiAgTE9ORV9TVFJJTkc6IDEyXG59XG5cbi8qKlxuICogbWV0YeS/oeaBr+ino+aekFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBTUZQYXJzZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgdGhpcy5yZWFkT2Zmc2V0ID0gdGhpcy5vZmZzZXRcbiAgfVxuXG4gIHJlc29sdmUgKG1ldGEsIHNpemUpIHtcbiAgICBpZiAoc2l6ZSA8IDMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGVub3VnaCBkYXRhIGZvciBtZXRhaW5mbycpXG4gICAgfVxuICAgIGNvbnN0IG1ldGFEYXRhID0ge31cbiAgICBjb25zdCBuYW1lID0gdGhpcy5wYXJzZVZhbHVlKG1ldGEpXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnBhcnNlVmFsdWUobWV0YSwgc2l6ZSAtIG5hbWUuYm9keVNpemUpXG4gICAgbWV0YURhdGFbbmFtZS5kYXRhXSA9IHZhbHVlLmRhdGFcblxuICAgIHRoaXMucmVzZXRTdGF0dXMoKVxuICAgIHJldHVybiBtZXRhRGF0YVxuICB9XG5cbiAgcmVzZXRTdGF0dXMgKCkge1xuICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgIHRoaXMucmVhZE9mZnNldCA9IHRoaXMub2Zmc2V0XG4gIH1cblxuICBwYXJzZVN0cmluZyAoYnVmZmVyKSB7XG4gICAgY29uc3QgZHYgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQpXG4gICAgY29uc3Qgc3RyTGVuID0gZHYuZ2V0VWludDE2KDAsICFpc0xlKVxuICAgIGxldCBzdHIgPSAnJ1xuICAgIGlmIChzdHJMZW4gPiAwKSB7XG4gICAgICBzdHIgPSBVVEY4LmRlY29kZShuZXcgVWludDhBcnJheShidWZmZXIsIHRoaXMucmVhZE9mZnNldCArIDIsIHN0ckxlbikpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9ICcnXG4gICAgfVxuICAgIGxldCBzaXplID0gc3RyTGVuICsgMlxuICAgIHRoaXMucmVhZE9mZnNldCArPSBzaXplXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHN0cixcbiAgICAgIGJvZHlTaXplOiBzdHJMZW4gKyAyXG4gICAgfVxuICB9XG5cbiAgcGFyc2VEYXRlIChidWZmZXIsIHNpemUpIHtcbiAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhidWZmZXIsIHRoaXMucmVhZE9mZnNldCwgc2l6ZSlcbiAgICBsZXQgdHMgPSBkdi5nZXRGbG9hdDY0KDAsICFpc0xlKVxuICAgIGNvbnN0IHRpbWVPZmZzZXQgPSBkdi5nZXRJbnQxNig4LCAhaXNMZSlcbiAgICB0cyArPSB0aW1lT2Zmc2V0ICogNjAgKiAxMDAwXG5cbiAgICB0aGlzLnJlYWRPZmZzZXQgKz0gMTBcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogbmV3IERhdGUodHMpLFxuICAgICAgYm9keVNpemU6IDEwXG4gICAgfVxuICB9XG5cbiAgcGFyc2VPYmplY3QgKGJ1ZmZlciwgc2l6ZSkge1xuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlciwgc2l6ZSlcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucGFyc2VWYWx1ZShidWZmZXIsIHNpemUgLSBuYW1lLmJvZHlTaXplKVxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIG5hbWU6IG5hbWUuZGF0YSxcbiAgICAgICAgdmFsdWU6IHZhbHVlLmRhdGFcbiAgICAgIH0sXG4gICAgICBib2R5U2l6ZTogbmFtZS5ib2R5U2l6ZSArIHZhbHVlLmJvZHlTaXplLFxuICAgICAgaXNPYmpFbmQ6IHZhbHVlLmlzT2JqRW5kXG4gICAgfVxuICB9XG5cbiAgcGFyc2VMb25nU3RyaW5nIChidWZmZXIpIHtcbiAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhidWZmZXIsIHRoaXMucmVhZE9mZnNldClcbiAgICBjb25zdCBzdHJMZW4gPSBkdi5nZXRVaW50MzIoMCwgIWlzTGUpXG4gICAgbGV0IHN0ciA9ICcnXG4gICAgaWYgKHN0ckxlbiA+IDApIHtcbiAgICAgIHN0ciA9IFVURjguZGVjb2RlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0ICsgMiwgc3RyTGVuKSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gJydcbiAgICB9XG4gICAgLy8gY29uc3Qgc2l6ZSA9IHN0ckxlbiArIDQ7XG4gICAgdGhpcy5yZWFkT2Zmc2V0ICs9IHN0ckxlbiArIDRcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogc3RyLFxuICAgICAgYm9keVNpemU6IHN0ckxlbiArIDRcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6Kej5p6QbWV0YeS4reeahOWPmOmHj1xuICAgKi9cbiAgcGFyc2VWYWx1ZSAoZGF0YSwgc2l6ZSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoKVxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgIGJ1ZmZlciA9IGRhdGFcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmZmVyID0gZGF0YS5idWZmZXJcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgTlVNQkVSLFxuICAgICAgQk9PTEVBTixcbiAgICAgIFNUUklORyxcbiAgICAgIE9CSkVDVCxcbiAgICAgIE1JWF9BUlJBWSxcbiAgICAgIE9CSkVDVF9FTkQsXG4gICAgICBTVFJJQ1RfQVJSQVksXG4gICAgICBEQVRFLFxuICAgICAgTE9ORV9TVFJJTkdcbiAgICB9ID0gREFUQV9UWVBFU1xuICAgIGNvbnN0IGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0LCBzaXplKVxuICAgIGxldCBpc09iakVuZCA9IGZhbHNlXG4gICAgY29uc3QgdHlwZSA9IGRhdGFWaWV3LmdldFVpbnQ4KDApXG4gICAgbGV0IG9mZnNldCA9IDFcbiAgICB0aGlzLnJlYWRPZmZzZXQgKz0gMVxuICAgIGxldCB2YWx1ZSA9IG51bGxcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBOVU1CRVI6IHtcbiAgICAgICAgdmFsdWUgPSBkYXRhVmlldy5nZXRGbG9hdDY0KDEsICFpc0xlKVxuICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gOFxuICAgICAgICBvZmZzZXQgKz0gOFxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSBCT09MRUFOOiB7XG4gICAgICAgIGNvbnN0IGJvb2xOdW0gPSBkYXRhVmlldy5nZXRVaW50OCgxKVxuICAgICAgICB2YWx1ZSA9ICEhYm9vbE51bVxuICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gMVxuICAgICAgICBvZmZzZXQgKz0gMVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSBTVFJJTkc6IHtcbiAgICAgICAgY29uc3Qgc3RyID0gdGhpcy5wYXJzZVN0cmluZyhidWZmZXIpXG4gICAgICAgIHZhbHVlID0gc3RyLmRhdGFcbiAgICAgICAgb2Zmc2V0ICs9IHN0ci5ib2R5U2l6ZVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSBPQkpFQ1Q6IHtcbiAgICAgICAgdmFsdWUgPSB7fVxuICAgICAgICBsZXQgb2JqRW5kU2l6ZSA9IDBcbiAgICAgICAgaWYgKGRhdGFWaWV3LmdldFVpbnQzMihzaXplIC0gNCwgIWlzTGUpICYgMHgwMEZGRkZGRikge1xuICAgICAgICAgIG9iakVuZFNpemUgPSAzXG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcy5yZWFkT2Zmc2V0ICs9IG9mZnNldCAtIDE7XG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCBzaXplIC0gNCkge1xuICAgICAgICAgIGNvbnN0IGFtZk9iaiA9IHRoaXMucGFyc2VPYmplY3QoYnVmZmVyLCBzaXplIC0gb2Zmc2V0IC0gb2JqRW5kU2l6ZSlcbiAgICAgICAgICBpZiAoYW1mT2JqLmlzT2JqZWN0RW5kKSB7IGJyZWFrIH1cbiAgICAgICAgICB2YWx1ZVthbWZPYmouZGF0YS5uYW1lXSA9IGFtZk9iai5kYXRhLnZhbHVlXG4gICAgICAgICAgb2Zmc2V0ICs9IGFtZk9iai5ib2R5U2l6ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgPD0gc2l6ZSAtIDMpIHtcbiAgICAgICAgICBjb25zdCBtYXJrID0gZGF0YVZpZXcuZ2V0VWludDMyKG9mZnNldCAtIDEsICFpc0xlKSAmIDB4MDBGRkZGRkZcbiAgICAgICAgICBpZiAobWFyayA9PT0gOSkge1xuICAgICAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDNcbiAgICAgICAgICAgIG9mZnNldCArPSAzXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIE1JWF9BUlJBWToge1xuICAgICAgICB2YWx1ZSA9IHt9XG4gICAgICAgIG9mZnNldCArPSA0XG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSA0XG4gICAgICAgIGxldCBvYmpFbmRTaXplID0gMFxuICAgICAgICBpZiAoKGRhdGFWaWV3LmdldFVpbnQzMihzaXplIC0gNCwgIWlzTGUpICYgMHgwMEZGRkZGRikgPT09IDkpIHtcbiAgICAgICAgICBvYmpFbmRTaXplID0gM1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IHNpemUgLSA4KSB7XG4gICAgICAgICAgY29uc3QgYW1mVmFyID0gdGhpcy5wYXJzZU9iamVjdChidWZmZXIsIHNpemUgLSBvZmZzZXQgLSBvYmpFbmRTaXplKVxuICAgICAgICAgIGlmIChhbWZWYXIuaXNPYmplY3RFbmQpIHsgYnJlYWsgfVxuICAgICAgICAgIHZhbHVlW2FtZlZhci5kYXRhLm5hbWVdID0gYW1mVmFyLmRhdGEudmFsdWVcbiAgICAgICAgICBvZmZzZXQgKz0gYW1mVmFyLmJvZHlTaXplXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA8PSBzaXplIC0gMykge1xuICAgICAgICAgIGNvbnN0IG1hcmtlciA9IGRhdGFWaWV3LmdldFVpbnQzMihvZmZzZXQgLSAxLCAhaXNMZSkgJiAweDAwRkZGRkZGXG4gICAgICAgICAgaWYgKG1hcmtlciA9PT0gOSkge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDNcbiAgICAgICAgICAgIHRoaXMucmVhZE9mZnNldCArPSAzXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgT0JKRUNUX0VORDoge1xuICAgICAgICB2YWx1ZSA9IG51bGxcbiAgICAgICAgaXNPYmpFbmQgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgU1RSSUNUX0FSUkFZOiB7XG4gICAgICAgIHZhbHVlID0gW11cbiAgICAgICAgY29uc3QgYXJyTGVuZ3RoID0gZGF0YVZpZXcuZ2V0VWludDMyKDEsICFpc0xlKVxuICAgICAgICBvZmZzZXQgKz0gNFxuICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gNFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qgc2NyaXB0ID0gdGhpcy5wYXJzZVZhbHVlKGJ1ZmZlciwgc2l6ZSAtIG9mZnNldClcbiAgICAgICAgICB2YWx1ZS5wdXNoKHNjcmlwdC5kYXRhKVxuICAgICAgICAgIG9mZnNldCArPSBzY3JpcHQuYm9keVNpemVcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlIERBVEU6IHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IHRoaXMucGFyc2VEYXRlKGJ1ZmZlciwgc2l6ZSAtIDEpXG4gICAgICAgIHZhbHVlID0gZGF0ZS5kYXRhXG4gICAgICAgIG9mZnNldCArPSBkYXRlLmJvZHlTaXplXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgTE9ORV9TVFJJTkc6IHtcbiAgICAgICAgY29uc3QgbG9uZ1N0ciA9IHRoaXMucGFyc2VMb25nU3RyaW5nKGJ1ZmZlciwgc2l6ZSAtIDEpXG4gICAgICAgIHZhbHVlID0gbG9uZ1N0ci5kYXRhXG4gICAgICAgIG9mZnNldCArPSBsb25nU3RyLmJvZHlTaXplXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgb2Zmc2V0ID0gc2l6ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiB2YWx1ZSxcbiAgICAgIGJvZHlTaXplOiBvZmZzZXQsXG4gICAgICBpc09iakVuZDogaXNPYmpFbmRcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEVWRU5UUywgQXVkaW9UcmFja01ldGEsIFZpZGVvVHJhY2tNZXRhIH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuaW1wb3J0IHsgU3BzUGFyc2VyIH0gZnJvbSAneGdwbGF5ZXItY29kZWMnO1xuaW1wb3J0IHsgVmlkZW9UcmFjaywgQXVkaW9UcmFjayB9IGZyb20gJ3hncGxheWVyLWJ1ZmZlcidcblxuaW1wb3J0IEFNRlBhcnNlciBmcm9tICcuL2FtZi1wYXJzZXInXG5cbmNvbnN0IERFTVVYX0VWRU5UUyA9IEVWRU5UUy5ERU1VWF9FVkVOVFM7XG5cbmNsYXNzIEZsdkRlbXV4ZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5fZmlyc3RGcmFnbWVudExvYWRlZCA9IGZhbHNlXG4gICAgdGhpcy5fdHJhY2tOdW0gPSAwXG4gICAgdGhpcy5faGFzU2NyaXB0ID0gZmFsc2VcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLkRFTVVYX1NUQVJULCB0aGlzLmRvUGFyc2VGbHYuYmluZCh0aGlzKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBpZiB0aGUgZmx2IGhlYWQgaXMgdmFsaWRcbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNGbHZGaWxlIChkYXRhKSB7XG4gICAgcmV0dXJuICEoZGF0YVswXSAhPT0gMHg0NiB8fCBkYXRhWzFdICE9PSAweDRDIHx8IGRhdGFbMl0gIT09IDB4NTYgfHwgZGF0YVszXSAhPT0gMHgwMSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUgc3RyZWFtIGhhcyBhdWRpbyBvciB2aWRlby5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0cmVhbUZsYWcgLSBEYXRhIGZyb20gdGhlIHN0cmVhbSB3aGljaCBpcyBkZWZpbmUgd2hldGhlciB0aGUgYXVkaW8gLyB2aWRlbyB0cmFjayBpcyBleGlzdC5cbiAgICovXG4gIHN0YXRpYyBnZXRQbGF5VHlwZSAoc3RyZWFtRmxhZykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIGhhc1ZpZGVvOiBmYWxzZSxcbiAgICAgIGhhc0F1ZGlvOiBmYWxzZVxuICAgIH1cblxuICAgIGlmIChzdHJlYW1GbGFnICYgMHgwMSA+IDApIHtcbiAgICAgIHJlc3VsdC5oYXNWaWRlbyA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoc3RyZWFtRmxhZyAmIDB4MDQgPiAwKSB7XG4gICAgICByZXN1bHQuaGFzQXVkaW8gPSB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgZG9QYXJzZUZsdiAoKSB7XG4gICAgaWYgKCF0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkKSB7XG4gICAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoIDwgMTMpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjb25zdCBoZWFkZXIgPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxMylcbiAgICAgIHRoaXMucGFyc2VGbHZIZWFkZXIoaGVhZGVyKVxuICAgICAgdGhpcy5kb1BhcnNlRmx2KCkgLy8g6YCS5b2S6LCD55So77yM57un57ut6Kej5p6QZmx25rWBXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPCAxMSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGxldCBjaHVuaztcblxuICAgICAgbGV0IGxvb3BNYXggPSAxMDAwMDAgLy8g6Ziy5q2i5q275b6q546v5Lqn55SfXG4gICAgICBkbyB7XG4gICAgICAgIGNodW5rID0gdGhpcy5fcGFyc2VGbHZUYWcoKVxuICAgICAgfSB3aGlsZSAoY2h1bmsgJiYgbG9vcE1heC0tID4gMClcblxuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSlcbiAgICB9XG4gIH1cblxuICBwYXJzZUZsdkhlYWRlciAoaGVhZGVyKSB7XG4gICAgaWYgKCFGbHZEZW11eGVyLmlzRmx2RmlsZShoZWFkZXIpKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBuZXcgRXJyb3IoJ2ludmFsaWQgZmx2IGZpbGUnKSlcbiAgICAgIHRoaXMuZG9QYXJzZUZsdigpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2ZpcnN0RnJhZ21lbnRMb2FkZWQgPSB0cnVlXG4gICAgICBjb25zdCBwbGF5VHlwZSA9IEZsdkRlbXV4ZXIuZ2V0UGxheVR5cGUoaGVhZGVyWzRdKVxuXG4gICAgICBpZiAocGxheVR5cGUuaGFzVmlkZW8pIHtcbiAgICAgICAgdGhpcy5pbml0VmlkZW9UcmFjaygpXG4gICAgICB9XG5cbiAgICAgIGlmIChwbGF5VHlwZS5oYXNBdWRpbykge1xuICAgICAgICB0aGlzLmluaXRBdWRpb1RyYWNrKClcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5kb1BhcnNlRmx2KClcbiAgfVxuXG4gIC8qKlxuICAgKiBpbml0IGRlZmF1bHQgdmlkZW8gdHJhY2sgY29uZmlnc1xuICAgKi9cbiAgaW5pdFZpZGVvVHJhY2sgKCkge1xuICAgIHRoaXMuX3RyYWNrTnVtKytcbiAgICBsZXQgdmlkZW9UcmFjayA9IG5ldyBWaWRlb1RyYWNrKClcbiAgICB2aWRlb1RyYWNrLm1ldGEgPSBuZXcgVmlkZW9UcmFja01ldGEoKVxuICAgIHZpZGVvVHJhY2suaWQgPSB2aWRlb1RyYWNrLm1ldGEuaWQgPSB0aGlzLl90cmFja051bVxuXG4gICAgdGhpcy50cmFja3MudmlkZW9UcmFjayA9IHZpZGVvVHJhY2tcbiAgfVxuXG4gIC8qKlxuICAgKiBpbml0IGRlZmF1bHQgYXVkaW8gdHJhY2sgY29uZmlnc1xuICAgKi9cbiAgaW5pdEF1ZGlvVHJhY2sgKCkge1xuICAgIHRoaXMuX3RyYWNrTnVtKytcbiAgICBsZXQgYXVkaW9UcmFjayA9IG5ldyBBdWRpb1RyYWNrKClcbiAgICBhdWRpb1RyYWNrLm1ldGEgPSBuZXcgQXVkaW9UcmFja01ldGEoKVxuICAgIGF1ZGlvVHJhY2suaWQgPSBhdWRpb1RyYWNrLm1ldGEuaWQgPSB0aGlzLl90cmFja051bVxuXG4gICAgdGhpcy50cmFja3MuYXVkaW9UcmFjayA9IGF1ZGlvVHJhY2tcbiAgfVxuXG4gIC8qKlxuICAgKiBQYWNrYWdlIHRoZSBkYXRhIGFzIHRoZSBmb2xsb3dpbmcgZGF0YSBzdHJ1Y3R1cmVcbiAgICoge1xuICAgKiAgICBkYXRhOiBVaW50OEFycmF5LiB0aGUgU3RyZWFtIGRhdGEuXG4gICAqICAgIGluZm86IFRoZSBmaXJzdCBieXRlIGluZm8gb2YgdGhlIFRhZy5cbiAgICogICAgdGFnVHlwZTogOOOAgTnjgIExOFxuICAgKiAgICB0aW1lU3RhbXA6IHRoZSB0aW1lc3RlbXBcbiAgICogfVxuICAgKi9cbiAgX3BhcnNlRmx2VGFnICgpIHtcbiAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoIDwgMTEpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIGxldCBjaHVuayA9IHRoaXMuX3BhcnNlRmx2VGFnSGVhZGVyKClcbiAgICBpZiAoY2h1bmspIHtcbiAgICAgIHRoaXMuX3Byb2Nlc3NDaHVuayhjaHVuaylcbiAgICB9XG4gICAgcmV0dXJuIGNodW5rXG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgdGhlIDExIGJ5dGUgdGFnIEhlYWRlclxuICAgKi9cbiAgX3BhcnNlRmx2VGFnSGVhZGVyICgpIHtcbiAgICBsZXQgb2Zmc2V0ID0gMFxuICAgIGxldCBjaHVuayA9IHt9XG5cbiAgICBsZXQgdGFnVHlwZSA9IHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KG9mZnNldCwgMSlcbiAgICBvZmZzZXQgKz0gMVxuXG4gICAgLy8gMiBiaXQgRk1TIHJlc2VydmVkLCAxIGJpdCBmaWx0ZXJlZCwgNSBiaXQgdGFnIHR5cGVcbiAgICBjaHVuay5maWx0ZXJlZCA9ICh0YWdUeXBlICYgMzIpID4+PiA1XG4gICAgY2h1bmsudGFnVHlwZSA9IHRhZ1R5cGUgJiAzMVxuXG4gICAgLy8gMyBCeXRlIGRhdGFzaXplXG4gICAgY2h1bmsuZGF0YXNpemUgPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludChvZmZzZXQsIDMpXG4gICAgb2Zmc2V0ICs9IDNcblxuICAgIGlmICgoY2h1bmsudGFnVHlwZSAhPT0gOCAmJiBjaHVuay50YWdUeXBlICE9PSA5ICYmIGNodW5rLnRhZ1R5cGUgIT09IDExICYmIGNodW5rLnRhZ1R5cGUgIT09IDE4KSB8fFxuICAgICAgdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoOCwgMykgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlciAmJiB0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpXG4gICAgICB9XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKCd0YWdUeXBlICcgKyBjaHVuay50YWdUeXBlKSwgZmFsc2UpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPCBjaHVuay5kYXRhc2l6ZSArIDE1KSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIHJlYWQgdGhlIGRhdGEuXG4gICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoNClcblxuICAgIC8vIDMgQnl0ZSB0aW1lc3RhbXBcbiAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwgMylcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuXG4gICAgLy8gMSBCeXRlIHRpbWVzdGFtcEV4dFxuICAgIGxldCB0aW1lc3RhbXBFeHQgPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXVxuICAgIGlmICh0aW1lc3RhbXBFeHQgPiAwKSB7XG4gICAgICB0aW1lc3RhbXAgKz0gdGltZXN0YW1wRXh0ICogMHgxMDAwMDAwXG4gICAgfVxuXG4gICAgY2h1bmsuZHRzID0gdGltZXN0YW1wXG5cbiAgICAvLyBzdHJlYW1JZFxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDMpXG4gICAgcmV0dXJuIGNodW5rXG4gIH1cblxuICBfcHJvY2Vzc0NodW5rIChjaHVuaykge1xuICAgIHN3aXRjaCAoY2h1bmsudGFnVHlwZSkge1xuICAgICAgY2FzZSAxODpcbiAgICAgICAgdGhpcy5fcGFyc2VTY3JpcHREYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSA4OlxuICAgICAgICB0aGlzLl9wYXJzZUFBQ0RhdGEoY2h1bmspXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDk6XG4gICAgICAgIHRoaXMuX3BhcnNlSGV2Y0RhdGEoY2h1bmspXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDExOlxuICAgICAgICAvLyBmb3Igc29tZSBDRE4gdGhhdCBkaWQgbm90IHByb2Nlc3MgdGhlIGN1cnJlY3QgUlRNUCBtZXNzYWdlc1xuICAgICAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgZmx2IHNjcmlwdCBkYXRhXG4gICAqIEBwYXJhbSBjaHVua1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhcnNlU2NyaXB0RGF0YSAoY2h1bmspIHtcbiAgICBsZXQgYXVkaW9UcmFjayA9IHRoaXMudHJhY2tzLmF1ZGlvVHJhY2tcbiAgICBsZXQgdmlkZW9UcmFjayA9IHRoaXMudHJhY2tzLnZpZGVvVHJhY2tcblxuICAgIGxldCBkYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUpXG5cbiAgICBjb25zdCBpbmZvID0gbmV3IEFNRlBhcnNlcigpLnJlc29sdmUoZGF0YSwgZGF0YS5sZW5ndGgpXG5cbiAgICBjb25zdCBvbk1ldGFEYXRhID0gdGhpcy5fY29udGV4dC5vbk1ldGFEYXRhID0gaW5mbyA/IGluZm8ub25NZXRhRGF0YSA6IHVuZGVmaW5lZFxuXG4gICAgLy8gZmlsbCBtZWRpYUluZm9cbiAgICB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5kdXJhdGlvbiA9IG9uTWV0YURhdGEuZHVyYXRpb25cbiAgICB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5oYXNWaWRlbyA9IG9uTWV0YURhdGEuaGFzVmlkZW9cbiAgICB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5oc2FBdWRpbyA9IG9uTWV0YURhdGEuaGFzQXVkaW9cblxuICAgIGxldCB2YWxpZGF0ZSA9IHRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKVxuICAgIGlmICh2YWxpZGF0ZSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRURJQV9JTkZPKVxuICAgICAgdGhpcy5faGFzU2NyaXB0ID0gdHJ1ZVxuICAgIH1cblxuICAgIC8vIEVkaXQgZGVmYXVsdCBtZXRhLlxuICAgIGlmIChhdWRpb1RyYWNrICYmICFhdWRpb1RyYWNrLmhhc1NwZWNpZmljQ29uZmlnKSB7XG4gICAgICBsZXQgbWV0YSA9IGF1ZGlvVHJhY2subWV0YVxuICAgICAgaWYgKG9uTWV0YURhdGEuYXVkaW9zYW1wbGVyYXRlKSB7XG4gICAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IG9uTWV0YURhdGEuYXVkaW9zYW1wbGVyYXRlXG4gICAgICB9XG5cbiAgICAgIGlmIChvbk1ldGFEYXRhLmF1ZGlvY2hhbm5lbHMpIHtcbiAgICAgICAgbWV0YS5jaGFubmVsQ291bnQgPSBvbk1ldGFEYXRhLmF1ZGlvY2hhbm5lbHNcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZSkge1xuICAgICAgICBjYXNlIDQ0MTAwOlxuICAgICAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gNFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjIwNTA6XG4gICAgICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSA3XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxMTAyNTpcbiAgICAgICAgICBtZXRhLnNhbXBsZVJhdGVJbmRleCA9IDEwXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZpZGVvVHJhY2sgJiYgIXZpZGVvVHJhY2suaGFzU3BlY2lmaWNDb25maWcpIHtcbiAgICAgIGxldCBtZXRhID0gdmlkZW9UcmFjay5tZXRhXG4gICAgICBpZiAodHlwZW9mIG9uTWV0YURhdGEuZnJhbWVyYXRlID09PSAnbnVtYmVyJykge1xuICAgICAgICBsZXQgZnBzTnVtID0gTWF0aC5mbG9vcihvbk1ldGFEYXRhLmZyYW1lcmF0ZSAqIDEwMDApXG4gICAgICAgIGlmIChmcHNOdW0gPiAwKSB7XG4gICAgICAgICAgbGV0IGZwcyA9IGZwc051bSAvIDEwMDBcbiAgICAgICAgICBpZiAoIW1ldGEuZnJhbWVSYXRlKSB7XG4gICAgICAgICAgICBtZXRhLmZyYW1lUmF0ZSA9IHt9XG4gICAgICAgICAgfVxuICAgICAgICAgIG1ldGEuZnJhbWVSYXRlLmZpeGVkID0gdHJ1ZVxuICAgICAgICAgIG1ldGEuZnJhbWVSYXRlLmZwcyA9IGZwc1xuICAgICAgICAgIG1ldGEuZnJhbWVSYXRlLmZwc19udW0gPSBmcHNOdW1cbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHNfZGVuID0gMTAwMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2FhY1NlcXVlbmNlSGVhZGVyUGFyc2VyIChkYXRhKSB7XG4gICAgbGV0IHJldCA9IHt9XG4gICAgcmV0Lmhhc1NwZWNpZmljQ29uZmlnID0gdHJ1ZVxuICAgIHJldC5vYmplY3RUeXBlID0gZGF0YVsxXSA+Pj4gM1xuICAgIHJldC5zYW1wbGVSYXRlSW5kZXggPSAoKGRhdGFbMV0gJiA3KSA8PCAxKSB8IChkYXRhWzJdID4+PiA3KVxuICAgIHJldC5hdWRpb3NhbXBsZXJhdGUgPSB0aGlzLl9zd2l0Y2hBdWRpb1NhbXBsZVJhdGUocmV0LnNhbXBsZVJhdGVJbmRleClcbiAgICByZXQuY2hhbm5lbENvdW50ID0gKGRhdGFbMl0gJiAxMjApID4+PiAzXG4gICAgcmV0LmZyYW1lTGVuZ3RoID0gKGRhdGFbMl0gJiA0KSA+Pj4gMlxuICAgIHJldC5kZXBlbmRzT25Db3JlQ29kZXIgPSAoZGF0YVsyXSAmIDIpID4+PiAxXG4gICAgcmV0LmV4dGVuc2lvbkZsYWdJbmRleCA9IGRhdGFbMl0gJiAxXG5cbiAgICByZXQuY29kZWMgPSBgbXA0YS40MC4ke3JldC5vYmplY3RUeXBlfWBcbiAgICBsZXQgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBsZXQgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleDtcblxuICAgIGxldCBjb25maWc7XG4gICAgbGV0IHNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4O1xuXG4gICAgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdmaXJlZm94JykgIT09IC0xKSB7XG4gICAgICAvLyBmaXJlZm94OiB1c2UgU0JSIChIRS1BQUMpIGlmIGZyZXEgbGVzcyB0aGFuIDI0a0h6XG4gICAgICBpZiAocmV0LnNhbXBsZVJhdGVJbmRleCA+PSA2KSB7XG4gICAgICAgIHJldC5vYmplY3RUeXBlID0gNTtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdJbmRleCAtIDM7XG4gICAgICB9IGVsc2UgeyAvLyB1c2UgTEMtQUFDXG4gICAgICAgIHJldC5vYmplY3RUeXBlID0gMjtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdJbmRleDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdhbmRyb2lkJykgIT09IC0xKSB7XG4gICAgICAvLyBhbmRyb2lkOiBhbHdheXMgdXNlIExDLUFBQ1xuICAgICAgcmV0Lm9iamVjdFR5cGUgPSAyO1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBvdGhlciBicm93c2VycywgZS5nLiBjaHJvbWUuLi5cbiAgICAgIC8vIEFsd2F5cyB1c2UgSEUtQUFDIHRvIG1ha2UgaXQgZWFzaWVyIHRvIHN3aXRjaCBhYWMgY29kZWMgcHJvZmlsZVxuICAgICAgcmV0Lm9iamVjdFR5cGUgPSA1O1xuICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXg7XG4gICAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7XG5cbiAgICAgIGlmIChyZXQuc2FtcGxlUmF0ZUluZGV4ID49IDYpIHtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIGlmIChyZXQuY2hhbm5lbENvdW50ID09PSAxKSB7IC8vIE1vbm8gY2hhbm5lbFxuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDI7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uZmlnWzBdID0gcmV0Lm9iamVjdFR5cGUgPDwgMztcbiAgICBjb25maWdbMF0gfD0gKHJldC5zYW1wbGVSYXRlSW5kZXggJiAweDBGKSA+Pj4gMTtcbiAgICBjb25maWdbMV0gPSAocmV0LnNhbXBsZVJhdGVJbmRleCAmIDB4MEYpIDw8IDc7XG4gICAgY29uZmlnWzFdIHw9IChyZXQuY2hhbm5lbENvdW50ICYgMHgwRikgPDwgMztcbiAgICBpZiAocmV0Lm9iamVjdFR5cGUgPT09IDUpIHtcbiAgICAgIGNvbmZpZ1sxXSB8PSAoKGV4dGVuc2lvblNhbXBsaW5nSW5kZXggJiAweDBGKSA+Pj4gMSk7XG4gICAgICBjb25maWdbMl0gPSAoZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCAmIDB4MDEpIDw8IDc7XG4gICAgICAvLyBleHRlbmRlZCBhdWRpbyBvYmplY3QgdHlwZTogZm9yY2UgdG8gMiAoTEMtQUFDKVxuICAgICAgY29uZmlnWzJdIHw9ICgyIDw8IDIpO1xuICAgICAgY29uZmlnWzNdID0gMDtcbiAgICB9XG4gICAgcmV0LmNvbmZpZyA9IGNvbmZpZ1xuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIF9wYXJzZUFBQ0RhdGEgKGNodW5rKSB7XG4gICAgbGV0IHRyYWNrID0gdGhpcy50cmFja3MuYXVkaW9UcmFja1xuICAgIGlmICghdHJhY2spIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBtZXRhID0gdHJhY2subWV0YVxuXG4gICAgaWYgKCFtZXRhKSB7XG4gICAgICB0cmFjay5tZXRhID0gbmV3IEF1ZGlvVHJhY2tNZXRhKClcbiAgICAgIG1ldGEgPSB0cmFjay5tZXRhO1xuICAgIH1cblxuICAgIGxldCBpbmZvID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cblxuICAgIGNodW5rLmRhdGEgPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdChjaHVuay5kYXRhc2l6ZSAtIDEpXG5cbiAgICBsZXQgZm9ybWF0ID0gKGluZm8gJiAyNDApID4+PiA0XG5cbiAgICB0cmFjay5mb3JtYXQgPSBmb3JtYXRcblxuICAgIGlmIChmb3JtYXQgIT09IDEwKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBuZXcgRXJyb3IoYGludmFsaWQgYXVkaW8gZm9ybWF0OiAke2Zvcm1hdH1gKSlcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0ID09PSAxMCAmJiAhdGhpcy5faGFzQXVkaW9TZXF1ZW5jZSkge1xuICAgICAgbWV0YS5zYW1wbGVSYXRlID0gdGhpcy5fc3dpdGNoQXVkaW9TYW1wbGluZ0ZyZXF1ZW5jeShpbmZvKVxuICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSAoaW5mbyAmIDEyKSA+Pj4gMlxuICAgICAgbWV0YS5mcmFtZUxlbnRoID0gKGluZm8gJiAyKSA+Pj4gMVxuICAgICAgbWV0YS5jaGFubmVsQ291bnQgPSBpbmZvICYgMVxuICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IoMTAyNCAvIG1ldGEuYXVkaW9TYW1wbGVSYXRlICogbWV0YS50aW1lc2NhbGUpXG4gICAgfVxuXG4gICAgbGV0IGF1ZGlvU2FtcGxlUmF0ZSA9IG1ldGEuYXVkaW9TYW1wbGVSYXRlXG4gICAgbGV0IGF1ZGlvU2FtcGxlUmF0ZUluZGV4ID0gbWV0YS5zYW1wbGVSYXRlSW5kZXhcbiAgICBsZXQgcmVmU2FtcGxlRHVyYXRpb24gPSBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG5cbiAgICBkZWxldGUgY2h1bmsudGFnVHlwZVxuICAgIGxldCB2YWxpZGF0ZSA9IHRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKVxuXG4gICAgaWYgKGNodW5rLmRhdGFbMF0gPT09IDApIHsgLy8gQUFDIFNlcXVlbmNlIEhlYWRlclxuICAgICAgbGV0IGFhY0hlYWRlciA9IHRoaXMuX2FhY1NlcXVlbmNlSGVhZGVyUGFyc2VyKGNodW5rLmRhdGEpXG4gICAgICBhdWRpb1NhbXBsZVJhdGUgPSBhYWNIZWFkZXIuYXVkaW9zYW1wbGVyYXRlIHx8IG1ldGEuYXVkaW9TYW1wbGVSYXRlXG4gICAgICBhdWRpb1NhbXBsZVJhdGVJbmRleCA9IGFhY0hlYWRlci5zYW1wbGVSYXRlSW5kZXggfHwgbWV0YS5zYW1wbGVSYXRlSW5kZXhcbiAgICAgIHJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcigxMDI0IC8gYXVkaW9TYW1wbGVSYXRlICogbWV0YS50aW1lc2NhbGUpXG5cbiAgICAgIG1ldGEuY2hhbm5lbENvdW50ID0gYWFjSGVhZGVyLmNoYW5uZWxDb3VudFxuICAgICAgbWV0YS5zYW1wbGVSYXRlID0gYXVkaW9TYW1wbGVSYXRlXG4gICAgICBtZXRhLnNhbXBsZVJhdGVJbmRleCA9IGF1ZGlvU2FtcGxlUmF0ZUluZGV4XG4gICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gcmVmU2FtcGxlRHVyYXRpb25cbiAgICAgIG1ldGEuZHVyYXRpb24gPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5kdXJhdGlvbiAqIG1ldGEudGltZXNjYWxlXG4gICAgICBtZXRhLmNvbmZpZyA9IGFhY0hlYWRlci5jb25maWdcblxuICAgICAgY29uc3QgYXVkaW9NZWRpYSA9IHRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmF1ZGlvXG5cbiAgICAgIC8vIGZpbGwgYXVkaW8gbWVkaWEgaW5mb1xuICAgICAgYXVkaW9NZWRpYS5jb2RlYyA9IGFhY0hlYWRlci5jb2RlY1xuICAgICAgYXVkaW9NZWRpYS5jaGFubmVsQ291bnQgPSBhYWNIZWFkZXIuY2hhbm5lbENvdW50XG4gICAgICBhdWRpb01lZGlhLnNhbXBsZVJhdGUgPSBhdWRpb1NhbXBsZVJhdGVcbiAgICAgIGF1ZGlvTWVkaWEuc2FtcGxlUmF0ZUluZGV4ID0gYWFjSGVhZGVyLmF1ZGlvU2FtcGxlUmF0ZUluZGV4XG5cbiAgICAgIGlmICh0aGlzLl9oYXNTY3JpcHQgJiYgIXRoaXMuX2hhc0F1ZGlvU2VxdWVuY2UpIHtcbiAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICdhdWRpbycpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2hhc1NjcmlwdCAmJiB0aGlzLl9oYXNBdWRpb1NlcXVlbmNlKSB7XG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuQVVESU9fTUVUQURBVEFfQ0hBTkdFKVxuICAgICAgICAvLyB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ2F1ZGlvJylcbiAgICAgIH1cbiAgICAgIHRoaXMuX2hhc0F1ZGlvU2VxdWVuY2UgPSB0cnVlXG5cbiAgICAgIHRoaXMuX21ldGFDaGFuZ2UgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9tZXRhQ2hhbmdlKSB7XG4gICAgICAgIGNodW5rLm9wdGlvbnMgPSB7XG4gICAgICAgICAgbWV0YTogdHJhY2subWV0YVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9tZXRhQ2hhbmdlID0gZmFsc2VcbiAgICAgIH1cblxuICAgICAgY2h1bmsuZGF0YSA9IGNodW5rLmRhdGEuc2xpY2UoMSwgY2h1bmsuZGF0YS5sZW5ndGgpXG4gICAgICB0cmFjay5zYW1wbGVzLnB1c2goY2h1bmspXG4gICAgfVxuICAgIGlmICghdmFsaWRhdGUpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIHRoaXMuVEFHLCBuZXcgRXJyb3IoJ1RBRyBsZW5ndGggZXJyb3IgYXQgJyArIGNodW5rLmRhdGFzaXplKSwgZmFsc2UpXG4gICAgICAvLyB0aGlzLmxvZ2dlci53YXJuKHRoaXMuVEFHLCBlcnJvci5tZXNzYWdlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBwYXJzZSBoZXZjL2F2YyB2aWRlbyBkYXRhXG4gICAqIEBwYXJhbSBjaHVua1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhcnNlSGV2Y0RhdGEgKGNodW5rKSB7XG4gICAgLy8gaGVhZGVyXG4gICAgbGV0IGluZm8gPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXVxuICAgIGNodW5rLmZyYW1lVHlwZSA9IChpbmZvICYgMHhmMCkgPj4+IDRcbiAgICBjaHVuay5pc0tleWZyYW1lID0gY2h1bmsuZnJhbWVUeXBlID09PSAxXG4gICAgLy8gbGV0IHRlbXBDb2RlY0lEID0gdGhpcy50cmFja3MudmlkZW9UcmFjay5jb2RlY0lEXG4gICAgbGV0IGNvZGVjSUQgPSBpbmZvICYgMHgwZlxuICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2suY29kZWNJRCA9IGNvZGVjSURcblxuICAgIC8vIGhldmPlkoxhdmPnmoRoZWFkZXLop6PmnpDmlrnlvI/kuIDmoLdcbiAgICBjaHVuay5hdmNQYWNrZXRUeXBlID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBjaHVuay5jdHMgPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludCgwLCAzKVxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDMpXG5cbiAgICAvLyAxMiBmb3IgaGV2YywgNyBmb3IgYXZjXG4gICAgaWYgKGNvZGVjSUQgPT09IDEyKSB7XG4gICAgICBjb25zdCBkYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSA1KVxuICAgICAgY2h1bmsuZGF0YSA9IGRhdGFcblxuICAgICAgaWYgKE51bWJlci5wYXJzZUludChjaHVuay5hdmNQYWNrZXRUeXBlKSAhPT0gMCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKSkge1xuICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIHRoaXMuVEFHLCBuZXcgRXJyb3IoYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2NodW5rLmRhdGFzaXplfWApLCBmYWxzZSlcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmFsdSA9IHt9XG4gICAgICAgIGxldCByID0gMFxuICAgICAgICBuYWx1LmN0cyA9IGNodW5rLmN0c1xuICAgICAgICBuYWx1LmR0cyA9IGNodW5rLmR0c1xuICAgICAgICB3aGlsZSAoY2h1bmsuZGF0YS5sZW5ndGggPiByKSB7XG4gICAgICAgICAgbGV0IHNpemVzID0gY2h1bmsuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQociksIDQgKyByKVxuICAgICAgICAgIG5hbHUuc2l6ZSA9IHNpemVzWzNdXG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzJdICogMjU2XG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzFdICogMjU2ICogMjU2XG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzBdICogMjU2ICogMjU2ICogMjU2XG4gICAgICAgICAgciArPSA0XG4gICAgICAgICAgbmFsdS5kYXRhID0gY2h1bmsuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQociksIG5hbHUuc2l6ZSArIHIpXG4gICAgICAgICAgciArPSBuYWx1LnNpemVcbiAgICAgICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChuYWx1KVxuICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKE51bWJlci5wYXJzZUludChjaHVuay5hdmNQYWNrZXRUeXBlKSA9PT0gMCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKSkge1xuICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIHRoaXMuVEFHLCBuZXcgRXJyb3IoYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2NodW5rLmRhdGFzaXplfWApLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ3ZpZGVvJylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29kZWNJRCA9PT0gNykge1xuICAgICAgbGV0IGRhdGEgPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdChjaHVuay5kYXRhc2l6ZSAtIDUpXG4gICAgICBpZiAoZGF0YVs0XSA9PT0gMCAmJiBkYXRhWzVdID09PSAwICYmIGRhdGFbNl0gPT09IDAgJiYgZGF0YVs3XSA9PT0gMSkge1xuICAgICAgICBsZXQgYXZjY2xlbmd0aCA9IDBcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICBhdmNjbGVuZ3RoID0gYXZjY2xlbmd0aCAqIDI1NiArIGRhdGFbaV1cbiAgICAgICAgfVxuICAgICAgICBhdmNjbGVuZ3RoIC09IDRcbiAgICAgICAgZGF0YSA9IGRhdGEuc2xpY2UoNCwgZGF0YS5sZW5ndGgpXG4gICAgICAgIGRhdGFbM10gPSBhdmNjbGVuZ3RoICUgMjU2XG4gICAgICAgIGF2Y2NsZW5ndGggPSAoYXZjY2xlbmd0aCAtIGRhdGFbM10pIC8gMjU2XG4gICAgICAgIGRhdGFbMl0gPSBhdmNjbGVuZ3RoICUgMjU2XG4gICAgICAgIGF2Y2NsZW5ndGggPSAoYXZjY2xlbmd0aCAtIGRhdGFbMl0pIC8gMjU2XG4gICAgICAgIGRhdGFbMV0gPSBhdmNjbGVuZ3RoICUgMjU2XG4gICAgICAgIGRhdGFbMF0gPSAoYXZjY2xlbmd0aCAtIGRhdGFbMV0pIC8gMjU2XG4gICAgICB9XG5cbiAgICAgIGNodW5rLmRhdGEgPSBkYXRhXG4gICAgICAvLyBJZiBpdCBpcyBBVkMgc2VxdWVjZSBIZWFkZXIuXG4gICAgICBpZiAoY2h1bmsuYXZjUGFja2V0VHlwZSA9PT0gMCkge1xuICAgICAgICB0aGlzLl9hdmNTZXF1ZW5jZUhlYWRlclBhcnNlcihjaHVuay5kYXRhKVxuICAgICAgICBsZXQgdmFsaWRhdGUgPSB0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSlcbiAgICAgICAgaWYgKHZhbGlkYXRlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2hhc1NjcmlwdCAmJiAhdGhpcy5faGFzVmlkZW9TZXF1ZW5jZSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpXG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9oYXNTY3JpcHQgJiYgdGhpcy5faGFzVmlkZW9TZXF1ZW5jZSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5WSURFT19NRVRBREFUQV9DSEFOR0UpXG4gICAgICAgICAgICAvLyB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ3ZpZGVvJylcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5faGFzVmlkZW9TZXF1ZW5jZSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tZXRhQ2hhbmdlID0gdHJ1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKSwgZmFsc2UpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9tZXRhQ2hhbmdlKSB7XG4gICAgICAgICAgY2h1bmsub3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1ldGE6IE9iamVjdC5hc3NpZ24oe30sIHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fbWV0YUNoYW5nZSA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmFja3MudmlkZW9UcmFjay5zYW1wbGVzLnB1c2goY2h1bmspXG4gICAgICAgIC8vIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIHRoaXMuVEFHLCBuZXcgRXJyb3IoYHZpZGVvIGNvZGVpZCBpcyAke2NvZGVjSUR9YCksIGZhbHNlKVxuICAgICAgY2h1bmsuZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gMSlcbiAgICAgIGlmICghdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoY2h1bmsuZGF0YXNpemUpKSB7XG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIHRoaXMuVEFHLCBuZXcgRXJyb3IoYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2NodW5rLmRhdGFzaXplfWApLCBmYWxzZSlcbiAgICAgIH1cbiAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2suc2FtcGxlcy5wdXNoKGNodW5rKVxuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSlcbiAgICB9XG4gICAgZGVsZXRlIGNodW5rLnRhZ1R5cGVcbiAgfVxuXG4gIC8qKlxuICAgKiBwYXJzZSBhdmMgbWV0YWRhdGFcbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hdmNTZXF1ZW5jZUhlYWRlclBhcnNlciAoZGF0YSkge1xuICAgIGxldCB0cmFjayA9IHRoaXMudHJhY2tzLnZpZGVvVHJhY2tcblxuICAgIGlmICghdHJhY2spIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBvZmZzZXQgPSAwXG5cbiAgICBpZiAoIXRyYWNrLm1ldGEpIHtcbiAgICAgIHRyYWNrLm1ldGEgPSBuZXcgVmlkZW9UcmFja01ldGEoKVxuICAgIH1cbiAgICBsZXQgbWV0YSA9IHRyYWNrLm1ldGFcblxuICAgIG1ldGEuY29uZmlndXJhdGlvblZlcnNpb24gPSBkYXRhWzBdXG4gICAgbWV0YS5hdmNQcm9maWxlSW5kaWNhdGlvbiA9IGRhdGFbMV1cbiAgICBtZXRhLnByb2ZpbGVDb21wYXRpYmlsaXR5ID0gZGF0YVsyXVxuICAgIG1ldGEuYXZjTGV2ZWxJbmRpY2F0aW9uID0gZGF0YVszXSAvIDEwXG4gICAgbWV0YS5uYWxVbml0TGVuZ3RoID0gKGRhdGFbNF0gJiAweDAzKSArIDFcblxuICAgIGxldCBudW1PZlNwcyA9IGRhdGFbNV0gJiAweDFmXG4gICAgb2Zmc2V0ID0gNlxuICAgIGxldCBjb25maWcgPSB7fVxuXG4gICAgLy8gcGFyc2UgU1BTXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PZlNwczsgaSsrKSB7XG4gICAgICBsZXQgc2l6ZSA9IGRhdGFbb2Zmc2V0XSAqIDI1NSArIGRhdGFbb2Zmc2V0ICsgMV1cbiAgICAgIG9mZnNldCArPSAyXG5cbiAgICAgIGxldCBzcHMgPSBuZXcgVWludDhBcnJheShzaXplKVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcbiAgICAgICAgc3BzW2pdID0gZGF0YVtvZmZzZXQgKyBqXVxuICAgICAgfVxuXG4gICAgICAvLyBjb2RlYyBzdHJpbmdcbiAgICAgIGxldCBjb2RlY1N0cmluZyA9ICdhdmMxLidcbiAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgNDsgaisrKSB7XG4gICAgICAgIGxldCBoID0gc3BzW2pdLnRvU3RyaW5nKDE2KVxuICAgICAgICBpZiAoaC5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgaCA9ICcwJyArIGhcbiAgICAgICAgfVxuICAgICAgICBjb2RlY1N0cmluZyArPSBoXG4gICAgICB9XG5cbiAgICAgIG1ldGEuY29kZWMgPSBjb2RlY1N0cmluZ1xuXG4gICAgICBvZmZzZXQgKz0gc2l6ZVxuICAgICAgdGhpcy50cmFja3MudmlkZW9UcmFjay5tZXRhLnNwcyA9IHNwc1xuICAgICAgY29uZmlnID0gU3BzUGFyc2VyLnBhcnNlU1BTKHNwcylcbiAgICB9XG5cbiAgICBsZXQgbnVtT2ZQcHMgPSBkYXRhW29mZnNldF1cblxuICAgIG9mZnNldCsrXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU9mUHBzOyBpKyspIHtcbiAgICAgIGxldCBzaXplID0gZGF0YVtvZmZzZXRdICogMjU1ICsgZGF0YVtvZmZzZXQgKyAxXVxuICAgICAgb2Zmc2V0ICs9IDJcbiAgICAgIGxldCBwcHMgPSBuZXcgVWludDhBcnJheShzaXplKVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcbiAgICAgICAgcHBzW2pdID0gZGF0YVtvZmZzZXQgKyBqXVxuICAgICAgfVxuICAgICAgb2Zmc2V0ICs9IHNpemVcbiAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YS5wcHMgPSBwcHNcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKG1ldGEsIFNwc1BhcnNlci50b1ZpZGVvTWV0YShjb25maWcpKVxuXG4gICAgLy8gZmlsbCB2aWRlbyBtZWRpYSBpbmZvXG4gICAgY29uc3QgdmlkZW9NZWRpYSA9IHRoaXMuX2NvbnRleHQubWVkaWFJbmZvLnZpZGVvXG5cbiAgICB2aWRlb01lZGlhLmNvZGVjID0gbWV0YS5jb2RlY1xuICAgIHZpZGVvTWVkaWEucHJvZmlsZSA9IG1ldGEucHJvZmlsZVxuICAgIHZpZGVvTWVkaWEubGV2ZWwgPSBtZXRhLmxldmVsXG4gICAgdmlkZW9NZWRpYS5jaHJvbWFGb3JtYXQgPSBtZXRhLmNocm9tYUZvcm1hdFxuICAgIHZpZGVvTWVkaWEuZnJhbWVSYXRlID0gbWV0YS5mcmFtZVJhdGVcbiAgICB2aWRlb01lZGlhLnBhclJhdGlvID0gbWV0YS5wYXJSYXRpb1xuICAgIHZpZGVvTWVkaWEud2lkdGggPSB2aWRlb01lZGlhLndpZHRoID09PSBtZXRhLnByZXNlbnRXaWR0aCA/IHZpZGVvTWVkaWEud2lkdGggOiBtZXRhLnByZXNlbnRXaWR0aFxuICAgIHZpZGVvTWVkaWEuaGVpZ2h0ID0gdmlkZW9NZWRpYS5oZWlnaHQgPT09IG1ldGEucHJlc2VudEhlaWdodCA/IHZpZGVvTWVkaWEud2lkdGggOiBtZXRhLnByZXNlbnRIZWlnaHRcblxuICAgIG1ldGEuZHVyYXRpb24gPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5kdXJhdGlvbiAqIG1ldGEudGltZXNjYWxlXG4gICAgbWV0YS5hdmNjID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5sZW5ndGgpXG4gICAgbWV0YS5hdmNjLnNldChkYXRhKVxuICAgIHRyYWNrLm1ldGEgPSBtZXRhXG4gIH1cblxuICAvKipcbiAgICogY2hvb3NlIGF1ZGlvIHNhbXBsZSByYXRlXG4gICAqIEBwYXJhbSBzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4XG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3dpdGNoQXVkaW9TYW1wbGVSYXRlIChzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4KSB7XG4gICAgbGV0IHNhbXBsaW5nRnJlcXVlbmN5TGlzdCA9IFs5NjAwMCwgODgyMDAsIDY0MDAwLCA0ODAwMCwgNDQxMDAsIDMyMDAwLCAyNDAwMCwgMjIwNTAsIDE2MDAwLCAxMjAwMCwgMTEwMjUsIDgwMDAsIDczNTBdXG4gICAgcmV0dXJuIHNhbXBsaW5nRnJlcXVlbmN5TGlzdFtzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4XVxuICB9XG5cbiAgLyoqXG4gICAqIGNob29zZSBhdWRpbyBzYW1wbGluZyBmcmVxdWVuY2VcbiAgICogQHBhcmFtIGluZm9cbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zd2l0Y2hBdWRpb1NhbXBsaW5nRnJlcXVlbmN5IChpbmZvKSB7XG4gICAgbGV0IHNhbXBsaW5nRnJlcXVlbmN5SW5kZXggPSAoaW5mbyAmIDEyKSA+Pj4gMlxuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3QgPSBbNTUwMCwgMTEwMjUsIDIyMDUwLCA0NDEwMCwgNDgwMDBdXG4gICAgcmV0dXJuIHNhbXBsaW5nRnJlcXVlbmN5TGlzdFtzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4XVxuICB9XG5cbiAgLyoqXG4gICAqIGNob29zZSBhdWRpbyBjaGFubmVsIGNvdW50XG4gICAqIEBwYXJhbSBpbmZvXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3dpdGNoQXVkaW9DaGFubmVsIChpbmZvKSB7XG4gICAgbGV0IHNhbXBsZVRyYWNrTnVtSW5kZXggPSBpbmZvICYgMVxuICAgIGxldCBzYW1wbGVUcmFja051bUxpc3QgPSBbMSwgMl1cbiAgICByZXR1cm4gc2FtcGxlVHJhY2tOdW1MaXN0W3NhbXBsZVRyYWNrTnVtSW5kZXhdXG4gIH1cblxuICAvKipcbiAgICogY2hlY2sgZGF0YXNpemUgaXMgdmFsaWQgdXNlIDQgQnl0ZSBhZnRlciBjdXJyZW50IHRhZ1xuICAgKiBAcGFyYW0gZGF0YXNpemVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGF0YXNpemVWYWxpZGF0b3IgKGRhdGFzaXplKSB7XG4gICAgbGV0IGRhdGFzaXplQ29uZmlybSA9IHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDAsIDQpXG4gICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoNClcbiAgICByZXR1cm4gZGF0YXNpemVDb25maXJtID09PSBkYXRhc2l6ZSArIDExXG4gIH1cblxuICBnZXQgbG9hZGVyQnVmZmVyICgpIHtcbiAgICBjb25zdCBidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdMT0FERVJfQlVGRkVSJylcbiAgICBpZiAoYnVmZmVyKSB7XG4gICAgICByZXR1cm4gYnVmZmVyXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIG5ldyBFcnJvcign5om+5LiN5YiwIGxvYWRlckJ1ZmZlciDlrp7kvosnKSlcbiAgICB9XG4gIH1cblxuICBnZXQgdHJhY2tzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgfVxuXG4gIGdldCBsb2dnZXIgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdMT0dHRVInKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZsdkRlbXV4ZXJcbiIsIi8qKlxuICogUmVmZXJlbmNlOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjODIxNiNzZWN0aW9uLTQuM1xuICovXG5jbGFzcyBNM1U4UGFyc2VyIHtcbiAgc3RhdGljIHBhcnNlICh0ZXh0LCBiYXNldXJsID0gJycpIHtcbiAgICBsZXQgcmV0ID0ge1xuICAgICAgZHVyYXRpb246IDBcbiAgICB9O1xuICAgIGlmICghdGV4dCB8fCAhdGV4dC5zcGxpdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcmVmcyA9IHRleHQuc3BsaXQoL1xccnxcXG4vKTtcbiAgICByZWZzID0gcmVmcy5maWx0ZXIoKHJlZikgPT4ge1xuICAgICAgcmV0dXJuIHJlZjtcbiAgICB9KVxuICAgIGxldCByZWYgPSByZWZzLnNoaWZ0KClcbiAgICBpZiAoIXJlZi5tYXRjaCgnI0VYVE0zVScpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbTN1OCBmaWxlOiBub3QgXCIjRVhUTTNVXCJgKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZWYgPSByZWZzLnNoaWZ0KClcbiAgICB3aGlsZSAocmVmKSB7XG4gICAgICBsZXQgcmVmbSA9IHJlZi5tYXRjaCgvIyguW0EtWnwtXSopOiguKikvKTtcbiAgICAgIGxldCByZWZkID0gcmVmLm1hdGNoKC8jKC5bQS1afC1dKikvKTtcbiAgICAgIGlmIChyZWZkICYmIHJlZm0gJiYgcmVmbS5sZW5ndGggPiAyKSB7XG4gICAgICAgIHN3aXRjaCAocmVmbVsxXSkge1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLVZFUlNJT04nOlxuICAgICAgICAgICAgcmV0LnZlcnNpb24gPSBwYXJzZUludChyZWZtWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLU1FRElBLVNFUVVFTkNFJzpcbiAgICAgICAgICAgIHJldC5zZXF1ZW5jZSA9IHBhcnNlSW50KHJlZm1bMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnRVhULVgtVEFSR0VURFVSQVRJT04nOlxuICAgICAgICAgICAgcmV0LnRhcmdldGR1cmF0aW9uID0gcGFyc2VGbG9hdChyZWZtWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVElORic6XG4gICAgICAgICAgICBNM1U4UGFyc2VyLnBhcnNlRnJhZyhyZWZtLCByZWZzLCByZXQsIGJhc2V1cmwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnRVhULVgtS0VZJzpcbiAgICAgICAgICAgIE0zVThQYXJzZXIucGFyc2VEZWNyeXB0KHJlZm1bMl0scmV0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBpZihyZWZkICYmIHJlZmQubGVuZ3RoID4gMSkge1xuICAgICAgICBzd2l0Y2gocmVmZFsxXSkge1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLURJU0NPTlRJTlVJVFknOlxuICAgICAgICAgICAgcmVmID0gcmVmcy5zaGlmdCgpO1xuICAgICAgICAgICAgbGV0IHJlZm0gPSByZWYubWF0Y2goLyMoLltBLVp8LV0qKTooLiopLyk7XG4gICAgICAgICAgICBpZihyZWZtLmxlbmd0aCA+MiAmJiByZWZtWzFdID09PSAnRVhUSU5GJykge1xuICAgICAgICAgICAgICBNM1U4UGFyc2VyLnBhcnNlRnJhZyhyZWZtLCByZWZzLCByZXQsIGJhc2V1cmwsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWYgPSByZWZzLnNoaWZ0KClcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUZyYWcgKHJlZm0sIHJlZnMsIHJldCwgYmFzZXVybCwgZGlzY29udGludWUpIHtcbiAgICBpZiAoIXJldC5mcmFncykge1xuICAgICAgcmV0LmZyYWdzID0gW11cbiAgICB9XG5cbiAgICBsZXQgZnJlZyA9IHtcbiAgICAgIHN0YXJ0OiByZXQuZHVyYXRpb24sXG4gICAgICBkdXJhdGlvbjogcGFyc2VGbG9hdChyZWZtWzJdKSAqIDEwMDBcbiAgICB9XG5cbiAgICByZXQuZHVyYXRpb24gKz0gZnJlZy5kdXJhdGlvbjtcbiAgICBsZXQgbmV4dGxpbmUgPSByZWZzLnNoaWZ0KCk7XG4gICAgaWYgKG5leHRsaW5lLm1hdGNoKC8jKC4qKTooLiopLykpIHtcbiAgICAgIG5leHRsaW5lID0gcmVmcy5zaGlmdCgpO1xuICAgIH1cbiAgICBpZiAobmV4dGxpbmUubGVuZ3RoID4gMCAmJiBuZXh0bGluZS5jaGFyQXQoMCkgPT09ICcvJyAmJiBiYXNldXJsLm1hdGNoKC8uKlxcL1xcLy4qXFwuXFx3Ky9nKSkge1xuICAgICAgYmFzZXVybCA9IGJhc2V1cmwubWF0Y2goLy4qXFwvXFwvLipcXC5cXHcrL2cpWzBdO1xuICAgIH1cbiAgICBpZiAobmV4dGxpbmUubWF0Y2goLy4qOlxcL1xcLy4qLykpIHtcbiAgICAgIGZyZWcudXJsID0gbmV4dGxpbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyZWcudXJsID0gYmFzZXVybCArIG5leHRsaW5lO1xuICAgIH1cbiAgICBmcmVnLmRpc2NvbnRpbnVlID0gZGlzY29udGludWU7XG4gICAgcmV0LmZyYWdzLnB1c2goZnJlZyk7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VVUkwgKHVybCkge1xuICAgIGxldCBiYXNldXJsID0gJyc7XG4gICAgbGV0IHVybHMgPSB1cmwubWF0Y2goLyguKlxcLykuKlxcLm0zdTgvKTtcbiAgICBpZiAodXJscyAmJiB1cmxzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodXJsc1tpXS5tYXRjaCgvLipcXC8kL2cpICYmIHVybHNbaV0ubGVuZ3RoID4gYmFzZXVybC5sZW5ndGgpIHtcbiAgICAgICAgICBiYXNldXJsID0gdXJsc1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmFzZXVybDtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZURlY3J5cHQocmVmbSwgcmV0KSB7XG4gICAgcmV0LmVuY3J5cHQgPSB7fTtcbiAgICBsZXQgcmVmcyA9IHJlZm0uc3BsaXQoJywnKTtcbiAgICBmb3IgKGxldCBpIGluIHJlZnMpIHsgXG4gICAgICBsZXQgY21kID0gcmVmc1tpXTtcbiAgICAgIGlmKGNtZC5tYXRjaCgvTUVUSE9EPSguKikvKSkge1xuICAgICAgICByZXQuZW5jcnlwdC5tZXRob2QgPSBjbWQubWF0Y2goL01FVEhPRD0oLiopLylbMV07XG4gICAgICB9XG4gICAgICBpZihjbWQubWF0Y2goL1VSST1cIiguKilcIi8pKSB7XG4gICAgICAgIHJldC5lbmNyeXB0LnVyaSA9IGNtZC5tYXRjaCgvVVJJPVwiKC4qKVwiLylbMV07XG4gICAgICB9XG5cbiAgICAgIGlmKGNtZC5tYXRjaCgvSVY9MHgoLiopLykpIHtcbiAgICAgICAgbGV0IGl2ID0gY21kLm1hdGNoKC9JVj0weCguKikvKVsxXTtcbiAgICAgICAgbGV0IGxlbmd0aCA9IE1hdGguY2VpbChpdi5sZW5ndGggLyAyKTtcbiAgICAgICAgcmV0LmVuY3J5cHQuaXZiID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICAgICAgZm9yKGxldCBpID0gbGVuZ3RoIC0gMTsgaSA+PTA7IGktLSkge1xuICAgICAgICAgIGxldCBpbSA9IHBhcnNlSW50KGl2LnN1YnN0cihpICogMiwgMiksIDE2KTtcbiAgICAgICAgICByZXQuZW5jcnlwdC5pdmJbaV0gPSBpbTtcbiAgICAgICAgfSBcbiAgICAgICAgcmV0LmVuY3J5cHQuaXYgPSBpdjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE0zVThQYXJzZXI7XG4iLCJpbXBvcnQgeyBOYWx1bml0IH0gZnJvbSAneGdwbGF5ZXItY29kZWMnO1xuaW1wb3J0IHsgQXVkaW9UcmFjaywgVmlkZW9UcmFjayB9IGZyb20gJ3hncGxheWVyLWJ1ZmZlcic7XG5pbXBvcnQge1xuICBBdWRpb1RyYWNrTWV0YSxcbiAgVmlkZW9UcmFja01ldGEsXG4gIEF1ZGlvVHJhY2tTYW1wbGUsXG4gIFZpZGVvVHJhY2tTYW1wbGUsXG4gIEVWRU5UUyxcbiAgU3RyZWFtXG59IGZyb20gJ3hncGxheWVyLXV0aWxzJztcblxuY29uc3QgREVNVVhfRVZFTlRTID0gRVZFTlRTLkRFTVVYX0VWRU5UUztcbmNvbnN0IFN0cmVhbVR5cGUgPSB7XG4gIDB4MDE6IFsndmlkZW8nLCAnTVBFRy0xJ10sXG4gIDB4MDI6IFsndmlkZW8nLCAnTVBFRy0yJ10sXG4gIDB4MWI6IFsndmlkZW8nLCAnQVZDLkgyNjQnXSxcbiAgMHhlYTogWyd2aWRlbycsICdWQy0xJ10sXG4gIDB4MDM6IFsnYXVkaW8nLCAnTVBFRy0xJ10sXG4gIDB4MDQ6IFsnYXVkaW8nLCAnTVBFRy0yJ10sXG4gIDB4MGY6IFsnYXVkaW8nLCAnTVBFRy0yLkFBQyddLFxuICAweDExOiBbJ2F1ZGlvJywgJ01QRUctNC5BQUMnXSxcbiAgMHg4MDogWydhdWRpbycsICdMUENNJ10sXG4gIDB4ODE6IFsnYXVkaW8nLCAnQUMzJ10sXG4gIDB4MDY6IFsnYXVkaW8nLCAnQUMzJ10sXG4gIDB4ODI6IFsnYXVkaW8nLCAnRFRTJ10sXG4gIDB4ODM6IFsnYXVkaW8nLCAnRG9sYnkgVHJ1ZUhEJ10sXG4gIDB4ODQ6IFsnYXVkaW8nLCAnQUMzLVBsdXMnXSxcbiAgMHg4NTogWydhdWRpbycsICdEVFMtSEQnXSxcbiAgMHg4NjogWydhdWRpbycsICdEVFMtTUEnXSxcbiAgMHhhMTogWydhdWRpbycsICdBQzMtUGx1cy1TRUMnXSxcbiAgMHhhMjogWydhdWRpbycsICdEVFMtSEQtU0VDJ11cbn07XG5cbmNsYXNzIFRzRGVtdXhlciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5jb25maWdzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlncyk7XG4gICAgdGhpcy5kZW11eGluZyA9IGZhbHNlO1xuICAgIHRoaXMucGF0ID0gW107XG4gICAgdGhpcy5wbXQgPSBbXTtcbiAgICB0aGlzLl9oYXNWaWRlb01ldGEgPSBmYWxzZTtcbiAgICB0aGlzLl9oYXNBdWRpb01ldGEgPSBmYWxzZTtcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLkRFTVVYX1NUQVJULCB0aGlzLmRlbXV4LmJpbmQodGhpcykpXG4gIH1cblxuICBkZW11eCAoZnJhZykge1xuICAgIGlmICh0aGlzLmRlbXV4aW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgYnVmZmVyID0gdGhpcy5pbnB1dEJ1ZmZlcjtcbiAgICBsZXQgZnJhZ3MgPSB7IHBhdDogW10sIHBtdDogW10gfTtcbiAgICBsZXQgcGVzZXMgPSB7fTtcblxuICAgIC8vIFJlYWQgVFMgc2VnbWVudFxuICAgIHdoaWxlIChidWZmZXIubGVuZ3RoID49IDE4OCkge1xuICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPj0gMSAmJiBidWZmZXIuYXJyYXlbMF1bYnVmZmVyLm9mZnNldF0gIT09IDcxKSB7XG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIHRoaXMuVEFHLCBuZXcgRXJyb3IoYFVudHJ1c3Qgc3luYyBjb2RlOiAke2J1ZmZlci5hcnJheVswXVtidWZmZXIub2Zmc2V0XX0sIHRyeSB0byByZWNvdmVyO2ApLCBmYWxzZSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCA+PSAxICYmIGJ1ZmZlci5hcnJheVswXVtidWZmZXIub2Zmc2V0XSAhPT0gNzEpIHtcbiAgICAgICAgYnVmZmVyLnNoaWZ0KDEpO1xuICAgICAgfVxuICAgICAgbGV0IGJ1ZiA9IGJ1ZmZlci5zaGlmdCgxODgpO1xuICAgICAgLy8gY29uc29sZS5sb2coYnVmKTtcbiAgICAgIGxldCB0c1N0cmVhbSA9IG5ldyBTdHJlYW0oYnVmLmJ1ZmZlcik7XG4gICAgICBsZXQgdHMgPSB7fTtcbiAgICAgIFRzRGVtdXhlci5yZWFkKHRzU3RyZWFtLCB0cywgZnJhZ3MpO1xuICAgICAgaWYgKHRzLnBlcykge1xuICAgICAgICBpZiAoIXBlc2VzW3RzLmhlYWRlci5waWRdKSB7XG4gICAgICAgICAgcGVzZXNbdHMuaGVhZGVyLnBpZF0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBwZXNlc1t0cy5oZWFkZXIucGlkXS5wdXNoKHRzLnBlcyk7XG4gICAgICAgIHRzLnBlcy5FUy5idWZmZXIgPSBbdHMucGVzLkVTLmJ1ZmZlcl07XG4gICAgICB9IGVsc2UgaWYgKHBlc2VzW3RzLmhlYWRlci5waWRdKSB7XG4gICAgICAgIHBlc2VzW3RzLmhlYWRlci5waWRdW3Blc2VzW3RzLmhlYWRlci5waWRdLmxlbmd0aCAtIDFdLkVTLmJ1ZmZlci5wdXNoKHRzLnBheWxvYWQuc3RyZWFtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgQXVkaW9PcHRpb25zID0gZnJhZztcbiAgICBsZXQgVmlkZW9PcHRpb25zID0gZnJhZztcblxuICAgIC8vIEdldCBGcmFtZXMgZGF0YVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXMocGVzZXMpLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZXBlc2VzID0gcGVzZXNbT2JqZWN0LmtleXMocGVzZXMpW2ldXTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZXBlc2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGVwZXNlc1tqXS5pZCA9IE9iamVjdC5rZXlzKHBlc2VzKVtpXTtcbiAgICAgICAgZXBlc2VzW2pdLkVTLmJ1ZmZlciA9IFRzRGVtdXhlci5NZXJnZShlcGVzZXNbal0uRVMuYnVmZmVyKTtcbiAgICAgICAgaWYgKGVwZXNlc1tqXS50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgdGhpcy5wdXNoQXVkaW9TYW1wbGUoZXBlc2VzW2pdLCBBdWRpb09wdGlvbnMpO1xuICAgICAgICAgIEF1ZGlvT3B0aW9ucyA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKGVwZXNlc1tqXS50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgdGhpcy5wdXNoVmlkZW9TYW1wbGUoZXBlc2VzW2pdLCBWaWRlb09wdGlvbnMpO1xuICAgICAgICAgIFZpZGVvT3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2hhc0F1ZGlvTWV0YSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSwgJ2F1ZGlvJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9oYXNWaWRlb01ldGEpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUsICd2aWRlbycpO1xuICAgIH1cbiAgfVxuXG4gIHB1c2hBdWRpb1NhbXBsZSAocGVzLCBvcHRpb25zKSB7XG4gICAgbGV0IHRyYWNrO1xuICAgIGlmICghdGhpcy5fdHJhY2tzLmF1ZGlvVHJhY2spIHtcbiAgICAgIHRoaXMuX3RyYWNrcy5hdWRpb1RyYWNrID0gbmV3IEF1ZGlvVHJhY2soKTtcbiAgICAgIHRyYWNrID0gdGhpcy5fdHJhY2tzLmF1ZGlvVHJhY2s7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYWNrID0gdGhpcy5fdHJhY2tzLmF1ZGlvVHJhY2s7XG4gICAgfVxuICAgIGxldCBtZXRhID0gbmV3IEF1ZGlvVHJhY2tNZXRhKHtcbiAgICAgIGF1ZGlvU2FtcGxlUmF0ZTogcGVzLkVTLmZyZXF1ZW5jZSxcbiAgICAgIHNhbXBsZVJhdGU6IHBlcy5FUy5mcmVxdWVuY2UsXG4gICAgICBjaGFubmVsQ291bnQ6IHBlcy5FUy5jaGFubmVsLFxuICAgICAgY29kZWM6ICdtcDRhLjQwLicgKyBwZXMuRVMuYXVkaW9PYmplY3RUeXBlLFxuICAgICAgY29uZmlnOiBwZXMuRVMuYXVkaW9Db25maWcsXG4gICAgICBpZDogMixcbiAgICAgIHNhbXBsZVJhdGVJbmRleDogcGVzLkVTLmZyZXF1ZW5jeUluZGV4XG4gICAgfSk7XG4gICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IoMTAyNCAvIG1ldGEuYXVkaW9TYW1wbGVSYXRlICogbWV0YS50aW1lc2NhbGUpO1xuXG4gICAgbGV0IG1ldGFFcXVhbCA9IFRzRGVtdXhlci5jb21wYWlyZU1ldGEodHJhY2subWV0YSwgbWV0YSwgdHJ1ZSk7XG5cbiAgICBpZiAoIXRoaXMuX2hhc0F1ZGlvTWV0YSB8fCAhbWV0YUVxdWFsKSB7XG4gICAgICB0cmFjay5tZXRhID0gbWV0YTtcbiAgICAgIHRoaXMuX2hhc0F1ZGlvTWV0YSA9IHRydWVcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAnYXVkaW8nKTtcbiAgICB9XG5cbiAgICBsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KHBlcy5FUy5idWZmZXIuYnVmZmVyLnNsaWNlKHBlcy5FUy5idWZmZXIucG9zaXRpb24sIHBlcy5FUy5idWZmZXIubGVuZ3RoKSk7XG4gICAgbGV0IGR0cyA9IHBhcnNlSW50KHBlcy5wdHMgLyA5MCk7XG4gICAgbGV0IHB0cyA9IHBhcnNlSW50KHBlcy5wdHMgLyA5MCk7XG4gICAgbGV0IHNhbXBsZSA9IG5ldyBBdWRpb1RyYWNrU2FtcGxlKHtkdHMsIHB0cywgZGF0YSwgb3B0aW9uc30pO1xuICAgIHRyYWNrLnNhbXBsZXMucHVzaChzYW1wbGUpO1xuICB9XG5cbiAgcHVzaFZpZGVvU2FtcGxlIChwZXMsIG9wdGlvbnMpIHtcbiAgICBsZXQgbmFscyA9IE5hbHVuaXQuZ2V0TmFsdW5pdHMocGVzLkVTLmJ1ZmZlcik7XG4gICAgbGV0IHRyYWNrO1xuICAgIGxldCBtZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKCk7XG4gICAgaWYgKCF0aGlzLl90cmFja3MudmlkZW9UcmFjaykge1xuICAgICAgdGhpcy5fdHJhY2tzLnZpZGVvVHJhY2sgPSBuZXcgVmlkZW9UcmFjaygpO1xuICAgICAgdHJhY2sgPSB0aGlzLl90cmFja3MudmlkZW9UcmFjaztcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhY2sgPSB0aGlzLl90cmFja3MudmlkZW9UcmFjaztcbiAgICB9XG4gICAgbGV0IHNhbXBsZUxlbmd0aCA9IDA7XG4gICAgbGV0IHNwcyA9IGZhbHNlO1xuICAgIGxldCBwcHMgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBuYWwgPSBuYWxzW2ldO1xuICAgICAgaWYgKG5hbC5zcHMpIHtcbiAgICAgICAgc3BzID0gbmFsO1xuICAgICAgICB0cmFjay5zcHMgPSBuYWwuYm9keTtcbiAgICAgICAgbWV0YS5jaHJvbWFGb3JtYXQgPSBzcHMuc3BzLmNocm9tYV9mb3JtYXRcbiAgICAgICAgbWV0YS5jb2RlYyA9ICdhdmMxLic7XG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgNDsgaisrKSB7XG4gICAgICAgICAgdmFyIGggPSBzcHMuYm9keVtqXS50b1N0cmluZygxNik7XG4gICAgICAgICAgaWYgKGgubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgaCA9ICcwJyArIGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1ldGEuY29kZWMgKz0gaDtcbiAgICAgICAgfVxuICAgICAgICBtZXRhLmNvZGVjSGVpZ2h0ID0gc3BzLnNwcy5jb2RlY19zaXplLmhlaWdodDtcbiAgICAgICAgbWV0YS5jb2RlY1dpZHRoID0gc3BzLnNwcy5jb2RlY19zaXplLndpZHRoO1xuICAgICAgICBtZXRhLmZyYW1lUmF0ZSA9IHNwcy5zcHMuZnJhbWVfcmF0ZTtcbiAgICAgICAgbWV0YS5pZCA9IDE7XG4gICAgICAgIG1ldGEubGV2ZWwgPSBzcHMuc3BzLmxldmVsX3N0cmluZztcbiAgICAgICAgbWV0YS5wcmVzZW50SGVpZ2h0ID0gc3BzLnNwcy5wcmVzZW50X3NpemUuaGVpZ2h0O1xuICAgICAgICBtZXRhLnByZXNlbnRXaWR0aCA9IHNwcy5zcHMucHJlc2VudF9zaXplLndpZHRoO1xuICAgICAgICBtZXRhLnByb2ZpbGUgPSBzcHMuc3BzLnByb2ZpbGVfc3RyaW5nO1xuICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcihtZXRhLnRpbWVzY2FsZSAqIChzcHMuc3BzLmZyYW1lX3JhdGUuZnBzX2RlbiAvIHNwcy5zcHMuZnJhbWVfcmF0ZS5mcHNfbnVtKSk7XG4gICAgICAgIG1ldGEuc2FyUmF0aW8gPSBzcHMuc3BzLnNhcl9yYXRpbyA/IHNwcy5zcHMuc2FyX3JhdGlvIDogc3BzLnNwcy5wYXJfcmF0aW87XG4gICAgICB9IGVsc2UgaWYgKG5hbC5wcHMpIHtcbiAgICAgICAgdHJhY2sucHBzID0gbmFsLmJvZHk7XG4gICAgICAgIHBwcyA9IG5hbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNhbXBsZUxlbmd0aCArPSAoNCArIG5hbC5ib2R5LmJ5dGVMZW5ndGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzcHMgJiYgcHBzKSB7XG4gICAgICBtZXRhLmF2Y2MgPSBOYWx1bml0LmdldEF2Y2Moc3BzLmJvZHksIHBwcy5ib2R5KTtcbiAgICAgIGxldCBtZXRhRXF1YWwgPSBUc0RlbXV4ZXIuY29tcGFpcmVNZXRhKHRyYWNrLm1ldGEsIG1ldGEsIHRydWUpO1xuICAgICAgaWYgKCF0aGlzLl9oYXNWaWRlb01ldGEgfHwgIW1ldGFFcXVhbCkge1xuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIG9wdGlvbnMubWV0YSA9IE9iamVjdC5hc3NpZ24oe30sIG1ldGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtZXRhOiBPYmplY3QuYXNzaWduKHt9LCBtZXRhKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmFjay5tZXRhID0gbWV0YTtcbiAgICAgICAgdGhpcy5faGFzVmlkZW9NZXRhID0gdHJ1ZVxuICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ3ZpZGVvJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShzYW1wbGVMZW5ndGgpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGxldCBpc0tleWZyYW1lID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbmFsID0gbmFsc1tpXTtcbiAgICAgIGxldCBsZW5ndGggPSBuYWwuYm9keS5ieXRlTGVuZ3RoO1xuICAgICAgaWYgKG5hbC5pZHIpIHtcbiAgICAgICAgaXNLZXlmcmFtZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIW5hbC5wcHMgJiYgIW5hbC5zcHMpIHtcbiAgICAgICAgZGF0YS5zZXQobmV3IFVpbnQ4QXJyYXkoW2xlbmd0aCA+Pj4gMjQgJiAweGZmLFxuICAgICAgICAgIGxlbmd0aCA+Pj4gMTYgJiAweGZmLFxuICAgICAgICAgIGxlbmd0aCA+Pj4gOCAmIDB4ZmYsXG4gICAgICAgICAgbGVuZ3RoICYgMHhmZlxuICAgICAgICBdKSwgb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIGRhdGEuc2V0KG5hbC5ib2R5LCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgc2FtcGxlID0gbmV3IFZpZGVvVHJhY2tTYW1wbGUoe1xuICAgICAgZHRzOiBwYXJzZUludChwZXMuZHRzIC8gOTApLFxuICAgICAgcHRzOiBwYXJzZUludChwZXMucHRzIC8gOTApLFxuICAgICAgY3RzOiAocGVzLnB0cyAtIHBlcy5kdHMpIC8gOTAsXG4gICAgICBvcmlnaW5EdHM6IHBlcy5kdHMsXG4gICAgICBpc0tleWZyYW1lLFxuICAgICAgZGF0YSxcbiAgICAgIG9wdGlvbnNcbiAgICB9KVxuICAgIHRyYWNrLnNhbXBsZXMucHVzaChzYW1wbGUpO1xuICB9XG5cbiAgZGVzdG9yeSAoKSB7XG4gICAgdGhpcy5vZmYoREVNVVhfRVZFTlRTLkRFTVVYX1NUQVJULCB0aGlzLmRlbXV4KTtcbiAgICB0aGlzLmNvbmZpZ3MgPSB7fTtcbiAgICB0aGlzLmRlbXV4aW5nID0gZmFsc2U7XG4gICAgdGhpcy5wYXQgPSBbXTtcbiAgICB0aGlzLnBtdCA9IFtdO1xuICAgIHRoaXMuX2hhc1ZpZGVvTWV0YSA9IGZhbHNlO1xuICAgIHRoaXMuX2hhc0F1ZGlvTWV0YSA9IGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGNvbXBhaXJlQXJyYXkgKGEsIGIsIHR5cGUpIHtcbiAgICBsZXQgYWwgPSAwO1xuICAgIGxldCBibCA9IDA7XG4gICAgaWYgKHR5cGUgPT09ICdVaW50OEFycmF5Jykge1xuICAgICAgYWwgPSBhLmJ5dGVMZW5ndGg7XG4gICAgICBibCA9IGIuYnl0ZUxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdBcnJheScpIHtcbiAgICAgIGFsID0gYS5sZW5ndGg7XG4gICAgICBibCA9IGIubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAoYWwgIT09IGJsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc3RhdGljIGNvbXBhaXJlTWV0YSAoYSwgYiwgaWdub3JlRHVyYXRpb24pIHtcbiAgICBpZiAoIWEgfHwgIWIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMCwgayA9IE9iamVjdC5rZXlzKGEpLmxlbmd0aDsgaSA8IGs7IGkrKykge1xuICAgICAgbGV0IGl0ZW1hID0gYVtPYmplY3Qua2V5cyhhKVtpXV07XG4gICAgICBsZXQgaXRlbWIgPSBiW09iamVjdC5rZXlzKGEpW2ldXTtcbiAgICAgIGlmICh0eXBlb2YgaXRlbWEgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmICgoaWdub3JlRHVyYXRpb24gJiYgT2JqZWN0LmtleXMoYSlbaV0gIT09ICdkdXJhdGlvbicgJiYgT2JqZWN0LmtleXMoYSlbaV0gIT09ICdyZWZTYW1wbGVEdXJhdGlvbicgJiYgT2JqZWN0LmtleXMoYSlbaV0gIT09ICdyZWZTYW1wbGVEdXJhdGlvbkZpeGVkJykgJiYgaXRlbWEgIT09IGl0ZW1iKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1hLmJ5dGVMZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoaXRlbWIuYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghVHNEZW11eGVyLmNvbXBhaXJlQXJyYXkoaXRlbWEsIGl0ZW1iLCAnVWludDhBcnJheScpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1hLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChpdGVtYi5sZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVRzRGVtdXhlci5jb21wYWlyZUFycmF5KGl0ZW1hLCBpdGVtYiwgJ0FycmF5JykpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghVHNEZW11eGVyLmNvbXBhaXJlTWV0YShpdGVtYSwgaXRlbWIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc3RhdGljIE1lcmdlIChidWZmZXJzKSB7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZW5ndGggKz0gKGJ1ZmZlcnNbaV0ubGVuZ3RoIC0gYnVmZmVyc1tpXS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgYnVmZmVyID0gYnVmZmVyc1tpXTtcbiAgICAgIGRhdGEuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5wb3NpdGlvbiksIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gYnVmZmVyLmxlbmd0aCAtIGJ1ZmZlci5wb3NpdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdHJlYW0oZGF0YS5idWZmZXIpO1xuICB9XG5cbiAgc3RhdGljIHJlYWQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgVHNEZW11eGVyLnJlYWRIZWFkZXIoc3RyZWFtLCB0cyk7XG4gICAgVHNEZW11eGVyLnJlYWRQYXlsb2FkKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICBpZiAodHMuaGVhZGVyLnBhY2tldCA9PT0gJ01FRElBJyAmJiB0cy5oZWFkZXIucGF5bG9hZCA9PT0gMSAmJiAhdHMudW5rbm93blBJRHMpIHtcbiAgICAgIHRzLnBlcyA9IFRzRGVtdXhlci5QRVModHMpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyByZWFkUGF5bG9hZCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgaGVhZGVyID0gdHMuaGVhZGVyXG4gICAgbGV0IHBpZCA9IGhlYWRlci5waWQ7XG4gICAgc3dpdGNoIChwaWQpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgVHNEZW11eGVyLlBBVChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBUc0RlbXV4ZXIuQ0FUKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIFRzRGVtdXhlci5UU0RUKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDB4MWZmZjpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBUT0RPOiBzb21l55qE5YaZ5rOV5LiN5aSq5aW977yM5b6X5pS5XG4gICAgICAgIGlmIChmcmFncy5wYXQuc29tZSgoaXRlbSkgPT4geyByZXR1cm4gaXRlbS5waWQgPT09IHBpZDsgfSkpIHtcbiAgICAgICAgICBUc0RlbXV4ZXIuUE1UKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgc3RzID0gZnJhZ3MucG10ID8gZnJhZ3MucG10LmZpbHRlcigoaXRlbSkgPT4gaXRlbS5waWQgPT09IHBpZCkgOiBbXTtcbiAgICAgICAgICBpZiAoc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIFRzRGVtdXhlci5NZWRpYShzdHJlYW0sIHRzLCBTdHJlYW1UeXBlW3N0c1swXS5zdHJlYW1UeXBlXVswXSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHMudW5rbm93blBJRHMgPSB0cnVlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcmVhZEhlYWRlciAoc3RyZWFtLCB0cykge1xuICAgIGxldCBoZWFkZXIgPSB7fTtcbiAgICBoZWFkZXIuc3luYyA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgaGVhZGVyLmVycm9yID0gbmV4dCA+Pj4gMTU7XG4gICAgaGVhZGVyLnBheWxvYWQgPSBuZXh0ID4+PiAxNCAmIDE7XG4gICAgaGVhZGVyLnByaW9yaXR5ID0gbmV4dCA+Pj4gMTMgJiAxO1xuICAgIGhlYWRlci5waWQgPSBuZXh0ICYgMHgxZmZmO1xuXG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcblxuICAgIGhlYWRlci5zY3JhbWJsaW5nID0gbmV4dCA+PiA2ICYgMHgzOyAvLyDmmK/lkKbliqDlr4bvvIwwMOihqOekuuS4jeWKoOWvhlxuXG4gICAgLyoqXG4gICAgICogMDAgSVNPL0lFQ+acquadpeS9v+eUqOS/neeVmVxuICAgICAqIDAxIOayoeacieiwg+aVtOWtl+aute+8jOS7heWQq+aciTE4NELmnInmlYjlh4DojbdcbiAgICAgKiAwMiDmsqHmnInmnInmlYjlh4DojbfvvIzku4XlkKvmnIkxODNC6LCD5pW05a2X5q61XG4gICAgICogMDMgMH4xODJC6LCD5pW05a2X5q615ZCO5Li65pyJ5pWI5YeA6I23XG4gICAgICovXG4gICAgaGVhZGVyLmFkYXB0YXRpb24gPSBuZXh0ID4+IDQgJiAweDM7XG4gICAgaGVhZGVyLmNvbnRpbnVpdHkgPSBuZXh0ICYgMTU7XG4gICAgaGVhZGVyLnBhY2tldCA9IGhlYWRlci5waWQgPT09IDAgPyAnUEFUJyA6ICdNRURJQSc7XG4gICAgdHMuaGVhZGVyID0gaGVhZGVyO1xuICB9XG5cbiAgc3RhdGljIFBBVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgcmV0ID0ge307XG4gICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgc3RyZWFtLnNraXAobmV4dCk7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQudGFiZWxJRCA9IG5leHQ7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmVycm9yID0gbmV4dCA+Pj4gNztcbiAgICByZXQuemVybyA9IG5leHQgPj4+IDYgJiAxO1xuICAgIHJldC5zZWN0aW9uTGVuZ3RoID0gbmV4dCAmIDB4ZmZmO1xuICAgIHJldC5zdHJlYW1JRCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmN1cnJlbnQgPSBzdHJlYW0ucmVhZFVpbnQ4KCkgJiAxO1xuICAgIHJldC5zZWN0aW9uTnVtYmVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC5sYXN0U2VjdGlvbk51bWJlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgTiA9IChyZXQuc2VjdGlvbkxlbmd0aCAtIDkpIC8gNDtcbiAgICBsZXQgbGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBsZXQgcHJvZ3JhbU51bWJlciA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICBsZXQgcGlkID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgIHByb2dyYW06IHByb2dyYW1OdW1iZXIsXG4gICAgICAgIHBpZCxcbiAgICAgICAgdHlwZTogcHJvZ3JhbU51bWJlciA9PT0gMCA/ICduZXR3b3JrJyA6ICdtYXBQSUQnXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgZnJhZ3MucGF0ID0gZnJhZ3MucGF0LmNvbmNhdChsaXN0KTtcbiAgICB9XG4gICAgcmV0Lmxpc3QgPSBsaXN0O1xuICAgIHJldC5wcm9ncmFtID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQucGlkID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICB0cy5wYXlsb2FkID0gcmV0O1xuICAgIC8vIFRPRE8gQ1JDXG4gIH1cblxuICBzdGF0aWMgUE1UIChzdHJlYW0sIHRzLCBmcmFncykge1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBsZXQgaGVhZGVyID0gdHMuaGVhZGVyO1xuICAgIGhlYWRlci5wYWNrZXQgPSAnUE1UJztcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBzdHJlYW0uc2tpcChuZXh0KTtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC50YWJsZUlEID0gbmV4dDtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQuc2VjdGlvbkxlbmd0aCA9IG5leHQgJiAweGZmZjtcbiAgICByZXQucHJvZ3JhbSA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmN1cnJlbnQgPSBzdHJlYW0ucmVhZFVpbnQ4KCkgJiAxO1xuICAgIHJldC5vcmRlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQubGFzdE9yZGVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC5QQ1JfUElEID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICByZXQucHJvZ3JhbUxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweGZmZjtcbiAgICBsZXQgTiA9IChyZXQuc2VjdGlvbkxlbmd0aCAtIDEzKSAvIDU7XG4gICAgbGV0IGxpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgc3RyZWFtVHlwZTogc3RyZWFtLnJlYWRVaW50OCgpLFxuICAgICAgICBwaWQ6IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweDFmZmYsIC8vIDB4MDdlNSDop4bpopHvvIwweDA3ZTZcbiAgICAgICAgZXM6IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweGZmZlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldC5saXN0ID0gbGlzdDtcbiAgICBpZiAoIXRoaXMucG10KSB7XG4gICAgICB0aGlzLnBtdCA9IFtdO1xuICAgIH1cbiAgICBmcmFncy5wbXQgPSB0aGlzLnBtdC5jb25jYXQobGlzdC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBpZDogaXRlbS5waWQsXG4gICAgICAgIGVzOiBpdGVtLmVzLFxuICAgICAgICBzdHJlYW1UeXBlOiBpdGVtLnN0cmVhbVR5cGUsXG4gICAgICAgIHByb2dyYW06IHJldC5wcm9ncmFtXG4gICAgICB9O1xuICAgIH0pKTtcbiAgICB0cy5wYXlsb2FkID0gcmV0O1xuICB9XG5cbiAgc3RhdGljIE1lZGlhIChzdHJlYW0sIHRzLCB0eXBlKSB7XG4gICAgbGV0IGhlYWRlciA9IHRzLmhlYWRlcjtcbiAgICBsZXQgcGF5bG9hZCA9IHt9O1xuICAgIGhlYWRlci50eXBlID0gdHlwZTtcbiAgICBpZiAoaGVhZGVyLmFkYXB0YXRpb24gPT09IDB4MDMpIHtcbiAgICAgIHBheWxvYWQuYWRhcHRhdGlvbkxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICAgIGlmIChwYXlsb2FkLmFkYXB0YXRpb25MZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICBwYXlsb2FkLmRpc2NvbnRpbnVlID0gbmV4dCA+Pj4gNztcbiAgICAgICAgcGF5bG9hZC5hY2Nlc3MgPSBuZXh0ID4+PiA2ICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5wcmlvcml0eSA9IG5leHQgPj4+IDUgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLlBDUiA9IG5leHQgPj4+IDQgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLk9QQ1IgPSBuZXh0ID4+PiAzICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5zcGxpY2VQb2ludCA9IG5leHQgPj4+IDIgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLnRyYW5zcG9ydFByaXZhdGUgPSBuZXh0ID4+PiAxICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5hZGFwdGF0aW9uRmllbGQgPSBuZXh0ICYgMHgwMTtcbiAgICAgICAgbGV0IF9zdGFydCA9IHN0cmVhbS5wb3NpdGlvbjtcbiAgICAgICAgaWYgKHBheWxvYWQuUENSID09PSAxKSB7XG4gICAgICAgICAgcGF5bG9hZC5wcm9ncmFtQ2xvY2tCYXNlID0gc3RyZWFtLnJlYWRVaW50MzIoKSA8PCAxO1xuICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHBheWxvYWQucHJvZ3JhbUNsb2NrQmFzZSB8PSBuZXh0ID4+PiAxNTtcbiAgICAgICAgICBwYXlsb2FkLnByb2dyYW1DbG9ja0V4dGVuc2lvbiA9IG5leHQgJiAweDFmZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5PUENSID09PSAxKSB7XG4gICAgICAgICAgcGF5bG9hZC5vcmlnaW5Qcm9ncmFtQ2xvY2tCYXNlID0gc3RyZWFtLnJlYWRVaW50MzIoKSA8PCAxO1xuICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHBheWxvYWQub3JpZ2luUHJvZ3JhbUNsb2NrQmFzZSArPSBuZXh0ID4+PiAxNTtcbiAgICAgICAgICBwYXlsb2FkLm9yaWdpblByb2dyYW1DbG9ja0V4dGVuc2lvbiA9IG5leHQgJiAweDFmZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5zcGxpY2VQb2ludCA9PT0gMSkge1xuICAgICAgICAgIHBheWxvYWQuc3BsaWNlQ291bnRkb3duID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXlsb2FkLnRyYW5zcG9ydFByaXZhdGUgPT09IDEpIHtcbiAgICAgICAgICBsZXQgbGVuZ3RoID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICAgIGxldCB0cmFuc3BvcnRQcml2YXRlRGF0YSA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydFByaXZhdGVEYXRhLnB1c2goc3RyZWFtLnJlYWRVaW50OCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQuYWRhcHRhdGlvbkZpZWxkID09PSAxKSB7XG4gICAgICAgICAgbGV0IGxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDgoKVxuICAgICAgICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpXG4gICAgICAgICAgbGV0IHN0YXJ0ID0gc3RyZWFtLnBvc2l0aW9uO1xuICAgICAgICAgIGxldCBsdHcgPSBuZXh0ID4+PiA3O1xuICAgICAgICAgIGxldCBwaWVjZXdpc2UgPSBuZXh0ID4+PiA2ICYgMHgxO1xuICAgICAgICAgIGxldCBzZWFtbGVzcyA9IG5leHQgPj4+IDUgJiAweDE7XG4gICAgICAgICAgaWYgKGx0dyA9PT0gMSkge1xuICAgICAgICAgICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICAgICAgICBwYXlsb2FkLmx0d1ZhbGlkID0gbmV4dCA+Pj4gMTU7XG4gICAgICAgICAgICBwYXlsb2FkLmx0d09mZnNldCA9IG5leHQgJiAweGVmZmY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwaWVjZXdpc2UgPT09IDEpIHtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQyNCgpO1xuICAgICAgICAgICAgcGF5bG9hZC5waWVjZXdpc2VSYXRlID0gbmV4dCAmIDB4M2ZmZmZmO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2VhbWxlc3MgPT09IDEpIHtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZEludDgoKTtcbiAgICAgICAgICAgIHBheWxvYWQuc3BsaWNlVHlwZSA9IG5leHQgPj4+IDQ7XG4gICAgICAgICAgICBwYXlsb2FkLmR0c05leHRBVTEgPSBuZXh0ID4+PiAxICYgMHg3O1xuICAgICAgICAgICAgcGF5bG9hZC5tYXJrZXIxID0gbmV4dCAmIDB4MTtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgICAgcGF5bG9hZC5kdHNOZXh0QVUyID0gbmV4dCA+Pj4gMTtcbiAgICAgICAgICAgIHBheWxvYWQubWFya2VyMiA9IG5leHQgJiAweDE7XG4gICAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICAgIHBheWxvYWQuZHRzTmV4dEFVMyA9IG5leHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmVhbS5za2lwKGxlbmd0aCAtIDEgLSAoc3RyZWFtLnBvc2l0aW9uIC0gc3RhcnQpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGFzdFN0dWZmaW5nID0gcGF5bG9hZC5hZGFwdGF0aW9uTGVuZ3RoIC0gMSAtIChzdHJlYW0ucG9zaXRpb24gLSBfc3RhcnQpO1xuICAgICAgICBzdHJlYW0uc2tpcChsYXN0U3R1ZmZpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgICBwYXlsb2FkLnN0cmVhbSA9IG5ldyBTdHJlYW0oc3RyZWFtLmJ1ZmZlci5zbGljZShzdHJlYW0ucG9zaXRpb24pKTtcbiAgICB0cy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgfVxuXG4gIHN0YXRpYyBQRVMgKHRzKSB7XG4gICAgbGV0IHJldCA9IHt9O1xuICAgIGxldCBidWZmZXIgPSB0cy5wYXlsb2FkLnN0cmVhbTtcblxuICAgIGxldCBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MjQoKTtcbiAgICBpZiAobmV4dCAhPT0gMSkge1xuICAgICAgcmV0LkVTID0ge307XG4gICAgICByZXQuRVMuYnVmZmVyID0gYnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgc3RyZWFtSUQgPSBidWZmZXIucmVhZFVpbnQ4KCk7XG4gICAgICBpZiAoc3RyZWFtSUQgPj0gMHhlMCAmJiBzdHJlYW1JRCA8PSAweGVmKSB7XG4gICAgICAgIHJldC50eXBlID0gJ3ZpZGVvJztcbiAgICAgIH1cbiAgICAgIGlmIChzdHJlYW1JRCA+PSAweGMwICYmIHN0cmVhbUlEIDw9IDB4ZGYpIHtcbiAgICAgICAgcmV0LnR5cGUgPSAnYXVkaW8nO1xuICAgICAgfVxuICAgICAgbGV0IHBhY2tldExlbmd0aCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICByZXQucGFja2V0TGVuZ3RoID0gcGFja2V0TGVuZ3RoO1xuICAgICAgaWYgKHJldC50eXBlID09PSAndmlkZW8nIHx8IHJldC50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgIGxldCBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICBsZXQgZmlyc3QgPSBuZXh0ID4+PiA2O1xuICAgICAgICBpZiAoZmlyc3QgIT09IDB4MDIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Vycm9yIHdoZW4gcGFyc2UgcGVzIGhlYWRlcicpO1xuICAgICAgICB9XG4gICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQ4KCk7XG4gICAgICAgIHJldC5wdHNEVFNGbGFnID0gbmV4dCA+Pj4gNjtcbiAgICAgICAgcmV0LmVzY3JGbGFnID0gbmV4dCA+Pj4gNSAmIDB4MDE7XG4gICAgICAgIHJldC5lc1JhdGVGbGFnID0gbmV4dCA+Pj4gNCAmIDB4MDE7XG4gICAgICAgIHJldC5kc21GbGFnID0gbmV4dCA+Pj4gMyAmIDB4MDE7XG4gICAgICAgIHJldC5hZGRpdGlvbmFsRmxhZyA9IG5leHQgPj4+IDIgJiAweDAxO1xuICAgICAgICByZXQuY3JjRmxhZyA9IG5leHQgPj4+IDEgJiAweDAxO1xuICAgICAgICByZXQuZXh0ZW5zaW9uRmxhZyA9IG5leHQgJiAweDAxO1xuICAgICAgICByZXQucGVzSGVhZGVyTGVuZ3RoID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICBsZXQgTjEgPSByZXQucGVzSGVhZGVyTGVuZ3RoO1xuXG4gICAgICAgIGlmIChyZXQucHRzRFRTRmxhZyA9PT0gMikge1xuICAgICAgICAgIGxldCBwdHMgPSBbXTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEgJiAweDA3KTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBwdHMucHVzaChuZXh0ID4+PiAxKTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBwdHMucHVzaChuZXh0ID4+PiAxKTtcbiAgICAgICAgICByZXQucHRzID0gKHB0c1swXSA8PCAzMCB8IHB0c1sxXSA8PCAxNSB8IHB0c1syXSk7XG4gICAgICAgICAgTjEgLT0gNTtcbiAgICAgICAgICAvLyDop4bpopHlpoLmnpzmsqHmnIlkdHPnlKhwdHNcbiAgICAgICAgICBpZiAocmV0LnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgIHJldC5kdHMgPSByZXQucHRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LnB0c0RUU0ZsYWcgPT09IDMpIHtcbiAgICAgICAgICBsZXQgcHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBwdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LnB0cyA9IChwdHNbMF0gPDwgMzAgfCBwdHNbMV0gPDwgMTUgfCBwdHNbMl0pO1xuICAgICAgICAgIGxldCBkdHMgPSBbXTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICAgIGR0cy5wdXNoKG5leHQgPj4+IDEgJiAweDA3KTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBkdHMucHVzaChuZXh0ID4+PiAxKTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBkdHMucHVzaChuZXh0ID4+PiAxKTtcbiAgICAgICAgICByZXQuZHRzID0gKGR0c1swXSA8PCAzMCB8IGR0c1sxXSA8PCAxNSB8IGR0c1syXSk7XG4gICAgICAgICAgTjEgLT0gMTA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5lc2NyRmxhZyA9PT0gMSkge1xuICAgICAgICAgIGxldCBlc2NyID0gW11cbiAgICAgICAgICBsZXQgZXggPSBbXTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ID4+PiAzICYgMHgwNyk7XG4gICAgICAgICAgZXNjci5wdXNoKG5leHQgJiAweDAzKTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCA+Pj4gMTMpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZXNjci5wdXNoKG5leHQgPj4+IDEzKTtcbiAgICAgICAgICBleC5wdXNoKG5leHQgJiAweDAzKTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICAgIGV4LnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LmVzY3IgPSAoZXNjclswXSA8PCAzMCB8IGVzY3JbMV0gPDwgMjggfCBlc2NyWzJdIDw8IDE1IHwgZXNjclszXSA8PCAxMyB8IGVzY3JbNF0pICogMzAwICsgKGV4WzBdIDw8IDcgfCBleFsxXSk7XG4gICAgICAgICAgTjEgLT0gNjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmVzUmF0ZUZsYWcgPT09IDEpIHtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MjQoKTtcbiAgICAgICAgICByZXQuZXNSYXRlID0gbmV4dCA+Pj4gMSAmIDB4M2ZmZmZmO1xuICAgICAgICAgIE4xIC09IDM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5kc21GbGFnID09PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3Qgc3VwcG9ydCBEU01fdHJpY2tfbW9kZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuYWRkaXRpb25hbEZsYWcgPT09IDEpIHtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICAgIHJldC5hZGRpdGlvbmFsQ29weUluZm8gPSBuZXh0ICYgMHg3ZjtcbiAgICAgICAgICBOMSAtPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuY3JjRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHJldC5wZXNDUkMgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIE4xIC09IDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5leHRlbnNpb25GbGFnID09PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3Qgc3VwcG9ydCBleHRlbnNpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTjEgPiAwKSB7XG4gICAgICAgICAgYnVmZmVyLnNraXAoTjEpO1xuICAgICAgICB9XG4gICAgICAgIHJldC5FUyA9IFRzRGVtdXhlci5FUyhidWZmZXIsIHJldC50eXBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZm9ybWF0IGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHN0YXRpYyBFUyAoYnVmZmVyLCB0eXBlKSB7XG4gICAgbGV0IG5leHQ7XG4gICAgbGV0IHJldCA9IHt9O1xuICAgIGlmICh0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MzIoKTtcbiAgICAgIGlmIChuZXh0ICE9PSAxKSB7XG4gICAgICAgIGJ1ZmZlci5iYWNrKDQpO1xuICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MjQoKTtcbiAgICAgICAgaWYgKG5leHQgIT09IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2gyNjQgbmFsIGhlYWRlciBwYXJzZSBmYWlsZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnVmZmVyLnNraXAoMik7Ly8gMDkgRjBcbiAgICAgIC8vIFRPRE8gcmVhZG5hbHVcbiAgICAgIHJldC5idWZmZXIgPSBidWZmZXI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgIC8vIGFkdHPnmoTlkIzmraXlrZfoioLvvIwxMuS9jVxuICAgICAgaWYgKG5leHQgPj4+IDQgIT09IDB4ZmZmKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYWFjIEVTIHBhcnNlIEVycm9yJyk7XG4gICAgICB9XG4gICAgICBjb25zdCBmcSA9IFs5NjAwMCwgODgyMDAsIDY0MDAwLCA0ODAwMCwgNDQxMDAsIDMyMDAwLCAyNDAwMCwgMjIwNTAsIDE2MDAwLCAxMjAwMCwgMTEwMjUsIDgwMDAsIDczNTBdO1xuICAgICAgcmV0LmlkID0gKG5leHQgPj4+IDMgJiAweDAxKSA9PT0gMCA/ICdNUEVHLTQnIDogJ01QRUctMic7XG4gICAgICByZXQubGF5ZXIgPSBuZXh0ID4+PiAxICYgMHgwMztcbiAgICAgIHJldC5hYnNlbnQgPSBuZXh0ICYgMHgwMTtcbiAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgcmV0LmF1ZGlvT2JqZWN0VHlwZSA9IChuZXh0ID4+PiAxNCAmIDB4MDMpICsgMTtcbiAgICAgIHJldC5wcm9maWxlID0gcmV0LmF1ZGlvT2JqZWN0VHlwZSAtIDE7XG4gICAgICByZXQuZnJlcXVlbmN5SW5kZXggPSBuZXh0ID4+PiAxMCAmIDB4MGY7XG4gICAgICByZXQuZnJlcXVlbmNlID0gZnFbcmV0LmZyZXF1ZW5jeUluZGV4XTtcbiAgICAgIHJldC5jaGFubmVsID0gbmV4dCA+Pj4gNiAmIDB4MDc7XG4gICAgICByZXQuZnJhbWVMZW5ndGggPSAobmV4dCAmIDB4MDMpIDw8IDExIHwgKGJ1ZmZlci5yZWFkVWludDE2KCkgPj4+IDUpO1xuICAgICAgVHNEZW11eGVyLmdldEF1ZGlvQ29uZmlnKHJldCk7XG4gICAgICBidWZmZXIuc2tpcCgxKTtcbiAgICAgIHJldC5idWZmZXIgPSBidWZmZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRVMgJHt0eXBlfSBpcyBub3Qgc3VwcG9ydGVkYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHN0YXRpYyBUU0RUIChzdHJlYW0sIHRzLCBmcmFncykge1xuICAgIC8vIFRPRE9cbiAgICB0cy5wYXlsb2FkID0ge307XG4gIH1cblxuICBzdGF0aWMgQ0FUIChzdHJlYW0sIHRzLCBmcmFncykge1xuICAgIGxldCByZXQgPSB7fVxuICAgIHJldC50YWJsZUlEID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQuc2VjdGlvbkluZGljYXRvciA9IG5leHQgPj4+IDc7XG4gICAgcmV0LnNlY3Rpb25MZW5ndGggPSBuZXh0ICYgMHgwZmZmO1xuICAgIHN0cmVhbS5za2lwKDIpO1xuICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgcmV0LnZlcnNpb24gPSBuZXh0ID4+PiAzO1xuICAgIHJldC5jdXJyZW50TmV4dEluZGljYXRvciA9IG5leHQgJiAweDAxO1xuICAgIHJldC5zZWN0aW9uTnVtYmVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC5sYXN0U2VjdGlvbk51bWJlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgTiA9ICh0aGlzLnNlY3Rpb25MZW5ndGggLSA5KSAvIDQ7XG4gICAgbGV0IGxpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgbGlzdC5wdXNoKHt9KTtcbiAgICB9XG4gICAgcmV0LmNyYzMyID0gc3RyZWFtLnJlYWRVaW50MzIoKTtcbiAgICB0cy5wYXlsb2FkID0gcmV0O1xuICB9XG5cbiAgc3RhdGljIGdldEF1ZGlvQ29uZmlnIChyZXQpIHtcbiAgICBsZXQgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpXG4gICAgbGV0IGNvbmZpZztcbiAgICBsZXQgZXh0ZW5zaW9uU2FtcGxlSW5kZXg7XG4gICAgaWYgKC9maXJlZm94L2kudGVzdCh1c2VyQWdlbnQpKSB7XG4gICAgICBpZiAocmV0LmZyZXF1ZW5jeUluZGV4ID49IDYpIHtcbiAgICAgICAgcmV0LmF1ZGlvT2JqZWN0VHlwZSA9IDU7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSg0KTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxlSW5kZXggPSByZXQuZnJlcXVlbmN5SW5kZXggLSAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0LmF1ZGlvT2JqZWN0VHlwZSA9IDI7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxlSW5kZXggPSByZXQuZnJlcXVlbmN5SW5kZXg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh1c2VyQWdlbnQuaW5kZXhPZignYW5kcm9pZCcpICE9PSAtMSkge1xuICAgICAgcmV0LmF1ZGlvT2JqZWN0VHlwZSA9IDI7XG4gICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICBleHRlbnNpb25TYW1wbGVJbmRleCA9IHJldC5mcmVxdWVuY3lJbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0LmF1ZGlvT2JqZWN0VHlwZSA9IDU7XG4gICAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7XG4gICAgICBpZiAocmV0LmZyZXF1ZW5jeUluZGV4ID49IDYpIHtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxlSW5kZXggPSByZXQuZnJlcXVlbmN5SW5kZXggLSAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJldC5jaGFubmVsID09PSAxKSB7XG4gICAgICAgICAgcmV0LmF1ZGlvT2JqZWN0VHlwZSA9IDI7XG4gICAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICB9XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gcmV0LmZyZXF1ZW5jeUluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbmZpZ1swXSA9IHJldC5hdWRpb09iamVjdFR5cGUgPDwgMztcbiAgICBjb25maWdbMF0gfD0gKHJldC5mcmVxdWVuY3lJbmRleCAmIDB4MGUpID4+IDE7XG4gICAgY29uZmlnWzFdID0gKHJldC5mcmVxdWVuY3lJbmRleCAmIDB4MDEpIDw8IDc7XG4gICAgY29uZmlnWzFdIHw9IHJldC5jaGFubmVsIDw8IDM7XG4gICAgaWYgKHJldC5hdWRpb09iamVjdFR5cGUgPT09IDUpIHtcbiAgICAgIGNvbmZpZ1sxXSB8PSAoZXh0ZW5zaW9uU2FtcGxlSW5kZXggJiAweDBlKSA+PiAxO1xuICAgICAgY29uZmlnWzJdID0gKGV4dGVuc2lvblNhbXBsZUluZGV4ICYgMHgwMSkgPDwgNztcbiAgICAgIGNvbmZpZ1syXSB8PSAyIDw8IDI7XG4gICAgICBjb25maWdbM10gPSAwO1xuICAgIH1cbiAgICByZXQuYXVkaW9Db25maWcgPSBjb25maWc7XG4gIH1cblxuICBnZXQgaW5wdXRCdWZmZXIgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMuY29uZmlncy5pbnB1dGJ1ZmZlcik7XG4gIH1cblxuICBnZXQgX3RyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRzRGVtdXhlcjtcbiIsImNsYXNzIFBsYXlsaXN0IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZ3MpIHtcbiAgICB0aGlzLl9iYXNlVVJMID0gJyc7XG4gICAgdGhpcy5fbGlzdCA9IHt9O1xuICAgIHRoaXMuX3RzID0ge307XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICB0aGlzLnNlcXVlbmNlID0gLTE7XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5mcmFnTGVuZ3RoID0gMDtcbiAgICB0aGlzLl9sYXN0Z2V0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2F1ZG9jbGVhciA9IGNvbmZpZ3MuYXV0b2NsZWFyIHx8IGZhbHNlO1xuICB9XG5cbiAgZ2V0IGxpc3QgKCkge1xuICAgIHJldHVybiB0aGlzLl9saXN0O1xuICB9XG5cbiAgc2V0IGJhc2VVUkwgKGJhc2VVUkwpIHtcbiAgICBpZiAodGhpcy5iYXNlVVJMICE9PSBiYXNlVVJMKSB7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB0aGlzLl9iYXNlVVJMID0gYmFzZVVSTDtcbiAgICB9XG4gIH1cblxuICBnZXQgYmFzZVVSTCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jhc2VVUkw7XG4gIH1cblxuICBwdXNoICh0cywgZHVyYXRpb24sIGRpc2NvbnRpbnVlKSB7XG4gICAgaWYgKCF0aGlzLl90c1t0c10pIHtcbiAgICAgIHRoaXMuX3RzW3RzXSA9IHtkdXJhdGlvbjogZHVyYXRpb24sIFxuICAgICAgICBkb3dubG9hZGVkOiBmYWxzZSwgXG4gICAgICAgIGRvd25sb2FkaW5nOiBmYWxzZSwgXG4gICAgICAgIHN0YXJ0OiB0aGlzLmR1cmF0aW9uLCBcbiAgICAgICAgZGlzY29udGludWU6IGRpc2NvbnRpbnVlID8gdHJ1ZTogZmFsc2VcbiAgICAgIH07XG4gICAgICB0aGlzLl9saXN0W3RoaXMuZHVyYXRpb25dID0gdHM7XG4gICAgICB0aGlzLmR1cmF0aW9uICs9IGR1cmF0aW9uO1xuICAgICAgdGhpcy5mcmFnTGVuZ3RoICs9IDE7XG4gICAgfVxuICB9XG5cbiAgZGVsZXRlRnJhZyAodXJsKSB7XG4gICAgaWYgKHRoaXMuX3RzW3VybF0pIHtcbiAgICAgIGlmICh0aGlzLl90c1t1cmxdLnN0YXJ0ID4gdGhpcy5fbGFzdGdldC50aW1lKSB7XG4gICAgICAgIHRoaXMuX2xhc3RnZXQgPSB7XG4gICAgICAgICAgZHVyYXRpb246IHRoaXMuX3RzW3VybF0uZHVyYXRpb24sXG4gICAgICAgICAgdGltZTogdGhpcy5fdHNbdXJsXS5zdGFydCxcbiAgICAgICAgICBkb3dubG9hZGVkOiBmYWxzZSxcbiAgICAgICAgICBkb3dubG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVsZXRlIHRoaXMuX2xpc3RbdGhpcy5fdHNbdXJsXS5zdGFydF07XG4gICAgICBkZWxldGUgdGhpcy5fdHNbdXJsXTtcbiAgICAgIHRoaXMuZnJhZ0xlbmd0aCAtPSAxO1xuICAgIH1cbiAgfVxuXG4gIHB1c2hNM1U4IChkYXRhLCBkZWxldGVwcmUpIHtcbiAgICAvLyDluLjop4Tkv6Hmga/mm7/mjaJcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gbTN1OCBkYXRhIHJlY2VpdmVkLmApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnZlcnNpb24gPSBkYXRhLnZlcnNpb247XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IGRhdGEudGFyZ2V0ZHVyYXRpb247XG4gICAgaWYoZGF0YS5lbmNyeXB0ICYmICF0aGlzLmVuY3J5cHQpIHtcbiAgICAgIHRoaXMuZW5jcnlwdCA9IGRhdGEuZW5jcnlwdDtcbiAgICB9XG4gICAgLy8g5paw5YiG54mH5L+h5oGvXG4gICAgaWYgKGRhdGEuc2VxdWVuY2UgPiB0aGlzLnNlcXVlbmNlKSB7XG4gICAgICB0aGlzLnNlcXVlbmNlID0gZGF0YS5zZXF1ZW5jZTtcbiAgICAgIGxldCBuZXdmcmFnbGlzdCA9IFtdXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEuZnJhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGZyYWcgPSBkYXRhLmZyYWdzW2ldO1xuICAgICAgICBpZiAoIXRoaXMuX3RzW2ZyYWcudXJsXSkge1xuICAgICAgICAgIG5ld2ZyYWdsaXN0LnB1c2goZnJhZy51cmwpXG4gICAgICAgICAgdGhpcy5wdXNoKGZyYWcudXJsLCBmcmFnLmR1cmF0aW9uLCBmcmFnLmRpc2NvbnRpbnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZihuZXdmcmFnbGlzdC5sZW5ndGggPCAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuIG5vdCByZWFkIHRzIGZpbGUgbGlzdC5gKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKGRlbGV0ZXByZSkge1xuICAgICAgICBsZXQgdHNsaXN0ID0gdGhpcy5nZXRUc0xpc3QoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0c2xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAobmV3ZnJhZ2xpc3QuaW5kZXhPZih0c2xpc3RbaV0pIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5kZWxldGVGcmFnKHRzbGlzdFtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgT2xkIG0zdTggZmlsZSByZWNlaXZlZCwgJHtkYXRhLnNlcXVlbmNlfWApO1xuICAgIH1cbiAgfVxuXG4gIGdldFRzTGlzdCAoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX3RzKTtcbiAgfVxuXG4gIGRvd25sb2FkZWQgKHRzbmFtZSwgaXNsb2FkZWQpIHtcbiAgICBsZXQgdHMgPSB0aGlzLl90c1t0c25hbWVdO1xuICAgIGlmICh0cykge1xuICAgICAgdHMuZG93bmxvYWRlZCA9IGlzbG9hZGVkXG4gICAgfVxuICB9XG5cbiAgZG93bmxvYWRpbmcgKHRzbmFtZSwgbG9hZGluZykge1xuICAgIGxldCB0cyA9IHRoaXMuX3RzW3RzbmFtZV07XG4gICAgaWYgKHRzKSB7XG4gICAgICB0cy5kb3dubG9hZGluZyA9IGxvYWRpbmdcbiAgICB9XG4gIH1cblxuICBnZXRUc0J5TmFtZSAobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl90c1tuYW1lXTtcbiAgfVxuXG4gIGdldFRzICh0aW1lKSB7XG4gICAgbGV0IHRpbWVsaXN0ID0gT2JqZWN0LmtleXModGhpcy5fbGlzdCk7XG4gICAgbGV0IHRzO1xuXG4gICAgaWYgKHRpbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHRoaXMuX2xhc3RnZXQpIHtcbiAgICAgICAgdGltZSA9IHRoaXMuX2xhc3RnZXQudGltZSArIHRoaXMuX2xhc3RnZXQuZHVyYXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGltZWxpc3QubGVuZ3RoIDwgMSB8fCB0aW1lID49IHRoaXMuZHVyYXRpb24pIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRpbWVsaXN0LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KGEpIC0gcGFyc2VGbG9hdChiKVxuICAgIH0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGltZWxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aW1lID49IHBhcnNlSW50KHRpbWVsaXN0W2ldKSkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy5fbGlzdFt0aW1lbGlzdFtpXV07XG4gICAgICAgIGxldCBkb3dubG9hZGVkID0gdGhpcy5fdHNbdXJsXS5kb3dubG9hZGVkO1xuICAgICAgICBsZXQgZG93bmxvYWRpbmcgPSB0aGlzLl90c1t1cmxdLmRvd25sb2FkaW5nO1xuICAgICAgICB0cyA9IHt1cmwsIGRvd25sb2FkZWQsIGRvd25sb2FkaW5nLCB0aW1lOiBwYXJzZUludCh0aW1lbGlzdFtpXSksIGR1cmF0aW9uOiBwYXJzZUludCh0aGlzLl90c1t1cmxdLmR1cmF0aW9uKX07XG4gICAgICAgIGlmICh0aGlzLmF1dG9jbGVhcikge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl90c1t0aGlzLl9sYXN0Z2V0LnVybF07XG4gICAgICAgICAgZGVsZXRlIHRoaXMuX2xpc3RbdGhpcy5fbGFzdGdldC50aW1lXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sYXN0Z2V0ID0gdHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRzO1xuICB9XG5cbiAgY2xlYXIgKCkge1xuICAgIHRoaXMuX2Jhc2VVUkwgPSAnJztcbiAgICB0aGlzLl9saXN0ID0ge307XG4gICAgdGhpcy5fdHMgPSB7fTtcbiAgICB0aGlzLnZlcnNpb24gPSAwO1xuICAgIHRoaXMuc2VxdWVuY2UgPSAtMTtcbiAgICB0aGlzLnRhcmdldGR1cmF0aW9uID0gMDtcbiAgICB0aGlzLmR1cmF0aW9uID0gMDtcbiAgfVxuXG4gIGNsZWFyRG93bmxvYWRlZCAoKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBPYmplY3Qua2V5cyh0aGlzLl90cykubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgdHMgPSB0aGlzLl90c1tPYmplY3Qua2V5cyh0aGlzLl90cylbaV1dO1xuICAgICAgdHMuZG93bmxvYWRlZCA9IGZhbHNlO1xuICAgICAgdHMuZG93bmxvYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9iYXNlVVJMID0gJyc7XG4gICAgdGhpcy5fbGlzdCA9IHt9O1xuICAgIHRoaXMuX3RzID0ge307XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICB0aGlzLnNlcXVlbmNlID0gLTE7XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5mcmFnTGVuZ3RoID0gMDtcbiAgICB0aGlzLl9sYXN0Z2V0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2F1ZG9jbGVhciA9IGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXlsaXN0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZldGNoTG9hZGVyOiByZXF1aXJlKCcuL3NyYy9mZXRjaC1sb2FkZXInKS5kZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgRVZFTlRTIH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuXG5jb25zdCBMT0FERVJfRVZFTlRTID0gRVZFTlRTLkxPQURFUl9FVkVOVFM7XG5jb25zdCBSRUFEX1NUUkVBTSA9IDA7XG5jb25zdCBSRUFEX1RFWFQgPSAxO1xuY29uc3QgUkVBRF9KU09OID0gMjtcbmNvbnN0IFJFQURfQlVGRkVSID0gMztcbmNsYXNzIEZldGNoTG9hZGVyIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZ3MpIHtcbiAgICB0aGlzLmNvbmZpZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWdzKTtcbiAgICB0aGlzLnVybCA9IG51bGxcbiAgICB0aGlzLnN0YXR1cyA9IDBcbiAgICB0aGlzLmVycm9yID0gbnVsbFxuICAgIHRoaXMuX3JlYWRlciA9IG51bGw7XG4gICAgdGhpcy5fY2FuY2VsZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlYWR0eXBlID0gdGhpcy5jb25maWdzLnJlYWR0eXBlO1xuICAgIHRoaXMuYnVmZmVyID0gdGhpcy5jb25maWdzLmJ1ZmZlciB8fCAnTE9BREVSX0JVRkZFUic7XG4gICAgdGhpcy5fbG9hZGVyVGFza05vID0gMDtcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMub24oTE9BREVSX0VWRU5UUy5MQURFUl9TVEFSVCwgdGhpcy5sb2FkLmJpbmQodGhpcykpXG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnbG9hZGVyJ1xuICB9XG5cbiAgbG9hZCAodXJsLCBvcHRzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLl9jYW5jZWxlZCA9IGZhbHNlO1xuXG4gICAgLy8gVE9ETzogQWRkIFJhbmdlc1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLmdldFBhcmFtcyhvcHRzKVxuICAgIF90aGlzLmxvYWRpbmcgPSB0cnVlXG4gICAgcmV0dXJuIGZldGNoKHRoaXMudXJsLCBwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgX3RoaXMuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzXG4gICAgICAgIHJldHVybiBfdGhpcy5fb25GZXRjaFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfRVJST1IsIF90aGlzLlRBRywgbmV3IEVycm9yKGBpbnZhbGlkIHJlc3BvbnNlLmApKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpICB7XG4gICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCBfdGhpcy5UQUcsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvci5tZXNzYWdlKVxuICAgIH0pXG4gIH1cblxuICBfb25GZXRjaFJlc3BvbnNlIChyZXNwb25zZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGJ1ZmZlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5idWZmZXIpO1xuICAgIHRoaXMuX2xvYWRlclRhc2tObysrO1xuICAgIGxldCB0YXNrbm8gPSB0aGlzLl9sb2FkZXJUYXNrTm87XG4gICAgaWYgKHJlc3BvbnNlLm9rID09PSB0cnVlKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMucmVhZHR5cGUpIHtcbiAgICAgICAgY2FzZSBSRUFEX0pTT046XG4gICAgICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5fY2FuY2VsZWQgJiYgIV90aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSRUFEX1RFWFQ6XG4gICAgICAgICAgcmVzcG9uc2UudGV4dCgpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5fY2FuY2VsZWQgJiYgIV90aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSRUFEX0JVRkZFUjpcbiAgICAgICAgICByZXNwb25zZS5hcnJheUJ1ZmZlcigpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5fY2FuY2VsZWQgJiYgIV90aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKG5ldyBVaW50OEFycmF5KGRhdGEpKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUkVBRF9TVFJFQU06XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX29uUmVhZGVyKHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCksIHRhc2tubyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX29uUmVhZGVyIChyZWFkZXIsIHRhc2tubykge1xuICAgIGxldCBidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMuYnVmZmVyKTtcbiAgICBpZiAoKCFidWZmZXIgJiYgdGhpcy5fcmVhZGVyKSB8fCB0aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX3JlYWRlci5jYW5jZWwoKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBETyBOT1RISU5HXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fcmVhZGVyID0gcmVhZGVyXG4gICAgaWYgKHRoaXMubG9hZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBfdGhpcyA9IHRoaXNcbiAgICAvLyByZWFkZXIgcmVhZCBmdW5jdGlvbiByZXR1cm5zIGEgUHJvbWlzZS4gZ2V0IGRhdGEgd2hlbiBjYWxsYmFjayBhbmQgaGFzIHZhbHVlLmRvbmUgd2hlbiBkaXNjb25uZWN0ZWQuXG4gICAgLy8gcmVhZOaWueazlei/lOWbnuS4gOS4qlByb21pc2UuIOWbnuiwg+S4reWPr+S7peiOt+WPluWIsOaVsOaNruOAguW9k3ZhbHVlLmRvbmXlrZjlnKjml7bvvIzor7TmmI7pk77mjqXmlq3lvIDjgIJcbiAgICB0aGlzLl9yZWFkZXIgJiYgdGhpcy5fcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIGlmICh2YWwuZG9uZSkge1xuICAgICAgICAvLyBUT0RPOiDlrozmiJDlpITnkIZcbiAgICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICAgIF90aGlzLnN0YXR1cyA9IDA7XG4gICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGJ1ZmZlcilcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5fY2FuY2VsZWQgfHwgX3RoaXMuX2Rlc3Ryb3llZCkge1xuICAgICAgICBpZiAgKF90aGlzLl9yZWFkZXIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgX3RoaXMuX3JlYWRlci5jYW5jZWwoKVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIERPIE5PVEhJTkdcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBidWZmZXIucHVzaCh2YWwudmFsdWUpXG4gICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0RBVEFMT0FERUQsIGJ1ZmZlcilcbiAgICAgIHJldHVybiBfdGhpcy5fb25SZWFkZXIocmVhZGVyLCB0YXNrbm8pXG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCBfdGhpcy5UQUcsIGVycm9yKTtcbiAgICB9KVxuICB9XG5cbiAgZ2V0UGFyYW1zIChvcHRzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRzKVxuICAgIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuXG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgbW9kZTogJ2NvcnMnLFxuICAgICAgY2FjaGU6ICdkZWZhdWx0J1xuICAgIH1cblxuICAgIC8vIGFkZCBjdXN0bW9yIGhlYWRlcnNcbiAgICAvLyDmt7vliqDoh6rlrprkuYnlpLRcbiAgICBpZiAodHlwZW9mIHRoaXMuY29uZmlncy5oZWFkZXJzID09PSAnb2JqZWN0Jykge1xuICAgICAgbGV0IGNvbmZpZ0hlYWRlcnMgPSB0aGlzLmNvbmZpZ3MuaGVhZGVyc1xuICAgICAgZm9yIChsZXQga2V5IGluIGNvbmZpZ0hlYWRlcnMpIHtcbiAgICAgICAgaWYgKGNvbmZpZ0hlYWRlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgY29uZmlnSGVhZGVyc1trZXldKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmhlYWRlcnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBsZXQgb3B0SGVhZGVycyA9IG9wdGlvbnMuaGVhZGVyc1xuICAgICAgZm9yIChsZXQga2V5IGluIG9wdEhlYWRlcnMpIHtcbiAgICAgICAgaWYgKG9wdEhlYWRlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgb3B0SGVhZGVyc1trZXldKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY29ycyA9PT0gZmFsc2UpIHtcbiAgICAgIHBhcmFtcy5tb2RlID0gJ3NhbWUtb3JpZ2luJ1xuICAgIH1cblxuICAgIC8vIHdpdGhDcmVkZW50aWFscyBpcyBkaXNhYmxlZCBieSBkZWZhdWx0XG4gICAgLy8gd2l0aENyZWRlbnRpYWxzIOWcqOm7mOiupOaDheWGteS4i+S4jeiiq+S9v+eUqOOAglxuICAgIGlmIChvcHRpb25zLndpdGhDcmVkZW50aWFscykge1xuICAgICAgcGFyYW1zLmNyZWRlbnRpYWxzID0gJ2luY2x1ZGUnXG4gICAgfVxuXG4gICAgLy8gVE9ETzogQWRkIHJhbmdlcztcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgY2FuY2VsICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9yZWFkZXIuY2FuY2VsKClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8g6Ziy5q2iZmFpbGVkOiAyMDDplJnor6/ooqvmiZPljbDliLDmjqfliLblj7DkuIpcbiAgICAgIH1cbiAgICAgIHRoaXMuX3JlYWRlciA9IG51bGxcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICB0aGlzLl9jYW5jZWxlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fZGVzdHJveWVkID0gdHJ1ZVxuICAgIHRoaXMuY2FuY2VsKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmV0Y2hMb2FkZXJcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBNcDRSZW11eGVyOiByZXF1aXJlKCcuL3NyYy9tcDQnKS5kZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuXG4vLyBjb25zdCBVSU5UMzJfTUFYID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcbmNsYXNzIEZtcDQge1xuICBzdGF0aWMgc2l6ZSAodmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLndyaXRlVWludDMyKHZhbHVlKVxuICB9XG4gIHN0YXRpYyBpbml0Qm94IChzaXplLCBuYW1lLCAuLi5jb250ZW50KSB7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZShzaXplKSwgRm1wNC50eXBlKG5hbWUpLCAuLi5jb250ZW50KVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIGV4dGVuc2lvbiAodmVyc2lvbiwgZmxhZykge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXG4gICAgICB2ZXJzaW9uLFxuICAgICAgKGZsYWcgPj4gMTYpICYgMHhmZixcbiAgICAgIChmbGFnID4+IDgpICYgMHhmZixcbiAgICAgIGZsYWcgJiAweGZmXG4gICAgXSlcbiAgfVxuICBzdGF0aWMgZnR5cCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyNCwgJ2Z0eXAnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDY5LCAweDczLCAweDZGLCAweDZELCAvLyBpc29tLFxuICAgICAgMHgwLCAweDAsIDB4MDAsIDB4MDEsIC8vIG1pbm9yX3ZlcnNpb246IDB4MDFcbiAgICAgIDB4NjksIDB4NzMsIDB4NkYsIDB4NkQsIC8vIGlzb21cbiAgICAgIDB4NjEsIDB4NzYsIDB4NjMsIDB4MzEgLy8gYXZjMVxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBtb292ICh7IHR5cGUsIG1ldGEgfSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCBtdmhkID0gRm1wNC5tdmhkKG1ldGEuZHVyYXRpb24sIG1ldGEudGltZXNjYWxlKVxuICAgIGxldCB0cmFrXG5cbiAgICBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgdHJhayA9IEZtcDQudmlkZW9UcmFrKG1ldGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYWsgPSBGbXA0LmF1ZGlvVHJhayhtZXRhKVxuICAgIH1cblxuICAgIGxldCBtdmV4ID0gRm1wNC5tdmV4KG1ldGEuZHVyYXRpb24sIG1ldGEudGltZXNjYWxlIHx8IDEwMDAsIG1ldGEuaWQpO1xuICAgIFttdmhkLCB0cmFrLCBtdmV4XS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21vb3YnLCBtdmhkLCB0cmFrLCBtdmV4KVxuICB9XG4gIHN0YXRpYyBtdmhkIChkdXJhdGlvbiwgdGltZXNjYWxlID0gMTAwMCkge1xuICAgIC8vIGR1cmF0aW9uICo9IHRpbWVzY2FsZTtcbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3MgICAgIDHkvY3nmoRib3jniYjmnKwrM+S9jWZsYWdzICAgYm9454mI5pys77yMMOaIljHvvIzkuIDoiKzkuLow44CC77yI5Lul5LiL5a2X6IqC5pWw5Z2H5oyJdmVyc2lvbj0w77yJXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1lICAgIOWIm+W7uuaXtumXtCAg77yI55u45a+55LqOVVRD5pe26Ze0MTkwNC0wMS0wMembtueCueeahOenkuaVsO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uX3RpbWUgICDkv67mlLnml7bpl7RcblxuICAgICAgLyoqXG4gICAgICAgICAgICAgKiB0aW1lc2NhbGU6IDQgYnl0ZXPmlofku7blqpLkvZPlnKgx56eS5pe26Ze05YaF55qE5Yi75bqm5YC877yM5Y+v5Lul55CG6Kej5Li6MeenkumVv+W6plxuICAgICAgICAgICAgICovXG4gICAgICAodGltZXNjYWxlID4+PiAyNCkgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSA+Pj4gMTYpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUgPj4+IDgpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUpICYgMHhGRixcblxuICAgICAgLyoqXG4gICAgICAgICAgICAgKiBkdXJhdGlvbjogNCBieXRlc+ivpXRyYWNr55qE5pe26Ze06ZW/5bqm77yM55SoZHVyYXRpb27lkox0aW1lIHNjYWxl5YC85Y+v5Lul6K6h566XdHJhY2vml7bplb/vvIzmr5TlpoJhdWRpbyB0cmFja+eahHRpbWUgc2NhbGUgPSA4MDAwLFxuICAgICAgICAgICAgICogZHVyYXRpb24gPSA1NjAxMjjvvIzml7bplb/kuLo3MC4wMTbvvIx2aWRlbyB0cmFja+eahHRpbWUgc2NhbGUgPSA2MDAsIGR1cmF0aW9uID0gNDIwMDDvvIzml7bplb/kuLo3MFxuICAgICAgICAgICAgICovXG4gICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDgpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbikgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8gUHJlZmVycmVkIHJhdGU6IDEuMCAgIOaOqOiNkOaSreaUvumAn+eOh++8jOmrmDE25L2N5ZKM5L2OMTbkvY3liIbliKvkuLrlsI/mlbDngrnmlbTmlbDpg6jliIblkozlsI/mlbDpg6jliIbvvIzljbNbMTYuMTZdIOagvOW8j++8jOivpeWAvOS4ujEuMO+8iDB4MDAwMTAwMDDvvInooajnpLrmraPluLjliY3lkJHmkq3mlL5cbiAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJlZmVycmVkVm9sdW1lKDEuMCwgMmJ5dGVzKSArIHJlc2VydmVkKDJieXRlcylcbiAgICAgICAgICAgICAqIOS4jnJhdGXnsbvkvLzvvIxbOC44XSDmoLzlvI/vvIwxLjDvvIgweDAxMDDvvInooajnpLrmnIDlpKfpn7Pph49cbiAgICAgICAgICAgICAqL1xuICAgICAgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vICByZXNlcnZlZDogNCArIDQgYnl0ZXPkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyAtLS0tYmVnaW4gY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIOinhumikeWPmOaNouefqemYtSAgIOe6v+aAp+S7o+aVsFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDQwLCAweDAwLCAweDAwLCAweDAwLCAvLyAtLS0tZW5kIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBwcmVfZGVmaW5lZCA2ICogNCBieXRlcy0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmUtZGVmaW5lZCDkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gLS0tLWVuZCBwcmVfZGVmaW5lZCA2ICogNCBieXRlcy0tLS1cbiAgICAgIDB4RkYsIDB4RkYsIDB4RkYsIDB4RkYgLy8gbmV4dF90cmFja19JRCDkuIvkuIDkuKp0cmFja+S9v+eUqOeahGlk5Y+3XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDggKyBieXRlcy5sZW5ndGgsICdtdmhkJywgbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpKVxuICB9XG4gIHN0YXRpYyB2aWRlb1RyYWsgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcblxuICAgIGxldCB0a2hkID0gRm1wNC50a2hkKHtcbiAgICAgIGlkOiAxLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICB3aWR0aDogZGF0YS5wcmVzZW50V2lkdGgsXG4gICAgICBoZWlnaHQ6IGRhdGEucHJlc2VudEhlaWdodCxcbiAgICAgIHR5cGU6ICd2aWRlbydcbiAgICB9KVxuICAgIGxldCBtZGlhID0gRm1wNC5tZGlhKHtcbiAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIGF2Y2M6IGRhdGEuYXZjYyxcbiAgICAgIHBhclJhdGlvOiBkYXRhLnBhclJhdGlvLFxuICAgICAgd2lkdGg6IGRhdGEucHJlc2VudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkYXRhLnByZXNlbnRIZWlnaHRcbiAgICB9KTtcbiAgICBbdGtoZCwgbWRpYV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFrJywgdGtoZCwgbWRpYSlcbiAgfVxuICBzdGF0aWMgYXVkaW9UcmFrIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IHRraGQgPSBGbXA0LnRraGQoe1xuICAgICAgaWQ6IDIsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgIH0pXG4gICAgbGV0IG1kaWEgPSBGbXA0Lm1kaWEoe1xuICAgICAgdHlwZTogJ2F1ZGlvJyxcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIGR1cmF0aW9uOiBkYXRhLmR1cmF0aW9uLFxuICAgICAgY2hhbm5lbENvdW50OiBkYXRhLmNoYW5uZWxDb3VudCxcbiAgICAgIHNhbXBsZXJhdGU6IGRhdGEuc2FtcGxlUmF0ZSxcbiAgICAgIGNvbmZpZzogZGF0YS5jb25maWdcbiAgICB9KTtcbiAgICBbdGtoZCwgbWRpYV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFrJywgdGtoZCwgbWRpYSlcbiAgfVxuICBzdGF0aWMgdGtoZCAoZGF0YSkge1xuICAgIGxldCBpZCA9IGRhdGEuaWRcbiAgICBsZXQgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uXG4gICAgbGV0IHdpZHRoID0gZGF0YS53aWR0aFxuICAgIGxldCBoZWlnaHQgPSBkYXRhLmhlaWdodFxuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwNywgLy8gdmVyc2lvbigwKSArIGZsYWdzIDHkvY3niYjmnKwgYm9454mI5pys77yMMOaIljHvvIzkuIDoiKzkuLow44CC77yI5Lul5LiL5a2X6IqC5pWw5Z2H5oyJdmVyc2lvbj0w77yJ5oyJ5L2N5oiW5pON5L2c57uT5p6c5YC877yM6aKE5a6a5LmJ5aaC5LiL77yaXG4gICAgICAvLyAweDAwMDAwMSB0cmFja19lbmFibGVk77yM5ZCm5YiZ6K+ldHJhY2vkuI3ooqvmkq3mlL7vvJtcbiAgICAgIC8vIDB4MDAwMDAyIHRyYWNrX2luX21vdmll77yM6KGo56S66K+ldHJhY2vlnKjmkq3mlL7kuK3ooqvlvJXnlKjvvJtcbiAgICAgIC8vIDB4MDAwMDA0IHRyYWNrX2luX3ByZXZpZXfvvIzooajnpLror6V0cmFja+WcqOmihOiniOaXtuiiq+W8leeUqOOAglxuICAgICAgLy8g5LiA6Iis6K+l5YC85Li6N++8jDErMis0IOWmguaenOS4gOS4quWqkuS9k+aJgOaciXRyYWNr5Z2H5pyq6K6+572udHJhY2tfaW5fbW92aWXlkox0cmFja19pbl9wcmV2aWV377yM5bCG6KKr55CG6Kej5Li65omA5pyJdHJhY2vlnYforr7nva7kuobov5nkuKTpobnvvJvlr7nkuo5oaW50IHRyYWNr77yM6K+l5YC85Li6MFxuICAgICAgLy8gaGludCB0cmFjayDov5nkuKrnibnmrornmoR0cmFja+W5tuS4jeWMheWQq+WqkuS9k+aVsOaNru+8jOiAjOaYr+WMheWQq+S6huS4gOS6m+WwhuWFtuS7luaVsOaNrnRyYWNr5omT5YyF5oiQ5rWB5aqS5L2T55qE5oyH56S65L+h5oGv44CCXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1l5Yib5bu65pe26Ze077yI55u45a+55LqOVVRD5pe26Ze0MTkwNC0wMS0wMembtueCueeahOenkuaVsO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uIHRpbWUg5L+u5pS55pe26Ze0XG4gICAgICAoaWQgPj4+IDI0KSAmIDB4RkYsIC8vIHRyYWNrX0lEOiA0IGJ5dGVzIGlk5Y+377yM5LiN6IO96YeN5aSN5LiU5LiN6IO95Li6MFxuICAgICAgKGlkID4+PiAxNikgJiAweEZGLFxuICAgICAgKGlkID4+PiA4KSAmIDB4RkYsXG4gICAgICAoaWQpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiA0IGJ5dGVzICAgIOS/neeVmeS9jVxuICAgICAgKGR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBkdXJhdGlvbjogNCBieXRlcyB0cmFja+eahOaXtumXtOmVv+W6plxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiAyICogNCBieXRlcyAgICDkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBsYXllcigyYnl0ZXMpICsgYWx0ZXJuYXRlX2dyb3VwKDJieXRlcykgIOinhumikeWxgu+8jOm7mOiupOS4ujDvvIzlgLzlsI/nmoTlnKjkuIrlsYIudHJhY2vliIbnu4Tkv6Hmga/vvIzpu5jorqTkuLow6KGo56S66K+ldHJhY2vmnKrkuI7lhbbku5Z0cmFja+aciee+pOe7hOWFs+ezu1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdm9sdW1lKDJieXRlcykgKyByZXNlcnZlZCgyYnl0ZXMpICAgIFs4LjhdIOagvOW8j++8jOWmguaenOS4uumfs+mikXRyYWNr77yMMS4w77yIMHgwMTAw77yJ6KGo56S65pyA5aSn6Z+z6YeP77yb5ZCm5YiZ5Li6MCAgICvkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBjb21wb3NpdGlvbiBtYXRyaXgtLS0tXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyDop4bpopHlj5jmjaLnn6npmLVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgKHdpZHRoID4+PiA4KSAmIDB4RkYsIC8vIC8v5a695bqmXG4gICAgICAod2lkdGgpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAoaGVpZ2h0ID4+PiA4KSAmIDB4RkYsIC8vIOmrmOW6plxuICAgICAgKGhlaWdodCkgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoLCAndGtoZCcsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIGVkdHMgKGRhdGEpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvblxuICAgIGxldCBtZWRpYVRpbWUgPSBkYXRhLm1lZGlhVGltZVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMzYpLCBGbXA0LnR5cGUoJ2VkdHMnKSlcbiAgICAvLyBlbHN0XG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSgyOCksIEZtcDQudHlwZSgnZWxzdCcpKVxuICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeSBjb3VudFxuICAgICAgKGR1cmF0aW9uID4+IDI0KSAmIDB4ZmYsIChkdXJhdGlvbiA+PiAxNikgJiAweGZmLCAoZHVyYXRpb24gPj4gOCkgJiAweGZmLCBkdXJhdGlvbiAmIDB4ZmYsXG4gICAgICAobWVkaWFUaW1lID4+IDI0KSAmIDB4ZmYsIChtZWRpYVRpbWUgPj4gMTYpICYgMHhmZiwgKG1lZGlhVGltZSA+PiA4KSAmIDB4ZmYsIG1lZGlhVGltZSAmIDB4ZmYsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxIC8vIG1lZGlhIHJhdGVcbiAgICBdKSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBtZGlhIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IG1kaGQgPSBGbXA0Lm1kaGQoZGF0YS50aW1lc2NhbGUsIGRhdGEuZHVyYXRpb24pXG4gICAgbGV0IGhkbHIgPSBGbXA0LmhkbHIoZGF0YS50eXBlKVxuICAgIGxldCBtaW5mID0gRm1wNC5taW5mKGRhdGEpO1xuICAgIFttZGhkLCBoZGxyLCBtaW5mXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21kaWEnLCBtZGhkLCBoZGxyLCBtaW5mKVxuICB9XG4gIHN0YXRpYyBtZGhkICh0aW1lc2NhbGUgPSAxMDAwLCBkdXJhdGlvbikge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY3JlYXRpb25fdGltZSAgICDliJvlu7rml7bpl7RcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1vZGlmaWNhdGlvbl90aW1l5L+u5pS55pe26Ze0XG4gICAgICAodGltZXNjYWxlID4+PiAyNCkgJiAweEZGLCAvLyB0aW1lc2NhbGU6IDQgYnl0ZXMgICAg5paH5Lu25aqS5L2T5ZyoMeenkuaXtumXtOWGheeahOWIu+W6puWAvO+8jOWPr+S7peeQhuino+S4ujHnp5Lplb/luqZcbiAgICAgICh0aW1lc2NhbGUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlID4+PiA4KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlKSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsIC8vIGR1cmF0aW9uOiA0IGJ5dGVzICB0cmFja+eahOaXtumXtOmVv+W6plxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4NTUsIDB4QzQsIC8vIGxhbmd1YWdlOiB1bmQgKHVuZGV0ZXJtaW5lZCkg5aqS5L2T6K+t6KiA56CB44CC5pyA6auY5L2N5Li6MO+8jOWQjumdojE15L2N5Li6M+S4quWtl+espu+8iOingUlTTyA2MzktMi9U5qCH5YeG5Lit5a6a5LmJ77yJXG4gICAgICAweDAwLCAweDAwIC8vIHByZV9kZWZpbmVkID0gMFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxMiArIGNvbnRlbnQuYnl0ZUxlbmd0aCwgJ21kaGQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgaGRsciAodHlwZSkge1xuICAgIGxldCB2YWx1ZSA9IFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmVfZGVmaW5lZFxuICAgICAgMHg3NiwgMHg2OSwgMHg2NCwgMHg2NSwgLy8gaGFuZGxlcl90eXBlOiAndmlkZSdcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4NTYsIDB4NjksIDB4NjQsIDB4NjUsXG4gICAgICAweDZmLCAweDQ4LCAweDYxLCAweDZlLFxuICAgICAgMHg2NCwgMHg2YywgMHg2NSwgMHg3MiwgMHgwMCAvLyBuYW1lOiAnVmlkZW9IYW5kbGVyJ1xuICAgIF1cbiAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgdmFsdWUuc3BsaWNlKDgsIDQsIC4uLlsweDczLCAweDZmLCAweDc1LCAweDZlXSlcbiAgICAgIHZhbHVlLnNwbGljZSgyNCwgMTMsIC4uLlsweDUzLCAweDZmLCAweDc1LCAweDZlLFxuICAgICAgICAweDY0LCAweDQ4LCAweDYxLCAweDZlLFxuICAgICAgICAweDY0LCAweDZjLCAweDY1LCAweDcyLCAweDAwXSlcbiAgICB9XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgdmFsdWUubGVuZ3RoLCAnaGRscicsIG5ldyBVaW50OEFycmF5KHZhbHVlKSlcbiAgfVxuICBzdGF0aWMgbWluZiAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB2bWhkID0gZGF0YS50eXBlID09PSAndmlkZW8nID8gRm1wNC52bWhkKCkgOiBGbXA0LnNtaGQoKVxuICAgIGxldCBkaW5mID0gRm1wNC5kaW5mKClcbiAgICBsZXQgc3RibCA9IEZtcDQuc3RibChkYXRhKTtcbiAgICBbdm1oZCwgZGluZiwgc3RibF0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICdtaW5mJywgdm1oZCwgZGluZiwgc3RibClcbiAgfVxuICBzdGF0aWMgdm1oZCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyMCwgJ3ZtaGQnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAxLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgLy8gZ3JhcGhpY3Ntb2RlXG4gICAgICAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAgLy8gb3Bjb2xvclxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBzbWhkICgpIHtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc21oZCcsIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAvLyBiYWxhbmNlXG4gICAgICAweDAwLCAweDAwIC8vIHJlc2VydmVkXG4gICAgXSkpXG4gIH1cbiAgc3RhdGljIGRpbmYgKCkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgZHJlZiA9IFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeV9jb3VudFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwYywgLy8gZW50cnlfc2l6ZVxuICAgICAgMHg3NSwgMHg3MiwgMHg2YywgMHgyMCwgLy8gJ3VybCcgdHlwZVxuICAgICAgMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAxIC8vIGVudHJ5X2ZsYWdzXG4gICAgXVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMzYpLCBGbXA0LnR5cGUoJ2RpbmYnKSwgRm1wNC5zaXplKDI4KSwgRm1wNC50eXBlKCdkcmVmJyksIG5ldyBVaW50OEFycmF5KGRyZWYpKVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIHN0YmwgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgc3RzZCA9IEZtcDQuc3RzZChkYXRhKVxuICAgIGxldCBzdHRzID0gRm1wNC5zdHRzKClcbiAgICBsZXQgc3RzYyA9IEZtcDQuc3RzYygpXG4gICAgbGV0IHN0c3ogPSBGbXA0LnN0c3ooKVxuICAgIGxldCBzdGNvID0gRm1wNC5zdGNvKCk7XG4gICAgW3N0c2QsIHN0dHMsIHN0c2MsIHN0c3osIHN0Y29dLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnc3RibCcsIHN0c2QsIHN0dHMsIHN0c2MsIHN0c3osIHN0Y28pXG4gIH1cbiAgc3RhdGljIHN0c2QgKGRhdGEpIHtcbiAgICBsZXQgY29udGVudFxuICAgIGlmIChkYXRhLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIC8vIGlmICghZGF0YS5pc0FBQyAmJiBkYXRhLmNvZGVjID09PSAnbXA0Jykge1xuICAgICAgLy8gICAgIGNvbnRlbnQgPSBGTVA0Lm1wMyhkYXRhKTtcbiAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAvL1xuICAgICAgLy8gfVxuICAgICAgLy8g5pSv5oyBbXA0YVxuICAgICAgY29udGVudCA9IEZtcDQubXA0YShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ID0gRm1wNC5hdmMxKGRhdGEpXG4gICAgfVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYgKyBjb250ZW50LmJ5dGVMZW5ndGgsICdzdHNkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIG5ldyBVaW50OEFycmF5KFsweDAwLCAweDAwLCAweDAwLCAweDAxXSksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG1wNGEgKGRhdGEpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSwgLy8gZGF0YV9yZWZlcmVuY2VfaW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgZGF0YS5jaGFubmVsQ291bnQsIC8vIGNoYW5uZWxjb3VudFxuICAgICAgMHgwMCwgMHgxMCwgLy8gc2FtcGxlU2l6ZToxNmJpdHNcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkMlxuICAgICAgKGRhdGEuc2FtcGxlcmF0ZSA+PiA4KSAmIDB4ZmYsXG4gICAgICBkYXRhLnNhbXBsZXJhdGUgJiAweGZmLCAvL1xuICAgICAgMHgwMCwgMHgwMFxuICAgIF0pXG4gICAgbGV0IGVzZHMgPSBGbXA0LmVzZHMoZGF0YS5jb25maWcpXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoICsgZXNkcy5ieXRlTGVuZ3RoLCAnbXA0YScsIGNvbnRlbnQsIGVzZHMpXG4gIH1cbiAgc3RhdGljIGVzZHMgKGNvbmZpZyA9IFs0MywgMTQ2LCA4LCAwXSkge1xuICAgIGNvbnN0IGNvbmZpZ2xlbiA9IGNvbmZpZy5sZW5ndGhcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG5cbiAgICAgIDB4MDMsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgxNyArIGNvbmZpZ2xlbiwgLy8gbGVuZ3RoXG4gICAgICAweDAwLCAweDAxLCAvLyBlc19pZFxuICAgICAgMHgwMCwgLy8gc3RyZWFtX3ByaW9yaXR5XG5cbiAgICAgIDB4MDQsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgwZiArIGNvbmZpZ2xlbiwgLy8gbGVuZ3RoXG4gICAgICAweDQwLCAvLyBjb2RlYyA6IG1wZWc0X2F1ZGlvXG4gICAgICAweDE1LCAvLyBzdHJlYW1fdHlwZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gYnVmZmVyX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGF2Z0JpdHJhdGVcblxuICAgICAgMHgwNSAvLyBkZXNjcmlwdG9yX3R5cGVcbiAgICBdLmNvbmNhdChbY29uZmlnbGVuXSkuY29uY2F0KGNvbmZpZykuY29uY2F0KFsweDA2LCAweDAxLCAweDAyXSkpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSg4ICsgY29udGVudC5ieXRlTGVuZ3RoKSwgRm1wNC50eXBlKCdlc2RzJyksIGNvbnRlbnQpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgYXZjMSAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2l6ZSA9IDQwLy8gOChhdmMxKSs4KGF2Y2MpKzgoYnRydCkrMTYocGFzcClcbiAgICAvLyBsZXQgc3BzID0gZGF0YS5zcHNcbiAgICAvLyBsZXQgcHBzID0gZGF0YS5wcHNcbiAgICBsZXQgd2lkdGggPSBkYXRhLndpZHRoXG4gICAgbGV0IGhlaWdodCA9IGRhdGEuaGVpZ2h0XG4gICAgbGV0IGhTcGFjaW5nID0gZGF0YS5wYXJSYXRpby5oZWlnaHRcbiAgICBsZXQgdlNwYWNpbmcgPSBkYXRhLnBhclJhdGlvLndpZHRoXG4gICAgLy8gbGV0IGF2Y2NCdWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICAvLyBhdmNjQnVmZmVyLndyaXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAvLyAgIDB4MDEsIC8vIHZlcnNpb25cbiAgICAvLyAgIHNwc1sxXSwgLy8gcHJvZmlsZVxuICAgIC8vICAgc3BzWzJdLCAvLyBwcm9maWxlIGNvbXBhdGlibGVcbiAgICAvLyAgIHNwc1szXSwgLy8gbGV2ZWxcbiAgICAvLyAgIDB4ZmMgfCAzLFxuICAgIC8vICAgMHhFMCB8IDEgLy8g55uu5YmN5Y+q5aSE55CG5LiA5Liqc3BzXG4gICAgLy8gXS5jb25jYXQoW3Nwcy5sZW5ndGggPj4+IDggJiAweGZmLCBzcHMubGVuZ3RoICYgMHhmZl0pKSlcbiAgICAvLyBhdmNjQnVmZmVyLndyaXRlKHNwcywgbmV3IFVpbnQ4QXJyYXkoWzEsIHBwcy5sZW5ndGggPj4+IDggJiAweGZmLCBwcHMubGVuZ3RoICYgMHhmZl0pLCBwcHMpXG5cbiAgICBsZXQgYXZjYyA9IGRhdGEuYXZjY1xuICAgIGxldCBhdmMxID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAvLyBkYXRhX3JlZmVyZW5jZV9pbmRleFxuICAgICAgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAod2lkdGggPj4gOCkgJiAweGZmLFxuICAgICAgd2lkdGggJiAweGZmLCAvLyB3aWR0aFxuICAgICAgKGhlaWdodCA+PiA4KSAmIDB4ZmYsXG4gICAgICBoZWlnaHQgJiAweGZmLCAvLyBoZWlnaHRcbiAgICAgIDB4MDAsIDB4NDgsIDB4MDAsIDB4MDAsIC8vIGhvcml6cmVzb2x1dGlvblxuICAgICAgMHgwMCwgMHg0OCwgMHgwMCwgMHgwMCwgLy8gdmVydHJlc29sdXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAvLyBmcmFtZV9jb3VudFxuICAgICAgMHgxMixcbiAgICAgIDB4NjQsIDB4NjEsIDB4NjksIDB4NkMsIC8vIGRhaWx5bW90aW9uL2hscy5qc1xuICAgICAgMHg3OSwgMHg2RCwgMHg2RiwgMHg3NCxcbiAgICAgIDB4NjksIDB4NkYsIDB4NkUsIDB4MkYsXG4gICAgICAweDY4LCAweDZDLCAweDczLCAweDJFLFxuICAgICAgMHg2QSwgMHg3MywgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY29tcHJlc3Nvcm5hbWVcbiAgICAgIDB4MDAsIDB4MTgsIC8vIGRlcHRoID0gMjRcbiAgICAgIDB4MTEsIDB4MTFdKSAvLyBwcmVfZGVmaW5lZCA9IC0xXG4gICAgbGV0IGJ0cnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDFjLCAweDljLCAweDgwLCAvLyBidWZmZXJTaXplREJcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzAsIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzAgLy8gYXZnQml0cmF0ZVxuICAgIF0pXG4gICAgbGV0IHBhc3AgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAoaFNwYWNpbmcgPj4gMjQpLCAvLyBoU3BhY2luZ1xuICAgICAgKGhTcGFjaW5nID4+IDE2KSAmIDB4ZmYsXG4gICAgICAoaFNwYWNpbmcgPj4gOCkgJiAweGZmLFxuICAgICAgaFNwYWNpbmcgJiAweGZmLFxuICAgICAgKHZTcGFjaW5nID4+IDI0KSwgLy8gdlNwYWNpbmdcbiAgICAgICh2U3BhY2luZyA+PiAxNikgJiAweGZmLFxuICAgICAgKHZTcGFjaW5nID4+IDgpICYgMHhmZixcbiAgICAgIHZTcGFjaW5nICYgMHhmZlxuICAgIF0pXG5cbiAgICBidWZmZXIud3JpdGUoXG4gICAgICBGbXA0LnNpemUoc2l6ZSArIGF2YzEuYnl0ZUxlbmd0aCArIGF2Y2MuYnl0ZUxlbmd0aCArIGJ0cnQuYnl0ZUxlbmd0aCksIEZtcDQudHlwZSgnYXZjMScpLCBhdmMxLFxuICAgICAgRm1wNC5zaXplKDggKyBhdmNjLmJ5dGVMZW5ndGgpLCBGbXA0LnR5cGUoJ2F2Y0MnKSwgYXZjYyxcbiAgICAgIEZtcDQuc2l6ZSgyMCksIEZtcDQudHlwZSgnYnRydCcpLCBidHJ0LFxuICAgICAgRm1wNC5zaXplKDE2KSwgRm1wNC50eXBlKCdwYXNwJyksIHBhc3BcbiAgICApXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgc3R0cyAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBlbnRyeV9jb3VudFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3N0dHMnLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBzdHNjICgpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIGVudHJ5X2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc3RzYycsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHN0Y28gKCkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZW50cnlfY291bnRcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICdzdGNvJywgY29udGVudClcbiAgfVxuICBzdGF0aWMgc3RzeiAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gc2FtcGxlX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gc2FtcGxlX2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDIwLCAnc3RzeicsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG12ZXggKGR1cmF0aW9uLCB0aW1lc2NhbGUgPSAxMDAwLCB0cmFja0lEKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBtZWhkID0gQnVmZmVyLndyaXRlVWludDMyKGR1cmF0aW9uKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoNTYpLCBGbXA0LnR5cGUoJ212ZXgnKSwgRm1wNC5zaXplKDE2KSwgRm1wNC50eXBlKCdtZWhkJyksIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBtZWhkLCBGbXA0LnRyZXgodHJhY2tJRCkpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgdHJleCAoaWQpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIChpZCA+PiAyNCksXG4gICAgICAoaWQgPj4gMTYpICYgMHhmZixcbiAgICAgIChpZCA+PiA4KSAmIDB4ZmYsXG4gICAgICAoaWQgJiAweGZmKSwgLy8gdHJhY2tfSURcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGRlZmF1bHRfc2FtcGxlX2Rlc2NyaXB0aW9uX2luZGV4XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9kdXJhdGlvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZGVmYXVsdF9zYW1wbGVfc2l6ZVxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMSAvLyBkZWZhdWx0X3NhbXBsZV9mbGFnc1xuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoLCAndHJleCcsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG1vb2YgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgbWZoZCA9IEZtcDQubWZoZCgpXG4gICAgbGV0IHRyYWYgPSBGbXA0LnRyYWYoZGF0YSk7XG4gICAgW21maGQsIHRyYWZdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnbW9vZicsIG1maGQsIHRyYWYpXG4gIH1cbiAgc3RhdGljIG1maGQgKCkge1xuICAgIGxldCBjb250ZW50ID0gQnVmZmVyLndyaXRlVWludDMyKEZtcDQuc2VxdWVuY2UpXG4gICAgRm1wNC5zZXF1ZW5jZSArPSAxXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ21maGQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgdHJhZiAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB0ZmhkID0gRm1wNC50ZmhkKGRhdGEuaWQpXG4gICAgbGV0IHRmZHQgPSBGbXA0LnRmZHQoZGF0YS50aW1lKVxuICAgIGxldCBzZHRwID0gRm1wNC5zZHRwKGRhdGEpXG4gICAgbGV0IHRydW4gPSBGbXA0LnRydW4oZGF0YSwgc2R0cC5ieXRlTGVuZ3RoKTtcblxuICAgIFt0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ3RyYWYnLCB0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwKVxuICB9XG4gIHN0YXRpYyB0ZmhkIChpZCkge1xuICAgIGxldCBjb250ZW50ID0gQnVmZmVyLndyaXRlVWludDMyKGlkKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICd0ZmhkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHRmZHQgKHRpbWUpIHtcbiAgICAvLyBsZXQgdXBwZXIgPSBNYXRoLmZsb29yKHRpbWUgLyAoVUlOVDMyX01BWCArIDEpKSxcbiAgICAvLyAgICAgbG93ZXIgPSBNYXRoLmZsb29yKHRpbWUgJSAoVUlOVDMyX01BWCArIDEpKTtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAndGZkdCcsIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBCdWZmZXIud3JpdGVVaW50MzIodGltZSkpXG4gIH1cbiAgc3RhdGljIHRydW4gKGRhdGEsIHNkdHBMZW5ndGgpIHtcbiAgICAvLyBsZXQgaWQgPSBkYXRhLmlkO1xuICAgIC8vIGxldCBjZWlsID0gaWQgPT09IDEgPyAxNiA6IDEyO1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2FtcGxlQ291bnQgPSBCdWZmZXIud3JpdGVVaW50MzIoZGF0YS5zYW1wbGVzLmxlbmd0aClcbiAgICAvLyBtZGF0LWhlYWRlciA4XG4gICAgLy8gbW9vZi1oZWFkZXIgOFxuICAgIC8vIG1maGQgMTZcbiAgICAvLyB0cmFmLWhlYWRlciA4XG4gICAgLy8gdGhoZCAxNlxuICAgIC8vIHRmZHQgMjBcbiAgICAvLyB0cnVuLWhlYWRlciAxMlxuICAgIC8vIHNhbXBsZUNvdW50IDRcbiAgICAvLyBkYXRhLW9mZnNldCA0XG4gICAgLy8gc2FtcGxlcy5sZW5ndGhcbiAgICBsZXQgb2Zmc2V0ID0gQnVmZmVyLndyaXRlVWludDMyKDggKyA4ICsgMTYgKyA4ICsgMTYgKyAxNiArIDEyICsgNCArIDQgKyAxNiAqIGRhdGEuc2FtcGxlcy5sZW5ndGggKyBzZHRwTGVuZ3RoKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMjAgKyAxNiAqIGRhdGEuc2FtcGxlcy5sZW5ndGgpLCBGbXA0LnR5cGUoJ3RydW4nKSwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MEYsIDB4MDFdKSwgc2FtcGxlQ291bnQsIG9mZnNldClcblxuICAgIC8vIGxldCBzaXplID0gYnVmZmVyLmJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAgLy8gbGV0IHdyaXRlT2Zmc2V0ID0gMFxuICAgIC8vIGRhdGEuc2FtcGxlcy5mb3JFYWNoKCgpID0+IHtcbiAgICAvLyAgIHNpemUgKz0gMTZcbiAgICAvLyB9KVxuICAgIC8vXG4gICAgLy8gbGV0IHRydW5Cb3ggPSBuZXcgVWludDhBcnJheShzaXplKVxuXG4gICAgLy8gdHJ1bkJveC5zZXQoYnVmZmVyLmJ1ZmZlciwgMClcblxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBmbGFncyA9IGl0ZW0uZmxhZ3NcbiAgICAgIC8vIGNvbnNvbGUubG9nKGl0ZW0udHlwZSwgaXRlbS5kdHMsIGl0ZW0uZHVyYXRpb24pXG5cbiAgICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfZHVyYXRpb25cbiAgICAgICAgKGl0ZW0uZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDI0KSAmIDB4RkYsIC8vIHNhbXBsZV9zaXplXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uc2l6ZSkgJiAweEZGLFxuICAgICAgICAoZmxhZ3MuaXNMZWFkaW5nIDw8IDIpIHwgZmxhZ3MuZGVwZW5kc09uLCAvLyBzYW1wbGVfZmxhZ3NcbiAgICAgICAgKGZsYWdzLmlzRGVwZW5kZWRPbiA8PCA2KSB8IChmbGFncy5oYXNSZWR1bmRhbmN5IDw8IDQpIHwgZmxhZ3MuaXNOb25TeW5jLFxuICAgICAgICAweDAwLCAweDAwLCAvLyBzYW1wbGVfZGVncmFkYXRpb25fcHJpb3JpdHlcbiAgICAgICAgKGl0ZW0uY3RzID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfY29tcG9zaXRpb25fdGltZV9vZmZzZXRcbiAgICAgICAgKGl0ZW0uY3RzID4+PiAxNikgJiAweEZGLFxuICAgICAgICAoaXRlbS5jdHMgPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uY3RzKSAmIDB4RkZcbiAgICAgIF0pKVxuICAgICAgLy8gd3JpdGVPZmZzZXQgKz0gMTZcbiAgICAgIC8vIGJ1ZmZlci53cml0ZShCdWZmZXIud3JpdGVVaW50MzIoMCkpO1xuICAgIH0pXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgc2R0cCAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDEyICsgZGF0YS5zYW1wbGVzLmxlbmd0aCksIEZtcDQudHlwZSgnc2R0cCcpLCBGbXA0LmV4dGVuc2lvbigwLCAwKSlcbiAgICBkYXRhLnNhbXBsZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGZsYWdzID0gaXRlbS5mbGFnc1xuICAgICAgY29uc3QgbnVtID0gKGZsYWdzLmlzTGVhZGluZyA8PCA2KSB8IC8vIGlzX2xlYWRpbmc6IDIgKGJpdClcbiAgICAgICAgKGZsYWdzLmRlcGVuZHNPbiA8PCA0KSB8IC8vIHNhbXBsZV9kZXBlbmRzX29uXG4gICAgICAgIChmbGFncy5pc0RlcGVuZGVkT24gPDwgMikgfCAvLyBzYW1wbGVfaXNfZGVwZW5kZWRfb25cbiAgICAgICAgKGZsYWdzLmhhc1JlZHVuZGFuY3kpLy8gc2FtcGxlX2hhc19yZWR1bmRhbmN5XG5cbiAgICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbbnVtXSkpXG4gICAgfSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBtZGF0IChkYXRhKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBzaXplID0gOFxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLnNpemVcbiAgICB9KVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoc2l6ZSksIEZtcDQudHlwZSgnbWRhdCcpKVxuICAgIGxldCBtZGF0Qm94ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICBsZXQgb2Zmc2V0ID0gMFxuICAgIG1kYXRCb3guc2V0KGJ1ZmZlci5idWZmZXIsIG9mZnNldClcbiAgICBvZmZzZXQgKz0gOFxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaXRlbS5idWZmZXIuZm9yRWFjaCgodW5pdCkgPT4ge1xuICAgICAgICBtZGF0Qm94LnNldCh1bml0LCBvZmZzZXQpXG4gICAgICAgIG9mZnNldCArPSB1bml0LmJ5dGVMZW5ndGhcbiAgICAgICAgLy8gYnVmZmVyLndyaXRlKHVuaXQuZGF0YSk7XG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIG1kYXRCb3hcbiAgfVxufVxuRm1wNC50eXBlID0gKG5hbWUpID0+IHtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtuYW1lLmNoYXJDb2RlQXQoMCksIG5hbWUuY2hhckNvZGVBdCgxKSwgbmFtZS5jaGFyQ29kZUF0KDIpLCBuYW1lLmNoYXJDb2RlQXQoMyldKVxufVxuRm1wNC5zZXF1ZW5jZSA9IDFcblxuZXhwb3J0IGRlZmF1bHQgRm1wNFxuIiwiaW1wb3J0IHtcbiAgRVZFTlRTLFxuICBzbmlmZmVyLFxuICBNZWRpYVNlZ21lbnRMaXN0LFxuICBCdWZmZXJcbn0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuaW1wb3J0IEZtcDQgZnJvbSAnLi9mbXA0J1xuXG5jb25zdCBSRU1VWF9FVkVOVFMgPSBFVkVOVFMuUkVNVVhfRVZFTlRTXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1wNFJlbXV4ZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5fZHRzQmFzZSA9IDBcbiAgICB0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgPSBmYWxzZVxuICAgIHRoaXMuX2F1ZGlvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl92aWRlb05leHREdHMgPSBudWxsXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50TGlzdCA9IG5ldyBNZWRpYVNlZ21lbnRMaXN0KCd2aWRlbycpXG4gICAgdGhpcy5fYXVkaW9TZWdtZW50TGlzdCA9IG5ldyBNZWRpYVNlZ21lbnRMaXN0KCdhdWRpbycpXG4gICAgY29uc3Qge2Jyb3dzZXJ9ID0gc25pZmZlclxuICAgIHRoaXMuX2ZpbGxTaWxlbmNlRnJhbWUgPSBicm93c2VyID09PSAnaWUnXG5cbiAgICB0aGlzLmlzRmlyc3RWaWRlbyA9IHRydWVcbiAgICB0aGlzLmlzRmlyc3RBdWRpbyA9IHRydWVcblxuICAgIHRoaXMudmlkZW9BbGxEdXJhdGlvbiA9IDBcbiAgICB0aGlzLmF1ZGlvQWxsRHVyYXRpb24gPSAwXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5SRU1VWF9NRURJQSwgdGhpcy5yZW11eC5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLlJFTVVYX01FVEFEQVRBLCB0aGlzLm9uTWV0YURhdGFSZWFkeS5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLkRFVEVDVF9DSEFOR0VfU1RSRUFNLCB0aGlzLnJlc2V0RHRzQmFzZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fZHRzQmFzZSA9IC0xXG4gICAgdGhpcy5fZHRzQmFzZUluaXRlZCA9IGZhbHNlXG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gbnVsbFxuICAgIHRoaXMuX2F1ZGlvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgICB0aGlzLl9hdWRpb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0ID0gbnVsbFxuICAgIHRoaXMuX2F1ZGlvU2VnbWVudExpc3QgPSBudWxsXG4gIH1cblxuICByZW11eCAoKSB7XG4gICAgY29uc3QgeyBhdWRpb1RyYWNrLCB2aWRlb1RyYWNrIH0gPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKVxuICAgICF0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgJiYgdGhpcy5jYWxjRHRzQmFzZShhdWRpb1RyYWNrLCB2aWRlb1RyYWNrKVxuXG4gICAgdGhpcy5fcmVtdXhWaWRlbyh2aWRlb1RyYWNrKVxuICAgIHRoaXMuX3JlbXV4QXVkaW8oYXVkaW9UcmFjaylcbiAgfVxuXG4gIHJlc2V0RHRzQmFzZSAoKSB7XG4gICAgLy8gZm9yIGhscyDkuK3pgJTliIfmjaIgbWV0YeWQjnNlZWtcbiAgICB0aGlzLl9kdHNCYXNlID0gMFxuICAgIHRoaXMuX2R0c0Jhc2VJbml0ZWQgPSBmYWxzZVxuICB9XG5cbiAgc2VlayAoKSB7XG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gbnVsbFxuICAgIHRoaXMuX2F1ZGlvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgICB0aGlzLl9hdWRpb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgfVxuXG4gIG9uTWV0YURhdGFSZWFkeSAodHlwZSkge1xuICAgIGxldCB0cmFja1xuXG4gICAgaWYgKHR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIGNvbnN0IHsgYXVkaW9UcmFjayB9ID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgICAgIHRyYWNrID0gYXVkaW9UcmFjaztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyB2aWRlb1RyYWNrIH0gPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKVxuICAgICAgdHJhY2sgPSB2aWRlb1RyYWNrO1xuICAgIH1cblxuICAgIGxldCBwcmVzb3VyY2VidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuZ2V0U291cmNlKHR5cGUpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuY3JlYXRlU291cmNlKHR5cGUpO1xuICAgIH1cblxuICAgIHNvdXJjZS5taW1ldHlwZSA9IHRyYWNrLm1ldGEuY29kZWM7XG4gICAgc291cmNlLmluaXQgPSB0aGlzLnJlbXV4SW5pdFNlZ21lbnQodHlwZSwgdHJhY2subWV0YSk7XG4gICAgLy8gc291cmNlLmluaXRlZCA9IGZhbHNlO1xuXG4gICAgLy8gdGhpcy5yZXNldER0c0Jhc2UoKVxuICAgIHRoaXMuZW1pdChSRU1VWF9FVkVOVFMuSU5JVF9TRUdNRU5ULCB0eXBlKVxuICB9XG5cbiAgcmVtdXhJbml0U2VnbWVudCAodHlwZSwgbWV0YSkge1xuICAgIGxldCBpbml0U2VnbWVudCA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBmdHlwID0gRm1wNC5mdHlwKClcbiAgICBsZXQgbW9vdiA9IEZtcDQubW9vdih7IHR5cGUsIG1ldGE6IG1ldGEgfSlcblxuICAgIGluaXRTZWdtZW50LndyaXRlKGZ0eXAsIG1vb3YpXG4gICAgcmV0dXJuIGluaXRTZWdtZW50O1xuICB9XG5cbiAgY2FsY0R0c0Jhc2UgKGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2spIHtcbiAgICBpZiAoIWF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGggJiYgIXZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgYXVkaW9CYXNlID0gSW5maW5pdHlcbiAgICBsZXQgdmlkZW9CYXNlID0gSW5maW5pdHlcblxuICAgIGlmIChhdWRpb1RyYWNrLnNhbXBsZXMgJiYgYXVkaW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgYXVkaW9CYXNlID0gYXVkaW9UcmFjay5zYW1wbGVzWzBdLmR0c1xuICAgIH1cbiAgICBpZiAodmlkZW9UcmFjay5zYW1wbGVzICYmIHZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHZpZGVvQmFzZSA9IHZpZGVvVHJhY2suc2FtcGxlc1swXS5kdHNcbiAgICB9XG5cbiAgICB0aGlzLl9kdHNCYXNlID0gTWF0aC5taW4oYXVkaW9CYXNlLCB2aWRlb0Jhc2UpXG4gICAgdGhpcy5faXNEdHNCYXNlSW5pdGVkID0gdHJ1ZVxuICB9XG5cbiAgX3JlbXV4VmlkZW8gKHZpZGVvVHJhY2spIHtcbiAgICBjb25zdCB0cmFjayA9IHZpZGVvVHJhY2tcblxuICAgIGlmICghdmlkZW9UcmFjay5zYW1wbGVzIHx8ICF2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQge3NhbXBsZXN9ID0gdHJhY2tcbiAgICBsZXQgZmlyc3REdHMgPSAtMVxuXG4gICAgbGV0IGluaXRTZWdtZW50ID0gbnVsbFxuICAgIGNvbnN0IG1wNFNhbXBsZXMgPSBbXVxuICAgIGNvbnN0IG1kYXRCb3ggPSB7XG4gICAgICBzYW1wbGVzOiBbXVxuICAgIH1cblxuICAgIHdoaWxlIChzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgY29uc3QgYXZjU2FtcGxlID0gc2FtcGxlcy5zaGlmdCgpXG5cbiAgICAgIGNvbnN0IHsgaXNLZXlmcmFtZSwgb3B0aW9ucyB9ID0gYXZjU2FtcGxlXG4gICAgICBpZiAoIXRoaXMuaXNGaXJzdEF1ZGlvICYmIG9wdGlvbnMgJiYgb3B0aW9ucy5tZXRhKSB7XG4gICAgICAgIGluaXRTZWdtZW50ID0gdGhpcy5yZW11eEluaXRTZWdtZW50KCd2aWRlbycsIG9wdGlvbnMubWV0YSlcbiAgICAgICAgb3B0aW9ucy5tZXRhID0gbnVsbFxuICAgICAgICBzYW1wbGVzLnVuc2hpZnQoYXZjU2FtcGxlKVxuICAgICAgICBpZiAoIW9wdGlvbnMuaXNDb250aW51ZSkge1xuICAgICAgICAgIHRoaXMucmVzZXREdHNCYXNlKClcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgbGV0IGR0cyA9IGF2Y1NhbXBsZS5kdHMgLSB0aGlzLl9kdHNCYXNlXG5cbiAgICAgIGlmIChmaXJzdER0cyA9PT0gLTEpIHtcbiAgICAgICAgZmlyc3REdHMgPSBkdHNcbiAgICAgIH1cblxuICAgICAgbGV0IGN0c1xuICAgICAgbGV0IHB0c1xuICAgICAgaWYgKGF2Y1NhbXBsZS5wdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwdHMgPSBhdmNTYW1wbGUucHRzIC0gdGhpcy5fZHRzQmFzZVxuICAgICAgICBjdHMgPSBwdHMgLSBkdHNcbiAgICAgIH1cbiAgICAgIGlmIChhdmNTYW1wbGUuY3RzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHRzID0gYXZjU2FtcGxlLmN0cyArIGR0c1xuICAgICAgICBjdHMgPSBhdmNTYW1wbGUuY3RzXG4gICAgICB9XG5cbiAgICAgIGxldCBtZGF0U2FtcGxlID0ge1xuICAgICAgICBidWZmZXI6IFtdLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9XG4gICAgICBtZGF0Qm94LnNhbXBsZXMucHVzaChtZGF0U2FtcGxlKVxuICAgICAgbWRhdFNhbXBsZS5idWZmZXIucHVzaChhdmNTYW1wbGUuZGF0YSlcbiAgICAgIG1kYXRTYW1wbGUuc2l6ZSArPSBhdmNTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG5cbiAgICAgIGxldCBzYW1wbGVEdXJhdGlvbiA9IDBcbiAgICAgIGlmIChzYW1wbGVzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHREdHMgPSBzYW1wbGVzWzBdLmR0cyAtIHRoaXMuX2R0c0Jhc2VcbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBuZXh0RHRzIC0gZHRzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGggPj0gMSkgeyAvLyBsYXN0ZXN0IHNhbXBsZSwgdXNlIHNlY29uZCBsYXN0IGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlIG9ubHkgb25lIHNhbXBsZSwgdXNlIHJlZmVyZW5jZSBkdXJhdGlvblxuICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gdGhpcy52aWRlb01ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy52aWRlb0FsbER1cmF0aW9uICs9IHNhbXBsZUR1cmF0aW9uXG4gICAgICAvLyBjb25zb2xlLmxvZyhgZHRzICR7ZHRzfWAsIGBwdHMgJHtwdHN9YCwgYGN0czogJHtjdHN9YCwgYGR1cmF0aW9uOiAke3NhbXBsZUR1cmF0aW9ufWAsIGF2Y1NhbXBsZSlcbiAgICAgIG1wNFNhbXBsZXMucHVzaCh7XG4gICAgICAgIGR0cyxcbiAgICAgICAgY3RzLFxuICAgICAgICBwdHMsXG4gICAgICAgIGRhdGE6IGF2Y1NhbXBsZS5kYXRhLFxuICAgICAgICBzaXplOiBhdmNTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICBpc0tleWZyYW1lLFxuICAgICAgICBkdXJhdGlvbjogc2FtcGxlRHVyYXRpb24sXG4gICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgaXNMZWFkaW5nOiAwLFxuICAgICAgICAgIGRlcGVuZHNPbjogaXNLZXlmcmFtZSA/IDIgOiAxLFxuICAgICAgICAgIGlzRGVwZW5kZWRPbjogaXNLZXlmcmFtZSA/IDEgOiAwLFxuICAgICAgICAgIGhhc1JlZHVuZGFuY3k6IDAsXG4gICAgICAgICAgaXNOb25TeW5jOiBpc0tleWZyYW1lID8gMCA6IDFcbiAgICAgICAgfSxcbiAgICAgICAgb3JpZ2luRHRzOiBkdHMsXG4gICAgICAgIHR5cGU6ICd2aWRlbydcbiAgICAgIH0pXG5cbiAgICAgIGlmIChpc0tleWZyYW1lKSB7XG4gICAgICAgIHRoaXMuZW1pdChSRU1VWF9FVkVOVFMuUkFORE9NX0FDQ0VTU19QT0lOVCwgcHRzKVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBtb29mTWRhdCA9IG5ldyBCdWZmZXIoKVxuICAgIGlmIChtcDRTYW1wbGVzLmxlbmd0aCkge1xuICAgICAgY29uc3QgbW9vZiA9IEZtcDQubW9vZih7XG4gICAgICAgIGlkOiB0cmFjay5tZXRhLmlkLFxuICAgICAgICB0aW1lOiBmaXJzdER0cyxcbiAgICAgICAgc2FtcGxlczogbXA0U2FtcGxlc1xuICAgICAgfSlcbiAgICAgIGNvbnN0IG1kYXQgPSBGbXA0Lm1kYXQobWRhdEJveClcbiAgICAgIG1vb2ZNZGF0LndyaXRlKG1vb2YsIG1kYXQpXG5cbiAgICAgIHRoaXMud3JpdGVUb1NvdXJjZSgndmlkZW8nLCBtb29mTWRhdClcbiAgICB9XG5cbiAgICBpZiAoaW5pdFNlZ21lbnQpIHtcbiAgICAgIHRoaXMud3JpdGVUb1NvdXJjZSgndmlkZW8nLCBpbml0U2VnbWVudClcblxuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICAgIC8vIHNlY29uZCBwYXJ0IG9mIHN0cmVhbSBjaGFuZ2VcbiAgICAgICAgdHJhY2suc2FtcGxlcyA9IHNhbXBsZXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZW11eFZpZGVvKHRyYWNrKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaXNGaXJzdFZpZGVvID0gZmFsc2VcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLk1FRElBX1NFR01FTlQsICd2aWRlbycpXG5cbiAgICBjb25zdCBsYXN0U2FtcGxlID0gbXA0U2FtcGxlc1ttcDRTYW1wbGVzLmxlbmd0aCAtIDFdXG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gbGFzdFNhbXBsZS5kdHMgKyBsYXN0U2FtcGxlLmR1cmF0aW9uO1xuICAgIHRyYWNrLnNhbXBsZXMgPSBbXVxuICAgIHRyYWNrLmxlbmd0aCA9IDBcbiAgfVxuXG4gIF9yZW11eEF1ZGlvICh0cmFjaykge1xuICAgIGNvbnN0IHtzYW1wbGVzfSA9IHRyYWNrXG4gICAgbGV0IGZpcnN0RHRzID0gLTFcbiAgICBsZXQgbXA0U2FtcGxlcyA9IFtdXG5cbiAgICBsZXQgaW5pdFNlZ21lbnQgPSBudWxsXG4gICAgY29uc3QgbWRhdEJveCA9IHtcbiAgICAgIHNhbXBsZXM6IFtdXG4gICAgfVxuICAgIGlmICghc2FtcGxlcyB8fCAhc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsZXQgaXNGaXJzdER0c0luaXRlZCA9IGZhbHNlXG4gICAgd2hpbGUgKHNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICBsZXQgc2FtcGxlID0gc2FtcGxlcy5zaGlmdCgpXG4gICAgICBjb25zdCB7IGRhdGEsIG9wdGlvbnMgfSA9IHNhbXBsZVxuICAgICAgaWYgKCF0aGlzLmlzRmlyc3RBdWRpbyAmJiBvcHRpb25zICYmIG9wdGlvbnMubWV0YSkge1xuICAgICAgICBpbml0U2VnbWVudCA9IHRoaXMucmVtdXhJbml0U2VnbWVudCgnYXVkaW8nLCBvcHRpb25zLm1ldGEpXG4gICAgICAgIG9wdGlvbnMubWV0YSA9IG51bGw7XG4gICAgICAgIHNhbXBsZXMudW5zaGlmdChzYW1wbGUpXG4gICAgICAgIGlmICghb3B0aW9ucy5pc0NvbnRpbnVlKSB7XG4gICAgICAgICAgdGhpcy5yZXNldER0c0Jhc2UoKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBsZXQgZHRzID0gc2FtcGxlLmR0cyAtIHRoaXMuX2R0c0Jhc2VcbiAgICAgIGNvbnN0IG9yaWdpbkR0cyA9IGR0c1xuICAgICAgaWYgKCFpc0ZpcnN0RHRzSW5pdGVkKSB7XG4gICAgICAgIGZpcnN0RHRzID0gZHRzXG4gICAgICAgIGlzRmlyc3REdHNJbml0ZWQgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGxldCBzYW1wbGVEdXJhdGlvbiA9IDBcblxuICAgICAgaWYgKHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQpIHtcbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSB0aGlzLmF1ZGlvTWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkXG4gICAgICB9IGVsc2UgaWYgKHNhbXBsZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dER0cyA9IHNhbXBsZXNbMF0uZHRzIC0gdGhpcy5fZHRzQmFzZTtcbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBuZXh0RHRzIC0gZHRzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGggPj0gMSkgeyAvLyB1c2Ugc2Vjb25kIGxhc3Qgc2FtcGxlIGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlIG9ubHkgb25lIHNhbXBsZSwgdXNlIHJlZmVyZW5jZSBzYW1wbGUgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gY29uc29sZS5sb2coJ3JlbXV4IGF1ZGlvICcsIGR0cylcbiAgICAgIHRoaXMuYXVkaW9BbGxEdXJhdGlvbiArPSBzYW1wbGVEdXJhdGlvblxuICAgICAgY29uc3QgbXA0U2FtcGxlID0ge1xuICAgICAgICBkdHMsXG4gICAgICAgIHB0czogZHRzLFxuICAgICAgICBjdHM6IDAsXG4gICAgICAgIHNpemU6IGRhdGEuYnl0ZUxlbmd0aCxcbiAgICAgICAgZHVyYXRpb246IHNhbXBsZS5kdXJhdGlvbiA/IHNhbXBsZS5kdXJhdGlvbiA6IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBmbGFnczoge1xuICAgICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgICBkZXBlbmRzT246IDIsXG4gICAgICAgICAgaXNEZXBlbmRlZE9uOiAxLFxuICAgICAgICAgIGhhc1JlZHVuZGFuY3k6IDAsXG4gICAgICAgICAgaXNOb25TeW5jOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGlzS2V5ZnJhbWU6IHRydWUsXG4gICAgICAgIG9yaWdpbkR0cyxcbiAgICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgICAgfVxuXG4gICAgICBsZXQgbWRhdFNhbXBsZSA9IHtcbiAgICAgICAgYnVmZmVyOiBbXSxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfVxuICAgICAgbWRhdFNhbXBsZS5idWZmZXIucHVzaChkYXRhKVxuICAgICAgbWRhdFNhbXBsZS5zaXplICs9IGRhdGEuYnl0ZUxlbmd0aFxuXG4gICAgICBtZGF0Qm94LnNhbXBsZXMucHVzaChtZGF0U2FtcGxlKVxuXG4gICAgICBtcDRTYW1wbGVzLnB1c2gobXA0U2FtcGxlKVxuICAgIH1cblxuICAgIGNvbnN0IG1vb2ZNZGF0ID0gbmV3IEJ1ZmZlcigpXG5cbiAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG1vb2YgPSBGbXA0Lm1vb2Yoe1xuICAgICAgICBpZDogdHJhY2subWV0YS5pZCxcbiAgICAgICAgdGltZTogZmlyc3REdHMsXG4gICAgICAgIHNhbXBsZXM6IG1wNFNhbXBsZXNcbiAgICAgIH0pXG4gICAgICBjb25zdCBtZGF0ID0gRm1wNC5tZGF0KG1kYXRCb3gpXG4gICAgICBtb29mTWRhdC53cml0ZShtb29mLCBtZGF0KVxuXG4gICAgICB0aGlzLndyaXRlVG9Tb3VyY2UoJ2F1ZGlvJywgbW9vZk1kYXQpXG4gICAgfVxuXG4gICAgaWYgKGluaXRTZWdtZW50KSB7XG4gICAgICB0aGlzLndyaXRlVG9Tb3VyY2UoJ2F1ZGlvJywgaW5pdFNlZ21lbnQpXG4gICAgICBpZiAoc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gc2Vjb25kIHBhcnQgb2Ygc3RyZWFtIGNoYW5nZVxuICAgICAgICB0cmFjay5zYW1wbGVzID0gc2FtcGxlcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbXV4QXVkaW8odHJhY2spXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5pc0ZpcnN0QXVkaW8gPSBmYWxzZVxuICAgIHRoaXMuZW1pdChSRU1VWF9FVkVOVFMuTUVESUFfU0VHTUVOVCwgJ2F1ZGlvJywgbW9vZk1kYXQpXG5cbiAgICBjb25zdCBsYXN0U2FtcGxlID0gbXA0U2FtcGxlc1ttcDRTYW1wbGVzLmxlbmd0aCAtIDFdXG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gbGFzdFNhbXBsZS5kdHMgKyBsYXN0U2FtcGxlLmR1cmF0aW9uO1xuICAgIHRyYWNrLnNhbXBsZXMgPSBbXVxuICAgIHRyYWNrLmxlbmd0aCA9IDBcbiAgfVxuXG4gIHdyaXRlVG9Tb3VyY2UgKHR5cGUsIGJ1ZmZlcikge1xuICAgIGxldCBwcmVzb3VyY2VidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuZ2V0U291cmNlKHR5cGUpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuY3JlYXRlU291cmNlKHR5cGUpO1xuICAgIH1cblxuICAgIHNvdXJjZS5kYXRhLnB1c2goYnVmZmVyKVxuICB9XG5cbiAgaW5pdFNpbGVudEF1ZGlvIChkdHMsIGR1cmF0aW9uKSB7XG4gICAgY29uc3QgdW5pdCA9IE1wNFJlbXV4ZXIuZ2V0U2lsZW50RnJhbWUodGhpcy5fYXVkaW9NZXRhLmNoYW5uZWxDb3VudClcbiAgICByZXR1cm4ge1xuICAgICAgZHRzLFxuICAgICAgcHRzOiBkdHMsXG4gICAgICBjdHM6IDAsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHVuaXQsXG4gICAgICBzaXplOiB1bml0LmJ5dGVMZW5ndGgsXG4gICAgICBvcmlnaW5EdHM6IGR0cyxcbiAgICAgIHR5cGU6ICd2aWRlbydcbiAgICB9XG4gIH1cblxuICBnZXQgdmlkZW9NZXRhICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJykudmlkZW9UcmFjay5tZXRhXG4gIH1cbiAgZ2V0IGF1ZGlvTWV0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpLmF1ZGlvVHJhY2subWV0YVxuICB9XG5cbiAgc3RhdGljIGdldFNpbGVudEZyYW1lIChjaGFubmVsQ291bnQpIHtcbiAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjMsIDB4ODBdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MjEsIDB4MDAsIDB4NDksIDB4OTAsIDB4MDIsIDB4MTksIDB4MDAsIDB4MjMsIDB4ODBdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAzKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4OGVdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA0KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODAsIDB4MmMsIDB4ODAsIDB4MDgsIDB4MDIsIDB4MzhdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA1KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MzhdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA2KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MDAsIDB4YjIsIDB4MDAsIDB4MjAsIDB4MDgsIDB4ZTBdKVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ29udGV4dDogcmVxdWlyZSgnLi9zcmMvY29udGV4dCcpLmRlZmF1bHQsXG5cbiAgLy8gTW9kdWxlcyBmcm9tIGNvbnN0YW50c1xuICBFVkVOVFM6IHJlcXVpcmUoJy4vc3JjL2NvbnN0YW50cy9ldmVudHMnKS5kZWZhdWx0LFxuICBXT1JLRVJfQ09NTUFORFM6IHJlcXVpcmUoJy4vc3JjL2NvbnN0YW50cy93b3JrZXItY29tbWFuZHMnKS5kZWZhdWx0LFxuXG4gIC8vIE1vZHVsZXMgZnJvbSBlbnZcbiAgc25pZmZlcjogcmVxdWlyZSgnLi9zcmMvZW52L3NuaWZmZXInKS5kZWZhdWx0LFxuICBpc0xlOiByZXF1aXJlKCcuL3NyYy9lbnYvaXNsZScpLmRlZmF1bHQsXG4gIFVURjg6IHJlcXVpcmUoJy4vc3JjL2Vudi91dGY4JykuZGVmYXVsdCxcblxuICAvLyBNb2RlbHNcbiAgTWVkaWFJbmZvOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvbWVkaWEtaW5mbycpLmRlZmF1bHQsXG4gIE1lZGlhU2FtcGxlOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvbWVkaWEtc2FtcGxlJykuZGVmYXVsdCxcbiAgTWVkaWFTZWdtZW50OiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvbWVkaWEtc2VnbWVudCcpLmRlZmF1bHQsXG4gIE1lZGlhU2VnbWVudExpc3Q6IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1zZWdtZW50LWxpc3QnKS5kZWZhdWx0LFxuICBBdWRpb1RyYWNrTWV0YTogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL3RyYWNrLW1ldGEnKS5BdWRpb1RyYWNrTWV0YSxcbiAgVmlkZW9UcmFja01ldGE6IHJlcXVpcmUoJy4vc3JjL21vZGVscy90cmFjay1tZXRhJykuVmlkZW9UcmFja01ldGEsXG4gIEF1ZGlvVHJhY2tTYW1wbGU6IHJlcXVpcmUoJy4vc3JjL21vZGVscy90cmFjay1zYW1wbGUnKS5BdWRpb1RyYWNrU2FtcGxlLFxuICBWaWRlb1RyYWNrU2FtcGxlOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvdHJhY2stc2FtcGxlJykuVmlkZW9UcmFja1NhbXBsZSxcblxuICAvLyBNb2R1bGVzIGZyb20gbXNlXG4gIE1zZTogcmVxdWlyZSgnLi9zcmMvbXNlL2luZGV4JykuZGVmYXVsdCxcblxuICAvLyBNb2R1bGVzIGZyb20gd3JpdGVcbiAgU3RyZWFtOiByZXF1aXJlKCcuL3NyYy93cml0ZS9zdHJlYW0nKS5kZWZhdWx0LFxuICBCdWZmZXI6IHJlcXVpcmUoJy4vc3JjL3dyaXRlL2J1ZmZlcicpLmRlZmF1bHQsXG5cbiAgLy8gQ3J5cHRvXG4gIENyeXB0bzogcmVxdWlyZSgnLi9zcmMvY3J5cHRvJykuZGVmYXVsdFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoUmVzdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIHRvdGFsTGVuZ3RoID0gMDtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJyYXlzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFycmF5c1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBhcnJheXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICB2YXIgYXJyID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIHRvdGFsTGVuZ3RoICs9IGFyci5sZW5ndGg7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSBuZXcgUmVzdWx0Q29uc3RydWN0b3IodG90YWxMZW5ndGgpO1xuICB2YXIgb2Zmc2V0ID0gMDtcbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IGFycmF5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgdmFyIF9hcnIgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgIHJlc3VsdC5zZXQoX2Fyciwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBfYXJyLmxlbmd0aDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jb25jYXQgPSByZXF1aXJlKCcuL2NvbmNhdCcpO1xuXG52YXIgX2NvbmNhdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb25jYXQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jb25jYXQyLmRlZmF1bHQ7IiwiY29uc3QgTE9BREVSX0VWRU5UUyA9IHtcbiAgTEFERVJfU1RBUlQ6ICdMT0FERVJfU1RBUlQnLFxuICBMT0FERVJfREFUQUxPQURFRDogJ0xPQURFUl9EQVRBTE9BREVEJyxcbiAgTE9BREVSX0NPTVBMRVRFOiAnTE9BREVSX0NPTVBMRVRFJyxcbiAgTE9BREVSX0VSUk9SOiAnTE9BREVSX0VSUk9SJ1xufVxuXG5jb25zdCBERU1VWF9FVkVOVFMgPSB7XG4gIERFTVVYX1NUQVJUOiAnREVNVVhfU1RBUlQnLFxuICBERU1VWF9DT01QTEVURTogJ0RFTVVYX0NPTVBMRVRFJyxcbiAgREVNVVhfRVJST1I6ICdERU1VWF9FUlJPUicsXG4gIE1FVEFEQVRBX1BBUlNFRDogJ01FVEFEQVRBX1BBUlNFRCcsXG4gIFZJREVPX01FVEFEQVRBX0NIQU5HRTogJ1ZJREVPX01FVEFEQVRBX0NIQU5HRScsXG4gIEFVRElPX01FVEFEQVRBX0NIQU5HRTogJ0FVRElPX01FVEFEQVRBX0NIQU5HRScsXG4gIE1FRElBX0lORk86ICdNRURJQV9JTkZPJ1xufVxuXG5jb25zdCBSRU1VWF9FVkVOVFMgPSB7XG4gIFJFTVVYX01FVEFEQVRBOiAnUkVNVVhfTUVUQURBVEEnLFxuICBSRU1VWF9NRURJQTogJ1JFTVVYX01FRElBJyxcbiAgTUVESUFfU0VHTUVOVDogJ01FRElBX1NFR01FTlQnLFxuICBSRU1VWF9FUlJPUjogJ1JFTVVYX0VSUk9SJyxcbiAgSU5JVF9TRUdNRU5UOiAnSU5JVF9TRUdNRU5UJyxcbiAgREVURUNUX0NIQU5HRV9TVFJFQU06ICdERVRFQ1RfQ0hBTkdFX1NUUkVBTScsXG4gIFJBTkRPTV9BQ0NFU1NfUE9JTlQ6ICdSQU5ET01fQUNDRVNTX1BPSU5UJ1xufVxuXG5jb25zdCBNU0VfRVZFTlRTID0ge1xuICBTT1VSQ0VfVVBEQVRFX0VORDogJ1NPVVJDRV9VUERBVEVfRU5EJ1xufVxuXG4vLyBobHPkuJPmnIlldmVudHNcbmNvbnN0IEhMU19FVkVOVFMgPSB7XG4gIFJFVFJZX1RJTUVfRVhDRUVERUQ6ICdSRVRSWV9USU1FX0VYQ0VFREVEJ1xufVxuXG5jb25zdCBDUllUT19FVkVOVFMgPSB7XG4gIFNUQVJUX0RFQ1JZUFQ6ICdTVEFSVF9ERUNSWVBUJyxcbiAgREVDUllQVEVEOiAnREVDUllQVEVEJ1xufVxuY29uc3QgQUxMRVZFTlRTID0gT2JqZWN0LmFzc2lnbih7fSwgTE9BREVSX0VWRU5UUywgREVNVVhfRVZFTlRTLCBSRU1VWF9FVkVOVFMsIE1TRV9FVkVOVFMsIEhMU19FVkVOVFMpXG5cbmNvbnN0IEZsdkFsbG93ZWRFdmVudHMgPSBbXVxuY29uc3QgSGxzQWxsb3dlZEV2ZW50cyA9IFtdXG5cbmZvciAobGV0IGtleSBpbiBBTExFVkVOVFMpIHtcbiAgaWYgKEFMTEVWRU5UUy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgRmx2QWxsb3dlZEV2ZW50cy5wdXNoKEFMTEVWRU5UU1trZXldKVxuICB9XG59XG5cbmZvciAobGV0IGtleSBpbiBBTExFVkVOVFMpIHtcbiAgaWYgKEFMTEVWRU5UUy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgSGxzQWxsb3dlZEV2ZW50cy5wdXNoKEFMTEVWRU5UU1trZXldKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgQUxMRVZFTlRTLFxuICBITFNfRVZFTlRTLFxuICBSRU1VWF9FVkVOVFMsXG4gIERFTVVYX0VWRU5UUyxcbiAgTVNFX0VWRU5UUyxcbiAgTE9BREVSX0VWRU5UUyxcbiAgRmx2QWxsb3dlZEV2ZW50cyxcbiAgSGxzQWxsb3dlZEV2ZW50cyxcbiAgQ1JZVE9fRVZFTlRTXG59O1xuIiwiZXhwb3J0IGNvbnN0IENPTlRFWFRfQ09NT01BTkRTID0ge1xuICBPTjogJ29uJyxcbiAgT05DRTogJ29uY2UnLFxuICBPRkY6ICdvZmYnLFxuICBFTUlUOiAnZW1pdCcsXG4gIERFU1RST1k6ICdkZXN0cm95J1xufVxuIiwiaW1wb3J0IE1lZGlhSW5mbyBmcm9tICcuL21vZGVscy9tZWRpYS1pbmZvJ1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJ1xuXG5jb25zdCBESVJFQ1RfRU1JVF9GTEFHID0gJ19fVE9fXydcblxuY2xhc3MgQ29udGV4dCB7XG4gIGNvbnN0cnVjdG9yIChhbGxvd2VkRXZlbnRzID0gW10pIHtcbiAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpXG4gICAgdGhpcy5faW5zdGFuY2VNYXAgPSB7fSAvLyDmiYDmnInnmoTop6PnoIHmtYHnqIvlrp7kvotcbiAgICB0aGlzLl9jbHNNYXAgPSB7fSAvLyDmnoTpgKDlh73mlbDnmoRtYXBcbiAgICB0aGlzLl9pbml0ZWQgPSBmYWxzZVxuICAgIHRoaXMubWVkaWFJbmZvID0gbmV3IE1lZGlhSW5mbygpXG4gICAgdGhpcy5hbGxvd2VkRXZlbnRzID0gYWxsb3dlZEV2ZW50c1xuICAgIHRoaXMuX2hvb2tzID0ge30gLy8g5rOo5YaM5Zyo5LqL5Lu25YmNL+WQjueahOmSqeWtkO+8jOS+i+WmgiBiZWZvcmUoJ0RFTVVYX0NPTVBMRVRFJylcbiAgfVxuXG4gIC8qKlxuICAgKiDku47kuIrkuIvmlofkuK3ojrflj5bop6PnoIHmtYHnqIvlrp7kvovvvIzlpoLmnpzmsqHmnInlrp7kvovvvIzmnoTpgKDkuIDkuKpcbiAgICogQHBhcmFtIHRhZ1xuICAgKiBAcGFyYW0gYXJnc1xuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGdldEluc3RhbmNlICh0YWcpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuX2luc3RhbmNlTWFwW3RhZ11cbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoYCR7dGFnfeWunuS+i+WwmuacquWIneWni+WMlmApXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3lp4vljJblhbfkvZPlrp7kvotcbiAgICogQHBhcmFtIHRhZ1xuICAgKiBAcGFyYW0gYXJnc1xuICAgKi9cbiAgaW5pdEluc3RhbmNlICh0YWcsIC4uLmFyZ3MpIHtcbiAgICBpZiAodGhpcy5fY2xzTWFwW3RhZ10pIHtcbiAgICAgIGNvbnN0IG5ld0luc3RhbmNlID0gbmV3IHRoaXMuX2Nsc01hcFt0YWddKC4uLmFyZ3MpXG4gICAgICB0aGlzLl9pbnN0YW5jZU1hcFt0YWddID0gbmV3SW5zdGFuY2VcbiAgICAgIGlmIChuZXdJbnN0YW5jZS5pbml0KSB7XG4gICAgICAgIG5ld0luc3RhbmNlLmluaXQoKSAvLyBUT0RPOiBsaWZlY2lyY2xlXG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3SW5zdGFuY2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RhZ33mnKrlnKhjb250ZXh05Lit5rOo5YaMYClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6YG/5YWN5aSn6YeP55qEaW5pdEluc3RhbmNl6LCD55So77yM5Yid5aeL5YyW5omA5pyJ55qE57uE5Lu2XG4gICAqIEBwYXJhbSBjb25maWdcbiAgICovXG4gIGluaXQgKGNvbmZpZykge1xuICAgIGlmICh0aGlzLl9pbml0ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKGxldCB0YWcgaW4gdGhpcy5fY2xzTWFwKSB7XG4gICAgICAvLyBpZiBub3QgaW5pdGVkLCBpbml0IGFuIGluc3RhbmNlXG4gICAgICBpZiAodGhpcy5fY2xzTWFwLmhhc093blByb3BlcnR5KHRhZykgJiYgIXRoaXMuX2luc3RhbmNlTWFwW3RhZ10pIHtcbiAgICAgICAgdGhpcy5pbml0SW5zdGFuY2UodGFnLCBjb25maWcpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2luaXRlZCA9IHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiDms6jlhozkuIDkuKrkuIrkuIvmlofmtYHnqIvvvIzmj5DkvpvlronlhajnmoTkuovku7blj5HpgIHmnLrliLZcbiAgICogQHBhcmFtIHRhZ1xuICAgKiBAcGFyYW0gY2xzXG4gICAqL1xuICByZWdpc3RyeSAodGFnLCBjbHMpIHtcbiAgICBjb25zdCBlbWl0dGVyID0gdGhpcy5fZW1pdHRlclxuICAgIGNvbnN0IGNoZWNrTWVzc2FnZU5hbWUgPSB0aGlzLl9pc01lc3NhZ2VOYW1lVmFsaWQuYmluZCh0aGlzKVxuICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgY29uc3QgZW5oYW5jZWQgPSBjbGFzcyBleHRlbmRzIGNscyB7XG4gICAgICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgICAgICBzdXBlciguLi5hcmdzKVxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9XG4gICAgICAgIHRoaXMub25jZUxpc3RlbmVycyA9IHt9XG4gICAgICAgIHRoaXMuVEFHID0gdGFnXG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBzZWxmXG4gICAgICB9XG5cbiAgICAgIG9uIChtZXNzYWdlTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcblxuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnNbbWVzc2FnZU5hbWVdKSB7XG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnNbbWVzc2FnZU5hbWVdLnB1c2goY2FsbGJhY2spXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnNbbWVzc2FnZU5hbWVdID0gW2NhbGxiYWNrXVxuICAgICAgICB9XG5cbiAgICAgICAgZW1pdHRlci5vbihgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgY2FsbGJhY2spIC8vIOW7uueri+WumuWQkemAmuS/oeebkeWQrFxuICAgICAgICByZXR1cm4gZW1pdHRlci5vbihtZXNzYWdlTmFtZSwgY2FsbGJhY2spXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICog5Zyo5p+Q5Liq5LqL5Lu26Kem5Y+R5YmN5omn6KGMXG4gICAgICAgKiBAcGFyYW0gbWVzc2FnZU5hbWVcbiAgICAgICAqIEBwYXJhbSBjYWxsYmFja1xuICAgICAgICovXG4gICAgICBiZWZvcmUgKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuICAgICAgICBpZiAoc2VsZi5faG9va3NbbWVzc2FnZU5hbWVdKSB7XG4gICAgICAgICAgc2VsZi5faG9va3NbbWVzc2FnZU5hbWVdLnB1c2goY2FsbGJhY2spXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5faG9va3NbbWVzc2FnZU5hbWVdID0gW2NhbGxiYWNrXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9uY2UgKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuXG4gICAgICAgIGlmICh0aGlzLm9uY2VMaXN0ZW5lcnNbbWVzc2FnZU5hbWVdKSB7XG4gICAgICAgICAgdGhpcy5vbmNlTGlzdGVuZXJzW21lc3NhZ2VOYW1lXS5wdXNoKGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub25jZUxpc3RlbmVyc1ttZXNzYWdlTmFtZV0gPSBbY2FsbGJhY2tdXG4gICAgICAgIH1cblxuICAgICAgICBlbWl0dGVyLm9uY2UoYCR7bWVzc2FnZU5hbWV9JHtESVJFQ1RfRU1JVF9GTEFHfSR7dGFnfWAsIGNhbGxiYWNrKVxuICAgICAgICByZXR1cm4gZW1pdHRlci5vbmNlKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgIH1cblxuICAgICAgZW1pdCAobWVzc2FnZU5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcblxuICAgICAgICBjb25zdCBiZWZvcmVMaXN0ID0gc2VsZi5faG9va3MgPyBzZWxmLl9ob29rc1ttZXNzYWdlTmFtZV0gOiBudWxsXG5cbiAgICAgICAgaWYgKGJlZm9yZUxpc3QpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYmVmb3JlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBiZWZvcmVMaXN0W2ldXG4gICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbWl0dGVyLmVtaXQobWVzc2FnZU5hbWUsIC4uLmFyZ3MpXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICog5a6a5ZCR5Y+R6YCB57uZ5p+Q5Liq57uE5Lu25Y2V5L6L55qE5raI5oGvXG4gICAgICAgKiBAcGFyYW0gbWVzc2FnZU5hbWVcbiAgICAgICAqIEBwYXJhbSBhcmdzXG4gICAgICAgKi9cbiAgICAgIGVtaXRUbyAodGFnLCBtZXNzYWdlTmFtZSwgLi4uYXJncykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuXG4gICAgICAgIHJldHVybiBlbWl0dGVyLmVtaXQoYCR7bWVzc2FnZU5hbWV9JHtESVJFQ1RfRU1JVF9GTEFHfSR7dGFnfWAsIC4uLmFyZ3MpXG4gICAgICB9XG5cbiAgICAgIG9mZiAobWVzc2FnZU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG4gICAgICAgIHJldHVybiBlbWl0dGVyLm9mZihtZXNzYWdlTmFtZSwgY2FsbGJhY2spXG4gICAgICB9XG5cbiAgICAgIHJlbW92ZUxpc3RlbmVycyAoKSB7XG4gICAgICAgIGNvbnN0IGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZCh0aGlzLmxpc3RlbmVycylcblxuICAgICAgICBmb3IgKGxldCBtZXNzYWdlTmFtZSBpbiB0aGlzLmxpc3RlbmVycykge1xuICAgICAgICAgIGlmIChoYXNPd24obWVzc2FnZU5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSB0aGlzLmxpc3RlbmVyc1ttZXNzYWdlTmFtZV0gfHwgW11cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldXG4gICAgICAgICAgICAgIGVtaXR0ZXIub2ZmKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgICAgICAgICAgZW1pdHRlci5vZmYoYCR7bWVzc2FnZU5hbWV9JHtESVJFQ1RfRU1JVF9GTEFHfSR7dGFnfWAsIGNhbGxiYWNrKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IG1lc3NhZ2VOYW1lIGluIHRoaXMub25jZUxpc3RlbmVycykge1xuICAgICAgICAgIGlmIChoYXNPd24obWVzc2FnZU5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSB0aGlzLm9uY2VMaXN0ZW5lcnNbbWVzc2FnZU5hbWVdIHx8IFtdXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXVxuICAgICAgICAgICAgICBlbWl0dGVyLm9mZihtZXNzYWdlTmFtZSwgY2FsbGJhY2spXG4gICAgICAgICAgICAgIGVtaXR0ZXIub2ZmKGAke21lc3NhZ2VOYW1lfSR7RElSRUNUX0VNSVRfRkxBR30ke3RhZ31gLCBjYWxsYmFjaylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiDlnKjnu4Tku7bplIDmr4Hml7bvvIzpu5jorqTlsIblroPms6jlhoznmoTkuovku7blhajpg6jljbjovb3vvIznoa7kv53kuI3kvJrpgKDmiJDlhoXlrZjms4TmvI9cbiAgICAgICAqL1xuICAgICAgZGVzdHJveSAoKSB7XG4gICAgICAgIC8vIHN0ZXAxIHVubGlzdGVuIGV2ZW50c1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge31cblxuICAgICAgICAvLyBzdGVwMiByZWxlYXNlIGZyb20gY29udGV4dFxuICAgICAgICBkZWxldGUgc2VsZi5faW5zdGFuY2VNYXBbdGFnXVxuICAgICAgICBpZiAoc3VwZXIuZGVzdHJveSkge1xuICAgICAgICAgIHJldHVybiBzdXBlci5kZXN0cm95KClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9jbHNNYXBbdGFnXSA9IGVuaGFuY2VkXG5cbiAgICAvKipcbiAgICAgKiBnZXQgaW5zdGFuY2UgaW1tZWRpYXRlbHlcbiAgICAgKiBlLmcgY29uc3QgaW5zdGFuY2UgPSBjb250ZXh0LnJlZ2lzdHJ5KHRhZywgQ2xzKShjb25maWcpXG4gICAgICogKi9cbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmluaXRJbnN0YW5jZSh0YWcsIC4uLmFyZ3MpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOWvueWtmOWcqOeahOWunuS+i+i/m+ihjFxuICAgKi9cbiAgZGVzdHJveUluc3RhbmNlcyAoKSB7XG4gICAgT2JqZWN0LmtleXModGhpcy5faW5zdGFuY2VNYXApLmZvckVhY2goKHRhZykgPT4ge1xuICAgICAgaWYgKHRoaXMuX2luc3RhbmNlTWFwW3RhZ10uZGVzdHJveSkge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZU1hcFt0YWddLmRlc3Ryb3koKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICog57yW6Kej56CB5rWB56iL5peg6ZyA5YWz5rOo5LqL5Lu255qE6Kej57uRXG4gICAqL1xuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9lbWl0dGVyID0gbnVsbFxuICAgIHRoaXMuYWxsb3dlZEV2ZW50cyA9IFtdXG4gICAgdGhpcy5fY2xzTWFwID0gbnVsbFxuICAgIHRoaXMuX2NvbnRleHQgPSBudWxsXG4gICAgdGhpcy5faG9va3MgPSBudWxsXG4gICAgdGhpcy5kZXN0cm95SW5zdGFuY2VzKClcbiAgfVxuXG4gIC8qKlxuICAgKiDlr7nkv6HpgZPov5vooYzmlLbmi6JcbiAgICogQHBhcmFtIG1lc3NhZ2VOYW1lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaXNNZXNzYWdlTmFtZVZhbGlkIChtZXNzYWdlTmFtZSkge1xuICAgIGlmICghdGhpcy5hbGxvd2VkRXZlbnRzLmluZGV4T2YobWVzc2FnZU5hbWUpIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnJlZ2lzdGVyZWQgbWVzc2FnZSBuYW1lOiAke21lc3NhZ2VOYW1lfWApXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRleHRcbiIsImltcG9ydCBFVkVOVFMgZnJvbSAnLi4vY29uc3RhbnRzL2V2ZW50cyc7XG5jb25zdCBDUllUT19FVkVOVFMgPSBFVkVOVFMuQ1JZVE9fRVZFTlRTXG5jbGFzcyBDcnlwdG8ge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLmlucHV0QnVmZmVyID0gY29uZmlnLmlucHV0YnVmZmVyO1xuICAgICAgICB0aGlzLm91dHB1dEJ1ZmZlciA9IGNvbmZpZy5vdXRwdXRidWZmZXI7XG4gICAgICAgIHRoaXMua2V5ID0gY29uZmlnLmtleTtcbiAgICAgICAgdGhpcy5pdiA9IGNvbmZpZy5pdjtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBjb25maWcubWV0aG9kO1xuXG4gICAgICAgIHRoaXMuY3J5cHRvID0gIHdpbmRvdy5jcnlwdG8gfHwgd2luZG93Lm1zQ3J5cHRvXG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5vbihDUllUT19FVkVOVFMuU1RBUlRfREVDUllQVCwgdGhpcy5kZWNyaXB0LmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBcbiAgICBkZWNyaXB0KCkge1xuICAgICAgICBpZighdGhpcy5hZXNrZXkpIHtcbiAgICAgICAgICAgIGxldCBzYmtleSA9IHRoaXMuY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIHRoaXMua2V5LmJ1ZmZlciwgeyBuYW1lOiAnQUVTLUNCQycgfSwgZmFsc2UsIFsnZW5jcnlwdCcsICdkZWNyeXB0J10pO1xuICAgICAgICAgICAgc2JrZXkudGhlbihrZXkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWVza2V5ID0ga2V5O1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjcmlwdERhdGEoKTtcbiAgICAgICAgICAgIH0pIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZWNyaXB0RGF0YSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVjcmlwdERhdGEoKSB7XG4gICAgICAgIGxldCBpbnB1dGJ1ZmZlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5pbnB1dEJ1ZmZlcik7XG4gICAgICAgIGxldCBvdXRwdXRidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMub3V0cHV0QnVmZmVyKTtcbiAgICAgICAgbGV0IGRhdGEgPSBpbnB1dGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICBpZihkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmNyeXB0by5zdWJ0bGUuZGVjcnlwdCh7IG5hbWU6ICdBRVMtQ0JDJywgaXY6IHRoaXMuaXYuYnVmZmVyIH0sIHRoaXMuYWVza2V5LCBkYXRhKS50aGVuKHJlcz0+e1xuICAgICAgICAgICAgICAgIG91dHB1dGJ1ZmZlci5wdXNoKG5ldyBVaW50OEFycmF5KHJlcykpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChDUllUT19FVkVOVFMuREVDUllQVEVEKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRlY3JpcHREYXRhKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBDcnlwdG87IiwiY29uc3QgbGUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gIChuZXcgRGF0YVZpZXcoYnVmKSkuc2V0SW50MTYoMCwgMjU2LCB0cnVlKSAvLyBsaXR0bGUtZW5kaWFuIHdyaXRlXG4gIHJldHVybiAobmV3IEludDE2QXJyYXkoYnVmKSlbMF0gPT09IDI1NiAvLyBwbGF0Zm9ybS1zcGVjIHJlYWQsIGlmIGVxdWFsIHRoZW4gTEVcbn0pKClcblxuZXhwb3J0IGRlZmF1bHQgbGVcbiIsImNvbnN0IGxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYnVmID0gbmV3IEFycmF5QnVmZmVyKDIpO1xuICAobmV3IERhdGFWaWV3KGJ1ZikpLnNldEludDE2KDAsIDI1NiwgdHJ1ZSkgLy8gbGl0dGxlLWVuZGlhbiB3cml0ZVxuICByZXR1cm4gKG5ldyBJbnQxNkFycmF5KGJ1ZikpWzBdID09PSAyNTYgLy8gcGxhdGZvcm0tc3BlYyByZWFkLCBpZiBlcXVhbCB0aGVuIExFXG59KSgpXG5cbmNvbnN0IHNuaWZmZXIgPSB7XG4gIGdldCBkZXZpY2UgKCkge1xuICAgIGxldCByID0gc25pZmZlci5vcztcbiAgICByZXR1cm4gci5pc1BjID8gJ3BjJyA6IHIuaXNUYWJsZXQgPyAndGFibGV0JyA6ICdtb2JpbGUnO1xuICB9LFxuICBnZXQgYnJvd3NlciAoKSB7XG4gICAgbGV0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCByZWcgPSB7XG4gICAgICBpZTogL3J2OihbXFxkLl0rKVxcKSBsaWtlIGdlY2tvLyxcbiAgICAgIGZpcmZveDogL2ZpcmVmb3hcXC8oW1xcZC5dKykvLFxuICAgICAgY2hyb21lOiAvY2hyb21lXFwvKFtcXGQuXSspLyxcbiAgICAgIG9wZXJhOiAvb3BlcmEuKFtcXGQuXSspLyxcbiAgICAgIHNhZmFyaTogL3ZlcnNpb25cXC8oW1xcZC5dKykuKnNhZmFyaS9cbiAgICB9O1xuICAgIHJldHVybiBbXS5jb25jYXQoT2JqZWN0LmtleXMocmVnKS5maWx0ZXIoa2V5ID0+IHJlZ1trZXldLnRlc3QodWEpKSlbMF07XG4gIH0sXG4gIGdldCBvcyAoKSB7XG4gICAgbGV0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgIGxldCBpc1dpbmRvd3NQaG9uZSA9IC8oPzpXaW5kb3dzIFBob25lKS8udGVzdCh1YSlcbiAgICBsZXQgaXNTeW1iaWFuID0gLyg/OlN5bWJpYW5PUykvLnRlc3QodWEpIHx8IGlzV2luZG93c1Bob25lO1xuICAgIGxldCBpc0FuZHJvaWQgPSAvKD86QW5kcm9pZCkvLnRlc3QodWEpO1xuICAgIGxldCBpc0ZpcmVGb3ggPSAvKD86RmlyZWZveCkvLnRlc3QodWEpO1xuICAgIGxldCBpc1RhYmxldCA9IC8oPzppUGFkfFBsYXlCb29rKS8udGVzdCh1YSkgfHwgKGlzQW5kcm9pZCAmJiAhLyg/Ok1vYmlsZSkvLnRlc3QodWEpKSB8fCAoaXNGaXJlRm94ICYmIC8oPzpUYWJsZXQpLy50ZXN0KHVhKSk7XG4gICAgbGV0IGlzUGhvbmUgPSAvKD86aVBob25lKS8udGVzdCh1YSkgJiYgIWlzVGFibGV0O1xuICAgIGxldCBpc1BjID0gIWlzUGhvbmUgJiYgIWlzQW5kcm9pZCAmJiAhaXNTeW1iaWFuO1xuICAgIHJldHVybiB7XG4gICAgICBpc1RhYmxldCxcbiAgICAgIGlzUGhvbmUsXG4gICAgICBpc0FuZHJvaWQsXG4gICAgICBpc1BjLFxuICAgICAgaXNTeW1iaWFuLFxuICAgICAgaXNXaW5kb3dzUGhvbmUsXG4gICAgICBpc0ZpcmVGb3hcbiAgICB9O1xuICB9LFxuXG4gIGdldCBpc0xlICgpIHtcbiAgICByZXR1cm4gbGVcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgc25pZmZlcjtcbiIsImNsYXNzIFVURjgge1xuICBzdGF0aWMgZGVjb2RlICh1aW50OGFycmF5KSB7XG4gICAgY29uc3Qgb3V0ID0gW107XG4gICAgY29uc3QgaW5wdXQgPSB1aW50OGFycmF5O1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBsZW5ndGggPSB1aW50OGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaW5wdXRbaV0gPCAweDgwKSB7XG4gICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoaW5wdXRbaV0pKTtcbiAgICAgICAgKytpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEMwKSB7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICB9IGVsc2UgaWYgKGlucHV0W2ldIDwgMHhFMCkge1xuICAgICAgICBpZiAoVVRGOC5fY2hlY2tDb250aW51YXRpb24oaW5wdXQsIGksIDEpKSB7XG4gICAgICAgICAgY29uc3QgdWNzNCA9IChpbnB1dFtpXSAmIDB4MUYpIDw8IDYgfCAoaW5wdXRbaSArIDFdICYgMHgzRik7XG4gICAgICAgICAgaWYgKHVjczQgPj0gMHg4MCkge1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEYwKSB7XG4gICAgICAgIGlmIChVVEY4Ll9jaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMikpIHtcbiAgICAgICAgICBjb25zdCB1Y3M0ID0gKGlucHV0W2ldICYgMHhGKSA8PCAxMiB8IChpbnB1dFtpICsgMV0gJiAweDNGKSA8PCA2IHwgaW5wdXRbaSArIDJdICYgMHgzRjtcbiAgICAgICAgICBpZiAodWNzNCA+PSAweDgwMCAmJiAodWNzNCAmIDB4RjgwMCkgIT09IDB4RDgwMCkge1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEY4KSB7XG4gICAgICAgIGlmIChVVEY4Ll9jaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMykpIHtcbiAgICAgICAgICBsZXQgdWNzNCA9IChpbnB1dFtpXSAmIDB4NykgPDwgMTggfCAoaW5wdXRbaSArIDFdICYgMHgzRikgPDwgMTIgfFxuICAgICAgICAgICAgICAgICAgICAoaW5wdXRbaSArIDJdICYgMHgzRikgPDwgNiB8IChpbnB1dFtpICsgM10gJiAweDNGKTtcbiAgICAgICAgICBpZiAodWNzNCA+IDB4MTAwMDAgJiYgdWNzNCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICB1Y3M0IC09IDB4MTAwMDA7XG4gICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCh1Y3M0ID4+PiAxMCkgfCAweEQ4MDApKTtcbiAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHVjczQgJiAweDNGRikgfCAweERDMDApKTtcbiAgICAgICAgICAgIGkgKz0gNDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgweEZGRkQpKTtcbiAgICAgICsraTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xuICB9XG5cbiAgc3RhdGljIF9jaGVja0NvbnRpbnVhdGlvbiAodWludDhhcnJheSwgc3RhcnQsIGNoZWNrTGVuZ3RoKSB7XG4gICAgbGV0IGFycmF5ID0gdWludDhhcnJheTtcbiAgICBpZiAoc3RhcnQgKyBjaGVja0xlbmd0aCA8IGFycmF5Lmxlbmd0aCkge1xuICAgICAgd2hpbGUgKGNoZWNrTGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKChhcnJheVsrK3N0YXJ0XSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVVEY4O1xuIiwiY29uc3QgaXNPYmplY3RGaWxsZWQgPSAob2JqKSA9PiB7XG4gIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGlmIChvYmpba2V5XSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFJbmZvIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMubWltZVR5cGUgPSBudWxsXG4gICAgdGhpcy5kdXJhdGlvbiA9IG51bGxcblxuICAgIHRoaXMuaGFzVmlkZW8gPSBudWxsXG4gICAgdGhpcy52aWRlbyA9IHtcbiAgICAgIGNvZGVjOiBudWxsLFxuICAgICAgd2lkdGg6IG51bGwsXG4gICAgICBoZWlnaHQ6IG51bGwsXG4gICAgICBwcm9maWxlOiBudWxsLFxuICAgICAgbGV2ZWw6IG51bGwsXG4gICAgICBmcmFtZVJhdGU6IHtcbiAgICAgICAgZml4ZWQ6IHRydWUsXG4gICAgICAgIGZwczogMjUsXG4gICAgICAgIGZwc19udW06IDI1MDAwLFxuICAgICAgICBmcHNfZGVuOiAxMDAwXG4gICAgICB9LFxuICAgICAgY2hyb21hRm9ybWF0OiBudWxsLFxuICAgICAgcGFyUmF0aW86IHtcbiAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgIGhlaWdodDogMVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaGFzQXVkaW8gPSBudWxsXG5cbiAgICB0aGlzLmF1ZGlvID0ge1xuICAgICAgY29kZWM6IG51bGwsXG4gICAgICBzYW1wbGVSYXRlOiBudWxsLFxuICAgICAgc2FtcGxlUmF0ZUluZGV4OiBudWxsLFxuICAgICAgY2hhbm5lbENvdW50OiBudWxsXG4gICAgfVxuICB9XG5cbiAgaXNDb21wbGV0ZSAoKSB7XG4gICAgcmV0dXJuIE1lZGlhSW5mby5pc0Jhc2VJbmZvUmVhZHkodGhpcykgJiYgTWVkaWFJbmZvLmlzVmlkZW9SZWFkeSh0aGlzKSAmJiBNZWRpYUluZm8uaXNBdWRpb1JlYWR5KHRoaXMpXG4gIH1cblxuICBzdGF0aWMgaXNCYXNlSW5mb1JlYWR5IChtZWRpYUluZm8pIHtcbiAgICByZXR1cm4gaXNPYmplY3RGaWxsZWQobWVkaWFJbmZvKVxuICB9XG5cbiAgc3RhdGljIGlzVmlkZW9SZWFkeSAobWVkaWFJbmZvKSB7XG4gICAgaWYgKCFtZWRpYUluZm8uaGFzVmlkZW8pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGlzT2JqZWN0RmlsbGVkKG1lZGlhSW5mby52aWRlbylcbiAgfVxuXG4gIHN0YXRpYyBpc0F1ZGlvUmVhZHkgKG1lZGlhSW5mbykge1xuICAgIGlmICghbWVkaWFJbmZvLmhhc0F1ZGlvKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBpc09iamVjdEZpbGxlZChtZWRpYUluZm8udmlkZW8pXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBNZWRpYVNhbXBsZS5nZXREZWZhdWx0SW5mKClcblxuICAgIGlmICghaW5mbyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5mbykgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRcbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBpbmZvKVxuXG4gICAgT2JqZWN0LmVudHJpZXMoc2FtcGxlKS5mb3JFYWNoKChbaywgdl0pID0+IHtcbiAgICAgIHRoaXNba10gPSB2XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0SW5mICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgZHVyYXRpb246IG51bGwsXG4gICAgICBwb3NpdGlvbjogbnVsbCxcbiAgICAgIGlzUkFQOiBmYWxzZSwgLy8gaXMgUmFuZG9tIGFjY2VzcyBwb2ludFxuICAgICAgb3JpZ2luRHRzOiBudWxsXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYVNlZ21lbnRMaXN0IHtcblxuICAgIGNvbnN0cnVjdG9yICh0eXBlKSB7XG4gICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLl9saXN0ID0gW107XG4gICAgICAgIHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbiA9IC0xOyAvLyBjYWNoZWQgbGFzdCBpbnNlcnQgbG9jYXRpb25cbiAgICB9XG5cbiAgICBnZXQgdHlwZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgIH1cblxuICAgIGdldCBsZW5ndGggKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5sZW5ndGg7XG4gICAgfVxuXG4gICAgaXNFbXB0eSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICBjbGVhciAoKSB7XG4gICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gLTE7XG4gICAgfVxuXG4gICAgX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuX2xpc3Q7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0yO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYXN0ID0gbGlzdC5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgbWlkID0gMDtcbiAgICAgICAgbGV0IGxib3VuZCA9IDA7XG4gICAgICAgIGxldCB1Ym91bmQgPSBsYXN0O1xuXG4gICAgICAgIGxldCBpZHggPSAwO1xuXG4gICAgICAgIGlmIChiZWdpbkR0cyA8IGxpc3RbMF0ub3JpZ2luRHRzKSB7XG4gICAgICAgICAgICBpZHggPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAobGJvdW5kIDw9IHVib3VuZCkge1xuICAgICAgICAgICAgbWlkID0gbGJvdW5kICsgTWF0aC5mbG9vcigodWJvdW5kIC0gbGJvdW5kKSAvIDIpO1xuICAgICAgICAgICAgaWYgKG1pZCA9PT0gbGFzdCB8fCAoYmVnaW5EdHMgPiBsaXN0W21pZF0ubGFzdFNhbXBsZS5vcmlnaW5EdHNcbiAgICAgICAgICAgICAgICAgICAgJiYgKGJlZ2luRHRzIDwgbGlzdFttaWQgKyAxXS5vcmlnaW5EdHMpKSkge1xuICAgICAgICAgICAgICAgIGlkeCA9IG1pZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlzdFttaWRdLm9yaWdpbkR0cyA8IGJlZ2luRHRzKSB7XG4gICAgICAgICAgICAgICAgbGJvdW5kID0gbWlkICsgMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWJvdW5kID0gbWlkIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cblxuICAgIF9zZWFyY2hOZWFyZXN0U2VnbWVudEFmdGVyIChiZWdpbkR0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpICsgMTtcbiAgICB9XG5cbiAgICBhcHBlbmQgKHNlZ21lbnQpIHtcbiAgICAgICAgbGV0IGxpc3QgPSB0aGlzLl9saXN0O1xuICAgICAgICBsZXQgbGFzdEFwcGVuZElkeCA9IHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbjtcbiAgICAgICAgbGV0IGluc2VydElkeCA9IDA7XG5cbiAgICAgICAgaWYgKGxhc3RBcHBlbmRJZHggIT09IC0xICYmIGxhc3RBcHBlbmRJZHggPCBsaXN0Lmxlbmd0aFxuICAgICAgICAgICAgJiYgc2VnbWVudC5vcmlnaW5TdGFydER0cyA+PSBsaXN0W2xhc3RBcHBlbmRJZHhdLmxhc3RTYW1wbGUub3JpZ2luRHRzXG4gICAgICAgICAgICAmJiAoKGxhc3RBcHBlbmRJZHggPT09IGxpc3QubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICB8fCAobGFzdEFwcGVuZElkeCA8IGxpc3QubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICAmJiBzZWdtZW50Lm9yaWdpblN0YXJ0RHRzIDwgbGlzdFtsYXN0QXBwZW5kSWR4ICsgMV0ub3JpZ2luU3RhcnREdHMpKSkge1xuICAgICAgICAgICAgaW5zZXJ0SWR4ID0gbGFzdEFwcGVuZElkeCArIDE7IC8vIHVzZSBjYWNoZWQgbG9jYXRpb24gaWR4XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0SWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoc2VnbWVudC5vcmlnaW5TdGFydER0cykgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gaW5zZXJ0SWR4O1xuICAgICAgICB0aGlzLl9saXN0LnNwbGljZShpbnNlcnRJZHgsIDAsIHNlZ21lbnQpO1xuICAgIH1cblxuICAgIGdldExhc3RTZWdtZW50QmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgaWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0W2lkeF07XG4gICAgICAgIH0gZWxzZSB7IC8vIC0xXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldExhc3RTYW1wbGVCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBzZWdtZW50ID0gdGhpcy5nZXRMYXN0U2VnbWVudEJlZm9yZShiZWdpbkR0cyk7XG4gICAgICAgIGlmIChzZWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VnbWVudC5sYXN0U2FtcGxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRMYXN0UkFQQmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgc2VnbWVudElkeCA9IHRoaXMuX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKGJlZ2luRHRzKTtcbiAgICAgICAgbGV0IHJhbmRvbUFjY2Vzc1BvaW50cyA9IHRoaXMuX2xpc3Rbc2VnbWVudElkeF0ucmFuZG9tQWNjZXNzUG9pbnRzO1xuICAgICAgICB3aGlsZSAocmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCA9PT0gMCAmJiBzZWdtZW50SWR4ID4gMCkge1xuICAgICAgICAgICAgc2VnbWVudElkeC0tO1xuICAgICAgICAgICAgcmFuZG9tQWNjZXNzUG9pbnRzID0gdGhpcy5fbGlzdFtzZWdtZW50SWR4XS5yYW5kb21BY2Nlc3NQb2ludHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhbmRvbUFjY2Vzc1BvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZG9tQWNjZXNzUG9pbnRzW3JhbmRvbUFjY2Vzc1BvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFTZWdtZW50IHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuc3RhcnREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5lbmREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5zdGFydFB0cyA9IC0xO1xuICAgICAgICB0aGlzLmVuZFB0cyA9IC0xO1xuICAgICAgICB0aGlzLm9yaWdpblN0YXJ0RHRzID0gLTE7XG4gICAgICAgIHRoaXMub3JpZ2luRW5kRHRzID0gLTE7XG4gICAgICAgIHRoaXMucmFuZG9tQWNjZXNzUG9pbnRzID0gW107XG4gICAgICAgIHRoaXMuZmlyc3RTYW1wbGUgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RTYW1wbGUgPSBudWxsO1xuICAgIH1cblxuICAgIGFkZFJBUCAoc2FtcGxlKSB7XG4gICAgICAgIHNhbXBsZS5pc1JBUCA9IHRydWU7XG4gICAgICAgIHRoaXMucmFuZG9tQWNjZXNzUG9pbnRzLnB1c2goc2FtcGxlKTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tNZXRhIHtcbiAgY29uc3RydWN0b3IgKG1ldGEpIHtcbiAgICBjb25zdCBfZGVmYXVsdCA9IHtcbiAgICAgIHNhbXBsZVJhdGU6IDQ4MDAwLFxuICAgICAgY2hhbm5lbENvdW50OiAyLFxuICAgICAgY29kZWM6ICdtcDRhLjQwLjInLFxuICAgICAgY29uZmlnOiBbNDEsIDQwMSwgMTM2LCAwXSxcbiAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgaWQ6IDIsXG4gICAgICByZWZTYW1wbGVEdXJhdGlvbjogMjEsXG4gICAgICBzYW1wbGVSYXRlSW5kZXg6IDMsXG4gICAgICB0aW1lc2NhbGU6IDEwMDAsXG4gICAgICB0eXBlOiAnYXVkaW8nXG4gICAgfVxuICAgIGlmIChtZXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgX2RlZmF1bHQsIG1ldGEpXG4gICAgfVxuICAgIHJldHVybiBfZGVmYXVsdFxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5pbml0ID0gbnVsbFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrTWV0YSB7XG4gIGNvbnN0cnVjdG9yIChtZXRhKSB7XG4gICAgY29uc3QgX2RlZmF1bHQgPSB7XG4gICAgICBhdmNjOiBudWxsLFxuICAgICAgc3BzOiBuZXcgVWludDhBcnJheSgwKSxcbiAgICAgIHBwczogbmV3IFVpbnQ4QXJyYXkoMCksXG4gICAgICBjaHJvbWFGb3JtYXQ6IDQyMCxcbiAgICAgIGNvZGVjOiAnYXZjMS42NDAwMjAnLFxuICAgICAgY29kZWNIZWlnaHQ6IDcyMCxcbiAgICAgIGNvZGVjV2lkdGg6IDEyODAsXG4gICAgICBkdXJhdGlvbjogMCxcbiAgICAgIGZyYW1lUmF0ZToge1xuICAgICAgICBmaXhlZDogdHJ1ZSxcbiAgICAgICAgZnBzOiAyNSxcbiAgICAgICAgZnBzX251bTogMjUwMDAsXG4gICAgICAgIGZwc19kZW46IDEwMDBcbiAgICAgIH0sXG4gICAgICBpZDogMSxcbiAgICAgIGxldmVsOiAnMy4yJyxcbiAgICAgIHByZXNlbnRIZWlnaHQ6IDcyMCxcbiAgICAgIHByZXNlbnRXaWR0aDogMTI4MCxcbiAgICAgIHByb2ZpbGU6ICdIaWdoJyxcbiAgICAgIHJlZlNhbXBsZUR1cmF0aW9uOiA0MCxcbiAgICAgIHBhclJhdGlvOiB7XG4gICAgICAgIGhlaWdodDogMSxcbiAgICAgICAgd2lkdGg6IDFcbiAgICAgIH0sXG4gICAgICB0aW1lc2NhbGU6IDEwMDAsXG4gICAgICB0eXBlOiAndmlkZW8nXG4gICAgfVxuXG4gICAgaWYgKG1ldGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgbWV0YSlcbiAgICB9XG4gICAgcmV0dXJuIF9kZWZhdWx0XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLmluaXQgPSBudWxsXG4gICAgdGhpcy5zcHMgPSBudWxsXG4gICAgdGhpcy5wcHMgPSBudWxsXG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBBdWRpb1RyYWNrU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBBdWRpb1RyYWNrU2FtcGxlLmdldERlZmF1bHQoKVxuICAgIGlmICghaW5mbykge1xuICAgICAgcmV0dXJuIF9kZWZhdWx0XG4gICAgfVxuICAgIGxldCBzYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgaW5mbylcblxuICAgIHJldHVybiBzYW1wbGVcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0ICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmlkZW9UcmFja1NhbXBsZSB7XG4gIGNvbnN0cnVjdG9yIChpbmZvKSB7XG4gICAgbGV0IF9kZWZhdWx0ID0gVmlkZW9UcmFja1NhbXBsZS5nZXREZWZhdWx0KClcblxuICAgIGlmICghaW5mbykge1xuICAgICAgcmV0dXJuIF9kZWZhdWx0XG4gICAgfVxuICAgIGxldCBzYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgaW5mbylcblxuICAgIHJldHVybiBzYW1wbGVcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0ICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgaXNLZXlmcmFtZTogZmFsc2UsIC8vIGlzIFJhbmRvbSBhY2Nlc3MgcG9pbnRcbiAgICAgIG9yaWdpbkR0czogbnVsbCxcbiAgICAgIGRhdGE6IG5ldyBVaW50OEFycmF5KClcbiAgICB9XG4gIH1cbn1cbiIsImNsYXNzIE1TRSB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5jb25maWdzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlncyk7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmNvbmZpZ3MuY29udGFpbmVyO1xuICAgIHRoaXMubWVkaWFTb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuc291cmNlQnVmZmVycyA9IHt9O1xuICAgIHRoaXMucHJlbG9hZFRpbWUgPSB0aGlzLmNvbmZpZ3MucHJlbG9hZFRpbWUgfHwgMTtcbiAgICB0aGlzLm9uU291cmNlT3BlbiA9IHRoaXMub25Tb3VyY2VPcGVuLmJpbmQodGhpcylcbiAgICB0aGlzLm9uVGltZVVwZGF0ZSA9IHRoaXMub25UaW1lVXBkYXRlLmJpbmQodGhpcylcbiAgICB0aGlzLm9uVXBkYXRlRW5kID0gdGhpcy5vblVwZGF0ZUVuZC5iaW5kKHRoaXMpXG4gICAgdGhpcy5vbldhaXRpbmcgPSB0aGlzLm9uV2FpdGluZy5iaW5kKHRoaXMpXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB0aGlzLm1lZGlhU291cmNlID0gbmV3IHNlbGYuTWVkaWFTb3VyY2UoKTtcbiAgICB0aGlzLm1lZGlhU291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ3NvdXJjZW9wZW4nLCB0aGlzLm9uU291cmNlT3Blbik7XG4gICAgdGhpcy5jb250YWluZXIuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTCh0aGlzLm1lZGlhU291cmNlKTtcbiAgICB0aGlzLnVybCA9IHRoaXMuY29udGFpbmVyLnNyYztcbiAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgdGhpcy5vblRpbWVVcGRhdGUpO1xuICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3dhaXRpbmcnLCB0aGlzLm9uV2FpdGluZyk7XG4gIH1cblxuICBvblRpbWVVcGRhdGUgKCkge1xuICAgIHRoaXMuZW1pdCgnVElNRV9VUERBVEUnLCB0aGlzLmNvbnRhaW5lcik7XG4gIH1cblxuICBvbldhaXRpbmcgKCkge1xuICAgIHRoaXMuZW1pdCgnV0FJVElORycsIHRoaXMuY29udGFpbmVyKTtcbiAgfVxuXG4gIG9uU291cmNlT3BlbiAoKSB7XG4gICAgdGhpcy5hZGRTb3VyY2VCdWZmZXJzKCk7XG4gIH1cblxuICBvblVwZGF0ZUVuZCAoKSB7XG4gICAgdGhpcy5lbWl0KCdTT1VSQ0VfVVBEQVRFX0VORCcpO1xuICAgIHRoaXMuZG9BcHBlbmQoKVxuICB9XG4gIGFkZFNvdXJjZUJ1ZmZlcnMgKCkge1xuICAgIGlmICh0aGlzLm1lZGlhU291cmNlLnJlYWR5U3RhdGUgIT09ICdvcGVuJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc291cmNlcyA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1BSRV9TT1VSQ0VfQlVGRkVSJyk7XG4gICAgbGV0IHRyYWNrcyA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpO1xuICAgIGxldCB0cmFjaztcblxuICAgIHNvdXJjZXMgPSBzb3VyY2VzLnNvdXJjZXM7XG4gICAgbGV0IGFkZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwLCBrID0gT2JqZWN0LmtleXMoc291cmNlcykubGVuZ3RoOyBpIDwgazsgaSsrKSB7XG4gICAgICBsZXQgdHlwZSA9IE9iamVjdC5rZXlzKHNvdXJjZXMpW2ldO1xuICAgICAgaWYgKHR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgICAgdHJhY2sgPSB0cmFja3MuYXVkaW9UcmFjaztcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICB0cmFjayA9IHRyYWNrcy52aWRlb1RyYWNrO1xuICAgICAgICAvLyByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgbGV0IGR1ciA9IHR5cGUgPT09ICdhdWRpbycgPyAyMSA6IDQwO1xuICAgICAgICBpZiAodHJhY2subWV0YSAmJiB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSBkdXIgPSB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uO1xuICAgICAgICBpZiAoc291cmNlc1t0eXBlXS5kYXRhLmxlbmd0aCA+PSAodGhpcy5wcmVsb2FkVGltZSAvIGR1cikpIHtcbiAgICAgICAgICBhZGQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFkZCkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMCwgayA9IE9iamVjdC5rZXlzKHNvdXJjZXMpLmxlbmd0aDsgaSA8IGs7IGkrKykge1xuICAgICAgICBsZXQgdHlwZSA9IE9iamVjdC5rZXlzKHNvdXJjZXMpW2ldO1xuICAgICAgICBsZXQgc291cmNlID0gc291cmNlc1t0eXBlXVxuICAgICAgICBsZXQgbWltZSA9ICh0eXBlID09PSAndmlkZW8nKSA/ICd2aWRlby9tcDQ7Y29kZWNzPScgKyBzb3VyY2UubWltZXR5cGUgOiAnYXVkaW8vbXA0O2NvZGVjcz0nICsgc291cmNlLm1pbWV0eXBlXG4gICAgICAgIGxldCBzb3VyY2VCdWZmZXIgPSB0aGlzLm1lZGlhU291cmNlLmFkZFNvdXJjZUJ1ZmZlcihtaW1lKTtcbiAgICAgICAgdGhpcy5zb3VyY2VCdWZmZXJzW3R5cGVdID0gc291cmNlQnVmZmVyO1xuICAgICAgICBzb3VyY2VCdWZmZXIuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgdGhpcy5vblVwZGF0ZUVuZCk7XG4gICAgICAgIHRoaXMuZG9BcHBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkb0FwcGVuZCAoKSB7XG4gICAgbGV0IHNvdXJjZXMgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGlmIChzb3VyY2VzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHR5cGUgPSBPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpW2ldXG4gICAgICAgIGxldCBzb3VyY2VCdWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcnNbdHlwZV07XG4gICAgICAgIGlmICghc291cmNlQnVmZmVyLnVwZGF0aW5nKSB7XG4gICAgICAgICAgbGV0IHNvdXJjZSA9IHNvdXJjZXMuc291cmNlc1t0eXBlXTtcbiAgICAgICAgICBpZiAoc291cmNlICYmICFzb3VyY2UuaW5pdGVkKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYXBwZW5kIGluaXRpYWwgc2VnbWVudCcpXG4gICAgICAgICAgICBzb3VyY2VCdWZmZXIuYXBwZW5kQnVmZmVyKHNvdXJjZS5pbml0LmJ1ZmZlci5idWZmZXIpO1xuICAgICAgICAgICAgc291cmNlLmluaXRlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gc291cmNlLmRhdGEuc2hpZnQoKVxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFwcGVuZEJ1ZmZlcihkYXRhLmJ1ZmZlci5idWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVuZE9mU3RyZWFtICgpIHtcbiAgICBjb25zdCB7IHJlYWR5U3RhdGUsIGFjdGl2ZVNvdXJjZUJ1ZmZlcnMgfSA9IHRoaXMubWVkaWFTb3VyY2U7XG4gICAgaWYgKHJlYWR5U3RhdGUgPT09ICdvcGVuJyAmJiBhY3RpdmVTb3VyY2VCdWZmZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5tZWRpYVNvdXJjZS5lbmRPZlN0cmVhbSgpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGxvZ1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlbW92ZSAoZW5kLCBzdGFydCA9IDApIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBidWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXV07XG4gICAgICBpZiAoIWJ1ZmZlci51cGRhdGluZykge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhzdGFydCwgZW5kKVxuICAgICAgICBidWZmZXIucmVtb3ZlKHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZW1vdmVCdWZmZXJzICgpIHtcbiAgICBjb25zdCB0YXNrTGlzdCA9IFtdXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgYnVmZmVyID0gdGhpcy5zb3VyY2VCdWZmZXJzW09iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1dO1xuICAgICAgYnVmZmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWVuZCcsIHRoaXMub25VcGRhdGVFbmQpO1xuXG4gICAgICBsZXQgdGFzaztcbiAgICAgIGlmIChidWZmZXIudXBkYXRpbmcpIHtcbiAgICAgICAgdGFzayA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgY29uc3QgZG9DbGVhbkJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCByZXRyeVRpbWUgPSAzXG5cbiAgICAgICAgICAgIGNvbnN0IGNsZWFuID0gKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIWJ1ZmZlci51cGRhdGluZykge1xuICAgICAgICAgICAgICAgIE1TRS5jbGVhckJ1ZmZlcihidWZmZXIpXG4gICAgICAgICAgICAgICAgYnVmZmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWVuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJldHJ5VGltZSA+IDApe1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoY2xlYW4sIDIwMClcbiAgICAgICAgICAgICAgICByZXRyeVRpbWUtLVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2xlYW4sIDIwMClcbiAgICAgICAgICAgIGJ1ZmZlci5yZW1vdmVFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCBkb0NsZWFuQnVmZmVyKVxuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXIuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgZG9DbGVhbkJ1ZmZlcilcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhc2sgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgIE1TRS5jbGVhckJ1ZmZlcihidWZmZXIpXG4gICAgICAgICAgYnVmZmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWVuZCcsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChidWZmZXIuYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGJ1ZmZlci5idWZmZXJlZC5zdGFydCgwKSwgYCAgJHtidWZmZXIuYnVmZmVyZWQuZW5kKDApfWApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIHRhc2sgPSBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgfVxuXG4gICAgICB0YXNrTGlzdC5wdXNoKHRhc2spXG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHRhc2tMaXN0KVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlQnVmZmVycygpLnRoZW4oKCkgPT4ge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBidWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXV07XG4gICAgICAgIHRoaXMubWVkaWFTb3VyY2UucmVtb3ZlU291cmNlQnVmZmVyKGJ1ZmZlcik7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXV07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCB0aGlzLm9uVGltZVVwZGF0ZSk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCd3YWl0aW5nJywgdGhpcy5vbldhaXRpbmcpO1xuICAgICAgdGhpcy5tZWRpYVNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgdGhpcy5vblNvdXJjZU9wZW4pO1xuXG4gICAgICB0aGlzLmVuZE9mU3RyZWFtKClcbiAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMudXJsKTtcblxuICAgICAgdGhpcy51cmwgPSBudWxsXG4gICAgICB0aGlzLmNvbmZpZ3MgPSB7fTtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gbnVsbDtcbiAgICAgIHRoaXMubWVkaWFTb3VyY2UgPSBudWxsO1xuICAgICAgdGhpcy5zb3VyY2VCdWZmZXJzID0ge307XG4gICAgICB0aGlzLnByZWxvYWRUaW1lID0gMTtcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGNsZWFyQnVmZmVyIChidWZmZXIpIHtcbiAgICBjb25zdCBidWZmZXJlZCA9IGJ1ZmZlci5idWZmZXJlZDtcbiAgICBsZXQgYkVuZCA9IDAuMVxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBidWZmZXJlZC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgYkVuZCA9IGJ1ZmZlcmVkLmVuZChpKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgYnVmZmVyLnJlbW92ZSgwLCBiRW5kKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIERPIE5PVEhJTkdcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IE1TRTtcbiIsImltcG9ydCBDb25jYXQgZnJvbSAnY29uY2F0LXR5cGVkLWFycmF5J1xuXG5jbGFzcyBCdWZmZXIge1xuICBjb25zdHJ1Y3RvciAoYnVmZmVyKSB7XG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXIgfHwgbmV3IFVpbnQ4QXJyYXkoMClcbiAgfVxuXG4gIHdyaXRlICguLi5idWZmZXIpIHtcbiAgICBidWZmZXIuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHRoaXMuYnVmZmVyID0gQ29uY2F0KFVpbnQ4QXJyYXksIHRoaXMuYnVmZmVyLCBpdGVtKVxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgd3JpdGVVaW50MzIgKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIHZhbHVlID4+IDI0LFxuICAgICAgKHZhbHVlID4+IDE2KSAmIDB4ZmYsXG4gICAgICAodmFsdWUgPj4gOCkgJiAweGZmLFxuICAgICAgdmFsdWUgJiAweGZmXG4gICAgXSlcbiAgfVxuXG4gIHN0YXRpYyByZWFkQXNJbnQgKGFycikge1xuICAgIGxldCB0ZW1wID0gJydcblxuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0NEhleCAoaGV4TnVtKSB7XG4gICAgICBsZXQgaGV4U3RyID0gaGV4TnVtLnRvU3RyaW5nKDE2KVxuICAgICAgcmV0dXJuIGhleFN0ci5wYWRTdGFydCgyLCAnMCcpXG4gICAgfVxuXG4gICAgYXJyLmZvckVhY2gobnVtID0+IHtcbiAgICAgIHRlbXAgKz0gcGFkU3RhcnQ0SGV4KG51bSlcbiAgICB9KVxuICAgIHJldHVybiBwYXJzZUludCh0ZW1wLCAxNilcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCdWZmZXJcbiIsImNsYXNzIFN0cmVhbSB7XG4gIGNvbnN0cnVjdG9yIChidWZmZXIpIHtcbiAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgdGhpcy5kYXRhdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgICAgdGhpcy5kYXRhdmlldy5wb3NpdGlvbiA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gIH1cblxuICBzZXQgcG9zaXRpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5kYXRhdmlldy5wb3NpdGlvbiA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHBvc2l0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhdmlldy5wb3NpdGlvbjtcbiAgfVxuXG4gIGJhY2sgKGNvdW50KSB7XG4gICAgdGhpcy5wb3NpdGlvbiAtPSBjb3VudDtcbiAgfVxuXG4gIHNraXAgKGNvdW50KSB7XG4gICAgbGV0IGxvb3AgPSBNYXRoLmZsb29yKGNvdW50IC8gNCk7XG4gICAgbGV0IGxhc3QgPSBjb3VudCAlIDQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wOyBpKyspIHtcbiAgICAgIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCA0KTtcbiAgICB9XG4gICAgaWYgKGxhc3QgPiAwKSB7XG4gICAgICBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgbGFzdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFtyZWFkQnl0ZSDku45EYXRhVmlld+S4reivu+WPluaVsOaNrl1cbiAgICogQHBhcmFtICB7RGF0YVZpZXd9IGJ1ZmZlciBbRGF0YVZpZXflrp7kvotdXG4gICAqIEBwYXJhbSAge051bWJlcn0gc2l6ZSAgIFvor7vlj5blrZfoioLmlbBdXG4gICAqIEByZXR1cm4ge051bWJlcn0gICAgICAgIFvmlbTmlbBdXG4gICAqL1xuICBzdGF0aWMgcmVhZEJ5dGUgKGJ1ZmZlciwgc2l6ZSwgc2lnbikge1xuICAgIGxldCByZXM7XG4gICAgc3dpdGNoIChzaXplKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGlmIChzaWduKSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldEludDgoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0VWludDgoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaWYgKHNpZ24pIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0SW50MTYoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0VWludDE2KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGlmIChzaWduKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3Qgc3VwcG9ydGVkIGZvciByZWFkQnl0ZSAzJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQ4KGJ1ZmZlci5wb3NpdGlvbikgPDwgMTY7XG4gICAgICAgICAgcmVzIHw9IGJ1ZmZlci5nZXRVaW50OChidWZmZXIucG9zaXRpb24gKyAxKSA8PCA4O1xuICAgICAgICAgIHJlcyB8PSBidWZmZXIuZ2V0VWludDgoYnVmZmVyLnBvc2l0aW9uICsgMik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIGlmIChzaWduKSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldEludDMyKGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQzMihidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA4OlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnRlZCBmb3IgcmVhZEJvZHkgOCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50MzIoYnVmZmVyLnBvc2l0aW9uKSA8PCAzMjtcbiAgICAgICAgICByZXMgfD0gYnVmZmVyLmdldFVpbnQzMihidWZmZXIucG9zaXRpb24gKyA0KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlcyA9ICcnO1xuICAgIH1cbiAgICBidWZmZXIucG9zaXRpb24gKz0gc2l6ZTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgcmVhZFVpbnQ4ICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDEpO1xuICB9XG5cbiAgcmVhZFVpbnQxNiAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAyKTtcbiAgfVxuXG4gIHJlYWRVaW50MjQgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMyk7XG4gIH1cblxuICByZWFkVWludDMyICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDQpO1xuICB9XG5cbiAgcmVhZFVpbnQ2NCAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCA4KTtcbiAgfVxuXG4gIHJlYWRJbnQ4ICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDEsIHRydWUpO1xuICB9XG4gIHJlYWRJbnQxNiAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAyLCB0cnVlKTtcbiAgfVxuXG4gIHJlYWRJbnQzMiAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCA0LCB0cnVlKTtcbiAgfVxuXG4gIHdyaXRlVWludDMyICh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXG4gICAgICB2YWx1ZSA+Pj4gMjQgJiAweGZmLFxuICAgICAgdmFsdWUgPj4+IDE2ICYgMHhmZixcbiAgICAgIHZhbHVlID4+PiA4ICYgMHhmZixcbiAgICAgIHZhbHVlICYgMHhmZlxuICAgIF0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0cmVhbTtcbiIsImltcG9ydCBSZW11eGVyIGZyb20gJ3hncGxheWVyLXJlbXV4J1xuaW1wb3J0IHsgRmV0Y2hMb2FkZXIgfSBmcm9tICd4Z3BsYXllci1sb2FkZXInXG5pbXBvcnQgeyBGbHZEZW11eGVyIH0gZnJvbSAneGdwbGF5ZXItZGVtdXgnXG5pbXBvcnQgeyBUcmFja3MsIFhnQnVmZmVyLCBQcmVTb3VyY2UgfSBmcm9tICd4Z3BsYXllci1idWZmZXInXG5pbXBvcnQgeyBNc2UsIEVWRU5UUyB9IGZyb20gJ3hncGxheWVyLXV0aWxzJ1xuaW1wb3J0IHsgQ29tcGF0aWJpbGl0eSB9IGZyb20gJ3hncGxheWVyLWNvZGVjJ1xuaW1wb3J0IFBsYXllciBmcm9tICd4Z3BsYXllcidcblxuY29uc3QgUkVNVVhfRVZFTlRTID0gRVZFTlRTLlJFTVVYX0VWRU5UUztcbmNvbnN0IERFTVVYX0VWRU5UUyA9IEVWRU5UUy5ERU1VWF9FVkVOVFM7XG5jb25zdCBMT0FERVJfRVZFTlRTID0gRVZFTlRTLkxPQURFUl9FVkVOVFNcbmNvbnN0IE1TRV9FVkVOVFMgPSBFVkVOVFMuTVNFX0VWRU5UU1xuXG5jb25zdCBUYWcgPSAnRkxWQ29udHJvbGxlcidcblxuY2xhc3MgTG9nZ2VyIHtcbiAgd2FybiAoKSB7fVxufVxuXG5jb25zdCBGTFZfRVJST1IgPSAnRkxWX0VSUk9SJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbHZDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IgKHBsYXllcikge1xuICAgIHRoaXMuVEFHID0gVGFnXG4gICAgdGhpcy5fcGxheWVyID0gcGxheWVyXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaW5pdFNlZ21lbnRBcnJpdmVkOiBmYWxzZSxcbiAgICAgIHJhbmRvbUFjY2Vzc1BvaW50czogW11cbiAgICB9XG5cbiAgICB0aGlzLmJ1ZmZlckNsZWFyVGltZXIgPSBudWxsO1xuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnRkVUQ0hfTE9BREVSJywgRmV0Y2hMb2FkZXIpXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnTE9BREVSX0JVRkZFUicsIFhnQnVmZmVyKVxuXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnRkxWX0RFTVVYRVInLCBGbHZEZW11eGVyKVxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ1RSQUNLUycsIFRyYWNrcylcblxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ01QNF9SRU1VWEVSJywgUmVtdXhlci5NcDRSZW11eGVyKVxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ1BSRV9TT1VSQ0VfQlVGRkVSJywgUHJlU291cmNlKVxuXG4gICAgaWYgKHRoaXMuX3BsYXllci5jb25maWcuY29tcGF0aWJpbGl0eSAhPT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0NPTVBBVElCSUxJVFknLCBDb21wYXRpYmlsaXR5KVxuICAgIH1cblxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0xPR0dFUicsIExvZ2dlcilcbiAgICB0aGlzLm1zZSA9IHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ01TRScsIE1zZSkoeyBjb250YWluZXI6IHRoaXMuX3BsYXllci52aWRlbyB9KVxuXG4gICAgdGhpcy5faGFuZGxlVGltZVVwZGF0ZSA9IHRoaXMuX2hhbmRsZVRpbWVVcGRhdGUuYmluZCh0aGlzKVxuXG4gICAgdGhpcy5pbml0TGlzdGVuZXJzKClcbiAgfVxuXG4gIGluaXRMaXN0ZW5lcnMgKCkge1xuICAgIHRoaXMub24oTE9BREVSX0VWRU5UUy5MT0FERVJfREFUQUxPQURFRCwgdGhpcy5faGFuZGxlTG9hZGVyRGF0YUxvYWRlZC5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oTE9BREVSX0VWRU5UUy5MT0FERVJfRVJST1IsIHRoaXMuX2hhbmRsZU5ldHdvcmtFcnJvci5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuTUVESUFfSU5GTywgdGhpcy5faGFuZGxlTWVkaWFJbmZvLmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCB0aGlzLl9oYW5kbGVNZXRhZGF0YVBhcnNlZC5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFLCB0aGlzLl9oYW5kbGVEZW11eENvbXBsZXRlLmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIHRoaXMuX2hhbmRsZURlbXV4RXJyb3IuYmluZCh0aGlzKSlcblxuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLklOSVRfU0VHTUVOVCwgdGhpcy5faGFuZGxlQXBwZW5kSW5pdFNlZ21lbnQuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5NRURJQV9TRUdNRU5ULCB0aGlzLl9oYW5kbGVNZWRpYVNlZ21lbnQuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5SQU5ET01fQUNDRVNTX1BPSU5ULCB0aGlzLl9oYW5kbGVBZGRSQVAuYmluZCh0aGlzKSlcblxuICAgIHRoaXMub24oTVNFX0VWRU5UUy5TT1VSQ0VfVVBEQVRFX0VORCwgdGhpcy5faGFuZGxlU291cmNlVXBkYXRlRW5kLmJpbmQodGhpcykpXG5cbiAgICB0aGlzLl9wbGF5ZXIub24oJ3RpbWV1cGRhdGUnLCB0aGlzLl9oYW5kbGVUaW1lVXBkYXRlKVxuICB9XG5cbiAgX2hhbmRsZU1lZGlhSW5mbyAoKSB7XG4gICAgaWYgKCF0aGlzLl9jb250ZXh0Lm1lZGlhSW5mbykge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKCdmYWlsZWQgdG8gZ2V0IG1lZGlhaW5mbycpKVxuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVMb2FkZXJEYXRhTG9hZGVkICgpIHtcbiAgICB0aGlzLmVtaXRUbygnRkxWX0RFTVVYRVInLCBERU1VWF9FVkVOVFMuREVNVVhfU1RBUlQpXG4gIH1cblxuICBfaGFuZGxlTWV0YWRhdGFQYXJzZWQgKHR5cGUpIHtcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLlJFTVVYX01FVEFEQVRBLCB0eXBlKVxuICB9XG4gIF9oYW5kbGVEZW11eENvbXBsZXRlICgpIHtcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLlJFTVVYX01FRElBKVxuICB9XG5cbiAgX2hhbmRsZUFwcGVuZEluaXRTZWdtZW50ICgpIHtcbiAgICB0aGlzLnN0YXRlLmluaXRTZWdtZW50QXJyaXZlZCA9IHRydWVcbiAgICB0aGlzLm1zZS5hZGRTb3VyY2VCdWZmZXJzKClcbiAgfVxuXG4gIF9oYW5kbGVNZWRpYVNlZ21lbnQgKCkge1xuICAgIHRoaXMubXNlLmFkZFNvdXJjZUJ1ZmZlcnMoKVxuICAgIHRoaXMubXNlLmRvQXBwZW5kKCk7XG4gIH1cblxuICBfaGFuZGxlU291cmNlVXBkYXRlRW5kICgpIHtcbiAgICBjb25zdCB0aW1lID0gdGhpcy5fcGxheWVyLmN1cnJlbnRUaW1lO1xuICAgIGNvbnN0IHZpZGVvID0gdGhpcy5fcGxheWVyLnZpZGVvO1xuICAgIGNvbnN0IHByZWxvYWRUaW1lID0gdGhpcy5fcGxheWVyLmNvbmZpZy5wcmVsb2FkVGltZSB8fCA1XG5cbiAgICBjb25zdCB7IGxlbmd0aCB9ID0gdmlkZW8uYnVmZmVyZWQ7XG5cbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYnVmZmVyRW5kID0gdmlkZW8uYnVmZmVyZWQuZW5kKGxlbmd0aCAtIDEpO1xuICAgIGlmIChidWZmZXJFbmQgLSB0aW1lID4gcHJlbG9hZFRpbWUgKiAyKSB7XG4gICAgICB0aGlzLl9wbGF5ZXIuY3VycmVudFRpbWUgPSBidWZmZXJFbmQgLSBwcmVsb2FkVGltZVxuICAgIH1cbiAgICB0aGlzLm1zZS5kb0FwcGVuZCgpO1xuICB9XG5cbiAgX2hhbmRsZVRpbWVVcGRhdGUgKCkge1xuICAgIGNvbnN0IHRpbWUgPSB0aGlzLl9wbGF5ZXIuY3VycmVudFRpbWVcblxuICAgIGNvbnN0IHZpZGVvID0gdGhpcy5fcGxheWVyLnZpZGVvO1xuICAgIGxldCBidWZmZXJlZCA9IHZpZGVvLmJ1ZmZlcmVkXG5cbiAgICBpZiAoIWJ1ZmZlcmVkIHx8ICFidWZmZXJlZC5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXJTdGFydCA9IHRoaXMuX3BsYXllci5nZXRCdWZmZXJlZFJhbmdlKClbMF1cbiAgICBpZiAodGltZSAtIGJ1ZmZlclN0YXJ0ID4gMTApIHtcbiAgICAgIC8vIOWcqOebtOaSreaXtuWPiuaXtua4heepumJ1ZmZlcu+8jOmZjeS9juebtOaSreWGheWtmOWNoOeUqFxuICAgICAgaWYgKHRoaXMuYnVmZmVyQ2xlYXJUaW1lciB8fCAhdGhpcy5zdGF0ZS5yYW5kb21BY2Nlc3NQb2ludHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCByYXAgPSBJbmZpbml0eTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5yYW5kb21BY2Nlc3NQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdGVtcCA9IE1hdGguY2VpbCh0aGlzLnN0YXRlLnJhbmRvbUFjY2Vzc1BvaW50c1tpXSAvIDEwMDApXG4gICAgICAgIGlmICh0ZW1wID4gdGltZSAtIDIpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByYXAgPSB0ZW1wO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMubXNlLnJlbW92ZShNYXRoLm1pbihyYXAsIHRpbWUgLSAzKSwgYnVmZmVyU3RhcnQpXG5cbiAgICAgIHRoaXMuYnVmZmVyQ2xlYXJUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmJ1ZmZlckNsZWFyVGltZXIgPSBudWxsXG4gICAgICB9LCA1MDAwKVxuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVOZXR3b3JrRXJyb3IgKHRhZywgZXJyKSB7XG4gICAgdGhpcy5fcGxheWVyLmVtaXQoJ2Vycm9yJywgbmV3IFBsYXllci5FcnJvcnMoJ25ldHdvcmsnLCB0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCkpXG4gICAgdGhpcy5fb25FcnJvcihMT0FERVJfRVZFTlRTLkxPQURFUl9FUlJPUiwgdGFnLCBlcnIsIHRydWUpXG4gIH1cblxuICBfaGFuZGxlRGVtdXhFcnJvciAodGFnLCBlcnIsIGZhdGFsKSB7XG4gICAgaWYgKGZhdGFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZhdGFsID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuX3BsYXllci5lbWl0KCdlcnJvcicsIG5ldyBQbGF5ZXIuRXJyb3JzKCdwYXJzZScsIHRoaXMuX3BsYXllci5jb25maWcudXJsKSlcbiAgICB0aGlzLl9vbkVycm9yKExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCB0YWcsIGVyciwgZmF0YWwpXG4gIH1cblxuICBfaGFuZGxlQWRkUkFQIChyYXApIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5yYW5kb21BY2Nlc3NQb2ludHMpIHtcbiAgICAgIHRoaXMuc3RhdGUucmFuZG9tQWNjZXNzUG9pbnRzLnB1c2gocmFwKVxuICAgIH1cbiAgfVxuXG4gIF9vbkVycm9yICh0eXBlLCBtb2QsIGVyciwgZmF0YWwpIHtcbiAgICBsZXQgZXJyb3IgPSB7XG4gICAgICBlcnJvclR5cGU6IHR5cGUsXG4gICAgICBlcnJvckRldGFpbHM6IGBbJHttb2R9XTogJHtlcnIubWVzc2FnZX1gLFxuICAgICAgZXJyb3JGYXRhbDogZmF0YWwgfHwgZmFsc2VcbiAgICB9XG4gICAgdGhpcy5fcGxheWVyLmVtaXQoRkxWX0VSUk9SLCBlcnJvcik7XG4gIH1cblxuICBzZWVrICgpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaW5pdFNlZ21lbnRBcnJpdmVkKSB7XG4gICAgICB0aGlzLmxvYWREYXRhKClcbiAgICB9XG4gIH1cblxuICBsb2FkRGF0YSAoKSB7XG4gICAgdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTEFERVJfU1RBUlQsIHRoaXMuX3BsYXllci5jb25maWcudXJsKVxuICB9XG5cbiAgcGF1c2UgKCkge1xuICAgIGNvbnN0IGxvYWRlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0ZFVENIX0xPQURFUicpXG5cbiAgICBpZiAobG9hZGVyKSB7XG4gICAgICBsb2FkZXIuY2FuY2VsKClcbiAgICB9XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9wbGF5ZXIub2ZmKCd0aW1ldXBkYXRlJywgdGhpcy5faGFuZGxlVGltZVVwZGF0ZSlcbiAgICB0aGlzLl9wbGF5ZXIgPSBudWxsXG4gICAgdGhpcy5tc2UgPSBudWxsXG4gICAgdGhpcy5zdGF0ZS5yYW5kb21BY2Nlc3NQb2ludHMgPSBbXVxuICB9XG59XG4iLCJpbXBvcnQgUGxheWVyIGZyb20gJ3hncGxheWVyJ1xuaW1wb3J0IHsgQ29udGV4dCwgRVZFTlRTIH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuaW1wb3J0IEZMViBmcm9tICcuL2Zsdi1saXZlJ1xuY29uc3QgZmx2QWxsb3dlZEV2ZW50cyA9IEVWRU5UUy5GbHZBbGxvd2VkRXZlbnRzO1xuXG5jbGFzcyBGbHZQbGF5ZXIgZXh0ZW5kcyBQbGF5ZXIge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKVxuICAgIHRoaXMuY29udGV4dCA9IG5ldyBDb250ZXh0KGZsdkFsbG93ZWRFdmVudHMpXG4gICAgdGhpcy5pbml0RXZlbnRzKClcbiAgICB0aGlzLmxvYWRlckNvbXBsZXRlVGltZXIgPSBudWxsXG4gICAgLy8gY29uc3QgcHJlbG9hZFRpbWUgPSBwbGF5ZXIuY29uZmlnLnByZWxvYWRUaW1lIHx8IDE1XG4gIH1cblxuICBzdGFydCAoKSB7XG4gICAgdGhpcy5pbml0Rmx2KClcbiAgICB0aGlzLmNvbnRleHQuaW5pdCgpXG4gICAgc3VwZXIuc3RhcnQodGhpcy5mbHYubXNlLnVybClcbiAgfVxuXG4gIGluaXRGbHZFdmVudHMgKGZsdikge1xuICAgIGNvbnN0IHBsYXllciA9IHRoaXM7XG4gICAgZmx2Lm9uY2UoRVZFTlRTLlJFTVVYX0VWRU5UUy5JTklUX1NFR01FTlQsICgpID0+IHtcbiAgICAgIFBsYXllci51dGlsLmFkZENsYXNzKHBsYXllci5yb290LCAneGdwbGF5ZXItaXMtbGl2ZScpXG4gICAgICBpZiAoIVBsYXllci51dGlsLmZpbmREb20odGhpcy5yb290LCAneGctbGl2ZScpKSB7XG4gICAgICAgIGNvbnN0IGxpdmUgPSBQbGF5ZXIudXRpbC5jcmVhdGVEb20oJ3hnLWxpdmUnLCAn5q2j5Zyo55u05pKtJywge30sICd4Z3BsYXllci1saXZlJylcbiAgICAgICAgcGxheWVyLmNvbnRyb2xzLmFwcGVuZENoaWxkKGxpdmUpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGZsdi5vbmNlKEVWRU5UUy5MT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgKCkgPT4ge1xuICAgICAgLy8g55u05pKt5a6M5oiQ77yM5b6F5pKt5pS+5Zmo5pKt5a6M57yT5a2Y5ZCO5Y+R6YCB5YWz6Zet5LqL5Lu2XG4gICAgICBpZiAoIXBsYXllci5wYXVzZWQpIHtcbiAgICAgICAgdGhpcy5sb2FkZXJDb21wbGV0ZVRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGVuZCA9IHBsYXllci5nZXRCdWZmZXJlZFJhbmdlKClbMV1cbiAgICAgICAgICBpZiAoTWF0aC5hYnMocGxheWVyLmN1cnJlbnRUaW1lIC0gZW5kKSA8IDAuNSkge1xuICAgICAgICAgICAgcGxheWVyLmVtaXQoJ2VuZGVkJylcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMubG9hZGVyQ29tcGxldGVUaW1lcilcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDIwMClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYXllci5lbWl0KCdlbmRlZCcpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGluaXRFdmVudHMgKCkge1xuICAgIHRoaXMub24oJ3RpbWV1cGRhdGUnLCAoKSA9PiB7XG4gICAgICB0aGlzLmxvYWREYXRhKClcbiAgICB9KVxuXG4gICAgdGhpcy5vbignc2Vla2luZycsICgpID0+IHtcbiAgICAgIGNvbnN0IHRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lXG4gICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0QnVmZmVyZWRSYW5nZSgpXG4gICAgICBpZiAodGltZSA+IHJhbmdlWzFdIHx8IHRpbWUgPCByYW5nZVswXSkge1xuICAgICAgICB0aGlzLmZsdi5zZWVrKHRoaXMuY3VycmVudFRpbWUpXG4gICAgICB9XG4gICAgfSlcblxuICB9XG5cbiAgaW5pdEZsdiAoKSB7XG4gICAgY29uc3QgZmx2ID0gdGhpcy5jb250ZXh0LnJlZ2lzdHJ5KCdGTFZfQ09OVFJPTExFUicsIEZMVikodGhpcylcbiAgICB0aGlzLmluaXRGbHZFdmVudHMoZmx2KVxuICAgIHRoaXMuZmx2ID0gZmx2XG4gIH1cblxuICBwbGF5KCkge1xuICAgIGlmICh0aGlzLl9oYXNTdGFydCkge1xuICAgICAgdGhpcy5fZGVzdHJveSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBuZXcgQ29udGV4dChmbHZBbGxvd2VkRXZlbnRzKVxuICAgICAgICBjb25zdCBmbHYgPSB0aGlzLmNvbnRleHQucmVnaXN0cnkoJ0ZMVl9DT05UUk9MTEVSJywgRkxWKSh0aGlzKVxuICAgICAgICB0aGlzLmluaXRGbHZFdmVudHMoZmx2KVxuICAgICAgICB0aGlzLmZsdiA9IGZsdlxuICAgICAgICB0aGlzLmNvbnRleHQuaW5pdCgpXG4gICAgICAgIHN1cGVyLnN0YXJ0KGZsdi5tc2UudXJsKVxuICAgICAgICBzdXBlci5wbGF5KClcbiAgICAgIH0pXG5cbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIucGxheSgpXG4gICAgfVxuICB9XG5cbiAgcGF1c2UgKCkge1xuICAgIHN1cGVyLnBhdXNlKClcbiAgICBpZiAodGhpcy5mbHYpIHtcbiAgICAgIHRoaXMuZmx2LnBhdXNlKClcbiAgICB9XG4gIH1cblxuICBsb2FkRGF0YSAodGltZSA9IHRoaXMuY3VycmVudFRpbWUpIHtcbiAgICBpZiAodGhpcy5mbHYpIHtcbiAgICAgIHRoaXMuZmx2LnNlZWsodGltZSlcbiAgICB9XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9kZXN0cm95KCkudGhlbigoKSA9PiB7XG4gICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfSlcbiAgfVxuXG4gIF9kZXN0cm95ICgpIHtcbiAgICByZXR1cm4gdGhpcy5mbHYubXNlLmRlc3Ryb3koKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuY29udGV4dC5kZXN0cm95KClcbiAgICAgIHRoaXMuZmx2ID0gbnVsbFxuICAgICAgdGhpcy5jb250ZXh0ID0gbnVsbFxuICAgICAgaWYgKHRoaXMubG9hZGVyQ29tcGxldGVUaW1lcikge1xuICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmxvYWRlckNvbXBsZXRlVGltZXIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGdldCBzcmMgKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRTcmNcbiAgfVxuXG4gIHNldCBzcmMgKHVybCkge1xuICAgIHRoaXMucGxheWVyLmNvbmZpZy51cmwgPSB1cmxcbiAgICBpZiAoIXRoaXMucGF1c2VkKSB7XG4gICAgICB0aGlzLnBhdXNlKClcbiAgICAgIHRoaXMub25jZSgncGF1c2UnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhcnQodXJsKVxuICAgICAgfSlcbiAgICAgIHRoaXMub25jZSgnY2FucGxheScsICgpID0+IHtcbiAgICAgICAgdGhpcy5wbGF5KClcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhcnQodXJsKVxuICAgIH1cbiAgICB0aGlzLm9uY2UoJ2NhbnBsYXknLCAoKSA9PiB7XG4gICAgICB0aGlzLmN1cnJlbnRUaW1lID0gMFxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGbHZQbGF5ZXJcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV94Z3BsYXllcl9fOyIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQocmVxdWlyZShcInhncGxheWVyXCIpKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcInhncGxheWVyXCJdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHNbXCJ4Z3BsYXllci1mbHZcIl09dChyZXF1aXJlKFwieGdwbGF5ZXJcIikpOmVbXCJ4Z3BsYXllci1mbHZcIl09dChlLnhncGxheWVyKX0od2luZG93LChmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gaShzKXtpZih0W3NdKXJldHVybiB0W3NdLmV4cG9ydHM7dmFyIHI9dFtzXT17aTpzLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbc10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsaSksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gaS5tPWUsaS5jPXQsaS5kPWZ1bmN0aW9uKGUsdCxzKXtpLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6c30pfSxpLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0saS50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1pKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciBzPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoaS5yKHMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgciBpbiBlKWkuZChzLHIsZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxyKSk7cmV0dXJuIHN9LGkubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gaS5kKHQsXCJhXCIsdCksdH0saS5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxpLnA9XCJcIixpKGkucz0xMSl9KFtmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXtDb250ZXh0OmkoMTMpLmRlZmF1bHQsRVZFTlRTOmkoNCkuZGVmYXVsdCxXT1JLRVJfQ09NTUFORFM6aSgxNSkuZGVmYXVsdCxzbmlmZmVyOmkoMTYpLmRlZmF1bHQsaXNMZTppKDE3KS5kZWZhdWx0LFVURjg6aSgxOCkuZGVmYXVsdCxNZWRpYUluZm86aSgzKS5kZWZhdWx0LE1lZGlhU2FtcGxlOmkoMTkpLmRlZmF1bHQsTWVkaWFTZWdtZW50OmkoMjApLmRlZmF1bHQsTWVkaWFTZWdtZW50TGlzdDppKDIxKS5kZWZhdWx0LEF1ZGlvVHJhY2tNZXRhOmkoNSkuQXVkaW9UcmFja01ldGEsVmlkZW9UcmFja01ldGE6aSg1KS5WaWRlb1RyYWNrTWV0YSxBdWRpb1RyYWNrU2FtcGxlOmkoNikuQXVkaW9UcmFja1NhbXBsZSxWaWRlb1RyYWNrU2FtcGxlOmkoNikuVmlkZW9UcmFja1NhbXBsZSxNc2U6aSgyMikuZGVmYXVsdCxTdHJlYW06aSgyMykuZGVmYXVsdCxCdWZmZXI6aSgyNCkuZGVmYXVsdCxDcnlwdG86aSgyNykuZGVmYXVsdH19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjbGFzcyBze2NvbnN0cnVjdG9yKCl7dGhpcy5pZD0tMSx0aGlzLnNlcXVlbmNlTnVtYmVyPTAsdGhpcy5zYW1wbGVzPVtdLHRoaXMuZHJvcHBlZFNhbXBsZXM9W10sdGhpcy5sZW5ndGg9MH1yZXNldCgpe3RoaXMuc2VxdWVuY2VOdW1iZXI9MCx0aGlzLnNhbXBsZXM9W10sdGhpcy5sZW5ndGg9MH1kaXN0cm95KCl7dGhpcy5yZXNldCgpLHRoaXMuaWQ9LTF9fXQuZGVmYXVsdD1zO3QuQXVkaW9UcmFjaz1jbGFzcyBleHRlbmRzIHN7Y29uc3RydWN0b3IoKXtzdXBlcigpLHRoaXMuVEFHPVwiQXVkaW9UcmFja1wiLHRoaXMudHlwZT1cImF1ZGlvXCJ9fTt0LlZpZGVvVHJhY2s9Y2xhc3MgZXh0ZW5kcyBze2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLlRBRz1cIlZpZGVvVHJhY2tcIix0aGlzLnR5cGU9XCJ2aWRlb1wiLHRoaXMuZHJvcHBlZD0wfXJlc2V0KCl7dGhpcy5zZXF1ZW5jZU51bWJlcj0wLHRoaXMuc2FtcGxlcz1bXSx0aGlzLmxlbmd0aD0wLHRoaXMuZHJvcHBlZD0wfX07dC5UcmFja3M9Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLmF1ZGlvVHJhY2s9bnVsbCx0aGlzLnZpZGVvVHJhY2s9bnVsbH1kZXN0cm95KCl7dGhpcy5hdWRpb1RyYWNrPW51bGwsdGhpcy52aWRlb1RyYWNrPW51bGx9fX0sZnVuY3Rpb24odCxpKXt0LmV4cG9ydHM9ZX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IHM9ZT0+e2ZvcihsZXQgdCBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkodCkmJm51bGw9PT1lW3RdKXJldHVybiExO3JldHVybiEwfTtjbGFzcyBye2NvbnN0cnVjdG9yKCl7dGhpcy5taW1lVHlwZT1udWxsLHRoaXMuZHVyYXRpb249bnVsbCx0aGlzLmhhc1ZpZGVvPW51bGwsdGhpcy52aWRlbz17Y29kZWM6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByb2ZpbGU6bnVsbCxsZXZlbDpudWxsLGZyYW1lUmF0ZTp7Zml4ZWQ6ITAsZnBzOjI1LGZwc19udW06MjVlMyxmcHNfZGVuOjFlM30sY2hyb21hRm9ybWF0Om51bGwscGFyUmF0aW86e3dpZHRoOjEsaGVpZ2h0OjF9fSx0aGlzLmhhc0F1ZGlvPW51bGwsdGhpcy5hdWRpbz17Y29kZWM6bnVsbCxzYW1wbGVSYXRlOm51bGwsc2FtcGxlUmF0ZUluZGV4Om51bGwsY2hhbm5lbENvdW50Om51bGx9fWlzQ29tcGxldGUoKXtyZXR1cm4gci5pc0Jhc2VJbmZvUmVhZHkodGhpcykmJnIuaXNWaWRlb1JlYWR5KHRoaXMpJiZyLmlzQXVkaW9SZWFkeSh0aGlzKX1zdGF0aWMgaXNCYXNlSW5mb1JlYWR5KGUpe3JldHVybiBzKGUpfXN0YXRpYyBpc1ZpZGVvUmVhZHkoZSl7cmV0dXJuIWUuaGFzVmlkZW98fHMoZS52aWRlbyl9c3RhdGljIGlzQXVkaW9SZWFkeShlKXtyZXR1cm4hZS5oYXNBdWRpb3x8cyhlLnZpZGVvKX19dC5kZWZhdWx0PXJ9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBzPXtMQURFUl9TVEFSVDpcIkxPQURFUl9TVEFSVFwiLExPQURFUl9EQVRBTE9BREVEOlwiTE9BREVSX0RBVEFMT0FERURcIixMT0FERVJfQ09NUExFVEU6XCJMT0FERVJfQ09NUExFVEVcIixMT0FERVJfRVJST1I6XCJMT0FERVJfRVJST1JcIn0scj17REVNVVhfU1RBUlQ6XCJERU1VWF9TVEFSVFwiLERFTVVYX0NPTVBMRVRFOlwiREVNVVhfQ09NUExFVEVcIixERU1VWF9FUlJPUjpcIkRFTVVYX0VSUk9SXCIsTUVUQURBVEFfUEFSU0VEOlwiTUVUQURBVEFfUEFSU0VEXCIsVklERU9fTUVUQURBVEFfQ0hBTkdFOlwiVklERU9fTUVUQURBVEFfQ0hBTkdFXCIsQVVESU9fTUVUQURBVEFfQ0hBTkdFOlwiQVVESU9fTUVUQURBVEFfQ0hBTkdFXCIsTUVESUFfSU5GTzpcIk1FRElBX0lORk9cIn0sYT17UkVNVVhfTUVUQURBVEE6XCJSRU1VWF9NRVRBREFUQVwiLFJFTVVYX01FRElBOlwiUkVNVVhfTUVESUFcIixNRURJQV9TRUdNRU5UOlwiTUVESUFfU0VHTUVOVFwiLFJFTVVYX0VSUk9SOlwiUkVNVVhfRVJST1JcIixJTklUX1NFR01FTlQ6XCJJTklUX1NFR01FTlRcIixERVRFQ1RfQ0hBTkdFX1NUUkVBTTpcIkRFVEVDVF9DSEFOR0VfU1RSRUFNXCJ9LG49e1NPVVJDRV9VUERBVEVfRU5EOlwiU09VUkNFX1VQREFURV9FTkRcIn0sbz17UkVUUllfVElNRV9FWENFRURFRDpcIlJFVFJZX1RJTUVfRVhDRUVERURcIn0sZD1PYmplY3QuYXNzaWduKHt9LHMscixhLG4sbyksbD1bXSxoPVtdO2ZvcihsZXQgZSBpbiBkKWQuaGFzT3duUHJvcGVydHkoZSkmJmwucHVzaChkW2VdKTtmb3IobGV0IGUgaW4gZClkLmhhc093blByb3BlcnR5KGUpJiZoLnB1c2goZFtlXSk7dC5kZWZhdWx0PXtBTExFVkVOVFM6ZCxITFNfRVZFTlRTOm8sUkVNVVhfRVZFTlRTOmEsREVNVVhfRVZFTlRTOnIsTVNFX0VWRU5UUzpuLExPQURFUl9FVkVOVFM6cyxGbHZBbGxvd2VkRXZlbnRzOmwsSGxzQWxsb3dlZEV2ZW50czpoLENSWVRPX0VWRU5UUzp7U1RBUlRfREVDUllQVDpcIlNUQVJUX0RFQ1JZUFRcIixERUNSWVBURUQ6XCJERUNSWVBURURcIn19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dC5BdWRpb1RyYWNrTWV0YT1jbGFzc3tjb25zdHJ1Y3RvcihlKXtjb25zdCB0PXtzYW1wbGVSYXRlOjQ4ZTMsY2hhbm5lbENvdW50OjIsY29kZWM6XCJtcDRhLjQwLjJcIixjb25maWc6WzQxLDQwMSwxMzYsMF0sZHVyYXRpb246MCxpZDoyLHJlZlNhbXBsZUR1cmF0aW9uOjIxLHNhbXBsZVJhdGVJbmRleDozLHRpbWVzY2FsZToxZTMsdHlwZTpcImF1ZGlvXCJ9O3JldHVybiBlP09iamVjdC5hc3NpZ24oe30sdCxlKTp0fWRlc3Ryb3koKXt0aGlzLmluaXQ9bnVsbH19O3QuVmlkZW9UcmFja01ldGE9Y2xhc3N7Y29uc3RydWN0b3IoZSl7Y29uc3QgdD17YXZjYzpudWxsLHNwczpuZXcgVWludDhBcnJheSgwKSxwcHM6bmV3IFVpbnQ4QXJyYXkoMCksY2hyb21hRm9ybWF0OjQyMCxjb2RlYzpcImF2YzEuNjQwMDIwXCIsY29kZWNIZWlnaHQ6NzIwLGNvZGVjV2lkdGg6MTI4MCxkdXJhdGlvbjowLGZyYW1lUmF0ZTp7Zml4ZWQ6ITAsZnBzOjI1LGZwc19udW06MjVlMyxmcHNfZGVuOjFlM30saWQ6MSxsZXZlbDpcIjMuMlwiLHByZXNlbnRIZWlnaHQ6NzIwLHByZXNlbnRXaWR0aDoxMjgwLHByb2ZpbGU6XCJIaWdoXCIscmVmU2FtcGxlRHVyYXRpb246NDAscGFyUmF0aW86e2hlaWdodDoxLHdpZHRoOjF9LHRpbWVzY2FsZToxZTMsdHlwZTpcInZpZGVvXCJ9O3JldHVybiBlP09iamVjdC5hc3NpZ24oe30sdCxlKTp0fWRlc3Ryb3koKXt0aGlzLmluaXQ9bnVsbCx0aGlzLnNwcz1udWxsLHRoaXMucHBzPW51bGx9fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NsYXNzIHN7Y29uc3RydWN0b3IoZSl7bGV0IHQ9cy5nZXREZWZhdWx0KCk7cmV0dXJuIGU/T2JqZWN0LmFzc2lnbih7fSx0LGUpOnR9c3RhdGljIGdldERlZmF1bHQoKXtyZXR1cm57ZHRzOm51bGwscHRzOm51bGwsZGF0YTpuZXcgVWludDhBcnJheX19fXQuQXVkaW9UcmFja1NhbXBsZT1zO2NsYXNzIHJ7Y29uc3RydWN0b3IoZSl7bGV0IHQ9ci5nZXREZWZhdWx0KCk7cmV0dXJuIGU/T2JqZWN0LmFzc2lnbih7fSx0LGUpOnR9c3RhdGljIGdldERlZmF1bHQoKXtyZXR1cm57ZHRzOm51bGwscHRzOm51bGwsaXNLZXlmcmFtZTohMSxvcmlnaW5EdHM6bnVsbCxkYXRhOm5ldyBVaW50OEFycmF5fX19dC5WaWRlb1RyYWNrU2FtcGxlPXJ9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9e05hbHVuaXQ6aSgzMCkuZGVmYXVsdCxTcHNQYXJzZXI6aSg4KS5kZWZhdWx0LENvbXBhdGliaWxpdHk6aSgzMikuZGVmYXVsdH19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcyxyPWkoMzEpLGE9KHM9cikmJnMuX19lc01vZHVsZT9zOntkZWZhdWx0OnN9O2NsYXNzIG57c3RhdGljIF9lYnNwMnJic3AoZSl7bGV0IHQ9ZSxpPXQuYnl0ZUxlbmd0aCxzPW5ldyBVaW50OEFycmF5KGkpLHI9MDtmb3IobGV0IGU9MDtlPGk7ZSsrKWU+PTImJjM9PT10W2VdJiYwPT09dFtlLTFdJiYwPT09dFtlLTJdfHwoc1tyXT10W2VdLHIrKyk7cmV0dXJuIG5ldyBVaW50OEFycmF5KHMuYnVmZmVyLDAscil9c3RhdGljIHBhcnNlU1BTKGUpe2xldCB0PW4uX2Vic3AycmJzcChlKSxpPW5ldyBhLmRlZmF1bHQodCk7aS5yZWFkQnl0ZSgpO2xldCBzPWkucmVhZEJ5dGUoKTtpLnJlYWRCeXRlKCk7bGV0IHI9aS5yZWFkQnl0ZSgpO2kucmVhZFVFRygpO2xldCBvPW4uZ2V0UHJvZmlsZVN0cmluZyhzKSxkPW4uZ2V0TGV2ZWxTdHJpbmcociksbD0xLGg9NDIwLHU9WzAsNDIwLDQyMiw0NDRdLGM9ODtpZigoMTAwPT09c3x8MTEwPT09c3x8MTIyPT09c3x8MjQ0PT09c3x8NDQ9PT1zfHw4Mz09PXN8fDg2PT09c3x8MTE4PT09c3x8MTI4PT09c3x8MTM4PT09c3x8MTQ0PT09cykmJigzPT09KGw9aS5yZWFkVUVHKCkpJiZpLnJlYWRCaXRzKDEpLGw8PTMmJihoPXVbbF0pLGM9aS5yZWFkVUVHKCkrOCxpLnJlYWRVRUcoKSxpLnJlYWRCaXRzKDEpLGkucmVhZEJvb2woKSkpe2xldCBlPTMhPT1sPzg6MTI7Zm9yKGxldCB0PTA7dDxlO3QrKylpLnJlYWRCb29sKCkmJih0PDY/bi5fc2tpcFNjYWxpbmdMaXN0KGksMTYpOm4uX3NraXBTY2FsaW5nTGlzdChpLDY0KSl9aS5yZWFkVUVHKCk7bGV0IGY9aS5yZWFkVUVHKCk7aWYoMD09PWYpaS5yZWFkVUVHKCk7ZWxzZSBpZigxPT09Zil7aS5yZWFkQml0cygxKSxpLnJlYWRTRUcoKSxpLnJlYWRTRUcoKTtsZXQgZT1pLnJlYWRVRUcoKTtmb3IobGV0IHQ9MDt0PGU7dCsrKWkucmVhZFNFRygpfWkucmVhZFVFRygpLGkucmVhZEJpdHMoMSk7bGV0IHA9aS5yZWFkVUVHKCksbT1pLnJlYWRVRUcoKSxnPWkucmVhZEJpdHMoMSk7MD09PWcmJmkucmVhZEJpdHMoMSksaS5yZWFkQml0cygxKTtsZXQgXz0wLHk9MCxFPTAsUz0wO2kucmVhZEJvb2woKSYmKF89aS5yZWFkVUVHKCkseT1pLnJlYWRVRUcoKSxFPWkucmVhZFVFRygpLFM9aS5yZWFkVUVHKCkpO2xldCBBPTEsdj0xLFQ9MCxiPSEwLFI9MCxEPTA7aWYoaS5yZWFkQm9vbCgpKXtpZihpLnJlYWRCb29sKCkpe2xldCBlPWkucmVhZEJ5dGUoKSx0PVsxLDEyLDEwLDE2LDQwLDI0LDIwLDMyLDgwLDE4LDE1LDY0LDE2MCw0LDMsMl0scz1bMSwxMSwxMSwxMSwzMywxMSwxMSwxMSwzMywxMSwxMSwzMyw5OSwzLDIsMV07ZT4wJiZlPDE2PyhBPXRbZS0xXSx2PXNbZS0xXSk6MjU1PT09ZSYmKEE9aS5yZWFkQnl0ZSgpPDw4fGkucmVhZEJ5dGUoKSx2PWkucmVhZEJ5dGUoKTw8OHxpLnJlYWRCeXRlKCkpfWlmKGkucmVhZEJvb2woKSYmaS5yZWFkQm9vbCgpLGkucmVhZEJvb2woKSYmKGkucmVhZEJpdHMoNCksaS5yZWFkQm9vbCgpJiZpLnJlYWRCaXRzKDI0KSksaS5yZWFkQm9vbCgpJiYoaS5yZWFkVUVHKCksaS5yZWFkVUVHKCkpLGkucmVhZEJvb2woKSl7bGV0IGU9aS5yZWFkQml0cygzMiksdD1pLnJlYWRCaXRzKDMyKTtiPWkucmVhZEJvb2woKSxUPShSPXQpLyhEPTIqZSl9fWxldCB3PTE7MT09PUEmJjE9PT12fHwodz1BL3YpO2xldCB4PTAsTD0wO2lmKDA9PT1sKXg9MSxMPTItZztlbHNle3g9Mz09PWw/MToyLEw9KDE9PT1sPzI6MSkqKDItZyl9bGV0IE89MTYqKHArMSksTT0xNioobSsxKSooMi1nKTtPLT0oXyt5KSp4LE0tPShFK1MpKkw7bGV0IEI9TWF0aC5jZWlsKE8qdyk7cmV0dXJuIGkuZGVzdHJveSgpLGk9bnVsbCx7cHJvZmlsZV9zdHJpbmc6byxsZXZlbF9zdHJpbmc6ZCxiaXRfZGVwdGg6YyxjaHJvbWFfZm9ybWF0OmgsY2hyb21hX2Zvcm1hdF9zdHJpbmc6bi5nZXRDaHJvbWFGb3JtYXRTdHJpbmcoaCksZnJhbWVfcmF0ZTp7Zml4ZWQ6YixmcHM6VCxmcHNfZGVuOkQsZnBzX251bTpSfSxwYXJfcmF0aW86e3dpZHRoOkEsaGVpZ2h0OnZ9LGNvZGVjX3NpemU6e3dpZHRoOk8saGVpZ2h0Ok19LHByZXNlbnRfc2l6ZTp7d2lkdGg6QixoZWlnaHQ6TX19fXN0YXRpYyBfc2tpcFNjYWxpbmdMaXN0KGUsdCl7bGV0IGk9OCxzPTgscj0wO2ZvcihsZXQgYT0wO2E8dDthKyspMCE9PXMmJihzPShpKyhyPWUucmVhZFNFRygpKSsyNTYpJTI1NiksaT0wPT09cz9pOnN9c3RhdGljIGdldFByb2ZpbGVTdHJpbmcoZSl7c3dpdGNoKGUpe2Nhc2UgNjY6cmV0dXJuXCJCYXNlbGluZVwiO2Nhc2UgNzc6cmV0dXJuXCJNYWluXCI7Y2FzZSA4ODpyZXR1cm5cIkV4dGVuZGVkXCI7Y2FzZSAxMDA6cmV0dXJuXCJIaWdoXCI7Y2FzZSAxMTA6cmV0dXJuXCJIaWdoMTBcIjtjYXNlIDEyMjpyZXR1cm5cIkhpZ2g0MjJcIjtjYXNlIDI0NDpyZXR1cm5cIkhpZ2g0NDRcIjtkZWZhdWx0OnJldHVyblwiVW5rbm93blwifX1zdGF0aWMgZ2V0TGV2ZWxTdHJpbmcoZSl7cmV0dXJuKGUvMTApLnRvRml4ZWQoMSl9c3RhdGljIGdldENocm9tYUZvcm1hdFN0cmluZyhlKXtzd2l0Y2goZSl7Y2FzZSA0MjA6cmV0dXJuXCI0OjI6MFwiO2Nhc2UgNDIyOnJldHVyblwiNDoyOjJcIjtjYXNlIDQ0NDpyZXR1cm5cIjQ6NDo0XCI7ZGVmYXVsdDpyZXR1cm5cIlVua25vd25cIn19c3RhdGljIHRvVmlkZW9NZXRhKGUpe2xldCB0PXt9O2UmJmUuY29kZWNfc2l6ZSYmKHQuY29kZWNXaWR0aD1lLmNvZGVjX3NpemUud2lkdGgsdC5jb2RlY0hlaWdodD1lLmNvZGVjX3NpemUuaGVpZ2h0LHQucHJlc2VudFdpZHRoPWUucHJlc2VudF9zaXplLndpZHRoLHQucHJlc2VudEhlaWdodD1lLnByZXNlbnRfc2l6ZS5oZWlnaHQpLHQucHJvZmlsZT1lLnByb2ZpbGVfc3RyaW5nLHQubGV2ZWw9ZS5sZXZlbF9zdHJpbmcsdC5iaXREZXB0aD1lLmJpdF9kZXB0aCx0LmNocm9tYUZvcm1hdD1lLmNocm9tYV9mb3JtYXQsdC5wYXJSYXRpbz17d2lkdGg6ZS5wYXJfcmF0aW8ud2lkdGgsaGVpZ2h0OmUucGFyX3JhdGlvLmhlaWdodH0sdC5mcmFtZVJhdGU9ZS5mcmFtZV9yYXRlO2xldCBpPXQuZnJhbWVSYXRlLmZwc19kZW4scz10LmZyYW1lUmF0ZS5mcHNfbnVtO3QucmVmU2FtcGxlRHVyYXRpb249TWF0aC5mbG9vcih0LnRpbWVzY2FsZSooaS9zKSl9fXQuZGVmYXVsdD1ufSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXtUcmFjazppKDEpLmRlZmF1bHQsVHJhY2tzOmkoMSkuVHJhY2tzLEF1ZGlvVHJhY2s6aSgxKS5BdWRpb1RyYWNrLFZpZGVvVHJhY2s6aSgxKS5WaWRlb1RyYWNrLFhnQnVmZmVyOmkoMTApLlhnQnVmZmVyLFJlbXV4QnVmZmVyOmkoMTApLlJlbXV4QnVmZmVyLFByZVNvdXJjZTppKDM0KS5kZWZhdWx0fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3QuWGdCdWZmZXI9Y2xhc3N7Y29uc3RydWN0b3IoZSl7dGhpcy5sZW5ndGg9ZXx8MCx0aGlzLmhpc3RvcnlMZW49ZXx8MCx0aGlzLmFycmF5PVtdLHRoaXMub2Zmc2V0PTB9cHVzaChlKXt0aGlzLmFycmF5LnB1c2goZSksdGhpcy5sZW5ndGgrPWUuYnl0ZUxlbmd0aCx0aGlzLmhpc3RvcnlMZW4rPWUuYnl0ZUxlbmd0aH1zaGlmdChlKXtpZih0aGlzLmFycmF5Lmxlbmd0aDwxKXJldHVybiBuZXcgVWludDhBcnJheSgwKTtpZih2b2lkIDA9PT1lKXJldHVybiB0aGlzLl9zaGlmdEJ1ZmZlcigpO2lmKHRoaXMub2Zmc2V0K2U9PT10aGlzLmFycmF5WzBdLmxlbmd0aCl7bGV0IHQ9dGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCx0aGlzLm9mZnNldCtlKTtyZXR1cm4gdGhpcy5vZmZzZXQ9MCx0aGlzLmFycmF5LnNoaWZ0KCksdGhpcy5sZW5ndGgtPWUsdH1pZih0aGlzLm9mZnNldCtlPHRoaXMuYXJyYXlbMF0ubGVuZ3RoKXtsZXQgdD10aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LHRoaXMub2Zmc2V0K2UpO3JldHVybiB0aGlzLm9mZnNldCs9ZSx0aGlzLmxlbmd0aC09ZSx0fWxldCB0PW5ldyBVaW50OEFycmF5KGUpLGk9MDtmb3IoO3RoaXMuYXJyYXkubGVuZ3RoPjAmJmU+MDspe2lmKHRoaXMub2Zmc2V0K2U8dGhpcy5hcnJheVswXS5sZW5ndGgpe2xldCBzPXRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsdGhpcy5vZmZzZXQrZSk7dC5zZXQocyxpKSx0aGlzLm9mZnNldCs9ZSx0aGlzLmxlbmd0aC09ZSxlPTA7YnJlYWt9e2xldCBzPXRoaXMuYXJyYXlbMF0ubGVuZ3RoLXRoaXMub2Zmc2V0O3Quc2V0KHRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsdGhpcy5hcnJheVswXS5sZW5ndGgpLGkpLHRoaXMuYXJyYXkuc2hpZnQoKSx0aGlzLm9mZnNldD0wLGkrPXMsdGhpcy5sZW5ndGgtPXMsZS09c319cmV0dXJuIHR9Y2xlYXIoKXt0aGlzLmFycmF5PVtdLHRoaXMubGVuZ3RoPTAsdGhpcy5vZmZzZXQ9MH1kZXN0cm95KCl7dGhpcy5jbGVhcigpLHRoaXMuaGlzdG9yeUxlbj0wfV9zaGlmdEJ1ZmZlcigpe3JldHVybiB0aGlzLmxlbmd0aC09dGhpcy5hcnJheVswXS5sZW5ndGgsdGhpcy5vZmZzZXQ9MCx0aGlzLmFycmF5LnNoaWZ0KCl9dG9JbnQoZSx0KXtsZXQgaT0wLHM9dGhpcy5vZmZzZXQrZTtmb3IoO3M8dGhpcy5vZmZzZXQrdCtlOylzPHRoaXMuYXJyYXlbMF0ubGVuZ3RoP2k9MjU2KmkrdGhpcy5hcnJheVswXVtzXTp0aGlzLmFycmF5WzFdJiYoaT0yNTYqaSt0aGlzLmFycmF5WzFdW3MtdGhpcy5hcnJheVswXS5sZW5ndGhdKSxzKys7cmV0dXJuIGl9fTt0LlJlbXV4QnVmZmVyPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy52aWRlbz1bXSx0aGlzLmF1ZGlvPVtdfWRlc3Ryb3koKXt0aGlzLnZpZGVvPVtdLHRoaXMuYXVkaW89W119fX0sZnVuY3Rpb24oZSx0LGkpe2UuZXhwb3J0cz1pKDEyKX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO3ZhciBzPW4oaSgyKSkscj1pKDApLGE9bihpKDI4KSk7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19Y29uc3Qgbz1yLkVWRU5UUy5GbHZBbGxvd2VkRXZlbnRzLGQ9KGUsdCk9PntpZighZS5jb25maWcuaXNMaXZlJiZlLmR1cmF0aW9uLWUuY3VycmVudFRpbWU8Mil7Y29uc3QgaT1lLmdldEJ1ZmZlcmVkUmFuZ2UoKTtlLmN1cnJlbnRUaW1lLWlbMV08LjEmJihlLmVtaXQoXCJlbmRlZFwiKSx0Lm1zZS5lbmRPZlN0cmVhbSgpKX19O2NsYXNzIGwgZXh0ZW5kcyBzLmRlZmF1bHR7Y29uc3RydWN0b3IoZSl7c3VwZXIoZSksdGhpcy5jb250ZXh0PW5ldyByLkNvbnRleHQobyksdGhpcy5pbml0RXZlbnRzKCl9c3RhcnQoKXtjb25zdCBlPXRoaXMuY29udGV4dC5yZWdpc3RyeShcIkZMVl9DT05UUk9MTEVSXCIsYS5kZWZhdWx0KSh0aGlzKTt0aGlzLmZsdj1lLHRoaXMuY29udGV4dC5pbml0KCksc3VwZXIuc3RhcnQoZS5tc2UudXJsKX1pbml0RXZlbnRzKCl7dGhpcy5vbihcInRpbWV1cGRhdGVcIix0aGlzLmhhbmRsZVRpbWVVcGRhdGUuYmluZCh0aGlzKSksdGhpcy5vbihcInNlZWtpbmdcIix0aGlzLmhhbmRsZVNlZWsuYmluZCh0aGlzKSksdGhpcy5vbmNlKFwiZGVzdHJveVwiLHRoaXMuX2Rlc3Ryb3kuYmluZCh0aGlzKSl9aGFuZGxlVGltZVVwZGF0ZSgpe3RoaXMubG9hZERhdGEoKSxkKHRoaXMsdGhpcy5mbHYpfWhhbmRsZVNlZWsoKXtjb25zdCBlPXRoaXMuY3VycmVudFRpbWUsdD10aGlzLmdldEJ1ZmZlcmVkUmFuZ2UoKTsoZT50WzFdfHxlPHRbMF0pJiZ0aGlzLmZsdi5zZWVrKHRoaXMuY3VycmVudFRpbWUpfV9kZXN0cm95KCl7dGhpcy5jb250ZXh0LmRlc3Ryb3koKSx0aGlzLmNvbnRleHQ9bnVsbCx0aGlzLmZsdj1udWxsfWxvYWREYXRhKGU9dGhpcy5jdXJyZW50VGltZSl7Y29uc3QgdD10aGlzLmdldEJ1ZmZlcmVkUmFuZ2UoKTt0WzFdLWU8KHRoaXMuY29uZmlnLnByZWxvYWRUaW1lfHwxNSktNSYmdGhpcy5mbHYubG9hZE5leHQodFsxXSsxKX1nZXQgc3JjKCl7cmV0dXJuIHRoaXMuY3VycmVudFNyY31zZXQgc3JjKGUpe3RoaXMucGxheWVyLmNvbmZpZy51cmw9ZSx0aGlzLnBhdXNlZD90aGlzLnN0YXJ0KGUpOih0aGlzLnBhdXNlKCksdGhpcy5vbmNlKFwicGF1c2VcIiwoKT0+e3RoaXMuc3RhcnQoZSl9KSx0aGlzLm9uY2UoXCJjYW5wbGF5XCIsKCk9Pnt0aGlzLnBsYXkoKX0pKSx0aGlzLm9uY2UoXCJjYW5wbGF5XCIsKCk9Pnt0aGlzLmN1cnJlbnRUaW1lPTB9KX19ZS5leHBvcnRzPWx9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcyxyPWkoMyksYT0ocz1yKSYmcy5fX2VzTW9kdWxlP3M6e2RlZmF1bHQ6c30sbj1pKDE0KTtjb25zdCBvPVwiX19UT19fXCI7dC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKGU9W10pe3RoaXMuX2VtaXR0ZXI9bmV3IG4uRXZlbnRFbWl0dGVyLHRoaXMuX2luc3RhbmNlTWFwPXt9LHRoaXMuX2Nsc01hcD17fSx0aGlzLl9pbml0ZWQ9ITEsdGhpcy5tZWRpYUluZm89bmV3IGEuZGVmYXVsdCx0aGlzLmFsbG93ZWRFdmVudHM9ZSx0aGlzLl9ob29rcz17fX1nZXRJbnN0YW5jZShlKXtjb25zdCB0PXRoaXMuX2luc3RhbmNlTWFwW2VdO3JldHVybiB0fHxudWxsfWluaXRJbnN0YW5jZShlLC4uLnQpe2lmKHRoaXMuX2Nsc01hcFtlXSl7Y29uc3QgaT1uZXcgdGhpcy5fY2xzTWFwW2VdKC4uLnQpO3JldHVybiB0aGlzLl9pbnN0YW5jZU1hcFtlXT1pLGkuaW5pdCYmaS5pbml0KCksaX10aHJvdyBuZXcgRXJyb3IoYCR7ZX3mnKrlnKhjb250ZXh05Lit5rOo5YaMYCl9aW5pdChlKXtpZighdGhpcy5faW5pdGVkKXtmb3IobGV0IHQgaW4gdGhpcy5fY2xzTWFwKXRoaXMuX2Nsc01hcC5oYXNPd25Qcm9wZXJ0eSh0KSYmIXRoaXMuX2luc3RhbmNlTWFwW3RdJiZ0aGlzLmluaXRJbnN0YW5jZSh0LGUpO3RoaXMuX2luaXRlZD0hMH19cmVnaXN0cnkoZSx0KXtjb25zdCBpPXRoaXMuX2VtaXR0ZXIscz10aGlzLl9pc01lc3NhZ2VOYW1lVmFsaWQuYmluZCh0aGlzKSxyPXRoaXM7cmV0dXJuIHRoaXMuX2Nsc01hcFtlXT1jbGFzcyBleHRlbmRzIHR7Y29uc3RydWN0b3IoLi4udCl7c3VwZXIoLi4udCksdGhpcy5saXN0ZW5lcnM9e30sdGhpcy5vbmNlTGlzdGVuZXJzPXt9LHRoaXMuVEFHPWUsdGhpcy5fY29udGV4dD1yfW9uKHQscil7cmV0dXJuIHModCksdGhpcy5saXN0ZW5lcnNbdF0/dGhpcy5saXN0ZW5lcnNbdF0ucHVzaChyKTp0aGlzLmxpc3RlbmVyc1t0XT1bcl0saS5vbihgJHt0fSR7b30ke2V9YCxyKSxpLm9uKHQscil9YmVmb3JlKGUsdCl7cyhlKSxyLl9ob29rc1tlXT9yLl9ob29rc1tlXS5wdXNoKHQpOnIuX2hvb2tzW2VdPVt0XX1vbmNlKHQscil7cmV0dXJuIHModCksdGhpcy5vbmNlTGlzdGVuZXJzW3RdP3RoaXMub25jZUxpc3RlbmVyc1t0XS5wdXNoKHIpOnRoaXMub25jZUxpc3RlbmVyc1t0XT1bcl0saS5vbmNlKGAke3R9JHtvfSR7ZX1gLHIpLGkub25jZSh0LHIpfWVtaXQoZSwuLi50KXtzKGUpO2NvbnN0IGE9ci5faG9va3M/ci5faG9va3NbZV06bnVsbDtpZihhKWZvcihsZXQgZT0wLHQ9YS5sZW5ndGg7ZTx0O2UrKyl7KDAsYVtlXSkoKX1yZXR1cm4gaS5lbWl0KGUsLi4udCl9ZW1pdFRvKGUsdCwuLi5yKXtyZXR1cm4gcyh0KSxpLmVtaXQoYCR7dH0ke299JHtlfWAsLi4ucil9b2ZmKGUsdCl7cmV0dXJuIHMoZSksaS5vZmYoZSx0KX1yZW1vdmVMaXN0ZW5lcnMoKXtjb25zdCB0PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZCh0aGlzLmxpc3RlbmVycyk7Zm9yKGxldCBzIGluIHRoaXMubGlzdGVuZXJzKWlmKHQocykpe2NvbnN0IHQ9dGhpcy5saXN0ZW5lcnNbc118fFtdO2ZvcihsZXQgcj0wO3I8dC5sZW5ndGg7cisrKXtjb25zdCBhPXRbcl07aS5vZmYocyxhKSxpLm9mZihgJHtzfSR7b30ke2V9YCxhKX19Zm9yKGxldCBzIGluIHRoaXMub25jZUxpc3RlbmVycylpZih0KHMpKXtjb25zdCB0PXRoaXMub25jZUxpc3RlbmVyc1tzXXx8W107Zm9yKGxldCByPTA7cjx0Lmxlbmd0aDtyKyspe2NvbnN0IGE9dFtyXTtpLm9mZihzLGEpLGkub2ZmKGAke3N9JHtvfSR7ZX1gLGEpfX19ZGVzdHJveSgpe2lmKHRoaXMucmVtb3ZlTGlzdGVuZXJzKCksdGhpcy5saXN0ZW5lcnM9e30sZGVsZXRlIHIuX2luc3RhbmNlTWFwW2VdLHN1cGVyLmRlc3Ryb3kpcmV0dXJuIHN1cGVyLmRlc3Ryb3koKX19LCguLi50KT0+dGhpcy5pbml0SW5zdGFuY2UoZSwuLi50KX1kZXN0cm95SW5zdGFuY2VzKCl7T2JqZWN0LmtleXModGhpcy5faW5zdGFuY2VNYXApLmZvckVhY2goZT0+e3RoaXMuX2luc3RhbmNlTWFwW2VdLmRlc3Ryb3kmJnRoaXMuX2luc3RhbmNlTWFwW2VdLmRlc3Ryb3koKX0pfWRlc3Ryb3koKXt0aGlzLl9lbWl0dGVyPW51bGwsdGhpcy5hbGxvd2VkRXZlbnRzPVtdLHRoaXMuX2Nsc01hcD1udWxsLHRoaXMuX2NvbnRleHQ9bnVsbCx0aGlzLl9ob29rcz1udWxsLHRoaXMuZGVzdHJveUluc3RhbmNlcygpfV9pc01lc3NhZ2VOYW1lVmFsaWQoZSl7aWYoIXRoaXMuYWxsb3dlZEV2ZW50cy5pbmRleE9mKGUpPDApdGhyb3cgbmV3IEVycm9yKGB1bnJlZ2lzdGVyZWQgbWVzc2FnZSBuYW1lOiAke2V9YCl9fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO3ZhciBzLHI9XCJvYmplY3RcIj09dHlwZW9mIFJlZmxlY3Q/UmVmbGVjdDpudWxsLGE9ciYmXCJmdW5jdGlvblwiPT10eXBlb2Ygci5hcHBseT9yLmFwcGx5OmZ1bmN0aW9uKGUsdCxpKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoZSx0LGkpfTtzPXImJlwiZnVuY3Rpb25cIj09dHlwZW9mIHIub3duS2V5cz9yLm93bktleXM6T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSkuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSkpfTpmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSl9O3ZhciBuPU51bWJlci5pc05hTnx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUhPWV9O2Z1bmN0aW9uIG8oKXtvLmluaXQuY2FsbCh0aGlzKX1lLmV4cG9ydHM9byxvLkV2ZW50RW1pdHRlcj1vLG8ucHJvdG90eXBlLl9ldmVudHM9dm9pZCAwLG8ucHJvdG90eXBlLl9ldmVudHNDb3VudD0wLG8ucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnM9dm9pZCAwO3ZhciBkPTEwO2Z1bmN0aW9uIGwoZSl7cmV0dXJuIHZvaWQgMD09PWUuX21heExpc3RlbmVycz9vLmRlZmF1bHRNYXhMaXN0ZW5lcnM6ZS5fbWF4TGlzdGVuZXJzfWZ1bmN0aW9uIGgoZSx0LGkscyl7dmFyIHIsYSxuLG87aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgaSl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBpKTtpZih2b2lkIDA9PT0oYT1lLl9ldmVudHMpPyhhPWUuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLGUuX2V2ZW50c0NvdW50PTApOih2b2lkIDAhPT1hLm5ld0xpc3RlbmVyJiYoZS5lbWl0KFwibmV3TGlzdGVuZXJcIix0LGkubGlzdGVuZXI/aS5saXN0ZW5lcjppKSxhPWUuX2V2ZW50cyksbj1hW3RdKSx2b2lkIDA9PT1uKW49YVt0XT1pLCsrZS5fZXZlbnRzQ291bnQ7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP249YVt0XT1zP1tpLG5dOltuLGldOnM/bi51bnNoaWZ0KGkpOm4ucHVzaChpKSwocj1sKGUpKT4wJiZuLmxlbmd0aD5yJiYhbi53YXJuZWQpe24ud2FybmVkPSEwO3ZhciBkPW5ldyBFcnJvcihcIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gXCIrbi5sZW5ndGgrXCIgXCIrU3RyaW5nKHQpK1wiIGxpc3RlbmVycyBhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXRcIik7ZC5uYW1lPVwiTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nXCIsZC5lbWl0dGVyPWUsZC50eXBlPXQsZC5jb3VudD1uLmxlbmd0aCxvPWQsY29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4obyl9cmV0dXJuIGV9ZnVuY3Rpb24gdSgpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllLnB1c2goYXJndW1lbnRzW3RdKTt0aGlzLmZpcmVkfHwodGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLHRoaXMud3JhcEZuKSx0aGlzLmZpcmVkPSEwLGEodGhpcy5saXN0ZW5lcix0aGlzLnRhcmdldCxlKSl9ZnVuY3Rpb24gYyhlLHQsaSl7dmFyIHM9e2ZpcmVkOiExLHdyYXBGbjp2b2lkIDAsdGFyZ2V0OmUsdHlwZTp0LGxpc3RlbmVyOml9LHI9dS5iaW5kKHMpO3JldHVybiByLmxpc3RlbmVyPWkscy53cmFwRm49cixyfWZ1bmN0aW9uIGYoZSx0LGkpe3ZhciBzPWUuX2V2ZW50cztpZih2b2lkIDA9PT1zKXJldHVybltdO3ZhciByPXNbdF07cmV0dXJuIHZvaWQgMD09PXI/W106XCJmdW5jdGlvblwiPT10eXBlb2Ygcj9pP1tyLmxpc3RlbmVyfHxyXTpbcl06aT9mdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IEFycmF5KGUubGVuZ3RoKSxpPTA7aTx0Lmxlbmd0aDsrK2kpdFtpXT1lW2ldLmxpc3RlbmVyfHxlW2ldO3JldHVybiB0fShyKTptKHIsci5sZW5ndGgpfWZ1bmN0aW9uIHAoZSl7dmFyIHQ9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PXQpe3ZhciBpPXRbZV07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgaSlyZXR1cm4gMTtpZih2b2lkIDAhPT1pKXJldHVybiBpLmxlbmd0aH1yZXR1cm4gMH1mdW5jdGlvbiBtKGUsdCl7Zm9yKHZhciBpPW5ldyBBcnJheSh0KSxzPTA7czx0OysrcylpW3NdPWVbc107cmV0dXJuIGl9T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldDpmdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZXx8ZTwwfHxuKGUpKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJytlK1wiLlwiKTtkPWV9fSksby5pbml0PWZ1bmN0aW9uKCl7dm9pZCAwIT09dGhpcy5fZXZlbnRzJiZ0aGlzLl9ldmVudHMhPT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApLHRoaXMuX21heExpc3RlbmVycz10aGlzLl9tYXhMaXN0ZW5lcnN8fHZvaWQgMH0sby5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzPWZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlPDB8fG4oZSkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK2UrXCIuXCIpO3JldHVybiB0aGlzLl9tYXhMaXN0ZW5lcnM9ZSx0aGlzfSxvLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtyZXR1cm4gbCh0aGlzKX0sby5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10saT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspdC5wdXNoKGFyZ3VtZW50c1tpXSk7dmFyIHM9XCJlcnJvclwiPT09ZSxyPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1yKXM9cyYmdm9pZCAwPT09ci5lcnJvcjtlbHNlIGlmKCFzKXJldHVybiExO2lmKHMpe3ZhciBuO2lmKHQubGVuZ3RoPjAmJihuPXRbMF0pLG4gaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBuO3ZhciBvPW5ldyBFcnJvcihcIlVuaGFuZGxlZCBlcnJvci5cIisobj9cIiAoXCIrbi5tZXNzYWdlK1wiKVwiOlwiXCIpKTt0aHJvdyBvLmNvbnRleHQ9bixvfXZhciBkPXJbZV07aWYodm9pZCAwPT09ZClyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkKWEoZCx0aGlzLHQpO2Vsc2V7dmFyIGw9ZC5sZW5ndGgsaD1tKGQsbCk7Zm9yKGk9MDtpPGw7KytpKWEoaFtpXSx0aGlzLHQpfXJldHVybiEwfSxvLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiBoKHRoaXMsZSx0LCExKX0sby5wcm90b3R5cGUub249by5wcm90b3R5cGUuYWRkTGlzdGVuZXIsby5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGgodGhpcyxlLHQsITApfSxvLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiB0KTtyZXR1cm4gdGhpcy5vbihlLGModGhpcyxlLHQpKSx0aGlzfSxvLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiB0KTtyZXR1cm4gdGhpcy5wcmVwZW5kTGlzdGVuZXIoZSxjKHRoaXMsZSx0KSksdGhpc30sby5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXt2YXIgaSxzLHIsYSxuO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgdCk7aWYodm9pZCAwPT09KHM9dGhpcy5fZXZlbnRzKSlyZXR1cm4gdGhpcztpZih2b2lkIDA9PT0oaT1zW2VdKSlyZXR1cm4gdGhpcztpZihpPT09dHx8aS5saXN0ZW5lcj09PXQpMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTooZGVsZXRlIHNbZV0scy5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIixlLGkubGlzdGVuZXJ8fHQpKTtlbHNlIGlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkpe2ZvcihyPS0xLGE9aS5sZW5ndGgtMTthPj0wO2EtLSlpZihpW2FdPT09dHx8aVthXS5saXN0ZW5lcj09PXQpe249aVthXS5saXN0ZW5lcixyPWE7YnJlYWt9aWYocjwwKXJldHVybiB0aGlzOzA9PT1yP2kuc2hpZnQoKTpmdW5jdGlvbihlLHQpe2Zvcig7dCsxPGUubGVuZ3RoO3QrKyllW3RdPWVbdCsxXTtlLnBvcCgpfShpLHIpLDE9PT1pLmxlbmd0aCYmKHNbZV09aVswXSksdm9pZCAwIT09cy5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIixlLG58fHQpfXJldHVybiB0aGlzfSxvLnByb3RvdHlwZS5vZmY9by5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIsby5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LGkscztpZih2b2lkIDA9PT0oaT10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PWkucmVtb3ZlTGlzdGVuZXIpcmV0dXJuIDA9PT1hcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKTp2b2lkIDAhPT1pW2VdJiYoMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTpkZWxldGUgaVtlXSksdGhpcztpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHIsYT1PYmplY3Qua2V5cyhpKTtmb3Iocz0wO3M8YS5sZW5ndGg7KytzKVwicmVtb3ZlTGlzdGVuZXJcIiE9PShyPWFbc10pJiZ0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhyKTtyZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJyZW1vdmVMaXN0ZW5lclwiKSx0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wLHRoaXN9aWYoXCJmdW5jdGlvblwiPT10eXBlb2YodD1pW2VdKSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdCk7ZWxzZSBpZih2b2lkIDAhPT10KWZvcihzPXQubGVuZ3RoLTE7cz49MDtzLS0pdGhpcy5yZW1vdmVMaXN0ZW5lcihlLHRbc10pO3JldHVybiB0aGlzfSxvLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIGYodGhpcyxlLCEwKX0sby5wcm90b3R5cGUucmF3TGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybiBmKHRoaXMsZSwhMSl9LG8ubGlzdGVuZXJDb3VudD1mdW5jdGlvbihlLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUubGlzdGVuZXJDb3VudD9lLmxpc3RlbmVyQ291bnQodCk6cC5jYWxsKGUsdCl9LG8ucHJvdG90eXBlLmxpc3RlbmVyQ291bnQ9cCxvLnByb3RvdHlwZS5ldmVudE5hbWVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50PjA/cyh0aGlzLl9ldmVudHMpOltdfX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3QuQ09OVEVYVF9DT01PTUFORFM9e09OOlwib25cIixPTkNFOlwib25jZVwiLE9GRjpcIm9mZlwiLEVNSVQ6XCJlbWl0XCIsREVTVFJPWTpcImRlc3Ryb3lcIn19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBzPWZ1bmN0aW9uKCl7Y29uc3QgZT1uZXcgQXJyYXlCdWZmZXIoMik7cmV0dXJuIG5ldyBEYXRhVmlldyhlKS5zZXRJbnQxNigwLDI1NiwhMCksMjU2PT09bmV3IEludDE2QXJyYXkoZSlbMF19KCkscj17Z2V0IGRldmljZSgpe2xldCBlPXIub3M7cmV0dXJuIGUuaXNQYz9cInBjXCI6ZS5pc1RhYmxldD9cInRhYmxldFwiOlwibW9iaWxlXCJ9LGdldCBicm93c2VyKCl7bGV0IGU9bmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLHQ9e2llOi9ydjooW1xcZC5dKylcXCkgbGlrZSBnZWNrby8sZmlyZm94Oi9maXJlZm94XFwvKFtcXGQuXSspLyxjaHJvbWU6L2Nocm9tZVxcLyhbXFxkLl0rKS8sb3BlcmE6L29wZXJhLihbXFxkLl0rKS8sc2FmYXJpOi92ZXJzaW9uXFwvKFtcXGQuXSspLipzYWZhcmkvfTtyZXR1cm5bXS5jb25jYXQoT2JqZWN0LmtleXModCkuZmlsdGVyKGk9PnRbaV0udGVzdChlKSkpWzBdfSxnZXQgb3MoKXtsZXQgZT1uYXZpZ2F0b3IudXNlckFnZW50LHQ9Lyg/OldpbmRvd3MgUGhvbmUpLy50ZXN0KGUpLGk9Lyg/OlN5bWJpYW5PUykvLnRlc3QoZSl8fHQscz0vKD86QW5kcm9pZCkvLnRlc3QoZSkscj0vKD86RmlyZWZveCkvLnRlc3QoZSksYT0vKD86aVBhZHxQbGF5Qm9vaykvLnRlc3QoZSl8fHMmJiEvKD86TW9iaWxlKS8udGVzdChlKXx8ciYmLyg/OlRhYmxldCkvLnRlc3QoZSksbj0vKD86aVBob25lKS8udGVzdChlKSYmIWE7cmV0dXJue2lzVGFibGV0OmEsaXNQaG9uZTpuLGlzQW5kcm9pZDpzLGlzUGM6IW4mJiFzJiYhaSxpc1N5bWJpYW46aSxpc1dpbmRvd3NQaG9uZTp0LGlzRmlyZUZveDpyfX0sZ2V0IGlzTGUoKXtyZXR1cm4gc319O3QuZGVmYXVsdD1yfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgcz1mdW5jdGlvbigpe2NvbnN0IGU9bmV3IEFycmF5QnVmZmVyKDIpO3JldHVybiBuZXcgRGF0YVZpZXcoZSkuc2V0SW50MTYoMCwyNTYsITApLDI1Nj09PW5ldyBJbnQxNkFycmF5KGUpWzBdfSgpO3QuZGVmYXVsdD1zfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y2xhc3Mgc3tzdGF0aWMgZGVjb2RlKGUpe2NvbnN0IHQ9W10saT1lO2xldCByPTA7Y29uc3QgYT1lLmxlbmd0aDtmb3IoO3I8YTspaWYoaVtyXTwxMjgpdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoaVtyXSkpLCsrcjtlbHNle2lmKGlbcl08MTkyKTtlbHNlIGlmKGlbcl08MjI0KXtpZihzLl9jaGVja0NvbnRpbnVhdGlvbihpLHIsMSkpe2NvbnN0IGU9KDMxJmlbcl0pPDw2fDYzJmlbcisxXTtpZihlPj0xMjgpe3QucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDY1NTM1JmUpKSxyKz0yO2NvbnRpbnVlfX19ZWxzZSBpZihpW3JdPDI0MCl7aWYocy5fY2hlY2tDb250aW51YXRpb24oaSxyLDIpKXtjb25zdCBlPSgxNSZpW3JdKTw8MTJ8KDYzJmlbcisxXSk8PDZ8NjMmaVtyKzJdO2lmKGU+PTIwNDgmJjU1Mjk2IT0oNjM0ODgmZSkpe3QucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDY1NTM1JmUpKSxyKz0zO2NvbnRpbnVlfX19ZWxzZSBpZihpW3JdPDI0OCYmcy5fY2hlY2tDb250aW51YXRpb24oaSxyLDMpKXtsZXQgZT0oNyZpW3JdKTw8MTh8KDYzJmlbcisxXSk8PDEyfCg2MyZpW3IrMl0pPDw2fDYzJmlbciszXTtpZihlPjY1NTM2JiZlPDExMTQxMTIpe2UtPTY1NTM2LHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGU+Pj4xMHw1NTI5NikpLHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDEwMjMmZXw1NjMyMCkpLHIrPTQ7Y29udGludWV9fXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDY1NTMzKSksKytyfXJldHVybiB0LmpvaW4oXCJcIil9c3RhdGljIF9jaGVja0NvbnRpbnVhdGlvbihlLHQsaSl7bGV0IHM9ZTtpZih0K2k8cy5sZW5ndGgpe2Zvcig7aS0tOylpZigxMjghPSgxOTImc1srK3RdKSlyZXR1cm4hMTtyZXR1cm4hMH1yZXR1cm4hMX19dC5kZWZhdWx0PXN9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjbGFzcyBze2NvbnN0cnVjdG9yKGUpe2xldCB0PXMuZ2V0RGVmYXVsdEluZigpO2lmKCFlfHxcIltvYmplY3QgT2JqZWN0XVwiIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKXJldHVybiB0O2xldCBpPU9iamVjdC5hc3NpZ24oe30sdCxlKTtPYmplY3QuZW50cmllcyhpKS5mb3JFYWNoKChbZSx0XSk9Pnt0aGlzW2VdPXR9KX1zdGF0aWMgZ2V0RGVmYXVsdEluZigpe3JldHVybntkdHM6bnVsbCxwdHM6bnVsbCxkdXJhdGlvbjpudWxsLHBvc2l0aW9uOm51bGwsaXNSQVA6ITEsb3JpZ2luRHRzOm51bGx9fX10LmRlZmF1bHQ9c30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3QuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMuc3RhcnREdHM9LTEsdGhpcy5lbmREdHM9LTEsdGhpcy5zdGFydFB0cz0tMSx0aGlzLmVuZFB0cz0tMSx0aGlzLm9yaWdpblN0YXJ0RHRzPS0xLHRoaXMub3JpZ2luRW5kRHRzPS0xLHRoaXMucmFuZG9tQWNjZXNzUG9pbnRzPVtdLHRoaXMuZmlyc3RTYW1wbGU9bnVsbCx0aGlzLmxhc3RTYW1wbGU9bnVsbH1hZGRSQVAoZSl7ZS5pc1JBUD0hMCx0aGlzLnJhbmRvbUFjY2Vzc1BvaW50cy5wdXNoKGUpfX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt0LmRlZmF1bHQ9Y2xhc3N7Y29uc3RydWN0b3IoZSl7dGhpcy5fdHlwZT1lLHRoaXMuX2xpc3Q9W10sdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uPS0xfWdldCB0eXBlKCl7cmV0dXJuIHRoaXMuX3R5cGV9Z2V0IGxlbmd0aCgpe3JldHVybiB0aGlzLl9saXN0Lmxlbmd0aH1pc0VtcHR5KCl7cmV0dXJuIDA9PT10aGlzLl9saXN0Lmxlbmd0aH1jbGVhcigpe3RoaXMuX2xpc3Q9W10sdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uPS0xfV9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShlKXtsZXQgdD10aGlzLl9saXN0O2lmKDA9PT10Lmxlbmd0aClyZXR1cm4tMjtsZXQgaT10Lmxlbmd0aC0xLHM9MCxyPTAsYT1pLG49MDtpZihlPHRbMF0ub3JpZ2luRHRzKXJldHVybiBuPS0xO2Zvcig7cjw9YTspe2lmKChzPXIrTWF0aC5mbG9vcigoYS1yKS8yKSk9PT1pfHxlPnRbc10ubGFzdFNhbXBsZS5vcmlnaW5EdHMmJmU8dFtzKzFdLm9yaWdpbkR0cyl7bj1zO2JyZWFrfXRbc10ub3JpZ2luRHRzPGU/cj1zKzE6YT1zLTF9cmV0dXJuIG59X3NlYXJjaE5lYXJlc3RTZWdtZW50QWZ0ZXIoZSl7cmV0dXJuIHRoaXMuX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKGUpKzF9YXBwZW5kKGUpe2xldCB0PXRoaXMuX2xpc3QsaT10aGlzLl9sYXN0QXBwZW5kTG9jYXRpb24scz0wOy0xIT09aSYmaTx0Lmxlbmd0aCYmZS5vcmlnaW5TdGFydER0cz49dFtpXS5sYXN0U2FtcGxlLm9yaWdpbkR0cyYmKGk9PT10Lmxlbmd0aC0xfHxpPHQubGVuZ3RoLTEmJmUub3JpZ2luU3RhcnREdHM8dFtpKzFdLm9yaWdpblN0YXJ0RHRzKT9zPWkrMTp0Lmxlbmd0aD4wJiYocz10aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShlLm9yaWdpblN0YXJ0RHRzKSsxKSx0aGlzLl9sYXN0QXBwZW5kTG9jYXRpb249cyx0aGlzLl9saXN0LnNwbGljZShzLDAsZSl9Z2V0TGFzdFNlZ21lbnRCZWZvcmUoZSl7bGV0IHQ9dGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoZSk7cmV0dXJuIHQ+PTA/dGhpcy5fbGlzdFt0XTpudWxsfWdldExhc3RTYW1wbGVCZWZvcmUoZSl7bGV0IHQ9dGhpcy5nZXRMYXN0U2VnbWVudEJlZm9yZShlKTtyZXR1cm4gbnVsbCE9PXQ/dC5sYXN0U2FtcGxlOm51bGx9Z2V0TGFzdFJBUEJlZm9yZShlKXtsZXQgdD10aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShlKSxpPXRoaXMuX2xpc3RbdF0ucmFuZG9tQWNjZXNzUG9pbnRzO2Zvcig7MD09PWkubGVuZ3RoJiZ0PjA7KXQtLSxpPXRoaXMuX2xpc3RbdF0ucmFuZG9tQWNjZXNzUG9pbnRzO3JldHVybiBpLmxlbmd0aD4wP2lbaS5sZW5ndGgtMV06bnVsbH19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y2xhc3Mgc3tjb25zdHJ1Y3RvcihlKXt0aGlzLmNvbmZpZ3M9T2JqZWN0LmFzc2lnbih7fSxlKSx0aGlzLmNvbnRhaW5lcj10aGlzLmNvbmZpZ3MuY29udGFpbmVyLHRoaXMubWVkaWFTb3VyY2U9bnVsbCx0aGlzLnNvdXJjZUJ1ZmZlcnM9e30sdGhpcy5wcmVsb2FkVGltZT10aGlzLmNvbmZpZ3MucHJlbG9hZFRpbWV8fDEsdGhpcy5vblNvdXJjZU9wZW49dGhpcy5vblNvdXJjZU9wZW4uYmluZCh0aGlzKSx0aGlzLm9uVGltZVVwZGF0ZT10aGlzLm9uVGltZVVwZGF0ZS5iaW5kKHRoaXMpLHRoaXMub25VcGRhdGVFbmQ9dGhpcy5vblVwZGF0ZUVuZC5iaW5kKHRoaXMpLHRoaXMub25XYWl0aW5nPXRoaXMub25XYWl0aW5nLmJpbmQodGhpcyl9aW5pdCgpe3RoaXMubWVkaWFTb3VyY2U9bmV3IHNlbGYuTWVkaWFTb3VyY2UsdGhpcy5tZWRpYVNvdXJjZS5hZGRFdmVudExpc3RlbmVyKFwic291cmNlb3BlblwiLHRoaXMub25Tb3VyY2VPcGVuKSx0aGlzLmNvbnRhaW5lci5zcmM9VVJMLmNyZWF0ZU9iamVjdFVSTCh0aGlzLm1lZGlhU291cmNlKSx0aGlzLnVybD10aGlzLmNvbnRhaW5lci5zcmMsdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInRpbWV1cGRhdGVcIix0aGlzLm9uVGltZVVwZGF0ZSksdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcIndhaXRpbmdcIix0aGlzLm9uV2FpdGluZyl9b25UaW1lVXBkYXRlKCl7dGhpcy5lbWl0KFwiVElNRV9VUERBVEVcIix0aGlzLmNvbnRhaW5lcil9b25XYWl0aW5nKCl7dGhpcy5lbWl0KFwiV0FJVElOR1wiLHRoaXMuY29udGFpbmVyKX1vblNvdXJjZU9wZW4oKXt0aGlzLmFkZFNvdXJjZUJ1ZmZlcnMoKX1vblVwZGF0ZUVuZCgpe3RoaXMuZW1pdChcIlNPVVJDRV9VUERBVEVfRU5EXCIpLHRoaXMuZG9BcHBlbmQoKX1hZGRTb3VyY2VCdWZmZXJzKCl7aWYoXCJvcGVuXCIhPT10aGlzLm1lZGlhU291cmNlLnJlYWR5U3RhdGUpcmV0dXJuO2xldCBlLHQ9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlBSRV9TT1VSQ0VfQlVGRkVSXCIpLGk9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlRSQUNLU1wiKTt0PXQuc291cmNlcztsZXQgcz0hMTtmb3IobGV0IHI9MCxhPU9iamVjdC5rZXlzKHQpLmxlbmd0aDtyPGE7cisrKXtsZXQgYT1PYmplY3Qua2V5cyh0KVtyXTtpZihcImF1ZGlvXCI9PT1hP2U9aS5hdWRpb1RyYWNrOlwidmlkZW9cIj09PWEmJihlPWkudmlkZW9UcmFjayksZSl7bGV0IGk9XCJhdWRpb1wiPT09YT8yMTo0MDtlLm1ldGEmJmUubWV0YS5yZWZTYW1wbGVEdXJhdGlvbiYmKGk9ZS5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSx0W2FdLmRhdGEubGVuZ3RoPj10aGlzLnByZWxvYWRUaW1lL2kmJihzPSEwKX19aWYocyl7aWYoT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg+MClyZXR1cm47Zm9yKGxldCBlPTAsaT1PYmplY3Qua2V5cyh0KS5sZW5ndGg7ZTxpO2UrKyl7bGV0IGk9T2JqZWN0LmtleXModClbZV0scz10W2ldLHI9XCJ2aWRlb1wiPT09aT9cInZpZGVvL21wNDtjb2RlY3M9XCIrcy5taW1ldHlwZTpcImF1ZGlvL21wNDtjb2RlY3M9XCIrcy5taW1ldHlwZSxhPXRoaXMubWVkaWFTb3VyY2UuYWRkU291cmNlQnVmZmVyKHIpO3RoaXMuc291cmNlQnVmZmVyc1tpXT1hLGEuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZWVuZFwiLHRoaXMub25VcGRhdGVFbmQpLHRoaXMuZG9BcHBlbmQoKX19fWRvQXBwZW5kKCl7bGV0IGU9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlBSRV9TT1VSQ0VfQlVGRkVSXCIpO2lmKGUpZm9yKGxldCB0PTA7dDxPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpLmxlbmd0aDt0Kyspe2xldCBpPU9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbdF0scz10aGlzLnNvdXJjZUJ1ZmZlcnNbaV07aWYoIXMudXBkYXRpbmcpe2xldCB0PWUuc291cmNlc1tpXTtpZih0JiYhdC5pbml0ZWQpcy5hcHBlbmRCdWZmZXIodC5pbml0LmJ1ZmZlci5idWZmZXIpLHQuaW5pdGVkPSEwO2Vsc2UgaWYodCl7bGV0IGU9dC5kYXRhLnNoaWZ0KCk7ZSYmcy5hcHBlbmRCdWZmZXIoZS5idWZmZXIuYnVmZmVyKX19fX1lbmRPZlN0cmVhbSgpe2NvbnN0e3JlYWR5U3RhdGU6ZSxhY3RpdmVTb3VyY2VCdWZmZXJzOnR9PXRoaXMubWVkaWFTb3VyY2U7aWYoXCJvcGVuXCI9PT1lJiYwPT09dC5sZW5ndGgpdHJ5e3RoaXMubWVkaWFTb3VyY2UuZW5kT2ZTdHJlYW0oKX1jYXRjaChlKXt9fXJlbW92ZShlLHQ9MCl7Zm9yKGxldCBpPTA7aTxPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpLmxlbmd0aDtpKyspe2xldCBzPXRoaXMuc291cmNlQnVmZmVyc1tPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpW2ldXTtzLnVwZGF0aW5nfHxzLnJlbW92ZSh0LGUpfX1yZW1vdmVCdWZmZXJzKCl7Y29uc3QgZT1bXTtmb3IobGV0IHQ9MDt0PE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoO3QrKyl7bGV0IGkscj10aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVt0XV07ci5yZW1vdmVFdmVudExpc3RlbmVyKFwidXBkYXRlZW5kXCIsdGhpcy5vblVwZGF0ZUVuZCksci51cGRhdGluZz9pPW5ldyBQcm9taXNlKGU9Pntjb25zdCB0PWZ1bmN0aW9uKCl7bGV0IGk9Mztjb25zdCBhPSgpPT57ci51cGRhdGluZz9pPjA/KHNldFRpbWVvdXQoYSwyMDApLGktLSk6ZSgpOihzLmNsZWFyQnVmZmVyKHIpLGUoKSl9O3NldFRpbWVvdXQoYSwyMDApLHIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInVwZGF0ZWVuZFwiLHQpfTtyLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVlbmRcIix0KX0pOihzLmNsZWFyQnVmZmVyKHIpLGk9UHJvbWlzZS5yZXNvbHZlKCkpLGUucHVzaChpKX1yZXR1cm4gUHJvbWlzZS5hbGwoZSl9ZGVzdHJveSgpe3JldHVybiB0aGlzLnJlbW92ZUJ1ZmZlcnMoKS50aGVuKCgpPT57Zm9yKGxldCBlPTA7ZTxPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpLmxlbmd0aDtlKyspe2xldCB0PXRoaXMuc291cmNlQnVmZmVyc1tPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpW2VdXTt0aGlzLm1lZGlhU291cmNlLnJlbW92ZVNvdXJjZUJ1ZmZlcih0KSxkZWxldGUgdGhpcy5zb3VyY2VCdWZmZXJzW09iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbZV1dfXRoaXMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0aW1ldXBkYXRlXCIsdGhpcy5vblRpbWVVcGRhdGUpLHRoaXMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3YWl0aW5nXCIsdGhpcy5vbldhaXRpbmcpLHRoaXMubWVkaWFTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNvdXJjZW9wZW5cIix0aGlzLm9uU291cmNlT3BlbiksdGhpcy5lbmRPZlN0cmVhbSgpLHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMudXJsKSx0aGlzLnVybD1udWxsLHRoaXMuY29uZmlncz17fSx0aGlzLmNvbnRhaW5lcj1udWxsLHRoaXMubWVkaWFTb3VyY2U9bnVsbCx0aGlzLnNvdXJjZUJ1ZmZlcnM9e30sdGhpcy5wcmVsb2FkVGltZT0xfSl9c3RhdGljIGNsZWFyQnVmZmVyKGUpe2NvbnN0IHQ9ZS5idWZmZXJlZDtsZXQgaT0uMTtmb3IobGV0IGU9MCxzPXQubGVuZ3RoO2U8cztlKyspaT10LmVuZChlKTt0cnl7ZS5yZW1vdmUoMCxpKX1jYXRjaChlKXt9fX10LmRlZmF1bHQ9c30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NsYXNzIHN7Y29uc3RydWN0b3IoZSl7aWYoIShlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKXRocm93IG5ldyBFcnJvcihcImRhdGEgaXMgaW52YWxpZFwiKTt0aGlzLmJ1ZmZlcj1lLHRoaXMuZGF0YXZpZXc9bmV3IERhdGFWaWV3KGUpLHRoaXMuZGF0YXZpZXcucG9zaXRpb249MH1nZXQgbGVuZ3RoKCl7cmV0dXJuIHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGh9c2V0IHBvc2l0aW9uKGUpe3RoaXMuZGF0YXZpZXcucG9zaXRpb249ZX1nZXQgcG9zaXRpb24oKXtyZXR1cm4gdGhpcy5kYXRhdmlldy5wb3NpdGlvbn1iYWNrKGUpe3RoaXMucG9zaXRpb24tPWV9c2tpcChlKXtsZXQgdD1NYXRoLmZsb29yKGUvNCksaT1lJTQ7Zm9yKGxldCBlPTA7ZTx0O2UrKylzLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsNCk7aT4wJiZzLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsaSl9c3RhdGljIHJlYWRCeXRlKGUsdCxpKXtsZXQgcztzd2l0Y2godCl7Y2FzZSAxOnM9aT9lLmdldEludDgoZS5wb3NpdGlvbik6ZS5nZXRVaW50OChlLnBvc2l0aW9uKTticmVhaztjYXNlIDI6cz1pP2UuZ2V0SW50MTYoZS5wb3NpdGlvbik6ZS5nZXRVaW50MTYoZS5wb3NpdGlvbik7YnJlYWs7Y2FzZSAzOmlmKGkpdGhyb3cgbmV3IEVycm9yKFwibm90IHN1cHBvcnRlZCBmb3IgcmVhZEJ5dGUgM1wiKTtzPWUuZ2V0VWludDgoZS5wb3NpdGlvbik8PDE2LHN8PWUuZ2V0VWludDgoZS5wb3NpdGlvbisxKTw8OCxzfD1lLmdldFVpbnQ4KGUucG9zaXRpb24rMik7YnJlYWs7Y2FzZSA0OnM9aT9lLmdldEludDMyKGUucG9zaXRpb24pOmUuZ2V0VWludDMyKGUucG9zaXRpb24pO2JyZWFrO2Nhc2UgODppZihpKXRocm93IG5ldyBFcnJvcihcIm5vdCBzdXBwb3J0ZWQgZm9yIHJlYWRCb2R5IDhcIik7cz1lLmdldFVpbnQzMihlLnBvc2l0aW9uKTw8MzIsc3w9ZS5nZXRVaW50MzIoZS5wb3NpdGlvbis0KTticmVhaztkZWZhdWx0OnM9XCJcIn1yZXR1cm4gZS5wb3NpdGlvbis9dCxzfXJlYWRVaW50OCgpe3JldHVybiBzLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsMSl9cmVhZFVpbnQxNigpe3JldHVybiBzLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsMil9cmVhZFVpbnQyNCgpe3JldHVybiBzLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsMyl9cmVhZFVpbnQzMigpe3JldHVybiBzLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsNCl9cmVhZFVpbnQ2NCgpe3JldHVybiBzLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsOCl9cmVhZEludDgoKXtyZXR1cm4gcy5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LDEsITApfXJlYWRJbnQxNigpe3JldHVybiBzLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsMiwhMCl9cmVhZEludDMyKCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldyw0LCEwKX13cml0ZVVpbnQzMihlKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW2U+Pj4yNCYyNTUsZT4+PjE2JjI1NSxlPj4+OCYyNTUsMjU1JmVdKX19dC5kZWZhdWx0PXN9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcyxyPWkoMjUpLGE9KHM9cikmJnMuX19lc01vZHVsZT9zOntkZWZhdWx0OnN9O3QuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3RvcihlKXt0aGlzLmJ1ZmZlcj1lfHxuZXcgVWludDhBcnJheSgwKX13cml0ZSguLi5lKXtlLmZvckVhY2goZT0+e3RoaXMuYnVmZmVyPSgwLGEuZGVmYXVsdCkoVWludDhBcnJheSx0aGlzLmJ1ZmZlcixlKX0pfXN0YXRpYyB3cml0ZVVpbnQzMihlKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW2U+PjI0LGU+PjE2JjI1NSxlPj44JjI1NSwyNTUmZV0pfXN0YXRpYyByZWFkQXNJbnQoZSl7bGV0IHQ9XCJcIjtyZXR1cm4gZS5mb3JFYWNoKGU9Pnt0Kz1mdW5jdGlvbihlKXtyZXR1cm4gZS50b1N0cmluZygxNikucGFkU3RhcnQoMixcIjBcIil9KGUpfSkscGFyc2VJbnQodCwxNil9fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO3ZhciBzLHI9aSgyNiksYT0ocz1yKSYmcy5fX2VzTW9kdWxlP3M6e2RlZmF1bHQ6c307ZS5leHBvcnRzPWEuZGVmYXVsdH0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxpPWFyZ3VtZW50cy5sZW5ndGgscz1BcnJheShpPjE/aS0xOjApLHI9MTtyPGk7cisrKXNbci0xXT1hcmd1bWVudHNbcl07dmFyIGE9ITAsbj0hMSxvPXZvaWQgMDt0cnl7Zm9yKHZhciBkLGw9c1tTeW1ib2wuaXRlcmF0b3JdKCk7IShhPShkPWwubmV4dCgpKS5kb25lKTthPSEwKXt2YXIgaD1kLnZhbHVlO3QrPWgubGVuZ3RofX1jYXRjaChlKXtuPSEwLG89ZX1maW5hbGx5e3RyeXshYSYmbC5yZXR1cm4mJmwucmV0dXJuKCl9ZmluYWxseXtpZihuKXRocm93IG99fXZhciB1PW5ldyBlKHQpLGM9MCxmPSEwLHA9ITEsbT12b2lkIDA7dHJ5e2Zvcih2YXIgZyxfPXNbU3ltYm9sLml0ZXJhdG9yXSgpOyEoZj0oZz1fLm5leHQoKSkuZG9uZSk7Zj0hMCl7dmFyIHk9Zy52YWx1ZTt1LnNldCh5LGMpLGMrPXkubGVuZ3RofX1jYXRjaChlKXtwPSEwLG09ZX1maW5hbGx5e3RyeXshZiYmXy5yZXR1cm4mJl8ucmV0dXJuKCl9ZmluYWxseXtpZihwKXRocm93IG19fXJldHVybiB1fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzLHI9aSg0KTtjb25zdCBhPSgocz1yKSYmcy5fX2VzTW9kdWxlP3M6e2RlZmF1bHQ6c30pLmRlZmF1bHQuQ1JZVE9fRVZFTlRTO3QuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3RvcihlKXt0aGlzLmlucHV0QnVmZmVyPWUuaW5wdXRidWZmZXIsdGhpcy5vdXRwdXRCdWZmZXI9ZS5vdXRwdXRidWZmZXIsdGhpcy5rZXk9ZS5rZXksdGhpcy5pdj1lLml2LHRoaXMubWV0aG9kPWUubWV0aG9kLHRoaXMuY3J5cHRvPXdpbmRvdy5jcnlwdG98fHdpbmRvdy5tc0NyeXB0b31pbml0KCl7dGhpcy5vbihhLlNUQVJUX0RFQ1JZUFQsdGhpcy5kZWNyaXB0LmJpbmQodGhpcykpfWRlY3JpcHQoKXtpZih0aGlzLmFlc2tleSl0aGlzLmRlY3JpcHREYXRhKCk7ZWxzZXt0aGlzLmNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFwicmF3XCIsdGhpcy5rZXkuYnVmZmVyLHtuYW1lOlwiQUVTLUNCQ1wifSwhMSxbXCJlbmNyeXB0XCIsXCJkZWNyeXB0XCJdKS50aGVuKGU9Pnt0aGlzLmFlc2tleT1lLHRoaXMuZGVjcmlwdERhdGEoKX0pfX1kZWNyaXB0RGF0YSgpe2xldCBlPXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5pbnB1dEJ1ZmZlciksdD10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMub3V0cHV0QnVmZmVyKSxpPWUuc2hpZnQoKTtpJiZ0aGlzLmNyeXB0by5zdWJ0bGUuZGVjcnlwdCh7bmFtZTpcIkFFUy1DQkNcIixpdjp0aGlzLml2LmJ1ZmZlcn0sdGhpcy5hZXNrZXksaSkudGhlbihlPT57dC5wdXNoKG5ldyBVaW50OEFycmF5KGUpKSx0aGlzLmVtaXQoYS5ERUNSWVBURUQpLHRoaXMuZGVjcmlwdERhdGEoaSl9KX19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9aChpKDI5KSkscj1oKGkoMzYpKSxhPWkoMzkpLG49aSg5KSxvPWkoMCksZD1pKDcpLGw9aChpKDIpKTtmdW5jdGlvbiBoKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1jb25zdCB1PW8uRVZFTlRTLlJFTVVYX0VWRU5UUyxjPW8uRVZFTlRTLkRFTVVYX0VWRU5UUyxmPW8uRVZFTlRTLkxPQURFUl9FVkVOVFMscD1cIkZMVkNvbnRyb2xsZXJcIjtjbGFzcyBte3dhcm4oKXt9fWNvbnN0IGc9XCJGTFZfRVJST1JcIjtjbGFzcyBfe2NvbnN0cnVjdG9yKGUpe3RoaXMuVEFHPXAsdGhpcy5fcGxheWVyPWUsdGhpcy5zdGF0ZT17aW5pdFNlZ21lbnRBcnJpdmVkOiExLHJhbmdlOntzdGFydDowLGVuZDpcIlwifSxyYW5nZVN1cHBvcnQ6ITB9fXN0YXRpYyBmaW5kRmlsZVBvc2l0aW9uKGUsdCl7Zm9yKGxldCBpPTAscz10LnRpbWVzLmxlbmd0aDtpPHM7aSsrKXtjb25zdCByPXQudGltZXNbaV0sYT1pKzE8cz90LnRpbWVzW2krMV06TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7aWYocjw9ZSYmZTw9YSlyZXR1cm4gdC5maWxlcG9zaXRpb25zW2ldfXJldHVyblwiXCJ9aW5pdCgpe3RoaXMuX2NvbnRleHQucmVnaXN0cnkoXCJGRVRDSF9MT0FERVJcIixhLkZldGNoTG9hZGVyKSx0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KFwiTE9BREVSX0JVRkZFUlwiLG4uWGdCdWZmZXIpLHRoaXMuX2NvbnRleHQucmVnaXN0cnkoXCJGTFZfREVNVVhFUlwiLHMuZGVmYXVsdCksdGhpcy5fY29udGV4dC5yZWdpc3RyeShcIlRSQUNLU1wiLG4uVHJhY2tzKSx0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KFwiTVA0X1JFTVVYRVJcIixyLmRlZmF1bHQuTXA0UmVtdXhlciksdGhpcy5fY29udGV4dC5yZWdpc3RyeShcIlBSRV9TT1VSQ0VfQlVGRkVSXCIsbi5QcmVTb3VyY2UpLHRoaXMuX2NvbnRleHQucmVnaXN0cnkoXCJDT01QQVRJQklMSVRZXCIsZC5Db21wYXRpYmlsaXR5KSx0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KFwiTE9HR0VSXCIsbSksdGhpcy5tc2U9dGhpcy5fY29udGV4dC5yZWdpc3RyeShcIk1TRVwiLG8uTXNlKSh7Y29udGFpbmVyOnRoaXMuX3BsYXllci52aWRlb30pLHRoaXMuaW5pdExpc3RlbmVycygpLHNldFRpbWVvdXQoKCk9Pnt0aGlzLmxvYWRNZXRhKCl9LDApfWluaXRMaXN0ZW5lcnMoKXt0aGlzLm9uKGYuTE9BREVSX0RBVEFMT0FERUQsdGhpcy5faGFuZGxlTG9hZGVyRGF0YUxvYWRlZC5iaW5kKHRoaXMpKSx0aGlzLm9uKGYuTE9BREVSX0VSUk9SLHRoaXMuX2hhbmRsZU5ldHdvcmtFcnJvci5iaW5kKHRoaXMpKSx0aGlzLm9uKGMuTUVESUFfSU5GTyx0aGlzLl9oYW5kbGVNZWRpYUluZm8uYmluZCh0aGlzKSksdGhpcy5vbihjLk1FVEFEQVRBX1BBUlNFRCx0aGlzLl9oYW5kbGVNZXRhZGF0YVBhcnNlZC5iaW5kKHRoaXMpKSx0aGlzLm9uKGMuREVNVVhfQ09NUExFVEUsdGhpcy5faGFuZGxlRGVtdXhDb21wbGV0ZS5iaW5kKHRoaXMpKSx0aGlzLm9uKGMuREVNVVhfRVJST1IsdGhpcy5faGFuZGxlRGVtdXhFcnJvci5iaW5kKHRoaXMpKSx0aGlzLm9uKHUuSU5JVF9TRUdNRU5ULHRoaXMuX2hhbmRsZUFwcGVuZEluaXRTZWdtZW50LmJpbmQodGhpcykpLHRoaXMub24odS5NRURJQV9TRUdNRU5ULHRoaXMuX2hhbmRsZU1lZGlhU2VnbWVudC5iaW5kKHRoaXMpKX1faGFuZGxlTWVkaWFJbmZvKCl7dGhpcy5fY29udGV4dC5vbk1ldGFEYXRhfHx0aGlzLmVtaXQoYy5ERU1VWF9FUlJPUixuZXcgRXJyb3IoXCJmYWlsZWQgdG8gZ2V0IG1lZGlhaW5mb1wiKSk7Y29uc3QgZT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiTE9BREVSX0JVRkZFUlwiKSx0PXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJGRVRDSF9MT0FERVJcIik7dGhpcy5pc1NlZWthYmxlJiYodC5jYW5jZWwoKSx0aGlzLnN0YXRlLnJhbmdlPXtzdGFydDowLGVuZDplLmhpc3RvcnlMZW4tMX0sc2V0VGltZW91dCgoKT0+e3RoaXMubG9hZE5leHQoMCl9KSl9X2hhbmRsZUxvYWRlckRhdGFMb2FkZWQoKXt0aGlzLmVtaXRUbyhcIkZMVl9ERU1VWEVSXCIsYy5ERU1VWF9TVEFSVCl9X2hhbmRsZU1ldGFkYXRhUGFyc2VkKGUpe3RoaXMuZW1pdCh1LlJFTVVYX01FVEFEQVRBLGUpfV9oYW5kbGVEZW11eENvbXBsZXRlKCl7dGhpcy5lbWl0KHUuUkVNVVhfTUVESUEpfV9oYW5kbGVBcHBlbmRJbml0U2VnbWVudCgpe3RoaXMuc3RhdGUuaW5pdFNlZ21lbnRBcnJpdmVkPSEwLHRoaXMubXNlLmFkZFNvdXJjZUJ1ZmZlcnMoKX1faGFuZGxlTWVkaWFTZWdtZW50KCl7dGhpcy5tc2UuYWRkU291cmNlQnVmZmVycygpLHRoaXMubXNlLmRvQXBwZW5kKCl9X2hhbmRsZU5ldHdvcmtFcnJvcihlLHQpe3RoaXMuX3BsYXllci5lbWl0KFwiZXJyb3JcIixuZXcgbC5kZWZhdWx0LkVycm9ycyhcIm5ldHdvcmtcIix0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCkpLHRoaXMuX29uRXJyb3IoZi5MT0FERVJfRVJST1IsZSx0LCEwKX1faGFuZGxlRGVtdXhFcnJvcihlLHQsaSl7dm9pZCAwPT09aSYmKGk9ITEpLHRoaXMuX3BsYXllci5lbWl0KFwiZXJyb3JcIixuZXcgbC5kZWZhdWx0LkVycm9ycyhcInBhcnNlXCIsdGhpcy5fcGxheWVyLmNvbmZpZy51cmwpKSx0aGlzLl9vbkVycm9yKGYuTE9BREVSX0VSUk9SLGUsdCxpKX1fb25FcnJvcihlLHQsaSxzKXtsZXQgcj17ZXJyb3JUeXBlOmUsZXJyb3JEZXRhaWxzOmBbJHt0fV06ICR7aS5tZXNzYWdlfWAsZXJyb3JGYXRhbDpzfHwhMX07dGhpcy5fcGxheWVyLmVtaXQoZyxyKX1zZWVrKGUpe2lmKCF0aGlzLl9jb250ZXh0Lm9uTWV0YURhdGEpcmV0dXJuIHZvaWQgdGhpcy5sb2FkTWV0YSgpO2lmKCF0aGlzLmlzU2Vla2FibGUpcmV0dXJuO3RoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJMT0FERVJfQlVGRkVSXCIpLmNsZWFyKCk7Y29uc3R7cHJlbG9hZFRpbWU6dD0xNX09dGhpcy5fcGxheWVyLmNvbmZpZyxpPXRoaXMuZ2V0U2Vla1JhbmdlKGUsdCk7dGhpcy5zdGF0ZS5yYW5nZT1pLHRoaXMuY29tcGF0JiZ0aGlzLmNvbXBhdC5yZXNldCgpLHRoaXMubG9hZERhdGEoKX1sb2FkTmV4dChlKXt0aGlzLl9jb250ZXh0Lm9uTWV0YURhdGEmJih0aGlzLmxvYWRlci5sb2FkaW5nfHx0aGlzLmdldE5leHRSYW5nZShlKSYmdGhpcy5sb2FkRGF0YSgpKX1sb2FkRGF0YSgpe2NvbnN0e3N0YXJ0OmUsZW5kOnR9PXRoaXMuc3RhdGUucmFuZ2U7dGhpcy5lbWl0KGYuTEFERVJfU1RBUlQsdGhpcy5fcGxheWVyLmNvbmZpZy51cmwse2hlYWRlcnM6e21ldGhvZDpcImdldFwiLFJhbmdlOmBieXRlcz0ke2V9LSR7dH1gfX0pfWxvYWRNZXRhKCl7dGhpcy5sb2FkZXIubG9hZCh0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCx7aGVhZGVyczp7UmFuZ2U6XCJieXRlcz0wLVwifX0pLmNhdGNoKCgpPT57dGhpcy5zdGF0ZS5yYW5nZVN1cHBvcnQ9ITEsdGhpcy5sb2FkRmFsbGJhY2soKX0pfWxvYWRGYWxsYmFjaygpe3RoaXMubG9hZGVyLmxvYWQodGhpcy5fcGxheWVyLmNvbmZpZy51cmwpLmNhdGNoKCgpPT57dGhpcy5fcGxheWVyLmVtaXQoXCJlcnJvclwiLG5ldyBsLmRlZmF1bHQuRXJyb3JzKFwibmV0d29ya1wiLHRoaXMuX3BsYXllci5jb25maWcudXJsKSl9KX1nZXRTZWVrUmFuZ2UoZSx0KXtjb25zdHtrZXlmcmFtZXM6aX09dGhpcy5fY29udGV4dC5vbk1ldGFEYXRhLHM9dGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24scj1lLGE9ZSt0LG49Xy5maW5kRmlsZVBvc2l0aW9uKHIsaSk7cmV0dXJuIGE+PXN8fHI+PXM/e3N0YXJ0Om4sZW5kOlwiXCJ9OntzdGFydDpuLGVuZDpfLmZpbmRGaWxlUG9zaXRpb24oYSxpKX19Z2V0TmV4dFJhbmdlKGUpe2lmKFwiXCI9PT10aGlzLnN0YXRlLnJhbmdlLmVuZClyZXR1cm47Y29uc3R7ZW5kOnR9PXRoaXMuZ2V0U2Vla1JhbmdlKGUsdGhpcy5jb25maWcucHJlbG9hZFRpbWV8fDE1KTtyZXR1cm4gdDw9dGhpcy5zdGF0ZS5yYW5nZS5lbmQmJlwiXCIhPT10P3ZvaWQgMDoodGhpcy5zdGF0ZS5yYW5nZT17c3RhcnQ6dGhpcy5zdGF0ZS5yYW5nZS5lbmQrMSxlbmQ6dH0sITApfWRlc3Ryb3koKXt0aGlzLl9wbGF5ZXI9bnVsbCx0aGlzLm1zZT1udWxsLHRoaXMuc3RhdGU9e2luaXRTZWdtZW50QXJyaXZlZDohMSxyYW5nZTp7c3RhcnQ6MCxlbmQ6XCJcIn0scmFuZ2VTdXBwb3J0OiEwfX1nZXQgaXNTZWVrYWJsZSgpe3JldHVybiEhdGhpcy5zdGF0ZS5yYW5nZVN1cHBvcnQmJighdGhpcy5fY29udGV4dHx8IXRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmlzQ29tcGxldGUoKXx8bnVsbCE9PXRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmtleWZyYW1lcyYmdm9pZCAwIT09dGhpcy5fY29udGV4dC5tZWRpYUluZm8ua2V5ZnJhbWVzKX1nZXQgY29uZmlnKCl7cmV0dXJuIHRoaXMuX3BsYXllci5jb25maWd9Z2V0IGxvYWRlcigpe3JldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiRkVUQ0hfTE9BREVSXCIpfWdldCBjb21wYXQoKXtyZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIkNPTVBBVElCSUxJVFlcIil9fXQuZGVmYXVsdD1ffSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHMscj1pKDApLGE9aSg3KSxuPWkoOSksbz1pKDM1KSxkPShzPW8pJiZzLl9fZXNNb2R1bGU/czp7ZGVmYXVsdDpzfTtjb25zdCBsPXIuRVZFTlRTLkRFTVVYX0VWRU5UUztjbGFzcyBoe2NvbnN0cnVjdG9yKCl7dGhpcy5fZmlyc3RGcmFnbWVudExvYWRlZD0hMSx0aGlzLl90cmFja051bT0wLHRoaXMuX2hhc1NjcmlwdD0hMX1pbml0KCl7dGhpcy5vbihsLkRFTVVYX1NUQVJULHRoaXMuZG9QYXJzZUZsdi5iaW5kKHRoaXMpKX1zdGF0aWMgaXNGbHZGaWxlKGUpe3JldHVybiEoNzAhPT1lWzBdfHw3NiE9PWVbMV18fDg2IT09ZVsyXXx8MSE9PWVbM10pfXN0YXRpYyBnZXRQbGF5VHlwZShlKXtjb25zdCB0PXtoYXNWaWRlbzohMSxoYXNBdWRpbzohMX07cmV0dXJuITAmZSYmKHQuaGFzVmlkZW89ITApLCEwJmUmJih0Lmhhc0F1ZGlvPSEwKSx0fWRvUGFyc2VGbHYoKXtpZih0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkKXtpZih0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGg8MTEpcmV0dXJuO2xldCBlLHQ9MWU1O2Rve2U9dGhpcy5fcGFyc2VGbHZUYWcoKX13aGlsZShlJiZ0LS0gPjApO3RoaXMuZW1pdChsLkRFTVVYX0NPTVBMRVRFKX1lbHNle2lmKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aDwxMylyZXR1cm47Y29uc3QgZT10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxMyk7dGhpcy5wYXJzZUZsdkhlYWRlcihlKSx0aGlzLmRvUGFyc2VGbHYoKX19cGFyc2VGbHZIZWFkZXIoZSl7aWYoaC5pc0ZsdkZpbGUoZSkpe3RoaXMuX2ZpcnN0RnJhZ21lbnRMb2FkZWQ9ITA7Y29uc3QgdD1oLmdldFBsYXlUeXBlKGVbNF0pO3QuaGFzVmlkZW8mJnRoaXMuaW5pdFZpZGVvVHJhY2soKSx0Lmhhc0F1ZGlvJiZ0aGlzLmluaXRBdWRpb1RyYWNrKCl9ZWxzZSB0aGlzLmVtaXQobC5ERU1VWF9FUlJPUixuZXcgRXJyb3IoXCJpbnZhbGlkIGZsdiBmaWxlXCIpKSx0aGlzLmRvUGFyc2VGbHYoKTt0aGlzLmRvUGFyc2VGbHYoKX1pbml0VmlkZW9UcmFjaygpe3RoaXMuX3RyYWNrTnVtKys7bGV0IGU9bmV3IG4uVmlkZW9UcmFjaztlLm1ldGE9bmV3IHIuVmlkZW9UcmFja01ldGEsZS5pZD1lLm1ldGEuaWQ9dGhpcy5fdHJhY2tOdW0sdGhpcy50cmFja3MudmlkZW9UcmFjaz1lfWluaXRBdWRpb1RyYWNrKCl7dGhpcy5fdHJhY2tOdW0rKztsZXQgZT1uZXcgbi5BdWRpb1RyYWNrO2UubWV0YT1uZXcgci5BdWRpb1RyYWNrTWV0YSxlLmlkPWUubWV0YS5pZD10aGlzLl90cmFja051bSx0aGlzLnRyYWNrcy5hdWRpb1RyYWNrPWV9X3BhcnNlRmx2VGFnKCl7aWYodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoPDExKXJldHVybiBudWxsO2xldCBlPXRoaXMuX3BhcnNlRmx2VGFnSGVhZGVyKCk7cmV0dXJuIGUmJnRoaXMuX3Byb2Nlc3NDaHVuayhlKSxlfV9wYXJzZUZsdlRhZ0hlYWRlcigpe2xldCBlPTAsdD17fSxpPXRoaXMubG9hZGVyQnVmZmVyLnRvSW50KGUsMSk7aWYoZSs9MSx0LmZpbHRlcmVkPSgzMiZpKT4+PjUsdC50YWdUeXBlPTMxJmksdC5kYXRhc2l6ZT10aGlzLmxvYWRlckJ1ZmZlci50b0ludChlLDMpLGUrPTMsOCE9PXQudGFnVHlwZSYmOSE9PXQudGFnVHlwZSYmMTEhPT10LnRhZ1R5cGUmJjE4IT09dC50YWdUeXBlfHwwIT09dGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoOCwzKSlyZXR1cm4gdGhpcy5sb2FkZXJCdWZmZXImJnRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aD4wJiZ0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKSx0aGlzLmVtaXQobC5ERU1VWF9FUlJPUix0aGlzLlRBRyxuZXcgRXJyb3IoXCJ0YWdUeXBlIFwiK3QudGFnVHlwZSksITEpLG51bGw7aWYodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoPHQuZGF0YXNpemUrMTUpcmV0dXJuIG51bGw7dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoNCk7bGV0IHM9dGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwzKTt0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKTtsZXQgcj10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXTtyZXR1cm4gcj4wJiYocys9MTY3NzcyMTYqciksdC5kdHM9cyx0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKSx0fV9wcm9jZXNzQ2h1bmsoZSl7c3dpdGNoKGUudGFnVHlwZSl7Y2FzZSAxODp0aGlzLl9wYXJzZVNjcmlwdERhdGEoZSk7YnJlYWs7Y2FzZSA4OnRoaXMuX3BhcnNlQUFDRGF0YShlKTticmVhaztjYXNlIDk6dGhpcy5fcGFyc2VIZXZjRGF0YShlKTticmVhaztjYXNlIDExOnRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDMpO2JyZWFrO2RlZmF1bHQ6dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSl9fV9wYXJzZVNjcmlwdERhdGEoZSl7bGV0IHQ9dGhpcy50cmFja3MuYXVkaW9UcmFjayxpPXRoaXMudHJhY2tzLnZpZGVvVHJhY2sscz10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdChlLmRhdGFzaXplKTtjb25zdCByPShuZXcgZC5kZWZhdWx0KS5yZXNvbHZlKHMscy5sZW5ndGgpLGE9dGhpcy5fY29udGV4dC5vbk1ldGFEYXRhPXI/ci5vbk1ldGFEYXRhOnZvaWQgMDtpZih0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5kdXJhdGlvbj1hLmR1cmF0aW9uLHRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmhhc1ZpZGVvPWEuaGFzVmlkZW8sdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaHNhQXVkaW89YS5oYXNBdWRpbyx0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihlLmRhdGFzaXplKSYmKHRoaXMuZW1pdChsLk1FRElBX0lORk8pLHRoaXMuX2hhc1NjcmlwdD0hMCksdCYmIXQuaGFzU3BlY2lmaWNDb25maWcpe2xldCBlPXQubWV0YTtzd2l0Y2goYS5hdWRpb3NhbXBsZXJhdGUmJihlLnNhbXBsZVJhdGU9YS5hdWRpb3NhbXBsZXJhdGUpLGEuYXVkaW9jaGFubmVscyYmKGUuY2hhbm5lbENvdW50PWEuYXVkaW9jaGFubmVscyksYS5hdWRpb3NhbXBsZXJhdGUpe2Nhc2UgNDQxMDA6ZS5zYW1wbGVSYXRlSW5kZXg9NDticmVhaztjYXNlIDIyMDUwOmUuc2FtcGxlUmF0ZUluZGV4PTc7YnJlYWs7Y2FzZSAxMTAyNTplLnNhbXBsZVJhdGVJbmRleD0xMH19aWYoaSYmIWkuaGFzU3BlY2lmaWNDb25maWcpe2xldCBlPWkubWV0YTtpZihcIm51bWJlclwiPT10eXBlb2YgYS5mcmFtZXJhdGUpe2xldCB0PU1hdGguZmxvb3IoMWUzKmEuZnJhbWVyYXRlKTtpZih0PjApe2xldCBpPXQvMWUzO2UuZnJhbWVSYXRlfHwoZS5mcmFtZVJhdGU9e30pLGUuZnJhbWVSYXRlLmZpeGVkPSEwLGUuZnJhbWVSYXRlLmZwcz1pLGUuZnJhbWVSYXRlLmZwc19udW09dCxlLmZyYW1lUmF0ZS5mcHNfZGVuPTFlM319fX1fYWFjU2VxdWVuY2VIZWFkZXJQYXJzZXIoZSl7bGV0IHQ9e2hhc1NwZWNpZmljQ29uZmlnOiEwfTt0Lm9iamVjdFR5cGU9ZVsxXT4+PjMsdC5zYW1wbGVSYXRlSW5kZXg9KDcmZVsxXSk8PDF8ZVsyXT4+PjcsdC5hdWRpb3NhbXBsZXJhdGU9dGhpcy5fc3dpdGNoQXVkaW9TYW1wbGVSYXRlKHQuc2FtcGxlUmF0ZUluZGV4KSx0LmNoYW5uZWxDb3VudD0oMTIwJmVbMl0pPj4+Myx0LmZyYW1lTGVuZ3RoPSg0JmVbMl0pPj4+Mix0LmRlcGVuZHNPbkNvcmVDb2Rlcj0oMiZlWzJdKT4+PjEsdC5leHRlbnNpb25GbGFnSW5kZXg9MSZlWzJdLHQuY29kZWM9YG1wNGEuNDAuJHt0Lm9iamVjdFR5cGV9YDtsZXQgaSxzLHI9d2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSxhPXQuc2FtcGxlUmF0ZUluZGV4O3JldHVybi0xIT09ci5pbmRleE9mKFwiZmlyZWZveFwiKT90LnNhbXBsZVJhdGVJbmRleD49Nj8odC5vYmplY3RUeXBlPTUscz1uZXcgQXJyYXkoNCksaT1hLTMpOih0Lm9iamVjdFR5cGU9MixzPW5ldyBBcnJheSgyKSxpPWEpOi0xIT09ci5pbmRleE9mKFwiYW5kcm9pZFwiKT8odC5vYmplY3RUeXBlPTIscz1uZXcgQXJyYXkoMiksaT1hKToodC5vYmplY3RUeXBlPTUsaT10LnNhbXBsZVJhdGVJbmRleCxzPW5ldyBBcnJheSg0KSx0LnNhbXBsZVJhdGVJbmRleD49Nj9pPXQuc2FtcGxlUmF0ZUluZGV4LTM6MT09PXQuY2hhbm5lbENvdW50JiYodC5vYmplY3RUeXBlPTIscz1uZXcgQXJyYXkoMiksaT10LnNhbXBsZVJhdGVJbmRleCkpLHNbMF09dC5vYmplY3RUeXBlPDwzLHNbMF18PSgxNSZ0LnNhbXBsZVJhdGVJbmRleCk+Pj4xLHNbMV09KDE1JnQuc2FtcGxlUmF0ZUluZGV4KTw8NyxzWzFdfD0oMTUmdC5jaGFubmVsQ291bnQpPDwzLDU9PT10Lm9iamVjdFR5cGUmJihzWzFdfD0oMTUmaSk+Pj4xLHNbMl09KDEmaSk8PDcsc1syXXw9OCxzWzNdPTApLHQuY29uZmlnPXMsdH1fcGFyc2VBQUNEYXRhKGUpe2xldCB0PXRoaXMudHJhY2tzLmF1ZGlvVHJhY2s7aWYoIXQpcmV0dXJuO2xldCBpPXQubWV0YTtpfHwodC5tZXRhPW5ldyByLkF1ZGlvVHJhY2tNZXRhLGk9dC5tZXRhKTtsZXQgcz10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXTtlLmRhdGE9dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoZS5kYXRhc2l6ZS0xKTtsZXQgYT0oMjQwJnMpPj4+NDt0LmZvcm1hdD1hLDEwIT09YSYmdGhpcy5lbWl0KGwuREVNVVhfRVJST1IsbmV3IEVycm9yKGBpbnZhbGlkIGF1ZGlvIGZvcm1hdDogJHthfWApKSwxMCE9PWF8fHRoaXMuX2hhc0F1ZGlvU2VxdWVuY2V8fChpLnNhbXBsZVJhdGU9dGhpcy5fc3dpdGNoQXVkaW9TYW1wbGluZ0ZyZXF1ZW5jeShzKSxpLnNhbXBsZVJhdGVJbmRleD0oMTImcyk+Pj4yLGkuZnJhbWVMZW50aD0oMiZzKT4+PjEsaS5jaGFubmVsQ291bnQ9MSZzLGkucmVmU2FtcGxlRHVyYXRpb249TWF0aC5mbG9vcigxMDI0L2kuYXVkaW9TYW1wbGVSYXRlKmkudGltZXNjYWxlKSk7bGV0IG49aS5hdWRpb1NhbXBsZVJhdGUsbz1pLnNhbXBsZVJhdGVJbmRleCxkPWkucmVmU2FtcGxlRHVyYXRpb247ZGVsZXRlIGUudGFnVHlwZTtsZXQgaD10aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihlLmRhdGFzaXplKTtpZigwPT09ZS5kYXRhWzBdKXtsZXQgdD10aGlzLl9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlcihlLmRhdGEpO249dC5hdWRpb3NhbXBsZXJhdGV8fGkuYXVkaW9TYW1wbGVSYXRlLG89dC5zYW1wbGVSYXRlSW5kZXh8fGkuc2FtcGxlUmF0ZUluZGV4LGQ9TWF0aC5mbG9vcigxMDI0L24qaS50aW1lc2NhbGUpLGkuY2hhbm5lbENvdW50PXQuY2hhbm5lbENvdW50LGkuc2FtcGxlUmF0ZT1uLGkuc2FtcGxlUmF0ZUluZGV4PW8saS5yZWZTYW1wbGVEdXJhdGlvbj1kLGkuZHVyYXRpb249dGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24qaS50aW1lc2NhbGUsaS5jb25maWc9dC5jb25maWc7Y29uc3Qgcz10aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5hdWRpbztzLmNvZGVjPXQuY29kZWMscy5jaGFubmVsQ291bnQ9dC5jaGFubmVsQ291bnQscy5zYW1wbGVSYXRlPW4scy5zYW1wbGVSYXRlSW5kZXg9dC5hdWRpb1NhbXBsZVJhdGVJbmRleCx0aGlzLl9oYXNTY3JpcHQmJiF0aGlzLl9oYXNBdWRpb1NlcXVlbmNlP3RoaXMuZW1pdChsLk1FVEFEQVRBX1BBUlNFRCxcImF1ZGlvXCIpOnRoaXMuX2hhc1NjcmlwdCYmdGhpcy5faGFzQXVkaW9TZXF1ZW5jZSYmdGhpcy5lbWl0KGwuQVVESU9fTUVUQURBVEFfQ0hBTkdFKSx0aGlzLl9oYXNBdWRpb1NlcXVlbmNlPSEwLHRoaXMuX21ldGFDaGFuZ2U9ITB9ZWxzZSB0aGlzLl9tZXRhQ2hhbmdlJiYoZS5vcHRpb25zPXttZXRhOnQubWV0YX0sdGhpcy5fbWV0YUNoYW5nZT0hMSksZS5kYXRhPWUuZGF0YS5zbGljZSgxLGUuZGF0YS5sZW5ndGgpLHQuc2FtcGxlcy5wdXNoKGUpO2h8fHRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLHRoaXMuVEFHLG5ldyBFcnJvcihcIlRBRyBsZW5ndGggZXJyb3IgYXQgXCIrZS5kYXRhc2l6ZSksITEpfV9wYXJzZUhldmNEYXRhKGUpe2xldCB0PXRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdO2UuZnJhbWVUeXBlPSgyNDAmdCk+Pj40LGUuaXNLZXlmcmFtZT0xPT09ZS5mcmFtZVR5cGU7bGV0IGk9MTUmdDtpZih0aGlzLnRyYWNrcy52aWRlb1RyYWNrLmNvZGVjSUQ9aSxlLmF2Y1BhY2tldFR5cGU9dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF0sZS5jdHM9dGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwzKSx0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKSwxMj09PWkpe2NvbnN0IHQ9dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoZS5kYXRhc2l6ZS01KTtpZihlLmRhdGE9dCwwIT09TnVtYmVyLnBhcnNlSW50KGUuYXZjUGFja2V0VHlwZSkpe3RoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGUuZGF0YXNpemUpfHx0aGlzLmVtaXQobC5ERU1VWF9FUlJPUix0aGlzLlRBRyxuZXcgRXJyb3IoYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2UuZGF0YXNpemV9YCksITEpO2xldCB0PXt9LGk9MDtmb3IodC5jdHM9ZS5jdHMsdC5kdHM9ZS5kdHM7ZS5kYXRhLmxlbmd0aD5pOyl7bGV0IHM9ZS5kYXRhLnNsaWNlKE51bWJlci5wYXJzZUludChpKSw0K2kpO3Quc2l6ZT1zWzNdLHQuc2l6ZSs9MjU2KnNbMl0sdC5zaXplKz0yNTYqc1sxXSoyNTYsdC5zaXplKz0yNTYqc1swXSoyNTYqMjU2LGkrPTQsdC5kYXRhPWUuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQoaSksdC5zaXplK2kpLGkrPXQuc2l6ZSx0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaCh0KSx0aGlzLmVtaXQobC5NRVRBREFUQV9QQVJTRUQsXCJ2aWRlb1wiKX19ZWxzZSAwPT09TnVtYmVyLnBhcnNlSW50KGUuYXZjUGFja2V0VHlwZSkmJih0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihlLmRhdGFzaXplKT90aGlzLmVtaXQobC5NRVRBREFUQV9QQVJTRUQsXCJ2aWRlb1wiKTp0aGlzLmVtaXQobC5ERU1VWF9FUlJPUix0aGlzLlRBRyxuZXcgRXJyb3IoYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2UuZGF0YXNpemV9YCksITEpKX1lbHNlIGlmKDc9PT1pKXtsZXQgdD10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdChlLmRhdGFzaXplLTUpO2lmKDA9PT10WzRdJiYwPT09dFs1XSYmMD09PXRbNl0mJjE9PT10WzddKXtsZXQgZT0wO2ZvcihsZXQgaT0wO2k8NDtpKyspZT0yNTYqZSt0W2ldO2UtPTQsKHQ9dC5zbGljZSg0LHQubGVuZ3RoKSlbM109ZSUyNTYsZT0oZS10WzNdKS8yNTYsdFsyXT1lJTI1NixlPShlLXRbMl0pLzI1Nix0WzFdPWUlMjU2LHRbMF09KGUtdFsxXSkvMjU2fWlmKGUuZGF0YT10LDA9PT1lLmF2Y1BhY2tldFR5cGUpe3RoaXMuX2F2Y1NlcXVlbmNlSGVhZGVyUGFyc2VyKGUuZGF0YSksdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoZS5kYXRhc2l6ZSkmJih0aGlzLl9oYXNTY3JpcHQmJiF0aGlzLl9oYXNWaWRlb1NlcXVlbmNlP3RoaXMuZW1pdChsLk1FVEFEQVRBX1BBUlNFRCxcInZpZGVvXCIpOnRoaXMuX2hhc1NjcmlwdCYmdGhpcy5faGFzVmlkZW9TZXF1ZW5jZSYmdGhpcy5lbWl0KGwuVklERU9fTUVUQURBVEFfQ0hBTkdFKSx0aGlzLl9oYXNWaWRlb1NlcXVlbmNlPSEwKSx0aGlzLl9tZXRhQ2hhbmdlPSEwfWVsc2V7aWYoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGUuZGF0YXNpemUpKXJldHVybiB2b2lkIHRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLHRoaXMuVEFHLG5ldyBFcnJvcihgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7ZS5kYXRhc2l6ZX1gKSwhMSk7dGhpcy5fbWV0YUNoYW5nZSYmKGUub3B0aW9ucz17bWV0YTpPYmplY3QuYXNzaWduKHt9LHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YSl9LHRoaXMuX21ldGFDaGFuZ2U9ITEpLHRoaXMudHJhY2tzLnZpZGVvVHJhY2suc2FtcGxlcy5wdXNoKGUpfX1lbHNlIHRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLHRoaXMuVEFHLG5ldyBFcnJvcihgdmlkZW8gY29kZWlkIGlzICR7aX1gKSwhMSksZS5kYXRhPXRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGUuZGF0YXNpemUtMSksdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoZS5kYXRhc2l6ZSl8fHRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLHRoaXMuVEFHLG5ldyBFcnJvcihgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7ZS5kYXRhc2l6ZX1gKSwhMSksdGhpcy50cmFja3MudmlkZW9UcmFjay5zYW1wbGVzLnB1c2goZSksdGhpcy5lbWl0KGwuREVNVVhfQ09NUExFVEUpO2RlbGV0ZSBlLnRhZ1R5cGV9X2F2Y1NlcXVlbmNlSGVhZGVyUGFyc2VyKGUpe2xldCB0PXRoaXMudHJhY2tzLnZpZGVvVHJhY2s7aWYoIXQpcmV0dXJuO2xldCBpPTA7dC5tZXRhfHwodC5tZXRhPW5ldyByLlZpZGVvVHJhY2tNZXRhKTtsZXQgcz10Lm1ldGE7cy5jb25maWd1cmF0aW9uVmVyc2lvbj1lWzBdLHMuYXZjUHJvZmlsZUluZGljYXRpb249ZVsxXSxzLnByb2ZpbGVDb21wYXRpYmlsaXR5PWVbMl0scy5hdmNMZXZlbEluZGljYXRpb249ZVszXS8xMCxzLm5hbFVuaXRMZW5ndGg9MSsoMyZlWzRdKTtsZXQgbj0zMSZlWzVdO2k9NjtsZXQgbz17fTtmb3IobGV0IHQ9MDt0PG47dCsrKXtsZXQgdD0yNTUqZVtpXStlW2krMV07aSs9MjtsZXQgcj1uZXcgVWludDhBcnJheSh0KTtmb3IobGV0IHM9MDtzPHQ7cysrKXJbc109ZVtpK3NdO2xldCBuPVwiYXZjMS5cIjtmb3IobGV0IGU9MTtlPDQ7ZSsrKXtsZXQgdD1yW2VdLnRvU3RyaW5nKDE2KTt0Lmxlbmd0aDwyJiYodD1cIjBcIit0KSxuKz10fXMuY29kZWM9bixpKz10LHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YS5zcHM9cixvPWEuU3BzUGFyc2VyLnBhcnNlU1BTKHIpfWxldCBkPWVbaV07aSsrO2ZvcihsZXQgdD0wO3Q8ZDt0Kyspe2xldCB0PTI1NSplW2ldK2VbaSsxXTtpKz0yO2xldCBzPW5ldyBVaW50OEFycmF5KHQpO2ZvcihsZXQgcj0wO3I8dDtyKyspc1tyXT1lW2krcl07aSs9dCx0aGlzLnRyYWNrcy52aWRlb1RyYWNrLm1ldGEucHBzPXN9T2JqZWN0LmFzc2lnbihzLGEuU3BzUGFyc2VyLnRvVmlkZW9NZXRhKG8pKTtjb25zdCBsPXRoaXMuX2NvbnRleHQubWVkaWFJbmZvLnZpZGVvO2wuY29kZWM9cy5jb2RlYyxsLnByb2ZpbGU9cy5wcm9maWxlLGwubGV2ZWw9cy5sZXZlbCxsLmNocm9tYUZvcm1hdD1zLmNocm9tYUZvcm1hdCxsLmZyYW1lUmF0ZT1zLmZyYW1lUmF0ZSxsLnBhclJhdGlvPXMucGFyUmF0aW8sbC53aWR0aD1sLndpZHRoPT09cy5wcmVzZW50V2lkdGg/bC53aWR0aDpzLnByZXNlbnRXaWR0aCxsLmhlaWdodD1sLmhlaWdodD09PXMucHJlc2VudEhlaWdodD9sLndpZHRoOnMucHJlc2VudEhlaWdodCxzLmR1cmF0aW9uPXRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmR1cmF0aW9uKnMudGltZXNjYWxlLHMuYXZjYz1uZXcgVWludDhBcnJheShlLmxlbmd0aCkscy5hdmNjLnNldChlKSx0Lm1ldGE9c31fc3dpdGNoQXVkaW9TYW1wbGVSYXRlKGUpe3JldHVybls5NmUzLDg4MjAwLDY0ZTMsNDhlMyw0NDEwMCwzMmUzLDI0ZTMsMjIwNTAsMTZlMywxMmUzLDExMDI1LDhlMyw3MzUwXVtlXX1fc3dpdGNoQXVkaW9TYW1wbGluZ0ZyZXF1ZW5jeShlKXtyZXR1cm5bNTUwMCwxMTAyNSwyMjA1MCw0NDEwMCw0OGUzXVsoMTImZSk+Pj4yXX1fc3dpdGNoQXVkaW9DaGFubmVsKGUpe3JldHVyblsxLDJdWzEmZV19X2RhdGFzaXplVmFsaWRhdG9yKGUpe2xldCB0PXRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDAsNCk7cmV0dXJuIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpLHQ9PT1lKzExfWdldCBsb2FkZXJCdWZmZXIoKXtjb25zdCBlPXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJMT0FERVJfQlVGRkVSXCIpO2lmKGUpcmV0dXJuIGU7dGhpcy5lbWl0KGwuREVNVVhfRVJST1IsbmV3IEVycm9yKFwi5om+5LiN5YiwIGxvYWRlckJ1ZmZlciDlrp7kvotcIikpfWdldCB0cmFja3MoKXtyZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlRSQUNLU1wiKX1nZXQgbG9nZ2VyKCl7cmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJMT0dHRVJcIil9fXQuZGVmYXVsdD1ofSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHMscj1pKDgpLGE9KHM9cikmJnMuX19lc01vZHVsZT9zOntkZWZhdWx0OnN9O2NsYXNzIG57c3RhdGljIGdldE5hbHVuaXRzKGUpe2lmKGUubGVuZ3RoLWUucG9zaXRpb248NClyZXR1cm5bXTtsZXQgdD1lLmRhdGF2aWV3LGk9ZS5wb3NpdGlvbjtyZXR1cm4gMT09PXQuZ2V0SW50MzIoaSl8fDA9PT10LmdldEludDE2KGkpJiYxPT09dC5nZXRJbnQ4KGkrMik/bi5nZXRBbm5leGJOYWxzKGUpOm4uZ2V0QXZjY05hbHMoZSl9c3RhdGljIGdldEFubmV4Yk5hbHMoZSl7bGV0IHQ9W10saT1uLmdldEhlYWRlclBvc2l0aW9uQW5uZXhCKGUpLHM9aS5wb3Mscj1zO2Zvcig7czxlLmxlbmd0aC00Oyl7bGV0IGE9ZS5idWZmZXIuc2xpY2UocyxzK2kuaGVhZGVyTGVuZ3RoKTtpLnBvcz09PWUucG9zaXRpb24mJmUuc2tpcChpLmhlYWRlckxlbmd0aCkscj0oaT1uLmdldEhlYWRlclBvc2l0aW9uQW5uZXhCKGUpKS5wb3M7bGV0IG89e2hlYWRlcjphLGJvZHk6bmV3IFVpbnQ4QXJyYXkoZS5idWZmZXIuc2xpY2UocythLmJ5dGVMZW5ndGgscikpfTtuLmFuYWx5c2VOYWwobyksdC5wdXNoKG8pLGUuc2tpcChyLWUucG9zaXRpb24pLHM9cn1yZXR1cm4gdH1zdGF0aWMgZ2V0QXZjY05hbHMoZSl7bGV0IHQ9W107Zm9yKDtlLnBvc2l0aW9uPGUubGVuZ3RoLTQ7KXtsZXQgaT1lLmRhdGF2aWV3LmdldEludDMyKCk7aWYoIShlLmxlbmd0aC1lLnBvc2l0aW9uPj1pKSlicmVhazt7bGV0IHM9ZS5idWZmZXIuc2xpY2UoZS5wb3NpdGlvbixlLnBvc2l0aW9uKzQpO2Uuc2tpcCg0KTtsZXQgcj1lLmJ1ZmZlci5zbGljZShlLnBvc2l0aW9uLGUucG9zaXRpb24raSk7ZS5za2lwKGkpO2xldCBhPXtoZWFkZXI6cyxib2R5OnJ9O24uYW5hbHlzZU5hbChhKSx0LnB1c2goYSl9fXJldHVybiB0fXN0YXRpYyBhbmFseXNlTmFsKGUpe3N3aXRjaCgzMSZlLmJvZHlbMF0pe2Nhc2UgMTplLm5kcj0hMDticmVhaztjYXNlIDU6ZS5pZHI9ITA7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNzplLnNwcz1hLmRlZmF1bHQucGFyc2VTUFMoZS5ib2R5KTticmVhaztjYXNlIDg6ZS5wcHM9ITB9fXN0YXRpYyBnZXRIZWFkZXJQb3NpdGlvbkFubmV4QihlKXtsZXQgdD1lLnBvc2l0aW9uLGk9MDtmb3IoOzMhPT1pJiY0IT09aSYmdDxlLmxlbmd0aC00OykwPT09ZS5kYXRhdmlldy5nZXRJbnQxNih0KT8xPT09ZS5kYXRhdmlldy5nZXRJbnQxNih0KzIpP2k9NDoxPT09ZS5kYXRhdmlldy5nZXRJbnQ4KHQrMik/aT0zOnQrKzp0Kys7cmV0dXJuIHQ9PT1lLmxlbmd0aC00JiYoMD09PWUuZGF0YXZpZXcuZ2V0SW50MTYodCk/MT09PWUuZGF0YXZpZXcuZ2V0SW50MTYodCsyKSYmKGk9NCk6KHQrKywwPT09ZS5kYXRhdmlldy5nZXRJbnQxNih0KSYmMT09PWUuZGF0YXZpZXcuZ2V0SW50OCh0KT9pPTM6dD1lLmxlbmd0aCkpLHtwb3M6dCxoZWFkZXJMZW5ndGg6aX19c3RhdGljIGdldEF2Y2MoZSx0KXtsZXQgaT1uZXcgVWludDhBcnJheShlLmJ5dGVMZW5ndGgrdC5ieXRlTGVuZ3RoKzExKTtpWzBdPTEsaVsxXT1lWzFdLGlbMl09ZVsyXSxpWzNdPWVbM10saVs0XT0yNTUsaVs1XT0yMjU7bGV0IHM9NjtyZXR1cm4gaS5zZXQobmV3IFVpbnQ4QXJyYXkoW2UuYnl0ZUxlbmd0aD4+PjgmMjU1LDI1NSZlLmJ5dGVMZW5ndGhdKSxzKSxzKz0yLGkuc2V0KGUscyksaVtzKz1lLmJ5dGVMZW5ndGhdPTEscysrLGkuc2V0KG5ldyBVaW50OEFycmF5KFt0LmJ5dGVMZW5ndGg+Pj44JjI1NSwyNTUmdC5ieXRlTGVuZ3RoXSkscykscys9MixpLnNldCh0LHMpLGl9fXQuZGVmYXVsdD1ufSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMuVEFHPVwiR29sb21iXCIsdGhpcy5fYnVmZmVyPWUsdGhpcy5fYnVmZmVySW5kZXg9MCx0aGlzLl90b3RhbEJ5dGVzPWUuYnl0ZUxlbmd0aCx0aGlzLl90b3RhbEJpdHM9OCplLmJ5dGVMZW5ndGgsdGhpcy5fY3VycmVudFdvcmQ9MCx0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0PTB9ZGVzdHJveSgpe3RoaXMuX2J1ZmZlcj1udWxsfV9maWxsQ3VycmVudFdvcmQoKXtsZXQgZT10aGlzLl90b3RhbEJ5dGVzLXRoaXMuX2J1ZmZlckluZGV4LHQ9TWF0aC5taW4oNCxlKSxpPW5ldyBVaW50OEFycmF5KDQpO2kuc2V0KHRoaXMuX2J1ZmZlci5zdWJhcnJheSh0aGlzLl9idWZmZXJJbmRleCx0aGlzLl9idWZmZXJJbmRleCt0KSksdGhpcy5fY3VycmVudFdvcmQ9bmV3IERhdGFWaWV3KGkuYnVmZmVyKS5nZXRVaW50MzIoMCksdGhpcy5fYnVmZmVySW5kZXgrPXQsdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdD04KnR9cmVhZEJpdHMoZSl7bGV0IHQ9TWF0aC5taW4odGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCxlKSxpPXRoaXMuX2N1cnJlbnRXb3JkPj4+MzItdDtpZihlPjMyKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZWFkIG1vcmUgdGhhbiAzMiBiaXRzIGF0IGEgdGltZVwiKTtyZXR1cm4gdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdC09dCx0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0PjA/dGhpcy5fY3VycmVudFdvcmQ8PD10OnRoaXMuX3RvdGFsQnl0ZXMtdGhpcy5fYnVmZmVySW5kZXg+MCYmdGhpcy5fZmlsbEN1cnJlbnRXb3JkKCksKHQ9ZS10KT4wJiZ0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0P2k8PHR8dGhpcy5yZWFkQml0cyh0KTppfXJlYWRCb29sKCl7cmV0dXJuIDE9PT10aGlzLnJlYWRCaXRzKDEpfXJlYWRCeXRlKCl7cmV0dXJuIHRoaXMucmVhZEJpdHMoOCl9X3NraXBMZWFkaW5nWmVybygpe2xldCBlO2ZvcihlPTA7ZTx0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0O2UrKylpZigwIT0odGhpcy5fY3VycmVudFdvcmQmMjE0NzQ4MzY0OD4+PmUpKXJldHVybiB0aGlzLl9jdXJyZW50V29yZDw8PWUsdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdC09ZSxlO3JldHVybiB0aGlzLl9maWxsQ3VycmVudFdvcmQoKSxlK3RoaXMuX3NraXBMZWFkaW5nWmVybygpfXJlYWRVRUcoKXtsZXQgZT10aGlzLl9za2lwTGVhZGluZ1plcm8oKTtyZXR1cm4gdGhpcy5yZWFkQml0cyhlKzEpLTF9cmVhZFNFRygpe2xldCBlPXRoaXMucmVhZFVFRygpO3JldHVybiAxJmU/ZSsxPj4+MTotMSooZT4+PjEpfX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcyxyPWkoMCksYT1pKDMzKSxuPShzPWEpJiZzLl9fZXNNb2R1bGU/czp7ZGVmYXVsdDpzfTtjb25zdHtSRU1VWF9FVkVOVFM6byxERU1VWF9FVkVOVFM6ZH09ci5FVkVOVFM7Y2xhc3MgbHtjb25zdHJ1Y3Rvcigpe3RoaXMubmV4dEF1ZGlvRHRzPTAsdGhpcy5uZXh0VmlkZW9EdHM9MCx0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW49MCx0aGlzLmxhc3RWaWRlb1NhbXBsZXNMZW49MCx0aGlzLmxhc3RWaWRlb0R0cz12b2lkIDAsdGhpcy5sYXN0QXVkaW9EdHM9dm9pZCAwLHRoaXMuYWxsQXVkaW9TYW1wbGVzQ291bnQ9MCx0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50PTAsdGhpcy5fZmlyc3RBdWRpb1NhbXBsZT1udWxsLHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGU9bnVsbCx0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcz1bXSx0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcz1bXSx0aGlzLl92aWRlb0xhcmdlR2FwPTAsdGhpcy5fYXVkaW9MYXJnZUdhcD0wfWluaXQoKXt0aGlzLmJlZm9yZShvLlJFTVVYX01FRElBLHRoaXMuZG9GaXguYmluZCh0aGlzKSl9cmVzZXQoKXt0aGlzLm5leHRBdWRpb0R0cz1udWxsLHRoaXMubmV4dFZpZGVvRHRzPW51bGwsdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuPTAsdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuPTAsdGhpcy5sYXN0VmlkZW9EdHM9dm9pZCAwLHRoaXMubGFzdEF1ZGlvRHRzPXZvaWQgMCx0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcz1bXSx0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcz1bXX1kb0ZpeCgpe2NvbnN0e2lzRmlyc3RBdWRpb1NhbXBsZXM6ZSxpc0ZpcnN0VmlkZW9TYW1wbGVzOnR9PXRoaXMuZ2V0Rmlyc3RTYW1wbGUoKTt0aGlzLnJlY29yZFNhbXBsZXNDb3VudCgpLHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUmJnRoaXMuZml4UmVmU2FtcGxlRHVyYXRpb24odGhpcy52aWRlb1RyYWNrLm1ldGEsdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMpLHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUmJnRoaXMuZml4UmVmU2FtcGxlRHVyYXRpb24odGhpcy5hdWRpb1RyYWNrLm1ldGEsdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMpO2NvbnN0e2NoYW5nZWQ6aSxjaGFuZ2VkSWR4OnN9PWwuZGV0YWN0Q2hhbmdlU3RyZWFtKHRoaXMudmlkZW9UcmFjay5zYW1wbGVzKTtpJiYhZT90aGlzLmZpeENoYW5nZVN0cmVhbVZpZGVvKHMpOnRoaXMuZG9GaXhWaWRlbyh0KTtjb25zdHtjaGFuZ2VkOnIsY2hhbmdlZElkeDphfT1sLmRldGFjdENoYW5nZVN0cmVhbSh0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcyk7cj90aGlzLmZpeENoYW5nZVN0cmVhbUF1ZGlvKGEpOnRoaXMuZG9GaXhBdWRpbyhlKX1kb0ZpeFZpZGVvKGUsdCl7bGV0e3NhbXBsZXM6aSxtZXRhOnN9PXRoaXMudmlkZW9UcmFjaztpZihzLmZyYW1lUmF0ZSYmITE9PT1zLmZyYW1lUmF0ZS5maXhlZClyZXR1cm47aWYoIWl8fCFpLmxlbmd0aHx8IXRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUpcmV0dXJuO2NvbnN0IHI9aVswXSxhPWkubGVuZ3RoO3RoaXMuX3ZpZGVvTGFyZ2VHYXA+MCYmbC5kb0ZpeExhcmdlR2FwKGksdGhpcy5fdmlkZW9MYXJnZUdhcCksci5kdHMhPT10aGlzLl9maXJzdFZpZGVvU2FtcGxlLmR0cyYmKHR8fGwuZGV0ZWN0TGFyZ2VHYXAodGhpcy5uZXh0VmlkZW9EdHMscikpJiYodCYmKHRoaXMubmV4dFZpZGVvRHRzPXQpLHRoaXMuX3ZpZGVvTGFyZ2VHYXA9dGhpcy5uZXh0VmlkZW9EdHMtci5kdHMsbC5kb0ZpeExhcmdlR2FwKGksdGhpcy5fdmlkZW9MYXJnZUdhcCkpO2NvbnN0IG49ci5kdHM7aWYoZSYmdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSl7Y29uc3QgZT10aGlzLl9maXJzdFZpZGVvU2FtcGxlLmR0cyx0PWUtdGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHM7aWYodD4yKnMucmVmU2FtcGxlRHVyYXRpb24pe2NvbnN0IGE9TWF0aC5mbG9vcih0L3MucmVmU2FtcGxlRHVyYXRpb24pO2ZvcihsZXQgdD0wO3Q8YTt0Kyspe2NvbnN0IGE9T2JqZWN0LmFzc2lnbih7fSxyKTthLmR0cz1lLSh0KzEpKnMucmVmU2FtcGxlRHVyYXRpb24sYS5wdHM9YS5kdHMrYS5jdHMsaS51bnNoaWZ0KGEpLHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzLnB1c2goe2R0czphLmR0cyxzaXplOmEuZGF0YS5ieXRlTGVuZ3RofSl9fX1sZXQgbztpZih0aGlzLm5leHRWaWRlb0R0cyl7bz1uLXRoaXMubmV4dFZpZGVvRHRzO2NvbnN0IGU9TWF0aC5hYnMobyk7aWYobz4yKnMucmVmU2FtcGxlRHVyYXRpb24pe2NvbnN0IGU9TWF0aC5mbG9vcihvL3MucmVmU2FtcGxlRHVyYXRpb24pO2ZvcihsZXQgdD0wO3Q8ZTt0Kyspe2NvbnN0IGU9T2JqZWN0LmFzc2lnbih7fSxpWzBdKSxyPW4tKHQrMSkqcy5yZWZTYW1wbGVEdXJhdGlvbjtlLmR0cz1yPnRoaXMubmV4dFZpZGVvRHRzP3I6dGhpcy5uZXh0VmlkZW9EdHMsZS5wdHM9ZS5kdHMrZS5jdHMsdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMudW5zaGlmdChlKSx0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5wdXNoKHtkdHM6ZS5kdHMsc2l6ZTplLmRhdGEuYnl0ZUxlbmd0aH0pfX1lbHNlIGU8PXMucmVmU2FtcGxlRHVyYXRpb24mJmU+MD8oaVswXS5kdHM9dGhpcy5uZXh0VmlkZW9EdHMsaVswXS5vcmlnaW5EdHM9aVswXS5kdHMsaVswXS5jdHM9dm9pZCAwIT09aVswXS5jdHM/aVswXS5jdHM6aVswXS5wdHMtaVswXS5kdHMsaVswXS5wdHM9aVswXS5kdHMraVswXS5jdHMpOm88MCYmbC5kb0ZpeExhcmdlR2FwKGksLTEqbyl9Y29uc3QgZD1pW2kubGVuZ3RoLTFdLmR0cyxoPWkubGVuZ3RoPj0yP2QtaVtpLmxlbmd0aC0yXS5kdHM6cy5yZWZTYW1wbGVEdXJhdGlvbjt0aGlzLmxhc3RWaWRlb1NhbXBsZXNMZW49YSx0aGlzLm5leHRWaWRlb0R0cz1kK2gsdGhpcy5sYXN0VmlkZW9EdHM9ZDtmb3IobGV0IGU9MCx0PWkubGVuZ3RoO2U8dDtlKyspe2NvbnN0IHQ9aVtlXSxyPWlbZSsxXTtpZighcilicmVhaztjb25zdCBhPXIuZHRzLXQuZHRzO2lmKGE+MipzLnJlZlNhbXBsZUR1cmF0aW9uKXtsZXQgbj1NYXRoLmZsb29yKGEvcy5yZWZTYW1wbGVEdXJhdGlvbiksbz0wO2Zvcig7bzxuOyl7Y29uc3QgYT1PYmplY3QuYXNzaWduKHt9LHIpO2EuZHRzPXQuZHRzKyhvKzEpKnMucmVmU2FtcGxlRHVyYXRpb24sYS5wdHM9YS5kdHMrYS5jdHMsYTxyLmR0cyYmKGkuc3BsaWNlKGUsMCxhKSx0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5wdXNoKHtkdHM6YS5kdHMsc2l6ZTphLmRhdGEuYnl0ZUxlbmd0aH0pKSxvKyssZSsrfX19dGhpcy52aWRlb1RyYWNrLnNhbXBsZXM9aX1kb0ZpeEF1ZGlvKGUsdCl7bGV0e3NhbXBsZXM6aSxtZXRhOnN9PXRoaXMuYXVkaW9UcmFjaztpZighaXx8IWkubGVuZ3RoKXJldHVybjtjb25zdCByPWkubGVuZ3RoLGE9bi5kZWZhdWx0LmdldFNpbGVudEZyYW1lKHMuY29kZWMscy5jaGFubmVsQ291bnQpLG89dGhpcy5fZmlyc3RBdWRpb1NhbXBsZSxkPWlbMF07aWYodGhpcy5fYXVkaW9MYXJnZUdhcD4wJiZsLmRvRml4TGFyZ2VHYXAoaSx0aGlzLl9hdWRpb0xhcmdlR2FwKSxkLmR0cyE9PXRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUuZHRzJiYodHx8bC5kZXRlY3RMYXJnZUdhcCh0aGlzLm5leHRBdWRpb0R0cyxkKSkmJih0JiYodGhpcy5uZXh0QXVkaW9EdHM9dCksdGhpcy5fYXVkaW9MYXJnZUdhcD10aGlzLm5leHRBdWRpb0R0cy1kLmR0cyxsLmRvRml4TGFyZ2VHYXAoaSx0aGlzLl9hdWRpb0xhcmdlR2FwKSksdGhpcy5fZmlyc3RWaWRlb1NhbXBsZSYmZSl7Y29uc3QgZT10aGlzLl9maXJzdFZpZGVvU2FtcGxlLnB0cz90aGlzLl9maXJzdFZpZGVvU2FtcGxlLnB0czp0aGlzLl9maXJzdFZpZGVvU2FtcGxlLmR0cyt0aGlzLl9maXJzdFZpZGVvU2FtcGxlLmN0cztpZihvLmR0cy1lPnMucmVmU2FtcGxlRHVyYXRpb24pe2NvbnN0IHQ9TWF0aC5mbG9vcigoby5kdHMtZSkvcy5yZWZTYW1wbGVEdXJhdGlvbik7Zm9yKGxldCBlPTA7ZTx0O2UrKyl7Y29uc3QgdD17ZGF0YTphLGRhdGFzaXplOmEuYnl0ZUxlbmd0aCxkdHM6by5kdHMtKGUrMSkqcy5yZWZTYW1wbGVEdXJhdGlvbixmaWx0ZXJlZDowfTtpLnVuc2hpZnQodCksdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMucHVzaCh7ZHRzOnQuZHRzLHNpemU6dC5kYXRhLmJ5dGVMZW5ndGh9KX19fWxldCBoO2NvbnN0IHU9aVswXS5kdHM7aWYodGhpcy5uZXh0QXVkaW9EdHMpe2g9dS10aGlzLm5leHRBdWRpb0R0cztjb25zdCBlPU1hdGguYWJzKGgpO2lmKGU+cy5yZWZTYW1wbGVEdXJhdGlvbiYmMT09PXImJjE9PT10aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4mJihzLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQ9dm9pZCAwKSxoPjIqcy5yZWZTYW1wbGVEdXJhdGlvbilpZigxPT09ciYmMT09PXRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbilzLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQ9dm9pZCAwIT09cy5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkP3MucmVmU2FtcGxlRHVyYXRpb25GaXhlZCtoOnMucmVmU2FtcGxlRHVyYXRpb24raDtlbHNle2NvbnN0IGU9TWF0aC5mbG9vcihoL3MucmVmU2FtcGxlRHVyYXRpb24pO2ZvcihsZXQgdD0wO3Q8ZTt0Kyspe2NvbnN0IGU9dS0odCsxKSpzLnJlZlNhbXBsZUR1cmF0aW9uLHI9T2JqZWN0LmFzc2lnbih7fSxpWzBdLHtkdHM6ZT50aGlzLm5leHRBdWRpb0R0cz9lOnRoaXMubmV4dEF1ZGlvRHRzfSk7dGhpcy5maWxsZWRBdWRpb1NhbXBsZXMucHVzaCh7ZHRzOnIuZHRzLHNpemU6ci5kYXRhLmJ5dGVMZW5ndGh9KSx0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcy51bnNoaWZ0KHIpfX1lbHNlIGU8PXMucmVmU2FtcGxlRHVyYXRpb24mJmU+MD8oaVswXS5kdHM9dGhpcy5uZXh0QXVkaW9EdHMsaVswXS5wdHM9dGhpcy5uZXh0QXVkaW9EdHMpOmg8MCYmbC5kb0ZpeExhcmdlR2FwKGksLTEqaCl9Y29uc3QgYz1pW2kubGVuZ3RoLTFdLmR0cyxmPWkubGVuZ3RoPj0yP2MtaVtpLmxlbmd0aC0yXS5kdHM6cy5yZWZTYW1wbGVEdXJhdGlvbjt0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW49cix0aGlzLm5leHRBdWRpb0R0cz1zLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQ/YytzLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQ6YytmLHRoaXMubGFzdEF1ZGlvRHRzPWM7Zm9yKGxldCBlPTAsdD1pLmxlbmd0aDtlPHQ7ZSsrKXtjb25zdCB0PWlbZV0scz1pW2UrMV07aWYoIXMpYnJlYWs7Y29uc3Qgcj1zLmR0cy10LmR0cztpW2VdLmR1cmF0aW9uPXJ9dGhpcy5hdWRpb1RyYWNrLnNhbXBsZXM9bC5zb3J0QXVkaW9TYW1wbGVzKGkpfWZpeENoYW5nZVN0cmVhbVZpZGVvKGUpe2NvbnN0e3NhbXBsZXM6dCxtZXRhOml9PXRoaXMudmlkZW9UcmFjayxzPTA9PT1lP3RoaXMuZ2V0U3RyZWFtQ2hhbmdlU3RhcnQodFswXSk6dFtlLTFdLmR0cyxyPXRbZV0uZHRzO2lmKE1hdGguYWJzKHMtcik8PTIqaS5yZWZTYW1wbGVEdXJhdGlvbilyZXR1cm4gdFtlXS5vcHRpb25zP3RbZV0ub3B0aW9ucy5pc0NvbnRpbnVlPSEwOnRbZV0ub3B0aW9ucz17aXNDb250aW51ZTohMH0sdGhpcy5kb0ZpeFZpZGVvKCExKTtjb25zdCBhPXQuc2xpY2UoMCxlKSxuPXQuc2xpY2UoZSksbz10WzBdLGQ9blswXS5kdHMtby5kdHMsbD1vLm9wdGlvbnMmJm8ub3B0aW9ucy5zdGFydCtkP28ub3B0aW9ucy5zdGFydDpudWxsO3RoaXMudmlkZW9UcmFjay5zYW1wbGVzPXQuc2xpY2UoMCxlKSx0aGlzLmRvRml4VmlkZW8oITEpLHRoaXMudmlkZW9UcmFjay5zYW1wbGVzPXQuc2xpY2UoZSksdGhpcy5kb0ZpeFZpZGVvKCExLGwpLHRoaXMudmlkZW9UcmFjay5zYW1wbGVzPWEuY29uY2F0KG4pfWZpeENoYW5nZVN0cmVhbUF1ZGlvKGUpe2NvbnN0e3NhbXBsZXM6dCxtZXRhOml9PXRoaXMuYXVkaW9UcmFjayxzPTA9PT1lP3RoaXMuZ2V0U3RyZWFtQ2hhbmdlU3RhcnQodFswXSk6dFtlLTFdLmR0cyxyPXRbZV0uZHRzO2lmKE1hdGguYWJzKHMtcik8PTIqaS5yZWZTYW1wbGVEdXJhdGlvbilyZXR1cm4gdFtlXS5vcHRpb25zP3RbZV0ub3B0aW9ucy5pc0NvbnRpbnVlPSEwOnRbZV0ub3B0aW9ucz17aXNDb250aW51ZTohMH0sdGhpcy5kb0ZpeEF1ZGlvKCExKTtjb25zdCBhPXQuc2xpY2UoMCxlKSxuPXQuc2xpY2UoZSksbz10WzBdLGQ9blswXS5kdHMtby5kdHMsbD1vLm9wdGlvbnMmJm8ub3B0aW9ucy5zdGFydCtkP28ub3B0aW9ucy5zdGFydDpudWxsO3RoaXMuYXVkaW9UcmFjay5zYW1wbGVzPWEsdGhpcy5kb0ZpeEF1ZGlvKCExKSx0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcz1uLHRoaXMuZG9GaXhBdWRpbyghMSxsKSx0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcz1hLmNvbmNhdChuKX1nZXRGaXJzdFNhbXBsZSgpe2xldHtzYW1wbGVzOmV9PXRoaXMudmlkZW9UcmFjayx7c2FtcGxlczp0fT10aGlzLmF1ZGlvVHJhY2ssaT0hMSxzPSExO3JldHVybiF0aGlzLl9maXJzdFZpZGVvU2FtcGxlJiZlLmxlbmd0aCYmKHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGU9bC5maW5kRmlyc3RWaWRlb1NhbXBsZShlKSxpPSEwKSwhdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSYmdC5sZW5ndGgmJih0aGlzLl9maXJzdEF1ZGlvU2FtcGxlPWwuZmluZEZpcnN0QXVkaW9TYW1wbGUodCkscz0hMCkse2lzRmlyc3RWaWRlb1NhbXBsZXM6aSxpc0ZpcnN0QXVkaW9TYW1wbGVzOnN9fWZpeFJlZlNhbXBsZUR1cmF0aW9uKGUsdCl7Y29uc3QgaT1cInZpZGVvXCI9PT1lLnR5cGUscz1pP3RoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQ6dGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCxyPWk/dGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5kdHM6dGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHMsYT1pP3RoaXMuZmlsbGVkVmlkZW9TYW1wbGVzLmxlbmd0aDp0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5sZW5ndGg7aWYoIWUucmVmU2FtcGxlRHVyYXRpb258fGUucmVmU2FtcGxlRHVyYXRpb248PTB8fE51bWJlci5pc05hTihlLnJlZlNhbXBsZUR1cmF0aW9uKSl7aWYodC5sZW5ndGg+PTEpe2NvbnN0IGk9dFt0Lmxlbmd0aC0xXS5kdHM7ZS5yZWZTYW1wbGVEdXJhdGlvbj1NYXRoLmZsb29yKChpLXIpLyhzK2EtMSkpfX1lbHNlIGlmKGUucmVmU2FtcGxlRHVyYXRpb24mJnQubGVuZ3RoPj01KXtjb25zdCBpPSh0W3QubGVuZ3RoLTFdLmR0cy10WzBdLmR0cykvKHQubGVuZ3RoLTEpO2UucmVmU2FtcGxlRHVyYXRpb249TWF0aC5mbG9vcihNYXRoLmFicyhlLnJlZlNhbXBsZUR1cmF0aW9uLWkpPD01P2UucmVmU2FtcGxlRHVyYXRpb246aSl9fXJlY29yZFNhbXBsZXNDb3VudCgpe2NvbnN0e2F1ZGlvVHJhY2s6ZSx2aWRlb1RyYWNrOnR9PXRoaXM7dGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCs9ZS5zYW1wbGVzLmxlbmd0aCx0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50Kz10LnNhbXBsZXMubGVuZ3RofXJlbW92ZUludmFsaWRTYW1wbGVzKCl7Y29uc3R7X2ZpcnN0VmlkZW9TYW1wbGU6ZSxfZmlyc3RBdWRpb1NhbXBsZTp0fT10aGlzO3RoaXMuYXVkaW9UcmFjay5zYW1wbGVzPXRoaXMuYXVkaW9UcmFjay5zYW1wbGVzLmZpbHRlcihlPT5lLmR0cz49dC5kdHMmJih2b2lkIDA9PT10aGlzLmxhc3RBdWRpb0R0c3x8ZS5kdHM+dGhpcy5sYXN0QXVkaW9EdHMpKSx0aGlzLnZpZGVvVHJhY2suc2FtcGxlcz10aGlzLnZpZGVvVHJhY2suc2FtcGxlcy5maWx0ZXIodD0+dC5kdHM+PWUuZHRzJiYodm9pZCAwPT09dGhpcy5sYXN0VmlkZW9EdHN8fHQuZHRzPnRoaXMubGFzdFZpZGVvRHRzKSl9Z2V0U3RyZWFtQ2hhbmdlU3RhcnQoZSl7cmV0dXJuIGUub3B0aW9ucyYmZS5vcHRpb25zLnN0YXJ0P2Uub3B0aW9ucy5zdGFydC10aGlzLmR0c0Jhc2U6MS8wfXN0YXRpYyBzb3J0QXVkaW9TYW1wbGVzKGUpe3JldHVybiAxPT09ZS5sZW5ndGg/ZTplLnNvcnQoKGUsdCk9PmUuZHRzLXQuZHRzKX1zdGF0aWMgZmluZEZpcnN0QXVkaW9TYW1wbGUoZSl7cmV0dXJuIGUmJjAhPT1lLmxlbmd0aD9sLnNvcnRBdWRpb1NhbXBsZXMoZSlbMF06bnVsbH1zdGF0aWMgZmluZEZpcnN0VmlkZW9TYW1wbGUoZSl7aWYoIWUubGVuZ3RoKXJldHVybiBudWxsO2NvbnN0IHQ9ZS5zb3J0KChlLHQpPT5lLmR0cy10LmR0cyk7Zm9yKGxldCBlPTAsaT10Lmxlbmd0aDtlPGk7ZSsrKWlmKHRbZV0uaXNLZXlmcmFtZSlyZXR1cm4gdFtlXX1zdGF0aWMgZGV0ZWN0TGFyZ2VHYXAoZSx0KXtpZihudWxsPT09ZSlyZXR1cm47Y29uc3QgaT10LmR0c3x8MCxzPWUtaT49MWUzfHxpLWU+PTFlMyxyPXQub3B0aW9ucyYmdC5vcHRpb25zLmRpc2NvbnRpbnVlO3JldHVybiBzfHxyfXN0YXRpYyBkb0ZpeExhcmdlR2FwKGUsdCl7Y29uc29sZS5sb2coXCJmaXggbGFyZ2UgZ2FwXCIpO2ZvcihsZXQgaT0wLHM9ZS5sZW5ndGg7aTxzO2krKyl7Y29uc3Qgcz1lW2ldO3MuZHRzKz10LHMucHRzJiYocy5wdHMrPXQpfX1zdGF0aWMgZGV0YWN0Q2hhbmdlU3RyZWFtKGUpe2xldCB0PSExLGk9LTE7Zm9yKGxldCBzPTAscj1lLmxlbmd0aDtzPHI7cysrKWlmKGVbc10ub3B0aW9ucyYmZVtzXS5vcHRpb25zLm1ldGEpe3Q9ITAsaT1zO2JyZWFrfXJldHVybntjaGFuZ2VkOnQsY2hhbmdlZElkeDppfX1nZXQgdHJhY2tzKCl7cmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJUUkFDS1NcIil9Z2V0IGF1ZGlvVHJhY2soKXtyZXR1cm4gdGhpcy50cmFja3M/dGhpcy50cmFja3MuYXVkaW9UcmFjazpudWxsfWdldCB2aWRlb1RyYWNrKCl7cmV0dXJuIHRoaXMudHJhY2tzP3RoaXMudHJhY2tzLnZpZGVvVHJhY2s6bnVsbH1nZXQgZHRzQmFzZSgpe2NvbnN0IGU9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIk1QNF9SRU1VWEVSXCIpO3JldHVybiBlP2UuX2R0c0Jhc2U6MH19dC5kZWZhdWx0PWx9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt0LmRlZmF1bHQ9Y2xhc3N7c3RhdGljIGdldFNpbGVudEZyYW1lKGUsdCl7aWYoXCJtcDRhLjQwLjJcIj09PWUpe2lmKDE9PT10KXJldHVybiBuZXcgVWludDhBcnJheShbMCwyMDAsMCwxMjgsMzUsMTI4XSk7aWYoMj09PXQpcmV0dXJuIG5ldyBVaW50OEFycmF5KFszMywwLDczLDE0NCwyLDI1LDAsMzUsMTI4XSk7aWYoMz09PXQpcmV0dXJuIG5ldyBVaW50OEFycmF5KFswLDIwMCwwLDEyOCwzMiwxMzIsMSwzOCw2NCw4LDEwMCwwLDE0Ml0pO2lmKDQ9PT10KXJldHVybiBuZXcgVWludDhBcnJheShbMCwyMDAsMCwxMjgsMzIsMTMyLDEsMzgsNjQsOCwxMDAsMCwxMjgsNDQsMTI4LDgsMiw1Nl0pO2lmKDU9PT10KXJldHVybiBuZXcgVWludDhBcnJheShbMCwyMDAsMCwxMjgsMzIsMTMyLDEsMzgsNjQsOCwxMDAsMCwxMzAsNDgsNCwxNTMsMCwzMywxNDQsMiw1Nl0pO2lmKDY9PT10KXJldHVybiBuZXcgVWludDhBcnJheShbMCwyMDAsMCwxMjgsMzIsMTMyLDEsMzgsNjQsOCwxMDAsMCwxMzAsNDgsNCwxNTMsMCwzMywxNDQsMiwwLDE3OCwwLDMyLDgsMjI0XSl9ZWxzZXtpZigxPT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzEsNjQsMzQsMTI4LDE2Myw3OCwyMzAsMTI4LDE4Niw4LDAsMCwwLDI4LDYsMjQxLDE5MywxMCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5NF0pO2lmKDI9PT10KXJldHVybiBuZXcgVWludDhBcnJheShbMSw2NCwzNCwxMjgsMTYzLDk0LDIzMCwxMjgsMTg2LDgsMCwwLDAsMCwxNDksMCw2LDI0MSwxNjEsMTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTRdKTtpZigzPT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzEsNjQsMzQsMTI4LDE2Myw5NCwyMzAsMTI4LDE4Niw4LDAsMCwwLDAsMTQ5LDAsNiwyNDEsMTYxLDEwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDk0XSl9cmV0dXJuIG51bGx9fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NsYXNzIHN7Y29uc3RydWN0b3IoKXt0aGlzLm1pbWV0eXBlPVwiXCIsdGhpcy5pbml0PW51bGwsdGhpcy5kYXRhPVtdfX10LmRlZmF1bHQ9Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLnNvdXJjZXM9e319Z2V0U291cmNlKGUpe3JldHVybiB0aGlzLnNvdXJjZXNbZV19Y3JlYXRlU291cmNlKGUpe3JldHVybiB0aGlzLnNvdXJjZXNbZV09bmV3IHMsdGhpcy5zb3VyY2VzW2VdfWNsZWFyKCl7dGhpcy5zb3VyY2VzPXt9fWRlc3Ryb3koKXt0aGlzLnNvdXJjZXM9e319fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPWkoMCk7Y29uc3Qgcj17TlVNQkVSOjAsQk9PTEVBTjoxLFNUUklORzoyLE9CSkVDVDozLE1JWF9BUlJBWTo4LE9CSkVDVF9FTkQ6OSxTVFJJQ1RfQVJSQVk6MTAsREFURToxMSxMT05FX1NUUklORzoxMn07dC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5vZmZzZXQ9MCx0aGlzLnJlYWRPZmZzZXQ9dGhpcy5vZmZzZXR9cmVzb2x2ZShlLHQpe2lmKHQ8Myl0aHJvdyBuZXcgRXJyb3IoXCJub3QgZW5vdWdoIGRhdGEgZm9yIG1ldGFpbmZvXCIpO2NvbnN0IGk9e30scz10aGlzLnBhcnNlVmFsdWUoZSkscj10aGlzLnBhcnNlVmFsdWUoZSx0LXMuYm9keVNpemUpO3JldHVybiBpW3MuZGF0YV09ci5kYXRhLHRoaXMucmVzZXRTdGF0dXMoKSxpfXJlc2V0U3RhdHVzKCl7dGhpcy5vZmZzZXQ9MCx0aGlzLnJlYWRPZmZzZXQ9dGhpcy5vZmZzZXR9cGFyc2VTdHJpbmcoZSl7Y29uc3QgdD1uZXcgRGF0YVZpZXcoZSx0aGlzLnJlYWRPZmZzZXQpLmdldFVpbnQxNigwLCFzLmlzTGUpO2xldCBpPVwiXCI7aT10PjA/cy5VVEY4LmRlY29kZShuZXcgVWludDhBcnJheShlLHRoaXMucmVhZE9mZnNldCsyLHQpKTpcIlwiO2xldCByPXQrMjtyZXR1cm4gdGhpcy5yZWFkT2Zmc2V0Kz1yLHtkYXRhOmksYm9keVNpemU6dCsyfX1wYXJzZURhdGUoZSx0KXtjb25zdCBpPW5ldyBEYXRhVmlldyhlLHRoaXMucmVhZE9mZnNldCx0KTtsZXQgcj1pLmdldEZsb2F0NjQoMCwhcy5pc0xlKTtyZXR1cm4gcis9NjAqaS5nZXRJbnQxNig4LCFzLmlzTGUpKjFlMyx0aGlzLnJlYWRPZmZzZXQrPTEwLHtkYXRhOm5ldyBEYXRlKHIpLGJvZHlTaXplOjEwfX1wYXJzZU9iamVjdChlLHQpe2NvbnN0IGk9dGhpcy5wYXJzZVN0cmluZyhlLHQpLHM9dGhpcy5wYXJzZVZhbHVlKGUsdC1pLmJvZHlTaXplKTtyZXR1cm57ZGF0YTp7bmFtZTppLmRhdGEsdmFsdWU6cy5kYXRhfSxib2R5U2l6ZTppLmJvZHlTaXplK3MuYm9keVNpemUsaXNPYmpFbmQ6cy5pc09iakVuZH19cGFyc2VMb25nU3RyaW5nKGUpe2NvbnN0IHQ9bmV3IERhdGFWaWV3KGUsdGhpcy5yZWFkT2Zmc2V0KS5nZXRVaW50MzIoMCwhcy5pc0xlKTtsZXQgaT1cIlwiO3JldHVybiBpPXQ+MD9zLlVURjguZGVjb2RlKG5ldyBVaW50OEFycmF5KGUsdGhpcy5yZWFkT2Zmc2V0KzIsdCkpOlwiXCIsdGhpcy5yZWFkT2Zmc2V0Kz10KzQse2RhdGE6aSxib2R5U2l6ZTp0KzR9fXBhcnNlVmFsdWUoZSx0KXtsZXQgaT1uZXcgQXJyYXlCdWZmZXI7aT1lIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/ZTplLmJ1ZmZlcjtjb25zdHtOVU1CRVI6YSxCT09MRUFOOm4sU1RSSU5HOm8sT0JKRUNUOmQsTUlYX0FSUkFZOmwsT0JKRUNUX0VORDpoLFNUUklDVF9BUlJBWTp1LERBVEU6YyxMT05FX1NUUklORzpmfT1yLHA9bmV3IERhdGFWaWV3KGksdGhpcy5yZWFkT2Zmc2V0LHQpO2xldCBtPSExO2NvbnN0IGc9cC5nZXRVaW50OCgwKTtsZXQgXz0xO3RoaXMucmVhZE9mZnNldCs9MTtsZXQgeT1udWxsO3N3aXRjaChnKXtjYXNlIGE6eT1wLmdldEZsb2F0NjQoMSwhcy5pc0xlKSx0aGlzLnJlYWRPZmZzZXQrPTgsXys9ODticmVhaztjYXNlIG46eT0hIXAuZ2V0VWludDgoMSksdGhpcy5yZWFkT2Zmc2V0Kz0xLF8rPTE7YnJlYWs7Y2FzZSBvOntjb25zdCBlPXRoaXMucGFyc2VTdHJpbmcoaSk7eT1lLmRhdGEsXys9ZS5ib2R5U2l6ZTticmVha31jYXNlIGQ6e3k9e307bGV0IGU9MDtmb3IoMTY3NzcyMTUmcC5nZXRVaW50MzIodC00LCFzLmlzTGUpJiYoZT0zKTtfPHQtNDspe2NvbnN0IHM9dGhpcy5wYXJzZU9iamVjdChpLHQtXy1lKTtpZihzLmlzT2JqZWN0RW5kKWJyZWFrO3lbcy5kYXRhLm5hbWVdPXMuZGF0YS52YWx1ZSxfKz1zLmJvZHlTaXplfWlmKF88PXQtMyl7OT09PSgxNjc3NzIxNSZwLmdldFVpbnQzMihfLTEsIXMuaXNMZSkpJiYodGhpcy5yZWFkT2Zmc2V0Kz0zLF8rPTMpfWJyZWFrfWNhc2UgbDp7eT17fSxfKz00LHRoaXMucmVhZE9mZnNldCs9NDtsZXQgZT0wO2Zvcig5PT0oMTY3NzcyMTUmcC5nZXRVaW50MzIodC00LCFzLmlzTGUpKSYmKGU9Myk7Xzx0LTg7KXtjb25zdCBzPXRoaXMucGFyc2VPYmplY3QoaSx0LV8tZSk7aWYocy5pc09iamVjdEVuZClicmVhazt5W3MuZGF0YS5uYW1lXT1zLmRhdGEudmFsdWUsXys9cy5ib2R5U2l6ZX1pZihfPD10LTMpezk9PT0oMTY3NzcyMTUmcC5nZXRVaW50MzIoXy0xLCFzLmlzTGUpKSYmKF8rPTMsdGhpcy5yZWFkT2Zmc2V0Kz0zKX1icmVha31jYXNlIGg6eT1udWxsLG09ITA7YnJlYWs7Y2FzZSB1Ont5PVtdO2NvbnN0IGU9cC5nZXRVaW50MzIoMSwhcy5pc0xlKTtfKz00LHRoaXMucmVhZE9mZnNldCs9NDtmb3IobGV0IHM9MDtzPGU7cysrKXtjb25zdCBlPXRoaXMucGFyc2VWYWx1ZShpLHQtXyk7eS5wdXNoKGUuZGF0YSksXys9ZS5ib2R5U2l6ZX1icmVha31jYXNlIGM6e2NvbnN0IGU9dGhpcy5wYXJzZURhdGUoaSx0LTEpO3k9ZS5kYXRhLF8rPWUuYm9keVNpemU7YnJlYWt9Y2FzZSBmOntjb25zdCBlPXRoaXMucGFyc2VMb25nU3RyaW5nKGksdC0xKTt5PWUuZGF0YSxfKz1lLmJvZHlTaXplO2JyZWFrfWRlZmF1bHQ6Xz10fXJldHVybntkYXRhOnksYm9keVNpemU6Xyxpc09iakVuZDptfX19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXtNcDRSZW11eGVyOmkoMzcpLmRlZmF1bHR9fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHMscj1pKDApLGE9aSgzOCksbj0ocz1hKSYmcy5fX2VzTW9kdWxlP3M6e2RlZmF1bHQ6c307Y29uc3Qgbz1yLkVWRU5UUy5SRU1VWF9FVkVOVFM7Y2xhc3MgZHtjb25zdHJ1Y3Rvcigpe3RoaXMuX2R0c0Jhc2U9MCx0aGlzLl9pc0R0c0Jhc2VJbml0ZWQ9ITEsdGhpcy5fYXVkaW9OZXh0RHRzPW51bGwsdGhpcy5fdmlkZW9OZXh0RHRzPW51bGwsdGhpcy5fdmlkZW9TZWdtZW50TGlzdD1uZXcgci5NZWRpYVNlZ21lbnRMaXN0KFwidmlkZW9cIiksdGhpcy5fYXVkaW9TZWdtZW50TGlzdD1uZXcgci5NZWRpYVNlZ21lbnRMaXN0KFwiYXVkaW9cIik7Y29uc3R7YnJvd3NlcjplfT1yLnNuaWZmZXI7dGhpcy5fZmlsbFNpbGVuY2VGcmFtZT1cImllXCI9PT1lLHRoaXMuaXNGaXJzdFZpZGVvPSEwLHRoaXMuaXNGaXJzdEF1ZGlvPSEwLHRoaXMudmlkZW9BbGxEdXJhdGlvbj0wLHRoaXMuYXVkaW9BbGxEdXJhdGlvbj0wfWluaXQoKXt0aGlzLm9uKG8uUkVNVVhfTUVESUEsdGhpcy5yZW11eC5iaW5kKHRoaXMpKSx0aGlzLm9uKG8uUkVNVVhfTUVUQURBVEEsdGhpcy5vbk1ldGFEYXRhUmVhZHkuYmluZCh0aGlzKSksdGhpcy5vbihvLkRFVEVDVF9DSEFOR0VfU1RSRUFNLHRoaXMucmVzZXREdHNCYXNlLmJpbmQodGhpcykpfWRlc3Ryb3koKXt0aGlzLl9kdHNCYXNlPS0xLHRoaXMuX2R0c0Jhc2VJbml0ZWQ9ITEsdGhpcy5fdmlkZW9OZXh0RHRzPW51bGwsdGhpcy5fYXVkaW9OZXh0RHRzPW51bGwsdGhpcy5fdmlkZW9TZWdtZW50TGlzdC5jbGVhcigpLHRoaXMuX2F1ZGlvU2VnbWVudExpc3QuY2xlYXIoKSx0aGlzLl92aWRlb1NlZ21lbnRMaXN0PW51bGwsdGhpcy5fYXVkaW9TZWdtZW50TGlzdD1udWxsfXJlbXV4KCl7Y29uc3R7YXVkaW9UcmFjazplLHZpZGVvVHJhY2s6dH09dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlRSQUNLU1wiKTshdGhpcy5faXNEdHNCYXNlSW5pdGVkJiZ0aGlzLmNhbGNEdHNCYXNlKGUsdCksdGhpcy5fcmVtdXhWaWRlbyh0KSx0aGlzLl9yZW11eEF1ZGlvKGUpfXJlc2V0RHRzQmFzZSgpe3RoaXMuX2R0c0Jhc2U9MCx0aGlzLl9kdHNCYXNlSW5pdGVkPSExfXNlZWsoKXt0aGlzLl92aWRlb05leHREdHM9bnVsbCx0aGlzLl9hdWRpb05leHREdHM9bnVsbCx0aGlzLl92aWRlb1NlZ21lbnRMaXN0LmNsZWFyKCksdGhpcy5fYXVkaW9TZWdtZW50TGlzdC5jbGVhcigpfW9uTWV0YURhdGFSZWFkeShlKXtsZXQgdDtpZihcImF1ZGlvXCI9PT1lKXtjb25zdHthdWRpb1RyYWNrOmV9PXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJUUkFDS1NcIik7dD1lfWVsc2V7Y29uc3R7dmlkZW9UcmFjazplfT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiVFJBQ0tTXCIpO3Q9ZX1sZXQgaT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiUFJFX1NPVVJDRV9CVUZGRVJcIikscz1pLmdldFNvdXJjZShlKTtzfHwocz1pLmNyZWF0ZVNvdXJjZShlKSkscy5taW1ldHlwZT10Lm1ldGEuY29kZWMscy5pbml0PXRoaXMucmVtdXhJbml0U2VnbWVudChlLHQubWV0YSksdGhpcy5lbWl0KG8uSU5JVF9TRUdNRU5ULGUpfXJlbXV4SW5pdFNlZ21lbnQoZSx0KXtsZXQgaT1uZXcgci5CdWZmZXIscz1uLmRlZmF1bHQuZnR5cCgpLGE9bi5kZWZhdWx0Lm1vb3Yoe3R5cGU6ZSxtZXRhOnR9KTtyZXR1cm4gaS53cml0ZShzLGEpLGl9Y2FsY0R0c0Jhc2UoZSx0KXtpZighZS5zYW1wbGVzLmxlbmd0aCYmIXQuc2FtcGxlcy5sZW5ndGgpcmV0dXJuO2xldCBpPTEvMCxzPTEvMDtlLnNhbXBsZXMmJmUuc2FtcGxlcy5sZW5ndGgmJihpPWUuc2FtcGxlc1swXS5kdHMpLHQuc2FtcGxlcyYmdC5zYW1wbGVzLmxlbmd0aCYmKHM9dC5zYW1wbGVzWzBdLmR0cyksdGhpcy5fZHRzQmFzZT1NYXRoLm1pbihpLHMpLHRoaXMuX2lzRHRzQmFzZUluaXRlZD0hMH1fcmVtdXhWaWRlbyhlKXtjb25zdCB0PWU7aWYoIWUuc2FtcGxlc3x8IWUuc2FtcGxlcy5sZW5ndGgpcmV0dXJuO2xldHtzYW1wbGVzOml9PXQscz0tMSxhPW51bGw7Y29uc3QgZD1bXSxsPXtzYW1wbGVzOltdfTtmb3IoO2kubGVuZ3RoOyl7Y29uc3QgZT1pLnNoaWZ0KCkse2lzS2V5ZnJhbWU6dCxvcHRpb25zOnJ9PWU7aWYoIXRoaXMuaXNGaXJzdEF1ZGlvJiZyJiZyLm1ldGEpe2E9dGhpcy5yZW11eEluaXRTZWdtZW50KFwidmlkZW9cIixyLm1ldGEpLHIubWV0YT1udWxsLGkudW5zaGlmdChlKSxyLmlzQ29udGludWV8fHRoaXMucmVzZXREdHNCYXNlKCk7YnJlYWt9bGV0IG4sbyxoPWUuZHRzLXRoaXMuX2R0c0Jhc2U7LTE9PT1zJiYocz1oKSx2b2lkIDAhPT1lLnB0cyYmKG49KG89ZS5wdHMtdGhpcy5fZHRzQmFzZSktaCksdm9pZCAwIT09ZS5jdHMmJihvPWUuY3RzK2gsbj1lLmN0cyk7bGV0IHU9e2J1ZmZlcjpbXSxzaXplOjB9O2wuc2FtcGxlcy5wdXNoKHUpLHUuYnVmZmVyLnB1c2goZS5kYXRhKSx1LnNpemUrPWUuZGF0YS5ieXRlTGVuZ3RoO2xldCBjPTA7aWYoaS5sZW5ndGg+PTEpe2M9aVswXS5kdHMtdGhpcy5fZHRzQmFzZS1ofWVsc2UgYz1kLmxlbmd0aD49MT9kW2QubGVuZ3RoLTFdLmR1cmF0aW9uOnRoaXMudmlkZW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uO3RoaXMudmlkZW9BbGxEdXJhdGlvbis9YyxkLnB1c2goe2R0czpoLGN0czpuLHB0czpvLGRhdGE6ZS5kYXRhLHNpemU6ZS5kYXRhLmJ5dGVMZW5ndGgsaXNLZXlmcmFtZTp0LGR1cmF0aW9uOmMsZmxhZ3M6e2lzTGVhZGluZzowLGRlcGVuZHNPbjp0PzI6MSxpc0RlcGVuZGVkT246dD8xOjAsaGFzUmVkdW5kYW5jeTowLGlzTm9uU3luYzp0PzA6MX0sb3JpZ2luRHRzOmgsdHlwZTpcInZpZGVvXCJ9KX1sZXQgaD1uZXcgci5CdWZmZXI7aWYoZC5sZW5ndGgpe2NvbnN0IGU9bi5kZWZhdWx0Lm1vb2Yoe2lkOnQubWV0YS5pZCx0aW1lOnMsc2FtcGxlczpkfSksaT1uLmRlZmF1bHQubWRhdChsKTtoLndyaXRlKGUsaSksdGhpcy53cml0ZVRvU291cmNlKFwidmlkZW9cIixoKX1pZihhJiYodGhpcy53cml0ZVRvU291cmNlKFwidmlkZW9cIixhKSxpLmxlbmd0aCkpcmV0dXJuIHQuc2FtcGxlcz1pLHRoaXMuX3JlbXV4VmlkZW8odCk7dGhpcy5pc0ZpcnN0VmlkZW89ITEsdGhpcy5lbWl0KG8uTUVESUFfU0VHTUVOVCxcInZpZGVvXCIpO2NvbnN0IHU9ZFtkLmxlbmd0aC0xXTt0aGlzLl92aWRlb05leHREdHM9dS5kdHMrdS5kdXJhdGlvbix0LnNhbXBsZXM9W10sdC5sZW5ndGg9MH1fcmVtdXhBdWRpbyhlKXtjb25zdHtzYW1wbGVzOnR9PWU7bGV0IGk9LTEscz1bXSxhPW51bGw7Y29uc3QgZD17c2FtcGxlczpbXX07aWYoIXR8fCF0Lmxlbmd0aClyZXR1cm47bGV0IGw9ITE7Zm9yKDt0Lmxlbmd0aDspe2xldCBlPXQuc2hpZnQoKTtjb25zdHtkYXRhOnIsb3B0aW9uczpufT1lO2lmKCF0aGlzLmlzRmlyc3RBdWRpbyYmbiYmbi5tZXRhKXthPXRoaXMucmVtdXhJbml0U2VnbWVudChcImF1ZGlvXCIsbi5tZXRhKSxuLm1ldGE9bnVsbCx0LnVuc2hpZnQoZSksbi5pc0NvbnRpbnVlfHx0aGlzLnJlc2V0RHRzQmFzZSgpO2JyZWFrfWxldCBvPWUuZHRzLXRoaXMuX2R0c0Jhc2U7Y29uc3QgaD1vO2x8fChpPW8sbD0hMCk7bGV0IHU9MDtpZih0aGlzLmF1ZGlvTWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkKXU9dGhpcy5hdWRpb01ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZDtlbHNlIGlmKHQubGVuZ3RoPj0xKXt1PXRbMF0uZHRzLXRoaXMuX2R0c0Jhc2Utb31lbHNlIHU9cy5sZW5ndGg+PTE/c1tzLmxlbmd0aC0xXS5kdXJhdGlvbjp0aGlzLmF1ZGlvTWV0YS5yZWZTYW1wbGVEdXJhdGlvbjt0aGlzLmF1ZGlvQWxsRHVyYXRpb24rPXU7Y29uc3QgYz17ZHRzOm8scHRzOm8sY3RzOjAsc2l6ZTpyLmJ5dGVMZW5ndGgsZHVyYXRpb246ZS5kdXJhdGlvbj9lLmR1cmF0aW9uOnUsZmxhZ3M6e2lzTGVhZGluZzowLGRlcGVuZHNPbjoyLGlzRGVwZW5kZWRPbjoxLGhhc1JlZHVuZGFuY3k6MCxpc05vblN5bmM6MH0saXNLZXlmcmFtZTohMCxvcmlnaW5EdHM6aCx0eXBlOlwiYXVkaW9cIn07bGV0IGY9e2J1ZmZlcjpbXSxzaXplOjB9O2YuYnVmZmVyLnB1c2gociksZi5zaXplKz1yLmJ5dGVMZW5ndGgsZC5zYW1wbGVzLnB1c2goZikscy5wdXNoKGMpfWNvbnN0IGg9bmV3IHIuQnVmZmVyO2lmKHMubGVuZ3RoKXtjb25zdCB0PW4uZGVmYXVsdC5tb29mKHtpZDplLm1ldGEuaWQsdGltZTppLHNhbXBsZXM6c30pLHI9bi5kZWZhdWx0Lm1kYXQoZCk7aC53cml0ZSh0LHIpLHRoaXMud3JpdGVUb1NvdXJjZShcImF1ZGlvXCIsaCl9aWYoYSYmKHRoaXMud3JpdGVUb1NvdXJjZShcImF1ZGlvXCIsYSksdC5sZW5ndGgpKXJldHVybiBlLnNhbXBsZXM9dCx0aGlzLl9yZW11eEF1ZGlvKGUpO3RoaXMuaXNGaXJzdEF1ZGlvPSExLHRoaXMuZW1pdChvLk1FRElBX1NFR01FTlQsXCJhdWRpb1wiLGgpO2NvbnN0IHU9c1tzLmxlbmd0aC0xXTt0aGlzLl92aWRlb05leHREdHM9dS5kdHMrdS5kdXJhdGlvbixlLnNhbXBsZXM9W10sZS5sZW5ndGg9MH13cml0ZVRvU291cmNlKGUsdCl7bGV0IGk9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlBSRV9TT1VSQ0VfQlVGRkVSXCIpLHM9aS5nZXRTb3VyY2UoZSk7c3x8KHM9aS5jcmVhdGVTb3VyY2UoZSkpLHMuZGF0YS5wdXNoKHQpfWluaXRTaWxlbnRBdWRpbyhlLHQpe2NvbnN0IGk9ZC5nZXRTaWxlbnRGcmFtZSh0aGlzLl9hdWRpb01ldGEuY2hhbm5lbENvdW50KTtyZXR1cm57ZHRzOmUscHRzOmUsY3RzOjAsZHVyYXRpb246dCx1bml0Omksc2l6ZTppLmJ5dGVMZW5ndGgsb3JpZ2luRHRzOmUsdHlwZTpcInZpZGVvXCJ9fWdldCB2aWRlb01ldGEoKXtyZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlRSQUNLU1wiKS52aWRlb1RyYWNrLm1ldGF9Z2V0IGF1ZGlvTWV0YSgpe3JldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiVFJBQ0tTXCIpLmF1ZGlvVHJhY2subWV0YX1zdGF0aWMgZ2V0U2lsZW50RnJhbWUoZSl7cmV0dXJuIDE9PT1lP25ldyBVaW50OEFycmF5KFswLDIwMCwwLDEyOCwzNSwxMjhdKToyPT09ZT9uZXcgVWludDhBcnJheShbMzMsMCw3MywxNDQsMiwyNSwwLDM1LDEyOF0pOjM9PT1lP25ldyBVaW50OEFycmF5KFswLDIwMCwwLDEyOCwzMiwxMzIsMSwzOCw2NCw4LDEwMCwwLDE0Ml0pOjQ9PT1lP25ldyBVaW50OEFycmF5KFswLDIwMCwwLDEyOCwzMiwxMzIsMSwzOCw2NCw4LDEwMCwwLDEyOCw0NCwxMjgsOCwyLDU2XSk6NT09PWU/bmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDMyLDEzMiwxLDM4LDY0LDgsMTAwLDAsMTMwLDQ4LDQsMTUzLDAsMzMsMTQ0LDIsNTZdKTo2PT09ZT9uZXcgVWludDhBcnJheShbMCwyMDAsMCwxMjgsMzIsMTMyLDEsMzgsNjQsOCwxMDAsMCwxMzAsNDgsNCwxNTMsMCwzMywxNDQsMiwwLDE3OCwwLDMyLDgsMjI0XSk6bnVsbH19dC5kZWZhdWx0PWR9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1pKDApO2NsYXNzIHJ7c3RhdGljIHNpemUoZSl7cmV0dXJuIHMuQnVmZmVyLndyaXRlVWludDMyKGUpfXN0YXRpYyBpbml0Qm94KGUsdCwuLi5pKXtjb25zdCBhPW5ldyBzLkJ1ZmZlcjtyZXR1cm4gYS53cml0ZShyLnNpemUoZSksci50eXBlKHQpLC4uLmkpLGEuYnVmZmVyfXN0YXRpYyBleHRlbnNpb24oZSx0KXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW2UsdD4+MTYmMjU1LHQ+PjgmMjU1LDI1NSZ0XSl9c3RhdGljIGZ0eXAoKXtyZXR1cm4gci5pbml0Qm94KDI0LFwiZnR5cFwiLG5ldyBVaW50OEFycmF5KFsxMDUsMTE1LDExMSwxMDksMCwwLDAsMSwxMDUsMTE1LDExMSwxMDksOTcsMTE4LDk5LDQ5XSkpfXN0YXRpYyBtb292KHt0eXBlOmUsbWV0YTp0fSl7bGV0IGkscz04LGE9ci5tdmhkKHQuZHVyYXRpb24sdC50aW1lc2NhbGUpO2k9XCJ2aWRlb1wiPT09ZT9yLnZpZGVvVHJhayh0KTpyLmF1ZGlvVHJhayh0KTtsZXQgbj1yLm12ZXgodC5kdXJhdGlvbix0LnRpbWVzY2FsZXx8MWUzLHQuaWQpO3JldHVyblthLGksbl0uZm9yRWFjaChlPT57cys9ZS5ieXRlTGVuZ3RofSksci5pbml0Qm94KHMsXCJtb292XCIsYSxpLG4pfXN0YXRpYyBtdmhkKGUsdD0xZTMpe2xldCBpPW5ldyBVaW50OEFycmF5KFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCx0Pj4+MjQmMjU1LHQ+Pj4xNiYyNTUsdD4+PjgmMjU1LDI1NSZ0LGU+Pj4yNCYyNTUsZT4+PjE2JjI1NSxlPj4+OCYyNTUsMjU1JmUsMCwxLDAsMCwxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNjQsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMjU1LDI1NSwyNTUsMjU1XSk7cmV0dXJuIHIuaW5pdEJveCg4K2kubGVuZ3RoLFwibXZoZFwiLG5ldyBVaW50OEFycmF5KGkpKX1zdGF0aWMgdmlkZW9UcmFrKGUpe2xldCB0PTgsaT1yLnRraGQoe2lkOjEsZHVyYXRpb246ZS5kdXJhdGlvbix0aW1lc2NhbGU6ZS50aW1lc2NhbGV8fDFlMyx3aWR0aDplLnByZXNlbnRXaWR0aCxoZWlnaHQ6ZS5wcmVzZW50SGVpZ2h0LHR5cGU6XCJ2aWRlb1wifSkscz1yLm1kaWEoe3R5cGU6XCJ2aWRlb1wiLHRpbWVzY2FsZTplLnRpbWVzY2FsZXx8MWUzLGR1cmF0aW9uOmUuZHVyYXRpb24sYXZjYzplLmF2Y2MscGFyUmF0aW86ZS5wYXJSYXRpbyx3aWR0aDplLnByZXNlbnRXaWR0aCxoZWlnaHQ6ZS5wcmVzZW50SGVpZ2h0fSk7cmV0dXJuW2ksc10uZm9yRWFjaChlPT57dCs9ZS5ieXRlTGVuZ3RofSksci5pbml0Qm94KHQsXCJ0cmFrXCIsaSxzKX1zdGF0aWMgYXVkaW9UcmFrKGUpe2xldCB0PTgsaT1yLnRraGQoe2lkOjIsZHVyYXRpb246ZS5kdXJhdGlvbix0aW1lc2NhbGU6ZS50aW1lc2NhbGV8fDFlMyx3aWR0aDowLGhlaWdodDowLHR5cGU6XCJhdWRpb1wifSkscz1yLm1kaWEoe3R5cGU6XCJhdWRpb1wiLHRpbWVzY2FsZTplLnRpbWVzY2FsZXx8MWUzLGR1cmF0aW9uOmUuZHVyYXRpb24sY2hhbm5lbENvdW50OmUuY2hhbm5lbENvdW50LHNhbXBsZXJhdGU6ZS5zYW1wbGVSYXRlLGNvbmZpZzplLmNvbmZpZ30pO3JldHVybltpLHNdLmZvckVhY2goZT0+e3QrPWUuYnl0ZUxlbmd0aH0pLHIuaW5pdEJveCh0LFwidHJha1wiLGkscyl9c3RhdGljIHRraGQoZSl7bGV0IHQ9ZS5pZCxpPWUuZHVyYXRpb24scz1lLndpZHRoLGE9ZS5oZWlnaHQsbj1uZXcgVWludDhBcnJheShbMCwwLDAsNywwLDAsMCwwLDAsMCwwLDAsdD4+PjI0JjI1NSx0Pj4+MTYmMjU1LHQ+Pj44JjI1NSwyNTUmdCwwLDAsMCwwLGk+Pj4yNCYyNTUsaT4+PjE2JjI1NSxpPj4+OCYyNTUsMjU1JmksMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNjQsMCwwLDAscz4+PjgmMjU1LDI1NSZzLDAsMCxhPj4+OCYyNTUsMjU1JmEsMCwwXSk7cmV0dXJuIHIuaW5pdEJveCg4K24uYnl0ZUxlbmd0aCxcInRraGRcIixuKX1zdGF0aWMgZWR0cyhlKXtsZXQgdD1uZXcgcy5CdWZmZXIsaT1lLmR1cmF0aW9uLGE9ZS5tZWRpYVRpbWU7cmV0dXJuIHQud3JpdGUoci5zaXplKDM2KSxyLnR5cGUoXCJlZHRzXCIpKSx0LndyaXRlKHIuc2l6ZSgyOCksci50eXBlKFwiZWxzdFwiKSksdC53cml0ZShuZXcgVWludDhBcnJheShbMCwwLDAsMSxpPj4yNCYyNTUsaT4+MTYmMjU1LGk+PjgmMjU1LDI1NSZpLGE+PjI0JjI1NSxhPj4xNiYyNTUsYT4+OCYyNTUsMjU1JmEsMCwwLDAsMV0pKSx0LmJ1ZmZlcn1zdGF0aWMgbWRpYShlKXtsZXQgdD04LGk9ci5tZGhkKGUudGltZXNjYWxlLGUuZHVyYXRpb24pLHM9ci5oZGxyKGUudHlwZSksYT1yLm1pbmYoZSk7cmV0dXJuW2kscyxhXS5mb3JFYWNoKGU9Pnt0Kz1lLmJ5dGVMZW5ndGh9KSxyLmluaXRCb3godCxcIm1kaWFcIixpLHMsYSl9c3RhdGljIG1kaGQoZT0xZTMsdCl7bGV0IGk9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMCxlPj4+MjQmMjU1LGU+Pj4xNiYyNTUsZT4+PjgmMjU1LDI1NSZlLHQ+Pj4yNCYyNTUsdD4+PjE2JjI1NSx0Pj4+OCYyNTUsMjU1JnQsODUsMTk2LDAsMF0pO3JldHVybiByLmluaXRCb3goMTIraS5ieXRlTGVuZ3RoLFwibWRoZFwiLHIuZXh0ZW5zaW9uKDAsMCksaSl9c3RhdGljIGhkbHIoZSl7bGV0IHQ9WzAsMCwwLDAsMCwwLDAsMCwxMTgsMTA1LDEwMCwxMDEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsODYsMTA1LDEwMCwxMDEsMTExLDcyLDk3LDExMCwxMDAsMTA4LDEwMSwxMTQsMF07cmV0dXJuXCJhdWRpb1wiPT09ZSYmKHQuc3BsaWNlKDgsNCwxMTUsMTExLDExNywxMTApLHQuc3BsaWNlKDI0LDEzLDgzLDExMSwxMTcsMTEwLDEwMCw3Miw5NywxMTAsMTAwLDEwOCwxMDEsMTE0LDApKSxyLmluaXRCb3goOCt0Lmxlbmd0aCxcImhkbHJcIixuZXcgVWludDhBcnJheSh0KSl9c3RhdGljIG1pbmYoZSl7bGV0IHQ9OCxpPVwidmlkZW9cIj09PWUudHlwZT9yLnZtaGQoKTpyLnNtaGQoKSxzPXIuZGluZigpLGE9ci5zdGJsKGUpO3JldHVybltpLHMsYV0uZm9yRWFjaChlPT57dCs9ZS5ieXRlTGVuZ3RofSksci5pbml0Qm94KHQsXCJtaW5mXCIsaSxzLGEpfXN0YXRpYyB2bWhkKCl7cmV0dXJuIHIuaW5pdEJveCgyMCxcInZtaGRcIixuZXcgVWludDhBcnJheShbMCwwLDAsMSwwLDAsMCwwLDAsMCwwLDBdKSl9c3RhdGljIHNtaGQoKXtyZXR1cm4gci5pbml0Qm94KDE2LFwic21oZFwiLG5ldyBVaW50OEFycmF5KFswLDAsMCwwLDAsMCwwLDBdKSl9c3RhdGljIGRpbmYoKXtsZXQgZT1uZXcgcy5CdWZmZXI7cmV0dXJuIGUud3JpdGUoci5zaXplKDM2KSxyLnR5cGUoXCJkaW5mXCIpLHIuc2l6ZSgyOCksci50eXBlKFwiZHJlZlwiKSxuZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwxLDAsMCwwLDEyLDExNywxMTQsMTA4LDMyLDAsMCwwLDFdKSksZS5idWZmZXJ9c3RhdGljIHN0YmwoZSl7bGV0IHQ9OCxpPXIuc3RzZChlKSxzPXIuc3R0cygpLGE9ci5zdHNjKCksbj1yLnN0c3ooKSxvPXIuc3RjbygpO3JldHVybltpLHMsYSxuLG9dLmZvckVhY2goZT0+e3QrPWUuYnl0ZUxlbmd0aH0pLHIuaW5pdEJveCh0LFwic3RibFwiLGkscyxhLG4sbyl9c3RhdGljIHN0c2QoZSl7bGV0IHQ7cmV0dXJuIHQ9XCJhdWRpb1wiPT09ZS50eXBlP3IubXA0YShlKTpyLmF2YzEoZSksci5pbml0Qm94KDE2K3QuYnl0ZUxlbmd0aCxcInN0c2RcIixyLmV4dGVuc2lvbigwLDApLG5ldyBVaW50OEFycmF5KFswLDAsMCwxXSksdCl9c3RhdGljIG1wNGEoZSl7bGV0IHQ9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMSwwLDAsMCwwLDAsMCwwLDAsMCxlLmNoYW5uZWxDb3VudCwwLDE2LDAsMCwwLDAsZS5zYW1wbGVyYXRlPj44JjI1NSwyNTUmZS5zYW1wbGVyYXRlLDAsMF0pLGk9ci5lc2RzKGUuY29uZmlnKTtyZXR1cm4gci5pbml0Qm94KDgrdC5ieXRlTGVuZ3RoK2kuYnl0ZUxlbmd0aCxcIm1wNGFcIix0LGkpfXN0YXRpYyBlc2RzKGU9WzQzLDE0Niw4LDBdKXtjb25zdCB0PWUubGVuZ3RoO2xldCBpPW5ldyBzLkJ1ZmZlcixhPW5ldyBVaW50OEFycmF5KFswLDAsMCwwLDMsMjMrdCwwLDEsMCw0LDE1K3QsNjQsMjEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDVdLmNvbmNhdChbdF0pLmNvbmNhdChlKS5jb25jYXQoWzYsMSwyXSkpO3JldHVybiBpLndyaXRlKHIuc2l6ZSg4K2EuYnl0ZUxlbmd0aCksci50eXBlKFwiZXNkc1wiKSxhKSxpLmJ1ZmZlcn1zdGF0aWMgYXZjMShlKXtsZXQgdD1uZXcgcy5CdWZmZXIsaT1lLndpZHRoLGE9ZS5oZWlnaHQsbj1lLnBhclJhdGlvLmhlaWdodCxvPWUucGFyUmF0aW8ud2lkdGgsZD1lLmF2Y2MsbD1uZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsaT4+OCYyNTUsMjU1JmksYT4+OCYyNTUsMjU1JmEsMCw3MiwwLDAsMCw3MiwwLDAsMCwwLDAsMCwwLDEsMTgsMTAwLDk3LDEwNSwxMDgsMTIxLDEwOSwxMTEsMTE2LDEwNSwxMTEsMTEwLDQ3LDEwNCwxMDgsMTE1LDQ2LDEwNiwxMTUsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDI0LDE3LDE3XSksaD1uZXcgVWludDhBcnJheShbMCwyOCwxNTYsMTI4LDAsNDUsMTk4LDE5MiwwLDQ1LDE5OCwxOTJdKSx1PW5ldyBVaW50OEFycmF5KFtuPj4yNCxuPj4xNiYyNTUsbj4+OCYyNTUsMjU1Jm4sbz4+MjQsbz4+MTYmMjU1LG8+PjgmMjU1LDI1NSZvXSk7cmV0dXJuIHQud3JpdGUoci5zaXplKDQwK2wuYnl0ZUxlbmd0aCtkLmJ5dGVMZW5ndGgraC5ieXRlTGVuZ3RoKSxyLnR5cGUoXCJhdmMxXCIpLGwsci5zaXplKDgrZC5ieXRlTGVuZ3RoKSxyLnR5cGUoXCJhdmNDXCIpLGQsci5zaXplKDIwKSxyLnR5cGUoXCJidHJ0XCIpLGgsci5zaXplKDE2KSxyLnR5cGUoXCJwYXNwXCIpLHUpLHQuYnVmZmVyfXN0YXRpYyBzdHRzKCl7bGV0IGU9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMF0pO3JldHVybiByLmluaXRCb3goMTYsXCJzdHRzXCIsZSl9c3RhdGljIHN0c2MoKXtsZXQgZT1uZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwwXSk7cmV0dXJuIHIuaW5pdEJveCgxNixcInN0c2NcIixlKX1zdGF0aWMgc3Rjbygpe2xldCBlPW5ldyBVaW50OEFycmF5KFswLDAsMCwwLDAsMCwwLDBdKTtyZXR1cm4gci5pbml0Qm94KDE2LFwic3Rjb1wiLGUpfXN0YXRpYyBzdHN6KCl7bGV0IGU9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSk7cmV0dXJuIHIuaW5pdEJveCgyMCxcInN0c3pcIixlKX1zdGF0aWMgbXZleChlLHQ9MWUzLGkpe2xldCBhPW5ldyBzLkJ1ZmZlcixuPXMuQnVmZmVyLndyaXRlVWludDMyKGUpO3JldHVybiBhLndyaXRlKHIuc2l6ZSg1Niksci50eXBlKFwibXZleFwiKSxyLnNpemUoMTYpLHIudHlwZShcIm1laGRcIiksci5leHRlbnNpb24oMCwwKSxuLHIudHJleChpKSksYS5idWZmZXJ9c3RhdGljIHRyZXgoZSl7bGV0IHQ9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsZT4+MjQsZT4+MTYmMjU1LGU+PjgmMjU1LDI1NSZlLDAsMCwwLDEsMCwwLDAsMCwwLDAsMCwwLDAsMSwwLDFdKTtyZXR1cm4gci5pbml0Qm94KDgrdC5ieXRlTGVuZ3RoLFwidHJleFwiLHQpfXN0YXRpYyBtb29mKGUpe2xldCB0PTgsaT1yLm1maGQoKSxzPXIudHJhZihlKTtyZXR1cm5baSxzXS5mb3JFYWNoKGU9Pnt0Kz1lLmJ5dGVMZW5ndGh9KSxyLmluaXRCb3godCxcIm1vb2ZcIixpLHMpfXN0YXRpYyBtZmhkKCl7bGV0IGU9cy5CdWZmZXIud3JpdGVVaW50MzIoci5zZXF1ZW5jZSk7cmV0dXJuIHIuc2VxdWVuY2UrPTEsci5pbml0Qm94KDE2LFwibWZoZFwiLHIuZXh0ZW5zaW9uKDAsMCksZSl9c3RhdGljIHRyYWYoZSl7bGV0IHQ9OCxpPXIudGZoZChlLmlkKSxzPXIudGZkdChlLnRpbWUpLGE9ci5zZHRwKGUpLG49ci50cnVuKGUsYS5ieXRlTGVuZ3RoKTtyZXR1cm5baSxzLG4sYV0uZm9yRWFjaChlPT57dCs9ZS5ieXRlTGVuZ3RofSksci5pbml0Qm94KHQsXCJ0cmFmXCIsaSxzLG4sYSl9c3RhdGljIHRmaGQoZSl7bGV0IHQ9cy5CdWZmZXIud3JpdGVVaW50MzIoZSk7cmV0dXJuIHIuaW5pdEJveCgxNixcInRmaGRcIixyLmV4dGVuc2lvbigwLDApLHQpfXN0YXRpYyB0ZmR0KGUpe3JldHVybiByLmluaXRCb3goMTYsXCJ0ZmR0XCIsci5leHRlbnNpb24oMCwwKSxzLkJ1ZmZlci53cml0ZVVpbnQzMihlKSl9c3RhdGljIHRydW4oZSx0KXtsZXQgaT1uZXcgcy5CdWZmZXIsYT1zLkJ1ZmZlci53cml0ZVVpbnQzMihlLnNhbXBsZXMubGVuZ3RoKSxuPXMuQnVmZmVyLndyaXRlVWludDMyKDkyKzE2KmUuc2FtcGxlcy5sZW5ndGgrdCk7cmV0dXJuIGkud3JpdGUoci5zaXplKDIwKzE2KmUuc2FtcGxlcy5sZW5ndGgpLHIudHlwZShcInRydW5cIiksbmV3IFVpbnQ4QXJyYXkoWzAsMCwxNSwxXSksYSxuKSxlLnNhbXBsZXMuZm9yRWFjaChlPT57Y29uc3QgdD1lLmZsYWdzO2kud3JpdGUobmV3IFVpbnQ4QXJyYXkoW2UuZHVyYXRpb24+Pj4yNCYyNTUsZS5kdXJhdGlvbj4+PjE2JjI1NSxlLmR1cmF0aW9uPj4+OCYyNTUsMjU1JmUuZHVyYXRpb24sZS5zaXplPj4+MjQmMjU1LGUuc2l6ZT4+PjE2JjI1NSxlLnNpemU+Pj44JjI1NSwyNTUmZS5zaXplLHQuaXNMZWFkaW5nPDwyfHQuZGVwZW5kc09uLHQuaXNEZXBlbmRlZE9uPDw2fHQuaGFzUmVkdW5kYW5jeTw8NHx0LmlzTm9uU3luYywwLDAsZS5jdHM+Pj4yNCYyNTUsZS5jdHM+Pj4xNiYyNTUsZS5jdHM+Pj44JjI1NSwyNTUmZS5jdHNdKSl9KSxpLmJ1ZmZlcn1zdGF0aWMgc2R0cChlKXtsZXQgdD1uZXcgcy5CdWZmZXI7cmV0dXJuIHQud3JpdGUoci5zaXplKDEyK2Uuc2FtcGxlcy5sZW5ndGgpLHIudHlwZShcInNkdHBcIiksci5leHRlbnNpb24oMCwwKSksZS5zYW1wbGVzLmZvckVhY2goZT0+e2NvbnN0IGk9ZS5mbGFncyxzPWkuaXNMZWFkaW5nPDw2fGkuZGVwZW5kc09uPDw0fGkuaXNEZXBlbmRlZE9uPDwyfGkuaGFzUmVkdW5kYW5jeTt0LndyaXRlKG5ldyBVaW50OEFycmF5KFtzXSkpfSksdC5idWZmZXJ9c3RhdGljIG1kYXQoZSl7bGV0IHQ9bmV3IHMuQnVmZmVyLGk9ODtlLnNhbXBsZXMuZm9yRWFjaChlPT57aSs9ZS5zaXplfSksdC53cml0ZShyLnNpemUoaSksci50eXBlKFwibWRhdFwiKSk7bGV0IGE9bmV3IFVpbnQ4QXJyYXkoaSksbj0wO3JldHVybiBhLnNldCh0LmJ1ZmZlcixuKSxuKz04LGUuc2FtcGxlcy5mb3JFYWNoKGU9PntlLmJ1ZmZlci5mb3JFYWNoKGU9PnthLnNldChlLG4pLG4rPWUuYnl0ZUxlbmd0aH0pfSksYX19ci50eXBlPWU9Pm5ldyBVaW50OEFycmF5KFtlLmNoYXJDb2RlQXQoMCksZS5jaGFyQ29kZUF0KDEpLGUuY2hhckNvZGVBdCgyKSxlLmNoYXJDb2RlQXQoMyldKSxyLnNlcXVlbmNlPTEsdC5kZWZhdWx0PXJ9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9e0ZldGNoTG9hZGVyOmkoNDApLmRlZmF1bHR9fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgcz1pKDApLkVWRU5UUy5MT0FERVJfRVZFTlRTLHI9MCxhPTEsbj0yLG89Mzt0LmRlZmF1bHQ9Y2xhc3N7Y29uc3RydWN0b3IoZSl7dGhpcy5jb25maWdzPU9iamVjdC5hc3NpZ24oe30sZSksdGhpcy51cmw9bnVsbCx0aGlzLnN0YXR1cz0wLHRoaXMuZXJyb3I9bnVsbCx0aGlzLl9yZWFkZXI9bnVsbCx0aGlzLl9jYW5jZWxlZD0hMSx0aGlzLl9kZXN0cm95ZWQ9ITEsdGhpcy5yZWFkdHlwZT10aGlzLmNvbmZpZ3MucmVhZHR5cGUsdGhpcy5idWZmZXI9dGhpcy5jb25maWdzLmJ1ZmZlcnx8XCJMT0FERVJfQlVGRkVSXCIsdGhpcy5fbG9hZGVyVGFza05vPTB9aW5pdCgpe3RoaXMub24ocy5MQURFUl9TVEFSVCx0aGlzLmxvYWQuYmluZCh0aGlzKSl9c3RhdGljIGdldCB0eXBlKCl7cmV0dXJuXCJsb2FkZXJcIn1sb2FkKGUsdCl7bGV0IGk9dGhpczt0aGlzLnVybD1lLHRoaXMuX2NhbmNlbGVkPSExO2xldCByPXRoaXMuZ2V0UGFyYW1zKHQpO3JldHVybiBpLmxvYWRpbmc9ITAsZmV0Y2godGhpcy51cmwscikudGhlbigoZnVuY3Rpb24oZSl7aWYoZS5vaylyZXR1cm4gaS5zdGF0dXM9ZS5zdGF0dXMsaS5fb25GZXRjaFJlc3BvbnNlKGUpO2kubG9hZGluZz0hMSxpLmVtaXQocy5MT0FERVJfRVJST1IsaS5UQUcsbmV3IEVycm9yKFwiaW52YWxpZCByZXNwb25zZS5cIikpfSkpLmNhdGNoKChmdW5jdGlvbihlKXt0aHJvdyBpLmxvYWRpbmc9ITEsaS5lbWl0KHMuTE9BREVSX0VSUk9SLGkuVEFHLGUpLG5ldyBFcnJvcihlLm1lc3NhZ2UpfSkpfV9vbkZldGNoUmVzcG9uc2UoZSl7bGV0IHQ9dGhpcyxpPXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5idWZmZXIpO3RoaXMuX2xvYWRlclRhc2tObysrO2xldCBkPXRoaXMuX2xvYWRlclRhc2tObztpZighMD09PWUub2spc3dpdGNoKHRoaXMucmVhZHR5cGUpe2Nhc2UgbjplLmpzb24oKS50aGVuKGU9Pnt0LmxvYWRpbmc9ITEsdC5fY2FuY2VsZWR8fHQuX2Rlc3Ryb3llZHx8KGk/KGkucHVzaChlKSx0LmVtaXQocy5MT0FERVJfQ09NUExFVEUsaSkpOnQuZW1pdChzLkxPQURFUl9DT01QTEVURSxlKSl9KTticmVhaztjYXNlIGE6ZS50ZXh0KCkudGhlbihlPT57dC5sb2FkaW5nPSExLHQuX2NhbmNlbGVkfHx0Ll9kZXN0cm95ZWR8fChpPyhpLnB1c2goZSksdC5lbWl0KHMuTE9BREVSX0NPTVBMRVRFLGkpKTp0LmVtaXQocy5MT0FERVJfQ09NUExFVEUsZSkpfSk7YnJlYWs7Y2FzZSBvOmUuYXJyYXlCdWZmZXIoKS50aGVuKGU9Pnt0LmxvYWRpbmc9ITEsdC5fY2FuY2VsZWR8fHQuX2Rlc3Ryb3llZHx8KGk/KGkucHVzaChuZXcgVWludDhBcnJheShlKSksdC5lbWl0KHMuTE9BREVSX0NPTVBMRVRFLGkpKTp0LmVtaXQocy5MT0FERVJfQ09NUExFVEUsZSkpfSk7YnJlYWs7Y2FzZSByOmRlZmF1bHQ6cmV0dXJuIHRoaXMuX29uUmVhZGVyKGUuYm9keS5nZXRSZWFkZXIoKSxkKX19X29uUmVhZGVyKGUsdCl7bGV0IGk9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmJ1ZmZlcik7aWYoIWkmJnRoaXMuX3JlYWRlcnx8dGhpcy5fZGVzdHJveWVkKXRyeXt0aGlzLl9yZWFkZXIuY2FuY2VsKCl9Y2F0Y2goZSl7fWlmKHRoaXMuX3JlYWRlcj1lLCExPT09dGhpcy5sb2FkaW5nKXJldHVybjtsZXQgcj10aGlzO3RoaXMuX3JlYWRlciYmdGhpcy5fcmVhZGVyLnJlYWQoKS50aGVuKChmdW5jdGlvbihhKXtpZihhLmRvbmUpcmV0dXJuIHIubG9hZGluZz0hMSxyLnN0YXR1cz0wLHZvaWQgci5lbWl0KHMuTE9BREVSX0NPTVBMRVRFLGkpO2lmKCFyLl9jYW5jZWxlZCYmIXIuX2Rlc3Ryb3llZClyZXR1cm4gaS5wdXNoKGEudmFsdWUpLHIuZW1pdChzLkxPQURFUl9EQVRBTE9BREVELGkpLHIuX29uUmVhZGVyKGUsdCk7aWYoci5fcmVhZGVyKXRyeXtyLl9yZWFkZXIuY2FuY2VsKCl9Y2F0Y2goZSl7fX0pKS5jYXRjaChlPT57ci5sb2FkaW5nPSExLHIuZW1pdChzLkxPQURFUl9FUlJPUixyLlRBRyxlKX0pfWdldFBhcmFtcyhlKXtsZXQgdD1PYmplY3QuYXNzaWduKHt9LGUpLGk9bmV3IEhlYWRlcnMscz17bWV0aG9kOlwiR0VUXCIsaGVhZGVyczppLG1vZGU6XCJjb3JzXCIsY2FjaGU6XCJkZWZhdWx0XCJ9O2lmKFwib2JqZWN0XCI9PXR5cGVvZiB0aGlzLmNvbmZpZ3MuaGVhZGVycyl7bGV0IGU9dGhpcy5jb25maWdzLmhlYWRlcnM7Zm9yKGxldCB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmaS5hcHBlbmQodCxlW3RdKX1pZihcIm9iamVjdFwiPT10eXBlb2YgdC5oZWFkZXJzKXtsZXQgZT10LmhlYWRlcnM7Zm9yKGxldCB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmaS5hcHBlbmQodCxlW3RdKX1yZXR1cm4hMT09PXQuY29ycyYmKHMubW9kZT1cInNhbWUtb3JpZ2luXCIpLHQud2l0aENyZWRlbnRpYWxzJiYocy5jcmVkZW50aWFscz1cImluY2x1ZGVcIiksc31jYW5jZWwoKXtpZih0aGlzLl9yZWFkZXIpe3RyeXt0aGlzLl9yZWFkZXIuY2FuY2VsKCl9Y2F0Y2goZSl7fXRoaXMuX3JlYWRlcj1udWxsLHRoaXMubG9hZGluZz0hMSx0aGlzLl9jYW5jZWxlZD0hMH19ZGVzdHJveSgpe3RoaXMuX2Rlc3Ryb3llZD0hMCx0aGlzLmNhbmNlbCgpfX19XSl9KSk7IiwiaW1wb3J0IEZsdkxpdmVQbGF5ZXIgZnJvbSAneGdwbGF5ZXItZmx2LWxpdmUnXG5pbXBvcnQgRmx2Vm9kUGxheWVyIGZyb20gJ3hncGxheWVyLWZsdi12b2QnXG5cbmNsYXNzIEZsdlBsYXllcntcbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIGlmIChjb25maWcuaXNMaXZlKSB7XG4gICAgICByZXR1cm4gbmV3IEZsdkxpdmVQbGF5ZXIoY29uZmlnKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IEZsdlZvZFBsYXllcihjb25maWcpXG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRmx2UGxheWVyXG4iLCIoZnVuY3Rpb24oKSB7IG1vZHVsZS5leHBvcnRzID0gd2luZG93W1wiUGxheWVyXCJdOyB9KCkpOyJdLCJzb3VyY2VSb290IjoiIn0=