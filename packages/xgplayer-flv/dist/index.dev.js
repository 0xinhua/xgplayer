!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("xgplayer")):"function"==typeof define&&define.amd?define(["xgplayer"],t):"object"==typeof exports?exports["xgplayer-flv"]=t(require("xgplayer")):e["xgplayer-flv"]=t(e.xgplayer)}(window,(function(e){return function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../xgplayer-buffer/index.js":
/*!***********************************!*\
  !*** ../xgplayer-buffer/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Track:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:i(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").PreSource}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
  !*** ../xgplayer-buffer/src/buffer.js ***!
  \****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let s=this.array[0].slice(this.offset,this.offset+e);t.set(s,i),this.offset+=e,this.length-=e,e=0;break}{let s=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=s,this.length-=s,e-=s}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,s=this.offset+e;for(;s<this.offset+t+e;)s<this.array[0].length?i=256*i+this.array[0][s]:this.array[1]&&(i=256*i+this.array[1][s-this.array[0].length]),s++;return i}};t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new s,this.sources[e]}clear(){this.sources={}}}},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/track.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=s;t.AudioTrack=class extends s{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}};t.VideoTrack=class extends s{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-remux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-remux/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Mp4Remuxer:i(/*! ./src/mp4 */"../xgplayer-remux/src/mp4/index.js").default}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");class r{static size(e){return s.Buffer.writeUint32(e)}static initBox(e,t,...i){const n=new s.Buffer;return n.write(r.size(e),r.type(t),...i),n.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let i,s=8,n=r.mvhd(t.duration,t.timescale);i="video"===e?r.videoTrak(t):r.audioTrak(t);let a=r.mvex(t.duration,t.timescale||1e3,t.id);return[n,i,a].forEach(e=>{s+=e.byteLength}),r.initBox(s,"moov",n,i,a)}static mvhd(e,t=1e3){let i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),s=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static audioTrak(e){let t=8,i=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),s=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static tkhd(e){let t=e.id,i=e.duration,s=e.width,n=e.height,a=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>>8&255,255&s,0,0,n>>>8&255,255&n,0,0]);return r.initBox(8+a.byteLength,"tkhd",a)}static edts(e){let t=new s.Buffer,i=e.duration,n=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,n>>24&255,n>>16&255,n>>8&255,255&n,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=r.mdhd(e.timescale,e.duration),s=r.hdlr(e.type),n=r.minf(e);return[i,s,n].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",i,s,n)}static mdhd(e=1e3,t){let i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+i.byteLength,"mdhd",r.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?r.vmhd():r.smhd(),s=r.dinf(),n=r.stbl(e);return[i,s,n].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",i,s,n)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new s.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=r.stsd(e),s=r.stts(),n=r.stsc(),a=r.stsz(),o=r.stco();return[i,s,n,a,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",i,s,n,a,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=r.esds(e.config);return r.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(e=[43,146,8,0]){const t=e.length;let i=new s.Buffer,n=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(r.size(8+n.byteLength),r.type("esds"),n),i.buffer}static avc1(e){let t=new s.Buffer,i=e.width,n=e.height,a=e.parRatio.height,o=e.parRatio.width,u=e.avcc,l=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,n>>8&255,255&n,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),d=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),c=new Uint8Array([a>>24,a>>16&255,a>>8&255,255&a,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+l.byteLength+u.byteLength+d.byteLength),r.type("avc1"),l,r.size(8+u.byteLength),r.type("avcC"),u,r.size(20),r.type("btrt"),d,r.size(16),r.type("pasp"),c),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e,t=1e3,i){let n=new s.Buffer,a=s.Buffer.writeUint32(e);return n.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),a,r.trex(i)),n.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=r.mfhd(),s=r.traf(e);return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",i,s)}static mfhd(){let e=s.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,i=r.tfhd(e.id),s=r.tfdt(e.time),n=r.sdtp(e),a=r.trun(e,n.byteLength);return[i,s,a,n].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",i,s,a,n)}static tfhd(e){let t=s.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),s.Buffer.writeUint32(e))}static trun(e,t){let i=new s.Buffer,n=s.Buffer.writeUint32(e.samples.length),a=s.Buffer.writeUint32(92+16*e.samples.length+t);return i.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),n,a),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new s.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,s=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([s]))}),t.buffer}static mdat(e){let t=new s.Buffer,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(r.size(i),r.type("mdat"));let n=new Uint8Array(i),a=0;return n.set(t.buffer,a),a+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{n.set(e,a),a+=e.byteLength})}),n}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),n=i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"),a=(s=n)&&s.__esModule?s:{default:s};const o=r.EVENTS.DEMUX_EVENTS,u=r.EVENTS.REMUX_EVENTS;class l{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e}init(){this.on(o.DEMUX_COMPLETE,this.remux.bind(this)),this.on(o.METADATA_PARSED,this.onMetaDataReady.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t,i,s=new r.Buffer,n=a.default.ftyp();if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");i=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");i=e}t=a.default.moov({type:e,meta:i.meta}),s.write(n,t);let o=this._context.getInstance("PRE_SOURCE_BUFFER"),l=o.getSource(e);l||(l=o.createSource(e)),l.mimetype=i.meta.codec,l.init=s,this.emit(u.INIT_SEGMENT,e)}calcDtsBase(e,t){let i=1/0,s=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(s=t.samples[0].dts),this._dtsBase=Math.min(i,s),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let i,{samples:s}=t,n=-1,o=-1,l=-1,d=-1;const c=[],f={samples:[]},h=new r.MediaSegment;for(;s.length;){const e=s.shift(),{isKeyframe:t}=e;let a=e.dts-this._dtsBase;const o=e.cts;if(void 0===i)if(this._videoNextDts)i=a-this._videoNextDts>=1e3?0:a-this._videoNextDts;else if(this._videoSegmentList.isEmpty())i=0;else{const e=this._videoSegmentList.getLastSegmentBefore(a);if(e){let t;const{lastDts:s,gap:r}=e;i=a-(s+(t=a-(s+r)>3?a-(s+r):0))}else i=0}const u=a,d=(a-=i)+o;-1===n&&(n=a,l=d);let p={buffer:[],size:0};f.samples.push(p),p.buffer.push(e.data),p.size+=e.data.byteLength;let y=0;if(s.length>=1){y=s[0].dts-this._dtsBase-i-a}else y=c.length>=1?c[c.length-1].duration:this.videoMeta.refSampleDuration;if(t){const t=new r.MediaSample({dts:a,pts:d,duration:y,originDts:e.dts,isRAP:!0});h.addRAP(t)}c.push({dts:a,cts:o,pts:d,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:y,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:u})}const p=c[0],y=c[c.length-1];o=y.dts+y.duration,d=y.pts+y.duration,this._videoNextDts=o,h.startDts=n,h.endDts=o,h.startPts=l,h.endPts=d,h.originStartDts=p.originDts,h.originEndDts=y.originDts+y.duration,h.gap=i;const m=new r.MediaSample({dts:p.dts,pts:p.pts,duration:p.duration,isKeyframe:p.isKeyframe,originDts:p.originDts}),g=new r.MediaSample({dts:y.dts,pts:y.pts,duration:y.duration,isKeyframe:y.isKeyframe,originDts:y.originDts});h.firstSample=m,h.lastSample=g;let v=new r.Buffer;const _=a.default.moof({id:t.meta.id,time:n,samples:c}),b=a.default.mdat(f);v.write(_,b),t.samples=[],t.length=0;let x=this._context.getInstance("PRE_SOURCE_BUFFER"),E=x.getSource("video");E||(E=x.createSource("video")),E.data.push(v),this.emit(u.MEDIA_SEGMENT,"video")}_remuxAudio(e){const{samples:t}=e;let i,s,n=-1,o=-1,l=[];const d={samples:[]};if(!t||!t.length)return;let c=!1;for(;t.length;){let e=t.shift();const{data:r}=e;let a=e.dts-this._dtsBase,o=!1;if(void 0===i)if(this._audioNextDts)i=a-this._audioNextDts>=1e3?0:a-this._audioNextDts;else if(this._audioSegmentList.isEmpty())i=0;else{const e=this._audioSegmentList.getLastSegmentBefore(a);if(e){let t;const{lastDts:s,gap:r}=e;i=a-(s+(t=a-(s+r)>3?a-(s+r):0))}else o=this._fillSilenceFrame&&!this._videoSegmentList.isEmpty(),i=0}const u=a;if(a-=i,o){const e=this._videoSegmentList.getLastSampleBefore(u);e&&e.startDts<a?(s=a-e.startDts,a=e.startDts):o=!1}if(c||(n=a,c=!0),o){t.unshift(e);const i=this.initSilentAudio(a,s);l.push(i);let r={buffer:[],size:0};r.buffer.push({data:i.unit}),r.size+=i.unit.byteLength,d.samples.push(r);continue}let f=0;if(t.length>=1){f=t[0].dts-this._dtsBase-i-a}else f=l.length>=1?l[l.length-1].duration:this.audioMeta.refSampleDuration;const h={dts:a,pts:a,cts:0,size:r.byteLength,duration:f,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:u};let p={buffer:[],size:0};p.buffer.push(r),p.size+=r.byteLength,d.samples.push(p),l.push(h)}const f=l[l.length-1];o=f.dts+f.duration,this._audioNextDts=o;const h=new r.MediaSegment;h.startDts=n,h.endDts=o,h.startPts=n,h.endPts=o,h.originStartDts=l[0].originDts,h.originEndDts=f.originDts+f.duration,h.gap=i,h.firstSample=new r.MediaSample({dts:l[0].dts,pts:l[0].pts,duration:l[0].duration,originDts:l[0].originDts}),h.lastSample=new r.MediaSample({dts:f.dts,pts:f.pts,duration:f.duration,originDts:f.originDts}),e.samples=l;const p=new r.Buffer,y=a.default.moof({id:e.meta.id,time:n,samples:l}),m=a.default.mdat(d);p.write(y,m),e.samples=[],e.length=0;let g=this._context.getInstance("PRE_SOURCE_BUFFER"),v=g.getSource("audio");v||(v=g.createSource("audio")),v.data.push(p),this.emit(u.MEDIA_SEGMENT,"audio",p)}initSilentAudio(e,t){const i=l.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=l},"../xgplayer-utils/index.js":
/*!**********************************!*\
  !*** ../xgplayer-utils/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Context:i(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:i(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:i(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:i(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:i(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:i(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,MediaInfo:i(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:i(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:i(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:i(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:i(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:i(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:i(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,s=Array(i>1?i-1:0),r=1;r<i;r++)s[r-1]=arguments[r];var n=!0,a=!1,o=void 0;try{for(var u,l=s[Symbol.iterator]();!(n=(u=l.next()).done);n=!0){var d=u.value;t+=d.length}}catch(e){a=!0,o=e}finally{try{!n&&l.return&&l.return()}finally{if(a)throw o}}var c=new e(t),f=0,h=!0,p=!1,y=void 0;try{for(var m,g=s[Symbol.iterator]();!(h=(m=g.next()).done);h=!0){var v=m.value;c.set(v,f),f+=v.length}}catch(e){p=!0,y=e}finally{try{!h&&g.return&&g.return()}finally{if(p)throw y}}return c}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";var s,r=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"),n=(s=r)&&s.__esModule?s:{default:s};e.exports=n.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},n={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},a=Object.assign({},s,r,n),o=[],u=[];for(let e in a)a.hasOwnProperty(e)&&o.push(a[e]);for(let e in a)a.hasOwnProperty(e)&&u.push(a[e]);t.default={ALLEVENTS:a,REMUX_EVENTS:n,DEMUX_EVENTS:r,LOADER_EVENTS:s,FlvAllowedEvents:o,HlsAllowedEvents:u}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/context.js ***!
  \****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"),n=(s=r)&&s.__esModule?s:{default:s},a=i(/*! events */"./node_modules/events/events.js");t.default=class{constructor(e=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new n.default,this.allowedEvents=e,this._hooks={}}getInstance(e){if(this._instanceMap[e])return this._instanceMap[e];throw new Error(`${e}实例尚未初始化`)}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,s=this._isMessageNameValid.bind(this),r=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.TAG=e,this._context=r}on(e,t){return s(e),this.listeners[e]?this.listeners[e].push(t):this.listeners[e]=[t],i.on(e,t)}before(e,t){s(e),r._hooks[e]?r._hooks[e].push(t):r._hooks[e]=[t]}once(e,t){return s(e),i.once(e,t)}emit(e,...t){s(e);const n=r._hooks[e];if(n)for(let e=0,t=n.length;e<t;e++){(0,n[e])()}return i.emit(e,...t)}off(e,t){return s(e),i.off(e,t)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let t in this.listeners)if(e(t)){const e=this.listeners[t]||[];for(let s=0;s<e.length;s++){const r=e[s];i.off(t,r)}}}destroy(){this.removeListeners(),delete r._instanceMap[e],super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=null,this._clsMap=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isle.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=s},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,s=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),n=/(?:iPad|PlayBook)/.test(e)||s&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),a=/(?:iPhone)/.test(e)&&!n;return{isTablet:n,isPhone:a,isAndroid:s,isPc:!a&&!s&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:r}},get isLe(){return s}};t.default=r},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/utf8.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{static decode(e){const t=[],i=e;let r=0;const n=e.length;for(;r<n;)if(i[r]<128)t.push(String.fromCharCode(i[r])),++r;else{if(i[r]<192);else if(i[r]<224){if(s._checkContinuation(i,r,1)){const e=(31&i[r])<<6|63&i[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(i[r]<240){if(s._checkContinuation(i,r,2)){const e=(15&i[r])<<12|(63&i[r+1])<<6|63&i[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(i[r]<248&&s._checkContinuation(i,r,3)){let e=(7&i[r])<<18|(63&i[r+1])<<12|(63&i[r+2])<<6|63&i[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,i){let s=e;if(t+i<s.length){for(;i--;)if(128!=(192&s[++t]))return!1;return!0}return!1}}t.default=s},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/media-info.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return s(e)}static isVideoReady(e){return!e.hasVideo||s(e.video)}static isAudioReady(e){return!e.hasAudio||s(e.video)}}t.default=r},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=s},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,s=0,r=0,n=i,a=0;if(e<t[0].originDts)return a=-1;for(;r<=n;){if((s=r+Math.floor((n-r)/2))===i||e>t[s].lastSample.originDts&&e<t[s+1].originDts){a=s;break}t[s].originDts<e?r=s+1:n=s-1}return a}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,s=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?s=i+1:t.length>0&&(s=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=s,this._list.splice(s,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/track-meta.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}};t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}}},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/track-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=s;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={}}init(){let e=this;this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",t=>{e.addSourceBuffers()}),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",()=>{this.emit("TIME_UPDATE",this.container)})}addSourceBuffers(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e.sources.audio&&e.sources.video){if(Object.keys(this.sourceBuffers).length>=2)return;for(let t=0,i=Object.keys(e.sources).length;t<i;t++){let i=e.sources[Object.keys(e.sources)[t]],s="video"===Object.keys(e.sources)[t]?"video/mp4;codecs="+i.mimetype:"audio/mp4;codecs="+i.mimetype,r=this.mediaSource.addSourceBuffer(s);this.sourceBuffers[Object.keys(e.sources)[t]]=r,r.addEventListener("updateend",()=>{this.doAppend()}),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],s=this.sourceBuffers[i];if(!s.updating){let t=e.sources[i];if(t&&!t.inited)s.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&s.appendBuffer(e.buffer.buffer)}}}}}},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/buffer.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),n=(s=r)&&s.__esModule?s:{default:s};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,n.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/stream.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),i=e%4;for(let e=0;e<t;e++)s.readByte(this.dataview,4);i>0&&s.readByte(this.dataview,i)}static readByte(e,t,i){let s;switch(t){case 1:s=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:s=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");s=e.getUint8(e.position)<<16,s|=e.getUint8(e.position+1)<<8,s|=e.getUint8(e.position+2);break;case 4:s=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");s=e.getUint32(e.position)<<32,s|=e.getUint32(e.position+4);break;default:s=""}return e.position+=t,s}readUint8(){return s.readByte(this.dataview,1)}readUint16(){return s.readByte(this.dataview,2)}readUint24(){return s.readByte(this.dataview,3)}readUint32(){return s.readByte(this.dataview,4)}readUint64(){return s.readByte(this.dataview,8)}readInt8(){return s.readByte(this.dataview,1,!0)}readInt16(){return s.readByte(this.dataview,2,!0)}readInt32(){return s.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=s},"./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";var s,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n="object"===("undefined"==typeof Reflect?"undefined":r(Reflect))?Reflect:null,a=n&&"function"==typeof n.apply?n.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};s=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function u(){u.init.call(this)}e.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var l=10;function d(e){return void 0===e._maxListeners?u.defaultMaxListeners:e._maxListeners}function c(e,t,i,s){var n,a,o,u;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===i?"undefined":r(i)));if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),o=a[t]),void 0===o)o=a[t]=i,++e._eventsCount;else if("function"==typeof o?o=a[t]=s?[i,o]:[o,i]:s?o.unshift(i):o.push(i),(n=d(e))>0&&o.length>n&&!o.warned){o.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=o.length,u=l,console&&console.warn&&console.warn(u)}return e}function f(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function h(e,t,i){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=f.bind(s);return r.listener=i,s.wrapFn=r,r}function p(e,t,i){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):m(r,r.length)}function y(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function m(e,t){for(var i=new Array(t),s=0;s<t;++s)i[s]=e[s];return i}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},u.prototype.getMaxListeners=function(){return d(this)},u.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var s="error"===e,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var u=r[e];if(void 0===u)return!1;if("function"==typeof u)a(u,this,t);else{var l=u.length,d=m(u,l);for(i=0;i<l;++i)a(d[i],this,t)}return!0},u.prototype.addListener=function(e,t){return c(this,e,t,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(e,t){return c(this,e,t,!0)},u.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":r(t)));return this.on(e,h(this,e,t)),this},u.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":r(t)));return this.prependListener(e,h(this,e,t)),this},u.prototype.removeListener=function(e,t){var i,s,n,a,o;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":r(t)));if(void 0===(s=this._events))return this;if(void 0===(i=s[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(n=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){o=i[a].listener,n=a;break}if(n<0)return this;0===n?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,n),1===i.length&&(s[e]=i[0]),void 0!==s.removeListener&&this.emit("removeListener",e,o||t)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){var t,i,s;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,n=Object.keys(i);for(s=0;s<n.length;++s)"removeListener"!==(r=n[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},u.prototype.listeners=function(e){return p(this,e,!0)},u.prototype.rawListeners=function(e){return p(this,e,!1)},u.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):y.call(e,t)},u.prototype.listenerCount=y,u.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},"./src/Flv.js":
/*!********************!*\
  !*** ./src/Flv.js ***!
  \********************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,i,s){return i&&e(t.prototype,i),s&&e(t,s),t}}(),r=l(i(/*! ./demux */"./src/demux/index.js")),n=l(i(/*! xgplayer-remux */"../xgplayer-remux/index.js")),a=i(!function(){var e=new Error("Cannot find module 'xgplayer-loader'");throw e.code="MODULE_NOT_FOUND",e}()),o=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),u=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");function l(e){return e&&e.__esModule?e:{default:e}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var c=u.EVENTS.REMUX_EVENTS,f=u.EVENTS.DEMUX_EVENTS,h="FLVController",p=function(){function e(){d(this,e)}return s(e,[{key:"warn",value:function(){}}]),e}(),y=function(){function e(t){d(this,e),this.TAG=h,this._player=t,this.state={initSegmentArrived:!1,range:{start:0,end:""}}}return s(e,[{key:"init",value:function(){this._context.registry("FLV_DEMUXER",r.default),this._context.registry("FETCH_LOADER",a.FetchLoader),this._context.registry("LOADER_BUFFER",o.XgBuffer),this._context.registry("TRACKS",o.Tracks),this._context.registry("MP4_REMUXER",n.default),this._context.registry("PRE_SOURCE_BUFFER",o.Presource),this._context.registry("LOGGER",p),this.mse=this._context.registry("MSE",u.Mse)({container:this._player}),this.initListeners()}},{key:"initListeners",value:function(){this.on(c.MEDIA_SEGMENT,this.handleMediaSegment.bind(this)),this.on(f.MEDIA_INFO,this.handleMediaInfo.bind(this)),this.on(c.INIT_SEGMENT,this.handleAppendInitSegment.bind(this))}},{key:"handleMediaInfo",value:function(){this._context.mediaInfo||this.emit(f.DEMUX_ERROR,new Error("failed to get mediainfo"));var e=this._context.getInstance("LOADER_BUFFER");this.isSeekable&&(this.state.range={start:0,end:e.historyLen-1})}},{key:"handleMediaSegment",value:function(){this.mse.doAppend()}},{key:"handleAppendInitSegment",value:function(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}},{key:"seek",value:function(e){if(!this._player.isLive&&this.isSeekable)if(this.state.initSegmentArrived){var t=this._player.config.preloadTime,i=void 0===t?15:t,s=this.getRange(e,i);this.state.range=s,this.loadData()}else this.loadMeta()}},{key:"loadData",value:function(){var e=this.state,t=e.start,i=e.end;this._context.getInstance("FETCH_LOADER").load(this._player.config.url,{Range:"bytes="+t+"-"+i})}},{key:"loadMeta",value:function(){this._context.getInstance("FETCH_LOADER").load(this._player.config.url)}},{key:"getRange",value:function(e,t){var i=this._context.onMetaData.keyframes,s=this._context.getInstance("TRACKS").videoTrack.meta.timescale,r=function(e){for(var t=0,s=i.times.length;t<s;t++){var r=i.times[t],n=t+1<s?i.times[t+1]:Number.MAX_SAFE_INTEGER;if(r<=e&&e<=n)return t}return""};return{start:r(e*s),end:r((e+t)*s)}}},{key:"destroy",value:function(){}},{key:"isSeekable",get:function(){return!this._context||!this._context.mediaInfo.isComplete()||null!==this._context.mediaInfo.keyframes&&void 0!==this._context.mediaInfo.keyframes}}]),e}();t.default=y},"./src/demux/amf-parser.js":
/*!*********************************!*\
  !*** ./src/demux/amf-parser.js ***!
  \*********************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,i,s){return i&&e(t.prototype,i),s&&e(t,s),t}}(),r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");var n=0,a=1,o=2,u=3,l=8,d=9,c=10,f=11,h=12,p=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.offset=0,this.readOffset=this.offset}return s(e,[{key:"resolve",value:function(e,t){if(t<3)throw new Error("not enough data for metainfo");var i={},s=this.parseValue(e),r=this.parseValue(e,t-s.bodySize);return i[s.data]=r.data,this.resetStatus(),i}},{key:"resetStatus",value:function(){this.offset=0,this.readOffset=this.offset}},{key:"parseString",value:function(e){var t=new DataView(e,this.readOffset).getUint16(0,!r.isLe),i="";i=t>0?r.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";var s=t+2;return this.readOffset+=s,{data:i,bodySize:t+2}}},{key:"parseDate",value:function(e,t){var i=new DataView(e,this.readOffset,t),s=i.getFloat64(0,!r.isLe);return s+=60*i.getInt16(8,!r.isLe)*1e3,this.readOffset+=10,{data:new Date(s),bodySize:10}}},{key:"parseObject",value:function(e,t){var i=this.parseString(e,t),s=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:s.data},bodySize:i.bodySize+s.bodySize,isObjEnd:s.isObjEnd}}},{key:"parseLongString",value:function(e){var t=new DataView(e,this.readOffset).getUint32(0,!r.isLe),i="";return i=t>0?r.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}},{key:"parseValue",value:function(e,t){var i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;var s=n,p=a,y=o,m=u,g=l,v=d,_=c,b=f,x=h,E=new DataView(i,this.readOffset,t),w=!1,A=E.getUint8(0),S=1;this.readOffset+=1;var T=null;switch(A){case s:T=E.getFloat64(1,!r.isLe),this.readOffset+=8,S+=8;break;case p:T=!!E.getUint8(1),this.readOffset+=1,S+=1;break;case y:var k=this.parseString(i);T=k.data,S+=k.bodySize;break;case m:T={};var D=0;for(16777215&E.getUint32(t-4,!r.isLe)&&(D=3);S<t-4;){var O=this.parseObject(i,t-S-D);if(O.isObjectEnd)break;T[O.data.name]=O.data.value,S+=O.bodySize}if(S<=t-3)9===(16777215&E.getUint32(S-1,!r.isLe))&&(this.readOffset+=3,S+=3);break;case g:T={},S+=4,this.readOffset+=4;var R=0;for(9==(16777215&E.getUint32(t-4,!r.isLe))&&(R=3);S<t-8;){var M=this.parseObject(i,t-S-R);if(M.isObjectEnd)break;T[M.data.name]=M.data.value,S+=M.bodySize}if(S<=t-3)9===(16777215&E.getUint32(S-1,!r.isLe))&&(S+=3,this.readOffset+=3);break;case v:T=null,w=!0;break;case _:T=[];var L=E.getUint32(1,!r.isLe);S+=4,this.readOffset+=4;for(var j=0;j<L;j++){var B=this.parseValue(i,t-S);T.push(B.data),S+=B.bodySize}break;case b:var I=this.parseDate(i,t-1);T=I.data,S+=I.bodySize;break;case x:var U=this.parseLongString(i,t-1);T=U.data,S+=U.bodySize;break;default:S=t}return{data:T,bodySize:S,isObjEnd:w}}}]),e}();t.default=p},"./src/demux/index.js":
/*!****************************!*\
  !*** ./src/demux/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=function(){function e(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,i,s){return i&&e(t.prototype,i),s&&e(t,s),t}}(),n=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(!function(){var e=new Error("Cannot find module 'xgplayer-codec'");throw e.code="MODULE_NOT_FOUND",e}()),o=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),u=i(/*! ./amf-parser */"./src/demux/amf-parser.js"),l=(s=u)&&s.__esModule?s:{default:s};var d=n.EVENTS.LOADER_EVENTS,c=n.EVENTS.DEMUX_EVENTS,f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}return r(e,[{key:"init",value:function(){this.on(d.LOADER_DATALOADED,this.handleDataLoaded.bind(this))}},{key:"handleDataLoaded",value:function(){this.parseFlvStream()}},{key:"parseFlvStream",value:function(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;this._parseFlvTag()&&this.parseFlvStream()}else{if(this.loaderBuffer.length<13)return;var e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.parseFlvStream()}}},{key:"parseFlvHeader",value:function(t){if(e.isFlvFile(t)){this._firstFragmentLoaded=!0;var i=e.getPlayType(t[4]);i.hasVideo&&this.initVideoTrack(),i.hasAudio&&this.initAudioTrack()}else this.emit(c.DEMUX_ERROR,new Error("invalid flv file")),this.parseFlvStream();this.handleDataLoaded()}},{key:"initVideoTrack",value:function(){this._trackNum++;var e=new o.VideoTrack;e.meta=new n.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}},{key:"initAudioTrack",value:function(){this._trackNum++;var e=new o.AudioTrack;e.meta=new n.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}},{key:"_parseFlvTag",value:function(){if(this.loaderBuffer.length<11)return null;var e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}},{key:"_parseFlvTagHeader",value:function(){var e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.logger.warn(this.TAG,"tagType "+t.tagType),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);var s=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);var r=this.loaderBuffer.shift(1)[0];return r>0&&(s+=16777216*r),t.dts=s,this.loaderBuffer.shift(3),t}},{key:"_processChunk",value:function(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}},{key:"_parseScriptData",value:function(e){var t=this.tracks.audioTrack,i=this.tracks.videoTrack,s=this.loaderBuffer.shift(e.datasize),r=(new l.default).resolve(s,s.length),n=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=n.duration,this._context.mediaInfo.hasVideo=n.hasVideo,this._context.mediaInfo.hsaAudio=n.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(c.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){var a=t.meta;switch(n.audiosamplerate&&(a.sampleRate=n.audiosamplerate),n.audiochannels&&(a.channelCount=n.audiochannels),n.audiosamplerate){case 44100:a.sampleRateIndex=4;break;case 22050:a.sampleRateIndex=7;break;case 11025:a.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){var o=i.meta;if("number"==typeof n.framerate){var u=Math.floor(1e3*n.framerate);if(u>0){var d=u/1e3;o.frameRate||(o.frameRate={}),o.frameRate.fixed=!0,o.frameRate.fps=d,o.frameRate.fps_num=u,o.frameRate.fps_den=1e3}}}}},{key:"_aacSequenceHeaderParser",value:function(e){var t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec="mp4a.40."+t.objectType;var i=window.navigator.userAgent.toLowerCase(),s=void 0,r=void 0,n=t.sampleRateIndex;return-1!==i.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,r=new Array(4),s=n-3):(t.objectType=2,r=new Array(2),s=n):-1!==i.indexOf("android")?(t.objectType=2,r=new Array(2),s=n):(t.objectType=5,s=t.sampleRateIndex,r=new Array(4),t.sampleRateIndex>=6?s=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,r=new Array(2),s=t.sampleRateIndex)),r[0]=t.objectType<<3,r[0]|=(15&t.sampleRateIndex)>>>1,r[1]=(15&t.sampleRateIndex)<<7,r[1]|=(15&t.channelCount)<<3,5===t.objectType&&(r[1]|=(15&s)>>>1,r[2]=(1&s)<<7,r[2]|=8,r[3]=0),t.config=r,t}},{key:"_parseAACData",value:function(e){var t=this.tracks.audioTrack;if(t){var i=t.meta;i||(i=new n.AudioTrackMeta);var s=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);var r=(240&s)>>>4;t.format=r,10!==r&&this.emit(c.DEMUX_ERROR,new Error("invalid audio format: "+r)),10!==r||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(s),i.sampleRateIndex=(12&s)>>>2,i.frameLenth=(2&s)>>>1,i.channelCount=1&s,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));var a=i.audioSampleRate,o=i.sampleRateIndex,u=i.refSampleDuration;delete e.tagType;var l=this._datasizeValidator(e.datasize);if(0===e.data[0]){var d=this._aacSequenceHeaderParser(e.data);a=d.audiosamplerate||i.audioSampleRate,o=d.sampleRateIndex||i.sampleRateIndex,u=Math.floor(1024/a*i.timescale),i.channelCount=d.channelCount,i.sampleRate=a,i.sampleRateIndex=o,i.refSampleDuration=u,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=d.config;var f=this._context.mediaInfo.audio;f.codec=d.codec,f.channelCount=d.channelCount,f.sampleRate=a,f.sampleRateIndex=d.audioSampleRateIndex,!this._hasScript||this._hasAudioSequence||this.tracks.videoTrack&&!this._hasVideoSequence?this._hasScript&&this._hasAudioSequence&&this.emit(c.AUDIO_METADATA_CHANGE):this.emit(c.METADATA_PARSED,"audio"),this._hasAudioSequence=!0}else e.data=e.data.slice(1,e.data.length),t.samples.push(e),this.emit(c.DEMUX_COMPLETE);l||this.logger.warn(this.TAG,"TAG length error at "+e.datasize)}}},{key:"_parseHevcData",value:function(e){var t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;var i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){var s=this.loaderBuffer.shift(e.datasize-5);if(e.data=s,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize);var r={},n=0;for(r.cts=e.cts,r.dts=e.dts;e.data.length>n;){var a=e.data.slice(Number.parseInt(n),4+n);r.size=a[3],r.size+=256*a[2],r.size+=256*a[1]*256,r.size+=256*a[0]*256*256,n+=4,r.data=e.data.slice(Number.parseInt(n),r.size+n),n+=r.size,this.tracks.videoTrack.samples.push(r),this.emit(c.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(c.METADATA_PARSED,"video"):this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize))}else if(7===i){var o=this.loaderBuffer.shift(e.datasize-5);if(0===o[4]&&0===o[5]&&0===o[6]&&1===o[7]){for(var u=0,l=0;l<4;l++)u=256*u+o[l];u-=4,(o=o.slice(4,o.length))[3]=u%256,u=(u-o[3])/256,o[2]=u%256,u=(u-o[2])/256,o[1]=u%256,o[0]=(u-o[1])/256}if(e.data=o,0===e.avcPacketType){this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(c.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(c.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0)}else{if(!this._datasizeValidator(e.datasize))return void this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize);this.tracks.videoTrack.samples.push(e),this.emit(c.DEMUX_COMPLETE)}}else this.logger.warn(this.TAG,"video codeid is "+i),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize),this.tracks.videoTrack.samples.push(e),this.emit(c.DEMUX_COMPLETE);delete e.tagType}},{key:"_avcSequenceHeaderParser",value:function(e){var t=this.tracks.videoTrack;if(t){var i=0;t.meta||(t.meta=new n.VideoTrackMeta);var s=t.meta;s.configurationVersion=e[0],s.avcProfileIndication=e[1],s.profileCompatibility=e[2],s.avcLevelIndication=e[3]/10,s.nalUnitLength=1+(3&e[4]);var r=31&e[5];i=6;for(var o={},u=0;u<r;u++){var l=255*e[i]+e[i+1];i+=2;for(var d=new Uint8Array(l),c=0;c<l;c++)d[c]=e[i+c];for(var f="avc1.",h=1;h<4;h++){var p=d[h].toString(16);p.length<2&&(p="0"+p),f+=p}s.codec=f,i+=l,this.tracks.videoTrack.meta.sps=d,o=a.SpsParser.parseSPS(d)}var y=e[i];i++;for(var m=0;m<y;m++){var g=255*e[i]+e[i+1];i+=2;for(var v=new Uint8Array(g),_=0;_<g;_++)v[_]=e[i+_];i+=g,this.tracks.videoTrack.meta.pps=v}Object.assign(s,a.SpsParser.toVideoMeta(o));var b=this._context.mediaInfo.video;b.codec=s.codec,b.profile=s.profile,b.level=s.level,b.chromaFormat=s.chromaFormat,b.frameRate=s.frameRate,b.parRatio=s.parRatio,b.width=b.width===s.presentWidth?b.width:s.presentWidth,b.height=b.height===s.presentHeight?b.width:s.presentHeight,s.duration=this._context.mediaInfo.duration*s.timescale,s.avcc=new Uint8Array(e.length),s.avcc.set(e),t.meta=s}}},{key:"_switchAudioSampleRate",value:function(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}},{key:"_switchAudioSamplingFrequency",value:function(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}},{key:"_switchAudioChannel",value:function(e){return[1,2][1&e]}},{key:"_datasizeValidator",value:function(e){var t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}},{key:"loaderBuffer",get:function(){if(this._context.getInstance("LOADER_BUFFER"))return this._context.getInstance("LOADER_BUFFER");this.emit(c.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}},{key:"tracks",get:function(){return this._context.getInstance("TRACKS")}},{key:"logger",get:function(){return this._context.getInstance("LOGGER")}}],[{key:"isFlvFile",value:function(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}},{key:"getPlayType",value:function(e){var t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}}]),e}();t.default=f},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,i){"use strict";var s=a(i(/*! xgplayer */"xgplayer")),r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),n=a(i(/*! ./Flv */"./src/Flv.js"));function a(e){return e&&e.__esModule?e:{default:e}}var o=r.EVENTS.FlvAllowedEvents;s.default.install("flvplayer",(function(){var e=this,t=s.default.util,i=new r.Context(o),a=e.config.preloadTime||15,u=e.start,l=void 0;e.start=function(){var s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.config.url;s&&(l=i.registry("FLV_CONTROLLER",n.default)(e),i.init(),l.once(r.EVENTS.INIT_SEGMENT,(function(){if(e.config.isLive){t.addClass(e.root,"xgplayer-is-live");var i=t.createDom("xg-live","正在直播",{},"xgplayer-live");e.controls.appendChild(i);var s=setInterval((function(){if(e.paused&&e.buffered.length)for(var t=0,i=e.buffered.length;t<i;t++)if(e.buffered.start(t)>e.currentTime){e.currentTime=e.buffered.start(t),clearInterval(s);break}}),200)}else clearTimeout(l.timer)})),u.call(e,l.mse.url),d())};var d=function(){Object.defineProperty(e,"src",{get:function(){return e.currentSrc},set:function(t){e.config.url=t,e.paused?e.start(t):(e.pause(),e.once("pause",(function(){e.start(t)})),e.once("canplay",(function(){e.play()}))),e.once("canplay",(function(){e.currentTime=0}))},configurable:!0})},c=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.currentTime,i=e.getBufferedRange();t<i[1]?e.config.isLive||i[1]-t<a&&l.seek(i[1]+1):l.seek(t)};e.on("timeupdate",(function(){c(e.currentTime+1),function(e,t){if(!e.config.isLive&&e.duration-e.currentTime<2){var i=e.getBufferedRange();e.currentTime-i[1]<.1&&t.mse.endOfStream()}}(e,l)})),e.on("seeking",(function(){c()})),e.on("waiting",(function(){if("live"===l.type)for(var t=e.buffered,i=t.length,s=e.currentTime,r=0;r<i;r++)if(t.start(r)>s){e.currentTime=t.start(r)+.1;break}})),e.once("destroy",(function(){l.destroy()}))}))},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!***************************!*\
  !*** external "xgplayer" ***!
  \***************************/
/*! no static exports found */function(t,i){t.exports=e}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,