!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("xgplayer")):"function"==typeof define&&define.amd?define(["xgplayer"],t):"object"==typeof exports?exports["xgplayer-flv"]=t(require("xgplayer")):e["xgplayer-flv"]=t(e.xgplayer)}(window,(function(e){return function(e){var t={};function i(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(r,s,function(t){return e[t]}.bind(null,s));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../xgplayer-buffer/index.js":
/*!***********************************!*\
  !*** ../xgplayer-buffer/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Track:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:i(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").default}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
  !*** ../xgplayer-buffer/src/buffer.js ***!
  \****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let r=this.array[0].slice(this.offset,this.offset+e);t.set(r,i),this.offset+=e,this.length-=e,e=0;break}{let r=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=r,this.length-=r,e-=r}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,r=this.offset+e;for(;r<this.offset+t+e;)r<this.array[0].length?i=256*i+this.array[0][r]:this.array[1]&&(i=256*i+this.array[1][r-this.array[0].length]),r++;return i}};t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new r,this.sources[e]}clear(){this.sources={}}}},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/track.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=r;t.AudioTrack=class extends r{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}};t.VideoTrack=class extends r{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-codec/index.js":
/*!**********************************!*\
  !*** ../xgplayer-codec/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Nalunit:i(/*! ./src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js").default,SpsParser:i(/*! ./src/h264/nalunit/sps */"../xgplayer-codec/src/h264/nalunit/sps.js").default}},"../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0,!1),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){if(e<=this._currentWordBitsLeft){let t=this._currentWord>>>32-e;return this._currentWord<<=e,this._currentWordBitsLeft-=e,t}let t=this._currentWordBitsLeft?this._currentWord:0;this._currentWordBitsLeft;let i=e-this._currentWordBitsLeft;this._fillCurrentWord();let r=Math.min(i,this._currentWordBitsLeft),s=this._currentWord>>>32-r;return this._currentWord<<=r,this._currentWordBitsLeft-=r,t=t<<r|s}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! ./sps */"../xgplayer-codec/src/h264/nalunit/sps.js"),n=(r=s)&&r.__esModule?r:{default:r};class a{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,i=e.position;return 1===t.getInt32(i)||0===t.getInt16(i)&&1===t.getInt8(i+2)?a.getAnnexbNals(e):a.getAvccNals(e)}static getAnnexbNals(e){let t=[],i=a.getHeaderPositionAnnexB(e),r=i.pos,s=r;for(;r<e.length-4;){let n=e.buffer.slice(r,r+i.headerLength);i.pos===e.position&&e.skip(i.headerLength),s=(i=a.getHeaderPositionAnnexB(e)).pos;let o={header:n,body:new Uint8Array(e.buffer.slice(r+n.byteLength,s))};a.analyseNal(o),t.push(o),e.skip(s-e.position),r=s}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let i=e.dataview.getInt32();if(!(e.length-e.position>=i))break;{let r=e.buffer.slice(e.position,e.position+4);e.skip(4);let s=e.buffer.slice(e.position,e.position+i);e.skip(i);let n={header:r,body:s};a.analyseNal(n),t.push(n)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=n.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,i=0;for(;3!==i&&4!==i&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?i=4:1===e.dataview.getInt8(t+2)?i=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(i=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?i=3:t=e.length)),{pos:t,headerLength:i}}static getAvcc(e,t){let i=new Uint8Array(e.byteLength+t.byteLength+11);i[0]=1,i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=255,i[5]=225;let r=6;return i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),r),r+=2,i.set(e,r),i[r+=e.byteLength]=1,r++,i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),r),r+=2,i.set(t,r),i}}t.default=a},"../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! ./golomb */"../xgplayer-codec/src/h264/nalunit/golomb.js"),n=(r=s)&&r.__esModule?r:{default:r};class a{static _ebsp2rbsp(e){let t=e,i=t.byteLength,r=new Uint8Array(i),s=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(r[s]=t[e],s++);return new Uint8Array(r.buffer,0,s)}static parseSPS(e){let t=a._ebsp2rbsp(e),i=new n.default(t);i.readByte();let r=i.readByte();i.readByte();let s=i.readByte();i.readUEG();let o=a.getProfileString(r),l=a.getLevelString(s),u=1,d=420,c=[0,420,422,444],f=8;if((100===r||110===r||122===r||244===r||44===r||83===r||86===r||118===r||128===r||138===r||144===r)&&(3===(u=i.readUEG())&&i.readBits(1),u<=3&&(d=c[u]),f=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==u?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?a._skipScalingList(i,16):a._skipScalingList(i,64))}i.readUEG();let h=i.readUEG();if(0===h)i.readUEG();else if(1===h){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let p=i.readUEG(),g=i.readUEG(),y=i.readBits(1);0===y&&i.readBits(1),i.readBits(1);let m=0,_=0,v=0,b=0;i.readBool()&&(m=i.readUEG(),_=i.readUEG(),v=i.readUEG(),b=i.readUEG());let E=1,x=1,A=0,w=!0,S=0,T=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],r=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(E=t[e-1],x=r[e-1]):255===e&&(E=i.readByte()<<8|i.readByte(),x=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);w=i.readBool(),A=(S=t)/(T=2*e)}}let R=1;1===E&&1===x||(R=E/x);let L=0,k=0;if(0===u)L=1,k=2-y;else{L=3===u?1:2,k=(1===u?2:1)*(2-y)}let M=16*(p+1),D=16*(g+1)*(2-y);M-=(m+_)*L,D-=(v+b)*k;let B=Math.ceil(M*R);return i.destroy(),i=null,{profile_string:o,level_string:l,bit_depth:f,chroma_format:d,chroma_format_string:a.getChromaFormatString(d),frame_rate:{fixed:w,fps:A,fps_den:T,fps_num:S},par_ratio:{width:E,height:x},codec_size:{width:M,height:D},present_size:{width:B,height:D}}}static _skipScalingList(e,t){let i=8,r=8,s=0;for(let n=0;n<t;n++)0!==r&&(r=(i+(s=e.readSEG())+256)%256),i=0===r?i:r}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},e.frame_rate.fixed&&e.frame_rate.fps_num>0&&e.frame_rate.fps_den>0&&(t.frameRate=e.frame_rate);let i=t.frameRate.fps_den,r=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/r))}}t.default=a},"../xgplayer-loader/index.js":
/*!***********************************!*\
  !*** ../xgplayer-loader/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={FetchLoader:i(/*! ./src/fetch-loader */"../xgplayer-loader/src/fetch-loader.js").default}},"../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader/src/fetch-loader.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js").EVENTS.LOADER_EVENTS,s=0,n=1,a=2;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER"}init(){this.on(r.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let i=this;this.url=e;let r=this.getParams(t);return fetch(this.url,r).then((function(e){return i.status=e.status,i.loading=!0,i._onFetchResponse(e)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);if(!0===e.ok)switch(this.readtype){case a:e.json().then(e=>{i?(i.push(e),t.emit(r.LOADER_COMPLETE,i)):t.emit(r.LOADER_COMPLETE,e)});break;case n:e.text().then(e=>{i?(i.push(e),t.emit(r.LOADER_COMPLETE,i)):t.emit(r.LOADER_COMPLETE,e)});break;case s:default:return this._onReader(e.body.getReader())}}_onReader(e){let t=this._context.getInstance(this.buffer);if(t||this._reader.cancel(),this._reader=e,!1===this.loading)return;let i=this;this._reader&&this._reader.read().then((function(s){return s.done?(i.loading=!1,i.status=0,void i.emit(r.LOADER_COMPLETE,t)):(t.push(s.value),i.emit(r.LOADER_DATALOADED,t),i._onReader(e))})).catch((function(e){console.log(e)}))}getParams(e){let t=Object.assign({},e),i=new Headers,r={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(r.mode="same-origin"),t.withCredentials&&(r.credentials="include"),r}cancel(){this._reader&&(this._reader.cancel(),this._reader=null)}}},"../xgplayer-remux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-remux/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Mp4Remuxer:i(/*! ./src/mp4 */"../xgplayer-remux/src/mp4/index.js").default}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");class s{static size(e){return r.Buffer.writeUint32(e)}static initBox(e,t,...i){const n=new r.Buffer;return n.write(s.size(e),s.type(t),...i),n.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return s.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let i,r=8,n=s.mvhd(t.duration,t.timescale);i="video"===e?s.videoTrak(t):s.audioTrak(t);let a=s.mvex(t.duration,t.timescale||1e3,t.id);return[n,i,a].forEach(e=>{r+=e.byteLength}),s.initBox(r,"moov",n,i,a)}static mvhd(e,t=1e3){let i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return s.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=s.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),r=s.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,r].forEach(e=>{t+=e.byteLength}),s.initBox(t,"trak",i,r)}static audioTrak(e){let t=8,i=s.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),r=s.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,r].forEach(e=>{t+=e.byteLength}),s.initBox(t,"trak",i,r)}static tkhd(e){let t=e.id,i=e.duration,r=e.width,n=e.height,a=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,r>>>8&255,255&r,0,0,n>>>8&255,255&n,0,0]);return s.initBox(8+a.byteLength,"tkhd",a)}static edts(e){let t=new r.Buffer,i=e.duration,n=e.mediaTime;return t.write(s.size(36),s.type("edts")),t.write(s.size(28),s.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,n>>24&255,n>>16&255,n>>8&255,255&n,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=s.mdhd(e.timescale,e.duration),r=s.hdlr(e.type),n=s.minf(e);return[i,r,n].forEach(e=>{t+=e.byteLength}),s.initBox(t,"mdia",i,r,n)}static mdhd(e=1e3,t){let i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return s.initBox(12+i.byteLength,"mdhd",s.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),s.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?s.vmhd():s.smhd(),r=s.dinf(),n=s.stbl(e);return[i,r,n].forEach(e=>{t+=e.byteLength}),s.initBox(t,"minf",i,r,n)}static vmhd(){return s.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return s.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new r.Buffer;return e.write(s.size(36),s.type("dinf"),s.size(28),s.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=s.stsd(e),r=s.stts(),n=s.stsc(),a=s.stsz(),o=s.stco();return[i,r,n,a,o].forEach(e=>{t+=e.byteLength}),s.initBox(t,"stbl",i,r,n,a,o)}static stsd(e){let t;return t="audio"===e.type?s.mp4a(e):s.avc1(e),s.initBox(16+t.byteLength,"stsd",s.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=s.esds(e.config);return s.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(e=[43,146,8,0]){const t=e.length;let i=new r.Buffer,n=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(s.size(8+n.byteLength),s.type("esds"),n),i.buffer}static avc1(e){let t=new r.Buffer,i=e.width,n=e.height,a=e.parRatio.height,o=e.parRatio.width,l=e.avcc,u=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,n>>8&255,255&n,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),d=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),c=new Uint8Array([a>>24,a>>16&255,a>>8&255,255&a,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(s.size(40+u.byteLength+l.byteLength+d.byteLength),s.type("avc1"),u,s.size(8+l.byteLength),s.type("avcC"),l,s.size(20),s.type("btrt"),d,s.size(16),s.type("pasp"),c),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return s.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return s.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return s.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return s.initBox(20,"stsz",e)}static mvex(e,t=1e3,i){let n=new r.Buffer,a=r.Buffer.writeUint32(e);return n.write(s.size(56),s.type("mvex"),s.size(16),s.type("mehd"),s.extension(0,0),a,s.trex(i)),n.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return s.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=s.mfhd(),r=s.traf(e);return[i,r].forEach(e=>{t+=e.byteLength}),s.initBox(t,"moof",i,r)}static mfhd(){let e=r.Buffer.writeUint32(s.sequence);return s.sequence+=1,s.initBox(16,"mfhd",s.extension(0,0),e)}static traf(e){let t=8,i=s.tfhd(e.id),r=s.tfdt(e.time),n=s.sdtp(e),a=s.trun(e,n.byteLength);return[i,r,a,n].forEach(e=>{t+=e.byteLength}),s.initBox(t,"traf",i,r,a,n)}static tfhd(e){let t=r.Buffer.writeUint32(e);return s.initBox(16,"tfhd",s.extension(0,0),t)}static tfdt(e){return s.initBox(16,"tfdt",s.extension(0,0),r.Buffer.writeUint32(e))}static trun(e,t){let i=new r.Buffer,n=r.Buffer.writeUint32(e.samples.length),a=r.Buffer.writeUint32(92+16*e.samples.length+t);return i.write(s.size(20+16*e.samples.length),s.type("trun"),new Uint8Array([0,0,15,1]),n,a),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new r.Buffer;return t.write(s.size(12+e.samples.length),s.type("sdtp"),s.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,r=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([r]))}),t.buffer}static mdat(e){let t=new r.Buffer,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(s.size(i),s.type("mdat"));let n=new Uint8Array(i),a=0;return n.set(t.buffer,a),a+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{n.set(e,a),a+=e.byteLength})}),n}}s.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),s.sequence=1,t.default=s},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),n=i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"),a=(r=n)&&r.__esModule?r:{default:r};const o=s.EVENTS.REMUX_EVENTS;class l{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new s.MediaSegmentList("video"),this._audioSegmentList=new s.MediaSegmentList("audio");const{browser:e}=s.sniffer;this._fillSilenceFrame="ie"===e}init(){this.on(o.REMUX_MEDIA,this.remux.bind(this)),this.on(o.REMUX_METADATA,this.onMetaDataReady.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t,i,r=new s.Buffer,n=a.default.ftyp();if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");i=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");i=e}t=a.default.moov({type:e,meta:i.meta}),r.write(n,t);let l=this._context.getInstance("PRE_SOURCE_BUFFER"),u=l.getSource(e);u||(u=l.createSource(e)),u.mimetype=i.meta.codec,u.init=r,this.emit(o.INIT_SEGMENT,e)}calcDtsBase(e,t){let i=1/0,r=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(r=t.samples[0].dts),this._dtsBase=Math.min(i,r),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let i,{samples:r}=t,n=-1,l=-1,u=-1,d=-1;const c=[],f={samples:[]},h=new s.MediaSegment;for(;r.length;){const e=r.shift(),{isKeyframe:t}=e;let a=e.dts-this._dtsBase;const o=e.cts;if(void 0===i)if(this._videoNextDts)i=a-this._videoNextDts>=1e3?0:a-this._videoNextDts;else if(this._videoSegmentList.isEmpty())i=0;else{const e=this._videoSegmentList.getLastSegmentBefore(a);if(e){let t;const{lastDts:r,gap:s}=e;i=a-(r+(t=a-(r+s)>3?a-(r+s):0))}else i=0}const l=a,d=(a-=i)+o;-1===n&&(n=a,u=d);let p={buffer:[],size:0};f.samples.push(p),p.buffer.push(e.data),p.size+=e.data.byteLength;let g=0;if(r.length>=1){g=r[0].dts-this._dtsBase-i-a}else g=c.length>=1?c[c.length-1].duration:this.videoMeta.refSampleDuration;if(t){const t=new s.MediaSample({dts:a,pts:d,duration:g,originDts:e.dts,isRAP:!0});h.addRAP(t)}c.push({dts:a,cts:o,pts:d,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:g,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:l})}const p=c[0],g=c[c.length-1];l=g.dts+g.duration,d=g.pts+g.duration,this._videoNextDts=l,h.startDts=n,h.endDts=l,h.startPts=u,h.endPts=d,h.originStartDts=p.originDts,h.originEndDts=g.originDts+g.duration,h.gap=i;const y=new s.MediaSample({dts:p.dts,pts:p.pts,duration:p.duration,isKeyframe:p.isKeyframe,originDts:p.originDts}),m=new s.MediaSample({dts:g.dts,pts:g.pts,duration:g.duration,isKeyframe:g.isKeyframe,originDts:g.originDts});h.firstSample=y,h.lastSample=m;let _=new s.Buffer;const v=a.default.moof({id:t.meta.id,time:n,samples:c}),b=a.default.mdat(f);_.write(v,b),t.samples=[],t.length=0;let E=this._context.getInstance("PRE_SOURCE_BUFFER"),x=E.getSource("video");x||(x=E.createSource("video")),x.data.push(_),this.emit(o.MEDIA_SEGMENT,"video")}_remuxAudio(e){const{samples:t}=e;let i,r,n=-1,l=-1,u=[];const d={samples:[]};if(!t||!t.length)return;let c=!1;for(;t.length;){let e=t.shift();const{data:s}=e;let a=e.dts-this._dtsBase,o=!1;if(void 0===i)if(this._audioNextDts)i=a-this._audioNextDts>=1e3?0:a-this._audioNextDts;else if(this._audioSegmentList.isEmpty())i=0;else{const e=this._audioSegmentList.getLastSegmentBefore(a);if(e){let t;const{lastDts:r,gap:s}=e;i=a-(r+(t=a-(r+s)>3?a-(r+s):0))}else o=this._fillSilenceFrame&&!this._videoSegmentList.isEmpty(),i=0}const l=a;if(a-=i,o){const e=this._videoSegmentList.getLastSampleBefore(l);e&&e.startDts<a?(r=a-e.startDts,a=e.startDts):o=!1}if(c||(n=a,c=!0),o){t.unshift(e);const i=this.initSilentAudio(a,r);u.push(i);let s={buffer:[],size:0};s.buffer.push({data:i.unit}),s.size+=i.unit.byteLength,d.samples.push(s);continue}let f=0;if(t.length>=1){f=t[0].dts-this._dtsBase-i-a}else f=u.length>=1?u[u.length-1].duration:this.audioMeta.refSampleDuration;const h={dts:a,pts:a,cts:0,size:s.byteLength,duration:f,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:l};let p={buffer:[],size:0};p.buffer.push(s),p.size+=s.byteLength,d.samples.push(p),u.push(h)}const f=u[u.length-1];l=f.dts+f.duration,this._audioNextDts=l;const h=new s.MediaSegment;h.startDts=n,h.endDts=l,h.startPts=n,h.endPts=l,h.originStartDts=u[0].originDts,h.originEndDts=f.originDts+f.duration,h.gap=i,h.firstSample=new s.MediaSample({dts:u[0].dts,pts:u[0].pts,duration:u[0].duration,originDts:u[0].originDts}),h.lastSample=new s.MediaSample({dts:f.dts,pts:f.pts,duration:f.duration,originDts:f.originDts}),e.samples=u;const p=new s.Buffer,g=a.default.moof({id:e.meta.id,time:n,samples:u}),y=a.default.mdat(d);p.write(g,y),e.samples=[],e.length=0;let m=this._context.getInstance("PRE_SOURCE_BUFFER"),_=m.getSource("audio");_||(_=m.createSource("audio")),_.data.push(p),this.emit(o.MEDIA_SEGMENT,"audio",p)}initSilentAudio(e,t){const i=l.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=l},"../xgplayer-utils/index.js":
/*!**********************************!*\
  !*** ../xgplayer-utils/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Context:i(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:i(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:i(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:i(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:i(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:i(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,MediaInfo:i(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:i(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:i(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:i(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:i(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:i(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:i(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,r=Array(i>1?i-1:0),s=1;s<i;s++)r[s-1]=arguments[s];var n=!0,a=!1,o=void 0;try{for(var l,u=r[Symbol.iterator]();!(n=(l=u.next()).done);n=!0){var d=l.value;t+=d.length}}catch(e){a=!0,o=e}finally{try{!n&&u.return&&u.return()}finally{if(a)throw o}}var c=new e(t),f=0,h=!0,p=!1,g=void 0;try{for(var y,m=r[Symbol.iterator]();!(h=(y=m.next()).done);h=!0){var _=y.value;c.set(_,f),f+=_.length}}catch(e){p=!0,g=e}finally{try{!h&&m.return&&m.return()}finally{if(p)throw g}}return c}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";var r,s=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"),n=(r=s)&&r.__esModule?r:{default:r};e.exports=n.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},s={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},n={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},a=Object.assign({},r,s,n),o=[],l=[];for(let e in a)a.hasOwnProperty(e)&&o.push(a[e]);for(let e in a)a.hasOwnProperty(e)&&l.push(a[e]);t.default={ALLEVENTS:a,REMUX_EVENTS:n,DEMUX_EVENTS:s,LOADER_EVENTS:r,FlvAllowedEvents:o,HlsAllowedEvents:l}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/context.js ***!
  \****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"),n=(r=s)&&r.__esModule?r:{default:r},a=i(/*! events */"./node_modules/events/events.js");const o="__TO__";t.default=class{constructor(e=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new n.default,this.allowedEvents=e}getInstance(e){if(this._instanceMap[e])return this._instanceMap[e];throw new Error(`${e}实例尚未初始化`)}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,r=this._isMessageNameValid.bind(this),s=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.TAG=e,this._context=s}on(t,s){return r(t),this.listeners[t]?this.listeners[t].push(s):this.listeners[t]=[s],i.on(`${t}${o}${e}`,s),i.on(t,s)}once(t,s){return r(t),i.on(`${t}${o}${e}`,s),i.once(t,s)}emit(e,...t){return r(e),i.emit(e,...t)}emitTo(e,t,...s){return r(t),i.emit(`${t}${o}${e}`,...s)}off(e,t){return r(e),i.off(e,t)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let t in this.listeners)if(e(t)){const e=this.listeners[t]||[];for(let r=0;r<e.length;r++){const s=e[r];i.off(t,s)}}}destroy(){this.removeListeners(),delete s._instanceMap[e],super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=null,this._clsMap=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isle.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=r},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),s={get device(){let e=s.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,r=/(?:Android)/.test(e),s=/(?:Firefox)/.test(e),n=/(?:iPad|PlayBook)/.test(e)||r&&!/(?:Mobile)/.test(e)||s&&/(?:Tablet)/.test(e),a=/(?:iPhone)/.test(e)&&!n;return{isTablet:n,isPhone:a,isAndroid:r,isPc:!a&&!r&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:s}},get isLe(){return r}};t.default=s},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/utf8.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{static decode(e){const t=[],i=e;let s=0;const n=e.length;for(;s<n;)if(i[s]<128)t.push(String.fromCharCode(i[s])),++s;else{if(i[s]<192);else if(i[s]<224){if(r._checkContinuation(i,s,1)){const e=(31&i[s])<<6|63&i[s+1];if(e>=128){t.push(String.fromCharCode(65535&e)),s+=2;continue}}}else if(i[s]<240){if(r._checkContinuation(i,s,2)){const e=(15&i[s])<<12|(63&i[s+1])<<6|63&i[s+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),s+=3;continue}}}else if(i[s]<248&&r._checkContinuation(i,s,3)){let e=(7&i[s])<<18|(63&i[s+1])<<12|(63&i[s+2])<<6|63&i[s+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),s+=4;continue}}t.push(String.fromCharCode(65533)),++s}return t.join("")}static _checkContinuation(e,t,i){let r=e;if(t+i<r.length){for(;i--;)if(128!=(192&r[++t]))return!1;return!0}return!1}}t.default=r},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/media-info.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class s{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return s.isBaseInfoReady(this)&&s.isVideoReady(this)&&s.isAudioReady(this)}static isBaseInfoReady(e){return r(e)}static isVideoReady(e){return!e.hasVideo||r(e.video)}static isAudioReady(e){return!e.hasAudio||r(e.video)}}t.default=s},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(e){let t=r.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=r},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,r=0,s=0,n=i,a=0;if(e<t[0].originDts)return a=-1;for(;s<=n;){if((r=s+Math.floor((n-s)/2))===i||e>t[r].lastSample.originDts&&e<t[r+1].originDts){a=r;break}t[r].originDts<e?s=r+1:n=r-1}return a}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,r=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?r=i+1:t.length>0&&(r=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=r,this._list.splice(r,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/track-meta.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}};t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}}},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/track-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=r;class s{constructor(e){let t=s.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=s},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={}}init(){let e=this;this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",t=>{e.addSourceBuffers()}),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",()=>{this.emit("TIME_UPDATE",this.container)})}addSourceBuffers(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e.sources.audio&&e.sources.video){if(Object.keys(this.sourceBuffers).length>=2)return;for(let t=0,i=Object.keys(e.sources).length;t<i;t++){let i=e.sources[Object.keys(e.sources)[t]],r="video"===Object.keys(e.sources)[t]?"video/mp4;codecs="+i.mimetype:"audio/mp4;codecs="+i.mimetype,s=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[Object.keys(e.sources)[t]]=s,s.addEventListener("updateend",()=>{this.doAppend()}),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],r=this.sourceBuffers[i];if(!r.updating){let t=e.sources[i];if(t&&!t.inited)r.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&r.appendBuffer(e.buffer.buffer)}}}}}},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/buffer.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),n=(r=s)&&r.__esModule?r:{default:r};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,n.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/stream.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),i=e%4;for(let e=0;e<t;e++)r.readByte(this.dataview,4);i>0&&r.readByte(this.dataview,i)}static readByte(e,t,i){let r;switch(t){case 1:r=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:r=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");r=e.getUint8(e.position)<<16,r|=e.getUint8(e.position+1)<<8,r|=e.getUint8(e.position+2);break;case 4:r=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");r=e.getUint32(e.position)<<32,r|=e.getUint32(e.position+4);break;default:r=""}return e.position+=t,r}readUint8(){return r.readByte(this.dataview,1)}readUint16(){return r.readByte(this.dataview,2)}readUint24(){return r.readByte(this.dataview,3)}readUint32(){return r.readByte(this.dataview,4)}readUint64(){return r.readByte(this.dataview,8)}readInt8(){return r.readByte(this.dataview,1,!0)}readInt16(){return r.readByte(this.dataview,2,!0)}readInt32(){return r.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=r},"./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";var r,s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n="object"===("undefined"==typeof Reflect?"undefined":s(Reflect))?Reflect:null,a=n&&"function"==typeof n.apply?n.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};r=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function l(){l.init.call(this)}e.exports=l,l.EventEmitter=l,l.prototype._events=void 0,l.prototype._eventsCount=0,l.prototype._maxListeners=void 0;var u=10;function d(e){return void 0===e._maxListeners?l.defaultMaxListeners:e._maxListeners}function c(e,t,i,r){var n,a,o,l;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===i?"undefined":s(i)));if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),o=a[t]),void 0===o)o=a[t]=i,++e._eventsCount;else if("function"==typeof o?o=a[t]=r?[i,o]:[o,i]:r?o.unshift(i):o.push(i),(n=d(e))>0&&o.length>n&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=o.length,l=u,console&&console.warn&&console.warn(l)}return e}function f(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function h(e,t,i){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},s=f.bind(r);return s.listener=i,r.wrapFn=s,s}function p(e,t,i){var r=e._events;if(void 0===r)return[];var s=r[t];return void 0===s?[]:"function"==typeof s?i?[s.listener||s]:[s]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(s):y(s,s.length)}function g(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function y(e,t){for(var i=new Array(t),r=0;r<t;++r)i[r]=e[r];return i}Object.defineProperty(l,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),l.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},l.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},l.prototype.getMaxListeners=function(){return d(this)},l.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var r="error"===e,s=this._events;if(void 0!==s)r=r&&void 0===s.error;else if(!r)return!1;if(r){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var l=s[e];if(void 0===l)return!1;if("function"==typeof l)a(l,this,t);else{var u=l.length,d=y(l,u);for(i=0;i<u;++i)a(d[i],this,t)}return!0},l.prototype.addListener=function(e,t){return c(this,e,t,!1)},l.prototype.on=l.prototype.addListener,l.prototype.prependListener=function(e,t){return c(this,e,t,!0)},l.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":s(t)));return this.on(e,h(this,e,t)),this},l.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":s(t)));return this.prependListener(e,h(this,e,t)),this},l.prototype.removeListener=function(e,t){var i,r,n,a,o;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":s(t)));if(void 0===(r=this._events))return this;if(void 0===(i=r[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(n=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){o=i[a].listener,n=a;break}if(n<0)return this;0===n?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,n),1===i.length&&(r[e]=i[0]),void 0!==r.removeListener&&this.emit("removeListener",e,o||t)}return this},l.prototype.off=l.prototype.removeListener,l.prototype.removeAllListeners=function(e){var t,i,r;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var s,n=Object.keys(i);for(r=0;r<n.length;++r)"removeListener"!==(s=n[r])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},l.prototype.listeners=function(e){return p(this,e,!0)},l.prototype.rawListeners=function(e){return p(this,e,!1)},l.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):g.call(e,t)},l.prototype.listenerCount=g,l.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},"./src/Flv.js":
/*!********************!*\
  !*** ./src/Flv.js ***!
  \********************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),s=u(i(/*! ./demux */"./src/demux/index.js")),n=u(i(/*! xgplayer-remux */"../xgplayer-remux/index.js")),a=i(/*! xgplayer-loader */"../xgplayer-loader/index.js"),o=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),l=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");function u(e){return e&&e.__esModule?e:{default:e}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var c=l.EVENTS.REMUX_EVENTS,f=l.EVENTS.DEMUX_EVENTS,h=l.EVENTS.LOADER_EVENTS,p="FLVController",g=function(){function e(){d(this,e)}return r(e,[{key:"warn",value:function(){}}]),e}(),y=function(){function e(t){d(this,e),this.TAG=p,this._player=t,this.state={initSegmentArrived:!1,range:{start:0,end:""}}}return r(e,[{key:"init",value:function(){this._context.registry("FLV_DEMUXER",s.default),this._context.registry("FETCH_LOADER",a.FetchLoader),this._context.registry("LOADER_BUFFER",o.XgBuffer),this._context.registry("TRACKS",o.Tracks),this._context.registry("MP4_REMUXER",n.default.Mp4Remuxer),this._context.registry("PRE_SOURCE_BUFFER",o.PreSource),this._context.registry("LOGGER",g),this.mse=this._context.registry("MSE",l.Mse)({container:this._player.video}),this.initListeners()}},{key:"initListeners",value:function(){this.on(h.LOADER_DATALOADED,this._handleLoaderDataLoaded.bind(this)),this.on(f.MEDIA_INFO,this._handleMediaInfo.bind(this)),this.on(f.METADATA_PARSED,this._handleMetadataParsed.bind(this)),this.on(f.DEMUX_COMPLETE,this._handleDemuxComplete.bind(this)),this.on(c.INIT_SEGMENT,this._handleAppendInitSegment.bind(this)),this.on(c.MEDIA_SEGMENT,this._handleMediaSegment.bind(this))}},{key:"_handleMediaInfo",value:function(){this._context.mediaInfo||this.emit(f.DEMUX_ERROR,new Error("failed to get mediainfo"));var e=this._context.getInstance("LOADER_BUFFER");this.isSeekable&&(this.state.range={start:0,end:e.historyLen-1})}},{key:"_handleLoaderDataLoaded",value:function(){this.emitTo("FLV_DEMUXER",f.DEMUX_START)}},{key:"_handleMetadataParsed",value:function(e){this.emit(c.REMUX_METADATA,e)}},{key:"_handleDemuxComplete",value:function(){this.emit(c.REMUX_MEDIA)}},{key:"_handleAppendInitSegment",value:function(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}},{key:"_handleMediaSegment",value:function(){this.mse.doAppend()}},{key:"seek",value:function(e){if(this.state.initSegmentArrived){if(!this._player.config.isLive&&this.isSeekable){var t=this._player.config.preloadTime,i=void 0===t?15:t,r=this.getRange(e,i);this.state.range=r,this.loadData()}}else this.loadMeta()}},{key:"loadData",value:function(){var e=this.state,t=e.start,i=e.end;this.emit(h.LADER_START,this._player.config.url,{Range:"bytes="+t+"-"+i})}},{key:"loadMeta",value:function(){this.emit(h.LADER_START,this._player.config.url)}},{key:"getRange",value:function(e,t){var i=this._context.onMetaData.keyframes,r=this._context.getInstance("TRACKS").videoTrack.meta.timescale,s=function(e){for(var t=0,r=i.times.length;t<r;t++){var s=i.times[t],n=t+1<r?i.times[t+1]:Number.MAX_SAFE_INTEGER;if(s<=e&&e<=n)return t}return""};return{start:s(e*r),end:s((e+t)*r)}}},{key:"destroy",value:function(){this._context.destroy(),this._context=null}},{key:"isSeekable",get:function(){return!this._context||!this._context.mediaInfo.isComplete()||null!==this._context.mediaInfo.keyframes&&void 0!==this._context.mediaInfo.keyframes}}]),e}();t.default=y},"./src/demux/amf-parser.js":
/*!*********************************!*\
  !*** ./src/demux/amf-parser.js ***!
  \*********************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");var n=0,a=1,o=2,l=3,u=8,d=9,c=10,f=11,h=12,p=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.offset=0,this.readOffset=this.offset}return r(e,[{key:"resolve",value:function(e,t){if(t<3)throw new Error("not enough data for metainfo");var i={},r=this.parseValue(e),s=this.parseValue(e,t-r.bodySize);return i[r.data]=s.data,this.resetStatus(),i}},{key:"resetStatus",value:function(){this.offset=0,this.readOffset=this.offset}},{key:"parseString",value:function(e){var t=new DataView(e,this.readOffset).getUint16(0,!s.isLe),i="";i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";var r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}},{key:"parseDate",value:function(e,t){var i=new DataView(e,this.readOffset,t),r=i.getFloat64(0,!s.isLe);return r+=60*i.getInt16(8,!s.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}},{key:"parseObject",value:function(e,t){var i=this.parseString(e,t),r=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:r.data},bodySize:i.bodySize+r.bodySize,isObjEnd:r.isObjEnd}}},{key:"parseLongString",value:function(e){var t=new DataView(e,this.readOffset).getUint32(0,!s.isLe),i="";return i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}},{key:"parseValue",value:function(e,t){var i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;var r=n,p=a,g=o,y=l,m=u,_=d,v=c,b=f,E=h,x=new DataView(i,this.readOffset,t),A=!1,w=x.getUint8(0),S=1;this.readOffset+=1;var T=null;switch(w){case r:T=x.getFloat64(1,!s.isLe),this.readOffset+=8,S+=8;break;case p:T=!!x.getUint8(1),this.readOffset+=1,S+=1;break;case g:var R=this.parseString(i);T=R.data,S+=R.bodySize;break;case y:T={};var L=0;for(16777215&x.getUint32(t-4,!s.isLe)&&(L=3);S<t-4;){var k=this.parseObject(i,t-S-L);if(k.isObjectEnd)break;T[k.data.name]=k.data.value,S+=k.bodySize}if(S<=t-3)9===(16777215&x.getUint32(S-1,!s.isLe))&&(this.readOffset+=3,S+=3);break;case m:T={},S+=4,this.readOffset+=4;var M=0;for(9==(16777215&x.getUint32(t-4,!s.isLe))&&(M=3);S<t-8;){var D=this.parseObject(i,t-S-M);if(D.isObjectEnd)break;T[D.data.name]=D.data.value,S+=D.bodySize}if(S<=t-3)9===(16777215&x.getUint32(S-1,!s.isLe))&&(S+=3,this.readOffset+=3);break;case _:T=null,A=!0;break;case v:T=[];var B=x.getUint32(1,!s.isLe);S+=4,this.readOffset+=4;for(var O=0;O<B;O++){var j=this.parseValue(i,t-S);T.push(j.data),S+=j.bodySize}break;case b:var U=this.parseDate(i,t-1);T=U.data,S+=U.bodySize;break;case E:var I=this.parseLongString(i,t-1);T=I.data,S+=I.bodySize;break;default:S=t}return{data:T,bodySize:S,isObjEnd:A}}}]),e}();t.default=p},"./src/demux/index.js":
/*!****************************!*\
  !*** ./src/demux/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),n=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),o=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),l=i(/*! ./amf-parser */"./src/demux/amf-parser.js"),u=(r=l)&&r.__esModule?r:{default:r};var d=n.EVENTS.DEMUX_EVENTS,c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}return s(e,[{key:"init",value:function(){this.on(d.DEMUX_START,this.doParseFlv.bind(this))}},{key:"doParseFlv",value:function(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;this._parseFlvTag()&&this.doParseFlv()}else{if(this.loaderBuffer.length<13)return;var e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}},{key:"parseFlvHeader",value:function(t){if(e.isFlvFile(t)){this._firstFragmentLoaded=!0;var i=e.getPlayType(t[4]);i.hasVideo&&this.initVideoTrack(),i.hasAudio&&this.initAudioTrack()}else this.emit(d.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}},{key:"initVideoTrack",value:function(){this._trackNum++;var e=new o.VideoTrack;e.meta=new n.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}},{key:"initAudioTrack",value:function(){this._trackNum++;var e=new o.AudioTrack;e.meta=new n.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}},{key:"_parseFlvTag",value:function(){if(this.loaderBuffer.length<11)return null;var e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}},{key:"_parseFlvTagHeader",value:function(){var e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.logger.warn(this.TAG,"tagType "+t.tagType),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);var r=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);var s=this.loaderBuffer.shift(1)[0];return s>0&&(r+=16777216*s),t.dts=r,this.loaderBuffer.shift(3),t}},{key:"_processChunk",value:function(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}},{key:"_parseScriptData",value:function(e){var t=this.tracks.audioTrack,i=this.tracks.videoTrack,r=this.loaderBuffer.shift(e.datasize),s=(new u.default).resolve(r,r.length),n=this._context.onMetaData=s?s.onMetaData:void 0;if(this._context.mediaInfo.duration=n.duration,this._context.mediaInfo.hasVideo=n.hasVideo,this._context.mediaInfo.hsaAudio=n.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(d.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){var a=t.meta;switch(n.audiosamplerate&&(a.sampleRate=n.audiosamplerate),n.audiochannels&&(a.channelCount=n.audiochannels),n.audiosamplerate){case 44100:a.sampleRateIndex=4;break;case 22050:a.sampleRateIndex=7;break;case 11025:a.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){var o=i.meta;if("number"==typeof n.framerate){var l=Math.floor(1e3*n.framerate);if(l>0){var c=l/1e3;o.frameRate||(o.frameRate={}),o.frameRate.fixed=!0,o.frameRate.fps=c,o.frameRate.fps_num=l,o.frameRate.fps_den=1e3}}}}},{key:"_aacSequenceHeaderParser",value:function(e){var t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec="mp4a.40."+t.objectType;var i=window.navigator.userAgent.toLowerCase(),r=void 0,s=void 0,n=t.sampleRateIndex;return-1!==i.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,s=new Array(4),r=n-3):(t.objectType=2,s=new Array(2),r=n):-1!==i.indexOf("android")?(t.objectType=2,s=new Array(2),r=n):(t.objectType=5,r=t.sampleRateIndex,s=new Array(4),t.sampleRateIndex>=6?r=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,s=new Array(2),r=t.sampleRateIndex)),s[0]=t.objectType<<3,s[0]|=(15&t.sampleRateIndex)>>>1,s[1]=(15&t.sampleRateIndex)<<7,s[1]|=(15&t.channelCount)<<3,5===t.objectType&&(s[1]|=(15&r)>>>1,s[2]=(1&r)<<7,s[2]|=8,s[3]=0),t.config=s,t}},{key:"_parseAACData",value:function(e){var t=this.tracks.audioTrack;if(t){var i=t.meta;i||(i=new n.AudioTrackMeta);var r=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);var s=(240&r)>>>4;t.format=s,10!==s&&this.emit(d.DEMUX_ERROR,new Error("invalid audio format: "+s)),10!==s||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(r),i.sampleRateIndex=(12&r)>>>2,i.frameLenth=(2&r)>>>1,i.channelCount=1&r,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));var a=i.audioSampleRate,o=i.sampleRateIndex,l=i.refSampleDuration;delete e.tagType;var u=this._datasizeValidator(e.datasize);if(0===e.data[0]){var c=this._aacSequenceHeaderParser(e.data);a=c.audiosamplerate||i.audioSampleRate,o=c.sampleRateIndex||i.sampleRateIndex,l=Math.floor(1024/a*i.timescale),i.channelCount=c.channelCount,i.sampleRate=a,i.sampleRateIndex=o,i.refSampleDuration=l,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=c.config;var f=this._context.mediaInfo.audio;f.codec=c.codec,f.channelCount=c.channelCount,f.sampleRate=a,f.sampleRateIndex=c.audioSampleRateIndex,!this._hasScript||this._hasAudioSequence||this.tracks.videoTrack&&!this._hasVideoSequence?this._hasScript&&this._hasAudioSequence&&this.emit(d.AUDIO_METADATA_CHANGE):this.emit(d.METADATA_PARSED,"audio"),this._hasAudioSequence=!0}else e.data=e.data.slice(1,e.data.length),t.samples.push(e),this.emit(d.DEMUX_COMPLETE);u||this.logger.warn(this.TAG,"TAG length error at "+e.datasize)}}},{key:"_parseHevcData",value:function(e){var t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;var i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){var r=this.loaderBuffer.shift(e.datasize-5);if(e.data=r,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize);var s={},n=0;for(s.cts=e.cts,s.dts=e.dts;e.data.length>n;){var a=e.data.slice(Number.parseInt(n),4+n);s.size=a[3],s.size+=256*a[2],s.size+=256*a[1]*256,s.size+=256*a[0]*256*256,n+=4,s.data=e.data.slice(Number.parseInt(n),s.size+n),n+=s.size,this.tracks.videoTrack.samples.push(s),this.emit(d.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(d.METADATA_PARSED,"video"):this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize))}else if(7===i){var o=this.loaderBuffer.shift(e.datasize-5);if(0===o[4]&&0===o[5]&&0===o[6]&&1===o[7]){for(var l=0,u=0;u<4;u++)l=256*l+o[u];l-=4,(o=o.slice(4,o.length))[3]=l%256,l=(l-o[3])/256,o[2]=l%256,l=(l-o[2])/256,o[1]=l%256,o[0]=(l-o[1])/256}if(e.data=o,0===e.avcPacketType){this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(d.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(d.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0)}else{if(!this._datasizeValidator(e.datasize))return void this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize);this.tracks.videoTrack.samples.push(e),this.emit(d.DEMUX_COMPLETE)}}else this.logger.warn(this.TAG,"video codeid is "+i),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize),this.tracks.videoTrack.samples.push(e),this.emit(d.DEMUX_COMPLETE);delete e.tagType}},{key:"_avcSequenceHeaderParser",value:function(e){var t=this.tracks.videoTrack;if(t){var i=0;t.meta||(t.meta=new n.VideoTrackMeta);var r=t.meta;r.configurationVersion=e[0],r.avcProfileIndication=e[1],r.profileCompatibility=e[2],r.avcLevelIndication=e[3]/10,r.nalUnitLength=1+(3&e[4]);var s=31&e[5];i=6;for(var o={},l=0;l<s;l++){var u=255*e[i]+e[i+1];i+=2;for(var d=new Uint8Array(u),c=0;c<u;c++)d[c]=e[i+c];for(var f="avc1.",h=1;h<4;h++){var p=d[h].toString(16);p.length<2&&(p="0"+p),f+=p}r.codec=f,i+=u,this.tracks.videoTrack.meta.sps=d,o=a.SpsParser.parseSPS(d)}var g=e[i];i++;for(var y=0;y<g;y++){var m=255*e[i]+e[i+1];i+=2;for(var _=new Uint8Array(m),v=0;v<m;v++)_[v]=e[i+v];i+=m,this.tracks.videoTrack.meta.pps=_}Object.assign(r,a.SpsParser.toVideoMeta(o));var b=this._context.mediaInfo.video;b.codec=r.codec,b.profile=r.profile,b.level=r.level,b.chromaFormat=r.chromaFormat,b.frameRate=r.frameRate,b.parRatio=r.parRatio,b.width=b.width===r.presentWidth?b.width:r.presentWidth,b.height=b.height===r.presentHeight?b.width:r.presentHeight,r.duration=this._context.mediaInfo.duration*r.timescale,r.avcc=new Uint8Array(e.length),r.avcc.set(e),t.meta=r}}},{key:"_switchAudioSampleRate",value:function(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}},{key:"_switchAudioSamplingFrequency",value:function(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}},{key:"_switchAudioChannel",value:function(e){return[1,2][1&e]}},{key:"_datasizeValidator",value:function(e){var t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}},{key:"loaderBuffer",get:function(){if(this._context.getInstance("LOADER_BUFFER"))return this._context.getInstance("LOADER_BUFFER");this.emit(d.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}},{key:"tracks",get:function(){return this._context.getInstance("TRACKS")}},{key:"logger",get:function(){return this._context.getInstance("LOGGER")}}],[{key:"isFlvFile",value:function(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}},{key:"getPlayType",value:function(e){var t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}}]),e}();t.default=c},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,i){"use strict";var r=a(i(/*! xgplayer */"xgplayer")),s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),n=a(i(/*! ./Flv */"./src/Flv.js"));function a(e){return e&&e.__esModule?e:{default:e}}var o=s.EVENTS.FlvAllowedEvents;r.default.install("flvplayer",(function(){var e=this,t=r.default.util,i=new s.Context(o),a=e.config.preloadTime||15,l=e.start,u=void 0;e.start=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.config.url;r&&(u=i.registry("FLV_CONTROLLER",n.default)(e),i.init(),u.once(s.EVENTS.INIT_SEGMENT,(function(){if(e.config.isLive){t.addClass(e.root,"xgplayer-is-live");var i=t.createDom("xg-live","正在直播",{},"xgplayer-live");e.controls.appendChild(i);var r=setInterval((function(){if(e.paused&&e.buffered.length)for(var t=0,i=e.buffered.length;t<i;t++)if(e.buffered.start(t)>e.currentTime){e.currentTime=e.buffered.start(t),clearInterval(r);break}}),200)}})),l.call(e,u.mse.url),d())};var d=function(){Object.defineProperty(e,"src",{get:function(){return e.currentSrc},set:function(t){e.config.url=t,e.paused?e.start(t):(e.pause(),e.once("pause",(function(){e.start(t)})),e.once("canplay",(function(){e.play()}))),e.once("canplay",(function(){e.currentTime=0}))},configurable:!0})},c=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.currentTime,i=e.getBufferedRange();t<i[1]?e.config.isLive||i[1]-t<a&&u.seek(i[1]+1):u.seek(t)};e.on("timeupdate",(function(){c(e.currentTime+1),function(e,t){if(!e.config.isLive&&e.duration-e.currentTime<2){var i=e.getBufferedRange();e.currentTime-i[1]<.1&&t.mse.endOfStream()}}(e,u)})),e.on("seeking",(function(){c()})),e.on("waiting",(function(){if("live"===u.type)for(var t=e.buffered,i=t.length,r=e.currentTime,s=0;s<i;s++)if(t.start(s)>r){e.currentTime=t.start(s)+.1;break}})),e.once("destroy",(function(){u.destroy()}))}))},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!***************************!*\
  !*** external "xgplayer" ***!
  \***************************/
/*! no static exports found */function(t,i){t.exports=e}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,