!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("xgplayer")):"function"==typeof define&&define.amd?define(["xgplayer"],t):"object"==typeof exports?exports["xgplayer-flv"]=t(require("xgplayer")):e["xgplayer-flv"]=t(e.xgplayer)}(window,(function(e){return function(e){var t={};function i(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(r,s,function(t){return e[t]}.bind(null,s));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../xgplayer-buffer/src/Track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/Track.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-buffer/src/index.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/index.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RemuxBuffer=t.Tracks=t.VideoTrack=t.AudioTrack=t.XgBuffer=void 0;var r,s=i(/*! ./Track */"../xgplayer-buffer/src/Track.js"),n=(r=s)&&r.__esModule?r:{default:r};t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let r=this.array[0].slice(this.offset,this.offset+e);t.set(r,i),this.offset+=e,this.length-=e,e=0;break}{let r=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=r,this.length-=r,e-=r}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,r=this.offset+e;for(;r<this.offset+t+e;)r<this.array[0].length?i=256*i+this.array[0][r]:this.array[1]&&(i=256*i+this.array[1][r-this.array[0].length]),r++;return i}};t.AudioTrack=class extends n.default{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}};t.VideoTrack=class extends n.default{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}};t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new r,this.sources[e]}clear(){this.sources={}}}},"../xgplayer-loader-fetch/dist/index.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader-fetch/dist/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,i){"use strict";window,e.exports=function(e){var t={};function i(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(r,s,function(t){return e[t]}.bind(null,s));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){e.exports=i(1)},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var r,s=(r=i(2))&&r.__esModule?r:{default:r},n=i(5);window.Context=s.default,t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER"}static get type(){return"loader"}load(e,t){let i=this;this.url=e;let r=this.getParams(t);return fetch(this.url,r).then((function(e){return i.status=e.status,i.loading=!0,i._onFetchResponse(e)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);if(!0===e.ok)switch(this.readtype){case 2:e.json().then(e=>{i?(i.push(e),t.emit(n.LOADER_EVENTS.LOADER_COMPLETE,i)):t.emit(n.LOADER_EVENTS.LOADER_COMPLETE,e)});break;case 1:e.text().then(e=>{i?(i.push(e),t.emit(n.LOADER_EVENTS.LOADER_COMPLETE,i)):t.emit(n.LOADER_EVENTS.LOADER_COMPLETE,e)});break;case 0:default:return this._onReader(e.body.getReader())}}_onReader(e){let t=this._context.getInstance(this.buffer);if(t||this._reader.cancel(),this._reader=e,!1===this.loading)return;let i=this;this._reader&&this._reader.read().then((function(r){return r.done?(i.loading=!1,i.status=0,void i.emit(n.LOADER_EVENTS.LOADER_COMPLETE,t)):(t.push(r.value),i.emit(n.LOADER_EVENTS.LOADER_DATALOADED,t),i._onReader(e))})).catch((function(e){console.log(e)}))}getParams(e){let t=Object.assign({},e),i=new Headers,r={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(r.mode="same-origin"),t.withCredentials&&(r.credentials="include"),r}cancel(){this._reader&&(this._reader.cancel(),this._reader=null)}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var r,s=(r=i(3))&&r.__esModule?r:{default:r};const n=i(4);t.default=class{constructor(e=[]){this._emitter=new n.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new s.default,this.allowedEvents=e}getInstance(e){if(this._instanceMap[e])return this._instanceMap[e];throw new Error(`${e}实例尚未初始化`)}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,r=this._isMessageNameValid.bind(this),s=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.TAG=e,this._context=s}on(e,t){return r(e),this.listeners[e]?this.listeners[e].push(t):this.listeners[e]=[t],i.on(e,t)}once(e,t){return r(e),i.once(e,t)}emit(e,...t){return r(e),i.emit(e,...t)}off(e,t){return r(e),i.off(e,t)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let t in this.listeners)if(e(t)){const e=this.listeners[t]||[];for(let r=0;r<e.length;r++){const s=e[r];i.off(t,s)}}}destroy(){this.removeListeners(),delete s._instanceMap[e],super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=null,this._clsMap=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const r=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class s{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return s.isBaseInfoReady(this)&&s.isVideoReady(this)&&s.isAudioReady(this)}static isBaseInfoReady(e){return r(e)}static isVideoReady(e){return!e.hasVideo||r(e.video)}static isAudioReady(e){return!e.hasAudio||r(e.video)}}t.default=s},function(e,t,i){var r,s="object"==typeof Reflect?Reflect:null,n=s&&"function"==typeof s.apply?s.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};r=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var u=10;function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function d(e,t,i,r){var s,n,a,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(n=e._events)?(n=e._events=Object.create(null),e._eventsCount=0):(void 0!==n.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),n=e._events),a=n[t]),void 0===a)a=n[t]=i,++e._eventsCount;else if("function"==typeof a?a=n[t]=r?[i,a]:[a,i]:r?a.unshift(i):a.push(i),(s=l(e))>0&&a.length>s&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,o=u,console&&console.warn&&console.warn(o)}return e}function c(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,n(this.listener,this.target,e))}function f(e,t,i){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},s=c.bind(r);return s.listener=i,r.wrapFn=s,s}function h(e,t,i){var r=e._events;if(void 0===r)return[];var s=r[t];return void 0===s?[]:"function"==typeof s?i?[s.listener||s]:[s]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(s):y(s,s.length)}function p(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function y(e,t){for(var i=new Array(t),r=0;r<t;++r)i[r]=e[r];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var r="error"===e,s=this._events;if(void 0!==s)r=r&&void 0===s.error;else if(!r)return!1;if(r){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var u=s[e];if(void 0===u)return!1;if("function"==typeof u)n(u,this,t);else{var l=u.length,d=y(u,l);for(i=0;i<l;++i)n(d[i],this,t)}return!0},o.prototype.addListener=function(e,t){return d(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return d(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,f(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,f(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,r,s,n,a;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(i=r[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(s=-1,n=i.length-1;n>=0;n--)if(i[n]===t||i[n].listener===t){a=i[n].listener,s=n;break}if(s<0)return this;0===s?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,s),1===i.length&&(r[e]=i[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,i,r;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var s,n=Object.keys(i);for(r=0;r<n.length;++r)"removeListener"!==(s=n[r])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},o.prototype.listeners=function(e){return h(this,e,!0)},o.prototype.rawListeners=function(e){return h(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const r=t.LOADER_EVENTS={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},s=t.DEMUX_EVENTS={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},n=t.REMUX_EVENTS={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},a=Object.assign({},r,s,n),o=t.flvAllowedEvents=[];for(let e in a)a.hasOwnProperty(e)&&o.push(a[e]);t.default=a}])},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! xgplayer-utils/dist/write/Buffer */"../xgplayer-utils/dist/write/Buffer.js"),n=(r=s)&&r.__esModule?r:{default:r};class a{static size(e){return n.default.writeUint32(e)}static initBox(e,t,...i){const r=new n.default;return r.write(a.size(e),a.type(t),...i),r.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return a.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let i,r=8,s=a.mvhd(t.duration,t.timescale);i="video"===e?a.videoTrak(t):a.audioTrak(t);let n=a.mvex(t.duration,t.timescale||1e3,t.id);return[s,i,n].forEach(e=>{r+=e.byteLength}),a.initBox(r,"moov",s,i,n)}static mvhd(e,t=1e3){let i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return a.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=a.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),r=a.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,r].forEach(e=>{t+=e.byteLength}),a.initBox(t,"trak",i,r)}static audioTrak(e){let t=8,i=a.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),r=a.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,r].forEach(e=>{t+=e.byteLength}),a.initBox(t,"trak",i,r)}static tkhd(e){let t=e.id,i=e.duration,r=e.width,s=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,r>>>8&255,255&r,0,0,s>>>8&255,255&s,0,0]);return a.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new n.default,i=e.duration,r=e.mediaTime;return t.write(a.size(36),a.type("edts")),t.write(a.size(28),a.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,r>>24&255,r>>16&255,r>>8&255,255&r,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=a.mdhd(e.timescale,e.duration),r=a.hdlr(e.type),s=a.minf(e);return[i,r,s].forEach(e=>{t+=e.byteLength}),a.initBox(t,"mdia",i,r,s)}static mdhd(e=1e3,t){let i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return a.initBox(12+i.byteLength,"mdhd",a.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),a.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?a.vmhd():a.smhd(),r=a.dinf(),s=a.stbl(e);return[i,r,s].forEach(e=>{t+=e.byteLength}),a.initBox(t,"minf",i,r,s)}static vmhd(){return a.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return a.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new n.default;return e.write(a.size(36),a.type("dinf"),a.size(28),a.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=a.stsd(e),r=a.stts(),s=a.stsc(),n=a.stsz(),o=a.stco();return[i,r,s,n,o].forEach(e=>{t+=e.byteLength}),a.initBox(t,"stbl",i,r,s,n,o)}static stsd(e){let t;return t="audio"===e.type?a.mp4a(e):a.avc1(e),a.initBox(16+t.byteLength,"stsd",a.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=a.esds(e.config);return a.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(e=[43,146,8,0]){const t=e.length;let i=new n.default,r=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(a.size(8+r.byteLength),a.type("esds"),r),i.buffer}static avc1(e){let t=new n.default,i=e.width,r=e.height,s=e.parRatio.height,o=e.parRatio.width,u=e.avcc,l=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,r>>8&255,255&r,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),d=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),c=new Uint8Array([s>>24,s>>16&255,s>>8&255,255&s,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(a.size(40+l.byteLength+u.byteLength+d.byteLength),a.type("avc1"),l,a.size(8+u.byteLength),a.type("avcC"),u,a.size(20),a.type("btrt"),d,a.size(16),a.type("pasp"),c),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return a.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return a.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return a.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return a.initBox(20,"stsz",e)}static mvex(e,t=1e3,i){let r=new n.default,s=n.default.writeUint32(e);return r.write(a.size(56),a.type("mvex"),a.size(16),a.type("mehd"),a.extension(0,0),s,a.trex(i)),r.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return a.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=a.mfhd(),r=a.traf(e);return[i,r].forEach(e=>{t+=e.byteLength}),a.initBox(t,"moof",i,r)}static mfhd(){let e=n.default.writeUint32(a.sequence);return a.sequence+=1,a.initBox(16,"mfhd",a.extension(0,0),e)}static traf(e){let t=8,i=a.tfhd(e.id),r=a.tfdt(e.time),s=a.sdtp(e),n=a.trun(e,s.byteLength);return[i,r,n,s].forEach(e=>{t+=e.byteLength}),a.initBox(t,"traf",i,r,n,s)}static tfhd(e){let t=n.default.writeUint32(e);return a.initBox(16,"tfhd",a.extension(0,0),t)}static tfdt(e){return a.initBox(16,"tfdt",a.extension(0,0),n.default.writeUint32(e))}static trun(e,t){let i=new n.default,r=n.default.writeUint32(e.samples.length),s=n.default.writeUint32(92+16*e.samples.length+t);return i.write(a.size(20+16*e.samples.length),a.type("trun"),new Uint8Array([0,0,15,1]),r,s),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new n.default;return t.write(a.size(12+e.samples.length),a.type("sdtp"),a.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,r=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([r]))}),t.buffer}static mdat(e){let t=new n.default,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(a.size(i),a.type("mdat"));let r=new Uint8Array(i),s=0;return r.set(t.buffer,s),s+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{r.set(e,s),s+=e.byteLength})}),r}}a.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),a.sequence=1,t.default=a},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(/*! xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js"),s=d(i(/*! xgplayer-utils/src/models/MediaSegmentList */"../xgplayer-utils/src/models/MediaSegmentList.js")),n=d(i(/*! xgplayer-utils/src/models/MediaSegment */"../xgplayer-utils/src/models/MediaSegment.js")),a=d(i(/*! xgplayer-utils/src/models/MediaSample */"../xgplayer-utils/src/models/MediaSample.js")),o=d(i(/*! xgplayer-utils/src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js")),u=d(i(/*! xgplayer-utils/src/write/Buffer */"../xgplayer-utils/src/write/Buffer.js")),l=d(i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"));function d(e){return e&&e.__esModule?e:{default:e}}class c{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new s.default("video"),this._audioSegmentList=new s.default("audio");const{browser:e}=o.default;this._fillSilenceFrame="ie"===e}init(){this.on(r.DEMUX_EVENTS.DEMUX_COMPLETE,this.remux.bind(this)),this.on(r.DEMUX_EVENTS.METADATA_PARSED,this.onMetaDataReady.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t,i,s=new u.default,n=l.default.ftyp();if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");i=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");i=e}t=l.default.moov({type:e,meta:i.meta}),s.write(n,t);let a=this._context.getInstance("PRE_SOURCE_BUFFER"),o=a.getSource(e);o||(o=a.createSource(e)),o.mimetype=i.meta.codec,o.init=s,this.emit(r.REMUX_EVENTS.INIT_SEGMENT,e)}calcDtsBase(e,t){let i=1/0,r=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(r=t.samples[0].dts),this._dtsBase=Math.min(i,r),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let i,{samples:s}=t,o=-1,d=-1,c=-1,f=-1;const h=[],p={samples:[]},y=new n.default;for(;s.length;){const e=s.shift(),{isKeyframe:t}=e;let r=e.dts-this._dtsBase;const n=e.cts;if(void 0===i)if(this._videoNextDts)i=r-this._videoNextDts>=1e3?0:r-this._videoNextDts;else if(this._videoSegmentList.isEmpty())i=0;else{const e=this._videoSegmentList.getLastSegmentBefore(r);if(e){let t;const{lastDts:s,gap:n}=e;i=r-(s+(t=r-(s+n)>3?r-(s+n):0))}else i=0}const u=r,l=(r-=i)+n;-1===o&&(o=r,c=l);let d={buffer:[],size:0};p.samples.push(d),d.buffer.push(e.data),d.size+=e.data.byteLength;let f=0;if(s.length>=1){f=s[0].dts-this._dtsBase-i-r}else f=h.length>=1?h[h.length-1].duration:this.videoMeta.refSampleDuration;if(t){const t=new a.default({dts:r,pts:l,duration:f,originDts:e.dts,isRAP:!0});y.addRAP(t)}h.push({dts:r,cts:n,pts:l,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:f,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:u})}const _=h[0],m=h[h.length-1];d=m.dts+m.duration,f=m.pts+m.duration,this._videoNextDts=d,y.startDts=o,y.endDts=d,y.startPts=c,y.endPts=f,y.originStartDts=_.originDts,y.originEndDts=m.originDts+m.duration,y.gap=i;const g=new a.default({dts:_.dts,pts:_.pts,duration:_.duration,isKeyframe:_.isKeyframe,originDts:_.originDts}),v=new a.default({dts:m.dts,pts:m.pts,duration:m.duration,isKeyframe:m.isKeyframe,originDts:m.originDts});y.firstSample=g,y.lastSample=v;let E=new u.default;const b=l.default.moof({id:t.meta.id,time:o,samples:h}),A=l.default.mdat(p);E.write(b,A),t.samples=[],t.length=0;let w=this._context.getInstance("PRE_SOURCE_BUFFER"),x=w.getSource("video");x||(x=w.createSource("video")),x.data.push(E),this.emit(r.REMUX_EVENTS.MEDIA_SEGMENT,"video")}_remuxAudio(e){const{samples:t}=e;let i,s,o=-1,d=-1,c=[];const f={samples:[]};if(!t||!t.length)return;let h=!1;for(;t.length;){let e=t.shift();const{data:r}=e;let n=e.dts-this._dtsBase,a=!1;if(void 0===i)if(this._audioNextDts)i=n-this._audioNextDts>=1e3?0:n-this._audioNextDts;else if(this._audioSegmentList.isEmpty())i=0;else{const e=this._audioSegmentList.getLastSegmentBefore(n);if(e){let t;const{lastDts:r,gap:s}=e;i=n-(r+(t=n-(r+s)>3?n-(r+s):0))}else a=this._fillSilenceFrame&&!this._videoSegmentList.isEmpty(),i=0}const u=n;if(n-=i,a){const e=this._videoSegmentList.getLastSampleBefore(u);e&&e.startDts<n?(s=n-e.startDts,n=e.startDts):a=!1}if(h||(o=n,h=!0),a){t.unshift(e);const i=this.initSilentAudio(n,s);c.push(i);let r={buffer:[],size:0};r.buffer.push({data:i.unit}),r.size+=i.unit.byteLength,f.samples.push(r);continue}let l=0;if(t.length>=1){l=t[0].dts-this._dtsBase-i-n}else l=c.length>=1?c[c.length-1].duration:this.audioMeta.refSampleDuration;const d={dts:n,pts:n,cts:0,size:r.byteLength,duration:l,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:u};let p={buffer:[],size:0};p.buffer.push(r),p.size+=r.byteLength,f.samples.push(p),c.push(d)}const p=c[c.length-1];d=p.dts+p.duration,this._audioNextDts=d;const y=new n.default;y.startDts=o,y.endDts=d,y.startPts=o,y.endPts=d,y.originStartDts=c[0].originDts,y.originEndDts=p.originDts+p.duration,y.gap=i,y.firstSample=new a.default({dts:c[0].dts,pts:c[0].pts,duration:c[0].duration,originDts:c[0].originDts}),y.lastSample=new a.default({dts:p.dts,pts:p.pts,duration:p.duration,originDts:p.originDts}),e.samples=c;const _=new u.default,m=l.default.moof({id:e.meta.id,time:o,samples:c}),g=l.default.mdat(f);_.write(m,g),e.samples=[],e.length=0;let v=this._context.getInstance("PRE_SOURCE_BUFFER"),E=v.getSource("audio");E||(E=v.createSource("audio")),E.data.push(_),this.emit(r.REMUX_EVENTS.MEDIA_SEGMENT,"audio",_)}initSilentAudio(e,t){const i=c.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=c},"../xgplayer-utils/dist/Context.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/dist/Context.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! ./models/MediaInfo */"../xgplayer-utils/dist/models/MediaInfo.js"),n=(r=s)&&r.__esModule?r:{default:r};const a=i(/*! events */"./node_modules/events/events.js");t.default=class{constructor(e=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new n.default,this.allowedEvents=e}getInstance(e){if(this._instanceMap[e])return this._instanceMap[e];throw new Error(`${e}实例尚未初始化`)}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,r=this._isMessageNameValid.bind(this),s=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.TAG=e,this._context=s}on(e,t){return r(e),this.listeners[e]?this.listeners[e].push(t):this.listeners[e]=[t],i.on(e,t)}once(e,t){return r(e),i.once(e,t)}emit(e,...t){return r(e),i.emit(e,...t)}off(e,t){return r(e),i.off(e,t)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let t in this.listeners)if(e(t)){const e=this.listeners[t]||[];for(let r=0;r<e.length;r++){const s=e[r];i.off(t,s)}}}destroy(){this.removeListeners(),delete s._instanceMap[e],super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=null,this._clsMap=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/dist/constants/events.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/dist/constants/events.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=t.LOADER_EVENTS={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},s=t.DEMUX_EVENTS={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},n=t.REMUX_EVENTS={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},a=Object.assign({},r,s,n),o=t.flvAllowedEvents=[];for(let e in a)a.hasOwnProperty(e)&&o.push(a[e]);t.default=a},"../xgplayer-utils/dist/models/MediaInfo.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/dist/models/MediaInfo.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class s{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return s.isBaseInfoReady(this)&&s.isVideoReady(this)&&s.isAudioReady(this)}static isBaseInfoReady(e){return r(e)}static isVideoReady(e){return!e.hasVideo||r(e.video)}static isAudioReady(e){return!e.hasAudio||r(e.video)}}t.default=s},"../xgplayer-utils/dist/write/Buffer.js":
/*!**********************************************!*\
  !*** ../xgplayer-utils/dist/write/Buffer.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),n=(r=s)&&r.__esModule?r:{default:r};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,n.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,r=Array(i>1?i-1:0),s=1;s<i;s++)r[s-1]=arguments[s];var n=!0,a=!1,o=void 0;try{for(var u,l=r[Symbol.iterator]();!(n=(u=l.next()).done);n=!0){var d=u.value;t+=d.length}}catch(e){a=!0,o=e}finally{try{!n&&l.return&&l.return()}finally{if(a)throw o}}var c=new e(t),f=0,h=!0,p=!1,y=void 0;try{for(var _,m=r[Symbol.iterator]();!(h=(_=m.next()).done);h=!0){var g=_.value;c.set(g,f),f+=g.length}}catch(e){p=!0,y=e}finally{try{!h&&m.return&&m.return()}finally{if(p)throw y}}return c}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";var r,s=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"),n=(r=s)&&r.__esModule?r:{default:r};e.exports=n.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=t.LOADER_EVENTS={LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},s=t.DEMUX_EVENTS={DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},n=t.REMUX_EVENTS={MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},a=Object.assign({},r,s,n),o=t.flvAllowedEvents=[];for(let e in a)a.hasOwnProperty(e)&&o.push(a[e]);t.default=a},"../xgplayer-utils/src/env/isLE.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isLE.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=r},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),s={get device(){let e=s.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,r=/(?:Android)/.test(e),s=/(?:Firefox)/.test(e),n=/(?:iPad|PlayBook)/.test(e)||r&&!/(?:Mobile)/.test(e)||s&&/(?:Tablet)/.test(e),a=/(?:iPhone)/.test(e)&&!n;return{isTablet:n,isPhone:a,isAndroid:r,isPc:!a&&!r&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:s}},get isLe(){return r}};t.default=s},"../xgplayer-utils/src/h264/SPSParser.js":
/*!***********************************************!*\
  !*** ../xgplayer-utils/src/h264/SPSParser.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! ./golomb */"../xgplayer-utils/src/h264/golomb.js"),n=(r=s)&&r.__esModule?r:{default:r};class a{static _ebsp2rbsp(e){let t=e,i=t.byteLength,r=new Uint8Array(i),s=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(r[s]=t[e],s++);return new Uint8Array(r.buffer,0,s)}static parseSPS(e){let t=a._ebsp2rbsp(e),i=new n.default(t);i.readByte();let r=i.readByte();i.readByte();let s=i.readByte();i.readUEG();let o=a.getProfileString(r),u=a.getLevelString(s),l=1,d=420,c=[0,420,422,444],f=8;if((100===r||110===r||122===r||244===r||44===r||83===r||86===r||118===r||128===r||138===r||144===r)&&(3===(l=i.readUEG())&&i.readBits(1),l<=3&&(d=c[l]),f=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==l?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?a._skipScalingList(i,16):a._skipScalingList(i,64))}i.readUEG();let h=i.readUEG();if(0===h)i.readUEG();else if(1===h){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let p=i.readUEG(),y=i.readUEG(),_=i.readBits(1);0===_&&i.readBits(1),i.readBits(1);let m=0,g=0,v=0,E=0;i.readBool()&&(m=i.readUEG(),g=i.readUEG(),v=i.readUEG(),E=i.readUEG());let b=1,A=1,w=0,x=!0,T=0,S=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],r=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(b=t[e-1],A=r[e-1]):255===e&&(b=i.readByte()<<8|i.readByte(),A=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);x=i.readBool(),w=(T=t)/(S=2*e)}}let R=1;1===b&&1===A||(R=b/A);let O=0,M=0;if(0===l)O=1,M=2-_;else{O=3===l?1:2,M=(1===l?2:1)*(2-_)}let D=16*(p+1),L=16*(y+1)*(2-_);D-=(m+g)*O,L-=(v+E)*M;let k=Math.ceil(D*R);return i.destroy(),i=null,{profile_string:o,level_string:u,bit_depth:f,chroma_format:d,chroma_format_string:a.getChromaFormatString(d),frame_rate:{fixed:x,fps:w,fps_den:S,fps_num:T},par_ratio:{width:b,height:A},codec_size:{width:D,height:L},present_size:{width:k,height:L}}}static _skipScalingList(e,t){let i=8,r=8,s=0;for(let n=0;n<t;n++)0!==r&&(r=(i+(s=e.readSEG())+256)%256),i=0===r?i:r}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},e.frame_rate.fixed&&e.frame_rate.fps_num>0&&e.frame_rate.fps_den>0&&(t.frameRate=e.frame_rate);let i=t.frameRate.fps_den,r=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/r))}}t.default=a},"../xgplayer-utils/src/h264/golomb.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/h264/golomb.js ***!
  \********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0,!1),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){if(e<=this._currentWordBitsLeft){let t=this._currentWord>>>32-e;return this._currentWord<<=e,this._currentWordBitsLeft-=e,t}let t=this._currentWordBitsLeft?this._currentWord:0;this._currentWordBitsLeft;let i=e-this._currentWordBitsLeft;this._fillCurrentWord();let r=Math.min(i,this._currentWordBitsLeft),s=this._currentWord>>>32-r;return this._currentWord<<=r,this._currentWordBitsLeft-=r,t=t<<r|s}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-utils/src/models/MediaSample.js":
/*!***************************************************!*\
  !*** ../xgplayer-utils/src/models/MediaSample.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(e){let t=r.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=r},"../xgplayer-utils/src/models/MediaSegment.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/MediaSegment.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/MediaSegmentList.js":
/*!********************************************************!*\
  !*** ../xgplayer-utils/src/models/MediaSegmentList.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,r=0,s=0,n=i,a=0;if(e<t[0].originDts)return a=-1;for(;s<=n;){if((r=s+Math.floor((n-s)/2))===i||e>t[r].lastSample.originDts&&e<t[r+1].originDts){a=r;break}t[r].originDts<e?s=r+1:n=r-1}return a}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,r=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?r=i+1:t.length>0&&(r=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=r,this._list.splice(r,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},"../xgplayer-utils/src/models/trackMeta.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/models/trackMeta.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}};t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}}},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={}}init(){let e=this;this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",t=>{e.addSourceBuffers()}),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src}addSourceBuffers(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e.sources.audio&&e.sources.video){if(Object.keys(this.sourceBuffers).length>=2)return;for(let t=0,i=Object.keys(e.sources).length;t<i;t++){let i=e.sources[Object.keys(e.sources)[t]],r="video"===Object.keys(e.sources)[t]?"video/mp4;codecs="+i.mimetype:"audio/mp4;codecs="+i.mimetype,s=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[Object.keys(e.sources)[t]]=s,s.addEventListener("updateend",()=>{this.doAppend()}),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],r=this.sourceBuffers[i];if(!r.updating){let t=e.sources[i];if(t&&!t.inited)r.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&r.appendBuffer(e.buffer.buffer)}}}}}},"../xgplayer-utils/src/write/Buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/Buffer.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),n=(r=s)&&r.__esModule?r:{default:r};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,n.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";var r,s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n="object"===("undefined"==typeof Reflect?"undefined":s(Reflect))?Reflect:null,a=n&&"function"==typeof n.apply?n.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};r=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function u(){u.init.call(this)}e.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var l=10;function d(e){return void 0===e._maxListeners?u.defaultMaxListeners:e._maxListeners}function c(e,t,i,r){var n,a,o,u;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===i?"undefined":s(i)));if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),o=a[t]),void 0===o)o=a[t]=i,++e._eventsCount;else if("function"==typeof o?o=a[t]=r?[i,o]:[o,i]:r?o.unshift(i):o.push(i),(n=d(e))>0&&o.length>n&&!o.warned){o.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=o.length,u=l,console&&console.warn&&console.warn(u)}return e}function f(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function h(e,t,i){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},s=f.bind(r);return s.listener=i,r.wrapFn=s,s}function p(e,t,i){var r=e._events;if(void 0===r)return[];var s=r[t];return void 0===s?[]:"function"==typeof s?i?[s.listener||s]:[s]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(s):_(s,s.length)}function y(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function _(e,t){for(var i=new Array(t),r=0;r<t;++r)i[r]=e[r];return i}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},u.prototype.getMaxListeners=function(){return d(this)},u.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var r="error"===e,s=this._events;if(void 0!==s)r=r&&void 0===s.error;else if(!r)return!1;if(r){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var u=s[e];if(void 0===u)return!1;if("function"==typeof u)a(u,this,t);else{var l=u.length,d=_(u,l);for(i=0;i<l;++i)a(d[i],this,t)}return!0},u.prototype.addListener=function(e,t){return c(this,e,t,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(e,t){return c(this,e,t,!0)},u.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":s(t)));return this.on(e,h(this,e,t)),this},u.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":s(t)));return this.prependListener(e,h(this,e,t)),this},u.prototype.removeListener=function(e,t){var i,r,n,a,o;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":s(t)));if(void 0===(r=this._events))return this;if(void 0===(i=r[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(n=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){o=i[a].listener,n=a;break}if(n<0)return this;0===n?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,n),1===i.length&&(r[e]=i[0]),void 0!==r.removeListener&&this.emit("removeListener",e,o||t)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){var t,i,r;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var s,n=Object.keys(i);for(r=0;r<n.length;++r)"removeListener"!==(s=n[r])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},u.prototype.listeners=function(e){return p(this,e,!0)},u.prototype.rawListeners=function(e){return p(this,e,!1)},u.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):y.call(e,t)},u.prototype.listenerCount=y,u.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},"./src/Flv.js":
/*!********************!*\
  !*** ./src/Flv.js ***!
  \********************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),s=c(i(/*! ./parse/demux */"./src/parse/demux/index.js")),n=c(i(/*! xgplayer-remux/src/mp4 */"../xgplayer-remux/src/mp4/index.js")),a=c(i(/*! xgplayer-utils/src/mse */"../xgplayer-utils/src/mse/index.js")),o=c(i(/*! xgplayer-loader-fetch */"../xgplayer-loader-fetch/dist/index.js")),u=c(i(/*! xgplayer-buffer/src/presouce */"../xgplayer-buffer/src/presouce.js")),l=i(/*! xgplayer-buffer/src/index */"../xgplayer-buffer/src/index.js"),d=i(/*! xgplayer-utils/dist/constants/events */"../xgplayer-utils/dist/constants/events.js");function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var h="FLVController",p=function(){function e(){f(this,e)}return r(e,[{key:"warn",value:function(){}}]),e}(),y=function(){function e(t){f(this,e),this.TAG=h,this._player=t,this.state={initSegmentArrived:!1,range:{start:0,end:""}}}return r(e,[{key:"init",value:function(){this._context.registry("FLV_DEMUXER",s.default),this._context.registry("FETCH_LOADER",o.default),this._context.registry("LOADER_BUFFER",l.XgBuffer),this._context.registry("TRACKS",l.Tracks),this._context.registry("MP4_REMUXER",n.default),this._context.registry("PRE_SOURCE_BUFFER",u.default),this._context.registry("LOGGER",p),this.mse=this._context.registry("MSE",a.default)({container:this._player}),this.initListeners()}},{key:"initListeners",value:function(){this.on(d.REMUX_EVENTS.MEDIA_SEGMENT,this.handleMediaSegment.bind(this)),this.on(d.DEMUX_EVENTS.MEDIA_INFO,this.handleMediaInfo.bind(this)),this.on(d.REMUX_EVENTS.INIT_SEGMENT,this.handleAppendInitSegment.bind(this))}},{key:"handleMediaInfo",value:function(){this._context.mediaInfo||this.emit(d.DEMUX_EVENTS.DEMUX_ERROR,new Error("failed to get mediainfo"));var e=this._context.getInstance("LOADER_BUFFER");this._context.getInstance("FETCH_LOADER");this.isSeekable&&(this.state.range={start:0,end:e.historyLen-1})}},{key:"handleMediaSegment",value:function(){this.mse.doAppend()}},{key:"handleAppendInitSegment",value:function(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}},{key:"seek",value:function(e){if(!this._player.isLive&&this.isSeekable)if(this.state.initSegmentArrived){var t=this._player.config.preloadTime,i=void 0===t?15:t,r=this.getRange(e,i);this.state.range=r,this.loadData()}else this.loadMeta()}},{key:"loadData",value:function(){var e=this.state,t=e.start,i=e.end;this._context.getInstance("FETCH_LOADER").load(this._player.config.url,{Range:"bytes="+t+"-"+i})}},{key:"loadMeta",value:function(){this._context.getInstance("FETCH_LOADER").load(this._player.config.url)}},{key:"getRange",value:function(e,t){var i=this._context.onMetaData.keyframes,r=this._context.getInstance("TRACKS").videoTrack.meta.timescale,s=function(e){for(var t=0,r=i.times.length;t<r;t++){var s=i.times[t],n=t+1<r?i.times[t+1]:Number.MAX_SAFE_INTEGER;if(s<=e&&e<=n)return t}return""};return{start:s(e*r),end:s((e+t)*r)}}},{key:"destroy",value:function(){}},{key:"isSeekable",get:function(){return!this._context||!this._context.mediaInfo.isComplete()||null!==this._context.mediaInfo.keyframes&&void 0!==this._context.mediaInfo.keyframes}}]),e}();t.default=y},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,i){"use strict";var r=u(i(/*! xgplayer */"xgplayer")),s=u(i(/*! xgplayer-utils/dist/Context */"../xgplayer-utils/dist/Context.js")),n=u(i(/*! ./Flv */"./src/Flv.js")),a=i(/*! xgplayer-utils/dist/constants/events */"../xgplayer-utils/dist/constants/events.js"),o=u(a);function u(e){return e&&e.__esModule?e:{default:e}}r.default.install("flvplayer",(function(){var e=this,t=r.default.util,i=new s.default(a.flvAllowedEvents),u=e.config.preloadTime||15,l=e.start,d=void 0;e.start=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.config.url;r&&(d=i.registry("FLV_CONTROLLER",n.default)(e),i.init(),d.once(o.default.INIT_SEGMENT,(function(){if(e.config.isLive){t.addClass(e.root,"xgplayer-is-live");var i=t.createDom("xg-live","正在直播",{},"xgplayer-live");e.controls.appendChild(i);var r=setInterval((function(){if(e.paused&&e.buffered.length)for(var t=0,i=e.buffered.length;t<i;t++)if(e.buffered.start(t)>e.currentTime){e.currentTime=e.buffered.start(t),clearInterval(r);break}}),200)}else clearTimeout(d.timer)})),l.call(e,d.mse.url),c())};var c=function(){Object.defineProperty(e,"src",{get:function(){return e.currentSrc},set:function(t){e.config.url=t,e.paused?e.start(t):(e.pause(),e.once("pause",(function(){e.start(t)})),e.once("canplay",(function(){e.play()}))),e.once("canplay",(function(){e.currentTime=0}))},configurable:!0})},f=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.currentTime,i=e.getBufferedRange();t<i[1]?e.config.isLive||i[1]-t<u&&d.seek(i[1]+1):d.seek(t)};e.on("timeupdate",(function(){f(e.currentTime+1),function(e,t){if(!e.config.isLive&&e.duration-e.currentTime<2){var i=e.getBufferedRange();e.currentTime-i[1]<.1&&t.mse.endOfStream()}}(e,d)})),e.on("seeking",(function(){f()})),e.on("waiting",(function(){if("live"===d.type)for(var t=e.buffered,i=t.length,r=e.currentTime,s=0;s<i;s++)if(t.start(s)>r){e.currentTime=t.start(s)+.1;break}})),e.once("destroy",(function(){d.destroy()}))}))},"./src/parse/demux/AMFParser.js":
/*!**************************************!*\
  !*** ./src/parse/demux/AMFParser.js ***!
  \**************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),s=a(i(/*! ../../../../xgplayer-utils/src/env/isLE */"../xgplayer-utils/src/env/isLE.js")),n=a(i(/*! ../../utils/UTF8 */"./src/utils/UTF8.js"));function a(e){return e&&e.__esModule?e:{default:e}}var o=0,u=1,l=2,d=3,c=8,f=9,h=10,p=11,y=12,_=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.offset=0,this.readOffset=this.offset}return r(e,[{key:"resolve",value:function(e,t){if(t<3)throw new Error("not enough data for metainfo");var i={},r=this.parseValue(e),s=this.parseValue(e,t-r.bodySize);return i[r.data]=s.data,this.resetStatus(),i}},{key:"resetStatus",value:function(){this.offset=0,this.readOffset=this.offset}},{key:"parseString",value:function(e){var t=new DataView(e,this.readOffset).getUint16(0,!s.default),i="";i=t>0?n.default.decode(new Uint8Array(e,this.readOffset+2,t)):"";var r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}},{key:"parseDate",value:function(e,t){var i=new DataView(e,this.readOffset,t),r=i.getFloat64(0,!s.default);return r+=60*i.getInt16(8,!s.default)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}},{key:"parseObject",value:function(e,t){var i=this.parseString(e,t),r=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:r.data},bodySize:i.bodySize+r.bodySize,isObjEnd:r.isObjEnd}}},{key:"parseLongString",value:function(e){var t=new DataView(e,this.readOffset).getUint32(0,!s.default),i="";return i=t>0?n.default.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}},{key:"parseValue",value:function(e,t){var i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;var r=o,n=u,a=l,_=d,m=c,g=f,v=h,E=p,b=y,A=new DataView(i,this.readOffset,t),w=!1,x=A.getUint8(0),T=1;this.readOffset+=1;var S=null;switch(x){case r:S=A.getFloat64(1,!s.default),this.readOffset+=8,T+=8;break;case n:S=!!A.getUint8(1),this.readOffset+=1,T+=1;break;case a:var R=this.parseString(i);S=R.data,T+=R.bodySize;break;case _:S={};var O=0;for(16777215&A.getUint32(t-4,!s.default)&&(O=3);T<t-4;){var M=this.parseObject(i,t-T-O);if(M.isObjectEnd)break;S[M.data.name]=M.data.value,T+=M.bodySize}if(T<=t-3)9===(16777215&A.getUint32(T-1,!s.default))&&(this.readOffset+=3,T+=3);break;case m:S={},T+=4,this.readOffset+=4;var D=0;for(9==(16777215&A.getUint32(t-4,!s.default))&&(D=3);T<t-8;){var L=this.parseObject(i,t-T-D);if(L.isObjectEnd)break;S[L.data.name]=L.data.value,T+=L.bodySize}if(T<=t-3)9===(16777215&A.getUint32(T-1,!s.default))&&(T+=3,this.readOffset+=3);break;case g:S=null,w=!0;break;case v:S=[];var k=A.getUint32(1,!s.default);T+=4,this.readOffset+=4;for(var j=0;j<k;j++){var B=this.parseValue(i,t-T);S.push(B.data),T+=B.bodySize}break;case E:var I=this.parseDate(i,t-1);S=I.data,T+=I.bodySize;break;case b:var U=this.parseLongString(i,t-1);S=U.data,T+=U.bodySize;break;default:T=t}return{data:S,bodySize:T,isObjEnd:w}}}]),e}();t.default=_},"./src/parse/demux/index.js":
/*!**********************************!*\
  !*** ./src/parse/demux/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),s=i(/*! ../../../../xgplayer-utils/src/constants/events */"../xgplayer-utils/src/constants/events.js"),n=l(i(/*! ./AMFParser */"./src/parse/demux/AMFParser.js")),a=l(i(/*! ../../../../xgplayer-utils/src/h264/SPSParser */"../xgplayer-utils/src/h264/SPSParser.js")),o=i(/*! ../../../../xgplayer-utils/src/models/trackMeta */"../xgplayer-utils/src/models/trackMeta.js"),u=i(/*! ../../../../xgplayer-buffer/src */"../xgplayer-buffer/src/index.js");function l(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}return r(e,[{key:"init",value:function(){this.on(s.LOADER_EVENTS.LOADER_DATALOADED,this.handleDataLoaded.bind(this))}},{key:"handleDataLoaded",value:function(){this.parseFlvStream()}},{key:"parseFlvStream",value:function(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;this._parseFlvTag()&&this.parseFlvStream()}else{if(this.loaderBuffer.length<13)return;var e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.parseFlvStream()}}},{key:"parseFlvHeader",value:function(t){if(e.isFlvFile(t)){this._firstFragmentLoaded=!0;var i=e.getPlayType(t[4]);i.hasVideo&&this.initVideoTrack(),i.hasAudio&&this.initAudioTrack()}else this.emit(s.DEMUX_EVENTS.DEMUX_ERROR,new Error("invalid flv file")),this.parseFlvStream();this.handleDataLoaded()}},{key:"initVideoTrack",value:function(){this._trackNum++;var e=new u.VideoTrack;e.meta=new o.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}},{key:"initAudioTrack",value:function(){this._trackNum++;var e=new u.AudioTrack;e.meta=new o.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}},{key:"_parseFlvTag",value:function(){if(this.loaderBuffer.length<11)return null;var e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}},{key:"_parseFlvTagHeader",value:function(){var e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.logger.warn(this.TAG,"tagType "+t.tagType),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);var r=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);var s=this.loaderBuffer.shift(1)[0];return s>0&&(r+=16777216*s),t.dts=r,this.loaderBuffer.shift(3),t}},{key:"_processChunk",value:function(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}},{key:"_parseScriptData",value:function(e){var t=this.tracks.audioTrack,i=this.tracks.videoTrack,r=this.loaderBuffer.shift(e.datasize),a=(new n.default).resolve(r,r.length),o=this._context.onMetaData=a?a.onMetaData:void 0;if(this._context.mediaInfo.duration=o.duration,this._context.mediaInfo.hasVideo=o.hasVideo,this._context.mediaInfo.hsaAudio=o.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(s.DEMUX_EVENTS.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){var u=t.meta;switch(o.audiosamplerate&&(u.sampleRate=o.audiosamplerate),o.audiochannels&&(u.channelCount=o.audiochannels),o.audiosamplerate){case 44100:u.sampleRateIndex=4;break;case 22050:u.sampleRateIndex=7;break;case 11025:u.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){var l=i.meta;if("number"==typeof o.framerate){var d=Math.floor(1e3*o.framerate);if(d>0){var c=d/1e3;l.frameRate||(l.frameRate={}),l.frameRate.fixed=!0,l.frameRate.fps=c,l.frameRate.fps_num=d,l.frameRate.fps_den=1e3}}}}},{key:"_aacSequenceHeaderParser",value:function(e){var t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec="mp4a.40."+t.objectType;var i=window.navigator.userAgent.toLowerCase(),r=void 0,s=void 0;return-1!==i.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,s=new Array(4),r=samplingIndex-3):(t.objectType=2,s=new Array(2),r=samplingIndex):-1!==i.indexOf("android")?(t.objectType=2,s=new Array(2),r=samplingIndex):(t.objectType=5,r=t.sampleRateIndex,s=new Array(4),t.sampleRateIndex>=6?r=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,s=new Array(2),r=t.sampleRateIndex)),s[0]=t.objectType<<3,s[0]|=(15&t.sampleRateIndex)>>>1,s[1]=(15&t.sampleRateIndex)<<7,s[1]|=(15&t.channelCount)<<3,5===t.objectType&&(s[1]|=(15&r)>>>1,s[2]=(1&r)<<7,s[2]|=8,s[3]=0),t.config=s,t}},{key:"_parseAACData",value:function(e){var t=this.tracks.audioTrack;if(t){var i=t.meta;i||(i=new o.AudioTrackMeta);var r=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);var n=(240&r)>>>4;t.format=n,10!==n&&this.emit(s.DEMUX_EVENTS.DEMUX_ERROR,new Error("invalid audio format: "+n)),10!==n||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(r),i.sampleRateIndex=(12&r)>>>2,i.frameLenth=(2&r)>>>1,i.channelCount=1&r,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));var a=i.audioSampleRate,u=i.sampleRateIndex,l=i.refSampleDuration;delete e.tagType;var d=this._datasizeValidator(e.datasize);if(0===e.data[0]){var c=this._aacSequenceHeaderParser(e.data);a=c.audiosamplerate||i.audioSampleRate,u=c.sampleRateIndex||i.sampleRateIndex,l=Math.floor(1024/a*i.timescale),i.channelCount=c.channelCount,i.sampleRate=a,i.sampleRateIndex=u,i.refSampleDuration=l,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=c.config;var f=this._context.mediaInfo.audio;f.codec=c.codec,f.channelCount=c.channelCount,f.sampleRate=a,f.sampleRateIndex=c.audioSampleRateIndex,!this._hasScript||this._hasAudioSequence||this.tracks.videoTrack&&!this._hasVideoSequence?this._hasScript&&this._hasAudioSequence&&this.emit(s.DEMUX_EVENTS.AUDIO_METADATA_CHANGE):this.emit(s.DEMUX_EVENTS.METADATA_PARSED,"audio"),this._hasAudioSequence=!0}else e.data=e.data.slice(1,e.data.length),t.samples.push(e),this.emit(s.DEMUX_EVENTS.DEMUX_COMPLETE);d||this.logger.warn(this.TAG,"TAG length error at "+e.datasize)}}},{key:"_parseHevcData",value:function(e){var t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;var i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){var r=this.loaderBuffer.shift(e.datasize-5);if(e.data=r,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize);var n={},a=0;for(n.cts=e.cts,n.dts=e.dts;e.data.length>a;){var o=e.data.slice(Number.parseInt(a),4+a);n.size=o[3],n.size+=256*o[2],n.size+=256*o[1]*256,n.size+=256*o[0]*256*256,a+=4,n.data=e.data.slice(Number.parseInt(a),n.size+a),a+=n.size,this.tracks.videoTrack.samples.push(n),this.emit(s.DEMUX_EVENTS.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(s.DEMUX_EVENTS.METADATA_PARSED,"video"):this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize))}else if(7===i){var u=this.loaderBuffer.shift(e.datasize-5);if(0===u[4]&&0===u[5]&&0===u[6]&&1===u[7]){for(var l=0,d=0;d<4;d++)l=256*l+u[d];l-=4,(u=u.slice(4,u.length))[3]=l%256,l=(l-u[3])/256,u[2]=l%256,l=(l-u[2])/256,u[1]=l%256,u[0]=(l-u[1])/256}if(e.data=u,0===e.avcPacketType){this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(s.DEMUX_EVENTS.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(s.DEMUX_EVENTS.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0)}else{if(!this._datasizeValidator(e.datasize))return void this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize);this.tracks.videoTrack.samples.push(e),this.emit(s.DEMUX_EVENTS.DEMUX_COMPLETE)}}else this.logger.warn(this.TAG,"video codeid is "+i),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,"invalid video tag datasize: "+e.datasize),this.tracks.videoTrack.samples.push(e),this.emit(s.DEMUX_EVENTS.DEMUX_COMPLETE);delete e.tagType}},{key:"_avcSequenceHeaderParser",value:function(e){var t=this.tracks.videoTrack;if(t){var i=0;t.meta||(t.meta=new o.VideoTrackMeta);var r=t.meta;r.configurationVersion=e[0],r.avcProfileIndication=e[1],r.profileCompatibility=e[2],r.avcLevelIndication=e[3]/10,r.nalUnitLength=1+(3&e[4]);var s=31&e[5];i=6;for(var n={},u=0;u<s;u++){var l=255*e[i]+e[i+1];i+=2;for(var d=new Uint8Array(l),c=0;c<l;c++)d[c]=e[i+c];for(var f="avc1.",h=1;h<4;h++){var p=d[h].toString(16);p.length<2&&(p="0"+p),f+=p}r.codec=f,i+=l,this.tracks.videoTrack.meta.sps=d,n=a.default.parseSPS(d)}var y=e[i];i++;for(var _=0;_<y;_++){var m=255*e[i]+e[i+1];i+=2;for(var g=new Uint8Array(m),v=0;v<m;v++)g[v]=e[i+v];i+=m,this.tracks.videoTrack.meta.pps=g}Object.assign(r,a.default.toVideoMeta(n));var E=this._context.mediaInfo.video;E.codec=r.codec,E.profile=r.profile,E.level=r.level,E.chromaFormat=r.chromaFormat,E.frameRate=r.frameRate,E.parRatio=r.parRatio,E.width=E.width===r.presentWidth?E.width:r.presentWidth,E.height=E.height===r.presentHeight?E.width:r.presentHeight,r.duration=this._context.mediaInfo.duration*r.timescale,r.avcc=new Uint8Array(e.length),r.avcc.set(e),t.meta=r}}},{key:"_switchAudioSampleRate",value:function(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}},{key:"_switchAudioSamplingFrequency",value:function(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}},{key:"_switchAudioChannel",value:function(e){return[1,2][1&e]}},{key:"_datasizeValidator",value:function(e){var t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}},{key:"loaderBuffer",get:function(){if(this._context.getInstance("LOADER_BUFFER"))return this._context.getInstance("LOADER_BUFFER");this.emit(s.DEMUX_EVENTS.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}},{key:"tracks",get:function(){return this._context.getInstance("TRACKS")}},{key:"logger",get:function(){return this._context.getInstance("LOGGER")}}],[{key:"isFlvFile",value:function(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}},{key:"getPlayType",value:function(e){var t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}}]),e}();t.default=d},"./src/utils/UTF8.js":
/*!***************************!*\
  !*** ./src/utils/UTF8.js ***!
  \***************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}();var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"decode",value:function(t){for(var i=[],r=t,s=0,n=t.length;s<n;)if(r[s]<128)i.push(String.fromCharCode(r[s])),++s;else{if(r[s]<192);else if(r[s]<224){if(e._checkContinuation(r,s,1)){var a=(31&r[s])<<6|63&r[s+1];if(a>=128){i.push(String.fromCharCode(65535&a)),s+=2;continue}}}else if(r[s]<240){if(e._checkContinuation(r,s,2)){var o=(15&r[s])<<12|(63&r[s+1])<<6|63&r[s+2];if(o>=2048&&55296!=(63488&o)){i.push(String.fromCharCode(65535&o)),s+=3;continue}}}else if(r[s]<248&&e._checkContinuation(r,s,3)){var u=(7&r[s])<<18|(63&r[s+1])<<12|(63&r[s+2])<<6|63&r[s+3];if(u>65536&&u<1114112){u-=65536,i.push(String.fromCharCode(u>>>10|55296)),i.push(String.fromCharCode(1023&u|56320)),s+=4;continue}}i.push(String.fromCharCode(65533)),++s}return i.join("")}},{key:"_checkContinuation",value:function(e,t,i){var r=e;if(t+i<r.length){for(;i--;)if(128!=(192&r[++t]))return!1;return!0}return!1}}]),e}();t.default=s},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!***************************!*\
  !*** external "xgplayer" ***!
  \***************************/
/*! no static exports found */function(t,i){t.exports=e}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvLi4veGdwbGF5ZXItYnVmZmVyL3NyYy9UcmFjay5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvLi4veGdwbGF5ZXItYnVmZmVyL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvLi4veGdwbGF5ZXItYnVmZmVyL3NyYy9wcmVzb3VjZS5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvLi4veGdwbGF5ZXItbG9hZGVyLWZldGNoL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4uL3hncGxheWVyLXJlbXV4L3NyYy9tcDQvZm1wNC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvLi4veGdwbGF5ZXItcmVtdXgvc3JjL21wNC9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvLi4veGdwbGF5ZXItdXRpbHMvZGlzdC9Db250ZXh0LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi8uLi94Z3BsYXllci11dGlscy9kaXN0L2NvbnN0YW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4uL3hncGxheWVyLXV0aWxzL2Rpc3QvbW9kZWxzL01lZGlhSW5mby5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvLi4veGdwbGF5ZXItdXRpbHMvZGlzdC93cml0ZS9CdWZmZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4uL3hncGxheWVyLXV0aWxzL25vZGVfbW9kdWxlcy9jb25jYXQtdHlwZWQtYXJyYXkvbGliL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvLi4veGdwbGF5ZXItdXRpbHMvbm9kZV9tb2R1bGVzL2NvbmNhdC10eXBlZC1hcnJheS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4uL3hncGxheWVyLXV0aWxzL3NyYy9jb25zdGFudHMvZXZlbnRzLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi8uLi94Z3BsYXllci11dGlscy9zcmMvZW52L2lzTEUuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4uL3hncGxheWVyLXV0aWxzL3NyYy9lbnYvc25pZmZlci5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvLi4veGdwbGF5ZXItdXRpbHMvc3JjL2gyNjQvU1BTUGFyc2VyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi8uLi94Z3BsYXllci11dGlscy9zcmMvaDI2NC9nb2xvbWIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvTWVkaWFTYW1wbGUuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvTWVkaWFTZWdtZW50LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi8uLi94Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL01lZGlhU2VnbWVudExpc3QuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvdHJhY2tNZXRhLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi8uLi94Z3BsYXllci11dGlscy9zcmMvbXNlL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi8uLi94Z3BsYXllci11dGlscy9zcmMvd3JpdGUvQnVmZmVyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi8uL3NyYy9GbHYuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi8uL3NyYy9wYXJzZS9kZW11eC9BTUZQYXJzZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4vc3JjL3BhcnNlL2RlbXV4L2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi8uL3NyYy91dGlscy9VVEY4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi9leHRlcm5hbCBcInhncGxheWVyXCIiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfeGdwbGF5ZXJfXyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJpZCIsInNlcXVlbmNlTnVtYmVyIiwic2FtcGxlcyIsImxlbmd0aCIsInJlc2V0IiwiZGlzdHJveSIsIlRyYWNrcyIsImF1ZGlvVHJhY2siLCJ2aWRlb1RyYWNrIiwiWGdCdWZmZXIiLCJoaXN0b3J5TGVuIiwiYXJyYXkiLCJvZmZzZXQiLCJwdXNoIiwiZGF0YSIsImJ5dGVMZW5ndGgiLCJzaGlmdCIsIlVpbnQ4QXJyYXkiLCJ1bmRlZmluZWQiLCJfc2hpZnRCdWZmZXIiLCJyZXQiLCJzbGljZSIsInRtcG9mZiIsInRtcCIsInNldCIsInRlbXBsZW5ndGgiLCJjbGVhciIsImRlc3Ryb3kiLCJ0b0ludCIsInN0YXJ0IiwicmV0SW50IiwiQXVkaW9UcmFjayIsIlRyYWNrIiwic3VwZXIiLCJUQUciLCJ0eXBlIiwiVmlkZW9UcmFjayIsImRyb3BwZWQiLCJSZW11eEJ1ZmZlciIsInZpZGVvIiwiYXVkaW8iLCJTb3VyY2UiLCJtaW1ldHlwZSIsImluaXQiLCJzb3VyY2VzIiwiZ2V0U291cmNlIiwic291cmNlIiwiY3JlYXRlU291cmNlIiwiZSIsImRlZmF1bHQiLCJDb250ZXh0IiwiY29uZmlncyIsImFzc2lnbiIsInVybCIsInN0YXR1cyIsImVycm9yIiwiX3JlYWRlciIsInJlYWR0eXBlIiwiYnVmZmVyIiwiZ2V0UGFyYW1zIiwiZmV0Y2giLCJ0aGVuIiwibG9hZGluZyIsIl9vbkZldGNoUmVzcG9uc2UiLCJfY29udGV4dCIsImdldEluc3RhbmNlIiwib2siLCJqc29uIiwiZW1pdCIsIkxPQURFUl9FVkVOVFMiLCJMT0FERVJfQ09NUExFVEUiLCJ0ZXh0IiwiX29uUmVhZGVyIiwiYm9keSIsImdldFJlYWRlciIsImNhbmNlbCIsInJlYWQiLCJkb25lIiwiTE9BREVSX0RBVEFMT0FERUQiLCJjYXRjaCIsImNvbnNvbGUiLCJsb2ciLCJIZWFkZXJzIiwibWV0aG9kIiwiaGVhZGVycyIsImNhY2hlIiwiYXBwZW5kIiwiY29ycyIsIndpdGhDcmVkZW50aWFscyIsImNyZWRlbnRpYWxzIiwiX2VtaXR0ZXIiLCJFdmVudEVtaXR0ZXIiLCJfaW5zdGFuY2VNYXAiLCJfY2xzTWFwIiwiX2luaXRlZCIsIm1lZGlhSW5mbyIsImFsbG93ZWRFdmVudHMiLCJFcnJvciIsImluaXRJbnN0YW5jZSIsIl9pc01lc3NhZ2VOYW1lVmFsaWQiLCJsaXN0ZW5lcnMiLCJvbiIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lcnMiLCJrZXlzIiwiZm9yRWFjaCIsImRlc3Ryb3lJbnN0YW5jZXMiLCJpbmRleE9mIiwibWltZVR5cGUiLCJkdXJhdGlvbiIsImhhc1ZpZGVvIiwiY29kZWMiLCJ3aWR0aCIsImhlaWdodCIsInByb2ZpbGUiLCJsZXZlbCIsImZyYW1lUmF0ZSIsImZpeGVkIiwiZnBzIiwiZnBzX251bSIsImZwc19kZW4iLCJjaHJvbWFGb3JtYXQiLCJwYXJSYXRpbyIsImhhc0F1ZGlvIiwic2FtcGxlUmF0ZSIsInNhbXBsZVJhdGVJbmRleCIsImNoYW5uZWxDb3VudCIsImlzQmFzZUluZm9SZWFkeSIsImlzVmlkZW9SZWFkeSIsImlzQXVkaW9SZWFkeSIsIlJlZmxlY3QiLCJhcHBseSIsIkZ1bmN0aW9uIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25jYXQiLCJOdW1iZXIiLCJpc05hTiIsInUiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImEiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiZiIsIlR5cGVFcnJvciIsIm5ld0xpc3RlbmVyIiwibGlzdGVuZXIiLCJ1bnNoaWZ0Iiwid2FybmVkIiwiU3RyaW5nIiwiZW1pdHRlciIsImNvdW50Iiwid2FybiIsImFyZ3VtZW50cyIsImZpcmVkIiwidGFyZ2V0IiwicmVtb3ZlTGlzdGVuZXIiLCJ3cmFwRm4iLCJoIiwiQXJyYXkiLCJfIiwiUmFuZ2VFcnJvciIsImdldFByb3RvdHlwZU9mIiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwibWVzc2FnZSIsImNvbnRleHQiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJwb3AiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyYXdMaXN0ZW5lcnMiLCJsaXN0ZW5lckNvdW50IiwiZXZlbnROYW1lcyIsIkxPQURFUl9FUlJPUiIsIkRFTVVYX0VWRU5UUyIsIkRFTVVYX0NPTVBMRVRFIiwiREVNVVhfRVJST1IiLCJNRVRBREFUQV9QQVJTRUQiLCJWSURFT19NRVRBREFUQV9DSEFOR0UiLCJBVURJT19NRVRBREFUQV9DSEFOR0UiLCJNRURJQV9JTkZPIiwiUkVNVVhfRVZFTlRTIiwiTUVESUFfU0VHTUVOVCIsIlJFTVVYX0VSUk9SIiwiSU5JVF9TRUdNRU5UIiwiZmx2QWxsb3dlZEV2ZW50cyIsIkZtcDQiLCJCdWZmZXIiLCJ3cml0ZVVpbnQzMiIsInNpemUiLCJjb250ZW50Iiwid3JpdGUiLCJ2ZXJzaW9uIiwiZmxhZyIsImluaXRCb3giLCJtZXRhIiwidHJhayIsIm12aGQiLCJ0aW1lc2NhbGUiLCJ2aWRlb1RyYWsiLCJhdWRpb1RyYWsiLCJtdmV4IiwiaXRlbSIsImJ5dGVzIiwidGtoZCIsInByZXNlbnRXaWR0aCIsInByZXNlbnRIZWlnaHQiLCJtZGlhIiwiYXZjYyIsInNhbXBsZXJhdGUiLCJjb25maWciLCJtZWRpYVRpbWUiLCJtZGhkIiwiaGRsciIsIm1pbmYiLCJleHRlbnNpb24iLCJzcGxpY2UiLCJ2bWhkIiwic21oZCIsImRpbmYiLCJzdGJsIiwic3RzZCIsInN0dHMiLCJzdHNjIiwic3RzeiIsInN0Y28iLCJtcDRhIiwiYXZjMSIsImVzZHMiLCJjb25maWdsZW4iLCJoU3BhY2luZyIsInZTcGFjaW5nIiwiYnRydCIsInBhc3AiLCJ0cmFja0lEIiwibWVoZCIsInRyZXgiLCJtZmhkIiwidHJhZiIsInNlcXVlbmNlIiwidGZoZCIsInRmZHQiLCJ0aW1lIiwic2R0cCIsInRydW4iLCJzZHRwTGVuZ3RoIiwic2FtcGxlQ291bnQiLCJmbGFncyIsImlzTGVhZGluZyIsImRlcGVuZHNPbiIsImlzRGVwZW5kZWRPbiIsImhhc1JlZHVuZGFuY3kiLCJpc05vblN5bmMiLCJjdHMiLCJudW0iLCJtZGF0Qm94IiwidW5pdCIsImNoYXJDb2RlQXQiLCJNcDRSZW11eGVyIiwiX2R0c0Jhc2UiLCJfaXNEdHNCYXNlSW5pdGVkIiwiX2F1ZGlvTmV4dER0cyIsIl92aWRlb05leHREdHMiLCJfdmlkZW9TZWdtZW50TGlzdCIsIk1lZGlhU2VnbWVudExpc3QiLCJfYXVkaW9TZWdtZW50TGlzdCIsImJyb3dzZXIiLCJzbmlmZmVyIiwiX2ZpbGxTaWxlbmNlRnJhbWUiLCJyZW11eCIsIm9uTWV0YURhdGFSZWFkeSIsIl9kdHNCYXNlSW5pdGVkIiwiY2FsY0R0c0Jhc2UiLCJfcmVtdXhWaWRlbyIsIl9yZW11eEF1ZGlvIiwic2VlayIsIm1vb3YiLCJ0cmFjayIsImluaXRTZWdtZW50IiwiZnR5cCIsInByZXNvdXJjZWJ1ZmZlciIsImF1ZGlvQmFzZSIsIkluZmluaXR5IiwidmlkZW9CYXNlIiwiZHRzIiwiTWF0aCIsIm1pbiIsImR0c0NvcnJlY3Rpb24iLCJmaXJzdER0cyIsImxhc3REdHMiLCJmaXJzdFB0cyIsImxhc3RQdHMiLCJtcDRTYW1wbGVzIiwidmlkZW9TZWdtZW50IiwiTWVkaWFTZWdtZW50IiwiYXZjU2FtcGxlIiwiaXNLZXlmcmFtZSIsImlzRW1wdHkiLCJsYXN0U2VnbWVudCIsImdldExhc3RTZWdtZW50QmVmb3JlIiwiZ2FwIiwibGFzdEdhcCIsIm9yaWdpbkR0cyIsInB0cyIsIm1kYXRTYW1wbGUiLCJzYW1wbGVEdXJhdGlvbiIsInZpZGVvTWV0YSIsInJlZlNhbXBsZUR1cmF0aW9uIiwicmFwIiwiTWVkaWFTYW1wbGUiLCJpc1JBUCIsImFkZFJBUCIsImZpcnN0IiwibGFzdCIsInN0YXJ0RHRzIiwiZW5kRHRzIiwic3RhcnRQdHMiLCJlbmRQdHMiLCJvcmlnaW5TdGFydER0cyIsIm9yaWdpbkVuZER0cyIsImZpcnN0U2FtcGxlIiwibGFzdFNhbXBsZSIsIm1vb2ZNZGF0IiwibW9vZiIsIm1kYXQiLCJzaWxlbnREdXJhdGlvbiIsImlzRmlyc3REdHNJbml0ZWQiLCJzYW1wbGUiLCJuZWVkU2lsZW50RnJhbWUiLCJnZXRMYXN0U2FtcGxlQmVmb3JlIiwic2lsZW50RnJhbWUiLCJpbml0U2lsZW50QXVkaW8iLCJhdWRpb01ldGEiLCJtcDRTYW1wbGUiLCJhdWRpb1NlZ21lbnQiLCJnZXRTaWxlbnRGcmFtZSIsIl9hdWRpb01ldGEiLCJvYmoiLCJfTWVkaWFJbmZvIiwiX01lZGlhSW5mbzIiLCJldmVudHMiLCJ0YWciLCJhcmdzIiwibmV3SW5zdGFuY2UiLCJyZWdpc3RyeSIsImNscyIsImNoZWNrTWVzc2FnZU5hbWUiLCJzZWxmIiwibWVzc2FnZU5hbWUiLCJjYWxsYmFjayIsImhhc093biIsImNhbGxiYWNrcyIsImV2ZW50c09iaiIsImlzT2JqZWN0RmlsbGVkIiwiTWVkaWFJbmZvIiwiaXNDb21wbGV0ZSIsIl9jb25jYXRUeXBlZEFycmF5IiwiX2NvbmNhdFR5cGVkQXJyYXkyIiwiYXJyIiwidGVtcCIsImhleE51bSIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJwYWRTdGFydDRIZXgiLCJwYXJzZUludCIsIlJlc3VsdENvbnN0cnVjdG9yIiwidG90YWxMZW5ndGgiLCJfbGVuIiwiYXJyYXlzIiwiX2tleSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJpdGVyYXRvciIsIm5leHQiLCJlcnIiLCJyZXR1cm4iLCJyZXN1bHQiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJfYXJyIiwiX2NvbmNhdCIsIl9jb25jYXQyIiwibGUiLCJidWYiLCJBcnJheUJ1ZmZlciIsIkRhdGFWaWV3Iiwic2V0SW50MTYiLCJJbnQxNkFycmF5Iiwib3MiLCJpc1BjIiwiaXNUYWJsZXQiLCJ1YSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwicmVnIiwiaWUiLCJmaXJmb3giLCJjaHJvbWUiLCJvcGVyYSIsInNhZmFyaSIsImZpbHRlciIsInRlc3QiLCJpc1dpbmRvd3NQaG9uZSIsImlzU3ltYmlhbiIsImlzQW5kcm9pZCIsImlzRmlyZUZveCIsImlzUGhvbmUiLCJTUFNQYXJzZXIiLCJ1aW50OGFycmF5Iiwic3JjIiwic3JjTGVuZ3RoIiwiZHN0IiwiZHN0SWR4IiwicmJzcCIsIl9lYnNwMnJic3AiLCJnYiIsIkdvbG9tYiIsInJlYWRCeXRlIiwicHJvZmlsZUlkYyIsImxldmVsSWRjIiwicmVhZFVFRyIsInByb2ZpbGVfc3RyaW5nIiwiZ2V0UHJvZmlsZVN0cmluZyIsImxldmVsX3N0cmluZyIsImdldExldmVsU3RyaW5nIiwiY2hyb21hX2Zvcm1hdF9pZGMiLCJjaHJvbWFfZm9ybWF0IiwiY2hyb21hX2Zvcm1hdF90YWJsZSIsImJpdF9kZXB0aCIsInJlYWRCaXRzIiwicmVhZEJvb2wiLCJzY2FsaW5nX2xpc3RfY291bnQiLCJfc2tpcFNjYWxpbmdMaXN0IiwicGljX29yZGVyX2NudF90eXBlIiwicmVhZFNFRyIsIm51bV9yZWZfZnJhbWVzX2luX3BpY19vcmRlcl9jbnRfY3ljbGUiLCJwaWNfd2lkdGhfaW5fbWJzX21pbnVzMSIsInBpY19oZWlnaHRfaW5fbWFwX3VuaXRzX21pbnVzMSIsImZyYW1lX21ic19vbmx5X2ZsYWciLCJmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0IiwiZnJhbWVfY3JvcF9yaWdodF9vZmZzZXQiLCJmcmFtZV9jcm9wX3RvcF9vZmZzZXQiLCJmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQiLCJwYXJfd2lkdGgiLCJwYXJfaGVpZ2h0IiwiZnBzX2ZpeGVkIiwiYXNwZWN0X3JhdGlvX2lkYyIsInBhcl93X3RhYmxlIiwicGFyX2hfdGFibGUiLCJudW1fdW5pdHNfaW5fdGljayIsInRpbWVfc2NhbGUiLCJwYXJTY2FsZSIsImNyb3BfdW5pdF94IiwiY3JvcF91bml0X3kiLCJjb2RlY193aWR0aCIsImNvZGVjX2hlaWdodCIsInByZXNlbnRfd2lkdGgiLCJjZWlsIiwiY2hyb21hX2Zvcm1hdF9zdHJpbmciLCJnZXRDaHJvbWFGb3JtYXRTdHJpbmciLCJmcmFtZV9yYXRlIiwicGFyX3JhdGlvIiwiY29kZWNfc2l6ZSIsInByZXNlbnRfc2l6ZSIsImxhc3Rfc2NhbGUiLCJuZXh0X3NjYWxlIiwiZGVsdGFfc2NhbGUiLCJ0b0ZpeGVkIiwiY2hyb21hIiwic3BzQ29uZmlnIiwiY29kZWNXaWR0aCIsImNvZGVjSGVpZ2h0IiwiYml0RGVwdGgiLCJmcHNEZW4iLCJmcHNOdW0iLCJmbG9vciIsIl9idWZmZXIiLCJfYnVmZmVySW5kZXgiLCJfdG90YWxCeXRlcyIsIl90b3RhbEJpdHMiLCJfY3VycmVudFdvcmQiLCJfY3VycmVudFdvcmRCaXRzTGVmdCIsIl9maWxsQ3VycmVudFdvcmQiLCJidWZmZXJCeXRlc0xlZnQiLCJieXRlc1JlYWQiLCJ3b3JkIiwic3ViYXJyYXkiLCJnZXRVaW50MzIiLCJiaXRzIiwiYml0c05lZWRMZWZ0IiwiYml0c1JlYWROZXh0IiwicmVzdWx0MiIsIl9za2lwTGVhZGluZ1plcm8iLCJ6ZXJvQ291bnQiLCJsZWFkaW5nWmVyb3MiLCJpbmZvIiwiX2RlZmF1bHQiLCJnZXREZWZhdWx0SW5mIiwiZW50cmllcyIsImsiLCJ2IiwicG9zaXRpb24iLCJyYW5kb21BY2Nlc3NQb2ludHMiLCJfdHlwZSIsIl9saXN0IiwiX2xhc3RBcHBlbmRMb2NhdGlvbiIsIl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZSIsImJlZ2luRHRzIiwibGlzdCIsIm1pZCIsImxib3VuZCIsInVib3VuZCIsImlkeCIsIl9zZWFyY2hOZWFyZXN0U2VnbWVudEFmdGVyIiwic2VnbWVudCIsImxhc3RBcHBlbmRJZHgiLCJpbnNlcnRJZHgiLCJnZXRMYXN0UkFQQmVmb3JlIiwic2VnbWVudElkeCIsIkF1ZGlvVHJhY2tNZXRhIiwiVmlkZW9UcmFja01ldGEiLCJzcHMiLCJwcHMiLCJjb250YWluZXIiLCJtZWRpYVNvdXJjZSIsInNvdXJjZUJ1ZmZlcnMiLCJfdGhpcyIsIk1lZGlhU291cmNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFkZFNvdXJjZUJ1ZmZlcnMiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJtaW1lIiwic291cmNlQnVmZmVyIiwiYWRkU291cmNlQnVmZmVyIiwiZG9BcHBlbmQiLCJ1cGRhdGluZyIsImluaXRlZCIsImFwcGVuZEJ1ZmZlciIsIlJlZmxlY3RPd25LZXlzIiwiUiIsIlJlZmxlY3RBcHBseSIsInJlY2VpdmVyIiwiTnVtYmVySXNOYU4iLCIkZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsIl9hZGRMaXN0ZW5lciIsInByZXBlbmQiLCJleGlzdGluZyIsIndhcm5pbmciLCJ3Iiwib25jZVdyYXBwZXIiLCJfb25jZVdyYXAiLCJzdGF0ZSIsIndyYXBwZWQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJjb3B5IiwiYXJnIiwiZG9FcnJvciIsImVyIiwiaGFuZGxlciIsImxlbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJpbmRleCIsInNwbGljZU9uZSIsIlRhZyIsIkxvZ2dlciIsIkZsdkNvbnRyb2xsZXIiLCJwbGF5ZXIiLCJfcGxheWVyIiwiaW5pdFNlZ21lbnRBcnJpdmVkIiwicmFuZ2UiLCJlbmQiLCJGbHZEZW11eGVyIiwiRmV0Y2hMb2FkZXIiLCJQcmVzb3VyY2UiLCJtc2UiLCJNU0UiLCJpbml0TGlzdGVuZXJzIiwiaGFuZGxlTWVkaWFTZWdtZW50IiwiaGFuZGxlTWVkaWFJbmZvIiwiaGFuZGxlQXBwZW5kSW5pdFNlZ21lbnQiLCJpc1NlZWthYmxlIiwiaXNMaXZlIiwicHJlbG9hZFRpbWUiLCJnZXRSYW5nZSIsImxvYWREYXRhIiwibG9hZE1ldGEiLCJsb2FkIiwiUmFuZ2UiLCJrZXlmcmFtZXMiLCJvbk1ldGFEYXRhIiwiZmluZEZpbGVQb3NpdGlvbiIsInRpbWVzIiwiY3VycmVudEtleWZyYW1lVGltZSIsIm5leHRLZXlmcmFtZVRpbWUiLCJNQVhfU0FGRV9JTlRFR0VSIiwiUGxheWVyIiwiaW5zdGFsbCIsInV0aWwiLCJfc3RhcnQiLCJmbHYiLCJGTFYiLCJhbGxFdmVudHMiLCJhZGRDbGFzcyIsImxpdmUiLCJjcmVhdGVEb20iLCJjb250cm9scyIsImFwcGVuZENoaWxkIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsInBhdXNlZCIsImJ1ZmZlcmVkIiwiY3VycmVudFRpbWUiLCJjbGVhckludGVydmFsIiwiY2xlYXJUaW1lb3V0IiwiaW5pdFNyY0NoYW5nZUhhbmRsZXIiLCJjdXJyZW50U3JjIiwicGF1c2UiLCJwbGF5IiwiY29uZmlndXJhYmxlIiwiZ2V0QnVmZmVyZWRSYW5nZSIsImVuZE9mU3RyZWFtIiwiaXNFbmRlZCIsIkRBVEFfVFlQRVMiLCJBTUZQYXJzZXIiLCJyZWFkT2Zmc2V0IiwibWV0YURhdGEiLCJwYXJzZVZhbHVlIiwiYm9keVNpemUiLCJyZXNldFN0YXR1cyIsInN0ckxlbiIsImdldFVpbnQxNiIsImlzTGUiLCJzdHIiLCJVVEY4IiwiZGVjb2RlIiwiZHYiLCJ0cyIsImdldEZsb2F0NjQiLCJnZXRJbnQxNiIsIkRhdGUiLCJwYXJzZVN0cmluZyIsImlzT2JqRW5kIiwiTlVNQkVSIiwiQk9PTEVBTiIsIlNUUklORyIsIk9CSkVDVCIsIk1JWF9BUlJBWSIsIk9CSkVDVF9FTkQiLCJTVFJJQ1RfQVJSQVkiLCJEQVRFIiwiTE9ORV9TVFJJTkciLCJkYXRhVmlldyIsImdldFVpbnQ4Iiwib2JqRW5kU2l6ZSIsImFtZk9iaiIsInBhcnNlT2JqZWN0IiwiaXNPYmplY3RFbmQiLCJhbWZWYXIiLCJhcnJMZW5ndGgiLCJzY3JpcHQiLCJkYXRlIiwicGFyc2VEYXRlIiwibG9uZ1N0ciIsInBhcnNlTG9uZ1N0cmluZyIsIl9maXJzdEZyYWdtZW50TG9hZGVkIiwiX3RyYWNrTnVtIiwiX2hhc1NjcmlwdCIsImhhbmRsZURhdGFMb2FkZWQiLCJwYXJzZUZsdlN0cmVhbSIsImxvYWRlckJ1ZmZlciIsIl9wYXJzZUZsdlRhZyIsImhlYWRlciIsInBhcnNlRmx2SGVhZGVyIiwiaXNGbHZGaWxlIiwicGxheVR5cGUiLCJnZXRQbGF5VHlwZSIsImluaXRWaWRlb1RyYWNrIiwiaW5pdEF1ZGlvVHJhY2siLCJ0cmFja3MiLCJjaHVuayIsIl9wYXJzZUZsdlRhZ0hlYWRlciIsIl9wcm9jZXNzQ2h1bmsiLCJ0YWdUeXBlIiwiZmlsdGVyZWQiLCJkYXRhc2l6ZSIsImxvZ2dlciIsInRpbWVzdGFtcCIsInRpbWVzdGFtcEV4dCIsIl9wYXJzZVNjcmlwdERhdGEiLCJfcGFyc2VBQUNEYXRhIiwiX3BhcnNlSGV2Y0RhdGEiLCJyZXNvbHZlIiwiaHNhQXVkaW8iLCJfZGF0YXNpemVWYWxpZGF0b3IiLCJoYXNTcGVjaWZpY0NvbmZpZyIsImF1ZGlvc2FtcGxlcmF0ZSIsImF1ZGlvY2hhbm5lbHMiLCJmcmFtZXJhdGUiLCJvYmplY3RUeXBlIiwiX3N3aXRjaEF1ZGlvU2FtcGxlUmF0ZSIsImZyYW1lTGVuZ3RoIiwiZGVwZW5kc09uQ29yZUNvZGVyIiwiZXh0ZW5zaW9uRmxhZ0luZGV4IiwiZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCIsInNhbXBsaW5nSW5kZXgiLCJmb3JtYXQiLCJfaGFzQXVkaW9TZXF1ZW5jZSIsIl9zd2l0Y2hBdWRpb1NhbXBsaW5nRnJlcXVlbmN5IiwiZnJhbWVMZW50aCIsImF1ZGlvU2FtcGxlUmF0ZSIsImF1ZGlvU2FtcGxlUmF0ZUluZGV4IiwidmFsaWRhdGUiLCJhYWNIZWFkZXIiLCJfYWFjU2VxdWVuY2VIZWFkZXJQYXJzZXIiLCJhdWRpb01lZGlhIiwiX2hhc1ZpZGVvU2VxdWVuY2UiLCJmcmFtZVR5cGUiLCJjb2RlY0lEIiwiYXZjUGFja2V0VHlwZSIsIm5hbHUiLCJzaXplcyIsImF2Y2NsZW5ndGgiLCJfYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIiLCJjb25maWd1cmF0aW9uVmVyc2lvbiIsImF2Y1Byb2ZpbGVJbmRpY2F0aW9uIiwicHJvZmlsZUNvbXBhdGliaWxpdHkiLCJhdmNMZXZlbEluZGljYXRpb24iLCJuYWxVbml0TGVuZ3RoIiwibnVtT2ZTcHMiLCJqIiwiY29kZWNTdHJpbmciLCJwYXJzZVNQUyIsIm51bU9mUHBzIiwidG9WaWRlb01ldGEiLCJ2aWRlb01lZGlhIiwic2FtcGxpbmdGcmVxdWVuY3lJbmRleCIsImRhdGFzaXplQ29uZmlybSIsInN0cmVhbUZsYWciLCJvdXQiLCJpbnB1dCIsImZyb21DaGFyQ29kZSIsIl9jaGVja0NvbnRpbnVhdGlvbiIsInVjczQiLCJqb2luIiwiY2hlY2tMZW5ndGgiXSwibWFwcGluZ3MiOiJDQUFB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Yy91QixFQUFNUixPQUFRLENBQ3BDLEtBQU91dkIsS0FDSCxHQUFnQyxNQUFWLElBQWpCL3VCLElBQVFrQixJQUNULE9BQU8sRUFFZixPQUFPLEVBRVAsT0FBTyxNLGVBS0o4bUIsRzs7Ozs7Ozs7NENDbkVmdHJCLEVBQU9ELFFBQVVNIiwiZmlsZSI6ImluZGV4LmRldi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInhncGxheWVyXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInhncGxheWVyXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInhncGxheWVyLWZsdlwiXSA9IGZhY3RvcnkocmVxdWlyZShcInhncGxheWVyXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJ4Z3BsYXllci1mbHZcIl0gPSBmYWN0b3J5KHJvb3RbXCJ4Z3BsYXllclwiXSk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfeGdwbGF5ZXJfXykge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3Rvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmlkID0gLTFcbiAgICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gMFxuICAgIHRoaXMuc2FtcGxlcyA9IFtdXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdGhlIHRyYWNrLlxuICAgKi9cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMuc2VxdWVuY2VOdW1iZXIgPSAwXG4gICAgdGhpcy5zYW1wbGVzID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgfVxuICAvKipcbiAgICogZGVzdHJveSB0aGUgdHJhY2suXG4gICAqL1xuICBkaXN0cm95ICgpIHtcbiAgICB0aGlzLnJlc2V0KClcbiAgICB0aGlzLmlkID0gLTFcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhY2tzIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuYXVkaW9UcmFjayA9IG51bGxcbiAgICB0aGlzLnZpZGVvVHJhY2sgPSBudWxsXG4gIH1cbn1cbiIsImltcG9ydCBUcmFjayBmcm9tICcuL1RyYWNrJ1xuXG5leHBvcnQgY2xhc3MgWGdCdWZmZXIge1xuICAvKipcbiAgICogQSBidWZmZXIgdG8gc3RvcmUgbG9hZGVkIGRhdGEuXG4gICAqXG4gICAqIEBjbGFzcyBMb2FkZXJCdWZmZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIE9wdGlvbmFsIHRoZSBidWZmZXIgc2l6ZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGxlbmd0aCkge1xuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoIHx8IDBcbiAgICB0aGlzLmhpc3RvcnlMZW4gPSBsZW5ndGggfHwgMFxuICAgIHRoaXMuYXJyYXkgPSBbXVxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiB0byBwdXNoIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRhIC0gVGhlIGRhdGEgdG8gcHVzaCBpbnRvIHRoZSBidWZmZXJcbiAgICovXG4gIHB1c2ggKGRhdGEpIHtcbiAgICB0aGlzLmFycmF5LnB1c2goZGF0YSlcbiAgICB0aGlzLmxlbmd0aCArPSBkYXRhLmJ5dGVMZW5ndGhcbiAgICB0aGlzLmhpc3RvcnlMZW4gKz0gZGF0YS5ieXRlTGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIHNoaWZ0IGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBUaGUgc2l6ZSBvZiBzaGlmdC5cbiAgICovXG4gIHNoaWZ0IChsZW5ndGgpIHtcbiAgICBpZiAodGhpcy5hcnJheS5sZW5ndGggPCAxKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMClcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zaGlmdEJ1ZmZlcigpXG4gICAgfVxuICAgIGlmICgodGhpcy5vZmZzZXQgKyBsZW5ndGgpID09PSB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgbGV0IHJldCA9IHRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKVxuICAgICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgICB0aGlzLmFycmF5LnNoaWZ0KClcbiAgICAgIHRoaXMubGVuZ3RoIC09IGxlbmd0aFxuICAgICAgcmV0dXJuIHJldFxuICAgIH1cblxuICAgIGlmICgodGhpcy5vZmZzZXQgKyBsZW5ndGgpIDwgdGhpcy5hcnJheVswXS5sZW5ndGgpIHtcbiAgICAgIGxldCByZXQgPSB0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aClcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aFxuICAgICAgdGhpcy5sZW5ndGggLT0gbGVuZ3RoXG4gICAgICByZXR1cm4gcmV0XG4gICAgfVxuXG4gICAgbGV0IHJldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICBsZXQgdG1wb2ZmID0gMFxuICAgIHdoaWxlICh0aGlzLmFycmF5Lmxlbmd0aCA+IDAgJiYgbGVuZ3RoID4gMCkge1xuICAgICAgaWYgKCh0aGlzLm9mZnNldCArIGxlbmd0aCkgPCB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgICBsZXQgdG1wID0gdGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW5ndGgpXG4gICAgICAgIHJldC5zZXQodG1wLCB0bXBvZmYpXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aFxuICAgICAgICB0aGlzLmxlbmd0aCAtPSBsZW5ndGhcbiAgICAgICAgbGVuZ3RoID0gMFxuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHRlbXBsZW5ndGggPSB0aGlzLmFycmF5WzBdLmxlbmd0aCAtIHRoaXMub2Zmc2V0XG4gICAgICAgIHJldC5zZXQodGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5hcnJheVswXS5sZW5ndGgpLCB0bXBvZmYpXG4gICAgICAgIHRoaXMuYXJyYXkuc2hpZnQoKVxuICAgICAgICB0aGlzLm9mZnNldCA9IDBcbiAgICAgICAgdG1wb2ZmICs9IHRlbXBsZW5ndGhcbiAgICAgICAgdGhpcy5sZW5ndGggLT0gdGVtcGxlbmd0aFxuICAgICAgICBsZW5ndGggLT0gdGVtcGxlbmd0aFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gY2xlYXIgdGhlIGJ1ZmZlci5cbiAgICovXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLmFycmF5ID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuY2xlYXIoKVxuICAgIHRoaXMuaGlzdG9yeUxlbiA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBzaGlmdCBvbmUgdW5pdDhBcnJheS5cbiAgICovXG4gIF9zaGlmdEJ1ZmZlciAoKSB7XG4gICAgdGhpcy5sZW5ndGggLT0gdGhpcy5hcnJheVswXS5sZW5ndGhcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICByZXR1cm4gdGhpcy5hcnJheS5zaGlmdCgpXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCB1aW50OCBkYXRhIHRvIG51bWJlci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gdGhlIHN0YXJ0IHBvc3Rpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSB0aGUgbGVuZ3RoIG9mIGRhdGEuXG4gICAqL1xuICB0b0ludCAoc3RhcnQsIGxlbmd0aCkge1xuICAgIGxldCByZXRJbnQgPSAwXG4gICAgbGV0IGkgPSB0aGlzLm9mZnNldCArIHN0YXJ0XG4gICAgd2hpbGUgKGkgPCB0aGlzLm9mZnNldCArIGxlbmd0aCArIHN0YXJ0KSB7XG4gICAgICBpZiAoaSA8IHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSB7XG4gICAgICAgIHJldEludCA9IHJldEludCAqIDI1NiArIHRoaXMuYXJyYXlbMF1baV1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hcnJheVsxXSkge1xuICAgICAgICByZXRJbnQgPSByZXRJbnQgKiAyNTYgKyB0aGlzLmFycmF5WzFdW2kgLSB0aGlzLmFycmF5WzBdLmxlbmd0aF1cbiAgICAgIH1cblxuICAgICAgaSsrXG4gICAgfVxuICAgIHJldHVybiByZXRJbnRcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXVkaW9UcmFjayBleHRlbmRzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3RvciBmb3IgYXVkaW8gdHJhY2suXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuVEFHID0gJ0F1ZGlvVHJhY2snXG4gICAgdGhpcy50eXBlID0gJ2F1ZGlvJ1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrIGV4dGVuZHMgVHJhY2sge1xuICAvKipcbiAgICogVGhlIGNvbnN0cnVjdG9yIGZvciB2aWRlbyB0cmFjay5cbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5UQUcgPSAnVmlkZW9UcmFjaydcbiAgICB0aGlzLnR5cGUgPSAndmlkZW8nXG4gICAgdGhpcy5kcm9wcGVkID0gMFxuICB9XG4gIC8qKlxuICAgKiByZXNldCB0aGUgdmlkZW8gdHJhY2suXG4gICAqL1xuICByZXNldCAoKSB7XG4gICAgdGhpcy5zZXF1ZW5jZU51bWJlciA9IDBcbiAgICB0aGlzLnNhbXBsZXMgPSBbXVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICAgIHRoaXMuZHJvcHBlZCA9IDBcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhY2tzIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuYXVkaW9UcmFjayA9IG51bGxcbiAgICB0aGlzLnZpZGVvVHJhY2sgPSBudWxsXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlbXV4QnVmZmVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMudmlkZW8gPSBbXVxuICAgIHRoaXMuYXVkaW8gPSBbXVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy52aWRlbyA9IFtdXG4gICAgdGhpcy5hdWRpbyA9IFtdXG4gIH1cbn1cbiIsImNsYXNzIFNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm1pbWV0eXBlID0gJyc7XG4gICAgdGhpcy5pbml0ID0gbnVsbDtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgfVxufVxuXG5jbGFzcyBQcmVTb3VyY2Uge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5zb3VyY2VzID0ge307XG4gIH1cblxuICBnZXRTb3VyY2UgKHNvdXJjZSkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZXNbc291cmNlXTtcbiAgfVxuXG4gIGNyZWF0ZVNvdXJjZSAobmFtZSkge1xuICAgIHRoaXMuc291cmNlc1tuYW1lXSA9IG5ldyBTb3VyY2UoKTtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2VzW25hbWVdO1xuICB9XG5cbiAgY2xlYXIgKCkge1xuICAgIHRoaXMuc291cmNlcyA9IHt9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByZVNvdXJjZTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHNbXCJ4Z3BsYXllci1sb2FkZXItYnVmZmVyXCJdPXQoKTplW1wieGdwbGF5ZXItbG9hZGVyLWJ1ZmZlclwiXT10KCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1uKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciByPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgaSBpbiBlKW4uZChyLGksZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxpKSk7cmV0dXJuIHJ9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsXCJhXCIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9XCJcIixuKG4ucz0wKX0oW2Z1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9bigxKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByLGk9bigyKSxzPShyPWkpJiZyLl9fZXNNb2R1bGU/cjp7ZGVmYXVsdDpyfSxvPW4oNSk7Y29uc3QgdT0wLGE9MSxsPTI7d2luZG93LkNvbnRleHQ9cy5kZWZhdWx0LHQuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3RvcihlKXt0aGlzLmNvbmZpZ3M9T2JqZWN0LmFzc2lnbih7fSxlKSx0aGlzLnVybD1udWxsLHRoaXMuc3RhdHVzPTAsdGhpcy5lcnJvcj1udWxsLHRoaXMuX3JlYWRlcj1udWxsLHRoaXMucmVhZHR5cGU9dGhpcy5jb25maWdzLnJlYWR0eXBlLHRoaXMuYnVmZmVyPXRoaXMuY29uZmlncy5idWZmZXJ8fFwiTE9BREVSX0JVRkZFUlwifXN0YXRpYyBnZXQgdHlwZSgpe3JldHVyblwibG9hZGVyXCJ9bG9hZChlLHQpe2xldCBuPXRoaXM7dGhpcy51cmw9ZTtsZXQgcj10aGlzLmdldFBhcmFtcyh0KTtyZXR1cm4gZmV0Y2godGhpcy51cmwscikudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIG4uc3RhdHVzPWUuc3RhdHVzLG4ubG9hZGluZz0hMCxuLl9vbkZldGNoUmVzcG9uc2UoZSl9KSl9X29uRmV0Y2hSZXNwb25zZShlKXtsZXQgdD10aGlzLG49dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmJ1ZmZlcik7aWYoITA9PT1lLm9rKXN3aXRjaCh0aGlzLnJlYWR0eXBlKXtjYXNlIGw6ZS5qc29uKCkudGhlbihlPT57bj8obi5wdXNoKGUpLHQuZW1pdChvLkxPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLG4pKTp0LmVtaXQoby5MT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSxlKX0pO2JyZWFrO2Nhc2UgYTplLnRleHQoKS50aGVuKGU9PntuPyhuLnB1c2goZSksdC5lbWl0KG8uTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsbikpOnQuZW1pdChvLkxPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLGUpfSk7YnJlYWs7Y2FzZSB1OmRlZmF1bHQ6cmV0dXJuIHRoaXMuX29uUmVhZGVyKGUuYm9keS5nZXRSZWFkZXIoKSl9fV9vblJlYWRlcihlKXtsZXQgdD10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMuYnVmZmVyKTtpZih0fHx0aGlzLl9yZWFkZXIuY2FuY2VsKCksdGhpcy5fcmVhZGVyPWUsITE9PT10aGlzLmxvYWRpbmcpcmV0dXJuO2xldCBuPXRoaXM7dGhpcy5fcmVhZGVyJiZ0aGlzLl9yZWFkZXIucmVhZCgpLnRoZW4oKGZ1bmN0aW9uKHIpe3JldHVybiByLmRvbmU/KG4ubG9hZGluZz0hMSxuLnN0YXR1cz0wLHZvaWQgbi5lbWl0KG8uTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsdCkpOih0LnB1c2goci52YWx1ZSksbi5lbWl0KG8uTE9BREVSX0VWRU5UUy5MT0FERVJfREFUQUxPQURFRCx0KSxuLl9vblJlYWRlcihlKSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKGUpfSkpfWdldFBhcmFtcyhlKXtsZXQgdD1PYmplY3QuYXNzaWduKHt9LGUpLG49bmV3IEhlYWRlcnMscj17bWV0aG9kOlwiR0VUXCIsaGVhZGVyczpuLG1vZGU6XCJjb3JzXCIsY2FjaGU6XCJkZWZhdWx0XCJ9O2lmKFwib2JqZWN0XCI9PXR5cGVvZiB0aGlzLmNvbmZpZ3MuaGVhZGVycyl7bGV0IGU9dGhpcy5jb25maWdzLmhlYWRlcnM7Zm9yKGxldCB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmbi5hcHBlbmQodCxlW3RdKX1yZXR1cm4hMT09PXQuY29ycyYmKHIubW9kZT1cInNhbWUtb3JpZ2luXCIpLHQud2l0aENyZWRlbnRpYWxzJiYoci5jcmVkZW50aWFscz1cImluY2x1ZGVcIikscn1jYW5jZWwoKXt0aGlzLl9yZWFkZXImJih0aGlzLl9yZWFkZXIuY2FuY2VsKCksdGhpcy5fcmVhZGVyPW51bGwpfX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcixpPW4oMykscz0ocj1pKSYmci5fX2VzTW9kdWxlP3I6e2RlZmF1bHQ6cn07Y29uc3Qgbz1uKDQpO3QuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3RvcihlPVtdKXt0aGlzLl9lbWl0dGVyPW5ldyBvLkV2ZW50RW1pdHRlcix0aGlzLl9pbnN0YW5jZU1hcD17fSx0aGlzLl9jbHNNYXA9e30sdGhpcy5faW5pdGVkPSExLHRoaXMubWVkaWFJbmZvPW5ldyBzLmRlZmF1bHQsdGhpcy5hbGxvd2VkRXZlbnRzPWV9Z2V0SW5zdGFuY2UoZSl7aWYodGhpcy5faW5zdGFuY2VNYXBbZV0pcmV0dXJuIHRoaXMuX2luc3RhbmNlTWFwW2VdO3Rocm93IG5ldyBFcnJvcihgJHtlfeWunuS+i+WwmuacquWIneWni+WMlmApfWluaXRJbnN0YW5jZShlLC4uLnQpe2lmKHRoaXMuX2Nsc01hcFtlXSl7Y29uc3Qgbj1uZXcgdGhpcy5fY2xzTWFwW2VdKC4uLnQpO3JldHVybiB0aGlzLl9pbnN0YW5jZU1hcFtlXT1uLG4uaW5pdCYmbi5pbml0KCksbn10aHJvdyBuZXcgRXJyb3IoYCR7ZX3mnKrlnKhjb250ZXh05Lit5rOo5YaMYCl9aW5pdChlKXtpZighdGhpcy5faW5pdGVkKXtmb3IobGV0IHQgaW4gdGhpcy5fY2xzTWFwKXRoaXMuX2Nsc01hcC5oYXNPd25Qcm9wZXJ0eSh0KSYmIXRoaXMuX2luc3RhbmNlTWFwW3RdJiZ0aGlzLmluaXRJbnN0YW5jZSh0LGUpO3RoaXMuX2luaXRlZD0hMH19cmVnaXN0cnkoZSx0KXtjb25zdCBuPXRoaXMuX2VtaXR0ZXIscj10aGlzLl9pc01lc3NhZ2VOYW1lVmFsaWQuYmluZCh0aGlzKSxpPXRoaXM7cmV0dXJuIHRoaXMuX2Nsc01hcFtlXT1jbGFzcyBleHRlbmRzIHR7Y29uc3RydWN0b3IoLi4udCl7c3VwZXIoLi4udCksdGhpcy5saXN0ZW5lcnM9e30sdGhpcy5UQUc9ZSx0aGlzLl9jb250ZXh0PWl9b24oZSx0KXtyZXR1cm4gcihlKSx0aGlzLmxpc3RlbmVyc1tlXT90aGlzLmxpc3RlbmVyc1tlXS5wdXNoKHQpOnRoaXMubGlzdGVuZXJzW2VdPVt0XSxuLm9uKGUsdCl9b25jZShlLHQpe3JldHVybiByKGUpLG4ub25jZShlLHQpfWVtaXQoZSwuLi50KXtyZXR1cm4gcihlKSxuLmVtaXQoZSwuLi50KX1vZmYoZSx0KXtyZXR1cm4gcihlKSxuLm9mZihlLHQpfXJlbW92ZUxpc3RlbmVycygpe2NvbnN0IGU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKHRoaXMubGlzdGVuZXJzKTtmb3IobGV0IHQgaW4gdGhpcy5saXN0ZW5lcnMpaWYoZSh0KSl7Y29uc3QgZT10aGlzLmxpc3RlbmVyc1t0XXx8W107Zm9yKGxldCByPTA7cjxlLmxlbmd0aDtyKyspe2NvbnN0IGk9ZVtyXTtuLm9mZih0LGkpfX19ZGVzdHJveSgpe3RoaXMucmVtb3ZlTGlzdGVuZXJzKCksZGVsZXRlIGkuX2luc3RhbmNlTWFwW2VdLHN1cGVyLmRlc3Ryb3koKX19LCguLi50KT0+dGhpcy5pbml0SW5zdGFuY2UoZSwuLi50KX1kZXN0cm95SW5zdGFuY2VzKCl7T2JqZWN0LmtleXModGhpcy5faW5zdGFuY2VNYXApLmZvckVhY2goZT0+e3RoaXMuX2luc3RhbmNlTWFwW2VdLmRlc3Ryb3kmJnRoaXMuX2luc3RhbmNlTWFwW2VdLmRlc3Ryb3koKX0pfWRlc3Ryb3koKXt0aGlzLl9lbWl0dGVyPW51bGwsdGhpcy5hbGxvd2VkRXZlbnRzPW51bGwsdGhpcy5fY2xzTWFwPW51bGwsdGhpcy5kZXN0cm95SW5zdGFuY2VzKCl9X2lzTWVzc2FnZU5hbWVWYWxpZChlKXtpZighdGhpcy5hbGxvd2VkRXZlbnRzLmluZGV4T2YoZSk8MCl0aHJvdyBuZXcgRXJyb3IoYHVucmVnaXN0ZXJlZCBtZXNzYWdlIG5hbWU6ICR7ZX1gKX19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgcj1lPT57Zm9yKGxldCB0IGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eSh0KSYmbnVsbD09PWVbdF0pcmV0dXJuITE7cmV0dXJuITB9O2NsYXNzIGl7Y29uc3RydWN0b3IoKXt0aGlzLm1pbWVUeXBlPW51bGwsdGhpcy5kdXJhdGlvbj1udWxsLHRoaXMuaGFzVmlkZW89bnVsbCx0aGlzLnZpZGVvPXtjb2RlYzpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJvZmlsZTpudWxsLGxldmVsOm51bGwsZnJhbWVSYXRlOntmaXhlZDohMCxmcHM6MjUsZnBzX251bToyNWUzLGZwc19kZW46MWUzfSxjaHJvbWFGb3JtYXQ6bnVsbCxwYXJSYXRpbzp7d2lkdGg6MSxoZWlnaHQ6MX19LHRoaXMuaGFzQXVkaW89bnVsbCx0aGlzLmF1ZGlvPXtjb2RlYzpudWxsLHNhbXBsZVJhdGU6bnVsbCxzYW1wbGVSYXRlSW5kZXg6bnVsbCxjaGFubmVsQ291bnQ6bnVsbH19aXNDb21wbGV0ZSgpe3JldHVybiBpLmlzQmFzZUluZm9SZWFkeSh0aGlzKSYmaS5pc1ZpZGVvUmVhZHkodGhpcykmJmkuaXNBdWRpb1JlYWR5KHRoaXMpfXN0YXRpYyBpc0Jhc2VJbmZvUmVhZHkoZSl7cmV0dXJuIHIoZSl9c3RhdGljIGlzVmlkZW9SZWFkeShlKXtyZXR1cm4hZS5oYXNWaWRlb3x8cihlLnZpZGVvKX1zdGF0aWMgaXNBdWRpb1JlYWR5KGUpe3JldHVybiFlLmhhc0F1ZGlvfHxyKGUudmlkZW8pfX10LmRlZmF1bHQ9aX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByLGk9XCJvYmplY3RcIj09dHlwZW9mIFJlZmxlY3Q/UmVmbGVjdDpudWxsLHM9aSYmXCJmdW5jdGlvblwiPT10eXBlb2YgaS5hcHBseT9pLmFwcGx5OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoZSx0LG4pfTtyPWkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGkub3duS2V5cz9pLm93bktleXM6T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSkuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSkpfTpmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSl9O3ZhciBvPU51bWJlci5pc05hTnx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUhPWV9O2Z1bmN0aW9uIHUoKXt1LmluaXQuY2FsbCh0aGlzKX1lLmV4cG9ydHM9dSx1LkV2ZW50RW1pdHRlcj11LHUucHJvdG90eXBlLl9ldmVudHM9dm9pZCAwLHUucHJvdG90eXBlLl9ldmVudHNDb3VudD0wLHUucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnM9dm9pZCAwO3ZhciBhPTEwO2Z1bmN0aW9uIGwoZSl7cmV0dXJuIHZvaWQgMD09PWUuX21heExpc3RlbmVycz91LmRlZmF1bHRNYXhMaXN0ZW5lcnM6ZS5fbWF4TGlzdGVuZXJzfWZ1bmN0aW9uIGYoZSx0LG4scil7dmFyIGkscyxvLHU7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBuKTtpZih2b2lkIDA9PT0ocz1lLl9ldmVudHMpPyhzPWUuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLGUuX2V2ZW50c0NvdW50PTApOih2b2lkIDAhPT1zLm5ld0xpc3RlbmVyJiYoZS5lbWl0KFwibmV3TGlzdGVuZXJcIix0LG4ubGlzdGVuZXI/bi5saXN0ZW5lcjpuKSxzPWUuX2V2ZW50cyksbz1zW3RdKSx2b2lkIDA9PT1vKW89c1t0XT1uLCsrZS5fZXZlbnRzQ291bnQ7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBvP289c1t0XT1yP1tuLG9dOltvLG5dOnI/by51bnNoaWZ0KG4pOm8ucHVzaChuKSwoaT1sKGUpKT4wJiZvLmxlbmd0aD5pJiYhby53YXJuZWQpe28ud2FybmVkPSEwO3ZhciBhPW5ldyBFcnJvcihcIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gXCIrby5sZW5ndGgrXCIgXCIrU3RyaW5nKHQpK1wiIGxpc3RlbmVycyBhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXRcIik7YS5uYW1lPVwiTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nXCIsYS5lbWl0dGVyPWUsYS50eXBlPXQsYS5jb3VudD1vLmxlbmd0aCx1PWEsY29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4odSl9cmV0dXJuIGV9ZnVuY3Rpb24gYygpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllLnB1c2goYXJndW1lbnRzW3RdKTt0aGlzLmZpcmVkfHwodGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLHRoaXMud3JhcEZuKSx0aGlzLmZpcmVkPSEwLHModGhpcy5saXN0ZW5lcix0aGlzLnRhcmdldCxlKSl9ZnVuY3Rpb24gaChlLHQsbil7dmFyIHI9e2ZpcmVkOiExLHdyYXBGbjp2b2lkIDAsdGFyZ2V0OmUsdHlwZTp0LGxpc3RlbmVyOm59LGk9Yy5iaW5kKHIpO3JldHVybiBpLmxpc3RlbmVyPW4sci53cmFwRm49aSxpfWZ1bmN0aW9uIGQoZSx0LG4pe3ZhciByPWUuX2V2ZW50cztpZih2b2lkIDA9PT1yKXJldHVybltdO3ZhciBpPXJbdF07cmV0dXJuIHZvaWQgMD09PWk/W106XCJmdW5jdGlvblwiPT10eXBlb2YgaT9uP1tpLmxpc3RlbmVyfHxpXTpbaV06bj9mdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IEFycmF5KGUubGVuZ3RoKSxuPTA7bjx0Lmxlbmd0aDsrK24pdFtuXT1lW25dLmxpc3RlbmVyfHxlW25dO3JldHVybiB0fShpKTpfKGksaS5sZW5ndGgpfWZ1bmN0aW9uIHAoZSl7dmFyIHQ9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PXQpe3ZhciBuPXRbZV07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gMTtpZih2b2lkIDAhPT1uKXJldHVybiBuLmxlbmd0aH1yZXR1cm4gMH1mdW5jdGlvbiBfKGUsdCl7Zm9yKHZhciBuPW5ldyBBcnJheSh0KSxyPTA7cjx0OysrciluW3JdPWVbcl07cmV0dXJuIG59T2JqZWN0LmRlZmluZVByb3BlcnR5KHUsXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGF9LHNldDpmdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZXx8ZTwwfHxvKGUpKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJytlK1wiLlwiKTthPWV9fSksdS5pbml0PWZ1bmN0aW9uKCl7dm9pZCAwIT09dGhpcy5fZXZlbnRzJiZ0aGlzLl9ldmVudHMhPT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApLHRoaXMuX21heExpc3RlbmVycz10aGlzLl9tYXhMaXN0ZW5lcnN8fHZvaWQgMH0sdS5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzPWZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlPDB8fG8oZSkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK2UrXCIuXCIpO3JldHVybiB0aGlzLl9tYXhMaXN0ZW5lcnM9ZSx0aGlzfSx1LnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtyZXR1cm4gbCh0aGlzKX0sdS5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10sbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspdC5wdXNoKGFyZ3VtZW50c1tuXSk7dmFyIHI9XCJlcnJvclwiPT09ZSxpPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1pKXI9ciYmdm9pZCAwPT09aS5lcnJvcjtlbHNlIGlmKCFyKXJldHVybiExO2lmKHIpe3ZhciBvO2lmKHQubGVuZ3RoPjAmJihvPXRbMF0pLG8gaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBvO3ZhciB1PW5ldyBFcnJvcihcIlVuaGFuZGxlZCBlcnJvci5cIisobz9cIiAoXCIrby5tZXNzYWdlK1wiKVwiOlwiXCIpKTt0aHJvdyB1LmNvbnRleHQ9byx1fXZhciBhPWlbZV07aWYodm9pZCAwPT09YSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKXMoYSx0aGlzLHQpO2Vsc2V7dmFyIGw9YS5sZW5ndGgsZj1fKGEsbCk7Zm9yKG49MDtuPGw7KytuKXMoZltuXSx0aGlzLHQpfXJldHVybiEwfSx1LnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiBmKHRoaXMsZSx0LCExKX0sdS5wcm90b3R5cGUub249dS5wcm90b3R5cGUuYWRkTGlzdGVuZXIsdS5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGYodGhpcyxlLHQsITApfSx1LnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiB0KTtyZXR1cm4gdGhpcy5vbihlLGgodGhpcyxlLHQpKSx0aGlzfSx1LnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiB0KTtyZXR1cm4gdGhpcy5wcmVwZW5kTGlzdGVuZXIoZSxoKHRoaXMsZSx0KSksdGhpc30sdS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGkscyxvO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgdCk7aWYodm9pZCAwPT09KHI9dGhpcy5fZXZlbnRzKSlyZXR1cm4gdGhpcztpZih2b2lkIDA9PT0obj1yW2VdKSlyZXR1cm4gdGhpcztpZihuPT09dHx8bi5saXN0ZW5lcj09PXQpMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTooZGVsZXRlIHJbZV0sci5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIixlLG4ubGlzdGVuZXJ8fHQpKTtlbHNlIGlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4pe2ZvcihpPS0xLHM9bi5sZW5ndGgtMTtzPj0wO3MtLSlpZihuW3NdPT09dHx8bltzXS5saXN0ZW5lcj09PXQpe289bltzXS5saXN0ZW5lcixpPXM7YnJlYWt9aWYoaTwwKXJldHVybiB0aGlzOzA9PT1pP24uc2hpZnQoKTpmdW5jdGlvbihlLHQpe2Zvcig7dCsxPGUubGVuZ3RoO3QrKyllW3RdPWVbdCsxXTtlLnBvcCgpfShuLGkpLDE9PT1uLmxlbmd0aCYmKHJbZV09blswXSksdm9pZCAwIT09ci5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIixlLG98fHQpfXJldHVybiB0aGlzfSx1LnByb3RvdHlwZS5vZmY9dS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIsdS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LG4scjtpZih2b2lkIDA9PT0obj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PW4ucmVtb3ZlTGlzdGVuZXIpcmV0dXJuIDA9PT1hcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKTp2b2lkIDAhPT1uW2VdJiYoMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTpkZWxldGUgbltlXSksdGhpcztpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGkscz1PYmplY3Qua2V5cyhuKTtmb3Iocj0wO3I8cy5sZW5ndGg7KytyKVwicmVtb3ZlTGlzdGVuZXJcIiE9PShpPXNbcl0pJiZ0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhpKTtyZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJyZW1vdmVMaXN0ZW5lclwiKSx0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wLHRoaXN9aWYoXCJmdW5jdGlvblwiPT10eXBlb2YodD1uW2VdKSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdCk7ZWxzZSBpZih2b2lkIDAhPT10KWZvcihyPXQubGVuZ3RoLTE7cj49MDtyLS0pdGhpcy5yZW1vdmVMaXN0ZW5lcihlLHRbcl0pO3JldHVybiB0aGlzfSx1LnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIGQodGhpcyxlLCEwKX0sdS5wcm90b3R5cGUucmF3TGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybiBkKHRoaXMsZSwhMSl9LHUubGlzdGVuZXJDb3VudD1mdW5jdGlvbihlLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUubGlzdGVuZXJDb3VudD9lLmxpc3RlbmVyQ291bnQodCk6cC5jYWxsKGUsdCl9LHUucHJvdG90eXBlLmxpc3RlbmVyQ291bnQ9cCx1LnByb3RvdHlwZS5ldmVudE5hbWVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50PjA/cih0aGlzLl9ldmVudHMpOltdfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IHI9dC5MT0FERVJfRVZFTlRTPXtMT0FERVJfREFUQUxPQURFRDpcIkxPQURFUl9EQVRBTE9BREVEXCIsTE9BREVSX0NPTVBMRVRFOlwiTE9BREVSX0NPTVBMRVRFXCIsTE9BREVSX0VSUk9SOlwiTE9BREVSX0VSUk9SXCJ9LGk9dC5ERU1VWF9FVkVOVFM9e0RFTVVYX0NPTVBMRVRFOlwiREVNVVhfQ09NUExFVEVcIixERU1VWF9FUlJPUjpcIkRFTVVYX0VSUk9SXCIsTUVUQURBVEFfUEFSU0VEOlwiTUVUQURBVEFfUEFSU0VEXCIsVklERU9fTUVUQURBVEFfQ0hBTkdFOlwiVklERU9fTUVUQURBVEFfQ0hBTkdFXCIsQVVESU9fTUVUQURBVEFfQ0hBTkdFOlwiQVVESU9fTUVUQURBVEFfQ0hBTkdFXCIsTUVESUFfSU5GTzpcIk1FRElBX0lORk9cIn0scz10LlJFTVVYX0VWRU5UUz17TUVESUFfU0VHTUVOVDpcIk1FRElBX1NFR01FTlRcIixSRU1VWF9FUlJPUjpcIlJFTVVYX0VSUk9SXCIsSU5JVF9TRUdNRU5UOlwiSU5JVF9TRUdNRU5UXCJ9LG89T2JqZWN0LmFzc2lnbih7fSxyLGkscyksdT10LmZsdkFsbG93ZWRFdmVudHM9W107Zm9yKGxldCBlIGluIG8pby5oYXNPd25Qcm9wZXJ0eShlKSYmdS5wdXNoKG9bZV0pO3QuZGVmYXVsdD1vfV0pfSkpOyIsImltcG9ydCBCdWZmZXIgZnJvbSAneGdwbGF5ZXItdXRpbHMvZGlzdC93cml0ZS9CdWZmZXInXG4vLyBjb25zdCBVSU5UMzJfTUFYID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcbmNsYXNzIEZtcDQge1xuICBzdGF0aWMgc2l6ZSAodmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLndyaXRlVWludDMyKHZhbHVlKVxuICB9XG4gIHN0YXRpYyBpbml0Qm94IChzaXplLCBuYW1lLCAuLi5jb250ZW50KSB7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZShzaXplKSwgRm1wNC50eXBlKG5hbWUpLCAuLi5jb250ZW50KVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIGV4dGVuc2lvbiAodmVyc2lvbiwgZmxhZykge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXG4gICAgICB2ZXJzaW9uLFxuICAgICAgKGZsYWcgPj4gMTYpICYgMHhmZixcbiAgICAgIChmbGFnID4+IDgpICYgMHhmZixcbiAgICAgIGZsYWcgJiAweGZmXG4gICAgXSlcbiAgfVxuICBzdGF0aWMgZnR5cCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyNCwgJ2Z0eXAnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDY5LCAweDczLCAweDZGLCAweDZELCAvLyBpc29tLFxuICAgICAgMHgwLCAweDAsIDB4MDAsIDB4MDEsIC8vIG1pbm9yX3ZlcnNpb246IDB4MDFcbiAgICAgIDB4NjksIDB4NzMsIDB4NkYsIDB4NkQsIC8vIGlzb21cbiAgICAgIDB4NjEsIDB4NzYsIDB4NjMsIDB4MzEgLy8gYXZjMVxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBtb292ICh7IHR5cGUsIG1ldGEgfSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCBtdmhkID0gRm1wNC5tdmhkKG1ldGEuZHVyYXRpb24sIG1ldGEudGltZXNjYWxlKVxuICAgIGxldCB0cmFrXG5cbiAgICBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgdHJhayA9IEZtcDQudmlkZW9UcmFrKG1ldGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYWsgPSBGbXA0LmF1ZGlvVHJhayhtZXRhKVxuICAgIH1cblxuICAgIGxldCBtdmV4ID0gRm1wNC5tdmV4KG1ldGEuZHVyYXRpb24sIG1ldGEudGltZXNjYWxlIHx8IDEwMDAsIG1ldGEuaWQpO1xuICAgIFttdmhkLCB0cmFrLCBtdmV4XS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21vb3YnLCBtdmhkLCB0cmFrLCBtdmV4KVxuICB9XG4gIHN0YXRpYyBtdmhkIChkdXJhdGlvbiwgdGltZXNjYWxlID0gMTAwMCkge1xuICAgIC8vIGR1cmF0aW9uICo9IHRpbWVzY2FsZTtcbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3MgICAgIDHkvY3nmoRib3jniYjmnKwrM+S9jWZsYWdzICAgYm9454mI5pys77yMMOaIljHvvIzkuIDoiKzkuLow44CC77yI5Lul5LiL5a2X6IqC5pWw5Z2H5oyJdmVyc2lvbj0w77yJXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1lICAgIOWIm+W7uuaXtumXtCAg77yI55u45a+55LqOVVRD5pe26Ze0MTkwNC0wMS0wMembtueCueeahOenkuaVsO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uX3RpbWUgICDkv67mlLnml7bpl7RcblxuICAgICAgLyoqXG4gICAgICAgICAgICAgKiB0aW1lc2NhbGU6IDQgYnl0ZXPmlofku7blqpLkvZPlnKgx56eS5pe26Ze05YaF55qE5Yi75bqm5YC877yM5Y+v5Lul55CG6Kej5Li6MeenkumVv+W6plxuICAgICAgICAgICAgICovXG4gICAgICAodGltZXNjYWxlID4+PiAyNCkgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSA+Pj4gMTYpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUgPj4+IDgpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUpICYgMHhGRixcblxuICAgICAgLyoqXG4gICAgICAgICAgICAgKiBkdXJhdGlvbjogNCBieXRlc+ivpXRyYWNr55qE5pe26Ze06ZW/5bqm77yM55SoZHVyYXRpb27lkox0aW1lIHNjYWxl5YC85Y+v5Lul6K6h566XdHJhY2vml7bplb/vvIzmr5TlpoJhdWRpbyB0cmFja+eahHRpbWUgc2NhbGUgPSA4MDAwLFxuICAgICAgICAgICAgICogZHVyYXRpb24gPSA1NjAxMjjvvIzml7bplb/kuLo3MC4wMTbvvIx2aWRlbyB0cmFja+eahHRpbWUgc2NhbGUgPSA2MDAsIGR1cmF0aW9uID0gNDIwMDDvvIzml7bplb/kuLo3MFxuICAgICAgICAgICAgICovXG4gICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDgpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbikgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8gUHJlZmVycmVkIHJhdGU6IDEuMCAgIOaOqOiNkOaSreaUvumAn+eOh++8jOmrmDE25L2N5ZKM5L2OMTbkvY3liIbliKvkuLrlsI/mlbDngrnmlbTmlbDpg6jliIblkozlsI/mlbDpg6jliIbvvIzljbNbMTYuMTZdIOagvOW8j++8jOivpeWAvOS4ujEuMO+8iDB4MDAwMTAwMDDvvInooajnpLrmraPluLjliY3lkJHmkq3mlL5cbiAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJlZmVycmVkVm9sdW1lKDEuMCwgMmJ5dGVzKSArIHJlc2VydmVkKDJieXRlcylcbiAgICAgICAgICAgICAqIOS4jnJhdGXnsbvkvLzvvIxbOC44XSDmoLzlvI/vvIwxLjDvvIgweDAxMDDvvInooajnpLrmnIDlpKfpn7Pph49cbiAgICAgICAgICAgICAqL1xuICAgICAgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vICByZXNlcnZlZDogNCArIDQgYnl0ZXPkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyAtLS0tYmVnaW4gY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIOinhumikeWPmOaNouefqemYtSAgIOe6v+aAp+S7o+aVsFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDQwLCAweDAwLCAweDAwLCAweDAwLCAvLyAtLS0tZW5kIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBwcmVfZGVmaW5lZCA2ICogNCBieXRlcy0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmUtZGVmaW5lZCDkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gLS0tLWVuZCBwcmVfZGVmaW5lZCA2ICogNCBieXRlcy0tLS1cbiAgICAgIDB4RkYsIDB4RkYsIDB4RkYsIDB4RkYgLy8gbmV4dF90cmFja19JRCDkuIvkuIDkuKp0cmFja+S9v+eUqOeahGlk5Y+3XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDggKyBieXRlcy5sZW5ndGgsICdtdmhkJywgbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpKVxuICB9XG4gIHN0YXRpYyB2aWRlb1RyYWsgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcblxuICAgIGxldCB0a2hkID0gRm1wNC50a2hkKHtcbiAgICAgIGlkOiAxLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICB3aWR0aDogZGF0YS5wcmVzZW50V2lkdGgsXG4gICAgICBoZWlnaHQ6IGRhdGEucHJlc2VudEhlaWdodCxcbiAgICAgIHR5cGU6ICd2aWRlbydcbiAgICB9KVxuICAgIGxldCBtZGlhID0gRm1wNC5tZGlhKHtcbiAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIGF2Y2M6IGRhdGEuYXZjYyxcbiAgICAgIHBhclJhdGlvOiBkYXRhLnBhclJhdGlvLFxuICAgICAgd2lkdGg6IGRhdGEucHJlc2VudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkYXRhLnByZXNlbnRIZWlnaHRcbiAgICB9KTtcbiAgICBbdGtoZCwgbWRpYV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFrJywgdGtoZCwgbWRpYSlcbiAgfVxuICBzdGF0aWMgYXVkaW9UcmFrIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IHRraGQgPSBGbXA0LnRraGQoe1xuICAgICAgaWQ6IDIsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgIH0pXG4gICAgbGV0IG1kaWEgPSBGbXA0Lm1kaWEoe1xuICAgICAgdHlwZTogJ2F1ZGlvJyxcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIGR1cmF0aW9uOiBkYXRhLmR1cmF0aW9uLFxuICAgICAgY2hhbm5lbENvdW50OiBkYXRhLmNoYW5uZWxDb3VudCxcbiAgICAgIHNhbXBsZXJhdGU6IGRhdGEuc2FtcGxlUmF0ZSxcbiAgICAgIGNvbmZpZzogZGF0YS5jb25maWdcbiAgICB9KTtcbiAgICBbdGtoZCwgbWRpYV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFrJywgdGtoZCwgbWRpYSlcbiAgfVxuICBzdGF0aWMgdGtoZCAoZGF0YSkge1xuICAgIGxldCBpZCA9IGRhdGEuaWRcbiAgICBsZXQgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uXG4gICAgbGV0IHdpZHRoID0gZGF0YS53aWR0aFxuICAgIGxldCBoZWlnaHQgPSBkYXRhLmhlaWdodFxuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwNywgLy8gdmVyc2lvbigwKSArIGZsYWdzIDHkvY3niYjmnKwgYm9454mI5pys77yMMOaIljHvvIzkuIDoiKzkuLow44CC77yI5Lul5LiL5a2X6IqC5pWw5Z2H5oyJdmVyc2lvbj0w77yJ5oyJ5L2N5oiW5pON5L2c57uT5p6c5YC877yM6aKE5a6a5LmJ5aaC5LiL77yaXG4gICAgICAvLyAweDAwMDAwMSB0cmFja19lbmFibGVk77yM5ZCm5YiZ6K+ldHJhY2vkuI3ooqvmkq3mlL7vvJtcbiAgICAgIC8vIDB4MDAwMDAyIHRyYWNrX2luX21vdmll77yM6KGo56S66K+ldHJhY2vlnKjmkq3mlL7kuK3ooqvlvJXnlKjvvJtcbiAgICAgIC8vIDB4MDAwMDA0IHRyYWNrX2luX3ByZXZpZXfvvIzooajnpLror6V0cmFja+WcqOmihOiniOaXtuiiq+W8leeUqOOAglxuICAgICAgLy8g5LiA6Iis6K+l5YC85Li6N++8jDErMis0IOWmguaenOS4gOS4quWqkuS9k+aJgOaciXRyYWNr5Z2H5pyq6K6+572udHJhY2tfaW5fbW92aWXlkox0cmFja19pbl9wcmV2aWV377yM5bCG6KKr55CG6Kej5Li65omA5pyJdHJhY2vlnYforr7nva7kuobov5nkuKTpobnvvJvlr7nkuo5oaW50IHRyYWNr77yM6K+l5YC85Li6MFxuICAgICAgLy8gaGludCB0cmFjayDov5nkuKrnibnmrornmoR0cmFja+W5tuS4jeWMheWQq+WqkuS9k+aVsOaNru+8jOiAjOaYr+WMheWQq+S6huS4gOS6m+WwhuWFtuS7luaVsOaNrnRyYWNr5omT5YyF5oiQ5rWB5aqS5L2T55qE5oyH56S65L+h5oGv44CCXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1l5Yib5bu65pe26Ze077yI55u45a+55LqOVVRD5pe26Ze0MTkwNC0wMS0wMembtueCueeahOenkuaVsO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uIHRpbWUg5L+u5pS55pe26Ze0XG4gICAgICAoaWQgPj4+IDI0KSAmIDB4RkYsIC8vIHRyYWNrX0lEOiA0IGJ5dGVzIGlk5Y+377yM5LiN6IO96YeN5aSN5LiU5LiN6IO95Li6MFxuICAgICAgKGlkID4+PiAxNikgJiAweEZGLFxuICAgICAgKGlkID4+PiA4KSAmIDB4RkYsXG4gICAgICAoaWQpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiA0IGJ5dGVzICAgIOS/neeVmeS9jVxuICAgICAgKGR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBkdXJhdGlvbjogNCBieXRlcyB0cmFja+eahOaXtumXtOmVv+W6plxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiAyICogNCBieXRlcyAgICDkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBsYXllcigyYnl0ZXMpICsgYWx0ZXJuYXRlX2dyb3VwKDJieXRlcykgIOinhumikeWxgu+8jOm7mOiupOS4ujDvvIzlgLzlsI/nmoTlnKjkuIrlsYIudHJhY2vliIbnu4Tkv6Hmga/vvIzpu5jorqTkuLow6KGo56S66K+ldHJhY2vmnKrkuI7lhbbku5Z0cmFja+aciee+pOe7hOWFs+ezu1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdm9sdW1lKDJieXRlcykgKyByZXNlcnZlZCgyYnl0ZXMpICAgIFs4LjhdIOagvOW8j++8jOWmguaenOS4uumfs+mikXRyYWNr77yMMS4w77yIMHgwMTAw77yJ6KGo56S65pyA5aSn6Z+z6YeP77yb5ZCm5YiZ5Li6MCAgICvkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBjb21wb3NpdGlvbiBtYXRyaXgtLS0tXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyDop4bpopHlj5jmjaLnn6npmLVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgKHdpZHRoID4+PiA4KSAmIDB4RkYsIC8vIC8v5a695bqmXG4gICAgICAod2lkdGgpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAoaGVpZ2h0ID4+PiA4KSAmIDB4RkYsIC8vIOmrmOW6plxuICAgICAgKGhlaWdodCkgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoLCAndGtoZCcsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIGVkdHMgKGRhdGEpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvblxuICAgIGxldCBtZWRpYVRpbWUgPSBkYXRhLm1lZGlhVGltZVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMzYpLCBGbXA0LnR5cGUoJ2VkdHMnKSlcbiAgICAvLyBlbHN0XG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSgyOCksIEZtcDQudHlwZSgnZWxzdCcpKVxuICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeSBjb3VudFxuICAgICAgKGR1cmF0aW9uID4+IDI0KSAmIDB4ZmYsIChkdXJhdGlvbiA+PiAxNikgJiAweGZmLCAoZHVyYXRpb24gPj4gOCkgJiAweGZmLCBkdXJhdGlvbiAmIDB4ZmYsXG4gICAgICAobWVkaWFUaW1lID4+IDI0KSAmIDB4ZmYsIChtZWRpYVRpbWUgPj4gMTYpICYgMHhmZiwgKG1lZGlhVGltZSA+PiA4KSAmIDB4ZmYsIG1lZGlhVGltZSAmIDB4ZmYsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxIC8vIG1lZGlhIHJhdGVcbiAgICBdKSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBtZGlhIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IG1kaGQgPSBGbXA0Lm1kaGQoZGF0YS50aW1lc2NhbGUsIGRhdGEuZHVyYXRpb24pXG4gICAgbGV0IGhkbHIgPSBGbXA0LmhkbHIoZGF0YS50eXBlKVxuICAgIGxldCBtaW5mID0gRm1wNC5taW5mKGRhdGEpO1xuICAgIFttZGhkLCBoZGxyLCBtaW5mXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21kaWEnLCBtZGhkLCBoZGxyLCBtaW5mKVxuICB9XG4gIHN0YXRpYyBtZGhkICh0aW1lc2NhbGUgPSAxMDAwLCBkdXJhdGlvbikge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY3JlYXRpb25fdGltZSAgICDliJvlu7rml7bpl7RcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1vZGlmaWNhdGlvbl90aW1l5L+u5pS55pe26Ze0XG4gICAgICAodGltZXNjYWxlID4+PiAyNCkgJiAweEZGLCAvLyB0aW1lc2NhbGU6IDQgYnl0ZXMgICAg5paH5Lu25aqS5L2T5ZyoMeenkuaXtumXtOWGheeahOWIu+W6puWAvO+8jOWPr+S7peeQhuino+S4ujHnp5Lplb/luqZcbiAgICAgICh0aW1lc2NhbGUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlID4+PiA4KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlKSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsIC8vIGR1cmF0aW9uOiA0IGJ5dGVzICB0cmFja+eahOaXtumXtOmVv+W6plxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4NTUsIDB4QzQsIC8vIGxhbmd1YWdlOiB1bmQgKHVuZGV0ZXJtaW5lZCkg5aqS5L2T6K+t6KiA56CB44CC5pyA6auY5L2N5Li6MO+8jOWQjumdojE15L2N5Li6M+S4quWtl+espu+8iOingUlTTyA2MzktMi9U5qCH5YeG5Lit5a6a5LmJ77yJXG4gICAgICAweDAwLCAweDAwIC8vIHByZV9kZWZpbmVkID0gMFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxMiArIGNvbnRlbnQuYnl0ZUxlbmd0aCwgJ21kaGQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgaGRsciAodHlwZSkge1xuICAgIGxldCB2YWx1ZSA9IFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmVfZGVmaW5lZFxuICAgICAgMHg3NiwgMHg2OSwgMHg2NCwgMHg2NSwgLy8gaGFuZGxlcl90eXBlOiAndmlkZSdcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4NTYsIDB4NjksIDB4NjQsIDB4NjUsXG4gICAgICAweDZmLCAweDQ4LCAweDYxLCAweDZlLFxuICAgICAgMHg2NCwgMHg2YywgMHg2NSwgMHg3MiwgMHgwMCAvLyBuYW1lOiAnVmlkZW9IYW5kbGVyJ1xuICAgIF1cbiAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgdmFsdWUuc3BsaWNlKDgsIDQsIC4uLlsweDczLCAweDZmLCAweDc1LCAweDZlXSlcbiAgICAgIHZhbHVlLnNwbGljZSgyNCwgMTMsIC4uLlsweDUzLCAweDZmLCAweDc1LCAweDZlLFxuICAgICAgICAweDY0LCAweDQ4LCAweDYxLCAweDZlLFxuICAgICAgICAweDY0LCAweDZjLCAweDY1LCAweDcyLCAweDAwXSlcbiAgICB9XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgdmFsdWUubGVuZ3RoLCAnaGRscicsIG5ldyBVaW50OEFycmF5KHZhbHVlKSlcbiAgfVxuICBzdGF0aWMgbWluZiAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB2bWhkID0gZGF0YS50eXBlID09PSAndmlkZW8nID8gRm1wNC52bWhkKCkgOiBGbXA0LnNtaGQoKVxuICAgIGxldCBkaW5mID0gRm1wNC5kaW5mKClcbiAgICBsZXQgc3RibCA9IEZtcDQuc3RibChkYXRhKTtcbiAgICBbdm1oZCwgZGluZiwgc3RibF0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICdtaW5mJywgdm1oZCwgZGluZiwgc3RibClcbiAgfVxuICBzdGF0aWMgdm1oZCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyMCwgJ3ZtaGQnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAxLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgLy8gZ3JhcGhpY3Ntb2RlXG4gICAgICAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAgLy8gb3Bjb2xvclxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBzbWhkICgpIHtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc21oZCcsIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAvLyBiYWxhbmNlXG4gICAgICAweDAwLCAweDAwIC8vIHJlc2VydmVkXG4gICAgXSkpXG4gIH1cbiAgc3RhdGljIGRpbmYgKCkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgZHJlZiA9IFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeV9jb3VudFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwYywgLy8gZW50cnlfc2l6ZVxuICAgICAgMHg3NSwgMHg3MiwgMHg2YywgMHgyMCwgLy8gJ3VybCcgdHlwZVxuICAgICAgMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAxIC8vIGVudHJ5X2ZsYWdzXG4gICAgXVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMzYpLCBGbXA0LnR5cGUoJ2RpbmYnKSwgRm1wNC5zaXplKDI4KSwgRm1wNC50eXBlKCdkcmVmJyksIG5ldyBVaW50OEFycmF5KGRyZWYpKVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIHN0YmwgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgc3RzZCA9IEZtcDQuc3RzZChkYXRhKVxuICAgIGxldCBzdHRzID0gRm1wNC5zdHRzKClcbiAgICBsZXQgc3RzYyA9IEZtcDQuc3RzYygpXG4gICAgbGV0IHN0c3ogPSBGbXA0LnN0c3ooKVxuICAgIGxldCBzdGNvID0gRm1wNC5zdGNvKCk7XG4gICAgW3N0c2QsIHN0dHMsIHN0c2MsIHN0c3osIHN0Y29dLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnc3RibCcsIHN0c2QsIHN0dHMsIHN0c2MsIHN0c3osIHN0Y28pXG4gIH1cbiAgc3RhdGljIHN0c2QgKGRhdGEpIHtcbiAgICBsZXQgY29udGVudFxuICAgIGlmIChkYXRhLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIC8vIGlmICghZGF0YS5pc0FBQyAmJiBkYXRhLmNvZGVjID09PSAnbXA0Jykge1xuICAgICAgLy8gICAgIGNvbnRlbnQgPSBGTVA0Lm1wMyhkYXRhKTtcbiAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAvL1xuICAgICAgLy8gfVxuICAgICAgLy8g5pSv5oyBbXA0YVxuICAgICAgY29udGVudCA9IEZtcDQubXA0YShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ID0gRm1wNC5hdmMxKGRhdGEpXG4gICAgfVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYgKyBjb250ZW50LmJ5dGVMZW5ndGgsICdzdHNkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIG5ldyBVaW50OEFycmF5KFsweDAwLCAweDAwLCAweDAwLCAweDAxXSksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG1wNGEgKGRhdGEpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSwgLy8gZGF0YV9yZWZlcmVuY2VfaW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgZGF0YS5jaGFubmVsQ291bnQsIC8vIGNoYW5uZWxjb3VudFxuICAgICAgMHgwMCwgMHgxMCwgLy8gc2FtcGxlU2l6ZToxNmJpdHNcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkMlxuICAgICAgKGRhdGEuc2FtcGxlcmF0ZSA+PiA4KSAmIDB4ZmYsXG4gICAgICBkYXRhLnNhbXBsZXJhdGUgJiAweGZmLCAvL1xuICAgICAgMHgwMCwgMHgwMFxuICAgIF0pXG4gICAgbGV0IGVzZHMgPSBGbXA0LmVzZHMoZGF0YS5jb25maWcpXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoICsgZXNkcy5ieXRlTGVuZ3RoLCAnbXA0YScsIGNvbnRlbnQsIGVzZHMpXG4gIH1cbiAgc3RhdGljIGVzZHMgKGNvbmZpZyA9IFs0MywgMTQ2LCA4LCAwXSkge1xuICAgIGNvbnN0IGNvbmZpZ2xlbiA9IGNvbmZpZy5sZW5ndGhcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG5cbiAgICAgIDB4MDMsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgxNyArIGNvbmZpZ2xlbiwgLy8gbGVuZ3RoXG4gICAgICAweDAwLCAweDAxLCAvLyBlc19pZFxuICAgICAgMHgwMCwgLy8gc3RyZWFtX3ByaW9yaXR5XG5cbiAgICAgIDB4MDQsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgwZiArIGNvbmZpZ2xlbiwgLy8gbGVuZ3RoXG4gICAgICAweDQwLCAvLyBjb2RlYyA6IG1wZWc0X2F1ZGlvXG4gICAgICAweDE1LCAvLyBzdHJlYW1fdHlwZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gYnVmZmVyX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGF2Z0JpdHJhdGVcblxuICAgICAgMHgwNSAvLyBkZXNjcmlwdG9yX3R5cGVcbiAgICBdLmNvbmNhdChbY29uZmlnbGVuXSkuY29uY2F0KGNvbmZpZykuY29uY2F0KFsweDA2LCAweDAxLCAweDAyXSkpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSg4ICsgY29udGVudC5ieXRlTGVuZ3RoKSwgRm1wNC50eXBlKCdlc2RzJyksIGNvbnRlbnQpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgYXZjMSAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2l6ZSA9IDQwLy8gOChhdmMxKSs4KGF2Y2MpKzgoYnRydCkrMTYocGFzcClcbiAgICAvLyBsZXQgc3BzID0gZGF0YS5zcHNcbiAgICAvLyBsZXQgcHBzID0gZGF0YS5wcHNcbiAgICBsZXQgd2lkdGggPSBkYXRhLndpZHRoXG4gICAgbGV0IGhlaWdodCA9IGRhdGEuaGVpZ2h0XG4gICAgbGV0IGhTcGFjaW5nID0gZGF0YS5wYXJSYXRpby5oZWlnaHRcbiAgICBsZXQgdlNwYWNpbmcgPSBkYXRhLnBhclJhdGlvLndpZHRoXG4gICAgLy8gbGV0IGF2Y2NCdWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICAvLyBhdmNjQnVmZmVyLndyaXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAvLyAgIDB4MDEsIC8vIHZlcnNpb25cbiAgICAvLyAgIHNwc1sxXSwgLy8gcHJvZmlsZVxuICAgIC8vICAgc3BzWzJdLCAvLyBwcm9maWxlIGNvbXBhdGlibGVcbiAgICAvLyAgIHNwc1szXSwgLy8gbGV2ZWxcbiAgICAvLyAgIDB4ZmMgfCAzLFxuICAgIC8vICAgMHhFMCB8IDEgLy8g55uu5YmN5Y+q5aSE55CG5LiA5Liqc3BzXG4gICAgLy8gXS5jb25jYXQoW3Nwcy5sZW5ndGggPj4+IDggJiAweGZmLCBzcHMubGVuZ3RoICYgMHhmZl0pKSlcbiAgICAvLyBhdmNjQnVmZmVyLndyaXRlKHNwcywgbmV3IFVpbnQ4QXJyYXkoWzEsIHBwcy5sZW5ndGggPj4+IDggJiAweGZmLCBwcHMubGVuZ3RoICYgMHhmZl0pLCBwcHMpXG5cbiAgICBsZXQgYXZjYyA9IGRhdGEuYXZjY1xuICAgIGxldCBhdmMxID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAvLyBkYXRhX3JlZmVyZW5jZV9pbmRleFxuICAgICAgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAod2lkdGggPj4gOCkgJiAweGZmLFxuICAgICAgd2lkdGggJiAweGZmLCAvLyB3aWR0aFxuICAgICAgKGhlaWdodCA+PiA4KSAmIDB4ZmYsXG4gICAgICBoZWlnaHQgJiAweGZmLCAvLyBoZWlnaHRcbiAgICAgIDB4MDAsIDB4NDgsIDB4MDAsIDB4MDAsIC8vIGhvcml6cmVzb2x1dGlvblxuICAgICAgMHgwMCwgMHg0OCwgMHgwMCwgMHgwMCwgLy8gdmVydHJlc29sdXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAvLyBmcmFtZV9jb3VudFxuICAgICAgMHgxMixcbiAgICAgIDB4NjQsIDB4NjEsIDB4NjksIDB4NkMsIC8vIGRhaWx5bW90aW9uL2hscy5qc1xuICAgICAgMHg3OSwgMHg2RCwgMHg2RiwgMHg3NCxcbiAgICAgIDB4NjksIDB4NkYsIDB4NkUsIDB4MkYsXG4gICAgICAweDY4LCAweDZDLCAweDczLCAweDJFLFxuICAgICAgMHg2QSwgMHg3MywgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY29tcHJlc3Nvcm5hbWVcbiAgICAgIDB4MDAsIDB4MTgsIC8vIGRlcHRoID0gMjRcbiAgICAgIDB4MTEsIDB4MTFdKSAvLyBwcmVfZGVmaW5lZCA9IC0xXG4gICAgbGV0IGJ0cnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDFjLCAweDljLCAweDgwLCAvLyBidWZmZXJTaXplREJcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzAsIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzAgLy8gYXZnQml0cmF0ZVxuICAgIF0pXG4gICAgbGV0IHBhc3AgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAoaFNwYWNpbmcgPj4gMjQpLCAvLyBoU3BhY2luZ1xuICAgICAgKGhTcGFjaW5nID4+IDE2KSAmIDB4ZmYsXG4gICAgICAoaFNwYWNpbmcgPj4gOCkgJiAweGZmLFxuICAgICAgaFNwYWNpbmcgJiAweGZmLFxuICAgICAgKHZTcGFjaW5nID4+IDI0KSwgLy8gdlNwYWNpbmdcbiAgICAgICh2U3BhY2luZyA+PiAxNikgJiAweGZmLFxuICAgICAgKHZTcGFjaW5nID4+IDgpICYgMHhmZixcbiAgICAgIHZTcGFjaW5nICYgMHhmZlxuICAgIF0pXG5cbiAgICBidWZmZXIud3JpdGUoXG4gICAgICBGbXA0LnNpemUoc2l6ZSArIGF2YzEuYnl0ZUxlbmd0aCArIGF2Y2MuYnl0ZUxlbmd0aCArIGJ0cnQuYnl0ZUxlbmd0aCksIEZtcDQudHlwZSgnYXZjMScpLCBhdmMxLFxuICAgICAgRm1wNC5zaXplKDggKyBhdmNjLmJ5dGVMZW5ndGgpLCBGbXA0LnR5cGUoJ2F2Y0MnKSwgYXZjYyxcbiAgICAgIEZtcDQuc2l6ZSgyMCksIEZtcDQudHlwZSgnYnRydCcpLCBidHJ0LFxuICAgICAgRm1wNC5zaXplKDE2KSwgRm1wNC50eXBlKCdwYXNwJyksIHBhc3BcbiAgICApXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgc3R0cyAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBlbnRyeV9jb3VudFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3N0dHMnLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBzdHNjICgpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIGVudHJ5X2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc3RzYycsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHN0Y28gKCkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZW50cnlfY291bnRcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICdzdGNvJywgY29udGVudClcbiAgfVxuICBzdGF0aWMgc3RzeiAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gc2FtcGxlX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gc2FtcGxlX2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDIwLCAnc3RzeicsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG12ZXggKGR1cmF0aW9uLCB0aW1lc2NhbGUgPSAxMDAwLCB0cmFja0lEKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBtZWhkID0gQnVmZmVyLndyaXRlVWludDMyKGR1cmF0aW9uKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoNTYpLCBGbXA0LnR5cGUoJ212ZXgnKSwgRm1wNC5zaXplKDE2KSwgRm1wNC50eXBlKCdtZWhkJyksIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBtZWhkLCBGbXA0LnRyZXgodHJhY2tJRCkpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgdHJleCAoaWQpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIChpZCA+PiAyNCksXG4gICAgICAoaWQgPj4gMTYpICYgMHhmZixcbiAgICAgIChpZCA+PiA4KSAmIDB4ZmYsXG4gICAgICAoaWQgJiAweGZmKSwgLy8gdHJhY2tfSURcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGRlZmF1bHRfc2FtcGxlX2Rlc2NyaXB0aW9uX2luZGV4XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9kdXJhdGlvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZGVmYXVsdF9zYW1wbGVfc2l6ZVxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMSAvLyBkZWZhdWx0X3NhbXBsZV9mbGFnc1xuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoLCAndHJleCcsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG1vb2YgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgbWZoZCA9IEZtcDQubWZoZCgpXG4gICAgbGV0IHRyYWYgPSBGbXA0LnRyYWYoZGF0YSk7XG4gICAgW21maGQsIHRyYWZdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnbW9vZicsIG1maGQsIHRyYWYpXG4gIH1cbiAgc3RhdGljIG1maGQgKCkge1xuICAgIGxldCBjb250ZW50ID0gQnVmZmVyLndyaXRlVWludDMyKEZtcDQuc2VxdWVuY2UpXG4gICAgRm1wNC5zZXF1ZW5jZSArPSAxXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ21maGQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgdHJhZiAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB0ZmhkID0gRm1wNC50ZmhkKGRhdGEuaWQpXG4gICAgbGV0IHRmZHQgPSBGbXA0LnRmZHQoZGF0YS50aW1lKVxuICAgIGxldCBzZHRwID0gRm1wNC5zZHRwKGRhdGEpXG4gICAgbGV0IHRydW4gPSBGbXA0LnRydW4oZGF0YSwgc2R0cC5ieXRlTGVuZ3RoKTtcblxuICAgIFt0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ3RyYWYnLCB0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwKVxuICB9XG4gIHN0YXRpYyB0ZmhkIChpZCkge1xuICAgIGxldCBjb250ZW50ID0gQnVmZmVyLndyaXRlVWludDMyKGlkKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICd0ZmhkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHRmZHQgKHRpbWUpIHtcbiAgICAvLyBsZXQgdXBwZXIgPSBNYXRoLmZsb29yKHRpbWUgLyAoVUlOVDMyX01BWCArIDEpKSxcbiAgICAvLyAgICAgbG93ZXIgPSBNYXRoLmZsb29yKHRpbWUgJSAoVUlOVDMyX01BWCArIDEpKTtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAndGZkdCcsIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBCdWZmZXIud3JpdGVVaW50MzIodGltZSkpXG4gIH1cbiAgc3RhdGljIHRydW4gKGRhdGEsIHNkdHBMZW5ndGgpIHtcbiAgICAvLyBsZXQgaWQgPSBkYXRhLmlkO1xuICAgIC8vIGxldCBjZWlsID0gaWQgPT09IDEgPyAxNiA6IDEyO1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2FtcGxlQ291bnQgPSBCdWZmZXIud3JpdGVVaW50MzIoZGF0YS5zYW1wbGVzLmxlbmd0aClcbiAgICAvLyBtZGF0LWhlYWRlciA4XG4gICAgLy8gbW9vZi1oZWFkZXIgOFxuICAgIC8vIG1maGQgMTZcbiAgICAvLyB0cmFmLWhlYWRlciA4XG4gICAgLy8gdGhoZCAxNlxuICAgIC8vIHRmZHQgMjBcbiAgICAvLyB0cnVuLWhlYWRlciAxMlxuICAgIC8vIHNhbXBsZUNvdW50IDRcbiAgICAvLyBkYXRhLW9mZnNldCA0XG4gICAgLy8gc2FtcGxlcy5sZW5ndGhcbiAgICBsZXQgb2Zmc2V0ID0gQnVmZmVyLndyaXRlVWludDMyKDggKyA4ICsgMTYgKyA4ICsgMTYgKyAxNiArIDEyICsgNCArIDQgKyAxNiAqIGRhdGEuc2FtcGxlcy5sZW5ndGggKyBzZHRwTGVuZ3RoKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMjAgKyAxNiAqIGRhdGEuc2FtcGxlcy5sZW5ndGgpLCBGbXA0LnR5cGUoJ3RydW4nKSwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MEYsIDB4MDFdKSwgc2FtcGxlQ291bnQsIG9mZnNldClcblxuICAgIC8vIGxldCBzaXplID0gYnVmZmVyLmJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAgLy8gbGV0IHdyaXRlT2Zmc2V0ID0gMFxuICAgIC8vIGRhdGEuc2FtcGxlcy5mb3JFYWNoKCgpID0+IHtcbiAgICAvLyAgIHNpemUgKz0gMTZcbiAgICAvLyB9KVxuICAgIC8vXG4gICAgLy8gbGV0IHRydW5Cb3ggPSBuZXcgVWludDhBcnJheShzaXplKVxuXG4gICAgLy8gdHJ1bkJveC5zZXQoYnVmZmVyLmJ1ZmZlciwgMClcblxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBmbGFncyA9IGl0ZW0uZmxhZ3NcbiAgICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfZHVyYXRpb25cbiAgICAgICAgKGl0ZW0uZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDI0KSAmIDB4RkYsIC8vIHNhbXBsZV9zaXplXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uc2l6ZSkgJiAweEZGLFxuICAgICAgICAoZmxhZ3MuaXNMZWFkaW5nIDw8IDIpIHwgZmxhZ3MuZGVwZW5kc09uLCAvLyBzYW1wbGVfZmxhZ3NcbiAgICAgICAgKGZsYWdzLmlzRGVwZW5kZWRPbiA8PCA2KSB8IChmbGFncy5oYXNSZWR1bmRhbmN5IDw8IDQpIHwgZmxhZ3MuaXNOb25TeW5jLFxuICAgICAgICAweDAwLCAweDAwLCAvLyBzYW1wbGVfZGVncmFkYXRpb25fcHJpb3JpdHlcbiAgICAgICAgKGl0ZW0uY3RzID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfY29tcG9zaXRpb25fdGltZV9vZmZzZXRcbiAgICAgICAgKGl0ZW0uY3RzID4+PiAxNikgJiAweEZGLFxuICAgICAgICAoaXRlbS5jdHMgPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uY3RzKSAmIDB4RkZcbiAgICAgIF0pKVxuICAgICAgLy8gd3JpdGVPZmZzZXQgKz0gMTZcbiAgICAgIC8vIGJ1ZmZlci53cml0ZShCdWZmZXIud3JpdGVVaW50MzIoMCkpO1xuICAgIH0pXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgc2R0cCAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDEyICsgZGF0YS5zYW1wbGVzLmxlbmd0aCksIEZtcDQudHlwZSgnc2R0cCcpLCBGbXA0LmV4dGVuc2lvbigwLCAwKSlcbiAgICBkYXRhLnNhbXBsZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGZsYWdzID0gaXRlbS5mbGFnc1xuICAgICAgY29uc3QgbnVtID0gKGZsYWdzLmlzTGVhZGluZyA8PCA2KSB8IC8vIGlzX2xlYWRpbmc6IDIgKGJpdClcbiAgICAgICAgKGZsYWdzLmRlcGVuZHNPbiA8PCA0KSB8IC8vIHNhbXBsZV9kZXBlbmRzX29uXG4gICAgICAgIChmbGFncy5pc0RlcGVuZGVkT24gPDwgMikgfCAvLyBzYW1wbGVfaXNfZGVwZW5kZWRfb25cbiAgICAgICAgKGZsYWdzLmhhc1JlZHVuZGFuY3kpLy8gc2FtcGxlX2hhc19yZWR1bmRhbmN5XG5cbiAgICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbbnVtXSkpXG4gICAgfSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBtZGF0IChkYXRhKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBzaXplID0gOFxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLnNpemVcbiAgICB9KVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoc2l6ZSksIEZtcDQudHlwZSgnbWRhdCcpKVxuICAgIGxldCBtZGF0Qm94ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICBsZXQgb2Zmc2V0ID0gMFxuICAgIG1kYXRCb3guc2V0KGJ1ZmZlci5idWZmZXIsIG9mZnNldClcbiAgICBvZmZzZXQgKz0gOFxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaXRlbS5idWZmZXIuZm9yRWFjaCgodW5pdCkgPT4ge1xuICAgICAgICBtZGF0Qm94LnNldCh1bml0LCBvZmZzZXQpXG4gICAgICAgIG9mZnNldCArPSB1bml0LmJ5dGVMZW5ndGhcbiAgICAgICAgLy8gYnVmZmVyLndyaXRlKHVuaXQuZGF0YSk7XG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIG1kYXRCb3hcbiAgfVxufVxuRm1wNC50eXBlID0gKG5hbWUpID0+IHtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtuYW1lLmNoYXJDb2RlQXQoMCksIG5hbWUuY2hhckNvZGVBdCgxKSwgbmFtZS5jaGFyQ29kZUF0KDIpLCBuYW1lLmNoYXJDb2RlQXQoMyldKVxufVxuRm1wNC5zZXF1ZW5jZSA9IDFcblxuZXhwb3J0IGRlZmF1bHQgRm1wNFxuIiwiaW1wb3J0IHsgREVNVVhfRVZFTlRTLCBSRU1VWF9FVkVOVFMgfSBmcm9tICd4Z3BsYXllci11dGlscy9zcmMvY29uc3RhbnRzL2V2ZW50cydcbmltcG9ydCBNZWRpYVNlZ21lbnRMaXN0IGZyb20gJ3hncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvTWVkaWFTZWdtZW50TGlzdCdcbmltcG9ydCBNZWRpYVNlZ21lbnQgZnJvbSAneGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy9NZWRpYVNlZ21lbnQnXG5pbXBvcnQgTWVkaWFTYW1wbGUgZnJvbSAneGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy9NZWRpYVNhbXBsZSdcbmltcG9ydCBzbmlmZmVyIGZyb20gJ3hncGxheWVyLXV0aWxzL3NyYy9lbnYvc25pZmZlcidcbmltcG9ydCBCdWZmZXIgZnJvbSAneGdwbGF5ZXItdXRpbHMvc3JjL3dyaXRlL0J1ZmZlcidcbmltcG9ydCBGbXA0IGZyb20gJy4vZm1wNCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXA0UmVtdXhlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9kdHNCYXNlID0gMFxuICAgIHRoaXMuX2lzRHRzQmFzZUluaXRlZCA9IGZhbHNlXG4gICAgdGhpcy5fYXVkaW9OZXh0RHRzID0gbnVsbFxuICAgIHRoaXMuX3ZpZGVvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0ID0gbmV3IE1lZGlhU2VnbWVudExpc3QoJ3ZpZGVvJylcbiAgICB0aGlzLl9hdWRpb1NlZ21lbnRMaXN0ID0gbmV3IE1lZGlhU2VnbWVudExpc3QoJ2F1ZGlvJylcbiAgICBjb25zdCB7YnJvd3Nlcn0gPSBzbmlmZmVyXG4gICAgdGhpcy5fZmlsbFNpbGVuY2VGcmFtZSA9IGJyb3dzZXIgPT09ICdpZSdcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFLCB0aGlzLnJlbXV4LmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCB0aGlzLm9uTWV0YURhdGFSZWFkeS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fZHRzQmFzZSA9IC0xXG4gICAgdGhpcy5fZHRzQmFzZUluaXRlZCA9IGZhbHNlXG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gbnVsbFxuICAgIHRoaXMuX2F1ZGlvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgICB0aGlzLl9hdWRpb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0ID0gbnVsbFxuICAgIHRoaXMuX2F1ZGlvU2VnbWVudExpc3QgPSBudWxsXG4gIH1cblxuICByZW11eCAoKSB7XG4gICAgY29uc3QgeyBhdWRpb1RyYWNrLCB2aWRlb1RyYWNrIH0gPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKVxuICAgICF0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgJiYgdGhpcy5jYWxjRHRzQmFzZShhdWRpb1RyYWNrLCB2aWRlb1RyYWNrKVxuXG4gICAgdGhpcy5fcmVtdXhWaWRlbyh2aWRlb1RyYWNrKVxuICAgIHRoaXMuX3JlbXV4QXVkaW8oYXVkaW9UcmFjaylcbiAgfVxuXG4gIHNlZWsgKCkge1xuICAgIHRoaXMuX3ZpZGVvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl9hdWRpb05leHREdHMgPSBudWxsXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50TGlzdC5jbGVhcigpXG4gICAgdGhpcy5fYXVkaW9TZWdtZW50TGlzdC5jbGVhcigpXG4gIH1cblxuICBvbk1ldGFEYXRhUmVhZHkgKHR5cGUpIHtcbiAgICBsZXQgaW5pdFNlZ21lbnQgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgZnR5cCA9IEZtcDQuZnR5cCgpXG4gICAgbGV0IG1vb3ZcbiAgICBsZXQgdHJhY2tcblxuICAgIGlmICh0eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICBjb25zdCB7IGF1ZGlvVHJhY2sgfSA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gICAgICB0cmFjayA9IGF1ZGlvVHJhY2s7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgdmlkZW9UcmFjayB9ID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgICAgIHRyYWNrID0gdmlkZW9UcmFjaztcbiAgICB9XG5cbiAgICBtb292ID0gRm1wNC5tb292KHsgdHlwZSwgbWV0YTogdHJhY2subWV0YSB9KVxuXG4gICAgaW5pdFNlZ21lbnQud3JpdGUoZnR5cCwgbW9vdilcblxuICAgIGxldCBwcmVzb3VyY2VidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuZ2V0U291cmNlKHR5cGUpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuY3JlYXRlU291cmNlKHR5cGUpO1xuICAgIH1cblxuICAgIHNvdXJjZS5taW1ldHlwZSA9IHRyYWNrLm1ldGEuY29kZWM7XG4gICAgc291cmNlLmluaXQgPSBpbml0U2VnbWVudDtcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLklOSVRfU0VHTUVOVCwgdHlwZSlcbiAgfVxuXG4gIGNhbGNEdHNCYXNlIChhdWRpb1RyYWNrLCB2aWRlb1RyYWNrKSB7XG4gICAgbGV0IGF1ZGlvQmFzZSA9IEluZmluaXR5XG4gICAgbGV0IHZpZGVvQmFzZSA9IEluZmluaXR5XG4gICAgaWYgKGF1ZGlvVHJhY2suc2FtcGxlcyAmJiBhdWRpb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICBhdWRpb0Jhc2UgPSBhdWRpb1RyYWNrLnNhbXBsZXNbMF0uZHRzXG4gICAgfVxuICAgIGlmICh2aWRlb1RyYWNrLnNhbXBsZXMgJiYgdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgdmlkZW9CYXNlID0gdmlkZW9UcmFjay5zYW1wbGVzWzBdLmR0c1xuICAgIH1cblxuICAgIHRoaXMuX2R0c0Jhc2UgPSBNYXRoLm1pbihhdWRpb0Jhc2UsIHZpZGVvQmFzZSlcbiAgICB0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgPSB0cnVlXG4gIH1cblxuICBfcmVtdXhWaWRlbyAodmlkZW9UcmFjaykge1xuICAgIGNvbnN0IHRyYWNrID0gdmlkZW9UcmFja1xuICAgIGlmICghdmlkZW9UcmFjay5zYW1wbGVzIHx8ICF2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbGV0IHtzYW1wbGVzfSA9IHRyYWNrXG4gICAgbGV0IGR0c0NvcnJlY3Rpb25cbiAgICBsZXQgZmlyc3REdHMgPSAtMVxuICAgIGxldCBsYXN0RHRzID0gLTFcbiAgICBsZXQgZmlyc3RQdHMgPSAtMVxuICAgIGxldCBsYXN0UHRzID0gLTFcblxuICAgIGNvbnN0IG1wNFNhbXBsZXMgPSBbXVxuICAgIGNvbnN0IG1kYXRCb3ggPSB7XG4gICAgICBzYW1wbGVzOiBbXVxuICAgIH1cbiAgICBjb25zdCB2aWRlb1NlZ21lbnQgPSBuZXcgTWVkaWFTZWdtZW50KClcbiAgICB3aGlsZSAoc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGF2Y1NhbXBsZSA9IHNhbXBsZXMuc2hpZnQoKVxuICAgICAgY29uc3QgeyBpc0tleWZyYW1lIH0gPSBhdmNTYW1wbGVcbiAgICAgIGxldCBkdHMgPSBhdmNTYW1wbGUuZHRzIC0gdGhpcy5fZHRzQmFzZVxuICAgICAgY29uc3QgY3RzID0gYXZjU2FtcGxlLmN0c1xuXG4gICAgICBpZiAoZHRzQ29ycmVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICghdGhpcy5fdmlkZW9OZXh0RHRzKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3ZpZGVvU2VnbWVudExpc3QuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBkdHNDb3JyZWN0aW9uID0gMFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0U2VnbWVudCA9IHRoaXMuX3ZpZGVvU2VnbWVudExpc3QuZ2V0TGFzdFNlZ21lbnRCZWZvcmUoZHRzKVxuICAgICAgICAgICAgaWYgKGxhc3RTZWdtZW50KSB7XG4gICAgICAgICAgICAgIGxldCBnYXBcbiAgICAgICAgICAgICAgY29uc3Qge2xhc3REdHMsIGdhcDogbGFzdEdhcH0gPSBsYXN0U2VnbWVudFxuICAgICAgICAgICAgICBnYXAgPSBkdHMgLSAobGFzdER0cyArIGxhc3RHYXApID4gMyA/IGR0cyAtIChsYXN0RHRzICsgbGFzdEdhcCkgOiAwXG4gICAgICAgICAgICAgIGR0c0NvcnJlY3Rpb24gPSBkdHMgLSAobGFzdER0cyArIGdhcClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGR0c0NvcnJlY3Rpb24gPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGR0c0NvcnJlY3Rpb24gPSBkdHMgLSB0aGlzLl92aWRlb05leHREdHMgPj0gMTAwMCA/IDAgOiBkdHMgLSB0aGlzLl92aWRlb05leHREdHNcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3Qgb3JpZ2luRHRzID0gZHRzXG4gICAgICBkdHMgLT0gZHRzQ29ycmVjdGlvblxuICAgICAgY29uc3QgcHRzID0gZHRzICsgY3RzXG5cbiAgICAgIGlmIChmaXJzdER0cyA9PT0gLTEpIHtcbiAgICAgICAgZmlyc3REdHMgPSBkdHNcbiAgICAgICAgZmlyc3RQdHMgPSBwdHNcbiAgICAgIH1cbiAgICAgIC8vIGxldCBfdW5pdHMgPSBbXVxuICAgICAgLy8gd2hpbGUgKGF2Y1NhbXBsZS51bml0cy5sZW5ndGgpIHtcbiAgICAgIC8vICAgbGV0IG1kYXRTYW1wbGUgPSB7XG4gICAgICAvLyAgICAgYnVmZmVyOiBbXSxcbiAgICAgIC8vICAgICBzaXplOiAwXG4gICAgICAvLyAgIH1cbiAgICAgIC8vICAgY29uc3QgdW5pdCA9IGF2Y1NhbXBsZS51bml0cy5zaGlmdCgpXG4gICAgICAvLyAgIF91bml0cy5wdXNoKHVuaXQpXG4gICAgICAvLyAgIG1kYXRTYW1wbGUuYnVmZmVyLnB1c2godW5pdClcbiAgICAgIC8vICAgbWRhdFNhbXBsZS5zaXplICs9IHVuaXQuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAvL1xuICAgICAgLy9cbiAgICAgIC8vIH1cbiAgICAgIGxldCBtZGF0U2FtcGxlID0ge1xuICAgICAgICBidWZmZXI6IFtdLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9XG4gICAgICBtZGF0Qm94LnNhbXBsZXMucHVzaChtZGF0U2FtcGxlKVxuICAgICAgbWRhdFNhbXBsZS5idWZmZXIucHVzaChhdmNTYW1wbGUuZGF0YSlcbiAgICAgIG1kYXRTYW1wbGUuc2l6ZSArPSBhdmNTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG5cbiAgICAgIGxldCBzYW1wbGVEdXJhdGlvbiA9IDBcblxuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dER0cyA9IHNhbXBsZXNbMF0uZHRzIC0gdGhpcy5fZHRzQmFzZSAtIGR0c0NvcnJlY3Rpb25cbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBuZXh0RHRzIC0gZHRzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGggPj0gMSkgeyAvLyBsYXN0ZXN0IHNhbXBsZSwgdXNlIHNlY29uZCBsYXN0IGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlIG9ubHkgb25lIHNhbXBsZSwgdXNlIHJlZmVyZW5jZSBkdXJhdGlvblxuICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gdGhpcy52aWRlb01ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNLZXlmcmFtZSkge1xuICAgICAgICBjb25zdCByYXAgPSBuZXcgTWVkaWFTYW1wbGUoe1xuICAgICAgICAgIGR0cyxcbiAgICAgICAgICBwdHMsXG4gICAgICAgICAgZHVyYXRpb246IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICAgIG9yaWdpbkR0czogYXZjU2FtcGxlLmR0cyxcbiAgICAgICAgICAvLyBwb3NpdGlvbjogYXZjU2FtcGxlLnBvc2l0aW9uLFxuICAgICAgICAgIGlzUkFQOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICAgIHZpZGVvU2VnbWVudC5hZGRSQVAocmFwKVxuICAgICAgfVxuXG4gICAgICBtcDRTYW1wbGVzLnB1c2goe1xuICAgICAgICBkdHMsXG4gICAgICAgIGN0cyxcbiAgICAgICAgcHRzLFxuICAgICAgICBkYXRhOiBhdmNTYW1wbGUuZGF0YSxcbiAgICAgICAgc2l6ZTogYXZjU2FtcGxlLmRhdGEuYnl0ZUxlbmd0aCxcbiAgICAgICAgaXNLZXlmcmFtZSxcbiAgICAgICAgZHVyYXRpb246IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBmbGFnczoge1xuICAgICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgICBkZXBlbmRzT246IGlzS2V5ZnJhbWUgPyAyIDogMSxcbiAgICAgICAgICBpc0RlcGVuZGVkT246IGlzS2V5ZnJhbWUgPyAxIDogMCxcbiAgICAgICAgICBoYXNSZWR1bmRhbmN5OiAwLFxuICAgICAgICAgIGlzTm9uU3luYzogaXNLZXlmcmFtZSA/IDAgOiAxXG4gICAgICAgIH0sXG4gICAgICAgIG9yaWdpbkR0c1xuICAgICAgfSlcbiAgICB9XG4gICAgY29uc3QgZmlyc3QgPSBtcDRTYW1wbGVzWzBdXG4gICAgY29uc3QgbGFzdCA9IG1wNFNhbXBsZXNbbXA0U2FtcGxlcy5sZW5ndGggLSAxXVxuICAgIGxhc3REdHMgPSBsYXN0LmR0cyArIGxhc3QuZHVyYXRpb25cbiAgICBsYXN0UHRzID0gbGFzdC5wdHMgKyBsYXN0LmR1cmF0aW9uXG5cbiAgICB0aGlzLl92aWRlb05leHREdHMgPSBsYXN0RHRzXG5cbiAgICB2aWRlb1NlZ21lbnQuc3RhcnREdHMgPSBmaXJzdER0c1xuICAgIHZpZGVvU2VnbWVudC5lbmREdHMgPSBsYXN0RHRzXG4gICAgdmlkZW9TZWdtZW50LnN0YXJ0UHRzID0gZmlyc3RQdHNcbiAgICB2aWRlb1NlZ21lbnQuZW5kUHRzID0gbGFzdFB0c1xuICAgIHZpZGVvU2VnbWVudC5vcmlnaW5TdGFydER0cyA9IGZpcnN0Lm9yaWdpbkR0c1xuICAgIHZpZGVvU2VnbWVudC5vcmlnaW5FbmREdHMgPSBsYXN0Lm9yaWdpbkR0cyArIGxhc3QuZHVyYXRpb25cbiAgICB2aWRlb1NlZ21lbnQuZ2FwID0gZHRzQ29ycmVjdGlvblxuICAgIGNvbnN0IGZpcnN0U2FtcGxlID0gbmV3IE1lZGlhU2FtcGxlKHtcbiAgICAgIGR0czogZmlyc3QuZHRzLFxuICAgICAgcHRzOiBmaXJzdC5wdHMsXG4gICAgICBkdXJhdGlvbjogZmlyc3QuZHVyYXRpb24sXG4gICAgICBpc0tleWZyYW1lOiBmaXJzdC5pc0tleWZyYW1lLFxuICAgICAgb3JpZ2luRHRzOiBmaXJzdC5vcmlnaW5EdHNcbiAgICB9KVxuICAgIGNvbnN0IGxhc3RTYW1wbGUgPSBuZXcgTWVkaWFTYW1wbGUoe1xuICAgICAgZHRzOiBsYXN0LmR0cyxcbiAgICAgIHB0czogbGFzdC5wdHMsXG4gICAgICBkdXJhdGlvbjogbGFzdC5kdXJhdGlvbixcbiAgICAgIGlzS2V5ZnJhbWU6IGxhc3QuaXNLZXlmcmFtZSxcbiAgICAgIG9yaWdpbkR0czogbGFzdC5vcmlnaW5EdHNcbiAgICB9KVxuICAgIHZpZGVvU2VnbWVudC5maXJzdFNhbXBsZSA9IGZpcnN0U2FtcGxlXG4gICAgdmlkZW9TZWdtZW50Lmxhc3RTYW1wbGUgPSBsYXN0U2FtcGxlXG4gICAgbGV0IG1vb2ZNZGF0ID0gbmV3IEJ1ZmZlcigpXG5cbiAgICAvLyB0cmFjay5zYW1wbGVzID0gbXA0U2FtcGxlc1xuICAgIC8vIHRyYWNrLnRpbWUgPSBmaXJzdER0c1xuICAgIGNvbnN0IG1vb2YgPSBGbXA0Lm1vb2Yoe1xuICAgICAgaWQ6IHRyYWNrLm1ldGEuaWQsXG4gICAgICB0aW1lOiBmaXJzdER0cyxcbiAgICAgIHNhbXBsZXM6IG1wNFNhbXBsZXNcbiAgICB9KVxuICAgIGNvbnN0IG1kYXQgPSBGbXA0Lm1kYXQobWRhdEJveClcbiAgICBtb29mTWRhdC53cml0ZShtb29mLCBtZGF0KVxuXG4gICAgLy8gdGhpcy5fdmlkZW9TZWdtZW50TGlzdC5hcHBlbmQodmlkZW9TZWdtZW50KVxuICAgIC8vIGlmICghdGhpcy5fc3RvcmUuaXNMaXZlKSB7XG4gICAgLy8gfVxuXG4gICAgdHJhY2suc2FtcGxlcyA9IFtdXG4gICAgdHJhY2subGVuZ3RoID0gMFxuXG4gICAgbGV0IHByZXNvdXJjZWJ1ZmZlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1BSRV9TT1VSQ0VfQlVGRkVSJyk7XG4gICAgbGV0IHNvdXJjZSA9IHByZXNvdXJjZWJ1ZmZlci5nZXRTb3VyY2UoJ3ZpZGVvJyk7XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIHNvdXJjZSA9IHByZXNvdXJjZWJ1ZmZlci5jcmVhdGVTb3VyY2UoJ3ZpZGVvJyk7XG4gICAgfVxuXG4gICAgc291cmNlLmRhdGEucHVzaChtb29mTWRhdCk7XG5cbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLk1FRElBX1NFR01FTlQsICd2aWRlbycpXG4gICAgLy8gdGhpcy5oYW5kbGVNZWRpYUZyYWdtZW50KHtcbiAgICAvLyAgIHR5cGU6ICd2aWRlbycsXG4gICAgLy8gICBkYXRhOiBtb29mTWRhdC5idWZmZXIuYnVmZmVyLFxuICAgIC8vICAgc2FtcGxlQ291bnQ6IG1wNFNhbXBsZXMubGVuZ3RoLFxuICAgIC8vICAgZnJhZ21lbnQ6IHZpZGVvU2VnbWVudFxuICAgIC8vIH0pXG4gIH1cblxuICBfcmVtdXhBdWRpbyAodHJhY2spIHtcbiAgICBjb25zdCB7c2FtcGxlc30gPSB0cmFja1xuICAgIGxldCBkdHNDb3JyZWN0aW9uXG4gICAgbGV0IGZpcnN0RHRzID0gLTFcbiAgICBsZXQgbGFzdER0cyA9IC0xXG4gICAgLy8gbGV0IGZpcnN0UHRzID0gLTFcbiAgICAvLyBsZXQgbGFzdFB0cyA9IC0xXG4gICAgbGV0IHNpbGVudER1cmF0aW9uXG4gICAgbGV0IG1wNFNhbXBsZXMgPSBbXVxuXG4gICAgY29uc3QgbWRhdEJveCA9IHtcbiAgICAgIHNhbXBsZXM6IFtdXG4gICAgfVxuICAgIGlmICghc2FtcGxlcyB8fCAhc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsZXQgaXNGaXJzdER0c0luaXRlZCA9IGZhbHNlXG4gICAgd2hpbGUgKHNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICBsZXQgc2FtcGxlID0gc2FtcGxlcy5zaGlmdCgpXG4gICAgICBjb25zdCB7IGRhdGEgfSA9IHNhbXBsZVxuICAgICAgbGV0IGR0cyA9IHNhbXBsZS5kdHMgLSB0aGlzLl9kdHNCYXNlXG5cbiAgICAgIGxldCBuZWVkU2lsZW50RnJhbWUgPSBmYWxzZVxuICAgICAgaWYgKGR0c0NvcnJlY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXRoaXMuX2F1ZGlvTmV4dER0cykge1xuICAgICAgICAgIGlmICh0aGlzLl9hdWRpb1NlZ21lbnRMaXN0LmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgZHRzQ29ycmVjdGlvbiA9IDBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbGFzdFNlZ21lbnQgPSB0aGlzLl9hdWRpb1NlZ21lbnRMaXN0LmdldExhc3RTZWdtZW50QmVmb3JlKGR0cylcbiAgICAgICAgICAgIGlmIChsYXN0U2VnbWVudCkge1xuICAgICAgICAgICAgICBsZXQgZ2FwXG4gICAgICAgICAgICAgIGNvbnN0IHtsYXN0RHRzLCBnYXA6IGxhc3RHYXB9ID0gbGFzdFNlZ21lbnRcbiAgICAgICAgICAgICAgZ2FwID0gZHRzIC0gKGxhc3REdHMgKyBsYXN0R2FwKSA+IDMgPyBkdHMgLSAobGFzdER0cyArIGxhc3RHYXApIDogMFxuICAgICAgICAgICAgICBkdHNDb3JyZWN0aW9uID0gZHRzIC0gKGxhc3REdHMgKyBnYXApXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZWVkU2lsZW50RnJhbWUgPSB0aGlzLl9maWxsU2lsZW5jZUZyYW1lICYmICF0aGlzLl92aWRlb1NlZ21lbnRMaXN0LmlzRW1wdHkoKVxuICAgICAgICAgICAgICBkdHNDb3JyZWN0aW9uID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkdHNDb3JyZWN0aW9uID0gZHRzIC0gdGhpcy5fYXVkaW9OZXh0RHRzID49IDEwMDAgPyAwIDogZHRzIC0gdGhpcy5fYXVkaW9OZXh0RHRzXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IG9yaWdpbkR0cyA9IGR0c1xuICAgICAgZHRzIC09IGR0c0NvcnJlY3Rpb25cblxuICAgICAgaWYgKG5lZWRTaWxlbnRGcmFtZSkge1xuICAgICAgICBjb25zdCB2aWRlb1NlZ21lbnQgPSB0aGlzLl92aWRlb1NlZ21lbnRMaXN0LmdldExhc3RTYW1wbGVCZWZvcmUob3JpZ2luRHRzKVxuXG4gICAgICAgIGlmICh2aWRlb1NlZ21lbnQgJiYgdmlkZW9TZWdtZW50LnN0YXJ0RHRzIDwgZHRzKSB7XG4gICAgICAgICAgc2lsZW50RHVyYXRpb24gPSBkdHMgLSB2aWRlb1NlZ21lbnQuc3RhcnREdHNcbiAgICAgICAgICBkdHMgPSB2aWRlb1NlZ21lbnQuc3RhcnREdHNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZWVkU2lsZW50RnJhbWUgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNGaXJzdER0c0luaXRlZCkge1xuICAgICAgICBmaXJzdER0cyA9IGR0c1xuICAgICAgICBpc0ZpcnN0RHRzSW5pdGVkID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAobmVlZFNpbGVudEZyYW1lKSB7XG4gICAgICAgIHNhbXBsZXMudW5zaGlmdChzYW1wbGUpXG4gICAgICAgIGNvbnN0IHNpbGVudEZyYW1lID0gdGhpcy5pbml0U2lsZW50QXVkaW8oZHRzLCBzaWxlbnREdXJhdGlvbilcbiAgICAgICAgbXA0U2FtcGxlcy5wdXNoKHNpbGVudEZyYW1lKVxuXG4gICAgICAgIGxldCBtZGF0U2FtcGxlID0ge1xuICAgICAgICAgIGJ1ZmZlcjogW10sXG4gICAgICAgICAgc2l6ZTogMFxuICAgICAgICB9XG4gICAgICAgIG1kYXRTYW1wbGUuYnVmZmVyLnB1c2goe1xuICAgICAgICAgIGRhdGE6IHNpbGVudEZyYW1lLnVuaXRcbiAgICAgICAgfSlcbiAgICAgICAgbWRhdFNhbXBsZS5zaXplICs9IHNpbGVudEZyYW1lLnVuaXQuYnl0ZUxlbmd0aFxuXG4gICAgICAgIG1kYXRCb3guc2FtcGxlcy5wdXNoKG1kYXRTYW1wbGUpXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGxldCBzYW1wbGVEdXJhdGlvbiA9IDBcblxuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dER0cyA9IHNhbXBsZXNbMF0uZHRzIC0gdGhpcy5fZHRzQmFzZSAtIGR0c0NvcnJlY3Rpb25cbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBuZXh0RHRzIC0gZHRzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGggPj0gMSkgeyAvLyB1c2Ugc2Vjb25kIGxhc3Qgc2FtcGxlIGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlIG9ubHkgb25lIHNhbXBsZSwgdXNlIHJlZmVyZW5jZSBzYW1wbGUgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgbXA0U2FtcGxlID0ge1xuICAgICAgICBkdHMsXG4gICAgICAgIHB0czogZHRzLFxuICAgICAgICBjdHM6IDAsXG4gICAgICAgIHNpemU6IGRhdGEuYnl0ZUxlbmd0aCxcbiAgICAgICAgZHVyYXRpb246IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBmbGFnczoge1xuICAgICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgICBkZXBlbmRzT246IDIsXG4gICAgICAgICAgaXNEZXBlbmRlZE9uOiAxLFxuICAgICAgICAgIGhhc1JlZHVuZGFuY3k6IDAsXG4gICAgICAgICAgaXNOb25TeW5jOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGlzS2V5ZnJhbWU6IHRydWUsXG4gICAgICAgIG9yaWdpbkR0c1xuICAgICAgfVxuXG4gICAgICBsZXQgbWRhdFNhbXBsZSA9IHtcbiAgICAgICAgYnVmZmVyOiBbXSxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfVxuICAgICAgbWRhdFNhbXBsZS5idWZmZXIucHVzaChkYXRhKVxuICAgICAgbWRhdFNhbXBsZS5zaXplICs9IGRhdGEuYnl0ZUxlbmd0aFxuXG4gICAgICBtZGF0Qm94LnNhbXBsZXMucHVzaChtZGF0U2FtcGxlKVxuXG4gICAgICBtcDRTYW1wbGVzLnB1c2gobXA0U2FtcGxlKVxuICAgIH1cblxuICAgIGNvbnN0IGxhc3QgPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV1cbiAgICBsYXN0RHRzID0gbGFzdC5kdHMgKyBsYXN0LmR1cmF0aW9uXG5cbiAgICB0aGlzLl9hdWRpb05leHREdHMgPSBsYXN0RHRzXG5cbiAgICBjb25zdCBhdWRpb1NlZ21lbnQgPSBuZXcgTWVkaWFTZWdtZW50KClcbiAgICBhdWRpb1NlZ21lbnQuc3RhcnREdHMgPSBmaXJzdER0c1xuICAgIGF1ZGlvU2VnbWVudC5lbmREdHMgPSBsYXN0RHRzXG4gICAgYXVkaW9TZWdtZW50LnN0YXJ0UHRzID0gZmlyc3REdHNcbiAgICBhdWRpb1NlZ21lbnQuZW5kUHRzID0gbGFzdER0c1xuICAgIGF1ZGlvU2VnbWVudC5vcmlnaW5TdGFydER0cyA9IG1wNFNhbXBsZXNbMF0ub3JpZ2luRHRzXG4gICAgYXVkaW9TZWdtZW50Lm9yaWdpbkVuZER0cyA9IGxhc3Qub3JpZ2luRHRzICsgbGFzdC5kdXJhdGlvblxuICAgIGF1ZGlvU2VnbWVudC5nYXAgPSBkdHNDb3JyZWN0aW9uXG4gICAgYXVkaW9TZWdtZW50LmZpcnN0U2FtcGxlID0gbmV3IE1lZGlhU2FtcGxlKHtcbiAgICAgIGR0czogbXA0U2FtcGxlc1swXS5kdHMsXG4gICAgICBwdHM6IG1wNFNhbXBsZXNbMF0ucHRzLFxuICAgICAgZHVyYXRpb246IG1wNFNhbXBsZXNbMF0uZHVyYXRpb24sXG4gICAgICBvcmlnaW5EdHM6IG1wNFNhbXBsZXNbMF0ub3JpZ2luRHRzXG4gICAgfSlcbiAgICBhdWRpb1NlZ21lbnQubGFzdFNhbXBsZSA9IG5ldyBNZWRpYVNhbXBsZSh7XG4gICAgICBkdHM6IGxhc3QuZHRzLFxuICAgICAgcHRzOiBsYXN0LnB0cyxcbiAgICAgIGR1cmF0aW9uOiBsYXN0LmR1cmF0aW9uLFxuICAgICAgb3JpZ2luRHRzOiBsYXN0Lm9yaWdpbkR0c1xuICAgIH0pXG5cbiAgICB0cmFjay5zYW1wbGVzID0gbXA0U2FtcGxlc1xuICAgIGNvbnN0IG1vb2ZNZGF0ID0gbmV3IEJ1ZmZlcigpXG4gICAgY29uc3QgbW9vZiA9IEZtcDQubW9vZih7XG4gICAgICBpZDogdHJhY2subWV0YS5pZCxcbiAgICAgIHRpbWU6IGZpcnN0RHRzLFxuICAgICAgc2FtcGxlczogbXA0U2FtcGxlc1xuICAgIH0pXG4gICAgY29uc3QgbWRhdCA9IEZtcDQubWRhdChtZGF0Qm94KVxuICAgIG1vb2ZNZGF0LndyaXRlKG1vb2YsIG1kYXQpXG5cbiAgICAvLyBpZiAoIXRoaXMuX3N0b3JlLmlzTGl2ZSkge1xuICAgIC8vICAgdGhpcy5fYXVkaW9TZWdtZW50TGlzdC5hcHBlbmQoYXVkaW9TZWdtZW50KVxuICAgIC8vIH1cbiAgICB0cmFjay5zYW1wbGVzID0gW11cbiAgICB0cmFjay5sZW5ndGggPSAwXG5cbiAgICBsZXQgcHJlc291cmNlYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmdldFNvdXJjZSgnYXVkaW8nKTtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmNyZWF0ZVNvdXJjZSgnYXVkaW8nKTtcbiAgICB9XG4gICAgc291cmNlLmRhdGEucHVzaChtb29mTWRhdCk7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5NRURJQV9TRUdNRU5ULCAnYXVkaW8nLCBtb29mTWRhdClcbiAgfVxuXG4gIGluaXRTaWxlbnRBdWRpbyAoZHRzLCBkdXJhdGlvbikge1xuICAgIGNvbnN0IHVuaXQgPSBNcDRSZW11eGVyLmdldFNpbGVudEZyYW1lKHRoaXMuX2F1ZGlvTWV0YS5jaGFubmVsQ291bnQpXG4gICAgcmV0dXJuIHtcbiAgICAgIGR0cyxcbiAgICAgIHB0czogZHRzLFxuICAgICAgY3RzOiAwLFxuICAgICAgZHVyYXRpb24sXG4gICAgICB1bml0LFxuICAgICAgc2l6ZTogdW5pdC5ieXRlTGVuZ3RoLFxuICAgICAgb3JpZ2luRHRzOiBkdHNcbiAgICB9XG4gIH1cblxuICBnZXQgdmlkZW9NZXRhICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJykudmlkZW9UcmFjay5tZXRhXG4gIH1cbiAgZ2V0IGF1ZGlvTWV0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpLmF1ZGlvVHJhY2subWV0YVxuICB9XG5cbiAgc3RhdGljIGdldFNpbGVudEZyYW1lIChjaGFubmVsQ291bnQpIHtcbiAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjMsIDB4ODBdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MjEsIDB4MDAsIDB4NDksIDB4OTAsIDB4MDIsIDB4MTksIDB4MDAsIDB4MjMsIDB4ODBdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAzKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4OGVdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA0KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODAsIDB4MmMsIDB4ODAsIDB4MDgsIDB4MDIsIDB4MzhdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA1KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MzhdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA2KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MDAsIDB4YjIsIDB4MDAsIDB4MjAsIDB4MDgsIDB4ZTBdKVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9NZWRpYUluZm8gPSByZXF1aXJlKFwiLi9tb2RlbHMvTWVkaWFJbmZvXCIpO1xuXG52YXIgX01lZGlhSW5mbzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZWRpYUluZm8pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBldmVudHMgPSByZXF1aXJlKCdldmVudHMnKTtcblxuY2xhc3MgQ29udGV4dCB7XG4gIGNvbnN0cnVjdG9yKGFsbG93ZWRFdmVudHMgPSBbXSkge1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgZXZlbnRzLkV2ZW50RW1pdHRlcigpO1xuICAgIHRoaXMuX2luc3RhbmNlTWFwID0ge307IC8vIOaJgOacieeahOino+eggea1geeoi+WunuS+i1xuXG4gICAgdGhpcy5fY2xzTWFwID0ge307IC8vIOaehOmAoOWHveaVsOeahG1hcFxuXG4gICAgdGhpcy5faW5pdGVkID0gZmFsc2U7XG4gICAgdGhpcy5tZWRpYUluZm8gPSBuZXcgX01lZGlhSW5mbzIuZGVmYXVsdCgpO1xuICAgIHRoaXMuYWxsb3dlZEV2ZW50cyA9IGFsbG93ZWRFdmVudHM7XG4gIH1cbiAgLyoqXG4gICAqIOS7juS4iuS4i+aWh+S4reiOt+WPluino+eggea1geeoi+WunuS+i++8jOWmguaenOayoeacieWunuS+i++8jOaehOmAoOS4gOS4qlxuICAgKiBAcGFyYW0gdGFnXG4gICAqIEBwYXJhbSBhcmdzXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cblxuXG4gIGdldEluc3RhbmNlKHRhZykge1xuICAgIGlmICh0aGlzLl9pbnN0YW5jZU1hcFt0YWddKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VNYXBbdGFnXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RhZ33lrp7kvovlsJrmnKrliJ3lp4vljJZgKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIOWIneWni+WMluWFt+S9k+WunuS+i1xuICAgKiBAcGFyYW0gdGFnXG4gICAqIEBwYXJhbSBhcmdzXG4gICAqL1xuXG5cbiAgaW5pdEluc3RhbmNlKHRhZywgLi4uYXJncykge1xuICAgIGlmICh0aGlzLl9jbHNNYXBbdGFnXSkge1xuICAgICAgY29uc3QgbmV3SW5zdGFuY2UgPSBuZXcgdGhpcy5fY2xzTWFwW3RhZ10oLi4uYXJncyk7XG4gICAgICB0aGlzLl9pbnN0YW5jZU1hcFt0YWddID0gbmV3SW5zdGFuY2U7XG5cbiAgICAgIGlmIChuZXdJbnN0YW5jZS5pbml0KSB7XG4gICAgICAgIG5ld0luc3RhbmNlLmluaXQoKTsgLy8gVE9ETzogbGlmZWNpcmNsZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3SW5zdGFuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0YWd95pyq5ZyoY29udGV4dOS4reazqOWGjGApO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICog6YG/5YWN5aSn6YeP55qEaW5pdEluc3RhbmNl6LCD55So77yM5Yid5aeL5YyW5omA5pyJ55qE57uE5Lu2XG4gICAqIEBwYXJhbSBjb25maWdcbiAgICovXG5cblxuICBpbml0KGNvbmZpZykge1xuICAgIGlmICh0aGlzLl9pbml0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCB0YWcgaW4gdGhpcy5fY2xzTWFwKSB7XG4gICAgICAvLyBpZiBub3QgaW5pdGVkLCBpbml0IGFuIGluc3RhbmNlXG4gICAgICBpZiAodGhpcy5fY2xzTWFwLmhhc093blByb3BlcnR5KHRhZykgJiYgIXRoaXMuX2luc3RhbmNlTWFwW3RhZ10pIHtcbiAgICAgICAgdGhpcy5pbml0SW5zdGFuY2UodGFnLCBjb25maWcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2luaXRlZCA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIOazqOWGjOS4gOS4quS4iuS4i+aWh+a1geeoi++8jOaPkOS+m+WuieWFqOeahOS6i+S7tuWPkemAgeacuuWItlxuICAgKiBAcGFyYW0gdGFnXG4gICAqIEBwYXJhbSBjbHNcbiAgICovXG5cblxuICByZWdpc3RyeSh0YWcsIGNscykge1xuICAgIGNvbnN0IGVtaXR0ZXIgPSB0aGlzLl9lbWl0dGVyO1xuXG4gICAgY29uc3QgY2hlY2tNZXNzYWdlTmFtZSA9IHRoaXMuX2lzTWVzc2FnZU5hbWVWYWxpZC5iaW5kKHRoaXMpO1xuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgZW5oYW5jZWQgPSBjbGFzcyBleHRlbmRzIGNscyB7XG4gICAgICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgICAgICB0aGlzLlRBRyA9IHRhZztcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IHNlbGY7XG4gICAgICB9XG5cbiAgICAgIG9uKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKTtcblxuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnNbbWVzc2FnZU5hbWVdKSB7XG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnNbbWVzc2FnZU5hbWVdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXSA9IFtjYWxsYmFja107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZW1pdHRlci5vbihtZXNzYWdlTmFtZSwgY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBvbmNlKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKTtcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub25jZShtZXNzYWdlTmFtZSwgY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBlbWl0KG1lc3NhZ2VOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhgWyR7dGhpcy5UQUd9XSAke21lc3NhZ2VOYW1lfWAsIHRoaXMpO1xuICAgICAgICByZXR1cm4gZW1pdHRlci5lbWl0KG1lc3NhZ2VOYW1lLCAuLi5hcmdzKTtcbiAgICAgIH1cblxuICAgICAgb2ZmKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKTtcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub2ZmKG1lc3NhZ2VOYW1lLCBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJlbW92ZUxpc3RlbmVycygpIHtcbiAgICAgICAgY29uc3QgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKHRoaXMubGlzdGVuZXJzKTtcblxuICAgICAgICBmb3IgKGxldCBtZXNzYWdlTmFtZSBpbiB0aGlzLmxpc3RlbmVycykge1xuICAgICAgICAgIGlmIChoYXNPd24obWVzc2FnZU5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSB0aGlzLmxpc3RlbmVyc1ttZXNzYWdlTmFtZV0gfHwgW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldO1xuICAgICAgICAgICAgICBlbWl0dGVyLm9mZihtZXNzYWdlTmFtZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiDlnKjnu4Tku7bplIDmr4Hml7bvvIzpu5jorqTlsIblroPms6jlhoznmoTkuovku7blhajpg6jljbjovb3vvIznoa7kv53kuI3kvJrpgKDmiJDlhoXlrZjms4TmvI9cbiAgICAgICAqL1xuXG5cbiAgICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIC8vIHN0ZXAxIHVubGlzdGVuIGV2ZW50c1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpOyAvLyBzdGVwMiByZWxlYXNlIGZyb20gY29udGV4dFxuXG4gICAgICAgIGRlbGV0ZSBzZWxmLl9pbnN0YW5jZU1hcFt0YWddO1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgICB9XG5cbiAgICB9O1xuICAgIHRoaXMuX2Nsc01hcFt0YWddID0gZW5oYW5jZWQ7XG4gICAgLyoqXG4gICAgICogZ2V0IGluc3RhbmNlIGltbWVkaWF0ZWx5XG4gICAgICogZS5nIGNvbnN0IGluc3RhbmNlID0gY29udGV4dC5yZWdpc3RyeSh0YWcsIENscykoY29uZmlnKVxuICAgICAqICovXG5cbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmluaXRJbnN0YW5jZSh0YWcsIC4uLmFyZ3MpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIOWvueWtmOWcqOeahOWunuS+i+i/m+ihjFxuICAgKi9cblxuXG4gIGRlc3Ryb3lJbnN0YW5jZXMoKSB7XG4gICAgT2JqZWN0LmtleXModGhpcy5faW5zdGFuY2VNYXApLmZvckVhY2godGFnID0+IHtcbiAgICAgIGlmICh0aGlzLl9pbnN0YW5jZU1hcFt0YWddLmRlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VNYXBbdGFnXS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIOe8luino+eggea1geeoi+aXoOmcgOWFs+azqOS6i+S7tueahOino+e7kVxuICAgKi9cblxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fZW1pdHRlciA9IG51bGw7XG4gICAgdGhpcy5hbGxvd2VkRXZlbnRzID0gbnVsbDtcbiAgICB0aGlzLl9jbHNNYXAgPSBudWxsO1xuICAgIHRoaXMuZGVzdHJveUluc3RhbmNlcygpO1xuICB9XG4gIC8qKlxuICAgKiDlr7nkv6HpgZPov5vooYzmlLbmi6JcbiAgICogQHBhcmFtIG1lc3NhZ2VOYW1lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgX2lzTWVzc2FnZU5hbWVWYWxpZChtZXNzYWdlTmFtZSkge1xuICAgIGlmICghdGhpcy5hbGxvd2VkRXZlbnRzLmluZGV4T2YobWVzc2FnZU5hbWUpIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnJlZ2lzdGVyZWQgbWVzc2FnZSBuYW1lOiAke21lc3NhZ2VOYW1lfWApO1xuICAgIH1cbiAgfVxuXG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENvbnRleHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmNvbnN0IExPQURFUl9FVkVOVFMgPSBleHBvcnRzLkxPQURFUl9FVkVOVFMgPSB7XG4gIExPQURFUl9EQVRBTE9BREVEOiAnTE9BREVSX0RBVEFMT0FERUQnLFxuICBMT0FERVJfQ09NUExFVEU6ICdMT0FERVJfQ09NUExFVEUnLFxuICBMT0FERVJfRVJST1I6ICdMT0FERVJfRVJST1InXG59O1xuY29uc3QgREVNVVhfRVZFTlRTID0gZXhwb3J0cy5ERU1VWF9FVkVOVFMgPSB7XG4gIERFTVVYX0NPTVBMRVRFOiAnREVNVVhfQ09NUExFVEUnLFxuICBERU1VWF9FUlJPUjogJ0RFTVVYX0VSUk9SJyxcbiAgTUVUQURBVEFfUEFSU0VEOiAnTUVUQURBVEFfUEFSU0VEJyxcbiAgVklERU9fTUVUQURBVEFfQ0hBTkdFOiAnVklERU9fTUVUQURBVEFfQ0hBTkdFJyxcbiAgQVVESU9fTUVUQURBVEFfQ0hBTkdFOiAnQVVESU9fTUVUQURBVEFfQ0hBTkdFJyxcbiAgTUVESUFfSU5GTzogJ01FRElBX0lORk8nXG59O1xuY29uc3QgUkVNVVhfRVZFTlRTID0gZXhwb3J0cy5SRU1VWF9FVkVOVFMgPSB7XG4gIE1FRElBX1NFR01FTlQ6ICdNRURJQV9TRUdNRU5UJyxcbiAgUkVNVVhfRVJST1I6ICdSRU1VWF9FUlJPUicsXG4gIElOSVRfU0VHTUVOVDogJ0lOSVRfU0VHTUVOVCdcbn07XG5jb25zdCBldmVudHNPYmogPSBPYmplY3QuYXNzaWduKHt9LCBMT0FERVJfRVZFTlRTLCBERU1VWF9FVkVOVFMsIFJFTVVYX0VWRU5UUyk7XG5jb25zdCBmbHZBbGxvd2VkRXZlbnRzID0gZXhwb3J0cy5mbHZBbGxvd2VkRXZlbnRzID0gW107XG5cbmZvciAobGV0IGtleSBpbiBldmVudHNPYmopIHtcbiAgaWYgKGV2ZW50c09iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgZmx2QWxsb3dlZEV2ZW50cy5wdXNoKGV2ZW50c09ialtrZXldKTtcbiAgfVxufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBldmVudHNPYmo7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmNvbnN0IGlzT2JqZWN0RmlsbGVkID0gb2JqID0+IHtcbiAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNsYXNzIE1lZGlhSW5mbyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubWltZVR5cGUgPSBudWxsO1xuICAgIHRoaXMuZHVyYXRpb24gPSBudWxsO1xuICAgIHRoaXMuaGFzVmlkZW8gPSBudWxsO1xuICAgIHRoaXMudmlkZW8gPSB7XG4gICAgICBjb2RlYzogbnVsbCxcbiAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgaGVpZ2h0OiBudWxsLFxuICAgICAgcHJvZmlsZTogbnVsbCxcbiAgICAgIGxldmVsOiBudWxsLFxuICAgICAgZnJhbWVSYXRlOiB7XG4gICAgICAgIGZpeGVkOiB0cnVlLFxuICAgICAgICBmcHM6IDI1LFxuICAgICAgICBmcHNfbnVtOiAyNTAwMCxcbiAgICAgICAgZnBzX2RlbjogMTAwMFxuICAgICAgfSxcbiAgICAgIGNocm9tYUZvcm1hdDogbnVsbCxcbiAgICAgIHBhclJhdGlvOiB7XG4gICAgICAgIHdpZHRoOiAxLFxuICAgICAgICBoZWlnaHQ6IDFcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuaGFzQXVkaW8gPSBudWxsO1xuICAgIHRoaXMuYXVkaW8gPSB7XG4gICAgICBjb2RlYzogbnVsbCxcbiAgICAgIHNhbXBsZVJhdGU6IG51bGwsXG4gICAgICBzYW1wbGVSYXRlSW5kZXg6IG51bGwsXG4gICAgICBjaGFubmVsQ291bnQ6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgaXNDb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gTWVkaWFJbmZvLmlzQmFzZUluZm9SZWFkeSh0aGlzKSAmJiBNZWRpYUluZm8uaXNWaWRlb1JlYWR5KHRoaXMpICYmIE1lZGlhSW5mby5pc0F1ZGlvUmVhZHkodGhpcyk7XG4gIH1cblxuICBzdGF0aWMgaXNCYXNlSW5mb1JlYWR5KG1lZGlhSW5mbykge1xuICAgIHJldHVybiBpc09iamVjdEZpbGxlZChtZWRpYUluZm8pO1xuICB9XG5cbiAgc3RhdGljIGlzVmlkZW9SZWFkeShtZWRpYUluZm8pIHtcbiAgICBpZiAoIW1lZGlhSW5mby5oYXNWaWRlbykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzT2JqZWN0RmlsbGVkKG1lZGlhSW5mby52aWRlbyk7XG4gIH1cblxuICBzdGF0aWMgaXNBdWRpb1JlYWR5KG1lZGlhSW5mbykge1xuICAgIGlmICghbWVkaWFJbmZvLmhhc0F1ZGlvKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNPYmplY3RGaWxsZWQobWVkaWFJbmZvLnZpZGVvKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1lZGlhSW5mbzsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jb25jYXRUeXBlZEFycmF5ID0gcmVxdWlyZShcImNvbmNhdC10eXBlZC1hcnJheVwiKTtcblxudmFyIF9jb25jYXRUeXBlZEFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbmNhdFR5cGVkQXJyYXkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jbGFzcyBCdWZmZXIge1xuICBjb25zdHJ1Y3RvcihidWZmZXIpIHtcbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlciB8fCBuZXcgVWludDhBcnJheSgwKTtcbiAgfVxuXG4gIHdyaXRlKC4uLmJ1ZmZlcikge1xuICAgIGJ1ZmZlci5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgdGhpcy5idWZmZXIgPSAoMCwgX2NvbmNhdFR5cGVkQXJyYXkyLmRlZmF1bHQpKFVpbnQ4QXJyYXksIHRoaXMuYnVmZmVyLCBpdGVtKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyB3cml0ZVVpbnQzMih2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbdmFsdWUgPj4gMjQsIHZhbHVlID4+IDE2ICYgMHhmZiwgdmFsdWUgPj4gOCAmIDB4ZmYsIHZhbHVlICYgMHhmZl0pO1xuICB9XG5cbiAgc3RhdGljIHJlYWRBc0ludChhcnIpIHtcbiAgICBsZXQgdGVtcCA9ICcnO1xuXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQ0SGV4KGhleE51bSkge1xuICAgICAgbGV0IGhleFN0ciA9IGhleE51bS50b1N0cmluZygxNik7XG4gICAgICByZXR1cm4gaGV4U3RyLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgfVxuXG4gICAgYXJyLmZvckVhY2gobnVtID0+IHtcbiAgICAgIHRlbXAgKz0gcGFkU3RhcnQ0SGV4KG51bSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRlbXAsIDE2KTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEJ1ZmZlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKFJlc3VsdENvbnN0cnVjdG9yKSB7XG4gIHZhciB0b3RhbExlbmd0aCA9IDA7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFycmF5cyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcnJheXNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gYXJyYXlzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgdmFyIGFyciA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICB0b3RhbExlbmd0aCArPSBhcnIubGVuZ3RoO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gbmV3IFJlc3VsdENvbnN0cnVjdG9yKHRvdGFsTGVuZ3RoKTtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBhcnJheXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgIHZhciBfYXJyID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICByZXN1bHQuc2V0KF9hcnIsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gX2Fyci5sZW5ndGg7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY29uY2F0ID0gcmVxdWlyZSgnLi9jb25jYXQnKTtcblxudmFyIF9jb25jYXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29uY2F0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxubW9kdWxlLmV4cG9ydHMgPSBfY29uY2F0Mi5kZWZhdWx0OyIsImV4cG9ydCBjb25zdCBMT0FERVJfRVZFTlRTID0ge1xuICBMT0FERVJfREFUQUxPQURFRDogJ0xPQURFUl9EQVRBTE9BREVEJyxcbiAgTE9BREVSX0NPTVBMRVRFOiAnTE9BREVSX0NPTVBMRVRFJyxcbiAgTE9BREVSX0VSUk9SOiAnTE9BREVSX0VSUk9SJ1xufVxuXG5leHBvcnQgY29uc3QgREVNVVhfRVZFTlRTID0ge1xuICBERU1VWF9DT01QTEVURTogJ0RFTVVYX0NPTVBMRVRFJyxcbiAgREVNVVhfRVJST1I6ICdERU1VWF9FUlJPUicsXG4gIE1FVEFEQVRBX1BBUlNFRDogJ01FVEFEQVRBX1BBUlNFRCcsXG4gIFZJREVPX01FVEFEQVRBX0NIQU5HRTogJ1ZJREVPX01FVEFEQVRBX0NIQU5HRScsXG4gIEFVRElPX01FVEFEQVRBX0NIQU5HRTogJ0FVRElPX01FVEFEQVRBX0NIQU5HRScsXG4gIE1FRElBX0lORk86ICdNRURJQV9JTkZPJ1xufVxuXG5leHBvcnQgY29uc3QgUkVNVVhfRVZFTlRTID0ge1xuICBNRURJQV9TRUdNRU5UOiAnTUVESUFfU0VHTUVOVCcsXG4gIFJFTVVYX0VSUk9SOiAnUkVNVVhfRVJST1InLFxuICBJTklUX1NFR01FTlQ6ICdJTklUX1NFR01FTlQnXG59XG5cbmNvbnN0IGV2ZW50c09iaiA9IE9iamVjdC5hc3NpZ24oe30sIExPQURFUl9FVkVOVFMsIERFTVVYX0VWRU5UUywgUkVNVVhfRVZFTlRTKVxuXG5leHBvcnQgY29uc3QgZmx2QWxsb3dlZEV2ZW50cyA9IFtdXG5cbmZvciAobGV0IGtleSBpbiBldmVudHNPYmopIHtcbiAgaWYgKGV2ZW50c09iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgZmx2QWxsb3dlZEV2ZW50cy5wdXNoKGV2ZW50c09ialtrZXldKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGV2ZW50c09ialxuIiwiY29uc3QgbGUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gIChuZXcgRGF0YVZpZXcoYnVmKSkuc2V0SW50MTYoMCwgMjU2LCB0cnVlKSAvLyBsaXR0bGUtZW5kaWFuIHdyaXRlXG4gIHJldHVybiAobmV3IEludDE2QXJyYXkoYnVmKSlbMF0gPT09IDI1NiAvLyBwbGF0Zm9ybS1zcGVjIHJlYWQsIGlmIGVxdWFsIHRoZW4gTEVcbn0pKClcblxuZXhwb3J0IGRlZmF1bHQgbGVcbiIsImNvbnN0IGxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gICAgKG5ldyBEYXRhVmlldyhidWYpKS5zZXRJbnQxNigwLCAyNTYsIHRydWUpIC8vIGxpdHRsZS1lbmRpYW4gd3JpdGVcbiAgICByZXR1cm4gKG5ldyBJbnQxNkFycmF5KGJ1ZikpWzBdID09PSAyNTYgLy8gcGxhdGZvcm0tc3BlYyByZWFkLCBpZiBlcXVhbCB0aGVuIExFXG59KSgpXG5jb25zdCBzbmlmZmVyID0ge1xuICAgIGdldCBkZXZpY2UgKCkge1xuICAgICAgICBsZXQgciA9IHNuaWZmZXIub3M7XG4gICAgICAgIHJldHVybiByLmlzUGMgPyAncGMnIDogci5pc1RhYmxldCA/ICd0YWJsZXQnIDogJ21vYmlsZSc7XG4gICAgfSxcbiAgICBnZXQgYnJvd3NlciAoKSB7XG4gICAgICAgIGxldCB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbGV0IHJlZyA9IHtcbiAgICAgICAgICAgIGllOiAvcnY6KFtcXGQuXSspXFwpIGxpa2UgZ2Vja28vLFxuICAgICAgICAgICAgZmlyZm94OiAvZmlyZWZveFxcLyhbXFxkLl0rKS8sXG4gICAgICAgICAgICBjaHJvbWU6IC9jaHJvbWVcXC8oW1xcZC5dKykvLFxuICAgICAgICAgICAgb3BlcmE6IC9vcGVyYS4oW1xcZC5dKykvLFxuICAgICAgICAgICAgc2FmYXJpOiAvdmVyc2lvblxcLyhbXFxkLl0rKS4qc2FmYXJpLyxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChPYmplY3Qua2V5cyhyZWcpLmZpbHRlcihrZXkgPT4gcmVnW2tleV0udGVzdCh1YSkpKVswXTtcbiAgICB9LFxuICAgIGdldCBvcyAoKSB7XG4gICAgICAgIGxldCB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICBpc1dpbmRvd3NQaG9uZSA9IC8oPzpXaW5kb3dzIFBob25lKS8udGVzdCh1YSksXG4gICAgICAgICAgICBpc1N5bWJpYW4gPSAvKD86U3ltYmlhbk9TKS8udGVzdCh1YSkgfHwgaXNXaW5kb3dzUGhvbmUsXG4gICAgICAgICAgICBpc0FuZHJvaWQgPSAvKD86QW5kcm9pZCkvLnRlc3QodWEpLFxuICAgICAgICAgICAgaXNGaXJlRm94ID0gLyg/OkZpcmVmb3gpLy50ZXN0KHVhKSxcbiAgICAgICAgICAgIGlzVGFibGV0ID0gLyg/OmlQYWR8UGxheUJvb2spLy50ZXN0KHVhKSB8fCAoaXNBbmRyb2lkICYmICEvKD86TW9iaWxlKS8udGVzdCh1YSkpIHx8IChpc0ZpcmVGb3ggJiYgLyg/OlRhYmxldCkvLnRlc3QodWEpKSxcbiAgICAgICAgICAgIGlzUGhvbmUgPSAvKD86aVBob25lKS8udGVzdCh1YSkgJiYgIWlzVGFibGV0LFxuICAgICAgICAgICAgaXNQYyA9ICFpc1Bob25lICYmICFpc0FuZHJvaWQgJiYgIWlzU3ltYmlhbjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzVGFibGV0LFxuICAgICAgICAgICAgaXNQaG9uZSxcbiAgICAgICAgICAgIGlzQW5kcm9pZCxcbiAgICAgICAgICAgIGlzUGMsXG4gICAgICAgICAgICBpc1N5bWJpYW4sXG4gICAgICAgICAgICBpc1dpbmRvd3NQaG9uZSxcbiAgICAgICAgICAgIGlzRmlyZUZveCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGdldCBpc0xlKCkge1xuICAgICAgICByZXR1cm4gbGVcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzbmlmZmVyO1xuIiwiLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICAqL1xuLyogZXNsaW50LWRpc2FibGUgb25lLXZhciAgKi9cbmltcG9ydCBHb2xvbWIgZnJvbSAnLi9nb2xvbWInXG5cbmNsYXNzIFNQU1BhcnNlciB7XG4gIHN0YXRpYyBfZWJzcDJyYnNwICh1aW50OGFycmF5KSB7XG4gICAgbGV0IHNyYyA9IHVpbnQ4YXJyYXlcbiAgICBsZXQgc3JjTGVuZ3RoID0gc3JjLmJ5dGVMZW5ndGhcbiAgICBsZXQgZHN0ID0gbmV3IFVpbnQ4QXJyYXkoc3JjTGVuZ3RoKVxuICAgIGxldCBkc3RJZHggPSAwXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNyY0xlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaSA+PSAyKSB7XG4gICAgICAgIGlmIChzcmNbaV0gPT09IDB4MDMgJiYgc3JjW2kgLSAxXSA9PT0gMHgwMCAmJiBzcmNbaSAtIDJdID09PSAweDAwKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZHN0W2RzdElkeF0gPSBzcmNbaV1cbiAgICAgIGRzdElkeCsrXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRzdC5idWZmZXIsIDAsIGRzdElkeClcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZVNQUyAodWludDhhcnJheSkge1xuICAgIGxldCByYnNwID0gU1BTUGFyc2VyLl9lYnNwMnJic3AodWludDhhcnJheSlcbiAgICBsZXQgZ2IgPSBuZXcgR29sb21iKHJic3ApXG5cbiAgICBnYi5yZWFkQnl0ZSgpXG4gICAgbGV0IHByb2ZpbGVJZGMgPSBnYi5yZWFkQnl0ZSgpXG4gICAgZ2IucmVhZEJ5dGUoKVxuICAgIGxldCBsZXZlbElkYyA9IGdiLnJlYWRCeXRlKClcbiAgICBnYi5yZWFkVUVHKClcblxuICAgIGxldCBwcm9maWxlX3N0cmluZyA9IFNQU1BhcnNlci5nZXRQcm9maWxlU3RyaW5nKHByb2ZpbGVJZGMpXG4gICAgbGV0IGxldmVsX3N0cmluZyA9IFNQU1BhcnNlci5nZXRMZXZlbFN0cmluZyhsZXZlbElkYylcbiAgICBsZXQgY2hyb21hX2Zvcm1hdF9pZGMgPSAxXG4gICAgbGV0IGNocm9tYV9mb3JtYXQgPSA0MjBcbiAgICBsZXQgY2hyb21hX2Zvcm1hdF90YWJsZSA9IFswLCA0MjAsIDQyMiwgNDQ0XVxuICAgIGxldCBiaXRfZGVwdGggPSA4XG5cbiAgICBpZiAocHJvZmlsZUlkYyA9PT0gMTAwIHx8IHByb2ZpbGVJZGMgPT09IDExMCB8fCBwcm9maWxlSWRjID09PSAxMjIgfHxcbiAgICAgIHByb2ZpbGVJZGMgPT09IDI0NCB8fCBwcm9maWxlSWRjID09PSA0NCB8fCBwcm9maWxlSWRjID09PSA4MyB8fFxuICAgICAgcHJvZmlsZUlkYyA9PT0gODYgfHwgcHJvZmlsZUlkYyA9PT0gMTE4IHx8IHByb2ZpbGVJZGMgPT09IDEyOCB8fFxuICAgICAgcHJvZmlsZUlkYyA9PT0gMTM4IHx8IHByb2ZpbGVJZGMgPT09IDE0NCkge1xuICAgICAgY2hyb21hX2Zvcm1hdF9pZGMgPSBnYi5yZWFkVUVHKClcbiAgICAgIGlmIChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMykge1xuICAgICAgICBnYi5yZWFkQml0cygxKVxuICAgICAgfVxuICAgICAgaWYgKGNocm9tYV9mb3JtYXRfaWRjIDw9IDMpIHtcbiAgICAgICAgY2hyb21hX2Zvcm1hdCA9IGNocm9tYV9mb3JtYXRfdGFibGVbY2hyb21hX2Zvcm1hdF9pZGNdXG4gICAgICB9XG5cbiAgICAgIGJpdF9kZXB0aCA9IGdiLnJlYWRVRUcoKSArIDhcbiAgICAgIGdiLnJlYWRVRUcoKVxuICAgICAgZ2IucmVhZEJpdHMoMSlcbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGxldCBzY2FsaW5nX2xpc3RfY291bnQgPSAoY2hyb21hX2Zvcm1hdF9pZGMgIT09IDMpID8gOCA6IDEyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NhbGluZ19saXN0X2NvdW50OyBpKyspIHtcbiAgICAgICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICAgICAgaWYgKGkgPCA2KSB7XG4gICAgICAgICAgICAgIFNQU1BhcnNlci5fc2tpcFNjYWxpbmdMaXN0KGdiLCAxNilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIFNQU1BhcnNlci5fc2tpcFNjYWxpbmdMaXN0KGdiLCA2NClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZ2IucmVhZFVFRygpXG4gICAgbGV0IHBpY19vcmRlcl9jbnRfdHlwZSA9IGdiLnJlYWRVRUcoKVxuICAgIGlmIChwaWNfb3JkZXJfY250X3R5cGUgPT09IDApIHtcbiAgICAgIGdiLnJlYWRVRUcoKVxuICAgIH0gZWxzZSBpZiAocGljX29yZGVyX2NudF90eXBlID09PSAxKSB7XG4gICAgICBnYi5yZWFkQml0cygxKVxuICAgICAgZ2IucmVhZFNFRygpXG4gICAgICBnYi5yZWFkU0VHKClcbiAgICAgIGxldCBudW1fcmVmX2ZyYW1lc19pbl9waWNfb3JkZXJfY250X2N5Y2xlID0gZ2IucmVhZFVFRygpXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bV9yZWZfZnJhbWVzX2luX3BpY19vcmRlcl9jbnRfY3ljbGU7IGkrKykge1xuICAgICAgICBnYi5yZWFkU0VHKClcbiAgICAgIH1cbiAgICB9XG4gICAgZ2IucmVhZFVFRygpXG4gICAgZ2IucmVhZEJpdHMoMSlcblxuICAgIGxldCBwaWNfd2lkdGhfaW5fbWJzX21pbnVzMSA9IGdiLnJlYWRVRUcoKVxuICAgIGxldCBwaWNfaGVpZ2h0X2luX21hcF91bml0c19taW51czEgPSBnYi5yZWFkVUVHKClcblxuICAgIGxldCBmcmFtZV9tYnNfb25seV9mbGFnID0gZ2IucmVhZEJpdHMoMSlcbiAgICBpZiAoZnJhbWVfbWJzX29ubHlfZmxhZyA9PT0gMCkge1xuICAgICAgZ2IucmVhZEJpdHMoMSlcbiAgICB9XG4gICAgZ2IucmVhZEJpdHMoMSlcblxuICAgIGxldCBmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0ID0gMFxuICAgIGxldCBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCA9IDBcbiAgICBsZXQgZnJhbWVfY3JvcF90b3Bfb2Zmc2V0ID0gMFxuICAgIGxldCBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQgPSAwXG5cbiAgICBsZXQgZnJhbWVfY3JvcHBpbmdfZmxhZyA9IGdiLnJlYWRCb29sKClcbiAgICBpZiAoZnJhbWVfY3JvcHBpbmdfZmxhZykge1xuICAgICAgZnJhbWVfY3JvcF9sZWZ0X29mZnNldCA9IGdiLnJlYWRVRUcoKVxuICAgICAgZnJhbWVfY3JvcF9yaWdodF9vZmZzZXQgPSBnYi5yZWFkVUVHKClcbiAgICAgIGZyYW1lX2Nyb3BfdG9wX29mZnNldCA9IGdiLnJlYWRVRUcoKVxuICAgICAgZnJhbWVfY3JvcF9ib3R0b21fb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgfVxuXG4gICAgbGV0IHBhcl93aWR0aCA9IDEsIHBhcl9oZWlnaHQgPSAxXG4gICAgbGV0IGZwcyA9IDAsIGZwc19maXhlZCA9IHRydWUsIGZwc19udW0gPSAwLCBmcHNfZGVuID0gMFxuXG4gICAgbGV0IHZ1aV9wYXJhbWV0ZXJzX3ByZXNlbnRfZmxhZyA9IGdiLnJlYWRCb29sKClcbiAgICBpZiAodnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnKSB7XG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkgeyAvLyBhc3BlY3RfcmF0aW9faW5mb19wcmVzZW50X2ZsYWdcbiAgICAgICAgbGV0IGFzcGVjdF9yYXRpb19pZGMgPSBnYi5yZWFkQnl0ZSgpXG4gICAgICAgIGxldCBwYXJfd190YWJsZSA9IFsxLCAxMiwgMTAsIDE2LCA0MCwgMjQsIDIwLCAzMiwgODAsIDE4LCAxNSwgNjQsIDE2MCwgNCwgMywgMl1cbiAgICAgICAgbGV0IHBhcl9oX3RhYmxlID0gWzEsIDExLCAxMSwgMTEsIDMzLCAxMSwgMTEsIDExLCAzMywgMTEsIDExLCAzMywgOTksIDMsIDIsIDFdXG5cbiAgICAgICAgaWYgKGFzcGVjdF9yYXRpb19pZGMgPiAwICYmIGFzcGVjdF9yYXRpb19pZGMgPCAxNikge1xuICAgICAgICAgIHBhcl93aWR0aCA9IHBhcl93X3RhYmxlW2FzcGVjdF9yYXRpb19pZGMgLSAxXVxuICAgICAgICAgIHBhcl9oZWlnaHQgPSBwYXJfaF90YWJsZVthc3BlY3RfcmF0aW9faWRjIC0gMV1cbiAgICAgICAgfSBlbHNlIGlmIChhc3BlY3RfcmF0aW9faWRjID09PSAyNTUpIHtcbiAgICAgICAgICBwYXJfd2lkdGggPSBnYi5yZWFkQnl0ZSgpIDw8IDggfCBnYi5yZWFkQnl0ZSgpXG4gICAgICAgICAgcGFyX2hlaWdodCA9IGdiLnJlYWRCeXRlKCkgPDwgOCB8IGdiLnJlYWRCeXRlKClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICBnYi5yZWFkQm9vbCgpXG4gICAgICB9XG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICBnYi5yZWFkQml0cyg0KVxuICAgICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICAgIGdiLnJlYWRCaXRzKDI0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICBnYi5yZWFkVUVHKClcbiAgICAgICAgZ2IucmVhZFVFRygpXG4gICAgICB9XG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICBsZXQgbnVtX3VuaXRzX2luX3RpY2sgPSBnYi5yZWFkQml0cygzMilcbiAgICAgICAgbGV0IHRpbWVfc2NhbGUgPSBnYi5yZWFkQml0cygzMilcbiAgICAgICAgZnBzX2ZpeGVkID0gZ2IucmVhZEJvb2woKVxuXG4gICAgICAgIGZwc19udW0gPSB0aW1lX3NjYWxlXG4gICAgICAgIGZwc19kZW4gPSBudW1fdW5pdHNfaW5fdGljayAqIDJcbiAgICAgICAgZnBzID0gZnBzX251bSAvIGZwc19kZW5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcGFyU2NhbGUgPSAxXG4gICAgaWYgKHBhcl93aWR0aCAhPT0gMSB8fCBwYXJfaGVpZ2h0ICE9PSAxKSB7XG4gICAgICBwYXJTY2FsZSA9IHBhcl93aWR0aCAvIHBhcl9oZWlnaHRcbiAgICB9XG5cbiAgICBsZXQgY3JvcF91bml0X3ggPSAwLCBjcm9wX3VuaXRfeSA9IDBcbiAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDApIHtcbiAgICAgIGNyb3BfdW5pdF94ID0gMVxuICAgICAgY3JvcF91bml0X3kgPSAyIC0gZnJhbWVfbWJzX29ubHlfZmxhZ1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgc3ViX3djID0gKGNocm9tYV9mb3JtYXRfaWRjID09PSAzKSA/IDEgOiAyXG4gICAgICBsZXQgc3ViX2hjID0gKGNocm9tYV9mb3JtYXRfaWRjID09PSAxKSA/IDIgOiAxXG4gICAgICBjcm9wX3VuaXRfeCA9IHN1Yl93Y1xuICAgICAgY3JvcF91bml0X3kgPSBzdWJfaGMgKiAoMiAtIGZyYW1lX21ic19vbmx5X2ZsYWcpXG4gICAgfVxuXG4gICAgbGV0IGNvZGVjX3dpZHRoID0gKHBpY193aWR0aF9pbl9tYnNfbWludXMxICsgMSkgKiAxNlxuICAgIGxldCBjb2RlY19oZWlnaHQgPSAoMiAtIGZyYW1lX21ic19vbmx5X2ZsYWcpICogKChwaWNfaGVpZ2h0X2luX21hcF91bml0c19taW51czEgKyAxKSAqIDE2KVxuXG4gICAgY29kZWNfd2lkdGggLT0gKGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgKyBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCkgKiBjcm9wX3VuaXRfeFxuICAgIGNvZGVjX2hlaWdodCAtPSAoZnJhbWVfY3JvcF90b3Bfb2Zmc2V0ICsgZnJhbWVfY3JvcF9ib3R0b21fb2Zmc2V0KSAqIGNyb3BfdW5pdF95XG5cbiAgICBsZXQgcHJlc2VudF93aWR0aCA9IE1hdGguY2VpbChjb2RlY193aWR0aCAqIHBhclNjYWxlKVxuXG4gICAgZ2IuZGVzdHJveSgpXG4gICAgZ2IgPSBudWxsXG5cbiAgICByZXR1cm4ge1xuICAgICAgcHJvZmlsZV9zdHJpbmc6IHByb2ZpbGVfc3RyaW5nLFxuICAgICAgbGV2ZWxfc3RyaW5nOiBsZXZlbF9zdHJpbmcsXG4gICAgICBiaXRfZGVwdGg6IGJpdF9kZXB0aCxcbiAgICAgIGNocm9tYV9mb3JtYXQ6IGNocm9tYV9mb3JtYXQsXG4gICAgICBjaHJvbWFfZm9ybWF0X3N0cmluZzogU1BTUGFyc2VyLmdldENocm9tYUZvcm1hdFN0cmluZyhjaHJvbWFfZm9ybWF0KSxcblxuICAgICAgZnJhbWVfcmF0ZToge1xuICAgICAgICBmaXhlZDogZnBzX2ZpeGVkLFxuICAgICAgICBmcHM6IGZwcyxcbiAgICAgICAgZnBzX2RlbjogZnBzX2RlbixcbiAgICAgICAgZnBzX251bTogZnBzX251bVxuICAgICAgfSxcblxuICAgICAgcGFyX3JhdGlvOiB7XG4gICAgICAgIHdpZHRoOiBwYXJfd2lkdGgsXG4gICAgICAgIGhlaWdodDogcGFyX2hlaWdodFxuICAgICAgfSxcblxuICAgICAgY29kZWNfc2l6ZToge1xuICAgICAgICB3aWR0aDogY29kZWNfd2lkdGgsXG4gICAgICAgIGhlaWdodDogY29kZWNfaGVpZ2h0XG4gICAgICB9LFxuXG4gICAgICBwcmVzZW50X3NpemU6IHtcbiAgICAgICAgd2lkdGg6IHByZXNlbnRfd2lkdGgsXG4gICAgICAgIGhlaWdodDogY29kZWNfaGVpZ2h0XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9za2lwU2NhbGluZ0xpc3QgKGdiLCBjb3VudCkge1xuICAgIGxldCBsYXN0X3NjYWxlID0gOCwgbmV4dF9zY2FsZSA9IDhcbiAgICBsZXQgZGVsdGFfc2NhbGUgPSAwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBpZiAobmV4dF9zY2FsZSAhPT0gMCkge1xuICAgICAgICBkZWx0YV9zY2FsZSA9IGdiLnJlYWRTRUcoKVxuICAgICAgICBuZXh0X3NjYWxlID0gKGxhc3Rfc2NhbGUgKyBkZWx0YV9zY2FsZSArIDI1NikgJSAyNTZcbiAgICAgIH1cbiAgICAgIGxhc3Rfc2NhbGUgPSAobmV4dF9zY2FsZSA9PT0gMCkgPyBsYXN0X3NjYWxlIDogbmV4dF9zY2FsZVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRQcm9maWxlU3RyaW5nIChwcm9maWxlSWRjKSB7XG4gICAgc3dpdGNoIChwcm9maWxlSWRjKSB7XG4gICAgICBjYXNlIDY2OlxuICAgICAgICByZXR1cm4gJ0Jhc2VsaW5lJ1xuICAgICAgY2FzZSA3NzpcbiAgICAgICAgcmV0dXJuICdNYWluJ1xuICAgICAgY2FzZSA4ODpcbiAgICAgICAgcmV0dXJuICdFeHRlbmRlZCdcbiAgICAgIGNhc2UgMTAwOlxuICAgICAgICByZXR1cm4gJ0hpZ2gnXG4gICAgICBjYXNlIDExMDpcbiAgICAgICAgcmV0dXJuICdIaWdoMTAnXG4gICAgICBjYXNlIDEyMjpcbiAgICAgICAgcmV0dXJuICdIaWdoNDIyJ1xuICAgICAgY2FzZSAyNDQ6XG4gICAgICAgIHJldHVybiAnSGlnaDQ0NCdcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnVW5rbm93bidcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0TGV2ZWxTdHJpbmcgKGxldmVsSWRjKSB7XG4gICAgcmV0dXJuIChsZXZlbElkYyAvIDEwKS50b0ZpeGVkKDEpXG4gIH1cblxuICBzdGF0aWMgZ2V0Q2hyb21hRm9ybWF0U3RyaW5nIChjaHJvbWEpIHtcbiAgICBzd2l0Y2ggKGNocm9tYSkge1xuICAgICAgY2FzZSA0MjA6XG4gICAgICAgIHJldHVybiAnNDoyOjAnXG4gICAgICBjYXNlIDQyMjpcbiAgICAgICAgcmV0dXJuICc0OjI6MidcbiAgICAgIGNhc2UgNDQ0OlxuICAgICAgICByZXR1cm4gJzQ6NDo0J1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdVbmtub3duJ1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyB0b1ZpZGVvTWV0YSAoc3BzQ29uZmlnKSB7XG4gICAgbGV0IG1ldGEgPSB7fVxuICAgIGlmIChzcHNDb25maWcgJiYgc3BzQ29uZmlnLmNvZGVjX3NpemUpIHtcbiAgICAgIG1ldGEuY29kZWNXaWR0aCA9IHNwc0NvbmZpZy5jb2RlY19zaXplLndpZHRoXG4gICAgICBtZXRhLmNvZGVjSGVpZ2h0ID0gc3BzQ29uZmlnLmNvZGVjX3NpemUuaGVpZ2h0XG4gICAgICBtZXRhLnByZXNlbnRXaWR0aCA9IHNwc0NvbmZpZy5wcmVzZW50X3NpemUud2lkdGhcbiAgICAgIG1ldGEucHJlc2VudEhlaWdodCA9IHNwc0NvbmZpZy5wcmVzZW50X3NpemUuaGVpZ2h0XG4gICAgfVxuXG4gICAgbWV0YS5wcm9maWxlID0gc3BzQ29uZmlnLnByb2ZpbGVfc3RyaW5nXG4gICAgbWV0YS5sZXZlbCA9IHNwc0NvbmZpZy5sZXZlbF9zdHJpbmdcbiAgICBtZXRhLmJpdERlcHRoID0gc3BzQ29uZmlnLmJpdF9kZXB0aFxuICAgIG1ldGEuY2hyb21hRm9ybWF0ID0gc3BzQ29uZmlnLmNocm9tYV9mb3JtYXRcblxuICAgIG1ldGEucGFyUmF0aW8gPSB7XG4gICAgICB3aWR0aDogc3BzQ29uZmlnLnBhcl9yYXRpby53aWR0aCxcbiAgICAgIGhlaWdodDogc3BzQ29uZmlnLnBhcl9yYXRpby5oZWlnaHRcbiAgICB9XG5cbiAgICBpZiAoc3BzQ29uZmlnLmZyYW1lX3JhdGUuZml4ZWQgJiYgc3BzQ29uZmlnLmZyYW1lX3JhdGUuZnBzX251bSA+IDAgJiYgc3BzQ29uZmlnLmZyYW1lX3JhdGUuZnBzX2RlbiA+IDApIHtcbiAgICAgIG1ldGEuZnJhbWVSYXRlID0gc3BzQ29uZmlnLmZyYW1lX3JhdGVcbiAgICB9XG5cbiAgICBsZXQgZnBzRGVuID0gbWV0YS5mcmFtZVJhdGUuZnBzX2RlblxuICAgIGxldCBmcHNOdW0gPSBtZXRhLmZyYW1lUmF0ZS5mcHNfbnVtXG4gICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IobWV0YS50aW1lc2NhbGUgKiAoZnBzRGVuIC8gZnBzTnVtKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTUFNQYXJzZXJcbiIsImNsYXNzIEdvbG9tYiB7XG4gIGNvbnN0cnVjdG9yICh1aW50OGFycmF5KSB7XG4gICAgdGhpcy5UQUcgPSAnR29sb21iJ1xuICAgIHRoaXMuX2J1ZmZlciA9IHVpbnQ4YXJyYXlcbiAgICB0aGlzLl9idWZmZXJJbmRleCA9IDBcbiAgICB0aGlzLl90b3RhbEJ5dGVzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoXG4gICAgdGhpcy5fdG90YWxCaXRzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoICogOFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkID0gMFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPSAwXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9idWZmZXIgPSBudWxsXG4gIH1cblxuICBfZmlsbEN1cnJlbnRXb3JkICgpIHtcbiAgICBsZXQgYnVmZmVyQnl0ZXNMZWZ0ID0gdGhpcy5fdG90YWxCeXRlcyAtIHRoaXMuX2J1ZmZlckluZGV4XG4gICAgaWYgKGJ1ZmZlckJ5dGVzTGVmdCA8PSAwKSB7XG4gICAgICAvLyBUT0RPIOW8guW4uOWkhOeQhlxuICAgIH1cblxuICAgIGxldCBieXRlc1JlYWQgPSBNYXRoLm1pbig0LCBidWZmZXJCeXRlc0xlZnQpXG4gICAgbGV0IHdvcmQgPSBuZXcgVWludDhBcnJheSg0KVxuICAgIHdvcmQuc2V0KHRoaXMuX2J1ZmZlci5zdWJhcnJheSh0aGlzLl9idWZmZXJJbmRleCwgdGhpcy5fYnVmZmVySW5kZXggKyBieXRlc1JlYWQpKVxuICAgIHRoaXMuX2N1cnJlbnRXb3JkID0gbmV3IERhdGFWaWV3KHdvcmQuYnVmZmVyKS5nZXRVaW50MzIoMCwgZmFsc2UpXG5cbiAgICB0aGlzLl9idWZmZXJJbmRleCArPSBieXRlc1JlYWRcbiAgICB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0ID0gYnl0ZXNSZWFkICogOFxuICB9XG5cbiAgcmVhZEJpdHMgKGJpdHMpIHtcbiAgICBpZiAoYml0cyA+IDMyKSB7XG4gICAgICAvLyBUT0RPXG4gICAgfVxuXG4gICAgaWYgKGJpdHMgPD0gdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCkge1xuICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuX2N1cnJlbnRXb3JkID4+PiAoMzIgLSBiaXRzKVxuICAgICAgdGhpcy5fY3VycmVudFdvcmQgPDw9IGJpdHNcbiAgICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgLT0gYml0c1xuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0ID8gdGhpcy5fY3VycmVudFdvcmQgOiAwXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcmVzdWx0ID4+PiAoMzIgLSB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0KVxuICAgIGxldCBiaXRzTmVlZExlZnQgPSBiaXRzIC0gdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdFxuXG4gICAgdGhpcy5fZmlsbEN1cnJlbnRXb3JkKClcbiAgICBsZXQgYml0c1JlYWROZXh0ID0gTWF0aC5taW4oYml0c05lZWRMZWZ0LCB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0KVxuXG4gICAgbGV0IHJlc3VsdDIgPSB0aGlzLl9jdXJyZW50V29yZCA+Pj4gKDMyIC0gYml0c1JlYWROZXh0KVxuICAgIHRoaXMuX2N1cnJlbnRXb3JkIDw8PSBiaXRzUmVhZE5leHRcbiAgICB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0IC09IGJpdHNSZWFkTmV4dFxuXG4gICAgcmVzdWx0ID0gKHJlc3VsdCA8PCBiaXRzUmVhZE5leHQpIHwgcmVzdWx0MlxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHJlYWRCb29sICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkQml0cygxKSA9PT0gMVxuICB9XG5cbiAgcmVhZEJ5dGUgKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDgpXG4gIH1cblxuICBfc2tpcExlYWRpbmdaZXJvICgpIHtcbiAgICBsZXQgemVyb0NvdW50XG4gICAgZm9yICh6ZXJvQ291bnQgPSAwOyB6ZXJvQ291bnQgPCB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0OyB6ZXJvQ291bnQrKykge1xuICAgICAgaWYgKCh0aGlzLl9jdXJyZW50V29yZCAmICgweDgwMDAwMDAwID4+PiB6ZXJvQ291bnQpKSAhPT0gMCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50V29yZCA8PD0gemVyb0NvdW50XG4gICAgICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgLT0gemVyb0NvdW50XG4gICAgICAgIHJldHVybiB6ZXJvQ291bnRcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fZmlsbEN1cnJlbnRXb3JkKClcbiAgICByZXR1cm4gemVyb0NvdW50ICsgdGhpcy5fc2tpcExlYWRpbmdaZXJvKClcbiAgfVxuXG4gIHJlYWRVRUcgKCkgeyAvLyB1bnNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbiAgICBsZXQgbGVhZGluZ1plcm9zID0gdGhpcy5fc2tpcExlYWRpbmdaZXJvKClcbiAgICByZXR1cm4gdGhpcy5yZWFkQml0cyhsZWFkaW5nWmVyb3MgKyAxKSAtIDFcbiAgfVxuXG4gIHJlYWRTRUcgKCkgeyAvLyBzaWduZWQgZXhwb25lbnRpYWwgZ29sb21iXG4gICAgbGV0IHZhbHVlID0gdGhpcy5yZWFkVUVHKClcbiAgICBpZiAodmFsdWUgJiAweDAxKSB7XG4gICAgICByZXR1cm4gKHZhbHVlICsgMSkgPj4+IDFcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0xICogKHZhbHVlID4+PiAxKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHb2xvbWJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBNZWRpYVNhbXBsZS5nZXREZWZhdWx0SW5mKClcblxuICAgIGlmICghaW5mbyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5mbykgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRcbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBpbmZvKVxuXG4gICAgT2JqZWN0LmVudHJpZXMoc2FtcGxlKS5mb3JFYWNoKChbaywgdl0pID0+IHtcbiAgICAgIHRoaXNba10gPSB2XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0SW5mICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgZHVyYXRpb246IG51bGwsXG4gICAgICBwb3NpdGlvbjogbnVsbCxcbiAgICAgIGlzUkFQOiBmYWxzZSwgLy8gaXMgUmFuZG9tIGFjY2VzcyBwb2ludFxuICAgICAgb3JpZ2luRHRzOiBudWxsXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYVNlZ21lbnQge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5zdGFydER0cyA9IC0xO1xuICAgICAgICB0aGlzLmVuZER0cyA9IC0xO1xuICAgICAgICB0aGlzLnN0YXJ0UHRzID0gLTE7XG4gICAgICAgIHRoaXMuZW5kUHRzID0gLTE7XG4gICAgICAgIHRoaXMub3JpZ2luU3RhcnREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5vcmlnaW5FbmREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5yYW5kb21BY2Nlc3NQb2ludHMgPSBbXTtcbiAgICAgICAgdGhpcy5maXJzdFNhbXBsZSA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdFNhbXBsZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYWRkUkFQIChzYW1wbGUpIHtcbiAgICAgICAgc2FtcGxlLmlzUkFQID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yYW5kb21BY2Nlc3NQb2ludHMucHVzaChzYW1wbGUpO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYVNlZ21lbnRMaXN0IHtcblxuICAgIGNvbnN0cnVjdG9yICh0eXBlKSB7XG4gICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLl9saXN0ID0gW107XG4gICAgICAgIHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbiA9IC0xOyAvLyBjYWNoZWQgbGFzdCBpbnNlcnQgbG9jYXRpb25cbiAgICB9XG5cbiAgICBnZXQgdHlwZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgIH1cblxuICAgIGdldCBsZW5ndGggKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5sZW5ndGg7XG4gICAgfVxuXG4gICAgaXNFbXB0eSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICBjbGVhciAoKSB7XG4gICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gLTE7XG4gICAgfVxuXG4gICAgX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuX2xpc3Q7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0yO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYXN0ID0gbGlzdC5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgbWlkID0gMDtcbiAgICAgICAgbGV0IGxib3VuZCA9IDA7XG4gICAgICAgIGxldCB1Ym91bmQgPSBsYXN0O1xuXG4gICAgICAgIGxldCBpZHggPSAwO1xuXG4gICAgICAgIGlmIChiZWdpbkR0cyA8IGxpc3RbMF0ub3JpZ2luRHRzKSB7XG4gICAgICAgICAgICBpZHggPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAobGJvdW5kIDw9IHVib3VuZCkge1xuICAgICAgICAgICAgbWlkID0gbGJvdW5kICsgTWF0aC5mbG9vcigodWJvdW5kIC0gbGJvdW5kKSAvIDIpO1xuICAgICAgICAgICAgaWYgKG1pZCA9PT0gbGFzdCB8fCAoYmVnaW5EdHMgPiBsaXN0W21pZF0ubGFzdFNhbXBsZS5vcmlnaW5EdHNcbiAgICAgICAgICAgICAgICAgICAgJiYgKGJlZ2luRHRzIDwgbGlzdFttaWQgKyAxXS5vcmlnaW5EdHMpKSkge1xuICAgICAgICAgICAgICAgIGlkeCA9IG1pZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlzdFttaWRdLm9yaWdpbkR0cyA8IGJlZ2luRHRzKSB7XG4gICAgICAgICAgICAgICAgbGJvdW5kID0gbWlkICsgMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWJvdW5kID0gbWlkIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cblxuICAgIF9zZWFyY2hOZWFyZXN0U2VnbWVudEFmdGVyIChiZWdpbkR0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpICsgMTtcbiAgICB9XG5cbiAgICBhcHBlbmQgKHNlZ21lbnQpIHtcbiAgICAgICAgbGV0IGxpc3QgPSB0aGlzLl9saXN0O1xuICAgICAgICBsZXQgbGFzdEFwcGVuZElkeCA9IHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbjtcbiAgICAgICAgbGV0IGluc2VydElkeCA9IDA7XG5cbiAgICAgICAgaWYgKGxhc3RBcHBlbmRJZHggIT09IC0xICYmIGxhc3RBcHBlbmRJZHggPCBsaXN0Lmxlbmd0aFxuICAgICAgICAgICAgJiYgc2VnbWVudC5vcmlnaW5TdGFydER0cyA+PSBsaXN0W2xhc3RBcHBlbmRJZHhdLmxhc3RTYW1wbGUub3JpZ2luRHRzXG4gICAgICAgICAgICAmJiAoKGxhc3RBcHBlbmRJZHggPT09IGxpc3QubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICB8fCAobGFzdEFwcGVuZElkeCA8IGxpc3QubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICAmJiBzZWdtZW50Lm9yaWdpblN0YXJ0RHRzIDwgbGlzdFtsYXN0QXBwZW5kSWR4ICsgMV0ub3JpZ2luU3RhcnREdHMpKSkge1xuICAgICAgICAgICAgaW5zZXJ0SWR4ID0gbGFzdEFwcGVuZElkeCArIDE7IC8vIHVzZSBjYWNoZWQgbG9jYXRpb24gaWR4XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0SWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoc2VnbWVudC5vcmlnaW5TdGFydER0cykgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gaW5zZXJ0SWR4O1xuICAgICAgICB0aGlzLl9saXN0LnNwbGljZShpbnNlcnRJZHgsIDAsIHNlZ21lbnQpO1xuICAgIH1cblxuICAgIGdldExhc3RTZWdtZW50QmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgaWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0W2lkeF07XG4gICAgICAgIH0gZWxzZSB7IC8vIC0xXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldExhc3RTYW1wbGVCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBzZWdtZW50ID0gdGhpcy5nZXRMYXN0U2VnbWVudEJlZm9yZShiZWdpbkR0cyk7XG4gICAgICAgIGlmIChzZWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VnbWVudC5sYXN0U2FtcGxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRMYXN0UkFQQmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgc2VnbWVudElkeCA9IHRoaXMuX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKGJlZ2luRHRzKTtcbiAgICAgICAgbGV0IHJhbmRvbUFjY2Vzc1BvaW50cyA9IHRoaXMuX2xpc3Rbc2VnbWVudElkeF0ucmFuZG9tQWNjZXNzUG9pbnRzO1xuICAgICAgICB3aGlsZSAocmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCA9PT0gMCAmJiBzZWdtZW50SWR4ID4gMCkge1xuICAgICAgICAgICAgc2VnbWVudElkeC0tO1xuICAgICAgICAgICAgcmFuZG9tQWNjZXNzUG9pbnRzID0gdGhpcy5fbGlzdFtzZWdtZW50SWR4XS5yYW5kb21BY2Nlc3NQb2ludHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhbmRvbUFjY2Vzc1BvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZG9tQWNjZXNzUG9pbnRzW3JhbmRvbUFjY2Vzc1BvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tNZXRhIHtcbiAgY29uc3RydWN0b3IgKG1ldGEpIHtcbiAgICBjb25zdCBfZGVmYXVsdCA9IHtcbiAgICAgIHNhbXBsZVJhdGU6IDQ4MDAwLFxuICAgICAgY2hhbm5lbENvdW50OiAyLFxuICAgICAgY29kZWM6ICdtcDRhLjQwLjInLFxuICAgICAgY29uZmlnOiBbNDEsIDQwMSwgMTM2LCAwXSxcbiAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgaWQ6IDIsXG4gICAgICByZWZTYW1wbGVEdXJhdGlvbjogMjEsXG4gICAgICBzYW1wbGVSYXRlSW5kZXg6IDMsXG4gICAgICB0aW1lc2NhbGU6IDEwMDAsXG4gICAgICB0eXBlOiAnYXVkaW8nXG4gICAgfVxuICAgIGlmIChtZXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgX2RlZmF1bHQsIG1ldGEpXG4gICAgfVxuICAgIHJldHVybiBfZGVmYXVsdFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrTWV0YSB7XG4gIGNvbnN0cnVjdG9yIChtZXRhKSB7XG4gICAgY29uc3QgX2RlZmF1bHQgPSB7XG4gICAgICBhdmNjOiBudWxsLFxuICAgICAgc3BzOiBuZXcgVWludDhBcnJheSgwKSxcbiAgICAgIHBwczogbmV3IFVpbnQ4QXJyYXkoMCksXG4gICAgICBjaHJvbWFGb3JtYXQ6IDQyMCxcbiAgICAgIGNvZGVjOiAnYXZjMS42NDAwMjAnLFxuICAgICAgY29kZWNIZWlnaHQ6IDcyMCxcbiAgICAgIGNvZGVjV2lkdGg6IDEyODAsXG4gICAgICBkdXJhdGlvbjogMCxcbiAgICAgIGZyYW1lUmF0ZToge1xuICAgICAgICBmaXhlZDogdHJ1ZSxcbiAgICAgICAgZnBzOiAyNSxcbiAgICAgICAgZnBzX251bTogMjUwMDAsXG4gICAgICAgIGZwc19kZW46IDEwMDBcbiAgICAgIH0sXG4gICAgICBpZDogMSxcbiAgICAgIGxldmVsOiAnMy4yJyxcbiAgICAgIHByZXNlbnRIZWlnaHQ6IDcyMCxcbiAgICAgIHByZXNlbnRXaWR0aDogMTI4MCxcbiAgICAgIHByb2ZpbGU6ICdIaWdoJyxcbiAgICAgIHJlZlNhbXBsZUR1cmF0aW9uOiA0MCxcbiAgICAgIHBhclJhdGlvOiB7XG4gICAgICAgIGhlaWdodDogMSxcbiAgICAgICAgd2lkdGg6IDFcbiAgICAgIH0sXG4gICAgICB0aW1lc2NhbGU6IDEwMDAsXG4gICAgICB0eXBlOiAndmlkZW8nXG4gICAgfVxuXG4gICAgaWYgKG1ldGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgbWV0YSlcbiAgICB9XG4gICAgcmV0dXJuIF9kZWZhdWx0XG4gIH1cbn1cbiIsImNsYXNzIE1TRSB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5jb25maWdzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlncyk7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmNvbmZpZ3MuY29udGFpbmVyO1xuICAgIHRoaXMubWVkaWFTb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuc291cmNlQnVmZmVycyA9IHt9O1xuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB0aGlzLm1lZGlhU291cmNlID0gbmV3IHNlbGYuTWVkaWFTb3VyY2UoKTtcbiAgICB0aGlzLm1lZGlhU291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ3NvdXJjZW9wZW4nLCAoZSkgPT4ge1xuICAgICAgX3RoaXMuYWRkU291cmNlQnVmZmVycygpO1xuICAgIH0pO1xuICAgIHRoaXMuY29udGFpbmVyLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy5tZWRpYVNvdXJjZSk7XG4gICAgdGhpcy51cmwgPSB0aGlzLmNvbnRhaW5lci5zcmNcbiAgfVxuXG4gIGFkZFNvdXJjZUJ1ZmZlcnMgKCkge1xuICAgIGxldCBzb3VyY2VzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBpZiAoc291cmNlcy5zb3VyY2VzLmF1ZGlvICYmIHNvdXJjZXMuc291cmNlcy52aWRlbykge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoID49IDIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDAsIGsgPSBPYmplY3Qua2V5cyhzb3VyY2VzLnNvdXJjZXMpLmxlbmd0aDsgaSA8IGs7IGkrKykge1xuICAgICAgICBsZXQgc291cmNlID0gc291cmNlcy5zb3VyY2VzW09iamVjdC5rZXlzKHNvdXJjZXMuc291cmNlcylbaV1dXG4gICAgICAgIGxldCBtaW1lID0gKE9iamVjdC5rZXlzKHNvdXJjZXMuc291cmNlcylbaV0gPT09ICd2aWRlbycpID8gJ3ZpZGVvL21wNDtjb2RlY3M9JyArIHNvdXJjZS5taW1ldHlwZSA6ICdhdWRpby9tcDQ7Y29kZWNzPScgKyBzb3VyY2UubWltZXR5cGVcbiAgICAgICAgbGV0IHNvdXJjZUJ1ZmZlciA9IHRoaXMubWVkaWFTb3VyY2UuYWRkU291cmNlQnVmZmVyKG1pbWUpO1xuICAgICAgICB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXMoc291cmNlcy5zb3VyY2VzKVtpXV0gPSBzb3VyY2VCdWZmZXI7XG4gICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kb0FwcGVuZCgpXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRvQXBwZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZG9BcHBlbmQgKCkge1xuICAgIGxldCBzb3VyY2VzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBpZiAoc291cmNlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCB0eXBlID0gT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXVxuICAgICAgICBsZXQgc291cmNlQnVmZmVyID0gdGhpcy5zb3VyY2VCdWZmZXJzW3R5cGVdO1xuICAgICAgICAvLyBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAvLyAgIGNvbnRpbnVlO1xuICAgICAgICAvLyB9XG4gICAgICAgIGlmICghc291cmNlQnVmZmVyLnVwZGF0aW5nKSB7XG4gICAgICAgICAgbGV0IHNvdXJjZSA9IHNvdXJjZXMuc291cmNlc1t0eXBlXTtcbiAgICAgICAgICBpZiAoc291cmNlICYmICFzb3VyY2UuaW5pdGVkKSB7XG4gICAgICAgICAgICBzb3VyY2VCdWZmZXIuYXBwZW5kQnVmZmVyKHNvdXJjZS5pbml0LmJ1ZmZlci5idWZmZXIpO1xuICAgICAgICAgICAgc291cmNlLmluaXRlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gc291cmNlLmRhdGEuc2hpZnQoKVxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFwcGVuZEJ1ZmZlcihkYXRhLmJ1ZmZlci5idWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgTVNFO1xuIiwiaW1wb3J0IENvbmNhdCBmcm9tICdjb25jYXQtdHlwZWQtYXJyYXknXG5cbmNsYXNzIEJ1ZmZlciB7XG4gIGNvbnN0cnVjdG9yIChidWZmZXIpIHtcbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlciB8fCBuZXcgVWludDhBcnJheSgwKVxuICB9XG5cbiAgd3JpdGUgKC4uLmJ1ZmZlcikge1xuICAgIGJ1ZmZlci5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgdGhpcy5idWZmZXIgPSBDb25jYXQoVWludDhBcnJheSwgdGhpcy5idWZmZXIsIGl0ZW0pXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyB3cml0ZVVpbnQzMiAodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgdmFsdWUgPj4gMjQsXG4gICAgICAodmFsdWUgPj4gMTYpICYgMHhmZixcbiAgICAgICh2YWx1ZSA+PiA4KSAmIDB4ZmYsXG4gICAgICB2YWx1ZSAmIDB4ZmZcbiAgICBdKVxuICB9XG5cbiAgc3RhdGljIHJlYWRBc0ludCAoYXJyKSB7XG4gICAgbGV0IHRlbXAgPSAnJ1xuXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQ0SGV4IChoZXhOdW0pIHtcbiAgICAgIGxldCBoZXhTdHIgPSBoZXhOdW0udG9TdHJpbmcoMTYpXG4gICAgICByZXR1cm4gaGV4U3RyLnBhZFN0YXJ0KDIsICcwJylcbiAgICB9XG5cbiAgICBhcnIuZm9yRWFjaChudW0gPT4ge1xuICAgICAgdGVtcCArPSBwYWRTdGFydDRIZXgobnVtKVxuICAgIH0pXG4gICAgcmV0dXJuIHBhcnNlSW50KHRlbXAsIDE2KVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1ZmZlclxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XG4gICAgfVxuICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gIH1cbn0pO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB9IGVsc2UgaWYgKHByZXBlbmQpIHtcbiAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIG0gPSAkZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIC8vIE5vIGVycm9yIGNvZGUgZm9yIHRoaXMgc2luY2UgaXQgaXMgYSBXYXJuaW5nXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyBTdHJpbmcodHlwZSkgKyAnIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0Jyk7XG4gICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgUmVmbGVjdEFwcGx5KHRoaXMubGlzdGVuZXIsIHRoaXMudGFyZ2V0LCBhcmdzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID9cbiAgICB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0T3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJpbXBvcnQgRmx2RGVtdXhlciBmcm9tICcuL3BhcnNlL2RlbXV4J1xuaW1wb3J0IE1wNFJlbXV4ZXIgZnJvbSAneGdwbGF5ZXItcmVtdXgvc3JjL21wNCdcbmltcG9ydCBNU0UgZnJvbSAneGdwbGF5ZXItdXRpbHMvc3JjL21zZSdcbmltcG9ydCBGZXRjaExvYWRlciBmcm9tICd4Z3BsYXllci1sb2FkZXItZmV0Y2gnXG5pbXBvcnQgUHJlc291cmNlIGZyb20gJ3hncGxheWVyLWJ1ZmZlci9zcmMvcHJlc291Y2UnXG5pbXBvcnQgeyBUcmFja3MsIFhnQnVmZmVyIH0gZnJvbSAneGdwbGF5ZXItYnVmZmVyL3NyYy9pbmRleCdcbmltcG9ydCB7IFJFTVVYX0VWRU5UUywgREVNVVhfRVZFTlRTIH0gZnJvbSAneGdwbGF5ZXItdXRpbHMvZGlzdC9jb25zdGFudHMvZXZlbnRzJ1xuXG5jb25zdCBUYWcgPSAnRkxWQ29udHJvbGxlcidcblxuY2xhc3MgTG9nZ2VyIHtcbiAgd2FybiAoKSB7fVxufVxuXG5jb25zdCBjcmVhdGVBc3luY1Rhc2sgPSAoKSA9PiB7XG4gIGxldCByZXMsIHJlalxuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHJlcyA9IHJlc29sdmVcbiAgICByZWogPSByZWplY3RcbiAgfSlcblxuICByZXR1cm4ge1xuICAgIHByb21pc2UsXG4gICAgcmVzb2x2ZTogcmVzLFxuICAgIHJlamVjdDogcmVqXG4gIH1cbn1cblxuY2xhc3MgRmx2Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yIChwbGF5ZXIpIHtcbiAgICB0aGlzLlRBRyA9IFRhZ1xuICAgIHRoaXMuX3BsYXllciA9IHBsYXllclxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGluaXRTZWdtZW50QXJyaXZlZDogZmFsc2UsXG4gICAgICByYW5nZToge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAnJ1xuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnRkxWX0RFTVVYRVInLCBGbHZEZW11eGVyKVxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0ZFVENIX0xPQURFUicsIEZldGNoTG9hZGVyKVxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0xPQURFUl9CVUZGRVInLCBYZ0J1ZmZlcilcbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdUUkFDS1MnLCBUcmFja3MpXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnTVA0X1JFTVVYRVInLCBNcDRSZW11eGVyKVxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ1BSRV9TT1VSQ0VfQlVGRkVSJywgUHJlc291cmNlKVxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0xPR0dFUicsIExvZ2dlcilcbiAgICB0aGlzLm1zZSA9IHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ01TRScsIE1TRSkoeyBjb250YWluZXI6IHRoaXMuX3BsYXllciB9KVxuXG4gICAgdGhpcy5pbml0TGlzdGVuZXJzKClcbiAgfVxuXG4gIGluaXRMaXN0ZW5lcnMgKCkge1xuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLk1FRElBX1NFR01FTlQsIHRoaXMuaGFuZGxlTWVkaWFTZWdtZW50LmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuTUVESUFfSU5GTywgdGhpcy5oYW5kbGVNZWRpYUluZm8uYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5JTklUX1NFR01FTlQsIHRoaXMuaGFuZGxlQXBwZW5kSW5pdFNlZ21lbnQuYmluZCh0aGlzKSlcbiAgfVxuXG4gIGhhbmRsZU1lZGlhSW5mbyAoKSB7XG4gICAgaWYgKCF0aGlzLl9jb250ZXh0Lm1lZGlhSW5mbykge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKCdmYWlsZWQgdG8gZ2V0IG1lZGlhaW5mbycpKVxuICAgIH1cbiAgICBjb25zdCBidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdMT0FERVJfQlVGRkVSJylcbiAgICBjb25zdCBsb2FkZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdGRVRDSF9MT0FERVInKVxuICAgIGlmICh0aGlzLmlzU2Vla2FibGUpIHtcbiAgICAgIC8vIGxvYWRlci5jYW5jZWwoKVxuICAgICAgdGhpcy5zdGF0ZS5yYW5nZSA9IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogYnVmZmVyLmhpc3RvcnlMZW4gLSAxXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlTWVkaWFTZWdtZW50ICgpIHtcbiAgICB0aGlzLm1zZS5kb0FwcGVuZCgpO1xuICB9XG5cbiAgaGFuZGxlQXBwZW5kSW5pdFNlZ21lbnQgKCkge1xuICAgIHRoaXMuc3RhdGUuaW5pdFNlZ21lbnRBcnJpdmVkID0gdHJ1ZVxuICAgIHRoaXMubXNlLmFkZFNvdXJjZUJ1ZmZlcnMoKVxuICB9XG5cbiAgc2VlayAodGltZSkge1xuICAgIGlmICh0aGlzLl9wbGF5ZXIuaXNMaXZlIHx8ICF0aGlzLmlzU2Vla2FibGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoIXRoaXMuc3RhdGUuaW5pdFNlZ21lbnRBcnJpdmVkKSB7XG4gICAgICB0aGlzLmxvYWRNZXRhKClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCB7IHByZWxvYWRUaW1lID0gMTUgfSA9IHRoaXMuX3BsYXllci5jb25maWdcbiAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UodGltZSwgcHJlbG9hZFRpbWUpXG4gICAgdGhpcy5zdGF0ZS5yYW5nZSA9IHJhbmdlXG4gICAgdGhpcy5sb2FkRGF0YSgpXG4gIH1cblxuICBsb2FkRGF0YSAoKSB7XG4gICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSB0aGlzLnN0YXRlXG4gICAgY29uc3QgbG9hZGVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnRkVUQ0hfTE9BREVSJylcbiAgICBsb2FkZXIubG9hZCh0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCwge1xuICAgICAgUmFuZ2U6IGBieXRlcz0ke3N0YXJ0fS0ke2VuZH1gXG4gICAgfSlcbiAgfVxuXG4gIGxvYWRNZXRhICgpIHtcbiAgICBjb25zdCBsb2FkZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdGRVRDSF9MT0FERVInKVxuICAgIGxvYWRlci5sb2FkKHRoaXMuX3BsYXllci5jb25maWcudXJsKSAvLyDph4fnlKjnm7Tmkq3nmoTmqKHlvI/vvIzkuIDnm7TlvoDlkI7or7vlj5bmlbDmja5cbiAgfVxuXG4gIGdldFJhbmdlICh0aW1lLCBwcmVsb2FkVGltZSkge1xuICAgIGNvbnN0IHsga2V5ZnJhbWVzIH0gPSB0aGlzLl9jb250ZXh0Lm9uTWV0YURhdGFcbiAgICBjb25zdCB7IHRpbWVzY2FsZSB9ID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJykudmlkZW9UcmFjay5tZXRhXG4gICAgY29uc3Qgc2Vla1N0YXJ0ID0gdGltZSAqIHRpbWVzY2FsZVxuICAgIGNvbnN0IGZpbmRGaWxlUG9zaXRpb24gPSAodGltZSkgPT4ge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGtleWZyYW1lcy50aW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyZW50S2V5ZnJhbWVUaW1lID0ga2V5ZnJhbWVzLnRpbWVzW2ldXG4gICAgICAgIGNvbnN0IG5leHRLZXlmcmFtZVRpbWUgPSBpICsgMSA8IGxlbiA/IGtleWZyYW1lcy50aW1lc1tpICsgMV0gOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuXG4gICAgICAgIGlmIChjdXJyZW50S2V5ZnJhbWVUaW1lIDw9IHRpbWUgJiYgdGltZSA8PSBuZXh0S2V5ZnJhbWVUaW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICBjb25zdCBzZWVrU3RhcnRGaWxlUG9zID0gZmluZEZpbGVQb3NpdGlvbihzZWVrU3RhcnQpXG4gICAgY29uc3Qgc2Vla0VuZEZpbGVQb3MgPSBmaW5kRmlsZVBvc2l0aW9uKCh0aW1lICsgcHJlbG9hZFRpbWUpICogdGltZXNjYWxlKVxuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogc2Vla1N0YXJ0RmlsZVBvcyxcbiAgICAgIGVuZDogc2Vla0VuZEZpbGVQb3NcbiAgICB9XG4gIH1cblxuICBkZXN0cm95ICgpIHt9XG5cbiAgZ2V0IGlzU2Vla2FibGUgKCkge1xuICAgIGlmICghdGhpcy5fY29udGV4dCB8fCAhdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaXNDb21wbGV0ZSgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5tZWRpYUluZm8ua2V5ZnJhbWVzICE9PSBudWxsICYmIHRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmtleWZyYW1lcyAhPT0gdW5kZWZpbmVkXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmx2Q29udHJvbGxlclxuIiwiaW1wb3J0IFBsYXllciBmcm9tICd4Z3BsYXllcidcbmltcG9ydCBDb250ZXh0IGZyb20gJ3hncGxheWVyLXV0aWxzL2Rpc3QvQ29udGV4dCdcbmltcG9ydCBGTFYgZnJvbSAnLi9GbHYnXG5pbXBvcnQgYWxsRXZlbnRzLCB7IGZsdkFsbG93ZWRFdmVudHMgfSBmcm9tICd4Z3BsYXllci11dGlscy9kaXN0L2NvbnN0YW50cy9ldmVudHMnXG5cbmNvbnN0IGlzRW5kZWQgPSAocGxheWVyLCBmbHYpID0+IHtcbiAgaWYgKCFwbGF5ZXIuY29uZmlnLmlzTGl2ZSkge1xuICAgIGlmIChwbGF5ZXIuZHVyYXRpb24gLSBwbGF5ZXIuY3VycmVudFRpbWUgPCAyKSB7XG4gICAgICBjb25zdCByYW5nZSA9IHBsYXllci5nZXRCdWZmZXJlZFJhbmdlKClcbiAgICAgIGlmIChwbGF5ZXIuY3VycmVudFRpbWUgLSByYW5nZVsxXSA8IDAuMSkge1xuICAgICAgICBmbHYubXNlLmVuZE9mU3RyZWFtKClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY29uc3QgZmx2UGxheWVyID0gZnVuY3Rpb24gKCkge1xuICBsZXQgcGxheWVyID0gdGhpc1xuXG4gIGxldCB1dGlsID0gUGxheWVyLnV0aWxcbiAgY29uc3QgY29udGV4dCA9IG5ldyBDb250ZXh0KGZsdkFsbG93ZWRFdmVudHMpXG4gIGNvbnN0IHByZWxvYWRUaW1lID0gcGxheWVyLmNvbmZpZy5wcmVsb2FkVGltZSB8fCAxNVxuICBjb25zdCBfc3RhcnQgPSBwbGF5ZXIuc3RhcnRcbiAgbGV0IGZsdlxuXG4gIHBsYXllci5zdGFydCA9IGZ1bmN0aW9uICh1cmwgPSBwbGF5ZXIuY29uZmlnLnVybCkge1xuICAgIGRlYnVnZ2VyO1xuICAgIGlmICghdXJsKSB7IHJldHVybiB9XG5cbiAgICBmbHYgPSBjb250ZXh0LnJlZ2lzdHJ5KCdGTFZfQ09OVFJPTExFUicsIEZMVikocGxheWVyKVxuICAgIGNvbnRleHQuaW5pdCgpXG5cbiAgICBmbHYub25jZShhbGxFdmVudHMuSU5JVF9TRUdNRU5ULCAoKSA9PiB7XG4gICAgICBpZiAocGxheWVyLmNvbmZpZy5pc0xpdmUpIHtcbiAgICAgICAgdXRpbC5hZGRDbGFzcyhwbGF5ZXIucm9vdCwgJ3hncGxheWVyLWlzLWxpdmUnKVxuICAgICAgICBjb25zdCBsaXZlID0gdXRpbC5jcmVhdGVEb20oJ3hnLWxpdmUnLCAn5q2j5Zyo55u05pKtJywge30sICd4Z3BsYXllci1saXZlJylcbiAgICAgICAgcGxheWVyLmNvbnRyb2xzLmFwcGVuZENoaWxkKGxpdmUpXG4gICAgICAgIGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIGlmIChwbGF5ZXIucGF1c2VkICYmIHBsYXllci5idWZmZXJlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwbGF5ZXIuYnVmZmVyZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHBsYXllci5idWZmZXJlZC5zdGFydChpKSA+IHBsYXllci5jdXJyZW50VGltZSkge1xuICAgICAgICAgICAgICAgIHBsYXllci5jdXJyZW50VGltZSA9IHBsYXllci5idWZmZXJlZC5zdGFydChpKVxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgMjAwKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGZsdi50aW1lcilcbiAgICAgIH1cbiAgICB9KVxuICAgIF9zdGFydC5jYWxsKHBsYXllciwgZmx2Lm1zZS51cmwpXG5cbiAgICBpbml0U3JjQ2hhbmdlSGFuZGxlcigpXG4gIH1cblxuICBjb25zdCBpbml0U3JjQ2hhbmdlSGFuZGxlciA9ICgpID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGxheWVyLCAnc3JjJywge1xuICAgICAgZ2V0ICgpIHtcbiAgICAgICAgcmV0dXJuIHBsYXllci5jdXJyZW50U3JjXG4gICAgICB9LFxuICAgICAgc2V0ICh1cmwpIHtcbiAgICAgICAgcGxheWVyLmNvbmZpZy51cmwgPSB1cmxcbiAgICAgICAgaWYgKCFwbGF5ZXIucGF1c2VkKSB7XG4gICAgICAgICAgcGxheWVyLnBhdXNlKClcbiAgICAgICAgICBwbGF5ZXIub25jZSgncGF1c2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBwbGF5ZXIuc3RhcnQodXJsKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgcGxheWVyLm9uY2UoJ2NhbnBsYXknLCAoKSA9PiB7XG4gICAgICAgICAgICBwbGF5ZXIucGxheSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwbGF5ZXIuc3RhcnQodXJsKVxuICAgICAgICB9XG4gICAgICAgIHBsYXllci5vbmNlKCdjYW5wbGF5JywgKCkgPT4ge1xuICAgICAgICAgIHBsYXllci5jdXJyZW50VGltZSA9IDBcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgbG9hZERhdGEgPSAodGltZSA9IHBsYXllci5jdXJyZW50VGltZSkgPT4ge1xuICAgIGNvbnN0IHJhbmdlID0gcGxheWVyLmdldEJ1ZmZlcmVkUmFuZ2UoKVxuICAgIGlmICh0aW1lIDwgcmFuZ2VbMV0pIHtcbiAgICAgIGlmICghcGxheWVyLmNvbmZpZy5pc0xpdmUpIHtcbiAgICAgICAgLy8gVE9ETyDlnKjov6vov5FwcmVsb2FkVGltZeeahOaXtuWAmeW8gOWni+WKoOi9vVxuICAgICAgICBpZiAocmFuZ2VbMV0gLSB0aW1lIDwgcHJlbG9hZFRpbWUpIHtcbiAgICAgICAgICBmbHYuc2VlayhyYW5nZVsxXSArIDEpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZmx2LnNlZWsodGltZSlcbiAgICB9XG4gIH1cblxuICBwbGF5ZXIub24oJ3RpbWV1cGRhdGUnLCAoKSA9PiB7XG4gICAgbG9hZERhdGEocGxheWVyLmN1cnJlbnRUaW1lICsgMSlcbiAgICBpc0VuZGVkKHBsYXllciwgZmx2KVxuICB9KVxuXG4gIHBsYXllci5vbignc2Vla2luZycsICgpID0+IHtcbiAgICBsb2FkRGF0YSgpXG4gIH0pXG5cbiAgcGxheWVyLm9uKCd3YWl0aW5nJywgKCkgPT4ge1xuICAgIGlmIChmbHYudHlwZSA9PT0gJ2xpdmUnKSB7XG4gICAgICBsZXQgYnVmZmVyZWQgPSBwbGF5ZXIuYnVmZmVyZWRcbiAgICAgIGxldCBsZW5ndGggPSBidWZmZXJlZC5sZW5ndGhcbiAgICAgIGxldCBjdXJyZW50VGltZSA9IHBsYXllci5jdXJyZW50VGltZVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYnVmZmVyZWQuc3RhcnQoaSkgPiBjdXJyZW50VGltZSkge1xuICAgICAgICAgIHBsYXllci5jdXJyZW50VGltZSA9IGJ1ZmZlcmVkLnN0YXJ0KGkpICsgMC4xXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICBwbGF5ZXIub25jZSgnZGVzdHJveScsICgpID0+IHtcbiAgICBmbHYuZGVzdHJveSgpXG4gIH0pXG59XG5cblBsYXllci5pbnN0YWxsKCdmbHZwbGF5ZXInLCBmbHZQbGF5ZXIpXG4iLCJpbXBvcnQgaXNMZSBmcm9tICcuLi8uLi8uLi8uLi94Z3BsYXllci11dGlscy9zcmMvZW52L2lzTEUnXG5pbXBvcnQgVVRGOCBmcm9tICcuLi8uLi91dGlscy9VVEY4J1xuXG5jb25zdCBEQVRBX1RZUEVTID0ge1xuICBOVU1CRVI6IDAsXG4gIEJPT0xFQU46IDEsXG4gIFNUUklORzogMixcbiAgT0JKRUNUOiAzLFxuICBNSVhfQVJSQVk6IDgsXG4gIE9CSkVDVF9FTkQ6IDksXG4gIFNUUklDVF9BUlJBWTogMTAsXG4gIERBVEU6IDExLFxuICBMT05FX1NUUklORzogMTJcbn1cblxuLyoqXG4gKiBtZXRh5L+h5oGv6Kej5p6QXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFNRlBhcnNlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLnJlYWRPZmZzZXQgPSB0aGlzLm9mZnNldFxuICB9XG5cbiAgcmVzb2x2ZSAobWV0YSwgc2l6ZSkge1xuICAgIGlmIChzaXplIDwgMykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgZW5vdWdoIGRhdGEgZm9yIG1ldGFpbmZvJylcbiAgICB9XG4gICAgY29uc3QgbWV0YURhdGEgPSB7fVxuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlVmFsdWUobWV0YSlcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucGFyc2VWYWx1ZShtZXRhLCBzaXplIC0gbmFtZS5ib2R5U2l6ZSlcbiAgICBtZXRhRGF0YVtuYW1lLmRhdGFdID0gdmFsdWUuZGF0YVxuXG4gICAgdGhpcy5yZXNldFN0YXR1cygpXG4gICAgcmV0dXJuIG1ldGFEYXRhXG4gIH1cblxuICByZXNldFN0YXR1cyAoKSB7XG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgdGhpcy5yZWFkT2Zmc2V0ID0gdGhpcy5vZmZzZXRcbiAgfVxuXG4gIHBhcnNlU3RyaW5nIChidWZmZXIpIHtcbiAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhidWZmZXIsIHRoaXMucmVhZE9mZnNldClcbiAgICBjb25zdCBzdHJMZW4gPSBkdi5nZXRVaW50MTYoMCwgIWlzTGUpXG4gICAgbGV0IHN0ciA9ICcnXG4gICAgaWYgKHN0ckxlbiA+IDApIHtcbiAgICAgIHN0ciA9IFVURjguZGVjb2RlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0ICsgMiwgc3RyTGVuKSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gJydcbiAgICB9XG4gICAgbGV0IHNpemUgPSBzdHJMZW4gKyAyXG4gICAgdGhpcy5yZWFkT2Zmc2V0ICs9IHNpemVcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogc3RyLFxuICAgICAgYm9keVNpemU6IHN0ckxlbiArIDJcbiAgICB9XG4gIH1cblxuICBwYXJzZURhdGUgKGJ1ZmZlciwgc2l6ZSkge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0LCBzaXplKVxuICAgIGxldCB0cyA9IGR2LmdldEZsb2F0NjQoMCwgIWlzTGUpXG4gICAgY29uc3QgdGltZU9mZnNldCA9IGR2LmdldEludDE2KDgsICFpc0xlKVxuICAgIHRzICs9IHRpbWVPZmZzZXQgKiA2MCAqIDEwMDBcblxuICAgIHRoaXMucmVhZE9mZnNldCArPSAxMFxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBuZXcgRGF0ZSh0cyksXG4gICAgICBib2R5U2l6ZTogMTBcbiAgICB9XG4gIH1cblxuICBwYXJzZU9iamVjdCAoYnVmZmVyLCBzaXplKSB7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBzaXplKVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKGJ1ZmZlciwgc2l6ZSAtIG5hbWUuYm9keVNpemUpXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbmFtZTogbmFtZS5kYXRhLFxuICAgICAgICB2YWx1ZTogdmFsdWUuZGF0YVxuICAgICAgfSxcbiAgICAgIGJvZHlTaXplOiBuYW1lLmJvZHlTaXplICsgdmFsdWUuYm9keVNpemUsXG4gICAgICBpc09iakVuZDogdmFsdWUuaXNPYmpFbmRcbiAgICB9XG4gIH1cblxuICBwYXJzZUxvbmdTdHJpbmcgKGJ1ZmZlcikge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0KVxuICAgIGNvbnN0IHN0ckxlbiA9IGR2LmdldFVpbnQzMigwLCAhaXNMZSlcbiAgICBsZXQgc3RyID0gJydcbiAgICBpZiAoc3RyTGVuID4gMCkge1xuICAgICAgc3RyID0gVVRGOC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQgKyAyLCBzdHJMZW4pKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSAnJ1xuICAgIH1cbiAgICAvLyBjb25zdCBzaXplID0gc3RyTGVuICsgNDtcbiAgICB0aGlzLnJlYWRPZmZzZXQgKz0gc3RyTGVuICsgNFxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBzdHIsXG4gICAgICBib2R5U2l6ZTogc3RyTGVuICsgNFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmnpBtZXRh5Lit55qE5Y+Y6YePXG4gICAqL1xuICBwYXJzZVZhbHVlIChkYXRhLCBzaXplKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigpXG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgYnVmZmVyID0gZGF0YVxuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIgPSBkYXRhLmJ1ZmZlclxuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBOVU1CRVIsXG4gICAgICBCT09MRUFOLFxuICAgICAgU1RSSU5HLFxuICAgICAgT0JKRUNULFxuICAgICAgTUlYX0FSUkFZLFxuICAgICAgT0JKRUNUX0VORCxcbiAgICAgIFNUUklDVF9BUlJBWSxcbiAgICAgIERBVEUsXG4gICAgICBMT05FX1NUUklOR1xuICAgIH0gPSBEQVRBX1RZUEVTXG4gICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQsIHNpemUpXG4gICAgbGV0IGlzT2JqRW5kID0gZmFsc2VcbiAgICBjb25zdCB0eXBlID0gZGF0YVZpZXcuZ2V0VWludDgoMClcbiAgICBsZXQgb2Zmc2V0ID0gMVxuICAgIHRoaXMucmVhZE9mZnNldCArPSAxXG4gICAgbGV0IHZhbHVlID0gbnVsbFxuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIE5VTUJFUjoge1xuICAgICAgICB2YWx1ZSA9IGRhdGFWaWV3LmdldEZsb2F0NjQoMSwgIWlzTGUpXG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSA4XG4gICAgICAgIG9mZnNldCArPSA4XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIEJPT0xFQU46IHtcbiAgICAgICAgY29uc3QgYm9vbE51bSA9IGRhdGFWaWV3LmdldFVpbnQ4KDEpXG4gICAgICAgIHZhbHVlID0gISFib29sTnVtXG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSAxXG4gICAgICAgIG9mZnNldCArPSAxXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIFNUUklORzoge1xuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlcilcbiAgICAgICAgdmFsdWUgPSBzdHIuZGF0YVxuICAgICAgICBvZmZzZXQgKz0gc3RyLmJvZHlTaXplXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIE9CSkVDVDoge1xuICAgICAgICB2YWx1ZSA9IHt9XG4gICAgICAgIGxldCBvYmpFbmRTaXplID0gMFxuICAgICAgICBpZiAoZGF0YVZpZXcuZ2V0VWludDMyKHNpemUgLSA0LCAhaXNMZSkgJiAweDAwRkZGRkZGKSB7XG4gICAgICAgICAgb2JqRW5kU2l6ZSA9IDNcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLnJlYWRPZmZzZXQgKz0gb2Zmc2V0IC0gMTtcbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IHNpemUgLSA0KSB7XG4gICAgICAgICAgY29uc3QgYW1mT2JqID0gdGhpcy5wYXJzZU9iamVjdChidWZmZXIsIHNpemUgLSBvZmZzZXQgLSBvYmpFbmRTaXplKVxuICAgICAgICAgIGlmIChhbWZPYmouaXNPYmplY3RFbmQpIHsgYnJlYWsgfVxuICAgICAgICAgIHZhbHVlW2FtZk9iai5kYXRhLm5hbWVdID0gYW1mT2JqLmRhdGEudmFsdWVcbiAgICAgICAgICBvZmZzZXQgKz0gYW1mT2JqLmJvZHlTaXplXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA8PSBzaXplIC0gMykge1xuICAgICAgICAgIGNvbnN0IG1hcmsgPSBkYXRhVmlldy5nZXRVaW50MzIob2Zmc2V0IC0gMSwgIWlzTGUpICYgMHgwMEZGRkZGRlxuICAgICAgICAgIGlmIChtYXJrID09PSA5KSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gM1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgTUlYX0FSUkFZOiB7XG4gICAgICAgIHZhbHVlID0ge31cbiAgICAgICAgb2Zmc2V0ICs9IDRcbiAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDRcbiAgICAgICAgbGV0IG9iakVuZFNpemUgPSAwXG4gICAgICAgIGlmICgoZGF0YVZpZXcuZ2V0VWludDMyKHNpemUgLSA0LCAhaXNMZSkgJiAweDAwRkZGRkZGKSA9PT0gOSkge1xuICAgICAgICAgIG9iakVuZFNpemUgPSAzXG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgc2l6ZSAtIDgpIHtcbiAgICAgICAgICBjb25zdCBhbWZWYXIgPSB0aGlzLnBhcnNlT2JqZWN0KGJ1ZmZlciwgc2l6ZSAtIG9mZnNldCAtIG9iakVuZFNpemUpXG4gICAgICAgICAgaWYgKGFtZlZhci5pc09iamVjdEVuZCkgeyBicmVhayB9XG4gICAgICAgICAgdmFsdWVbYW1mVmFyLmRhdGEubmFtZV0gPSBhbWZWYXIuZGF0YS52YWx1ZVxuICAgICAgICAgIG9mZnNldCArPSBhbWZWYXIuYm9keVNpemVcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0IDw9IHNpemUgLSAzKSB7XG4gICAgICAgICAgY29uc3QgbWFya2VyID0gZGF0YVZpZXcuZ2V0VWludDMyKG9mZnNldCAtIDEsICFpc0xlKSAmIDB4MDBGRkZGRkZcbiAgICAgICAgICBpZiAobWFya2VyID09PSA5KSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gM1xuICAgICAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBPQkpFQ1RfRU5EOiB7XG4gICAgICAgIHZhbHVlID0gbnVsbFxuICAgICAgICBpc09iakVuZCA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBTVFJJQ1RfQVJSQVk6IHtcbiAgICAgICAgdmFsdWUgPSBbXVxuICAgICAgICBjb25zdCBhcnJMZW5ndGggPSBkYXRhVmlldy5nZXRVaW50MzIoMSwgIWlzTGUpXG4gICAgICAgIG9mZnNldCArPSA0XG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSA0XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzY3JpcHQgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBzaXplIC0gb2Zmc2V0KVxuICAgICAgICAgIHZhbHVlLnB1c2goc2NyaXB0LmRhdGEpXG4gICAgICAgICAgb2Zmc2V0ICs9IHNjcmlwdC5ib2R5U2l6ZVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgREFURToge1xuICAgICAgICBjb25zdCBkYXRlID0gdGhpcy5wYXJzZURhdGUoYnVmZmVyLCBzaXplIC0gMSlcbiAgICAgICAgdmFsdWUgPSBkYXRlLmRhdGFcbiAgICAgICAgb2Zmc2V0ICs9IGRhdGUuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBMT05FX1NUUklORzoge1xuICAgICAgICBjb25zdCBsb25nU3RyID0gdGhpcy5wYXJzZUxvbmdTdHJpbmcoYnVmZmVyLCBzaXplIC0gMSlcbiAgICAgICAgdmFsdWUgPSBsb25nU3RyLmRhdGFcbiAgICAgICAgb2Zmc2V0ICs9IGxvbmdTdHIuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBvZmZzZXQgPSBzaXplXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHZhbHVlLFxuICAgICAgYm9keVNpemU6IG9mZnNldCxcbiAgICAgIGlzT2JqRW5kOiBpc09iakVuZFxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTE9BREVSX0VWRU5UUywgREVNVVhfRVZFTlRTIH0gZnJvbSAnLi4vLi4vLi4vLi4veGdwbGF5ZXItdXRpbHMvc3JjL2NvbnN0YW50cy9ldmVudHMnXG5pbXBvcnQgQU1GUGFyc2VyIGZyb20gJy4vQU1GUGFyc2VyJ1xuaW1wb3J0IFNQU1BhcnNlciBmcm9tICcuLi8uLi8uLi8uLi94Z3BsYXllci11dGlscy9zcmMvaDI2NC9TUFNQYXJzZXInXG5pbXBvcnQgeyBBdWRpb1RyYWNrTWV0YSwgVmlkZW9UcmFja01ldGEgfSBmcm9tICcuLi8uLi8uLi8uLi94Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL3RyYWNrTWV0YSdcbmltcG9ydCB7VmlkZW9UcmFjaywgQXVkaW9UcmFja30gZnJvbSAnLi4vLi4vLi4vLi4veGdwbGF5ZXItYnVmZmVyL3NyYydcblxuY2xhc3MgRmx2RGVtdXhlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkID0gZmFsc2VcbiAgICB0aGlzLl90cmFja051bSA9IDBcbiAgICB0aGlzLl9oYXNTY3JpcHQgPSBmYWxzZVxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5vbihMT0FERVJfRVZFTlRTLkxPQURFUl9EQVRBTE9BREVELCB0aGlzLmhhbmRsZURhdGFMb2FkZWQuYmluZCh0aGlzKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBpZiB0aGUgZmx2IGhlYWQgaXMgdmFsaWRcbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNGbHZGaWxlIChkYXRhKSB7XG4gICAgcmV0dXJuICEoZGF0YVswXSAhPT0gMHg0NiB8fCBkYXRhWzFdICE9PSAweDRDIHx8IGRhdGFbMl0gIT09IDB4NTYgfHwgZGF0YVszXSAhPT0gMHgwMSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUgc3RyZWFtIGhhcyBhdWRpbyBvciB2aWRlby5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0cmVhbUZsYWcgLSBEYXRhIGZyb20gdGhlIHN0cmVhbSB3aGljaCBpcyBkZWZpbmUgd2hldGhlciB0aGUgYXVkaW8gLyB2aWRlbyB0cmFjayBpcyBleGlzdC5cbiAgICovXG4gIHN0YXRpYyBnZXRQbGF5VHlwZSAoc3RyZWFtRmxhZykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIGhhc1ZpZGVvOiBmYWxzZSxcbiAgICAgIGhhc0F1ZGlvOiBmYWxzZVxuICAgIH1cblxuICAgIGlmIChzdHJlYW1GbGFnICYgMHgwMSA+IDApIHtcbiAgICAgIHJlc3VsdC5oYXNWaWRlbyA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoc3RyZWFtRmxhZyAmIDB4MDQgPiAwKSB7XG4gICAgICByZXN1bHQuaGFzQXVkaW8gPSB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgaGFuZGxlRGF0YUxvYWRlZCAoKSB7XG4gICAgdGhpcy5wYXJzZUZsdlN0cmVhbSgpXG4gIH1cblxuICBwYXJzZUZsdlN0cmVhbSAoKSB7XG4gICAgaWYgKCF0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkKSB7XG4gICAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoIDwgMTMpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjb25zdCBoZWFkZXIgPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxMylcbiAgICAgIHRoaXMucGFyc2VGbHZIZWFkZXIoaGVhZGVyKVxuICAgICAgdGhpcy5wYXJzZUZsdlN0cmVhbSgpIC8vIOmAkuW9kuiwg+eUqO+8jOe7p+e7reino+aekGZsdua1gVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoIDwgMTEpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fcGFyc2VGbHZUYWcoKSkge1xuICAgICAgICB0aGlzLnBhcnNlRmx2U3RyZWFtKCkgLy8g6YCS5b2S6LCD55So77yM57un57ut6Kej5p6QZmx25rWBXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcGFyc2VGbHZIZWFkZXIgKGhlYWRlcikge1xuICAgIGlmICghRmx2RGVtdXhlci5pc0ZsdkZpbGUoaGVhZGVyKSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKCdpbnZhbGlkIGZsdiBmaWxlJykpXG4gICAgICB0aGlzLnBhcnNlRmx2U3RyZWFtKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZmlyc3RGcmFnbWVudExvYWRlZCA9IHRydWVcbiAgICAgIGNvbnN0IHBsYXlUeXBlID0gRmx2RGVtdXhlci5nZXRQbGF5VHlwZShoZWFkZXJbNF0pXG5cbiAgICAgIGlmIChwbGF5VHlwZS5oYXNWaWRlbykge1xuICAgICAgICB0aGlzLmluaXRWaWRlb1RyYWNrKClcbiAgICAgIH1cblxuICAgICAgaWYgKHBsYXlUeXBlLmhhc0F1ZGlvKSB7XG4gICAgICAgIHRoaXMuaW5pdEF1ZGlvVHJhY2soKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmhhbmRsZURhdGFMb2FkZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIGluaXQgZGVmYXVsdCB2aWRlbyB0cmFjayBjb25maWdzXG4gICAqL1xuICBpbml0VmlkZW9UcmFjayAoKSB7XG4gICAgdGhpcy5fdHJhY2tOdW0rK1xuICAgIGxldCB2aWRlb1RyYWNrID0gbmV3IFZpZGVvVHJhY2soKVxuICAgIHZpZGVvVHJhY2subWV0YSA9IG5ldyBWaWRlb1RyYWNrTWV0YSgpXG4gICAgdmlkZW9UcmFjay5pZCA9IHZpZGVvVHJhY2subWV0YS5pZCA9IHRoaXMuX3RyYWNrTnVtXG5cbiAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrID0gdmlkZW9UcmFja1xuICB9XG5cbiAgLyoqXG4gICAqIGluaXQgZGVmYXVsdCBhdWRpbyB0cmFjayBjb25maWdzXG4gICAqL1xuICBpbml0QXVkaW9UcmFjayAoKSB7XG4gICAgdGhpcy5fdHJhY2tOdW0rK1xuICAgIGxldCBhdWRpb1RyYWNrID0gbmV3IEF1ZGlvVHJhY2soKVxuICAgIGF1ZGlvVHJhY2subWV0YSA9IG5ldyBBdWRpb1RyYWNrTWV0YSgpXG4gICAgYXVkaW9UcmFjay5pZCA9IGF1ZGlvVHJhY2subWV0YS5pZCA9IHRoaXMuX3RyYWNrTnVtXG5cbiAgICB0aGlzLnRyYWNrcy5hdWRpb1RyYWNrID0gYXVkaW9UcmFja1xuICB9XG5cbiAgLyoqXG4gICAqIFBhY2thZ2UgdGhlIGRhdGEgYXMgdGhlIGZvbGxvd2luZyBkYXRhIHN0cnVjdHVyZVxuICAgKiB7XG4gICAqICAgIGRhdGE6IFVpbnQ4QXJyYXkuIHRoZSBTdHJlYW0gZGF0YS5cbiAgICogICAgaW5mbzogVGhlIGZpcnN0IGJ5dGUgaW5mbyBvZiB0aGUgVGFnLlxuICAgKiAgICB0YWdUeXBlOiA444CBOeOAgTE4XG4gICAqICAgIHRpbWVTdGFtcDogdGhlIHRpbWVzdGVtcFxuICAgKiB9XG4gICAqL1xuICBfcGFyc2VGbHZUYWcgKCkge1xuICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPCAxMSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgbGV0IGNodW5rID0gdGhpcy5fcGFyc2VGbHZUYWdIZWFkZXIoKVxuICAgIGlmIChjaHVuaykge1xuICAgICAgdGhpcy5fcHJvY2Vzc0NodW5rKGNodW5rKVxuICAgIH1cbiAgICByZXR1cm4gY2h1bmtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgMTEgYnl0ZSB0YWcgSGVhZGVyXG4gICAqL1xuICBfcGFyc2VGbHZUYWdIZWFkZXIgKCkge1xuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgbGV0IGNodW5rID0ge31cblxuICAgIGxldCB0YWdUeXBlID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQob2Zmc2V0LCAxKVxuICAgIG9mZnNldCArPSAxXG5cbiAgICAvLyAyIGJpdCBGTVMgcmVzZXJ2ZWQsIDEgYml0IGZpbHRlcmVkLCA1IGJpdCB0YWcgdHlwZVxuICAgIGNodW5rLmZpbHRlcmVkID0gKHRhZ1R5cGUgJiAzMikgPj4+IDVcbiAgICBjaHVuay50YWdUeXBlID0gdGFnVHlwZSAmIDMxXG5cbiAgICAvLyAzIEJ5dGUgZGF0YXNpemVcbiAgICBjaHVuay5kYXRhc2l6ZSA9IHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KG9mZnNldCwgMylcbiAgICBvZmZzZXQgKz0gM1xuXG4gICAgaWYgKChjaHVuay50YWdUeXBlICE9PSA4ICYmIGNodW5rLnRhZ1R5cGUgIT09IDkgJiYgY2h1bmsudGFnVHlwZSAhPT0gMTEgJiYgY2h1bmsudGFnVHlwZSAhPT0gMTgpIHx8XG4gICAgICB0aGlzLmxvYWRlckJ1ZmZlci50b0ludCg4LCAzKSAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyICYmIHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlcbiAgICAgIH1cbiAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsICd0YWdUeXBlICcgKyBjaHVuay50YWdUeXBlKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoIDwgY2h1bmsuZGF0YXNpemUgKyAxNSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICAvLyByZWFkIHRoZSBkYXRhLlxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpXG5cbiAgICAvLyAzIEJ5dGUgdGltZXN0YW1wXG4gICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDAsIDMpXG4gICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMylcblxuICAgIC8vIDEgQnl0ZSB0aW1lc3RhbXBFeHRcbiAgICBsZXQgdGltZXN0YW1wRXh0ID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBpZiAodGltZXN0YW1wRXh0ID4gMCkge1xuICAgICAgdGltZXN0YW1wICs9IHRpbWVzdGFtcEV4dCAqIDB4MTAwMDAwMFxuICAgIH1cblxuICAgIGNodW5rLmR0cyA9IHRpbWVzdGFtcFxuXG4gICAgLy8gc3RyZWFtSWRcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgX3Byb2Nlc3NDaHVuayAoY2h1bmspIHtcbiAgICBzd2l0Y2ggKGNodW5rLnRhZ1R5cGUpIHtcbiAgICAgIGNhc2UgMTg6XG4gICAgICAgIHRoaXMuX3BhcnNlU2NyaXB0RGF0YShjaHVuaylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgODpcbiAgICAgICAgdGhpcy5fcGFyc2VBQUNEYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSA5OlxuICAgICAgICB0aGlzLl9wYXJzZUhldmNEYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAxMTpcbiAgICAgICAgLy8gZm9yIHNvbWUgQ0ROIHRoYXQgZGlkIG5vdCBwcm9jZXNzIHRoZSBjdXJyZWN0IFJUTVAgbWVzc2FnZXNcbiAgICAgICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMylcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHBhcnNlIGZsdiBzY3JpcHQgZGF0YVxuICAgKiBAcGFyYW0gY2h1bmtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZVNjcmlwdERhdGEgKGNodW5rKSB7XG4gICAgbGV0IGF1ZGlvVHJhY2sgPSB0aGlzLnRyYWNrcy5hdWRpb1RyYWNrXG4gICAgbGV0IHZpZGVvVHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG5cbiAgICBsZXQgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplKVxuXG4gICAgY29uc3QgaW5mbyA9IG5ldyBBTUZQYXJzZXIoKS5yZXNvbHZlKGRhdGEsIGRhdGEubGVuZ3RoKVxuXG4gICAgY29uc3Qgb25NZXRhRGF0YSA9IHRoaXMuX2NvbnRleHQub25NZXRhRGF0YSA9IGluZm8gPyBpbmZvLm9uTWV0YURhdGEgOiB1bmRlZmluZWRcblxuICAgIC8vIGZpbGwgbWVkaWFJbmZvXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gPSBvbk1ldGFEYXRhLmR1cmF0aW9uXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaGFzVmlkZW8gPSBvbk1ldGFEYXRhLmhhc1ZpZGVvXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaHNhQXVkaW8gPSBvbk1ldGFEYXRhLmhhc0F1ZGlvXG5cbiAgICBsZXQgdmFsaWRhdGUgPSB0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSlcbiAgICBpZiAodmFsaWRhdGUpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVESUFfSU5GTylcbiAgICAgIHRoaXMuX2hhc1NjcmlwdCA9IHRydWVcbiAgICB9XG5cbiAgICAvLyBFZGl0IGRlZmF1bHQgbWV0YS5cbiAgICBpZiAoYXVkaW9UcmFjayAmJiAhYXVkaW9UcmFjay5oYXNTcGVjaWZpY0NvbmZpZykge1xuICAgICAgbGV0IG1ldGEgPSBhdWRpb1RyYWNrLm1ldGFcbiAgICAgIGlmIChvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZSkge1xuICAgICAgICBtZXRhLnNhbXBsZVJhdGUgPSBvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZVxuICAgICAgfVxuXG4gICAgICBpZiAob25NZXRhRGF0YS5hdWRpb2NoYW5uZWxzKSB7XG4gICAgICAgIG1ldGEuY2hhbm5lbENvdW50ID0gb25NZXRhRGF0YS5hdWRpb2NoYW5uZWxzXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAob25NZXRhRGF0YS5hdWRpb3NhbXBsZXJhdGUpIHtcbiAgICAgICAgY2FzZSA0NDEwMDpcbiAgICAgICAgICBtZXRhLnNhbXBsZVJhdGVJbmRleCA9IDRcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDIyMDUwOlxuICAgICAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gN1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTEwMjU6XG4gICAgICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSAxMFxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2aWRlb1RyYWNrICYmICF2aWRlb1RyYWNrLmhhc1NwZWNpZmljQ29uZmlnKSB7XG4gICAgICBsZXQgbWV0YSA9IHZpZGVvVHJhY2subWV0YVxuICAgICAgaWYgKHR5cGVvZiBvbk1ldGFEYXRhLmZyYW1lcmF0ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbGV0IGZwc051bSA9IE1hdGguZmxvb3Iob25NZXRhRGF0YS5mcmFtZXJhdGUgKiAxMDAwKVxuICAgICAgICBpZiAoZnBzTnVtID4gMCkge1xuICAgICAgICAgIGxldCBmcHMgPSBmcHNOdW0gLyAxMDAwXG4gICAgICAgICAgaWYgKCFtZXRhLmZyYW1lUmF0ZSkge1xuICAgICAgICAgICAgbWV0YS5mcmFtZVJhdGUgPSB7fVxuICAgICAgICAgIH1cbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5maXhlZCA9IHRydWVcbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHMgPSBmcHNcbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHNfbnVtID0gZnBzTnVtXG4gICAgICAgICAgbWV0YS5mcmFtZVJhdGUuZnBzX2RlbiA9IDEwMDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlciAoZGF0YSkge1xuICAgIGxldCByZXQgPSB7fVxuICAgIHJldC5oYXNTcGVjaWZpY0NvbmZpZyA9IHRydWVcbiAgICByZXQub2JqZWN0VHlwZSA9IGRhdGFbMV0gPj4+IDNcbiAgICByZXQuc2FtcGxlUmF0ZUluZGV4ID0gKChkYXRhWzFdICYgNykgPDwgMSkgfCAoZGF0YVsyXSA+Pj4gNylcbiAgICByZXQuYXVkaW9zYW1wbGVyYXRlID0gdGhpcy5fc3dpdGNoQXVkaW9TYW1wbGVSYXRlKHJldC5zYW1wbGVSYXRlSW5kZXgpXG4gICAgcmV0LmNoYW5uZWxDb3VudCA9IChkYXRhWzJdICYgMTIwKSA+Pj4gM1xuICAgIHJldC5mcmFtZUxlbmd0aCA9IChkYXRhWzJdICYgNCkgPj4+IDJcbiAgICByZXQuZGVwZW5kc09uQ29yZUNvZGVyID0gKGRhdGFbMl0gJiAyKSA+Pj4gMVxuICAgIHJldC5leHRlbnNpb25GbGFnSW5kZXggPSBkYXRhWzJdICYgMVxuXG4gICAgcmV0LmNvZGVjID0gYG1wNGEuNDAuJHtyZXQub2JqZWN0VHlwZX1gXG4gICAgbGV0IHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGV4dGVuc2lvblNhbXBsaW5nSW5kZXg7XG5cbiAgICBsZXQgY29uZmlnO1xuXG4gICAgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdmaXJlZm94JykgIT09IC0xKSB7XG4gICAgICAvLyBmaXJlZm94OiB1c2UgU0JSIChIRS1BQUMpIGlmIGZyZXEgbGVzcyB0aGFuIDI0a0h6XG4gICAgICBpZiAocmV0LnNhbXBsZVJhdGVJbmRleCA+PSA2KSB7XG4gICAgICAgIHJldC5vYmplY3RUeXBlID0gNTtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdJbmRleCAtIDM7XG4gICAgICB9IGVsc2UgeyAvLyB1c2UgTEMtQUFDXG4gICAgICAgIHJldC5vYmplY3RUeXBlID0gMjtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdJbmRleDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdhbmRyb2lkJykgIT09IC0xKSB7XG4gICAgICAvLyBhbmRyb2lkOiBhbHdheXMgdXNlIExDLUFBQ1xuICAgICAgcmV0Lm9iamVjdFR5cGUgPSAyO1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBvdGhlciBicm93c2VycywgZS5nLiBjaHJvbWUuLi5cbiAgICAgIC8vIEFsd2F5cyB1c2UgSEUtQUFDIHRvIG1ha2UgaXQgZWFzaWVyIHRvIHN3aXRjaCBhYWMgY29kZWMgcHJvZmlsZVxuICAgICAgcmV0Lm9iamVjdFR5cGUgPSA1O1xuICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXg7XG4gICAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7XG5cbiAgICAgIGlmIChyZXQuc2FtcGxlUmF0ZUluZGV4ID49IDYpIHtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIGlmIChyZXQuY2hhbm5lbENvdW50ID09PSAxKSB7IC8vIE1vbm8gY2hhbm5lbFxuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDI7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uZmlnWzBdID0gcmV0Lm9iamVjdFR5cGUgPDwgMztcbiAgICBjb25maWdbMF0gfD0gKHJldC5zYW1wbGVSYXRlSW5kZXggJiAweDBGKSA+Pj4gMTtcbiAgICBjb25maWdbMV0gPSAocmV0LnNhbXBsZVJhdGVJbmRleCAmIDB4MEYpIDw8IDc7XG4gICAgY29uZmlnWzFdIHw9IChyZXQuY2hhbm5lbENvdW50ICYgMHgwRikgPDwgMztcbiAgICBpZiAocmV0Lm9iamVjdFR5cGUgPT09IDUpIHtcbiAgICAgIGNvbmZpZ1sxXSB8PSAoKGV4dGVuc2lvblNhbXBsaW5nSW5kZXggJiAweDBGKSA+Pj4gMSk7XG4gICAgICBjb25maWdbMl0gPSAoZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCAmIDB4MDEpIDw8IDc7XG4gICAgICAvLyBleHRlbmRlZCBhdWRpbyBvYmplY3QgdHlwZTogZm9yY2UgdG8gMiAoTEMtQUFDKVxuICAgICAgY29uZmlnWzJdIHw9ICgyIDw8IDIpO1xuICAgICAgY29uZmlnWzNdID0gMDtcbiAgICB9XG4gICAgcmV0LmNvbmZpZyA9IGNvbmZpZ1xuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIF9wYXJzZUFBQ0RhdGEgKGNodW5rKSB7XG4gICAgbGV0IHRyYWNrID0gdGhpcy50cmFja3MuYXVkaW9UcmFja1xuICAgIGlmICghdHJhY2spIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBtZXRhID0gdHJhY2subWV0YVxuXG4gICAgaWYgKCFtZXRhKSB7XG4gICAgICBtZXRhID0gbmV3IEF1ZGlvVHJhY2tNZXRhKClcbiAgICB9XG5cbiAgICBsZXQgaW5mbyA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdXG5cbiAgICBjaHVuay5kYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSAxKVxuXG4gICAgbGV0IGZvcm1hdCA9IChpbmZvICYgMjQwKSA+Pj4gNFxuXG4gICAgdHJhY2suZm9ybWF0ID0gZm9ybWF0XG5cbiAgICBpZiAoZm9ybWF0ICE9PSAxMCkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKGBpbnZhbGlkIGF1ZGlvIGZvcm1hdDogJHtmb3JtYXR9YCkpXG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdCA9PT0gMTAgJiYgIXRoaXMuX2hhc0F1ZGlvU2VxdWVuY2UpIHtcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IHRoaXMuX3N3aXRjaEF1ZGlvU2FtcGxpbmdGcmVxdWVuY3koaW5mbylcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gKGluZm8gJiAxMikgPj4+IDJcbiAgICAgIG1ldGEuZnJhbWVMZW50aCA9IChpbmZvICYgMikgPj4+IDFcbiAgICAgIG1ldGEuY2hhbm5lbENvdW50ID0gaW5mbyAmIDFcbiAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKDEwMjQgLyBtZXRhLmF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKVxuICAgIH1cblxuICAgIGxldCBhdWRpb1NhbXBsZVJhdGUgPSBtZXRhLmF1ZGlvU2FtcGxlUmF0ZVxuICAgIGxldCBhdWRpb1NhbXBsZVJhdGVJbmRleCA9IG1ldGEuc2FtcGxlUmF0ZUluZGV4XG4gICAgbGV0IHJlZlNhbXBsZUR1cmF0aW9uID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgZGVsZXRlIGNodW5rLnRhZ1R5cGVcbiAgICBsZXQgdmFsaWRhdGUgPSB0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSlcblxuICAgIGlmIChjaHVuay5kYXRhWzBdID09PSAwKSB7IC8vIEFBQyBTZXF1ZW5jZSBIZWFkZXJcbiAgICAgIGxldCBhYWNIZWFkZXIgPSB0aGlzLl9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlcihjaHVuay5kYXRhKVxuICAgICAgYXVkaW9TYW1wbGVSYXRlID0gYWFjSGVhZGVyLmF1ZGlvc2FtcGxlcmF0ZSB8fCBtZXRhLmF1ZGlvU2FtcGxlUmF0ZVxuICAgICAgYXVkaW9TYW1wbGVSYXRlSW5kZXggPSBhYWNIZWFkZXIuc2FtcGxlUmF0ZUluZGV4IHx8IG1ldGEuc2FtcGxlUmF0ZUluZGV4XG4gICAgICByZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IoMTAyNCAvIGF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKVxuXG4gICAgICBtZXRhLmNoYW5uZWxDb3VudCA9IGFhY0hlYWRlci5jaGFubmVsQ291bnRcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IGF1ZGlvU2FtcGxlUmF0ZVxuICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSBhdWRpb1NhbXBsZVJhdGVJbmRleFxuICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IHJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICBtZXRhLmR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gKiBtZXRhLnRpbWVzY2FsZVxuICAgICAgbWV0YS5jb25maWcgPSBhYWNIZWFkZXIuY29uZmlnXG5cbiAgICAgIGNvbnN0IGF1ZGlvTWVkaWEgPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5hdWRpb1xuXG4gICAgICAvLyBmaWxsIGF1ZGlvIG1lZGlhIGluZm9cbiAgICAgIGF1ZGlvTWVkaWEuY29kZWMgPSBhYWNIZWFkZXIuY29kZWNcbiAgICAgIGF1ZGlvTWVkaWEuY2hhbm5lbENvdW50ID0gYWFjSGVhZGVyLmNoYW5uZWxDb3VudFxuICAgICAgYXVkaW9NZWRpYS5zYW1wbGVSYXRlID0gYXVkaW9TYW1wbGVSYXRlXG4gICAgICBhdWRpb01lZGlhLnNhbXBsZVJhdGVJbmRleCA9IGFhY0hlYWRlci5hdWRpb1NhbXBsZVJhdGVJbmRleFxuXG4gICAgICBpZiAodGhpcy5faGFzU2NyaXB0ICYmICF0aGlzLl9oYXNBdWRpb1NlcXVlbmNlICYmICghdGhpcy50cmFja3MudmlkZW9UcmFjayB8fCB0aGlzLl9oYXNWaWRlb1NlcXVlbmNlKSkge1xuICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ2F1ZGlvJylcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5faGFzU2NyaXB0ICYmIHRoaXMuX2hhc0F1ZGlvU2VxdWVuY2UpIHtcbiAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5BVURJT19NRVRBREFUQV9DSEFOR0UpXG4gICAgICB9XG4gICAgICA7XG4gICAgICB0aGlzLl9oYXNBdWRpb1NlcXVlbmNlID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBjaHVuay5kYXRhID0gY2h1bmsuZGF0YS5zbGljZSgxLCBjaHVuay5kYXRhLmxlbmd0aClcbiAgICAgIHRyYWNrLnNhbXBsZXMucHVzaChjaHVuaylcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgfVxuICAgIGlmICghdmFsaWRhdGUpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsICdUQUcgbGVuZ3RoIGVycm9yIGF0ICcgKyBjaHVuay5kYXRhc2l6ZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgaGV2Yy9hdmMgdmlkZW8gZGF0YVxuICAgKiBAcGFyYW0gY2h1bmtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZUhldmNEYXRhIChjaHVuaykge1xuICAgIC8vIGhlYWRlclxuICAgIGxldCBpbmZvID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBjaHVuay5mcmFtZVR5cGUgPSAoaW5mbyAmIDB4ZjApID4+PiA0XG4gICAgY2h1bmsuaXNLZXlmcmFtZSA9IGNodW5rLmZyYW1lVHlwZSA9PT0gMVxuICAgIC8vIGxldCB0ZW1wQ29kZWNJRCA9IHRoaXMudHJhY2tzLnZpZGVvVHJhY2suY29kZWNJRFxuICAgIGxldCBjb2RlY0lEID0gaW5mbyAmIDB4MGZcbiAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLmNvZGVjSUQgPSBjb2RlY0lEXG5cbiAgICAvLyBoZXZj5ZKMYXZj55qEaGVhZGVy6Kej5p6Q5pa55byP5LiA5qC3XG4gICAgY2h1bmsuYXZjUGFja2V0VHlwZSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdXG4gICAgY2h1bmsuY3RzID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwgMylcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuXG4gICAgLy8gMTIgZm9yIGhldmMsIDcgZm9yIGF2Y1xuICAgIGlmIChjb2RlY0lEID09PSAxMikge1xuICAgICAgY29uc3QgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gNSlcbiAgICAgIGNodW5rLmRhdGEgPSBkYXRhXG5cbiAgICAgIGlmIChOdW1iZXIucGFyc2VJbnQoY2h1bmsuYXZjUGFja2V0VHlwZSkgIT09IDApIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKHRoaXMuVEFHLCBgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7Y2h1bmsuZGF0YXNpemV9YClcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmFsdSA9IHt9XG4gICAgICAgIGxldCByID0gMFxuICAgICAgICBuYWx1LmN0cyA9IGNodW5rLmN0c1xuICAgICAgICBuYWx1LmR0cyA9IGNodW5rLmR0c1xuICAgICAgICB3aGlsZSAoY2h1bmsuZGF0YS5sZW5ndGggPiByKSB7XG4gICAgICAgICAgbGV0IHNpemVzID0gY2h1bmsuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQociksIDQgKyByKVxuICAgICAgICAgIG5hbHUuc2l6ZSA9IHNpemVzWzNdXG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzJdICogMjU2XG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzFdICogMjU2ICogMjU2XG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzBdICogMjU2ICogMjU2ICogMjU2XG4gICAgICAgICAgciArPSA0XG4gICAgICAgICAgbmFsdS5kYXRhID0gY2h1bmsuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQociksIG5hbHUuc2l6ZSArIHIpXG4gICAgICAgICAgciArPSBuYWx1LnNpemVcbiAgICAgICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChuYWx1KVxuICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKE51bWJlci5wYXJzZUludChjaHVuay5hdmNQYWNrZXRUeXBlKSA9PT0gMCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKSkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsIGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2RlY0lEID09PSA3KSB7XG4gICAgICBsZXQgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gNSlcbiAgICAgIGlmIChkYXRhWzRdID09PSAwICYmIGRhdGFbNV0gPT09IDAgJiYgZGF0YVs2XSA9PT0gMCAmJiBkYXRhWzddID09PSAxKSB7XG4gICAgICAgIGxldCBhdmNjbGVuZ3RoID0gMFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgIGF2Y2NsZW5ndGggPSBhdmNjbGVuZ3RoICogMjU2ICsgZGF0YVtpXVxuICAgICAgICB9XG4gICAgICAgIGF2Y2NsZW5ndGggLT0gNFxuICAgICAgICBkYXRhID0gZGF0YS5zbGljZSg0LCBkYXRhLmxlbmd0aClcbiAgICAgICAgZGF0YVszXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgYXZjY2xlbmd0aCA9IChhdmNjbGVuZ3RoIC0gZGF0YVszXSkgLyAyNTZcbiAgICAgICAgZGF0YVsyXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgYXZjY2xlbmd0aCA9IChhdmNjbGVuZ3RoIC0gZGF0YVsyXSkgLyAyNTZcbiAgICAgICAgZGF0YVsxXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgZGF0YVswXSA9IChhdmNjbGVuZ3RoIC0gZGF0YVsxXSkgLyAyNTZcbiAgICAgIH1cblxuICAgICAgY2h1bmsuZGF0YSA9IGRhdGFcbiAgICAgIC8vIElmIGl0IGlzIEFWQyBzZXF1ZWNlIEhlYWRlci5cbiAgICAgIGlmIChjaHVuay5hdmNQYWNrZXRUeXBlID09PSAwKSB7XG4gICAgICAgIHRoaXMuX2F2Y1NlcXVlbmNlSGVhZGVyUGFyc2VyKGNodW5rLmRhdGEpXG4gICAgICAgIGxldCB2YWxpZGF0ZSA9IHRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKVxuICAgICAgICBpZiAodmFsaWRhdGUpIHtcbiAgICAgICAgICBpZiAodGhpcy5faGFzU2NyaXB0ICYmICF0aGlzLl9oYXNWaWRlb1NlcXVlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ3ZpZGVvJylcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2hhc1NjcmlwdCAmJiB0aGlzLl9oYXNWaWRlb1NlcXVlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLlZJREVPX01FVEFEQVRBX0NIQU5HRSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5faGFzVmlkZW9TZXF1ZW5jZSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKHRoaXMuVEFHLCBgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7Y2h1bmsuZGF0YXNpemV9YClcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmFja3MudmlkZW9UcmFjay5zYW1wbGVzLnB1c2goY2h1bmspXG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsIGB2aWRlbyBjb2RlaWQgaXMgJHtjb2RlY0lEfWApXG4gICAgICBjaHVuay5kYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSAxKVxuICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2NodW5rLmRhdGFzaXplfWApXG4gICAgICB9XG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChjaHVuaylcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgfVxuICAgIGRlbGV0ZSBjaHVuay50YWdUeXBlXG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgYXZjIG1ldGFkYXRhXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIgKGRhdGEpIHtcbiAgICBsZXQgdHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG5cbiAgICBpZiAoIXRyYWNrKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgaWYgKCF0cmFjay5tZXRhKSB7XG4gICAgICB0cmFjay5tZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKClcbiAgICB9XG4gICAgbGV0IG1ldGEgPSB0cmFjay5tZXRhXG5cbiAgICBtZXRhLmNvbmZpZ3VyYXRpb25WZXJzaW9uID0gZGF0YVswXVxuICAgIG1ldGEuYXZjUHJvZmlsZUluZGljYXRpb24gPSBkYXRhWzFdXG4gICAgbWV0YS5wcm9maWxlQ29tcGF0aWJpbGl0eSA9IGRhdGFbMl1cbiAgICBtZXRhLmF2Y0xldmVsSW5kaWNhdGlvbiA9IGRhdGFbM10gLyAxMFxuICAgIG1ldGEubmFsVW5pdExlbmd0aCA9IChkYXRhWzRdICYgMHgwMykgKyAxXG5cbiAgICBsZXQgbnVtT2ZTcHMgPSBkYXRhWzVdICYgMHgxZlxuICAgIG9mZnNldCA9IDZcbiAgICBsZXQgY29uZmlnID0ge31cblxuICAgIC8vIHBhcnNlIFNQU1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZTcHM7IGkrKykge1xuICAgICAgbGV0IHNpemUgPSBkYXRhW29mZnNldF0gKiAyNTUgKyBkYXRhW29mZnNldCArIDFdXG4gICAgICBvZmZzZXQgKz0gMlxuXG4gICAgICBsZXQgc3BzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHNwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cblxuICAgICAgLy8gY29kZWMgc3RyaW5nXG4gICAgICBsZXQgY29kZWNTdHJpbmcgPSAnYXZjMS4nXG4gICAgICBmb3IgKGxldCBqID0gMTsgaiA8IDQ7IGorKykge1xuICAgICAgICBsZXQgaCA9IHNwc1tqXS50b1N0cmluZygxNilcbiAgICAgICAgaWYgKGgubGVuZ3RoIDwgMikge1xuICAgICAgICAgIGggPSAnMCcgKyBoXG4gICAgICAgIH1cbiAgICAgICAgY29kZWNTdHJpbmcgKz0gaFxuICAgICAgfVxuXG4gICAgICBtZXRhLmNvZGVjID0gY29kZWNTdHJpbmdcblxuICAgICAgb2Zmc2V0ICs9IHNpemVcbiAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YS5zcHMgPSBzcHNcbiAgICAgIGNvbmZpZyA9IFNQU1BhcnNlci5wYXJzZVNQUyhzcHMpXG4gICAgfVxuXG4gICAgbGV0IG51bU9mUHBzID0gZGF0YVtvZmZzZXRdXG5cbiAgICBvZmZzZXQrK1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PZlBwczsgaSsrKSB7XG4gICAgICBsZXQgc2l6ZSA9IGRhdGFbb2Zmc2V0XSAqIDI1NSArIGRhdGFbb2Zmc2V0ICsgMV1cbiAgICAgIG9mZnNldCArPSAyXG4gICAgICBsZXQgcHBzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHBwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSBzaXplXG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLm1ldGEucHBzID0gcHBzXG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihtZXRhLCBTUFNQYXJzZXIudG9WaWRlb01ldGEoY29uZmlnKSlcblxuICAgIC8vIGZpbGwgdmlkZW8gbWVkaWEgaW5mb1xuICAgIGNvbnN0IHZpZGVvTWVkaWEgPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby52aWRlb1xuXG4gICAgdmlkZW9NZWRpYS5jb2RlYyA9IG1ldGEuY29kZWNcbiAgICB2aWRlb01lZGlhLnByb2ZpbGUgPSBtZXRhLnByb2ZpbGVcbiAgICB2aWRlb01lZGlhLmxldmVsID0gbWV0YS5sZXZlbFxuICAgIHZpZGVvTWVkaWEuY2hyb21hRm9ybWF0ID0gbWV0YS5jaHJvbWFGb3JtYXRcbiAgICB2aWRlb01lZGlhLmZyYW1lUmF0ZSA9IG1ldGEuZnJhbWVSYXRlXG4gICAgdmlkZW9NZWRpYS5wYXJSYXRpbyA9IG1ldGEucGFyUmF0aW9cbiAgICB2aWRlb01lZGlhLndpZHRoID0gdmlkZW9NZWRpYS53aWR0aCA9PT0gbWV0YS5wcmVzZW50V2lkdGggPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50V2lkdGhcbiAgICB2aWRlb01lZGlhLmhlaWdodCA9IHZpZGVvTWVkaWEuaGVpZ2h0ID09PSBtZXRhLnByZXNlbnRIZWlnaHQgPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50SGVpZ2h0XG5cbiAgICBtZXRhLmR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gKiBtZXRhLnRpbWVzY2FsZVxuICAgIG1ldGEuYXZjYyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKVxuICAgIG1ldGEuYXZjYy5zZXQoZGF0YSlcbiAgICB0cmFjay5tZXRhID0gbWV0YVxuICB9XG5cbiAgLyoqXG4gICAqIGNob29zZSBhdWRpbyBzYW1wbGUgcmF0ZVxuICAgKiBAcGFyYW0gc2FtcGxpbmdGcmVxdWVuY3lJbmRleFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvU2FtcGxlUmF0ZSAoc2FtcGxpbmdGcmVxdWVuY3lJbmRleCkge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3QgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gc2FtcGxpbmcgZnJlcXVlbmNlXG4gICAqIEBwYXJhbSBpbmZvXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3dpdGNoQXVkaW9TYW1wbGluZ0ZyZXF1ZW5jeSAoaW5mbykge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4ID0gKGluZm8gJiAxMikgPj4+IDJcbiAgICBsZXQgc2FtcGxpbmdGcmVxdWVuY3lMaXN0ID0gWzU1MDAsIDExMDI1LCAyMjA1MCwgNDQxMDAsIDQ4MDAwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gY2hhbm5lbCBjb3VudFxuICAgKiBAcGFyYW0gaW5mb1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvQ2hhbm5lbCAoaW5mbykge1xuICAgIGxldCBzYW1wbGVUcmFja051bUluZGV4ID0gaW5mbyAmIDFcbiAgICBsZXQgc2FtcGxlVHJhY2tOdW1MaXN0ID0gWzEsIDJdXG4gICAgcmV0dXJuIHNhbXBsZVRyYWNrTnVtTGlzdFtzYW1wbGVUcmFja051bUluZGV4XVxuICB9XG5cbiAgLyoqXG4gICAqIGNoZWNrIGRhdGFzaXplIGlzIHZhbGlkIHVzZSA0IEJ5dGUgYWZ0ZXIgY3VycmVudCB0YWdcbiAgICogQHBhcmFtIGRhdGFzaXplXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RhdGFzaXplVmFsaWRhdG9yIChkYXRhc2l6ZSkge1xuICAgIGxldCBkYXRhc2l6ZUNvbmZpcm0gPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludCgwLCA0KVxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpXG4gICAgcmV0dXJuIGRhdGFzaXplQ29uZmlybSA9PT0gZGF0YXNpemUgKyAxMVxuICB9XG5cbiAgZ2V0IGxvYWRlckJ1ZmZlciAoKSB7XG4gICAgaWYgKHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0xPQURFUl9CVUZGRVInKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0xPQURFUl9CVUZGRVInKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBuZXcgRXJyb3IoJ+aJvuS4jeWIsCBsb2FkZXJCdWZmZXIg5a6e5L6LJykpXG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gIH1cblxuICBnZXQgbG9nZ2VyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTE9HR0VSJylcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGbHZEZW11eGVyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuY2xhc3MgVVRGOCB7XG4gICAgc3RhdGljIGRlY29kZSh1aW50OGFycmF5KSB7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICBjb25zdCBpbnB1dCA9IHVpbnQ4YXJyYXk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdWludDhhcnJheS5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dFtpXSA8IDB4ODApIHtcbiAgICAgICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGlucHV0W2ldKSk7XG4gICAgICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4QzApIHtcbiAgICAgICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RTApIHtcbiAgICAgICAgICAgICAgICBpZiAoVVRGOC5fY2hlY2tDb250aW51YXRpb24oaW5wdXQsIGksIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVjczQgPSAoaW5wdXRbaV0gJiAweDFGKSA8PCA2IHwgKGlucHV0W2kgKyAxXSAmIDB4M0YpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodWNzNCA+PSAweDgwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHVjczQgJiAweEZGRkYpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RjApIHtcbiAgICAgICAgICAgICAgICBpZiAoVVRGOC5fY2hlY2tDb250aW51YXRpb24oaW5wdXQsIGksIDIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVjczQgPSAoaW5wdXRbaV0gJiAweEYpIDw8IDEyIHwgKGlucHV0W2kgKyAxXSAmIDB4M0YpIDw8IDYgfCBpbnB1dFtpICsgMl0gJiAweDNGO1xuICAgICAgICAgICAgICAgICAgICBpZiAodWNzNCA+PSAweDgwMCAmJiAodWNzNCAmIDB4RjgwMCkgIT09IDB4RDgwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEY4KSB7XG4gICAgICAgICAgICAgICAgaWYgKFVURjguX2NoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAzKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdWNzNCA9IChpbnB1dFtpXSAmIDB4NykgPDwgMTggfCAoaW5wdXRbaSArIDFdICYgMHgzRikgPDwgMTIgfFxuICAgICAgICAgICAgICAgICAgICAgICAgKGlucHV0W2kgKyAyXSAmIDB4M0YpIDw8IDYgfCAoaW5wdXRbaSArIDNdICYgMHgzRik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1Y3M0ID4gMHgxMDAwMCAmJiB1Y3M0IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVjczQgLT0gMHgxMDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHVjczQgPj4+IDEwKSB8IDB4RDgwMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgodWNzNCAmIDB4M0ZGKSB8IDB4REMwMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkZGRCkpO1xuICAgICAgICAgICAgKytpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dC5qb2luKCcnKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgX2NoZWNrQ29udGludWF0aW9uKHVpbnQ4YXJyYXksIHN0YXJ0LCBjaGVja0xlbmd0aCkge1xuICAgICAgICBsZXQgYXJyYXkgPSB1aW50OGFycmF5O1xuICAgICAgICBpZiAoc3RhcnQgKyBjaGVja0xlbmd0aCA8IGFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgd2hpbGUgKGNoZWNrTGVuZ3RoLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoKGFycmF5Wysrc3RhcnRdICYgMHhDMCkgIT09IDB4ODApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVVEY4OyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV94Z3BsYXllcl9fOyJdLCJzb3VyY2VSb290IjoiIn0=