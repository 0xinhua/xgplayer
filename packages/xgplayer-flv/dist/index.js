!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("xgplayer")):"function"==typeof define&&define.amd?define(["xgplayer"],t):"object"==typeof exports?exports["xgplayer-flv"]=t(require("xgplayer")):e["xgplayer-flv"]=t(e.xgplayer)}(window,(function(e){return function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../xgplayer-flv-live/dist/index.js":
/*!****************************!*\
  !*** .-live/dist/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){"use strict";var s;window,e.exports=(s=i(/*! xgplayer */"xgplayer"),function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../../node_modules/events/events.js":
/*!*****************************************************************************************!*\
      !*** /Users/leonardo/Documents/front-end/player/xgplayer/node_modules/events/events.js ***!
      \*****************************************************************************************/
/*! no static exports found */function(e,t,i){var s,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};s=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var d=10;function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function h(e,t,i,s){var r,a,n,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),n=a[t]),void 0===n)n=a[t]=i,++e._eventsCount;else if("function"==typeof n?n=a[t]=s?[i,n]:[n,i]:s?n.unshift(i):n.push(i),(r=l(e))>0&&n.length>r&&!n.warned){n.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=t,d.count=n.length,o=d,console&&console.warn&&console.warn(o)}return e}function u(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function c(e,t,i){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=u.bind(s);return r.listener=i,s.wrapFn=r,r}function f(e,t,i){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):m(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function m(e,t){for(var i=new Array(t),s=0;s<t;++s)i[s]=e[s];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return d},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");d=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var s="error"===e,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var d=r[e];if(void 0===d)return!1;if("function"==typeof d)a(d,this,t);else{var l=d.length,h=m(d,l);for(i=0;i<l;++i)a(h[i],this,t)}return!0},o.prototype.addListener=function(e,t){return h(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return h(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,s,r,a,n;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(s=this._events))return this;if(void 0===(i=s[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(r=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){n=i[a].listener,r=a;break}if(r<0)return this;0===r?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,r),1===i.length&&(s[e]=i[0]),void 0!==s.removeListener&&this.emit("removeListener",e,n||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,i,s;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,a=Object.keys(i);for(s=0;s<a.length;++s)"removeListener"!==(r=a[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},"../xgplayer-buffer/index.js":
/*!***********************************!*\
      !*** ../xgplayer-buffer/index.js ***!
      \***********************************/
/*! no static exports found */function(e,t,i){e.exports={Track:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:i(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").default}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
      !*** ../xgplayer-buffer/src/buffer.js ***!
      \****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let s=this.array[0].slice(this.offset,this.offset+e);t.set(s,i),this.offset+=e,this.length-=e,e=0;break}{let s=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=s,this.length-=s,e-=s}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,s=this.offset+e;for(;s<this.offset+t+e;)s<this.array[0].length?i=256*i+this.array[0][s]:this.array[1]&&(i=256*i+this.array[1][s-this.array[0].length]),s++;return i}},t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
      !*** ../xgplayer-buffer/src/presouce.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new s,this.sources[e]}clear(){this.sources={}}destroy(){this.sources={}}}},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
      !*** ../xgplayer-buffer/src/track.js ***!
      \***************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=s,t.AudioTrack=class extends s{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}},t.VideoTrack=class extends s{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}},t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}destroy(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-codec/index.js":
/*!**********************************!*\
      !*** ../xgplayer-codec/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Nalunit:i(/*! ./src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js").default,SpsParser:i(/*! ./src/h264/nalunit/sps */"../xgplayer-codec/src/h264/nalunit/sps.js").default,Compatibility:i(/*! ./src/compatibility */"../xgplayer-codec/src/compatibility.js").default}},"../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
      !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{static getSilentFrame(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},"../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
      !*** ../xgplayer-codec/src/compatibility.js ***!
      \**********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=(s=i(/*! ./aac/aac-helper */"../xgplayer-codec/src/aac/aac-helper.js"))&&s.__esModule?s:{default:s};const{REMUX_EVENTS:n,LOADER_EVENTS:o}=r.EVENTS;class d{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[],this.videoLastSample=null,this.audioLastSample=null,this._videoLargeGap=0,this._audioLargeGap=0}init(){this.before(n.REMUX_MEDIA,this.doFix.bind(this)),this.on(o.LOADER_COMPLETE,()=>{this.videoLastSample&&this.videoTrack.samples.unshift(this.videoLastSample)})}reset(){this.nextAudioDts=null,this.nextVideoDts=null,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.videoLastSample=null,this.audioLastSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:e,isFirstVideoSamples:t}=this.getFirstSample();this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples);const{changed:i,changedIdx:s}=d.detactChangeStream(this.videoTrack.samples);i&&!e?this.fixChangeStreamVideo(s):this.doFixVideo(t);const{changed:r,changedIdx:a}=d.detactChangeStream(this.audioTrack.samples);r?this.fixChangeStreamAudio(a):this.doFixAudio(e),this.removeInvalidSamples()}doFixVideo(e,t){let{samples:i,meta:s}=this.videoTrack;for(let e=0,t=i.length;e<t;e++){const t=i[e];t.originDts=t.dts}if(s.frameRate&&!1===s.frameRate.fixed)return;if(!i||!i.length||!this._firstVideoSample)return;const r=i[0];if(this._videoLargeGap>0&&d.doFixLargeGap(i,this._videoLargeGap),r.dts!==this._firstVideoSample.dts&&t&&(t&&(this.nextVideoDts=t),this._videoLargeGap=this.nextVideoDts-r.dts,d.doFixLargeGap(i,this._videoLargeGap)),e&&this._firstAudioSample){const e=this._firstVideoSample.originDts,t=e-this._firstAudioSample.originDts;if(t>2*s.refSampleDuration){const a=Math.floor(t/s.refSampleDuration);for(let t=0;t<a;t++){const a=Object.assign({},r);a.dts=e-(t+1)*s.refSampleDuration,a.pts=a.dts+a.cts,i.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}}else t<-2*s.refSampleDuration&&(this._videoLargeGap=-1*t,d.doFixLargeGap(i,-1*t))}const a=i.pop();if(i.length&&(i[i.length-1].duration=a.dts-i[i.length-1].dts),this.videoLastSample){const e=this.videoLastSample;e.duration=r.dts-e.dts,i.unshift(this.videoLastSample)}this.videoLastSample=a,this.videoTrack.samples=i}doFixAudio(e,t){let{samples:i,meta:s}=this.audioTrack;if(!i||!i.length)return;for(let e=0,t=i.length;e<t;e++){const t=i[e];t.originDts=t.dts}const r=i.length,n=a.default.getSilentFrame(s.codec,s.channelCount),o=this._firstAudioSample,l=i[0];if(this._audioLargeGap>0&&d.doFixLargeGap(i,this._audioLargeGap),l.dts!==this._firstAudioSample.dts&&(t||d.detectLargeGap(this.nextAudioDts,l))&&(t&&(this.nextAudioDts=t),this._audioLargeGap=this.nextAudioDts-l.dts,d.doFixLargeGap(i,this._audioLargeGap)),this._firstVideoSample&&e){const e=this._firstVideoSample.originDts,t=o.dts-e;if(t>s.refSampleDuration){const t=Math.floor((o.dts-e)/s.refSampleDuration);for(let e=0;e<t;e++){const t={data:n,datasize:n.byteLength,dts:o.dts-(e+1)*s.refSampleDuration,filtered:0};i.unshift(t),this.filledAudioSamples.push({dts:t.dts,size:t.data.byteLength})}}else t<-1*s.refSampleDuration&&(this._audioLargeGap=-1*t,d.doFixLargeGap(i,-1*t))}let h;const u=i[0].dts;if(this.nextAudioDts){h=u-this.nextAudioDts;const e=Math.abs(h);if(e>s.refSampleDuration&&1===r&&1===this.lastAudioSamplesLen&&(s.refSampleDurationFixed=void 0),h>2*s.refSampleDuration&&h<10*s.refSampleDuration)if(1===r&&1===this.lastAudioSamplesLen)s.refSampleDurationFixed=void 0!==s.refSampleDurationFixed?s.refSampleDurationFixed+h:s.refSampleDuration+h;else{const e=Math.floor(h/s.refSampleDuration);for(let t=0;t<e;t++){const e=u-(t+1)*s.refSampleDuration,r=Object.assign({},i[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else e<=s.refSampleDuration&&e>0?(i[0].dts=this.nextAudioDts,i[0].pts=this.nextAudioDts):h<0&&d.doFixLargeGap(i,-1*h)}const c=i[i.length-1].originDts,f=i[i.length-1].originDts,p=i.length>=2?c-i[i.length-2].originDts:s.refSampleDuration;this.lastAudioSamplesLen=r,this.nextAudioDts=s.refSampleDurationFixed?f+s.refSampleDurationFixed:f+p,this.lastAudioDts=f,i[i.length-1].duration=p;for(let e=0,t=i.length;e<t;e++){const t=i[e],s=i[e+1];if(!s)break;const r=s.dts-t.dts;i[e].duration=r}this.audioTrack.samples=d.sortAudioSamples(i)}fixChangeStreamVideo(e){const{samples:t,meta:i}=this.videoTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixVideo(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.videoTrack.samples=t.slice(0,e),this.doFixVideo(!1),this.videoTrack.samples=t.slice(e),this.doFixVideo(!1,l),this.videoTrack.samples=a.concat(n)}fixChangeStreamAudio(e){const{samples:t,meta:i}=this.audioTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixAudio(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.audioTrack.samples=a,this.doFixAudio(!1),this.audioTrack.samples=n,this.doFixAudio(!1,l),this.audioTrack.samples=a.concat(n)}getFirstSample(){let{samples:e}=this.videoTrack,{samples:t}=this.audioTrack,i=!1,s=!1;return!this._firstVideoSample&&e.length&&(this._firstVideoSample=d.findFirstVideoSample(e),i=!0),!this._firstAudioSample&&t.length&&(this._firstAudioSample=d.findFirstAudioSample(t),s=!0),{isFirstVideoSamples:i,isFirstAudioSamples:s}}fixRefSampleDuration(e,t){const i="video"===e.type,s=i?this.allVideoSamplesCount:this.allAudioSamplesCount,r=i?this._firstVideoSample.dts:this._firstAudioSample.dts,a=i?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration)){if(t.length>=1){const i=t[t.length-1].dts;e.refSampleDuration=Math.floor((i-r)/(s+a-1))}}else if(e.refSampleDuration&&t.length>=5){const i=(t[t.length-1].dts-t[0].dts)/(t.length-1);e.refSampleDuration=Math.floor(Math.abs(e.refSampleDuration-i)<=5?e.refSampleDuration:i)}}recordSamplesCount(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}removeInvalidSamples(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter((e,i)=>e===t||e.dts>t.dts),this.videoTrack.samples=this.videoTrack.samples.filter((t,i)=>t===e||t.dts>e.dts)}getStreamChangeStart(e){return e.options&&e.options.start?e.options.start-this.dtsBase:1/0}static sortAudioSamples(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}static findFirstAudioSample(e){return e&&0!==e.length?d.sortAudioSamples(e)[0]:null}static findFirstVideoSample(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,i=t.length;e<i;e++)if(t[e].isKeyframe)return t[e]}static detectLargeGap(e,t){if(null===e)return;const i=t.dts||0,s=e-i>=1e3||i-e>=1e3,r=t.options&&t.options.discontinue;return s||r}static doFixLargeGap(e,t){for(let i=0,s=e.length;i<s;i++){const s=e[i];s.dts+=t,s.pts&&(s.pts+=t)}}static detactChangeStream(e){let t=!1,i=-1;for(let s=0,r=e.length;s<r;s++)if(e[s].options&&e[s].options.meta){t=!0,i=s;break}return{changed:t,changedIdx:i}}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks&&this.tracks.audioTrack?this.tracks.audioTrack:{samples:[],meta:{}}}get videoTrack(){return this.tracks&&this.tracks.videoTrack?this.tracks.videoTrack:{samples:[],meta:{}}}get dtsBase(){const e=this._context.getInstance("MP4_REMUXER");return e?e._dtsBase:0}}t.default=d},"../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){let t=Math.min(this._currentWordBitsLeft,e),i=this._currentWord>>>32-t;if(e>32)throw new Error("Cannot read more than 32 bits at a time");return this._currentWordBitsLeft-=t,this._currentWordBitsLeft>0?this._currentWord<<=t:this._totalBytes-this._bufferIndex>0&&this._fillCurrentWord(),(t=e-t)>0&&this._currentWordBitsLeft?i<<t|this.readBits(t):i}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
      \***************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./sps */"../xgplayer-codec/src/h264/nalunit/sps.js"))&&s.__esModule?s:{default:s};class a{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,i=e.position;return 1===t.getInt32(i)||0===t.getInt16(i)&&1===t.getInt8(i+2)?a.getAnnexbNals(e):a.getAvccNals(e)}static getAnnexbNals(e){let t=[],i=a.getHeaderPositionAnnexB(e),s=i.pos,r=s;for(;s<e.length-4;){let n=e.buffer.slice(s,s+i.headerLength);i.pos===e.position&&e.skip(i.headerLength),r=(i=a.getHeaderPositionAnnexB(e)).pos;let o={header:n,body:new Uint8Array(e.buffer.slice(s+n.byteLength,r))};a.analyseNal(o),t.push(o),e.skip(r-e.position),s=r}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let i=e.dataview.getInt32();if(!(e.length-e.position>=i))break;{let s=e.buffer.slice(e.position,e.position+4);e.skip(4);let r=e.buffer.slice(e.position,e.position+i);e.skip(i);let n={header:s,body:r};a.analyseNal(n),t.push(n)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=r.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,i=0;for(;3!==i&&4!==i&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?i=4:1===e.dataview.getInt8(t+2)?i=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(i=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?i=3:t=e.length)),{pos:t,headerLength:i}}static getAvcc(e,t){let i=new Uint8Array(e.byteLength+t.byteLength+11);i[0]=1,i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=255,i[5]=225;let s=6;return i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),s),s+=2,i.set(e,s),i[s+=e.byteLength]=1,s++,i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),s),s+=2,i.set(t,s),i}}t.default=a},"../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
      \*************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./golomb */"../xgplayer-codec/src/h264/nalunit/golomb.js"))&&s.__esModule?s:{default:s};class a{static _ebsp2rbsp(e){let t=e,i=t.byteLength,s=new Uint8Array(i),r=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(s[r]=t[e],r++);return new Uint8Array(s.buffer,0,r)}static parseSPS(e){let t=a._ebsp2rbsp(e),i=new r.default(t);i.readByte();let s=i.readByte();i.readByte();let n=i.readByte();i.readUEG();let o=a.getProfileString(s),d=a.getLevelString(n),l=1,h=420,u=8;if((100===s||110===s||122===s||244===s||44===s||83===s||86===s||118===s||128===s||138===s||144===s)&&(3===(l=i.readUEG())&&i.readBits(1),l<=3&&(h=[0,420,422,444][l]),u=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==l?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?a._skipScalingList(i,16):a._skipScalingList(i,64))}i.readUEG();let c=i.readUEG();if(0===c)i.readUEG();else if(1===c){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let f=i.readUEG(),p=i.readUEG(),m=i.readBits(1);0===m&&i.readBits(1),i.readBits(1);let g=0,_=0,y=0,E=0;i.readBool()&&(g=i.readUEG(),_=i.readUEG(),y=i.readUEG(),E=i.readUEG());let v=1,A=1,S=0,T=!0,b=0,x=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],s=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(v=t[e-1],A=s[e-1]):255===e&&(v=i.readByte()<<8|i.readByte(),A=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);T=i.readBool(),S=(b=t)/(x=2*e)}}let w=1;1===v&&1===A||(w=v/A);let R=0,D=0;0===l?(R=1,D=2-m):(R=3===l?1:2,D=(1===l?2:1)*(2-m));let L=16*(f+1),O=16*(p+1)*(2-m);L-=(g+_)*R,O-=(y+E)*D;let M=Math.ceil(L*w);return i.destroy(),i=null,{profile_string:o,level_string:d,bit_depth:u,chroma_format:h,chroma_format_string:a.getChromaFormatString(h),frame_rate:{fixed:T,fps:S,fps_den:x,fps_num:b},par_ratio:{width:v,height:A},codec_size:{width:L,height:O},present_size:{width:M,height:O}}}static _skipScalingList(e,t){let i=8,s=8,r=0;for(let a=0;a<t;a++)0!==s&&(s=(i+(r=e.readSEG())+256)%256),i=0===s?i:s}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},t.frameRate=e.frame_rate;let i=t.frameRate.fps_den,s=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/s))}}t.default=a},"../xgplayer-demux/index.js":
/*!**********************************!*\
      !*** ../xgplayer-demux/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={M3U8Parser:i(/*! ./src/hls/demuxer/m3u8parser */"../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,TsDemuxer:i(/*! ./src/hls/demuxer/ts */"../xgplayer-demux/src/hls/demuxer/ts.js").default,Playlist:i(/*! ./src/hls/playlist */"../xgplayer-demux/src/hls/playlist.js").default,FlvDemuxer:i(/*! ./src/flv/index */"../xgplayer-demux/src/flv/index.js").default}},"../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
      !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};t.default=class{constructor(){this.offset=0,this.readOffset=this.offset}resolve(e,t){if(t<3)throw new Error("not enough data for metainfo");const i={},s=this.parseValue(e),r=this.parseValue(e,t-s.bodySize);return i[s.data]=r.data,this.resetStatus(),i}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(e){const t=new DataView(e,this.readOffset).getUint16(0,!s.isLe);let i="";i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}parseDate(e,t){const i=new DataView(e,this.readOffset,t);let r=i.getFloat64(0,!s.isLe);return r+=60*i.getInt16(8,!s.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(e,t){const i=this.parseString(e,t),s=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:s.data},bodySize:i.bodySize+s.bodySize,isObjEnd:s.isObjEnd}}parseLongString(e){const t=new DataView(e,this.readOffset).getUint32(0,!s.isLe);let i="";return i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}parseValue(e,t){let i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:d,MIX_ARRAY:l,OBJECT_END:h,STRICT_ARRAY:u,DATE:c,LONE_STRING:f}=r,p=new DataView(i,this.readOffset,t);let m=!1;const g=p.getUint8(0);let _=1;this.readOffset+=1;let y=null;switch(g){case a:y=p.getFloat64(1,!s.isLe),this.readOffset+=8,_+=8;break;case n:y=!!p.getUint8(1),this.readOffset+=1,_+=1;break;case o:{const e=this.parseString(i);y=e.data,_+=e.bodySize;break}case d:{y={};let e=0;for(16777215&p.getUint32(t-4,!s.isLe)&&(e=3);_<t-4;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(this.readOffset+=3,_+=3);break}case l:{y={},_+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!s.isLe))&&(e=3);_<t-8;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(_+=3,this.readOffset+=3);break}case h:y=null,m=!0;break;case u:{y=[];const e=p.getUint32(1,!s.isLe);_+=4,this.readOffset+=4;for(let s=0;s<e;s++){const e=this.parseValue(i,t-_);y.push(e.data),_+=e.bodySize}break}case c:{const e=this.parseDate(i,t-1);y=e.data,_+=e.bodySize;break}case f:{const e=this.parseLongString(i,t-1);y=e.data,_+=e.bodySize;break}default:_=t}return{data:y,bodySize:_,isObjEnd:m}}}},"../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
      !*** ../xgplayer-demux/src/flv/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),n=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=(s=i(/*! ./amf-parser */"../xgplayer-demux/src/flv/amf-parser.js"))&&s.__esModule?s:{default:s};const d=r.EVENTS.DEMUX_EVENTS;class l{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(d.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}static getPlayType(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e,t=1e4;do{e=this._parseFlvTag()}while(e&&t-- >0);this.emit(d.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}parseFlvHeader(e){if(l.isFlvFile(e)){this._firstFragmentLoaded=!0;const t=l.getPlayType(e[4]);t.hasVideo&&this.initVideoTrack(),t.hasAudio&&this.initAudioTrack()}else this.emit(d.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let e=new n.VideoTrack;e.meta=new r.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}initAudioTrack(){this._trackNum++;let e=new n.AudioTrack;e.meta=new r.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}_parseFlvTagHeader(){let e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.emit(d.DEMUX_ERROR,this.TAG,new Error("tagType "+t.tagType),!1),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let s=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(s+=16777216*r),t.dts=s,this.loaderBuffer.shift(3),t}_processChunk(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(e){let t=this.tracks.audioTrack,i=this.tracks.videoTrack,s=this.loaderBuffer.shift(e.datasize);const r=(new o.default).resolve(s,s.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(d.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(a.audiosamplerate&&(e.sampleRate=a.audiosamplerate),a.audiochannels&&(e.channelCount=a.audiochannels),a.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){let e=i.meta;if("number"==typeof a.framerate){let t=Math.floor(1e3*a.framerate);if(t>0){let i=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=i,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let i,s,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,s=new Array(4),i=a-3):(t.objectType=2,s=new Array(2),i=a):-1!==r.indexOf("android")?(t.objectType=2,s=new Array(2),i=a):(t.objectType=5,i=t.sampleRateIndex,s=new Array(4),t.sampleRateIndex>=6?i=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,s=new Array(2),i=t.sampleRateIndex)),s[0]=t.objectType<<3,s[0]|=(15&t.sampleRateIndex)>>>1,s[1]=(15&t.sampleRateIndex)<<7,s[1]|=(15&t.channelCount)<<3,5===t.objectType&&(s[1]|=(15&i)>>>1,s[2]=(1&i)<<7,s[2]|=8,s[3]=0),t.config=s,t}_parseAACData(e){let t=this.tracks.audioTrack;if(!t)return;let i=t.meta;i||(t.meta=new r.AudioTrackMeta,i=t.meta);let s=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let a=(240&s)>>>4;t.format=a,10!==a&&this.emit(d.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(s),i.sampleRateIndex=(12&s)>>>2,i.frameLenth=(2&s)>>>1,i.channelCount=1&s,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));let n=i.audioSampleRate,o=i.sampleRateIndex,l=i.refSampleDuration;delete e.tagType;let h=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);n=t.audiosamplerate||i.audioSampleRate,o=t.sampleRateIndex||i.sampleRateIndex,l=Math.floor(1024/n*i.timescale),i.channelCount=t.channelCount,i.sampleRate=n,i.sampleRateIndex=o,i.refSampleDuration=l,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=t.config;const s=this._context.mediaInfo.audio;s.codec=t.codec,s.channelCount=t.channelCount,s.sampleRate=n,s.sampleRateIndex=t.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(d.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&this.emit(d.AUDIO_METADATA_CHANGE),this._hasAudioSequence=!0,this._metaChange=!0}else this._metaChange&&(e.options={meta:t.meta},this._metaChange=!1),e.data=e.data.slice(1,e.data.length),t.samples.push(e);h||this.emit(d.DEMUX_ERROR,this.TAG,new Error("TAG length error at "+e.datasize),!1)}_parseHevcData(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);let t={},i=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>i;){let s=e.data.slice(Number.parseInt(i),4+i);t.size=s[3],t.size+=256*s[2],t.size+=256*s[1]*256,t.size+=256*s[0]*256*256,i+=4,t.data=e.data.slice(Number.parseInt(i),t.size+i),i+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(d.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(d.METADATA_PARSED,"video"):this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1))}else if(7===i){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let i=0;i<4;i++)e=256*e+t[i];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType)this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(d.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(d.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0),this._metaChange=!0;else{if(!this._datasizeValidator(e.datasize))return void this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);this._metaChange&&(e.options={meta:Object.assign({},this.tracks.videoTrack.meta)},this._metaChange=!1),this.tracks.videoTrack.samples.push(e)}}else this.emit(d.DEMUX_ERROR,this.TAG,new Error(`video codeid is ${i}`),!1),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1),this.tracks.videoTrack.samples.push(e),this.emit(d.DEMUX_COMPLETE);delete e.tagType}_avcSequenceHeaderParser(e){let t=this.tracks.videoTrack;if(!t)return;let i=0;t.meta||(t.meta=new r.VideoTrackMeta);let s=t.meta;s.configurationVersion=e[0],s.avcProfileIndication=e[1],s.profileCompatibility=e[2],s.avcLevelIndication=e[3]/10,s.nalUnitLength=1+(3&e[4]);let n=31&e[5];i=6;let o={};for(let t=0;t<n;t++){let t=255*e[i]+e[i+1];i+=2;let r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e[i+s];let n="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),n+=t}s.codec=n,i+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let d=e[i];i++;for(let t=0;t<d;t++){let t=255*e[i]+e[i+1];i+=2;let s=new Uint8Array(t);for(let r=0;r<t;r++)s[r]=e[i+r];i+=t,this.tracks.videoTrack.meta.pps=s}Object.assign(s,a.SpsParser.toVideoMeta(o));const l=this._context.mediaInfo.video;l.codec=s.codec,l.profile=s.profile,l.level=s.level,l.chromaFormat=s.chromaFormat,l.frameRate=s.frameRate,l.parRatio=s.parRatio,l.width=l.width===s.presentWidth?l.width:s.presentWidth,l.height=l.height===s.presentHeight?l.width:s.presentHeight,s.duration=this._context.mediaInfo.duration*s.timescale,s.avcc=new Uint8Array(e.length),s.avcc.set(e),t.meta=s}_switchAudioSampleRate(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}_switchAudioSamplingFrequency(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}_switchAudioChannel(e){return[1,2][1&e]}_datasizeValidator(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}get loaderBuffer(){const e=this._context.getInstance("LOADER_BUFFER");if(e)return e;this.emit(d.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}t.default=l},"../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
      !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
      \*******************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static parse(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i={duration:0};if(!e||!e.split)return;let r=e.split(/\r|\n/),a=(r=r.filter(e=>e)).shift();if(!a.match("#EXTM3U"))throw new Error('Invalid m3u8 file: not "#EXTM3U"');a=r.shift();let n=!1;for(;a;){let e=a.match(/#(.[A-Z|-]*):(.*)/),o=a.match(/#(.[A-Z|-]*)/);if(o&&e&&e.length>2)switch(e[1]){case"EXT-X-VERSION":i.version=parseInt(e[2]);break;case"EXT-X-MEDIA-SEQUENCE":i.sequence=parseInt(e[2]);break;case"EXT-X-TARGETDURATION":i.targetduration=parseFloat(e[2]);break;case"EXTINF":s.parseFrag(e,r,i,t,n),n=!1;break;case"EXT-X-KEY":s.parseDecrypt(e[2],i)}if(o&&o.length>1)switch(o[1]){case"EXT-X-DISCONTINUITY":n=!0}a=r.shift()}return i}static parseFrag(e,t,i,s,r){i.frags||(i.frags=[]);let a={start:i.duration,duration:1e3*parseFloat(e[2])};i.duration+=a.duration;let n=t.shift();n.match(/#(.*):(.*)/)&&(n=t.shift()),n.length>0&&"/"===n.charAt(0)&&s.match(/.*\/\/.*\.\w+/g)&&(s=s.match(/.*\/\/.*\.\w+/g)[0]),n.match(/.*:\/\/.*/)?a.url=n:a.url=s+n,a.discontinue=r,i.frags.push(a)}static parseURL(e){let t="",i=e.match(/(.*\/).*\.m3u8/);if(i&&i.length>0)for(let e=0;e<i.length;e++)i[e].match(/.*\/$/g)&&i[e].length>t.length&&(t=i[e]);return t}static parseDecrypt(e,t){t.encrypt={};let i=e.split(",");for(let e in i){let s=i[e];if(s.match(/METHOD=(.*)/)&&(t.encrypt.method=s.match(/METHOD=(.*)/)[1]),s.match(/URI="(.*)"/)&&(t.encrypt.uri=s.match(/URI="(.*)"/)[1]),s.match(/IV=0x(.*)/)){let e=s.match(/IV=0x(.*)/)[1],i=Math.ceil(e.length/2);t.encrypt.ivb=new Uint8Array(i);for(let s=i-1;s>=0;s--){let i=parseInt(e.substr(2*s,2),16);t.encrypt.ivb[s]=i}t.encrypt.iv=e}}}}t.default=s},"../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
      !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),r=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),a=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const n=a.EVENTS.DEMUX_EVENTS,o={1:["video","MPEG-1"],2:["video","MPEG-2"],27:["video","AVC.H264"],234:["video","VC-1"],3:["audio","MPEG-1"],4:["audio","MPEG-2"],15:["audio","MPEG-2.AAC"],17:["audio","MPEG-4.AAC"],128:["audio","LPCM"],129:["audio","AC3"],6:["audio","AC3"],130:["audio","DTS"],131:["audio","Dolby TrueHD"],132:["audio","AC3-Plus"],133:["audio","DTS-HD"],134:["audio","DTS-MA"],161:["audio","AC3-Plus-SEC"],162:["audio","DTS-HD-SEC"]};class d{constructor(e){this.configs=Object.assign({},e),this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}init(){this.on(n.DEMUX_START,this.demux.bind(this))}demux(e){if(this.demuxing)return;let t=this.inputBuffer,i={pat:[],pmt:[]},s={};for(;t.length>=188;){for(t.length>=1&&71!==t.array[0][t.offset]&&this.emit(n.DEMUX_ERROR,this.TAG,new Error(`Untrust sync code: ${t.array[0][t.offset]}, try to recover;`),!1);t.length>=1&&71!==t.array[0][t.offset];)t.shift(1);let e=t.shift(188),r=new a.Stream(e.buffer),o={};d.read(r,o,i),o.pes?(s[o.header.pid]||(s[o.header.pid]=[]),s[o.header.pid].push(o.pes),o.pes.ES.buffer=[o.pes.ES.buffer]):s[o.header.pid]&&s[o.header.pid][s[o.header.pid].length-1].ES.buffer.push(o.payload.stream)}let r=e,o=e;for(let e=0;e<Object.keys(s).length;e++){let t=s[Object.keys(s)[e]];for(let i=0;i<t.length;i++)t[i].id=Object.keys(s)[e],t[i].ES.buffer=d.Merge(t[i].ES.buffer),"audio"===t[i].type?(this.pushAudioSample(t[i],r),r={}):"video"===t[i].type&&(this.pushVideoSample(t[i],o),o={})}this._hasAudioMeta&&this.emit(n.DEMUX_COMPLETE,"audio"),this._hasVideoMeta&&this.emit(n.DEMUX_COMPLETE,"video")}pushAudioSample(e,t){let i;this._tracks.audioTrack?i=this._tracks.audioTrack:(this._tracks.audioTrack=new r.AudioTrack,i=this._tracks.audioTrack);let s=new a.AudioTrackMeta({audioSampleRate:e.ES.frequence,sampleRate:e.ES.frequence,channelCount:e.ES.channel,codec:"mp4a.40."+e.ES.audioObjectType,config:e.ES.audioConfig,id:2,sampleRateIndex:e.ES.frequencyIndex});s.refSampleDuration=Math.floor(1024/s.audioSampleRate*s.timescale);let o=d.compaireMeta(i.meta,s,!0);this._hasAudioMeta&&o||(i.meta=s,this._hasAudioMeta=!0,this.emit(n.METADATA_PARSED,"audio"));let l=new Uint8Array(e.ES.buffer.buffer.slice(e.ES.buffer.position,e.ES.buffer.length)),h=parseInt(e.pts/90),u=parseInt(e.pts/90),c=new a.AudioTrackSample({dts:h,pts:u,data:l,options:t});i.samples.push(c)}pushVideoSample(e,t){let i,o=s.Nalunit.getNalunits(e.ES.buffer),l=new a.VideoTrackMeta;this._tracks.videoTrack?i=this._tracks.videoTrack:(this._tracks.videoTrack=new r.VideoTrack,i=this._tracks.videoTrack);let h=0,u=!1,c=!1;for(let e=0;e<o.length;e++){let t=o[e];if(t.sps){u=t,i.sps=t.body,l.chromaFormat=u.sps.chroma_format,l.codec="avc1.";for(var f=1;f<4;f++){var p=u.body[f].toString(16);p.length<2&&(p="0"+p),l.codec+=p}l.codecHeight=u.sps.codec_size.height,l.codecWidth=u.sps.codec_size.width,l.frameRate=u.sps.frame_rate,l.id=1,l.level=u.sps.level_string,l.presentHeight=u.sps.present_size.height,l.presentWidth=u.sps.present_size.width,l.profile=u.sps.profile_string,l.refSampleDuration=Math.floor(l.timescale*(u.sps.frame_rate.fps_den/u.sps.frame_rate.fps_num)),l.sarRatio=u.sps.sar_ratio?u.sps.sar_ratio:u.sps.par_ratio}else t.pps?(i.pps=t.body,c=t):h+=4+t.body.byteLength}if(u&&c){l.avcc=s.Nalunit.getAvcc(u.body,c.body);let e=d.compaireMeta(i.meta,l,!0);this._hasVideoMeta&&e||(t?t.meta=Object.assign({},l):t={meta:Object.assign({},l)},i.meta=l,this._hasVideoMeta=!0,this.emit(n.METADATA_PARSED,"video"))}let m=new Uint8Array(h),g=0,_=!1;for(let e=0;e<o.length;e++){let t=o[e],i=t.body.byteLength;t.idr&&(_=!0),t.pps||t.sps||(m.set(new Uint8Array([i>>>24&255,i>>>16&255,i>>>8&255,255&i]),g),g+=4,m.set(t.body,g),g+=i)}let y=new a.VideoTrackSample({dts:parseInt(e.dts/90),pts:parseInt(e.pts/90),cts:(e.pts-e.dts)/90,originDts:e.dts,isKeyframe:_,data:m,options:t});i.samples.push(y)}destory(){this.off(n.DEMUX_START,this.demux),this.configs={},this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}static compaireArray(e,t,i){let s=0,r=0;if("Uint8Array"===i?(s=e.byteLength,r=t.byteLength):"Array"===i&&(s=e.length,r=t.length),s!==r)return!1;for(let i=0;i<s;i++)if(e[i]!==t[i])return!1;return!0}static compaireMeta(e,t,i){if(!e||!t)return!1;for(let s=0,r=Object.keys(e).length;s<r;s++){let r=e[Object.keys(e)[s]],a=t[Object.keys(e)[s]];if("object"!=typeof r){if(i&&"duration"!==Object.keys(e)[s]&&"refSampleDuration"!==Object.keys(e)[s]&&"refSampleDurationFixed"!==Object.keys(e)[s]&&r!==a)return!1}else if(void 0!==r.byteLength){if(void 0===a.byteLength)return!1;if(!d.compaireArray(r,a,"Uint8Array"))return!1}else if(void 0!==r.length){if(void 0===a.length)return!1;if(!d.compaireArray(r,a,"Array"))return!1}else if(!d.compaireMeta(r,a))return!1}return!0}static Merge(e){let t,i=0,s=0;for(let t=0;t<e.length;t++)i+=e[t].length-e[t].position;t=new Uint8Array(i);for(let i=0;i<e.length;i++){let r=e[i];t.set(new Uint8Array(r.buffer,r.position),s),s+=r.length-r.position}return new a.Stream(t.buffer)}static read(e,t,i){d.readHeader(e,t),d.readPayload(e,t,i),"MEDIA"!==t.header.packet||1!==t.header.payload||t.unknownPIDs||(t.pes=d.PES(t))}static readPayload(e,t,i){let s=t.header.pid;switch(s){case 0:d.PAT(e,t,i);break;case 1:d.CAT(e,t,i);break;case 2:d.TSDT(e,t,i);break;case 8191:break;default:if(i.pat.some(e=>e.pid===s))d.PMT(e,t,i);else{let r=i.pmt?i.pmt.filter(e=>e.pid===s):[];r.length>0?d.Media(e,t,o[r[0].streamType][0]):t.unknownPIDs=!0}}}static readHeader(e,t){let i={};i.sync=e.readUint8();let s=e.readUint16();i.error=s>>>15,i.payload=s>>>14&1,i.priority=s>>>13&1,i.pid=8191&s,s=e.readUint8(),i.scrambling=s>>6&3,i.adaptation=s>>4&3,i.continuity=15&s,i.packet=0===i.pid?"PAT":"MEDIA",t.header=i}static PAT(e,t,i){let s={},r=e.readUint8();e.skip(r),r=e.readUint8(),s.tabelID=r,r=e.readUint16(),s.error=r>>>7,s.zero=r>>>6&1,s.sectionLength=4095&r,s.streamID=e.readUint16(),s.current=1&e.readUint8(),s.sectionNumber=e.readUint8(),s.lastSectionNumber=e.readUint8();let a=(s.sectionLength-9)/4,n=[];for(let t=0;t<a;t++){let t=e.readUint16(),i=8191&e.readUint16();n.push({program:t,pid:i,type:0===t?"network":"mapPID"})}n.length>0&&(i.pat=i.pat.concat(n)),s.list=n,s.program=e.readUint16(),s.pid=8191&e.readUint16(),t.payload=s}static PMT(e,t,i){let s={};t.header.packet="PMT";let r=e.readUint8();e.skip(r),r=e.readUint8(),s.tableID=r,r=e.readUint16(),s.sectionLength=4095&r,s.program=e.readUint16(),s.current=1&e.readUint8(),s.order=e.readUint8(),s.lastOrder=e.readUint8(),s.PCR_PID=8191&e.readUint16(),s.programLength=4095&e.readUint16();let a=(s.sectionLength-13)/5,n=[];for(let t=0;t<a;t++)n.push({streamType:e.readUint8(),pid:8191&e.readUint16(),es:4095&e.readUint16()});s.list=n,this.pmt||(this.pmt=[]),i.pmt=this.pmt.concat(n.map(e=>({pid:e.pid,es:e.es,streamType:e.streamType,program:s.program}))),t.payload=s}static Media(e,t,i){let s=t.header,r={};if(s.type=i,3===s.adaptation&&(r.adaptationLength=e.readUint8(),r.adaptationLength>0)){let t=e.readUint8();r.discontinue=t>>>7,r.access=t>>>6&1,r.priority=t>>>5&1,r.PCR=t>>>4&1,r.OPCR=t>>>3&1,r.splicePoint=t>>>2&1,r.transportPrivate=t>>>1&1,r.adaptationField=1&t;let i=e.position;if(1===r.PCR&&(r.programClockBase=e.readUint32()<<1,t=e.readUint16(),r.programClockBase|=t>>>15,r.programClockExtension=511&t),1===r.OPCR&&(r.originProgramClockBase=e.readUint32()<<1,t=e.readUint16(),r.originProgramClockBase+=t>>>15,r.originProgramClockExtension=511&t),1===r.splicePoint&&(r.spliceCountdown=e.readUint8()),1===r.transportPrivate){let t=e.readUint8(),i=[];for(let s=0;s<t;s++)i.push(e.readUint8())}if(1===r.adaptationField){let t=e.readUint8(),i=e.readUint8(),s=e.position,a=i>>>6&1,n=i>>>5&1;1==i>>>7&&(i=e.readUint16(),r.ltwValid=i>>>15,r.ltwOffset=61439&i),1===a&&(i=e.readUint24(),r.piecewiseRate=4194303&i),1===n&&(i=e.readInt8(),r.spliceType=i>>>4,r.dtsNextAU1=i>>>1&7,r.marker1=1&i,i=e.readUint16(),r.dtsNextAU2=i>>>1,r.marker2=1&i,i=e.readUint16(),r.dtsNextAU3=i),e.skip(t-1-(e.position-s))}let s=r.adaptationLength-1-(e.position-i);e.skip(s)}r.stream=new a.Stream(e.buffer.slice(e.position)),t.payload=r}static PES(e){let t={},i=e.payload.stream;if(1!==i.readUint24())t.ES={},t.ES.buffer=i;else{let e=i.readUint8();e>=224&&e<=239&&(t.type="video"),e>=192&&e<=223&&(t.type="audio");let s=i.readUint16();if(t.packetLength=s,"video"!==t.type&&"audio"!==t.type)throw new Error("format is not supported");{let e=i.readUint8();if(2!=e>>>6)throw new Error("error when parse pes header");e=i.readUint8(),t.ptsDTSFlag=e>>>6,t.escrFlag=e>>>5&1,t.esRateFlag=e>>>4&1,t.dsmFlag=e>>>3&1,t.additionalFlag=e>>>2&1,t.crcFlag=e>>>1&1,t.extensionFlag=1&e,t.pesHeaderLength=i.readUint8();let s=t.pesHeaderLength;if(2===t.ptsDTSFlag){let r=[];e=i.readUint8(),r.push(e>>>1&7),e=i.readUint16(),r.push(e>>>1),e=i.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2],s-=5,"video"===t.type&&(t.dts=t.pts)}if(3===t.ptsDTSFlag){let r=[];e=i.readUint8(),r.push(e>>>1&7),e=i.readUint16(),r.push(e>>>1),e=i.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2];let a=[];e=i.readUint8(),a.push(e>>>1&7),e=i.readUint16(),a.push(e>>>1),e=i.readUint16(),a.push(e>>>1),t.dts=a[0]<<30|a[1]<<15|a[2],s-=10}if(1===t.escrFlag){let r=[],a=[];e=i.readUint8(),r.push(e>>>3&7),r.push(3&e),e=i.readUint16(),r.push(e>>>13),r.push(3&e),e=i.readUint16(),r.push(e>>>13),a.push(3&e),e=i.readUint8(),a.push(e>>>1),t.escr=300*(r[0]<<30|r[1]<<28|r[2]<<15|r[3]<<13|r[4])+(a[0]<<7|a[1]),s-=6}if(1===t.esRateFlag&&(e=i.readUint24(),t.esRate=e>>>1&4194303,s-=3),1===t.dsmFlag)throw new Error("not support DSM_trick_mode");if(1===t.additionalFlag&&(e=i.readUint8(),t.additionalCopyInfo=127&e,s-=1),1===t.crcFlag&&(t.pesCRC=i.readUint16(),s-=2),1===t.extensionFlag)throw new Error("not support extension");s>0&&i.skip(s),t.ES=d.ES(i,t.type)}}return t}static ES(e,t){let i,s={};if("video"===t){if(1!==(i=e.readUint32())&&(e.back(4),1!==(i=e.readUint24())))throw new Error("h264 nal header parse failed");e.skip(2),s.buffer=e}else{if("audio"!==t)throw new Error(`ES ${t} is not supported`);{if((i=e.readUint16())>>>4!=4095)throw new Error("aac ES parse Error");const t=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];s.id=0==(i>>>3&1)?"MPEG-4":"MPEG-2",s.layer=i>>>1&3,s.absent=1&i,i=e.readUint16(),s.audioObjectType=1+(i>>>14&3),s.profile=s.audioObjectType-1,s.frequencyIndex=i>>>10&15,s.frequence=t[s.frequencyIndex],s.channel=i>>>6&7,s.frameLength=(3&i)<<11|e.readUint16()>>>5,d.getAudioConfig(s),e.skip(1),s.buffer=e}}return s}static TSDT(e,t,i){t.payload={}}static CAT(e,t,i){let s={};s.tableID=e.readUint8();let r=e.readUint16();s.sectionIndicator=r>>>7,s.sectionLength=4095&r,e.skip(2),r=e.readUint8(),s.version=r>>>3,s.currentNextIndicator=1&r,s.sectionNumber=e.readUint8(),s.lastSectionNumber=e.readUint8();let a=(this.sectionLength-9)/4,n=[];for(let e=0;e<a;e++)n.push({});s.crc32=e.readUint32(),t.payload=s}static getAudioConfig(e){let t,i,s=navigator.userAgent.toLowerCase();/firefox/i.test(s)?e.frequencyIndex>=6?(e.audioObjectType=5,t=new Array(4),i=e.frequencyIndex-3):(e.audioObjectType=2,t=new Array(2),i=e.frequencyIndex):-1!==s.indexOf("android")?(e.audioObjectType=2,t=new Array(2),i=e.frequencyIndex):(e.audioObjectType=5,t=new Array(4),e.frequencyIndex>=6?i=e.frequencyIndex-3:(1===e.channel&&(e.audioObjectType=2,t=new Array(2)),i=e.frequencyIndex)),t[0]=e.audioObjectType<<3,t[0]|=(14&e.frequencyIndex)>>1,t[1]=(1&e.frequencyIndex)<<7,t[1]|=e.channel<<3,5===e.audioObjectType&&(t[1]|=(14&i)>>1,t[2]=(1&i)<<7,t[2]|=8,t[3]=0),e.audioConfig=t}get inputBuffer(){return this._context.getInstance(this.configs.inputbuffer)}get _tracks(){return this._context.getInstance("TRACKS")}}t.default=d},"../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
      !*** ../xgplayer-demux/src/hls/playlist.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=e.autoclear||!1}get list(){return this._list}set baseURL(e){this.baseURL!==e&&(this.clear(),this._baseURL=e)}get baseURL(){return this._baseURL}push(e,t,i){this._ts[e]||(this._ts[e]={duration:t,downloaded:!1,downloading:!1,start:this.duration,discontinue:!!i},this._list[this.duration]=e,this.duration+=t,this.fragLength+=1)}deleteFrag(e){this._ts[e]&&(this._ts[e].start>this._lastget.time&&(this._lastget={duration:this._ts[e].duration,time:this._ts[e].start,downloaded:!1,downloading:!1,url:e}),delete this._list[this._ts[e].start],delete this._ts[e],this.fragLength-=1)}pushM3U8(e,t){if(!e)throw new Error("No m3u8 data received.");if(this.version=e.version,this.targetduration=e.targetduration,e.encrypt&&!this.encrypt&&(this.encrypt=e.encrypt),!(e.sequence>this.sequence))throw new Error(`Old m3u8 file received, ${e.sequence}`);{this.sequence=e.sequence;let i=[];for(let t=0;t<e.frags.length;t++){let s=e.frags[t];this._ts[s.url]||(i.push(s.url),this.push(s.url,s.duration,s.discontinue))}if(i.length<1)throw new Error("Can not read ts file list.");if(t){let e=this.getTsList();for(let t=0;t<e.length;t++)i.indexOf(e[t])<0&&this.deleteFrag(e[t])}}}getTsList(){return Object.keys(this._ts)}downloaded(e,t){let i=this._ts[e];i&&(i.downloaded=t)}downloading(e,t){let i=this._ts[e];i&&(i.downloading=t)}getTsByName(e){return this._ts[e]}getTs(e){let t,i=Object.keys(this._list);if(void 0===e&&(e=this._lastget?this._lastget.time+this._lastget.duration:0),!(i.length<1||e>=this.duration)){i.sort((e,t)=>parseFloat(e)-parseFloat(t));for(let s=0;s<i.length&&e>=parseInt(i[s]);s++){let e=this._list[i[s]];t={url:e,downloaded:this._ts[e].downloaded,downloading:this._ts[e].downloading,time:parseInt(i[s]),duration:parseInt(this._ts[e].duration)},this.autoclear&&(delete this._ts[this._lastget.url],delete this._list[this._lastget.time]),this._lastget=t}return t}}clear(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0}clearDownloaded(){for(let e=0,t=Object.keys(this._ts).length;e<t;e++){let t=this._ts[Object.keys(this._ts)[e]];t.downloaded=!1,t.downloading=!1}}destroy(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=!1}}},"../xgplayer-loader/index.js":
/*!***********************************!*\
      !*** ../xgplayer-loader/index.js ***!
      \***********************************/
/*! no static exports found */function(e,t,i){e.exports={FetchLoader:i(/*! ./src/fetch-loader */"../xgplayer-loader/src/fetch-loader.js").default}},"../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
      !*** ../xgplayer-loader/src/fetch-loader.js ***!
      \**********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js").EVENTS.LOADER_EVENTS;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this._destroyed=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(s.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let i=this;this.url=e,this._canceled=!1;let r=this.getParams(t);return i.loading=!0,fetch(this.url,r).then((function(e){if(e.ok)return i.status=e.status,i._onFetchResponse(e);i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,new Error("invalid response."))})).catch((function(e){throw i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,e),new Error(e.message)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);this._loaderTaskNo++;let r=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case 2:e.json().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 1:e.text().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 3:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(new Uint8Array(e)),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 0:default:return this._onReader(e.body.getReader(),r)}}_onReader(e,t){let i=this._context.getInstance(this.buffer);if(!i&&this._reader||this._destroyed)try{this._reader.cancel()}catch(e){}if(this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then((function(a){if(!r._canceled&&!r._destroyed)return a.done?(r.loading=!1,r.status=0,void r.emit(s.LOADER_COMPLETE,i)):(i.push(a.value),r.emit(s.LOADER_DATALOADED,i),r._onReader(e,t));if(r._reader)try{r._reader.cancel()}catch(e){}})).catch(e=>{r.loading=!1,r.emit(s.LOADER_ERROR,r.TAG,e)})}getParams(e){let t=Object.assign({},e),i=new Headers,s={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}if("object"==typeof t.headers){let e=t.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(s.mode="same-origin"),t.withCredentials&&(s.credentials="include"),s}cancel(){if(this._reader){try{this._reader.cancel()}catch(e){}this._reader=null,this.loading=!1}this._canceled=!0}destroy(){this._destroyed=!0,this.cancel()}}},"../xgplayer-remux/index.js":
/*!**********************************!*\
      !*** ../xgplayer-remux/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Mp4Remuxer:i(/*! ./src/mp4 */"../xgplayer-remux/src/mp4/index.js").default}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
      !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");class r{static size(e){return s.Buffer.writeUint32(e)}static initBox(e,t){const i=new s.Buffer;for(var a=arguments.length,n=Array(a>2?a-2:0),o=2;o<a;o++)n[o-2]=arguments[o];return i.write.apply(i,[r.size(e),r.type(t)].concat(n)),i.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov(e){let t,{type:i,meta:s}=e,a=8,n=r.mvhd(s.duration,s.timescale);t="video"===i?r.videoTrak(s):r.audioTrak(s);let o=r.mvex(s.duration,s.timescale||1e3,s.id);return[n,t,o].forEach(e=>{a+=e.byteLength}),r.initBox(a,"moov",n,t,o)}static mvhd(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3,i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),s=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static audioTrak(e){let t=8,i=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),s=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static tkhd(e){let t=e.id,i=e.duration,s=e.width,a=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>>8&255,255&s,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new s.Buffer,i=e.duration,a=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=r.mdhd(e.timescale,e.duration),s=r.hdlr(e.type),a=r.minf(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",i,s,a)}static mdhd(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3,t=arguments[1],i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+i.byteLength,"mdhd",r.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice.apply(t,[8,4].concat([115,111,117,110])),t.splice.apply(t,[24,13].concat([83,111,117,110,100,72,97,110,100,108,101,114,0]))),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?r.vmhd():r.smhd(),s=r.dinf(),a=r.stbl(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",i,s,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new s.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=r.stsd(e),s=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[i,s,a,n,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",i,s,a,n,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=r.esds(e.config);return r.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[43,146,8,0];const t=e.length;let i=new s.Buffer,a=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(r.size(8+a.byteLength),r.type("esds"),a),i.buffer}static avc1(e){let t=new s.Buffer,i=e.width,a=e.height,n=e.parRatio.height,o=e.parRatio.width,d=e.avcc,l=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),h=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),u=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+l.byteLength+d.byteLength+h.byteLength),r.type("avc1"),l,r.size(8+d.byteLength),r.type("avcC"),d,r.size(20),r.type("btrt"),h,r.size(16),r.type("pasp"),u),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];let t=arguments[2],i=new s.Buffer,a=s.Buffer.writeUint32(e);return i.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),a,r.trex(t)),i.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=r.mfhd(),s=r.traf(e);return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",i,s)}static mfhd(){let e=s.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,i=r.tfhd(e.id),s=r.tfdt(e.time),a=r.sdtp(e),n=r.trun(e,a.byteLength);return[i,s,n,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",i,s,n,a)}static tfhd(e){let t=s.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),s.Buffer.writeUint32(e))}static trun(e,t){let i=new s.Buffer,a=s.Buffer.writeUint32(e.samples.length),n=s.Buffer.writeUint32(92+16*e.samples.length+t);return i.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new s.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,s=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([s]))}),t.buffer}static mdat(e){let t=new s.Buffer,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(r.size(i),r.type("mdat"));let a=new Uint8Array(i),n=0;return a.set(t.buffer,n),n+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{a.set(e,n),n+=e.byteLength})}),a}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
      !*** ../xgplayer-remux/src/mp4/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=(s=i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"))&&s.__esModule?s:{default:s};const n=r.EVENTS.REMUX_EVENTS;class o{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e,this.isFirstVideo=!0,this.isFirstAudio=!0,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(n.REMUX_MEDIA,this.remux.bind(this)),this.on(n.REMUX_METADATA,this.onMetaDataReady.bind(this)),this.on(n.DETECT_CHANGE_STREAM,this.resetDtsBase.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}resetDtsBase(){this._dtsBase=0,this._dtsBaseInited=!1}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t;if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");t=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");t=e}let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.mimetype=t.meta.codec,s.init=this.remuxInitSegment(e,t.meta),this.emit(n.INIT_SEGMENT,e)}remuxInitSegment(e,t){let i=new r.Buffer,s=a.default.ftyp(),n=a.default.moov({type:e,meta:t});return i.write(s,n),i}calcDtsBase(e,t){if(!e&&t.samples.length)return t.samples[0].dts;if(!e.samples.length&&!t.samples.length)return;let i=1/0,s=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(s=t.samples[0].dts),this._dtsBase=Math.min(i,s),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e||{};if(!e.samples||!e.samples.length)return;let{samples:i}=t,s=-1,o=null;const d=[],l={samples:[]};let h=1e4;for(;i.length&&h-- >0;){const e=i.shift(),{isKeyframe:t,options:r}=e;if(!this.isFirstAudio&&r&&r.meta){o=this.remuxInitSegment("video",r.meta),r.meta=null,i.unshift(e),r.isContinue||this.resetDtsBase();break}let a,h,u=e.dts-this._dtsBase;-1===s&&(s=u),void 0!==e.pts&&(a=(h=e.pts-this._dtsBase)-u),void 0!==e.cts&&(h=e.cts+u,a=e.cts);let c={buffer:[],size:0};l.samples.push(c),c.buffer.push(e.data),c.size+=e.data.byteLength;let f=0;f=e.duration?e.duration:i.length>=1?i[0].dts-this._dtsBase-u:d.length>=1?d[d.length-1].duration:this.videoMeta.refSampleDuration,this.videoAllDuration+=f,console.log(`video dts ${u}`,`pts ${h}`,t,`duration ${f}`),d.push({dts:u,cts:a,pts:h,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:f,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:u,type:"video"}),t&&this.emit(n.RANDOM_ACCESS_POINT,h)}let u=new r.Buffer;if(d.length){const e=a.default.moof({id:t.meta.id,time:s,samples:d}),i=a.default.mdat(l);u.write(e,i),this.writeToSource("video",u)}if(o&&(this.writeToSource("video",o),i.length))return t.samples=i,this._remuxVideo(t);this.isFirstVideo=!1,this.emit(n.MEDIA_SEGMENT,"video");const c=d[d.length-1];this._videoNextDts=c.dts+c.duration,t.samples=[],t.length=0}_remuxAudio(e){const{samples:t}=e||{};let i=-1,s=[],o=null;const d={samples:[]};if(!t||!t.length)return;let l=1e4,h=!1;for(;t.length&&l-- >0;){let e=t.shift();const{data:r,options:a}=e;if(!this.isFirstAudio&&a&&a.meta){o=this.remuxInitSegment("audio",a.meta),a.meta=null,t.unshift(e),a.isContinue||this.resetDtsBase();break}let n=e.dts-this._dtsBase;const l=n;h||(i=n,h=!0);let u=0;u=e.duration?e.duration:this.audioMeta.refSampleDurationFixed?this.audioMeta.refSampleDurationFixed:t.length>=1?t[0].dts-this._dtsBase-n:s.length>=1?s[s.length-1].duration:this.audioMeta.refSampleDuration,console.log(`audio dts ${n}`,`pts ${n}`,`duration ${u}`),this.audioAllDuration+=u;const c={dts:n,pts:n,cts:0,size:r.byteLength,duration:e.duration?e.duration:u,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:l,type:"audio"};let f={buffer:[],size:0};f.buffer.push(r),f.size+=r.byteLength,d.samples.push(f),s.push(c)}const u=new r.Buffer;if(s.length){const t=a.default.moof({id:e.meta.id,time:i,samples:s}),r=a.default.mdat(d);u.write(t,r),this.writeToSource("audio",u)}if(o&&(this.writeToSource("audio",o),t.length))return e.samples=t,this._remuxAudio(e);this.isFirstAudio=!1,this.emit(n.MEDIA_SEGMENT,"audio",u);const c=s[s.length-1];this._videoNextDts=c.dts+c.duration,e.samples=[],e.length=0}writeToSource(e,t){let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.data.push(t)}initSilentAudio(e,t){const i=o.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=o},"../xgplayer-utils/index.js":
/*!**********************************!*\
      !*** ../xgplayer-utils/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Context:i(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:i(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:i(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:i(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:i(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:i(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,MediaInfo:i(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:i(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:i(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:i(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:i(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:i(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:i(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default,Crypto:i(/*! ./src/crypto */"../xgplayer-utils/src/crypto/index.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
      !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
      \***********************************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,s=Array(i>1?i-1:0),r=1;r<i;r++)s[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var d,l=s[Symbol.iterator]();!(a=(d=l.next()).done);a=!0){var h=d.value;t+=h.length}}catch(e){n=!0,o=e}finally{try{!a&&l.return&&l.return()}finally{if(n)throw o}}var u=new e(t),c=0,f=!0,p=!1,m=void 0;try{for(var g,_=s[Symbol.iterator]();!(f=(g=_.next()).done);f=!0){var y=g.value;u.set(y,c),c+=y.length}}catch(e){p=!0,m=e}finally{try{!f&&_.return&&_.return()}finally{if(p)throw m}}return u}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
      !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
      \**********************************************************************/
/*! no static exports found */function(e,t,i){var s,r=(s=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"))&&s.__esModule?s:{default:s};e.exports=r.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
      !*** ../xgplayer-utils/src/constants/events.js ***!
      \*************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT",DETECT_CHANGE_STREAM:"DETECT_CHANGE_STREAM",RANDOM_ACCESS_POINT:"RANDOM_ACCESS_POINT"},n={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o={RETRY_TIME_EXCEEDED:"RETRY_TIME_EXCEEDED"},d=Object.assign({},s,r,a,n,o),l=[],h=[];for(let e in d)d.hasOwnProperty(e)&&l.push(d[e]);for(let e in d)d.hasOwnProperty(e)&&h.push(d[e]);t.default={ALLEVENTS:d,HLS_EVENTS:o,REMUX_EVENTS:a,DEMUX_EVENTS:r,MSE_EVENTS:n,LOADER_EVENTS:s,FlvAllowedEvents:l,HlsAllowedEvents:h,CRYTO_EVENTS:{START_DECRYPT:"START_DECRYPT",DECRYPTED:"DECRYPTED"}}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
      !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
      \**********************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
      !*** ../xgplayer-utils/src/context.js ***!
      \****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"))&&s.__esModule?s:{default:s},a=i(/*! events */"../../node_modules/events/events.js");const n="__TO__";t.default=class{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new r.default,this.allowedEvents=e,this._hooks={},this._emitCounter={}}getInstance(e){return this._instanceMap[e]||null}initInstance(e){if(this._clsMap[e]){for(var t=arguments.length,i=Array(t>1?t-1:0),s=1;s<t;s++)i[s-1]=arguments[s];const r=new(Function.prototype.bind.apply(this._clsMap[e],[null].concat(i)));return this._instanceMap[e]=r,r.init&&r.init(),r}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){var i=this;const s=this._emitter,r=this._isMessageNameValid.bind(this),a=this;return this._clsMap[e]=class extends t{constructor(t,i,s){super(t,i,s),this.listeners={},this.onceListeners={},this.TAG=e,this._context=a}on(t,i){return r(t),this.listeners[t]?this.listeners[t].push(i):this.listeners[t]=[i],s.on(`${t}${n}${e}`,i),s.on(t,i)}before(e,t){r(e),a._hooks[e]?a._hooks[e].push(t):a._hooks[e]=[t]}once(t,i){return r(t),this.onceListeners[t]?this.onceListeners[t].push(i):this.onceListeners[t]=[i],s.once(`${t}${n}${e}`,i),s.once(t,i)}emit(e){if(r(e),a._emitCounter[e]){if(a._emitCounter[e]+=1,a._emitCounter[e]%1e3==0){let t="con",i="sole";window.console&&(window[t+i].warn("invoke: ",e),window.localStorage.setItem(`xgplayer_invoke_${e}`,a._emitCounter[e]))}}else a._emitCounter[e]=1;const t=a._hooks?a._hooks[e]:null;if(t)for(let e=0,i=t.length;e<i;e++)(0,t[e])();for(var i=arguments.length,n=Array(i>1?i-1:0),o=1;o<i;o++)n[o-1]=arguments[o];return s.emit.apply(s,[e].concat(n))}emitTo(e,t){r(t);for(var i=arguments.length,a=Array(i>2?i-2:0),o=2;o<i;o++)a[o-2]=arguments[o];return s.emit.apply(s,[`${t}${n}${e}`].concat(a))}off(e,t){return r(e),s.off(e,t)}removeListeners(){const t=Object.prototype.hasOwnProperty.bind(this.listeners);for(let i in this.listeners)if(t(i)){const t=this.listeners[i]||[];for(let r=0;r<t.length;r++){const a=t[r];s.off(i,a),s.off(`${i}${n}${e}`,a)}}for(let i in this.onceListeners)if(t(i)){const t=this.onceListeners[i]||[];for(let r=0;r<t.length;r++){const a=t[r];s.off(i,a),s.off(`${i}${n}${e}`,a)}}}destroy(){if(this.removeListeners(),this.listeners={},delete a._instanceMap[e],super.destroy)return super.destroy()}},function(){for(var t=arguments.length,s=Array(t),r=0;r<t;r++)s[r]=arguments[r];return i.initInstance.apply(i,[e].concat(s))}}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this._hooks=null,this._emitCounter={},this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/src/crypto/index.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/crypto/index.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){var s;Object.defineProperty(t,"__esModule",{value:!0});const r=((s=i(/*! ../constants/events */"../xgplayer-utils/src/constants/events.js"))&&s.__esModule?s:{default:s}).default.CRYTO_EVENTS;t.default=class{constructor(e){this.inputBuffer=e.inputbuffer,this.outputBuffer=e.outputbuffer,this.key=e.key,this.iv=e.iv,this.method=e.method,this.crypto=window.crypto||window.msCrypto}init(){this.on(r.START_DECRYPT,this.decript.bind(this))}decript(){this.aeskey?this.decriptData():this.crypto.subtle.importKey("raw",this.key.buffer,{name:"AES-CBC"},!1,["encrypt","decrypt"]).then(e=>{this.aeskey=e,this.decriptData()})}decriptData(){let e=this._context.getInstance(this.inputBuffer),t=this._context.getInstance(this.outputBuffer),i=e.shift();i&&this.crypto.subtle.decrypt({name:"AES-CBC",iv:this.iv.buffer},this.aeskey,i).then(e=>{t.push(new Uint8Array(e)),this.emit(r.DECRYPTED),this.decriptData(i)})}}},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
      !*** ../xgplayer-utils/src/env/isle.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=s},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
      !*** ../xgplayer-utils/src/env/sniffer.js ***!
      \********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,s=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),a=/(?:iPad|PlayBook)/.test(e)||s&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),n=/(?:iPhone)/.test(e)&&!a;return{isTablet:a,isPhone:n,isAndroid:s,isPc:!n&&!s&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:r}},get isLe(){return s}};t.default=r},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
      !*** ../xgplayer-utils/src/env/utf8.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static decode(e){const t=[],i=e;let r=0;const a=e.length;for(;r<a;)if(i[r]<128)t.push(String.fromCharCode(i[r])),++r;else{if(i[r]<192);else if(i[r]<224){if(s._checkContinuation(i,r,1)){const e=(31&i[r])<<6|63&i[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(i[r]<240){if(s._checkContinuation(i,r,2)){const e=(15&i[r])<<12|(63&i[r+1])<<6|63&i[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(i[r]<248&&s._checkContinuation(i,r,3)){let e=(7&i[r])<<18|(63&i[r+1])<<12|(63&i[r+2])<<6|63&i[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,i){let s=e;if(t+i<s.length){for(;i--;)if(128!=(192&s[++t]))return!1;return!0}return!1}}t.default=s},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
      !*** ../xgplayer-utils/src/models/media-info.js ***!
      \**************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return s(e)}static isVideoReady(e){return!e.hasVideo||s(e.video)}static isAudioReady(e){return!e.hasAudio||s(e.video)}}t.default=r},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
      !*** ../xgplayer-utils/src/models/media-sample.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(e=>{let[t,i]=e;this[t]=i})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=s},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
      !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
      \**********************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,s=0,r=0,a=i,n=0;if(e<t[0].originDts)return-1;for(;r<=a;){if((s=r+Math.floor((a-r)/2))===i||e>t[s].lastSample.originDts&&e<t[s+1].originDts){n=s;break}t[s].originDts<e?r=s+1:a=s-1}return n}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,s=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?s=i+1:t.length>0&&(s=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=s,this._list.splice(s,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
      !*** ../xgplayer-utils/src/models/media-segment.js ***!
      \*****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
      !*** ../xgplayer-utils/src/models/track-meta.js ***!
      \**************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}destroy(){this.init=null}},t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}destroy(){this.init=null,this.sps=null,this.pps=null}}},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
      !*** ../xgplayer-utils/src/models/track-sample.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=s;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
      !*** ../xgplayer-utils/src/mse/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1,this.onSourceOpen=this.onSourceOpen.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onUpdateEnd=this.onUpdateEnd.bind(this),this.onWaiting=this.onWaiting.bind(this)}init(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate),this.container.addEventListener("waiting",this.onWaiting)}onTimeUpdate(){this.emit("TIME_UPDATE",this.container)}onWaiting(){this.emit("WAITING",this.container)}onSourceOpen(){this.addSourceBuffers()}onUpdateEnd(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),i=this._context.getInstance("TRACKS");t=t.sources;let s=!1;for(let r=0,a=Object.keys(t).length;r<a;r++){let a=Object.keys(t)[r];if("audio"===a?e=i.audioTrack:"video"===a&&(e=i.videoTrack),e){let i="audio"===a?21:40;e.meta&&e.meta.refSampleDuration&&(i=e.meta.refSampleDuration),t[a].data.length>=this.preloadTime/i&&(s=!0)}}if(s){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,i=Object.keys(t).length;e<i;e++){let i=Object.keys(t)[e],s=t[i],r="video"===i?"video/mp4;codecs="+s.mimetype:"audio/mp4;codecs="+s.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[i]=a,a.addEventListener("updateend",this.onUpdateEnd),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],s=this.sourceBuffers[i];if(!s.updating){let t=e.sources[i];if(t&&!t.inited)s.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&s.appendBuffer(e.buffer.buffer)}}}}endOfStream(){const{readyState:e,activeSourceBuffers:t}=this.mediaSource;if("open"===e&&0===t.length)try{this.mediaSource.endOfStream()}catch(e){}}remove(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;for(let i=0;i<Object.keys(this.sourceBuffers).length;i++){let s=this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];s.updating||s.remove(t,e)}}removeBuffers(){const e=[];for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i,r=this.sourceBuffers[Object.keys(this.sourceBuffers)[t]];r.removeEventListener("updateend",this.onUpdateEnd),i=r.updating?new Promise(e=>{const t=function(){let i=3;const a=()=>{r.updating?i>0?(setTimeout(a,200),i--):e():(s.clearBuffer(r),r.addEventListener("updateend",()=>{e()}))};setTimeout(a,200),r.removeEventListener("updateend",t)};r.addEventListener("updateend",t)}):new Promise(e=>{s.clearBuffer(r),r.addEventListener("updateend",()=>{e()})}),e.push(i)}return Promise.all(e)}destroy(){return this.removeBuffers().then(()=>{for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let t=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];this.mediaSource.removeSourceBuffer(t),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[e]]}this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen),this.endOfStream(),window.URL.revokeObjectURL(this.url),this.url=null,this.configs={},this.container=null,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=1})}static clearBuffer(e){const t=e.buffered;let i=.1;for(let e=0,s=t.length;e<s;e++)i=t.end(e);try{e.remove(0,i)}catch(e){}}}t.default=s},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/write/buffer.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"))&&s.__esModule?s:{default:s};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];t.forEach(e=>{this.buffer=(0,r.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/write/stream.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),i=e%4;for(let e=0;e<t;e++)s.readByte(this.dataview,4);i>0&&s.readByte(this.dataview,i)}static readByte(e,t,i){let s;switch(t){case 1:s=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:s=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");s=e.getUint8(e.position)<<16,s|=e.getUint8(e.position+1)<<8,s|=e.getUint8(e.position+2);break;case 4:s=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");s=e.getUint32(e.position)<<32,s|=e.getUint32(e.position+4);break;default:s=""}return e.position+=t,s}readUint8(){return s.readByte(this.dataview,1)}readUint16(){return s.readByte(this.dataview,2)}readUint24(){return s.readByte(this.dataview,3)}readUint32(){return s.readByte(this.dataview,4)}readUint64(){return s.readByte(this.dataview,8)}readInt8(){return s.readByte(this.dataview,1,!0)}readInt16(){return s.readByte(this.dataview,2,!0)}readInt32(){return s.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=s},"./src/flv-live.js":
/*!*************************!*\
      !*** ./src/flv-live.js ***!
      \*************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=h(i(/*! xgplayer-remux */"../xgplayer-remux/index.js")),r=i(/*! xgplayer-loader */"../xgplayer-loader/index.js"),a=i(/*! xgplayer-demux */"../xgplayer-demux/index.js"),n=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),d=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),l=h(i(/*! xgplayer */"xgplayer"));function h(e){return e&&e.__esModule?e:{default:e}}const u=o.EVENTS.REMUX_EVENTS,c=o.EVENTS.DEMUX_EVENTS,f=o.EVENTS.LOADER_EVENTS,p=o.EVENTS.MSE_EVENTS;class m{warn(){}}t.default=class{constructor(e){this.TAG="FLVController",this._player=e,this.state={initSegmentArrived:!1,randomAccessPoints:[]},this.bufferClearTimer=null}init(){this._context.registry("FETCH_LOADER",r.FetchLoader),this._context.registry("LOADER_BUFFER",n.XgBuffer),this._context.registry("FLV_DEMUXER",a.FlvDemuxer),this._context.registry("TRACKS",n.Tracks),this._context.registry("MP4_REMUXER",s.default.Mp4Remuxer),this._context.registry("PRE_SOURCE_BUFFER",n.PreSource),!1!==this._player.config.compatibility&&this._context.registry("COMPATIBILITY",d.Compatibility),this._context.registry("LOGGER",m),this.mse=this._context.registry("MSE",o.Mse)({container:this._player.video}),this._handleTimeUpdate=this._handleTimeUpdate.bind(this),this.initListeners()}initListeners(){this.on(f.LOADER_DATALOADED,this._handleLoaderDataLoaded.bind(this)),this.on(f.LOADER_ERROR,this._handleNetworkError.bind(this)),this.on(c.MEDIA_INFO,this._handleMediaInfo.bind(this)),this.on(c.METADATA_PARSED,this._handleMetadataParsed.bind(this)),this.on(c.DEMUX_COMPLETE,this._handleDemuxComplete.bind(this)),this.on(c.DEMUX_ERROR,this._handleDemuxError.bind(this)),this.on(u.INIT_SEGMENT,this._handleAppendInitSegment.bind(this)),this.on(u.MEDIA_SEGMENT,this._handleMediaSegment.bind(this)),this.on(u.RANDOM_ACCESS_POINT,this._handleAddRAP.bind(this)),this.on(p.SOURCE_UPDATE_END,this._handleSourceUpdateEnd.bind(this)),this._player.on("timeupdate",this._handleTimeUpdate)}_handleMediaInfo(){this._context.mediaInfo||this.emit(c.DEMUX_ERROR,new Error("failed to get mediainfo"))}_handleLoaderDataLoaded(){this.emitTo("FLV_DEMUXER",c.DEMUX_START)}_handleMetadataParsed(e){this.emit(u.REMUX_METADATA,e)}_handleDemuxComplete(){this.emit(u.REMUX_MEDIA)}_handleAppendInitSegment(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}_handleMediaSegment(){this.mse.addSourceBuffers(),this.mse.doAppend()}_handleSourceUpdateEnd(){const e=this._player.currentTime,t=this._player.video,i=this._player.config.preloadTime||5,{length:s}=t.buffered;if(0===s)return;const r=t.buffered.end(s-1);r-e>2*i&&(this._player.currentTime=r-i),this.mse.doAppend()}_handleTimeUpdate(){const e=this._player.currentTime,t=this._player.video;let i=t.buffered;if(!i||!i.length)return;let s=[0,0],r=t.currentTime;if(i)for(let e=0,t=i.length;e<t&&(s[0]=i.start(e),s[1]=i.end(e),!(s[0]<=r&&r<=s[1]));e++);const a=s[0],n=s[1];if(r>n||r<a)t.currentTime=a;else if(e-a>10||i.length>1){if(this.bufferClearTimer||!this.state.randomAccessPoints.length)return;let t=1/0;for(let i=0;i<this.state.randomAccessPoints.length;i++){const s=Math.ceil(this.state.randomAccessPoints[i]/1e3);if(s>e-10)break;t=s}this.mse.remove(Math.min(t,e-10,n-10,.1),0),this.bufferClearTimer=setTimeout(()=>{this.bufferClearTimer=null},5e3)}}_handleNetworkError(e,t){this._player.emit("error",new l.default.Errors("network",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,!0)}_handleDemuxError(e,t,i){void 0===i&&(i=!1),this._player.emit("error",new l.default.Errors("parse",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,i)}_handleAddRAP(e){this.state.randomAccessPoints&&this.state.randomAccessPoints.push(e)}_onError(e,t,i,s){let r={errorType:e,errorDetails:`[${t}]: ${i.message}`,errorFatal:s||!1};this._player.emit("FLV_ERROR",r)}seek(){this.state.initSegmentArrived||this.loadData()}loadData(){this.emit(f.LADER_START,this._player.config.url)}pause(){const e=this._context.getInstance("FETCH_LOADER");e&&e.cancel()}destroy(){this._player.off("timeupdate",this._handleTimeUpdate),this._player=null,this.mse=null,this.state.randomAccessPoints=[]}}},"./src/index.js":
/*!**********************!*\
      !*** ./src/index.js ***!
      \**********************/
/*! no static exports found */function(e,t,i){var s=n(i(/*! xgplayer */"xgplayer")),r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=n(i(/*! ./flv-live */"./src/flv-live.js"));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.FlvAllowedEvents;e.exports=class extends s.default{constructor(e){super(e),this.context=new r.Context(o),this.initEvents(),this.loaderCompleteTimer=null}start(){this.initFlv(),this.context.init(),super.start(this.flv.mse.url)}initFlvEvents(e){const t=this;e.once(r.EVENTS.REMUX_EVENTS.INIT_SEGMENT,()=>{if(s.default.util.addClass(t.root,"xgplayer-is-live"),!s.default.util.findDom(this.root,"xg-live")){const e=s.default.util.createDom("xg-live","正在直播",{},"xgplayer-live");t.controls.appendChild(e)}}),e.once(r.EVENTS.LOADER_EVENTS.LOADER_COMPLETE,()=>{t.paused?t.emit("ended"):this.loaderCompleteTimer=setInterval(()=>{const e=t.getBufferedRange()[1];Math.abs(t.currentTime-e)<.5&&(t.emit("ended"),window.clearInterval(this.loaderCompleteTimer))},200)})}initEvents(){this.on("timeupdate",()=>{this.loadData()}),this.on("seeking",()=>{const e=this.currentTime,t=this.getBufferedRange();(e>t[1]||e<t[0])&&this.flv.seek(this.currentTime)})}initFlv(){const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.initFlvEvents(e),this.flv=e}play(){return this._hasStart?this._destroy().then(()=>{this.context=new r.Context(o);const e=this.context.registry("FLV_CONTROLLER",a.default)(this);return this.initFlvEvents(e),this.flv=e,this.context.init(),super.start(e.mse.url),super.play()}):super.play()}pause(){super.pause(),this.flv&&this.flv.pause()}loadData(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.currentTime;this.flv&&this.flv.seek(e)}destroy(){this._destroy().then(()=>{super.destroy()})}_destroy(){return this.flv.mse.destroy().then(()=>{this.context.destroy(),this.flv=null,this.context=null,this.loaderCompleteTimer&&window.clearInterval(this.loaderCompleteTimer)})}get src(){return this.currentSrc}set src(e){this.player.config.url=e,this.paused?this.start(e):(this.pause(),this.once("pause",()=>{this.start(e)}),this.once("canplay",()=>{this.play()})),this.once("canplay",()=>{this.currentTime=0})}}},0:
/*!****************************!*\
      !*** multi ./src/index.js ***!
      \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!***************************!*\
      !*** external "xgplayer" ***!
      \***************************/
/*! no static exports found */function(e,t){e.exports=s}}))},"../xgplayer-flv-vod/dist/index.js":
/*!***************************!*\
  !*** .-vod/dist/index.js ***!
  \***************************/
/*! no static exports found */function(e,t,i){"use strict";var s;window,e.exports=(s=i(/*! xgplayer */"xgplayer"),function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=11)}([function(e,t,i){e.exports={Context:i(13).default,EVENTS:i(4).default,WORKER_COMMANDS:i(15).default,sniffer:i(16).default,isLe:i(17).default,UTF8:i(18).default,MediaInfo:i(3).default,MediaSample:i(19).default,MediaSegment:i(20).default,MediaSegmentList:i(21).default,AudioTrackMeta:i(5).AudioTrackMeta,VideoTrackMeta:i(5).VideoTrackMeta,AudioTrackSample:i(6).AudioTrackSample,VideoTrackSample:i(6).VideoTrackSample,Mse:i(22).default,Stream:i(23).default,Buffer:i(24).default,Crypto:i(27).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=s,t.AudioTrack=class extends s{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}},t.VideoTrack=class extends s{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}},t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}destroy(){this.audioTrack=null,this.videoTrack=null}}},function(e,t){e.exports=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return s(e)}static isVideoReady(e){return!e.hasVideo||s(e.video)}static isAudioReady(e){return!e.hasAudio||s(e.video)}}t.default=r},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT",DETECT_CHANGE_STREAM:"DETECT_CHANGE_STREAM",RANDOM_ACCESS_POINT:"RANDOM_ACCESS_POINT"},n={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o={RETRY_TIME_EXCEEDED:"RETRY_TIME_EXCEEDED"},d=Object.assign({},s,r,a,n,o),l=[],h=[];for(let e in d)d.hasOwnProperty(e)&&l.push(d[e]);for(let e in d)d.hasOwnProperty(e)&&h.push(d[e]);t.default={ALLEVENTS:d,HLS_EVENTS:o,REMUX_EVENTS:a,DEMUX_EVENTS:r,MSE_EVENTS:n,LOADER_EVENTS:s,FlvAllowedEvents:l,HlsAllowedEvents:h,CRYTO_EVENTS:{START_DECRYPT:"START_DECRYPT",DECRYPTED:"DECRYPTED"}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}destroy(){this.init=null}},t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}destroy(){this.init=null,this.sps=null,this.pps=null}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=s;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},function(e,t,i){e.exports={Nalunit:i(30).default,SpsParser:i(8).default,Compatibility:i(32).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(31))&&s.__esModule?s:{default:s};class a{static _ebsp2rbsp(e){let t=e,i=t.byteLength,s=new Uint8Array(i),r=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(s[r]=t[e],r++);return new Uint8Array(s.buffer,0,r)}static parseSPS(e){let t=a._ebsp2rbsp(e),i=new r.default(t);i.readByte();let s=i.readByte();i.readByte();let n=i.readByte();i.readUEG();let o=a.getProfileString(s),d=a.getLevelString(n),l=1,h=420,u=8;if((100===s||110===s||122===s||244===s||44===s||83===s||86===s||118===s||128===s||138===s||144===s)&&(3===(l=i.readUEG())&&i.readBits(1),l<=3&&(h=[0,420,422,444][l]),u=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==l?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?a._skipScalingList(i,16):a._skipScalingList(i,64))}i.readUEG();let c=i.readUEG();if(0===c)i.readUEG();else if(1===c){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let f=i.readUEG(),p=i.readUEG(),m=i.readBits(1);0===m&&i.readBits(1),i.readBits(1);let g=0,_=0,y=0,E=0;i.readBool()&&(g=i.readUEG(),_=i.readUEG(),y=i.readUEG(),E=i.readUEG());let v=1,A=1,S=0,T=!0,b=0,x=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],s=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(v=t[e-1],A=s[e-1]):255===e&&(v=i.readByte()<<8|i.readByte(),A=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);T=i.readBool(),S=(b=t)/(x=2*e)}}let w=1;1===v&&1===A||(w=v/A);let R=0,D=0;0===l?(R=1,D=2-m):(R=3===l?1:2,D=(1===l?2:1)*(2-m));let L=16*(f+1),O=16*(p+1)*(2-m);L-=(g+_)*R,O-=(y+E)*D;let M=Math.ceil(L*w);return i.destroy(),i=null,{profile_string:o,level_string:d,bit_depth:u,chroma_format:h,chroma_format_string:a.getChromaFormatString(h),frame_rate:{fixed:T,fps:S,fps_den:x,fps_num:b},par_ratio:{width:v,height:A},codec_size:{width:L,height:O},present_size:{width:M,height:O}}}static _skipScalingList(e,t){let i=8,s=8,r=0;for(let a=0;a<t;a++)0!==s&&(s=(i+(r=e.readSEG())+256)%256),i=0===s?i:s}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},t.frameRate=e.frame_rate;let i=t.frameRate.fps_den,s=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/s))}}t.default=a},function(e,t,i){e.exports={Track:i(1).default,Tracks:i(1).Tracks,AudioTrack:i(1).AudioTrack,VideoTrack:i(1).VideoTrack,XgBuffer:i(10).XgBuffer,RemuxBuffer:i(10).RemuxBuffer,PreSource:i(34).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let s=this.array[0].slice(this.offset,this.offset+e);t.set(s,i),this.offset+=e,this.length-=e,e=0;break}{let s=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=s,this.length-=s,e-=s}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,s=this.offset+e;for(;s<this.offset+t+e;)s<this.array[0].length?i=256*i+this.array[0][s]:this.array[1]&&(i=256*i+this.array[1][s-this.array[0].length]),s++;return i}},t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},function(e,t,i){e.exports=i(12)},function(e,t,i){var s=n(i(2)),r=i(0),a=n(i(28));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.FlvAllowedEvents,d=(e,t)=>{if(!e.config.isLive&&e.duration-e.currentTime<2){const i=e.getBufferedRange();e.currentTime-i[1]<.1&&(e.emit("ended"),t.mse.endOfStream())}};e.exports=class extends s.default{constructor(e){super(e),this.context=new r.Context(o),this.initEvents()}start(){const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.flv=e,this.context.init(),super.start(e.mse.url)}initEvents(){this.on("timeupdate",this.handleTimeUpdate.bind(this)),this.on("seeking",this.handleSeek.bind(this)),this.once("destroy",this._destroy.bind(this))}handleTimeUpdate(){this.loadData(),d(this,this.flv)}handleSeek(){const e=this.currentTime,t=this.getBufferedRange();(e>t[1]||e<t[0])&&this.flv.seek(this.currentTime)}_destroy(){this.context.destroy(),this.context=null,this.flv=null}loadData(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.currentTime;const t=this.getBufferedRange();t[1]-e<(this.config.preloadTime||15)-5&&this.flv.loadNext(t[1]+1)}get src(){return this.currentSrc}set src(e){this.player.config.url=e,this.paused?this.start(e):(this.pause(),this.once("pause",()=>{this.start(e)}),this.once("canplay",()=>{this.play()})),this.once("canplay",()=>{this.currentTime=0})}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(3))&&s.__esModule?s:{default:s},a=i(14);const n="__TO__";t.default=class{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new r.default,this.allowedEvents=e,this._hooks={},this._emitCounter={}}getInstance(e){return this._instanceMap[e]||null}initInstance(e){if(this._clsMap[e]){for(var t=arguments.length,i=Array(t>1?t-1:0),s=1;s<t;s++)i[s-1]=arguments[s];const r=new(Function.prototype.bind.apply(this._clsMap[e],[null].concat(i)));return this._instanceMap[e]=r,r.init&&r.init(),r}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){var i=this;const s=this._emitter,r=this._isMessageNameValid.bind(this),a=this;return this._clsMap[e]=class extends t{constructor(t,i,s){super(t,i,s),this.listeners={},this.onceListeners={},this.TAG=e,this._context=a}on(t,i){return r(t),this.listeners[t]?this.listeners[t].push(i):this.listeners[t]=[i],s.on(`${t}${n}${e}`,i),s.on(t,i)}before(e,t){r(e),a._hooks[e]?a._hooks[e].push(t):a._hooks[e]=[t]}once(t,i){return r(t),this.onceListeners[t]?this.onceListeners[t].push(i):this.onceListeners[t]=[i],s.once(`${t}${n}${e}`,i),s.once(t,i)}emit(e){if(r(e),a._emitCounter[e]){if(a._emitCounter[e]+=1,a._emitCounter[e]>1e4){let t="con",i="sole";window.console&&window[t+i].warn("invoke: ",e)}}else a._emitCounter[e]=1;const t=a._hooks?a._hooks[e]:null;if(t)for(let e=0,i=t.length;e<i;e++)(0,t[e])();for(var i=arguments.length,n=Array(i>1?i-1:0),o=1;o<i;o++)n[o-1]=arguments[o];return s.emit.apply(s,[e].concat(n))}emitTo(e,t){r(t);for(var i=arguments.length,a=Array(i>2?i-2:0),o=2;o<i;o++)a[o-2]=arguments[o];return s.emit.apply(s,[`${t}${n}${e}`].concat(a))}off(e,t){return r(e),s.off(e,t)}removeListeners(){const t=Object.prototype.hasOwnProperty.bind(this.listeners);for(let i in this.listeners)if(t(i)){const t=this.listeners[i]||[];for(let r=0;r<t.length;r++){const a=t[r];s.off(i,a),s.off(`${i}${n}${e}`,a)}}for(let i in this.onceListeners)if(t(i)){const t=this.onceListeners[i]||[];for(let r=0;r<t.length;r++){const a=t[r];s.off(i,a),s.off(`${i}${n}${e}`,a)}}}destroy(){if(this.removeListeners(),this.listeners={},delete a._instanceMap[e],super.destroy)return super.destroy()}},function(){for(var t=arguments.length,s=Array(t),r=0;r<t;r++)s[r]=arguments[r];return i.initInstance.apply(i,[e].concat(s))}}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this._hooks=null,this._emitCounter={},this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},function(e,t,i){var s,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};s=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var d=10;function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function h(e,t,i,s){var r,a,n,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),n=a[t]),void 0===n)n=a[t]=i,++e._eventsCount;else if("function"==typeof n?n=a[t]=s?[i,n]:[n,i]:s?n.unshift(i):n.push(i),(r=l(e))>0&&n.length>r&&!n.warned){n.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=t,d.count=n.length,o=d,console&&console.warn&&console.warn(o)}return e}function u(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function c(e,t,i){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=u.bind(s);return r.listener=i,s.wrapFn=r,r}function f(e,t,i){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):m(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function m(e,t){for(var i=new Array(t),s=0;s<t;++s)i[s]=e[s];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return d},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");d=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var s="error"===e,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var d=r[e];if(void 0===d)return!1;if("function"==typeof d)a(d,this,t);else{var l=d.length,h=m(d,l);for(i=0;i<l;++i)a(h[i],this,t)}return!0},o.prototype.addListener=function(e,t){return h(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return h(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,s,r,a,n;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(s=this._events))return this;if(void 0===(i=s[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(r=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){n=i[a].listener,r=a;break}if(r<0)return this;0===r?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,r),1===i.length&&(s[e]=i[0]),void 0!==s.removeListener&&this.emit("removeListener",e,n||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,i,s;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,a=Object.keys(i);for(s=0;s<a.length;++s)"removeListener"!==(r=a[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,s=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),a=/(?:iPad|PlayBook)/.test(e)||s&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),n=/(?:iPhone)/.test(e)&&!a;return{isTablet:a,isPhone:n,isAndroid:s,isPc:!n&&!s&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:r}},get isLe(){return s}};t.default=r},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static decode(e){const t=[],i=e;let r=0;const a=e.length;for(;r<a;)if(i[r]<128)t.push(String.fromCharCode(i[r])),++r;else{if(i[r]<192);else if(i[r]<224){if(s._checkContinuation(i,r,1)){const e=(31&i[r])<<6|63&i[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(i[r]<240){if(s._checkContinuation(i,r,2)){const e=(15&i[r])<<12|(63&i[r+1])<<6|63&i[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(i[r]<248&&s._checkContinuation(i,r,3)){let e=(7&i[r])<<18|(63&i[r+1])<<12|(63&i[r+2])<<6|63&i[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,i){let s=e;if(t+i<s.length){for(;i--;)if(128!=(192&s[++t]))return!1;return!0}return!1}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(e=>{let[t,i]=e;this[t]=i})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,s=0,r=0,a=i,n=0;if(e<t[0].originDts)return-1;for(;r<=a;){if((s=r+Math.floor((a-r)/2))===i||e>t[s].lastSample.originDts&&e<t[s+1].originDts){n=s;break}t[s].originDts<e?r=s+1:a=s-1}return n}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,s=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?s=i+1:t.length>0&&(s=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=s,this._list.splice(s,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1,this.onSourceOpen=this.onSourceOpen.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onUpdateEnd=this.onUpdateEnd.bind(this),this.onWaiting=this.onWaiting.bind(this)}init(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate),this.container.addEventListener("waiting",this.onWaiting)}onTimeUpdate(){this.emit("TIME_UPDATE",this.container)}onWaiting(){this.emit("WAITING",this.container)}onSourceOpen(){this.addSourceBuffers()}onUpdateEnd(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),i=this._context.getInstance("TRACKS");t=t.sources;let s=!1;for(let r=0,a=Object.keys(t).length;r<a;r++){let a=Object.keys(t)[r];if("audio"===a?e=i.audioTrack:"video"===a&&(e=i.videoTrack),e){let i="audio"===a?21:40;e.meta&&e.meta.refSampleDuration&&(i=e.meta.refSampleDuration),t[a].data.length>=this.preloadTime/i&&(s=!0)}}if(s){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,i=Object.keys(t).length;e<i;e++){let i=Object.keys(t)[e],s=t[i],r="video"===i?"video/mp4;codecs="+s.mimetype:"audio/mp4;codecs="+s.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[i]=a,a.addEventListener("updateend",this.onUpdateEnd),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],s=this.sourceBuffers[i];if(!s.updating){let t=e.sources[i];if(t&&!t.inited)s.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&s.appendBuffer(e.buffer.buffer)}}}}endOfStream(){const{readyState:e,activeSourceBuffers:t}=this.mediaSource;if("open"===e&&0===t.length)try{this.mediaSource.endOfStream()}catch(e){}}remove(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;for(let i=0;i<Object.keys(this.sourceBuffers).length;i++){let s=this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];s.updating||s.remove(t,e)}}removeBuffers(){const e=[];for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i,r=this.sourceBuffers[Object.keys(this.sourceBuffers)[t]];r.removeEventListener("updateend",this.onUpdateEnd),i=r.updating?new Promise(e=>{const t=function(){let i=3;const a=()=>{r.updating?i>0?(setTimeout(a,200),i--):e():(s.clearBuffer(r),r.addEventListener("updateend",()=>{e()}))};setTimeout(a,200),r.removeEventListener("updateend",t)};r.addEventListener("updateend",t)}):new Promise(e=>{s.clearBuffer(r),r.addEventListener("updateend",()=>{e()})}),e.push(i)}return Promise.all(e)}destroy(){return this.removeBuffers().then(()=>{for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let t=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];this.mediaSource.removeSourceBuffer(t),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[e]]}this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen),this.endOfStream(),window.URL.revokeObjectURL(this.url),this.url=null,this.configs={},this.container=null,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=1})}static clearBuffer(e){const t=e.buffered;let i=.1;for(let e=0,s=t.length;e<s;e++)i=t.end(e);try{e.remove(0,i)}catch(e){}}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),i=e%4;for(let e=0;e<t;e++)s.readByte(this.dataview,4);i>0&&s.readByte(this.dataview,i)}static readByte(e,t,i){let s;switch(t){case 1:s=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:s=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");s=e.getUint8(e.position)<<16,s|=e.getUint8(e.position+1)<<8,s|=e.getUint8(e.position+2);break;case 4:s=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");s=e.getUint32(e.position)<<32,s|=e.getUint32(e.position+4);break;default:s=""}return e.position+=t,s}readUint8(){return s.readByte(this.dataview,1)}readUint16(){return s.readByte(this.dataview,2)}readUint24(){return s.readByte(this.dataview,3)}readUint32(){return s.readByte(this.dataview,4)}readUint64(){return s.readByte(this.dataview,8)}readInt8(){return s.readByte(this.dataview,1,!0)}readInt16(){return s.readByte(this.dataview,2,!0)}readInt32(){return s.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(25))&&s.__esModule?s:{default:s};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];t.forEach(e=>{this.buffer=(0,r.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},function(e,t,i){var s,r=(s=i(26))&&s.__esModule?s:{default:s};e.exports=r.default},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,s=Array(i>1?i-1:0),r=1;r<i;r++)s[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var d,l=s[Symbol.iterator]();!(a=(d=l.next()).done);a=!0){var h=d.value;t+=h.length}}catch(e){n=!0,o=e}finally{try{!a&&l.return&&l.return()}finally{if(n)throw o}}var u=new e(t),c=0,f=!0,p=!1,m=void 0;try{for(var g,_=s[Symbol.iterator]();!(f=(g=_.next()).done);f=!0){var y=g.value;u.set(y,c),c+=y.length}}catch(e){p=!0,m=e}finally{try{!f&&_.return&&_.return()}finally{if(p)throw m}}return u}},function(e,t,i){var s;Object.defineProperty(t,"__esModule",{value:!0});const r=((s=i(4))&&s.__esModule?s:{default:s}).default.CRYTO_EVENTS;t.default=class{constructor(e){this.inputBuffer=e.inputbuffer,this.outputBuffer=e.outputbuffer,this.key=e.key,this.iv=e.iv,this.method=e.method,this.crypto=window.crypto||window.msCrypto}init(){this.on(r.START_DECRYPT,this.decript.bind(this))}decript(){this.aeskey?this.decriptData():this.crypto.subtle.importKey("raw",this.key.buffer,{name:"AES-CBC"},!1,["encrypt","decrypt"]).then(e=>{this.aeskey=e,this.decriptData()})}decriptData(){let e=this._context.getInstance(this.inputBuffer),t=this._context.getInstance(this.outputBuffer),i=e.shift();i&&this.crypto.subtle.decrypt({name:"AES-CBC",iv:this.iv.buffer},this.aeskey,i).then(e=>{t.push(new Uint8Array(e)),this.emit(r.DECRYPTED),this.decriptData(i)})}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=h(i(29)),r=h(i(36)),a=i(39),n=i(9),o=i(0),d=i(7),l=h(i(2));function h(e){return e&&e.__esModule?e:{default:e}}const u=o.EVENTS.REMUX_EVENTS,c=o.EVENTS.DEMUX_EVENTS,f=o.EVENTS.LOADER_EVENTS,p="FLVController";class m{warn(){}}const g="FLV_ERROR";class _{constructor(e){this.TAG=p,this._player=e,this.state={initSegmentArrived:!1,range:{start:0,end:""},rangeSupport:!0}}static findFilePosition(e,t){for(let i=0,s=t.times.length;i<s;i++){const r=t.times[i],a=i+1<s?t.times[i+1]:Number.MAX_SAFE_INTEGER;if(r<=e&&e<=a)return t.filepositions[i]}return""}init(){this._context.registry("FETCH_LOADER",a.FetchLoader),this._context.registry("LOADER_BUFFER",n.XgBuffer),this._context.registry("FLV_DEMUXER",s.default),this._context.registry("TRACKS",n.Tracks),this._context.registry("MP4_REMUXER",r.default.Mp4Remuxer),this._context.registry("PRE_SOURCE_BUFFER",n.PreSource),this._context.registry("COMPATIBILITY",d.Compatibility),this._context.registry("LOGGER",m),this.mse=this._context.registry("MSE",o.Mse)({container:this._player.video}),this.initListeners(),setTimeout(()=>{this.loadMeta()},0)}initListeners(){this.on(f.LOADER_DATALOADED,this._handleLoaderDataLoaded.bind(this)),this.on(f.LOADER_ERROR,this._handleNetworkError.bind(this)),this.on(c.MEDIA_INFO,this._handleMediaInfo.bind(this)),this.on(c.METADATA_PARSED,this._handleMetadataParsed.bind(this)),this.on(c.DEMUX_COMPLETE,this._handleDemuxComplete.bind(this)),this.on(c.DEMUX_ERROR,this._handleDemuxError.bind(this)),this.on(u.INIT_SEGMENT,this._handleAppendInitSegment.bind(this)),this.on(u.MEDIA_SEGMENT,this._handleMediaSegment.bind(this))}_handleMediaInfo(){this._context.onMetaData||this.emit(c.DEMUX_ERROR,new Error("failed to get mediainfo"));const e=this._context.getInstance("LOADER_BUFFER"),t=this._context.getInstance("FETCH_LOADER");this.isSeekable&&(t.cancel(),this.state.range={start:0,end:e.historyLen-1},setTimeout(()=>{this.loadNext(0)}))}_handleLoaderDataLoaded(){this.emitTo("FLV_DEMUXER",c.DEMUX_START)}_handleMetadataParsed(e){this.emit(u.REMUX_METADATA,e)}_handleDemuxComplete(){this.emit(u.REMUX_MEDIA)}_handleAppendInitSegment(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}_handleMediaSegment(){this.mse.addSourceBuffers(),this.mse.doAppend()}_handleNetworkError(e,t){this._player.emit("error",new l.default.Errors("network",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,!0)}_handleDemuxError(e,t,i){void 0===i&&(i=!1),this._player.emit("error",new l.default.Errors("parse",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,i)}_onError(e,t,i,s){let r={errorType:e,errorDetails:`[${t}]: ${i.message}`,errorFatal:s||!1};this._player.emit(g,r)}seek(e){if(!this._context.onMetaData)return void this.loadMeta();if(!this.isSeekable)return;this._context.getInstance("LOADER_BUFFER").clear();const{preloadTime:t=15}=this._player.config,i=this.getSeekRange(e,t);this.state.range=i,this.compat&&this.compat.reset(),this.loadData()}loadNext(e){this._context.onMetaData&&(this.loader.loading||this.getNextRange(e)&&this.loadData())}loadData(){const{start:e,end:t}=this.state.range;this.emit(f.LADER_START,this._player.config.url,{headers:{method:"get",Range:`bytes=${e}-${t}`}})}loadMeta(){this.loader.load(this._player.config.url,{headers:{Range:"bytes=0-"}}).catch(()=>{this.state.rangeSupport=!1,this.loadFallback()})}loadFallback(){this.loader.load(this._player.config.url).catch(()=>{this._player.emit("error",new l.default.Errors("network",this._player.config.url))})}getSeekRange(e,t){const{keyframes:i}=this._context.onMetaData,s=this._context.mediaInfo.duration,r=e,a=e+t,n=_.findFilePosition(r,i);return a>=s||r>=s?{start:n,end:""}:{start:n,end:_.findFilePosition(a,i)}}getNextRange(e){if(""===this.state.range.end)return;const{end:t}=this.getSeekRange(e,this.config.preloadTime||15);return t<=this.state.range.end&&""!==t?void 0:(this.state.range={start:this.state.range.end+1,end:t},!0)}destroy(){this._player=null,this.mse=null,this.state={initSegmentArrived:!1,range:{start:0,end:""},rangeSupport:!0}}get isSeekable(){return!!this.state.rangeSupport&&(!this._context||!this._context.mediaInfo.isComplete()||null!==this._context.mediaInfo.keyframes&&void 0!==this._context.mediaInfo.keyframes)}get config(){return this._player.config}get loader(){return this._context.getInstance("FETCH_LOADER")}get compat(){return this._context.getInstance("COMPATIBILITY")}}t.default=_},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(0),a=i(7),n=i(9),o=(s=i(35))&&s.__esModule?s:{default:s};const d=r.EVENTS.DEMUX_EVENTS;class l{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(d.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}static getPlayType(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e,t=1e4;do{e=this._parseFlvTag()}while(e&&t-- >0);this.emit(d.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}parseFlvHeader(e){if(l.isFlvFile(e)){this._firstFragmentLoaded=!0;const t=l.getPlayType(e[4]);t.hasVideo&&this.initVideoTrack(),t.hasAudio&&this.initAudioTrack()}else this.emit(d.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let e=new n.VideoTrack;e.meta=new r.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}initAudioTrack(){this._trackNum++;let e=new n.AudioTrack;e.meta=new r.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}_parseFlvTagHeader(){let e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.emit(d.DEMUX_ERROR,this.TAG,new Error("tagType "+t.tagType),!1),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let s=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(s+=16777216*r),t.dts=s,this.loaderBuffer.shift(3),t}_processChunk(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(e){let t=this.tracks.audioTrack,i=this.tracks.videoTrack,s=this.loaderBuffer.shift(e.datasize);const r=(new o.default).resolve(s,s.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(d.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(a.audiosamplerate&&(e.sampleRate=a.audiosamplerate),a.audiochannels&&(e.channelCount=a.audiochannels),a.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){let e=i.meta;if("number"==typeof a.framerate){let t=Math.floor(1e3*a.framerate);if(t>0){let i=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=i,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let i,s,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,s=new Array(4),i=a-3):(t.objectType=2,s=new Array(2),i=a):-1!==r.indexOf("android")?(t.objectType=2,s=new Array(2),i=a):(t.objectType=5,i=t.sampleRateIndex,s=new Array(4),t.sampleRateIndex>=6?i=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,s=new Array(2),i=t.sampleRateIndex)),s[0]=t.objectType<<3,s[0]|=(15&t.sampleRateIndex)>>>1,s[1]=(15&t.sampleRateIndex)<<7,s[1]|=(15&t.channelCount)<<3,5===t.objectType&&(s[1]|=(15&i)>>>1,s[2]=(1&i)<<7,s[2]|=8,s[3]=0),t.config=s,t}_parseAACData(e){let t=this.tracks.audioTrack;if(!t)return;let i=t.meta;i||(t.meta=new r.AudioTrackMeta,i=t.meta);let s=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let a=(240&s)>>>4;t.format=a,10!==a&&this.emit(d.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(s),i.sampleRateIndex=(12&s)>>>2,i.frameLenth=(2&s)>>>1,i.channelCount=1&s,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));let n=i.audioSampleRate,o=i.sampleRateIndex,l=i.refSampleDuration;delete e.tagType;let h=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);n=t.audiosamplerate||i.audioSampleRate,o=t.sampleRateIndex||i.sampleRateIndex,l=Math.floor(1024/n*i.timescale),i.channelCount=t.channelCount,i.sampleRate=n,i.sampleRateIndex=o,i.refSampleDuration=l,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=t.config;const s=this._context.mediaInfo.audio;s.codec=t.codec,s.channelCount=t.channelCount,s.sampleRate=n,s.sampleRateIndex=t.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(d.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&this.emit(d.AUDIO_METADATA_CHANGE),this._hasAudioSequence=!0,this._metaChange=!0}else this._metaChange&&(e.options={meta:t.meta},this._metaChange=!1),e.data=e.data.slice(1,e.data.length),t.samples.push(e);h||this.emit(d.DEMUX_ERROR,this.TAG,new Error("TAG length error at "+e.datasize),!1)}_parseHevcData(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);let t={},i=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>i;){let s=e.data.slice(Number.parseInt(i),4+i);t.size=s[3],t.size+=256*s[2],t.size+=256*s[1]*256,t.size+=256*s[0]*256*256,i+=4,t.data=e.data.slice(Number.parseInt(i),t.size+i),i+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(d.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(d.METADATA_PARSED,"video"):this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1))}else if(7===i){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let i=0;i<4;i++)e=256*e+t[i];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType)this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(d.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(d.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0),this._metaChange=!0;else{if(!this._datasizeValidator(e.datasize))return void this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);this._metaChange&&(e.options={meta:Object.assign({},this.tracks.videoTrack.meta)},this._metaChange=!1),this.tracks.videoTrack.samples.push(e)}}else this.emit(d.DEMUX_ERROR,this.TAG,new Error(`video codeid is ${i}`),!1),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1),this.tracks.videoTrack.samples.push(e),this.emit(d.DEMUX_COMPLETE);delete e.tagType}_avcSequenceHeaderParser(e){let t=this.tracks.videoTrack;if(!t)return;let i=0;t.meta||(t.meta=new r.VideoTrackMeta);let s=t.meta;s.configurationVersion=e[0],s.avcProfileIndication=e[1],s.profileCompatibility=e[2],s.avcLevelIndication=e[3]/10,s.nalUnitLength=1+(3&e[4]);let n=31&e[5];i=6;let o={};for(let t=0;t<n;t++){let t=255*e[i]+e[i+1];i+=2;let r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e[i+s];let n="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),n+=t}s.codec=n,i+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let d=e[i];i++;for(let t=0;t<d;t++){let t=255*e[i]+e[i+1];i+=2;let s=new Uint8Array(t);for(let r=0;r<t;r++)s[r]=e[i+r];i+=t,this.tracks.videoTrack.meta.pps=s}Object.assign(s,a.SpsParser.toVideoMeta(o));const l=this._context.mediaInfo.video;l.codec=s.codec,l.profile=s.profile,l.level=s.level,l.chromaFormat=s.chromaFormat,l.frameRate=s.frameRate,l.parRatio=s.parRatio,l.width=l.width===s.presentWidth?l.width:s.presentWidth,l.height=l.height===s.presentHeight?l.width:s.presentHeight,s.duration=this._context.mediaInfo.duration*s.timescale,s.avcc=new Uint8Array(e.length),s.avcc.set(e),t.meta=s}_switchAudioSampleRate(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}_switchAudioSamplingFrequency(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}_switchAudioChannel(e){return[1,2][1&e]}_datasizeValidator(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}get loaderBuffer(){const e=this._context.getInstance("LOADER_BUFFER");if(e)return e;this.emit(d.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}t.default=l},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(8))&&s.__esModule?s:{default:s};class a{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,i=e.position;return 1===t.getInt32(i)||0===t.getInt16(i)&&1===t.getInt8(i+2)?a.getAnnexbNals(e):a.getAvccNals(e)}static getAnnexbNals(e){let t=[],i=a.getHeaderPositionAnnexB(e),s=i.pos,r=s;for(;s<e.length-4;){let n=e.buffer.slice(s,s+i.headerLength);i.pos===e.position&&e.skip(i.headerLength),r=(i=a.getHeaderPositionAnnexB(e)).pos;let o={header:n,body:new Uint8Array(e.buffer.slice(s+n.byteLength,r))};a.analyseNal(o),t.push(o),e.skip(r-e.position),s=r}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let i=e.dataview.getInt32();if(!(e.length-e.position>=i))break;{let s=e.buffer.slice(e.position,e.position+4);e.skip(4);let r=e.buffer.slice(e.position,e.position+i);e.skip(i);let n={header:s,body:r};a.analyseNal(n),t.push(n)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=r.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,i=0;for(;3!==i&&4!==i&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?i=4:1===e.dataview.getInt8(t+2)?i=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(i=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?i=3:t=e.length)),{pos:t,headerLength:i}}static getAvcc(e,t){let i=new Uint8Array(e.byteLength+t.byteLength+11);i[0]=1,i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=255,i[5]=225;let s=6;return i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),s),s+=2,i.set(e,s),i[s+=e.byteLength]=1,s++,i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),s),s+=2,i.set(t,s),i}}t.default=a},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){let t=Math.min(this._currentWordBitsLeft,e),i=this._currentWord>>>32-t;if(e>32)throw new Error("Cannot read more than 32 bits at a time");return this._currentWordBitsLeft-=t,this._currentWordBitsLeft>0?this._currentWord<<=t:this._totalBytes-this._bufferIndex>0&&this._fillCurrentWord(),(t=e-t)>0&&this._currentWordBitsLeft?i<<t|this.readBits(t):i}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(0),a=(s=i(33))&&s.__esModule?s:{default:s};const{REMUX_EVENTS:n,LOADER_EVENTS:o}=r.EVENTS;class d{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[],this.videoLastSample=null,this.audioLastSample=null,this._videoLargeGap=0,this._audioLargeGap=0}init(){this.before(n.REMUX_MEDIA,this.doFix.bind(this)),this.on(o.LOADER_COMPLETE,()=>{this.videoLastSample&&this.videoTrack.samples.unshift(this.videoLastSample)})}reset(){this.nextAudioDts=null,this.nextVideoDts=null,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.videoLastSample=null,this.audioLastSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:e,isFirstVideoSamples:t}=this.getFirstSample();this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples);const{changed:i,changedIdx:s}=d.detactChangeStream(this.videoTrack.samples);i&&!e?this.fixChangeStreamVideo(s):this.doFixVideo(t);const{changed:r,changedIdx:a}=d.detactChangeStream(this.audioTrack.samples);r?this.fixChangeStreamAudio(a):this.doFixAudio(e),this.removeInvalidSamples()}doFixVideo(e,t){let{samples:i,meta:s}=this.videoTrack;for(let e=0,t=i.length;e<t;e++){const t=i[e];t.originDts=t.dts}if(s.frameRate&&!1===s.frameRate.fixed)return;if(!i||!i.length||!this._firstVideoSample)return;const r=i[0];if(this._videoLargeGap>0&&d.doFixLargeGap(i,this._videoLargeGap),r.dts!==this._firstVideoSample.dts&&t&&(t&&(this.nextVideoDts=t),this._videoLargeGap=this.nextVideoDts-r.dts,d.doFixLargeGap(i,this._videoLargeGap)),e&&this._firstAudioSample){const e=this._firstVideoSample.dts,t=e-this._firstAudioSample.dts;if(t>2*s.refSampleDuration){const a=Math.floor(t/s.refSampleDuration);for(let t=0;t<a;t++){const a=Object.assign({},r);a.dts=e-(t+1)*s.refSampleDuration,a.pts=a.dts+a.cts,i.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}}else t<-2*s.refSampleDuration&&(this._videoLargeGap=-1*t,d.doFixLargeGap(i,-1*t))}const a=i.pop();if(i.length&&(i[i.length-1].duration=a.dts-i[i.length-1].dts),this.videoLastSample){const e=this.videoLastSample,t=r.dts-e.dts;e.duration>0&&(e.duration=t,i.unshift(e))}this.videoLastSample=a,this.videoTrack.samples=i}doFixAudio(e,t){let{samples:i,meta:s}=this.audioTrack;if(!i||!i.length)return;for(let e=0,t=i.length;e<t;e++){const t=i[e];t.originDts=t.dts}const r=i.length,n=a.default.getSilentFrame(s.codec,s.channelCount),o=this._firstAudioSample,l=i[0];if(this._audioLargeGap>0&&d.doFixLargeGap(i,this._audioLargeGap),l.dts!==this._firstAudioSample.dts&&(t||d.detectLargeGap(this.nextAudioDts,l))&&(t&&(this.nextAudioDts=t),this._audioLargeGap=this.nextAudioDts-l.dts,d.doFixLargeGap(i,this._audioLargeGap)),this._firstVideoSample&&e){const e=this._firstVideoSample.pts?this._firstVideoSample.pts:this._firstVideoSample.dts+this._firstVideoSample.cts,t=o.dts-e;if(t>s.refSampleDuration){const t=Math.floor((o.dts-e)/s.refSampleDuration);for(let e=0;e<t;e++){const t={data:n,datasize:n.byteLength,dts:o.dts-(e+1)*s.refSampleDuration,filtered:0};i.unshift(t),this.filledAudioSamples.push({dts:t.dts,size:t.data.byteLength})}}else t<-1*s.refSampleDuration&&(this._audioLargeGap=-1*t,d.doFixLargeGap(i,-1*t))}let h;const u=i[0].dts;if(this.nextAudioDts){h=u-this.nextAudioDts;const e=Math.abs(h);if(e>s.refSampleDuration&&1===r&&1===this.lastAudioSamplesLen&&(s.refSampleDurationFixed=void 0),h>2*s.refSampleDuration)if(1===r&&1===this.lastAudioSamplesLen)s.refSampleDurationFixed=void 0!==s.refSampleDurationFixed?s.refSampleDurationFixed+h:s.refSampleDuration+h;else{const e=Math.floor(h/s.refSampleDuration);for(let t=0;t<e;t++){const e=u-(t+1)*s.refSampleDuration,r=Object.assign({},i[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else e<=s.refSampleDuration&&e>0?(i[0].dts=this.nextAudioDts,i[0].pts=this.nextAudioDts):h<0&&d.doFixLargeGap(i,-1*h)}const c=i[i.length-1].originDts,f=i[i.length-1].originDts,p=i.length>=2?c-i[i.length-2].originDts:s.refSampleDuration;this.lastAudioSamplesLen=r,this.nextAudioDts=s.refSampleDurationFixed?f+s.refSampleDurationFixed:f+p,this.lastAudioDts=f,i[i.length-1].duration=p;for(let e=0,t=i.length;e<t;e++){const t=i[e],s=i[e+1];if(!s)break;const r=s.dts-t.dts;i[e].duration=r}this.audioTrack.samples=d.sortAudioSamples(i)}fixChangeStreamVideo(e){const{samples:t,meta:i}=this.videoTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixVideo(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.videoTrack.samples=t.slice(0,e),this.doFixVideo(!1),this.videoTrack.samples=t.slice(e),this.doFixVideo(!1,l),this.videoTrack.samples=a.concat(n)}fixChangeStreamAudio(e){const{samples:t,meta:i}=this.audioTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixAudio(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.audioTrack.samples=a,this.doFixAudio(!1),this.audioTrack.samples=n,this.doFixAudio(!1,l),this.audioTrack.samples=a.concat(n)}getFirstSample(){let{samples:e}=this.videoTrack,{samples:t}=this.audioTrack,i=!1,s=!1;return!this._firstVideoSample&&e.length&&(this._firstVideoSample=d.findFirstVideoSample(e),i=!0),!this._firstAudioSample&&t.length&&(this._firstAudioSample=d.findFirstAudioSample(t),s=!0),{isFirstVideoSamples:i,isFirstAudioSamples:s}}fixRefSampleDuration(e,t){const i="video"===e.type,s=i?this.allVideoSamplesCount:this.allAudioSamplesCount,r=i?this._firstVideoSample.dts:this._firstAudioSample.dts,a=i?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration)){if(t.length>=1){const i=t[t.length-1].dts;e.refSampleDuration=Math.floor((i-r)/(s+a-1))}}else if(e.refSampleDuration&&t.length>=5){const i=(t[t.length-1].dts-t[0].dts)/(t.length-1);e.refSampleDuration=Math.floor(Math.abs(e.refSampleDuration-i)<=5?e.refSampleDuration:i)}}recordSamplesCount(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}removeInvalidSamples(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter((e,i)=>e===t||e.dts>t.dts),this.videoTrack.samples=this.videoTrack.samples.filter((t,i)=>t===e||t.dts>e.dts)}getStreamChangeStart(e){return e.options&&e.options.start?e.options.start-this.dtsBase:1/0}static sortAudioSamples(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}static findFirstAudioSample(e){return e&&0!==e.length?d.sortAudioSamples(e)[0]:null}static findFirstVideoSample(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,i=t.length;e<i;e++)if(t[e].isKeyframe)return t[e]}static detectLargeGap(e,t){if(null===e)return;const i=t.dts||0,s=e-i>=1e3||i-e>=1e3,r=t.options&&t.options.discontinue;return s||r}static doFixLargeGap(e,t){for(let i=0,s=e.length;i<s;i++){const s=e[i];s.dts+=t,s.pts&&(s.pts+=t)}}static detactChangeStream(e){let t=!1,i=-1;for(let s=0,r=e.length;s<r;s++)if(e[s].options&&e[s].options.meta){t=!0,i=s;break}return{changed:t,changedIdx:i}}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks&&this.tracks.audioTrack?this.tracks.audioTrack:{samples:[],meta:{}}}get videoTrack(){return this.tracks&&this.tracks.videoTrack?this.tracks.videoTrack:{samples:[],meta:{}}}get dtsBase(){const e=this._context.getInstance("MP4_REMUXER");return e?e._dtsBase:0}}t.default=d},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{static getSilentFrame(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new s,this.sources[e]}clear(){this.sources={}}destroy(){this.sources={}}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(0);const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};t.default=class{constructor(){this.offset=0,this.readOffset=this.offset}resolve(e,t){if(t<3)throw new Error("not enough data for metainfo");const i={},s=this.parseValue(e),r=this.parseValue(e,t-s.bodySize);return i[s.data]=r.data,this.resetStatus(),i}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(e){const t=new DataView(e,this.readOffset).getUint16(0,!s.isLe);let i="";i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}parseDate(e,t){const i=new DataView(e,this.readOffset,t);let r=i.getFloat64(0,!s.isLe);return r+=60*i.getInt16(8,!s.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(e,t){const i=this.parseString(e,t),s=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:s.data},bodySize:i.bodySize+s.bodySize,isObjEnd:s.isObjEnd}}parseLongString(e){const t=new DataView(e,this.readOffset).getUint32(0,!s.isLe);let i="";return i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}parseValue(e,t){let i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:d,MIX_ARRAY:l,OBJECT_END:h,STRICT_ARRAY:u,DATE:c,LONE_STRING:f}=r,p=new DataView(i,this.readOffset,t);let m=!1;const g=p.getUint8(0);let _=1;this.readOffset+=1;let y=null;switch(g){case a:y=p.getFloat64(1,!s.isLe),this.readOffset+=8,_+=8;break;case n:y=!!p.getUint8(1),this.readOffset+=1,_+=1;break;case o:{const e=this.parseString(i);y=e.data,_+=e.bodySize;break}case d:{y={};let e=0;for(16777215&p.getUint32(t-4,!s.isLe)&&(e=3);_<t-4;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(this.readOffset+=3,_+=3);break}case l:{y={},_+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!s.isLe))&&(e=3);_<t-8;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(_+=3,this.readOffset+=3);break}case h:y=null,m=!0;break;case u:{y=[];const e=p.getUint32(1,!s.isLe);_+=4,this.readOffset+=4;for(let s=0;s<e;s++){const e=this.parseValue(i,t-_);y.push(e.data),_+=e.bodySize}break}case c:{const e=this.parseDate(i,t-1);y=e.data,_+=e.bodySize;break}case f:{const e=this.parseLongString(i,t-1);y=e.data,_+=e.bodySize;break}default:_=t}return{data:y,bodySize:_,isObjEnd:m}}}},function(e,t,i){e.exports={Mp4Remuxer:i(37).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(0),a=(s=i(38))&&s.__esModule?s:{default:s};const n=r.EVENTS.REMUX_EVENTS;class o{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e,this.isFirstVideo=!0,this.isFirstAudio=!0,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(n.REMUX_MEDIA,this.remux.bind(this)),this.on(n.REMUX_METADATA,this.onMetaDataReady.bind(this)),this.on(n.DETECT_CHANGE_STREAM,this.resetDtsBase.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}resetDtsBase(){this._dtsBase=0,this._dtsBaseInited=!1}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t;if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");t=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");t=e}let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.mimetype=t.meta.codec,s.init=this.remuxInitSegment(e,t.meta),this.emit(n.INIT_SEGMENT,e)}remuxInitSegment(e,t){let i=new r.Buffer,s=a.default.ftyp(),n=a.default.moov({type:e,meta:t});return i.write(s,n),i}calcDtsBase(e,t){if(!e&&t.samples.length)return t.samples[0].dts;if(!e.samples.length&&!t.samples.length)return;let i=1/0,s=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(s=t.samples[0].dts),this._dtsBase=Math.min(i,s),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e||{};if(!e.samples||!e.samples.length)return;let{samples:i}=t,s=-1,o=null;const d=[],l={samples:[]};let h=1e4;for(;i.length&&h-- >0;){const e=i.shift(),{isKeyframe:t,options:r}=e;if(!this.isFirstAudio&&r&&r.meta){o=this.remuxInitSegment("video",r.meta),r.meta=null,i.unshift(e),r.isContinue||this.resetDtsBase();break}let a,h,u=e.dts-this._dtsBase;-1===s&&(s=u),void 0!==e.pts&&(a=(h=e.pts-this._dtsBase)-u),void 0!==e.cts&&(h=e.cts+u,a=e.cts);let c={buffer:[],size:0};l.samples.push(c),c.buffer.push(e.data),c.size+=e.data.byteLength;let f=0;f=e.duration?e.duration:i.length>=1?i[0].dts-this._dtsBase-u:d.length>=1?d[d.length-1].duration:this.videoMeta.refSampleDuration,this.videoAllDuration+=f,d.push({dts:u,cts:a,pts:h,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:f,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:u,type:"video"}),t&&this.emit(n.RANDOM_ACCESS_POINT,h)}let u=new r.Buffer;if(d.length){const e=a.default.moof({id:t.meta.id,time:s,samples:d}),i=a.default.mdat(l);u.write(e,i),this.writeToSource("video",u)}if(o&&(this.writeToSource("video",o),i.length))return t.samples=i,this._remuxVideo(t);this.isFirstVideo=!1,this.emit(n.MEDIA_SEGMENT,"video");const c=d[d.length-1];this._videoNextDts=c.dts+c.duration,t.samples=[],t.length=0}_remuxAudio(e){const{samples:t}=e||{};let i=-1,s=[],o=null;const d={samples:[]};if(!t||!t.length)return;let l=1e4,h=!1;for(;t.length&&l-- >0;){let e=t.shift();const{data:r,options:a}=e;if(!this.isFirstAudio&&a&&a.meta){o=this.remuxInitSegment("audio",a.meta),a.meta=null,t.unshift(e),a.isContinue||this.resetDtsBase();break}let n=e.dts-this._dtsBase;const l=n;h||(i=n,h=!0);let u=0;u=e.duration?e.duration:this.audioMeta.refSampleDurationFixed?this.audioMeta.refSampleDurationFixed:t.length>=1?t[0].dts-this._dtsBase-n:s.length>=1?s[s.length-1].duration:this.audioMeta.refSampleDuration,this.audioAllDuration+=u;const c={dts:n,pts:n,cts:0,size:r.byteLength,duration:e.duration?e.duration:u,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:l,type:"audio"};let f={buffer:[],size:0};f.buffer.push(r),f.size+=r.byteLength,d.samples.push(f),s.push(c)}const u=new r.Buffer;if(s.length){const t=a.default.moof({id:e.meta.id,time:i,samples:s}),r=a.default.mdat(d);u.write(t,r),this.writeToSource("audio",u)}if(o&&(this.writeToSource("audio",o),t.length))return e.samples=t,this._remuxAudio(e);this.isFirstAudio=!1,this.emit(n.MEDIA_SEGMENT,"audio",u);const c=s[s.length-1];this._videoNextDts=c.dts+c.duration,e.samples=[],e.length=0}writeToSource(e,t){let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.data.push(t)}initSilentAudio(e,t){const i=o.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=o},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(0);class r{static size(e){return s.Buffer.writeUint32(e)}static initBox(e,t){const i=new s.Buffer;for(var a=arguments.length,n=Array(a>2?a-2:0),o=2;o<a;o++)n[o-2]=arguments[o];return i.write.apply(i,[r.size(e),r.type(t)].concat(n)),i.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov(e){let t,{type:i,meta:s}=e,a=8,n=r.mvhd(s.duration,s.timescale);t="video"===i?r.videoTrak(s):r.audioTrak(s);let o=r.mvex(s.duration,s.timescale||1e3,s.id);return[n,t,o].forEach(e=>{a+=e.byteLength}),r.initBox(a,"moov",n,t,o)}static mvhd(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3,i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),s=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static audioTrak(e){let t=8,i=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),s=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static tkhd(e){let t=e.id,i=e.duration,s=e.width,a=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>>8&255,255&s,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new s.Buffer,i=e.duration,a=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=r.mdhd(e.timescale,e.duration),s=r.hdlr(e.type),a=r.minf(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",i,s,a)}static mdhd(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3,t=arguments[1],i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+i.byteLength,"mdhd",r.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice.apply(t,[8,4].concat([115,111,117,110])),t.splice.apply(t,[24,13].concat([83,111,117,110,100,72,97,110,100,108,101,114,0]))),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?r.vmhd():r.smhd(),s=r.dinf(),a=r.stbl(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",i,s,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new s.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=r.stsd(e),s=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[i,s,a,n,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",i,s,a,n,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=r.esds(e.config);return r.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[43,146,8,0];const t=e.length;let i=new s.Buffer,a=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(r.size(8+a.byteLength),r.type("esds"),a),i.buffer}static avc1(e){let t=new s.Buffer,i=e.width,a=e.height,n=e.parRatio.height,o=e.parRatio.width,d=e.avcc,l=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),h=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),u=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+l.byteLength+d.byteLength+h.byteLength),r.type("avc1"),l,r.size(8+d.byteLength),r.type("avcC"),d,r.size(20),r.type("btrt"),h,r.size(16),r.type("pasp"),u),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];let t=arguments[2],i=new s.Buffer,a=s.Buffer.writeUint32(e);return i.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),a,r.trex(t)),i.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=r.mfhd(),s=r.traf(e);return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",i,s)}static mfhd(){let e=s.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,i=r.tfhd(e.id),s=r.tfdt(e.time),a=r.sdtp(e),n=r.trun(e,a.byteLength);return[i,s,n,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",i,s,n,a)}static tfhd(e){let t=s.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),s.Buffer.writeUint32(e))}static trun(e,t){let i=new s.Buffer,a=s.Buffer.writeUint32(e.samples.length),n=s.Buffer.writeUint32(92+16*e.samples.length+t);return i.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new s.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,s=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([s]))}),t.buffer}static mdat(e){let t=new s.Buffer,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(r.size(i),r.type("mdat"));let a=new Uint8Array(i),n=0;return a.set(t.buffer,n),n+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{a.set(e,n),n+=e.byteLength})}),a}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},function(e,t,i){e.exports={FetchLoader:i(40).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=i(0).EVENTS.LOADER_EVENTS;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this._destroyed=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(s.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let i=this;this.url=e,this._canceled=!1;let r=this.getParams(t);return i.loading=!0,fetch(this.url,r).then((function(e){if(e.ok)return i.status=e.status,i._onFetchResponse(e);i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,new Error("invalid response."))})).catch((function(e){throw i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,e),new Error(e.message)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);this._loaderTaskNo++;let r=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case 2:e.json().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 1:e.text().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 3:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(new Uint8Array(e)),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 0:default:return this._onReader(e.body.getReader(),r)}}_onReader(e,t){let i=this._context.getInstance(this.buffer);if(!i&&this._reader||this._destroyed)try{this._reader.cancel()}catch(e){}if(this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then((function(a){if(!r._canceled&&!r._destroyed)return a.done?(r.loading=!1,r.status=0,void r.emit(s.LOADER_COMPLETE,i)):(i.push(a.value),r.emit(s.LOADER_DATALOADED,i),r._onReader(e,t));if(r._reader)try{r._reader.cancel()}catch(e){}})).catch(e=>{r.loading=!1,r.emit(s.LOADER_ERROR,r.TAG,e)})}getParams(e){let t=Object.assign({},e),i=new Headers,s={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}if("object"==typeof t.headers){let e=t.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(s.mode="same-origin"),t.withCredentials&&(s.credentials="include"),s}cancel(){if(this._reader){try{this._reader.cancel()}catch(e){}this._reader=null,this.loading=!1}this._canceled=!0}destroy(){this._destroyed=!0,this.cancel()}}}]))},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,i){"use strict";var s=a(i(/*! xgplayer-flv-live */"../xgplayer-flv-live/dist/index.js")),r=a(i(/*! xgplayer-flv-vod */"../xgplayer-flv-vod/dist/index.js"));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t.isLive?new s.default(t):new r.default(t)}},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!***************************!*\
  !*** external "xgplayer" ***!
  \***************************/
/*! no static exports found */function(t,i){t.exports=e}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllci1mbHYvVXNlcnMvbGVvbmFyZG8vRG9jdW1lbnRzL2Zyb250LWVuZC9wbGF5ZXIveGdwbGF5ZXIvbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItYnVmZmVyL3NyYy9idWZmZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWJ1ZmZlci9zcmMvcHJlc291Y2UuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWJ1ZmZlci9zcmMvdHJhY2suanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWNvZGVjL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1jb2RlYy9zcmMvYWFjL2FhYy1oZWxwZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWNvZGVjL3NyYy9jb21wYXRpYmlsaXR5LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1jb2RlYy9zcmMvaDI2NC9uYWx1bml0L2dvbG9tYi5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItY29kZWMvc3JjL2gyNjQvbmFsdW5pdC9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItY29kZWMvc3JjL2gyNjQvbmFsdW5pdC9zcHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1kZW11eC9zcmMvZmx2L2FtZi1wYXJzZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L3NyYy9mbHYvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L3NyYy9obHMvZGVtdXhlci9tM3U4cGFyc2VyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1kZW11eC9zcmMvaGxzL2RlbXV4ZXIvdHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L3NyYy9obHMvcGxheWxpc3QuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWxvYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItbG9hZGVyL3NyYy9mZXRjaC1sb2FkZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXJlbXV4L2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1yZW11eC9zcmMvbXA0L2ZtcDQuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXJlbXV4L3NyYy9tcDQvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9ub2RlX21vZHVsZXMvY29uY2F0LXR5cGVkLWFycmF5L2xpYi9jb25jYXQuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL25vZGVfbW9kdWxlcy9jb25jYXQtdHlwZWQtYXJyYXkvbGliL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvY29uc3RhbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL2NvbnN0YW50cy93b3JrZXItY29tbWFuZHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9jb250ZXh0LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvY3J5cHRvL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvZW52L2lzbGUuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9lbnYvc25pZmZlci5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL2Vudi91dGY4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL21lZGlhLWluZm8uanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvbWVkaWEtc2FtcGxlLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL21lZGlhLXNlZ21lbnQtbGlzdC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy9tZWRpYS1zZWdtZW50LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL3RyYWNrLW1ldGEuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvdHJhY2stc2FtcGxlLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbXNlL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvd3JpdGUvYnVmZmVyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvd3JpdGUvc3RyZWFtLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3NyYy9mbHYtbGl2ZS5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyLWZsdi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6L3hncGxheWVyLWZsdi9leHRlcm5hbCBcInhncGxheWVyXCIiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4tdm9kL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi9leHRlcm5hbCBcInhncGxheWVyXCIiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfeGdwbGF5ZXJfXyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJ0YXJnZXQiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uY2F0IiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJ0aGlzIiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiJGdldE1heExpc3RlbmVycyIsInRoYXQiLCJfYWRkTGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwiVHlwZUVycm9yIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsInB1c2giLCJsZW5ndGgiLCJ3YXJuZWQiLCJ3IiwiRXJyb3IiLCJTdHJpbmciLCJlbWl0dGVyIiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIm9uY2VXcmFwcGVyIiwiYXJndW1lbnRzIiwiZmlyZWQiLCJyZW1vdmVMaXN0ZW5lciIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwiYXJyIiwicmV0IiwiQXJyYXkiLCJhcnJheUNsb25lIiwibGlzdGVuZXJDb3VudCIsImNvcHkiLCJzZXQiLCJhcmciLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXJyb3IiLCJlciIsImVyciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwiaGFuZGxlciIsImxlbiIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwib24iLCJwcmVwZW5kTGlzdGVuZXIiLCJvbmNlIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3QiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsImluZGV4IiwicG9wIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwia2V5cyIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJUcmFjayIsImRlZmF1bHQiLCJUcmFja3MiLCJBdWRpb1RyYWNrIiwiVmlkZW9UcmFjayIsIlhnQnVmZmVyIiwiUmVtdXhCdWZmZXIiLCJQcmVTb3VyY2UiLCJjb25zdHJ1Y3RvciIsImhpc3RvcnlMZW4iLCJhcnJheSIsIm9mZnNldCIsImRhdGEiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsIl9zaGlmdEJ1ZmZlciIsInNsaWNlIiwidG1wb2ZmIiwidG1wIiwidGVtcGxlbmd0aCIsImNsZWFyIiwiZGVzdHJveSIsInRvSW50Iiwic3RhcnQiLCJyZXRJbnQiLCJ2aWRlbyIsImF1ZGlvIiwiU291cmNlIiwibWltZXR5cGUiLCJzb3VyY2VzIiwiZ2V0U291cmNlIiwic291cmNlIiwiY3JlYXRlU291cmNlIiwiaWQiLCJzZXF1ZW5jZU51bWJlciIsInNhbXBsZXMiLCJkcm9wcGVkU2FtcGxlcyIsInJlc2V0IiwiZGlzdHJveSIsInN1cGVyIiwiVEFHIiwiZHJvcHBlZCIsImF1ZGlvVHJhY2siLCJ2aWRlb1RyYWNrIiwiTmFsdW5pdCIsIlNwc1BhcnNlciIsIkNvbXBhdGliaWxpdHkiLCJjb2RlYyIsImNoYW5uZWxDb3VudCIsIlJFTVVYX0VWRU5UUyIsIkxPQURFUl9FVkVOVFMiLCJFVkVOVFMiLCJuZXh0QXVkaW9EdHMiLCJuZXh0VmlkZW9EdHMiLCJsYXN0QXVkaW9TYW1wbGVzTGVuIiwibGFzdFZpZGVvU2FtcGxlc0xlbiIsImxhc3RWaWRlb0R0cyIsImxhc3RBdWRpb0R0cyIsImFsbEF1ZGlvU2FtcGxlc0NvdW50IiwiYWxsVmlkZW9TYW1wbGVzQ291bnQiLCJfZmlyc3RBdWRpb1NhbXBsZSIsIl9maXJzdFZpZGVvU2FtcGxlIiwiZmlsbGVkQXVkaW9TYW1wbGVzIiwiZmlsbGVkVmlkZW9TYW1wbGVzIiwidmlkZW9MYXN0U2FtcGxlIiwiYXVkaW9MYXN0U2FtcGxlIiwiX3ZpZGVvTGFyZ2VHYXAiLCJfYXVkaW9MYXJnZUdhcCIsImJlZm9yZSIsIlJFTVVYX01FRElBIiwiZG9GaXgiLCJMT0FERVJfQ09NUExFVEUiLCJpc0ZpcnN0QXVkaW9TYW1wbGVzIiwiaXNGaXJzdFZpZGVvU2FtcGxlcyIsImdldEZpcnN0U2FtcGxlIiwicmVjb3JkU2FtcGxlc0NvdW50IiwiZml4UmVmU2FtcGxlRHVyYXRpb24iLCJtZXRhIiwiY2hhbmdlZCIsInZpZGVvQ2hhbmdlZCIsImNoYW5nZWRJZHgiLCJ2aWRlb0NoYW5nZWRJZHgiLCJkZXRhY3RDaGFuZ2VTdHJlYW0iLCJmaXhDaGFuZ2VTdHJlYW1WaWRlbyIsImRvRml4VmlkZW8iLCJhdWRpb0NoYW5nZWQiLCJhdWRpb0NoYW5nZWRJZHgiLCJmaXhDaGFuZ2VTdHJlYW1BdWRpbyIsImRvRml4QXVkaW8iLCJyZW1vdmVJbnZhbGlkU2FtcGxlcyIsImZpcnN0Iiwic3RyZWFtQ2hhbmdlU3RhcnQiLCJ2aWRlb1NhbXBsZXMiLCJzYW1wbGUiLCJvcmlnaW5EdHMiLCJkdHMiLCJmcmFtZVJhdGUiLCJmaXhlZCIsImZpcnN0U2FtcGxlIiwiZG9GaXhMYXJnZUdhcCIsInZpZGVvRmlyc3REdHMiLCJnYXAiLCJyZWZTYW1wbGVEdXJhdGlvbiIsImZpbGxDb3VudCIsIk1hdGgiLCJmbG9vciIsImNsb25lZEZpcnN0U2FtcGxlIiwiYXNzaWduIiwicHRzIiwiY3RzIiwic2l6ZSIsImN1ckxhc3RTYW1wbGUiLCJkdXJhdGlvbiIsImF1ZGlvU2FtcGxlcyIsInNhbXBsZXNMZW4iLCJzaWxlbnRGcmFtZSIsIkFBQyIsImdldFNpbGVudEZyYW1lIiwiX2ZpcnN0U2FtcGxlIiwiZGV0ZWN0TGFyZ2VHYXAiLCJ2aWRlb0ZpcnN0UHRzIiwic2lsZW50U2FtcGxlQ291bnQiLCJzaWxlbnRTYW1wbGUiLCJkYXRhc2l6ZSIsImZpbHRlcmVkIiwiZmlyc3REdHMiLCJhYnNHYXAiLCJhYnMiLCJyZWZTYW1wbGVEdXJhdGlvbkZpeGVkIiwic2lsZW50RnJhbWVDb3VudCIsImNvbXB1dGVkIiwibGFzdE9yaWdpbkR0cyIsImxhc3REdHMiLCJsYXN0U2FtcGxlRHVyYXRpb24iLCJjdXJyZW50IiwibmV4dCIsInNvcnRBdWRpb1NhbXBsZXMiLCJjaGFuZ2VJZHgiLCJwcmV2RHRzIiwiZ2V0U3RyZWFtQ2hhbmdlU3RhcnQiLCJjdXJEdHMiLCJvcHRpb25zIiwiaXNDb250aW51ZSIsImZpcnN0UGFydFNhbXBsZXMiLCJzZWNvbmRQYXJ0U2FtcGxlcyIsImZpcnN0UGFydER1cmF0aW9uIiwiZmluZEZpcnN0VmlkZW9TYW1wbGUiLCJmaW5kRmlyc3RBdWRpb1NhbXBsZSIsImlzVmlkZW8iLCJhbGxTYW1wbGVzQ291bnQiLCJmaWxsZWRTYW1wbGVzQ291bnQiLCJkdXJhdGlvbkF2ZyIsImZpbHRlciIsImR0c0Jhc2UiLCJJbmZpbml0eSIsInNvcnQiLCJhIiwiYiIsInNvcnRlZCIsImlzS2V5ZnJhbWUiLCJuZXh0RHRzIiwiY29uZDEiLCJjb25kMiIsImRpc2NvbnRpbnVlIiwiX2NvbnRleHQiLCJnZXRJbnN0YW5jZSIsInRyYWNrcyIsInJlbXV4ZXIiLCJfZHRzQmFzZSIsInVpbnQ4YXJyYXkiLCJfYnVmZmVyIiwiX2J1ZmZlckluZGV4IiwiX3RvdGFsQnl0ZXMiLCJfdG90YWxCaXRzIiwiX2N1cnJlbnRXb3JkIiwiX2N1cnJlbnRXb3JkQml0c0xlZnQiLCJfZmlsbEN1cnJlbnRXb3JkIiwiYnVmZmVyQnl0ZXNMZWZ0IiwiYnl0ZXNSZWFkIiwibWluIiwid29yZCIsInN1YmFycmF5IiwiRGF0YVZpZXciLCJidWZmZXIiLCJnZXRVaW50MzIiLCJyZWFkQml0cyIsImJpdHMiLCJ2YWx1IiwicmVhZEJvb2wiLCJyZWFkQnl0ZSIsIl9za2lwTGVhZGluZ1plcm8iLCJ6ZXJvQ291bnQiLCJyZWFkVUVHIiwibGVhZGluZ1plcm9zIiwicmVhZFNFRyIsImJ1ZiIsImRhdGF2aWV3IiwiZ2V0SW50MzIiLCJnZXRJbnQxNiIsImdldEludDgiLCJnZXRBbm5leGJOYWxzIiwiZ2V0QXZjY05hbHMiLCJuYWxzIiwiZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIiLCJwb3MiLCJlbmQiLCJoZWFkZXIiLCJoZWFkZXJMZW5ndGgiLCJza2lwIiwidW5pdCIsImJvZHkiLCJhbmFseXNlTmFsIiwibmRyIiwiaWRyIiwic3BzIiwicGFyc2VTUFMiLCJwcHMiLCJTUFNQYXJzZXIiLCJzcmMiLCJzcmNMZW5ndGgiLCJkc3QiLCJkc3RJZHgiLCJyYnNwIiwiX2Vic3AycmJzcCIsImdiIiwiR29sb21iIiwicHJvZmlsZUlkYyIsImxldmVsSWRjIiwicHJvZmlsZV9zdHJpbmciLCJnZXRQcm9maWxlU3RyaW5nIiwibGV2ZWxfc3RyaW5nIiwiZ2V0TGV2ZWxTdHJpbmciLCJjaHJvbWFfZm9ybWF0X2lkYyIsImNocm9tYV9mb3JtYXQiLCJiaXRfZGVwdGgiLCJzY2FsaW5nX2xpc3RfY291bnQiLCJfc2tpcFNjYWxpbmdMaXN0IiwicGljX29yZGVyX2NudF90eXBlIiwibnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZSIsInBpY193aWR0aF9pbl9tYnNfbWludXMxIiwicGljX2hlaWdodF9pbl9tYXBfdW5pdHNfbWludXMxIiwiZnJhbWVfbWJzX29ubHlfZmxhZyIsImZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQiLCJmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCIsImZyYW1lX2Nyb3BfdG9wX29mZnNldCIsImZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCIsInBhcl93aWR0aCIsInBhcl9oZWlnaHQiLCJmcHMiLCJmcHNfZml4ZWQiLCJmcHNfbnVtIiwiZnBzX2RlbiIsImFzcGVjdF9yYXRpb19pZGMiLCJwYXJfd190YWJsZSIsInBhcl9oX3RhYmxlIiwibnVtX3VuaXRzX2luX3RpY2siLCJ0aW1lX3NjYWxlIiwicGFyU2NhbGUiLCJjcm9wX3VuaXRfeCIsImNyb3BfdW5pdF95IiwiY29kZWNfd2lkdGgiLCJjb2RlY19oZWlnaHQiLCJwcmVzZW50X3dpZHRoIiwiY2VpbCIsImNocm9tYV9mb3JtYXRfc3RyaW5nIiwiZ2V0Q2hyb21hRm9ybWF0U3RyaW5nIiwiZnJhbWVfcmF0ZSIsInBhcl9yYXRpbyIsIndpZHRoIiwiaGVpZ2h0IiwiY29kZWNfc2l6ZSIsInByZXNlbnRfc2l6ZSIsImxhc3Rfc2NhbGUiLCJuZXh0X3NjYWxlIiwiZGVsdGFfc2NhbGUiLCJ0b0ZpeGVkIiwiY2hyb21hIiwic3BzQ29uZmlnIiwiY29kZWNXaWR0aCIsImNvZGVjSGVpZ2h0IiwicHJlc2VudFdpZHRoIiwicHJlc2VudEhlaWdodCIsInByb2ZpbGUiLCJsZXZlbCIsImJpdERlcHRoIiwiY2hyb21hRm9ybWF0IiwicGFyUmF0aW8iLCJmcHNEZW4iLCJmcHNOdW0iLCJ0aW1lc2NhbGUiLCJNM1U4UGFyc2VyIiwiVHNEZW11eGVyIiwiUGxheWxpc3QiLCJGbHZEZW11eGVyIiwiREFUQV9UWVBFUyIsIk5VTUJFUiIsIkJPT0xFQU4iLCJTVFJJTkciLCJPQkpFQ1QiLCJNSVhfQVJSQVkiLCJPQkpFQ1RfRU5EIiwiU1RSSUNUX0FSUkFZIiwiREFURSIsIkxPTkVfU1RSSU5HIiwicmVhZE9mZnNldCIsInJlc29sdmUiLCJtZXRhRGF0YSIsInBhcnNlVmFsdWUiLCJib2R5U2l6ZSIsInJlc2V0U3RhdHVzIiwicGFyc2VTdHJpbmciLCJzdHJMZW4iLCJnZXRVaW50MTYiLCJpc0xlIiwic3RyIiwiVVRGOCIsImRlY29kZSIsInBhcnNlRGF0ZSIsImR2IiwidHMiLCJnZXRGbG9hdDY0IiwiRGF0ZSIsInBhcnNlT2JqZWN0IiwiaXNPYmpFbmQiLCJwYXJzZUxvbmdTdHJpbmciLCJBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiZ2V0VWludDgiLCJvYmpFbmRTaXplIiwiYW1mT2JqIiwiaXNPYmplY3RFbmQiLCJhbWZWYXIiLCJhcnJMZW5ndGgiLCJzY3JpcHQiLCJkYXRlIiwibG9uZ1N0ciIsIkRFTVVYX0VWRU5UUyIsIl9maXJzdEZyYWdtZW50TG9hZGVkIiwiX3RyYWNrTnVtIiwiX2hhc1NjcmlwdCIsIkRFTVVYX1NUQVJUIiwiZG9QYXJzZUZsdiIsInN0cmVhbUZsYWciLCJyZXN1bHQiLCJoYXNWaWRlbyIsImhhc0F1ZGlvIiwibG9hZGVyQnVmZmVyIiwiY2h1bmsiLCJsb29wTWF4IiwiX3BhcnNlRmx2VGFnIiwiREVNVVhfQ09NUExFVEUiLCJwYXJzZUZsdkhlYWRlciIsImlzRmx2RmlsZSIsInBsYXlUeXBlIiwiZ2V0UGxheVR5cGUiLCJpbml0VmlkZW9UcmFjayIsImluaXRBdWRpb1RyYWNrIiwiREVNVVhfRVJST1IiLCJWaWRlb1RyYWNrTWV0YSIsIkF1ZGlvVHJhY2tNZXRhIiwiX3BhcnNlRmx2VGFnSGVhZGVyIiwiX3Byb2Nlc3NDaHVuayIsInRhZ1R5cGUiLCJ0aW1lc3RhbXAiLCJ0aW1lc3RhbXBFeHQiLCJfcGFyc2VTY3JpcHREYXRhIiwiX3BhcnNlQUFDRGF0YSIsIl9wYXJzZUhldmNEYXRhIiwiaW5mbyIsIkFNRlBhcnNlciIsIm9uTWV0YURhdGEiLCJtZWRpYUluZm8iLCJoc2FBdWRpbyIsIl9kYXRhc2l6ZVZhbGlkYXRvciIsIk1FRElBX0lORk8iLCJoYXNTcGVjaWZpY0NvbmZpZyIsImF1ZGlvc2FtcGxlcmF0ZSIsInNhbXBsZVJhdGUiLCJhdWRpb2NoYW5uZWxzIiwic2FtcGxlUmF0ZUluZGV4IiwiZnJhbWVyYXRlIiwiX2FhY1NlcXVlbmNlSGVhZGVyUGFyc2VyIiwib2JqZWN0VHlwZSIsIl9zd2l0Y2hBdWRpb1NhbXBsZVJhdGUiLCJmcmFtZUxlbmd0aCIsImRlcGVuZHNPbkNvcmVDb2RlciIsImV4dGVuc2lvbkZsYWdJbmRleCIsImV4dGVuc2lvblNhbXBsaW5nSW5kZXgiLCJjb25maWciLCJ1c2VyQWdlbnQiLCJuYXZpZ2F0b3IiLCJ0b0xvd2VyQ2FzZSIsInNhbXBsaW5nSW5kZXgiLCJpbmRleE9mIiwidHJhY2siLCJmb3JtYXQiLCJfaGFzQXVkaW9TZXF1ZW5jZSIsIl9zd2l0Y2hBdWRpb1NhbXBsaW5nRnJlcXVlbmN5IiwiZnJhbWVMZW50aCIsImF1ZGlvU2FtcGxlUmF0ZSIsImF1ZGlvU2FtcGxlUmF0ZUluZGV4IiwidmFsaWRhdGUiLCJhYWNIZWFkZXIiLCJhdWRpb01lZGlhIiwiTUVUQURBVEFfUEFSU0VEIiwiQVVESU9fTUVUQURBVEFfQ0hBTkdFIiwiX21ldGFDaGFuZ2UiLCJmcmFtZVR5cGUiLCJjb2RlY0lEIiwiYXZjUGFja2V0VHlwZSIsInBhcnNlSW50IiwibmFsdSIsInNpemVzIiwiYXZjY2xlbmd0aCIsIl9hdmNTZXF1ZW5jZUhlYWRlclBhcnNlciIsIl9oYXNWaWRlb1NlcXVlbmNlIiwiVklERU9fTUVUQURBVEFfQ0hBTkdFIiwiY29uZmlndXJhdGlvblZlcnNpb24iLCJhdmNQcm9maWxlSW5kaWNhdGlvbiIsInByb2ZpbGVDb21wYXRpYmlsaXR5IiwiYXZjTGV2ZWxJbmRpY2F0aW9uIiwibmFsVW5pdExlbmd0aCIsIm51bU9mU3BzIiwiaiIsImNvZGVjU3RyaW5nIiwiaCIsInRvU3RyaW5nIiwibnVtT2ZQcHMiLCJ0b1ZpZGVvTWV0YSIsInZpZGVvTWVkaWEiLCJhdmNjIiwic2FtcGxpbmdGcmVxdWVuY3lJbmRleCIsIl9zd2l0Y2hBdWRpb0NoYW5uZWwiLCJkYXRhc2l6ZUNvbmZpcm0iLCJ0ZXh0IiwiYmFzZXVybCIsInNwbGl0IiwicmVmcyIsInJlZiIsIm1hdGNoIiwibmV4dERpc2NvbnRpbnVlIiwicmVmbSIsInJlZmQiLCJ2ZXJzaW9uIiwic2VxdWVuY2UiLCJ0YXJnZXRkdXJhdGlvbiIsInBhcnNlRmxvYXQiLCJwYXJzZUZyYWciLCJwYXJzZURlY3J5cHQiLCJmcmFncyIsImZyZWciLCJuZXh0bGluZSIsImNoYXJBdCIsInVybCIsInVybHMiLCJlbmNyeXB0IiwiY21kIiwibWV0aG9kIiwidXJpIiwiaXYiLCJpdmIiLCJpbSIsInN1YnN0ciIsIlN0cmVhbVR5cGUiLCJjb25maWdzIiwiZGVtdXhpbmciLCJwYXQiLCJwbXQiLCJfaGFzVmlkZW9NZXRhIiwiX2hhc0F1ZGlvTWV0YSIsImRlbXV4IiwiZnJhZyIsImlucHV0QnVmZmVyIiwicGVzZXMiLCJ0c1N0cmVhbSIsIlN0cmVhbSIsInJlYWQiLCJwZXMiLCJwaWQiLCJFUyIsInBheWxvYWQiLCJzdHJlYW0iLCJBdWRpb09wdGlvbnMiLCJWaWRlb09wdGlvbnMiLCJlcGVzZXMiLCJNZXJnZSIsInB1c2hBdWRpb1NhbXBsZSIsInB1c2hWaWRlb1NhbXBsZSIsIl90cmFja3MiLCJmcmVxdWVuY2UiLCJjaGFubmVsIiwiYXVkaW9PYmplY3RUeXBlIiwiYXVkaW9Db25maWciLCJmcmVxdWVuY3lJbmRleCIsIm1ldGFFcXVhbCIsImNvbXBhaXJlTWV0YSIsIkF1ZGlvVHJhY2tTYW1wbGUiLCJnZXROYWx1bml0cyIsInNhbXBsZUxlbmd0aCIsIm5hbCIsInNhclJhdGlvIiwic2FyX3JhdGlvIiwiZ2V0QXZjYyIsIlZpZGVvVHJhY2tTYW1wbGUiLCJkZXN0b3J5IiwiYWwiLCJibCIsImlnbm9yZUR1cmF0aW9uIiwiayIsIml0ZW1hIiwiaXRlbWIiLCJjb21wYWlyZUFycmF5IiwiYnVmZmVycyIsInJlYWRIZWFkZXIiLCJyZWFkUGF5bG9hZCIsInBhY2tldCIsInVua25vd25QSURzIiwiUEVTIiwiUEFUIiwiQ0FUIiwiVFNEVCIsInNvbWUiLCJpdGVtIiwiUE1UIiwic3RzIiwiTWVkaWEiLCJzdHJlYW1UeXBlIiwic3luYyIsInJlYWRVaW50OCIsInJlYWRVaW50MTYiLCJwcmlvcml0eSIsInNjcmFtYmxpbmciLCJhZGFwdGF0aW9uIiwiY29udGludWl0eSIsInRhYmVsSUQiLCJ6ZXJvIiwic2VjdGlvbkxlbmd0aCIsInN0cmVhbUlEIiwic2VjdGlvbk51bWJlciIsImxhc3RTZWN0aW9uTnVtYmVyIiwiTiIsInByb2dyYW1OdW1iZXIiLCJwcm9ncmFtIiwidGFibGVJRCIsIm9yZGVyIiwibGFzdE9yZGVyIiwiUENSX1BJRCIsInByb2dyYW1MZW5ndGgiLCJlcyIsIm1hcCIsImFkYXB0YXRpb25MZW5ndGgiLCJhY2Nlc3MiLCJQQ1IiLCJPUENSIiwic3BsaWNlUG9pbnQiLCJ0cmFuc3BvcnRQcml2YXRlIiwiYWRhcHRhdGlvbkZpZWxkIiwiX3N0YXJ0IiwicHJvZ3JhbUNsb2NrQmFzZSIsInJlYWRVaW50MzIiLCJwcm9ncmFtQ2xvY2tFeHRlbnNpb24iLCJvcmlnaW5Qcm9ncmFtQ2xvY2tCYXNlIiwib3JpZ2luUHJvZ3JhbUNsb2NrRXh0ZW5zaW9uIiwic3BsaWNlQ291bnRkb3duIiwidHJhbnNwb3J0UHJpdmF0ZURhdGEiLCJwaWVjZXdpc2UiLCJzZWFtbGVzcyIsImx0d1ZhbGlkIiwibHR3T2Zmc2V0IiwicmVhZFVpbnQyNCIsInBpZWNld2lzZVJhdGUiLCJyZWFkSW50OCIsInNwbGljZVR5cGUiLCJkdHNOZXh0QVUxIiwibWFya2VyMSIsImR0c05leHRBVTIiLCJtYXJrZXIyIiwiZHRzTmV4dEFVMyIsImxhc3RTdHVmZmluZyIsInBhY2tldExlbmd0aCIsInB0c0RUU0ZsYWciLCJlc2NyRmxhZyIsImVzUmF0ZUZsYWciLCJkc21GbGFnIiwiYWRkaXRpb25hbEZsYWciLCJjcmNGbGFnIiwiZXh0ZW5zaW9uRmxhZyIsInBlc0hlYWRlckxlbmd0aCIsIk4xIiwiZXNjciIsImV4IiwiZXNSYXRlIiwiYWRkaXRpb25hbENvcHlJbmZvIiwicGVzQ1JDIiwiYmFjayIsImZxIiwibGF5ZXIiLCJhYnNlbnQiLCJnZXRBdWRpb0NvbmZpZyIsInNlY3Rpb25JbmRpY2F0b3IiLCJjdXJyZW50TmV4dEluZGljYXRvciIsImNyYzMyIiwiZXh0ZW5zaW9uU2FtcGxlSW5kZXgiLCJ0ZXN0IiwiaW5wdXRidWZmZXIiLCJfYmFzZVVSTCIsIl9saXN0IiwiX3RzIiwiZnJhZ0xlbmd0aCIsIl9sYXN0Z2V0IiwiX2F1ZG9jbGVhciIsImF1dG9jbGVhciIsImJhc2VVUkwiLCJkb3dubG9hZGVkIiwiZG93bmxvYWRpbmciLCJkZWxldGVGcmFnIiwidGltZSIsInB1c2hNM1U4IiwiZGVsZXRlcHJlIiwibmV3ZnJhZ2xpc3QiLCJ0c2xpc3QiLCJnZXRUc0xpc3QiLCJ0c25hbWUiLCJpc2xvYWRlZCIsImxvYWRpbmciLCJnZXRUc0J5TmFtZSIsImdldFRzIiwidGltZWxpc3QiLCJjbGVhckRvd25sb2FkZWQiLCJGZXRjaExvYWRlciIsInN0YXR1cyIsIl9yZWFkZXIiLCJfY2FuY2VsZWQiLCJfZGVzdHJveWVkIiwicmVhZHR5cGUiLCJfbG9hZGVyVGFza05vIiwiTEFERVJfU1RBUlQiLCJsb2FkIiwib3B0cyIsIl90aGlzIiwicGFyYW1zIiwiZ2V0UGFyYW1zIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsIl9vbkZldGNoUmVzcG9uc2UiLCJMT0FERVJfRVJST1IiLCJjYXRjaCIsInRhc2tubyIsImpzb24iLCJhcnJheUJ1ZmZlciIsIl9vblJlYWRlciIsImdldFJlYWRlciIsInJlYWRlciIsImNhbmNlbCIsImUiLCJ2YWwiLCJkb25lIiwiTE9BREVSX0RBVEFMT0FERUQiLCJoZWFkZXJzIiwiSGVhZGVycyIsImNhY2hlIiwiY29uZmlnSGVhZGVycyIsImFwcGVuZCIsIm9wdEhlYWRlcnMiLCJjb3JzIiwid2l0aENyZWRlbnRpYWxzIiwiY3JlZGVudGlhbHMiLCJNcDRSZW11eGVyIiwiRm1wNCIsIkJ1ZmZlciIsIndyaXRlVWludDMyIiwiY29udGVudCIsIndyaXRlIiwiZmxhZyIsImluaXRCb3giLCJ0cmFrIiwibXZoZCIsInZpZGVvVHJhayIsImF1ZGlvVHJhayIsIm12ZXgiLCJmb3JFYWNoIiwiYnl0ZXMiLCJ0a2hkIiwibWRpYSIsInNhbXBsZXJhdGUiLCJtZWRpYVRpbWUiLCJtZGhkIiwiaGRsciIsIm1pbmYiLCJleHRlbnNpb24iLCJzcGxpY2UiLCJ2bWhkIiwic21oZCIsImRpbmYiLCJzdGJsIiwic3RzZCIsInN0dHMiLCJzdHNjIiwic3RzeiIsInN0Y28iLCJtcDRhIiwiYXZjMSIsImVzZHMiLCJjb25maWdsZW4iLCJoU3BhY2luZyIsInZTcGFjaW5nIiwiYnRydCIsInBhc3AiLCJ0cmFja0lEIiwibWVoZCIsInRyZXgiLCJtZmhkIiwidHJhZiIsInRmaGQiLCJ0ZmR0Iiwic2R0cCIsInRydW4iLCJzZHRwTGVuZ3RoIiwic2FtcGxlQ291bnQiLCJmbGFncyIsImlzTGVhZGluZyIsImRlcGVuZHNPbiIsImlzRGVwZW5kZWRPbiIsImhhc1JlZHVuZGFuY3kiLCJpc05vblN5bmMiLCJudW0iLCJtZGF0Qm94IiwiY2hhckNvZGVBdCIsIl9pc0R0c0Jhc2VJbml0ZWQiLCJfYXVkaW9OZXh0RHRzIiwiX3ZpZGVvTmV4dER0cyIsIl92aWRlb1NlZ21lbnRMaXN0IiwiTWVkaWFTZWdtZW50TGlzdCIsIl9hdWRpb1NlZ21lbnRMaXN0IiwiYnJvd3NlciIsInNuaWZmZXIiLCJfZmlsbFNpbGVuY2VGcmFtZSIsImlzRmlyc3RWaWRlbyIsImlzRmlyc3RBdWRpbyIsInZpZGVvQWxsRHVyYXRpb24iLCJhdWRpb0FsbER1cmF0aW9uIiwicmVtdXgiLCJSRU1VWF9NRVRBREFUQSIsIm9uTWV0YURhdGFSZWFkeSIsIkRFVEVDVF9DSEFOR0VfU1RSRUFNIiwicmVzZXREdHNCYXNlIiwiX2R0c0Jhc2VJbml0ZWQiLCJjYWxjRHRzQmFzZSIsIl9yZW11eFZpZGVvIiwiX3JlbXV4QXVkaW8iLCJzZWVrIiwicHJlc291cmNlYnVmZmVyIiwicmVtdXhJbml0U2VnbWVudCIsIklOSVRfU0VHTUVOVCIsImluaXRTZWdtZW50IiwiZnR5cCIsIm1vb3YiLCJhdWRpb0Jhc2UiLCJ2aWRlb0Jhc2UiLCJtcDRTYW1wbGVzIiwibWF4TG9vcCIsImF2Y1NhbXBsZSIsIm1kYXRTYW1wbGUiLCJzYW1wbGVEdXJhdGlvbiIsInZpZGVvTWV0YSIsImxvZyIsIlJBTkRPTV9BQ0NFU1NfUE9JTlQiLCJtb29mTWRhdCIsIm1vb2YiLCJtZGF0Iiwid3JpdGVUb1NvdXJjZSIsIk1FRElBX1NFR01FTlQiLCJsYXN0U2FtcGxlIiwiaXNGaXJzdER0c0luaXRlZCIsImF1ZGlvTWV0YSIsIm1wNFNhbXBsZSIsImluaXRTaWxlbnRBdWRpbyIsIl9hdWRpb01ldGEiLCJDb250ZXh0IiwiV09SS0VSX0NPTU1BTkRTIiwiTWVkaWFJbmZvIiwiTWVkaWFTYW1wbGUiLCJNZWRpYVNlZ21lbnQiLCJNc2UiLCJDcnlwdG8iLCJSZXN1bHRDb25zdHJ1Y3RvciIsInRvdGFsTGVuZ3RoIiwiX2xlbiIsImFycmF5cyIsIl9rZXkiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiaXRlcmF0b3IiLCJyZXR1cm4iLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJfYXJyIiwib2JqIiwiX2NvbmNhdDIiLCJSRU1VWF9FUlJPUiIsIk1TRV9FVkVOVFMiLCJTT1VSQ0VfVVBEQVRFX0VORCIsIkhMU19FVkVOVFMiLCJSRVRSWV9USU1FX0VYQ0VFREVEIiwiQUxMRVZFTlRTIiwiRmx2QWxsb3dlZEV2ZW50cyIsIkhsc0FsbG93ZWRFdmVudHMiLCJDUllUT19FVkVOVFMiLCJTVEFSVF9ERUNSWVBUIiwiREVDUllQVEVEIiwiQ09OVEVYVF9DT01PTUFORFMiLCJPTiIsIk9OQ0UiLCJPRkYiLCJFTUlUIiwiREVTVFJPWSIsIkRJUkVDVF9FTUlUX0ZMQUciLCJhbGxvd2VkRXZlbnRzIiwiX2VtaXR0ZXIiLCJfaW5zdGFuY2VNYXAiLCJfY2xzTWFwIiwiX2luaXRlZCIsIl9ob29rcyIsIl9lbWl0Q291bnRlciIsInRhZyIsImluaXRJbnN0YW5jZSIsIm5ld0luc3RhbmNlIiwicmVnaXN0cnkiLCJjbHMiLCJjaGVja01lc3NhZ2VOYW1lIiwiX2lzTWVzc2FnZU5hbWVWYWxpZCIsInNlbGYiLCJvbmNlTGlzdGVuZXJzIiwibWVzc2FnZU5hbWUiLCJjYWxsYmFjayIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJiZWZvcmVMaXN0IiwiZW1pdFRvIiwicmVtb3ZlTGlzdGVuZXJzIiwiaGFzT3duIiwiY2FsbGJhY2tzIiwiZGVzdHJveUluc3RhbmNlcyIsIm91dHB1dEJ1ZmZlciIsIm91dHB1dGJ1ZmZlciIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZGVjcmlwdCIsImFlc2tleSIsImRlY3JpcHREYXRhIiwic3VidGxlIiwiaW1wb3J0S2V5IiwiZGVjcnlwdCIsInJlcyIsImxlIiwic2V0SW50MTYiLCJJbnQxNkFycmF5Iiwib3MiLCJpc1BjIiwiaXNUYWJsZXQiLCJ1YSIsInJlZyIsImllIiwiZmlyZm94IiwiY2hyb21lIiwib3BlcmEiLCJzYWZhcmkiLCJpc1dpbmRvd3NQaG9uZSIsImlzU3ltYmlhbiIsImlzQW5kcm9pZCIsImlzRmlyZUZveCIsImlzUGhvbmUiLCJvdXQiLCJpbnB1dCIsImZyb21DaGFyQ29kZSIsIl9jaGVja0NvbnRpbnVhdGlvbiIsInVjczQiLCJqb2luIiwiY2hlY2tMZW5ndGgiLCJpc09iamVjdEZpbGxlZCIsIm1pbWVUeXBlIiwiaXNDb21wbGV0ZSIsImlzQmFzZUluZm9SZWFkeSIsImlzVmlkZW9SZWFkeSIsImlzQXVkaW9SZWFkeSIsIl9kZWZhdWx0IiwiZ2V0RGVmYXVsdEluZiIsImVudHJpZXMiLCJ2IiwiaXNSQVAiLCJfdHlwZSIsIl9sYXN0QXBwZW5kTG9jYXRpb24iLCJpc0VtcHR5IiwiX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlIiwiYmVnaW5EdHMiLCJsYXN0IiwibWlkIiwibGJvdW5kIiwidWJvdW5kIiwiaWR4IiwiX3NlYXJjaE5lYXJlc3RTZWdtZW50QWZ0ZXIiLCJzZWdtZW50IiwibGFzdEFwcGVuZElkeCIsImluc2VydElkeCIsIm9yaWdpblN0YXJ0RHRzIiwiZ2V0TGFzdFNlZ21lbnRCZWZvcmUiLCJnZXRMYXN0U2FtcGxlQmVmb3JlIiwiZ2V0TGFzdFJBUEJlZm9yZSIsInNlZ21lbnRJZHgiLCJyYW5kb21BY2Nlc3NQb2ludHMiLCJzdGFydER0cyIsImVuZER0cyIsInN0YXJ0UHRzIiwiZW5kUHRzIiwib3JpZ2luRW5kRHRzIiwiYWRkUkFQIiwiZ2V0RGVmYXVsdCIsIk1TRSIsImNvbnRhaW5lciIsIm1lZGlhU291cmNlIiwic291cmNlQnVmZmVycyIsInByZWxvYWRUaW1lIiwib25Tb3VyY2VPcGVuIiwib25UaW1lVXBkYXRlIiwib25VcGRhdGVFbmQiLCJvbldhaXRpbmciLCJNZWRpYVNvdXJjZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJhZGRTb3VyY2VCdWZmZXJzIiwiZG9BcHBlbmQiLCJyZWFkeVN0YXRlIiwiYWRkIiwiZHVyIiwibWltZSIsInNvdXJjZUJ1ZmZlciIsImFkZFNvdXJjZUJ1ZmZlciIsInVwZGF0aW5nIiwiaW5pdGVkIiwiYXBwZW5kQnVmZmVyIiwiZW5kT2ZTdHJlYW0iLCJhY3RpdmVTb3VyY2VCdWZmZXJzIiwicmVtb3ZlIiwicmVtb3ZlQnVmZmVycyIsInRhc2tMaXN0IiwidGFzayIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJQcm9taXNlIiwiZG9DbGVhbkJ1ZmZlciIsInJldHJ5VGltZSIsImNsZWFuIiwic2V0VGltZW91dCIsImNsZWFyQnVmZmVyIiwiYWxsIiwicmVtb3ZlU291cmNlQnVmZmVyIiwicmV2b2tlT2JqZWN0VVJMIiwiYnVmZmVyZWQiLCJiRW5kIiwidGVtcCIsImhleE51bSIsInBhZFN0YXJ0IiwibG9vcCIsInNpZ24iLCJyZWFkVWludDY0IiwicmVhZEludDE2IiwicmVhZEludDMyIiwiTG9nZ2VyIiwicGxheWVyIiwiX3BsYXllciIsImluaXRTZWdtZW50QXJyaXZlZCIsImJ1ZmZlckNsZWFyVGltZXIiLCJSZW11eGVyIiwiY29tcGF0aWJpbGl0eSIsIm1zZSIsIl9oYW5kbGVUaW1lVXBkYXRlIiwiaW5pdExpc3RlbmVycyIsIl9oYW5kbGVMb2FkZXJEYXRhTG9hZGVkIiwiX2hhbmRsZU5ldHdvcmtFcnJvciIsIl9oYW5kbGVNZWRpYUluZm8iLCJfaGFuZGxlTWV0YWRhdGFQYXJzZWQiLCJfaGFuZGxlRGVtdXhDb21wbGV0ZSIsIl9oYW5kbGVEZW11eEVycm9yIiwiX2hhbmRsZUFwcGVuZEluaXRTZWdtZW50IiwiX2hhbmRsZU1lZGlhU2VnbWVudCIsIl9oYW5kbGVBZGRSQVAiLCJfaGFuZGxlU291cmNlVXBkYXRlRW5kIiwiY3VycmVudFRpbWUiLCJidWZmZXJFbmQiLCJyYW5nZSIsImJ1ZmZlclN0YXJ0IiwicmFwIiwiUGxheWVyIiwiRXJyb3JzIiwiX29uRXJyb3IiLCJmYXRhbCIsIm1vZCIsImVycm9yVHlwZSIsImVycm9yRGV0YWlscyIsImVycm9yRmF0YWwiLCJsb2FkRGF0YSIsInBhdXNlIiwibG9hZGVyIiwiZmx2QWxsb3dlZEV2ZW50cyIsImluaXRFdmVudHMiLCJsb2FkZXJDb21wbGV0ZVRpbWVyIiwiaW5pdEZsdiIsImZsdiIsImluaXRGbHZFdmVudHMiLCJ1dGlsIiwiYWRkQ2xhc3MiLCJmaW5kRG9tIiwibGl2ZSIsImNyZWF0ZURvbSIsImNvbnRyb2xzIiwiYXBwZW5kQ2hpbGQiLCJwYXVzZWQiLCJzZXRJbnRlcnZhbCIsImdldEJ1ZmZlcmVkUmFuZ2UiLCJjbGVhckludGVydmFsIiwiRkxWIiwicGxheSIsIl9oYXNTdGFydCIsIl9kZXN0cm95IiwiY3VycmVudFNyYyIsImYiLCJnIiwiXyIsInkiLCJFIiwiQSIsIlMiLCJUIiwiRCIsIkwiLCJ4IiwiTyIsIk0iLCJCIiwiaXNMaXZlIiwiaGFuZGxlVGltZVVwZGF0ZSIsImhhbmRsZVNlZWsiLCJsb2FkTmV4dCIsInUiLCJyYW5nZVN1cHBvcnQiLCJ0aW1lcyIsIk1BWF9TQUZFX0lOVEVHRVIiLCJmaWxlcG9zaXRpb25zIiwibG9hZE1ldGEiLCJpc1NlZWthYmxlIiwiZ2V0U2Vla1JhbmdlIiwiY29tcGF0IiwiZ2V0TmV4dFJhbmdlIiwiUmFuZ2UiLCJsb2FkRmFsbGJhY2siLCJrZXlmcmFtZXMiLCJmaW5kRmlsZVBvc2l0aW9uIiwiRmx2TGl2ZVBsYXllciIsIkZsdlZvZFBsYXllciJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELEVBQVFHLFFBQVEsYUFDUixtQkFBWEMsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLENBQUMsWUFBYUosR0FDSyxpQkFBWkMsUUFDZEEsUUFBUSxnQkFBa0JELEVBQVFHLFFBQVEsYUFFMUNKLEVBQUssZ0JBQWtCQyxFQUFRRCxFQUFlLFVBUmhELENBU0dPLFFBQVEsU0FBU0MsR0FDcEIsTyxZQ1RFLElBQUlDLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9C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LFdBQVcsQ0FBQyxFQUFNLElBQU0sRUFBTSxJQUFNLEdBQU0sTUFDaEQsR0FBcUIsSUFBakJrQyxFQUNULE9BQU8sSUFBSWxDLFdBQVcsQ0FBQyxHQUFNLEVBQU0sR0FBTSxJQUFNLEVBQU0sR0FBTSxFQUFNLEdBQU0sTUFDbEUsR0FBcUIsSUFBakJrQyxFQUNULE9BQU8sSUFBSWxDLFdBQVcsQ0FBQyxFQUFNLElBQU0sRUFBTSxJQUFNLEdBQU0sSUFBTSxFQUFNLEdBQU0sR0FBTSxFQUFNLElBQU0sRUFBTSxNQUMxRixHQUFxQixJQUFqQmtDLEVBQ1QsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxJQUFNLEVBQU0sR0FBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxJQUFNLEVBQU0sRUFBTSxLQUN4SCxHQUFxQixJQUFqQmtDLEVBQ1QsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxJQUFNLEVBQU0sR0FBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxFQUFNLElBQU0sRUFBTSxHQUFNLElBQU0sRUFBTSxLQUMxSSxHQUFxQixJQUFqQmtDLEVBQ1QsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxJQUFNLEVBQU0sR0FBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxFQUFNLElBQU0sRUFBTSxHQUFNLElBQU0sRUFBTSxFQUFNLElBQU0sRUFBTSxHQUFNLEVBQU0sVUFFMUssQ0FFTCxHQUFxQixJQUFqQmtDLEVBRUYsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEVBQUssR0FBTSxHQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLEVBQUssRUFBSyxFQUFLLEVBQUssR0FBTSxFQUFLLElBQU0sSUFBTSxHQUFLLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdB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RUFBRSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFLEtBQUssR0FBRyxJQUFJMUgsRUFBRSxPQUFPLElBQUkwSCxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRyxJQUFJMUgsRUFBRSxPQUFPLElBQUkwSCxXQUFXLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsSUFBSTFILEVBQUUsT0FBTyxJQUFJMEgsV0FBVyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FB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enZCLEVBQUVaLEtBQUssZUFBZUQsRUFBRXV3QixrQkFBa0IxdkIsRUFBRTJ2QixZQUFZLFdBQVczdkIsRUFBRSxTQUFTLEdBQUdtQixLQUFLbXNCLFFBQVEsQ0FBQyxJQUFJbnNCLEtBQUttc0IsUUFBUXdCLFNBQVMsTUFBTUMsSUFBSTV0QixLQUFLbXNCLFFBQVEsS0FBS25zQixLQUFLNHJCLFNBQVEsRUFBRzVyQixLQUFLb3NCLFdBQVUsRUFBRyxVQUFVcHNCLEtBQUtxc0IsWUFBVyxFQUFHcnNCLEtBQUsydEIsZ0I7Ozs7MkRDQTlxNUUsSSxJQUFBLGlFLElBQ0EsK0QsbURBWUF0eEIsRUFBT0QsUUFUTCxXQUFhNGdCLEdBQ1gsTyw0RkFEbUIsU0FDZkEsRUFBT21wQixPQUNGLElBQUlrQixVQUFjcnFCLEdBRWxCLElBQUlzcUIsVUFBYXRxQixLOzs7Ozs7Ozs0Q0NSOUIzZ0IsRUFBT0QsUUFBVU0iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJ4Z3BsYXllclwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ4Z3BsYXllci1mbHZcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wieGdwbGF5ZXItZmx2XCJdID0gZmFjdG9yeShyb290W1wieGdwbGF5ZXJcIl0pO1xufSkod2luZG93LCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3hncGxheWVyX18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJ4Z3BsYXllclwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ4Z3BsYXllci1mbHZcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wieGdwbGF5ZXItZmx2XCJdID0gZmFjdG9yeShyb290W1wieGdwbGF5ZXJcIl0pO1xufSkod2luZG93LCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3hncGxheWVyX18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gJGdldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9ICRnZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBSZWZsZWN0QXBwbHkodGhpcy5saXN0ZW5lciwgdGhpcy50YXJnZXQsIGFyZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBUcmFjazogcmVxdWlyZSgnLi9zcmMvdHJhY2snKS5kZWZhdWx0LFxuICBUcmFja3M6IHJlcXVpcmUoJy4vc3JjL3RyYWNrJykuVHJhY2tzLFxuICBBdWRpb1RyYWNrOiByZXF1aXJlKCcuL3NyYy90cmFjaycpLkF1ZGlvVHJhY2ssXG4gIFZpZGVvVHJhY2s6IHJlcXVpcmUoJy4vc3JjL3RyYWNrJykuVmlkZW9UcmFjayxcblxuICBYZ0J1ZmZlcjogcmVxdWlyZSgnLi9zcmMvYnVmZmVyJykuWGdCdWZmZXIsXG4gIFJlbXV4QnVmZmVyOiByZXF1aXJlKCcuL3NyYy9idWZmZXInKS5SZW11eEJ1ZmZlcixcblxuICBQcmVTb3VyY2U6IHJlcXVpcmUoJy4vc3JjL3ByZXNvdWNlJykuZGVmYXVsdFxufTtcbiIsImV4cG9ydCBjbGFzcyBYZ0J1ZmZlciB7XG4gIC8qKlxuICAgKiBBIGJ1ZmZlciB0byBzdG9yZSBsb2FkZWQgZGF0YS5cbiAgICpcbiAgICogQGNsYXNzIExvYWRlckJ1ZmZlclxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gT3B0aW9uYWwgdGhlIGJ1ZmZlciBzaXplXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobGVuZ3RoKSB7XG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGggfHwgMFxuICAgIHRoaXMuaGlzdG9yeUxlbiA9IGxlbmd0aCB8fCAwXG4gICAgdGhpcy5hcnJheSA9IFtdXG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gIH1cblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIHB1c2ggZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRhdGEgLSBUaGUgZGF0YSB0byBwdXNoIGludG8gdGhlIGJ1ZmZlclxuICAgKi9cbiAgcHVzaCAoZGF0YSkge1xuICAgIHRoaXMuYXJyYXkucHVzaChkYXRhKVxuICAgIHRoaXMubGVuZ3RoICs9IGRhdGEuYnl0ZUxlbmd0aFxuICAgIHRoaXMuaGlzdG9yeUxlbiArPSBkYXRhLmJ5dGVMZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdG8gc2hpZnQgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIFRoZSBzaXplIG9mIHNoaWZ0LlxuICAgKi9cbiAgc2hpZnQgKGxlbmd0aCkge1xuICAgIGlmICh0aGlzLmFycmF5Lmxlbmd0aCA8IDEpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKVxuICAgIH1cblxuICAgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NoaWZ0QnVmZmVyKClcbiAgICB9XG4gICAgaWYgKCh0aGlzLm9mZnNldCArIGxlbmd0aCkgPT09IHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSB7XG4gICAgICBsZXQgcmV0ID0gdGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW5ndGgpXG4gICAgICB0aGlzLm9mZnNldCA9IDBcbiAgICAgIHRoaXMuYXJyYXkuc2hpZnQoKVxuICAgICAgdGhpcy5sZW5ndGggLT0gbGVuZ3RoXG4gICAgICByZXR1cm4gcmV0XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLm9mZnNldCArIGxlbmd0aCkgPCB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgbGV0IHJldCA9IHRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKVxuICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoXG4gICAgICB0aGlzLmxlbmd0aCAtPSBsZW5ndGhcbiAgICAgIHJldHVybiByZXRcbiAgICB9XG5cbiAgICBsZXQgcmV0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIGxldCB0bXBvZmYgPSAwXG4gICAgd2hpbGUgKHRoaXMuYXJyYXkubGVuZ3RoID4gMCAmJiBsZW5ndGggPiAwKSB7XG4gICAgICBpZiAoKHRoaXMub2Zmc2V0ICsgbGVuZ3RoKSA8IHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSB7XG4gICAgICAgIGxldCB0bXAgPSB0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aClcbiAgICAgICAgcmV0LnNldCh0bXAsIHRtcG9mZilcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoXG4gICAgICAgIHRoaXMubGVuZ3RoIC09IGxlbmd0aFxuICAgICAgICBsZW5ndGggPSAwXG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnbWFyazEnKVxuICAgICAgICBsZXQgdGVtcGxlbmd0aCA9IHRoaXMuYXJyYXlbMF0ubGVuZ3RoIC0gdGhpcy5vZmZzZXRcbiAgICAgICAgcmV0LnNldCh0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLmFycmF5WzBdLmxlbmd0aCksIHRtcG9mZilcbiAgICAgICAgdGhpcy5hcnJheS5zaGlmdCgpXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgICAgICB0bXBvZmYgKz0gdGVtcGxlbmd0aFxuICAgICAgICB0aGlzLmxlbmd0aCAtPSB0ZW1wbGVuZ3RoXG4gICAgICAgIGxlbmd0aCAtPSB0ZW1wbGVuZ3RoXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBjbGVhciB0aGUgYnVmZmVyLlxuICAgKi9cbiAgY2xlYXIgKCkge1xuICAgIHRoaXMuYXJyYXkgPSBbXVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5jbGVhcigpXG4gICAgdGhpcy5oaXN0b3J5TGVuID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHNoaWZ0IG9uZSB1bml0OEFycmF5LlxuICAgKi9cbiAgX3NoaWZ0QnVmZmVyICgpIHtcbiAgICB0aGlzLmxlbmd0aCAtPSB0aGlzLmFycmF5WzBdLmxlbmd0aFxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgIHJldHVybiB0aGlzLmFycmF5LnNoaWZ0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHVpbnQ4IGRhdGEgdG8gbnVtYmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSB0aGUgc3RhcnQgcG9zdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIHRoZSBsZW5ndGggb2YgZGF0YS5cbiAgICovXG4gIHRvSW50IChzdGFydCwgbGVuZ3RoKSB7XG4gICAgbGV0IHJldEludCA9IDBcbiAgICBsZXQgaSA9IHRoaXMub2Zmc2V0ICsgc3RhcnRcbiAgICB3aGlsZSAoaSA8IHRoaXMub2Zmc2V0ICsgbGVuZ3RoICsgc3RhcnQpIHtcbiAgICAgIGlmIChpIDwgdGhpcy5hcnJheVswXS5sZW5ndGgpIHtcbiAgICAgICAgcmV0SW50ID0gcmV0SW50ICogMjU2ICsgdGhpcy5hcnJheVswXVtpXVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmFycmF5WzFdKSB7XG4gICAgICAgIHJldEludCA9IHJldEludCAqIDI1NiArIHRoaXMuYXJyYXlbMV1baSAtIHRoaXMuYXJyYXlbMF0ubGVuZ3RoXVxuICAgICAgfVxuXG4gICAgICBpKytcbiAgICB9XG4gICAgcmV0dXJuIHJldEludFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZW11eEJ1ZmZlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnZpZGVvID0gW11cbiAgICB0aGlzLmF1ZGlvID0gW11cbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMudmlkZW8gPSBbXVxuICAgIHRoaXMuYXVkaW8gPSBbXVxuICB9XG59XG4iLCJjbGFzcyBTb3VyY2Uge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5taW1ldHlwZSA9ICcnO1xuICAgIHRoaXMuaW5pdCA9IG51bGw7XG4gICAgdGhpcy5kYXRhID0gW107XG4gIH1cbn1cblxuY2xhc3MgUHJlU291cmNlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuc291cmNlcyA9IHt9O1xuICB9XG5cbiAgZ2V0U291cmNlIChzb3VyY2UpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2VzW3NvdXJjZV07XG4gIH1cblxuICBjcmVhdGVTb3VyY2UgKG5hbWUpIHtcbiAgICB0aGlzLnNvdXJjZXNbbmFtZV0gPSBuZXcgU291cmNlKCk7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc1tuYW1lXTtcbiAgfVxuXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLnNvdXJjZXMgPSB7fTtcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuc291cmNlcyA9IHt9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByZVNvdXJjZTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3Rvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmlkID0gLTFcbiAgICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gMFxuICAgIHRoaXMuc2FtcGxlcyA9IFtdXG4gICAgdGhpcy5kcm9wcGVkU2FtcGxlcyA9IFtdXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdGhlIHRyYWNrLlxuICAgKi9cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMuc2VxdWVuY2VOdW1iZXIgPSAwXG4gICAgdGhpcy5zYW1wbGVzID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgfVxuICAvKipcbiAgICogZGVzdHJveSB0aGUgdHJhY2suXG4gICAqL1xuICBkaXN0cm95ICgpIHtcbiAgICB0aGlzLnJlc2V0KClcbiAgICB0aGlzLmlkID0gLTFcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXVkaW9UcmFjayBleHRlbmRzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3RvciBmb3IgYXVkaW8gdHJhY2suXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuVEFHID0gJ0F1ZGlvVHJhY2snXG4gICAgdGhpcy50eXBlID0gJ2F1ZGlvJ1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrIGV4dGVuZHMgVHJhY2sge1xuICAvKipcbiAgICogVGhlIGNvbnN0cnVjdG9yIGZvciB2aWRlbyB0cmFjay5cbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5UQUcgPSAnVmlkZW9UcmFjaydcbiAgICB0aGlzLnR5cGUgPSAndmlkZW8nXG4gICAgdGhpcy5kcm9wcGVkID0gMFxuICB9XG4gIC8qKlxuICAgKiByZXNldCB0aGUgdmlkZW8gdHJhY2suXG4gICAqL1xuICByZXNldCAoKSB7XG4gICAgdGhpcy5zZXF1ZW5jZU51bWJlciA9IDBcbiAgICB0aGlzLnNhbXBsZXMgPSBbXVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICAgIHRoaXMuZHJvcHBlZCA9IDBcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhY2tzIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuYXVkaW9UcmFjayA9IG51bGxcbiAgICB0aGlzLnZpZGVvVHJhY2sgPSBudWxsXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLmF1ZGlvVHJhY2sgPSBudWxsXG4gICAgdGhpcy52aWRlb1RyYWNrID0gbnVsbFxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgTmFsdW5pdDogcmVxdWlyZSgnLi9zcmMvaDI2NC9uYWx1bml0JykuZGVmYXVsdCxcbiAgU3BzUGFyc2VyOiByZXF1aXJlKCcuL3NyYy9oMjY0L25hbHVuaXQvc3BzJykuZGVmYXVsdCxcblxuICBDb21wYXRpYmlsaXR5OiByZXF1aXJlKCcuL3NyYy9jb21wYXRpYmlsaXR5JykuZGVmYXVsdFxufTtcbiIsIlxuY2xhc3MgQUFDIHtcblxuICBzdGF0aWMgZ2V0U2lsZW50RnJhbWUoY29kZWMsIGNoYW5uZWxDb3VudCkge1xuICAgIGlmIChjb2RlYyA9PT0gJ21wNGEuNDAuMicpIHtcbiAgICAgIC8vIGhhbmRsZSBMQy1BQUNcbiAgICAgIGlmIChjaGFubmVsQ291bnQgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIzLCAweDgwXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMikge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MjEsIDB4MDAsIDB4NDksIDB4OTAsIDB4MDIsIDB4MTksIDB4MDAsIDB4MjMsIDB4ODBdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAzKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4ZV0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgwLCAweDJjLCAweDgwLCAweDA4LCAweDAyLCAweDM4XSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNSkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MzhdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA2KSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgwMCwgMHhiMiwgMHgwMCwgMHgyMCwgMHgwOCwgMHhlMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYW5kbGUgSEUtQUFDIChtcDRhLjQwLjUgLyBtcDRhLjQwLjI5KVxuICAgICAgaWYgKGNoYW5uZWxDb3VudCA9PT0gMSkge1xuICAgICAgICAvLyBmZm1wZWcgLXkgLWYgbGF2ZmkgLWkgXCJhZXZhbHNyYz0wOmQ9MC4wNVwiIC1jOmEgbGliZmRrX2FhYyAtcHJvZmlsZTphIGFhY19oZSAtYjphIDRrIG91dHB1dC5hYWMgJiYgaGV4ZHVtcCAtdiAtZSAnMTYvMSBcIjB4JXgsXCIgXCJcXG5cIicgLXYgb3V0cHV0LmFhY1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg0ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDFjLCAweDYsIDB4ZjEsIDB4YzEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDIpIHtcbiAgICAgICAgLy8gZmZtcGVnIC15IC1mIGxhdmZpIC1pIFwiYWV2YWxzcmM9MHwwOmQ9MC4wNVwiIC1jOmEgbGliZmRrX2FhYyAtcHJvZmlsZTphIGFhY19oZV92MiAtYjphIDRrIG91dHB1dC5hYWMgJiYgaGV4ZHVtcCAtdiAtZSAnMTYvMSBcIjB4JXgsXCIgXCJcXG5cIicgLXYgb3V0cHV0LmFhY1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg1ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDAsIDB4OTUsIDB4MCwgMHg2LCAweGYxLCAweGExLCAweGEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWVdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAzKSB7XG4gICAgICAgIC8vIGZmbXBlZyAteSAtZiBsYXZmaSAtaSBcImFldmFsc3JjPTB8MHwwOmQ9MC4wNVwiIC1jOmEgbGliZmRrX2FhYyAtcHJvZmlsZTphIGFhY19oZV92MiAtYjphIDRrIG91dHB1dC5hYWMgJiYgaGV4ZHVtcCAtdiAtZSAnMTYvMSBcIjB4JXgsXCIgXCJcXG5cIicgLXYgb3V0cHV0LmFhY1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg1ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDAsIDB4OTUsIDB4MCwgMHg2LCAweGYxLCAweGExLCAweGEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBQUM7XG4iLCJpbXBvcnQge0VWRU5UU30gZnJvbSAneGdwbGF5ZXItdXRpbHMnXG5pbXBvcnQgQUFDIGZyb20gJy4vYWFjL2FhYy1oZWxwZXInXG5cbmNvbnN0IHtSRU1VWF9FVkVOVFMsIExPQURFUl9FVkVOVFN9ID0gRVZFTlRTXG5cbmNsYXNzIENvbXBhdGliaWxpdHkge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5uZXh0QXVkaW9EdHMgPSAwIC8vIOaooeaLn+S4i+S4gOautemfs+mikeaVsOaNrueahGR0c1xuICAgIHRoaXMubmV4dFZpZGVvRHRzID0gMCAvLyDmqKHmi5/kuIvkuIDmrrXop4bpopHmlbDmja7nmoRkdHNcblxuICAgIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9IDAgLy8g5LiK5LiA5q616Z+z6aKR5pWw5o2u55qE6ZW/5bqmXG4gICAgdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuID0gMCAvLyDkuIrkuIDmrrXop4bpopHmlbDmja7nmoTplb/luqZcblxuICAgIHRoaXMubGFzdFZpZGVvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOautemfs+mikeaVsOaNrueahOmVv+W6plxuICAgIHRoaXMubGFzdEF1ZGlvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCA9IDAgLy8g6Z+z6aKR5oC75pWw5o2u6YePKOWOn+Wni+W4pylcbiAgICB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50ID0gMCAvLyDop4bpopHmgLvmlbDmja7ph48o5Y6f5aeL5binKVxuXG4gICAgdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSA9IG51bGxcbiAgICB0aGlzLl9maXJzdFZpZGVvU2FtcGxlID0gbnVsbFxuXG4gICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMgPSBbXSAvLyDooaXlhYXpn7PpopHluKfvvIjvvIlcbiAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcyA9IFtdIC8vIOihpeWFheinhumikeW4p++8iO+8iVxuXG4gICAgdGhpcy52aWRlb0xhc3RTYW1wbGUgPSBudWxsXG4gICAgdGhpcy5hdWRpb0xhc3RTYW1wbGUgPSBudWxsIC8vIHN0YXNoIGxhc3Qgc2FtcGxlIGZvciBkdXJhdGlvbiBjb21wYXRcblxuICAgIHRoaXMuX3ZpZGVvTGFyZ2VHYXAgPSAwXG4gICAgdGhpcy5fYXVkaW9MYXJnZUdhcCA9IDBcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMuYmVmb3JlKFJFTVVYX0VWRU5UUy5SRU1VWF9NRURJQSwgdGhpcy5kb0ZpeC5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnZpZGVvTGFzdFNhbXBsZSkge1xuICAgICAgICB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcy51bnNoaWZ0KHRoaXMudmlkZW9MYXN0U2FtcGxlKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICByZXNldCAoKSB7XG4gICAgdGhpcy5uZXh0QXVkaW9EdHMgPSBudWxsIC8vIOS8sOeul+S4i+S4gOautemfs+mikeaVsOaNrueahGR0c1xuICAgIHRoaXMubmV4dFZpZGVvRHRzID0gbnVsbCAvLyDkvLDnrpfkuIvkuIDmrrXop4bpopHmlbDmja7nmoRkdHNcblxuICAgIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9IDAgLy8g5LiK5LiA5q616Z+z6aKR5pWw5o2u55qE6ZW/5bqmXG4gICAgdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuID0gMCAvLyDkuIrkuIDmrrXop4bpopHmlbDmja7nmoTplb/luqZcblxuICAgIHRoaXMubGFzdFZpZGVvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOautemfs+mikeaVsOaNrueahOmVv+W6plxuICAgIHRoaXMubGFzdEF1ZGlvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgLy8gdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCA9IDAgLy8g6Z+z6aKR5oC75pWw5o2u6YePKOWOn+Wni+W4pylcbiAgICAvLyB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50ID0gMCAvLyDop4bpopHmgLvmlbDmja7ph48o5Y6f5aeL5binKVxuXG4gICAgLy8gdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSA9IG51bGxcbiAgICAvLyB0aGlzLl9maXJzdFZpZGVvU2FtcGxlID0gbnVsbFxuICAgIHRoaXMudmlkZW9MYXN0U2FtcGxlID0gbnVsbFxuICAgIHRoaXMuYXVkaW9MYXN0U2FtcGxlID0gbnVsbFxuXG4gICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMgPSBbXSAvLyDooaXlhYXpn7PpopHluKfvvIjvvIlcbiAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcyA9IFtdIC8vIOihpeWFheinhumikeW4p++8iO+8iVxuICB9XG5cbiAgZG9GaXggKCkge1xuICAgIGNvbnN0IHsgaXNGaXJzdEF1ZGlvU2FtcGxlcywgaXNGaXJzdFZpZGVvU2FtcGxlcyB9ID0gdGhpcy5nZXRGaXJzdFNhbXBsZSgpXG5cbiAgICB0aGlzLnJlY29yZFNhbXBsZXNDb3VudCgpXG5cbiAgICBpZiAodGhpcy5fZmlyc3RWaWRlb1NhbXBsZSkge1xuICAgICAgdGhpcy5maXhSZWZTYW1wbGVEdXJhdGlvbih0aGlzLnZpZGVvVHJhY2subWV0YSwgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMpXG4gICAgfVxuICAgIGlmICh0aGlzLl9maXJzdEF1ZGlvU2FtcGxlKSB7XG4gICAgICB0aGlzLmZpeFJlZlNhbXBsZUR1cmF0aW9uKHRoaXMuYXVkaW9UcmFjay5tZXRhLCB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcylcbiAgICB9XG5cbiAgICBjb25zdCB7IGNoYW5nZWQ6IHZpZGVvQ2hhbmdlZCwgY2hhbmdlZElkeDogdmlkZW9DaGFuZ2VkSWR4IH0gPSBDb21wYXRpYmlsaXR5LmRldGFjdENoYW5nZVN0cmVhbSh0aGlzLnZpZGVvVHJhY2suc2FtcGxlcylcbiAgICBpZiAodmlkZW9DaGFuZ2VkICYmICFpc0ZpcnN0QXVkaW9TYW1wbGVzKSB7XG4gICAgICB0aGlzLmZpeENoYW5nZVN0cmVhbVZpZGVvKHZpZGVvQ2hhbmdlZElkeClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb0ZpeFZpZGVvKGlzRmlyc3RWaWRlb1NhbXBsZXMpXG4gICAgfVxuXG4gICAgY29uc3QgeyBjaGFuZ2VkOiBhdWRpb0NoYW5nZWQsIGNoYW5nZWRJZHg6IGF1ZGlvQ2hhbmdlZElkeCB9ID0gQ29tcGF0aWJpbGl0eS5kZXRhY3RDaGFuZ2VTdHJlYW0odGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMpXG4gICAgaWYgKGF1ZGlvQ2hhbmdlZCkge1xuICAgICAgdGhpcy5maXhDaGFuZ2VTdHJlYW1BdWRpbyhhdWRpb0NoYW5nZWRJZHgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9GaXhBdWRpbyhpc0ZpcnN0QXVkaW9TYW1wbGVzKVxuICAgIH1cblxuICAgIHRoaXMucmVtb3ZlSW52YWxpZFNhbXBsZXMoKVxuICB9XG5cbiAgZG9GaXhWaWRlbyAoZmlyc3QsIHN0cmVhbUNoYW5nZVN0YXJ0KSB7XG4gICAgbGV0IHtzYW1wbGVzOiB2aWRlb1NhbXBsZXMsIG1ldGF9ID0gdGhpcy52aWRlb1RyYWNrXG5cbiAgICAvLyBjb25zb2xlLmxvZygnbmV4dCB2aWRlbycsIHRoaXMubmV4dFZpZGVvRHRzKVxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2aWRlb1NhbXBsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IHNhbXBsZSA9IHZpZGVvU2FtcGxlc1tpXVxuICAgICAgc2FtcGxlLm9yaWdpbkR0cyA9IHNhbXBsZS5kdHNcbiAgICB9XG5cbiAgICBpZiAobWV0YS5mcmFtZVJhdGUgJiYgbWV0YS5mcmFtZVJhdGUuZml4ZWQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF2aWRlb1NhbXBsZXMgfHwgIXZpZGVvU2FtcGxlcy5sZW5ndGggfHwgIXRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGNvbnNvbGUubG9nKGB2aWRlbyBsYXN0U2FtcGxlLCAke3ZpZGVvU2FtcGxlc1t2aWRlb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzfWApXG5cbiAgICBjb25zdCBmaXJzdFNhbXBsZSA9IHZpZGVvU2FtcGxlc1swXVxuXG4gICAgLy8gc3RlcDAu5L+u5aSNaGxz5rWB5Ye6546w5beo5aSnZ2Fw77yM6ZyA6KaB5by65Yi26YeN5a6a5L2N55qE6Zeu6aKYXG4gICAgaWYgKHRoaXMuX3ZpZGVvTGFyZ2VHYXAgPiAwKSB7XG4gICAgICBDb21wYXRpYmlsaXR5LmRvRml4TGFyZ2VHYXAodmlkZW9TYW1wbGVzLCB0aGlzLl92aWRlb0xhcmdlR2FwKVxuICAgIH1cblxuICAgIGlmIChmaXJzdFNhbXBsZS5kdHMgIT09IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzICYmIHN0cmVhbUNoYW5nZVN0YXJ0KSB7XG4gICAgICBpZiAoc3RyZWFtQ2hhbmdlU3RhcnQpIHtcbiAgICAgICAgdGhpcy5uZXh0VmlkZW9EdHMgPSBzdHJlYW1DaGFuZ2VTdGFydCAvLyBGSVg6IEhsc+S4remAlOWIh2NvZGVj77yM5Zyo5aaC5p6c55u05o6lc2Vla+WIsOWQjumdoueahOeCueS8muWvvOiHtGxhcmdlR2Fw6K6h566X5aSx6LSlXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3ZpZGVvTGFyZ2VHYXAgPSB0aGlzLm5leHRWaWRlb0R0cyAtIGZpcnN0U2FtcGxlLmR0c1xuICAgICAgQ29tcGF0aWJpbGl0eS5kb0ZpeExhcmdlR2FwKHZpZGVvU2FtcGxlcywgdGhpcy5fdmlkZW9MYXJnZUdhcClcbiAgICB9XG5cbiAgICAvLyBzdGVwMS4g5L+u5aSN5LiOYXVkaW/pppbluKflt67ot53lpKrlpKfnmoTpl67pophcbiAgICBpZiAoZmlyc3QgJiYgdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSkge1xuICAgICAgY29uc3QgdmlkZW9GaXJzdER0cyA9IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUub3JpZ2luRHRzXG4gICAgICBjb25zdCBhdWRpb0ZpcnN0RHRzID0gdGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5vcmlnaW5EdHNcbiAgICAgIGNvbnN0IGdhcCA9IHZpZGVvRmlyc3REdHMgLSBhdWRpb0ZpcnN0RHRzXG4gICAgICBpZiAoZ2FwID4gKDIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgICBjb25zdCBmaWxsQ291bnQgPSBNYXRoLmZsb29yKGdhcCAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxsQ291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGNsb25lZEZpcnN0U2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgZmlyc3RTYW1wbGUpIC8vIOinhumikeWktOmDqOW4p+e8uuWksemcgOimgeWkjeWItuesrOS4gOW4p1xuICAgICAgICAgIC8vIOmHjeaWsOiuoeeul3NhbXBsZeeahGR0c+WSjHB0c1xuICAgICAgICAgIGNsb25lZEZpcnN0U2FtcGxlLmR0cyA9IHZpZGVvRmlyc3REdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgIGNsb25lZEZpcnN0U2FtcGxlLnB0cyA9IGNsb25lZEZpcnN0U2FtcGxlLmR0cyArIGNsb25lZEZpcnN0U2FtcGxlLmN0c1xuXG4gICAgICAgICAgdmlkZW9TYW1wbGVzLnVuc2hpZnQoY2xvbmVkRmlyc3RTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogY2xvbmVkRmlyc3RTYW1wbGUuZHRzLFxuICAgICAgICAgICAgc2l6ZTogY2xvbmVkRmlyc3RTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChnYXAgPCAoLTIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgICB0aGlzLl92aWRlb0xhcmdlR2FwID0gLTEgKiBnYXBcbiAgICAgICAgQ29tcGF0aWJpbGl0eS5kb0ZpeExhcmdlR2FwKHZpZGVvU2FtcGxlcywgLTEgKiBnYXApXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY3VyTGFzdFNhbXBsZSA9IHZpZGVvU2FtcGxlcy5wb3AoKTtcbiAgICBpZiAodmlkZW9TYW1wbGVzLmxlbmd0aCkge1xuICAgICAgdmlkZW9TYW1wbGVzW3ZpZGVvU2FtcGxlcy5sZW5ndGggLSAxXS5kdXJhdGlvbiA9IGN1ckxhc3RTYW1wbGUuZHRzIC0gdmlkZW9TYW1wbGVzW3ZpZGVvU2FtcGxlcy5sZW5ndGggLSAxXS5kdHNcbiAgICB9XG5cbiAgICBpZiAodGhpcy52aWRlb0xhc3RTYW1wbGUpIHtcbiAgICAgIGNvbnN0IHZpZGVvTGFzdFNhbXBsZSA9IHRoaXMudmlkZW9MYXN0U2FtcGxlO1xuICAgICAgdmlkZW9MYXN0U2FtcGxlLmR1cmF0aW9uID0gZmlyc3RTYW1wbGUuZHRzIC0gdmlkZW9MYXN0U2FtcGxlLmR0cztcbiAgICAgIHZpZGVvU2FtcGxlcy51bnNoaWZ0KHRoaXMudmlkZW9MYXN0U2FtcGxlKVxuICAgIH1cblxuICAgIHRoaXMudmlkZW9MYXN0U2FtcGxlID0gY3VyTGFzdFNhbXBsZTtcblxuICAgIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzID0gdmlkZW9TYW1wbGVzO1xuICB9XG5cbiAgZG9GaXhBdWRpbyAoZmlyc3QsIHN0cmVhbUNoYW5nZVN0YXJ0KSB7XG4gICAgbGV0IHtzYW1wbGVzOiBhdWRpb1NhbXBsZXMsIG1ldGF9ID0gdGhpcy5hdWRpb1RyYWNrXG5cbiAgICBpZiAoIWF1ZGlvU2FtcGxlcyB8fCAhYXVkaW9TYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coJ25leHQgYXVkaW8nLCB0aGlzLm5leHRBdWRpb0R0cylcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXVkaW9TYW1wbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBzYW1wbGUgPSBhdWRpb1NhbXBsZXNbaV1cbiAgICAgIHNhbXBsZS5vcmlnaW5EdHMgPSBzYW1wbGUuZHRzXG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coYGF1ZGlvIGxhc3RTYW1wbGUsICR7YXVkaW9TYW1wbGVzW2F1ZGlvU2FtcGxlcy5sZW5ndGggLSAxXS5kdHN9YClcblxuICAgIGNvbnN0IHNhbXBsZXNMZW4gPSBhdWRpb1NhbXBsZXMubGVuZ3RoO1xuICAgIGNvbnN0IHNpbGVudEZyYW1lID0gQUFDLmdldFNpbGVudEZyYW1lKG1ldGEuY29kZWMsIG1ldGEuY2hhbm5lbENvdW50KVxuXG4gICAgY29uc3QgZmlyc3RTYW1wbGUgPSB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlXG5cbiAgICBjb25zdCBfZmlyc3RTYW1wbGUgPSBhdWRpb1NhbXBsZXNbMF1cbiAgICAvLyDlr7lhdWRpb1NhbXBsZXPmjInnhadkdHPlgZrmjpLluo9cbiAgICAvLyBhdWRpb1NhbXBsZXMgPSBDb21wYXRpYmlsaXR5LnNvcnRBdWRpb1NhbXBsZXMoYXVkaW9TYW1wbGVzKVxuICAgIGlmICh0aGlzLl9hdWRpb0xhcmdlR2FwID4gMCkge1xuICAgICAgQ29tcGF0aWJpbGl0eS5kb0ZpeExhcmdlR2FwKGF1ZGlvU2FtcGxlcywgdGhpcy5fYXVkaW9MYXJnZUdhcClcbiAgICB9XG5cbiAgICBpZiAoX2ZpcnN0U2FtcGxlLmR0cyAhPT0gdGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHMgJiYgKHN0cmVhbUNoYW5nZVN0YXJ0IHx8IENvbXBhdGliaWxpdHkuZGV0ZWN0TGFyZ2VHYXAodGhpcy5uZXh0QXVkaW9EdHMsIF9maXJzdFNhbXBsZSkpKSB7XG4gICAgICBpZiAoc3RyZWFtQ2hhbmdlU3RhcnQpIHtcbiAgICAgICAgdGhpcy5uZXh0QXVkaW9EdHMgPSBzdHJlYW1DaGFuZ2VTdGFydCAvLyBGSVg6IEhsc+S4remAlOWIh2NvZGVj77yM5Zyo5aaC5p6c55u05o6lc2Vla+WIsOWQjumdoueahOeCueS8muWvvOiHtGxhcmdlR2Fw6K6h566X5aSx6LSlXG4gICAgICB9XG4gICAgICB0aGlzLl9hdWRpb0xhcmdlR2FwID0gdGhpcy5uZXh0QXVkaW9EdHMgLSBfZmlyc3RTYW1wbGUuZHRzXG4gICAgICBDb21wYXRpYmlsaXR5LmRvRml4TGFyZ2VHYXAoYXVkaW9TYW1wbGVzLCB0aGlzLl9hdWRpb0xhcmdlR2FwKVxuICAgIH1cbiAgICAvLyBzdGVwMC4g6aaW5bin5LiOdmlkZW/pppbluKfpl7Tot53lpKfnmoTpl67pophcbiAgICBpZiAodGhpcy5fZmlyc3RWaWRlb1NhbXBsZSAmJiBmaXJzdCkge1xuICAgICAgY29uc3QgdmlkZW9GaXJzdFB0cyA9IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUub3JpZ2luRHRzXG4gICAgICBjb25zdCBnYXAgPSBmaXJzdFNhbXBsZS5kdHMgLSB2aWRlb0ZpcnN0UHRzXG4gICAgICBpZiAoZ2FwID4gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikge1xuICAgICAgICBjb25zdCBzaWxlbnRTYW1wbGVDb3VudCA9IE1hdGguZmxvb3IoKGZpcnN0U2FtcGxlLmR0cyAtIHZpZGVvRmlyc3RQdHMpIC8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbilcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpbGVudFNhbXBsZUNvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzaWxlbnRTYW1wbGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBzaWxlbnRGcmFtZSxcbiAgICAgICAgICAgIGRhdGFzaXplOiBzaWxlbnRGcmFtZS5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgZHRzOiBmaXJzdFNhbXBsZS5kdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbixcbiAgICAgICAgICAgIGZpbHRlcmVkOiAwXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXVkaW9TYW1wbGVzLnVuc2hpZnQoc2lsZW50U2FtcGxlKVxuXG4gICAgICAgICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgICBkdHM6IHNpbGVudFNhbXBsZS5kdHMsXG4gICAgICAgICAgICBzaXplOiBzaWxlbnRTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChnYXAgPCAtMSAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5fYXVkaW9MYXJnZUdhcCA9IC0xICogZ2FwXG4gICAgICAgIENvbXBhdGliaWxpdHkuZG9GaXhMYXJnZUdhcChhdWRpb1NhbXBsZXMsIC0xICogZ2FwKVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBnYXBcbiAgICBjb25zdCBmaXJzdER0cyA9IGF1ZGlvU2FtcGxlc1swXS5kdHNcblxuICAgIGlmICh0aGlzLm5leHRBdWRpb0R0cykge1xuICAgICAgLy8gc3RlcDEuIOWkhOeQhnNhbXBsZXPmrrXkuYvpl7TnmoTkuKLluKfmg4XlhrVcbiAgICAgIC8vIOW9k+WPkeeOsGR1cmF0aW9u5beu6Led5aSn5LqOMeW4p+aXtui/m+ihjOihpeW4p1xuICAgICAgZ2FwID0gZmlyc3REdHMgLSB0aGlzLm5leHRBdWRpb0R0c1xuICAgICAgY29uc3QgYWJzR2FwID0gTWF0aC5hYnMoZ2FwKVxuXG4gICAgICBpZiAoYWJzR2FwID4gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiAmJiBzYW1wbGVzTGVuID09PSAxICYmIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9PT0gMSkge1xuICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgPSB1bmRlZmluZWRcbiAgICAgIH1cblxuICAgICAgaWYgKGdhcCA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikgJiYgZ2FwIDwgKDEwICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgaWYgKHNhbXBsZXNMZW4gPT09IDEgJiYgdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuID09PSAxKSB7XG4gICAgICAgICAgLy8g5aaC5p6cc2FtcGxl55qEbGVuZ3Ro5LiA55u05pivMe+8jOiAjOS4lOS4gOebtOS4jeespuWQiHJlZlNhbXBsZUR1cmF0aW9u77yM6ZyA6KaB5Yqo5oCB5L+u5pS5cmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgPSBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgIT09IHVuZGVmaW5lZCA/IG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCArIGdhcCA6IG1ldGEucmVmU2FtcGxlRHVyYXRpb24gKyBnYXBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBzaWxlbnRGcmFtZUNvdW50ID0gTWF0aC5mbG9vcihnYXAgLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWxlbnRGcmFtZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVkID0gZmlyc3REdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgICAgY29uc3Qgc2lsZW50U2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgYXVkaW9TYW1wbGVzWzBdLCB7XG4gICAgICAgICAgICAgIGR0czogY29tcHV0ZWQgPiB0aGlzLm5leHRBdWRpb0R0cyA/IGNvbXB1dGVkIDogdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgICBkdHM6IHNpbGVudFNhbXBsZS5kdHMsXG4gICAgICAgICAgICAgIHNpemU6IHNpbGVudFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcy51bnNoaWZ0KHNpbGVudFNhbXBsZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYWJzR2FwIDw9IG1ldGEucmVmU2FtcGxlRHVyYXRpb24gJiYgYWJzR2FwID4gMCkge1xuICAgICAgICAvLyDlvZPlt67ot53mr5TovoPlsI/nmoTml7blgJnlsIbpn7PpopHluKfph43lrprkvY1cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ+mHjeWumuS9jemfs+mikeW4p2R0cycsIGF1ZGlvU2FtcGxlc1swXS5kdHMsIHRoaXMubmV4dEF1ZGlvRHRzKVxuICAgICAgICBhdWRpb1NhbXBsZXNbMF0uZHRzID0gdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgICAgYXVkaW9TYW1wbGVzWzBdLnB0cyA9IHRoaXMubmV4dEF1ZGlvRHRzXG4gICAgICB9IGVsc2UgaWYgKGdhcCA8IDApIHtcbiAgICAgICAgQ29tcGF0aWJpbGl0eS5kb0ZpeExhcmdlR2FwKGF1ZGlvU2FtcGxlcywgKC0xICogZ2FwKSlcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGFzdE9yaWdpbkR0cyA9IGF1ZGlvU2FtcGxlc1thdWRpb1NhbXBsZXMubGVuZ3RoIC0gMV0ub3JpZ2luRHRzO1xuICAgIGNvbnN0IGxhc3REdHMgPSBhdWRpb1NhbXBsZXNbYXVkaW9TYW1wbGVzLmxlbmd0aCAtIDFdLm9yaWdpbkR0cztcbiAgICBjb25zdCBsYXN0U2FtcGxlRHVyYXRpb24gPSBhdWRpb1NhbXBsZXMubGVuZ3RoID49IDIgPyBsYXN0T3JpZ2luRHRzIC0gYXVkaW9TYW1wbGVzW2F1ZGlvU2FtcGxlcy5sZW5ndGggLSAyXS5vcmlnaW5EdHMgOiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG5cbiAgICB0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4gPSBzYW1wbGVzTGVuO1xuICAgIHRoaXMubmV4dEF1ZGlvRHRzID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkID8gbGFzdER0cyArIG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCA6IGxhc3REdHMgKyBsYXN0U2FtcGxlRHVyYXRpb25cbiAgICB0aGlzLmxhc3RBdWRpb0R0cyA9IGxhc3REdHNcblxuICAgIGF1ZGlvU2FtcGxlc1thdWRpb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb24gPSBsYXN0U2FtcGxlRHVyYXRpb25cblxuICAgIC8vIHN0ZXAzLiDkv67lpI1zYW1wbGVz5q615YaF6YOo55qEZHRz5byC5bi46Zeu6aKYXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGF1ZGlvU2FtcGxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudCA9IGF1ZGlvU2FtcGxlc1tpXVxuICAgICAgY29uc3QgbmV4dCA9IGF1ZGlvU2FtcGxlc1tpICsgMV1cblxuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IG5leHQuZHRzIC0gY3VycmVudC5kdHM7XG4gICAgICBhdWRpb1NhbXBsZXNbaV0uZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgIC8qXG4gICAgICBpZiAoZHVyYXRpb24gPiAoMiAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pKSB7XG4gICAgICAgIC8vIOS4pOW4p+S5i+mXtOmXtOmalOWkquWkp++8jOmcgOimgeihpeepuueZveW4p1xuICAgICAgICAvKipcbiAgICAgICAgbGV0IHNpbGVudEZyYW1lQ291bnQgPSBNYXRoLmZsb29yKGR1cmF0aW9uIC8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbilcbiAgICAgICAgbGV0IGZyYW1lSWR4ID0gMFxuXG4gICAgICAgIHdoaWxlIChmcmFtZUlkeCA8IHNpbGVudEZyYW1lQ291bnQpIHtcbiAgICAgICAgICBjb25zdCBzaWxlbnRTYW1wbGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBzaWxlbnRGcmFtZSxcbiAgICAgICAgICAgIGRhdGFzaXplOiBzaWxlbnRGcmFtZS5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgZHRzOiBjdXJyZW50LmR0cyArIChmcmFtZUlkeCArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbixcbiAgICAgICAgICAgIGZpbHRlcmVkOiAwLFxuICAgICAgICAgICAgaXNTaWxlbnQ6IHRydWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdWRpb1NhbXBsZXMuc3BsaWNlKGksIDAsIHNpbGVudFNhbXBsZSlcblxuICAgICAgICAgIHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgZHRzOiBzaWxlbnRTYW1wbGUuZHRzLFxuICAgICAgICAgICAgc2l6ZTogc2lsZW50U2FtcGxlLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBmcmFtZUlkeCsrXG4gICAgICAgICAgaSsrIC8vIOS4jeWvuemdmemfs+W4p+WBmuavlOi+g1xuICAgICAgICB9XG4gICAgICB9ICovXG4gICAgfVxuXG4gICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMgPSBDb21wYXRpYmlsaXR5LnNvcnRBdWRpb1NhbXBsZXMoYXVkaW9TYW1wbGVzKVxuICB9XG5cbiAgZml4Q2hhbmdlU3RyZWFtVmlkZW8gKGNoYW5nZUlkeCkge1xuICAgIGNvbnN0IHsgc2FtcGxlcywgbWV0YSB9ID0gdGhpcy52aWRlb1RyYWNrO1xuICAgIGNvbnN0IHByZXZEdHMgPSBjaGFuZ2VJZHggPT09IDAgPyB0aGlzLmdldFN0cmVhbUNoYW5nZVN0YXJ0KHNhbXBsZXNbMF0pIDogc2FtcGxlc1tjaGFuZ2VJZHggLSAxXS5kdHM7XG4gICAgY29uc3QgY3VyRHRzID0gc2FtcGxlc1tjaGFuZ2VJZHhdLmR0cztcbiAgICBjb25zdCBpc0NvbnRpbnVlID0gTWF0aC5hYnMocHJldkR0cyAtIGN1ckR0cykgPD0gMiAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb247XG5cbiAgICBpZiAoaXNDb250aW51ZSkge1xuICAgICAgaWYgKCFzYW1wbGVzW2NoYW5nZUlkeF0ub3B0aW9ucykge1xuICAgICAgICBzYW1wbGVzW2NoYW5nZUlkeF0ub3B0aW9ucyA9IHtcbiAgICAgICAgICBpc0NvbnRpbnVlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNhbXBsZXNbY2hhbmdlSWR4XS5vcHRpb25zLmlzQ29udGludWUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZG9GaXhWaWRlbyhmYWxzZSlcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdFBhcnRTYW1wbGVzID0gc2FtcGxlcy5zbGljZSgwLCBjaGFuZ2VJZHgpO1xuICAgIGNvbnN0IHNlY29uZFBhcnRTYW1wbGVzID0gc2FtcGxlcy5zbGljZShjaGFuZ2VJZHgpO1xuICAgIGNvbnN0IGZpcnN0U2FtcGxlID0gc2FtcGxlc1swXVxuXG4gICAgY29uc3QgY2hhbmdlU2FtcGxlID0gc2Vjb25kUGFydFNhbXBsZXNbMF1cbiAgICBjb25zdCBmaXJzdFBhcnREdXJhdGlvbiA9IGNoYW5nZVNhbXBsZS5kdHMgLSBmaXJzdFNhbXBsZS5kdHNcbiAgICBjb25zdCBzdHJlYW1DaGFuZ2VTdGFydCA9IGZpcnN0U2FtcGxlLm9wdGlvbnMgJiYgZmlyc3RTYW1wbGUub3B0aW9ucy5zdGFydCArIGZpcnN0UGFydER1cmF0aW9uID8gZmlyc3RTYW1wbGUub3B0aW9ucy5zdGFydCA6IG51bGxcblxuICAgIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzID0gc2FtcGxlcy5zbGljZSgwLCBjaGFuZ2VJZHgpO1xuXG4gICAgdGhpcy5kb0ZpeFZpZGVvKGZhbHNlKTtcblxuICAgIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzID0gc2FtcGxlcy5zbGljZShjaGFuZ2VJZHgpO1xuXG4gICAgdGhpcy5kb0ZpeFZpZGVvKGZhbHNlLCBzdHJlYW1DaGFuZ2VTdGFydCk7XG5cbiAgICB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcyA9IGZpcnN0UGFydFNhbXBsZXMuY29uY2F0KHNlY29uZFBhcnRTYW1wbGVzKVxuICB9XG5cbiAgZml4Q2hhbmdlU3RyZWFtQXVkaW8gKGNoYW5nZUlkeCkge1xuICAgIGNvbnN0IHsgc2FtcGxlcywgbWV0YSB9ID0gdGhpcy5hdWRpb1RyYWNrO1xuXG4gICAgY29uc3QgcHJldkR0cyA9IGNoYW5nZUlkeCA9PT0gMCA/IHRoaXMuZ2V0U3RyZWFtQ2hhbmdlU3RhcnQoc2FtcGxlc1swXSkgOiBzYW1wbGVzW2NoYW5nZUlkeCAtIDFdLmR0cztcbiAgICBjb25zdCBjdXJEdHMgPSBzYW1wbGVzW2NoYW5nZUlkeF0uZHRzO1xuICAgIGNvbnN0IGlzQ29udGludWUgPSBNYXRoLmFicyhwcmV2RHRzIC0gY3VyRHRzKSA8PSAyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbjtcblxuICAgIGlmIChpc0NvbnRpbnVlKSB7XG4gICAgICBpZiAoIXNhbXBsZXNbY2hhbmdlSWR4XS5vcHRpb25zKSB7XG4gICAgICAgIHNhbXBsZXNbY2hhbmdlSWR4XS5vcHRpb25zID0ge1xuICAgICAgICAgIGlzQ29udGludWU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2FtcGxlc1tjaGFuZ2VJZHhdLm9wdGlvbnMuaXNDb250aW51ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5kb0ZpeEF1ZGlvKGZhbHNlKVxuICAgIH1cblxuICAgIGNvbnN0IGZpcnN0UGFydFNhbXBsZXMgPSBzYW1wbGVzLnNsaWNlKDAsIGNoYW5nZUlkeCk7XG4gICAgY29uc3Qgc2Vjb25kUGFydFNhbXBsZXMgPSBzYW1wbGVzLnNsaWNlKGNoYW5nZUlkeCk7XG4gICAgY29uc3QgZmlyc3RTYW1wbGUgPSBzYW1wbGVzWzBdXG5cbiAgICBjb25zdCBjaGFuZ2VTYW1wbGUgPSBzZWNvbmRQYXJ0U2FtcGxlc1swXVxuICAgIGNvbnN0IGZpcnN0UGFydER1cmF0aW9uID0gY2hhbmdlU2FtcGxlLmR0cyAtIGZpcnN0U2FtcGxlLmR0c1xuICAgIGNvbnN0IHN0cmVhbUNoYW5nZVN0YXJ0ID0gZmlyc3RTYW1wbGUub3B0aW9ucyAmJiBmaXJzdFNhbXBsZS5vcHRpb25zLnN0YXJ0ICsgZmlyc3RQYXJ0RHVyYXRpb24gPyBmaXJzdFNhbXBsZS5vcHRpb25zLnN0YXJ0IDogbnVsbFxuXG4gICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMgPSBmaXJzdFBhcnRTYW1wbGVzO1xuXG4gICAgdGhpcy5kb0ZpeEF1ZGlvKGZhbHNlKTtcblxuICAgIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzID0gc2Vjb25kUGFydFNhbXBsZXM7XG5cbiAgICB0aGlzLmRvRml4QXVkaW8oZmFsc2UsIHN0cmVhbUNoYW5nZVN0YXJ0KTtcblxuICAgIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzID0gZmlyc3RQYXJ0U2FtcGxlcy5jb25jYXQoc2Vjb25kUGFydFNhbXBsZXMpXG4gIH1cblxuICBnZXRGaXJzdFNhbXBsZSAoKSB7XG4gICAgLy8g6I635Y+WdmlkZW/lkoxhdWRpb+eahOmmluW4p+aVsOaNrlxuICAgIGxldCB7c2FtcGxlczogdmlkZW9TYW1wbGVzfSA9IHRoaXMudmlkZW9UcmFja1xuICAgIGxldCB7c2FtcGxlczogYXVkaW9TYW1wbGVzfSA9IHRoaXMuYXVkaW9UcmFja1xuXG4gICAgbGV0IGlzRmlyc3RWaWRlb1NhbXBsZXMgPSBmYWxzZTtcbiAgICBsZXQgaXNGaXJzdEF1ZGlvU2FtcGxlcyA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLl9maXJzdFZpZGVvU2FtcGxlICYmIHZpZGVvU2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUgPSBDb21wYXRpYmlsaXR5LmZpbmRGaXJzdFZpZGVvU2FtcGxlKHZpZGVvU2FtcGxlcylcbiAgICAgIGlzRmlyc3RWaWRlb1NhbXBsZXMgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9maXJzdEF1ZGlvU2FtcGxlICYmIGF1ZGlvU2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUgPSBDb21wYXRpYmlsaXR5LmZpbmRGaXJzdEF1ZGlvU2FtcGxlKGF1ZGlvU2FtcGxlcykgLy8g5a+75om+ZHRz5pyA5bCP55qE5bin5L2c5Li66aaW5Liq6Z+z6aKR5binXG4gICAgICBpc0ZpcnN0QXVkaW9TYW1wbGVzID0gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpc0ZpcnN0VmlkZW9TYW1wbGVzLFxuICAgICAgaXNGaXJzdEF1ZGlvU2FtcGxlc1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDlnKjmsqHmnIlyZWZTYW1wbGVEdXJhdGlvbueahOmXrumimOa1geS4re+8jFxuICAgKi9cbiAgZml4UmVmU2FtcGxlRHVyYXRpb24gKG1ldGEsIHNhbXBsZXMpIHtcbiAgICBjb25zdCBpc1ZpZGVvID0gbWV0YS50eXBlID09PSAndmlkZW8nXG4gICAgY29uc3QgYWxsU2FtcGxlc0NvdW50ID0gaXNWaWRlbyA/IHRoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQgOiB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50XG4gICAgY29uc3QgZmlyc3REdHMgPSBpc1ZpZGVvID8gdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5kdHMgOiB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlLmR0c1xuICAgIGNvbnN0IGZpbGxlZFNhbXBsZXNDb3VudCA9IGlzVmlkZW8gPyB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5sZW5ndGggOiB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5sZW5ndGhcblxuICAgIGlmICghbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiB8fCBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uIDw9IDAgfHwgTnVtYmVyLmlzTmFOKG1ldGEucmVmU2FtcGxlRHVyYXRpb24pKSB7XG4gICAgICBpZiAoc2FtcGxlcy5sZW5ndGggPj0gMSkge1xuICAgICAgICBjb25zdCBsYXN0RHRzID0gc2FtcGxlc1tzYW1wbGVzLmxlbmd0aCAtIDFdLmR0c1xuXG4gICAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKChsYXN0RHRzIC0gZmlyc3REdHMpIC8gKChhbGxTYW1wbGVzQ291bnQgKyBmaWxsZWRTYW1wbGVzQ291bnQpIC0gMSkpOyAvLyDlsIZyZWZTYW1wbGVEdXJhdGlvbumHjee9ruS4uuiuoeeul+WQjueahOW5s+Wdh+WAvFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobWV0YS5yZWZTYW1wbGVEdXJhdGlvbikge1xuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID49IDUpIHtcbiAgICAgICAgY29uc3QgbGFzdER0cyA9IHNhbXBsZXNbc2FtcGxlcy5sZW5ndGggLSAxXS5kdHNcbiAgICAgICAgY29uc3QgZmlyc3REdHMgPSBzYW1wbGVzWzBdLmR0c1xuICAgICAgICBjb25zdCBkdXJhdGlvbkF2ZyA9IChsYXN0RHRzIC0gZmlyc3REdHMpIC8gKHNhbXBsZXMubGVuZ3RoIC0gMSlcblxuICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcihNYXRoLmFicyhtZXRhLnJlZlNhbXBsZUR1cmF0aW9uIC0gZHVyYXRpb25BdmcpIDw9IDUgPyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uIDogZHVyYXRpb25BdmcpOyAvLyDlsIZyZWZTYW1wbGVEdXJhdGlvbumHjee9ruS4uuiuoeeul+WQjueahOW5s+Wdh+WAvFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDorrDlvZXmiKrmraLnm67liY3kuIDlhbHmkq3mlL7kuoblpJrlsJHluKdcbiAgICovXG4gIHJlY29yZFNhbXBsZXNDb3VudCAoKSB7XG4gICAgY29uc3QgeyBhdWRpb1RyYWNrLCB2aWRlb1RyYWNrIH0gPSB0aGlzXG5cbiAgICB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50ICs9IGF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGhcbiAgICB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50ICs9IHZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiDljrvpmaTkuI3lkIjms5XnmoTluKfvvIjlgJLpgIDjgIHph43lpI3luKfvvIlcbiAgICovXG4gIHJlbW92ZUludmFsaWRTYW1wbGVzICgpIHtcbiAgICBjb25zdCB7IF9maXJzdFZpZGVvU2FtcGxlLCBfZmlyc3RBdWRpb1NhbXBsZSB9ID0gdGhpc1xuXG4gICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMgPSB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcy5maWx0ZXIoKHNhbXBsZSwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChzYW1wbGUgPT09IF9maXJzdEF1ZGlvU2FtcGxlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNhbXBsZS5kdHMgPiBfZmlyc3RBdWRpb1NhbXBsZS5kdHNcbiAgICB9KVxuXG4gICAgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMgPSB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcy5maWx0ZXIoKHNhbXBsZSwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChzYW1wbGUgPT09IF9maXJzdFZpZGVvU2FtcGxlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNhbXBsZS5kdHMgPiBfZmlyc3RWaWRlb1NhbXBsZS5kdHNcbiAgICB9KVxuICB9XG5cbiAgZ2V0U3RyZWFtQ2hhbmdlU3RhcnQgKHNhbXBsZSkge1xuICAgIGlmIChzYW1wbGUub3B0aW9ucyAmJiBzYW1wbGUub3B0aW9ucy5zdGFydCkge1xuICAgICAgcmV0dXJuIHNhbXBsZS5vcHRpb25zLnN0YXJ0IC0gdGhpcy5kdHNCYXNlO1xuICAgIH1cbiAgICByZXR1cm4gSW5maW5pdHlcbiAgfVxuXG4gIHN0YXRpYyBzb3J0QXVkaW9TYW1wbGVzIChzYW1wbGVzKSB7XG4gICAgaWYgKHNhbXBsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gc2FtcGxlc1xuICAgIH1cblxuICAgIHJldHVybiBzYW1wbGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIHJldHVybiBhLmR0cyAtIGIuZHRzXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDlr7vmib5kdHPmnIDlsI/nmoRzYW1wbGVcbiAgICogQHBhcmFtIHNhbXBsZXNcbiAgICovXG4gIHN0YXRpYyBmaW5kRmlyc3RBdWRpb1NhbXBsZSAoc2FtcGxlcykge1xuICAgIGlmICghc2FtcGxlcyB8fCBzYW1wbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gQ29tcGF0aWJpbGl0eS5zb3J0QXVkaW9TYW1wbGVzKHNhbXBsZXMpWzBdXG4gIH1cblxuICBzdGF0aWMgZmluZEZpcnN0VmlkZW9TYW1wbGUgKHNhbXBsZXMpIHtcbiAgICBpZiAoIXNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IHNvcnRlZCA9IHNhbXBsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGEuZHRzIC0gYi5kdHM7XG4gICAgfSlcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzb3J0ZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChzb3J0ZWRbaV0uaXNLZXlmcmFtZSkge1xuICAgICAgICByZXR1cm4gc29ydGVkW2ldXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGRldGVjdExhcmdlR2FwIChuZXh0RHRzLCBmaXJzdFNhbXBsZSkge1xuICAgIGlmIChuZXh0RHRzID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN1ckR0cyA9IGZpcnN0U2FtcGxlLmR0cyB8fCAwXG4gICAgY29uc3QgY29uZDEgPSBuZXh0RHRzIC0gY3VyRHRzID49IDEwMDAgfHwgY3VyRHRzIC0gbmV4dER0cyA+PSAxMDAwIC8vIGZpeCBobHPmtYHlh7rnjrDlpKfph4/mtYFkdHPpl7Tot53pl67pophcbiAgICBjb25zdCBjb25kMiA9IGZpcnN0U2FtcGxlLm9wdGlvbnMgJiYgZmlyc3RTYW1wbGUub3B0aW9ucy5kaXNjb250aW51ZVxuXG4gICAgcmV0dXJuIGNvbmQxIHx8IGNvbmQyXG4gIH1cblxuICBzdGF0aWMgZG9GaXhMYXJnZUdhcCAoc2FtcGxlcywgZ2FwKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ2ZpeCBsYXJnZSBnYXAgJywgZ2FwKVxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzYW1wbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBzYW1wbGUgPSBzYW1wbGVzW2ldO1xuICAgICAgc2FtcGxlLmR0cyArPSBnYXBcbiAgICAgIGlmIChzYW1wbGUucHRzKSB7XG4gICAgICAgIHNhbXBsZS5wdHMgKz0gZ2FwXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOS4remAlOaNoua1gVxuICAgKi9cbiAgc3RhdGljIGRldGFjdENoYW5nZVN0cmVhbSAoc2FtcGxlcykge1xuICAgIGxldCBjaGFuZ2VkID0gZmFsc2U7XG4gICAgbGV0IGNoYW5nZWRJZHggPSAtMTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2FtcGxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKHNhbXBsZXNbaV0ub3B0aW9ucyAmJiBzYW1wbGVzW2ldLm9wdGlvbnMubWV0YSkge1xuICAgICAgICBjaGFuZ2VkID0gdHJ1ZVxuICAgICAgICBjaGFuZ2VkSWR4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNoYW5nZWQsXG4gICAgICBjaGFuZ2VkSWR4XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gIH1cblxuICBnZXQgYXVkaW9UcmFjayAoKSB7XG4gICAgaWYgKHRoaXMudHJhY2tzICYmIHRoaXMudHJhY2tzLmF1ZGlvVHJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYWNrcy5hdWRpb1RyYWNrXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzYW1wbGVzOiBbXSxcbiAgICAgIG1ldGE6IHt9XG4gICAgfVxuICB9XG5cbiAgZ2V0IHZpZGVvVHJhY2sgKCkge1xuICAgIGlmICh0aGlzLnRyYWNrcyAmJiB0aGlzLnRyYWNrcy52aWRlb1RyYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFja3MudmlkZW9UcmFja1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc2FtcGxlczogW10sXG4gICAgICBtZXRhOiB7fVxuICAgIH1cbiAgfVxuXG4gIGdldCBkdHNCYXNlICgpIHtcbiAgICBjb25zdCByZW11eGVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTVA0X1JFTVVYRVInKTtcbiAgICBpZiAocmVtdXhlcikge1xuICAgICAgcmV0dXJuIHJlbXV4ZXIuX2R0c0Jhc2VcbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQ29tcGF0aWJpbGl0eTtcbiIsImNsYXNzIEdvbG9tYiB7XG4gIGNvbnN0cnVjdG9yICh1aW50OGFycmF5KSB7XG4gICAgdGhpcy5UQUcgPSAnR29sb21iJ1xuICAgIHRoaXMuX2J1ZmZlciA9IHVpbnQ4YXJyYXlcbiAgICB0aGlzLl9idWZmZXJJbmRleCA9IDBcbiAgICB0aGlzLl90b3RhbEJ5dGVzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoXG4gICAgdGhpcy5fdG90YWxCaXRzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoICogOFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkID0gMFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPSAwXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9idWZmZXIgPSBudWxsXG4gIH1cblxuICBfZmlsbEN1cnJlbnRXb3JkICgpIHtcbiAgICBsZXQgYnVmZmVyQnl0ZXNMZWZ0ID0gdGhpcy5fdG90YWxCeXRlcyAtIHRoaXMuX2J1ZmZlckluZGV4XG4gICAgaWYgKGJ1ZmZlckJ5dGVzTGVmdCA8PSAwKSB7XG4gICAgICAvLyBUT0RPIOW8guW4uOWkhOeQhlxuICAgIH1cblxuICAgIGxldCBieXRlc1JlYWQgPSBNYXRoLm1pbig0LCBidWZmZXJCeXRlc0xlZnQpXG4gICAgbGV0IHdvcmQgPSBuZXcgVWludDhBcnJheSg0KVxuICAgIHdvcmQuc2V0KHRoaXMuX2J1ZmZlci5zdWJhcnJheSh0aGlzLl9idWZmZXJJbmRleCwgdGhpcy5fYnVmZmVySW5kZXggKyBieXRlc1JlYWQpKVxuICAgIHRoaXMuX2N1cnJlbnRXb3JkID0gbmV3IERhdGFWaWV3KHdvcmQuYnVmZmVyKS5nZXRVaW50MzIoMClcblxuICAgIHRoaXMuX2J1ZmZlckluZGV4ICs9IGJ5dGVzUmVhZFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPSBieXRlc1JlYWQgKiA4XG4gIH1cblxuICByZWFkQml0cyAoc2l6ZSkge1xuICAgIGxldCBiaXRzID0gTWF0aC5taW4odGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCwgc2l6ZSk7Ly8gOnVpbnRcbiAgICBsZXQgdmFsdSA9IHRoaXMuX2N1cnJlbnRXb3JkID4+PiAoMzIgLSBiaXRzKTtcbiAgICBpZiAoc2l6ZSA+IDMyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZWFkIG1vcmUgdGhhbiAzMiBiaXRzIGF0IGEgdGltZScpO1xuICAgIH1cbiAgICB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0IC09IGJpdHM7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLl9jdXJyZW50V29yZCA8PD0gYml0cztcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3RvdGFsQnl0ZXMgLSB0aGlzLl9idWZmZXJJbmRleCA+IDApIHtcbiAgICAgIHRoaXMuX2ZpbGxDdXJyZW50V29yZCgpO1xuICAgIH1cblxuICAgIGJpdHMgPSBzaXplIC0gYml0cztcbiAgICBpZiAoYml0cyA+IDAgJiYgdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCkge1xuICAgICAgcmV0dXJuIHZhbHUgPDwgYml0cyB8IHRoaXMucmVhZEJpdHMoYml0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWx1O1xuICAgIH1cbiAgfVxuXG4gIHJlYWRCb29sICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkQml0cygxKSA9PT0gMVxuICB9XG5cbiAgcmVhZEJ5dGUgKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDgpXG4gIH1cblxuICBfc2tpcExlYWRpbmdaZXJvICgpIHtcbiAgICBsZXQgemVyb0NvdW50XG4gICAgZm9yICh6ZXJvQ291bnQgPSAwOyB6ZXJvQ291bnQgPCB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0OyB6ZXJvQ291bnQrKykge1xuICAgICAgaWYgKCh0aGlzLl9jdXJyZW50V29yZCAmICgweDgwMDAwMDAwID4+PiB6ZXJvQ291bnQpKSAhPT0gMCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50V29yZCA8PD0gemVyb0NvdW50XG4gICAgICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgLT0gemVyb0NvdW50XG4gICAgICAgIHJldHVybiB6ZXJvQ291bnRcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fZmlsbEN1cnJlbnRXb3JkKClcbiAgICByZXR1cm4gemVyb0NvdW50ICsgdGhpcy5fc2tpcExlYWRpbmdaZXJvKClcbiAgfVxuXG4gIHJlYWRVRUcgKCkgeyAvLyB1bnNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbiAgICBsZXQgbGVhZGluZ1plcm9zID0gdGhpcy5fc2tpcExlYWRpbmdaZXJvKClcbiAgICByZXR1cm4gdGhpcy5yZWFkQml0cyhsZWFkaW5nWmVyb3MgKyAxKSAtIDFcbiAgfVxuXG4gIHJlYWRTRUcgKCkgeyAvLyBzaWduZWQgZXhwb25lbnRpYWwgZ29sb21iXG4gICAgbGV0IHZhbHVlID0gdGhpcy5yZWFkVUVHKClcbiAgICBpZiAodmFsdWUgJiAweDAxKSB7XG4gICAgICByZXR1cm4gKHZhbHVlICsgMSkgPj4+IDFcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0xICogKHZhbHVlID4+PiAxKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHb2xvbWJcbiIsImltcG9ydCBTcHNQYXJzZXIgZnJvbSAnLi9zcHMnO1xuY2xhc3MgTmFsdW5pdCB7XG4gIHN0YXRpYyBnZXROYWx1bml0cyAoYnVmZmVyKSB7XG4gICAgaWYgKGJ1ZmZlci5sZW5ndGggLSBidWZmZXIucG9zaXRpb24gPCA0KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgbGV0IGJ1ZiA9IGJ1ZmZlci5kYXRhdmlldztcbiAgICBsZXQgcG9zaXRpb24gPSBidWZmZXIucG9zaXRpb247XG4gICAgaWYgKGJ1Zi5nZXRJbnQzMihwb3NpdGlvbikgPT09IDEgfHxcbiAgICAoYnVmLmdldEludDE2KHBvc2l0aW9uKSA9PT0gMCAmJiBidWYuZ2V0SW50OChwb3NpdGlvbiArIDIpID09PSAxKSkge1xuICAgICAgcmV0dXJuIE5hbHVuaXQuZ2V0QW5uZXhiTmFscyhidWZmZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTmFsdW5pdC5nZXRBdmNjTmFscyhidWZmZXIpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRBbm5leGJOYWxzIChidWZmZXIpIHtcbiAgICBsZXQgbmFscyA9IFtdO1xuICAgIGxldCBwb3NpdGlvbiA9IE5hbHVuaXQuZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIoYnVmZmVyKTtcbiAgICBsZXQgc3RhcnQgPSBwb3NpdGlvbi5wb3M7XG4gICAgbGV0IGVuZCA9IHN0YXJ0O1xuICAgIHdoaWxlIChzdGFydCA8IGJ1ZmZlci5sZW5ndGggLSA0KSB7XG4gICAgICBsZXQgaGVhZGVyID0gYnVmZmVyLmJ1ZmZlci5zbGljZShzdGFydCwgc3RhcnQgKyBwb3NpdGlvbi5oZWFkZXJMZW5ndGgpO1xuICAgICAgaWYgKHBvc2l0aW9uLnBvcyA9PT0gYnVmZmVyLnBvc2l0aW9uKSB7XG4gICAgICAgIGJ1ZmZlci5za2lwKHBvc2l0aW9uLmhlYWRlckxlbmd0aCk7XG4gICAgICB9XG4gICAgICBwb3NpdGlvbiA9IE5hbHVuaXQuZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIoYnVmZmVyKTtcbiAgICAgIGVuZCA9IHBvc2l0aW9uLnBvcztcbiAgICAgIGxldCBib2R5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlci5zbGljZShzdGFydCArIGhlYWRlci5ieXRlTGVuZ3RoLCBlbmQpKTtcbiAgICAgIGxldCB1bml0ID0ge2hlYWRlciwgYm9keX07XG4gICAgICBOYWx1bml0LmFuYWx5c2VOYWwodW5pdCk7XG4gICAgICBuYWxzLnB1c2godW5pdCk7XG4gICAgICBidWZmZXIuc2tpcChlbmQgLSBidWZmZXIucG9zaXRpb24pO1xuICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgfVxuICAgIHJldHVybiBuYWxzO1xuICB9XG5cbiAgc3RhdGljIGdldEF2Y2NOYWxzIChidWZmZXIpIHtcbiAgICBsZXQgbmFscyA9IFtdO1xuICAgIHdoaWxlIChidWZmZXIucG9zaXRpb24gPCBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgbGV0IGxlbmd0aCA9IGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQzMigpO1xuICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggLSBidWZmZXIucG9zaXRpb24gPj0gbGVuZ3RoKSB7XG4gICAgICAgIGxldCBoZWFkZXIgPSBidWZmZXIuYnVmZmVyLnNsaWNlKGJ1ZmZlci5wb3NpdGlvbiwgYnVmZmVyLnBvc2l0aW9uICsgNCk7XG4gICAgICAgIGJ1ZmZlci5za2lwKDQpXG4gICAgICAgIGxldCBib2R5ID0gYnVmZmVyLmJ1ZmZlci5zbGljZShidWZmZXIucG9zaXRpb24sIGJ1ZmZlci5wb3NpdGlvbiArIGxlbmd0aCk7XG4gICAgICAgIGJ1ZmZlci5za2lwKGxlbmd0aCk7XG4gICAgICAgIGxldCB1bml0ID0ge2hlYWRlciwgYm9keX07XG4gICAgICAgIE5hbHVuaXQuYW5hbHlzZU5hbCh1bml0KTtcbiAgICAgICAgbmFscy5wdXNoKHVuaXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuYWxzO1xuICB9XG5cbiAgc3RhdGljIGFuYWx5c2VOYWwgKHVuaXQpIHtcbiAgICBsZXQgdHlwZSA9IHVuaXQuYm9keVswXSAmIDB4MWY7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIC8vIE5EUlxuICAgICAgICB1bml0Lm5kciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICAvLyBJRFJcbiAgICAgICAgdW5pdC5pZHIgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjpcbiAgICAgICAgLy8gU0VJXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA3OlxuICAgICAgICAvLyBTUFNcbiAgICAgICAgdW5pdC5zcHMgPSBTcHNQYXJzZXIucGFyc2VTUFModW5pdC5ib2R5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIC8vIFBQU1xuICAgICAgICB1bml0LnBwcyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5OlxuICAgICAgICAvLyBBVURcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIgKGJ1ZmZlcikge1xuICAgIC8vIHNlcGVyYXRlXG4gICAgbGV0IHBvcyA9IGJ1ZmZlci5wb3NpdGlvbjtcbiAgICBsZXQgaGVhZGVyTGVuZ3RoID0gMDtcbiAgICB3aGlsZSAoaGVhZGVyTGVuZ3RoICE9PSAzICYmIGhlYWRlckxlbmd0aCAhPT0gNCAmJiBwb3MgPCBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MpID09PSAwKSB7XG4gICAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICAvLyAweDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDQ7XG4gICAgICAgIH0gZWxzZSBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDgocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICBoZWFkZXJMZW5ndGggPSAzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3MrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zID09PSBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MpID09PSAwKSB7XG4gICAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICAvLyAweDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgICBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDE2KHBvcykgPT09IDAgJiYgYnVmZmVyLmRhdGF2aWV3LmdldEludDgocG9zKSA9PT0gMSkge1xuICAgICAgICAgIC8vIDB4MDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9zID0gYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge3BvcywgaGVhZGVyTGVuZ3RofTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBdmNjIChzcHMsIHBwcykge1xuICAgIGxldCByZXQgPSBuZXcgVWludDhBcnJheShzcHMuYnl0ZUxlbmd0aCArIHBwcy5ieXRlTGVuZ3RoICsgMTEpO1xuICAgIHJldFswXSA9IDB4MDE7XG4gICAgcmV0WzFdID0gc3BzWzFdO1xuICAgIHJldFsyXSA9IHNwc1syXTtcbiAgICByZXRbM10gPSBzcHNbM107XG4gICAgcmV0WzRdID0gMjU1O1xuICAgIHJldFs1XSA9IDIyNTtcblxuICAgIGxldCBvZmZzZXQgPSA2O1xuXG4gICAgcmV0LnNldChuZXcgVWludDhBcnJheShbKHNwcy5ieXRlTGVuZ3RoID4+PiA4KSAmIDB4ZmYsIHNwcy5ieXRlTGVuZ3RoICYgMHhmZl0pLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSAyO1xuICAgIHJldC5zZXQoc3BzLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBzcHMuYnl0ZUxlbmd0aDtcblxuICAgIHJldFtvZmZzZXRdID0gMTtcbiAgICBvZmZzZXQrKztcblxuICAgIHJldC5zZXQobmV3IFVpbnQ4QXJyYXkoWyhwcHMuYnl0ZUxlbmd0aCA+Pj4gOCkgJiAweGZmLCBwcHMuYnl0ZUxlbmd0aCAmIDB4ZmZdKSwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gMjtcbiAgICByZXQuc2V0KHBwcywgb2Zmc2V0KTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5hbHVuaXQ7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgICovXG4vKiBlc2xpbnQtZGlzYWJsZSBvbmUtdmFyICAqL1xuaW1wb3J0IEdvbG9tYiBmcm9tICcuL2dvbG9tYidcblxuY2xhc3MgU1BTUGFyc2VyIHtcbiAgc3RhdGljIF9lYnNwMnJic3AgKHVpbnQ4YXJyYXkpIHtcbiAgICBsZXQgc3JjID0gdWludDhhcnJheVxuICAgIGxldCBzcmNMZW5ndGggPSBzcmMuYnl0ZUxlbmd0aFxuICAgIGxldCBkc3QgPSBuZXcgVWludDhBcnJheShzcmNMZW5ndGgpXG4gICAgbGV0IGRzdElkeCA9IDBcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3JjTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpID49IDIpIHtcbiAgICAgICAgaWYgKHNyY1tpXSA9PT0gMHgwMyAmJiBzcmNbaSAtIDFdID09PSAweDAwICYmIHNyY1tpIC0gMl0gPT09IDB4MDApIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkc3RbZHN0SWR4XSA9IHNyY1tpXVxuICAgICAgZHN0SWR4KytcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZHN0LmJ1ZmZlciwgMCwgZHN0SWR4KVxuICB9XG5cbiAgc3RhdGljIHBhcnNlU1BTICh1aW50OGFycmF5KSB7XG4gICAgbGV0IHJic3AgPSBTUFNQYXJzZXIuX2Vic3AycmJzcCh1aW50OGFycmF5KVxuICAgIGxldCBnYiA9IG5ldyBHb2xvbWIocmJzcClcblxuICAgIGdiLnJlYWRCeXRlKClcbiAgICBsZXQgcHJvZmlsZUlkYyA9IGdiLnJlYWRCeXRlKClcbiAgICBnYi5yZWFkQnl0ZSgpXG4gICAgbGV0IGxldmVsSWRjID0gZ2IucmVhZEJ5dGUoKVxuICAgIGdiLnJlYWRVRUcoKVxuXG4gICAgbGV0IHByb2ZpbGVfc3RyaW5nID0gU1BTUGFyc2VyLmdldFByb2ZpbGVTdHJpbmcocHJvZmlsZUlkYylcbiAgICBsZXQgbGV2ZWxfc3RyaW5nID0gU1BTUGFyc2VyLmdldExldmVsU3RyaW5nKGxldmVsSWRjKVxuICAgIGxldCBjaHJvbWFfZm9ybWF0X2lkYyA9IDFcbiAgICBsZXQgY2hyb21hX2Zvcm1hdCA9IDQyMFxuICAgIGxldCBjaHJvbWFfZm9ybWF0X3RhYmxlID0gWzAsIDQyMCwgNDIyLCA0NDRdXG4gICAgbGV0IGJpdF9kZXB0aCA9IDhcblxuICAgIGlmIChwcm9maWxlSWRjID09PSAxMDAgfHwgcHJvZmlsZUlkYyA9PT0gMTEwIHx8IHByb2ZpbGVJZGMgPT09IDEyMiB8fFxuICAgICAgcHJvZmlsZUlkYyA9PT0gMjQ0IHx8IHByb2ZpbGVJZGMgPT09IDQ0IHx8IHByb2ZpbGVJZGMgPT09IDgzIHx8XG4gICAgICBwcm9maWxlSWRjID09PSA4NiB8fCBwcm9maWxlSWRjID09PSAxMTggfHwgcHJvZmlsZUlkYyA9PT0gMTI4IHx8XG4gICAgICBwcm9maWxlSWRjID09PSAxMzggfHwgcHJvZmlsZUlkYyA9PT0gMTQ0KSB7XG4gICAgICBjaHJvbWFfZm9ybWF0X2lkYyA9IGdiLnJlYWRVRUcoKVxuICAgICAgaWYgKGNocm9tYV9mb3JtYXRfaWRjID09PSAzKSB7XG4gICAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgICB9XG4gICAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPD0gMykge1xuICAgICAgICBjaHJvbWFfZm9ybWF0ID0gY2hyb21hX2Zvcm1hdF90YWJsZVtjaHJvbWFfZm9ybWF0X2lkY11cbiAgICAgIH1cblxuICAgICAgYml0X2RlcHRoID0gZ2IucmVhZFVFRygpICsgOFxuICAgICAgZ2IucmVhZFVFRygpXG4gICAgICBnYi5yZWFkQml0cygxKVxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgbGV0IHNjYWxpbmdfbGlzdF9jb3VudCA9IChjaHJvbWFfZm9ybWF0X2lkYyAhPT0gMykgPyA4IDogMTJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2FsaW5nX2xpc3RfY291bnQ7IGkrKykge1xuICAgICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgICAgICBpZiAoaSA8IDYpIHtcbiAgICAgICAgICAgICAgU1BTUGFyc2VyLl9za2lwU2NhbGluZ0xpc3QoZ2IsIDE2KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgU1BTUGFyc2VyLl9za2lwU2NhbGluZ0xpc3QoZ2IsIDY0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnYi5yZWFkVUVHKClcbiAgICBsZXQgcGljX29yZGVyX2NudF90eXBlID0gZ2IucmVhZFVFRygpXG4gICAgaWYgKHBpY19vcmRlcl9jbnRfdHlwZSA9PT0gMCkge1xuICAgICAgZ2IucmVhZFVFRygpXG4gICAgfSBlbHNlIGlmIChwaWNfb3JkZXJfY250X3R5cGUgPT09IDEpIHtcbiAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgICBnYi5yZWFkU0VHKClcbiAgICAgIGdiLnJlYWRTRUcoKVxuICAgICAgbGV0IG51bV9yZWZfZnJhbWVzX2luX3BpY19vcmRlcl9jbnRfY3ljbGUgPSBnYi5yZWFkVUVHKClcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZTsgaSsrKSB7XG4gICAgICAgIGdiLnJlYWRTRUcoKVxuICAgICAgfVxuICAgIH1cbiAgICBnYi5yZWFkVUVHKClcbiAgICBnYi5yZWFkQml0cygxKVxuXG4gICAgbGV0IHBpY193aWR0aF9pbl9tYnNfbWludXMxID0gZ2IucmVhZFVFRygpXG4gICAgbGV0IHBpY19oZWlnaHRfaW5fbWFwX3VuaXRzX21pbnVzMSA9IGdiLnJlYWRVRUcoKVxuXG4gICAgbGV0IGZyYW1lX21ic19vbmx5X2ZsYWcgPSBnYi5yZWFkQml0cygxKVxuICAgIGlmIChmcmFtZV9tYnNfb25seV9mbGFnID09PSAwKSB7XG4gICAgICBnYi5yZWFkQml0cygxKVxuICAgIH1cbiAgICBnYi5yZWFkQml0cygxKVxuXG4gICAgbGV0IGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgPSAwXG4gICAgbGV0IGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0ID0gMFxuICAgIGxldCBmcmFtZV9jcm9wX3RvcF9vZmZzZXQgPSAwXG4gICAgbGV0IGZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCA9IDBcblxuICAgIGxldCBmcmFtZV9jcm9wcGluZ19mbGFnID0gZ2IucmVhZEJvb2woKVxuICAgIGlmIChmcmFtZV9jcm9wcGluZ19mbGFnKSB7XG4gICAgICBmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgICBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCA9IGdiLnJlYWRVRUcoKVxuICAgICAgZnJhbWVfY3JvcF90b3Bfb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgICBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQgPSBnYi5yZWFkVUVHKClcbiAgICB9XG5cbiAgICBsZXQgcGFyX3dpZHRoID0gMSwgcGFyX2hlaWdodCA9IDFcbiAgICBsZXQgZnBzID0gMCwgZnBzX2ZpeGVkID0gdHJ1ZSwgZnBzX251bSA9IDAsIGZwc19kZW4gPSAwXG5cbiAgICBsZXQgdnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnID0gZ2IucmVhZEJvb2woKVxuICAgIGlmICh2dWlfcGFyYW1ldGVyc19wcmVzZW50X2ZsYWcpIHtcbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7IC8vIGFzcGVjdF9yYXRpb19pbmZvX3ByZXNlbnRfZmxhZ1xuICAgICAgICBsZXQgYXNwZWN0X3JhdGlvX2lkYyA9IGdiLnJlYWRCeXRlKClcbiAgICAgICAgbGV0IHBhcl93X3RhYmxlID0gWzEsIDEyLCAxMCwgMTYsIDQwLCAyNCwgMjAsIDMyLCA4MCwgMTgsIDE1LCA2NCwgMTYwLCA0LCAzLCAyXVxuICAgICAgICBsZXQgcGFyX2hfdGFibGUgPSBbMSwgMTEsIDExLCAxMSwgMzMsIDExLCAxMSwgMTEsIDMzLCAxMSwgMTEsIDMzLCA5OSwgMywgMiwgMV1cblxuICAgICAgICBpZiAoYXNwZWN0X3JhdGlvX2lkYyA+IDAgJiYgYXNwZWN0X3JhdGlvX2lkYyA8IDE2KSB7XG4gICAgICAgICAgcGFyX3dpZHRoID0gcGFyX3dfdGFibGVbYXNwZWN0X3JhdGlvX2lkYyAtIDFdXG4gICAgICAgICAgcGFyX2hlaWdodCA9IHBhcl9oX3RhYmxlW2FzcGVjdF9yYXRpb19pZGMgLSAxXVxuICAgICAgICB9IGVsc2UgaWYgKGFzcGVjdF9yYXRpb19pZGMgPT09IDI1NSkge1xuICAgICAgICAgIHBhcl93aWR0aCA9IGdiLnJlYWRCeXRlKCkgPDwgOCB8IGdiLnJlYWRCeXRlKClcbiAgICAgICAgICBwYXJfaGVpZ2h0ID0gZ2IucmVhZEJ5dGUoKSA8PCA4IHwgZ2IucmVhZEJ5dGUoKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRCb29sKClcbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRCaXRzKDQpXG4gICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgICAgZ2IucmVhZEJpdHMoMjQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRVRUcoKVxuICAgICAgICBnYi5yZWFkVUVHKClcbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGxldCBudW1fdW5pdHNfaW5fdGljayA9IGdiLnJlYWRCaXRzKDMyKVxuICAgICAgICBsZXQgdGltZV9zY2FsZSA9IGdiLnJlYWRCaXRzKDMyKVxuICAgICAgICBmcHNfZml4ZWQgPSBnYi5yZWFkQm9vbCgpXG5cbiAgICAgICAgZnBzX251bSA9IHRpbWVfc2NhbGVcbiAgICAgICAgZnBzX2RlbiA9IG51bV91bml0c19pbl90aWNrICogMlxuICAgICAgICBmcHMgPSBmcHNfbnVtIC8gZnBzX2RlblxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwYXJTY2FsZSA9IDFcbiAgICBpZiAocGFyX3dpZHRoICE9PSAxIHx8IHBhcl9oZWlnaHQgIT09IDEpIHtcbiAgICAgIHBhclNjYWxlID0gcGFyX3dpZHRoIC8gcGFyX2hlaWdodFxuICAgIH1cblxuICAgIGxldCBjcm9wX3VuaXRfeCA9IDAsIGNyb3BfdW5pdF95ID0gMFxuICAgIGlmIChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMCkge1xuICAgICAgY3JvcF91bml0X3ggPSAxXG4gICAgICBjcm9wX3VuaXRfeSA9IDIgLSBmcmFtZV9tYnNfb25seV9mbGFnXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBzdWJfd2MgPSAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDMpID8gMSA6IDJcbiAgICAgIGxldCBzdWJfaGMgPSAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDEpID8gMiA6IDFcbiAgICAgIGNyb3BfdW5pdF94ID0gc3ViX3djXG4gICAgICBjcm9wX3VuaXRfeSA9IHN1Yl9oYyAqICgyIC0gZnJhbWVfbWJzX29ubHlfZmxhZylcbiAgICB9XG5cbiAgICBsZXQgY29kZWNfd2lkdGggPSAocGljX3dpZHRoX2luX21ic19taW51czEgKyAxKSAqIDE2XG4gICAgbGV0IGNvZGVjX2hlaWdodCA9ICgyIC0gZnJhbWVfbWJzX29ubHlfZmxhZykgKiAoKHBpY19oZWlnaHRfaW5fbWFwX3VuaXRzX21pbnVzMSArIDEpICogMTYpXG5cbiAgICBjb2RlY193aWR0aCAtPSAoZnJhbWVfY3JvcF9sZWZ0X29mZnNldCArIGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0KSAqIGNyb3BfdW5pdF94XG4gICAgY29kZWNfaGVpZ2h0IC09IChmcmFtZV9jcm9wX3RvcF9vZmZzZXQgKyBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQpICogY3JvcF91bml0X3lcblxuICAgIGxldCBwcmVzZW50X3dpZHRoID0gTWF0aC5jZWlsKGNvZGVjX3dpZHRoICogcGFyU2NhbGUpXG5cbiAgICBnYi5kZXN0cm95KClcbiAgICBnYiA9IG51bGxcblxuICAgIHJldHVybiB7XG4gICAgICBwcm9maWxlX3N0cmluZzogcHJvZmlsZV9zdHJpbmcsXG4gICAgICBsZXZlbF9zdHJpbmc6IGxldmVsX3N0cmluZyxcbiAgICAgIGJpdF9kZXB0aDogYml0X2RlcHRoLFxuICAgICAgY2hyb21hX2Zvcm1hdDogY2hyb21hX2Zvcm1hdCxcbiAgICAgIGNocm9tYV9mb3JtYXRfc3RyaW5nOiBTUFNQYXJzZXIuZ2V0Q2hyb21hRm9ybWF0U3RyaW5nKGNocm9tYV9mb3JtYXQpLFxuXG4gICAgICBmcmFtZV9yYXRlOiB7XG4gICAgICAgIGZpeGVkOiBmcHNfZml4ZWQsXG4gICAgICAgIGZwczogZnBzLFxuICAgICAgICBmcHNfZGVuOiBmcHNfZGVuLFxuICAgICAgICBmcHNfbnVtOiBmcHNfbnVtXG4gICAgICB9LFxuXG4gICAgICBwYXJfcmF0aW86IHtcbiAgICAgICAgd2lkdGg6IHBhcl93aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBwYXJfaGVpZ2h0XG4gICAgICB9LFxuXG4gICAgICBjb2RlY19zaXplOiB7XG4gICAgICAgIHdpZHRoOiBjb2RlY193aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjb2RlY19oZWlnaHRcbiAgICAgIH0sXG5cbiAgICAgIHByZXNlbnRfc2l6ZToge1xuICAgICAgICB3aWR0aDogcHJlc2VudF93aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjb2RlY19oZWlnaHRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX3NraXBTY2FsaW5nTGlzdCAoZ2IsIGNvdW50KSB7XG4gICAgbGV0IGxhc3Rfc2NhbGUgPSA4LCBuZXh0X3NjYWxlID0gOFxuICAgIGxldCBkZWx0YV9zY2FsZSA9IDBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIGlmIChuZXh0X3NjYWxlICE9PSAwKSB7XG4gICAgICAgIGRlbHRhX3NjYWxlID0gZ2IucmVhZFNFRygpXG4gICAgICAgIG5leHRfc2NhbGUgPSAobGFzdF9zY2FsZSArIGRlbHRhX3NjYWxlICsgMjU2KSAlIDI1NlxuICAgICAgfVxuICAgICAgbGFzdF9zY2FsZSA9IChuZXh0X3NjYWxlID09PSAwKSA/IGxhc3Rfc2NhbGUgOiBuZXh0X3NjYWxlXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFByb2ZpbGVTdHJpbmcgKHByb2ZpbGVJZGMpIHtcbiAgICBzd2l0Y2ggKHByb2ZpbGVJZGMpIHtcbiAgICAgIGNhc2UgNjY6XG4gICAgICAgIHJldHVybiAnQmFzZWxpbmUnXG4gICAgICBjYXNlIDc3OlxuICAgICAgICByZXR1cm4gJ01haW4nXG4gICAgICBjYXNlIDg4OlxuICAgICAgICByZXR1cm4gJ0V4dGVuZGVkJ1xuICAgICAgY2FzZSAxMDA6XG4gICAgICAgIHJldHVybiAnSGlnaCdcbiAgICAgIGNhc2UgMTEwOlxuICAgICAgICByZXR1cm4gJ0hpZ2gxMCdcbiAgICAgIGNhc2UgMTIyOlxuICAgICAgICByZXR1cm4gJ0hpZ2g0MjInXG4gICAgICBjYXNlIDI0NDpcbiAgICAgICAgcmV0dXJuICdIaWdoNDQ0J1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdVbmtub3duJ1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRMZXZlbFN0cmluZyAobGV2ZWxJZGMpIHtcbiAgICByZXR1cm4gKGxldmVsSWRjIC8gMTApLnRvRml4ZWQoMSlcbiAgfVxuXG4gIHN0YXRpYyBnZXRDaHJvbWFGb3JtYXRTdHJpbmcgKGNocm9tYSkge1xuICAgIHN3aXRjaCAoY2hyb21hKSB7XG4gICAgICBjYXNlIDQyMDpcbiAgICAgICAgcmV0dXJuICc0OjI6MCdcbiAgICAgIGNhc2UgNDIyOlxuICAgICAgICByZXR1cm4gJzQ6MjoyJ1xuICAgICAgY2FzZSA0NDQ6XG4gICAgICAgIHJldHVybiAnNDo0OjQnXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ1Vua25vd24nXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHRvVmlkZW9NZXRhIChzcHNDb25maWcpIHtcbiAgICBsZXQgbWV0YSA9IHt9XG4gICAgaWYgKHNwc0NvbmZpZyAmJiBzcHNDb25maWcuY29kZWNfc2l6ZSkge1xuICAgICAgbWV0YS5jb2RlY1dpZHRoID0gc3BzQ29uZmlnLmNvZGVjX3NpemUud2lkdGhcbiAgICAgIG1ldGEuY29kZWNIZWlnaHQgPSBzcHNDb25maWcuY29kZWNfc2l6ZS5oZWlnaHRcbiAgICAgIG1ldGEucHJlc2VudFdpZHRoID0gc3BzQ29uZmlnLnByZXNlbnRfc2l6ZS53aWR0aFxuICAgICAgbWV0YS5wcmVzZW50SGVpZ2h0ID0gc3BzQ29uZmlnLnByZXNlbnRfc2l6ZS5oZWlnaHRcbiAgICB9XG5cbiAgICBtZXRhLnByb2ZpbGUgPSBzcHNDb25maWcucHJvZmlsZV9zdHJpbmdcbiAgICBtZXRhLmxldmVsID0gc3BzQ29uZmlnLmxldmVsX3N0cmluZ1xuICAgIG1ldGEuYml0RGVwdGggPSBzcHNDb25maWcuYml0X2RlcHRoXG4gICAgbWV0YS5jaHJvbWFGb3JtYXQgPSBzcHNDb25maWcuY2hyb21hX2Zvcm1hdFxuXG4gICAgbWV0YS5wYXJSYXRpbyA9IHtcbiAgICAgIHdpZHRoOiBzcHNDb25maWcucGFyX3JhdGlvLndpZHRoLFxuICAgICAgaGVpZ2h0OiBzcHNDb25maWcucGFyX3JhdGlvLmhlaWdodFxuICAgIH1cblxuICAgIG1ldGEuZnJhbWVSYXRlID0gc3BzQ29uZmlnLmZyYW1lX3JhdGVcblxuICAgIGxldCBmcHNEZW4gPSBtZXRhLmZyYW1lUmF0ZS5mcHNfZGVuXG4gICAgbGV0IGZwc051bSA9IG1ldGEuZnJhbWVSYXRlLmZwc19udW1cbiAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcihtZXRhLnRpbWVzY2FsZSAqIChmcHNEZW4gLyBmcHNOdW0pKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNQU1BhcnNlclxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIEhMU1xuICBNM1U4UGFyc2VyOiByZXF1aXJlKCcuL3NyYy9obHMvZGVtdXhlci9tM3U4cGFyc2VyJykuZGVmYXVsdCxcbiAgVHNEZW11eGVyOiByZXF1aXJlKCcuL3NyYy9obHMvZGVtdXhlci90cycpLmRlZmF1bHQsXG4gIFBsYXlsaXN0OiByZXF1aXJlKCcuL3NyYy9obHMvcGxheWxpc3QnKS5kZWZhdWx0LFxuICBGbHZEZW11eGVyOiByZXF1aXJlKCcuL3NyYy9mbHYvaW5kZXgnKS5kZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgaXNMZSwgVVRGOCB9IGZyb20gJ3hncGxheWVyLXV0aWxzJ1xuXG5jb25zdCBEQVRBX1RZUEVTID0ge1xuICBOVU1CRVI6IDAsXG4gIEJPT0xFQU46IDEsXG4gIFNUUklORzogMixcbiAgT0JKRUNUOiAzLFxuICBNSVhfQVJSQVk6IDgsXG4gIE9CSkVDVF9FTkQ6IDksXG4gIFNUUklDVF9BUlJBWTogMTAsXG4gIERBVEU6IDExLFxuICBMT05FX1NUUklORzogMTJcbn1cblxuLyoqXG4gKiBtZXRh5L+h5oGv6Kej5p6QXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFNRlBhcnNlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLnJlYWRPZmZzZXQgPSB0aGlzLm9mZnNldFxuICB9XG5cbiAgcmVzb2x2ZSAobWV0YSwgc2l6ZSkge1xuICAgIGlmIChzaXplIDwgMykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgZW5vdWdoIGRhdGEgZm9yIG1ldGFpbmZvJylcbiAgICB9XG4gICAgY29uc3QgbWV0YURhdGEgPSB7fVxuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlVmFsdWUobWV0YSlcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucGFyc2VWYWx1ZShtZXRhLCBzaXplIC0gbmFtZS5ib2R5U2l6ZSlcbiAgICBtZXRhRGF0YVtuYW1lLmRhdGFdID0gdmFsdWUuZGF0YVxuXG4gICAgdGhpcy5yZXNldFN0YXR1cygpXG4gICAgcmV0dXJuIG1ldGFEYXRhXG4gIH1cblxuICByZXNldFN0YXR1cyAoKSB7XG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgdGhpcy5yZWFkT2Zmc2V0ID0gdGhpcy5vZmZzZXRcbiAgfVxuXG4gIHBhcnNlU3RyaW5nIChidWZmZXIpIHtcbiAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhidWZmZXIsIHRoaXMucmVhZE9mZnNldClcbiAgICBjb25zdCBzdHJMZW4gPSBkdi5nZXRVaW50MTYoMCwgIWlzTGUpXG4gICAgbGV0IHN0ciA9ICcnXG4gICAgaWYgKHN0ckxlbiA+IDApIHtcbiAgICAgIHN0ciA9IFVURjguZGVjb2RlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0ICsgMiwgc3RyTGVuKSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gJydcbiAgICB9XG4gICAgbGV0IHNpemUgPSBzdHJMZW4gKyAyXG4gICAgdGhpcy5yZWFkT2Zmc2V0ICs9IHNpemVcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogc3RyLFxuICAgICAgYm9keVNpemU6IHN0ckxlbiArIDJcbiAgICB9XG4gIH1cblxuICBwYXJzZURhdGUgKGJ1ZmZlciwgc2l6ZSkge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0LCBzaXplKVxuICAgIGxldCB0cyA9IGR2LmdldEZsb2F0NjQoMCwgIWlzTGUpXG4gICAgY29uc3QgdGltZU9mZnNldCA9IGR2LmdldEludDE2KDgsICFpc0xlKVxuICAgIHRzICs9IHRpbWVPZmZzZXQgKiA2MCAqIDEwMDBcblxuICAgIHRoaXMucmVhZE9mZnNldCArPSAxMFxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBuZXcgRGF0ZSh0cyksXG4gICAgICBib2R5U2l6ZTogMTBcbiAgICB9XG4gIH1cblxuICBwYXJzZU9iamVjdCAoYnVmZmVyLCBzaXplKSB7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBzaXplKVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKGJ1ZmZlciwgc2l6ZSAtIG5hbWUuYm9keVNpemUpXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbmFtZTogbmFtZS5kYXRhLFxuICAgICAgICB2YWx1ZTogdmFsdWUuZGF0YVxuICAgICAgfSxcbiAgICAgIGJvZHlTaXplOiBuYW1lLmJvZHlTaXplICsgdmFsdWUuYm9keVNpemUsXG4gICAgICBpc09iakVuZDogdmFsdWUuaXNPYmpFbmRcbiAgICB9XG4gIH1cblxuICBwYXJzZUxvbmdTdHJpbmcgKGJ1ZmZlcikge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0KVxuICAgIGNvbnN0IHN0ckxlbiA9IGR2LmdldFVpbnQzMigwLCAhaXNMZSlcbiAgICBsZXQgc3RyID0gJydcbiAgICBpZiAoc3RyTGVuID4gMCkge1xuICAgICAgc3RyID0gVVRGOC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQgKyAyLCBzdHJMZW4pKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSAnJ1xuICAgIH1cbiAgICAvLyBjb25zdCBzaXplID0gc3RyTGVuICsgNDtcbiAgICB0aGlzLnJlYWRPZmZzZXQgKz0gc3RyTGVuICsgNFxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBzdHIsXG4gICAgICBib2R5U2l6ZTogc3RyTGVuICsgNFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmnpBtZXRh5Lit55qE5Y+Y6YePXG4gICAqL1xuICBwYXJzZVZhbHVlIChkYXRhLCBzaXplKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigpXG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgYnVmZmVyID0gZGF0YVxuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIgPSBkYXRhLmJ1ZmZlclxuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBOVU1CRVIsXG4gICAgICBCT09MRUFOLFxuICAgICAgU1RSSU5HLFxuICAgICAgT0JKRUNULFxuICAgICAgTUlYX0FSUkFZLFxuICAgICAgT0JKRUNUX0VORCxcbiAgICAgIFNUUklDVF9BUlJBWSxcbiAgICAgIERBVEUsXG4gICAgICBMT05FX1NUUklOR1xuICAgIH0gPSBEQVRBX1RZUEVTXG4gICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQsIHNpemUpXG4gICAgbGV0IGlzT2JqRW5kID0gZmFsc2VcbiAgICBjb25zdCB0eXBlID0gZGF0YVZpZXcuZ2V0VWludDgoMClcbiAgICBsZXQgb2Zmc2V0ID0gMVxuICAgIHRoaXMucmVhZE9mZnNldCArPSAxXG4gICAgbGV0IHZhbHVlID0gbnVsbFxuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIE5VTUJFUjoge1xuICAgICAgICB2YWx1ZSA9IGRhdGFWaWV3LmdldEZsb2F0NjQoMSwgIWlzTGUpXG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSA4XG4gICAgICAgIG9mZnNldCArPSA4XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIEJPT0xFQU46IHtcbiAgICAgICAgY29uc3QgYm9vbE51bSA9IGRhdGFWaWV3LmdldFVpbnQ4KDEpXG4gICAgICAgIHZhbHVlID0gISFib29sTnVtXG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSAxXG4gICAgICAgIG9mZnNldCArPSAxXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIFNUUklORzoge1xuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlcilcbiAgICAgICAgdmFsdWUgPSBzdHIuZGF0YVxuICAgICAgICBvZmZzZXQgKz0gc3RyLmJvZHlTaXplXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIE9CSkVDVDoge1xuICAgICAgICB2YWx1ZSA9IHt9XG4gICAgICAgIGxldCBvYmpFbmRTaXplID0gMFxuICAgICAgICBpZiAoZGF0YVZpZXcuZ2V0VWludDMyKHNpemUgLSA0LCAhaXNMZSkgJiAweDAwRkZGRkZGKSB7XG4gICAgICAgICAgb2JqRW5kU2l6ZSA9IDNcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLnJlYWRPZmZzZXQgKz0gb2Zmc2V0IC0gMTtcbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IHNpemUgLSA0KSB7XG4gICAgICAgICAgY29uc3QgYW1mT2JqID0gdGhpcy5wYXJzZU9iamVjdChidWZmZXIsIHNpemUgLSBvZmZzZXQgLSBvYmpFbmRTaXplKVxuICAgICAgICAgIGlmIChhbWZPYmouaXNPYmplY3RFbmQpIHsgYnJlYWsgfVxuICAgICAgICAgIHZhbHVlW2FtZk9iai5kYXRhLm5hbWVdID0gYW1mT2JqLmRhdGEudmFsdWVcbiAgICAgICAgICBvZmZzZXQgKz0gYW1mT2JqLmJvZHlTaXplXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA8PSBzaXplIC0gMykge1xuICAgICAgICAgIGNvbnN0IG1hcmsgPSBkYXRhVmlldy5nZXRVaW50MzIob2Zmc2V0IC0gMSwgIWlzTGUpICYgMHgwMEZGRkZGRlxuICAgICAgICAgIGlmIChtYXJrID09PSA5KSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gM1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgTUlYX0FSUkFZOiB7XG4gICAgICAgIHZhbHVlID0ge31cbiAgICAgICAgb2Zmc2V0ICs9IDRcbiAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDRcbiAgICAgICAgbGV0IG9iakVuZFNpemUgPSAwXG4gICAgICAgIGlmICgoZGF0YVZpZXcuZ2V0VWludDMyKHNpemUgLSA0LCAhaXNMZSkgJiAweDAwRkZGRkZGKSA9PT0gOSkge1xuICAgICAgICAgIG9iakVuZFNpemUgPSAzXG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgc2l6ZSAtIDgpIHtcbiAgICAgICAgICBjb25zdCBhbWZWYXIgPSB0aGlzLnBhcnNlT2JqZWN0KGJ1ZmZlciwgc2l6ZSAtIG9mZnNldCAtIG9iakVuZFNpemUpXG4gICAgICAgICAgaWYgKGFtZlZhci5pc09iamVjdEVuZCkgeyBicmVhayB9XG4gICAgICAgICAgdmFsdWVbYW1mVmFyLmRhdGEubmFtZV0gPSBhbWZWYXIuZGF0YS52YWx1ZVxuICAgICAgICAgIG9mZnNldCArPSBhbWZWYXIuYm9keVNpemVcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0IDw9IHNpemUgLSAzKSB7XG4gICAgICAgICAgY29uc3QgbWFya2VyID0gZGF0YVZpZXcuZ2V0VWludDMyKG9mZnNldCAtIDEsICFpc0xlKSAmIDB4MDBGRkZGRkZcbiAgICAgICAgICBpZiAobWFya2VyID09PSA5KSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gM1xuICAgICAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBPQkpFQ1RfRU5EOiB7XG4gICAgICAgIHZhbHVlID0gbnVsbFxuICAgICAgICBpc09iakVuZCA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBTVFJJQ1RfQVJSQVk6IHtcbiAgICAgICAgdmFsdWUgPSBbXVxuICAgICAgICBjb25zdCBhcnJMZW5ndGggPSBkYXRhVmlldy5nZXRVaW50MzIoMSwgIWlzTGUpXG4gICAgICAgIG9mZnNldCArPSA0XG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSA0XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzY3JpcHQgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBzaXplIC0gb2Zmc2V0KVxuICAgICAgICAgIHZhbHVlLnB1c2goc2NyaXB0LmRhdGEpXG4gICAgICAgICAgb2Zmc2V0ICs9IHNjcmlwdC5ib2R5U2l6ZVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgREFURToge1xuICAgICAgICBjb25zdCBkYXRlID0gdGhpcy5wYXJzZURhdGUoYnVmZmVyLCBzaXplIC0gMSlcbiAgICAgICAgdmFsdWUgPSBkYXRlLmRhdGFcbiAgICAgICAgb2Zmc2V0ICs9IGRhdGUuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBMT05FX1NUUklORzoge1xuICAgICAgICBjb25zdCBsb25nU3RyID0gdGhpcy5wYXJzZUxvbmdTdHJpbmcoYnVmZmVyLCBzaXplIC0gMSlcbiAgICAgICAgdmFsdWUgPSBsb25nU3RyLmRhdGFcbiAgICAgICAgb2Zmc2V0ICs9IGxvbmdTdHIuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBvZmZzZXQgPSBzaXplXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHZhbHVlLFxuICAgICAgYm9keVNpemU6IG9mZnNldCxcbiAgICAgIGlzT2JqRW5kOiBpc09iakVuZFxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRVZFTlRTLCBBdWRpb1RyYWNrTWV0YSwgVmlkZW9UcmFja01ldGEgfSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5pbXBvcnQgeyBTcHNQYXJzZXIgfSBmcm9tICd4Z3BsYXllci1jb2RlYyc7XG5pbXBvcnQgeyBWaWRlb1RyYWNrLCBBdWRpb1RyYWNrIH0gZnJvbSAneGdwbGF5ZXItYnVmZmVyJ1xuXG5pbXBvcnQgQU1GUGFyc2VyIGZyb20gJy4vYW1mLXBhcnNlcidcblxuY29uc3QgREVNVVhfRVZFTlRTID0gRVZFTlRTLkRFTVVYX0VWRU5UUztcblxuY2xhc3MgRmx2RGVtdXhlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkID0gZmFsc2VcbiAgICB0aGlzLl90cmFja051bSA9IDBcbiAgICB0aGlzLl9oYXNTY3JpcHQgPSBmYWxzZVxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuREVNVVhfU1RBUlQsIHRoaXMuZG9QYXJzZUZsdi5iaW5kKHRoaXMpKVxuICB9XG5cbiAgLyoqXG4gICAqIGlmIHRoZSBmbHYgaGVhZCBpcyB2YWxpZFxuICAgKiBAcGFyYW0gZGF0YVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0ZsdkZpbGUgKGRhdGEpIHtcbiAgICByZXR1cm4gIShkYXRhWzBdICE9PSAweDQ2IHx8IGRhdGFbMV0gIT09IDB4NEMgfHwgZGF0YVsyXSAhPT0gMHg1NiB8fCBkYXRhWzNdICE9PSAweDAxKVxuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoZSBzdHJlYW0gaGFzIGF1ZGlvIG9yIHZpZGVvLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RyZWFtRmxhZyAtIERhdGEgZnJvbSB0aGUgc3RyZWFtIHdoaWNoIGlzIGRlZmluZSB3aGV0aGVyIHRoZSBhdWRpbyAvIHZpZGVvIHRyYWNrIGlzIGV4aXN0LlxuICAgKi9cbiAgc3RhdGljIGdldFBsYXlUeXBlIChzdHJlYW1GbGFnKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgaGFzVmlkZW86IGZhbHNlLFxuICAgICAgaGFzQXVkaW86IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHN0cmVhbUZsYWcgJiAweDAxID4gMCkge1xuICAgICAgcmVzdWx0Lmhhc1ZpZGVvID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChzdHJlYW1GbGFnICYgMHgwNCA+IDApIHtcbiAgICAgIHJlc3VsdC5oYXNBdWRpbyA9IHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBkb1BhcnNlRmx2ICgpIHtcbiAgICBpZiAoIXRoaXMuX2ZpcnN0RnJhZ21lbnRMb2FkZWQpIHtcbiAgICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPCAxMykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IGhlYWRlciA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEzKVxuICAgICAgdGhpcy5wYXJzZUZsdkhlYWRlcihoZWFkZXIpXG4gICAgICB0aGlzLmRvUGFyc2VGbHYoKSAvLyDpgJLlvZLosIPnlKjvvIznu6fnu63op6PmnpBmbHbmtYFcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA8IDExKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbGV0IGNodW5rO1xuXG4gICAgICBsZXQgbG9vcE1heCA9IDEwMDAwIC8vIOmYsuatouatu+W+queOr+S6p+eUn1xuICAgICAgZG8ge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnbWFyazQnKVxuICAgICAgICBjaHVuayA9IHRoaXMuX3BhcnNlRmx2VGFnKClcbiAgICAgIH0gd2hpbGUgKGNodW5rICYmIGxvb3BNYXgtLSA+IDApXG5cbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgfVxuICB9XG5cbiAgcGFyc2VGbHZIZWFkZXIgKGhlYWRlcikge1xuICAgIGlmICghRmx2RGVtdXhlci5pc0ZsdkZpbGUoaGVhZGVyKSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKCdpbnZhbGlkIGZsdiBmaWxlJykpXG4gICAgICB0aGlzLmRvUGFyc2VGbHYoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkID0gdHJ1ZVxuICAgICAgY29uc3QgcGxheVR5cGUgPSBGbHZEZW11eGVyLmdldFBsYXlUeXBlKGhlYWRlcls0XSlcblxuICAgICAgaWYgKHBsYXlUeXBlLmhhc1ZpZGVvKSB7XG4gICAgICAgIHRoaXMuaW5pdFZpZGVvVHJhY2soKVxuICAgICAgfVxuXG4gICAgICBpZiAocGxheVR5cGUuaGFzQXVkaW8pIHtcbiAgICAgICAgdGhpcy5pbml0QXVkaW9UcmFjaygpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZG9QYXJzZUZsdigpXG4gIH1cblxuICAvKipcbiAgICogaW5pdCBkZWZhdWx0IHZpZGVvIHRyYWNrIGNvbmZpZ3NcbiAgICovXG4gIGluaXRWaWRlb1RyYWNrICgpIHtcbiAgICB0aGlzLl90cmFja051bSsrXG4gICAgbGV0IHZpZGVvVHJhY2sgPSBuZXcgVmlkZW9UcmFjaygpXG4gICAgdmlkZW9UcmFjay5tZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKClcbiAgICB2aWRlb1RyYWNrLmlkID0gdmlkZW9UcmFjay5tZXRhLmlkID0gdGhpcy5fdHJhY2tOdW1cblxuICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2sgPSB2aWRlb1RyYWNrXG4gIH1cblxuICAvKipcbiAgICogaW5pdCBkZWZhdWx0IGF1ZGlvIHRyYWNrIGNvbmZpZ3NcbiAgICovXG4gIGluaXRBdWRpb1RyYWNrICgpIHtcbiAgICB0aGlzLl90cmFja051bSsrXG4gICAgbGV0IGF1ZGlvVHJhY2sgPSBuZXcgQXVkaW9UcmFjaygpXG4gICAgYXVkaW9UcmFjay5tZXRhID0gbmV3IEF1ZGlvVHJhY2tNZXRhKClcbiAgICBhdWRpb1RyYWNrLmlkID0gYXVkaW9UcmFjay5tZXRhLmlkID0gdGhpcy5fdHJhY2tOdW1cblxuICAgIHRoaXMudHJhY2tzLmF1ZGlvVHJhY2sgPSBhdWRpb1RyYWNrXG4gIH1cblxuICAvKipcbiAgICogUGFja2FnZSB0aGUgZGF0YSBhcyB0aGUgZm9sbG93aW5nIGRhdGEgc3RydWN0dXJlXG4gICAqIHtcbiAgICogICAgZGF0YTogVWludDhBcnJheS4gdGhlIFN0cmVhbSBkYXRhLlxuICAgKiAgICBpbmZvOiBUaGUgZmlyc3QgYnl0ZSBpbmZvIG9mIHRoZSBUYWcuXG4gICAqICAgIHRhZ1R5cGU6IDjjgIE544CBMThcbiAgICogICAgdGltZVN0YW1wOiB0aGUgdGltZXN0ZW1wXG4gICAqIH1cbiAgICovXG4gIF9wYXJzZUZsdlRhZyAoKSB7XG4gICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA8IDExKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBsZXQgY2h1bmsgPSB0aGlzLl9wYXJzZUZsdlRhZ0hlYWRlcigpXG4gICAgaWYgKGNodW5rKSB7XG4gICAgICB0aGlzLl9wcm9jZXNzQ2h1bmsoY2h1bmspXG4gICAgfVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSAxMSBieXRlIHRhZyBIZWFkZXJcbiAgICovXG4gIF9wYXJzZUZsdlRhZ0hlYWRlciAoKSB7XG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICBsZXQgY2h1bmsgPSB7fVxuXG4gICAgbGV0IHRhZ1R5cGUgPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludChvZmZzZXQsIDEpXG4gICAgb2Zmc2V0ICs9IDFcblxuICAgIC8vIDIgYml0IEZNUyByZXNlcnZlZCwgMSBiaXQgZmlsdGVyZWQsIDUgYml0IHRhZyB0eXBlXG4gICAgY2h1bmsuZmlsdGVyZWQgPSAodGFnVHlwZSAmIDMyKSA+Pj4gNVxuICAgIGNodW5rLnRhZ1R5cGUgPSB0YWdUeXBlICYgMzFcblxuICAgIC8vIDMgQnl0ZSBkYXRhc2l6ZVxuICAgIGNodW5rLmRhdGFzaXplID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQob2Zmc2V0LCAzKVxuICAgIG9mZnNldCArPSAzXG5cbiAgICBpZiAoKGNodW5rLnRhZ1R5cGUgIT09IDggJiYgY2h1bmsudGFnVHlwZSAhPT0gOSAmJiBjaHVuay50YWdUeXBlICE9PSAxMSAmJiBjaHVuay50YWdUeXBlICE9PSAxOCkgfHxcbiAgICAgIHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDgsIDMpICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIgJiYgdGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVxuICAgICAgfVxuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgdGhpcy5UQUcsIG5ldyBFcnJvcigndGFnVHlwZSAnICsgY2h1bmsudGFnVHlwZSksIGZhbHNlKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoIDwgY2h1bmsuZGF0YXNpemUgKyAxNSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICAvLyByZWFkIHRoZSBkYXRhLlxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpXG5cbiAgICAvLyAzIEJ5dGUgdGltZXN0YW1wXG4gICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDAsIDMpXG4gICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMylcblxuICAgIC8vIDEgQnl0ZSB0aW1lc3RhbXBFeHRcbiAgICBsZXQgdGltZXN0YW1wRXh0ID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBpZiAodGltZXN0YW1wRXh0ID4gMCkge1xuICAgICAgdGltZXN0YW1wICs9IHRpbWVzdGFtcEV4dCAqIDB4MTAwMDAwMFxuICAgIH1cblxuICAgIGNodW5rLmR0cyA9IHRpbWVzdGFtcFxuXG4gICAgLy8gc3RyZWFtSWRcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgX3Byb2Nlc3NDaHVuayAoY2h1bmspIHtcbiAgICBzd2l0Y2ggKGNodW5rLnRhZ1R5cGUpIHtcbiAgICAgIGNhc2UgMTg6XG4gICAgICAgIHRoaXMuX3BhcnNlU2NyaXB0RGF0YShjaHVuaylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgODpcbiAgICAgICAgdGhpcy5fcGFyc2VBQUNEYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSA5OlxuICAgICAgICB0aGlzLl9wYXJzZUhldmNEYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAxMTpcbiAgICAgICAgLy8gZm9yIHNvbWUgQ0ROIHRoYXQgZGlkIG5vdCBwcm9jZXNzIHRoZSBjdXJyZWN0IFJUTVAgbWVzc2FnZXNcbiAgICAgICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMylcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHBhcnNlIGZsdiBzY3JpcHQgZGF0YVxuICAgKiBAcGFyYW0gY2h1bmtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZVNjcmlwdERhdGEgKGNodW5rKSB7XG4gICAgbGV0IGF1ZGlvVHJhY2sgPSB0aGlzLnRyYWNrcy5hdWRpb1RyYWNrXG4gICAgbGV0IHZpZGVvVHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG5cbiAgICBsZXQgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplKVxuXG4gICAgY29uc3QgaW5mbyA9IG5ldyBBTUZQYXJzZXIoKS5yZXNvbHZlKGRhdGEsIGRhdGEubGVuZ3RoKVxuXG4gICAgY29uc3Qgb25NZXRhRGF0YSA9IHRoaXMuX2NvbnRleHQub25NZXRhRGF0YSA9IGluZm8gPyBpbmZvLm9uTWV0YURhdGEgOiB1bmRlZmluZWRcblxuICAgIC8vIGZpbGwgbWVkaWFJbmZvXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gPSBvbk1ldGFEYXRhLmR1cmF0aW9uXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaGFzVmlkZW8gPSBvbk1ldGFEYXRhLmhhc1ZpZGVvXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaHNhQXVkaW8gPSBvbk1ldGFEYXRhLmhhc0F1ZGlvXG5cbiAgICBsZXQgdmFsaWRhdGUgPSB0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSlcbiAgICBpZiAodmFsaWRhdGUpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVESUFfSU5GTylcbiAgICAgIHRoaXMuX2hhc1NjcmlwdCA9IHRydWVcbiAgICB9XG5cbiAgICAvLyBFZGl0IGRlZmF1bHQgbWV0YS5cbiAgICBpZiAoYXVkaW9UcmFjayAmJiAhYXVkaW9UcmFjay5oYXNTcGVjaWZpY0NvbmZpZykge1xuICAgICAgbGV0IG1ldGEgPSBhdWRpb1RyYWNrLm1ldGFcbiAgICAgIGlmIChvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZSkge1xuICAgICAgICBtZXRhLnNhbXBsZVJhdGUgPSBvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZVxuICAgICAgfVxuXG4gICAgICBpZiAob25NZXRhRGF0YS5hdWRpb2NoYW5uZWxzKSB7XG4gICAgICAgIG1ldGEuY2hhbm5lbENvdW50ID0gb25NZXRhRGF0YS5hdWRpb2NoYW5uZWxzXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAob25NZXRhRGF0YS5hdWRpb3NhbXBsZXJhdGUpIHtcbiAgICAgICAgY2FzZSA0NDEwMDpcbiAgICAgICAgICBtZXRhLnNhbXBsZVJhdGVJbmRleCA9IDRcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDIyMDUwOlxuICAgICAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gN1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTEwMjU6XG4gICAgICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSAxMFxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2aWRlb1RyYWNrICYmICF2aWRlb1RyYWNrLmhhc1NwZWNpZmljQ29uZmlnKSB7XG4gICAgICBsZXQgbWV0YSA9IHZpZGVvVHJhY2subWV0YVxuICAgICAgaWYgKHR5cGVvZiBvbk1ldGFEYXRhLmZyYW1lcmF0ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbGV0IGZwc051bSA9IE1hdGguZmxvb3Iob25NZXRhRGF0YS5mcmFtZXJhdGUgKiAxMDAwKVxuICAgICAgICBpZiAoZnBzTnVtID4gMCkge1xuICAgICAgICAgIGxldCBmcHMgPSBmcHNOdW0gLyAxMDAwXG4gICAgICAgICAgaWYgKCFtZXRhLmZyYW1lUmF0ZSkge1xuICAgICAgICAgICAgbWV0YS5mcmFtZVJhdGUgPSB7fVxuICAgICAgICAgIH1cbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5maXhlZCA9IHRydWVcbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHMgPSBmcHNcbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHNfbnVtID0gZnBzTnVtXG4gICAgICAgICAgbWV0YS5mcmFtZVJhdGUuZnBzX2RlbiA9IDEwMDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlciAoZGF0YSkge1xuICAgIGxldCByZXQgPSB7fVxuICAgIHJldC5oYXNTcGVjaWZpY0NvbmZpZyA9IHRydWVcbiAgICByZXQub2JqZWN0VHlwZSA9IGRhdGFbMV0gPj4+IDNcbiAgICByZXQuc2FtcGxlUmF0ZUluZGV4ID0gKChkYXRhWzFdICYgNykgPDwgMSkgfCAoZGF0YVsyXSA+Pj4gNylcbiAgICByZXQuYXVkaW9zYW1wbGVyYXRlID0gdGhpcy5fc3dpdGNoQXVkaW9TYW1wbGVSYXRlKHJldC5zYW1wbGVSYXRlSW5kZXgpXG4gICAgcmV0LmNoYW5uZWxDb3VudCA9IChkYXRhWzJdICYgMTIwKSA+Pj4gM1xuICAgIHJldC5mcmFtZUxlbmd0aCA9IChkYXRhWzJdICYgNCkgPj4+IDJcbiAgICByZXQuZGVwZW5kc09uQ29yZUNvZGVyID0gKGRhdGFbMl0gJiAyKSA+Pj4gMVxuICAgIHJldC5leHRlbnNpb25GbGFnSW5kZXggPSBkYXRhWzJdICYgMVxuXG4gICAgcmV0LmNvZGVjID0gYG1wNGEuNDAuJHtyZXQub2JqZWN0VHlwZX1gXG4gICAgbGV0IHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGV4dGVuc2lvblNhbXBsaW5nSW5kZXg7XG5cbiAgICBsZXQgY29uZmlnO1xuICAgIGxldCBzYW1wbGluZ0luZGV4ID0gcmV0LnNhbXBsZVJhdGVJbmRleDtcblxuICAgIGlmICh1c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpICE9PSAtMSkge1xuICAgICAgLy8gZmlyZWZveDogdXNlIFNCUiAoSEUtQUFDKSBpZiBmcmVxIGxlc3MgdGhhbiAyNGtIelxuICAgICAgaWYgKHJldC5zYW1wbGVSYXRlSW5kZXggPj0gNikge1xuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDU7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSg0KTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIHsgLy8gdXNlIExDLUFBQ1xuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDI7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh1c2VyQWdlbnQuaW5kZXhPZignYW5kcm9pZCcpICE9PSAtMSkge1xuICAgICAgLy8gYW5kcm9pZDogYWx3YXlzIHVzZSBMQy1BQUNcbiAgICAgIHJldC5vYmplY3RUeXBlID0gMjtcbiAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSBzYW1wbGluZ0luZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3Igb3RoZXIgYnJvd3NlcnMsIGUuZy4gY2hyb21lLi4uXG4gICAgICAvLyBBbHdheXMgdXNlIEhFLUFBQyB0byBtYWtlIGl0IGVhc2llciB0byBzd2l0Y2ggYWFjIGNvZGVjIHByb2ZpbGVcbiAgICAgIHJldC5vYmplY3RUeXBlID0gNTtcbiAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4O1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuXG4gICAgICBpZiAocmV0LnNhbXBsZVJhdGVJbmRleCA+PSA2KSB7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4IC0gMztcbiAgICAgIH0gZWxzZSBpZiAocmV0LmNoYW5uZWxDb3VudCA9PT0gMSkgeyAvLyBNb25vIGNoYW5uZWxcbiAgICAgICAgcmV0Lm9iamVjdFR5cGUgPSAyO1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbmZpZ1swXSA9IHJldC5vYmplY3RUeXBlIDw8IDM7XG4gICAgY29uZmlnWzBdIHw9IChyZXQuc2FtcGxlUmF0ZUluZGV4ICYgMHgwRikgPj4+IDE7XG4gICAgY29uZmlnWzFdID0gKHJldC5zYW1wbGVSYXRlSW5kZXggJiAweDBGKSA8PCA3O1xuICAgIGNvbmZpZ1sxXSB8PSAocmV0LmNoYW5uZWxDb3VudCAmIDB4MEYpIDw8IDM7XG4gICAgaWYgKHJldC5vYmplY3RUeXBlID09PSA1KSB7XG4gICAgICBjb25maWdbMV0gfD0gKChleHRlbnNpb25TYW1wbGluZ0luZGV4ICYgMHgwRikgPj4+IDEpO1xuICAgICAgY29uZmlnWzJdID0gKGV4dGVuc2lvblNhbXBsaW5nSW5kZXggJiAweDAxKSA8PCA3O1xuICAgICAgLy8gZXh0ZW5kZWQgYXVkaW8gb2JqZWN0IHR5cGU6IGZvcmNlIHRvIDIgKExDLUFBQylcbiAgICAgIGNvbmZpZ1syXSB8PSAoMiA8PCAyKTtcbiAgICAgIGNvbmZpZ1szXSA9IDA7XG4gICAgfVxuICAgIHJldC5jb25maWcgPSBjb25maWdcbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICBfcGFyc2VBQUNEYXRhIChjaHVuaykge1xuICAgIGxldCB0cmFjayA9IHRoaXMudHJhY2tzLmF1ZGlvVHJhY2tcbiAgICBpZiAoIXRyYWNrKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgbWV0YSA9IHRyYWNrLm1ldGFcblxuICAgIGlmICghbWV0YSkge1xuICAgICAgdHJhY2subWV0YSA9IG5ldyBBdWRpb1RyYWNrTWV0YSgpXG4gICAgICBtZXRhID0gdHJhY2subWV0YTtcbiAgICB9XG5cbiAgICBsZXQgaW5mbyA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdXG5cbiAgICBjaHVuay5kYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSAxKVxuXG4gICAgbGV0IGZvcm1hdCA9IChpbmZvICYgMjQwKSA+Pj4gNFxuXG4gICAgdHJhY2suZm9ybWF0ID0gZm9ybWF0XG5cbiAgICBpZiAoZm9ybWF0ICE9PSAxMCkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKGBpbnZhbGlkIGF1ZGlvIGZvcm1hdDogJHtmb3JtYXR9YCkpXG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdCA9PT0gMTAgJiYgIXRoaXMuX2hhc0F1ZGlvU2VxdWVuY2UpIHtcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IHRoaXMuX3N3aXRjaEF1ZGlvU2FtcGxpbmdGcmVxdWVuY3koaW5mbylcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gKGluZm8gJiAxMikgPj4+IDJcbiAgICAgIG1ldGEuZnJhbWVMZW50aCA9IChpbmZvICYgMikgPj4+IDFcbiAgICAgIG1ldGEuY2hhbm5lbENvdW50ID0gaW5mbyAmIDFcbiAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKDEwMjQgLyBtZXRhLmF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKVxuICAgIH1cblxuICAgIGxldCBhdWRpb1NhbXBsZVJhdGUgPSBtZXRhLmF1ZGlvU2FtcGxlUmF0ZVxuICAgIGxldCBhdWRpb1NhbXBsZVJhdGVJbmRleCA9IG1ldGEuc2FtcGxlUmF0ZUluZGV4XG4gICAgbGV0IHJlZlNhbXBsZUR1cmF0aW9uID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgZGVsZXRlIGNodW5rLnRhZ1R5cGVcbiAgICBsZXQgdmFsaWRhdGUgPSB0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSlcblxuICAgIGlmIChjaHVuay5kYXRhWzBdID09PSAwKSB7IC8vIEFBQyBTZXF1ZW5jZSBIZWFkZXJcbiAgICAgIGxldCBhYWNIZWFkZXIgPSB0aGlzLl9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlcihjaHVuay5kYXRhKVxuICAgICAgYXVkaW9TYW1wbGVSYXRlID0gYWFjSGVhZGVyLmF1ZGlvc2FtcGxlcmF0ZSB8fCBtZXRhLmF1ZGlvU2FtcGxlUmF0ZVxuICAgICAgYXVkaW9TYW1wbGVSYXRlSW5kZXggPSBhYWNIZWFkZXIuc2FtcGxlUmF0ZUluZGV4IHx8IG1ldGEuc2FtcGxlUmF0ZUluZGV4XG4gICAgICByZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IoMTAyNCAvIGF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKVxuXG4gICAgICBtZXRhLmNoYW5uZWxDb3VudCA9IGFhY0hlYWRlci5jaGFubmVsQ291bnRcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IGF1ZGlvU2FtcGxlUmF0ZVxuICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSBhdWRpb1NhbXBsZVJhdGVJbmRleFxuICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IHJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICBtZXRhLmR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gKiBtZXRhLnRpbWVzY2FsZVxuICAgICAgbWV0YS5jb25maWcgPSBhYWNIZWFkZXIuY29uZmlnXG5cbiAgICAgIGNvbnN0IGF1ZGlvTWVkaWEgPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5hdWRpb1xuXG4gICAgICAvLyBmaWxsIGF1ZGlvIG1lZGlhIGluZm9cbiAgICAgIGF1ZGlvTWVkaWEuY29kZWMgPSBhYWNIZWFkZXIuY29kZWNcbiAgICAgIGF1ZGlvTWVkaWEuY2hhbm5lbENvdW50ID0gYWFjSGVhZGVyLmNoYW5uZWxDb3VudFxuICAgICAgYXVkaW9NZWRpYS5zYW1wbGVSYXRlID0gYXVkaW9TYW1wbGVSYXRlXG4gICAgICBhdWRpb01lZGlhLnNhbXBsZVJhdGVJbmRleCA9IGFhY0hlYWRlci5hdWRpb1NhbXBsZVJhdGVJbmRleFxuXG4gICAgICBpZiAodGhpcy5faGFzU2NyaXB0ICYmICF0aGlzLl9oYXNBdWRpb1NlcXVlbmNlKSB7XG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAnYXVkaW8nKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9oYXNTY3JpcHQgJiYgdGhpcy5faGFzQXVkaW9TZXF1ZW5jZSkge1xuICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkFVRElPX01FVEFEQVRBX0NIQU5HRSlcbiAgICAgICAgLy8gdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICdhdWRpbycpXG4gICAgICB9XG4gICAgICB0aGlzLl9oYXNBdWRpb1NlcXVlbmNlID0gdHJ1ZVxuXG4gICAgICB0aGlzLl9tZXRhQ2hhbmdlID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5fbWV0YUNoYW5nZSkge1xuICAgICAgICBjaHVuay5vcHRpb25zID0ge1xuICAgICAgICAgIG1ldGE6IHRyYWNrLm1ldGFcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fbWV0YUNoYW5nZSA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGNodW5rLmRhdGEgPSBjaHVuay5kYXRhLnNsaWNlKDEsIGNodW5rLmRhdGEubGVuZ3RoKVxuICAgICAgdHJhY2suc2FtcGxlcy5wdXNoKGNodW5rKVxuICAgIH1cbiAgICBpZiAoIXZhbGlkYXRlKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKCdUQUcgbGVuZ3RoIGVycm9yIGF0ICcgKyBjaHVuay5kYXRhc2l6ZSksIGZhbHNlKVxuICAgICAgLy8gdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgZXJyb3IubWVzc2FnZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgaGV2Yy9hdmMgdmlkZW8gZGF0YVxuICAgKiBAcGFyYW0gY2h1bmtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZUhldmNEYXRhIChjaHVuaykge1xuICAgIC8vIGhlYWRlclxuICAgIGxldCBpbmZvID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBjaHVuay5mcmFtZVR5cGUgPSAoaW5mbyAmIDB4ZjApID4+PiA0XG4gICAgY2h1bmsuaXNLZXlmcmFtZSA9IGNodW5rLmZyYW1lVHlwZSA9PT0gMVxuICAgIC8vIGxldCB0ZW1wQ29kZWNJRCA9IHRoaXMudHJhY2tzLnZpZGVvVHJhY2suY29kZWNJRFxuICAgIGxldCBjb2RlY0lEID0gaW5mbyAmIDB4MGZcbiAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLmNvZGVjSUQgPSBjb2RlY0lEXG5cbiAgICAvLyBoZXZj5ZKMYXZj55qEaGVhZGVy6Kej5p6Q5pa55byP5LiA5qC3XG4gICAgY2h1bmsuYXZjUGFja2V0VHlwZSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdXG4gICAgY2h1bmsuY3RzID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwgMylcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuXG4gICAgLy8gMTIgZm9yIGhldmMsIDcgZm9yIGF2Y1xuICAgIGlmIChjb2RlY0lEID09PSAxMikge1xuICAgICAgY29uc3QgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gNSlcbiAgICAgIGNodW5rLmRhdGEgPSBkYXRhXG5cbiAgICAgIGlmIChOdW1iZXIucGFyc2VJbnQoY2h1bmsuYXZjUGFja2V0VHlwZSkgIT09IDApIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKSwgZmFsc2UpXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5hbHUgPSB7fVxuICAgICAgICBsZXQgciA9IDBcbiAgICAgICAgbmFsdS5jdHMgPSBjaHVuay5jdHNcbiAgICAgICAgbmFsdS5kdHMgPSBjaHVuay5kdHNcbiAgICAgICAgd2hpbGUgKGNodW5rLmRhdGEubGVuZ3RoID4gcikge1xuICAgICAgICAgIGxldCBzaXplcyA9IGNodW5rLmRhdGEuc2xpY2UoTnVtYmVyLnBhcnNlSW50KHIpLCA0ICsgcilcbiAgICAgICAgICBuYWx1LnNpemUgPSBzaXplc1szXVxuICAgICAgICAgIG5hbHUuc2l6ZSArPSBzaXplc1syXSAqIDI1NlxuICAgICAgICAgIG5hbHUuc2l6ZSArPSBzaXplc1sxXSAqIDI1NiAqIDI1NlxuICAgICAgICAgIG5hbHUuc2l6ZSArPSBzaXplc1swXSAqIDI1NiAqIDI1NiAqIDI1NlxuICAgICAgICAgIHIgKz0gNFxuICAgICAgICAgIG5hbHUuZGF0YSA9IGNodW5rLmRhdGEuc2xpY2UoTnVtYmVyLnBhcnNlSW50KHIpLCBuYWx1LnNpemUgKyByKVxuICAgICAgICAgIHIgKz0gbmFsdS5zaXplXG4gICAgICAgICAgdGhpcy50cmFja3MudmlkZW9UcmFjay5zYW1wbGVzLnB1c2gobmFsdSlcbiAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ3ZpZGVvJylcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChOdW1iZXIucGFyc2VJbnQoY2h1bmsuYXZjUGFja2V0VHlwZSkgPT09IDApIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKSwgZmFsc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvZGVjSUQgPT09IDcpIHtcbiAgICAgIGxldCBkYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSA1KVxuICAgICAgaWYgKGRhdGFbNF0gPT09IDAgJiYgZGF0YVs1XSA9PT0gMCAmJiBkYXRhWzZdID09PSAwICYmIGRhdGFbN10gPT09IDEpIHtcbiAgICAgICAgbGV0IGF2Y2NsZW5ndGggPSAwXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgYXZjY2xlbmd0aCA9IGF2Y2NsZW5ndGggKiAyNTYgKyBkYXRhW2ldXG4gICAgICAgIH1cbiAgICAgICAgYXZjY2xlbmd0aCAtPSA0XG4gICAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKDQsIGRhdGEubGVuZ3RoKVxuICAgICAgICBkYXRhWzNdID0gYXZjY2xlbmd0aCAlIDI1NlxuICAgICAgICBhdmNjbGVuZ3RoID0gKGF2Y2NsZW5ndGggLSBkYXRhWzNdKSAvIDI1NlxuICAgICAgICBkYXRhWzJdID0gYXZjY2xlbmd0aCAlIDI1NlxuICAgICAgICBhdmNjbGVuZ3RoID0gKGF2Y2NsZW5ndGggLSBkYXRhWzJdKSAvIDI1NlxuICAgICAgICBkYXRhWzFdID0gYXZjY2xlbmd0aCAlIDI1NlxuICAgICAgICBkYXRhWzBdID0gKGF2Y2NsZW5ndGggLSBkYXRhWzFdKSAvIDI1NlxuICAgICAgfVxuXG4gICAgICBjaHVuay5kYXRhID0gZGF0YVxuICAgICAgLy8gSWYgaXQgaXMgQVZDIHNlcXVlY2UgSGVhZGVyLlxuICAgICAgaWYgKGNodW5rLmF2Y1BhY2tldFR5cGUgPT09IDApIHtcbiAgICAgICAgdGhpcy5fYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIoY2h1bmsuZGF0YSlcbiAgICAgICAgbGV0IHZhbGlkYXRlID0gdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoY2h1bmsuZGF0YXNpemUpXG4gICAgICAgIGlmICh2YWxpZGF0ZSkge1xuICAgICAgICAgIGlmICh0aGlzLl9oYXNTY3JpcHQgJiYgIXRoaXMuX2hhc1ZpZGVvU2VxdWVuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5faGFzU2NyaXB0ICYmIHRoaXMuX2hhc1ZpZGVvU2VxdWVuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuVklERU9fTUVUQURBVEFfQ0hBTkdFKVxuICAgICAgICAgICAgLy8gdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX2hhc1ZpZGVvU2VxdWVuY2UgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWV0YUNoYW5nZSA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoY2h1bmsuZGF0YXNpemUpKSB7XG4gICAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgdGhpcy5UQUcsIG5ldyBFcnJvcihgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7Y2h1bmsuZGF0YXNpemV9YCksIGZhbHNlKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbWV0YUNoYW5nZSkge1xuICAgICAgICAgIGNodW5rLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtZXRhOiBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLm1ldGEpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX21ldGFDaGFuZ2UgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2suc2FtcGxlcy5wdXNoKGNodW5rKVxuICAgICAgICAvLyB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKGB2aWRlbyBjb2RlaWQgaXMgJHtjb2RlY0lEfWApLCBmYWxzZSlcbiAgICAgIGNodW5rLmRhdGEgPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdChjaHVuay5kYXRhc2l6ZSAtIDEpXG4gICAgICBpZiAoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKSkge1xuICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKSwgZmFsc2UpXG4gICAgICB9XG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChjaHVuaylcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgfVxuICAgIGRlbGV0ZSBjaHVuay50YWdUeXBlXG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgYXZjIG1ldGFkYXRhXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIgKGRhdGEpIHtcbiAgICBsZXQgdHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG5cbiAgICBpZiAoIXRyYWNrKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgaWYgKCF0cmFjay5tZXRhKSB7XG4gICAgICB0cmFjay5tZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKClcbiAgICB9XG4gICAgbGV0IG1ldGEgPSB0cmFjay5tZXRhXG5cbiAgICBtZXRhLmNvbmZpZ3VyYXRpb25WZXJzaW9uID0gZGF0YVswXVxuICAgIG1ldGEuYXZjUHJvZmlsZUluZGljYXRpb24gPSBkYXRhWzFdXG4gICAgbWV0YS5wcm9maWxlQ29tcGF0aWJpbGl0eSA9IGRhdGFbMl1cbiAgICBtZXRhLmF2Y0xldmVsSW5kaWNhdGlvbiA9IGRhdGFbM10gLyAxMFxuICAgIG1ldGEubmFsVW5pdExlbmd0aCA9IChkYXRhWzRdICYgMHgwMykgKyAxXG5cbiAgICBsZXQgbnVtT2ZTcHMgPSBkYXRhWzVdICYgMHgxZlxuICAgIG9mZnNldCA9IDZcbiAgICBsZXQgY29uZmlnID0ge31cblxuICAgIC8vIHBhcnNlIFNQU1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZTcHM7IGkrKykge1xuICAgICAgbGV0IHNpemUgPSBkYXRhW29mZnNldF0gKiAyNTUgKyBkYXRhW29mZnNldCArIDFdXG4gICAgICBvZmZzZXQgKz0gMlxuXG4gICAgICBsZXQgc3BzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHNwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cblxuICAgICAgLy8gY29kZWMgc3RyaW5nXG4gICAgICBsZXQgY29kZWNTdHJpbmcgPSAnYXZjMS4nXG4gICAgICBmb3IgKGxldCBqID0gMTsgaiA8IDQ7IGorKykge1xuICAgICAgICBsZXQgaCA9IHNwc1tqXS50b1N0cmluZygxNilcbiAgICAgICAgaWYgKGgubGVuZ3RoIDwgMikge1xuICAgICAgICAgIGggPSAnMCcgKyBoXG4gICAgICAgIH1cbiAgICAgICAgY29kZWNTdHJpbmcgKz0gaFxuICAgICAgfVxuXG4gICAgICBtZXRhLmNvZGVjID0gY29kZWNTdHJpbmdcblxuICAgICAgb2Zmc2V0ICs9IHNpemVcbiAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YS5zcHMgPSBzcHNcbiAgICAgIGNvbmZpZyA9IFNwc1BhcnNlci5wYXJzZVNQUyhzcHMpXG4gICAgfVxuXG4gICAgbGV0IG51bU9mUHBzID0gZGF0YVtvZmZzZXRdXG5cbiAgICBvZmZzZXQrK1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PZlBwczsgaSsrKSB7XG4gICAgICBsZXQgc2l6ZSA9IGRhdGFbb2Zmc2V0XSAqIDI1NSArIGRhdGFbb2Zmc2V0ICsgMV1cbiAgICAgIG9mZnNldCArPSAyXG4gICAgICBsZXQgcHBzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHBwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSBzaXplXG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLm1ldGEucHBzID0gcHBzXG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihtZXRhLCBTcHNQYXJzZXIudG9WaWRlb01ldGEoY29uZmlnKSlcblxuICAgIC8vIGZpbGwgdmlkZW8gbWVkaWEgaW5mb1xuICAgIGNvbnN0IHZpZGVvTWVkaWEgPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby52aWRlb1xuXG4gICAgdmlkZW9NZWRpYS5jb2RlYyA9IG1ldGEuY29kZWNcbiAgICB2aWRlb01lZGlhLnByb2ZpbGUgPSBtZXRhLnByb2ZpbGVcbiAgICB2aWRlb01lZGlhLmxldmVsID0gbWV0YS5sZXZlbFxuICAgIHZpZGVvTWVkaWEuY2hyb21hRm9ybWF0ID0gbWV0YS5jaHJvbWFGb3JtYXRcbiAgICB2aWRlb01lZGlhLmZyYW1lUmF0ZSA9IG1ldGEuZnJhbWVSYXRlXG4gICAgdmlkZW9NZWRpYS5wYXJSYXRpbyA9IG1ldGEucGFyUmF0aW9cbiAgICB2aWRlb01lZGlhLndpZHRoID0gdmlkZW9NZWRpYS53aWR0aCA9PT0gbWV0YS5wcmVzZW50V2lkdGggPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50V2lkdGhcbiAgICB2aWRlb01lZGlhLmhlaWdodCA9IHZpZGVvTWVkaWEuaGVpZ2h0ID09PSBtZXRhLnByZXNlbnRIZWlnaHQgPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50SGVpZ2h0XG5cbiAgICBtZXRhLmR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gKiBtZXRhLnRpbWVzY2FsZVxuICAgIG1ldGEuYXZjYyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKVxuICAgIG1ldGEuYXZjYy5zZXQoZGF0YSlcbiAgICB0cmFjay5tZXRhID0gbWV0YVxuICB9XG5cbiAgLyoqXG4gICAqIGNob29zZSBhdWRpbyBzYW1wbGUgcmF0ZVxuICAgKiBAcGFyYW0gc2FtcGxpbmdGcmVxdWVuY3lJbmRleFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvU2FtcGxlUmF0ZSAoc2FtcGxpbmdGcmVxdWVuY3lJbmRleCkge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3QgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gc2FtcGxpbmcgZnJlcXVlbmNlXG4gICAqIEBwYXJhbSBpbmZvXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3dpdGNoQXVkaW9TYW1wbGluZ0ZyZXF1ZW5jeSAoaW5mbykge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4ID0gKGluZm8gJiAxMikgPj4+IDJcbiAgICBsZXQgc2FtcGxpbmdGcmVxdWVuY3lMaXN0ID0gWzU1MDAsIDExMDI1LCAyMjA1MCwgNDQxMDAsIDQ4MDAwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gY2hhbm5lbCBjb3VudFxuICAgKiBAcGFyYW0gaW5mb1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvQ2hhbm5lbCAoaW5mbykge1xuICAgIGxldCBzYW1wbGVUcmFja051bUluZGV4ID0gaW5mbyAmIDFcbiAgICBsZXQgc2FtcGxlVHJhY2tOdW1MaXN0ID0gWzEsIDJdXG4gICAgcmV0dXJuIHNhbXBsZVRyYWNrTnVtTGlzdFtzYW1wbGVUcmFja051bUluZGV4XVxuICB9XG5cbiAgLyoqXG4gICAqIGNoZWNrIGRhdGFzaXplIGlzIHZhbGlkIHVzZSA0IEJ5dGUgYWZ0ZXIgY3VycmVudCB0YWdcbiAgICogQHBhcmFtIGRhdGFzaXplXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RhdGFzaXplVmFsaWRhdG9yIChkYXRhc2l6ZSkge1xuICAgIGxldCBkYXRhc2l6ZUNvbmZpcm0gPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludCgwLCA0KVxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpXG4gICAgcmV0dXJuIGRhdGFzaXplQ29uZmlybSA9PT0gZGF0YXNpemUgKyAxMVxuICB9XG5cbiAgZ2V0IGxvYWRlckJ1ZmZlciAoKSB7XG4gICAgY29uc3QgYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTE9BREVSX0JVRkZFUicpXG4gICAgaWYgKGJ1ZmZlcikge1xuICAgICAgcmV0dXJuIGJ1ZmZlclxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBuZXcgRXJyb3IoJ+aJvuS4jeWIsCBsb2FkZXJCdWZmZXIg5a6e5L6LJykpXG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gIH1cblxuICBnZXQgbG9nZ2VyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTE9HR0VSJylcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGbHZEZW11eGVyXG4iLCIvKipcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgyMTYjc2VjdGlvbi00LjNcbiAqL1xuY2xhc3MgTTNVOFBhcnNlciB7XG4gIHN0YXRpYyBwYXJzZSAodGV4dCwgYmFzZXVybCA9ICcnKSB7XG4gICAgbGV0IHJldCA9IHtcbiAgICAgIGR1cmF0aW9uOiAwXG4gICAgfTtcbiAgICBpZiAoIXRleHQgfHwgIXRleHQuc3BsaXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHJlZnMgPSB0ZXh0LnNwbGl0KC9cXHJ8XFxuLyk7XG4gICAgcmVmcyA9IHJlZnMuZmlsdGVyKChyZWYpID0+IHtcbiAgICAgIHJldHVybiByZWY7XG4gICAgfSlcbiAgICBsZXQgcmVmID0gcmVmcy5zaGlmdCgpXG4gICAgaWYgKCFyZWYubWF0Y2goJyNFWFRNM1UnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG0zdTggZmlsZTogbm90IFwiI0VYVE0zVVwiYCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmVmID0gcmVmcy5zaGlmdCgpO1xuICAgIGxldCBuZXh0RGlzY29udGludWUgPSBmYWxzZTtcbiAgICB3aGlsZSAocmVmKSB7XG4gICAgICBsZXQgcmVmbSA9IHJlZi5tYXRjaCgvIyguW0EtWnwtXSopOiguKikvKTtcbiAgICAgIGxldCByZWZkID0gcmVmLm1hdGNoKC8jKC5bQS1afC1dKikvKTtcbiAgICAgIGlmIChyZWZkICYmIHJlZm0gJiYgcmVmbS5sZW5ndGggPiAyKSB7XG4gICAgICAgIHN3aXRjaCAocmVmbVsxXSkge1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLVZFUlNJT04nOlxuICAgICAgICAgICAgcmV0LnZlcnNpb24gPSBwYXJzZUludChyZWZtWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLU1FRElBLVNFUVVFTkNFJzpcbiAgICAgICAgICAgIHJldC5zZXF1ZW5jZSA9IHBhcnNlSW50KHJlZm1bMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnRVhULVgtVEFSR0VURFVSQVRJT04nOlxuICAgICAgICAgICAgcmV0LnRhcmdldGR1cmF0aW9uID0gcGFyc2VGbG9hdChyZWZtWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVElORic6XG4gICAgICAgICAgICBNM1U4UGFyc2VyLnBhcnNlRnJhZyhyZWZtLCByZWZzLCByZXQsIGJhc2V1cmwsIG5leHREaXNjb250aW51ZSk7XG4gICAgICAgICAgICBuZXh0RGlzY29udGludWUgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLUtFWSc6XG4gICAgICAgICAgICBNM1U4UGFyc2VyLnBhcnNlRGVjcnlwdChyZWZtWzJdLHJldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gaWYgKHJlZmQgJiYgcmVmZC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHN3aXRjaCAocmVmZFsxXSkge1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLURJU0NPTlRJTlVJVFknOlxuICAgICAgICAgICAgbmV4dERpc2NvbnRpbnVlID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVmID0gcmVmcy5zaGlmdCgpXG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VGcmFnIChyZWZtLCByZWZzLCByZXQsIGJhc2V1cmwsIGRpc2NvbnRpbnVlKSB7XG4gICAgaWYgKCFyZXQuZnJhZ3MpIHtcbiAgICAgIHJldC5mcmFncyA9IFtdXG4gICAgfVxuXG4gICAgbGV0IGZyZWcgPSB7XG4gICAgICBzdGFydDogcmV0LmR1cmF0aW9uLFxuICAgICAgZHVyYXRpb246IHBhcnNlRmxvYXQocmVmbVsyXSkgKiAxMDAwXG4gICAgfVxuXG4gICAgcmV0LmR1cmF0aW9uICs9IGZyZWcuZHVyYXRpb247XG4gICAgbGV0IG5leHRsaW5lID0gcmVmcy5zaGlmdCgpO1xuICAgIGlmIChuZXh0bGluZS5tYXRjaCgvIyguKik6KC4qKS8pKSB7XG4gICAgICBuZXh0bGluZSA9IHJlZnMuc2hpZnQoKTtcbiAgICB9XG4gICAgaWYgKG5leHRsaW5lLmxlbmd0aCA+IDAgJiYgbmV4dGxpbmUuY2hhckF0KDApID09PSAnLycgJiYgYmFzZXVybC5tYXRjaCgvLipcXC9cXC8uKlxcLlxcdysvZykpIHtcbiAgICAgIGJhc2V1cmwgPSBiYXNldXJsLm1hdGNoKC8uKlxcL1xcLy4qXFwuXFx3Ky9nKVswXTtcbiAgICB9XG4gICAgaWYgKG5leHRsaW5lLm1hdGNoKC8uKjpcXC9cXC8uKi8pKSB7XG4gICAgICBmcmVnLnVybCA9IG5leHRsaW5lO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcmVnLnVybCA9IGJhc2V1cmwgKyBuZXh0bGluZTtcbiAgICB9XG4gICAgZnJlZy5kaXNjb250aW51ZSA9IGRpc2NvbnRpbnVlO1xuICAgIHJldC5mcmFncy5wdXNoKGZyZWcpO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlVVJMICh1cmwpIHtcbiAgICBsZXQgYmFzZXVybCA9ICcnO1xuICAgIGxldCB1cmxzID0gdXJsLm1hdGNoKC8oLipcXC8pLipcXC5tM3U4Lyk7XG4gICAgaWYgKHVybHMgJiYgdXJscy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHVybHNbaV0ubWF0Y2goLy4qXFwvJC9nKSAmJiB1cmxzW2ldLmxlbmd0aCA+IGJhc2V1cmwubGVuZ3RoKSB7XG4gICAgICAgICAgYmFzZXVybCA9IHVybHNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJhc2V1cmw7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VEZWNyeXB0KHJlZm0sIHJldCkge1xuICAgIHJldC5lbmNyeXB0ID0ge307XG4gICAgbGV0IHJlZnMgPSByZWZtLnNwbGl0KCcsJyk7XG4gICAgZm9yIChsZXQgaSBpbiByZWZzKSB7IFxuICAgICAgbGV0IGNtZCA9IHJlZnNbaV07XG4gICAgICBpZihjbWQubWF0Y2goL01FVEhPRD0oLiopLykpIHtcbiAgICAgICAgcmV0LmVuY3J5cHQubWV0aG9kID0gY21kLm1hdGNoKC9NRVRIT0Q9KC4qKS8pWzFdO1xuICAgICAgfVxuICAgICAgaWYoY21kLm1hdGNoKC9VUkk9XCIoLiopXCIvKSkge1xuICAgICAgICByZXQuZW5jcnlwdC51cmkgPSBjbWQubWF0Y2goL1VSST1cIiguKilcIi8pWzFdO1xuICAgICAgfVxuXG4gICAgICBpZihjbWQubWF0Y2goL0lWPTB4KC4qKS8pKSB7XG4gICAgICAgIGxldCBpdiA9IGNtZC5tYXRjaCgvSVY9MHgoLiopLylbMV07XG4gICAgICAgIGxldCBsZW5ndGggPSBNYXRoLmNlaWwoaXYubGVuZ3RoIC8gMik7XG4gICAgICAgIHJldC5lbmNyeXB0Lml2YiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICAgIGZvcihsZXQgaSA9IGxlbmd0aCAtIDE7IGkgPj0wOyBpLS0pIHtcbiAgICAgICAgICBsZXQgaW0gPSBwYXJzZUludChpdi5zdWJzdHIoaSAqIDIsIDIpLCAxNik7XG4gICAgICAgICAgcmV0LmVuY3J5cHQuaXZiW2ldID0gaW07XG4gICAgICAgIH0gXG4gICAgICAgIHJldC5lbmNyeXB0Lml2ID0gaXY7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNM1U4UGFyc2VyO1xuIiwiaW1wb3J0IHsgTmFsdW5pdCB9IGZyb20gJ3hncGxheWVyLWNvZGVjJztcbmltcG9ydCB7IEF1ZGlvVHJhY2ssIFZpZGVvVHJhY2sgfSBmcm9tICd4Z3BsYXllci1idWZmZXInO1xuaW1wb3J0IHtcbiAgQXVkaW9UcmFja01ldGEsXG4gIFZpZGVvVHJhY2tNZXRhLFxuICBBdWRpb1RyYWNrU2FtcGxlLFxuICBWaWRlb1RyYWNrU2FtcGxlLFxuICBFVkVOVFMsXG4gIFN0cmVhbVxufSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5cbmNvbnN0IERFTVVYX0VWRU5UUyA9IEVWRU5UUy5ERU1VWF9FVkVOVFM7XG5jb25zdCBTdHJlYW1UeXBlID0ge1xuICAweDAxOiBbJ3ZpZGVvJywgJ01QRUctMSddLFxuICAweDAyOiBbJ3ZpZGVvJywgJ01QRUctMiddLFxuICAweDFiOiBbJ3ZpZGVvJywgJ0FWQy5IMjY0J10sXG4gIDB4ZWE6IFsndmlkZW8nLCAnVkMtMSddLFxuICAweDAzOiBbJ2F1ZGlvJywgJ01QRUctMSddLFxuICAweDA0OiBbJ2F1ZGlvJywgJ01QRUctMiddLFxuICAweDBmOiBbJ2F1ZGlvJywgJ01QRUctMi5BQUMnXSxcbiAgMHgxMTogWydhdWRpbycsICdNUEVHLTQuQUFDJ10sXG4gIDB4ODA6IFsnYXVkaW8nLCAnTFBDTSddLFxuICAweDgxOiBbJ2F1ZGlvJywgJ0FDMyddLFxuICAweDA2OiBbJ2F1ZGlvJywgJ0FDMyddLFxuICAweDgyOiBbJ2F1ZGlvJywgJ0RUUyddLFxuICAweDgzOiBbJ2F1ZGlvJywgJ0RvbGJ5IFRydWVIRCddLFxuICAweDg0OiBbJ2F1ZGlvJywgJ0FDMy1QbHVzJ10sXG4gIDB4ODU6IFsnYXVkaW8nLCAnRFRTLUhEJ10sXG4gIDB4ODY6IFsnYXVkaW8nLCAnRFRTLU1BJ10sXG4gIDB4YTE6IFsnYXVkaW8nLCAnQUMzLVBsdXMtU0VDJ10sXG4gIDB4YTI6IFsnYXVkaW8nLCAnRFRTLUhELVNFQyddXG59O1xuXG5jbGFzcyBUc0RlbXV4ZXIge1xuICBjb25zdHJ1Y3RvciAoY29uZmlncykge1xuICAgIHRoaXMuY29uZmlncyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZ3MpO1xuICAgIHRoaXMuZGVtdXhpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnBhdCA9IFtdO1xuICAgIHRoaXMucG10ID0gW107XG4gICAgdGhpcy5faGFzVmlkZW9NZXRhID0gZmFsc2U7XG4gICAgdGhpcy5faGFzQXVkaW9NZXRhID0gZmFsc2U7XG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5ERU1VWF9TVEFSVCwgdGhpcy5kZW11eC5iaW5kKHRoaXMpKVxuICB9XG5cbiAgZGVtdXggKGZyYWcpIHtcbiAgICBpZiAodGhpcy5kZW11eGluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IGJ1ZmZlciA9IHRoaXMuaW5wdXRCdWZmZXI7XG4gICAgbGV0IGZyYWdzID0geyBwYXQ6IFtdLCBwbXQ6IFtdIH07XG4gICAgbGV0IHBlc2VzID0ge307XG5cbiAgICAvLyBSZWFkIFRTIHNlZ21lbnRcbiAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCA+PSAxODgpIHtcbiAgICAgIGlmIChidWZmZXIubGVuZ3RoID49IDEgJiYgYnVmZmVyLmFycmF5WzBdW2J1ZmZlci5vZmZzZXRdICE9PSA3MSkge1xuICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKGBVbnRydXN0IHN5bmMgY29kZTogJHtidWZmZXIuYXJyYXlbMF1bYnVmZmVyLm9mZnNldF19LCB0cnkgdG8gcmVjb3ZlcjtgKSwgZmFsc2UpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggPj0gMSAmJiBidWZmZXIuYXJyYXlbMF1bYnVmZmVyLm9mZnNldF0gIT09IDcxKSB7XG4gICAgICAgIGJ1ZmZlci5zaGlmdCgxKTtcbiAgICAgIH1cbiAgICAgIGxldCBidWYgPSBidWZmZXIuc2hpZnQoMTg4KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGJ1Zik7XG4gICAgICBsZXQgdHNTdHJlYW0gPSBuZXcgU3RyZWFtKGJ1Zi5idWZmZXIpO1xuICAgICAgbGV0IHRzID0ge307XG4gICAgICBUc0RlbXV4ZXIucmVhZCh0c1N0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgIGlmICh0cy5wZXMpIHtcbiAgICAgICAgaWYgKCFwZXNlc1t0cy5oZWFkZXIucGlkXSkge1xuICAgICAgICAgIHBlc2VzW3RzLmhlYWRlci5waWRdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcGVzZXNbdHMuaGVhZGVyLnBpZF0ucHVzaCh0cy5wZXMpO1xuICAgICAgICB0cy5wZXMuRVMuYnVmZmVyID0gW3RzLnBlcy5FUy5idWZmZXJdO1xuICAgICAgfSBlbHNlIGlmIChwZXNlc1t0cy5oZWFkZXIucGlkXSkge1xuICAgICAgICBwZXNlc1t0cy5oZWFkZXIucGlkXVtwZXNlc1t0cy5oZWFkZXIucGlkXS5sZW5ndGggLSAxXS5FUy5idWZmZXIucHVzaCh0cy5wYXlsb2FkLnN0cmVhbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IEF1ZGlvT3B0aW9ucyA9IGZyYWc7XG4gICAgbGV0IFZpZGVvT3B0aW9ucyA9IGZyYWc7XG5cbiAgICAvLyBHZXQgRnJhbWVzIGRhdGFcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKHBlc2VzKS5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGVwZXNlcyA9IHBlc2VzW09iamVjdC5rZXlzKHBlc2VzKVtpXV07XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVwZXNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBlcGVzZXNbal0uaWQgPSBPYmplY3Qua2V5cyhwZXNlcylbaV07XG4gICAgICAgIGVwZXNlc1tqXS5FUy5idWZmZXIgPSBUc0RlbXV4ZXIuTWVyZ2UoZXBlc2VzW2pdLkVTLmJ1ZmZlcik7XG4gICAgICAgIGlmIChlcGVzZXNbal0udHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgIHRoaXMucHVzaEF1ZGlvU2FtcGxlKGVwZXNlc1tqXSwgQXVkaW9PcHRpb25zKTtcbiAgICAgICAgICBBdWRpb09wdGlvbnMgPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmIChlcGVzZXNbal0udHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgIHRoaXMucHVzaFZpZGVvU2FtcGxlKGVwZXNlc1tqXSwgVmlkZW9PcHRpb25zKTtcbiAgICAgICAgICBWaWRlb09wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9oYXNBdWRpb01ldGEpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUsICdhdWRpbycpO1xuICAgIH1cbiAgICBpZiAodGhpcy5faGFzVmlkZW9NZXRhKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFLCAndmlkZW8nKTtcbiAgICB9XG4gIH1cblxuICBwdXNoQXVkaW9TYW1wbGUgKHBlcywgb3B0aW9ucykge1xuICAgIGxldCB0cmFjaztcbiAgICBpZiAoIXRoaXMuX3RyYWNrcy5hdWRpb1RyYWNrKSB7XG4gICAgICB0aGlzLl90cmFja3MuYXVkaW9UcmFjayA9IG5ldyBBdWRpb1RyYWNrKCk7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy5hdWRpb1RyYWNrO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy5hdWRpb1RyYWNrO1xuICAgIH1cbiAgICBsZXQgbWV0YSA9IG5ldyBBdWRpb1RyYWNrTWV0YSh7XG4gICAgICBhdWRpb1NhbXBsZVJhdGU6IHBlcy5FUy5mcmVxdWVuY2UsXG4gICAgICBzYW1wbGVSYXRlOiBwZXMuRVMuZnJlcXVlbmNlLFxuICAgICAgY2hhbm5lbENvdW50OiBwZXMuRVMuY2hhbm5lbCxcbiAgICAgIGNvZGVjOiAnbXA0YS40MC4nICsgcGVzLkVTLmF1ZGlvT2JqZWN0VHlwZSxcbiAgICAgIGNvbmZpZzogcGVzLkVTLmF1ZGlvQ29uZmlnLFxuICAgICAgaWQ6IDIsXG4gICAgICBzYW1wbGVSYXRlSW5kZXg6IHBlcy5FUy5mcmVxdWVuY3lJbmRleFxuICAgIH0pO1xuICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKDEwMjQgLyBtZXRhLmF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKTtcblxuICAgIGxldCBtZXRhRXF1YWwgPSBUc0RlbXV4ZXIuY29tcGFpcmVNZXRhKHRyYWNrLm1ldGEsIG1ldGEsIHRydWUpO1xuXG4gICAgaWYgKCF0aGlzLl9oYXNBdWRpb01ldGEgfHwgIW1ldGFFcXVhbCkge1xuICAgICAgdHJhY2subWV0YSA9IG1ldGE7XG4gICAgICB0aGlzLl9oYXNBdWRpb01ldGEgPSB0cnVlXG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ2F1ZGlvJyk7XG4gICAgfVxuXG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShwZXMuRVMuYnVmZmVyLmJ1ZmZlci5zbGljZShwZXMuRVMuYnVmZmVyLnBvc2l0aW9uLCBwZXMuRVMuYnVmZmVyLmxlbmd0aCkpO1xuICAgIGxldCBkdHMgPSBwYXJzZUludChwZXMucHRzIC8gOTApO1xuICAgIGxldCBwdHMgPSBwYXJzZUludChwZXMucHRzIC8gOTApO1xuICAgIGxldCBzYW1wbGUgPSBuZXcgQXVkaW9UcmFja1NhbXBsZSh7ZHRzLCBwdHMsIGRhdGEsIG9wdGlvbnN9KTtcbiAgICB0cmFjay5zYW1wbGVzLnB1c2goc2FtcGxlKTtcbiAgfVxuXG4gIHB1c2hWaWRlb1NhbXBsZSAocGVzLCBvcHRpb25zKSB7XG4gICAgbGV0IG5hbHMgPSBOYWx1bml0LmdldE5hbHVuaXRzKHBlcy5FUy5idWZmZXIpO1xuICAgIGxldCB0cmFjaztcbiAgICBsZXQgbWV0YSA9IG5ldyBWaWRlb1RyYWNrTWV0YSgpO1xuICAgIGlmICghdGhpcy5fdHJhY2tzLnZpZGVvVHJhY2spIHtcbiAgICAgIHRoaXMuX3RyYWNrcy52aWRlb1RyYWNrID0gbmV3IFZpZGVvVHJhY2soKTtcbiAgICAgIHRyYWNrID0gdGhpcy5fdHJhY2tzLnZpZGVvVHJhY2s7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYWNrID0gdGhpcy5fdHJhY2tzLnZpZGVvVHJhY2s7XG4gICAgfVxuICAgIGxldCBzYW1wbGVMZW5ndGggPSAwO1xuICAgIGxldCBzcHMgPSBmYWxzZTtcbiAgICBsZXQgcHBzID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbmFsID0gbmFsc1tpXTtcbiAgICAgIGlmIChuYWwuc3BzKSB7XG4gICAgICAgIHNwcyA9IG5hbDtcbiAgICAgICAgdHJhY2suc3BzID0gbmFsLmJvZHk7XG4gICAgICAgIG1ldGEuY2hyb21hRm9ybWF0ID0gc3BzLnNwcy5jaHJvbWFfZm9ybWF0XG4gICAgICAgIG1ldGEuY29kZWMgPSAnYXZjMS4nO1xuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IDQ7IGorKykge1xuICAgICAgICAgIHZhciBoID0gc3BzLmJvZHlbal0udG9TdHJpbmcoMTYpO1xuICAgICAgICAgIGlmIChoLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIGggPSAnMCcgKyBoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtZXRhLmNvZGVjICs9IGg7XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5jb2RlY0hlaWdodCA9IHNwcy5zcHMuY29kZWNfc2l6ZS5oZWlnaHQ7XG4gICAgICAgIG1ldGEuY29kZWNXaWR0aCA9IHNwcy5zcHMuY29kZWNfc2l6ZS53aWR0aDtcbiAgICAgICAgbWV0YS5mcmFtZVJhdGUgPSBzcHMuc3BzLmZyYW1lX3JhdGU7XG4gICAgICAgIG1ldGEuaWQgPSAxO1xuICAgICAgICBtZXRhLmxldmVsID0gc3BzLnNwcy5sZXZlbF9zdHJpbmc7XG4gICAgICAgIG1ldGEucHJlc2VudEhlaWdodCA9IHNwcy5zcHMucHJlc2VudF9zaXplLmhlaWdodDtcbiAgICAgICAgbWV0YS5wcmVzZW50V2lkdGggPSBzcHMuc3BzLnByZXNlbnRfc2l6ZS53aWR0aDtcbiAgICAgICAgbWV0YS5wcm9maWxlID0gc3BzLnNwcy5wcm9maWxlX3N0cmluZztcbiAgICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IobWV0YS50aW1lc2NhbGUgKiAoc3BzLnNwcy5mcmFtZV9yYXRlLmZwc19kZW4gLyBzcHMuc3BzLmZyYW1lX3JhdGUuZnBzX251bSkpO1xuICAgICAgICBtZXRhLnNhclJhdGlvID0gc3BzLnNwcy5zYXJfcmF0aW8gPyBzcHMuc3BzLnNhcl9yYXRpbyA6IHNwcy5zcHMucGFyX3JhdGlvO1xuICAgICAgfSBlbHNlIGlmIChuYWwucHBzKSB7XG4gICAgICAgIHRyYWNrLnBwcyA9IG5hbC5ib2R5O1xuICAgICAgICBwcHMgPSBuYWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzYW1wbGVMZW5ndGggKz0gKDQgKyBuYWwuYm9keS5ieXRlTGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3BzICYmIHBwcykge1xuICAgICAgbWV0YS5hdmNjID0gTmFsdW5pdC5nZXRBdmNjKHNwcy5ib2R5LCBwcHMuYm9keSk7XG4gICAgICBsZXQgbWV0YUVxdWFsID0gVHNEZW11eGVyLmNvbXBhaXJlTWV0YSh0cmFjay5tZXRhLCBtZXRhLCB0cnVlKTtcbiAgICAgIGlmICghdGhpcy5faGFzVmlkZW9NZXRhIHx8ICFtZXRhRXF1YWwpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICBvcHRpb25zLm1ldGEgPSBPYmplY3QuYXNzaWduKHt9LCBtZXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgbWV0YTogT2JqZWN0LmFzc2lnbih7fSwgbWV0YSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2subWV0YSA9IG1ldGE7XG4gICAgICAgIHRoaXMuX2hhc1ZpZGVvTWV0YSA9IHRydWVcbiAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoc2FtcGxlTGVuZ3RoKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgaXNLZXlmcmFtZSA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG5hbCA9IG5hbHNbaV07XG4gICAgICBsZXQgbGVuZ3RoID0gbmFsLmJvZHkuYnl0ZUxlbmd0aDtcbiAgICAgIGlmIChuYWwuaWRyKSB7XG4gICAgICAgIGlzS2V5ZnJhbWUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFuYWwucHBzICYmICFuYWwuc3BzKSB7XG4gICAgICAgIGRhdGEuc2V0KG5ldyBVaW50OEFycmF5KFtsZW5ndGggPj4+IDI0ICYgMHhmZixcbiAgICAgICAgICBsZW5ndGggPj4+IDE2ICYgMHhmZixcbiAgICAgICAgICBsZW5ndGggPj4+IDggJiAweGZmLFxuICAgICAgICAgIGxlbmd0aCAmIDB4ZmZcbiAgICAgICAgXSksIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICBkYXRhLnNldChuYWwuYm9keSwgb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IG5ldyBWaWRlb1RyYWNrU2FtcGxlKHtcbiAgICAgIGR0czogcGFyc2VJbnQocGVzLmR0cyAvIDkwKSxcbiAgICAgIHB0czogcGFyc2VJbnQocGVzLnB0cyAvIDkwKSxcbiAgICAgIGN0czogKHBlcy5wdHMgLSBwZXMuZHRzKSAvIDkwLFxuICAgICAgb3JpZ2luRHRzOiBwZXMuZHRzLFxuICAgICAgaXNLZXlmcmFtZSxcbiAgICAgIGRhdGEsXG4gICAgICBvcHRpb25zXG4gICAgfSlcbiAgICB0cmFjay5zYW1wbGVzLnB1c2goc2FtcGxlKTtcbiAgfVxuXG4gIGRlc3RvcnkgKCkge1xuICAgIHRoaXMub2ZmKERFTVVYX0VWRU5UUy5ERU1VWF9TVEFSVCwgdGhpcy5kZW11eCk7XG4gICAgdGhpcy5jb25maWdzID0ge307XG4gICAgdGhpcy5kZW11eGluZyA9IGZhbHNlO1xuICAgIHRoaXMucGF0ID0gW107XG4gICAgdGhpcy5wbXQgPSBbXTtcbiAgICB0aGlzLl9oYXNWaWRlb01ldGEgPSBmYWxzZTtcbiAgICB0aGlzLl9oYXNBdWRpb01ldGEgPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBjb21wYWlyZUFycmF5IChhLCBiLCB0eXBlKSB7XG4gICAgbGV0IGFsID0gMDtcbiAgICBsZXQgYmwgPSAwO1xuICAgIGlmICh0eXBlID09PSAnVWludDhBcnJheScpIHtcbiAgICAgIGFsID0gYS5ieXRlTGVuZ3RoO1xuICAgICAgYmwgPSBiLmJ5dGVMZW5ndGg7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnQXJyYXknKSB7XG4gICAgICBhbCA9IGEubGVuZ3RoO1xuICAgICAgYmwgPSBiLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGFsICE9PSBibCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWw7IGkrKykge1xuICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN0YXRpYyBjb21wYWlyZU1ldGEgKGEsIGIsIGlnbm9yZUR1cmF0aW9uKSB7XG4gICAgaWYgKCFhIHx8ICFiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGsgPSBPYmplY3Qua2V5cyhhKS5sZW5ndGg7IGkgPCBrOyBpKyspIHtcbiAgICAgIGxldCBpdGVtYSA9IGFbT2JqZWN0LmtleXMoYSlbaV1dO1xuICAgICAgbGV0IGl0ZW1iID0gYltPYmplY3Qua2V5cyhhKVtpXV07XG4gICAgICBpZiAodHlwZW9mIGl0ZW1hICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoKGlnbm9yZUR1cmF0aW9uICYmIE9iamVjdC5rZXlzKGEpW2ldICE9PSAnZHVyYXRpb24nICYmIE9iamVjdC5rZXlzKGEpW2ldICE9PSAncmVmU2FtcGxlRHVyYXRpb24nICYmIE9iamVjdC5rZXlzKGEpW2ldICE9PSAncmVmU2FtcGxlRHVyYXRpb25GaXhlZCcpICYmIGl0ZW1hICE9PSBpdGVtYikge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpdGVtYS5ieXRlTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGl0ZW1iLmJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVRzRGVtdXhlci5jb21wYWlyZUFycmF5KGl0ZW1hLCBpdGVtYiwgJ1VpbnQ4QXJyYXknKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpdGVtYS5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoaXRlbWIubGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFUc0RlbXV4ZXIuY29tcGFpcmVBcnJheShpdGVtYSwgaXRlbWIsICdBcnJheScpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIVRzRGVtdXhlci5jb21wYWlyZU1ldGEoaXRlbWEsIGl0ZW1iKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN0YXRpYyBNZXJnZSAoYnVmZmVycykge1xuICAgIGxldCBkYXRhO1xuICAgIGxldCBsZW5ndGggPSAwO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGVuZ3RoICs9IChidWZmZXJzW2ldLmxlbmd0aCAtIGJ1ZmZlcnNbaV0ucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGJ1ZmZlciA9IGJ1ZmZlcnNbaV07XG4gICAgICBkYXRhLnNldChuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLCBidWZmZXIucG9zaXRpb24pLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IGJ1ZmZlci5sZW5ndGggLSBidWZmZXIucG9zaXRpb247XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3RyZWFtKGRhdGEuYnVmZmVyKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkIChzdHJlYW0sIHRzLCBmcmFncykge1xuICAgIFRzRGVtdXhlci5yZWFkSGVhZGVyKHN0cmVhbSwgdHMpO1xuICAgIFRzRGVtdXhlci5yZWFkUGF5bG9hZChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgaWYgKHRzLmhlYWRlci5wYWNrZXQgPT09ICdNRURJQScgJiYgdHMuaGVhZGVyLnBheWxvYWQgPT09IDEgJiYgIXRzLnVua25vd25QSURzKSB7XG4gICAgICB0cy5wZXMgPSBUc0RlbXV4ZXIuUEVTKHRzKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcmVhZFBheWxvYWQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgbGV0IGhlYWRlciA9IHRzLmhlYWRlclxuICAgIGxldCBwaWQgPSBoZWFkZXIucGlkO1xuICAgIHN3aXRjaCAocGlkKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIFRzRGVtdXhlci5QQVQoc3RyZWFtLCB0cywgZnJhZ3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgVHNEZW11eGVyLkNBVChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBUc0RlbXV4ZXIuVFNEVChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAweDFmZmY6XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gVE9ETzogc29tZeeahOWGmeazleS4jeWkquWlve+8jOW+l+aUuVxuICAgICAgICBpZiAoZnJhZ3MucGF0LnNvbWUoKGl0ZW0pID0+IHsgcmV0dXJuIGl0ZW0ucGlkID09PSBwaWQ7IH0pKSB7XG4gICAgICAgICAgVHNEZW11eGVyLlBNVChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IHN0cyA9IGZyYWdzLnBtdCA/IGZyYWdzLnBtdC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0ucGlkID09PSBwaWQpIDogW107XG4gICAgICAgICAgaWYgKHN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBUc0RlbXV4ZXIuTWVkaWEoc3RyZWFtLCB0cywgU3RyZWFtVHlwZVtzdHNbMF0uc3RyZWFtVHlwZV1bMF0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRzLnVua25vd25QSURzID0gdHJ1ZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHJlYWRIZWFkZXIgKHN0cmVhbSwgdHMpIHtcbiAgICBsZXQgaGVhZGVyID0ge307XG4gICAgaGVhZGVyLnN5bmMgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIGhlYWRlci5lcnJvciA9IG5leHQgPj4+IDE1O1xuICAgIGhlYWRlci5wYXlsb2FkID0gbmV4dCA+Pj4gMTQgJiAxO1xuICAgIGhlYWRlci5wcmlvcml0eSA9IG5leHQgPj4+IDEzICYgMTtcbiAgICBoZWFkZXIucGlkID0gbmV4dCAmIDB4MWZmZjtcblxuICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG5cbiAgICBoZWFkZXIuc2NyYW1ibGluZyA9IG5leHQgPj4gNiAmIDB4MzsgLy8g5piv5ZCm5Yqg5a+G77yMMDDooajnpLrkuI3liqDlr4ZcblxuICAgIC8qKlxuICAgICAqIDAwIElTTy9JRUPmnKrmnaXkvb/nlKjkv53nlZlcbiAgICAgKiAwMSDmsqHmnInosIPmlbTlrZfmrrXvvIzku4XlkKvmnIkxODRC5pyJ5pWI5YeA6I23XG4gICAgICogMDIg5rKh5pyJ5pyJ5pWI5YeA6I2377yM5LuF5ZCr5pyJMTgzQuiwg+aVtOWtl+autVxuICAgICAqIDAzIDB+MTgyQuiwg+aVtOWtl+auteWQjuS4uuacieaViOWHgOiNt1xuICAgICAqL1xuICAgIGhlYWRlci5hZGFwdGF0aW9uID0gbmV4dCA+PiA0ICYgMHgzO1xuICAgIGhlYWRlci5jb250aW51aXR5ID0gbmV4dCAmIDE1O1xuICAgIGhlYWRlci5wYWNrZXQgPSBoZWFkZXIucGlkID09PSAwID8gJ1BBVCcgOiAnTUVESUEnO1xuICAgIHRzLmhlYWRlciA9IGhlYWRlcjtcbiAgfVxuXG4gIHN0YXRpYyBQQVQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgbGV0IHJldCA9IHt9O1xuICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHN0cmVhbS5za2lwKG5leHQpO1xuICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgcmV0LnRhYmVsSUQgPSBuZXh0O1xuICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIHJldC5lcnJvciA9IG5leHQgPj4+IDc7XG4gICAgcmV0Lnplcm8gPSBuZXh0ID4+PiA2ICYgMTtcbiAgICByZXQuc2VjdGlvbkxlbmd0aCA9IG5leHQgJiAweGZmZjtcbiAgICByZXQuc3RyZWFtSUQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIHJldC5jdXJyZW50ID0gc3RyZWFtLnJlYWRVaW50OCgpICYgMTtcbiAgICByZXQuc2VjdGlvbk51bWJlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQubGFzdFNlY3Rpb25OdW1iZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgbGV0IE4gPSAocmV0LnNlY3Rpb25MZW5ndGggLSA5KSAvIDQ7XG4gICAgbGV0IGxpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgbGV0IHByb2dyYW1OdW1iZXIgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgbGV0IHBpZCA9IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweDFmZmY7XG4gICAgICBsaXN0LnB1c2goe1xuICAgICAgICBwcm9ncmFtOiBwcm9ncmFtTnVtYmVyLFxuICAgICAgICBwaWQsXG4gICAgICAgIHR5cGU6IHByb2dyYW1OdW1iZXIgPT09IDAgPyAnbmV0d29yaycgOiAnbWFwUElEJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGZyYWdzLnBhdCA9IGZyYWdzLnBhdC5jb25jYXQobGlzdCk7XG4gICAgfVxuICAgIHJldC5saXN0ID0gbGlzdDtcbiAgICByZXQucHJvZ3JhbSA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LnBpZCA9IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweDFmZmY7XG4gICAgdHMucGF5bG9hZCA9IHJldDtcbiAgICAvLyBUT0RPIENSQ1xuICB9XG5cbiAgc3RhdGljIFBNVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgcmV0ID0ge307XG4gICAgbGV0IGhlYWRlciA9IHRzLmhlYWRlcjtcbiAgICBoZWFkZXIucGFja2V0ID0gJ1BNVCc7XG4gICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgc3RyZWFtLnNraXAobmV4dCk7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQudGFibGVJRCA9IG5leHQ7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LnNlY3Rpb25MZW5ndGggPSBuZXh0ICYgMHhmZmY7XG4gICAgcmV0LnByb2dyYW0gPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIHJldC5jdXJyZW50ID0gc3RyZWFtLnJlYWRVaW50OCgpICYgMTtcbiAgICByZXQub3JkZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgcmV0Lmxhc3RPcmRlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQuUENSX1BJRCA9IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweDFmZmY7XG4gICAgcmV0LnByb2dyYW1MZW5ndGggPSBzdHJlYW0ucmVhZFVpbnQxNigpICYgMHhmZmY7XG4gICAgbGV0IE4gPSAocmV0LnNlY3Rpb25MZW5ndGggLSAxMykgLyA1O1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgIHN0cmVhbVR5cGU6IHN0cmVhbS5yZWFkVWludDgoKSxcbiAgICAgICAgcGlkOiBzdHJlYW0ucmVhZFVpbnQxNigpICYgMHgxZmZmLCAvLyAweDA3ZTUg6KeG6aKR77yMMHgwN2U2XG4gICAgICAgIGVzOiBzdHJlYW0ucmVhZFVpbnQxNigpICYgMHhmZmZcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXQubGlzdCA9IGxpc3Q7XG4gICAgaWYgKCF0aGlzLnBtdCkge1xuICAgICAgdGhpcy5wbXQgPSBbXTtcbiAgICB9XG4gICAgZnJhZ3MucG10ID0gdGhpcy5wbXQuY29uY2F0KGxpc3QubWFwKChpdGVtKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwaWQ6IGl0ZW0ucGlkLFxuICAgICAgICBlczogaXRlbS5lcyxcbiAgICAgICAgc3RyZWFtVHlwZTogaXRlbS5zdHJlYW1UeXBlLFxuICAgICAgICBwcm9ncmFtOiByZXQucHJvZ3JhbVxuICAgICAgfTtcbiAgICB9KSk7XG4gICAgdHMucGF5bG9hZCA9IHJldDtcbiAgfVxuXG4gIHN0YXRpYyBNZWRpYSAoc3RyZWFtLCB0cywgdHlwZSkge1xuICAgIGxldCBoZWFkZXIgPSB0cy5oZWFkZXI7XG4gICAgbGV0IHBheWxvYWQgPSB7fTtcbiAgICBoZWFkZXIudHlwZSA9IHR5cGU7XG4gICAgaWYgKGhlYWRlci5hZGFwdGF0aW9uID09PSAweDAzKSB7XG4gICAgICBwYXlsb2FkLmFkYXB0YXRpb25MZW5ndGggPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgICBpZiAocGF5bG9hZC5hZGFwdGF0aW9uTGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICAgICAgcGF5bG9hZC5kaXNjb250aW51ZSA9IG5leHQgPj4+IDc7XG4gICAgICAgIHBheWxvYWQuYWNjZXNzID0gbmV4dCA+Pj4gNiAmIDB4MDE7XG4gICAgICAgIHBheWxvYWQucHJpb3JpdHkgPSBuZXh0ID4+PiA1ICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5QQ1IgPSBuZXh0ID4+PiA0ICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5PUENSID0gbmV4dCA+Pj4gMyAmIDB4MDE7XG4gICAgICAgIHBheWxvYWQuc3BsaWNlUG9pbnQgPSBuZXh0ID4+PiAyICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC50cmFuc3BvcnRQcml2YXRlID0gbmV4dCA+Pj4gMSAmIDB4MDE7XG4gICAgICAgIHBheWxvYWQuYWRhcHRhdGlvbkZpZWxkID0gbmV4dCAmIDB4MDE7XG4gICAgICAgIGxldCBfc3RhcnQgPSBzdHJlYW0ucG9zaXRpb247XG4gICAgICAgIGlmIChwYXlsb2FkLlBDUiA9PT0gMSkge1xuICAgICAgICAgIHBheWxvYWQucHJvZ3JhbUNsb2NrQmFzZSA9IHN0cmVhbS5yZWFkVWludDMyKCkgPDwgMTtcbiAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBwYXlsb2FkLnByb2dyYW1DbG9ja0Jhc2UgfD0gbmV4dCA+Pj4gMTU7XG4gICAgICAgICAgcGF5bG9hZC5wcm9ncmFtQ2xvY2tFeHRlbnNpb24gPSBuZXh0ICYgMHgxZmY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQuT1BDUiA9PT0gMSkge1xuICAgICAgICAgIHBheWxvYWQub3JpZ2luUHJvZ3JhbUNsb2NrQmFzZSA9IHN0cmVhbS5yZWFkVWludDMyKCkgPDwgMTtcbiAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBwYXlsb2FkLm9yaWdpblByb2dyYW1DbG9ja0Jhc2UgKz0gbmV4dCA+Pj4gMTU7XG4gICAgICAgICAgcGF5bG9hZC5vcmlnaW5Qcm9ncmFtQ2xvY2tFeHRlbnNpb24gPSBuZXh0ICYgMHgxZmY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQuc3BsaWNlUG9pbnQgPT09IDEpIHtcbiAgICAgICAgICBwYXlsb2FkLnNwbGljZUNvdW50ZG93biA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC50cmFuc3BvcnRQcml2YXRlID09PSAxKSB7XG4gICAgICAgICAgbGV0IGxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICAgICAgICBsZXQgdHJhbnNwb3J0UHJpdmF0ZURhdGEgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnRQcml2YXRlRGF0YS5wdXNoKHN0cmVhbS5yZWFkVWludDgoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXlsb2FkLmFkYXB0YXRpb25GaWVsZCA9PT0gMSkge1xuICAgICAgICAgIGxldCBsZW5ndGggPSBzdHJlYW0ucmVhZFVpbnQ4KClcbiAgICAgICAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKVxuICAgICAgICAgIGxldCBzdGFydCA9IHN0cmVhbS5wb3NpdGlvbjtcbiAgICAgICAgICBsZXQgbHR3ID0gbmV4dCA+Pj4gNztcbiAgICAgICAgICBsZXQgcGllY2V3aXNlID0gbmV4dCA+Pj4gNiAmIDB4MTtcbiAgICAgICAgICBsZXQgc2VhbWxlc3MgPSBuZXh0ID4+PiA1ICYgMHgxO1xuICAgICAgICAgIGlmIChsdHcgPT09IDEpIHtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgICAgcGF5bG9hZC5sdHdWYWxpZCA9IG5leHQgPj4+IDE1O1xuICAgICAgICAgICAgcGF5bG9hZC5sdHdPZmZzZXQgPSBuZXh0ICYgMHhlZmZmO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGllY2V3aXNlID09PSAxKSB7XG4gICAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MjQoKTtcbiAgICAgICAgICAgIHBheWxvYWQucGllY2V3aXNlUmF0ZSA9IG5leHQgJiAweDNmZmZmZjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlYW1sZXNzID09PSAxKSB7XG4gICAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRJbnQ4KCk7XG4gICAgICAgICAgICBwYXlsb2FkLnNwbGljZVR5cGUgPSBuZXh0ID4+PiA0O1xuICAgICAgICAgICAgcGF5bG9hZC5kdHNOZXh0QVUxID0gbmV4dCA+Pj4gMSAmIDB4NztcbiAgICAgICAgICAgIHBheWxvYWQubWFya2VyMSA9IG5leHQgJiAweDE7XG4gICAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICAgIHBheWxvYWQuZHRzTmV4dEFVMiA9IG5leHQgPj4+IDE7XG4gICAgICAgICAgICBwYXlsb2FkLm1hcmtlcjIgPSBuZXh0ICYgMHgxO1xuICAgICAgICAgICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICAgICAgICBwYXlsb2FkLmR0c05leHRBVTMgPSBuZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHJlYW0uc2tpcChsZW5ndGggLSAxIC0gKHN0cmVhbS5wb3NpdGlvbiAtIHN0YXJ0KSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhc3RTdHVmZmluZyA9IHBheWxvYWQuYWRhcHRhdGlvbkxlbmd0aCAtIDEgLSAoc3RyZWFtLnBvc2l0aW9uIC0gX3N0YXJ0KTtcbiAgICAgICAgc3RyZWFtLnNraXAobGFzdFN0dWZmaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcGF5bG9hZC5zdHJlYW0gPSBuZXcgU3RyZWFtKHN0cmVhbS5idWZmZXIuc2xpY2Uoc3RyZWFtLnBvc2l0aW9uKSk7XG4gICAgdHMucGF5bG9hZCA9IHBheWxvYWQ7XG4gIH1cblxuICBzdGF0aWMgUEVTICh0cykge1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBsZXQgYnVmZmVyID0gdHMucGF5bG9hZC5zdHJlYW07XG5cbiAgICBsZXQgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgaWYgKG5leHQgIT09IDEpIHtcbiAgICAgIHJldC5FUyA9IHt9O1xuICAgICAgcmV0LkVTLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHN0cmVhbUlEID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgaWYgKHN0cmVhbUlEID49IDB4ZTAgJiYgc3RyZWFtSUQgPD0gMHhlZikge1xuICAgICAgICByZXQudHlwZSA9ICd2aWRlbyc7XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtSUQgPj0gMHhjMCAmJiBzdHJlYW1JRCA8PSAweGRmKSB7XG4gICAgICAgIHJldC50eXBlID0gJ2F1ZGlvJztcbiAgICAgIH1cbiAgICAgIGxldCBwYWNrZXRMZW5ndGggPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgcmV0LnBhY2tldExlbmd0aCA9IHBhY2tldExlbmd0aDtcbiAgICAgIGlmIChyZXQudHlwZSA9PT0gJ3ZpZGVvJyB8fCByZXQudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICBsZXQgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgbGV0IGZpcnN0ID0gbmV4dCA+Pj4gNjtcbiAgICAgICAgaWYgKGZpcnN0ICE9PSAweDAyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlcnJvciB3aGVuIHBhcnNlIHBlcyBoZWFkZXInKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICByZXQucHRzRFRTRmxhZyA9IG5leHQgPj4+IDY7XG4gICAgICAgIHJldC5lc2NyRmxhZyA9IG5leHQgPj4+IDUgJiAweDAxO1xuICAgICAgICByZXQuZXNSYXRlRmxhZyA9IG5leHQgPj4+IDQgJiAweDAxO1xuICAgICAgICByZXQuZHNtRmxhZyA9IG5leHQgPj4+IDMgJiAweDAxO1xuICAgICAgICByZXQuYWRkaXRpb25hbEZsYWcgPSBuZXh0ID4+PiAyICYgMHgwMTtcbiAgICAgICAgcmV0LmNyY0ZsYWcgPSBuZXh0ID4+PiAxICYgMHgwMTtcbiAgICAgICAgcmV0LmV4dGVuc2lvbkZsYWcgPSBuZXh0ICYgMHgwMTtcbiAgICAgICAgcmV0LnBlc0hlYWRlckxlbmd0aCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgbGV0IE4xID0gcmV0LnBlc0hlYWRlckxlbmd0aDtcblxuICAgICAgICBpZiAocmV0LnB0c0RUU0ZsYWcgPT09IDIpIHtcbiAgICAgICAgICBsZXQgcHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBwdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LnB0cyA9IChwdHNbMF0gPDwgMzAgfCBwdHNbMV0gPDwgMTUgfCBwdHNbMl0pO1xuICAgICAgICAgIE4xIC09IDU7XG4gICAgICAgICAgLy8g6KeG6aKR5aaC5p6c5rKh5pyJZHRz55SocHRzXG4gICAgICAgICAgaWYgKHJldC50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICByZXQuZHRzID0gcmV0LnB0cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5wdHNEVFNGbGFnID09PSAzKSB7XG4gICAgICAgICAgbGV0IHB0cyA9IFtdO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQ4KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSAmIDB4MDcpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIHJldC5wdHMgPSAocHRzWzBdIDw8IDMwIHwgcHRzWzFdIDw8IDE1IHwgcHRzWzJdKTtcbiAgICAgICAgICBsZXQgZHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBkdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LmR0cyA9IChkdHNbMF0gPDwgMzAgfCBkdHNbMV0gPDwgMTUgfCBkdHNbMl0pO1xuICAgICAgICAgIE4xIC09IDEwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZXNjckZsYWcgPT09IDEpIHtcbiAgICAgICAgICBsZXQgZXNjciA9IFtdXG4gICAgICAgICAgbGV0IGV4ID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCA+Pj4gMyAmIDB4MDcpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZXNjci5wdXNoKG5leHQgPj4+IDEzKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCAmIDB4MDMpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ID4+PiAxMyk7XG4gICAgICAgICAgZXgucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBleC5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIHJldC5lc2NyID0gKGVzY3JbMF0gPDwgMzAgfCBlc2NyWzFdIDw8IDI4IHwgZXNjclsyXSA8PCAxNSB8IGVzY3JbM10gPDwgMTMgfCBlc2NyWzRdKSAqIDMwMCArIChleFswXSA8PCA3IHwgZXhbMV0pO1xuICAgICAgICAgIE4xIC09IDY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5lc1JhdGVGbGFnID09PSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgICAgICAgcmV0LmVzUmF0ZSA9IG5leHQgPj4+IDEgJiAweDNmZmZmZjtcbiAgICAgICAgICBOMSAtPSAzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZHNtRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnQgRFNNX3RyaWNrX21vZGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmFkZGl0aW9uYWxGbGFnID09PSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICByZXQuYWRkaXRpb25hbENvcHlJbmZvID0gbmV4dCAmIDB4N2Y7XG4gICAgICAgICAgTjEgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmNyY0ZsYWcgPT09IDEpIHtcbiAgICAgICAgICByZXQucGVzQ1JDID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBOMSAtPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZXh0ZW5zaW9uRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnQgZXh0ZW5zaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE4xID4gMCkge1xuICAgICAgICAgIGJ1ZmZlci5za2lwKE4xKTtcbiAgICAgICAgfVxuICAgICAgICByZXQuRVMgPSBUc0RlbXV4ZXIuRVMoYnVmZmVyLCByZXQudHlwZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Zvcm1hdCBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgRVMgKGJ1ZmZlciwgdHlwZSkge1xuICAgIGxldCBuZXh0O1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDMyKCk7XG4gICAgICBpZiAobmV4dCAhPT0gMSkge1xuICAgICAgICBidWZmZXIuYmFjayg0KTtcbiAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgICAgIGlmIChuZXh0ICE9PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoMjY0IG5hbCBoZWFkZXIgcGFyc2UgZmFpbGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1ZmZlci5za2lwKDIpOy8vIDA5IEYwXG4gICAgICAvLyBUT0RPIHJlYWRuYWx1XG4gICAgICByZXQuYnVmZmVyID0gYnVmZmVyO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAvLyBhZHRz55qE5ZCM5q2l5a2X6IqC77yMMTLkvY1cbiAgICAgIGlmIChuZXh0ID4+PiA0ICE9PSAweGZmZikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FhYyBFUyBwYXJzZSBFcnJvcicpO1xuICAgICAgfVxuICAgICAgY29uc3QgZnEgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXTtcbiAgICAgIHJldC5pZCA9IChuZXh0ID4+PiAzICYgMHgwMSkgPT09IDAgPyAnTVBFRy00JyA6ICdNUEVHLTInO1xuICAgICAgcmV0LmxheWVyID0gbmV4dCA+Pj4gMSAmIDB4MDM7XG4gICAgICByZXQuYWJzZW50ID0gbmV4dCAmIDB4MDE7XG4gICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSAobmV4dCA+Pj4gMTQgJiAweDAzKSArIDE7XG4gICAgICByZXQucHJvZmlsZSA9IHJldC5hdWRpb09iamVjdFR5cGUgLSAxO1xuICAgICAgcmV0LmZyZXF1ZW5jeUluZGV4ID0gbmV4dCA+Pj4gMTAgJiAweDBmO1xuICAgICAgcmV0LmZyZXF1ZW5jZSA9IGZxW3JldC5mcmVxdWVuY3lJbmRleF07XG4gICAgICByZXQuY2hhbm5lbCA9IG5leHQgPj4+IDYgJiAweDA3O1xuICAgICAgcmV0LmZyYW1lTGVuZ3RoID0gKG5leHQgJiAweDAzKSA8PCAxMSB8IChidWZmZXIucmVhZFVpbnQxNigpID4+PiA1KTtcbiAgICAgIFRzRGVtdXhlci5nZXRBdWRpb0NvbmZpZyhyZXQpO1xuICAgICAgYnVmZmVyLnNraXAoMSk7XG4gICAgICByZXQuYnVmZmVyID0gYnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEVTICR7dHlwZX0gaXMgbm90IHN1cHBvcnRlZGApO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgVFNEVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICAvLyBUT0RPXG4gICAgdHMucGF5bG9hZCA9IHt9O1xuICB9XG5cbiAgc3RhdGljIENBVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgcmV0ID0ge31cbiAgICByZXQudGFibGVJRCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LnNlY3Rpb25JbmRpY2F0b3IgPSBuZXh0ID4+PiA3O1xuICAgIHJldC5zZWN0aW9uTGVuZ3RoID0gbmV4dCAmIDB4MGZmZjtcbiAgICBzdHJlYW0uc2tpcCgyKTtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC52ZXJzaW9uID0gbmV4dCA+Pj4gMztcbiAgICByZXQuY3VycmVudE5leHRJbmRpY2F0b3IgPSBuZXh0ICYgMHgwMTtcbiAgICByZXQuc2VjdGlvbk51bWJlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQubGFzdFNlY3Rpb25OdW1iZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgbGV0IE4gPSAodGhpcy5zZWN0aW9uTGVuZ3RoIC0gOSkgLyA0O1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIGxpc3QucHVzaCh7fSk7XG4gICAgfVxuICAgIHJldC5jcmMzMiA9IHN0cmVhbS5yZWFkVWludDMyKCk7XG4gICAgdHMucGF5bG9hZCA9IHJldDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBdWRpb0NvbmZpZyAocmV0KSB7XG4gICAgbGV0IHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKVxuICAgIGxldCBjb25maWc7XG4gICAgbGV0IGV4dGVuc2lvblNhbXBsZUluZGV4O1xuICAgIGlmICgvZmlyZWZveC9pLnRlc3QodXNlckFnZW50KSkge1xuICAgICAgaWYgKHJldC5mcmVxdWVuY3lJbmRleCA+PSA2KSB7XG4gICAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSA1O1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gcmV0LmZyZXF1ZW5jeUluZGV4IC0gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSAyO1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gcmV0LmZyZXF1ZW5jeUluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoJ2FuZHJvaWQnKSAhPT0gLTEpIHtcbiAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSAyO1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgZXh0ZW5zaW9uU2FtcGxlSW5kZXggPSByZXQuZnJlcXVlbmN5SW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSA1O1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuICAgICAgaWYgKHJldC5mcmVxdWVuY3lJbmRleCA+PSA2KSB7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gcmV0LmZyZXF1ZW5jeUluZGV4IC0gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChyZXQuY2hhbm5lbCA9PT0gMSkge1xuICAgICAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSAyO1xuICAgICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgICAgfVxuICAgICAgICBleHRlbnNpb25TYW1wbGVJbmRleCA9IHJldC5mcmVxdWVuY3lJbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25maWdbMF0gPSByZXQuYXVkaW9PYmplY3RUeXBlIDw8IDM7XG4gICAgY29uZmlnWzBdIHw9IChyZXQuZnJlcXVlbmN5SW5kZXggJiAweDBlKSA+PiAxO1xuICAgIGNvbmZpZ1sxXSA9IChyZXQuZnJlcXVlbmN5SW5kZXggJiAweDAxKSA8PCA3O1xuICAgIGNvbmZpZ1sxXSB8PSByZXQuY2hhbm5lbCA8PCAzO1xuICAgIGlmIChyZXQuYXVkaW9PYmplY3RUeXBlID09PSA1KSB7XG4gICAgICBjb25maWdbMV0gfD0gKGV4dGVuc2lvblNhbXBsZUluZGV4ICYgMHgwZSkgPj4gMTtcbiAgICAgIGNvbmZpZ1syXSA9IChleHRlbnNpb25TYW1wbGVJbmRleCAmIDB4MDEpIDw8IDc7XG4gICAgICBjb25maWdbMl0gfD0gMiA8PCAyO1xuICAgICAgY29uZmlnWzNdID0gMDtcbiAgICB9XG4gICAgcmV0LmF1ZGlvQ29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgZ2V0IGlucHV0QnVmZmVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmNvbmZpZ3MuaW5wdXRidWZmZXIpO1xuICB9XG5cbiAgZ2V0IF90cmFja3MgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUc0RlbXV4ZXI7XG4iLCJjbGFzcyBQbGF5bGlzdCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5fYmFzZVVSTCA9ICcnO1xuICAgIHRoaXMuX2xpc3QgPSB7fTtcbiAgICB0aGlzLl90cyA9IHt9O1xuICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgdGhpcy5zZXF1ZW5jZSA9IC0xO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZnJhZ0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbGFzdGdldCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9hdWRvY2xlYXIgPSBjb25maWdzLmF1dG9jbGVhciB8fCBmYWxzZTtcbiAgfVxuXG4gIGdldCBsaXN0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGlzdDtcbiAgfVxuXG4gIHNldCBiYXNlVVJMIChiYXNlVVJMKSB7XG4gICAgaWYgKHRoaXMuYmFzZVVSTCAhPT0gYmFzZVVSTCkge1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgdGhpcy5fYmFzZVVSTCA9IGJhc2VVUkw7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGJhc2VVUkwgKCkge1xuICAgIHJldHVybiB0aGlzLl9iYXNlVVJMO1xuICB9XG5cbiAgcHVzaCAodHMsIGR1cmF0aW9uLCBkaXNjb250aW51ZSkge1xuICAgIGlmICghdGhpcy5fdHNbdHNdKSB7XG4gICAgICB0aGlzLl90c1t0c10gPSB7ZHVyYXRpb246IGR1cmF0aW9uLCBcbiAgICAgICAgZG93bmxvYWRlZDogZmFsc2UsIFxuICAgICAgICBkb3dubG9hZGluZzogZmFsc2UsIFxuICAgICAgICBzdGFydDogdGhpcy5kdXJhdGlvbiwgXG4gICAgICAgIGRpc2NvbnRpbnVlOiBkaXNjb250aW51ZSA/IHRydWU6IGZhbHNlXG4gICAgICB9O1xuICAgICAgdGhpcy5fbGlzdFt0aGlzLmR1cmF0aW9uXSA9IHRzO1xuICAgICAgdGhpcy5kdXJhdGlvbiArPSBkdXJhdGlvbjtcbiAgICAgIHRoaXMuZnJhZ0xlbmd0aCArPSAxO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZUZyYWcgKHVybCkge1xuICAgIGlmICh0aGlzLl90c1t1cmxdKSB7XG4gICAgICBpZiAodGhpcy5fdHNbdXJsXS5zdGFydCA+IHRoaXMuX2xhc3RnZXQudGltZSkge1xuICAgICAgICB0aGlzLl9sYXN0Z2V0ID0ge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLl90c1t1cmxdLmR1cmF0aW9uLFxuICAgICAgICAgIHRpbWU6IHRoaXMuX3RzW3VybF0uc3RhcnQsXG4gICAgICAgICAgZG93bmxvYWRlZDogZmFsc2UsXG4gICAgICAgICAgZG93bmxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIHVybDogdXJsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLl9saXN0W3RoaXMuX3RzW3VybF0uc3RhcnRdO1xuICAgICAgZGVsZXRlIHRoaXMuX3RzW3VybF07XG4gICAgICB0aGlzLmZyYWdMZW5ndGggLT0gMTtcbiAgICB9XG4gIH1cblxuICBwdXNoTTNVOCAoZGF0YSwgZGVsZXRlcHJlKSB7XG4gICAgLy8g5bi46KeE5L+h5oGv5pu/5o2iXG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG0zdTggZGF0YSByZWNlaXZlZC5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy52ZXJzaW9uID0gZGF0YS52ZXJzaW9uO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSBkYXRhLnRhcmdldGR1cmF0aW9uO1xuICAgIGlmKGRhdGEuZW5jcnlwdCAmJiAhdGhpcy5lbmNyeXB0KSB7XG4gICAgICB0aGlzLmVuY3J5cHQgPSBkYXRhLmVuY3J5cHQ7XG4gICAgfVxuICAgIC8vIOaWsOWIhueJh+S/oeaBr1xuICAgIGlmIChkYXRhLnNlcXVlbmNlID4gdGhpcy5zZXF1ZW5jZSkge1xuICAgICAgdGhpcy5zZXF1ZW5jZSA9IGRhdGEuc2VxdWVuY2U7XG4gICAgICBsZXQgbmV3ZnJhZ2xpc3QgPSBbXVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmZyYWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBmcmFnID0gZGF0YS5mcmFnc1tpXTtcbiAgICAgICAgaWYgKCF0aGlzLl90c1tmcmFnLnVybF0pIHtcbiAgICAgICAgICBuZXdmcmFnbGlzdC5wdXNoKGZyYWcudXJsKVxuICAgICAgICAgIHRoaXMucHVzaChmcmFnLnVybCwgZnJhZy5kdXJhdGlvbiwgZnJhZy5kaXNjb250aW51ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYobmV3ZnJhZ2xpc3QubGVuZ3RoIDwgMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbiBub3QgcmVhZCB0cyBmaWxlIGxpc3QuYCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChkZWxldGVwcmUpIHtcbiAgICAgICAgbGV0IHRzbGlzdCA9IHRoaXMuZ2V0VHNMaXN0KCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHNsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKG5ld2ZyYWdsaXN0LmluZGV4T2YodHNsaXN0W2ldKSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlRnJhZyh0c2xpc3RbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9sZCBtM3U4IGZpbGUgcmVjZWl2ZWQsICR7ZGF0YS5zZXF1ZW5jZX1gKTtcbiAgICB9XG4gIH1cblxuICBnZXRUc0xpc3QgKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl90cyk7XG4gIH1cblxuICBkb3dubG9hZGVkICh0c25hbWUsIGlzbG9hZGVkKSB7XG4gICAgbGV0IHRzID0gdGhpcy5fdHNbdHNuYW1lXTtcbiAgICBpZiAodHMpIHtcbiAgICAgIHRzLmRvd25sb2FkZWQgPSBpc2xvYWRlZFxuICAgIH1cbiAgfVxuXG4gIGRvd25sb2FkaW5nICh0c25hbWUsIGxvYWRpbmcpIHtcbiAgICBsZXQgdHMgPSB0aGlzLl90c1t0c25hbWVdO1xuICAgIGlmICh0cykge1xuICAgICAgdHMuZG93bmxvYWRpbmcgPSBsb2FkaW5nXG4gICAgfVxuICB9XG5cbiAgZ2V0VHNCeU5hbWUgKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fdHNbbmFtZV07XG4gIH1cblxuICBnZXRUcyAodGltZSkge1xuICAgIGxldCB0aW1lbGlzdCA9IE9iamVjdC5rZXlzKHRoaXMuX2xpc3QpO1xuICAgIGxldCB0cztcblxuICAgIGlmICh0aW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLl9sYXN0Z2V0KSB7XG4gICAgICAgIHRpbWUgPSB0aGlzLl9sYXN0Z2V0LnRpbWUgKyB0aGlzLl9sYXN0Z2V0LmR1cmF0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaXN0Lmxlbmd0aCA8IDEgfHwgdGltZSA+PSB0aGlzLmR1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aW1lbGlzdC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChhKSAtIHBhcnNlRmxvYXQoYilcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbWVsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGltZSA+PSBwYXJzZUludCh0aW1lbGlzdFtpXSkpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMuX2xpc3RbdGltZWxpc3RbaV1dO1xuICAgICAgICBsZXQgZG93bmxvYWRlZCA9IHRoaXMuX3RzW3VybF0uZG93bmxvYWRlZDtcbiAgICAgICAgbGV0IGRvd25sb2FkaW5nID0gdGhpcy5fdHNbdXJsXS5kb3dubG9hZGluZztcbiAgICAgICAgdHMgPSB7dXJsLCBkb3dubG9hZGVkLCBkb3dubG9hZGluZywgdGltZTogcGFyc2VJbnQodGltZWxpc3RbaV0pLCBkdXJhdGlvbjogcGFyc2VJbnQodGhpcy5fdHNbdXJsXS5kdXJhdGlvbil9O1xuICAgICAgICBpZiAodGhpcy5hdXRvY2xlYXIpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fdHNbdGhpcy5fbGFzdGdldC51cmxdO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXN0W3RoaXMuX2xhc3RnZXQudGltZV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFzdGdldCA9IHRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cztcbiAgfVxuXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLl9iYXNlVVJMID0gJyc7XG4gICAgdGhpcy5fbGlzdCA9IHt9O1xuICAgIHRoaXMuX3RzID0ge307XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICB0aGlzLnNlcXVlbmNlID0gLTE7XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gIH1cblxuICBjbGVhckRvd25sb2FkZWQgKCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gT2JqZWN0LmtleXModGhpcy5fdHMpLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGV0IHRzID0gdGhpcy5fdHNbT2JqZWN0LmtleXModGhpcy5fdHMpW2ldXTtcbiAgICAgIHRzLmRvd25sb2FkZWQgPSBmYWxzZTtcbiAgICAgIHRzLmRvd25sb2FkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fYmFzZVVSTCA9ICcnO1xuICAgIHRoaXMuX2xpc3QgPSB7fTtcbiAgICB0aGlzLl90cyA9IHt9O1xuICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgdGhpcy5zZXF1ZW5jZSA9IC0xO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZnJhZ0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbGFzdGdldCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9hdWRvY2xlYXIgPSBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGF5bGlzdDtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBGZXRjaExvYWRlcjogcmVxdWlyZSgnLi9zcmMvZmV0Y2gtbG9hZGVyJykuZGVmYXVsdFxufTtcbiIsImltcG9ydCB7IEVWRU5UUyB9IGZyb20gJ3hncGxheWVyLXV0aWxzJztcblxuY29uc3QgTE9BREVSX0VWRU5UUyA9IEVWRU5UUy5MT0FERVJfRVZFTlRTO1xuY29uc3QgUkVBRF9TVFJFQU0gPSAwO1xuY29uc3QgUkVBRF9URVhUID0gMTtcbmNvbnN0IFJFQURfSlNPTiA9IDI7XG5jb25zdCBSRUFEX0JVRkZFUiA9IDM7XG5jbGFzcyBGZXRjaExvYWRlciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5jb25maWdzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlncyk7XG4gICAgdGhpcy51cmwgPSBudWxsXG4gICAgdGhpcy5zdGF0dXMgPSAwXG4gICAgdGhpcy5lcnJvciA9IG51bGxcbiAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX2NhbmNlbGVkID0gZmFsc2U7XG4gICAgdGhpcy5fZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5yZWFkdHlwZSA9IHRoaXMuY29uZmlncy5yZWFkdHlwZTtcbiAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuY29uZmlncy5idWZmZXIgfHwgJ0xPQURFUl9CVUZGRVInO1xuICAgIHRoaXMuX2xvYWRlclRhc2tObyA9IDA7XG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTEFERVJfU1RBUlQsIHRoaXMubG9hZC5iaW5kKHRoaXMpKVxuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ2xvYWRlcidcbiAgfVxuXG4gIGxvYWQgKHVybCwgb3B0cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy51cmwgPSB1cmw7XG5cbiAgICB0aGlzLl9jYW5jZWxlZCA9IGZhbHNlO1xuXG4gICAgLy8gVE9ETzogQWRkIFJhbmdlc1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLmdldFBhcmFtcyhvcHRzKVxuICAgIF90aGlzLmxvYWRpbmcgPSB0cnVlXG4gICAgcmV0dXJuIGZldGNoKHRoaXMudXJsLCBwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgX3RoaXMuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzXG4gICAgICAgIHJldHVybiBfdGhpcy5fb25GZXRjaFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfRVJST1IsIF90aGlzLlRBRywgbmV3IEVycm9yKGBpbnZhbGlkIHJlc3BvbnNlLmApKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpICB7XG4gICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCBfdGhpcy5UQUcsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvci5tZXNzYWdlKVxuICAgIH0pXG4gIH1cblxuICBfb25GZXRjaFJlc3BvbnNlIChyZXNwb25zZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGJ1ZmZlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5idWZmZXIpO1xuICAgIHRoaXMuX2xvYWRlclRhc2tObysrO1xuICAgIGxldCB0YXNrbm8gPSB0aGlzLl9sb2FkZXJUYXNrTm87XG4gICAgaWYgKHJlc3BvbnNlLm9rID09PSB0cnVlKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMucmVhZHR5cGUpIHtcbiAgICAgICAgY2FzZSBSRUFEX0pTT046XG4gICAgICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5fY2FuY2VsZWQgJiYgIV90aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSRUFEX1RFWFQ6XG4gICAgICAgICAgcmVzcG9uc2UudGV4dCgpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5fY2FuY2VsZWQgJiYgIV90aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSRUFEX0JVRkZFUjpcbiAgICAgICAgICByZXNwb25zZS5hcnJheUJ1ZmZlcigpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5fY2FuY2VsZWQgJiYgIV90aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKG5ldyBVaW50OEFycmF5KGRhdGEpKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUkVBRF9TVFJFQU06XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX29uUmVhZGVyKHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCksIHRhc2tubyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX29uUmVhZGVyIChyZWFkZXIsIHRhc2tubykge1xuICAgIGxldCBidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMuYnVmZmVyKTtcbiAgICBpZiAoKCFidWZmZXIgJiYgdGhpcy5fcmVhZGVyKSB8fCB0aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX3JlYWRlci5jYW5jZWwoKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBETyBOT1RISU5HXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fcmVhZGVyID0gcmVhZGVyXG4gICAgaWYgKHRoaXMubG9hZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBfdGhpcyA9IHRoaXNcbiAgICAvLyByZWFkZXIgcmVhZCBmdW5jdGlvbiByZXR1cm5zIGEgUHJvbWlzZS4gZ2V0IGRhdGEgd2hlbiBjYWxsYmFjayBhbmQgaGFzIHZhbHVlLmRvbmUgd2hlbiBkaXNjb25uZWN0ZWQuXG4gICAgLy8gcmVhZOaWueazlei/lOWbnuS4gOS4qlByb21pc2UuIOWbnuiwg+S4reWPr+S7peiOt+WPluWIsOaVsOaNruOAguW9k3ZhbHVlLmRvbmXlrZjlnKjml7bvvIzor7TmmI7pk77mjqXmlq3lvIDjgIJcbiAgICB0aGlzLl9yZWFkZXIgJiYgdGhpcy5fcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIGlmIChfdGhpcy5fY2FuY2VsZWQgfHwgX3RoaXMuX2Rlc3Ryb3llZCkge1xuICAgICAgICBpZiAoX3RoaXMuX3JlYWRlcikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVhZGVyLmNhbmNlbCgpXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gRE8gTk9USElOR1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodmFsLmRvbmUpIHtcbiAgICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICAgIF90aGlzLnN0YXR1cyA9IDA7XG4gICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGJ1ZmZlcilcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGJ1ZmZlci5wdXNoKHZhbC52YWx1ZSlcbiAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfREFUQUxPQURFRCwgYnVmZmVyKVxuICAgICAgcmV0dXJuIF90aGlzLl9vblJlYWRlcihyZWFkZXIsIHRhc2tubylcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfRVJST1IsIF90aGlzLlRBRywgZXJyb3IpO1xuICAgIH0pXG4gIH1cblxuICBnZXRQYXJhbXMgKG9wdHMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMpXG4gICAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG5cbiAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICBtb2RlOiAnY29ycycsXG4gICAgICBjYWNoZTogJ2RlZmF1bHQnXG4gICAgfVxuXG4gICAgLy8gYWRkIGN1c3Rtb3IgaGVhZGVyc1xuICAgIC8vIOa3u+WKoOiHquWumuS5ieWktFxuICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWdzLmhlYWRlcnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBsZXQgY29uZmlnSGVhZGVycyA9IHRoaXMuY29uZmlncy5oZWFkZXJzXG4gICAgICBmb3IgKGxldCBrZXkgaW4gY29uZmlnSGVhZGVycykge1xuICAgICAgICBpZiAoY29uZmlnSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCBjb25maWdIZWFkZXJzW2tleV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuaGVhZGVycyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGxldCBvcHRIZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzXG4gICAgICBmb3IgKGxldCBrZXkgaW4gb3B0SGVhZGVycykge1xuICAgICAgICBpZiAob3B0SGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCBvcHRIZWFkZXJzW2tleV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jb3JzID09PSBmYWxzZSkge1xuICAgICAgcGFyYW1zLm1vZGUgPSAnc2FtZS1vcmlnaW4nXG4gICAgfVxuXG4gICAgLy8gd2l0aENyZWRlbnRpYWxzIGlzIGRpc2FibGVkIGJ5IGRlZmF1bHRcbiAgICAvLyB3aXRoQ3JlZGVudGlhbHMg5Zyo6buY6K6k5oOF5Ya15LiL5LiN6KKr5L2/55So44CCXG4gICAgaWYgKG9wdGlvbnMud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICBwYXJhbXMuY3JlZGVudGlhbHMgPSAnaW5jbHVkZSdcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBBZGQgcmFuZ2VzO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICBjYW5jZWwgKCkge1xuICAgIGlmICh0aGlzLl9yZWFkZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX3JlYWRlci5jYW5jZWwoKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyDpmLLmraJmYWlsZWQ6IDIwMOmUmeivr+iiq+aJk+WNsOWIsOaOp+WItuWPsOS4ilxuICAgICAgfVxuICAgICAgdGhpcy5fcmVhZGVyID0gbnVsbFxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICB9XG4gICAgdGhpcy5fY2FuY2VsZWQgPSB0cnVlO1xuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fZGVzdHJveWVkID0gdHJ1ZVxuICAgIHRoaXMuY2FuY2VsKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmV0Y2hMb2FkZXJcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBNcDRSZW11eGVyOiByZXF1aXJlKCcuL3NyYy9tcDQnKS5kZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuXG4vLyBjb25zdCBVSU5UMzJfTUFYID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcbmNsYXNzIEZtcDQge1xuICBzdGF0aWMgc2l6ZSAodmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLndyaXRlVWludDMyKHZhbHVlKVxuICB9XG4gIHN0YXRpYyBpbml0Qm94IChzaXplLCBuYW1lLCAuLi5jb250ZW50KSB7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZShzaXplKSwgRm1wNC50eXBlKG5hbWUpLCAuLi5jb250ZW50KVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIGV4dGVuc2lvbiAodmVyc2lvbiwgZmxhZykge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXG4gICAgICB2ZXJzaW9uLFxuICAgICAgKGZsYWcgPj4gMTYpICYgMHhmZixcbiAgICAgIChmbGFnID4+IDgpICYgMHhmZixcbiAgICAgIGZsYWcgJiAweGZmXG4gICAgXSlcbiAgfVxuICBzdGF0aWMgZnR5cCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyNCwgJ2Z0eXAnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDY5LCAweDczLCAweDZGLCAweDZELCAvLyBpc29tLFxuICAgICAgMHgwLCAweDAsIDB4MDAsIDB4MDEsIC8vIG1pbm9yX3ZlcnNpb246IDB4MDFcbiAgICAgIDB4NjksIDB4NzMsIDB4NkYsIDB4NkQsIC8vIGlzb21cbiAgICAgIDB4NjEsIDB4NzYsIDB4NjMsIDB4MzEgLy8gYXZjMVxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBtb292ICh7IHR5cGUsIG1ldGEgfSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCBtdmhkID0gRm1wNC5tdmhkKG1ldGEuZHVyYXRpb24sIG1ldGEudGltZXNjYWxlKVxuICAgIGxldCB0cmFrXG5cbiAgICBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgdHJhayA9IEZtcDQudmlkZW9UcmFrKG1ldGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYWsgPSBGbXA0LmF1ZGlvVHJhayhtZXRhKVxuICAgIH1cblxuICAgIGxldCBtdmV4ID0gRm1wNC5tdmV4KG1ldGEuZHVyYXRpb24sIG1ldGEudGltZXNjYWxlIHx8IDEwMDAsIG1ldGEuaWQpO1xuICAgIFttdmhkLCB0cmFrLCBtdmV4XS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21vb3YnLCBtdmhkLCB0cmFrLCBtdmV4KVxuICB9XG4gIHN0YXRpYyBtdmhkIChkdXJhdGlvbiwgdGltZXNjYWxlID0gMTAwMCkge1xuICAgIC8vIGR1cmF0aW9uICo9IHRpbWVzY2FsZTtcbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3MgICAgIDHkvY3nmoRib3jniYjmnKwrM+S9jWZsYWdzICAgYm9454mI5pys77yMMOaIljHvvIzkuIDoiKzkuLow44CC77yI5Lul5LiL5a2X6IqC5pWw5Z2H5oyJdmVyc2lvbj0w77yJXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1lICAgIOWIm+W7uuaXtumXtCAg77yI55u45a+55LqOVVRD5pe26Ze0MTkwNC0wMS0wMembtueCueeahOenkuaVsO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uX3RpbWUgICDkv67mlLnml7bpl7RcblxuICAgICAgLyoqXG4gICAgICAgICAgICAgKiB0aW1lc2NhbGU6IDQgYnl0ZXPmlofku7blqpLkvZPlnKgx56eS5pe26Ze05YaF55qE5Yi75bqm5YC877yM5Y+v5Lul55CG6Kej5Li6MeenkumVv+W6plxuICAgICAgICAgICAgICovXG4gICAgICAodGltZXNjYWxlID4+PiAyNCkgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSA+Pj4gMTYpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUgPj4+IDgpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUpICYgMHhGRixcblxuICAgICAgLyoqXG4gICAgICAgICAgICAgKiBkdXJhdGlvbjogNCBieXRlc+ivpXRyYWNr55qE5pe26Ze06ZW/5bqm77yM55SoZHVyYXRpb27lkox0aW1lIHNjYWxl5YC85Y+v5Lul6K6h566XdHJhY2vml7bplb/vvIzmr5TlpoJhdWRpbyB0cmFja+eahHRpbWUgc2NhbGUgPSA4MDAwLFxuICAgICAgICAgICAgICogZHVyYXRpb24gPSA1NjAxMjjvvIzml7bplb/kuLo3MC4wMTbvvIx2aWRlbyB0cmFja+eahHRpbWUgc2NhbGUgPSA2MDAsIGR1cmF0aW9uID0gNDIwMDDvvIzml7bplb/kuLo3MFxuICAgICAgICAgICAgICovXG4gICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDgpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbikgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8gUHJlZmVycmVkIHJhdGU6IDEuMCAgIOaOqOiNkOaSreaUvumAn+eOh++8jOmrmDE25L2N5ZKM5L2OMTbkvY3liIbliKvkuLrlsI/mlbDngrnmlbTmlbDpg6jliIblkozlsI/mlbDpg6jliIbvvIzljbNbMTYuMTZdIOagvOW8j++8jOivpeWAvOS4ujEuMO+8iDB4MDAwMTAwMDDvvInooajnpLrmraPluLjliY3lkJHmkq3mlL5cbiAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJlZmVycmVkVm9sdW1lKDEuMCwgMmJ5dGVzKSArIHJlc2VydmVkKDJieXRlcylcbiAgICAgICAgICAgICAqIOS4jnJhdGXnsbvkvLzvvIxbOC44XSDmoLzlvI/vvIwxLjDvvIgweDAxMDDvvInooajnpLrmnIDlpKfpn7Pph49cbiAgICAgICAgICAgICAqL1xuICAgICAgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vICByZXNlcnZlZDogNCArIDQgYnl0ZXPkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyAtLS0tYmVnaW4gY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIOinhumikeWPmOaNouefqemYtSAgIOe6v+aAp+S7o+aVsFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDQwLCAweDAwLCAweDAwLCAweDAwLCAvLyAtLS0tZW5kIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBwcmVfZGVmaW5lZCA2ICogNCBieXRlcy0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmUtZGVmaW5lZCDkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gLS0tLWVuZCBwcmVfZGVmaW5lZCA2ICogNCBieXRlcy0tLS1cbiAgICAgIDB4RkYsIDB4RkYsIDB4RkYsIDB4RkYgLy8gbmV4dF90cmFja19JRCDkuIvkuIDkuKp0cmFja+S9v+eUqOeahGlk5Y+3XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDggKyBieXRlcy5sZW5ndGgsICdtdmhkJywgbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpKVxuICB9XG4gIHN0YXRpYyB2aWRlb1RyYWsgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcblxuICAgIGxldCB0a2hkID0gRm1wNC50a2hkKHtcbiAgICAgIGlkOiAxLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICB3aWR0aDogZGF0YS5wcmVzZW50V2lkdGgsXG4gICAgICBoZWlnaHQ6IGRhdGEucHJlc2VudEhlaWdodCxcbiAgICAgIHR5cGU6ICd2aWRlbydcbiAgICB9KVxuICAgIGxldCBtZGlhID0gRm1wNC5tZGlhKHtcbiAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIGF2Y2M6IGRhdGEuYXZjYyxcbiAgICAgIHBhclJhdGlvOiBkYXRhLnBhclJhdGlvLFxuICAgICAgd2lkdGg6IGRhdGEucHJlc2VudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkYXRhLnByZXNlbnRIZWlnaHRcbiAgICB9KTtcbiAgICBbdGtoZCwgbWRpYV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFrJywgdGtoZCwgbWRpYSlcbiAgfVxuICBzdGF0aWMgYXVkaW9UcmFrIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IHRraGQgPSBGbXA0LnRraGQoe1xuICAgICAgaWQ6IDIsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgIH0pXG4gICAgbGV0IG1kaWEgPSBGbXA0Lm1kaWEoe1xuICAgICAgdHlwZTogJ2F1ZGlvJyxcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIGR1cmF0aW9uOiBkYXRhLmR1cmF0aW9uLFxuICAgICAgY2hhbm5lbENvdW50OiBkYXRhLmNoYW5uZWxDb3VudCxcbiAgICAgIHNhbXBsZXJhdGU6IGRhdGEuc2FtcGxlUmF0ZSxcbiAgICAgIGNvbmZpZzogZGF0YS5jb25maWdcbiAgICB9KTtcbiAgICBbdGtoZCwgbWRpYV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFrJywgdGtoZCwgbWRpYSlcbiAgfVxuICBzdGF0aWMgdGtoZCAoZGF0YSkge1xuICAgIGxldCBpZCA9IGRhdGEuaWRcbiAgICBsZXQgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uXG4gICAgbGV0IHdpZHRoID0gZGF0YS53aWR0aFxuICAgIGxldCBoZWlnaHQgPSBkYXRhLmhlaWdodFxuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwNywgLy8gdmVyc2lvbigwKSArIGZsYWdzIDHkvY3niYjmnKwgYm9454mI5pys77yMMOaIljHvvIzkuIDoiKzkuLow44CC77yI5Lul5LiL5a2X6IqC5pWw5Z2H5oyJdmVyc2lvbj0w77yJ5oyJ5L2N5oiW5pON5L2c57uT5p6c5YC877yM6aKE5a6a5LmJ5aaC5LiL77yaXG4gICAgICAvLyAweDAwMDAwMSB0cmFja19lbmFibGVk77yM5ZCm5YiZ6K+ldHJhY2vkuI3ooqvmkq3mlL7vvJtcbiAgICAgIC8vIDB4MDAwMDAyIHRyYWNrX2luX21vdmll77yM6KGo56S66K+ldHJhY2vlnKjmkq3mlL7kuK3ooqvlvJXnlKjvvJtcbiAgICAgIC8vIDB4MDAwMDA0IHRyYWNrX2luX3ByZXZpZXfvvIzooajnpLror6V0cmFja+WcqOmihOiniOaXtuiiq+W8leeUqOOAglxuICAgICAgLy8g5LiA6Iis6K+l5YC85Li6N++8jDErMis0IOWmguaenOS4gOS4quWqkuS9k+aJgOaciXRyYWNr5Z2H5pyq6K6+572udHJhY2tfaW5fbW92aWXlkox0cmFja19pbl9wcmV2aWV377yM5bCG6KKr55CG6Kej5Li65omA5pyJdHJhY2vlnYforr7nva7kuobov5nkuKTpobnvvJvlr7nkuo5oaW50IHRyYWNr77yM6K+l5YC85Li6MFxuICAgICAgLy8gaGludCB0cmFjayDov5nkuKrnibnmrornmoR0cmFja+W5tuS4jeWMheWQq+WqkuS9k+aVsOaNru+8jOiAjOaYr+WMheWQq+S6huS4gOS6m+WwhuWFtuS7luaVsOaNrnRyYWNr5omT5YyF5oiQ5rWB5aqS5L2T55qE5oyH56S65L+h5oGv44CCXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1l5Yib5bu65pe26Ze077yI55u45a+55LqOVVRD5pe26Ze0MTkwNC0wMS0wMembtueCueeahOenkuaVsO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uIHRpbWUg5L+u5pS55pe26Ze0XG4gICAgICAoaWQgPj4+IDI0KSAmIDB4RkYsIC8vIHRyYWNrX0lEOiA0IGJ5dGVzIGlk5Y+377yM5LiN6IO96YeN5aSN5LiU5LiN6IO95Li6MFxuICAgICAgKGlkID4+PiAxNikgJiAweEZGLFxuICAgICAgKGlkID4+PiA4KSAmIDB4RkYsXG4gICAgICAoaWQpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiA0IGJ5dGVzICAgIOS/neeVmeS9jVxuICAgICAgKGR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBkdXJhdGlvbjogNCBieXRlcyB0cmFja+eahOaXtumXtOmVv+W6plxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiAyICogNCBieXRlcyAgICDkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBsYXllcigyYnl0ZXMpICsgYWx0ZXJuYXRlX2dyb3VwKDJieXRlcykgIOinhumikeWxgu+8jOm7mOiupOS4ujDvvIzlgLzlsI/nmoTlnKjkuIrlsYIudHJhY2vliIbnu4Tkv6Hmga/vvIzpu5jorqTkuLow6KGo56S66K+ldHJhY2vmnKrkuI7lhbbku5Z0cmFja+aciee+pOe7hOWFs+ezu1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdm9sdW1lKDJieXRlcykgKyByZXNlcnZlZCgyYnl0ZXMpICAgIFs4LjhdIOagvOW8j++8jOWmguaenOS4uumfs+mikXRyYWNr77yMMS4w77yIMHgwMTAw77yJ6KGo56S65pyA5aSn6Z+z6YeP77yb5ZCm5YiZ5Li6MCAgICvkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBjb21wb3NpdGlvbiBtYXRyaXgtLS0tXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyDop4bpopHlj5jmjaLnn6npmLVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgKHdpZHRoID4+PiA4KSAmIDB4RkYsIC8vIC8v5a695bqmXG4gICAgICAod2lkdGgpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAoaGVpZ2h0ID4+PiA4KSAmIDB4RkYsIC8vIOmrmOW6plxuICAgICAgKGhlaWdodCkgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoLCAndGtoZCcsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIGVkdHMgKGRhdGEpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvblxuICAgIGxldCBtZWRpYVRpbWUgPSBkYXRhLm1lZGlhVGltZVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMzYpLCBGbXA0LnR5cGUoJ2VkdHMnKSlcbiAgICAvLyBlbHN0XG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSgyOCksIEZtcDQudHlwZSgnZWxzdCcpKVxuICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeSBjb3VudFxuICAgICAgKGR1cmF0aW9uID4+IDI0KSAmIDB4ZmYsIChkdXJhdGlvbiA+PiAxNikgJiAweGZmLCAoZHVyYXRpb24gPj4gOCkgJiAweGZmLCBkdXJhdGlvbiAmIDB4ZmYsXG4gICAgICAobWVkaWFUaW1lID4+IDI0KSAmIDB4ZmYsIChtZWRpYVRpbWUgPj4gMTYpICYgMHhmZiwgKG1lZGlhVGltZSA+PiA4KSAmIDB4ZmYsIG1lZGlhVGltZSAmIDB4ZmYsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxIC8vIG1lZGlhIHJhdGVcbiAgICBdKSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBtZGlhIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IG1kaGQgPSBGbXA0Lm1kaGQoZGF0YS50aW1lc2NhbGUsIGRhdGEuZHVyYXRpb24pXG4gICAgbGV0IGhkbHIgPSBGbXA0LmhkbHIoZGF0YS50eXBlKVxuICAgIGxldCBtaW5mID0gRm1wNC5taW5mKGRhdGEpO1xuICAgIFttZGhkLCBoZGxyLCBtaW5mXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21kaWEnLCBtZGhkLCBoZGxyLCBtaW5mKVxuICB9XG4gIHN0YXRpYyBtZGhkICh0aW1lc2NhbGUgPSAxMDAwLCBkdXJhdGlvbikge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY3JlYXRpb25fdGltZSAgICDliJvlu7rml7bpl7RcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1vZGlmaWNhdGlvbl90aW1l5L+u5pS55pe26Ze0XG4gICAgICAodGltZXNjYWxlID4+PiAyNCkgJiAweEZGLCAvLyB0aW1lc2NhbGU6IDQgYnl0ZXMgICAg5paH5Lu25aqS5L2T5ZyoMeenkuaXtumXtOWGheeahOWIu+W6puWAvO+8jOWPr+S7peeQhuino+S4ujHnp5Lplb/luqZcbiAgICAgICh0aW1lc2NhbGUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlID4+PiA4KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlKSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsIC8vIGR1cmF0aW9uOiA0IGJ5dGVzICB0cmFja+eahOaXtumXtOmVv+W6plxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4NTUsIDB4QzQsIC8vIGxhbmd1YWdlOiB1bmQgKHVuZGV0ZXJtaW5lZCkg5aqS5L2T6K+t6KiA56CB44CC5pyA6auY5L2N5Li6MO+8jOWQjumdojE15L2N5Li6M+S4quWtl+espu+8iOingUlTTyA2MzktMi9U5qCH5YeG5Lit5a6a5LmJ77yJXG4gICAgICAweDAwLCAweDAwIC8vIHByZV9kZWZpbmVkID0gMFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxMiArIGNvbnRlbnQuYnl0ZUxlbmd0aCwgJ21kaGQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgaGRsciAodHlwZSkge1xuICAgIGxldCB2YWx1ZSA9IFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmVfZGVmaW5lZFxuICAgICAgMHg3NiwgMHg2OSwgMHg2NCwgMHg2NSwgLy8gaGFuZGxlcl90eXBlOiAndmlkZSdcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4NTYsIDB4NjksIDB4NjQsIDB4NjUsXG4gICAgICAweDZmLCAweDQ4LCAweDYxLCAweDZlLFxuICAgICAgMHg2NCwgMHg2YywgMHg2NSwgMHg3MiwgMHgwMCAvLyBuYW1lOiAnVmlkZW9IYW5kbGVyJ1xuICAgIF1cbiAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgdmFsdWUuc3BsaWNlKDgsIDQsIC4uLlsweDczLCAweDZmLCAweDc1LCAweDZlXSlcbiAgICAgIHZhbHVlLnNwbGljZSgyNCwgMTMsIC4uLlsweDUzLCAweDZmLCAweDc1LCAweDZlLFxuICAgICAgICAweDY0LCAweDQ4LCAweDYxLCAweDZlLFxuICAgICAgICAweDY0LCAweDZjLCAweDY1LCAweDcyLCAweDAwXSlcbiAgICB9XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgdmFsdWUubGVuZ3RoLCAnaGRscicsIG5ldyBVaW50OEFycmF5KHZhbHVlKSlcbiAgfVxuICBzdGF0aWMgbWluZiAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB2bWhkID0gZGF0YS50eXBlID09PSAndmlkZW8nID8gRm1wNC52bWhkKCkgOiBGbXA0LnNtaGQoKVxuICAgIGxldCBkaW5mID0gRm1wNC5kaW5mKClcbiAgICBsZXQgc3RibCA9IEZtcDQuc3RibChkYXRhKTtcbiAgICBbdm1oZCwgZGluZiwgc3RibF0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICdtaW5mJywgdm1oZCwgZGluZiwgc3RibClcbiAgfVxuICBzdGF0aWMgdm1oZCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyMCwgJ3ZtaGQnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAxLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgLy8gZ3JhcGhpY3Ntb2RlXG4gICAgICAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAgLy8gb3Bjb2xvclxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBzbWhkICgpIHtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc21oZCcsIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAvLyBiYWxhbmNlXG4gICAgICAweDAwLCAweDAwIC8vIHJlc2VydmVkXG4gICAgXSkpXG4gIH1cbiAgc3RhdGljIGRpbmYgKCkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgZHJlZiA9IFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeV9jb3VudFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwYywgLy8gZW50cnlfc2l6ZVxuICAgICAgMHg3NSwgMHg3MiwgMHg2YywgMHgyMCwgLy8gJ3VybCcgdHlwZVxuICAgICAgMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAxIC8vIGVudHJ5X2ZsYWdzXG4gICAgXVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMzYpLCBGbXA0LnR5cGUoJ2RpbmYnKSwgRm1wNC5zaXplKDI4KSwgRm1wNC50eXBlKCdkcmVmJyksIG5ldyBVaW50OEFycmF5KGRyZWYpKVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIHN0YmwgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgc3RzZCA9IEZtcDQuc3RzZChkYXRhKVxuICAgIGxldCBzdHRzID0gRm1wNC5zdHRzKClcbiAgICBsZXQgc3RzYyA9IEZtcDQuc3RzYygpXG4gICAgbGV0IHN0c3ogPSBGbXA0LnN0c3ooKVxuICAgIGxldCBzdGNvID0gRm1wNC5zdGNvKCk7XG4gICAgW3N0c2QsIHN0dHMsIHN0c2MsIHN0c3osIHN0Y29dLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnc3RibCcsIHN0c2QsIHN0dHMsIHN0c2MsIHN0c3osIHN0Y28pXG4gIH1cbiAgc3RhdGljIHN0c2QgKGRhdGEpIHtcbiAgICBsZXQgY29udGVudFxuICAgIGlmIChkYXRhLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIC8vIGlmICghZGF0YS5pc0FBQyAmJiBkYXRhLmNvZGVjID09PSAnbXA0Jykge1xuICAgICAgLy8gICAgIGNvbnRlbnQgPSBGTVA0Lm1wMyhkYXRhKTtcbiAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAvL1xuICAgICAgLy8gfVxuICAgICAgLy8g5pSv5oyBbXA0YVxuICAgICAgY29udGVudCA9IEZtcDQubXA0YShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ID0gRm1wNC5hdmMxKGRhdGEpXG4gICAgfVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYgKyBjb250ZW50LmJ5dGVMZW5ndGgsICdzdHNkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIG5ldyBVaW50OEFycmF5KFsweDAwLCAweDAwLCAweDAwLCAweDAxXSksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG1wNGEgKGRhdGEpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSwgLy8gZGF0YV9yZWZlcmVuY2VfaW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgZGF0YS5jaGFubmVsQ291bnQsIC8vIGNoYW5uZWxjb3VudFxuICAgICAgMHgwMCwgMHgxMCwgLy8gc2FtcGxlU2l6ZToxNmJpdHNcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkMlxuICAgICAgKGRhdGEuc2FtcGxlcmF0ZSA+PiA4KSAmIDB4ZmYsXG4gICAgICBkYXRhLnNhbXBsZXJhdGUgJiAweGZmLCAvL1xuICAgICAgMHgwMCwgMHgwMFxuICAgIF0pXG4gICAgbGV0IGVzZHMgPSBGbXA0LmVzZHMoZGF0YS5jb25maWcpXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoICsgZXNkcy5ieXRlTGVuZ3RoLCAnbXA0YScsIGNvbnRlbnQsIGVzZHMpXG4gIH1cbiAgc3RhdGljIGVzZHMgKGNvbmZpZyA9IFs0MywgMTQ2LCA4LCAwXSkge1xuICAgIGNvbnN0IGNvbmZpZ2xlbiA9IGNvbmZpZy5sZW5ndGhcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG5cbiAgICAgIDB4MDMsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgxNyArIGNvbmZpZ2xlbiwgLy8gbGVuZ3RoXG4gICAgICAweDAwLCAweDAxLCAvLyBlc19pZFxuICAgICAgMHgwMCwgLy8gc3RyZWFtX3ByaW9yaXR5XG5cbiAgICAgIDB4MDQsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgwZiArIGNvbmZpZ2xlbiwgLy8gbGVuZ3RoXG4gICAgICAweDQwLCAvLyBjb2RlYyA6IG1wZWc0X2F1ZGlvXG4gICAgICAweDE1LCAvLyBzdHJlYW1fdHlwZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gYnVmZmVyX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGF2Z0JpdHJhdGVcblxuICAgICAgMHgwNSAvLyBkZXNjcmlwdG9yX3R5cGVcbiAgICBdLmNvbmNhdChbY29uZmlnbGVuXSkuY29uY2F0KGNvbmZpZykuY29uY2F0KFsweDA2LCAweDAxLCAweDAyXSkpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSg4ICsgY29udGVudC5ieXRlTGVuZ3RoKSwgRm1wNC50eXBlKCdlc2RzJyksIGNvbnRlbnQpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgYXZjMSAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2l6ZSA9IDQwLy8gOChhdmMxKSs4KGF2Y2MpKzgoYnRydCkrMTYocGFzcClcbiAgICAvLyBsZXQgc3BzID0gZGF0YS5zcHNcbiAgICAvLyBsZXQgcHBzID0gZGF0YS5wcHNcbiAgICBsZXQgd2lkdGggPSBkYXRhLndpZHRoXG4gICAgbGV0IGhlaWdodCA9IGRhdGEuaGVpZ2h0XG4gICAgbGV0IGhTcGFjaW5nID0gZGF0YS5wYXJSYXRpby5oZWlnaHRcbiAgICBsZXQgdlNwYWNpbmcgPSBkYXRhLnBhclJhdGlvLndpZHRoXG4gICAgLy8gbGV0IGF2Y2NCdWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICAvLyBhdmNjQnVmZmVyLndyaXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAvLyAgIDB4MDEsIC8vIHZlcnNpb25cbiAgICAvLyAgIHNwc1sxXSwgLy8gcHJvZmlsZVxuICAgIC8vICAgc3BzWzJdLCAvLyBwcm9maWxlIGNvbXBhdGlibGVcbiAgICAvLyAgIHNwc1szXSwgLy8gbGV2ZWxcbiAgICAvLyAgIDB4ZmMgfCAzLFxuICAgIC8vICAgMHhFMCB8IDEgLy8g55uu5YmN5Y+q5aSE55CG5LiA5Liqc3BzXG4gICAgLy8gXS5jb25jYXQoW3Nwcy5sZW5ndGggPj4+IDggJiAweGZmLCBzcHMubGVuZ3RoICYgMHhmZl0pKSlcbiAgICAvLyBhdmNjQnVmZmVyLndyaXRlKHNwcywgbmV3IFVpbnQ4QXJyYXkoWzEsIHBwcy5sZW5ndGggPj4+IDggJiAweGZmLCBwcHMubGVuZ3RoICYgMHhmZl0pLCBwcHMpXG5cbiAgICBsZXQgYXZjYyA9IGRhdGEuYXZjY1xuICAgIGxldCBhdmMxID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAvLyBkYXRhX3JlZmVyZW5jZV9pbmRleFxuICAgICAgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAod2lkdGggPj4gOCkgJiAweGZmLFxuICAgICAgd2lkdGggJiAweGZmLCAvLyB3aWR0aFxuICAgICAgKGhlaWdodCA+PiA4KSAmIDB4ZmYsXG4gICAgICBoZWlnaHQgJiAweGZmLCAvLyBoZWlnaHRcbiAgICAgIDB4MDAsIDB4NDgsIDB4MDAsIDB4MDAsIC8vIGhvcml6cmVzb2x1dGlvblxuICAgICAgMHgwMCwgMHg0OCwgMHgwMCwgMHgwMCwgLy8gdmVydHJlc29sdXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAvLyBmcmFtZV9jb3VudFxuICAgICAgMHgxMixcbiAgICAgIDB4NjQsIDB4NjEsIDB4NjksIDB4NkMsIC8vIGRhaWx5bW90aW9uL2hscy5qc1xuICAgICAgMHg3OSwgMHg2RCwgMHg2RiwgMHg3NCxcbiAgICAgIDB4NjksIDB4NkYsIDB4NkUsIDB4MkYsXG4gICAgICAweDY4LCAweDZDLCAweDczLCAweDJFLFxuICAgICAgMHg2QSwgMHg3MywgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY29tcHJlc3Nvcm5hbWVcbiAgICAgIDB4MDAsIDB4MTgsIC8vIGRlcHRoID0gMjRcbiAgICAgIDB4MTEsIDB4MTFdKSAvLyBwcmVfZGVmaW5lZCA9IC0xXG4gICAgbGV0IGJ0cnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDFjLCAweDljLCAweDgwLCAvLyBidWZmZXJTaXplREJcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzAsIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzAgLy8gYXZnQml0cmF0ZVxuICAgIF0pXG4gICAgbGV0IHBhc3AgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAoaFNwYWNpbmcgPj4gMjQpLCAvLyBoU3BhY2luZ1xuICAgICAgKGhTcGFjaW5nID4+IDE2KSAmIDB4ZmYsXG4gICAgICAoaFNwYWNpbmcgPj4gOCkgJiAweGZmLFxuICAgICAgaFNwYWNpbmcgJiAweGZmLFxuICAgICAgKHZTcGFjaW5nID4+IDI0KSwgLy8gdlNwYWNpbmdcbiAgICAgICh2U3BhY2luZyA+PiAxNikgJiAweGZmLFxuICAgICAgKHZTcGFjaW5nID4+IDgpICYgMHhmZixcbiAgICAgIHZTcGFjaW5nICYgMHhmZlxuICAgIF0pXG5cbiAgICBidWZmZXIud3JpdGUoXG4gICAgICBGbXA0LnNpemUoc2l6ZSArIGF2YzEuYnl0ZUxlbmd0aCArIGF2Y2MuYnl0ZUxlbmd0aCArIGJ0cnQuYnl0ZUxlbmd0aCksIEZtcDQudHlwZSgnYXZjMScpLCBhdmMxLFxuICAgICAgRm1wNC5zaXplKDggKyBhdmNjLmJ5dGVMZW5ndGgpLCBGbXA0LnR5cGUoJ2F2Y0MnKSwgYXZjYyxcbiAgICAgIEZtcDQuc2l6ZSgyMCksIEZtcDQudHlwZSgnYnRydCcpLCBidHJ0LFxuICAgICAgRm1wNC5zaXplKDE2KSwgRm1wNC50eXBlKCdwYXNwJyksIHBhc3BcbiAgICApXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgc3R0cyAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBlbnRyeV9jb3VudFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3N0dHMnLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBzdHNjICgpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIGVudHJ5X2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc3RzYycsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHN0Y28gKCkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZW50cnlfY291bnRcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICdzdGNvJywgY29udGVudClcbiAgfVxuICBzdGF0aWMgc3RzeiAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gc2FtcGxlX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gc2FtcGxlX2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDIwLCAnc3RzeicsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG12ZXggKGR1cmF0aW9uLCB0aW1lc2NhbGUgPSAxMDAwLCB0cmFja0lEKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBtZWhkID0gQnVmZmVyLndyaXRlVWludDMyKGR1cmF0aW9uKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoNTYpLCBGbXA0LnR5cGUoJ212ZXgnKSwgRm1wNC5zaXplKDE2KSwgRm1wNC50eXBlKCdtZWhkJyksIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBtZWhkLCBGbXA0LnRyZXgodHJhY2tJRCkpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgdHJleCAoaWQpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIChpZCA+PiAyNCksXG4gICAgICAoaWQgPj4gMTYpICYgMHhmZixcbiAgICAgIChpZCA+PiA4KSAmIDB4ZmYsXG4gICAgICAoaWQgJiAweGZmKSwgLy8gdHJhY2tfSURcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGRlZmF1bHRfc2FtcGxlX2Rlc2NyaXB0aW9uX2luZGV4XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9kdXJhdGlvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZGVmYXVsdF9zYW1wbGVfc2l6ZVxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMSAvLyBkZWZhdWx0X3NhbXBsZV9mbGFnc1xuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoLCAndHJleCcsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG1vb2YgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgbWZoZCA9IEZtcDQubWZoZCgpXG4gICAgbGV0IHRyYWYgPSBGbXA0LnRyYWYoZGF0YSk7XG4gICAgW21maGQsIHRyYWZdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnbW9vZicsIG1maGQsIHRyYWYpXG4gIH1cbiAgc3RhdGljIG1maGQgKCkge1xuICAgIGxldCBjb250ZW50ID0gQnVmZmVyLndyaXRlVWludDMyKEZtcDQuc2VxdWVuY2UpXG4gICAgRm1wNC5zZXF1ZW5jZSArPSAxXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ21maGQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgdHJhZiAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB0ZmhkID0gRm1wNC50ZmhkKGRhdGEuaWQpXG4gICAgbGV0IHRmZHQgPSBGbXA0LnRmZHQoZGF0YS50aW1lKVxuICAgIGxldCBzZHRwID0gRm1wNC5zZHRwKGRhdGEpXG4gICAgbGV0IHRydW4gPSBGbXA0LnRydW4oZGF0YSwgc2R0cC5ieXRlTGVuZ3RoKTtcblxuICAgIFt0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ3RyYWYnLCB0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwKVxuICB9XG4gIHN0YXRpYyB0ZmhkIChpZCkge1xuICAgIGxldCBjb250ZW50ID0gQnVmZmVyLndyaXRlVWludDMyKGlkKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICd0ZmhkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHRmZHQgKHRpbWUpIHtcbiAgICAvLyBsZXQgdXBwZXIgPSBNYXRoLmZsb29yKHRpbWUgLyAoVUlOVDMyX01BWCArIDEpKSxcbiAgICAvLyAgICAgbG93ZXIgPSBNYXRoLmZsb29yKHRpbWUgJSAoVUlOVDMyX01BWCArIDEpKTtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAndGZkdCcsIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBCdWZmZXIud3JpdGVVaW50MzIodGltZSkpXG4gIH1cbiAgc3RhdGljIHRydW4gKGRhdGEsIHNkdHBMZW5ndGgpIHtcbiAgICAvLyBsZXQgaWQgPSBkYXRhLmlkO1xuICAgIC8vIGxldCBjZWlsID0gaWQgPT09IDEgPyAxNiA6IDEyO1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2FtcGxlQ291bnQgPSBCdWZmZXIud3JpdGVVaW50MzIoZGF0YS5zYW1wbGVzLmxlbmd0aClcbiAgICAvLyBtZGF0LWhlYWRlciA4XG4gICAgLy8gbW9vZi1oZWFkZXIgOFxuICAgIC8vIG1maGQgMTZcbiAgICAvLyB0cmFmLWhlYWRlciA4XG4gICAgLy8gdGhoZCAxNlxuICAgIC8vIHRmZHQgMjBcbiAgICAvLyB0cnVuLWhlYWRlciAxMlxuICAgIC8vIHNhbXBsZUNvdW50IDRcbiAgICAvLyBkYXRhLW9mZnNldCA0XG4gICAgLy8gc2FtcGxlcy5sZW5ndGhcbiAgICBsZXQgb2Zmc2V0ID0gQnVmZmVyLndyaXRlVWludDMyKDggKyA4ICsgMTYgKyA4ICsgMTYgKyAxNiArIDEyICsgNCArIDQgKyAxNiAqIGRhdGEuc2FtcGxlcy5sZW5ndGggKyBzZHRwTGVuZ3RoKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMjAgKyAxNiAqIGRhdGEuc2FtcGxlcy5sZW5ndGgpLCBGbXA0LnR5cGUoJ3RydW4nKSwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MEYsIDB4MDFdKSwgc2FtcGxlQ291bnQsIG9mZnNldClcblxuICAgIC8vIGxldCBzaXplID0gYnVmZmVyLmJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAgLy8gbGV0IHdyaXRlT2Zmc2V0ID0gMFxuICAgIC8vIGRhdGEuc2FtcGxlcy5mb3JFYWNoKCgpID0+IHtcbiAgICAvLyAgIHNpemUgKz0gMTZcbiAgICAvLyB9KVxuICAgIC8vXG4gICAgLy8gbGV0IHRydW5Cb3ggPSBuZXcgVWludDhBcnJheShzaXplKVxuXG4gICAgLy8gdHJ1bkJveC5zZXQoYnVmZmVyLmJ1ZmZlciwgMClcblxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBmbGFncyA9IGl0ZW0uZmxhZ3NcbiAgICAgIC8vIGNvbnNvbGUubG9nKGl0ZW0udHlwZSwgaXRlbS5kdHMsIGl0ZW0uZHVyYXRpb24pXG5cbiAgICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfZHVyYXRpb25cbiAgICAgICAgKGl0ZW0uZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDI0KSAmIDB4RkYsIC8vIHNhbXBsZV9zaXplXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uc2l6ZSkgJiAweEZGLFxuICAgICAgICAoZmxhZ3MuaXNMZWFkaW5nIDw8IDIpIHwgZmxhZ3MuZGVwZW5kc09uLCAvLyBzYW1wbGVfZmxhZ3NcbiAgICAgICAgKGZsYWdzLmlzRGVwZW5kZWRPbiA8PCA2KSB8IChmbGFncy5oYXNSZWR1bmRhbmN5IDw8IDQpIHwgZmxhZ3MuaXNOb25TeW5jLFxuICAgICAgICAweDAwLCAweDAwLCAvLyBzYW1wbGVfZGVncmFkYXRpb25fcHJpb3JpdHlcbiAgICAgICAgKGl0ZW0uY3RzID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfY29tcG9zaXRpb25fdGltZV9vZmZzZXRcbiAgICAgICAgKGl0ZW0uY3RzID4+PiAxNikgJiAweEZGLFxuICAgICAgICAoaXRlbS5jdHMgPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uY3RzKSAmIDB4RkZcbiAgICAgIF0pKVxuICAgICAgLy8gd3JpdGVPZmZzZXQgKz0gMTZcbiAgICAgIC8vIGJ1ZmZlci53cml0ZShCdWZmZXIud3JpdGVVaW50MzIoMCkpO1xuICAgIH0pXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgc2R0cCAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDEyICsgZGF0YS5zYW1wbGVzLmxlbmd0aCksIEZtcDQudHlwZSgnc2R0cCcpLCBGbXA0LmV4dGVuc2lvbigwLCAwKSlcbiAgICBkYXRhLnNhbXBsZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGZsYWdzID0gaXRlbS5mbGFnc1xuICAgICAgY29uc3QgbnVtID0gKGZsYWdzLmlzTGVhZGluZyA8PCA2KSB8IC8vIGlzX2xlYWRpbmc6IDIgKGJpdClcbiAgICAgICAgKGZsYWdzLmRlcGVuZHNPbiA8PCA0KSB8IC8vIHNhbXBsZV9kZXBlbmRzX29uXG4gICAgICAgIChmbGFncy5pc0RlcGVuZGVkT24gPDwgMikgfCAvLyBzYW1wbGVfaXNfZGVwZW5kZWRfb25cbiAgICAgICAgKGZsYWdzLmhhc1JlZHVuZGFuY3kpLy8gc2FtcGxlX2hhc19yZWR1bmRhbmN5XG5cbiAgICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbbnVtXSkpXG4gICAgfSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBtZGF0IChkYXRhKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBzaXplID0gOFxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLnNpemVcbiAgICB9KVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoc2l6ZSksIEZtcDQudHlwZSgnbWRhdCcpKVxuICAgIGxldCBtZGF0Qm94ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICBsZXQgb2Zmc2V0ID0gMFxuICAgIG1kYXRCb3guc2V0KGJ1ZmZlci5idWZmZXIsIG9mZnNldClcbiAgICBvZmZzZXQgKz0gOFxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaXRlbS5idWZmZXIuZm9yRWFjaCgodW5pdCkgPT4ge1xuICAgICAgICBtZGF0Qm94LnNldCh1bml0LCBvZmZzZXQpXG4gICAgICAgIG9mZnNldCArPSB1bml0LmJ5dGVMZW5ndGhcbiAgICAgICAgLy8gYnVmZmVyLndyaXRlKHVuaXQuZGF0YSk7XG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIG1kYXRCb3hcbiAgfVxufVxuRm1wNC50eXBlID0gKG5hbWUpID0+IHtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtuYW1lLmNoYXJDb2RlQXQoMCksIG5hbWUuY2hhckNvZGVBdCgxKSwgbmFtZS5jaGFyQ29kZUF0KDIpLCBuYW1lLmNoYXJDb2RlQXQoMyldKVxufVxuRm1wNC5zZXF1ZW5jZSA9IDFcblxuZXhwb3J0IGRlZmF1bHQgRm1wNFxuIiwiaW1wb3J0IHtcbiAgRVZFTlRTLFxuICBzbmlmZmVyLFxuICBNZWRpYVNlZ21lbnRMaXN0LFxuICBCdWZmZXJcbn0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuaW1wb3J0IEZtcDQgZnJvbSAnLi9mbXA0J1xuXG5jb25zdCBSRU1VWF9FVkVOVFMgPSBFVkVOVFMuUkVNVVhfRVZFTlRTXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1wNFJlbXV4ZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5fZHRzQmFzZSA9IDBcbiAgICB0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgPSBmYWxzZVxuICAgIHRoaXMuX2F1ZGlvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl92aWRlb05leHREdHMgPSBudWxsXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50TGlzdCA9IG5ldyBNZWRpYVNlZ21lbnRMaXN0KCd2aWRlbycpXG4gICAgdGhpcy5fYXVkaW9TZWdtZW50TGlzdCA9IG5ldyBNZWRpYVNlZ21lbnRMaXN0KCdhdWRpbycpXG4gICAgY29uc3Qge2Jyb3dzZXJ9ID0gc25pZmZlclxuICAgIHRoaXMuX2ZpbGxTaWxlbmNlRnJhbWUgPSBicm93c2VyID09PSAnaWUnXG5cbiAgICB0aGlzLmlzRmlyc3RWaWRlbyA9IHRydWVcbiAgICB0aGlzLmlzRmlyc3RBdWRpbyA9IHRydWVcblxuICAgIHRoaXMudmlkZW9BbGxEdXJhdGlvbiA9IDBcbiAgICB0aGlzLmF1ZGlvQWxsRHVyYXRpb24gPSAwXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5SRU1VWF9NRURJQSwgdGhpcy5yZW11eC5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLlJFTVVYX01FVEFEQVRBLCB0aGlzLm9uTWV0YURhdGFSZWFkeS5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLkRFVEVDVF9DSEFOR0VfU1RSRUFNLCB0aGlzLnJlc2V0RHRzQmFzZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fZHRzQmFzZSA9IC0xXG4gICAgdGhpcy5fZHRzQmFzZUluaXRlZCA9IGZhbHNlXG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gbnVsbFxuICAgIHRoaXMuX2F1ZGlvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgICB0aGlzLl9hdWRpb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0ID0gbnVsbFxuICAgIHRoaXMuX2F1ZGlvU2VnbWVudExpc3QgPSBudWxsXG4gIH1cblxuICByZW11eCAoKSB7XG4gICAgY29uc3QgeyBhdWRpb1RyYWNrLCB2aWRlb1RyYWNrIH0gPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKVxuICAgICF0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgJiYgdGhpcy5jYWxjRHRzQmFzZShhdWRpb1RyYWNrLCB2aWRlb1RyYWNrKVxuXG4gICAgdGhpcy5fcmVtdXhWaWRlbyh2aWRlb1RyYWNrKVxuICAgIHRoaXMuX3JlbXV4QXVkaW8oYXVkaW9UcmFjaylcbiAgfVxuXG4gIHJlc2V0RHRzQmFzZSAoKSB7XG4gICAgLy8gZm9yIGhscyDkuK3pgJTliIfmjaIgbWV0YeWQjnNlZWtcbiAgICB0aGlzLl9kdHNCYXNlID0gMFxuICAgIHRoaXMuX2R0c0Jhc2VJbml0ZWQgPSBmYWxzZVxuICB9XG5cbiAgc2VlayAoKSB7XG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gbnVsbFxuICAgIHRoaXMuX2F1ZGlvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgICB0aGlzLl9hdWRpb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgfVxuXG4gIG9uTWV0YURhdGFSZWFkeSAodHlwZSkge1xuICAgIGxldCB0cmFja1xuXG4gICAgaWYgKHR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIGNvbnN0IHsgYXVkaW9UcmFjayB9ID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgICAgIHRyYWNrID0gYXVkaW9UcmFjaztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyB2aWRlb1RyYWNrIH0gPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKVxuICAgICAgdHJhY2sgPSB2aWRlb1RyYWNrO1xuICAgIH1cblxuICAgIGxldCBwcmVzb3VyY2VidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuZ2V0U291cmNlKHR5cGUpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuY3JlYXRlU291cmNlKHR5cGUpO1xuICAgIH1cblxuICAgIHNvdXJjZS5taW1ldHlwZSA9IHRyYWNrLm1ldGEuY29kZWM7XG4gICAgc291cmNlLmluaXQgPSB0aGlzLnJlbXV4SW5pdFNlZ21lbnQodHlwZSwgdHJhY2subWV0YSk7XG4gICAgLy8gc291cmNlLmluaXRlZCA9IGZhbHNlO1xuXG4gICAgLy8gdGhpcy5yZXNldER0c0Jhc2UoKVxuICAgIHRoaXMuZW1pdChSRU1VWF9FVkVOVFMuSU5JVF9TRUdNRU5ULCB0eXBlKVxuICB9XG5cbiAgcmVtdXhJbml0U2VnbWVudCAodHlwZSwgbWV0YSkge1xuICAgIGxldCBpbml0U2VnbWVudCA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBmdHlwID0gRm1wNC5mdHlwKClcbiAgICBsZXQgbW9vdiA9IEZtcDQubW9vdih7IHR5cGUsIG1ldGE6IG1ldGEgfSlcblxuICAgIGluaXRTZWdtZW50LndyaXRlKGZ0eXAsIG1vb3YpXG4gICAgcmV0dXJuIGluaXRTZWdtZW50O1xuICB9XG5cbiAgY2FsY0R0c0Jhc2UgKGF1ZGlvVHJhY2ssIHZpZGVvVHJhY2spIHtcbiAgICBpZiAoIWF1ZGlvVHJhY2sgJiYgdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHZpZGVvVHJhY2suc2FtcGxlc1swXS5kdHNcbiAgICB9XG5cbiAgICBpZiAoIWF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGggJiYgIXZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgYXVkaW9CYXNlID0gSW5maW5pdHlcbiAgICBsZXQgdmlkZW9CYXNlID0gSW5maW5pdHlcblxuICAgIGlmIChhdWRpb1RyYWNrLnNhbXBsZXMgJiYgYXVkaW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgYXVkaW9CYXNlID0gYXVkaW9UcmFjay5zYW1wbGVzWzBdLmR0c1xuICAgIH1cbiAgICBpZiAodmlkZW9UcmFjay5zYW1wbGVzICYmIHZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHZpZGVvQmFzZSA9IHZpZGVvVHJhY2suc2FtcGxlc1swXS5kdHNcbiAgICB9XG5cbiAgICB0aGlzLl9kdHNCYXNlID0gTWF0aC5taW4oYXVkaW9CYXNlLCB2aWRlb0Jhc2UpXG4gICAgdGhpcy5faXNEdHNCYXNlSW5pdGVkID0gdHJ1ZVxuICB9XG5cbiAgX3JlbXV4VmlkZW8gKHZpZGVvVHJhY2spIHtcbiAgICBjb25zdCB0cmFjayA9IHZpZGVvVHJhY2sgfHwge31cblxuICAgIGlmICghdmlkZW9UcmFjay5zYW1wbGVzIHx8ICF2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQge3NhbXBsZXN9ID0gdHJhY2tcbiAgICBsZXQgZmlyc3REdHMgPSAtMVxuXG4gICAgbGV0IGluaXRTZWdtZW50ID0gbnVsbFxuICAgIGNvbnN0IG1wNFNhbXBsZXMgPSBbXVxuICAgIGNvbnN0IG1kYXRCb3ggPSB7XG4gICAgICBzYW1wbGVzOiBbXVxuICAgIH1cblxuICAgIGxldCBtYXhMb29wID0gMTAwMDBcbiAgICB3aGlsZSAoc2FtcGxlcy5sZW5ndGggJiYgbWF4TG9vcC0tID4gMCkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ21hcmsyJylcbiAgICAgIGNvbnN0IGF2Y1NhbXBsZSA9IHNhbXBsZXMuc2hpZnQoKVxuXG4gICAgICBjb25zdCB7IGlzS2V5ZnJhbWUsIG9wdGlvbnMgfSA9IGF2Y1NhbXBsZVxuICAgICAgaWYgKCF0aGlzLmlzRmlyc3RBdWRpbyAmJiBvcHRpb25zICYmIG9wdGlvbnMubWV0YSkge1xuICAgICAgICBpbml0U2VnbWVudCA9IHRoaXMucmVtdXhJbml0U2VnbWVudCgndmlkZW8nLCBvcHRpb25zLm1ldGEpXG4gICAgICAgIG9wdGlvbnMubWV0YSA9IG51bGxcbiAgICAgICAgc2FtcGxlcy51bnNoaWZ0KGF2Y1NhbXBsZSlcbiAgICAgICAgaWYgKCFvcHRpb25zLmlzQ29udGludWUpIHtcbiAgICAgICAgICB0aGlzLnJlc2V0RHRzQmFzZSgpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGxldCBkdHMgPSBhdmNTYW1wbGUuZHRzIC0gdGhpcy5fZHRzQmFzZVxuXG4gICAgICBpZiAoZmlyc3REdHMgPT09IC0xKSB7XG4gICAgICAgIGZpcnN0RHRzID0gZHRzXG4gICAgICB9XG5cbiAgICAgIGxldCBjdHNcbiAgICAgIGxldCBwdHNcbiAgICAgIGlmIChhdmNTYW1wbGUucHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHRzID0gYXZjU2FtcGxlLnB0cyAtIHRoaXMuX2R0c0Jhc2VcbiAgICAgICAgY3RzID0gcHRzIC0gZHRzXG4gICAgICB9XG4gICAgICBpZiAoYXZjU2FtcGxlLmN0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHB0cyA9IGF2Y1NhbXBsZS5jdHMgKyBkdHNcbiAgICAgICAgY3RzID0gYXZjU2FtcGxlLmN0c1xuICAgICAgfVxuXG4gICAgICBsZXQgbWRhdFNhbXBsZSA9IHtcbiAgICAgICAgYnVmZmVyOiBbXSxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfVxuICAgICAgbWRhdEJveC5zYW1wbGVzLnB1c2gobWRhdFNhbXBsZSlcbiAgICAgIG1kYXRTYW1wbGUuYnVmZmVyLnB1c2goYXZjU2FtcGxlLmRhdGEpXG4gICAgICBtZGF0U2FtcGxlLnNpemUgKz0gYXZjU2FtcGxlLmRhdGEuYnl0ZUxlbmd0aFxuXG4gICAgICBsZXQgc2FtcGxlRHVyYXRpb24gPSAwXG4gICAgICBpZiAoYXZjU2FtcGxlLmR1cmF0aW9uKSB7XG4gICAgICAgIHNhbXBsZUR1cmF0aW9uID0gYXZjU2FtcGxlLmR1cmF0aW9uO1xuICAgICAgfSBlbHNlIGlmIChzYW1wbGVzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHREdHMgPSBzYW1wbGVzWzBdLmR0cyAtIHRoaXMuX2R0c0Jhc2VcbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBuZXh0RHRzIC0gZHRzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGggPj0gMSkgeyAvLyBsYXN0ZXN0IHNhbXBsZSwgdXNlIHNlY29uZCBsYXN0IGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlIG9ubHkgb25lIHNhbXBsZSwgdXNlIHJlZmVyZW5jZSBkdXJhdGlvblxuICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gdGhpcy52aWRlb01ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy52aWRlb0FsbER1cmF0aW9uICs9IHNhbXBsZUR1cmF0aW9uXG4gICAgICBjb25zb2xlLmxvZyhgdmlkZW8gZHRzICR7ZHRzfWAsIGBwdHMgJHtwdHN9YCwgaXNLZXlmcmFtZSwgYGR1cmF0aW9uICR7c2FtcGxlRHVyYXRpb259YClcbiAgICAgIG1wNFNhbXBsZXMucHVzaCh7XG4gICAgICAgIGR0cyxcbiAgICAgICAgY3RzLFxuICAgICAgICBwdHMsXG4gICAgICAgIGRhdGE6IGF2Y1NhbXBsZS5kYXRhLFxuICAgICAgICBzaXplOiBhdmNTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICBpc0tleWZyYW1lLFxuICAgICAgICBkdXJhdGlvbjogc2FtcGxlRHVyYXRpb24sXG4gICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgaXNMZWFkaW5nOiAwLFxuICAgICAgICAgIGRlcGVuZHNPbjogaXNLZXlmcmFtZSA/IDIgOiAxLFxuICAgICAgICAgIGlzRGVwZW5kZWRPbjogaXNLZXlmcmFtZSA/IDEgOiAwLFxuICAgICAgICAgIGhhc1JlZHVuZGFuY3k6IDAsXG4gICAgICAgICAgaXNOb25TeW5jOiBpc0tleWZyYW1lID8gMCA6IDFcbiAgICAgICAgfSxcbiAgICAgICAgb3JpZ2luRHRzOiBkdHMsXG4gICAgICAgIHR5cGU6ICd2aWRlbydcbiAgICAgIH0pXG5cbiAgICAgIGlmIChpc0tleWZyYW1lKSB7XG4gICAgICAgIHRoaXMuZW1pdChSRU1VWF9FVkVOVFMuUkFORE9NX0FDQ0VTU19QT0lOVCwgcHRzKVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBtb29mTWRhdCA9IG5ldyBCdWZmZXIoKVxuICAgIGlmIChtcDRTYW1wbGVzLmxlbmd0aCkge1xuICAgICAgY29uc3QgbW9vZiA9IEZtcDQubW9vZih7XG4gICAgICAgIGlkOiB0cmFjay5tZXRhLmlkLFxuICAgICAgICB0aW1lOiBmaXJzdER0cyxcbiAgICAgICAgc2FtcGxlczogbXA0U2FtcGxlc1xuICAgICAgfSlcbiAgICAgIGNvbnN0IG1kYXQgPSBGbXA0Lm1kYXQobWRhdEJveClcbiAgICAgIG1vb2ZNZGF0LndyaXRlKG1vb2YsIG1kYXQpXG5cbiAgICAgIHRoaXMud3JpdGVUb1NvdXJjZSgndmlkZW8nLCBtb29mTWRhdClcbiAgICB9XG5cbiAgICBpZiAoaW5pdFNlZ21lbnQpIHtcbiAgICAgIHRoaXMud3JpdGVUb1NvdXJjZSgndmlkZW8nLCBpbml0U2VnbWVudClcblxuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICAgIC8vIHNlY29uZCBwYXJ0IG9mIHN0cmVhbSBjaGFuZ2VcbiAgICAgICAgdHJhY2suc2FtcGxlcyA9IHNhbXBsZXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZW11eFZpZGVvKHRyYWNrKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaXNGaXJzdFZpZGVvID0gZmFsc2VcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLk1FRElBX1NFR01FTlQsICd2aWRlbycpXG5cbiAgICBjb25zdCBsYXN0U2FtcGxlID0gbXA0U2FtcGxlc1ttcDRTYW1wbGVzLmxlbmd0aCAtIDFdXG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gbGFzdFNhbXBsZS5kdHMgKyBsYXN0U2FtcGxlLmR1cmF0aW9uO1xuICAgIHRyYWNrLnNhbXBsZXMgPSBbXVxuICAgIHRyYWNrLmxlbmd0aCA9IDBcbiAgfVxuXG4gIF9yZW11eEF1ZGlvICh0cmFjaykge1xuICAgIGNvbnN0IHtzYW1wbGVzfSA9ICh0cmFjayB8fCB7fSlcbiAgICBsZXQgZmlyc3REdHMgPSAtMVxuICAgIGxldCBtcDRTYW1wbGVzID0gW11cblxuICAgIGxldCBpbml0U2VnbWVudCA9IG51bGxcbiAgICBjb25zdCBtZGF0Qm94ID0ge1xuICAgICAgc2FtcGxlczogW11cbiAgICB9XG4gICAgaWYgKCFzYW1wbGVzIHx8ICFzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IG1heExvb3AgPSAxMDAwMFxuICAgIGxldCBpc0ZpcnN0RHRzSW5pdGVkID0gZmFsc2VcbiAgICB3aGlsZSAoc2FtcGxlcy5sZW5ndGggJiYgbWF4TG9vcC0tID4gMCkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ21hcmszJylcbiAgICAgIGxldCBzYW1wbGUgPSBzYW1wbGVzLnNoaWZ0KClcbiAgICAgIGNvbnN0IHsgZGF0YSwgb3B0aW9ucyB9ID0gc2FtcGxlXG4gICAgICBpZiAoIXRoaXMuaXNGaXJzdEF1ZGlvICYmIG9wdGlvbnMgJiYgb3B0aW9ucy5tZXRhKSB7XG4gICAgICAgIGluaXRTZWdtZW50ID0gdGhpcy5yZW11eEluaXRTZWdtZW50KCdhdWRpbycsIG9wdGlvbnMubWV0YSlcbiAgICAgICAgb3B0aW9ucy5tZXRhID0gbnVsbDtcbiAgICAgICAgc2FtcGxlcy51bnNoaWZ0KHNhbXBsZSlcbiAgICAgICAgaWYgKCFvcHRpb25zLmlzQ29udGludWUpIHtcbiAgICAgICAgICB0aGlzLnJlc2V0RHRzQmFzZSgpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGxldCBkdHMgPSBzYW1wbGUuZHRzIC0gdGhpcy5fZHRzQmFzZVxuICAgICAgY29uc3Qgb3JpZ2luRHRzID0gZHRzXG4gICAgICBpZiAoIWlzRmlyc3REdHNJbml0ZWQpIHtcbiAgICAgICAgZmlyc3REdHMgPSBkdHNcbiAgICAgICAgaXNGaXJzdER0c0luaXRlZCA9IHRydWVcbiAgICAgIH1cblxuICAgICAgbGV0IHNhbXBsZUR1cmF0aW9uID0gMFxuICAgICAgaWYgKHNhbXBsZS5kdXJhdGlvbikge1xuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IHNhbXBsZS5kdXJhdGlvbjtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hdWRpb01ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCkge1xuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWRcbiAgICAgIH0gZWxzZSBpZiAoc2FtcGxlcy5sZW5ndGggPj0gMSkge1xuICAgICAgICBjb25zdCBuZXh0RHRzID0gc2FtcGxlc1swXS5kdHMgLSB0aGlzLl9kdHNCYXNlO1xuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG5leHREdHMgLSBkdHNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtcDRTYW1wbGVzLmxlbmd0aCA+PSAxKSB7IC8vIHVzZSBzZWNvbmQgbGFzdCBzYW1wbGUgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG1wNFNhbXBsZXNbbXA0U2FtcGxlcy5sZW5ndGggLSAxXS5kdXJhdGlvblxuICAgICAgICB9IGVsc2UgeyAvLyB0aGUgb25seSBvbmUgc2FtcGxlLCB1c2UgcmVmZXJlbmNlIHNhbXBsZSBkdXJhdGlvblxuICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gdGhpcy5hdWRpb01ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmxvZyhgYXVkaW8gZHRzICR7ZHRzfWAsIGBwdHMgJHtkdHN9YCwgYGR1cmF0aW9uICR7c2FtcGxlRHVyYXRpb259YClcbiAgICAgIHRoaXMuYXVkaW9BbGxEdXJhdGlvbiArPSBzYW1wbGVEdXJhdGlvblxuICAgICAgY29uc3QgbXA0U2FtcGxlID0ge1xuICAgICAgICBkdHMsXG4gICAgICAgIHB0czogZHRzLFxuICAgICAgICBjdHM6IDAsXG4gICAgICAgIHNpemU6IGRhdGEuYnl0ZUxlbmd0aCxcbiAgICAgICAgZHVyYXRpb246IHNhbXBsZS5kdXJhdGlvbiA/IHNhbXBsZS5kdXJhdGlvbiA6IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBmbGFnczoge1xuICAgICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgICBkZXBlbmRzT246IDIsXG4gICAgICAgICAgaXNEZXBlbmRlZE9uOiAxLFxuICAgICAgICAgIGhhc1JlZHVuZGFuY3k6IDAsXG4gICAgICAgICAgaXNOb25TeW5jOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGlzS2V5ZnJhbWU6IHRydWUsXG4gICAgICAgIG9yaWdpbkR0cyxcbiAgICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgICAgfVxuXG4gICAgICBsZXQgbWRhdFNhbXBsZSA9IHtcbiAgICAgICAgYnVmZmVyOiBbXSxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfVxuICAgICAgbWRhdFNhbXBsZS5idWZmZXIucHVzaChkYXRhKVxuICAgICAgbWRhdFNhbXBsZS5zaXplICs9IGRhdGEuYnl0ZUxlbmd0aFxuXG4gICAgICBtZGF0Qm94LnNhbXBsZXMucHVzaChtZGF0U2FtcGxlKVxuXG4gICAgICBtcDRTYW1wbGVzLnB1c2gobXA0U2FtcGxlKVxuICAgIH1cblxuICAgIGNvbnN0IG1vb2ZNZGF0ID0gbmV3IEJ1ZmZlcigpXG5cbiAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG1vb2YgPSBGbXA0Lm1vb2Yoe1xuICAgICAgICBpZDogdHJhY2subWV0YS5pZCxcbiAgICAgICAgdGltZTogZmlyc3REdHMsXG4gICAgICAgIHNhbXBsZXM6IG1wNFNhbXBsZXNcbiAgICAgIH0pXG4gICAgICBjb25zdCBtZGF0ID0gRm1wNC5tZGF0KG1kYXRCb3gpXG4gICAgICBtb29mTWRhdC53cml0ZShtb29mLCBtZGF0KVxuXG4gICAgICB0aGlzLndyaXRlVG9Tb3VyY2UoJ2F1ZGlvJywgbW9vZk1kYXQpXG4gICAgfVxuXG4gICAgaWYgKGluaXRTZWdtZW50KSB7XG4gICAgICB0aGlzLndyaXRlVG9Tb3VyY2UoJ2F1ZGlvJywgaW5pdFNlZ21lbnQpXG4gICAgICBpZiAoc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gc2Vjb25kIHBhcnQgb2Ygc3RyZWFtIGNoYW5nZVxuICAgICAgICB0cmFjay5zYW1wbGVzID0gc2FtcGxlcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbXV4QXVkaW8odHJhY2spXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5pc0ZpcnN0QXVkaW8gPSBmYWxzZVxuICAgIHRoaXMuZW1pdChSRU1VWF9FVkVOVFMuTUVESUFfU0VHTUVOVCwgJ2F1ZGlvJywgbW9vZk1kYXQpXG5cbiAgICBjb25zdCBsYXN0U2FtcGxlID0gbXA0U2FtcGxlc1ttcDRTYW1wbGVzLmxlbmd0aCAtIDFdXG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gbGFzdFNhbXBsZS5kdHMgKyBsYXN0U2FtcGxlLmR1cmF0aW9uO1xuICAgIHRyYWNrLnNhbXBsZXMgPSBbXVxuICAgIHRyYWNrLmxlbmd0aCA9IDBcbiAgfVxuXG4gIHdyaXRlVG9Tb3VyY2UgKHR5cGUsIGJ1ZmZlcikge1xuICAgIGxldCBwcmVzb3VyY2VidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuZ2V0U291cmNlKHR5cGUpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuY3JlYXRlU291cmNlKHR5cGUpO1xuICAgIH1cblxuICAgIHNvdXJjZS5kYXRhLnB1c2goYnVmZmVyKVxuICB9XG5cbiAgaW5pdFNpbGVudEF1ZGlvIChkdHMsIGR1cmF0aW9uKSB7XG4gICAgY29uc3QgdW5pdCA9IE1wNFJlbXV4ZXIuZ2V0U2lsZW50RnJhbWUodGhpcy5fYXVkaW9NZXRhLmNoYW5uZWxDb3VudClcbiAgICByZXR1cm4ge1xuICAgICAgZHRzLFxuICAgICAgcHRzOiBkdHMsXG4gICAgICBjdHM6IDAsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHVuaXQsXG4gICAgICBzaXplOiB1bml0LmJ5dGVMZW5ndGgsXG4gICAgICBvcmlnaW5EdHM6IGR0cyxcbiAgICAgIHR5cGU6ICd2aWRlbydcbiAgICB9XG4gIH1cblxuICBnZXQgdmlkZW9NZXRhICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJykudmlkZW9UcmFjay5tZXRhXG4gIH1cbiAgZ2V0IGF1ZGlvTWV0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpLmF1ZGlvVHJhY2subWV0YVxuICB9XG5cbiAgc3RhdGljIGdldFNpbGVudEZyYW1lIChjaGFubmVsQ291bnQpIHtcbiAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjMsIDB4ODBdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MjEsIDB4MDAsIDB4NDksIDB4OTAsIDB4MDIsIDB4MTksIDB4MDAsIDB4MjMsIDB4ODBdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAzKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4OGVdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA0KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODAsIDB4MmMsIDB4ODAsIDB4MDgsIDB4MDIsIDB4MzhdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA1KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MzhdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA2KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MDAsIDB4YjIsIDB4MDAsIDB4MjAsIDB4MDgsIDB4ZTBdKVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ29udGV4dDogcmVxdWlyZSgnLi9zcmMvY29udGV4dCcpLmRlZmF1bHQsXG5cbiAgLy8gTW9kdWxlcyBmcm9tIGNvbnN0YW50c1xuICBFVkVOVFM6IHJlcXVpcmUoJy4vc3JjL2NvbnN0YW50cy9ldmVudHMnKS5kZWZhdWx0LFxuICBXT1JLRVJfQ09NTUFORFM6IHJlcXVpcmUoJy4vc3JjL2NvbnN0YW50cy93b3JrZXItY29tbWFuZHMnKS5kZWZhdWx0LFxuXG4gIC8vIE1vZHVsZXMgZnJvbSBlbnZcbiAgc25pZmZlcjogcmVxdWlyZSgnLi9zcmMvZW52L3NuaWZmZXInKS5kZWZhdWx0LFxuICBpc0xlOiByZXF1aXJlKCcuL3NyYy9lbnYvaXNsZScpLmRlZmF1bHQsXG4gIFVURjg6IHJlcXVpcmUoJy4vc3JjL2Vudi91dGY4JykuZGVmYXVsdCxcblxuICAvLyBNb2RlbHNcbiAgTWVkaWFJbmZvOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvbWVkaWEtaW5mbycpLmRlZmF1bHQsXG4gIE1lZGlhU2FtcGxlOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvbWVkaWEtc2FtcGxlJykuZGVmYXVsdCxcbiAgTWVkaWFTZWdtZW50OiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvbWVkaWEtc2VnbWVudCcpLmRlZmF1bHQsXG4gIE1lZGlhU2VnbWVudExpc3Q6IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1zZWdtZW50LWxpc3QnKS5kZWZhdWx0LFxuICBBdWRpb1RyYWNrTWV0YTogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL3RyYWNrLW1ldGEnKS5BdWRpb1RyYWNrTWV0YSxcbiAgVmlkZW9UcmFja01ldGE6IHJlcXVpcmUoJy4vc3JjL21vZGVscy90cmFjay1tZXRhJykuVmlkZW9UcmFja01ldGEsXG4gIEF1ZGlvVHJhY2tTYW1wbGU6IHJlcXVpcmUoJy4vc3JjL21vZGVscy90cmFjay1zYW1wbGUnKS5BdWRpb1RyYWNrU2FtcGxlLFxuICBWaWRlb1RyYWNrU2FtcGxlOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvdHJhY2stc2FtcGxlJykuVmlkZW9UcmFja1NhbXBsZSxcblxuICAvLyBNb2R1bGVzIGZyb20gbXNlXG4gIE1zZTogcmVxdWlyZSgnLi9zcmMvbXNlL2luZGV4JykuZGVmYXVsdCxcblxuICAvLyBNb2R1bGVzIGZyb20gd3JpdGVcbiAgU3RyZWFtOiByZXF1aXJlKCcuL3NyYy93cml0ZS9zdHJlYW0nKS5kZWZhdWx0LFxuICBCdWZmZXI6IHJlcXVpcmUoJy4vc3JjL3dyaXRlL2J1ZmZlcicpLmRlZmF1bHQsXG5cbiAgLy8gQ3J5cHRvXG4gIENyeXB0bzogcmVxdWlyZSgnLi9zcmMvY3J5cHRvJykuZGVmYXVsdFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoUmVzdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIHRvdGFsTGVuZ3RoID0gMDtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJyYXlzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFycmF5c1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBhcnJheXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICB2YXIgYXJyID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIHRvdGFsTGVuZ3RoICs9IGFyci5sZW5ndGg7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSBuZXcgUmVzdWx0Q29uc3RydWN0b3IodG90YWxMZW5ndGgpO1xuICB2YXIgb2Zmc2V0ID0gMDtcbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IGFycmF5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgdmFyIF9hcnIgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgIHJlc3VsdC5zZXQoX2Fyciwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBfYXJyLmxlbmd0aDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jb25jYXQgPSByZXF1aXJlKCcuL2NvbmNhdCcpO1xuXG52YXIgX2NvbmNhdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb25jYXQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jb25jYXQyLmRlZmF1bHQ7IiwiY29uc3QgTE9BREVSX0VWRU5UUyA9IHtcbiAgTEFERVJfU1RBUlQ6ICdMT0FERVJfU1RBUlQnLFxuICBMT0FERVJfREFUQUxPQURFRDogJ0xPQURFUl9EQVRBTE9BREVEJyxcbiAgTE9BREVSX0NPTVBMRVRFOiAnTE9BREVSX0NPTVBMRVRFJyxcbiAgTE9BREVSX0VSUk9SOiAnTE9BREVSX0VSUk9SJ1xufVxuXG5jb25zdCBERU1VWF9FVkVOVFMgPSB7XG4gIERFTVVYX1NUQVJUOiAnREVNVVhfU1RBUlQnLFxuICBERU1VWF9DT01QTEVURTogJ0RFTVVYX0NPTVBMRVRFJyxcbiAgREVNVVhfRVJST1I6ICdERU1VWF9FUlJPUicsXG4gIE1FVEFEQVRBX1BBUlNFRDogJ01FVEFEQVRBX1BBUlNFRCcsXG4gIFZJREVPX01FVEFEQVRBX0NIQU5HRTogJ1ZJREVPX01FVEFEQVRBX0NIQU5HRScsXG4gIEFVRElPX01FVEFEQVRBX0NIQU5HRTogJ0FVRElPX01FVEFEQVRBX0NIQU5HRScsXG4gIE1FRElBX0lORk86ICdNRURJQV9JTkZPJ1xufVxuXG5jb25zdCBSRU1VWF9FVkVOVFMgPSB7XG4gIFJFTVVYX01FVEFEQVRBOiAnUkVNVVhfTUVUQURBVEEnLFxuICBSRU1VWF9NRURJQTogJ1JFTVVYX01FRElBJyxcbiAgTUVESUFfU0VHTUVOVDogJ01FRElBX1NFR01FTlQnLFxuICBSRU1VWF9FUlJPUjogJ1JFTVVYX0VSUk9SJyxcbiAgSU5JVF9TRUdNRU5UOiAnSU5JVF9TRUdNRU5UJyxcbiAgREVURUNUX0NIQU5HRV9TVFJFQU06ICdERVRFQ1RfQ0hBTkdFX1NUUkVBTScsXG4gIFJBTkRPTV9BQ0NFU1NfUE9JTlQ6ICdSQU5ET01fQUNDRVNTX1BPSU5UJ1xufVxuXG5jb25zdCBNU0VfRVZFTlRTID0ge1xuICBTT1VSQ0VfVVBEQVRFX0VORDogJ1NPVVJDRV9VUERBVEVfRU5EJ1xufVxuXG4vLyBobHPkuJPmnIlldmVudHNcbmNvbnN0IEhMU19FVkVOVFMgPSB7XG4gIFJFVFJZX1RJTUVfRVhDRUVERUQ6ICdSRVRSWV9USU1FX0VYQ0VFREVEJ1xufVxuXG5jb25zdCBDUllUT19FVkVOVFMgPSB7XG4gIFNUQVJUX0RFQ1JZUFQ6ICdTVEFSVF9ERUNSWVBUJyxcbiAgREVDUllQVEVEOiAnREVDUllQVEVEJ1xufVxuY29uc3QgQUxMRVZFTlRTID0gT2JqZWN0LmFzc2lnbih7fSwgTE9BREVSX0VWRU5UUywgREVNVVhfRVZFTlRTLCBSRU1VWF9FVkVOVFMsIE1TRV9FVkVOVFMsIEhMU19FVkVOVFMpXG5cbmNvbnN0IEZsdkFsbG93ZWRFdmVudHMgPSBbXVxuY29uc3QgSGxzQWxsb3dlZEV2ZW50cyA9IFtdXG5cbmZvciAobGV0IGtleSBpbiBBTExFVkVOVFMpIHtcbiAgaWYgKEFMTEVWRU5UUy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgRmx2QWxsb3dlZEV2ZW50cy5wdXNoKEFMTEVWRU5UU1trZXldKVxuICB9XG59XG5cbmZvciAobGV0IGtleSBpbiBBTExFVkVOVFMpIHtcbiAgaWYgKEFMTEVWRU5UUy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgSGxzQWxsb3dlZEV2ZW50cy5wdXNoKEFMTEVWRU5UU1trZXldKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgQUxMRVZFTlRTLFxuICBITFNfRVZFTlRTLFxuICBSRU1VWF9FVkVOVFMsXG4gIERFTVVYX0VWRU5UUyxcbiAgTVNFX0VWRU5UUyxcbiAgTE9BREVSX0VWRU5UUyxcbiAgRmx2QWxsb3dlZEV2ZW50cyxcbiAgSGxzQWxsb3dlZEV2ZW50cyxcbiAgQ1JZVE9fRVZFTlRTXG59O1xuIiwiZXhwb3J0IGNvbnN0IENPTlRFWFRfQ09NT01BTkRTID0ge1xuICBPTjogJ29uJyxcbiAgT05DRTogJ29uY2UnLFxuICBPRkY6ICdvZmYnLFxuICBFTUlUOiAnZW1pdCcsXG4gIERFU1RST1k6ICdkZXN0cm95J1xufVxuIiwiaW1wb3J0IE1lZGlhSW5mbyBmcm9tICcuL21vZGVscy9tZWRpYS1pbmZvJ1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJ1xuXG5jb25zdCBESVJFQ1RfRU1JVF9GTEFHID0gJ19fVE9fXydcblxuY2xhc3MgQ29udGV4dCB7XG4gIGNvbnN0cnVjdG9yIChhbGxvd2VkRXZlbnRzID0gW10pIHtcbiAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpXG4gICAgdGhpcy5faW5zdGFuY2VNYXAgPSB7fSAvLyDmiYDmnInnmoTop6PnoIHmtYHnqIvlrp7kvotcbiAgICB0aGlzLl9jbHNNYXAgPSB7fSAvLyDmnoTpgKDlh73mlbDnmoRtYXBcbiAgICB0aGlzLl9pbml0ZWQgPSBmYWxzZVxuICAgIHRoaXMubWVkaWFJbmZvID0gbmV3IE1lZGlhSW5mbygpXG4gICAgdGhpcy5hbGxvd2VkRXZlbnRzID0gYWxsb3dlZEV2ZW50c1xuICAgIHRoaXMuX2hvb2tzID0ge30gLy8g5rOo5YaM5Zyo5LqL5Lu25YmNL+WQjueahOmSqeWtkO+8jOS+i+WmgiBiZWZvcmUoJ0RFTVVYX0NPTVBMRVRFJylcbiAgICB0aGlzLl9lbWl0Q291bnRlciA9IHt9XG4gIH1cblxuICAvKipcbiAgICog5LuO5LiK5LiL5paH5Lit6I635Y+W6Kej56CB5rWB56iL5a6e5L6L77yM5aaC5p6c5rKh5pyJ5a6e5L6L77yM5p6E6YCg5LiA5LiqXG4gICAqIEBwYXJhbSB0YWdcbiAgICogQHBhcmFtIGFyZ3NcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBnZXRJbnN0YW5jZSAodGFnKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLl9pbnN0YW5jZU1hcFt0YWddXG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2VcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKGAke3RhZ33lrp7kvovlsJrmnKrliJ3lp4vljJZgKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5Yid5aeL5YyW5YW35L2T5a6e5L6LXG4gICAqIEBwYXJhbSB0YWdcbiAgICogQHBhcmFtIGFyZ3NcbiAgICovXG4gIGluaXRJbnN0YW5jZSAodGFnLCAuLi5hcmdzKSB7XG4gICAgaWYgKHRoaXMuX2Nsc01hcFt0YWddKSB7XG4gICAgICBjb25zdCBuZXdJbnN0YW5jZSA9IG5ldyB0aGlzLl9jbHNNYXBbdGFnXSguLi5hcmdzKVxuICAgICAgdGhpcy5faW5zdGFuY2VNYXBbdGFnXSA9IG5ld0luc3RhbmNlXG4gICAgICBpZiAobmV3SW5zdGFuY2UuaW5pdCkge1xuICAgICAgICBuZXdJbnN0YW5jZS5pbml0KCkgLy8gVE9ETzogbGlmZWNpcmNsZVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld0luc3RhbmNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0YWd95pyq5ZyoY29udGV4dOS4reazqOWGjGApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOmBv+WFjeWkp+mHj+eahGluaXRJbnN0YW5jZeiwg+eUqO+8jOWIneWni+WMluaJgOacieeahOe7hOS7tlxuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqL1xuICBpbml0IChjb25maWcpIHtcbiAgICBpZiAodGhpcy5faW5pdGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZm9yIChsZXQgdGFnIGluIHRoaXMuX2Nsc01hcCkge1xuICAgICAgLy8gaWYgbm90IGluaXRlZCwgaW5pdCBhbiBpbnN0YW5jZVxuICAgICAgaWYgKHRoaXMuX2Nsc01hcC5oYXNPd25Qcm9wZXJ0eSh0YWcpICYmICF0aGlzLl9pbnN0YW5jZU1hcFt0YWddKSB7XG4gICAgICAgIHRoaXMuaW5pdEluc3RhbmNlKHRhZywgY29uZmlnKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9pbml0ZWQgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICog5rOo5YaM5LiA5Liq5LiK5LiL5paH5rWB56iL77yM5o+Q5L6b5a6J5YWo55qE5LqL5Lu25Y+R6YCB5py65Yi2XG4gICAqIEBwYXJhbSB0YWdcbiAgICogQHBhcmFtIGNsc1xuICAgKi9cbiAgcmVnaXN0cnkgKHRhZywgY2xzKSB7XG4gICAgY29uc3QgZW1pdHRlciA9IHRoaXMuX2VtaXR0ZXJcbiAgICBjb25zdCBjaGVja01lc3NhZ2VOYW1lID0gdGhpcy5faXNNZXNzYWdlTmFtZVZhbGlkLmJpbmQodGhpcylcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIGNvbnN0IGVuaGFuY2VkID0gY2xhc3MgZXh0ZW5kcyBjbHMge1xuICAgICAgY29uc3RydWN0b3IgKGEsIGIsIGMpIHtcbiAgICAgICAgc3VwZXIoYSwgYiwgYylcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSB7fVxuICAgICAgICB0aGlzLm9uY2VMaXN0ZW5lcnMgPSB7fVxuICAgICAgICB0aGlzLlRBRyA9IHRhZ1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gc2VsZlxuICAgICAgfVxuXG4gICAgICBvbiAobWVzc2FnZU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG5cbiAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXSkge1xuICAgICAgICAgIHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXS5wdXNoKGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXSA9IFtjYWxsYmFja11cbiAgICAgICAgfVxuXG4gICAgICAgIGVtaXR0ZXIub24oYCR7bWVzc2FnZU5hbWV9JHtESVJFQ1RfRU1JVF9GTEFHfSR7dGFnfWAsIGNhbGxiYWNrKSAvLyDlu7rnq4vlrprlkJHpgJrkv6Hnm5HlkKxcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub24obWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIOWcqOafkOS4quS6i+S7tuinpuWPkeWJjeaJp+ihjFxuICAgICAgICogQHBhcmFtIG1lc3NhZ2VOYW1lXG4gICAgICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICAgICAqL1xuICAgICAgYmVmb3JlIChtZXNzYWdlTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcbiAgICAgICAgaWYgKHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXSkge1xuICAgICAgICAgIHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXS5wdXNoKGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXSA9IFtjYWxsYmFja11cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvbmNlIChtZXNzYWdlTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcblxuICAgICAgICBpZiAodGhpcy5vbmNlTGlzdGVuZXJzW21lc3NhZ2VOYW1lXSkge1xuICAgICAgICAgIHRoaXMub25jZUxpc3RlbmVyc1ttZXNzYWdlTmFtZV0ucHVzaChjYWxsYmFjaylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9uY2VMaXN0ZW5lcnNbbWVzc2FnZU5hbWVdID0gW2NhbGxiYWNrXVxuICAgICAgICB9XG5cbiAgICAgICAgZW1pdHRlci5vbmNlKGAke21lc3NhZ2VOYW1lfSR7RElSRUNUX0VNSVRfRkxBR30ke3RhZ31gLCBjYWxsYmFjaylcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub25jZShtZXNzYWdlTmFtZSwgY2FsbGJhY2spXG4gICAgICB9XG5cbiAgICAgIGVtaXQgKG1lc3NhZ2VOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG4gICAgICAgIGlmIChzZWxmLl9lbWl0Q291bnRlclttZXNzYWdlTmFtZV0pIHtcbiAgICAgICAgICBzZWxmLl9lbWl0Q291bnRlclttZXNzYWdlTmFtZV0gKz0gMTtcbiAgICAgICAgICBpZiAoc2VsZi5fZW1pdENvdW50ZXJbbWVzc2FnZU5hbWVdICUgMTAwMCA9PT0gMCkge1xuICAgICAgICAgICAgbGV0IGEgPSAnY29uJztcbiAgICAgICAgICAgIGxldCBiID0gJ3NvbGUnO1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAgICAgICAgIHdpbmRvd1thICsgYl0ud2FybihgaW52b2tlOiBgLCBtZXNzYWdlTmFtZSk7XG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShgeGdwbGF5ZXJfaW52b2tlXyR7bWVzc2FnZU5hbWV9YCwgc2VsZi5fZW1pdENvdW50ZXJbbWVzc2FnZU5hbWVdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLl9lbWl0Q291bnRlclttZXNzYWdlTmFtZV0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYmVmb3JlTGlzdCA9IHNlbGYuX2hvb2tzID8gc2VsZi5faG9va3NbbWVzc2FnZU5hbWVdIDogbnVsbFxuXG4gICAgICAgIGlmIChiZWZvcmVMaXN0KSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGJlZm9yZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gYmVmb3JlTGlzdFtpXVxuICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW1pdHRlci5lbWl0KG1lc3NhZ2VOYW1lLCAuLi5hcmdzKVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIOWumuWQkeWPkemAgee7meafkOS4que7hOS7tuWNleS+i+eahOa2iOaBr1xuICAgICAgICogQHBhcmFtIG1lc3NhZ2VOYW1lXG4gICAgICAgKiBAcGFyYW0gYXJnc1xuICAgICAgICovXG4gICAgICBlbWl0VG8gKHRhZywgbWVzc2FnZU5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcblxuICAgICAgICByZXR1cm4gZW1pdHRlci5lbWl0KGAke21lc3NhZ2VOYW1lfSR7RElSRUNUX0VNSVRfRkxBR30ke3RhZ31gLCAuLi5hcmdzKVxuICAgICAgfVxuXG4gICAgICBvZmYgKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuICAgICAgICByZXR1cm4gZW1pdHRlci5vZmYobWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgfVxuXG4gICAgICByZW1vdmVMaXN0ZW5lcnMgKCkge1xuICAgICAgICBjb25zdCBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmJpbmQodGhpcy5saXN0ZW5lcnMpXG5cbiAgICAgICAgZm9yIChsZXQgbWVzc2FnZU5hbWUgaW4gdGhpcy5saXN0ZW5lcnMpIHtcbiAgICAgICAgICBpZiAoaGFzT3duKG1lc3NhZ2VOYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5saXN0ZW5lcnNbbWVzc2FnZU5hbWVdIHx8IFtdXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXVxuICAgICAgICAgICAgICBlbWl0dGVyLm9mZihtZXNzYWdlTmFtZSwgY2FsbGJhY2spXG4gICAgICAgICAgICAgIGVtaXR0ZXIub2ZmKGAke21lc3NhZ2VOYW1lfSR7RElSRUNUX0VNSVRfRkxBR30ke3RhZ31gLCBjYWxsYmFjaylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBtZXNzYWdlTmFtZSBpbiB0aGlzLm9uY2VMaXN0ZW5lcnMpIHtcbiAgICAgICAgICBpZiAoaGFzT3duKG1lc3NhZ2VOYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5vbmNlTGlzdGVuZXJzW21lc3NhZ2VOYW1lXSB8fCBbXVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV1cbiAgICAgICAgICAgICAgZW1pdHRlci5vZmYobWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgICAgICAgICBlbWl0dGVyLm9mZihgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgY2FsbGJhY2spXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICog5Zyo57uE5Lu26ZSA5q+B5pe277yM6buY6K6k5bCG5a6D5rOo5YaM55qE5LqL5Lu25YWo6YOo5Y246L2977yM56Gu5L+d5LiN5Lya6YCg5oiQ5YaF5a2Y5rOE5ryPXG4gICAgICAgKi9cbiAgICAgIGRlc3Ryb3kgKCkge1xuICAgICAgICAvLyBzdGVwMSB1bmxpc3RlbiBldmVudHNcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKVxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9XG5cbiAgICAgICAgLy8gc3RlcDIgcmVsZWFzZSBmcm9tIGNvbnRleHRcbiAgICAgICAgZGVsZXRlIHNlbGYuX2luc3RhbmNlTWFwW3RhZ11cbiAgICAgICAgaWYgKHN1cGVyLmRlc3Ryb3kpIHtcbiAgICAgICAgICByZXR1cm4gc3VwZXIuZGVzdHJveSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fY2xzTWFwW3RhZ10gPSBlbmhhbmNlZFxuXG4gICAgLyoqXG4gICAgICogZ2V0IGluc3RhbmNlIGltbWVkaWF0ZWx5XG4gICAgICogZS5nIGNvbnN0IGluc3RhbmNlID0gY29udGV4dC5yZWdpc3RyeSh0YWcsIENscykoY29uZmlnKVxuICAgICAqICovXG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5pbml0SW5zdGFuY2UodGFnLCAuLi5hcmdzKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDlr7nlrZjlnKjnmoTlrp7kvovov5vooYxcbiAgICovXG4gIGRlc3Ryb3lJbnN0YW5jZXMgKCkge1xuICAgIE9iamVjdC5rZXlzKHRoaXMuX2luc3RhbmNlTWFwKS5mb3JFYWNoKCh0YWcpID0+IHtcbiAgICAgIGlmICh0aGlzLl9pbnN0YW5jZU1hcFt0YWddLmRlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VNYXBbdGFnXS5kZXN0cm95KClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIOe8luino+eggea1geeoi+aXoOmcgOWFs+azqOS6i+S7tueahOino+e7kVxuICAgKi9cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fZW1pdHRlciA9IG51bGxcbiAgICB0aGlzLmFsbG93ZWRFdmVudHMgPSBbXVxuICAgIHRoaXMuX2Nsc01hcCA9IG51bGxcbiAgICB0aGlzLl9jb250ZXh0ID0gbnVsbFxuICAgIHRoaXMuX2hvb2tzID0gbnVsbFxuICAgIHRoaXMuX2VtaXRDb3VudGVyID0ge31cbiAgICB0aGlzLmRlc3Ryb3lJbnN0YW5jZXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIOWvueS/oemBk+i/m+ihjOaUtuaLolxuICAgKiBAcGFyYW0gbWVzc2FnZU5hbWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pc01lc3NhZ2VOYW1lVmFsaWQgKG1lc3NhZ2VOYW1lKSB7XG4gICAgaWYgKCF0aGlzLmFsbG93ZWRFdmVudHMuaW5kZXhPZihtZXNzYWdlTmFtZSkgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVucmVnaXN0ZXJlZCBtZXNzYWdlIG5hbWU6ICR7bWVzc2FnZU5hbWV9YClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGV4dFxuIiwiaW1wb3J0IEVWRU5UUyBmcm9tICcuLi9jb25zdGFudHMvZXZlbnRzJztcbmNvbnN0IENSWVRPX0VWRU5UUyA9IEVWRU5UUy5DUllUT19FVkVOVFNcbmNsYXNzIENyeXB0byB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuaW5wdXRCdWZmZXIgPSBjb25maWcuaW5wdXRidWZmZXI7XG4gICAgICAgIHRoaXMub3V0cHV0QnVmZmVyID0gY29uZmlnLm91dHB1dGJ1ZmZlcjtcbiAgICAgICAgdGhpcy5rZXkgPSBjb25maWcua2V5O1xuICAgICAgICB0aGlzLml2ID0gY29uZmlnLml2O1xuICAgICAgICB0aGlzLm1ldGhvZCA9IGNvbmZpZy5tZXRob2Q7XG5cbiAgICAgICAgdGhpcy5jcnlwdG8gPSAgd2luZG93LmNyeXB0byB8fCB3aW5kb3cubXNDcnlwdG9cbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLm9uKENSWVRPX0VWRU5UUy5TVEFSVF9ERUNSWVBULCB0aGlzLmRlY3JpcHQuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIFxuICAgIGRlY3JpcHQoKSB7XG4gICAgICAgIGlmKCF0aGlzLmFlc2tleSkge1xuICAgICAgICAgICAgbGV0IHNia2V5ID0gdGhpcy5jcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgdGhpcy5rZXkuYnVmZmVyLCB7IG5hbWU6ICdBRVMtQ0JDJyB9LCBmYWxzZSwgWydlbmNyeXB0JywgJ2RlY3J5cHQnXSk7XG4gICAgICAgICAgICBzYmtleS50aGVuKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZXNrZXkgPSBrZXk7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWNyaXB0RGF0YSgpO1xuICAgICAgICAgICAgfSkgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlY3JpcHREYXRhKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWNyaXB0RGF0YSgpIHtcbiAgICAgICAgbGV0IGlucHV0YnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmlucHV0QnVmZmVyKTtcbiAgICAgICAgbGV0IG91dHB1dGJ1ZmZlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5vdXRwdXRCdWZmZXIpO1xuICAgICAgICBsZXQgZGF0YSA9IGlucHV0YnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuY3J5cHRvLnN1YnRsZS5kZWNyeXB0KHsgbmFtZTogJ0FFUy1DQkMnLCBpdjogdGhpcy5pdi5idWZmZXIgfSwgdGhpcy5hZXNrZXksIGRhdGEpLnRoZW4ocmVzPT57XG4gICAgICAgICAgICAgICAgb3V0cHV0YnVmZmVyLnB1c2gobmV3IFVpbnQ4QXJyYXkocmVzKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KENSWVRPX0VWRU5UUy5ERUNSWVBURUQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjcmlwdERhdGEoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IENyeXB0bzsiLCJjb25zdCBsZSA9IChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcigyKTtcbiAgKG5ldyBEYXRhVmlldyhidWYpKS5zZXRJbnQxNigwLCAyNTYsIHRydWUpIC8vIGxpdHRsZS1lbmRpYW4gd3JpdGVcbiAgcmV0dXJuIChuZXcgSW50MTZBcnJheShidWYpKVswXSA9PT0gMjU2IC8vIHBsYXRmb3JtLXNwZWMgcmVhZCwgaWYgZXF1YWwgdGhlbiBMRVxufSkoKVxuXG5leHBvcnQgZGVmYXVsdCBsZVxuIiwiY29uc3QgbGUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gIChuZXcgRGF0YVZpZXcoYnVmKSkuc2V0SW50MTYoMCwgMjU2LCB0cnVlKSAvLyBsaXR0bGUtZW5kaWFuIHdyaXRlXG4gIHJldHVybiAobmV3IEludDE2QXJyYXkoYnVmKSlbMF0gPT09IDI1NiAvLyBwbGF0Zm9ybS1zcGVjIHJlYWQsIGlmIGVxdWFsIHRoZW4gTEVcbn0pKClcblxuY29uc3Qgc25pZmZlciA9IHtcbiAgZ2V0IGRldmljZSAoKSB7XG4gICAgbGV0IHIgPSBzbmlmZmVyLm9zO1xuICAgIHJldHVybiByLmlzUGMgPyAncGMnIDogci5pc1RhYmxldCA/ICd0YWJsZXQnIDogJ21vYmlsZSc7XG4gIH0sXG4gIGdldCBicm93c2VyICgpIHtcbiAgICBsZXQgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IHJlZyA9IHtcbiAgICAgIGllOiAvcnY6KFtcXGQuXSspXFwpIGxpa2UgZ2Vja28vLFxuICAgICAgZmlyZm94OiAvZmlyZWZveFxcLyhbXFxkLl0rKS8sXG4gICAgICBjaHJvbWU6IC9jaHJvbWVcXC8oW1xcZC5dKykvLFxuICAgICAgb3BlcmE6IC9vcGVyYS4oW1xcZC5dKykvLFxuICAgICAgc2FmYXJpOiAvdmVyc2lvblxcLyhbXFxkLl0rKS4qc2FmYXJpL1xuICAgIH07XG4gICAgcmV0dXJuIFtdLmNvbmNhdChPYmplY3Qua2V5cyhyZWcpLmZpbHRlcihrZXkgPT4gcmVnW2tleV0udGVzdCh1YSkpKVswXTtcbiAgfSxcbiAgZ2V0IG9zICgpIHtcbiAgICBsZXQgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50XG4gICAgbGV0IGlzV2luZG93c1Bob25lID0gLyg/OldpbmRvd3MgUGhvbmUpLy50ZXN0KHVhKVxuICAgIGxldCBpc1N5bWJpYW4gPSAvKD86U3ltYmlhbk9TKS8udGVzdCh1YSkgfHwgaXNXaW5kb3dzUGhvbmU7XG4gICAgbGV0IGlzQW5kcm9pZCA9IC8oPzpBbmRyb2lkKS8udGVzdCh1YSk7XG4gICAgbGV0IGlzRmlyZUZveCA9IC8oPzpGaXJlZm94KS8udGVzdCh1YSk7XG4gICAgbGV0IGlzVGFibGV0ID0gLyg/OmlQYWR8UGxheUJvb2spLy50ZXN0KHVhKSB8fCAoaXNBbmRyb2lkICYmICEvKD86TW9iaWxlKS8udGVzdCh1YSkpIHx8IChpc0ZpcmVGb3ggJiYgLyg/OlRhYmxldCkvLnRlc3QodWEpKTtcbiAgICBsZXQgaXNQaG9uZSA9IC8oPzppUGhvbmUpLy50ZXN0KHVhKSAmJiAhaXNUYWJsZXQ7XG4gICAgbGV0IGlzUGMgPSAhaXNQaG9uZSAmJiAhaXNBbmRyb2lkICYmICFpc1N5bWJpYW47XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVGFibGV0LFxuICAgICAgaXNQaG9uZSxcbiAgICAgIGlzQW5kcm9pZCxcbiAgICAgIGlzUGMsXG4gICAgICBpc1N5bWJpYW4sXG4gICAgICBpc1dpbmRvd3NQaG9uZSxcbiAgICAgIGlzRmlyZUZveFxuICAgIH07XG4gIH0sXG5cbiAgZ2V0IGlzTGUgKCkge1xuICAgIHJldHVybiBsZVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzbmlmZmVyO1xuIiwiY2xhc3MgVVRGOCB7XG4gIHN0YXRpYyBkZWNvZGUgKHVpbnQ4YXJyYXkpIHtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBjb25zdCBpbnB1dCA9IHVpbnQ4YXJyYXk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGNvbnN0IGxlbmd0aCA9IHVpbnQ4YXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpbnB1dFtpXSA8IDB4ODApIHtcbiAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShpbnB1dFtpXSkpO1xuICAgICAgICArK2k7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4QzApIHtcbiAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEUwKSB7XG4gICAgICAgIGlmIChVVEY4Ll9jaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMSkpIHtcbiAgICAgICAgICBjb25zdCB1Y3M0ID0gKGlucHV0W2ldICYgMHgxRikgPDwgNiB8IChpbnB1dFtpICsgMV0gJiAweDNGKTtcbiAgICAgICAgICBpZiAodWNzNCA+PSAweDgwKSB7XG4gICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHVjczQgJiAweEZGRkYpKTtcbiAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RjApIHtcbiAgICAgICAgaWYgKFVURjguX2NoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAyKSkge1xuICAgICAgICAgIGNvbnN0IHVjczQgPSAoaW5wdXRbaV0gJiAweEYpIDw8IDEyIHwgKGlucHV0W2kgKyAxXSAmIDB4M0YpIDw8IDYgfCBpbnB1dFtpICsgMl0gJiAweDNGO1xuICAgICAgICAgIGlmICh1Y3M0ID49IDB4ODAwICYmICh1Y3M0ICYgMHhGODAwKSAhPT0gMHhEODAwKSB7XG4gICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHVjczQgJiAweEZGRkYpKTtcbiAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RjgpIHtcbiAgICAgICAgaWYgKFVURjguX2NoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAzKSkge1xuICAgICAgICAgIGxldCB1Y3M0ID0gKGlucHV0W2ldICYgMHg3KSA8PCAxOCB8IChpbnB1dFtpICsgMV0gJiAweDNGKSA8PCAxMiB8XG4gICAgICAgICAgICAgICAgICAgIChpbnB1dFtpICsgMl0gJiAweDNGKSA8PCA2IHwgKGlucHV0W2kgKyAzXSAmIDB4M0YpO1xuICAgICAgICAgIGlmICh1Y3M0ID4gMHgxMDAwMCAmJiB1Y3M0IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgIHVjczQgLT0gMHgxMDAwMDtcbiAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHVjczQgPj4+IDEwKSB8IDB4RDgwMCkpO1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgodWNzNCAmIDB4M0ZGKSB8IDB4REMwMCkpO1xuICAgICAgICAgICAgaSArPSA0O1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkZGRCkpO1xuICAgICAgKytpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuam9pbignJyk7XG4gIH1cblxuICBzdGF0aWMgX2NoZWNrQ29udGludWF0aW9uICh1aW50OGFycmF5LCBzdGFydCwgY2hlY2tMZW5ndGgpIHtcbiAgICBsZXQgYXJyYXkgPSB1aW50OGFycmF5O1xuICAgIGlmIChzdGFydCArIGNoZWNrTGVuZ3RoIDwgYXJyYXkubGVuZ3RoKSB7XG4gICAgICB3aGlsZSAoY2hlY2tMZW5ndGgtLSkge1xuICAgICAgICBpZiAoKGFycmF5Wysrc3RhcnRdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVURjg7XG4iLCJjb25zdCBpc09iamVjdEZpbGxlZCA9IChvYmopID0+IHtcbiAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYUluZm8ge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5taW1lVHlwZSA9IG51bGxcbiAgICB0aGlzLmR1cmF0aW9uID0gbnVsbFxuXG4gICAgdGhpcy5oYXNWaWRlbyA9IG51bGxcbiAgICB0aGlzLnZpZGVvID0ge1xuICAgICAgY29kZWM6IG51bGwsXG4gICAgICB3aWR0aDogbnVsbCxcbiAgICAgIGhlaWdodDogbnVsbCxcbiAgICAgIHByb2ZpbGU6IG51bGwsXG4gICAgICBsZXZlbDogbnVsbCxcbiAgICAgIGZyYW1lUmF0ZToge1xuICAgICAgICBmaXhlZDogdHJ1ZSxcbiAgICAgICAgZnBzOiAyNSxcbiAgICAgICAgZnBzX251bTogMjUwMDAsXG4gICAgICAgIGZwc19kZW46IDEwMDBcbiAgICAgIH0sXG4gICAgICBjaHJvbWFGb3JtYXQ6IG51bGwsXG4gICAgICBwYXJSYXRpbzoge1xuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgaGVpZ2h0OiAxXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5oYXNBdWRpbyA9IG51bGxcblxuICAgIHRoaXMuYXVkaW8gPSB7XG4gICAgICBjb2RlYzogbnVsbCxcbiAgICAgIHNhbXBsZVJhdGU6IG51bGwsXG4gICAgICBzYW1wbGVSYXRlSW5kZXg6IG51bGwsXG4gICAgICBjaGFubmVsQ291bnQ6IG51bGxcbiAgICB9XG4gIH1cblxuICBpc0NvbXBsZXRlICgpIHtcbiAgICByZXR1cm4gTWVkaWFJbmZvLmlzQmFzZUluZm9SZWFkeSh0aGlzKSAmJiBNZWRpYUluZm8uaXNWaWRlb1JlYWR5KHRoaXMpICYmIE1lZGlhSW5mby5pc0F1ZGlvUmVhZHkodGhpcylcbiAgfVxuXG4gIHN0YXRpYyBpc0Jhc2VJbmZvUmVhZHkgKG1lZGlhSW5mbykge1xuICAgIHJldHVybiBpc09iamVjdEZpbGxlZChtZWRpYUluZm8pXG4gIH1cblxuICBzdGF0aWMgaXNWaWRlb1JlYWR5IChtZWRpYUluZm8pIHtcbiAgICBpZiAoIW1lZGlhSW5mby5oYXNWaWRlbykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gaXNPYmplY3RGaWxsZWQobWVkaWFJbmZvLnZpZGVvKVxuICB9XG5cbiAgc3RhdGljIGlzQXVkaW9SZWFkeSAobWVkaWFJbmZvKSB7XG4gICAgaWYgKCFtZWRpYUluZm8uaGFzQXVkaW8pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGlzT2JqZWN0RmlsbGVkKG1lZGlhSW5mby52aWRlbylcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFTYW1wbGUge1xuICBjb25zdHJ1Y3RvciAoaW5mbykge1xuICAgIGxldCBfZGVmYXVsdCA9IE1lZGlhU2FtcGxlLmdldERlZmF1bHRJbmYoKVxuXG4gICAgaWYgKCFpbmZvIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbmZvKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIHJldHVybiBfZGVmYXVsdFxuICAgIH1cbiAgICBsZXQgc2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgX2RlZmF1bHQsIGluZm8pXG5cbiAgICBPYmplY3QuZW50cmllcyhzYW1wbGUpLmZvckVhY2goKFtrLCB2XSkgPT4ge1xuICAgICAgdGhpc1trXSA9IHZcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGdldERlZmF1bHRJbmYgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkdHM6IG51bGwsXG4gICAgICBwdHM6IG51bGwsXG4gICAgICBkdXJhdGlvbjogbnVsbCxcbiAgICAgIHBvc2l0aW9uOiBudWxsLFxuICAgICAgaXNSQVA6IGZhbHNlLCAvLyBpcyBSYW5kb20gYWNjZXNzIHBvaW50XG4gICAgICBvcmlnaW5EdHM6IG51bGxcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhU2VnbWVudExpc3Qge1xuXG4gICAgY29uc3RydWN0b3IgKHR5cGUpIHtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gLTE7IC8vIGNhY2hlZCBsYXN0IGluc2VydCBsb2NhdGlvblxuICAgIH1cblxuICAgIGdldCB0eXBlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aDtcbiAgICB9XG5cbiAgICBpc0VtcHR5ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3QubGVuZ3RoID09PSAwO1xuICAgIH1cblxuICAgIGNsZWFyICgpIHtcbiAgICAgICAgdGhpcy5fbGlzdCA9IFtdO1xuICAgICAgICB0aGlzLl9sYXN0QXBwZW5kTG9jYXRpb24gPSAtMTtcbiAgICB9XG5cbiAgICBfc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBsaXN0ID0gdGhpcy5fbGlzdDtcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhc3QgPSBsaXN0Lmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBtaWQgPSAwO1xuICAgICAgICBsZXQgbGJvdW5kID0gMDtcbiAgICAgICAgbGV0IHVib3VuZCA9IGxhc3Q7XG5cbiAgICAgICAgbGV0IGlkeCA9IDA7XG5cbiAgICAgICAgaWYgKGJlZ2luRHRzIDwgbGlzdFswXS5vcmlnaW5EdHMpIHtcbiAgICAgICAgICAgIGlkeCA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuIGlkeDtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChsYm91bmQgPD0gdWJvdW5kKSB7XG4gICAgICAgICAgICBtaWQgPSBsYm91bmQgKyBNYXRoLmZsb29yKCh1Ym91bmQgLSBsYm91bmQpIC8gMik7XG4gICAgICAgICAgICBpZiAobWlkID09PSBsYXN0IHx8IChiZWdpbkR0cyA+IGxpc3RbbWlkXS5sYXN0U2FtcGxlLm9yaWdpbkR0c1xuICAgICAgICAgICAgICAgICAgICAmJiAoYmVnaW5EdHMgPCBsaXN0W21pZCArIDFdLm9yaWdpbkR0cykpKSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gbWlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0W21pZF0ub3JpZ2luRHRzIDwgYmVnaW5EdHMpIHtcbiAgICAgICAgICAgICAgICBsYm91bmQgPSBtaWQgKyAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1Ym91bmQgPSBtaWQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuXG4gICAgX3NlYXJjaE5lYXJlc3RTZWdtZW50QWZ0ZXIgKGJlZ2luRHRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShiZWdpbkR0cykgKyAxO1xuICAgIH1cblxuICAgIGFwcGVuZCAoc2VnbWVudCkge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuX2xpc3Q7XG4gICAgICAgIGxldCBsYXN0QXBwZW5kSWR4ID0gdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uO1xuICAgICAgICBsZXQgaW5zZXJ0SWR4ID0gMDtcblxuICAgICAgICBpZiAobGFzdEFwcGVuZElkeCAhPT0gLTEgJiYgbGFzdEFwcGVuZElkeCA8IGxpc3QubGVuZ3RoXG4gICAgICAgICAgICAmJiBzZWdtZW50Lm9yaWdpblN0YXJ0RHRzID49IGxpc3RbbGFzdEFwcGVuZElkeF0ubGFzdFNhbXBsZS5vcmlnaW5EdHNcbiAgICAgICAgICAgICYmICgobGFzdEFwcGVuZElkeCA9PT0gbGlzdC5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICAgIHx8IChsYXN0QXBwZW5kSWR4IDwgbGlzdC5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgICYmIHNlZ21lbnQub3JpZ2luU3RhcnREdHMgPCBsaXN0W2xhc3RBcHBlbmRJZHggKyAxXS5vcmlnaW5TdGFydER0cykpKSB7XG4gICAgICAgICAgICBpbnNlcnRJZHggPSBsYXN0QXBwZW5kSWR4ICsgMTsgLy8gdXNlIGNhY2hlZCBsb2NhdGlvbiBpZHhcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRJZHggPSB0aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShzZWdtZW50Lm9yaWdpblN0YXJ0RHRzKSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sYXN0QXBwZW5kTG9jYXRpb24gPSBpbnNlcnRJZHg7XG4gICAgICAgIHRoaXMuX2xpc3Quc3BsaWNlKGluc2VydElkeCwgMCwgc2VnbWVudCk7XG4gICAgfVxuXG4gICAgZ2V0TGFzdFNlZ21lbnRCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBpZHggPSB0aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShiZWdpbkR0cyk7XG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RbaWR4XTtcbiAgICAgICAgfSBlbHNlIHsgLy8gLTFcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0TGFzdFNhbXBsZUJlZm9yZSAoYmVnaW5EdHMpIHtcbiAgICAgICAgbGV0IHNlZ21lbnQgPSB0aGlzLmdldExhc3RTZWdtZW50QmVmb3JlKGJlZ2luRHRzKTtcbiAgICAgICAgaWYgKHNlZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWdtZW50Lmxhc3RTYW1wbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldExhc3RSQVBCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBzZWdtZW50SWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpO1xuICAgICAgICBsZXQgcmFuZG9tQWNjZXNzUG9pbnRzID0gdGhpcy5fbGlzdFtzZWdtZW50SWR4XS5yYW5kb21BY2Nlc3NQb2ludHM7XG4gICAgICAgIHdoaWxlIChyYW5kb21BY2Nlc3NQb2ludHMubGVuZ3RoID09PSAwICYmIHNlZ21lbnRJZHggPiAwKSB7XG4gICAgICAgICAgICBzZWdtZW50SWR4LS07XG4gICAgICAgICAgICByYW5kb21BY2Nlc3NQb2ludHMgPSB0aGlzLl9saXN0W3NlZ21lbnRJZHhdLnJhbmRvbUFjY2Vzc1BvaW50cztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiByYW5kb21BY2Nlc3NQb2ludHNbcmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYVNlZ21lbnQge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5zdGFydER0cyA9IC0xO1xuICAgICAgICB0aGlzLmVuZER0cyA9IC0xO1xuICAgICAgICB0aGlzLnN0YXJ0UHRzID0gLTE7XG4gICAgICAgIHRoaXMuZW5kUHRzID0gLTE7XG4gICAgICAgIHRoaXMub3JpZ2luU3RhcnREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5vcmlnaW5FbmREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5yYW5kb21BY2Nlc3NQb2ludHMgPSBbXTtcbiAgICAgICAgdGhpcy5maXJzdFNhbXBsZSA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdFNhbXBsZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYWRkUkFQIChzYW1wbGUpIHtcbiAgICAgICAgc2FtcGxlLmlzUkFQID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yYW5kb21BY2Nlc3NQb2ludHMucHVzaChzYW1wbGUpO1xuICAgIH1cbn0iLCJleHBvcnQgY2xhc3MgQXVkaW9UcmFja01ldGEge1xuICBjb25zdHJ1Y3RvciAobWV0YSkge1xuICAgIGNvbnN0IF9kZWZhdWx0ID0ge1xuICAgICAgc2FtcGxlUmF0ZTogNDgwMDAsXG4gICAgICBjaGFubmVsQ291bnQ6IDIsXG4gICAgICBjb2RlYzogJ21wNGEuNDAuMicsXG4gICAgICBjb25maWc6IFs0MSwgNDAxLCAxMzYsIDBdLFxuICAgICAgZHVyYXRpb246IDAsXG4gICAgICBpZDogMixcbiAgICAgIHJlZlNhbXBsZUR1cmF0aW9uOiAyMSxcbiAgICAgIHNhbXBsZVJhdGVJbmRleDogMyxcbiAgICAgIHRpbWVzY2FsZTogMTAwMCxcbiAgICAgIHR5cGU6ICdhdWRpbydcbiAgICB9XG4gICAgaWYgKG1ldGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgbWV0YSlcbiAgICB9XG4gICAgcmV0dXJuIF9kZWZhdWx0XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLmluaXQgPSBudWxsXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZpZGVvVHJhY2tNZXRhIHtcbiAgY29uc3RydWN0b3IgKG1ldGEpIHtcbiAgICBjb25zdCBfZGVmYXVsdCA9IHtcbiAgICAgIGF2Y2M6IG51bGwsXG4gICAgICBzcHM6IG5ldyBVaW50OEFycmF5KDApLFxuICAgICAgcHBzOiBuZXcgVWludDhBcnJheSgwKSxcbiAgICAgIGNocm9tYUZvcm1hdDogNDIwLFxuICAgICAgY29kZWM6ICdhdmMxLjY0MDAyMCcsXG4gICAgICBjb2RlY0hlaWdodDogNzIwLFxuICAgICAgY29kZWNXaWR0aDogMTI4MCxcbiAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgZnJhbWVSYXRlOiB7XG4gICAgICAgIGZpeGVkOiB0cnVlLFxuICAgICAgICBmcHM6IDI1LFxuICAgICAgICBmcHNfbnVtOiAyNTAwMCxcbiAgICAgICAgZnBzX2RlbjogMTAwMFxuICAgICAgfSxcbiAgICAgIGlkOiAxLFxuICAgICAgbGV2ZWw6ICczLjInLFxuICAgICAgcHJlc2VudEhlaWdodDogNzIwLFxuICAgICAgcHJlc2VudFdpZHRoOiAxMjgwLFxuICAgICAgcHJvZmlsZTogJ0hpZ2gnLFxuICAgICAgcmVmU2FtcGxlRHVyYXRpb246IDQwLFxuICAgICAgcGFyUmF0aW86IHtcbiAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICB3aWR0aDogMVxuICAgICAgfSxcbiAgICAgIHRpbWVzY2FsZTogMTAwMCxcbiAgICAgIHR5cGU6ICd2aWRlbydcbiAgICB9XG5cbiAgICBpZiAobWV0YSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBtZXRhKVxuICAgIH1cbiAgICByZXR1cm4gX2RlZmF1bHRcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuaW5pdCA9IG51bGxcbiAgICB0aGlzLnNwcyA9IG51bGxcbiAgICB0aGlzLnBwcyA9IG51bGxcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tTYW1wbGUge1xuICBjb25zdHJ1Y3RvciAoaW5mbykge1xuICAgIGxldCBfZGVmYXVsdCA9IEF1ZGlvVHJhY2tTYW1wbGUuZ2V0RGVmYXVsdCgpXG4gICAgaWYgKCFpbmZvKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRcbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBpbmZvKVxuXG4gICAgcmV0dXJuIHNhbXBsZVxuICB9XG5cbiAgc3RhdGljIGdldERlZmF1bHQgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkdHM6IG51bGwsXG4gICAgICBwdHM6IG51bGwsXG4gICAgICBkYXRhOiBuZXcgVWludDhBcnJheSgpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBWaWRlb1RyYWNrU2FtcGxlLmdldERlZmF1bHQoKVxuXG4gICAgaWYgKCFpbmZvKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRcbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBpbmZvKVxuXG4gICAgcmV0dXJuIHNhbXBsZVxuICB9XG5cbiAgc3RhdGljIGdldERlZmF1bHQgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkdHM6IG51bGwsXG4gICAgICBwdHM6IG51bGwsXG4gICAgICBpc0tleWZyYW1lOiBmYWxzZSwgLy8gaXMgUmFuZG9tIGFjY2VzcyBwb2ludFxuICAgICAgb3JpZ2luRHRzOiBudWxsLFxuICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoKVxuICAgIH1cbiAgfVxufVxuIiwiY2xhc3MgTVNFIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZ3MpIHtcbiAgICB0aGlzLmNvbmZpZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWdzKTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuY29uZmlncy5jb250YWluZXI7XG4gICAgdGhpcy5tZWRpYVNvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5zb3VyY2VCdWZmZXJzID0ge307XG4gICAgdGhpcy5wcmVsb2FkVGltZSA9IHRoaXMuY29uZmlncy5wcmVsb2FkVGltZSB8fCAxO1xuICAgIHRoaXMub25Tb3VyY2VPcGVuID0gdGhpcy5vblNvdXJjZU9wZW4uYmluZCh0aGlzKVxuICAgIHRoaXMub25UaW1lVXBkYXRlID0gdGhpcy5vblRpbWVVcGRhdGUuYmluZCh0aGlzKVxuICAgIHRoaXMub25VcGRhdGVFbmQgPSB0aGlzLm9uVXBkYXRlRW5kLmJpbmQodGhpcylcbiAgICB0aGlzLm9uV2FpdGluZyA9IHRoaXMub25XYWl0aW5nLmJpbmQodGhpcylcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHRoaXMubWVkaWFTb3VyY2UgPSBuZXcgc2VsZi5NZWRpYVNvdXJjZSgpO1xuICAgIHRoaXMubWVkaWFTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMub25Tb3VyY2VPcGVuKTtcbiAgICB0aGlzLmNvbnRhaW5lci5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHRoaXMubWVkaWFTb3VyY2UpO1xuICAgIHRoaXMudXJsID0gdGhpcy5jb250YWluZXIuc3JjO1xuICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCB0aGlzLm9uVGltZVVwZGF0ZSk7XG4gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIHRoaXMub25XYWl0aW5nKTtcbiAgfVxuXG4gIG9uVGltZVVwZGF0ZSAoKSB7XG4gICAgdGhpcy5lbWl0KCdUSU1FX1VQREFURScsIHRoaXMuY29udGFpbmVyKTtcbiAgfVxuXG4gIG9uV2FpdGluZyAoKSB7XG4gICAgdGhpcy5lbWl0KCdXQUlUSU5HJywgdGhpcy5jb250YWluZXIpO1xuICB9XG5cbiAgb25Tb3VyY2VPcGVuICgpIHtcbiAgICB0aGlzLmFkZFNvdXJjZUJ1ZmZlcnMoKTtcbiAgfVxuXG4gIG9uVXBkYXRlRW5kICgpIHtcbiAgICB0aGlzLmVtaXQoJ1NPVVJDRV9VUERBVEVfRU5EJyk7XG4gICAgdGhpcy5kb0FwcGVuZCgpXG4gIH1cbiAgYWRkU291cmNlQnVmZmVycyAoKSB7XG4gICAgaWYgKHRoaXMubWVkaWFTb3VyY2UucmVhZHlTdGF0ZSAhPT0gJ29wZW4nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzb3VyY2VzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgdHJhY2tzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJyk7XG4gICAgbGV0IHRyYWNrO1xuXG4gICAgc291cmNlcyA9IHNvdXJjZXMuc291cmNlcztcbiAgICBsZXQgYWRkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDAsIGsgPSBPYmplY3Qua2V5cyhzb3VyY2VzKS5sZW5ndGg7IGkgPCBrOyBpKyspIHtcbiAgICAgIGxldCB0eXBlID0gT2JqZWN0LmtleXMoc291cmNlcylbaV07XG4gICAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICB0cmFjayA9IHRyYWNrcy5hdWRpb1RyYWNrO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgIHRyYWNrID0gdHJhY2tzLnZpZGVvVHJhY2s7XG4gICAgICAgIC8vIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFjaykge1xuICAgICAgICBsZXQgZHVyID0gdHlwZSA9PT0gJ2F1ZGlvJyA/IDIxIDogNDA7XG4gICAgICAgIGlmICh0cmFjay5tZXRhICYmIHRyYWNrLm1ldGEucmVmU2FtcGxlRHVyYXRpb24pIGR1ciA9IHRyYWNrLm1ldGEucmVmU2FtcGxlRHVyYXRpb247XG4gICAgICAgIGlmIChzb3VyY2VzW3R5cGVdLmRhdGEubGVuZ3RoID49ICh0aGlzLnByZWxvYWRUaW1lIC8gZHVyKSkge1xuICAgICAgICAgIGFkZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWRkKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwLCBrID0gT2JqZWN0LmtleXMoc291cmNlcykubGVuZ3RoOyBpIDwgazsgaSsrKSB7XG4gICAgICAgIGxldCB0eXBlID0gT2JqZWN0LmtleXMoc291cmNlcylbaV07XG4gICAgICAgIGxldCBzb3VyY2UgPSBzb3VyY2VzW3R5cGVdXG4gICAgICAgIGxldCBtaW1lID0gKHR5cGUgPT09ICd2aWRlbycpID8gJ3ZpZGVvL21wNDtjb2RlY3M9JyArIHNvdXJjZS5taW1ldHlwZSA6ICdhdWRpby9tcDQ7Y29kZWNzPScgKyBzb3VyY2UubWltZXR5cGVcbiAgICAgICAgbGV0IHNvdXJjZUJ1ZmZlciA9IHRoaXMubWVkaWFTb3VyY2UuYWRkU291cmNlQnVmZmVyKG1pbWUpO1xuICAgICAgICB0aGlzLnNvdXJjZUJ1ZmZlcnNbdHlwZV0gPSBzb3VyY2VCdWZmZXI7XG4gICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCB0aGlzLm9uVXBkYXRlRW5kKTtcbiAgICAgICAgdGhpcy5kb0FwcGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRvQXBwZW5kICgpIHtcbiAgICBsZXQgc291cmNlcyA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1BSRV9TT1VSQ0VfQlVGRkVSJyk7XG4gICAgaWYgKHNvdXJjZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdHlwZSA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1cbiAgICAgICAgbGV0IHNvdXJjZUJ1ZmZlciA9IHRoaXMuc291cmNlQnVmZmVyc1t0eXBlXTtcbiAgICAgICAgaWYgKCFzb3VyY2VCdWZmZXIudXBkYXRpbmcpIHtcbiAgICAgICAgICBsZXQgc291cmNlID0gc291cmNlcy5zb3VyY2VzW3R5cGVdO1xuICAgICAgICAgIGlmIChzb3VyY2UgJiYgIXNvdXJjZS5pbml0ZWQpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhcHBlbmQgaW5pdGlhbCBzZWdtZW50JylcbiAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hcHBlbmRCdWZmZXIoc291cmNlLmluaXQuYnVmZmVyLmJ1ZmZlcik7XG4gICAgICAgICAgICBzb3VyY2UuaW5pdGVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBzb3VyY2UuZGF0YS5zaGlmdCgpXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYXBwZW5kQnVmZmVyKGRhdGEuYnVmZmVyLmJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZW5kT2ZTdHJlYW0gKCkge1xuICAgIGNvbnN0IHsgcmVhZHlTdGF0ZSwgYWN0aXZlU291cmNlQnVmZmVycyB9ID0gdGhpcy5tZWRpYVNvdXJjZTtcbiAgICBpZiAocmVhZHlTdGF0ZSA9PT0gJ29wZW4nICYmIGFjdGl2ZVNvdXJjZUJ1ZmZlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLm1lZGlhU291cmNlLmVuZE9mU3RyZWFtKClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbG9nXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlIChlbmQsIHN0YXJ0ID0gMCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGJ1ZmZlciA9IHRoaXMuc291cmNlQnVmZmVyc1tPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpW2ldXTtcbiAgICAgIGlmICghYnVmZmVyLnVwZGF0aW5nKSB7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3JlbW92ZScsIHN0YXJ0LCBlbmQpXG4gICAgICAgIGJ1ZmZlci5yZW1vdmUoc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlbW92ZUJ1ZmZlcnMgKCkge1xuICAgIGNvbnN0IHRhc2tMaXN0ID0gW11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBidWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXV07XG4gICAgICBidWZmZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgdGhpcy5vblVwZGF0ZUVuZCk7XG5cbiAgICAgIGxldCB0YXNrO1xuICAgICAgaWYgKGJ1ZmZlci51cGRhdGluZykge1xuICAgICAgICB0YXNrID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICBjb25zdCBkb0NsZWFuQnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IHJldHJ5VGltZSA9IDNcblxuICAgICAgICAgICAgY29uc3QgY2xlYW4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghYnVmZmVyLnVwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgTVNFLmNsZWFyQnVmZmVyKGJ1ZmZlcilcbiAgICAgICAgICAgICAgICBidWZmZXIuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocmV0cnlUaW1lID4gMCl7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChjbGVhbiwgMjAwKVxuICAgICAgICAgICAgICAgIHJldHJ5VGltZS0tXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0VGltZW91dChjbGVhbiwgMjAwKVxuICAgICAgICAgICAgYnVmZmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWVuZCcsIGRvQ2xlYW5CdWZmZXIpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlci5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCBkb0NsZWFuQnVmZmVyKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFzayA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgTVNFLmNsZWFyQnVmZmVyKGJ1ZmZlcilcbiAgICAgICAgICBidWZmZXIuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICAvLyB0YXNrID0gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIH1cblxuICAgICAgdGFza0xpc3QucHVzaCh0YXNrKVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbCh0YXNrTGlzdClcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHJldHVybiB0aGlzLnJlbW92ZUJ1ZmZlcnMoKS50aGVuKCgpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgYnVmZmVyID0gdGhpcy5zb3VyY2VCdWZmZXJzW09iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1dO1xuICAgICAgICB0aGlzLm1lZGlhU291cmNlLnJlbW92ZVNvdXJjZUJ1ZmZlcihidWZmZXIpO1xuICAgICAgICBkZWxldGUgdGhpcy5zb3VyY2VCdWZmZXJzW09iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1dO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgdGhpcy5vblRpbWVVcGRhdGUpO1xuICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIHRoaXMub25XYWl0aW5nKTtcbiAgICAgIHRoaXMubWVkaWFTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMub25Tb3VyY2VPcGVuKTtcblxuICAgICAgdGhpcy5lbmRPZlN0cmVhbSgpXG4gICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLnVybCk7XG5cbiAgICAgIHRoaXMudXJsID0gbnVsbFxuICAgICAgdGhpcy5jb25maWdzID0ge307XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XG4gICAgICB0aGlzLm1lZGlhU291cmNlID0gbnVsbDtcbiAgICAgIHRoaXMuc291cmNlQnVmZmVycyA9IHt9O1xuICAgICAgdGhpcy5wcmVsb2FkVGltZSA9IDE7XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBjbGVhckJ1ZmZlciAoYnVmZmVyKSB7XG4gICAgY29uc3QgYnVmZmVyZWQgPSBidWZmZXIuYnVmZmVyZWQ7XG4gICAgbGV0IGJFbmQgPSAwLjFcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYnVmZmVyZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGJFbmQgPSBidWZmZXJlZC5lbmQoaSlcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGJ1ZmZlci5yZW1vdmUoMCwgYkVuZClcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBETyBOT1RISU5HXG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBNU0U7XG4iLCJpbXBvcnQgQ29uY2F0IGZyb20gJ2NvbmNhdC10eXBlZC1hcnJheSdcblxuY2xhc3MgQnVmZmVyIHtcbiAgY29uc3RydWN0b3IgKGJ1ZmZlcikge1xuICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyIHx8IG5ldyBVaW50OEFycmF5KDApXG4gIH1cblxuICB3cml0ZSAoLi4uYnVmZmVyKSB7XG4gICAgYnVmZmVyLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IENvbmNhdChVaW50OEFycmF5LCB0aGlzLmJ1ZmZlciwgaXRlbSlcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIHdyaXRlVWludDMyICh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXG4gICAgICB2YWx1ZSA+PiAyNCxcbiAgICAgICh2YWx1ZSA+PiAxNikgJiAweGZmLFxuICAgICAgKHZhbHVlID4+IDgpICYgMHhmZixcbiAgICAgIHZhbHVlICYgMHhmZlxuICAgIF0pXG4gIH1cblxuICBzdGF0aWMgcmVhZEFzSW50IChhcnIpIHtcbiAgICBsZXQgdGVtcCA9ICcnXG5cbiAgICBmdW5jdGlvbiBwYWRTdGFydDRIZXggKGhleE51bSkge1xuICAgICAgbGV0IGhleFN0ciA9IGhleE51bS50b1N0cmluZygxNilcbiAgICAgIHJldHVybiBoZXhTdHIucGFkU3RhcnQoMiwgJzAnKVxuICAgIH1cblxuICAgIGFyci5mb3JFYWNoKG51bSA9PiB7XG4gICAgICB0ZW1wICs9IHBhZFN0YXJ0NEhleChudW0pXG4gICAgfSlcbiAgICByZXR1cm4gcGFyc2VJbnQodGVtcCwgMTYpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnVmZmVyXG4iLCJjbGFzcyBTdHJlYW0ge1xuICBjb25zdHJ1Y3RvciAoYnVmZmVyKSB7XG4gICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgIHRoaXMuZGF0YXZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICAgIHRoaXMuZGF0YXZpZXcucG9zaXRpb24gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBsZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgc2V0IHBvc2l0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuZGF0YXZpZXcucG9zaXRpb24gPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBwb3NpdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YXZpZXcucG9zaXRpb247XG4gIH1cblxuICBiYWNrIChjb3VudCkge1xuICAgIHRoaXMucG9zaXRpb24gLT0gY291bnQ7XG4gIH1cblxuICBza2lwIChjb3VudCkge1xuICAgIGxldCBsb29wID0gTWF0aC5mbG9vcihjb3VudCAvIDQpO1xuICAgIGxldCBsYXN0ID0gY291bnQgJSA0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcDsgaSsrKSB7XG4gICAgICBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgNCk7XG4gICAgfVxuICAgIGlmIChsYXN0ID4gMCkge1xuICAgICAgU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIGxhc3QpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbcmVhZEJ5dGUg5LuORGF0YVZpZXfkuK3or7vlj5bmlbDmja5dXG4gICAqIEBwYXJhbSAge0RhdGFWaWV3fSBidWZmZXIgW0RhdGFWaWV35a6e5L6LXVxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHNpemUgICBb6K+75Y+W5a2X6IqC5pWwXVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICBb5pW05pWwXVxuICAgKi9cbiAgc3RhdGljIHJlYWRCeXRlIChidWZmZXIsIHNpemUsIHNpZ24pIHtcbiAgICBsZXQgcmVzO1xuICAgIHN3aXRjaCAoc2l6ZSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRJbnQ4KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQ4KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGlmIChzaWduKSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldEludDE2KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQxNihidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnRlZCBmb3IgcmVhZEJ5dGUgMycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50OChidWZmZXIucG9zaXRpb24pIDw8IDE2O1xuICAgICAgICAgIHJlcyB8PSBidWZmZXIuZ2V0VWludDgoYnVmZmVyLnBvc2l0aW9uICsgMSkgPDwgODtcbiAgICAgICAgICByZXMgfD0gYnVmZmVyLmdldFVpbnQ4KGJ1ZmZlci5wb3NpdGlvbiArIDIpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRJbnQzMihidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50MzIoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgaWYgKHNpZ24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBzdXBwb3J0ZWQgZm9yIHJlYWRCb2R5IDgnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0VWludDMyKGJ1ZmZlci5wb3NpdGlvbikgPDwgMzI7XG4gICAgICAgICAgcmVzIHw9IGJ1ZmZlci5nZXRVaW50MzIoYnVmZmVyLnBvc2l0aW9uICsgNCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXMgPSAnJztcbiAgICB9XG4gICAgYnVmZmVyLnBvc2l0aW9uICs9IHNpemU7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIHJlYWRVaW50OCAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAxKTtcbiAgfVxuXG4gIHJlYWRVaW50MTYgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMik7XG4gIH1cblxuICByZWFkVWludDI0ICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDMpO1xuICB9XG5cbiAgcmVhZFVpbnQzMiAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCA0KTtcbiAgfVxuXG4gIHJlYWRVaW50NjQgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgOCk7XG4gIH1cblxuICByZWFkSW50OCAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAxLCB0cnVlKTtcbiAgfVxuICByZWFkSW50MTYgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMiwgdHJ1ZSk7XG4gIH1cblxuICByZWFkSW50MzIgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgNCwgdHJ1ZSk7XG4gIH1cblxuICB3cml0ZVVpbnQzMiAodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgdmFsdWUgPj4+IDI0ICYgMHhmZixcbiAgICAgIHZhbHVlID4+PiAxNiAmIDB4ZmYsXG4gICAgICB2YWx1ZSA+Pj4gOCAmIDB4ZmYsXG4gICAgICB2YWx1ZSAmIDB4ZmZcbiAgICBdKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdHJlYW07XG4iLCJpbXBvcnQgUmVtdXhlciBmcm9tICd4Z3BsYXllci1yZW11eCdcbmltcG9ydCB7IEZldGNoTG9hZGVyIH0gZnJvbSAneGdwbGF5ZXItbG9hZGVyJ1xuaW1wb3J0IHsgRmx2RGVtdXhlciB9IGZyb20gJ3hncGxheWVyLWRlbXV4J1xuaW1wb3J0IHsgVHJhY2tzLCBYZ0J1ZmZlciwgUHJlU291cmNlIH0gZnJvbSAneGdwbGF5ZXItYnVmZmVyJ1xuaW1wb3J0IHsgTXNlLCBFVkVOVFMgfSBmcm9tICd4Z3BsYXllci11dGlscydcbmltcG9ydCB7IENvbXBhdGliaWxpdHkgfSBmcm9tICd4Z3BsYXllci1jb2RlYydcbmltcG9ydCBQbGF5ZXIgZnJvbSAneGdwbGF5ZXInXG5cbmNvbnN0IFJFTVVYX0VWRU5UUyA9IEVWRU5UUy5SRU1VWF9FVkVOVFM7XG5jb25zdCBERU1VWF9FVkVOVFMgPSBFVkVOVFMuREVNVVhfRVZFTlRTO1xuY29uc3QgTE9BREVSX0VWRU5UUyA9IEVWRU5UUy5MT0FERVJfRVZFTlRTXG5jb25zdCBNU0VfRVZFTlRTID0gRVZFTlRTLk1TRV9FVkVOVFNcblxuY29uc3QgVGFnID0gJ0ZMVkNvbnRyb2xsZXInXG5cbmNsYXNzIExvZ2dlciB7XG4gIHdhcm4gKCkge31cbn1cblxuY29uc3QgRkxWX0VSUk9SID0gJ0ZMVl9FUlJPUidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmx2Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yIChwbGF5ZXIpIHtcbiAgICB0aGlzLlRBRyA9IFRhZ1xuICAgIHRoaXMuX3BsYXllciA9IHBsYXllclxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGluaXRTZWdtZW50QXJyaXZlZDogZmFsc2UsXG4gICAgICByYW5kb21BY2Nlc3NQb2ludHM6IFtdXG4gICAgfVxuXG4gICAgdGhpcy5idWZmZXJDbGVhclRpbWVyID0gbnVsbDtcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0ZFVENIX0xPQURFUicsIEZldGNoTG9hZGVyKVxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0xPQURFUl9CVUZGRVInLCBYZ0J1ZmZlcilcblxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0ZMVl9ERU1VWEVSJywgRmx2RGVtdXhlcilcbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdUUkFDS1MnLCBUcmFja3MpXG5cbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdNUDRfUkVNVVhFUicsIFJlbXV4ZXIuTXA0UmVtdXhlcilcbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdQUkVfU09VUkNFX0JVRkZFUicsIFByZVNvdXJjZSlcblxuICAgIGlmICh0aGlzLl9wbGF5ZXIuY29uZmlnLmNvbXBhdGliaWxpdHkgIT09IGZhbHNlKSB7XG4gICAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdDT01QQVRJQklMSVRZJywgQ29tcGF0aWJpbGl0eSlcbiAgICB9XG5cbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdMT0dHRVInLCBMb2dnZXIpXG4gICAgdGhpcy5tc2UgPSB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdNU0UnLCBNc2UpKHsgY29udGFpbmVyOiB0aGlzLl9wbGF5ZXIudmlkZW8gfSlcblxuICAgIHRoaXMuX2hhbmRsZVRpbWVVcGRhdGUgPSB0aGlzLl9oYW5kbGVUaW1lVXBkYXRlLmJpbmQodGhpcylcblxuICAgIHRoaXMuaW5pdExpc3RlbmVycygpXG4gIH1cblxuICBpbml0TGlzdGVuZXJzICgpIHtcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTE9BREVSX0RBVEFMT0FERUQsIHRoaXMuX2hhbmRsZUxvYWRlckRhdGFMb2FkZWQuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCB0aGlzLl9oYW5kbGVOZXR3b3JrRXJyb3IuYmluZCh0aGlzKSlcblxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLk1FRElBX0lORk8sIHRoaXMuX2hhbmRsZU1lZGlhSW5mby5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgdGhpcy5faGFuZGxlTWV0YWRhdGFQYXJzZWQuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSwgdGhpcy5faGFuZGxlRGVtdXhDb21wbGV0ZS5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLl9oYW5kbGVEZW11eEVycm9yLmJpbmQodGhpcykpXG5cbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5JTklUX1NFR01FTlQsIHRoaXMuX2hhbmRsZUFwcGVuZEluaXRTZWdtZW50LmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihSRU1VWF9FVkVOVFMuTUVESUFfU0VHTUVOVCwgdGhpcy5faGFuZGxlTWVkaWFTZWdtZW50LmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihSRU1VWF9FVkVOVFMuUkFORE9NX0FDQ0VTU19QT0lOVCwgdGhpcy5faGFuZGxlQWRkUkFQLmJpbmQodGhpcykpXG5cbiAgICB0aGlzLm9uKE1TRV9FVkVOVFMuU09VUkNFX1VQREFURV9FTkQsIHRoaXMuX2hhbmRsZVNvdXJjZVVwZGF0ZUVuZC5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5fcGxheWVyLm9uKCd0aW1ldXBkYXRlJywgdGhpcy5faGFuZGxlVGltZVVwZGF0ZSlcbiAgfVxuXG4gIF9oYW5kbGVNZWRpYUluZm8gKCkge1xuICAgIGlmICghdGhpcy5fY29udGV4dC5tZWRpYUluZm8pIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIG5ldyBFcnJvcignZmFpbGVkIHRvIGdldCBtZWRpYWluZm8nKSlcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlTG9hZGVyRGF0YUxvYWRlZCAoKSB7XG4gICAgdGhpcy5lbWl0VG8oJ0ZMVl9ERU1VWEVSJywgREVNVVhfRVZFTlRTLkRFTVVYX1NUQVJUKVxuICB9XG5cbiAgX2hhbmRsZU1ldGFkYXRhUGFyc2VkICh0eXBlKSB7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5SRU1VWF9NRVRBREFUQSwgdHlwZSlcbiAgfVxuICBfaGFuZGxlRGVtdXhDb21wbGV0ZSAoKSB7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5SRU1VWF9NRURJQSlcbiAgfVxuXG4gIF9oYW5kbGVBcHBlbmRJbml0U2VnbWVudCAoKSB7XG4gICAgdGhpcy5zdGF0ZS5pbml0U2VnbWVudEFycml2ZWQgPSB0cnVlXG4gICAgdGhpcy5tc2UuYWRkU291cmNlQnVmZmVycygpXG4gIH1cblxuICBfaGFuZGxlTWVkaWFTZWdtZW50ICgpIHtcbiAgICB0aGlzLm1zZS5hZGRTb3VyY2VCdWZmZXJzKClcbiAgICB0aGlzLm1zZS5kb0FwcGVuZCgpO1xuICB9XG5cbiAgX2hhbmRsZVNvdXJjZVVwZGF0ZUVuZCAoKSB7XG4gICAgY29uc3QgdGltZSA9IHRoaXMuX3BsYXllci5jdXJyZW50VGltZTtcbiAgICBjb25zdCB2aWRlbyA9IHRoaXMuX3BsYXllci52aWRlbztcbiAgICBjb25zdCBwcmVsb2FkVGltZSA9IHRoaXMuX3BsYXllci5jb25maWcucHJlbG9hZFRpbWUgfHwgNVxuXG4gICAgY29uc3QgeyBsZW5ndGggfSA9IHZpZGVvLmJ1ZmZlcmVkO1xuXG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGJ1ZmZlckVuZCA9IHZpZGVvLmJ1ZmZlcmVkLmVuZChsZW5ndGggLSAxKTtcbiAgICBpZiAoYnVmZmVyRW5kIC0gdGltZSA+IHByZWxvYWRUaW1lICogMikge1xuICAgICAgdGhpcy5fcGxheWVyLmN1cnJlbnRUaW1lID0gYnVmZmVyRW5kIC0gcHJlbG9hZFRpbWVcbiAgICB9XG4gICAgdGhpcy5tc2UuZG9BcHBlbmQoKTtcbiAgfVxuXG4gIF9oYW5kbGVUaW1lVXBkYXRlICgpIHtcbiAgICBjb25zdCB0aW1lID0gdGhpcy5fcGxheWVyLmN1cnJlbnRUaW1lXG5cbiAgICBjb25zdCB2aWRlbyA9IHRoaXMuX3BsYXllci52aWRlbztcbiAgICBsZXQgYnVmZmVyZWQgPSB2aWRlby5idWZmZXJlZFxuXG4gICAgaWYgKCFidWZmZXJlZCB8fCAhYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHJhbmdlID0gWzAsIDBdXG4gICAgbGV0IGN1cnJlbnRUaW1lID0gdmlkZW8uY3VycmVudFRpbWVcbiAgICBpZiAoYnVmZmVyZWQpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBidWZmZXJlZC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICByYW5nZVswXSA9IGJ1ZmZlcmVkLnN0YXJ0KGkpXG4gICAgICAgIHJhbmdlWzFdID0gYnVmZmVyZWQuZW5kKGkpXG4gICAgICAgIGlmIChyYW5nZVswXSA8PSBjdXJyZW50VGltZSAmJiBjdXJyZW50VGltZSA8PSByYW5nZVsxXSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXJTdGFydCA9IHJhbmdlWzBdXG4gICAgY29uc3QgYnVmZmVyRW5kID0gcmFuZ2VbMV1cblxuICAgIGlmIChjdXJyZW50VGltZSA+IGJ1ZmZlckVuZCB8fCBjdXJyZW50VGltZSA8IGJ1ZmZlclN0YXJ0KSB7XG4gICAgICB2aWRlby5jdXJyZW50VGltZSA9IGJ1ZmZlclN0YXJ0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aW1lIC0gYnVmZmVyU3RhcnQgPiAxMCB8fCBidWZmZXJlZC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyDlnKjnm7Tmkq3ml7blj4rml7bmuIXnqbpidWZmZXLvvIzpmY3kvY7nm7Tmkq3lhoXlrZjljaDnlKhcbiAgICAgIGlmICh0aGlzLmJ1ZmZlckNsZWFyVGltZXIgfHwgIXRoaXMuc3RhdGUucmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgcmFwID0gSW5maW5pdHk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGUucmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRlbXAgPSBNYXRoLmNlaWwodGhpcy5zdGF0ZS5yYW5kb21BY2Nlc3NQb2ludHNbaV0gLyAxMDAwKVxuICAgICAgICBpZiAodGVtcCA+IHRpbWUgLSAxMCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhcCA9IHRlbXA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gY29uc29sZS5sb2coJ3JhcCcsIHJhcCwgYHRpbWUgJHt0aW1lfWAsIGBidWZmZXJFbmQgJHtidWZmZXJFbmR9YCxgY2xlYW4gJHtNYXRoLm1pbihyYXAsIHRpbWUgLSAxMCwgYnVmZmVyRW5kIC0gMTApfWApXG4gICAgICB0aGlzLm1zZS5yZW1vdmUoTWF0aC5taW4ocmFwLCB0aW1lIC0gMTAsIGJ1ZmZlckVuZCAtIDEwLCAwLjEpLCAwKVxuXG4gICAgICB0aGlzLmJ1ZmZlckNsZWFyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5idWZmZXJDbGVhclRpbWVyID0gbnVsbFxuICAgICAgfSwgNTAwMClcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlTmV0d29ya0Vycm9yICh0YWcsIGVycikge1xuICAgIHRoaXMuX3BsYXllci5lbWl0KCdlcnJvcicsIG5ldyBQbGF5ZXIuRXJyb3JzKCduZXR3b3JrJywgdGhpcy5fcGxheWVyLmNvbmZpZy51cmwpKVxuICAgIHRoaXMuX29uRXJyb3IoTE9BREVSX0VWRU5UUy5MT0FERVJfRVJST1IsIHRhZywgZXJyLCB0cnVlKVxuICB9XG5cbiAgX2hhbmRsZURlbXV4RXJyb3IgKHRhZywgZXJyLCBmYXRhbCkge1xuICAgIGlmIChmYXRhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmYXRhbCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLl9wbGF5ZXIuZW1pdCgnZXJyb3InLCBuZXcgUGxheWVyLkVycm9ycygncGFyc2UnLCB0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCkpXG4gICAgdGhpcy5fb25FcnJvcihMT0FERVJfRVZFTlRTLkxPQURFUl9FUlJPUiwgdGFnLCBlcnIsIGZhdGFsKVxuICB9XG5cbiAgX2hhbmRsZUFkZFJBUCAocmFwKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUucmFuZG9tQWNjZXNzUG9pbnRzKSB7XG4gICAgICB0aGlzLnN0YXRlLnJhbmRvbUFjY2Vzc1BvaW50cy5wdXNoKHJhcClcbiAgICB9XG4gIH1cblxuICBfb25FcnJvciAodHlwZSwgbW9kLCBlcnIsIGZhdGFsKSB7XG4gICAgbGV0IGVycm9yID0ge1xuICAgICAgZXJyb3JUeXBlOiB0eXBlLFxuICAgICAgZXJyb3JEZXRhaWxzOiBgWyR7bW9kfV06ICR7ZXJyLm1lc3NhZ2V9YCxcbiAgICAgIGVycm9yRmF0YWw6IGZhdGFsIHx8IGZhbHNlXG4gICAgfVxuICAgIHRoaXMuX3BsYXllci5lbWl0KEZMVl9FUlJPUiwgZXJyb3IpO1xuICB9XG5cbiAgc2VlayAoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmluaXRTZWdtZW50QXJyaXZlZCkge1xuICAgICAgdGhpcy5sb2FkRGF0YSgpXG4gICAgfVxuICB9XG5cbiAgbG9hZERhdGEgKCkge1xuICAgIHRoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxBREVSX1NUQVJULCB0aGlzLl9wbGF5ZXIuY29uZmlnLnVybClcbiAgfVxuXG4gIHBhdXNlICgpIHtcbiAgICBjb25zdCBsb2FkZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdGRVRDSF9MT0FERVInKVxuXG4gICAgaWYgKGxvYWRlcikge1xuICAgICAgbG9hZGVyLmNhbmNlbCgpXG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fcGxheWVyLm9mZigndGltZXVwZGF0ZScsIHRoaXMuX2hhbmRsZVRpbWVVcGRhdGUpXG4gICAgdGhpcy5fcGxheWVyID0gbnVsbFxuICAgIHRoaXMubXNlID0gbnVsbFxuICAgIHRoaXMuc3RhdGUucmFuZG9tQWNjZXNzUG9pbnRzID0gW11cbiAgfVxufVxuIiwiaW1wb3J0IFBsYXllciBmcm9tICd4Z3BsYXllcidcbmltcG9ydCB7IENvbnRleHQsIEVWRU5UUyB9IGZyb20gJ3hncGxheWVyLXV0aWxzJztcbmltcG9ydCBGTFYgZnJvbSAnLi9mbHYtbGl2ZSdcbmNvbnN0IGZsdkFsbG93ZWRFdmVudHMgPSBFVkVOVFMuRmx2QWxsb3dlZEV2ZW50cztcblxuY2xhc3MgRmx2UGxheWVyIGV4dGVuZHMgUGxheWVyIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZylcbiAgICB0aGlzLmNvbnRleHQgPSBuZXcgQ29udGV4dChmbHZBbGxvd2VkRXZlbnRzKVxuICAgIHRoaXMuaW5pdEV2ZW50cygpXG4gICAgdGhpcy5sb2FkZXJDb21wbGV0ZVRpbWVyID0gbnVsbFxuICAgIC8vIGNvbnN0IHByZWxvYWRUaW1lID0gcGxheWVyLmNvbmZpZy5wcmVsb2FkVGltZSB8fCAxNVxuICB9XG5cbiAgc3RhcnQgKCkge1xuICAgIHRoaXMuaW5pdEZsdigpXG4gICAgdGhpcy5jb250ZXh0LmluaXQoKVxuICAgIHN1cGVyLnN0YXJ0KHRoaXMuZmx2Lm1zZS51cmwpXG4gIH1cblxuICBpbml0Rmx2RXZlbnRzIChmbHYpIHtcbiAgICBjb25zdCBwbGF5ZXIgPSB0aGlzO1xuICAgIGZsdi5vbmNlKEVWRU5UUy5SRU1VWF9FVkVOVFMuSU5JVF9TRUdNRU5ULCAoKSA9PiB7XG4gICAgICBQbGF5ZXIudXRpbC5hZGRDbGFzcyhwbGF5ZXIucm9vdCwgJ3hncGxheWVyLWlzLWxpdmUnKVxuICAgICAgaWYgKCFQbGF5ZXIudXRpbC5maW5kRG9tKHRoaXMucm9vdCwgJ3hnLWxpdmUnKSkge1xuICAgICAgICBjb25zdCBsaXZlID0gUGxheWVyLnV0aWwuY3JlYXRlRG9tKCd4Zy1saXZlJywgJ+ato+WcqOebtOaSrScsIHt9LCAneGdwbGF5ZXItbGl2ZScpXG4gICAgICAgIHBsYXllci5jb250cm9scy5hcHBlbmRDaGlsZChsaXZlKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBmbHYub25jZShFVkVOVFMuTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsICgpID0+IHtcbiAgICAgIC8vIOebtOaSreWujOaIkO+8jOW+heaSreaUvuWZqOaSreWujOe8k+WtmOWQjuWPkemAgeWFs+mXreS6i+S7tlxuICAgICAgaWYgKCFwbGF5ZXIucGF1c2VkKSB7XG4gICAgICAgIHRoaXMubG9hZGVyQ29tcGxldGVUaW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBlbmQgPSBwbGF5ZXIuZ2V0QnVmZmVyZWRSYW5nZSgpWzFdXG4gICAgICAgICAgaWYgKE1hdGguYWJzKHBsYXllci5jdXJyZW50VGltZSAtIGVuZCkgPCAwLjUpIHtcbiAgICAgICAgICAgIHBsYXllci5lbWl0KCdlbmRlZCcpXG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmxvYWRlckNvbXBsZXRlVGltZXIpXG4gICAgICAgICAgfVxuICAgICAgICB9LCAyMDApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwbGF5ZXIuZW1pdCgnZW5kZWQnKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBpbml0RXZlbnRzICgpIHtcbiAgICB0aGlzLm9uKCd0aW1ldXBkYXRlJywgKCkgPT4ge1xuICAgICAgdGhpcy5sb2FkRGF0YSgpXG4gICAgfSlcblxuICAgIHRoaXMub24oJ3NlZWtpbmcnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0aW1lID0gdGhpcy5jdXJyZW50VGltZVxuICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldEJ1ZmZlcmVkUmFuZ2UoKVxuICAgICAgaWYgKHRpbWUgPiByYW5nZVsxXSB8fCB0aW1lIDwgcmFuZ2VbMF0pIHtcbiAgICAgICAgdGhpcy5mbHYuc2Vlayh0aGlzLmN1cnJlbnRUaW1lKVxuICAgICAgfVxuICAgIH0pXG5cbiAgfVxuXG4gIGluaXRGbHYgKCkge1xuICAgIGNvbnN0IGZsdiA9IHRoaXMuY29udGV4dC5yZWdpc3RyeSgnRkxWX0NPTlRST0xMRVInLCBGTFYpKHRoaXMpXG4gICAgdGhpcy5pbml0Rmx2RXZlbnRzKGZsdilcbiAgICB0aGlzLmZsdiA9IGZsdlxuICB9XG5cbiAgcGxheSAoKSB7XG4gICAgaWYgKHRoaXMuX2hhc1N0YXJ0KSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVzdHJveSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBuZXcgQ29udGV4dChmbHZBbGxvd2VkRXZlbnRzKVxuICAgICAgICBjb25zdCBmbHYgPSB0aGlzLmNvbnRleHQucmVnaXN0cnkoJ0ZMVl9DT05UUk9MTEVSJywgRkxWKSh0aGlzKVxuICAgICAgICB0aGlzLmluaXRGbHZFdmVudHMoZmx2KVxuICAgICAgICB0aGlzLmZsdiA9IGZsdlxuICAgICAgICB0aGlzLmNvbnRleHQuaW5pdCgpXG4gICAgICAgIHN1cGVyLnN0YXJ0KGZsdi5tc2UudXJsKVxuICAgICAgICByZXR1cm4gc3VwZXIucGxheSgpXG4gICAgICB9KVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdXBlci5wbGF5KClcbiAgICB9XG4gIH1cblxuICBwYXVzZSAoKSB7XG4gICAgc3VwZXIucGF1c2UoKVxuICAgIGlmICh0aGlzLmZsdikge1xuICAgICAgdGhpcy5mbHYucGF1c2UoKVxuICAgIH1cbiAgfVxuXG4gIGxvYWREYXRhICh0aW1lID0gdGhpcy5jdXJyZW50VGltZSkge1xuICAgIGlmICh0aGlzLmZsdikge1xuICAgICAgdGhpcy5mbHYuc2Vlayh0aW1lKVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2Rlc3Ryb3koKS50aGVuKCgpID0+IHtcbiAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9KVxuICB9XG5cbiAgX2Rlc3Ryb3kgKCkge1xuICAgIHJldHVybiB0aGlzLmZsdi5tc2UuZGVzdHJveSgpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5jb250ZXh0LmRlc3Ryb3koKVxuICAgICAgdGhpcy5mbHYgPSBudWxsXG4gICAgICB0aGlzLmNvbnRleHQgPSBudWxsXG4gICAgICBpZiAodGhpcy5sb2FkZXJDb21wbGV0ZVRpbWVyKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMubG9hZGVyQ29tcGxldGVUaW1lcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZ2V0IHNyYyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFNyY1xuICB9XG5cbiAgc2V0IHNyYyAodXJsKSB7XG4gICAgdGhpcy5wbGF5ZXIuY29uZmlnLnVybCA9IHVybFxuICAgIGlmICghdGhpcy5wYXVzZWQpIHtcbiAgICAgIHRoaXMucGF1c2UoKVxuICAgICAgdGhpcy5vbmNlKCdwYXVzZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5zdGFydCh1cmwpXG4gICAgICB9KVxuICAgICAgdGhpcy5vbmNlKCdjYW5wbGF5JywgKCkgPT4ge1xuICAgICAgICB0aGlzLnBsYXkoKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydCh1cmwpXG4gICAgfVxuICAgIHRoaXMub25jZSgnY2FucGxheScsICgpID0+IHtcbiAgICAgIHRoaXMuY3VycmVudFRpbWUgPSAwXG4gICAgfSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZsdlBsYXllclxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3hncGxheWVyX187IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dChyZXF1aXJlKFwieGdwbGF5ZXJcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wieGdwbGF5ZXJcIl0sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0c1tcInhncGxheWVyLWZsdlwiXT10KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk6ZVtcInhncGxheWVyLWZsdlwiXT10KGUueGdwbGF5ZXIpfSh3aW5kb3csKGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBpKHMpe2lmKHRbc10pcmV0dXJuIHRbc10uZXhwb3J0czt2YXIgcj10W3NdPXtpOnMsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtzXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyxpKSxyLmw9ITAsci5leHBvcnRzfXJldHVybiBpLm09ZSxpLmM9dCxpLmQ9ZnVuY3Rpb24oZSx0LHMpe2kubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDpzfSl9LGkucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxpLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPWkoZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHM9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihpLnIocyksT2JqZWN0LmRlZmluZVByb3BlcnR5KHMsXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciByIGluIGUpaS5kKHMscixmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLHIpKTtyZXR1cm4gc30saS5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBpLmQodCxcImFcIix0KSx0fSxpLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LGkucD1cIlwiLGkoaS5zPTExKX0oW2Z1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9e0NvbnRleHQ6aSgxMykuZGVmYXVsdCxFVkVOVFM6aSg0KS5kZWZhdWx0LFdPUktFUl9DT01NQU5EUzppKDE1KS5kZWZhdWx0LHNuaWZmZXI6aSgxNikuZGVmYXVsdCxpc0xlOmkoMTcpLmRlZmF1bHQsVVRGODppKDE4KS5kZWZhdWx0LE1lZGlhSW5mbzppKDMpLmRlZmF1bHQsTWVkaWFTYW1wbGU6aSgxOSkuZGVmYXVsdCxNZWRpYVNlZ21lbnQ6aSgyMCkuZGVmYXVsdCxNZWRpYVNlZ21lbnRMaXN0OmkoMjEpLmRlZmF1bHQsQXVkaW9UcmFja01ldGE6aSg1KS5BdWRpb1RyYWNrTWV0YSxWaWRlb1RyYWNrTWV0YTppKDUpLlZpZGVvVHJhY2tNZXRhLEF1ZGlvVHJhY2tTYW1wbGU6aSg2KS5BdWRpb1RyYWNrU2FtcGxlLFZpZGVvVHJhY2tTYW1wbGU6aSg2KS5WaWRlb1RyYWNrU2FtcGxlLE1zZTppKDIyKS5kZWZhdWx0LFN0cmVhbTppKDIzKS5kZWZhdWx0LEJ1ZmZlcjppKDI0KS5kZWZhdWx0LENyeXB0bzppKDI3KS5kZWZhdWx0fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NsYXNzIHN7Y29uc3RydWN0b3IoKXt0aGlzLmlkPS0xLHRoaXMuc2VxdWVuY2VOdW1iZXI9MCx0aGlzLnNhbXBsZXM9W10sdGhpcy5kcm9wcGVkU2FtcGxlcz1bXSx0aGlzLmxlbmd0aD0wfXJlc2V0KCl7dGhpcy5zZXF1ZW5jZU51bWJlcj0wLHRoaXMuc2FtcGxlcz1bXSx0aGlzLmxlbmd0aD0wfWRpc3Ryb3koKXt0aGlzLnJlc2V0KCksdGhpcy5pZD0tMX19dC5kZWZhdWx0PXM7dC5BdWRpb1RyYWNrPWNsYXNzIGV4dGVuZHMgc3tjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5UQUc9XCJBdWRpb1RyYWNrXCIsdGhpcy50eXBlPVwiYXVkaW9cIn19O3QuVmlkZW9UcmFjaz1jbGFzcyBleHRlbmRzIHN7Y29uc3RydWN0b3IoKXtzdXBlcigpLHRoaXMuVEFHPVwiVmlkZW9UcmFja1wiLHRoaXMudHlwZT1cInZpZGVvXCIsdGhpcy5kcm9wcGVkPTB9cmVzZXQoKXt0aGlzLnNlcXVlbmNlTnVtYmVyPTAsdGhpcy5zYW1wbGVzPVtdLHRoaXMubGVuZ3RoPTAsdGhpcy5kcm9wcGVkPTB9fTt0LlRyYWNrcz1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMuYXVkaW9UcmFjaz1udWxsLHRoaXMudmlkZW9UcmFjaz1udWxsfWRlc3Ryb3koKXt0aGlzLmF1ZGlvVHJhY2s9bnVsbCx0aGlzLnZpZGVvVHJhY2s9bnVsbH19fSxmdW5jdGlvbih0LGkpe3QuZXhwb3J0cz1lfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgcz1lPT57Zm9yKGxldCB0IGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eSh0KSYmbnVsbD09PWVbdF0pcmV0dXJuITE7cmV0dXJuITB9O2NsYXNzIHJ7Y29uc3RydWN0b3IoKXt0aGlzLm1pbWVUeXBlPW51bGwsdGhpcy5kdXJhdGlvbj1udWxsLHRoaXMuaGFzVmlkZW89bnVsbCx0aGlzLnZpZGVvPXtjb2RlYzpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJvZmlsZTpudWxsLGxldmVsOm51bGwsZnJhbWVSYXRlOntmaXhlZDohMCxmcHM6MjUsZnBzX251bToyNWUzLGZwc19kZW46MWUzfSxjaHJvbWFGb3JtYXQ6bnVsbCxwYXJSYXRpbzp7d2lkdGg6MSxoZWlnaHQ6MX19LHRoaXMuaGFzQXVkaW89bnVsbCx0aGlzLmF1ZGlvPXtjb2RlYzpudWxsLHNhbXBsZVJhdGU6bnVsbCxzYW1wbGVSYXRlSW5kZXg6bnVsbCxjaGFubmVsQ291bnQ6bnVsbH19aXNDb21wbGV0ZSgpe3JldHVybiByLmlzQmFzZUluZm9SZWFkeSh0aGlzKSYmci5pc1ZpZGVvUmVhZHkodGhpcykmJnIuaXNBdWRpb1JlYWR5KHRoaXMpfXN0YXRpYyBpc0Jhc2VJbmZvUmVhZHkoZSl7cmV0dXJuIHMoZSl9c3RhdGljIGlzVmlkZW9SZWFkeShlKXtyZXR1cm4hZS5oYXNWaWRlb3x8cyhlLnZpZGVvKX1zdGF0aWMgaXNBdWRpb1JlYWR5KGUpe3JldHVybiFlLmhhc0F1ZGlvfHxzKGUudmlkZW8pfX10LmRlZmF1bHQ9cn0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IHM9e0xBREVSX1NUQVJUOlwiTE9BREVSX1NUQVJUXCIsTE9BREVSX0RBVEFMT0FERUQ6XCJMT0FERVJfREFUQUxPQURFRFwiLExPQURFUl9DT01QTEVURTpcIkxPQURFUl9DT01QTEVURVwiLExPQURFUl9FUlJPUjpcIkxPQURFUl9FUlJPUlwifSxyPXtERU1VWF9TVEFSVDpcIkRFTVVYX1NUQVJUXCIsREVNVVhfQ09NUExFVEU6XCJERU1VWF9DT01QTEVURVwiLERFTVVYX0VSUk9SOlwiREVNVVhfRVJST1JcIixNRVRBREFUQV9QQVJTRUQ6XCJNRVRBREFUQV9QQVJTRURcIixWSURFT19NRVRBREFUQV9DSEFOR0U6XCJWSURFT19NRVRBREFUQV9DSEFOR0VcIixBVURJT19NRVRBREFUQV9DSEFOR0U6XCJBVURJT19NRVRBREFUQV9DSEFOR0VcIixNRURJQV9JTkZPOlwiTUVESUFfSU5GT1wifSxhPXtSRU1VWF9NRVRBREFUQTpcIlJFTVVYX01FVEFEQVRBXCIsUkVNVVhfTUVESUE6XCJSRU1VWF9NRURJQVwiLE1FRElBX1NFR01FTlQ6XCJNRURJQV9TRUdNRU5UXCIsUkVNVVhfRVJST1I6XCJSRU1VWF9FUlJPUlwiLElOSVRfU0VHTUVOVDpcIklOSVRfU0VHTUVOVFwiLERFVEVDVF9DSEFOR0VfU1RSRUFNOlwiREVURUNUX0NIQU5HRV9TVFJFQU1cIixSQU5ET01fQUNDRVNTX1BPSU5UOlwiUkFORE9NX0FDQ0VTU19QT0lOVFwifSxuPXtTT1VSQ0VfVVBEQVRFX0VORDpcIlNPVVJDRV9VUERBVEVfRU5EXCJ9LG89e1JFVFJZX1RJTUVfRVhDRUVERUQ6XCJSRVRSWV9USU1FX0VYQ0VFREVEXCJ9LGQ9T2JqZWN0LmFzc2lnbih7fSxzLHIsYSxuLG8pLGw9W10saD1bXTtmb3IobGV0IGUgaW4gZClkLmhhc093blByb3BlcnR5KGUpJiZsLnB1c2goZFtlXSk7Zm9yKGxldCBlIGluIGQpZC5oYXNPd25Qcm9wZXJ0eShlKSYmaC5wdXNoKGRbZV0pO3QuZGVmYXVsdD17QUxMRVZFTlRTOmQsSExTX0VWRU5UUzpvLFJFTVVYX0VWRU5UUzphLERFTVVYX0VWRU5UUzpyLE1TRV9FVkVOVFM6bixMT0FERVJfRVZFTlRTOnMsRmx2QWxsb3dlZEV2ZW50czpsLEhsc0FsbG93ZWRFdmVudHM6aCxDUllUT19FVkVOVFM6e1NUQVJUX0RFQ1JZUFQ6XCJTVEFSVF9ERUNSWVBUXCIsREVDUllQVEVEOlwiREVDUllQVEVEXCJ9fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3QuQXVkaW9UcmFja01ldGE9Y2xhc3N7Y29uc3RydWN0b3IoZSl7Y29uc3QgdD17c2FtcGxlUmF0ZTo0OGUzLGNoYW5uZWxDb3VudDoyLGNvZGVjOlwibXA0YS40MC4yXCIsY29uZmlnOls0MSw0MDEsMTM2LDBdLGR1cmF0aW9uOjAsaWQ6MixyZWZTYW1wbGVEdXJhdGlvbjoyMSxzYW1wbGVSYXRlSW5kZXg6Myx0aW1lc2NhbGU6MWUzLHR5cGU6XCJhdWRpb1wifTtyZXR1cm4gZT9PYmplY3QuYXNzaWduKHt9LHQsZSk6dH1kZXN0cm95KCl7dGhpcy5pbml0PW51bGx9fTt0LlZpZGVvVHJhY2tNZXRhPWNsYXNze2NvbnN0cnVjdG9yKGUpe2NvbnN0IHQ9e2F2Y2M6bnVsbCxzcHM6bmV3IFVpbnQ4QXJyYXkoMCkscHBzOm5ldyBVaW50OEFycmF5KDApLGNocm9tYUZvcm1hdDo0MjAsY29kZWM6XCJhdmMxLjY0MDAyMFwiLGNvZGVjSGVpZ2h0OjcyMCxjb2RlY1dpZHRoOjEyODAsZHVyYXRpb246MCxmcmFtZVJhdGU6e2ZpeGVkOiEwLGZwczoyNSxmcHNfbnVtOjI1ZTMsZnBzX2RlbjoxZTN9LGlkOjEsbGV2ZWw6XCIzLjJcIixwcmVzZW50SGVpZ2h0OjcyMCxwcmVzZW50V2lkdGg6MTI4MCxwcm9maWxlOlwiSGlnaFwiLHJlZlNhbXBsZUR1cmF0aW9uOjQwLHBhclJhdGlvOntoZWlnaHQ6MSx3aWR0aDoxfSx0aW1lc2NhbGU6MWUzLHR5cGU6XCJ2aWRlb1wifTtyZXR1cm4gZT9PYmplY3QuYXNzaWduKHt9LHQsZSk6dH1kZXN0cm95KCl7dGhpcy5pbml0PW51bGwsdGhpcy5zcHM9bnVsbCx0aGlzLnBwcz1udWxsfX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjbGFzcyBze2NvbnN0cnVjdG9yKGUpe2xldCB0PXMuZ2V0RGVmYXVsdCgpO3JldHVybiBlP09iamVjdC5hc3NpZ24oe30sdCxlKTp0fXN0YXRpYyBnZXREZWZhdWx0KCl7cmV0dXJue2R0czpudWxsLHB0czpudWxsLGRhdGE6bmV3IFVpbnQ4QXJyYXl9fX10LkF1ZGlvVHJhY2tTYW1wbGU9cztjbGFzcyBye2NvbnN0cnVjdG9yKGUpe2xldCB0PXIuZ2V0RGVmYXVsdCgpO3JldHVybiBlP09iamVjdC5hc3NpZ24oe30sdCxlKTp0fXN0YXRpYyBnZXREZWZhdWx0KCl7cmV0dXJue2R0czpudWxsLHB0czpudWxsLGlzS2V5ZnJhbWU6ITEsb3JpZ2luRHRzOm51bGwsZGF0YTpuZXcgVWludDhBcnJheX19fXQuVmlkZW9UcmFja1NhbXBsZT1yfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXtOYWx1bml0OmkoMzApLmRlZmF1bHQsU3BzUGFyc2VyOmkoOCkuZGVmYXVsdCxDb21wYXRpYmlsaXR5OmkoMzIpLmRlZmF1bHR9fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHMscj1pKDMxKSxhPShzPXIpJiZzLl9fZXNNb2R1bGU/czp7ZGVmYXVsdDpzfTtjbGFzcyBue3N0YXRpYyBfZWJzcDJyYnNwKGUpe2xldCB0PWUsaT10LmJ5dGVMZW5ndGgscz1uZXcgVWludDhBcnJheShpKSxyPTA7Zm9yKGxldCBlPTA7ZTxpO2UrKyllPj0yJiYzPT09dFtlXSYmMD09PXRbZS0xXSYmMD09PXRbZS0yXXx8KHNbcl09dFtlXSxyKyspO3JldHVybiBuZXcgVWludDhBcnJheShzLmJ1ZmZlciwwLHIpfXN0YXRpYyBwYXJzZVNQUyhlKXtsZXQgdD1uLl9lYnNwMnJic3AoZSksaT1uZXcgYS5kZWZhdWx0KHQpO2kucmVhZEJ5dGUoKTtsZXQgcz1pLnJlYWRCeXRlKCk7aS5yZWFkQnl0ZSgpO2xldCByPWkucmVhZEJ5dGUoKTtpLnJlYWRVRUcoKTtsZXQgbz1uLmdldFByb2ZpbGVTdHJpbmcocyksZD1uLmdldExldmVsU3RyaW5nKHIpLGw9MSxoPTQyMCx1PVswLDQyMCw0MjIsNDQ0XSxjPTg7aWYoKDEwMD09PXN8fDExMD09PXN8fDEyMj09PXN8fDI0ND09PXN8fDQ0PT09c3x8ODM9PT1zfHw4Nj09PXN8fDExOD09PXN8fDEyOD09PXN8fDEzOD09PXN8fDE0ND09PXMpJiYoMz09PShsPWkucmVhZFVFRygpKSYmaS5yZWFkQml0cygxKSxsPD0zJiYoaD11W2xdKSxjPWkucmVhZFVFRygpKzgsaS5yZWFkVUVHKCksaS5yZWFkQml0cygxKSxpLnJlYWRCb29sKCkpKXtsZXQgZT0zIT09bD84OjEyO2ZvcihsZXQgdD0wO3Q8ZTt0KyspaS5yZWFkQm9vbCgpJiYodDw2P24uX3NraXBTY2FsaW5nTGlzdChpLDE2KTpuLl9za2lwU2NhbGluZ0xpc3QoaSw2NCkpfWkucmVhZFVFRygpO2xldCBmPWkucmVhZFVFRygpO2lmKDA9PT1mKWkucmVhZFVFRygpO2Vsc2UgaWYoMT09PWYpe2kucmVhZEJpdHMoMSksaS5yZWFkU0VHKCksaS5yZWFkU0VHKCk7bGV0IGU9aS5yZWFkVUVHKCk7Zm9yKGxldCB0PTA7dDxlO3QrKylpLnJlYWRTRUcoKX1pLnJlYWRVRUcoKSxpLnJlYWRCaXRzKDEpO2xldCBwPWkucmVhZFVFRygpLG09aS5yZWFkVUVHKCksZz1pLnJlYWRCaXRzKDEpOzA9PT1nJiZpLnJlYWRCaXRzKDEpLGkucmVhZEJpdHMoMSk7bGV0IF89MCx5PTAsRT0wLHY9MDtpLnJlYWRCb29sKCkmJihfPWkucmVhZFVFRygpLHk9aS5yZWFkVUVHKCksRT1pLnJlYWRVRUcoKSx2PWkucmVhZFVFRygpKTtsZXQgQT0xLFM9MSxUPTAsYj0hMCxSPTAsdz0wO2lmKGkucmVhZEJvb2woKSl7aWYoaS5yZWFkQm9vbCgpKXtsZXQgZT1pLnJlYWRCeXRlKCksdD1bMSwxMiwxMCwxNiw0MCwyNCwyMCwzMiw4MCwxOCwxNSw2NCwxNjAsNCwzLDJdLHM9WzEsMTEsMTEsMTEsMzMsMTEsMTEsMTEsMzMsMTEsMTEsMzMsOTksMywyLDFdO2U+MCYmZTwxNj8oQT10W2UtMV0sUz1zW2UtMV0pOjI1NT09PWUmJihBPWkucmVhZEJ5dGUoKTw8OHxpLnJlYWRCeXRlKCksUz1pLnJlYWRCeXRlKCk8PDh8aS5yZWFkQnl0ZSgpKX1pZihpLnJlYWRCb29sKCkmJmkucmVhZEJvb2woKSxpLnJlYWRCb29sKCkmJihpLnJlYWRCaXRzKDQpLGkucmVhZEJvb2woKSYmaS5yZWFkQml0cygyNCkpLGkucmVhZEJvb2woKSYmKGkucmVhZFVFRygpLGkucmVhZFVFRygpKSxpLnJlYWRCb29sKCkpe2xldCBlPWkucmVhZEJpdHMoMzIpLHQ9aS5yZWFkQml0cygzMik7Yj1pLnJlYWRCb29sKCksVD0oUj10KS8odz0yKmUpfX1sZXQgRD0xOzE9PT1BJiYxPT09U3x8KEQ9QS9TKTtsZXQgTD0wLHg9MDtpZigwPT09bClMPTEseD0yLWc7ZWxzZXtMPTM9PT1sPzE6Mix4PSgxPT09bD8yOjEpKigyLWcpfWxldCBPPTE2KihwKzEpLE09MTYqKG0rMSkqKDItZyk7Ty09KF8reSkqTCxNLT0oRSt2KSp4O2xldCBCPU1hdGguY2VpbChPKkQpO3JldHVybiBpLmRlc3Ryb3koKSxpPW51bGwse3Byb2ZpbGVfc3RyaW5nOm8sbGV2ZWxfc3RyaW5nOmQsYml0X2RlcHRoOmMsY2hyb21hX2Zvcm1hdDpoLGNocm9tYV9mb3JtYXRfc3RyaW5nOm4uZ2V0Q2hyb21hRm9ybWF0U3RyaW5nKGgpLGZyYW1lX3JhdGU6e2ZpeGVkOmIsZnBzOlQsZnBzX2Rlbjp3LGZwc19udW06Un0scGFyX3JhdGlvOnt3aWR0aDpBLGhlaWdodDpTfSxjb2RlY19zaXplOnt3aWR0aDpPLGhlaWdodDpNfSxwcmVzZW50X3NpemU6e3dpZHRoOkIsaGVpZ2h0Ok19fX1zdGF0aWMgX3NraXBTY2FsaW5nTGlzdChlLHQpe2xldCBpPTgscz04LHI9MDtmb3IobGV0IGE9MDthPHQ7YSsrKTAhPT1zJiYocz0oaSsocj1lLnJlYWRTRUcoKSkrMjU2KSUyNTYpLGk9MD09PXM/aTpzfXN0YXRpYyBnZXRQcm9maWxlU3RyaW5nKGUpe3N3aXRjaChlKXtjYXNlIDY2OnJldHVyblwiQmFzZWxpbmVcIjtjYXNlIDc3OnJldHVyblwiTWFpblwiO2Nhc2UgODg6cmV0dXJuXCJFeHRlbmRlZFwiO2Nhc2UgMTAwOnJldHVyblwiSGlnaFwiO2Nhc2UgMTEwOnJldHVyblwiSGlnaDEwXCI7Y2FzZSAxMjI6cmV0dXJuXCJIaWdoNDIyXCI7Y2FzZSAyNDQ6cmV0dXJuXCJIaWdoNDQ0XCI7ZGVmYXVsdDpyZXR1cm5cIlVua25vd25cIn19c3RhdGljIGdldExldmVsU3RyaW5nKGUpe3JldHVybihlLzEwKS50b0ZpeGVkKDEpfXN0YXRpYyBnZXRDaHJvbWFGb3JtYXRTdHJpbmcoZSl7c3dpdGNoKGUpe2Nhc2UgNDIwOnJldHVyblwiNDoyOjBcIjtjYXNlIDQyMjpyZXR1cm5cIjQ6MjoyXCI7Y2FzZSA0NDQ6cmV0dXJuXCI0OjQ6NFwiO2RlZmF1bHQ6cmV0dXJuXCJVbmtub3duXCJ9fXN0YXRpYyB0b1ZpZGVvTWV0YShlKXtsZXQgdD17fTtlJiZlLmNvZGVjX3NpemUmJih0LmNvZGVjV2lkdGg9ZS5jb2RlY19zaXplLndpZHRoLHQuY29kZWNIZWlnaHQ9ZS5jb2RlY19zaXplLmhlaWdodCx0LnByZXNlbnRXaWR0aD1lLnByZXNlbnRfc2l6ZS53aWR0aCx0LnByZXNlbnRIZWlnaHQ9ZS5wcmVzZW50X3NpemUuaGVpZ2h0KSx0LnByb2ZpbGU9ZS5wcm9maWxlX3N0cmluZyx0LmxldmVsPWUubGV2ZWxfc3RyaW5nLHQuYml0RGVwdGg9ZS5iaXRfZGVwdGgsdC5jaHJvbWFGb3JtYXQ9ZS5jaHJvbWFfZm9ybWF0LHQucGFyUmF0aW89e3dpZHRoOmUucGFyX3JhdGlvLndpZHRoLGhlaWdodDplLnBhcl9yYXRpby5oZWlnaHR9LHQuZnJhbWVSYXRlPWUuZnJhbWVfcmF0ZTtsZXQgaT10LmZyYW1lUmF0ZS5mcHNfZGVuLHM9dC5mcmFtZVJhdGUuZnBzX251bTt0LnJlZlNhbXBsZUR1cmF0aW9uPU1hdGguZmxvb3IodC50aW1lc2NhbGUqKGkvcykpfX10LmRlZmF1bHQ9bn0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17VHJhY2s6aSgxKS5kZWZhdWx0LFRyYWNrczppKDEpLlRyYWNrcyxBdWRpb1RyYWNrOmkoMSkuQXVkaW9UcmFjayxWaWRlb1RyYWNrOmkoMSkuVmlkZW9UcmFjayxYZ0J1ZmZlcjppKDEwKS5YZ0J1ZmZlcixSZW11eEJ1ZmZlcjppKDEwKS5SZW11eEJ1ZmZlcixQcmVTb3VyY2U6aSgzNCkuZGVmYXVsdH19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt0LlhnQnVmZmVyPWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMubGVuZ3RoPWV8fDAsdGhpcy5oaXN0b3J5TGVuPWV8fDAsdGhpcy5hcnJheT1bXSx0aGlzLm9mZnNldD0wfXB1c2goZSl7dGhpcy5hcnJheS5wdXNoKGUpLHRoaXMubGVuZ3RoKz1lLmJ5dGVMZW5ndGgsdGhpcy5oaXN0b3J5TGVuKz1lLmJ5dGVMZW5ndGh9c2hpZnQoZSl7aWYodGhpcy5hcnJheS5sZW5ndGg8MSlyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7aWYodm9pZCAwPT09ZSlyZXR1cm4gdGhpcy5fc2hpZnRCdWZmZXIoKTtpZih0aGlzLm9mZnNldCtlPT09dGhpcy5hcnJheVswXS5sZW5ndGgpe2xldCB0PXRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsdGhpcy5vZmZzZXQrZSk7cmV0dXJuIHRoaXMub2Zmc2V0PTAsdGhpcy5hcnJheS5zaGlmdCgpLHRoaXMubGVuZ3RoLT1lLHR9aWYodGhpcy5vZmZzZXQrZTx0aGlzLmFycmF5WzBdLmxlbmd0aCl7bGV0IHQ9dGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCx0aGlzLm9mZnNldCtlKTtyZXR1cm4gdGhpcy5vZmZzZXQrPWUsdGhpcy5sZW5ndGgtPWUsdH1sZXQgdD1uZXcgVWludDhBcnJheShlKSxpPTA7Zm9yKDt0aGlzLmFycmF5Lmxlbmd0aD4wJiZlPjA7KXtpZih0aGlzLm9mZnNldCtlPHRoaXMuYXJyYXlbMF0ubGVuZ3RoKXtsZXQgcz10aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LHRoaXMub2Zmc2V0K2UpO3Quc2V0KHMsaSksdGhpcy5vZmZzZXQrPWUsdGhpcy5sZW5ndGgtPWUsZT0wO2JyZWFrfXtsZXQgcz10aGlzLmFycmF5WzBdLmxlbmd0aC10aGlzLm9mZnNldDt0LnNldCh0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSxpKSx0aGlzLmFycmF5LnNoaWZ0KCksdGhpcy5vZmZzZXQ9MCxpKz1zLHRoaXMubGVuZ3RoLT1zLGUtPXN9fXJldHVybiB0fWNsZWFyKCl7dGhpcy5hcnJheT1bXSx0aGlzLmxlbmd0aD0wLHRoaXMub2Zmc2V0PTB9ZGVzdHJveSgpe3RoaXMuY2xlYXIoKSx0aGlzLmhpc3RvcnlMZW49MH1fc2hpZnRCdWZmZXIoKXtyZXR1cm4gdGhpcy5sZW5ndGgtPXRoaXMuYXJyYXlbMF0ubGVuZ3RoLHRoaXMub2Zmc2V0PTAsdGhpcy5hcnJheS5zaGlmdCgpfXRvSW50KGUsdCl7bGV0IGk9MCxzPXRoaXMub2Zmc2V0K2U7Zm9yKDtzPHRoaXMub2Zmc2V0K3QrZTspczx0aGlzLmFycmF5WzBdLmxlbmd0aD9pPTI1NippK3RoaXMuYXJyYXlbMF1bc106dGhpcy5hcnJheVsxXSYmKGk9MjU2KmkrdGhpcy5hcnJheVsxXVtzLXRoaXMuYXJyYXlbMF0ubGVuZ3RoXSkscysrO3JldHVybiBpfX07dC5SZW11eEJ1ZmZlcj1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMudmlkZW89W10sdGhpcy5hdWRpbz1bXX1kZXN0cm95KCl7dGhpcy52aWRlbz1bXSx0aGlzLmF1ZGlvPVtdfX19LGZ1bmN0aW9uKGUsdCxpKXtlLmV4cG9ydHM9aSgxMil9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjt2YXIgcz1uKGkoMikpLHI9aSgwKSxhPW4oaSgyOCkpO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWNvbnN0IG89ci5FVkVOVFMuRmx2QWxsb3dlZEV2ZW50cyxkPShlLHQpPT57aWYoIWUuY29uZmlnLmlzTGl2ZSYmZS5kdXJhdGlvbi1lLmN1cnJlbnRUaW1lPDIpe2NvbnN0IGk9ZS5nZXRCdWZmZXJlZFJhbmdlKCk7ZS5jdXJyZW50VGltZS1pWzFdPC4xJiYoZS5lbWl0KFwiZW5kZWRcIiksdC5tc2UuZW5kT2ZTdHJlYW0oKSl9fTtjbGFzcyBsIGV4dGVuZHMgcy5kZWZhdWx0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpLHRoaXMuY29udGV4dD1uZXcgci5Db250ZXh0KG8pLHRoaXMuaW5pdEV2ZW50cygpfXN0YXJ0KCl7Y29uc3QgZT10aGlzLmNvbnRleHQucmVnaXN0cnkoXCJGTFZfQ09OVFJPTExFUlwiLGEuZGVmYXVsdCkodGhpcyk7dGhpcy5mbHY9ZSx0aGlzLmNvbnRleHQuaW5pdCgpLHN1cGVyLnN0YXJ0KGUubXNlLnVybCl9aW5pdEV2ZW50cygpe3RoaXMub24oXCJ0aW1ldXBkYXRlXCIsdGhpcy5oYW5kbGVUaW1lVXBkYXRlLmJpbmQodGhpcykpLHRoaXMub24oXCJzZWVraW5nXCIsdGhpcy5oYW5kbGVTZWVrLmJpbmQodGhpcykpLHRoaXMub25jZShcImRlc3Ryb3lcIix0aGlzLl9kZXN0cm95LmJpbmQodGhpcykpfWhhbmRsZVRpbWVVcGRhdGUoKXt0aGlzLmxvYWREYXRhKCksZCh0aGlzLHRoaXMuZmx2KX1oYW5kbGVTZWVrKCl7Y29uc3QgZT10aGlzLmN1cnJlbnRUaW1lLHQ9dGhpcy5nZXRCdWZmZXJlZFJhbmdlKCk7KGU+dFsxXXx8ZTx0WzBdKSYmdGhpcy5mbHYuc2Vlayh0aGlzLmN1cnJlbnRUaW1lKX1fZGVzdHJveSgpe3RoaXMuY29udGV4dC5kZXN0cm95KCksdGhpcy5jb250ZXh0PW51bGwsdGhpcy5mbHY9bnVsbH1sb2FkRGF0YSgpe2xldCBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp0aGlzLmN1cnJlbnRUaW1lO2NvbnN0IHQ9dGhpcy5nZXRCdWZmZXJlZFJhbmdlKCk7dFsxXS1lPCh0aGlzLmNvbmZpZy5wcmVsb2FkVGltZXx8MTUpLTUmJnRoaXMuZmx2LmxvYWROZXh0KHRbMV0rMSl9Z2V0IHNyYygpe3JldHVybiB0aGlzLmN1cnJlbnRTcmN9c2V0IHNyYyhlKXt0aGlzLnBsYXllci5jb25maWcudXJsPWUsdGhpcy5wYXVzZWQ/dGhpcy5zdGFydChlKToodGhpcy5wYXVzZSgpLHRoaXMub25jZShcInBhdXNlXCIsKCk9Pnt0aGlzLnN0YXJ0KGUpfSksdGhpcy5vbmNlKFwiY2FucGxheVwiLCgpPT57dGhpcy5wbGF5KCl9KSksdGhpcy5vbmNlKFwiY2FucGxheVwiLCgpPT57dGhpcy5jdXJyZW50VGltZT0wfSl9fWUuZXhwb3J0cz1sfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHMscj1pKDMpLGE9KHM9cikmJnMuX19lc01vZHVsZT9zOntkZWZhdWx0OnN9LG49aSgxNCk7Y29uc3Qgbz1cIl9fVE9fX1wiO3QuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3Rvcigpe2xldCBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpbXTt0aGlzLl9lbWl0dGVyPW5ldyBuLkV2ZW50RW1pdHRlcix0aGlzLl9pbnN0YW5jZU1hcD17fSx0aGlzLl9jbHNNYXA9e30sdGhpcy5faW5pdGVkPSExLHRoaXMubWVkaWFJbmZvPW5ldyBhLmRlZmF1bHQsdGhpcy5hbGxvd2VkRXZlbnRzPWUsdGhpcy5faG9va3M9e30sdGhpcy5fZW1pdENvdW50ZXI9e319Z2V0SW5zdGFuY2UoZSl7Y29uc3QgdD10aGlzLl9pbnN0YW5jZU1hcFtlXTtyZXR1cm4gdHx8bnVsbH1pbml0SW5zdGFuY2UoZSl7aWYodGhpcy5fY2xzTWFwW2VdKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxpPUFycmF5KHQ+MT90LTE6MCkscz0xO3M8dDtzKyspaVtzLTFdPWFyZ3VtZW50c1tzXTtjb25zdCByPW5ldyhGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSh0aGlzLl9jbHNNYXBbZV0sW251bGxdLmNvbmNhdChpKSkpO3JldHVybiB0aGlzLl9pbnN0YW5jZU1hcFtlXT1yLHIuaW5pdCYmci5pbml0KCkscn10aHJvdyBuZXcgRXJyb3IoYCR7ZX3mnKrlnKhjb250ZXh05Lit5rOo5YaMYCl9aW5pdChlKXtpZighdGhpcy5faW5pdGVkKXtmb3IobGV0IHQgaW4gdGhpcy5fY2xzTWFwKXRoaXMuX2Nsc01hcC5oYXNPd25Qcm9wZXJ0eSh0KSYmIXRoaXMuX2luc3RhbmNlTWFwW3RdJiZ0aGlzLmluaXRJbnN0YW5jZSh0LGUpO3RoaXMuX2luaXRlZD0hMH19cmVnaXN0cnkoZSx0KXt2YXIgaT10aGlzO2NvbnN0IHM9dGhpcy5fZW1pdHRlcixyPXRoaXMuX2lzTWVzc2FnZU5hbWVWYWxpZC5iaW5kKHRoaXMpLGE9dGhpcztyZXR1cm4gdGhpcy5fY2xzTWFwW2VdPWNsYXNzIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcih0LGkscyl7c3VwZXIodCxpLHMpLHRoaXMubGlzdGVuZXJzPXt9LHRoaXMub25jZUxpc3RlbmVycz17fSx0aGlzLlRBRz1lLHRoaXMuX2NvbnRleHQ9YX1vbih0LGkpe3JldHVybiByKHQpLHRoaXMubGlzdGVuZXJzW3RdP3RoaXMubGlzdGVuZXJzW3RdLnB1c2goaSk6dGhpcy5saXN0ZW5lcnNbdF09W2ldLHMub24oYCR7dH0ke299JHtlfWAsaSkscy5vbih0LGkpfWJlZm9yZShlLHQpe3IoZSksYS5faG9va3NbZV0/YS5faG9va3NbZV0ucHVzaCh0KTphLl9ob29rc1tlXT1bdF19b25jZSh0LGkpe3JldHVybiByKHQpLHRoaXMub25jZUxpc3RlbmVyc1t0XT90aGlzLm9uY2VMaXN0ZW5lcnNbdF0ucHVzaChpKTp0aGlzLm9uY2VMaXN0ZW5lcnNbdF09W2ldLHMub25jZShgJHt0fSR7b30ke2V9YCxpKSxzLm9uY2UodCxpKX1lbWl0KGUpe2lmKHIoZSksYS5fZW1pdENvdW50ZXJbZV0pe2lmKGEuX2VtaXRDb3VudGVyW2VdKz0xLGEuX2VtaXRDb3VudGVyW2VdPjFlNCl7bGV0IHQ9XCJjb25cIixpPVwic29sZVwiO3dpbmRvdy5jb25zb2xlJiZ3aW5kb3dbdCtpXS53YXJuKFwiaW52b2tlOiBcIixlKX19ZWxzZSBhLl9lbWl0Q291bnRlcltlXT0xO2NvbnN0IHQ9YS5faG9va3M/YS5faG9va3NbZV06bnVsbDtpZih0KWZvcihsZXQgZT0wLGk9dC5sZW5ndGg7ZTxpO2UrKyl7KDAsdFtlXSkoKX1mb3IodmFyIGk9YXJndW1lbnRzLmxlbmd0aCxuPUFycmF5KGk+MT9pLTE6MCksbz0xO288aTtvKyspbltvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gcy5lbWl0LmFwcGx5KHMsW2VdLmNvbmNhdChuKSl9ZW1pdFRvKGUsdCl7cih0KTtmb3IodmFyIGk9YXJndW1lbnRzLmxlbmd0aCxhPUFycmF5KGk+Mj9pLTI6MCksbj0yO248aTtuKyspYVtuLTJdPWFyZ3VtZW50c1tuXTtyZXR1cm4gcy5lbWl0LmFwcGx5KHMsW2Ake3R9JHtvfSR7ZX1gXS5jb25jYXQoYSkpfW9mZihlLHQpe3JldHVybiByKGUpLHMub2ZmKGUsdCl9cmVtb3ZlTGlzdGVuZXJzKCl7Y29uc3QgdD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmJpbmQodGhpcy5saXN0ZW5lcnMpO2ZvcihsZXQgaSBpbiB0aGlzLmxpc3RlbmVycylpZih0KGkpKXtjb25zdCB0PXRoaXMubGlzdGVuZXJzW2ldfHxbXTtmb3IobGV0IHI9MDtyPHQubGVuZ3RoO3IrKyl7Y29uc3QgYT10W3JdO3Mub2ZmKGksYSkscy5vZmYoYCR7aX0ke299JHtlfWAsYSl9fWZvcihsZXQgaSBpbiB0aGlzLm9uY2VMaXN0ZW5lcnMpaWYodChpKSl7Y29uc3QgdD10aGlzLm9uY2VMaXN0ZW5lcnNbaV18fFtdO2ZvcihsZXQgcj0wO3I8dC5sZW5ndGg7cisrKXtjb25zdCBhPXRbcl07cy5vZmYoaSxhKSxzLm9mZihgJHtpfSR7b30ke2V9YCxhKX19fWRlc3Ryb3koKXtpZih0aGlzLnJlbW92ZUxpc3RlbmVycygpLHRoaXMubGlzdGVuZXJzPXt9LGRlbGV0ZSBhLl9pbnN0YW5jZU1hcFtlXSxzdXBlci5kZXN0cm95KXJldHVybiBzdXBlci5kZXN0cm95KCl9fSxmdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLHM9QXJyYXkodCkscj0wO3I8dDtyKyspc1tyXT1hcmd1bWVudHNbcl07cmV0dXJuIGkuaW5pdEluc3RhbmNlLmFwcGx5KGksW2VdLmNvbmNhdChzKSl9fWRlc3Ryb3lJbnN0YW5jZXMoKXtPYmplY3Qua2V5cyh0aGlzLl9pbnN0YW5jZU1hcCkuZm9yRWFjaChlPT57dGhpcy5faW5zdGFuY2VNYXBbZV0uZGVzdHJveSYmdGhpcy5faW5zdGFuY2VNYXBbZV0uZGVzdHJveSgpfSl9ZGVzdHJveSgpe3RoaXMuX2VtaXR0ZXI9bnVsbCx0aGlzLmFsbG93ZWRFdmVudHM9W10sdGhpcy5fY2xzTWFwPW51bGwsdGhpcy5fY29udGV4dD1udWxsLHRoaXMuX2hvb2tzPW51bGwsdGhpcy5fZW1pdENvdW50ZXI9e30sdGhpcy5kZXN0cm95SW5zdGFuY2VzKCl9X2lzTWVzc2FnZU5hbWVWYWxpZChlKXtpZighdGhpcy5hbGxvd2VkRXZlbnRzLmluZGV4T2YoZSk8MCl0aHJvdyBuZXcgRXJyb3IoYHVucmVnaXN0ZXJlZCBtZXNzYWdlIG5hbWU6ICR7ZX1gKX19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHMscj1cIm9iamVjdFwiPT10eXBlb2YgUmVmbGVjdD9SZWZsZWN0Om51bGwsYT1yJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByLmFwcGx5P3IuYXBwbHk6ZnVuY3Rpb24oZSx0LGkpe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChlLHQsaSl9O3M9ciYmXCJmdW5jdGlvblwiPT10eXBlb2Ygci5vd25LZXlzP3Iub3duS2V5czpPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKSl9OmZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKX07dmFyIG49TnVtYmVyLmlzTmFOfHxmdW5jdGlvbihlKXtyZXR1cm4gZSE9ZX07ZnVuY3Rpb24gbygpe28uaW5pdC5jYWxsKHRoaXMpfWUuZXhwb3J0cz1vLG8uRXZlbnRFbWl0dGVyPW8sby5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDAsby5wcm90b3R5cGUuX2V2ZW50c0NvdW50PTAsby5wcm90b3R5cGUuX21heExpc3RlbmVycz12b2lkIDA7dmFyIGQ9MTA7ZnVuY3Rpb24gbChlKXtyZXR1cm4gdm9pZCAwPT09ZS5fbWF4TGlzdGVuZXJzP28uZGVmYXVsdE1heExpc3RlbmVyczplLl9tYXhMaXN0ZW5lcnN9ZnVuY3Rpb24gaChlLHQsaSxzKXt2YXIgcixhLG4sbztpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIGkpO2lmKHZvaWQgMD09PShhPWUuX2V2ZW50cyk/KGE9ZS5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksZS5fZXZlbnRzQ291bnQ9MCk6KHZvaWQgMCE9PWEubmV3TGlzdGVuZXImJihlLmVtaXQoXCJuZXdMaXN0ZW5lclwiLHQsaS5saXN0ZW5lcj9pLmxpc3RlbmVyOmkpLGE9ZS5fZXZlbnRzKSxuPWFbdF0pLHZvaWQgMD09PW4pbj1hW3RdPWksKytlLl9ldmVudHNDb3VudDtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4/bj1hW3RdPXM/W2ksbl06W24saV06cz9uLnVuc2hpZnQoaSk6bi5wdXNoKGkpLChyPWwoZSkpPjAmJm4ubGVuZ3RoPnImJiFuLndhcm5lZCl7bi53YXJuZWQ9ITA7dmFyIGQ9bmV3IEVycm9yKFwiUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiBcIituLmxlbmd0aCtcIiBcIitTdHJpbmcodCkrXCIgbGlzdGVuZXJzIGFkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdFwiKTtkLm5hbWU9XCJNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmdcIixkLmVtaXR0ZXI9ZSxkLnR5cGU9dCxkLmNvdW50PW4ubGVuZ3RoLG89ZCxjb25zb2xlJiZjb25zb2xlLndhcm4mJmNvbnNvbGUud2FybihvKX1yZXR1cm4gZX1mdW5jdGlvbiB1KCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWUucHVzaChhcmd1bWVudHNbdF0pO3RoaXMuZmlyZWR8fCh0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsdGhpcy53cmFwRm4pLHRoaXMuZmlyZWQ9ITAsYSh0aGlzLmxpc3RlbmVyLHRoaXMudGFyZ2V0LGUpKX1mdW5jdGlvbiBjKGUsdCxpKXt2YXIgcz17ZmlyZWQ6ITEsd3JhcEZuOnZvaWQgMCx0YXJnZXQ6ZSx0eXBlOnQsbGlzdGVuZXI6aX0scj11LmJpbmQocyk7cmV0dXJuIHIubGlzdGVuZXI9aSxzLndyYXBGbj1yLHJ9ZnVuY3Rpb24gZihlLHQsaSl7dmFyIHM9ZS5fZXZlbnRzO2lmKHZvaWQgMD09PXMpcmV0dXJuW107dmFyIHI9c1t0XTtyZXR1cm4gdm9pZCAwPT09cj9bXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiByP2k/W3IubGlzdGVuZXJ8fHJdOltyXTppP2Z1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgQXJyYXkoZS5sZW5ndGgpLGk9MDtpPHQubGVuZ3RoOysraSl0W2ldPWVbaV0ubGlzdGVuZXJ8fGVbaV07cmV0dXJuIHR9KHIpOm0ocixyLmxlbmd0aCl9ZnVuY3Rpb24gcChlKXt2YXIgdD10aGlzLl9ldmVudHM7aWYodm9pZCAwIT09dCl7dmFyIGk9dFtlXTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBpKXJldHVybiAxO2lmKHZvaWQgMCE9PWkpcmV0dXJuIGkubGVuZ3RofXJldHVybiAwfWZ1bmN0aW9uIG0oZSx0KXtmb3IodmFyIGk9bmV3IEFycmF5KHQpLHM9MDtzPHQ7KytzKWlbc109ZVtzXTtyZXR1cm4gaX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0OmZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlPDB8fG4oZSkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK2UrXCIuXCIpO2Q9ZX19KSxvLmluaXQ9ZnVuY3Rpb24oKXt2b2lkIDAhPT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50cyE9PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzfHwodGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCksdGhpcy5fbWF4TGlzdGVuZXJzPXRoaXMuX21heExpc3RlbmVyc3x8dm9pZCAwfSxvLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGV8fGU8MHx8bihlKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrZStcIi5cIik7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz1lLHRoaXN9LG8ucHJvdG90eXBlLmdldE1heExpc3RlbmVycz1mdW5jdGlvbigpe3JldHVybiBsKHRoaXMpfSxvLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl0LnB1c2goYXJndW1lbnRzW2ldKTt2YXIgcz1cImVycm9yXCI9PT1lLHI9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PXIpcz1zJiZ2b2lkIDA9PT1yLmVycm9yO2Vsc2UgaWYoIXMpcmV0dXJuITE7aWYocyl7dmFyIG47aWYodC5sZW5ndGg+MCYmKG49dFswXSksbiBpbnN0YW5jZW9mIEVycm9yKXRocm93IG47dmFyIG89bmV3IEVycm9yKFwiVW5oYW5kbGVkIGVycm9yLlwiKyhuP1wiIChcIituLm1lc3NhZ2UrXCIpXCI6XCJcIikpO3Rocm93IG8uY29udGV4dD1uLG99dmFyIGQ9cltlXTtpZih2b2lkIDA9PT1kKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGQpYShkLHRoaXMsdCk7ZWxzZXt2YXIgbD1kLmxlbmd0aCxoPW0oZCxsKTtmb3IoaT0wO2k8bDsrK2kpYShoW2ldLHRoaXMsdCl9cmV0dXJuITB9LG8ucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGgodGhpcyxlLHQsITEpfSxvLnByb3RvdHlwZS5vbj1vLnByb3RvdHlwZS5hZGRMaXN0ZW5lcixvLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaCh0aGlzLGUsdCwhMCl9LG8ucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHQpO3JldHVybiB0aGlzLm9uKGUsYyh0aGlzLGUsdCkpLHRoaXN9LG8ucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHQpO3JldHVybiB0aGlzLnByZXBlbmRMaXN0ZW5lcihlLGModGhpcyxlLHQpKSx0aGlzfSxvLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciBpLHMscixhLG47aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiB0KTtpZih2b2lkIDA9PT0ocz10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PShpPXNbZV0pKXJldHVybiB0aGlzO2lmKGk9PT10fHxpLmxpc3RlbmVyPT09dCkwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOihkZWxldGUgc1tlXSxzLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsaS5saXN0ZW5lcnx8dCkpO2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2YgaSl7Zm9yKHI9LTEsYT1pLmxlbmd0aC0xO2E+PTA7YS0tKWlmKGlbYV09PT10fHxpW2FdLmxpc3RlbmVyPT09dCl7bj1pW2FdLmxpc3RlbmVyLHI9YTticmVha31pZihyPDApcmV0dXJuIHRoaXM7MD09PXI/aS5zaGlmdCgpOmZ1bmN0aW9uKGUsdCl7Zm9yKDt0KzE8ZS5sZW5ndGg7dCsrKWVbdF09ZVt0KzFdO2UucG9wKCl9KGksciksMT09PWkubGVuZ3RoJiYoc1tlXT1pWzBdKSx2b2lkIDAhPT1zLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsbnx8dCl9cmV0dXJuIHRoaXN9LG8ucHJvdG90eXBlLm9mZj1vLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcixvLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7dmFyIHQsaSxzO2lmKHZvaWQgMD09PShpPXRoaXMuX2V2ZW50cykpcmV0dXJuIHRoaXM7aWYodm9pZCAwPT09aS5yZW1vdmVMaXN0ZW5lcilyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApOnZvaWQgMCE9PWlbZV0mJigwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOmRlbGV0ZSBpW2VdKSx0aGlzO2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcixhPU9iamVjdC5rZXlzKGkpO2ZvcihzPTA7czxhLmxlbmd0aDsrK3MpXCJyZW1vdmVMaXN0ZW5lclwiIT09KHI9YVtzXSkmJnRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKHIpO3JldHVybiB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhcInJlbW92ZUxpc3RlbmVyXCIpLHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTAsdGhpc31pZihcImZ1bmN0aW9uXCI9PXR5cGVvZih0PWlbZV0pKXRoaXMucmVtb3ZlTGlzdGVuZXIoZSx0KTtlbHNlIGlmKHZvaWQgMCE9PXQpZm9yKHM9dC5sZW5ndGgtMTtzPj0wO3MtLSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdFtzXSk7cmV0dXJuIHRoaXN9LG8ucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4gZih0aGlzLGUsITApfSxvLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIGYodGhpcyxlLCExKX0sby5saXN0ZW5lckNvdW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZS5saXN0ZW5lckNvdW50P2UubGlzdGVuZXJDb3VudCh0KTpwLmNhbGwoZSx0KX0sby5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1wLG8ucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD9zKHRoaXMuX2V2ZW50cyk6W119fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dC5DT05URVhUX0NPTU9NQU5EUz17T046XCJvblwiLE9OQ0U6XCJvbmNlXCIsT0ZGOlwib2ZmXCIsRU1JVDpcImVtaXRcIixERVNUUk9ZOlwiZGVzdHJveVwifX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IHM9ZnVuY3Rpb24oKXtjb25zdCBlPW5ldyBBcnJheUJ1ZmZlcigyKTtyZXR1cm4gbmV3IERhdGFWaWV3KGUpLnNldEludDE2KDAsMjU2LCEwKSwyNTY9PT1uZXcgSW50MTZBcnJheShlKVswXX0oKSxyPXtnZXQgZGV2aWNlKCl7bGV0IGU9ci5vcztyZXR1cm4gZS5pc1BjP1wicGNcIjplLmlzVGFibGV0P1widGFibGV0XCI6XCJtb2JpbGVcIn0sZ2V0IGJyb3dzZXIoKXtsZXQgZT1uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCksdD17aWU6L3J2OihbXFxkLl0rKVxcKSBsaWtlIGdlY2tvLyxmaXJmb3g6L2ZpcmVmb3hcXC8oW1xcZC5dKykvLGNocm9tZTovY2hyb21lXFwvKFtcXGQuXSspLyxvcGVyYTovb3BlcmEuKFtcXGQuXSspLyxzYWZhcmk6L3ZlcnNpb25cXC8oW1xcZC5dKykuKnNhZmFyaS99O3JldHVybltdLmNvbmNhdChPYmplY3Qua2V5cyh0KS5maWx0ZXIoaT0+dFtpXS50ZXN0KGUpKSlbMF19LGdldCBvcygpe2xldCBlPW5hdmlnYXRvci51c2VyQWdlbnQsdD0vKD86V2luZG93cyBQaG9uZSkvLnRlc3QoZSksaT0vKD86U3ltYmlhbk9TKS8udGVzdChlKXx8dCxzPS8oPzpBbmRyb2lkKS8udGVzdChlKSxyPS8oPzpGaXJlZm94KS8udGVzdChlKSxhPS8oPzppUGFkfFBsYXlCb29rKS8udGVzdChlKXx8cyYmIS8oPzpNb2JpbGUpLy50ZXN0KGUpfHxyJiYvKD86VGFibGV0KS8udGVzdChlKSxuPS8oPzppUGhvbmUpLy50ZXN0KGUpJiYhYTtyZXR1cm57aXNUYWJsZXQ6YSxpc1Bob25lOm4saXNBbmRyb2lkOnMsaXNQYzohbiYmIXMmJiFpLGlzU3ltYmlhbjppLGlzV2luZG93c1Bob25lOnQsaXNGaXJlRm94OnJ9fSxnZXQgaXNMZSgpe3JldHVybiBzfX07dC5kZWZhdWx0PXJ9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBzPWZ1bmN0aW9uKCl7Y29uc3QgZT1uZXcgQXJyYXlCdWZmZXIoMik7cmV0dXJuIG5ldyBEYXRhVmlldyhlKS5zZXRJbnQxNigwLDI1NiwhMCksMjU2PT09bmV3IEludDE2QXJyYXkoZSlbMF19KCk7dC5kZWZhdWx0PXN9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjbGFzcyBze3N0YXRpYyBkZWNvZGUoZSl7Y29uc3QgdD1bXSxpPWU7bGV0IHI9MDtjb25zdCBhPWUubGVuZ3RoO2Zvcig7cjxhOylpZihpW3JdPDEyOCl0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShpW3JdKSksKytyO2Vsc2V7aWYoaVtyXTwxOTIpO2Vsc2UgaWYoaVtyXTwyMjQpe2lmKHMuX2NoZWNrQ29udGludWF0aW9uKGksciwxKSl7Y29uc3QgZT0oMzEmaVtyXSk8PDZ8NjMmaVtyKzFdO2lmKGU+PTEyOCl7dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoNjU1MzUmZSkpLHIrPTI7Y29udGludWV9fX1lbHNlIGlmKGlbcl08MjQwKXtpZihzLl9jaGVja0NvbnRpbnVhdGlvbihpLHIsMikpe2NvbnN0IGU9KDE1Jmlbcl0pPDwxMnwoNjMmaVtyKzFdKTw8Nnw2MyZpW3IrMl07aWYoZT49MjA0OCYmNTUyOTYhPSg2MzQ4OCZlKSl7dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoNjU1MzUmZSkpLHIrPTM7Y29udGludWV9fX1lbHNlIGlmKGlbcl08MjQ4JiZzLl9jaGVja0NvbnRpbnVhdGlvbihpLHIsMykpe2xldCBlPSg3Jmlbcl0pPDwxOHwoNjMmaVtyKzFdKTw8MTJ8KDYzJmlbcisyXSk8PDZ8NjMmaVtyKzNdO2lmKGU+NjU1MzYmJmU8MTExNDExMil7ZS09NjU1MzYsdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoZT4+PjEwfDU1Mjk2KSksdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMTAyMyZlfDU2MzIwKSkscis9NDtjb250aW51ZX19dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoNjU1MzMpKSwrK3J9cmV0dXJuIHQuam9pbihcIlwiKX1zdGF0aWMgX2NoZWNrQ29udGludWF0aW9uKGUsdCxpKXtsZXQgcz1lO2lmKHQraTxzLmxlbmd0aCl7Zm9yKDtpLS07KWlmKDEyOCE9KDE5MiZzWysrdF0pKXJldHVybiExO3JldHVybiEwfXJldHVybiExfX10LmRlZmF1bHQ9c30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NsYXNzIHN7Y29uc3RydWN0b3IoZSl7bGV0IHQ9cy5nZXREZWZhdWx0SW5mKCk7aWYoIWV8fFwiW29iamVjdCBPYmplY3RdXCIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpcmV0dXJuIHQ7bGV0IGk9T2JqZWN0LmFzc2lnbih7fSx0LGUpO09iamVjdC5lbnRyaWVzKGkpLmZvckVhY2goZT0+e2xldFt0LGldPWU7dGhpc1t0XT1pfSl9c3RhdGljIGdldERlZmF1bHRJbmYoKXtyZXR1cm57ZHRzOm51bGwscHRzOm51bGwsZHVyYXRpb246bnVsbCxwb3NpdGlvbjpudWxsLGlzUkFQOiExLG9yaWdpbkR0czpudWxsfX19dC5kZWZhdWx0PXN9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt0LmRlZmF1bHQ9Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLnN0YXJ0RHRzPS0xLHRoaXMuZW5kRHRzPS0xLHRoaXMuc3RhcnRQdHM9LTEsdGhpcy5lbmRQdHM9LTEsdGhpcy5vcmlnaW5TdGFydER0cz0tMSx0aGlzLm9yaWdpbkVuZER0cz0tMSx0aGlzLnJhbmRvbUFjY2Vzc1BvaW50cz1bXSx0aGlzLmZpcnN0U2FtcGxlPW51bGwsdGhpcy5sYXN0U2FtcGxlPW51bGx9YWRkUkFQKGUpe2UuaXNSQVA9ITAsdGhpcy5yYW5kb21BY2Nlc3NQb2ludHMucHVzaChlKX19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMuX3R5cGU9ZSx0aGlzLl9saXN0PVtdLHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbj0tMX1nZXQgdHlwZSgpe3JldHVybiB0aGlzLl90eXBlfWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5fbGlzdC5sZW5ndGh9aXNFbXB0eSgpe3JldHVybiAwPT09dGhpcy5fbGlzdC5sZW5ndGh9Y2xlYXIoKXt0aGlzLl9saXN0PVtdLHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbj0tMX1fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoZSl7bGV0IHQ9dGhpcy5fbGlzdDtpZigwPT09dC5sZW5ndGgpcmV0dXJuLTI7bGV0IGk9dC5sZW5ndGgtMSxzPTAscj0wLGE9aSxuPTA7aWYoZTx0WzBdLm9yaWdpbkR0cylyZXR1cm4gbj0tMTtmb3IoO3I8PWE7KXtpZigocz1yK01hdGguZmxvb3IoKGEtcikvMikpPT09aXx8ZT50W3NdLmxhc3RTYW1wbGUub3JpZ2luRHRzJiZlPHRbcysxXS5vcmlnaW5EdHMpe249czticmVha310W3NdLm9yaWdpbkR0czxlP3I9cysxOmE9cy0xfXJldHVybiBufV9zZWFyY2hOZWFyZXN0U2VnbWVudEFmdGVyKGUpe3JldHVybiB0aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShlKSsxfWFwcGVuZChlKXtsZXQgdD10aGlzLl9saXN0LGk9dGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uLHM9MDstMSE9PWkmJmk8dC5sZW5ndGgmJmUub3JpZ2luU3RhcnREdHM+PXRbaV0ubGFzdFNhbXBsZS5vcmlnaW5EdHMmJihpPT09dC5sZW5ndGgtMXx8aTx0Lmxlbmd0aC0xJiZlLm9yaWdpblN0YXJ0RHRzPHRbaSsxXS5vcmlnaW5TdGFydER0cyk/cz1pKzE6dC5sZW5ndGg+MCYmKHM9dGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoZS5vcmlnaW5TdGFydER0cykrMSksdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uPXMsdGhpcy5fbGlzdC5zcGxpY2UocywwLGUpfWdldExhc3RTZWdtZW50QmVmb3JlKGUpe2xldCB0PXRoaXMuX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKGUpO3JldHVybiB0Pj0wP3RoaXMuX2xpc3RbdF06bnVsbH1nZXRMYXN0U2FtcGxlQmVmb3JlKGUpe2xldCB0PXRoaXMuZ2V0TGFzdFNlZ21lbnRCZWZvcmUoZSk7cmV0dXJuIG51bGwhPT10P3QubGFzdFNhbXBsZTpudWxsfWdldExhc3RSQVBCZWZvcmUoZSl7bGV0IHQ9dGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoZSksaT10aGlzLl9saXN0W3RdLnJhbmRvbUFjY2Vzc1BvaW50cztmb3IoOzA9PT1pLmxlbmd0aCYmdD4wOyl0LS0saT10aGlzLl9saXN0W3RdLnJhbmRvbUFjY2Vzc1BvaW50cztyZXR1cm4gaS5sZW5ndGg+MD9pW2kubGVuZ3RoLTFdOm51bGx9fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NsYXNzIHN7Y29uc3RydWN0b3IoZSl7dGhpcy5jb25maWdzPU9iamVjdC5hc3NpZ24oe30sZSksdGhpcy5jb250YWluZXI9dGhpcy5jb25maWdzLmNvbnRhaW5lcix0aGlzLm1lZGlhU291cmNlPW51bGwsdGhpcy5zb3VyY2VCdWZmZXJzPXt9LHRoaXMucHJlbG9hZFRpbWU9dGhpcy5jb25maWdzLnByZWxvYWRUaW1lfHwxLHRoaXMub25Tb3VyY2VPcGVuPXRoaXMub25Tb3VyY2VPcGVuLmJpbmQodGhpcyksdGhpcy5vblRpbWVVcGRhdGU9dGhpcy5vblRpbWVVcGRhdGUuYmluZCh0aGlzKSx0aGlzLm9uVXBkYXRlRW5kPXRoaXMub25VcGRhdGVFbmQuYmluZCh0aGlzKSx0aGlzLm9uV2FpdGluZz10aGlzLm9uV2FpdGluZy5iaW5kKHRoaXMpfWluaXQoKXt0aGlzLm1lZGlhU291cmNlPW5ldyBzZWxmLk1lZGlhU291cmNlLHRoaXMubWVkaWFTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihcInNvdXJjZW9wZW5cIix0aGlzLm9uU291cmNlT3BlbiksdGhpcy5jb250YWluZXIuc3JjPVVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy5tZWRpYVNvdXJjZSksdGhpcy51cmw9dGhpcy5jb250YWluZXIuc3JjLHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0aW1ldXBkYXRlXCIsdGhpcy5vblRpbWVVcGRhdGUpLHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ3YWl0aW5nXCIsdGhpcy5vbldhaXRpbmcpfW9uVGltZVVwZGF0ZSgpe3RoaXMuZW1pdChcIlRJTUVfVVBEQVRFXCIsdGhpcy5jb250YWluZXIpfW9uV2FpdGluZygpe3RoaXMuZW1pdChcIldBSVRJTkdcIix0aGlzLmNvbnRhaW5lcil9b25Tb3VyY2VPcGVuKCl7dGhpcy5hZGRTb3VyY2VCdWZmZXJzKCl9b25VcGRhdGVFbmQoKXt0aGlzLmVtaXQoXCJTT1VSQ0VfVVBEQVRFX0VORFwiKSx0aGlzLmRvQXBwZW5kKCl9YWRkU291cmNlQnVmZmVycygpe2lmKFwib3BlblwiIT09dGhpcy5tZWRpYVNvdXJjZS5yZWFkeVN0YXRlKXJldHVybjtsZXQgZSx0PXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJQUkVfU09VUkNFX0JVRkZFUlwiKSxpPXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJUUkFDS1NcIik7dD10LnNvdXJjZXM7bGV0IHM9ITE7Zm9yKGxldCByPTAsYT1PYmplY3Qua2V5cyh0KS5sZW5ndGg7cjxhO3IrKyl7bGV0IGE9T2JqZWN0LmtleXModClbcl07aWYoXCJhdWRpb1wiPT09YT9lPWkuYXVkaW9UcmFjazpcInZpZGVvXCI9PT1hJiYoZT1pLnZpZGVvVHJhY2spLGUpe2xldCBpPVwiYXVkaW9cIj09PWE/MjE6NDA7ZS5tZXRhJiZlLm1ldGEucmVmU2FtcGxlRHVyYXRpb24mJihpPWUubWV0YS5yZWZTYW1wbGVEdXJhdGlvbiksdFthXS5kYXRhLmxlbmd0aD49dGhpcy5wcmVsb2FkVGltZS9pJiYocz0hMCl9fWlmKHMpe2lmKE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoPjApcmV0dXJuO2ZvcihsZXQgZT0wLGk9T2JqZWN0LmtleXModCkubGVuZ3RoO2U8aTtlKyspe2xldCBpPU9iamVjdC5rZXlzKHQpW2VdLHM9dFtpXSxyPVwidmlkZW9cIj09PWk/XCJ2aWRlby9tcDQ7Y29kZWNzPVwiK3MubWltZXR5cGU6XCJhdWRpby9tcDQ7Y29kZWNzPVwiK3MubWltZXR5cGUsYT10aGlzLm1lZGlhU291cmNlLmFkZFNvdXJjZUJ1ZmZlcihyKTt0aGlzLnNvdXJjZUJ1ZmZlcnNbaV09YSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVlbmRcIix0aGlzLm9uVXBkYXRlRW5kKSx0aGlzLmRvQXBwZW5kKCl9fX1kb0FwcGVuZCgpe2xldCBlPXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJQUkVfU09VUkNFX0JVRkZFUlwiKTtpZihlKWZvcihsZXQgdD0wO3Q8T2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg7dCsrKXtsZXQgaT1PYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpW3RdLHM9dGhpcy5zb3VyY2VCdWZmZXJzW2ldO2lmKCFzLnVwZGF0aW5nKXtsZXQgdD1lLnNvdXJjZXNbaV07aWYodCYmIXQuaW5pdGVkKXMuYXBwZW5kQnVmZmVyKHQuaW5pdC5idWZmZXIuYnVmZmVyKSx0LmluaXRlZD0hMDtlbHNlIGlmKHQpe2xldCBlPXQuZGF0YS5zaGlmdCgpO2UmJnMuYXBwZW5kQnVmZmVyKGUuYnVmZmVyLmJ1ZmZlcil9fX19ZW5kT2ZTdHJlYW0oKXtjb25zdHtyZWFkeVN0YXRlOmUsYWN0aXZlU291cmNlQnVmZmVyczp0fT10aGlzLm1lZGlhU291cmNlO2lmKFwib3BlblwiPT09ZSYmMD09PXQubGVuZ3RoKXRyeXt0aGlzLm1lZGlhU291cmNlLmVuZE9mU3RyZWFtKCl9Y2F0Y2goZSl7fX1yZW1vdmUoZSl7bGV0IHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjA7Zm9yKGxldCBpPTA7aTxPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpLmxlbmd0aDtpKyspe2xldCBzPXRoaXMuc291cmNlQnVmZmVyc1tPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpW2ldXTtzLnVwZGF0aW5nfHxzLnJlbW92ZSh0LGUpfX1yZW1vdmVCdWZmZXJzKCl7Y29uc3QgZT1bXTtmb3IobGV0IHQ9MDt0PE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoO3QrKyl7bGV0IGkscj10aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVt0XV07ci5yZW1vdmVFdmVudExpc3RlbmVyKFwidXBkYXRlZW5kXCIsdGhpcy5vblVwZGF0ZUVuZCksaT1yLnVwZGF0aW5nP25ldyBQcm9taXNlKGU9Pntjb25zdCB0PWZ1bmN0aW9uKCl7bGV0IGk9Mztjb25zdCBhPSgpPT57ci51cGRhdGluZz9pPjA/KHNldFRpbWVvdXQoYSwyMDApLGktLSk6ZSgpOihzLmNsZWFyQnVmZmVyKHIpLHIuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZWVuZFwiLCgpPT57ZSgpfSkpfTtzZXRUaW1lb3V0KGEsMjAwKSxyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVlbmRcIix0KX07ci5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlZW5kXCIsdCl9KTpuZXcgUHJvbWlzZShlPT57cy5jbGVhckJ1ZmZlcihyKSxyLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVlbmRcIiwoKT0+e2UoKX0pfSksZS5wdXNoKGkpfXJldHVybiBQcm9taXNlLmFsbChlKX1kZXN0cm95KCl7cmV0dXJuIHRoaXMucmVtb3ZlQnVmZmVycygpLnRoZW4oKCk9Pntmb3IobGV0IGU9MDtlPE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoO2UrKyl7bGV0IHQ9dGhpcy5zb3VyY2VCdWZmZXJzW09iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbZV1dO3RoaXMubWVkaWFTb3VyY2UucmVtb3ZlU291cmNlQnVmZmVyKHQpLGRlbGV0ZSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtlXV19dGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRpbWV1cGRhdGVcIix0aGlzLm9uVGltZVVwZGF0ZSksdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndhaXRpbmdcIix0aGlzLm9uV2FpdGluZyksdGhpcy5tZWRpYVNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKFwic291cmNlb3BlblwiLHRoaXMub25Tb3VyY2VPcGVuKSx0aGlzLmVuZE9mU3RyZWFtKCksd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodGhpcy51cmwpLHRoaXMudXJsPW51bGwsdGhpcy5jb25maWdzPXt9LHRoaXMuY29udGFpbmVyPW51bGwsdGhpcy5tZWRpYVNvdXJjZT1udWxsLHRoaXMuc291cmNlQnVmZmVycz17fSx0aGlzLnByZWxvYWRUaW1lPTF9KX1zdGF0aWMgY2xlYXJCdWZmZXIoZSl7Y29uc3QgdD1lLmJ1ZmZlcmVkO2xldCBpPS4xO2ZvcihsZXQgZT0wLHM9dC5sZW5ndGg7ZTxzO2UrKylpPXQuZW5kKGUpO3RyeXtlLnJlbW92ZSgwLGkpfWNhdGNoKGUpe319fXQuZGVmYXVsdD1zfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y2xhc3Mgc3tjb25zdHJ1Y3RvcihlKXtpZighKGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpdGhyb3cgbmV3IEVycm9yKFwiZGF0YSBpcyBpbnZhbGlkXCIpO3RoaXMuYnVmZmVyPWUsdGhpcy5kYXRhdmlldz1uZXcgRGF0YVZpZXcoZSksdGhpcy5kYXRhdmlldy5wb3NpdGlvbj0wfWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aH1zZXQgcG9zaXRpb24oZSl7dGhpcy5kYXRhdmlldy5wb3NpdGlvbj1lfWdldCBwb3NpdGlvbigpe3JldHVybiB0aGlzLmRhdGF2aWV3LnBvc2l0aW9ufWJhY2soZSl7dGhpcy5wb3NpdGlvbi09ZX1za2lwKGUpe2xldCB0PU1hdGguZmxvb3IoZS80KSxpPWUlNDtmb3IobGV0IGU9MDtlPHQ7ZSsrKXMucmVhZEJ5dGUodGhpcy5kYXRhdmlldyw0KTtpPjAmJnMucmVhZEJ5dGUodGhpcy5kYXRhdmlldyxpKX1zdGF0aWMgcmVhZEJ5dGUoZSx0LGkpe2xldCBzO3N3aXRjaCh0KXtjYXNlIDE6cz1pP2UuZ2V0SW50OChlLnBvc2l0aW9uKTplLmdldFVpbnQ4KGUucG9zaXRpb24pO2JyZWFrO2Nhc2UgMjpzPWk/ZS5nZXRJbnQxNihlLnBvc2l0aW9uKTplLmdldFVpbnQxNihlLnBvc2l0aW9uKTticmVhaztjYXNlIDM6aWYoaSl0aHJvdyBuZXcgRXJyb3IoXCJub3Qgc3VwcG9ydGVkIGZvciByZWFkQnl0ZSAzXCIpO3M9ZS5nZXRVaW50OChlLnBvc2l0aW9uKTw8MTYsc3w9ZS5nZXRVaW50OChlLnBvc2l0aW9uKzEpPDw4LHN8PWUuZ2V0VWludDgoZS5wb3NpdGlvbisyKTticmVhaztjYXNlIDQ6cz1pP2UuZ2V0SW50MzIoZS5wb3NpdGlvbik6ZS5nZXRVaW50MzIoZS5wb3NpdGlvbik7YnJlYWs7Y2FzZSA4OmlmKGkpdGhyb3cgbmV3IEVycm9yKFwibm90IHN1cHBvcnRlZCBmb3IgcmVhZEJvZHkgOFwiKTtzPWUuZ2V0VWludDMyKGUucG9zaXRpb24pPDwzMixzfD1lLmdldFVpbnQzMihlLnBvc2l0aW9uKzQpO2JyZWFrO2RlZmF1bHQ6cz1cIlwifXJldHVybiBlLnBvc2l0aW9uKz10LHN9cmVhZFVpbnQ4KCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldywxKX1yZWFkVWludDE2KCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldywyKX1yZWFkVWludDI0KCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldywzKX1yZWFkVWludDMyKCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldyw0KX1yZWFkVWludDY0KCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldyw4KX1yZWFkSW50OCgpe3JldHVybiBzLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsMSwhMCl9cmVhZEludDE2KCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldywyLCEwKX1yZWFkSW50MzIoKXtyZXR1cm4gcy5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LDQsITApfXdyaXRlVWludDMyKGUpe3JldHVybiBuZXcgVWludDhBcnJheShbZT4+PjI0JjI1NSxlPj4+MTYmMjU1LGU+Pj44JjI1NSwyNTUmZV0pfX10LmRlZmF1bHQ9c30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzLHI9aSgyNSksYT0ocz1yKSYmcy5fX2VzTW9kdWxlP3M6e2RlZmF1bHQ6c307dC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMuYnVmZmVyPWV8fG5ldyBVaW50OEFycmF5KDApfXdyaXRlKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShlKSxpPTA7aTxlO2krKyl0W2ldPWFyZ3VtZW50c1tpXTt0LmZvckVhY2goZT0+e3RoaXMuYnVmZmVyPSgwLGEuZGVmYXVsdCkoVWludDhBcnJheSx0aGlzLmJ1ZmZlcixlKX0pfXN0YXRpYyB3cml0ZVVpbnQzMihlKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW2U+PjI0LGU+PjE2JjI1NSxlPj44JjI1NSwyNTUmZV0pfXN0YXRpYyByZWFkQXNJbnQoZSl7bGV0IHQ9XCJcIjtyZXR1cm4gZS5mb3JFYWNoKGU9Pnt0Kz1mdW5jdGlvbihlKXtyZXR1cm4gZS50b1N0cmluZygxNikucGFkU3RhcnQoMixcIjBcIil9KGUpfSkscGFyc2VJbnQodCwxNil9fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO3ZhciBzLHI9aSgyNiksYT0ocz1yKSYmcy5fX2VzTW9kdWxlP3M6e2RlZmF1bHQ6c307ZS5leHBvcnRzPWEuZGVmYXVsdH0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxpPWFyZ3VtZW50cy5sZW5ndGgscz1BcnJheShpPjE/aS0xOjApLHI9MTtyPGk7cisrKXNbci0xXT1hcmd1bWVudHNbcl07dmFyIGE9ITAsbj0hMSxvPXZvaWQgMDt0cnl7Zm9yKHZhciBkLGw9c1tTeW1ib2wuaXRlcmF0b3JdKCk7IShhPShkPWwubmV4dCgpKS5kb25lKTthPSEwKXt2YXIgaD1kLnZhbHVlO3QrPWgubGVuZ3RofX1jYXRjaChlKXtuPSEwLG89ZX1maW5hbGx5e3RyeXshYSYmbC5yZXR1cm4mJmwucmV0dXJuKCl9ZmluYWxseXtpZihuKXRocm93IG99fXZhciB1PW5ldyBlKHQpLGM9MCxmPSEwLHA9ITEsbT12b2lkIDA7dHJ5e2Zvcih2YXIgZyxfPXNbU3ltYm9sLml0ZXJhdG9yXSgpOyEoZj0oZz1fLm5leHQoKSkuZG9uZSk7Zj0hMCl7dmFyIHk9Zy52YWx1ZTt1LnNldCh5LGMpLGMrPXkubGVuZ3RofX1jYXRjaChlKXtwPSEwLG09ZX1maW5hbGx5e3RyeXshZiYmXy5yZXR1cm4mJl8ucmV0dXJuKCl9ZmluYWxseXtpZihwKXRocm93IG19fXJldHVybiB1fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzLHI9aSg0KTtjb25zdCBhPSgocz1yKSYmcy5fX2VzTW9kdWxlP3M6e2RlZmF1bHQ6c30pLmRlZmF1bHQuQ1JZVE9fRVZFTlRTO3QuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3RvcihlKXt0aGlzLmlucHV0QnVmZmVyPWUuaW5wdXRidWZmZXIsdGhpcy5vdXRwdXRCdWZmZXI9ZS5vdXRwdXRidWZmZXIsdGhpcy5rZXk9ZS5rZXksdGhpcy5pdj1lLml2LHRoaXMubWV0aG9kPWUubWV0aG9kLHRoaXMuY3J5cHRvPXdpbmRvdy5jcnlwdG98fHdpbmRvdy5tc0NyeXB0b31pbml0KCl7dGhpcy5vbihhLlNUQVJUX0RFQ1JZUFQsdGhpcy5kZWNyaXB0LmJpbmQodGhpcykpfWRlY3JpcHQoKXtpZih0aGlzLmFlc2tleSl0aGlzLmRlY3JpcHREYXRhKCk7ZWxzZXt0aGlzLmNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFwicmF3XCIsdGhpcy5rZXkuYnVmZmVyLHtuYW1lOlwiQUVTLUNCQ1wifSwhMSxbXCJlbmNyeXB0XCIsXCJkZWNyeXB0XCJdKS50aGVuKGU9Pnt0aGlzLmFlc2tleT1lLHRoaXMuZGVjcmlwdERhdGEoKX0pfX1kZWNyaXB0RGF0YSgpe2xldCBlPXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5pbnB1dEJ1ZmZlciksdD10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMub3V0cHV0QnVmZmVyKSxpPWUuc2hpZnQoKTtpJiZ0aGlzLmNyeXB0by5zdWJ0bGUuZGVjcnlwdCh7bmFtZTpcIkFFUy1DQkNcIixpdjp0aGlzLml2LmJ1ZmZlcn0sdGhpcy5hZXNrZXksaSkudGhlbihlPT57dC5wdXNoKG5ldyBVaW50OEFycmF5KGUpKSx0aGlzLmVtaXQoYS5ERUNSWVBURUQpLHRoaXMuZGVjcmlwdERhdGEoaSl9KX19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9aChpKDI5KSkscj1oKGkoMzYpKSxhPWkoMzkpLG49aSg5KSxvPWkoMCksZD1pKDcpLGw9aChpKDIpKTtmdW5jdGlvbiBoKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1jb25zdCB1PW8uRVZFTlRTLlJFTVVYX0VWRU5UUyxjPW8uRVZFTlRTLkRFTVVYX0VWRU5UUyxmPW8uRVZFTlRTLkxPQURFUl9FVkVOVFMscD1cIkZMVkNvbnRyb2xsZXJcIjtjbGFzcyBte3dhcm4oKXt9fWNvbnN0IGc9XCJGTFZfRVJST1JcIjtjbGFzcyBfe2NvbnN0cnVjdG9yKGUpe3RoaXMuVEFHPXAsdGhpcy5fcGxheWVyPWUsdGhpcy5zdGF0ZT17aW5pdFNlZ21lbnRBcnJpdmVkOiExLHJhbmdlOntzdGFydDowLGVuZDpcIlwifSxyYW5nZVN1cHBvcnQ6ITB9fXN0YXRpYyBmaW5kRmlsZVBvc2l0aW9uKGUsdCl7Zm9yKGxldCBpPTAscz10LnRpbWVzLmxlbmd0aDtpPHM7aSsrKXtjb25zdCByPXQudGltZXNbaV0sYT1pKzE8cz90LnRpbWVzW2krMV06TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7aWYocjw9ZSYmZTw9YSlyZXR1cm4gdC5maWxlcG9zaXRpb25zW2ldfXJldHVyblwiXCJ9aW5pdCgpe3RoaXMuX2NvbnRleHQucmVnaXN0cnkoXCJGRVRDSF9MT0FERVJcIixhLkZldGNoTG9hZGVyKSx0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KFwiTE9BREVSX0JVRkZFUlwiLG4uWGdCdWZmZXIpLHRoaXMuX2NvbnRleHQucmVnaXN0cnkoXCJGTFZfREVNVVhFUlwiLHMuZGVmYXVsdCksdGhpcy5fY29udGV4dC5yZWdpc3RyeShcIlRSQUNLU1wiLG4uVHJhY2tzKSx0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KFwiTVA0X1JFTVVYRVJcIixyLmRlZmF1bHQuTXA0UmVtdXhlciksdGhpcy5fY29udGV4dC5yZWdpc3RyeShcIlBSRV9TT1VSQ0VfQlVGRkVSXCIsbi5QcmVTb3VyY2UpLHRoaXMuX2NvbnRleHQucmVnaXN0cnkoXCJDT01QQVRJQklMSVRZXCIsZC5Db21wYXRpYmlsaXR5KSx0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KFwiTE9HR0VSXCIsbSksdGhpcy5tc2U9dGhpcy5fY29udGV4dC5yZWdpc3RyeShcIk1TRVwiLG8uTXNlKSh7Y29udGFpbmVyOnRoaXMuX3BsYXllci52aWRlb30pLHRoaXMuaW5pdExpc3RlbmVycygpLHNldFRpbWVvdXQoKCk9Pnt0aGlzLmxvYWRNZXRhKCl9LDApfWluaXRMaXN0ZW5lcnMoKXt0aGlzLm9uKGYuTE9BREVSX0RBVEFMT0FERUQsdGhpcy5faGFuZGxlTG9hZGVyRGF0YUxvYWRlZC5iaW5kKHRoaXMpKSx0aGlzLm9uKGYuTE9BREVSX0VSUk9SLHRoaXMuX2hhbmRsZU5ldHdvcmtFcnJvci5iaW5kKHRoaXMpKSx0aGlzLm9uKGMuTUVESUFfSU5GTyx0aGlzLl9oYW5kbGVNZWRpYUluZm8uYmluZCh0aGlzKSksdGhpcy5vbihjLk1FVEFEQVRBX1BBUlNFRCx0aGlzLl9oYW5kbGVNZXRhZGF0YVBhcnNlZC5iaW5kKHRoaXMpKSx0aGlzLm9uKGMuREVNVVhfQ09NUExFVEUsdGhpcy5faGFuZGxlRGVtdXhDb21wbGV0ZS5iaW5kKHRoaXMpKSx0aGlzLm9uKGMuREVNVVhfRVJST1IsdGhpcy5faGFuZGxlRGVtdXhFcnJvci5iaW5kKHRoaXMpKSx0aGlzLm9uKHUuSU5JVF9TRUdNRU5ULHRoaXMuX2hhbmRsZUFwcGVuZEluaXRTZWdtZW50LmJpbmQodGhpcykpLHRoaXMub24odS5NRURJQV9TRUdNRU5ULHRoaXMuX2hhbmRsZU1lZGlhU2VnbWVudC5iaW5kKHRoaXMpKX1faGFuZGxlTWVkaWFJbmZvKCl7dGhpcy5fY29udGV4dC5vbk1ldGFEYXRhfHx0aGlzLmVtaXQoYy5ERU1VWF9FUlJPUixuZXcgRXJyb3IoXCJmYWlsZWQgdG8gZ2V0IG1lZGlhaW5mb1wiKSk7Y29uc3QgZT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiTE9BREVSX0JVRkZFUlwiKSx0PXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJGRVRDSF9MT0FERVJcIik7dGhpcy5pc1NlZWthYmxlJiYodC5jYW5jZWwoKSx0aGlzLnN0YXRlLnJhbmdlPXtzdGFydDowLGVuZDplLmhpc3RvcnlMZW4tMX0sc2V0VGltZW91dCgoKT0+e3RoaXMubG9hZE5leHQoMCl9KSl9X2hhbmRsZUxvYWRlckRhdGFMb2FkZWQoKXt0aGlzLmVtaXRUbyhcIkZMVl9ERU1VWEVSXCIsYy5ERU1VWF9TVEFSVCl9X2hhbmRsZU1ldGFkYXRhUGFyc2VkKGUpe3RoaXMuZW1pdCh1LlJFTVVYX01FVEFEQVRBLGUpfV9oYW5kbGVEZW11eENvbXBsZXRlKCl7dGhpcy5lbWl0KHUuUkVNVVhfTUVESUEpfV9oYW5kbGVBcHBlbmRJbml0U2VnbWVudCgpe3RoaXMuc3RhdGUuaW5pdFNlZ21lbnRBcnJpdmVkPSEwLHRoaXMubXNlLmFkZFNvdXJjZUJ1ZmZlcnMoKX1faGFuZGxlTWVkaWFTZWdtZW50KCl7dGhpcy5tc2UuYWRkU291cmNlQnVmZmVycygpLHRoaXMubXNlLmRvQXBwZW5kKCl9X2hhbmRsZU5ldHdvcmtFcnJvcihlLHQpe3RoaXMuX3BsYXllci5lbWl0KFwiZXJyb3JcIixuZXcgbC5kZWZhdWx0LkVycm9ycyhcIm5ldHdvcmtcIix0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCkpLHRoaXMuX29uRXJyb3IoZi5MT0FERVJfRVJST1IsZSx0LCEwKX1faGFuZGxlRGVtdXhFcnJvcihlLHQsaSl7dm9pZCAwPT09aSYmKGk9ITEpLHRoaXMuX3BsYXllci5lbWl0KFwiZXJyb3JcIixuZXcgbC5kZWZhdWx0LkVycm9ycyhcInBhcnNlXCIsdGhpcy5fcGxheWVyLmNvbmZpZy51cmwpKSx0aGlzLl9vbkVycm9yKGYuTE9BREVSX0VSUk9SLGUsdCxpKX1fb25FcnJvcihlLHQsaSxzKXtsZXQgcj17ZXJyb3JUeXBlOmUsZXJyb3JEZXRhaWxzOmBbJHt0fV06ICR7aS5tZXNzYWdlfWAsZXJyb3JGYXRhbDpzfHwhMX07dGhpcy5fcGxheWVyLmVtaXQoZyxyKX1zZWVrKGUpe2lmKCF0aGlzLl9jb250ZXh0Lm9uTWV0YURhdGEpcmV0dXJuIHZvaWQgdGhpcy5sb2FkTWV0YSgpO2lmKCF0aGlzLmlzU2Vla2FibGUpcmV0dXJuO3RoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJMT0FERVJfQlVGRkVSXCIpLmNsZWFyKCk7Y29uc3R7cHJlbG9hZFRpbWU6dD0xNX09dGhpcy5fcGxheWVyLmNvbmZpZyxpPXRoaXMuZ2V0U2Vla1JhbmdlKGUsdCk7dGhpcy5zdGF0ZS5yYW5nZT1pLHRoaXMuY29tcGF0JiZ0aGlzLmNvbXBhdC5yZXNldCgpLHRoaXMubG9hZERhdGEoKX1sb2FkTmV4dChlKXt0aGlzLl9jb250ZXh0Lm9uTWV0YURhdGEmJih0aGlzLmxvYWRlci5sb2FkaW5nfHx0aGlzLmdldE5leHRSYW5nZShlKSYmdGhpcy5sb2FkRGF0YSgpKX1sb2FkRGF0YSgpe2NvbnN0e3N0YXJ0OmUsZW5kOnR9PXRoaXMuc3RhdGUucmFuZ2U7dGhpcy5lbWl0KGYuTEFERVJfU1RBUlQsdGhpcy5fcGxheWVyLmNvbmZpZy51cmwse2hlYWRlcnM6e21ldGhvZDpcImdldFwiLFJhbmdlOmBieXRlcz0ke2V9LSR7dH1gfX0pfWxvYWRNZXRhKCl7dGhpcy5sb2FkZXIubG9hZCh0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCx7aGVhZGVyczp7UmFuZ2U6XCJieXRlcz0wLVwifX0pLmNhdGNoKCgpPT57dGhpcy5zdGF0ZS5yYW5nZVN1cHBvcnQ9ITEsdGhpcy5sb2FkRmFsbGJhY2soKX0pfWxvYWRGYWxsYmFjaygpe3RoaXMubG9hZGVyLmxvYWQodGhpcy5fcGxheWVyLmNvbmZpZy51cmwpLmNhdGNoKCgpPT57dGhpcy5fcGxheWVyLmVtaXQoXCJlcnJvclwiLG5ldyBsLmRlZmF1bHQuRXJyb3JzKFwibmV0d29ya1wiLHRoaXMuX3BsYXllci5jb25maWcudXJsKSl9KX1nZXRTZWVrUmFuZ2UoZSx0KXtjb25zdHtrZXlmcmFtZXM6aX09dGhpcy5fY29udGV4dC5vbk1ldGFEYXRhLHM9dGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24scj1lLGE9ZSt0LG49Xy5maW5kRmlsZVBvc2l0aW9uKHIsaSk7cmV0dXJuIGE+PXN8fHI+PXM/e3N0YXJ0Om4sZW5kOlwiXCJ9OntzdGFydDpuLGVuZDpfLmZpbmRGaWxlUG9zaXRpb24oYSxpKX19Z2V0TmV4dFJhbmdlKGUpe2lmKFwiXCI9PT10aGlzLnN0YXRlLnJhbmdlLmVuZClyZXR1cm47Y29uc3R7ZW5kOnR9PXRoaXMuZ2V0U2Vla1JhbmdlKGUsdGhpcy5jb25maWcucHJlbG9hZFRpbWV8fDE1KTtyZXR1cm4gdDw9dGhpcy5zdGF0ZS5yYW5nZS5lbmQmJlwiXCIhPT10P3ZvaWQgMDoodGhpcy5zdGF0ZS5yYW5nZT17c3RhcnQ6dGhpcy5zdGF0ZS5yYW5nZS5lbmQrMSxlbmQ6dH0sITApfWRlc3Ryb3koKXt0aGlzLl9wbGF5ZXI9bnVsbCx0aGlzLm1zZT1udWxsLHRoaXMuc3RhdGU9e2luaXRTZWdtZW50QXJyaXZlZDohMSxyYW5nZTp7c3RhcnQ6MCxlbmQ6XCJcIn0scmFuZ2VTdXBwb3J0OiEwfX1nZXQgaXNTZWVrYWJsZSgpe3JldHVybiEhdGhpcy5zdGF0ZS5yYW5nZVN1cHBvcnQmJighdGhpcy5fY29udGV4dHx8IXRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmlzQ29tcGxldGUoKXx8bnVsbCE9PXRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmtleWZyYW1lcyYmdm9pZCAwIT09dGhpcy5fY29udGV4dC5tZWRpYUluZm8ua2V5ZnJhbWVzKX1nZXQgY29uZmlnKCl7cmV0dXJuIHRoaXMuX3BsYXllci5jb25maWd9Z2V0IGxvYWRlcigpe3JldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiRkVUQ0hfTE9BREVSXCIpfWdldCBjb21wYXQoKXtyZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIkNPTVBBVElCSUxJVFlcIil9fXQuZGVmYXVsdD1ffSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHMscj1pKDApLGE9aSg3KSxuPWkoOSksbz1pKDM1KSxkPShzPW8pJiZzLl9fZXNNb2R1bGU/czp7ZGVmYXVsdDpzfTtjb25zdCBsPXIuRVZFTlRTLkRFTVVYX0VWRU5UUztjbGFzcyBoe2NvbnN0cnVjdG9yKCl7dGhpcy5fZmlyc3RGcmFnbWVudExvYWRlZD0hMSx0aGlzLl90cmFja051bT0wLHRoaXMuX2hhc1NjcmlwdD0hMX1pbml0KCl7dGhpcy5vbihsLkRFTVVYX1NUQVJULHRoaXMuZG9QYXJzZUZsdi5iaW5kKHRoaXMpKX1zdGF0aWMgaXNGbHZGaWxlKGUpe3JldHVybiEoNzAhPT1lWzBdfHw3NiE9PWVbMV18fDg2IT09ZVsyXXx8MSE9PWVbM10pfXN0YXRpYyBnZXRQbGF5VHlwZShlKXtjb25zdCB0PXtoYXNWaWRlbzohMSxoYXNBdWRpbzohMX07cmV0dXJuITAmZSYmKHQuaGFzVmlkZW89ITApLCEwJmUmJih0Lmhhc0F1ZGlvPSEwKSx0fWRvUGFyc2VGbHYoKXtpZih0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkKXtpZih0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGg8MTEpcmV0dXJuO2xldCBlLHQ9MWU0O2Rve2U9dGhpcy5fcGFyc2VGbHZUYWcoKX13aGlsZShlJiZ0LS0gPjApO3RoaXMuZW1pdChsLkRFTVVYX0NPTVBMRVRFKX1lbHNle2lmKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aDwxMylyZXR1cm47Y29uc3QgZT10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxMyk7dGhpcy5wYXJzZUZsdkhlYWRlcihlKSx0aGlzLmRvUGFyc2VGbHYoKX19cGFyc2VGbHZIZWFkZXIoZSl7aWYoaC5pc0ZsdkZpbGUoZSkpe3RoaXMuX2ZpcnN0RnJhZ21lbnRMb2FkZWQ9ITA7Y29uc3QgdD1oLmdldFBsYXlUeXBlKGVbNF0pO3QuaGFzVmlkZW8mJnRoaXMuaW5pdFZpZGVvVHJhY2soKSx0Lmhhc0F1ZGlvJiZ0aGlzLmluaXRBdWRpb1RyYWNrKCl9ZWxzZSB0aGlzLmVtaXQobC5ERU1VWF9FUlJPUixuZXcgRXJyb3IoXCJpbnZhbGlkIGZsdiBmaWxlXCIpKSx0aGlzLmRvUGFyc2VGbHYoKTt0aGlzLmRvUGFyc2VGbHYoKX1pbml0VmlkZW9UcmFjaygpe3RoaXMuX3RyYWNrTnVtKys7bGV0IGU9bmV3IG4uVmlkZW9UcmFjaztlLm1ldGE9bmV3IHIuVmlkZW9UcmFja01ldGEsZS5pZD1lLm1ldGEuaWQ9dGhpcy5fdHJhY2tOdW0sdGhpcy50cmFja3MudmlkZW9UcmFjaz1lfWluaXRBdWRpb1RyYWNrKCl7dGhpcy5fdHJhY2tOdW0rKztsZXQgZT1uZXcgbi5BdWRpb1RyYWNrO2UubWV0YT1uZXcgci5BdWRpb1RyYWNrTWV0YSxlLmlkPWUubWV0YS5pZD10aGlzLl90cmFja051bSx0aGlzLnRyYWNrcy5hdWRpb1RyYWNrPWV9X3BhcnNlRmx2VGFnKCl7aWYodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoPDExKXJldHVybiBudWxsO2xldCBlPXRoaXMuX3BhcnNlRmx2VGFnSGVhZGVyKCk7cmV0dXJuIGUmJnRoaXMuX3Byb2Nlc3NDaHVuayhlKSxlfV9wYXJzZUZsdlRhZ0hlYWRlcigpe2xldCBlPTAsdD17fSxpPXRoaXMubG9hZGVyQnVmZmVyLnRvSW50KGUsMSk7aWYoZSs9MSx0LmZpbHRlcmVkPSgzMiZpKT4+PjUsdC50YWdUeXBlPTMxJmksdC5kYXRhc2l6ZT10aGlzLmxvYWRlckJ1ZmZlci50b0ludChlLDMpLGUrPTMsOCE9PXQudGFnVHlwZSYmOSE9PXQudGFnVHlwZSYmMTEhPT10LnRhZ1R5cGUmJjE4IT09dC50YWdUeXBlfHwwIT09dGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoOCwzKSlyZXR1cm4gdGhpcy5sb2FkZXJCdWZmZXImJnRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aD4wJiZ0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKSx0aGlzLmVtaXQobC5ERU1VWF9FUlJPUix0aGlzLlRBRyxuZXcgRXJyb3IoXCJ0YWdUeXBlIFwiK3QudGFnVHlwZSksITEpLG51bGw7aWYodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoPHQuZGF0YXNpemUrMTUpcmV0dXJuIG51bGw7dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoNCk7bGV0IHM9dGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwzKTt0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKTtsZXQgcj10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXTtyZXR1cm4gcj4wJiYocys9MTY3NzcyMTYqciksdC5kdHM9cyx0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKSx0fV9wcm9jZXNzQ2h1bmsoZSl7c3dpdGNoKGUudGFnVHlwZSl7Y2FzZSAxODp0aGlzLl9wYXJzZVNjcmlwdERhdGEoZSk7YnJlYWs7Y2FzZSA4OnRoaXMuX3BhcnNlQUFDRGF0YShlKTticmVhaztjYXNlIDk6dGhpcy5fcGFyc2VIZXZjRGF0YShlKTticmVhaztjYXNlIDExOnRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDMpO2JyZWFrO2RlZmF1bHQ6dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSl9fV9wYXJzZVNjcmlwdERhdGEoZSl7bGV0IHQ9dGhpcy50cmFja3MuYXVkaW9UcmFjayxpPXRoaXMudHJhY2tzLnZpZGVvVHJhY2sscz10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdChlLmRhdGFzaXplKTtjb25zdCByPShuZXcgZC5kZWZhdWx0KS5yZXNvbHZlKHMscy5sZW5ndGgpLGE9dGhpcy5fY29udGV4dC5vbk1ldGFEYXRhPXI/ci5vbk1ldGFEYXRhOnZvaWQgMDtpZih0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5kdXJhdGlvbj1hLmR1cmF0aW9uLHRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmhhc1ZpZGVvPWEuaGFzVmlkZW8sdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaHNhQXVkaW89YS5oYXNBdWRpbyx0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihlLmRhdGFzaXplKSYmKHRoaXMuZW1pdChsLk1FRElBX0lORk8pLHRoaXMuX2hhc1NjcmlwdD0hMCksdCYmIXQuaGFzU3BlY2lmaWNDb25maWcpe2xldCBlPXQubWV0YTtzd2l0Y2goYS5hdWRpb3NhbXBsZXJhdGUmJihlLnNhbXBsZVJhdGU9YS5hdWRpb3NhbXBsZXJhdGUpLGEuYXVkaW9jaGFubmVscyYmKGUuY2hhbm5lbENvdW50PWEuYXVkaW9jaGFubmVscyksYS5hdWRpb3NhbXBsZXJhdGUpe2Nhc2UgNDQxMDA6ZS5zYW1wbGVSYXRlSW5kZXg9NDticmVhaztjYXNlIDIyMDUwOmUuc2FtcGxlUmF0ZUluZGV4PTc7YnJlYWs7Y2FzZSAxMTAyNTplLnNhbXBsZVJhdGVJbmRleD0xMH19aWYoaSYmIWkuaGFzU3BlY2lmaWNDb25maWcpe2xldCBlPWkubWV0YTtpZihcIm51bWJlclwiPT10eXBlb2YgYS5mcmFtZXJhdGUpe2xldCB0PU1hdGguZmxvb3IoMWUzKmEuZnJhbWVyYXRlKTtpZih0PjApe2xldCBpPXQvMWUzO2UuZnJhbWVSYXRlfHwoZS5mcmFtZVJhdGU9e30pLGUuZnJhbWVSYXRlLmZpeGVkPSEwLGUuZnJhbWVSYXRlLmZwcz1pLGUuZnJhbWVSYXRlLmZwc19udW09dCxlLmZyYW1lUmF0ZS5mcHNfZGVuPTFlM319fX1fYWFjU2VxdWVuY2VIZWFkZXJQYXJzZXIoZSl7bGV0IHQ9e2hhc1NwZWNpZmljQ29uZmlnOiEwfTt0Lm9iamVjdFR5cGU9ZVsxXT4+PjMsdC5zYW1wbGVSYXRlSW5kZXg9KDcmZVsxXSk8PDF8ZVsyXT4+PjcsdC5hdWRpb3NhbXBsZXJhdGU9dGhpcy5fc3dpdGNoQXVkaW9TYW1wbGVSYXRlKHQuc2FtcGxlUmF0ZUluZGV4KSx0LmNoYW5uZWxDb3VudD0oMTIwJmVbMl0pPj4+Myx0LmZyYW1lTGVuZ3RoPSg0JmVbMl0pPj4+Mix0LmRlcGVuZHNPbkNvcmVDb2Rlcj0oMiZlWzJdKT4+PjEsdC5leHRlbnNpb25GbGFnSW5kZXg9MSZlWzJdLHQuY29kZWM9YG1wNGEuNDAuJHt0Lm9iamVjdFR5cGV9YDtsZXQgaSxzLHI9d2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSxhPXQuc2FtcGxlUmF0ZUluZGV4O3JldHVybi0xIT09ci5pbmRleE9mKFwiZmlyZWZveFwiKT90LnNhbXBsZVJhdGVJbmRleD49Nj8odC5vYmplY3RUeXBlPTUscz1uZXcgQXJyYXkoNCksaT1hLTMpOih0Lm9iamVjdFR5cGU9MixzPW5ldyBBcnJheSgyKSxpPWEpOi0xIT09ci5pbmRleE9mKFwiYW5kcm9pZFwiKT8odC5vYmplY3RUeXBlPTIscz1uZXcgQXJyYXkoMiksaT1hKToodC5vYmplY3RUeXBlPTUsaT10LnNhbXBsZVJhdGVJbmRleCxzPW5ldyBBcnJheSg0KSx0LnNhbXBsZVJhdGVJbmRleD49Nj9pPXQuc2FtcGxlUmF0ZUluZGV4LTM6MT09PXQuY2hhbm5lbENvdW50JiYodC5vYmplY3RUeXBlPTIscz1uZXcgQXJyYXkoMiksaT10LnNhbXBsZVJhdGVJbmRleCkpLHNbMF09dC5vYmplY3RUeXBlPDwzLHNbMF18PSgxNSZ0LnNhbXBsZVJhdGVJbmRleCk+Pj4xLHNbMV09KDE1JnQuc2FtcGxlUmF0ZUluZGV4KTw8NyxzWzFdfD0oMTUmdC5jaGFubmVsQ291bnQpPDwzLDU9PT10Lm9iamVjdFR5cGUmJihzWzFdfD0oMTUmaSk+Pj4xLHNbMl09KDEmaSk8PDcsc1syXXw9OCxzWzNdPTApLHQuY29uZmlnPXMsdH1fcGFyc2VBQUNEYXRhKGUpe2xldCB0PXRoaXMudHJhY2tzLmF1ZGlvVHJhY2s7aWYoIXQpcmV0dXJuO2xldCBpPXQubWV0YTtpfHwodC5tZXRhPW5ldyByLkF1ZGlvVHJhY2tNZXRhLGk9dC5tZXRhKTtsZXQgcz10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXTtlLmRhdGE9dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoZS5kYXRhc2l6ZS0xKTtsZXQgYT0oMjQwJnMpPj4+NDt0LmZvcm1hdD1hLDEwIT09YSYmdGhpcy5lbWl0KGwuREVNVVhfRVJST1IsbmV3IEVycm9yKGBpbnZhbGlkIGF1ZGlvIGZvcm1hdDogJHthfWApKSwxMCE9PWF8fHRoaXMuX2hhc0F1ZGlvU2VxdWVuY2V8fChpLnNhbXBsZVJhdGU9dGhpcy5fc3dpdGNoQXVkaW9TYW1wbGluZ0ZyZXF1ZW5jeShzKSxpLnNhbXBsZVJhdGVJbmRleD0oMTImcyk+Pj4yLGkuZnJhbWVMZW50aD0oMiZzKT4+PjEsaS5jaGFubmVsQ291bnQ9MSZzLGkucmVmU2FtcGxlRHVyYXRpb249TWF0aC5mbG9vcigxMDI0L2kuYXVkaW9TYW1wbGVSYXRlKmkudGltZXNjYWxlKSk7bGV0IG49aS5hdWRpb1NhbXBsZVJhdGUsbz1pLnNhbXBsZVJhdGVJbmRleCxkPWkucmVmU2FtcGxlRHVyYXRpb247ZGVsZXRlIGUudGFnVHlwZTtsZXQgaD10aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihlLmRhdGFzaXplKTtpZigwPT09ZS5kYXRhWzBdKXtsZXQgdD10aGlzLl9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlcihlLmRhdGEpO249dC5hdWRpb3NhbXBsZXJhdGV8fGkuYXVkaW9TYW1wbGVSYXRlLG89dC5zYW1wbGVSYXRlSW5kZXh8fGkuc2FtcGxlUmF0ZUluZGV4LGQ9TWF0aC5mbG9vcigxMDI0L24qaS50aW1lc2NhbGUpLGkuY2hhbm5lbENvdW50PXQuY2hhbm5lbENvdW50LGkuc2FtcGxlUmF0ZT1uLGkuc2FtcGxlUmF0ZUluZGV4PW8saS5yZWZTYW1wbGVEdXJhdGlvbj1kLGkuZHVyYXRpb249dGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24qaS50aW1lc2NhbGUsaS5jb25maWc9dC5jb25maWc7Y29uc3Qgcz10aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5hdWRpbztzLmNvZGVjPXQuY29kZWMscy5jaGFubmVsQ291bnQ9dC5jaGFubmVsQ291bnQscy5zYW1wbGVSYXRlPW4scy5zYW1wbGVSYXRlSW5kZXg9dC5hdWRpb1NhbXBsZVJhdGVJbmRleCx0aGlzLl9oYXNTY3JpcHQmJiF0aGlzLl9oYXNBdWRpb1NlcXVlbmNlP3RoaXMuZW1pdChsLk1FVEFEQVRBX1BBUlNFRCxcImF1ZGlvXCIpOnRoaXMuX2hhc1NjcmlwdCYmdGhpcy5faGFzQXVkaW9TZXF1ZW5jZSYmdGhpcy5lbWl0KGwuQVVESU9fTUVUQURBVEFfQ0hBTkdFKSx0aGlzLl9oYXNBdWRpb1NlcXVlbmNlPSEwLHRoaXMuX21ldGFDaGFuZ2U9ITB9ZWxzZSB0aGlzLl9tZXRhQ2hhbmdlJiYoZS5vcHRpb25zPXttZXRhOnQubWV0YX0sdGhpcy5fbWV0YUNoYW5nZT0hMSksZS5kYXRhPWUuZGF0YS5zbGljZSgxLGUuZGF0YS5sZW5ndGgpLHQuc2FtcGxlcy5wdXNoKGUpO2h8fHRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLHRoaXMuVEFHLG5ldyBFcnJvcihcIlRBRyBsZW5ndGggZXJyb3IgYXQgXCIrZS5kYXRhc2l6ZSksITEpfV9wYXJzZUhldmNEYXRhKGUpe2xldCB0PXRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdO2UuZnJhbWVUeXBlPSgyNDAmdCk+Pj40LGUuaXNLZXlmcmFtZT0xPT09ZS5mcmFtZVR5cGU7bGV0IGk9MTUmdDtpZih0aGlzLnRyYWNrcy52aWRlb1RyYWNrLmNvZGVjSUQ9aSxlLmF2Y1BhY2tldFR5cGU9dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF0sZS5jdHM9dGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwzKSx0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKSwxMj09PWkpe2NvbnN0IHQ9dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoZS5kYXRhc2l6ZS01KTtpZihlLmRhdGE9dCwwIT09TnVtYmVyLnBhcnNlSW50KGUuYXZjUGFja2V0VHlwZSkpe3RoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGUuZGF0YXNpemUpfHx0aGlzLmVtaXQobC5ERU1VWF9FUlJPUix0aGlzLlRBRyxuZXcgRXJyb3IoYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2UuZGF0YXNpemV9YCksITEpO2xldCB0PXt9LGk9MDtmb3IodC5jdHM9ZS5jdHMsdC5kdHM9ZS5kdHM7ZS5kYXRhLmxlbmd0aD5pOyl7bGV0IHM9ZS5kYXRhLnNsaWNlKE51bWJlci5wYXJzZUludChpKSw0K2kpO3Quc2l6ZT1zWzNdLHQuc2l6ZSs9MjU2KnNbMl0sdC5zaXplKz0yNTYqc1sxXSoyNTYsdC5zaXplKz0yNTYqc1swXSoyNTYqMjU2LGkrPTQsdC5kYXRhPWUuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQoaSksdC5zaXplK2kpLGkrPXQuc2l6ZSx0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaCh0KSx0aGlzLmVtaXQobC5NRVRBREFUQV9QQVJTRUQsXCJ2aWRlb1wiKX19ZWxzZSAwPT09TnVtYmVyLnBhcnNlSW50KGUuYXZjUGFja2V0VHlwZSkmJih0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihlLmRhdGFzaXplKT90aGlzLmVtaXQobC5NRVRBREFUQV9QQVJTRUQsXCJ2aWRlb1wiKTp0aGlzLmVtaXQobC5ERU1VWF9FUlJPUix0aGlzLlRBRyxuZXcgRXJyb3IoYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2UuZGF0YXNpemV9YCksITEpKX1lbHNlIGlmKDc9PT1pKXtsZXQgdD10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdChlLmRhdGFzaXplLTUpO2lmKDA9PT10WzRdJiYwPT09dFs1XSYmMD09PXRbNl0mJjE9PT10WzddKXtsZXQgZT0wO2ZvcihsZXQgaT0wO2k8NDtpKyspZT0yNTYqZSt0W2ldO2UtPTQsKHQ9dC5zbGljZSg0LHQubGVuZ3RoKSlbM109ZSUyNTYsZT0oZS10WzNdKS8yNTYsdFsyXT1lJTI1NixlPShlLXRbMl0pLzI1Nix0WzFdPWUlMjU2LHRbMF09KGUtdFsxXSkvMjU2fWlmKGUuZGF0YT10LDA9PT1lLmF2Y1BhY2tldFR5cGUpe3RoaXMuX2F2Y1NlcXVlbmNlSGVhZGVyUGFyc2VyKGUuZGF0YSksdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoZS5kYXRhc2l6ZSkmJih0aGlzLl9oYXNTY3JpcHQmJiF0aGlzLl9oYXNWaWRlb1NlcXVlbmNlP3RoaXMuZW1pdChsLk1FVEFEQVRBX1BBUlNFRCxcInZpZGVvXCIpOnRoaXMuX2hhc1NjcmlwdCYmdGhpcy5faGFzVmlkZW9TZXF1ZW5jZSYmdGhpcy5lbWl0KGwuVklERU9fTUVUQURBVEFfQ0hBTkdFKSx0aGlzLl9oYXNWaWRlb1NlcXVlbmNlPSEwKSx0aGlzLl9tZXRhQ2hhbmdlPSEwfWVsc2V7aWYoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGUuZGF0YXNpemUpKXJldHVybiB2b2lkIHRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLHRoaXMuVEFHLG5ldyBFcnJvcihgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7ZS5kYXRhc2l6ZX1gKSwhMSk7dGhpcy5fbWV0YUNoYW5nZSYmKGUub3B0aW9ucz17bWV0YTpPYmplY3QuYXNzaWduKHt9LHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YSl9LHRoaXMuX21ldGFDaGFuZ2U9ITEpLHRoaXMudHJhY2tzLnZpZGVvVHJhY2suc2FtcGxlcy5wdXNoKGUpfX1lbHNlIHRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLHRoaXMuVEFHLG5ldyBFcnJvcihgdmlkZW8gY29kZWlkIGlzICR7aX1gKSwhMSksZS5kYXRhPXRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGUuZGF0YXNpemUtMSksdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoZS5kYXRhc2l6ZSl8fHRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLHRoaXMuVEFHLG5ldyBFcnJvcihgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7ZS5kYXRhc2l6ZX1gKSwhMSksdGhpcy50cmFja3MudmlkZW9UcmFjay5zYW1wbGVzLnB1c2goZSksdGhpcy5lbWl0KGwuREVNVVhfQ09NUExFVEUpO2RlbGV0ZSBlLnRhZ1R5cGV9X2F2Y1NlcXVlbmNlSGVhZGVyUGFyc2VyKGUpe2xldCB0PXRoaXMudHJhY2tzLnZpZGVvVHJhY2s7aWYoIXQpcmV0dXJuO2xldCBpPTA7dC5tZXRhfHwodC5tZXRhPW5ldyByLlZpZGVvVHJhY2tNZXRhKTtsZXQgcz10Lm1ldGE7cy5jb25maWd1cmF0aW9uVmVyc2lvbj1lWzBdLHMuYXZjUHJvZmlsZUluZGljYXRpb249ZVsxXSxzLnByb2ZpbGVDb21wYXRpYmlsaXR5PWVbMl0scy5hdmNMZXZlbEluZGljYXRpb249ZVszXS8xMCxzLm5hbFVuaXRMZW5ndGg9MSsoMyZlWzRdKTtsZXQgbj0zMSZlWzVdO2k9NjtsZXQgbz17fTtmb3IobGV0IHQ9MDt0PG47dCsrKXtsZXQgdD0yNTUqZVtpXStlW2krMV07aSs9MjtsZXQgcj1uZXcgVWludDhBcnJheSh0KTtmb3IobGV0IHM9MDtzPHQ7cysrKXJbc109ZVtpK3NdO2xldCBuPVwiYXZjMS5cIjtmb3IobGV0IGU9MTtlPDQ7ZSsrKXtsZXQgdD1yW2VdLnRvU3RyaW5nKDE2KTt0Lmxlbmd0aDwyJiYodD1cIjBcIit0KSxuKz10fXMuY29kZWM9bixpKz10LHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YS5zcHM9cixvPWEuU3BzUGFyc2VyLnBhcnNlU1BTKHIpfWxldCBkPWVbaV07aSsrO2ZvcihsZXQgdD0wO3Q8ZDt0Kyspe2xldCB0PTI1NSplW2ldK2VbaSsxXTtpKz0yO2xldCBzPW5ldyBVaW50OEFycmF5KHQpO2ZvcihsZXQgcj0wO3I8dDtyKyspc1tyXT1lW2krcl07aSs9dCx0aGlzLnRyYWNrcy52aWRlb1RyYWNrLm1ldGEucHBzPXN9T2JqZWN0LmFzc2lnbihzLGEuU3BzUGFyc2VyLnRvVmlkZW9NZXRhKG8pKTtjb25zdCBsPXRoaXMuX2NvbnRleHQubWVkaWFJbmZvLnZpZGVvO2wuY29kZWM9cy5jb2RlYyxsLnByb2ZpbGU9cy5wcm9maWxlLGwubGV2ZWw9cy5sZXZlbCxsLmNocm9tYUZvcm1hdD1zLmNocm9tYUZvcm1hdCxsLmZyYW1lUmF0ZT1zLmZyYW1lUmF0ZSxsLnBhclJhdGlvPXMucGFyUmF0aW8sbC53aWR0aD1sLndpZHRoPT09cy5wcmVzZW50V2lkdGg/bC53aWR0aDpzLnByZXNlbnRXaWR0aCxsLmhlaWdodD1sLmhlaWdodD09PXMucHJlc2VudEhlaWdodD9sLndpZHRoOnMucHJlc2VudEhlaWdodCxzLmR1cmF0aW9uPXRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmR1cmF0aW9uKnMudGltZXNjYWxlLHMuYXZjYz1uZXcgVWludDhBcnJheShlLmxlbmd0aCkscy5hdmNjLnNldChlKSx0Lm1ldGE9c31fc3dpdGNoQXVkaW9TYW1wbGVSYXRlKGUpe3JldHVybls5NmUzLDg4MjAwLDY0ZTMsNDhlMyw0NDEwMCwzMmUzLDI0ZTMsMjIwNTAsMTZlMywxMmUzLDExMDI1LDhlMyw3MzUwXVtlXX1fc3dpdGNoQXVkaW9TYW1wbGluZ0ZyZXF1ZW5jeShlKXtyZXR1cm5bNTUwMCwxMTAyNSwyMjA1MCw0NDEwMCw0OGUzXVsoMTImZSk+Pj4yXX1fc3dpdGNoQXVkaW9DaGFubmVsKGUpe3JldHVyblsxLDJdWzEmZV19X2RhdGFzaXplVmFsaWRhdG9yKGUpe2xldCB0PXRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDAsNCk7cmV0dXJuIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpLHQ9PT1lKzExfWdldCBsb2FkZXJCdWZmZXIoKXtjb25zdCBlPXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJMT0FERVJfQlVGRkVSXCIpO2lmKGUpcmV0dXJuIGU7dGhpcy5lbWl0KGwuREVNVVhfRVJST1IsbmV3IEVycm9yKFwi5om+5LiN5YiwIGxvYWRlckJ1ZmZlciDlrp7kvotcIikpfWdldCB0cmFja3MoKXtyZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlRSQUNLU1wiKX1nZXQgbG9nZ2VyKCl7cmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJMT0dHRVJcIil9fXQuZGVmYXVsdD1ofSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHMscj1pKDgpLGE9KHM9cikmJnMuX19lc01vZHVsZT9zOntkZWZhdWx0OnN9O2NsYXNzIG57c3RhdGljIGdldE5hbHVuaXRzKGUpe2lmKGUubGVuZ3RoLWUucG9zaXRpb248NClyZXR1cm5bXTtsZXQgdD1lLmRhdGF2aWV3LGk9ZS5wb3NpdGlvbjtyZXR1cm4gMT09PXQuZ2V0SW50MzIoaSl8fDA9PT10LmdldEludDE2KGkpJiYxPT09dC5nZXRJbnQ4KGkrMik/bi5nZXRBbm5leGJOYWxzKGUpOm4uZ2V0QXZjY05hbHMoZSl9c3RhdGljIGdldEFubmV4Yk5hbHMoZSl7bGV0IHQ9W10saT1uLmdldEhlYWRlclBvc2l0aW9uQW5uZXhCKGUpLHM9aS5wb3Mscj1zO2Zvcig7czxlLmxlbmd0aC00Oyl7bGV0IGE9ZS5idWZmZXIuc2xpY2UocyxzK2kuaGVhZGVyTGVuZ3RoKTtpLnBvcz09PWUucG9zaXRpb24mJmUuc2tpcChpLmhlYWRlckxlbmd0aCkscj0oaT1uLmdldEhlYWRlclBvc2l0aW9uQW5uZXhCKGUpKS5wb3M7bGV0IG89e2hlYWRlcjphLGJvZHk6bmV3IFVpbnQ4QXJyYXkoZS5idWZmZXIuc2xpY2UocythLmJ5dGVMZW5ndGgscikpfTtuLmFuYWx5c2VOYWwobyksdC5wdXNoKG8pLGUuc2tpcChyLWUucG9zaXRpb24pLHM9cn1yZXR1cm4gdH1zdGF0aWMgZ2V0QXZjY05hbHMoZSl7bGV0IHQ9W107Zm9yKDtlLnBvc2l0aW9uPGUubGVuZ3RoLTQ7KXtsZXQgaT1lLmRhdGF2aWV3LmdldEludDMyKCk7aWYoIShlLmxlbmd0aC1lLnBvc2l0aW9uPj1pKSlicmVhazt7bGV0IHM9ZS5idWZmZXIuc2xpY2UoZS5wb3NpdGlvbixlLnBvc2l0aW9uKzQpO2Uuc2tpcCg0KTtsZXQgcj1lLmJ1ZmZlci5zbGljZShlLnBvc2l0aW9uLGUucG9zaXRpb24raSk7ZS5za2lwKGkpO2xldCBhPXtoZWFkZXI6cyxib2R5OnJ9O24uYW5hbHlzZU5hbChhKSx0LnB1c2goYSl9fXJldHVybiB0fXN0YXRpYyBhbmFseXNlTmFsKGUpe3N3aXRjaCgzMSZlLmJvZHlbMF0pe2Nhc2UgMTplLm5kcj0hMDticmVhaztjYXNlIDU6ZS5pZHI9ITA7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNzplLnNwcz1hLmRlZmF1bHQucGFyc2VTUFMoZS5ib2R5KTticmVhaztjYXNlIDg6ZS5wcHM9ITB9fXN0YXRpYyBnZXRIZWFkZXJQb3NpdGlvbkFubmV4QihlKXtsZXQgdD1lLnBvc2l0aW9uLGk9MDtmb3IoOzMhPT1pJiY0IT09aSYmdDxlLmxlbmd0aC00OykwPT09ZS5kYXRhdmlldy5nZXRJbnQxNih0KT8xPT09ZS5kYXRhdmlldy5nZXRJbnQxNih0KzIpP2k9NDoxPT09ZS5kYXRhdmlldy5nZXRJbnQ4KHQrMik/aT0zOnQrKzp0Kys7cmV0dXJuIHQ9PT1lLmxlbmd0aC00JiYoMD09PWUuZGF0YXZpZXcuZ2V0SW50MTYodCk/MT09PWUuZGF0YXZpZXcuZ2V0SW50MTYodCsyKSYmKGk9NCk6KHQrKywwPT09ZS5kYXRhdmlldy5nZXRJbnQxNih0KSYmMT09PWUuZGF0YXZpZXcuZ2V0SW50OCh0KT9pPTM6dD1lLmxlbmd0aCkpLHtwb3M6dCxoZWFkZXJMZW5ndGg6aX19c3RhdGljIGdldEF2Y2MoZSx0KXtsZXQgaT1uZXcgVWludDhBcnJheShlLmJ5dGVMZW5ndGgrdC5ieXRlTGVuZ3RoKzExKTtpWzBdPTEsaVsxXT1lWzFdLGlbMl09ZVsyXSxpWzNdPWVbM10saVs0XT0yNTUsaVs1XT0yMjU7bGV0IHM9NjtyZXR1cm4gaS5zZXQobmV3IFVpbnQ4QXJyYXkoW2UuYnl0ZUxlbmd0aD4+PjgmMjU1LDI1NSZlLmJ5dGVMZW5ndGhdKSxzKSxzKz0yLGkuc2V0KGUscyksaVtzKz1lLmJ5dGVMZW5ndGhdPTEscysrLGkuc2V0KG5ldyBVaW50OEFycmF5KFt0LmJ5dGVMZW5ndGg+Pj44JjI1NSwyNTUmdC5ieXRlTGVuZ3RoXSkscykscys9MixpLnNldCh0LHMpLGl9fXQuZGVmYXVsdD1ufSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMuVEFHPVwiR29sb21iXCIsdGhpcy5fYnVmZmVyPWUsdGhpcy5fYnVmZmVySW5kZXg9MCx0aGlzLl90b3RhbEJ5dGVzPWUuYnl0ZUxlbmd0aCx0aGlzLl90b3RhbEJpdHM9OCplLmJ5dGVMZW5ndGgsdGhpcy5fY3VycmVudFdvcmQ9MCx0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0PTB9ZGVzdHJveSgpe3RoaXMuX2J1ZmZlcj1udWxsfV9maWxsQ3VycmVudFdvcmQoKXtsZXQgZT10aGlzLl90b3RhbEJ5dGVzLXRoaXMuX2J1ZmZlckluZGV4LHQ9TWF0aC5taW4oNCxlKSxpPW5ldyBVaW50OEFycmF5KDQpO2kuc2V0KHRoaXMuX2J1ZmZlci5zdWJhcnJheSh0aGlzLl9idWZmZXJJbmRleCx0aGlzLl9idWZmZXJJbmRleCt0KSksdGhpcy5fY3VycmVudFdvcmQ9bmV3IERhdGFWaWV3KGkuYnVmZmVyKS5nZXRVaW50MzIoMCksdGhpcy5fYnVmZmVySW5kZXgrPXQsdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdD04KnR9cmVhZEJpdHMoZSl7bGV0IHQ9TWF0aC5taW4odGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCxlKSxpPXRoaXMuX2N1cnJlbnRXb3JkPj4+MzItdDtpZihlPjMyKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZWFkIG1vcmUgdGhhbiAzMiBiaXRzIGF0IGEgdGltZVwiKTtyZXR1cm4gdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdC09dCx0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0PjA/dGhpcy5fY3VycmVudFdvcmQ8PD10OnRoaXMuX3RvdGFsQnl0ZXMtdGhpcy5fYnVmZmVySW5kZXg+MCYmdGhpcy5fZmlsbEN1cnJlbnRXb3JkKCksKHQ9ZS10KT4wJiZ0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0P2k8PHR8dGhpcy5yZWFkQml0cyh0KTppfXJlYWRCb29sKCl7cmV0dXJuIDE9PT10aGlzLnJlYWRCaXRzKDEpfXJlYWRCeXRlKCl7cmV0dXJuIHRoaXMucmVhZEJpdHMoOCl9X3NraXBMZWFkaW5nWmVybygpe2xldCBlO2ZvcihlPTA7ZTx0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0O2UrKylpZigwIT0odGhpcy5fY3VycmVudFdvcmQmMjE0NzQ4MzY0OD4+PmUpKXJldHVybiB0aGlzLl9jdXJyZW50V29yZDw8PWUsdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdC09ZSxlO3JldHVybiB0aGlzLl9maWxsQ3VycmVudFdvcmQoKSxlK3RoaXMuX3NraXBMZWFkaW5nWmVybygpfXJlYWRVRUcoKXtsZXQgZT10aGlzLl9za2lwTGVhZGluZ1plcm8oKTtyZXR1cm4gdGhpcy5yZWFkQml0cyhlKzEpLTF9cmVhZFNFRygpe2xldCBlPXRoaXMucmVhZFVFRygpO3JldHVybiAxJmU/ZSsxPj4+MTotMSooZT4+PjEpfX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcyxyPWkoMCksYT1pKDMzKSxuPShzPWEpJiZzLl9fZXNNb2R1bGU/czp7ZGVmYXVsdDpzfTtjb25zdHtSRU1VWF9FVkVOVFM6byxMT0FERVJfRVZFTlRTOmR9PXIuRVZFTlRTO2NsYXNzIGx7Y29uc3RydWN0b3IoKXt0aGlzLm5leHRBdWRpb0R0cz0wLHRoaXMubmV4dFZpZGVvRHRzPTAsdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuPTAsdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuPTAsdGhpcy5sYXN0VmlkZW9EdHM9dm9pZCAwLHRoaXMubGFzdEF1ZGlvRHRzPXZvaWQgMCx0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50PTAsdGhpcy5hbGxWaWRlb1NhbXBsZXNDb3VudD0wLHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGU9bnVsbCx0aGlzLl9maXJzdFZpZGVvU2FtcGxlPW51bGwsdGhpcy5maWxsZWRBdWRpb1NhbXBsZXM9W10sdGhpcy5maWxsZWRWaWRlb1NhbXBsZXM9W10sdGhpcy52aWRlb0xhc3RTYW1wbGU9bnVsbCx0aGlzLmF1ZGlvTGFzdFNhbXBsZT1udWxsLHRoaXMuX3ZpZGVvTGFyZ2VHYXA9MCx0aGlzLl9hdWRpb0xhcmdlR2FwPTB9aW5pdCgpe3RoaXMuYmVmb3JlKG8uUkVNVVhfTUVESUEsdGhpcy5kb0ZpeC5iaW5kKHRoaXMpKSx0aGlzLm9uKGQuTE9BREVSX0NPTVBMRVRFLCgpPT57dGhpcy52aWRlb0xhc3RTYW1wbGUmJnRoaXMudmlkZW9UcmFjay5zYW1wbGVzLnVuc2hpZnQodGhpcy52aWRlb0xhc3RTYW1wbGUpfSl9cmVzZXQoKXt0aGlzLm5leHRBdWRpb0R0cz1udWxsLHRoaXMubmV4dFZpZGVvRHRzPW51bGwsdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuPTAsdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuPTAsdGhpcy5sYXN0VmlkZW9EdHM9dm9pZCAwLHRoaXMubGFzdEF1ZGlvRHRzPXZvaWQgMCx0aGlzLnZpZGVvTGFzdFNhbXBsZT1udWxsLHRoaXMuYXVkaW9MYXN0U2FtcGxlPW51bGwsdGhpcy5maWxsZWRBdWRpb1NhbXBsZXM9W10sdGhpcy5maWxsZWRWaWRlb1NhbXBsZXM9W119ZG9GaXgoKXtjb25zdHtpc0ZpcnN0QXVkaW9TYW1wbGVzOmUsaXNGaXJzdFZpZGVvU2FtcGxlczp0fT10aGlzLmdldEZpcnN0U2FtcGxlKCk7dGhpcy5yZWNvcmRTYW1wbGVzQ291bnQoKSx0aGlzLl9maXJzdFZpZGVvU2FtcGxlJiZ0aGlzLmZpeFJlZlNhbXBsZUR1cmF0aW9uKHRoaXMudmlkZW9UcmFjay5tZXRhLHRoaXMudmlkZW9UcmFjay5zYW1wbGVzKSx0aGlzLl9maXJzdEF1ZGlvU2FtcGxlJiZ0aGlzLmZpeFJlZlNhbXBsZUR1cmF0aW9uKHRoaXMuYXVkaW9UcmFjay5tZXRhLHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzKTtjb25zdHtjaGFuZ2VkOmksY2hhbmdlZElkeDpzfT1sLmRldGFjdENoYW5nZVN0cmVhbSh0aGlzLnZpZGVvVHJhY2suc2FtcGxlcyk7aSYmIWU/dGhpcy5maXhDaGFuZ2VTdHJlYW1WaWRlbyhzKTp0aGlzLmRvRml4VmlkZW8odCk7Y29uc3R7Y2hhbmdlZDpyLGNoYW5nZWRJZHg6YX09bC5kZXRhY3RDaGFuZ2VTdHJlYW0odGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMpO3I/dGhpcy5maXhDaGFuZ2VTdHJlYW1BdWRpbyhhKTp0aGlzLmRvRml4QXVkaW8oZSksdGhpcy5yZW1vdmVJbnZhbGlkU2FtcGxlcygpfWRvRml4VmlkZW8oZSx0KXtsZXR7c2FtcGxlczppLG1ldGE6c309dGhpcy52aWRlb1RyYWNrO2ZvcihsZXQgZT0wLHQ9aS5sZW5ndGg7ZTx0O2UrKyl7Y29uc3QgdD1pW2VdO3Qub3JpZ2luRHRzPXQuZHRzfWlmKHMuZnJhbWVSYXRlJiYhMT09PXMuZnJhbWVSYXRlLmZpeGVkKXJldHVybjtpZighaXx8IWkubGVuZ3RofHwhdGhpcy5fZmlyc3RWaWRlb1NhbXBsZSlyZXR1cm47Y29uc3Qgcj1pWzBdO2lmKHRoaXMuX3ZpZGVvTGFyZ2VHYXA+MCYmbC5kb0ZpeExhcmdlR2FwKGksdGhpcy5fdmlkZW9MYXJnZUdhcCksci5kdHMhPT10aGlzLl9maXJzdFZpZGVvU2FtcGxlLmR0cyYmdCYmKHQmJih0aGlzLm5leHRWaWRlb0R0cz10KSx0aGlzLl92aWRlb0xhcmdlR2FwPXRoaXMubmV4dFZpZGVvRHRzLXIuZHRzLGwuZG9GaXhMYXJnZUdhcChpLHRoaXMuX3ZpZGVvTGFyZ2VHYXApKSxlJiZ0aGlzLl9maXJzdEF1ZGlvU2FtcGxlKXtjb25zdCBlPXRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzLHQ9ZS10aGlzLl9maXJzdEF1ZGlvU2FtcGxlLmR0cztpZih0PjIqcy5yZWZTYW1wbGVEdXJhdGlvbil7Y29uc3QgYT1NYXRoLmZsb29yKHQvcy5yZWZTYW1wbGVEdXJhdGlvbik7Zm9yKGxldCB0PTA7dDxhO3QrKyl7Y29uc3QgYT1PYmplY3QuYXNzaWduKHt9LHIpO2EuZHRzPWUtKHQrMSkqcy5yZWZTYW1wbGVEdXJhdGlvbixhLnB0cz1hLmR0cythLmN0cyxpLnVuc2hpZnQoYSksdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMucHVzaCh7ZHRzOmEuZHRzLHNpemU6YS5kYXRhLmJ5dGVMZW5ndGh9KX19ZWxzZSB0PC0yKnMucmVmU2FtcGxlRHVyYXRpb24mJih0aGlzLl92aWRlb0xhcmdlR2FwPS0xKnQsbC5kb0ZpeExhcmdlR2FwKGksLTEqdCkpfWNvbnN0IGE9aS5wb3AoKTtpZihpLmxlbmd0aCYmKGlbaS5sZW5ndGgtMV0uZHVyYXRpb249YS5kdHMtaVtpLmxlbmd0aC0xXS5kdHMpLHRoaXMudmlkZW9MYXN0U2FtcGxlKXtjb25zdCBlPXRoaXMudmlkZW9MYXN0U2FtcGxlLHQ9ci5kdHMtZS5kdHM7ZS5kdXJhdGlvbj4wJiYoZS5kdXJhdGlvbj10LGkudW5zaGlmdChlKSl9dGhpcy52aWRlb0xhc3RTYW1wbGU9YSx0aGlzLnZpZGVvVHJhY2suc2FtcGxlcz1pfWRvRml4QXVkaW8oZSx0KXtsZXR7c2FtcGxlczppLG1ldGE6c309dGhpcy5hdWRpb1RyYWNrO2lmKCFpfHwhaS5sZW5ndGgpcmV0dXJuO2ZvcihsZXQgZT0wLHQ9aS5sZW5ndGg7ZTx0O2UrKyl7Y29uc3QgdD1pW2VdO3Qub3JpZ2luRHRzPXQuZHRzfWNvbnN0IHI9aS5sZW5ndGgsYT1uLmRlZmF1bHQuZ2V0U2lsZW50RnJhbWUocy5jb2RlYyxzLmNoYW5uZWxDb3VudCksbz10aGlzLl9maXJzdEF1ZGlvU2FtcGxlLGQ9aVswXTtpZih0aGlzLl9hdWRpb0xhcmdlR2FwPjAmJmwuZG9GaXhMYXJnZUdhcChpLHRoaXMuX2F1ZGlvTGFyZ2VHYXApLGQuZHRzIT09dGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHMmJih0fHxsLmRldGVjdExhcmdlR2FwKHRoaXMubmV4dEF1ZGlvRHRzLGQpKSYmKHQmJih0aGlzLm5leHRBdWRpb0R0cz10KSx0aGlzLl9hdWRpb0xhcmdlR2FwPXRoaXMubmV4dEF1ZGlvRHRzLWQuZHRzLGwuZG9GaXhMYXJnZUdhcChpLHRoaXMuX2F1ZGlvTGFyZ2VHYXApKSx0aGlzLl9maXJzdFZpZGVvU2FtcGxlJiZlKXtjb25zdCBlPXRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUucHRzP3RoaXMuX2ZpcnN0VmlkZW9TYW1wbGUucHRzOnRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzK3RoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuY3RzLHQ9by5kdHMtZTtpZih0PnMucmVmU2FtcGxlRHVyYXRpb24pe2NvbnN0IHQ9TWF0aC5mbG9vcigoby5kdHMtZSkvcy5yZWZTYW1wbGVEdXJhdGlvbik7Zm9yKGxldCBlPTA7ZTx0O2UrKyl7Y29uc3QgdD17ZGF0YTphLGRhdGFzaXplOmEuYnl0ZUxlbmd0aCxkdHM6by5kdHMtKGUrMSkqcy5yZWZTYW1wbGVEdXJhdGlvbixmaWx0ZXJlZDowfTtpLnVuc2hpZnQodCksdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMucHVzaCh7ZHRzOnQuZHRzLHNpemU6dC5kYXRhLmJ5dGVMZW5ndGh9KX19ZWxzZSB0PC0xKnMucmVmU2FtcGxlRHVyYXRpb24mJih0aGlzLl9hdWRpb0xhcmdlR2FwPS0xKnQsbC5kb0ZpeExhcmdlR2FwKGksLTEqdCkpfWxldCBoO2NvbnN0IHU9aVswXS5kdHM7aWYodGhpcy5uZXh0QXVkaW9EdHMpe2g9dS10aGlzLm5leHRBdWRpb0R0cztjb25zdCBlPU1hdGguYWJzKGgpO2lmKGU+cy5yZWZTYW1wbGVEdXJhdGlvbiYmMT09PXImJjE9PT10aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4mJihzLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQ9dm9pZCAwKSxoPjIqcy5yZWZTYW1wbGVEdXJhdGlvbilpZigxPT09ciYmMT09PXRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbilzLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQ9dm9pZCAwIT09cy5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkP3MucmVmU2FtcGxlRHVyYXRpb25GaXhlZCtoOnMucmVmU2FtcGxlRHVyYXRpb24raDtlbHNle2NvbnN0IGU9TWF0aC5mbG9vcihoL3MucmVmU2FtcGxlRHVyYXRpb24pO2ZvcihsZXQgdD0wO3Q8ZTt0Kyspe2NvbnN0IGU9dS0odCsxKSpzLnJlZlNhbXBsZUR1cmF0aW9uLHI9T2JqZWN0LmFzc2lnbih7fSxpWzBdLHtkdHM6ZT50aGlzLm5leHRBdWRpb0R0cz9lOnRoaXMubmV4dEF1ZGlvRHRzfSk7dGhpcy5maWxsZWRBdWRpb1NhbXBsZXMucHVzaCh7ZHRzOnIuZHRzLHNpemU6ci5kYXRhLmJ5dGVMZW5ndGh9KSx0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcy51bnNoaWZ0KHIpfX1lbHNlIGU8PXMucmVmU2FtcGxlRHVyYXRpb24mJmU+MD8oaVswXS5kdHM9dGhpcy5uZXh0QXVkaW9EdHMsaVswXS5wdHM9dGhpcy5uZXh0QXVkaW9EdHMpOmg8MCYmbC5kb0ZpeExhcmdlR2FwKGksLTEqaCl9Y29uc3QgYz1pW2kubGVuZ3RoLTFdLm9yaWdpbkR0cyxmPWlbaS5sZW5ndGgtMV0ub3JpZ2luRHRzLHA9aS5sZW5ndGg+PTI/Yy1pW2kubGVuZ3RoLTJdLm9yaWdpbkR0czpzLnJlZlNhbXBsZUR1cmF0aW9uO3RoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbj1yLHRoaXMubmV4dEF1ZGlvRHRzPXMucmVmU2FtcGxlRHVyYXRpb25GaXhlZD9mK3MucmVmU2FtcGxlRHVyYXRpb25GaXhlZDpmK3AsdGhpcy5sYXN0QXVkaW9EdHM9ZixpW2kubGVuZ3RoLTFdLmR1cmF0aW9uPXA7Zm9yKGxldCBlPTAsdD1pLmxlbmd0aDtlPHQ7ZSsrKXtjb25zdCB0PWlbZV0scz1pW2UrMV07aWYoIXMpYnJlYWs7Y29uc3Qgcj1zLmR0cy10LmR0cztpW2VdLmR1cmF0aW9uPXJ9dGhpcy5hdWRpb1RyYWNrLnNhbXBsZXM9bC5zb3J0QXVkaW9TYW1wbGVzKGkpfWZpeENoYW5nZVN0cmVhbVZpZGVvKGUpe2NvbnN0e3NhbXBsZXM6dCxtZXRhOml9PXRoaXMudmlkZW9UcmFjayxzPTA9PT1lP3RoaXMuZ2V0U3RyZWFtQ2hhbmdlU3RhcnQodFswXSk6dFtlLTFdLmR0cyxyPXRbZV0uZHRzO2lmKE1hdGguYWJzKHMtcik8PTIqaS5yZWZTYW1wbGVEdXJhdGlvbilyZXR1cm4gdFtlXS5vcHRpb25zP3RbZV0ub3B0aW9ucy5pc0NvbnRpbnVlPSEwOnRbZV0ub3B0aW9ucz17aXNDb250aW51ZTohMH0sdGhpcy5kb0ZpeFZpZGVvKCExKTtjb25zdCBhPXQuc2xpY2UoMCxlKSxuPXQuc2xpY2UoZSksbz10WzBdLGQ9blswXS5kdHMtby5kdHMsbD1vLm9wdGlvbnMmJm8ub3B0aW9ucy5zdGFydCtkP28ub3B0aW9ucy5zdGFydDpudWxsO3RoaXMudmlkZW9UcmFjay5zYW1wbGVzPXQuc2xpY2UoMCxlKSx0aGlzLmRvRml4VmlkZW8oITEpLHRoaXMudmlkZW9UcmFjay5zYW1wbGVzPXQuc2xpY2UoZSksdGhpcy5kb0ZpeFZpZGVvKCExLGwpLHRoaXMudmlkZW9UcmFjay5zYW1wbGVzPWEuY29uY2F0KG4pfWZpeENoYW5nZVN0cmVhbUF1ZGlvKGUpe2NvbnN0e3NhbXBsZXM6dCxtZXRhOml9PXRoaXMuYXVkaW9UcmFjayxzPTA9PT1lP3RoaXMuZ2V0U3RyZWFtQ2hhbmdlU3RhcnQodFswXSk6dFtlLTFdLmR0cyxyPXRbZV0uZHRzO2lmKE1hdGguYWJzKHMtcik8PTIqaS5yZWZTYW1wbGVEdXJhdGlvbilyZXR1cm4gdFtlXS5vcHRpb25zP3RbZV0ub3B0aW9ucy5pc0NvbnRpbnVlPSEwOnRbZV0ub3B0aW9ucz17aXNDb250aW51ZTohMH0sdGhpcy5kb0ZpeEF1ZGlvKCExKTtjb25zdCBhPXQuc2xpY2UoMCxlKSxuPXQuc2xpY2UoZSksbz10WzBdLGQ9blswXS5kdHMtby5kdHMsbD1vLm9wdGlvbnMmJm8ub3B0aW9ucy5zdGFydCtkP28ub3B0aW9ucy5zdGFydDpudWxsO3RoaXMuYXVkaW9UcmFjay5zYW1wbGVzPWEsdGhpcy5kb0ZpeEF1ZGlvKCExKSx0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcz1uLHRoaXMuZG9GaXhBdWRpbyghMSxsKSx0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcz1hLmNvbmNhdChuKX1nZXRGaXJzdFNhbXBsZSgpe2xldHtzYW1wbGVzOmV9PXRoaXMudmlkZW9UcmFjayx7c2FtcGxlczp0fT10aGlzLmF1ZGlvVHJhY2ssaT0hMSxzPSExO3JldHVybiF0aGlzLl9maXJzdFZpZGVvU2FtcGxlJiZlLmxlbmd0aCYmKHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGU9bC5maW5kRmlyc3RWaWRlb1NhbXBsZShlKSxpPSEwKSwhdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSYmdC5sZW5ndGgmJih0aGlzLl9maXJzdEF1ZGlvU2FtcGxlPWwuZmluZEZpcnN0QXVkaW9TYW1wbGUodCkscz0hMCkse2lzRmlyc3RWaWRlb1NhbXBsZXM6aSxpc0ZpcnN0QXVkaW9TYW1wbGVzOnN9fWZpeFJlZlNhbXBsZUR1cmF0aW9uKGUsdCl7Y29uc3QgaT1cInZpZGVvXCI9PT1lLnR5cGUscz1pP3RoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQ6dGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCxyPWk/dGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5kdHM6dGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHMsYT1pP3RoaXMuZmlsbGVkVmlkZW9TYW1wbGVzLmxlbmd0aDp0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5sZW5ndGg7aWYoIWUucmVmU2FtcGxlRHVyYXRpb258fGUucmVmU2FtcGxlRHVyYXRpb248PTB8fE51bWJlci5pc05hTihlLnJlZlNhbXBsZUR1cmF0aW9uKSl7aWYodC5sZW5ndGg+PTEpe2NvbnN0IGk9dFt0Lmxlbmd0aC0xXS5kdHM7ZS5yZWZTYW1wbGVEdXJhdGlvbj1NYXRoLmZsb29yKChpLXIpLyhzK2EtMSkpfX1lbHNlIGlmKGUucmVmU2FtcGxlRHVyYXRpb24mJnQubGVuZ3RoPj01KXtjb25zdCBpPSh0W3QubGVuZ3RoLTFdLmR0cy10WzBdLmR0cykvKHQubGVuZ3RoLTEpO2UucmVmU2FtcGxlRHVyYXRpb249TWF0aC5mbG9vcihNYXRoLmFicyhlLnJlZlNhbXBsZUR1cmF0aW9uLWkpPD01P2UucmVmU2FtcGxlRHVyYXRpb246aSl9fXJlY29yZFNhbXBsZXNDb3VudCgpe2NvbnN0e2F1ZGlvVHJhY2s6ZSx2aWRlb1RyYWNrOnR9PXRoaXM7dGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCs9ZS5zYW1wbGVzLmxlbmd0aCx0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50Kz10LnNhbXBsZXMubGVuZ3RofXJlbW92ZUludmFsaWRTYW1wbGVzKCl7Y29uc3R7X2ZpcnN0VmlkZW9TYW1wbGU6ZSxfZmlyc3RBdWRpb1NhbXBsZTp0fT10aGlzO3RoaXMuYXVkaW9UcmFjay5zYW1wbGVzPXRoaXMuYXVkaW9UcmFjay5zYW1wbGVzLmZpbHRlcigoZSxpKT0+ZT09PXR8fGUuZHRzPnQuZHRzKSx0aGlzLnZpZGVvVHJhY2suc2FtcGxlcz10aGlzLnZpZGVvVHJhY2suc2FtcGxlcy5maWx0ZXIoKHQsaSk9PnQ9PT1lfHx0LmR0cz5lLmR0cyl9Z2V0U3RyZWFtQ2hhbmdlU3RhcnQoZSl7cmV0dXJuIGUub3B0aW9ucyYmZS5vcHRpb25zLnN0YXJ0P2Uub3B0aW9ucy5zdGFydC10aGlzLmR0c0Jhc2U6MS8wfXN0YXRpYyBzb3J0QXVkaW9TYW1wbGVzKGUpe3JldHVybiAxPT09ZS5sZW5ndGg/ZTplLnNvcnQoKGUsdCk9PmUuZHRzLXQuZHRzKX1zdGF0aWMgZmluZEZpcnN0QXVkaW9TYW1wbGUoZSl7cmV0dXJuIGUmJjAhPT1lLmxlbmd0aD9sLnNvcnRBdWRpb1NhbXBsZXMoZSlbMF06bnVsbH1zdGF0aWMgZmluZEZpcnN0VmlkZW9TYW1wbGUoZSl7aWYoIWUubGVuZ3RoKXJldHVybiBudWxsO2NvbnN0IHQ9ZS5zb3J0KChlLHQpPT5lLmR0cy10LmR0cyk7Zm9yKGxldCBlPTAsaT10Lmxlbmd0aDtlPGk7ZSsrKWlmKHRbZV0uaXNLZXlmcmFtZSlyZXR1cm4gdFtlXX1zdGF0aWMgZGV0ZWN0TGFyZ2VHYXAoZSx0KXtpZihudWxsPT09ZSlyZXR1cm47Y29uc3QgaT10LmR0c3x8MCxzPWUtaT49MWUzfHxpLWU+PTFlMyxyPXQub3B0aW9ucyYmdC5vcHRpb25zLmRpc2NvbnRpbnVlO3JldHVybiBzfHxyfXN0YXRpYyBkb0ZpeExhcmdlR2FwKGUsdCl7Zm9yKGxldCBpPTAscz1lLmxlbmd0aDtpPHM7aSsrKXtjb25zdCBzPWVbaV07cy5kdHMrPXQscy5wdHMmJihzLnB0cys9dCl9fXN0YXRpYyBkZXRhY3RDaGFuZ2VTdHJlYW0oZSl7bGV0IHQ9ITEsaT0tMTtmb3IobGV0IHM9MCxyPWUubGVuZ3RoO3M8cjtzKyspaWYoZVtzXS5vcHRpb25zJiZlW3NdLm9wdGlvbnMubWV0YSl7dD0hMCxpPXM7YnJlYWt9cmV0dXJue2NoYW5nZWQ6dCxjaGFuZ2VkSWR4Oml9fWdldCB0cmFja3MoKXtyZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlRSQUNLU1wiKX1nZXQgYXVkaW9UcmFjaygpe3JldHVybiB0aGlzLnRyYWNrcyYmdGhpcy50cmFja3MuYXVkaW9UcmFjaz90aGlzLnRyYWNrcy5hdWRpb1RyYWNrOntzYW1wbGVzOltdLG1ldGE6e319fWdldCB2aWRlb1RyYWNrKCl7cmV0dXJuIHRoaXMudHJhY2tzJiZ0aGlzLnRyYWNrcy52aWRlb1RyYWNrP3RoaXMudHJhY2tzLnZpZGVvVHJhY2s6e3NhbXBsZXM6W10sbWV0YTp7fX19Z2V0IGR0c0Jhc2UoKXtjb25zdCBlPXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJNUDRfUkVNVVhFUlwiKTtyZXR1cm4gZT9lLl9kdHNCYXNlOjB9fXQuZGVmYXVsdD1sfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dC5kZWZhdWx0PWNsYXNze3N0YXRpYyBnZXRTaWxlbnRGcmFtZShlLHQpe2lmKFwibXA0YS40MC4yXCI9PT1lKXtpZigxPT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDM1LDEyOF0pO2lmKDI9PT10KXJldHVybiBuZXcgVWludDhBcnJheShbMzMsMCw3MywxNDQsMiwyNSwwLDM1LDEyOF0pO2lmKDM9PT10KXJldHVybiBuZXcgVWludDhBcnJheShbMCwyMDAsMCwxMjgsMzIsMTMyLDEsMzgsNjQsOCwxMDAsMCwxNDJdKTtpZig0PT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDMyLDEzMiwxLDM4LDY0LDgsMTAwLDAsMTI4LDQ0LDEyOCw4LDIsNTZdKTtpZig1PT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDMyLDEzMiwxLDM4LDY0LDgsMTAwLDAsMTMwLDQ4LDQsMTUzLDAsMzMsMTQ0LDIsNTZdKTtpZig2PT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDMyLDEzMiwxLDM4LDY0LDgsMTAwLDAsMTMwLDQ4LDQsMTUzLDAsMzMsMTQ0LDIsMCwxNzgsMCwzMiw4LDIyNF0pfWVsc2V7aWYoMT09PXQpcmV0dXJuIG5ldyBVaW50OEFycmF5KFsxLDY0LDM0LDEyOCwxNjMsNzgsMjMwLDEyOCwxODYsOCwwLDAsMCwyOCw2LDI0MSwxOTMsMTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTRdKTtpZigyPT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzEsNjQsMzQsMTI4LDE2Myw5NCwyMzAsMTI4LDE4Niw4LDAsMCwwLDAsMTQ5LDAsNiwyNDEsMTYxLDEwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDk0XSk7aWYoMz09PXQpcmV0dXJuIG5ldyBVaW50OEFycmF5KFsxLDY0LDM0LDEyOCwxNjMsOTQsMjMwLDEyOCwxODYsOCwwLDAsMCwwLDE0OSwwLDYsMjQxLDE2MSwxMCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5NF0pfXJldHVybiBudWxsfX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjbGFzcyBze2NvbnN0cnVjdG9yKCl7dGhpcy5taW1ldHlwZT1cIlwiLHRoaXMuaW5pdD1udWxsLHRoaXMuZGF0YT1bXX19dC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5zb3VyY2VzPXt9fWdldFNvdXJjZShlKXtyZXR1cm4gdGhpcy5zb3VyY2VzW2VdfWNyZWF0ZVNvdXJjZShlKXtyZXR1cm4gdGhpcy5zb3VyY2VzW2VdPW5ldyBzLHRoaXMuc291cmNlc1tlXX1jbGVhcigpe3RoaXMuc291cmNlcz17fX1kZXN0cm95KCl7dGhpcy5zb3VyY2VzPXt9fX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1pKDApO2NvbnN0IHI9e05VTUJFUjowLEJPT0xFQU46MSxTVFJJTkc6MixPQkpFQ1Q6MyxNSVhfQVJSQVk6OCxPQkpFQ1RfRU5EOjksU1RSSUNUX0FSUkFZOjEwLERBVEU6MTEsTE9ORV9TVFJJTkc6MTJ9O3QuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMub2Zmc2V0PTAsdGhpcy5yZWFkT2Zmc2V0PXRoaXMub2Zmc2V0fXJlc29sdmUoZSx0KXtpZih0PDMpdGhyb3cgbmV3IEVycm9yKFwibm90IGVub3VnaCBkYXRhIGZvciBtZXRhaW5mb1wiKTtjb25zdCBpPXt9LHM9dGhpcy5wYXJzZVZhbHVlKGUpLHI9dGhpcy5wYXJzZVZhbHVlKGUsdC1zLmJvZHlTaXplKTtyZXR1cm4gaVtzLmRhdGFdPXIuZGF0YSx0aGlzLnJlc2V0U3RhdHVzKCksaX1yZXNldFN0YXR1cygpe3RoaXMub2Zmc2V0PTAsdGhpcy5yZWFkT2Zmc2V0PXRoaXMub2Zmc2V0fXBhcnNlU3RyaW5nKGUpe2NvbnN0IHQ9bmV3IERhdGFWaWV3KGUsdGhpcy5yZWFkT2Zmc2V0KS5nZXRVaW50MTYoMCwhcy5pc0xlKTtsZXQgaT1cIlwiO2k9dD4wP3MuVVRGOC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoZSx0aGlzLnJlYWRPZmZzZXQrMix0KSk6XCJcIjtsZXQgcj10KzI7cmV0dXJuIHRoaXMucmVhZE9mZnNldCs9cix7ZGF0YTppLGJvZHlTaXplOnQrMn19cGFyc2VEYXRlKGUsdCl7Y29uc3QgaT1uZXcgRGF0YVZpZXcoZSx0aGlzLnJlYWRPZmZzZXQsdCk7bGV0IHI9aS5nZXRGbG9hdDY0KDAsIXMuaXNMZSk7cmV0dXJuIHIrPTYwKmkuZ2V0SW50MTYoOCwhcy5pc0xlKSoxZTMsdGhpcy5yZWFkT2Zmc2V0Kz0xMCx7ZGF0YTpuZXcgRGF0ZShyKSxib2R5U2l6ZToxMH19cGFyc2VPYmplY3QoZSx0KXtjb25zdCBpPXRoaXMucGFyc2VTdHJpbmcoZSx0KSxzPXRoaXMucGFyc2VWYWx1ZShlLHQtaS5ib2R5U2l6ZSk7cmV0dXJue2RhdGE6e25hbWU6aS5kYXRhLHZhbHVlOnMuZGF0YX0sYm9keVNpemU6aS5ib2R5U2l6ZStzLmJvZHlTaXplLGlzT2JqRW5kOnMuaXNPYmpFbmR9fXBhcnNlTG9uZ1N0cmluZyhlKXtjb25zdCB0PW5ldyBEYXRhVmlldyhlLHRoaXMucmVhZE9mZnNldCkuZ2V0VWludDMyKDAsIXMuaXNMZSk7bGV0IGk9XCJcIjtyZXR1cm4gaT10PjA/cy5VVEY4LmRlY29kZShuZXcgVWludDhBcnJheShlLHRoaXMucmVhZE9mZnNldCsyLHQpKTpcIlwiLHRoaXMucmVhZE9mZnNldCs9dCs0LHtkYXRhOmksYm9keVNpemU6dCs0fX1wYXJzZVZhbHVlKGUsdCl7bGV0IGk9bmV3IEFycmF5QnVmZmVyO2k9ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP2U6ZS5idWZmZXI7Y29uc3R7TlVNQkVSOmEsQk9PTEVBTjpuLFNUUklORzpvLE9CSkVDVDpkLE1JWF9BUlJBWTpsLE9CSkVDVF9FTkQ6aCxTVFJJQ1RfQVJSQVk6dSxEQVRFOmMsTE9ORV9TVFJJTkc6Zn09cixwPW5ldyBEYXRhVmlldyhpLHRoaXMucmVhZE9mZnNldCx0KTtsZXQgbT0hMTtjb25zdCBnPXAuZ2V0VWludDgoMCk7bGV0IF89MTt0aGlzLnJlYWRPZmZzZXQrPTE7bGV0IHk9bnVsbDtzd2l0Y2goZyl7Y2FzZSBhOnk9cC5nZXRGbG9hdDY0KDEsIXMuaXNMZSksdGhpcy5yZWFkT2Zmc2V0Kz04LF8rPTg7YnJlYWs7Y2FzZSBuOnk9ISFwLmdldFVpbnQ4KDEpLHRoaXMucmVhZE9mZnNldCs9MSxfKz0xO2JyZWFrO2Nhc2Ugbzp7Y29uc3QgZT10aGlzLnBhcnNlU3RyaW5nKGkpO3k9ZS5kYXRhLF8rPWUuYm9keVNpemU7YnJlYWt9Y2FzZSBkOnt5PXt9O2xldCBlPTA7Zm9yKDE2Nzc3MjE1JnAuZ2V0VWludDMyKHQtNCwhcy5pc0xlKSYmKGU9Myk7Xzx0LTQ7KXtjb25zdCBzPXRoaXMucGFyc2VPYmplY3QoaSx0LV8tZSk7aWYocy5pc09iamVjdEVuZClicmVhazt5W3MuZGF0YS5uYW1lXT1zLmRhdGEudmFsdWUsXys9cy5ib2R5U2l6ZX1pZihfPD10LTMpezk9PT0oMTY3NzcyMTUmcC5nZXRVaW50MzIoXy0xLCFzLmlzTGUpKSYmKHRoaXMucmVhZE9mZnNldCs9MyxfKz0zKX1icmVha31jYXNlIGw6e3k9e30sXys9NCx0aGlzLnJlYWRPZmZzZXQrPTQ7bGV0IGU9MDtmb3IoOT09KDE2Nzc3MjE1JnAuZ2V0VWludDMyKHQtNCwhcy5pc0xlKSkmJihlPTMpO188dC04Oyl7Y29uc3Qgcz10aGlzLnBhcnNlT2JqZWN0KGksdC1fLWUpO2lmKHMuaXNPYmplY3RFbmQpYnJlYWs7eVtzLmRhdGEubmFtZV09cy5kYXRhLnZhbHVlLF8rPXMuYm9keVNpemV9aWYoXzw9dC0zKXs5PT09KDE2Nzc3MjE1JnAuZ2V0VWludDMyKF8tMSwhcy5pc0xlKSkmJihfKz0zLHRoaXMucmVhZE9mZnNldCs9Myl9YnJlYWt9Y2FzZSBoOnk9bnVsbCxtPSEwO2JyZWFrO2Nhc2UgdTp7eT1bXTtjb25zdCBlPXAuZ2V0VWludDMyKDEsIXMuaXNMZSk7Xys9NCx0aGlzLnJlYWRPZmZzZXQrPTQ7Zm9yKGxldCBzPTA7czxlO3MrKyl7Y29uc3QgZT10aGlzLnBhcnNlVmFsdWUoaSx0LV8pO3kucHVzaChlLmRhdGEpLF8rPWUuYm9keVNpemV9YnJlYWt9Y2FzZSBjOntjb25zdCBlPXRoaXMucGFyc2VEYXRlKGksdC0xKTt5PWUuZGF0YSxfKz1lLmJvZHlTaXplO2JyZWFrfWNhc2UgZjp7Y29uc3QgZT10aGlzLnBhcnNlTG9uZ1N0cmluZyhpLHQtMSk7eT1lLmRhdGEsXys9ZS5ib2R5U2l6ZTticmVha31kZWZhdWx0Ol89dH1yZXR1cm57ZGF0YTp5LGJvZHlTaXplOl8saXNPYmpFbmQ6bX19fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17TXA0UmVtdXhlcjppKDM3KS5kZWZhdWx0fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzLHI9aSgwKSxhPWkoMzgpLG49KHM9YSkmJnMuX19lc01vZHVsZT9zOntkZWZhdWx0OnN9O2NvbnN0IG89ci5FVkVOVFMuUkVNVVhfRVZFTlRTO2NsYXNzIGR7Y29uc3RydWN0b3IoKXt0aGlzLl9kdHNCYXNlPTAsdGhpcy5faXNEdHNCYXNlSW5pdGVkPSExLHRoaXMuX2F1ZGlvTmV4dER0cz1udWxsLHRoaXMuX3ZpZGVvTmV4dER0cz1udWxsLHRoaXMuX3ZpZGVvU2VnbWVudExpc3Q9bmV3IHIuTWVkaWFTZWdtZW50TGlzdChcInZpZGVvXCIpLHRoaXMuX2F1ZGlvU2VnbWVudExpc3Q9bmV3IHIuTWVkaWFTZWdtZW50TGlzdChcImF1ZGlvXCIpO2NvbnN0e2Jyb3dzZXI6ZX09ci5zbmlmZmVyO3RoaXMuX2ZpbGxTaWxlbmNlRnJhbWU9XCJpZVwiPT09ZSx0aGlzLmlzRmlyc3RWaWRlbz0hMCx0aGlzLmlzRmlyc3RBdWRpbz0hMCx0aGlzLnZpZGVvQWxsRHVyYXRpb249MCx0aGlzLmF1ZGlvQWxsRHVyYXRpb249MH1pbml0KCl7dGhpcy5vbihvLlJFTVVYX01FRElBLHRoaXMucmVtdXguYmluZCh0aGlzKSksdGhpcy5vbihvLlJFTVVYX01FVEFEQVRBLHRoaXMub25NZXRhRGF0YVJlYWR5LmJpbmQodGhpcykpLHRoaXMub24oby5ERVRFQ1RfQ0hBTkdFX1NUUkVBTSx0aGlzLnJlc2V0RHRzQmFzZS5iaW5kKHRoaXMpKX1kZXN0cm95KCl7dGhpcy5fZHRzQmFzZT0tMSx0aGlzLl9kdHNCYXNlSW5pdGVkPSExLHRoaXMuX3ZpZGVvTmV4dER0cz1udWxsLHRoaXMuX2F1ZGlvTmV4dER0cz1udWxsLHRoaXMuX3ZpZGVvU2VnbWVudExpc3QuY2xlYXIoKSx0aGlzLl9hdWRpb1NlZ21lbnRMaXN0LmNsZWFyKCksdGhpcy5fdmlkZW9TZWdtZW50TGlzdD1udWxsLHRoaXMuX2F1ZGlvU2VnbWVudExpc3Q9bnVsbH1yZW11eCgpe2NvbnN0e2F1ZGlvVHJhY2s6ZSx2aWRlb1RyYWNrOnR9PXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJUUkFDS1NcIik7IXRoaXMuX2lzRHRzQmFzZUluaXRlZCYmdGhpcy5jYWxjRHRzQmFzZShlLHQpLHRoaXMuX3JlbXV4VmlkZW8odCksdGhpcy5fcmVtdXhBdWRpbyhlKX1yZXNldER0c0Jhc2UoKXt0aGlzLl9kdHNCYXNlPTAsdGhpcy5fZHRzQmFzZUluaXRlZD0hMX1zZWVrKCl7dGhpcy5fdmlkZW9OZXh0RHRzPW51bGwsdGhpcy5fYXVkaW9OZXh0RHRzPW51bGwsdGhpcy5fdmlkZW9TZWdtZW50TGlzdC5jbGVhcigpLHRoaXMuX2F1ZGlvU2VnbWVudExpc3QuY2xlYXIoKX1vbk1ldGFEYXRhUmVhZHkoZSl7bGV0IHQ7aWYoXCJhdWRpb1wiPT09ZSl7Y29uc3R7YXVkaW9UcmFjazplfT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiVFJBQ0tTXCIpO3Q9ZX1lbHNle2NvbnN0e3ZpZGVvVHJhY2s6ZX09dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlRSQUNLU1wiKTt0PWV9bGV0IGk9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlBSRV9TT1VSQ0VfQlVGRkVSXCIpLHM9aS5nZXRTb3VyY2UoZSk7c3x8KHM9aS5jcmVhdGVTb3VyY2UoZSkpLHMubWltZXR5cGU9dC5tZXRhLmNvZGVjLHMuaW5pdD10aGlzLnJlbXV4SW5pdFNlZ21lbnQoZSx0Lm1ldGEpLHRoaXMuZW1pdChvLklOSVRfU0VHTUVOVCxlKX1yZW11eEluaXRTZWdtZW50KGUsdCl7bGV0IGk9bmV3IHIuQnVmZmVyLHM9bi5kZWZhdWx0LmZ0eXAoKSxhPW4uZGVmYXVsdC5tb292KHt0eXBlOmUsbWV0YTp0fSk7cmV0dXJuIGkud3JpdGUocyxhKSxpfWNhbGNEdHNCYXNlKGUsdCl7aWYoIWUmJnQuc2FtcGxlcy5sZW5ndGgpcmV0dXJuIHQuc2FtcGxlc1swXS5kdHM7aWYoIWUuc2FtcGxlcy5sZW5ndGgmJiF0LnNhbXBsZXMubGVuZ3RoKXJldHVybjtsZXQgaT0xLzAscz0xLzA7ZS5zYW1wbGVzJiZlLnNhbXBsZXMubGVuZ3RoJiYoaT1lLnNhbXBsZXNbMF0uZHRzKSx0LnNhbXBsZXMmJnQuc2FtcGxlcy5sZW5ndGgmJihzPXQuc2FtcGxlc1swXS5kdHMpLHRoaXMuX2R0c0Jhc2U9TWF0aC5taW4oaSxzKSx0aGlzLl9pc0R0c0Jhc2VJbml0ZWQ9ITB9X3JlbXV4VmlkZW8oZSl7Y29uc3QgdD1lfHx7fTtpZighZS5zYW1wbGVzfHwhZS5zYW1wbGVzLmxlbmd0aClyZXR1cm47bGV0e3NhbXBsZXM6aX09dCxzPS0xLGE9bnVsbDtjb25zdCBkPVtdLGw9e3NhbXBsZXM6W119O2xldCBoPTFlNDtmb3IoO2kubGVuZ3RoJiZoLS0gPjA7KXtjb25zdCBlPWkuc2hpZnQoKSx7aXNLZXlmcmFtZTp0LG9wdGlvbnM6cn09ZTtpZighdGhpcy5pc0ZpcnN0QXVkaW8mJnImJnIubWV0YSl7YT10aGlzLnJlbXV4SW5pdFNlZ21lbnQoXCJ2aWRlb1wiLHIubWV0YSksci5tZXRhPW51bGwsaS51bnNoaWZ0KGUpLHIuaXNDb250aW51ZXx8dGhpcy5yZXNldER0c0Jhc2UoKTticmVha31sZXQgbixoLHU9ZS5kdHMtdGhpcy5fZHRzQmFzZTstMT09PXMmJihzPXUpLHZvaWQgMCE9PWUucHRzJiYobj0oaD1lLnB0cy10aGlzLl9kdHNCYXNlKS11KSx2b2lkIDAhPT1lLmN0cyYmKGg9ZS5jdHMrdSxuPWUuY3RzKTtsZXQgYz17YnVmZmVyOltdLHNpemU6MH07bC5zYW1wbGVzLnB1c2goYyksYy5idWZmZXIucHVzaChlLmRhdGEpLGMuc2l6ZSs9ZS5kYXRhLmJ5dGVMZW5ndGg7bGV0IGY9MDtpZihlLmR1cmF0aW9uKWY9ZS5kdXJhdGlvbjtlbHNlIGlmKGkubGVuZ3RoPj0xKXtmPWlbMF0uZHRzLXRoaXMuX2R0c0Jhc2UtdX1lbHNlIGY9ZC5sZW5ndGg+PTE/ZFtkLmxlbmd0aC0xXS5kdXJhdGlvbjp0aGlzLnZpZGVvTWV0YS5yZWZTYW1wbGVEdXJhdGlvbjt0aGlzLnZpZGVvQWxsRHVyYXRpb24rPWYsZC5wdXNoKHtkdHM6dSxjdHM6bixwdHM6aCxkYXRhOmUuZGF0YSxzaXplOmUuZGF0YS5ieXRlTGVuZ3RoLGlzS2V5ZnJhbWU6dCxkdXJhdGlvbjpmLGZsYWdzOntpc0xlYWRpbmc6MCxkZXBlbmRzT246dD8yOjEsaXNEZXBlbmRlZE9uOnQ/MTowLGhhc1JlZHVuZGFuY3k6MCxpc05vblN5bmM6dD8wOjF9LG9yaWdpbkR0czp1LHR5cGU6XCJ2aWRlb1wifSksdCYmdGhpcy5lbWl0KG8uUkFORE9NX0FDQ0VTU19QT0lOVCxoKX1sZXQgdT1uZXcgci5CdWZmZXI7aWYoZC5sZW5ndGgpe2NvbnN0IGU9bi5kZWZhdWx0Lm1vb2Yoe2lkOnQubWV0YS5pZCx0aW1lOnMsc2FtcGxlczpkfSksaT1uLmRlZmF1bHQubWRhdChsKTt1LndyaXRlKGUsaSksdGhpcy53cml0ZVRvU291cmNlKFwidmlkZW9cIix1KX1pZihhJiYodGhpcy53cml0ZVRvU291cmNlKFwidmlkZW9cIixhKSxpLmxlbmd0aCkpcmV0dXJuIHQuc2FtcGxlcz1pLHRoaXMuX3JlbXV4VmlkZW8odCk7dGhpcy5pc0ZpcnN0VmlkZW89ITEsdGhpcy5lbWl0KG8uTUVESUFfU0VHTUVOVCxcInZpZGVvXCIpO2NvbnN0IGM9ZFtkLmxlbmd0aC0xXTt0aGlzLl92aWRlb05leHREdHM9Yy5kdHMrYy5kdXJhdGlvbix0LnNhbXBsZXM9W10sdC5sZW5ndGg9MH1fcmVtdXhBdWRpbyhlKXtjb25zdHtzYW1wbGVzOnR9PWV8fHt9O2xldCBpPS0xLHM9W10sYT1udWxsO2NvbnN0IGQ9e3NhbXBsZXM6W119O2lmKCF0fHwhdC5sZW5ndGgpcmV0dXJuO2xldCBsPTFlNCxoPSExO2Zvcig7dC5sZW5ndGgmJmwtLSA+MDspe2xldCBlPXQuc2hpZnQoKTtjb25zdHtkYXRhOnIsb3B0aW9uczpufT1lO2lmKCF0aGlzLmlzRmlyc3RBdWRpbyYmbiYmbi5tZXRhKXthPXRoaXMucmVtdXhJbml0U2VnbWVudChcImF1ZGlvXCIsbi5tZXRhKSxuLm1ldGE9bnVsbCx0LnVuc2hpZnQoZSksbi5pc0NvbnRpbnVlfHx0aGlzLnJlc2V0RHRzQmFzZSgpO2JyZWFrfWxldCBvPWUuZHRzLXRoaXMuX2R0c0Jhc2U7Y29uc3QgbD1vO2h8fChpPW8saD0hMCk7bGV0IHU9MDtpZihlLmR1cmF0aW9uKXU9ZS5kdXJhdGlvbjtlbHNlIGlmKHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQpdT10aGlzLmF1ZGlvTWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkO2Vsc2UgaWYodC5sZW5ndGg+PTEpe3U9dFswXS5kdHMtdGhpcy5fZHRzQmFzZS1vfWVsc2UgdT1zLmxlbmd0aD49MT9zW3MubGVuZ3RoLTFdLmR1cmF0aW9uOnRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uO3RoaXMuYXVkaW9BbGxEdXJhdGlvbis9dTtjb25zdCBjPXtkdHM6byxwdHM6byxjdHM6MCxzaXplOnIuYnl0ZUxlbmd0aCxkdXJhdGlvbjplLmR1cmF0aW9uP2UuZHVyYXRpb246dSxmbGFnczp7aXNMZWFkaW5nOjAsZGVwZW5kc09uOjIsaXNEZXBlbmRlZE9uOjEsaGFzUmVkdW5kYW5jeTowLGlzTm9uU3luYzowfSxpc0tleWZyYW1lOiEwLG9yaWdpbkR0czpsLHR5cGU6XCJhdWRpb1wifTtsZXQgZj17YnVmZmVyOltdLHNpemU6MH07Zi5idWZmZXIucHVzaChyKSxmLnNpemUrPXIuYnl0ZUxlbmd0aCxkLnNhbXBsZXMucHVzaChmKSxzLnB1c2goYyl9Y29uc3QgdT1uZXcgci5CdWZmZXI7aWYocy5sZW5ndGgpe2NvbnN0IHQ9bi5kZWZhdWx0Lm1vb2Yoe2lkOmUubWV0YS5pZCx0aW1lOmksc2FtcGxlczpzfSkscj1uLmRlZmF1bHQubWRhdChkKTt1LndyaXRlKHQsciksdGhpcy53cml0ZVRvU291cmNlKFwiYXVkaW9cIix1KX1pZihhJiYodGhpcy53cml0ZVRvU291cmNlKFwiYXVkaW9cIixhKSx0Lmxlbmd0aCkpcmV0dXJuIGUuc2FtcGxlcz10LHRoaXMuX3JlbXV4QXVkaW8oZSk7dGhpcy5pc0ZpcnN0QXVkaW89ITEsdGhpcy5lbWl0KG8uTUVESUFfU0VHTUVOVCxcImF1ZGlvXCIsdSk7Y29uc3QgYz1zW3MubGVuZ3RoLTFdO3RoaXMuX3ZpZGVvTmV4dER0cz1jLmR0cytjLmR1cmF0aW9uLGUuc2FtcGxlcz1bXSxlLmxlbmd0aD0wfXdyaXRlVG9Tb3VyY2UoZSx0KXtsZXQgaT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiUFJFX1NPVVJDRV9CVUZGRVJcIikscz1pLmdldFNvdXJjZShlKTtzfHwocz1pLmNyZWF0ZVNvdXJjZShlKSkscy5kYXRhLnB1c2godCl9aW5pdFNpbGVudEF1ZGlvKGUsdCl7Y29uc3QgaT1kLmdldFNpbGVudEZyYW1lKHRoaXMuX2F1ZGlvTWV0YS5jaGFubmVsQ291bnQpO3JldHVybntkdHM6ZSxwdHM6ZSxjdHM6MCxkdXJhdGlvbjp0LHVuaXQ6aSxzaXplOmkuYnl0ZUxlbmd0aCxvcmlnaW5EdHM6ZSx0eXBlOlwidmlkZW9cIn19Z2V0IHZpZGVvTWV0YSgpe3JldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiVFJBQ0tTXCIpLnZpZGVvVHJhY2subWV0YX1nZXQgYXVkaW9NZXRhKCl7cmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJUUkFDS1NcIikuYXVkaW9UcmFjay5tZXRhfXN0YXRpYyBnZXRTaWxlbnRGcmFtZShlKXtyZXR1cm4gMT09PWU/bmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDM1LDEyOF0pOjI9PT1lP25ldyBVaW50OEFycmF5KFszMywwLDczLDE0NCwyLDI1LDAsMzUsMTI4XSk6Mz09PWU/bmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDMyLDEzMiwxLDM4LDY0LDgsMTAwLDAsMTQyXSk6ND09PWU/bmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDMyLDEzMiwxLDM4LDY0LDgsMTAwLDAsMTI4LDQ0LDEyOCw4LDIsNTZdKTo1PT09ZT9uZXcgVWludDhBcnJheShbMCwyMDAsMCwxMjgsMzIsMTMyLDEsMzgsNjQsOCwxMDAsMCwxMzAsNDgsNCwxNTMsMCwzMywxNDQsMiw1Nl0pOjY9PT1lP25ldyBVaW50OEFycmF5KFswLDIwMCwwLDEyOCwzMiwxMzIsMSwzOCw2NCw4LDEwMCwwLDEzMCw0OCw0LDE1MywwLDMzLDE0NCwyLDAsMTc4LDAsMzIsOCwyMjRdKTpudWxsfX10LmRlZmF1bHQ9ZH0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPWkoMCk7Y2xhc3MgcntzdGF0aWMgc2l6ZShlKXtyZXR1cm4gcy5CdWZmZXIud3JpdGVVaW50MzIoZSl9c3RhdGljIGluaXRCb3goZSx0KXtjb25zdCBpPW5ldyBzLkJ1ZmZlcjtmb3IodmFyIGE9YXJndW1lbnRzLmxlbmd0aCxuPUFycmF5KGE+Mj9hLTI6MCksbz0yO288YTtvKyspbltvLTJdPWFyZ3VtZW50c1tvXTtyZXR1cm4gaS53cml0ZS5hcHBseShpLFtyLnNpemUoZSksci50eXBlKHQpXS5jb25jYXQobikpLGkuYnVmZmVyfXN0YXRpYyBleHRlbnNpb24oZSx0KXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW2UsdD4+MTYmMjU1LHQ+PjgmMjU1LDI1NSZ0XSl9c3RhdGljIGZ0eXAoKXtyZXR1cm4gci5pbml0Qm94KDI0LFwiZnR5cFwiLG5ldyBVaW50OEFycmF5KFsxMDUsMTE1LDExMSwxMDksMCwwLDAsMSwxMDUsMTE1LDExMSwxMDksOTcsMTE4LDk5LDQ5XSkpfXN0YXRpYyBtb292KGUpe2xldCB0LHt0eXBlOmksbWV0YTpzfT1lLGE9OCxuPXIubXZoZChzLmR1cmF0aW9uLHMudGltZXNjYWxlKTt0PVwidmlkZW9cIj09PWk/ci52aWRlb1RyYWsocyk6ci5hdWRpb1RyYWsocyk7bGV0IG89ci5tdmV4KHMuZHVyYXRpb24scy50aW1lc2NhbGV8fDFlMyxzLmlkKTtyZXR1cm5bbix0LG9dLmZvckVhY2goZT0+e2ErPWUuYnl0ZUxlbmd0aH0pLHIuaW5pdEJveChhLFwibW9vdlwiLG4sdCxvKX1zdGF0aWMgbXZoZChlKXtsZXQgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MWUzLGk9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLHQ+Pj4yNCYyNTUsdD4+PjE2JjI1NSx0Pj4+OCYyNTUsMjU1JnQsZT4+PjI0JjI1NSxlPj4+MTYmMjU1LGU+Pj44JjI1NSwyNTUmZSwwLDEsMCwwLDEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw2NCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyNTUsMjU1LDI1NSwyNTVdKTtyZXR1cm4gci5pbml0Qm94KDgraS5sZW5ndGgsXCJtdmhkXCIsbmV3IFVpbnQ4QXJyYXkoaSkpfXN0YXRpYyB2aWRlb1RyYWsoZSl7bGV0IHQ9OCxpPXIudGtoZCh7aWQ6MSxkdXJhdGlvbjplLmR1cmF0aW9uLHRpbWVzY2FsZTplLnRpbWVzY2FsZXx8MWUzLHdpZHRoOmUucHJlc2VudFdpZHRoLGhlaWdodDplLnByZXNlbnRIZWlnaHQsdHlwZTpcInZpZGVvXCJ9KSxzPXIubWRpYSh7dHlwZTpcInZpZGVvXCIsdGltZXNjYWxlOmUudGltZXNjYWxlfHwxZTMsZHVyYXRpb246ZS5kdXJhdGlvbixhdmNjOmUuYXZjYyxwYXJSYXRpbzplLnBhclJhdGlvLHdpZHRoOmUucHJlc2VudFdpZHRoLGhlaWdodDplLnByZXNlbnRIZWlnaHR9KTtyZXR1cm5baSxzXS5mb3JFYWNoKGU9Pnt0Kz1lLmJ5dGVMZW5ndGh9KSxyLmluaXRCb3godCxcInRyYWtcIixpLHMpfXN0YXRpYyBhdWRpb1RyYWsoZSl7bGV0IHQ9OCxpPXIudGtoZCh7aWQ6MixkdXJhdGlvbjplLmR1cmF0aW9uLHRpbWVzY2FsZTplLnRpbWVzY2FsZXx8MWUzLHdpZHRoOjAsaGVpZ2h0OjAsdHlwZTpcImF1ZGlvXCJ9KSxzPXIubWRpYSh7dHlwZTpcImF1ZGlvXCIsdGltZXNjYWxlOmUudGltZXNjYWxlfHwxZTMsZHVyYXRpb246ZS5kdXJhdGlvbixjaGFubmVsQ291bnQ6ZS5jaGFubmVsQ291bnQsc2FtcGxlcmF0ZTplLnNhbXBsZVJhdGUsY29uZmlnOmUuY29uZmlnfSk7cmV0dXJuW2ksc10uZm9yRWFjaChlPT57dCs9ZS5ieXRlTGVuZ3RofSksci5pbml0Qm94KHQsXCJ0cmFrXCIsaSxzKX1zdGF0aWMgdGtoZChlKXtsZXQgdD1lLmlkLGk9ZS5kdXJhdGlvbixzPWUud2lkdGgsYT1lLmhlaWdodCxuPW5ldyBVaW50OEFycmF5KFswLDAsMCw3LDAsMCwwLDAsMCwwLDAsMCx0Pj4+MjQmMjU1LHQ+Pj4xNiYyNTUsdD4+PjgmMjU1LDI1NSZ0LDAsMCwwLDAsaT4+PjI0JjI1NSxpPj4+MTYmMjU1LGk+Pj44JjI1NSwyNTUmaSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw2NCwwLDAsMCxzPj4+OCYyNTUsMjU1JnMsMCwwLGE+Pj44JjI1NSwyNTUmYSwwLDBdKTtyZXR1cm4gci5pbml0Qm94KDgrbi5ieXRlTGVuZ3RoLFwidGtoZFwiLG4pfXN0YXRpYyBlZHRzKGUpe2xldCB0PW5ldyBzLkJ1ZmZlcixpPWUuZHVyYXRpb24sYT1lLm1lZGlhVGltZTtyZXR1cm4gdC53cml0ZShyLnNpemUoMzYpLHIudHlwZShcImVkdHNcIikpLHQud3JpdGUoci5zaXplKDI4KSxyLnR5cGUoXCJlbHN0XCIpKSx0LndyaXRlKG5ldyBVaW50OEFycmF5KFswLDAsMCwxLGk+PjI0JjI1NSxpPj4xNiYyNTUsaT4+OCYyNTUsMjU1JmksYT4+MjQmMjU1LGE+PjE2JjI1NSxhPj44JjI1NSwyNTUmYSwwLDAsMCwxXSkpLHQuYnVmZmVyfXN0YXRpYyBtZGlhKGUpe2xldCB0PTgsaT1yLm1kaGQoZS50aW1lc2NhbGUsZS5kdXJhdGlvbikscz1yLmhkbHIoZS50eXBlKSxhPXIubWluZihlKTtyZXR1cm5baSxzLGFdLmZvckVhY2goZT0+e3QrPWUuYnl0ZUxlbmd0aH0pLHIuaW5pdEJveCh0LFwibWRpYVwiLGkscyxhKX1zdGF0aWMgbWRoZCgpe2xldCBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXToxZTMsdD1hcmd1bWVudHNbMV0saT1uZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwwLGU+Pj4yNCYyNTUsZT4+PjE2JjI1NSxlPj4+OCYyNTUsMjU1JmUsdD4+PjI0JjI1NSx0Pj4+MTYmMjU1LHQ+Pj44JjI1NSwyNTUmdCw4NSwxOTYsMCwwXSk7cmV0dXJuIHIuaW5pdEJveCgxMitpLmJ5dGVMZW5ndGgsXCJtZGhkXCIsci5leHRlbnNpb24oMCwwKSxpKX1zdGF0aWMgaGRscihlKXtsZXQgdD1bMCwwLDAsMCwwLDAsMCwwLDExOCwxMDUsMTAwLDEwMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw4NiwxMDUsMTAwLDEwMSwxMTEsNzIsOTcsMTEwLDEwMCwxMDgsMTAxLDExNCwwXTtyZXR1cm5cImF1ZGlvXCI9PT1lJiYodC5zcGxpY2UuYXBwbHkodCxbOCw0XS5jb25jYXQoWzExNSwxMTEsMTE3LDExMF0pKSx0LnNwbGljZS5hcHBseSh0LFsyNCwxM10uY29uY2F0KFs4MywxMTEsMTE3LDExMCwxMDAsNzIsOTcsMTEwLDEwMCwxMDgsMTAxLDExNCwwXSkpKSxyLmluaXRCb3goOCt0Lmxlbmd0aCxcImhkbHJcIixuZXcgVWludDhBcnJheSh0KSl9c3RhdGljIG1pbmYoZSl7bGV0IHQ9OCxpPVwidmlkZW9cIj09PWUudHlwZT9yLnZtaGQoKTpyLnNtaGQoKSxzPXIuZGluZigpLGE9ci5zdGJsKGUpO3JldHVybltpLHMsYV0uZm9yRWFjaChlPT57dCs9ZS5ieXRlTGVuZ3RofSksci5pbml0Qm94KHQsXCJtaW5mXCIsaSxzLGEpfXN0YXRpYyB2bWhkKCl7cmV0dXJuIHIuaW5pdEJveCgyMCxcInZtaGRcIixuZXcgVWludDhBcnJheShbMCwwLDAsMSwwLDAsMCwwLDAsMCwwLDBdKSl9c3RhdGljIHNtaGQoKXtyZXR1cm4gci5pbml0Qm94KDE2LFwic21oZFwiLG5ldyBVaW50OEFycmF5KFswLDAsMCwwLDAsMCwwLDBdKSl9c3RhdGljIGRpbmYoKXtsZXQgZT1uZXcgcy5CdWZmZXI7cmV0dXJuIGUud3JpdGUoci5zaXplKDM2KSxyLnR5cGUoXCJkaW5mXCIpLHIuc2l6ZSgyOCksci50eXBlKFwiZHJlZlwiKSxuZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwxLDAsMCwwLDEyLDExNywxMTQsMTA4LDMyLDAsMCwwLDFdKSksZS5idWZmZXJ9c3RhdGljIHN0YmwoZSl7bGV0IHQ9OCxpPXIuc3RzZChlKSxzPXIuc3R0cygpLGE9ci5zdHNjKCksbj1yLnN0c3ooKSxvPXIuc3RjbygpO3JldHVybltpLHMsYSxuLG9dLmZvckVhY2goZT0+e3QrPWUuYnl0ZUxlbmd0aH0pLHIuaW5pdEJveCh0LFwic3RibFwiLGkscyxhLG4sbyl9c3RhdGljIHN0c2QoZSl7bGV0IHQ7cmV0dXJuIHQ9XCJhdWRpb1wiPT09ZS50eXBlP3IubXA0YShlKTpyLmF2YzEoZSksci5pbml0Qm94KDE2K3QuYnl0ZUxlbmd0aCxcInN0c2RcIixyLmV4dGVuc2lvbigwLDApLG5ldyBVaW50OEFycmF5KFswLDAsMCwxXSksdCl9c3RhdGljIG1wNGEoZSl7bGV0IHQ9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMSwwLDAsMCwwLDAsMCwwLDAsMCxlLmNoYW5uZWxDb3VudCwwLDE2LDAsMCwwLDAsZS5zYW1wbGVyYXRlPj44JjI1NSwyNTUmZS5zYW1wbGVyYXRlLDAsMF0pLGk9ci5lc2RzKGUuY29uZmlnKTtyZXR1cm4gci5pbml0Qm94KDgrdC5ieXRlTGVuZ3RoK2kuYnl0ZUxlbmd0aCxcIm1wNGFcIix0LGkpfXN0YXRpYyBlc2RzKCl7bGV0IGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOls0MywxNDYsOCwwXTtjb25zdCB0PWUubGVuZ3RoO2xldCBpPW5ldyBzLkJ1ZmZlcixhPW5ldyBVaW50OEFycmF5KFswLDAsMCwwLDMsMjMrdCwwLDEsMCw0LDE1K3QsNjQsMjEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDVdLmNvbmNhdChbdF0pLmNvbmNhdChlKS5jb25jYXQoWzYsMSwyXSkpO3JldHVybiBpLndyaXRlKHIuc2l6ZSg4K2EuYnl0ZUxlbmd0aCksci50eXBlKFwiZXNkc1wiKSxhKSxpLmJ1ZmZlcn1zdGF0aWMgYXZjMShlKXtsZXQgdD1uZXcgcy5CdWZmZXIsaT1lLndpZHRoLGE9ZS5oZWlnaHQsbj1lLnBhclJhdGlvLmhlaWdodCxvPWUucGFyUmF0aW8ud2lkdGgsZD1lLmF2Y2MsbD1uZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsaT4+OCYyNTUsMjU1JmksYT4+OCYyNTUsMjU1JmEsMCw3MiwwLDAsMCw3MiwwLDAsMCwwLDAsMCwwLDEsMTgsMTAwLDk3LDEwNSwxMDgsMTIxLDEwOSwxMTEsMTE2LDEwNSwxMTEsMTEwLDQ3LDEwNCwxMDgsMTE1LDQ2LDEwNiwxMTUsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDI0LDE3LDE3XSksaD1uZXcgVWludDhBcnJheShbMCwyOCwxNTYsMTI4LDAsNDUsMTk4LDE5MiwwLDQ1LDE5OCwxOTJdKSx1PW5ldyBVaW50OEFycmF5KFtuPj4yNCxuPj4xNiYyNTUsbj4+OCYyNTUsMjU1Jm4sbz4+MjQsbz4+MTYmMjU1LG8+PjgmMjU1LDI1NSZvXSk7cmV0dXJuIHQud3JpdGUoci5zaXplKDQwK2wuYnl0ZUxlbmd0aCtkLmJ5dGVMZW5ndGgraC5ieXRlTGVuZ3RoKSxyLnR5cGUoXCJhdmMxXCIpLGwsci5zaXplKDgrZC5ieXRlTGVuZ3RoKSxyLnR5cGUoXCJhdmNDXCIpLGQsci5zaXplKDIwKSxyLnR5cGUoXCJidHJ0XCIpLGgsci5zaXplKDE2KSxyLnR5cGUoXCJwYXNwXCIpLHUpLHQuYnVmZmVyfXN0YXRpYyBzdHRzKCl7bGV0IGU9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMF0pO3JldHVybiByLmluaXRCb3goMTYsXCJzdHRzXCIsZSl9c3RhdGljIHN0c2MoKXtsZXQgZT1uZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwwXSk7cmV0dXJuIHIuaW5pdEJveCgxNixcInN0c2NcIixlKX1zdGF0aWMgc3Rjbygpe2xldCBlPW5ldyBVaW50OEFycmF5KFswLDAsMCwwLDAsMCwwLDBdKTtyZXR1cm4gci5pbml0Qm94KDE2LFwic3Rjb1wiLGUpfXN0YXRpYyBzdHN6KCl7bGV0IGU9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSk7cmV0dXJuIHIuaW5pdEJveCgyMCxcInN0c3pcIixlKX1zdGF0aWMgbXZleChlKXthcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdO2xldCB0PWFyZ3VtZW50c1syXSxpPW5ldyBzLkJ1ZmZlcixhPXMuQnVmZmVyLndyaXRlVWludDMyKGUpO3JldHVybiBpLndyaXRlKHIuc2l6ZSg1Niksci50eXBlKFwibXZleFwiKSxyLnNpemUoMTYpLHIudHlwZShcIm1laGRcIiksci5leHRlbnNpb24oMCwwKSxhLHIudHJleCh0KSksaS5idWZmZXJ9c3RhdGljIHRyZXgoZSl7bGV0IHQ9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsZT4+MjQsZT4+MTYmMjU1LGU+PjgmMjU1LDI1NSZlLDAsMCwwLDEsMCwwLDAsMCwwLDAsMCwwLDAsMSwwLDFdKTtyZXR1cm4gci5pbml0Qm94KDgrdC5ieXRlTGVuZ3RoLFwidHJleFwiLHQpfXN0YXRpYyBtb29mKGUpe2xldCB0PTgsaT1yLm1maGQoKSxzPXIudHJhZihlKTtyZXR1cm5baSxzXS5mb3JFYWNoKGU9Pnt0Kz1lLmJ5dGVMZW5ndGh9KSxyLmluaXRCb3godCxcIm1vb2ZcIixpLHMpfXN0YXRpYyBtZmhkKCl7bGV0IGU9cy5CdWZmZXIud3JpdGVVaW50MzIoci5zZXF1ZW5jZSk7cmV0dXJuIHIuc2VxdWVuY2UrPTEsci5pbml0Qm94KDE2LFwibWZoZFwiLHIuZXh0ZW5zaW9uKDAsMCksZSl9c3RhdGljIHRyYWYoZSl7bGV0IHQ9OCxpPXIudGZoZChlLmlkKSxzPXIudGZkdChlLnRpbWUpLGE9ci5zZHRwKGUpLG49ci50cnVuKGUsYS5ieXRlTGVuZ3RoKTtyZXR1cm5baSxzLG4sYV0uZm9yRWFjaChlPT57dCs9ZS5ieXRlTGVuZ3RofSksci5pbml0Qm94KHQsXCJ0cmFmXCIsaSxzLG4sYSl9c3RhdGljIHRmaGQoZSl7bGV0IHQ9cy5CdWZmZXIud3JpdGVVaW50MzIoZSk7cmV0dXJuIHIuaW5pdEJveCgxNixcInRmaGRcIixyLmV4dGVuc2lvbigwLDApLHQpfXN0YXRpYyB0ZmR0KGUpe3JldHVybiByLmluaXRCb3goMTYsXCJ0ZmR0XCIsci5leHRlbnNpb24oMCwwKSxzLkJ1ZmZlci53cml0ZVVpbnQzMihlKSl9c3RhdGljIHRydW4oZSx0KXtsZXQgaT1uZXcgcy5CdWZmZXIsYT1zLkJ1ZmZlci53cml0ZVVpbnQzMihlLnNhbXBsZXMubGVuZ3RoKSxuPXMuQnVmZmVyLndyaXRlVWludDMyKDkyKzE2KmUuc2FtcGxlcy5sZW5ndGgrdCk7cmV0dXJuIGkud3JpdGUoci5zaXplKDIwKzE2KmUuc2FtcGxlcy5sZW5ndGgpLHIudHlwZShcInRydW5cIiksbmV3IFVpbnQ4QXJyYXkoWzAsMCwxNSwxXSksYSxuKSxlLnNhbXBsZXMuZm9yRWFjaChlPT57Y29uc3QgdD1lLmZsYWdzO2kud3JpdGUobmV3IFVpbnQ4QXJyYXkoW2UuZHVyYXRpb24+Pj4yNCYyNTUsZS5kdXJhdGlvbj4+PjE2JjI1NSxlLmR1cmF0aW9uPj4+OCYyNTUsMjU1JmUuZHVyYXRpb24sZS5zaXplPj4+MjQmMjU1LGUuc2l6ZT4+PjE2JjI1NSxlLnNpemU+Pj44JjI1NSwyNTUmZS5zaXplLHQuaXNMZWFkaW5nPDwyfHQuZGVwZW5kc09uLHQuaXNEZXBlbmRlZE9uPDw2fHQuaGFzUmVkdW5kYW5jeTw8NHx0LmlzTm9uU3luYywwLDAsZS5jdHM+Pj4yNCYyNTUsZS5jdHM+Pj4xNiYyNTUsZS5jdHM+Pj44JjI1NSwyNTUmZS5jdHNdKSl9KSxpLmJ1ZmZlcn1zdGF0aWMgc2R0cChlKXtsZXQgdD1uZXcgcy5CdWZmZXI7cmV0dXJuIHQud3JpdGUoci5zaXplKDEyK2Uuc2FtcGxlcy5sZW5ndGgpLHIudHlwZShcInNkdHBcIiksci5leHRlbnNpb24oMCwwKSksZS5zYW1wbGVzLmZvckVhY2goZT0+e2NvbnN0IGk9ZS5mbGFncyxzPWkuaXNMZWFkaW5nPDw2fGkuZGVwZW5kc09uPDw0fGkuaXNEZXBlbmRlZE9uPDwyfGkuaGFzUmVkdW5kYW5jeTt0LndyaXRlKG5ldyBVaW50OEFycmF5KFtzXSkpfSksdC5idWZmZXJ9c3RhdGljIG1kYXQoZSl7bGV0IHQ9bmV3IHMuQnVmZmVyLGk9ODtlLnNhbXBsZXMuZm9yRWFjaChlPT57aSs9ZS5zaXplfSksdC53cml0ZShyLnNpemUoaSksci50eXBlKFwibWRhdFwiKSk7bGV0IGE9bmV3IFVpbnQ4QXJyYXkoaSksbj0wO3JldHVybiBhLnNldCh0LmJ1ZmZlcixuKSxuKz04LGUuc2FtcGxlcy5mb3JFYWNoKGU9PntlLmJ1ZmZlci5mb3JFYWNoKGU9PnthLnNldChlLG4pLG4rPWUuYnl0ZUxlbmd0aH0pfSksYX19ci50eXBlPWU9Pm5ldyBVaW50OEFycmF5KFtlLmNoYXJDb2RlQXQoMCksZS5jaGFyQ29kZUF0KDEpLGUuY2hhckNvZGVBdCgyKSxlLmNoYXJDb2RlQXQoMyldKSxyLnNlcXVlbmNlPTEsdC5kZWZhdWx0PXJ9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9e0ZldGNoTG9hZGVyOmkoNDApLmRlZmF1bHR9fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgcz1pKDApLkVWRU5UUy5MT0FERVJfRVZFTlRTLHI9MCxhPTEsbj0yLG89Mzt0LmRlZmF1bHQ9Y2xhc3N7Y29uc3RydWN0b3IoZSl7dGhpcy5jb25maWdzPU9iamVjdC5hc3NpZ24oe30sZSksdGhpcy51cmw9bnVsbCx0aGlzLnN0YXR1cz0wLHRoaXMuZXJyb3I9bnVsbCx0aGlzLl9yZWFkZXI9bnVsbCx0aGlzLl9jYW5jZWxlZD0hMSx0aGlzLl9kZXN0cm95ZWQ9ITEsdGhpcy5yZWFkdHlwZT10aGlzLmNvbmZpZ3MucmVhZHR5cGUsdGhpcy5idWZmZXI9dGhpcy5jb25maWdzLmJ1ZmZlcnx8XCJMT0FERVJfQlVGRkVSXCIsdGhpcy5fbG9hZGVyVGFza05vPTB9aW5pdCgpe3RoaXMub24ocy5MQURFUl9TVEFSVCx0aGlzLmxvYWQuYmluZCh0aGlzKSl9c3RhdGljIGdldCB0eXBlKCl7cmV0dXJuXCJsb2FkZXJcIn1sb2FkKGUsdCl7bGV0IGk9dGhpczt0aGlzLnVybD1lLHRoaXMuX2NhbmNlbGVkPSExO2xldCByPXRoaXMuZ2V0UGFyYW1zKHQpO3JldHVybiBpLmxvYWRpbmc9ITAsZmV0Y2godGhpcy51cmwscikudGhlbigoZnVuY3Rpb24oZSl7aWYoZS5vaylyZXR1cm4gaS5zdGF0dXM9ZS5zdGF0dXMsaS5fb25GZXRjaFJlc3BvbnNlKGUpO2kubG9hZGluZz0hMSxpLmVtaXQocy5MT0FERVJfRVJST1IsaS5UQUcsbmV3IEVycm9yKFwiaW52YWxpZCByZXNwb25zZS5cIikpfSkpLmNhdGNoKChmdW5jdGlvbihlKXt0aHJvdyBpLmxvYWRpbmc9ITEsaS5lbWl0KHMuTE9BREVSX0VSUk9SLGkuVEFHLGUpLG5ldyBFcnJvcihlLm1lc3NhZ2UpfSkpfV9vbkZldGNoUmVzcG9uc2UoZSl7bGV0IHQ9dGhpcyxpPXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5idWZmZXIpO3RoaXMuX2xvYWRlclRhc2tObysrO2xldCBkPXRoaXMuX2xvYWRlclRhc2tObztpZighMD09PWUub2spc3dpdGNoKHRoaXMucmVhZHR5cGUpe2Nhc2UgbjplLmpzb24oKS50aGVuKGU9Pnt0LmxvYWRpbmc9ITEsdC5fY2FuY2VsZWR8fHQuX2Rlc3Ryb3llZHx8KGk/KGkucHVzaChlKSx0LmVtaXQocy5MT0FERVJfQ09NUExFVEUsaSkpOnQuZW1pdChzLkxPQURFUl9DT01QTEVURSxlKSl9KTticmVhaztjYXNlIGE6ZS50ZXh0KCkudGhlbihlPT57dC5sb2FkaW5nPSExLHQuX2NhbmNlbGVkfHx0Ll9kZXN0cm95ZWR8fChpPyhpLnB1c2goZSksdC5lbWl0KHMuTE9BREVSX0NPTVBMRVRFLGkpKTp0LmVtaXQocy5MT0FERVJfQ09NUExFVEUsZSkpfSk7YnJlYWs7Y2FzZSBvOmUuYXJyYXlCdWZmZXIoKS50aGVuKGU9Pnt0LmxvYWRpbmc9ITEsdC5fY2FuY2VsZWR8fHQuX2Rlc3Ryb3llZHx8KGk/KGkucHVzaChuZXcgVWludDhBcnJheShlKSksdC5lbWl0KHMuTE9BREVSX0NPTVBMRVRFLGkpKTp0LmVtaXQocy5MT0FERVJfQ09NUExFVEUsZSkpfSk7YnJlYWs7Y2FzZSByOmRlZmF1bHQ6cmV0dXJuIHRoaXMuX29uUmVhZGVyKGUuYm9keS5nZXRSZWFkZXIoKSxkKX19X29uUmVhZGVyKGUsdCl7bGV0IGk9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmJ1ZmZlcik7aWYoIWkmJnRoaXMuX3JlYWRlcnx8dGhpcy5fZGVzdHJveWVkKXRyeXt0aGlzLl9yZWFkZXIuY2FuY2VsKCl9Y2F0Y2goZSl7fWlmKHRoaXMuX3JlYWRlcj1lLCExPT09dGhpcy5sb2FkaW5nKXJldHVybjtsZXQgcj10aGlzO3RoaXMuX3JlYWRlciYmdGhpcy5fcmVhZGVyLnJlYWQoKS50aGVuKChmdW5jdGlvbihhKXtpZighci5fY2FuY2VsZWQmJiFyLl9kZXN0cm95ZWQpcmV0dXJuIGEuZG9uZT8oci5sb2FkaW5nPSExLHIuc3RhdHVzPTAsdm9pZCByLmVtaXQocy5MT0FERVJfQ09NUExFVEUsaSkpOihpLnB1c2goYS52YWx1ZSksci5lbWl0KHMuTE9BREVSX0RBVEFMT0FERUQsaSksci5fb25SZWFkZXIoZSx0KSk7aWYoci5fcmVhZGVyKXRyeXtyLl9yZWFkZXIuY2FuY2VsKCl9Y2F0Y2goZSl7fX0pKS5jYXRjaChlPT57ci5sb2FkaW5nPSExLHIuZW1pdChzLkxPQURFUl9FUlJPUixyLlRBRyxlKX0pfWdldFBhcmFtcyhlKXtsZXQgdD1PYmplY3QuYXNzaWduKHt9LGUpLGk9bmV3IEhlYWRlcnMscz17bWV0aG9kOlwiR0VUXCIsaGVhZGVyczppLG1vZGU6XCJjb3JzXCIsY2FjaGU6XCJkZWZhdWx0XCJ9O2lmKFwib2JqZWN0XCI9PXR5cGVvZiB0aGlzLmNvbmZpZ3MuaGVhZGVycyl7bGV0IGU9dGhpcy5jb25maWdzLmhlYWRlcnM7Zm9yKGxldCB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmaS5hcHBlbmQodCxlW3RdKX1pZihcIm9iamVjdFwiPT10eXBlb2YgdC5oZWFkZXJzKXtsZXQgZT10LmhlYWRlcnM7Zm9yKGxldCB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmaS5hcHBlbmQodCxlW3RdKX1yZXR1cm4hMT09PXQuY29ycyYmKHMubW9kZT1cInNhbWUtb3JpZ2luXCIpLHQud2l0aENyZWRlbnRpYWxzJiYocy5jcmVkZW50aWFscz1cImluY2x1ZGVcIiksc31jYW5jZWwoKXtpZih0aGlzLl9yZWFkZXIpe3RyeXt0aGlzLl9yZWFkZXIuY2FuY2VsKCl9Y2F0Y2goZSl7fXRoaXMuX3JlYWRlcj1udWxsLHRoaXMubG9hZGluZz0hMX10aGlzLl9jYW5jZWxlZD0hMH1kZXN0cm95KCl7dGhpcy5fZGVzdHJveWVkPSEwLHRoaXMuY2FuY2VsKCl9fX1dKX0pKTsiLCJpbXBvcnQgRmx2TGl2ZVBsYXllciBmcm9tICd4Z3BsYXllci1mbHYtbGl2ZSdcbmltcG9ydCBGbHZWb2RQbGF5ZXIgZnJvbSAneGdwbGF5ZXItZmx2LXZvZCdcblxuY2xhc3MgRmx2UGxheWVye1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZy5pc0xpdmUpIHtcbiAgICAgIHJldHVybiBuZXcgRmx2TGl2ZVBsYXllcihjb25maWcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRmx2Vm9kUGxheWVyKGNvbmZpZylcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGbHZQbGF5ZXJcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV94Z3BsYXllcl9fOyJdLCJzb3VyY2VSb290IjoiIn0=