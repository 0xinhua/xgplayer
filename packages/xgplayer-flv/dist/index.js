!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("xgplayer")):"function"==typeof define&&define.amd?define(["xgplayer"],t):"object"==typeof exports?exports["xgplayer-flv"]=t(require("xgplayer")):e["xgplayer-flv"]=t(e.xgplayer)}(window,(function(e){return function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../xgplayer-flv-live/dist/index.js":
/*!****************************!*\
  !*** .-live/dist/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){"use strict";var s;window,e.exports=(s=i(/*! xgplayer */"xgplayer"),function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../../node_modules/events/events.js":
/*!*****************************************************************************************!*\
      !*** /Users/leonardo/Documents/front-end/player/xgplayer/node_modules/events/events.js ***!
      \*****************************************************************************************/
/*! no static exports found */function(e,t,i){var s,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};s=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var d=10;function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function h(e,t,i,s){var r,a,n,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),n=a[t]),void 0===n)n=a[t]=i,++e._eventsCount;else if("function"==typeof n?n=a[t]=s?[i,n]:[n,i]:s?n.unshift(i):n.push(i),(r=l(e))>0&&n.length>r&&!n.warned){n.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=t,d.count=n.length,o=d,console&&console.warn&&console.warn(o)}return e}function u(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function c(e,t,i){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=u.bind(s);return r.listener=i,s.wrapFn=r,r}function f(e,t,i){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):m(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function m(e,t){for(var i=new Array(t),s=0;s<t;++s)i[s]=e[s];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return d},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");d=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var s="error"===e,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var d=r[e];if(void 0===d)return!1;if("function"==typeof d)a(d,this,t);else{var l=d.length,h=m(d,l);for(i=0;i<l;++i)a(h[i],this,t)}return!0},o.prototype.addListener=function(e,t){return h(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return h(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,s,r,a,n;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(s=this._events))return this;if(void 0===(i=s[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(r=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){n=i[a].listener,r=a;break}if(r<0)return this;0===r?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,r),1===i.length&&(s[e]=i[0]),void 0!==s.removeListener&&this.emit("removeListener",e,n||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,i,s;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,a=Object.keys(i);for(s=0;s<a.length;++s)"removeListener"!==(r=a[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},"../xgplayer-buffer/index.js":
/*!***********************************!*\
      !*** ../xgplayer-buffer/index.js ***!
      \***********************************/
/*! no static exports found */function(e,t,i){e.exports={Track:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:i(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").default}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
      !*** ../xgplayer-buffer/src/buffer.js ***!
      \****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let s=this.array[0].slice(this.offset,this.offset+e);t.set(s,i),this.offset+=e,this.length-=e,e=0;break}{let s=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=s,this.length-=s,e-=s}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,s=this.offset+e;for(;s<this.offset+t+e;)s<this.array[0].length?i=256*i+this.array[0][s]:this.array[1]&&(i=256*i+this.array[1][s-this.array[0].length]),s++;return i}},t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
      !*** ../xgplayer-buffer/src/presouce.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new s,this.sources[e]}clear(){this.sources={}}destroy(){this.sources={}}}},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
      !*** ../xgplayer-buffer/src/track.js ***!
      \***************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=s,t.AudioTrack=class extends s{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}},t.VideoTrack=class extends s{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}},t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}destroy(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-codec/index.js":
/*!**********************************!*\
      !*** ../xgplayer-codec/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Nalunit:i(/*! ./src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js").default,SpsParser:i(/*! ./src/h264/nalunit/sps */"../xgplayer-codec/src/h264/nalunit/sps.js").default,Compatibility:i(/*! ./src/compatibility */"../xgplayer-codec/src/compatibility.js").default}},"../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
      !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{static getSilentFrame(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},"../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
      !*** ../xgplayer-codec/src/compatibility.js ***!
      \**********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=(s=i(/*! ./aac/aac-helper */"../xgplayer-codec/src/aac/aac-helper.js"))&&s.__esModule?s:{default:s};const{REMUX_EVENTS:n,LOADER_EVENTS:o}=r.EVENTS;class d{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[],this.videoLastSample=null,this.audioLastSample=null,this._videoLargeGap=0,this._audioLargeGap=0}init(){this.before(n.REMUX_MEDIA,this.doFix.bind(this)),this.on(o.LOADER_COMPLETE,()=>{this.videoLastSample&&this.videoTrack.samples.unshift(this.videoLastSample)})}reset(){this.nextAudioDts=null,this.nextVideoDts=null,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:e,isFirstVideoSamples:t}=this.getFirstSample();this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples);const{changed:i,changedIdx:s}=d.detactChangeStream(this.videoTrack.samples);i&&!e?this.fixChangeStreamVideo(s):this.doFixVideo(t);const{changed:r,changedIdx:a}=d.detactChangeStream(this.audioTrack.samples);r?this.fixChangeStreamAudio(a):this.doFixAudio(e),this.removeInvalidSamples()}doFixVideo(e,t){let{samples:i,meta:s}=this.videoTrack;for(let e=0,t=i.length;e<t;e++){const t=i[e];t.originDts=t.dts}if(s.frameRate&&!1===s.frameRate.fixed)return;if(!i||!i.length||!this._firstVideoSample)return;const r=i[0];if(i.length,this._videoLargeGap>0&&d.doFixLargeGap(i,this._videoLargeGap),r.dts!==this._firstVideoSample.dts&&t&&(t&&(this.nextVideoDts=t),this._videoLargeGap=this.nextVideoDts-r.dts,d.doFixLargeGap(i,this._videoLargeGap)),r.dts,e&&this._firstAudioSample){const e=this._firstVideoSample.dts,t=e-this._firstAudioSample.dts;if(t>2*s.refSampleDuration){const a=Math.floor(t/s.refSampleDuration);for(let t=0;t<a;t++){const a=Object.assign({},r);a.dts=e-(t+1)*s.refSampleDuration,a.pts=a.dts+a.cts,i.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}}}const a=i.pop();if(i.length&&(i[i.length-1].duration=a.dts-i[i.length-1].dts),this.videoLastSample){const e=this.videoLastSample;e.duration=r.dts-e.dts,i.unshift(this.videoLastSample)}this.videoLastSample=a,this.videoTrack.samples=i}doFixAudio(e,t){let{samples:i,meta:s}=this.audioTrack;if(!i||!i.length)return;for(let e=0,t=i.length;e<t;e++){const t=i[e];t.originDts=t.dts}const r=i.length,n=a.default.getSilentFrame(s.codec,s.channelCount),o=this._firstAudioSample,l=i[0];if(this._audioLargeGap>0&&d.doFixLargeGap(i,this._audioLargeGap),l.dts!==this._firstAudioSample.dts&&(t||d.detectLargeGap(this.nextAudioDts,l))&&(t&&(this.nextAudioDts=t),this._audioLargeGap=this.nextAudioDts-l.dts,d.doFixLargeGap(i,this._audioLargeGap)),this._firstVideoSample&&e){const e=this._firstVideoSample.pts?this._firstVideoSample.pts:this._firstVideoSample.dts+this._firstVideoSample.cts;if(o.dts-e>s.refSampleDuration){const t=Math.floor((o.dts-e)/s.refSampleDuration);for(let e=0;e<t;e++){const t={data:n,datasize:n.byteLength,dts:o.dts-(e+1)*s.refSampleDuration,filtered:0};i.unshift(t),this.filledAudioSamples.push({dts:t.dts,size:t.data.byteLength})}}}let h;const u=i[0].dts;if(this.nextAudioDts){h=u-this.nextAudioDts;const e=Math.abs(h);if(e>s.refSampleDuration&&1===r&&1===this.lastAudioSamplesLen&&(s.refSampleDurationFixed=void 0),h>2*s.refSampleDuration)if(1===r&&1===this.lastAudioSamplesLen)s.refSampleDurationFixed=void 0!==s.refSampleDurationFixed?s.refSampleDurationFixed+h:s.refSampleDuration+h;else{const e=Math.floor(h/s.refSampleDuration);for(let t=0;t<e;t++){const e=u-(t+1)*s.refSampleDuration,r=Object.assign({},i[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else e<=s.refSampleDuration&&e>0?(i[0].dts=this.nextAudioDts,i[0].pts=this.nextAudioDts):h<0&&d.doFixLargeGap(i,-1*h)}const c=i[i.length-1].originDts,f=i[i.length-1].originDts,p=i.length>=2?c-i[i.length-2].originDts:s.refSampleDuration;this.lastAudioSamplesLen=r,this.nextAudioDts=s.refSampleDurationFixed?f+s.refSampleDurationFixed:f+p,this.lastAudioDts=f,i[i.length-1].duration=p;for(let e=0,t=i.length;e<t;e++){const t=i[e],s=i[e+1];if(!s)break;const r=s.dts-t.dts;i[e].duration=r}this.audioTrack.samples=d.sortAudioSamples(i)}fixChangeStreamVideo(e){const{samples:t,meta:i}=this.videoTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixVideo(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.videoTrack.samples=t.slice(0,e),this.doFixVideo(!1),this.videoTrack.samples=t.slice(e),this.doFixVideo(!1,l),this.videoTrack.samples=a.concat(n)}fixChangeStreamAudio(e){const{samples:t,meta:i}=this.audioTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixAudio(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.audioTrack.samples=a,this.doFixAudio(!1),this.audioTrack.samples=n,this.doFixAudio(!1,l),this.audioTrack.samples=a.concat(n)}getFirstSample(){let{samples:e}=this.videoTrack,{samples:t}=this.audioTrack,i=!1,s=!1;return!this._firstVideoSample&&e.length&&(this._firstVideoSample=d.findFirstVideoSample(e),i=!0),!this._firstAudioSample&&t.length&&(this._firstAudioSample=d.findFirstAudioSample(t),s=!0),{isFirstVideoSamples:i,isFirstAudioSamples:s}}fixRefSampleDuration(e,t){const i="video"===e.type,s=i?this.allVideoSamplesCount:this.allAudioSamplesCount,r=i?this._firstVideoSample.dts:this._firstAudioSample.dts,a=i?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration)){if(t.length>=1){const i=t[t.length-1].dts;e.refSampleDuration=Math.floor((i-r)/(s+a-1))}}else if(e.refSampleDuration&&t.length>=5){const i=(t[t.length-1].dts-t[0].dts)/(t.length-1);e.refSampleDuration=Math.floor(Math.abs(e.refSampleDuration-i)<=5?e.refSampleDuration:i)}}recordSamplesCount(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}removeInvalidSamples(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter((e,i)=>e===t||e.dts>t.dts),this.videoTrack.samples=this.videoTrack.samples.filter((t,i)=>t===e||t.dts>e.dts)}getStreamChangeStart(e){return e.options&&e.options.start?e.options.start-this.dtsBase:1/0}static sortAudioSamples(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}static findFirstAudioSample(e){return e&&0!==e.length?d.sortAudioSamples(e)[0]:null}static findFirstVideoSample(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,i=t.length;e<i;e++)if(t[e].isKeyframe)return t[e]}static detectLargeGap(e,t){if(null===e)return;const i=t.dts||0,s=e-i>=1e3||i-e>=1e3,r=t.options&&t.options.discontinue;return s||r}static doFixLargeGap(e,t){for(let i=0,s=e.length;i<s;i++){const s=e[i];s.dts+=t,s.pts&&(s.pts+=t)}}static detactChangeStream(e){let t=!1,i=-1;for(let s=0,r=e.length;s<r;s++)if(e[s].options&&e[s].options.meta){t=!0,i=s;break}return{changed:t,changedIdx:i}}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks?this.tracks.audioTrack:null}get videoTrack(){return this.tracks?this.tracks.videoTrack:null}get dtsBase(){const e=this._context.getInstance("MP4_REMUXER");return e?e._dtsBase:0}}t.default=d},"../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){let t=Math.min(this._currentWordBitsLeft,e),i=this._currentWord>>>32-t;if(e>32)throw new Error("Cannot read more than 32 bits at a time");return this._currentWordBitsLeft-=t,this._currentWordBitsLeft>0?this._currentWord<<=t:this._totalBytes-this._bufferIndex>0&&this._fillCurrentWord(),(t=e-t)>0&&this._currentWordBitsLeft?i<<t|this.readBits(t):i}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
      \***************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./sps */"../xgplayer-codec/src/h264/nalunit/sps.js"))&&s.__esModule?s:{default:s};class a{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,i=e.position;return 1===t.getInt32(i)||0===t.getInt16(i)&&1===t.getInt8(i+2)?a.getAnnexbNals(e):a.getAvccNals(e)}static getAnnexbNals(e){let t=[],i=a.getHeaderPositionAnnexB(e),s=i.pos,r=s;for(;s<e.length-4;){let n=e.buffer.slice(s,s+i.headerLength);i.pos===e.position&&e.skip(i.headerLength),r=(i=a.getHeaderPositionAnnexB(e)).pos;let o={header:n,body:new Uint8Array(e.buffer.slice(s+n.byteLength,r))};a.analyseNal(o),t.push(o),e.skip(r-e.position),s=r}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let i=e.dataview.getInt32();if(!(e.length-e.position>=i))break;{let s=e.buffer.slice(e.position,e.position+4);e.skip(4);let r=e.buffer.slice(e.position,e.position+i);e.skip(i);let n={header:s,body:r};a.analyseNal(n),t.push(n)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=r.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,i=0;for(;3!==i&&4!==i&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?i=4:1===e.dataview.getInt8(t+2)?i=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(i=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?i=3:t=e.length)),{pos:t,headerLength:i}}static getAvcc(e,t){let i=new Uint8Array(e.byteLength+t.byteLength+11);i[0]=1,i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=255,i[5]=225;let s=6;return i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),s),s+=2,i.set(e,s),i[s+=e.byteLength]=1,s++,i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),s),s+=2,i.set(t,s),i}}t.default=a},"../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
      \*************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./golomb */"../xgplayer-codec/src/h264/nalunit/golomb.js"))&&s.__esModule?s:{default:s};class a{static _ebsp2rbsp(e){let t=e,i=t.byteLength,s=new Uint8Array(i),r=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(s[r]=t[e],r++);return new Uint8Array(s.buffer,0,r)}static parseSPS(e){let t=a._ebsp2rbsp(e),i=new r.default(t);i.readByte();let s=i.readByte();i.readByte();let n=i.readByte();i.readUEG();let o=a.getProfileString(s),d=a.getLevelString(n),l=1,h=420,u=8;if((100===s||110===s||122===s||244===s||44===s||83===s||86===s||118===s||128===s||138===s||144===s)&&(3===(l=i.readUEG())&&i.readBits(1),l<=3&&(h=[0,420,422,444][l]),u=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==l?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?a._skipScalingList(i,16):a._skipScalingList(i,64))}i.readUEG();let c=i.readUEG();if(0===c)i.readUEG();else if(1===c){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let f=i.readUEG(),p=i.readUEG(),m=i.readBits(1);0===m&&i.readBits(1),i.readBits(1);let g=0,_=0,y=0,E=0;i.readBool()&&(g=i.readUEG(),_=i.readUEG(),y=i.readUEG(),E=i.readUEG());let v=1,A=1,S=0,b=!0,T=0,x=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],s=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(v=t[e-1],A=s[e-1]):255===e&&(v=i.readByte()<<8|i.readByte(),A=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);b=i.readBool(),S=(T=t)/(x=2*e)}}let w=1;1===v&&1===A||(w=v/A);let R=0,D=0;0===l?(R=1,D=2-m):(R=3===l?1:2,D=(1===l?2:1)*(2-m));let L=16*(f+1),O=16*(p+1)*(2-m);L-=(g+_)*R,O-=(y+E)*D;let M=Math.ceil(L*w);return i.destroy(),i=null,{profile_string:o,level_string:d,bit_depth:u,chroma_format:h,chroma_format_string:a.getChromaFormatString(h),frame_rate:{fixed:b,fps:S,fps_den:x,fps_num:T},par_ratio:{width:v,height:A},codec_size:{width:L,height:O},present_size:{width:M,height:O}}}static _skipScalingList(e,t){let i=8,s=8,r=0;for(let a=0;a<t;a++)0!==s&&(s=(i+(r=e.readSEG())+256)%256),i=0===s?i:s}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},t.frameRate=e.frame_rate;let i=t.frameRate.fps_den,s=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/s))}}t.default=a},"../xgplayer-demux/index.js":
/*!**********************************!*\
      !*** ../xgplayer-demux/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={M3U8Parser:i(/*! ./src/hls/demuxer/m3u8parser */"../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,TsDemuxer:i(/*! ./src/hls/demuxer/ts */"../xgplayer-demux/src/hls/demuxer/ts.js").default,Playlist:i(/*! ./src/hls/playlist */"../xgplayer-demux/src/hls/playlist.js").default,FlvDemuxer:i(/*! ./src/flv/index */"../xgplayer-demux/src/flv/index.js").default}},"../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
      !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};t.default=class{constructor(){this.offset=0,this.readOffset=this.offset}resolve(e,t){if(t<3)throw new Error("not enough data for metainfo");const i={},s=this.parseValue(e),r=this.parseValue(e,t-s.bodySize);return i[s.data]=r.data,this.resetStatus(),i}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(e){const t=new DataView(e,this.readOffset).getUint16(0,!s.isLe);let i="";i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}parseDate(e,t){const i=new DataView(e,this.readOffset,t);let r=i.getFloat64(0,!s.isLe);return r+=60*i.getInt16(8,!s.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(e,t){const i=this.parseString(e,t),s=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:s.data},bodySize:i.bodySize+s.bodySize,isObjEnd:s.isObjEnd}}parseLongString(e){const t=new DataView(e,this.readOffset).getUint32(0,!s.isLe);let i="";return i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}parseValue(e,t){let i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:d,MIX_ARRAY:l,OBJECT_END:h,STRICT_ARRAY:u,DATE:c,LONE_STRING:f}=r,p=new DataView(i,this.readOffset,t);let m=!1;const g=p.getUint8(0);let _=1;this.readOffset+=1;let y=null;switch(g){case a:y=p.getFloat64(1,!s.isLe),this.readOffset+=8,_+=8;break;case n:y=!!p.getUint8(1),this.readOffset+=1,_+=1;break;case o:{const e=this.parseString(i);y=e.data,_+=e.bodySize;break}case d:{y={};let e=0;for(16777215&p.getUint32(t-4,!s.isLe)&&(e=3);_<t-4;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(this.readOffset+=3,_+=3);break}case l:{y={},_+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!s.isLe))&&(e=3);_<t-8;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(_+=3,this.readOffset+=3);break}case h:y=null,m=!0;break;case u:{y=[];const e=p.getUint32(1,!s.isLe);_+=4,this.readOffset+=4;for(let s=0;s<e;s++){const e=this.parseValue(i,t-_);y.push(e.data),_+=e.bodySize}break}case c:{const e=this.parseDate(i,t-1);y=e.data,_+=e.bodySize;break}case f:{const e=this.parseLongString(i,t-1);y=e.data,_+=e.bodySize;break}default:_=t}return{data:y,bodySize:_,isObjEnd:m}}}},"../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
      !*** ../xgplayer-demux/src/flv/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),n=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=(s=i(/*! ./amf-parser */"../xgplayer-demux/src/flv/amf-parser.js"))&&s.__esModule?s:{default:s};const d=r.EVENTS.DEMUX_EVENTS;class l{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(d.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}static getPlayType(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e,t=1e4;do{e=this._parseFlvTag()}while(e&&t-- >0);this.emit(d.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}parseFlvHeader(e){if(l.isFlvFile(e)){this._firstFragmentLoaded=!0;const t=l.getPlayType(e[4]);t.hasVideo&&this.initVideoTrack(),t.hasAudio&&this.initAudioTrack()}else this.emit(d.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let e=new n.VideoTrack;e.meta=new r.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}initAudioTrack(){this._trackNum++;let e=new n.AudioTrack;e.meta=new r.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}_parseFlvTagHeader(){let e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.emit(d.DEMUX_ERROR,this.TAG,new Error("tagType "+t.tagType),!1),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let s=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(s+=16777216*r),t.dts=s,this.loaderBuffer.shift(3),t}_processChunk(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(e){let t=this.tracks.audioTrack,i=this.tracks.videoTrack,s=this.loaderBuffer.shift(e.datasize);const r=(new o.default).resolve(s,s.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(d.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(a.audiosamplerate&&(e.sampleRate=a.audiosamplerate),a.audiochannels&&(e.channelCount=a.audiochannels),a.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){let e=i.meta;if("number"==typeof a.framerate){let t=Math.floor(1e3*a.framerate);if(t>0){let i=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=i,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let i,s,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,s=new Array(4),i=a-3):(t.objectType=2,s=new Array(2),i=a):-1!==r.indexOf("android")?(t.objectType=2,s=new Array(2),i=a):(t.objectType=5,i=t.sampleRateIndex,s=new Array(4),t.sampleRateIndex>=6?i=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,s=new Array(2),i=t.sampleRateIndex)),s[0]=t.objectType<<3,s[0]|=(15&t.sampleRateIndex)>>>1,s[1]=(15&t.sampleRateIndex)<<7,s[1]|=(15&t.channelCount)<<3,5===t.objectType&&(s[1]|=(15&i)>>>1,s[2]=(1&i)<<7,s[2]|=8,s[3]=0),t.config=s,t}_parseAACData(e){let t=this.tracks.audioTrack;if(!t)return;let i=t.meta;i||(t.meta=new r.AudioTrackMeta,i=t.meta);let s=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let a=(240&s)>>>4;t.format=a,10!==a&&this.emit(d.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(s),i.sampleRateIndex=(12&s)>>>2,i.frameLenth=(2&s)>>>1,i.channelCount=1&s,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));let n=i.audioSampleRate,o=i.sampleRateIndex,l=i.refSampleDuration;delete e.tagType;let h=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);n=t.audiosamplerate||i.audioSampleRate,o=t.sampleRateIndex||i.sampleRateIndex,l=Math.floor(1024/n*i.timescale),i.channelCount=t.channelCount,i.sampleRate=n,i.sampleRateIndex=o,i.refSampleDuration=l,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=t.config;const s=this._context.mediaInfo.audio;s.codec=t.codec,s.channelCount=t.channelCount,s.sampleRate=n,s.sampleRateIndex=t.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(d.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&this.emit(d.AUDIO_METADATA_CHANGE),this._hasAudioSequence=!0,this._metaChange=!0}else this._metaChange&&(e.options={meta:t.meta},this._metaChange=!1),e.data=e.data.slice(1,e.data.length),t.samples.push(e);h||this.emit(d.DEMUX_ERROR,this.TAG,new Error("TAG length error at "+e.datasize),!1)}_parseHevcData(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);let t={},i=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>i;){let s=e.data.slice(Number.parseInt(i),4+i);t.size=s[3],t.size+=256*s[2],t.size+=256*s[1]*256,t.size+=256*s[0]*256*256,i+=4,t.data=e.data.slice(Number.parseInt(i),t.size+i),i+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(d.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(d.METADATA_PARSED,"video"):this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1))}else if(7===i){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let i=0;i<4;i++)e=256*e+t[i];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType)this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(d.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(d.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0),this._metaChange=!0;else{if(!this._datasizeValidator(e.datasize))return void this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);this._metaChange&&(e.options={meta:Object.assign({},this.tracks.videoTrack.meta)},this._metaChange=!1),this.tracks.videoTrack.samples.push(e)}}else this.emit(d.DEMUX_ERROR,this.TAG,new Error(`video codeid is ${i}`),!1),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1),this.tracks.videoTrack.samples.push(e),this.emit(d.DEMUX_COMPLETE);delete e.tagType}_avcSequenceHeaderParser(e){let t=this.tracks.videoTrack;if(!t)return;let i=0;t.meta||(t.meta=new r.VideoTrackMeta);let s=t.meta;s.configurationVersion=e[0],s.avcProfileIndication=e[1],s.profileCompatibility=e[2],s.avcLevelIndication=e[3]/10,s.nalUnitLength=1+(3&e[4]);let n=31&e[5];i=6;let o={};for(let t=0;t<n;t++){let t=255*e[i]+e[i+1];i+=2;let r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e[i+s];let n="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),n+=t}s.codec=n,i+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let d=e[i];i++;for(let t=0;t<d;t++){let t=255*e[i]+e[i+1];i+=2;let s=new Uint8Array(t);for(let r=0;r<t;r++)s[r]=e[i+r];i+=t,this.tracks.videoTrack.meta.pps=s}Object.assign(s,a.SpsParser.toVideoMeta(o));const l=this._context.mediaInfo.video;l.codec=s.codec,l.profile=s.profile,l.level=s.level,l.chromaFormat=s.chromaFormat,l.frameRate=s.frameRate,l.parRatio=s.parRatio,l.width=l.width===s.presentWidth?l.width:s.presentWidth,l.height=l.height===s.presentHeight?l.width:s.presentHeight,s.duration=this._context.mediaInfo.duration*s.timescale,s.avcc=new Uint8Array(e.length),s.avcc.set(e),t.meta=s}_switchAudioSampleRate(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}_switchAudioSamplingFrequency(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}_switchAudioChannel(e){return[1,2][1&e]}_datasizeValidator(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}get loaderBuffer(){const e=this._context.getInstance("LOADER_BUFFER");if(e)return e;this.emit(d.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}t.default=l},"../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
      !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
      \*******************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static parse(e,t=""){let i={duration:0};if(!e||!e.split)return;let r=e.split(/\r|\n/),a=(r=r.filter(e=>e)).shift();if(!a.match("#EXTM3U"))throw new Error('Invalid m3u8 file: not "#EXTM3U"');a=r.shift();let n=!1;for(;a;){let e=a.match(/#(.[A-Z|-]*):(.*)/),o=a.match(/#(.[A-Z|-]*)/);if(o&&e&&e.length>2)switch(e[1]){case"EXT-X-VERSION":i.version=parseInt(e[2]);break;case"EXT-X-MEDIA-SEQUENCE":i.sequence=parseInt(e[2]);break;case"EXT-X-TARGETDURATION":i.targetduration=parseFloat(e[2]);break;case"EXTINF":s.parseFrag(e,r,i,t,n),n=!1;break;case"EXT-X-KEY":s.parseDecrypt(e[2],i)}if(o&&o.length>1)switch(o[1]){case"EXT-X-DISCONTINUITY":n=!0}a=r.shift()}return i}static parseFrag(e,t,i,s,r){i.frags||(i.frags=[]);let a={start:i.duration,duration:1e3*parseFloat(e[2])};i.duration+=a.duration;let n=t.shift();n.match(/#(.*):(.*)/)&&(n=t.shift()),n.length>0&&"/"===n.charAt(0)&&s.match(/.*\/\/.*\.\w+/g)&&(s=s.match(/.*\/\/.*\.\w+/g)[0]),n.match(/.*:\/\/.*/)?a.url=n:a.url=s+n,a.discontinue=r,i.frags.push(a)}static parseURL(e){let t="",i=e.match(/(.*\/).*\.m3u8/);if(i&&i.length>0)for(let e=0;e<i.length;e++)i[e].match(/.*\/$/g)&&i[e].length>t.length&&(t=i[e]);return t}static parseDecrypt(e,t){t.encrypt={};let i=e.split(",");for(let e in i){let s=i[e];if(s.match(/METHOD=(.*)/)&&(t.encrypt.method=s.match(/METHOD=(.*)/)[1]),s.match(/URI="(.*)"/)&&(t.encrypt.uri=s.match(/URI="(.*)"/)[1]),s.match(/IV=0x(.*)/)){let e=s.match(/IV=0x(.*)/)[1],i=Math.ceil(e.length/2);t.encrypt.ivb=new Uint8Array(i);for(let s=i-1;s>=0;s--){let i=parseInt(e.substr(2*s,2),16);t.encrypt.ivb[s]=i}t.encrypt.iv=e}}}}t.default=s},"../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
      !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),r=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),a=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const n=a.EVENTS.DEMUX_EVENTS,o={1:["video","MPEG-1"],2:["video","MPEG-2"],27:["video","AVC.H264"],234:["video","VC-1"],3:["audio","MPEG-1"],4:["audio","MPEG-2"],15:["audio","MPEG-2.AAC"],17:["audio","MPEG-4.AAC"],128:["audio","LPCM"],129:["audio","AC3"],6:["audio","AC3"],130:["audio","DTS"],131:["audio","Dolby TrueHD"],132:["audio","AC3-Plus"],133:["audio","DTS-HD"],134:["audio","DTS-MA"],161:["audio","AC3-Plus-SEC"],162:["audio","DTS-HD-SEC"]};class d{constructor(e){this.configs=Object.assign({},e),this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}init(){this.on(n.DEMUX_START,this.demux.bind(this))}demux(e){if(this.demuxing)return;let t=this.inputBuffer,i={pat:[],pmt:[]},s={};for(;t.length>=188;){for(t.length>=1&&71!==t.array[0][t.offset]&&this.emit(n.DEMUX_ERROR,this.TAG,new Error(`Untrust sync code: ${t.array[0][t.offset]}, try to recover;`),!1);t.length>=1&&71!==t.array[0][t.offset];)t.shift(1);let e=t.shift(188),r=new a.Stream(e.buffer),o={};d.read(r,o,i),o.pes?(s[o.header.pid]||(s[o.header.pid]=[]),s[o.header.pid].push(o.pes),o.pes.ES.buffer=[o.pes.ES.buffer]):s[o.header.pid]&&s[o.header.pid][s[o.header.pid].length-1].ES.buffer.push(o.payload.stream)}let r=e,o=e;for(let e=0;e<Object.keys(s).length;e++){let t=s[Object.keys(s)[e]];for(let i=0;i<t.length;i++)t[i].id=Object.keys(s)[e],t[i].ES.buffer=d.Merge(t[i].ES.buffer),"audio"===t[i].type?(this.pushAudioSample(t[i],r),r={}):"video"===t[i].type&&(this.pushVideoSample(t[i],o),o={})}this._hasAudioMeta&&this.emit(n.DEMUX_COMPLETE,"audio"),this._hasVideoMeta&&this.emit(n.DEMUX_COMPLETE,"video")}pushAudioSample(e,t){let i;this._tracks.audioTrack?i=this._tracks.audioTrack:(this._tracks.audioTrack=new r.AudioTrack,i=this._tracks.audioTrack);let s=new a.AudioTrackMeta({audioSampleRate:e.ES.frequence,sampleRate:e.ES.frequence,channelCount:e.ES.channel,codec:"mp4a.40."+e.ES.audioObjectType,config:e.ES.audioConfig,id:2,sampleRateIndex:e.ES.frequencyIndex});s.refSampleDuration=Math.floor(1024/s.audioSampleRate*s.timescale);let o=d.compaireMeta(i.meta,s,!0);this._hasAudioMeta&&o||(i.meta=s,this._hasAudioMeta=!0,this.emit(n.METADATA_PARSED,"audio"));let l=new Uint8Array(e.ES.buffer.buffer.slice(e.ES.buffer.position,e.ES.buffer.length)),h=parseInt(e.pts/90),u=parseInt(e.pts/90),c=new a.AudioTrackSample({dts:h,pts:u,data:l,options:t});i.samples.push(c)}pushVideoSample(e,t){let i,o=s.Nalunit.getNalunits(e.ES.buffer),l=new a.VideoTrackMeta;this._tracks.videoTrack?i=this._tracks.videoTrack:(this._tracks.videoTrack=new r.VideoTrack,i=this._tracks.videoTrack);let h=0,u=!1,c=!1;for(let e=0;e<o.length;e++){let t=o[e];if(t.sps){u=t,i.sps=t.body,l.chromaFormat=u.sps.chroma_format,l.codec="avc1.";for(var f=1;f<4;f++){var p=u.body[f].toString(16);p.length<2&&(p="0"+p),l.codec+=p}l.codecHeight=u.sps.codec_size.height,l.codecWidth=u.sps.codec_size.width,l.frameRate=u.sps.frame_rate,l.id=1,l.level=u.sps.level_string,l.presentHeight=u.sps.present_size.height,l.presentWidth=u.sps.present_size.width,l.profile=u.sps.profile_string,l.refSampleDuration=Math.floor(l.timescale*(u.sps.frame_rate.fps_den/u.sps.frame_rate.fps_num)),l.sarRatio=u.sps.sar_ratio?u.sps.sar_ratio:u.sps.par_ratio}else t.pps?(i.pps=t.body,c=t):h+=4+t.body.byteLength}if(u&&c){l.avcc=s.Nalunit.getAvcc(u.body,c.body);let e=d.compaireMeta(i.meta,l,!0);this._hasVideoMeta&&e||(t?t.meta=Object.assign({},l):t={meta:Object.assign({},l)},i.meta=l,this._hasVideoMeta=!0,this.emit(n.METADATA_PARSED,"video"))}let m=new Uint8Array(h),g=0,_=!1;for(let e=0;e<o.length;e++){let t=o[e],i=t.body.byteLength;t.idr&&(_=!0),t.pps||t.sps||(m.set(new Uint8Array([i>>>24&255,i>>>16&255,i>>>8&255,255&i]),g),g+=4,m.set(t.body,g),g+=i)}let y=new a.VideoTrackSample({dts:parseInt(e.dts/90),pts:parseInt(e.pts/90),cts:(e.pts-e.dts)/90,originDts:e.dts,isKeyframe:_,data:m,options:t});i.samples.push(y)}destory(){this.off(n.DEMUX_START,this.demux),this.configs={},this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}static compaireArray(e,t,i){let s=0,r=0;if("Uint8Array"===i?(s=e.byteLength,r=t.byteLength):"Array"===i&&(s=e.length,r=t.length),s!==r)return!1;for(let i=0;i<s;i++)if(e[i]!==t[i])return!1;return!0}static compaireMeta(e,t,i){if(!e||!t)return!1;for(let s=0,r=Object.keys(e).length;s<r;s++){let r=e[Object.keys(e)[s]],a=t[Object.keys(e)[s]];if("object"!=typeof r){if(i&&"duration"!==Object.keys(e)[s]&&"refSampleDuration"!==Object.keys(e)[s]&&"refSampleDurationFixed"!==Object.keys(e)[s]&&r!==a)return!1}else if(void 0!==r.byteLength){if(void 0===a.byteLength)return!1;if(!d.compaireArray(r,a,"Uint8Array"))return!1}else if(void 0!==r.length){if(void 0===a.length)return!1;if(!d.compaireArray(r,a,"Array"))return!1}else if(!d.compaireMeta(r,a))return!1}return!0}static Merge(e){let t,i=0,s=0;for(let t=0;t<e.length;t++)i+=e[t].length-e[t].position;t=new Uint8Array(i);for(let i=0;i<e.length;i++){let r=e[i];t.set(new Uint8Array(r.buffer,r.position),s),s+=r.length-r.position}return new a.Stream(t.buffer)}static read(e,t,i){d.readHeader(e,t),d.readPayload(e,t,i),"MEDIA"!==t.header.packet||1!==t.header.payload||t.unknownPIDs||(t.pes=d.PES(t))}static readPayload(e,t,i){let s=t.header.pid;switch(s){case 0:d.PAT(e,t,i);break;case 1:d.CAT(e,t,i);break;case 2:d.TSDT(e,t,i);break;case 8191:break;default:if(i.pat.some(e=>e.pid===s))d.PMT(e,t,i);else{let r=i.pmt?i.pmt.filter(e=>e.pid===s):[];r.length>0?d.Media(e,t,o[r[0].streamType][0]):t.unknownPIDs=!0}}}static readHeader(e,t){let i={};i.sync=e.readUint8();let s=e.readUint16();i.error=s>>>15,i.payload=s>>>14&1,i.priority=s>>>13&1,i.pid=8191&s,s=e.readUint8(),i.scrambling=s>>6&3,i.adaptation=s>>4&3,i.continuity=15&s,i.packet=0===i.pid?"PAT":"MEDIA",t.header=i}static PAT(e,t,i){let s={},r=e.readUint8();e.skip(r),r=e.readUint8(),s.tabelID=r,r=e.readUint16(),s.error=r>>>7,s.zero=r>>>6&1,s.sectionLength=4095&r,s.streamID=e.readUint16(),s.current=1&e.readUint8(),s.sectionNumber=e.readUint8(),s.lastSectionNumber=e.readUint8();let a=(s.sectionLength-9)/4,n=[];for(let t=0;t<a;t++){let t=e.readUint16(),i=8191&e.readUint16();n.push({program:t,pid:i,type:0===t?"network":"mapPID"})}n.length>0&&(i.pat=i.pat.concat(n)),s.list=n,s.program=e.readUint16(),s.pid=8191&e.readUint16(),t.payload=s}static PMT(e,t,i){let s={};t.header.packet="PMT";let r=e.readUint8();e.skip(r),r=e.readUint8(),s.tableID=r,r=e.readUint16(),s.sectionLength=4095&r,s.program=e.readUint16(),s.current=1&e.readUint8(),s.order=e.readUint8(),s.lastOrder=e.readUint8(),s.PCR_PID=8191&e.readUint16(),s.programLength=4095&e.readUint16();let a=(s.sectionLength-13)/5,n=[];for(let t=0;t<a;t++)n.push({streamType:e.readUint8(),pid:8191&e.readUint16(),es:4095&e.readUint16()});s.list=n,this.pmt||(this.pmt=[]),i.pmt=this.pmt.concat(n.map(e=>({pid:e.pid,es:e.es,streamType:e.streamType,program:s.program}))),t.payload=s}static Media(e,t,i){let s=t.header,r={};if(s.type=i,3===s.adaptation&&(r.adaptationLength=e.readUint8(),r.adaptationLength>0)){let t=e.readUint8();r.discontinue=t>>>7,r.access=t>>>6&1,r.priority=t>>>5&1,r.PCR=t>>>4&1,r.OPCR=t>>>3&1,r.splicePoint=t>>>2&1,r.transportPrivate=t>>>1&1,r.adaptationField=1&t;let i=e.position;if(1===r.PCR&&(r.programClockBase=e.readUint32()<<1,t=e.readUint16(),r.programClockBase|=t>>>15,r.programClockExtension=511&t),1===r.OPCR&&(r.originProgramClockBase=e.readUint32()<<1,t=e.readUint16(),r.originProgramClockBase+=t>>>15,r.originProgramClockExtension=511&t),1===r.splicePoint&&(r.spliceCountdown=e.readUint8()),1===r.transportPrivate){let t=e.readUint8(),i=[];for(let s=0;s<t;s++)i.push(e.readUint8())}if(1===r.adaptationField){let t=e.readUint8(),i=e.readUint8(),s=e.position,a=i>>>6&1,n=i>>>5&1;1==i>>>7&&(i=e.readUint16(),r.ltwValid=i>>>15,r.ltwOffset=61439&i),1===a&&(i=e.readUint24(),r.piecewiseRate=4194303&i),1===n&&(i=e.readInt8(),r.spliceType=i>>>4,r.dtsNextAU1=i>>>1&7,r.marker1=1&i,i=e.readUint16(),r.dtsNextAU2=i>>>1,r.marker2=1&i,i=e.readUint16(),r.dtsNextAU3=i),e.skip(t-1-(e.position-s))}let s=r.adaptationLength-1-(e.position-i);e.skip(s)}r.stream=new a.Stream(e.buffer.slice(e.position)),t.payload=r}static PES(e){let t={},i=e.payload.stream;if(1!==i.readUint24())t.ES={},t.ES.buffer=i;else{let e=i.readUint8();e>=224&&e<=239&&(t.type="video"),e>=192&&e<=223&&(t.type="audio");let s=i.readUint16();if(t.packetLength=s,"video"!==t.type&&"audio"!==t.type)throw new Error("format is not supported");{let e=i.readUint8();if(2!=e>>>6)throw new Error("error when parse pes header");e=i.readUint8(),t.ptsDTSFlag=e>>>6,t.escrFlag=e>>>5&1,t.esRateFlag=e>>>4&1,t.dsmFlag=e>>>3&1,t.additionalFlag=e>>>2&1,t.crcFlag=e>>>1&1,t.extensionFlag=1&e,t.pesHeaderLength=i.readUint8();let s=t.pesHeaderLength;if(2===t.ptsDTSFlag){let r=[];e=i.readUint8(),r.push(e>>>1&7),e=i.readUint16(),r.push(e>>>1),e=i.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2],s-=5,"video"===t.type&&(t.dts=t.pts)}if(3===t.ptsDTSFlag){let r=[];e=i.readUint8(),r.push(e>>>1&7),e=i.readUint16(),r.push(e>>>1),e=i.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2];let a=[];e=i.readUint8(),a.push(e>>>1&7),e=i.readUint16(),a.push(e>>>1),e=i.readUint16(),a.push(e>>>1),t.dts=a[0]<<30|a[1]<<15|a[2],s-=10}if(1===t.escrFlag){let r=[],a=[];e=i.readUint8(),r.push(e>>>3&7),r.push(3&e),e=i.readUint16(),r.push(e>>>13),r.push(3&e),e=i.readUint16(),r.push(e>>>13),a.push(3&e),e=i.readUint8(),a.push(e>>>1),t.escr=300*(r[0]<<30|r[1]<<28|r[2]<<15|r[3]<<13|r[4])+(a[0]<<7|a[1]),s-=6}if(1===t.esRateFlag&&(e=i.readUint24(),t.esRate=e>>>1&4194303,s-=3),1===t.dsmFlag)throw new Error("not support DSM_trick_mode");if(1===t.additionalFlag&&(e=i.readUint8(),t.additionalCopyInfo=127&e,s-=1),1===t.crcFlag&&(t.pesCRC=i.readUint16(),s-=2),1===t.extensionFlag)throw new Error("not support extension");s>0&&i.skip(s),t.ES=d.ES(i,t.type)}}return t}static ES(e,t){let i,s={};if("video"===t){if(1!==(i=e.readUint32())&&(e.back(4),1!==(i=e.readUint24())))throw new Error("h264 nal header parse failed");e.skip(2),s.buffer=e}else{if("audio"!==t)throw new Error(`ES ${t} is not supported`);{if((i=e.readUint16())>>>4!=4095)throw new Error("aac ES parse Error");const t=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];s.id=0==(i>>>3&1)?"MPEG-4":"MPEG-2",s.layer=i>>>1&3,s.absent=1&i,i=e.readUint16(),s.audioObjectType=1+(i>>>14&3),s.profile=s.audioObjectType-1,s.frequencyIndex=i>>>10&15,s.frequence=t[s.frequencyIndex],s.channel=i>>>6&7,s.frameLength=(3&i)<<11|e.readUint16()>>>5,d.getAudioConfig(s),e.skip(1),s.buffer=e}}return s}static TSDT(e,t,i){t.payload={}}static CAT(e,t,i){let s={};s.tableID=e.readUint8();let r=e.readUint16();s.sectionIndicator=r>>>7,s.sectionLength=4095&r,e.skip(2),r=e.readUint8(),s.version=r>>>3,s.currentNextIndicator=1&r,s.sectionNumber=e.readUint8(),s.lastSectionNumber=e.readUint8();let a=(this.sectionLength-9)/4,n=[];for(let e=0;e<a;e++)n.push({});s.crc32=e.readUint32(),t.payload=s}static getAudioConfig(e){let t,i,s=navigator.userAgent.toLowerCase();/firefox/i.test(s)?e.frequencyIndex>=6?(e.audioObjectType=5,t=new Array(4),i=e.frequencyIndex-3):(e.audioObjectType=2,t=new Array(2),i=e.frequencyIndex):-1!==s.indexOf("android")?(e.audioObjectType=2,t=new Array(2),i=e.frequencyIndex):(e.audioObjectType=5,t=new Array(4),e.frequencyIndex>=6?i=e.frequencyIndex-3:(1===e.channel&&(e.audioObjectType=2,t=new Array(2)),i=e.frequencyIndex)),t[0]=e.audioObjectType<<3,t[0]|=(14&e.frequencyIndex)>>1,t[1]=(1&e.frequencyIndex)<<7,t[1]|=e.channel<<3,5===e.audioObjectType&&(t[1]|=(14&i)>>1,t[2]=(1&i)<<7,t[2]|=8,t[3]=0),e.audioConfig=t}get inputBuffer(){return this._context.getInstance(this.configs.inputbuffer)}get _tracks(){return this._context.getInstance("TRACKS")}}t.default=d},"../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
      !*** ../xgplayer-demux/src/hls/playlist.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=e.autoclear||!1}get list(){return this._list}set baseURL(e){this.baseURL!==e&&(this.clear(),this._baseURL=e)}get baseURL(){return this._baseURL}push(e,t,i){this._ts[e]||(this._ts[e]={duration:t,downloaded:!1,downloading:!1,start:this.duration,discontinue:!!i},this._list[this.duration]=e,this.duration+=t,this.fragLength+=1)}deleteFrag(e){this._ts[e]&&(this._ts[e].start>this._lastget.time&&(this._lastget={duration:this._ts[e].duration,time:this._ts[e].start,downloaded:!1,downloading:!1,url:e}),delete this._list[this._ts[e].start],delete this._ts[e],this.fragLength-=1)}pushM3U8(e,t){if(!e)throw new Error("No m3u8 data received.");if(this.version=e.version,this.targetduration=e.targetduration,e.encrypt&&!this.encrypt&&(this.encrypt=e.encrypt),!(e.sequence>this.sequence))throw new Error(`Old m3u8 file received, ${e.sequence}`);{this.sequence=e.sequence;let i=[];for(let t=0;t<e.frags.length;t++){let s=e.frags[t];this._ts[s.url]||(i.push(s.url),this.push(s.url,s.duration,s.discontinue))}if(i.length<1)throw new Error("Can not read ts file list.");if(t){let e=this.getTsList();for(let t=0;t<e.length;t++)i.indexOf(e[t])<0&&this.deleteFrag(e[t])}}}getTsList(){return Object.keys(this._ts)}downloaded(e,t){let i=this._ts[e];i&&(i.downloaded=t)}downloading(e,t){let i=this._ts[e];i&&(i.downloading=t)}getTsByName(e){return this._ts[e]}getTs(e){let t,i=Object.keys(this._list);if(void 0===e&&(e=this._lastget?this._lastget.time+this._lastget.duration:0),!(i.length<1||e>=this.duration)){i.sort((e,t)=>parseFloat(e)-parseFloat(t));for(let s=0;s<i.length&&e>=parseInt(i[s]);s++){let e=this._list[i[s]];t={url:e,downloaded:this._ts[e].downloaded,downloading:this._ts[e].downloading,time:parseInt(i[s]),duration:parseInt(this._ts[e].duration)},this.autoclear&&(delete this._ts[this._lastget.url],delete this._list[this._lastget.time]),this._lastget=t}return t}}clear(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0}clearDownloaded(){for(let e=0,t=Object.keys(this._ts).length;e<t;e++){let t=this._ts[Object.keys(this._ts)[e]];t.downloaded=!1,t.downloading=!1}}destroy(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=!1}}},"../xgplayer-loader/index.js":
/*!***********************************!*\
      !*** ../xgplayer-loader/index.js ***!
      \***********************************/
/*! no static exports found */function(e,t,i){e.exports={FetchLoader:i(/*! ./src/fetch-loader */"../xgplayer-loader/src/fetch-loader.js").default}},"../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
      !*** ../xgplayer-loader/src/fetch-loader.js ***!
      \**********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js").EVENTS.LOADER_EVENTS;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this._destroyed=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(s.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let i=this;this.url=e,this._canceled=!1;let r=this.getParams(t);return i.loading=!0,fetch(this.url,r).then((function(e){if(e.ok)return i.status=e.status,i._onFetchResponse(e);i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,new Error("invalid response."))})).catch((function(e){throw i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,e),new Error(e.message)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);this._loaderTaskNo++;let r=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case 2:e.json().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 1:e.text().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 3:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(new Uint8Array(e)),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 0:default:return this._onReader(e.body.getReader(),r)}}_onReader(e,t){let i=this._context.getInstance(this.buffer);if(!i&&this._reader||this._destroyed)try{this._reader.cancel()}catch(e){}if(this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then((function(a){if(a.done)return r.loading=!1,r.status=0,void r.emit(s.LOADER_COMPLETE,i);if(!r._canceled&&!r._destroyed)return i.push(a.value),r.emit(s.LOADER_DATALOADED,i),r._onReader(e,t);if(r._reader)try{r._reader.cancel()}catch(e){}})).catch(e=>{r.loading=!1,r.emit(s.LOADER_ERROR,r.TAG,e)})}getParams(e){let t=Object.assign({},e),i=new Headers,s={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}if("object"==typeof t.headers){let e=t.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(s.mode="same-origin"),t.withCredentials&&(s.credentials="include"),s}cancel(){if(this._reader){try{this._reader.cancel()}catch(e){}this._reader=null,this.loading=!1,this._canceled=!0}}destroy(){this._destroyed=!0,this.cancel()}}},"../xgplayer-remux/index.js":
/*!**********************************!*\
      !*** ../xgplayer-remux/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Mp4Remuxer:i(/*! ./src/mp4 */"../xgplayer-remux/src/mp4/index.js").default}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
      !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");class r{static size(e){return s.Buffer.writeUint32(e)}static initBox(e,t,...i){const a=new s.Buffer;return a.write(r.size(e),r.type(t),...i),a.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let i,s=8,a=r.mvhd(t.duration,t.timescale);i="video"===e?r.videoTrak(t):r.audioTrak(t);let n=r.mvex(t.duration,t.timescale||1e3,t.id);return[a,i,n].forEach(e=>{s+=e.byteLength}),r.initBox(s,"moov",a,i,n)}static mvhd(e,t=1e3){let i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),s=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static audioTrak(e){let t=8,i=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),s=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static tkhd(e){let t=e.id,i=e.duration,s=e.width,a=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>>8&255,255&s,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new s.Buffer,i=e.duration,a=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=r.mdhd(e.timescale,e.duration),s=r.hdlr(e.type),a=r.minf(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",i,s,a)}static mdhd(e=1e3,t){let i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+i.byteLength,"mdhd",r.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?r.vmhd():r.smhd(),s=r.dinf(),a=r.stbl(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",i,s,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new s.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=r.stsd(e),s=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[i,s,a,n,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",i,s,a,n,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=r.esds(e.config);return r.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(e=[43,146,8,0]){const t=e.length;let i=new s.Buffer,a=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(r.size(8+a.byteLength),r.type("esds"),a),i.buffer}static avc1(e){let t=new s.Buffer,i=e.width,a=e.height,n=e.parRatio.height,o=e.parRatio.width,d=e.avcc,l=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),h=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),u=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+l.byteLength+d.byteLength+h.byteLength),r.type("avc1"),l,r.size(8+d.byteLength),r.type("avcC"),d,r.size(20),r.type("btrt"),h,r.size(16),r.type("pasp"),u),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e,t=1e3,i){let a=new s.Buffer,n=s.Buffer.writeUint32(e);return a.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),n,r.trex(i)),a.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=r.mfhd(),s=r.traf(e);return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",i,s)}static mfhd(){let e=s.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,i=r.tfhd(e.id),s=r.tfdt(e.time),a=r.sdtp(e),n=r.trun(e,a.byteLength);return[i,s,n,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",i,s,n,a)}static tfhd(e){let t=s.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),s.Buffer.writeUint32(e))}static trun(e,t){let i=new s.Buffer,a=s.Buffer.writeUint32(e.samples.length),n=s.Buffer.writeUint32(92+16*e.samples.length+t);return i.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new s.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,s=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([s]))}),t.buffer}static mdat(e){let t=new s.Buffer,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(r.size(i),r.type("mdat"));let a=new Uint8Array(i),n=0;return a.set(t.buffer,n),n+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{a.set(e,n),n+=e.byteLength})}),a}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
      !*** ../xgplayer-remux/src/mp4/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=(s=i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"))&&s.__esModule?s:{default:s};const n=r.EVENTS.REMUX_EVENTS;class o{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e,this.isFirstVideo=!0,this.isFirstAudio=!0,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(n.REMUX_MEDIA,this.remux.bind(this)),this.on(n.REMUX_METADATA,this.onMetaDataReady.bind(this)),this.on(n.DETECT_CHANGE_STREAM,this.resetDtsBase.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}resetDtsBase(){this._dtsBase=0,this._dtsBaseInited=!1}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t;if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");t=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");t=e}let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.mimetype=t.meta.codec,s.init=this.remuxInitSegment(e,t.meta),this.emit(n.INIT_SEGMENT,e)}remuxInitSegment(e,t){let i=new r.Buffer,s=a.default.ftyp(),n=a.default.moov({type:e,meta:t});return i.write(s,n),i}calcDtsBase(e,t){if(!e.samples.length&&!t.samples.length)return;let i=1/0,s=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(s=t.samples[0].dts),this._dtsBase=Math.min(i,s),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let{samples:i}=t,s=-1,o=null;const d=[],l={samples:[]};let h=1e4;for(;i.length&&h-- >0;){const e=i.shift(),{isKeyframe:t,options:r}=e;if(!this.isFirstAudio&&r&&r.meta){o=this.remuxInitSegment("video",r.meta),r.meta=null,i.unshift(e),r.isContinue||this.resetDtsBase();break}let a,h,u=e.dts-this._dtsBase;-1===s&&(s=u),void 0!==e.pts&&(a=(h=e.pts-this._dtsBase)-u),void 0!==e.cts&&(h=e.cts+u,a=e.cts);let c={buffer:[],size:0};l.samples.push(c),c.buffer.push(e.data),c.size+=e.data.byteLength;let f=0;f=e.duration?e.duration:i.length>=1?i[0].dts-this._dtsBase-u:d.length>=1?d[d.length-1].duration:this.videoMeta.refSampleDuration,this.videoAllDuration+=f,d.push({dts:u,cts:a,pts:h,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:f,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:u,type:"video"}),t&&this.emit(n.RANDOM_ACCESS_POINT,h)}let u=new r.Buffer;if(d.length){const e=a.default.moof({id:t.meta.id,time:s,samples:d}),i=a.default.mdat(l);u.write(e,i),this.writeToSource("video",u)}if(o&&(this.writeToSource("video",o),i.length))return t.samples=i,this._remuxVideo(t);this.isFirstVideo=!1,this.emit(n.MEDIA_SEGMENT,"video");const c=d[d.length-1];this._videoNextDts=c.dts+c.duration,t.samples=[],t.length=0}_remuxAudio(e){const{samples:t}=e;let i=-1,s=[],o=null;const d={samples:[]};if(!t||!t.length)return;let l=1e4,h=!1;for(;t.length&&l-- >0;){let e=t.shift();const{data:r,options:a}=e;if(!this.isFirstAudio&&a&&a.meta){o=this.remuxInitSegment("audio",a.meta),a.meta=null,t.unshift(e),a.isContinue||this.resetDtsBase();break}let n=e.dts-this._dtsBase;const l=n;h||(i=n,h=!0);let u=0;u=e.duration?e.duration:this.audioMeta.refSampleDurationFixed?this.audioMeta.refSampleDurationFixed:t.length>=1?t[0].dts-this._dtsBase-n:s.length>=1?s[s.length-1].duration:this.audioMeta.refSampleDuration,this.audioAllDuration+=u;const c={dts:n,pts:n,cts:0,size:r.byteLength,duration:e.duration?e.duration:u,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:l,type:"audio"};let f={buffer:[],size:0};f.buffer.push(r),f.size+=r.byteLength,d.samples.push(f),s.push(c)}const u=new r.Buffer;if(s.length){const t=a.default.moof({id:e.meta.id,time:i,samples:s}),r=a.default.mdat(d);u.write(t,r),this.writeToSource("audio",u)}if(o&&(this.writeToSource("audio",o),t.length))return e.samples=t,this._remuxAudio(e);this.isFirstAudio=!1,this.emit(n.MEDIA_SEGMENT,"audio",u);const c=s[s.length-1];this._videoNextDts=c.dts+c.duration,e.samples=[],e.length=0}writeToSource(e,t){let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.data.push(t)}initSilentAudio(e,t){const i=o.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=o},"../xgplayer-utils/index.js":
/*!**********************************!*\
      !*** ../xgplayer-utils/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Context:i(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:i(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:i(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:i(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:i(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:i(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,MediaInfo:i(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:i(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:i(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:i(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:i(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:i(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:i(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default,Crypto:i(/*! ./src/crypto */"../xgplayer-utils/src/crypto/index.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
      !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
      \***********************************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,s=Array(i>1?i-1:0),r=1;r<i;r++)s[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var d,l=s[Symbol.iterator]();!(a=(d=l.next()).done);a=!0){var h=d.value;t+=h.length}}catch(e){n=!0,o=e}finally{try{!a&&l.return&&l.return()}finally{if(n)throw o}}var u=new e(t),c=0,f=!0,p=!1,m=void 0;try{for(var g,_=s[Symbol.iterator]();!(f=(g=_.next()).done);f=!0){var y=g.value;u.set(y,c),c+=y.length}}catch(e){p=!0,m=e}finally{try{!f&&_.return&&_.return()}finally{if(p)throw m}}return u}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
      !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
      \**********************************************************************/
/*! no static exports found */function(e,t,i){var s,r=(s=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"))&&s.__esModule?s:{default:s};e.exports=r.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
      !*** ../xgplayer-utils/src/constants/events.js ***!
      \*************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT",DETECT_CHANGE_STREAM:"DETECT_CHANGE_STREAM",RANDOM_ACCESS_POINT:"RANDOM_ACCESS_POINT"},n={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o={RETRY_TIME_EXCEEDED:"RETRY_TIME_EXCEEDED"},d=Object.assign({},s,r,a,n,o),l=[],h=[];for(let e in d)d.hasOwnProperty(e)&&l.push(d[e]);for(let e in d)d.hasOwnProperty(e)&&h.push(d[e]);t.default={ALLEVENTS:d,HLS_EVENTS:o,REMUX_EVENTS:a,DEMUX_EVENTS:r,MSE_EVENTS:n,LOADER_EVENTS:s,FlvAllowedEvents:l,HlsAllowedEvents:h,CRYTO_EVENTS:{START_DECRYPT:"START_DECRYPT",DECRYPTED:"DECRYPTED"}}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
      !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
      \**********************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
      !*** ../xgplayer-utils/src/context.js ***!
      \****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"))&&s.__esModule?s:{default:s},a=i(/*! events */"../../node_modules/events/events.js");const n="__TO__";t.default=class{constructor(e=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new r.default,this.allowedEvents=e,this._hooks={}}getInstance(e){return this._instanceMap[e]||null}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,s=this._isMessageNameValid.bind(this),r=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.onceListeners={},this.TAG=e,this._context=r}on(t,r){return s(t),this.listeners[t]?this.listeners[t].push(r):this.listeners[t]=[r],i.on(`${t}${n}${e}`,r),i.on(t,r)}before(e,t){s(e),r._hooks[e]?r._hooks[e].push(t):r._hooks[e]=[t]}once(t,r){return s(t),this.onceListeners[t]?this.onceListeners[t].push(r):this.onceListeners[t]=[r],i.once(`${t}${n}${e}`,r),i.once(t,r)}emit(e,...t){s(e);const a=r._hooks?r._hooks[e]:null;if(a)for(let e=0,t=a.length;e<t;e++)(0,a[e])();return i.emit(e,...t)}emitTo(e,t,...r){return s(t),i.emit(`${t}${n}${e}`,...r)}off(e,t){return s(e),i.off(e,t)}removeListeners(){const t=Object.prototype.hasOwnProperty.bind(this.listeners);for(let s in this.listeners)if(t(s)){const t=this.listeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}for(let s in this.onceListeners)if(t(s)){const t=this.onceListeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}}destroy(){if(this.removeListeners(),this.listeners={},delete r._instanceMap[e],super.destroy)return super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this._hooks=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/src/crypto/index.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/crypto/index.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){var s;Object.defineProperty(t,"__esModule",{value:!0});const r=((s=i(/*! ../constants/events */"../xgplayer-utils/src/constants/events.js"))&&s.__esModule?s:{default:s}).default.CRYTO_EVENTS;t.default=class{constructor(e){this.inputBuffer=e.inputbuffer,this.outputBuffer=e.outputbuffer,this.key=e.key,this.iv=e.iv,this.method=e.method,this.crypto=window.crypto||window.msCrypto}init(){this.on(r.START_DECRYPT,this.decript.bind(this))}decript(){this.aeskey?this.decriptData():this.crypto.subtle.importKey("raw",this.key.buffer,{name:"AES-CBC"},!1,["encrypt","decrypt"]).then(e=>{this.aeskey=e,this.decriptData()})}decriptData(){let e=this._context.getInstance(this.inputBuffer),t=this._context.getInstance(this.outputBuffer),i=e.shift();i&&this.crypto.subtle.decrypt({name:"AES-CBC",iv:this.iv.buffer},this.aeskey,i).then(e=>{t.push(new Uint8Array(e)),this.emit(r.DECRYPTED),this.decriptData(i)})}}},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
      !*** ../xgplayer-utils/src/env/isle.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=s},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
      !*** ../xgplayer-utils/src/env/sniffer.js ***!
      \********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,s=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),a=/(?:iPad|PlayBook)/.test(e)||s&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),n=/(?:iPhone)/.test(e)&&!a;return{isTablet:a,isPhone:n,isAndroid:s,isPc:!n&&!s&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:r}},get isLe(){return s}};t.default=r},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
      !*** ../xgplayer-utils/src/env/utf8.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static decode(e){const t=[],i=e;let r=0;const a=e.length;for(;r<a;)if(i[r]<128)t.push(String.fromCharCode(i[r])),++r;else{if(i[r]<192);else if(i[r]<224){if(s._checkContinuation(i,r,1)){const e=(31&i[r])<<6|63&i[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(i[r]<240){if(s._checkContinuation(i,r,2)){const e=(15&i[r])<<12|(63&i[r+1])<<6|63&i[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(i[r]<248&&s._checkContinuation(i,r,3)){let e=(7&i[r])<<18|(63&i[r+1])<<12|(63&i[r+2])<<6|63&i[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,i){let s=e;if(t+i<s.length){for(;i--;)if(128!=(192&s[++t]))return!1;return!0}return!1}}t.default=s},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
      !*** ../xgplayer-utils/src/models/media-info.js ***!
      \**************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return s(e)}static isVideoReady(e){return!e.hasVideo||s(e.video)}static isAudioReady(e){return!e.hasAudio||s(e.video)}}t.default=r},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
      !*** ../xgplayer-utils/src/models/media-sample.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=s},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
      !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
      \**********************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,s=0,r=0,a=i,n=0;if(e<t[0].originDts)return-1;for(;r<=a;){if((s=r+Math.floor((a-r)/2))===i||e>t[s].lastSample.originDts&&e<t[s+1].originDts){n=s;break}t[s].originDts<e?r=s+1:a=s-1}return n}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,s=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?s=i+1:t.length>0&&(s=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=s,this._list.splice(s,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
      !*** ../xgplayer-utils/src/models/media-segment.js ***!
      \*****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
      !*** ../xgplayer-utils/src/models/track-meta.js ***!
      \**************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}destroy(){this.init=null}},t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}destroy(){this.init=null,this.sps=null,this.pps=null}}},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
      !*** ../xgplayer-utils/src/models/track-sample.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=s;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
      !*** ../xgplayer-utils/src/mse/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1,this.onSourceOpen=this.onSourceOpen.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onUpdateEnd=this.onUpdateEnd.bind(this),this.onWaiting=this.onWaiting.bind(this)}init(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate),this.container.addEventListener("waiting",this.onWaiting)}onTimeUpdate(){this.emit("TIME_UPDATE",this.container)}onWaiting(){this.emit("WAITING",this.container)}onSourceOpen(){this.addSourceBuffers()}onUpdateEnd(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),i=this._context.getInstance("TRACKS");t=t.sources;let s=!1;for(let r=0,a=Object.keys(t).length;r<a;r++){let a=Object.keys(t)[r];if("audio"===a?e=i.audioTrack:"video"===a&&(e=i.videoTrack),e){let i="audio"===a?21:40;e.meta&&e.meta.refSampleDuration&&(i=e.meta.refSampleDuration),t[a].data.length>=this.preloadTime/i&&(s=!0)}}if(s){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,i=Object.keys(t).length;e<i;e++){let i=Object.keys(t)[e],s=t[i],r="video"===i?"video/mp4;codecs="+s.mimetype:"audio/mp4;codecs="+s.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[i]=a,a.addEventListener("updateend",this.onUpdateEnd),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],s=this.sourceBuffers[i];if(!s.updating){let t=e.sources[i];if(t&&!t.inited)s.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&s.appendBuffer(e.buffer.buffer)}}}}endOfStream(){const{readyState:e,activeSourceBuffers:t}=this.mediaSource;if("open"===e&&0===t.length)try{this.mediaSource.endOfStream()}catch(e){}}remove(e,t=0){for(let i=0;i<Object.keys(this.sourceBuffers).length;i++){let s=this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];s.updating||s.remove(t,e)}}removeBuffers(){const e=[];for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i,r=this.sourceBuffers[Object.keys(this.sourceBuffers)[t]];r.removeEventListener("updateend",this.onUpdateEnd),i=r.updating?new Promise(e=>{const t=function(){let i=3;const a=()=>{r.updating?i>0?(setTimeout(a,200),i--):e():(s.clearBuffer(r),r.addEventListener("updateend",()=>{e()}))};setTimeout(a,200),r.removeEventListener("updateend",t)};r.addEventListener("updateend",t)}):new Promise(e=>{s.clearBuffer(r),r.addEventListener("updateend",()=>{e()})}),e.push(i)}return Promise.all(e)}destroy(){return this.removeBuffers().then(()=>{for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let t=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];this.mediaSource.removeSourceBuffer(t),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[e]]}this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen),this.endOfStream(),window.URL.revokeObjectURL(this.url),this.url=null,this.configs={},this.container=null,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=1})}static clearBuffer(e){const t=e.buffered;let i=.1;for(let e=0,s=t.length;e<s;e++)i=t.end(e);try{e.remove(0,i)}catch(e){}}}t.default=s},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/write/buffer.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"))&&s.__esModule?s:{default:s};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,r.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/write/stream.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),i=e%4;for(let e=0;e<t;e++)s.readByte(this.dataview,4);i>0&&s.readByte(this.dataview,i)}static readByte(e,t,i){let s;switch(t){case 1:s=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:s=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");s=e.getUint8(e.position)<<16,s|=e.getUint8(e.position+1)<<8,s|=e.getUint8(e.position+2);break;case 4:s=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");s=e.getUint32(e.position)<<32,s|=e.getUint32(e.position+4);break;default:s=""}return e.position+=t,s}readUint8(){return s.readByte(this.dataview,1)}readUint16(){return s.readByte(this.dataview,2)}readUint24(){return s.readByte(this.dataview,3)}readUint32(){return s.readByte(this.dataview,4)}readUint64(){return s.readByte(this.dataview,8)}readInt8(){return s.readByte(this.dataview,1,!0)}readInt16(){return s.readByte(this.dataview,2,!0)}readInt32(){return s.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=s},"./src/flv-live.js":
/*!*************************!*\
      !*** ./src/flv-live.js ***!
      \*************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=h(i(/*! xgplayer-remux */"../xgplayer-remux/index.js")),r=i(/*! xgplayer-loader */"../xgplayer-loader/index.js"),a=i(/*! xgplayer-demux */"../xgplayer-demux/index.js"),n=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),d=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),l=h(i(/*! xgplayer */"xgplayer"));function h(e){return e&&e.__esModule?e:{default:e}}const u=o.EVENTS.REMUX_EVENTS,c=o.EVENTS.DEMUX_EVENTS,f=o.EVENTS.LOADER_EVENTS,p=o.EVENTS.MSE_EVENTS;class m{warn(){}}t.default=class{constructor(e){this.TAG="FLVController",this._player=e,this.state={initSegmentArrived:!1,randomAccessPoints:[]},this.bufferClearTimer=null}init(){this._context.registry("FETCH_LOADER",r.FetchLoader),this._context.registry("LOADER_BUFFER",n.XgBuffer),this._context.registry("FLV_DEMUXER",a.FlvDemuxer),this._context.registry("TRACKS",n.Tracks),this._context.registry("MP4_REMUXER",s.default.Mp4Remuxer),this._context.registry("PRE_SOURCE_BUFFER",n.PreSource),!1!==this._player.config.compatibility&&this._context.registry("COMPATIBILITY",d.Compatibility),this._context.registry("LOGGER",m),this.mse=this._context.registry("MSE",o.Mse)({container:this._player.video}),this._handleTimeUpdate=this._handleTimeUpdate.bind(this),this.initListeners()}initListeners(){this.on(f.LOADER_DATALOADED,this._handleLoaderDataLoaded.bind(this)),this.on(f.LOADER_ERROR,this._handleNetworkError.bind(this)),this.on(c.MEDIA_INFO,this._handleMediaInfo.bind(this)),this.on(c.METADATA_PARSED,this._handleMetadataParsed.bind(this)),this.on(c.DEMUX_COMPLETE,this._handleDemuxComplete.bind(this)),this.on(c.DEMUX_ERROR,this._handleDemuxError.bind(this)),this.on(u.INIT_SEGMENT,this._handleAppendInitSegment.bind(this)),this.on(u.MEDIA_SEGMENT,this._handleMediaSegment.bind(this)),this.on(u.RANDOM_ACCESS_POINT,this._handleAddRAP.bind(this)),this.on(p.SOURCE_UPDATE_END,this._handleSourceUpdateEnd.bind(this)),this._player.on("timeupdate",this._handleTimeUpdate)}_handleMediaInfo(){this._context.mediaInfo||this.emit(c.DEMUX_ERROR,new Error("failed to get mediainfo"))}_handleLoaderDataLoaded(){this.emitTo("FLV_DEMUXER",c.DEMUX_START)}_handleMetadataParsed(e){this.emit(u.REMUX_METADATA,e)}_handleDemuxComplete(){this.emit(u.REMUX_MEDIA)}_handleAppendInitSegment(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}_handleMediaSegment(){this.mse.addSourceBuffers(),this.mse.doAppend()}_handleSourceUpdateEnd(){const e=this._player.currentTime,t=this._player.video,i=this._player.config.preloadTime||5,{length:s}=t.buffered;if(0===s)return;const r=t.buffered.end(s-1);r-e>2*i&&(this._player.currentTime=r-i),this.mse.doAppend()}_handleTimeUpdate(){const e=this._player.currentTime,t=this._player.video;let i=t.buffered;if(!i||!i.length)return;let s=[0,0],r=t.currentTime;if(i)for(let e=0,t=i.length;e<t&&(s[0]=i.start(e),s[1]=i.end(e),!(s[0]<=r&&r<=s[1]));e++);const a=s[0],n=s[1];if(r>n)t.currentTime=a+1;else if(e-a>10){if(this.bufferClearTimer||!this.state.randomAccessPoints.length)return;let t=1/0;for(let i=0;i<this.state.randomAccessPoints.length;i++){const s=Math.ceil(this.state.randomAccessPoints[i]/1e3);if(s>e-10)break;t=s}console.log("rap",t,`time ${e}`,`bufferEnd ${n}`,`clean ${Math.min(t,e-10,n-10)}`),this.mse.remove(Math.min(t,e-10,n-10),0),this.bufferClearTimer=setTimeout(()=>{this.bufferClearTimer=null},5e3)}}_handleNetworkError(e,t){this._player.emit("error",new l.default.Errors("network",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,!0)}_handleDemuxError(e,t,i){void 0===i&&(i=!1),this._player.emit("error",new l.default.Errors("parse",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,i)}_handleAddRAP(e){this.state.randomAccessPoints&&this.state.randomAccessPoints.push(e)}_onError(e,t,i,s){let r={errorType:e,errorDetails:`[${t}]: ${i.message}`,errorFatal:s||!1};this._player.emit("FLV_ERROR",r)}seek(){this.state.initSegmentArrived||this.loadData()}loadData(){this.emit(f.LADER_START,this._player.config.url)}pause(){const e=this._context.getInstance("FETCH_LOADER");e&&e.cancel()}destroy(){this._player.off("timeupdate",this._handleTimeUpdate),this._player=null,this.mse=null,this.state.randomAccessPoints=[]}}},"./src/index.js":
/*!**********************!*\
      !*** ./src/index.js ***!
      \**********************/
/*! no static exports found */function(e,t,i){var s=n(i(/*! xgplayer */"xgplayer")),r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=n(i(/*! ./flv-live */"./src/flv-live.js"));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.FlvAllowedEvents;class d extends s.default{constructor(e){super(e),this.context=new r.Context(o),this.initEvents(),this.loaderCompleteTimer=null}start(){this.initFlv(),this.context.init(),super.start(this.flv.mse.url)}initFlvEvents(e){const t=this;e.once(r.EVENTS.REMUX_EVENTS.INIT_SEGMENT,()=>{if(s.default.util.addClass(t.root,"xgplayer-is-live"),!s.default.util.findDom(this.root,"xg-live")){const e=s.default.util.createDom("xg-live","正在直播",{},"xgplayer-live");t.controls.appendChild(e)}}),e.once(r.EVENTS.LOADER_EVENTS.LOADER_COMPLETE,()=>{t.paused?t.emit("ended"):this.loaderCompleteTimer=setInterval(()=>{const e=t.getBufferedRange()[1];Math.abs(t.currentTime-e)<.5&&(t.emit("ended"),window.clearInterval(this.loaderCompleteTimer))},200)})}initEvents(){this.on("timeupdate",()=>{this.loadData()}),this.on("seeking",()=>{const e=this.currentTime,t=this.getBufferedRange();(e>t[1]||e<t[0])&&this.flv.seek(this.currentTime)})}initFlv(){const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.initFlvEvents(e),this.flv=e}play(){this._hasStart?this._destroy().then(()=>{this.context=new r.Context(o);const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.initFlvEvents(e),this.flv=e,this.context.init(),super.start(e.mse.url),super.play()}):super.play()}pause(){super.pause(),this.flv&&this.flv.pause()}loadData(e=this.currentTime){this.flv&&this.flv.seek(e)}destroy(){this._destroy().then(()=>{super.destroy()})}_destroy(){return this.flv.mse.destroy().then(()=>{this.context.destroy(),this.flv=null,this.context=null,this.loaderCompleteTimer&&window.clearInterval(this.loaderCompleteTimer)})}get src(){return this.currentSrc}set src(e){this.player.config.url=e,this.paused?this.start(e):(this.pause(),this.once("pause",()=>{this.start(e)}),this.once("canplay",()=>{this.play()})),this.once("canplay",()=>{this.currentTime=0})}}e.exports=d},0:
/*!****************************!*\
      !*** multi ./src/index.js ***!
      \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!***************************!*\
      !*** external "xgplayer" ***!
      \***************************/
/*! no static exports found */function(e,t){e.exports=s}}))},"../xgplayer-flv-vod/dist/index.js":
/*!***************************!*\
  !*** .-vod/dist/index.js ***!
  \***************************/
/*! no static exports found */function(e,t,i){"use strict";var s;window,e.exports=(s=i(/*! xgplayer */"xgplayer"),function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=11)}([function(e,t,i){e.exports={Context:i(13).default,EVENTS:i(4).default,WORKER_COMMANDS:i(15).default,sniffer:i(16).default,isLe:i(17).default,UTF8:i(18).default,MediaInfo:i(3).default,MediaSample:i(19).default,MediaSegment:i(20).default,MediaSegmentList:i(21).default,AudioTrackMeta:i(5).AudioTrackMeta,VideoTrackMeta:i(5).VideoTrackMeta,AudioTrackSample:i(6).AudioTrackSample,VideoTrackSample:i(6).VideoTrackSample,Mse:i(22).default,Stream:i(23).default,Buffer:i(24).default,Crypto:i(27).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=s,t.AudioTrack=class extends s{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}},t.VideoTrack=class extends s{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}},t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}destroy(){this.audioTrack=null,this.videoTrack=null}}},function(e,t){e.exports=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return s(e)}static isVideoReady(e){return!e.hasVideo||s(e.video)}static isAudioReady(e){return!e.hasAudio||s(e.video)}}t.default=r},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT",DETECT_CHANGE_STREAM:"DETECT_CHANGE_STREAM"},n={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o={RETRY_TIME_EXCEEDED:"RETRY_TIME_EXCEEDED"},d=Object.assign({},s,r,a,n,o),l=[],h=[];for(let e in d)d.hasOwnProperty(e)&&l.push(d[e]);for(let e in d)d.hasOwnProperty(e)&&h.push(d[e]);t.default={ALLEVENTS:d,HLS_EVENTS:o,REMUX_EVENTS:a,DEMUX_EVENTS:r,MSE_EVENTS:n,LOADER_EVENTS:s,FlvAllowedEvents:l,HlsAllowedEvents:h,CRYTO_EVENTS:{START_DECRYPT:"START_DECRYPT",DECRYPTED:"DECRYPTED"}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}destroy(){this.init=null}},t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}destroy(){this.init=null,this.sps=null,this.pps=null}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=s;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},function(e,t,i){e.exports={Nalunit:i(30).default,SpsParser:i(8).default,Compatibility:i(32).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(31))&&s.__esModule?s:{default:s};class a{static _ebsp2rbsp(e){let t=e,i=t.byteLength,s=new Uint8Array(i),r=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(s[r]=t[e],r++);return new Uint8Array(s.buffer,0,r)}static parseSPS(e){let t=a._ebsp2rbsp(e),i=new r.default(t);i.readByte();let s=i.readByte();i.readByte();let n=i.readByte();i.readUEG();let o=a.getProfileString(s),d=a.getLevelString(n),l=1,h=420,u=8;if((100===s||110===s||122===s||244===s||44===s||83===s||86===s||118===s||128===s||138===s||144===s)&&(3===(l=i.readUEG())&&i.readBits(1),l<=3&&(h=[0,420,422,444][l]),u=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==l?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?a._skipScalingList(i,16):a._skipScalingList(i,64))}i.readUEG();let c=i.readUEG();if(0===c)i.readUEG();else if(1===c){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let f=i.readUEG(),p=i.readUEG(),m=i.readBits(1);0===m&&i.readBits(1),i.readBits(1);let g=0,_=0,y=0,E=0;i.readBool()&&(g=i.readUEG(),_=i.readUEG(),y=i.readUEG(),E=i.readUEG());let v=1,A=1,S=0,b=!0,T=0,x=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],s=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(v=t[e-1],A=s[e-1]):255===e&&(v=i.readByte()<<8|i.readByte(),A=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);b=i.readBool(),S=(T=t)/(x=2*e)}}let w=1;1===v&&1===A||(w=v/A);let R=0,D=0;0===l?(R=1,D=2-m):(R=3===l?1:2,D=(1===l?2:1)*(2-m));let L=16*(f+1),O=16*(p+1)*(2-m);L-=(g+_)*R,O-=(y+E)*D;let M=Math.ceil(L*w);return i.destroy(),i=null,{profile_string:o,level_string:d,bit_depth:u,chroma_format:h,chroma_format_string:a.getChromaFormatString(h),frame_rate:{fixed:b,fps:S,fps_den:x,fps_num:T},par_ratio:{width:v,height:A},codec_size:{width:L,height:O},present_size:{width:M,height:O}}}static _skipScalingList(e,t){let i=8,s=8,r=0;for(let a=0;a<t;a++)0!==s&&(s=(i+(r=e.readSEG())+256)%256),i=0===s?i:s}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},t.frameRate=e.frame_rate;let i=t.frameRate.fps_den,s=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/s))}}t.default=a},function(e,t,i){e.exports={Track:i(1).default,Tracks:i(1).Tracks,AudioTrack:i(1).AudioTrack,VideoTrack:i(1).VideoTrack,XgBuffer:i(10).XgBuffer,RemuxBuffer:i(10).RemuxBuffer,PreSource:i(34).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let s=this.array[0].slice(this.offset,this.offset+e);t.set(s,i),this.offset+=e,this.length-=e,e=0;break}{let s=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=s,this.length-=s,e-=s}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,s=this.offset+e;for(;s<this.offset+t+e;)s<this.array[0].length?i=256*i+this.array[0][s]:this.array[1]&&(i=256*i+this.array[1][s-this.array[0].length]),s++;return i}},t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},function(e,t,i){e.exports=i(12)},function(e,t,i){var s=n(i(2)),r=i(0),a=n(i(28));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.FlvAllowedEvents,d=(e,t)=>{if(!e.config.isLive&&e.duration-e.currentTime<2){const i=e.getBufferedRange();e.currentTime-i[1]<.1&&(e.emit("ended"),t.mse.endOfStream())}};class l extends s.default{constructor(e){super(e),this.context=new r.Context(o),this.initEvents()}start(){const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.flv=e,this.context.init(),super.start(e.mse.url)}initEvents(){this.on("timeupdate",this.handleTimeUpdate.bind(this)),this.on("seeking",this.handleSeek.bind(this)),this.once("destroy",this._destroy.bind(this))}handleTimeUpdate(){this.loadData(),d(this,this.flv)}handleSeek(){const e=this.currentTime,t=this.getBufferedRange();(e>t[1]||e<t[0])&&this.flv.seek(this.currentTime)}_destroy(){this.context.destroy(),this.context=null,this.flv=null}loadData(e=this.currentTime){const t=this.getBufferedRange();t[1]-e<(this.config.preloadTime||15)-5&&this.flv.loadNext(t[1]+1)}get src(){return this.currentSrc}set src(e){this.player.config.url=e,this.paused?this.start(e):(this.pause(),this.once("pause",()=>{this.start(e)}),this.once("canplay",()=>{this.play()})),this.once("canplay",()=>{this.currentTime=0})}}e.exports=l},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(3))&&s.__esModule?s:{default:s},a=i(14);const n="__TO__";t.default=class{constructor(e=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new r.default,this.allowedEvents=e,this._hooks={}}getInstance(e){return this._instanceMap[e]||null}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,s=this._isMessageNameValid.bind(this),r=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.onceListeners={},this.TAG=e,this._context=r}on(t,r){return s(t),this.listeners[t]?this.listeners[t].push(r):this.listeners[t]=[r],i.on(`${t}${n}${e}`,r),i.on(t,r)}before(e,t){s(e),r._hooks[e]?r._hooks[e].push(t):r._hooks[e]=[t]}once(t,r){return s(t),this.onceListeners[t]?this.onceListeners[t].push(r):this.onceListeners[t]=[r],i.once(`${t}${n}${e}`,r),i.once(t,r)}emit(e,...t){s(e);const a=r._hooks?r._hooks[e]:null;if(a)for(let e=0,t=a.length;e<t;e++)(0,a[e])();return i.emit(e,...t)}emitTo(e,t,...r){return s(t),i.emit(`${t}${n}${e}`,...r)}off(e,t){return s(e),i.off(e,t)}removeListeners(){const t=Object.prototype.hasOwnProperty.bind(this.listeners);for(let s in this.listeners)if(t(s)){const t=this.listeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}for(let s in this.onceListeners)if(t(s)){const t=this.onceListeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}}destroy(){if(this.removeListeners(),this.listeners={},delete r._instanceMap[e],super.destroy)return super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this._hooks=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},function(e,t,i){var s,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};s=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var d=10;function l(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function h(e,t,i,s){var r,a,n,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),n=a[t]),void 0===n)n=a[t]=i,++e._eventsCount;else if("function"==typeof n?n=a[t]=s?[i,n]:[n,i]:s?n.unshift(i):n.push(i),(r=l(e))>0&&n.length>r&&!n.warned){n.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=t,d.count=n.length,o=d,console&&console.warn&&console.warn(o)}return e}function u(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function c(e,t,i){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=u.bind(s);return r.listener=i,s.wrapFn=r,r}function f(e,t,i){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):m(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function m(e,t){for(var i=new Array(t),s=0;s<t;++s)i[s]=e[s];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return d},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");d=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return l(this)},o.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var s="error"===e,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var d=r[e];if(void 0===d)return!1;if("function"==typeof d)a(d,this,t);else{var l=d.length,h=m(d,l);for(i=0;i<l;++i)a(h[i],this,t)}return!0},o.prototype.addListener=function(e,t){return h(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return h(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,s,r,a,n;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(s=this._events))return this;if(void 0===(i=s[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(r=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){n=i[a].listener,r=a;break}if(r<0)return this;0===r?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,r),1===i.length&&(s[e]=i[0]),void 0!==s.removeListener&&this.emit("removeListener",e,n||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,i,s;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,a=Object.keys(i);for(s=0;s<a.length;++s)"removeListener"!==(r=a[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,s=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),a=/(?:iPad|PlayBook)/.test(e)||s&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),n=/(?:iPhone)/.test(e)&&!a;return{isTablet:a,isPhone:n,isAndroid:s,isPc:!n&&!s&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:r}},get isLe(){return s}};t.default=r},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static decode(e){const t=[],i=e;let r=0;const a=e.length;for(;r<a;)if(i[r]<128)t.push(String.fromCharCode(i[r])),++r;else{if(i[r]<192);else if(i[r]<224){if(s._checkContinuation(i,r,1)){const e=(31&i[r])<<6|63&i[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(i[r]<240){if(s._checkContinuation(i,r,2)){const e=(15&i[r])<<12|(63&i[r+1])<<6|63&i[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(i[r]<248&&s._checkContinuation(i,r,3)){let e=(7&i[r])<<18|(63&i[r+1])<<12|(63&i[r+2])<<6|63&i[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,i){let s=e;if(t+i<s.length){for(;i--;)if(128!=(192&s[++t]))return!1;return!0}return!1}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,s=0,r=0,a=i,n=0;if(e<t[0].originDts)return-1;for(;r<=a;){if((s=r+Math.floor((a-r)/2))===i||e>t[s].lastSample.originDts&&e<t[s+1].originDts){n=s;break}t[s].originDts<e?r=s+1:a=s-1}return n}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,s=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?s=i+1:t.length>0&&(s=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=s,this._list.splice(s,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1,this.onSourceOpen=this.onSourceOpen.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onUpdateEnd=this.onUpdateEnd.bind(this),this.onWaiting=this.onWaiting.bind(this)}init(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate),this.container.addEventListener("waiting",this.onWaiting)}onTimeUpdate(){this.emit("TIME_UPDATE",this.container)}onWaiting(){this.emit("WAITING",this.container)}onSourceOpen(){this.addSourceBuffers()}onUpdateEnd(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),i=this._context.getInstance("TRACKS");t=t.sources;let s=!1;for(let r=0,a=Object.keys(t).length;r<a;r++){let a=Object.keys(t)[r];if("audio"===a?e=i.audioTrack:"video"===a&&(e=i.videoTrack),e){let i="audio"===a?21:40;e.meta&&e.meta.refSampleDuration&&(i=e.meta.refSampleDuration),t[a].data.length>=this.preloadTime/i&&(s=!0)}}if(s){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,i=Object.keys(t).length;e<i;e++){let i=Object.keys(t)[e],s=t[i],r="video"===i?"video/mp4;codecs="+s.mimetype:"audio/mp4;codecs="+s.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[i]=a,a.addEventListener("updateend",this.onUpdateEnd),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],s=this.sourceBuffers[i];if(!s.updating){let t=e.sources[i];if(t&&!t.inited)s.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&s.appendBuffer(e.buffer.buffer)}}}}endOfStream(){const{readyState:e,activeSourceBuffers:t}=this.mediaSource;if("open"===e&&0===t.length)try{this.mediaSource.endOfStream()}catch(e){}}remove(e,t=0){for(let i=0;i<Object.keys(this.sourceBuffers).length;i++){let s=this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];s.updating||s.remove(t,e)}}removeBuffers(){const e=[];for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i,r=this.sourceBuffers[Object.keys(this.sourceBuffers)[t]];r.removeEventListener("updateend",this.onUpdateEnd),r.updating?i=new Promise(e=>{const t=function(){let i=3;const a=()=>{r.updating?i>0?(setTimeout(a,200),i--):e():(s.clearBuffer(r),e())};setTimeout(a,200),r.removeEventListener("updateend",t)};r.addEventListener("updateend",t)}):(s.clearBuffer(r),i=Promise.resolve()),e.push(i)}return Promise.all(e)}destroy(){return this.removeBuffers().then(()=>{for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let t=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];this.mediaSource.removeSourceBuffer(t),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[e]]}this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen),this.endOfStream(),window.URL.revokeObjectURL(this.url),this.url=null,this.configs={},this.container=null,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=1})}static clearBuffer(e){const t=e.buffered;let i=.1;for(let e=0,s=t.length;e<s;e++)i=t.end(e);try{e.remove(0,i)}catch(e){}}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),i=e%4;for(let e=0;e<t;e++)s.readByte(this.dataview,4);i>0&&s.readByte(this.dataview,i)}static readByte(e,t,i){let s;switch(t){case 1:s=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:s=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");s=e.getUint8(e.position)<<16,s|=e.getUint8(e.position+1)<<8,s|=e.getUint8(e.position+2);break;case 4:s=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");s=e.getUint32(e.position)<<32,s|=e.getUint32(e.position+4);break;default:s=""}return e.position+=t,s}readUint8(){return s.readByte(this.dataview,1)}readUint16(){return s.readByte(this.dataview,2)}readUint24(){return s.readByte(this.dataview,3)}readUint32(){return s.readByte(this.dataview,4)}readUint64(){return s.readByte(this.dataview,8)}readInt8(){return s.readByte(this.dataview,1,!0)}readInt16(){return s.readByte(this.dataview,2,!0)}readInt32(){return s.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=s},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(25))&&s.__esModule?s:{default:s};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,r.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},function(e,t,i){var s,r=(s=i(26))&&s.__esModule?s:{default:s};e.exports=r.default},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,s=Array(i>1?i-1:0),r=1;r<i;r++)s[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var d,l=s[Symbol.iterator]();!(a=(d=l.next()).done);a=!0){var h=d.value;t+=h.length}}catch(e){n=!0,o=e}finally{try{!a&&l.return&&l.return()}finally{if(n)throw o}}var u=new e(t),c=0,f=!0,p=!1,m=void 0;try{for(var g,_=s[Symbol.iterator]();!(f=(g=_.next()).done);f=!0){var y=g.value;u.set(y,c),c+=y.length}}catch(e){p=!0,m=e}finally{try{!f&&_.return&&_.return()}finally{if(p)throw m}}return u}},function(e,t,i){var s;Object.defineProperty(t,"__esModule",{value:!0});const r=((s=i(4))&&s.__esModule?s:{default:s}).default.CRYTO_EVENTS;t.default=class{constructor(e){this.inputBuffer=e.inputbuffer,this.outputBuffer=e.outputbuffer,this.key=e.key,this.iv=e.iv,this.method=e.method,this.crypto=window.crypto||window.msCrypto}init(){this.on(r.START_DECRYPT,this.decript.bind(this))}decript(){this.aeskey?this.decriptData():this.crypto.subtle.importKey("raw",this.key.buffer,{name:"AES-CBC"},!1,["encrypt","decrypt"]).then(e=>{this.aeskey=e,this.decriptData()})}decriptData(){let e=this._context.getInstance(this.inputBuffer),t=this._context.getInstance(this.outputBuffer),i=e.shift();i&&this.crypto.subtle.decrypt({name:"AES-CBC",iv:this.iv.buffer},this.aeskey,i).then(e=>{t.push(new Uint8Array(e)),this.emit(r.DECRYPTED),this.decriptData(i)})}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=h(i(29)),r=h(i(36)),a=i(39),n=i(9),o=i(0),d=i(7),l=h(i(2));function h(e){return e&&e.__esModule?e:{default:e}}const u=o.EVENTS.REMUX_EVENTS,c=o.EVENTS.DEMUX_EVENTS,f=o.EVENTS.LOADER_EVENTS,p="FLVController";class m{warn(){}}const g="FLV_ERROR";class _{constructor(e){this.TAG=p,this._player=e,this.state={initSegmentArrived:!1,range:{start:0,end:""},rangeSupport:!0}}static findFilePosition(e,t){for(let i=0,s=t.times.length;i<s;i++){const r=t.times[i],a=i+1<s?t.times[i+1]:Number.MAX_SAFE_INTEGER;if(r<=e&&e<=a)return t.filepositions[i]}return""}init(){this._context.registry("FETCH_LOADER",a.FetchLoader),this._context.registry("LOADER_BUFFER",n.XgBuffer),this._context.registry("FLV_DEMUXER",s.default),this._context.registry("TRACKS",n.Tracks),this._context.registry("MP4_REMUXER",r.default.Mp4Remuxer),this._context.registry("PRE_SOURCE_BUFFER",n.PreSource),this._context.registry("COMPATIBILITY",d.Compatibility),this._context.registry("LOGGER",m),this.mse=this._context.registry("MSE",o.Mse)({container:this._player.video}),this.initListeners(),setTimeout(()=>{this.loadMeta()},0)}initListeners(){this.on(f.LOADER_DATALOADED,this._handleLoaderDataLoaded.bind(this)),this.on(f.LOADER_ERROR,this._handleNetworkError.bind(this)),this.on(c.MEDIA_INFO,this._handleMediaInfo.bind(this)),this.on(c.METADATA_PARSED,this._handleMetadataParsed.bind(this)),this.on(c.DEMUX_COMPLETE,this._handleDemuxComplete.bind(this)),this.on(c.DEMUX_ERROR,this._handleDemuxError.bind(this)),this.on(u.INIT_SEGMENT,this._handleAppendInitSegment.bind(this)),this.on(u.MEDIA_SEGMENT,this._handleMediaSegment.bind(this))}_handleMediaInfo(){this._context.onMetaData||this.emit(c.DEMUX_ERROR,new Error("failed to get mediainfo"));const e=this._context.getInstance("LOADER_BUFFER"),t=this._context.getInstance("FETCH_LOADER");this.isSeekable&&(t.cancel(),this.state.range={start:0,end:e.historyLen-1},setTimeout(()=>{this.loadNext(0)}))}_handleLoaderDataLoaded(){this.emitTo("FLV_DEMUXER",c.DEMUX_START)}_handleMetadataParsed(e){this.emit(u.REMUX_METADATA,e)}_handleDemuxComplete(){this.emit(u.REMUX_MEDIA)}_handleAppendInitSegment(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}_handleMediaSegment(){this.mse.addSourceBuffers(),this.mse.doAppend()}_handleNetworkError(e,t){this._player.emit("error",new l.default.Errors("network",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,!0)}_handleDemuxError(e,t,i){void 0===i&&(i=!1),this._player.emit("error",new l.default.Errors("parse",this._player.config.url)),this._onError(f.LOADER_ERROR,e,t,i)}_onError(e,t,i,s){let r={errorType:e,errorDetails:`[${t}]: ${i.message}`,errorFatal:s||!1};this._player.emit(g,r)}seek(e){if(!this._context.onMetaData)return void this.loadMeta();if(!this.isSeekable)return;this._context.getInstance("LOADER_BUFFER").clear();const{preloadTime:t=15}=this._player.config,i=this.getSeekRange(e,t);this.state.range=i,this.compat&&this.compat.reset(),this.loadData()}loadNext(e){this._context.onMetaData&&(this.loader.loading||this.getNextRange(e)&&this.loadData())}loadData(){const{start:e,end:t}=this.state.range;this.emit(f.LADER_START,this._player.config.url,{headers:{method:"get",Range:`bytes=${e}-${t}`}})}loadMeta(){this.loader.load(this._player.config.url,{headers:{Range:"bytes=0-"}}).catch(()=>{this.state.rangeSupport=!1,this.loadFallback()})}loadFallback(){this.loader.load(this._player.config.url).catch(()=>{this._player.emit("error",new l.default.Errors("network",this._player.config.url))})}getSeekRange(e,t){const{keyframes:i}=this._context.onMetaData,s=this._context.mediaInfo.duration,r=e,a=e+t,n=_.findFilePosition(r,i);return a>=s||r>=s?{start:n,end:""}:{start:n,end:_.findFilePosition(a,i)}}getNextRange(e){if(""===this.state.range.end)return;const{end:t}=this.getSeekRange(e,this.config.preloadTime||15);return t<=this.state.range.end&&""!==t?void 0:(this.state.range={start:this.state.range.end+1,end:t},!0)}destroy(){this._player=null,this.mse=null,this.state={initSegmentArrived:!1,range:{start:0,end:""},rangeSupport:!0}}get isSeekable(){return!!this.state.rangeSupport&&(!this._context||!this._context.mediaInfo.isComplete()||null!==this._context.mediaInfo.keyframes&&void 0!==this._context.mediaInfo.keyframes)}get config(){return this._player.config}get loader(){return this._context.getInstance("FETCH_LOADER")}get compat(){return this._context.getInstance("COMPATIBILITY")}}t.default=_},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(0),a=i(7),n=i(9),o=(s=i(35))&&s.__esModule?s:{default:s};const d=r.EVENTS.DEMUX_EVENTS;class l{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(d.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}static getPlayType(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e,t=1e5;do{e=this._parseFlvTag()}while(e&&t-- >0);this.emit(d.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}parseFlvHeader(e){if(l.isFlvFile(e)){this._firstFragmentLoaded=!0;const t=l.getPlayType(e[4]);t.hasVideo&&this.initVideoTrack(),t.hasAudio&&this.initAudioTrack()}else this.emit(d.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let e=new n.VideoTrack;e.meta=new r.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}initAudioTrack(){this._trackNum++;let e=new n.AudioTrack;e.meta=new r.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}_parseFlvTagHeader(){let e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.emit(d.DEMUX_ERROR,this.TAG,new Error("tagType "+t.tagType),!1),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let s=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(s+=16777216*r),t.dts=s,this.loaderBuffer.shift(3),t}_processChunk(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(e){let t=this.tracks.audioTrack,i=this.tracks.videoTrack,s=this.loaderBuffer.shift(e.datasize);const r=(new o.default).resolve(s,s.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(d.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(a.audiosamplerate&&(e.sampleRate=a.audiosamplerate),a.audiochannels&&(e.channelCount=a.audiochannels),a.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){let e=i.meta;if("number"==typeof a.framerate){let t=Math.floor(1e3*a.framerate);if(t>0){let i=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=i,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let i,s,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,s=new Array(4),i=a-3):(t.objectType=2,s=new Array(2),i=a):-1!==r.indexOf("android")?(t.objectType=2,s=new Array(2),i=a):(t.objectType=5,i=t.sampleRateIndex,s=new Array(4),t.sampleRateIndex>=6?i=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,s=new Array(2),i=t.sampleRateIndex)),s[0]=t.objectType<<3,s[0]|=(15&t.sampleRateIndex)>>>1,s[1]=(15&t.sampleRateIndex)<<7,s[1]|=(15&t.channelCount)<<3,5===t.objectType&&(s[1]|=(15&i)>>>1,s[2]=(1&i)<<7,s[2]|=8,s[3]=0),t.config=s,t}_parseAACData(e){let t=this.tracks.audioTrack;if(!t)return;let i=t.meta;i||(t.meta=new r.AudioTrackMeta,i=t.meta);let s=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let a=(240&s)>>>4;t.format=a,10!==a&&this.emit(d.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(s),i.sampleRateIndex=(12&s)>>>2,i.frameLenth=(2&s)>>>1,i.channelCount=1&s,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));let n=i.audioSampleRate,o=i.sampleRateIndex,l=i.refSampleDuration;delete e.tagType;let h=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);n=t.audiosamplerate||i.audioSampleRate,o=t.sampleRateIndex||i.sampleRateIndex,l=Math.floor(1024/n*i.timescale),i.channelCount=t.channelCount,i.sampleRate=n,i.sampleRateIndex=o,i.refSampleDuration=l,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=t.config;const s=this._context.mediaInfo.audio;s.codec=t.codec,s.channelCount=t.channelCount,s.sampleRate=n,s.sampleRateIndex=t.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(d.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&this.emit(d.AUDIO_METADATA_CHANGE),this._hasAudioSequence=!0,this._metaChange=!0}else this._metaChange&&(e.options={meta:t.meta},this._metaChange=!1),e.data=e.data.slice(1,e.data.length),t.samples.push(e);h||this.emit(d.DEMUX_ERROR,this.TAG,new Error("TAG length error at "+e.datasize),!1)}_parseHevcData(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);let t={},i=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>i;){let s=e.data.slice(Number.parseInt(i),4+i);t.size=s[3],t.size+=256*s[2],t.size+=256*s[1]*256,t.size+=256*s[0]*256*256,i+=4,t.data=e.data.slice(Number.parseInt(i),t.size+i),i+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(d.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(d.METADATA_PARSED,"video"):this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1))}else if(7===i){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let i=0;i<4;i++)e=256*e+t[i];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType)this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(d.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(d.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0),this._metaChange=!0;else{if(!this._datasizeValidator(e.datasize))return void this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);this._metaChange&&(e.options={meta:Object.assign({},this.tracks.videoTrack.meta)},this._metaChange=!1),this.tracks.videoTrack.samples.push(e)}}else this.emit(d.DEMUX_ERROR,this.TAG,new Error(`video codeid is ${i}`),!1),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1),this.tracks.videoTrack.samples.push(e),this.emit(d.DEMUX_COMPLETE);delete e.tagType}_avcSequenceHeaderParser(e){let t=this.tracks.videoTrack;if(!t)return;let i=0;t.meta||(t.meta=new r.VideoTrackMeta);let s=t.meta;s.configurationVersion=e[0],s.avcProfileIndication=e[1],s.profileCompatibility=e[2],s.avcLevelIndication=e[3]/10,s.nalUnitLength=1+(3&e[4]);let n=31&e[5];i=6;let o={};for(let t=0;t<n;t++){let t=255*e[i]+e[i+1];i+=2;let r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e[i+s];let n="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),n+=t}s.codec=n,i+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let d=e[i];i++;for(let t=0;t<d;t++){let t=255*e[i]+e[i+1];i+=2;let s=new Uint8Array(t);for(let r=0;r<t;r++)s[r]=e[i+r];i+=t,this.tracks.videoTrack.meta.pps=s}Object.assign(s,a.SpsParser.toVideoMeta(o));const l=this._context.mediaInfo.video;l.codec=s.codec,l.profile=s.profile,l.level=s.level,l.chromaFormat=s.chromaFormat,l.frameRate=s.frameRate,l.parRatio=s.parRatio,l.width=l.width===s.presentWidth?l.width:s.presentWidth,l.height=l.height===s.presentHeight?l.width:s.presentHeight,s.duration=this._context.mediaInfo.duration*s.timescale,s.avcc=new Uint8Array(e.length),s.avcc.set(e),t.meta=s}_switchAudioSampleRate(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}_switchAudioSamplingFrequency(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}_switchAudioChannel(e){return[1,2][1&e]}_datasizeValidator(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}get loaderBuffer(){const e=this._context.getInstance("LOADER_BUFFER");if(e)return e;this.emit(d.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}t.default=l},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(8))&&s.__esModule?s:{default:s};class a{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,i=e.position;return 1===t.getInt32(i)||0===t.getInt16(i)&&1===t.getInt8(i+2)?a.getAnnexbNals(e):a.getAvccNals(e)}static getAnnexbNals(e){let t=[],i=a.getHeaderPositionAnnexB(e),s=i.pos,r=s;for(;s<e.length-4;){let n=e.buffer.slice(s,s+i.headerLength);i.pos===e.position&&e.skip(i.headerLength),r=(i=a.getHeaderPositionAnnexB(e)).pos;let o={header:n,body:new Uint8Array(e.buffer.slice(s+n.byteLength,r))};a.analyseNal(o),t.push(o),e.skip(r-e.position),s=r}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let i=e.dataview.getInt32();if(!(e.length-e.position>=i))break;{let s=e.buffer.slice(e.position,e.position+4);e.skip(4);let r=e.buffer.slice(e.position,e.position+i);e.skip(i);let n={header:s,body:r};a.analyseNal(n),t.push(n)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=r.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,i=0;for(;3!==i&&4!==i&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?i=4:1===e.dataview.getInt8(t+2)?i=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(i=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?i=3:t=e.length)),{pos:t,headerLength:i}}static getAvcc(e,t){let i=new Uint8Array(e.byteLength+t.byteLength+11);i[0]=1,i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=255,i[5]=225;let s=6;return i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),s),s+=2,i.set(e,s),i[s+=e.byteLength]=1,s++,i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),s),s+=2,i.set(t,s),i}}t.default=a},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){let t=Math.min(this._currentWordBitsLeft,e),i=this._currentWord>>>32-t;if(e>32)throw new Error("Cannot read more than 32 bits at a time");return this._currentWordBitsLeft-=t,this._currentWordBitsLeft>0?this._currentWord<<=t:this._totalBytes-this._bufferIndex>0&&this._fillCurrentWord(),(t=e-t)>0&&this._currentWordBitsLeft?i<<t|this.readBits(t):i}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(0),a=(s=i(33))&&s.__esModule?s:{default:s};const{REMUX_EVENTS:n,DEMUX_EVENTS:o}=r.EVENTS;class d{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[],this._videoLargeGap=0,this._audioLargeGap=0}init(){this.before(n.REMUX_MEDIA,this.doFix.bind(this))}reset(){this.nextAudioDts=null,this.nextVideoDts=null,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:e,isFirstVideoSamples:t}=this.getFirstSample();this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples);const{changed:i,changedIdx:s}=d.detactChangeStream(this.videoTrack.samples);i&&!e?this.fixChangeStreamVideo(s):this.doFixVideo(t);const{changed:r,changedIdx:a}=d.detactChangeStream(this.audioTrack.samples);r?this.fixChangeStreamAudio(a):this.doFixAudio(e)}doFixVideo(e,t){let{samples:i,meta:s}=this.videoTrack;if(s.frameRate&&!1===s.frameRate.fixed)return;if(!i||!i.length||!this._firstVideoSample)return;const r=i[0],a=i.length;this._videoLargeGap>0&&d.doFixLargeGap(i,this._videoLargeGap),r.dts!==this._firstVideoSample.dts&&(t||d.detectLargeGap(this.nextVideoDts,r))&&(t&&(this.nextVideoDts=t),this._videoLargeGap=this.nextVideoDts-r.dts,d.doFixLargeGap(i,this._videoLargeGap));const n=r.dts;if(e&&this._firstAudioSample){const e=this._firstVideoSample.dts,t=e-this._firstAudioSample.dts;if(t>2*s.refSampleDuration){const a=Math.floor(t/s.refSampleDuration);for(let t=0;t<a;t++){const a=Object.assign({},r);a.dts=e-(t+1)*s.refSampleDuration,a.pts=a.dts+a.cts,i.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}}}let o;if(this.nextVideoDts){o=n-this.nextVideoDts;const e=Math.abs(o);if(o>2*s.refSampleDuration){const e=Math.floor(o/s.refSampleDuration);for(let t=0;t<e;t++){const e=Object.assign({},i[0]),r=n-(t+1)*s.refSampleDuration;e.dts=r>this.nextVideoDts?r:this.nextVideoDts,e.pts=e.dts+e.cts,this.videoTrack.samples.unshift(e),this.filledVideoSamples.push({dts:e.dts,size:e.data.byteLength})}}else e<=s.refSampleDuration&&e>0?(i[0].dts=this.nextVideoDts,i[0].originDts=i[0].dts,i[0].cts=void 0!==i[0].cts?i[0].cts:i[0].pts-i[0].dts,i[0].pts=i[0].dts+i[0].cts):o<0&&d.doFixLargeGap(i,-1*o)}const l=i[i.length-1].dts,h=i.length>=2?l-i[i.length-2].dts:s.refSampleDuration;this.lastVideoSamplesLen=a,this.nextVideoDts=l+h,this.lastVideoDts=l;for(let e=0,t=i.length;e<t;e++){const t=i[e],r=i[e+1];if(!r)break;const a=r.dts-t.dts;if(a>2*s.refSampleDuration){let n=Math.floor(a/s.refSampleDuration),o=0;for(;o<n;){const a=Object.assign({},r);a.dts=t.dts+(o+1)*s.refSampleDuration,a.pts=a.dts+a.cts,a<r.dts&&(i.splice(e,0,a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})),o++,e++}}}this.videoTrack.samples=i}doFixAudio(e,t){let{samples:i,meta:s}=this.audioTrack;if(!i||!i.length)return;const r=i.length,n=a.default.getSilentFrame(s.codec,s.channelCount),o=this._firstAudioSample,l=i[0];if(this._audioLargeGap>0&&d.doFixLargeGap(i,this._audioLargeGap),l.dts!==this._firstAudioSample.dts&&(t||d.detectLargeGap(this.nextAudioDts,l))&&(t&&(this.nextAudioDts=t),this._audioLargeGap=this.nextAudioDts-l.dts,d.doFixLargeGap(i,this._audioLargeGap)),this._firstVideoSample&&e){const e=this._firstVideoSample.pts?this._firstVideoSample.pts:this._firstVideoSample.dts+this._firstVideoSample.cts;if(o.dts-e>s.refSampleDuration){const t=Math.floor((o.dts-e)/s.refSampleDuration);for(let e=0;e<t;e++){const t={data:n,datasize:n.byteLength,dts:o.dts-(e+1)*s.refSampleDuration,filtered:0};i.unshift(t),this.filledAudioSamples.push({dts:t.dts,size:t.data.byteLength})}}}let h;const u=i[0].dts;if(this.nextAudioDts){h=u-this.nextAudioDts;const e=Math.abs(h);if(e>s.refSampleDuration&&1===r&&1===this.lastAudioSamplesLen&&(s.refSampleDurationFixed=void 0),h>2*s.refSampleDuration)if(1===r&&1===this.lastAudioSamplesLen)s.refSampleDurationFixed=void 0!==s.refSampleDurationFixed?s.refSampleDurationFixed+h:s.refSampleDuration+h;else{const e=Math.floor(h/s.refSampleDuration);for(let t=0;t<e;t++){const e=u-(t+1)*s.refSampleDuration,r=Object.assign({},i[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else e<=s.refSampleDuration&&e>0?(i[0].dts=this.nextAudioDts,i[0].pts=this.nextAudioDts):h<0&&d.doFixLargeGap(i,-1*h)}const c=i[i.length-1].dts,f=i.length>=2?c-i[i.length-2].dts:s.refSampleDuration;this.lastAudioSamplesLen=r,this.nextAudioDts=s.refSampleDurationFixed?c+s.refSampleDurationFixed:c+f,this.lastAudioDts=c;for(let e=0,t=i.length;e<t;e++){const t=i[e],s=i[e+1];if(!s)break;const r=s.dts-t.dts;i[e].duration=r}this.audioTrack.samples=d.sortAudioSamples(i)}fixChangeStreamVideo(e){const{samples:t,meta:i}=this.videoTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixVideo(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.videoTrack.samples=t.slice(0,e),this.doFixVideo(!1),this.videoTrack.samples=t.slice(e),this.doFixVideo(!1,l),this.videoTrack.samples=a.concat(n)}fixChangeStreamAudio(e){const{samples:t,meta:i}=this.audioTrack,s=0===e?this.getStreamChangeStart(t[0]):t[e-1].dts,r=t[e].dts;if(Math.abs(s-r)<=2*i.refSampleDuration)return t[e].options?t[e].options.isContinue=!0:t[e].options={isContinue:!0},this.doFixAudio(!1);const a=t.slice(0,e),n=t.slice(e),o=t[0],d=n[0].dts-o.dts,l=o.options&&o.options.start+d?o.options.start:null;this.audioTrack.samples=a,this.doFixAudio(!1),this.audioTrack.samples=n,this.doFixAudio(!1,l),this.audioTrack.samples=a.concat(n)}getFirstSample(){let{samples:e}=this.videoTrack,{samples:t}=this.audioTrack,i=!1,s=!1;return!this._firstVideoSample&&e.length&&(this._firstVideoSample=d.findFirstVideoSample(e),i=!0),!this._firstAudioSample&&t.length&&(this._firstAudioSample=d.findFirstAudioSample(t),s=!0),{isFirstVideoSamples:i,isFirstAudioSamples:s}}fixRefSampleDuration(e,t){const i="video"===e.type,s=i?this.allVideoSamplesCount:this.allAudioSamplesCount,r=i?this._firstVideoSample.dts:this._firstAudioSample.dts,a=i?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration)){if(t.length>=1){const i=t[t.length-1].dts;e.refSampleDuration=Math.floor((i-r)/(s+a-1))}}else if(e.refSampleDuration&&t.length>=5){const i=(t[t.length-1].dts-t[0].dts)/(t.length-1);e.refSampleDuration=Math.floor(Math.abs(e.refSampleDuration-i)<=5?e.refSampleDuration:i)}}recordSamplesCount(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}removeInvalidSamples(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter(e=>e.dts>=t.dts&&(void 0===this.lastAudioDts||e.dts>this.lastAudioDts)),this.videoTrack.samples=this.videoTrack.samples.filter(t=>t.dts>=e.dts&&(void 0===this.lastVideoDts||t.dts>this.lastVideoDts))}getStreamChangeStart(e){return e.options&&e.options.start?e.options.start-this.dtsBase:1/0}static sortAudioSamples(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}static findFirstAudioSample(e){return e&&0!==e.length?d.sortAudioSamples(e)[0]:null}static findFirstVideoSample(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,i=t.length;e<i;e++)if(t[e].isKeyframe)return t[e]}static detectLargeGap(e,t){if(null===e)return;const i=t.dts||0,s=e-i>=1e3||i-e>=1e3,r=t.options&&t.options.discontinue;return s||r}static doFixLargeGap(e,t){console.log("fix large gap");for(let i=0,s=e.length;i<s;i++){const s=e[i];s.dts+=t,s.pts&&(s.pts+=t)}}static detactChangeStream(e){let t=!1,i=-1;for(let s=0,r=e.length;s<r;s++)if(e[s].options&&e[s].options.meta){t=!0,i=s;break}return{changed:t,changedIdx:i}}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks?this.tracks.audioTrack:null}get videoTrack(){return this.tracks?this.tracks.videoTrack:null}get dtsBase(){const e=this._context.getInstance("MP4_REMUXER");return e?e._dtsBase:0}}t.default=d},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{static getSilentFrame(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new s,this.sources[e]}clear(){this.sources={}}destroy(){this.sources={}}}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(0);const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};t.default=class{constructor(){this.offset=0,this.readOffset=this.offset}resolve(e,t){if(t<3)throw new Error("not enough data for metainfo");const i={},s=this.parseValue(e),r=this.parseValue(e,t-s.bodySize);return i[s.data]=r.data,this.resetStatus(),i}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(e){const t=new DataView(e,this.readOffset).getUint16(0,!s.isLe);let i="";i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}parseDate(e,t){const i=new DataView(e,this.readOffset,t);let r=i.getFloat64(0,!s.isLe);return r+=60*i.getInt16(8,!s.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(e,t){const i=this.parseString(e,t),s=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:s.data},bodySize:i.bodySize+s.bodySize,isObjEnd:s.isObjEnd}}parseLongString(e){const t=new DataView(e,this.readOffset).getUint32(0,!s.isLe);let i="";return i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}parseValue(e,t){let i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:d,MIX_ARRAY:l,OBJECT_END:h,STRICT_ARRAY:u,DATE:c,LONE_STRING:f}=r,p=new DataView(i,this.readOffset,t);let m=!1;const g=p.getUint8(0);let _=1;this.readOffset+=1;let y=null;switch(g){case a:y=p.getFloat64(1,!s.isLe),this.readOffset+=8,_+=8;break;case n:y=!!p.getUint8(1),this.readOffset+=1,_+=1;break;case o:{const e=this.parseString(i);y=e.data,_+=e.bodySize;break}case d:{y={};let e=0;for(16777215&p.getUint32(t-4,!s.isLe)&&(e=3);_<t-4;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(this.readOffset+=3,_+=3);break}case l:{y={},_+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!s.isLe))&&(e=3);_<t-8;){const s=this.parseObject(i,t-_-e);if(s.isObjectEnd)break;y[s.data.name]=s.data.value,_+=s.bodySize}_<=t-3&&9==(16777215&p.getUint32(_-1,!s.isLe))&&(_+=3,this.readOffset+=3);break}case h:y=null,m=!0;break;case u:{y=[];const e=p.getUint32(1,!s.isLe);_+=4,this.readOffset+=4;for(let s=0;s<e;s++){const e=this.parseValue(i,t-_);y.push(e.data),_+=e.bodySize}break}case c:{const e=this.parseDate(i,t-1);y=e.data,_+=e.bodySize;break}case f:{const e=this.parseLongString(i,t-1);y=e.data,_+=e.bodySize;break}default:_=t}return{data:y,bodySize:_,isObjEnd:m}}}},function(e,t,i){e.exports={Mp4Remuxer:i(37).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(0),a=(s=i(38))&&s.__esModule?s:{default:s};const n=r.EVENTS.REMUX_EVENTS;class o{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e,this.isFirstVideo=!0,this.isFirstAudio=!0,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(n.REMUX_MEDIA,this.remux.bind(this)),this.on(n.REMUX_METADATA,this.onMetaDataReady.bind(this)),this.on(n.DETECT_CHANGE_STREAM,this.resetDtsBase.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}resetDtsBase(){this._dtsBase=0,this._dtsBaseInited=!1}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t;if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");t=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");t=e}let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.mimetype=t.meta.codec,s.init=this.remuxInitSegment(e,t.meta),this.emit(n.INIT_SEGMENT,e)}remuxInitSegment(e,t){let i=new r.Buffer,s=a.default.ftyp(),n=a.default.moov({type:e,meta:t});return i.write(s,n),i}calcDtsBase(e,t){if(!e.samples.length&&!t.samples.length)return;let i=1/0,s=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(s=t.samples[0].dts),this._dtsBase=Math.min(i,s),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let{samples:i}=t,s=-1,o=null;const d=[],l={samples:[]};for(;i.length;){const e=i.shift(),{isKeyframe:t,options:r}=e;if(!this.isFirstAudio&&r&&r.meta){o=this.remuxInitSegment("video",r.meta),r.meta=null,i.unshift(e),r.isContinue||this.resetDtsBase();break}let a,n,h=e.dts-this._dtsBase;-1===s&&(s=h),void 0!==e.pts&&(a=(n=e.pts-this._dtsBase)-h),void 0!==e.cts&&(n=e.cts+h,a=e.cts);let u={buffer:[],size:0};l.samples.push(u),u.buffer.push(e.data),u.size+=e.data.byteLength;let c=0;c=i.length>=1?i[0].dts-this._dtsBase-h:d.length>=1?d[d.length-1].duration:this.videoMeta.refSampleDuration,this.videoAllDuration+=c,d.push({dts:h,cts:a,pts:n,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:c,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:h,type:"video"})}let h=new r.Buffer;if(d.length){const e=a.default.moof({id:t.meta.id,time:s,samples:d}),i=a.default.mdat(l);h.write(e,i),this.writeToSource("video",h)}if(o&&(this.writeToSource("video",o),i.length))return t.samples=i,this._remuxVideo(t);this.isFirstVideo=!1,this.emit(n.MEDIA_SEGMENT,"video");const u=d[d.length-1];this._videoNextDts=u.dts+u.duration,t.samples=[],t.length=0}_remuxAudio(e){const{samples:t}=e;let i=-1,s=[],o=null;const d={samples:[]};if(!t||!t.length)return;let l=!1;for(;t.length;){let e=t.shift();const{data:r,options:a}=e;if(!this.isFirstAudio&&a&&a.meta){o=this.remuxInitSegment("audio",a.meta),a.meta=null,t.unshift(e),a.isContinue||this.resetDtsBase();break}let n=e.dts-this._dtsBase;const h=n;l||(i=n,l=!0);let u=0;u=this.audioMeta.refSampleDurationFixed?this.audioMeta.refSampleDurationFixed:t.length>=1?t[0].dts-this._dtsBase-n:s.length>=1?s[s.length-1].duration:this.audioMeta.refSampleDuration,this.audioAllDuration+=u;const c={dts:n,pts:n,cts:0,size:r.byteLength,duration:e.duration?e.duration:u,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:h,type:"audio"};let f={buffer:[],size:0};f.buffer.push(r),f.size+=r.byteLength,d.samples.push(f),s.push(c)}const h=new r.Buffer;if(s.length){const t=a.default.moof({id:e.meta.id,time:i,samples:s}),r=a.default.mdat(d);h.write(t,r),this.writeToSource("audio",h)}if(o&&(this.writeToSource("audio",o),t.length))return e.samples=t,this._remuxAudio(e);this.isFirstAudio=!1,this.emit(n.MEDIA_SEGMENT,"audio",h);const u=s[s.length-1];this._videoNextDts=u.dts+u.duration,e.samples=[],e.length=0}writeToSource(e,t){let i=this._context.getInstance("PRE_SOURCE_BUFFER"),s=i.getSource(e);s||(s=i.createSource(e)),s.data.push(t)}initSilentAudio(e,t){const i=o.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=o},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(0);class r{static size(e){return s.Buffer.writeUint32(e)}static initBox(e,t,...i){const a=new s.Buffer;return a.write(r.size(e),r.type(t),...i),a.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let i,s=8,a=r.mvhd(t.duration,t.timescale);i="video"===e?r.videoTrak(t):r.audioTrak(t);let n=r.mvex(t.duration,t.timescale||1e3,t.id);return[a,i,n].forEach(e=>{s+=e.byteLength}),r.initBox(s,"moov",a,i,n)}static mvhd(e,t=1e3){let i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),s=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static audioTrak(e){let t=8,i=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),s=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static tkhd(e){let t=e.id,i=e.duration,s=e.width,a=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>>8&255,255&s,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new s.Buffer,i=e.duration,a=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=r.mdhd(e.timescale,e.duration),s=r.hdlr(e.type),a=r.minf(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",i,s,a)}static mdhd(e=1e3,t){let i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+i.byteLength,"mdhd",r.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?r.vmhd():r.smhd(),s=r.dinf(),a=r.stbl(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",i,s,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new s.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=r.stsd(e),s=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[i,s,a,n,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",i,s,a,n,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=r.esds(e.config);return r.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(e=[43,146,8,0]){const t=e.length;let i=new s.Buffer,a=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(r.size(8+a.byteLength),r.type("esds"),a),i.buffer}static avc1(e){let t=new s.Buffer,i=e.width,a=e.height,n=e.parRatio.height,o=e.parRatio.width,d=e.avcc,l=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),h=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),u=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+l.byteLength+d.byteLength+h.byteLength),r.type("avc1"),l,r.size(8+d.byteLength),r.type("avcC"),d,r.size(20),r.type("btrt"),h,r.size(16),r.type("pasp"),u),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e,t=1e3,i){let a=new s.Buffer,n=s.Buffer.writeUint32(e);return a.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),n,r.trex(i)),a.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=r.mfhd(),s=r.traf(e);return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",i,s)}static mfhd(){let e=s.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,i=r.tfhd(e.id),s=r.tfdt(e.time),a=r.sdtp(e),n=r.trun(e,a.byteLength);return[i,s,n,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",i,s,n,a)}static tfhd(e){let t=s.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),s.Buffer.writeUint32(e))}static trun(e,t){let i=new s.Buffer,a=s.Buffer.writeUint32(e.samples.length),n=s.Buffer.writeUint32(92+16*e.samples.length+t);return i.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new s.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,s=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([s]))}),t.buffer}static mdat(e){let t=new s.Buffer,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(r.size(i),r.type("mdat"));let a=new Uint8Array(i),n=0;return a.set(t.buffer,n),n+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{a.set(e,n),n+=e.byteLength})}),a}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},function(e,t,i){e.exports={FetchLoader:i(40).default}},function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=i(0).EVENTS.LOADER_EVENTS;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this._destroyed=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(s.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let i=this;this.url=e,this._canceled=!1;let r=this.getParams(t);return i.loading=!0,fetch(this.url,r).then((function(e){if(e.ok)return i.status=e.status,i._onFetchResponse(e);i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,new Error("invalid response."))})).catch((function(e){throw i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,e),new Error(e.message)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);this._loaderTaskNo++;let r=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case 2:e.json().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 1:e.text().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 3:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(new Uint8Array(e)),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 0:default:return this._onReader(e.body.getReader(),r)}}_onReader(e,t){let i=this._context.getInstance(this.buffer);if(!i&&this._reader||this._destroyed)try{this._reader.cancel()}catch(e){}if(this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then((function(a){if(a.done)return r.loading=!1,r.status=0,void r.emit(s.LOADER_COMPLETE,i);if(!r._canceled&&!r._destroyed)return i.push(a.value),r.emit(s.LOADER_DATALOADED,i),r._onReader(e,t);if(r._reader)try{r._reader.cancel()}catch(e){}})).catch(e=>{r.loading=!1,r.emit(s.LOADER_ERROR,r.TAG,e)})}getParams(e){let t=Object.assign({},e),i=new Headers,s={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}if("object"==typeof t.headers){let e=t.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(s.mode="same-origin"),t.withCredentials&&(s.credentials="include"),s}cancel(){if(this._reader){try{this._reader.cancel()}catch(e){}this._reader=null,this.loading=!1,this._canceled=!0}}destroy(){this._destroyed=!0,this.cancel()}}}]))},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,i){"use strict";var s=a(i(/*! xgplayer-flv-live */"../xgplayer-flv-live/dist/index.js")),r=a(i(/*! xgplayer-flv-vod */"../xgplayer-flv-vod/dist/index.js"));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t.isLive?new s.default(t):new r.default(t)}},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!***************************!*\
  !*** external "xgplayer" ***!
  \***************************/
/*! no static exports found */function(t,i){t.exports=e}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllci1mbHYvVXNlcnMvbGVvbmFyZG8vRG9jdW1lbnRzL2Zyb250LWVuZC9wbGF5ZXIveGdwbGF5ZXIvbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItYnVmZmVyL3NyYy9idWZmZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWJ1ZmZlci9zcmMvcHJlc291Y2UuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWJ1ZmZlci9zcmMvdHJhY2suanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWNvZGVjL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1jb2RlYy9zcmMvYWFjL2FhYy1oZWxwZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWNvZGVjL3NyYy9jb21wYXRpYmlsaXR5LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1jb2RlYy9zcmMvaDI2NC9uYWx1bml0L2dvbG9tYi5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItY29kZWMvc3JjL2gyNjQvbmFsdW5pdC9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItY29kZWMvc3JjL2gyNjQvbmFsdW5pdC9zcHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1kZW11eC9zcmMvZmx2L2FtZi1wYXJzZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L3NyYy9mbHYvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L3NyYy9obHMvZGVtdXhlci9tM3U4cGFyc2VyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1kZW11eC9zcmMvaGxzL2RlbXV4ZXIvdHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L3NyYy9obHMvcGxheWxpc3QuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWxvYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItbG9hZGVyL3NyYy9mZXRjaC1sb2FkZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXJlbXV4L2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1yZW11eC9zcmMvbXA0L2ZtcDQuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXJlbXV4L3NyYy9tcDQvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9ub2RlX21vZHVsZXMvY29uY2F0LXR5cGVkLWFycmF5L2xpYi9jb25jYXQuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL25vZGVfbW9kdWxlcy9jb25jYXQtdHlwZWQtYXJyYXkvbGliL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvY29uc3RhbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL2NvbnN0YW50cy93b3JrZXItY29tbWFuZHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9jb250ZXh0LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvY3J5cHRvL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvZW52L2lzbGUuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9lbnYvc25pZmZlci5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL2Vudi91dGY4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL21lZGlhLWluZm8uanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvbWVkaWEtc2FtcGxlLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL21lZGlhLXNlZ21lbnQtbGlzdC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy9tZWRpYS1zZWdtZW50LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL3RyYWNrLW1ldGEuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvdHJhY2stc2FtcGxlLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbXNlL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvd3JpdGUvYnVmZmVyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvd3JpdGUvc3RyZWFtLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3NyYy9mbHYtbGl2ZS5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyLWZsdi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6L3hncGxheWVyLWZsdi9leHRlcm5hbCBcInhncGxheWVyXCIiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4tdm9kL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi9leHRlcm5hbCBcInhncGxheWVyXCIiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfeGdwbGF5ZXJfXyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJ0YXJnZXQiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uY2F0IiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJ0aGlzIiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiJGdldE1heExpc3RlbmVycyIsInRoYXQiLCJfYWRkTGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwiVHlwZUVycm9yIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsInB1c2giLCJsZW5ndGgiLCJ3YXJuZWQiLCJ3IiwiRXJyb3IiLCJTdHJpbmciLCJlbWl0dGVyIiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIm9uY2VXcmFwcGVyIiwiYXJndW1lbnRzIiwiZmlyZWQiLCJyZW1vdmVMaXN0ZW5lciIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwiYXJyIiwicmV0IiwiQXJyYXkiLCJhcnJheUNsb25lIiwibGlzdGVuZXJDb3VudCIsImNvcHkiLCJzZXQiLCJhcmciLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXJyb3IiLCJlciIsImVyciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwiaGFuZGxlciIsImxlbiIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwib24iLCJwcmVwZW5kTGlzdGVuZXIiLCJvbmNlIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3QiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsImluZGV4IiwicG9wIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwia2V5cyIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJUcmFjayIsImRlZmF1bHQiLCJUcmFja3MiLCJBdWRpb1RyYWNrIiwiVmlkZW9UcmFjayIsIlhnQnVmZmVyIiwiUmVtdXhCdWZmZXIiLCJQcmVTb3VyY2UiLCJjb25zdHJ1Y3RvciIsImhpc3RvcnlMZW4iLCJhcnJheSIsIm9mZnNldCIsImRhdGEiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsIl9zaGlmdEJ1ZmZlciIsInNsaWNlIiwidG1wb2ZmIiwidG1wIiwidGVtcGxlbmd0aCIsImNsZWFyIiwiZGVzdHJveSIsInRvSW50Iiwic3RhcnQiLCJyZXRJbnQiLCJ2aWRlbyIsImF1ZGlvIiwiU291cmNlIiwibWltZXR5cGUiLCJzb3VyY2VzIiwiZ2V0U291cmNlIiwic291cmNlIiwiY3JlYXRlU291cmNlIiwiaWQiLCJzZXF1ZW5jZU51bWJlciIsInNhbXBsZXMiLCJkcm9wcGVkU2FtcGxlcyIsInJlc2V0IiwiZGlzdHJveSIsInN1cGVyIiwiVEFHIiwiZHJvcHBlZCIsImF1ZGlvVHJhY2siLCJ2aWRlb1RyYWNrIiwiTmFsdW5pdCIsIlNwc1BhcnNlciIsIkNvbXBhdGliaWxpdHkiLCJjb2RlYyIsImNoYW5uZWxDb3VudCIsIlJFTVVYX0VWRU5UUyIsIkxPQURFUl9FVkVOVFMiLCJFVkVOVFMiLCJuZXh0QXVkaW9EdHMiLCJuZXh0VmlkZW9EdHMiLCJsYXN0QXVkaW9TYW1wbGVzTGVuIiwibGFzdFZpZGVvU2FtcGxlc0xlbiIsImxhc3RWaWRlb0R0cyIsImxhc3RBdWRpb0R0cyIsImFsbEF1ZGlvU2FtcGxlc0NvdW50IiwiYWxsVmlkZW9TYW1wbGVzQ291bnQiLCJfZmlyc3RBdWRpb1NhbXBsZSIsIl9maXJzdFZpZGVvU2FtcGxlIiwiZmlsbGVkQXVkaW9TYW1wbGVzIiwiZmlsbGVkVmlkZW9TYW1wbGVzIiwidmlkZW9MYXN0U2FtcGxlIiwiYXVkaW9MYXN0U2FtcGxlIiwiX3ZpZGVvTGFyZ2VHYXAiLCJfYXVkaW9MYXJnZUdhcCIsImJlZm9yZSIsIlJFTVVYX01FRElBIiwiZG9GaXgiLCJMT0FERVJfQ09NUExFVEUiLCJpc0ZpcnN0QXVkaW9TYW1wbGVzIiwiaXNGaXJzdFZpZGVvU2FtcGxlcyIsImdldEZpcnN0U2FtcGxlIiwicmVjb3JkU2FtcGxlc0NvdW50IiwiZml4UmVmU2FtcGxlRHVyYXRpb24iLCJtZXRhIiwiY2hhbmdlZCIsInZpZGVvQ2hhbmdlZCIsImNoYW5nZWRJZHgiLCJ2aWRlb0NoYW5nZWRJZHgiLCJkZXRhY3RDaGFuZ2VTdHJlYW0iLCJmaXhDaGFuZ2VTdHJlYW1WaWRlbyIsImRvRml4VmlkZW8iLCJhdWRpb0NoYW5nZWQiLCJhdWRpb0NoYW5nZWRJZHgiLCJmaXhDaGFuZ2VTdHJlYW1BdWRpbyIsImRvRml4QXVkaW8iLCJyZW1vdmVJbnZhbGlkU2FtcGxlcyIsImZpcnN0Iiwic3RyZWFtQ2hhbmdlU3RhcnQiLCJ2aWRlb1NhbXBsZXMiLCJzYW1wbGUiLCJvcmlnaW5EdHMiLCJkdHMiLCJmcmFtZVJhdGUiLCJmaXhlZCIsImZpcnN0U2FtcGxlIiwiZG9GaXhMYXJnZUdhcCIsInZpZGVvRmlyc3REdHMiLCJnYXAiLCJyZWZTYW1wbGVEdXJhdGlvbiIsImZpbGxDb3VudCIsIk1hdGgiLCJmbG9vciIsImNsb25lZEZpcnN0U2FtcGxlIiwiYXNzaWduIiwicHRzIiwiY3RzIiwic2l6ZSIsImN1ckxhc3RTYW1wbGUiLCJkdXJhdGlvbiIsImF1ZGlvU2FtcGxlcyIsInNhbXBsZXNMZW4iLCJzaWxlbnRGcmFtZSIsIkFBQyIsImdldFNpbGVudEZyYW1lIiwiX2ZpcnN0U2FtcGxlIiwiZGV0ZWN0TGFyZ2VHYXAiLCJ2aWRlb0ZpcnN0UHRzIiwic2lsZW50U2FtcGxlQ291bnQiLCJzaWxlbnRTYW1wbGUiLCJkYXRhc2l6ZSIsImZpbHRlcmVkIiwiZmlyc3REdHMiLCJhYnNHYXAiLCJhYnMiLCJyZWZTYW1wbGVEdXJhdGlvbkZpeGVkIiwic2lsZW50RnJhbWVDb3VudCIsImNvbXB1dGVkIiwibGFzdE9yaWdpbkR0cyIsImxhc3REdHMiLCJsYXN0U2FtcGxlRHVyYXRpb24iLCJjdXJyZW50IiwibmV4dCIsInNvcnRBdWRpb1NhbXBsZXMiLCJjaGFuZ2VJZHgiLCJwcmV2RHRzIiwiZ2V0U3RyZWFtQ2hhbmdlU3RhcnQiLCJjdXJEdHMiLCJvcHRpb25zIiwiaXNDb250aW51ZSIsImZpcnN0UGFydFNhbXBsZXMiLCJzZWNvbmRQYXJ0U2FtcGxlcyIsImZpcnN0UGFydER1cmF0aW9uIiwiZmluZEZpcnN0VmlkZW9TYW1wbGUiLCJmaW5kRmlyc3RBdWRpb1NhbXBsZSIsImlzVmlkZW8iLCJhbGxTYW1wbGVzQ291bnQiLCJmaWxsZWRTYW1wbGVzQ291bnQiLCJkdXJhdGlvbkF2ZyIsImZpbHRlciIsImR0c0Jhc2UiLCJJbmZpbml0eSIsInNvcnQiLCJhIiwiYiIsInNvcnRlZCIsImlzS2V5ZnJhbWUiLCJuZXh0RHRzIiwiY29uZDEiLCJjb25kMiIsImRpc2NvbnRpbnVlIiwiX2NvbnRleHQiLCJnZXRJbnN0YW5jZSIsInRyYWNrcyIsInJlbXV4ZXIiLCJfZHRzQmFzZSIsInVpbnQ4YXJyYXkiLCJfYnVmZmVyIiwiX2J1ZmZlckluZGV4IiwiX3RvdGFsQnl0ZXMiLCJfdG90YWxCaXRzIiwiX2N1cnJlbnRXb3JkIiwiX2N1cnJlbnRXb3JkQml0c0xlZnQiLCJfZmlsbEN1cnJlbnRXb3JkIiwiYnVmZmVyQnl0ZXNMZWZ0IiwiYnl0ZXNSZWFkIiwibWluIiwid29yZCIsInN1YmFycmF5IiwiRGF0YVZpZXciLCJidWZmZXIiLCJnZXRVaW50MzIiLCJyZWFkQml0cyIsImJpdHMiLCJ2YWx1IiwicmVhZEJvb2wiLCJyZWFkQnl0ZSIsIl9za2lwTGVhZGluZ1plcm8iLCJ6ZXJvQ291bnQiLCJyZWFkVUVHIiwibGVhZGluZ1plcm9zIiwicmVhZFNFRyIsImJ1ZiIsImRhdGF2aWV3IiwiZ2V0SW50MzIiLCJnZXRJbnQxNiIsImdldEludDgiLCJnZXRBbm5leGJOYWxzIiwiZ2V0QXZjY05hbHMiLCJuYWxzIiwiZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIiLCJwb3MiLCJlbmQiLCJoZWFkZXIiLCJoZWFkZXJMZW5ndGgiLCJza2lwIiwidW5pdCIsImJvZHkiLCJhbmFseXNlTmFsIiwibmRyIiwiaWRyIiwic3BzIiwicGFyc2VTUFMiLCJwcHMiLCJTUFNQYXJzZXIiLCJzcmMiLCJzcmNMZW5ndGgiLCJkc3QiLCJkc3RJZHgiLCJyYnNwIiwiX2Vic3AycmJzcCIsImdiIiwiR29sb21iIiwicHJvZmlsZUlkYyIsImxldmVsSWRjIiwicHJvZmlsZV9zdHJpbmciLCJnZXRQcm9maWxlU3RyaW5nIiwibGV2ZWxfc3RyaW5nIiwiZ2V0TGV2ZWxTdHJpbmciLCJjaHJvbWFfZm9ybWF0X2lkYyIsImNocm9tYV9mb3JtYXQiLCJiaXRfZGVwdGgiLCJzY2FsaW5nX2xpc3RfY291bnQiLCJfc2tpcFNjYWxpbmdMaXN0IiwicGljX29yZGVyX2NudF90eXBlIiwibnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZSIsInBpY193aWR0aF9pbl9tYnNfbWludXMxIiwicGljX2hlaWdodF9pbl9tYXBfdW5pdHNfbWludXMxIiwiZnJhbWVfbWJzX29ubHlfZmxhZyIsImZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQiLCJmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCIsImZyYW1lX2Nyb3BfdG9wX29mZnNldCIsImZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCIsInBhcl93aWR0aCIsInBhcl9oZWlnaHQiLCJmcHMiLCJmcHNfZml4ZWQiLCJmcHNfbnVtIiwiZnBzX2RlbiIsImFzcGVjdF9yYXRpb19pZGMiLCJwYXJfd190YWJsZSIsInBhcl9oX3RhYmxlIiwibnVtX3VuaXRzX2luX3RpY2siLCJ0aW1lX3NjYWxlIiwicGFyU2NhbGUiLCJjcm9wX3VuaXRfeCIsImNyb3BfdW5pdF95IiwiY29kZWNfd2lkdGgiLCJjb2RlY19oZWlnaHQiLCJwcmVzZW50X3dpZHRoIiwiY2VpbCIsImNocm9tYV9mb3JtYXRfc3RyaW5nIiwiZ2V0Q2hyb21hRm9ybWF0U3RyaW5nIiwiZnJhbWVfcmF0ZSIsInBhcl9yYXRpbyIsIndpZHRoIiwiaGVpZ2h0IiwiY29kZWNfc2l6ZSIsInByZXNlbnRfc2l6ZSIsImxhc3Rfc2NhbGUiLCJuZXh0X3NjYWxlIiwiZGVsdGFfc2NhbGUiLCJ0b0ZpeGVkIiwiY2hyb21hIiwic3BzQ29uZmlnIiwiY29kZWNXaWR0aCIsImNvZGVjSGVpZ2h0IiwicHJlc2VudFdpZHRoIiwicHJlc2VudEhlaWdodCIsInByb2ZpbGUiLCJsZXZlbCIsImJpdERlcHRoIiwiY2hyb21hRm9ybWF0IiwicGFyUmF0aW8iLCJmcHNEZW4iLCJmcHNOdW0iLCJ0aW1lc2NhbGUiLCJNM1U4UGFyc2VyIiwiVHNEZW11eGVyIiwiUGxheWxpc3QiLCJGbHZEZW11eGVyIiwiREFUQV9UWVBFUyIsIk5VTUJFUiIsIkJPT0xFQU4iLCJTVFJJTkciLCJPQkpFQ1QiLCJNSVhfQVJSQVkiLCJPQkpFQ1RfRU5EIiwiU1RSSUNUX0FSUkFZIiwiREFURSIsIkxPTkVfU1RSSU5HIiwicmVhZE9mZnNldCIsInJlc29sdmUiLCJtZXRhRGF0YSIsInBhcnNlVmFsdWUiLCJib2R5U2l6ZSIsInJlc2V0U3RhdHVzIiwicGFyc2VTdHJpbmciLCJzdHJMZW4iLCJnZXRVaW50MTYiLCJpc0xlIiwic3RyIiwiVVRGOCIsImRlY29kZSIsInBhcnNlRGF0ZSIsImR2IiwidHMiLCJnZXRGbG9hdDY0IiwiRGF0ZSIsInBhcnNlT2JqZWN0IiwiaXNPYmpFbmQiLCJwYXJzZUxvbmdTdHJpbmciLCJBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiZ2V0VWludDgiLCJvYmpFbmRTaXplIiwiYW1mT2JqIiwiaXNPYmplY3RFbmQiLCJhbWZWYXIiLCJhcnJMZW5ndGgiLCJzY3JpcHQiLCJkYXRlIiwibG9uZ1N0ciIsIkRFTVVYX0VWRU5UUyIsIl9maXJzdEZyYWdtZW50TG9hZGVkIiwiX3RyYWNrTnVtIiwiX2hhc1NjcmlwdCIsIkRFTVVYX1NUQVJUIiwiZG9QYXJzZUZsdiIsInN0cmVhbUZsYWciLCJyZXN1bHQiLCJoYXNWaWRlbyIsImhhc0F1ZGlvIiwibG9hZGVyQnVmZmVyIiwiY2h1bmsiLCJsb29wTWF4IiwiX3BhcnNlRmx2VGFnIiwiREVNVVhfQ09NUExFVEUiLCJwYXJzZUZsdkhlYWRlciIsImlzRmx2RmlsZSIsInBsYXlUeXBlIiwiZ2V0UGxheVR5cGUiLCJpbml0VmlkZW9UcmFjayIsImluaXRBdWRpb1RyYWNrIiwiREVNVVhfRVJST1IiLCJWaWRlb1RyYWNrTWV0YSIsIkF1ZGlvVHJhY2tNZXRhIiwiX3BhcnNlRmx2VGFnSGVhZGVyIiwiX3Byb2Nlc3NDaHVuayIsInRhZ1R5cGUiLCJ0aW1lc3RhbXAiLCJ0aW1lc3RhbXBFeHQiLCJfcGFyc2VTY3JpcHREYXRhIiwiX3BhcnNlQUFDRGF0YSIsIl9wYXJzZUhldmNEYXRhIiwiaW5mbyIsIkFNRlBhcnNlciIsIm9uTWV0YURhdGEiLCJtZWRpYUluZm8iLCJoc2FBdWRpbyIsIl9kYXRhc2l6ZVZhbGlkYXRvciIsIk1FRElBX0lORk8iLCJoYXNTcGVjaWZpY0NvbmZpZyIsImF1ZGlvc2FtcGxlcmF0ZSIsInNhbXBsZVJhdGUiLCJhdWRpb2NoYW5uZWxzIiwic2FtcGxlUmF0ZUluZGV4IiwiZnJhbWVyYXRlIiwiX2FhY1NlcXVlbmNlSGVhZGVyUGFyc2VyIiwib2JqZWN0VHlwZSIsIl9zd2l0Y2hBdWRpb1NhbXBsZVJhdGUiLCJmcmFtZUxlbmd0aCIsImRlcGVuZHNPbkNvcmVDb2RlciIsImV4dGVuc2lvbkZsYWdJbmRleCIsImV4dGVuc2lvblNhbXBsaW5nSW5kZXgiLCJjb25maWciLCJ1c2VyQWdlbnQiLCJuYXZpZ2F0b3IiLCJ0b0xvd2VyQ2FzZSIsInNhbXBsaW5nSW5kZXgiLCJpbmRleE9mIiwidHJhY2siLCJmb3JtYXQiLCJfaGFzQXVkaW9TZXF1ZW5jZSIsIl9zd2l0Y2hBdWRpb1NhbXBsaW5nRnJlcXVlbmN5IiwiZnJhbWVMZW50aCIsImF1ZGlvU2FtcGxlUmF0ZSIsImF1ZGlvU2FtcGxlUmF0ZUluZGV4IiwidmFsaWRhdGUiLCJhYWNIZWFkZXIiLCJhdWRpb01lZGlhIiwiTUVUQURBVEFfUEFSU0VEIiwiQVVESU9fTUVUQURBVEFfQ0hBTkdFIiwiX21ldGFDaGFuZ2UiLCJmcmFtZVR5cGUiLCJjb2RlY0lEIiwiYXZjUGFja2V0VHlwZSIsInBhcnNlSW50IiwibmFsdSIsInNpemVzIiwiYXZjY2xlbmd0aCIsIl9hdmNTZXF1ZW5jZUhlYWRlclBhcnNlciIsIl9oYXNWaWRlb1NlcXVlbmNlIiwiVklERU9fTUVUQURBVEFfQ0hBTkdFIiwiY29uZmlndXJhdGlvblZlcnNpb24iLCJhdmNQcm9maWxlSW5kaWNhdGlvbiIsInByb2ZpbGVDb21wYXRpYmlsaXR5IiwiYXZjTGV2ZWxJbmRpY2F0aW9uIiwibmFsVW5pdExlbmd0aCIsIm51bU9mU3BzIiwiaiIsImNvZGVjU3RyaW5nIiwiaCIsInRvU3RyaW5nIiwibnVtT2ZQcHMiLCJ0b1ZpZGVvTWV0YSIsInZpZGVvTWVkaWEiLCJhdmNjIiwic2FtcGxpbmdGcmVxdWVuY3lJbmRleCIsIl9zd2l0Y2hBdWRpb0NoYW5uZWwiLCJkYXRhc2l6ZUNvbmZpcm0iLCJ0ZXh0IiwiYmFzZXVybCIsInNwbGl0IiwicmVmcyIsInJlZiIsIm1hdGNoIiwibmV4dERpc2NvbnRpbnVlIiwicmVmbSIsInJlZmQiLCJ2ZXJzaW9uIiwic2VxdWVuY2UiLCJ0YXJnZXRkdXJhdGlvbiIsInBhcnNlRmxvYXQiLCJwYXJzZUZyYWciLCJwYXJzZURlY3J5cHQiLCJmcmFncyIsImZyZWciLCJuZXh0bGluZSIsImNoYXJBdCIsInVybCIsInVybHMiLCJlbmNyeXB0IiwiY21kIiwibWV0aG9kIiwidXJpIiwiaXYiLCJpdmIiLCJpbSIsInN1YnN0ciIsIlN0cmVhbVR5cGUiLCJjb25maWdzIiwiZGVtdXhpbmciLCJwYXQiLCJwbXQiLCJfaGFzVmlkZW9NZXRhIiwiX2hhc0F1ZGlvTWV0YSIsImRlbXV4IiwiZnJhZyIsImlucHV0QnVmZmVyIiwicGVzZXMiLCJ0c1N0cmVhbSIsIlN0cmVhbSIsInJlYWQiLCJwZXMiLCJwaWQiLCJFUyIsInBheWxvYWQiLCJzdHJlYW0iLCJBdWRpb09wdGlvbnMiLCJWaWRlb09wdGlvbnMiLCJlcGVzZXMiLCJNZXJnZSIsInB1c2hBdWRpb1NhbXBsZSIsInB1c2hWaWRlb1NhbXBsZSIsIl90cmFja3MiLCJmcmVxdWVuY2UiLCJjaGFubmVsIiwiYXVkaW9PYmplY3RUeXBlIiwiYXVkaW9Db25maWciLCJmcmVxdWVuY3lJbmRleCIsIm1ldGFFcXVhbCIsImNvbXBhaXJlTWV0YSIsIkF1ZGlvVHJhY2tTYW1wbGUiLCJnZXROYWx1bml0cyIsInNhbXBsZUxlbmd0aCIsIm5hbCIsInNhclJhdGlvIiwic2FyX3JhdGlvIiwiZ2V0QXZjYyIsIlZpZGVvVHJhY2tTYW1wbGUiLCJkZXN0b3J5IiwiYWwiLCJibCIsImlnbm9yZUR1cmF0aW9uIiwiayIsIml0ZW1hIiwiaXRlbWIiLCJjb21wYWlyZUFycmF5IiwiYnVmZmVycyIsInJlYWRIZWFkZXIiLCJyZWFkUGF5bG9hZCIsInBhY2tldCIsInVua25vd25QSURzIiwiUEVTIiwiUEFUIiwiQ0FUIiwiVFNEVCIsInNvbWUiLCJpdGVtIiwiUE1UIiwic3RzIiwiTWVkaWEiLCJzdHJlYW1UeXBlIiwic3luYyIsInJlYWRVaW50OCIsInJlYWRVaW50MTYiLCJwcmlvcml0eSIsInNjcmFtYmxpbmciLCJhZGFwdGF0aW9uIiwiY29udGludWl0eSIsInRhYmVsSUQiLCJ6ZXJvIiwic2VjdGlvbkxlbmd0aCIsInN0cmVhbUlEIiwic2VjdGlvbk51bWJlciIsImxhc3RTZWN0aW9uTnVtYmVyIiwiTiIsInByb2dyYW1OdW1iZXIiLCJwcm9ncmFtIiwidGFibGVJRCIsIm9yZGVyIiwibGFzdE9yZGVyIiwiUENSX1BJRCIsInByb2dyYW1MZW5ndGgiLCJlcyIsIm1hcCIsImFkYXB0YXRpb25MZW5ndGgiLCJhY2Nlc3MiLCJQQ1IiLCJPUENSIiwic3BsaWNlUG9pbnQiLCJ0cmFuc3BvcnRQcml2YXRlIiwiYWRhcHRhdGlvbkZpZWxkIiwiX3N0YXJ0IiwicHJvZ3JhbUNsb2NrQmFzZSIsInJlYWRVaW50MzIiLCJwcm9ncmFtQ2xvY2tFeHRlbnNpb24iLCJvcmlnaW5Qcm9ncmFtQ2xvY2tCYXNlIiwib3JpZ2luUHJvZ3JhbUNsb2NrRXh0ZW5zaW9uIiwic3BsaWNlQ291bnRkb3duIiwidHJhbnNwb3J0UHJpdmF0ZURhdGEiLCJwaWVjZXdpc2UiLCJzZWFtbGVzcyIsImx0d1ZhbGlkIiwibHR3T2Zmc2V0IiwicmVhZFVpbnQyNCIsInBpZWNld2lzZVJhdGUiLCJyZWFkSW50OCIsInNwbGljZVR5cGUiLCJkdHNOZXh0QVUxIiwibWFya2VyMSIsImR0c05leHRBVTIiLCJtYXJrZXIyIiwiZHRzTmV4dEFVMyIsImxhc3RTdHVmZmluZyIsInBhY2tldExlbmd0aCIsInB0c0RUU0ZsYWciLCJlc2NyRmxhZyIsImVzUmF0ZUZsYWciLCJkc21GbGFnIiwiYWRkaXRpb25hbEZsYWciLCJjcmNGbGFnIiwiZXh0ZW5zaW9uRmxhZyIsInBlc0hlYWRlckxlbmd0aCIsIk4xIiwiZXNjciIsImV4IiwiZXNSYXRlIiwiYWRkaXRpb25hbENvcHlJbmZvIiwicGVzQ1JDIiwiYmFjayIsImZxIiwibGF5ZXIiLCJhYnNlbnQiLCJnZXRBdWRpb0NvbmZpZyIsInNlY3Rpb25JbmRpY2F0b3IiLCJjdXJyZW50TmV4dEluZGljYXRvciIsImNyYzMyIiwiZXh0ZW5zaW9uU2FtcGxlSW5kZXgiLCJ0ZXN0IiwiaW5wdXRidWZmZXIiLCJfYmFzZVVSTCIsIl9saXN0IiwiX3RzIiwiZnJhZ0xlbmd0aCIsIl9sYXN0Z2V0IiwiX2F1ZG9jbGVhciIsImF1dG9jbGVhciIsImJhc2VVUkwiLCJkb3dubG9hZGVkIiwiZG93bmxvYWRpbmciLCJkZWxldGVGcmFnIiwidGltZSIsInB1c2hNM1U4IiwiZGVsZXRlcHJlIiwibmV3ZnJhZ2xpc3QiLCJ0c2xpc3QiLCJnZXRUc0xpc3QiLCJ0c25hbWUiLCJpc2xvYWRlZCIsImxvYWRpbmciLCJnZXRUc0J5TmFtZSIsImdldFRzIiwidGltZWxpc3QiLCJjbGVhckRvd25sb2FkZWQiLCJGZXRjaExvYWRlciIsInN0YXR1cyIsIl9yZWFkZXIiLCJfY2FuY2VsZWQiLCJfZGVzdHJveWVkIiwicmVhZHR5cGUiLCJfbG9hZGVyVGFza05vIiwiTEFERVJfU1RBUlQiLCJsb2FkIiwib3B0cyIsIl90aGlzIiwicGFyYW1zIiwiZ2V0UGFyYW1zIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsIl9vbkZldGNoUmVzcG9uc2UiLCJMT0FERVJfRVJST1IiLCJjYXRjaCIsInRhc2tubyIsImpzb24iLCJhcnJheUJ1ZmZlciIsIl9vblJlYWRlciIsImdldFJlYWRlciIsInJlYWRlciIsImNhbmNlbCIsImUiLCJ2YWwiLCJkb25lIiwiTE9BREVSX0RBVEFMT0FERUQiLCJoZWFkZXJzIiwiSGVhZGVycyIsImNhY2hlIiwiY29uZmlnSGVhZGVycyIsImFwcGVuZCIsIm9wdEhlYWRlcnMiLCJjb3JzIiwid2l0aENyZWRlbnRpYWxzIiwiY3JlZGVudGlhbHMiLCJNcDRSZW11eGVyIiwiRm1wNCIsIkJ1ZmZlciIsIndyaXRlVWludDMyIiwiY29udGVudCIsIndyaXRlIiwiZmxhZyIsImluaXRCb3giLCJ0cmFrIiwibXZoZCIsInZpZGVvVHJhayIsImF1ZGlvVHJhayIsIm12ZXgiLCJmb3JFYWNoIiwiYnl0ZXMiLCJ0a2hkIiwibWRpYSIsInNhbXBsZXJhdGUiLCJtZWRpYVRpbWUiLCJtZGhkIiwiaGRsciIsIm1pbmYiLCJleHRlbnNpb24iLCJzcGxpY2UiLCJ2bWhkIiwic21oZCIsImRpbmYiLCJzdGJsIiwic3RzZCIsInN0dHMiLCJzdHNjIiwic3RzeiIsInN0Y28iLCJtcDRhIiwiYXZjMSIsImVzZHMiLCJjb25maWdsZW4iLCJoU3BhY2luZyIsInZTcGFjaW5nIiwiYnRydCIsInBhc3AiLCJ0cmFja0lEIiwibWVoZCIsInRyZXgiLCJtZmhkIiwidHJhZiIsInRmaGQiLCJ0ZmR0Iiwic2R0cCIsInRydW4iLCJzZHRwTGVuZ3RoIiwic2FtcGxlQ291bnQiLCJmbGFncyIsImlzTGVhZGluZyIsImRlcGVuZHNPbiIsImlzRGVwZW5kZWRPbiIsImhhc1JlZHVuZGFuY3kiLCJpc05vblN5bmMiLCJudW0iLCJtZGF0Qm94IiwiY2hhckNvZGVBdCIsIl9pc0R0c0Jhc2VJbml0ZWQiLCJfYXVkaW9OZXh0RHRzIiwiX3ZpZGVvTmV4dER0cyIsIl92aWRlb1NlZ21lbnRMaXN0IiwiTWVkaWFTZWdtZW50TGlzdCIsIl9hdWRpb1NlZ21lbnRMaXN0IiwiYnJvd3NlciIsInNuaWZmZXIiLCJfZmlsbFNpbGVuY2VGcmFtZSIsImlzRmlyc3RWaWRlbyIsImlzRmlyc3RBdWRpbyIsInZpZGVvQWxsRHVyYXRpb24iLCJhdWRpb0FsbER1cmF0aW9uIiwicmVtdXgiLCJSRU1VWF9NRVRBREFUQSIsIm9uTWV0YURhdGFSZWFkeSIsIkRFVEVDVF9DSEFOR0VfU1RSRUFNIiwicmVzZXREdHNCYXNlIiwiX2R0c0Jhc2VJbml0ZWQiLCJjYWxjRHRzQmFzZSIsIl9yZW11eFZpZGVvIiwiX3JlbXV4QXVkaW8iLCJzZWVrIiwicHJlc291cmNlYnVmZmVyIiwicmVtdXhJbml0U2VnbWVudCIsIklOSVRfU0VHTUVOVCIsImluaXRTZWdtZW50IiwiZnR5cCIsIm1vb3YiLCJhdWRpb0Jhc2UiLCJ2aWRlb0Jhc2UiLCJtcDRTYW1wbGVzIiwibWF4TG9vcCIsImF2Y1NhbXBsZSIsIm1kYXRTYW1wbGUiLCJzYW1wbGVEdXJhdGlvbiIsInZpZGVvTWV0YSIsIlJBTkRPTV9BQ0NFU1NfUE9JTlQiLCJtb29mTWRhdCIsIm1vb2YiLCJtZGF0Iiwid3JpdGVUb1NvdXJjZSIsIk1FRElBX1NFR01FTlQiLCJsYXN0U2FtcGxlIiwiaXNGaXJzdER0c0luaXRlZCIsImF1ZGlvTWV0YSIsIm1wNFNhbXBsZSIsImluaXRTaWxlbnRBdWRpbyIsIl9hdWRpb01ldGEiLCJDb250ZXh0IiwiV09SS0VSX0NPTU1BTkRTIiwiTWVkaWFJbmZvIiwiTWVkaWFTYW1wbGUiLCJNZWRpYVNlZ21lbnQiLCJNc2UiLCJDcnlwdG8iLCJSZXN1bHRDb25zdHJ1Y3RvciIsInRvdGFsTGVuZ3RoIiwiX2xlbiIsImFycmF5cyIsIl9rZXkiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiaXRlcmF0b3IiLCJyZXR1cm4iLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJfYXJyIiwib2JqIiwiX2NvbmNhdDIiLCJSRU1VWF9FUlJPUiIsIk1TRV9FVkVOVFMiLCJTT1VSQ0VfVVBEQVRFX0VORCIsIkhMU19FVkVOVFMiLCJSRVRSWV9USU1FX0VYQ0VFREVEIiwiQUxMRVZFTlRTIiwiRmx2QWxsb3dlZEV2ZW50cyIsIkhsc0FsbG93ZWRFdmVudHMiLCJDUllUT19FVkVOVFMiLCJTVEFSVF9ERUNSWVBUIiwiREVDUllQVEVEIiwiQ09OVEVYVF9DT01PTUFORFMiLCJPTiIsIk9OQ0UiLCJPRkYiLCJFTUlUIiwiREVTVFJPWSIsIkRJUkVDVF9FTUlUX0ZMQUciLCJhbGxvd2VkRXZlbnRzIiwiX2VtaXR0ZXIiLCJfaW5zdGFuY2VNYXAiLCJfY2xzTWFwIiwiX2luaXRlZCIsIl9ob29rcyIsInRhZyIsImluaXRJbnN0YW5jZSIsIm5ld0luc3RhbmNlIiwicmVnaXN0cnkiLCJjbHMiLCJjaGVja01lc3NhZ2VOYW1lIiwiX2lzTWVzc2FnZU5hbWVWYWxpZCIsInNlbGYiLCJvbmNlTGlzdGVuZXJzIiwibWVzc2FnZU5hbWUiLCJjYWxsYmFjayIsImJlZm9yZUxpc3QiLCJlbWl0VG8iLCJyZW1vdmVMaXN0ZW5lcnMiLCJoYXNPd24iLCJjYWxsYmFja3MiLCJkZXN0cm95SW5zdGFuY2VzIiwib3V0cHV0QnVmZmVyIiwib3V0cHV0YnVmZmVyIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJkZWNyaXB0IiwiYWVza2V5IiwiZGVjcmlwdERhdGEiLCJzdWJ0bGUiLCJpbXBvcnRLZXkiLCJkZWNyeXB0IiwicmVzIiwibGUiLCJzZXRJbnQxNiIsIkludDE2QXJyYXkiLCJvcyIsImlzUGMiLCJpc1RhYmxldCIsInVhIiwicmVnIiwiaWUiLCJmaXJmb3giLCJjaHJvbWUiLCJvcGVyYSIsInNhZmFyaSIsImlzV2luZG93c1Bob25lIiwiaXNTeW1iaWFuIiwiaXNBbmRyb2lkIiwiaXNGaXJlRm94IiwiaXNQaG9uZSIsIm91dCIsImlucHV0IiwiZnJvbUNoYXJDb2RlIiwiX2NoZWNrQ29udGludWF0aW9uIiwidWNzNCIsImpvaW4iLCJjaGVja0xlbmd0aCIsImlzT2JqZWN0RmlsbGVkIiwibWltZVR5cGUiLCJpc0NvbXBsZXRlIiwiaXNCYXNlSW5mb1JlYWR5IiwiaXNWaWRlb1JlYWR5IiwiaXNBdWRpb1JlYWR5IiwiX2RlZmF1bHQiLCJnZXREZWZhdWx0SW5mIiwiZW50cmllcyIsInYiLCJpc1JBUCIsIl90eXBlIiwiX2xhc3RBcHBlbmRMb2NhdGlvbiIsImlzRW1wdHkiLCJfc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUiLCJiZWdpbkR0cyIsImxhc3QiLCJtaWQiLCJsYm91bmQiLCJ1Ym91bmQiLCJpZHgiLCJfc2VhcmNoTmVhcmVzdFNlZ21lbnRBZnRlciIsInNlZ21lbnQiLCJsYXN0QXBwZW5kSWR4IiwiaW5zZXJ0SWR4Iiwib3JpZ2luU3RhcnREdHMiLCJnZXRMYXN0U2VnbWVudEJlZm9yZSIsImdldExhc3RTYW1wbGVCZWZvcmUiLCJnZXRMYXN0UkFQQmVmb3JlIiwic2VnbWVudElkeCIsInJhbmRvbUFjY2Vzc1BvaW50cyIsInN0YXJ0RHRzIiwiZW5kRHRzIiwic3RhcnRQdHMiLCJlbmRQdHMiLCJvcmlnaW5FbmREdHMiLCJhZGRSQVAiLCJnZXREZWZhdWx0IiwiTVNFIiwiY29udGFpbmVyIiwibWVkaWFTb3VyY2UiLCJzb3VyY2VCdWZmZXJzIiwicHJlbG9hZFRpbWUiLCJvblNvdXJjZU9wZW4iLCJvblRpbWVVcGRhdGUiLCJvblVwZGF0ZUVuZCIsIm9uV2FpdGluZyIsIk1lZGlhU291cmNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImFkZFNvdXJjZUJ1ZmZlcnMiLCJkb0FwcGVuZCIsInJlYWR5U3RhdGUiLCJhZGQiLCJkdXIiLCJtaW1lIiwic291cmNlQnVmZmVyIiwiYWRkU291cmNlQnVmZmVyIiwidXBkYXRpbmciLCJpbml0ZWQiLCJhcHBlbmRCdWZmZXIiLCJlbmRPZlN0cmVhbSIsImFjdGl2ZVNvdXJjZUJ1ZmZlcnMiLCJyZW1vdmUiLCJyZW1vdmVCdWZmZXJzIiwidGFza0xpc3QiLCJ0YXNrIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlByb21pc2UiLCJkb0NsZWFuQnVmZmVyIiwicmV0cnlUaW1lIiwiY2xlYW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJCdWZmZXIiLCJhbGwiLCJyZW1vdmVTb3VyY2VCdWZmZXIiLCJyZXZva2VPYmplY3RVUkwiLCJidWZmZXJlZCIsImJFbmQiLCJ0ZW1wIiwiaGV4TnVtIiwicGFkU3RhcnQiLCJsb29wIiwic2lnbiIsInJlYWRVaW50NjQiLCJyZWFkSW50MTYiLCJyZWFkSW50MzIiLCJMb2dnZXIiLCJwbGF5ZXIiLCJfcGxheWVyIiwiaW5pdFNlZ21lbnRBcnJpdmVkIiwiYnVmZmVyQ2xlYXJUaW1lciIsIlJlbXV4ZXIiLCJjb21wYXRpYmlsaXR5IiwibXNlIiwiX2hhbmRsZVRpbWVVcGRhdGUiLCJpbml0TGlzdGVuZXJzIiwiX2hhbmRsZUxvYWRlckRhdGFMb2FkZWQiLCJfaGFuZGxlTmV0d29ya0Vycm9yIiwiX2hhbmRsZU1lZGlhSW5mbyIsIl9oYW5kbGVNZXRhZGF0YVBhcnNlZCIsIl9oYW5kbGVEZW11eENvbXBsZXRlIiwiX2hhbmRsZURlbXV4RXJyb3IiLCJfaGFuZGxlQXBwZW5kSW5pdFNlZ21lbnQiLCJfaGFuZGxlTWVkaWFTZWdtZW50IiwiX2hhbmRsZUFkZFJBUCIsIl9oYW5kbGVTb3VyY2VVcGRhdGVFbmQiLCJjdXJyZW50VGltZSIsImJ1ZmZlckVuZCIsInJhbmdlIiwiYnVmZmVyU3RhcnQiLCJyYXAiLCJsb2ciLCJQbGF5ZXIiLCJFcnJvcnMiLCJfb25FcnJvciIsImZhdGFsIiwibW9kIiwiZXJyb3JUeXBlIiwiZXJyb3JEZXRhaWxzIiwiZXJyb3JGYXRhbCIsImxvYWREYXRhIiwicGF1c2UiLCJsb2FkZXIiLCJmbHZBbGxvd2VkRXZlbnRzIiwiRmx2UGxheWVyIiwiaW5pdEV2ZW50cyIsImxvYWRlckNvbXBsZXRlVGltZXIiLCJpbml0Rmx2IiwiZmx2IiwiaW5pdEZsdkV2ZW50cyIsInV0aWwiLCJhZGRDbGFzcyIsImZpbmREb20iLCJsaXZlIiwiY3JlYXRlRG9tIiwiY29udHJvbHMiLCJhcHBlbmRDaGlsZCIsInBhdXNlZCIsInNldEludGVydmFsIiwiZ2V0QnVmZmVyZWRSYW5nZSIsImNsZWFySW50ZXJ2YWwiLCJGTFYiLCJwbGF5IiwiX2hhc1N0YXJ0IiwiX2Rlc3Ryb3kiLCJjdXJyZW50U3JjIiwiZiIsImciLCJfIiwieSIsIkUiLCJTIiwiQSIsIlQiLCJEIiwieCIsIkwiLCJPIiwiTSIsIkIiLCJpc0xpdmUiLCJoYW5kbGVUaW1lVXBkYXRlIiwiaGFuZGxlU2VlayIsImxvYWROZXh0IiwidSIsInJhbmdlU3VwcG9ydCIsInRpbWVzIiwiTUFYX1NBRkVfSU5URUdFUiIsImZpbGVwb3NpdGlvbnMiLCJsb2FkTWV0YSIsImlzU2Vla2FibGUiLCJnZXRTZWVrUmFuZ2UiLCJjb21wYXQiLCJnZXROZXh0UmFuZ2UiLCJSYW5nZSIsImxvYWRGYWxsYmFjayIsImtleWZyYW1lcyIsImZpbmRGaWxlUG9zaXRpb24iLCJGbHZMaXZlUGxheWVyIiwiRmx2Vm9kUGxheWVyIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsRUFBUUcsUUFBUSxhQUNSLG1CQUFYQyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sQ0FBQyxZQUFhSixHQUNLLGlCQUFaQyxRQUNkQSxRQUFRLGdCQUFrQkQsRUFBUUcsUUFBUSxhQUUxQ0osRUFBSyxnQkFBa0JDLEVBQVFELEVBQWUsVUFSaEQsQ0FTR08sUUFBUSxTQUFTQyxHQUNwQixPLFlDVEUsSUFBSUMsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixP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QU0sR0FBTSxNQUNoRCxHQUFxQixJQUFqQmtDLEVBQ1QsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEdBQU0sRUFBTSxHQUFNLElBQU0sRUFBTSxHQUFNLEVBQU0sR0FBTSxNQUNsRSxHQUFxQixJQUFqQmtDLEVBQ1QsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEVBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxJQUFNLEVBQU0sR0FBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLE1BQzFGLEdBQXFCLElBQWpCa0MsRUFDVCxPQUFPLElBQUlsQyxXQUFXLENBQUMsRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxHQUFNLEdBQU0sRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxFQUFNLEtBQ3hILEdBQXFCLElBQWpCa0MsRUFDVCxPQUFPLElBQUlsQyxXQUFXLENBQUMsRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxHQUFNLEdBQU0sRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLEdBQU0sSUFBTSxFQUFNLEtBQzFJLEdBQXFCLElBQWpCa0MsRUFDVCxPQUFPLElBQUlsQyxXQUFXLENBQUMsRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxHQUFNLEdBQU0sRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLEdBQU0sSUFBTSxFQUFNLEVBQU0sSUFBTSxFQUFNLEdBQU0sRUFBTSxVQUUxSyxDQUVMLEdBQXFCLElBQWpCa0MsRUFFRixPQUFPLElBQUlsQyxXQUFXLENBQUMsRUFBSyxHQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sRUFBSyxFQUFLLEVBQUssRUFBSyxHQUFNLEVBQUssSUFBTSxJQUFNLEdBQUssR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0s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QUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLElBQUksRUFBRSxFQUFFLEtBQUssR0FBRyxJQUFJMUgsRUFBRSxPQUFPLElBQUkwSCxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFLEtBQUssR0FBRyxJQUFJMUgsRUFBRSxPQUFPLElBQUkwSCxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRyxJQUFJMUgsRUFBRSxPQUFPLElBQUkwSCxXQUFXLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsSUFBSTFILEVBQUUsT0FBTyxJQUFJMEgsV0FBVyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcs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d0IsRUFBRSxJQUFJbXhCLFFBQVFwdkIsRUFBRSxDQUFDd2lCLE9BQU8sTUFBTTJNLFFBQVFseEIsRUFBRW1CLEtBQUssT0FBT2l3QixNQUFNLFdBQVcsR0FBRyxpQkFBaUJsdUIsS0FBSzRoQixRQUFRb00sUUFBUSxDQUFDLElBQUlKLEVBQUU1dEIsS0FBSzRoQixRQUFRb00sUUFBUSxJQUFJLElBQUlod0IsS0FBSzR2QixFQUFFQSxFQUFFanZCLGVBQWVYLElBQUlsQixFQUFFc3hCLE9BQU9wd0IsRUFBRTR2QixFQUFFNXZCLElBQUksR0FBRyxpQkFBaUJBLEVBQUVnd0IsUUFBUSxDQUFDLElBQUlKLEVBQUU1dkIsRUFBRWd3QixRQUFRLElBQUksSUFBSWh3QixLQUFLNHZCLEVBQUVBLEVBQUVqdkIsZUFBZVgsSUFBSWxCLEVBQUVzeEIsT0FBT3B3QixFQUFFNHZCLEVBQUU1dkIsSUFBSSxPQUFNLElBQUtBLEVBQUVzd0IsT0FBT3p2QixFQUFFWixLQUFLLGVBQWVELEVBQUV1d0Isa0JBQWtCMXZCLEVBQUUydkIsWUFBWSxXQUFXM3ZCLEVBQUUsU0FBUyxHQUFHbUIsS0FBS21zQixRQUFRLENBQUMsSUFBSW5zQixLQUFLbXNCLFFBQVF3QixTQUFTLE1BQU1DLElBQUk1dEIsS0FBS21zQixRQUFRLEtBQUtuc0IsS0FBSzRyQixTQUFRLEVBQUc1ckIsS0FBS29zQixXQUFVLEdBQUksVUFBVXBzQixLQUFLcXNCLFlBQVcsRUFBR3JzQixLQUFLMnRCLGdCOzs7OzJEQ0F4ajNFLEksSUFBQSxpRSxJQUNBLCtELG1EQVlBdHhCLEVBQU9ELFFBVEwsV0FBYTRnQixHQUNYLE8sNEZBRG1CLFNBQ2ZBLEVBQU9pcEIsT0FDRixJQUFJa0IsVUFBY25xQixHQUVsQixJQUFJb3FCLFVBQWFwcUIsSzs7Ozs7Ozs7NENDUjlCM2dCLEVBQU9ELFFBQVVNIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwieGdwbGF5ZXJcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wieGdwbGF5ZXJcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wieGdwbGF5ZXItZmx2XCJdID0gZmFjdG9yeShyZXF1aXJlKFwieGdwbGF5ZXJcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInhncGxheWVyLWZsdlwiXSA9IGZhY3Rvcnkocm9vdFtcInhncGxheWVyXCJdKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV94Z3BsYXllcl9fKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwieGdwbGF5ZXJcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wieGdwbGF5ZXJcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wieGdwbGF5ZXItZmx2XCJdID0gZmFjdG9yeShyZXF1aXJlKFwieGdwbGF5ZXJcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInhncGxheWVyLWZsdlwiXSA9IGZhY3Rvcnkocm9vdFtcInhncGxheWVyXCJdKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV94Z3BsYXllcl9fKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XG4gICAgfVxuICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gIH1cbn0pO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB9IGVsc2UgaWYgKHByZXBlbmQpIHtcbiAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIG0gPSAkZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIC8vIE5vIGVycm9yIGNvZGUgZm9yIHRoaXMgc2luY2UgaXQgaXMgYSBXYXJuaW5nXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyBTdHJpbmcodHlwZSkgKyAnIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0Jyk7XG4gICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgUmVmbGVjdEFwcGx5KHRoaXMubGlzdGVuZXIsIHRoaXMudGFyZ2V0LCBhcmdzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID9cbiAgICB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0T3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgVHJhY2s6IHJlcXVpcmUoJy4vc3JjL3RyYWNrJykuZGVmYXVsdCxcbiAgVHJhY2tzOiByZXF1aXJlKCcuL3NyYy90cmFjaycpLlRyYWNrcyxcbiAgQXVkaW9UcmFjazogcmVxdWlyZSgnLi9zcmMvdHJhY2snKS5BdWRpb1RyYWNrLFxuICBWaWRlb1RyYWNrOiByZXF1aXJlKCcuL3NyYy90cmFjaycpLlZpZGVvVHJhY2ssXG5cbiAgWGdCdWZmZXI6IHJlcXVpcmUoJy4vc3JjL2J1ZmZlcicpLlhnQnVmZmVyLFxuICBSZW11eEJ1ZmZlcjogcmVxdWlyZSgnLi9zcmMvYnVmZmVyJykuUmVtdXhCdWZmZXIsXG5cbiAgUHJlU291cmNlOiByZXF1aXJlKCcuL3NyYy9wcmVzb3VjZScpLmRlZmF1bHRcbn07XG4iLCJleHBvcnQgY2xhc3MgWGdCdWZmZXIge1xuICAvKipcbiAgICogQSBidWZmZXIgdG8gc3RvcmUgbG9hZGVkIGRhdGEuXG4gICAqXG4gICAqIEBjbGFzcyBMb2FkZXJCdWZmZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIE9wdGlvbmFsIHRoZSBidWZmZXIgc2l6ZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGxlbmd0aCkge1xuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoIHx8IDBcbiAgICB0aGlzLmhpc3RvcnlMZW4gPSBsZW5ndGggfHwgMFxuICAgIHRoaXMuYXJyYXkgPSBbXVxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiB0byBwdXNoIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRhIC0gVGhlIGRhdGEgdG8gcHVzaCBpbnRvIHRoZSBidWZmZXJcbiAgICovXG4gIHB1c2ggKGRhdGEpIHtcbiAgICB0aGlzLmFycmF5LnB1c2goZGF0YSlcbiAgICB0aGlzLmxlbmd0aCArPSBkYXRhLmJ5dGVMZW5ndGhcbiAgICB0aGlzLmhpc3RvcnlMZW4gKz0gZGF0YS5ieXRlTGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIHNoaWZ0IGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBUaGUgc2l6ZSBvZiBzaGlmdC5cbiAgICovXG4gIHNoaWZ0IChsZW5ndGgpIHtcbiAgICBpZiAodGhpcy5hcnJheS5sZW5ndGggPCAxKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMClcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zaGlmdEJ1ZmZlcigpXG4gICAgfVxuICAgIGlmICgodGhpcy5vZmZzZXQgKyBsZW5ndGgpID09PSB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgbGV0IHJldCA9IHRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKVxuICAgICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgICB0aGlzLmFycmF5LnNoaWZ0KClcbiAgICAgIHRoaXMubGVuZ3RoIC09IGxlbmd0aFxuICAgICAgcmV0dXJuIHJldFxuICAgIH1cblxuICAgIGlmICgodGhpcy5vZmZzZXQgKyBsZW5ndGgpIDwgdGhpcy5hcnJheVswXS5sZW5ndGgpIHtcbiAgICAgIGxldCByZXQgPSB0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aClcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aFxuICAgICAgdGhpcy5sZW5ndGggLT0gbGVuZ3RoXG4gICAgICByZXR1cm4gcmV0XG4gICAgfVxuXG4gICAgbGV0IHJldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICBsZXQgdG1wb2ZmID0gMFxuICAgIHdoaWxlICh0aGlzLmFycmF5Lmxlbmd0aCA+IDAgJiYgbGVuZ3RoID4gMCkge1xuICAgICAgaWYgKCh0aGlzLm9mZnNldCArIGxlbmd0aCkgPCB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgICBsZXQgdG1wID0gdGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW5ndGgpXG4gICAgICAgIHJldC5zZXQodG1wLCB0bXBvZmYpXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aFxuICAgICAgICB0aGlzLmxlbmd0aCAtPSBsZW5ndGhcbiAgICAgICAgbGVuZ3RoID0gMFxuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ21hcmsxJylcbiAgICAgICAgbGV0IHRlbXBsZW5ndGggPSB0aGlzLmFycmF5WzBdLmxlbmd0aCAtIHRoaXMub2Zmc2V0XG4gICAgICAgIHJldC5zZXQodGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5hcnJheVswXS5sZW5ndGgpLCB0bXBvZmYpXG4gICAgICAgIHRoaXMuYXJyYXkuc2hpZnQoKVxuICAgICAgICB0aGlzLm9mZnNldCA9IDBcbiAgICAgICAgdG1wb2ZmICs9IHRlbXBsZW5ndGhcbiAgICAgICAgdGhpcy5sZW5ndGggLT0gdGVtcGxlbmd0aFxuICAgICAgICBsZW5ndGggLT0gdGVtcGxlbmd0aFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gY2xlYXIgdGhlIGJ1ZmZlci5cbiAgICovXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLmFycmF5ID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuY2xlYXIoKVxuICAgIHRoaXMuaGlzdG9yeUxlbiA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBzaGlmdCBvbmUgdW5pdDhBcnJheS5cbiAgICovXG4gIF9zaGlmdEJ1ZmZlciAoKSB7XG4gICAgdGhpcy5sZW5ndGggLT0gdGhpcy5hcnJheVswXS5sZW5ndGhcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICByZXR1cm4gdGhpcy5hcnJheS5zaGlmdCgpXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCB1aW50OCBkYXRhIHRvIG51bWJlci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gdGhlIHN0YXJ0IHBvc3Rpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSB0aGUgbGVuZ3RoIG9mIGRhdGEuXG4gICAqL1xuICB0b0ludCAoc3RhcnQsIGxlbmd0aCkge1xuICAgIGxldCByZXRJbnQgPSAwXG4gICAgbGV0IGkgPSB0aGlzLm9mZnNldCArIHN0YXJ0XG4gICAgd2hpbGUgKGkgPCB0aGlzLm9mZnNldCArIGxlbmd0aCArIHN0YXJ0KSB7XG4gICAgICBpZiAoaSA8IHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSB7XG4gICAgICAgIHJldEludCA9IHJldEludCAqIDI1NiArIHRoaXMuYXJyYXlbMF1baV1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hcnJheVsxXSkge1xuICAgICAgICByZXRJbnQgPSByZXRJbnQgKiAyNTYgKyB0aGlzLmFycmF5WzFdW2kgLSB0aGlzLmFycmF5WzBdLmxlbmd0aF1cbiAgICAgIH1cblxuICAgICAgaSsrXG4gICAgfVxuICAgIHJldHVybiByZXRJbnRcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVtdXhCdWZmZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy52aWRlbyA9IFtdXG4gICAgdGhpcy5hdWRpbyA9IFtdXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLnZpZGVvID0gW11cbiAgICB0aGlzLmF1ZGlvID0gW11cbiAgfVxufVxuIiwiY2xhc3MgU291cmNlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMubWltZXR5cGUgPSAnJztcbiAgICB0aGlzLmluaXQgPSBudWxsO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICB9XG59XG5cbmNsYXNzIFByZVNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnNvdXJjZXMgPSB7fTtcbiAgfVxuXG4gIGdldFNvdXJjZSAoc291cmNlKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc1tzb3VyY2VdO1xuICB9XG5cbiAgY3JlYXRlU291cmNlIChuYW1lKSB7XG4gICAgdGhpcy5zb3VyY2VzW25hbWVdID0gbmV3IFNvdXJjZSgpO1xuICAgIHJldHVybiB0aGlzLnNvdXJjZXNbbmFtZV07XG4gIH1cblxuICBjbGVhciAoKSB7XG4gICAgdGhpcy5zb3VyY2VzID0ge307XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLnNvdXJjZXMgPSB7fTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcmVTb3VyY2U7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFjayB7XG4gIC8qKlxuICAgKiBUaGUgY29uc3RydWN0b3IuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5pZCA9IC0xXG4gICAgdGhpcy5zZXF1ZW5jZU51bWJlciA9IDBcbiAgICB0aGlzLnNhbXBsZXMgPSBbXVxuICAgIHRoaXMuZHJvcHBlZFNhbXBsZXMgPSBbXVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSB0cmFjay5cbiAgICovXG4gIHJlc2V0ICgpIHtcbiAgICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gMFxuICAgIHRoaXMuc2FtcGxlcyA9IFtdXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gIH1cbiAgLyoqXG4gICAqIGRlc3Ryb3kgdGhlIHRyYWNrLlxuICAgKi9cbiAgZGlzdHJveSAoKSB7XG4gICAgdGhpcy5yZXNldCgpXG4gICAgdGhpcy5pZCA9IC0xXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2sgZXh0ZW5kcyBUcmFjayB7XG4gIC8qKlxuICAgKiBUaGUgY29uc3RydWN0b3IgZm9yIGF1ZGlvIHRyYWNrLlxuICAgKi9cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLlRBRyA9ICdBdWRpb1RyYWNrJ1xuICAgIHRoaXMudHlwZSA9ICdhdWRpbydcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmlkZW9UcmFjayBleHRlbmRzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3RvciBmb3IgdmlkZW8gdHJhY2suXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuVEFHID0gJ1ZpZGVvVHJhY2snXG4gICAgdGhpcy50eXBlID0gJ3ZpZGVvJ1xuICAgIHRoaXMuZHJvcHBlZCA9IDBcbiAgfVxuICAvKipcbiAgICogcmVzZXQgdGhlIHZpZGVvIHRyYWNrLlxuICAgKi9cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMuc2VxdWVuY2VOdW1iZXIgPSAwXG4gICAgdGhpcy5zYW1wbGVzID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgICB0aGlzLmRyb3BwZWQgPSAwXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRyYWNrcyB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmF1ZGlvVHJhY2sgPSBudWxsXG4gICAgdGhpcy52aWRlb1RyYWNrID0gbnVsbFxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5hdWRpb1RyYWNrID0gbnVsbFxuICAgIHRoaXMudmlkZW9UcmFjayA9IG51bGxcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIE5hbHVuaXQ6IHJlcXVpcmUoJy4vc3JjL2gyNjQvbmFsdW5pdCcpLmRlZmF1bHQsXG4gIFNwc1BhcnNlcjogcmVxdWlyZSgnLi9zcmMvaDI2NC9uYWx1bml0L3NwcycpLmRlZmF1bHQsXG5cbiAgQ29tcGF0aWJpbGl0eTogcmVxdWlyZSgnLi9zcmMvY29tcGF0aWJpbGl0eScpLmRlZmF1bHRcbn07XG4iLCJcbmNsYXNzIEFBQyB7XG5cbiAgc3RhdGljIGdldFNpbGVudEZyYW1lKGNvZGVjLCBjaGFubmVsQ291bnQpIHtcbiAgICBpZiAoY29kZWMgPT09ICdtcDRhLjQwLjInKSB7XG4gICAgICAvLyBoYW5kbGUgTEMtQUFDXG4gICAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMywgMHg4MF0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDIxLCAweDAwLCAweDQ5LCAweDkwLCAweDAyLCAweDE5LCAweDAwLCAweDIzLCAweDgwXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMykge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4OGVdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA0KSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MCwgMHgyYywgMHg4MCwgMHgwOCwgMHgwMiwgMHgzOF0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgyLCAweDMwLCAweDA0LCAweDk5LCAweDAwLCAweDIxLCAweDkwLCAweDAyLCAweDM4XSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNikge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MDAsIDB4YjIsIDB4MDAsIDB4MjAsIDB4MDgsIDB4ZTBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaGFuZGxlIEhFLUFBQyAobXA0YS40MC41IC8gbXA0YS40MC4yOSlcbiAgICAgIGlmIChjaGFubmVsQ291bnQgPT09IDEpIHtcbiAgICAgICAgLy8gZmZtcGVnIC15IC1mIGxhdmZpIC1pIFwiYWV2YWxzcmM9MDpkPTAuMDVcIiAtYzphIGxpYmZka19hYWMgLXByb2ZpbGU6YSBhYWNfaGUgLWI6YSA0ayBvdXRwdXQuYWFjICYmIGhleGR1bXAgLXYgLWUgJzE2LzEgXCIweCV4LFwiIFwiXFxuXCInIC12IG91dHB1dC5hYWNcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDEsIDB4NDAsIDB4MjIsIDB4ODAsIDB4YTMsIDB4NGUsIDB4ZTYsIDB4ODAsIDB4YmEsIDB4OCwgMHgwLCAweDAsIDB4MCwgMHgxYywgMHg2LCAweGYxLCAweGMxLCAweGEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWVdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICAgIC8vIGZmbXBlZyAteSAtZiBsYXZmaSAtaSBcImFldmFsc3JjPTB8MDpkPTAuMDVcIiAtYzphIGxpYmZka19hYWMgLXByb2ZpbGU6YSBhYWNfaGVfdjIgLWI6YSA0ayBvdXRwdXQuYWFjICYmIGhleGR1bXAgLXYgLWUgJzE2LzEgXCIweCV4LFwiIFwiXFxuXCInIC12IG91dHB1dC5hYWNcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDEsIDB4NDAsIDB4MjIsIDB4ODAsIDB4YTMsIDB4NWUsIDB4ZTYsIDB4ODAsIDB4YmEsIDB4OCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDk1LCAweDAsIDB4NiwgMHhmMSwgMHhhMSwgMHhhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVlXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMykge1xuICAgICAgICAvLyBmZm1wZWcgLXkgLWYgbGF2ZmkgLWkgXCJhZXZhbHNyYz0wfDB8MDpkPTAuMDVcIiAtYzphIGxpYmZka19hYWMgLXByb2ZpbGU6YSBhYWNfaGVfdjIgLWI6YSA0ayBvdXRwdXQuYWFjICYmIGhleGR1bXAgLXYgLWUgJzE2LzEgXCIweCV4LFwiIFwiXFxuXCInIC12IG91dHB1dC5hYWNcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDEsIDB4NDAsIDB4MjIsIDB4ODAsIDB4YTMsIDB4NWUsIDB4ZTYsIDB4ODAsIDB4YmEsIDB4OCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDk1LCAweDAsIDB4NiwgMHhmMSwgMHhhMSwgMHhhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVlXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQUFDO1xuIiwiaW1wb3J0IHtFVkVOVFN9IGZyb20gJ3hncGxheWVyLXV0aWxzJ1xuaW1wb3J0IEFBQyBmcm9tICcuL2FhYy9hYWMtaGVscGVyJ1xuXG5jb25zdCB7UkVNVVhfRVZFTlRTLCBMT0FERVJfRVZFTlRTfSA9IEVWRU5UU1xuXG5jbGFzcyBDb21wYXRpYmlsaXR5IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMubmV4dEF1ZGlvRHRzID0gMCAvLyDmqKHmi5/kuIvkuIDmrrXpn7PpopHmlbDmja7nmoRkdHNcbiAgICB0aGlzLm5leHRWaWRlb0R0cyA9IDAgLy8g5qih5ouf5LiL5LiA5q616KeG6aKR5pWw5o2u55qEZHRzXG5cbiAgICB0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4gPSAwIC8vIOS4iuS4gOautemfs+mikeaVsOaNrueahOmVv+W6plxuICAgIHRoaXMubGFzdFZpZGVvU2FtcGxlc0xlbiA9IDAgLy8g5LiK5LiA5q616KeG6aKR5pWw5o2u55qE6ZW/5bqmXG5cbiAgICB0aGlzLmxhc3RWaWRlb0R0cyA9IHVuZGVmaW5lZCAvLyDkuIrkuIDmrrXpn7PpopHmlbDmja7nmoTplb/luqZcbiAgICB0aGlzLmxhc3RBdWRpb0R0cyA9IHVuZGVmaW5lZCAvLyDkuIrkuIDmrrXop4bpopHmlbDmja7nmoTplb/luqZcblxuICAgIHRoaXMuYWxsQXVkaW9TYW1wbGVzQ291bnQgPSAwIC8vIOmfs+mikeaAu+aVsOaNrumHjyjljp/lp4vluKcpXG4gICAgdGhpcy5hbGxWaWRlb1NhbXBsZXNDb3VudCA9IDAgLy8g6KeG6aKR5oC75pWw5o2u6YePKOWOn+Wni+W4pylcblxuICAgIHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUgPSBudWxsXG4gICAgdGhpcy5fZmlyc3RWaWRlb1NhbXBsZSA9IG51bGxcblxuICAgIHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzID0gW10gLy8g6KGl5YWF6Z+z6aKR5bin77yI77yJXG4gICAgdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMgPSBbXSAvLyDooaXlhYXop4bpopHluKfvvIjvvIlcblxuICAgIHRoaXMudmlkZW9MYXN0U2FtcGxlID0gbnVsbFxuICAgIHRoaXMuYXVkaW9MYXN0U2FtcGxlID0gbnVsbCAvLyBzdGFzaCBsYXN0IHNhbXBsZSBmb3IgZHVyYXRpb24gY29tcGF0XG5cbiAgICB0aGlzLl92aWRlb0xhcmdlR2FwID0gMFxuICAgIHRoaXMuX2F1ZGlvTGFyZ2VHYXAgPSAwXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLmJlZm9yZShSRU1VWF9FVkVOVFMuUkVNVVhfTUVESUEsIHRoaXMuZG9GaXguYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy52aWRlb0xhc3RTYW1wbGUpIHtcbiAgICAgICAgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMudW5zaGlmdCh0aGlzLnZpZGVvTGFzdFNhbXBsZSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMubmV4dEF1ZGlvRHRzID0gbnVsbCAvLyDkvLDnrpfkuIvkuIDmrrXpn7PpopHmlbDmja7nmoRkdHNcbiAgICB0aGlzLm5leHRWaWRlb0R0cyA9IG51bGwgLy8g5Lyw566X5LiL5LiA5q616KeG6aKR5pWw5o2u55qEZHRzXG5cbiAgICB0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4gPSAwIC8vIOS4iuS4gOautemfs+mikeaVsOaNrueahOmVv+W6plxuICAgIHRoaXMubGFzdFZpZGVvU2FtcGxlc0xlbiA9IDAgLy8g5LiK5LiA5q616KeG6aKR5pWw5o2u55qE6ZW/5bqmXG5cbiAgICB0aGlzLmxhc3RWaWRlb0R0cyA9IHVuZGVmaW5lZCAvLyDkuIrkuIDmrrXpn7PpopHmlbDmja7nmoTplb/luqZcbiAgICB0aGlzLmxhc3RBdWRpb0R0cyA9IHVuZGVmaW5lZCAvLyDkuIrkuIDmrrXop4bpopHmlbDmja7nmoTplb/luqZcblxuICAgIC8vIHRoaXMuYWxsQXVkaW9TYW1wbGVzQ291bnQgPSAwIC8vIOmfs+mikeaAu+aVsOaNrumHjyjljp/lp4vluKcpXG4gICAgLy8gdGhpcy5hbGxWaWRlb1NhbXBsZXNDb3VudCA9IDAgLy8g6KeG6aKR5oC75pWw5o2u6YePKOWOn+Wni+W4pylcblxuICAgIC8vIHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUgPSBudWxsXG4gICAgLy8gdGhpcy5fZmlyc3RWaWRlb1NhbXBsZSA9IG51bGxcblxuICAgIHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzID0gW10gLy8g6KGl5YWF6Z+z6aKR5bin77yI77yJXG4gICAgdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMgPSBbXSAvLyDooaXlhYXop4bpopHluKfvvIjvvIlcbiAgfVxuXG4gIGRvRml4ICgpIHtcbiAgICBjb25zdCB7IGlzRmlyc3RBdWRpb1NhbXBsZXMsIGlzRmlyc3RWaWRlb1NhbXBsZXMgfSA9IHRoaXMuZ2V0Rmlyc3RTYW1wbGUoKVxuXG4gICAgdGhpcy5yZWNvcmRTYW1wbGVzQ291bnQoKVxuXG4gICAgaWYgKHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUpIHtcbiAgICAgIHRoaXMuZml4UmVmU2FtcGxlRHVyYXRpb24odGhpcy52aWRlb1RyYWNrLm1ldGEsIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzKVxuICAgIH1cbiAgICBpZiAodGhpcy5fZmlyc3RBdWRpb1NhbXBsZSkge1xuICAgICAgdGhpcy5maXhSZWZTYW1wbGVEdXJhdGlvbih0aGlzLmF1ZGlvVHJhY2subWV0YSwgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMpXG4gICAgfVxuXG4gICAgY29uc3QgeyBjaGFuZ2VkOiB2aWRlb0NoYW5nZWQsIGNoYW5nZWRJZHg6IHZpZGVvQ2hhbmdlZElkeCB9ID0gQ29tcGF0aWJpbGl0eS5kZXRhY3RDaGFuZ2VTdHJlYW0odGhpcy52aWRlb1RyYWNrLnNhbXBsZXMpXG4gICAgaWYgKHZpZGVvQ2hhbmdlZCAmJiAhaXNGaXJzdEF1ZGlvU2FtcGxlcykge1xuICAgICAgdGhpcy5maXhDaGFuZ2VTdHJlYW1WaWRlbyh2aWRlb0NoYW5nZWRJZHgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9GaXhWaWRlbyhpc0ZpcnN0VmlkZW9TYW1wbGVzKVxuICAgIH1cblxuICAgIGNvbnN0IHsgY2hhbmdlZDogYXVkaW9DaGFuZ2VkLCBjaGFuZ2VkSWR4OiBhdWRpb0NoYW5nZWRJZHggfSA9IENvbXBhdGliaWxpdHkuZGV0YWN0Q2hhbmdlU3RyZWFtKHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzKVxuICAgIGlmIChhdWRpb0NoYW5nZWQpIHtcbiAgICAgIHRoaXMuZml4Q2hhbmdlU3RyZWFtQXVkaW8oYXVkaW9DaGFuZ2VkSWR4KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvRml4QXVkaW8oaXNGaXJzdEF1ZGlvU2FtcGxlcylcbiAgICB9XG5cbiAgICB0aGlzLnJlbW92ZUludmFsaWRTYW1wbGVzKClcbiAgfVxuXG4gIGRvRml4VmlkZW8gKGZpcnN0LCBzdHJlYW1DaGFuZ2VTdGFydCkge1xuICAgIGxldCB7c2FtcGxlczogdmlkZW9TYW1wbGVzLCBtZXRhfSA9IHRoaXMudmlkZW9UcmFja1xuXG4gICAgLy8gY29uc29sZS5sb2coJ25leHQgdmlkZW8nLCB0aGlzLm5leHRWaWRlb0R0cylcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdmlkZW9TYW1wbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBzYW1wbGUgPSB2aWRlb1NhbXBsZXNbaV1cbiAgICAgIHNhbXBsZS5vcmlnaW5EdHMgPSBzYW1wbGUuZHRzXG4gICAgfVxuXG4gICAgaWYgKG1ldGEuZnJhbWVSYXRlICYmIG1ldGEuZnJhbWVSYXRlLmZpeGVkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdmlkZW9TYW1wbGVzIHx8ICF2aWRlb1NhbXBsZXMubGVuZ3RoIHx8ICF0aGlzLl9maXJzdFZpZGVvU2FtcGxlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBjb25zb2xlLmxvZyhgdmlkZW8gbGFzdFNhbXBsZSwgJHt2aWRlb1NhbXBsZXNbdmlkZW9TYW1wbGVzLmxlbmd0aCAtIDFdLmR0c31gKVxuXG4gICAgY29uc3QgZmlyc3RTYW1wbGUgPSB2aWRlb1NhbXBsZXNbMF1cblxuICAgIGNvbnN0IHNhbXBsZXNMZW4gPSB2aWRlb1NhbXBsZXMubGVuZ3RoO1xuXG4gICAgLy8gc3RlcDAu5L+u5aSNaGxz5rWB5Ye6546w5beo5aSnZ2Fw77yM6ZyA6KaB5by65Yi26YeN5a6a5L2N55qE6Zeu6aKYXG4gICAgaWYgKHRoaXMuX3ZpZGVvTGFyZ2VHYXAgPiAwKSB7XG4gICAgICBDb21wYXRpYmlsaXR5LmRvRml4TGFyZ2VHYXAodmlkZW9TYW1wbGVzLCB0aGlzLl92aWRlb0xhcmdlR2FwKVxuICAgIH1cblxuICAgIGlmIChmaXJzdFNhbXBsZS5kdHMgIT09IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzICYmIHN0cmVhbUNoYW5nZVN0YXJ0KSB7XG4gICAgICBpZiAoc3RyZWFtQ2hhbmdlU3RhcnQpIHtcbiAgICAgICAgdGhpcy5uZXh0VmlkZW9EdHMgPSBzdHJlYW1DaGFuZ2VTdGFydCAvLyBGSVg6IEhsc+S4remAlOWIh2NvZGVj77yM5Zyo5aaC5p6c55u05o6lc2Vla+WIsOWQjumdoueahOeCueS8muWvvOiHtGxhcmdlR2Fw6K6h566X5aSx6LSlXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3ZpZGVvTGFyZ2VHYXAgPSB0aGlzLm5leHRWaWRlb0R0cyAtIGZpcnN0U2FtcGxlLmR0c1xuICAgICAgQ29tcGF0aWJpbGl0eS5kb0ZpeExhcmdlR2FwKHZpZGVvU2FtcGxlcywgdGhpcy5fdmlkZW9MYXJnZUdhcClcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdER0cyA9IGZpcnN0U2FtcGxlLmR0c1xuXG4gICAgLy8gc3RlcDEuIOS/ruWkjeS4jmF1ZGlv6aaW5bin5beu6Led5aSq5aSn55qE6Zeu6aKYXG4gICAgaWYgKGZpcnN0ICYmIHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUpIHtcbiAgICAgIGNvbnN0IHZpZGVvRmlyc3REdHMgPSB0aGlzLl9maXJzdFZpZGVvU2FtcGxlLmR0c1xuICAgICAgY29uc3QgYXVkaW9GaXJzdER0cyA9IHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUuZHRzXG4gICAgICBjb25zdCBnYXAgPSB2aWRlb0ZpcnN0RHRzIC0gYXVkaW9GaXJzdER0c1xuICAgICAgaWYgKGdhcCA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgY29uc3QgZmlsbENvdW50ID0gTWF0aC5mbG9vcihnYXAgLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsbENvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjbG9uZWRGaXJzdFNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIGZpcnN0U2FtcGxlKSAvLyDop4bpopHlpLTpg6jluKfnvLrlpLHpnIDopoHlpI3liLbnrKzkuIDluKdcbiAgICAgICAgICAvLyDph43mlrDorqHnrpdzYW1wbGXnmoRkdHPlkoxwdHNcbiAgICAgICAgICBjbG9uZWRGaXJzdFNhbXBsZS5kdHMgPSB2aWRlb0ZpcnN0RHRzIC0gKGkgKyAxKSAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgICBjbG9uZWRGaXJzdFNhbXBsZS5wdHMgPSBjbG9uZWRGaXJzdFNhbXBsZS5kdHMgKyBjbG9uZWRGaXJzdFNhbXBsZS5jdHNcblxuICAgICAgICAgIHZpZGVvU2FtcGxlcy51bnNoaWZ0KGNsb25lZEZpcnN0U2FtcGxlKVxuXG4gICAgICAgICAgdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgICBkdHM6IGNsb25lZEZpcnN0U2FtcGxlLmR0cyxcbiAgICAgICAgICAgIHNpemU6IGNsb25lZEZpcnN0U2FtcGxlLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY3VyTGFzdFNhbXBsZSA9IHZpZGVvU2FtcGxlcy5wb3AoKTtcbiAgICBpZiAodmlkZW9TYW1wbGVzLmxlbmd0aCkge1xuICAgICAgdmlkZW9TYW1wbGVzW3ZpZGVvU2FtcGxlcy5sZW5ndGggLSAxXS5kdXJhdGlvbiA9IGN1ckxhc3RTYW1wbGUuZHRzIC0gdmlkZW9TYW1wbGVzW3ZpZGVvU2FtcGxlcy5sZW5ndGggLSAxXS5kdHNcbiAgICB9XG5cbiAgICBpZiAodGhpcy52aWRlb0xhc3RTYW1wbGUpIHtcbiAgICAgIGNvbnN0IHZpZGVvTGFzdFNhbXBsZSA9IHRoaXMudmlkZW9MYXN0U2FtcGxlO1xuICAgICAgdmlkZW9MYXN0U2FtcGxlLmR1cmF0aW9uID0gZmlyc3RTYW1wbGUuZHRzIC0gdmlkZW9MYXN0U2FtcGxlLmR0cztcbiAgICAgIHZpZGVvU2FtcGxlcy51bnNoaWZ0KHRoaXMudmlkZW9MYXN0U2FtcGxlKVxuICAgIH1cblxuICAgIHRoaXMudmlkZW9MYXN0U2FtcGxlID0gY3VyTGFzdFNhbXBsZTtcblxuICAgIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzID0gdmlkZW9TYW1wbGVzO1xuICB9XG5cbiAgZG9GaXhBdWRpbyAoZmlyc3QsIHN0cmVhbUNoYW5nZVN0YXJ0KSB7XG4gICAgbGV0IHtzYW1wbGVzOiBhdWRpb1NhbXBsZXMsIG1ldGF9ID0gdGhpcy5hdWRpb1RyYWNrXG5cbiAgICBpZiAoIWF1ZGlvU2FtcGxlcyB8fCAhYXVkaW9TYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coJ25leHQgYXVkaW8nLCB0aGlzLm5leHRBdWRpb0R0cylcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXVkaW9TYW1wbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBzYW1wbGUgPSBhdWRpb1NhbXBsZXNbaV1cbiAgICAgIHNhbXBsZS5vcmlnaW5EdHMgPSBzYW1wbGUuZHRzXG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coYGF1ZGlvIGxhc3RTYW1wbGUsICR7YXVkaW9TYW1wbGVzW2F1ZGlvU2FtcGxlcy5sZW5ndGggLSAxXS5kdHN9YClcblxuICAgIGNvbnN0IHNhbXBsZXNMZW4gPSBhdWRpb1NhbXBsZXMubGVuZ3RoO1xuICAgIGNvbnN0IHNpbGVudEZyYW1lID0gQUFDLmdldFNpbGVudEZyYW1lKG1ldGEuY29kZWMsIG1ldGEuY2hhbm5lbENvdW50KVxuXG4gICAgY29uc3QgZmlyc3RTYW1wbGUgPSB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlXG5cbiAgICBjb25zdCBfZmlyc3RTYW1wbGUgPSBhdWRpb1NhbXBsZXNbMF1cbiAgICAvLyDlr7lhdWRpb1NhbXBsZXPmjInnhadkdHPlgZrmjpLluo9cbiAgICAvLyBhdWRpb1NhbXBsZXMgPSBDb21wYXRpYmlsaXR5LnNvcnRBdWRpb1NhbXBsZXMoYXVkaW9TYW1wbGVzKVxuICAgIGlmICh0aGlzLl9hdWRpb0xhcmdlR2FwID4gMCkge1xuICAgICAgQ29tcGF0aWJpbGl0eS5kb0ZpeExhcmdlR2FwKGF1ZGlvU2FtcGxlcywgdGhpcy5fYXVkaW9MYXJnZUdhcClcbiAgICB9XG5cbiAgICBpZiAoX2ZpcnN0U2FtcGxlLmR0cyAhPT0gdGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHMgJiYgKHN0cmVhbUNoYW5nZVN0YXJ0IHx8IENvbXBhdGliaWxpdHkuZGV0ZWN0TGFyZ2VHYXAodGhpcy5uZXh0QXVkaW9EdHMsIF9maXJzdFNhbXBsZSkpKSB7XG4gICAgICBpZiAoc3RyZWFtQ2hhbmdlU3RhcnQpIHtcbiAgICAgICAgdGhpcy5uZXh0QXVkaW9EdHMgPSBzdHJlYW1DaGFuZ2VTdGFydCAvLyBGSVg6IEhsc+S4remAlOWIh2NvZGVj77yM5Zyo5aaC5p6c55u05o6lc2Vla+WIsOWQjumdoueahOeCueS8muWvvOiHtGxhcmdlR2Fw6K6h566X5aSx6LSlXG4gICAgICB9XG4gICAgICB0aGlzLl9hdWRpb0xhcmdlR2FwID0gdGhpcy5uZXh0QXVkaW9EdHMgLSBfZmlyc3RTYW1wbGUuZHRzXG4gICAgICBDb21wYXRpYmlsaXR5LmRvRml4TGFyZ2VHYXAoYXVkaW9TYW1wbGVzLCB0aGlzLl9hdWRpb0xhcmdlR2FwKVxuICAgIH1cbiAgICAvLyBzdGVwMC4g6aaW5bin5LiOdmlkZW/pppbluKfpl7Tot53lpKfnmoTpl67pophcbiAgICBpZiAodGhpcy5fZmlyc3RWaWRlb1NhbXBsZSAmJiBmaXJzdCkge1xuICAgICAgY29uc3QgdmlkZW9GaXJzdFB0cyA9IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUucHRzID8gdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5wdHMgOiB0aGlzLl9maXJzdFZpZGVvU2FtcGxlLmR0cyArIHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuY3RzXG5cbiAgICAgIGlmIChmaXJzdFNhbXBsZS5kdHMgLSB2aWRlb0ZpcnN0UHRzID4gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikge1xuICAgICAgICBjb25zdCBzaWxlbnRTYW1wbGVDb3VudCA9IE1hdGguZmxvb3IoKGZpcnN0U2FtcGxlLmR0cyAtIHZpZGVvRmlyc3RQdHMpIC8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbilcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpbGVudFNhbXBsZUNvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzaWxlbnRTYW1wbGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBzaWxlbnRGcmFtZSxcbiAgICAgICAgICAgIGRhdGFzaXplOiBzaWxlbnRGcmFtZS5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgZHRzOiBmaXJzdFNhbXBsZS5kdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbixcbiAgICAgICAgICAgIGZpbHRlcmVkOiAwXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXVkaW9TYW1wbGVzLnVuc2hpZnQoc2lsZW50U2FtcGxlKVxuXG4gICAgICAgICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgICBkdHM6IHNpbGVudFNhbXBsZS5kdHMsXG4gICAgICAgICAgICBzaXplOiBzaWxlbnRTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBnYXBcbiAgICBjb25zdCBmaXJzdER0cyA9IGF1ZGlvU2FtcGxlc1swXS5kdHNcblxuICAgIGlmICh0aGlzLm5leHRBdWRpb0R0cykge1xuICAgICAgLy8gc3RlcDEuIOWkhOeQhnNhbXBsZXPmrrXkuYvpl7TnmoTkuKLluKfmg4XlhrVcbiAgICAgIC8vIOW9k+WPkeeOsGR1cmF0aW9u5beu6Led5aSn5LqOMeW4p+aXtui/m+ihjOihpeW4p1xuICAgICAgZ2FwID0gZmlyc3REdHMgLSB0aGlzLm5leHRBdWRpb0R0c1xuICAgICAgY29uc3QgYWJzR2FwID0gTWF0aC5hYnMoZ2FwKVxuXG4gICAgICBpZiAoYWJzR2FwID4gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiAmJiBzYW1wbGVzTGVuID09PSAxICYmIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9PT0gMSkge1xuICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgPSB1bmRlZmluZWRcbiAgICAgIH1cblxuICAgICAgaWYgKGdhcCA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgaWYgKHNhbXBsZXNMZW4gPT09IDEgJiYgdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuID09PSAxKSB7XG4gICAgICAgICAgLy8g5aaC5p6cc2FtcGxl55qEbGVuZ3Ro5LiA55u05pivMe+8jOiAjOS4lOS4gOebtOS4jeespuWQiHJlZlNhbXBsZUR1cmF0aW9u77yM6ZyA6KaB5Yqo5oCB5L+u5pS5cmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgPSBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgIT09IHVuZGVmaW5lZCA/IG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCArIGdhcCA6IG1ldGEucmVmU2FtcGxlRHVyYXRpb24gKyBnYXBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBzaWxlbnRGcmFtZUNvdW50ID0gTWF0aC5mbG9vcihnYXAgLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWxlbnRGcmFtZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVkID0gZmlyc3REdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgICAgY29uc3Qgc2lsZW50U2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgYXVkaW9TYW1wbGVzWzBdLCB7XG4gICAgICAgICAgICAgIGR0czogY29tcHV0ZWQgPiB0aGlzLm5leHRBdWRpb0R0cyA/IGNvbXB1dGVkIDogdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgICBkdHM6IHNpbGVudFNhbXBsZS5kdHMsXG4gICAgICAgICAgICAgIHNpemU6IHNpbGVudFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcy51bnNoaWZ0KHNpbGVudFNhbXBsZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYWJzR2FwIDw9IG1ldGEucmVmU2FtcGxlRHVyYXRpb24gJiYgYWJzR2FwID4gMCkge1xuICAgICAgICAvLyDlvZPlt67ot53mr5TovoPlsI/nmoTml7blgJnlsIbpn7PpopHluKfph43lrprkvY1cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ+mHjeWumuS9jemfs+mikeW4p2R0cycsIGF1ZGlvU2FtcGxlc1swXS5kdHMsIHRoaXMubmV4dEF1ZGlvRHRzKVxuICAgICAgICBhdWRpb1NhbXBsZXNbMF0uZHRzID0gdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgICAgYXVkaW9TYW1wbGVzWzBdLnB0cyA9IHRoaXMubmV4dEF1ZGlvRHRzXG4gICAgICB9IGVsc2UgaWYgKGdhcCA8IDApIHtcbiAgICAgICAgQ29tcGF0aWJpbGl0eS5kb0ZpeExhcmdlR2FwKGF1ZGlvU2FtcGxlcywgKC0xICogZ2FwKSlcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGFzdE9yaWdpbkR0cyA9IGF1ZGlvU2FtcGxlc1thdWRpb1NhbXBsZXMubGVuZ3RoIC0gMV0ub3JpZ2luRHRzO1xuICAgIGNvbnN0IGxhc3REdHMgPSBhdWRpb1NhbXBsZXNbYXVkaW9TYW1wbGVzLmxlbmd0aCAtIDFdLm9yaWdpbkR0cztcbiAgICBjb25zdCBsYXN0U2FtcGxlRHVyYXRpb24gPSBhdWRpb1NhbXBsZXMubGVuZ3RoID49IDIgPyBsYXN0T3JpZ2luRHRzIC0gYXVkaW9TYW1wbGVzW2F1ZGlvU2FtcGxlcy5sZW5ndGggLSAyXS5vcmlnaW5EdHMgOiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG5cbiAgICB0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4gPSBzYW1wbGVzTGVuO1xuICAgIHRoaXMubmV4dEF1ZGlvRHRzID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkID8gbGFzdER0cyArIG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCA6IGxhc3REdHMgKyBsYXN0U2FtcGxlRHVyYXRpb25cbiAgICB0aGlzLmxhc3RBdWRpb0R0cyA9IGxhc3REdHNcblxuICAgIGF1ZGlvU2FtcGxlc1thdWRpb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb24gPSBsYXN0U2FtcGxlRHVyYXRpb25cblxuICAgIC8vIHN0ZXAzLiDkv67lpI1zYW1wbGVz5q615YaF6YOo55qEZHRz5byC5bi46Zeu6aKYXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGF1ZGlvU2FtcGxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudCA9IGF1ZGlvU2FtcGxlc1tpXVxuICAgICAgY29uc3QgbmV4dCA9IGF1ZGlvU2FtcGxlc1tpICsgMV1cblxuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IG5leHQuZHRzIC0gY3VycmVudC5kdHM7XG4gICAgICBhdWRpb1NhbXBsZXNbaV0uZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgIC8qXG4gICAgICBpZiAoZHVyYXRpb24gPiAoMiAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pKSB7XG4gICAgICAgIC8vIOS4pOW4p+S5i+mXtOmXtOmalOWkquWkp++8jOmcgOimgeihpeepuueZveW4p1xuICAgICAgICAvKipcbiAgICAgICAgbGV0IHNpbGVudEZyYW1lQ291bnQgPSBNYXRoLmZsb29yKGR1cmF0aW9uIC8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbilcbiAgICAgICAgbGV0IGZyYW1lSWR4ID0gMFxuXG4gICAgICAgIHdoaWxlIChmcmFtZUlkeCA8IHNpbGVudEZyYW1lQ291bnQpIHtcbiAgICAgICAgICBjb25zdCBzaWxlbnRTYW1wbGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBzaWxlbnRGcmFtZSxcbiAgICAgICAgICAgIGRhdGFzaXplOiBzaWxlbnRGcmFtZS5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgZHRzOiBjdXJyZW50LmR0cyArIChmcmFtZUlkeCArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbixcbiAgICAgICAgICAgIGZpbHRlcmVkOiAwLFxuICAgICAgICAgICAgaXNTaWxlbnQ6IHRydWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdWRpb1NhbXBsZXMuc3BsaWNlKGksIDAsIHNpbGVudFNhbXBsZSlcblxuICAgICAgICAgIHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgZHRzOiBzaWxlbnRTYW1wbGUuZHRzLFxuICAgICAgICAgICAgc2l6ZTogc2lsZW50U2FtcGxlLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBmcmFtZUlkeCsrXG4gICAgICAgICAgaSsrIC8vIOS4jeWvuemdmemfs+W4p+WBmuavlOi+g1xuICAgICAgICB9XG4gICAgICB9ICovXG4gICAgfVxuXG4gICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMgPSBDb21wYXRpYmlsaXR5LnNvcnRBdWRpb1NhbXBsZXMoYXVkaW9TYW1wbGVzKVxuICB9XG5cbiAgZml4Q2hhbmdlU3RyZWFtVmlkZW8gKGNoYW5nZUlkeCkge1xuICAgIGNvbnN0IHsgc2FtcGxlcywgbWV0YSB9ID0gdGhpcy52aWRlb1RyYWNrO1xuICAgIGNvbnN0IHByZXZEdHMgPSBjaGFuZ2VJZHggPT09IDAgPyB0aGlzLmdldFN0cmVhbUNoYW5nZVN0YXJ0KHNhbXBsZXNbMF0pIDogc2FtcGxlc1tjaGFuZ2VJZHggLSAxXS5kdHM7XG4gICAgY29uc3QgY3VyRHRzID0gc2FtcGxlc1tjaGFuZ2VJZHhdLmR0cztcbiAgICBjb25zdCBpc0NvbnRpbnVlID0gTWF0aC5hYnMocHJldkR0cyAtIGN1ckR0cykgPD0gMiAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb247XG5cbiAgICBpZiAoaXNDb250aW51ZSkge1xuICAgICAgaWYgKCFzYW1wbGVzW2NoYW5nZUlkeF0ub3B0aW9ucykge1xuICAgICAgICBzYW1wbGVzW2NoYW5nZUlkeF0ub3B0aW9ucyA9IHtcbiAgICAgICAgICBpc0NvbnRpbnVlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNhbXBsZXNbY2hhbmdlSWR4XS5vcHRpb25zLmlzQ29udGludWUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZG9GaXhWaWRlbyhmYWxzZSlcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdFBhcnRTYW1wbGVzID0gc2FtcGxlcy5zbGljZSgwLCBjaGFuZ2VJZHgpO1xuICAgIGNvbnN0IHNlY29uZFBhcnRTYW1wbGVzID0gc2FtcGxlcy5zbGljZShjaGFuZ2VJZHgpO1xuICAgIGNvbnN0IGZpcnN0U2FtcGxlID0gc2FtcGxlc1swXVxuXG4gICAgY29uc3QgY2hhbmdlU2FtcGxlID0gc2Vjb25kUGFydFNhbXBsZXNbMF1cbiAgICBjb25zdCBmaXJzdFBhcnREdXJhdGlvbiA9IGNoYW5nZVNhbXBsZS5kdHMgLSBmaXJzdFNhbXBsZS5kdHNcbiAgICBjb25zdCBzdHJlYW1DaGFuZ2VTdGFydCA9IGZpcnN0U2FtcGxlLm9wdGlvbnMgJiYgZmlyc3RTYW1wbGUub3B0aW9ucy5zdGFydCArIGZpcnN0UGFydER1cmF0aW9uID8gZmlyc3RTYW1wbGUub3B0aW9ucy5zdGFydCA6IG51bGxcblxuICAgIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzID0gc2FtcGxlcy5zbGljZSgwLCBjaGFuZ2VJZHgpO1xuXG4gICAgdGhpcy5kb0ZpeFZpZGVvKGZhbHNlKTtcblxuICAgIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzID0gc2FtcGxlcy5zbGljZShjaGFuZ2VJZHgpO1xuXG4gICAgdGhpcy5kb0ZpeFZpZGVvKGZhbHNlLCBzdHJlYW1DaGFuZ2VTdGFydCk7XG5cbiAgICB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcyA9IGZpcnN0UGFydFNhbXBsZXMuY29uY2F0KHNlY29uZFBhcnRTYW1wbGVzKVxuICB9XG5cbiAgZml4Q2hhbmdlU3RyZWFtQXVkaW8gKGNoYW5nZUlkeCkge1xuICAgIGNvbnN0IHsgc2FtcGxlcywgbWV0YSB9ID0gdGhpcy5hdWRpb1RyYWNrO1xuXG4gICAgY29uc3QgcHJldkR0cyA9IGNoYW5nZUlkeCA9PT0gMCA/IHRoaXMuZ2V0U3RyZWFtQ2hhbmdlU3RhcnQoc2FtcGxlc1swXSkgOiBzYW1wbGVzW2NoYW5nZUlkeCAtIDFdLmR0cztcbiAgICBjb25zdCBjdXJEdHMgPSBzYW1wbGVzW2NoYW5nZUlkeF0uZHRzO1xuICAgIGNvbnN0IGlzQ29udGludWUgPSBNYXRoLmFicyhwcmV2RHRzIC0gY3VyRHRzKSA8PSAyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbjtcblxuICAgIGlmIChpc0NvbnRpbnVlKSB7XG4gICAgICBpZiAoIXNhbXBsZXNbY2hhbmdlSWR4XS5vcHRpb25zKSB7XG4gICAgICAgIHNhbXBsZXNbY2hhbmdlSWR4XS5vcHRpb25zID0ge1xuICAgICAgICAgIGlzQ29udGludWU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2FtcGxlc1tjaGFuZ2VJZHhdLm9wdGlvbnMuaXNDb250aW51ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5kb0ZpeEF1ZGlvKGZhbHNlKVxuICAgIH1cblxuICAgIGNvbnN0IGZpcnN0UGFydFNhbXBsZXMgPSBzYW1wbGVzLnNsaWNlKDAsIGNoYW5nZUlkeCk7XG4gICAgY29uc3Qgc2Vjb25kUGFydFNhbXBsZXMgPSBzYW1wbGVzLnNsaWNlKGNoYW5nZUlkeCk7XG4gICAgY29uc3QgZmlyc3RTYW1wbGUgPSBzYW1wbGVzWzBdXG5cbiAgICBjb25zdCBjaGFuZ2VTYW1wbGUgPSBzZWNvbmRQYXJ0U2FtcGxlc1swXVxuICAgIGNvbnN0IGZpcnN0UGFydER1cmF0aW9uID0gY2hhbmdlU2FtcGxlLmR0cyAtIGZpcnN0U2FtcGxlLmR0c1xuICAgIGNvbnN0IHN0cmVhbUNoYW5nZVN0YXJ0ID0gZmlyc3RTYW1wbGUub3B0aW9ucyAmJiBmaXJzdFNhbXBsZS5vcHRpb25zLnN0YXJ0ICsgZmlyc3RQYXJ0RHVyYXRpb24gPyBmaXJzdFNhbXBsZS5vcHRpb25zLnN0YXJ0IDogbnVsbFxuXG4gICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMgPSBmaXJzdFBhcnRTYW1wbGVzO1xuXG4gICAgdGhpcy5kb0ZpeEF1ZGlvKGZhbHNlKTtcblxuICAgIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzID0gc2Vjb25kUGFydFNhbXBsZXM7XG5cbiAgICB0aGlzLmRvRml4QXVkaW8oZmFsc2UsIHN0cmVhbUNoYW5nZVN0YXJ0KTtcblxuICAgIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzID0gZmlyc3RQYXJ0U2FtcGxlcy5jb25jYXQoc2Vjb25kUGFydFNhbXBsZXMpXG4gIH1cblxuICBnZXRGaXJzdFNhbXBsZSAoKSB7XG4gICAgLy8g6I635Y+WdmlkZW/lkoxhdWRpb+eahOmmluW4p+aVsOaNrlxuICAgIGxldCB7c2FtcGxlczogdmlkZW9TYW1wbGVzfSA9IHRoaXMudmlkZW9UcmFja1xuICAgIGxldCB7c2FtcGxlczogYXVkaW9TYW1wbGVzfSA9IHRoaXMuYXVkaW9UcmFja1xuXG4gICAgbGV0IGlzRmlyc3RWaWRlb1NhbXBsZXMgPSBmYWxzZTtcbiAgICBsZXQgaXNGaXJzdEF1ZGlvU2FtcGxlcyA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLl9maXJzdFZpZGVvU2FtcGxlICYmIHZpZGVvU2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUgPSBDb21wYXRpYmlsaXR5LmZpbmRGaXJzdFZpZGVvU2FtcGxlKHZpZGVvU2FtcGxlcylcbiAgICAgIGlzRmlyc3RWaWRlb1NhbXBsZXMgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9maXJzdEF1ZGlvU2FtcGxlICYmIGF1ZGlvU2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUgPSBDb21wYXRpYmlsaXR5LmZpbmRGaXJzdEF1ZGlvU2FtcGxlKGF1ZGlvU2FtcGxlcykgLy8g5a+75om+ZHRz5pyA5bCP55qE5bin5L2c5Li66aaW5Liq6Z+z6aKR5binXG4gICAgICBpc0ZpcnN0QXVkaW9TYW1wbGVzID0gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpc0ZpcnN0VmlkZW9TYW1wbGVzLFxuICAgICAgaXNGaXJzdEF1ZGlvU2FtcGxlc1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDlnKjmsqHmnIlyZWZTYW1wbGVEdXJhdGlvbueahOmXrumimOa1geS4re+8jFxuICAgKi9cbiAgZml4UmVmU2FtcGxlRHVyYXRpb24gKG1ldGEsIHNhbXBsZXMpIHtcbiAgICBjb25zdCBpc1ZpZGVvID0gbWV0YS50eXBlID09PSAndmlkZW8nXG4gICAgY29uc3QgYWxsU2FtcGxlc0NvdW50ID0gaXNWaWRlbyA/IHRoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQgOiB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50XG4gICAgY29uc3QgZmlyc3REdHMgPSBpc1ZpZGVvID8gdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5kdHMgOiB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlLmR0c1xuICAgIGNvbnN0IGZpbGxlZFNhbXBsZXNDb3VudCA9IGlzVmlkZW8gPyB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5sZW5ndGggOiB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5sZW5ndGhcblxuICAgIGlmICghbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiB8fCBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uIDw9IDAgfHwgTnVtYmVyLmlzTmFOKG1ldGEucmVmU2FtcGxlRHVyYXRpb24pKSB7XG4gICAgICBpZiAoc2FtcGxlcy5sZW5ndGggPj0gMSkge1xuICAgICAgICBjb25zdCBsYXN0RHRzID0gc2FtcGxlc1tzYW1wbGVzLmxlbmd0aCAtIDFdLmR0c1xuXG4gICAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKChsYXN0RHRzIC0gZmlyc3REdHMpIC8gKChhbGxTYW1wbGVzQ291bnQgKyBmaWxsZWRTYW1wbGVzQ291bnQpIC0gMSkpOyAvLyDlsIZyZWZTYW1wbGVEdXJhdGlvbumHjee9ruS4uuiuoeeul+WQjueahOW5s+Wdh+WAvFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobWV0YS5yZWZTYW1wbGVEdXJhdGlvbikge1xuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID49IDUpIHtcbiAgICAgICAgY29uc3QgbGFzdER0cyA9IHNhbXBsZXNbc2FtcGxlcy5sZW5ndGggLSAxXS5kdHNcbiAgICAgICAgY29uc3QgZmlyc3REdHMgPSBzYW1wbGVzWzBdLmR0c1xuICAgICAgICBjb25zdCBkdXJhdGlvbkF2ZyA9IChsYXN0RHRzIC0gZmlyc3REdHMpIC8gKHNhbXBsZXMubGVuZ3RoIC0gMSlcblxuICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcihNYXRoLmFicyhtZXRhLnJlZlNhbXBsZUR1cmF0aW9uIC0gZHVyYXRpb25BdmcpIDw9IDUgPyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uIDogZHVyYXRpb25BdmcpOyAvLyDlsIZyZWZTYW1wbGVEdXJhdGlvbumHjee9ruS4uuiuoeeul+WQjueahOW5s+Wdh+WAvFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDorrDlvZXmiKrmraLnm67liY3kuIDlhbHmkq3mlL7kuoblpJrlsJHluKdcbiAgICovXG4gIHJlY29yZFNhbXBsZXNDb3VudCAoKSB7XG4gICAgY29uc3QgeyBhdWRpb1RyYWNrLCB2aWRlb1RyYWNrIH0gPSB0aGlzXG5cbiAgICB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50ICs9IGF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGhcbiAgICB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50ICs9IHZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiDljrvpmaTkuI3lkIjms5XnmoTluKfvvIjlgJLpgIDjgIHph43lpI3luKfvvIlcbiAgICovXG4gIHJlbW92ZUludmFsaWRTYW1wbGVzICgpIHtcbiAgICBjb25zdCB7IF9maXJzdFZpZGVvU2FtcGxlLCBfZmlyc3RBdWRpb1NhbXBsZSB9ID0gdGhpc1xuXG4gICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMgPSB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcy5maWx0ZXIoKHNhbXBsZSwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChzYW1wbGUgPT09IF9maXJzdEF1ZGlvU2FtcGxlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNhbXBsZS5kdHMgPiBfZmlyc3RBdWRpb1NhbXBsZS5kdHNcbiAgICB9KVxuXG4gICAgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMgPSB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcy5maWx0ZXIoKHNhbXBsZSwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChzYW1wbGUgPT09IF9maXJzdFZpZGVvU2FtcGxlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNhbXBsZS5kdHMgPiBfZmlyc3RWaWRlb1NhbXBsZS5kdHNcbiAgICB9KVxuICB9XG5cbiAgZ2V0U3RyZWFtQ2hhbmdlU3RhcnQgKHNhbXBsZSkge1xuICAgIGlmIChzYW1wbGUub3B0aW9ucyAmJiBzYW1wbGUub3B0aW9ucy5zdGFydCkge1xuICAgICAgcmV0dXJuIHNhbXBsZS5vcHRpb25zLnN0YXJ0IC0gdGhpcy5kdHNCYXNlO1xuICAgIH1cbiAgICByZXR1cm4gSW5maW5pdHlcbiAgfVxuXG4gIHN0YXRpYyBzb3J0QXVkaW9TYW1wbGVzIChzYW1wbGVzKSB7XG4gICAgaWYgKHNhbXBsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gc2FtcGxlc1xuICAgIH1cblxuICAgIHJldHVybiBzYW1wbGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIHJldHVybiBhLmR0cyAtIGIuZHRzXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDlr7vmib5kdHPmnIDlsI/nmoRzYW1wbGVcbiAgICogQHBhcmFtIHNhbXBsZXNcbiAgICovXG4gIHN0YXRpYyBmaW5kRmlyc3RBdWRpb1NhbXBsZSAoc2FtcGxlcykge1xuICAgIGlmICghc2FtcGxlcyB8fCBzYW1wbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gQ29tcGF0aWJpbGl0eS5zb3J0QXVkaW9TYW1wbGVzKHNhbXBsZXMpWzBdXG4gIH1cblxuICBzdGF0aWMgZmluZEZpcnN0VmlkZW9TYW1wbGUgKHNhbXBsZXMpIHtcbiAgICBpZiAoIXNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IHNvcnRlZCA9IHNhbXBsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGEuZHRzIC0gYi5kdHM7XG4gICAgfSlcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzb3J0ZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChzb3J0ZWRbaV0uaXNLZXlmcmFtZSkge1xuICAgICAgICByZXR1cm4gc29ydGVkW2ldXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGRldGVjdExhcmdlR2FwIChuZXh0RHRzLCBmaXJzdFNhbXBsZSkge1xuICAgIGlmIChuZXh0RHRzID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN1ckR0cyA9IGZpcnN0U2FtcGxlLmR0cyB8fCAwXG4gICAgY29uc3QgY29uZDEgPSBuZXh0RHRzIC0gY3VyRHRzID49IDEwMDAgfHwgY3VyRHRzIC0gbmV4dER0cyA+PSAxMDAwIC8vIGZpeCBobHPmtYHlh7rnjrDlpKfph4/mtYFkdHPpl7Tot53pl67pophcbiAgICBjb25zdCBjb25kMiA9IGZpcnN0U2FtcGxlLm9wdGlvbnMgJiYgZmlyc3RTYW1wbGUub3B0aW9ucy5kaXNjb250aW51ZVxuXG4gICAgcmV0dXJuIGNvbmQxIHx8IGNvbmQyXG4gIH1cblxuICBzdGF0aWMgZG9GaXhMYXJnZUdhcCAoc2FtcGxlcywgZ2FwKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ2ZpeCBsYXJnZSBnYXAgJywgZ2FwKVxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzYW1wbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBzYW1wbGUgPSBzYW1wbGVzW2ldO1xuICAgICAgc2FtcGxlLmR0cyArPSBnYXBcbiAgICAgIGlmIChzYW1wbGUucHRzKSB7XG4gICAgICAgIHNhbXBsZS5wdHMgKz0gZ2FwXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOS4remAlOaNoua1gVxuICAgKi9cbiAgc3RhdGljIGRldGFjdENoYW5nZVN0cmVhbSAoc2FtcGxlcykge1xuICAgIGxldCBjaGFuZ2VkID0gZmFsc2U7XG4gICAgbGV0IGNoYW5nZWRJZHggPSAtMTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2FtcGxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKHNhbXBsZXNbaV0ub3B0aW9ucyAmJiBzYW1wbGVzW2ldLm9wdGlvbnMubWV0YSkge1xuICAgICAgICBjaGFuZ2VkID0gdHJ1ZVxuICAgICAgICBjaGFuZ2VkSWR4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNoYW5nZWQsXG4gICAgICBjaGFuZ2VkSWR4XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gIH1cblxuICBnZXQgYXVkaW9UcmFjayAoKSB7XG4gICAgaWYgKHRoaXMudHJhY2tzKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFja3MuYXVkaW9UcmFja1xuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHZpZGVvVHJhY2sgKCkge1xuICAgIGlmICh0aGlzLnRyYWNrcykge1xuICAgICAgcmV0dXJuIHRoaXMudHJhY2tzLnZpZGVvVHJhY2tcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBkdHNCYXNlICgpIHtcbiAgICBjb25zdCByZW11eGVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTVA0X1JFTVVYRVInKTtcbiAgICBpZiAocmVtdXhlcikge1xuICAgICAgcmV0dXJuIHJlbXV4ZXIuX2R0c0Jhc2VcbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQ29tcGF0aWJpbGl0eTtcbiIsImNsYXNzIEdvbG9tYiB7XG4gIGNvbnN0cnVjdG9yICh1aW50OGFycmF5KSB7XG4gICAgdGhpcy5UQUcgPSAnR29sb21iJ1xuICAgIHRoaXMuX2J1ZmZlciA9IHVpbnQ4YXJyYXlcbiAgICB0aGlzLl9idWZmZXJJbmRleCA9IDBcbiAgICB0aGlzLl90b3RhbEJ5dGVzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoXG4gICAgdGhpcy5fdG90YWxCaXRzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoICogOFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkID0gMFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPSAwXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9idWZmZXIgPSBudWxsXG4gIH1cblxuICBfZmlsbEN1cnJlbnRXb3JkICgpIHtcbiAgICBsZXQgYnVmZmVyQnl0ZXNMZWZ0ID0gdGhpcy5fdG90YWxCeXRlcyAtIHRoaXMuX2J1ZmZlckluZGV4XG4gICAgaWYgKGJ1ZmZlckJ5dGVzTGVmdCA8PSAwKSB7XG4gICAgICAvLyBUT0RPIOW8guW4uOWkhOeQhlxuICAgIH1cblxuICAgIGxldCBieXRlc1JlYWQgPSBNYXRoLm1pbig0LCBidWZmZXJCeXRlc0xlZnQpXG4gICAgbGV0IHdvcmQgPSBuZXcgVWludDhBcnJheSg0KVxuICAgIHdvcmQuc2V0KHRoaXMuX2J1ZmZlci5zdWJhcnJheSh0aGlzLl9idWZmZXJJbmRleCwgdGhpcy5fYnVmZmVySW5kZXggKyBieXRlc1JlYWQpKVxuICAgIHRoaXMuX2N1cnJlbnRXb3JkID0gbmV3IERhdGFWaWV3KHdvcmQuYnVmZmVyKS5nZXRVaW50MzIoMClcblxuICAgIHRoaXMuX2J1ZmZlckluZGV4ICs9IGJ5dGVzUmVhZFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPSBieXRlc1JlYWQgKiA4XG4gIH1cblxuICByZWFkQml0cyAoc2l6ZSkge1xuICAgIGxldCBiaXRzID0gTWF0aC5taW4odGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCwgc2l6ZSk7Ly8gOnVpbnRcbiAgICBsZXQgdmFsdSA9IHRoaXMuX2N1cnJlbnRXb3JkID4+PiAoMzIgLSBiaXRzKTtcbiAgICBpZiAoc2l6ZSA+IDMyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZWFkIG1vcmUgdGhhbiAzMiBiaXRzIGF0IGEgdGltZScpO1xuICAgIH1cbiAgICB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0IC09IGJpdHM7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLl9jdXJyZW50V29yZCA8PD0gYml0cztcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3RvdGFsQnl0ZXMgLSB0aGlzLl9idWZmZXJJbmRleCA+IDApIHtcbiAgICAgIHRoaXMuX2ZpbGxDdXJyZW50V29yZCgpO1xuICAgIH1cblxuICAgIGJpdHMgPSBzaXplIC0gYml0cztcbiAgICBpZiAoYml0cyA+IDAgJiYgdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCkge1xuICAgICAgcmV0dXJuIHZhbHUgPDwgYml0cyB8IHRoaXMucmVhZEJpdHMoYml0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWx1O1xuICAgIH1cbiAgfVxuXG4gIHJlYWRCb29sICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkQml0cygxKSA9PT0gMVxuICB9XG5cbiAgcmVhZEJ5dGUgKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDgpXG4gIH1cblxuICBfc2tpcExlYWRpbmdaZXJvICgpIHtcbiAgICBsZXQgemVyb0NvdW50XG4gICAgZm9yICh6ZXJvQ291bnQgPSAwOyB6ZXJvQ291bnQgPCB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0OyB6ZXJvQ291bnQrKykge1xuICAgICAgaWYgKCh0aGlzLl9jdXJyZW50V29yZCAmICgweDgwMDAwMDAwID4+PiB6ZXJvQ291bnQpKSAhPT0gMCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50V29yZCA8PD0gemVyb0NvdW50XG4gICAgICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgLT0gemVyb0NvdW50XG4gICAgICAgIHJldHVybiB6ZXJvQ291bnRcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fZmlsbEN1cnJlbnRXb3JkKClcbiAgICByZXR1cm4gemVyb0NvdW50ICsgdGhpcy5fc2tpcExlYWRpbmdaZXJvKClcbiAgfVxuXG4gIHJlYWRVRUcgKCkgeyAvLyB1bnNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbiAgICBsZXQgbGVhZGluZ1plcm9zID0gdGhpcy5fc2tpcExlYWRpbmdaZXJvKClcbiAgICByZXR1cm4gdGhpcy5yZWFkQml0cyhsZWFkaW5nWmVyb3MgKyAxKSAtIDFcbiAgfVxuXG4gIHJlYWRTRUcgKCkgeyAvLyBzaWduZWQgZXhwb25lbnRpYWwgZ29sb21iXG4gICAgbGV0IHZhbHVlID0gdGhpcy5yZWFkVUVHKClcbiAgICBpZiAodmFsdWUgJiAweDAxKSB7XG4gICAgICByZXR1cm4gKHZhbHVlICsgMSkgPj4+IDFcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0xICogKHZhbHVlID4+PiAxKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHb2xvbWJcbiIsImltcG9ydCBTcHNQYXJzZXIgZnJvbSAnLi9zcHMnO1xuY2xhc3MgTmFsdW5pdCB7XG4gIHN0YXRpYyBnZXROYWx1bml0cyAoYnVmZmVyKSB7XG4gICAgaWYgKGJ1ZmZlci5sZW5ndGggLSBidWZmZXIucG9zaXRpb24gPCA0KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgbGV0IGJ1ZiA9IGJ1ZmZlci5kYXRhdmlldztcbiAgICBsZXQgcG9zaXRpb24gPSBidWZmZXIucG9zaXRpb247XG4gICAgaWYgKGJ1Zi5nZXRJbnQzMihwb3NpdGlvbikgPT09IDEgfHxcbiAgICAoYnVmLmdldEludDE2KHBvc2l0aW9uKSA9PT0gMCAmJiBidWYuZ2V0SW50OChwb3NpdGlvbiArIDIpID09PSAxKSkge1xuICAgICAgcmV0dXJuIE5hbHVuaXQuZ2V0QW5uZXhiTmFscyhidWZmZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTmFsdW5pdC5nZXRBdmNjTmFscyhidWZmZXIpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRBbm5leGJOYWxzIChidWZmZXIpIHtcbiAgICBsZXQgbmFscyA9IFtdO1xuICAgIGxldCBwb3NpdGlvbiA9IE5hbHVuaXQuZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIoYnVmZmVyKTtcbiAgICBsZXQgc3RhcnQgPSBwb3NpdGlvbi5wb3M7XG4gICAgbGV0IGVuZCA9IHN0YXJ0O1xuICAgIHdoaWxlIChzdGFydCA8IGJ1ZmZlci5sZW5ndGggLSA0KSB7XG4gICAgICBsZXQgaGVhZGVyID0gYnVmZmVyLmJ1ZmZlci5zbGljZShzdGFydCwgc3RhcnQgKyBwb3NpdGlvbi5oZWFkZXJMZW5ndGgpO1xuICAgICAgaWYgKHBvc2l0aW9uLnBvcyA9PT0gYnVmZmVyLnBvc2l0aW9uKSB7XG4gICAgICAgIGJ1ZmZlci5za2lwKHBvc2l0aW9uLmhlYWRlckxlbmd0aCk7XG4gICAgICB9XG4gICAgICBwb3NpdGlvbiA9IE5hbHVuaXQuZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIoYnVmZmVyKTtcbiAgICAgIGVuZCA9IHBvc2l0aW9uLnBvcztcbiAgICAgIGxldCBib2R5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlci5zbGljZShzdGFydCArIGhlYWRlci5ieXRlTGVuZ3RoLCBlbmQpKTtcbiAgICAgIGxldCB1bml0ID0ge2hlYWRlciwgYm9keX07XG4gICAgICBOYWx1bml0LmFuYWx5c2VOYWwodW5pdCk7XG4gICAgICBuYWxzLnB1c2godW5pdCk7XG4gICAgICBidWZmZXIuc2tpcChlbmQgLSBidWZmZXIucG9zaXRpb24pO1xuICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgfVxuICAgIHJldHVybiBuYWxzO1xuICB9XG5cbiAgc3RhdGljIGdldEF2Y2NOYWxzIChidWZmZXIpIHtcbiAgICBsZXQgbmFscyA9IFtdO1xuICAgIHdoaWxlIChidWZmZXIucG9zaXRpb24gPCBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgbGV0IGxlbmd0aCA9IGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQzMigpO1xuICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggLSBidWZmZXIucG9zaXRpb24gPj0gbGVuZ3RoKSB7XG4gICAgICAgIGxldCBoZWFkZXIgPSBidWZmZXIuYnVmZmVyLnNsaWNlKGJ1ZmZlci5wb3NpdGlvbiwgYnVmZmVyLnBvc2l0aW9uICsgNCk7XG4gICAgICAgIGJ1ZmZlci5za2lwKDQpXG4gICAgICAgIGxldCBib2R5ID0gYnVmZmVyLmJ1ZmZlci5zbGljZShidWZmZXIucG9zaXRpb24sIGJ1ZmZlci5wb3NpdGlvbiArIGxlbmd0aCk7XG4gICAgICAgIGJ1ZmZlci5za2lwKGxlbmd0aCk7XG4gICAgICAgIGxldCB1bml0ID0ge2hlYWRlciwgYm9keX07XG4gICAgICAgIE5hbHVuaXQuYW5hbHlzZU5hbCh1bml0KTtcbiAgICAgICAgbmFscy5wdXNoKHVuaXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuYWxzO1xuICB9XG5cbiAgc3RhdGljIGFuYWx5c2VOYWwgKHVuaXQpIHtcbiAgICBsZXQgdHlwZSA9IHVuaXQuYm9keVswXSAmIDB4MWY7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIC8vIE5EUlxuICAgICAgICB1bml0Lm5kciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICAvLyBJRFJcbiAgICAgICAgdW5pdC5pZHIgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjpcbiAgICAgICAgLy8gU0VJXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA3OlxuICAgICAgICAvLyBTUFNcbiAgICAgICAgdW5pdC5zcHMgPSBTcHNQYXJzZXIucGFyc2VTUFModW5pdC5ib2R5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIC8vIFBQU1xuICAgICAgICB1bml0LnBwcyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5OlxuICAgICAgICAvLyBBVURcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIgKGJ1ZmZlcikge1xuICAgIC8vIHNlcGVyYXRlXG4gICAgbGV0IHBvcyA9IGJ1ZmZlci5wb3NpdGlvbjtcbiAgICBsZXQgaGVhZGVyTGVuZ3RoID0gMDtcbiAgICB3aGlsZSAoaGVhZGVyTGVuZ3RoICE9PSAzICYmIGhlYWRlckxlbmd0aCAhPT0gNCAmJiBwb3MgPCBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MpID09PSAwKSB7XG4gICAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICAvLyAweDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDQ7XG4gICAgICAgIH0gZWxzZSBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDgocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICBoZWFkZXJMZW5ndGggPSAzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3MrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zID09PSBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MpID09PSAwKSB7XG4gICAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICAvLyAweDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgICBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDE2KHBvcykgPT09IDAgJiYgYnVmZmVyLmRhdGF2aWV3LmdldEludDgocG9zKSA9PT0gMSkge1xuICAgICAgICAgIC8vIDB4MDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9zID0gYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge3BvcywgaGVhZGVyTGVuZ3RofTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBdmNjIChzcHMsIHBwcykge1xuICAgIGxldCByZXQgPSBuZXcgVWludDhBcnJheShzcHMuYnl0ZUxlbmd0aCArIHBwcy5ieXRlTGVuZ3RoICsgMTEpO1xuICAgIHJldFswXSA9IDB4MDE7XG4gICAgcmV0WzFdID0gc3BzWzFdO1xuICAgIHJldFsyXSA9IHNwc1syXTtcbiAgICByZXRbM10gPSBzcHNbM107XG4gICAgcmV0WzRdID0gMjU1O1xuICAgIHJldFs1XSA9IDIyNTtcblxuICAgIGxldCBvZmZzZXQgPSA2O1xuXG4gICAgcmV0LnNldChuZXcgVWludDhBcnJheShbKHNwcy5ieXRlTGVuZ3RoID4+PiA4KSAmIDB4ZmYsIHNwcy5ieXRlTGVuZ3RoICYgMHhmZl0pLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSAyO1xuICAgIHJldC5zZXQoc3BzLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBzcHMuYnl0ZUxlbmd0aDtcblxuICAgIHJldFtvZmZzZXRdID0gMTtcbiAgICBvZmZzZXQrKztcblxuICAgIHJldC5zZXQobmV3IFVpbnQ4QXJyYXkoWyhwcHMuYnl0ZUxlbmd0aCA+Pj4gOCkgJiAweGZmLCBwcHMuYnl0ZUxlbmd0aCAmIDB4ZmZdKSwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gMjtcbiAgICByZXQuc2V0KHBwcywgb2Zmc2V0KTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5hbHVuaXQ7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgICovXG4vKiBlc2xpbnQtZGlzYWJsZSBvbmUtdmFyICAqL1xuaW1wb3J0IEdvbG9tYiBmcm9tICcuL2dvbG9tYidcblxuY2xhc3MgU1BTUGFyc2VyIHtcbiAgc3RhdGljIF9lYnNwMnJic3AgKHVpbnQ4YXJyYXkpIHtcbiAgICBsZXQgc3JjID0gdWludDhhcnJheVxuICAgIGxldCBzcmNMZW5ndGggPSBzcmMuYnl0ZUxlbmd0aFxuICAgIGxldCBkc3QgPSBuZXcgVWludDhBcnJheShzcmNMZW5ndGgpXG4gICAgbGV0IGRzdElkeCA9IDBcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3JjTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpID49IDIpIHtcbiAgICAgICAgaWYgKHNyY1tpXSA9PT0gMHgwMyAmJiBzcmNbaSAtIDFdID09PSAweDAwICYmIHNyY1tpIC0gMl0gPT09IDB4MDApIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkc3RbZHN0SWR4XSA9IHNyY1tpXVxuICAgICAgZHN0SWR4KytcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZHN0LmJ1ZmZlciwgMCwgZHN0SWR4KVxuICB9XG5cbiAgc3RhdGljIHBhcnNlU1BTICh1aW50OGFycmF5KSB7XG4gICAgbGV0IHJic3AgPSBTUFNQYXJzZXIuX2Vic3AycmJzcCh1aW50OGFycmF5KVxuICAgIGxldCBnYiA9IG5ldyBHb2xvbWIocmJzcClcblxuICAgIGdiLnJlYWRCeXRlKClcbiAgICBsZXQgcHJvZmlsZUlkYyA9IGdiLnJlYWRCeXRlKClcbiAgICBnYi5yZWFkQnl0ZSgpXG4gICAgbGV0IGxldmVsSWRjID0gZ2IucmVhZEJ5dGUoKVxuICAgIGdiLnJlYWRVRUcoKVxuXG4gICAgbGV0IHByb2ZpbGVfc3RyaW5nID0gU1BTUGFyc2VyLmdldFByb2ZpbGVTdHJpbmcocHJvZmlsZUlkYylcbiAgICBsZXQgbGV2ZWxfc3RyaW5nID0gU1BTUGFyc2VyLmdldExldmVsU3RyaW5nKGxldmVsSWRjKVxuICAgIGxldCBjaHJvbWFfZm9ybWF0X2lkYyA9IDFcbiAgICBsZXQgY2hyb21hX2Zvcm1hdCA9IDQyMFxuICAgIGxldCBjaHJvbWFfZm9ybWF0X3RhYmxlID0gWzAsIDQyMCwgNDIyLCA0NDRdXG4gICAgbGV0IGJpdF9kZXB0aCA9IDhcblxuICAgIGlmIChwcm9maWxlSWRjID09PSAxMDAgfHwgcHJvZmlsZUlkYyA9PT0gMTEwIHx8IHByb2ZpbGVJZGMgPT09IDEyMiB8fFxuICAgICAgcHJvZmlsZUlkYyA9PT0gMjQ0IHx8IHByb2ZpbGVJZGMgPT09IDQ0IHx8IHByb2ZpbGVJZGMgPT09IDgzIHx8XG4gICAgICBwcm9maWxlSWRjID09PSA4NiB8fCBwcm9maWxlSWRjID09PSAxMTggfHwgcHJvZmlsZUlkYyA9PT0gMTI4IHx8XG4gICAgICBwcm9maWxlSWRjID09PSAxMzggfHwgcHJvZmlsZUlkYyA9PT0gMTQ0KSB7XG4gICAgICBjaHJvbWFfZm9ybWF0X2lkYyA9IGdiLnJlYWRVRUcoKVxuICAgICAgaWYgKGNocm9tYV9mb3JtYXRfaWRjID09PSAzKSB7XG4gICAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgICB9XG4gICAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPD0gMykge1xuICAgICAgICBjaHJvbWFfZm9ybWF0ID0gY2hyb21hX2Zvcm1hdF90YWJsZVtjaHJvbWFfZm9ybWF0X2lkY11cbiAgICAgIH1cblxuICAgICAgYml0X2RlcHRoID0gZ2IucmVhZFVFRygpICsgOFxuICAgICAgZ2IucmVhZFVFRygpXG4gICAgICBnYi5yZWFkQml0cygxKVxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgbGV0IHNjYWxpbmdfbGlzdF9jb3VudCA9IChjaHJvbWFfZm9ybWF0X2lkYyAhPT0gMykgPyA4IDogMTJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2FsaW5nX2xpc3RfY291bnQ7IGkrKykge1xuICAgICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgICAgICBpZiAoaSA8IDYpIHtcbiAgICAgICAgICAgICAgU1BTUGFyc2VyLl9za2lwU2NhbGluZ0xpc3QoZ2IsIDE2KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgU1BTUGFyc2VyLl9za2lwU2NhbGluZ0xpc3QoZ2IsIDY0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnYi5yZWFkVUVHKClcbiAgICBsZXQgcGljX29yZGVyX2NudF90eXBlID0gZ2IucmVhZFVFRygpXG4gICAgaWYgKHBpY19vcmRlcl9jbnRfdHlwZSA9PT0gMCkge1xuICAgICAgZ2IucmVhZFVFRygpXG4gICAgfSBlbHNlIGlmIChwaWNfb3JkZXJfY250X3R5cGUgPT09IDEpIHtcbiAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgICBnYi5yZWFkU0VHKClcbiAgICAgIGdiLnJlYWRTRUcoKVxuICAgICAgbGV0IG51bV9yZWZfZnJhbWVzX2luX3BpY19vcmRlcl9jbnRfY3ljbGUgPSBnYi5yZWFkVUVHKClcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZTsgaSsrKSB7XG4gICAgICAgIGdiLnJlYWRTRUcoKVxuICAgICAgfVxuICAgIH1cbiAgICBnYi5yZWFkVUVHKClcbiAgICBnYi5yZWFkQml0cygxKVxuXG4gICAgbGV0IHBpY193aWR0aF9pbl9tYnNfbWludXMxID0gZ2IucmVhZFVFRygpXG4gICAgbGV0IHBpY19oZWlnaHRfaW5fbWFwX3VuaXRzX21pbnVzMSA9IGdiLnJlYWRVRUcoKVxuXG4gICAgbGV0IGZyYW1lX21ic19vbmx5X2ZsYWcgPSBnYi5yZWFkQml0cygxKVxuICAgIGlmIChmcmFtZV9tYnNfb25seV9mbGFnID09PSAwKSB7XG4gICAgICBnYi5yZWFkQml0cygxKVxuICAgIH1cbiAgICBnYi5yZWFkQml0cygxKVxuXG4gICAgbGV0IGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgPSAwXG4gICAgbGV0IGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0ID0gMFxuICAgIGxldCBmcmFtZV9jcm9wX3RvcF9vZmZzZXQgPSAwXG4gICAgbGV0IGZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCA9IDBcblxuICAgIGxldCBmcmFtZV9jcm9wcGluZ19mbGFnID0gZ2IucmVhZEJvb2woKVxuICAgIGlmIChmcmFtZV9jcm9wcGluZ19mbGFnKSB7XG4gICAgICBmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgICBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCA9IGdiLnJlYWRVRUcoKVxuICAgICAgZnJhbWVfY3JvcF90b3Bfb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgICBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQgPSBnYi5yZWFkVUVHKClcbiAgICB9XG5cbiAgICBsZXQgcGFyX3dpZHRoID0gMSwgcGFyX2hlaWdodCA9IDFcbiAgICBsZXQgZnBzID0gMCwgZnBzX2ZpeGVkID0gdHJ1ZSwgZnBzX251bSA9IDAsIGZwc19kZW4gPSAwXG5cbiAgICBsZXQgdnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnID0gZ2IucmVhZEJvb2woKVxuICAgIGlmICh2dWlfcGFyYW1ldGVyc19wcmVzZW50X2ZsYWcpIHtcbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7IC8vIGFzcGVjdF9yYXRpb19pbmZvX3ByZXNlbnRfZmxhZ1xuICAgICAgICBsZXQgYXNwZWN0X3JhdGlvX2lkYyA9IGdiLnJlYWRCeXRlKClcbiAgICAgICAgbGV0IHBhcl93X3RhYmxlID0gWzEsIDEyLCAxMCwgMTYsIDQwLCAyNCwgMjAsIDMyLCA4MCwgMTgsIDE1LCA2NCwgMTYwLCA0LCAzLCAyXVxuICAgICAgICBsZXQgcGFyX2hfdGFibGUgPSBbMSwgMTEsIDExLCAxMSwgMzMsIDExLCAxMSwgMTEsIDMzLCAxMSwgMTEsIDMzLCA5OSwgMywgMiwgMV1cblxuICAgICAgICBpZiAoYXNwZWN0X3JhdGlvX2lkYyA+IDAgJiYgYXNwZWN0X3JhdGlvX2lkYyA8IDE2KSB7XG4gICAgICAgICAgcGFyX3dpZHRoID0gcGFyX3dfdGFibGVbYXNwZWN0X3JhdGlvX2lkYyAtIDFdXG4gICAgICAgICAgcGFyX2hlaWdodCA9IHBhcl9oX3RhYmxlW2FzcGVjdF9yYXRpb19pZGMgLSAxXVxuICAgICAgICB9IGVsc2UgaWYgKGFzcGVjdF9yYXRpb19pZGMgPT09IDI1NSkge1xuICAgICAgICAgIHBhcl93aWR0aCA9IGdiLnJlYWRCeXRlKCkgPDwgOCB8IGdiLnJlYWRCeXRlKClcbiAgICAgICAgICBwYXJfaGVpZ2h0ID0gZ2IucmVhZEJ5dGUoKSA8PCA4IHwgZ2IucmVhZEJ5dGUoKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRCb29sKClcbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRCaXRzKDQpXG4gICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgICAgZ2IucmVhZEJpdHMoMjQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRVRUcoKVxuICAgICAgICBnYi5yZWFkVUVHKClcbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGxldCBudW1fdW5pdHNfaW5fdGljayA9IGdiLnJlYWRCaXRzKDMyKVxuICAgICAgICBsZXQgdGltZV9zY2FsZSA9IGdiLnJlYWRCaXRzKDMyKVxuICAgICAgICBmcHNfZml4ZWQgPSBnYi5yZWFkQm9vbCgpXG5cbiAgICAgICAgZnBzX251bSA9IHRpbWVfc2NhbGVcbiAgICAgICAgZnBzX2RlbiA9IG51bV91bml0c19pbl90aWNrICogMlxuICAgICAgICBmcHMgPSBmcHNfbnVtIC8gZnBzX2RlblxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwYXJTY2FsZSA9IDFcbiAgICBpZiAocGFyX3dpZHRoICE9PSAxIHx8IHBhcl9oZWlnaHQgIT09IDEpIHtcbiAgICAgIHBhclNjYWxlID0gcGFyX3dpZHRoIC8gcGFyX2hlaWdodFxuICAgIH1cblxuICAgIGxldCBjcm9wX3VuaXRfeCA9IDAsIGNyb3BfdW5pdF95ID0gMFxuICAgIGlmIChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMCkge1xuICAgICAgY3JvcF91bml0X3ggPSAxXG4gICAgICBjcm9wX3VuaXRfeSA9IDIgLSBmcmFtZV9tYnNfb25seV9mbGFnXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBzdWJfd2MgPSAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDMpID8gMSA6IDJcbiAgICAgIGxldCBzdWJfaGMgPSAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDEpID8gMiA6IDFcbiAgICAgIGNyb3BfdW5pdF94ID0gc3ViX3djXG4gICAgICBjcm9wX3VuaXRfeSA9IHN1Yl9oYyAqICgyIC0gZnJhbWVfbWJzX29ubHlfZmxhZylcbiAgICB9XG5cbiAgICBsZXQgY29kZWNfd2lkdGggPSAocGljX3dpZHRoX2luX21ic19taW51czEgKyAxKSAqIDE2XG4gICAgbGV0IGNvZGVjX2hlaWdodCA9ICgyIC0gZnJhbWVfbWJzX29ubHlfZmxhZykgKiAoKHBpY19oZWlnaHRfaW5fbWFwX3VuaXRzX21pbnVzMSArIDEpICogMTYpXG5cbiAgICBjb2RlY193aWR0aCAtPSAoZnJhbWVfY3JvcF9sZWZ0X29mZnNldCArIGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0KSAqIGNyb3BfdW5pdF94XG4gICAgY29kZWNfaGVpZ2h0IC09IChmcmFtZV9jcm9wX3RvcF9vZmZzZXQgKyBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQpICogY3JvcF91bml0X3lcblxuICAgIGxldCBwcmVzZW50X3dpZHRoID0gTWF0aC5jZWlsKGNvZGVjX3dpZHRoICogcGFyU2NhbGUpXG5cbiAgICBnYi5kZXN0cm95KClcbiAgICBnYiA9IG51bGxcblxuICAgIHJldHVybiB7XG4gICAgICBwcm9maWxlX3N0cmluZzogcHJvZmlsZV9zdHJpbmcsXG4gICAgICBsZXZlbF9zdHJpbmc6IGxldmVsX3N0cmluZyxcbiAgICAgIGJpdF9kZXB0aDogYml0X2RlcHRoLFxuICAgICAgY2hyb21hX2Zvcm1hdDogY2hyb21hX2Zvcm1hdCxcbiAgICAgIGNocm9tYV9mb3JtYXRfc3RyaW5nOiBTUFNQYXJzZXIuZ2V0Q2hyb21hRm9ybWF0U3RyaW5nKGNocm9tYV9mb3JtYXQpLFxuXG4gICAgICBmcmFtZV9yYXRlOiB7XG4gICAgICAgIGZpeGVkOiBmcHNfZml4ZWQsXG4gICAgICAgIGZwczogZnBzLFxuICAgICAgICBmcHNfZGVuOiBmcHNfZGVuLFxuICAgICAgICBmcHNfbnVtOiBmcHNfbnVtXG4gICAgICB9LFxuXG4gICAgICBwYXJfcmF0aW86IHtcbiAgICAgICAgd2lkdGg6IHBhcl93aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBwYXJfaGVpZ2h0XG4gICAgICB9LFxuXG4gICAgICBjb2RlY19zaXplOiB7XG4gICAgICAgIHdpZHRoOiBjb2RlY193aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjb2RlY19oZWlnaHRcbiAgICAgIH0sXG5cbiAgICAgIHByZXNlbnRfc2l6ZToge1xuICAgICAgICB3aWR0aDogcHJlc2VudF93aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjb2RlY19oZWlnaHRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX3NraXBTY2FsaW5nTGlzdCAoZ2IsIGNvdW50KSB7XG4gICAgbGV0IGxhc3Rfc2NhbGUgPSA4LCBuZXh0X3NjYWxlID0gOFxuICAgIGxldCBkZWx0YV9zY2FsZSA9IDBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIGlmIChuZXh0X3NjYWxlICE9PSAwKSB7XG4gICAgICAgIGRlbHRhX3NjYWxlID0gZ2IucmVhZFNFRygpXG4gICAgICAgIG5leHRfc2NhbGUgPSAobGFzdF9zY2FsZSArIGRlbHRhX3NjYWxlICsgMjU2KSAlIDI1NlxuICAgICAgfVxuICAgICAgbGFzdF9zY2FsZSA9IChuZXh0X3NjYWxlID09PSAwKSA/IGxhc3Rfc2NhbGUgOiBuZXh0X3NjYWxlXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFByb2ZpbGVTdHJpbmcgKHByb2ZpbGVJZGMpIHtcbiAgICBzd2l0Y2ggKHByb2ZpbGVJZGMpIHtcbiAgICAgIGNhc2UgNjY6XG4gICAgICAgIHJldHVybiAnQmFzZWxpbmUnXG4gICAgICBjYXNlIDc3OlxuICAgICAgICByZXR1cm4gJ01haW4nXG4gICAgICBjYXNlIDg4OlxuICAgICAgICByZXR1cm4gJ0V4dGVuZGVkJ1xuICAgICAgY2FzZSAxMDA6XG4gICAgICAgIHJldHVybiAnSGlnaCdcbiAgICAgIGNhc2UgMTEwOlxuICAgICAgICByZXR1cm4gJ0hpZ2gxMCdcbiAgICAgIGNhc2UgMTIyOlxuICAgICAgICByZXR1cm4gJ0hpZ2g0MjInXG4gICAgICBjYXNlIDI0NDpcbiAgICAgICAgcmV0dXJuICdIaWdoNDQ0J1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdVbmtub3duJ1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRMZXZlbFN0cmluZyAobGV2ZWxJZGMpIHtcbiAgICByZXR1cm4gKGxldmVsSWRjIC8gMTApLnRvRml4ZWQoMSlcbiAgfVxuXG4gIHN0YXRpYyBnZXRDaHJvbWFGb3JtYXRTdHJpbmcgKGNocm9tYSkge1xuICAgIHN3aXRjaCAoY2hyb21hKSB7XG4gICAgICBjYXNlIDQyMDpcbiAgICAgICAgcmV0dXJuICc0OjI6MCdcbiAgICAgIGNhc2UgNDIyOlxuICAgICAgICByZXR1cm4gJzQ6MjoyJ1xuICAgICAgY2FzZSA0NDQ6XG4gICAgICAgIHJldHVybiAnNDo0OjQnXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ1Vua25vd24nXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHRvVmlkZW9NZXRhIChzcHNDb25maWcpIHtcbiAgICBsZXQgbWV0YSA9IHt9XG4gICAgaWYgKHNwc0NvbmZpZyAmJiBzcHNDb25maWcuY29kZWNfc2l6ZSkge1xuICAgICAgbWV0YS5jb2RlY1dpZHRoID0gc3BzQ29uZmlnLmNvZGVjX3NpemUud2lkdGhcbiAgICAgIG1ldGEuY29kZWNIZWlnaHQgPSBzcHNDb25maWcuY29kZWNfc2l6ZS5oZWlnaHRcbiAgICAgIG1ldGEucHJlc2VudFdpZHRoID0gc3BzQ29uZmlnLnByZXNlbnRfc2l6ZS53aWR0aFxuICAgICAgbWV0YS5wcmVzZW50SGVpZ2h0ID0gc3BzQ29uZmlnLnByZXNlbnRfc2l6ZS5oZWlnaHRcbiAgICB9XG5cbiAgICBtZXRhLnByb2ZpbGUgPSBzcHNDb25maWcucHJvZmlsZV9zdHJpbmdcbiAgICBtZXRhLmxldmVsID0gc3BzQ29uZmlnLmxldmVsX3N0cmluZ1xuICAgIG1ldGEuYml0RGVwdGggPSBzcHNDb25maWcuYml0X2RlcHRoXG4gICAgbWV0YS5jaHJvbWFGb3JtYXQgPSBzcHNDb25maWcuY2hyb21hX2Zvcm1hdFxuXG4gICAgbWV0YS5wYXJSYXRpbyA9IHtcbiAgICAgIHdpZHRoOiBzcHNDb25maWcucGFyX3JhdGlvLndpZHRoLFxuICAgICAgaGVpZ2h0OiBzcHNDb25maWcucGFyX3JhdGlvLmhlaWdodFxuICAgIH1cblxuICAgIG1ldGEuZnJhbWVSYXRlID0gc3BzQ29uZmlnLmZyYW1lX3JhdGVcblxuICAgIGxldCBmcHNEZW4gPSBtZXRhLmZyYW1lUmF0ZS5mcHNfZGVuXG4gICAgbGV0IGZwc051bSA9IG1ldGEuZnJhbWVSYXRlLmZwc19udW1cbiAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcihtZXRhLnRpbWVzY2FsZSAqIChmcHNEZW4gLyBmcHNOdW0pKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNQU1BhcnNlclxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIEhMU1xuICBNM1U4UGFyc2VyOiByZXF1aXJlKCcuL3NyYy9obHMvZGVtdXhlci9tM3U4cGFyc2VyJykuZGVmYXVsdCxcbiAgVHNEZW11eGVyOiByZXF1aXJlKCcuL3NyYy9obHMvZGVtdXhlci90cycpLmRlZmF1bHQsXG4gIFBsYXlsaXN0OiByZXF1aXJlKCcuL3NyYy9obHMvcGxheWxpc3QnKS5kZWZhdWx0LFxuICBGbHZEZW11eGVyOiByZXF1aXJlKCcuL3NyYy9mbHYvaW5kZXgnKS5kZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgaXNMZSwgVVRGOCB9IGZyb20gJ3hncGxheWVyLXV0aWxzJ1xuXG5jb25zdCBEQVRBX1RZUEVTID0ge1xuICBOVU1CRVI6IDAsXG4gIEJPT0xFQU46IDEsXG4gIFNUUklORzogMixcbiAgT0JKRUNUOiAzLFxuICBNSVhfQVJSQVk6IDgsXG4gIE9CSkVDVF9FTkQ6IDksXG4gIFNUUklDVF9BUlJBWTogMTAsXG4gIERBVEU6IDExLFxuICBMT05FX1NUUklORzogMTJcbn1cblxuLyoqXG4gKiBtZXRh5L+h5oGv6Kej5p6QXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFNRlBhcnNlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLnJlYWRPZmZzZXQgPSB0aGlzLm9mZnNldFxuICB9XG5cbiAgcmVzb2x2ZSAobWV0YSwgc2l6ZSkge1xuICAgIGlmIChzaXplIDwgMykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgZW5vdWdoIGRhdGEgZm9yIG1ldGFpbmZvJylcbiAgICB9XG4gICAgY29uc3QgbWV0YURhdGEgPSB7fVxuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlVmFsdWUobWV0YSlcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucGFyc2VWYWx1ZShtZXRhLCBzaXplIC0gbmFtZS5ib2R5U2l6ZSlcbiAgICBtZXRhRGF0YVtuYW1lLmRhdGFdID0gdmFsdWUuZGF0YVxuXG4gICAgdGhpcy5yZXNldFN0YXR1cygpXG4gICAgcmV0dXJuIG1ldGFEYXRhXG4gIH1cblxuICByZXNldFN0YXR1cyAoKSB7XG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgdGhpcy5yZWFkT2Zmc2V0ID0gdGhpcy5vZmZzZXRcbiAgfVxuXG4gIHBhcnNlU3RyaW5nIChidWZmZXIpIHtcbiAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhidWZmZXIsIHRoaXMucmVhZE9mZnNldClcbiAgICBjb25zdCBzdHJMZW4gPSBkdi5nZXRVaW50MTYoMCwgIWlzTGUpXG4gICAgbGV0IHN0ciA9ICcnXG4gICAgaWYgKHN0ckxlbiA+IDApIHtcbiAgICAgIHN0ciA9IFVURjguZGVjb2RlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0ICsgMiwgc3RyTGVuKSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gJydcbiAgICB9XG4gICAgbGV0IHNpemUgPSBzdHJMZW4gKyAyXG4gICAgdGhpcy5yZWFkT2Zmc2V0ICs9IHNpemVcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogc3RyLFxuICAgICAgYm9keVNpemU6IHN0ckxlbiArIDJcbiAgICB9XG4gIH1cblxuICBwYXJzZURhdGUgKGJ1ZmZlciwgc2l6ZSkge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0LCBzaXplKVxuICAgIGxldCB0cyA9IGR2LmdldEZsb2F0NjQoMCwgIWlzTGUpXG4gICAgY29uc3QgdGltZU9mZnNldCA9IGR2LmdldEludDE2KDgsICFpc0xlKVxuICAgIHRzICs9IHRpbWVPZmZzZXQgKiA2MCAqIDEwMDBcblxuICAgIHRoaXMucmVhZE9mZnNldCArPSAxMFxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBuZXcgRGF0ZSh0cyksXG4gICAgICBib2R5U2l6ZTogMTBcbiAgICB9XG4gIH1cblxuICBwYXJzZU9iamVjdCAoYnVmZmVyLCBzaXplKSB7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBzaXplKVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKGJ1ZmZlciwgc2l6ZSAtIG5hbWUuYm9keVNpemUpXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbmFtZTogbmFtZS5kYXRhLFxuICAgICAgICB2YWx1ZTogdmFsdWUuZGF0YVxuICAgICAgfSxcbiAgICAgIGJvZHlTaXplOiBuYW1lLmJvZHlTaXplICsgdmFsdWUuYm9keVNpemUsXG4gICAgICBpc09iakVuZDogdmFsdWUuaXNPYmpFbmRcbiAgICB9XG4gIH1cblxuICBwYXJzZUxvbmdTdHJpbmcgKGJ1ZmZlcikge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0KVxuICAgIGNvbnN0IHN0ckxlbiA9IGR2LmdldFVpbnQzMigwLCAhaXNMZSlcbiAgICBsZXQgc3RyID0gJydcbiAgICBpZiAoc3RyTGVuID4gMCkge1xuICAgICAgc3RyID0gVVRGOC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQgKyAyLCBzdHJMZW4pKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSAnJ1xuICAgIH1cbiAgICAvLyBjb25zdCBzaXplID0gc3RyTGVuICsgNDtcbiAgICB0aGlzLnJlYWRPZmZzZXQgKz0gc3RyTGVuICsgNFxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBzdHIsXG4gICAgICBib2R5U2l6ZTogc3RyTGVuICsgNFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmnpBtZXRh5Lit55qE5Y+Y6YePXG4gICAqL1xuICBwYXJzZVZhbHVlIChkYXRhLCBzaXplKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigpXG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgYnVmZmVyID0gZGF0YVxuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIgPSBkYXRhLmJ1ZmZlclxuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBOVU1CRVIsXG4gICAgICBCT09MRUFOLFxuICAgICAgU1RSSU5HLFxuICAgICAgT0JKRUNULFxuICAgICAgTUlYX0FSUkFZLFxuICAgICAgT0JKRUNUX0VORCxcbiAgICAgIFNUUklDVF9BUlJBWSxcbiAgICAgIERBVEUsXG4gICAgICBMT05FX1NUUklOR1xuICAgIH0gPSBEQVRBX1RZUEVTXG4gICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQsIHNpemUpXG4gICAgbGV0IGlzT2JqRW5kID0gZmFsc2VcbiAgICBjb25zdCB0eXBlID0gZGF0YVZpZXcuZ2V0VWludDgoMClcbiAgICBsZXQgb2Zmc2V0ID0gMVxuICAgIHRoaXMucmVhZE9mZnNldCArPSAxXG4gICAgbGV0IHZhbHVlID0gbnVsbFxuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIE5VTUJFUjoge1xuICAgICAgICB2YWx1ZSA9IGRhdGFWaWV3LmdldEZsb2F0NjQoMSwgIWlzTGUpXG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSA4XG4gICAgICAgIG9mZnNldCArPSA4XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIEJPT0xFQU46IHtcbiAgICAgICAgY29uc3QgYm9vbE51bSA9IGRhdGFWaWV3LmdldFVpbnQ4KDEpXG4gICAgICAgIHZhbHVlID0gISFib29sTnVtXG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSAxXG4gICAgICAgIG9mZnNldCArPSAxXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIFNUUklORzoge1xuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlcilcbiAgICAgICAgdmFsdWUgPSBzdHIuZGF0YVxuICAgICAgICBvZmZzZXQgKz0gc3RyLmJvZHlTaXplXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIE9CSkVDVDoge1xuICAgICAgICB2YWx1ZSA9IHt9XG4gICAgICAgIGxldCBvYmpFbmRTaXplID0gMFxuICAgICAgICBpZiAoZGF0YVZpZXcuZ2V0VWludDMyKHNpemUgLSA0LCAhaXNMZSkgJiAweDAwRkZGRkZGKSB7XG4gICAgICAgICAgb2JqRW5kU2l6ZSA9IDNcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLnJlYWRPZmZzZXQgKz0gb2Zmc2V0IC0gMTtcbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IHNpemUgLSA0KSB7XG4gICAgICAgICAgY29uc3QgYW1mT2JqID0gdGhpcy5wYXJzZU9iamVjdChidWZmZXIsIHNpemUgLSBvZmZzZXQgLSBvYmpFbmRTaXplKVxuICAgICAgICAgIGlmIChhbWZPYmouaXNPYmplY3RFbmQpIHsgYnJlYWsgfVxuICAgICAgICAgIHZhbHVlW2FtZk9iai5kYXRhLm5hbWVdID0gYW1mT2JqLmRhdGEudmFsdWVcbiAgICAgICAgICBvZmZzZXQgKz0gYW1mT2JqLmJvZHlTaXplXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA8PSBzaXplIC0gMykge1xuICAgICAgICAgIGNvbnN0IG1hcmsgPSBkYXRhVmlldy5nZXRVaW50MzIob2Zmc2V0IC0gMSwgIWlzTGUpICYgMHgwMEZGRkZGRlxuICAgICAgICAgIGlmIChtYXJrID09PSA5KSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gM1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgTUlYX0FSUkFZOiB7XG4gICAgICAgIHZhbHVlID0ge31cbiAgICAgICAgb2Zmc2V0ICs9IDRcbiAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDRcbiAgICAgICAgbGV0IG9iakVuZFNpemUgPSAwXG4gICAgICAgIGlmICgoZGF0YVZpZXcuZ2V0VWludDMyKHNpemUgLSA0LCAhaXNMZSkgJiAweDAwRkZGRkZGKSA9PT0gOSkge1xuICAgICAgICAgIG9iakVuZFNpemUgPSAzXG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgc2l6ZSAtIDgpIHtcbiAgICAgICAgICBjb25zdCBhbWZWYXIgPSB0aGlzLnBhcnNlT2JqZWN0KGJ1ZmZlciwgc2l6ZSAtIG9mZnNldCAtIG9iakVuZFNpemUpXG4gICAgICAgICAgaWYgKGFtZlZhci5pc09iamVjdEVuZCkgeyBicmVhayB9XG4gICAgICAgICAgdmFsdWVbYW1mVmFyLmRhdGEubmFtZV0gPSBhbWZWYXIuZGF0YS52YWx1ZVxuICAgICAgICAgIG9mZnNldCArPSBhbWZWYXIuYm9keVNpemVcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0IDw9IHNpemUgLSAzKSB7XG4gICAgICAgICAgY29uc3QgbWFya2VyID0gZGF0YVZpZXcuZ2V0VWludDMyKG9mZnNldCAtIDEsICFpc0xlKSAmIDB4MDBGRkZGRkZcbiAgICAgICAgICBpZiAobWFya2VyID09PSA5KSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gM1xuICAgICAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBPQkpFQ1RfRU5EOiB7XG4gICAgICAgIHZhbHVlID0gbnVsbFxuICAgICAgICBpc09iakVuZCA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBTVFJJQ1RfQVJSQVk6IHtcbiAgICAgICAgdmFsdWUgPSBbXVxuICAgICAgICBjb25zdCBhcnJMZW5ndGggPSBkYXRhVmlldy5nZXRVaW50MzIoMSwgIWlzTGUpXG4gICAgICAgIG9mZnNldCArPSA0XG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSA0XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzY3JpcHQgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBzaXplIC0gb2Zmc2V0KVxuICAgICAgICAgIHZhbHVlLnB1c2goc2NyaXB0LmRhdGEpXG4gICAgICAgICAgb2Zmc2V0ICs9IHNjcmlwdC5ib2R5U2l6ZVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgREFURToge1xuICAgICAgICBjb25zdCBkYXRlID0gdGhpcy5wYXJzZURhdGUoYnVmZmVyLCBzaXplIC0gMSlcbiAgICAgICAgdmFsdWUgPSBkYXRlLmRhdGFcbiAgICAgICAgb2Zmc2V0ICs9IGRhdGUuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBMT05FX1NUUklORzoge1xuICAgICAgICBjb25zdCBsb25nU3RyID0gdGhpcy5wYXJzZUxvbmdTdHJpbmcoYnVmZmVyLCBzaXplIC0gMSlcbiAgICAgICAgdmFsdWUgPSBsb25nU3RyLmRhdGFcbiAgICAgICAgb2Zmc2V0ICs9IGxvbmdTdHIuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBvZmZzZXQgPSBzaXplXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHZhbHVlLFxuICAgICAgYm9keVNpemU6IG9mZnNldCxcbiAgICAgIGlzT2JqRW5kOiBpc09iakVuZFxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRVZFTlRTLCBBdWRpb1RyYWNrTWV0YSwgVmlkZW9UcmFja01ldGEgfSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5pbXBvcnQgeyBTcHNQYXJzZXIgfSBmcm9tICd4Z3BsYXllci1jb2RlYyc7XG5pbXBvcnQgeyBWaWRlb1RyYWNrLCBBdWRpb1RyYWNrIH0gZnJvbSAneGdwbGF5ZXItYnVmZmVyJ1xuXG5pbXBvcnQgQU1GUGFyc2VyIGZyb20gJy4vYW1mLXBhcnNlcidcblxuY29uc3QgREVNVVhfRVZFTlRTID0gRVZFTlRTLkRFTVVYX0VWRU5UUztcblxuY2xhc3MgRmx2RGVtdXhlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkID0gZmFsc2VcbiAgICB0aGlzLl90cmFja051bSA9IDBcbiAgICB0aGlzLl9oYXNTY3JpcHQgPSBmYWxzZVxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuREVNVVhfU1RBUlQsIHRoaXMuZG9QYXJzZUZsdi5iaW5kKHRoaXMpKVxuICB9XG5cbiAgLyoqXG4gICAqIGlmIHRoZSBmbHYgaGVhZCBpcyB2YWxpZFxuICAgKiBAcGFyYW0gZGF0YVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0ZsdkZpbGUgKGRhdGEpIHtcbiAgICByZXR1cm4gIShkYXRhWzBdICE9PSAweDQ2IHx8IGRhdGFbMV0gIT09IDB4NEMgfHwgZGF0YVsyXSAhPT0gMHg1NiB8fCBkYXRhWzNdICE9PSAweDAxKVxuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoZSBzdHJlYW0gaGFzIGF1ZGlvIG9yIHZpZGVvLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RyZWFtRmxhZyAtIERhdGEgZnJvbSB0aGUgc3RyZWFtIHdoaWNoIGlzIGRlZmluZSB3aGV0aGVyIHRoZSBhdWRpbyAvIHZpZGVvIHRyYWNrIGlzIGV4aXN0LlxuICAgKi9cbiAgc3RhdGljIGdldFBsYXlUeXBlIChzdHJlYW1GbGFnKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgaGFzVmlkZW86IGZhbHNlLFxuICAgICAgaGFzQXVkaW86IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHN0cmVhbUZsYWcgJiAweDAxID4gMCkge1xuICAgICAgcmVzdWx0Lmhhc1ZpZGVvID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChzdHJlYW1GbGFnICYgMHgwNCA+IDApIHtcbiAgICAgIHJlc3VsdC5oYXNBdWRpbyA9IHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBkb1BhcnNlRmx2ICgpIHtcbiAgICBpZiAoIXRoaXMuX2ZpcnN0RnJhZ21lbnRMb2FkZWQpIHtcbiAgICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPCAxMykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IGhlYWRlciA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEzKVxuICAgICAgdGhpcy5wYXJzZUZsdkhlYWRlcihoZWFkZXIpXG4gICAgICB0aGlzLmRvUGFyc2VGbHYoKSAvLyDpgJLlvZLosIPnlKjvvIznu6fnu63op6PmnpBmbHbmtYFcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA8IDExKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbGV0IGNodW5rO1xuXG4gICAgICBsZXQgbG9vcE1heCA9IDEwMDAwIC8vIOmYsuatouatu+W+queOr+S6p+eUn1xuICAgICAgZG8ge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnbWFyazQnKVxuICAgICAgICBjaHVuayA9IHRoaXMuX3BhcnNlRmx2VGFnKClcbiAgICAgIH0gd2hpbGUgKGNodW5rICYmIGxvb3BNYXgtLSA+IDApXG5cbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgfVxuICB9XG5cbiAgcGFyc2VGbHZIZWFkZXIgKGhlYWRlcikge1xuICAgIGlmICghRmx2RGVtdXhlci5pc0ZsdkZpbGUoaGVhZGVyKSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKCdpbnZhbGlkIGZsdiBmaWxlJykpXG4gICAgICB0aGlzLmRvUGFyc2VGbHYoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkID0gdHJ1ZVxuICAgICAgY29uc3QgcGxheVR5cGUgPSBGbHZEZW11eGVyLmdldFBsYXlUeXBlKGhlYWRlcls0XSlcblxuICAgICAgaWYgKHBsYXlUeXBlLmhhc1ZpZGVvKSB7XG4gICAgICAgIHRoaXMuaW5pdFZpZGVvVHJhY2soKVxuICAgICAgfVxuXG4gICAgICBpZiAocGxheVR5cGUuaGFzQXVkaW8pIHtcbiAgICAgICAgdGhpcy5pbml0QXVkaW9UcmFjaygpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZG9QYXJzZUZsdigpXG4gIH1cblxuICAvKipcbiAgICogaW5pdCBkZWZhdWx0IHZpZGVvIHRyYWNrIGNvbmZpZ3NcbiAgICovXG4gIGluaXRWaWRlb1RyYWNrICgpIHtcbiAgICB0aGlzLl90cmFja051bSsrXG4gICAgbGV0IHZpZGVvVHJhY2sgPSBuZXcgVmlkZW9UcmFjaygpXG4gICAgdmlkZW9UcmFjay5tZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKClcbiAgICB2aWRlb1RyYWNrLmlkID0gdmlkZW9UcmFjay5tZXRhLmlkID0gdGhpcy5fdHJhY2tOdW1cblxuICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2sgPSB2aWRlb1RyYWNrXG4gIH1cblxuICAvKipcbiAgICogaW5pdCBkZWZhdWx0IGF1ZGlvIHRyYWNrIGNvbmZpZ3NcbiAgICovXG4gIGluaXRBdWRpb1RyYWNrICgpIHtcbiAgICB0aGlzLl90cmFja051bSsrXG4gICAgbGV0IGF1ZGlvVHJhY2sgPSBuZXcgQXVkaW9UcmFjaygpXG4gICAgYXVkaW9UcmFjay5tZXRhID0gbmV3IEF1ZGlvVHJhY2tNZXRhKClcbiAgICBhdWRpb1RyYWNrLmlkID0gYXVkaW9UcmFjay5tZXRhLmlkID0gdGhpcy5fdHJhY2tOdW1cblxuICAgIHRoaXMudHJhY2tzLmF1ZGlvVHJhY2sgPSBhdWRpb1RyYWNrXG4gIH1cblxuICAvKipcbiAgICogUGFja2FnZSB0aGUgZGF0YSBhcyB0aGUgZm9sbG93aW5nIGRhdGEgc3RydWN0dXJlXG4gICAqIHtcbiAgICogICAgZGF0YTogVWludDhBcnJheS4gdGhlIFN0cmVhbSBkYXRhLlxuICAgKiAgICBpbmZvOiBUaGUgZmlyc3QgYnl0ZSBpbmZvIG9mIHRoZSBUYWcuXG4gICAqICAgIHRhZ1R5cGU6IDjjgIE544CBMThcbiAgICogICAgdGltZVN0YW1wOiB0aGUgdGltZXN0ZW1wXG4gICAqIH1cbiAgICovXG4gIF9wYXJzZUZsdlRhZyAoKSB7XG4gICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA8IDExKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBsZXQgY2h1bmsgPSB0aGlzLl9wYXJzZUZsdlRhZ0hlYWRlcigpXG4gICAgaWYgKGNodW5rKSB7XG4gICAgICB0aGlzLl9wcm9jZXNzQ2h1bmsoY2h1bmspXG4gICAgfVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSAxMSBieXRlIHRhZyBIZWFkZXJcbiAgICovXG4gIF9wYXJzZUZsdlRhZ0hlYWRlciAoKSB7XG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICBsZXQgY2h1bmsgPSB7fVxuXG4gICAgbGV0IHRhZ1R5cGUgPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludChvZmZzZXQsIDEpXG4gICAgb2Zmc2V0ICs9IDFcblxuICAgIC8vIDIgYml0IEZNUyByZXNlcnZlZCwgMSBiaXQgZmlsdGVyZWQsIDUgYml0IHRhZyB0eXBlXG4gICAgY2h1bmsuZmlsdGVyZWQgPSAodGFnVHlwZSAmIDMyKSA+Pj4gNVxuICAgIGNodW5rLnRhZ1R5cGUgPSB0YWdUeXBlICYgMzFcblxuICAgIC8vIDMgQnl0ZSBkYXRhc2l6ZVxuICAgIGNodW5rLmRhdGFzaXplID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQob2Zmc2V0LCAzKVxuICAgIG9mZnNldCArPSAzXG5cbiAgICBpZiAoKGNodW5rLnRhZ1R5cGUgIT09IDggJiYgY2h1bmsudGFnVHlwZSAhPT0gOSAmJiBjaHVuay50YWdUeXBlICE9PSAxMSAmJiBjaHVuay50YWdUeXBlICE9PSAxOCkgfHxcbiAgICAgIHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDgsIDMpICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIgJiYgdGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVxuICAgICAgfVxuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgdGhpcy5UQUcsIG5ldyBFcnJvcigndGFnVHlwZSAnICsgY2h1bmsudGFnVHlwZSksIGZhbHNlKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoIDwgY2h1bmsuZGF0YXNpemUgKyAxNSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICAvLyByZWFkIHRoZSBkYXRhLlxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpXG5cbiAgICAvLyAzIEJ5dGUgdGltZXN0YW1wXG4gICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDAsIDMpXG4gICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMylcblxuICAgIC8vIDEgQnl0ZSB0aW1lc3RhbXBFeHRcbiAgICBsZXQgdGltZXN0YW1wRXh0ID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBpZiAodGltZXN0YW1wRXh0ID4gMCkge1xuICAgICAgdGltZXN0YW1wICs9IHRpbWVzdGFtcEV4dCAqIDB4MTAwMDAwMFxuICAgIH1cblxuICAgIGNodW5rLmR0cyA9IHRpbWVzdGFtcFxuXG4gICAgLy8gc3RyZWFtSWRcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgX3Byb2Nlc3NDaHVuayAoY2h1bmspIHtcbiAgICBzd2l0Y2ggKGNodW5rLnRhZ1R5cGUpIHtcbiAgICAgIGNhc2UgMTg6XG4gICAgICAgIHRoaXMuX3BhcnNlU2NyaXB0RGF0YShjaHVuaylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgODpcbiAgICAgICAgdGhpcy5fcGFyc2VBQUNEYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSA5OlxuICAgICAgICB0aGlzLl9wYXJzZUhldmNEYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAxMTpcbiAgICAgICAgLy8gZm9yIHNvbWUgQ0ROIHRoYXQgZGlkIG5vdCBwcm9jZXNzIHRoZSBjdXJyZWN0IFJUTVAgbWVzc2FnZXNcbiAgICAgICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMylcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHBhcnNlIGZsdiBzY3JpcHQgZGF0YVxuICAgKiBAcGFyYW0gY2h1bmtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZVNjcmlwdERhdGEgKGNodW5rKSB7XG4gICAgbGV0IGF1ZGlvVHJhY2sgPSB0aGlzLnRyYWNrcy5hdWRpb1RyYWNrXG4gICAgbGV0IHZpZGVvVHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG5cbiAgICBsZXQgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplKVxuXG4gICAgY29uc3QgaW5mbyA9IG5ldyBBTUZQYXJzZXIoKS5yZXNvbHZlKGRhdGEsIGRhdGEubGVuZ3RoKVxuXG4gICAgY29uc3Qgb25NZXRhRGF0YSA9IHRoaXMuX2NvbnRleHQub25NZXRhRGF0YSA9IGluZm8gPyBpbmZvLm9uTWV0YURhdGEgOiB1bmRlZmluZWRcblxuICAgIC8vIGZpbGwgbWVkaWFJbmZvXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gPSBvbk1ldGFEYXRhLmR1cmF0aW9uXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaGFzVmlkZW8gPSBvbk1ldGFEYXRhLmhhc1ZpZGVvXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaHNhQXVkaW8gPSBvbk1ldGFEYXRhLmhhc0F1ZGlvXG5cbiAgICBsZXQgdmFsaWRhdGUgPSB0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSlcbiAgICBpZiAodmFsaWRhdGUpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVESUFfSU5GTylcbiAgICAgIHRoaXMuX2hhc1NjcmlwdCA9IHRydWVcbiAgICB9XG5cbiAgICAvLyBFZGl0IGRlZmF1bHQgbWV0YS5cbiAgICBpZiAoYXVkaW9UcmFjayAmJiAhYXVkaW9UcmFjay5oYXNTcGVjaWZpY0NvbmZpZykge1xuICAgICAgbGV0IG1ldGEgPSBhdWRpb1RyYWNrLm1ldGFcbiAgICAgIGlmIChvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZSkge1xuICAgICAgICBtZXRhLnNhbXBsZVJhdGUgPSBvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZVxuICAgICAgfVxuXG4gICAgICBpZiAob25NZXRhRGF0YS5hdWRpb2NoYW5uZWxzKSB7XG4gICAgICAgIG1ldGEuY2hhbm5lbENvdW50ID0gb25NZXRhRGF0YS5hdWRpb2NoYW5uZWxzXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAob25NZXRhRGF0YS5hdWRpb3NhbXBsZXJhdGUpIHtcbiAgICAgICAgY2FzZSA0NDEwMDpcbiAgICAgICAgICBtZXRhLnNhbXBsZVJhdGVJbmRleCA9IDRcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDIyMDUwOlxuICAgICAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gN1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTEwMjU6XG4gICAgICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSAxMFxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2aWRlb1RyYWNrICYmICF2aWRlb1RyYWNrLmhhc1NwZWNpZmljQ29uZmlnKSB7XG4gICAgICBsZXQgbWV0YSA9IHZpZGVvVHJhY2subWV0YVxuICAgICAgaWYgKHR5cGVvZiBvbk1ldGFEYXRhLmZyYW1lcmF0ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbGV0IGZwc051bSA9IE1hdGguZmxvb3Iob25NZXRhRGF0YS5mcmFtZXJhdGUgKiAxMDAwKVxuICAgICAgICBpZiAoZnBzTnVtID4gMCkge1xuICAgICAgICAgIGxldCBmcHMgPSBmcHNOdW0gLyAxMDAwXG4gICAgICAgICAgaWYgKCFtZXRhLmZyYW1lUmF0ZSkge1xuICAgICAgICAgICAgbWV0YS5mcmFtZVJhdGUgPSB7fVxuICAgICAgICAgIH1cbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5maXhlZCA9IHRydWVcbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHMgPSBmcHNcbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHNfbnVtID0gZnBzTnVtXG4gICAgICAgICAgbWV0YS5mcmFtZVJhdGUuZnBzX2RlbiA9IDEwMDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlciAoZGF0YSkge1xuICAgIGxldCByZXQgPSB7fVxuICAgIHJldC5oYXNTcGVjaWZpY0NvbmZpZyA9IHRydWVcbiAgICByZXQub2JqZWN0VHlwZSA9IGRhdGFbMV0gPj4+IDNcbiAgICByZXQuc2FtcGxlUmF0ZUluZGV4ID0gKChkYXRhWzFdICYgNykgPDwgMSkgfCAoZGF0YVsyXSA+Pj4gNylcbiAgICByZXQuYXVkaW9zYW1wbGVyYXRlID0gdGhpcy5fc3dpdGNoQXVkaW9TYW1wbGVSYXRlKHJldC5zYW1wbGVSYXRlSW5kZXgpXG4gICAgcmV0LmNoYW5uZWxDb3VudCA9IChkYXRhWzJdICYgMTIwKSA+Pj4gM1xuICAgIHJldC5mcmFtZUxlbmd0aCA9IChkYXRhWzJdICYgNCkgPj4+IDJcbiAgICByZXQuZGVwZW5kc09uQ29yZUNvZGVyID0gKGRhdGFbMl0gJiAyKSA+Pj4gMVxuICAgIHJldC5leHRlbnNpb25GbGFnSW5kZXggPSBkYXRhWzJdICYgMVxuXG4gICAgcmV0LmNvZGVjID0gYG1wNGEuNDAuJHtyZXQub2JqZWN0VHlwZX1gXG4gICAgbGV0IHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGV4dGVuc2lvblNhbXBsaW5nSW5kZXg7XG5cbiAgICBsZXQgY29uZmlnO1xuICAgIGxldCBzYW1wbGluZ0luZGV4ID0gcmV0LnNhbXBsZVJhdGVJbmRleDtcblxuICAgIGlmICh1c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpICE9PSAtMSkge1xuICAgICAgLy8gZmlyZWZveDogdXNlIFNCUiAoSEUtQUFDKSBpZiBmcmVxIGxlc3MgdGhhbiAyNGtIelxuICAgICAgaWYgKHJldC5zYW1wbGVSYXRlSW5kZXggPj0gNikge1xuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDU7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSg0KTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIHsgLy8gdXNlIExDLUFBQ1xuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDI7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh1c2VyQWdlbnQuaW5kZXhPZignYW5kcm9pZCcpICE9PSAtMSkge1xuICAgICAgLy8gYW5kcm9pZDogYWx3YXlzIHVzZSBMQy1BQUNcbiAgICAgIHJldC5vYmplY3RUeXBlID0gMjtcbiAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSBzYW1wbGluZ0luZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3Igb3RoZXIgYnJvd3NlcnMsIGUuZy4gY2hyb21lLi4uXG4gICAgICAvLyBBbHdheXMgdXNlIEhFLUFBQyB0byBtYWtlIGl0IGVhc2llciB0byBzd2l0Y2ggYWFjIGNvZGVjIHByb2ZpbGVcbiAgICAgIHJldC5vYmplY3RUeXBlID0gNTtcbiAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4O1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuXG4gICAgICBpZiAocmV0LnNhbXBsZVJhdGVJbmRleCA+PSA2KSB7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4IC0gMztcbiAgICAgIH0gZWxzZSBpZiAocmV0LmNoYW5uZWxDb3VudCA9PT0gMSkgeyAvLyBNb25vIGNoYW5uZWxcbiAgICAgICAgcmV0Lm9iamVjdFR5cGUgPSAyO1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbmZpZ1swXSA9IHJldC5vYmplY3RUeXBlIDw8IDM7XG4gICAgY29uZmlnWzBdIHw9IChyZXQuc2FtcGxlUmF0ZUluZGV4ICYgMHgwRikgPj4+IDE7XG4gICAgY29uZmlnWzFdID0gKHJldC5zYW1wbGVSYXRlSW5kZXggJiAweDBGKSA8PCA3O1xuICAgIGNvbmZpZ1sxXSB8PSAocmV0LmNoYW5uZWxDb3VudCAmIDB4MEYpIDw8IDM7XG4gICAgaWYgKHJldC5vYmplY3RUeXBlID09PSA1KSB7XG4gICAgICBjb25maWdbMV0gfD0gKChleHRlbnNpb25TYW1wbGluZ0luZGV4ICYgMHgwRikgPj4+IDEpO1xuICAgICAgY29uZmlnWzJdID0gKGV4dGVuc2lvblNhbXBsaW5nSW5kZXggJiAweDAxKSA8PCA3O1xuICAgICAgLy8gZXh0ZW5kZWQgYXVkaW8gb2JqZWN0IHR5cGU6IGZvcmNlIHRvIDIgKExDLUFBQylcbiAgICAgIGNvbmZpZ1syXSB8PSAoMiA8PCAyKTtcbiAgICAgIGNvbmZpZ1szXSA9IDA7XG4gICAgfVxuICAgIHJldC5jb25maWcgPSBjb25maWdcbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICBfcGFyc2VBQUNEYXRhIChjaHVuaykge1xuICAgIGxldCB0cmFjayA9IHRoaXMudHJhY2tzLmF1ZGlvVHJhY2tcbiAgICBpZiAoIXRyYWNrKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgbWV0YSA9IHRyYWNrLm1ldGFcblxuICAgIGlmICghbWV0YSkge1xuICAgICAgdHJhY2subWV0YSA9IG5ldyBBdWRpb1RyYWNrTWV0YSgpXG4gICAgICBtZXRhID0gdHJhY2subWV0YTtcbiAgICB9XG5cbiAgICBsZXQgaW5mbyA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdXG5cbiAgICBjaHVuay5kYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSAxKVxuXG4gICAgbGV0IGZvcm1hdCA9IChpbmZvICYgMjQwKSA+Pj4gNFxuXG4gICAgdHJhY2suZm9ybWF0ID0gZm9ybWF0XG5cbiAgICBpZiAoZm9ybWF0ICE9PSAxMCkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKGBpbnZhbGlkIGF1ZGlvIGZvcm1hdDogJHtmb3JtYXR9YCkpXG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdCA9PT0gMTAgJiYgIXRoaXMuX2hhc0F1ZGlvU2VxdWVuY2UpIHtcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IHRoaXMuX3N3aXRjaEF1ZGlvU2FtcGxpbmdGcmVxdWVuY3koaW5mbylcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gKGluZm8gJiAxMikgPj4+IDJcbiAgICAgIG1ldGEuZnJhbWVMZW50aCA9IChpbmZvICYgMikgPj4+IDFcbiAgICAgIG1ldGEuY2hhbm5lbENvdW50ID0gaW5mbyAmIDFcbiAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKDEwMjQgLyBtZXRhLmF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKVxuICAgIH1cblxuICAgIGxldCBhdWRpb1NhbXBsZVJhdGUgPSBtZXRhLmF1ZGlvU2FtcGxlUmF0ZVxuICAgIGxldCBhdWRpb1NhbXBsZVJhdGVJbmRleCA9IG1ldGEuc2FtcGxlUmF0ZUluZGV4XG4gICAgbGV0IHJlZlNhbXBsZUR1cmF0aW9uID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgZGVsZXRlIGNodW5rLnRhZ1R5cGVcbiAgICBsZXQgdmFsaWRhdGUgPSB0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSlcblxuICAgIGlmIChjaHVuay5kYXRhWzBdID09PSAwKSB7IC8vIEFBQyBTZXF1ZW5jZSBIZWFkZXJcbiAgICAgIGxldCBhYWNIZWFkZXIgPSB0aGlzLl9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlcihjaHVuay5kYXRhKVxuICAgICAgYXVkaW9TYW1wbGVSYXRlID0gYWFjSGVhZGVyLmF1ZGlvc2FtcGxlcmF0ZSB8fCBtZXRhLmF1ZGlvU2FtcGxlUmF0ZVxuICAgICAgYXVkaW9TYW1wbGVSYXRlSW5kZXggPSBhYWNIZWFkZXIuc2FtcGxlUmF0ZUluZGV4IHx8IG1ldGEuc2FtcGxlUmF0ZUluZGV4XG4gICAgICByZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IoMTAyNCAvIGF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKVxuXG4gICAgICBtZXRhLmNoYW5uZWxDb3VudCA9IGFhY0hlYWRlci5jaGFubmVsQ291bnRcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IGF1ZGlvU2FtcGxlUmF0ZVxuICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSBhdWRpb1NhbXBsZVJhdGVJbmRleFxuICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IHJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICBtZXRhLmR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gKiBtZXRhLnRpbWVzY2FsZVxuICAgICAgbWV0YS5jb25maWcgPSBhYWNIZWFkZXIuY29uZmlnXG5cbiAgICAgIGNvbnN0IGF1ZGlvTWVkaWEgPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5hdWRpb1xuXG4gICAgICAvLyBmaWxsIGF1ZGlvIG1lZGlhIGluZm9cbiAgICAgIGF1ZGlvTWVkaWEuY29kZWMgPSBhYWNIZWFkZXIuY29kZWNcbiAgICAgIGF1ZGlvTWVkaWEuY2hhbm5lbENvdW50ID0gYWFjSGVhZGVyLmNoYW5uZWxDb3VudFxuICAgICAgYXVkaW9NZWRpYS5zYW1wbGVSYXRlID0gYXVkaW9TYW1wbGVSYXRlXG4gICAgICBhdWRpb01lZGlhLnNhbXBsZVJhdGVJbmRleCA9IGFhY0hlYWRlci5hdWRpb1NhbXBsZVJhdGVJbmRleFxuXG4gICAgICBpZiAodGhpcy5faGFzU2NyaXB0ICYmICF0aGlzLl9oYXNBdWRpb1NlcXVlbmNlKSB7XG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAnYXVkaW8nKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9oYXNTY3JpcHQgJiYgdGhpcy5faGFzQXVkaW9TZXF1ZW5jZSkge1xuICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkFVRElPX01FVEFEQVRBX0NIQU5HRSlcbiAgICAgICAgLy8gdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICdhdWRpbycpXG4gICAgICB9XG4gICAgICB0aGlzLl9oYXNBdWRpb1NlcXVlbmNlID0gdHJ1ZVxuXG4gICAgICB0aGlzLl9tZXRhQ2hhbmdlID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5fbWV0YUNoYW5nZSkge1xuICAgICAgICBjaHVuay5vcHRpb25zID0ge1xuICAgICAgICAgIG1ldGE6IHRyYWNrLm1ldGFcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fbWV0YUNoYW5nZSA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGNodW5rLmRhdGEgPSBjaHVuay5kYXRhLnNsaWNlKDEsIGNodW5rLmRhdGEubGVuZ3RoKVxuICAgICAgdHJhY2suc2FtcGxlcy5wdXNoKGNodW5rKVxuICAgIH1cbiAgICBpZiAoIXZhbGlkYXRlKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKCdUQUcgbGVuZ3RoIGVycm9yIGF0ICcgKyBjaHVuay5kYXRhc2l6ZSksIGZhbHNlKVxuICAgICAgLy8gdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgZXJyb3IubWVzc2FnZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgaGV2Yy9hdmMgdmlkZW8gZGF0YVxuICAgKiBAcGFyYW0gY2h1bmtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZUhldmNEYXRhIChjaHVuaykge1xuICAgIC8vIGhlYWRlclxuICAgIGxldCBpbmZvID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBjaHVuay5mcmFtZVR5cGUgPSAoaW5mbyAmIDB4ZjApID4+PiA0XG4gICAgY2h1bmsuaXNLZXlmcmFtZSA9IGNodW5rLmZyYW1lVHlwZSA9PT0gMVxuICAgIC8vIGxldCB0ZW1wQ29kZWNJRCA9IHRoaXMudHJhY2tzLnZpZGVvVHJhY2suY29kZWNJRFxuICAgIGxldCBjb2RlY0lEID0gaW5mbyAmIDB4MGZcbiAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLmNvZGVjSUQgPSBjb2RlY0lEXG5cbiAgICAvLyBoZXZj5ZKMYXZj55qEaGVhZGVy6Kej5p6Q5pa55byP5LiA5qC3XG4gICAgY2h1bmsuYXZjUGFja2V0VHlwZSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdXG4gICAgY2h1bmsuY3RzID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwgMylcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuXG4gICAgLy8gMTIgZm9yIGhldmMsIDcgZm9yIGF2Y1xuICAgIGlmIChjb2RlY0lEID09PSAxMikge1xuICAgICAgY29uc3QgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gNSlcbiAgICAgIGNodW5rLmRhdGEgPSBkYXRhXG5cbiAgICAgIGlmIChOdW1iZXIucGFyc2VJbnQoY2h1bmsuYXZjUGFja2V0VHlwZSkgIT09IDApIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKSwgZmFsc2UpXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5hbHUgPSB7fVxuICAgICAgICBsZXQgciA9IDBcbiAgICAgICAgbmFsdS5jdHMgPSBjaHVuay5jdHNcbiAgICAgICAgbmFsdS5kdHMgPSBjaHVuay5kdHNcbiAgICAgICAgd2hpbGUgKGNodW5rLmRhdGEubGVuZ3RoID4gcikge1xuICAgICAgICAgIGxldCBzaXplcyA9IGNodW5rLmRhdGEuc2xpY2UoTnVtYmVyLnBhcnNlSW50KHIpLCA0ICsgcilcbiAgICAgICAgICBuYWx1LnNpemUgPSBzaXplc1szXVxuICAgICAgICAgIG5hbHUuc2l6ZSArPSBzaXplc1syXSAqIDI1NlxuICAgICAgICAgIG5hbHUuc2l6ZSArPSBzaXplc1sxXSAqIDI1NiAqIDI1NlxuICAgICAgICAgIG5hbHUuc2l6ZSArPSBzaXplc1swXSAqIDI1NiAqIDI1NiAqIDI1NlxuICAgICAgICAgIHIgKz0gNFxuICAgICAgICAgIG5hbHUuZGF0YSA9IGNodW5rLmRhdGEuc2xpY2UoTnVtYmVyLnBhcnNlSW50KHIpLCBuYWx1LnNpemUgKyByKVxuICAgICAgICAgIHIgKz0gbmFsdS5zaXplXG4gICAgICAgICAgdGhpcy50cmFja3MudmlkZW9UcmFjay5zYW1wbGVzLnB1c2gobmFsdSlcbiAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ3ZpZGVvJylcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChOdW1iZXIucGFyc2VJbnQoY2h1bmsuYXZjUGFja2V0VHlwZSkgPT09IDApIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKSwgZmFsc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvZGVjSUQgPT09IDcpIHtcbiAgICAgIGxldCBkYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSA1KVxuICAgICAgaWYgKGRhdGFbNF0gPT09IDAgJiYgZGF0YVs1XSA9PT0gMCAmJiBkYXRhWzZdID09PSAwICYmIGRhdGFbN10gPT09IDEpIHtcbiAgICAgICAgbGV0IGF2Y2NsZW5ndGggPSAwXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgYXZjY2xlbmd0aCA9IGF2Y2NsZW5ndGggKiAyNTYgKyBkYXRhW2ldXG4gICAgICAgIH1cbiAgICAgICAgYXZjY2xlbmd0aCAtPSA0XG4gICAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKDQsIGRhdGEubGVuZ3RoKVxuICAgICAgICBkYXRhWzNdID0gYXZjY2xlbmd0aCAlIDI1NlxuICAgICAgICBhdmNjbGVuZ3RoID0gKGF2Y2NsZW5ndGggLSBkYXRhWzNdKSAvIDI1NlxuICAgICAgICBkYXRhWzJdID0gYXZjY2xlbmd0aCAlIDI1NlxuICAgICAgICBhdmNjbGVuZ3RoID0gKGF2Y2NsZW5ndGggLSBkYXRhWzJdKSAvIDI1NlxuICAgICAgICBkYXRhWzFdID0gYXZjY2xlbmd0aCAlIDI1NlxuICAgICAgICBkYXRhWzBdID0gKGF2Y2NsZW5ndGggLSBkYXRhWzFdKSAvIDI1NlxuICAgICAgfVxuXG4gICAgICBjaHVuay5kYXRhID0gZGF0YVxuICAgICAgLy8gSWYgaXQgaXMgQVZDIHNlcXVlY2UgSGVhZGVyLlxuICAgICAgaWYgKGNodW5rLmF2Y1BhY2tldFR5cGUgPT09IDApIHtcbiAgICAgICAgdGhpcy5fYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIoY2h1bmsuZGF0YSlcbiAgICAgICAgbGV0IHZhbGlkYXRlID0gdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoY2h1bmsuZGF0YXNpemUpXG4gICAgICAgIGlmICh2YWxpZGF0ZSkge1xuICAgICAgICAgIGlmICh0aGlzLl9oYXNTY3JpcHQgJiYgIXRoaXMuX2hhc1ZpZGVvU2VxdWVuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5faGFzU2NyaXB0ICYmIHRoaXMuX2hhc1ZpZGVvU2VxdWVuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuVklERU9fTUVUQURBVEFfQ0hBTkdFKVxuICAgICAgICAgICAgLy8gdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX2hhc1ZpZGVvU2VxdWVuY2UgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWV0YUNoYW5nZSA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoY2h1bmsuZGF0YXNpemUpKSB7XG4gICAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgdGhpcy5UQUcsIG5ldyBFcnJvcihgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7Y2h1bmsuZGF0YXNpemV9YCksIGZhbHNlKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbWV0YUNoYW5nZSkge1xuICAgICAgICAgIGNodW5rLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtZXRhOiBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLm1ldGEpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX21ldGFDaGFuZ2UgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2suc2FtcGxlcy5wdXNoKGNodW5rKVxuICAgICAgICAvLyB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKGB2aWRlbyBjb2RlaWQgaXMgJHtjb2RlY0lEfWApLCBmYWxzZSlcbiAgICAgIGNodW5rLmRhdGEgPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdChjaHVuay5kYXRhc2l6ZSAtIDEpXG4gICAgICBpZiAoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKSkge1xuICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKSwgZmFsc2UpXG4gICAgICB9XG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChjaHVuaylcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgfVxuICAgIGRlbGV0ZSBjaHVuay50YWdUeXBlXG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgYXZjIG1ldGFkYXRhXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIgKGRhdGEpIHtcbiAgICBsZXQgdHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG5cbiAgICBpZiAoIXRyYWNrKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgaWYgKCF0cmFjay5tZXRhKSB7XG4gICAgICB0cmFjay5tZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKClcbiAgICB9XG4gICAgbGV0IG1ldGEgPSB0cmFjay5tZXRhXG5cbiAgICBtZXRhLmNvbmZpZ3VyYXRpb25WZXJzaW9uID0gZGF0YVswXVxuICAgIG1ldGEuYXZjUHJvZmlsZUluZGljYXRpb24gPSBkYXRhWzFdXG4gICAgbWV0YS5wcm9maWxlQ29tcGF0aWJpbGl0eSA9IGRhdGFbMl1cbiAgICBtZXRhLmF2Y0xldmVsSW5kaWNhdGlvbiA9IGRhdGFbM10gLyAxMFxuICAgIG1ldGEubmFsVW5pdExlbmd0aCA9IChkYXRhWzRdICYgMHgwMykgKyAxXG5cbiAgICBsZXQgbnVtT2ZTcHMgPSBkYXRhWzVdICYgMHgxZlxuICAgIG9mZnNldCA9IDZcbiAgICBsZXQgY29uZmlnID0ge31cblxuICAgIC8vIHBhcnNlIFNQU1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZTcHM7IGkrKykge1xuICAgICAgbGV0IHNpemUgPSBkYXRhW29mZnNldF0gKiAyNTUgKyBkYXRhW29mZnNldCArIDFdXG4gICAgICBvZmZzZXQgKz0gMlxuXG4gICAgICBsZXQgc3BzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHNwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cblxuICAgICAgLy8gY29kZWMgc3RyaW5nXG4gICAgICBsZXQgY29kZWNTdHJpbmcgPSAnYXZjMS4nXG4gICAgICBmb3IgKGxldCBqID0gMTsgaiA8IDQ7IGorKykge1xuICAgICAgICBsZXQgaCA9IHNwc1tqXS50b1N0cmluZygxNilcbiAgICAgICAgaWYgKGgubGVuZ3RoIDwgMikge1xuICAgICAgICAgIGggPSAnMCcgKyBoXG4gICAgICAgIH1cbiAgICAgICAgY29kZWNTdHJpbmcgKz0gaFxuICAgICAgfVxuXG4gICAgICBtZXRhLmNvZGVjID0gY29kZWNTdHJpbmdcblxuICAgICAgb2Zmc2V0ICs9IHNpemVcbiAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YS5zcHMgPSBzcHNcbiAgICAgIGNvbmZpZyA9IFNwc1BhcnNlci5wYXJzZVNQUyhzcHMpXG4gICAgfVxuXG4gICAgbGV0IG51bU9mUHBzID0gZGF0YVtvZmZzZXRdXG5cbiAgICBvZmZzZXQrK1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PZlBwczsgaSsrKSB7XG4gICAgICBsZXQgc2l6ZSA9IGRhdGFbb2Zmc2V0XSAqIDI1NSArIGRhdGFbb2Zmc2V0ICsgMV1cbiAgICAgIG9mZnNldCArPSAyXG4gICAgICBsZXQgcHBzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHBwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSBzaXplXG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLm1ldGEucHBzID0gcHBzXG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihtZXRhLCBTcHNQYXJzZXIudG9WaWRlb01ldGEoY29uZmlnKSlcblxuICAgIC8vIGZpbGwgdmlkZW8gbWVkaWEgaW5mb1xuICAgIGNvbnN0IHZpZGVvTWVkaWEgPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby52aWRlb1xuXG4gICAgdmlkZW9NZWRpYS5jb2RlYyA9IG1ldGEuY29kZWNcbiAgICB2aWRlb01lZGlhLnByb2ZpbGUgPSBtZXRhLnByb2ZpbGVcbiAgICB2aWRlb01lZGlhLmxldmVsID0gbWV0YS5sZXZlbFxuICAgIHZpZGVvTWVkaWEuY2hyb21hRm9ybWF0ID0gbWV0YS5jaHJvbWFGb3JtYXRcbiAgICB2aWRlb01lZGlhLmZyYW1lUmF0ZSA9IG1ldGEuZnJhbWVSYXRlXG4gICAgdmlkZW9NZWRpYS5wYXJSYXRpbyA9IG1ldGEucGFyUmF0aW9cbiAgICB2aWRlb01lZGlhLndpZHRoID0gdmlkZW9NZWRpYS53aWR0aCA9PT0gbWV0YS5wcmVzZW50V2lkdGggPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50V2lkdGhcbiAgICB2aWRlb01lZGlhLmhlaWdodCA9IHZpZGVvTWVkaWEuaGVpZ2h0ID09PSBtZXRhLnByZXNlbnRIZWlnaHQgPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50SGVpZ2h0XG5cbiAgICBtZXRhLmR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gKiBtZXRhLnRpbWVzY2FsZVxuICAgIG1ldGEuYXZjYyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKVxuICAgIG1ldGEuYXZjYy5zZXQoZGF0YSlcbiAgICB0cmFjay5tZXRhID0gbWV0YVxuICB9XG5cbiAgLyoqXG4gICAqIGNob29zZSBhdWRpbyBzYW1wbGUgcmF0ZVxuICAgKiBAcGFyYW0gc2FtcGxpbmdGcmVxdWVuY3lJbmRleFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvU2FtcGxlUmF0ZSAoc2FtcGxpbmdGcmVxdWVuY3lJbmRleCkge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3QgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gc2FtcGxpbmcgZnJlcXVlbmNlXG4gICAqIEBwYXJhbSBpbmZvXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3dpdGNoQXVkaW9TYW1wbGluZ0ZyZXF1ZW5jeSAoaW5mbykge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4ID0gKGluZm8gJiAxMikgPj4+IDJcbiAgICBsZXQgc2FtcGxpbmdGcmVxdWVuY3lMaXN0ID0gWzU1MDAsIDExMDI1LCAyMjA1MCwgNDQxMDAsIDQ4MDAwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gY2hhbm5lbCBjb3VudFxuICAgKiBAcGFyYW0gaW5mb1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvQ2hhbm5lbCAoaW5mbykge1xuICAgIGxldCBzYW1wbGVUcmFja051bUluZGV4ID0gaW5mbyAmIDFcbiAgICBsZXQgc2FtcGxlVHJhY2tOdW1MaXN0ID0gWzEsIDJdXG4gICAgcmV0dXJuIHNhbXBsZVRyYWNrTnVtTGlzdFtzYW1wbGVUcmFja051bUluZGV4XVxuICB9XG5cbiAgLyoqXG4gICAqIGNoZWNrIGRhdGFzaXplIGlzIHZhbGlkIHVzZSA0IEJ5dGUgYWZ0ZXIgY3VycmVudCB0YWdcbiAgICogQHBhcmFtIGRhdGFzaXplXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RhdGFzaXplVmFsaWRhdG9yIChkYXRhc2l6ZSkge1xuICAgIGxldCBkYXRhc2l6ZUNvbmZpcm0gPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludCgwLCA0KVxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpXG4gICAgcmV0dXJuIGRhdGFzaXplQ29uZmlybSA9PT0gZGF0YXNpemUgKyAxMVxuICB9XG5cbiAgZ2V0IGxvYWRlckJ1ZmZlciAoKSB7XG4gICAgY29uc3QgYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTE9BREVSX0JVRkZFUicpXG4gICAgaWYgKGJ1ZmZlcikge1xuICAgICAgcmV0dXJuIGJ1ZmZlclxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBuZXcgRXJyb3IoJ+aJvuS4jeWIsCBsb2FkZXJCdWZmZXIg5a6e5L6LJykpXG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gIH1cblxuICBnZXQgbG9nZ2VyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTE9HR0VSJylcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGbHZEZW11eGVyXG4iLCIvKipcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgyMTYjc2VjdGlvbi00LjNcbiAqL1xuY2xhc3MgTTNVOFBhcnNlciB7XG4gIHN0YXRpYyBwYXJzZSAodGV4dCwgYmFzZXVybCA9ICcnKSB7XG4gICAgbGV0IHJldCA9IHtcbiAgICAgIGR1cmF0aW9uOiAwXG4gICAgfTtcbiAgICBpZiAoIXRleHQgfHwgIXRleHQuc3BsaXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHJlZnMgPSB0ZXh0LnNwbGl0KC9cXHJ8XFxuLyk7XG4gICAgcmVmcyA9IHJlZnMuZmlsdGVyKChyZWYpID0+IHtcbiAgICAgIHJldHVybiByZWY7XG4gICAgfSlcbiAgICBsZXQgcmVmID0gcmVmcy5zaGlmdCgpXG4gICAgaWYgKCFyZWYubWF0Y2goJyNFWFRNM1UnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG0zdTggZmlsZTogbm90IFwiI0VYVE0zVVwiYCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmVmID0gcmVmcy5zaGlmdCgpO1xuICAgIGxldCBuZXh0RGlzY29udGludWUgPSBmYWxzZTtcbiAgICB3aGlsZSAocmVmKSB7XG4gICAgICBsZXQgcmVmbSA9IHJlZi5tYXRjaCgvIyguW0EtWnwtXSopOiguKikvKTtcbiAgICAgIGxldCByZWZkID0gcmVmLm1hdGNoKC8jKC5bQS1afC1dKikvKTtcbiAgICAgIGlmIChyZWZkICYmIHJlZm0gJiYgcmVmbS5sZW5ndGggPiAyKSB7XG4gICAgICAgIHN3aXRjaCAocmVmbVsxXSkge1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLVZFUlNJT04nOlxuICAgICAgICAgICAgcmV0LnZlcnNpb24gPSBwYXJzZUludChyZWZtWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLU1FRElBLVNFUVVFTkNFJzpcbiAgICAgICAgICAgIHJldC5zZXF1ZW5jZSA9IHBhcnNlSW50KHJlZm1bMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnRVhULVgtVEFSR0VURFVSQVRJT04nOlxuICAgICAgICAgICAgcmV0LnRhcmdldGR1cmF0aW9uID0gcGFyc2VGbG9hdChyZWZtWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVElORic6XG4gICAgICAgICAgICBNM1U4UGFyc2VyLnBhcnNlRnJhZyhyZWZtLCByZWZzLCByZXQsIGJhc2V1cmwsIG5leHREaXNjb250aW51ZSk7XG4gICAgICAgICAgICBuZXh0RGlzY29udGludWUgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLUtFWSc6XG4gICAgICAgICAgICBNM1U4UGFyc2VyLnBhcnNlRGVjcnlwdChyZWZtWzJdLHJldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gaWYgKHJlZmQgJiYgcmVmZC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHN3aXRjaCAocmVmZFsxXSkge1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLURJU0NPTlRJTlVJVFknOlxuICAgICAgICAgICAgbmV4dERpc2NvbnRpbnVlID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVmID0gcmVmcy5zaGlmdCgpXG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VGcmFnIChyZWZtLCByZWZzLCByZXQsIGJhc2V1cmwsIGRpc2NvbnRpbnVlKSB7XG4gICAgaWYgKCFyZXQuZnJhZ3MpIHtcbiAgICAgIHJldC5mcmFncyA9IFtdXG4gICAgfVxuXG4gICAgbGV0IGZyZWcgPSB7XG4gICAgICBzdGFydDogcmV0LmR1cmF0aW9uLFxuICAgICAgZHVyYXRpb246IHBhcnNlRmxvYXQocmVmbVsyXSkgKiAxMDAwXG4gICAgfVxuXG4gICAgcmV0LmR1cmF0aW9uICs9IGZyZWcuZHVyYXRpb247XG4gICAgbGV0IG5leHRsaW5lID0gcmVmcy5zaGlmdCgpO1xuICAgIGlmIChuZXh0bGluZS5tYXRjaCgvIyguKik6KC4qKS8pKSB7XG4gICAgICBuZXh0bGluZSA9IHJlZnMuc2hpZnQoKTtcbiAgICB9XG4gICAgaWYgKG5leHRsaW5lLmxlbmd0aCA+IDAgJiYgbmV4dGxpbmUuY2hhckF0KDApID09PSAnLycgJiYgYmFzZXVybC5tYXRjaCgvLipcXC9cXC8uKlxcLlxcdysvZykpIHtcbiAgICAgIGJhc2V1cmwgPSBiYXNldXJsLm1hdGNoKC8uKlxcL1xcLy4qXFwuXFx3Ky9nKVswXTtcbiAgICB9XG4gICAgaWYgKG5leHRsaW5lLm1hdGNoKC8uKjpcXC9cXC8uKi8pKSB7XG4gICAgICBmcmVnLnVybCA9IG5leHRsaW5lO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcmVnLnVybCA9IGJhc2V1cmwgKyBuZXh0bGluZTtcbiAgICB9XG4gICAgZnJlZy5kaXNjb250aW51ZSA9IGRpc2NvbnRpbnVlO1xuICAgIHJldC5mcmFncy5wdXNoKGZyZWcpO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlVVJMICh1cmwpIHtcbiAgICBsZXQgYmFzZXVybCA9ICcnO1xuICAgIGxldCB1cmxzID0gdXJsLm1hdGNoKC8oLipcXC8pLipcXC5tM3U4Lyk7XG4gICAgaWYgKHVybHMgJiYgdXJscy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHVybHNbaV0ubWF0Y2goLy4qXFwvJC9nKSAmJiB1cmxzW2ldLmxlbmd0aCA+IGJhc2V1cmwubGVuZ3RoKSB7XG4gICAgICAgICAgYmFzZXVybCA9IHVybHNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJhc2V1cmw7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VEZWNyeXB0KHJlZm0sIHJldCkge1xuICAgIHJldC5lbmNyeXB0ID0ge307XG4gICAgbGV0IHJlZnMgPSByZWZtLnNwbGl0KCcsJyk7XG4gICAgZm9yIChsZXQgaSBpbiByZWZzKSB7IFxuICAgICAgbGV0IGNtZCA9IHJlZnNbaV07XG4gICAgICBpZihjbWQubWF0Y2goL01FVEhPRD0oLiopLykpIHtcbiAgICAgICAgcmV0LmVuY3J5cHQubWV0aG9kID0gY21kLm1hdGNoKC9NRVRIT0Q9KC4qKS8pWzFdO1xuICAgICAgfVxuICAgICAgaWYoY21kLm1hdGNoKC9VUkk9XCIoLiopXCIvKSkge1xuICAgICAgICByZXQuZW5jcnlwdC51cmkgPSBjbWQubWF0Y2goL1VSST1cIiguKilcIi8pWzFdO1xuICAgICAgfVxuXG4gICAgICBpZihjbWQubWF0Y2goL0lWPTB4KC4qKS8pKSB7XG4gICAgICAgIGxldCBpdiA9IGNtZC5tYXRjaCgvSVY9MHgoLiopLylbMV07XG4gICAgICAgIGxldCBsZW5ndGggPSBNYXRoLmNlaWwoaXYubGVuZ3RoIC8gMik7XG4gICAgICAgIHJldC5lbmNyeXB0Lml2YiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICAgIGZvcihsZXQgaSA9IGxlbmd0aCAtIDE7IGkgPj0wOyBpLS0pIHtcbiAgICAgICAgICBsZXQgaW0gPSBwYXJzZUludChpdi5zdWJzdHIoaSAqIDIsIDIpLCAxNik7XG4gICAgICAgICAgcmV0LmVuY3J5cHQuaXZiW2ldID0gaW07XG4gICAgICAgIH0gXG4gICAgICAgIHJldC5lbmNyeXB0Lml2ID0gaXY7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNM1U4UGFyc2VyO1xuIiwiaW1wb3J0IHsgTmFsdW5pdCB9IGZyb20gJ3hncGxheWVyLWNvZGVjJztcbmltcG9ydCB7IEF1ZGlvVHJhY2ssIFZpZGVvVHJhY2sgfSBmcm9tICd4Z3BsYXllci1idWZmZXInO1xuaW1wb3J0IHtcbiAgQXVkaW9UcmFja01ldGEsXG4gIFZpZGVvVHJhY2tNZXRhLFxuICBBdWRpb1RyYWNrU2FtcGxlLFxuICBWaWRlb1RyYWNrU2FtcGxlLFxuICBFVkVOVFMsXG4gIFN0cmVhbVxufSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5cbmNvbnN0IERFTVVYX0VWRU5UUyA9IEVWRU5UUy5ERU1VWF9FVkVOVFM7XG5jb25zdCBTdHJlYW1UeXBlID0ge1xuICAweDAxOiBbJ3ZpZGVvJywgJ01QRUctMSddLFxuICAweDAyOiBbJ3ZpZGVvJywgJ01QRUctMiddLFxuICAweDFiOiBbJ3ZpZGVvJywgJ0FWQy5IMjY0J10sXG4gIDB4ZWE6IFsndmlkZW8nLCAnVkMtMSddLFxuICAweDAzOiBbJ2F1ZGlvJywgJ01QRUctMSddLFxuICAweDA0OiBbJ2F1ZGlvJywgJ01QRUctMiddLFxuICAweDBmOiBbJ2F1ZGlvJywgJ01QRUctMi5BQUMnXSxcbiAgMHgxMTogWydhdWRpbycsICdNUEVHLTQuQUFDJ10sXG4gIDB4ODA6IFsnYXVkaW8nLCAnTFBDTSddLFxuICAweDgxOiBbJ2F1ZGlvJywgJ0FDMyddLFxuICAweDA2OiBbJ2F1ZGlvJywgJ0FDMyddLFxuICAweDgyOiBbJ2F1ZGlvJywgJ0RUUyddLFxuICAweDgzOiBbJ2F1ZGlvJywgJ0RvbGJ5IFRydWVIRCddLFxuICAweDg0OiBbJ2F1ZGlvJywgJ0FDMy1QbHVzJ10sXG4gIDB4ODU6IFsnYXVkaW8nLCAnRFRTLUhEJ10sXG4gIDB4ODY6IFsnYXVkaW8nLCAnRFRTLU1BJ10sXG4gIDB4YTE6IFsnYXVkaW8nLCAnQUMzLVBsdXMtU0VDJ10sXG4gIDB4YTI6IFsnYXVkaW8nLCAnRFRTLUhELVNFQyddXG59O1xuXG5jbGFzcyBUc0RlbXV4ZXIge1xuICBjb25zdHJ1Y3RvciAoY29uZmlncykge1xuICAgIHRoaXMuY29uZmlncyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZ3MpO1xuICAgIHRoaXMuZGVtdXhpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnBhdCA9IFtdO1xuICAgIHRoaXMucG10ID0gW107XG4gICAgdGhpcy5faGFzVmlkZW9NZXRhID0gZmFsc2U7XG4gICAgdGhpcy5faGFzQXVkaW9NZXRhID0gZmFsc2U7XG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5ERU1VWF9TVEFSVCwgdGhpcy5kZW11eC5iaW5kKHRoaXMpKVxuICB9XG5cbiAgZGVtdXggKGZyYWcpIHtcbiAgICBpZiAodGhpcy5kZW11eGluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IGJ1ZmZlciA9IHRoaXMuaW5wdXRCdWZmZXI7XG4gICAgbGV0IGZyYWdzID0geyBwYXQ6IFtdLCBwbXQ6IFtdIH07XG4gICAgbGV0IHBlc2VzID0ge307XG5cbiAgICAvLyBSZWFkIFRTIHNlZ21lbnRcbiAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCA+PSAxODgpIHtcbiAgICAgIGlmIChidWZmZXIubGVuZ3RoID49IDEgJiYgYnVmZmVyLmFycmF5WzBdW2J1ZmZlci5vZmZzZXRdICE9PSA3MSkge1xuICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLlRBRywgbmV3IEVycm9yKGBVbnRydXN0IHN5bmMgY29kZTogJHtidWZmZXIuYXJyYXlbMF1bYnVmZmVyLm9mZnNldF19LCB0cnkgdG8gcmVjb3ZlcjtgKSwgZmFsc2UpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggPj0gMSAmJiBidWZmZXIuYXJyYXlbMF1bYnVmZmVyLm9mZnNldF0gIT09IDcxKSB7XG4gICAgICAgIGJ1ZmZlci5zaGlmdCgxKTtcbiAgICAgIH1cbiAgICAgIGxldCBidWYgPSBidWZmZXIuc2hpZnQoMTg4KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGJ1Zik7XG4gICAgICBsZXQgdHNTdHJlYW0gPSBuZXcgU3RyZWFtKGJ1Zi5idWZmZXIpO1xuICAgICAgbGV0IHRzID0ge307XG4gICAgICBUc0RlbXV4ZXIucmVhZCh0c1N0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgIGlmICh0cy5wZXMpIHtcbiAgICAgICAgaWYgKCFwZXNlc1t0cy5oZWFkZXIucGlkXSkge1xuICAgICAgICAgIHBlc2VzW3RzLmhlYWRlci5waWRdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcGVzZXNbdHMuaGVhZGVyLnBpZF0ucHVzaCh0cy5wZXMpO1xuICAgICAgICB0cy5wZXMuRVMuYnVmZmVyID0gW3RzLnBlcy5FUy5idWZmZXJdO1xuICAgICAgfSBlbHNlIGlmIChwZXNlc1t0cy5oZWFkZXIucGlkXSkge1xuICAgICAgICBwZXNlc1t0cy5oZWFkZXIucGlkXVtwZXNlc1t0cy5oZWFkZXIucGlkXS5sZW5ndGggLSAxXS5FUy5idWZmZXIucHVzaCh0cy5wYXlsb2FkLnN0cmVhbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IEF1ZGlvT3B0aW9ucyA9IGZyYWc7XG4gICAgbGV0IFZpZGVvT3B0aW9ucyA9IGZyYWc7XG5cbiAgICAvLyBHZXQgRnJhbWVzIGRhdGFcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKHBlc2VzKS5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGVwZXNlcyA9IHBlc2VzW09iamVjdC5rZXlzKHBlc2VzKVtpXV07XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVwZXNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBlcGVzZXNbal0uaWQgPSBPYmplY3Qua2V5cyhwZXNlcylbaV07XG4gICAgICAgIGVwZXNlc1tqXS5FUy5idWZmZXIgPSBUc0RlbXV4ZXIuTWVyZ2UoZXBlc2VzW2pdLkVTLmJ1ZmZlcik7XG4gICAgICAgIGlmIChlcGVzZXNbal0udHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgIHRoaXMucHVzaEF1ZGlvU2FtcGxlKGVwZXNlc1tqXSwgQXVkaW9PcHRpb25zKTtcbiAgICAgICAgICBBdWRpb09wdGlvbnMgPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmIChlcGVzZXNbal0udHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgIHRoaXMucHVzaFZpZGVvU2FtcGxlKGVwZXNlc1tqXSwgVmlkZW9PcHRpb25zKTtcbiAgICAgICAgICBWaWRlb09wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9oYXNBdWRpb01ldGEpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUsICdhdWRpbycpO1xuICAgIH1cbiAgICBpZiAodGhpcy5faGFzVmlkZW9NZXRhKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFLCAndmlkZW8nKTtcbiAgICB9XG4gIH1cblxuICBwdXNoQXVkaW9TYW1wbGUgKHBlcywgb3B0aW9ucykge1xuICAgIGxldCB0cmFjaztcbiAgICBpZiAoIXRoaXMuX3RyYWNrcy5hdWRpb1RyYWNrKSB7XG4gICAgICB0aGlzLl90cmFja3MuYXVkaW9UcmFjayA9IG5ldyBBdWRpb1RyYWNrKCk7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy5hdWRpb1RyYWNrO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy5hdWRpb1RyYWNrO1xuICAgIH1cbiAgICBsZXQgbWV0YSA9IG5ldyBBdWRpb1RyYWNrTWV0YSh7XG4gICAgICBhdWRpb1NhbXBsZVJhdGU6IHBlcy5FUy5mcmVxdWVuY2UsXG4gICAgICBzYW1wbGVSYXRlOiBwZXMuRVMuZnJlcXVlbmNlLFxuICAgICAgY2hhbm5lbENvdW50OiBwZXMuRVMuY2hhbm5lbCxcbiAgICAgIGNvZGVjOiAnbXA0YS40MC4nICsgcGVzLkVTLmF1ZGlvT2JqZWN0VHlwZSxcbiAgICAgIGNvbmZpZzogcGVzLkVTLmF1ZGlvQ29uZmlnLFxuICAgICAgaWQ6IDIsXG4gICAgICBzYW1wbGVSYXRlSW5kZXg6IHBlcy5FUy5mcmVxdWVuY3lJbmRleFxuICAgIH0pO1xuICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKDEwMjQgLyBtZXRhLmF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKTtcblxuICAgIGxldCBtZXRhRXF1YWwgPSBUc0RlbXV4ZXIuY29tcGFpcmVNZXRhKHRyYWNrLm1ldGEsIG1ldGEsIHRydWUpO1xuXG4gICAgaWYgKCF0aGlzLl9oYXNBdWRpb01ldGEgfHwgIW1ldGFFcXVhbCkge1xuICAgICAgdHJhY2subWV0YSA9IG1ldGE7XG4gICAgICB0aGlzLl9oYXNBdWRpb01ldGEgPSB0cnVlXG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ2F1ZGlvJyk7XG4gICAgfVxuXG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShwZXMuRVMuYnVmZmVyLmJ1ZmZlci5zbGljZShwZXMuRVMuYnVmZmVyLnBvc2l0aW9uLCBwZXMuRVMuYnVmZmVyLmxlbmd0aCkpO1xuICAgIGxldCBkdHMgPSBwYXJzZUludChwZXMucHRzIC8gOTApO1xuICAgIGxldCBwdHMgPSBwYXJzZUludChwZXMucHRzIC8gOTApO1xuICAgIGxldCBzYW1wbGUgPSBuZXcgQXVkaW9UcmFja1NhbXBsZSh7ZHRzLCBwdHMsIGRhdGEsIG9wdGlvbnN9KTtcbiAgICB0cmFjay5zYW1wbGVzLnB1c2goc2FtcGxlKTtcbiAgfVxuXG4gIHB1c2hWaWRlb1NhbXBsZSAocGVzLCBvcHRpb25zKSB7XG4gICAgbGV0IG5hbHMgPSBOYWx1bml0LmdldE5hbHVuaXRzKHBlcy5FUy5idWZmZXIpO1xuICAgIGxldCB0cmFjaztcbiAgICBsZXQgbWV0YSA9IG5ldyBWaWRlb1RyYWNrTWV0YSgpO1xuICAgIGlmICghdGhpcy5fdHJhY2tzLnZpZGVvVHJhY2spIHtcbiAgICAgIHRoaXMuX3RyYWNrcy52aWRlb1RyYWNrID0gbmV3IFZpZGVvVHJhY2soKTtcbiAgICAgIHRyYWNrID0gdGhpcy5fdHJhY2tzLnZpZGVvVHJhY2s7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYWNrID0gdGhpcy5fdHJhY2tzLnZpZGVvVHJhY2s7XG4gICAgfVxuICAgIGxldCBzYW1wbGVMZW5ndGggPSAwO1xuICAgIGxldCBzcHMgPSBmYWxzZTtcbiAgICBsZXQgcHBzID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbmFsID0gbmFsc1tpXTtcbiAgICAgIGlmIChuYWwuc3BzKSB7XG4gICAgICAgIHNwcyA9IG5hbDtcbiAgICAgICAgdHJhY2suc3BzID0gbmFsLmJvZHk7XG4gICAgICAgIG1ldGEuY2hyb21hRm9ybWF0ID0gc3BzLnNwcy5jaHJvbWFfZm9ybWF0XG4gICAgICAgIG1ldGEuY29kZWMgPSAnYXZjMS4nO1xuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IDQ7IGorKykge1xuICAgICAgICAgIHZhciBoID0gc3BzLmJvZHlbal0udG9TdHJpbmcoMTYpO1xuICAgICAgICAgIGlmIChoLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIGggPSAnMCcgKyBoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtZXRhLmNvZGVjICs9IGg7XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5jb2RlY0hlaWdodCA9IHNwcy5zcHMuY29kZWNfc2l6ZS5oZWlnaHQ7XG4gICAgICAgIG1ldGEuY29kZWNXaWR0aCA9IHNwcy5zcHMuY29kZWNfc2l6ZS53aWR0aDtcbiAgICAgICAgbWV0YS5mcmFtZVJhdGUgPSBzcHMuc3BzLmZyYW1lX3JhdGU7XG4gICAgICAgIG1ldGEuaWQgPSAxO1xuICAgICAgICBtZXRhLmxldmVsID0gc3BzLnNwcy5sZXZlbF9zdHJpbmc7XG4gICAgICAgIG1ldGEucHJlc2VudEhlaWdodCA9IHNwcy5zcHMucHJlc2VudF9zaXplLmhlaWdodDtcbiAgICAgICAgbWV0YS5wcmVzZW50V2lkdGggPSBzcHMuc3BzLnByZXNlbnRfc2l6ZS53aWR0aDtcbiAgICAgICAgbWV0YS5wcm9maWxlID0gc3BzLnNwcy5wcm9maWxlX3N0cmluZztcbiAgICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IobWV0YS50aW1lc2NhbGUgKiAoc3BzLnNwcy5mcmFtZV9yYXRlLmZwc19kZW4gLyBzcHMuc3BzLmZyYW1lX3JhdGUuZnBzX251bSkpO1xuICAgICAgICBtZXRhLnNhclJhdGlvID0gc3BzLnNwcy5zYXJfcmF0aW8gPyBzcHMuc3BzLnNhcl9yYXRpbyA6IHNwcy5zcHMucGFyX3JhdGlvO1xuICAgICAgfSBlbHNlIGlmIChuYWwucHBzKSB7XG4gICAgICAgIHRyYWNrLnBwcyA9IG5hbC5ib2R5O1xuICAgICAgICBwcHMgPSBuYWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzYW1wbGVMZW5ndGggKz0gKDQgKyBuYWwuYm9keS5ieXRlTGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3BzICYmIHBwcykge1xuICAgICAgbWV0YS5hdmNjID0gTmFsdW5pdC5nZXRBdmNjKHNwcy5ib2R5LCBwcHMuYm9keSk7XG4gICAgICBsZXQgbWV0YUVxdWFsID0gVHNEZW11eGVyLmNvbXBhaXJlTWV0YSh0cmFjay5tZXRhLCBtZXRhLCB0cnVlKTtcbiAgICAgIGlmICghdGhpcy5faGFzVmlkZW9NZXRhIHx8ICFtZXRhRXF1YWwpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICBvcHRpb25zLm1ldGEgPSBPYmplY3QuYXNzaWduKHt9LCBtZXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgbWV0YTogT2JqZWN0LmFzc2lnbih7fSwgbWV0YSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2subWV0YSA9IG1ldGE7XG4gICAgICAgIHRoaXMuX2hhc1ZpZGVvTWV0YSA9IHRydWVcbiAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoc2FtcGxlTGVuZ3RoKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgaXNLZXlmcmFtZSA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG5hbCA9IG5hbHNbaV07XG4gICAgICBsZXQgbGVuZ3RoID0gbmFsLmJvZHkuYnl0ZUxlbmd0aDtcbiAgICAgIGlmIChuYWwuaWRyKSB7XG4gICAgICAgIGlzS2V5ZnJhbWUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFuYWwucHBzICYmICFuYWwuc3BzKSB7XG4gICAgICAgIGRhdGEuc2V0KG5ldyBVaW50OEFycmF5KFtsZW5ndGggPj4+IDI0ICYgMHhmZixcbiAgICAgICAgICBsZW5ndGggPj4+IDE2ICYgMHhmZixcbiAgICAgICAgICBsZW5ndGggPj4+IDggJiAweGZmLFxuICAgICAgICAgIGxlbmd0aCAmIDB4ZmZcbiAgICAgICAgXSksIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICBkYXRhLnNldChuYWwuYm9keSwgb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IG5ldyBWaWRlb1RyYWNrU2FtcGxlKHtcbiAgICAgIGR0czogcGFyc2VJbnQocGVzLmR0cyAvIDkwKSxcbiAgICAgIHB0czogcGFyc2VJbnQocGVzLnB0cyAvIDkwKSxcbiAgICAgIGN0czogKHBlcy5wdHMgLSBwZXMuZHRzKSAvIDkwLFxuICAgICAgb3JpZ2luRHRzOiBwZXMuZHRzLFxuICAgICAgaXNLZXlmcmFtZSxcbiAgICAgIGRhdGEsXG4gICAgICBvcHRpb25zXG4gICAgfSlcbiAgICB0cmFjay5zYW1wbGVzLnB1c2goc2FtcGxlKTtcbiAgfVxuXG4gIGRlc3RvcnkgKCkge1xuICAgIHRoaXMub2ZmKERFTVVYX0VWRU5UUy5ERU1VWF9TVEFSVCwgdGhpcy5kZW11eCk7XG4gICAgdGhpcy5jb25maWdzID0ge307XG4gICAgdGhpcy5kZW11eGluZyA9IGZhbHNlO1xuICAgIHRoaXMucGF0ID0gW107XG4gICAgdGhpcy5wbXQgPSBbXTtcbiAgICB0aGlzLl9oYXNWaWRlb01ldGEgPSBmYWxzZTtcbiAgICB0aGlzLl9oYXNBdWRpb01ldGEgPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBjb21wYWlyZUFycmF5IChhLCBiLCB0eXBlKSB7XG4gICAgbGV0IGFsID0gMDtcbiAgICBsZXQgYmwgPSAwO1xuICAgIGlmICh0eXBlID09PSAnVWludDhBcnJheScpIHtcbiAgICAgIGFsID0gYS5ieXRlTGVuZ3RoO1xuICAgICAgYmwgPSBiLmJ5dGVMZW5ndGg7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnQXJyYXknKSB7XG4gICAgICBhbCA9IGEubGVuZ3RoO1xuICAgICAgYmwgPSBiLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGFsICE9PSBibCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWw7IGkrKykge1xuICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN0YXRpYyBjb21wYWlyZU1ldGEgKGEsIGIsIGlnbm9yZUR1cmF0aW9uKSB7XG4gICAgaWYgKCFhIHx8ICFiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGsgPSBPYmplY3Qua2V5cyhhKS5sZW5ndGg7IGkgPCBrOyBpKyspIHtcbiAgICAgIGxldCBpdGVtYSA9IGFbT2JqZWN0LmtleXMoYSlbaV1dO1xuICAgICAgbGV0IGl0ZW1iID0gYltPYmplY3Qua2V5cyhhKVtpXV07XG4gICAgICBpZiAodHlwZW9mIGl0ZW1hICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoKGlnbm9yZUR1cmF0aW9uICYmIE9iamVjdC5rZXlzKGEpW2ldICE9PSAnZHVyYXRpb24nICYmIE9iamVjdC5rZXlzKGEpW2ldICE9PSAncmVmU2FtcGxlRHVyYXRpb24nICYmIE9iamVjdC5rZXlzKGEpW2ldICE9PSAncmVmU2FtcGxlRHVyYXRpb25GaXhlZCcpICYmIGl0ZW1hICE9PSBpdGVtYikge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpdGVtYS5ieXRlTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGl0ZW1iLmJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVRzRGVtdXhlci5jb21wYWlyZUFycmF5KGl0ZW1hLCBpdGVtYiwgJ1VpbnQ4QXJyYXknKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpdGVtYS5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoaXRlbWIubGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFUc0RlbXV4ZXIuY29tcGFpcmVBcnJheShpdGVtYSwgaXRlbWIsICdBcnJheScpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIVRzRGVtdXhlci5jb21wYWlyZU1ldGEoaXRlbWEsIGl0ZW1iKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN0YXRpYyBNZXJnZSAoYnVmZmVycykge1xuICAgIGxldCBkYXRhO1xuICAgIGxldCBsZW5ndGggPSAwO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGVuZ3RoICs9IChidWZmZXJzW2ldLmxlbmd0aCAtIGJ1ZmZlcnNbaV0ucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGJ1ZmZlciA9IGJ1ZmZlcnNbaV07XG4gICAgICBkYXRhLnNldChuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLCBidWZmZXIucG9zaXRpb24pLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IGJ1ZmZlci5sZW5ndGggLSBidWZmZXIucG9zaXRpb247XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3RyZWFtKGRhdGEuYnVmZmVyKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkIChzdHJlYW0sIHRzLCBmcmFncykge1xuICAgIFRzRGVtdXhlci5yZWFkSGVhZGVyKHN0cmVhbSwgdHMpO1xuICAgIFRzRGVtdXhlci5yZWFkUGF5bG9hZChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgaWYgKHRzLmhlYWRlci5wYWNrZXQgPT09ICdNRURJQScgJiYgdHMuaGVhZGVyLnBheWxvYWQgPT09IDEgJiYgIXRzLnVua25vd25QSURzKSB7XG4gICAgICB0cy5wZXMgPSBUc0RlbXV4ZXIuUEVTKHRzKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcmVhZFBheWxvYWQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgbGV0IGhlYWRlciA9IHRzLmhlYWRlclxuICAgIGxldCBwaWQgPSBoZWFkZXIucGlkO1xuICAgIHN3aXRjaCAocGlkKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIFRzRGVtdXhlci5QQVQoc3RyZWFtLCB0cywgZnJhZ3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgVHNEZW11eGVyLkNBVChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBUc0RlbXV4ZXIuVFNEVChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAweDFmZmY6XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gVE9ETzogc29tZeeahOWGmeazleS4jeWkquWlve+8jOW+l+aUuVxuICAgICAgICBpZiAoZnJhZ3MucGF0LnNvbWUoKGl0ZW0pID0+IHsgcmV0dXJuIGl0ZW0ucGlkID09PSBwaWQ7IH0pKSB7XG4gICAgICAgICAgVHNEZW11eGVyLlBNVChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IHN0cyA9IGZyYWdzLnBtdCA/IGZyYWdzLnBtdC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0ucGlkID09PSBwaWQpIDogW107XG4gICAgICAgICAgaWYgKHN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBUc0RlbXV4ZXIuTWVkaWEoc3RyZWFtLCB0cywgU3RyZWFtVHlwZVtzdHNbMF0uc3RyZWFtVHlwZV1bMF0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRzLnVua25vd25QSURzID0gdHJ1ZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHJlYWRIZWFkZXIgKHN0cmVhbSwgdHMpIHtcbiAgICBsZXQgaGVhZGVyID0ge307XG4gICAgaGVhZGVyLnN5bmMgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIGhlYWRlci5lcnJvciA9IG5leHQgPj4+IDE1O1xuICAgIGhlYWRlci5wYXlsb2FkID0gbmV4dCA+Pj4gMTQgJiAxO1xuICAgIGhlYWRlci5wcmlvcml0eSA9IG5leHQgPj4+IDEzICYgMTtcbiAgICBoZWFkZXIucGlkID0gbmV4dCAmIDB4MWZmZjtcblxuICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG5cbiAgICBoZWFkZXIuc2NyYW1ibGluZyA9IG5leHQgPj4gNiAmIDB4MzsgLy8g5piv5ZCm5Yqg5a+G77yMMDDooajnpLrkuI3liqDlr4ZcblxuICAgIC8qKlxuICAgICAqIDAwIElTTy9JRUPmnKrmnaXkvb/nlKjkv53nlZlcbiAgICAgKiAwMSDmsqHmnInosIPmlbTlrZfmrrXvvIzku4XlkKvmnIkxODRC5pyJ5pWI5YeA6I23XG4gICAgICogMDIg5rKh5pyJ5pyJ5pWI5YeA6I2377yM5LuF5ZCr5pyJMTgzQuiwg+aVtOWtl+autVxuICAgICAqIDAzIDB+MTgyQuiwg+aVtOWtl+auteWQjuS4uuacieaViOWHgOiNt1xuICAgICAqL1xuICAgIGhlYWRlci5hZGFwdGF0aW9uID0gbmV4dCA+PiA0ICYgMHgzO1xuICAgIGhlYWRlci5jb250aW51aXR5ID0gbmV4dCAmIDE1O1xuICAgIGhlYWRlci5wYWNrZXQgPSBoZWFkZXIucGlkID09PSAwID8gJ1BBVCcgOiAnTUVESUEnO1xuICAgIHRzLmhlYWRlciA9IGhlYWRlcjtcbiAgfVxuXG4gIHN0YXRpYyBQQVQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgbGV0IHJldCA9IHt9O1xuICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHN0cmVhbS5za2lwKG5leHQpO1xuICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgcmV0LnRhYmVsSUQgPSBuZXh0O1xuICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIHJldC5lcnJvciA9IG5leHQgPj4+IDc7XG4gICAgcmV0Lnplcm8gPSBuZXh0ID4+PiA2ICYgMTtcbiAgICByZXQuc2VjdGlvbkxlbmd0aCA9IG5leHQgJiAweGZmZjtcbiAgICByZXQuc3RyZWFtSUQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIHJldC5jdXJyZW50ID0gc3RyZWFtLnJlYWRVaW50OCgpICYgMTtcbiAgICByZXQuc2VjdGlvbk51bWJlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQubGFzdFNlY3Rpb25OdW1iZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgbGV0IE4gPSAocmV0LnNlY3Rpb25MZW5ndGggLSA5KSAvIDQ7XG4gICAgbGV0IGxpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgbGV0IHByb2dyYW1OdW1iZXIgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgbGV0IHBpZCA9IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweDFmZmY7XG4gICAgICBsaXN0LnB1c2goe1xuICAgICAgICBwcm9ncmFtOiBwcm9ncmFtTnVtYmVyLFxuICAgICAgICBwaWQsXG4gICAgICAgIHR5cGU6IHByb2dyYW1OdW1iZXIgPT09IDAgPyAnbmV0d29yaycgOiAnbWFwUElEJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGZyYWdzLnBhdCA9IGZyYWdzLnBhdC5jb25jYXQobGlzdCk7XG4gICAgfVxuICAgIHJldC5saXN0ID0gbGlzdDtcbiAgICByZXQucHJvZ3JhbSA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LnBpZCA9IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweDFmZmY7XG4gICAgdHMucGF5bG9hZCA9IHJldDtcbiAgICAvLyBUT0RPIENSQ1xuICB9XG5cbiAgc3RhdGljIFBNVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgcmV0ID0ge307XG4gICAgbGV0IGhlYWRlciA9IHRzLmhlYWRlcjtcbiAgICBoZWFkZXIucGFja2V0ID0gJ1BNVCc7XG4gICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgc3RyZWFtLnNraXAobmV4dCk7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQudGFibGVJRCA9IG5leHQ7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LnNlY3Rpb25MZW5ndGggPSBuZXh0ICYgMHhmZmY7XG4gICAgcmV0LnByb2dyYW0gPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIHJldC5jdXJyZW50ID0gc3RyZWFtLnJlYWRVaW50OCgpICYgMTtcbiAgICByZXQub3JkZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgcmV0Lmxhc3RPcmRlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQuUENSX1BJRCA9IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweDFmZmY7XG4gICAgcmV0LnByb2dyYW1MZW5ndGggPSBzdHJlYW0ucmVhZFVpbnQxNigpICYgMHhmZmY7XG4gICAgbGV0IE4gPSAocmV0LnNlY3Rpb25MZW5ndGggLSAxMykgLyA1O1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgIHN0cmVhbVR5cGU6IHN0cmVhbS5yZWFkVWludDgoKSxcbiAgICAgICAgcGlkOiBzdHJlYW0ucmVhZFVpbnQxNigpICYgMHgxZmZmLCAvLyAweDA3ZTUg6KeG6aKR77yMMHgwN2U2XG4gICAgICAgIGVzOiBzdHJlYW0ucmVhZFVpbnQxNigpICYgMHhmZmZcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXQubGlzdCA9IGxpc3Q7XG4gICAgaWYgKCF0aGlzLnBtdCkge1xuICAgICAgdGhpcy5wbXQgPSBbXTtcbiAgICB9XG4gICAgZnJhZ3MucG10ID0gdGhpcy5wbXQuY29uY2F0KGxpc3QubWFwKChpdGVtKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwaWQ6IGl0ZW0ucGlkLFxuICAgICAgICBlczogaXRlbS5lcyxcbiAgICAgICAgc3RyZWFtVHlwZTogaXRlbS5zdHJlYW1UeXBlLFxuICAgICAgICBwcm9ncmFtOiByZXQucHJvZ3JhbVxuICAgICAgfTtcbiAgICB9KSk7XG4gICAgdHMucGF5bG9hZCA9IHJldDtcbiAgfVxuXG4gIHN0YXRpYyBNZWRpYSAoc3RyZWFtLCB0cywgdHlwZSkge1xuICAgIGxldCBoZWFkZXIgPSB0cy5oZWFkZXI7XG4gICAgbGV0IHBheWxvYWQgPSB7fTtcbiAgICBoZWFkZXIudHlwZSA9IHR5cGU7XG4gICAgaWYgKGhlYWRlci5hZGFwdGF0aW9uID09PSAweDAzKSB7XG4gICAgICBwYXlsb2FkLmFkYXB0YXRpb25MZW5ndGggPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgICBpZiAocGF5bG9hZC5hZGFwdGF0aW9uTGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICAgICAgcGF5bG9hZC5kaXNjb250aW51ZSA9IG5leHQgPj4+IDc7XG4gICAgICAgIHBheWxvYWQuYWNjZXNzID0gbmV4dCA+Pj4gNiAmIDB4MDE7XG4gICAgICAgIHBheWxvYWQucHJpb3JpdHkgPSBuZXh0ID4+PiA1ICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5QQ1IgPSBuZXh0ID4+PiA0ICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5PUENSID0gbmV4dCA+Pj4gMyAmIDB4MDE7XG4gICAgICAgIHBheWxvYWQuc3BsaWNlUG9pbnQgPSBuZXh0ID4+PiAyICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC50cmFuc3BvcnRQcml2YXRlID0gbmV4dCA+Pj4gMSAmIDB4MDE7XG4gICAgICAgIHBheWxvYWQuYWRhcHRhdGlvbkZpZWxkID0gbmV4dCAmIDB4MDE7XG4gICAgICAgIGxldCBfc3RhcnQgPSBzdHJlYW0ucG9zaXRpb247XG4gICAgICAgIGlmIChwYXlsb2FkLlBDUiA9PT0gMSkge1xuICAgICAgICAgIHBheWxvYWQucHJvZ3JhbUNsb2NrQmFzZSA9IHN0cmVhbS5yZWFkVWludDMyKCkgPDwgMTtcbiAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBwYXlsb2FkLnByb2dyYW1DbG9ja0Jhc2UgfD0gbmV4dCA+Pj4gMTU7XG4gICAgICAgICAgcGF5bG9hZC5wcm9ncmFtQ2xvY2tFeHRlbnNpb24gPSBuZXh0ICYgMHgxZmY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQuT1BDUiA9PT0gMSkge1xuICAgICAgICAgIHBheWxvYWQub3JpZ2luUHJvZ3JhbUNsb2NrQmFzZSA9IHN0cmVhbS5yZWFkVWludDMyKCkgPDwgMTtcbiAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBwYXlsb2FkLm9yaWdpblByb2dyYW1DbG9ja0Jhc2UgKz0gbmV4dCA+Pj4gMTU7XG4gICAgICAgICAgcGF5bG9hZC5vcmlnaW5Qcm9ncmFtQ2xvY2tFeHRlbnNpb24gPSBuZXh0ICYgMHgxZmY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQuc3BsaWNlUG9pbnQgPT09IDEpIHtcbiAgICAgICAgICBwYXlsb2FkLnNwbGljZUNvdW50ZG93biA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC50cmFuc3BvcnRQcml2YXRlID09PSAxKSB7XG4gICAgICAgICAgbGV0IGxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICAgICAgICBsZXQgdHJhbnNwb3J0UHJpdmF0ZURhdGEgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnRQcml2YXRlRGF0YS5wdXNoKHN0cmVhbS5yZWFkVWludDgoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXlsb2FkLmFkYXB0YXRpb25GaWVsZCA9PT0gMSkge1xuICAgICAgICAgIGxldCBsZW5ndGggPSBzdHJlYW0ucmVhZFVpbnQ4KClcbiAgICAgICAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKVxuICAgICAgICAgIGxldCBzdGFydCA9IHN0cmVhbS5wb3NpdGlvbjtcbiAgICAgICAgICBsZXQgbHR3ID0gbmV4dCA+Pj4gNztcbiAgICAgICAgICBsZXQgcGllY2V3aXNlID0gbmV4dCA+Pj4gNiAmIDB4MTtcbiAgICAgICAgICBsZXQgc2VhbWxlc3MgPSBuZXh0ID4+PiA1ICYgMHgxO1xuICAgICAgICAgIGlmIChsdHcgPT09IDEpIHtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgICAgcGF5bG9hZC5sdHdWYWxpZCA9IG5leHQgPj4+IDE1O1xuICAgICAgICAgICAgcGF5bG9hZC5sdHdPZmZzZXQgPSBuZXh0ICYgMHhlZmZmO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGllY2V3aXNlID09PSAxKSB7XG4gICAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MjQoKTtcbiAgICAgICAgICAgIHBheWxvYWQucGllY2V3aXNlUmF0ZSA9IG5leHQgJiAweDNmZmZmZjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlYW1sZXNzID09PSAxKSB7XG4gICAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRJbnQ4KCk7XG4gICAgICAgICAgICBwYXlsb2FkLnNwbGljZVR5cGUgPSBuZXh0ID4+PiA0O1xuICAgICAgICAgICAgcGF5bG9hZC5kdHNOZXh0QVUxID0gbmV4dCA+Pj4gMSAmIDB4NztcbiAgICAgICAgICAgIHBheWxvYWQubWFya2VyMSA9IG5leHQgJiAweDE7XG4gICAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICAgIHBheWxvYWQuZHRzTmV4dEFVMiA9IG5leHQgPj4+IDE7XG4gICAgICAgICAgICBwYXlsb2FkLm1hcmtlcjIgPSBuZXh0ICYgMHgxO1xuICAgICAgICAgICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICAgICAgICBwYXlsb2FkLmR0c05leHRBVTMgPSBuZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHJlYW0uc2tpcChsZW5ndGggLSAxIC0gKHN0cmVhbS5wb3NpdGlvbiAtIHN0YXJ0KSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhc3RTdHVmZmluZyA9IHBheWxvYWQuYWRhcHRhdGlvbkxlbmd0aCAtIDEgLSAoc3RyZWFtLnBvc2l0aW9uIC0gX3N0YXJ0KTtcbiAgICAgICAgc3RyZWFtLnNraXAobGFzdFN0dWZmaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcGF5bG9hZC5zdHJlYW0gPSBuZXcgU3RyZWFtKHN0cmVhbS5idWZmZXIuc2xpY2Uoc3RyZWFtLnBvc2l0aW9uKSk7XG4gICAgdHMucGF5bG9hZCA9IHBheWxvYWQ7XG4gIH1cblxuICBzdGF0aWMgUEVTICh0cykge1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBsZXQgYnVmZmVyID0gdHMucGF5bG9hZC5zdHJlYW07XG5cbiAgICBsZXQgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgaWYgKG5leHQgIT09IDEpIHtcbiAgICAgIHJldC5FUyA9IHt9O1xuICAgICAgcmV0LkVTLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHN0cmVhbUlEID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgaWYgKHN0cmVhbUlEID49IDB4ZTAgJiYgc3RyZWFtSUQgPD0gMHhlZikge1xuICAgICAgICByZXQudHlwZSA9ICd2aWRlbyc7XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtSUQgPj0gMHhjMCAmJiBzdHJlYW1JRCA8PSAweGRmKSB7XG4gICAgICAgIHJldC50eXBlID0gJ2F1ZGlvJztcbiAgICAgIH1cbiAgICAgIGxldCBwYWNrZXRMZW5ndGggPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgcmV0LnBhY2tldExlbmd0aCA9IHBhY2tldExlbmd0aDtcbiAgICAgIGlmIChyZXQudHlwZSA9PT0gJ3ZpZGVvJyB8fCByZXQudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICBsZXQgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgbGV0IGZpcnN0ID0gbmV4dCA+Pj4gNjtcbiAgICAgICAgaWYgKGZpcnN0ICE9PSAweDAyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlcnJvciB3aGVuIHBhcnNlIHBlcyBoZWFkZXInKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICByZXQucHRzRFRTRmxhZyA9IG5leHQgPj4+IDY7XG4gICAgICAgIHJldC5lc2NyRmxhZyA9IG5leHQgPj4+IDUgJiAweDAxO1xuICAgICAgICByZXQuZXNSYXRlRmxhZyA9IG5leHQgPj4+IDQgJiAweDAxO1xuICAgICAgICByZXQuZHNtRmxhZyA9IG5leHQgPj4+IDMgJiAweDAxO1xuICAgICAgICByZXQuYWRkaXRpb25hbEZsYWcgPSBuZXh0ID4+PiAyICYgMHgwMTtcbiAgICAgICAgcmV0LmNyY0ZsYWcgPSBuZXh0ID4+PiAxICYgMHgwMTtcbiAgICAgICAgcmV0LmV4dGVuc2lvbkZsYWcgPSBuZXh0ICYgMHgwMTtcbiAgICAgICAgcmV0LnBlc0hlYWRlckxlbmd0aCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgbGV0IE4xID0gcmV0LnBlc0hlYWRlckxlbmd0aDtcblxuICAgICAgICBpZiAocmV0LnB0c0RUU0ZsYWcgPT09IDIpIHtcbiAgICAgICAgICBsZXQgcHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBwdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LnB0cyA9IChwdHNbMF0gPDwgMzAgfCBwdHNbMV0gPDwgMTUgfCBwdHNbMl0pO1xuICAgICAgICAgIE4xIC09IDU7XG4gICAgICAgICAgLy8g6KeG6aKR5aaC5p6c5rKh5pyJZHRz55SocHRzXG4gICAgICAgICAgaWYgKHJldC50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICByZXQuZHRzID0gcmV0LnB0cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5wdHNEVFNGbGFnID09PSAzKSB7XG4gICAgICAgICAgbGV0IHB0cyA9IFtdO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQ4KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSAmIDB4MDcpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIHJldC5wdHMgPSAocHRzWzBdIDw8IDMwIHwgcHRzWzFdIDw8IDE1IHwgcHRzWzJdKTtcbiAgICAgICAgICBsZXQgZHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBkdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LmR0cyA9IChkdHNbMF0gPDwgMzAgfCBkdHNbMV0gPDwgMTUgfCBkdHNbMl0pO1xuICAgICAgICAgIE4xIC09IDEwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZXNjckZsYWcgPT09IDEpIHtcbiAgICAgICAgICBsZXQgZXNjciA9IFtdXG4gICAgICAgICAgbGV0IGV4ID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCA+Pj4gMyAmIDB4MDcpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZXNjci5wdXNoKG5leHQgPj4+IDEzKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCAmIDB4MDMpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ID4+PiAxMyk7XG4gICAgICAgICAgZXgucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBleC5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIHJldC5lc2NyID0gKGVzY3JbMF0gPDwgMzAgfCBlc2NyWzFdIDw8IDI4IHwgZXNjclsyXSA8PCAxNSB8IGVzY3JbM10gPDwgMTMgfCBlc2NyWzRdKSAqIDMwMCArIChleFswXSA8PCA3IHwgZXhbMV0pO1xuICAgICAgICAgIE4xIC09IDY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5lc1JhdGVGbGFnID09PSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgICAgICAgcmV0LmVzUmF0ZSA9IG5leHQgPj4+IDEgJiAweDNmZmZmZjtcbiAgICAgICAgICBOMSAtPSAzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZHNtRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnQgRFNNX3RyaWNrX21vZGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmFkZGl0aW9uYWxGbGFnID09PSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICByZXQuYWRkaXRpb25hbENvcHlJbmZvID0gbmV4dCAmIDB4N2Y7XG4gICAgICAgICAgTjEgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmNyY0ZsYWcgPT09IDEpIHtcbiAgICAgICAgICByZXQucGVzQ1JDID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBOMSAtPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZXh0ZW5zaW9uRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnQgZXh0ZW5zaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE4xID4gMCkge1xuICAgICAgICAgIGJ1ZmZlci5za2lwKE4xKTtcbiAgICAgICAgfVxuICAgICAgICByZXQuRVMgPSBUc0RlbXV4ZXIuRVMoYnVmZmVyLCByZXQudHlwZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Zvcm1hdCBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgRVMgKGJ1ZmZlciwgdHlwZSkge1xuICAgIGxldCBuZXh0O1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDMyKCk7XG4gICAgICBpZiAobmV4dCAhPT0gMSkge1xuICAgICAgICBidWZmZXIuYmFjayg0KTtcbiAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgICAgIGlmIChuZXh0ICE9PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoMjY0IG5hbCBoZWFkZXIgcGFyc2UgZmFpbGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1ZmZlci5za2lwKDIpOy8vIDA5IEYwXG4gICAgICAvLyBUT0RPIHJlYWRuYWx1XG4gICAgICByZXQuYnVmZmVyID0gYnVmZmVyO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAvLyBhZHRz55qE5ZCM5q2l5a2X6IqC77yMMTLkvY1cbiAgICAgIGlmIChuZXh0ID4+PiA0ICE9PSAweGZmZikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FhYyBFUyBwYXJzZSBFcnJvcicpO1xuICAgICAgfVxuICAgICAgY29uc3QgZnEgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXTtcbiAgICAgIHJldC5pZCA9IChuZXh0ID4+PiAzICYgMHgwMSkgPT09IDAgPyAnTVBFRy00JyA6ICdNUEVHLTInO1xuICAgICAgcmV0LmxheWVyID0gbmV4dCA+Pj4gMSAmIDB4MDM7XG4gICAgICByZXQuYWJzZW50ID0gbmV4dCAmIDB4MDE7XG4gICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSAobmV4dCA+Pj4gMTQgJiAweDAzKSArIDE7XG4gICAgICByZXQucHJvZmlsZSA9IHJldC5hdWRpb09iamVjdFR5cGUgLSAxO1xuICAgICAgcmV0LmZyZXF1ZW5jeUluZGV4ID0gbmV4dCA+Pj4gMTAgJiAweDBmO1xuICAgICAgcmV0LmZyZXF1ZW5jZSA9IGZxW3JldC5mcmVxdWVuY3lJbmRleF07XG4gICAgICByZXQuY2hhbm5lbCA9IG5leHQgPj4+IDYgJiAweDA3O1xuICAgICAgcmV0LmZyYW1lTGVuZ3RoID0gKG5leHQgJiAweDAzKSA8PCAxMSB8IChidWZmZXIucmVhZFVpbnQxNigpID4+PiA1KTtcbiAgICAgIFRzRGVtdXhlci5nZXRBdWRpb0NvbmZpZyhyZXQpO1xuICAgICAgYnVmZmVyLnNraXAoMSk7XG4gICAgICByZXQuYnVmZmVyID0gYnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEVTICR7dHlwZX0gaXMgbm90IHN1cHBvcnRlZGApO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgVFNEVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICAvLyBUT0RPXG4gICAgdHMucGF5bG9hZCA9IHt9O1xuICB9XG5cbiAgc3RhdGljIENBVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgcmV0ID0ge31cbiAgICByZXQudGFibGVJRCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LnNlY3Rpb25JbmRpY2F0b3IgPSBuZXh0ID4+PiA3O1xuICAgIHJldC5zZWN0aW9uTGVuZ3RoID0gbmV4dCAmIDB4MGZmZjtcbiAgICBzdHJlYW0uc2tpcCgyKTtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC52ZXJzaW9uID0gbmV4dCA+Pj4gMztcbiAgICByZXQuY3VycmVudE5leHRJbmRpY2F0b3IgPSBuZXh0ICYgMHgwMTtcbiAgICByZXQuc2VjdGlvbk51bWJlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQubGFzdFNlY3Rpb25OdW1iZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgbGV0IE4gPSAodGhpcy5zZWN0aW9uTGVuZ3RoIC0gOSkgLyA0O1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIGxpc3QucHVzaCh7fSk7XG4gICAgfVxuICAgIHJldC5jcmMzMiA9IHN0cmVhbS5yZWFkVWludDMyKCk7XG4gICAgdHMucGF5bG9hZCA9IHJldDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBdWRpb0NvbmZpZyAocmV0KSB7XG4gICAgbGV0IHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKVxuICAgIGxldCBjb25maWc7XG4gICAgbGV0IGV4dGVuc2lvblNhbXBsZUluZGV4O1xuICAgIGlmICgvZmlyZWZveC9pLnRlc3QodXNlckFnZW50KSkge1xuICAgICAgaWYgKHJldC5mcmVxdWVuY3lJbmRleCA+PSA2KSB7XG4gICAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSA1O1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gcmV0LmZyZXF1ZW5jeUluZGV4IC0gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSAyO1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gcmV0LmZyZXF1ZW5jeUluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoJ2FuZHJvaWQnKSAhPT0gLTEpIHtcbiAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSAyO1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgZXh0ZW5zaW9uU2FtcGxlSW5kZXggPSByZXQuZnJlcXVlbmN5SW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSA1O1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuICAgICAgaWYgKHJldC5mcmVxdWVuY3lJbmRleCA+PSA2KSB7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gcmV0LmZyZXF1ZW5jeUluZGV4IC0gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChyZXQuY2hhbm5lbCA9PT0gMSkge1xuICAgICAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSAyO1xuICAgICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgICAgfVxuICAgICAgICBleHRlbnNpb25TYW1wbGVJbmRleCA9IHJldC5mcmVxdWVuY3lJbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25maWdbMF0gPSByZXQuYXVkaW9PYmplY3RUeXBlIDw8IDM7XG4gICAgY29uZmlnWzBdIHw9IChyZXQuZnJlcXVlbmN5SW5kZXggJiAweDBlKSA+PiAxO1xuICAgIGNvbmZpZ1sxXSA9IChyZXQuZnJlcXVlbmN5SW5kZXggJiAweDAxKSA8PCA3O1xuICAgIGNvbmZpZ1sxXSB8PSByZXQuY2hhbm5lbCA8PCAzO1xuICAgIGlmIChyZXQuYXVkaW9PYmplY3RUeXBlID09PSA1KSB7XG4gICAgICBjb25maWdbMV0gfD0gKGV4dGVuc2lvblNhbXBsZUluZGV4ICYgMHgwZSkgPj4gMTtcbiAgICAgIGNvbmZpZ1syXSA9IChleHRlbnNpb25TYW1wbGVJbmRleCAmIDB4MDEpIDw8IDc7XG4gICAgICBjb25maWdbMl0gfD0gMiA8PCAyO1xuICAgICAgY29uZmlnWzNdID0gMDtcbiAgICB9XG4gICAgcmV0LmF1ZGlvQ29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgZ2V0IGlucHV0QnVmZmVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmNvbmZpZ3MuaW5wdXRidWZmZXIpO1xuICB9XG5cbiAgZ2V0IF90cmFja3MgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUc0RlbXV4ZXI7XG4iLCJjbGFzcyBQbGF5bGlzdCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5fYmFzZVVSTCA9ICcnO1xuICAgIHRoaXMuX2xpc3QgPSB7fTtcbiAgICB0aGlzLl90cyA9IHt9O1xuICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgdGhpcy5zZXF1ZW5jZSA9IC0xO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZnJhZ0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbGFzdGdldCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9hdWRvY2xlYXIgPSBjb25maWdzLmF1dG9jbGVhciB8fCBmYWxzZTtcbiAgfVxuXG4gIGdldCBsaXN0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGlzdDtcbiAgfVxuXG4gIHNldCBiYXNlVVJMIChiYXNlVVJMKSB7XG4gICAgaWYgKHRoaXMuYmFzZVVSTCAhPT0gYmFzZVVSTCkge1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgdGhpcy5fYmFzZVVSTCA9IGJhc2VVUkw7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGJhc2VVUkwgKCkge1xuICAgIHJldHVybiB0aGlzLl9iYXNlVVJMO1xuICB9XG5cbiAgcHVzaCAodHMsIGR1cmF0aW9uLCBkaXNjb250aW51ZSkge1xuICAgIGlmICghdGhpcy5fdHNbdHNdKSB7XG4gICAgICB0aGlzLl90c1t0c10gPSB7ZHVyYXRpb246IGR1cmF0aW9uLCBcbiAgICAgICAgZG93bmxvYWRlZDogZmFsc2UsIFxuICAgICAgICBkb3dubG9hZGluZzogZmFsc2UsIFxuICAgICAgICBzdGFydDogdGhpcy5kdXJhdGlvbiwgXG4gICAgICAgIGRpc2NvbnRpbnVlOiBkaXNjb250aW51ZSA/IHRydWU6IGZhbHNlXG4gICAgICB9O1xuICAgICAgdGhpcy5fbGlzdFt0aGlzLmR1cmF0aW9uXSA9IHRzO1xuICAgICAgdGhpcy5kdXJhdGlvbiArPSBkdXJhdGlvbjtcbiAgICAgIHRoaXMuZnJhZ0xlbmd0aCArPSAxO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZUZyYWcgKHVybCkge1xuICAgIGlmICh0aGlzLl90c1t1cmxdKSB7XG4gICAgICBpZiAodGhpcy5fdHNbdXJsXS5zdGFydCA+IHRoaXMuX2xhc3RnZXQudGltZSkge1xuICAgICAgICB0aGlzLl9sYXN0Z2V0ID0ge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLl90c1t1cmxdLmR1cmF0aW9uLFxuICAgICAgICAgIHRpbWU6IHRoaXMuX3RzW3VybF0uc3RhcnQsXG4gICAgICAgICAgZG93bmxvYWRlZDogZmFsc2UsXG4gICAgICAgICAgZG93bmxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIHVybDogdXJsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLl9saXN0W3RoaXMuX3RzW3VybF0uc3RhcnRdO1xuICAgICAgZGVsZXRlIHRoaXMuX3RzW3VybF07XG4gICAgICB0aGlzLmZyYWdMZW5ndGggLT0gMTtcbiAgICB9XG4gIH1cblxuICBwdXNoTTNVOCAoZGF0YSwgZGVsZXRlcHJlKSB7XG4gICAgLy8g5bi46KeE5L+h5oGv5pu/5o2iXG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG0zdTggZGF0YSByZWNlaXZlZC5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy52ZXJzaW9uID0gZGF0YS52ZXJzaW9uO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSBkYXRhLnRhcmdldGR1cmF0aW9uO1xuICAgIGlmKGRhdGEuZW5jcnlwdCAmJiAhdGhpcy5lbmNyeXB0KSB7XG4gICAgICB0aGlzLmVuY3J5cHQgPSBkYXRhLmVuY3J5cHQ7XG4gICAgfVxuICAgIC8vIOaWsOWIhueJh+S/oeaBr1xuICAgIGlmIChkYXRhLnNlcXVlbmNlID4gdGhpcy5zZXF1ZW5jZSkge1xuICAgICAgdGhpcy5zZXF1ZW5jZSA9IGRhdGEuc2VxdWVuY2U7XG4gICAgICBsZXQgbmV3ZnJhZ2xpc3QgPSBbXVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmZyYWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBmcmFnID0gZGF0YS5mcmFnc1tpXTtcbiAgICAgICAgaWYgKCF0aGlzLl90c1tmcmFnLnVybF0pIHtcbiAgICAgICAgICBuZXdmcmFnbGlzdC5wdXNoKGZyYWcudXJsKVxuICAgICAgICAgIHRoaXMucHVzaChmcmFnLnVybCwgZnJhZy5kdXJhdGlvbiwgZnJhZy5kaXNjb250aW51ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYobmV3ZnJhZ2xpc3QubGVuZ3RoIDwgMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbiBub3QgcmVhZCB0cyBmaWxlIGxpc3QuYCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChkZWxldGVwcmUpIHtcbiAgICAgICAgbGV0IHRzbGlzdCA9IHRoaXMuZ2V0VHNMaXN0KCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHNsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKG5ld2ZyYWdsaXN0LmluZGV4T2YodHNsaXN0W2ldKSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlRnJhZyh0c2xpc3RbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9sZCBtM3U4IGZpbGUgcmVjZWl2ZWQsICR7ZGF0YS5zZXF1ZW5jZX1gKTtcbiAgICB9XG4gIH1cblxuICBnZXRUc0xpc3QgKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl90cyk7XG4gIH1cblxuICBkb3dubG9hZGVkICh0c25hbWUsIGlzbG9hZGVkKSB7XG4gICAgbGV0IHRzID0gdGhpcy5fdHNbdHNuYW1lXTtcbiAgICBpZiAodHMpIHtcbiAgICAgIHRzLmRvd25sb2FkZWQgPSBpc2xvYWRlZFxuICAgIH1cbiAgfVxuXG4gIGRvd25sb2FkaW5nICh0c25hbWUsIGxvYWRpbmcpIHtcbiAgICBsZXQgdHMgPSB0aGlzLl90c1t0c25hbWVdO1xuICAgIGlmICh0cykge1xuICAgICAgdHMuZG93bmxvYWRpbmcgPSBsb2FkaW5nXG4gICAgfVxuICB9XG5cbiAgZ2V0VHNCeU5hbWUgKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fdHNbbmFtZV07XG4gIH1cblxuICBnZXRUcyAodGltZSkge1xuICAgIGxldCB0aW1lbGlzdCA9IE9iamVjdC5rZXlzKHRoaXMuX2xpc3QpO1xuICAgIGxldCB0cztcblxuICAgIGlmICh0aW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLl9sYXN0Z2V0KSB7XG4gICAgICAgIHRpbWUgPSB0aGlzLl9sYXN0Z2V0LnRpbWUgKyB0aGlzLl9sYXN0Z2V0LmR1cmF0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaXN0Lmxlbmd0aCA8IDEgfHwgdGltZSA+PSB0aGlzLmR1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aW1lbGlzdC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChhKSAtIHBhcnNlRmxvYXQoYilcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbWVsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGltZSA+PSBwYXJzZUludCh0aW1lbGlzdFtpXSkpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMuX2xpc3RbdGltZWxpc3RbaV1dO1xuICAgICAgICBsZXQgZG93bmxvYWRlZCA9IHRoaXMuX3RzW3VybF0uZG93bmxvYWRlZDtcbiAgICAgICAgbGV0IGRvd25sb2FkaW5nID0gdGhpcy5fdHNbdXJsXS5kb3dubG9hZGluZztcbiAgICAgICAgdHMgPSB7dXJsLCBkb3dubG9hZGVkLCBkb3dubG9hZGluZywgdGltZTogcGFyc2VJbnQodGltZWxpc3RbaV0pLCBkdXJhdGlvbjogcGFyc2VJbnQodGhpcy5fdHNbdXJsXS5kdXJhdGlvbil9O1xuICAgICAgICBpZiAodGhpcy5hdXRvY2xlYXIpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fdHNbdGhpcy5fbGFzdGdldC51cmxdO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXN0W3RoaXMuX2xhc3RnZXQudGltZV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFzdGdldCA9IHRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cztcbiAgfVxuXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLl9iYXNlVVJMID0gJyc7XG4gICAgdGhpcy5fbGlzdCA9IHt9O1xuICAgIHRoaXMuX3RzID0ge307XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICB0aGlzLnNlcXVlbmNlID0gLTE7XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gIH1cblxuICBjbGVhckRvd25sb2FkZWQgKCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gT2JqZWN0LmtleXModGhpcy5fdHMpLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGV0IHRzID0gdGhpcy5fdHNbT2JqZWN0LmtleXModGhpcy5fdHMpW2ldXTtcbiAgICAgIHRzLmRvd25sb2FkZWQgPSBmYWxzZTtcbiAgICAgIHRzLmRvd25sb2FkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fYmFzZVVSTCA9ICcnO1xuICAgIHRoaXMuX2xpc3QgPSB7fTtcbiAgICB0aGlzLl90cyA9IHt9O1xuICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgdGhpcy5zZXF1ZW5jZSA9IC0xO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZnJhZ0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbGFzdGdldCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9hdWRvY2xlYXIgPSBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGF5bGlzdDtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBGZXRjaExvYWRlcjogcmVxdWlyZSgnLi9zcmMvZmV0Y2gtbG9hZGVyJykuZGVmYXVsdFxufTtcbiIsImltcG9ydCB7IEVWRU5UUyB9IGZyb20gJ3hncGxheWVyLXV0aWxzJztcblxuY29uc3QgTE9BREVSX0VWRU5UUyA9IEVWRU5UUy5MT0FERVJfRVZFTlRTO1xuY29uc3QgUkVBRF9TVFJFQU0gPSAwO1xuY29uc3QgUkVBRF9URVhUID0gMTtcbmNvbnN0IFJFQURfSlNPTiA9IDI7XG5jb25zdCBSRUFEX0JVRkZFUiA9IDM7XG5jbGFzcyBGZXRjaExvYWRlciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5jb25maWdzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlncyk7XG4gICAgdGhpcy51cmwgPSBudWxsXG4gICAgdGhpcy5zdGF0dXMgPSAwXG4gICAgdGhpcy5lcnJvciA9IG51bGxcbiAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX2NhbmNlbGVkID0gZmFsc2U7XG4gICAgdGhpcy5fZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5yZWFkdHlwZSA9IHRoaXMuY29uZmlncy5yZWFkdHlwZTtcbiAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuY29uZmlncy5idWZmZXIgfHwgJ0xPQURFUl9CVUZGRVInO1xuICAgIHRoaXMuX2xvYWRlclRhc2tObyA9IDA7XG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTEFERVJfU1RBUlQsIHRoaXMubG9hZC5iaW5kKHRoaXMpKVxuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ2xvYWRlcidcbiAgfVxuXG4gIGxvYWQgKHVybCwgb3B0cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy5fY2FuY2VsZWQgPSBmYWxzZTtcblxuICAgIC8vIFRPRE86IEFkZCBSYW5nZXNcbiAgICBsZXQgcGFyYW1zID0gdGhpcy5nZXRQYXJhbXMob3B0cylcbiAgICBfdGhpcy5sb2FkaW5nID0gdHJ1ZVxuICAgIHJldHVybiBmZXRjaCh0aGlzLnVybCwgcGFyYW1zKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIF90aGlzLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1c1xuICAgICAgICByZXR1cm4gX3RoaXMuX29uRmV0Y2hSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICB9XG4gICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCBfdGhpcy5UQUcsIG5ldyBFcnJvcihgaW52YWxpZCByZXNwb25zZS5gKSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSAge1xuICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9FUlJPUiwgX3RoaXMuVEFHLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IubWVzc2FnZSlcbiAgICB9KVxuICB9XG5cbiAgX29uRmV0Y2hSZXNwb25zZSAocmVzcG9uc2UpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMuYnVmZmVyKTtcbiAgICB0aGlzLl9sb2FkZXJUYXNrTm8rKztcbiAgICBsZXQgdGFza25vID0gdGhpcy5fbG9hZGVyVGFza05vO1xuICAgIGlmIChyZXNwb25zZS5vayA9PT0gdHJ1ZSkge1xuICAgICAgc3dpdGNoICh0aGlzLnJlYWR0eXBlKSB7XG4gICAgICAgIGNhc2UgUkVBRF9KU09OOlxuICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2NhbmNlbGVkICYmICFfdGhpcy5fZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUkVBRF9URVhUOlxuICAgICAgICAgIHJlc3BvbnNlLnRleHQoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2NhbmNlbGVkICYmICFfdGhpcy5fZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUkVBRF9CVUZGRVI6XG4gICAgICAgICAgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2NhbmNlbGVkICYmICFfdGhpcy5fZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChuZXcgVWludDhBcnJheShkYXRhKSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBkYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJFQURfU1RSRUFNOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB0aGlzLl9vblJlYWRlcihyZXNwb25zZS5ib2R5LmdldFJlYWRlcigpLCB0YXNrbm8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9vblJlYWRlciAocmVhZGVyLCB0YXNrbm8pIHtcbiAgICBsZXQgYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmJ1ZmZlcik7XG4gICAgaWYgKCghYnVmZmVyICYmIHRoaXMuX3JlYWRlcikgfHwgdGhpcy5fZGVzdHJveWVkKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9yZWFkZXIuY2FuY2VsKClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRE8gTk9USElOR1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3JlYWRlciA9IHJlYWRlclxuICAgIGlmICh0aGlzLmxvYWRpbmcgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzXG4gICAgLy8gcmVhZGVyIHJlYWQgZnVuY3Rpb24gcmV0dXJucyBhIFByb21pc2UuIGdldCBkYXRhIHdoZW4gY2FsbGJhY2sgYW5kIGhhcyB2YWx1ZS5kb25lIHdoZW4gZGlzY29ubmVjdGVkLlxuICAgIC8vIHJlYWTmlrnms5Xov5Tlm57kuIDkuKpQcm9taXNlLiDlm57osIPkuK3lj6/ku6Xojrflj5bliLDmlbDmja7jgILlvZN2YWx1ZS5kb25l5a2Y5Zyo5pe277yM6K+05piO6ZO+5o6l5pat5byA44CCXG4gICAgdGhpcy5fcmVhZGVyICYmIHRoaXMuX3JlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICBpZiAodmFsLmRvbmUpIHtcbiAgICAgICAgLy8gVE9ETzog5a6M5oiQ5aSE55CGXG4gICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICBfdGhpcy5zdGF0dXMgPSAwO1xuICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuX2NhbmNlbGVkIHx8IF90aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgICAgaWYgIChfdGhpcy5fcmVhZGVyKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIF90aGlzLl9yZWFkZXIuY2FuY2VsKClcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBETyBOT1RISU5HXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnVmZmVyLnB1c2godmFsLnZhbHVlKVxuICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9EQVRBTE9BREVELCBidWZmZXIpXG4gICAgICByZXR1cm4gX3RoaXMuX29uUmVhZGVyKHJlYWRlciwgdGFza25vKVxuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9FUlJPUiwgX3RoaXMuVEFHLCBlcnJvcik7XG4gICAgfSlcbiAgfVxuXG4gIGdldFBhcmFtcyAob3B0cykge1xuICAgIGxldCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cylcbiAgICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcblxuICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgIG1vZGU6ICdjb3JzJyxcbiAgICAgIGNhY2hlOiAnZGVmYXVsdCdcbiAgICB9XG5cbiAgICAvLyBhZGQgY3VzdG1vciBoZWFkZXJzXG4gICAgLy8g5re75Yqg6Ieq5a6a5LmJ5aS0XG4gICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZ3MuaGVhZGVycyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGxldCBjb25maWdIZWFkZXJzID0gdGhpcy5jb25maWdzLmhlYWRlcnNcbiAgICAgIGZvciAobGV0IGtleSBpbiBjb25maWdIZWFkZXJzKSB7XG4gICAgICAgIGlmIChjb25maWdIZWFkZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIGNvbmZpZ0hlYWRlcnNba2V5XSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5oZWFkZXJzID09PSAnb2JqZWN0Jykge1xuICAgICAgbGV0IG9wdEhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnNcbiAgICAgIGZvciAobGV0IGtleSBpbiBvcHRIZWFkZXJzKSB7XG4gICAgICAgIGlmIChvcHRIZWFkZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIG9wdEhlYWRlcnNba2V5XSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNvcnMgPT09IGZhbHNlKSB7XG4gICAgICBwYXJhbXMubW9kZSA9ICdzYW1lLW9yaWdpbidcbiAgICB9XG5cbiAgICAvLyB3aXRoQ3JlZGVudGlhbHMgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdFxuICAgIC8vIHdpdGhDcmVkZW50aWFscyDlnKjpu5jorqTmg4XlhrXkuIvkuI3ooqvkvb/nlKjjgIJcbiAgICBpZiAob3B0aW9ucy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHBhcmFtcy5jcmVkZW50aWFscyA9ICdpbmNsdWRlJ1xuICAgIH1cblxuICAgIC8vIFRPRE86IEFkZCByYW5nZXM7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIGNhbmNlbCAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fcmVhZGVyLmNhbmNlbCgpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIOmYsuatomZhaWxlZDogMjAw6ZSZ6K+v6KKr5omT5Y2w5Yiw5o6n5Yi25Y+w5LiKXG4gICAgICB9XG4gICAgICB0aGlzLl9yZWFkZXIgPSBudWxsXG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgdGhpcy5fY2FuY2VsZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2Rlc3Ryb3llZCA9IHRydWVcbiAgICB0aGlzLmNhbmNlbCgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZldGNoTG9hZGVyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgTXA0UmVtdXhlcjogcmVxdWlyZSgnLi9zcmMvbXA0JykuZGVmYXVsdFxufTtcbiIsImltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ3hncGxheWVyLXV0aWxzJztcblxuLy8gY29uc3QgVUlOVDMyX01BWCA9IE1hdGgucG93KDIsIDMyKSAtIDE7XG5jbGFzcyBGbXA0IHtcbiAgc3RhdGljIHNpemUgKHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci53cml0ZVVpbnQzMih2YWx1ZSlcbiAgfVxuICBzdGF0aWMgaW5pdEJveCAoc2l6ZSwgbmFtZSwgLi4uY29udGVudCkge1xuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoc2l6ZSksIEZtcDQudHlwZShuYW1lKSwgLi4uY29udGVudClcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBleHRlbnNpb24gKHZlcnNpb24sIGZsYWcpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgdmVyc2lvbixcbiAgICAgIChmbGFnID4+IDE2KSAmIDB4ZmYsXG4gICAgICAoZmxhZyA+PiA4KSAmIDB4ZmYsXG4gICAgICBmbGFnICYgMHhmZlxuICAgIF0pXG4gIH1cbiAgc3RhdGljIGZ0eXAgKCkge1xuICAgIHJldHVybiBGbXA0LmluaXRCb3goMjQsICdmdHlwJywgbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHg2OSwgMHg3MywgMHg2RiwgMHg2RCwgLy8gaXNvbSxcbiAgICAgIDB4MCwgMHgwLCAweDAwLCAweDAxLCAvLyBtaW5vcl92ZXJzaW9uOiAweDAxXG4gICAgICAweDY5LCAweDczLCAweDZGLCAweDZELCAvLyBpc29tXG4gICAgICAweDYxLCAweDc2LCAweDYzLCAweDMxIC8vIGF2YzFcbiAgICBdKSlcbiAgfVxuICBzdGF0aWMgbW9vdiAoeyB0eXBlLCBtZXRhIH0pIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgbXZoZCA9IEZtcDQubXZoZChtZXRhLmR1cmF0aW9uLCBtZXRhLnRpbWVzY2FsZSlcbiAgICBsZXQgdHJha1xuXG4gICAgaWYgKHR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgIHRyYWsgPSBGbXA0LnZpZGVvVHJhayhtZXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0cmFrID0gRm1wNC5hdWRpb1RyYWsobWV0YSlcbiAgICB9XG5cbiAgICBsZXQgbXZleCA9IEZtcDQubXZleChtZXRhLmR1cmF0aW9uLCBtZXRhLnRpbWVzY2FsZSB8fCAxMDAwLCBtZXRhLmlkKTtcbiAgICBbbXZoZCwgdHJhaywgbXZleF0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICdtb292JywgbXZoZCwgdHJhaywgbXZleClcbiAgfVxuICBzdGF0aWMgbXZoZCAoZHVyYXRpb24sIHRpbWVzY2FsZSA9IDEwMDApIHtcbiAgICAvLyBkdXJhdGlvbiAqPSB0aW1lc2NhbGU7XG4gICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdmVyc2lvbigwKSArIGZsYWdzICAgICAx5L2N55qEYm9454mI5pysKzPkvY1mbGFncyAgIGJveOeJiOacrO+8jDDmiJYx77yM5LiA6Iis5Li6MOOAgu+8iOS7peS4i+Wtl+iKguaVsOWdh+aMiXZlcnNpb249MO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY3JlYXRpb25fdGltZSAgICDliJvlu7rml7bpl7QgIO+8iOebuOWvueS6jlVUQ+aXtumXtDE5MDQtMDEtMDHpm7bngrnnmoTnp5LmlbDvvIlcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1vZGlmaWNhdGlvbl90aW1lICAg5L+u5pS55pe26Ze0XG5cbiAgICAgIC8qKlxuICAgICAgICAgICAgICogdGltZXNjYWxlOiA0IGJ5dGVz5paH5Lu25aqS5L2T5ZyoMeenkuaXtumXtOWGheeahOWIu+W6puWAvO+8jOWPr+S7peeQhuino+S4ujHnp5Lplb/luqZcbiAgICAgICAgICAgICAqL1xuICAgICAgKHRpbWVzY2FsZSA+Pj4gMjQpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlID4+PiA4KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlKSAmIDB4RkYsXG5cbiAgICAgIC8qKlxuICAgICAgICAgICAgICogZHVyYXRpb246IDQgYnl0ZXPor6V0cmFja+eahOaXtumXtOmVv+W6pu+8jOeUqGR1cmF0aW9u5ZKMdGltZSBzY2FsZeWAvOWPr+S7peiuoeeul3RyYWNr5pe26ZW/77yM5q+U5aaCYXVkaW8gdHJhY2vnmoR0aW1lIHNjYWxlID0gODAwMCxcbiAgICAgICAgICAgICAqIGR1cmF0aW9uID0gNTYwMTI477yM5pe26ZW/5Li6NzAuMDE277yMdmlkZW8gdHJhY2vnmoR0aW1lIHNjYWxlID0gNjAwLCBkdXJhdGlvbiA9IDQyMDAw77yM5pe26ZW/5Li6NzBcbiAgICAgICAgICAgICAqL1xuICAgICAgKGR1cmF0aW9uID4+PiAyNCkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIFByZWZlcnJlZCByYXRlOiAxLjAgICDmjqjojZDmkq3mlL7pgJ/njofvvIzpq5gxNuS9jeWSjOS9jjE25L2N5YiG5Yir5Li65bCP5pWw54K55pW05pWw6YOo5YiG5ZKM5bCP5pWw6YOo5YiG77yM5Y2zWzE2LjE2XSDmoLzlvI/vvIzor6XlgLzkuLoxLjDvvIgweDAwMDEwMDAw77yJ6KGo56S65q2j5bi45YmN5ZCR5pKt5pS+XG4gICAgICAvKipcbiAgICAgICAgICAgICAqIFByZWZlcnJlZFZvbHVtZSgxLjAsIDJieXRlcykgKyByZXNlcnZlZCgyYnl0ZXMpXG4gICAgICAgICAgICAgKiDkuI5yYXRl57G75Ly877yMWzguOF0g5qC85byP77yMMS4w77yIMHgwMTAw77yJ6KGo56S65pyA5aSn6Z+z6YePXG4gICAgICAgICAgICAgKi9cbiAgICAgIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyAgcmVzZXJ2ZWQ6IDQgKyA0IGJ5dGVz5L+d55WZ5L2NXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8gLS0tLWJlZ2luIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyDop4bpopHlj5jmjaLnn6npmLUgICDnur/mgKfku6PmlbBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHg0MCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gLS0tLWVuZCBjb21wb3NpdGlvbiBtYXRyaXgtLS0tXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyAtLS0tYmVnaW4gcHJlX2RlZmluZWQgNiAqIDQgYnl0ZXMtLS0tXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcHJlLWRlZmluZWQg5L+d55WZ5L2NXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgcHJlX2RlZmluZWQgNiAqIDQgYnl0ZXMtLS0tXG4gICAgICAweEZGLCAweEZGLCAweEZGLCAweEZGIC8vIG5leHRfdHJhY2tfSUQg5LiL5LiA5LiqdHJhY2vkvb/nlKjnmoRpZOWPt1xuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgYnl0ZXMubGVuZ3RoLCAnbXZoZCcsIG5ldyBVaW50OEFycmF5KGJ5dGVzKSlcbiAgfVxuICBzdGF0aWMgdmlkZW9UcmFrIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG5cbiAgICBsZXQgdGtoZCA9IEZtcDQudGtoZCh7XG4gICAgICBpZDogMSxcbiAgICAgIGR1cmF0aW9uOiBkYXRhLmR1cmF0aW9uLFxuICAgICAgdGltZXNjYWxlOiBkYXRhLnRpbWVzY2FsZSB8fCAxMDAwLFxuICAgICAgd2lkdGg6IGRhdGEucHJlc2VudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkYXRhLnByZXNlbnRIZWlnaHQsXG4gICAgICB0eXBlOiAndmlkZW8nXG4gICAgfSlcbiAgICBsZXQgbWRpYSA9IEZtcDQubWRpYSh7XG4gICAgICB0eXBlOiAndmlkZW8nLFxuICAgICAgdGltZXNjYWxlOiBkYXRhLnRpbWVzY2FsZSB8fCAxMDAwLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICBhdmNjOiBkYXRhLmF2Y2MsXG4gICAgICBwYXJSYXRpbzogZGF0YS5wYXJSYXRpbyxcbiAgICAgIHdpZHRoOiBkYXRhLnByZXNlbnRXaWR0aCxcbiAgICAgIGhlaWdodDogZGF0YS5wcmVzZW50SGVpZ2h0XG4gICAgfSk7XG4gICAgW3RraGQsIG1kaWFdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAndHJhaycsIHRraGQsIG1kaWEpXG4gIH1cbiAgc3RhdGljIGF1ZGlvVHJhayAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB0a2hkID0gRm1wNC50a2hkKHtcbiAgICAgIGlkOiAyLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIHR5cGU6ICdhdWRpbydcbiAgICB9KVxuICAgIGxldCBtZGlhID0gRm1wNC5tZGlhKHtcbiAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIGNoYW5uZWxDb3VudDogZGF0YS5jaGFubmVsQ291bnQsXG4gICAgICBzYW1wbGVyYXRlOiBkYXRhLnNhbXBsZVJhdGUsXG4gICAgICBjb25maWc6IGRhdGEuY29uZmlnXG4gICAgfSk7XG4gICAgW3RraGQsIG1kaWFdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAndHJhaycsIHRraGQsIG1kaWEpXG4gIH1cbiAgc3RhdGljIHRraGQgKGRhdGEpIHtcbiAgICBsZXQgaWQgPSBkYXRhLmlkXG4gICAgbGV0IGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvblxuICAgIGxldCB3aWR0aCA9IGRhdGEud2lkdGhcbiAgICBsZXQgaGVpZ2h0ID0gZGF0YS5oZWlnaHRcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDcsIC8vIHZlcnNpb24oMCkgKyBmbGFncyAx5L2N54mI5pysIGJveOeJiOacrO+8jDDmiJYx77yM5LiA6Iis5Li6MOOAgu+8iOS7peS4i+Wtl+iKguaVsOWdh+aMiXZlcnNpb249MO+8ieaMieS9jeaIluaTjeS9nOe7k+aenOWAvO+8jOmihOWumuS5ieWmguS4i++8mlxuICAgICAgLy8gMHgwMDAwMDEgdHJhY2tfZW5hYmxlZO+8jOWQpuWImeivpXRyYWNr5LiN6KKr5pKt5pS+77ybXG4gICAgICAvLyAweDAwMDAwMiB0cmFja19pbl9tb3ZpZe+8jOihqOekuuivpXRyYWNr5Zyo5pKt5pS+5Lit6KKr5byV55So77ybXG4gICAgICAvLyAweDAwMDAwNCB0cmFja19pbl9wcmV2aWV377yM6KGo56S66K+ldHJhY2vlnKjpooTop4jml7booqvlvJXnlKjjgIJcbiAgICAgIC8vIOS4gOiIrOivpeWAvOS4ujfvvIwxKzIrNCDlpoLmnpzkuIDkuKrlqpLkvZPmiYDmnIl0cmFja+Wdh+acquiuvue9rnRyYWNrX2luX21vdmll5ZKMdHJhY2tfaW5fcHJldmlld++8jOWwhuiiq+eQhuino+S4uuaJgOaciXRyYWNr5Z2H6K6+572u5LqG6L+Z5Lik6aG577yb5a+55LqOaGludCB0cmFja++8jOivpeWAvOS4ujBcbiAgICAgIC8vIGhpbnQgdHJhY2sg6L+Z5Liq54m55q6K55qEdHJhY2vlubbkuI3ljIXlkKvlqpLkvZPmlbDmja7vvIzogIzmmK/ljIXlkKvkuobkuIDkupvlsIblhbbku5bmlbDmja50cmFja+aJk+WMheaIkOa1geWqkuS9k+eahOaMh+ekuuS/oeaBr+OAglxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY3JlYXRpb25fdGltZeWIm+W7uuaXtumXtO+8iOebuOWvueS6jlVUQ+aXtumXtDE5MDQtMDEtMDHpm7bngrnnmoTnp5LmlbDvvIlcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1vZGlmaWNhdGlvbiB0aW1lIOS/ruaUueaXtumXtFxuICAgICAgKGlkID4+PiAyNCkgJiAweEZGLCAvLyB0cmFja19JRDogNCBieXRlcyBpZOWPt++8jOS4jeiDvemHjeWkjeS4lOS4jeiDveS4ujBcbiAgICAgIChpZCA+Pj4gMTYpICYgMHhGRixcbiAgICAgIChpZCA+Pj4gOCkgJiAweEZGLFxuICAgICAgKGlkKSAmIDB4RkYsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZDogNCBieXRlcyAgICDkv53nlZnkvY1cbiAgICAgIChkdXJhdGlvbiA+Pj4gMjQpICYgMHhGRiwgLy8gZHVyYXRpb246IDQgYnl0ZXMgdHJhY2vnmoTml7bpl7Tplb/luqZcbiAgICAgIChkdXJhdGlvbiA+Pj4gMTYpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZDogMiAqIDQgYnl0ZXMgICAg5L+d55WZ5L2NXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbGF5ZXIoMmJ5dGVzKSArIGFsdGVybmF0ZV9ncm91cCgyYnl0ZXMpICDop4bpopHlsYLvvIzpu5jorqTkuLow77yM5YC85bCP55qE5Zyo5LiK5bGCLnRyYWNr5YiG57uE5L+h5oGv77yM6buY6K6k5Li6MOihqOekuuivpXRyYWNr5pyq5LiO5YW25LuWdHJhY2vmnInnvqTnu4TlhbPns7tcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZvbHVtZSgyYnl0ZXMpICsgcmVzZXJ2ZWQoMmJ5dGVzKSAgICBbOC44XSDmoLzlvI/vvIzlpoLmnpzkuLrpn7PpopF0cmFja++8jDEuMO+8iDB4MDEwMO+8ieihqOekuuacgOWkp+mfs+mHj++8m+WQpuWImeS4ujAgICAr5L+d55WZ5L2NXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyAtLS0tYmVnaW4gY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8g6KeG6aKR5Y+Y5o2i55+p6Zi1XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDQwLCAweDAwLCAweDAwLCAweDAwLCAvLyAtLS0tZW5kIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgICh3aWR0aCA+Pj4gOCkgJiAweEZGLCAvLyAvL+WuveW6plxuICAgICAgKHdpZHRoKSAmIDB4RkYsXG4gICAgICAweDAwLCAweDAwLFxuICAgICAgKGhlaWdodCA+Pj4gOCkgJiAweEZGLCAvLyDpq5jluqZcbiAgICAgIChoZWlnaHQpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDBcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goOCArIGNvbnRlbnQuYnl0ZUxlbmd0aCwgJ3RraGQnLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBlZHRzIChkYXRhKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb25cbiAgICBsZXQgbWVkaWFUaW1lID0gZGF0YS5tZWRpYVRpbWVcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDM2KSwgRm1wNC50eXBlKCdlZHRzJykpXG4gICAgLy8gZWxzdFxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMjgpLCBGbXA0LnR5cGUoJ2Vsc3QnKSlcbiAgICBidWZmZXIud3JpdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZW50cnkgY291bnRcbiAgICAgIChkdXJhdGlvbiA+PiAyNCkgJiAweGZmLCAoZHVyYXRpb24gPj4gMTYpICYgMHhmZiwgKGR1cmF0aW9uID4+IDgpICYgMHhmZiwgZHVyYXRpb24gJiAweGZmLFxuICAgICAgKG1lZGlhVGltZSA+PiAyNCkgJiAweGZmLCAobWVkaWFUaW1lID4+IDE2KSAmIDB4ZmYsIChtZWRpYVRpbWUgPj4gOCkgJiAweGZmLCBtZWRpYVRpbWUgJiAweGZmLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSAvLyBtZWRpYSByYXRlXG4gICAgXSkpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgbWRpYSAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCBtZGhkID0gRm1wNC5tZGhkKGRhdGEudGltZXNjYWxlLCBkYXRhLmR1cmF0aW9uKVxuICAgIGxldCBoZGxyID0gRm1wNC5oZGxyKGRhdGEudHlwZSlcbiAgICBsZXQgbWluZiA9IEZtcDQubWluZihkYXRhKTtcbiAgICBbbWRoZCwgaGRsciwgbWluZl0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICdtZGlhJywgbWRoZCwgaGRsciwgbWluZilcbiAgfVxuICBzdGF0aWMgbWRoZCAodGltZXNjYWxlID0gMTAwMCwgZHVyYXRpb24pIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGNyZWF0aW9uX3RpbWUgICAg5Yib5bu65pe26Ze0XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtb2RpZmljYXRpb25fdGltZeS/ruaUueaXtumXtFxuICAgICAgKHRpbWVzY2FsZSA+Pj4gMjQpICYgMHhGRiwgLy8gdGltZXNjYWxlOiA0IGJ5dGVzICAgIOaWh+S7tuWqkuS9k+WcqDHnp5Lml7bpl7TlhoXnmoTliLvluqblgLzvvIzlj6/ku6XnkIbop6PkuLox56eS6ZW/5bqmXG4gICAgICAodGltZXNjYWxlID4+PiAxNikgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSA+Pj4gOCkgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBkdXJhdGlvbjogNCBieXRlcyAgdHJhY2vnmoTml7bpl7Tplb/luqZcbiAgICAgIChkdXJhdGlvbiA+Pj4gMTYpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAweDU1LCAweEM0LCAvLyBsYW5ndWFnZTogdW5kICh1bmRldGVybWluZWQpIOWqkuS9k+ivreiogOeggeOAguacgOmrmOS9jeS4ujDvvIzlkI7pnaIxNeS9jeS4ujPkuKrlrZfnrKbvvIjop4FJU08gNjM5LTIvVOagh+WHhuS4reWumuS5ie+8iVxuICAgICAgMHgwMCwgMHgwMCAvLyBwcmVfZGVmaW5lZCA9IDBcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTIgKyBjb250ZW50LmJ5dGVMZW5ndGgsICdtZGhkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIGhkbHIgKHR5cGUpIHtcbiAgICBsZXQgdmFsdWUgPSBbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgIDB4NzYsIDB4NjksIDB4NjQsIDB4NjUsIC8vIGhhbmRsZXJfdHlwZTogJ3ZpZGUnXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDU2LCAweDY5LCAweDY0LCAweDY1LFxuICAgICAgMHg2ZiwgMHg0OCwgMHg2MSwgMHg2ZSxcbiAgICAgIDB4NjQsIDB4NmMsIDB4NjUsIDB4NzIsIDB4MDAgLy8gbmFtZTogJ1ZpZGVvSGFuZGxlcidcbiAgICBdXG4gICAgaWYgKHR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIHZhbHVlLnNwbGljZSg4LCA0LCAuLi5bMHg3MywgMHg2ZiwgMHg3NSwgMHg2ZV0pXG4gICAgICB2YWx1ZS5zcGxpY2UoMjQsIDEzLCAuLi5bMHg1MywgMHg2ZiwgMHg3NSwgMHg2ZSxcbiAgICAgICAgMHg2NCwgMHg0OCwgMHg2MSwgMHg2ZSxcbiAgICAgICAgMHg2NCwgMHg2YywgMHg2NSwgMHg3MiwgMHgwMF0pXG4gICAgfVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goOCArIHZhbHVlLmxlbmd0aCwgJ2hkbHInLCBuZXcgVWludDhBcnJheSh2YWx1ZSkpXG4gIH1cbiAgc3RhdGljIG1pbmYgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgdm1oZCA9IGRhdGEudHlwZSA9PT0gJ3ZpZGVvJyA/IEZtcDQudm1oZCgpIDogRm1wNC5zbWhkKClcbiAgICBsZXQgZGluZiA9IEZtcDQuZGluZigpXG4gICAgbGV0IHN0YmwgPSBGbXA0LnN0YmwoZGF0YSk7XG4gICAgW3ZtaGQsIGRpbmYsIHN0YmxdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnbWluZicsIHZtaGQsIGRpbmYsIHN0YmwpXG4gIH1cbiAgc3RhdGljIHZtaGQgKCkge1xuICAgIHJldHVybiBGbXA0LmluaXRCb3goMjAsICd2bWhkJywgbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIC8vIGdyYXBoaWNzbW9kZVxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwIC8vIG9wY29sb3JcbiAgICBdKSlcbiAgfVxuICBzdGF0aWMgc21oZCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3NtaGQnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgLy8gYmFsYW5jZVxuICAgICAgMHgwMCwgMHgwMCAvLyByZXNlcnZlZFxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBkaW5mICgpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGRyZWYgPSBbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZW50cnlfY291bnRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MGMsIC8vIGVudHJ5X3NpemVcbiAgICAgIDB4NzUsIDB4NzIsIDB4NmMsIDB4MjAsIC8vICd1cmwnIHR5cGVcbiAgICAgIDB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMSAvLyBlbnRyeV9mbGFnc1xuICAgIF1cbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDM2KSwgRm1wNC50eXBlKCdkaW5mJyksIEZtcDQuc2l6ZSgyOCksIEZtcDQudHlwZSgnZHJlZicpLCBuZXcgVWludDhBcnJheShkcmVmKSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBzdGJsIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IHN0c2QgPSBGbXA0LnN0c2QoZGF0YSlcbiAgICBsZXQgc3R0cyA9IEZtcDQuc3R0cygpXG4gICAgbGV0IHN0c2MgPSBGbXA0LnN0c2MoKVxuICAgIGxldCBzdHN6ID0gRm1wNC5zdHN6KClcbiAgICBsZXQgc3RjbyA9IEZtcDQuc3RjbygpO1xuICAgIFtzdHNkLCBzdHRzLCBzdHNjLCBzdHN6LCBzdGNvXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ3N0YmwnLCBzdHNkLCBzdHRzLCBzdHNjLCBzdHN6LCBzdGNvKVxuICB9XG4gIHN0YXRpYyBzdHNkIChkYXRhKSB7XG4gICAgbGV0IGNvbnRlbnRcbiAgICBpZiAoZGF0YS50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAvLyBpZiAoIWRhdGEuaXNBQUMgJiYgZGF0YS5jb2RlYyA9PT0gJ21wNCcpIHtcbiAgICAgIC8vICAgICBjb250ZW50ID0gRk1QNC5tcDMoZGF0YSk7XG4gICAgICAvLyB9IGVsc2Uge1xuICAgICAgLy9cbiAgICAgIC8vIH1cbiAgICAgIC8vIOaUr+aMgW1wNGFcbiAgICAgIGNvbnRlbnQgPSBGbXA0Lm1wNGEoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudCA9IEZtcDQuYXZjMShkYXRhKVxuICAgIH1cbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2ICsgY29udGVudC5ieXRlTGVuZ3RoLCAnc3RzZCcsIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBuZXcgVWludDhBcnJheShbMHgwMCwgMHgwMCwgMHgwMCwgMHgwMV0pLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBtcDRhIChkYXRhKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDEsIC8vIGRhdGFfcmVmZXJlbmNlX2luZGV4XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIGRhdGEuY2hhbm5lbENvdW50LCAvLyBjaGFubmVsY291bnRcbiAgICAgIDB4MDAsIDB4MTAsIC8vIHNhbXBsZVNpemU6MTZiaXRzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZDJcbiAgICAgIChkYXRhLnNhbXBsZXJhdGUgPj4gOCkgJiAweGZmLFxuICAgICAgZGF0YS5zYW1wbGVyYXRlICYgMHhmZiwgLy9cbiAgICAgIDB4MDAsIDB4MDBcbiAgICBdKVxuICAgIGxldCBlc2RzID0gRm1wNC5lc2RzKGRhdGEuY29uZmlnKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goOCArIGNvbnRlbnQuYnl0ZUxlbmd0aCArIGVzZHMuYnl0ZUxlbmd0aCwgJ21wNGEnLCBjb250ZW50LCBlc2RzKVxuICB9XG4gIHN0YXRpYyBlc2RzIChjb25maWcgPSBbNDMsIDE0NiwgOCwgMF0pIHtcbiAgICBjb25zdCBjb25maWdsZW4gPSBjb25maWcubGVuZ3RoXG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuXG4gICAgICAweDAzLCAvLyBkZXNjcmlwdG9yX3R5cGVcbiAgICAgIDB4MTcgKyBjb25maWdsZW4sIC8vIGxlbmd0aFxuICAgICAgMHgwMCwgMHgwMSwgLy8gZXNfaWRcbiAgICAgIDB4MDAsIC8vIHN0cmVhbV9wcmlvcml0eVxuXG4gICAgICAweDA0LCAvLyBkZXNjcmlwdG9yX3R5cGVcbiAgICAgIDB4MGYgKyBjb25maWdsZW4sIC8vIGxlbmd0aFxuICAgICAgMHg0MCwgLy8gY29kZWMgOiBtcGVnNF9hdWRpb1xuICAgICAgMHgxNSwgLy8gc3RyZWFtX3R5cGVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGJ1ZmZlcl9zaXplXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtYXhCaXRyYXRlXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBhdmdCaXRyYXRlXG5cbiAgICAgIDB4MDUgLy8gZGVzY3JpcHRvcl90eXBlXG4gICAgXS5jb25jYXQoW2NvbmZpZ2xlbl0pLmNvbmNhdChjb25maWcpLmNvbmNhdChbMHgwNiwgMHgwMSwgMHgwMl0pKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoOCArIGNvbnRlbnQuYnl0ZUxlbmd0aCksIEZtcDQudHlwZSgnZXNkcycpLCBjb250ZW50KVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIGF2YzEgKGRhdGEpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IHNpemUgPSA0MC8vIDgoYXZjMSkrOChhdmNjKSs4KGJ0cnQpKzE2KHBhc3ApXG4gICAgLy8gbGV0IHNwcyA9IGRhdGEuc3BzXG4gICAgLy8gbGV0IHBwcyA9IGRhdGEucHBzXG4gICAgbGV0IHdpZHRoID0gZGF0YS53aWR0aFxuICAgIGxldCBoZWlnaHQgPSBkYXRhLmhlaWdodFxuICAgIGxldCBoU3BhY2luZyA9IGRhdGEucGFyUmF0aW8uaGVpZ2h0XG4gICAgbGV0IHZTcGFjaW5nID0gZGF0YS5wYXJSYXRpby53aWR0aFxuICAgIC8vIGxldCBhdmNjQnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgLy8gYXZjY0J1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgLy8gICAweDAxLCAvLyB2ZXJzaW9uXG4gICAgLy8gICBzcHNbMV0sIC8vIHByb2ZpbGVcbiAgICAvLyAgIHNwc1syXSwgLy8gcHJvZmlsZSBjb21wYXRpYmxlXG4gICAgLy8gICBzcHNbM10sIC8vIGxldmVsXG4gICAgLy8gICAweGZjIHwgMyxcbiAgICAvLyAgIDB4RTAgfCAxIC8vIOebruWJjeWPquWkhOeQhuS4gOS4qnNwc1xuICAgIC8vIF0uY29uY2F0KFtzcHMubGVuZ3RoID4+PiA4ICYgMHhmZiwgc3BzLmxlbmd0aCAmIDB4ZmZdKSkpXG4gICAgLy8gYXZjY0J1ZmZlci53cml0ZShzcHMsIG5ldyBVaW50OEFycmF5KFsxLCBwcHMubGVuZ3RoID4+PiA4ICYgMHhmZiwgcHBzLmxlbmd0aCAmIDB4ZmZdKSwgcHBzKVxuXG4gICAgbGV0IGF2Y2MgPSBkYXRhLmF2Y2NcbiAgICBsZXQgYXZjMSA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSwgLy8gZGF0YV9yZWZlcmVuY2VfaW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmVfZGVmaW5lZFxuICAgICAgKHdpZHRoID4+IDgpICYgMHhmZixcbiAgICAgIHdpZHRoICYgMHhmZiwgLy8gd2lkdGhcbiAgICAgIChoZWlnaHQgPj4gOCkgJiAweGZmLFxuICAgICAgaGVpZ2h0ICYgMHhmZiwgLy8gaGVpZ2h0XG4gICAgICAweDAwLCAweDQ4LCAweDAwLCAweDAwLCAvLyBob3JpenJlc29sdXRpb25cbiAgICAgIDB4MDAsIDB4NDgsIDB4MDAsIDB4MDAsIC8vIHZlcnRyZXNvbHV0aW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSwgLy8gZnJhbWVfY291bnRcbiAgICAgIDB4MTIsXG4gICAgICAweDY0LCAweDYxLCAweDY5LCAweDZDLCAvLyBkYWlseW1vdGlvbi9obHMuanNcbiAgICAgIDB4NzksIDB4NkQsIDB4NkYsIDB4NzQsXG4gICAgICAweDY5LCAweDZGLCAweDZFLCAweDJGLFxuICAgICAgMHg2OCwgMHg2QywgMHg3MywgMHgyRSxcbiAgICAgIDB4NkEsIDB4NzMsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGNvbXByZXNzb3JuYW1lXG4gICAgICAweDAwLCAweDE4LCAvLyBkZXB0aCA9IDI0XG4gICAgICAweDExLCAweDExXSkgLy8gcHJlX2RlZmluZWQgPSAtMVxuICAgIGxldCBidHJ0ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgxYywgMHg5YywgMHg4MCwgLy8gYnVmZmVyU2l6ZURCXG4gICAgICAweDAwLCAweDJkLCAweGM2LCAweGMwLCAvLyBtYXhCaXRyYXRlXG4gICAgICAweDAwLCAweDJkLCAweGM2LCAweGMwIC8vIGF2Z0JpdHJhdGVcbiAgICBdKVxuICAgIGxldCBwYXNwID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgKGhTcGFjaW5nID4+IDI0KSwgLy8gaFNwYWNpbmdcbiAgICAgIChoU3BhY2luZyA+PiAxNikgJiAweGZmLFxuICAgICAgKGhTcGFjaW5nID4+IDgpICYgMHhmZixcbiAgICAgIGhTcGFjaW5nICYgMHhmZixcbiAgICAgICh2U3BhY2luZyA+PiAyNCksIC8vIHZTcGFjaW5nXG4gICAgICAodlNwYWNpbmcgPj4gMTYpICYgMHhmZixcbiAgICAgICh2U3BhY2luZyA+PiA4KSAmIDB4ZmYsXG4gICAgICB2U3BhY2luZyAmIDB4ZmZcbiAgICBdKVxuXG4gICAgYnVmZmVyLndyaXRlKFxuICAgICAgRm1wNC5zaXplKHNpemUgKyBhdmMxLmJ5dGVMZW5ndGggKyBhdmNjLmJ5dGVMZW5ndGggKyBidHJ0LmJ5dGVMZW5ndGgpLCBGbXA0LnR5cGUoJ2F2YzEnKSwgYXZjMSxcbiAgICAgIEZtcDQuc2l6ZSg4ICsgYXZjYy5ieXRlTGVuZ3RoKSwgRm1wNC50eXBlKCdhdmNDJyksIGF2Y2MsXG4gICAgICBGbXA0LnNpemUoMjApLCBGbXA0LnR5cGUoJ2J0cnQnKSwgYnRydCxcbiAgICAgIEZtcDQuc2l6ZSgxNiksIEZtcDQudHlwZSgncGFzcCcpLCBwYXNwXG4gICAgKVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIHN0dHMgKCkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZW50cnlfY291bnRcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICdzdHRzJywgY29udGVudClcbiAgfVxuICBzdGF0aWMgc3RzYyAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBlbnRyeV9jb3VudFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3N0c2MnLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBzdGNvICgpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIGVudHJ5X2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc3RjbycsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHN0c3ogKCkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHNhbXBsZV9zaXplXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIHNhbXBsZV9jb3VudFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyMCwgJ3N0c3onLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBtdmV4IChkdXJhdGlvbiwgdGltZXNjYWxlID0gMTAwMCwgdHJhY2tJRCkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgbWVoZCA9IEJ1ZmZlci53cml0ZVVpbnQzMihkdXJhdGlvbilcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDU2KSwgRm1wNC50eXBlKCdtdmV4JyksIEZtcDQuc2l6ZSgxNiksIEZtcDQudHlwZSgnbWVoZCcpLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgbWVoZCwgRm1wNC50cmV4KHRyYWNrSUQpKVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIHRyZXggKGlkKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAoaWQgPj4gMjQpLFxuICAgICAgKGlkID4+IDE2KSAmIDB4ZmYsXG4gICAgICAoaWQgPj4gOCkgJiAweGZmLFxuICAgICAgKGlkICYgMHhmZiksIC8vIHRyYWNrX0lEXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBkZWZhdWx0X3NhbXBsZV9kZXNjcmlwdGlvbl9pbmRleFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZGVmYXVsdF9zYW1wbGVfZHVyYXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGRlZmF1bHRfc2FtcGxlX3NpemVcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDEgLy8gZGVmYXVsdF9zYW1wbGVfZmxhZ3NcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goOCArIGNvbnRlbnQuYnl0ZUxlbmd0aCwgJ3RyZXgnLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBtb29mIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IG1maGQgPSBGbXA0Lm1maGQoKVxuICAgIGxldCB0cmFmID0gRm1wNC50cmFmKGRhdGEpO1xuICAgIFttZmhkLCB0cmFmXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21vb2YnLCBtZmhkLCB0cmFmKVxuICB9XG4gIHN0YXRpYyBtZmhkICgpIHtcbiAgICBsZXQgY29udGVudCA9IEJ1ZmZlci53cml0ZVVpbnQzMihGbXA0LnNlcXVlbmNlKVxuICAgIEZtcDQuc2VxdWVuY2UgKz0gMVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICdtZmhkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHRyYWYgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgdGZoZCA9IEZtcDQudGZoZChkYXRhLmlkKVxuICAgIGxldCB0ZmR0ID0gRm1wNC50ZmR0KGRhdGEudGltZSlcbiAgICBsZXQgc2R0cCA9IEZtcDQuc2R0cChkYXRhKVxuICAgIGxldCB0cnVuID0gRm1wNC50cnVuKGRhdGEsIHNkdHAuYnl0ZUxlbmd0aCk7XG5cbiAgICBbdGZoZCwgdGZkdCwgdHJ1biwgc2R0cF0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFmJywgdGZoZCwgdGZkdCwgdHJ1biwgc2R0cClcbiAgfVxuICBzdGF0aWMgdGZoZCAoaWQpIHtcbiAgICBsZXQgY29udGVudCA9IEJ1ZmZlci53cml0ZVVpbnQzMihpZClcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAndGZoZCcsIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyB0ZmR0ICh0aW1lKSB7XG4gICAgLy8gbGV0IHVwcGVyID0gTWF0aC5mbG9vcih0aW1lIC8gKFVJTlQzMl9NQVggKyAxKSksXG4gICAgLy8gICAgIGxvd2VyID0gTWF0aC5mbG9vcih0aW1lICUgKFVJTlQzMl9NQVggKyAxKSk7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3RmZHQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgQnVmZmVyLndyaXRlVWludDMyKHRpbWUpKVxuICB9XG4gIHN0YXRpYyB0cnVuIChkYXRhLCBzZHRwTGVuZ3RoKSB7XG4gICAgLy8gbGV0IGlkID0gZGF0YS5pZDtcbiAgICAvLyBsZXQgY2VpbCA9IGlkID09PSAxID8gMTYgOiAxMjtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IHNhbXBsZUNvdW50ID0gQnVmZmVyLndyaXRlVWludDMyKGRhdGEuc2FtcGxlcy5sZW5ndGgpXG4gICAgLy8gbWRhdC1oZWFkZXIgOFxuICAgIC8vIG1vb2YtaGVhZGVyIDhcbiAgICAvLyBtZmhkIDE2XG4gICAgLy8gdHJhZi1oZWFkZXIgOFxuICAgIC8vIHRoaGQgMTZcbiAgICAvLyB0ZmR0IDIwXG4gICAgLy8gdHJ1bi1oZWFkZXIgMTJcbiAgICAvLyBzYW1wbGVDb3VudCA0XG4gICAgLy8gZGF0YS1vZmZzZXQgNFxuICAgIC8vIHNhbXBsZXMubGVuZ3RoXG4gICAgbGV0IG9mZnNldCA9IEJ1ZmZlci53cml0ZVVpbnQzMig4ICsgOCArIDE2ICsgOCArIDE2ICsgMTYgKyAxMiArIDQgKyA0ICsgMTYgKiBkYXRhLnNhbXBsZXMubGVuZ3RoICsgc2R0cExlbmd0aClcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDIwICsgMTYgKiBkYXRhLnNhbXBsZXMubGVuZ3RoKSwgRm1wNC50eXBlKCd0cnVuJyksIG5ldyBVaW50OEFycmF5KFsweDAwLCAweDAwLCAweDBGLCAweDAxXSksIHNhbXBsZUNvdW50LCBvZmZzZXQpXG5cbiAgICAvLyBsZXQgc2l6ZSA9IGJ1ZmZlci5idWZmZXIuYnl0ZUxlbmd0aFxuICAgIC8vIGxldCB3cml0ZU9mZnNldCA9IDBcbiAgICAvLyBkYXRhLnNhbXBsZXMuZm9yRWFjaCgoKSA9PiB7XG4gICAgLy8gICBzaXplICs9IDE2XG4gICAgLy8gfSlcbiAgICAvL1xuICAgIC8vIGxldCB0cnVuQm94ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcblxuICAgIC8vIHRydW5Cb3guc2V0KGJ1ZmZlci5idWZmZXIsIDApXG5cbiAgICBkYXRhLnNhbXBsZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgZmxhZ3MgPSBpdGVtLmZsYWdzXG4gICAgICAvLyBjb25zb2xlLmxvZyhpdGVtLnR5cGUsIGl0ZW0uZHRzLCBpdGVtLmR1cmF0aW9uKVxuXG4gICAgICBidWZmZXIud3JpdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgICAoaXRlbS5kdXJhdGlvbiA+Pj4gMjQpICYgMHhGRiwgLy8gc2FtcGxlX2R1cmF0aW9uXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgICAoaXRlbS5kdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuICAgICAgICAoaXRlbS5kdXJhdGlvbikgJiAweEZGLFxuICAgICAgICAoaXRlbS5zaXplID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfc2l6ZVxuICAgICAgICAoaXRlbS5zaXplID4+PiAxNikgJiAweEZGLFxuICAgICAgICAoaXRlbS5zaXplID4+PiA4KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUpICYgMHhGRixcbiAgICAgICAgKGZsYWdzLmlzTGVhZGluZyA8PCAyKSB8IGZsYWdzLmRlcGVuZHNPbiwgLy8gc2FtcGxlX2ZsYWdzXG4gICAgICAgIChmbGFncy5pc0RlcGVuZGVkT24gPDwgNikgfCAoZmxhZ3MuaGFzUmVkdW5kYW5jeSA8PCA0KSB8IGZsYWdzLmlzTm9uU3luYyxcbiAgICAgICAgMHgwMCwgMHgwMCwgLy8gc2FtcGxlX2RlZ3JhZGF0aW9uX3ByaW9yaXR5XG4gICAgICAgIChpdGVtLmN0cyA+Pj4gMjQpICYgMHhGRiwgLy8gc2FtcGxlX2NvbXBvc2l0aW9uX3RpbWVfb2Zmc2V0XG4gICAgICAgIChpdGVtLmN0cyA+Pj4gMTYpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uY3RzID4+PiA4KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmN0cykgJiAweEZGXG4gICAgICBdKSlcbiAgICAgIC8vIHdyaXRlT2Zmc2V0ICs9IDE2XG4gICAgICAvLyBidWZmZXIud3JpdGUoQnVmZmVyLndyaXRlVWludDMyKDApKTtcbiAgICB9KVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIHNkdHAgKGRhdGEpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSgxMiArIGRhdGEuc2FtcGxlcy5sZW5ndGgpLCBGbXA0LnR5cGUoJ3NkdHAnKSwgRm1wNC5leHRlbnNpb24oMCwgMCkpXG4gICAgZGF0YS5zYW1wbGVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBjb25zdCBmbGFncyA9IGl0ZW0uZmxhZ3NcbiAgICAgIGNvbnN0IG51bSA9IChmbGFncy5pc0xlYWRpbmcgPDwgNikgfCAvLyBpc19sZWFkaW5nOiAyIChiaXQpXG4gICAgICAgIChmbGFncy5kZXBlbmRzT24gPDwgNCkgfCAvLyBzYW1wbGVfZGVwZW5kc19vblxuICAgICAgICAoZmxhZ3MuaXNEZXBlbmRlZE9uIDw8IDIpIHwgLy8gc2FtcGxlX2lzX2RlcGVuZGVkX29uXG4gICAgICAgIChmbGFncy5oYXNSZWR1bmRhbmN5KS8vIHNhbXBsZV9oYXNfcmVkdW5kYW5jeVxuXG4gICAgICBidWZmZXIud3JpdGUobmV3IFVpbnQ4QXJyYXkoW251bV0pKVxuICAgIH0pXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgbWRhdCAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBkYXRhLnNhbXBsZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5zaXplXG4gICAgfSlcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKHNpemUpLCBGbXA0LnR5cGUoJ21kYXQnKSlcbiAgICBsZXQgbWRhdEJveCA9IG5ldyBVaW50OEFycmF5KHNpemUpXG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICBtZGF0Qm94LnNldChidWZmZXIuYnVmZmVyLCBvZmZzZXQpXG4gICAgb2Zmc2V0ICs9IDhcbiAgICBkYXRhLnNhbXBsZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGl0ZW0uYnVmZmVyLmZvckVhY2goKHVuaXQpID0+IHtcbiAgICAgICAgbWRhdEJveC5zZXQodW5pdCwgb2Zmc2V0KVxuICAgICAgICBvZmZzZXQgKz0gdW5pdC5ieXRlTGVuZ3RoXG4gICAgICAgIC8vIGJ1ZmZlci53cml0ZSh1bml0LmRhdGEpO1xuICAgICAgfSlcbiAgICB9KVxuICAgIHJldHVybiBtZGF0Qm94XG4gIH1cbn1cbkZtcDQudHlwZSA9IChuYW1lKSA9PiB7XG4gIHJldHVybiBuZXcgVWludDhBcnJheShbbmFtZS5jaGFyQ29kZUF0KDApLCBuYW1lLmNoYXJDb2RlQXQoMSksIG5hbWUuY2hhckNvZGVBdCgyKSwgbmFtZS5jaGFyQ29kZUF0KDMpXSlcbn1cbkZtcDQuc2VxdWVuY2UgPSAxXG5cbmV4cG9ydCBkZWZhdWx0IEZtcDRcbiIsImltcG9ydCB7XG4gIEVWRU5UUyxcbiAgc25pZmZlcixcbiAgTWVkaWFTZWdtZW50TGlzdCxcbiAgQnVmZmVyXG59IGZyb20gJ3hncGxheWVyLXV0aWxzJztcbmltcG9ydCBGbXA0IGZyb20gJy4vZm1wNCdcblxuY29uc3QgUkVNVVhfRVZFTlRTID0gRVZFTlRTLlJFTVVYX0VWRU5UU1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNcDRSZW11eGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuX2R0c0Jhc2UgPSAwXG4gICAgdGhpcy5faXNEdHNCYXNlSW5pdGVkID0gZmFsc2VcbiAgICB0aGlzLl9hdWRpb05leHREdHMgPSBudWxsXG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gbnVsbFxuICAgIHRoaXMuX3ZpZGVvU2VnbWVudExpc3QgPSBuZXcgTWVkaWFTZWdtZW50TGlzdCgndmlkZW8nKVxuICAgIHRoaXMuX2F1ZGlvU2VnbWVudExpc3QgPSBuZXcgTWVkaWFTZWdtZW50TGlzdCgnYXVkaW8nKVxuICAgIGNvbnN0IHticm93c2VyfSA9IHNuaWZmZXJcbiAgICB0aGlzLl9maWxsU2lsZW5jZUZyYW1lID0gYnJvd3NlciA9PT0gJ2llJ1xuXG4gICAgdGhpcy5pc0ZpcnN0VmlkZW8gPSB0cnVlXG4gICAgdGhpcy5pc0ZpcnN0QXVkaW8gPSB0cnVlXG5cbiAgICB0aGlzLnZpZGVvQWxsRHVyYXRpb24gPSAwXG4gICAgdGhpcy5hdWRpb0FsbER1cmF0aW9uID0gMFxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5vbihSRU1VWF9FVkVOVFMuUkVNVVhfTUVESUEsIHRoaXMucmVtdXguYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5SRU1VWF9NRVRBREFUQSwgdGhpcy5vbk1ldGFEYXRhUmVhZHkuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5ERVRFQ1RfQ0hBTkdFX1NUUkVBTSwgdGhpcy5yZXNldER0c0Jhc2UuYmluZCh0aGlzKSlcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2R0c0Jhc2UgPSAtMVxuICAgIHRoaXMuX2R0c0Jhc2VJbml0ZWQgPSBmYWxzZVxuICAgIHRoaXMuX3ZpZGVvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl9hdWRpb05leHREdHMgPSBudWxsXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50TGlzdC5jbGVhcigpXG4gICAgdGhpcy5fYXVkaW9TZWdtZW50TGlzdC5jbGVhcigpXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50TGlzdCA9IG51bGxcbiAgICB0aGlzLl9hdWRpb1NlZ21lbnRMaXN0ID0gbnVsbFxuICB9XG5cbiAgcmVtdXggKCkge1xuICAgIGNvbnN0IHsgYXVkaW9UcmFjaywgdmlkZW9UcmFjayB9ID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgICAhdGhpcy5faXNEdHNCYXNlSW5pdGVkICYmIHRoaXMuY2FsY0R0c0Jhc2UoYXVkaW9UcmFjaywgdmlkZW9UcmFjaylcblxuICAgIHRoaXMuX3JlbXV4VmlkZW8odmlkZW9UcmFjaylcbiAgICB0aGlzLl9yZW11eEF1ZGlvKGF1ZGlvVHJhY2spXG4gIH1cblxuICByZXNldER0c0Jhc2UgKCkge1xuICAgIC8vIGZvciBobHMg5Lit6YCU5YiH5o2iIG1ldGHlkI5zZWVrXG4gICAgdGhpcy5fZHRzQmFzZSA9IDBcbiAgICB0aGlzLl9kdHNCYXNlSW5pdGVkID0gZmFsc2VcbiAgfVxuXG4gIHNlZWsgKCkge1xuICAgIHRoaXMuX3ZpZGVvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl9hdWRpb05leHREdHMgPSBudWxsXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50TGlzdC5jbGVhcigpXG4gICAgdGhpcy5fYXVkaW9TZWdtZW50TGlzdC5jbGVhcigpXG4gIH1cblxuICBvbk1ldGFEYXRhUmVhZHkgKHR5cGUpIHtcbiAgICBsZXQgdHJhY2tcblxuICAgIGlmICh0eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICBjb25zdCB7IGF1ZGlvVHJhY2sgfSA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gICAgICB0cmFjayA9IGF1ZGlvVHJhY2s7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgdmlkZW9UcmFjayB9ID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgICAgIHRyYWNrID0gdmlkZW9UcmFjaztcbiAgICB9XG5cbiAgICBsZXQgcHJlc291cmNlYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmdldFNvdXJjZSh0eXBlKTtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmNyZWF0ZVNvdXJjZSh0eXBlKTtcbiAgICB9XG5cbiAgICBzb3VyY2UubWltZXR5cGUgPSB0cmFjay5tZXRhLmNvZGVjO1xuICAgIHNvdXJjZS5pbml0ID0gdGhpcy5yZW11eEluaXRTZWdtZW50KHR5cGUsIHRyYWNrLm1ldGEpO1xuICAgIC8vIHNvdXJjZS5pbml0ZWQgPSBmYWxzZTtcblxuICAgIC8vIHRoaXMucmVzZXREdHNCYXNlKClcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLklOSVRfU0VHTUVOVCwgdHlwZSlcbiAgfVxuXG4gIHJlbXV4SW5pdFNlZ21lbnQgKHR5cGUsIG1ldGEpIHtcbiAgICBsZXQgaW5pdFNlZ21lbnQgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgZnR5cCA9IEZtcDQuZnR5cCgpXG4gICAgbGV0IG1vb3YgPSBGbXA0Lm1vb3YoeyB0eXBlLCBtZXRhOiBtZXRhIH0pXG5cbiAgICBpbml0U2VnbWVudC53cml0ZShmdHlwLCBtb292KVxuICAgIHJldHVybiBpbml0U2VnbWVudDtcbiAgfVxuXG4gIGNhbGNEdHNCYXNlIChhdWRpb1RyYWNrLCB2aWRlb1RyYWNrKSB7XG4gICAgaWYgKCFhdWRpb1RyYWNrLnNhbXBsZXMubGVuZ3RoICYmICF2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGF1ZGlvQmFzZSA9IEluZmluaXR5XG4gICAgbGV0IHZpZGVvQmFzZSA9IEluZmluaXR5XG5cbiAgICBpZiAoYXVkaW9UcmFjay5zYW1wbGVzICYmIGF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIGF1ZGlvQmFzZSA9IGF1ZGlvVHJhY2suc2FtcGxlc1swXS5kdHNcbiAgICB9XG4gICAgaWYgKHZpZGVvVHJhY2suc2FtcGxlcyAmJiB2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICB2aWRlb0Jhc2UgPSB2aWRlb1RyYWNrLnNhbXBsZXNbMF0uZHRzXG4gICAgfVxuXG4gICAgdGhpcy5fZHRzQmFzZSA9IE1hdGgubWluKGF1ZGlvQmFzZSwgdmlkZW9CYXNlKVxuICAgIHRoaXMuX2lzRHRzQmFzZUluaXRlZCA9IHRydWVcbiAgfVxuXG4gIF9yZW11eFZpZGVvICh2aWRlb1RyYWNrKSB7XG4gICAgY29uc3QgdHJhY2sgPSB2aWRlb1RyYWNrXG5cbiAgICBpZiAoIXZpZGVvVHJhY2suc2FtcGxlcyB8fCAhdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IHtzYW1wbGVzfSA9IHRyYWNrXG4gICAgbGV0IGZpcnN0RHRzID0gLTFcblxuICAgIGxldCBpbml0U2VnbWVudCA9IG51bGxcbiAgICBjb25zdCBtcDRTYW1wbGVzID0gW11cbiAgICBjb25zdCBtZGF0Qm94ID0ge1xuICAgICAgc2FtcGxlczogW11cbiAgICB9XG5cbiAgICBsZXQgbWF4TG9vcCA9IDEwMDAwXG4gICAgd2hpbGUgKHNhbXBsZXMubGVuZ3RoICYmIG1heExvb3AtLSA+IDApIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdtYXJrMicpXG4gICAgICBjb25zdCBhdmNTYW1wbGUgPSBzYW1wbGVzLnNoaWZ0KClcblxuICAgICAgY29uc3QgeyBpc0tleWZyYW1lLCBvcHRpb25zIH0gPSBhdmNTYW1wbGVcbiAgICAgIGlmICghdGhpcy5pc0ZpcnN0QXVkaW8gJiYgb3B0aW9ucyAmJiBvcHRpb25zLm1ldGEpIHtcbiAgICAgICAgaW5pdFNlZ21lbnQgPSB0aGlzLnJlbXV4SW5pdFNlZ21lbnQoJ3ZpZGVvJywgb3B0aW9ucy5tZXRhKVxuICAgICAgICBvcHRpb25zLm1ldGEgPSBudWxsXG4gICAgICAgIHNhbXBsZXMudW5zaGlmdChhdmNTYW1wbGUpXG4gICAgICAgIGlmICghb3B0aW9ucy5pc0NvbnRpbnVlKSB7XG4gICAgICAgICAgdGhpcy5yZXNldER0c0Jhc2UoKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBsZXQgZHRzID0gYXZjU2FtcGxlLmR0cyAtIHRoaXMuX2R0c0Jhc2VcblxuICAgICAgaWYgKGZpcnN0RHRzID09PSAtMSkge1xuICAgICAgICBmaXJzdER0cyA9IGR0c1xuICAgICAgfVxuXG4gICAgICBsZXQgY3RzXG4gICAgICBsZXQgcHRzXG4gICAgICBpZiAoYXZjU2FtcGxlLnB0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHB0cyA9IGF2Y1NhbXBsZS5wdHMgLSB0aGlzLl9kdHNCYXNlXG4gICAgICAgIGN0cyA9IHB0cyAtIGR0c1xuICAgICAgfVxuICAgICAgaWYgKGF2Y1NhbXBsZS5jdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwdHMgPSBhdmNTYW1wbGUuY3RzICsgZHRzXG4gICAgICAgIGN0cyA9IGF2Y1NhbXBsZS5jdHNcbiAgICAgIH1cblxuICAgICAgbGV0IG1kYXRTYW1wbGUgPSB7XG4gICAgICAgIGJ1ZmZlcjogW10sXG4gICAgICAgIHNpemU6IDBcbiAgICAgIH1cbiAgICAgIG1kYXRCb3guc2FtcGxlcy5wdXNoKG1kYXRTYW1wbGUpXG4gICAgICBtZGF0U2FtcGxlLmJ1ZmZlci5wdXNoKGF2Y1NhbXBsZS5kYXRhKVxuICAgICAgbWRhdFNhbXBsZS5zaXplICs9IGF2Y1NhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcblxuICAgICAgbGV0IHNhbXBsZUR1cmF0aW9uID0gMFxuICAgICAgaWYgKGF2Y1NhbXBsZS5kdXJhdGlvbikge1xuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IGF2Y1NhbXBsZS5kdXJhdGlvbjtcbiAgICAgIH0gZWxzZSBpZiAoc2FtcGxlcy5sZW5ndGggPj0gMSkge1xuICAgICAgICBjb25zdCBuZXh0RHRzID0gc2FtcGxlc1swXS5kdHMgLSB0aGlzLl9kdHNCYXNlXG4gICAgICAgIHNhbXBsZUR1cmF0aW9uID0gbmV4dER0cyAtIGR0c1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG1wNFNhbXBsZXMubGVuZ3RoID49IDEpIHsgLy8gbGFzdGVzdCBzYW1wbGUsIHVzZSBzZWNvbmQgbGFzdCBkdXJhdGlvblxuICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gbXA0U2FtcGxlc1ttcDRTYW1wbGVzLmxlbmd0aCAtIDFdLmR1cmF0aW9uXG4gICAgICAgIH0gZWxzZSB7IC8vIHRoZSBvbmx5IG9uZSBzYW1wbGUsIHVzZSByZWZlcmVuY2UgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IHRoaXMudmlkZW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMudmlkZW9BbGxEdXJhdGlvbiArPSBzYW1wbGVEdXJhdGlvblxuICAgICAgLy8gY29uc29sZS5sb2coYGR0cyAke2R0c31gLCBgcHRzICR7cHRzfWAsIGlzS2V5ZnJhbWUsIGBkdXJhdGlvbiAke3NhbXBsZUR1cmF0aW9ufWApXG4gICAgICBtcDRTYW1wbGVzLnB1c2goe1xuICAgICAgICBkdHMsXG4gICAgICAgIGN0cyxcbiAgICAgICAgcHRzLFxuICAgICAgICBkYXRhOiBhdmNTYW1wbGUuZGF0YSxcbiAgICAgICAgc2l6ZTogYXZjU2FtcGxlLmRhdGEuYnl0ZUxlbmd0aCxcbiAgICAgICAgaXNLZXlmcmFtZSxcbiAgICAgICAgZHVyYXRpb246IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBmbGFnczoge1xuICAgICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgICBkZXBlbmRzT246IGlzS2V5ZnJhbWUgPyAyIDogMSxcbiAgICAgICAgICBpc0RlcGVuZGVkT246IGlzS2V5ZnJhbWUgPyAxIDogMCxcbiAgICAgICAgICBoYXNSZWR1bmRhbmN5OiAwLFxuICAgICAgICAgIGlzTm9uU3luYzogaXNLZXlmcmFtZSA/IDAgOiAxXG4gICAgICAgIH0sXG4gICAgICAgIG9yaWdpbkR0czogZHRzLFxuICAgICAgICB0eXBlOiAndmlkZW8nXG4gICAgICB9KVxuXG4gICAgICBpZiAoaXNLZXlmcmFtZSkge1xuICAgICAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLlJBTkRPTV9BQ0NFU1NfUE9JTlQsIHB0cylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgbW9vZk1kYXQgPSBuZXcgQnVmZmVyKClcbiAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG1vb2YgPSBGbXA0Lm1vb2Yoe1xuICAgICAgICBpZDogdHJhY2subWV0YS5pZCxcbiAgICAgICAgdGltZTogZmlyc3REdHMsXG4gICAgICAgIHNhbXBsZXM6IG1wNFNhbXBsZXNcbiAgICAgIH0pXG4gICAgICBjb25zdCBtZGF0ID0gRm1wNC5tZGF0KG1kYXRCb3gpXG4gICAgICBtb29mTWRhdC53cml0ZShtb29mLCBtZGF0KVxuXG4gICAgICB0aGlzLndyaXRlVG9Tb3VyY2UoJ3ZpZGVvJywgbW9vZk1kYXQpXG4gICAgfVxuXG4gICAgaWYgKGluaXRTZWdtZW50KSB7XG4gICAgICB0aGlzLndyaXRlVG9Tb3VyY2UoJ3ZpZGVvJywgaW5pdFNlZ21lbnQpXG5cbiAgICAgIGlmIChzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgICAvLyBzZWNvbmQgcGFydCBvZiBzdHJlYW0gY2hhbmdlXG4gICAgICAgIHRyYWNrLnNhbXBsZXMgPSBzYW1wbGVzO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVtdXhWaWRlbyh0cmFjaylcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmlzRmlyc3RWaWRlbyA9IGZhbHNlXG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5NRURJQV9TRUdNRU5ULCAndmlkZW8nKVxuXG4gICAgY29uc3QgbGFzdFNhbXBsZSA9IG1wNFNhbXBsZXNbbXA0U2FtcGxlcy5sZW5ndGggLSAxXVxuICAgIHRoaXMuX3ZpZGVvTmV4dER0cyA9IGxhc3RTYW1wbGUuZHRzICsgbGFzdFNhbXBsZS5kdXJhdGlvbjtcbiAgICB0cmFjay5zYW1wbGVzID0gW11cbiAgICB0cmFjay5sZW5ndGggPSAwXG4gIH1cblxuICBfcmVtdXhBdWRpbyAodHJhY2spIHtcbiAgICBjb25zdCB7c2FtcGxlc30gPSB0cmFja1xuICAgIGxldCBmaXJzdER0cyA9IC0xXG4gICAgbGV0IG1wNFNhbXBsZXMgPSBbXVxuXG4gICAgbGV0IGluaXRTZWdtZW50ID0gbnVsbFxuICAgIGNvbnN0IG1kYXRCb3ggPSB7XG4gICAgICBzYW1wbGVzOiBbXVxuICAgIH1cbiAgICBpZiAoIXNhbXBsZXMgfHwgIXNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgbWF4TG9vcCA9IDEwMDAwXG4gICAgbGV0IGlzRmlyc3REdHNJbml0ZWQgPSBmYWxzZVxuICAgIHdoaWxlIChzYW1wbGVzLmxlbmd0aCAmJiBtYXhMb29wLS0gPiAwKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnbWFyazMnKVxuICAgICAgbGV0IHNhbXBsZSA9IHNhbXBsZXMuc2hpZnQoKVxuICAgICAgY29uc3QgeyBkYXRhLCBvcHRpb25zIH0gPSBzYW1wbGVcbiAgICAgIGlmICghdGhpcy5pc0ZpcnN0QXVkaW8gJiYgb3B0aW9ucyAmJiBvcHRpb25zLm1ldGEpIHtcbiAgICAgICAgaW5pdFNlZ21lbnQgPSB0aGlzLnJlbXV4SW5pdFNlZ21lbnQoJ2F1ZGlvJywgb3B0aW9ucy5tZXRhKVxuICAgICAgICBvcHRpb25zLm1ldGEgPSBudWxsO1xuICAgICAgICBzYW1wbGVzLnVuc2hpZnQoc2FtcGxlKVxuICAgICAgICBpZiAoIW9wdGlvbnMuaXNDb250aW51ZSkge1xuICAgICAgICAgIHRoaXMucmVzZXREdHNCYXNlKClcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgbGV0IGR0cyA9IHNhbXBsZS5kdHMgLSB0aGlzLl9kdHNCYXNlXG4gICAgICBjb25zdCBvcmlnaW5EdHMgPSBkdHNcbiAgICAgIGlmICghaXNGaXJzdER0c0luaXRlZCkge1xuICAgICAgICBmaXJzdER0cyA9IGR0c1xuICAgICAgICBpc0ZpcnN0RHRzSW5pdGVkID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBsZXQgc2FtcGxlRHVyYXRpb24gPSAwXG4gICAgICBpZiAoc2FtcGxlLmR1cmF0aW9uKSB7XG4gICAgICAgIHNhbXBsZUR1cmF0aW9uID0gc2FtcGxlLmR1cmF0aW9uO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmF1ZGlvTWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkKSB7XG4gICAgICAgIHNhbXBsZUR1cmF0aW9uID0gdGhpcy5hdWRpb01ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZFxuICAgICAgfSBlbHNlIGlmIChzYW1wbGVzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHREdHMgPSBzYW1wbGVzWzBdLmR0cyAtIHRoaXMuX2R0c0Jhc2U7XG4gICAgICAgIHNhbXBsZUR1cmF0aW9uID0gbmV4dER0cyAtIGR0c1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG1wNFNhbXBsZXMubGVuZ3RoID49IDEpIHsgLy8gdXNlIHNlY29uZCBsYXN0IHNhbXBsZSBkdXJhdGlvblxuICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gbXA0U2FtcGxlc1ttcDRTYW1wbGVzLmxlbmd0aCAtIDFdLmR1cmF0aW9uXG4gICAgICAgIH0gZWxzZSB7IC8vIHRoZSBvbmx5IG9uZSBzYW1wbGUsIHVzZSByZWZlcmVuY2Ugc2FtcGxlIGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSB0aGlzLmF1ZGlvTWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKGBhdWRpbyBkdHMgJHtkdHN9YCwgYHB0cyAke2R0c31gLCBgZHVyYXRpb24gJHtzYW1wbGVEdXJhdGlvbn1gKVxuICAgICAgdGhpcy5hdWRpb0FsbER1cmF0aW9uICs9IHNhbXBsZUR1cmF0aW9uXG4gICAgICBjb25zdCBtcDRTYW1wbGUgPSB7XG4gICAgICAgIGR0cyxcbiAgICAgICAgcHRzOiBkdHMsXG4gICAgICAgIGN0czogMCxcbiAgICAgICAgc2l6ZTogZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICBkdXJhdGlvbjogc2FtcGxlLmR1cmF0aW9uID8gc2FtcGxlLmR1cmF0aW9uIDogc2FtcGxlRHVyYXRpb24sXG4gICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgaXNMZWFkaW5nOiAwLFxuICAgICAgICAgIGRlcGVuZHNPbjogMixcbiAgICAgICAgICBpc0RlcGVuZGVkT246IDEsXG4gICAgICAgICAgaGFzUmVkdW5kYW5jeTogMCxcbiAgICAgICAgICBpc05vblN5bmM6IDBcbiAgICAgICAgfSxcbiAgICAgICAgaXNLZXlmcmFtZTogdHJ1ZSxcbiAgICAgICAgb3JpZ2luRHRzLFxuICAgICAgICB0eXBlOiAnYXVkaW8nXG4gICAgICB9XG5cbiAgICAgIGxldCBtZGF0U2FtcGxlID0ge1xuICAgICAgICBidWZmZXI6IFtdLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9XG4gICAgICBtZGF0U2FtcGxlLmJ1ZmZlci5wdXNoKGRhdGEpXG4gICAgICBtZGF0U2FtcGxlLnNpemUgKz0gZGF0YS5ieXRlTGVuZ3RoXG5cbiAgICAgIG1kYXRCb3guc2FtcGxlcy5wdXNoKG1kYXRTYW1wbGUpXG5cbiAgICAgIG1wNFNhbXBsZXMucHVzaChtcDRTYW1wbGUpXG4gICAgfVxuXG4gICAgY29uc3QgbW9vZk1kYXQgPSBuZXcgQnVmZmVyKClcblxuICAgIGlmIChtcDRTYW1wbGVzLmxlbmd0aCkge1xuICAgICAgY29uc3QgbW9vZiA9IEZtcDQubW9vZih7XG4gICAgICAgIGlkOiB0cmFjay5tZXRhLmlkLFxuICAgICAgICB0aW1lOiBmaXJzdER0cyxcbiAgICAgICAgc2FtcGxlczogbXA0U2FtcGxlc1xuICAgICAgfSlcbiAgICAgIGNvbnN0IG1kYXQgPSBGbXA0Lm1kYXQobWRhdEJveClcbiAgICAgIG1vb2ZNZGF0LndyaXRlKG1vb2YsIG1kYXQpXG5cbiAgICAgIHRoaXMud3JpdGVUb1NvdXJjZSgnYXVkaW8nLCBtb29mTWRhdClcbiAgICB9XG5cbiAgICBpZiAoaW5pdFNlZ21lbnQpIHtcbiAgICAgIHRoaXMud3JpdGVUb1NvdXJjZSgnYXVkaW8nLCBpbml0U2VnbWVudClcbiAgICAgIGlmIChzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgICAvLyBzZWNvbmQgcGFydCBvZiBzdHJlYW0gY2hhbmdlXG4gICAgICAgIHRyYWNrLnNhbXBsZXMgPSBzYW1wbGVzO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVtdXhBdWRpbyh0cmFjaylcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmlzRmlyc3RBdWRpbyA9IGZhbHNlXG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5NRURJQV9TRUdNRU5ULCAnYXVkaW8nLCBtb29mTWRhdClcblxuICAgIGNvbnN0IGxhc3RTYW1wbGUgPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV1cbiAgICB0aGlzLl92aWRlb05leHREdHMgPSBsYXN0U2FtcGxlLmR0cyArIGxhc3RTYW1wbGUuZHVyYXRpb247XG4gICAgdHJhY2suc2FtcGxlcyA9IFtdXG4gICAgdHJhY2subGVuZ3RoID0gMFxuICB9XG5cbiAgd3JpdGVUb1NvdXJjZSAodHlwZSwgYnVmZmVyKSB7XG4gICAgbGV0IHByZXNvdXJjZWJ1ZmZlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1BSRV9TT1VSQ0VfQlVGRkVSJyk7XG4gICAgbGV0IHNvdXJjZSA9IHByZXNvdXJjZWJ1ZmZlci5nZXRTb3VyY2UodHlwZSk7XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIHNvdXJjZSA9IHByZXNvdXJjZWJ1ZmZlci5jcmVhdGVTb3VyY2UodHlwZSk7XG4gICAgfVxuXG4gICAgc291cmNlLmRhdGEucHVzaChidWZmZXIpXG4gIH1cblxuICBpbml0U2lsZW50QXVkaW8gKGR0cywgZHVyYXRpb24pIHtcbiAgICBjb25zdCB1bml0ID0gTXA0UmVtdXhlci5nZXRTaWxlbnRGcmFtZSh0aGlzLl9hdWRpb01ldGEuY2hhbm5lbENvdW50KVxuICAgIHJldHVybiB7XG4gICAgICBkdHMsXG4gICAgICBwdHM6IGR0cyxcbiAgICAgIGN0czogMCxcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgdW5pdCxcbiAgICAgIHNpemU6IHVuaXQuYnl0ZUxlbmd0aCxcbiAgICAgIG9yaWdpbkR0czogZHRzLFxuICAgICAgdHlwZTogJ3ZpZGVvJ1xuICAgIH1cbiAgfVxuXG4gIGdldCB2aWRlb01ldGEgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKS52aWRlb1RyYWNrLm1ldGFcbiAgfVxuICBnZXQgYXVkaW9NZXRhICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJykuYXVkaW9UcmFjay5tZXRhXG4gIH1cblxuICBzdGF0aWMgZ2V0U2lsZW50RnJhbWUgKGNoYW5uZWxDb3VudCkge1xuICAgIGlmIChjaGFubmVsQ291bnQgPT09IDEpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMywgMHg4MF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDIpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgyMSwgMHgwMCwgMHg0OSwgMHg5MCwgMHgwMiwgMHgxOSwgMHgwMCwgMHgyMywgMHg4MF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4ZV0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDQpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MCwgMHgyYywgMHg4MCwgMHgwOCwgMHgwMiwgMHgzOF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDUpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgzOF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDYpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgwMCwgMHhiMiwgMHgwMCwgMHgyMCwgMHgwOCwgMHhlMF0pXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBDb250ZXh0OiByZXF1aXJlKCcuL3NyYy9jb250ZXh0JykuZGVmYXVsdCxcblxuICAvLyBNb2R1bGVzIGZyb20gY29uc3RhbnRzXG4gIEVWRU5UUzogcmVxdWlyZSgnLi9zcmMvY29uc3RhbnRzL2V2ZW50cycpLmRlZmF1bHQsXG4gIFdPUktFUl9DT01NQU5EUzogcmVxdWlyZSgnLi9zcmMvY29uc3RhbnRzL3dvcmtlci1jb21tYW5kcycpLmRlZmF1bHQsXG5cbiAgLy8gTW9kdWxlcyBmcm9tIGVudlxuICBzbmlmZmVyOiByZXF1aXJlKCcuL3NyYy9lbnYvc25pZmZlcicpLmRlZmF1bHQsXG4gIGlzTGU6IHJlcXVpcmUoJy4vc3JjL2Vudi9pc2xlJykuZGVmYXVsdCxcbiAgVVRGODogcmVxdWlyZSgnLi9zcmMvZW52L3V0ZjgnKS5kZWZhdWx0LFxuXG4gIC8vIE1vZGVsc1xuICBNZWRpYUluZm86IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1pbmZvJykuZGVmYXVsdCxcbiAgTWVkaWFTYW1wbGU6IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1zYW1wbGUnKS5kZWZhdWx0LFxuICBNZWRpYVNlZ21lbnQ6IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1zZWdtZW50JykuZGVmYXVsdCxcbiAgTWVkaWFTZWdtZW50TGlzdDogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL21lZGlhLXNlZ21lbnQtbGlzdCcpLmRlZmF1bHQsXG4gIEF1ZGlvVHJhY2tNZXRhOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvdHJhY2stbWV0YScpLkF1ZGlvVHJhY2tNZXRhLFxuICBWaWRlb1RyYWNrTWV0YTogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL3RyYWNrLW1ldGEnKS5WaWRlb1RyYWNrTWV0YSxcbiAgQXVkaW9UcmFja1NhbXBsZTogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL3RyYWNrLXNhbXBsZScpLkF1ZGlvVHJhY2tTYW1wbGUsXG4gIFZpZGVvVHJhY2tTYW1wbGU6IHJlcXVpcmUoJy4vc3JjL21vZGVscy90cmFjay1zYW1wbGUnKS5WaWRlb1RyYWNrU2FtcGxlLFxuXG4gIC8vIE1vZHVsZXMgZnJvbSBtc2VcbiAgTXNlOiByZXF1aXJlKCcuL3NyYy9tc2UvaW5kZXgnKS5kZWZhdWx0LFxuXG4gIC8vIE1vZHVsZXMgZnJvbSB3cml0ZVxuICBTdHJlYW06IHJlcXVpcmUoJy4vc3JjL3dyaXRlL3N0cmVhbScpLmRlZmF1bHQsXG4gIEJ1ZmZlcjogcmVxdWlyZSgnLi9zcmMvd3JpdGUvYnVmZmVyJykuZGVmYXVsdCxcblxuICAvLyBDcnlwdG9cbiAgQ3J5cHRvOiByZXF1aXJlKCcuL3NyYy9jcnlwdG8nKS5kZWZhdWx0XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChSZXN1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgdG90YWxMZW5ndGggPSAwO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcnJheXMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJyYXlzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGFycmF5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgIHZhciBhcnIgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgdG90YWxMZW5ndGggKz0gYXJyLmxlbmd0aDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBSZXN1bHRDb25zdHJ1Y3Rvcih0b3RhbExlbmd0aCk7XG4gIHZhciBvZmZzZXQgPSAwO1xuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gYXJyYXlzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICB2YXIgX2FyciA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgcmVzdWx0LnNldChfYXJyLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IF9hcnIubGVuZ3RoO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NvbmNhdCA9IHJlcXVpcmUoJy4vY29uY2F0Jyk7XG5cbnZhciBfY29uY2F0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbmNhdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm1vZHVsZS5leHBvcnRzID0gX2NvbmNhdDIuZGVmYXVsdDsiLCJjb25zdCBMT0FERVJfRVZFTlRTID0ge1xuICBMQURFUl9TVEFSVDogJ0xPQURFUl9TVEFSVCcsXG4gIExPQURFUl9EQVRBTE9BREVEOiAnTE9BREVSX0RBVEFMT0FERUQnLFxuICBMT0FERVJfQ09NUExFVEU6ICdMT0FERVJfQ09NUExFVEUnLFxuICBMT0FERVJfRVJST1I6ICdMT0FERVJfRVJST1InXG59XG5cbmNvbnN0IERFTVVYX0VWRU5UUyA9IHtcbiAgREVNVVhfU1RBUlQ6ICdERU1VWF9TVEFSVCcsXG4gIERFTVVYX0NPTVBMRVRFOiAnREVNVVhfQ09NUExFVEUnLFxuICBERU1VWF9FUlJPUjogJ0RFTVVYX0VSUk9SJyxcbiAgTUVUQURBVEFfUEFSU0VEOiAnTUVUQURBVEFfUEFSU0VEJyxcbiAgVklERU9fTUVUQURBVEFfQ0hBTkdFOiAnVklERU9fTUVUQURBVEFfQ0hBTkdFJyxcbiAgQVVESU9fTUVUQURBVEFfQ0hBTkdFOiAnQVVESU9fTUVUQURBVEFfQ0hBTkdFJyxcbiAgTUVESUFfSU5GTzogJ01FRElBX0lORk8nXG59XG5cbmNvbnN0IFJFTVVYX0VWRU5UUyA9IHtcbiAgUkVNVVhfTUVUQURBVEE6ICdSRU1VWF9NRVRBREFUQScsXG4gIFJFTVVYX01FRElBOiAnUkVNVVhfTUVESUEnLFxuICBNRURJQV9TRUdNRU5UOiAnTUVESUFfU0VHTUVOVCcsXG4gIFJFTVVYX0VSUk9SOiAnUkVNVVhfRVJST1InLFxuICBJTklUX1NFR01FTlQ6ICdJTklUX1NFR01FTlQnLFxuICBERVRFQ1RfQ0hBTkdFX1NUUkVBTTogJ0RFVEVDVF9DSEFOR0VfU1RSRUFNJyxcbiAgUkFORE9NX0FDQ0VTU19QT0lOVDogJ1JBTkRPTV9BQ0NFU1NfUE9JTlQnXG59XG5cbmNvbnN0IE1TRV9FVkVOVFMgPSB7XG4gIFNPVVJDRV9VUERBVEVfRU5EOiAnU09VUkNFX1VQREFURV9FTkQnXG59XG5cbi8vIGhsc+S4k+aciWV2ZW50c1xuY29uc3QgSExTX0VWRU5UUyA9IHtcbiAgUkVUUllfVElNRV9FWENFRURFRDogJ1JFVFJZX1RJTUVfRVhDRUVERUQnXG59XG5cbmNvbnN0IENSWVRPX0VWRU5UUyA9IHtcbiAgU1RBUlRfREVDUllQVDogJ1NUQVJUX0RFQ1JZUFQnLFxuICBERUNSWVBURUQ6ICdERUNSWVBURUQnXG59XG5jb25zdCBBTExFVkVOVFMgPSBPYmplY3QuYXNzaWduKHt9LCBMT0FERVJfRVZFTlRTLCBERU1VWF9FVkVOVFMsIFJFTVVYX0VWRU5UUywgTVNFX0VWRU5UUywgSExTX0VWRU5UUylcblxuY29uc3QgRmx2QWxsb3dlZEV2ZW50cyA9IFtdXG5jb25zdCBIbHNBbGxvd2VkRXZlbnRzID0gW11cblxuZm9yIChsZXQga2V5IGluIEFMTEVWRU5UUykge1xuICBpZiAoQUxMRVZFTlRTLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICBGbHZBbGxvd2VkRXZlbnRzLnB1c2goQUxMRVZFTlRTW2tleV0pXG4gIH1cbn1cblxuZm9yIChsZXQga2V5IGluIEFMTEVWRU5UUykge1xuICBpZiAoQUxMRVZFTlRTLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICBIbHNBbGxvd2VkRXZlbnRzLnB1c2goQUxMRVZFTlRTW2tleV0pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBBTExFVkVOVFMsXG4gIEhMU19FVkVOVFMsXG4gIFJFTVVYX0VWRU5UUyxcbiAgREVNVVhfRVZFTlRTLFxuICBNU0VfRVZFTlRTLFxuICBMT0FERVJfRVZFTlRTLFxuICBGbHZBbGxvd2VkRXZlbnRzLFxuICBIbHNBbGxvd2VkRXZlbnRzLFxuICBDUllUT19FVkVOVFNcbn07XG4iLCJleHBvcnQgY29uc3QgQ09OVEVYVF9DT01PTUFORFMgPSB7XG4gIE9OOiAnb24nLFxuICBPTkNFOiAnb25jZScsXG4gIE9GRjogJ29mZicsXG4gIEVNSVQ6ICdlbWl0JyxcbiAgREVTVFJPWTogJ2Rlc3Ryb3knXG59XG4iLCJpbXBvcnQgTWVkaWFJbmZvIGZyb20gJy4vbW9kZWxzL21lZGlhLWluZm8nXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnXG5cbmNvbnN0IERJUkVDVF9FTUlUX0ZMQUcgPSAnX19UT19fJ1xuXG5jbGFzcyBDb250ZXh0IHtcbiAgY29uc3RydWN0b3IgKGFsbG93ZWRFdmVudHMgPSBbXSkge1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKClcbiAgICB0aGlzLl9pbnN0YW5jZU1hcCA9IHt9IC8vIOaJgOacieeahOino+eggea1geeoi+WunuS+i1xuICAgIHRoaXMuX2Nsc01hcCA9IHt9IC8vIOaehOmAoOWHveaVsOeahG1hcFxuICAgIHRoaXMuX2luaXRlZCA9IGZhbHNlXG4gICAgdGhpcy5tZWRpYUluZm8gPSBuZXcgTWVkaWFJbmZvKClcbiAgICB0aGlzLmFsbG93ZWRFdmVudHMgPSBhbGxvd2VkRXZlbnRzXG4gICAgdGhpcy5faG9va3MgPSB7fSAvLyDms6jlhozlnKjkuovku7bliY0v5ZCO55qE6ZKp5a2Q77yM5L6L5aaCIGJlZm9yZSgnREVNVVhfQ09NUExFVEUnKVxuICB9XG5cbiAgLyoqXG4gICAqIOS7juS4iuS4i+aWh+S4reiOt+WPluino+eggea1geeoi+WunuS+i++8jOWmguaenOayoeacieWunuS+i++8jOaehOmAoOS4gOS4qlxuICAgKiBAcGFyYW0gdGFnXG4gICAqIEBwYXJhbSBhcmdzXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgZ2V0SW5zdGFuY2UgKHRhZykge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5faW5zdGFuY2VNYXBbdGFnXVxuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRocm93IG5ldyBFcnJvcihgJHt0YWd95a6e5L6L5bCa5pyq5Yid5aeL5YyWYClcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOWIneWni+WMluWFt+S9k+WunuS+i1xuICAgKiBAcGFyYW0gdGFnXG4gICAqIEBwYXJhbSBhcmdzXG4gICAqL1xuICBpbml0SW5zdGFuY2UgKHRhZywgLi4uYXJncykge1xuICAgIGlmICh0aGlzLl9jbHNNYXBbdGFnXSkge1xuICAgICAgY29uc3QgbmV3SW5zdGFuY2UgPSBuZXcgdGhpcy5fY2xzTWFwW3RhZ10oLi4uYXJncylcbiAgICAgIHRoaXMuX2luc3RhbmNlTWFwW3RhZ10gPSBuZXdJbnN0YW5jZVxuICAgICAgaWYgKG5ld0luc3RhbmNlLmluaXQpIHtcbiAgICAgICAgbmV3SW5zdGFuY2UuaW5pdCgpIC8vIFRPRE86IGxpZmVjaXJjbGVcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdJbnN0YW5jZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGFnfeacquWcqGNvbnRleHTkuK3ms6jlhoxgKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDpgb/lhY3lpKfph4/nmoRpbml0SW5zdGFuY2XosIPnlKjvvIzliJ3lp4vljJbmiYDmnInnmoTnu4Tku7ZcbiAgICogQHBhcmFtIGNvbmZpZ1xuICAgKi9cbiAgaW5pdCAoY29uZmlnKSB7XG4gICAgaWYgKHRoaXMuX2luaXRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGZvciAobGV0IHRhZyBpbiB0aGlzLl9jbHNNYXApIHtcbiAgICAgIC8vIGlmIG5vdCBpbml0ZWQsIGluaXQgYW4gaW5zdGFuY2VcbiAgICAgIGlmICh0aGlzLl9jbHNNYXAuaGFzT3duUHJvcGVydHkodGFnKSAmJiAhdGhpcy5faW5zdGFuY2VNYXBbdGFnXSkge1xuICAgICAgICB0aGlzLmluaXRJbnN0YW5jZSh0YWcsIGNvbmZpZylcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5faW5pdGVkID0gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIOazqOWGjOS4gOS4quS4iuS4i+aWh+a1geeoi++8jOaPkOS+m+WuieWFqOeahOS6i+S7tuWPkemAgeacuuWItlxuICAgKiBAcGFyYW0gdGFnXG4gICAqIEBwYXJhbSBjbHNcbiAgICovXG4gIHJlZ2lzdHJ5ICh0YWcsIGNscykge1xuICAgIGNvbnN0IGVtaXR0ZXIgPSB0aGlzLl9lbWl0dGVyXG4gICAgY29uc3QgY2hlY2tNZXNzYWdlTmFtZSA9IHRoaXMuX2lzTWVzc2FnZU5hbWVWYWxpZC5iaW5kKHRoaXMpXG4gICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICBjb25zdCBlbmhhbmNlZCA9IGNsYXNzIGV4dGVuZHMgY2xzIHtcbiAgICAgIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge31cbiAgICAgICAgdGhpcy5vbmNlTGlzdGVuZXJzID0ge31cbiAgICAgICAgdGhpcy5UQUcgPSB0YWdcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IHNlbGZcbiAgICAgIH1cblxuICAgICAgb24gKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuXG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1ttZXNzYWdlTmFtZV0pIHtcbiAgICAgICAgICB0aGlzLmxpc3RlbmVyc1ttZXNzYWdlTmFtZV0ucHVzaChjYWxsYmFjaylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxpc3RlbmVyc1ttZXNzYWdlTmFtZV0gPSBbY2FsbGJhY2tdXG4gICAgICAgIH1cblxuICAgICAgICBlbWl0dGVyLm9uKGAke21lc3NhZ2VOYW1lfSR7RElSRUNUX0VNSVRfRkxBR30ke3RhZ31gLCBjYWxsYmFjaykgLy8g5bu656uL5a6a5ZCR6YCa5L+h55uR5ZCsXG4gICAgICAgIHJldHVybiBlbWl0dGVyLm9uKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiDlnKjmn5DkuKrkuovku7bop6blj5HliY3miafooYxcbiAgICAgICAqIEBwYXJhbSBtZXNzYWdlTmFtZVxuICAgICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICAgKi9cbiAgICAgIGJlZm9yZSAobWVzc2FnZU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG4gICAgICAgIGlmIChzZWxmLl9ob29rc1ttZXNzYWdlTmFtZV0pIHtcbiAgICAgICAgICBzZWxmLl9ob29rc1ttZXNzYWdlTmFtZV0ucHVzaChjYWxsYmFjaylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLl9ob29rc1ttZXNzYWdlTmFtZV0gPSBbY2FsbGJhY2tdXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgb25jZSAobWVzc2FnZU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG5cbiAgICAgICAgaWYgKHRoaXMub25jZUxpc3RlbmVyc1ttZXNzYWdlTmFtZV0pIHtcbiAgICAgICAgICB0aGlzLm9uY2VMaXN0ZW5lcnNbbWVzc2FnZU5hbWVdLnB1c2goY2FsbGJhY2spXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vbmNlTGlzdGVuZXJzW21lc3NhZ2VOYW1lXSA9IFtjYWxsYmFja11cbiAgICAgICAgfVxuXG4gICAgICAgIGVtaXR0ZXIub25jZShgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgY2FsbGJhY2spXG4gICAgICAgIHJldHVybiBlbWl0dGVyLm9uY2UobWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgfVxuXG4gICAgICBlbWl0IChtZXNzYWdlTmFtZSwgLi4uYXJncykge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnaW52b2tlICcsIG1lc3NhZ2VOYW1lKVxuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuXG4gICAgICAgIGNvbnN0IGJlZm9yZUxpc3QgPSBzZWxmLl9ob29rcyA/IHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXSA6IG51bGxcblxuICAgICAgICBpZiAoYmVmb3JlTGlzdCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBiZWZvcmVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGJlZm9yZUxpc3RbaV1cbiAgICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIuZW1pdChtZXNzYWdlTmFtZSwgLi4uYXJncylcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiDlrprlkJHlj5HpgIHnu5nmn5DkuKrnu4Tku7bljZXkvovnmoTmtojmga9cbiAgICAgICAqIEBwYXJhbSBtZXNzYWdlTmFtZVxuICAgICAgICogQHBhcmFtIGFyZ3NcbiAgICAgICAqL1xuICAgICAgZW1pdFRvICh0YWcsIG1lc3NhZ2VOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG5cbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIuZW1pdChgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgLi4uYXJncylcbiAgICAgIH1cblxuICAgICAgb2ZmIChtZXNzYWdlTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub2ZmKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgIH1cblxuICAgICAgcmVtb3ZlTGlzdGVuZXJzICgpIHtcbiAgICAgICAgY29uc3QgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKHRoaXMubGlzdGVuZXJzKVxuXG4gICAgICAgIGZvciAobGV0IG1lc3NhZ2VOYW1lIGluIHRoaXMubGlzdGVuZXJzKSB7XG4gICAgICAgICAgaWYgKGhhc093bihtZXNzYWdlTmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXSB8fCBbXVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV1cbiAgICAgICAgICAgICAgZW1pdHRlci5vZmYobWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgICAgICAgICBlbWl0dGVyLm9mZihgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgY2FsbGJhY2spXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgbWVzc2FnZU5hbWUgaW4gdGhpcy5vbmNlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgaWYgKGhhc093bihtZXNzYWdlTmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMub25jZUxpc3RlbmVyc1ttZXNzYWdlTmFtZV0gfHwgW11cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldXG4gICAgICAgICAgICAgIGVtaXR0ZXIub2ZmKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgICAgICAgICAgZW1pdHRlci5vZmYoYCR7bWVzc2FnZU5hbWV9JHtESVJFQ1RfRU1JVF9GTEFHfSR7dGFnfWAsIGNhbGxiYWNrKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIOWcqOe7hOS7tumUgOavgeaXtu+8jOm7mOiupOWwhuWug+azqOWGjOeahOS6i+S7tuWFqOmDqOWNuOi9ve+8jOehruS/neS4jeS8mumAoOaIkOWGheWtmOazhOa8j1xuICAgICAgICovXG4gICAgICBkZXN0cm95ICgpIHtcbiAgICAgICAgLy8gc3RlcDEgdW5saXN0ZW4gZXZlbnRzXG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKClcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSB7fVxuXG4gICAgICAgIC8vIHN0ZXAyIHJlbGVhc2UgZnJvbSBjb250ZXh0XG4gICAgICAgIGRlbGV0ZSBzZWxmLl9pbnN0YW5jZU1hcFt0YWddXG4gICAgICAgIGlmIChzdXBlci5kZXN0cm95KSB7XG4gICAgICAgICAgcmV0dXJuIHN1cGVyLmRlc3Ryb3koKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2Nsc01hcFt0YWddID0gZW5oYW5jZWRcblxuICAgIC8qKlxuICAgICAqIGdldCBpbnN0YW5jZSBpbW1lZGlhdGVseVxuICAgICAqIGUuZyBjb25zdCBpbnN0YW5jZSA9IGNvbnRleHQucmVnaXN0cnkodGFnLCBDbHMpKGNvbmZpZylcbiAgICAgKiAqL1xuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaW5pdEluc3RhbmNlKHRhZywgLi4uYXJncylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5a+55a2Y5Zyo55qE5a6e5L6L6L+b6KGMXG4gICAqL1xuICBkZXN0cm95SW5zdGFuY2VzICgpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9pbnN0YW5jZU1hcCkuZm9yRWFjaCgodGFnKSA9PiB7XG4gICAgICBpZiAodGhpcy5faW5zdGFuY2VNYXBbdGFnXS5kZXN0cm95KSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlTWFwW3RhZ10uZGVzdHJveSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDnvJbop6PnoIHmtYHnqIvml6DpnIDlhbPms6jkuovku7bnmoTop6Pnu5FcbiAgICovXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBudWxsXG4gICAgdGhpcy5hbGxvd2VkRXZlbnRzID0gW11cbiAgICB0aGlzLl9jbHNNYXAgPSBudWxsXG4gICAgdGhpcy5fY29udGV4dCA9IG51bGxcbiAgICB0aGlzLl9ob29rcyA9IG51bGxcbiAgICB0aGlzLmRlc3Ryb3lJbnN0YW5jZXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIOWvueS/oemBk+i/m+ihjOaUtuaLolxuICAgKiBAcGFyYW0gbWVzc2FnZU5hbWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pc01lc3NhZ2VOYW1lVmFsaWQgKG1lc3NhZ2VOYW1lKSB7XG4gICAgaWYgKCF0aGlzLmFsbG93ZWRFdmVudHMuaW5kZXhPZihtZXNzYWdlTmFtZSkgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVucmVnaXN0ZXJlZCBtZXNzYWdlIG5hbWU6ICR7bWVzc2FnZU5hbWV9YClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGV4dFxuIiwiaW1wb3J0IEVWRU5UUyBmcm9tICcuLi9jb25zdGFudHMvZXZlbnRzJztcbmNvbnN0IENSWVRPX0VWRU5UUyA9IEVWRU5UUy5DUllUT19FVkVOVFNcbmNsYXNzIENyeXB0byB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuaW5wdXRCdWZmZXIgPSBjb25maWcuaW5wdXRidWZmZXI7XG4gICAgICAgIHRoaXMub3V0cHV0QnVmZmVyID0gY29uZmlnLm91dHB1dGJ1ZmZlcjtcbiAgICAgICAgdGhpcy5rZXkgPSBjb25maWcua2V5O1xuICAgICAgICB0aGlzLml2ID0gY29uZmlnLml2O1xuICAgICAgICB0aGlzLm1ldGhvZCA9IGNvbmZpZy5tZXRob2Q7XG5cbiAgICAgICAgdGhpcy5jcnlwdG8gPSAgd2luZG93LmNyeXB0byB8fCB3aW5kb3cubXNDcnlwdG9cbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLm9uKENSWVRPX0VWRU5UUy5TVEFSVF9ERUNSWVBULCB0aGlzLmRlY3JpcHQuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIFxuICAgIGRlY3JpcHQoKSB7XG4gICAgICAgIGlmKCF0aGlzLmFlc2tleSkge1xuICAgICAgICAgICAgbGV0IHNia2V5ID0gdGhpcy5jcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgdGhpcy5rZXkuYnVmZmVyLCB7IG5hbWU6ICdBRVMtQ0JDJyB9LCBmYWxzZSwgWydlbmNyeXB0JywgJ2RlY3J5cHQnXSk7XG4gICAgICAgICAgICBzYmtleS50aGVuKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZXNrZXkgPSBrZXk7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWNyaXB0RGF0YSgpO1xuICAgICAgICAgICAgfSkgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlY3JpcHREYXRhKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWNyaXB0RGF0YSgpIHtcbiAgICAgICAgbGV0IGlucHV0YnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmlucHV0QnVmZmVyKTtcbiAgICAgICAgbGV0IG91dHB1dGJ1ZmZlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5vdXRwdXRCdWZmZXIpO1xuICAgICAgICBsZXQgZGF0YSA9IGlucHV0YnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuY3J5cHRvLnN1YnRsZS5kZWNyeXB0KHsgbmFtZTogJ0FFUy1DQkMnLCBpdjogdGhpcy5pdi5idWZmZXIgfSwgdGhpcy5hZXNrZXksIGRhdGEpLnRoZW4ocmVzPT57XG4gICAgICAgICAgICAgICAgb3V0cHV0YnVmZmVyLnB1c2gobmV3IFVpbnQ4QXJyYXkocmVzKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KENSWVRPX0VWRU5UUy5ERUNSWVBURUQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjcmlwdERhdGEoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IENyeXB0bzsiLCJjb25zdCBsZSA9IChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcigyKTtcbiAgKG5ldyBEYXRhVmlldyhidWYpKS5zZXRJbnQxNigwLCAyNTYsIHRydWUpIC8vIGxpdHRsZS1lbmRpYW4gd3JpdGVcbiAgcmV0dXJuIChuZXcgSW50MTZBcnJheShidWYpKVswXSA9PT0gMjU2IC8vIHBsYXRmb3JtLXNwZWMgcmVhZCwgaWYgZXF1YWwgdGhlbiBMRVxufSkoKVxuXG5leHBvcnQgZGVmYXVsdCBsZVxuIiwiY29uc3QgbGUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gIChuZXcgRGF0YVZpZXcoYnVmKSkuc2V0SW50MTYoMCwgMjU2LCB0cnVlKSAvLyBsaXR0bGUtZW5kaWFuIHdyaXRlXG4gIHJldHVybiAobmV3IEludDE2QXJyYXkoYnVmKSlbMF0gPT09IDI1NiAvLyBwbGF0Zm9ybS1zcGVjIHJlYWQsIGlmIGVxdWFsIHRoZW4gTEVcbn0pKClcblxuY29uc3Qgc25pZmZlciA9IHtcbiAgZ2V0IGRldmljZSAoKSB7XG4gICAgbGV0IHIgPSBzbmlmZmVyLm9zO1xuICAgIHJldHVybiByLmlzUGMgPyAncGMnIDogci5pc1RhYmxldCA/ICd0YWJsZXQnIDogJ21vYmlsZSc7XG4gIH0sXG4gIGdldCBicm93c2VyICgpIHtcbiAgICBsZXQgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IHJlZyA9IHtcbiAgICAgIGllOiAvcnY6KFtcXGQuXSspXFwpIGxpa2UgZ2Vja28vLFxuICAgICAgZmlyZm94OiAvZmlyZWZveFxcLyhbXFxkLl0rKS8sXG4gICAgICBjaHJvbWU6IC9jaHJvbWVcXC8oW1xcZC5dKykvLFxuICAgICAgb3BlcmE6IC9vcGVyYS4oW1xcZC5dKykvLFxuICAgICAgc2FmYXJpOiAvdmVyc2lvblxcLyhbXFxkLl0rKS4qc2FmYXJpL1xuICAgIH07XG4gICAgcmV0dXJuIFtdLmNvbmNhdChPYmplY3Qua2V5cyhyZWcpLmZpbHRlcihrZXkgPT4gcmVnW2tleV0udGVzdCh1YSkpKVswXTtcbiAgfSxcbiAgZ2V0IG9zICgpIHtcbiAgICBsZXQgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50XG4gICAgbGV0IGlzV2luZG93c1Bob25lID0gLyg/OldpbmRvd3MgUGhvbmUpLy50ZXN0KHVhKVxuICAgIGxldCBpc1N5bWJpYW4gPSAvKD86U3ltYmlhbk9TKS8udGVzdCh1YSkgfHwgaXNXaW5kb3dzUGhvbmU7XG4gICAgbGV0IGlzQW5kcm9pZCA9IC8oPzpBbmRyb2lkKS8udGVzdCh1YSk7XG4gICAgbGV0IGlzRmlyZUZveCA9IC8oPzpGaXJlZm94KS8udGVzdCh1YSk7XG4gICAgbGV0IGlzVGFibGV0ID0gLyg/OmlQYWR8UGxheUJvb2spLy50ZXN0KHVhKSB8fCAoaXNBbmRyb2lkICYmICEvKD86TW9iaWxlKS8udGVzdCh1YSkpIHx8IChpc0ZpcmVGb3ggJiYgLyg/OlRhYmxldCkvLnRlc3QodWEpKTtcbiAgICBsZXQgaXNQaG9uZSA9IC8oPzppUGhvbmUpLy50ZXN0KHVhKSAmJiAhaXNUYWJsZXQ7XG4gICAgbGV0IGlzUGMgPSAhaXNQaG9uZSAmJiAhaXNBbmRyb2lkICYmICFpc1N5bWJpYW47XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVGFibGV0LFxuICAgICAgaXNQaG9uZSxcbiAgICAgIGlzQW5kcm9pZCxcbiAgICAgIGlzUGMsXG4gICAgICBpc1N5bWJpYW4sXG4gICAgICBpc1dpbmRvd3NQaG9uZSxcbiAgICAgIGlzRmlyZUZveFxuICAgIH07XG4gIH0sXG5cbiAgZ2V0IGlzTGUgKCkge1xuICAgIHJldHVybiBsZVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzbmlmZmVyO1xuIiwiY2xhc3MgVVRGOCB7XG4gIHN0YXRpYyBkZWNvZGUgKHVpbnQ4YXJyYXkpIHtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBjb25zdCBpbnB1dCA9IHVpbnQ4YXJyYXk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGNvbnN0IGxlbmd0aCA9IHVpbnQ4YXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpbnB1dFtpXSA8IDB4ODApIHtcbiAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShpbnB1dFtpXSkpO1xuICAgICAgICArK2k7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4QzApIHtcbiAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEUwKSB7XG4gICAgICAgIGlmIChVVEY4Ll9jaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMSkpIHtcbiAgICAgICAgICBjb25zdCB1Y3M0ID0gKGlucHV0W2ldICYgMHgxRikgPDwgNiB8IChpbnB1dFtpICsgMV0gJiAweDNGKTtcbiAgICAgICAgICBpZiAodWNzNCA+PSAweDgwKSB7XG4gICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHVjczQgJiAweEZGRkYpKTtcbiAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RjApIHtcbiAgICAgICAgaWYgKFVURjguX2NoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAyKSkge1xuICAgICAgICAgIGNvbnN0IHVjczQgPSAoaW5wdXRbaV0gJiAweEYpIDw8IDEyIHwgKGlucHV0W2kgKyAxXSAmIDB4M0YpIDw8IDYgfCBpbnB1dFtpICsgMl0gJiAweDNGO1xuICAgICAgICAgIGlmICh1Y3M0ID49IDB4ODAwICYmICh1Y3M0ICYgMHhGODAwKSAhPT0gMHhEODAwKSB7XG4gICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHVjczQgJiAweEZGRkYpKTtcbiAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RjgpIHtcbiAgICAgICAgaWYgKFVURjguX2NoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAzKSkge1xuICAgICAgICAgIGxldCB1Y3M0ID0gKGlucHV0W2ldICYgMHg3KSA8PCAxOCB8IChpbnB1dFtpICsgMV0gJiAweDNGKSA8PCAxMiB8XG4gICAgICAgICAgICAgICAgICAgIChpbnB1dFtpICsgMl0gJiAweDNGKSA8PCA2IHwgKGlucHV0W2kgKyAzXSAmIDB4M0YpO1xuICAgICAgICAgIGlmICh1Y3M0ID4gMHgxMDAwMCAmJiB1Y3M0IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgIHVjczQgLT0gMHgxMDAwMDtcbiAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHVjczQgPj4+IDEwKSB8IDB4RDgwMCkpO1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgodWNzNCAmIDB4M0ZGKSB8IDB4REMwMCkpO1xuICAgICAgICAgICAgaSArPSA0O1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkZGRCkpO1xuICAgICAgKytpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuam9pbignJyk7XG4gIH1cblxuICBzdGF0aWMgX2NoZWNrQ29udGludWF0aW9uICh1aW50OGFycmF5LCBzdGFydCwgY2hlY2tMZW5ndGgpIHtcbiAgICBsZXQgYXJyYXkgPSB1aW50OGFycmF5O1xuICAgIGlmIChzdGFydCArIGNoZWNrTGVuZ3RoIDwgYXJyYXkubGVuZ3RoKSB7XG4gICAgICB3aGlsZSAoY2hlY2tMZW5ndGgtLSkge1xuICAgICAgICBpZiAoKGFycmF5Wysrc3RhcnRdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVURjg7XG4iLCJjb25zdCBpc09iamVjdEZpbGxlZCA9IChvYmopID0+IHtcbiAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYUluZm8ge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5taW1lVHlwZSA9IG51bGxcbiAgICB0aGlzLmR1cmF0aW9uID0gbnVsbFxuXG4gICAgdGhpcy5oYXNWaWRlbyA9IG51bGxcbiAgICB0aGlzLnZpZGVvID0ge1xuICAgICAgY29kZWM6IG51bGwsXG4gICAgICB3aWR0aDogbnVsbCxcbiAgICAgIGhlaWdodDogbnVsbCxcbiAgICAgIHByb2ZpbGU6IG51bGwsXG4gICAgICBsZXZlbDogbnVsbCxcbiAgICAgIGZyYW1lUmF0ZToge1xuICAgICAgICBmaXhlZDogdHJ1ZSxcbiAgICAgICAgZnBzOiAyNSxcbiAgICAgICAgZnBzX251bTogMjUwMDAsXG4gICAgICAgIGZwc19kZW46IDEwMDBcbiAgICAgIH0sXG4gICAgICBjaHJvbWFGb3JtYXQ6IG51bGwsXG4gICAgICBwYXJSYXRpbzoge1xuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgaGVpZ2h0OiAxXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5oYXNBdWRpbyA9IG51bGxcblxuICAgIHRoaXMuYXVkaW8gPSB7XG4gICAgICBjb2RlYzogbnVsbCxcbiAgICAgIHNhbXBsZVJhdGU6IG51bGwsXG4gICAgICBzYW1wbGVSYXRlSW5kZXg6IG51bGwsXG4gICAgICBjaGFubmVsQ291bnQ6IG51bGxcbiAgICB9XG4gIH1cblxuICBpc0NvbXBsZXRlICgpIHtcbiAgICByZXR1cm4gTWVkaWFJbmZvLmlzQmFzZUluZm9SZWFkeSh0aGlzKSAmJiBNZWRpYUluZm8uaXNWaWRlb1JlYWR5KHRoaXMpICYmIE1lZGlhSW5mby5pc0F1ZGlvUmVhZHkodGhpcylcbiAgfVxuXG4gIHN0YXRpYyBpc0Jhc2VJbmZvUmVhZHkgKG1lZGlhSW5mbykge1xuICAgIHJldHVybiBpc09iamVjdEZpbGxlZChtZWRpYUluZm8pXG4gIH1cblxuICBzdGF0aWMgaXNWaWRlb1JlYWR5IChtZWRpYUluZm8pIHtcbiAgICBpZiAoIW1lZGlhSW5mby5oYXNWaWRlbykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gaXNPYmplY3RGaWxsZWQobWVkaWFJbmZvLnZpZGVvKVxuICB9XG5cbiAgc3RhdGljIGlzQXVkaW9SZWFkeSAobWVkaWFJbmZvKSB7XG4gICAgaWYgKCFtZWRpYUluZm8uaGFzQXVkaW8pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGlzT2JqZWN0RmlsbGVkKG1lZGlhSW5mby52aWRlbylcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFTYW1wbGUge1xuICBjb25zdHJ1Y3RvciAoaW5mbykge1xuICAgIGxldCBfZGVmYXVsdCA9IE1lZGlhU2FtcGxlLmdldERlZmF1bHRJbmYoKVxuXG4gICAgaWYgKCFpbmZvIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbmZvKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIHJldHVybiBfZGVmYXVsdFxuICAgIH1cbiAgICBsZXQgc2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgX2RlZmF1bHQsIGluZm8pXG5cbiAgICBPYmplY3QuZW50cmllcyhzYW1wbGUpLmZvckVhY2goKFtrLCB2XSkgPT4ge1xuICAgICAgdGhpc1trXSA9IHZcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGdldERlZmF1bHRJbmYgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkdHM6IG51bGwsXG4gICAgICBwdHM6IG51bGwsXG4gICAgICBkdXJhdGlvbjogbnVsbCxcbiAgICAgIHBvc2l0aW9uOiBudWxsLFxuICAgICAgaXNSQVA6IGZhbHNlLCAvLyBpcyBSYW5kb20gYWNjZXNzIHBvaW50XG4gICAgICBvcmlnaW5EdHM6IG51bGxcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhU2VnbWVudExpc3Qge1xuXG4gICAgY29uc3RydWN0b3IgKHR5cGUpIHtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gLTE7IC8vIGNhY2hlZCBsYXN0IGluc2VydCBsb2NhdGlvblxuICAgIH1cblxuICAgIGdldCB0eXBlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aDtcbiAgICB9XG5cbiAgICBpc0VtcHR5ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3QubGVuZ3RoID09PSAwO1xuICAgIH1cblxuICAgIGNsZWFyICgpIHtcbiAgICAgICAgdGhpcy5fbGlzdCA9IFtdO1xuICAgICAgICB0aGlzLl9sYXN0QXBwZW5kTG9jYXRpb24gPSAtMTtcbiAgICB9XG5cbiAgICBfc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBsaXN0ID0gdGhpcy5fbGlzdDtcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhc3QgPSBsaXN0Lmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBtaWQgPSAwO1xuICAgICAgICBsZXQgbGJvdW5kID0gMDtcbiAgICAgICAgbGV0IHVib3VuZCA9IGxhc3Q7XG5cbiAgICAgICAgbGV0IGlkeCA9IDA7XG5cbiAgICAgICAgaWYgKGJlZ2luRHRzIDwgbGlzdFswXS5vcmlnaW5EdHMpIHtcbiAgICAgICAgICAgIGlkeCA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuIGlkeDtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChsYm91bmQgPD0gdWJvdW5kKSB7XG4gICAgICAgICAgICBtaWQgPSBsYm91bmQgKyBNYXRoLmZsb29yKCh1Ym91bmQgLSBsYm91bmQpIC8gMik7XG4gICAgICAgICAgICBpZiAobWlkID09PSBsYXN0IHx8IChiZWdpbkR0cyA+IGxpc3RbbWlkXS5sYXN0U2FtcGxlLm9yaWdpbkR0c1xuICAgICAgICAgICAgICAgICAgICAmJiAoYmVnaW5EdHMgPCBsaXN0W21pZCArIDFdLm9yaWdpbkR0cykpKSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gbWlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0W21pZF0ub3JpZ2luRHRzIDwgYmVnaW5EdHMpIHtcbiAgICAgICAgICAgICAgICBsYm91bmQgPSBtaWQgKyAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1Ym91bmQgPSBtaWQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuXG4gICAgX3NlYXJjaE5lYXJlc3RTZWdtZW50QWZ0ZXIgKGJlZ2luRHRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShiZWdpbkR0cykgKyAxO1xuICAgIH1cblxuICAgIGFwcGVuZCAoc2VnbWVudCkge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuX2xpc3Q7XG4gICAgICAgIGxldCBsYXN0QXBwZW5kSWR4ID0gdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uO1xuICAgICAgICBsZXQgaW5zZXJ0SWR4ID0gMDtcblxuICAgICAgICBpZiAobGFzdEFwcGVuZElkeCAhPT0gLTEgJiYgbGFzdEFwcGVuZElkeCA8IGxpc3QubGVuZ3RoXG4gICAgICAgICAgICAmJiBzZWdtZW50Lm9yaWdpblN0YXJ0RHRzID49IGxpc3RbbGFzdEFwcGVuZElkeF0ubGFzdFNhbXBsZS5vcmlnaW5EdHNcbiAgICAgICAgICAgICYmICgobGFzdEFwcGVuZElkeCA9PT0gbGlzdC5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICAgIHx8IChsYXN0QXBwZW5kSWR4IDwgbGlzdC5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgICYmIHNlZ21lbnQub3JpZ2luU3RhcnREdHMgPCBsaXN0W2xhc3RBcHBlbmRJZHggKyAxXS5vcmlnaW5TdGFydER0cykpKSB7XG4gICAgICAgICAgICBpbnNlcnRJZHggPSBsYXN0QXBwZW5kSWR4ICsgMTsgLy8gdXNlIGNhY2hlZCBsb2NhdGlvbiBpZHhcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRJZHggPSB0aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShzZWdtZW50Lm9yaWdpblN0YXJ0RHRzKSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sYXN0QXBwZW5kTG9jYXRpb24gPSBpbnNlcnRJZHg7XG4gICAgICAgIHRoaXMuX2xpc3Quc3BsaWNlKGluc2VydElkeCwgMCwgc2VnbWVudCk7XG4gICAgfVxuXG4gICAgZ2V0TGFzdFNlZ21lbnRCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBpZHggPSB0aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShiZWdpbkR0cyk7XG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RbaWR4XTtcbiAgICAgICAgfSBlbHNlIHsgLy8gLTFcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0TGFzdFNhbXBsZUJlZm9yZSAoYmVnaW5EdHMpIHtcbiAgICAgICAgbGV0IHNlZ21lbnQgPSB0aGlzLmdldExhc3RTZWdtZW50QmVmb3JlKGJlZ2luRHRzKTtcbiAgICAgICAgaWYgKHNlZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWdtZW50Lmxhc3RTYW1wbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldExhc3RSQVBCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBzZWdtZW50SWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpO1xuICAgICAgICBsZXQgcmFuZG9tQWNjZXNzUG9pbnRzID0gdGhpcy5fbGlzdFtzZWdtZW50SWR4XS5yYW5kb21BY2Nlc3NQb2ludHM7XG4gICAgICAgIHdoaWxlIChyYW5kb21BY2Nlc3NQb2ludHMubGVuZ3RoID09PSAwICYmIHNlZ21lbnRJZHggPiAwKSB7XG4gICAgICAgICAgICBzZWdtZW50SWR4LS07XG4gICAgICAgICAgICByYW5kb21BY2Nlc3NQb2ludHMgPSB0aGlzLl9saXN0W3NlZ21lbnRJZHhdLnJhbmRvbUFjY2Vzc1BvaW50cztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiByYW5kb21BY2Nlc3NQb2ludHNbcmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYVNlZ21lbnQge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5zdGFydER0cyA9IC0xO1xuICAgICAgICB0aGlzLmVuZER0cyA9IC0xO1xuICAgICAgICB0aGlzLnN0YXJ0UHRzID0gLTE7XG4gICAgICAgIHRoaXMuZW5kUHRzID0gLTE7XG4gICAgICAgIHRoaXMub3JpZ2luU3RhcnREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5vcmlnaW5FbmREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5yYW5kb21BY2Nlc3NQb2ludHMgPSBbXTtcbiAgICAgICAgdGhpcy5maXJzdFNhbXBsZSA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdFNhbXBsZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYWRkUkFQIChzYW1wbGUpIHtcbiAgICAgICAgc2FtcGxlLmlzUkFQID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yYW5kb21BY2Nlc3NQb2ludHMucHVzaChzYW1wbGUpO1xuICAgIH1cbn0iLCJleHBvcnQgY2xhc3MgQXVkaW9UcmFja01ldGEge1xuICBjb25zdHJ1Y3RvciAobWV0YSkge1xuICAgIGNvbnN0IF9kZWZhdWx0ID0ge1xuICAgICAgc2FtcGxlUmF0ZTogNDgwMDAsXG4gICAgICBjaGFubmVsQ291bnQ6IDIsXG4gICAgICBjb2RlYzogJ21wNGEuNDAuMicsXG4gICAgICBjb25maWc6IFs0MSwgNDAxLCAxMzYsIDBdLFxuICAgICAgZHVyYXRpb246IDAsXG4gICAgICBpZDogMixcbiAgICAgIHJlZlNhbXBsZUR1cmF0aW9uOiAyMSxcbiAgICAgIHNhbXBsZVJhdGVJbmRleDogMyxcbiAgICAgIHRpbWVzY2FsZTogMTAwMCxcbiAgICAgIHR5cGU6ICdhdWRpbydcbiAgICB9XG4gICAgaWYgKG1ldGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgbWV0YSlcbiAgICB9XG4gICAgcmV0dXJuIF9kZWZhdWx0XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLmluaXQgPSBudWxsXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZpZGVvVHJhY2tNZXRhIHtcbiAgY29uc3RydWN0b3IgKG1ldGEpIHtcbiAgICBjb25zdCBfZGVmYXVsdCA9IHtcbiAgICAgIGF2Y2M6IG51bGwsXG4gICAgICBzcHM6IG5ldyBVaW50OEFycmF5KDApLFxuICAgICAgcHBzOiBuZXcgVWludDhBcnJheSgwKSxcbiAgICAgIGNocm9tYUZvcm1hdDogNDIwLFxuICAgICAgY29kZWM6ICdhdmMxLjY0MDAyMCcsXG4gICAgICBjb2RlY0hlaWdodDogNzIwLFxuICAgICAgY29kZWNXaWR0aDogMTI4MCxcbiAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgZnJhbWVSYXRlOiB7XG4gICAgICAgIGZpeGVkOiB0cnVlLFxuICAgICAgICBmcHM6IDI1LFxuICAgICAgICBmcHNfbnVtOiAyNTAwMCxcbiAgICAgICAgZnBzX2RlbjogMTAwMFxuICAgICAgfSxcbiAgICAgIGlkOiAxLFxuICAgICAgbGV2ZWw6ICczLjInLFxuICAgICAgcHJlc2VudEhlaWdodDogNzIwLFxuICAgICAgcHJlc2VudFdpZHRoOiAxMjgwLFxuICAgICAgcHJvZmlsZTogJ0hpZ2gnLFxuICAgICAgcmVmU2FtcGxlRHVyYXRpb246IDQwLFxuICAgICAgcGFyUmF0aW86IHtcbiAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICB3aWR0aDogMVxuICAgICAgfSxcbiAgICAgIHRpbWVzY2FsZTogMTAwMCxcbiAgICAgIHR5cGU6ICd2aWRlbydcbiAgICB9XG5cbiAgICBpZiAobWV0YSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBtZXRhKVxuICAgIH1cbiAgICByZXR1cm4gX2RlZmF1bHRcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuaW5pdCA9IG51bGxcbiAgICB0aGlzLnNwcyA9IG51bGxcbiAgICB0aGlzLnBwcyA9IG51bGxcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tTYW1wbGUge1xuICBjb25zdHJ1Y3RvciAoaW5mbykge1xuICAgIGxldCBfZGVmYXVsdCA9IEF1ZGlvVHJhY2tTYW1wbGUuZ2V0RGVmYXVsdCgpXG4gICAgaWYgKCFpbmZvKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRcbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBpbmZvKVxuXG4gICAgcmV0dXJuIHNhbXBsZVxuICB9XG5cbiAgc3RhdGljIGdldERlZmF1bHQgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkdHM6IG51bGwsXG4gICAgICBwdHM6IG51bGwsXG4gICAgICBkYXRhOiBuZXcgVWludDhBcnJheSgpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBWaWRlb1RyYWNrU2FtcGxlLmdldERlZmF1bHQoKVxuXG4gICAgaWYgKCFpbmZvKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRcbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBpbmZvKVxuXG4gICAgcmV0dXJuIHNhbXBsZVxuICB9XG5cbiAgc3RhdGljIGdldERlZmF1bHQgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkdHM6IG51bGwsXG4gICAgICBwdHM6IG51bGwsXG4gICAgICBpc0tleWZyYW1lOiBmYWxzZSwgLy8gaXMgUmFuZG9tIGFjY2VzcyBwb2ludFxuICAgICAgb3JpZ2luRHRzOiBudWxsLFxuICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoKVxuICAgIH1cbiAgfVxufVxuIiwiY2xhc3MgTVNFIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZ3MpIHtcbiAgICB0aGlzLmNvbmZpZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWdzKTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuY29uZmlncy5jb250YWluZXI7XG4gICAgdGhpcy5tZWRpYVNvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5zb3VyY2VCdWZmZXJzID0ge307XG4gICAgdGhpcy5wcmVsb2FkVGltZSA9IHRoaXMuY29uZmlncy5wcmVsb2FkVGltZSB8fCAxO1xuICAgIHRoaXMub25Tb3VyY2VPcGVuID0gdGhpcy5vblNvdXJjZU9wZW4uYmluZCh0aGlzKVxuICAgIHRoaXMub25UaW1lVXBkYXRlID0gdGhpcy5vblRpbWVVcGRhdGUuYmluZCh0aGlzKVxuICAgIHRoaXMub25VcGRhdGVFbmQgPSB0aGlzLm9uVXBkYXRlRW5kLmJpbmQodGhpcylcbiAgICB0aGlzLm9uV2FpdGluZyA9IHRoaXMub25XYWl0aW5nLmJpbmQodGhpcylcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHRoaXMubWVkaWFTb3VyY2UgPSBuZXcgc2VsZi5NZWRpYVNvdXJjZSgpO1xuICAgIHRoaXMubWVkaWFTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMub25Tb3VyY2VPcGVuKTtcbiAgICB0aGlzLmNvbnRhaW5lci5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHRoaXMubWVkaWFTb3VyY2UpO1xuICAgIHRoaXMudXJsID0gdGhpcy5jb250YWluZXIuc3JjO1xuICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCB0aGlzLm9uVGltZVVwZGF0ZSk7XG4gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIHRoaXMub25XYWl0aW5nKTtcbiAgfVxuXG4gIG9uVGltZVVwZGF0ZSAoKSB7XG4gICAgdGhpcy5lbWl0KCdUSU1FX1VQREFURScsIHRoaXMuY29udGFpbmVyKTtcbiAgfVxuXG4gIG9uV2FpdGluZyAoKSB7XG4gICAgdGhpcy5lbWl0KCdXQUlUSU5HJywgdGhpcy5jb250YWluZXIpO1xuICB9XG5cbiAgb25Tb3VyY2VPcGVuICgpIHtcbiAgICB0aGlzLmFkZFNvdXJjZUJ1ZmZlcnMoKTtcbiAgfVxuXG4gIG9uVXBkYXRlRW5kICgpIHtcbiAgICB0aGlzLmVtaXQoJ1NPVVJDRV9VUERBVEVfRU5EJyk7XG4gICAgdGhpcy5kb0FwcGVuZCgpXG4gIH1cbiAgYWRkU291cmNlQnVmZmVycyAoKSB7XG4gICAgaWYgKHRoaXMubWVkaWFTb3VyY2UucmVhZHlTdGF0ZSAhPT0gJ29wZW4nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzb3VyY2VzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgdHJhY2tzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJyk7XG4gICAgbGV0IHRyYWNrO1xuXG4gICAgc291cmNlcyA9IHNvdXJjZXMuc291cmNlcztcbiAgICBsZXQgYWRkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDAsIGsgPSBPYmplY3Qua2V5cyhzb3VyY2VzKS5sZW5ndGg7IGkgPCBrOyBpKyspIHtcbiAgICAgIGxldCB0eXBlID0gT2JqZWN0LmtleXMoc291cmNlcylbaV07XG4gICAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICB0cmFjayA9IHRyYWNrcy5hdWRpb1RyYWNrO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgIHRyYWNrID0gdHJhY2tzLnZpZGVvVHJhY2s7XG4gICAgICAgIC8vIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFjaykge1xuICAgICAgICBsZXQgZHVyID0gdHlwZSA9PT0gJ2F1ZGlvJyA/IDIxIDogNDA7XG4gICAgICAgIGlmICh0cmFjay5tZXRhICYmIHRyYWNrLm1ldGEucmVmU2FtcGxlRHVyYXRpb24pIGR1ciA9IHRyYWNrLm1ldGEucmVmU2FtcGxlRHVyYXRpb247XG4gICAgICAgIGlmIChzb3VyY2VzW3R5cGVdLmRhdGEubGVuZ3RoID49ICh0aGlzLnByZWxvYWRUaW1lIC8gZHVyKSkge1xuICAgICAgICAgIGFkZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWRkKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwLCBrID0gT2JqZWN0LmtleXMoc291cmNlcykubGVuZ3RoOyBpIDwgazsgaSsrKSB7XG4gICAgICAgIGxldCB0eXBlID0gT2JqZWN0LmtleXMoc291cmNlcylbaV07XG4gICAgICAgIGxldCBzb3VyY2UgPSBzb3VyY2VzW3R5cGVdXG4gICAgICAgIGxldCBtaW1lID0gKHR5cGUgPT09ICd2aWRlbycpID8gJ3ZpZGVvL21wNDtjb2RlY3M9JyArIHNvdXJjZS5taW1ldHlwZSA6ICdhdWRpby9tcDQ7Y29kZWNzPScgKyBzb3VyY2UubWltZXR5cGVcbiAgICAgICAgbGV0IHNvdXJjZUJ1ZmZlciA9IHRoaXMubWVkaWFTb3VyY2UuYWRkU291cmNlQnVmZmVyKG1pbWUpO1xuICAgICAgICB0aGlzLnNvdXJjZUJ1ZmZlcnNbdHlwZV0gPSBzb3VyY2VCdWZmZXI7XG4gICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCB0aGlzLm9uVXBkYXRlRW5kKTtcbiAgICAgICAgdGhpcy5kb0FwcGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRvQXBwZW5kICgpIHtcbiAgICBsZXQgc291cmNlcyA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1BSRV9TT1VSQ0VfQlVGRkVSJyk7XG4gICAgaWYgKHNvdXJjZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdHlwZSA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1cbiAgICAgICAgbGV0IHNvdXJjZUJ1ZmZlciA9IHRoaXMuc291cmNlQnVmZmVyc1t0eXBlXTtcbiAgICAgICAgaWYgKCFzb3VyY2VCdWZmZXIudXBkYXRpbmcpIHtcbiAgICAgICAgICBsZXQgc291cmNlID0gc291cmNlcy5zb3VyY2VzW3R5cGVdO1xuICAgICAgICAgIGlmIChzb3VyY2UgJiYgIXNvdXJjZS5pbml0ZWQpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhcHBlbmQgaW5pdGlhbCBzZWdtZW50JylcbiAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hcHBlbmRCdWZmZXIoc291cmNlLmluaXQuYnVmZmVyLmJ1ZmZlcik7XG4gICAgICAgICAgICBzb3VyY2UuaW5pdGVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBzb3VyY2UuZGF0YS5zaGlmdCgpXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYXBwZW5kQnVmZmVyKGRhdGEuYnVmZmVyLmJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZW5kT2ZTdHJlYW0gKCkge1xuICAgIGNvbnN0IHsgcmVhZHlTdGF0ZSwgYWN0aXZlU291cmNlQnVmZmVycyB9ID0gdGhpcy5tZWRpYVNvdXJjZTtcbiAgICBpZiAocmVhZHlTdGF0ZSA9PT0gJ29wZW4nICYmIGFjdGl2ZVNvdXJjZUJ1ZmZlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLm1lZGlhU291cmNlLmVuZE9mU3RyZWFtKClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbG9nXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlIChlbmQsIHN0YXJ0ID0gMCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGJ1ZmZlciA9IHRoaXMuc291cmNlQnVmZmVyc1tPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpW2ldXTtcbiAgICAgIGlmICghYnVmZmVyLnVwZGF0aW5nKSB7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3JlbW92ZScsIHN0YXJ0LCBlbmQpXG4gICAgICAgIGJ1ZmZlci5yZW1vdmUoc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlbW92ZUJ1ZmZlcnMgKCkge1xuICAgIGNvbnN0IHRhc2tMaXN0ID0gW11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBidWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXV07XG4gICAgICBidWZmZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgdGhpcy5vblVwZGF0ZUVuZCk7XG5cbiAgICAgIGxldCB0YXNrO1xuICAgICAgaWYgKGJ1ZmZlci51cGRhdGluZykge1xuICAgICAgICB0YXNrID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICBjb25zdCBkb0NsZWFuQnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IHJldHJ5VGltZSA9IDNcblxuICAgICAgICAgICAgY29uc3QgY2xlYW4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghYnVmZmVyLnVwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgTVNFLmNsZWFyQnVmZmVyKGJ1ZmZlcilcbiAgICAgICAgICAgICAgICBidWZmZXIuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocmV0cnlUaW1lID4gMCl7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChjbGVhbiwgMjAwKVxuICAgICAgICAgICAgICAgIHJldHJ5VGltZS0tXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0VGltZW91dChjbGVhbiwgMjAwKVxuICAgICAgICAgICAgYnVmZmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWVuZCcsIGRvQ2xlYW5CdWZmZXIpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlci5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCBkb0NsZWFuQnVmZmVyKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFzayA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgTVNFLmNsZWFyQnVmZmVyKGJ1ZmZlcilcbiAgICAgICAgICBidWZmZXIuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICAvLyB0YXNrID0gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIH1cblxuICAgICAgdGFza0xpc3QucHVzaCh0YXNrKVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbCh0YXNrTGlzdClcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHJldHVybiB0aGlzLnJlbW92ZUJ1ZmZlcnMoKS50aGVuKCgpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgYnVmZmVyID0gdGhpcy5zb3VyY2VCdWZmZXJzW09iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1dO1xuICAgICAgICB0aGlzLm1lZGlhU291cmNlLnJlbW92ZVNvdXJjZUJ1ZmZlcihidWZmZXIpO1xuICAgICAgICBkZWxldGUgdGhpcy5zb3VyY2VCdWZmZXJzW09iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1dO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgdGhpcy5vblRpbWVVcGRhdGUpO1xuICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIHRoaXMub25XYWl0aW5nKTtcbiAgICAgIHRoaXMubWVkaWFTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMub25Tb3VyY2VPcGVuKTtcblxuICAgICAgdGhpcy5lbmRPZlN0cmVhbSgpXG4gICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLnVybCk7XG5cbiAgICAgIHRoaXMudXJsID0gbnVsbFxuICAgICAgdGhpcy5jb25maWdzID0ge307XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XG4gICAgICB0aGlzLm1lZGlhU291cmNlID0gbnVsbDtcbiAgICAgIHRoaXMuc291cmNlQnVmZmVycyA9IHt9O1xuICAgICAgdGhpcy5wcmVsb2FkVGltZSA9IDE7XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBjbGVhckJ1ZmZlciAoYnVmZmVyKSB7XG4gICAgY29uc3QgYnVmZmVyZWQgPSBidWZmZXIuYnVmZmVyZWQ7XG4gICAgbGV0IGJFbmQgPSAwLjFcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYnVmZmVyZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGJFbmQgPSBidWZmZXJlZC5lbmQoaSlcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGJ1ZmZlci5yZW1vdmUoMCwgYkVuZClcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBETyBOT1RISU5HXG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBNU0U7XG4iLCJpbXBvcnQgQ29uY2F0IGZyb20gJ2NvbmNhdC10eXBlZC1hcnJheSdcblxuY2xhc3MgQnVmZmVyIHtcbiAgY29uc3RydWN0b3IgKGJ1ZmZlcikge1xuICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyIHx8IG5ldyBVaW50OEFycmF5KDApXG4gIH1cblxuICB3cml0ZSAoLi4uYnVmZmVyKSB7XG4gICAgYnVmZmVyLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IENvbmNhdChVaW50OEFycmF5LCB0aGlzLmJ1ZmZlciwgaXRlbSlcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIHdyaXRlVWludDMyICh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXG4gICAgICB2YWx1ZSA+PiAyNCxcbiAgICAgICh2YWx1ZSA+PiAxNikgJiAweGZmLFxuICAgICAgKHZhbHVlID4+IDgpICYgMHhmZixcbiAgICAgIHZhbHVlICYgMHhmZlxuICAgIF0pXG4gIH1cblxuICBzdGF0aWMgcmVhZEFzSW50IChhcnIpIHtcbiAgICBsZXQgdGVtcCA9ICcnXG5cbiAgICBmdW5jdGlvbiBwYWRTdGFydDRIZXggKGhleE51bSkge1xuICAgICAgbGV0IGhleFN0ciA9IGhleE51bS50b1N0cmluZygxNilcbiAgICAgIHJldHVybiBoZXhTdHIucGFkU3RhcnQoMiwgJzAnKVxuICAgIH1cblxuICAgIGFyci5mb3JFYWNoKG51bSA9PiB7XG4gICAgICB0ZW1wICs9IHBhZFN0YXJ0NEhleChudW0pXG4gICAgfSlcbiAgICByZXR1cm4gcGFyc2VJbnQodGVtcCwgMTYpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnVmZmVyXG4iLCJjbGFzcyBTdHJlYW0ge1xuICBjb25zdHJ1Y3RvciAoYnVmZmVyKSB7XG4gICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgIHRoaXMuZGF0YXZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICAgIHRoaXMuZGF0YXZpZXcucG9zaXRpb24gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBsZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgc2V0IHBvc2l0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuZGF0YXZpZXcucG9zaXRpb24gPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBwb3NpdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YXZpZXcucG9zaXRpb247XG4gIH1cblxuICBiYWNrIChjb3VudCkge1xuICAgIHRoaXMucG9zaXRpb24gLT0gY291bnQ7XG4gIH1cblxuICBza2lwIChjb3VudCkge1xuICAgIGxldCBsb29wID0gTWF0aC5mbG9vcihjb3VudCAvIDQpO1xuICAgIGxldCBsYXN0ID0gY291bnQgJSA0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcDsgaSsrKSB7XG4gICAgICBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgNCk7XG4gICAgfVxuICAgIGlmIChsYXN0ID4gMCkge1xuICAgICAgU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIGxhc3QpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbcmVhZEJ5dGUg5LuORGF0YVZpZXfkuK3or7vlj5bmlbDmja5dXG4gICAqIEBwYXJhbSAge0RhdGFWaWV3fSBidWZmZXIgW0RhdGFWaWV35a6e5L6LXVxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHNpemUgICBb6K+75Y+W5a2X6IqC5pWwXVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICBb5pW05pWwXVxuICAgKi9cbiAgc3RhdGljIHJlYWRCeXRlIChidWZmZXIsIHNpemUsIHNpZ24pIHtcbiAgICBsZXQgcmVzO1xuICAgIHN3aXRjaCAoc2l6ZSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRJbnQ4KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQ4KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGlmIChzaWduKSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldEludDE2KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQxNihidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnRlZCBmb3IgcmVhZEJ5dGUgMycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50OChidWZmZXIucG9zaXRpb24pIDw8IDE2O1xuICAgICAgICAgIHJlcyB8PSBidWZmZXIuZ2V0VWludDgoYnVmZmVyLnBvc2l0aW9uICsgMSkgPDwgODtcbiAgICAgICAgICByZXMgfD0gYnVmZmVyLmdldFVpbnQ4KGJ1ZmZlci5wb3NpdGlvbiArIDIpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRJbnQzMihidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50MzIoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgaWYgKHNpZ24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBzdXBwb3J0ZWQgZm9yIHJlYWRCb2R5IDgnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0VWludDMyKGJ1ZmZlci5wb3NpdGlvbikgPDwgMzI7XG4gICAgICAgICAgcmVzIHw9IGJ1ZmZlci5nZXRVaW50MzIoYnVmZmVyLnBvc2l0aW9uICsgNCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXMgPSAnJztcbiAgICB9XG4gICAgYnVmZmVyLnBvc2l0aW9uICs9IHNpemU7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIHJlYWRVaW50OCAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAxKTtcbiAgfVxuXG4gIHJlYWRVaW50MTYgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMik7XG4gIH1cblxuICByZWFkVWludDI0ICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDMpO1xuICB9XG5cbiAgcmVhZFVpbnQzMiAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCA0KTtcbiAgfVxuXG4gIHJlYWRVaW50NjQgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgOCk7XG4gIH1cblxuICByZWFkSW50OCAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAxLCB0cnVlKTtcbiAgfVxuICByZWFkSW50MTYgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMiwgdHJ1ZSk7XG4gIH1cblxuICByZWFkSW50MzIgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgNCwgdHJ1ZSk7XG4gIH1cblxuICB3cml0ZVVpbnQzMiAodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgdmFsdWUgPj4+IDI0ICYgMHhmZixcbiAgICAgIHZhbHVlID4+PiAxNiAmIDB4ZmYsXG4gICAgICB2YWx1ZSA+Pj4gOCAmIDB4ZmYsXG4gICAgICB2YWx1ZSAmIDB4ZmZcbiAgICBdKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdHJlYW07XG4iLCJpbXBvcnQgUmVtdXhlciBmcm9tICd4Z3BsYXllci1yZW11eCdcbmltcG9ydCB7IEZldGNoTG9hZGVyIH0gZnJvbSAneGdwbGF5ZXItbG9hZGVyJ1xuaW1wb3J0IHsgRmx2RGVtdXhlciB9IGZyb20gJ3hncGxheWVyLWRlbXV4J1xuaW1wb3J0IHsgVHJhY2tzLCBYZ0J1ZmZlciwgUHJlU291cmNlIH0gZnJvbSAneGdwbGF5ZXItYnVmZmVyJ1xuaW1wb3J0IHsgTXNlLCBFVkVOVFMgfSBmcm9tICd4Z3BsYXllci11dGlscydcbmltcG9ydCB7IENvbXBhdGliaWxpdHkgfSBmcm9tICd4Z3BsYXllci1jb2RlYydcbmltcG9ydCBQbGF5ZXIgZnJvbSAneGdwbGF5ZXInXG5cbmNvbnN0IFJFTVVYX0VWRU5UUyA9IEVWRU5UUy5SRU1VWF9FVkVOVFM7XG5jb25zdCBERU1VWF9FVkVOVFMgPSBFVkVOVFMuREVNVVhfRVZFTlRTO1xuY29uc3QgTE9BREVSX0VWRU5UUyA9IEVWRU5UUy5MT0FERVJfRVZFTlRTXG5jb25zdCBNU0VfRVZFTlRTID0gRVZFTlRTLk1TRV9FVkVOVFNcblxuY29uc3QgVGFnID0gJ0ZMVkNvbnRyb2xsZXInXG5cbmNsYXNzIExvZ2dlciB7XG4gIHdhcm4gKCkge31cbn1cblxuY29uc3QgRkxWX0VSUk9SID0gJ0ZMVl9FUlJPUidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmx2Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yIChwbGF5ZXIpIHtcbiAgICB0aGlzLlRBRyA9IFRhZ1xuICAgIHRoaXMuX3BsYXllciA9IHBsYXllclxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGluaXRTZWdtZW50QXJyaXZlZDogZmFsc2UsXG4gICAgICByYW5kb21BY2Nlc3NQb2ludHM6IFtdXG4gICAgfVxuXG4gICAgdGhpcy5idWZmZXJDbGVhclRpbWVyID0gbnVsbDtcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0ZFVENIX0xPQURFUicsIEZldGNoTG9hZGVyKVxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0xPQURFUl9CVUZGRVInLCBYZ0J1ZmZlcilcblxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0ZMVl9ERU1VWEVSJywgRmx2RGVtdXhlcilcbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdUUkFDS1MnLCBUcmFja3MpXG5cbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdNUDRfUkVNVVhFUicsIFJlbXV4ZXIuTXA0UmVtdXhlcilcbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdQUkVfU09VUkNFX0JVRkZFUicsIFByZVNvdXJjZSlcblxuICAgIGlmICh0aGlzLl9wbGF5ZXIuY29uZmlnLmNvbXBhdGliaWxpdHkgIT09IGZhbHNlKSB7XG4gICAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdDT01QQVRJQklMSVRZJywgQ29tcGF0aWJpbGl0eSlcbiAgICB9XG5cbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdMT0dHRVInLCBMb2dnZXIpXG4gICAgdGhpcy5tc2UgPSB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdNU0UnLCBNc2UpKHsgY29udGFpbmVyOiB0aGlzLl9wbGF5ZXIudmlkZW8gfSlcblxuICAgIHRoaXMuX2hhbmRsZVRpbWVVcGRhdGUgPSB0aGlzLl9oYW5kbGVUaW1lVXBkYXRlLmJpbmQodGhpcylcblxuICAgIHRoaXMuaW5pdExpc3RlbmVycygpXG4gIH1cblxuICBpbml0TGlzdGVuZXJzICgpIHtcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTE9BREVSX0RBVEFMT0FERUQsIHRoaXMuX2hhbmRsZUxvYWRlckRhdGFMb2FkZWQuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCB0aGlzLl9oYW5kbGVOZXR3b3JrRXJyb3IuYmluZCh0aGlzKSlcblxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLk1FRElBX0lORk8sIHRoaXMuX2hhbmRsZU1lZGlhSW5mby5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgdGhpcy5faGFuZGxlTWV0YWRhdGFQYXJzZWQuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSwgdGhpcy5faGFuZGxlRGVtdXhDb21wbGV0ZS5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLl9oYW5kbGVEZW11eEVycm9yLmJpbmQodGhpcykpXG5cbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5JTklUX1NFR01FTlQsIHRoaXMuX2hhbmRsZUFwcGVuZEluaXRTZWdtZW50LmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihSRU1VWF9FVkVOVFMuTUVESUFfU0VHTUVOVCwgdGhpcy5faGFuZGxlTWVkaWFTZWdtZW50LmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihSRU1VWF9FVkVOVFMuUkFORE9NX0FDQ0VTU19QT0lOVCwgdGhpcy5faGFuZGxlQWRkUkFQLmJpbmQodGhpcykpXG5cbiAgICB0aGlzLm9uKE1TRV9FVkVOVFMuU09VUkNFX1VQREFURV9FTkQsIHRoaXMuX2hhbmRsZVNvdXJjZVVwZGF0ZUVuZC5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5fcGxheWVyLm9uKCd0aW1ldXBkYXRlJywgdGhpcy5faGFuZGxlVGltZVVwZGF0ZSlcbiAgfVxuXG4gIF9oYW5kbGVNZWRpYUluZm8gKCkge1xuICAgIGlmICghdGhpcy5fY29udGV4dC5tZWRpYUluZm8pIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIG5ldyBFcnJvcignZmFpbGVkIHRvIGdldCBtZWRpYWluZm8nKSlcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlTG9hZGVyRGF0YUxvYWRlZCAoKSB7XG4gICAgdGhpcy5lbWl0VG8oJ0ZMVl9ERU1VWEVSJywgREVNVVhfRVZFTlRTLkRFTVVYX1NUQVJUKVxuICB9XG5cbiAgX2hhbmRsZU1ldGFkYXRhUGFyc2VkICh0eXBlKSB7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5SRU1VWF9NRVRBREFUQSwgdHlwZSlcbiAgfVxuICBfaGFuZGxlRGVtdXhDb21wbGV0ZSAoKSB7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5SRU1VWF9NRURJQSlcbiAgfVxuXG4gIF9oYW5kbGVBcHBlbmRJbml0U2VnbWVudCAoKSB7XG4gICAgdGhpcy5zdGF0ZS5pbml0U2VnbWVudEFycml2ZWQgPSB0cnVlXG4gICAgdGhpcy5tc2UuYWRkU291cmNlQnVmZmVycygpXG4gIH1cblxuICBfaGFuZGxlTWVkaWFTZWdtZW50ICgpIHtcbiAgICB0aGlzLm1zZS5hZGRTb3VyY2VCdWZmZXJzKClcbiAgICB0aGlzLm1zZS5kb0FwcGVuZCgpO1xuICB9XG5cbiAgX2hhbmRsZVNvdXJjZVVwZGF0ZUVuZCAoKSB7XG4gICAgY29uc3QgdGltZSA9IHRoaXMuX3BsYXllci5jdXJyZW50VGltZTtcbiAgICBjb25zdCB2aWRlbyA9IHRoaXMuX3BsYXllci52aWRlbztcbiAgICBjb25zdCBwcmVsb2FkVGltZSA9IHRoaXMuX3BsYXllci5jb25maWcucHJlbG9hZFRpbWUgfHwgNVxuXG4gICAgY29uc3QgeyBsZW5ndGggfSA9IHZpZGVvLmJ1ZmZlcmVkO1xuXG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGJ1ZmZlckVuZCA9IHZpZGVvLmJ1ZmZlcmVkLmVuZChsZW5ndGggLSAxKTtcbiAgICBpZiAoYnVmZmVyRW5kIC0gdGltZSA+IHByZWxvYWRUaW1lICogMikge1xuICAgICAgdGhpcy5fcGxheWVyLmN1cnJlbnRUaW1lID0gYnVmZmVyRW5kIC0gcHJlbG9hZFRpbWVcbiAgICB9XG4gICAgdGhpcy5tc2UuZG9BcHBlbmQoKTtcbiAgfVxuXG4gIF9oYW5kbGVUaW1lVXBkYXRlICgpIHtcbiAgICBjb25zdCB0aW1lID0gdGhpcy5fcGxheWVyLmN1cnJlbnRUaW1lXG5cbiAgICBjb25zdCB2aWRlbyA9IHRoaXMuX3BsYXllci52aWRlbztcbiAgICBsZXQgYnVmZmVyZWQgPSB2aWRlby5idWZmZXJlZFxuXG4gICAgaWYgKCFidWZmZXJlZCB8fCAhYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHJhbmdlID0gWzAsIDBdXG4gICAgbGV0IGN1cnJlbnRUaW1lID0gdmlkZW8uY3VycmVudFRpbWVcbiAgICBpZiAoYnVmZmVyZWQpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBidWZmZXJlZC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICByYW5nZVswXSA9IGJ1ZmZlcmVkLnN0YXJ0KGkpXG4gICAgICAgIHJhbmdlWzFdID0gYnVmZmVyZWQuZW5kKGkpXG4gICAgICAgIGlmIChyYW5nZVswXSA8PSBjdXJyZW50VGltZSAmJiBjdXJyZW50VGltZSA8PSByYW5nZVsxXSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXJTdGFydCA9IHJhbmdlWzBdXG4gICAgY29uc3QgYnVmZmVyRW5kID0gcmFuZ2VbMV1cblxuICAgIGlmIChjdXJyZW50VGltZSA+IGJ1ZmZlckVuZCkge1xuICAgICAgdmlkZW8uY3VycmVudFRpbWUgPSBidWZmZXJTdGFydCArIDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRpbWUgLSBidWZmZXJTdGFydCA+IDEwKSB7XG4gICAgICAvLyDlnKjnm7Tmkq3ml7blj4rml7bmuIXnqbpidWZmZXLvvIzpmY3kvY7nm7Tmkq3lhoXlrZjljaDnlKhcbiAgICAgIGlmICh0aGlzLmJ1ZmZlckNsZWFyVGltZXIgfHwgIXRoaXMuc3RhdGUucmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgcmFwID0gSW5maW5pdHk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGUucmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRlbXAgPSBNYXRoLmNlaWwodGhpcy5zdGF0ZS5yYW5kb21BY2Nlc3NQb2ludHNbaV0gLyAxMDAwKVxuICAgICAgICBpZiAodGVtcCA+IHRpbWUgLSAxMCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhcCA9IHRlbXA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc29sZS5sb2coJ3JhcCcsIHJhcCwgYHRpbWUgJHt0aW1lfWAsIGBidWZmZXJFbmQgJHtidWZmZXJFbmR9YCxgY2xlYW4gJHtNYXRoLm1pbihyYXAsIHRpbWUgLSAxMCwgYnVmZmVyRW5kIC0gMTApfWApXG4gICAgICB0aGlzLm1zZS5yZW1vdmUoTWF0aC5taW4ocmFwLCB0aW1lIC0gMTAsIGJ1ZmZlckVuZCAtIDEwKSwgMClcblxuICAgICAgdGhpcy5idWZmZXJDbGVhclRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuYnVmZmVyQ2xlYXJUaW1lciA9IG51bGxcbiAgICAgIH0sIDUwMDApXG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZU5ldHdvcmtFcnJvciAodGFnLCBlcnIpIHtcbiAgICB0aGlzLl9wbGF5ZXIuZW1pdCgnZXJyb3InLCBuZXcgUGxheWVyLkVycm9ycygnbmV0d29yaycsIHRoaXMuX3BsYXllci5jb25maWcudXJsKSlcbiAgICB0aGlzLl9vbkVycm9yKExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCB0YWcsIGVyciwgdHJ1ZSlcbiAgfVxuXG4gIF9oYW5kbGVEZW11eEVycm9yICh0YWcsIGVyciwgZmF0YWwpIHtcbiAgICBpZiAoZmF0YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZmF0YWwgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5fcGxheWVyLmVtaXQoJ2Vycm9yJywgbmV3IFBsYXllci5FcnJvcnMoJ3BhcnNlJywgdGhpcy5fcGxheWVyLmNvbmZpZy51cmwpKVxuICAgIHRoaXMuX29uRXJyb3IoTE9BREVSX0VWRU5UUy5MT0FERVJfRVJST1IsIHRhZywgZXJyLCBmYXRhbClcbiAgfVxuXG4gIF9oYW5kbGVBZGRSQVAgKHJhcCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnJhbmRvbUFjY2Vzc1BvaW50cykge1xuICAgICAgdGhpcy5zdGF0ZS5yYW5kb21BY2Nlc3NQb2ludHMucHVzaChyYXApXG4gICAgfVxuICB9XG5cbiAgX29uRXJyb3IgKHR5cGUsIG1vZCwgZXJyLCBmYXRhbCkge1xuICAgIGxldCBlcnJvciA9IHtcbiAgICAgIGVycm9yVHlwZTogdHlwZSxcbiAgICAgIGVycm9yRGV0YWlsczogYFske21vZH1dOiAke2Vyci5tZXNzYWdlfWAsXG4gICAgICBlcnJvckZhdGFsOiBmYXRhbCB8fCBmYWxzZVxuICAgIH1cbiAgICB0aGlzLl9wbGF5ZXIuZW1pdChGTFZfRVJST1IsIGVycm9yKTtcbiAgfVxuXG4gIHNlZWsgKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5pbml0U2VnbWVudEFycml2ZWQpIHtcbiAgICAgIHRoaXMubG9hZERhdGEoKVxuICAgIH1cbiAgfVxuXG4gIGxvYWREYXRhICgpIHtcbiAgICB0aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MQURFUl9TVEFSVCwgdGhpcy5fcGxheWVyLmNvbmZpZy51cmwpXG4gIH1cblxuICBwYXVzZSAoKSB7XG4gICAgY29uc3QgbG9hZGVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnRkVUQ0hfTE9BREVSJylcblxuICAgIGlmIChsb2FkZXIpIHtcbiAgICAgIGxvYWRlci5jYW5jZWwoKVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX3BsYXllci5vZmYoJ3RpbWV1cGRhdGUnLCB0aGlzLl9oYW5kbGVUaW1lVXBkYXRlKVxuICAgIHRoaXMuX3BsYXllciA9IG51bGxcbiAgICB0aGlzLm1zZSA9IG51bGxcbiAgICB0aGlzLnN0YXRlLnJhbmRvbUFjY2Vzc1BvaW50cyA9IFtdXG4gIH1cbn1cbiIsImltcG9ydCBQbGF5ZXIgZnJvbSAneGdwbGF5ZXInXG5pbXBvcnQgeyBDb250ZXh0LCBFVkVOVFMgfSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5pbXBvcnQgRkxWIGZyb20gJy4vZmx2LWxpdmUnXG5jb25zdCBmbHZBbGxvd2VkRXZlbnRzID0gRVZFTlRTLkZsdkFsbG93ZWRFdmVudHM7XG5cbmNsYXNzIEZsdlBsYXllciBleHRlbmRzIFBsYXllciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpXG4gICAgdGhpcy5jb250ZXh0ID0gbmV3IENvbnRleHQoZmx2QWxsb3dlZEV2ZW50cylcbiAgICB0aGlzLmluaXRFdmVudHMoKVxuICAgIHRoaXMubG9hZGVyQ29tcGxldGVUaW1lciA9IG51bGxcbiAgICAvLyBjb25zdCBwcmVsb2FkVGltZSA9IHBsYXllci5jb25maWcucHJlbG9hZFRpbWUgfHwgMTVcbiAgfVxuXG4gIHN0YXJ0ICgpIHtcbiAgICB0aGlzLmluaXRGbHYoKVxuICAgIHRoaXMuY29udGV4dC5pbml0KClcbiAgICBzdXBlci5zdGFydCh0aGlzLmZsdi5tc2UudXJsKVxuICB9XG5cbiAgaW5pdEZsdkV2ZW50cyAoZmx2KSB7XG4gICAgY29uc3QgcGxheWVyID0gdGhpcztcbiAgICBmbHYub25jZShFVkVOVFMuUkVNVVhfRVZFTlRTLklOSVRfU0VHTUVOVCwgKCkgPT4ge1xuICAgICAgUGxheWVyLnV0aWwuYWRkQ2xhc3MocGxheWVyLnJvb3QsICd4Z3BsYXllci1pcy1saXZlJylcbiAgICAgIGlmICghUGxheWVyLnV0aWwuZmluZERvbSh0aGlzLnJvb3QsICd4Zy1saXZlJykpIHtcbiAgICAgICAgY29uc3QgbGl2ZSA9IFBsYXllci51dGlsLmNyZWF0ZURvbSgneGctbGl2ZScsICfmraPlnKjnm7Tmkq0nLCB7fSwgJ3hncGxheWVyLWxpdmUnKVxuICAgICAgICBwbGF5ZXIuY29udHJvbHMuYXBwZW5kQ2hpbGQobGl2ZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgZmx2Lm9uY2UoRVZFTlRTLkxPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCAoKSA9PiB7XG4gICAgICAvLyDnm7Tmkq3lrozmiJDvvIzlvoXmkq3mlL7lmajmkq3lroznvJPlrZjlkI7lj5HpgIHlhbPpl63kuovku7ZcbiAgICAgIGlmICghcGxheWVyLnBhdXNlZCkge1xuICAgICAgICB0aGlzLmxvYWRlckNvbXBsZXRlVGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgZW5kID0gcGxheWVyLmdldEJ1ZmZlcmVkUmFuZ2UoKVsxXVxuICAgICAgICAgIGlmIChNYXRoLmFicyhwbGF5ZXIuY3VycmVudFRpbWUgLSBlbmQpIDwgMC41KSB7XG4gICAgICAgICAgICBwbGF5ZXIuZW1pdCgnZW5kZWQnKVxuICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5sb2FkZXJDb21wbGV0ZVRpbWVyKVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgMjAwKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGxheWVyLmVtaXQoJ2VuZGVkJylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgaW5pdEV2ZW50cyAoKSB7XG4gICAgdGhpcy5vbigndGltZXVwZGF0ZScsICgpID0+IHtcbiAgICAgIHRoaXMubG9hZERhdGEoKVxuICAgIH0pXG5cbiAgICB0aGlzLm9uKCdzZWVraW5nJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGltZSA9IHRoaXMuY3VycmVudFRpbWVcbiAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRCdWZmZXJlZFJhbmdlKClcbiAgICAgIGlmICh0aW1lID4gcmFuZ2VbMV0gfHwgdGltZSA8IHJhbmdlWzBdKSB7XG4gICAgICAgIHRoaXMuZmx2LnNlZWsodGhpcy5jdXJyZW50VGltZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gIH1cblxuICBpbml0Rmx2ICgpIHtcbiAgICBjb25zdCBmbHYgPSB0aGlzLmNvbnRleHQucmVnaXN0cnkoJ0ZMVl9DT05UUk9MTEVSJywgRkxWKSh0aGlzKVxuICAgIHRoaXMuaW5pdEZsdkV2ZW50cyhmbHYpXG4gICAgdGhpcy5mbHYgPSBmbHZcbiAgfVxuXG4gIHBsYXkoKSB7XG4gICAgaWYgKHRoaXMuX2hhc1N0YXJ0KSB7XG4gICAgICB0aGlzLl9kZXN0cm95KCkudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IG5ldyBDb250ZXh0KGZsdkFsbG93ZWRFdmVudHMpXG4gICAgICAgIGNvbnN0IGZsdiA9IHRoaXMuY29udGV4dC5yZWdpc3RyeSgnRkxWX0NPTlRST0xMRVInLCBGTFYpKHRoaXMpXG4gICAgICAgIHRoaXMuaW5pdEZsdkV2ZW50cyhmbHYpXG4gICAgICAgIHRoaXMuZmx2ID0gZmx2XG4gICAgICAgIHRoaXMuY29udGV4dC5pbml0KClcbiAgICAgICAgc3VwZXIuc3RhcnQoZmx2Lm1zZS51cmwpXG4gICAgICAgIHN1cGVyLnBsYXkoKVxuICAgICAgfSlcblxuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5wbGF5KClcbiAgICB9XG4gIH1cblxuICBwYXVzZSAoKSB7XG4gICAgc3VwZXIucGF1c2UoKVxuICAgIGlmICh0aGlzLmZsdikge1xuICAgICAgdGhpcy5mbHYucGF1c2UoKVxuICAgIH1cbiAgfVxuXG4gIGxvYWREYXRhICh0aW1lID0gdGhpcy5jdXJyZW50VGltZSkge1xuICAgIGlmICh0aGlzLmZsdikge1xuICAgICAgdGhpcy5mbHYuc2Vlayh0aW1lKVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2Rlc3Ryb3koKS50aGVuKCgpID0+IHtcbiAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9KVxuICB9XG5cbiAgX2Rlc3Ryb3kgKCkge1xuICAgIHJldHVybiB0aGlzLmZsdi5tc2UuZGVzdHJveSgpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5jb250ZXh0LmRlc3Ryb3koKVxuICAgICAgdGhpcy5mbHYgPSBudWxsXG4gICAgICB0aGlzLmNvbnRleHQgPSBudWxsXG4gICAgICBpZiAodGhpcy5sb2FkZXJDb21wbGV0ZVRpbWVyKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMubG9hZGVyQ29tcGxldGVUaW1lcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZ2V0IHNyYyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFNyY1xuICB9XG5cbiAgc2V0IHNyYyAodXJsKSB7XG4gICAgdGhpcy5wbGF5ZXIuY29uZmlnLnVybCA9IHVybFxuICAgIGlmICghdGhpcy5wYXVzZWQpIHtcbiAgICAgIHRoaXMucGF1c2UoKVxuICAgICAgdGhpcy5vbmNlKCdwYXVzZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5zdGFydCh1cmwpXG4gICAgICB9KVxuICAgICAgdGhpcy5vbmNlKCdjYW5wbGF5JywgKCkgPT4ge1xuICAgICAgICB0aGlzLnBsYXkoKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydCh1cmwpXG4gICAgfVxuICAgIHRoaXMub25jZSgnY2FucGxheScsICgpID0+IHtcbiAgICAgIHRoaXMuY3VycmVudFRpbWUgPSAwXG4gICAgfSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZsdlBsYXllclxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3hncGxheWVyX187IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dChyZXF1aXJlKFwieGdwbGF5ZXJcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wieGdwbGF5ZXJcIl0sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0c1tcInhncGxheWVyLWZsdlwiXT10KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk6ZVtcInhncGxheWVyLWZsdlwiXT10KGUueGdwbGF5ZXIpfSh3aW5kb3csKGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBpKHMpe2lmKHRbc10pcmV0dXJuIHRbc10uZXhwb3J0czt2YXIgcj10W3NdPXtpOnMsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtzXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyxpKSxyLmw9ITAsci5leHBvcnRzfXJldHVybiBpLm09ZSxpLmM9dCxpLmQ9ZnVuY3Rpb24oZSx0LHMpe2kubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDpzfSl9LGkucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxpLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPWkoZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHM9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihpLnIocyksT2JqZWN0LmRlZmluZVByb3BlcnR5KHMsXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciByIGluIGUpaS5kKHMscixmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLHIpKTtyZXR1cm4gc30saS5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBpLmQodCxcImFcIix0KSx0fSxpLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LGkucD1cIlwiLGkoaS5zPTExKX0oW2Z1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9e0NvbnRleHQ6aSgxMykuZGVmYXVsdCxFVkVOVFM6aSg0KS5kZWZhdWx0LFdPUktFUl9DT01NQU5EUzppKDE1KS5kZWZhdWx0LHNuaWZmZXI6aSgxNikuZGVmYXVsdCxpc0xlOmkoMTcpLmRlZmF1bHQsVVRGODppKDE4KS5kZWZhdWx0LE1lZGlhSW5mbzppKDMpLmRlZmF1bHQsTWVkaWFTYW1wbGU6aSgxOSkuZGVmYXVsdCxNZWRpYVNlZ21lbnQ6aSgyMCkuZGVmYXVsdCxNZWRpYVNlZ21lbnRMaXN0OmkoMjEpLmRlZmF1bHQsQXVkaW9UcmFja01ldGE6aSg1KS5BdWRpb1RyYWNrTWV0YSxWaWRlb1RyYWNrTWV0YTppKDUpLlZpZGVvVHJhY2tNZXRhLEF1ZGlvVHJhY2tTYW1wbGU6aSg2KS5BdWRpb1RyYWNrU2FtcGxlLFZpZGVvVHJhY2tTYW1wbGU6aSg2KS5WaWRlb1RyYWNrU2FtcGxlLE1zZTppKDIyKS5kZWZhdWx0LFN0cmVhbTppKDIzKS5kZWZhdWx0LEJ1ZmZlcjppKDI0KS5kZWZhdWx0LENyeXB0bzppKDI3KS5kZWZhdWx0fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NsYXNzIHN7Y29uc3RydWN0b3IoKXt0aGlzLmlkPS0xLHRoaXMuc2VxdWVuY2VOdW1iZXI9MCx0aGlzLnNhbXBsZXM9W10sdGhpcy5kcm9wcGVkU2FtcGxlcz1bXSx0aGlzLmxlbmd0aD0wfXJlc2V0KCl7dGhpcy5zZXF1ZW5jZU51bWJlcj0wLHRoaXMuc2FtcGxlcz1bXSx0aGlzLmxlbmd0aD0wfWRpc3Ryb3koKXt0aGlzLnJlc2V0KCksdGhpcy5pZD0tMX19dC5kZWZhdWx0PXM7dC5BdWRpb1RyYWNrPWNsYXNzIGV4dGVuZHMgc3tjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5UQUc9XCJBdWRpb1RyYWNrXCIsdGhpcy50eXBlPVwiYXVkaW9cIn19O3QuVmlkZW9UcmFjaz1jbGFzcyBleHRlbmRzIHN7Y29uc3RydWN0b3IoKXtzdXBlcigpLHRoaXMuVEFHPVwiVmlkZW9UcmFja1wiLHRoaXMudHlwZT1cInZpZGVvXCIsdGhpcy5kcm9wcGVkPTB9cmVzZXQoKXt0aGlzLnNlcXVlbmNlTnVtYmVyPTAsdGhpcy5zYW1wbGVzPVtdLHRoaXMubGVuZ3RoPTAsdGhpcy5kcm9wcGVkPTB9fTt0LlRyYWNrcz1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMuYXVkaW9UcmFjaz1udWxsLHRoaXMudmlkZW9UcmFjaz1udWxsfWRlc3Ryb3koKXt0aGlzLmF1ZGlvVHJhY2s9bnVsbCx0aGlzLnZpZGVvVHJhY2s9bnVsbH19fSxmdW5jdGlvbih0LGkpe3QuZXhwb3J0cz1lfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgcz1lPT57Zm9yKGxldCB0IGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eSh0KSYmbnVsbD09PWVbdF0pcmV0dXJuITE7cmV0dXJuITB9O2NsYXNzIHJ7Y29uc3RydWN0b3IoKXt0aGlzLm1pbWVUeXBlPW51bGwsdGhpcy5kdXJhdGlvbj1udWxsLHRoaXMuaGFzVmlkZW89bnVsbCx0aGlzLnZpZGVvPXtjb2RlYzpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJvZmlsZTpudWxsLGxldmVsOm51bGwsZnJhbWVSYXRlOntmaXhlZDohMCxmcHM6MjUsZnBzX251bToyNWUzLGZwc19kZW46MWUzfSxjaHJvbWFGb3JtYXQ6bnVsbCxwYXJSYXRpbzp7d2lkdGg6MSxoZWlnaHQ6MX19LHRoaXMuaGFzQXVkaW89bnVsbCx0aGlzLmF1ZGlvPXtjb2RlYzpudWxsLHNhbXBsZVJhdGU6bnVsbCxzYW1wbGVSYXRlSW5kZXg6bnVsbCxjaGFubmVsQ291bnQ6bnVsbH19aXNDb21wbGV0ZSgpe3JldHVybiByLmlzQmFzZUluZm9SZWFkeSh0aGlzKSYmci5pc1ZpZGVvUmVhZHkodGhpcykmJnIuaXNBdWRpb1JlYWR5KHRoaXMpfXN0YXRpYyBpc0Jhc2VJbmZvUmVhZHkoZSl7cmV0dXJuIHMoZSl9c3RhdGljIGlzVmlkZW9SZWFkeShlKXtyZXR1cm4hZS5oYXNWaWRlb3x8cyhlLnZpZGVvKX1zdGF0aWMgaXNBdWRpb1JlYWR5KGUpe3JldHVybiFlLmhhc0F1ZGlvfHxzKGUudmlkZW8pfX10LmRlZmF1bHQ9cn0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IHM9e0xBREVSX1NUQVJUOlwiTE9BREVSX1NUQVJUXCIsTE9BREVSX0RBVEFMT0FERUQ6XCJMT0FERVJfREFUQUxPQURFRFwiLExPQURFUl9DT01QTEVURTpcIkxPQURFUl9DT01QTEVURVwiLExPQURFUl9FUlJPUjpcIkxPQURFUl9FUlJPUlwifSxyPXtERU1VWF9TVEFSVDpcIkRFTVVYX1NUQVJUXCIsREVNVVhfQ09NUExFVEU6XCJERU1VWF9DT01QTEVURVwiLERFTVVYX0VSUk9SOlwiREVNVVhfRVJST1JcIixNRVRBREFUQV9QQVJTRUQ6XCJNRVRBREFUQV9QQVJTRURcIixWSURFT19NRVRBREFUQV9DSEFOR0U6XCJWSURFT19NRVRBREFUQV9DSEFOR0VcIixBVURJT19NRVRBREFUQV9DSEFOR0U6XCJBVURJT19NRVRBREFUQV9DSEFOR0VcIixNRURJQV9JTkZPOlwiTUVESUFfSU5GT1wifSxhPXtSRU1VWF9NRVRBREFUQTpcIlJFTVVYX01FVEFEQVRBXCIsUkVNVVhfTUVESUE6XCJSRU1VWF9NRURJQVwiLE1FRElBX1NFR01FTlQ6XCJNRURJQV9TRUdNRU5UXCIsUkVNVVhfRVJST1I6XCJSRU1VWF9FUlJPUlwiLElOSVRfU0VHTUVOVDpcIklOSVRfU0VHTUVOVFwiLERFVEVDVF9DSEFOR0VfU1RSRUFNOlwiREVURUNUX0NIQU5HRV9TVFJFQU1cIn0sbj17U09VUkNFX1VQREFURV9FTkQ6XCJTT1VSQ0VfVVBEQVRFX0VORFwifSxvPXtSRVRSWV9USU1FX0VYQ0VFREVEOlwiUkVUUllfVElNRV9FWENFRURFRFwifSxkPU9iamVjdC5hc3NpZ24oe30scyxyLGEsbixvKSxsPVtdLGg9W107Zm9yKGxldCBlIGluIGQpZC5oYXNPd25Qcm9wZXJ0eShlKSYmbC5wdXNoKGRbZV0pO2ZvcihsZXQgZSBpbiBkKWQuaGFzT3duUHJvcGVydHkoZSkmJmgucHVzaChkW2VdKTt0LmRlZmF1bHQ9e0FMTEVWRU5UUzpkLEhMU19FVkVOVFM6byxSRU1VWF9FVkVOVFM6YSxERU1VWF9FVkVOVFM6cixNU0VfRVZFTlRTOm4sTE9BREVSX0VWRU5UUzpzLEZsdkFsbG93ZWRFdmVudHM6bCxIbHNBbGxvd2VkRXZlbnRzOmgsQ1JZVE9fRVZFTlRTOntTVEFSVF9ERUNSWVBUOlwiU1RBUlRfREVDUllQVFwiLERFQ1JZUFRFRDpcIkRFQ1JZUFRFRFwifX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt0LkF1ZGlvVHJhY2tNZXRhPWNsYXNze2NvbnN0cnVjdG9yKGUpe2NvbnN0IHQ9e3NhbXBsZVJhdGU6NDhlMyxjaGFubmVsQ291bnQ6Mixjb2RlYzpcIm1wNGEuNDAuMlwiLGNvbmZpZzpbNDEsNDAxLDEzNiwwXSxkdXJhdGlvbjowLGlkOjIscmVmU2FtcGxlRHVyYXRpb246MjEsc2FtcGxlUmF0ZUluZGV4OjMsdGltZXNjYWxlOjFlMyx0eXBlOlwiYXVkaW9cIn07cmV0dXJuIGU/T2JqZWN0LmFzc2lnbih7fSx0LGUpOnR9ZGVzdHJveSgpe3RoaXMuaW5pdD1udWxsfX07dC5WaWRlb1RyYWNrTWV0YT1jbGFzc3tjb25zdHJ1Y3RvcihlKXtjb25zdCB0PXthdmNjOm51bGwsc3BzOm5ldyBVaW50OEFycmF5KDApLHBwczpuZXcgVWludDhBcnJheSgwKSxjaHJvbWFGb3JtYXQ6NDIwLGNvZGVjOlwiYXZjMS42NDAwMjBcIixjb2RlY0hlaWdodDo3MjAsY29kZWNXaWR0aDoxMjgwLGR1cmF0aW9uOjAsZnJhbWVSYXRlOntmaXhlZDohMCxmcHM6MjUsZnBzX251bToyNWUzLGZwc19kZW46MWUzfSxpZDoxLGxldmVsOlwiMy4yXCIscHJlc2VudEhlaWdodDo3MjAscHJlc2VudFdpZHRoOjEyODAscHJvZmlsZTpcIkhpZ2hcIixyZWZTYW1wbGVEdXJhdGlvbjo0MCxwYXJSYXRpbzp7aGVpZ2h0OjEsd2lkdGg6MX0sdGltZXNjYWxlOjFlMyx0eXBlOlwidmlkZW9cIn07cmV0dXJuIGU/T2JqZWN0LmFzc2lnbih7fSx0LGUpOnR9ZGVzdHJveSgpe3RoaXMuaW5pdD1udWxsLHRoaXMuc3BzPW51bGwsdGhpcy5wcHM9bnVsbH19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y2xhc3Mgc3tjb25zdHJ1Y3RvcihlKXtsZXQgdD1zLmdldERlZmF1bHQoKTtyZXR1cm4gZT9PYmplY3QuYXNzaWduKHt9LHQsZSk6dH1zdGF0aWMgZ2V0RGVmYXVsdCgpe3JldHVybntkdHM6bnVsbCxwdHM6bnVsbCxkYXRhOm5ldyBVaW50OEFycmF5fX19dC5BdWRpb1RyYWNrU2FtcGxlPXM7Y2xhc3Mgcntjb25zdHJ1Y3RvcihlKXtsZXQgdD1yLmdldERlZmF1bHQoKTtyZXR1cm4gZT9PYmplY3QuYXNzaWduKHt9LHQsZSk6dH1zdGF0aWMgZ2V0RGVmYXVsdCgpe3JldHVybntkdHM6bnVsbCxwdHM6bnVsbCxpc0tleWZyYW1lOiExLG9yaWdpbkR0czpudWxsLGRhdGE6bmV3IFVpbnQ4QXJyYXl9fX10LlZpZGVvVHJhY2tTYW1wbGU9cn0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17TmFsdW5pdDppKDMwKS5kZWZhdWx0LFNwc1BhcnNlcjppKDgpLmRlZmF1bHQsQ29tcGF0aWJpbGl0eTppKDMyKS5kZWZhdWx0fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzLHI9aSgzMSksYT0ocz1yKSYmcy5fX2VzTW9kdWxlP3M6e2RlZmF1bHQ6c307Y2xhc3MgbntzdGF0aWMgX2Vic3AycmJzcChlKXtsZXQgdD1lLGk9dC5ieXRlTGVuZ3RoLHM9bmV3IFVpbnQ4QXJyYXkoaSkscj0wO2ZvcihsZXQgZT0wO2U8aTtlKyspZT49MiYmMz09PXRbZV0mJjA9PT10W2UtMV0mJjA9PT10W2UtMl18fChzW3JdPXRbZV0scisrKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkocy5idWZmZXIsMCxyKX1zdGF0aWMgcGFyc2VTUFMoZSl7bGV0IHQ9bi5fZWJzcDJyYnNwKGUpLGk9bmV3IGEuZGVmYXVsdCh0KTtpLnJlYWRCeXRlKCk7bGV0IHM9aS5yZWFkQnl0ZSgpO2kucmVhZEJ5dGUoKTtsZXQgcj1pLnJlYWRCeXRlKCk7aS5yZWFkVUVHKCk7bGV0IG89bi5nZXRQcm9maWxlU3RyaW5nKHMpLGQ9bi5nZXRMZXZlbFN0cmluZyhyKSxsPTEsaD00MjAsdT1bMCw0MjAsNDIyLDQ0NF0sYz04O2lmKCgxMDA9PT1zfHwxMTA9PT1zfHwxMjI9PT1zfHwyNDQ9PT1zfHw0ND09PXN8fDgzPT09c3x8ODY9PT1zfHwxMTg9PT1zfHwxMjg9PT1zfHwxMzg9PT1zfHwxNDQ9PT1zKSYmKDM9PT0obD1pLnJlYWRVRUcoKSkmJmkucmVhZEJpdHMoMSksbDw9MyYmKGg9dVtsXSksYz1pLnJlYWRVRUcoKSs4LGkucmVhZFVFRygpLGkucmVhZEJpdHMoMSksaS5yZWFkQm9vbCgpKSl7bGV0IGU9MyE9PWw/ODoxMjtmb3IobGV0IHQ9MDt0PGU7dCsrKWkucmVhZEJvb2woKSYmKHQ8Nj9uLl9za2lwU2NhbGluZ0xpc3QoaSwxNik6bi5fc2tpcFNjYWxpbmdMaXN0KGksNjQpKX1pLnJlYWRVRUcoKTtsZXQgZj1pLnJlYWRVRUcoKTtpZigwPT09ZilpLnJlYWRVRUcoKTtlbHNlIGlmKDE9PT1mKXtpLnJlYWRCaXRzKDEpLGkucmVhZFNFRygpLGkucmVhZFNFRygpO2xldCBlPWkucmVhZFVFRygpO2ZvcihsZXQgdD0wO3Q8ZTt0KyspaS5yZWFkU0VHKCl9aS5yZWFkVUVHKCksaS5yZWFkQml0cygxKTtsZXQgcD1pLnJlYWRVRUcoKSxtPWkucmVhZFVFRygpLGc9aS5yZWFkQml0cygxKTswPT09ZyYmaS5yZWFkQml0cygxKSxpLnJlYWRCaXRzKDEpO2xldCBfPTAseT0wLEU9MCxTPTA7aS5yZWFkQm9vbCgpJiYoXz1pLnJlYWRVRUcoKSx5PWkucmVhZFVFRygpLEU9aS5yZWFkVUVHKCksUz1pLnJlYWRVRUcoKSk7bGV0IEE9MSx2PTEsVD0wLGI9ITAsUj0wLEQ9MDtpZihpLnJlYWRCb29sKCkpe2lmKGkucmVhZEJvb2woKSl7bGV0IGU9aS5yZWFkQnl0ZSgpLHQ9WzEsMTIsMTAsMTYsNDAsMjQsMjAsMzIsODAsMTgsMTUsNjQsMTYwLDQsMywyXSxzPVsxLDExLDExLDExLDMzLDExLDExLDExLDMzLDExLDExLDMzLDk5LDMsMiwxXTtlPjAmJmU8MTY/KEE9dFtlLTFdLHY9c1tlLTFdKToyNTU9PT1lJiYoQT1pLnJlYWRCeXRlKCk8PDh8aS5yZWFkQnl0ZSgpLHY9aS5yZWFkQnl0ZSgpPDw4fGkucmVhZEJ5dGUoKSl9aWYoaS5yZWFkQm9vbCgpJiZpLnJlYWRCb29sKCksaS5yZWFkQm9vbCgpJiYoaS5yZWFkQml0cyg0KSxpLnJlYWRCb29sKCkmJmkucmVhZEJpdHMoMjQpKSxpLnJlYWRCb29sKCkmJihpLnJlYWRVRUcoKSxpLnJlYWRVRUcoKSksaS5yZWFkQm9vbCgpKXtsZXQgZT1pLnJlYWRCaXRzKDMyKSx0PWkucmVhZEJpdHMoMzIpO2I9aS5yZWFkQm9vbCgpLFQ9KFI9dCkvKEQ9MiplKX19bGV0IHc9MTsxPT09QSYmMT09PXZ8fCh3PUEvdik7bGV0IHg9MCxMPTA7aWYoMD09PWwpeD0xLEw9Mi1nO2Vsc2V7eD0zPT09bD8xOjIsTD0oMT09PWw/MjoxKSooMi1nKX1sZXQgTz0xNioocCsxKSxNPTE2KihtKzEpKigyLWcpO08tPShfK3kpKngsTS09KEUrUykqTDtsZXQgQj1NYXRoLmNlaWwoTyp3KTtyZXR1cm4gaS5kZXN0cm95KCksaT1udWxsLHtwcm9maWxlX3N0cmluZzpvLGxldmVsX3N0cmluZzpkLGJpdF9kZXB0aDpjLGNocm9tYV9mb3JtYXQ6aCxjaHJvbWFfZm9ybWF0X3N0cmluZzpuLmdldENocm9tYUZvcm1hdFN0cmluZyhoKSxmcmFtZV9yYXRlOntmaXhlZDpiLGZwczpULGZwc19kZW46RCxmcHNfbnVtOlJ9LHBhcl9yYXRpbzp7d2lkdGg6QSxoZWlnaHQ6dn0sY29kZWNfc2l6ZTp7d2lkdGg6TyxoZWlnaHQ6TX0scHJlc2VudF9zaXplOnt3aWR0aDpCLGhlaWdodDpNfX19c3RhdGljIF9za2lwU2NhbGluZ0xpc3QoZSx0KXtsZXQgaT04LHM9OCxyPTA7Zm9yKGxldCBhPTA7YTx0O2ErKykwIT09cyYmKHM9KGkrKHI9ZS5yZWFkU0VHKCkpKzI1NiklMjU2KSxpPTA9PT1zP2k6c31zdGF0aWMgZ2V0UHJvZmlsZVN0cmluZyhlKXtzd2l0Y2goZSl7Y2FzZSA2NjpyZXR1cm5cIkJhc2VsaW5lXCI7Y2FzZSA3NzpyZXR1cm5cIk1haW5cIjtjYXNlIDg4OnJldHVyblwiRXh0ZW5kZWRcIjtjYXNlIDEwMDpyZXR1cm5cIkhpZ2hcIjtjYXNlIDExMDpyZXR1cm5cIkhpZ2gxMFwiO2Nhc2UgMTIyOnJldHVyblwiSGlnaDQyMlwiO2Nhc2UgMjQ0OnJldHVyblwiSGlnaDQ0NFwiO2RlZmF1bHQ6cmV0dXJuXCJVbmtub3duXCJ9fXN0YXRpYyBnZXRMZXZlbFN0cmluZyhlKXtyZXR1cm4oZS8xMCkudG9GaXhlZCgxKX1zdGF0aWMgZ2V0Q2hyb21hRm9ybWF0U3RyaW5nKGUpe3N3aXRjaChlKXtjYXNlIDQyMDpyZXR1cm5cIjQ6MjowXCI7Y2FzZSA0MjI6cmV0dXJuXCI0OjI6MlwiO2Nhc2UgNDQ0OnJldHVyblwiNDo0OjRcIjtkZWZhdWx0OnJldHVyblwiVW5rbm93blwifX1zdGF0aWMgdG9WaWRlb01ldGEoZSl7bGV0IHQ9e307ZSYmZS5jb2RlY19zaXplJiYodC5jb2RlY1dpZHRoPWUuY29kZWNfc2l6ZS53aWR0aCx0LmNvZGVjSGVpZ2h0PWUuY29kZWNfc2l6ZS5oZWlnaHQsdC5wcmVzZW50V2lkdGg9ZS5wcmVzZW50X3NpemUud2lkdGgsdC5wcmVzZW50SGVpZ2h0PWUucHJlc2VudF9zaXplLmhlaWdodCksdC5wcm9maWxlPWUucHJvZmlsZV9zdHJpbmcsdC5sZXZlbD1lLmxldmVsX3N0cmluZyx0LmJpdERlcHRoPWUuYml0X2RlcHRoLHQuY2hyb21hRm9ybWF0PWUuY2hyb21hX2Zvcm1hdCx0LnBhclJhdGlvPXt3aWR0aDplLnBhcl9yYXRpby53aWR0aCxoZWlnaHQ6ZS5wYXJfcmF0aW8uaGVpZ2h0fSx0LmZyYW1lUmF0ZT1lLmZyYW1lX3JhdGU7bGV0IGk9dC5mcmFtZVJhdGUuZnBzX2RlbixzPXQuZnJhbWVSYXRlLmZwc19udW07dC5yZWZTYW1wbGVEdXJhdGlvbj1NYXRoLmZsb29yKHQudGltZXNjYWxlKihpL3MpKX19dC5kZWZhdWx0PW59LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9e1RyYWNrOmkoMSkuZGVmYXVsdCxUcmFja3M6aSgxKS5UcmFja3MsQXVkaW9UcmFjazppKDEpLkF1ZGlvVHJhY2ssVmlkZW9UcmFjazppKDEpLlZpZGVvVHJhY2ssWGdCdWZmZXI6aSgxMCkuWGdCdWZmZXIsUmVtdXhCdWZmZXI6aSgxMCkuUmVtdXhCdWZmZXIsUHJlU291cmNlOmkoMzQpLmRlZmF1bHR9fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dC5YZ0J1ZmZlcj1jbGFzc3tjb25zdHJ1Y3RvcihlKXt0aGlzLmxlbmd0aD1lfHwwLHRoaXMuaGlzdG9yeUxlbj1lfHwwLHRoaXMuYXJyYXk9W10sdGhpcy5vZmZzZXQ9MH1wdXNoKGUpe3RoaXMuYXJyYXkucHVzaChlKSx0aGlzLmxlbmd0aCs9ZS5ieXRlTGVuZ3RoLHRoaXMuaGlzdG9yeUxlbis9ZS5ieXRlTGVuZ3RofXNoaWZ0KGUpe2lmKHRoaXMuYXJyYXkubGVuZ3RoPDEpcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO2lmKHZvaWQgMD09PWUpcmV0dXJuIHRoaXMuX3NoaWZ0QnVmZmVyKCk7aWYodGhpcy5vZmZzZXQrZT09PXRoaXMuYXJyYXlbMF0ubGVuZ3RoKXtsZXQgdD10aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LHRoaXMub2Zmc2V0K2UpO3JldHVybiB0aGlzLm9mZnNldD0wLHRoaXMuYXJyYXkuc2hpZnQoKSx0aGlzLmxlbmd0aC09ZSx0fWlmKHRoaXMub2Zmc2V0K2U8dGhpcy5hcnJheVswXS5sZW5ndGgpe2xldCB0PXRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsdGhpcy5vZmZzZXQrZSk7cmV0dXJuIHRoaXMub2Zmc2V0Kz1lLHRoaXMubGVuZ3RoLT1lLHR9bGV0IHQ9bmV3IFVpbnQ4QXJyYXkoZSksaT0wO2Zvcig7dGhpcy5hcnJheS5sZW5ndGg+MCYmZT4wOyl7aWYodGhpcy5vZmZzZXQrZTx0aGlzLmFycmF5WzBdLmxlbmd0aCl7bGV0IHM9dGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCx0aGlzLm9mZnNldCtlKTt0LnNldChzLGkpLHRoaXMub2Zmc2V0Kz1lLHRoaXMubGVuZ3RoLT1lLGU9MDticmVha317bGV0IHM9dGhpcy5hcnJheVswXS5sZW5ndGgtdGhpcy5vZmZzZXQ7dC5zZXQodGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCx0aGlzLmFycmF5WzBdLmxlbmd0aCksaSksdGhpcy5hcnJheS5zaGlmdCgpLHRoaXMub2Zmc2V0PTAsaSs9cyx0aGlzLmxlbmd0aC09cyxlLT1zfX1yZXR1cm4gdH1jbGVhcigpe3RoaXMuYXJyYXk9W10sdGhpcy5sZW5ndGg9MCx0aGlzLm9mZnNldD0wfWRlc3Ryb3koKXt0aGlzLmNsZWFyKCksdGhpcy5oaXN0b3J5TGVuPTB9X3NoaWZ0QnVmZmVyKCl7cmV0dXJuIHRoaXMubGVuZ3RoLT10aGlzLmFycmF5WzBdLmxlbmd0aCx0aGlzLm9mZnNldD0wLHRoaXMuYXJyYXkuc2hpZnQoKX10b0ludChlLHQpe2xldCBpPTAscz10aGlzLm9mZnNldCtlO2Zvcig7czx0aGlzLm9mZnNldCt0K2U7KXM8dGhpcy5hcnJheVswXS5sZW5ndGg/aT0yNTYqaSt0aGlzLmFycmF5WzBdW3NdOnRoaXMuYXJyYXlbMV0mJihpPTI1NippK3RoaXMuYXJyYXlbMV1bcy10aGlzLmFycmF5WzBdLmxlbmd0aF0pLHMrKztyZXR1cm4gaX19O3QuUmVtdXhCdWZmZXI9Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLnZpZGVvPVtdLHRoaXMuYXVkaW89W119ZGVzdHJveSgpe3RoaXMudmlkZW89W10sdGhpcy5hdWRpbz1bXX19fSxmdW5jdGlvbihlLHQsaSl7ZS5leHBvcnRzPWkoMTIpfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHM9bihpKDIpKSxyPWkoMCksYT1uKGkoMjgpKTtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1jb25zdCBvPXIuRVZFTlRTLkZsdkFsbG93ZWRFdmVudHMsZD0oZSx0KT0+e2lmKCFlLmNvbmZpZy5pc0xpdmUmJmUuZHVyYXRpb24tZS5jdXJyZW50VGltZTwyKXtjb25zdCBpPWUuZ2V0QnVmZmVyZWRSYW5nZSgpO2UuY3VycmVudFRpbWUtaVsxXTwuMSYmKGUuZW1pdChcImVuZGVkXCIpLHQubXNlLmVuZE9mU3RyZWFtKCkpfX07Y2xhc3MgbCBleHRlbmRzIHMuZGVmYXVsdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihlKSx0aGlzLmNvbnRleHQ9bmV3IHIuQ29udGV4dChvKSx0aGlzLmluaXRFdmVudHMoKX1zdGFydCgpe2NvbnN0IGU9dGhpcy5jb250ZXh0LnJlZ2lzdHJ5KFwiRkxWX0NPTlRST0xMRVJcIixhLmRlZmF1bHQpKHRoaXMpO3RoaXMuZmx2PWUsdGhpcy5jb250ZXh0LmluaXQoKSxzdXBlci5zdGFydChlLm1zZS51cmwpfWluaXRFdmVudHMoKXt0aGlzLm9uKFwidGltZXVwZGF0ZVwiLHRoaXMuaGFuZGxlVGltZVVwZGF0ZS5iaW5kKHRoaXMpKSx0aGlzLm9uKFwic2Vla2luZ1wiLHRoaXMuaGFuZGxlU2Vlay5iaW5kKHRoaXMpKSx0aGlzLm9uY2UoXCJkZXN0cm95XCIsdGhpcy5fZGVzdHJveS5iaW5kKHRoaXMpKX1oYW5kbGVUaW1lVXBkYXRlKCl7dGhpcy5sb2FkRGF0YSgpLGQodGhpcyx0aGlzLmZsdil9aGFuZGxlU2Vlaygpe2NvbnN0IGU9dGhpcy5jdXJyZW50VGltZSx0PXRoaXMuZ2V0QnVmZmVyZWRSYW5nZSgpOyhlPnRbMV18fGU8dFswXSkmJnRoaXMuZmx2LnNlZWsodGhpcy5jdXJyZW50VGltZSl9X2Rlc3Ryb3koKXt0aGlzLmNvbnRleHQuZGVzdHJveSgpLHRoaXMuY29udGV4dD1udWxsLHRoaXMuZmx2PW51bGx9bG9hZERhdGEoZT10aGlzLmN1cnJlbnRUaW1lKXtjb25zdCB0PXRoaXMuZ2V0QnVmZmVyZWRSYW5nZSgpO3RbMV0tZTwodGhpcy5jb25maWcucHJlbG9hZFRpbWV8fDE1KS01JiZ0aGlzLmZsdi5sb2FkTmV4dCh0WzFdKzEpfWdldCBzcmMoKXtyZXR1cm4gdGhpcy5jdXJyZW50U3JjfXNldCBzcmMoZSl7dGhpcy5wbGF5ZXIuY29uZmlnLnVybD1lLHRoaXMucGF1c2VkP3RoaXMuc3RhcnQoZSk6KHRoaXMucGF1c2UoKSx0aGlzLm9uY2UoXCJwYXVzZVwiLCgpPT57dGhpcy5zdGFydChlKX0pLHRoaXMub25jZShcImNhbnBsYXlcIiwoKT0+e3RoaXMucGxheSgpfSkpLHRoaXMub25jZShcImNhbnBsYXlcIiwoKT0+e3RoaXMuY3VycmVudFRpbWU9MH0pfX1lLmV4cG9ydHM9bH0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzLHI9aSgzKSxhPShzPXIpJiZzLl9fZXNNb2R1bGU/czp7ZGVmYXVsdDpzfSxuPWkoMTQpO2NvbnN0IG89XCJfX1RPX19cIjt0LmRlZmF1bHQ9Y2xhc3N7Y29uc3RydWN0b3IoZT1bXSl7dGhpcy5fZW1pdHRlcj1uZXcgbi5FdmVudEVtaXR0ZXIsdGhpcy5faW5zdGFuY2VNYXA9e30sdGhpcy5fY2xzTWFwPXt9LHRoaXMuX2luaXRlZD0hMSx0aGlzLm1lZGlhSW5mbz1uZXcgYS5kZWZhdWx0LHRoaXMuYWxsb3dlZEV2ZW50cz1lLHRoaXMuX2hvb2tzPXt9fWdldEluc3RhbmNlKGUpe2NvbnN0IHQ9dGhpcy5faW5zdGFuY2VNYXBbZV07cmV0dXJuIHR8fG51bGx9aW5pdEluc3RhbmNlKGUsLi4udCl7aWYodGhpcy5fY2xzTWFwW2VdKXtjb25zdCBpPW5ldyB0aGlzLl9jbHNNYXBbZV0oLi4udCk7cmV0dXJuIHRoaXMuX2luc3RhbmNlTWFwW2VdPWksaS5pbml0JiZpLmluaXQoKSxpfXRocm93IG5ldyBFcnJvcihgJHtlfeacquWcqGNvbnRleHTkuK3ms6jlhoxgKX1pbml0KGUpe2lmKCF0aGlzLl9pbml0ZWQpe2ZvcihsZXQgdCBpbiB0aGlzLl9jbHNNYXApdGhpcy5fY2xzTWFwLmhhc093blByb3BlcnR5KHQpJiYhdGhpcy5faW5zdGFuY2VNYXBbdF0mJnRoaXMuaW5pdEluc3RhbmNlKHQsZSk7dGhpcy5faW5pdGVkPSEwfX1yZWdpc3RyeShlLHQpe2NvbnN0IGk9dGhpcy5fZW1pdHRlcixzPXRoaXMuX2lzTWVzc2FnZU5hbWVWYWxpZC5iaW5kKHRoaXMpLHI9dGhpcztyZXR1cm4gdGhpcy5fY2xzTWFwW2VdPWNsYXNzIGV4dGVuZHMgdHtjb25zdHJ1Y3RvciguLi50KXtzdXBlciguLi50KSx0aGlzLmxpc3RlbmVycz17fSx0aGlzLm9uY2VMaXN0ZW5lcnM9e30sdGhpcy5UQUc9ZSx0aGlzLl9jb250ZXh0PXJ9b24odCxyKXtyZXR1cm4gcyh0KSx0aGlzLmxpc3RlbmVyc1t0XT90aGlzLmxpc3RlbmVyc1t0XS5wdXNoKHIpOnRoaXMubGlzdGVuZXJzW3RdPVtyXSxpLm9uKGAke3R9JHtvfSR7ZX1gLHIpLGkub24odCxyKX1iZWZvcmUoZSx0KXtzKGUpLHIuX2hvb2tzW2VdP3IuX2hvb2tzW2VdLnB1c2godCk6ci5faG9va3NbZV09W3RdfW9uY2UodCxyKXtyZXR1cm4gcyh0KSx0aGlzLm9uY2VMaXN0ZW5lcnNbdF0/dGhpcy5vbmNlTGlzdGVuZXJzW3RdLnB1c2gocik6dGhpcy5vbmNlTGlzdGVuZXJzW3RdPVtyXSxpLm9uY2UoYCR7dH0ke299JHtlfWAsciksaS5vbmNlKHQscil9ZW1pdChlLC4uLnQpe3MoZSk7Y29uc3QgYT1yLl9ob29rcz9yLl9ob29rc1tlXTpudWxsO2lmKGEpZm9yKGxldCBlPTAsdD1hLmxlbmd0aDtlPHQ7ZSsrKXsoMCxhW2VdKSgpfXJldHVybiBpLmVtaXQoZSwuLi50KX1lbWl0VG8oZSx0LC4uLnIpe3JldHVybiBzKHQpLGkuZW1pdChgJHt0fSR7b30ke2V9YCwuLi5yKX1vZmYoZSx0KXtyZXR1cm4gcyhlKSxpLm9mZihlLHQpfXJlbW92ZUxpc3RlbmVycygpe2NvbnN0IHQ9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKHRoaXMubGlzdGVuZXJzKTtmb3IobGV0IHMgaW4gdGhpcy5saXN0ZW5lcnMpaWYodChzKSl7Y29uc3QgdD10aGlzLmxpc3RlbmVyc1tzXXx8W107Zm9yKGxldCByPTA7cjx0Lmxlbmd0aDtyKyspe2NvbnN0IGE9dFtyXTtpLm9mZihzLGEpLGkub2ZmKGAke3N9JHtvfSR7ZX1gLGEpfX1mb3IobGV0IHMgaW4gdGhpcy5vbmNlTGlzdGVuZXJzKWlmKHQocykpe2NvbnN0IHQ9dGhpcy5vbmNlTGlzdGVuZXJzW3NdfHxbXTtmb3IobGV0IHI9MDtyPHQubGVuZ3RoO3IrKyl7Y29uc3QgYT10W3JdO2kub2ZmKHMsYSksaS5vZmYoYCR7c30ke299JHtlfWAsYSl9fX1kZXN0cm95KCl7aWYodGhpcy5yZW1vdmVMaXN0ZW5lcnMoKSx0aGlzLmxpc3RlbmVycz17fSxkZWxldGUgci5faW5zdGFuY2VNYXBbZV0sc3VwZXIuZGVzdHJveSlyZXR1cm4gc3VwZXIuZGVzdHJveSgpfX0sKC4uLnQpPT50aGlzLmluaXRJbnN0YW5jZShlLC4uLnQpfWRlc3Ryb3lJbnN0YW5jZXMoKXtPYmplY3Qua2V5cyh0aGlzLl9pbnN0YW5jZU1hcCkuZm9yRWFjaChlPT57dGhpcy5faW5zdGFuY2VNYXBbZV0uZGVzdHJveSYmdGhpcy5faW5zdGFuY2VNYXBbZV0uZGVzdHJveSgpfSl9ZGVzdHJveSgpe3RoaXMuX2VtaXR0ZXI9bnVsbCx0aGlzLmFsbG93ZWRFdmVudHM9W10sdGhpcy5fY2xzTWFwPW51bGwsdGhpcy5fY29udGV4dD1udWxsLHRoaXMuX2hvb2tzPW51bGwsdGhpcy5kZXN0cm95SW5zdGFuY2VzKCl9X2lzTWVzc2FnZU5hbWVWYWxpZChlKXtpZighdGhpcy5hbGxvd2VkRXZlbnRzLmluZGV4T2YoZSk8MCl0aHJvdyBuZXcgRXJyb3IoYHVucmVnaXN0ZXJlZCBtZXNzYWdlIG5hbWU6ICR7ZX1gKX19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHMscj1cIm9iamVjdFwiPT10eXBlb2YgUmVmbGVjdD9SZWZsZWN0Om51bGwsYT1yJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByLmFwcGx5P3IuYXBwbHk6ZnVuY3Rpb24oZSx0LGkpe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChlLHQsaSl9O3M9ciYmXCJmdW5jdGlvblwiPT10eXBlb2Ygci5vd25LZXlzP3Iub3duS2V5czpPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKSl9OmZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKX07dmFyIG49TnVtYmVyLmlzTmFOfHxmdW5jdGlvbihlKXtyZXR1cm4gZSE9ZX07ZnVuY3Rpb24gbygpe28uaW5pdC5jYWxsKHRoaXMpfWUuZXhwb3J0cz1vLG8uRXZlbnRFbWl0dGVyPW8sby5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDAsby5wcm90b3R5cGUuX2V2ZW50c0NvdW50PTAsby5wcm90b3R5cGUuX21heExpc3RlbmVycz12b2lkIDA7dmFyIGQ9MTA7ZnVuY3Rpb24gbChlKXtyZXR1cm4gdm9pZCAwPT09ZS5fbWF4TGlzdGVuZXJzP28uZGVmYXVsdE1heExpc3RlbmVyczplLl9tYXhMaXN0ZW5lcnN9ZnVuY3Rpb24gaChlLHQsaSxzKXt2YXIgcixhLG4sbztpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIGkpO2lmKHZvaWQgMD09PShhPWUuX2V2ZW50cyk/KGE9ZS5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksZS5fZXZlbnRzQ291bnQ9MCk6KHZvaWQgMCE9PWEubmV3TGlzdGVuZXImJihlLmVtaXQoXCJuZXdMaXN0ZW5lclwiLHQsaS5saXN0ZW5lcj9pLmxpc3RlbmVyOmkpLGE9ZS5fZXZlbnRzKSxuPWFbdF0pLHZvaWQgMD09PW4pbj1hW3RdPWksKytlLl9ldmVudHNDb3VudDtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4/bj1hW3RdPXM/W2ksbl06W24saV06cz9uLnVuc2hpZnQoaSk6bi5wdXNoKGkpLChyPWwoZSkpPjAmJm4ubGVuZ3RoPnImJiFuLndhcm5lZCl7bi53YXJuZWQ9ITA7dmFyIGQ9bmV3IEVycm9yKFwiUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiBcIituLmxlbmd0aCtcIiBcIitTdHJpbmcodCkrXCIgbGlzdGVuZXJzIGFkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdFwiKTtkLm5hbWU9XCJNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmdcIixkLmVtaXR0ZXI9ZSxkLnR5cGU9dCxkLmNvdW50PW4ubGVuZ3RoLG89ZCxjb25zb2xlJiZjb25zb2xlLndhcm4mJmNvbnNvbGUud2FybihvKX1yZXR1cm4gZX1mdW5jdGlvbiB1KCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWUucHVzaChhcmd1bWVudHNbdF0pO3RoaXMuZmlyZWR8fCh0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsdGhpcy53cmFwRm4pLHRoaXMuZmlyZWQ9ITAsYSh0aGlzLmxpc3RlbmVyLHRoaXMudGFyZ2V0LGUpKX1mdW5jdGlvbiBjKGUsdCxpKXt2YXIgcz17ZmlyZWQ6ITEsd3JhcEZuOnZvaWQgMCx0YXJnZXQ6ZSx0eXBlOnQsbGlzdGVuZXI6aX0scj11LmJpbmQocyk7cmV0dXJuIHIubGlzdGVuZXI9aSxzLndyYXBGbj1yLHJ9ZnVuY3Rpb24gZihlLHQsaSl7dmFyIHM9ZS5fZXZlbnRzO2lmKHZvaWQgMD09PXMpcmV0dXJuW107dmFyIHI9c1t0XTtyZXR1cm4gdm9pZCAwPT09cj9bXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiByP2k/W3IubGlzdGVuZXJ8fHJdOltyXTppP2Z1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgQXJyYXkoZS5sZW5ndGgpLGk9MDtpPHQubGVuZ3RoOysraSl0W2ldPWVbaV0ubGlzdGVuZXJ8fGVbaV07cmV0dXJuIHR9KHIpOm0ocixyLmxlbmd0aCl9ZnVuY3Rpb24gcChlKXt2YXIgdD10aGlzLl9ldmVudHM7aWYodm9pZCAwIT09dCl7dmFyIGk9dFtlXTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBpKXJldHVybiAxO2lmKHZvaWQgMCE9PWkpcmV0dXJuIGkubGVuZ3RofXJldHVybiAwfWZ1bmN0aW9uIG0oZSx0KXtmb3IodmFyIGk9bmV3IEFycmF5KHQpLHM9MDtzPHQ7KytzKWlbc109ZVtzXTtyZXR1cm4gaX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0OmZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlPDB8fG4oZSkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK2UrXCIuXCIpO2Q9ZX19KSxvLmluaXQ9ZnVuY3Rpb24oKXt2b2lkIDAhPT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50cyE9PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzfHwodGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCksdGhpcy5fbWF4TGlzdGVuZXJzPXRoaXMuX21heExpc3RlbmVyc3x8dm9pZCAwfSxvLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGV8fGU8MHx8bihlKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrZStcIi5cIik7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz1lLHRoaXN9LG8ucHJvdG90eXBlLmdldE1heExpc3RlbmVycz1mdW5jdGlvbigpe3JldHVybiBsKHRoaXMpfSxvLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl0LnB1c2goYXJndW1lbnRzW2ldKTt2YXIgcz1cImVycm9yXCI9PT1lLHI9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PXIpcz1zJiZ2b2lkIDA9PT1yLmVycm9yO2Vsc2UgaWYoIXMpcmV0dXJuITE7aWYocyl7dmFyIG47aWYodC5sZW5ndGg+MCYmKG49dFswXSksbiBpbnN0YW5jZW9mIEVycm9yKXRocm93IG47dmFyIG89bmV3IEVycm9yKFwiVW5oYW5kbGVkIGVycm9yLlwiKyhuP1wiIChcIituLm1lc3NhZ2UrXCIpXCI6XCJcIikpO3Rocm93IG8uY29udGV4dD1uLG99dmFyIGQ9cltlXTtpZih2b2lkIDA9PT1kKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGQpYShkLHRoaXMsdCk7ZWxzZXt2YXIgbD1kLmxlbmd0aCxoPW0oZCxsKTtmb3IoaT0wO2k8bDsrK2kpYShoW2ldLHRoaXMsdCl9cmV0dXJuITB9LG8ucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGgodGhpcyxlLHQsITEpfSxvLnByb3RvdHlwZS5vbj1vLnByb3RvdHlwZS5hZGRMaXN0ZW5lcixvLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaCh0aGlzLGUsdCwhMCl9LG8ucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHQpO3JldHVybiB0aGlzLm9uKGUsYyh0aGlzLGUsdCkpLHRoaXN9LG8ucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHQpO3JldHVybiB0aGlzLnByZXBlbmRMaXN0ZW5lcihlLGModGhpcyxlLHQpKSx0aGlzfSxvLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciBpLHMscixhLG47aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiB0KTtpZih2b2lkIDA9PT0ocz10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PShpPXNbZV0pKXJldHVybiB0aGlzO2lmKGk9PT10fHxpLmxpc3RlbmVyPT09dCkwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOihkZWxldGUgc1tlXSxzLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsaS5saXN0ZW5lcnx8dCkpO2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2YgaSl7Zm9yKHI9LTEsYT1pLmxlbmd0aC0xO2E+PTA7YS0tKWlmKGlbYV09PT10fHxpW2FdLmxpc3RlbmVyPT09dCl7bj1pW2FdLmxpc3RlbmVyLHI9YTticmVha31pZihyPDApcmV0dXJuIHRoaXM7MD09PXI/aS5zaGlmdCgpOmZ1bmN0aW9uKGUsdCl7Zm9yKDt0KzE8ZS5sZW5ndGg7dCsrKWVbdF09ZVt0KzFdO2UucG9wKCl9KGksciksMT09PWkubGVuZ3RoJiYoc1tlXT1pWzBdKSx2b2lkIDAhPT1zLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsbnx8dCl9cmV0dXJuIHRoaXN9LG8ucHJvdG90eXBlLm9mZj1vLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcixvLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7dmFyIHQsaSxzO2lmKHZvaWQgMD09PShpPXRoaXMuX2V2ZW50cykpcmV0dXJuIHRoaXM7aWYodm9pZCAwPT09aS5yZW1vdmVMaXN0ZW5lcilyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApOnZvaWQgMCE9PWlbZV0mJigwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOmRlbGV0ZSBpW2VdKSx0aGlzO2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcixhPU9iamVjdC5rZXlzKGkpO2ZvcihzPTA7czxhLmxlbmd0aDsrK3MpXCJyZW1vdmVMaXN0ZW5lclwiIT09KHI9YVtzXSkmJnRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKHIpO3JldHVybiB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhcInJlbW92ZUxpc3RlbmVyXCIpLHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTAsdGhpc31pZihcImZ1bmN0aW9uXCI9PXR5cGVvZih0PWlbZV0pKXRoaXMucmVtb3ZlTGlzdGVuZXIoZSx0KTtlbHNlIGlmKHZvaWQgMCE9PXQpZm9yKHM9dC5sZW5ndGgtMTtzPj0wO3MtLSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdFtzXSk7cmV0dXJuIHRoaXN9LG8ucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4gZih0aGlzLGUsITApfSxvLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIGYodGhpcyxlLCExKX0sby5saXN0ZW5lckNvdW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZS5saXN0ZW5lckNvdW50P2UubGlzdGVuZXJDb3VudCh0KTpwLmNhbGwoZSx0KX0sby5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1wLG8ucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD9zKHRoaXMuX2V2ZW50cyk6W119fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dC5DT05URVhUX0NPTU9NQU5EUz17T046XCJvblwiLE9OQ0U6XCJvbmNlXCIsT0ZGOlwib2ZmXCIsRU1JVDpcImVtaXRcIixERVNUUk9ZOlwiZGVzdHJveVwifX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IHM9ZnVuY3Rpb24oKXtjb25zdCBlPW5ldyBBcnJheUJ1ZmZlcigyKTtyZXR1cm4gbmV3IERhdGFWaWV3KGUpLnNldEludDE2KDAsMjU2LCEwKSwyNTY9PT1uZXcgSW50MTZBcnJheShlKVswXX0oKSxyPXtnZXQgZGV2aWNlKCl7bGV0IGU9ci5vcztyZXR1cm4gZS5pc1BjP1wicGNcIjplLmlzVGFibGV0P1widGFibGV0XCI6XCJtb2JpbGVcIn0sZ2V0IGJyb3dzZXIoKXtsZXQgZT1uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCksdD17aWU6L3J2OihbXFxkLl0rKVxcKSBsaWtlIGdlY2tvLyxmaXJmb3g6L2ZpcmVmb3hcXC8oW1xcZC5dKykvLGNocm9tZTovY2hyb21lXFwvKFtcXGQuXSspLyxvcGVyYTovb3BlcmEuKFtcXGQuXSspLyxzYWZhcmk6L3ZlcnNpb25cXC8oW1xcZC5dKykuKnNhZmFyaS99O3JldHVybltdLmNvbmNhdChPYmplY3Qua2V5cyh0KS5maWx0ZXIoaT0+dFtpXS50ZXN0KGUpKSlbMF19LGdldCBvcygpe2xldCBlPW5hdmlnYXRvci51c2VyQWdlbnQsdD0vKD86V2luZG93cyBQaG9uZSkvLnRlc3QoZSksaT0vKD86U3ltYmlhbk9TKS8udGVzdChlKXx8dCxzPS8oPzpBbmRyb2lkKS8udGVzdChlKSxyPS8oPzpGaXJlZm94KS8udGVzdChlKSxhPS8oPzppUGFkfFBsYXlCb29rKS8udGVzdChlKXx8cyYmIS8oPzpNb2JpbGUpLy50ZXN0KGUpfHxyJiYvKD86VGFibGV0KS8udGVzdChlKSxuPS8oPzppUGhvbmUpLy50ZXN0KGUpJiYhYTtyZXR1cm57aXNUYWJsZXQ6YSxpc1Bob25lOm4saXNBbmRyb2lkOnMsaXNQYzohbiYmIXMmJiFpLGlzU3ltYmlhbjppLGlzV2luZG93c1Bob25lOnQsaXNGaXJlRm94OnJ9fSxnZXQgaXNMZSgpe3JldHVybiBzfX07dC5kZWZhdWx0PXJ9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBzPWZ1bmN0aW9uKCl7Y29uc3QgZT1uZXcgQXJyYXlCdWZmZXIoMik7cmV0dXJuIG5ldyBEYXRhVmlldyhlKS5zZXRJbnQxNigwLDI1NiwhMCksMjU2PT09bmV3IEludDE2QXJyYXkoZSlbMF19KCk7dC5kZWZhdWx0PXN9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjbGFzcyBze3N0YXRpYyBkZWNvZGUoZSl7Y29uc3QgdD1bXSxpPWU7bGV0IHI9MDtjb25zdCBhPWUubGVuZ3RoO2Zvcig7cjxhOylpZihpW3JdPDEyOCl0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShpW3JdKSksKytyO2Vsc2V7aWYoaVtyXTwxOTIpO2Vsc2UgaWYoaVtyXTwyMjQpe2lmKHMuX2NoZWNrQ29udGludWF0aW9uKGksciwxKSl7Y29uc3QgZT0oMzEmaVtyXSk8PDZ8NjMmaVtyKzFdO2lmKGU+PTEyOCl7dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoNjU1MzUmZSkpLHIrPTI7Y29udGludWV9fX1lbHNlIGlmKGlbcl08MjQwKXtpZihzLl9jaGVja0NvbnRpbnVhdGlvbihpLHIsMikpe2NvbnN0IGU9KDE1Jmlbcl0pPDwxMnwoNjMmaVtyKzFdKTw8Nnw2MyZpW3IrMl07aWYoZT49MjA0OCYmNTUyOTYhPSg2MzQ4OCZlKSl7dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoNjU1MzUmZSkpLHIrPTM7Y29udGludWV9fX1lbHNlIGlmKGlbcl08MjQ4JiZzLl9jaGVja0NvbnRpbnVhdGlvbihpLHIsMykpe2xldCBlPSg3Jmlbcl0pPDwxOHwoNjMmaVtyKzFdKTw8MTJ8KDYzJmlbcisyXSk8PDZ8NjMmaVtyKzNdO2lmKGU+NjU1MzYmJmU8MTExNDExMil7ZS09NjU1MzYsdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoZT4+PjEwfDU1Mjk2KSksdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoMTAyMyZlfDU2MzIwKSkscis9NDtjb250aW51ZX19dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoNjU1MzMpKSwrK3J9cmV0dXJuIHQuam9pbihcIlwiKX1zdGF0aWMgX2NoZWNrQ29udGludWF0aW9uKGUsdCxpKXtsZXQgcz1lO2lmKHQraTxzLmxlbmd0aCl7Zm9yKDtpLS07KWlmKDEyOCE9KDE5MiZzWysrdF0pKXJldHVybiExO3JldHVybiEwfXJldHVybiExfX10LmRlZmF1bHQ9c30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NsYXNzIHN7Y29uc3RydWN0b3IoZSl7bGV0IHQ9cy5nZXREZWZhdWx0SW5mKCk7aWYoIWV8fFwiW29iamVjdCBPYmplY3RdXCIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpcmV0dXJuIHQ7bGV0IGk9T2JqZWN0LmFzc2lnbih7fSx0LGUpO09iamVjdC5lbnRyaWVzKGkpLmZvckVhY2goKFtlLHRdKT0+e3RoaXNbZV09dH0pfXN0YXRpYyBnZXREZWZhdWx0SW5mKCl7cmV0dXJue2R0czpudWxsLHB0czpudWxsLGR1cmF0aW9uOm51bGwscG9zaXRpb246bnVsbCxpc1JBUDohMSxvcmlnaW5EdHM6bnVsbH19fXQuZGVmYXVsdD1zfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5zdGFydER0cz0tMSx0aGlzLmVuZER0cz0tMSx0aGlzLnN0YXJ0UHRzPS0xLHRoaXMuZW5kUHRzPS0xLHRoaXMub3JpZ2luU3RhcnREdHM9LTEsdGhpcy5vcmlnaW5FbmREdHM9LTEsdGhpcy5yYW5kb21BY2Nlc3NQb2ludHM9W10sdGhpcy5maXJzdFNhbXBsZT1udWxsLHRoaXMubGFzdFNhbXBsZT1udWxsfWFkZFJBUChlKXtlLmlzUkFQPSEwLHRoaXMucmFuZG9tQWNjZXNzUG9pbnRzLnB1c2goZSl9fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3QuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3RvcihlKXt0aGlzLl90eXBlPWUsdGhpcy5fbGlzdD1bXSx0aGlzLl9sYXN0QXBwZW5kTG9jYXRpb249LTF9Z2V0IHR5cGUoKXtyZXR1cm4gdGhpcy5fdHlwZX1nZXQgbGVuZ3RoKCl7cmV0dXJuIHRoaXMuX2xpc3QubGVuZ3RofWlzRW1wdHkoKXtyZXR1cm4gMD09PXRoaXMuX2xpc3QubGVuZ3RofWNsZWFyKCl7dGhpcy5fbGlzdD1bXSx0aGlzLl9sYXN0QXBwZW5kTG9jYXRpb249LTF9X3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKGUpe2xldCB0PXRoaXMuX2xpc3Q7aWYoMD09PXQubGVuZ3RoKXJldHVybi0yO2xldCBpPXQubGVuZ3RoLTEscz0wLHI9MCxhPWksbj0wO2lmKGU8dFswXS5vcmlnaW5EdHMpcmV0dXJuIG49LTE7Zm9yKDtyPD1hOyl7aWYoKHM9citNYXRoLmZsb29yKChhLXIpLzIpKT09PWl8fGU+dFtzXS5sYXN0U2FtcGxlLm9yaWdpbkR0cyYmZTx0W3MrMV0ub3JpZ2luRHRzKXtuPXM7YnJlYWt9dFtzXS5vcmlnaW5EdHM8ZT9yPXMrMTphPXMtMX1yZXR1cm4gbn1fc2VhcmNoTmVhcmVzdFNlZ21lbnRBZnRlcihlKXtyZXR1cm4gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoZSkrMX1hcHBlbmQoZSl7bGV0IHQ9dGhpcy5fbGlzdCxpPXRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbixzPTA7LTEhPT1pJiZpPHQubGVuZ3RoJiZlLm9yaWdpblN0YXJ0RHRzPj10W2ldLmxhc3RTYW1wbGUub3JpZ2luRHRzJiYoaT09PXQubGVuZ3RoLTF8fGk8dC5sZW5ndGgtMSYmZS5vcmlnaW5TdGFydER0czx0W2krMV0ub3JpZ2luU3RhcnREdHMpP3M9aSsxOnQubGVuZ3RoPjAmJihzPXRoaXMuX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKGUub3JpZ2luU3RhcnREdHMpKzEpLHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbj1zLHRoaXMuX2xpc3Quc3BsaWNlKHMsMCxlKX1nZXRMYXN0U2VnbWVudEJlZm9yZShlKXtsZXQgdD10aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShlKTtyZXR1cm4gdD49MD90aGlzLl9saXN0W3RdOm51bGx9Z2V0TGFzdFNhbXBsZUJlZm9yZShlKXtsZXQgdD10aGlzLmdldExhc3RTZWdtZW50QmVmb3JlKGUpO3JldHVybiBudWxsIT09dD90Lmxhc3RTYW1wbGU6bnVsbH1nZXRMYXN0UkFQQmVmb3JlKGUpe2xldCB0PXRoaXMuX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKGUpLGk9dGhpcy5fbGlzdFt0XS5yYW5kb21BY2Nlc3NQb2ludHM7Zm9yKDswPT09aS5sZW5ndGgmJnQ+MDspdC0tLGk9dGhpcy5fbGlzdFt0XS5yYW5kb21BY2Nlc3NQb2ludHM7cmV0dXJuIGkubGVuZ3RoPjA/aVtpLmxlbmd0aC0xXTpudWxsfX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjbGFzcyBze2NvbnN0cnVjdG9yKGUpe3RoaXMuY29uZmlncz1PYmplY3QuYXNzaWduKHt9LGUpLHRoaXMuY29udGFpbmVyPXRoaXMuY29uZmlncy5jb250YWluZXIsdGhpcy5tZWRpYVNvdXJjZT1udWxsLHRoaXMuc291cmNlQnVmZmVycz17fSx0aGlzLnByZWxvYWRUaW1lPXRoaXMuY29uZmlncy5wcmVsb2FkVGltZXx8MSx0aGlzLm9uU291cmNlT3Blbj10aGlzLm9uU291cmNlT3Blbi5iaW5kKHRoaXMpLHRoaXMub25UaW1lVXBkYXRlPXRoaXMub25UaW1lVXBkYXRlLmJpbmQodGhpcyksdGhpcy5vblVwZGF0ZUVuZD10aGlzLm9uVXBkYXRlRW5kLmJpbmQodGhpcyksdGhpcy5vbldhaXRpbmc9dGhpcy5vbldhaXRpbmcuYmluZCh0aGlzKX1pbml0KCl7dGhpcy5tZWRpYVNvdXJjZT1uZXcgc2VsZi5NZWRpYVNvdXJjZSx0aGlzLm1lZGlhU291cmNlLmFkZEV2ZW50TGlzdGVuZXIoXCJzb3VyY2VvcGVuXCIsdGhpcy5vblNvdXJjZU9wZW4pLHRoaXMuY29udGFpbmVyLnNyYz1VUkwuY3JlYXRlT2JqZWN0VVJMKHRoaXMubWVkaWFTb3VyY2UpLHRoaXMudXJsPXRoaXMuY29udGFpbmVyLnNyYyx0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwidGltZXVwZGF0ZVwiLHRoaXMub25UaW1lVXBkYXRlKSx0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwid2FpdGluZ1wiLHRoaXMub25XYWl0aW5nKX1vblRpbWVVcGRhdGUoKXt0aGlzLmVtaXQoXCJUSU1FX1VQREFURVwiLHRoaXMuY29udGFpbmVyKX1vbldhaXRpbmcoKXt0aGlzLmVtaXQoXCJXQUlUSU5HXCIsdGhpcy5jb250YWluZXIpfW9uU291cmNlT3Blbigpe3RoaXMuYWRkU291cmNlQnVmZmVycygpfW9uVXBkYXRlRW5kKCl7dGhpcy5lbWl0KFwiU09VUkNFX1VQREFURV9FTkRcIiksdGhpcy5kb0FwcGVuZCgpfWFkZFNvdXJjZUJ1ZmZlcnMoKXtpZihcIm9wZW5cIiE9PXRoaXMubWVkaWFTb3VyY2UucmVhZHlTdGF0ZSlyZXR1cm47bGV0IGUsdD10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiUFJFX1NPVVJDRV9CVUZGRVJcIiksaT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiVFJBQ0tTXCIpO3Q9dC5zb3VyY2VzO2xldCBzPSExO2ZvcihsZXQgcj0wLGE9T2JqZWN0LmtleXModCkubGVuZ3RoO3I8YTtyKyspe2xldCBhPU9iamVjdC5rZXlzKHQpW3JdO2lmKFwiYXVkaW9cIj09PWE/ZT1pLmF1ZGlvVHJhY2s6XCJ2aWRlb1wiPT09YSYmKGU9aS52aWRlb1RyYWNrKSxlKXtsZXQgaT1cImF1ZGlvXCI9PT1hPzIxOjQwO2UubWV0YSYmZS5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uJiYoaT1lLm1ldGEucmVmU2FtcGxlRHVyYXRpb24pLHRbYV0uZGF0YS5sZW5ndGg+PXRoaXMucHJlbG9hZFRpbWUvaSYmKHM9ITApfX1pZihzKXtpZihPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpLmxlbmd0aD4wKXJldHVybjtmb3IobGV0IGU9MCxpPU9iamVjdC5rZXlzKHQpLmxlbmd0aDtlPGk7ZSsrKXtsZXQgaT1PYmplY3Qua2V5cyh0KVtlXSxzPXRbaV0scj1cInZpZGVvXCI9PT1pP1widmlkZW8vbXA0O2NvZGVjcz1cIitzLm1pbWV0eXBlOlwiYXVkaW8vbXA0O2NvZGVjcz1cIitzLm1pbWV0eXBlLGE9dGhpcy5tZWRpYVNvdXJjZS5hZGRTb3VyY2VCdWZmZXIocik7dGhpcy5zb3VyY2VCdWZmZXJzW2ldPWEsYS5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlZW5kXCIsdGhpcy5vblVwZGF0ZUVuZCksdGhpcy5kb0FwcGVuZCgpfX19ZG9BcHBlbmQoKXtsZXQgZT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiUFJFX1NPVVJDRV9CVUZGRVJcIik7aWYoZSlmb3IobGV0IHQ9MDt0PE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoO3QrKyl7bGV0IGk9T2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVt0XSxzPXRoaXMuc291cmNlQnVmZmVyc1tpXTtpZighcy51cGRhdGluZyl7bGV0IHQ9ZS5zb3VyY2VzW2ldO2lmKHQmJiF0LmluaXRlZClzLmFwcGVuZEJ1ZmZlcih0LmluaXQuYnVmZmVyLmJ1ZmZlciksdC5pbml0ZWQ9ITA7ZWxzZSBpZih0KXtsZXQgZT10LmRhdGEuc2hpZnQoKTtlJiZzLmFwcGVuZEJ1ZmZlcihlLmJ1ZmZlci5idWZmZXIpfX19fWVuZE9mU3RyZWFtKCl7Y29uc3R7cmVhZHlTdGF0ZTplLGFjdGl2ZVNvdXJjZUJ1ZmZlcnM6dH09dGhpcy5tZWRpYVNvdXJjZTtpZihcIm9wZW5cIj09PWUmJjA9PT10Lmxlbmd0aCl0cnl7dGhpcy5tZWRpYVNvdXJjZS5lbmRPZlN0cmVhbSgpfWNhdGNoKGUpe319cmVtb3ZlKGUsdD0wKXtmb3IobGV0IGk9MDtpPE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoO2krKyl7bGV0IHM9dGhpcy5zb3VyY2VCdWZmZXJzW09iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1dO3MudXBkYXRpbmd8fHMucmVtb3ZlKHQsZSl9fXJlbW92ZUJ1ZmZlcnMoKXtjb25zdCBlPVtdO2ZvcihsZXQgdD0wO3Q8T2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg7dCsrKXtsZXQgaSxyPXRoaXMuc291cmNlQnVmZmVyc1tPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpW3RdXTtyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVlbmRcIix0aGlzLm9uVXBkYXRlRW5kKSxyLnVwZGF0aW5nP2k9bmV3IFByb21pc2UoZT0+e2NvbnN0IHQ9ZnVuY3Rpb24oKXtsZXQgaT0zO2NvbnN0IGE9KCk9PntyLnVwZGF0aW5nP2k+MD8oc2V0VGltZW91dChhLDIwMCksaS0tKTplKCk6KHMuY2xlYXJCdWZmZXIociksZSgpKX07c2V0VGltZW91dChhLDIwMCksci5yZW1vdmVFdmVudExpc3RlbmVyKFwidXBkYXRlZW5kXCIsdCl9O3IuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZWVuZFwiLHQpfSk6KHMuY2xlYXJCdWZmZXIociksaT1Qcm9taXNlLnJlc29sdmUoKSksZS5wdXNoKGkpfXJldHVybiBQcm9taXNlLmFsbChlKX1kZXN0cm95KCl7cmV0dXJuIHRoaXMucmVtb3ZlQnVmZmVycygpLnRoZW4oKCk9Pntmb3IobGV0IGU9MDtlPE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoO2UrKyl7bGV0IHQ9dGhpcy5zb3VyY2VCdWZmZXJzW09iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbZV1dO3RoaXMubWVkaWFTb3VyY2UucmVtb3ZlU291cmNlQnVmZmVyKHQpLGRlbGV0ZSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtlXV19dGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRpbWV1cGRhdGVcIix0aGlzLm9uVGltZVVwZGF0ZSksdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndhaXRpbmdcIix0aGlzLm9uV2FpdGluZyksdGhpcy5tZWRpYVNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKFwic291cmNlb3BlblwiLHRoaXMub25Tb3VyY2VPcGVuKSx0aGlzLmVuZE9mU3RyZWFtKCksd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodGhpcy51cmwpLHRoaXMudXJsPW51bGwsdGhpcy5jb25maWdzPXt9LHRoaXMuY29udGFpbmVyPW51bGwsdGhpcy5tZWRpYVNvdXJjZT1udWxsLHRoaXMuc291cmNlQnVmZmVycz17fSx0aGlzLnByZWxvYWRUaW1lPTF9KX1zdGF0aWMgY2xlYXJCdWZmZXIoZSl7Y29uc3QgdD1lLmJ1ZmZlcmVkO2xldCBpPS4xO2ZvcihsZXQgZT0wLHM9dC5sZW5ndGg7ZTxzO2UrKylpPXQuZW5kKGUpO3RyeXtlLnJlbW92ZSgwLGkpfWNhdGNoKGUpe319fXQuZGVmYXVsdD1zfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y2xhc3Mgc3tjb25zdHJ1Y3RvcihlKXtpZighKGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpdGhyb3cgbmV3IEVycm9yKFwiZGF0YSBpcyBpbnZhbGlkXCIpO3RoaXMuYnVmZmVyPWUsdGhpcy5kYXRhdmlldz1uZXcgRGF0YVZpZXcoZSksdGhpcy5kYXRhdmlldy5wb3NpdGlvbj0wfWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aH1zZXQgcG9zaXRpb24oZSl7dGhpcy5kYXRhdmlldy5wb3NpdGlvbj1lfWdldCBwb3NpdGlvbigpe3JldHVybiB0aGlzLmRhdGF2aWV3LnBvc2l0aW9ufWJhY2soZSl7dGhpcy5wb3NpdGlvbi09ZX1za2lwKGUpe2xldCB0PU1hdGguZmxvb3IoZS80KSxpPWUlNDtmb3IobGV0IGU9MDtlPHQ7ZSsrKXMucmVhZEJ5dGUodGhpcy5kYXRhdmlldyw0KTtpPjAmJnMucmVhZEJ5dGUodGhpcy5kYXRhdmlldyxpKX1zdGF0aWMgcmVhZEJ5dGUoZSx0LGkpe2xldCBzO3N3aXRjaCh0KXtjYXNlIDE6cz1pP2UuZ2V0SW50OChlLnBvc2l0aW9uKTplLmdldFVpbnQ4KGUucG9zaXRpb24pO2JyZWFrO2Nhc2UgMjpzPWk/ZS5nZXRJbnQxNihlLnBvc2l0aW9uKTplLmdldFVpbnQxNihlLnBvc2l0aW9uKTticmVhaztjYXNlIDM6aWYoaSl0aHJvdyBuZXcgRXJyb3IoXCJub3Qgc3VwcG9ydGVkIGZvciByZWFkQnl0ZSAzXCIpO3M9ZS5nZXRVaW50OChlLnBvc2l0aW9uKTw8MTYsc3w9ZS5nZXRVaW50OChlLnBvc2l0aW9uKzEpPDw4LHN8PWUuZ2V0VWludDgoZS5wb3NpdGlvbisyKTticmVhaztjYXNlIDQ6cz1pP2UuZ2V0SW50MzIoZS5wb3NpdGlvbik6ZS5nZXRVaW50MzIoZS5wb3NpdGlvbik7YnJlYWs7Y2FzZSA4OmlmKGkpdGhyb3cgbmV3IEVycm9yKFwibm90IHN1cHBvcnRlZCBmb3IgcmVhZEJvZHkgOFwiKTtzPWUuZ2V0VWludDMyKGUucG9zaXRpb24pPDwzMixzfD1lLmdldFVpbnQzMihlLnBvc2l0aW9uKzQpO2JyZWFrO2RlZmF1bHQ6cz1cIlwifXJldHVybiBlLnBvc2l0aW9uKz10LHN9cmVhZFVpbnQ4KCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldywxKX1yZWFkVWludDE2KCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldywyKX1yZWFkVWludDI0KCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldywzKX1yZWFkVWludDMyKCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldyw0KX1yZWFkVWludDY0KCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldyw4KX1yZWFkSW50OCgpe3JldHVybiBzLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsMSwhMCl9cmVhZEludDE2KCl7cmV0dXJuIHMucmVhZEJ5dGUodGhpcy5kYXRhdmlldywyLCEwKX1yZWFkSW50MzIoKXtyZXR1cm4gcy5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LDQsITApfXdyaXRlVWludDMyKGUpe3JldHVybiBuZXcgVWludDhBcnJheShbZT4+PjI0JjI1NSxlPj4+MTYmMjU1LGU+Pj44JjI1NSwyNTUmZV0pfX10LmRlZmF1bHQ9c30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzLHI9aSgyNSksYT0ocz1yKSYmcy5fX2VzTW9kdWxlP3M6e2RlZmF1bHQ6c307dC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMuYnVmZmVyPWV8fG5ldyBVaW50OEFycmF5KDApfXdyaXRlKC4uLmUpe2UuZm9yRWFjaChlPT57dGhpcy5idWZmZXI9KDAsYS5kZWZhdWx0KShVaW50OEFycmF5LHRoaXMuYnVmZmVyLGUpfSl9c3RhdGljIHdyaXRlVWludDMyKGUpe3JldHVybiBuZXcgVWludDhBcnJheShbZT4+MjQsZT4+MTYmMjU1LGU+PjgmMjU1LDI1NSZlXSl9c3RhdGljIHJlYWRBc0ludChlKXtsZXQgdD1cIlwiO3JldHVybiBlLmZvckVhY2goZT0+e3QrPWZ1bmN0aW9uKGUpe3JldHVybiBlLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLFwiMFwiKX0oZSl9KSxwYXJzZUludCh0LDE2KX19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHMscj1pKDI2KSxhPShzPXIpJiZzLl9fZXNNb2R1bGU/czp7ZGVmYXVsdDpzfTtlLmV4cG9ydHM9YS5kZWZhdWx0fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLGk9YXJndW1lbnRzLmxlbmd0aCxzPUFycmF5KGk+MT9pLTE6MCkscj0xO3I8aTtyKyspc1tyLTFdPWFyZ3VtZW50c1tyXTt2YXIgYT0hMCxuPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIGQsbD1zW1N5bWJvbC5pdGVyYXRvcl0oKTshKGE9KGQ9bC5uZXh0KCkpLmRvbmUpO2E9ITApe3ZhciBoPWQudmFsdWU7dCs9aC5sZW5ndGh9fWNhdGNoKGUpe249ITAsbz1lfWZpbmFsbHl7dHJ5eyFhJiZsLnJldHVybiYmbC5yZXR1cm4oKX1maW5hbGx5e2lmKG4pdGhyb3cgb319dmFyIHU9bmV3IGUodCksYz0wLGY9ITAscD0hMSxtPXZvaWQgMDt0cnl7Zm9yKHZhciBnLF89c1tTeW1ib2wuaXRlcmF0b3JdKCk7IShmPShnPV8ubmV4dCgpKS5kb25lKTtmPSEwKXt2YXIgeT1nLnZhbHVlO3Uuc2V0KHksYyksYys9eS5sZW5ndGh9fWNhdGNoKGUpe3A9ITAsbT1lfWZpbmFsbHl7dHJ5eyFmJiZfLnJldHVybiYmXy5yZXR1cm4oKX1maW5hbGx5e2lmKHApdGhyb3cgbX19cmV0dXJuIHV9fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHMscj1pKDQpO2NvbnN0IGE9KChzPXIpJiZzLl9fZXNNb2R1bGU/czp7ZGVmYXVsdDpzfSkuZGVmYXVsdC5DUllUT19FVkVOVFM7dC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMuaW5wdXRCdWZmZXI9ZS5pbnB1dGJ1ZmZlcix0aGlzLm91dHB1dEJ1ZmZlcj1lLm91dHB1dGJ1ZmZlcix0aGlzLmtleT1lLmtleSx0aGlzLml2PWUuaXYsdGhpcy5tZXRob2Q9ZS5tZXRob2QsdGhpcy5jcnlwdG89d2luZG93LmNyeXB0b3x8d2luZG93Lm1zQ3J5cHRvfWluaXQoKXt0aGlzLm9uKGEuU1RBUlRfREVDUllQVCx0aGlzLmRlY3JpcHQuYmluZCh0aGlzKSl9ZGVjcmlwdCgpe2lmKHRoaXMuYWVza2V5KXRoaXMuZGVjcmlwdERhdGEoKTtlbHNle3RoaXMuY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXCJyYXdcIix0aGlzLmtleS5idWZmZXIse25hbWU6XCJBRVMtQ0JDXCJ9LCExLFtcImVuY3J5cHRcIixcImRlY3J5cHRcIl0pLnRoZW4oZT0+e3RoaXMuYWVza2V5PWUsdGhpcy5kZWNyaXB0RGF0YSgpfSl9fWRlY3JpcHREYXRhKCl7bGV0IGU9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmlucHV0QnVmZmVyKSx0PXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5vdXRwdXRCdWZmZXIpLGk9ZS5zaGlmdCgpO2kmJnRoaXMuY3J5cHRvLnN1YnRsZS5kZWNyeXB0KHtuYW1lOlwiQUVTLUNCQ1wiLGl2OnRoaXMuaXYuYnVmZmVyfSx0aGlzLmFlc2tleSxpKS50aGVuKGU9Pnt0LnB1c2gobmV3IFVpbnQ4QXJyYXkoZSkpLHRoaXMuZW1pdChhLkRFQ1JZUFRFRCksdGhpcy5kZWNyaXB0RGF0YShpKX0pfX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1oKGkoMjkpKSxyPWgoaSgzNikpLGE9aSgzOSksbj1pKDkpLG89aSgwKSxkPWkoNyksbD1oKGkoMikpO2Z1bmN0aW9uIGgoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWNvbnN0IHU9by5FVkVOVFMuUkVNVVhfRVZFTlRTLGM9by5FVkVOVFMuREVNVVhfRVZFTlRTLGY9by5FVkVOVFMuTE9BREVSX0VWRU5UUyxwPVwiRkxWQ29udHJvbGxlclwiO2NsYXNzIG17d2Fybigpe319Y29uc3QgZz1cIkZMVl9FUlJPUlwiO2NsYXNzIF97Y29uc3RydWN0b3IoZSl7dGhpcy5UQUc9cCx0aGlzLl9wbGF5ZXI9ZSx0aGlzLnN0YXRlPXtpbml0U2VnbWVudEFycml2ZWQ6ITEscmFuZ2U6e3N0YXJ0OjAsZW5kOlwiXCJ9LHJhbmdlU3VwcG9ydDohMH19c3RhdGljIGZpbmRGaWxlUG9zaXRpb24oZSx0KXtmb3IobGV0IGk9MCxzPXQudGltZXMubGVuZ3RoO2k8cztpKyspe2NvbnN0IHI9dC50aW1lc1tpXSxhPWkrMTxzP3QudGltZXNbaSsxXTpOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtpZihyPD1lJiZlPD1hKXJldHVybiB0LmZpbGVwb3NpdGlvbnNbaV19cmV0dXJuXCJcIn1pbml0KCl7dGhpcy5fY29udGV4dC5yZWdpc3RyeShcIkZFVENIX0xPQURFUlwiLGEuRmV0Y2hMb2FkZXIpLHRoaXMuX2NvbnRleHQucmVnaXN0cnkoXCJMT0FERVJfQlVGRkVSXCIsbi5YZ0J1ZmZlciksdGhpcy5fY29udGV4dC5yZWdpc3RyeShcIkZMVl9ERU1VWEVSXCIscy5kZWZhdWx0KSx0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KFwiVFJBQ0tTXCIsbi5UcmFja3MpLHRoaXMuX2NvbnRleHQucmVnaXN0cnkoXCJNUDRfUkVNVVhFUlwiLHIuZGVmYXVsdC5NcDRSZW11eGVyKSx0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KFwiUFJFX1NPVVJDRV9CVUZGRVJcIixuLlByZVNvdXJjZSksdGhpcy5fY29udGV4dC5yZWdpc3RyeShcIkNPTVBBVElCSUxJVFlcIixkLkNvbXBhdGliaWxpdHkpLHRoaXMuX2NvbnRleHQucmVnaXN0cnkoXCJMT0dHRVJcIixtKSx0aGlzLm1zZT10aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KFwiTVNFXCIsby5Nc2UpKHtjb250YWluZXI6dGhpcy5fcGxheWVyLnZpZGVvfSksdGhpcy5pbml0TGlzdGVuZXJzKCksc2V0VGltZW91dCgoKT0+e3RoaXMubG9hZE1ldGEoKX0sMCl9aW5pdExpc3RlbmVycygpe3RoaXMub24oZi5MT0FERVJfREFUQUxPQURFRCx0aGlzLl9oYW5kbGVMb2FkZXJEYXRhTG9hZGVkLmJpbmQodGhpcykpLHRoaXMub24oZi5MT0FERVJfRVJST1IsdGhpcy5faGFuZGxlTmV0d29ya0Vycm9yLmJpbmQodGhpcykpLHRoaXMub24oYy5NRURJQV9JTkZPLHRoaXMuX2hhbmRsZU1lZGlhSW5mby5iaW5kKHRoaXMpKSx0aGlzLm9uKGMuTUVUQURBVEFfUEFSU0VELHRoaXMuX2hhbmRsZU1ldGFkYXRhUGFyc2VkLmJpbmQodGhpcykpLHRoaXMub24oYy5ERU1VWF9DT01QTEVURSx0aGlzLl9oYW5kbGVEZW11eENvbXBsZXRlLmJpbmQodGhpcykpLHRoaXMub24oYy5ERU1VWF9FUlJPUix0aGlzLl9oYW5kbGVEZW11eEVycm9yLmJpbmQodGhpcykpLHRoaXMub24odS5JTklUX1NFR01FTlQsdGhpcy5faGFuZGxlQXBwZW5kSW5pdFNlZ21lbnQuYmluZCh0aGlzKSksdGhpcy5vbih1Lk1FRElBX1NFR01FTlQsdGhpcy5faGFuZGxlTWVkaWFTZWdtZW50LmJpbmQodGhpcykpfV9oYW5kbGVNZWRpYUluZm8oKXt0aGlzLl9jb250ZXh0Lm9uTWV0YURhdGF8fHRoaXMuZW1pdChjLkRFTVVYX0VSUk9SLG5ldyBFcnJvcihcImZhaWxlZCB0byBnZXQgbWVkaWFpbmZvXCIpKTtjb25zdCBlPXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJMT0FERVJfQlVGRkVSXCIpLHQ9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIkZFVENIX0xPQURFUlwiKTt0aGlzLmlzU2Vla2FibGUmJih0LmNhbmNlbCgpLHRoaXMuc3RhdGUucmFuZ2U9e3N0YXJ0OjAsZW5kOmUuaGlzdG9yeUxlbi0xfSxzZXRUaW1lb3V0KCgpPT57dGhpcy5sb2FkTmV4dCgwKX0pKX1faGFuZGxlTG9hZGVyRGF0YUxvYWRlZCgpe3RoaXMuZW1pdFRvKFwiRkxWX0RFTVVYRVJcIixjLkRFTVVYX1NUQVJUKX1faGFuZGxlTWV0YWRhdGFQYXJzZWQoZSl7dGhpcy5lbWl0KHUuUkVNVVhfTUVUQURBVEEsZSl9X2hhbmRsZURlbXV4Q29tcGxldGUoKXt0aGlzLmVtaXQodS5SRU1VWF9NRURJQSl9X2hhbmRsZUFwcGVuZEluaXRTZWdtZW50KCl7dGhpcy5zdGF0ZS5pbml0U2VnbWVudEFycml2ZWQ9ITAsdGhpcy5tc2UuYWRkU291cmNlQnVmZmVycygpfV9oYW5kbGVNZWRpYVNlZ21lbnQoKXt0aGlzLm1zZS5hZGRTb3VyY2VCdWZmZXJzKCksdGhpcy5tc2UuZG9BcHBlbmQoKX1faGFuZGxlTmV0d29ya0Vycm9yKGUsdCl7dGhpcy5fcGxheWVyLmVtaXQoXCJlcnJvclwiLG5ldyBsLmRlZmF1bHQuRXJyb3JzKFwibmV0d29ya1wiLHRoaXMuX3BsYXllci5jb25maWcudXJsKSksdGhpcy5fb25FcnJvcihmLkxPQURFUl9FUlJPUixlLHQsITApfV9oYW5kbGVEZW11eEVycm9yKGUsdCxpKXt2b2lkIDA9PT1pJiYoaT0hMSksdGhpcy5fcGxheWVyLmVtaXQoXCJlcnJvclwiLG5ldyBsLmRlZmF1bHQuRXJyb3JzKFwicGFyc2VcIix0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCkpLHRoaXMuX29uRXJyb3IoZi5MT0FERVJfRVJST1IsZSx0LGkpfV9vbkVycm9yKGUsdCxpLHMpe2xldCByPXtlcnJvclR5cGU6ZSxlcnJvckRldGFpbHM6YFske3R9XTogJHtpLm1lc3NhZ2V9YCxlcnJvckZhdGFsOnN8fCExfTt0aGlzLl9wbGF5ZXIuZW1pdChnLHIpfXNlZWsoZSl7aWYoIXRoaXMuX2NvbnRleHQub25NZXRhRGF0YSlyZXR1cm4gdm9pZCB0aGlzLmxvYWRNZXRhKCk7aWYoIXRoaXMuaXNTZWVrYWJsZSlyZXR1cm47dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIkxPQURFUl9CVUZGRVJcIikuY2xlYXIoKTtjb25zdHtwcmVsb2FkVGltZTp0PTE1fT10aGlzLl9wbGF5ZXIuY29uZmlnLGk9dGhpcy5nZXRTZWVrUmFuZ2UoZSx0KTt0aGlzLnN0YXRlLnJhbmdlPWksdGhpcy5jb21wYXQmJnRoaXMuY29tcGF0LnJlc2V0KCksdGhpcy5sb2FkRGF0YSgpfWxvYWROZXh0KGUpe3RoaXMuX2NvbnRleHQub25NZXRhRGF0YSYmKHRoaXMubG9hZGVyLmxvYWRpbmd8fHRoaXMuZ2V0TmV4dFJhbmdlKGUpJiZ0aGlzLmxvYWREYXRhKCkpfWxvYWREYXRhKCl7Y29uc3R7c3RhcnQ6ZSxlbmQ6dH09dGhpcy5zdGF0ZS5yYW5nZTt0aGlzLmVtaXQoZi5MQURFUl9TVEFSVCx0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCx7aGVhZGVyczp7bWV0aG9kOlwiZ2V0XCIsUmFuZ2U6YGJ5dGVzPSR7ZX0tJHt0fWB9fSl9bG9hZE1ldGEoKXt0aGlzLmxvYWRlci5sb2FkKHRoaXMuX3BsYXllci5jb25maWcudXJsLHtoZWFkZXJzOntSYW5nZTpcImJ5dGVzPTAtXCJ9fSkuY2F0Y2goKCk9Pnt0aGlzLnN0YXRlLnJhbmdlU3VwcG9ydD0hMSx0aGlzLmxvYWRGYWxsYmFjaygpfSl9bG9hZEZhbGxiYWNrKCl7dGhpcy5sb2FkZXIubG9hZCh0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCkuY2F0Y2goKCk9Pnt0aGlzLl9wbGF5ZXIuZW1pdChcImVycm9yXCIsbmV3IGwuZGVmYXVsdC5FcnJvcnMoXCJuZXR3b3JrXCIsdGhpcy5fcGxheWVyLmNvbmZpZy51cmwpKX0pfWdldFNlZWtSYW5nZShlLHQpe2NvbnN0e2tleWZyYW1lczppfT10aGlzLl9jb250ZXh0Lm9uTWV0YURhdGEscz10aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5kdXJhdGlvbixyPWUsYT1lK3Qsbj1fLmZpbmRGaWxlUG9zaXRpb24ocixpKTtyZXR1cm4gYT49c3x8cj49cz97c3RhcnQ6bixlbmQ6XCJcIn06e3N0YXJ0Om4sZW5kOl8uZmluZEZpbGVQb3NpdGlvbihhLGkpfX1nZXROZXh0UmFuZ2UoZSl7aWYoXCJcIj09PXRoaXMuc3RhdGUucmFuZ2UuZW5kKXJldHVybjtjb25zdHtlbmQ6dH09dGhpcy5nZXRTZWVrUmFuZ2UoZSx0aGlzLmNvbmZpZy5wcmVsb2FkVGltZXx8MTUpO3JldHVybiB0PD10aGlzLnN0YXRlLnJhbmdlLmVuZCYmXCJcIiE9PXQ/dm9pZCAwOih0aGlzLnN0YXRlLnJhbmdlPXtzdGFydDp0aGlzLnN0YXRlLnJhbmdlLmVuZCsxLGVuZDp0fSwhMCl9ZGVzdHJveSgpe3RoaXMuX3BsYXllcj1udWxsLHRoaXMubXNlPW51bGwsdGhpcy5zdGF0ZT17aW5pdFNlZ21lbnRBcnJpdmVkOiExLHJhbmdlOntzdGFydDowLGVuZDpcIlwifSxyYW5nZVN1cHBvcnQ6ITB9fWdldCBpc1NlZWthYmxlKCl7cmV0dXJuISF0aGlzLnN0YXRlLnJhbmdlU3VwcG9ydCYmKCF0aGlzLl9jb250ZXh0fHwhdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaXNDb21wbGV0ZSgpfHxudWxsIT09dGhpcy5fY29udGV4dC5tZWRpYUluZm8ua2V5ZnJhbWVzJiZ2b2lkIDAhPT10aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5rZXlmcmFtZXMpfWdldCBjb25maWcoKXtyZXR1cm4gdGhpcy5fcGxheWVyLmNvbmZpZ31nZXQgbG9hZGVyKCl7cmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJGRVRDSF9MT0FERVJcIil9Z2V0IGNvbXBhdCgpe3JldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiQ09NUEFUSUJJTElUWVwiKX19dC5kZWZhdWx0PV99LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcyxyPWkoMCksYT1pKDcpLG49aSg5KSxvPWkoMzUpLGQ9KHM9bykmJnMuX19lc01vZHVsZT9zOntkZWZhdWx0OnN9O2NvbnN0IGw9ci5FVkVOVFMuREVNVVhfRVZFTlRTO2NsYXNzIGh7Y29uc3RydWN0b3IoKXt0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkPSExLHRoaXMuX3RyYWNrTnVtPTAsdGhpcy5faGFzU2NyaXB0PSExfWluaXQoKXt0aGlzLm9uKGwuREVNVVhfU1RBUlQsdGhpcy5kb1BhcnNlRmx2LmJpbmQodGhpcykpfXN0YXRpYyBpc0ZsdkZpbGUoZSl7cmV0dXJuISg3MCE9PWVbMF18fDc2IT09ZVsxXXx8ODYhPT1lWzJdfHwxIT09ZVszXSl9c3RhdGljIGdldFBsYXlUeXBlKGUpe2NvbnN0IHQ9e2hhc1ZpZGVvOiExLGhhc0F1ZGlvOiExfTtyZXR1cm4hMCZlJiYodC5oYXNWaWRlbz0hMCksITAmZSYmKHQuaGFzQXVkaW89ITApLHR9ZG9QYXJzZUZsdigpe2lmKHRoaXMuX2ZpcnN0RnJhZ21lbnRMb2FkZWQpe2lmKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aDwxMSlyZXR1cm47bGV0IGUsdD0xZTU7ZG97ZT10aGlzLl9wYXJzZUZsdlRhZygpfXdoaWxlKGUmJnQtLSA+MCk7dGhpcy5lbWl0KGwuREVNVVhfQ09NUExFVEUpfWVsc2V7aWYodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoPDEzKXJldHVybjtjb25zdCBlPXRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEzKTt0aGlzLnBhcnNlRmx2SGVhZGVyKGUpLHRoaXMuZG9QYXJzZUZsdigpfX1wYXJzZUZsdkhlYWRlcihlKXtpZihoLmlzRmx2RmlsZShlKSl7dGhpcy5fZmlyc3RGcmFnbWVudExvYWRlZD0hMDtjb25zdCB0PWguZ2V0UGxheVR5cGUoZVs0XSk7dC5oYXNWaWRlbyYmdGhpcy5pbml0VmlkZW9UcmFjaygpLHQuaGFzQXVkaW8mJnRoaXMuaW5pdEF1ZGlvVHJhY2soKX1lbHNlIHRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLG5ldyBFcnJvcihcImludmFsaWQgZmx2IGZpbGVcIikpLHRoaXMuZG9QYXJzZUZsdigpO3RoaXMuZG9QYXJzZUZsdigpfWluaXRWaWRlb1RyYWNrKCl7dGhpcy5fdHJhY2tOdW0rKztsZXQgZT1uZXcgbi5WaWRlb1RyYWNrO2UubWV0YT1uZXcgci5WaWRlb1RyYWNrTWV0YSxlLmlkPWUubWV0YS5pZD10aGlzLl90cmFja051bSx0aGlzLnRyYWNrcy52aWRlb1RyYWNrPWV9aW5pdEF1ZGlvVHJhY2soKXt0aGlzLl90cmFja051bSsrO2xldCBlPW5ldyBuLkF1ZGlvVHJhY2s7ZS5tZXRhPW5ldyByLkF1ZGlvVHJhY2tNZXRhLGUuaWQ9ZS5tZXRhLmlkPXRoaXMuX3RyYWNrTnVtLHRoaXMudHJhY2tzLmF1ZGlvVHJhY2s9ZX1fcGFyc2VGbHZUYWcoKXtpZih0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGg8MTEpcmV0dXJuIG51bGw7bGV0IGU9dGhpcy5fcGFyc2VGbHZUYWdIZWFkZXIoKTtyZXR1cm4gZSYmdGhpcy5fcHJvY2Vzc0NodW5rKGUpLGV9X3BhcnNlRmx2VGFnSGVhZGVyKCl7bGV0IGU9MCx0PXt9LGk9dGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoZSwxKTtpZihlKz0xLHQuZmlsdGVyZWQ9KDMyJmkpPj4+NSx0LnRhZ1R5cGU9MzEmaSx0LmRhdGFzaXplPXRoaXMubG9hZGVyQnVmZmVyLnRvSW50KGUsMyksZSs9Myw4IT09dC50YWdUeXBlJiY5IT09dC50YWdUeXBlJiYxMSE9PXQudGFnVHlwZSYmMTghPT10LnRhZ1R5cGV8fDAhPT10aGlzLmxvYWRlckJ1ZmZlci50b0ludCg4LDMpKXJldHVybiB0aGlzLmxvYWRlckJ1ZmZlciYmdGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoPjAmJnRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpLHRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLHRoaXMuVEFHLG5ldyBFcnJvcihcInRhZ1R5cGUgXCIrdC50YWdUeXBlKSwhMSksbnVsbDtpZih0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGg8dC5kYXRhc2l6ZSsxNSlyZXR1cm4gbnVsbDt0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCg0KTtsZXQgcz10aGlzLmxvYWRlckJ1ZmZlci50b0ludCgwLDMpO3RoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDMpO2xldCByPXRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdO3JldHVybiByPjAmJihzKz0xNjc3NzIxNipyKSx0LmR0cz1zLHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDMpLHR9X3Byb2Nlc3NDaHVuayhlKXtzd2l0Y2goZS50YWdUeXBlKXtjYXNlIDE4OnRoaXMuX3BhcnNlU2NyaXB0RGF0YShlKTticmVhaztjYXNlIDg6dGhpcy5fcGFyc2VBQUNEYXRhKGUpO2JyZWFrO2Nhc2UgOTp0aGlzLl9wYXJzZUhldmNEYXRhKGUpO2JyZWFrO2Nhc2UgMTE6dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMyk7YnJlYWs7ZGVmYXVsdDp0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKX19X3BhcnNlU2NyaXB0RGF0YShlKXtsZXQgdD10aGlzLnRyYWNrcy5hdWRpb1RyYWNrLGk9dGhpcy50cmFja3MudmlkZW9UcmFjayxzPXRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGUuZGF0YXNpemUpO2NvbnN0IHI9KG5ldyBkLmRlZmF1bHQpLnJlc29sdmUocyxzLmxlbmd0aCksYT10aGlzLl9jb250ZXh0Lm9uTWV0YURhdGE9cj9yLm9uTWV0YURhdGE6dm9pZCAwO2lmKHRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmR1cmF0aW9uPWEuZHVyYXRpb24sdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaGFzVmlkZW89YS5oYXNWaWRlbyx0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5oc2FBdWRpbz1hLmhhc0F1ZGlvLHRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGUuZGF0YXNpemUpJiYodGhpcy5lbWl0KGwuTUVESUFfSU5GTyksdGhpcy5faGFzU2NyaXB0PSEwKSx0JiYhdC5oYXNTcGVjaWZpY0NvbmZpZyl7bGV0IGU9dC5tZXRhO3N3aXRjaChhLmF1ZGlvc2FtcGxlcmF0ZSYmKGUuc2FtcGxlUmF0ZT1hLmF1ZGlvc2FtcGxlcmF0ZSksYS5hdWRpb2NoYW5uZWxzJiYoZS5jaGFubmVsQ291bnQ9YS5hdWRpb2NoYW5uZWxzKSxhLmF1ZGlvc2FtcGxlcmF0ZSl7Y2FzZSA0NDEwMDplLnNhbXBsZVJhdGVJbmRleD00O2JyZWFrO2Nhc2UgMjIwNTA6ZS5zYW1wbGVSYXRlSW5kZXg9NzticmVhaztjYXNlIDExMDI1OmUuc2FtcGxlUmF0ZUluZGV4PTEwfX1pZihpJiYhaS5oYXNTcGVjaWZpY0NvbmZpZyl7bGV0IGU9aS5tZXRhO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBhLmZyYW1lcmF0ZSl7bGV0IHQ9TWF0aC5mbG9vcigxZTMqYS5mcmFtZXJhdGUpO2lmKHQ+MCl7bGV0IGk9dC8xZTM7ZS5mcmFtZVJhdGV8fChlLmZyYW1lUmF0ZT17fSksZS5mcmFtZVJhdGUuZml4ZWQ9ITAsZS5mcmFtZVJhdGUuZnBzPWksZS5mcmFtZVJhdGUuZnBzX251bT10LGUuZnJhbWVSYXRlLmZwc19kZW49MWUzfX19fV9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlcihlKXtsZXQgdD17aGFzU3BlY2lmaWNDb25maWc6ITB9O3Qub2JqZWN0VHlwZT1lWzFdPj4+Myx0LnNhbXBsZVJhdGVJbmRleD0oNyZlWzFdKTw8MXxlWzJdPj4+Nyx0LmF1ZGlvc2FtcGxlcmF0ZT10aGlzLl9zd2l0Y2hBdWRpb1NhbXBsZVJhdGUodC5zYW1wbGVSYXRlSW5kZXgpLHQuY2hhbm5lbENvdW50PSgxMjAmZVsyXSk+Pj4zLHQuZnJhbWVMZW5ndGg9KDQmZVsyXSk+Pj4yLHQuZGVwZW5kc09uQ29yZUNvZGVyPSgyJmVbMl0pPj4+MSx0LmV4dGVuc2lvbkZsYWdJbmRleD0xJmVbMl0sdC5jb2RlYz1gbXA0YS40MC4ke3Qub2JqZWN0VHlwZX1gO2xldCBpLHMscj13aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLGE9dC5zYW1wbGVSYXRlSW5kZXg7cmV0dXJuLTEhPT1yLmluZGV4T2YoXCJmaXJlZm94XCIpP3Quc2FtcGxlUmF0ZUluZGV4Pj02Pyh0Lm9iamVjdFR5cGU9NSxzPW5ldyBBcnJheSg0KSxpPWEtMyk6KHQub2JqZWN0VHlwZT0yLHM9bmV3IEFycmF5KDIpLGk9YSk6LTEhPT1yLmluZGV4T2YoXCJhbmRyb2lkXCIpPyh0Lm9iamVjdFR5cGU9MixzPW5ldyBBcnJheSgyKSxpPWEpOih0Lm9iamVjdFR5cGU9NSxpPXQuc2FtcGxlUmF0ZUluZGV4LHM9bmV3IEFycmF5KDQpLHQuc2FtcGxlUmF0ZUluZGV4Pj02P2k9dC5zYW1wbGVSYXRlSW5kZXgtMzoxPT09dC5jaGFubmVsQ291bnQmJih0Lm9iamVjdFR5cGU9MixzPW5ldyBBcnJheSgyKSxpPXQuc2FtcGxlUmF0ZUluZGV4KSksc1swXT10Lm9iamVjdFR5cGU8PDMsc1swXXw9KDE1JnQuc2FtcGxlUmF0ZUluZGV4KT4+PjEsc1sxXT0oMTUmdC5zYW1wbGVSYXRlSW5kZXgpPDw3LHNbMV18PSgxNSZ0LmNoYW5uZWxDb3VudCk8PDMsNT09PXQub2JqZWN0VHlwZSYmKHNbMV18PSgxNSZpKT4+PjEsc1syXT0oMSZpKTw8NyxzWzJdfD04LHNbM109MCksdC5jb25maWc9cyx0fV9wYXJzZUFBQ0RhdGEoZSl7bGV0IHQ9dGhpcy50cmFja3MuYXVkaW9UcmFjaztpZighdClyZXR1cm47bGV0IGk9dC5tZXRhO2l8fCh0Lm1ldGE9bmV3IHIuQXVkaW9UcmFja01ldGEsaT10Lm1ldGEpO2xldCBzPXRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdO2UuZGF0YT10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdChlLmRhdGFzaXplLTEpO2xldCBhPSgyNDAmcyk+Pj40O3QuZm9ybWF0PWEsMTAhPT1hJiZ0aGlzLmVtaXQobC5ERU1VWF9FUlJPUixuZXcgRXJyb3IoYGludmFsaWQgYXVkaW8gZm9ybWF0OiAke2F9YCkpLDEwIT09YXx8dGhpcy5faGFzQXVkaW9TZXF1ZW5jZXx8KGkuc2FtcGxlUmF0ZT10aGlzLl9zd2l0Y2hBdWRpb1NhbXBsaW5nRnJlcXVlbmN5KHMpLGkuc2FtcGxlUmF0ZUluZGV4PSgxMiZzKT4+PjIsaS5mcmFtZUxlbnRoPSgyJnMpPj4+MSxpLmNoYW5uZWxDb3VudD0xJnMsaS5yZWZTYW1wbGVEdXJhdGlvbj1NYXRoLmZsb29yKDEwMjQvaS5hdWRpb1NhbXBsZVJhdGUqaS50aW1lc2NhbGUpKTtsZXQgbj1pLmF1ZGlvU2FtcGxlUmF0ZSxvPWkuc2FtcGxlUmF0ZUluZGV4LGQ9aS5yZWZTYW1wbGVEdXJhdGlvbjtkZWxldGUgZS50YWdUeXBlO2xldCBoPXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGUuZGF0YXNpemUpO2lmKDA9PT1lLmRhdGFbMF0pe2xldCB0PXRoaXMuX2FhY1NlcXVlbmNlSGVhZGVyUGFyc2VyKGUuZGF0YSk7bj10LmF1ZGlvc2FtcGxlcmF0ZXx8aS5hdWRpb1NhbXBsZVJhdGUsbz10LnNhbXBsZVJhdGVJbmRleHx8aS5zYW1wbGVSYXRlSW5kZXgsZD1NYXRoLmZsb29yKDEwMjQvbippLnRpbWVzY2FsZSksaS5jaGFubmVsQ291bnQ9dC5jaGFubmVsQ291bnQsaS5zYW1wbGVSYXRlPW4saS5zYW1wbGVSYXRlSW5kZXg9byxpLnJlZlNhbXBsZUR1cmF0aW9uPWQsaS5kdXJhdGlvbj10aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5kdXJhdGlvbippLnRpbWVzY2FsZSxpLmNvbmZpZz10LmNvbmZpZztjb25zdCBzPXRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmF1ZGlvO3MuY29kZWM9dC5jb2RlYyxzLmNoYW5uZWxDb3VudD10LmNoYW5uZWxDb3VudCxzLnNhbXBsZVJhdGU9bixzLnNhbXBsZVJhdGVJbmRleD10LmF1ZGlvU2FtcGxlUmF0ZUluZGV4LHRoaXMuX2hhc1NjcmlwdCYmIXRoaXMuX2hhc0F1ZGlvU2VxdWVuY2U/dGhpcy5lbWl0KGwuTUVUQURBVEFfUEFSU0VELFwiYXVkaW9cIik6dGhpcy5faGFzU2NyaXB0JiZ0aGlzLl9oYXNBdWRpb1NlcXVlbmNlJiZ0aGlzLmVtaXQobC5BVURJT19NRVRBREFUQV9DSEFOR0UpLHRoaXMuX2hhc0F1ZGlvU2VxdWVuY2U9ITAsdGhpcy5fbWV0YUNoYW5nZT0hMH1lbHNlIHRoaXMuX21ldGFDaGFuZ2UmJihlLm9wdGlvbnM9e21ldGE6dC5tZXRhfSx0aGlzLl9tZXRhQ2hhbmdlPSExKSxlLmRhdGE9ZS5kYXRhLnNsaWNlKDEsZS5kYXRhLmxlbmd0aCksdC5zYW1wbGVzLnB1c2goZSk7aHx8dGhpcy5lbWl0KGwuREVNVVhfRVJST1IsdGhpcy5UQUcsbmV3IEVycm9yKFwiVEFHIGxlbmd0aCBlcnJvciBhdCBcIitlLmRhdGFzaXplKSwhMSl9X3BhcnNlSGV2Y0RhdGEoZSl7bGV0IHQ9dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF07ZS5mcmFtZVR5cGU9KDI0MCZ0KT4+PjQsZS5pc0tleWZyYW1lPTE9PT1lLmZyYW1lVHlwZTtsZXQgaT0xNSZ0O2lmKHRoaXMudHJhY2tzLnZpZGVvVHJhY2suY29kZWNJRD1pLGUuYXZjUGFja2V0VHlwZT10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXSxlLmN0cz10aGlzLmxvYWRlckJ1ZmZlci50b0ludCgwLDMpLHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDMpLDEyPT09aSl7Y29uc3QgdD10aGlzLmxvYWRlckJ1ZmZlci5zaGlmdChlLmRhdGFzaXplLTUpO2lmKGUuZGF0YT10LDAhPT1OdW1iZXIucGFyc2VJbnQoZS5hdmNQYWNrZXRUeXBlKSl7dGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoZS5kYXRhc2l6ZSl8fHRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLHRoaXMuVEFHLG5ldyBFcnJvcihgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7ZS5kYXRhc2l6ZX1gKSwhMSk7bGV0IHQ9e30saT0wO2Zvcih0LmN0cz1lLmN0cyx0LmR0cz1lLmR0cztlLmRhdGEubGVuZ3RoPmk7KXtsZXQgcz1lLmRhdGEuc2xpY2UoTnVtYmVyLnBhcnNlSW50KGkpLDQraSk7dC5zaXplPXNbM10sdC5zaXplKz0yNTYqc1syXSx0LnNpemUrPTI1NipzWzFdKjI1Nix0LnNpemUrPTI1NipzWzBdKjI1NioyNTYsaSs9NCx0LmRhdGE9ZS5kYXRhLnNsaWNlKE51bWJlci5wYXJzZUludChpKSx0LnNpemUraSksaSs9dC5zaXplLHRoaXMudHJhY2tzLnZpZGVvVHJhY2suc2FtcGxlcy5wdXNoKHQpLHRoaXMuZW1pdChsLk1FVEFEQVRBX1BBUlNFRCxcInZpZGVvXCIpfX1lbHNlIDA9PT1OdW1iZXIucGFyc2VJbnQoZS5hdmNQYWNrZXRUeXBlKSYmKHRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGUuZGF0YXNpemUpP3RoaXMuZW1pdChsLk1FVEFEQVRBX1BBUlNFRCxcInZpZGVvXCIpOnRoaXMuZW1pdChsLkRFTVVYX0VSUk9SLHRoaXMuVEFHLG5ldyBFcnJvcihgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7ZS5kYXRhc2l6ZX1gKSwhMSkpfWVsc2UgaWYoNz09PWkpe2xldCB0PXRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGUuZGF0YXNpemUtNSk7aWYoMD09PXRbNF0mJjA9PT10WzVdJiYwPT09dFs2XSYmMT09PXRbN10pe2xldCBlPTA7Zm9yKGxldCBpPTA7aTw0O2krKyllPTI1NiplK3RbaV07ZS09NCwodD10LnNsaWNlKDQsdC5sZW5ndGgpKVszXT1lJTI1NixlPShlLXRbM10pLzI1Nix0WzJdPWUlMjU2LGU9KGUtdFsyXSkvMjU2LHRbMV09ZSUyNTYsdFswXT0oZS10WzFdKS8yNTZ9aWYoZS5kYXRhPXQsMD09PWUuYXZjUGFja2V0VHlwZSl7dGhpcy5fYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIoZS5kYXRhKSx0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihlLmRhdGFzaXplKSYmKHRoaXMuX2hhc1NjcmlwdCYmIXRoaXMuX2hhc1ZpZGVvU2VxdWVuY2U/dGhpcy5lbWl0KGwuTUVUQURBVEFfUEFSU0VELFwidmlkZW9cIik6dGhpcy5faGFzU2NyaXB0JiZ0aGlzLl9oYXNWaWRlb1NlcXVlbmNlJiZ0aGlzLmVtaXQobC5WSURFT19NRVRBREFUQV9DSEFOR0UpLHRoaXMuX2hhc1ZpZGVvU2VxdWVuY2U9ITApLHRoaXMuX21ldGFDaGFuZ2U9ITB9ZWxzZXtpZighdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoZS5kYXRhc2l6ZSkpcmV0dXJuIHZvaWQgdGhpcy5lbWl0KGwuREVNVVhfRVJST1IsdGhpcy5UQUcsbmV3IEVycm9yKGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtlLmRhdGFzaXplfWApLCExKTt0aGlzLl9tZXRhQ2hhbmdlJiYoZS5vcHRpb25zPXttZXRhOk9iamVjdC5hc3NpZ24oe30sdGhpcy50cmFja3MudmlkZW9UcmFjay5tZXRhKX0sdGhpcy5fbWV0YUNoYW5nZT0hMSksdGhpcy50cmFja3MudmlkZW9UcmFjay5zYW1wbGVzLnB1c2goZSl9fWVsc2UgdGhpcy5lbWl0KGwuREVNVVhfRVJST1IsdGhpcy5UQUcsbmV3IEVycm9yKGB2aWRlbyBjb2RlaWQgaXMgJHtpfWApLCExKSxlLmRhdGE9dGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoZS5kYXRhc2l6ZS0xKSx0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihlLmRhdGFzaXplKXx8dGhpcy5lbWl0KGwuREVNVVhfRVJST1IsdGhpcy5UQUcsbmV3IEVycm9yKGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtlLmRhdGFzaXplfWApLCExKSx0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChlKSx0aGlzLmVtaXQobC5ERU1VWF9DT01QTEVURSk7ZGVsZXRlIGUudGFnVHlwZX1fYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIoZSl7bGV0IHQ9dGhpcy50cmFja3MudmlkZW9UcmFjaztpZighdClyZXR1cm47bGV0IGk9MDt0Lm1ldGF8fCh0Lm1ldGE9bmV3IHIuVmlkZW9UcmFja01ldGEpO2xldCBzPXQubWV0YTtzLmNvbmZpZ3VyYXRpb25WZXJzaW9uPWVbMF0scy5hdmNQcm9maWxlSW5kaWNhdGlvbj1lWzFdLHMucHJvZmlsZUNvbXBhdGliaWxpdHk9ZVsyXSxzLmF2Y0xldmVsSW5kaWNhdGlvbj1lWzNdLzEwLHMubmFsVW5pdExlbmd0aD0xKygzJmVbNF0pO2xldCBuPTMxJmVbNV07aT02O2xldCBvPXt9O2ZvcihsZXQgdD0wO3Q8bjt0Kyspe2xldCB0PTI1NSplW2ldK2VbaSsxXTtpKz0yO2xldCByPW5ldyBVaW50OEFycmF5KHQpO2ZvcihsZXQgcz0wO3M8dDtzKyspcltzXT1lW2krc107bGV0IG49XCJhdmMxLlwiO2ZvcihsZXQgZT0xO2U8NDtlKyspe2xldCB0PXJbZV0udG9TdHJpbmcoMTYpO3QubGVuZ3RoPDImJih0PVwiMFwiK3QpLG4rPXR9cy5jb2RlYz1uLGkrPXQsdGhpcy50cmFja3MudmlkZW9UcmFjay5tZXRhLnNwcz1yLG89YS5TcHNQYXJzZXIucGFyc2VTUFMocil9bGV0IGQ9ZVtpXTtpKys7Zm9yKGxldCB0PTA7dDxkO3QrKyl7bGV0IHQ9MjU1KmVbaV0rZVtpKzFdO2krPTI7bGV0IHM9bmV3IFVpbnQ4QXJyYXkodCk7Zm9yKGxldCByPTA7cjx0O3IrKylzW3JdPWVbaStyXTtpKz10LHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YS5wcHM9c31PYmplY3QuYXNzaWduKHMsYS5TcHNQYXJzZXIudG9WaWRlb01ldGEobykpO2NvbnN0IGw9dGhpcy5fY29udGV4dC5tZWRpYUluZm8udmlkZW87bC5jb2RlYz1zLmNvZGVjLGwucHJvZmlsZT1zLnByb2ZpbGUsbC5sZXZlbD1zLmxldmVsLGwuY2hyb21hRm9ybWF0PXMuY2hyb21hRm9ybWF0LGwuZnJhbWVSYXRlPXMuZnJhbWVSYXRlLGwucGFyUmF0aW89cy5wYXJSYXRpbyxsLndpZHRoPWwud2lkdGg9PT1zLnByZXNlbnRXaWR0aD9sLndpZHRoOnMucHJlc2VudFdpZHRoLGwuaGVpZ2h0PWwuaGVpZ2h0PT09cy5wcmVzZW50SGVpZ2h0P2wud2lkdGg6cy5wcmVzZW50SGVpZ2h0LHMuZHVyYXRpb249dGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24qcy50aW1lc2NhbGUscy5hdmNjPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxzLmF2Y2Muc2V0KGUpLHQubWV0YT1zfV9zd2l0Y2hBdWRpb1NhbXBsZVJhdGUoZSl7cmV0dXJuWzk2ZTMsODgyMDAsNjRlMyw0OGUzLDQ0MTAwLDMyZTMsMjRlMywyMjA1MCwxNmUzLDEyZTMsMTEwMjUsOGUzLDczNTBdW2VdfV9zd2l0Y2hBdWRpb1NhbXBsaW5nRnJlcXVlbmN5KGUpe3JldHVybls1NTAwLDExMDI1LDIyMDUwLDQ0MTAwLDQ4ZTNdWygxMiZlKT4+PjJdfV9zd2l0Y2hBdWRpb0NoYW5uZWwoZSl7cmV0dXJuWzEsMl1bMSZlXX1fZGF0YXNpemVWYWxpZGF0b3IoZSl7bGV0IHQ9dGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCw0KTtyZXR1cm4gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoNCksdD09PWUrMTF9Z2V0IGxvYWRlckJ1ZmZlcigpe2NvbnN0IGU9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIkxPQURFUl9CVUZGRVJcIik7aWYoZSlyZXR1cm4gZTt0aGlzLmVtaXQobC5ERU1VWF9FUlJPUixuZXcgRXJyb3IoXCLmib7kuI3liLAgbG9hZGVyQnVmZmVyIOWunuS+i1wiKSl9Z2V0IHRyYWNrcygpe3JldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiVFJBQ0tTXCIpfWdldCBsb2dnZXIoKXtyZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIkxPR0dFUlwiKX19dC5kZWZhdWx0PWh9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcyxyPWkoOCksYT0ocz1yKSYmcy5fX2VzTW9kdWxlP3M6e2RlZmF1bHQ6c307Y2xhc3MgbntzdGF0aWMgZ2V0TmFsdW5pdHMoZSl7aWYoZS5sZW5ndGgtZS5wb3NpdGlvbjw0KXJldHVybltdO2xldCB0PWUuZGF0YXZpZXcsaT1lLnBvc2l0aW9uO3JldHVybiAxPT09dC5nZXRJbnQzMihpKXx8MD09PXQuZ2V0SW50MTYoaSkmJjE9PT10LmdldEludDgoaSsyKT9uLmdldEFubmV4Yk5hbHMoZSk6bi5nZXRBdmNjTmFscyhlKX1zdGF0aWMgZ2V0QW5uZXhiTmFscyhlKXtsZXQgdD1bXSxpPW4uZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIoZSkscz1pLnBvcyxyPXM7Zm9yKDtzPGUubGVuZ3RoLTQ7KXtsZXQgYT1lLmJ1ZmZlci5zbGljZShzLHMraS5oZWFkZXJMZW5ndGgpO2kucG9zPT09ZS5wb3NpdGlvbiYmZS5za2lwKGkuaGVhZGVyTGVuZ3RoKSxyPShpPW4uZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIoZSkpLnBvcztsZXQgbz17aGVhZGVyOmEsYm9keTpuZXcgVWludDhBcnJheShlLmJ1ZmZlci5zbGljZShzK2EuYnl0ZUxlbmd0aCxyKSl9O24uYW5hbHlzZU5hbChvKSx0LnB1c2gobyksZS5za2lwKHItZS5wb3NpdGlvbikscz1yfXJldHVybiB0fXN0YXRpYyBnZXRBdmNjTmFscyhlKXtsZXQgdD1bXTtmb3IoO2UucG9zaXRpb248ZS5sZW5ndGgtNDspe2xldCBpPWUuZGF0YXZpZXcuZ2V0SW50MzIoKTtpZighKGUubGVuZ3RoLWUucG9zaXRpb24+PWkpKWJyZWFrO3tsZXQgcz1lLmJ1ZmZlci5zbGljZShlLnBvc2l0aW9uLGUucG9zaXRpb24rNCk7ZS5za2lwKDQpO2xldCByPWUuYnVmZmVyLnNsaWNlKGUucG9zaXRpb24sZS5wb3NpdGlvbitpKTtlLnNraXAoaSk7bGV0IGE9e2hlYWRlcjpzLGJvZHk6cn07bi5hbmFseXNlTmFsKGEpLHQucHVzaChhKX19cmV0dXJuIHR9c3RhdGljIGFuYWx5c2VOYWwoZSl7c3dpdGNoKDMxJmUuYm9keVswXSl7Y2FzZSAxOmUubmRyPSEwO2JyZWFrO2Nhc2UgNTplLmlkcj0hMDticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA3OmUuc3BzPWEuZGVmYXVsdC5wYXJzZVNQUyhlLmJvZHkpO2JyZWFrO2Nhc2UgODplLnBwcz0hMH19c3RhdGljIGdldEhlYWRlclBvc2l0aW9uQW5uZXhCKGUpe2xldCB0PWUucG9zaXRpb24saT0wO2Zvcig7MyE9PWkmJjQhPT1pJiZ0PGUubGVuZ3RoLTQ7KTA9PT1lLmRhdGF2aWV3LmdldEludDE2KHQpPzE9PT1lLmRhdGF2aWV3LmdldEludDE2KHQrMik/aT00OjE9PT1lLmRhdGF2aWV3LmdldEludDgodCsyKT9pPTM6dCsrOnQrKztyZXR1cm4gdD09PWUubGVuZ3RoLTQmJigwPT09ZS5kYXRhdmlldy5nZXRJbnQxNih0KT8xPT09ZS5kYXRhdmlldy5nZXRJbnQxNih0KzIpJiYoaT00KToodCsrLDA9PT1lLmRhdGF2aWV3LmdldEludDE2KHQpJiYxPT09ZS5kYXRhdmlldy5nZXRJbnQ4KHQpP2k9Mzp0PWUubGVuZ3RoKSkse3Bvczp0LGhlYWRlckxlbmd0aDppfX1zdGF0aWMgZ2V0QXZjYyhlLHQpe2xldCBpPW5ldyBVaW50OEFycmF5KGUuYnl0ZUxlbmd0aCt0LmJ5dGVMZW5ndGgrMTEpO2lbMF09MSxpWzFdPWVbMV0saVsyXT1lWzJdLGlbM109ZVszXSxpWzRdPTI1NSxpWzVdPTIyNTtsZXQgcz02O3JldHVybiBpLnNldChuZXcgVWludDhBcnJheShbZS5ieXRlTGVuZ3RoPj4+OCYyNTUsMjU1JmUuYnl0ZUxlbmd0aF0pLHMpLHMrPTIsaS5zZXQoZSxzKSxpW3MrPWUuYnl0ZUxlbmd0aF09MSxzKyssaS5zZXQobmV3IFVpbnQ4QXJyYXkoW3QuYnl0ZUxlbmd0aD4+PjgmMjU1LDI1NSZ0LmJ5dGVMZW5ndGhdKSxzKSxzKz0yLGkuc2V0KHQscyksaX19dC5kZWZhdWx0PW59LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt0LmRlZmF1bHQ9Y2xhc3N7Y29uc3RydWN0b3IoZSl7dGhpcy5UQUc9XCJHb2xvbWJcIix0aGlzLl9idWZmZXI9ZSx0aGlzLl9idWZmZXJJbmRleD0wLHRoaXMuX3RvdGFsQnl0ZXM9ZS5ieXRlTGVuZ3RoLHRoaXMuX3RvdGFsQml0cz04KmUuYnl0ZUxlbmd0aCx0aGlzLl9jdXJyZW50V29yZD0wLHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQ9MH1kZXN0cm95KCl7dGhpcy5fYnVmZmVyPW51bGx9X2ZpbGxDdXJyZW50V29yZCgpe2xldCBlPXRoaXMuX3RvdGFsQnl0ZXMtdGhpcy5fYnVmZmVySW5kZXgsdD1NYXRoLm1pbig0LGUpLGk9bmV3IFVpbnQ4QXJyYXkoNCk7aS5zZXQodGhpcy5fYnVmZmVyLnN1YmFycmF5KHRoaXMuX2J1ZmZlckluZGV4LHRoaXMuX2J1ZmZlckluZGV4K3QpKSx0aGlzLl9jdXJyZW50V29yZD1uZXcgRGF0YVZpZXcoaS5idWZmZXIpLmdldFVpbnQzMigwKSx0aGlzLl9idWZmZXJJbmRleCs9dCx0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0PTgqdH1yZWFkQml0cyhlKXtsZXQgdD1NYXRoLm1pbih0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0LGUpLGk9dGhpcy5fY3VycmVudFdvcmQ+Pj4zMi10O2lmKGU+MzIpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlYWQgbW9yZSB0aGFuIDMyIGJpdHMgYXQgYSB0aW1lXCIpO3JldHVybiB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0LT10LHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQ+MD90aGlzLl9jdXJyZW50V29yZDw8PXQ6dGhpcy5fdG90YWxCeXRlcy10aGlzLl9idWZmZXJJbmRleD4wJiZ0aGlzLl9maWxsQ3VycmVudFdvcmQoKSwodD1lLXQpPjAmJnRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQ/aTw8dHx0aGlzLnJlYWRCaXRzKHQpOml9cmVhZEJvb2woKXtyZXR1cm4gMT09PXRoaXMucmVhZEJpdHMoMSl9cmVhZEJ5dGUoKXtyZXR1cm4gdGhpcy5yZWFkQml0cyg4KX1fc2tpcExlYWRpbmdaZXJvKCl7bGV0IGU7Zm9yKGU9MDtlPHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQ7ZSsrKWlmKDAhPSh0aGlzLl9jdXJyZW50V29yZCYyMTQ3NDgzNjQ4Pj4+ZSkpcmV0dXJuIHRoaXMuX2N1cnJlbnRXb3JkPDw9ZSx0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0LT1lLGU7cmV0dXJuIHRoaXMuX2ZpbGxDdXJyZW50V29yZCgpLGUrdGhpcy5fc2tpcExlYWRpbmdaZXJvKCl9cmVhZFVFRygpe2xldCBlPXRoaXMuX3NraXBMZWFkaW5nWmVybygpO3JldHVybiB0aGlzLnJlYWRCaXRzKGUrMSktMX1yZWFkU0VHKCl7bGV0IGU9dGhpcy5yZWFkVUVHKCk7cmV0dXJuIDEmZT9lKzE+Pj4xOi0xKihlPj4+MSl9fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzLHI9aSgwKSxhPWkoMzMpLG49KHM9YSkmJnMuX19lc01vZHVsZT9zOntkZWZhdWx0OnN9O2NvbnN0e1JFTVVYX0VWRU5UUzpvLERFTVVYX0VWRU5UUzpkfT1yLkVWRU5UUztjbGFzcyBse2NvbnN0cnVjdG9yKCl7dGhpcy5uZXh0QXVkaW9EdHM9MCx0aGlzLm5leHRWaWRlb0R0cz0wLHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbj0wLHRoaXMubGFzdFZpZGVvU2FtcGxlc0xlbj0wLHRoaXMubGFzdFZpZGVvRHRzPXZvaWQgMCx0aGlzLmxhc3RBdWRpb0R0cz12b2lkIDAsdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudD0wLHRoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQ9MCx0aGlzLl9maXJzdEF1ZGlvU2FtcGxlPW51bGwsdGhpcy5fZmlyc3RWaWRlb1NhbXBsZT1udWxsLHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzPVtdLHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzPVtdLHRoaXMuX3ZpZGVvTGFyZ2VHYXA9MCx0aGlzLl9hdWRpb0xhcmdlR2FwPTB9aW5pdCgpe3RoaXMuYmVmb3JlKG8uUkVNVVhfTUVESUEsdGhpcy5kb0ZpeC5iaW5kKHRoaXMpKX1yZXNldCgpe3RoaXMubmV4dEF1ZGlvRHRzPW51bGwsdGhpcy5uZXh0VmlkZW9EdHM9bnVsbCx0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW49MCx0aGlzLmxhc3RWaWRlb1NhbXBsZXNMZW49MCx0aGlzLmxhc3RWaWRlb0R0cz12b2lkIDAsdGhpcy5sYXN0QXVkaW9EdHM9dm9pZCAwLHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzPVtdLHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzPVtdfWRvRml4KCl7Y29uc3R7aXNGaXJzdEF1ZGlvU2FtcGxlczplLGlzRmlyc3RWaWRlb1NhbXBsZXM6dH09dGhpcy5nZXRGaXJzdFNhbXBsZSgpO3RoaXMucmVjb3JkU2FtcGxlc0NvdW50KCksdGhpcy5fZmlyc3RWaWRlb1NhbXBsZSYmdGhpcy5maXhSZWZTYW1wbGVEdXJhdGlvbih0aGlzLnZpZGVvVHJhY2subWV0YSx0aGlzLnZpZGVvVHJhY2suc2FtcGxlcyksdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSYmdGhpcy5maXhSZWZTYW1wbGVEdXJhdGlvbih0aGlzLmF1ZGlvVHJhY2subWV0YSx0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcyk7Y29uc3R7Y2hhbmdlZDppLGNoYW5nZWRJZHg6c309bC5kZXRhY3RDaGFuZ2VTdHJlYW0odGhpcy52aWRlb1RyYWNrLnNhbXBsZXMpO2kmJiFlP3RoaXMuZml4Q2hhbmdlU3RyZWFtVmlkZW8ocyk6dGhpcy5kb0ZpeFZpZGVvKHQpO2NvbnN0e2NoYW5nZWQ6cixjaGFuZ2VkSWR4OmF9PWwuZGV0YWN0Q2hhbmdlU3RyZWFtKHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzKTtyP3RoaXMuZml4Q2hhbmdlU3RyZWFtQXVkaW8oYSk6dGhpcy5kb0ZpeEF1ZGlvKGUpfWRvRml4VmlkZW8oZSx0KXtsZXR7c2FtcGxlczppLG1ldGE6c309dGhpcy52aWRlb1RyYWNrO2lmKHMuZnJhbWVSYXRlJiYhMT09PXMuZnJhbWVSYXRlLmZpeGVkKXJldHVybjtpZighaXx8IWkubGVuZ3RofHwhdGhpcy5fZmlyc3RWaWRlb1NhbXBsZSlyZXR1cm47Y29uc3Qgcj1pWzBdLGE9aS5sZW5ndGg7dGhpcy5fdmlkZW9MYXJnZUdhcD4wJiZsLmRvRml4TGFyZ2VHYXAoaSx0aGlzLl92aWRlb0xhcmdlR2FwKSxyLmR0cyE9PXRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzJiYodHx8bC5kZXRlY3RMYXJnZUdhcCh0aGlzLm5leHRWaWRlb0R0cyxyKSkmJih0JiYodGhpcy5uZXh0VmlkZW9EdHM9dCksdGhpcy5fdmlkZW9MYXJnZUdhcD10aGlzLm5leHRWaWRlb0R0cy1yLmR0cyxsLmRvRml4TGFyZ2VHYXAoaSx0aGlzLl92aWRlb0xhcmdlR2FwKSk7Y29uc3Qgbj1yLmR0cztpZihlJiZ0aGlzLl9maXJzdEF1ZGlvU2FtcGxlKXtjb25zdCBlPXRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzLHQ9ZS10aGlzLl9maXJzdEF1ZGlvU2FtcGxlLmR0cztpZih0PjIqcy5yZWZTYW1wbGVEdXJhdGlvbil7Y29uc3QgYT1NYXRoLmZsb29yKHQvcy5yZWZTYW1wbGVEdXJhdGlvbik7Zm9yKGxldCB0PTA7dDxhO3QrKyl7Y29uc3QgYT1PYmplY3QuYXNzaWduKHt9LHIpO2EuZHRzPWUtKHQrMSkqcy5yZWZTYW1wbGVEdXJhdGlvbixhLnB0cz1hLmR0cythLmN0cyxpLnVuc2hpZnQoYSksdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMucHVzaCh7ZHRzOmEuZHRzLHNpemU6YS5kYXRhLmJ5dGVMZW5ndGh9KX19fWxldCBvO2lmKHRoaXMubmV4dFZpZGVvRHRzKXtvPW4tdGhpcy5uZXh0VmlkZW9EdHM7Y29uc3QgZT1NYXRoLmFicyhvKTtpZihvPjIqcy5yZWZTYW1wbGVEdXJhdGlvbil7Y29uc3QgZT1NYXRoLmZsb29yKG8vcy5yZWZTYW1wbGVEdXJhdGlvbik7Zm9yKGxldCB0PTA7dDxlO3QrKyl7Y29uc3QgZT1PYmplY3QuYXNzaWduKHt9LGlbMF0pLHI9bi0odCsxKSpzLnJlZlNhbXBsZUR1cmF0aW9uO2UuZHRzPXI+dGhpcy5uZXh0VmlkZW9EdHM/cjp0aGlzLm5leHRWaWRlb0R0cyxlLnB0cz1lLmR0cytlLmN0cyx0aGlzLnZpZGVvVHJhY2suc2FtcGxlcy51bnNoaWZ0KGUpLHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzLnB1c2goe2R0czplLmR0cyxzaXplOmUuZGF0YS5ieXRlTGVuZ3RofSl9fWVsc2UgZTw9cy5yZWZTYW1wbGVEdXJhdGlvbiYmZT4wPyhpWzBdLmR0cz10aGlzLm5leHRWaWRlb0R0cyxpWzBdLm9yaWdpbkR0cz1pWzBdLmR0cyxpWzBdLmN0cz12b2lkIDAhPT1pWzBdLmN0cz9pWzBdLmN0czppWzBdLnB0cy1pWzBdLmR0cyxpWzBdLnB0cz1pWzBdLmR0cytpWzBdLmN0cyk6bzwwJiZsLmRvRml4TGFyZ2VHYXAoaSwtMSpvKX1jb25zdCBkPWlbaS5sZW5ndGgtMV0uZHRzLGg9aS5sZW5ndGg+PTI/ZC1pW2kubGVuZ3RoLTJdLmR0czpzLnJlZlNhbXBsZUR1cmF0aW9uO3RoaXMubGFzdFZpZGVvU2FtcGxlc0xlbj1hLHRoaXMubmV4dFZpZGVvRHRzPWQraCx0aGlzLmxhc3RWaWRlb0R0cz1kO2ZvcihsZXQgZT0wLHQ9aS5sZW5ndGg7ZTx0O2UrKyl7Y29uc3QgdD1pW2VdLHI9aVtlKzFdO2lmKCFyKWJyZWFrO2NvbnN0IGE9ci5kdHMtdC5kdHM7aWYoYT4yKnMucmVmU2FtcGxlRHVyYXRpb24pe2xldCBuPU1hdGguZmxvb3IoYS9zLnJlZlNhbXBsZUR1cmF0aW9uKSxvPTA7Zm9yKDtvPG47KXtjb25zdCBhPU9iamVjdC5hc3NpZ24oe30scik7YS5kdHM9dC5kdHMrKG8rMSkqcy5yZWZTYW1wbGVEdXJhdGlvbixhLnB0cz1hLmR0cythLmN0cyxhPHIuZHRzJiYoaS5zcGxpY2UoZSwwLGEpLHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzLnB1c2goe2R0czphLmR0cyxzaXplOmEuZGF0YS5ieXRlTGVuZ3RofSkpLG8rKyxlKyt9fX10aGlzLnZpZGVvVHJhY2suc2FtcGxlcz1pfWRvRml4QXVkaW8oZSx0KXtsZXR7c2FtcGxlczppLG1ldGE6c309dGhpcy5hdWRpb1RyYWNrO2lmKCFpfHwhaS5sZW5ndGgpcmV0dXJuO2NvbnN0IHI9aS5sZW5ndGgsYT1uLmRlZmF1bHQuZ2V0U2lsZW50RnJhbWUocy5jb2RlYyxzLmNoYW5uZWxDb3VudCksbz10aGlzLl9maXJzdEF1ZGlvU2FtcGxlLGQ9aVswXTtpZih0aGlzLl9hdWRpb0xhcmdlR2FwPjAmJmwuZG9GaXhMYXJnZUdhcChpLHRoaXMuX2F1ZGlvTGFyZ2VHYXApLGQuZHRzIT09dGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHMmJih0fHxsLmRldGVjdExhcmdlR2FwKHRoaXMubmV4dEF1ZGlvRHRzLGQpKSYmKHQmJih0aGlzLm5leHRBdWRpb0R0cz10KSx0aGlzLl9hdWRpb0xhcmdlR2FwPXRoaXMubmV4dEF1ZGlvRHRzLWQuZHRzLGwuZG9GaXhMYXJnZUdhcChpLHRoaXMuX2F1ZGlvTGFyZ2VHYXApKSx0aGlzLl9maXJzdFZpZGVvU2FtcGxlJiZlKXtjb25zdCBlPXRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUucHRzP3RoaXMuX2ZpcnN0VmlkZW9TYW1wbGUucHRzOnRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzK3RoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuY3RzO2lmKG8uZHRzLWU+cy5yZWZTYW1wbGVEdXJhdGlvbil7Y29uc3QgdD1NYXRoLmZsb29yKChvLmR0cy1lKS9zLnJlZlNhbXBsZUR1cmF0aW9uKTtmb3IobGV0IGU9MDtlPHQ7ZSsrKXtjb25zdCB0PXtkYXRhOmEsZGF0YXNpemU6YS5ieXRlTGVuZ3RoLGR0czpvLmR0cy0oZSsxKSpzLnJlZlNhbXBsZUR1cmF0aW9uLGZpbHRlcmVkOjB9O2kudW5zaGlmdCh0KSx0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5wdXNoKHtkdHM6dC5kdHMsc2l6ZTp0LmRhdGEuYnl0ZUxlbmd0aH0pfX19bGV0IGg7Y29uc3QgdT1pWzBdLmR0cztpZih0aGlzLm5leHRBdWRpb0R0cyl7aD11LXRoaXMubmV4dEF1ZGlvRHRzO2NvbnN0IGU9TWF0aC5hYnMoaCk7aWYoZT5zLnJlZlNhbXBsZUR1cmF0aW9uJiYxPT09ciYmMT09PXRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiYmKHMucmVmU2FtcGxlRHVyYXRpb25GaXhlZD12b2lkIDApLGg+MipzLnJlZlNhbXBsZUR1cmF0aW9uKWlmKDE9PT1yJiYxPT09dGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuKXMucmVmU2FtcGxlRHVyYXRpb25GaXhlZD12b2lkIDAhPT1zLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQ/cy5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkK2g6cy5yZWZTYW1wbGVEdXJhdGlvbitoO2Vsc2V7Y29uc3QgZT1NYXRoLmZsb29yKGgvcy5yZWZTYW1wbGVEdXJhdGlvbik7Zm9yKGxldCB0PTA7dDxlO3QrKyl7Y29uc3QgZT11LSh0KzEpKnMucmVmU2FtcGxlRHVyYXRpb24scj1PYmplY3QuYXNzaWduKHt9LGlbMF0se2R0czplPnRoaXMubmV4dEF1ZGlvRHRzP2U6dGhpcy5uZXh0QXVkaW9EdHN9KTt0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5wdXNoKHtkdHM6ci5kdHMsc2l6ZTpyLmRhdGEuYnl0ZUxlbmd0aH0pLHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzLnVuc2hpZnQocil9fWVsc2UgZTw9cy5yZWZTYW1wbGVEdXJhdGlvbiYmZT4wPyhpWzBdLmR0cz10aGlzLm5leHRBdWRpb0R0cyxpWzBdLnB0cz10aGlzLm5leHRBdWRpb0R0cyk6aDwwJiZsLmRvRml4TGFyZ2VHYXAoaSwtMSpoKX1jb25zdCBjPWlbaS5sZW5ndGgtMV0uZHRzLGY9aS5sZW5ndGg+PTI/Yy1pW2kubGVuZ3RoLTJdLmR0czpzLnJlZlNhbXBsZUR1cmF0aW9uO3RoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbj1yLHRoaXMubmV4dEF1ZGlvRHRzPXMucmVmU2FtcGxlRHVyYXRpb25GaXhlZD9jK3MucmVmU2FtcGxlRHVyYXRpb25GaXhlZDpjK2YsdGhpcy5sYXN0QXVkaW9EdHM9Yztmb3IobGV0IGU9MCx0PWkubGVuZ3RoO2U8dDtlKyspe2NvbnN0IHQ9aVtlXSxzPWlbZSsxXTtpZighcylicmVhaztjb25zdCByPXMuZHRzLXQuZHRzO2lbZV0uZHVyYXRpb249cn10aGlzLmF1ZGlvVHJhY2suc2FtcGxlcz1sLnNvcnRBdWRpb1NhbXBsZXMoaSl9Zml4Q2hhbmdlU3RyZWFtVmlkZW8oZSl7Y29uc3R7c2FtcGxlczp0LG1ldGE6aX09dGhpcy52aWRlb1RyYWNrLHM9MD09PWU/dGhpcy5nZXRTdHJlYW1DaGFuZ2VTdGFydCh0WzBdKTp0W2UtMV0uZHRzLHI9dFtlXS5kdHM7aWYoTWF0aC5hYnMocy1yKTw9MippLnJlZlNhbXBsZUR1cmF0aW9uKXJldHVybiB0W2VdLm9wdGlvbnM/dFtlXS5vcHRpb25zLmlzQ29udGludWU9ITA6dFtlXS5vcHRpb25zPXtpc0NvbnRpbnVlOiEwfSx0aGlzLmRvRml4VmlkZW8oITEpO2NvbnN0IGE9dC5zbGljZSgwLGUpLG49dC5zbGljZShlKSxvPXRbMF0sZD1uWzBdLmR0cy1vLmR0cyxsPW8ub3B0aW9ucyYmby5vcHRpb25zLnN0YXJ0K2Q/by5vcHRpb25zLnN0YXJ0Om51bGw7dGhpcy52aWRlb1RyYWNrLnNhbXBsZXM9dC5zbGljZSgwLGUpLHRoaXMuZG9GaXhWaWRlbyghMSksdGhpcy52aWRlb1RyYWNrLnNhbXBsZXM9dC5zbGljZShlKSx0aGlzLmRvRml4VmlkZW8oITEsbCksdGhpcy52aWRlb1RyYWNrLnNhbXBsZXM9YS5jb25jYXQobil9Zml4Q2hhbmdlU3RyZWFtQXVkaW8oZSl7Y29uc3R7c2FtcGxlczp0LG1ldGE6aX09dGhpcy5hdWRpb1RyYWNrLHM9MD09PWU/dGhpcy5nZXRTdHJlYW1DaGFuZ2VTdGFydCh0WzBdKTp0W2UtMV0uZHRzLHI9dFtlXS5kdHM7aWYoTWF0aC5hYnMocy1yKTw9MippLnJlZlNhbXBsZUR1cmF0aW9uKXJldHVybiB0W2VdLm9wdGlvbnM/dFtlXS5vcHRpb25zLmlzQ29udGludWU9ITA6dFtlXS5vcHRpb25zPXtpc0NvbnRpbnVlOiEwfSx0aGlzLmRvRml4QXVkaW8oITEpO2NvbnN0IGE9dC5zbGljZSgwLGUpLG49dC5zbGljZShlKSxvPXRbMF0sZD1uWzBdLmR0cy1vLmR0cyxsPW8ub3B0aW9ucyYmby5vcHRpb25zLnN0YXJ0K2Q/by5vcHRpb25zLnN0YXJ0Om51bGw7dGhpcy5hdWRpb1RyYWNrLnNhbXBsZXM9YSx0aGlzLmRvRml4QXVkaW8oITEpLHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzPW4sdGhpcy5kb0ZpeEF1ZGlvKCExLGwpLHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzPWEuY29uY2F0KG4pfWdldEZpcnN0U2FtcGxlKCl7bGV0e3NhbXBsZXM6ZX09dGhpcy52aWRlb1RyYWNrLHtzYW1wbGVzOnR9PXRoaXMuYXVkaW9UcmFjayxpPSExLHM9ITE7cmV0dXJuIXRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUmJmUubGVuZ3RoJiYodGhpcy5fZmlyc3RWaWRlb1NhbXBsZT1sLmZpbmRGaXJzdFZpZGVvU2FtcGxlKGUpLGk9ITApLCF0aGlzLl9maXJzdEF1ZGlvU2FtcGxlJiZ0Lmxlbmd0aCYmKHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGU9bC5maW5kRmlyc3RBdWRpb1NhbXBsZSh0KSxzPSEwKSx7aXNGaXJzdFZpZGVvU2FtcGxlczppLGlzRmlyc3RBdWRpb1NhbXBsZXM6c319Zml4UmVmU2FtcGxlRHVyYXRpb24oZSx0KXtjb25zdCBpPVwidmlkZW9cIj09PWUudHlwZSxzPWk/dGhpcy5hbGxWaWRlb1NhbXBsZXNDb3VudDp0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50LHI9aT90aGlzLl9maXJzdFZpZGVvU2FtcGxlLmR0czp0aGlzLl9maXJzdEF1ZGlvU2FtcGxlLmR0cyxhPWk/dGhpcy5maWxsZWRWaWRlb1NhbXBsZXMubGVuZ3RoOnRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzLmxlbmd0aDtpZighZS5yZWZTYW1wbGVEdXJhdGlvbnx8ZS5yZWZTYW1wbGVEdXJhdGlvbjw9MHx8TnVtYmVyLmlzTmFOKGUucmVmU2FtcGxlRHVyYXRpb24pKXtpZih0Lmxlbmd0aD49MSl7Y29uc3QgaT10W3QubGVuZ3RoLTFdLmR0cztlLnJlZlNhbXBsZUR1cmF0aW9uPU1hdGguZmxvb3IoKGktcikvKHMrYS0xKSl9fWVsc2UgaWYoZS5yZWZTYW1wbGVEdXJhdGlvbiYmdC5sZW5ndGg+PTUpe2NvbnN0IGk9KHRbdC5sZW5ndGgtMV0uZHRzLXRbMF0uZHRzKS8odC5sZW5ndGgtMSk7ZS5yZWZTYW1wbGVEdXJhdGlvbj1NYXRoLmZsb29yKE1hdGguYWJzKGUucmVmU2FtcGxlRHVyYXRpb24taSk8PTU/ZS5yZWZTYW1wbGVEdXJhdGlvbjppKX19cmVjb3JkU2FtcGxlc0NvdW50KCl7Y29uc3R7YXVkaW9UcmFjazplLHZpZGVvVHJhY2s6dH09dGhpczt0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50Kz1lLnNhbXBsZXMubGVuZ3RoLHRoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQrPXQuc2FtcGxlcy5sZW5ndGh9cmVtb3ZlSW52YWxpZFNhbXBsZXMoKXtjb25zdHtfZmlyc3RWaWRlb1NhbXBsZTplLF9maXJzdEF1ZGlvU2FtcGxlOnR9PXRoaXM7dGhpcy5hdWRpb1RyYWNrLnNhbXBsZXM9dGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMuZmlsdGVyKGU9PmUuZHRzPj10LmR0cyYmKHZvaWQgMD09PXRoaXMubGFzdEF1ZGlvRHRzfHxlLmR0cz50aGlzLmxhc3RBdWRpb0R0cykpLHRoaXMudmlkZW9UcmFjay5zYW1wbGVzPXRoaXMudmlkZW9UcmFjay5zYW1wbGVzLmZpbHRlcih0PT50LmR0cz49ZS5kdHMmJih2b2lkIDA9PT10aGlzLmxhc3RWaWRlb0R0c3x8dC5kdHM+dGhpcy5sYXN0VmlkZW9EdHMpKX1nZXRTdHJlYW1DaGFuZ2VTdGFydChlKXtyZXR1cm4gZS5vcHRpb25zJiZlLm9wdGlvbnMuc3RhcnQ/ZS5vcHRpb25zLnN0YXJ0LXRoaXMuZHRzQmFzZToxLzB9c3RhdGljIHNvcnRBdWRpb1NhbXBsZXMoZSl7cmV0dXJuIDE9PT1lLmxlbmd0aD9lOmUuc29ydCgoZSx0KT0+ZS5kdHMtdC5kdHMpfXN0YXRpYyBmaW5kRmlyc3RBdWRpb1NhbXBsZShlKXtyZXR1cm4gZSYmMCE9PWUubGVuZ3RoP2wuc29ydEF1ZGlvU2FtcGxlcyhlKVswXTpudWxsfXN0YXRpYyBmaW5kRmlyc3RWaWRlb1NhbXBsZShlKXtpZighZS5sZW5ndGgpcmV0dXJuIG51bGw7Y29uc3QgdD1lLnNvcnQoKGUsdCk9PmUuZHRzLXQuZHRzKTtmb3IobGV0IGU9MCxpPXQubGVuZ3RoO2U8aTtlKyspaWYodFtlXS5pc0tleWZyYW1lKXJldHVybiB0W2VdfXN0YXRpYyBkZXRlY3RMYXJnZUdhcChlLHQpe2lmKG51bGw9PT1lKXJldHVybjtjb25zdCBpPXQuZHRzfHwwLHM9ZS1pPj0xZTN8fGktZT49MWUzLHI9dC5vcHRpb25zJiZ0Lm9wdGlvbnMuZGlzY29udGludWU7cmV0dXJuIHN8fHJ9c3RhdGljIGRvRml4TGFyZ2VHYXAoZSx0KXtjb25zb2xlLmxvZyhcImZpeCBsYXJnZSBnYXBcIik7Zm9yKGxldCBpPTAscz1lLmxlbmd0aDtpPHM7aSsrKXtjb25zdCBzPWVbaV07cy5kdHMrPXQscy5wdHMmJihzLnB0cys9dCl9fXN0YXRpYyBkZXRhY3RDaGFuZ2VTdHJlYW0oZSl7bGV0IHQ9ITEsaT0tMTtmb3IobGV0IHM9MCxyPWUubGVuZ3RoO3M8cjtzKyspaWYoZVtzXS5vcHRpb25zJiZlW3NdLm9wdGlvbnMubWV0YSl7dD0hMCxpPXM7YnJlYWt9cmV0dXJue2NoYW5nZWQ6dCxjaGFuZ2VkSWR4Oml9fWdldCB0cmFja3MoKXtyZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlRSQUNLU1wiKX1nZXQgYXVkaW9UcmFjaygpe3JldHVybiB0aGlzLnRyYWNrcz90aGlzLnRyYWNrcy5hdWRpb1RyYWNrOm51bGx9Z2V0IHZpZGVvVHJhY2soKXtyZXR1cm4gdGhpcy50cmFja3M/dGhpcy50cmFja3MudmlkZW9UcmFjazpudWxsfWdldCBkdHNCYXNlKCl7Y29uc3QgZT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiTVA0X1JFTVVYRVJcIik7cmV0dXJuIGU/ZS5fZHRzQmFzZTowfX10LmRlZmF1bHQ9bH0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3QuZGVmYXVsdD1jbGFzc3tzdGF0aWMgZ2V0U2lsZW50RnJhbWUoZSx0KXtpZihcIm1wNGEuNDAuMlwiPT09ZSl7aWYoMT09PXQpcmV0dXJuIG5ldyBVaW50OEFycmF5KFswLDIwMCwwLDEyOCwzNSwxMjhdKTtpZigyPT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzMzLDAsNzMsMTQ0LDIsMjUsMCwzNSwxMjhdKTtpZigzPT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDMyLDEzMiwxLDM4LDY0LDgsMTAwLDAsMTQyXSk7aWYoND09PXQpcmV0dXJuIG5ldyBVaW50OEFycmF5KFswLDIwMCwwLDEyOCwzMiwxMzIsMSwzOCw2NCw4LDEwMCwwLDEyOCw0NCwxMjgsOCwyLDU2XSk7aWYoNT09PXQpcmV0dXJuIG5ldyBVaW50OEFycmF5KFswLDIwMCwwLDEyOCwzMiwxMzIsMSwzOCw2NCw4LDEwMCwwLDEzMCw0OCw0LDE1MywwLDMzLDE0NCwyLDU2XSk7aWYoNj09PXQpcmV0dXJuIG5ldyBVaW50OEFycmF5KFswLDIwMCwwLDEyOCwzMiwxMzIsMSwzOCw2NCw4LDEwMCwwLDEzMCw0OCw0LDE1MywwLDMzLDE0NCwyLDAsMTc4LDAsMzIsOCwyMjRdKX1lbHNle2lmKDE9PT10KXJldHVybiBuZXcgVWludDhBcnJheShbMSw2NCwzNCwxMjgsMTYzLDc4LDIzMCwxMjgsMTg2LDgsMCwwLDAsMjgsNiwyNDEsMTkzLDEwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDkwLDk0XSk7aWYoMj09PXQpcmV0dXJuIG5ldyBVaW50OEFycmF5KFsxLDY0LDM0LDEyOCwxNjMsOTQsMjMwLDEyOCwxODYsOCwwLDAsMCwwLDE0OSwwLDYsMjQxLDE2MSwxMCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5MCw5NF0pO2lmKDM9PT10KXJldHVybiBuZXcgVWludDhBcnJheShbMSw2NCwzNCwxMjgsMTYzLDk0LDIzMCwxMjgsMTg2LDgsMCwwLDAsMCwxNDksMCw2LDI0MSwxNjEsMTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTAsOTRdKX1yZXR1cm4gbnVsbH19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y2xhc3Mgc3tjb25zdHJ1Y3Rvcigpe3RoaXMubWltZXR5cGU9XCJcIix0aGlzLmluaXQ9bnVsbCx0aGlzLmRhdGE9W119fXQuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMuc291cmNlcz17fX1nZXRTb3VyY2UoZSl7cmV0dXJuIHRoaXMuc291cmNlc1tlXX1jcmVhdGVTb3VyY2UoZSl7cmV0dXJuIHRoaXMuc291cmNlc1tlXT1uZXcgcyx0aGlzLnNvdXJjZXNbZV19Y2xlYXIoKXt0aGlzLnNvdXJjZXM9e319ZGVzdHJveSgpe3RoaXMuc291cmNlcz17fX19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9aSgwKTtjb25zdCByPXtOVU1CRVI6MCxCT09MRUFOOjEsU1RSSU5HOjIsT0JKRUNUOjMsTUlYX0FSUkFZOjgsT0JKRUNUX0VORDo5LFNUUklDVF9BUlJBWToxMCxEQVRFOjExLExPTkVfU1RSSU5HOjEyfTt0LmRlZmF1bHQ9Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLm9mZnNldD0wLHRoaXMucmVhZE9mZnNldD10aGlzLm9mZnNldH1yZXNvbHZlKGUsdCl7aWYodDwzKXRocm93IG5ldyBFcnJvcihcIm5vdCBlbm91Z2ggZGF0YSBmb3IgbWV0YWluZm9cIik7Y29uc3QgaT17fSxzPXRoaXMucGFyc2VWYWx1ZShlKSxyPXRoaXMucGFyc2VWYWx1ZShlLHQtcy5ib2R5U2l6ZSk7cmV0dXJuIGlbcy5kYXRhXT1yLmRhdGEsdGhpcy5yZXNldFN0YXR1cygpLGl9cmVzZXRTdGF0dXMoKXt0aGlzLm9mZnNldD0wLHRoaXMucmVhZE9mZnNldD10aGlzLm9mZnNldH1wYXJzZVN0cmluZyhlKXtjb25zdCB0PW5ldyBEYXRhVmlldyhlLHRoaXMucmVhZE9mZnNldCkuZ2V0VWludDE2KDAsIXMuaXNMZSk7bGV0IGk9XCJcIjtpPXQ+MD9zLlVURjguZGVjb2RlKG5ldyBVaW50OEFycmF5KGUsdGhpcy5yZWFkT2Zmc2V0KzIsdCkpOlwiXCI7bGV0IHI9dCsyO3JldHVybiB0aGlzLnJlYWRPZmZzZXQrPXIse2RhdGE6aSxib2R5U2l6ZTp0KzJ9fXBhcnNlRGF0ZShlLHQpe2NvbnN0IGk9bmV3IERhdGFWaWV3KGUsdGhpcy5yZWFkT2Zmc2V0LHQpO2xldCByPWkuZ2V0RmxvYXQ2NCgwLCFzLmlzTGUpO3JldHVybiByKz02MCppLmdldEludDE2KDgsIXMuaXNMZSkqMWUzLHRoaXMucmVhZE9mZnNldCs9MTAse2RhdGE6bmV3IERhdGUociksYm9keVNpemU6MTB9fXBhcnNlT2JqZWN0KGUsdCl7Y29uc3QgaT10aGlzLnBhcnNlU3RyaW5nKGUsdCkscz10aGlzLnBhcnNlVmFsdWUoZSx0LWkuYm9keVNpemUpO3JldHVybntkYXRhOntuYW1lOmkuZGF0YSx2YWx1ZTpzLmRhdGF9LGJvZHlTaXplOmkuYm9keVNpemUrcy5ib2R5U2l6ZSxpc09iakVuZDpzLmlzT2JqRW5kfX1wYXJzZUxvbmdTdHJpbmcoZSl7Y29uc3QgdD1uZXcgRGF0YVZpZXcoZSx0aGlzLnJlYWRPZmZzZXQpLmdldFVpbnQzMigwLCFzLmlzTGUpO2xldCBpPVwiXCI7cmV0dXJuIGk9dD4wP3MuVVRGOC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoZSx0aGlzLnJlYWRPZmZzZXQrMix0KSk6XCJcIix0aGlzLnJlYWRPZmZzZXQrPXQrNCx7ZGF0YTppLGJvZHlTaXplOnQrNH19cGFyc2VWYWx1ZShlLHQpe2xldCBpPW5ldyBBcnJheUJ1ZmZlcjtpPWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj9lOmUuYnVmZmVyO2NvbnN0e05VTUJFUjphLEJPT0xFQU46bixTVFJJTkc6byxPQkpFQ1Q6ZCxNSVhfQVJSQVk6bCxPQkpFQ1RfRU5EOmgsU1RSSUNUX0FSUkFZOnUsREFURTpjLExPTkVfU1RSSU5HOmZ9PXIscD1uZXcgRGF0YVZpZXcoaSx0aGlzLnJlYWRPZmZzZXQsdCk7bGV0IG09ITE7Y29uc3QgZz1wLmdldFVpbnQ4KDApO2xldCBfPTE7dGhpcy5yZWFkT2Zmc2V0Kz0xO2xldCB5PW51bGw7c3dpdGNoKGcpe2Nhc2UgYTp5PXAuZ2V0RmxvYXQ2NCgxLCFzLmlzTGUpLHRoaXMucmVhZE9mZnNldCs9OCxfKz04O2JyZWFrO2Nhc2Ugbjp5PSEhcC5nZXRVaW50OCgxKSx0aGlzLnJlYWRPZmZzZXQrPTEsXys9MTticmVhaztjYXNlIG86e2NvbnN0IGU9dGhpcy5wYXJzZVN0cmluZyhpKTt5PWUuZGF0YSxfKz1lLmJvZHlTaXplO2JyZWFrfWNhc2UgZDp7eT17fTtsZXQgZT0wO2ZvcigxNjc3NzIxNSZwLmdldFVpbnQzMih0LTQsIXMuaXNMZSkmJihlPTMpO188dC00Oyl7Y29uc3Qgcz10aGlzLnBhcnNlT2JqZWN0KGksdC1fLWUpO2lmKHMuaXNPYmplY3RFbmQpYnJlYWs7eVtzLmRhdGEubmFtZV09cy5kYXRhLnZhbHVlLF8rPXMuYm9keVNpemV9aWYoXzw9dC0zKXs5PT09KDE2Nzc3MjE1JnAuZ2V0VWludDMyKF8tMSwhcy5pc0xlKSkmJih0aGlzLnJlYWRPZmZzZXQrPTMsXys9Myl9YnJlYWt9Y2FzZSBsOnt5PXt9LF8rPTQsdGhpcy5yZWFkT2Zmc2V0Kz00O2xldCBlPTA7Zm9yKDk9PSgxNjc3NzIxNSZwLmdldFVpbnQzMih0LTQsIXMuaXNMZSkpJiYoZT0zKTtfPHQtODspe2NvbnN0IHM9dGhpcy5wYXJzZU9iamVjdChpLHQtXy1lKTtpZihzLmlzT2JqZWN0RW5kKWJyZWFrO3lbcy5kYXRhLm5hbWVdPXMuZGF0YS52YWx1ZSxfKz1zLmJvZHlTaXplfWlmKF88PXQtMyl7OT09PSgxNjc3NzIxNSZwLmdldFVpbnQzMihfLTEsIXMuaXNMZSkpJiYoXys9Myx0aGlzLnJlYWRPZmZzZXQrPTMpfWJyZWFrfWNhc2UgaDp5PW51bGwsbT0hMDticmVhaztjYXNlIHU6e3k9W107Y29uc3QgZT1wLmdldFVpbnQzMigxLCFzLmlzTGUpO18rPTQsdGhpcy5yZWFkT2Zmc2V0Kz00O2ZvcihsZXQgcz0wO3M8ZTtzKyspe2NvbnN0IGU9dGhpcy5wYXJzZVZhbHVlKGksdC1fKTt5LnB1c2goZS5kYXRhKSxfKz1lLmJvZHlTaXplfWJyZWFrfWNhc2UgYzp7Y29uc3QgZT10aGlzLnBhcnNlRGF0ZShpLHQtMSk7eT1lLmRhdGEsXys9ZS5ib2R5U2l6ZTticmVha31jYXNlIGY6e2NvbnN0IGU9dGhpcy5wYXJzZUxvbmdTdHJpbmcoaSx0LTEpO3k9ZS5kYXRhLF8rPWUuYm9keVNpemU7YnJlYWt9ZGVmYXVsdDpfPXR9cmV0dXJue2RhdGE6eSxib2R5U2l6ZTpfLGlzT2JqRW5kOm19fX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9e01wNFJlbXV4ZXI6aSgzNykuZGVmYXVsdH19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcyxyPWkoMCksYT1pKDM4KSxuPShzPWEpJiZzLl9fZXNNb2R1bGU/czp7ZGVmYXVsdDpzfTtjb25zdCBvPXIuRVZFTlRTLlJFTVVYX0VWRU5UUztjbGFzcyBke2NvbnN0cnVjdG9yKCl7dGhpcy5fZHRzQmFzZT0wLHRoaXMuX2lzRHRzQmFzZUluaXRlZD0hMSx0aGlzLl9hdWRpb05leHREdHM9bnVsbCx0aGlzLl92aWRlb05leHREdHM9bnVsbCx0aGlzLl92aWRlb1NlZ21lbnRMaXN0PW5ldyByLk1lZGlhU2VnbWVudExpc3QoXCJ2aWRlb1wiKSx0aGlzLl9hdWRpb1NlZ21lbnRMaXN0PW5ldyByLk1lZGlhU2VnbWVudExpc3QoXCJhdWRpb1wiKTtjb25zdHticm93c2VyOmV9PXIuc25pZmZlcjt0aGlzLl9maWxsU2lsZW5jZUZyYW1lPVwiaWVcIj09PWUsdGhpcy5pc0ZpcnN0VmlkZW89ITAsdGhpcy5pc0ZpcnN0QXVkaW89ITAsdGhpcy52aWRlb0FsbER1cmF0aW9uPTAsdGhpcy5hdWRpb0FsbER1cmF0aW9uPTB9aW5pdCgpe3RoaXMub24oby5SRU1VWF9NRURJQSx0aGlzLnJlbXV4LmJpbmQodGhpcykpLHRoaXMub24oby5SRU1VWF9NRVRBREFUQSx0aGlzLm9uTWV0YURhdGFSZWFkeS5iaW5kKHRoaXMpKSx0aGlzLm9uKG8uREVURUNUX0NIQU5HRV9TVFJFQU0sdGhpcy5yZXNldER0c0Jhc2UuYmluZCh0aGlzKSl9ZGVzdHJveSgpe3RoaXMuX2R0c0Jhc2U9LTEsdGhpcy5fZHRzQmFzZUluaXRlZD0hMSx0aGlzLl92aWRlb05leHREdHM9bnVsbCx0aGlzLl9hdWRpb05leHREdHM9bnVsbCx0aGlzLl92aWRlb1NlZ21lbnRMaXN0LmNsZWFyKCksdGhpcy5fYXVkaW9TZWdtZW50TGlzdC5jbGVhcigpLHRoaXMuX3ZpZGVvU2VnbWVudExpc3Q9bnVsbCx0aGlzLl9hdWRpb1NlZ21lbnRMaXN0PW51bGx9cmVtdXgoKXtjb25zdHthdWRpb1RyYWNrOmUsdmlkZW9UcmFjazp0fT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiVFJBQ0tTXCIpOyF0aGlzLl9pc0R0c0Jhc2VJbml0ZWQmJnRoaXMuY2FsY0R0c0Jhc2UoZSx0KSx0aGlzLl9yZW11eFZpZGVvKHQpLHRoaXMuX3JlbXV4QXVkaW8oZSl9cmVzZXREdHNCYXNlKCl7dGhpcy5fZHRzQmFzZT0wLHRoaXMuX2R0c0Jhc2VJbml0ZWQ9ITF9c2Vlaygpe3RoaXMuX3ZpZGVvTmV4dER0cz1udWxsLHRoaXMuX2F1ZGlvTmV4dER0cz1udWxsLHRoaXMuX3ZpZGVvU2VnbWVudExpc3QuY2xlYXIoKSx0aGlzLl9hdWRpb1NlZ21lbnRMaXN0LmNsZWFyKCl9b25NZXRhRGF0YVJlYWR5KGUpe2xldCB0O2lmKFwiYXVkaW9cIj09PWUpe2NvbnN0e2F1ZGlvVHJhY2s6ZX09dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZShcIlRSQUNLU1wiKTt0PWV9ZWxzZXtjb25zdHt2aWRlb1RyYWNrOmV9PXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJUUkFDS1NcIik7dD1lfWxldCBpPXRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJQUkVfU09VUkNFX0JVRkZFUlwiKSxzPWkuZ2V0U291cmNlKGUpO3N8fChzPWkuY3JlYXRlU291cmNlKGUpKSxzLm1pbWV0eXBlPXQubWV0YS5jb2RlYyxzLmluaXQ9dGhpcy5yZW11eEluaXRTZWdtZW50KGUsdC5tZXRhKSx0aGlzLmVtaXQoby5JTklUX1NFR01FTlQsZSl9cmVtdXhJbml0U2VnbWVudChlLHQpe2xldCBpPW5ldyByLkJ1ZmZlcixzPW4uZGVmYXVsdC5mdHlwKCksYT1uLmRlZmF1bHQubW9vdih7dHlwZTplLG1ldGE6dH0pO3JldHVybiBpLndyaXRlKHMsYSksaX1jYWxjRHRzQmFzZShlLHQpe2lmKCFlLnNhbXBsZXMubGVuZ3RoJiYhdC5zYW1wbGVzLmxlbmd0aClyZXR1cm47bGV0IGk9MS8wLHM9MS8wO2Uuc2FtcGxlcyYmZS5zYW1wbGVzLmxlbmd0aCYmKGk9ZS5zYW1wbGVzWzBdLmR0cyksdC5zYW1wbGVzJiZ0LnNhbXBsZXMubGVuZ3RoJiYocz10LnNhbXBsZXNbMF0uZHRzKSx0aGlzLl9kdHNCYXNlPU1hdGgubWluKGkscyksdGhpcy5faXNEdHNCYXNlSW5pdGVkPSEwfV9yZW11eFZpZGVvKGUpe2NvbnN0IHQ9ZTtpZighZS5zYW1wbGVzfHwhZS5zYW1wbGVzLmxlbmd0aClyZXR1cm47bGV0e3NhbXBsZXM6aX09dCxzPS0xLGE9bnVsbDtjb25zdCBkPVtdLGw9e3NhbXBsZXM6W119O2Zvcig7aS5sZW5ndGg7KXtjb25zdCBlPWkuc2hpZnQoKSx7aXNLZXlmcmFtZTp0LG9wdGlvbnM6cn09ZTtpZighdGhpcy5pc0ZpcnN0QXVkaW8mJnImJnIubWV0YSl7YT10aGlzLnJlbXV4SW5pdFNlZ21lbnQoXCJ2aWRlb1wiLHIubWV0YSksci5tZXRhPW51bGwsaS51bnNoaWZ0KGUpLHIuaXNDb250aW51ZXx8dGhpcy5yZXNldER0c0Jhc2UoKTticmVha31sZXQgbixvLGg9ZS5kdHMtdGhpcy5fZHRzQmFzZTstMT09PXMmJihzPWgpLHZvaWQgMCE9PWUucHRzJiYobj0obz1lLnB0cy10aGlzLl9kdHNCYXNlKS1oKSx2b2lkIDAhPT1lLmN0cyYmKG89ZS5jdHMraCxuPWUuY3RzKTtsZXQgdT17YnVmZmVyOltdLHNpemU6MH07bC5zYW1wbGVzLnB1c2godSksdS5idWZmZXIucHVzaChlLmRhdGEpLHUuc2l6ZSs9ZS5kYXRhLmJ5dGVMZW5ndGg7bGV0IGM9MDtpZihpLmxlbmd0aD49MSl7Yz1pWzBdLmR0cy10aGlzLl9kdHNCYXNlLWh9ZWxzZSBjPWQubGVuZ3RoPj0xP2RbZC5sZW5ndGgtMV0uZHVyYXRpb246dGhpcy52aWRlb01ldGEucmVmU2FtcGxlRHVyYXRpb247dGhpcy52aWRlb0FsbER1cmF0aW9uKz1jLGQucHVzaCh7ZHRzOmgsY3RzOm4scHRzOm8sZGF0YTplLmRhdGEsc2l6ZTplLmRhdGEuYnl0ZUxlbmd0aCxpc0tleWZyYW1lOnQsZHVyYXRpb246YyxmbGFnczp7aXNMZWFkaW5nOjAsZGVwZW5kc09uOnQ/MjoxLGlzRGVwZW5kZWRPbjp0PzE6MCxoYXNSZWR1bmRhbmN5OjAsaXNOb25TeW5jOnQ/MDoxfSxvcmlnaW5EdHM6aCx0eXBlOlwidmlkZW9cIn0pfWxldCBoPW5ldyByLkJ1ZmZlcjtpZihkLmxlbmd0aCl7Y29uc3QgZT1uLmRlZmF1bHQubW9vZih7aWQ6dC5tZXRhLmlkLHRpbWU6cyxzYW1wbGVzOmR9KSxpPW4uZGVmYXVsdC5tZGF0KGwpO2gud3JpdGUoZSxpKSx0aGlzLndyaXRlVG9Tb3VyY2UoXCJ2aWRlb1wiLGgpfWlmKGEmJih0aGlzLndyaXRlVG9Tb3VyY2UoXCJ2aWRlb1wiLGEpLGkubGVuZ3RoKSlyZXR1cm4gdC5zYW1wbGVzPWksdGhpcy5fcmVtdXhWaWRlbyh0KTt0aGlzLmlzRmlyc3RWaWRlbz0hMSx0aGlzLmVtaXQoby5NRURJQV9TRUdNRU5ULFwidmlkZW9cIik7Y29uc3QgdT1kW2QubGVuZ3RoLTFdO3RoaXMuX3ZpZGVvTmV4dER0cz11LmR0cyt1LmR1cmF0aW9uLHQuc2FtcGxlcz1bXSx0Lmxlbmd0aD0wfV9yZW11eEF1ZGlvKGUpe2NvbnN0e3NhbXBsZXM6dH09ZTtsZXQgaT0tMSxzPVtdLGE9bnVsbDtjb25zdCBkPXtzYW1wbGVzOltdfTtpZighdHx8IXQubGVuZ3RoKXJldHVybjtsZXQgbD0hMTtmb3IoO3QubGVuZ3RoOyl7bGV0IGU9dC5zaGlmdCgpO2NvbnN0e2RhdGE6cixvcHRpb25zOm59PWU7aWYoIXRoaXMuaXNGaXJzdEF1ZGlvJiZuJiZuLm1ldGEpe2E9dGhpcy5yZW11eEluaXRTZWdtZW50KFwiYXVkaW9cIixuLm1ldGEpLG4ubWV0YT1udWxsLHQudW5zaGlmdChlKSxuLmlzQ29udGludWV8fHRoaXMucmVzZXREdHNCYXNlKCk7YnJlYWt9bGV0IG89ZS5kdHMtdGhpcy5fZHRzQmFzZTtjb25zdCBoPW87bHx8KGk9byxsPSEwKTtsZXQgdT0wO2lmKHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQpdT10aGlzLmF1ZGlvTWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkO2Vsc2UgaWYodC5sZW5ndGg+PTEpe3U9dFswXS5kdHMtdGhpcy5fZHRzQmFzZS1vfWVsc2UgdT1zLmxlbmd0aD49MT9zW3MubGVuZ3RoLTFdLmR1cmF0aW9uOnRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uO3RoaXMuYXVkaW9BbGxEdXJhdGlvbis9dTtjb25zdCBjPXtkdHM6byxwdHM6byxjdHM6MCxzaXplOnIuYnl0ZUxlbmd0aCxkdXJhdGlvbjplLmR1cmF0aW9uP2UuZHVyYXRpb246dSxmbGFnczp7aXNMZWFkaW5nOjAsZGVwZW5kc09uOjIsaXNEZXBlbmRlZE9uOjEsaGFzUmVkdW5kYW5jeTowLGlzTm9uU3luYzowfSxpc0tleWZyYW1lOiEwLG9yaWdpbkR0czpoLHR5cGU6XCJhdWRpb1wifTtsZXQgZj17YnVmZmVyOltdLHNpemU6MH07Zi5idWZmZXIucHVzaChyKSxmLnNpemUrPXIuYnl0ZUxlbmd0aCxkLnNhbXBsZXMucHVzaChmKSxzLnB1c2goYyl9Y29uc3QgaD1uZXcgci5CdWZmZXI7aWYocy5sZW5ndGgpe2NvbnN0IHQ9bi5kZWZhdWx0Lm1vb2Yoe2lkOmUubWV0YS5pZCx0aW1lOmksc2FtcGxlczpzfSkscj1uLmRlZmF1bHQubWRhdChkKTtoLndyaXRlKHQsciksdGhpcy53cml0ZVRvU291cmNlKFwiYXVkaW9cIixoKX1pZihhJiYodGhpcy53cml0ZVRvU291cmNlKFwiYXVkaW9cIixhKSx0Lmxlbmd0aCkpcmV0dXJuIGUuc2FtcGxlcz10LHRoaXMuX3JlbXV4QXVkaW8oZSk7dGhpcy5pc0ZpcnN0QXVkaW89ITEsdGhpcy5lbWl0KG8uTUVESUFfU0VHTUVOVCxcImF1ZGlvXCIsaCk7Y29uc3QgdT1zW3MubGVuZ3RoLTFdO3RoaXMuX3ZpZGVvTmV4dER0cz11LmR0cyt1LmR1cmF0aW9uLGUuc2FtcGxlcz1bXSxlLmxlbmd0aD0wfXdyaXRlVG9Tb3VyY2UoZSx0KXtsZXQgaT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiUFJFX1NPVVJDRV9CVUZGRVJcIikscz1pLmdldFNvdXJjZShlKTtzfHwocz1pLmNyZWF0ZVNvdXJjZShlKSkscy5kYXRhLnB1c2godCl9aW5pdFNpbGVudEF1ZGlvKGUsdCl7Y29uc3QgaT1kLmdldFNpbGVudEZyYW1lKHRoaXMuX2F1ZGlvTWV0YS5jaGFubmVsQ291bnQpO3JldHVybntkdHM6ZSxwdHM6ZSxjdHM6MCxkdXJhdGlvbjp0LHVuaXQ6aSxzaXplOmkuYnl0ZUxlbmd0aCxvcmlnaW5EdHM6ZSx0eXBlOlwidmlkZW9cIn19Z2V0IHZpZGVvTWV0YSgpe3JldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKFwiVFJBQ0tTXCIpLnZpZGVvVHJhY2subWV0YX1nZXQgYXVkaW9NZXRhKCl7cmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoXCJUUkFDS1NcIikuYXVkaW9UcmFjay5tZXRhfXN0YXRpYyBnZXRTaWxlbnRGcmFtZShlKXtyZXR1cm4gMT09PWU/bmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDM1LDEyOF0pOjI9PT1lP25ldyBVaW50OEFycmF5KFszMywwLDczLDE0NCwyLDI1LDAsMzUsMTI4XSk6Mz09PWU/bmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDMyLDEzMiwxLDM4LDY0LDgsMTAwLDAsMTQyXSk6ND09PWU/bmV3IFVpbnQ4QXJyYXkoWzAsMjAwLDAsMTI4LDMyLDEzMiwxLDM4LDY0LDgsMTAwLDAsMTI4LDQ0LDEyOCw4LDIsNTZdKTo1PT09ZT9uZXcgVWludDhBcnJheShbMCwyMDAsMCwxMjgsMzIsMTMyLDEsMzgsNjQsOCwxMDAsMCwxMzAsNDgsNCwxNTMsMCwzMywxNDQsMiw1Nl0pOjY9PT1lP25ldyBVaW50OEFycmF5KFswLDIwMCwwLDEyOCwzMiwxMzIsMSwzOCw2NCw4LDEwMCwwLDEzMCw0OCw0LDE1MywwLDMzLDE0NCwyLDAsMTc4LDAsMzIsOCwyMjRdKTpudWxsfX10LmRlZmF1bHQ9ZH0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPWkoMCk7Y2xhc3MgcntzdGF0aWMgc2l6ZShlKXtyZXR1cm4gcy5CdWZmZXIud3JpdGVVaW50MzIoZSl9c3RhdGljIGluaXRCb3goZSx0LC4uLmkpe2NvbnN0IGE9bmV3IHMuQnVmZmVyO3JldHVybiBhLndyaXRlKHIuc2l6ZShlKSxyLnR5cGUodCksLi4uaSksYS5idWZmZXJ9c3RhdGljIGV4dGVuc2lvbihlLHQpe3JldHVybiBuZXcgVWludDhBcnJheShbZSx0Pj4xNiYyNTUsdD4+OCYyNTUsMjU1JnRdKX1zdGF0aWMgZnR5cCgpe3JldHVybiByLmluaXRCb3goMjQsXCJmdHlwXCIsbmV3IFVpbnQ4QXJyYXkoWzEwNSwxMTUsMTExLDEwOSwwLDAsMCwxLDEwNSwxMTUsMTExLDEwOSw5NywxMTgsOTksNDldKSl9c3RhdGljIG1vb3Yoe3R5cGU6ZSxtZXRhOnR9KXtsZXQgaSxzPTgsYT1yLm12aGQodC5kdXJhdGlvbix0LnRpbWVzY2FsZSk7aT1cInZpZGVvXCI9PT1lP3IudmlkZW9UcmFrKHQpOnIuYXVkaW9UcmFrKHQpO2xldCBuPXIubXZleCh0LmR1cmF0aW9uLHQudGltZXNjYWxlfHwxZTMsdC5pZCk7cmV0dXJuW2EsaSxuXS5mb3JFYWNoKGU9PntzKz1lLmJ5dGVMZW5ndGh9KSxyLmluaXRCb3gocyxcIm1vb3ZcIixhLGksbil9c3RhdGljIG12aGQoZSx0PTFlMyl7bGV0IGk9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLHQ+Pj4yNCYyNTUsdD4+PjE2JjI1NSx0Pj4+OCYyNTUsMjU1JnQsZT4+PjI0JjI1NSxlPj4+MTYmMjU1LGU+Pj44JjI1NSwyNTUmZSwwLDEsMCwwLDEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw2NCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyNTUsMjU1LDI1NSwyNTVdKTtyZXR1cm4gci5pbml0Qm94KDgraS5sZW5ndGgsXCJtdmhkXCIsbmV3IFVpbnQ4QXJyYXkoaSkpfXN0YXRpYyB2aWRlb1RyYWsoZSl7bGV0IHQ9OCxpPXIudGtoZCh7aWQ6MSxkdXJhdGlvbjplLmR1cmF0aW9uLHRpbWVzY2FsZTplLnRpbWVzY2FsZXx8MWUzLHdpZHRoOmUucHJlc2VudFdpZHRoLGhlaWdodDplLnByZXNlbnRIZWlnaHQsdHlwZTpcInZpZGVvXCJ9KSxzPXIubWRpYSh7dHlwZTpcInZpZGVvXCIsdGltZXNjYWxlOmUudGltZXNjYWxlfHwxZTMsZHVyYXRpb246ZS5kdXJhdGlvbixhdmNjOmUuYXZjYyxwYXJSYXRpbzplLnBhclJhdGlvLHdpZHRoOmUucHJlc2VudFdpZHRoLGhlaWdodDplLnByZXNlbnRIZWlnaHR9KTtyZXR1cm5baSxzXS5mb3JFYWNoKGU9Pnt0Kz1lLmJ5dGVMZW5ndGh9KSxyLmluaXRCb3godCxcInRyYWtcIixpLHMpfXN0YXRpYyBhdWRpb1RyYWsoZSl7bGV0IHQ9OCxpPXIudGtoZCh7aWQ6MixkdXJhdGlvbjplLmR1cmF0aW9uLHRpbWVzY2FsZTplLnRpbWVzY2FsZXx8MWUzLHdpZHRoOjAsaGVpZ2h0OjAsdHlwZTpcImF1ZGlvXCJ9KSxzPXIubWRpYSh7dHlwZTpcImF1ZGlvXCIsdGltZXNjYWxlOmUudGltZXNjYWxlfHwxZTMsZHVyYXRpb246ZS5kdXJhdGlvbixjaGFubmVsQ291bnQ6ZS5jaGFubmVsQ291bnQsc2FtcGxlcmF0ZTplLnNhbXBsZVJhdGUsY29uZmlnOmUuY29uZmlnfSk7cmV0dXJuW2ksc10uZm9yRWFjaChlPT57dCs9ZS5ieXRlTGVuZ3RofSksci5pbml0Qm94KHQsXCJ0cmFrXCIsaSxzKX1zdGF0aWMgdGtoZChlKXtsZXQgdD1lLmlkLGk9ZS5kdXJhdGlvbixzPWUud2lkdGgsYT1lLmhlaWdodCxuPW5ldyBVaW50OEFycmF5KFswLDAsMCw3LDAsMCwwLDAsMCwwLDAsMCx0Pj4+MjQmMjU1LHQ+Pj4xNiYyNTUsdD4+PjgmMjU1LDI1NSZ0LDAsMCwwLDAsaT4+PjI0JjI1NSxpPj4+MTYmMjU1LGk+Pj44JjI1NSwyNTUmaSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw2NCwwLDAsMCxzPj4+OCYyNTUsMjU1JnMsMCwwLGE+Pj44JjI1NSwyNTUmYSwwLDBdKTtyZXR1cm4gci5pbml0Qm94KDgrbi5ieXRlTGVuZ3RoLFwidGtoZFwiLG4pfXN0YXRpYyBlZHRzKGUpe2xldCB0PW5ldyBzLkJ1ZmZlcixpPWUuZHVyYXRpb24sYT1lLm1lZGlhVGltZTtyZXR1cm4gdC53cml0ZShyLnNpemUoMzYpLHIudHlwZShcImVkdHNcIikpLHQud3JpdGUoci5zaXplKDI4KSxyLnR5cGUoXCJlbHN0XCIpKSx0LndyaXRlKG5ldyBVaW50OEFycmF5KFswLDAsMCwxLGk+PjI0JjI1NSxpPj4xNiYyNTUsaT4+OCYyNTUsMjU1JmksYT4+MjQmMjU1LGE+PjE2JjI1NSxhPj44JjI1NSwyNTUmYSwwLDAsMCwxXSkpLHQuYnVmZmVyfXN0YXRpYyBtZGlhKGUpe2xldCB0PTgsaT1yLm1kaGQoZS50aW1lc2NhbGUsZS5kdXJhdGlvbikscz1yLmhkbHIoZS50eXBlKSxhPXIubWluZihlKTtyZXR1cm5baSxzLGFdLmZvckVhY2goZT0+e3QrPWUuYnl0ZUxlbmd0aH0pLHIuaW5pdEJveCh0LFwibWRpYVwiLGkscyxhKX1zdGF0aWMgbWRoZChlPTFlMyx0KXtsZXQgaT1uZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwwLGU+Pj4yNCYyNTUsZT4+PjE2JjI1NSxlPj4+OCYyNTUsMjU1JmUsdD4+PjI0JjI1NSx0Pj4+MTYmMjU1LHQ+Pj44JjI1NSwyNTUmdCw4NSwxOTYsMCwwXSk7cmV0dXJuIHIuaW5pdEJveCgxMitpLmJ5dGVMZW5ndGgsXCJtZGhkXCIsci5leHRlbnNpb24oMCwwKSxpKX1zdGF0aWMgaGRscihlKXtsZXQgdD1bMCwwLDAsMCwwLDAsMCwwLDExOCwxMDUsMTAwLDEwMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw4NiwxMDUsMTAwLDEwMSwxMTEsNzIsOTcsMTEwLDEwMCwxMDgsMTAxLDExNCwwXTtyZXR1cm5cImF1ZGlvXCI9PT1lJiYodC5zcGxpY2UoOCw0LDExNSwxMTEsMTE3LDExMCksdC5zcGxpY2UoMjQsMTMsODMsMTExLDExNywxMTAsMTAwLDcyLDk3LDExMCwxMDAsMTA4LDEwMSwxMTQsMCkpLHIuaW5pdEJveCg4K3QubGVuZ3RoLFwiaGRsclwiLG5ldyBVaW50OEFycmF5KHQpKX1zdGF0aWMgbWluZihlKXtsZXQgdD04LGk9XCJ2aWRlb1wiPT09ZS50eXBlP3Iudm1oZCgpOnIuc21oZCgpLHM9ci5kaW5mKCksYT1yLnN0YmwoZSk7cmV0dXJuW2kscyxhXS5mb3JFYWNoKGU9Pnt0Kz1lLmJ5dGVMZW5ndGh9KSxyLmluaXRCb3godCxcIm1pbmZcIixpLHMsYSl9c3RhdGljIHZtaGQoKXtyZXR1cm4gci5pbml0Qm94KDIwLFwidm1oZFwiLG5ldyBVaW50OEFycmF5KFswLDAsMCwxLDAsMCwwLDAsMCwwLDAsMF0pKX1zdGF0aWMgc21oZCgpe3JldHVybiByLmluaXRCb3goMTYsXCJzbWhkXCIsbmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMF0pKX1zdGF0aWMgZGluZigpe2xldCBlPW5ldyBzLkJ1ZmZlcjtyZXR1cm4gZS53cml0ZShyLnNpemUoMzYpLHIudHlwZShcImRpbmZcIiksci5zaXplKDI4KSxyLnR5cGUoXCJkcmVmXCIpLG5ldyBVaW50OEFycmF5KFswLDAsMCwwLDAsMCwwLDEsMCwwLDAsMTIsMTE3LDExNCwxMDgsMzIsMCwwLDAsMV0pKSxlLmJ1ZmZlcn1zdGF0aWMgc3RibChlKXtsZXQgdD04LGk9ci5zdHNkKGUpLHM9ci5zdHRzKCksYT1yLnN0c2MoKSxuPXIuc3RzeigpLG89ci5zdGNvKCk7cmV0dXJuW2kscyxhLG4sb10uZm9yRWFjaChlPT57dCs9ZS5ieXRlTGVuZ3RofSksci5pbml0Qm94KHQsXCJzdGJsXCIsaSxzLGEsbixvKX1zdGF0aWMgc3RzZChlKXtsZXQgdDtyZXR1cm4gdD1cImF1ZGlvXCI9PT1lLnR5cGU/ci5tcDRhKGUpOnIuYXZjMShlKSxyLmluaXRCb3goMTYrdC5ieXRlTGVuZ3RoLFwic3RzZFwiLHIuZXh0ZW5zaW9uKDAsMCksbmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDFdKSx0KX1zdGF0aWMgbXA0YShlKXtsZXQgdD1uZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwxLDAsMCwwLDAsMCwwLDAsMCwwLGUuY2hhbm5lbENvdW50LDAsMTYsMCwwLDAsMCxlLnNhbXBsZXJhdGU+PjgmMjU1LDI1NSZlLnNhbXBsZXJhdGUsMCwwXSksaT1yLmVzZHMoZS5jb25maWcpO3JldHVybiByLmluaXRCb3goOCt0LmJ5dGVMZW5ndGgraS5ieXRlTGVuZ3RoLFwibXA0YVwiLHQsaSl9c3RhdGljIGVzZHMoZT1bNDMsMTQ2LDgsMF0pe2NvbnN0IHQ9ZS5sZW5ndGg7bGV0IGk9bmV3IHMuQnVmZmVyLGE9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMywyMyt0LDAsMSwwLDQsMTUrdCw2NCwyMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNV0uY29uY2F0KFt0XSkuY29uY2F0KGUpLmNvbmNhdChbNiwxLDJdKSk7cmV0dXJuIGkud3JpdGUoci5zaXplKDgrYS5ieXRlTGVuZ3RoKSxyLnR5cGUoXCJlc2RzXCIpLGEpLGkuYnVmZmVyfXN0YXRpYyBhdmMxKGUpe2xldCB0PW5ldyBzLkJ1ZmZlcixpPWUud2lkdGgsYT1lLmhlaWdodCxuPWUucGFyUmF0aW8uaGVpZ2h0LG89ZS5wYXJSYXRpby53aWR0aCxkPWUuYXZjYyxsPW5ldyBVaW50OEFycmF5KFswLDAsMCwwLDAsMCwwLDEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCxpPj44JjI1NSwyNTUmaSxhPj44JjI1NSwyNTUmYSwwLDcyLDAsMCwwLDcyLDAsMCwwLDAsMCwwLDAsMSwxOCwxMDAsOTcsMTA1LDEwOCwxMjEsMTA5LDExMSwxMTYsMTA1LDExMSwxMTAsNDcsMTA0LDEwOCwxMTUsNDYsMTA2LDExNSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMjQsMTcsMTddKSxoPW5ldyBVaW50OEFycmF5KFswLDI4LDE1NiwxMjgsMCw0NSwxOTgsMTkyLDAsNDUsMTk4LDE5Ml0pLHU9bmV3IFVpbnQ4QXJyYXkoW24+PjI0LG4+PjE2JjI1NSxuPj44JjI1NSwyNTUmbixvPj4yNCxvPj4xNiYyNTUsbz4+OCYyNTUsMjU1Jm9dKTtyZXR1cm4gdC53cml0ZShyLnNpemUoNDArbC5ieXRlTGVuZ3RoK2QuYnl0ZUxlbmd0aCtoLmJ5dGVMZW5ndGgpLHIudHlwZShcImF2YzFcIiksbCxyLnNpemUoOCtkLmJ5dGVMZW5ndGgpLHIudHlwZShcImF2Y0NcIiksZCxyLnNpemUoMjApLHIudHlwZShcImJ0cnRcIiksaCxyLnNpemUoMTYpLHIudHlwZShcInBhc3BcIiksdSksdC5idWZmZXJ9c3RhdGljIHN0dHMoKXtsZXQgZT1uZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwwXSk7cmV0dXJuIHIuaW5pdEJveCgxNixcInN0dHNcIixlKX1zdGF0aWMgc3RzYygpe2xldCBlPW5ldyBVaW50OEFycmF5KFswLDAsMCwwLDAsMCwwLDBdKTtyZXR1cm4gci5pbml0Qm94KDE2LFwic3RzY1wiLGUpfXN0YXRpYyBzdGNvKCl7bGV0IGU9bmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMF0pO3JldHVybiByLmluaXRCb3goMTYsXCJzdGNvXCIsZSl9c3RhdGljIHN0c3ooKXtsZXQgZT1uZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdKTtyZXR1cm4gci5pbml0Qm94KDIwLFwic3RzelwiLGUpfXN0YXRpYyBtdmV4KGUsdD0xZTMsaSl7bGV0IGE9bmV3IHMuQnVmZmVyLG49cy5CdWZmZXIud3JpdGVVaW50MzIoZSk7cmV0dXJuIGEud3JpdGUoci5zaXplKDU2KSxyLnR5cGUoXCJtdmV4XCIpLHIuc2l6ZSgxNiksci50eXBlKFwibWVoZFwiKSxyLmV4dGVuc2lvbigwLDApLG4sci50cmV4KGkpKSxhLmJ1ZmZlcn1zdGF0aWMgdHJleChlKXtsZXQgdD1uZXcgVWludDhBcnJheShbMCwwLDAsMCxlPj4yNCxlPj4xNiYyNTUsZT4+OCYyNTUsMjU1JmUsMCwwLDAsMSwwLDAsMCwwLDAsMCwwLDAsMCwxLDAsMV0pO3JldHVybiByLmluaXRCb3goOCt0LmJ5dGVMZW5ndGgsXCJ0cmV4XCIsdCl9c3RhdGljIG1vb2YoZSl7bGV0IHQ9OCxpPXIubWZoZCgpLHM9ci50cmFmKGUpO3JldHVybltpLHNdLmZvckVhY2goZT0+e3QrPWUuYnl0ZUxlbmd0aH0pLHIuaW5pdEJveCh0LFwibW9vZlwiLGkscyl9c3RhdGljIG1maGQoKXtsZXQgZT1zLkJ1ZmZlci53cml0ZVVpbnQzMihyLnNlcXVlbmNlKTtyZXR1cm4gci5zZXF1ZW5jZSs9MSxyLmluaXRCb3goMTYsXCJtZmhkXCIsci5leHRlbnNpb24oMCwwKSxlKX1zdGF0aWMgdHJhZihlKXtsZXQgdD04LGk9ci50ZmhkKGUuaWQpLHM9ci50ZmR0KGUudGltZSksYT1yLnNkdHAoZSksbj1yLnRydW4oZSxhLmJ5dGVMZW5ndGgpO3JldHVybltpLHMsbixhXS5mb3JFYWNoKGU9Pnt0Kz1lLmJ5dGVMZW5ndGh9KSxyLmluaXRCb3godCxcInRyYWZcIixpLHMsbixhKX1zdGF0aWMgdGZoZChlKXtsZXQgdD1zLkJ1ZmZlci53cml0ZVVpbnQzMihlKTtyZXR1cm4gci5pbml0Qm94KDE2LFwidGZoZFwiLHIuZXh0ZW5zaW9uKDAsMCksdCl9c3RhdGljIHRmZHQoZSl7cmV0dXJuIHIuaW5pdEJveCgxNixcInRmZHRcIixyLmV4dGVuc2lvbigwLDApLHMuQnVmZmVyLndyaXRlVWludDMyKGUpKX1zdGF0aWMgdHJ1bihlLHQpe2xldCBpPW5ldyBzLkJ1ZmZlcixhPXMuQnVmZmVyLndyaXRlVWludDMyKGUuc2FtcGxlcy5sZW5ndGgpLG49cy5CdWZmZXIud3JpdGVVaW50MzIoOTIrMTYqZS5zYW1wbGVzLmxlbmd0aCt0KTtyZXR1cm4gaS53cml0ZShyLnNpemUoMjArMTYqZS5zYW1wbGVzLmxlbmd0aCksci50eXBlKFwidHJ1blwiKSxuZXcgVWludDhBcnJheShbMCwwLDE1LDFdKSxhLG4pLGUuc2FtcGxlcy5mb3JFYWNoKGU9Pntjb25zdCB0PWUuZmxhZ3M7aS53cml0ZShuZXcgVWludDhBcnJheShbZS5kdXJhdGlvbj4+PjI0JjI1NSxlLmR1cmF0aW9uPj4+MTYmMjU1LGUuZHVyYXRpb24+Pj44JjI1NSwyNTUmZS5kdXJhdGlvbixlLnNpemU+Pj4yNCYyNTUsZS5zaXplPj4+MTYmMjU1LGUuc2l6ZT4+PjgmMjU1LDI1NSZlLnNpemUsdC5pc0xlYWRpbmc8PDJ8dC5kZXBlbmRzT24sdC5pc0RlcGVuZGVkT248PDZ8dC5oYXNSZWR1bmRhbmN5PDw0fHQuaXNOb25TeW5jLDAsMCxlLmN0cz4+PjI0JjI1NSxlLmN0cz4+PjE2JjI1NSxlLmN0cz4+PjgmMjU1LDI1NSZlLmN0c10pKX0pLGkuYnVmZmVyfXN0YXRpYyBzZHRwKGUpe2xldCB0PW5ldyBzLkJ1ZmZlcjtyZXR1cm4gdC53cml0ZShyLnNpemUoMTIrZS5zYW1wbGVzLmxlbmd0aCksci50eXBlKFwic2R0cFwiKSxyLmV4dGVuc2lvbigwLDApKSxlLnNhbXBsZXMuZm9yRWFjaChlPT57Y29uc3QgaT1lLmZsYWdzLHM9aS5pc0xlYWRpbmc8PDZ8aS5kZXBlbmRzT248PDR8aS5pc0RlcGVuZGVkT248PDJ8aS5oYXNSZWR1bmRhbmN5O3Qud3JpdGUobmV3IFVpbnQ4QXJyYXkoW3NdKSl9KSx0LmJ1ZmZlcn1zdGF0aWMgbWRhdChlKXtsZXQgdD1uZXcgcy5CdWZmZXIsaT04O2Uuc2FtcGxlcy5mb3JFYWNoKGU9PntpKz1lLnNpemV9KSx0LndyaXRlKHIuc2l6ZShpKSxyLnR5cGUoXCJtZGF0XCIpKTtsZXQgYT1uZXcgVWludDhBcnJheShpKSxuPTA7cmV0dXJuIGEuc2V0KHQuYnVmZmVyLG4pLG4rPTgsZS5zYW1wbGVzLmZvckVhY2goZT0+e2UuYnVmZmVyLmZvckVhY2goZT0+e2Euc2V0KGUsbiksbis9ZS5ieXRlTGVuZ3RofSl9KSxhfX1yLnR5cGU9ZT0+bmV3IFVpbnQ4QXJyYXkoW2UuY2hhckNvZGVBdCgwKSxlLmNoYXJDb2RlQXQoMSksZS5jaGFyQ29kZUF0KDIpLGUuY2hhckNvZGVBdCgzKV0pLHIuc2VxdWVuY2U9MSx0LmRlZmF1bHQ9cn0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17RmV0Y2hMb2FkZXI6aSg0MCkuZGVmYXVsdH19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBzPWkoMCkuRVZFTlRTLkxPQURFUl9FVkVOVFMscj0wLGE9MSxuPTIsbz0zO3QuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3RvcihlKXt0aGlzLmNvbmZpZ3M9T2JqZWN0LmFzc2lnbih7fSxlKSx0aGlzLnVybD1udWxsLHRoaXMuc3RhdHVzPTAsdGhpcy5lcnJvcj1udWxsLHRoaXMuX3JlYWRlcj1udWxsLHRoaXMuX2NhbmNlbGVkPSExLHRoaXMuX2Rlc3Ryb3llZD0hMSx0aGlzLnJlYWR0eXBlPXRoaXMuY29uZmlncy5yZWFkdHlwZSx0aGlzLmJ1ZmZlcj10aGlzLmNvbmZpZ3MuYnVmZmVyfHxcIkxPQURFUl9CVUZGRVJcIix0aGlzLl9sb2FkZXJUYXNrTm89MH1pbml0KCl7dGhpcy5vbihzLkxBREVSX1NUQVJULHRoaXMubG9hZC5iaW5kKHRoaXMpKX1zdGF0aWMgZ2V0IHR5cGUoKXtyZXR1cm5cImxvYWRlclwifWxvYWQoZSx0KXtsZXQgaT10aGlzO3RoaXMudXJsPWUsdGhpcy5fY2FuY2VsZWQ9ITE7bGV0IHI9dGhpcy5nZXRQYXJhbXModCk7cmV0dXJuIGkubG9hZGluZz0hMCxmZXRjaCh0aGlzLnVybCxyKS50aGVuKChmdW5jdGlvbihlKXtpZihlLm9rKXJldHVybiBpLnN0YXR1cz1lLnN0YXR1cyxpLl9vbkZldGNoUmVzcG9uc2UoZSk7aS5sb2FkaW5nPSExLGkuZW1pdChzLkxPQURFUl9FUlJPUixpLlRBRyxuZXcgRXJyb3IoXCJpbnZhbGlkIHJlc3BvbnNlLlwiKSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe3Rocm93IGkubG9hZGluZz0hMSxpLmVtaXQocy5MT0FERVJfRVJST1IsaS5UQUcsZSksbmV3IEVycm9yKGUubWVzc2FnZSl9KSl9X29uRmV0Y2hSZXNwb25zZShlKXtsZXQgdD10aGlzLGk9dGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmJ1ZmZlcik7dGhpcy5fbG9hZGVyVGFza05vKys7bGV0IGQ9dGhpcy5fbG9hZGVyVGFza05vO2lmKCEwPT09ZS5vaylzd2l0Y2godGhpcy5yZWFkdHlwZSl7Y2FzZSBuOmUuanNvbigpLnRoZW4oZT0+e3QubG9hZGluZz0hMSx0Ll9jYW5jZWxlZHx8dC5fZGVzdHJveWVkfHwoaT8oaS5wdXNoKGUpLHQuZW1pdChzLkxPQURFUl9DT01QTEVURSxpKSk6dC5lbWl0KHMuTE9BREVSX0NPTVBMRVRFLGUpKX0pO2JyZWFrO2Nhc2UgYTplLnRleHQoKS50aGVuKGU9Pnt0LmxvYWRpbmc9ITEsdC5fY2FuY2VsZWR8fHQuX2Rlc3Ryb3llZHx8KGk/KGkucHVzaChlKSx0LmVtaXQocy5MT0FERVJfQ09NUExFVEUsaSkpOnQuZW1pdChzLkxPQURFUl9DT01QTEVURSxlKSl9KTticmVhaztjYXNlIG86ZS5hcnJheUJ1ZmZlcigpLnRoZW4oZT0+e3QubG9hZGluZz0hMSx0Ll9jYW5jZWxlZHx8dC5fZGVzdHJveWVkfHwoaT8oaS5wdXNoKG5ldyBVaW50OEFycmF5KGUpKSx0LmVtaXQocy5MT0FERVJfQ09NUExFVEUsaSkpOnQuZW1pdChzLkxPQURFUl9DT01QTEVURSxlKSl9KTticmVhaztjYXNlIHI6ZGVmYXVsdDpyZXR1cm4gdGhpcy5fb25SZWFkZXIoZS5ib2R5LmdldFJlYWRlcigpLGQpfX1fb25SZWFkZXIoZSx0KXtsZXQgaT10aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMuYnVmZmVyKTtpZighaSYmdGhpcy5fcmVhZGVyfHx0aGlzLl9kZXN0cm95ZWQpdHJ5e3RoaXMuX3JlYWRlci5jYW5jZWwoKX1jYXRjaChlKXt9aWYodGhpcy5fcmVhZGVyPWUsITE9PT10aGlzLmxvYWRpbmcpcmV0dXJuO2xldCByPXRoaXM7dGhpcy5fcmVhZGVyJiZ0aGlzLl9yZWFkZXIucmVhZCgpLnRoZW4oKGZ1bmN0aW9uKGEpe2lmKGEuZG9uZSlyZXR1cm4gci5sb2FkaW5nPSExLHIuc3RhdHVzPTAsdm9pZCByLmVtaXQocy5MT0FERVJfQ09NUExFVEUsaSk7aWYoIXIuX2NhbmNlbGVkJiYhci5fZGVzdHJveWVkKXJldHVybiBpLnB1c2goYS52YWx1ZSksci5lbWl0KHMuTE9BREVSX0RBVEFMT0FERUQsaSksci5fb25SZWFkZXIoZSx0KTtpZihyLl9yZWFkZXIpdHJ5e3IuX3JlYWRlci5jYW5jZWwoKX1jYXRjaChlKXt9fSkpLmNhdGNoKGU9PntyLmxvYWRpbmc9ITEsci5lbWl0KHMuTE9BREVSX0VSUk9SLHIuVEFHLGUpfSl9Z2V0UGFyYW1zKGUpe2xldCB0PU9iamVjdC5hc3NpZ24oe30sZSksaT1uZXcgSGVhZGVycyxzPXttZXRob2Q6XCJHRVRcIixoZWFkZXJzOmksbW9kZTpcImNvcnNcIixjYWNoZTpcImRlZmF1bHRcIn07aWYoXCJvYmplY3RcIj09dHlwZW9mIHRoaXMuY29uZmlncy5oZWFkZXJzKXtsZXQgZT10aGlzLmNvbmZpZ3MuaGVhZGVycztmb3IobGV0IHQgaW4gZSllLmhhc093blByb3BlcnR5KHQpJiZpLmFwcGVuZCh0LGVbdF0pfWlmKFwib2JqZWN0XCI9PXR5cGVvZiB0LmhlYWRlcnMpe2xldCBlPXQuaGVhZGVycztmb3IobGV0IHQgaW4gZSllLmhhc093blByb3BlcnR5KHQpJiZpLmFwcGVuZCh0LGVbdF0pfXJldHVybiExPT09dC5jb3JzJiYocy5tb2RlPVwic2FtZS1vcmlnaW5cIiksdC53aXRoQ3JlZGVudGlhbHMmJihzLmNyZWRlbnRpYWxzPVwiaW5jbHVkZVwiKSxzfWNhbmNlbCgpe2lmKHRoaXMuX3JlYWRlcil7dHJ5e3RoaXMuX3JlYWRlci5jYW5jZWwoKX1jYXRjaChlKXt9dGhpcy5fcmVhZGVyPW51bGwsdGhpcy5sb2FkaW5nPSExLHRoaXMuX2NhbmNlbGVkPSEwfX1kZXN0cm95KCl7dGhpcy5fZGVzdHJveWVkPSEwLHRoaXMuY2FuY2VsKCl9fX1dKX0pKTsiLCJpbXBvcnQgRmx2TGl2ZVBsYXllciBmcm9tICd4Z3BsYXllci1mbHYtbGl2ZSdcbmltcG9ydCBGbHZWb2RQbGF5ZXIgZnJvbSAneGdwbGF5ZXItZmx2LXZvZCdcblxuY2xhc3MgRmx2UGxheWVye1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZy5pc0xpdmUpIHtcbiAgICAgIHJldHVybiBuZXcgRmx2TGl2ZVBsYXllcihjb25maWcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRmx2Vm9kUGxheWVyKGNvbmZpZylcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGbHZQbGF5ZXJcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV94Z3BsYXllcl9fOyJdLCJzb3VyY2VSb290IjoiIn0=