!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("xgplayer")):"function"==typeof define&&define.amd?define(["xgplayer"],t):"object"==typeof exports?exports["xgplayer-flv"]=t(require("xgplayer")):e["xgplayer-flv"]=t(e.xgplayer)}(window,(function(e){return function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../xgplayer-flv-live/dist/index.js":
/*!****************************!*\
  !*** .-live/dist/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){"use strict";var s;window,e.exports=(s=i(/*! xgplayer */"xgplayer"),function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../../node_modules/events/events.js":
/*!*****************************************************************************************!*\
      !*** /Users/leonardo/Documents/front-end/player/xgplayer/node_modules/events/events.js ***!
      \*****************************************************************************************/
/*! no static exports found */function(e,t,i){var s,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};s=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var l=10;function d(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function h(e,t,i,s){var r,a,n,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),n=a[t]),void 0===n)n=a[t]=i,++e._eventsCount;else if("function"==typeof n?n=a[t]=s?[i,n]:[n,i]:s?n.unshift(i):n.push(i),(r=d(e))>0&&n.length>r&&!n.warned){n.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=n.length,o=l,console&&console.warn&&console.warn(o)}return e}function u(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function c(e,t,i){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=u.bind(s);return r.listener=i,s.wrapFn=r,r}function f(e,t,i){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):m(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function m(e,t){for(var i=new Array(t),s=0;s<t;++s)i[s]=e[s];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return d(this)},o.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var s="error"===e,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var l=r[e];if(void 0===l)return!1;if("function"==typeof l)a(l,this,t);else{var d=l.length,h=m(l,d);for(i=0;i<d;++i)a(h[i],this,t)}return!0},o.prototype.addListener=function(e,t){return h(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return h(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,s,r,a,n;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(s=this._events))return this;if(void 0===(i=s[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(r=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){n=i[a].listener,r=a;break}if(r<0)return this;0===r?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,r),1===i.length&&(s[e]=i[0]),void 0!==s.removeListener&&this.emit("removeListener",e,n||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,i,s;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,a=Object.keys(i);for(s=0;s<a.length;++s)"removeListener"!==(r=a[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},"../xgplayer-buffer/index.js":
/*!***********************************!*\
      !*** ../xgplayer-buffer/index.js ***!
      \***********************************/
/*! no static exports found */function(e,t,i){e.exports={Track:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:i(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").default}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
      !*** ../xgplayer-buffer/src/buffer.js ***!
      \****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let s=this.array[0].slice(this.offset,this.offset+e);t.set(s,i),this.offset+=e,this.length-=e,e=0;break}{let s=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=s,this.length-=s,e-=s}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,s=this.offset+e;for(;s<this.offset+t+e;)s<this.array[0].length?i=256*i+this.array[0][s]:this.array[1]&&(i=256*i+this.array[1][s-this.array[0].length]),s++;return i}},t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
      !*** ../xgplayer-buffer/src/presouce.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new s,this.sources[e]}clear(){this.sources={}}destroy(){this.sources={}}}},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
      !*** ../xgplayer-buffer/src/track.js ***!
      \***************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=s,t.AudioTrack=class extends s{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}},t.VideoTrack=class extends s{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}},t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-codec/index.js":
/*!**********************************!*\
      !*** ../xgplayer-codec/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Nalunit:i(/*! ./src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js").default,SpsParser:i(/*! ./src/h264/nalunit/sps */"../xgplayer-codec/src/h264/nalunit/sps.js").default,Compatibility:i(/*! ./src/compatibility */"../xgplayer-codec/src/compatibility.js").default}},"../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
      !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{static getSilentFrame(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},"../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
      !*** ../xgplayer-codec/src/compatibility.js ***!
      \**********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=(s=i(/*! ./aac/aac-helper */"../xgplayer-codec/src/aac/aac-helper.js"))&&s.__esModule?s:{default:s};const{REMUX_EVENTS:n}=r.EVENTS;class o{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[]}init(){this.before(n.REMUX_MEDIA,this.doFix.bind(this))}reset(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:e,isFirstVideoSamples:t}=this.getFirstSample();this.removeInvalidSamples(),this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples),this.doFixVideo(t),this.doFixAudio(e)}doFixVideo(e){let{samples:t,meta:i}=this.videoTrack;if(i.frameRate&&!1===i.frameRate.fixed)return;if(!t||!t.length||!this._firstVideoSample)return;const s=t[0],r=s.dts,a=t.length;if(e&&this._firstAudioSample){const e=this._firstVideoSample.dts,r=e-this._firstAudioSample.dts;if(r>2*i.refSampleDuration){const a=Math.floor(r/i.refSampleDuration);for(let r=0;r<a;r++){const a=Object.assign({},s);a.dts=e-(r+1)*i.refSampleDuration,a.pts=a.dts+a.cts,t.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}}}let n;if(this.nextVideoDts){n=r-this.nextVideoDts;const e=Math.abs(n);if(n>2*i.refSampleDuration){const e=Math.floor(n/i.refSampleDuration);for(let s=0;s<e;s++){const e=Object.assign({},t[0]),a=r-(s+1)*i.refSampleDuration;e.dts=a>this.nextVideoDts?a:this.nextVideoDts,e.pts=e.dts+e.cts,this.videoTrack.samples.unshift(e),this.filledVideoSamples.push({dts:e.dts,size:e.data.byteLength})}}else e<=10&&e>0&&(t[0].dts=this.nextVideoDts,t[0].originDts=t[0].dts,t[0].cts=t[0].cts||t[0].pts-t[0].dts,t[0].pts=t[0].dts+t[0].cts)}const o=t[t.length-1].dts,l=t.length>=2?o-t[t.length-2].dts:i.refSampleDuration;this.lastVideoSamplesLen=a,this.nextVideoDts=o+l,this.lastVideoDts=o;for(let e=0,s=t.length;e<s;e++){const s=t[e],r=t[e+1];if(!r)break;const a=r.dts-s.dts;if(a>2*i.refSampleDuration){let n=Math.floor(a/i.refSampleDuration),o=0;for(;o<n;){const a=Object.assign({},r);a.dts=s.dts+(o+1)*i.refSampleDuration,a.pts=a.dts+a.cts,a<r.dts&&(t.splice(e,0,a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})),o++,e++}}}this.videoTrack.samples=t}doFixAudio(e){let{samples:t,meta:i}=this.audioTrack;if(!t||!t.length)return;const s=t.length,r=a.default.getSilentFrame(i.codec,i.channelCount),n=this._firstAudioSample;if(t=o.sortAudioSamples(t),this._firstVideoSample&&e){const e=this._firstVideoSample.pts?this._firstVideoSample.pts:this._firstVideoSample.dts+this._firstVideoSample.cts;if(n.dts-e>i.refSampleDuration){const s=Math.floor((n.dts-e)/i.refSampleDuration);for(let e=0;e<s;e++){const s={data:r,datasize:r.byteLength,dts:n.dts-(e+1)*i.refSampleDuration,filtered:0};t.unshift(s),this.filledAudioSamples.push({dts:s.dts,size:s.data.byteLength})}}}let l;const d=t[0].dts;if(this.nextAudioDts){l=d-this.nextAudioDts;const e=Math.abs(l);if(e>i.refSampleDuration&&1===s&&1===this.lastAudioSamplesLen&&(i.refSampleDurationFixed=void 0),l>2*i.refSampleDuration)if(1===s&&1===this.lastAudioSamplesLen)i.refSampleDurationFixed=void 0!==i.refSampleDurationFixed?i.refSampleDurationFixed+l:i.refSampleDuration+l;else{const e=Math.floor(l/i.refSampleDuration);for(let s=0;s<e;s++){const e=d-(s+1)*i.refSampleDuration,r=Object.assign({},t[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else e<=10&&e>0&&(t[0].dts=this.nextAudioDts,t[0].pts=this.nextAudioDts)}const h=t[t.length-1].dts,u=t.length>=2?h-t[t.length-2].dts:i.refSampleDuration;this.lastAudioSamplesLen=s,this.nextAudioDts=i.refSampleDurationFixed?h+i.refSampleDurationFixed:h+u,this.lastAudioDts=h;for(let e=0,i=t.length;e<i;e++){const i=t[e],s=t[e+1];if(!s)break;const r=s.dts-i.dts;t[e].duration=r}this.audioTrack.samples=o.sortAudioSamples(t)}getFirstSample(){let{samples:e}=this.videoTrack,{samples:t}=this.audioTrack,i=!1,s=!1;return!this._firstVideoSample&&e.length&&(this._firstVideoSample=o.findFirstVideoSample(e),i=!0),!this._firstAudioSample&&t.length&&(this._firstAudioSample=o.findFirstAudioSample(t),s=!0),{isFirstVideoSamples:i,isFirstAudioSamples:s}}fixRefSampleDuration(e,t){const i="video"===e.type,s=i?this.allVideoSamplesCount:this.allAudioSamplesCount,r=i?this._firstVideoSample.dts:this._firstAudioSample.dts,a=i?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration)){if(t.length>=1){const i=t[t.length-1].dts;e.refSampleDuration=Math.floor((i-r)/(s+a-1))}}else if(e.refSampleDuration&&t.length>=3){const i=(t[t.length-1].dts-t[0].dts)/t.length;e.refSampleDuration=Math.abs(e.refSampleDuration-i)<=e.refSampleDuration?e.refSampleDuration:i}}recordSamplesCount(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}removeInvalidSamples(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter(e=>e.dts>=t.dts&&(void 0===this.lastAudioDts||e.dts>this.lastAudioDts)),this.videoTrack.samples=this.videoTrack.samples.filter(t=>t.dts>=e.dts&&(void 0===this.lastVideoDts||t.dts>this.lastVideoDts))}static sortAudioSamples(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}static findFirstAudioSample(e){return e&&0!==e.length?o.sortAudioSamples(e)[0]:null}static findFirstVideoSample(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,i=t.length;e<i;e++)if(t[e].isKeyframe)return t[e]}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks?this.tracks.audioTrack:null}get videoTrack(){return this.tracks?this.tracks.videoTrack:null}}t.default=o},"../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0,!1),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){if(e<=this._currentWordBitsLeft){let t=this._currentWord>>>32-e;return this._currentWord<<=e,this._currentWordBitsLeft-=e,t}let t=this._currentWordBitsLeft?this._currentWord:0;this._currentWordBitsLeft;let i=e-this._currentWordBitsLeft;this._fillCurrentWord();let s=Math.min(i,this._currentWordBitsLeft),r=this._currentWord>>>32-s;return this._currentWord<<=s,this._currentWordBitsLeft-=s,t<<s|r}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
      \***************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./sps */"../xgplayer-codec/src/h264/nalunit/sps.js"))&&s.__esModule?s:{default:s};class a{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,i=e.position;return 1===t.getInt32(i)||0===t.getInt16(i)&&1===t.getInt8(i+2)?a.getAnnexbNals(e):a.getAvccNals(e)}static getAnnexbNals(e){let t=[],i=a.getHeaderPositionAnnexB(e),s=i.pos,r=s;for(;s<e.length-4;){let n=e.buffer.slice(s,s+i.headerLength);i.pos===e.position&&e.skip(i.headerLength),r=(i=a.getHeaderPositionAnnexB(e)).pos;let o={header:n,body:new Uint8Array(e.buffer.slice(s+n.byteLength,r))};a.analyseNal(o),t.push(o),e.skip(r-e.position),s=r}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let i=e.dataview.getInt32();if(!(e.length-e.position>=i))break;{let s=e.buffer.slice(e.position,e.position+4);e.skip(4);let r=e.buffer.slice(e.position,e.position+i);e.skip(i);let n={header:s,body:r};a.analyseNal(n),t.push(n)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=r.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,i=0;for(;3!==i&&4!==i&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?i=4:1===e.dataview.getInt8(t+2)?i=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(i=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?i=3:t=e.length)),{pos:t,headerLength:i}}static getAvcc(e,t){let i=new Uint8Array(e.byteLength+t.byteLength+11);i[0]=1,i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=255,i[5]=225;let s=6;return i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),s),s+=2,i.set(e,s),i[s+=e.byteLength]=1,s++,i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),s),s+=2,i.set(t,s),i}}t.default=a},"../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
      \*************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./golomb */"../xgplayer-codec/src/h264/nalunit/golomb.js"))&&s.__esModule?s:{default:s};class a{static _ebsp2rbsp(e){let t=e,i=t.byteLength,s=new Uint8Array(i),r=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(s[r]=t[e],r++);return new Uint8Array(s.buffer,0,r)}static parseSPS(e){let t=a._ebsp2rbsp(e),i=new r.default(t);i.readByte();let s=i.readByte();i.readByte();let n=i.readByte();i.readUEG();let o=a.getProfileString(s),l=a.getLevelString(n),d=1,h=420,u=8;if((100===s||110===s||122===s||244===s||44===s||83===s||86===s||118===s||128===s||138===s||144===s)&&(3===(d=i.readUEG())&&i.readBits(1),d<=3&&(h=[0,420,422,444][d]),u=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==d?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?a._skipScalingList(i,16):a._skipScalingList(i,64))}i.readUEG();let c=i.readUEG();if(0===c)i.readUEG();else if(1===c){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let f=i.readUEG(),p=i.readUEG(),m=i.readBits(1);0===m&&i.readBits(1),i.readBits(1);let g=0,y=0,_=0,E=0;i.readBool()&&(g=i.readUEG(),y=i.readUEG(),_=i.readUEG(),E=i.readUEG());let v=1,S=1,A=0,x=!0,b=0,T=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],s=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(v=t[e-1],S=s[e-1]):255===e&&(v=i.readByte()<<8|i.readByte(),S=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);x=i.readBool(),A=(b=t)/(T=2*e)}}let w=1;1===v&&1===S||(w=v/S);let D=0,R=0;0===d?(D=1,R=2-m):(D=3===d?1:2,R=(1===d?2:1)*(2-m));let L=16*(f+1),M=16*(p+1)*(2-m);L-=(g+y)*D,M-=(_+E)*R;let O=Math.ceil(L*w);return i.destroy(),i=null,{profile_string:o,level_string:l,bit_depth:u,chroma_format:h,chroma_format_string:a.getChromaFormatString(h),frame_rate:{fixed:x,fps:A,fps_den:T,fps_num:b},par_ratio:{width:v,height:S},codec_size:{width:L,height:M},present_size:{width:O,height:M}}}static _skipScalingList(e,t){let i=8,s=8,r=0;for(let a=0;a<t;a++)0!==s&&(s=(i+(r=e.readSEG())+256)%256),i=0===s?i:s}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},t.frameRate=e.frame_rate;let i=t.frameRate.fps_den,s=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/s))}}t.default=a},"../xgplayer-demux/index.js":
/*!**********************************!*\
      !*** ../xgplayer-demux/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={M3U8Parser:i(/*! ./src/hls/demuxer/m3u8parser */"../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,TsDemuxer:i(/*! ./src/hls/demuxer/ts */"../xgplayer-demux/src/hls/demuxer/ts.js").default,Playlist:i(/*! ./src/hls/playlist */"../xgplayer-demux/src/hls/playlist.js").default,FlvDemuxer:i(/*! ./src/flv/index */"../xgplayer-demux/src/flv/index.js").default}},"../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
      !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};t.default=class{constructor(){this.offset=0,this.readOffset=this.offset}resolve(e,t){if(t<3)throw new Error("not enough data for metainfo");const i={},s=this.parseValue(e),r=this.parseValue(e,t-s.bodySize);return i[s.data]=r.data,this.resetStatus(),i}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(e){const t=new DataView(e,this.readOffset).getUint16(0,!s.isLe);let i="";i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}parseDate(e,t){const i=new DataView(e,this.readOffset,t);let r=i.getFloat64(0,!s.isLe);return r+=60*i.getInt16(8,!s.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(e,t){const i=this.parseString(e,t),s=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:s.data},bodySize:i.bodySize+s.bodySize,isObjEnd:s.isObjEnd}}parseLongString(e){const t=new DataView(e,this.readOffset).getUint32(0,!s.isLe);let i="";return i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}parseValue(e,t){let i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:l,MIX_ARRAY:d,OBJECT_END:h,STRICT_ARRAY:u,DATE:c,LONE_STRING:f}=r,p=new DataView(i,this.readOffset,t);let m=!1;const g=p.getUint8(0);let y=1;this.readOffset+=1;let _=null;switch(g){case a:_=p.getFloat64(1,!s.isLe),this.readOffset+=8,y+=8;break;case n:_=!!p.getUint8(1),this.readOffset+=1,y+=1;break;case o:{const e=this.parseString(i);_=e.data,y+=e.bodySize;break}case l:{_={};let e=0;for(16777215&p.getUint32(t-4,!s.isLe)&&(e=3);y<t-4;){const s=this.parseObject(i,t-y-e);if(s.isObjectEnd)break;_[s.data.name]=s.data.value,y+=s.bodySize}y<=t-3&&9==(16777215&p.getUint32(y-1,!s.isLe))&&(this.readOffset+=3,y+=3);break}case d:{_={},y+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!s.isLe))&&(e=3);y<t-8;){const s=this.parseObject(i,t-y-e);if(s.isObjectEnd)break;_[s.data.name]=s.data.value,y+=s.bodySize}y<=t-3&&9==(16777215&p.getUint32(y-1,!s.isLe))&&(y+=3,this.readOffset+=3);break}case h:_=null,m=!0;break;case u:{_=[];const e=p.getUint32(1,!s.isLe);y+=4,this.readOffset+=4;for(let s=0;s<e;s++){const e=this.parseValue(i,t-y);_.push(e.data),y+=e.bodySize}break}case c:{const e=this.parseDate(i,t-1);_=e.data,y+=e.bodySize;break}case f:{const e=this.parseLongString(i,t-1);_=e.data,y+=e.bodySize;break}default:y=t}return{data:_,bodySize:y,isObjEnd:m}}}},"../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
      !*** ../xgplayer-demux/src/flv/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),n=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=(s=i(/*! ./amf-parser */"../xgplayer-demux/src/flv/amf-parser.js"))&&s.__esModule?s:{default:s};const l=r.EVENTS.DEMUX_EVENTS;class d{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(l.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}static getPlayType(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e;do{e=this._parseFlvTag()}while(e);this.emit(l.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}parseFlvHeader(e){if(d.isFlvFile(e)){this._firstFragmentLoaded=!0;const t=d.getPlayType(e[4]);t.hasVideo&&this.initVideoTrack(),t.hasAudio&&this.initAudioTrack()}else this.emit(l.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let e=new n.VideoTrack;e.meta=new r.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}initAudioTrack(){this._trackNum++;let e=new n.AudioTrack;e.meta=new r.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}_parseFlvTagHeader(){let e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.logger.warn(this.TAG,"tagType "+t.tagType),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let s=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(s+=16777216*r),t.dts=s,this.loaderBuffer.shift(3),t}_processChunk(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(e){let t=this.tracks.audioTrack,i=this.tracks.videoTrack,s=this.loaderBuffer.shift(e.datasize);const r=(new o.default).resolve(s,s.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(l.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(a.audiosamplerate&&(e.sampleRate=a.audiosamplerate),a.audiochannels&&(e.channelCount=a.audiochannels),a.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){let e=i.meta;if("number"==typeof a.framerate){let t=Math.floor(1e3*a.framerate);if(t>0){let i=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=i,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let i,s,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,s=new Array(4),i=a-3):(t.objectType=2,s=new Array(2),i=a):-1!==r.indexOf("android")?(t.objectType=2,s=new Array(2),i=a):(t.objectType=5,i=t.sampleRateIndex,s=new Array(4),t.sampleRateIndex>=6?i=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,s=new Array(2),i=t.sampleRateIndex)),s[0]=t.objectType<<3,s[0]|=(15&t.sampleRateIndex)>>>1,s[1]=(15&t.sampleRateIndex)<<7,s[1]|=(15&t.channelCount)<<3,5===t.objectType&&(s[1]|=(15&i)>>>1,s[2]=(1&i)<<7,s[2]|=8,s[3]=0),t.config=s,t}_parseAACData(e){let t=this.tracks.audioTrack;if(!t)return;let i=t.meta;i||(i=new r.AudioTrackMeta);let s=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let a=(240&s)>>>4;t.format=a,10!==a&&this.emit(l.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(s),i.sampleRateIndex=(12&s)>>>2,i.frameLenth=(2&s)>>>1,i.channelCount=1&s,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));let n=i.audioSampleRate,o=i.sampleRateIndex,d=i.refSampleDuration;delete e.tagType;let h=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);n=t.audiosamplerate||i.audioSampleRate,o=t.sampleRateIndex||i.sampleRateIndex,d=Math.floor(1024/n*i.timescale),i.channelCount=t.channelCount,i.sampleRate=n,i.sampleRateIndex=o,i.refSampleDuration=d,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=t.config;const s=this._context.mediaInfo.audio;s.codec=t.codec,s.channelCount=t.channelCount,s.sampleRate=n,s.sampleRateIndex=t.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(l.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&this.emit(l.AUDIO_METADATA_CHANGE),this._hasAudioSequence=!0}else e.data=e.data.slice(1,e.data.length),t.samples.push(e);if(!h){const t=new Error("TAG length error at "+e.datasize);this.emit(l.DEMUX_ERROR,t.message),this.logger.warn(this.TAG,t.message)}}_parseHevcData(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`);let t={},i=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>i;){let s=e.data.slice(Number.parseInt(i),4+i);t.size=s[3],t.size+=256*s[2],t.size+=256*s[1]*256,t.size+=256*s[0]*256*256,i+=4,t.data=e.data.slice(Number.parseInt(i),t.size+i),i+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(l.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(l.METADATA_PARSED,"video"):this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`))}else if(7===i){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let i=0;i<4;i++)e=256*e+t[i];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType)this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(l.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(l.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0);else{if(!this._datasizeValidator(e.datasize))return void this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`);this.tracks.videoTrack.samples.push(e)}}else this.logger.warn(this.TAG,`video codeid is ${i}`),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`),this.tracks.videoTrack.samples.push(e),this.emit(l.DEMUX_COMPLETE);delete e.tagType}_avcSequenceHeaderParser(e){let t=this.tracks.videoTrack;if(!t)return;let i=0;t.meta||(t.meta=new r.VideoTrackMeta);let s=t.meta;s.configurationVersion=e[0],s.avcProfileIndication=e[1],s.profileCompatibility=e[2],s.avcLevelIndication=e[3]/10,s.nalUnitLength=1+(3&e[4]);let n=31&e[5];i=6;let o={};for(let t=0;t<n;t++){let t=255*e[i]+e[i+1];i+=2;let r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e[i+s];let n="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),n+=t}s.codec=n,i+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let l=e[i];i++;for(let t=0;t<l;t++){let t=255*e[i]+e[i+1];i+=2;let s=new Uint8Array(t);for(let r=0;r<t;r++)s[r]=e[i+r];i+=t,this.tracks.videoTrack.meta.pps=s}Object.assign(s,a.SpsParser.toVideoMeta(o));const d=this._context.mediaInfo.video;d.codec=s.codec,d.profile=s.profile,d.level=s.level,d.chromaFormat=s.chromaFormat,d.frameRate=s.frameRate,d.parRatio=s.parRatio,d.width=d.width===s.presentWidth?d.width:s.presentWidth,d.height=d.height===s.presentHeight?d.width:s.presentHeight,s.duration=this._context.mediaInfo.duration*s.timescale,s.avcc=new Uint8Array(e.length),s.avcc.set(e),t.meta=s}_switchAudioSampleRate(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}_switchAudioSamplingFrequency(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}_switchAudioChannel(e){return[1,2][1&e]}_datasizeValidator(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}get loaderBuffer(){if(this._context.getInstance("LOADER_BUFFER"))return this._context.getInstance("LOADER_BUFFER");this.emit(l.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}t.default=d},"../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
      !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
      \*******************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static parse(e,t=""){let i={duration:0};if(!e||!e.split)return;let r=e.split(/\r|\n/),a=(r=r.filter(e=>e)).shift();if(!a.match("#EXTM3U"))return null;for(a=r.shift();a;){let e=a.match(/#(.*):(.*)/);if(e&&e.length>2)switch(e[1]){case"EXT-X-VERSION":i.version=parseInt(e[2]);break;case"EXT-X-MEDIA-SEQUENCE":i.sequence=parseInt(e[2]);break;case"EXT-X-TARGETDURATION":i.targetduration=parseFloat(e[2]);break;case"EXTINF":s.parseFrag(e,r,i,t)}a=r.shift()}return i}static parseFrag(e,t,i,s){i.frags||(i.frags=[]);let r={start:i.duration,duration:1e3*parseFloat(e[2])};i.duration+=r.duration;let a=t.shift();a.match(/#(.*):(.*)/)&&(a=t.shift()),a.length>0&&"/"===a.charAt(0)&&s.match(/.*\/\/.*\.\w+/g)&&(s=s.match(/.*\/\/.*\.\w+/g)[0]),a.match(/.*:\/\/.*/)?r.url=a:r.url=s+a,i.frags.push(r)}static parseURL(e){let t="",i=e.match(/(.*\/).*\.m3u8/);if(i&&i.length>0)for(let e=0;e<i.length;e++)i[e].match(/.*\/$/g)&&i[e].length>t.length&&(t=i[e]);return t}}t.default=s},"../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
      !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),r=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),a=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const n=a.EVENTS.DEMUX_EVENTS,o={1:["video","MPEG-1"],2:["video","MPEG-2"],27:["video","AVC.H264"],234:["video","VC-1"],3:["audio","MPEG-1"],4:["audio","MPEG-2"],15:["audio","MPEG-2.AAC"],17:["audio","MPEG-4.AAC"],128:["audio","LPCM"],129:["audio","AC3"],6:["audio","AC3"],130:["audio","DTS"],131:["audio","Dolby TrueHD"],132:["audio","AC3-Plus"],133:["audio","DTS-HD"],134:["audio","DTS-MA"],161:["audio","AC3-Plus-SEC"],162:["audio","DTS-HD-SEC"]};class l{constructor(e){this.configs=Object.assign({},e),this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}init(){this.on(n.DEMUX_START,this.demux.bind(this))}demux(){if(this.demuxing)return;let e=this.inputBuffer,t={pat:[],pmt:[]},i={};for(;e.length>=188;){for(;e.length>=1&&71!==e.array[0][e.offset];)e.shift(1);let s=e.shift(188),r=new a.Stream(s.buffer),n={};l.read(r,n,t),n.pes?(i[n.header.pid]||(i[n.header.pid]=[]),i[n.header.pid].push(n.pes),n.pes.ES.buffer=[n.pes.ES.buffer]):i[n.header.pid]&&i[n.header.pid][i[n.header.pid].length-1].ES.buffer.push(n.payload.stream)}for(let e=0;e<Object.keys(i).length;e++){let t=i[Object.keys(i)[e]];for(let s=0;s<t.length;s++)t[s].id=Object.keys(i)[e],t[s].ES.buffer=l.Merge(t[s].ES.buffer),"audio"===t[s].type?this.pushAudioSample(t[s]):"video"===t[s].type&&this.pushVideoSample(t[s])}this._hasAudioMeta&&this.emit(n.DEMUX_COMPLETE,"audio"),this._hasVideoMeta&&this.emit(n.DEMUX_COMPLETE,"video")}pushAudioSample(e){let t;this._tracks.audioTrack?t=this._tracks.audioTrack:(this._tracks.audioTrack=new r.AudioTrack,(t=this._tracks.audioTrack).meta=new a.AudioTrackMeta({audioSampleRate:e.ES.frequence,sampleRate:e.ES.frequence,channelCount:e.ES.channel,codec:"mp4a.40."+e.ES.audioObjectType,config:e.ES.audioConfig,id:2,sampleRateIndex:e.ES.frequencyIndex}),t.meta.refSampleDuration=Math.floor(1024/t.meta.audioSampleRate*t.meta.timescale),this._hasAudioMeta||(this._hasAudioMeta=!0,this.emit(n.METADATA_PARSED,"audio")));let i=new Uint8Array(e.ES.buffer.buffer.slice(e.ES.buffer.position,e.ES.buffer.length)),s=parseInt(e.pts/90),o=parseInt(e.pts/90),l=new a.AudioTrackSample({dts:s,pts:o,data:i});t.samples.push(l)}pushVideoSample(e){let t,i=s.Nalunit.getNalunits(e.ES.buffer);this._tracks.videoTrack?t=this._tracks.videoTrack:(this._tracks.videoTrack=new r.VideoTrack,(t=this._tracks.videoTrack).meta=new a.VideoTrackMeta);let o=0,d=!1,h=!1;for(let e=0;e<i.length;e++){let s=i[e];if(s.sps){if(t.sps&&l.compaireUint8(s.body,t.sps))continue;d=s,t.sps=s.body,t.meta.chromaFormat=d.sps.chroma_format,t.meta.codec="avc1.";for(var u=1;u<4;u++){var c=d.body[u].toString(16);c.length<2&&(c="0"+c),t.meta.codec+=c}t.meta.codecHeight=d.sps.codec_size.height,t.meta.codecWidth=d.sps.codec_size.width,t.meta.frameRate=d.sps.frame_rate,t.meta.id=1,t.meta.level=d.sps.level_string,t.meta.presentHeight=d.sps.present_size.height,t.meta.presentWidth=d.sps.present_size.width,t.meta.profile=d.sps.profile_string,t.meta.refSampleDuration=Math.floor(t.meta.timescale*(d.sps.frame_rate.fps_den/d.sps.frame_rate.fps_num)),t.meta.sarRatio=d.sps.sar_ratio?d.sps.sar_ratio:d.sps.par_ratio}else s.pps?(t.pps=s.body,h=s):o+=4+s.body.byteLength}d&&h&&(t.meta.avcc=s.Nalunit.getAvcc(d.body,h.body),this._hasVideoMeta||(this._hasVideoMeta=!0,this.emit(n.METADATA_PARSED,"video")));let f=new Uint8Array(o),p=0,m=!1;for(let e=0;e<i.length;e++){let t=i[e],s=t.body.byteLength;t.idr&&(m=!0),t.pps||t.sps||(f.set(new Uint8Array([s>>>24&255,s>>>16&255,s>>>8&255,255&s]),p),p+=4,f.set(t.body,p),p+=s)}let g=new a.VideoTrackSample({dts:parseInt(e.dts/90),pts:parseInt(e.pts/90),cts:(e.pts-e.dts)/90,originDts:e.dts,isKeyframe:m,data:f});t.samples.push(g)}destory(){this.off(n.DEMUX_START,this.demux),this.configs={},this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}static compaireUint8(e,t){if(e.byteLength!==t.byteLength)return!1;let i=!0;for(let s=0;s<e.byteLength;s++)e[s]!==t[s]&&(i=!1);return i}static Merge(e){let t,i=0,s=0;for(let t=0;t<e.length;t++)i+=e[t].length-e[t].position;t=new Uint8Array(i);for(let i=0;i<e.length;i++){let r=e[i];t.set(new Uint8Array(r.buffer,r.position),s),s+=r.length-r.position}return new a.Stream(t.buffer)}static read(e,t,i){l.readHeader(e,t),l.readPayload(e,t,i),"MEDIA"!==t.header.packet||1!==t.header.payload||t.unknownPIDs||(t.pes=l.PES(t))}static readPayload(e,t,i){let s=t.header.pid;switch(s){case 0:l.PAT(e,t,i);break;case 1:l.CAT(e,t,i);break;case 2:l.TSDT(e,t,i);break;case 8191:break;default:if(i.pat.some(e=>e.pid===s))l.PMT(e,t,i);else{let r=i.pmt?i.pmt.filter(e=>e.pid===s):[];r.length>0?l.Media(e,t,o[r[0].streamType][0]):t.unknownPIDs=!0}}}static readHeader(e,t){let i={};i.sync=e.readUint8();let s=e.readUint16();i.error=s>>>15,i.payload=s>>>14&1,i.priority=s>>>13&1,i.pid=8191&s,s=e.readUint8(),i.scrambling=s>>6&3,i.adaptation=s>>4&3,i.continuity=15&s,i.packet=0===i.pid?"PAT":"MEDIA",t.header=i}static PAT(e,t,i){let s={},r=e.readUint8();e.skip(r),r=e.readUint8(),s.tabelID=r,r=e.readUint16(),s.error=r>>>7,s.zero=r>>>6&1,s.sectionLength=4095&r,s.streamID=e.readUint16(),s.current=1&e.readUint8(),s.sectionNumber=e.readUint8(),s.lastSectionNumber=e.readUint8();let a=(s.sectionLength-9)/4,n=[];for(let t=0;t<a;t++){let t=e.readUint16(),i=8191&e.readUint16();n.push({program:t,pid:i,type:0===t?"network":"mapPID"})}n.length>0&&(i.pat=i.pat.concat(n)),s.list=n,s.program=e.readUint16(),s.pid=8191&e.readUint16(),t.payload=s}static PMT(e,t,i){let s={};t.header.packet="PMT";let r=e.readUint8();e.skip(r),r=e.readUint8(),s.tableID=r,r=e.readUint16(),s.sectionLength=4095&r,s.program=e.readUint16(),s.current=1&e.readUint8(),s.order=e.readUint8(),s.lastOrder=e.readUint8(),s.PCR_PID=8191&e.readUint16(),s.programLength=4095&e.readUint16();let a=(s.sectionLength-13)/5,n=[];for(let t=0;t<a;t++)n.push({streamType:e.readUint8(),pid:8191&e.readUint16(),es:4095&e.readUint16()});s.list=n,this.pmt||(this.pmt=[]),i.pmt=this.pmt.concat(n.map(e=>({pid:e.pid,es:e.es,streamType:e.streamType,program:s.program}))),t.payload=s}static Media(e,t,i){let s=t.header,r={};if(s.type=i,3===s.adaptation&&(r.adaptationLength=e.readUint8(),r.adaptationLength>0)){let t=e.readUint8();r.discontinue=t>>>7,r.access=t>>>6&1,r.priority=t>>>5&1,r.PCR=t>>>4&1,r.OPCR=t>>>3&1,r.splicePoint=t>>>2&1,r.transportPrivate=t>>>1&1,r.adaptationField=1&t;let i=e.position;if(1===r.PCR&&(r.programClockBase=e.readUint32()<<1,t=e.readUint16(),r.programClockBase|=t>>>15,r.programClockExtension=511&t),1===r.OPCR&&(r.originProgramClockBase=e.readUint32()<<1,t=e.readUint16(),r.originProgramClockBase+=t>>>15,r.originProgramClockExtension=511&t),1===r.splicePoint&&(r.spliceCountdown=e.readUint8()),1===r.transportPrivate){let t=e.readUint8(),i=[];for(let s=0;s<t;s++)i.push(e.readUint8())}if(1===r.adaptationField){let t=e.readUint8(),i=e.readUint8(),s=e.position,a=i>>>6&1,n=i>>>5&1;1==i>>>7&&(i=e.readUint16(),r.ltwValid=i>>>15,r.ltwOffset=61439&i),1===a&&(i=e.readUint24(),r.piecewiseRate=4194303&i),1===n&&(i=e.readInt8(),r.spliceType=i>>>4,r.dtsNextAU1=i>>>1&7,r.marker1=1&i,i=e.readUint16(),r.dtsNextAU2=i>>>1,r.marker2=1&i,i=e.readUint16(),r.dtsNextAU3=i),e.skip(t-1-(e.position-s))}let s=r.adaptationLength-1-(e.position-i);e.skip(s)}r.stream=new a.Stream(e.buffer.slice(e.position)),t.payload=r}static PES(e){let t={},i=e.payload.stream;if(1!==i.readUint24())t.ES={},t.ES.buffer=i;else{let e=i.readUint8();e>=224&&e<=239&&(t.type="video"),e>=192&&e<=223&&(t.type="audio");let s=i.readUint16();if(t.packetLength=s,"video"!==t.type&&"audio"!==t.type)throw new Error("format is not supported");{let e=i.readUint8();if(2!=e>>>6)throw new Error("error when parse pes header");e=i.readUint8(),t.ptsDTSFlag=e>>>6,t.escrFlag=e>>>5&1,t.esRateFlag=e>>>4&1,t.dsmFlag=e>>>3&1,t.additionalFlag=e>>>2&1,t.crcFlag=e>>>1&1,t.extensionFlag=1&e,t.pesHeaderLength=i.readUint8();let s=t.pesHeaderLength;if(2===t.ptsDTSFlag){let r=[];e=i.readUint8(),r.push(e>>>1&7),e=i.readUint16(),r.push(e>>>1),e=i.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2],s-=5,"video"===t.type&&(t.dts=t.pts)}if(3===t.ptsDTSFlag){let r=[];e=i.readUint8(),r.push(e>>>1&7),e=i.readUint16(),r.push(e>>>1),e=i.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2];let a=[];e=i.readUint8(),a.push(e>>>1&7),e=i.readUint16(),a.push(e>>>1),e=i.readUint16(),a.push(e>>>1),t.dts=a[0]<<30|a[1]<<15|a[2],s-=10}if(1===t.escrFlag){let r=[],a=[];e=i.readUint8(),r.push(e>>>3&7),r.push(3&e),e=i.readUint16(),r.push(e>>>13),r.push(3&e),e=i.readUint16(),r.push(e>>>13),a.push(3&e),e=i.readUint8(),a.push(e>>>1),t.escr=300*(r[0]<<30|r[1]<<28|r[2]<<15|r[3]<<13|r[4])+(a[0]<<7|a[1]),s-=6}if(1===t.esRateFlag&&(e=i.readUint24(),t.esRate=e>>>1&4194303,s-=3),1===t.dsmFlag)throw new Error("not support DSM_trick_mode");if(1===t.additionalFlag&&(e=i.readUint8(),t.additionalCopyInfo=127&e,s-=1),1===t.crcFlag&&(t.pesCRC=i.readUint16(),s-=2),1===t.extensionFlag)throw new Error("not support extension");s>0&&i.skip(s),t.ES=l.ES(i,t.type)}}return t}static ES(e,t){let i,s={};if("video"===t){if(1!==(i=e.readUint32())&&(e.back(4),1!==(i=e.readUint24())))throw new Error("h264 nal header parse failed");e.skip(2),s.buffer=e}else{if("audio"!==t)throw new Error(`ES ${t} is not supported`);{if((i=e.readUint16())>>>4!=4095)throw new Error("aac ES parse Error");const t=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];s.id=0==(i>>>3&1)?"MPEG-4":"MPEG-2",s.layer=i>>>1&3,s.absent=1&i,i=e.readUint16(),s.audioObjectType=1+(i>>>14&3),s.profile=s.audioObjectType-1,s.frequencyIndex=i>>>10&15,s.frequence=t[s.frequencyIndex],s.channel=i>>>6&7,s.frameLength=(3&i)<<11|e.readUint16()>>>5,s.audioConfig=l.getAudioConfig(s.audioObjectType,s.channel,s.frequencyIndex),e.skip(1),s.buffer=e}}return s}static TSDT(e,t,i){t.payload={}}static CAT(e,t,i){let s={};s.tableID=e.readUint8();let r=e.readUint16();s.sectionIndicator=r>>>7,s.sectionLength=4095&r,e.skip(2),r=e.readUint8(),s.version=r>>>3,s.currentNextIndicator=1&r,s.sectionNumber=e.readUint8(),s.lastSectionNumber=e.readUint8();let a=(this.sectionLength-9)/4,n=[];for(let e=0;e<a;e++)n.push({});s.crc32=e.readUint32(),t.payload=s}static getAudioConfig(e,t,i){let s,r,a=navigator.userAgent.toLowerCase();return/firefox/i.test(a)?i>=6?(e=5,s=new Array(4),r=i-3):(e=2,s=new Array(2),r=i):-1!==a.indexOf("android")?(e=2,s=new Array(2),r=i):(e=5,s=new Array(4),i>=6?r=i-3:(1===t&&(e=2,s=new Array(2)),r=i)),s[0]=e<<3,s[0]|=(14&i)>>1,s[1]=(1&i)<<7,s[1]|=t<<3,5===e&&(s[1]|=(14&r)>>1,s[2]=(1&r)<<7,s[2]|=8,s[3]=0),s}get inputBuffer(){return this._context.getInstance(this.configs.inputbuffer)}get _tracks(){return this._context.getInstance("TRACKS")}}t.default=l},"../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
      !*** ../xgplayer-demux/src/hls/playlist.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=e.autoclear||!1}get list(){return this._list}set baseURL(e){this.baseURL!==e&&(this.clear(),this._baseURL=e)}get baseURL(){return this._baseURL}push(e,t){this._ts[e]||(this._ts[e]={duration:t,downloaded:!1,downloading:!1,start:this.duration},this._list[this.duration]=e,this.duration+=t,this.fragLength+=1)}deleteFrag(e){this._ts[e]&&(this._ts[e].start>this._lastget.time&&(this._lastget={duration:this._ts[e].duration,time:this._ts[e].start,downloaded:!1,downloading:!1,url:e}),delete this._list[this._ts[e].start],delete this._ts[e],this.fragLength-=1)}pushM3U8(e,t){if(e&&(this.version=e.version,this.targetduration=e.targetduration,e.sequence>this.sequence)){this.sequence=e.sequence;let i=[];for(let t=0;t<e.frags.length;t++){let s=e.frags[t];this._ts[s.url]||(i.push(s.url),this.push(s.url,s.duration))}if(t){let e=this.getTsList();for(let t=0;t<e.length;t++)i.indexOf(e[t])<0&&this.deleteFrag(e[t])}}}getTsList(){return Object.keys(this._ts)}downloaded(e,t){let i=this._ts[e];i&&(i.downloaded=t)}downloading(e,t){let i=this._ts[e];i&&(i.downloading=t)}getTsByName(e){return this._ts[e]}getTs(e){let t,i=Object.keys(this._list);if(void 0===e&&(e=this._lastget?this._lastget.time+this._lastget.duration:0),!(i.length<1||e>=this.duration)){i.sort((e,t)=>parseFloat(e)-parseFloat(t));for(let s=0;s<i.length&&e>=parseInt(i[s]);s++){let e=this._list[i[s]];t={url:e,downloaded:this._ts[e].downloaded,downloading:this._ts[e].downloading,time:parseInt(i[s]),duration:parseInt(this._ts[e].duration)},this.autoclear&&(delete this._ts[this._lastget.url],delete this._list[this._lastget.time]),this._lastget=t}return t}}clear(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0}clearDownloaded(){for(let e=0,t=Object.keys(this._ts).length;e<t;e++){let t=this._ts[Object.keys(this._ts)[e]];t.downloaded=!1,t.downloading=!1}}destroy(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=!1}}},"../xgplayer-loader/index.js":
/*!***********************************!*\
      !*** ../xgplayer-loader/index.js ***!
      \***********************************/
/*! no static exports found */function(e,t,i){e.exports={FetchLoader:i(/*! ./src/fetch-loader */"../xgplayer-loader/src/fetch-loader.js").default}},"../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
      !*** ../xgplayer-loader/src/fetch-loader.js ***!
      \**********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js").EVENTS.LOADER_EVENTS;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(s.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let i=this;this.url=e,this._canceled=!1;let r=this.getParams(t);return i.loading=!0,fetch(this.url,r).then((function(e){if(e.ok)return i.status=e.status,i._onFetchResponse(e);i.emit(s.LOADER_ERROR,i,e),i.loading=!1})).catch((function(e){throw i.emit(s.LOADER_ERROR,i,e),i.loading=!1,new Error(e.message)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);this._loaderTaskNo++;let r=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case 2:e.json().then(e=>{t.loading=!1,t._canceled||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 1:e.text().then(e=>{t.loading=!1,t._canceled||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 3:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||(i?(i.push(new Uint8Array(e)),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 0:default:return this._onReader(e.body.getReader(),r)}}_onReader(e,t){let i=this._context.getInstance(this.buffer);if(i||this._reader.cancel(),this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then((function(a){return a.done?(r.loading=!1,r.status=0,void r.emit(s.LOADER_COMPLETE,i)):r._canceled?void r._reader.cancel():(i.push(a.value),r.emit(s.LOADER_DATALOADED,i),r._onReader(e,t))})).catch(e=>{r.emit(s.LOADER_ERROR,r,e),r.loading=!1})}getParams(e){let t=Object.assign({},e),i=new Headers,s={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}if("object"==typeof t.headers){let e=t.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(s.mode="same-origin"),t.withCredentials&&(s.credentials="include"),s}cancel(){this._reader&&(this._reader.cancel(),this._reader=null,this.loading=!1,this._canceled=!0)}destroy(){this.cancel()}}},"../xgplayer-remux/index.js":
/*!**********************************!*\
      !*** ../xgplayer-remux/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Mp4Remuxer:i(/*! ./src/mp4 */"../xgplayer-remux/src/mp4/index.js").default}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
      !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");class r{static size(e){return s.Buffer.writeUint32(e)}static initBox(e,t,...i){const a=new s.Buffer;return a.write(r.size(e),r.type(t),...i),a.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let i,s=8,a=r.mvhd(t.duration,t.timescale);i="video"===e?r.videoTrak(t):r.audioTrak(t);let n=r.mvex(t.duration,t.timescale||1e3,t.id);return[a,i,n].forEach(e=>{s+=e.byteLength}),r.initBox(s,"moov",a,i,n)}static mvhd(e,t=1e3){let i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),s=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static audioTrak(e){let t=8,i=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),s=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static tkhd(e){let t=e.id,i=e.duration,s=e.width,a=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>>8&255,255&s,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new s.Buffer,i=e.duration,a=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=r.mdhd(e.timescale,e.duration),s=r.hdlr(e.type),a=r.minf(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",i,s,a)}static mdhd(e=1e3,t){let i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+i.byteLength,"mdhd",r.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?r.vmhd():r.smhd(),s=r.dinf(),a=r.stbl(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",i,s,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new s.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=r.stsd(e),s=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[i,s,a,n,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",i,s,a,n,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=r.esds(e.config);return r.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(e=[43,146,8,0]){const t=e.length;let i=new s.Buffer,a=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(r.size(8+a.byteLength),r.type("esds"),a),i.buffer}static avc1(e){let t=new s.Buffer,i=e.width,a=e.height,n=e.parRatio.height,o=e.parRatio.width,l=e.avcc,d=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),h=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),u=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+d.byteLength+l.byteLength+h.byteLength),r.type("avc1"),d,r.size(8+l.byteLength),r.type("avcC"),l,r.size(20),r.type("btrt"),h,r.size(16),r.type("pasp"),u),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e,t=1e3,i){let a=new s.Buffer,n=s.Buffer.writeUint32(e);return a.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),n,r.trex(i)),a.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=r.mfhd(),s=r.traf(e);return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",i,s)}static mfhd(){let e=s.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,i=r.tfhd(e.id),s=r.tfdt(e.time),a=r.sdtp(e),n=r.trun(e,a.byteLength);return[i,s,n,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",i,s,n,a)}static tfhd(e){let t=s.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),s.Buffer.writeUint32(e))}static trun(e,t){let i=new s.Buffer,a=s.Buffer.writeUint32(e.samples.length),n=s.Buffer.writeUint32(92+16*e.samples.length+t);return i.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new s.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,s=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([s]))}),t.buffer}static mdat(e){let t=new s.Buffer,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(r.size(i),r.type("mdat"));let a=new Uint8Array(i),n=0;return a.set(t.buffer,n),n+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{a.set(e,n),n+=e.byteLength})}),a}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
      !*** ../xgplayer-remux/src/mp4/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=(s=i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"))&&s.__esModule?s:{default:s};const n=r.EVENTS.REMUX_EVENTS;class o{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(n.REMUX_MEDIA,this.remux.bind(this)),this.on(n.REMUX_METADATA,this.onMetaDataReady.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t,i,s=new r.Buffer,o=a.default.ftyp();if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");i=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");i=e}t=a.default.moov({type:e,meta:i.meta}),s.write(o,t);let l=this._context.getInstance("PRE_SOURCE_BUFFER"),d=l.getSource(e);d||(d=l.createSource(e)),d.mimetype=i.meta.codec,d.init=s,this.emit(n.INIT_SEGMENT,e)}calcDtsBase(e,t){if(!e.samples.length&&!t.samples.length)return;let i=1/0,s=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(s=t.samples[0].dts),this._dtsBase=Math.min(i,s),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let{samples:i}=t,s=-1;const o=[],l={samples:[]};for(;i.length;){const e=i.shift(),{isKeyframe:t}=e;let r,a,n=e.dts-this._dtsBase;-1===s&&(s=n),e.pts&&(r=(a=e.pts-this._dtsBase)-n),e.cts&&(a=e.cts+n,r=e.cts);let d={buffer:[],size:0};l.samples.push(d),d.buffer.push(e.data),d.size+=e.data.byteLength;let h=0;h=i.length>=1?i[0].dts-this._dtsBase-n:o.length>=1?o[o.length-1].duration:this.videoMeta.refSampleDuration,this.videoAllDuration+=h,o.push({dts:n,cts:r,pts:a,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:h,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:n,type:"video"})}let d=new r.Buffer;const h=a.default.moof({id:t.meta.id,time:s,samples:o}),u=a.default.mdat(l);d.write(h,u),t.samples=[],t.length=0;let c=this._context.getInstance("PRE_SOURCE_BUFFER"),f=c.getSource("video");f||(f=c.createSource("video")),f.data.push(d),this.emit(n.MEDIA_SEGMENT,"video")}_remuxAudio(e){const{samples:t}=e;let i=-1,s=[];const o={samples:[]};if(!t||!t.length)return;let l=!1;for(;t.length;){let e=t.shift();const{data:r}=e;let a=e.dts-this._dtsBase;const n=a;l||(i=a,l=!0);let d=0;d=this.audioMeta.refSampleDurationFixed?this.audioMeta.refSampleDurationFixed:t.length>=1?t[0].dts-this._dtsBase-a:s.length>=1?s[s.length-1].duration:this.audioMeta.refSampleDuration,this.audioAllDuration+=d;const h={dts:a,pts:a,cts:0,size:r.byteLength,duration:e.duration?e.duration:d,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:n,type:"audio"};let u={buffer:[],size:0};u.buffer.push(r),u.size+=r.byteLength,o.samples.push(u),s.push(h)}const d=new r.Buffer,h=a.default.moof({id:e.meta.id,time:i,samples:s}),u=a.default.mdat(o);d.write(h,u),e.samples=[],e.length=0;let c=this._context.getInstance("PRE_SOURCE_BUFFER"),f=c.getSource("audio");f||(f=c.createSource("audio")),f.data.push(d),this.emit(n.MEDIA_SEGMENT,"audio",d)}initSilentAudio(e,t){const i=o.getSilentFrame(this.audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=o},"../xgplayer-utils/index.js":
/*!**********************************!*\
      !*** ../xgplayer-utils/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Context:i(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:i(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:i(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:i(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:i(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:i(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,MediaInfo:i(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:i(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:i(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:i(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:i(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:i(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:i(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
      !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
      \***********************************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,s=Array(i>1?i-1:0),r=1;r<i;r++)s[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var l,d=s[Symbol.iterator]();!(a=(l=d.next()).done);a=!0){var h=l.value;t+=h.length}}catch(e){n=!0,o=e}finally{try{!a&&d.return&&d.return()}finally{if(n)throw o}}var u=new e(t),c=0,f=!0,p=!1,m=void 0;try{for(var g,y=s[Symbol.iterator]();!(f=(g=y.next()).done);f=!0){var _=g.value;u.set(_,c),c+=_.length}}catch(e){p=!0,m=e}finally{try{!f&&y.return&&y.return()}finally{if(p)throw m}}return u}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
      !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
      \**********************************************************************/
/*! no static exports found */function(e,t,i){var s,r=(s=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"))&&s.__esModule?s:{default:s};e.exports=r.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
      !*** ../xgplayer-utils/src/constants/events.js ***!
      \*************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},n={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o={RETRY_TIME_EXCEEDED:"RETRY_TIME_EXCEEDED"},l=Object.assign({},s,r,a,n,o),d=[],h=[];for(let e in l)l.hasOwnProperty(e)&&d.push(l[e]);for(let e in l)l.hasOwnProperty(e)&&h.push(l[e]);t.default={ALLEVENTS:l,HLS_EVENTS:o,REMUX_EVENTS:a,DEMUX_EVENTS:r,MSE_EVENTS:n,LOADER_EVENTS:s,FlvAllowedEvents:d,HlsAllowedEvents:h}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
      !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
      \**********************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
      !*** ../xgplayer-utils/src/context.js ***!
      \****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"))&&s.__esModule?s:{default:s},a=i(/*! events */"../../node_modules/events/events.js");const n="__TO__";t.default=class{constructor(e=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new r.default,this.allowedEvents=e,this._hooks={}}getInstance(e){return this._instanceMap[e]?this._instanceMap[e]:null}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,s=this._isMessageNameValid.bind(this),r=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.onceListeners={},this.TAG=e,this._context=r}on(t,r){return s(t),this.listeners[t]?this.listeners[t].push(r):this.listeners[t]=[r],i.on(`${t}${n}${e}`,r),i.on(t,r)}before(e,t){s(e),r._hooks[e]?r._hooks[e].push(t):r._hooks[e]=[t]}once(t,r){return s(t),this.onceListeners[t]?this.onceListeners[t].push(r):this.onceListeners[t]=[r],i.once(`${t}${n}${e}`,r),i.once(t,r)}emit(e,...t){s(e);const a=r._hooks[e];if(a)for(let e=0,t=a.length;e<t;e++)(0,a[e])();return i.emit(e,...t)}emitTo(e,t,...r){return s(t),i.emit(`${t}${n}${e}`,...r)}off(e,t){return s(e),i.off(e,t)}removeListeners(){const t=Object.prototype.hasOwnProperty.bind(this.listeners);for(let s in this.listeners)if(t(s)){const t=this.listeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}for(let s in this.onceListeners)if(t(s)){const t=this.onceListeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}}destroy(){this.removeListeners(),delete r._instanceMap[e],super.destroy&&super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this._hooks=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
      !*** ../xgplayer-utils/src/env/isle.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=s},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
      !*** ../xgplayer-utils/src/env/sniffer.js ***!
      \********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,s=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),a=/(?:iPad|PlayBook)/.test(e)||s&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),n=/(?:iPhone)/.test(e)&&!a;return{isTablet:a,isPhone:n,isAndroid:s,isPc:!n&&!s&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:r}},get isLe(){return s}};t.default=r},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
      !*** ../xgplayer-utils/src/env/utf8.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static decode(e){const t=[],i=e;let r=0;const a=e.length;for(;r<a;)if(i[r]<128)t.push(String.fromCharCode(i[r])),++r;else{if(i[r]<192);else if(i[r]<224){if(s._checkContinuation(i,r,1)){const e=(31&i[r])<<6|63&i[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(i[r]<240){if(s._checkContinuation(i,r,2)){const e=(15&i[r])<<12|(63&i[r+1])<<6|63&i[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(i[r]<248&&s._checkContinuation(i,r,3)){let e=(7&i[r])<<18|(63&i[r+1])<<12|(63&i[r+2])<<6|63&i[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,i){let s=e;if(t+i<s.length){for(;i--;)if(128!=(192&s[++t]))return!1;return!0}return!1}}t.default=s},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
      !*** ../xgplayer-utils/src/models/media-info.js ***!
      \**************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return s(e)}static isVideoReady(e){return!e.hasVideo||s(e.video)}static isAudioReady(e){return!e.hasAudio||s(e.video)}}t.default=r},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
      !*** ../xgplayer-utils/src/models/media-sample.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=s},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
      !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
      \**********************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,s=0,r=0,a=i,n=0;if(e<t[0].originDts)return-1;for(;r<=a;){if((s=r+Math.floor((a-r)/2))===i||e>t[s].lastSample.originDts&&e<t[s+1].originDts){n=s;break}t[s].originDts<e?r=s+1:a=s-1}return n}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,s=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?s=i+1:t.length>0&&(s=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=s,this._list.splice(s,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
      !*** ../xgplayer-utils/src/models/media-segment.js ***!
      \*****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
      !*** ../xgplayer-utils/src/models/track-meta.js ***!
      \**************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}},t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}}},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
      !*** ../xgplayer-utils/src/models/track-sample.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=s;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
      !*** ../xgplayer-utils/src/mse/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1,this.onSourceOpen=this.onSourceOpen.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onWaiting=this.onWaiting.bind(this)}init(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate),this.container.addEventListener("waiting",this.onWaiting)}onTimeUpdate(){this.emit("TIME_UPDATE",this.container)}onWaiting(){this.emit("WAITING",this.container)}onSourceOpen(){this.addSourceBuffers()}onUpdateEnd(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),i=this._context.getInstance("TRACKS");t=t.sources;let s=!1;for(let r=0,a=Object.keys(t).length;r<a;r++){let a=Object.keys(t)[r];if("audio"===a?e=i.audioTrack:"video"===a&&(e=i.videoTrack),e){let i="audio"===a?21:40;e.meta&&e.meta.refSampleDuration&&(i=e.meta.refSampleDuration),t[a].data.length>=this.preloadTime/i&&(s=!0)}}if(s){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,i=Object.keys(t).length;e<i;e++){let i=Object.keys(t)[e],s=t[i],r="video"===i?"video/mp4;codecs="+s.mimetype:"audio/mp4;codecs="+s.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[i]=a,a.addEventListener("updateend",this.onUpdateEnd.bind(this)),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],s=this.sourceBuffers[i];if(!s.updating){let t=e.sources[i];if(t&&!t.inited)s.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&s.appendBuffer(e.buffer.buffer)}}}}endOfStream(){"open"===this.mediaSource.readyState&&this.mediaSource.endOfStream()}remove(e){for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=this.sourceBuffers[Object.keys(this.sourceBuffers)[t]];i.updating||i.remove(0,e)}}destroy(){this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen),this.configs={},this.container=null,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=1;for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let t=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];t.removeEventListener("updateend",this.onUpdateEnd),this.mediaSource.removeSourceBuffer(t),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[e]]}}}},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/write/buffer.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"))&&s.__esModule?s:{default:s};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,r.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/write/stream.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),i=e%4;for(let e=0;e<t;e++)s.readByte(this.dataview,4);i>0&&s.readByte(this.dataview,i)}static readByte(e,t,i){let s;switch(t){case 1:s=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:s=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");s=e.getUint8(e.position)<<16,s|=e.getUint8(e.position+1)<<8,s|=e.getUint8(e.position+2);break;case 4:s=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");s=e.getUint32(e.position)<<32,s|=e.getUint32(e.position+4);break;default:s=""}return e.position+=t,s}readUint8(){return s.readByte(this.dataview,1)}readUint16(){return s.readByte(this.dataview,2)}readUint24(){return s.readByte(this.dataview,3)}readUint32(){return s.readByte(this.dataview,4)}readUint64(){return s.readByte(this.dataview,8)}readInt8(){return s.readByte(this.dataview,1,!0)}readInt16(){return s.readByte(this.dataview,2,!0)}readInt32(){return s.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=s},"./src/flv-live.js":
/*!*************************!*\
      !*** ./src/flv-live.js ***!
      \*************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=h(i(/*! xgplayer-remux */"../xgplayer-remux/index.js")),r=i(/*! xgplayer-loader */"../xgplayer-loader/index.js"),a=i(/*! xgplayer-demux */"../xgplayer-demux/index.js"),n=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),l=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),d=h(i(/*! xgplayer */"xgplayer"));function h(e){return e&&e.__esModule?e:{default:e}}const u=o.EVENTS.REMUX_EVENTS,c=o.EVENTS.DEMUX_EVENTS,f=o.EVENTS.LOADER_EVENTS,p=o.EVENTS.MSE_EVENTS;class m{warn(){}}t.default=class{constructor(e){this.TAG="FLVController",this._player=e,this.state={initSegmentArrived:!1}}init(){this._context.registry("FETCH_LOADER",r.FetchLoader),this._context.registry("LOADER_BUFFER",n.XgBuffer),this._context.registry("FLV_DEMUXER",a.FlvDemuxer),this._context.registry("TRACKS",n.Tracks),this._context.registry("MP4_REMUXER",s.default.Mp4Remuxer),this._context.registry("PRE_SOURCE_BUFFER",n.PreSource),this._context.registry("COMPATIBILITY",l.Compatibility),this._context.registry("LOGGER",m),this.mse=this._context.registry("MSE",o.Mse)({container:this._player.video}),this.initListeners()}initListeners(){this.on(f.LOADER_DATALOADED,this._handleLoaderDataLoaded.bind(this)),this.on(f.LOADER_ERROR,this._handleNetworkError.bind(this)),this.on(c.MEDIA_INFO,this._handleMediaInfo.bind(this)),this.on(c.METADATA_PARSED,this._handleMetadataParsed.bind(this)),this.on(c.DEMUX_COMPLETE,this._handleDemuxComplete.bind(this)),this.on(c.DEMUX_ERROR,this._handleDemuxError.bind(this)),this.on(u.INIT_SEGMENT,this._handleAppendInitSegment.bind(this)),this.on(u.MEDIA_SEGMENT,this._handleMediaSegment.bind(this)),this.on(p.SOURCE_UPDATE_END,this._handleSourceUpdateEnd.bind(this)),this._player.on("timeupdate",this._handleTimeUpdate.bind(this))}_handleMediaInfo(){this._context.mediaInfo||this.emit(c.DEMUX_ERROR,new Error("failed to get mediainfo"))}_handleLoaderDataLoaded(){this.emitTo("FLV_DEMUXER",c.DEMUX_START)}_handleMetadataParsed(e){this.emit(u.REMUX_METADATA,e)}_handleDemuxComplete(){this.emit(u.REMUX_MEDIA)}_handleAppendInitSegment(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}_handleMediaSegment(){this.mse.addSourceBuffers(),this.mse.doAppend()}_handleSourceUpdateEnd(){const e=this._player.currentTime,t=this._player.video,i=this._player.config.preloadTime||5,{length:s}=t.buffered;if(0===s)return;const r=t.buffered.end(s-1);r-e>2*i&&(this._player.currentTime=r-i)}_handleTimeUpdate(){const e=this._player.currentTime;e>2&&this.mse.remove(e-2)}_handleNetworkError(){this._player.emit("error",new d.default.Errors("network",this._player.config.url))}_handleDemuxError(){this._player.emit("error",new d.default.Errors("parse",this._player.config.url))}seek(){this.state.initSegmentArrived||this.loadData()}loadData(){this.emit(f.LADER_START,this._player.config.url)}pause(){const e=this._context.getInstance("FETCH_LOADER");e&&e.cancel()}destroy(){this._player=null,this.mse=null}}},"./src/index.js":
/*!**********************!*\
      !*** ./src/index.js ***!
      \**********************/
/*! no static exports found */function(e,t,i){var s=n(i(/*! xgplayer */"xgplayer")),r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=n(i(/*! ./flv-live */"./src/flv-live.js"));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.FlvAllowedEvents;e.exports=class extends s.default{constructor(e){super(e),this.context=new r.Context(o),this.initEvents()}start(){this.initFlv(),this.context.init(),super.start(this.flv.mse.url)}initFlvEvents(e){const t=this;e.once(r.EVENTS.REMUX_EVENTS.INIT_SEGMENT,()=>{if(s.default.util.addClass(t.root,"xgplayer-is-live"),!s.default.util.findDom(this.root,"xg-live")){const e=s.default.util.createDom("xg-live","正在直播",{},"xgplayer-live");t.controls.appendChild(e)}}),e.once(r.EVENTS.LOADER_EVENTS.LOADER_COMPLETE,()=>{if(!t.paused){const e=setInterval(()=>{const i=t.getBufferedRange()[1];Math.abs(t.currentTime-i)<.5&&(t.emit("ended"),window.clearInterval(e))},200)}})}initEvents(){this.on("timeupdate",()=>{this.loadData()}),this.on("seeking",()=>{const e=this.currentTime,t=this.getBufferedRange();(e>t[1]||e<t[0])&&this.flv.seek(this.currentTime)})}initFlv(){const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.initFlvEvents(e),this.flv=e}play(){if(this._hasStart){this._destroy(),this.context=new r.Context(o);const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.initFlvEvents(e),this.flv=e,this.context.init(),super.start(e.mse.url),super.play()}else super.play()}pause(){super.pause(),this.flv&&this.flv.pause()}loadData(e=this.currentTime){this.flv&&this.flv.seek(e)}destroy(){this._destroy(),super.destroy()}_destroy(){this.context.destroy(),this.flv=null,this.context=null}get src(){return this.currentSrc}set src(e){this.player.config.url=e,this.paused?this.start(e):(this.pause(),this.once("pause",()=>{this.start(e)}),this.once("canplay",()=>{this.play()})),this.once("canplay",()=>{this.currentTime=0})}}},0:
/*!****************************!*\
      !*** multi ./src/index.js ***!
      \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!***************************!*\
      !*** external "xgplayer" ***!
      \***************************/
/*! no static exports found */function(e,t){e.exports=s}}))},"../xgplayer-flv-vod/dist/index.js":
/*!***************************!*\
  !*** .-vod/dist/index.js ***!
  \***************************/
/*! no static exports found */function(e,t,i){"use strict";var s;window,e.exports=(s=i(/*! xgplayer */"xgplayer"),function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../../node_modules/events/events.js":
/*!*****************************************************************************************!*\
      !*** /Users/leonardo/Documents/front-end/player/xgplayer/node_modules/events/events.js ***!
      \*****************************************************************************************/
/*! no static exports found */function(e,t,i){var s,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};s=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var l=10;function d(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function h(e,t,i,s){var r,a,n,o;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i);if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),a=e._events),n=a[t]),void 0===n)n=a[t]=i,++e._eventsCount;else if("function"==typeof n?n=a[t]=s?[i,n]:[n,i]:s?n.unshift(i):n.push(i),(r=d(e))>0&&n.length>r&&!n.warned){n.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=n.length,o=l,console&&console.warn&&console.warn(o)}return e}function u(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function c(e,t,i){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=u.bind(s);return r.listener=i,s.wrapFn=r,r}function f(e,t,i){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):m(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function m(e,t){for(var i=new Array(t),s=0;s<t;++s)i[s]=e[s];return i}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return d(this)},o.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var s="error"===e,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var l=r[e];if(void 0===l)return!1;if("function"==typeof l)a(l,this,t);else{var d=l.length,h=m(l,d);for(i=0;i<d;++i)a(h[i],this,t)}return!0},o.prototype.addListener=function(e,t){return h(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return h(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var i,s,r,a,n;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(s=this._events))return this;if(void 0===(i=s[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(r=-1,a=i.length-1;a>=0;a--)if(i[a]===t||i[a].listener===t){n=i[a].listener,r=a;break}if(r<0)return this;0===r?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,r),1===i.length&&(s[e]=i[0]),void 0!==s.removeListener&&this.emit("removeListener",e,n||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,i,s;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,a=Object.keys(i);for(s=0;s<a.length;++s)"removeListener"!==(r=a[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},"../xgplayer-buffer/index.js":
/*!***********************************!*\
      !*** ../xgplayer-buffer/index.js ***!
      \***********************************/
/*! no static exports found */function(e,t,i){e.exports={Track:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:i(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").default}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
      !*** ../xgplayer-buffer/src/buffer.js ***!
      \****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let s=this.array[0].slice(this.offset,this.offset+e);t.set(s,i),this.offset+=e,this.length-=e,e=0;break}{let s=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=s,this.length-=s,e-=s}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,s=this.offset+e;for(;s<this.offset+t+e;)s<this.array[0].length?i=256*i+this.array[0][s]:this.array[1]&&(i=256*i+this.array[1][s-this.array[0].length]),s++;return i}},t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
      !*** ../xgplayer-buffer/src/presouce.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new s,this.sources[e]}clear(){this.sources={}}destroy(){this.sources={}}}},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
      !*** ../xgplayer-buffer/src/track.js ***!
      \***************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=s,t.AudioTrack=class extends s{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}},t.VideoTrack=class extends s{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}},t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-codec/index.js":
/*!**********************************!*\
      !*** ../xgplayer-codec/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Nalunit:i(/*! ./src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js").default,SpsParser:i(/*! ./src/h264/nalunit/sps */"../xgplayer-codec/src/h264/nalunit/sps.js").default,Compatibility:i(/*! ./src/compatibility */"../xgplayer-codec/src/compatibility.js").default}},"../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
      !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{static getSilentFrame(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},"../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
      !*** ../xgplayer-codec/src/compatibility.js ***!
      \**********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=(s=i(/*! ./aac/aac-helper */"../xgplayer-codec/src/aac/aac-helper.js"))&&s.__esModule?s:{default:s};const{REMUX_EVENTS:n}=r.EVENTS;class o{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[]}init(){this.before(n.REMUX_MEDIA,this.doFix.bind(this))}reset(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:e,isFirstVideoSamples:t}=this.getFirstSample();this.removeInvalidSamples(),this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples),this.doFixVideo(t),this.doFixAudio(e)}doFixVideo(e){let{samples:t,meta:i}=this.videoTrack;if(i.frameRate&&!1===i.frameRate.fixed)return;if(!t||!t.length||!this._firstVideoSample)return;const s=t[0],r=s.dts,a=t.length;if(e&&this._firstAudioSample){const e=this._firstVideoSample.dts,r=e-this._firstAudioSample.dts;if(r>2*i.refSampleDuration){const a=Math.floor(r/i.refSampleDuration);for(let r=0;r<a;r++){const a=Object.assign({},s);a.dts=e-(r+1)*i.refSampleDuration,a.pts=a.dts+a.cts,t.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}}}let n;if(this.nextVideoDts){n=r-this.nextVideoDts;const e=Math.abs(n);if(n>2*i.refSampleDuration){const e=Math.floor(n/i.refSampleDuration);for(let s=0;s<e;s++){const e=Object.assign({},t[0]),a=r-(s+1)*i.refSampleDuration;e.dts=a>this.nextVideoDts?a:this.nextVideoDts,e.pts=e.dts+e.cts,this.videoTrack.samples.unshift(e),this.filledVideoSamples.push({dts:e.dts,size:e.data.byteLength})}}else e<=10&&e>0&&(t[0].dts=this.nextVideoDts,t[0].originDts=t[0].dts,t[0].cts=t[0].cts||t[0].pts-t[0].dts,t[0].pts=t[0].dts+t[0].cts)}const o=t[t.length-1].dts,l=t.length>=2?o-t[t.length-2].dts:i.refSampleDuration;this.lastVideoSamplesLen=a,this.nextVideoDts=o+l,this.lastVideoDts=o;for(let e=0,s=t.length;e<s;e++){const s=t[e],r=t[e+1];if(!r)break;const a=r.dts-s.dts;if(a>2*i.refSampleDuration){let n=Math.floor(a/i.refSampleDuration),o=0;for(;o<n;){const a=Object.assign({},r);a.dts=s.dts+(o+1)*i.refSampleDuration,a.pts=a.dts+a.cts,a<r.dts&&(t.splice(e,0,a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})),o++,e++}}}this.videoTrack.samples=t}doFixAudio(e){let{samples:t,meta:i}=this.audioTrack;if(!t||!t.length)return;const s=t.length,r=a.default.getSilentFrame(i.codec,i.channelCount),n=this._firstAudioSample;if(t=o.sortAudioSamples(t),this._firstVideoSample&&e){const e=this._firstVideoSample.pts?this._firstVideoSample.pts:this._firstVideoSample.dts+this._firstVideoSample.cts;if(n.dts-e>i.refSampleDuration){const s=Math.floor((n.dts-e)/i.refSampleDuration);for(let e=0;e<s;e++){const s={data:r,datasize:r.byteLength,dts:n.dts-(e+1)*i.refSampleDuration,filtered:0};t.unshift(s),this.filledAudioSamples.push({dts:s.dts,size:s.data.byteLength})}}}let l;const d=t[0].dts;if(this.nextAudioDts){l=d-this.nextAudioDts;const e=Math.abs(l);if(e>i.refSampleDuration&&1===s&&1===this.lastAudioSamplesLen&&(i.refSampleDurationFixed=void 0),l>2*i.refSampleDuration)if(1===s&&1===this.lastAudioSamplesLen)i.refSampleDurationFixed=void 0!==i.refSampleDurationFixed?i.refSampleDurationFixed+l:i.refSampleDuration+l;else{const e=Math.floor(l/i.refSampleDuration);for(let s=0;s<e;s++){const e=d-(s+1)*i.refSampleDuration,r=Object.assign({},t[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else e<=10&&e>0&&(t[0].dts=this.nextAudioDts,t[0].pts=this.nextAudioDts)}const h=t[t.length-1].dts,u=t.length>=2?h-t[t.length-2].dts:i.refSampleDuration;this.lastAudioSamplesLen=s,this.nextAudioDts=i.refSampleDurationFixed?h+i.refSampleDurationFixed:h+u,this.lastAudioDts=h;for(let e=0,i=t.length;e<i;e++){const i=t[e],s=t[e+1];if(!s)break;const r=s.dts-i.dts;t[e].duration=r}this.audioTrack.samples=o.sortAudioSamples(t)}getFirstSample(){let{samples:e}=this.videoTrack,{samples:t}=this.audioTrack,i=!1,s=!1;return!this._firstVideoSample&&e.length&&(this._firstVideoSample=o.findFirstVideoSample(e),i=!0),!this._firstAudioSample&&t.length&&(this._firstAudioSample=o.findFirstAudioSample(t),s=!0),{isFirstVideoSamples:i,isFirstAudioSamples:s}}fixRefSampleDuration(e,t){const i="video"===e.type,s=i?this.allVideoSamplesCount:this.allAudioSamplesCount,r=i?this._firstVideoSample.dts:this._firstAudioSample.dts,a=i?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration)){if(t.length>=1){const i=t[t.length-1].dts;e.refSampleDuration=Math.floor((i-r)/(s+a-1))}}else if(e.refSampleDuration&&t.length>=3){const i=(t[t.length-1].dts-t[0].dts)/t.length;e.refSampleDuration=Math.abs(e.refSampleDuration-i)<=e.refSampleDuration?e.refSampleDuration:i}}recordSamplesCount(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}removeInvalidSamples(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter(e=>e.dts>=t.dts&&(void 0===this.lastAudioDts||e.dts>this.lastAudioDts)),this.videoTrack.samples=this.videoTrack.samples.filter(t=>t.dts>=e.dts&&(void 0===this.lastVideoDts||t.dts>this.lastVideoDts))}static sortAudioSamples(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}static findFirstAudioSample(e){return e&&0!==e.length?o.sortAudioSamples(e)[0]:null}static findFirstVideoSample(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,i=t.length;e<i;e++)if(t[e].isKeyframe)return t[e]}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks?this.tracks.audioTrack:null}get videoTrack(){return this.tracks?this.tracks.videoTrack:null}}t.default=o},"../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0,!1),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){if(e<=this._currentWordBitsLeft){let t=this._currentWord>>>32-e;return this._currentWord<<=e,this._currentWordBitsLeft-=e,t}let t=this._currentWordBitsLeft?this._currentWord:0;this._currentWordBitsLeft;let i=e-this._currentWordBitsLeft;this._fillCurrentWord();let s=Math.min(i,this._currentWordBitsLeft),r=this._currentWord>>>32-s;return this._currentWord<<=s,this._currentWordBitsLeft-=s,t<<s|r}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
      \***************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./sps */"../xgplayer-codec/src/h264/nalunit/sps.js"))&&s.__esModule?s:{default:s};class a{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,i=e.position;return 1===t.getInt32(i)||0===t.getInt16(i)&&1===t.getInt8(i+2)?a.getAnnexbNals(e):a.getAvccNals(e)}static getAnnexbNals(e){let t=[],i=a.getHeaderPositionAnnexB(e),s=i.pos,r=s;for(;s<e.length-4;){let n=e.buffer.slice(s,s+i.headerLength);i.pos===e.position&&e.skip(i.headerLength),r=(i=a.getHeaderPositionAnnexB(e)).pos;let o={header:n,body:new Uint8Array(e.buffer.slice(s+n.byteLength,r))};a.analyseNal(o),t.push(o),e.skip(r-e.position),s=r}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let i=e.dataview.getInt32();if(!(e.length-e.position>=i))break;{let s=e.buffer.slice(e.position,e.position+4);e.skip(4);let r=e.buffer.slice(e.position,e.position+i);e.skip(i);let n={header:s,body:r};a.analyseNal(n),t.push(n)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=r.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,i=0;for(;3!==i&&4!==i&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?i=4:1===e.dataview.getInt8(t+2)?i=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(i=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?i=3:t=e.length)),{pos:t,headerLength:i}}static getAvcc(e,t){let i=new Uint8Array(e.byteLength+t.byteLength+11);i[0]=1,i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=255,i[5]=225;let s=6;return i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),s),s+=2,i.set(e,s),i[s+=e.byteLength]=1,s++,i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),s),s+=2,i.set(t,s),i}}t.default=a},"../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
      !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
      \*************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./golomb */"../xgplayer-codec/src/h264/nalunit/golomb.js"))&&s.__esModule?s:{default:s};class a{static _ebsp2rbsp(e){let t=e,i=t.byteLength,s=new Uint8Array(i),r=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(s[r]=t[e],r++);return new Uint8Array(s.buffer,0,r)}static parseSPS(e){let t=a._ebsp2rbsp(e),i=new r.default(t);i.readByte();let s=i.readByte();i.readByte();let n=i.readByte();i.readUEG();let o=a.getProfileString(s),l=a.getLevelString(n),d=1,h=420,u=8;if((100===s||110===s||122===s||244===s||44===s||83===s||86===s||118===s||128===s||138===s||144===s)&&(3===(d=i.readUEG())&&i.readBits(1),d<=3&&(h=[0,420,422,444][d]),u=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==d?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?a._skipScalingList(i,16):a._skipScalingList(i,64))}i.readUEG();let c=i.readUEG();if(0===c)i.readUEG();else if(1===c){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let f=i.readUEG(),p=i.readUEG(),m=i.readBits(1);0===m&&i.readBits(1),i.readBits(1);let g=0,y=0,_=0,E=0;i.readBool()&&(g=i.readUEG(),y=i.readUEG(),_=i.readUEG(),E=i.readUEG());let v=1,S=1,A=0,x=!0,b=0,T=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],s=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(v=t[e-1],S=s[e-1]):255===e&&(v=i.readByte()<<8|i.readByte(),S=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);x=i.readBool(),A=(b=t)/(T=2*e)}}let w=1;1===v&&1===S||(w=v/S);let D=0,R=0;0===d?(D=1,R=2-m):(D=3===d?1:2,R=(1===d?2:1)*(2-m));let L=16*(f+1),M=16*(p+1)*(2-m);L-=(g+y)*D,M-=(_+E)*R;let O=Math.ceil(L*w);return i.destroy(),i=null,{profile_string:o,level_string:l,bit_depth:u,chroma_format:h,chroma_format_string:a.getChromaFormatString(h),frame_rate:{fixed:x,fps:A,fps_den:T,fps_num:b},par_ratio:{width:v,height:S},codec_size:{width:L,height:M},present_size:{width:O,height:M}}}static _skipScalingList(e,t){let i=8,s=8,r=0;for(let a=0;a<t;a++)0!==s&&(s=(i+(r=e.readSEG())+256)%256),i=0===s?i:s}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},t.frameRate=e.frame_rate;let i=t.frameRate.fps_den,s=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/s))}}t.default=a},"../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
      !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
      \***********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};t.default=class{constructor(){this.offset=0,this.readOffset=this.offset}resolve(e,t){if(t<3)throw new Error("not enough data for metainfo");const i={},s=this.parseValue(e),r=this.parseValue(e,t-s.bodySize);return i[s.data]=r.data,this.resetStatus(),i}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(e){const t=new DataView(e,this.readOffset).getUint16(0,!s.isLe);let i="";i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}parseDate(e,t){const i=new DataView(e,this.readOffset,t);let r=i.getFloat64(0,!s.isLe);return r+=60*i.getInt16(8,!s.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(e,t){const i=this.parseString(e,t),s=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:s.data},bodySize:i.bodySize+s.bodySize,isObjEnd:s.isObjEnd}}parseLongString(e){const t=new DataView(e,this.readOffset).getUint32(0,!s.isLe);let i="";return i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}parseValue(e,t){let i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:l,MIX_ARRAY:d,OBJECT_END:h,STRICT_ARRAY:u,DATE:c,LONE_STRING:f}=r,p=new DataView(i,this.readOffset,t);let m=!1;const g=p.getUint8(0);let y=1;this.readOffset+=1;let _=null;switch(g){case a:_=p.getFloat64(1,!s.isLe),this.readOffset+=8,y+=8;break;case n:_=!!p.getUint8(1),this.readOffset+=1,y+=1;break;case o:{const e=this.parseString(i);_=e.data,y+=e.bodySize;break}case l:{_={};let e=0;for(16777215&p.getUint32(t-4,!s.isLe)&&(e=3);y<t-4;){const s=this.parseObject(i,t-y-e);if(s.isObjectEnd)break;_[s.data.name]=s.data.value,y+=s.bodySize}y<=t-3&&9==(16777215&p.getUint32(y-1,!s.isLe))&&(this.readOffset+=3,y+=3);break}case d:{_={},y+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!s.isLe))&&(e=3);y<t-8;){const s=this.parseObject(i,t-y-e);if(s.isObjectEnd)break;_[s.data.name]=s.data.value,y+=s.bodySize}y<=t-3&&9==(16777215&p.getUint32(y-1,!s.isLe))&&(y+=3,this.readOffset+=3);break}case h:_=null,m=!0;break;case u:{_=[];const e=p.getUint32(1,!s.isLe);y+=4,this.readOffset+=4;for(let s=0;s<e;s++){const e=this.parseValue(i,t-y);_.push(e.data),y+=e.bodySize}break}case c:{const e=this.parseDate(i,t-1);_=e.data,y+=e.bodySize;break}case f:{const e=this.parseLongString(i,t-1);_=e.data,y+=e.bodySize;break}default:y=t}return{data:_,bodySize:y,isObjEnd:m}}}},"../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
      !*** ../xgplayer-demux/src/flv/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),n=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=(s=i(/*! ./amf-parser */"../xgplayer-demux/src/flv/amf-parser.js"))&&s.__esModule?s:{default:s};const l=r.EVENTS.DEMUX_EVENTS;class d{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(l.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}static getPlayType(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e;do{e=this._parseFlvTag()}while(e);this.emit(l.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}parseFlvHeader(e){if(d.isFlvFile(e)){this._firstFragmentLoaded=!0;const t=d.getPlayType(e[4]);t.hasVideo&&this.initVideoTrack(),t.hasAudio&&this.initAudioTrack()}else this.emit(l.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let e=new n.VideoTrack;e.meta=new r.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}initAudioTrack(){this._trackNum++;let e=new n.AudioTrack;e.meta=new r.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}_parseFlvTagHeader(){let e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.logger.warn(this.TAG,"tagType "+t.tagType),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let s=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(s+=16777216*r),t.dts=s,this.loaderBuffer.shift(3),t}_processChunk(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(e){let t=this.tracks.audioTrack,i=this.tracks.videoTrack,s=this.loaderBuffer.shift(e.datasize);const r=(new o.default).resolve(s,s.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(l.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(a.audiosamplerate&&(e.sampleRate=a.audiosamplerate),a.audiochannels&&(e.channelCount=a.audiochannels),a.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){let e=i.meta;if("number"==typeof a.framerate){let t=Math.floor(1e3*a.framerate);if(t>0){let i=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=i,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let i,s,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,s=new Array(4),i=a-3):(t.objectType=2,s=new Array(2),i=a):-1!==r.indexOf("android")?(t.objectType=2,s=new Array(2),i=a):(t.objectType=5,i=t.sampleRateIndex,s=new Array(4),t.sampleRateIndex>=6?i=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,s=new Array(2),i=t.sampleRateIndex)),s[0]=t.objectType<<3,s[0]|=(15&t.sampleRateIndex)>>>1,s[1]=(15&t.sampleRateIndex)<<7,s[1]|=(15&t.channelCount)<<3,5===t.objectType&&(s[1]|=(15&i)>>>1,s[2]=(1&i)<<7,s[2]|=8,s[3]=0),t.config=s,t}_parseAACData(e){let t=this.tracks.audioTrack;if(!t)return;let i=t.meta;i||(i=new r.AudioTrackMeta);let s=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let a=(240&s)>>>4;t.format=a,10!==a&&this.emit(l.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(s),i.sampleRateIndex=(12&s)>>>2,i.frameLenth=(2&s)>>>1,i.channelCount=1&s,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));let n=i.audioSampleRate,o=i.sampleRateIndex,d=i.refSampleDuration;delete e.tagType;let h=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);n=t.audiosamplerate||i.audioSampleRate,o=t.sampleRateIndex||i.sampleRateIndex,d=Math.floor(1024/n*i.timescale),i.channelCount=t.channelCount,i.sampleRate=n,i.sampleRateIndex=o,i.refSampleDuration=d,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=t.config;const s=this._context.mediaInfo.audio;s.codec=t.codec,s.channelCount=t.channelCount,s.sampleRate=n,s.sampleRateIndex=t.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(l.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&this.emit(l.AUDIO_METADATA_CHANGE),this._hasAudioSequence=!0}else e.data=e.data.slice(1,e.data.length),t.samples.push(e);if(!h){const t=new Error("TAG length error at "+e.datasize);this.emit(l.DEMUX_ERROR,t.message),this.logger.warn(this.TAG,t.message)}}_parseHevcData(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`);let t={},i=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>i;){let s=e.data.slice(Number.parseInt(i),4+i);t.size=s[3],t.size+=256*s[2],t.size+=256*s[1]*256,t.size+=256*s[0]*256*256,i+=4,t.data=e.data.slice(Number.parseInt(i),t.size+i),i+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(l.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(l.METADATA_PARSED,"video"):this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`))}else if(7===i){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let i=0;i<4;i++)e=256*e+t[i];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType)this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(l.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(l.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0);else{if(!this._datasizeValidator(e.datasize))return void this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`);this.tracks.videoTrack.samples.push(e)}}else this.logger.warn(this.TAG,`video codeid is ${i}`),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`),this.tracks.videoTrack.samples.push(e),this.emit(l.DEMUX_COMPLETE);delete e.tagType}_avcSequenceHeaderParser(e){let t=this.tracks.videoTrack;if(!t)return;let i=0;t.meta||(t.meta=new r.VideoTrackMeta);let s=t.meta;s.configurationVersion=e[0],s.avcProfileIndication=e[1],s.profileCompatibility=e[2],s.avcLevelIndication=e[3]/10,s.nalUnitLength=1+(3&e[4]);let n=31&e[5];i=6;let o={};for(let t=0;t<n;t++){let t=255*e[i]+e[i+1];i+=2;let r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e[i+s];let n="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),n+=t}s.codec=n,i+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let l=e[i];i++;for(let t=0;t<l;t++){let t=255*e[i]+e[i+1];i+=2;let s=new Uint8Array(t);for(let r=0;r<t;r++)s[r]=e[i+r];i+=t,this.tracks.videoTrack.meta.pps=s}Object.assign(s,a.SpsParser.toVideoMeta(o));const d=this._context.mediaInfo.video;d.codec=s.codec,d.profile=s.profile,d.level=s.level,d.chromaFormat=s.chromaFormat,d.frameRate=s.frameRate,d.parRatio=s.parRatio,d.width=d.width===s.presentWidth?d.width:s.presentWidth,d.height=d.height===s.presentHeight?d.width:s.presentHeight,s.duration=this._context.mediaInfo.duration*s.timescale,s.avcc=new Uint8Array(e.length),s.avcc.set(e),t.meta=s}_switchAudioSampleRate(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}_switchAudioSamplingFrequency(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}_switchAudioChannel(e){return[1,2][1&e]}_datasizeValidator(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}get loaderBuffer(){if(this._context.getInstance("LOADER_BUFFER"))return this._context.getInstance("LOADER_BUFFER");this.emit(l.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}t.default=d},"../xgplayer-loader/index.js":
/*!***********************************!*\
      !*** ../xgplayer-loader/index.js ***!
      \***********************************/
/*! no static exports found */function(e,t,i){e.exports={FetchLoader:i(/*! ./src/fetch-loader */"../xgplayer-loader/src/fetch-loader.js").default}},"../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
      !*** ../xgplayer-loader/src/fetch-loader.js ***!
      \**********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js").EVENTS.LOADER_EVENTS;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(s.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let i=this;this.url=e,this._canceled=!1;let r=this.getParams(t);return i.loading=!0,fetch(this.url,r).then((function(e){if(e.ok)return i.status=e.status,i._onFetchResponse(e);i.emit(s.LOADER_ERROR,i,e),i.loading=!1})).catch((function(e){throw i.emit(s.LOADER_ERROR,i,e),i.loading=!1,new Error(e.message)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);this._loaderTaskNo++;let r=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case 2:e.json().then(e=>{t.loading=!1,t._canceled||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 1:e.text().then(e=>{t.loading=!1,t._canceled||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 3:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||(i?(i.push(new Uint8Array(e)),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case 0:default:return this._onReader(e.body.getReader(),r)}}_onReader(e,t){let i=this._context.getInstance(this.buffer);if(i||this._reader.cancel(),this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then((function(a){return a.done?(r.loading=!1,r.status=0,void r.emit(s.LOADER_COMPLETE,i)):r._canceled?void r._reader.cancel():(i.push(a.value),r.emit(s.LOADER_DATALOADED,i),r._onReader(e,t))})).catch(e=>{r.emit(s.LOADER_ERROR,r,e),r.loading=!1})}getParams(e){let t=Object.assign({},e),i=new Headers,s={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}if("object"==typeof t.headers){let e=t.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(s.mode="same-origin"),t.withCredentials&&(s.credentials="include"),s}cancel(){this._reader&&(this._reader.cancel(),this._reader=null,this.loading=!1,this._canceled=!0)}destroy(){this.cancel()}}},"../xgplayer-remux/index.js":
/*!**********************************!*\
      !*** ../xgplayer-remux/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Mp4Remuxer:i(/*! ./src/mp4 */"../xgplayer-remux/src/mp4/index.js").default}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
      !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");class r{static size(e){return s.Buffer.writeUint32(e)}static initBox(e,t,...i){const a=new s.Buffer;return a.write(r.size(e),r.type(t),...i),a.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let i,s=8,a=r.mvhd(t.duration,t.timescale);i="video"===e?r.videoTrak(t):r.audioTrak(t);let n=r.mvex(t.duration,t.timescale||1e3,t.id);return[a,i,n].forEach(e=>{s+=e.byteLength}),r.initBox(s,"moov",a,i,n)}static mvhd(e,t=1e3){let i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),s=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static audioTrak(e){let t=8,i=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),s=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static tkhd(e){let t=e.id,i=e.duration,s=e.width,a=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>>8&255,255&s,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new s.Buffer,i=e.duration,a=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=r.mdhd(e.timescale,e.duration),s=r.hdlr(e.type),a=r.minf(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",i,s,a)}static mdhd(e=1e3,t){let i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+i.byteLength,"mdhd",r.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?r.vmhd():r.smhd(),s=r.dinf(),a=r.stbl(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",i,s,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new s.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=r.stsd(e),s=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[i,s,a,n,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",i,s,a,n,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=r.esds(e.config);return r.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(e=[43,146,8,0]){const t=e.length;let i=new s.Buffer,a=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(r.size(8+a.byteLength),r.type("esds"),a),i.buffer}static avc1(e){let t=new s.Buffer,i=e.width,a=e.height,n=e.parRatio.height,o=e.parRatio.width,l=e.avcc,d=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),h=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),u=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+d.byteLength+l.byteLength+h.byteLength),r.type("avc1"),d,r.size(8+l.byteLength),r.type("avcC"),l,r.size(20),r.type("btrt"),h,r.size(16),r.type("pasp"),u),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e,t=1e3,i){let a=new s.Buffer,n=s.Buffer.writeUint32(e);return a.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),n,r.trex(i)),a.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=r.mfhd(),s=r.traf(e);return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",i,s)}static mfhd(){let e=s.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,i=r.tfhd(e.id),s=r.tfdt(e.time),a=r.sdtp(e),n=r.trun(e,a.byteLength);return[i,s,n,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",i,s,n,a)}static tfhd(e){let t=s.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),s.Buffer.writeUint32(e))}static trun(e,t){let i=new s.Buffer,a=s.Buffer.writeUint32(e.samples.length),n=s.Buffer.writeUint32(92+16*e.samples.length+t);return i.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new s.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,s=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([s]))}),t.buffer}static mdat(e){let t=new s.Buffer,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(r.size(i),r.type("mdat"));let a=new Uint8Array(i),n=0;return a.set(t.buffer,n),n+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{a.set(e,n),n+=e.byteLength})}),a}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
      !*** ../xgplayer-remux/src/mp4/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=(s=i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"))&&s.__esModule?s:{default:s};const n=r.EVENTS.REMUX_EVENTS;class o{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(n.REMUX_MEDIA,this.remux.bind(this)),this.on(n.REMUX_METADATA,this.onMetaDataReady.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t,i,s=new r.Buffer,o=a.default.ftyp();if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");i=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");i=e}t=a.default.moov({type:e,meta:i.meta}),s.write(o,t);let l=this._context.getInstance("PRE_SOURCE_BUFFER"),d=l.getSource(e);d||(d=l.createSource(e)),d.mimetype=i.meta.codec,d.init=s,this.emit(n.INIT_SEGMENT,e)}calcDtsBase(e,t){if(!e.samples.length&&!t.samples.length)return;let i=1/0,s=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(s=t.samples[0].dts),this._dtsBase=Math.min(i,s),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let{samples:i}=t,s=-1;const o=[],l={samples:[]};for(;i.length;){const e=i.shift(),{isKeyframe:t}=e;let r,a,n=e.dts-this._dtsBase;-1===s&&(s=n),e.pts&&(r=(a=e.pts-this._dtsBase)-n),e.cts&&(a=e.cts+n,r=e.cts);let d={buffer:[],size:0};l.samples.push(d),d.buffer.push(e.data),d.size+=e.data.byteLength;let h=0;h=i.length>=1?i[0].dts-this._dtsBase-n:o.length>=1?o[o.length-1].duration:this.videoMeta.refSampleDuration,this.videoAllDuration+=h,o.push({dts:n,cts:r,pts:a,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:h,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:n,type:"video"})}let d=new r.Buffer;const h=a.default.moof({id:t.meta.id,time:s,samples:o}),u=a.default.mdat(l);d.write(h,u),t.samples=[],t.length=0;let c=this._context.getInstance("PRE_SOURCE_BUFFER"),f=c.getSource("video");f||(f=c.createSource("video")),f.data.push(d),this.emit(n.MEDIA_SEGMENT,"video")}_remuxAudio(e){const{samples:t}=e;let i=-1,s=[];const o={samples:[]};if(!t||!t.length)return;let l=!1;for(;t.length;){let e=t.shift();const{data:r}=e;let a=e.dts-this._dtsBase;const n=a;l||(i=a,l=!0);let d=0;d=this.audioMeta.refSampleDurationFixed?this.audioMeta.refSampleDurationFixed:t.length>=1?t[0].dts-this._dtsBase-a:s.length>=1?s[s.length-1].duration:this.audioMeta.refSampleDuration,this.audioAllDuration+=d;const h={dts:a,pts:a,cts:0,size:r.byteLength,duration:e.duration?e.duration:d,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:n,type:"audio"};let u={buffer:[],size:0};u.buffer.push(r),u.size+=r.byteLength,o.samples.push(u),s.push(h)}const d=new r.Buffer,h=a.default.moof({id:e.meta.id,time:i,samples:s}),u=a.default.mdat(o);d.write(h,u),e.samples=[],e.length=0;let c=this._context.getInstance("PRE_SOURCE_BUFFER"),f=c.getSource("audio");f||(f=c.createSource("audio")),f.data.push(d),this.emit(n.MEDIA_SEGMENT,"audio",d)}initSilentAudio(e,t){const i=o.getSilentFrame(this.audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=o},"../xgplayer-utils/index.js":
/*!**********************************!*\
      !*** ../xgplayer-utils/index.js ***!
      \**********************************/
/*! no static exports found */function(e,t,i){e.exports={Context:i(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:i(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:i(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:i(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:i(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:i(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,MediaInfo:i(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:i(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:i(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:i(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:i(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:i(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:i(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
      !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
      \***********************************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,s=Array(i>1?i-1:0),r=1;r<i;r++)s[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var l,d=s[Symbol.iterator]();!(a=(l=d.next()).done);a=!0){var h=l.value;t+=h.length}}catch(e){n=!0,o=e}finally{try{!a&&d.return&&d.return()}finally{if(n)throw o}}var u=new e(t),c=0,f=!0,p=!1,m=void 0;try{for(var g,y=s[Symbol.iterator]();!(f=(g=y.next()).done);f=!0){var _=g.value;u.set(_,c),c+=_.length}}catch(e){p=!0,m=e}finally{try{!f&&y.return&&y.return()}finally{if(p)throw m}}return u}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
      !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
      \**********************************************************************/
/*! no static exports found */function(e,t,i){var s,r=(s=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"))&&s.__esModule?s:{default:s};e.exports=r.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
      !*** ../xgplayer-utils/src/constants/events.js ***!
      \*************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},n={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o={RETRY_TIME_EXCEEDED:"RETRY_TIME_EXCEEDED"},l=Object.assign({},s,r,a,n,o),d=[],h=[];for(let e in l)l.hasOwnProperty(e)&&d.push(l[e]);for(let e in l)l.hasOwnProperty(e)&&h.push(l[e]);t.default={ALLEVENTS:l,HLS_EVENTS:o,REMUX_EVENTS:a,DEMUX_EVENTS:r,MSE_EVENTS:n,LOADER_EVENTS:s,FlvAllowedEvents:d,HlsAllowedEvents:h}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
      !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
      \**********************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
      !*** ../xgplayer-utils/src/context.js ***!
      \****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"))&&s.__esModule?s:{default:s},a=i(/*! events */"../../node_modules/events/events.js");const n="__TO__";t.default=class{constructor(e=[]){this._emitter=new a.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new r.default,this.allowedEvents=e,this._hooks={}}getInstance(e){return this._instanceMap[e]?this._instanceMap[e]:null}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,s=this._isMessageNameValid.bind(this),r=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.onceListeners={},this.TAG=e,this._context=r}on(t,r){return s(t),this.listeners[t]?this.listeners[t].push(r):this.listeners[t]=[r],i.on(`${t}${n}${e}`,r),i.on(t,r)}before(e,t){s(e),r._hooks[e]?r._hooks[e].push(t):r._hooks[e]=[t]}once(t,r){return s(t),this.onceListeners[t]?this.onceListeners[t].push(r):this.onceListeners[t]=[r],i.once(`${t}${n}${e}`,r),i.once(t,r)}emit(e,...t){s(e);const a=r._hooks[e];if(a)for(let e=0,t=a.length;e<t;e++)(0,a[e])();return i.emit(e,...t)}emitTo(e,t,...r){return s(t),i.emit(`${t}${n}${e}`,...r)}off(e,t){return s(e),i.off(e,t)}removeListeners(){const t=Object.prototype.hasOwnProperty.bind(this.listeners);for(let s in this.listeners)if(t(s)){const t=this.listeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}for(let s in this.onceListeners)if(t(s)){const t=this.onceListeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${n}${e}`,a)}}}destroy(){this.removeListeners(),delete r._instanceMap[e],super.destroy&&super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this._hooks=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
      !*** ../xgplayer-utils/src/env/isle.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=s},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
      !*** ../xgplayer-utils/src/env/sniffer.js ***!
      \********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,s=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),a=/(?:iPad|PlayBook)/.test(e)||s&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),n=/(?:iPhone)/.test(e)&&!a;return{isTablet:a,isPhone:n,isAndroid:s,isPc:!n&&!s&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:r}},get isLe(){return s}};t.default=r},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
      !*** ../xgplayer-utils/src/env/utf8.js ***!
      \*****************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{static decode(e){const t=[],i=e;let r=0;const a=e.length;for(;r<a;)if(i[r]<128)t.push(String.fromCharCode(i[r])),++r;else{if(i[r]<192);else if(i[r]<224){if(s._checkContinuation(i,r,1)){const e=(31&i[r])<<6|63&i[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(i[r]<240){if(s._checkContinuation(i,r,2)){const e=(15&i[r])<<12|(63&i[r+1])<<6|63&i[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(i[r]<248&&s._checkContinuation(i,r,3)){let e=(7&i[r])<<18|(63&i[r+1])<<12|(63&i[r+2])<<6|63&i[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,i){let s=e;if(t+i<s.length){for(;i--;)if(128!=(192&s[++t]))return!1;return!0}return!1}}t.default=s},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
      !*** ../xgplayer-utils/src/models/media-info.js ***!
      \**************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});const s=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return s(e)}static isVideoReady(e){return!e.hasVideo||s(e.video)}static isAudioReady(e){return!e.hasAudio||s(e.video)}}t.default=r},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
      !*** ../xgplayer-utils/src/models/media-sample.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=s},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
      !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
      \**********************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,s=0,r=0,a=i,n=0;if(e<t[0].originDts)return-1;for(;r<=a;){if((s=r+Math.floor((a-r)/2))===i||e>t[s].lastSample.originDts&&e<t[s+1].originDts){n=s;break}t[s].originDts<e?r=s+1:a=s-1}return n}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,s=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?s=i+1:t.length>0&&(s=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=s,this._list.splice(s,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
      !*** ../xgplayer-utils/src/models/media-segment.js ***!
      \*****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
      !*** ../xgplayer-utils/src/models/track-meta.js ***!
      \**************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}},t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}}},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
      !*** ../xgplayer-utils/src/models/track-sample.js ***!
      \****************************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=s;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
      !*** ../xgplayer-utils/src/mse/index.js ***!
      \******************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1,this.onSourceOpen=this.onSourceOpen.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onWaiting=this.onWaiting.bind(this)}init(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate),this.container.addEventListener("waiting",this.onWaiting)}onTimeUpdate(){this.emit("TIME_UPDATE",this.container)}onWaiting(){this.emit("WAITING",this.container)}onSourceOpen(){this.addSourceBuffers()}onUpdateEnd(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),i=this._context.getInstance("TRACKS");t=t.sources;let s=!1;for(let r=0,a=Object.keys(t).length;r<a;r++){let a=Object.keys(t)[r];if("audio"===a?e=i.audioTrack:"video"===a&&(e=i.videoTrack),e){let i="audio"===a?21:40;e.meta&&e.meta.refSampleDuration&&(i=e.meta.refSampleDuration),t[a].data.length>=this.preloadTime/i&&(s=!0)}}if(s){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,i=Object.keys(t).length;e<i;e++){let i=Object.keys(t)[e],s=t[i],r="video"===i?"video/mp4;codecs="+s.mimetype:"audio/mp4;codecs="+s.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[i]=a,a.addEventListener("updateend",this.onUpdateEnd.bind(this)),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],s=this.sourceBuffers[i];if(!s.updating){let t=e.sources[i];if(t&&!t.inited)s.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&s.appendBuffer(e.buffer.buffer)}}}}endOfStream(){"open"===this.mediaSource.readyState&&this.mediaSource.endOfStream()}remove(e){for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=this.sourceBuffers[Object.keys(this.sourceBuffers)[t]];i.updating||i.remove(0,e)}}destroy(){this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen),this.configs={},this.container=null,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=1;for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let t=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];t.removeEventListener("updateend",this.onUpdateEnd),this.mediaSource.removeSourceBuffer(t),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[e]]}}}},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/write/buffer.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s,r=(s=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"))&&s.__esModule?s:{default:s};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,r.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
      !*** ../xgplayer-utils/src/write/stream.js ***!
      \*********************************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),i=e%4;for(let e=0;e<t;e++)s.readByte(this.dataview,4);i>0&&s.readByte(this.dataview,i)}static readByte(e,t,i){let s;switch(t){case 1:s=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:s=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");s=e.getUint8(e.position)<<16,s|=e.getUint8(e.position+1)<<8,s|=e.getUint8(e.position+2);break;case 4:s=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");s=e.getUint32(e.position)<<32,s|=e.getUint32(e.position+4);break;default:s=""}return e.position+=t,s}readUint8(){return s.readByte(this.dataview,1)}readUint16(){return s.readByte(this.dataview,2)}readUint24(){return s.readByte(this.dataview,3)}readUint32(){return s.readByte(this.dataview,4)}readUint64(){return s.readByte(this.dataview,8)}readInt8(){return s.readByte(this.dataview,1,!0)}readInt16(){return s.readByte(this.dataview,2,!0)}readInt32(){return s.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=s},"./src/flv-vod.js":
/*!************************!*\
      !*** ./src/flv-vod.js ***!
      \************************/
/*! no static exports found */function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0});var s=h(i(/*! ../../xgplayer-demux/src/flv */"../xgplayer-demux/src/flv/index.js")),r=h(i(/*! xgplayer-remux */"../xgplayer-remux/index.js")),a=i(/*! xgplayer-loader */"../xgplayer-loader/index.js"),n=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),l=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),d=h(i(/*! xgplayer */"xgplayer"));function h(e){return e&&e.__esModule?e:{default:e}}const u=o.EVENTS.REMUX_EVENTS,c=o.EVENTS.DEMUX_EVENTS,f=o.EVENTS.LOADER_EVENTS,p="FLVController";class m{warn(){}}class g{constructor(e){this.TAG=p,this._player=e,this.state={initSegmentArrived:!1,range:{start:0,end:""},rangeSupport:!0}}static findFilePosition(e,t){for(let i=0,s=t.times.length;i<s;i++){const r=t.times[i],a=i+1<s?t.times[i+1]:Number.MAX_SAFE_INTEGER;if(r<=e&&e<=a)return t.filepositions[i]}return""}init(){this._context.registry("FETCH_LOADER",a.FetchLoader),this._context.registry("LOADER_BUFFER",n.XgBuffer),this._context.registry("FLV_DEMUXER",s.default),this._context.registry("TRACKS",n.Tracks),this._context.registry("MP4_REMUXER",r.default.Mp4Remuxer),this._context.registry("PRE_SOURCE_BUFFER",n.PreSource),this._context.registry("COMPATIBILITY",l.Compatibility),this._context.registry("LOGGER",m),this.mse=this._context.registry("MSE",o.Mse)({container:this._player.video}),this.initListeners(),setTimeout(()=>{this.loadMeta()},0)}initListeners(){this.on(f.LOADER_DATALOADED,this._handleLoaderDataLoaded.bind(this)),this.on(c.MEDIA_INFO,this._handleMediaInfo.bind(this)),this.on(c.METADATA_PARSED,this._handleMetadataParsed.bind(this)),this.on(c.DEMUX_COMPLETE,this._handleDemuxComplete.bind(this)),this.on(c.DEMUX_ERROR,this._handleDemuxError.bind(this)),this.on(u.INIT_SEGMENT,this._handleAppendInitSegment.bind(this)),this.on(u.MEDIA_SEGMENT,this._handleMediaSegment.bind(this))}_handleMediaInfo(){this._context.onMetaData||this.emit(c.DEMUX_ERROR,new Error("failed to get mediainfo"));const e=this._context.getInstance("LOADER_BUFFER"),t=this._context.getInstance("FETCH_LOADER");this.isSeekable&&(t.cancel(),this.state.range={start:0,end:e.historyLen-1},setTimeout(()=>{this.loadNext(0)}))}_handleLoaderDataLoaded(){this.emitTo("FLV_DEMUXER",c.DEMUX_START)}_handleMetadataParsed(e){this.emit(u.REMUX_METADATA,e)}_handleDemuxComplete(){this.emit(u.REMUX_MEDIA)}_handleAppendInitSegment(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}_handleMediaSegment(){this.mse.addSourceBuffers(),this.mse.doAppend()}_handleDemuxError(){this._player.emit("error",new d.default.Errors("parse",this._player.config.url))}seek(e){if(!this._context.onMetaData)return void this.loadMeta();if(!this.isSeekable)return;this._context.getInstance("LOADER_BUFFER").clear();const{preloadTime:t=15}=this._player.config,i=this.getSeekRange(e,t);this.state.range=i,this.loadData()}loadNext(e){this._context.onMetaData&&(this.loader.loading||this.getNextRange(e)&&this.loadData())}loadData(){const{start:e,end:t}=this.state.range;this.emit(f.LADER_START,this._player.config.url,{headers:{method:"get",Range:`bytes=${e}-${t}`}})}loadMeta(){this.loader.load(this._player.config.url,{headers:{Range:"bytes=0-"}}).catch(()=>{this.state.rangeSupport=!1,this.loadFallback()})}loadFallback(){this.loader.load(this._player.config.url).catch(()=>{this._player.emit("error",new d.default.Errors("network",this._player.config.url))})}getSeekRange(e,t){const{keyframes:i}=this._context.onMetaData,s=this._context.mediaInfo.duration,r=e,a=e+t,n=g.findFilePosition(r,i);return a>=s||r>=s?{start:n,end:""}:{start:n,end:g.findFilePosition(a,i)}}getNextRange(e){if(""===this.state.range.end)return;const{end:t}=this.getSeekRange(e,this.config.preloadTime||15);return t<=this.state.range.end&&""!==t?void 0:(this.state.range={start:this.state.range.end+1,end:t},!0)}destroy(){this._player=null,this.mse=null,this.state={initSegmentArrived:!1,range:{start:0,end:""},rangeSupport:!0}}get isSeekable(){return!!this.state.rangeSupport&&(!this._context||!this._context.mediaInfo.isComplete()||null!==this._context.mediaInfo.keyframes&&void 0!==this._context.mediaInfo.keyframes)}get config(){return this._player.config}get loader(){return this._context.getInstance("FETCH_LOADER")}}t.default=g},"./src/index.js":
/*!**********************!*\
      !*** ./src/index.js ***!
      \**********************/
/*! no static exports found */function(e,t,i){var s=n(i(/*! xgplayer */"xgplayer")),r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=n(i(/*! ./flv-vod */"./src/flv-vod.js"));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.FlvAllowedEvents;e.exports=class extends s.default{constructor(e){super(e),this.context=new r.Context(o),this.initEvents()}start(){const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.flv=e,this.context.init(),super.start(e.mse.url)}initEvents(){this.on("timeupdate",this.handleTimeUpdate.bind(this)),this.on("seeking",this.handleSeek.bind(this)),this.once("destroy",this._destroy.bind(this))}handleTimeUpdate(){this.loadData(),((e,t)=>{if(!e.config.isLive&&e.duration-e.currentTime<2){const i=e.getBufferedRange();e.currentTime-i[1]<.1&&(e.emit("ended"),t.mse.endOfStream())}})(this,this.flv)}handleSeek(){const e=this.currentTime,t=this.getBufferedRange();(e>t[1]||e<t[0])&&this.flv.seek(this.currentTime)}_destroy(){this.context.destroy(),this.context=null,this.flv=null}loadData(e=this.currentTime){const t=this.getBufferedRange();t[1]-e<(this.config.preloadTime||15)-5&&this.flv.loadNext(t[1]+1)}get src(){return this.currentSrc}set src(e){this.player.config.url=e,this.paused?this.start(e):(this.pause(),this.once("pause",()=>{this.start(e)}),this.once("canplay",()=>{this.play()})),this.once("canplay",()=>{this.currentTime=0})}}},0:
/*!****************************!*\
      !*** multi ./src/index.js ***!
      \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!***************************!*\
      !*** external "xgplayer" ***!
      \***************************/
/*! no static exports found */function(e,t){e.exports=s}}))},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,i){"use strict";var s=a(i(/*! xgplayer-flv-live */"../xgplayer-flv-live/dist/index.js")),r=a(i(/*! xgplayer-flv-vod */"../xgplayer-flv-vod/dist/index.js"));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t.isLive?new s.default(t):new r.default(t)}},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!***************************!*\
  !*** external "xgplayer" ***!
  \***************************/
/*! no static exports found */function(t,i){t.exports=e}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllci1mbHYvVXNlcnMvbGVvbmFyZG8vRG9jdW1lbnRzL2Zyb250LWVuZC9wbGF5ZXIveGdwbGF5ZXIvbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItYnVmZmVyL3NyYy9idWZmZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWJ1ZmZlci9zcmMvcHJlc291Y2UuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWJ1ZmZlci9zcmMvdHJhY2suanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWNvZGVjL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1jb2RlYy9zcmMvYWFjL2FhYy1oZWxwZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWNvZGVjL3NyYy9jb21wYXRpYmlsaXR5LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1jb2RlYy9zcmMvaDI2NC9uYWx1bml0L2dvbG9tYi5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItY29kZWMvc3JjL2gyNjQvbmFsdW5pdC9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItY29kZWMvc3JjL2gyNjQvbmFsdW5pdC9zcHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1kZW11eC9zcmMvZmx2L2FtZi1wYXJzZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L3NyYy9mbHYvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L3NyYy9obHMvZGVtdXhlci9tM3U4cGFyc2VyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1kZW11eC9zcmMvaGxzL2RlbXV4ZXIvdHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWRlbXV4L3NyYy9obHMvcGxheWxpc3QuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLWxvYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItbG9hZGVyL3NyYy9mZXRjaC1sb2FkZXIuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXJlbXV4L2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci1yZW11eC9zcmMvbXA0L2ZtcDQuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXJlbXV4L3NyYy9tcDQvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9ub2RlX21vZHVsZXMvY29uY2F0LXR5cGVkLWFycmF5L2xpYi9jb25jYXQuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL25vZGVfbW9kdWxlcy9jb25jYXQtdHlwZWQtYXJyYXkvbGliL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvY29uc3RhbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL2NvbnN0YW50cy93b3JrZXItY29tbWFuZHMuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9jb250ZXh0LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvZW52L2lzbGUuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9lbnYvc25pZmZlci5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL2Vudi91dGY4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL21lZGlhLWluZm8uanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvbWVkaWEtc2FtcGxlLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL21lZGlhLXNlZ21lbnQtbGlzdC5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyeGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy9tZWRpYS1zZWdtZW50LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL3RyYWNrLW1ldGEuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllcnhncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvdHJhY2stc2FtcGxlLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvbXNlL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvd3JpdGUvYnVmZmVyLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXJ4Z3BsYXllci11dGlscy9zcmMvd3JpdGUvc3RyZWFtLmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi93ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3NyYy9mbHYtbGl2ZS5qcyIsIndlYnBhY2s6Ly94Z3BsYXllci1mbHYvd2VicGFjazovL3hncGxheWVyLWZsdi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6L3hncGxheWVyLWZsdi9leHRlcm5hbCBcInhncGxheWVyXCIiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2L3dlYnBhY2s6Ly94Z3BsYXllci1mbHYvc3JjL2Zsdi12b2QuanMiLCJ3ZWJwYWNrOi8veGdwbGF5ZXItZmx2Ly4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3hncGxheWVyLWZsdi9leHRlcm5hbCBcInhncGxheWVyXCIiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfeGdwbGF5ZXJfXyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJ0YXJnZXQiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uY2F0IiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJ0aGlzIiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiJGdldE1heExpc3RlbmVycyIsInRoYXQiLCJfYWRkTGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwiVHlwZUVycm9yIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsInB1c2giLCJsZW5ndGgiLCJ3YXJuZWQiLCJ3IiwiRXJyb3IiLCJTdHJpbmciLCJlbWl0dGVyIiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIm9uY2VXcmFwcGVyIiwiYXJndW1lbnRzIiwiZmlyZWQiLCJyZW1vdmVMaXN0ZW5lciIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwiYXJyIiwicmV0IiwiQXJyYXkiLCJhcnJheUNsb25lIiwibGlzdGVuZXJDb3VudCIsImNvcHkiLCJzZXQiLCJhcmciLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXJyb3IiLCJlciIsImVyciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwiaGFuZGxlciIsImxlbiIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwib24iLCJwcmVwZW5kTGlzdGVuZXIiLCJvbmNlIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3QiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsImluZGV4IiwicG9wIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwia2V5cyIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJUcmFjayIsImRlZmF1bHQiLCJUcmFja3MiLCJBdWRpb1RyYWNrIiwiVmlkZW9UcmFjayIsIlhnQnVmZmVyIiwiUmVtdXhCdWZmZXIiLCJQcmVTb3VyY2UiLCJjb25zdHJ1Y3RvciIsImhpc3RvcnlMZW4iLCJhcnJheSIsIm9mZnNldCIsImRhdGEiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsIl9zaGlmdEJ1ZmZlciIsInNsaWNlIiwidG1wb2ZmIiwidG1wIiwidGVtcGxlbmd0aCIsImNsZWFyIiwiZGVzdHJveSIsInRvSW50Iiwic3RhcnQiLCJyZXRJbnQiLCJ2aWRlbyIsImF1ZGlvIiwiU291cmNlIiwibWltZXR5cGUiLCJzb3VyY2VzIiwiZ2V0U291cmNlIiwic291cmNlIiwiY3JlYXRlU291cmNlIiwiaWQiLCJzZXF1ZW5jZU51bWJlciIsInNhbXBsZXMiLCJkcm9wcGVkU2FtcGxlcyIsInJlc2V0IiwiZGlzdHJveSIsInN1cGVyIiwiVEFHIiwiZHJvcHBlZCIsImF1ZGlvVHJhY2siLCJ2aWRlb1RyYWNrIiwiTmFsdW5pdCIsIlNwc1BhcnNlciIsIkNvbXBhdGliaWxpdHkiLCJjb2RlYyIsImNoYW5uZWxDb3VudCIsIlJFTVVYX0VWRU5UUyIsIkVWRU5UUyIsIm5leHRBdWRpb0R0cyIsIm5leHRWaWRlb0R0cyIsImxhc3RBdWRpb1NhbXBsZXNMZW4iLCJsYXN0VmlkZW9TYW1wbGVzTGVuIiwibGFzdFZpZGVvRHRzIiwibGFzdEF1ZGlvRHRzIiwiYWxsQXVkaW9TYW1wbGVzQ291bnQiLCJhbGxWaWRlb1NhbXBsZXNDb3VudCIsIl9maXJzdEF1ZGlvU2FtcGxlIiwiX2ZpcnN0VmlkZW9TYW1wbGUiLCJmaWxsZWRBdWRpb1NhbXBsZXMiLCJmaWxsZWRWaWRlb1NhbXBsZXMiLCJiZWZvcmUiLCJSRU1VWF9NRURJQSIsImRvRml4IiwiaXNGaXJzdEF1ZGlvU2FtcGxlcyIsImlzRmlyc3RWaWRlb1NhbXBsZXMiLCJnZXRGaXJzdFNhbXBsZSIsInJlbW92ZUludmFsaWRTYW1wbGVzIiwicmVjb3JkU2FtcGxlc0NvdW50IiwiZml4UmVmU2FtcGxlRHVyYXRpb24iLCJtZXRhIiwiZG9GaXhWaWRlbyIsImRvRml4QXVkaW8iLCJmaXJzdCIsInZpZGVvU2FtcGxlcyIsImZyYW1lUmF0ZSIsImZpeGVkIiwiZmlyc3RTYW1wbGUiLCJmaXJzdER0cyIsImR0cyIsInNhbXBsZXNMZW4iLCJ2aWRlb0ZpcnN0RHRzIiwiZ2FwIiwicmVmU2FtcGxlRHVyYXRpb24iLCJmaWxsQ291bnQiLCJNYXRoIiwiZmxvb3IiLCJjbG9uZWRGaXJzdFNhbXBsZSIsImFzc2lnbiIsInB0cyIsImN0cyIsInNpemUiLCJhYnNHYXAiLCJhYnMiLCJmaWxsRnJhbWVDb3VudCIsImNsb25lZFNhbXBsZSIsImNvbXB1dGVkIiwib3JpZ2luRHRzIiwibGFzdER0cyIsImxhc3RTYW1wbGVEdXJhdGlvbiIsImN1cnJlbnQiLCJuZXh0IiwiZHVyYXRpb24iLCJmaWxsRnJhbWVJZHgiLCJmaWxsRnJhbWUiLCJzcGxpY2UiLCJhdWRpb1NhbXBsZXMiLCJzaWxlbnRGcmFtZSIsIkFBQyIsImdldFNpbGVudEZyYW1lIiwic29ydEF1ZGlvU2FtcGxlcyIsInZpZGVvRmlyc3RQdHMiLCJzaWxlbnRTYW1wbGVDb3VudCIsInNpbGVudFNhbXBsZSIsImRhdGFzaXplIiwiZmlsdGVyZWQiLCJyZWZTYW1wbGVEdXJhdGlvbkZpeGVkIiwic2lsZW50RnJhbWVDb3VudCIsImZpbmRGaXJzdFZpZGVvU2FtcGxlIiwiZmluZEZpcnN0QXVkaW9TYW1wbGUiLCJpc1ZpZGVvIiwiYWxsU2FtcGxlc0NvdW50IiwiZmlsbGVkU2FtcGxlc0NvdW50IiwiZHVyYXRpb25BdmciLCJmaWx0ZXIiLCJzYW1wbGUiLCJzb3J0IiwiYSIsImIiLCJzb3J0ZWQiLCJpc0tleWZyYW1lIiwiX2NvbnRleHQiLCJnZXRJbnN0YW5jZSIsInRyYWNrcyIsInVpbnQ4YXJyYXkiLCJfYnVmZmVyIiwiX2J1ZmZlckluZGV4IiwiX3RvdGFsQnl0ZXMiLCJfdG90YWxCaXRzIiwiX2N1cnJlbnRXb3JkIiwiX2N1cnJlbnRXb3JkQml0c0xlZnQiLCJfZmlsbEN1cnJlbnRXb3JkIiwiYnVmZmVyQnl0ZXNMZWZ0IiwiYnl0ZXNSZWFkIiwibWluIiwid29yZCIsInN1YmFycmF5IiwiRGF0YVZpZXciLCJidWZmZXIiLCJnZXRVaW50MzIiLCJyZWFkQml0cyIsImJpdHMiLCJyZXN1bHQiLCJiaXRzTmVlZExlZnQiLCJiaXRzUmVhZE5leHQiLCJyZXN1bHQyIiwicmVhZEJvb2wiLCJyZWFkQnl0ZSIsIl9za2lwTGVhZGluZ1plcm8iLCJ6ZXJvQ291bnQiLCJyZWFkVUVHIiwibGVhZGluZ1plcm9zIiwicmVhZFNFRyIsImJ1ZiIsImRhdGF2aWV3IiwiZ2V0SW50MzIiLCJnZXRJbnQxNiIsImdldEludDgiLCJnZXRBbm5leGJOYWxzIiwiZ2V0QXZjY05hbHMiLCJuYWxzIiwiZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIiLCJwb3MiLCJlbmQiLCJoZWFkZXIiLCJoZWFkZXJMZW5ndGgiLCJza2lwIiwidW5pdCIsImJvZHkiLCJhbmFseXNlTmFsIiwibmRyIiwiaWRyIiwic3BzIiwicGFyc2VTUFMiLCJwcHMiLCJTUFNQYXJzZXIiLCJzcmMiLCJzcmNMZW5ndGgiLCJkc3QiLCJkc3RJZHgiLCJyYnNwIiwiX2Vic3AycmJzcCIsImdiIiwiR29sb21iIiwicHJvZmlsZUlkYyIsImxldmVsSWRjIiwicHJvZmlsZV9zdHJpbmciLCJnZXRQcm9maWxlU3RyaW5nIiwibGV2ZWxfc3RyaW5nIiwiZ2V0TGV2ZWxTdHJpbmciLCJjaHJvbWFfZm9ybWF0X2lkYyIsImNocm9tYV9mb3JtYXQiLCJiaXRfZGVwdGgiLCJzY2FsaW5nX2xpc3RfY291bnQiLCJfc2tpcFNjYWxpbmdMaXN0IiwicGljX29yZGVyX2NudF90eXBlIiwibnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZSIsInBpY193aWR0aF9pbl9tYnNfbWludXMxIiwicGljX2hlaWdodF9pbl9tYXBfdW5pdHNfbWludXMxIiwiZnJhbWVfbWJzX29ubHlfZmxhZyIsImZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQiLCJmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCIsImZyYW1lX2Nyb3BfdG9wX29mZnNldCIsImZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCIsInBhcl93aWR0aCIsInBhcl9oZWlnaHQiLCJmcHMiLCJmcHNfZml4ZWQiLCJmcHNfbnVtIiwiZnBzX2RlbiIsImFzcGVjdF9yYXRpb19pZGMiLCJwYXJfd190YWJsZSIsInBhcl9oX3RhYmxlIiwibnVtX3VuaXRzX2luX3RpY2siLCJ0aW1lX3NjYWxlIiwicGFyU2NhbGUiLCJjcm9wX3VuaXRfeCIsImNyb3BfdW5pdF95IiwiY29kZWNfd2lkdGgiLCJjb2RlY19oZWlnaHQiLCJwcmVzZW50X3dpZHRoIiwiY2VpbCIsImNocm9tYV9mb3JtYXRfc3RyaW5nIiwiZ2V0Q2hyb21hRm9ybWF0U3RyaW5nIiwiZnJhbWVfcmF0ZSIsInBhcl9yYXRpbyIsIndpZHRoIiwiaGVpZ2h0IiwiY29kZWNfc2l6ZSIsInByZXNlbnRfc2l6ZSIsImxhc3Rfc2NhbGUiLCJuZXh0X3NjYWxlIiwiZGVsdGFfc2NhbGUiLCJ0b0ZpeGVkIiwiY2hyb21hIiwic3BzQ29uZmlnIiwiY29kZWNXaWR0aCIsImNvZGVjSGVpZ2h0IiwicHJlc2VudFdpZHRoIiwicHJlc2VudEhlaWdodCIsInByb2ZpbGUiLCJsZXZlbCIsImJpdERlcHRoIiwiY2hyb21hRm9ybWF0IiwicGFyUmF0aW8iLCJmcHNEZW4iLCJmcHNOdW0iLCJ0aW1lc2NhbGUiLCJNM1U4UGFyc2VyIiwiVHNEZW11eGVyIiwiUGxheWxpc3QiLCJGbHZEZW11eGVyIiwiREFUQV9UWVBFUyIsIk5VTUJFUiIsIkJPT0xFQU4iLCJTVFJJTkciLCJPQkpFQ1QiLCJNSVhfQVJSQVkiLCJPQkpFQ1RfRU5EIiwiU1RSSUNUX0FSUkFZIiwiREFURSIsIkxPTkVfU1RSSU5HIiwicmVhZE9mZnNldCIsInJlc29sdmUiLCJtZXRhRGF0YSIsInBhcnNlVmFsdWUiLCJib2R5U2l6ZSIsInJlc2V0U3RhdHVzIiwicGFyc2VTdHJpbmciLCJzdHJMZW4iLCJnZXRVaW50MTYiLCJpc0xlIiwic3RyIiwiVVRGOCIsImRlY29kZSIsInBhcnNlRGF0ZSIsImR2IiwidHMiLCJnZXRGbG9hdDY0IiwiRGF0ZSIsInBhcnNlT2JqZWN0IiwiaXNPYmpFbmQiLCJwYXJzZUxvbmdTdHJpbmciLCJBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiZ2V0VWludDgiLCJvYmpFbmRTaXplIiwiYW1mT2JqIiwiaXNPYmplY3RFbmQiLCJhbWZWYXIiLCJhcnJMZW5ndGgiLCJzY3JpcHQiLCJkYXRlIiwibG9uZ1N0ciIsIkRFTVVYX0VWRU5UUyIsIl9maXJzdEZyYWdtZW50TG9hZGVkIiwiX3RyYWNrTnVtIiwiX2hhc1NjcmlwdCIsIkRFTVVYX1NUQVJUIiwiZG9QYXJzZUZsdiIsInN0cmVhbUZsYWciLCJoYXNWaWRlbyIsImhhc0F1ZGlvIiwibG9hZGVyQnVmZmVyIiwiY2h1bmsiLCJfcGFyc2VGbHZUYWciLCJERU1VWF9DT01QTEVURSIsInBhcnNlRmx2SGVhZGVyIiwiaXNGbHZGaWxlIiwicGxheVR5cGUiLCJnZXRQbGF5VHlwZSIsImluaXRWaWRlb1RyYWNrIiwiaW5pdEF1ZGlvVHJhY2siLCJERU1VWF9FUlJPUiIsIlZpZGVvVHJhY2tNZXRhIiwiQXVkaW9UcmFja01ldGEiLCJfcGFyc2VGbHZUYWdIZWFkZXIiLCJfcHJvY2Vzc0NodW5rIiwidGFnVHlwZSIsImxvZ2dlciIsInRpbWVzdGFtcCIsInRpbWVzdGFtcEV4dCIsIl9wYXJzZVNjcmlwdERhdGEiLCJfcGFyc2VBQUNEYXRhIiwiX3BhcnNlSGV2Y0RhdGEiLCJpbmZvIiwiQU1GUGFyc2VyIiwib25NZXRhRGF0YSIsIm1lZGlhSW5mbyIsImhzYUF1ZGlvIiwiX2RhdGFzaXplVmFsaWRhdG9yIiwiTUVESUFfSU5GTyIsImhhc1NwZWNpZmljQ29uZmlnIiwiYXVkaW9zYW1wbGVyYXRlIiwic2FtcGxlUmF0ZSIsImF1ZGlvY2hhbm5lbHMiLCJzYW1wbGVSYXRlSW5kZXgiLCJmcmFtZXJhdGUiLCJfYWFjU2VxdWVuY2VIZWFkZXJQYXJzZXIiLCJvYmplY3RUeXBlIiwiX3N3aXRjaEF1ZGlvU2FtcGxlUmF0ZSIsImZyYW1lTGVuZ3RoIiwiZGVwZW5kc09uQ29yZUNvZGVyIiwiZXh0ZW5zaW9uRmxhZ0luZGV4IiwiZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCIsImNvbmZpZyIsInVzZXJBZ2VudCIsIm5hdmlnYXRvciIsInRvTG93ZXJDYXNlIiwic2FtcGxpbmdJbmRleCIsImluZGV4T2YiLCJ0cmFjayIsImZvcm1hdCIsIl9oYXNBdWRpb1NlcXVlbmNlIiwiX3N3aXRjaEF1ZGlvU2FtcGxpbmdGcmVxdWVuY3kiLCJmcmFtZUxlbnRoIiwiYXVkaW9TYW1wbGVSYXRlIiwiYXVkaW9TYW1wbGVSYXRlSW5kZXgiLCJ2YWxpZGF0ZSIsImFhY0hlYWRlciIsImF1ZGlvTWVkaWEiLCJNRVRBREFUQV9QQVJTRUQiLCJBVURJT19NRVRBREFUQV9DSEFOR0UiLCJmcmFtZVR5cGUiLCJjb2RlY0lEIiwiYXZjUGFja2V0VHlwZSIsInBhcnNlSW50IiwibmFsdSIsInNpemVzIiwiYXZjY2xlbmd0aCIsIl9hdmNTZXF1ZW5jZUhlYWRlclBhcnNlciIsIl9oYXNWaWRlb1NlcXVlbmNlIiwiVklERU9fTUVUQURBVEFfQ0hBTkdFIiwiY29uZmlndXJhdGlvblZlcnNpb24iLCJhdmNQcm9maWxlSW5kaWNhdGlvbiIsInByb2ZpbGVDb21wYXRpYmlsaXR5IiwiYXZjTGV2ZWxJbmRpY2F0aW9uIiwibmFsVW5pdExlbmd0aCIsIm51bU9mU3BzIiwiaiIsImNvZGVjU3RyaW5nIiwiaCIsInRvU3RyaW5nIiwibnVtT2ZQcHMiLCJ0b1ZpZGVvTWV0YSIsInZpZGVvTWVkaWEiLCJhdmNjIiwic2FtcGxpbmdGcmVxdWVuY3lJbmRleCIsIl9zd2l0Y2hBdWRpb0NoYW5uZWwiLCJkYXRhc2l6ZUNvbmZpcm0iLCJ0ZXh0IiwiYmFzZXVybCIsInNwbGl0IiwicmVmcyIsInJlZiIsIm1hdGNoIiwicmVmbSIsInZlcnNpb24iLCJzZXF1ZW5jZSIsInRhcmdldGR1cmF0aW9uIiwicGFyc2VGbG9hdCIsInBhcnNlRnJhZyIsImZyYWdzIiwiZnJlZyIsIm5leHRsaW5lIiwiY2hhckF0IiwidXJsIiwidXJscyIsIlN0cmVhbVR5cGUiLCJjb25maWdzIiwiZGVtdXhpbmciLCJwYXQiLCJwbXQiLCJfaGFzVmlkZW9NZXRhIiwiX2hhc0F1ZGlvTWV0YSIsImRlbXV4IiwiaW5wdXRCdWZmZXIiLCJwZXNlcyIsInRzU3RyZWFtIiwiU3RyZWFtIiwicmVhZCIsInBlcyIsInBpZCIsIkVTIiwicGF5bG9hZCIsInN0cmVhbSIsImVwZXNlcyIsIk1lcmdlIiwicHVzaEF1ZGlvU2FtcGxlIiwicHVzaFZpZGVvU2FtcGxlIiwiX3RyYWNrcyIsImZyZXF1ZW5jZSIsImNoYW5uZWwiLCJhdWRpb09iamVjdFR5cGUiLCJhdWRpb0NvbmZpZyIsImZyZXF1ZW5jeUluZGV4IiwiQXVkaW9UcmFja1NhbXBsZSIsImdldE5hbHVuaXRzIiwic2FtcGxlTGVuZ3RoIiwibmFsIiwiY29tcGFpcmVVaW50OCIsInNhclJhdGlvIiwic2FyX3JhdGlvIiwiZ2V0QXZjYyIsIlZpZGVvVHJhY2tTYW1wbGUiLCJkZXN0b3J5IiwiYnVmZmVycyIsInJlYWRIZWFkZXIiLCJyZWFkUGF5bG9hZCIsInBhY2tldCIsInVua25vd25QSURzIiwiUEVTIiwiUEFUIiwiQ0FUIiwiVFNEVCIsInNvbWUiLCJpdGVtIiwiUE1UIiwic3RzIiwiTWVkaWEiLCJzdHJlYW1UeXBlIiwic3luYyIsInJlYWRVaW50OCIsInJlYWRVaW50MTYiLCJwcmlvcml0eSIsInNjcmFtYmxpbmciLCJhZGFwdGF0aW9uIiwiY29udGludWl0eSIsInRhYmVsSUQiLCJ6ZXJvIiwic2VjdGlvbkxlbmd0aCIsInN0cmVhbUlEIiwic2VjdGlvbk51bWJlciIsImxhc3RTZWN0aW9uTnVtYmVyIiwiTiIsInByb2dyYW1OdW1iZXIiLCJwcm9ncmFtIiwidGFibGVJRCIsIm9yZGVyIiwibGFzdE9yZGVyIiwiUENSX1BJRCIsInByb2dyYW1MZW5ndGgiLCJlcyIsIm1hcCIsImFkYXB0YXRpb25MZW5ndGgiLCJkaXNjb250aW51ZSIsImFjY2VzcyIsIlBDUiIsIk9QQ1IiLCJzcGxpY2VQb2ludCIsInRyYW5zcG9ydFByaXZhdGUiLCJhZGFwdGF0aW9uRmllbGQiLCJfc3RhcnQiLCJwcm9ncmFtQ2xvY2tCYXNlIiwicmVhZFVpbnQzMiIsInByb2dyYW1DbG9ja0V4dGVuc2lvbiIsIm9yaWdpblByb2dyYW1DbG9ja0Jhc2UiLCJvcmlnaW5Qcm9ncmFtQ2xvY2tFeHRlbnNpb24iLCJzcGxpY2VDb3VudGRvd24iLCJ0cmFuc3BvcnRQcml2YXRlRGF0YSIsInBpZWNld2lzZSIsInNlYW1sZXNzIiwibHR3VmFsaWQiLCJsdHdPZmZzZXQiLCJyZWFkVWludDI0IiwicGllY2V3aXNlUmF0ZSIsInJlYWRJbnQ4Iiwic3BsaWNlVHlwZSIsImR0c05leHRBVTEiLCJtYXJrZXIxIiwiZHRzTmV4dEFVMiIsIm1hcmtlcjIiLCJkdHNOZXh0QVUzIiwibGFzdFN0dWZmaW5nIiwicGFja2V0TGVuZ3RoIiwicHRzRFRTRmxhZyIsImVzY3JGbGFnIiwiZXNSYXRlRmxhZyIsImRzbUZsYWciLCJhZGRpdGlvbmFsRmxhZyIsImNyY0ZsYWciLCJleHRlbnNpb25GbGFnIiwicGVzSGVhZGVyTGVuZ3RoIiwiTjEiLCJlc2NyIiwiZXgiLCJlc1JhdGUiLCJhZGRpdGlvbmFsQ29weUluZm8iLCJwZXNDUkMiLCJiYWNrIiwiZnEiLCJsYXllciIsImFic2VudCIsImdldEF1ZGlvQ29uZmlnIiwic2VjdGlvbkluZGljYXRvciIsImN1cnJlbnROZXh0SW5kaWNhdG9yIiwiY3JjMzIiLCJzYW1wbGVJbmRleCIsImV4dGVuc2lvblNhbXBsZUluZGV4IiwidGVzdCIsImlucHV0YnVmZmVyIiwiX2Jhc2VVUkwiLCJfbGlzdCIsIl90cyIsImZyYWdMZW5ndGgiLCJfbGFzdGdldCIsIl9hdWRvY2xlYXIiLCJhdXRvY2xlYXIiLCJiYXNlVVJMIiwiZG93bmxvYWRlZCIsImRvd25sb2FkaW5nIiwiZGVsZXRlRnJhZyIsInRpbWUiLCJwdXNoTTNVOCIsImRlbGV0ZXByZSIsIm5ld2ZyYWdsaXN0IiwiZnJhZyIsInRzbGlzdCIsImdldFRzTGlzdCIsInRzbmFtZSIsImlzbG9hZGVkIiwibG9hZGluZyIsImdldFRzQnlOYW1lIiwiZ2V0VHMiLCJ0aW1lbGlzdCIsImNsZWFyRG93bmxvYWRlZCIsIkZldGNoTG9hZGVyIiwiTE9BREVSX0VWRU5UUyIsInN0YXR1cyIsIl9yZWFkZXIiLCJfY2FuY2VsZWQiLCJyZWFkdHlwZSIsIl9sb2FkZXJUYXNrTm8iLCJMQURFUl9TVEFSVCIsImxvYWQiLCJvcHRzIiwiX3RoaXMiLCJwYXJhbXMiLCJnZXRQYXJhbXMiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwiX29uRmV0Y2hSZXNwb25zZSIsIkxPQURFUl9FUlJPUiIsImNhdGNoIiwidGFza25vIiwianNvbiIsIkxPQURFUl9DT01QTEVURSIsImFycmF5QnVmZmVyIiwiX29uUmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVhZGVyIiwiY2FuY2VsIiwidmFsIiwiZG9uZSIsIkxPQURFUl9EQVRBTE9BREVEIiwib3B0aW9ucyIsImhlYWRlcnMiLCJIZWFkZXJzIiwibWV0aG9kIiwiY2FjaGUiLCJjb25maWdIZWFkZXJzIiwiYXBwZW5kIiwib3B0SGVhZGVycyIsImNvcnMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJjcmVkZW50aWFscyIsIk1wNFJlbXV4ZXIiLCJGbXA0IiwiQnVmZmVyIiwid3JpdGVVaW50MzIiLCJjb250ZW50Iiwid3JpdGUiLCJmbGFnIiwiaW5pdEJveCIsInRyYWsiLCJtdmhkIiwidmlkZW9UcmFrIiwiYXVkaW9UcmFrIiwibXZleCIsImZvckVhY2giLCJieXRlcyIsInRraGQiLCJtZGlhIiwic2FtcGxlcmF0ZSIsIm1lZGlhVGltZSIsIm1kaGQiLCJoZGxyIiwibWluZiIsImV4dGVuc2lvbiIsInZtaGQiLCJzbWhkIiwiZGluZiIsInN0YmwiLCJzdHNkIiwic3R0cyIsInN0c2MiLCJzdHN6Iiwic3RjbyIsIm1wNGEiLCJhdmMxIiwiZXNkcyIsImNvbmZpZ2xlbiIsImhTcGFjaW5nIiwidlNwYWNpbmciLCJidHJ0IiwicGFzcCIsInRyYWNrSUQiLCJtZWhkIiwidHJleCIsIm1maGQiLCJ0cmFmIiwidGZoZCIsInRmZHQiLCJzZHRwIiwidHJ1biIsInNkdHBMZW5ndGgiLCJzYW1wbGVDb3VudCIsImZsYWdzIiwiaXNMZWFkaW5nIiwiZGVwZW5kc09uIiwiaXNEZXBlbmRlZE9uIiwiaGFzUmVkdW5kYW5jeSIsImlzTm9uU3luYyIsIm51bSIsIm1kYXRCb3giLCJjaGFyQ29kZUF0IiwiX2R0c0Jhc2UiLCJfaXNEdHNCYXNlSW5pdGVkIiwiX2F1ZGlvTmV4dER0cyIsIl92aWRlb05leHREdHMiLCJfdmlkZW9TZWdtZW50TGlzdCIsIk1lZGlhU2VnbWVudExpc3QiLCJfYXVkaW9TZWdtZW50TGlzdCIsImJyb3dzZXIiLCJzbmlmZmVyIiwiX2ZpbGxTaWxlbmNlRnJhbWUiLCJ2aWRlb0FsbER1cmF0aW9uIiwiYXVkaW9BbGxEdXJhdGlvbiIsInJlbXV4IiwiUkVNVVhfTUVUQURBVEEiLCJvbk1ldGFEYXRhUmVhZHkiLCJfZHRzQmFzZUluaXRlZCIsImNhbGNEdHNCYXNlIiwiX3JlbXV4VmlkZW8iLCJfcmVtdXhBdWRpbyIsInNlZWsiLCJtb292IiwiaW5pdFNlZ21lbnQiLCJmdHlwIiwicHJlc291cmNlYnVmZmVyIiwiSU5JVF9TRUdNRU5UIiwiYXVkaW9CYXNlIiwiSW5maW5pdHkiLCJ2aWRlb0Jhc2UiLCJtcDRTYW1wbGVzIiwiYXZjU2FtcGxlIiwibWRhdFNhbXBsZSIsInNhbXBsZUR1cmF0aW9uIiwidmlkZW9NZXRhIiwibW9vZk1kYXQiLCJtb29mIiwibWRhdCIsIk1FRElBX1NFR01FTlQiLCJpc0ZpcnN0RHRzSW5pdGVkIiwiYXVkaW9NZXRhIiwibXA0U2FtcGxlIiwiaW5pdFNpbGVudEF1ZGlvIiwiQ29udGV4dCIsIldPUktFUl9DT01NQU5EUyIsIk1lZGlhSW5mbyIsIk1lZGlhU2FtcGxlIiwiTWVkaWFTZWdtZW50IiwiTXNlIiwiUmVzdWx0Q29uc3RydWN0b3IiLCJ0b3RhbExlbmd0aCIsIl9sZW4iLCJhcnJheXMiLCJfa2V5IiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsIml0ZXJhdG9yIiwicmV0dXJuIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIiLCJfZGlkSXRlcmF0b3JFcnJvcjIiLCJfaXRlcmF0b3JFcnJvcjIiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiX2FyciIsIm9iaiIsIl9jb25jYXQyIiwiUkVNVVhfRVJST1IiLCJNU0VfRVZFTlRTIiwiU09VUkNFX1VQREFURV9FTkQiLCJITFNfRVZFTlRTIiwiUkVUUllfVElNRV9FWENFRURFRCIsIkFMTEVWRU5UUyIsIkZsdkFsbG93ZWRFdmVudHMiLCJIbHNBbGxvd2VkRXZlbnRzIiwiQ09OVEVYVF9DT01PTUFORFMiLCJPTiIsIk9OQ0UiLCJPRkYiLCJFTUlUIiwiREVTVFJPWSIsIkRJUkVDVF9FTUlUX0ZMQUciLCJhbGxvd2VkRXZlbnRzIiwiX2VtaXR0ZXIiLCJfaW5zdGFuY2VNYXAiLCJfY2xzTWFwIiwiX2luaXRlZCIsIl9ob29rcyIsInRhZyIsImluaXRJbnN0YW5jZSIsIm5ld0luc3RhbmNlIiwicmVnaXN0cnkiLCJjbHMiLCJjaGVja01lc3NhZ2VOYW1lIiwiX2lzTWVzc2FnZU5hbWVWYWxpZCIsInNlbGYiLCJvbmNlTGlzdGVuZXJzIiwibWVzc2FnZU5hbWUiLCJjYWxsYmFjayIsImJlZm9yZUxpc3QiLCJlbWl0VG8iLCJyZW1vdmVMaXN0ZW5lcnMiLCJoYXNPd24iLCJjYWxsYmFja3MiLCJkZXN0cm95SW5zdGFuY2VzIiwibGUiLCJzZXRJbnQxNiIsIkludDE2QXJyYXkiLCJvcyIsImlzUGMiLCJpc1RhYmxldCIsInVhIiwicmVnIiwiaWUiLCJmaXJmb3giLCJjaHJvbWUiLCJvcGVyYSIsInNhZmFyaSIsImlzV2luZG93c1Bob25lIiwiaXNTeW1iaWFuIiwiaXNBbmRyb2lkIiwiaXNGaXJlRm94IiwiaXNQaG9uZSIsIm91dCIsImlucHV0IiwiZnJvbUNoYXJDb2RlIiwiX2NoZWNrQ29udGludWF0aW9uIiwidWNzNCIsImpvaW4iLCJjaGVja0xlbmd0aCIsImlzT2JqZWN0RmlsbGVkIiwibWltZVR5cGUiLCJpc0NvbXBsZXRlIiwiaXNCYXNlSW5mb1JlYWR5IiwiaXNWaWRlb1JlYWR5IiwiaXNBdWRpb1JlYWR5IiwiX2RlZmF1bHQiLCJnZXREZWZhdWx0SW5mIiwiZW50cmllcyIsImsiLCJ2IiwiaXNSQVAiLCJfdHlwZSIsIl9sYXN0QXBwZW5kTG9jYXRpb24iLCJpc0VtcHR5IiwiX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlIiwiYmVnaW5EdHMiLCJsYXN0IiwibWlkIiwibGJvdW5kIiwidWJvdW5kIiwiaWR4IiwibGFzdFNhbXBsZSIsIl9zZWFyY2hOZWFyZXN0U2VnbWVudEFmdGVyIiwic2VnbWVudCIsImxhc3RBcHBlbmRJZHgiLCJpbnNlcnRJZHgiLCJvcmlnaW5TdGFydER0cyIsImdldExhc3RTZWdtZW50QmVmb3JlIiwiZ2V0TGFzdFNhbXBsZUJlZm9yZSIsImdldExhc3RSQVBCZWZvcmUiLCJzZWdtZW50SWR4IiwicmFuZG9tQWNjZXNzUG9pbnRzIiwic3RhcnREdHMiLCJlbmREdHMiLCJzdGFydFB0cyIsImVuZFB0cyIsIm9yaWdpbkVuZER0cyIsImFkZFJBUCIsImdldERlZmF1bHQiLCJjb250YWluZXIiLCJtZWRpYVNvdXJjZSIsInNvdXJjZUJ1ZmZlcnMiLCJwcmVsb2FkVGltZSIsIm9uU291cmNlT3BlbiIsIm9uVGltZVVwZGF0ZSIsIm9uV2FpdGluZyIsIk1lZGlhU291cmNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImFkZFNvdXJjZUJ1ZmZlcnMiLCJvblVwZGF0ZUVuZCIsImRvQXBwZW5kIiwicmVhZHlTdGF0ZSIsImFkZCIsImR1ciIsIm1pbWUiLCJzb3VyY2VCdWZmZXIiLCJhZGRTb3VyY2VCdWZmZXIiLCJ1cGRhdGluZyIsImluaXRlZCIsImFwcGVuZEJ1ZmZlciIsImVuZE9mU3RyZWFtIiwicmVtb3ZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZVNvdXJjZUJ1ZmZlciIsInRlbXAiLCJoZXhOdW0iLCJwYWRTdGFydCIsImxvb3AiLCJzaWduIiwicmVzIiwicmVhZFVpbnQ2NCIsInJlYWRJbnQxNiIsInJlYWRJbnQzMiIsIkxvZ2dlciIsInBsYXllciIsIl9wbGF5ZXIiLCJpbml0U2VnbWVudEFycml2ZWQiLCJSZW11eGVyIiwibXNlIiwiaW5pdExpc3RlbmVycyIsIl9oYW5kbGVMb2FkZXJEYXRhTG9hZGVkIiwiX2hhbmRsZU5ldHdvcmtFcnJvciIsIl9oYW5kbGVNZWRpYUluZm8iLCJfaGFuZGxlTWV0YWRhdGFQYXJzZWQiLCJfaGFuZGxlRGVtdXhDb21wbGV0ZSIsIl9oYW5kbGVEZW11eEVycm9yIiwiX2hhbmRsZUFwcGVuZEluaXRTZWdtZW50IiwiX2hhbmRsZU1lZGlhU2VnbWVudCIsIl9oYW5kbGVTb3VyY2VVcGRhdGVFbmQiLCJfaGFuZGxlVGltZVVwZGF0ZSIsImN1cnJlbnRUaW1lIiwiYnVmZmVyZWQiLCJidWZmZXJFbmQiLCJQbGF5ZXIiLCJFcnJvcnMiLCJsb2FkRGF0YSIsInBhdXNlIiwibG9hZGVyIiwiZmx2QWxsb3dlZEV2ZW50cyIsImluaXRFdmVudHMiLCJpbml0Rmx2IiwiZmx2IiwiaW5pdEZsdkV2ZW50cyIsInV0aWwiLCJhZGRDbGFzcyIsImZpbmREb20iLCJsaXZlIiwiY3JlYXRlRG9tIiwiY29udHJvbHMiLCJhcHBlbmRDaGlsZCIsInBhdXNlZCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJnZXRCdWZmZXJlZFJhbmdlIiwiY2xlYXJJbnRlcnZhbCIsInJhbmdlIiwiRkxWIiwicGxheSIsIl9oYXNTdGFydCIsIl9kZXN0cm95IiwiY3VycmVudFNyYyIsIlRhZyIsIkZsdkNvbnRyb2xsZXIiLCJyYW5nZVN1cHBvcnQiLCJrZXlmcmFtZXMiLCJ0aW1lcyIsImN1cnJlbnRLZXlmcmFtZVRpbWUiLCJuZXh0S2V5ZnJhbWVUaW1lIiwiTUFYX1NBRkVfSU5URUdFUiIsImZpbGVwb3NpdGlvbnMiLCJzZXRUaW1lb3V0IiwibG9hZE1ldGEiLCJpc1NlZWthYmxlIiwibG9hZE5leHQiLCJnZXRTZWVrUmFuZ2UiLCJjdXJUaW1lIiwiZ2V0TmV4dFJhbmdlIiwiUmFuZ2UiLCJsb2FkRmFsbGJhY2siLCJzZWVrU3RhcnRUaW1lIiwic2Vla0VuZFRpbWUiLCJzZWVrU3RhcnRGaWxlUG9zIiwiZmluZEZpbGVQb3NpdGlvbiIsImhhbmRsZVRpbWVVcGRhdGUiLCJoYW5kbGVTZWVrIiwiaXNMaXZlIiwiaXNFbmRlZCIsIkZsdkxpdmVQbGF5ZXIiLCJGbHZWb2RQbGF5ZXIiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxFQUFRRyxRQUFRLGFBQ1IsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxDQUFDLFlBQWFKLEdBQ0ssaUJBQVpDLFFBQ2RBLFFBQVEsZ0JBQWtCRCxFQUFRRyxRQUFRLGFBRTFDSixFQUFLLGdCQUFrQkMsRUFBUUQsRUFBZSxVQVJoRCxDQVNHTyxRQUFRLFNBQVNDLEdBQ3BCLE8sWUNURSxJQUFJQyxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVVCxRQUduQyxJQUFJQyxFQUFTTSxFQUFpQkUsR0FBWSxDQUN6Q0MsRUFBR0QsRUFDSEUsR0FBRyxFQUNIWCxRQUFTLElBVVYsT0FOQVksRUFBUUgsR0FBVUksS0FBS1osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU1EsR0FHL0RQLEVBQU9VLEdBQUksRUFHSlYsRUFBT0QsUUEwRGYsT0FyREFRLEVBQW9CTSxFQUFJRixFQUd4QkosRUFBb0JPLEVBQUlSLEVBR3hCQyxFQUFvQlEsRUFBSSxTQUFTaEIsRUFBU2lCLEVBQU1DLEdBQzNDVixFQUFvQlcsRUFBRW5CLEVBQVNpQixJQUNsQ0csT0FBT0MsZUFBZXJCLEVBQVNpQixFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FL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LEVBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxHQUFNLEdBQU0sRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLEdBQU0sSUFBTSxFQUFNLEtBQzFJLEdBQXFCLElBQWpCa0MsRUFDVCxPQUFPLElBQUlsQyxXQUFXLENBQUMsRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxHQUFNLEdBQU0sRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLEdBQU0sSUFBTSxFQUFNLEVBQU0sSUFBTSxFQUFNLEdBQU0sRUFBTSxVQUUxSyxDQUVMLEdBQXFCLElBQWpCa0MsRUFFRixPQUFPLElBQUlsQyxXQUFXLENBQUMsRUFBSyxHQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sRUFBSyxFQUFLLEVBQUssRUFBSyxHQUFNLEVBQUssSUFBTSxJQUFNLEdBQUssR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxLQUN2VyxHQUFxQixJQUFqQmtDLEVBRVQsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEVBQUssR0FBTSxHQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLEVBQUssRUFBSyxFQUFLLEVBQUssRUFBSyxJQUFNLEVBQUssRUFBSyxJQUFNLElBQU0sR0FBSyxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FB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QUFNLEdBQU0sRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxFQUFNLEtBQ3hILEdBQXFCLElBQWpCa0MsRUFDVCxPQUFPLElBQUlsQyxXQUFXLENBQUMsRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxHQUFNLEdBQU0sRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLEdBQU0sSUFBTSxFQUFNLEtBQzFJLEdBQXFCLElBQWpCa0MsRUFDVCxPQUFPLElBQUlsQyxXQUFXLENBQUMsRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxHQUFNLEdBQU0sRUFBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLEVBQU0sSUFBTSxFQUFNLEdBQU0sSUFBTSxFQUFNLEVBQU0sSUFBTSxFQUFNLEdBQU0sRUFBTSxVQUUxSyxDQUVMLEdBQXFCLElBQWpCa0MsRUFFRixPQUFPLElBQUlsQyxXQUFXLENBQUMsRUFBSyxHQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sRUFBSyxFQUFLLEVBQUssRUFBSyxHQUFNLEVBQUssSUFBTSxJQUFNLEdBQUssR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxLQUN2VyxHQUFxQixJQUFqQmtDLEVBRVQsT0FBTyxJQUFJbEMsV0FBVyxDQUFDLEVBQUssR0FBTSxHQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLEVBQUssRUFBSyxFQUFLLEVBQUssRUFBSyxJQUFNLEVBQUssRUFBSyxJQUFNLElBQU0sR0FBSyxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FB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LE1BQU0yWSxJQVJYOWUsS0FBS3k5QixRQUNMejlCLEtBQUsrRCxLQUFLLFFBQVMsS0FDakIvRCxLQUFLbUcsTUFBTTJZLEtBRWI5ZSxLQUFLK0QsS0FBSyxVQUFXLEtBQ25CL0QsS0FBSzgrQixVQUtUOStCLEtBQUsrRCxLQUFLLFVBQVcsS0FDbkIvRCxLQUFLbTlCLFlBQWMsTzs7Ozs7Ozs7NENDckZ6QjlnQyxFQUFPRCxRQUFVTSxPOzs7OzJERUFqQixJLElBQUEsaUUsSUFDQSwrRCxtREFZQUwsRUFBT0QsUUFUTCxXQUFhNmUsR0FDWCxPLDRGQURtQixTQUNmQSxFQUFPeWxCLE9BQ0YsSUFBSUUsVUFBYzNsQixHQUVsQixJQUFJNGxCLFVBQWE1bEIsSzs7Ozs7Ozs7NENDUjlCNWUsRUFBT0QsUUFBVU0iLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJ4Z3BsYXllclwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ4Z3BsYXllci1mbHZcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wieGdwbGF5ZXItZmx2XCJdID0gZmFjdG9yeShyb290W1wieGdwbGF5ZXJcIl0pO1xufSkod2luZG93LCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3hncGxheWVyX18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJ4Z3BsYXllclwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ4Z3BsYXllci1mbHZcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJ4Z3BsYXllclwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wieGdwbGF5ZXItZmx2XCJdID0gZmFjdG9yeShyb290W1wieGdwbGF5ZXJcIl0pO1xufSkod2luZG93LCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3hncGxheWVyX18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gJGdldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9ICRnZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBSZWZsZWN0QXBwbHkodGhpcy5saXN0ZW5lciwgdGhpcy50YXJnZXQsIGFyZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBUcmFjazogcmVxdWlyZSgnLi9zcmMvdHJhY2snKS5kZWZhdWx0LFxuICBUcmFja3M6IHJlcXVpcmUoJy4vc3JjL3RyYWNrJykuVHJhY2tzLFxuICBBdWRpb1RyYWNrOiByZXF1aXJlKCcuL3NyYy90cmFjaycpLkF1ZGlvVHJhY2ssXG4gIFZpZGVvVHJhY2s6IHJlcXVpcmUoJy4vc3JjL3RyYWNrJykuVmlkZW9UcmFjayxcblxuICBYZ0J1ZmZlcjogcmVxdWlyZSgnLi9zcmMvYnVmZmVyJykuWGdCdWZmZXIsXG4gIFJlbXV4QnVmZmVyOiByZXF1aXJlKCcuL3NyYy9idWZmZXInKS5SZW11eEJ1ZmZlcixcblxuICBQcmVTb3VyY2U6IHJlcXVpcmUoJy4vc3JjL3ByZXNvdWNlJykuZGVmYXVsdFxufTtcbiIsImV4cG9ydCBjbGFzcyBYZ0J1ZmZlciB7XG4gIC8qKlxuICAgKiBBIGJ1ZmZlciB0byBzdG9yZSBsb2FkZWQgZGF0YS5cbiAgICpcbiAgICogQGNsYXNzIExvYWRlckJ1ZmZlclxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gT3B0aW9uYWwgdGhlIGJ1ZmZlciBzaXplXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobGVuZ3RoKSB7XG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGggfHwgMFxuICAgIHRoaXMuaGlzdG9yeUxlbiA9IGxlbmd0aCB8fCAwXG4gICAgdGhpcy5hcnJheSA9IFtdXG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gIH1cblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIHB1c2ggZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRhdGEgLSBUaGUgZGF0YSB0byBwdXNoIGludG8gdGhlIGJ1ZmZlclxuICAgKi9cbiAgcHVzaCAoZGF0YSkge1xuICAgIHRoaXMuYXJyYXkucHVzaChkYXRhKVxuICAgIHRoaXMubGVuZ3RoICs9IGRhdGEuYnl0ZUxlbmd0aFxuICAgIHRoaXMuaGlzdG9yeUxlbiArPSBkYXRhLmJ5dGVMZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdG8gc2hpZnQgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIFRoZSBzaXplIG9mIHNoaWZ0LlxuICAgKi9cbiAgc2hpZnQgKGxlbmd0aCkge1xuICAgIGlmICh0aGlzLmFycmF5Lmxlbmd0aCA8IDEpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKVxuICAgIH1cblxuICAgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NoaWZ0QnVmZmVyKClcbiAgICB9XG4gICAgaWYgKCh0aGlzLm9mZnNldCArIGxlbmd0aCkgPT09IHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSB7XG4gICAgICBsZXQgcmV0ID0gdGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW5ndGgpXG4gICAgICB0aGlzLm9mZnNldCA9IDBcbiAgICAgIHRoaXMuYXJyYXkuc2hpZnQoKVxuICAgICAgdGhpcy5sZW5ndGggLT0gbGVuZ3RoXG4gICAgICByZXR1cm4gcmV0XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLm9mZnNldCArIGxlbmd0aCkgPCB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgbGV0IHJldCA9IHRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKVxuICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoXG4gICAgICB0aGlzLmxlbmd0aCAtPSBsZW5ndGhcbiAgICAgIHJldHVybiByZXRcbiAgICB9XG5cbiAgICBsZXQgcmV0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIGxldCB0bXBvZmYgPSAwXG4gICAgd2hpbGUgKHRoaXMuYXJyYXkubGVuZ3RoID4gMCAmJiBsZW5ndGggPiAwKSB7XG4gICAgICBpZiAoKHRoaXMub2Zmc2V0ICsgbGVuZ3RoKSA8IHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSB7XG4gICAgICAgIGxldCB0bXAgPSB0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aClcbiAgICAgICAgcmV0LnNldCh0bXAsIHRtcG9mZilcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoXG4gICAgICAgIHRoaXMubGVuZ3RoIC09IGxlbmd0aFxuICAgICAgICBsZW5ndGggPSAwXG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgdGVtcGxlbmd0aCA9IHRoaXMuYXJyYXlbMF0ubGVuZ3RoIC0gdGhpcy5vZmZzZXRcbiAgICAgICAgcmV0LnNldCh0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLmFycmF5WzBdLmxlbmd0aCksIHRtcG9mZilcbiAgICAgICAgdGhpcy5hcnJheS5zaGlmdCgpXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgICAgICB0bXBvZmYgKz0gdGVtcGxlbmd0aFxuICAgICAgICB0aGlzLmxlbmd0aCAtPSB0ZW1wbGVuZ3RoXG4gICAgICAgIGxlbmd0aCAtPSB0ZW1wbGVuZ3RoXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBjbGVhciB0aGUgYnVmZmVyLlxuICAgKi9cbiAgY2xlYXIgKCkge1xuICAgIHRoaXMuYXJyYXkgPSBbXVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5jbGVhcigpXG4gICAgdGhpcy5oaXN0b3J5TGVuID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHNoaWZ0IG9uZSB1bml0OEFycmF5LlxuICAgKi9cbiAgX3NoaWZ0QnVmZmVyICgpIHtcbiAgICB0aGlzLmxlbmd0aCAtPSB0aGlzLmFycmF5WzBdLmxlbmd0aFxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgIHJldHVybiB0aGlzLmFycmF5LnNoaWZ0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHVpbnQ4IGRhdGEgdG8gbnVtYmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSB0aGUgc3RhcnQgcG9zdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIHRoZSBsZW5ndGggb2YgZGF0YS5cbiAgICovXG4gIHRvSW50IChzdGFydCwgbGVuZ3RoKSB7XG4gICAgbGV0IHJldEludCA9IDBcbiAgICBsZXQgaSA9IHRoaXMub2Zmc2V0ICsgc3RhcnRcbiAgICB3aGlsZSAoaSA8IHRoaXMub2Zmc2V0ICsgbGVuZ3RoICsgc3RhcnQpIHtcbiAgICAgIGlmIChpIDwgdGhpcy5hcnJheVswXS5sZW5ndGgpIHtcbiAgICAgICAgcmV0SW50ID0gcmV0SW50ICogMjU2ICsgdGhpcy5hcnJheVswXVtpXVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmFycmF5WzFdKSB7XG4gICAgICAgIHJldEludCA9IHJldEludCAqIDI1NiArIHRoaXMuYXJyYXlbMV1baSAtIHRoaXMuYXJyYXlbMF0ubGVuZ3RoXVxuICAgICAgfVxuXG4gICAgICBpKytcbiAgICB9XG4gICAgcmV0dXJuIHJldEludFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZW11eEJ1ZmZlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnZpZGVvID0gW11cbiAgICB0aGlzLmF1ZGlvID0gW11cbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMudmlkZW8gPSBbXVxuICAgIHRoaXMuYXVkaW8gPSBbXVxuICB9XG59XG4iLCJjbGFzcyBTb3VyY2Uge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5taW1ldHlwZSA9ICcnO1xuICAgIHRoaXMuaW5pdCA9IG51bGw7XG4gICAgdGhpcy5kYXRhID0gW107XG4gIH1cbn1cblxuY2xhc3MgUHJlU291cmNlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuc291cmNlcyA9IHt9O1xuICB9XG5cbiAgZ2V0U291cmNlIChzb3VyY2UpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2VzW3NvdXJjZV07XG4gIH1cblxuICBjcmVhdGVTb3VyY2UgKG5hbWUpIHtcbiAgICB0aGlzLnNvdXJjZXNbbmFtZV0gPSBuZXcgU291cmNlKCk7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc1tuYW1lXTtcbiAgfVxuXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLnNvdXJjZXMgPSB7fTtcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuc291cmNlcyA9IHt9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByZVNvdXJjZTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3Rvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmlkID0gLTFcbiAgICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gMFxuICAgIHRoaXMuc2FtcGxlcyA9IFtdXG4gICAgdGhpcy5kcm9wcGVkU2FtcGxlcyA9IFtdXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdGhlIHRyYWNrLlxuICAgKi9cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMuc2VxdWVuY2VOdW1iZXIgPSAwXG4gICAgdGhpcy5zYW1wbGVzID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgfVxuICAvKipcbiAgICogZGVzdHJveSB0aGUgdHJhY2suXG4gICAqL1xuICBkaXN0cm95ICgpIHtcbiAgICB0aGlzLnJlc2V0KClcbiAgICB0aGlzLmlkID0gLTFcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXVkaW9UcmFjayBleHRlbmRzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3RvciBmb3IgYXVkaW8gdHJhY2suXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuVEFHID0gJ0F1ZGlvVHJhY2snXG4gICAgdGhpcy50eXBlID0gJ2F1ZGlvJ1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrIGV4dGVuZHMgVHJhY2sge1xuICAvKipcbiAgICogVGhlIGNvbnN0cnVjdG9yIGZvciB2aWRlbyB0cmFjay5cbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5UQUcgPSAnVmlkZW9UcmFjaydcbiAgICB0aGlzLnR5cGUgPSAndmlkZW8nXG4gICAgdGhpcy5kcm9wcGVkID0gMFxuICB9XG4gIC8qKlxuICAgKiByZXNldCB0aGUgdmlkZW8gdHJhY2suXG4gICAqL1xuICByZXNldCAoKSB7XG4gICAgdGhpcy5zZXF1ZW5jZU51bWJlciA9IDBcbiAgICB0aGlzLnNhbXBsZXMgPSBbXVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICAgIHRoaXMuZHJvcHBlZCA9IDBcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhY2tzIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuYXVkaW9UcmFjayA9IG51bGxcbiAgICB0aGlzLnZpZGVvVHJhY2sgPSBudWxsXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBOYWx1bml0OiByZXF1aXJlKCcuL3NyYy9oMjY0L25hbHVuaXQnKS5kZWZhdWx0LFxuICBTcHNQYXJzZXI6IHJlcXVpcmUoJy4vc3JjL2gyNjQvbmFsdW5pdC9zcHMnKS5kZWZhdWx0LFxuXG4gIENvbXBhdGliaWxpdHk6IHJlcXVpcmUoJy4vc3JjL2NvbXBhdGliaWxpdHknKS5kZWZhdWx0XG59O1xuIiwiXG5jbGFzcyBBQUMge1xuXG4gIHN0YXRpYyBnZXRTaWxlbnRGcmFtZShjb2RlYywgY2hhbm5lbENvdW50KSB7XG4gICAgaWYgKGNvZGVjID09PSAnbXA0YS40MC4yJykge1xuICAgICAgLy8gaGFuZGxlIExDLUFBQ1xuICAgICAgaWYgKGNoYW5uZWxDb3VudCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjMsIDB4ODBdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgyMSwgMHgwMCwgMHg0OSwgMHg5MCwgMHgwMiwgMHgxOSwgMHgwMCwgMHgyMywgMHg4MF0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDhlXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODAsIDB4MmMsIDB4ODAsIDB4MDgsIDB4MDIsIDB4MzhdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA1KSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgzOF0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgyLCAweDMwLCAweDA0LCAweDk5LCAweDAwLCAweDIxLCAweDkwLCAweDAyLCAweDAwLCAweGIyLCAweDAwLCAweDIwLCAweDA4LCAweGUwXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhhbmRsZSBIRS1BQUMgKG1wNGEuNDAuNSAvIG1wNGEuNDAuMjkpXG4gICAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICAgIC8vIGZmbXBlZyAteSAtZiBsYXZmaSAtaSBcImFldmFsc3JjPTA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgxLCAweDQwLCAweDIyLCAweDgwLCAweGEzLCAweDRlLCAweGU2LCAweDgwLCAweGJhLCAweDgsIDB4MCwgMHgwLCAweDAsIDB4MWMsIDB4NiwgMHhmMSwgMHhjMSwgMHhhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVlXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMikge1xuICAgICAgICAvLyBmZm1wZWcgLXkgLWYgbGF2ZmkgLWkgXCJhZXZhbHNyYz0wfDA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlX3YyIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgxLCAweDQwLCAweDIyLCAweDgwLCAweGEzLCAweDVlLCAweGU2LCAweDgwLCAweGJhLCAweDgsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHg5NSwgMHgwLCAweDYsIDB4ZjEsIDB4YTEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgICAgLy8gZmZtcGVnIC15IC1mIGxhdmZpIC1pIFwiYWV2YWxzcmM9MHwwfDA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlX3YyIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgxLCAweDQwLCAweDIyLCAweDgwLCAweGEzLCAweDVlLCAweGU2LCAweDgwLCAweGJhLCAweDgsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHg5NSwgMHgwLCAweDYsIDB4ZjEsIDB4YTEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFBQztcbiIsImltcG9ydCB7RVZFTlRTfSBmcm9tICd4Z3BsYXllci11dGlscydcbmltcG9ydCBBQUMgZnJvbSAnLi9hYWMvYWFjLWhlbHBlcidcblxuY29uc3Qge1JFTVVYX0VWRU5UU30gPSBFVkVOVFNcblxuY2xhc3MgQ29tcGF0aWJpbGl0eSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm5leHRBdWRpb0R0cyA9IDAgLy8g5qih5ouf5LiL5LiA5q616Z+z6aKR5pWw5o2u55qEZHRzXG4gICAgdGhpcy5uZXh0VmlkZW9EdHMgPSAwIC8vIOaooeaLn+S4i+S4gOauteinhumikeaVsOaNrueahGR0c1xuXG4gICAgdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuID0gMCAvLyDkuIrkuIDmrrXpn7PpopHmlbDmja7nmoTplb/luqZcbiAgICB0aGlzLmxhc3RWaWRlb1NhbXBsZXNMZW4gPSAwIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgdGhpcy5sYXN0VmlkZW9EdHMgPSB1bmRlZmluZWQgLy8g5LiK5LiA5q616Z+z6aKR5pWw5o2u55qE6ZW/5bqmXG4gICAgdGhpcy5sYXN0QXVkaW9EdHMgPSB1bmRlZmluZWQgLy8g5LiK5LiA5q616KeG6aKR5pWw5o2u55qE6ZW/5bqmXG5cbiAgICB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50ID0gMCAvLyDpn7PpopHmgLvmlbDmja7ph48o5Y6f5aeL5binKVxuICAgIHRoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQgPSAwIC8vIOinhumikeaAu+aVsOaNrumHjyjljp/lp4vluKcpXG5cbiAgICB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlID0gbnVsbFxuICAgIHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUgPSBudWxsXG5cbiAgICB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcyA9IFtdIC8vIOihpeWFhemfs+mikeW4p++8iO+8iVxuICAgIHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzID0gW10gLy8g6KGl5YWF6KeG6aKR5bin77yI77yJXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLmJlZm9yZShSRU1VWF9FVkVOVFMuUkVNVVhfTUVESUEsIHRoaXMuZG9GaXguYmluZCh0aGlzKSlcbiAgfVxuXG4gIHJlc2V0ICgpIHtcbiAgICB0aGlzLm5leHRBdWRpb0R0cyA9IDAgLy8g5qih5ouf5LiL5LiA5q616Z+z6aKR5pWw5o2u55qEZHRzXG4gICAgdGhpcy5uZXh0VmlkZW9EdHMgPSAwIC8vIOaooeaLn+S4i+S4gOauteinhumikeaVsOaNrueahGR0c1xuXG4gICAgdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuID0gMCAvLyDkuIrkuIDmrrXpn7PpopHmlbDmja7nmoTplb/luqZcbiAgICB0aGlzLmxhc3RWaWRlb1NhbXBsZXNMZW4gPSAwIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgdGhpcy5sYXN0VmlkZW9EdHMgPSB1bmRlZmluZWQgLy8g5LiK5LiA5q616Z+z6aKR5pWw5o2u55qE6ZW/5bqmXG4gICAgdGhpcy5sYXN0QXVkaW9EdHMgPSB1bmRlZmluZWQgLy8g5LiK5LiA5q616KeG6aKR5pWw5o2u55qE6ZW/5bqmXG5cbiAgICB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50ID0gMCAvLyDpn7PpopHmgLvmlbDmja7ph48o5Y6f5aeL5binKVxuICAgIHRoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQgPSAwIC8vIOinhumikeaAu+aVsOaNrumHjyjljp/lp4vluKcpXG5cbiAgICB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlID0gbnVsbFxuICAgIHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUgPSBudWxsXG5cbiAgICB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcyA9IFtdIC8vIOihpeWFhemfs+mikeW4p++8iO+8iVxuICAgIHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzID0gW10gLy8g6KGl5YWF6KeG6aKR5bin77yI77yJXG4gIH1cblxuICBkb0ZpeCAoKSB7XG4gICAgY29uc3QgeyBpc0ZpcnN0QXVkaW9TYW1wbGVzLCBpc0ZpcnN0VmlkZW9TYW1wbGVzIH0gPSB0aGlzLmdldEZpcnN0U2FtcGxlKClcblxuICAgIHRoaXMucmVtb3ZlSW52YWxpZFNhbXBsZXMoKVxuXG4gICAgdGhpcy5yZWNvcmRTYW1wbGVzQ291bnQoKVxuXG4gICAgaWYgKHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUpIHtcbiAgICAgIHRoaXMuZml4UmVmU2FtcGxlRHVyYXRpb24odGhpcy52aWRlb1RyYWNrLm1ldGEsIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzKVxuICAgIH1cbiAgICBpZiAodGhpcy5fZmlyc3RBdWRpb1NhbXBsZSkge1xuICAgICAgdGhpcy5maXhSZWZTYW1wbGVEdXJhdGlvbih0aGlzLmF1ZGlvVHJhY2subWV0YSwgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMpXG4gICAgfVxuXG4gICAgdGhpcy5kb0ZpeFZpZGVvKGlzRmlyc3RWaWRlb1NhbXBsZXMpXG4gICAgdGhpcy5kb0ZpeEF1ZGlvKGlzRmlyc3RBdWRpb1NhbXBsZXMpXG4gIH1cblxuICBkb0ZpeFZpZGVvIChmaXJzdCkge1xuICAgIGxldCB7c2FtcGxlczogdmlkZW9TYW1wbGVzLCBtZXRhfSA9IHRoaXMudmlkZW9UcmFja1xuXG4gICAgaWYgKG1ldGEuZnJhbWVSYXRlICYmIG1ldGEuZnJhbWVSYXRlLmZpeGVkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdmlkZW9TYW1wbGVzIHx8ICF2aWRlb1NhbXBsZXMubGVuZ3RoIHx8ICF0aGlzLl9maXJzdFZpZGVvU2FtcGxlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBjb25zb2xlLmxvZyhgdmlkZW8gbGFzdFNhbXBsZSwgJHt2aWRlb1NhbXBsZXNbdmlkZW9TYW1wbGVzLmxlbmd0aCAtIDFdLmR0c31gKVxuXG4gICAgY29uc3QgZmlyc3RTYW1wbGUgPSB2aWRlb1NhbXBsZXNbMF1cbiAgICBjb25zdCBmaXJzdER0cyA9IGZpcnN0U2FtcGxlLmR0c1xuXG4gICAgY29uc3Qgc2FtcGxlc0xlbiA9IHZpZGVvU2FtcGxlcy5sZW5ndGg7XG5cbiAgICAvLyBzdGVwMS4g5L+u5aSN5LiOYXVkaW/pppbluKflt67ot53lpKrlpKfnmoTpl67pophcbiAgICBpZiAoZmlyc3QgJiYgdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSkge1xuICAgICAgY29uc3QgdmlkZW9GaXJzdER0cyA9IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzXG4gICAgICBjb25zdCBhdWRpb0ZpcnN0RHRzID0gdGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHNcbiAgICAgIGNvbnN0IGdhcCA9IHZpZGVvRmlyc3REdHMgLSBhdWRpb0ZpcnN0RHRzXG4gICAgICBpZiAoZ2FwID4gKDIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgICBjb25zdCBmaWxsQ291bnQgPSBNYXRoLmZsb29yKGdhcCAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxsQ291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGNsb25lZEZpcnN0U2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgZmlyc3RTYW1wbGUpIC8vIOinhumikeWktOmDqOW4p+e8uuWksemcgOimgeWkjeWItuesrOS4gOW4p1xuICAgICAgICAgIC8vIOmHjeaWsOiuoeeul3NhbXBsZeeahGR0c+WSjHB0c1xuICAgICAgICAgIGNsb25lZEZpcnN0U2FtcGxlLmR0cyA9IHZpZGVvRmlyc3REdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgIGNsb25lZEZpcnN0U2FtcGxlLnB0cyA9IGNsb25lZEZpcnN0U2FtcGxlLmR0cyArIGNsb25lZEZpcnN0U2FtcGxlLmN0c1xuXG4gICAgICAgICAgdmlkZW9TYW1wbGVzLnVuc2hpZnQoY2xvbmVkRmlyc3RTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogY2xvbmVkRmlyc3RTYW1wbGUuZHRzLFxuICAgICAgICAgICAgc2l6ZTogY2xvbmVkRmlyc3RTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBnYXBcbiAgICAvLyBzdGVwMi4g5L+u5aSNc2FtcGxlc+auteS5i+mXtOeahOmXtOi3nemXrumimOOAgVxuICAgIGlmICh0aGlzLm5leHRWaWRlb0R0cykge1xuICAgICAgLy8gc3RlcDEuIOWkhOeQhnNhbXBsZXPmrrXkuYvpl7TnmoTkuKLluKfmg4XlhrVcbiAgICAgIC8vIOW9k+WPkeeOsGR1cmF0aW9u5beu6Led5aSn5LqOMuW4p+aXtui/m+ihjOihpeW4p1xuICAgICAgZ2FwID0gZmlyc3REdHMgLSB0aGlzLm5leHRWaWRlb0R0c1xuICAgICAgY29uc3QgYWJzR2FwID0gTWF0aC5hYnMoZ2FwKVxuICAgICAgaWYgKGdhcCA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgY29uc3QgZmlsbEZyYW1lQ291bnQgPSBNYXRoLmZsb29yKGdhcCAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxsRnJhbWVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgY2xvbmVkU2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgdmlkZW9TYW1wbGVzWzBdKVxuICAgICAgICAgIGNvbnN0IGNvbXB1dGVkID0gZmlyc3REdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgICAgICAgY2xvbmVkU2FtcGxlLmR0cyA9IGNvbXB1dGVkID4gdGhpcy5uZXh0VmlkZW9EdHMgPyBjb21wdXRlZCA6IHRoaXMubmV4dFZpZGVvRHRzIC8vIOihpeeahOesrOS4gOW4p+S4gOWumuimgeaYr25leHRWaWRlb0R0c1xuICAgICAgICAgIGNsb25lZFNhbXBsZS5wdHMgPSBjbG9uZWRTYW1wbGUuZHRzICsgY2xvbmVkU2FtcGxlLmN0c1xuXG4gICAgICAgICAgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMudW5zaGlmdChjbG9uZWRTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogY2xvbmVkU2FtcGxlLmR0cyxcbiAgICAgICAgICAgIHNpemU6IGNsb25lZFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFic0dhcCA8PSAxMCAmJiBhYnNHYXAgPiAwKSB7XG4gICAgICAgIC8vIOW9k+W3rui3neWcqCst5LiA5bin5LmL6Ze05pe25bCG56ys5LiA5bin55qEZHRz5by66KGM5a6a5L2N5Yiw5pyf5pyb5L2N572uXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCfph43lrprkvY3op4bpopHluKdkdHMnLCB2aWRlb1NhbXBsZXNbMF0uZHRzLCB0aGlzLm5leHRWaWRlb0R0cylcbiAgICAgICAgdmlkZW9TYW1wbGVzWzBdLmR0cyA9IHRoaXMubmV4dFZpZGVvRHRzXG4gICAgICAgIHZpZGVvU2FtcGxlc1swXS5vcmlnaW5EdHMgPSB2aWRlb1NhbXBsZXNbMF0uZHRzXG4gICAgICAgIHZpZGVvU2FtcGxlc1swXS5jdHMgPSB2aWRlb1NhbXBsZXNbMF0uY3RzIHx8IHZpZGVvU2FtcGxlc1swXS5wdHMgLSB2aWRlb1NhbXBsZXNbMF0uZHRzXG4gICAgICAgIHZpZGVvU2FtcGxlc1swXS5wdHMgPSB2aWRlb1NhbXBsZXNbMF0uZHRzICsgdmlkZW9TYW1wbGVzWzBdLmN0c1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsYXN0RHRzID0gdmlkZW9TYW1wbGVzW3ZpZGVvU2FtcGxlcy5sZW5ndGggLSAxXS5kdHM7XG5cbiAgICBjb25zdCBsYXN0U2FtcGxlRHVyYXRpb24gPSB2aWRlb1NhbXBsZXMubGVuZ3RoID49IDIgPyBsYXN0RHRzIC0gdmlkZW9TYW1wbGVzW3ZpZGVvU2FtcGxlcy5sZW5ndGggLSAyXS5kdHMgOiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG5cbiAgICB0aGlzLmxhc3RWaWRlb1NhbXBsZXNMZW4gPSBzYW1wbGVzTGVuXG4gICAgdGhpcy5uZXh0VmlkZW9EdHMgPSBsYXN0RHRzICsgbGFzdFNhbXBsZUR1cmF0aW9uXG4gICAgdGhpcy5sYXN0VmlkZW9EdHMgPSBsYXN0RHRzXG5cbiAgICAvLyBzdGVwMi4g5L+u5aSNc2FtcGxl5q615LmL5YaF55qE6Ze06Led6Zeu6aKYXG4gICAgLy8gc3RlcDMuIOS/ruWkjXNhbXBsZXPmrrXlhoXpg6jnmoRkdHPlvILluLjpl67pophcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdmlkZW9TYW1wbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gdmlkZW9TYW1wbGVzW2ldXG4gICAgICBjb25zdCBuZXh0ID0gdmlkZW9TYW1wbGVzW2kgKyAxXVxuXG4gICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gbmV4dC5kdHMgLSBjdXJyZW50LmR0cztcblxuICAgICAgaWYgKGR1cmF0aW9uID4gKDIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgICAvLyDkuKTluKfkuYvpl7Tpl7TpmpTlpKrlpKfvvIzpnIDopoHooaXnqbrnmb3luKdcbiAgICAgICAgbGV0IGZpbGxGcmFtZUNvdW50ID0gTWF0aC5mbG9vcihkdXJhdGlvbiAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgbGV0IGZpbGxGcmFtZUlkeCA9IDBcbiAgICAgICAgd2hpbGUgKGZpbGxGcmFtZUlkeCA8IGZpbGxGcmFtZUNvdW50KSB7XG4gICAgICAgICAgY29uc3QgZmlsbEZyYW1lID0gT2JqZWN0LmFzc2lnbih7fSwgbmV4dClcbiAgICAgICAgICBmaWxsRnJhbWUuZHRzID0gY3VycmVudC5kdHMgKyAoZmlsbEZyYW1lSWR4ICsgMSkgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgICAgZmlsbEZyYW1lLnB0cyA9IGZpbGxGcmFtZS5kdHMgKyBmaWxsRnJhbWUuY3RzXG4gICAgICAgICAgaWYgKGZpbGxGcmFtZSA8IG5leHQuZHRzKSB7XG4gICAgICAgICAgICB2aWRlb1NhbXBsZXMuc3BsaWNlKGksIDAsIGZpbGxGcmFtZSlcblxuICAgICAgICAgICAgdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgICAgIGR0czogZmlsbEZyYW1lLmR0cyxcbiAgICAgICAgICAgICAgc2l6ZTogZmlsbEZyYW1lLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaWxsRnJhbWVJZHgrK1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzID0gdmlkZW9TYW1wbGVzO1xuICB9XG5cbiAgZG9GaXhBdWRpbyAoZmlyc3QpIHtcbiAgICBsZXQge3NhbXBsZXM6IGF1ZGlvU2FtcGxlcywgbWV0YX0gPSB0aGlzLmF1ZGlvVHJhY2tcblxuICAgIGlmICghYXVkaW9TYW1wbGVzIHx8ICFhdWRpb1NhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coYGF1ZGlvIGxhc3RTYW1wbGUsICR7YXVkaW9TYW1wbGVzW2F1ZGlvU2FtcGxlcy5sZW5ndGggLSAxXS5kdHN9YClcblxuICAgIGNvbnN0IHNhbXBsZXNMZW4gPSBhdWRpb1NhbXBsZXMubGVuZ3RoO1xuICAgIGNvbnN0IHNpbGVudEZyYW1lID0gQUFDLmdldFNpbGVudEZyYW1lKG1ldGEuY29kZWMsIG1ldGEuY2hhbm5lbENvdW50KVxuXG4gICAgY29uc3QgZmlyc3RTYW1wbGUgPSB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlXG5cbiAgICAvLyDlr7lhdWRpb1NhbXBsZXPmjInnhadkdHPlgZrmjpLluo9cbiAgICBhdWRpb1NhbXBsZXMgPSBDb21wYXRpYmlsaXR5LnNvcnRBdWRpb1NhbXBsZXMoYXVkaW9TYW1wbGVzKVxuXG4gICAgLy8gc3RlcDAuIOmmluW4p+S4jnZpZGVv6aaW5bin6Ze06Led5aSn55qE6Zeu6aKYXG4gICAgaWYgKHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUgJiYgZmlyc3QpIHtcbiAgICAgIGNvbnN0IHZpZGVvRmlyc3RQdHMgPSB0aGlzLl9maXJzdFZpZGVvU2FtcGxlLnB0cyA/IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUucHRzIDogdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5kdHMgKyB0aGlzLl9maXJzdFZpZGVvU2FtcGxlLmN0c1xuXG4gICAgICBpZiAoZmlyc3RTYW1wbGUuZHRzIC0gdmlkZW9GaXJzdFB0cyA+IG1ldGEucmVmU2FtcGxlRHVyYXRpb24pIHtcbiAgICAgICAgY29uc3Qgc2lsZW50U2FtcGxlQ291bnQgPSBNYXRoLmZsb29yKChmaXJzdFNhbXBsZS5kdHMgLSB2aWRlb0ZpcnN0UHRzKSAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWxlbnRTYW1wbGVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qgc2lsZW50U2FtcGxlID0ge1xuICAgICAgICAgICAgZGF0YTogc2lsZW50RnJhbWUsXG4gICAgICAgICAgICBkYXRhc2l6ZTogc2lsZW50RnJhbWUuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIGR0czogZmlyc3RTYW1wbGUuZHRzIC0gKGkgKyAxKSAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24sXG4gICAgICAgICAgICBmaWx0ZXJlZDogMFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGF1ZGlvU2FtcGxlcy51bnNoaWZ0KHNpbGVudFNhbXBsZSlcblxuICAgICAgICAgIHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgZHRzOiBzaWxlbnRTYW1wbGUuZHRzLFxuICAgICAgICAgICAgc2l6ZTogc2lsZW50U2FtcGxlLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgZ2FwXG4gICAgY29uc3QgZmlyc3REdHMgPSBhdWRpb1NhbXBsZXNbMF0uZHRzXG5cbiAgICBpZiAodGhpcy5uZXh0QXVkaW9EdHMpIHtcbiAgICAgIC8vIHN0ZXAxLiDlpITnkIZzYW1wbGVz5q615LmL6Ze055qE5Lii5bin5oOF5Ya1XG4gICAgICAvLyDlvZPlj5HnjrBkdXJhdGlvbuW3rui3neWkp+S6jjHluKfml7bov5vooYzooaXluKdcbiAgICAgIGdhcCA9IGZpcnN0RHRzIC0gdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgIGNvbnN0IGFic0dhcCA9IE1hdGguYWJzKGdhcClcblxuICAgICAgaWYgKGFic0dhcCA+IG1ldGEucmVmU2FtcGxlRHVyYXRpb24gJiYgc2FtcGxlc0xlbiA9PT0gMSAmJiB0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4gPT09IDEpIHtcbiAgICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkID0gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIGlmIChnYXAgPiAoMiAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pKSB7XG4gICAgICAgIGlmIChzYW1wbGVzTGVuID09PSAxICYmIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9PT0gMSkge1xuICAgICAgICAgIC8vIOWmguaenHNhbXBsZeeahGxlbmd0aOS4gOebtOaYrzHvvIzogIzkuJTkuIDnm7TkuI3nrKblkIhyZWZTYW1wbGVEdXJhdGlvbu+8jOmcgOimgeWKqOaAgeS/ruaUuXJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkICE9PSB1bmRlZmluZWQgPyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgKyBnYXAgOiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uICsgZ2FwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgc2lsZW50RnJhbWVDb3VudCA9IE1hdGguZmxvb3IoZ2FwIC8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbilcblxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lsZW50RnJhbWVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wdXRlZCA9IGZpcnN0RHRzIC0gKGkgKyAxKSAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IHNpbGVudFNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIGF1ZGlvU2FtcGxlc1swXSwge1xuICAgICAgICAgICAgICBkdHM6IGNvbXB1dGVkID4gdGhpcy5uZXh0QXVkaW9EdHMgPyBjb21wdXRlZCA6IHRoaXMubmV4dEF1ZGlvRHRzXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgICAgZHRzOiBzaWxlbnRTYW1wbGUuZHRzLFxuICAgICAgICAgICAgICBzaXplOiBzaWxlbnRTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMudW5zaGlmdChzaWxlbnRTYW1wbGUpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFic0dhcCA8PSAxMCAmJiBhYnNHYXAgPiAwKSB7XG4gICAgICAgIC8vIOW9k+W3rui3neavlOi+g+Wwj+eahOaXtuWAmeWwhumfs+mikeW4p+mHjeWumuS9jVxuICAgICAgICAvLyBjb25zb2xlLmxvZygn6YeN5a6a5L2N6Z+z6aKR5binZHRzJywgYXVkaW9TYW1wbGVzWzBdLmR0cywgdGhpcy5uZXh0QXVkaW9EdHMpXG4gICAgICAgIGF1ZGlvU2FtcGxlc1swXS5kdHMgPSB0aGlzLm5leHRBdWRpb0R0c1xuICAgICAgICBhdWRpb1NhbXBsZXNbMF0ucHRzID0gdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGFzdER0cyA9IGF1ZGlvU2FtcGxlc1thdWRpb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzO1xuICAgIGNvbnN0IGxhc3RTYW1wbGVEdXJhdGlvbiA9IGF1ZGlvU2FtcGxlcy5sZW5ndGggPj0gMiA/IGxhc3REdHMgLSBhdWRpb1NhbXBsZXNbYXVkaW9TYW1wbGVzLmxlbmd0aCAtIDJdLmR0cyA6IG1ldGEucmVmU2FtcGxlRHVyYXRpb25cblxuICAgIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9IHNhbXBsZXNMZW47XG4gICAgdGhpcy5uZXh0QXVkaW9EdHMgPSBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgPyBsYXN0RHRzICsgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkIDogbGFzdER0cyArIGxhc3RTYW1wbGVEdXJhdGlvblxuICAgIHRoaXMubGFzdEF1ZGlvRHRzID0gbGFzdER0c1xuXG4gICAgLy8gc3RlcDMuIOS/ruWkjXNhbXBsZXPmrrXlhoXpg6jnmoRkdHPlvILluLjpl67pophcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXVkaW9TYW1wbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gYXVkaW9TYW1wbGVzW2ldXG4gICAgICBjb25zdCBuZXh0ID0gYXVkaW9TYW1wbGVzW2kgKyAxXVxuXG4gICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gbmV4dC5kdHMgLSBjdXJyZW50LmR0cztcbiAgICAgIGF1ZGlvU2FtcGxlc1tpXS5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgLypcbiAgICAgIGlmIChkdXJhdGlvbiA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgLy8g5Lik5bin5LmL6Ze06Ze06ZqU5aSq5aSn77yM6ZyA6KaB6KGl56m655m95binXG4gICAgICAgIC8qKlxuICAgICAgICBsZXQgc2lsZW50RnJhbWVDb3VudCA9IE1hdGguZmxvb3IoZHVyYXRpb24gLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuICAgICAgICBsZXQgZnJhbWVJZHggPSAwXG5cbiAgICAgICAgd2hpbGUgKGZyYW1lSWR4IDwgc2lsZW50RnJhbWVDb3VudCkge1xuICAgICAgICAgIGNvbnN0IHNpbGVudFNhbXBsZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IHNpbGVudEZyYW1lLFxuICAgICAgICAgICAgZGF0YXNpemU6IHNpbGVudEZyYW1lLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICBkdHM6IGN1cnJlbnQuZHRzICsgKGZyYW1lSWR4ICsgMSkgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uLFxuICAgICAgICAgICAgZmlsdGVyZWQ6IDAsXG4gICAgICAgICAgICBpc1NpbGVudDogdHJ1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGF1ZGlvU2FtcGxlcy5zcGxpY2UoaSwgMCwgc2lsZW50U2FtcGxlKVxuXG4gICAgICAgICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgICBkdHM6IHNpbGVudFNhbXBsZS5kdHMsXG4gICAgICAgICAgICBzaXplOiBzaWxlbnRTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIGZyYW1lSWR4KytcbiAgICAgICAgICBpKysgLy8g5LiN5a+56Z2Z6Z+z5bin5YGa5q+U6L6DXG4gICAgICAgIH1cbiAgICAgIH0gKi9cbiAgICB9XG5cbiAgICB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcyA9IENvbXBhdGliaWxpdHkuc29ydEF1ZGlvU2FtcGxlcyhhdWRpb1NhbXBsZXMpXG4gIH1cblxuICBnZXRGaXJzdFNhbXBsZSAoKSB7XG4gICAgLy8g6I635Y+WdmlkZW/lkoxhdWRpb+eahOmmluW4p+aVsOaNrlxuICAgIGxldCB7c2FtcGxlczogdmlkZW9TYW1wbGVzfSA9IHRoaXMudmlkZW9UcmFja1xuICAgIGxldCB7c2FtcGxlczogYXVkaW9TYW1wbGVzfSA9IHRoaXMuYXVkaW9UcmFja1xuXG4gICAgbGV0IGlzRmlyc3RWaWRlb1NhbXBsZXMgPSBmYWxzZTtcbiAgICBsZXQgaXNGaXJzdEF1ZGlvU2FtcGxlcyA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLl9maXJzdFZpZGVvU2FtcGxlICYmIHZpZGVvU2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUgPSBDb21wYXRpYmlsaXR5LmZpbmRGaXJzdFZpZGVvU2FtcGxlKHZpZGVvU2FtcGxlcylcbiAgICAgIGlzRmlyc3RWaWRlb1NhbXBsZXMgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9maXJzdEF1ZGlvU2FtcGxlICYmIGF1ZGlvU2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUgPSBDb21wYXRpYmlsaXR5LmZpbmRGaXJzdEF1ZGlvU2FtcGxlKGF1ZGlvU2FtcGxlcykgLy8g5a+75om+ZHRz5pyA5bCP55qE5bin5L2c5Li66aaW5Liq6Z+z6aKR5binXG4gICAgICBpc0ZpcnN0QXVkaW9TYW1wbGVzID0gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpc0ZpcnN0VmlkZW9TYW1wbGVzLFxuICAgICAgaXNGaXJzdEF1ZGlvU2FtcGxlc1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDlnKjmsqHmnIlyZWZTYW1wbGVEdXJhdGlvbueahOmXrumimOa1geS4re+8jFxuICAgKi9cbiAgZml4UmVmU2FtcGxlRHVyYXRpb24gKG1ldGEsIHNhbXBsZXMpIHtcbiAgICBjb25zdCBpc1ZpZGVvID0gbWV0YS50eXBlID09PSAndmlkZW8nXG4gICAgY29uc3QgYWxsU2FtcGxlc0NvdW50ID0gaXNWaWRlbyA/IHRoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQgOiB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50XG4gICAgY29uc3QgZmlyc3REdHMgPSBpc1ZpZGVvID8gdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5kdHMgOiB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlLmR0c1xuICAgIGNvbnN0IGZpbGxlZFNhbXBsZXNDb3VudCA9IGlzVmlkZW8gPyB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5sZW5ndGggOiB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5sZW5ndGhcblxuICAgIGlmICghbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiB8fCBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uIDw9IDAgfHwgTnVtYmVyLmlzTmFOKG1ldGEucmVmU2FtcGxlRHVyYXRpb24pKSB7XG4gICAgICBpZiAoc2FtcGxlcy5sZW5ndGggPj0gMSkge1xuICAgICAgICBjb25zdCBsYXN0RHRzID0gc2FtcGxlc1tzYW1wbGVzLmxlbmd0aCAtIDFdLmR0c1xuXG4gICAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKChsYXN0RHRzIC0gZmlyc3REdHMpIC8gKChhbGxTYW1wbGVzQ291bnQgKyBmaWxsZWRTYW1wbGVzQ291bnQpIC0gMSkpOyAvLyDlsIZyZWZTYW1wbGVEdXJhdGlvbumHjee9ruS4uuiuoeeul+WQjueahOW5s+Wdh+WAvFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobWV0YS5yZWZTYW1wbGVEdXJhdGlvbikge1xuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgY29uc3QgbGFzdER0cyA9IHNhbXBsZXNbc2FtcGxlcy5sZW5ndGggLSAxXS5kdHNcbiAgICAgICAgY29uc3QgZmlyc3REdHMgPSBzYW1wbGVzWzBdLmR0c1xuICAgICAgICBjb25zdCBkdXJhdGlvbkF2ZyA9IChsYXN0RHRzIC0gZmlyc3REdHMpIC8gc2FtcGxlcy5sZW5ndGhcblxuICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5hYnMobWV0YS5yZWZTYW1wbGVEdXJhdGlvbiAtIGR1cmF0aW9uQXZnKSA8PSBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA6IGR1cmF0aW9uQXZnOyAvLyDlsIZyZWZTYW1wbGVEdXJhdGlvbumHjee9ruS4uuiuoeeul+WQjueahOW5s+Wdh+WAvFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDorrDlvZXmiKrmraLnm67liY3kuIDlhbHmkq3mlL7kuoblpJrlsJHluKdcbiAgICovXG4gIHJlY29yZFNhbXBsZXNDb3VudCAoKSB7XG4gICAgY29uc3QgeyBhdWRpb1RyYWNrLCB2aWRlb1RyYWNrIH0gPSB0aGlzXG5cbiAgICB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50ICs9IGF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGhcbiAgICB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50ICs9IHZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiDljrvpmaTkuI3lkIjms5XnmoTluKfvvIjlgJLpgIDjgIHph43lpI3luKfvvIlcbiAgICovXG4gIHJlbW92ZUludmFsaWRTYW1wbGVzICgpIHtcbiAgICBjb25zdCB7IF9maXJzdFZpZGVvU2FtcGxlLCBfZmlyc3RBdWRpb1NhbXBsZSB9ID0gdGhpc1xuXG4gICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMgPSB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcy5maWx0ZXIoKHNhbXBsZSkgPT4ge1xuICAgICAgcmV0dXJuIHNhbXBsZS5kdHMgPj0gX2ZpcnN0QXVkaW9TYW1wbGUuZHRzICYmICh0aGlzLmxhc3RBdWRpb0R0cyA9PT0gdW5kZWZpbmVkIHx8IHNhbXBsZS5kdHMgPiB0aGlzLmxhc3RBdWRpb0R0cylcbiAgICB9KVxuXG4gICAgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMgPSB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcy5maWx0ZXIoKHNhbXBsZSkgPT4ge1xuICAgICAgcmV0dXJuIHNhbXBsZS5kdHMgPj0gX2ZpcnN0VmlkZW9TYW1wbGUuZHRzICYmICh0aGlzLmxhc3RWaWRlb0R0cyA9PT0gdW5kZWZpbmVkIHx8IHNhbXBsZS5kdHMgPiB0aGlzLmxhc3RWaWRlb0R0cylcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIHNvcnRBdWRpb1NhbXBsZXMgKHNhbXBsZXMpIHtcbiAgICBpZiAoc2FtcGxlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBzYW1wbGVzXG4gICAgfVxuXG4gICAgcmV0dXJuIHNhbXBsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGEuZHRzIC0gYi5kdHNcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIOWvu+aJvmR0c+acgOWwj+eahHNhbXBsZVxuICAgKiBAcGFyYW0gc2FtcGxlc1xuICAgKi9cbiAgc3RhdGljIGZpbmRGaXJzdEF1ZGlvU2FtcGxlIChzYW1wbGVzKSB7XG4gICAgaWYgKCFzYW1wbGVzIHx8IHNhbXBsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHJldHVybiBDb21wYXRpYmlsaXR5LnNvcnRBdWRpb1NhbXBsZXMoc2FtcGxlcylbMF1cbiAgfVxuXG4gIHN0YXRpYyBmaW5kRmlyc3RWaWRlb1NhbXBsZSAoc2FtcGxlcykge1xuICAgIGlmICghc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3Qgc29ydGVkID0gc2FtcGxlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gYS5kdHMgLSBiLmR0cztcbiAgICB9KVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNvcnRlZC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKHNvcnRlZFtpXS5pc0tleWZyYW1lKSB7XG4gICAgICAgIHJldHVybiBzb3J0ZWRbaV1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgdHJhY2tzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgfVxuXG4gIGdldCBhdWRpb1RyYWNrICgpIHtcbiAgICBpZiAodGhpcy50cmFja3MpIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYWNrcy5hdWRpb1RyYWNrXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgdmlkZW9UcmFjayAoKSB7XG4gICAgaWYgKHRoaXMudHJhY2tzKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFja3MudmlkZW9UcmFja1xuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBDb21wYXRpYmlsaXR5O1xuIiwiY2xhc3MgR29sb21iIHtcbiAgY29uc3RydWN0b3IgKHVpbnQ4YXJyYXkpIHtcbiAgICB0aGlzLlRBRyA9ICdHb2xvbWInXG4gICAgdGhpcy5fYnVmZmVyID0gdWludDhhcnJheVxuICAgIHRoaXMuX2J1ZmZlckluZGV4ID0gMFxuICAgIHRoaXMuX3RvdGFsQnl0ZXMgPSB1aW50OGFycmF5LmJ5dGVMZW5ndGhcbiAgICB0aGlzLl90b3RhbEJpdHMgPSB1aW50OGFycmF5LmJ5dGVMZW5ndGggKiA4XG4gICAgdGhpcy5fY3VycmVudFdvcmQgPSAwXG4gICAgdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCA9IDBcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2J1ZmZlciA9IG51bGxcbiAgfVxuXG4gIF9maWxsQ3VycmVudFdvcmQgKCkge1xuICAgIGxldCBidWZmZXJCeXRlc0xlZnQgPSB0aGlzLl90b3RhbEJ5dGVzIC0gdGhpcy5fYnVmZmVySW5kZXhcbiAgICBpZiAoYnVmZmVyQnl0ZXNMZWZ0IDw9IDApIHtcbiAgICAgIC8vIFRPRE8g5byC5bi45aSE55CGXG4gICAgfVxuXG4gICAgbGV0IGJ5dGVzUmVhZCA9IE1hdGgubWluKDQsIGJ1ZmZlckJ5dGVzTGVmdClcbiAgICBsZXQgd29yZCA9IG5ldyBVaW50OEFycmF5KDQpXG4gICAgd29yZC5zZXQodGhpcy5fYnVmZmVyLnN1YmFycmF5KHRoaXMuX2J1ZmZlckluZGV4LCB0aGlzLl9idWZmZXJJbmRleCArIGJ5dGVzUmVhZCkpXG4gICAgdGhpcy5fY3VycmVudFdvcmQgPSBuZXcgRGF0YVZpZXcod29yZC5idWZmZXIpLmdldFVpbnQzMigwLCBmYWxzZSlcblxuICAgIHRoaXMuX2J1ZmZlckluZGV4ICs9IGJ5dGVzUmVhZFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPSBieXRlc1JlYWQgKiA4XG4gIH1cblxuICByZWFkQml0cyAoYml0cykge1xuICAgIGlmIChiaXRzID4gMzIpIHtcbiAgICAgIC8vIFRPRE9cbiAgICB9XG5cbiAgICBpZiAoYml0cyA8PSB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0KSB7XG4gICAgICBsZXQgcmVzdWx0ID0gdGhpcy5fY3VycmVudFdvcmQgPj4+ICgzMiAtIGJpdHMpXG4gICAgICB0aGlzLl9jdXJyZW50V29yZCA8PD0gYml0c1xuICAgICAgdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCAtPSBiaXRzXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPyB0aGlzLl9jdXJyZW50V29yZCA6IDBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZXN1bHQgPj4+ICgzMiAtIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQpXG4gICAgbGV0IGJpdHNOZWVkTGVmdCA9IGJpdHMgLSB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0XG5cbiAgICB0aGlzLl9maWxsQ3VycmVudFdvcmQoKVxuICAgIGxldCBiaXRzUmVhZE5leHQgPSBNYXRoLm1pbihiaXRzTmVlZExlZnQsIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQpXG5cbiAgICBsZXQgcmVzdWx0MiA9IHRoaXMuX2N1cnJlbnRXb3JkID4+PiAoMzIgLSBiaXRzUmVhZE5leHQpXG4gICAgdGhpcy5fY3VycmVudFdvcmQgPDw9IGJpdHNSZWFkTmV4dFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgLT0gYml0c1JlYWROZXh0XG5cbiAgICByZXN1bHQgPSAocmVzdWx0IDw8IGJpdHNSZWFkTmV4dCkgfCByZXN1bHQyXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcmVhZEJvb2wgKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDEpID09PSAxXG4gIH1cblxuICByZWFkQnl0ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZEJpdHMoOClcbiAgfVxuXG4gIF9za2lwTGVhZGluZ1plcm8gKCkge1xuICAgIGxldCB6ZXJvQ291bnRcbiAgICBmb3IgKHplcm9Db3VudCA9IDA7IHplcm9Db3VudCA8IHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQ7IHplcm9Db3VudCsrKSB7XG4gICAgICBpZiAoKHRoaXMuX2N1cnJlbnRXb3JkICYgKDB4ODAwMDAwMDAgPj4+IHplcm9Db3VudCkpICE9PSAwKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRXb3JkIDw8PSB6ZXJvQ291bnRcbiAgICAgICAgdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCAtPSB6ZXJvQ291bnRcbiAgICAgICAgcmV0dXJuIHplcm9Db3VudFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9maWxsQ3VycmVudFdvcmQoKVxuICAgIHJldHVybiB6ZXJvQ291bnQgKyB0aGlzLl9za2lwTGVhZGluZ1plcm8oKVxuICB9XG5cbiAgcmVhZFVFRyAoKSB7IC8vIHVuc2lnbmVkIGV4cG9uZW50aWFsIGdvbG9tYlxuICAgIGxldCBsZWFkaW5nWmVyb3MgPSB0aGlzLl9za2lwTGVhZGluZ1plcm8oKVxuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKGxlYWRpbmdaZXJvcyArIDEpIC0gMVxuICB9XG5cbiAgcmVhZFNFRyAoKSB7IC8vIHNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbiAgICBsZXQgdmFsdWUgPSB0aGlzLnJlYWRVRUcoKVxuICAgIGlmICh2YWx1ZSAmIDB4MDEpIHtcbiAgICAgIHJldHVybiAodmFsdWUgKyAxKSA+Pj4gMVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTEgKiAodmFsdWUgPj4+IDEpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdvbG9tYlxuIiwiaW1wb3J0IFNwc1BhcnNlciBmcm9tICcuL3Nwcyc7XG5jbGFzcyBOYWx1bml0IHtcbiAgc3RhdGljIGdldE5hbHVuaXRzIChidWZmZXIpIHtcbiAgICBpZiAoYnVmZmVyLmxlbmd0aCAtIGJ1ZmZlci5wb3NpdGlvbiA8IDQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBsZXQgYnVmID0gYnVmZmVyLmRhdGF2aWV3O1xuICAgIGxldCBwb3NpdGlvbiA9IGJ1ZmZlci5wb3NpdGlvbjtcbiAgICBpZiAoYnVmLmdldEludDMyKHBvc2l0aW9uKSA9PT0gMSB8fFxuICAgIChidWYuZ2V0SW50MTYocG9zaXRpb24pID09PSAwICYmIGJ1Zi5nZXRJbnQ4KHBvc2l0aW9uICsgMikgPT09IDEpKSB7XG4gICAgICByZXR1cm4gTmFsdW5pdC5nZXRBbm5leGJOYWxzKGJ1ZmZlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBOYWx1bml0LmdldEF2Y2NOYWxzKGJ1ZmZlcik7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldEFubmV4Yk5hbHMgKGJ1ZmZlcikge1xuICAgIGxldCBuYWxzID0gW107XG4gICAgbGV0IHBvc2l0aW9uID0gTmFsdW5pdC5nZXRIZWFkZXJQb3NpdGlvbkFubmV4QihidWZmZXIpO1xuICAgIGxldCBzdGFydCA9IHBvc2l0aW9uLnBvcztcbiAgICBsZXQgZW5kID0gc3RhcnQ7XG4gICAgd2hpbGUgKHN0YXJ0IDwgYnVmZmVyLmxlbmd0aCAtIDQpIHtcbiAgICAgIGxldCBoZWFkZXIgPSBidWZmZXIuYnVmZmVyLnNsaWNlKHN0YXJ0LCBzdGFydCArIHBvc2l0aW9uLmhlYWRlckxlbmd0aCk7XG4gICAgICBpZiAocG9zaXRpb24ucG9zID09PSBidWZmZXIucG9zaXRpb24pIHtcbiAgICAgICAgYnVmZmVyLnNraXAocG9zaXRpb24uaGVhZGVyTGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHBvc2l0aW9uID0gTmFsdW5pdC5nZXRIZWFkZXJQb3NpdGlvbkFubmV4QihidWZmZXIpO1xuICAgICAgZW5kID0gcG9zaXRpb24ucG9zO1xuICAgICAgbGV0IGJvZHkgPSBuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLnNsaWNlKHN0YXJ0ICsgaGVhZGVyLmJ5dGVMZW5ndGgsIGVuZCkpO1xuICAgICAgbGV0IHVuaXQgPSB7aGVhZGVyLCBib2R5fTtcbiAgICAgIE5hbHVuaXQuYW5hbHlzZU5hbCh1bml0KTtcbiAgICAgIG5hbHMucHVzaCh1bml0KTtcbiAgICAgIGJ1ZmZlci5za2lwKGVuZCAtIGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICBzdGFydCA9IGVuZDtcbiAgICB9XG4gICAgcmV0dXJuIG5hbHM7XG4gIH1cblxuICBzdGF0aWMgZ2V0QXZjY05hbHMgKGJ1ZmZlcikge1xuICAgIGxldCBuYWxzID0gW107XG4gICAgd2hpbGUgKGJ1ZmZlci5wb3NpdGlvbiA8IGJ1ZmZlci5sZW5ndGggLSA0KSB7XG4gICAgICBsZXQgbGVuZ3RoID0gYnVmZmVyLmRhdGF2aWV3LmdldEludDMyKCk7XG4gICAgICBpZiAoYnVmZmVyLmxlbmd0aCAtIGJ1ZmZlci5wb3NpdGlvbiA+PSBsZW5ndGgpIHtcbiAgICAgICAgbGV0IGhlYWRlciA9IGJ1ZmZlci5idWZmZXIuc2xpY2UoYnVmZmVyLnBvc2l0aW9uLCBidWZmZXIucG9zaXRpb24gKyA0KTtcbiAgICAgICAgYnVmZmVyLnNraXAoNClcbiAgICAgICAgbGV0IGJvZHkgPSBidWZmZXIuYnVmZmVyLnNsaWNlKGJ1ZmZlci5wb3NpdGlvbiwgYnVmZmVyLnBvc2l0aW9uICsgbGVuZ3RoKTtcbiAgICAgICAgYnVmZmVyLnNraXAobGVuZ3RoKTtcbiAgICAgICAgbGV0IHVuaXQgPSB7aGVhZGVyLCBib2R5fTtcbiAgICAgICAgTmFsdW5pdC5hbmFseXNlTmFsKHVuaXQpO1xuICAgICAgICBuYWxzLnB1c2godW5pdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5hbHM7XG4gIH1cblxuICBzdGF0aWMgYW5hbHlzZU5hbCAodW5pdCkge1xuICAgIGxldCB0eXBlID0gdW5pdC5ib2R5WzBdICYgMHgxZjtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgLy8gTkRSXG4gICAgICAgIHVuaXQubmRyID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIC8vIElEUlxuICAgICAgICB1bml0LmlkciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2OlxuICAgICAgICAvLyBTRUlcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDc6XG4gICAgICAgIC8vIFNQU1xuICAgICAgICB1bml0LnNwcyA9IFNwc1BhcnNlci5wYXJzZVNQUyh1bml0LmJvZHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgLy8gUFBTXG4gICAgICAgIHVuaXQucHBzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDk6XG4gICAgICAgIC8vIEFVRFxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRIZWFkZXJQb3NpdGlvbkFubmV4QiAoYnVmZmVyKSB7XG4gICAgLy8gc2VwZXJhdGVcbiAgICBsZXQgcG9zID0gYnVmZmVyLnBvc2l0aW9uO1xuICAgIGxldCBoZWFkZXJMZW5ndGggPSAwO1xuICAgIHdoaWxlIChoZWFkZXJMZW5ndGggIT09IDMgJiYgaGVhZGVyTGVuZ3RoICE9PSA0ICYmIHBvcyA8IGJ1ZmZlci5sZW5ndGggLSA0KSB7XG4gICAgICBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDE2KHBvcykgPT09IDApIHtcbiAgICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MgKyAyKSA9PT0gMSkge1xuICAgICAgICAgIC8vIDB4MDAwMDAxXG4gICAgICAgICAgaGVhZGVyTGVuZ3RoID0gNDtcbiAgICAgICAgfSBlbHNlIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50OChwb3MgKyAyKSA9PT0gMSkge1xuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9zKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3MgPT09IGJ1ZmZlci5sZW5ndGggLSA0KSB7XG4gICAgICBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDE2KHBvcykgPT09IDApIHtcbiAgICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MgKyAyKSA9PT0gMSkge1xuICAgICAgICAgIC8vIDB4MDAwMDAxXG4gICAgICAgICAgaGVhZGVyTGVuZ3RoID0gNDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zKSA9PT0gMCAmJiBidWZmZXIuZGF0YXZpZXcuZ2V0SW50OChwb3MpID09PSAxKSB7XG4gICAgICAgICAgLy8gMHgwMDAwMDAxXG4gICAgICAgICAgaGVhZGVyTGVuZ3RoID0gMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb3MgPSBidWZmZXIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7cG9zLCBoZWFkZXJMZW5ndGh9O1xuICB9XG5cbiAgc3RhdGljIGdldEF2Y2MgKHNwcywgcHBzKSB7XG4gICAgbGV0IHJldCA9IG5ldyBVaW50OEFycmF5KHNwcy5ieXRlTGVuZ3RoICsgcHBzLmJ5dGVMZW5ndGggKyAxMSk7XG4gICAgcmV0WzBdID0gMHgwMTtcbiAgICByZXRbMV0gPSBzcHNbMV07XG4gICAgcmV0WzJdID0gc3BzWzJdO1xuICAgIHJldFszXSA9IHNwc1szXTtcbiAgICByZXRbNF0gPSAyNTU7XG4gICAgcmV0WzVdID0gMjI1O1xuXG4gICAgbGV0IG9mZnNldCA9IDY7XG5cbiAgICByZXQuc2V0KG5ldyBVaW50OEFycmF5KFsoc3BzLmJ5dGVMZW5ndGggPj4+IDgpICYgMHhmZiwgc3BzLmJ5dGVMZW5ndGggJiAweGZmXSksIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IDI7XG4gICAgcmV0LnNldChzcHMsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IHNwcy5ieXRlTGVuZ3RoO1xuXG4gICAgcmV0W29mZnNldF0gPSAxO1xuICAgIG9mZnNldCsrO1xuXG4gICAgcmV0LnNldChuZXcgVWludDhBcnJheShbKHBwcy5ieXRlTGVuZ3RoID4+PiA4KSAmIDB4ZmYsIHBwcy5ieXRlTGVuZ3RoICYgMHhmZl0pLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSAyO1xuICAgIHJldC5zZXQocHBzLCBvZmZzZXQpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmFsdW5pdDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAgKi9cbi8qIGVzbGludC1kaXNhYmxlIG9uZS12YXIgICovXG5pbXBvcnQgR29sb21iIGZyb20gJy4vZ29sb21iJ1xuXG5jbGFzcyBTUFNQYXJzZXIge1xuICBzdGF0aWMgX2Vic3AycmJzcCAodWludDhhcnJheSkge1xuICAgIGxldCBzcmMgPSB1aW50OGFycmF5XG4gICAgbGV0IHNyY0xlbmd0aCA9IHNyYy5ieXRlTGVuZ3RoXG4gICAgbGV0IGRzdCA9IG5ldyBVaW50OEFycmF5KHNyY0xlbmd0aClcbiAgICBsZXQgZHN0SWR4ID0gMFxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcmNMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGkgPj0gMikge1xuICAgICAgICBpZiAoc3JjW2ldID09PSAweDAzICYmIHNyY1tpIC0gMV0gPT09IDB4MDAgJiYgc3JjW2kgLSAyXSA9PT0gMHgwMCkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRzdFtkc3RJZHhdID0gc3JjW2ldXG4gICAgICBkc3RJZHgrK1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShkc3QuYnVmZmVyLCAwLCBkc3RJZHgpXG4gIH1cblxuICBzdGF0aWMgcGFyc2VTUFMgKHVpbnQ4YXJyYXkpIHtcbiAgICBsZXQgcmJzcCA9IFNQU1BhcnNlci5fZWJzcDJyYnNwKHVpbnQ4YXJyYXkpXG4gICAgbGV0IGdiID0gbmV3IEdvbG9tYihyYnNwKVxuXG4gICAgZ2IucmVhZEJ5dGUoKVxuICAgIGxldCBwcm9maWxlSWRjID0gZ2IucmVhZEJ5dGUoKVxuICAgIGdiLnJlYWRCeXRlKClcbiAgICBsZXQgbGV2ZWxJZGMgPSBnYi5yZWFkQnl0ZSgpXG4gICAgZ2IucmVhZFVFRygpXG5cbiAgICBsZXQgcHJvZmlsZV9zdHJpbmcgPSBTUFNQYXJzZXIuZ2V0UHJvZmlsZVN0cmluZyhwcm9maWxlSWRjKVxuICAgIGxldCBsZXZlbF9zdHJpbmcgPSBTUFNQYXJzZXIuZ2V0TGV2ZWxTdHJpbmcobGV2ZWxJZGMpXG4gICAgbGV0IGNocm9tYV9mb3JtYXRfaWRjID0gMVxuICAgIGxldCBjaHJvbWFfZm9ybWF0ID0gNDIwXG4gICAgbGV0IGNocm9tYV9mb3JtYXRfdGFibGUgPSBbMCwgNDIwLCA0MjIsIDQ0NF1cbiAgICBsZXQgYml0X2RlcHRoID0gOFxuXG4gICAgaWYgKHByb2ZpbGVJZGMgPT09IDEwMCB8fCBwcm9maWxlSWRjID09PSAxMTAgfHwgcHJvZmlsZUlkYyA9PT0gMTIyIHx8XG4gICAgICBwcm9maWxlSWRjID09PSAyNDQgfHwgcHJvZmlsZUlkYyA9PT0gNDQgfHwgcHJvZmlsZUlkYyA9PT0gODMgfHxcbiAgICAgIHByb2ZpbGVJZGMgPT09IDg2IHx8IHByb2ZpbGVJZGMgPT09IDExOCB8fCBwcm9maWxlSWRjID09PSAxMjggfHxcbiAgICAgIHByb2ZpbGVJZGMgPT09IDEzOCB8fCBwcm9maWxlSWRjID09PSAxNDQpIHtcbiAgICAgIGNocm9tYV9mb3JtYXRfaWRjID0gZ2IucmVhZFVFRygpXG4gICAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDMpIHtcbiAgICAgICAgZ2IucmVhZEJpdHMoMSlcbiAgICAgIH1cbiAgICAgIGlmIChjaHJvbWFfZm9ybWF0X2lkYyA8PSAzKSB7XG4gICAgICAgIGNocm9tYV9mb3JtYXQgPSBjaHJvbWFfZm9ybWF0X3RhYmxlW2Nocm9tYV9mb3JtYXRfaWRjXVxuICAgICAgfVxuXG4gICAgICBiaXRfZGVwdGggPSBnYi5yZWFkVUVHKCkgKyA4XG4gICAgICBnYi5yZWFkVUVHKClcbiAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICBsZXQgc2NhbGluZ19saXN0X2NvdW50ID0gKGNocm9tYV9mb3JtYXRfaWRjICE9PSAzKSA/IDggOiAxMlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjYWxpbmdfbGlzdF9jb3VudDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgICAgIGlmIChpIDwgNikge1xuICAgICAgICAgICAgICBTUFNQYXJzZXIuX3NraXBTY2FsaW5nTGlzdChnYiwgMTYpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBTUFNQYXJzZXIuX3NraXBTY2FsaW5nTGlzdChnYiwgNjQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdiLnJlYWRVRUcoKVxuICAgIGxldCBwaWNfb3JkZXJfY250X3R5cGUgPSBnYi5yZWFkVUVHKClcbiAgICBpZiAocGljX29yZGVyX2NudF90eXBlID09PSAwKSB7XG4gICAgICBnYi5yZWFkVUVHKClcbiAgICB9IGVsc2UgaWYgKHBpY19vcmRlcl9jbnRfdHlwZSA9PT0gMSkge1xuICAgICAgZ2IucmVhZEJpdHMoMSlcbiAgICAgIGdiLnJlYWRTRUcoKVxuICAgICAgZ2IucmVhZFNFRygpXG4gICAgICBsZXQgbnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZSA9IGdiLnJlYWRVRUcoKVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1fcmVmX2ZyYW1lc19pbl9waWNfb3JkZXJfY250X2N5Y2xlOyBpKyspIHtcbiAgICAgICAgZ2IucmVhZFNFRygpXG4gICAgICB9XG4gICAgfVxuICAgIGdiLnJlYWRVRUcoKVxuICAgIGdiLnJlYWRCaXRzKDEpXG5cbiAgICBsZXQgcGljX3dpZHRoX2luX21ic19taW51czEgPSBnYi5yZWFkVUVHKClcbiAgICBsZXQgcGljX2hlaWdodF9pbl9tYXBfdW5pdHNfbWludXMxID0gZ2IucmVhZFVFRygpXG5cbiAgICBsZXQgZnJhbWVfbWJzX29ubHlfZmxhZyA9IGdiLnJlYWRCaXRzKDEpXG4gICAgaWYgKGZyYW1lX21ic19vbmx5X2ZsYWcgPT09IDApIHtcbiAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgfVxuICAgIGdiLnJlYWRCaXRzKDEpXG5cbiAgICBsZXQgZnJhbWVfY3JvcF9sZWZ0X29mZnNldCA9IDBcbiAgICBsZXQgZnJhbWVfY3JvcF9yaWdodF9vZmZzZXQgPSAwXG4gICAgbGV0IGZyYW1lX2Nyb3BfdG9wX29mZnNldCA9IDBcbiAgICBsZXQgZnJhbWVfY3JvcF9ib3R0b21fb2Zmc2V0ID0gMFxuXG4gICAgbGV0IGZyYW1lX2Nyb3BwaW5nX2ZsYWcgPSBnYi5yZWFkQm9vbCgpXG4gICAgaWYgKGZyYW1lX2Nyb3BwaW5nX2ZsYWcpIHtcbiAgICAgIGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgPSBnYi5yZWFkVUVHKClcbiAgICAgIGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgICBmcmFtZV9jcm9wX3RvcF9vZmZzZXQgPSBnYi5yZWFkVUVHKClcbiAgICAgIGZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCA9IGdiLnJlYWRVRUcoKVxuICAgIH1cblxuICAgIGxldCBwYXJfd2lkdGggPSAxLCBwYXJfaGVpZ2h0ID0gMVxuICAgIGxldCBmcHMgPSAwLCBmcHNfZml4ZWQgPSB0cnVlLCBmcHNfbnVtID0gMCwgZnBzX2RlbiA9IDBcblxuICAgIGxldCB2dWlfcGFyYW1ldGVyc19wcmVzZW50X2ZsYWcgPSBnYi5yZWFkQm9vbCgpXG4gICAgaWYgKHZ1aV9wYXJhbWV0ZXJzX3ByZXNlbnRfZmxhZykge1xuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHsgLy8gYXNwZWN0X3JhdGlvX2luZm9fcHJlc2VudF9mbGFnXG4gICAgICAgIGxldCBhc3BlY3RfcmF0aW9faWRjID0gZ2IucmVhZEJ5dGUoKVxuICAgICAgICBsZXQgcGFyX3dfdGFibGUgPSBbMSwgMTIsIDEwLCAxNiwgNDAsIDI0LCAyMCwgMzIsIDgwLCAxOCwgMTUsIDY0LCAxNjAsIDQsIDMsIDJdXG4gICAgICAgIGxldCBwYXJfaF90YWJsZSA9IFsxLCAxMSwgMTEsIDExLCAzMywgMTEsIDExLCAxMSwgMzMsIDExLCAxMSwgMzMsIDk5LCAzLCAyLCAxXVxuXG4gICAgICAgIGlmIChhc3BlY3RfcmF0aW9faWRjID4gMCAmJiBhc3BlY3RfcmF0aW9faWRjIDwgMTYpIHtcbiAgICAgICAgICBwYXJfd2lkdGggPSBwYXJfd190YWJsZVthc3BlY3RfcmF0aW9faWRjIC0gMV1cbiAgICAgICAgICBwYXJfaGVpZ2h0ID0gcGFyX2hfdGFibGVbYXNwZWN0X3JhdGlvX2lkYyAtIDFdXG4gICAgICAgIH0gZWxzZSBpZiAoYXNwZWN0X3JhdGlvX2lkYyA9PT0gMjU1KSB7XG4gICAgICAgICAgcGFyX3dpZHRoID0gZ2IucmVhZEJ5dGUoKSA8PCA4IHwgZ2IucmVhZEJ5dGUoKVxuICAgICAgICAgIHBhcl9oZWlnaHQgPSBnYi5yZWFkQnl0ZSgpIDw8IDggfCBnYi5yZWFkQnl0ZSgpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgZ2IucmVhZEJvb2woKVxuICAgICAgfVxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgZ2IucmVhZEJpdHMoNClcbiAgICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgICBnYi5yZWFkQml0cygyNClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgZ2IucmVhZFVFRygpXG4gICAgICAgIGdiLnJlYWRVRUcoKVxuICAgICAgfVxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgbGV0IG51bV91bml0c19pbl90aWNrID0gZ2IucmVhZEJpdHMoMzIpXG4gICAgICAgIGxldCB0aW1lX3NjYWxlID0gZ2IucmVhZEJpdHMoMzIpXG4gICAgICAgIGZwc19maXhlZCA9IGdiLnJlYWRCb29sKClcblxuICAgICAgICBmcHNfbnVtID0gdGltZV9zY2FsZVxuICAgICAgICBmcHNfZGVuID0gbnVtX3VuaXRzX2luX3RpY2sgKiAyXG4gICAgICAgIGZwcyA9IGZwc19udW0gLyBmcHNfZGVuXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHBhclNjYWxlID0gMVxuICAgIGlmIChwYXJfd2lkdGggIT09IDEgfHwgcGFyX2hlaWdodCAhPT0gMSkge1xuICAgICAgcGFyU2NhbGUgPSBwYXJfd2lkdGggLyBwYXJfaGVpZ2h0XG4gICAgfVxuXG4gICAgbGV0IGNyb3BfdW5pdF94ID0gMCwgY3JvcF91bml0X3kgPSAwXG4gICAgaWYgKGNocm9tYV9mb3JtYXRfaWRjID09PSAwKSB7XG4gICAgICBjcm9wX3VuaXRfeCA9IDFcbiAgICAgIGNyb3BfdW5pdF95ID0gMiAtIGZyYW1lX21ic19vbmx5X2ZsYWdcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHN1Yl93YyA9IChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMykgPyAxIDogMlxuICAgICAgbGV0IHN1Yl9oYyA9IChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMSkgPyAyIDogMVxuICAgICAgY3JvcF91bml0X3ggPSBzdWJfd2NcbiAgICAgIGNyb3BfdW5pdF95ID0gc3ViX2hjICogKDIgLSBmcmFtZV9tYnNfb25seV9mbGFnKVxuICAgIH1cblxuICAgIGxldCBjb2RlY193aWR0aCA9IChwaWNfd2lkdGhfaW5fbWJzX21pbnVzMSArIDEpICogMTZcbiAgICBsZXQgY29kZWNfaGVpZ2h0ID0gKDIgLSBmcmFtZV9tYnNfb25seV9mbGFnKSAqICgocGljX2hlaWdodF9pbl9tYXBfdW5pdHNfbWludXMxICsgMSkgKiAxNilcblxuICAgIGNvZGVjX3dpZHRoIC09IChmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0ICsgZnJhbWVfY3JvcF9yaWdodF9vZmZzZXQpICogY3JvcF91bml0X3hcbiAgICBjb2RlY19oZWlnaHQgLT0gKGZyYW1lX2Nyb3BfdG9wX29mZnNldCArIGZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCkgKiBjcm9wX3VuaXRfeVxuXG4gICAgbGV0IHByZXNlbnRfd2lkdGggPSBNYXRoLmNlaWwoY29kZWNfd2lkdGggKiBwYXJTY2FsZSlcblxuICAgIGdiLmRlc3Ryb3koKVxuICAgIGdiID0gbnVsbFxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2ZpbGVfc3RyaW5nOiBwcm9maWxlX3N0cmluZyxcbiAgICAgIGxldmVsX3N0cmluZzogbGV2ZWxfc3RyaW5nLFxuICAgICAgYml0X2RlcHRoOiBiaXRfZGVwdGgsXG4gICAgICBjaHJvbWFfZm9ybWF0OiBjaHJvbWFfZm9ybWF0LFxuICAgICAgY2hyb21hX2Zvcm1hdF9zdHJpbmc6IFNQU1BhcnNlci5nZXRDaHJvbWFGb3JtYXRTdHJpbmcoY2hyb21hX2Zvcm1hdCksXG5cbiAgICAgIGZyYW1lX3JhdGU6IHtcbiAgICAgICAgZml4ZWQ6IGZwc19maXhlZCxcbiAgICAgICAgZnBzOiBmcHMsXG4gICAgICAgIGZwc19kZW46IGZwc19kZW4sXG4gICAgICAgIGZwc19udW06IGZwc19udW1cbiAgICAgIH0sXG5cbiAgICAgIHBhcl9yYXRpbzoge1xuICAgICAgICB3aWR0aDogcGFyX3dpZHRoLFxuICAgICAgICBoZWlnaHQ6IHBhcl9oZWlnaHRcbiAgICAgIH0sXG5cbiAgICAgIGNvZGVjX3NpemU6IHtcbiAgICAgICAgd2lkdGg6IGNvZGVjX3dpZHRoLFxuICAgICAgICBoZWlnaHQ6IGNvZGVjX2hlaWdodFxuICAgICAgfSxcblxuICAgICAgcHJlc2VudF9zaXplOiB7XG4gICAgICAgIHdpZHRoOiBwcmVzZW50X3dpZHRoLFxuICAgICAgICBoZWlnaHQ6IGNvZGVjX2hlaWdodFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBfc2tpcFNjYWxpbmdMaXN0IChnYiwgY291bnQpIHtcbiAgICBsZXQgbGFzdF9zY2FsZSA9IDgsIG5leHRfc2NhbGUgPSA4XG4gICAgbGV0IGRlbHRhX3NjYWxlID0gMFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgaWYgKG5leHRfc2NhbGUgIT09IDApIHtcbiAgICAgICAgZGVsdGFfc2NhbGUgPSBnYi5yZWFkU0VHKClcbiAgICAgICAgbmV4dF9zY2FsZSA9IChsYXN0X3NjYWxlICsgZGVsdGFfc2NhbGUgKyAyNTYpICUgMjU2XG4gICAgICB9XG4gICAgICBsYXN0X3NjYWxlID0gKG5leHRfc2NhbGUgPT09IDApID8gbGFzdF9zY2FsZSA6IG5leHRfc2NhbGVcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0UHJvZmlsZVN0cmluZyAocHJvZmlsZUlkYykge1xuICAgIHN3aXRjaCAocHJvZmlsZUlkYykge1xuICAgICAgY2FzZSA2NjpcbiAgICAgICAgcmV0dXJuICdCYXNlbGluZSdcbiAgICAgIGNhc2UgNzc6XG4gICAgICAgIHJldHVybiAnTWFpbidcbiAgICAgIGNhc2UgODg6XG4gICAgICAgIHJldHVybiAnRXh0ZW5kZWQnXG4gICAgICBjYXNlIDEwMDpcbiAgICAgICAgcmV0dXJuICdIaWdoJ1xuICAgICAgY2FzZSAxMTA6XG4gICAgICAgIHJldHVybiAnSGlnaDEwJ1xuICAgICAgY2FzZSAxMjI6XG4gICAgICAgIHJldHVybiAnSGlnaDQyMidcbiAgICAgIGNhc2UgMjQ0OlxuICAgICAgICByZXR1cm4gJ0hpZ2g0NDQnXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ1Vua25vd24nXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldExldmVsU3RyaW5nIChsZXZlbElkYykge1xuICAgIHJldHVybiAobGV2ZWxJZGMgLyAxMCkudG9GaXhlZCgxKVxuICB9XG5cbiAgc3RhdGljIGdldENocm9tYUZvcm1hdFN0cmluZyAoY2hyb21hKSB7XG4gICAgc3dpdGNoIChjaHJvbWEpIHtcbiAgICAgIGNhc2UgNDIwOlxuICAgICAgICByZXR1cm4gJzQ6MjowJ1xuICAgICAgY2FzZSA0MjI6XG4gICAgICAgIHJldHVybiAnNDoyOjInXG4gICAgICBjYXNlIDQ0NDpcbiAgICAgICAgcmV0dXJuICc0OjQ6NCdcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnVW5rbm93bidcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgdG9WaWRlb01ldGEgKHNwc0NvbmZpZykge1xuICAgIGxldCBtZXRhID0ge31cbiAgICBpZiAoc3BzQ29uZmlnICYmIHNwc0NvbmZpZy5jb2RlY19zaXplKSB7XG4gICAgICBtZXRhLmNvZGVjV2lkdGggPSBzcHNDb25maWcuY29kZWNfc2l6ZS53aWR0aFxuICAgICAgbWV0YS5jb2RlY0hlaWdodCA9IHNwc0NvbmZpZy5jb2RlY19zaXplLmhlaWdodFxuICAgICAgbWV0YS5wcmVzZW50V2lkdGggPSBzcHNDb25maWcucHJlc2VudF9zaXplLndpZHRoXG4gICAgICBtZXRhLnByZXNlbnRIZWlnaHQgPSBzcHNDb25maWcucHJlc2VudF9zaXplLmhlaWdodFxuICAgIH1cblxuICAgIG1ldGEucHJvZmlsZSA9IHNwc0NvbmZpZy5wcm9maWxlX3N0cmluZ1xuICAgIG1ldGEubGV2ZWwgPSBzcHNDb25maWcubGV2ZWxfc3RyaW5nXG4gICAgbWV0YS5iaXREZXB0aCA9IHNwc0NvbmZpZy5iaXRfZGVwdGhcbiAgICBtZXRhLmNocm9tYUZvcm1hdCA9IHNwc0NvbmZpZy5jaHJvbWFfZm9ybWF0XG5cbiAgICBtZXRhLnBhclJhdGlvID0ge1xuICAgICAgd2lkdGg6IHNwc0NvbmZpZy5wYXJfcmF0aW8ud2lkdGgsXG4gICAgICBoZWlnaHQ6IHNwc0NvbmZpZy5wYXJfcmF0aW8uaGVpZ2h0XG4gICAgfVxuXG4gICAgbWV0YS5mcmFtZVJhdGUgPSBzcHNDb25maWcuZnJhbWVfcmF0ZVxuXG4gICAgbGV0IGZwc0RlbiA9IG1ldGEuZnJhbWVSYXRlLmZwc19kZW5cbiAgICBsZXQgZnBzTnVtID0gbWV0YS5mcmFtZVJhdGUuZnBzX251bVxuICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKG1ldGEudGltZXNjYWxlICogKGZwc0RlbiAvIGZwc051bSkpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU1BTUGFyc2VyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gSExTXG4gIE0zVThQYXJzZXI6IHJlcXVpcmUoJy4vc3JjL2hscy9kZW11eGVyL20zdThwYXJzZXInKS5kZWZhdWx0LFxuICBUc0RlbXV4ZXI6IHJlcXVpcmUoJy4vc3JjL2hscy9kZW11eGVyL3RzJykuZGVmYXVsdCxcbiAgUGxheWxpc3Q6IHJlcXVpcmUoJy4vc3JjL2hscy9wbGF5bGlzdCcpLmRlZmF1bHQsXG4gIEZsdkRlbXV4ZXI6IHJlcXVpcmUoJy4vc3JjL2Zsdi9pbmRleCcpLmRlZmF1bHRcbn07XG4iLCJpbXBvcnQgeyBpc0xlLCBVVEY4IH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnXG5cbmNvbnN0IERBVEFfVFlQRVMgPSB7XG4gIE5VTUJFUjogMCxcbiAgQk9PTEVBTjogMSxcbiAgU1RSSU5HOiAyLFxuICBPQkpFQ1Q6IDMsXG4gIE1JWF9BUlJBWTogOCxcbiAgT0JKRUNUX0VORDogOSxcbiAgU1RSSUNUX0FSUkFZOiAxMCxcbiAgREFURTogMTEsXG4gIExPTkVfU1RSSU5HOiAxMlxufVxuXG4vKipcbiAqIG1ldGHkv6Hmga/op6PmnpBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQU1GUGFyc2VyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgIHRoaXMucmVhZE9mZnNldCA9IHRoaXMub2Zmc2V0XG4gIH1cblxuICByZXNvbHZlIChtZXRhLCBzaXplKSB7XG4gICAgaWYgKHNpemUgPCAzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBlbm91Z2ggZGF0YSBmb3IgbWV0YWluZm8nKVxuICAgIH1cbiAgICBjb25zdCBtZXRhRGF0YSA9IHt9XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VWYWx1ZShtZXRhKVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKG1ldGEsIHNpemUgLSBuYW1lLmJvZHlTaXplKVxuICAgIG1ldGFEYXRhW25hbWUuZGF0YV0gPSB2YWx1ZS5kYXRhXG5cbiAgICB0aGlzLnJlc2V0U3RhdHVzKClcbiAgICByZXR1cm4gbWV0YURhdGFcbiAgfVxuXG4gIHJlc2V0U3RhdHVzICgpIHtcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLnJlYWRPZmZzZXQgPSB0aGlzLm9mZnNldFxuICB9XG5cbiAgcGFyc2VTdHJpbmcgKGJ1ZmZlcikge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0KVxuICAgIGNvbnN0IHN0ckxlbiA9IGR2LmdldFVpbnQxNigwLCAhaXNMZSlcbiAgICBsZXQgc3RyID0gJydcbiAgICBpZiAoc3RyTGVuID4gMCkge1xuICAgICAgc3RyID0gVVRGOC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQgKyAyLCBzdHJMZW4pKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSAnJ1xuICAgIH1cbiAgICBsZXQgc2l6ZSA9IHN0ckxlbiArIDJcbiAgICB0aGlzLnJlYWRPZmZzZXQgKz0gc2l6ZVxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBzdHIsXG4gICAgICBib2R5U2l6ZTogc3RyTGVuICsgMlxuICAgIH1cbiAgfVxuXG4gIHBhcnNlRGF0ZSAoYnVmZmVyLCBzaXplKSB7XG4gICAgY29uc3QgZHYgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQsIHNpemUpXG4gICAgbGV0IHRzID0gZHYuZ2V0RmxvYXQ2NCgwLCAhaXNMZSlcbiAgICBjb25zdCB0aW1lT2Zmc2V0ID0gZHYuZ2V0SW50MTYoOCwgIWlzTGUpXG4gICAgdHMgKz0gdGltZU9mZnNldCAqIDYwICogMTAwMFxuXG4gICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDEwXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IG5ldyBEYXRlKHRzKSxcbiAgICAgIGJvZHlTaXplOiAxMFxuICAgIH1cbiAgfVxuXG4gIHBhcnNlT2JqZWN0IChidWZmZXIsIHNpemUpIHtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5wYXJzZVN0cmluZyhidWZmZXIsIHNpemUpXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBzaXplIC0gbmFtZS5ib2R5U2l6ZSlcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YToge1xuICAgICAgICBuYW1lOiBuYW1lLmRhdGEsXG4gICAgICAgIHZhbHVlOiB2YWx1ZS5kYXRhXG4gICAgICB9LFxuICAgICAgYm9keVNpemU6IG5hbWUuYm9keVNpemUgKyB2YWx1ZS5ib2R5U2l6ZSxcbiAgICAgIGlzT2JqRW5kOiB2YWx1ZS5pc09iakVuZFxuICAgIH1cbiAgfVxuXG4gIHBhcnNlTG9uZ1N0cmluZyAoYnVmZmVyKSB7XG4gICAgY29uc3QgZHYgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQpXG4gICAgY29uc3Qgc3RyTGVuID0gZHYuZ2V0VWludDMyKDAsICFpc0xlKVxuICAgIGxldCBzdHIgPSAnJ1xuICAgIGlmIChzdHJMZW4gPiAwKSB7XG4gICAgICBzdHIgPSBVVEY4LmRlY29kZShuZXcgVWludDhBcnJheShidWZmZXIsIHRoaXMucmVhZE9mZnNldCArIDIsIHN0ckxlbikpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9ICcnXG4gICAgfVxuICAgIC8vIGNvbnN0IHNpemUgPSBzdHJMZW4gKyA0O1xuICAgIHRoaXMucmVhZE9mZnNldCArPSBzdHJMZW4gKyA0XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHN0cixcbiAgICAgIGJvZHlTaXplOiBzdHJMZW4gKyA0XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOino+aekG1ldGHkuK3nmoTlj5jph49cbiAgICovXG4gIHBhcnNlVmFsdWUgKGRhdGEsIHNpemUpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKClcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICBidWZmZXIgPSBkYXRhXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciA9IGRhdGEuYnVmZmVyXG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIE5VTUJFUixcbiAgICAgIEJPT0xFQU4sXG4gICAgICBTVFJJTkcsXG4gICAgICBPQkpFQ1QsXG4gICAgICBNSVhfQVJSQVksXG4gICAgICBPQkpFQ1RfRU5ELFxuICAgICAgU1RSSUNUX0FSUkFZLFxuICAgICAgREFURSxcbiAgICAgIExPTkVfU1RSSU5HXG4gICAgfSA9IERBVEFfVFlQRVNcbiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIsIHRoaXMucmVhZE9mZnNldCwgc2l6ZSlcbiAgICBsZXQgaXNPYmpFbmQgPSBmYWxzZVxuICAgIGNvbnN0IHR5cGUgPSBkYXRhVmlldy5nZXRVaW50OCgwKVxuICAgIGxldCBvZmZzZXQgPSAxXG4gICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDFcbiAgICBsZXQgdmFsdWUgPSBudWxsXG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgTlVNQkVSOiB7XG4gICAgICAgIHZhbHVlID0gZGF0YVZpZXcuZ2V0RmxvYXQ2NCgxLCAhaXNMZSlcbiAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDhcbiAgICAgICAgb2Zmc2V0ICs9IDhcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgQk9PTEVBTjoge1xuICAgICAgICBjb25zdCBib29sTnVtID0gZGF0YVZpZXcuZ2V0VWludDgoMSlcbiAgICAgICAgdmFsdWUgPSAhIWJvb2xOdW1cbiAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDFcbiAgICAgICAgb2Zmc2V0ICs9IDFcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgU1RSSU5HOiB7XG4gICAgICAgIGNvbnN0IHN0ciA9IHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyKVxuICAgICAgICB2YWx1ZSA9IHN0ci5kYXRhXG4gICAgICAgIG9mZnNldCArPSBzdHIuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgT0JKRUNUOiB7XG4gICAgICAgIHZhbHVlID0ge31cbiAgICAgICAgbGV0IG9iakVuZFNpemUgPSAwXG4gICAgICAgIGlmIChkYXRhVmlldy5nZXRVaW50MzIoc2l6ZSAtIDQsICFpc0xlKSAmIDB4MDBGRkZGRkYpIHtcbiAgICAgICAgICBvYmpFbmRTaXplID0gM1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMucmVhZE9mZnNldCArPSBvZmZzZXQgLSAxO1xuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgc2l6ZSAtIDQpIHtcbiAgICAgICAgICBjb25zdCBhbWZPYmogPSB0aGlzLnBhcnNlT2JqZWN0KGJ1ZmZlciwgc2l6ZSAtIG9mZnNldCAtIG9iakVuZFNpemUpXG4gICAgICAgICAgaWYgKGFtZk9iai5pc09iamVjdEVuZCkgeyBicmVhayB9XG4gICAgICAgICAgdmFsdWVbYW1mT2JqLmRhdGEubmFtZV0gPSBhbWZPYmouZGF0YS52YWx1ZVxuICAgICAgICAgIG9mZnNldCArPSBhbWZPYmouYm9keVNpemVcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0IDw9IHNpemUgLSAzKSB7XG4gICAgICAgICAgY29uc3QgbWFyayA9IGRhdGFWaWV3LmdldFVpbnQzMihvZmZzZXQgLSAxLCAhaXNMZSkgJiAweDAwRkZGRkZGXG4gICAgICAgICAgaWYgKG1hcmsgPT09IDkpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZE9mZnNldCArPSAzXG4gICAgICAgICAgICBvZmZzZXQgKz0gM1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSBNSVhfQVJSQVk6IHtcbiAgICAgICAgdmFsdWUgPSB7fVxuICAgICAgICBvZmZzZXQgKz0gNFxuICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gNFxuICAgICAgICBsZXQgb2JqRW5kU2l6ZSA9IDBcbiAgICAgICAgaWYgKChkYXRhVmlldy5nZXRVaW50MzIoc2l6ZSAtIDQsICFpc0xlKSAmIDB4MDBGRkZGRkYpID09PSA5KSB7XG4gICAgICAgICAgb2JqRW5kU2l6ZSA9IDNcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCBzaXplIC0gOCkge1xuICAgICAgICAgIGNvbnN0IGFtZlZhciA9IHRoaXMucGFyc2VPYmplY3QoYnVmZmVyLCBzaXplIC0gb2Zmc2V0IC0gb2JqRW5kU2l6ZSlcbiAgICAgICAgICBpZiAoYW1mVmFyLmlzT2JqZWN0RW5kKSB7IGJyZWFrIH1cbiAgICAgICAgICB2YWx1ZVthbWZWYXIuZGF0YS5uYW1lXSA9IGFtZlZhci5kYXRhLnZhbHVlXG4gICAgICAgICAgb2Zmc2V0ICs9IGFtZlZhci5ib2R5U2l6ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgPD0gc2l6ZSAtIDMpIHtcbiAgICAgICAgICBjb25zdCBtYXJrZXIgPSBkYXRhVmlldy5nZXRVaW50MzIob2Zmc2V0IC0gMSwgIWlzTGUpICYgMHgwMEZGRkZGRlxuICAgICAgICAgIGlmIChtYXJrZXIgPT09IDkpIHtcbiAgICAgICAgICAgIG9mZnNldCArPSAzXG4gICAgICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gM1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlIE9CSkVDVF9FTkQ6IHtcbiAgICAgICAgdmFsdWUgPSBudWxsXG4gICAgICAgIGlzT2JqRW5kID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlIFNUUklDVF9BUlJBWToge1xuICAgICAgICB2YWx1ZSA9IFtdXG4gICAgICAgIGNvbnN0IGFyckxlbmd0aCA9IGRhdGFWaWV3LmdldFVpbnQzMigxLCAhaXNMZSlcbiAgICAgICAgb2Zmc2V0ICs9IDRcbiAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHNjcmlwdCA9IHRoaXMucGFyc2VWYWx1ZShidWZmZXIsIHNpemUgLSBvZmZzZXQpXG4gICAgICAgICAgdmFsdWUucHVzaChzY3JpcHQuZGF0YSlcbiAgICAgICAgICBvZmZzZXQgKz0gc2NyaXB0LmJvZHlTaXplXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBEQVRFOiB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSB0aGlzLnBhcnNlRGF0ZShidWZmZXIsIHNpemUgLSAxKVxuICAgICAgICB2YWx1ZSA9IGRhdGUuZGF0YVxuICAgICAgICBvZmZzZXQgKz0gZGF0ZS5ib2R5U2l6ZVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlIExPTkVfU1RSSU5HOiB7XG4gICAgICAgIGNvbnN0IGxvbmdTdHIgPSB0aGlzLnBhcnNlTG9uZ1N0cmluZyhidWZmZXIsIHNpemUgLSAxKVxuICAgICAgICB2YWx1ZSA9IGxvbmdTdHIuZGF0YVxuICAgICAgICBvZmZzZXQgKz0gbG9uZ1N0ci5ib2R5U2l6ZVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIG9mZnNldCA9IHNpemVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogdmFsdWUsXG4gICAgICBib2R5U2l6ZTogb2Zmc2V0LFxuICAgICAgaXNPYmpFbmQ6IGlzT2JqRW5kXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBFVkVOVFMsIEF1ZGlvVHJhY2tNZXRhLCBWaWRlb1RyYWNrTWV0YSB9IGZyb20gJ3hncGxheWVyLXV0aWxzJztcbmltcG9ydCB7IFNwc1BhcnNlciB9IGZyb20gJ3hncGxheWVyLWNvZGVjJztcbmltcG9ydCB7IFZpZGVvVHJhY2ssIEF1ZGlvVHJhY2sgfSBmcm9tICd4Z3BsYXllci1idWZmZXInXG5cbmltcG9ydCBBTUZQYXJzZXIgZnJvbSAnLi9hbWYtcGFyc2VyJ1xuXG5jb25zdCBERU1VWF9FVkVOVFMgPSBFVkVOVFMuREVNVVhfRVZFTlRTO1xuXG5jbGFzcyBGbHZEZW11eGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuX2ZpcnN0RnJhZ21lbnRMb2FkZWQgPSBmYWxzZVxuICAgIHRoaXMuX3RyYWNrTnVtID0gMFxuICAgIHRoaXMuX2hhc1NjcmlwdCA9IGZhbHNlXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5ERU1VWF9TVEFSVCwgdGhpcy5kb1BhcnNlRmx2LmJpbmQodGhpcykpXG4gIH1cblxuICAvKipcbiAgICogaWYgdGhlIGZsdiBoZWFkIGlzIHZhbGlkXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRmx2RmlsZSAoZGF0YSkge1xuICAgIHJldHVybiAhKGRhdGFbMF0gIT09IDB4NDYgfHwgZGF0YVsxXSAhPT0gMHg0QyB8fCBkYXRhWzJdICE9PSAweDU2IHx8IGRhdGFbM10gIT09IDB4MDEpXG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlIHN0cmVhbSBoYXMgYXVkaW8gb3IgdmlkZW8uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdHJlYW1GbGFnIC0gRGF0YSBmcm9tIHRoZSBzdHJlYW0gd2hpY2ggaXMgZGVmaW5lIHdoZXRoZXIgdGhlIGF1ZGlvIC8gdmlkZW8gdHJhY2sgaXMgZXhpc3QuXG4gICAqL1xuICBzdGF0aWMgZ2V0UGxheVR5cGUgKHN0cmVhbUZsYWcpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICBoYXNWaWRlbzogZmFsc2UsXG4gICAgICBoYXNBdWRpbzogZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoc3RyZWFtRmxhZyAmIDB4MDEgPiAwKSB7XG4gICAgICByZXN1bHQuaGFzVmlkZW8gPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHN0cmVhbUZsYWcgJiAweDA0ID4gMCkge1xuICAgICAgcmVzdWx0Lmhhc0F1ZGlvID0gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGRvUGFyc2VGbHYgKCkge1xuICAgIGlmICghdGhpcy5fZmlyc3RGcmFnbWVudExvYWRlZCkge1xuICAgICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA8IDEzKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY29uc3QgaGVhZGVyID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMTMpXG4gICAgICB0aGlzLnBhcnNlRmx2SGVhZGVyKGhlYWRlcilcbiAgICAgIHRoaXMuZG9QYXJzZUZsdigpIC8vIOmAkuW9kuiwg+eUqO+8jOe7p+e7reino+aekGZsdua1gVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoIDwgMTEpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBsZXQgY2h1bms7XG4gICAgICBkbyB7XG4gICAgICAgIGNodW5rID0gdGhpcy5fcGFyc2VGbHZUYWcoKVxuICAgICAgfSB3aGlsZSAoY2h1bmspXG5cbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgfVxuICB9XG5cbiAgcGFyc2VGbHZIZWFkZXIgKGhlYWRlcikge1xuICAgIGlmICghRmx2RGVtdXhlci5pc0ZsdkZpbGUoaGVhZGVyKSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKCdpbnZhbGlkIGZsdiBmaWxlJykpXG4gICAgICB0aGlzLmRvUGFyc2VGbHYoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkID0gdHJ1ZVxuICAgICAgY29uc3QgcGxheVR5cGUgPSBGbHZEZW11eGVyLmdldFBsYXlUeXBlKGhlYWRlcls0XSlcblxuICAgICAgaWYgKHBsYXlUeXBlLmhhc1ZpZGVvKSB7XG4gICAgICAgIHRoaXMuaW5pdFZpZGVvVHJhY2soKVxuICAgICAgfVxuXG4gICAgICBpZiAocGxheVR5cGUuaGFzQXVkaW8pIHtcbiAgICAgICAgdGhpcy5pbml0QXVkaW9UcmFjaygpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZG9QYXJzZUZsdigpXG4gIH1cblxuICAvKipcbiAgICogaW5pdCBkZWZhdWx0IHZpZGVvIHRyYWNrIGNvbmZpZ3NcbiAgICovXG4gIGluaXRWaWRlb1RyYWNrICgpIHtcbiAgICB0aGlzLl90cmFja051bSsrXG4gICAgbGV0IHZpZGVvVHJhY2sgPSBuZXcgVmlkZW9UcmFjaygpXG4gICAgdmlkZW9UcmFjay5tZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKClcbiAgICB2aWRlb1RyYWNrLmlkID0gdmlkZW9UcmFjay5tZXRhLmlkID0gdGhpcy5fdHJhY2tOdW1cblxuICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2sgPSB2aWRlb1RyYWNrXG4gIH1cblxuICAvKipcbiAgICogaW5pdCBkZWZhdWx0IGF1ZGlvIHRyYWNrIGNvbmZpZ3NcbiAgICovXG4gIGluaXRBdWRpb1RyYWNrICgpIHtcbiAgICB0aGlzLl90cmFja051bSsrXG4gICAgbGV0IGF1ZGlvVHJhY2sgPSBuZXcgQXVkaW9UcmFjaygpXG4gICAgYXVkaW9UcmFjay5tZXRhID0gbmV3IEF1ZGlvVHJhY2tNZXRhKClcbiAgICBhdWRpb1RyYWNrLmlkID0gYXVkaW9UcmFjay5tZXRhLmlkID0gdGhpcy5fdHJhY2tOdW1cblxuICAgIHRoaXMudHJhY2tzLmF1ZGlvVHJhY2sgPSBhdWRpb1RyYWNrXG4gIH1cblxuICAvKipcbiAgICogUGFja2FnZSB0aGUgZGF0YSBhcyB0aGUgZm9sbG93aW5nIGRhdGEgc3RydWN0dXJlXG4gICAqIHtcbiAgICogICAgZGF0YTogVWludDhBcnJheS4gdGhlIFN0cmVhbSBkYXRhLlxuICAgKiAgICBpbmZvOiBUaGUgZmlyc3QgYnl0ZSBpbmZvIG9mIHRoZSBUYWcuXG4gICAqICAgIHRhZ1R5cGU6IDjjgIE544CBMThcbiAgICogICAgdGltZVN0YW1wOiB0aGUgdGltZXN0ZW1wXG4gICAqIH1cbiAgICovXG4gIF9wYXJzZUZsdlRhZyAoKSB7XG4gICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA8IDExKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBsZXQgY2h1bmsgPSB0aGlzLl9wYXJzZUZsdlRhZ0hlYWRlcigpXG4gICAgaWYgKGNodW5rKSB7XG4gICAgICB0aGlzLl9wcm9jZXNzQ2h1bmsoY2h1bmspXG4gICAgfVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSAxMSBieXRlIHRhZyBIZWFkZXJcbiAgICovXG4gIF9wYXJzZUZsdlRhZ0hlYWRlciAoKSB7XG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICBsZXQgY2h1bmsgPSB7fVxuXG4gICAgbGV0IHRhZ1R5cGUgPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludChvZmZzZXQsIDEpXG4gICAgb2Zmc2V0ICs9IDFcblxuICAgIC8vIDIgYml0IEZNUyByZXNlcnZlZCwgMSBiaXQgZmlsdGVyZWQsIDUgYml0IHRhZyB0eXBlXG4gICAgY2h1bmsuZmlsdGVyZWQgPSAodGFnVHlwZSAmIDMyKSA+Pj4gNVxuICAgIGNodW5rLnRhZ1R5cGUgPSB0YWdUeXBlICYgMzFcblxuICAgIC8vIDMgQnl0ZSBkYXRhc2l6ZVxuICAgIGNodW5rLmRhdGFzaXplID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQob2Zmc2V0LCAzKVxuICAgIG9mZnNldCArPSAzXG5cbiAgICBpZiAoKGNodW5rLnRhZ1R5cGUgIT09IDggJiYgY2h1bmsudGFnVHlwZSAhPT0gOSAmJiBjaHVuay50YWdUeXBlICE9PSAxMSAmJiBjaHVuay50YWdUeXBlICE9PSAxOCkgfHxcbiAgICAgIHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDgsIDMpICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIgJiYgdGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVxuICAgICAgfVxuICAgICAgdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgJ3RhZ1R5cGUgJyArIGNodW5rLnRhZ1R5cGUpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPCBjaHVuay5kYXRhc2l6ZSArIDE1KSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIHJlYWQgdGhlIGRhdGEuXG4gICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoNClcblxuICAgIC8vIDMgQnl0ZSB0aW1lc3RhbXBcbiAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwgMylcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuXG4gICAgLy8gMSBCeXRlIHRpbWVzdGFtcEV4dFxuICAgIGxldCB0aW1lc3RhbXBFeHQgPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXVxuICAgIGlmICh0aW1lc3RhbXBFeHQgPiAwKSB7XG4gICAgICB0aW1lc3RhbXAgKz0gdGltZXN0YW1wRXh0ICogMHgxMDAwMDAwXG4gICAgfVxuXG4gICAgY2h1bmsuZHRzID0gdGltZXN0YW1wXG5cbiAgICAvLyBzdHJlYW1JZFxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDMpXG4gICAgcmV0dXJuIGNodW5rXG4gIH1cblxuICBfcHJvY2Vzc0NodW5rIChjaHVuaykge1xuICAgIHN3aXRjaCAoY2h1bmsudGFnVHlwZSkge1xuICAgICAgY2FzZSAxODpcbiAgICAgICAgdGhpcy5fcGFyc2VTY3JpcHREYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSA4OlxuICAgICAgICB0aGlzLl9wYXJzZUFBQ0RhdGEoY2h1bmspXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDk6XG4gICAgICAgIHRoaXMuX3BhcnNlSGV2Y0RhdGEoY2h1bmspXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDExOlxuICAgICAgICAvLyBmb3Igc29tZSBDRE4gdGhhdCBkaWQgbm90IHByb2Nlc3MgdGhlIGN1cnJlY3QgUlRNUCBtZXNzYWdlc1xuICAgICAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgZmx2IHNjcmlwdCBkYXRhXG4gICAqIEBwYXJhbSBjaHVua1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhcnNlU2NyaXB0RGF0YSAoY2h1bmspIHtcbiAgICBsZXQgYXVkaW9UcmFjayA9IHRoaXMudHJhY2tzLmF1ZGlvVHJhY2tcbiAgICBsZXQgdmlkZW9UcmFjayA9IHRoaXMudHJhY2tzLnZpZGVvVHJhY2tcblxuICAgIGxldCBkYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUpXG5cbiAgICBjb25zdCBpbmZvID0gbmV3IEFNRlBhcnNlcigpLnJlc29sdmUoZGF0YSwgZGF0YS5sZW5ndGgpXG5cbiAgICBjb25zdCBvbk1ldGFEYXRhID0gdGhpcy5fY29udGV4dC5vbk1ldGFEYXRhID0gaW5mbyA/IGluZm8ub25NZXRhRGF0YSA6IHVuZGVmaW5lZFxuXG4gICAgLy8gZmlsbCBtZWRpYUluZm9cbiAgICB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5kdXJhdGlvbiA9IG9uTWV0YURhdGEuZHVyYXRpb25cbiAgICB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5oYXNWaWRlbyA9IG9uTWV0YURhdGEuaGFzVmlkZW9cbiAgICB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5oc2FBdWRpbyA9IG9uTWV0YURhdGEuaGFzQXVkaW9cblxuICAgIGxldCB2YWxpZGF0ZSA9IHRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKVxuICAgIGlmICh2YWxpZGF0ZSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRURJQV9JTkZPKVxuICAgICAgdGhpcy5faGFzU2NyaXB0ID0gdHJ1ZVxuICAgIH1cblxuICAgIC8vIEVkaXQgZGVmYXVsdCBtZXRhLlxuICAgIGlmIChhdWRpb1RyYWNrICYmICFhdWRpb1RyYWNrLmhhc1NwZWNpZmljQ29uZmlnKSB7XG4gICAgICBsZXQgbWV0YSA9IGF1ZGlvVHJhY2subWV0YVxuICAgICAgaWYgKG9uTWV0YURhdGEuYXVkaW9zYW1wbGVyYXRlKSB7XG4gICAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IG9uTWV0YURhdGEuYXVkaW9zYW1wbGVyYXRlXG4gICAgICB9XG5cbiAgICAgIGlmIChvbk1ldGFEYXRhLmF1ZGlvY2hhbm5lbHMpIHtcbiAgICAgICAgbWV0YS5jaGFubmVsQ291bnQgPSBvbk1ldGFEYXRhLmF1ZGlvY2hhbm5lbHNcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZSkge1xuICAgICAgICBjYXNlIDQ0MTAwOlxuICAgICAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gNFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjIwNTA6XG4gICAgICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSA3XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxMTAyNTpcbiAgICAgICAgICBtZXRhLnNhbXBsZVJhdGVJbmRleCA9IDEwXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZpZGVvVHJhY2sgJiYgIXZpZGVvVHJhY2suaGFzU3BlY2lmaWNDb25maWcpIHtcbiAgICAgIGxldCBtZXRhID0gdmlkZW9UcmFjay5tZXRhXG4gICAgICBpZiAodHlwZW9mIG9uTWV0YURhdGEuZnJhbWVyYXRlID09PSAnbnVtYmVyJykge1xuICAgICAgICBsZXQgZnBzTnVtID0gTWF0aC5mbG9vcihvbk1ldGFEYXRhLmZyYW1lcmF0ZSAqIDEwMDApXG4gICAgICAgIGlmIChmcHNOdW0gPiAwKSB7XG4gICAgICAgICAgbGV0IGZwcyA9IGZwc051bSAvIDEwMDBcbiAgICAgICAgICBpZiAoIW1ldGEuZnJhbWVSYXRlKSB7XG4gICAgICAgICAgICBtZXRhLmZyYW1lUmF0ZSA9IHt9XG4gICAgICAgICAgfVxuICAgICAgICAgIG1ldGEuZnJhbWVSYXRlLmZpeGVkID0gdHJ1ZVxuICAgICAgICAgIG1ldGEuZnJhbWVSYXRlLmZwcyA9IGZwc1xuICAgICAgICAgIG1ldGEuZnJhbWVSYXRlLmZwc19udW0gPSBmcHNOdW1cbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHNfZGVuID0gMTAwMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2FhY1NlcXVlbmNlSGVhZGVyUGFyc2VyIChkYXRhKSB7XG4gICAgbGV0IHJldCA9IHt9XG4gICAgcmV0Lmhhc1NwZWNpZmljQ29uZmlnID0gdHJ1ZVxuICAgIHJldC5vYmplY3RUeXBlID0gZGF0YVsxXSA+Pj4gM1xuICAgIHJldC5zYW1wbGVSYXRlSW5kZXggPSAoKGRhdGFbMV0gJiA3KSA8PCAxKSB8IChkYXRhWzJdID4+PiA3KVxuICAgIHJldC5hdWRpb3NhbXBsZXJhdGUgPSB0aGlzLl9zd2l0Y2hBdWRpb1NhbXBsZVJhdGUocmV0LnNhbXBsZVJhdGVJbmRleClcbiAgICByZXQuY2hhbm5lbENvdW50ID0gKGRhdGFbMl0gJiAxMjApID4+PiAzXG4gICAgcmV0LmZyYW1lTGVuZ3RoID0gKGRhdGFbMl0gJiA0KSA+Pj4gMlxuICAgIHJldC5kZXBlbmRzT25Db3JlQ29kZXIgPSAoZGF0YVsyXSAmIDIpID4+PiAxXG4gICAgcmV0LmV4dGVuc2lvbkZsYWdJbmRleCA9IGRhdGFbMl0gJiAxXG5cbiAgICByZXQuY29kZWMgPSBgbXA0YS40MC4ke3JldC5vYmplY3RUeXBlfWBcbiAgICBsZXQgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBsZXQgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleDtcblxuICAgIGxldCBjb25maWc7XG4gICAgbGV0IHNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4O1xuXG4gICAgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdmaXJlZm94JykgIT09IC0xKSB7XG4gICAgICAvLyBmaXJlZm94OiB1c2UgU0JSIChIRS1BQUMpIGlmIGZyZXEgbGVzcyB0aGFuIDI0a0h6XG4gICAgICBpZiAocmV0LnNhbXBsZVJhdGVJbmRleCA+PSA2KSB7XG4gICAgICAgIHJldC5vYmplY3RUeXBlID0gNTtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdJbmRleCAtIDM7XG4gICAgICB9IGVsc2UgeyAvLyB1c2UgTEMtQUFDXG4gICAgICAgIHJldC5vYmplY3RUeXBlID0gMjtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdJbmRleDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdhbmRyb2lkJykgIT09IC0xKSB7XG4gICAgICAvLyBhbmRyb2lkOiBhbHdheXMgdXNlIExDLUFBQ1xuICAgICAgcmV0Lm9iamVjdFR5cGUgPSAyO1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBvdGhlciBicm93c2VycywgZS5nLiBjaHJvbWUuLi5cbiAgICAgIC8vIEFsd2F5cyB1c2UgSEUtQUFDIHRvIG1ha2UgaXQgZWFzaWVyIHRvIHN3aXRjaCBhYWMgY29kZWMgcHJvZmlsZVxuICAgICAgcmV0Lm9iamVjdFR5cGUgPSA1O1xuICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXg7XG4gICAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7XG5cbiAgICAgIGlmIChyZXQuc2FtcGxlUmF0ZUluZGV4ID49IDYpIHtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIGlmIChyZXQuY2hhbm5lbENvdW50ID09PSAxKSB7IC8vIE1vbm8gY2hhbm5lbFxuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDI7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uZmlnWzBdID0gcmV0Lm9iamVjdFR5cGUgPDwgMztcbiAgICBjb25maWdbMF0gfD0gKHJldC5zYW1wbGVSYXRlSW5kZXggJiAweDBGKSA+Pj4gMTtcbiAgICBjb25maWdbMV0gPSAocmV0LnNhbXBsZVJhdGVJbmRleCAmIDB4MEYpIDw8IDc7XG4gICAgY29uZmlnWzFdIHw9IChyZXQuY2hhbm5lbENvdW50ICYgMHgwRikgPDwgMztcbiAgICBpZiAocmV0Lm9iamVjdFR5cGUgPT09IDUpIHtcbiAgICAgIGNvbmZpZ1sxXSB8PSAoKGV4dGVuc2lvblNhbXBsaW5nSW5kZXggJiAweDBGKSA+Pj4gMSk7XG4gICAgICBjb25maWdbMl0gPSAoZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCAmIDB4MDEpIDw8IDc7XG4gICAgICAvLyBleHRlbmRlZCBhdWRpbyBvYmplY3QgdHlwZTogZm9yY2UgdG8gMiAoTEMtQUFDKVxuICAgICAgY29uZmlnWzJdIHw9ICgyIDw8IDIpO1xuICAgICAgY29uZmlnWzNdID0gMDtcbiAgICB9XG4gICAgcmV0LmNvbmZpZyA9IGNvbmZpZ1xuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIF9wYXJzZUFBQ0RhdGEgKGNodW5rKSB7XG4gICAgbGV0IHRyYWNrID0gdGhpcy50cmFja3MuYXVkaW9UcmFja1xuICAgIGlmICghdHJhY2spIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBtZXRhID0gdHJhY2subWV0YVxuXG4gICAgaWYgKCFtZXRhKSB7XG4gICAgICBtZXRhID0gbmV3IEF1ZGlvVHJhY2tNZXRhKClcbiAgICB9XG5cbiAgICBsZXQgaW5mbyA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdXG5cbiAgICBjaHVuay5kYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSAxKVxuXG4gICAgbGV0IGZvcm1hdCA9IChpbmZvICYgMjQwKSA+Pj4gNFxuXG4gICAgdHJhY2suZm9ybWF0ID0gZm9ybWF0XG5cbiAgICBpZiAoZm9ybWF0ICE9PSAxMCkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKGBpbnZhbGlkIGF1ZGlvIGZvcm1hdDogJHtmb3JtYXR9YCkpXG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdCA9PT0gMTAgJiYgIXRoaXMuX2hhc0F1ZGlvU2VxdWVuY2UpIHtcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IHRoaXMuX3N3aXRjaEF1ZGlvU2FtcGxpbmdGcmVxdWVuY3koaW5mbylcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gKGluZm8gJiAxMikgPj4+IDJcbiAgICAgIG1ldGEuZnJhbWVMZW50aCA9IChpbmZvICYgMikgPj4+IDFcbiAgICAgIG1ldGEuY2hhbm5lbENvdW50ID0gaW5mbyAmIDFcbiAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKDEwMjQgLyBtZXRhLmF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKVxuICAgIH1cblxuICAgIGxldCBhdWRpb1NhbXBsZVJhdGUgPSBtZXRhLmF1ZGlvU2FtcGxlUmF0ZVxuICAgIGxldCBhdWRpb1NhbXBsZVJhdGVJbmRleCA9IG1ldGEuc2FtcGxlUmF0ZUluZGV4XG4gICAgbGV0IHJlZlNhbXBsZUR1cmF0aW9uID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgZGVsZXRlIGNodW5rLnRhZ1R5cGVcbiAgICBsZXQgdmFsaWRhdGUgPSB0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSlcblxuICAgIGlmIChjaHVuay5kYXRhWzBdID09PSAwKSB7IC8vIEFBQyBTZXF1ZW5jZSBIZWFkZXJcbiAgICAgIGxldCBhYWNIZWFkZXIgPSB0aGlzLl9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlcihjaHVuay5kYXRhKVxuICAgICAgYXVkaW9TYW1wbGVSYXRlID0gYWFjSGVhZGVyLmF1ZGlvc2FtcGxlcmF0ZSB8fCBtZXRhLmF1ZGlvU2FtcGxlUmF0ZVxuICAgICAgYXVkaW9TYW1wbGVSYXRlSW5kZXggPSBhYWNIZWFkZXIuc2FtcGxlUmF0ZUluZGV4IHx8IG1ldGEuc2FtcGxlUmF0ZUluZGV4XG4gICAgICByZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IoMTAyNCAvIGF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKVxuXG4gICAgICBtZXRhLmNoYW5uZWxDb3VudCA9IGFhY0hlYWRlci5jaGFubmVsQ291bnRcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IGF1ZGlvU2FtcGxlUmF0ZVxuICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSBhdWRpb1NhbXBsZVJhdGVJbmRleFxuICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IHJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICBtZXRhLmR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gKiBtZXRhLnRpbWVzY2FsZVxuICAgICAgbWV0YS5jb25maWcgPSBhYWNIZWFkZXIuY29uZmlnXG5cbiAgICAgIGNvbnN0IGF1ZGlvTWVkaWEgPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5hdWRpb1xuXG4gICAgICAvLyBmaWxsIGF1ZGlvIG1lZGlhIGluZm9cbiAgICAgIGF1ZGlvTWVkaWEuY29kZWMgPSBhYWNIZWFkZXIuY29kZWNcbiAgICAgIGF1ZGlvTWVkaWEuY2hhbm5lbENvdW50ID0gYWFjSGVhZGVyLmNoYW5uZWxDb3VudFxuICAgICAgYXVkaW9NZWRpYS5zYW1wbGVSYXRlID0gYXVkaW9TYW1wbGVSYXRlXG4gICAgICBhdWRpb01lZGlhLnNhbXBsZVJhdGVJbmRleCA9IGFhY0hlYWRlci5hdWRpb1NhbXBsZVJhdGVJbmRleFxuXG4gICAgICBpZiAodGhpcy5faGFzU2NyaXB0ICYmICF0aGlzLl9oYXNBdWRpb1NlcXVlbmNlKSB7XG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAnYXVkaW8nKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9oYXNTY3JpcHQgJiYgdGhpcy5faGFzQXVkaW9TZXF1ZW5jZSkge1xuICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkFVRElPX01FVEFEQVRBX0NIQU5HRSlcbiAgICAgIH1cbiAgICAgIDtcbiAgICAgIHRoaXMuX2hhc0F1ZGlvU2VxdWVuY2UgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGNodW5rLmRhdGEgPSBjaHVuay5kYXRhLnNsaWNlKDEsIGNodW5rLmRhdGEubGVuZ3RoKVxuICAgICAgdHJhY2suc2FtcGxlcy5wdXNoKGNodW5rKVxuICAgIH1cbiAgICBpZiAoIXZhbGlkYXRlKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignVEFHIGxlbmd0aCBlcnJvciBhdCAnICsgY2h1bmsuZGF0YXNpemUpXG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBlcnJvci5tZXNzYWdlKVxuICAgICAgdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgZXJyb3IubWVzc2FnZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgaGV2Yy9hdmMgdmlkZW8gZGF0YVxuICAgKiBAcGFyYW0gY2h1bmtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZUhldmNEYXRhIChjaHVuaykge1xuICAgIC8vIGhlYWRlclxuICAgIGxldCBpbmZvID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBjaHVuay5mcmFtZVR5cGUgPSAoaW5mbyAmIDB4ZjApID4+PiA0XG4gICAgY2h1bmsuaXNLZXlmcmFtZSA9IGNodW5rLmZyYW1lVHlwZSA9PT0gMVxuICAgIC8vIGxldCB0ZW1wQ29kZWNJRCA9IHRoaXMudHJhY2tzLnZpZGVvVHJhY2suY29kZWNJRFxuICAgIGxldCBjb2RlY0lEID0gaW5mbyAmIDB4MGZcbiAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLmNvZGVjSUQgPSBjb2RlY0lEXG5cbiAgICAvLyBoZXZj5ZKMYXZj55qEaGVhZGVy6Kej5p6Q5pa55byP5LiA5qC3XG4gICAgY2h1bmsuYXZjUGFja2V0VHlwZSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdXG4gICAgY2h1bmsuY3RzID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwgMylcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuXG4gICAgLy8gMTIgZm9yIGhldmMsIDcgZm9yIGF2Y1xuICAgIGlmIChjb2RlY0lEID09PSAxMikge1xuICAgICAgY29uc3QgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gNSlcbiAgICAgIGNodW5rLmRhdGEgPSBkYXRhXG5cbiAgICAgIGlmIChOdW1iZXIucGFyc2VJbnQoY2h1bmsuYXZjUGFja2V0VHlwZSkgIT09IDApIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKHRoaXMuVEFHLCBgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7Y2h1bmsuZGF0YXNpemV9YClcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmFsdSA9IHt9XG4gICAgICAgIGxldCByID0gMFxuICAgICAgICBuYWx1LmN0cyA9IGNodW5rLmN0c1xuICAgICAgICBuYWx1LmR0cyA9IGNodW5rLmR0c1xuICAgICAgICB3aGlsZSAoY2h1bmsuZGF0YS5sZW5ndGggPiByKSB7XG4gICAgICAgICAgbGV0IHNpemVzID0gY2h1bmsuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQociksIDQgKyByKVxuICAgICAgICAgIG5hbHUuc2l6ZSA9IHNpemVzWzNdXG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzJdICogMjU2XG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzFdICogMjU2ICogMjU2XG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzBdICogMjU2ICogMjU2ICogMjU2XG4gICAgICAgICAgciArPSA0XG4gICAgICAgICAgbmFsdS5kYXRhID0gY2h1bmsuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQociksIG5hbHUuc2l6ZSArIHIpXG4gICAgICAgICAgciArPSBuYWx1LnNpemVcbiAgICAgICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChuYWx1KVxuICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKE51bWJlci5wYXJzZUludChjaHVuay5hdmNQYWNrZXRUeXBlKSA9PT0gMCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKSkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsIGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2RlY0lEID09PSA3KSB7XG4gICAgICBsZXQgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gNSlcbiAgICAgIGlmIChkYXRhWzRdID09PSAwICYmIGRhdGFbNV0gPT09IDAgJiYgZGF0YVs2XSA9PT0gMCAmJiBkYXRhWzddID09PSAxKSB7XG4gICAgICAgIGxldCBhdmNjbGVuZ3RoID0gMFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgIGF2Y2NsZW5ndGggPSBhdmNjbGVuZ3RoICogMjU2ICsgZGF0YVtpXVxuICAgICAgICB9XG4gICAgICAgIGF2Y2NsZW5ndGggLT0gNFxuICAgICAgICBkYXRhID0gZGF0YS5zbGljZSg0LCBkYXRhLmxlbmd0aClcbiAgICAgICAgZGF0YVszXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgYXZjY2xlbmd0aCA9IChhdmNjbGVuZ3RoIC0gZGF0YVszXSkgLyAyNTZcbiAgICAgICAgZGF0YVsyXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgYXZjY2xlbmd0aCA9IChhdmNjbGVuZ3RoIC0gZGF0YVsyXSkgLyAyNTZcbiAgICAgICAgZGF0YVsxXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgZGF0YVswXSA9IChhdmNjbGVuZ3RoIC0gZGF0YVsxXSkgLyAyNTZcbiAgICAgIH1cblxuICAgICAgY2h1bmsuZGF0YSA9IGRhdGFcbiAgICAgIC8vIElmIGl0IGlzIEFWQyBzZXF1ZWNlIEhlYWRlci5cbiAgICAgIGlmIChjaHVuay5hdmNQYWNrZXRUeXBlID09PSAwKSB7XG4gICAgICAgIHRoaXMuX2F2Y1NlcXVlbmNlSGVhZGVyUGFyc2VyKGNodW5rLmRhdGEpXG4gICAgICAgIGxldCB2YWxpZGF0ZSA9IHRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKVxuICAgICAgICBpZiAodmFsaWRhdGUpIHtcbiAgICAgICAgICBpZiAodGhpcy5faGFzU2NyaXB0ICYmICF0aGlzLl9oYXNWaWRlb1NlcXVlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ3ZpZGVvJylcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2hhc1NjcmlwdCAmJiB0aGlzLl9oYXNWaWRlb1NlcXVlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLlZJREVPX01FVEFEQVRBX0NIQU5HRSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5faGFzVmlkZW9TZXF1ZW5jZSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKHRoaXMuVEFHLCBgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7Y2h1bmsuZGF0YXNpemV9YClcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmFja3MudmlkZW9UcmFjay5zYW1wbGVzLnB1c2goY2h1bmspXG4gICAgICAgIC8vIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsIGB2aWRlbyBjb2RlaWQgaXMgJHtjb2RlY0lEfWApXG4gICAgICBjaHVuay5kYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSAxKVxuICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2NodW5rLmRhdGFzaXplfWApXG4gICAgICB9XG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChjaHVuaylcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgfVxuICAgIGRlbGV0ZSBjaHVuay50YWdUeXBlXG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgYXZjIG1ldGFkYXRhXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIgKGRhdGEpIHtcbiAgICBsZXQgdHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG5cbiAgICBpZiAoIXRyYWNrKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgaWYgKCF0cmFjay5tZXRhKSB7XG4gICAgICB0cmFjay5tZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKClcbiAgICB9XG4gICAgbGV0IG1ldGEgPSB0cmFjay5tZXRhXG5cbiAgICBtZXRhLmNvbmZpZ3VyYXRpb25WZXJzaW9uID0gZGF0YVswXVxuICAgIG1ldGEuYXZjUHJvZmlsZUluZGljYXRpb24gPSBkYXRhWzFdXG4gICAgbWV0YS5wcm9maWxlQ29tcGF0aWJpbGl0eSA9IGRhdGFbMl1cbiAgICBtZXRhLmF2Y0xldmVsSW5kaWNhdGlvbiA9IGRhdGFbM10gLyAxMFxuICAgIG1ldGEubmFsVW5pdExlbmd0aCA9IChkYXRhWzRdICYgMHgwMykgKyAxXG5cbiAgICBsZXQgbnVtT2ZTcHMgPSBkYXRhWzVdICYgMHgxZlxuICAgIG9mZnNldCA9IDZcbiAgICBsZXQgY29uZmlnID0ge31cblxuICAgIC8vIHBhcnNlIFNQU1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZTcHM7IGkrKykge1xuICAgICAgbGV0IHNpemUgPSBkYXRhW29mZnNldF0gKiAyNTUgKyBkYXRhW29mZnNldCArIDFdXG4gICAgICBvZmZzZXQgKz0gMlxuXG4gICAgICBsZXQgc3BzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHNwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cblxuICAgICAgLy8gY29kZWMgc3RyaW5nXG4gICAgICBsZXQgY29kZWNTdHJpbmcgPSAnYXZjMS4nXG4gICAgICBmb3IgKGxldCBqID0gMTsgaiA8IDQ7IGorKykge1xuICAgICAgICBsZXQgaCA9IHNwc1tqXS50b1N0cmluZygxNilcbiAgICAgICAgaWYgKGgubGVuZ3RoIDwgMikge1xuICAgICAgICAgIGggPSAnMCcgKyBoXG4gICAgICAgIH1cbiAgICAgICAgY29kZWNTdHJpbmcgKz0gaFxuICAgICAgfVxuXG4gICAgICBtZXRhLmNvZGVjID0gY29kZWNTdHJpbmdcblxuICAgICAgb2Zmc2V0ICs9IHNpemVcbiAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YS5zcHMgPSBzcHNcbiAgICAgIGNvbmZpZyA9IFNwc1BhcnNlci5wYXJzZVNQUyhzcHMpXG4gICAgfVxuXG4gICAgbGV0IG51bU9mUHBzID0gZGF0YVtvZmZzZXRdXG5cbiAgICBvZmZzZXQrK1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PZlBwczsgaSsrKSB7XG4gICAgICBsZXQgc2l6ZSA9IGRhdGFbb2Zmc2V0XSAqIDI1NSArIGRhdGFbb2Zmc2V0ICsgMV1cbiAgICAgIG9mZnNldCArPSAyXG4gICAgICBsZXQgcHBzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHBwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSBzaXplXG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLm1ldGEucHBzID0gcHBzXG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihtZXRhLCBTcHNQYXJzZXIudG9WaWRlb01ldGEoY29uZmlnKSlcblxuICAgIC8vIGZpbGwgdmlkZW8gbWVkaWEgaW5mb1xuICAgIGNvbnN0IHZpZGVvTWVkaWEgPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby52aWRlb1xuXG4gICAgdmlkZW9NZWRpYS5jb2RlYyA9IG1ldGEuY29kZWNcbiAgICB2aWRlb01lZGlhLnByb2ZpbGUgPSBtZXRhLnByb2ZpbGVcbiAgICB2aWRlb01lZGlhLmxldmVsID0gbWV0YS5sZXZlbFxuICAgIHZpZGVvTWVkaWEuY2hyb21hRm9ybWF0ID0gbWV0YS5jaHJvbWFGb3JtYXRcbiAgICB2aWRlb01lZGlhLmZyYW1lUmF0ZSA9IG1ldGEuZnJhbWVSYXRlXG4gICAgdmlkZW9NZWRpYS5wYXJSYXRpbyA9IG1ldGEucGFyUmF0aW9cbiAgICB2aWRlb01lZGlhLndpZHRoID0gdmlkZW9NZWRpYS53aWR0aCA9PT0gbWV0YS5wcmVzZW50V2lkdGggPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50V2lkdGhcbiAgICB2aWRlb01lZGlhLmhlaWdodCA9IHZpZGVvTWVkaWEuaGVpZ2h0ID09PSBtZXRhLnByZXNlbnRIZWlnaHQgPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50SGVpZ2h0XG5cbiAgICBtZXRhLmR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gKiBtZXRhLnRpbWVzY2FsZVxuICAgIG1ldGEuYXZjYyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKVxuICAgIG1ldGEuYXZjYy5zZXQoZGF0YSlcbiAgICB0cmFjay5tZXRhID0gbWV0YVxuICB9XG5cbiAgLyoqXG4gICAqIGNob29zZSBhdWRpbyBzYW1wbGUgcmF0ZVxuICAgKiBAcGFyYW0gc2FtcGxpbmdGcmVxdWVuY3lJbmRleFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvU2FtcGxlUmF0ZSAoc2FtcGxpbmdGcmVxdWVuY3lJbmRleCkge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3QgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gc2FtcGxpbmcgZnJlcXVlbmNlXG4gICAqIEBwYXJhbSBpbmZvXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3dpdGNoQXVkaW9TYW1wbGluZ0ZyZXF1ZW5jeSAoaW5mbykge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4ID0gKGluZm8gJiAxMikgPj4+IDJcbiAgICBsZXQgc2FtcGxpbmdGcmVxdWVuY3lMaXN0ID0gWzU1MDAsIDExMDI1LCAyMjA1MCwgNDQxMDAsIDQ4MDAwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gY2hhbm5lbCBjb3VudFxuICAgKiBAcGFyYW0gaW5mb1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvQ2hhbm5lbCAoaW5mbykge1xuICAgIGxldCBzYW1wbGVUcmFja051bUluZGV4ID0gaW5mbyAmIDFcbiAgICBsZXQgc2FtcGxlVHJhY2tOdW1MaXN0ID0gWzEsIDJdXG4gICAgcmV0dXJuIHNhbXBsZVRyYWNrTnVtTGlzdFtzYW1wbGVUcmFja051bUluZGV4XVxuICB9XG5cbiAgLyoqXG4gICAqIGNoZWNrIGRhdGFzaXplIGlzIHZhbGlkIHVzZSA0IEJ5dGUgYWZ0ZXIgY3VycmVudCB0YWdcbiAgICogQHBhcmFtIGRhdGFzaXplXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RhdGFzaXplVmFsaWRhdG9yIChkYXRhc2l6ZSkge1xuICAgIGxldCBkYXRhc2l6ZUNvbmZpcm0gPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludCgwLCA0KVxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpXG4gICAgcmV0dXJuIGRhdGFzaXplQ29uZmlybSA9PT0gZGF0YXNpemUgKyAxMVxuICB9XG5cbiAgZ2V0IGxvYWRlckJ1ZmZlciAoKSB7XG4gICAgaWYgKHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0xPQURFUl9CVUZGRVInKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0xPQURFUl9CVUZGRVInKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBuZXcgRXJyb3IoJ+aJvuS4jeWIsCBsb2FkZXJCdWZmZXIg5a6e5L6LJykpXG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gIH1cblxuICBnZXQgbG9nZ2VyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTE9HR0VSJylcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGbHZEZW11eGVyXG4iLCIvKipcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgyMTYjc2VjdGlvbi00LjNcbiAqL1xuY2xhc3MgTTNVOFBhcnNlciB7XG4gIHN0YXRpYyBwYXJzZSAodGV4dCwgYmFzZXVybCA9ICcnKSB7XG4gICAgbGV0IHJldCA9IHtcbiAgICAgIGR1cmF0aW9uOiAwXG4gICAgfTtcbiAgICBpZiAoIXRleHQgfHwgIXRleHQuc3BsaXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHJlZnMgPSB0ZXh0LnNwbGl0KC9cXHJ8XFxuLyk7XG4gICAgcmVmcyA9IHJlZnMuZmlsdGVyKChyZWYpID0+IHtcbiAgICAgIHJldHVybiByZWY7XG4gICAgfSlcbiAgICBsZXQgcmVmID0gcmVmcy5zaGlmdCgpXG4gICAgaWYgKCFyZWYubWF0Y2goJyNFWFRNM1UnKSkge1xuICAgICAgLy8gVE9ETzpNM1XmoLzlvI/plJnor6/jgIJcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZWYgPSByZWZzLnNoaWZ0KClcbiAgICB3aGlsZSAocmVmKSB7XG4gICAgICBsZXQgcmVmbSA9IHJlZi5tYXRjaCgvIyguKik6KC4qKS8pO1xuICAgICAgaWYgKHJlZm0gJiYgcmVmbS5sZW5ndGggPiAyKSB7XG4gICAgICAgIHN3aXRjaCAocmVmbVsxXSkge1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLVZFUlNJT04nOlxuICAgICAgICAgICAgcmV0LnZlcnNpb24gPSBwYXJzZUludChyZWZtWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLU1FRElBLVNFUVVFTkNFJzpcbiAgICAgICAgICAgIHJldC5zZXF1ZW5jZSA9IHBhcnNlSW50KHJlZm1bMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnRVhULVgtVEFSR0VURFVSQVRJT04nOlxuICAgICAgICAgICAgcmV0LnRhcmdldGR1cmF0aW9uID0gcGFyc2VGbG9hdChyZWZtWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVElORic6XG4gICAgICAgICAgICBNM1U4UGFyc2VyLnBhcnNlRnJhZyhyZWZtLCByZWZzLCByZXQsIGJhc2V1cmwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWYgPSByZWZzLnNoaWZ0KClcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUZyYWcgKHJlZm0sIHJlZnMsIHJldCwgYmFzZXVybCkge1xuICAgIGlmICghcmV0LmZyYWdzKSB7XG4gICAgICByZXQuZnJhZ3MgPSBbXVxuICAgIH1cblxuICAgIGxldCBmcmVnID0ge1xuICAgICAgc3RhcnQ6IHJldC5kdXJhdGlvbixcbiAgICAgIGR1cmF0aW9uOiBwYXJzZUZsb2F0KHJlZm1bMl0pICogMTAwMFxuICAgIH1cblxuICAgIHJldC5kdXJhdGlvbiArPSBmcmVnLmR1cmF0aW9uO1xuICAgIGxldCBuZXh0bGluZSA9IHJlZnMuc2hpZnQoKTtcbiAgICBpZiAobmV4dGxpbmUubWF0Y2goLyMoLiopOiguKikvKSkge1xuICAgICAgbmV4dGxpbmUgPSByZWZzLnNoaWZ0KCk7XG4gICAgfVxuICAgIGlmIChuZXh0bGluZS5sZW5ndGggPiAwICYmIG5leHRsaW5lLmNoYXJBdCgwKSA9PT0gJy8nICYmIGJhc2V1cmwubWF0Y2goLy4qXFwvXFwvLipcXC5cXHcrL2cpKSB7XG4gICAgICBiYXNldXJsID0gYmFzZXVybC5tYXRjaCgvLipcXC9cXC8uKlxcLlxcdysvZylbMF07XG4gICAgfVxuICAgIGlmIChuZXh0bGluZS5tYXRjaCgvLio6XFwvXFwvLiovKSkge1xuICAgICAgZnJlZy51cmwgPSBuZXh0bGluZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJlZy51cmwgPSBiYXNldXJsICsgbmV4dGxpbmU7XG4gICAgfVxuICAgIFxuICAgIHJldC5mcmFncy5wdXNoKGZyZWcpO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlVVJMICh1cmwpIHtcbiAgICBsZXQgYmFzZXVybCA9ICcnO1xuICAgIGxldCB1cmxzID0gdXJsLm1hdGNoKC8oLipcXC8pLipcXC5tM3U4Lyk7XG4gICAgaWYgKHVybHMgJiYgdXJscy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHVybHNbaV0ubWF0Y2goLy4qXFwvJC9nKSAmJiB1cmxzW2ldLmxlbmd0aCA+IGJhc2V1cmwubGVuZ3RoKSB7XG4gICAgICAgICAgYmFzZXVybCA9IHVybHNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJhc2V1cmw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTTNVOFBhcnNlcjtcbiIsImltcG9ydCB7IE5hbHVuaXQgfSBmcm9tICd4Z3BsYXllci1jb2RlYyc7XG5pbXBvcnQgeyBBdWRpb1RyYWNrLCBWaWRlb1RyYWNrIH0gZnJvbSAneGdwbGF5ZXItYnVmZmVyJztcbmltcG9ydCB7XG4gIEF1ZGlvVHJhY2tNZXRhLFxuICBWaWRlb1RyYWNrTWV0YSxcbiAgQXVkaW9UcmFja1NhbXBsZSxcbiAgVmlkZW9UcmFja1NhbXBsZSxcbiAgRVZFTlRTLFxuICBTdHJlYW1cbn0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuXG5jb25zdCBERU1VWF9FVkVOVFMgPSBFVkVOVFMuREVNVVhfRVZFTlRTO1xuY29uc3QgU3RyZWFtVHlwZSA9IHtcbiAgMHgwMTogWyd2aWRlbycsICdNUEVHLTEnXSxcbiAgMHgwMjogWyd2aWRlbycsICdNUEVHLTInXSxcbiAgMHgxYjogWyd2aWRlbycsICdBVkMuSDI2NCddLFxuICAweGVhOiBbJ3ZpZGVvJywgJ1ZDLTEnXSxcbiAgMHgwMzogWydhdWRpbycsICdNUEVHLTEnXSxcbiAgMHgwNDogWydhdWRpbycsICdNUEVHLTInXSxcbiAgMHgwZjogWydhdWRpbycsICdNUEVHLTIuQUFDJ10sXG4gIDB4MTE6IFsnYXVkaW8nLCAnTVBFRy00LkFBQyddLFxuICAweDgwOiBbJ2F1ZGlvJywgJ0xQQ00nXSxcbiAgMHg4MTogWydhdWRpbycsICdBQzMnXSxcbiAgMHgwNjogWydhdWRpbycsICdBQzMnXSxcbiAgMHg4MjogWydhdWRpbycsICdEVFMnXSxcbiAgMHg4MzogWydhdWRpbycsICdEb2xieSBUcnVlSEQnXSxcbiAgMHg4NDogWydhdWRpbycsICdBQzMtUGx1cyddLFxuICAweDg1OiBbJ2F1ZGlvJywgJ0RUUy1IRCddLFxuICAweDg2OiBbJ2F1ZGlvJywgJ0RUUy1NQSddLFxuICAweGExOiBbJ2F1ZGlvJywgJ0FDMy1QbHVzLVNFQyddLFxuICAweGEyOiBbJ2F1ZGlvJywgJ0RUUy1IRC1TRUMnXVxufTtcblxuY2xhc3MgVHNEZW11eGVyIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZ3MpIHtcbiAgICB0aGlzLmNvbmZpZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWdzKTtcbiAgICB0aGlzLmRlbXV4aW5nID0gZmFsc2U7XG4gICAgdGhpcy5wYXQgPSBbXTtcbiAgICB0aGlzLnBtdCA9IFtdO1xuICAgIHRoaXMuX2hhc1ZpZGVvTWV0YSA9IGZhbHNlO1xuICAgIHRoaXMuX2hhc0F1ZGlvTWV0YSA9IGZhbHNlO1xuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuREVNVVhfU1RBUlQsIHRoaXMuZGVtdXguYmluZCh0aGlzKSlcbiAgfVxuXG4gIGRlbXV4ICgpIHtcbiAgICBpZiAodGhpcy5kZW11eGluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IGJ1ZmZlciA9IHRoaXMuaW5wdXRCdWZmZXI7XG4gICAgbGV0IGZyYWdzID0geyBwYXQ6IFtdLCBwbXQ6IFtdIH07XG4gICAgbGV0IHBlc2VzID0ge307XG5cbiAgICAvLyBSZWFkIFRTIHNlZ21lbnRcbiAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCA+PSAxODgpIHtcbiAgICAgIHdoaWxlIChidWZmZXIubGVuZ3RoID49IDEgJiYgYnVmZmVyLmFycmF5WzBdW2J1ZmZlci5vZmZzZXRdICE9PSA3MSkge1xuICAgICAgICBidWZmZXIuc2hpZnQoMSk7XG4gICAgICB9XG4gICAgICBsZXQgYnVmID0gYnVmZmVyLnNoaWZ0KDE4OCk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhidWYpO1xuICAgICAgbGV0IHRzU3RyZWFtID0gbmV3IFN0cmVhbShidWYuYnVmZmVyKTtcbiAgICAgIGxldCB0cyA9IHt9O1xuICAgICAgVHNEZW11eGVyLnJlYWQodHNTdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICBpZiAodHMucGVzKSB7XG4gICAgICAgIGlmICghcGVzZXNbdHMuaGVhZGVyLnBpZF0pIHtcbiAgICAgICAgICBwZXNlc1t0cy5oZWFkZXIucGlkXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHBlc2VzW3RzLmhlYWRlci5waWRdLnB1c2godHMucGVzKTtcbiAgICAgICAgdHMucGVzLkVTLmJ1ZmZlciA9IFt0cy5wZXMuRVMuYnVmZmVyXTtcbiAgICAgIH0gZWxzZSBpZiAocGVzZXNbdHMuaGVhZGVyLnBpZF0pIHtcbiAgICAgICAgcGVzZXNbdHMuaGVhZGVyLnBpZF1bcGVzZXNbdHMuaGVhZGVyLnBpZF0ubGVuZ3RoIC0gMV0uRVMuYnVmZmVyLnB1c2godHMucGF5bG9hZC5zdHJlYW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldCBGcmFtZXMgZGF0YVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXMocGVzZXMpLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZXBlc2VzID0gcGVzZXNbT2JqZWN0LmtleXMocGVzZXMpW2ldXTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZXBlc2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGVwZXNlc1tqXS5pZCA9IE9iamVjdC5rZXlzKHBlc2VzKVtpXTtcbiAgICAgICAgZXBlc2VzW2pdLkVTLmJ1ZmZlciA9IFRzRGVtdXhlci5NZXJnZShlcGVzZXNbal0uRVMuYnVmZmVyKTtcbiAgICAgICAgaWYgKGVwZXNlc1tqXS50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgdGhpcy5wdXNoQXVkaW9TYW1wbGUoZXBlc2VzW2pdKTtcbiAgICAgICAgfSBlbHNlIGlmIChlcGVzZXNbal0udHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgIHRoaXMucHVzaFZpZGVvU2FtcGxlKGVwZXNlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5faGFzQXVkaW9NZXRhKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFLCAnYXVkaW8nKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2hhc1ZpZGVvTWV0YSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSwgJ3ZpZGVvJyk7XG4gICAgfVxuICB9XG5cbiAgcHVzaEF1ZGlvU2FtcGxlIChwZXMpIHtcbiAgICBsZXQgdHJhY2s7XG4gICAgaWYgKCF0aGlzLl90cmFja3MuYXVkaW9UcmFjaykge1xuICAgICAgdGhpcy5fdHJhY2tzLmF1ZGlvVHJhY2sgPSBuZXcgQXVkaW9UcmFjaygpO1xuICAgICAgdHJhY2sgPSB0aGlzLl90cmFja3MuYXVkaW9UcmFjaztcbiAgICAgIHRyYWNrLm1ldGEgPSBuZXcgQXVkaW9UcmFja01ldGEoe1xuICAgICAgICBhdWRpb1NhbXBsZVJhdGU6IHBlcy5FUy5mcmVxdWVuY2UsXG4gICAgICAgIHNhbXBsZVJhdGU6IHBlcy5FUy5mcmVxdWVuY2UsXG4gICAgICAgIGNoYW5uZWxDb3VudDogcGVzLkVTLmNoYW5uZWwsXG4gICAgICAgIGNvZGVjOiAnbXA0YS40MC4nICsgcGVzLkVTLmF1ZGlvT2JqZWN0VHlwZSxcbiAgICAgICAgY29uZmlnOiBwZXMuRVMuYXVkaW9Db25maWcsXG4gICAgICAgIGlkOiAyLFxuICAgICAgICBzYW1wbGVSYXRlSW5kZXg6IHBlcy5FUy5mcmVxdWVuY3lJbmRleFxuICAgICAgfSk7XG4gICAgICB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcigxMDI0IC8gdHJhY2subWV0YS5hdWRpb1NhbXBsZVJhdGUgKiB0cmFjay5tZXRhLnRpbWVzY2FsZSk7XG4gICAgICBpZiAoIXRoaXMuX2hhc0F1ZGlvTWV0YSkge1xuICAgICAgICB0aGlzLl9oYXNBdWRpb01ldGEgPSB0cnVlXG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAnYXVkaW8nKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdHJhY2sgPSB0aGlzLl90cmFja3MuYXVkaW9UcmFjaztcbiAgICB9XG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShwZXMuRVMuYnVmZmVyLmJ1ZmZlci5zbGljZShwZXMuRVMuYnVmZmVyLnBvc2l0aW9uLCBwZXMuRVMuYnVmZmVyLmxlbmd0aCkpO1xuICAgIGxldCBkdHMgPSBwYXJzZUludChwZXMucHRzIC8gOTApO1xuICAgIGxldCBwdHMgPSBwYXJzZUludChwZXMucHRzIC8gOTApO1xuICAgIGxldCBzYW1wbGUgPSBuZXcgQXVkaW9UcmFja1NhbXBsZSh7ZHRzLCBwdHMsIGRhdGF9KTtcbiAgICB0cmFjay5zYW1wbGVzLnB1c2goc2FtcGxlKTtcbiAgfVxuXG4gIHB1c2hWaWRlb1NhbXBsZSAocGVzKSB7XG4gICAgbGV0IG5hbHMgPSBOYWx1bml0LmdldE5hbHVuaXRzKHBlcy5FUy5idWZmZXIpO1xuICAgIGxldCB0cmFjaztcbiAgICBpZiAoIXRoaXMuX3RyYWNrcy52aWRlb1RyYWNrKSB7XG4gICAgICB0aGlzLl90cmFja3MudmlkZW9UcmFjayA9IG5ldyBWaWRlb1RyYWNrKCk7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy52aWRlb1RyYWNrO1xuICAgICAgdHJhY2subWV0YSA9IG5ldyBWaWRlb1RyYWNrTWV0YSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy52aWRlb1RyYWNrO1xuICAgIH1cbiAgICBsZXQgc2FtcGxlTGVuZ3RoID0gMDtcbiAgICBsZXQgc3BzID0gZmFsc2U7XG4gICAgbGV0IHBwcyA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG5hbCA9IG5hbHNbaV07XG4gICAgICBpZiAobmFsLnNwcykge1xuICAgICAgICAvLyBUT0RP77yaVmlkZW9UcmFja+S/oeaBryDlkowgTWV0YSDkv6Hmga9cbiAgICAgICAgaWYgKHRyYWNrLnNwcyAmJiBUc0RlbXV4ZXIuY29tcGFpcmVVaW50OChuYWwuYm9keSwgdHJhY2suc3BzKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3BzID0gbmFsO1xuICAgICAgICB0cmFjay5zcHMgPSBuYWwuYm9keTtcbiAgICAgICAgdHJhY2subWV0YS5jaHJvbWFGb3JtYXQgPSBzcHMuc3BzLmNocm9tYV9mb3JtYXRcbiAgICAgICAgdHJhY2subWV0YS5jb2RlYyA9ICdhdmMxLic7XG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgNDsgaisrKSB7XG4gICAgICAgICAgdmFyIGggPSBzcHMuYm9keVtqXS50b1N0cmluZygxNik7XG4gICAgICAgICAgaWYgKGgubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgaCA9ICcwJyArIGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyYWNrLm1ldGEuY29kZWMgKz0gaDtcbiAgICAgICAgfVxuICAgICAgICB0cmFjay5tZXRhLmNvZGVjSGVpZ2h0ID0gc3BzLnNwcy5jb2RlY19zaXplLmhlaWdodDtcbiAgICAgICAgdHJhY2subWV0YS5jb2RlY1dpZHRoID0gc3BzLnNwcy5jb2RlY19zaXplLndpZHRoO1xuICAgICAgICB0cmFjay5tZXRhLmZyYW1lUmF0ZSA9IHNwcy5zcHMuZnJhbWVfcmF0ZTtcbiAgICAgICAgdHJhY2subWV0YS5pZCA9IDE7XG4gICAgICAgIHRyYWNrLm1ldGEubGV2ZWwgPSBzcHMuc3BzLmxldmVsX3N0cmluZztcbiAgICAgICAgdHJhY2subWV0YS5wcmVzZW50SGVpZ2h0ID0gc3BzLnNwcy5wcmVzZW50X3NpemUuaGVpZ2h0O1xuICAgICAgICB0cmFjay5tZXRhLnByZXNlbnRXaWR0aCA9IHNwcy5zcHMucHJlc2VudF9zaXplLndpZHRoO1xuICAgICAgICB0cmFjay5tZXRhLnByb2ZpbGUgPSBzcHMuc3BzLnByb2ZpbGVfc3RyaW5nO1xuICAgICAgICB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcih0cmFjay5tZXRhLnRpbWVzY2FsZSAqIChzcHMuc3BzLmZyYW1lX3JhdGUuZnBzX2RlbiAvIHNwcy5zcHMuZnJhbWVfcmF0ZS5mcHNfbnVtKSk7XG4gICAgICAgIHRyYWNrLm1ldGEuc2FyUmF0aW8gPSBzcHMuc3BzLnNhcl9yYXRpbyA/IHNwcy5zcHMuc2FyX3JhdGlvIDogc3BzLnNwcy5wYXJfcmF0aW87XG4gICAgICB9IGVsc2UgaWYgKG5hbC5wcHMpIHtcbiAgICAgICAgdHJhY2sucHBzID0gbmFsLmJvZHk7XG4gICAgICAgIHBwcyA9IG5hbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNhbXBsZUxlbmd0aCArPSAoNCArIG5hbC5ib2R5LmJ5dGVMZW5ndGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzcHMgJiYgcHBzKSB7XG4gICAgICB0cmFjay5tZXRhLmF2Y2MgPSBOYWx1bml0LmdldEF2Y2Moc3BzLmJvZHksIHBwcy5ib2R5KTtcbiAgICAgIGlmICghdGhpcy5faGFzVmlkZW9NZXRhKSB7XG4gICAgICAgIHRoaXMuX2hhc1ZpZGVvTWV0YSA9IHRydWVcbiAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoc2FtcGxlTGVuZ3RoKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgaXNLZXlmcmFtZSA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG5hbCA9IG5hbHNbaV07XG4gICAgICBsZXQgbGVuZ3RoID0gbmFsLmJvZHkuYnl0ZUxlbmd0aDtcbiAgICAgIGlmIChuYWwuaWRyKSB7XG4gICAgICAgIGlzS2V5ZnJhbWUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFuYWwucHBzICYmICFuYWwuc3BzKSB7XG4gICAgICAgIGRhdGEuc2V0KG5ldyBVaW50OEFycmF5KFtsZW5ndGggPj4+IDI0ICYgMHhmZixcbiAgICAgICAgICBsZW5ndGggPj4+IDE2ICYgMHhmZixcbiAgICAgICAgICBsZW5ndGggPj4+IDggJiAweGZmLFxuICAgICAgICAgIGxlbmd0aCAmIDB4ZmZcbiAgICAgICAgXSksIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICBkYXRhLnNldChuYWwuYm9keSwgb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IG5ldyBWaWRlb1RyYWNrU2FtcGxlKHtcbiAgICAgIGR0czogcGFyc2VJbnQocGVzLmR0cyAvIDkwKSxcbiAgICAgIHB0czogcGFyc2VJbnQocGVzLnB0cyAvIDkwKSxcbiAgICAgIGN0czogKHBlcy5wdHMgLSBwZXMuZHRzKSAvIDkwLFxuICAgICAgb3JpZ2luRHRzOiBwZXMuZHRzLFxuICAgICAgaXNLZXlmcmFtZSxcbiAgICAgIGRhdGFcbiAgICB9KVxuICAgIHRyYWNrLnNhbXBsZXMucHVzaChzYW1wbGUpO1xuICB9XG5cbiAgZGVzdG9yeSAoKSB7XG4gICAgdGhpcy5vZmYoREVNVVhfRVZFTlRTLkRFTVVYX1NUQVJULCB0aGlzLmRlbXV4KTtcbiAgICB0aGlzLmNvbmZpZ3MgPSB7fTtcbiAgICB0aGlzLmRlbXV4aW5nID0gZmFsc2U7XG4gICAgdGhpcy5wYXQgPSBbXTtcbiAgICB0aGlzLnBtdCA9IFtdO1xuICAgIHRoaXMuX2hhc1ZpZGVvTWV0YSA9IGZhbHNlO1xuICAgIHRoaXMuX2hhc0F1ZGlvTWV0YSA9IGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGNvbXBhaXJlVWludDggKGEsIGIpIHtcbiAgICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHJldCA9IHRydWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cbiAgc3RhdGljIE1lcmdlIChidWZmZXJzKSB7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZW5ndGggKz0gKGJ1ZmZlcnNbaV0ubGVuZ3RoIC0gYnVmZmVyc1tpXS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgYnVmZmVyID0gYnVmZmVyc1tpXTtcbiAgICAgIGRhdGEuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5wb3NpdGlvbiksIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gYnVmZmVyLmxlbmd0aCAtIGJ1ZmZlci5wb3NpdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdHJlYW0oZGF0YS5idWZmZXIpO1xuICB9XG5cbiAgc3RhdGljIHJlYWQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgVHNEZW11eGVyLnJlYWRIZWFkZXIoc3RyZWFtLCB0cyk7XG4gICAgVHNEZW11eGVyLnJlYWRQYXlsb2FkKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICBpZiAodHMuaGVhZGVyLnBhY2tldCA9PT0gJ01FRElBJyAmJiB0cy5oZWFkZXIucGF5bG9hZCA9PT0gMSAmJiAhdHMudW5rbm93blBJRHMpIHtcbiAgICAgIHRzLnBlcyA9IFRzRGVtdXhlci5QRVModHMpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyByZWFkUGF5bG9hZCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgaGVhZGVyID0gdHMuaGVhZGVyXG4gICAgbGV0IHBpZCA9IGhlYWRlci5waWQ7XG4gICAgc3dpdGNoIChwaWQpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgVHNEZW11eGVyLlBBVChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBUc0RlbXV4ZXIuQ0FUKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIFRzRGVtdXhlci5UU0RUKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDB4MWZmZjpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBUT0RPOiBzb21l55qE5YaZ5rOV5LiN5aSq5aW977yM5b6X5pS5XG4gICAgICAgIGlmIChmcmFncy5wYXQuc29tZSgoaXRlbSkgPT4geyByZXR1cm4gaXRlbS5waWQgPT09IHBpZDsgfSkpIHtcbiAgICAgICAgICBUc0RlbXV4ZXIuUE1UKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgc3RzID0gZnJhZ3MucG10ID8gZnJhZ3MucG10LmZpbHRlcigoaXRlbSkgPT4gaXRlbS5waWQgPT09IHBpZCkgOiBbXTtcbiAgICAgICAgICBpZiAoc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIFRzRGVtdXhlci5NZWRpYShzdHJlYW0sIHRzLCBTdHJlYW1UeXBlW3N0c1swXS5zdHJlYW1UeXBlXVswXSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHMudW5rbm93blBJRHMgPSB0cnVlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcmVhZEhlYWRlciAoc3RyZWFtLCB0cykge1xuICAgIGxldCBoZWFkZXIgPSB7fTtcbiAgICBoZWFkZXIuc3luYyA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgaGVhZGVyLmVycm9yID0gbmV4dCA+Pj4gMTU7XG4gICAgaGVhZGVyLnBheWxvYWQgPSBuZXh0ID4+PiAxNCAmIDE7XG4gICAgaGVhZGVyLnByaW9yaXR5ID0gbmV4dCA+Pj4gMTMgJiAxO1xuICAgIGhlYWRlci5waWQgPSBuZXh0ICYgMHgxZmZmO1xuXG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcblxuICAgIGhlYWRlci5zY3JhbWJsaW5nID0gbmV4dCA+PiA2ICYgMHgzOyAvLyDmmK/lkKbliqDlr4bvvIwwMOihqOekuuS4jeWKoOWvhlxuXG4gICAgLyoqXG4gICAgICogMDAgSVNPL0lFQ+acquadpeS9v+eUqOS/neeVmVxuICAgICAqIDAxIOayoeacieiwg+aVtOWtl+aute+8jOS7heWQq+aciTE4NELmnInmlYjlh4DojbdcbiAgICAgKiAwMiDmsqHmnInmnInmlYjlh4DojbfvvIzku4XlkKvmnIkxODNC6LCD5pW05a2X5q61XG4gICAgICogMDMgMH4xODJC6LCD5pW05a2X5q615ZCO5Li65pyJ5pWI5YeA6I23XG4gICAgICovXG4gICAgaGVhZGVyLmFkYXB0YXRpb24gPSBuZXh0ID4+IDQgJiAweDM7XG4gICAgaGVhZGVyLmNvbnRpbnVpdHkgPSBuZXh0ICYgMTU7XG4gICAgaGVhZGVyLnBhY2tldCA9IGhlYWRlci5waWQgPT09IDAgPyAnUEFUJyA6ICdNRURJQSc7XG4gICAgdHMuaGVhZGVyID0gaGVhZGVyO1xuICB9XG5cbiAgc3RhdGljIFBBVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgcmV0ID0ge307XG4gICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgc3RyZWFtLnNraXAobmV4dCk7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQudGFiZWxJRCA9IG5leHQ7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmVycm9yID0gbmV4dCA+Pj4gNztcbiAgICByZXQuemVybyA9IG5leHQgPj4+IDYgJiAxO1xuICAgIHJldC5zZWN0aW9uTGVuZ3RoID0gbmV4dCAmIDB4ZmZmO1xuICAgIHJldC5zdHJlYW1JRCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmN1cnJlbnQgPSBzdHJlYW0ucmVhZFVpbnQ4KCkgJiAxO1xuICAgIHJldC5zZWN0aW9uTnVtYmVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC5sYXN0U2VjdGlvbk51bWJlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgTiA9IChyZXQuc2VjdGlvbkxlbmd0aCAtIDkpIC8gNDtcbiAgICBsZXQgbGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBsZXQgcHJvZ3JhbU51bWJlciA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICBsZXQgcGlkID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgIHByb2dyYW06IHByb2dyYW1OdW1iZXIsXG4gICAgICAgIHBpZCxcbiAgICAgICAgdHlwZTogcHJvZ3JhbU51bWJlciA9PT0gMCA/ICduZXR3b3JrJyA6ICdtYXBQSUQnXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgZnJhZ3MucGF0ID0gZnJhZ3MucGF0LmNvbmNhdChsaXN0KTtcbiAgICB9XG4gICAgcmV0Lmxpc3QgPSBsaXN0O1xuICAgIHJldC5wcm9ncmFtID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQucGlkID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICB0cy5wYXlsb2FkID0gcmV0O1xuICAgIC8vIFRPRE8gQ1JDXG4gIH1cblxuICBzdGF0aWMgUE1UIChzdHJlYW0sIHRzLCBmcmFncykge1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBsZXQgaGVhZGVyID0gdHMuaGVhZGVyO1xuICAgIGhlYWRlci5wYWNrZXQgPSAnUE1UJztcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBzdHJlYW0uc2tpcChuZXh0KTtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC50YWJsZUlEID0gbmV4dDtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQuc2VjdGlvbkxlbmd0aCA9IG5leHQgJiAweGZmZjtcbiAgICByZXQucHJvZ3JhbSA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmN1cnJlbnQgPSBzdHJlYW0ucmVhZFVpbnQ4KCkgJiAxO1xuICAgIHJldC5vcmRlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQubGFzdE9yZGVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC5QQ1JfUElEID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICByZXQucHJvZ3JhbUxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweGZmZjtcbiAgICBsZXQgTiA9IChyZXQuc2VjdGlvbkxlbmd0aCAtIDEzKSAvIDU7XG4gICAgbGV0IGxpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgc3RyZWFtVHlwZTogc3RyZWFtLnJlYWRVaW50OCgpLFxuICAgICAgICBwaWQ6IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweDFmZmYsIC8vIDB4MDdlNSDop4bpopHvvIwweDA3ZTZcbiAgICAgICAgZXM6IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweGZmZlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldC5saXN0ID0gbGlzdDtcbiAgICBpZiAoIXRoaXMucG10KSB7XG4gICAgICB0aGlzLnBtdCA9IFtdO1xuICAgIH1cbiAgICBmcmFncy5wbXQgPSB0aGlzLnBtdC5jb25jYXQobGlzdC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBpZDogaXRlbS5waWQsXG4gICAgICAgIGVzOiBpdGVtLmVzLFxuICAgICAgICBzdHJlYW1UeXBlOiBpdGVtLnN0cmVhbVR5cGUsXG4gICAgICAgIHByb2dyYW06IHJldC5wcm9ncmFtXG4gICAgICB9O1xuICAgIH0pKTtcbiAgICB0cy5wYXlsb2FkID0gcmV0O1xuICB9XG5cbiAgc3RhdGljIE1lZGlhIChzdHJlYW0sIHRzLCB0eXBlKSB7XG4gICAgbGV0IGhlYWRlciA9IHRzLmhlYWRlcjtcbiAgICBsZXQgcGF5bG9hZCA9IHt9O1xuICAgIGhlYWRlci50eXBlID0gdHlwZTtcbiAgICBpZiAoaGVhZGVyLmFkYXB0YXRpb24gPT09IDB4MDMpIHtcbiAgICAgIHBheWxvYWQuYWRhcHRhdGlvbkxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICAgIGlmIChwYXlsb2FkLmFkYXB0YXRpb25MZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICBwYXlsb2FkLmRpc2NvbnRpbnVlID0gbmV4dCA+Pj4gNztcbiAgICAgICAgcGF5bG9hZC5hY2Nlc3MgPSBuZXh0ID4+PiA2ICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5wcmlvcml0eSA9IG5leHQgPj4+IDUgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLlBDUiA9IG5leHQgPj4+IDQgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLk9QQ1IgPSBuZXh0ID4+PiAzICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5zcGxpY2VQb2ludCA9IG5leHQgPj4+IDIgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLnRyYW5zcG9ydFByaXZhdGUgPSBuZXh0ID4+PiAxICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5hZGFwdGF0aW9uRmllbGQgPSBuZXh0ICYgMHgwMTtcbiAgICAgICAgbGV0IF9zdGFydCA9IHN0cmVhbS5wb3NpdGlvbjtcbiAgICAgICAgaWYgKHBheWxvYWQuUENSID09PSAxKSB7XG4gICAgICAgICAgcGF5bG9hZC5wcm9ncmFtQ2xvY2tCYXNlID0gc3RyZWFtLnJlYWRVaW50MzIoKSA8PCAxO1xuICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHBheWxvYWQucHJvZ3JhbUNsb2NrQmFzZSB8PSBuZXh0ID4+PiAxNTtcbiAgICAgICAgICBwYXlsb2FkLnByb2dyYW1DbG9ja0V4dGVuc2lvbiA9IG5leHQgJiAweDFmZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5PUENSID09PSAxKSB7XG4gICAgICAgICAgcGF5bG9hZC5vcmlnaW5Qcm9ncmFtQ2xvY2tCYXNlID0gc3RyZWFtLnJlYWRVaW50MzIoKSA8PCAxO1xuICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHBheWxvYWQub3JpZ2luUHJvZ3JhbUNsb2NrQmFzZSArPSBuZXh0ID4+PiAxNTtcbiAgICAgICAgICBwYXlsb2FkLm9yaWdpblByb2dyYW1DbG9ja0V4dGVuc2lvbiA9IG5leHQgJiAweDFmZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5zcGxpY2VQb2ludCA9PT0gMSkge1xuICAgICAgICAgIHBheWxvYWQuc3BsaWNlQ291bnRkb3duID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXlsb2FkLnRyYW5zcG9ydFByaXZhdGUgPT09IDEpIHtcbiAgICAgICAgICBsZXQgbGVuZ3RoID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICAgIGxldCB0cmFuc3BvcnRQcml2YXRlRGF0YSA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydFByaXZhdGVEYXRhLnB1c2goc3RyZWFtLnJlYWRVaW50OCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQuYWRhcHRhdGlvbkZpZWxkID09PSAxKSB7XG4gICAgICAgICAgbGV0IGxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDgoKVxuICAgICAgICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpXG4gICAgICAgICAgbGV0IHN0YXJ0ID0gc3RyZWFtLnBvc2l0aW9uO1xuICAgICAgICAgIGxldCBsdHcgPSBuZXh0ID4+PiA3O1xuICAgICAgICAgIGxldCBwaWVjZXdpc2UgPSBuZXh0ID4+PiA2ICYgMHgxO1xuICAgICAgICAgIGxldCBzZWFtbGVzcyA9IG5leHQgPj4+IDUgJiAweDE7XG4gICAgICAgICAgaWYgKGx0dyA9PT0gMSkge1xuICAgICAgICAgICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICAgICAgICBwYXlsb2FkLmx0d1ZhbGlkID0gbmV4dCA+Pj4gMTU7XG4gICAgICAgICAgICBwYXlsb2FkLmx0d09mZnNldCA9IG5leHQgJiAweGVmZmY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwaWVjZXdpc2UgPT09IDEpIHtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQyNCgpO1xuICAgICAgICAgICAgcGF5bG9hZC5waWVjZXdpc2VSYXRlID0gbmV4dCAmIDB4M2ZmZmZmO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2VhbWxlc3MgPT09IDEpIHtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZEludDgoKTtcbiAgICAgICAgICAgIHBheWxvYWQuc3BsaWNlVHlwZSA9IG5leHQgPj4+IDQ7XG4gICAgICAgICAgICBwYXlsb2FkLmR0c05leHRBVTEgPSBuZXh0ID4+PiAxICYgMHg3O1xuICAgICAgICAgICAgcGF5bG9hZC5tYXJrZXIxID0gbmV4dCAmIDB4MTtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgICAgcGF5bG9hZC5kdHNOZXh0QVUyID0gbmV4dCA+Pj4gMTtcbiAgICAgICAgICAgIHBheWxvYWQubWFya2VyMiA9IG5leHQgJiAweDE7XG4gICAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICAgIHBheWxvYWQuZHRzTmV4dEFVMyA9IG5leHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmVhbS5za2lwKGxlbmd0aCAtIDEgLSAoc3RyZWFtLnBvc2l0aW9uIC0gc3RhcnQpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGFzdFN0dWZmaW5nID0gcGF5bG9hZC5hZGFwdGF0aW9uTGVuZ3RoIC0gMSAtIChzdHJlYW0ucG9zaXRpb24gLSBfc3RhcnQpO1xuICAgICAgICBzdHJlYW0uc2tpcChsYXN0U3R1ZmZpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgICBwYXlsb2FkLnN0cmVhbSA9IG5ldyBTdHJlYW0oc3RyZWFtLmJ1ZmZlci5zbGljZShzdHJlYW0ucG9zaXRpb24pKTtcbiAgICB0cy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgfVxuXG4gIHN0YXRpYyBQRVMgKHRzKSB7XG4gICAgbGV0IHJldCA9IHt9O1xuICAgIGxldCBidWZmZXIgPSB0cy5wYXlsb2FkLnN0cmVhbTtcbiAgICBcbiAgICBsZXQgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgaWYgKG5leHQgIT09IDEpIHtcbiAgICAgIHJldC5FUyA9IHt9O1xuICAgICAgcmV0LkVTLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHN0cmVhbUlEID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgaWYgKHN0cmVhbUlEID49IDB4ZTAgJiYgc3RyZWFtSUQgPD0gMHhlZikge1xuICAgICAgICByZXQudHlwZSA9ICd2aWRlbyc7XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtSUQgPj0gMHhjMCAmJiBzdHJlYW1JRCA8PSAweGRmKSB7XG4gICAgICAgIHJldC50eXBlID0gJ2F1ZGlvJztcbiAgICAgIH1cbiAgICAgIGxldCBwYWNrZXRMZW5ndGggPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgcmV0LnBhY2tldExlbmd0aCA9IHBhY2tldExlbmd0aDtcbiAgICAgIGlmIChyZXQudHlwZSA9PT0gJ3ZpZGVvJyB8fCByZXQudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICBsZXQgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgbGV0IGZpcnN0ID0gbmV4dCA+Pj4gNjtcbiAgICAgICAgaWYgKGZpcnN0ICE9PSAweDAyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlcnJvciB3aGVuIHBhcnNlIHBlcyBoZWFkZXInKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICByZXQucHRzRFRTRmxhZyA9IG5leHQgPj4+IDY7XG4gICAgICAgIHJldC5lc2NyRmxhZyA9IG5leHQgPj4+IDUgJiAweDAxO1xuICAgICAgICByZXQuZXNSYXRlRmxhZyA9IG5leHQgPj4+IDQgJiAweDAxO1xuICAgICAgICByZXQuZHNtRmxhZyA9IG5leHQgPj4+IDMgJiAweDAxO1xuICAgICAgICByZXQuYWRkaXRpb25hbEZsYWcgPSBuZXh0ID4+PiAyICYgMHgwMTtcbiAgICAgICAgcmV0LmNyY0ZsYWcgPSBuZXh0ID4+PiAxICYgMHgwMTtcbiAgICAgICAgcmV0LmV4dGVuc2lvbkZsYWcgPSBuZXh0ICYgMHgwMTtcbiAgICAgICAgcmV0LnBlc0hlYWRlckxlbmd0aCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgbGV0IE4xID0gcmV0LnBlc0hlYWRlckxlbmd0aDtcblxuICAgICAgICBpZiAocmV0LnB0c0RUU0ZsYWcgPT09IDIpIHtcbiAgICAgICAgICBsZXQgcHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBwdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LnB0cyA9IChwdHNbMF0gPDwgMzAgfCBwdHNbMV0gPDwgMTUgfCBwdHNbMl0pO1xuICAgICAgICAgIE4xIC09IDU7XG4gICAgICAgICAgLy8g6KeG6aKR5aaC5p6c5rKh5pyJZHRz55SocHRzXG4gICAgICAgICAgaWYgKHJldC50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICByZXQuZHRzID0gcmV0LnB0cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5wdHNEVFNGbGFnID09PSAzKSB7XG4gICAgICAgICAgbGV0IHB0cyA9IFtdO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQ4KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSAmIDB4MDcpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIHJldC5wdHMgPSAocHRzWzBdIDw8IDMwIHwgcHRzWzFdIDw8IDE1IHwgcHRzWzJdKTtcbiAgICAgICAgICBsZXQgZHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBkdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LmR0cyA9IChkdHNbMF0gPDwgMzAgfCBkdHNbMV0gPDwgMTUgfCBkdHNbMl0pO1xuICAgICAgICAgIE4xIC09IDEwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZXNjckZsYWcgPT09IDEpIHtcbiAgICAgICAgICBsZXQgZXNjciA9IFtdXG4gICAgICAgICAgbGV0IGV4ID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCA+Pj4gMyAmIDB4MDcpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZXNjci5wdXNoKG5leHQgPj4+IDEzKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCAmIDB4MDMpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ID4+PiAxMyk7XG4gICAgICAgICAgZXgucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBleC5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIHJldC5lc2NyID0gKGVzY3JbMF0gPDwgMzAgfCBlc2NyWzFdIDw8IDI4IHwgZXNjclsyXSA8PCAxNSB8IGVzY3JbM10gPDwgMTMgfCBlc2NyWzRdKSAqIDMwMCArIChleFswXSA8PCA3IHwgZXhbMV0pO1xuICAgICAgICAgIE4xIC09IDY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5lc1JhdGVGbGFnID09PSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgICAgICAgcmV0LmVzUmF0ZSA9IG5leHQgPj4+IDEgJiAweDNmZmZmZjtcbiAgICAgICAgICBOMSAtPSAzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZHNtRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnQgRFNNX3RyaWNrX21vZGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmFkZGl0aW9uYWxGbGFnID09PSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICByZXQuYWRkaXRpb25hbENvcHlJbmZvID0gbmV4dCAmIDB4N2Y7XG4gICAgICAgICAgTjEgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmNyY0ZsYWcgPT09IDEpIHtcbiAgICAgICAgICByZXQucGVzQ1JDID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBOMSAtPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZXh0ZW5zaW9uRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnQgZXh0ZW5zaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE4xID4gMCkge1xuICAgICAgICAgIGJ1ZmZlci5za2lwKE4xKTtcbiAgICAgICAgfVxuICAgICAgICByZXQuRVMgPSBUc0RlbXV4ZXIuRVMoYnVmZmVyLCByZXQudHlwZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Zvcm1hdCBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgRVMgKGJ1ZmZlciwgdHlwZSkge1xuICAgIGxldCBuZXh0O1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDMyKCk7XG4gICAgICBpZiAobmV4dCAhPT0gMSkge1xuICAgICAgICBidWZmZXIuYmFjayg0KTtcbiAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgICAgIGlmIChuZXh0ICE9PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoMjY0IG5hbCBoZWFkZXIgcGFyc2UgZmFpbGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1ZmZlci5za2lwKDIpOy8vIDA5IEYwXG4gICAgICAvLyBUT0RPIHJlYWRuYWx1XG4gICAgICByZXQuYnVmZmVyID0gYnVmZmVyO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAvLyBhZHRz55qE5ZCM5q2l5a2X6IqC77yMMTLkvY1cbiAgICAgIGlmIChuZXh0ID4+PiA0ICE9PSAweGZmZikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FhYyBFUyBwYXJzZSBFcnJvcicpO1xuICAgICAgfVxuICAgICAgY29uc3QgZnEgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXTtcbiAgICAgIHJldC5pZCA9IChuZXh0ID4+PiAzICYgMHgwMSkgPT09IDAgPyAnTVBFRy00JyA6ICdNUEVHLTInO1xuICAgICAgcmV0LmxheWVyID0gbmV4dCA+Pj4gMSAmIDB4MDM7XG4gICAgICByZXQuYWJzZW50ID0gbmV4dCAmIDB4MDE7XG4gICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSAobmV4dCA+Pj4gMTQgJiAweDAzKSArIDE7XG4gICAgICByZXQucHJvZmlsZSA9IHJldC5hdWRpb09iamVjdFR5cGUgLSAxO1xuICAgICAgcmV0LmZyZXF1ZW5jeUluZGV4ID0gbmV4dCA+Pj4gMTAgJiAweDBmO1xuICAgICAgcmV0LmZyZXF1ZW5jZSA9IGZxW3JldC5mcmVxdWVuY3lJbmRleF07XG4gICAgICByZXQuY2hhbm5lbCA9IG5leHQgPj4+IDYgJiAweDA3O1xuICAgICAgcmV0LmZyYW1lTGVuZ3RoID0gKG5leHQgJiAweDAzKSA8PCAxMSB8IChidWZmZXIucmVhZFVpbnQxNigpID4+PiA1KTtcbiAgICAgIHJldC5hdWRpb0NvbmZpZyA9IFRzRGVtdXhlci5nZXRBdWRpb0NvbmZpZyhyZXQuYXVkaW9PYmplY3RUeXBlLCByZXQuY2hhbm5lbCwgcmV0LmZyZXF1ZW5jeUluZGV4KTtcbiAgICAgIGJ1ZmZlci5za2lwKDEpO1xuICAgICAgcmV0LmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFUyAke3R5cGV9IGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgc3RhdGljIFRTRFQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgLy8gVE9ET1xuICAgIHRzLnBheWxvYWQgPSB7fTtcbiAgfVxuXG4gIHN0YXRpYyBDQVQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgbGV0IHJldCA9IHt9XG4gICAgcmV0LnRhYmxlSUQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIHJldC5zZWN0aW9uSW5kaWNhdG9yID0gbmV4dCA+Pj4gNztcbiAgICByZXQuc2VjdGlvbkxlbmd0aCA9IG5leHQgJiAweDBmZmY7XG4gICAgc3RyZWFtLnNraXAoMik7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQudmVyc2lvbiA9IG5leHQgPj4+IDM7XG4gICAgcmV0LmN1cnJlbnROZXh0SW5kaWNhdG9yID0gbmV4dCAmIDB4MDE7XG4gICAgcmV0LnNlY3Rpb25OdW1iZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgcmV0Lmxhc3RTZWN0aW9uTnVtYmVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIGxldCBOID0gKHRoaXMuc2VjdGlvbkxlbmd0aCAtIDkpIC8gNDtcbiAgICBsZXQgbGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBsaXN0LnB1c2goe30pO1xuICAgIH1cbiAgICByZXQuY3JjMzIgPSBzdHJlYW0ucmVhZFVpbnQzMigpO1xuICAgIHRzLnBheWxvYWQgPSByZXQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0QXVkaW9Db25maWcgKGF1ZGlvT2JqZWN0VHlwZSwgY2hhbm5lbCwgc2FtcGxlSW5kZXgpIHtcbiAgICBsZXQgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpXG4gICAgbGV0IGNvbmZpZztcbiAgICBsZXQgZXh0ZW5zaW9uU2FtcGxlSW5kZXg7XG4gICAgaWYgKC9maXJlZm94L2kudGVzdCh1c2VyQWdlbnQpKSB7XG4gICAgICBpZiAoc2FtcGxlSW5kZXggPj0gNikge1xuICAgICAgICBhdWRpb09iamVjdFR5cGUgPSA1O1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gc2FtcGxlSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXVkaW9PYmplY3RUeXBlID0gMjtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGVJbmRleCA9IHNhbXBsZUluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoJ2FuZHJvaWQnKSAhPT0gLTEpIHtcbiAgICAgIGF1ZGlvT2JqZWN0VHlwZSA9IDI7XG4gICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICBleHRlbnNpb25TYW1wbGVJbmRleCA9IHNhbXBsZUluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBhdWRpb09iamVjdFR5cGUgPSA1O1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuICAgICAgaWYgKHNhbXBsZUluZGV4ID49IDYpIHtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxlSW5kZXggPSBzYW1wbGVJbmRleCAtIDM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY2hhbm5lbCA9PT0gMSkge1xuICAgICAgICAgIGF1ZGlvT2JqZWN0VHlwZSA9IDI7XG4gICAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICB9XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gc2FtcGxlSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uZmlnWzBdID0gYXVkaW9PYmplY3RUeXBlIDw8IDM7XG4gICAgY29uZmlnWzBdIHw9IChzYW1wbGVJbmRleCAmIDB4MGUpID4+IDE7XG4gICAgY29uZmlnWzFdID0gKHNhbXBsZUluZGV4ICYgMHgwMSkgPDwgNztcbiAgICBjb25maWdbMV0gfD0gY2hhbm5lbCA8PCAzO1xuICAgIGlmIChhdWRpb09iamVjdFR5cGUgPT09IDUpIHtcbiAgICAgIGNvbmZpZ1sxXSB8PSAoZXh0ZW5zaW9uU2FtcGxlSW5kZXggJiAweDBlKSA+PiAxO1xuICAgICAgY29uZmlnWzJdID0gKGV4dGVuc2lvblNhbXBsZUluZGV4ICYgMHgwMSkgPDwgNztcbiAgICAgIGNvbmZpZ1syXSB8PSAyIDw8IDI7XG4gICAgICBjb25maWdbM10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgZ2V0IGlucHV0QnVmZmVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmNvbmZpZ3MuaW5wdXRidWZmZXIpO1xuICB9XG5cbiAgZ2V0IF90cmFja3MgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUc0RlbXV4ZXI7XG4iLCJjbGFzcyBQbGF5bGlzdCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5fYmFzZVVSTCA9ICcnO1xuICAgIHRoaXMuX2xpc3QgPSB7fTtcbiAgICB0aGlzLl90cyA9IHt9O1xuICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgdGhpcy5zZXF1ZW5jZSA9IC0xO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZnJhZ0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbGFzdGdldCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9hdWRvY2xlYXIgPSBjb25maWdzLmF1dG9jbGVhciB8fCBmYWxzZTtcbiAgfVxuXG4gIGdldCBsaXN0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGlzdDtcbiAgfVxuXG4gIHNldCBiYXNlVVJMIChiYXNlVVJMKSB7XG4gICAgaWYgKHRoaXMuYmFzZVVSTCAhPT0gYmFzZVVSTCkge1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgdGhpcy5fYmFzZVVSTCA9IGJhc2VVUkw7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGJhc2VVUkwgKCkge1xuICAgIHJldHVybiB0aGlzLl9iYXNlVVJMO1xuICB9XG5cbiAgcHVzaCAodHMsIGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLl90c1t0c10pIHtcbiAgICAgIHRoaXMuX3RzW3RzXSA9IHtkdXJhdGlvbjogZHVyYXRpb24sIGRvd25sb2FkZWQ6IGZhbHNlLCBkb3dubG9hZGluZzogZmFsc2UsIHN0YXJ0OiB0aGlzLmR1cmF0aW9ufTtcbiAgICAgIHRoaXMuX2xpc3RbdGhpcy5kdXJhdGlvbl0gPSB0cztcbiAgICAgIHRoaXMuZHVyYXRpb24gKz0gZHVyYXRpb247XG4gICAgICB0aGlzLmZyYWdMZW5ndGggKz0gMTtcbiAgICB9XG4gIH1cblxuICBkZWxldGVGcmFnICh1cmwpIHtcbiAgICBpZiAodGhpcy5fdHNbdXJsXSkge1xuICAgICAgaWYgKHRoaXMuX3RzW3VybF0uc3RhcnQgPiB0aGlzLl9sYXN0Z2V0LnRpbWUpIHtcbiAgICAgICAgdGhpcy5fbGFzdGdldCA9IHtcbiAgICAgICAgICBkdXJhdGlvbjogdGhpcy5fdHNbdXJsXS5kdXJhdGlvbixcbiAgICAgICAgICB0aW1lOiB0aGlzLl90c1t1cmxdLnN0YXJ0LFxuICAgICAgICAgIGRvd25sb2FkZWQ6IGZhbHNlLFxuICAgICAgICAgIGRvd25sb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICB1cmw6IHVybFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWxldGUgdGhpcy5fbGlzdFt0aGlzLl90c1t1cmxdLnN0YXJ0XTtcbiAgICAgIGRlbGV0ZSB0aGlzLl90c1t1cmxdO1xuICAgICAgdGhpcy5mcmFnTGVuZ3RoIC09IDE7XG4gICAgfVxuICB9XG5cbiAgcHVzaE0zVTggKGRhdGEsIGRlbGV0ZXByZSkge1xuICAgIC8vIOW4uOinhOS/oeaBr+abv+aNolxuICAgIGlmICghZGF0YSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnZlcnNpb24gPSBkYXRhLnZlcnNpb247XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IGRhdGEudGFyZ2V0ZHVyYXRpb247XG5cbiAgICAvLyDmlrDliIbniYfkv6Hmga9cbiAgICBpZiAoZGF0YS5zZXF1ZW5jZSA+IHRoaXMuc2VxdWVuY2UpIHtcbiAgICAgIHRoaXMuc2VxdWVuY2UgPSBkYXRhLnNlcXVlbmNlO1xuICAgICAgbGV0IG5ld2ZyYWdsaXN0ID0gW11cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5mcmFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZnJhZyA9IGRhdGEuZnJhZ3NbaV07XG4gICAgICAgIGlmICghdGhpcy5fdHNbZnJhZy51cmxdKSB7XG4gICAgICAgICAgbmV3ZnJhZ2xpc3QucHVzaChmcmFnLnVybClcbiAgICAgICAgICB0aGlzLnB1c2goZnJhZy51cmwsIGZyYWcuZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGVsZXRlcHJlKSB7XG4gICAgICAgIGxldCB0c2xpc3QgPSB0aGlzLmdldFRzTGlzdCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRzbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChuZXdmcmFnbGlzdC5pbmRleE9mKHRzbGlzdFtpXSkgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZUZyYWcodHNsaXN0W2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRUc0xpc3QgKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl90cyk7XG4gIH1cblxuICBkb3dubG9hZGVkICh0c25hbWUsIGlzbG9hZGVkKSB7XG4gICAgbGV0IHRzID0gdGhpcy5fdHNbdHNuYW1lXTtcbiAgICBpZiAodHMpIHtcbiAgICAgIHRzLmRvd25sb2FkZWQgPSBpc2xvYWRlZFxuICAgIH1cbiAgfVxuXG4gIGRvd25sb2FkaW5nICh0c25hbWUsIGxvYWRpbmcpIHtcbiAgICBsZXQgdHMgPSB0aGlzLl90c1t0c25hbWVdO1xuICAgIGlmICh0cykge1xuICAgICAgdHMuZG93bmxvYWRpbmcgPSBsb2FkaW5nXG4gICAgfVxuICB9XG5cbiAgZ2V0VHNCeU5hbWUgKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fdHNbbmFtZV07XG4gIH1cblxuICBnZXRUcyAodGltZSkge1xuICAgIGxldCB0aW1lbGlzdCA9IE9iamVjdC5rZXlzKHRoaXMuX2xpc3QpO1xuICAgIGxldCB0cztcblxuICAgIGlmICh0aW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLl9sYXN0Z2V0KSB7XG4gICAgICAgIHRpbWUgPSB0aGlzLl9sYXN0Z2V0LnRpbWUgKyB0aGlzLl9sYXN0Z2V0LmR1cmF0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaXN0Lmxlbmd0aCA8IDEgfHwgdGltZSA+PSB0aGlzLmR1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aW1lbGlzdC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChhKSAtIHBhcnNlRmxvYXQoYilcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbWVsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGltZSA+PSBwYXJzZUludCh0aW1lbGlzdFtpXSkpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMuX2xpc3RbdGltZWxpc3RbaV1dO1xuICAgICAgICBsZXQgZG93bmxvYWRlZCA9IHRoaXMuX3RzW3VybF0uZG93bmxvYWRlZDtcbiAgICAgICAgbGV0IGRvd25sb2FkaW5nID0gdGhpcy5fdHNbdXJsXS5kb3dubG9hZGluZztcbiAgICAgICAgdHMgPSB7dXJsLCBkb3dubG9hZGVkLCBkb3dubG9hZGluZywgdGltZTogcGFyc2VJbnQodGltZWxpc3RbaV0pLCBkdXJhdGlvbjogcGFyc2VJbnQodGhpcy5fdHNbdXJsXS5kdXJhdGlvbil9O1xuICAgICAgICBpZiAodGhpcy5hdXRvY2xlYXIpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fdHNbdGhpcy5fbGFzdGdldC51cmxdO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXN0W3RoaXMuX2xhc3RnZXQudGltZV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFzdGdldCA9IHRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cztcbiAgfVxuXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLl9iYXNlVVJMID0gJyc7XG4gICAgdGhpcy5fbGlzdCA9IHt9O1xuICAgIHRoaXMuX3RzID0ge307XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICB0aGlzLnNlcXVlbmNlID0gLTE7XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gIH1cblxuICBjbGVhckRvd25sb2FkZWQgKCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gT2JqZWN0LmtleXModGhpcy5fdHMpLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGV0IHRzID0gdGhpcy5fdHNbT2JqZWN0LmtleXModGhpcy5fdHMpW2ldXTtcbiAgICAgIHRzLmRvd25sb2FkZWQgPSBmYWxzZTtcbiAgICAgIHRzLmRvd25sb2FkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fYmFzZVVSTCA9ICcnO1xuICAgIHRoaXMuX2xpc3QgPSB7fTtcbiAgICB0aGlzLl90cyA9IHt9O1xuICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgdGhpcy5zZXF1ZW5jZSA9IC0xO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZnJhZ0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbGFzdGdldCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9hdWRvY2xlYXIgPSBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGF5bGlzdDtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBGZXRjaExvYWRlcjogcmVxdWlyZSgnLi9zcmMvZmV0Y2gtbG9hZGVyJykuZGVmYXVsdFxufTtcbiIsImltcG9ydCB7IEVWRU5UUyB9IGZyb20gJ3hncGxheWVyLXV0aWxzJztcblxuY29uc3QgTE9BREVSX0VWRU5UUyA9IEVWRU5UUy5MT0FERVJfRVZFTlRTO1xuY29uc3QgUkVBRF9TVFJFQU0gPSAwO1xuY29uc3QgUkVBRF9URVhUID0gMTtcbmNvbnN0IFJFQURfSlNPTiA9IDI7XG5jb25zdCBSRUFEX0JVRkZFUiA9IDM7XG5jbGFzcyBGZXRjaExvYWRlciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5jb25maWdzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlncyk7XG4gICAgdGhpcy51cmwgPSBudWxsXG4gICAgdGhpcy5zdGF0dXMgPSAwXG4gICAgdGhpcy5lcnJvciA9IG51bGxcbiAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX2NhbmNlbGVkID0gZmFsc2U7XG4gICAgdGhpcy5yZWFkdHlwZSA9IHRoaXMuY29uZmlncy5yZWFkdHlwZTtcbiAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuY29uZmlncy5idWZmZXIgfHwgJ0xPQURFUl9CVUZGRVInO1xuICAgIHRoaXMuX2xvYWRlclRhc2tObyA9IDA7XG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTEFERVJfU1RBUlQsIHRoaXMubG9hZC5iaW5kKHRoaXMpKVxuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ2xvYWRlcidcbiAgfVxuXG4gIGxvYWQgKHVybCwgb3B0cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy5fY2FuY2VsZWQgPSBmYWxzZTtcblxuICAgIC8vIFRPRE86IEFkZCBSYW5nZXNcbiAgICBsZXQgcGFyYW1zID0gdGhpcy5nZXRQYXJhbXMob3B0cylcbiAgICBfdGhpcy5sb2FkaW5nID0gdHJ1ZVxuICAgIHJldHVybiBmZXRjaCh0aGlzLnVybCwgcGFyYW1zKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIF90aGlzLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1c1xuICAgICAgICByZXR1cm4gX3RoaXMuX29uRmV0Y2hSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICB9XG4gICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCBfdGhpcywgcmVzcG9uc2UpO1xuICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgIHtcbiAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfRVJST1IsIF90aGlzLCBlcnJvcik7XG4gICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IubWVzc2FnZSlcbiAgICB9KVxuICB9XG5cbiAgX29uRmV0Y2hSZXNwb25zZSAocmVzcG9uc2UpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMuYnVmZmVyKTtcbiAgICB0aGlzLl9sb2FkZXJUYXNrTm8rKztcbiAgICBsZXQgdGFza25vID0gdGhpcy5fbG9hZGVyVGFza05vO1xuICAgIGlmIChyZXNwb25zZS5vayA9PT0gdHJ1ZSkge1xuICAgICAgc3dpdGNoICh0aGlzLnJlYWR0eXBlKSB7XG4gICAgICAgIGNhc2UgUkVBRF9KU09OOlxuICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2NhbmNlbGVkKSB7XG4gICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUkVBRF9URVhUOlxuICAgICAgICAgIHJlc3BvbnNlLnRleHQoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2NhbmNlbGVkKSB7XG4gICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUkVBRF9CVUZGRVI6XG4gICAgICAgICAgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2NhbmNlbGVkKSB7XG4gICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChuZXcgVWludDhBcnJheShkYXRhKSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBkYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJFQURfU1RSRUFNOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB0aGlzLl9vblJlYWRlcihyZXNwb25zZS5ib2R5LmdldFJlYWRlcigpLCB0YXNrbm8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9vblJlYWRlciAocmVhZGVyLCB0YXNrbm8pIHtcbiAgICBsZXQgYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmJ1ZmZlcik7XG5cbiAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgdGhpcy5fcmVhZGVyLmNhbmNlbCgpO1xuICAgIH1cblxuICAgIHRoaXMuX3JlYWRlciA9IHJlYWRlclxuICAgIGlmICh0aGlzLmxvYWRpbmcgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzXG4gICAgLy8gcmVhZGVyIHJlYWQgZnVuY3Rpb24gcmV0dXJucyBhIFByb21pc2UuIGdldCBkYXRhIHdoZW4gY2FsbGJhY2sgYW5kIGhhcyB2YWx1ZS5kb25lIHdoZW4gZGlzY29ubmVjdGVkLlxuICAgIC8vIHJlYWTmlrnms5Xov5Tlm57kuIDkuKpQcm9taXNlLiDlm57osIPkuK3lj6/ku6Xojrflj5bliLDmlbDmja7jgILlvZN2YWx1ZS5kb25l5a2Y5Zyo5pe277yM6K+05piO6ZO+5o6l5pat5byA44CCXG4gICAgdGhpcy5fcmVhZGVyICYmIHRoaXMuX3JlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICBpZiAodmFsLmRvbmUpIHtcbiAgICAgICAgLy8gVE9ETzog5a6M5oiQ5aSE55CGXG4gICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICBfdGhpcy5zdGF0dXMgPSAwO1xuICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuX2NhbmNlbGVkKSB7XG4gICAgICAgIF90aGlzLl9yZWFkZXIuY2FuY2VsKClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnVmZmVyLnB1c2godmFsLnZhbHVlKVxuICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9EQVRBTE9BREVELCBidWZmZXIpXG4gICAgICByZXR1cm4gX3RoaXMuX29uUmVhZGVyKHJlYWRlciwgdGFza25vKVxuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9FUlJPUiwgX3RoaXMsIGVycm9yKTtcbiAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICB9KVxuICB9XG5cbiAgZ2V0UGFyYW1zIChvcHRzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRzKVxuICAgIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuXG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgbW9kZTogJ2NvcnMnLFxuICAgICAgY2FjaGU6ICdkZWZhdWx0J1xuICAgIH1cblxuICAgIC8vIGFkZCBjdXN0bW9yIGhlYWRlcnNcbiAgICAvLyDmt7vliqDoh6rlrprkuYnlpLRcbiAgICBpZiAodHlwZW9mIHRoaXMuY29uZmlncy5oZWFkZXJzID09PSAnb2JqZWN0Jykge1xuICAgICAgbGV0IGNvbmZpZ0hlYWRlcnMgPSB0aGlzLmNvbmZpZ3MuaGVhZGVyc1xuICAgICAgZm9yIChsZXQga2V5IGluIGNvbmZpZ0hlYWRlcnMpIHtcbiAgICAgICAgaWYgKGNvbmZpZ0hlYWRlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgY29uZmlnSGVhZGVyc1trZXldKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmhlYWRlcnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBsZXQgb3B0SGVhZGVycyA9IG9wdGlvbnMuaGVhZGVyc1xuICAgICAgZm9yIChsZXQga2V5IGluIG9wdEhlYWRlcnMpIHtcbiAgICAgICAgaWYgKG9wdEhlYWRlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgb3B0SGVhZGVyc1trZXldKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY29ycyA9PT0gZmFsc2UpIHtcbiAgICAgIHBhcmFtcy5tb2RlID0gJ3NhbWUtb3JpZ2luJ1xuICAgIH1cblxuICAgIC8vIHdpdGhDcmVkZW50aWFscyBpcyBkaXNhYmxlZCBieSBkZWZhdWx0XG4gICAgLy8gd2l0aENyZWRlbnRpYWxzIOWcqOm7mOiupOaDheWGteS4i+S4jeiiq+S9v+eUqOOAglxuICAgIGlmIChvcHRpb25zLndpdGhDcmVkZW50aWFscykge1xuICAgICAgcGFyYW1zLmNyZWRlbnRpYWxzID0gJ2luY2x1ZGUnXG4gICAgfVxuXG4gICAgLy8gVE9ETzogQWRkIHJhbmdlcztcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgY2FuY2VsICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGVyKSB7XG4gICAgICB0aGlzLl9yZWFkZXIuY2FuY2VsKClcbiAgICAgIHRoaXMuX3JlYWRlciA9IG51bGxcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICB0aGlzLl9jYW5jZWxlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5jYW5jZWwoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGZXRjaExvYWRlclxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIE1wNFJlbXV4ZXI6IHJlcXVpcmUoJy4vc3JjL21wNCcpLmRlZmF1bHRcbn07XG4iLCJpbXBvcnQgeyBCdWZmZXIgfSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5cbi8vIGNvbnN0IFVJTlQzMl9NQVggPSBNYXRoLnBvdygyLCAzMikgLSAxO1xuY2xhc3MgRm1wNCB7XG4gIHN0YXRpYyBzaXplICh2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIud3JpdGVVaW50MzIodmFsdWUpXG4gIH1cbiAgc3RhdGljIGluaXRCb3ggKHNpemUsIG5hbWUsIC4uLmNvbnRlbnQpIHtcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKHNpemUpLCBGbXA0LnR5cGUobmFtZSksIC4uLmNvbnRlbnQpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgZXh0ZW5zaW9uICh2ZXJzaW9uLCBmbGFnKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIHZlcnNpb24sXG4gICAgICAoZmxhZyA+PiAxNikgJiAweGZmLFxuICAgICAgKGZsYWcgPj4gOCkgJiAweGZmLFxuICAgICAgZmxhZyAmIDB4ZmZcbiAgICBdKVxuICB9XG4gIHN0YXRpYyBmdHlwICgpIHtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDI0LCAnZnR5cCcsIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4NjksIDB4NzMsIDB4NkYsIDB4NkQsIC8vIGlzb20sXG4gICAgICAweDAsIDB4MCwgMHgwMCwgMHgwMSwgLy8gbWlub3JfdmVyc2lvbjogMHgwMVxuICAgICAgMHg2OSwgMHg3MywgMHg2RiwgMHg2RCwgLy8gaXNvbVxuICAgICAgMHg2MSwgMHg3NiwgMHg2MywgMHgzMSAvLyBhdmMxXG4gICAgXSkpXG4gIH1cbiAgc3RhdGljIG1vb3YgKHsgdHlwZSwgbWV0YSB9KSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IG12aGQgPSBGbXA0Lm12aGQobWV0YS5kdXJhdGlvbiwgbWV0YS50aW1lc2NhbGUpXG4gICAgbGV0IHRyYWtcblxuICAgIGlmICh0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICB0cmFrID0gRm1wNC52aWRlb1RyYWsobWV0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhayA9IEZtcDQuYXVkaW9UcmFrKG1ldGEpXG4gICAgfVxuXG4gICAgbGV0IG12ZXggPSBGbXA0Lm12ZXgobWV0YS5kdXJhdGlvbiwgbWV0YS50aW1lc2NhbGUgfHwgMTAwMCwgbWV0YS5pZCk7XG4gICAgW212aGQsIHRyYWssIG12ZXhdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnbW9vdicsIG12aGQsIHRyYWssIG12ZXgpXG4gIH1cbiAgc3RhdGljIG12aGQgKGR1cmF0aW9uLCB0aW1lc2NhbGUgPSAxMDAwKSB7XG4gICAgLy8gZHVyYXRpb24gKj0gdGltZXNjYWxlO1xuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgKyBmbGFncyAgICAgMeS9jeeahGJveOeJiOacrCsz5L2NZmxhZ3MgICBib3jniYjmnKzvvIww5oiWMe+8jOS4gOiIrOS4ujDjgILvvIjku6XkuIvlrZfoioLmlbDlnYfmjIl2ZXJzaW9uPTDvvIlcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGNyZWF0aW9uX3RpbWUgICAg5Yib5bu65pe26Ze0ICDvvIjnm7jlr7nkuo5VVEPml7bpl7QxOTA0LTAxLTAx6Zu254K555qE56eS5pWw77yJXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtb2RpZmljYXRpb25fdGltZSAgIOS/ruaUueaXtumXtFxuXG4gICAgICAvKipcbiAgICAgICAgICAgICAqIHRpbWVzY2FsZTogNCBieXRlc+aWh+S7tuWqkuS9k+WcqDHnp5Lml7bpl7TlhoXnmoTliLvluqblgLzvvIzlj6/ku6XnkIbop6PkuLox56eS6ZW/5bqmXG4gICAgICAgICAgICAgKi9cbiAgICAgICh0aW1lc2NhbGUgPj4+IDI0KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlID4+PiAxNikgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSA+Pj4gOCkgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSkgJiAweEZGLFxuXG4gICAgICAvKipcbiAgICAgICAgICAgICAqIGR1cmF0aW9uOiA0IGJ5dGVz6K+ldHJhY2vnmoTml7bpl7Tplb/luqbvvIznlKhkdXJhdGlvbuWSjHRpbWUgc2NhbGXlgLzlj6/ku6XorqHnrpd0cmFja+aXtumVv++8jOavlOWmgmF1ZGlvIHRyYWNr55qEdGltZSBzY2FsZSA9IDgwMDAsXG4gICAgICAgICAgICAgKiBkdXJhdGlvbiA9IDU2MDEyOO+8jOaXtumVv+S4ujcwLjAxNu+8jHZpZGVvIHRyYWNr55qEdGltZSBzY2FsZSA9IDYwMCwgZHVyYXRpb24gPSA0MjAwMO+8jOaXtumVv+S4ujcwXG4gICAgICAgICAgICAgKi9cbiAgICAgIChkdXJhdGlvbiA+Pj4gMjQpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbiA+Pj4gMTYpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyBQcmVmZXJyZWQgcmF0ZTogMS4wICAg5o6o6I2Q5pKt5pS+6YCf546H77yM6auYMTbkvY3lkozkvY4xNuS9jeWIhuWIq+S4uuWwj+aVsOeCueaVtOaVsOmDqOWIhuWSjOWwj+aVsOmDqOWIhu+8jOWNs1sxNi4xNl0g5qC85byP77yM6K+l5YC85Li6MS4w77yIMHgwMDAxMDAwMO+8ieihqOekuuato+W4uOWJjeWQkeaSreaUvlxuICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcmVmZXJyZWRWb2x1bWUoMS4wLCAyYnl0ZXMpICsgcmVzZXJ2ZWQoMmJ5dGVzKVxuICAgICAgICAgICAgICog5LiOcmF0Zeexu+S8vO+8jFs4LjhdIOagvOW8j++8jDEuMO+8iDB4MDEwMO+8ieihqOekuuacgOWkp+mfs+mHj1xuICAgICAgICAgICAgICovXG4gICAgICAweDAxLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gIHJlc2VydmVkOiA0ICsgNCBieXRlc+S/neeVmeS9jVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBjb21wb3NpdGlvbiBtYXRyaXgtLS0tXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8g6KeG6aKR5Y+Y5o2i55+p6Zi1ICAg57q/5oCn5Luj5pWwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gLS0tLWJlZ2luIHByZV9kZWZpbmVkIDYgKiA0IGJ5dGVzLS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZS1kZWZpbmVkIOS/neeVmeS9jVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyAtLS0tZW5kIHByZV9kZWZpbmVkIDYgKiA0IGJ5dGVzLS0tLVxuICAgICAgMHhGRiwgMHhGRiwgMHhGRiwgMHhGRiAvLyBuZXh0X3RyYWNrX0lEIOS4i+S4gOS4qnRyYWNr5L2/55So55qEaWTlj7dcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goOCArIGJ5dGVzLmxlbmd0aCwgJ212aGQnLCBuZXcgVWludDhBcnJheShieXRlcykpXG4gIH1cbiAgc3RhdGljIHZpZGVvVHJhayAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuXG4gICAgbGV0IHRraGQgPSBGbXA0LnRraGQoe1xuICAgICAgaWQ6IDEsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIHdpZHRoOiBkYXRhLnByZXNlbnRXaWR0aCxcbiAgICAgIGhlaWdodDogZGF0YS5wcmVzZW50SGVpZ2h0LFxuICAgICAgdHlwZTogJ3ZpZGVvJ1xuICAgIH0pXG4gICAgbGV0IG1kaWEgPSBGbXA0Lm1kaWEoe1xuICAgICAgdHlwZTogJ3ZpZGVvJyxcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIGR1cmF0aW9uOiBkYXRhLmR1cmF0aW9uLFxuICAgICAgYXZjYzogZGF0YS5hdmNjLFxuICAgICAgcGFyUmF0aW86IGRhdGEucGFyUmF0aW8sXG4gICAgICB3aWR0aDogZGF0YS5wcmVzZW50V2lkdGgsXG4gICAgICBoZWlnaHQ6IGRhdGEucHJlc2VudEhlaWdodFxuICAgIH0pO1xuICAgIFt0a2hkLCBtZGlhXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ3RyYWsnLCB0a2hkLCBtZGlhKVxuICB9XG4gIHN0YXRpYyBhdWRpb1RyYWsgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgdGtoZCA9IEZtcDQudGtoZCh7XG4gICAgICBpZDogMixcbiAgICAgIGR1cmF0aW9uOiBkYXRhLmR1cmF0aW9uLFxuICAgICAgdGltZXNjYWxlOiBkYXRhLnRpbWVzY2FsZSB8fCAxMDAwLFxuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICB0eXBlOiAnYXVkaW8nXG4gICAgfSlcbiAgICBsZXQgbWRpYSA9IEZtcDQubWRpYSh7XG4gICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgdGltZXNjYWxlOiBkYXRhLnRpbWVzY2FsZSB8fCAxMDAwLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICBjaGFubmVsQ291bnQ6IGRhdGEuY2hhbm5lbENvdW50LFxuICAgICAgc2FtcGxlcmF0ZTogZGF0YS5zYW1wbGVSYXRlLFxuICAgICAgY29uZmlnOiBkYXRhLmNvbmZpZ1xuICAgIH0pO1xuICAgIFt0a2hkLCBtZGlhXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ3RyYWsnLCB0a2hkLCBtZGlhKVxuICB9XG4gIHN0YXRpYyB0a2hkIChkYXRhKSB7XG4gICAgbGV0IGlkID0gZGF0YS5pZFxuICAgIGxldCBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb25cbiAgICBsZXQgd2lkdGggPSBkYXRhLndpZHRoXG4gICAgbGV0IGhlaWdodCA9IGRhdGEuaGVpZ2h0XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDA3LCAvLyB2ZXJzaW9uKDApICsgZmxhZ3MgMeS9jeeJiOacrCBib3jniYjmnKzvvIww5oiWMe+8jOS4gOiIrOS4ujDjgILvvIjku6XkuIvlrZfoioLmlbDlnYfmjIl2ZXJzaW9uPTDvvInmjInkvY3miJbmk43kvZznu5PmnpzlgLzvvIzpooTlrprkuYnlpoLkuIvvvJpcbiAgICAgIC8vIDB4MDAwMDAxIHRyYWNrX2VuYWJsZWTvvIzlkKbliJnor6V0cmFja+S4jeiiq+aSreaUvu+8m1xuICAgICAgLy8gMHgwMDAwMDIgdHJhY2tfaW5fbW92aWXvvIzooajnpLror6V0cmFja+WcqOaSreaUvuS4reiiq+W8leeUqO+8m1xuICAgICAgLy8gMHgwMDAwMDQgdHJhY2tfaW5fcHJldmlld++8jOihqOekuuivpXRyYWNr5Zyo6aKE6KeI5pe26KKr5byV55So44CCXG4gICAgICAvLyDkuIDoiKzor6XlgLzkuLo377yMMSsyKzQg5aaC5p6c5LiA5Liq5aqS5L2T5omA5pyJdHJhY2vlnYfmnKrorr7nva50cmFja19pbl9tb3ZpZeWSjHRyYWNrX2luX3ByZXZpZXfvvIzlsIbooqvnkIbop6PkuLrmiYDmnIl0cmFja+Wdh+iuvue9ruS6hui/meS4pOmhue+8m+WvueS6jmhpbnQgdHJhY2vvvIzor6XlgLzkuLowXG4gICAgICAvLyBoaW50IHRyYWNrIOi/meS4queJueauiueahHRyYWNr5bm25LiN5YyF5ZCr5aqS5L2T5pWw5o2u77yM6ICM5piv5YyF5ZCr5LqG5LiA5Lqb5bCG5YW25LuW5pWw5o2udHJhY2vmiZPljIXmiJDmtYHlqpLkvZPnmoTmjIfnpLrkv6Hmga/jgIJcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGNyZWF0aW9uX3RpbWXliJvlu7rml7bpl7TvvIjnm7jlr7nkuo5VVEPml7bpl7QxOTA0LTAxLTAx6Zu254K555qE56eS5pWw77yJXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtb2RpZmljYXRpb24gdGltZSDkv67mlLnml7bpl7RcbiAgICAgIChpZCA+Pj4gMjQpICYgMHhGRiwgLy8gdHJhY2tfSUQ6IDQgYnl0ZXMgaWTlj7fvvIzkuI3og73ph43lpI3kuJTkuI3og73kuLowXG4gICAgICAoaWQgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAoaWQgPj4+IDgpICYgMHhGRixcbiAgICAgIChpZCkgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQ6IDQgYnl0ZXMgICAg5L+d55WZ5L2NXG4gICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsIC8vIGR1cmF0aW9uOiA0IGJ5dGVzIHRyYWNr55qE5pe26Ze06ZW/5bqmXG4gICAgICAoZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDgpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbikgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQ6IDIgKiA0IGJ5dGVzICAgIOS/neeVmeS9jVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGxheWVyKDJieXRlcykgKyBhbHRlcm5hdGVfZ3JvdXAoMmJ5dGVzKSAg6KeG6aKR5bGC77yM6buY6K6k5Li6MO+8jOWAvOWwj+eahOWcqOS4iuWxgi50cmFja+WIhue7hOS/oeaBr++8jOm7mOiupOS4ujDooajnpLror6V0cmFja+acquS4juWFtuS7lnRyYWNr5pyJ576k57uE5YWz57O7XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2b2x1bWUoMmJ5dGVzKSArIHJlc2VydmVkKDJieXRlcykgICAgWzguOF0g5qC85byP77yM5aaC5p6c5Li66Z+z6aKRdHJhY2vvvIwxLjDvvIgweDAxMDDvvInooajnpLrmnIDlpKfpn7Pph4/vvJvlkKbliJnkuLowICAgK+S/neeVmeS9jVxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8gLS0tLWJlZ2luIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIOinhumikeWPmOaNouefqemYtVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHg0MCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gLS0tLWVuZCBjb21wb3NpdGlvbiBtYXRyaXgtLS0tXG4gICAgICAod2lkdGggPj4+IDgpICYgMHhGRiwgLy8gLy/lrr3luqZcbiAgICAgICh3aWR0aCkgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIChoZWlnaHQgPj4+IDgpICYgMHhGRiwgLy8g6auY5bqmXG4gICAgICAoaGVpZ2h0KSAmIDB4RkYsXG4gICAgICAweDAwLCAweDAwXG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDggKyBjb250ZW50LmJ5dGVMZW5ndGgsICd0a2hkJywgY29udGVudClcbiAgfVxuICBzdGF0aWMgZWR0cyAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uXG4gICAgbGV0IG1lZGlhVGltZSA9IGRhdGEubWVkaWFUaW1lXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSgzNiksIEZtcDQudHlwZSgnZWR0cycpKVxuICAgIC8vIGVsc3RcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDI4KSwgRm1wNC50eXBlKCdlbHN0JykpXG4gICAgYnVmZmVyLndyaXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGVudHJ5IGNvdW50XG4gICAgICAoZHVyYXRpb24gPj4gMjQpICYgMHhmZiwgKGR1cmF0aW9uID4+IDE2KSAmIDB4ZmYsIChkdXJhdGlvbiA+PiA4KSAmIDB4ZmYsIGR1cmF0aW9uICYgMHhmZixcbiAgICAgIChtZWRpYVRpbWUgPj4gMjQpICYgMHhmZiwgKG1lZGlhVGltZSA+PiAxNikgJiAweGZmLCAobWVkaWFUaW1lID4+IDgpICYgMHhmZiwgbWVkaWFUaW1lICYgMHhmZixcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEgLy8gbWVkaWEgcmF0ZVxuICAgIF0pKVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIG1kaWEgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgbWRoZCA9IEZtcDQubWRoZChkYXRhLnRpbWVzY2FsZSwgZGF0YS5kdXJhdGlvbilcbiAgICBsZXQgaGRsciA9IEZtcDQuaGRscihkYXRhLnR5cGUpXG4gICAgbGV0IG1pbmYgPSBGbXA0Lm1pbmYoZGF0YSk7XG4gICAgW21kaGQsIGhkbHIsIG1pbmZdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnbWRpYScsIG1kaGQsIGhkbHIsIG1pbmYpXG4gIH1cbiAgc3RhdGljIG1kaGQgKHRpbWVzY2FsZSA9IDEwMDAsIGR1cmF0aW9uKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1lICAgIOWIm+W7uuaXtumXtFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uX3RpbWXkv67mlLnml7bpl7RcbiAgICAgICh0aW1lc2NhbGUgPj4+IDI0KSAmIDB4RkYsIC8vIHRpbWVzY2FsZTogNCBieXRlcyAgICDmlofku7blqpLkvZPlnKgx56eS5pe26Ze05YaF55qE5Yi75bqm5YC877yM5Y+v5Lul55CG6Kej5Li6MeenkumVv+W6plxuICAgICAgKHRpbWVzY2FsZSA+Pj4gMTYpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUgPj4+IDgpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbiA+Pj4gMjQpICYgMHhGRiwgLy8gZHVyYXRpb246IDQgYnl0ZXMgIHRyYWNr55qE5pe26Ze06ZW/5bqmXG4gICAgICAoZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDgpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbikgJiAweEZGLFxuICAgICAgMHg1NSwgMHhDNCwgLy8gbGFuZ3VhZ2U6IHVuZCAodW5kZXRlcm1pbmVkKSDlqpLkvZPor63oqIDnoIHjgILmnIDpq5jkvY3kuLow77yM5ZCO6Z2iMTXkvY3kuLoz5Liq5a2X56ym77yI6KeBSVNPIDYzOS0yL1TmoIflh4bkuK3lrprkuYnvvIlcbiAgICAgIDB4MDAsIDB4MDAgLy8gcHJlX2RlZmluZWQgPSAwXG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDEyICsgY29udGVudC5ieXRlTGVuZ3RoLCAnbWRoZCcsIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBoZGxyICh0eXBlKSB7XG4gICAgbGV0IHZhbHVlID0gWzB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAweDc2LCAweDY5LCAweDY0LCAweDY1LCAvLyBoYW5kbGVyX3R5cGU6ICd2aWRlJ1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHg1NiwgMHg2OSwgMHg2NCwgMHg2NSxcbiAgICAgIDB4NmYsIDB4NDgsIDB4NjEsIDB4NmUsXG4gICAgICAweDY0LCAweDZjLCAweDY1LCAweDcyLCAweDAwIC8vIG5hbWU6ICdWaWRlb0hhbmRsZXInXG4gICAgXVxuICAgIGlmICh0eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICB2YWx1ZS5zcGxpY2UoOCwgNCwgLi4uWzB4NzMsIDB4NmYsIDB4NzUsIDB4NmVdKVxuICAgICAgdmFsdWUuc3BsaWNlKDI0LCAxMywgLi4uWzB4NTMsIDB4NmYsIDB4NzUsIDB4NmUsXG4gICAgICAgIDB4NjQsIDB4NDgsIDB4NjEsIDB4NmUsXG4gICAgICAgIDB4NjQsIDB4NmMsIDB4NjUsIDB4NzIsIDB4MDBdKVxuICAgIH1cbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDggKyB2YWx1ZS5sZW5ndGgsICdoZGxyJywgbmV3IFVpbnQ4QXJyYXkodmFsdWUpKVxuICB9XG4gIHN0YXRpYyBtaW5mIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IHZtaGQgPSBkYXRhLnR5cGUgPT09ICd2aWRlbycgPyBGbXA0LnZtaGQoKSA6IEZtcDQuc21oZCgpXG4gICAgbGV0IGRpbmYgPSBGbXA0LmRpbmYoKVxuICAgIGxldCBzdGJsID0gRm1wNC5zdGJsKGRhdGEpO1xuICAgIFt2bWhkLCBkaW5mLCBzdGJsXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21pbmYnLCB2bWhkLCBkaW5mLCBzdGJsKVxuICB9XG4gIHN0YXRpYyB2bWhkICgpIHtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDIwLCAndm1oZCcsIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAvLyBncmFwaGljc21vZGVcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCAvLyBvcGNvbG9yXG4gICAgXSkpXG4gIH1cbiAgc3RhdGljIHNtaGQgKCkge1xuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICdzbWhkJywgbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIC8vIGJhbGFuY2VcbiAgICAgIDB4MDAsIDB4MDAgLy8gcmVzZXJ2ZWRcbiAgICBdKSlcbiAgfVxuICBzdGF0aWMgZGluZiAoKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBkcmVmID0gWzB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGVudHJ5X2NvdW50XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDBjLCAvLyBlbnRyeV9zaXplXG4gICAgICAweDc1LCAweDcyLCAweDZjLCAweDIwLCAvLyAndXJsJyB0eXBlXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDEgLy8gZW50cnlfZmxhZ3NcbiAgICBdXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSgzNiksIEZtcDQudHlwZSgnZGluZicpLCBGbXA0LnNpemUoMjgpLCBGbXA0LnR5cGUoJ2RyZWYnKSwgbmV3IFVpbnQ4QXJyYXkoZHJlZikpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgc3RibCAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCBzdHNkID0gRm1wNC5zdHNkKGRhdGEpXG4gICAgbGV0IHN0dHMgPSBGbXA0LnN0dHMoKVxuICAgIGxldCBzdHNjID0gRm1wNC5zdHNjKClcbiAgICBsZXQgc3RzeiA9IEZtcDQuc3RzeigpXG4gICAgbGV0IHN0Y28gPSBGbXA0LnN0Y28oKTtcbiAgICBbc3RzZCwgc3R0cywgc3RzYywgc3Rzeiwgc3Rjb10uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICdzdGJsJywgc3RzZCwgc3R0cywgc3RzYywgc3Rzeiwgc3RjbylcbiAgfVxuICBzdGF0aWMgc3RzZCAoZGF0YSkge1xuICAgIGxldCBjb250ZW50XG4gICAgaWYgKGRhdGEudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgLy8gaWYgKCFkYXRhLmlzQUFDICYmIGRhdGEuY29kZWMgPT09ICdtcDQnKSB7XG4gICAgICAvLyAgICAgY29udGVudCA9IEZNUDQubXAzKGRhdGEpO1xuICAgICAgLy8gfSBlbHNlIHtcbiAgICAgIC8vXG4gICAgICAvLyB9XG4gICAgICAvLyDmlK/mjIFtcDRhXG4gICAgICBjb250ZW50ID0gRm1wNC5tcDRhKGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnQgPSBGbXA0LmF2YzEoZGF0YSlcbiAgICB9XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiArIGNvbnRlbnQuYnl0ZUxlbmd0aCwgJ3N0c2QnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MDAsIDB4MDFdKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgbXA0YSAoZGF0YSkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAvLyBkYXRhX3JlZmVyZW5jZV9pbmRleFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCBkYXRhLmNoYW5uZWxDb3VudCwgLy8gY2hhbm5lbGNvdW50XG4gICAgICAweDAwLCAweDEwLCAvLyBzYW1wbGVTaXplOjE2Yml0c1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQyXG4gICAgICAoZGF0YS5zYW1wbGVyYXRlID4+IDgpICYgMHhmZixcbiAgICAgIGRhdGEuc2FtcGxlcmF0ZSAmIDB4ZmYsIC8vXG4gICAgICAweDAwLCAweDAwXG4gICAgXSlcbiAgICBsZXQgZXNkcyA9IEZtcDQuZXNkcyhkYXRhLmNvbmZpZylcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDggKyBjb250ZW50LmJ5dGVMZW5ndGggKyBlc2RzLmJ5dGVMZW5ndGgsICdtcDRhJywgY29udGVudCwgZXNkcylcbiAgfVxuICBzdGF0aWMgZXNkcyAoY29uZmlnID0gWzQzLCAxNDYsIDgsIDBdKSB7XG4gICAgY29uc3QgY29uZmlnbGVuID0gY29uZmlnLmxlbmd0aFxuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcblxuICAgICAgMHgwMywgLy8gZGVzY3JpcHRvcl90eXBlXG4gICAgICAweDE3ICsgY29uZmlnbGVuLCAvLyBsZW5ndGhcbiAgICAgIDB4MDAsIDB4MDEsIC8vIGVzX2lkXG4gICAgICAweDAwLCAvLyBzdHJlYW1fcHJpb3JpdHlcblxuICAgICAgMHgwNCwgLy8gZGVzY3JpcHRvcl90eXBlXG4gICAgICAweDBmICsgY29uZmlnbGVuLCAvLyBsZW5ndGhcbiAgICAgIDB4NDAsIC8vIGNvZGVjIDogbXBlZzRfYXVkaW9cbiAgICAgIDB4MTUsIC8vIHN0cmVhbV90eXBlXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBidWZmZXJfc2l6ZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbWF4Qml0cmF0ZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gYXZnQml0cmF0ZVxuXG4gICAgICAweDA1IC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgIF0uY29uY2F0KFtjb25maWdsZW5dKS5jb25jYXQoY29uZmlnKS5jb25jYXQoWzB4MDYsIDB4MDEsIDB4MDJdKSlcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDggKyBjb250ZW50LmJ5dGVMZW5ndGgpLCBGbXA0LnR5cGUoJ2VzZHMnKSwgY29udGVudClcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBhdmMxIChkYXRhKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBzaXplID0gNDAvLyA4KGF2YzEpKzgoYXZjYykrOChidHJ0KSsxNihwYXNwKVxuICAgIC8vIGxldCBzcHMgPSBkYXRhLnNwc1xuICAgIC8vIGxldCBwcHMgPSBkYXRhLnBwc1xuICAgIGxldCB3aWR0aCA9IGRhdGEud2lkdGhcbiAgICBsZXQgaGVpZ2h0ID0gZGF0YS5oZWlnaHRcbiAgICBsZXQgaFNwYWNpbmcgPSBkYXRhLnBhclJhdGlvLmhlaWdodFxuICAgIGxldCB2U3BhY2luZyA9IGRhdGEucGFyUmF0aW8ud2lkdGhcbiAgICAvLyBsZXQgYXZjY0J1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIC8vIGF2Y2NCdWZmZXIud3JpdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgIC8vICAgMHgwMSwgLy8gdmVyc2lvblxuICAgIC8vICAgc3BzWzFdLCAvLyBwcm9maWxlXG4gICAgLy8gICBzcHNbMl0sIC8vIHByb2ZpbGUgY29tcGF0aWJsZVxuICAgIC8vICAgc3BzWzNdLCAvLyBsZXZlbFxuICAgIC8vICAgMHhmYyB8IDMsXG4gICAgLy8gICAweEUwIHwgMSAvLyDnm67liY3lj6rlpITnkIbkuIDkuKpzcHNcbiAgICAvLyBdLmNvbmNhdChbc3BzLmxlbmd0aCA+Pj4gOCAmIDB4ZmYsIHNwcy5sZW5ndGggJiAweGZmXSkpKVxuICAgIC8vIGF2Y2NCdWZmZXIud3JpdGUoc3BzLCBuZXcgVWludDhBcnJheShbMSwgcHBzLmxlbmd0aCA+Pj4gOCAmIDB4ZmYsIHBwcy5sZW5ndGggJiAweGZmXSksIHBwcylcblxuICAgIGxldCBhdmNjID0gZGF0YS5hdmNjXG4gICAgbGV0IGF2YzEgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDEsIC8vIGRhdGFfcmVmZXJlbmNlX2luZGV4XG4gICAgICAweDAwLCAweDAwLCAvLyBwcmVfZGVmaW5lZFxuICAgICAgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgICh3aWR0aCA+PiA4KSAmIDB4ZmYsXG4gICAgICB3aWR0aCAmIDB4ZmYsIC8vIHdpZHRoXG4gICAgICAoaGVpZ2h0ID4+IDgpICYgMHhmZixcbiAgICAgIGhlaWdodCAmIDB4ZmYsIC8vIGhlaWdodFxuICAgICAgMHgwMCwgMHg0OCwgMHgwMCwgMHgwMCwgLy8gaG9yaXpyZXNvbHV0aW9uXG4gICAgICAweDAwLCAweDQ4LCAweDAwLCAweDAwLCAvLyB2ZXJ0cmVzb2x1dGlvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDEsIC8vIGZyYW1lX2NvdW50XG4gICAgICAweDEyLFxuICAgICAgMHg2NCwgMHg2MSwgMHg2OSwgMHg2QywgLy8gZGFpbHltb3Rpb24vaGxzLmpzXG4gICAgICAweDc5LCAweDZELCAweDZGLCAweDc0LFxuICAgICAgMHg2OSwgMHg2RiwgMHg2RSwgMHgyRixcbiAgICAgIDB4NjgsIDB4NkMsIDB4NzMsIDB4MkUsXG4gICAgICAweDZBLCAweDczLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBjb21wcmVzc29ybmFtZVxuICAgICAgMHgwMCwgMHgxOCwgLy8gZGVwdGggPSAyNFxuICAgICAgMHgxMSwgMHgxMV0pIC8vIHByZV9kZWZpbmVkID0gLTFcbiAgICBsZXQgYnRydCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MWMsIDB4OWMsIDB4ODAsIC8vIGJ1ZmZlclNpemVEQlxuICAgICAgMHgwMCwgMHgyZCwgMHhjNiwgMHhjMCwgLy8gbWF4Qml0cmF0ZVxuICAgICAgMHgwMCwgMHgyZCwgMHhjNiwgMHhjMCAvLyBhdmdCaXRyYXRlXG4gICAgXSlcbiAgICBsZXQgcGFzcCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIChoU3BhY2luZyA+PiAyNCksIC8vIGhTcGFjaW5nXG4gICAgICAoaFNwYWNpbmcgPj4gMTYpICYgMHhmZixcbiAgICAgIChoU3BhY2luZyA+PiA4KSAmIDB4ZmYsXG4gICAgICBoU3BhY2luZyAmIDB4ZmYsXG4gICAgICAodlNwYWNpbmcgPj4gMjQpLCAvLyB2U3BhY2luZ1xuICAgICAgKHZTcGFjaW5nID4+IDE2KSAmIDB4ZmYsXG4gICAgICAodlNwYWNpbmcgPj4gOCkgJiAweGZmLFxuICAgICAgdlNwYWNpbmcgJiAweGZmXG4gICAgXSlcblxuICAgIGJ1ZmZlci53cml0ZShcbiAgICAgIEZtcDQuc2l6ZShzaXplICsgYXZjMS5ieXRlTGVuZ3RoICsgYXZjYy5ieXRlTGVuZ3RoICsgYnRydC5ieXRlTGVuZ3RoKSwgRm1wNC50eXBlKCdhdmMxJyksIGF2YzEsXG4gICAgICBGbXA0LnNpemUoOCArIGF2Y2MuYnl0ZUxlbmd0aCksIEZtcDQudHlwZSgnYXZjQycpLCBhdmNjLFxuICAgICAgRm1wNC5zaXplKDIwKSwgRm1wNC50eXBlKCdidHJ0JyksIGJ0cnQsXG4gICAgICBGbXA0LnNpemUoMTYpLCBGbXA0LnR5cGUoJ3Bhc3AnKSwgcGFzcFxuICAgIClcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBzdHRzICgpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIGVudHJ5X2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc3R0cycsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHN0c2MgKCkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZW50cnlfY291bnRcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICdzdHNjJywgY29udGVudClcbiAgfVxuICBzdGF0aWMgc3RjbyAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBlbnRyeV9jb3VudFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3N0Y28nLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBzdHN6ICgpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBzYW1wbGVfc2l6ZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBzYW1wbGVfY291bnRcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMjAsICdzdHN6JywgY29udGVudClcbiAgfVxuICBzdGF0aWMgbXZleCAoZHVyYXRpb24sIHRpbWVzY2FsZSA9IDEwMDAsIHRyYWNrSUQpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IG1laGQgPSBCdWZmZXIud3JpdGVVaW50MzIoZHVyYXRpb24pXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSg1NiksIEZtcDQudHlwZSgnbXZleCcpLCBGbXA0LnNpemUoMTYpLCBGbXA0LnR5cGUoJ21laGQnKSwgRm1wNC5leHRlbnNpb24oMCwgMCksIG1laGQsIEZtcDQudHJleCh0cmFja0lEKSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyB0cmV4IChpZCkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgKGlkID4+IDI0KSxcbiAgICAgIChpZCA+PiAxNikgJiAweGZmLFxuICAgICAgKGlkID4+IDgpICYgMHhmZixcbiAgICAgIChpZCAmIDB4ZmYpLCAvLyB0cmFja19JRFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZGVmYXVsdF9zYW1wbGVfZGVzY3JpcHRpb25faW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGRlZmF1bHRfc2FtcGxlX2R1cmF0aW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9zaXplXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAxIC8vIGRlZmF1bHRfc2FtcGxlX2ZsYWdzXG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDggKyBjb250ZW50LmJ5dGVMZW5ndGgsICd0cmV4JywgY29udGVudClcbiAgfVxuICBzdGF0aWMgbW9vZiAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCBtZmhkID0gRm1wNC5tZmhkKClcbiAgICBsZXQgdHJhZiA9IEZtcDQudHJhZihkYXRhKTtcbiAgICBbbWZoZCwgdHJhZl0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICdtb29mJywgbWZoZCwgdHJhZilcbiAgfVxuICBzdGF0aWMgbWZoZCAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBCdWZmZXIud3JpdGVVaW50MzIoRm1wNC5zZXF1ZW5jZSlcbiAgICBGbXA0LnNlcXVlbmNlICs9IDFcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnbWZoZCcsIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyB0cmFmIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IHRmaGQgPSBGbXA0LnRmaGQoZGF0YS5pZClcbiAgICBsZXQgdGZkdCA9IEZtcDQudGZkdChkYXRhLnRpbWUpXG4gICAgbGV0IHNkdHAgPSBGbXA0LnNkdHAoZGF0YSlcbiAgICBsZXQgdHJ1biA9IEZtcDQudHJ1bihkYXRhLCBzZHRwLmJ5dGVMZW5ndGgpO1xuXG4gICAgW3RmaGQsIHRmZHQsIHRydW4sIHNkdHBdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAndHJhZicsIHRmaGQsIHRmZHQsIHRydW4sIHNkdHApXG4gIH1cbiAgc3RhdGljIHRmaGQgKGlkKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBCdWZmZXIud3JpdGVVaW50MzIoaWQpXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3RmaGQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgdGZkdCAodGltZSkge1xuICAgIC8vIGxldCB1cHBlciA9IE1hdGguZmxvb3IodGltZSAvIChVSU5UMzJfTUFYICsgMSkpLFxuICAgIC8vICAgICBsb3dlciA9IE1hdGguZmxvb3IodGltZSAlIChVSU5UMzJfTUFYICsgMSkpO1xuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICd0ZmR0JywgRm1wNC5leHRlbnNpb24oMCwgMCksIEJ1ZmZlci53cml0ZVVpbnQzMih0aW1lKSlcbiAgfVxuICBzdGF0aWMgdHJ1biAoZGF0YSwgc2R0cExlbmd0aCkge1xuICAgIC8vIGxldCBpZCA9IGRhdGEuaWQ7XG4gICAgLy8gbGV0IGNlaWwgPSBpZCA9PT0gMSA/IDE2IDogMTI7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBzYW1wbGVDb3VudCA9IEJ1ZmZlci53cml0ZVVpbnQzMihkYXRhLnNhbXBsZXMubGVuZ3RoKVxuICAgIC8vIG1kYXQtaGVhZGVyIDhcbiAgICAvLyBtb29mLWhlYWRlciA4XG4gICAgLy8gbWZoZCAxNlxuICAgIC8vIHRyYWYtaGVhZGVyIDhcbiAgICAvLyB0aGhkIDE2XG4gICAgLy8gdGZkdCAyMFxuICAgIC8vIHRydW4taGVhZGVyIDEyXG4gICAgLy8gc2FtcGxlQ291bnQgNFxuICAgIC8vIGRhdGEtb2Zmc2V0IDRcbiAgICAvLyBzYW1wbGVzLmxlbmd0aFxuICAgIGxldCBvZmZzZXQgPSBCdWZmZXIud3JpdGVVaW50MzIoOCArIDggKyAxNiArIDggKyAxNiArIDE2ICsgMTIgKyA0ICsgNCArIDE2ICogZGF0YS5zYW1wbGVzLmxlbmd0aCArIHNkdHBMZW5ndGgpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSgyMCArIDE2ICogZGF0YS5zYW1wbGVzLmxlbmd0aCksIEZtcDQudHlwZSgndHJ1bicpLCBuZXcgVWludDhBcnJheShbMHgwMCwgMHgwMCwgMHgwRiwgMHgwMV0pLCBzYW1wbGVDb3VudCwgb2Zmc2V0KVxuXG4gICAgLy8gbGV0IHNpemUgPSBidWZmZXIuYnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAvLyBsZXQgd3JpdGVPZmZzZXQgPSAwXG4gICAgLy8gZGF0YS5zYW1wbGVzLmZvckVhY2goKCkgPT4ge1xuICAgIC8vICAgc2l6ZSArPSAxNlxuICAgIC8vIH0pXG4gICAgLy9cbiAgICAvLyBsZXQgdHJ1bkJveCA9IG5ldyBVaW50OEFycmF5KHNpemUpXG5cbiAgICAvLyB0cnVuQm94LnNldChidWZmZXIuYnVmZmVyLCAwKVxuXG4gICAgZGF0YS5zYW1wbGVzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IGZsYWdzID0gaXRlbS5mbGFnc1xuICAgICAgLy8gY29uc29sZS5sb2coaXRlbS50eXBlLCBpdGVtLmR0cywgaXRlbS5kdXJhdGlvbilcblxuICAgICAgYnVmZmVyLndyaXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAgICAgKGl0ZW0uZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsIC8vIHNhbXBsZV9kdXJhdGlvblxuICAgICAgICAoaXRlbS5kdXJhdGlvbiA+Pj4gMTYpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uZHVyYXRpb24gPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uZHVyYXRpb24pICYgMHhGRixcbiAgICAgICAgKGl0ZW0uc2l6ZSA+Pj4gMjQpICYgMHhGRiwgLy8gc2FtcGxlX3NpemVcbiAgICAgICAgKGl0ZW0uc2l6ZSA+Pj4gMTYpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uc2l6ZSA+Pj4gOCkgJiAweEZGLFxuICAgICAgICAoaXRlbS5zaXplKSAmIDB4RkYsXG4gICAgICAgIChmbGFncy5pc0xlYWRpbmcgPDwgMikgfCBmbGFncy5kZXBlbmRzT24sIC8vIHNhbXBsZV9mbGFnc1xuICAgICAgICAoZmxhZ3MuaXNEZXBlbmRlZE9uIDw8IDYpIHwgKGZsYWdzLmhhc1JlZHVuZGFuY3kgPDwgNCkgfCBmbGFncy5pc05vblN5bmMsXG4gICAgICAgIDB4MDAsIDB4MDAsIC8vIHNhbXBsZV9kZWdyYWRhdGlvbl9wcmlvcml0eVxuICAgICAgICAoaXRlbS5jdHMgPj4+IDI0KSAmIDB4RkYsIC8vIHNhbXBsZV9jb21wb3NpdGlvbl90aW1lX29mZnNldFxuICAgICAgICAoaXRlbS5jdHMgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmN0cyA+Pj4gOCkgJiAweEZGLFxuICAgICAgICAoaXRlbS5jdHMpICYgMHhGRlxuICAgICAgXSkpXG4gICAgICAvLyB3cml0ZU9mZnNldCArPSAxNlxuICAgICAgLy8gYnVmZmVyLndyaXRlKEJ1ZmZlci53cml0ZVVpbnQzMigwKSk7XG4gICAgfSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBzZHRwIChkYXRhKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMTIgKyBkYXRhLnNhbXBsZXMubGVuZ3RoKSwgRm1wNC50eXBlKCdzZHRwJyksIEZtcDQuZXh0ZW5zaW9uKDAsIDApKVxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgY29uc3QgZmxhZ3MgPSBpdGVtLmZsYWdzXG4gICAgICBjb25zdCBudW0gPSAoZmxhZ3MuaXNMZWFkaW5nIDw8IDYpIHwgLy8gaXNfbGVhZGluZzogMiAoYml0KVxuICAgICAgICAoZmxhZ3MuZGVwZW5kc09uIDw8IDQpIHwgLy8gc2FtcGxlX2RlcGVuZHNfb25cbiAgICAgICAgKGZsYWdzLmlzRGVwZW5kZWRPbiA8PCAyKSB8IC8vIHNhbXBsZV9pc19kZXBlbmRlZF9vblxuICAgICAgICAoZmxhZ3MuaGFzUmVkdW5kYW5jeSkvLyBzYW1wbGVfaGFzX3JlZHVuZGFuY3lcblxuICAgICAgYnVmZmVyLndyaXRlKG5ldyBVaW50OEFycmF5KFtudW1dKSlcbiAgICB9KVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIG1kYXQgKGRhdGEpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IHNpemUgPSA4XG4gICAgZGF0YS5zYW1wbGVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uc2l6ZVxuICAgIH0pXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZShzaXplKSwgRm1wNC50eXBlKCdtZGF0JykpXG4gICAgbGV0IG1kYXRCb3ggPSBuZXcgVWludDhBcnJheShzaXplKVxuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgbWRhdEJveC5zZXQoYnVmZmVyLmJ1ZmZlciwgb2Zmc2V0KVxuICAgIG9mZnNldCArPSA4XG4gICAgZGF0YS5zYW1wbGVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpdGVtLmJ1ZmZlci5mb3JFYWNoKCh1bml0KSA9PiB7XG4gICAgICAgIG1kYXRCb3guc2V0KHVuaXQsIG9mZnNldClcbiAgICAgICAgb2Zmc2V0ICs9IHVuaXQuYnl0ZUxlbmd0aFxuICAgICAgICAvLyBidWZmZXIud3JpdGUodW5pdC5kYXRhKTtcbiAgICAgIH0pXG4gICAgfSlcbiAgICByZXR1cm4gbWRhdEJveFxuICB9XG59XG5GbXA0LnR5cGUgPSAobmFtZSkgPT4ge1xuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW25hbWUuY2hhckNvZGVBdCgwKSwgbmFtZS5jaGFyQ29kZUF0KDEpLCBuYW1lLmNoYXJDb2RlQXQoMiksIG5hbWUuY2hhckNvZGVBdCgzKV0pXG59XG5GbXA0LnNlcXVlbmNlID0gMVxuXG5leHBvcnQgZGVmYXVsdCBGbXA0XG4iLCJpbXBvcnQge1xuICBFVkVOVFMsXG4gIHNuaWZmZXIsXG4gIE1lZGlhU2VnbWVudExpc3QsXG4gIEJ1ZmZlclxufSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5pbXBvcnQgRm1wNCBmcm9tICcuL2ZtcDQnXG5cbmNvbnN0IFJFTVVYX0VWRU5UUyA9IEVWRU5UUy5SRU1VWF9FVkVOVFNcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXA0UmVtdXhlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9kdHNCYXNlID0gMFxuICAgIHRoaXMuX2lzRHRzQmFzZUluaXRlZCA9IGZhbHNlXG4gICAgdGhpcy5fYXVkaW9OZXh0RHRzID0gbnVsbFxuICAgIHRoaXMuX3ZpZGVvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0ID0gbmV3IE1lZGlhU2VnbWVudExpc3QoJ3ZpZGVvJylcbiAgICB0aGlzLl9hdWRpb1NlZ21lbnRMaXN0ID0gbmV3IE1lZGlhU2VnbWVudExpc3QoJ2F1ZGlvJylcbiAgICBjb25zdCB7YnJvd3Nlcn0gPSBzbmlmZmVyXG4gICAgdGhpcy5fZmlsbFNpbGVuY2VGcmFtZSA9IGJyb3dzZXIgPT09ICdpZSdcblxuICAgIHRoaXMudmlkZW9BbGxEdXJhdGlvbiA9IDBcbiAgICB0aGlzLmF1ZGlvQWxsRHVyYXRpb24gPSAwXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5SRU1VWF9NRURJQSwgdGhpcy5yZW11eC5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLlJFTVVYX01FVEFEQVRBLCB0aGlzLm9uTWV0YURhdGFSZWFkeS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fZHRzQmFzZSA9IC0xXG4gICAgdGhpcy5fZHRzQmFzZUluaXRlZCA9IGZhbHNlXG4gICAgdGhpcy5fdmlkZW9OZXh0RHRzID0gbnVsbFxuICAgIHRoaXMuX2F1ZGlvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgICB0aGlzLl9hdWRpb1NlZ21lbnRMaXN0LmNsZWFyKClcbiAgICB0aGlzLl92aWRlb1NlZ21lbnRMaXN0ID0gbnVsbFxuICAgIHRoaXMuX2F1ZGlvU2VnbWVudExpc3QgPSBudWxsXG4gIH1cblxuICByZW11eCAoKSB7XG4gICAgY29uc3QgeyBhdWRpb1RyYWNrLCB2aWRlb1RyYWNrIH0gPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKVxuICAgICF0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgJiYgdGhpcy5jYWxjRHRzQmFzZShhdWRpb1RyYWNrLCB2aWRlb1RyYWNrKVxuXG4gICAgdGhpcy5fcmVtdXhWaWRlbyh2aWRlb1RyYWNrKVxuICAgIHRoaXMuX3JlbXV4QXVkaW8oYXVkaW9UcmFjaylcbiAgfVxuXG4gIHNlZWsgKCkge1xuICAgIHRoaXMuX3ZpZGVvTmV4dER0cyA9IG51bGxcbiAgICB0aGlzLl9hdWRpb05leHREdHMgPSBudWxsXG4gICAgdGhpcy5fdmlkZW9TZWdtZW50TGlzdC5jbGVhcigpXG4gICAgdGhpcy5fYXVkaW9TZWdtZW50TGlzdC5jbGVhcigpXG4gIH1cblxuICBvbk1ldGFEYXRhUmVhZHkgKHR5cGUpIHtcbiAgICBsZXQgaW5pdFNlZ21lbnQgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgZnR5cCA9IEZtcDQuZnR5cCgpXG4gICAgbGV0IG1vb3ZcbiAgICBsZXQgdHJhY2tcblxuICAgIGlmICh0eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICBjb25zdCB7IGF1ZGlvVHJhY2sgfSA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gICAgICB0cmFjayA9IGF1ZGlvVHJhY2s7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgdmlkZW9UcmFjayB9ID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgICAgIHRyYWNrID0gdmlkZW9UcmFjaztcbiAgICB9XG5cbiAgICBtb292ID0gRm1wNC5tb292KHsgdHlwZSwgbWV0YTogdHJhY2subWV0YSB9KVxuXG4gICAgaW5pdFNlZ21lbnQud3JpdGUoZnR5cCwgbW9vdilcblxuICAgIGxldCBwcmVzb3VyY2VidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuZ2V0U291cmNlKHR5cGUpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuY3JlYXRlU291cmNlKHR5cGUpO1xuICAgIH1cblxuICAgIHNvdXJjZS5taW1ldHlwZSA9IHRyYWNrLm1ldGEuY29kZWM7XG4gICAgc291cmNlLmluaXQgPSBpbml0U2VnbWVudDtcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLklOSVRfU0VHTUVOVCwgdHlwZSlcbiAgfVxuXG4gIGNhbGNEdHNCYXNlIChhdWRpb1RyYWNrLCB2aWRlb1RyYWNrKSB7XG4gICAgaWYgKCFhdWRpb1RyYWNrLnNhbXBsZXMubGVuZ3RoICYmICF2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGF1ZGlvQmFzZSA9IEluZmluaXR5XG4gICAgbGV0IHZpZGVvQmFzZSA9IEluZmluaXR5XG5cbiAgICBpZiAoYXVkaW9UcmFjay5zYW1wbGVzICYmIGF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIGF1ZGlvQmFzZSA9IGF1ZGlvVHJhY2suc2FtcGxlc1swXS5kdHNcbiAgICB9XG4gICAgaWYgKHZpZGVvVHJhY2suc2FtcGxlcyAmJiB2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICB2aWRlb0Jhc2UgPSB2aWRlb1RyYWNrLnNhbXBsZXNbMF0uZHRzXG4gICAgfVxuXG4gICAgdGhpcy5fZHRzQmFzZSA9IE1hdGgubWluKGF1ZGlvQmFzZSwgdmlkZW9CYXNlKVxuICAgIHRoaXMuX2lzRHRzQmFzZUluaXRlZCA9IHRydWVcbiAgfVxuXG4gIF9yZW11eFZpZGVvICh2aWRlb1RyYWNrKSB7XG4gICAgY29uc3QgdHJhY2sgPSB2aWRlb1RyYWNrXG5cbiAgICBpZiAoIXZpZGVvVHJhY2suc2FtcGxlcyB8fCAhdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IHtzYW1wbGVzfSA9IHRyYWNrXG4gICAgbGV0IGZpcnN0RHRzID0gLTFcblxuICAgIGNvbnN0IG1wNFNhbXBsZXMgPSBbXVxuICAgIGNvbnN0IG1kYXRCb3ggPSB7XG4gICAgICBzYW1wbGVzOiBbXVxuICAgIH1cblxuICAgIHdoaWxlIChzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgY29uc3QgYXZjU2FtcGxlID0gc2FtcGxlcy5zaGlmdCgpXG4gICAgICBjb25zdCB7IGlzS2V5ZnJhbWUgfSA9IGF2Y1NhbXBsZVxuICAgICAgbGV0IGR0cyA9IGF2Y1NhbXBsZS5kdHMgLSB0aGlzLl9kdHNCYXNlXG5cbiAgICAgIGlmIChmaXJzdER0cyA9PT0gLTEpIHtcbiAgICAgICAgZmlyc3REdHMgPSBkdHNcbiAgICAgIH1cblxuICAgICAgbGV0IGN0c1xuICAgICAgbGV0IHB0c1xuICAgICAgaWYgKGF2Y1NhbXBsZS5wdHMpIHtcbiAgICAgICAgcHRzID0gYXZjU2FtcGxlLnB0cyAtIHRoaXMuX2R0c0Jhc2VcbiAgICAgICAgY3RzID0gcHRzIC0gZHRzXG4gICAgICB9XG4gICAgICBpZiAoYXZjU2FtcGxlLmN0cykge1xuICAgICAgICBwdHMgPSBhdmNTYW1wbGUuY3RzICsgZHRzXG4gICAgICAgIGN0cyA9IGF2Y1NhbXBsZS5jdHNcbiAgICAgIH1cblxuICAgICAgbGV0IG1kYXRTYW1wbGUgPSB7XG4gICAgICAgIGJ1ZmZlcjogW10sXG4gICAgICAgIHNpemU6IDBcbiAgICAgIH1cbiAgICAgIG1kYXRCb3guc2FtcGxlcy5wdXNoKG1kYXRTYW1wbGUpXG4gICAgICBtZGF0U2FtcGxlLmJ1ZmZlci5wdXNoKGF2Y1NhbXBsZS5kYXRhKVxuICAgICAgbWRhdFNhbXBsZS5zaXplICs9IGF2Y1NhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcblxuICAgICAgbGV0IHNhbXBsZUR1cmF0aW9uID0gMFxuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dER0cyA9IHNhbXBsZXNbMF0uZHRzIC0gdGhpcy5fZHRzQmFzZVxuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG5leHREdHMgLSBkdHNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtcDRTYW1wbGVzLmxlbmd0aCA+PSAxKSB7IC8vIGxhc3Rlc3Qgc2FtcGxlLCB1c2Ugc2Vjb25kIGxhc3QgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG1wNFNhbXBsZXNbbXA0U2FtcGxlcy5sZW5ndGggLSAxXS5kdXJhdGlvblxuICAgICAgICB9IGVsc2UgeyAvLyB0aGUgb25seSBvbmUgc2FtcGxlLCB1c2UgcmVmZXJlbmNlIGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSB0aGlzLnZpZGVvTWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnZpZGVvQWxsRHVyYXRpb24gKz0gc2FtcGxlRHVyYXRpb25cbiAgICAgIG1wNFNhbXBsZXMucHVzaCh7XG4gICAgICAgIGR0cyxcbiAgICAgICAgY3RzLFxuICAgICAgICBwdHMsXG4gICAgICAgIGRhdGE6IGF2Y1NhbXBsZS5kYXRhLFxuICAgICAgICBzaXplOiBhdmNTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICBpc0tleWZyYW1lLFxuICAgICAgICBkdXJhdGlvbjogc2FtcGxlRHVyYXRpb24sXG4gICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgaXNMZWFkaW5nOiAwLFxuICAgICAgICAgIGRlcGVuZHNPbjogaXNLZXlmcmFtZSA/IDIgOiAxLFxuICAgICAgICAgIGlzRGVwZW5kZWRPbjogaXNLZXlmcmFtZSA/IDEgOiAwLFxuICAgICAgICAgIGhhc1JlZHVuZGFuY3k6IDAsXG4gICAgICAgICAgaXNOb25TeW5jOiBpc0tleWZyYW1lID8gMCA6IDFcbiAgICAgICAgfSxcbiAgICAgICAgb3JpZ2luRHRzOiBkdHMsXG4gICAgICAgIHR5cGU6ICd2aWRlbydcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgbGV0IG1vb2ZNZGF0ID0gbmV3IEJ1ZmZlcigpXG5cbiAgICBjb25zdCBtb29mID0gRm1wNC5tb29mKHtcbiAgICAgIGlkOiB0cmFjay5tZXRhLmlkLFxuICAgICAgdGltZTogZmlyc3REdHMsXG4gICAgICBzYW1wbGVzOiBtcDRTYW1wbGVzXG4gICAgfSlcbiAgICBjb25zdCBtZGF0ID0gRm1wNC5tZGF0KG1kYXRCb3gpXG4gICAgbW9vZk1kYXQud3JpdGUobW9vZiwgbWRhdClcblxuICAgIHRyYWNrLnNhbXBsZXMgPSBbXVxuICAgIHRyYWNrLmxlbmd0aCA9IDBcblxuICAgIGxldCBwcmVzb3VyY2VidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuZ2V0U291cmNlKCd2aWRlbycpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuY3JlYXRlU291cmNlKCd2aWRlbycpO1xuICAgIH1cblxuICAgIHNvdXJjZS5kYXRhLnB1c2gobW9vZk1kYXQpO1xuXG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5NRURJQV9TRUdNRU5ULCAndmlkZW8nKVxuICB9XG5cbiAgX3JlbXV4QXVkaW8gKHRyYWNrKSB7XG4gICAgY29uc3Qge3NhbXBsZXN9ID0gdHJhY2tcbiAgICBsZXQgZmlyc3REdHMgPSAtMVxuICAgIGxldCBtcDRTYW1wbGVzID0gW11cblxuICAgIGNvbnN0IG1kYXRCb3ggPSB7XG4gICAgICBzYW1wbGVzOiBbXVxuICAgIH1cbiAgICBpZiAoIXNhbXBsZXMgfHwgIXNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbGV0IGlzRmlyc3REdHNJbml0ZWQgPSBmYWxzZVxuICAgIHdoaWxlIChzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgbGV0IHNhbXBsZSA9IHNhbXBsZXMuc2hpZnQoKVxuICAgICAgY29uc3QgeyBkYXRhIH0gPSBzYW1wbGVcbiAgICAgIGxldCBkdHMgPSBzYW1wbGUuZHRzIC0gdGhpcy5fZHRzQmFzZVxuICAgICAgY29uc3Qgb3JpZ2luRHRzID0gZHRzXG4gICAgICBpZiAoIWlzRmlyc3REdHNJbml0ZWQpIHtcbiAgICAgICAgZmlyc3REdHMgPSBkdHNcbiAgICAgICAgaXNGaXJzdER0c0luaXRlZCA9IHRydWVcbiAgICAgIH1cblxuICAgICAgbGV0IHNhbXBsZUR1cmF0aW9uID0gMFxuXG4gICAgICBpZiAodGhpcy5hdWRpb01ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCkge1xuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWRcbiAgICAgIH0gZWxzZSBpZiAoc2FtcGxlcy5sZW5ndGggPj0gMSkge1xuICAgICAgICBjb25zdCBuZXh0RHRzID0gc2FtcGxlc1swXS5kdHMgLSB0aGlzLl9kdHNCYXNlO1xuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG5leHREdHMgLSBkdHNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtcDRTYW1wbGVzLmxlbmd0aCA+PSAxKSB7IC8vIHVzZSBzZWNvbmQgbGFzdCBzYW1wbGUgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG1wNFNhbXBsZXNbbXA0U2FtcGxlcy5sZW5ndGggLSAxXS5kdXJhdGlvblxuICAgICAgICB9IGVsc2UgeyAvLyB0aGUgb25seSBvbmUgc2FtcGxlLCB1c2UgcmVmZXJlbmNlIHNhbXBsZSBkdXJhdGlvblxuICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gdGhpcy5hdWRpb01ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBjb25zb2xlLmxvZygncmVtdXggYXVkaW8gJywgZHRzKVxuICAgICAgdGhpcy5hdWRpb0FsbER1cmF0aW9uICs9IHNhbXBsZUR1cmF0aW9uXG4gICAgICBjb25zdCBtcDRTYW1wbGUgPSB7XG4gICAgICAgIGR0cyxcbiAgICAgICAgcHRzOiBkdHMsXG4gICAgICAgIGN0czogMCxcbiAgICAgICAgc2l6ZTogZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICBkdXJhdGlvbjogc2FtcGxlLmR1cmF0aW9uID8gc2FtcGxlLmR1cmF0aW9uIDogc2FtcGxlRHVyYXRpb24sXG4gICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgaXNMZWFkaW5nOiAwLFxuICAgICAgICAgIGRlcGVuZHNPbjogMixcbiAgICAgICAgICBpc0RlcGVuZGVkT246IDEsXG4gICAgICAgICAgaGFzUmVkdW5kYW5jeTogMCxcbiAgICAgICAgICBpc05vblN5bmM6IDBcbiAgICAgICAgfSxcbiAgICAgICAgaXNLZXlmcmFtZTogdHJ1ZSxcbiAgICAgICAgb3JpZ2luRHRzLFxuICAgICAgICB0eXBlOiAnYXVkaW8nXG4gICAgICB9XG5cbiAgICAgIGxldCBtZGF0U2FtcGxlID0ge1xuICAgICAgICBidWZmZXI6IFtdLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9XG4gICAgICBtZGF0U2FtcGxlLmJ1ZmZlci5wdXNoKGRhdGEpXG4gICAgICBtZGF0U2FtcGxlLnNpemUgKz0gZGF0YS5ieXRlTGVuZ3RoXG5cbiAgICAgIG1kYXRCb3guc2FtcGxlcy5wdXNoKG1kYXRTYW1wbGUpXG5cbiAgICAgIG1wNFNhbXBsZXMucHVzaChtcDRTYW1wbGUpXG4gICAgfVxuXG4gICAgY29uc3QgbW9vZk1kYXQgPSBuZXcgQnVmZmVyKClcbiAgICBjb25zdCBtb29mID0gRm1wNC5tb29mKHtcbiAgICAgIGlkOiB0cmFjay5tZXRhLmlkLFxuICAgICAgdGltZTogZmlyc3REdHMsXG4gICAgICBzYW1wbGVzOiBtcDRTYW1wbGVzXG4gICAgfSlcbiAgICBjb25zdCBtZGF0ID0gRm1wNC5tZGF0KG1kYXRCb3gpXG4gICAgbW9vZk1kYXQud3JpdGUobW9vZiwgbWRhdClcblxuICAgIHRyYWNrLnNhbXBsZXMgPSBbXVxuICAgIHRyYWNrLmxlbmd0aCA9IDBcblxuICAgIGxldCBwcmVzb3VyY2VidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuZ2V0U291cmNlKCdhdWRpbycpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuY3JlYXRlU291cmNlKCdhdWRpbycpO1xuICAgIH1cbiAgICBzb3VyY2UuZGF0YS5wdXNoKG1vb2ZNZGF0KTtcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLk1FRElBX1NFR01FTlQsICdhdWRpbycsIG1vb2ZNZGF0KVxuICB9XG5cbiAgaW5pdFNpbGVudEF1ZGlvIChkdHMsIGR1cmF0aW9uKSB7XG4gICAgY29uc3QgdW5pdCA9IE1wNFJlbXV4ZXIuZ2V0U2lsZW50RnJhbWUodGhpcy5hdWRpb01ldGEuY2hhbm5lbENvdW50KVxuICAgIHJldHVybiB7XG4gICAgICBkdHMsXG4gICAgICBwdHM6IGR0cyxcbiAgICAgIGN0czogMCxcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgdW5pdCxcbiAgICAgIHNpemU6IHVuaXQuYnl0ZUxlbmd0aCxcbiAgICAgIG9yaWdpbkR0czogZHRzLFxuICAgICAgdHlwZTogJ3ZpZGVvJ1xuICAgIH1cbiAgfVxuXG4gIGdldCB2aWRlb01ldGEgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKS52aWRlb1RyYWNrLm1ldGFcbiAgfVxuICBnZXQgYXVkaW9NZXRhICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJykuYXVkaW9UcmFjay5tZXRhXG4gIH1cblxuICBzdGF0aWMgZ2V0U2lsZW50RnJhbWUgKGNoYW5uZWxDb3VudCkge1xuICAgIGlmIChjaGFubmVsQ291bnQgPT09IDEpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMywgMHg4MF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDIpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgyMSwgMHgwMCwgMHg0OSwgMHg5MCwgMHgwMiwgMHgxOSwgMHgwMCwgMHgyMywgMHg4MF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4ZV0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDQpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MCwgMHgyYywgMHg4MCwgMHgwOCwgMHgwMiwgMHgzOF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDUpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgzOF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDYpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgwMCwgMHhiMiwgMHgwMCwgMHgyMCwgMHgwOCwgMHhlMF0pXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBDb250ZXh0OiByZXF1aXJlKCcuL3NyYy9jb250ZXh0JykuZGVmYXVsdCxcblxuICAvLyBNb2R1bGVzIGZyb20gY29uc3RhbnRzXG4gIEVWRU5UUzogcmVxdWlyZSgnLi9zcmMvY29uc3RhbnRzL2V2ZW50cycpLmRlZmF1bHQsXG4gIFdPUktFUl9DT01NQU5EUzogcmVxdWlyZSgnLi9zcmMvY29uc3RhbnRzL3dvcmtlci1jb21tYW5kcycpLmRlZmF1bHQsXG5cbiAgLy8gTW9kdWxlcyBmcm9tIGVudlxuICBzbmlmZmVyOiByZXF1aXJlKCcuL3NyYy9lbnYvc25pZmZlcicpLmRlZmF1bHQsXG4gIGlzTGU6IHJlcXVpcmUoJy4vc3JjL2Vudi9pc2xlJykuZGVmYXVsdCxcbiAgVVRGODogcmVxdWlyZSgnLi9zcmMvZW52L3V0ZjgnKS5kZWZhdWx0LFxuXG4gIC8vIE1vZGVsc1xuICBNZWRpYUluZm86IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1pbmZvJykuZGVmYXVsdCxcbiAgTWVkaWFTYW1wbGU6IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1zYW1wbGUnKS5kZWZhdWx0LFxuICBNZWRpYVNlZ21lbnQ6IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1zZWdtZW50JykuZGVmYXVsdCxcbiAgTWVkaWFTZWdtZW50TGlzdDogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL21lZGlhLXNlZ21lbnQtbGlzdCcpLmRlZmF1bHQsXG4gIEF1ZGlvVHJhY2tNZXRhOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvdHJhY2stbWV0YScpLkF1ZGlvVHJhY2tNZXRhLFxuICBWaWRlb1RyYWNrTWV0YTogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL3RyYWNrLW1ldGEnKS5WaWRlb1RyYWNrTWV0YSxcbiAgQXVkaW9UcmFja1NhbXBsZTogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL3RyYWNrLXNhbXBsZScpLkF1ZGlvVHJhY2tTYW1wbGUsXG4gIFZpZGVvVHJhY2tTYW1wbGU6IHJlcXVpcmUoJy4vc3JjL21vZGVscy90cmFjay1zYW1wbGUnKS5WaWRlb1RyYWNrU2FtcGxlLFxuXG4gIC8vIE1vZHVsZXMgZnJvbSBtc2VcbiAgTXNlOiByZXF1aXJlKCcuL3NyYy9tc2UvaW5kZXgnKS5kZWZhdWx0LFxuXG4gIC8vIE1vZHVsZXMgZnJvbSB3cml0ZVxuICBTdHJlYW06IHJlcXVpcmUoJy4vc3JjL3dyaXRlL3N0cmVhbScpLmRlZmF1bHQsXG4gIEJ1ZmZlcjogcmVxdWlyZSgnLi9zcmMvd3JpdGUvYnVmZmVyJykuZGVmYXVsdFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoUmVzdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIHRvdGFsTGVuZ3RoID0gMDtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJyYXlzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFycmF5c1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBhcnJheXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICB2YXIgYXJyID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIHRvdGFsTGVuZ3RoICs9IGFyci5sZW5ndGg7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSBuZXcgUmVzdWx0Q29uc3RydWN0b3IodG90YWxMZW5ndGgpO1xuICB2YXIgb2Zmc2V0ID0gMDtcbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IGFycmF5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgdmFyIF9hcnIgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgIHJlc3VsdC5zZXQoX2Fyciwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBfYXJyLmxlbmd0aDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jb25jYXQgPSByZXF1aXJlKCcuL2NvbmNhdCcpO1xuXG52YXIgX2NvbmNhdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb25jYXQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jb25jYXQyLmRlZmF1bHQ7IiwiY29uc3QgTE9BREVSX0VWRU5UUyA9IHtcbiAgTEFERVJfU1RBUlQ6ICdMT0FERVJfU1RBUlQnLFxuICBMT0FERVJfREFUQUxPQURFRDogJ0xPQURFUl9EQVRBTE9BREVEJyxcbiAgTE9BREVSX0NPTVBMRVRFOiAnTE9BREVSX0NPTVBMRVRFJyxcbiAgTE9BREVSX0VSUk9SOiAnTE9BREVSX0VSUk9SJ1xufVxuXG5jb25zdCBERU1VWF9FVkVOVFMgPSB7XG4gIERFTVVYX1NUQVJUOiAnREVNVVhfU1RBUlQnLFxuICBERU1VWF9DT01QTEVURTogJ0RFTVVYX0NPTVBMRVRFJyxcbiAgREVNVVhfRVJST1I6ICdERU1VWF9FUlJPUicsXG4gIE1FVEFEQVRBX1BBUlNFRDogJ01FVEFEQVRBX1BBUlNFRCcsXG4gIFZJREVPX01FVEFEQVRBX0NIQU5HRTogJ1ZJREVPX01FVEFEQVRBX0NIQU5HRScsXG4gIEFVRElPX01FVEFEQVRBX0NIQU5HRTogJ0FVRElPX01FVEFEQVRBX0NIQU5HRScsXG4gIE1FRElBX0lORk86ICdNRURJQV9JTkZPJ1xufVxuXG5jb25zdCBSRU1VWF9FVkVOVFMgPSB7XG4gIFJFTVVYX01FVEFEQVRBOiAnUkVNVVhfTUVUQURBVEEnLFxuICBSRU1VWF9NRURJQTogJ1JFTVVYX01FRElBJyxcbiAgTUVESUFfU0VHTUVOVDogJ01FRElBX1NFR01FTlQnLFxuICBSRU1VWF9FUlJPUjogJ1JFTVVYX0VSUk9SJyxcbiAgSU5JVF9TRUdNRU5UOiAnSU5JVF9TRUdNRU5UJ1xufVxuXG5jb25zdCBNU0VfRVZFTlRTID0ge1xuICBTT1VSQ0VfVVBEQVRFX0VORDogJ1NPVVJDRV9VUERBVEVfRU5EJ1xufVxuXG4vLyBobHPkuJPmnIlldmVudHNcbmNvbnN0IEhMU19FVkVOVFMgPSB7XG4gIFJFVFJZX1RJTUVfRVhDRUVERUQ6ICdSRVRSWV9USU1FX0VYQ0VFREVEJ1xufVxuXG5jb25zdCBBTExFVkVOVFMgPSBPYmplY3QuYXNzaWduKHt9LCBMT0FERVJfRVZFTlRTLCBERU1VWF9FVkVOVFMsIFJFTVVYX0VWRU5UUywgTVNFX0VWRU5UUywgSExTX0VWRU5UUylcblxuY29uc3QgRmx2QWxsb3dlZEV2ZW50cyA9IFtdXG5jb25zdCBIbHNBbGxvd2VkRXZlbnRzID0gW11cblxuZm9yIChsZXQga2V5IGluIEFMTEVWRU5UUykge1xuICBpZiAoQUxMRVZFTlRTLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICBGbHZBbGxvd2VkRXZlbnRzLnB1c2goQUxMRVZFTlRTW2tleV0pXG4gIH1cbn1cblxuZm9yIChsZXQga2V5IGluIEFMTEVWRU5UUykge1xuICBpZiAoQUxMRVZFTlRTLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICBIbHNBbGxvd2VkRXZlbnRzLnB1c2goQUxMRVZFTlRTW2tleV0pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBBTExFVkVOVFMsXG4gIEhMU19FVkVOVFMsXG4gIFJFTVVYX0VWRU5UUyxcbiAgREVNVVhfRVZFTlRTLFxuICBNU0VfRVZFTlRTLFxuICBMT0FERVJfRVZFTlRTLFxuICBGbHZBbGxvd2VkRXZlbnRzLFxuICBIbHNBbGxvd2VkRXZlbnRzXG59O1xuIiwiZXhwb3J0IGNvbnN0IENPTlRFWFRfQ09NT01BTkRTID0ge1xuICBPTjogJ29uJyxcbiAgT05DRTogJ29uY2UnLFxuICBPRkY6ICdvZmYnLFxuICBFTUlUOiAnZW1pdCcsXG4gIERFU1RST1k6ICdkZXN0cm95J1xufVxuIiwiaW1wb3J0IE1lZGlhSW5mbyBmcm9tICcuL21vZGVscy9tZWRpYS1pbmZvJ1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJ1xuXG5jb25zdCBESVJFQ1RfRU1JVF9GTEFHID0gJ19fVE9fXydcblxuY2xhc3MgQ29udGV4dCB7XG4gIGNvbnN0cnVjdG9yIChhbGxvd2VkRXZlbnRzID0gW10pIHtcbiAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpXG4gICAgdGhpcy5faW5zdGFuY2VNYXAgPSB7fSAvLyDmiYDmnInnmoTop6PnoIHmtYHnqIvlrp7kvotcbiAgICB0aGlzLl9jbHNNYXAgPSB7fSAvLyDmnoTpgKDlh73mlbDnmoRtYXBcbiAgICB0aGlzLl9pbml0ZWQgPSBmYWxzZVxuICAgIHRoaXMubWVkaWFJbmZvID0gbmV3IE1lZGlhSW5mbygpXG4gICAgdGhpcy5hbGxvd2VkRXZlbnRzID0gYWxsb3dlZEV2ZW50c1xuICAgIHRoaXMuX2hvb2tzID0ge30gLy8g5rOo5YaM5Zyo5LqL5Lu25YmNL+WQjueahOmSqeWtkO+8jOS+i+WmgiBiZWZvcmUoJ0RFTVVYX0NPTVBMRVRFJylcbiAgfVxuXG4gIC8qKlxuICAgKiDku47kuIrkuIvmlofkuK3ojrflj5bop6PnoIHmtYHnqIvlrp7kvovvvIzlpoLmnpzmsqHmnInlrp7kvovvvIzmnoTpgKDkuIDkuKpcbiAgICogQHBhcmFtIHRhZ1xuICAgKiBAcGFyYW0gYXJnc1xuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGdldEluc3RhbmNlICh0YWcpIHtcbiAgICBpZiAodGhpcy5faW5zdGFuY2VNYXBbdGFnXSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlTWFwW3RhZ11cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKGAke3RhZ33lrp7kvovlsJrmnKrliJ3lp4vljJZgKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5Yid5aeL5YyW5YW35L2T5a6e5L6LXG4gICAqIEBwYXJhbSB0YWdcbiAgICogQHBhcmFtIGFyZ3NcbiAgICovXG4gIGluaXRJbnN0YW5jZSAodGFnLCAuLi5hcmdzKSB7XG4gICAgaWYgKHRoaXMuX2Nsc01hcFt0YWddKSB7XG4gICAgICBjb25zdCBuZXdJbnN0YW5jZSA9IG5ldyB0aGlzLl9jbHNNYXBbdGFnXSguLi5hcmdzKVxuICAgICAgdGhpcy5faW5zdGFuY2VNYXBbdGFnXSA9IG5ld0luc3RhbmNlXG4gICAgICBpZiAobmV3SW5zdGFuY2UuaW5pdCkge1xuICAgICAgICBuZXdJbnN0YW5jZS5pbml0KCkgLy8gVE9ETzogbGlmZWNpcmNsZVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld0luc3RhbmNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0YWd95pyq5ZyoY29udGV4dOS4reazqOWGjGApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOmBv+WFjeWkp+mHj+eahGluaXRJbnN0YW5jZeiwg+eUqO+8jOWIneWni+WMluaJgOacieeahOe7hOS7tlxuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqL1xuICBpbml0IChjb25maWcpIHtcbiAgICBpZiAodGhpcy5faW5pdGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZm9yIChsZXQgdGFnIGluIHRoaXMuX2Nsc01hcCkge1xuICAgICAgLy8gaWYgbm90IGluaXRlZCwgaW5pdCBhbiBpbnN0YW5jZVxuICAgICAgaWYgKHRoaXMuX2Nsc01hcC5oYXNPd25Qcm9wZXJ0eSh0YWcpICYmICF0aGlzLl9pbnN0YW5jZU1hcFt0YWddKSB7XG4gICAgICAgIHRoaXMuaW5pdEluc3RhbmNlKHRhZywgY29uZmlnKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9pbml0ZWQgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICog5rOo5YaM5LiA5Liq5LiK5LiL5paH5rWB56iL77yM5o+Q5L6b5a6J5YWo55qE5LqL5Lu25Y+R6YCB5py65Yi2XG4gICAqIEBwYXJhbSB0YWdcbiAgICogQHBhcmFtIGNsc1xuICAgKi9cbiAgcmVnaXN0cnkgKHRhZywgY2xzKSB7XG4gICAgY29uc3QgZW1pdHRlciA9IHRoaXMuX2VtaXR0ZXJcbiAgICBjb25zdCBjaGVja01lc3NhZ2VOYW1lID0gdGhpcy5faXNNZXNzYWdlTmFtZVZhbGlkLmJpbmQodGhpcylcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIGNvbnN0IGVuaGFuY2VkID0gY2xhc3MgZXh0ZW5kcyBjbHMge1xuICAgICAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJncylcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSB7fVxuICAgICAgICB0aGlzLm9uY2VMaXN0ZW5lcnMgPSB7fVxuICAgICAgICB0aGlzLlRBRyA9IHRhZ1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gc2VsZlxuICAgICAgfVxuXG4gICAgICBvbiAobWVzc2FnZU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG5cbiAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXSkge1xuICAgICAgICAgIHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXS5wdXNoKGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXSA9IFtjYWxsYmFja11cbiAgICAgICAgfVxuXG4gICAgICAgIGVtaXR0ZXIub24oYCR7bWVzc2FnZU5hbWV9JHtESVJFQ1RfRU1JVF9GTEFHfSR7dGFnfWAsIGNhbGxiYWNrKSAvLyDlu7rnq4vlrprlkJHpgJrkv6Hnm5HlkKxcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub24obWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIOWcqOafkOS4quS6i+S7tuinpuWPkeWJjeaJp+ihjFxuICAgICAgICogQHBhcmFtIG1lc3NhZ2VOYW1lXG4gICAgICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICAgICAqL1xuICAgICAgYmVmb3JlIChtZXNzYWdlTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcbiAgICAgICAgaWYgKHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXSkge1xuICAgICAgICAgIHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXS5wdXNoKGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXSA9IFtjYWxsYmFja11cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvbmNlIChtZXNzYWdlTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcblxuICAgICAgICBpZiAodGhpcy5vbmNlTGlzdGVuZXJzW21lc3NhZ2VOYW1lXSkge1xuICAgICAgICAgIHRoaXMub25jZUxpc3RlbmVyc1ttZXNzYWdlTmFtZV0ucHVzaChjYWxsYmFjaylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9uY2VMaXN0ZW5lcnNbbWVzc2FnZU5hbWVdID0gW2NhbGxiYWNrXVxuICAgICAgICB9XG5cbiAgICAgICAgZW1pdHRlci5vbmNlKGAke21lc3NhZ2VOYW1lfSR7RElSRUNUX0VNSVRfRkxBR30ke3RhZ31gLCBjYWxsYmFjaylcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub25jZShtZXNzYWdlTmFtZSwgY2FsbGJhY2spXG4gICAgICB9XG5cbiAgICAgIGVtaXQgKG1lc3NhZ2VOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG5cbiAgICAgICAgY29uc3QgYmVmb3JlTGlzdCA9IHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXVxuICAgICAgICBpZiAoYmVmb3JlTGlzdCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBiZWZvcmVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGJlZm9yZUxpc3RbaV1cbiAgICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIuZW1pdChtZXNzYWdlTmFtZSwgLi4uYXJncylcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiDlrprlkJHlj5HpgIHnu5nmn5DkuKrnu4Tku7bljZXkvovnmoTmtojmga9cbiAgICAgICAqIEBwYXJhbSBtZXNzYWdlTmFtZVxuICAgICAgICogQHBhcmFtIGFyZ3NcbiAgICAgICAqL1xuICAgICAgZW1pdFRvICh0YWcsIG1lc3NhZ2VOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG5cbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIuZW1pdChgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgLi4uYXJncylcbiAgICAgIH1cblxuICAgICAgb2ZmIChtZXNzYWdlTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub2ZmKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgIH1cblxuICAgICAgcmVtb3ZlTGlzdGVuZXJzICgpIHtcbiAgICAgICAgY29uc3QgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKHRoaXMubGlzdGVuZXJzKVxuXG4gICAgICAgIGZvciAobGV0IG1lc3NhZ2VOYW1lIGluIHRoaXMubGlzdGVuZXJzKSB7XG4gICAgICAgICAgaWYgKGhhc093bihtZXNzYWdlTmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXSB8fCBbXVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV1cbiAgICAgICAgICAgICAgZW1pdHRlci5vZmYobWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgICAgICAgICBlbWl0dGVyLm9mZihgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgY2FsbGJhY2spXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgbWVzc2FnZU5hbWUgaW4gdGhpcy5vbmNlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgaWYgKGhhc093bihtZXNzYWdlTmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMub25jZUxpc3RlbmVyc1ttZXNzYWdlTmFtZV0gfHwgW11cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldXG4gICAgICAgICAgICAgIGVtaXR0ZXIub2ZmKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgICAgICAgICAgZW1pdHRlci5vZmYoYCR7bWVzc2FnZU5hbWV9JHtESVJFQ1RfRU1JVF9GTEFHfSR7dGFnfWAsIGNhbGxiYWNrKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIOWcqOe7hOS7tumUgOavgeaXtu+8jOm7mOiupOWwhuWug+azqOWGjOeahOS6i+S7tuWFqOmDqOWNuOi9ve+8jOehruS/neS4jeS8mumAoOaIkOWGheWtmOazhOa8j1xuICAgICAgICovXG4gICAgICBkZXN0cm95ICgpIHtcbiAgICAgICAgLy8gc3RlcDEgdW5saXN0ZW4gZXZlbnRzXG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKClcblxuICAgICAgICAvLyBzdGVwMiByZWxlYXNlIGZyb20gY29udGV4dFxuICAgICAgICBkZWxldGUgc2VsZi5faW5zdGFuY2VNYXBbdGFnXVxuICAgICAgICBpZiAoc3VwZXIuZGVzdHJveSkge1xuICAgICAgICAgIHN1cGVyLmRlc3Ryb3koKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2Nsc01hcFt0YWddID0gZW5oYW5jZWRcblxuICAgIC8qKlxuICAgICAqIGdldCBpbnN0YW5jZSBpbW1lZGlhdGVseVxuICAgICAqIGUuZyBjb25zdCBpbnN0YW5jZSA9IGNvbnRleHQucmVnaXN0cnkodGFnLCBDbHMpKGNvbmZpZylcbiAgICAgKiAqL1xuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaW5pdEluc3RhbmNlKHRhZywgLi4uYXJncylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5a+55a2Y5Zyo55qE5a6e5L6L6L+b6KGMXG4gICAqL1xuICBkZXN0cm95SW5zdGFuY2VzICgpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9pbnN0YW5jZU1hcCkuZm9yRWFjaCgodGFnKSA9PiB7XG4gICAgICBpZiAodGhpcy5faW5zdGFuY2VNYXBbdGFnXS5kZXN0cm95KSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlTWFwW3RhZ10uZGVzdHJveSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDnvJbop6PnoIHmtYHnqIvml6DpnIDlhbPms6jkuovku7bnmoTop6Pnu5FcbiAgICovXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBudWxsXG4gICAgdGhpcy5hbGxvd2VkRXZlbnRzID0gW11cbiAgICB0aGlzLl9jbHNNYXAgPSBudWxsXG4gICAgdGhpcy5fY29udGV4dCA9IG51bGxcbiAgICB0aGlzLl9ob29rcyA9IG51bGxcbiAgICB0aGlzLmRlc3Ryb3lJbnN0YW5jZXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIOWvueS/oemBk+i/m+ihjOaUtuaLolxuICAgKiBAcGFyYW0gbWVzc2FnZU5hbWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pc01lc3NhZ2VOYW1lVmFsaWQgKG1lc3NhZ2VOYW1lKSB7XG4gICAgaWYgKCF0aGlzLmFsbG93ZWRFdmVudHMuaW5kZXhPZihtZXNzYWdlTmFtZSkgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVucmVnaXN0ZXJlZCBtZXNzYWdlIG5hbWU6ICR7bWVzc2FnZU5hbWV9YClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGV4dFxuIiwiY29uc3QgbGUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gIChuZXcgRGF0YVZpZXcoYnVmKSkuc2V0SW50MTYoMCwgMjU2LCB0cnVlKSAvLyBsaXR0bGUtZW5kaWFuIHdyaXRlXG4gIHJldHVybiAobmV3IEludDE2QXJyYXkoYnVmKSlbMF0gPT09IDI1NiAvLyBwbGF0Zm9ybS1zcGVjIHJlYWQsIGlmIGVxdWFsIHRoZW4gTEVcbn0pKClcblxuZXhwb3J0IGRlZmF1bHQgbGVcbiIsImNvbnN0IGxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYnVmID0gbmV3IEFycmF5QnVmZmVyKDIpO1xuICAobmV3IERhdGFWaWV3KGJ1ZikpLnNldEludDE2KDAsIDI1NiwgdHJ1ZSkgLy8gbGl0dGxlLWVuZGlhbiB3cml0ZVxuICByZXR1cm4gKG5ldyBJbnQxNkFycmF5KGJ1ZikpWzBdID09PSAyNTYgLy8gcGxhdGZvcm0tc3BlYyByZWFkLCBpZiBlcXVhbCB0aGVuIExFXG59KSgpXG5cbmNvbnN0IHNuaWZmZXIgPSB7XG4gIGdldCBkZXZpY2UgKCkge1xuICAgIGxldCByID0gc25pZmZlci5vcztcbiAgICByZXR1cm4gci5pc1BjID8gJ3BjJyA6IHIuaXNUYWJsZXQgPyAndGFibGV0JyA6ICdtb2JpbGUnO1xuICB9LFxuICBnZXQgYnJvd3NlciAoKSB7XG4gICAgbGV0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCByZWcgPSB7XG4gICAgICBpZTogL3J2OihbXFxkLl0rKVxcKSBsaWtlIGdlY2tvLyxcbiAgICAgIGZpcmZveDogL2ZpcmVmb3hcXC8oW1xcZC5dKykvLFxuICAgICAgY2hyb21lOiAvY2hyb21lXFwvKFtcXGQuXSspLyxcbiAgICAgIG9wZXJhOiAvb3BlcmEuKFtcXGQuXSspLyxcbiAgICAgIHNhZmFyaTogL3ZlcnNpb25cXC8oW1xcZC5dKykuKnNhZmFyaS9cbiAgICB9O1xuICAgIHJldHVybiBbXS5jb25jYXQoT2JqZWN0LmtleXMocmVnKS5maWx0ZXIoa2V5ID0+IHJlZ1trZXldLnRlc3QodWEpKSlbMF07XG4gIH0sXG4gIGdldCBvcyAoKSB7XG4gICAgbGV0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgIGxldCBpc1dpbmRvd3NQaG9uZSA9IC8oPzpXaW5kb3dzIFBob25lKS8udGVzdCh1YSlcbiAgICBsZXQgaXNTeW1iaWFuID0gLyg/OlN5bWJpYW5PUykvLnRlc3QodWEpIHx8IGlzV2luZG93c1Bob25lO1xuICAgIGxldCBpc0FuZHJvaWQgPSAvKD86QW5kcm9pZCkvLnRlc3QodWEpO1xuICAgIGxldCBpc0ZpcmVGb3ggPSAvKD86RmlyZWZveCkvLnRlc3QodWEpO1xuICAgIGxldCBpc1RhYmxldCA9IC8oPzppUGFkfFBsYXlCb29rKS8udGVzdCh1YSkgfHwgKGlzQW5kcm9pZCAmJiAhLyg/Ok1vYmlsZSkvLnRlc3QodWEpKSB8fCAoaXNGaXJlRm94ICYmIC8oPzpUYWJsZXQpLy50ZXN0KHVhKSk7XG4gICAgbGV0IGlzUGhvbmUgPSAvKD86aVBob25lKS8udGVzdCh1YSkgJiYgIWlzVGFibGV0O1xuICAgIGxldCBpc1BjID0gIWlzUGhvbmUgJiYgIWlzQW5kcm9pZCAmJiAhaXNTeW1iaWFuO1xuICAgIHJldHVybiB7XG4gICAgICBpc1RhYmxldCxcbiAgICAgIGlzUGhvbmUsXG4gICAgICBpc0FuZHJvaWQsXG4gICAgICBpc1BjLFxuICAgICAgaXNTeW1iaWFuLFxuICAgICAgaXNXaW5kb3dzUGhvbmUsXG4gICAgICBpc0ZpcmVGb3hcbiAgICB9O1xuICB9LFxuXG4gIGdldCBpc0xlICgpIHtcbiAgICByZXR1cm4gbGVcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgc25pZmZlcjtcbiIsImNsYXNzIFVURjgge1xuICBzdGF0aWMgZGVjb2RlICh1aW50OGFycmF5KSB7XG4gICAgY29uc3Qgb3V0ID0gW107XG4gICAgY29uc3QgaW5wdXQgPSB1aW50OGFycmF5O1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBsZW5ndGggPSB1aW50OGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaW5wdXRbaV0gPCAweDgwKSB7XG4gICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoaW5wdXRbaV0pKTtcbiAgICAgICAgKytpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEMwKSB7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICB9IGVsc2UgaWYgKGlucHV0W2ldIDwgMHhFMCkge1xuICAgICAgICBpZiAoVVRGOC5fY2hlY2tDb250aW51YXRpb24oaW5wdXQsIGksIDEpKSB7XG4gICAgICAgICAgY29uc3QgdWNzNCA9IChpbnB1dFtpXSAmIDB4MUYpIDw8IDYgfCAoaW5wdXRbaSArIDFdICYgMHgzRik7XG4gICAgICAgICAgaWYgKHVjczQgPj0gMHg4MCkge1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEYwKSB7XG4gICAgICAgIGlmIChVVEY4Ll9jaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMikpIHtcbiAgICAgICAgICBjb25zdCB1Y3M0ID0gKGlucHV0W2ldICYgMHhGKSA8PCAxMiB8IChpbnB1dFtpICsgMV0gJiAweDNGKSA8PCA2IHwgaW5wdXRbaSArIDJdICYgMHgzRjtcbiAgICAgICAgICBpZiAodWNzNCA+PSAweDgwMCAmJiAodWNzNCAmIDB4RjgwMCkgIT09IDB4RDgwMCkge1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEY4KSB7XG4gICAgICAgIGlmIChVVEY4Ll9jaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMykpIHtcbiAgICAgICAgICBsZXQgdWNzNCA9IChpbnB1dFtpXSAmIDB4NykgPDwgMTggfCAoaW5wdXRbaSArIDFdICYgMHgzRikgPDwgMTIgfFxuICAgICAgICAgICAgICAgICAgICAoaW5wdXRbaSArIDJdICYgMHgzRikgPDwgNiB8IChpbnB1dFtpICsgM10gJiAweDNGKTtcbiAgICAgICAgICBpZiAodWNzNCA+IDB4MTAwMDAgJiYgdWNzNCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICB1Y3M0IC09IDB4MTAwMDA7XG4gICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCh1Y3M0ID4+PiAxMCkgfCAweEQ4MDApKTtcbiAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHVjczQgJiAweDNGRikgfCAweERDMDApKTtcbiAgICAgICAgICAgIGkgKz0gNDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgweEZGRkQpKTtcbiAgICAgICsraTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xuICB9XG5cbiAgc3RhdGljIF9jaGVja0NvbnRpbnVhdGlvbiAodWludDhhcnJheSwgc3RhcnQsIGNoZWNrTGVuZ3RoKSB7XG4gICAgbGV0IGFycmF5ID0gdWludDhhcnJheTtcbiAgICBpZiAoc3RhcnQgKyBjaGVja0xlbmd0aCA8IGFycmF5Lmxlbmd0aCkge1xuICAgICAgd2hpbGUgKGNoZWNrTGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKChhcnJheVsrK3N0YXJ0XSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVVEY4O1xuIiwiY29uc3QgaXNPYmplY3RGaWxsZWQgPSAob2JqKSA9PiB7XG4gIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGlmIChvYmpba2V5XSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFJbmZvIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMubWltZVR5cGUgPSBudWxsXG4gICAgdGhpcy5kdXJhdGlvbiA9IG51bGxcblxuICAgIHRoaXMuaGFzVmlkZW8gPSBudWxsXG4gICAgdGhpcy52aWRlbyA9IHtcbiAgICAgIGNvZGVjOiBudWxsLFxuICAgICAgd2lkdGg6IG51bGwsXG4gICAgICBoZWlnaHQ6IG51bGwsXG4gICAgICBwcm9maWxlOiBudWxsLFxuICAgICAgbGV2ZWw6IG51bGwsXG4gICAgICBmcmFtZVJhdGU6IHtcbiAgICAgICAgZml4ZWQ6IHRydWUsXG4gICAgICAgIGZwczogMjUsXG4gICAgICAgIGZwc19udW06IDI1MDAwLFxuICAgICAgICBmcHNfZGVuOiAxMDAwXG4gICAgICB9LFxuICAgICAgY2hyb21hRm9ybWF0OiBudWxsLFxuICAgICAgcGFyUmF0aW86IHtcbiAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgIGhlaWdodDogMVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaGFzQXVkaW8gPSBudWxsXG5cbiAgICB0aGlzLmF1ZGlvID0ge1xuICAgICAgY29kZWM6IG51bGwsXG4gICAgICBzYW1wbGVSYXRlOiBudWxsLFxuICAgICAgc2FtcGxlUmF0ZUluZGV4OiBudWxsLFxuICAgICAgY2hhbm5lbENvdW50OiBudWxsXG4gICAgfVxuICB9XG5cbiAgaXNDb21wbGV0ZSAoKSB7XG4gICAgcmV0dXJuIE1lZGlhSW5mby5pc0Jhc2VJbmZvUmVhZHkodGhpcykgJiYgTWVkaWFJbmZvLmlzVmlkZW9SZWFkeSh0aGlzKSAmJiBNZWRpYUluZm8uaXNBdWRpb1JlYWR5KHRoaXMpXG4gIH1cblxuICBzdGF0aWMgaXNCYXNlSW5mb1JlYWR5IChtZWRpYUluZm8pIHtcbiAgICByZXR1cm4gaXNPYmplY3RGaWxsZWQobWVkaWFJbmZvKVxuICB9XG5cbiAgc3RhdGljIGlzVmlkZW9SZWFkeSAobWVkaWFJbmZvKSB7XG4gICAgaWYgKCFtZWRpYUluZm8uaGFzVmlkZW8pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGlzT2JqZWN0RmlsbGVkKG1lZGlhSW5mby52aWRlbylcbiAgfVxuXG4gIHN0YXRpYyBpc0F1ZGlvUmVhZHkgKG1lZGlhSW5mbykge1xuICAgIGlmICghbWVkaWFJbmZvLmhhc0F1ZGlvKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBpc09iamVjdEZpbGxlZChtZWRpYUluZm8udmlkZW8pXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBNZWRpYVNhbXBsZS5nZXREZWZhdWx0SW5mKClcblxuICAgIGlmICghaW5mbyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5mbykgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRcbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBpbmZvKVxuXG4gICAgT2JqZWN0LmVudHJpZXMoc2FtcGxlKS5mb3JFYWNoKChbaywgdl0pID0+IHtcbiAgICAgIHRoaXNba10gPSB2XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0SW5mICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgZHVyYXRpb246IG51bGwsXG4gICAgICBwb3NpdGlvbjogbnVsbCxcbiAgICAgIGlzUkFQOiBmYWxzZSwgLy8gaXMgUmFuZG9tIGFjY2VzcyBwb2ludFxuICAgICAgb3JpZ2luRHRzOiBudWxsXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYVNlZ21lbnRMaXN0IHtcblxuICAgIGNvbnN0cnVjdG9yICh0eXBlKSB7XG4gICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLl9saXN0ID0gW107XG4gICAgICAgIHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbiA9IC0xOyAvLyBjYWNoZWQgbGFzdCBpbnNlcnQgbG9jYXRpb25cbiAgICB9XG5cbiAgICBnZXQgdHlwZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgIH1cblxuICAgIGdldCBsZW5ndGggKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5sZW5ndGg7XG4gICAgfVxuXG4gICAgaXNFbXB0eSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICBjbGVhciAoKSB7XG4gICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gLTE7XG4gICAgfVxuXG4gICAgX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuX2xpc3Q7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0yO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYXN0ID0gbGlzdC5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgbWlkID0gMDtcbiAgICAgICAgbGV0IGxib3VuZCA9IDA7XG4gICAgICAgIGxldCB1Ym91bmQgPSBsYXN0O1xuXG4gICAgICAgIGxldCBpZHggPSAwO1xuXG4gICAgICAgIGlmIChiZWdpbkR0cyA8IGxpc3RbMF0ub3JpZ2luRHRzKSB7XG4gICAgICAgICAgICBpZHggPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAobGJvdW5kIDw9IHVib3VuZCkge1xuICAgICAgICAgICAgbWlkID0gbGJvdW5kICsgTWF0aC5mbG9vcigodWJvdW5kIC0gbGJvdW5kKSAvIDIpO1xuICAgICAgICAgICAgaWYgKG1pZCA9PT0gbGFzdCB8fCAoYmVnaW5EdHMgPiBsaXN0W21pZF0ubGFzdFNhbXBsZS5vcmlnaW5EdHNcbiAgICAgICAgICAgICAgICAgICAgJiYgKGJlZ2luRHRzIDwgbGlzdFttaWQgKyAxXS5vcmlnaW5EdHMpKSkge1xuICAgICAgICAgICAgICAgIGlkeCA9IG1pZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlzdFttaWRdLm9yaWdpbkR0cyA8IGJlZ2luRHRzKSB7XG4gICAgICAgICAgICAgICAgbGJvdW5kID0gbWlkICsgMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWJvdW5kID0gbWlkIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cblxuICAgIF9zZWFyY2hOZWFyZXN0U2VnbWVudEFmdGVyIChiZWdpbkR0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpICsgMTtcbiAgICB9XG5cbiAgICBhcHBlbmQgKHNlZ21lbnQpIHtcbiAgICAgICAgbGV0IGxpc3QgPSB0aGlzLl9saXN0O1xuICAgICAgICBsZXQgbGFzdEFwcGVuZElkeCA9IHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbjtcbiAgICAgICAgbGV0IGluc2VydElkeCA9IDA7XG5cbiAgICAgICAgaWYgKGxhc3RBcHBlbmRJZHggIT09IC0xICYmIGxhc3RBcHBlbmRJZHggPCBsaXN0Lmxlbmd0aFxuICAgICAgICAgICAgJiYgc2VnbWVudC5vcmlnaW5TdGFydER0cyA+PSBsaXN0W2xhc3RBcHBlbmRJZHhdLmxhc3RTYW1wbGUub3JpZ2luRHRzXG4gICAgICAgICAgICAmJiAoKGxhc3RBcHBlbmRJZHggPT09IGxpc3QubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICB8fCAobGFzdEFwcGVuZElkeCA8IGxpc3QubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICAmJiBzZWdtZW50Lm9yaWdpblN0YXJ0RHRzIDwgbGlzdFtsYXN0QXBwZW5kSWR4ICsgMV0ub3JpZ2luU3RhcnREdHMpKSkge1xuICAgICAgICAgICAgaW5zZXJ0SWR4ID0gbGFzdEFwcGVuZElkeCArIDE7IC8vIHVzZSBjYWNoZWQgbG9jYXRpb24gaWR4XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0SWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoc2VnbWVudC5vcmlnaW5TdGFydER0cykgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gaW5zZXJ0SWR4O1xuICAgICAgICB0aGlzLl9saXN0LnNwbGljZShpbnNlcnRJZHgsIDAsIHNlZ21lbnQpO1xuICAgIH1cblxuICAgIGdldExhc3RTZWdtZW50QmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgaWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0W2lkeF07XG4gICAgICAgIH0gZWxzZSB7IC8vIC0xXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldExhc3RTYW1wbGVCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBzZWdtZW50ID0gdGhpcy5nZXRMYXN0U2VnbWVudEJlZm9yZShiZWdpbkR0cyk7XG4gICAgICAgIGlmIChzZWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VnbWVudC5sYXN0U2FtcGxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRMYXN0UkFQQmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgc2VnbWVudElkeCA9IHRoaXMuX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKGJlZ2luRHRzKTtcbiAgICAgICAgbGV0IHJhbmRvbUFjY2Vzc1BvaW50cyA9IHRoaXMuX2xpc3Rbc2VnbWVudElkeF0ucmFuZG9tQWNjZXNzUG9pbnRzO1xuICAgICAgICB3aGlsZSAocmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCA9PT0gMCAmJiBzZWdtZW50SWR4ID4gMCkge1xuICAgICAgICAgICAgc2VnbWVudElkeC0tO1xuICAgICAgICAgICAgcmFuZG9tQWNjZXNzUG9pbnRzID0gdGhpcy5fbGlzdFtzZWdtZW50SWR4XS5yYW5kb21BY2Nlc3NQb2ludHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhbmRvbUFjY2Vzc1BvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZG9tQWNjZXNzUG9pbnRzW3JhbmRvbUFjY2Vzc1BvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFTZWdtZW50IHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuc3RhcnREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5lbmREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5zdGFydFB0cyA9IC0xO1xuICAgICAgICB0aGlzLmVuZFB0cyA9IC0xO1xuICAgICAgICB0aGlzLm9yaWdpblN0YXJ0RHRzID0gLTE7XG4gICAgICAgIHRoaXMub3JpZ2luRW5kRHRzID0gLTE7XG4gICAgICAgIHRoaXMucmFuZG9tQWNjZXNzUG9pbnRzID0gW107XG4gICAgICAgIHRoaXMuZmlyc3RTYW1wbGUgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RTYW1wbGUgPSBudWxsO1xuICAgIH1cblxuICAgIGFkZFJBUCAoc2FtcGxlKSB7XG4gICAgICAgIHNhbXBsZS5pc1JBUCA9IHRydWU7XG4gICAgICAgIHRoaXMucmFuZG9tQWNjZXNzUG9pbnRzLnB1c2goc2FtcGxlKTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tNZXRhIHtcbiAgY29uc3RydWN0b3IgKG1ldGEpIHtcbiAgICBjb25zdCBfZGVmYXVsdCA9IHtcbiAgICAgIHNhbXBsZVJhdGU6IDQ4MDAwLFxuICAgICAgY2hhbm5lbENvdW50OiAyLFxuICAgICAgY29kZWM6ICdtcDRhLjQwLjInLFxuICAgICAgY29uZmlnOiBbNDEsIDQwMSwgMTM2LCAwXSxcbiAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgaWQ6IDIsXG4gICAgICByZWZTYW1wbGVEdXJhdGlvbjogMjEsXG4gICAgICBzYW1wbGVSYXRlSW5kZXg6IDMsXG4gICAgICB0aW1lc2NhbGU6IDEwMDAsXG4gICAgICB0eXBlOiAnYXVkaW8nXG4gICAgfVxuICAgIGlmIChtZXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgX2RlZmF1bHQsIG1ldGEpXG4gICAgfVxuICAgIHJldHVybiBfZGVmYXVsdFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrTWV0YSB7XG4gIGNvbnN0cnVjdG9yIChtZXRhKSB7XG4gICAgY29uc3QgX2RlZmF1bHQgPSB7XG4gICAgICBhdmNjOiBudWxsLFxuICAgICAgc3BzOiBuZXcgVWludDhBcnJheSgwKSxcbiAgICAgIHBwczogbmV3IFVpbnQ4QXJyYXkoMCksXG4gICAgICBjaHJvbWFGb3JtYXQ6IDQyMCxcbiAgICAgIGNvZGVjOiAnYXZjMS42NDAwMjAnLFxuICAgICAgY29kZWNIZWlnaHQ6IDcyMCxcbiAgICAgIGNvZGVjV2lkdGg6IDEyODAsXG4gICAgICBkdXJhdGlvbjogMCxcbiAgICAgIGZyYW1lUmF0ZToge1xuICAgICAgICBmaXhlZDogdHJ1ZSxcbiAgICAgICAgZnBzOiAyNSxcbiAgICAgICAgZnBzX251bTogMjUwMDAsXG4gICAgICAgIGZwc19kZW46IDEwMDBcbiAgICAgIH0sXG4gICAgICBpZDogMSxcbiAgICAgIGxldmVsOiAnMy4yJyxcbiAgICAgIHByZXNlbnRIZWlnaHQ6IDcyMCxcbiAgICAgIHByZXNlbnRXaWR0aDogMTI4MCxcbiAgICAgIHByb2ZpbGU6ICdIaWdoJyxcbiAgICAgIHJlZlNhbXBsZUR1cmF0aW9uOiA0MCxcbiAgICAgIHBhclJhdGlvOiB7XG4gICAgICAgIGhlaWdodDogMSxcbiAgICAgICAgd2lkdGg6IDFcbiAgICAgIH0sXG4gICAgICB0aW1lc2NhbGU6IDEwMDAsXG4gICAgICB0eXBlOiAndmlkZW8nXG4gICAgfVxuXG4gICAgaWYgKG1ldGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgbWV0YSlcbiAgICB9XG4gICAgcmV0dXJuIF9kZWZhdWx0XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBBdWRpb1RyYWNrU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBBdWRpb1RyYWNrU2FtcGxlLmdldERlZmF1bHQoKVxuICAgIGlmICghaW5mbykge1xuICAgICAgcmV0dXJuIF9kZWZhdWx0XG4gICAgfVxuICAgIGxldCBzYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgaW5mbylcblxuICAgIHJldHVybiBzYW1wbGVcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0ICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmlkZW9UcmFja1NhbXBsZSB7XG4gIGNvbnN0cnVjdG9yIChpbmZvKSB7XG4gICAgbGV0IF9kZWZhdWx0ID0gVmlkZW9UcmFja1NhbXBsZS5nZXREZWZhdWx0KClcblxuICAgIGlmICghaW5mbykge1xuICAgICAgcmV0dXJuIF9kZWZhdWx0XG4gICAgfVxuICAgIGxldCBzYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgaW5mbylcblxuICAgIHJldHVybiBzYW1wbGVcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0ICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgaXNLZXlmcmFtZTogZmFsc2UsIC8vIGlzIFJhbmRvbSBhY2Nlc3MgcG9pbnRcbiAgICAgIG9yaWdpbkR0czogbnVsbCxcbiAgICAgIGRhdGE6IG5ldyBVaW50OEFycmF5KClcbiAgICB9XG4gIH1cbn1cbiIsImNsYXNzIE1TRSB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5jb25maWdzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlncyk7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmNvbmZpZ3MuY29udGFpbmVyO1xuICAgIHRoaXMubWVkaWFTb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuc291cmNlQnVmZmVycyA9IHt9O1xuICAgIHRoaXMucHJlbG9hZFRpbWUgPSB0aGlzLmNvbmZpZ3MucHJlbG9hZFRpbWUgfHwgMTtcbiAgICB0aGlzLm9uU291cmNlT3BlbiA9IHRoaXMub25Tb3VyY2VPcGVuLmJpbmQodGhpcylcbiAgICB0aGlzLm9uVGltZVVwZGF0ZSA9IHRoaXMub25UaW1lVXBkYXRlLmJpbmQodGhpcylcbiAgICB0aGlzLm9uV2FpdGluZyA9IHRoaXMub25XYWl0aW5nLmJpbmQodGhpcylcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHRoaXMubWVkaWFTb3VyY2UgPSBuZXcgc2VsZi5NZWRpYVNvdXJjZSgpO1xuICAgIHRoaXMubWVkaWFTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMub25Tb3VyY2VPcGVuKTtcbiAgICB0aGlzLmNvbnRhaW5lci5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHRoaXMubWVkaWFTb3VyY2UpO1xuICAgIHRoaXMudXJsID0gdGhpcy5jb250YWluZXIuc3JjO1xuICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCB0aGlzLm9uVGltZVVwZGF0ZSk7XG4gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIHRoaXMub25XYWl0aW5nKTtcbiAgfVxuXG4gIG9uVGltZVVwZGF0ZSAoKSB7XG4gICAgdGhpcy5lbWl0KCdUSU1FX1VQREFURScsIHRoaXMuY29udGFpbmVyKTtcbiAgfVxuXG4gIG9uV2FpdGluZyAoKSB7XG4gICAgdGhpcy5lbWl0KCdXQUlUSU5HJywgdGhpcy5jb250YWluZXIpO1xuICB9XG5cbiAgb25Tb3VyY2VPcGVuICgpIHtcbiAgICB0aGlzLmFkZFNvdXJjZUJ1ZmZlcnMoKTtcbiAgfVxuXG4gIG9uVXBkYXRlRW5kICgpIHtcbiAgICB0aGlzLmVtaXQoJ1NPVVJDRV9VUERBVEVfRU5EJyk7XG4gICAgdGhpcy5kb0FwcGVuZCgpXG4gIH1cbiAgYWRkU291cmNlQnVmZmVycyAoKSB7XG4gICAgaWYgKHRoaXMubWVkaWFTb3VyY2UucmVhZHlTdGF0ZSAhPT0gJ29wZW4nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzb3VyY2VzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgdHJhY2tzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJyk7XG4gICAgbGV0IHRyYWNrO1xuXG4gICAgc291cmNlcyA9IHNvdXJjZXMuc291cmNlcztcbiAgICBsZXQgYWRkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDAsIGsgPSBPYmplY3Qua2V5cyhzb3VyY2VzKS5sZW5ndGg7IGkgPCBrOyBpKyspIHtcbiAgICAgIGxldCB0eXBlID0gT2JqZWN0LmtleXMoc291cmNlcylbaV07XG4gICAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICB0cmFjayA9IHRyYWNrcy5hdWRpb1RyYWNrO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgIHRyYWNrID0gdHJhY2tzLnZpZGVvVHJhY2s7XG4gICAgICB9XG4gICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgbGV0IGR1ciA9IHR5cGUgPT09ICdhdWRpbycgPyAyMSA6IDQwO1xuICAgICAgICBpZiAodHJhY2subWV0YSAmJiB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSBkdXIgPSB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uO1xuICAgICAgICBpZiAoc291cmNlc1t0eXBlXS5kYXRhLmxlbmd0aCA+PSAodGhpcy5wcmVsb2FkVGltZSAvIGR1cikpIHtcbiAgICAgICAgICBhZGQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFkZCkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMCwgayA9IE9iamVjdC5rZXlzKHNvdXJjZXMpLmxlbmd0aDsgaSA8IGs7IGkrKykge1xuICAgICAgICBsZXQgdHlwZSA9IE9iamVjdC5rZXlzKHNvdXJjZXMpW2ldO1xuICAgICAgICBsZXQgc291cmNlID0gc291cmNlc1t0eXBlXVxuICAgICAgICBsZXQgbWltZSA9ICh0eXBlID09PSAndmlkZW8nKSA/ICd2aWRlby9tcDQ7Y29kZWNzPScgKyBzb3VyY2UubWltZXR5cGUgOiAnYXVkaW8vbXA0O2NvZGVjcz0nICsgc291cmNlLm1pbWV0eXBlXG4gICAgICAgIGxldCBzb3VyY2VCdWZmZXIgPSB0aGlzLm1lZGlhU291cmNlLmFkZFNvdXJjZUJ1ZmZlcihtaW1lKTtcbiAgICAgICAgdGhpcy5zb3VyY2VCdWZmZXJzW3R5cGVdID0gc291cmNlQnVmZmVyO1xuICAgICAgICBzb3VyY2VCdWZmZXIuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgdGhpcy5vblVwZGF0ZUVuZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5kb0FwcGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRvQXBwZW5kICgpIHtcbiAgICBsZXQgc291cmNlcyA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1BSRV9TT1VSQ0VfQlVGRkVSJyk7XG4gICAgaWYgKHNvdXJjZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdHlwZSA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1cbiAgICAgICAgbGV0IHNvdXJjZUJ1ZmZlciA9IHRoaXMuc291cmNlQnVmZmVyc1t0eXBlXTtcbiAgICAgICAgaWYgKCFzb3VyY2VCdWZmZXIudXBkYXRpbmcpIHtcbiAgICAgICAgICBsZXQgc291cmNlID0gc291cmNlcy5zb3VyY2VzW3R5cGVdO1xuICAgICAgICAgIGlmIChzb3VyY2UgJiYgIXNvdXJjZS5pbml0ZWQpIHtcbiAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hcHBlbmRCdWZmZXIoc291cmNlLmluaXQuYnVmZmVyLmJ1ZmZlcik7XG4gICAgICAgICAgICBzb3VyY2UuaW5pdGVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBzb3VyY2UuZGF0YS5zaGlmdCgpXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYXBwZW5kQnVmZmVyKGRhdGEuYnVmZmVyLmJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZW5kT2ZTdHJlYW0gKCkge1xuICAgIGlmICh0aGlzLm1lZGlhU291cmNlLnJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgdGhpcy5tZWRpYVNvdXJjZS5lbmRPZlN0cmVhbSgpXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlIChlbmQpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBidWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXV07XG4gICAgICBpZiAoIWJ1ZmZlci51cGRhdGluZykge1xuICAgICAgICBidWZmZXIucmVtb3ZlKDAsIGVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsIHRoaXMub25UaW1lVXBkYXRlKTtcbiAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCd3YWl0aW5nJywgdGhpcy5vbldhaXRpbmcpO1xuICAgIHRoaXMubWVkaWFTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMub25Tb3VyY2VPcGVuKTtcbiAgICB0aGlzLmNvbmZpZ3MgPSB7fTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XG4gICAgdGhpcy5tZWRpYVNvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5zb3VyY2VCdWZmZXJzID0ge307XG4gICAgdGhpcy5wcmVsb2FkVGltZSA9IDE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgYnVmZmVyID0gdGhpcy5zb3VyY2VCdWZmZXJzW09iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1dO1xuICAgICAgYnVmZmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWVuZCcsIHRoaXMub25VcGRhdGVFbmQpO1xuICAgICAgdGhpcy5tZWRpYVNvdXJjZS5yZW1vdmVTb3VyY2VCdWZmZXIoYnVmZmVyKTtcbiAgICAgIGRlbGV0ZSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXV07XG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBNU0U7XG4iLCJpbXBvcnQgQ29uY2F0IGZyb20gJ2NvbmNhdC10eXBlZC1hcnJheSdcblxuY2xhc3MgQnVmZmVyIHtcbiAgY29uc3RydWN0b3IgKGJ1ZmZlcikge1xuICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyIHx8IG5ldyBVaW50OEFycmF5KDApXG4gIH1cblxuICB3cml0ZSAoLi4uYnVmZmVyKSB7XG4gICAgYnVmZmVyLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IENvbmNhdChVaW50OEFycmF5LCB0aGlzLmJ1ZmZlciwgaXRlbSlcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIHdyaXRlVWludDMyICh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXG4gICAgICB2YWx1ZSA+PiAyNCxcbiAgICAgICh2YWx1ZSA+PiAxNikgJiAweGZmLFxuICAgICAgKHZhbHVlID4+IDgpICYgMHhmZixcbiAgICAgIHZhbHVlICYgMHhmZlxuICAgIF0pXG4gIH1cblxuICBzdGF0aWMgcmVhZEFzSW50IChhcnIpIHtcbiAgICBsZXQgdGVtcCA9ICcnXG5cbiAgICBmdW5jdGlvbiBwYWRTdGFydDRIZXggKGhleE51bSkge1xuICAgICAgbGV0IGhleFN0ciA9IGhleE51bS50b1N0cmluZygxNilcbiAgICAgIHJldHVybiBoZXhTdHIucGFkU3RhcnQoMiwgJzAnKVxuICAgIH1cblxuICAgIGFyci5mb3JFYWNoKG51bSA9PiB7XG4gICAgICB0ZW1wICs9IHBhZFN0YXJ0NEhleChudW0pXG4gICAgfSlcbiAgICByZXR1cm4gcGFyc2VJbnQodGVtcCwgMTYpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnVmZmVyXG4iLCJjbGFzcyBTdHJlYW0ge1xuICBjb25zdHJ1Y3RvciAoYnVmZmVyKSB7XG4gICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgIHRoaXMuZGF0YXZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICAgIHRoaXMuZGF0YXZpZXcucG9zaXRpb24gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBsZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgc2V0IHBvc2l0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuZGF0YXZpZXcucG9zaXRpb24gPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBwb3NpdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YXZpZXcucG9zaXRpb247XG4gIH1cblxuICBiYWNrIChjb3VudCkge1xuICAgIHRoaXMucG9zaXRpb24gLT0gY291bnQ7XG4gIH1cblxuICBza2lwIChjb3VudCkge1xuICAgIGxldCBsb29wID0gTWF0aC5mbG9vcihjb3VudCAvIDQpO1xuICAgIGxldCBsYXN0ID0gY291bnQgJSA0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcDsgaSsrKSB7XG4gICAgICBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgNCk7XG4gICAgfVxuICAgIGlmIChsYXN0ID4gMCkge1xuICAgICAgU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIGxhc3QpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbcmVhZEJ5dGUg5LuORGF0YVZpZXfkuK3or7vlj5bmlbDmja5dXG4gICAqIEBwYXJhbSAge0RhdGFWaWV3fSBidWZmZXIgW0RhdGFWaWV35a6e5L6LXVxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHNpemUgICBb6K+75Y+W5a2X6IqC5pWwXVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICBb5pW05pWwXVxuICAgKi9cbiAgc3RhdGljIHJlYWRCeXRlIChidWZmZXIsIHNpemUsIHNpZ24pIHtcbiAgICBsZXQgcmVzO1xuICAgIHN3aXRjaCAoc2l6ZSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRJbnQ4KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQ4KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGlmIChzaWduKSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldEludDE2KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQxNihidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnRlZCBmb3IgcmVhZEJ5dGUgMycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50OChidWZmZXIucG9zaXRpb24pIDw8IDE2O1xuICAgICAgICAgIHJlcyB8PSBidWZmZXIuZ2V0VWludDgoYnVmZmVyLnBvc2l0aW9uICsgMSkgPDwgODtcbiAgICAgICAgICByZXMgfD0gYnVmZmVyLmdldFVpbnQ4KGJ1ZmZlci5wb3NpdGlvbiArIDIpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRJbnQzMihidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50MzIoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgaWYgKHNpZ24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBzdXBwb3J0ZWQgZm9yIHJlYWRCb2R5IDgnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0VWludDMyKGJ1ZmZlci5wb3NpdGlvbikgPDwgMzI7XG4gICAgICAgICAgcmVzIHw9IGJ1ZmZlci5nZXRVaW50MzIoYnVmZmVyLnBvc2l0aW9uICsgNCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXMgPSAnJztcbiAgICB9XG4gICAgYnVmZmVyLnBvc2l0aW9uICs9IHNpemU7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIHJlYWRVaW50OCAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAxKTtcbiAgfVxuXG4gIHJlYWRVaW50MTYgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMik7XG4gIH1cblxuICByZWFkVWludDI0ICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDMpO1xuICB9XG5cbiAgcmVhZFVpbnQzMiAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCA0KTtcbiAgfVxuXG4gIHJlYWRVaW50NjQgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgOCk7XG4gIH1cblxuICByZWFkSW50OCAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAxLCB0cnVlKTtcbiAgfVxuICByZWFkSW50MTYgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMiwgdHJ1ZSk7XG4gIH1cblxuICByZWFkSW50MzIgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgNCwgdHJ1ZSk7XG4gIH1cblxuICB3cml0ZVVpbnQzMiAodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgdmFsdWUgPj4+IDI0ICYgMHhmZixcbiAgICAgIHZhbHVlID4+PiAxNiAmIDB4ZmYsXG4gICAgICB2YWx1ZSA+Pj4gOCAmIDB4ZmYsXG4gICAgICB2YWx1ZSAmIDB4ZmZcbiAgICBdKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdHJlYW07XG4iLCJpbXBvcnQgUmVtdXhlciBmcm9tICd4Z3BsYXllci1yZW11eCdcbmltcG9ydCB7IEZldGNoTG9hZGVyIH0gZnJvbSAneGdwbGF5ZXItbG9hZGVyJ1xuaW1wb3J0IHsgRmx2RGVtdXhlciB9IGZyb20gJ3hncGxheWVyLWRlbXV4J1xuaW1wb3J0IHsgVHJhY2tzLCBYZ0J1ZmZlciwgUHJlU291cmNlIH0gZnJvbSAneGdwbGF5ZXItYnVmZmVyJ1xuaW1wb3J0IHsgTXNlLCBFVkVOVFMgfSBmcm9tICd4Z3BsYXllci11dGlscydcbmltcG9ydCB7IENvbXBhdGliaWxpdHkgfSBmcm9tICd4Z3BsYXllci1jb2RlYydcbmltcG9ydCBQbGF5ZXIgZnJvbSAneGdwbGF5ZXInXG5cbmNvbnN0IFJFTVVYX0VWRU5UUyA9IEVWRU5UUy5SRU1VWF9FVkVOVFM7XG5jb25zdCBERU1VWF9FVkVOVFMgPSBFVkVOVFMuREVNVVhfRVZFTlRTO1xuY29uc3QgTE9BREVSX0VWRU5UUyA9IEVWRU5UUy5MT0FERVJfRVZFTlRTXG5jb25zdCBNU0VfRVZFTlRTID0gRVZFTlRTLk1TRV9FVkVOVFNcblxuY29uc3QgVGFnID0gJ0ZMVkNvbnRyb2xsZXInXG5cbmNsYXNzIExvZ2dlciB7XG4gIHdhcm4gKCkge31cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmx2Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yIChwbGF5ZXIpIHtcbiAgICB0aGlzLlRBRyA9IFRhZ1xuICAgIHRoaXMuX3BsYXllciA9IHBsYXllclxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGluaXRTZWdtZW50QXJyaXZlZDogZmFsc2VcbiAgICB9XG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdGRVRDSF9MT0FERVInLCBGZXRjaExvYWRlcilcbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdMT0FERVJfQlVGRkVSJywgWGdCdWZmZXIpXG5cbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdGTFZfREVNVVhFUicsIEZsdkRlbXV4ZXIpXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnVFJBQ0tTJywgVHJhY2tzKVxuXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnTVA0X1JFTVVYRVInLCBSZW11eGVyLk1wNFJlbXV4ZXIpXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnUFJFX1NPVVJDRV9CVUZGRVInLCBQcmVTb3VyY2UpXG5cbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdDT01QQVRJQklMSVRZJywgQ29tcGF0aWJpbGl0eSlcblxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0xPR0dFUicsIExvZ2dlcilcbiAgICB0aGlzLm1zZSA9IHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ01TRScsIE1zZSkoeyBjb250YWluZXI6IHRoaXMuX3BsYXllci52aWRlbyB9KVxuXG4gICAgdGhpcy5pbml0TGlzdGVuZXJzKClcbiAgfVxuXG4gIGluaXRMaXN0ZW5lcnMgKCkge1xuICAgIHRoaXMub24oTE9BREVSX0VWRU5UUy5MT0FERVJfREFUQUxPQURFRCwgdGhpcy5faGFuZGxlTG9hZGVyRGF0YUxvYWRlZC5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oTE9BREVSX0VWRU5UUy5MT0FERVJfRVJST1IsIHRoaXMuX2hhbmRsZU5ldHdvcmtFcnJvci5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuTUVESUFfSU5GTywgdGhpcy5faGFuZGxlTWVkaWFJbmZvLmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCB0aGlzLl9oYW5kbGVNZXRhZGF0YVBhcnNlZC5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFLCB0aGlzLl9oYW5kbGVEZW11eENvbXBsZXRlLmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIHRoaXMuX2hhbmRsZURlbXV4RXJyb3IuYmluZCh0aGlzKSlcblxuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLklOSVRfU0VHTUVOVCwgdGhpcy5faGFuZGxlQXBwZW5kSW5pdFNlZ21lbnQuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5NRURJQV9TRUdNRU5ULCB0aGlzLl9oYW5kbGVNZWRpYVNlZ21lbnQuYmluZCh0aGlzKSlcblxuICAgIHRoaXMub24oTVNFX0VWRU5UUy5TT1VSQ0VfVVBEQVRFX0VORCwgdGhpcy5faGFuZGxlU291cmNlVXBkYXRlRW5kLmJpbmQodGhpcykpXG5cbiAgICB0aGlzLl9wbGF5ZXIub24oJ3RpbWV1cGRhdGUnLCB0aGlzLl9oYW5kbGVUaW1lVXBkYXRlLmJpbmQodGhpcykpXG4gIH1cblxuICBfaGFuZGxlTWVkaWFJbmZvICgpIHtcbiAgICBpZiAoIXRoaXMuX2NvbnRleHQubWVkaWFJbmZvKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBnZXQgbWVkaWFpbmZvJykpXG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZUxvYWRlckRhdGFMb2FkZWQgKCkge1xuICAgIHRoaXMuZW1pdFRvKCdGTFZfREVNVVhFUicsIERFTVVYX0VWRU5UUy5ERU1VWF9TVEFSVClcbiAgfVxuXG4gIF9oYW5kbGVNZXRhZGF0YVBhcnNlZCAodHlwZSkge1xuICAgIHRoaXMuZW1pdChSRU1VWF9FVkVOVFMuUkVNVVhfTUVUQURBVEEsIHR5cGUpXG4gIH1cbiAgX2hhbmRsZURlbXV4Q29tcGxldGUgKCkge1xuICAgIHRoaXMuZW1pdChSRU1VWF9FVkVOVFMuUkVNVVhfTUVESUEpXG4gIH1cblxuICBfaGFuZGxlQXBwZW5kSW5pdFNlZ21lbnQgKCkge1xuICAgIHRoaXMuc3RhdGUuaW5pdFNlZ21lbnRBcnJpdmVkID0gdHJ1ZVxuICAgIHRoaXMubXNlLmFkZFNvdXJjZUJ1ZmZlcnMoKVxuICB9XG5cbiAgX2hhbmRsZU1lZGlhU2VnbWVudCAoKSB7XG4gICAgdGhpcy5tc2UuYWRkU291cmNlQnVmZmVycygpXG4gICAgdGhpcy5tc2UuZG9BcHBlbmQoKTtcbiAgfVxuXG4gIF9oYW5kbGVTb3VyY2VVcGRhdGVFbmQgKCkge1xuICAgIGNvbnN0IHRpbWUgPSB0aGlzLl9wbGF5ZXIuY3VycmVudFRpbWU7XG4gICAgY29uc3QgdmlkZW8gPSB0aGlzLl9wbGF5ZXIudmlkZW87XG4gICAgY29uc3QgcHJlbG9hZFRpbWUgPSB0aGlzLl9wbGF5ZXIuY29uZmlnLnByZWxvYWRUaW1lIHx8IDVcblxuICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSB2aWRlby5idWZmZXJlZDtcblxuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXJFbmQgPSB2aWRlby5idWZmZXJlZC5lbmQobGVuZ3RoIC0gMSk7XG4gICAgaWYgKGJ1ZmZlckVuZCAtIHRpbWUgPiBwcmVsb2FkVGltZSAqIDIpIHtcbiAgICAgIHRoaXMuX3BsYXllci5jdXJyZW50VGltZSA9IGJ1ZmZlckVuZCAtIHByZWxvYWRUaW1lXG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZVRpbWVVcGRhdGUgKCkge1xuICAgIGNvbnN0IHRpbWUgPSB0aGlzLl9wbGF5ZXIuY3VycmVudFRpbWVcbiAgICBpZiAodGltZSA+IDIpIHtcbiAgICAgIC8vIOWcqOebtOaSreaXtuWPiuaXtua4heepumJ1ZmZlcu+8jOmZjeS9juebtOaSreWGheWtmOWNoOeUqFxuICAgICAgdGhpcy5tc2UucmVtb3ZlKHRpbWUgLSAyKVxuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVOZXR3b3JrRXJyb3IgKCkge1xuICAgIHRoaXMuX3BsYXllci5lbWl0KCdlcnJvcicsIG5ldyBQbGF5ZXIuRXJyb3JzKCduZXR3b3JrJywgdGhpcy5fcGxheWVyLmNvbmZpZy51cmwpKVxuICB9XG5cbiAgX2hhbmRsZURlbXV4RXJyb3IoKSB7XG4gICAgdGhpcy5fcGxheWVyLmVtaXQoJ2Vycm9yJywgbmV3IFBsYXllci5FcnJvcnMoJ3BhcnNlJywgdGhpcy5fcGxheWVyLmNvbmZpZy51cmwpKVxuICB9XG5cbiAgc2VlayAoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmluaXRTZWdtZW50QXJyaXZlZCkge1xuICAgICAgdGhpcy5sb2FkRGF0YSgpXG4gICAgfVxuICB9XG5cbiAgbG9hZERhdGEgKCkge1xuICAgIHRoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxBREVSX1NUQVJULCB0aGlzLl9wbGF5ZXIuY29uZmlnLnVybClcbiAgfVxuXG4gIHBhdXNlICgpIHtcbiAgICBjb25zdCBsb2FkZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdGRVRDSF9MT0FERVInKVxuXG4gICAgaWYgKGxvYWRlcikge1xuICAgICAgbG9hZGVyLmNhbmNlbCgpXG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fcGxheWVyID0gbnVsbFxuICAgIHRoaXMubXNlID0gbnVsbFxuICB9XG59XG4iLCJpbXBvcnQgUGxheWVyIGZyb20gJ3hncGxheWVyJ1xuaW1wb3J0IHsgQ29udGV4dCwgRVZFTlRTIH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuaW1wb3J0IEZMViBmcm9tICcuL2Zsdi12b2QnXG5cbmNvbnN0IGZsdkFsbG93ZWRFdmVudHMgPSBFVkVOVFMuRmx2QWxsb3dlZEV2ZW50cztcblxuY29uc3QgaXNFbmRlZCA9IChwbGF5ZXIsIGZsdikgPT4ge1xuICBpZiAoIXBsYXllci5jb25maWcuaXNMaXZlKSB7XG4gICAgaWYgKHBsYXllci5kdXJhdGlvbiAtIHBsYXllci5jdXJyZW50VGltZSA8IDIpIHtcbiAgICAgIGNvbnN0IHJhbmdlID0gcGxheWVyLmdldEJ1ZmZlcmVkUmFuZ2UoKVxuICAgICAgaWYgKHBsYXllci5jdXJyZW50VGltZSAtIHJhbmdlWzFdIDwgMC4xKSB7XG4gICAgICAgIHBsYXllci5lbWl0KCdlbmRlZCcpXG4gICAgICAgIGZsdi5tc2UuZW5kT2ZTdHJlYW0oKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBGbHZQbGF5ZXIgZXh0ZW5kcyBQbGF5ZXIge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKVxuICAgIHRoaXMuY29udGV4dCA9IG5ldyBDb250ZXh0KGZsdkFsbG93ZWRFdmVudHMpXG4gICAgdGhpcy5pbml0RXZlbnRzKClcbiAgICAvLyBjb25zdCBwcmVsb2FkVGltZSA9IHBsYXllci5jb25maWcucHJlbG9hZFRpbWUgfHwgMTVcbiAgfVxuXG4gIHN0YXJ0ICgpIHtcbiAgICBjb25zdCBmbHYgPSB0aGlzLmNvbnRleHQucmVnaXN0cnkoJ0ZMVl9DT05UUk9MTEVSJywgRkxWKSh0aGlzKVxuICAgIHRoaXMuZmx2ID0gZmx2XG4gICAgdGhpcy5jb250ZXh0LmluaXQoKVxuICAgIHN1cGVyLnN0YXJ0KGZsdi5tc2UudXJsKVxuICB9XG5cbiAgaW5pdEV2ZW50cyAoKSB7XG4gICAgdGhpcy5vbigndGltZXVwZGF0ZScsIHRoaXMuaGFuZGxlVGltZVVwZGF0ZS5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5vbignc2Vla2luZycsIHRoaXMuaGFuZGxlU2Vlay5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5vbmNlKCdkZXN0cm95JywgdGhpcy5fZGVzdHJveS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgaGFuZGxlVGltZVVwZGF0ZSAoKSB7XG4gICAgdGhpcy5sb2FkRGF0YSgpXG4gICAgaXNFbmRlZCh0aGlzLCB0aGlzLmZsdilcbiAgfVxuXG4gIGhhbmRsZVNlZWsgKCkge1xuICAgIGNvbnN0IHRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lXG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldEJ1ZmZlcmVkUmFuZ2UoKVxuICAgIGlmICh0aW1lID4gcmFuZ2VbMV0gfHwgdGltZSA8IHJhbmdlWzBdKSB7XG4gICAgICB0aGlzLmZsdi5zZWVrKHRoaXMuY3VycmVudFRpbWUpXG4gICAgfVxuICB9XG5cbiAgX2Rlc3Ryb3kgKCkge1xuICAgIHRoaXMuY29udGV4dC5kZXN0cm95KClcbiAgICB0aGlzLmNvbnRleHQgPSBudWxsXG4gICAgdGhpcy5mbHYgPSBudWxsXG4gIH1cblxuICBsb2FkRGF0YSAodGltZSA9IHRoaXMuY3VycmVudFRpbWUpIHtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0QnVmZmVyZWRSYW5nZSgpXG4gICAgaWYgKHJhbmdlWzFdIC0gdGltZSA8ICh0aGlzLmNvbmZpZy5wcmVsb2FkVGltZSB8fCAxNSkgLSA1KSB7XG4gICAgICB0aGlzLmZsdi5sb2FkTmV4dChyYW5nZVsxXSArIDEpXG4gICAgfVxuICB9XG5cbiAgZ2V0IHNyYyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFNyY1xuICB9XG5cbiAgc2V0IHNyYyAodXJsKSB7XG4gICAgdGhpcy5wbGF5ZXIuY29uZmlnLnVybCA9IHVybFxuICAgIGlmICghdGhpcy5wYXVzZWQpIHtcbiAgICAgIHRoaXMucGF1c2UoKVxuICAgICAgdGhpcy5vbmNlKCdwYXVzZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5zdGFydCh1cmwpXG4gICAgICB9KVxuICAgICAgdGhpcy5vbmNlKCdjYW5wbGF5JywgKCkgPT4ge1xuICAgICAgICB0aGlzLnBsYXkoKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydCh1cmwpXG4gICAgfVxuICAgIHRoaXMub25jZSgnY2FucGxheScsICgpID0+IHtcbiAgICAgIHRoaXMuY3VycmVudFRpbWUgPSAwXG4gICAgfSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZsdlBsYXllclxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3hncGxheWVyX187IiwiaW1wb3J0IEZsdkRlbXV4ZXIgZnJvbSAnLi4vLi4veGdwbGF5ZXItZGVtdXgvc3JjL2ZsdidcbmltcG9ydCBSZW11eGVyIGZyb20gJ3hncGxheWVyLXJlbXV4J1xuaW1wb3J0IHsgRmV0Y2hMb2FkZXIgfSBmcm9tICd4Z3BsYXllci1sb2FkZXInXG5pbXBvcnQgeyBUcmFja3MsIFhnQnVmZmVyLCBQcmVTb3VyY2UgfSBmcm9tICd4Z3BsYXllci1idWZmZXInXG5pbXBvcnQgeyBNc2UsIEVWRU5UUyB9IGZyb20gJ3hncGxheWVyLXV0aWxzJ1xuaW1wb3J0IHsgQ29tcGF0aWJpbGl0eSB9IGZyb20gJ3hncGxheWVyLWNvZGVjJ1xuaW1wb3J0IFBsYXllciBmcm9tICd4Z3BsYXllcidcblxuY29uc3QgUkVNVVhfRVZFTlRTID0gRVZFTlRTLlJFTVVYX0VWRU5UUztcbmNvbnN0IERFTVVYX0VWRU5UUyA9IEVWRU5UUy5ERU1VWF9FVkVOVFM7XG5jb25zdCBMT0FERVJfRVZFTlRTID0gRVZFTlRTLkxPQURFUl9FVkVOVFNcblxuY29uc3QgVGFnID0gJ0ZMVkNvbnRyb2xsZXInXG5cbmNsYXNzIExvZ2dlciB7XG4gIHdhcm4gKCkge31cbn1cblxuY2xhc3MgRmx2Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yIChwbGF5ZXIpIHtcbiAgICB0aGlzLlRBRyA9IFRhZ1xuICAgIHRoaXMuX3BsYXllciA9IHBsYXllclxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGluaXRTZWdtZW50QXJyaXZlZDogZmFsc2UsXG4gICAgICByYW5nZToge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAnJ1xuICAgICAgfSxcbiAgICAgIHJhbmdlU3VwcG9ydDogdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBmaW5kRmlsZVBvc2l0aW9uICh0aW1lLCBrZXlmcmFtZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0ga2V5ZnJhbWVzLnRpbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBjdXJyZW50S2V5ZnJhbWVUaW1lID0ga2V5ZnJhbWVzLnRpbWVzW2ldXG4gICAgICBjb25zdCBuZXh0S2V5ZnJhbWVUaW1lID0gaSArIDEgPCBsZW4gPyBrZXlmcmFtZXMudGltZXNbaSArIDFdIDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcblxuICAgICAgaWYgKGN1cnJlbnRLZXlmcmFtZVRpbWUgPD0gdGltZSAmJiB0aW1lIDw9IG5leHRLZXlmcmFtZVRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lcy5maWxlcG9zaXRpb25zW2ldXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdGRVRDSF9MT0FERVInLCBGZXRjaExvYWRlcilcbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdMT0FERVJfQlVGRkVSJywgWGdCdWZmZXIpXG5cbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdGTFZfREVNVVhFUicsIEZsdkRlbXV4ZXIpXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnVFJBQ0tTJywgVHJhY2tzKVxuXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnTVA0X1JFTVVYRVInLCBSZW11eGVyLk1wNFJlbXV4ZXIpXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnUFJFX1NPVVJDRV9CVUZGRVInLCBQcmVTb3VyY2UpXG5cbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdDT01QQVRJQklMSVRZJywgQ29tcGF0aWJpbGl0eSlcblxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0xPR0dFUicsIExvZ2dlcilcbiAgICB0aGlzLm1zZSA9IHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ01TRScsIE1zZSkoeyBjb250YWluZXI6IHRoaXMuX3BsYXllci52aWRlbyB9KVxuXG4gICAgdGhpcy5pbml0TGlzdGVuZXJzKClcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5sb2FkTWV0YSgpXG4gICAgfSwgMClcbiAgfVxuXG4gIGluaXRMaXN0ZW5lcnMgKCkge1xuICAgIHRoaXMub24oTE9BREVSX0VWRU5UUy5MT0FERVJfREFUQUxPQURFRCwgdGhpcy5faGFuZGxlTG9hZGVyRGF0YUxvYWRlZC5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuTUVESUFfSU5GTywgdGhpcy5faGFuZGxlTWVkaWFJbmZvLmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCB0aGlzLl9oYW5kbGVNZXRhZGF0YVBhcnNlZC5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFLCB0aGlzLl9oYW5kbGVEZW11eENvbXBsZXRlLmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIHRoaXMuX2hhbmRsZURlbXV4RXJyb3IuYmluZCh0aGlzKSlcblxuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLklOSVRfU0VHTUVOVCwgdGhpcy5faGFuZGxlQXBwZW5kSW5pdFNlZ21lbnQuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5NRURJQV9TRUdNRU5ULCB0aGlzLl9oYW5kbGVNZWRpYVNlZ21lbnQuYmluZCh0aGlzKSlcbiAgfVxuXG4gIF9oYW5kbGVNZWRpYUluZm8gKCkge1xuICAgIGlmICghdGhpcy5fY29udGV4dC5vbk1ldGFEYXRhKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBnZXQgbWVkaWFpbmZvJykpXG4gICAgfVxuICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0xPQURFUl9CVUZGRVInKVxuICAgIGNvbnN0IGxvYWRlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0ZFVENIX0xPQURFUicpXG4gICAgaWYgKHRoaXMuaXNTZWVrYWJsZSkge1xuICAgICAgbG9hZGVyLmNhbmNlbCgpXG4gICAgICAvLyDliJ3lp4vljJbngrnmkq3nmoRyYW5nZVxuICAgICAgdGhpcy5zdGF0ZS5yYW5nZSA9IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogYnVmZmVyLmhpc3RvcnlMZW4gLSAxXG4gICAgICB9XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5sb2FkTmV4dCgwKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlTG9hZGVyRGF0YUxvYWRlZCAoKSB7XG4gICAgdGhpcy5lbWl0VG8oJ0ZMVl9ERU1VWEVSJywgREVNVVhfRVZFTlRTLkRFTVVYX1NUQVJUKVxuICB9XG5cbiAgX2hhbmRsZU1ldGFkYXRhUGFyc2VkICh0eXBlKSB7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5SRU1VWF9NRVRBREFUQSwgdHlwZSlcbiAgfVxuXG4gIF9oYW5kbGVEZW11eENvbXBsZXRlICgpIHtcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLlJFTVVYX01FRElBKVxuICB9XG5cbiAgX2hhbmRsZUFwcGVuZEluaXRTZWdtZW50ICgpIHtcbiAgICB0aGlzLnN0YXRlLmluaXRTZWdtZW50QXJyaXZlZCA9IHRydWVcbiAgICB0aGlzLm1zZS5hZGRTb3VyY2VCdWZmZXJzKClcbiAgfVxuXG4gIF9oYW5kbGVNZWRpYVNlZ21lbnQgKCkge1xuICAgIHRoaXMubXNlLmFkZFNvdXJjZUJ1ZmZlcnMoKVxuICAgIHRoaXMubXNlLmRvQXBwZW5kKCk7XG4gIH1cblxuICBfaGFuZGxlRGVtdXhFcnJvcigpIHtcbiAgICB0aGlzLl9wbGF5ZXIuZW1pdCgnZXJyb3InLCBuZXcgUGxheWVyLkVycm9ycygncGFyc2UnLCB0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCkpXG4gIH1cblxuICBzZWVrICh0aW1lKSB7XG4gICAgaWYgKCF0aGlzLl9jb250ZXh0Lm9uTWV0YURhdGEpIHtcbiAgICAgIHRoaXMubG9hZE1ldGEoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICghdGhpcy5pc1NlZWthYmxlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdMT0FERVJfQlVGRkVSJylcbiAgICBidWZmZXIuY2xlYXIoKVxuXG4gICAgY29uc3QgeyBwcmVsb2FkVGltZSA9IDE1IH0gPSB0aGlzLl9wbGF5ZXIuY29uZmlnXG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFNlZWtSYW5nZSh0aW1lLCBwcmVsb2FkVGltZSlcbiAgICB0aGlzLnN0YXRlLnJhbmdlID0gcmFuZ2VcbiAgICB0aGlzLmxvYWREYXRhKClcbiAgfVxuXG4gIGxvYWROZXh0IChjdXJUaW1lKSB7XG4gICAgaWYgKCF0aGlzLl9jb250ZXh0Lm9uTWV0YURhdGEpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLmxvYWRlci5sb2FkaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZ2V0TmV4dFJhbmdlKGN1clRpbWUpKSB7XG4gICAgICB0aGlzLmxvYWREYXRhKClcbiAgICB9XG4gIH1cblxuICBsb2FkRGF0YSAoKSB7XG4gICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSB0aGlzLnN0YXRlLnJhbmdlXG4gICAgdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTEFERVJfU1RBUlQsIHRoaXMuX3BsYXllci5jb25maWcudXJsLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIFJhbmdlOiBgYnl0ZXM9JHtzdGFydH0tJHtlbmR9YFxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBsb2FkTWV0YSAoKSB7XG4gICAgdGhpcy5sb2FkZXIubG9hZCh0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICBSYW5nZTogJ2J5dGVzPTAtJ1xuICAgICAgfVxuICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgIC8vIOWcqOWwneivleiOt+WPluinhumikeaVsOaNruWksei0peaXtu+8jOWwneivleS9v+eUqOebtOaSreaWueW8j+WKoOi9veaVtOS4quinhumikVxuICAgICAgdGhpcy5zdGF0ZS5yYW5nZVN1cHBvcnQgPSBmYWxzZVxuICAgICAgdGhpcy5sb2FkRmFsbGJhY2soKVxuICAgIH0pXG5cbiAgfVxuXG4gIGxvYWRGYWxsYmFjayAoKSB7XG4gICAgdGhpcy5sb2FkZXIubG9hZCh0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCkuY2F0Y2goKCkgPT4ge1xuICAgICAgLy8g5Zyo5bCd6K+V6I635Y+W6KeG6aKR5pWw5o2u5aSx6LSl5pe277yM5bCd6K+V5L2/55So55u05pKt5pa55byP5Yqg6L295pW05Liq6KeG6aKRXG4gICAgICB0aGlzLl9wbGF5ZXIuZW1pdCgnZXJyb3InLCBuZXcgUGxheWVyLkVycm9ycygnbmV0d29yaycsIHRoaXMuX3BsYXllci5jb25maWcudXJsKSlcbiAgICB9KVxuICB9XG5cbiAgZ2V0U2Vla1JhbmdlICh0aW1lLCBwcmVsb2FkVGltZSkge1xuICAgIGNvbnN0IHsga2V5ZnJhbWVzIH0gPSB0aGlzLl9jb250ZXh0Lm9uTWV0YURhdGFcbiAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmR1cmF0aW9uXG4gICAgY29uc3Qgc2Vla1N0YXJ0VGltZSA9IHRpbWVcbiAgICBjb25zdCBzZWVrRW5kVGltZSA9IHRpbWUgKyBwcmVsb2FkVGltZVxuXG4gICAgY29uc3Qgc2Vla1N0YXJ0RmlsZVBvcyA9IEZsdkNvbnRyb2xsZXIuZmluZEZpbGVQb3NpdGlvbihzZWVrU3RhcnRUaW1lLCBrZXlmcmFtZXMpXG5cbiAgICBpZiAoc2Vla0VuZFRpbWUgPj0gZHVyYXRpb24gfHwgc2Vla1N0YXJ0VGltZSA+PSBkdXJhdGlvbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHNlZWtTdGFydEZpbGVQb3MsXG4gICAgICAgIGVuZDogJydcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc2Vla0VuZEZpbGVQb3MgPSBGbHZDb250cm9sbGVyLmZpbmRGaWxlUG9zaXRpb24oc2Vla0VuZFRpbWUsIGtleWZyYW1lcylcblxuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogc2Vla1N0YXJ0RmlsZVBvcyxcbiAgICAgIGVuZDogc2Vla0VuZEZpbGVQb3NcbiAgICB9XG4gIH1cblxuICBnZXROZXh0UmFuZ2UgKHRpbWUpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5yYW5nZS5lbmQgPT09ICcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBlbmQgfSA9IHRoaXMuZ2V0U2Vla1JhbmdlKHRpbWUsIHRoaXMuY29uZmlnLnByZWxvYWRUaW1lIHx8IDE1KVxuICAgIGlmIChlbmQgPD0gdGhpcy5zdGF0ZS5yYW5nZS5lbmQgJiYgZW5kICE9PSAnJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUucmFuZ2UgPSB7XG4gICAgICBzdGFydDogdGhpcy5zdGF0ZS5yYW5nZS5lbmQgKyAxLFxuICAgICAgZW5kXG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fcGxheWVyID0gbnVsbFxuICAgIHRoaXMubXNlID0gbnVsbFxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpbml0U2VnbWVudEFycml2ZWQ6IGZhbHNlLFxuICAgICAgcmFuZ2U6IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogJydcbiAgICAgIH0sXG4gICAgICByYW5nZVN1cHBvcnQ6IHRydWVcbiAgICB9XG4gIH1cblxuICBnZXQgaXNTZWVrYWJsZSAoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnJhbmdlU3VwcG9ydCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9jb250ZXh0IHx8ICF0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5pc0NvbXBsZXRlKCkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5rZXlmcmFtZXMgIT09IG51bGwgJiYgdGhpcy5fY29udGV4dC5tZWRpYUluZm8ua2V5ZnJhbWVzICE9PSB1bmRlZmluZWRcbiAgfVxuXG4gIGdldCBjb25maWcgKCkge1xuICAgIHJldHVybiB0aGlzLl9wbGF5ZXIuY29uZmlnXG4gIH1cblxuICBnZXQgbG9hZGVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnRkVUQ0hfTE9BREVSJylcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGbHZDb250cm9sbGVyXG4iLCJpbXBvcnQgRmx2TGl2ZVBsYXllciBmcm9tICd4Z3BsYXllci1mbHYtbGl2ZSdcbmltcG9ydCBGbHZWb2RQbGF5ZXIgZnJvbSAneGdwbGF5ZXItZmx2LXZvZCdcblxuY2xhc3MgRmx2UGxheWVye1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZy5pc0xpdmUpIHtcbiAgICAgIHJldHVybiBuZXcgRmx2TGl2ZVBsYXllcihjb25maWcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRmx2Vm9kUGxheWVyKGNvbmZpZylcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGbHZQbGF5ZXJcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV94Z3BsYXllcl9fOyJdLCJzb3VyY2VSb290IjoiIn0=