window.FlvPlayer=function(e){var t={};function s(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}return s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(i,r,function(t){return e[t]}.bind(null,r));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}({"../../node_modules/events/events.js":
/*!*****************************************************************************************!*\
  !*** /Users/leonardo/Documents/front-end/player/xgplayer/node_modules/events/events.js ***!
  \*****************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var i,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,s){return Function.prototype.apply.call(e,t,s)};i=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var l=10;function d(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function u(e,t,s,i){var r,a,n,o;if("function"!=typeof s)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof s);if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,s.listener?s.listener:s),a=e._events),n=a[t]),void 0===n)n=a[t]=s,++e._eventsCount;else if("function"==typeof n?n=a[t]=i?[s,n]:[n,s]:i?n.unshift(s):n.push(s),(r=d(e))>0&&n.length>r&&!n.warned){n.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=n.length,o=l,console&&console.warn&&console.warn(o)}return e}function h(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function c(e,t,s){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:s},r=h.bind(i);return r.listener=s,i.wrapFn=r,r}function f(e,t,s){var i=e._events;if(void 0===i)return[];var r=i[t];return void 0===r?[]:"function"==typeof r?s?[r.listener||r]:[r]:s?function(e){for(var t=new Array(e.length),s=0;s<t.length;++s)t[s]=e[s].listener||e[s];return t}(r):m(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var s=t[e];if("function"==typeof s)return 1;if(void 0!==s)return s.length}return 0}function m(e,t){for(var s=new Array(t),i=0;i<t;++i)s[i]=e[i];return s}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return d(this)},o.prototype.emit=function(e){for(var t=[],s=1;s<arguments.length;s++)t.push(arguments[s]);var i="error"===e,r=this._events;if(void 0!==r)i=i&&void 0===r.error;else if(!i)return!1;if(i){var n;if(t.length>0&&(n=t[0]),n instanceof Error)throw n;var o=new Error("Unhandled error."+(n?" ("+n.message+")":""));throw o.context=n,o}var l=r[e];if(void 0===l)return!1;if("function"==typeof l)a(l,this,t);else{var d=l.length,u=m(l,d);for(s=0;s<d;++s)a(u[s],this,t)}return!0},o.prototype.addListener=function(e,t){return u(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return u(this,e,t,!0)},o.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,c(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,c(this,e,t)),this},o.prototype.removeListener=function(e,t){var s,i,r,a,n;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(i=this._events))return this;if(void 0===(s=i[e]))return this;if(s===t||s.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,s.listener||t));else if("function"!=typeof s){for(r=-1,a=s.length-1;a>=0;a--)if(s[a]===t||s[a].listener===t){n=s[a].listener,r=a;break}if(r<0)return this;0===r?s.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(s,r),1===s.length&&(i[e]=s[0]),void 0!==i.removeListener&&this.emit("removeListener",e,n||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,s,i;if(void 0===(s=this._events))return this;if(void 0===s.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==s[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete s[e]),this;if(0===arguments.length){var r,a=Object.keys(s);for(i=0;i<a.length;++i)"removeListener"!==(r=a[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=s[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},"../xgplayer-buffer/index.js":
/*!***********************************!*\
  !*** ../xgplayer-buffer/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={Track:s(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:s(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:s(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:s(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:s(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:s(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:s(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").default}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
  !*** ../xgplayer-buffer/src/buffer.js ***!
  \****************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),s=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let i=this.array[0].slice(this.offset,this.offset+e);t.set(i,s),this.offset+=e,this.length-=e,e=0;break}{let i=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),s),this.array.shift(),this.offset=0,s+=i,this.length-=i,e-=i}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let s=0,i=this.offset+e;for(;i<this.offset+t+e;)i<this.array[0].length?s=256*s+this.array[0][i]:this.array[1]&&(s=256*s+this.array[1][i-this.array[0].length]),i++;return s}};t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new i,this.sources[e]}clear(){this.sources={}}destroy(){this.sources={}}}},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/track.js ***!
  \***************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=i;t.AudioTrack=class extends i{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}};t.VideoTrack=class extends i{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-codec/index.js":
/*!**********************************!*\
  !*** ../xgplayer-codec/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={Nalunit:s(/*! ./src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js").default,SpsParser:s(/*! ./src/h264/nalunit/sps */"../xgplayer-codec/src/h264/nalunit/sps.js").default,Compatibility:s(/*! ./src/compatibility */"../xgplayer-codec/src/compatibility.js").default}},"../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
  !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{static getSilentFrame(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},"../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
  !*** ../xgplayer-codec/src/compatibility.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=s(/*! ./aac/aac-helper */"../xgplayer-codec/src/aac/aac-helper.js"),n=(i=a)&&i.__esModule?i:{default:i};const{REMUX_EVENTS:o}=r.EVENTS;class l{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=0,this.lastAudioDts=0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[]}init(){this.before(o.REMUX_MEDIA,this.doFix.bind(this))}reset(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=0,this.lastAudioDts=0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:e,isFirstVideoSamples:t}=this.getFirstSample();this.removeInvalidSamples(),this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples),this.doFixVideo(t),this.doFixAudio(e)}doFixVideo(e){let{samples:t,meta:s}=this.videoTrack;if(s.frameRate&&!1===s.frameRate.fixed)return;if(!t||!t.length||!this._firstVideoSample)return;const i=t[0],r=i.dts,a=t.length;if(e&&this._firstAudioSample){const e=this._firstVideoSample.dts,r=e-this._firstAudioSample.dts;if(r>2*s.refSampleDuration){const a=Math.floor(r/s.refSampleDuration);for(let r=0;r<a;r++){const a=Object.assign({},i);a.dts=e-(r+1)*s.refSampleDuration,a.pts=a.dts+a.cts,t.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}}}let n;if(this.nextVideoDts){n=r-this.nextVideoDts;const e=Math.abs(n);if(n>2*s.refSampleDuration){const e=Math.floor(n/s.refSampleDuration);for(let i=0;i<e;i++){const e=Object.assign({},t[0]),a=r-(i+1)*s.refSampleDuration;e.dts=a>this.nextVideoDts?a:this.nextVideoDts,e.pts=e.dts+e.cts,this.videoTrack.samples.unshift(e),this.filledVideoSamples.push({dts:e.dts,size:e.data.byteLength})}}else e<=10&&e>0&&(t[0].dts=this.nextVideoDts,t[0].originDts=t[0].dts,t[0].cts=t[0].cts||t[0].pts-t[0].dts,t[0].pts=t[0].dts+t[0].cts)}const o=t[t.length-1].dts,l=t.length>=2?o-t[t.length-2].dts:s.refSampleDuration;this.lastVideoSamplesLen=a,this.nextVideoDts=o+l,this.lastVideoDts=o;for(let e=0,i=t.length;e<i;e++){const i=t[e],r=t[e+1];if(!r)break;const a=r.dts-i.dts;if(a>2*s.refSampleDuration){let n=Math.floor(a/s.refSampleDuration),o=0;for(;o<n;){const a=Object.assign({},r);a.dts=i.dts+(o+1)*s.refSampleDuration,a.pts=a.dts+a.cts,a<r.dts&&(t.splice(e,0,a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})),o++,e++}}}this.videoTrack.samples=t}doFixAudio(e){let{samples:t,meta:s}=this.audioTrack;if(!t||!t.length)return;const i=t.length,r=n.default.getSilentFrame(s.codec,s.channelCount),a=this._firstAudioSample;if(t=l.sortAudioSamples(t),this._firstVideoSample&&e){const e=this._firstVideoSample.pts?this._firstVideoSample.pts:this._firstVideoSample.dts+this._firstVideoSample.cts;if(a.dts-e>s.refSampleDuration){const i=Math.floor((a.dts-e)/s.refSampleDuration);for(let e=0;e<i;e++){const i={data:r,datasize:r.byteLength,dts:a.dts-(e+1)*s.refSampleDuration,filtered:0};t.unshift(i),this.filledAudioSamples.push({dts:i.dts,size:i.data.byteLength})}}}let o;const d=t[0].dts;if(this.nextAudioDts){o=d-this.nextAudioDts;const e=Math.abs(o);if(e>s.refSampleDuration&&1===i&&1===this.lastAudioSamplesLen&&(s.refSampleDurationFixed=void 0),o>2*s.refSampleDuration)if(1===i&&1===this.lastAudioSamplesLen)s.refSampleDurationFixed=void 0!==s.refSampleDurationFixed?s.refSampleDurationFixed+o:s.refSampleDuration+o;else{const e=Math.floor(o/s.refSampleDuration);for(let i=0;i<e;i++){const e=d-(i+1)*s.refSampleDuration,r=Object.assign({},t[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else e<=10&&e>0&&(t[0].dts=this.nextAudioDts,t[0].pts=this.nextAudioDts)}const u=t[t.length-1].dts,h=t.length>=2?u-t[t.length-2].dts:s.refSampleDuration;this.lastAudioSamplesLen=i,this.nextAudioDts=s.refSampleDurationFixed?u+s.refSampleDurationFixed:u+h,this.lastAudioDts=u;for(let e=0,s=t.length;e<s;e++){const s=t[e],i=t[e+1];if(!i)break;const r=i.dts-s.dts;t[e].duration=r}this.audioTrack.samples=l.sortAudioSamples(t)}getFirstSample(){let{samples:e}=this.videoTrack,{samples:t}=this.audioTrack,s=!1,i=!1;return!this._firstVideoSample&&e.length&&(this._firstVideoSample=l.findFirstVideoSample(e),s=!0),!this._firstAudioSample&&t.length&&(this._firstAudioSample=l.findFirstAudioSample(t),i=!0),{isFirstVideoSamples:s,isFirstAudioSamples:i}}fixRefSampleDuration(e,t){const s="video"===e.type,i=s?this.allVideoSamplesCount:this.allAudioSamplesCount,r=s?this._firstVideoSample.dts:this._firstAudioSample.dts,a=s?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration)){if(t.length>=1){const s=t[t.length-1].dts;e.refSampleDuration=Math.floor((s-r)/(i+a-1))}}else if(e.refSampleDuration&&t.length>=3){const s=(t[t.length-1].dts-t[0].dts)/t.length;e.refSampleDuration=Math.abs(e.refSampleDuration-s)<=e.refSampleDuration?e.refSampleDuration:s}}recordSamplesCount(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}removeInvalidSamples(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter(e=>e.dts>=t.dts&&e.dts>this.lastAudioDts),this.videoTrack.samples=this.videoTrack.samples.filter(t=>t.dts>=e.dts&&t.dts>this.lastVideoDts)}static sortAudioSamples(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}static findFirstAudioSample(e){return e&&0!==e.length?l.sortAudioSamples(e)[0]:null}static findFirstVideoSample(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,s=t.length;e<s;e++)if(t[e].isKeyframe)return t[e]}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks?this.tracks.audioTrack:null}get videoTrack(){return this.tracks?this.tracks.videoTrack:null}}t.default=l},"../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),s=new Uint8Array(4);s.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(s.buffer).getUint32(0,!1),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){if(e<=this._currentWordBitsLeft){let t=this._currentWord>>>32-e;return this._currentWord<<=e,this._currentWordBitsLeft-=e,t}let t=this._currentWordBitsLeft?this._currentWord:0;this._currentWordBitsLeft;let s=e-this._currentWordBitsLeft;this._fillCurrentWord();let i=Math.min(s,this._currentWordBitsLeft),r=this._currentWord>>>32-i;return this._currentWord<<=i,this._currentWordBitsLeft-=i,t=t<<i|r}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! ./sps */"../xgplayer-codec/src/h264/nalunit/sps.js"),a=(i=r)&&i.__esModule?i:{default:i};class n{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,s=e.position;return 1===t.getInt32(s)||0===t.getInt16(s)&&1===t.getInt8(s+2)?n.getAnnexbNals(e):n.getAvccNals(e)}static getAnnexbNals(e){let t=[],s=n.getHeaderPositionAnnexB(e),i=s.pos,r=i;for(;i<e.length-4;){let a=e.buffer.slice(i,i+s.headerLength);s.pos===e.position&&e.skip(s.headerLength),r=(s=n.getHeaderPositionAnnexB(e)).pos;let o={header:a,body:new Uint8Array(e.buffer.slice(i+a.byteLength,r))};n.analyseNal(o),t.push(o),e.skip(r-e.position),i=r}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let s=e.dataview.getInt32();if(!(e.length-e.position>=s))break;{let i=e.buffer.slice(e.position,e.position+4);e.skip(4);let r=e.buffer.slice(e.position,e.position+s);e.skip(s);let a={header:i,body:r};n.analyseNal(a),t.push(a)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=a.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,s=0;for(;3!==s&&4!==s&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?s=4:1===e.dataview.getInt8(t+2)?s=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(s=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?s=3:t=e.length)),{pos:t,headerLength:s}}static getAvcc(e,t){let s=new Uint8Array(e.byteLength+t.byteLength+11);s[0]=1,s[1]=e[1],s[2]=e[2],s[3]=e[3],s[4]=255,s[5]=225;let i=6;return s.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),i),i+=2,s.set(e,i),s[i+=e.byteLength]=1,i++,s.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),i),i+=2,s.set(t,i),s}}t.default=n},"../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! ./golomb */"../xgplayer-codec/src/h264/nalunit/golomb.js"),a=(i=r)&&i.__esModule?i:{default:i};class n{static _ebsp2rbsp(e){let t=e,s=t.byteLength,i=new Uint8Array(s),r=0;for(let e=0;e<s;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(i[r]=t[e],r++);return new Uint8Array(i.buffer,0,r)}static parseSPS(e){let t=n._ebsp2rbsp(e),s=new a.default(t);s.readByte();let i=s.readByte();s.readByte();let r=s.readByte();s.readUEG();let o=n.getProfileString(i),l=n.getLevelString(r),d=1,u=420,h=[0,420,422,444],c=8;if((100===i||110===i||122===i||244===i||44===i||83===i||86===i||118===i||128===i||138===i||144===i)&&(3===(d=s.readUEG())&&s.readBits(1),d<=3&&(u=h[d]),c=s.readUEG()+8,s.readUEG(),s.readBits(1),s.readBool())){let e=3!==d?8:12;for(let t=0;t<e;t++)s.readBool()&&(t<6?n._skipScalingList(s,16):n._skipScalingList(s,64))}s.readUEG();let f=s.readUEG();if(0===f)s.readUEG();else if(1===f){s.readBits(1),s.readSEG(),s.readSEG();let e=s.readUEG();for(let t=0;t<e;t++)s.readSEG()}s.readUEG(),s.readBits(1);let p=s.readUEG(),m=s.readUEG(),g=s.readBits(1);0===g&&s.readBits(1),s.readBits(1);let y=0,_=0,E=0,v=0;s.readBool()&&(y=s.readUEG(),_=s.readUEG(),E=s.readUEG(),v=s.readUEG());let S=1,A=1,b=0,x=!0,T=0,w=0;if(s.readBool()){if(s.readBool()){let e=s.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],i=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(S=t[e-1],A=i[e-1]):255===e&&(S=s.readByte()<<8|s.readByte(),A=s.readByte()<<8|s.readByte())}if(s.readBool()&&s.readBool(),s.readBool()&&(s.readBits(4),s.readBool()&&s.readBits(24)),s.readBool()&&(s.readUEG(),s.readUEG()),s.readBool()){let e=s.readBits(32),t=s.readBits(32);x=s.readBool(),b=(T=t)/(w=2*e)}}let D=1;1===S&&1===A||(D=S/A);let U=0,R=0;if(0===d)U=1,R=2-g;else{U=3===d?1:2,R=(1===d?2:1)*(2-g)}let M=16*(p+1),L=16*(m+1)*(2-g);M-=(y+_)*U,L-=(E+v)*R;let k=Math.ceil(M*D);return s.destroy(),s=null,{profile_string:o,level_string:l,bit_depth:c,chroma_format:u,chroma_format_string:n.getChromaFormatString(u),frame_rate:{fixed:x,fps:b,fps_den:w,fps_num:T},par_ratio:{width:S,height:A},codec_size:{width:M,height:L},present_size:{width:k,height:L}}}static _skipScalingList(e,t){let s=8,i=8,r=0;for(let a=0;a<t;a++)0!==i&&(i=(s+(r=e.readSEG())+256)%256),s=0===i?s:i}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},t.frameRate=e.frame_rate;let s=t.frameRate.fps_den,i=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(s/i))}}t.default=n},"../xgplayer-demux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-demux/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={M3U8Parser:s(/*! ./src/hls/demuxer/m3u8parser */"../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,TsDemuxer:s(/*! ./src/hls/demuxer/ts */"../xgplayer-demux/src/hls/demuxer/ts.js").default,Playlist:s(/*! ./src/hls/playlist */"../xgplayer-demux/src/hls/playlist.js").default,FlvDemuxer:s(/*! ./src/flv/index */"../xgplayer-demux/src/flv/index.js").default}},"../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(/*! xgplayer-utils */"../xgplayer-utils/index.js");const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};t.default=class{constructor(){this.offset=0,this.readOffset=this.offset}resolve(e,t){if(t<3)throw new Error("not enough data for metainfo");const s={},i=this.parseValue(e),r=this.parseValue(e,t-i.bodySize);return s[i.data]=r.data,this.resetStatus(),s}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(e){const t=new DataView(e,this.readOffset).getUint16(0,!i.isLe);let s="";s=t>0?i.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let r=t+2;return this.readOffset+=r,{data:s,bodySize:t+2}}parseDate(e,t){const s=new DataView(e,this.readOffset,t);let r=s.getFloat64(0,!i.isLe);return r+=60*s.getInt16(8,!i.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(e,t){const s=this.parseString(e,t),i=this.parseValue(e,t-s.bodySize);return{data:{name:s.data,value:i.data},bodySize:s.bodySize+i.bodySize,isObjEnd:i.isObjEnd}}parseLongString(e){const t=new DataView(e,this.readOffset).getUint32(0,!i.isLe);let s="";return s=t>0?i.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:s,bodySize:t+4}}parseValue(e,t){let s=new ArrayBuffer;s=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:l,MIX_ARRAY:d,OBJECT_END:u,STRICT_ARRAY:h,DATE:c,LONE_STRING:f}=r,p=new DataView(s,this.readOffset,t);let m=!1;const g=p.getUint8(0);let y=1;this.readOffset+=1;let _=null;switch(g){case a:_=p.getFloat64(1,!i.isLe),this.readOffset+=8,y+=8;break;case n:_=!!p.getUint8(1),this.readOffset+=1,y+=1;break;case o:{const e=this.parseString(s);_=e.data,y+=e.bodySize;break}case l:{_={};let e=0;for(16777215&p.getUint32(t-4,!i.isLe)&&(e=3);y<t-4;){const i=this.parseObject(s,t-y-e);if(i.isObjectEnd)break;_[i.data.name]=i.data.value,y+=i.bodySize}if(y<=t-3){9===(16777215&p.getUint32(y-1,!i.isLe))&&(this.readOffset+=3,y+=3)}break}case d:{_={},y+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!i.isLe))&&(e=3);y<t-8;){const i=this.parseObject(s,t-y-e);if(i.isObjectEnd)break;_[i.data.name]=i.data.value,y+=i.bodySize}if(y<=t-3){9===(16777215&p.getUint32(y-1,!i.isLe))&&(y+=3,this.readOffset+=3)}break}case u:_=null,m=!0;break;case h:{_=[];const e=p.getUint32(1,!i.isLe);y+=4,this.readOffset+=4;for(let i=0;i<e;i++){const e=this.parseValue(s,t-y);_.push(e.data),y+=e.bodySize}break}case c:{const e=this.parseDate(s,t-1);_=e.data,y+=e.bodySize;break}case f:{const e=this.parseLongString(s,t-1);_=e.data,y+=e.bodySize;break}default:y=t}return{data:_,bodySize:y,isObjEnd:m}}}},"../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
  !*** ../xgplayer-demux/src/flv/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=s(/*! xgplayer-codec */"../xgplayer-codec/index.js"),n=s(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=s(/*! ./amf-parser */"../xgplayer-demux/src/flv/amf-parser.js"),l=(i=o)&&i.__esModule?i:{default:i};const d=r.EVENTS.DEMUX_EVENTS;class u{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(d.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}static getPlayType(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e;do{e=this._parseFlvTag()}while(e);this.emit(d.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}parseFlvHeader(e){if(u.isFlvFile(e)){this._firstFragmentLoaded=!0;const t=u.getPlayType(e[4]);t.hasVideo&&this.initVideoTrack(),t.hasAudio&&this.initAudioTrack()}else this.emit(d.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let e=new n.VideoTrack;e.meta=new r.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}initAudioTrack(){this._trackNum++;let e=new n.AudioTrack;e.meta=new r.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}_parseFlvTagHeader(){let e=0,t={},s=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&s)>>>5,t.tagType=31&s,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.logger.warn(this.TAG,"tagType "+t.tagType),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let i=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(i+=16777216*r),t.dts=i,this.loaderBuffer.shift(3),t}_processChunk(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(e){let t=this.tracks.audioTrack,s=this.tracks.videoTrack,i=this.loaderBuffer.shift(e.datasize);const r=(new l.default).resolve(i,i.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(d.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(a.audiosamplerate&&(e.sampleRate=a.audiosamplerate),a.audiochannels&&(e.channelCount=a.audiochannels),a.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(s&&!s.hasSpecificConfig){let e=s.meta;if("number"==typeof a.framerate){let t=Math.floor(1e3*a.framerate);if(t>0){let s=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=s,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let s,i,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,i=new Array(4),s=a-3):(t.objectType=2,i=new Array(2),s=a):-1!==r.indexOf("android")?(t.objectType=2,i=new Array(2),s=a):(t.objectType=5,s=t.sampleRateIndex,i=new Array(4),t.sampleRateIndex>=6?s=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,i=new Array(2),s=t.sampleRateIndex)),i[0]=t.objectType<<3,i[0]|=(15&t.sampleRateIndex)>>>1,i[1]=(15&t.sampleRateIndex)<<7,i[1]|=(15&t.channelCount)<<3,5===t.objectType&&(i[1]|=(15&s)>>>1,i[2]=(1&s)<<7,i[2]|=8,i[3]=0),t.config=i,t}_parseAACData(e){let t=this.tracks.audioTrack;if(!t)return;let s=t.meta;s||(s=new r.AudioTrackMeta);let i=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let a=(240&i)>>>4;t.format=a,10!==a&&this.emit(d.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(s.sampleRate=this._switchAudioSamplingFrequency(i),s.sampleRateIndex=(12&i)>>>2,s.frameLenth=(2&i)>>>1,s.channelCount=1&i,s.refSampleDuration=Math.floor(1024/s.audioSampleRate*s.timescale));let n=s.audioSampleRate,o=s.sampleRateIndex,l=s.refSampleDuration;delete e.tagType;let u=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);n=t.audiosamplerate||s.audioSampleRate,o=t.sampleRateIndex||s.sampleRateIndex,l=Math.floor(1024/n*s.timescale),s.channelCount=t.channelCount,s.sampleRate=n,s.sampleRateIndex=o,s.refSampleDuration=l,s.duration=this._context.mediaInfo.duration*s.timescale,s.config=t.config;const i=this._context.mediaInfo.audio;i.codec=t.codec,i.channelCount=t.channelCount,i.sampleRate=n,i.sampleRateIndex=t.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(d.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&this.emit(d.AUDIO_METADATA_CHANGE),this._hasAudioSequence=!0}else e.data=e.data.slice(1,e.data.length),t.samples.push(e);u||this.logger.warn(this.TAG,"TAG length error at "+e.datasize)}_parseHevcData(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let s=15&t;if(this.tracks.videoTrack.codecID=s,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===s){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`);let t={},s=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>s;){let i=e.data.slice(Number.parseInt(s),4+s);t.size=i[3],t.size+=256*i[2],t.size+=256*i[1]*256,t.size+=256*i[0]*256*256,s+=4,t.data=e.data.slice(Number.parseInt(s),t.size+s),s+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(d.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(d.METADATA_PARSED,"video"):this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`))}else if(7===s){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let s=0;s<4;s++)e=256*e+t[s];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType){this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(d.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&this.emit(d.VIDEO_METADATA_CHANGE),this._hasVideoSequence=!0)}else{if(!this._datasizeValidator(e.datasize))return void this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`);this.tracks.videoTrack.samples.push(e)}}else this.logger.warn(this.TAG,`video codeid is ${s}`),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.logger.warn(this.TAG,`invalid video tag datasize: ${e.datasize}`),this.tracks.videoTrack.samples.push(e),this.emit(d.DEMUX_COMPLETE);delete e.tagType}_avcSequenceHeaderParser(e){let t=this.tracks.videoTrack;if(!t)return;let s=0;t.meta||(t.meta=new r.VideoTrackMeta);let i=t.meta;i.configurationVersion=e[0],i.avcProfileIndication=e[1],i.profileCompatibility=e[2],i.avcLevelIndication=e[3]/10,i.nalUnitLength=1+(3&e[4]);let n=31&e[5];s=6;let o={};for(let t=0;t<n;t++){let t=255*e[s]+e[s+1];s+=2;let r=new Uint8Array(t);for(let i=0;i<t;i++)r[i]=e[s+i];let n="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),n+=t}i.codec=n,s+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let l=e[s];s++;for(let t=0;t<l;t++){let t=255*e[s]+e[s+1];s+=2;let i=new Uint8Array(t);for(let r=0;r<t;r++)i[r]=e[s+r];s+=t,this.tracks.videoTrack.meta.pps=i}Object.assign(i,a.SpsParser.toVideoMeta(o));const d=this._context.mediaInfo.video;d.codec=i.codec,d.profile=i.profile,d.level=i.level,d.chromaFormat=i.chromaFormat,d.frameRate=i.frameRate,d.parRatio=i.parRatio,d.width=d.width===i.presentWidth?d.width:i.presentWidth,d.height=d.height===i.presentHeight?d.width:i.presentHeight,i.duration=this._context.mediaInfo.duration*i.timescale,i.avcc=new Uint8Array(e.length),i.avcc.set(e),t.meta=i}_switchAudioSampleRate(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}_switchAudioSamplingFrequency(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}_switchAudioChannel(e){return[1,2][1&e]}_datasizeValidator(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}get loaderBuffer(){if(this._context.getInstance("LOADER_BUFFER"))return this._context.getInstance("LOADER_BUFFER");this.emit(d.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}t.default=u},"../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{static parse(e,t=""){let s={duration:0};if(!e||!e.split)return;let r=e.split(/\r|\n/),a=(r=r.filter(e=>e)).shift();if(!a.match("#EXTM3U"))return null;for(a=r.shift();a;){let e=a.match(/#(.*):(.*)/);if(e&&e.length>2)switch(e[1]){case"EXT-X-VERSION":s.version=parseInt(e[2]);break;case"EXT-X-MEDIA-SEQUENCE":s.sequence=parseInt(e[2]);break;case"EXT-X-TARGETDURATION":s.targetduration=parseFloat(e[2]);break;case"EXTINF":i.parseFrag(e,r,s,t)}a=r.shift()}return s}static parseFrag(e,t,s,i){s.frags||(s.frags=[]);let r={start:s.duration,duration:1e3*parseFloat(e[2])};s.duration+=r.duration;let a=t.shift();a.match(/#(.*):(.*)/)&&(a=t.shift()),r.url=i+a,s.frags.push(r)}static parseURL(e){let t="",s=e.match(/(.*\/).*\.m3u8/);if(s&&s.length>0)for(let e=0;e<s.length;e++)s[e].match(/.*\/$/g)&&s[e].length>t.length&&(t=s[e]);return t}}t.default=i},"../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(/*! xgplayer-codec */"../xgplayer-codec/index.js"),r=s(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),a=s(/*! xgplayer-utils */"../xgplayer-utils/index.js");const n=a.EVENTS.DEMUX_EVENTS,o={1:["video","MPEG-1"],2:["video","MPEG-2"],27:["video","AVC.H264"],234:["video","VC-1"],3:["audio","MPEG-1"],4:["audio","MPEG-2"],15:["audio","MPEG-2.AAC"],17:["audio","MPEG-4.AAC"],128:["audio","LPCM"],129:["audio","AC3"],6:["audio","AC3"],130:["audio","DTS"],131:["audio","Dolby TrueHD"],132:["audio","AC3-Plus"],133:["audio","DTS-HD"],134:["audio","DTS-MA"],161:["audio","AC3-Plus-SEC"],162:["audio","DTS-HD-SEC"]};class l{constructor(e){this.configs=Object.assign({},e),this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}init(){this.on(n.DEMUX_START,this.demux.bind(this))}demux(){if(this.demuxing)return;let e=this.inputBuffer,t={pat:[],pmt:[]},s={};for(;e.length>=188;){for(;e.length>=1&&71!==e.array[0][e.offset];)e.shift(1);let i=e.shift(188),r=new a.Stream(i.buffer),n={};l.read(r,n,t),n.pes?(s[n.header.pid]||(s[n.header.pid]=[]),s[n.header.pid].push(n.pes),n.pes.ES.buffer=[n.pes.ES.buffer]):s[n.header.pid]&&s[n.header.pid][s[n.header.pid].length-1].ES.buffer.push(n.payload.stream)}for(let e=0;e<Object.keys(s).length;e++){let t=s[Object.keys(s)[e]];for(let i=0;i<t.length;i++)t[i].id=Object.keys(s)[e],t[i].ES.buffer=l.Merge(t[i].ES.buffer),"audio"===t[i].type?this.pushAudioSample(t[i]):"video"===t[i].type&&this.pushVideoSample(t[i])}this._hasAudioMeta&&this.emit(n.DEMUX_COMPLETE,"audio"),this._hasVideoMeta&&this.emit(n.DEMUX_COMPLETE,"video")}pushAudioSample(e){let t;this._tracks.audioTrack?t=this._tracks.audioTrack:(this._tracks.audioTrack=new r.AudioTrack,(t=this._tracks.audioTrack).meta=new a.AudioTrackMeta({audioSampleRate:e.ES.frequence,sampleRate:e.ES.frequence,channelCount:e.ES.channel,codec:"mp4a.40."+e.ES.audioObjectType,config:e.ES.audioConfig,id:2,sampleRateIndex:e.ES.frequencyIndex}),t.meta.refSampleDuration=Math.floor(1024/t.meta.audioSampleRate*t.meta.timescale),this._hasAudioMeta||(this._hasAudioMeta=!0,this.emit(n.METADATA_PARSED,"audio")));let s=new Uint8Array(e.ES.buffer.buffer.slice(e.ES.buffer.position,e.ES.buffer.length)),i=parseInt(e.pts/90),o=parseInt(e.pts/90),l=new a.AudioTrackSample({dts:i,pts:o,data:s});t.samples.push(l)}pushVideoSample(e){let t,s=i.Nalunit.getNalunits(e.ES.buffer);this._tracks.videoTrack?t=this._tracks.videoTrack:(this._tracks.videoTrack=new r.VideoTrack,(t=this._tracks.videoTrack).meta=new a.VideoTrackMeta);let o=0,d=!1,u=!1;for(let e=0;e<s.length;e++){let i=s[e];if(i.sps){if(t.sps&&l.compaireUint8(i.body,t.sps))continue;d=i,t.sps=i.body,t.meta.chromaFormat=d.sps.chroma_format,t.meta.codec="avc1.";for(var h=1;h<4;h++){var c=d.body[h].toString(16);c.length<2&&(c="0"+c),t.meta.codec+=c}t.meta.codecHeight=d.sps.codec_size.height,t.meta.codecWidth=d.sps.codec_size.width,t.meta.frameRate=d.sps.frame_rate,t.meta.id=1,t.meta.level=d.sps.level_string,t.meta.presentHeight=d.sps.present_size.height,t.meta.presentWidth=d.sps.present_size.width,t.meta.profile=d.sps.profile_string,t.meta.refSampleDuration=Math.floor(t.meta.timescale*(d.sps.frame_rate.fps_den/d.sps.frame_rate.fps_num)),t.meta.sarRatio=d.sps.sar_ratio?d.sps.sar_ratio:d.sps.par_ratio}else i.pps?(t.pps=i.body,u=i):o+=4+i.body.byteLength}d&&u&&(t.meta.avcc=i.Nalunit.getAvcc(d.body,u.body),this._hasVideoMeta||(this._hasVideoMeta=!0,this.emit(n.METADATA_PARSED,"video")));let f=new Uint8Array(o),p=0,m=!1;for(let e=0;e<s.length;e++){let t=s[e],i=t.body.byteLength;t.idr&&(m=!0),t.pps||t.sps||(f.set(new Uint8Array([i>>>24&255,i>>>16&255,i>>>8&255,255&i]),p),p+=4,f.set(t.body,p),p+=i)}let g=new a.VideoTrackSample({dts:parseInt(e.dts/90),pts:parseInt(e.pts/90),cts:(e.pts-e.dts)/90,originDts:e.dts,isKeyframe:m,data:f});t.samples.push(g)}destory(){this.off(n.DEMUX_START,this.demux),this.configs={},this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}static compaireUint8(e,t){if(e.byteLength!==t.byteLength)return!1;let s=!0;for(let i=0;i<e.byteLength;i++)e[i]!==t[i]&&(s=!1);return s}static Merge(e){let t,s=0,i=0;for(let t=0;t<e.length;t++)s+=e[t].length-e[t].position;t=new Uint8Array(s);for(let s=0;s<e.length;s++){let r=e[s];t.set(new Uint8Array(r.buffer,r.position),i),i+=r.length-r.position}return new a.Stream(t.buffer)}static read(e,t,s){l.readHeader(e,t),l.readPayload(e,t,s),"MEDIA"!==t.header.packet||1!==t.header.payload||t.unknownPIDs||(t.pes=l.PES(t))}static readPayload(e,t,s){let i=t.header.pid;switch(i){case 0:l.PAT(e,t,s);break;case 1:l.CAT(e,t,s);break;case 2:l.TSDT(e,t,s);break;case 8191:break;default:if(s.pat.some(e=>e.pid===i))l.PMT(e,t,s);else{let r=s.pmt?s.pmt.filter(e=>e.pid===i):[];r.length>0?l.Media(e,t,o[r[0].streamType][0]):t.unknownPIDs=!0}}}static readHeader(e,t){let s={};s.sync=e.readUint8();let i=e.readUint16();s.error=i>>>15,s.payload=i>>>14&1,s.priority=i>>>13&1,s.pid=8191&i,i=e.readUint8(),s.scrambling=i>>6&3,s.adaptation=i>>4&3,s.continuity=15&i,s.packet=0===s.pid?"PAT":"MEDIA",t.header=s}static PAT(e,t,s){let i={},r=e.readUint8();e.skip(r),r=e.readUint8(),i.tabelID=r,r=e.readUint16(),i.error=r>>>7,i.zero=r>>>6&1,i.sectionLength=4095&r,i.streamID=e.readUint16(),i.current=1&e.readUint8(),i.sectionNumber=e.readUint8(),i.lastSectionNumber=e.readUint8();let a=(i.sectionLength-9)/4,n=[];for(let t=0;t<a;t++){let t=e.readUint16(),s=8191&e.readUint16();n.push({program:t,pid:s,type:0===t?"network":"mapPID"})}n.length>0&&(s.pat=s.pat.concat(n)),i.list=n,i.program=e.readUint16(),i.pid=8191&e.readUint16(),t.payload=i}static PMT(e,t,s){let i={};t.header.packet="PMT";let r=e.readUint8();e.skip(r),r=e.readUint8(),i.tableID=r,r=e.readUint16(),i.sectionLength=4095&r,i.program=e.readUint16(),i.current=1&e.readUint8(),i.order=e.readUint8(),i.lastOrder=e.readUint8(),i.PCR_PID=8191&e.readUint16(),i.programLength=4095&e.readUint16();let a=(i.sectionLength-13)/5,n=[];for(let t=0;t<a;t++)n.push({streamType:e.readUint8(),pid:8191&e.readUint16(),es:4095&e.readUint16()});i.list=n,this.pmt||(this.pmt=[]),s.pmt=this.pmt.concat(n.map(e=>({pid:e.pid,es:e.es,streamType:e.streamType,program:i.program}))),t.payload=i}static Media(e,t,s){let i=t.header,r={};if(i.type=s,3===i.adaptation&&(r.adaptationLength=e.readUint8(),r.adaptationLength>0)){let t=e.readUint8();r.discontinue=t>>>7,r.access=t>>>6&1,r.priority=t>>>5&1,r.PCR=t>>>4&1,r.OPCR=t>>>3&1,r.splicePoint=t>>>2&1,r.transportPrivate=t>>>1&1,r.adaptationField=1&t;let s=e.position;if(1===r.PCR&&(r.programClockBase=e.readUint32()<<1,t=e.readUint16(),r.programClockBase|=t>>>15,r.programClockExtension=511&t),1===r.OPCR&&(r.originProgramClockBase=e.readUint32()<<1,t=e.readUint16(),r.originProgramClockBase+=t>>>15,r.originProgramClockExtension=511&t),1===r.splicePoint&&(r.spliceCountdown=e.readUint8()),1===r.transportPrivate){let t=e.readUint8(),s=[];for(let i=0;i<t;i++)s.push(e.readUint8())}if(1===r.adaptationField){let t=e.readUint8(),s=e.readUint8(),i=e.position,a=s>>>6&1,n=s>>>5&1;1===s>>>7&&(s=e.readUint16(),r.ltwValid=s>>>15,r.ltwOffset=61439&s),1===a&&(s=e.readUint24(),r.piecewiseRate=4194303&s),1===n&&(s=e.readInt8(),r.spliceType=s>>>4,r.dtsNextAU1=s>>>1&7,r.marker1=1&s,s=e.readUint16(),r.dtsNextAU2=s>>>1,r.marker2=1&s,s=e.readUint16(),r.dtsNextAU3=s),e.skip(t-1-(e.position-i))}let i=r.adaptationLength-1-(e.position-s);e.skip(i)}r.stream=new a.Stream(e.buffer.slice(e.position)),t.payload=r}static PES(e){let t={},s=e.payload.stream;if(1!==s.readUint24())t.ES={},t.ES.buffer=s;else{let e=s.readUint8();e>=224&&e<=239&&(t.type="video"),e>=192&&e<=223&&(t.type="audio");let i=s.readUint16();if(t.packetLength=i,"video"!==t.type&&"audio"!==t.type)throw new Error("format is not supported");{let e=s.readUint8();if(2!==e>>>6)throw new Error("error when parse pes header");e=s.readUint8(),t.ptsDTSFlag=e>>>6,t.escrFlag=e>>>5&1,t.esRateFlag=e>>>4&1,t.dsmFlag=e>>>3&1,t.additionalFlag=e>>>2&1,t.crcFlag=e>>>1&1,t.extensionFlag=1&e,t.pesHeaderLength=s.readUint8();let i=t.pesHeaderLength;if(2===t.ptsDTSFlag){let r=[];e=s.readUint8(),r.push(e>>>1&7),e=s.readUint16(),r.push(e>>>1),e=s.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2],i-=5,"video"===t.type&&(t.dts=t.pts)}if(3===t.ptsDTSFlag){let r=[];e=s.readUint8(),r.push(e>>>1&7),e=s.readUint16(),r.push(e>>>1),e=s.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2];let a=[];e=s.readUint8(),a.push(e>>>1&7),e=s.readUint16(),a.push(e>>>1),e=s.readUint16(),a.push(e>>>1),t.dts=a[0]<<30|a[1]<<15|a[2],i-=10}if(1===t.escrFlag){let r=[],a=[];e=s.readUint8(),r.push(e>>>3&7),r.push(3&e),e=s.readUint16(),r.push(e>>>13),r.push(3&e),e=s.readUint16(),r.push(e>>>13),a.push(3&e),e=s.readUint8(),a.push(e>>>1),t.escr=300*(r[0]<<30|r[1]<<28|r[2]<<15|r[3]<<13|r[4])+(a[0]<<7|a[1]),i-=6}if(1===t.esRateFlag&&(e=s.readUint24(),t.esRate=e>>>1&4194303,i-=3),1===t.dsmFlag)throw new Error("not support DSM_trick_mode");if(1===t.additionalFlag&&(e=s.readUint8(),t.additionalCopyInfo=127&e,i-=1),1===t.crcFlag&&(t.pesCRC=s.readUint16(),i-=2),1===t.extensionFlag)throw new Error("not support extension");i>0&&s.skip(i),t.ES=l.ES(s,t.type)}}return t}static ES(e,t){let s,i={};if("video"===t){if(1!==(s=e.readUint32())&&(e.back(4),1!==(s=e.readUint24())))throw new Error("h264 nal header parse failed");e.skip(2),i.buffer=e}else{if("audio"!==t)throw new Error(`ES ${t} is not supported`);{if((s=e.readUint16())>>>4!=4095)throw new Error("aac ES parse Error");const t=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];i.id=0==(s>>>3&1)?"MPEG-4":"MPEG-2",i.layer=s>>>1&3,i.absent=1&s,s=e.readUint16(),i.audioObjectType=1+(s>>>14&3),i.profile=i.audioObjectType-1,i.frequencyIndex=s>>>10&15,i.frequence=t[i.frequencyIndex],i.channel=s>>>6&7,i.frameLength=(3&s)<<11|e.readUint16()>>>5,i.audioConfig=l.getAudioConfig(i.audioObjectType,i.channel,i.frequencyIndex),e.skip(1),i.buffer=e}}return i}static TSDT(e,t,s){t.payload={}}static CAT(e,t,s){let i={};i.tableID=e.readUint8();let r=e.readUint16();i.sectionIndicator=r>>>7,i.sectionLength=4095&r,e.skip(2),r=e.readUint8(),i.version=r>>>3,i.currentNextIndicator=1&r,i.sectionNumber=e.readUint8(),i.lastSectionNumber=e.readUint8();let a=(this.sectionLength-9)/4,n=[];for(let e=0;e<a;e++)n.push({});i.crc32=e.readUint32(),t.payload=i}static getAudioConfig(e,t,s){let i,r,a=navigator.userAgent.toLowerCase();return/firefox/i.test(a)?s>=6?(e=5,i=new Array(4),r=s-3):(e=2,i=new Array(2),r=s):-1!==a.indexOf("android")?(e=2,i=new Array(2),r=s):(e=5,i=new Array(4),s>=6?r=s-3:(1===t&&(e=2,i=new Array(2)),r=s)),i[0]=e<<3,i[0]|=(14&s)>>1,i[1]=(1&s)<<7,i[1]|=t<<3,5===e&&(i[1]|=(14&r)>>1,i[2]=(1&r)<<7,i[2]|=8,i[3]=0),i}get inputBuffer(){return this._context.getInstance(this.configs.inputbuffer)}get _tracks(){return this._context.getInstance("TRACKS")}}t.default=l},"../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
  !*** ../xgplayer-demux/src/hls/playlist.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=e.autoclear||!1}get list(){return this._list}set baseURL(e){this.baseURL!==e&&(this.clear(),this._baseURL=e)}get baseURL(){return this._baseURL}push(e,t){this._ts[e]||(this._ts[e]={duration:t,downloaded:!1,downloading:!1,start:this.duration},this._list[this.duration]=e,this.duration+=t,this.fragLength+=1)}deleteFrag(e){this._ts[e]&&(delete this._list[this._ts[e].start],delete this._ts[e],this.fragLength-=1)}pushM3U8(e,t){if(this.version=e.version,this.targetduration=e.targetduration,e.sequence>=this.sequence){this.sequence=e.sequence;let s=[];for(let t=0;t<e.frags.length;t++){let i=e.frags[t];this._ts[i.url]||(s.push(i.url),this.push(i.url,i.duration))}if(t){let e=this.getTsList();for(let t=0;t<e.length;t++)s.indexOf(e[t])<0&&this.deleteFrag(e[t])}}}getTsList(){return Object.keys(this._ts)}downloaded(e,t){let s=this._ts[e];s&&(s.downloaded=t)}downloading(e,t){let s=this._ts[e];s&&(s.downloading=t)}getTsByName(e){return this._ts[e]}getTs(e){let t,s=Object.keys(this._list);if(void 0===e&&(e=this._lastget?this._lastget.time+this._lastget.duration:0),!(s.length<1||e>=this.duration)){s.sort((e,t)=>parseFloat(e)-parseFloat(t));for(let i=0;i<s.length&&e>=parseInt(s[i]);i++){let e=this._list[s[i]];t={url:e,downloaded:this._ts[e].downloaded,downloading:this._ts[e].downloading,time:parseInt(s[i]),duration:parseInt(this._ts[e].duration)},this.autoclear&&(delete this._ts[this._lastget.url],delete this._list[this._lastget.time]),this._lastget=t}return t}}clear(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0}clearDownloaded(){for(let e=0,t=Object.keys(this._ts).length;e<t;e++){let t=this._ts[Object.keys(this._ts)[e]];t.downloaded=!1,t.downloading=!1}}destroy(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=!1}}},"../xgplayer-loader/index.js":
/*!***********************************!*\
  !*** ../xgplayer-loader/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={FetchLoader:s(/*! ./src/fetch-loader */"../xgplayer-loader/src/fetch-loader.js").default}},"../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader/src/fetch-loader.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=s(/*! xgplayer-utils */"../xgplayer-utils/index.js").EVENTS.LOADER_EVENTS,r=0,a=1,n=2,o=3;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(i.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let s=this;this.url=e,this._canceled=!1;let i=this.getParams(t);return s.loading=!0,fetch(this.url,i).then((function(e){if(e.ok)return s.status=e.status,s._onFetchResponse(e);throw new Error(`fail to fetch data: ${e.status}`)}))}_onFetchResponse(e){let t=this,s=this._context.getInstance(this.buffer);this._loaderTaskNo++;let l=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case n:e.json().then(e=>{t.loading=!1,t._canceled||(s?(s.push(e),t.emit(i.LOADER_COMPLETE,s)):t.emit(i.LOADER_COMPLETE,e))});break;case a:e.text().then(e=>{t.loading=!1,t._canceled||(s?(s.push(e),t.emit(i.LOADER_COMPLETE,s)):t.emit(i.LOADER_COMPLETE,e))});break;case o:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||(s?(s.push(new Uint8Array(e)),t.emit(i.LOADER_COMPLETE,s)):t.emit(i.LOADER_COMPLETE,e))});break;case r:default:return this._onReader(e.body.getReader(),l)}}_onReader(e,t){let s=this._context.getInstance(this.buffer);if(s||this._reader.cancel(),this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then((function(a){return a.done?(r.loading=!1,r.status=0,void r.emit(i.LOADER_COMPLETE,s)):r._canceled?void r._reader.cancel():(s.push(a.value),r.emit(i.LOADER_DATALOADED,s),r._onReader(e,t))})).catch((function(e){console.log(e)}))}getParams(e){let t=Object.assign({},e),s=new Headers,i={method:"GET",headers:s,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&s.append(t,e[t])}if("object"==typeof t.headers){let e=t.headers;for(let t in e)e.hasOwnProperty(t)&&s.append(t,e[t])}return!1===t.cors&&(i.mode="same-origin"),t.withCredentials&&(i.credentials="include"),i}cancel(){this._reader&&(this._reader.cancel(),this._reader=null,this.loading=!1,this._canceled=!0)}destroy(){this.cancel()}}},"../xgplayer-remux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-remux/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={Mp4Remuxer:s(/*! ./src/mp4 */"../xgplayer-remux/src/mp4/index.js").default}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(/*! xgplayer-utils */"../xgplayer-utils/index.js");class r{static size(e){return i.Buffer.writeUint32(e)}static initBox(e,t,...s){const a=new i.Buffer;return a.write(r.size(e),r.type(t),...s),a.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let s,i=8,a=r.mvhd(t.duration,t.timescale);s="video"===e?r.videoTrak(t):r.audioTrak(t);let n=r.mvex(t.duration,t.timescale||1e3,t.id);return[a,s,n].forEach(e=>{i+=e.byteLength}),r.initBox(i,"moov",a,s,n)}static mvhd(e,t=1e3){let s=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+s.length,"mvhd",new Uint8Array(s))}static videoTrak(e){let t=8,s=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),i=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[s,i].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",s,i)}static audioTrak(e){let t=8,s=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),i=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[s,i].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",s,i)}static tkhd(e){let t=e.id,s=e.duration,i=e.width,a=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,s>>>24&255,s>>>16&255,s>>>8&255,255&s,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,i>>>8&255,255&i,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new i.Buffer,s=e.duration,a=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,s>>24&255,s>>16&255,s>>8&255,255&s,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),t.buffer}static mdia(e){let t=8,s=r.mdhd(e.timescale,e.duration),i=r.hdlr(e.type),a=r.minf(e);return[s,i,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",s,i,a)}static mdhd(e=1e3,t){let s=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+s.byteLength,"mdhd",r.extension(0,0),s)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,s="video"===e.type?r.vmhd():r.smhd(),i=r.dinf(),a=r.stbl(e);return[s,i,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",s,i,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new i.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,s=r.stsd(e),i=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[s,i,a,n,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",s,i,a,n,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),s=r.esds(e.config);return r.initBox(8+t.byteLength+s.byteLength,"mp4a",t,s)}static esds(e=[43,146,8,0]){const t=e.length;let s=new i.Buffer,a=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return s.write(r.size(8+a.byteLength),r.type("esds"),a),s.buffer}static avc1(e){let t=new i.Buffer,s=e.width,a=e.height,n=e.parRatio.height,o=e.parRatio.width,l=e.avcc,d=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,s>>8&255,255&s,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),u=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),h=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+d.byteLength+l.byteLength+u.byteLength),r.type("avc1"),d,r.size(8+l.byteLength),r.type("avcC"),l,r.size(20),r.type("btrt"),u,r.size(16),r.type("pasp"),h),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e,t=1e3,s){let a=new i.Buffer,n=i.Buffer.writeUint32(e);return a.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),n,r.trex(s)),a.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,s=r.mfhd(),i=r.traf(e);return[s,i].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",s,i)}static mfhd(){let e=i.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,s=r.tfhd(e.id),i=r.tfdt(e.time),a=r.sdtp(e),n=r.trun(e,a.byteLength);return[s,i,n,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",s,i,n,a)}static tfhd(e){let t=i.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),i.Buffer.writeUint32(e))}static trun(e,t){let s=new i.Buffer,a=i.Buffer.writeUint32(e.samples.length),n=i.Buffer.writeUint32(92+16*e.samples.length+t);return s.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),e.samples.forEach(e=>{const t=e.flags;s.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),s.buffer}static sdtp(e){let t=new i.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const s=e.flags,i=s.isLeading<<6|s.dependsOn<<4|s.isDependedOn<<2|s.hasRedundancy;t.write(new Uint8Array([i]))}),t.buffer}static mdat(e){let t=new i.Buffer,s=8;e.samples.forEach(e=>{s+=e.size}),t.write(r.size(s),r.type("mdat"));let a=new Uint8Array(s),n=0;return a.set(t.buffer,n),n+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{a.set(e,n),n+=e.byteLength})}),a}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=s(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"),n=(i=a)&&i.__esModule?i:{default:i};const o=r.EVENTS.REMUX_EVENTS;class l{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(o.REMUX_MEDIA,this.remux.bind(this)),this.on(o.REMUX_METADATA,this.onMetaDataReady.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t,s,i=new r.Buffer,a=n.default.ftyp();if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");s=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");s=e}t=n.default.moov({type:e,meta:s.meta}),i.write(a,t);let l=this._context.getInstance("PRE_SOURCE_BUFFER"),d=l.getSource(e);d||(d=l.createSource(e)),d.mimetype=s.meta.codec,d.init=i,this.emit(o.INIT_SEGMENT,e)}calcDtsBase(e,t){if(!e.samples.length&&!t.samples.length)return;let s=1/0,i=1/0;e.samples&&e.samples.length&&(s=e.samples[0].dts),t.samples&&t.samples.length&&(i=t.samples[0].dts),this._dtsBase=Math.min(s,i),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let{samples:s}=t,i=-1;const a=[],l={samples:[]};for(;s.length;){const e=s.shift(),{isKeyframe:t}=e;let r,n,o=e.dts-this._dtsBase;-1===i&&(i=o),e.pts&&(r=(n=e.pts-this._dtsBase)-o),e.cts&&(n=e.cts+o,r=e.cts);let d={buffer:[],size:0};l.samples.push(d),d.buffer.push(e.data),d.size+=e.data.byteLength;let u=0;if(s.length>=1){u=s[0].dts-this._dtsBase-o}else u=a.length>=1?a[a.length-1].duration:this.videoMeta.refSampleDuration;this.videoAllDuration+=u,a.push({dts:o,cts:r,pts:n,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:u,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:o,type:"video"})}let d=new r.Buffer;const u=n.default.moof({id:t.meta.id,time:i,samples:a}),h=n.default.mdat(l);d.write(u,h),t.samples=[],t.length=0;let c=this._context.getInstance("PRE_SOURCE_BUFFER"),f=c.getSource("video");f||(f=c.createSource("video")),f.data.push(d),this.emit(o.MEDIA_SEGMENT,"video")}_remuxAudio(e){const{samples:t}=e;let s=-1,i=[];const a={samples:[]};if(!t||!t.length)return;let l=!1;for(;t.length;){let e=t.shift();const{data:r}=e;let n=e.dts-this._dtsBase;const o=n;l||(s=n,l=!0);let d=0;if(this.audioMeta.refSampleDurationFixed)d=this.audioMeta.refSampleDurationFixed;else if(t.length>=1){d=t[0].dts-this._dtsBase-n}else d=i.length>=1?i[i.length-1].duration:this.audioMeta.refSampleDuration;this.audioAllDuration+=d;const u={dts:n,pts:n,cts:0,size:r.byteLength,duration:e.duration?e.duration:d,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:o,type:"audio"};let h={buffer:[],size:0};h.buffer.push(r),h.size+=r.byteLength,a.samples.push(h),i.push(u)}const d=new r.Buffer,u=n.default.moof({id:e.meta.id,time:s,samples:i}),h=n.default.mdat(a);d.write(u,h),e.samples=[],e.length=0;let c=this._context.getInstance("PRE_SOURCE_BUFFER"),f=c.getSource("audio");f||(f=c.createSource("audio")),f.data.push(d),this.emit(o.MEDIA_SEGMENT,"audio",d)}initSilentAudio(e,t){const s=l.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:s,size:s.byteLength,originDts:e,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=l},"../xgplayer-utils/index.js":
/*!**********************************!*\
  !*** ../xgplayer-utils/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={Context:s(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:s(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:s(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:s(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:s(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:s(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,MediaInfo:s(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:s(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:s(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:s(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:s(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:s(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:s(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:s(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:s(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:s(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:s(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,s=arguments.length,i=Array(s>1?s-1:0),r=1;r<s;r++)i[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var l,d=i[Symbol.iterator]();!(a=(l=d.next()).done);a=!0){var u=l.value;t+=u.length}}catch(e){n=!0,o=e}finally{try{!a&&d.return&&d.return()}finally{if(n)throw o}}var h=new e(t),c=0,f=!0,p=!1,m=void 0;try{for(var g,y=i[Symbol.iterator]();!(f=(g=y.next()).done);f=!0){var _=g.value;h.set(_,c),c+=_.length}}catch(e){p=!0,m=e}finally{try{!f&&y.return&&y.return()}finally{if(p)throw m}}return h}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var i,r=s(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"),a=(i=r)&&i.__esModule?i:{default:i};e.exports=a.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},n={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o=Object.assign({},i,r,a,n),l=[],d=[];for(let e in o)o.hasOwnProperty(e)&&l.push(o[e]);for(let e in o)o.hasOwnProperty(e)&&d.push(o[e]);t.default={ALLEVENTS:o,REMUX_EVENTS:a,DEMUX_EVENTS:r,MSE_EVENTS:n,LOADER_EVENTS:i,FlvAllowedEvents:l,HlsAllowedEvents:d}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/context.js ***!
  \****************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"),a=(i=r)&&i.__esModule?i:{default:i},n=s(/*! events */"../../node_modules/events/events.js");const o="__TO__";t.default=class{constructor(e=[]){this._emitter=new n.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new a.default,this.allowedEvents=e,this._hooks={}}getInstance(e){if(this._instanceMap[e])return this._instanceMap[e];throw new Error(`${e}实例尚未初始化`)}initInstance(e,...t){if(this._clsMap[e]){const s=new this._clsMap[e](...t);return this._instanceMap[e]=s,s.init&&s.init(),s}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const s=this._emitter,i=this._isMessageNameValid.bind(this),r=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.TAG=e,this._context=r}on(t,r){return i(t),this.listeners[t]?this.listeners[t].push(r):this.listeners[t]=[r],s.on(`${t}${o}${e}`,r),s.on(t,r)}before(e,t){i(e),r._hooks[e]?r._hooks[e].push(t):r._hooks[e]=[t]}once(t,r){return i(t),s.on(`${t}${o}${e}`,r),s.once(t,r)}emit(e,...t){i(e);const a=r._hooks[e];if(a)for(let e=0,t=a.length;e<t;e++){(0,a[e])()}return s.emit(e,...t)}emitTo(e,t,...r){return i(t),s.emit(`${t}${o}${e}`,...r)}off(e,t){return i(e),s.off(e,t)}removeListeners(){const e=Object.prototype.hasOwnProperty.bind(this.listeners);for(let t in this.listeners)if(e(t)){const e=this.listeners[t]||[];for(let i=0;i<e.length;i++){const r=e[i];s.off(t,r)}}}destroy(){this.removeListeners(),delete r._instanceMap[e],super.destroy&&super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isle.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=i},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(s=>t[s].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),s=/(?:SymbianOS)/.test(e)||t,i=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),a=/(?:iPad|PlayBook)/.test(e)||i&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),n=/(?:iPhone)/.test(e)&&!a;return{isTablet:a,isPhone:n,isAndroid:i,isPc:!n&&!i&&!s,isSymbian:s,isWindowsPhone:t,isFireFox:r}},get isLe(){return i}};t.default=r},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/utf8.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{static decode(e){const t=[],s=e;let r=0;const a=e.length;for(;r<a;)if(s[r]<128)t.push(String.fromCharCode(s[r])),++r;else{if(s[r]<192);else if(s[r]<224){if(i._checkContinuation(s,r,1)){const e=(31&s[r])<<6|63&s[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(s[r]<240){if(i._checkContinuation(s,r,2)){const e=(15&s[r])<<12|(63&s[r+1])<<6|63&s[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(s[r]<248&&i._checkContinuation(s,r,3)){let e=(7&s[r])<<18|(63&s[r+1])<<12|(63&s[r+2])<<6|63&s[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,s){let i=e;if(t+s<i.length){for(;s--;)if(128!=(192&i[++t]))return!1;return!0}return!1}}t.default=i},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/media-info.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return i(e)}static isVideoReady(e){return!e.hasVideo||i(e.video)}static isAudioReady(e){return!e.hasAudio||i(e.video)}}t.default=r},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e){let t=i.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let s=Object.assign({},t,e);Object.entries(s).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=i},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let s=t.length-1,i=0,r=0,a=s,n=0;if(e<t[0].originDts)return n=-1;for(;r<=a;){if((i=r+Math.floor((a-r)/2))===s||e>t[i].lastSample.originDts&&e<t[i+1].originDts){n=i;break}t[i].originDts<e?r=i+1:a=i-1}return n}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,s=this._lastAppendLocation,i=0;-1!==s&&s<t.length&&e.originStartDts>=t[s].lastSample.originDts&&(s===t.length-1||s<t.length-1&&e.originStartDts<t[s+1].originStartDts)?i=s+1:t.length>0&&(i=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=i,this._list.splice(i,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),s=this._list[t].randomAccessPoints;for(;0===s.length&&t>0;)t--,s=this._list[t].randomAccessPoints;return s.length>0?s[s.length-1]:null}}},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/track-meta.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}};t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}}},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/track-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e){let t=i.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=i;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1}init(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen.bind(this)),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate.bind(this)),this.container.addEventListener("waiting",this.onWaiting.bind(this))}onTimeUpdate(){this.emit("TIME_UPDATE",this.container)}onWaiting(){this.emit("WAITING",this.container)}onSourceOpen(){this.addSourceBuffers()}onUpdateEnd(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),s=this._context.getInstance("TRACKS");t=t.sources;let i=!1;for(let r=0,a=Object.keys(t).length;r<a;r++){let a=Object.keys(t)[r];if("audio"===a?e=s.audioTrack:"video"===a&&(e=s.videoTrack),e){let s="audio"===a?21:40;e.meta&&e.meta.refSampleDuration&&(s=e.meta.refSampleDuration),t[a].data.length>=this.preloadTime/s&&(i=!0)}}if(i){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,s=Object.keys(t).length;e<s;e++){let s=Object.keys(t)[e],i=t[s],r="video"===s?"video/mp4;codecs="+i.mimetype:"audio/mp4;codecs="+i.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[s]=a,a.addEventListener("updateend",this.onUpdateEnd.bind(this)),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let s=Object.keys(this.sourceBuffers)[t],i=this.sourceBuffers[s];if(!i.updating){let t=e.sources[s];if(t&&!t.inited)i.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&i.appendBuffer(e.buffer.buffer)}}}}endOfStream(){"open"===this.mediaSource.readyState&&this.mediaSource.endOfStream()}remove(e){for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let s=this.sourceBuffers[Object.keys(this.sourceBuffers)[t]];s.updating||s.remove(0,e)}}destroy(){this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen);for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let t=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];t.removeEventListener("updateend",this.onUpdateEnd),this.mediaSource.removeSourceBuffer(t),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[e]]}}}},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/buffer.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),a=(i=r)&&i.__esModule?i:{default:i};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,a.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/stream.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),s=e%4;for(let e=0;e<t;e++)i.readByte(this.dataview,4);s>0&&i.readByte(this.dataview,s)}static readByte(e,t,s){let i;switch(t){case 1:i=s?e.getInt8(e.position):e.getUint8(e.position);break;case 2:i=s?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(s)throw new Error("not supported for readByte 3");i=e.getUint8(e.position)<<16,i|=e.getUint8(e.position+1)<<8,i|=e.getUint8(e.position+2);break;case 4:i=s?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(s)throw new Error("not supported for readBody 8");i=e.getUint32(e.position)<<32,i|=e.getUint32(e.position+4);break;default:i=""}return e.position+=t,i}readUint8(){return i.readByte(this.dataview,1)}readUint16(){return i.readByte(this.dataview,2)}readUint24(){return i.readByte(this.dataview,3)}readUint32(){return i.readByte(this.dataview,4)}readUint64(){return i.readByte(this.dataview,8)}readInt8(){return i.readByte(this.dataview,1,!0)}readInt16(){return i.readByte(this.dataview,2,!0)}readInt32(){return i.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=i},"./src/flv-live.js":
/*!*************************!*\
  !*** ./src/flv-live.js ***!
  \*************************/
/*! no static exports found */function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r=s(/*! xgplayer-remux */"../xgplayer-remux/index.js"),a=(i=r)&&i.__esModule?i:{default:i},n=s(/*! xgplayer-loader */"../xgplayer-loader/index.js"),o=s(/*! xgplayer-demux */"../xgplayer-demux/index.js"),l=s(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),d=s(/*! xgplayer-utils */"../xgplayer-utils/index.js"),u=s(/*! xgplayer-codec */"../xgplayer-codec/index.js");const h=d.EVENTS.REMUX_EVENTS,c=d.EVENTS.DEMUX_EVENTS,f=d.EVENTS.LOADER_EVENTS,p=d.EVENTS.MSE_EVENTS,m="FLVController";class g{warn(){}}t.default=class{constructor(e){this.TAG=m,this._player=e,this.state={initSegmentArrived:!1}}init(){this._context.registry("FETCH_LOADER",n.FetchLoader),this._context.registry("LOADER_BUFFER",l.XgBuffer),this._context.registry("FLV_DEMUXER",o.FlvDemuxer),this._context.registry("TRACKS",l.Tracks),this._context.registry("MP4_REMUXER",a.default.Mp4Remuxer),this._context.registry("PRE_SOURCE_BUFFER",l.PreSource),this._context.registry("COMPATIBILITY",u.Compatibility),this._context.registry("LOGGER",g),this.mse=this._context.registry("MSE",d.Mse)({container:this._player.video}),this.initListeners()}initListeners(){this.on(f.LOADER_DATALOADED,this._handleLoaderDataLoaded.bind(this)),this.on(c.MEDIA_INFO,this._handleMediaInfo.bind(this)),this.on(c.METADATA_PARSED,this._handleMetadataParsed.bind(this)),this.on(c.DEMUX_COMPLETE,this._handleDemuxComplete.bind(this)),this.on(h.INIT_SEGMENT,this._handleAppendInitSegment.bind(this)),this.on(h.MEDIA_SEGMENT,this._handleMediaSegment.bind(this)),this.on(p.SOURCE_UPDATE_END,this._handleSourceUpdateEnd.bind(this)),this._player.on("timeupdate",this._handleTimeUpdate.bind(this))}_handleMediaInfo(){this._context.mediaInfo||this.emit(c.DEMUX_ERROR,new Error("failed to get mediainfo"))}_handleLoaderDataLoaded(){this.emitTo("FLV_DEMUXER",c.DEMUX_START)}_handleMetadataParsed(e){this.emit(h.REMUX_METADATA,e)}_handleDemuxComplete(){this.emit(h.REMUX_MEDIA)}_handleAppendInitSegment(){this.state.initSegmentArrived=!0,this.mse.addSourceBuffers()}_handleMediaSegment(){this.mse.addSourceBuffers(),this.mse.doAppend()}_handleSourceUpdateEnd(){const e=this._player.currentTime,t=this._player.video,s=this._player.config.preloadTime||5,{length:i}=t.buffered;if(0===i)return;const r=t.buffered.end(i-1);r-e>2*s&&(this._player.currentTime=r-s)}_handleTimeUpdate(){const e=this._player.currentTime;e>2&&this.mse.remove(e-2)}seek(){this.state.initSegmentArrived||this.loadData()}loadData(){this.emit(f.LADER_START,this._player.config.url)}pause(){const e=this._context.getInstance("FETCH_LOADER");e&&e.cancel()}}},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,s){"use strict";var i=n(s(/*! xgplayer */"xgplayer")),r=s(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=n(s(/*! ./flv-live */"./src/flv-live.js"));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.FlvAllowedEvents;e.exports=class extends i.default{constructor(e){super(e),this.context=new r.Context(o),this.initEvents()}start(){this.initFlv(),this.context.init(),super.start(this.flv.mse.url)}initFlvEvents(e){const t=this;e.once(r.EVENTS.REMUX_EVENTS.INIT_SEGMENT,()=>{if(i.default.util.addClass(t.root,"xgplayer-is-live"),!i.default.util.findDom(this.root,"xg-live")){const e=i.default.util.createDom("xg-live","正在直播",{},"xgplayer-live");t.controls.appendChild(e)}}),e.once(r.EVENTS.LOADER_EVENTS.LOADER_COMPLETE,()=>{if(!t.paused){const e=setInterval(()=>{const s=t.getBufferedRange()[1];Math.abs(t.currentTime-s)<.5&&(t.emit("ended"),window.clearInterval(e))},200)}})}initEvents(){this.on("timeupdate",()=>{this.loadData()}),this.on("seeking",()=>{const e=this.currentTime,t=this.getBufferedRange();(e>t[1]||e<t[0])&&this.flv.seek(this.currentTime)}),this.once("destroy",()=>{super.destroy(),this._destroy()})}initFlv(){const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.initFlvEvents(e),this.flv=e}play(){if(this._hasStart){this._destroy(),this.context=new r.Context(o);const e=this.context.registry("FLV_CONTROLLER",a.default)(this);this.initFlvEvents(e),this.flv=e,this.context.init(),super.start(e.mse.url),super.play()}else super.play()}pause(){super.pause(),this.flv&&this.flv.pause()}loadData(e=this.currentTime){this.flv&&this.flv.seek(e)}_destroy(){this.context.destroy(),this.flv=null,this.context=null}get src(){return this.currentSrc}set src(e){this.player.config.url=e,this.paused?this.start(e):(this.pause(),this.once("pause",()=>{this.start(e)}),this.once("canplay",()=>{this.play()})),this.once("canplay",()=>{this.currentTime=0})}}},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,s){e.exports=s(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!*************************!*\
  !*** external "Player" ***!
  \*************************/
/*! no static exports found */function(e,t){e.exports=window.Player}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,