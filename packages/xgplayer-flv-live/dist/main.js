/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../node_modules/events/events.js":
/*!*****************************************************************************************!*\
  !*** /Users/leonardo/Documents/front-end/player/xgplayer/node_modules/events/events.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = $getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  var args = [];
  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "../../node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "../xgplayer-buffer/index.js":
/*!***********************************!*\
  !*** ../xgplayer-buffer/index.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Track: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").default,
  Tracks: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").Tracks,
  AudioTrack: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").AudioTrack,
  VideoTrack: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").VideoTrack,

  XgBuffer: __webpack_require__(/*! ./src/buffer */ "../xgplayer-buffer/src/buffer.js").XgBuffer,
  RemuxBuffer: __webpack_require__(/*! ./src/buffer */ "../xgplayer-buffer/src/buffer.js").RemuxBuffer,

  PreSource: __webpack_require__(/*! ./src/presouce */ "../xgplayer-buffer/src/presouce.js").default
};


/***/ }),

/***/ "../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
  !*** ../xgplayer-buffer/src/buffer.js ***!
  \****************************************/
/*! exports provided: XgBuffer, RemuxBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XgBuffer", function() { return XgBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RemuxBuffer", function() { return RemuxBuffer; });
class XgBuffer {
  /**
   * A buffer to store loaded data.
   *
   * @class LoaderBuffer
   * @param {number} length - Optional the buffer size
   */
  constructor (length) {
    this.length = length || 0
    this.historyLen = length || 0
    this.array = []
    this.offset = 0
  }

  /**
   * The function to push data.
   *
   * @param {number} data - The data to push into the buffer
   */
  push (data) {
    this.array.push(data)
    this.length += data.byteLength
    this.historyLen += data.byteLength
  }

  /**
   * The function to shift data.
   *
   * @param {number} length - The size of shift.
   */
  shift (length) {
    if (this.array.length < 1) {
      return new Uint8Array(0)
    }

    if (length === undefined) {
      return this._shiftBuffer()
    }
    if ((this.offset + length) === this.array[0].length) {
      let ret = this.array[0].slice(this.offset, this.offset + length)
      this.offset = 0
      this.array.shift()
      this.length -= length
      return ret
    }

    if ((this.offset + length) < this.array[0].length) {
      let ret = this.array[0].slice(this.offset, this.offset + length)
      this.offset += length
      this.length -= length
      return ret
    }

    let ret = new Uint8Array(length)
    let tmpoff = 0
    while (this.array.length > 0 && length > 0) {
      if ((this.offset + length) < this.array[0].length) {
        let tmp = this.array[0].slice(this.offset, this.offset + length)
        ret.set(tmp, tmpoff)
        this.offset += length
        this.length -= length
        length = 0
        break
      } else {
        let templength = this.array[0].length - this.offset
        ret.set(this.array[0].slice(this.offset, this.array[0].length), tmpoff)
        this.array.shift()
        this.offset = 0
        tmpoff += templength
        this.length -= templength
        length -= templength
      }
    }
    return ret
  }

  /**
   * Function to clear the buffer.
   */
  clear () {
    this.array = []
    this.length = 0
    this.offset = 0
  }

  destroy () {
    this.clear()
    this.historyLen = 0
  }

  /**
   * Function to shift one unit8Array.
   */
  _shiftBuffer () {
    this.length -= this.array[0].length
    this.offset = 0
    return this.array.shift()
  }

  /**
   * Convert uint8 data to number.
   *
   * @param {number} start - the start postion.
   * @param {number} length - the length of data.
   */
  toInt (start, length) {
    let retInt = 0
    let i = this.offset + start
    while (i < this.offset + length + start) {
      if (i < this.array[0].length) {
        retInt = retInt * 256 + this.array[0][i]
      } else if (this.array[1]) {
        retInt = retInt * 256 + this.array[1][i - this.array[0].length]
      }

      i++
    }
    return retInt
  }
}

class RemuxBuffer {
  constructor () {
    this.video = []
    this.audio = []
  }

  destroy () {
    this.video = []
    this.audio = []
  }
}


/***/ }),

/***/ "../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Source {
  constructor () {
    this.mimetype = '';
    this.init = null;
    this.data = [];
  }
}

class PreSource {
  constructor () {
    this.sources = {};
  }

  getSource (source) {
    return this.sources[source];
  }

  createSource (name) {
    this.sources[name] = new Source();
    return this.sources[name];
  }

  clear () {
    this.sources = {};
  }

  destroy () {
    this.sources = {};
  }
}

/* harmony default export */ __webpack_exports__["default"] = (PreSource);


/***/ }),

/***/ "../xgplayer-buffer/src/track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/track.js ***!
  \***************************************/
/*! exports provided: default, AudioTrack, VideoTrack, Tracks */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Track; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioTrack", function() { return AudioTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoTrack", function() { return VideoTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tracks", function() { return Tracks; });
class Track {
  /**
   * The constructor.
   */
  constructor () {
    this.id = -1
    this.sequenceNumber = 0
    this.samples = []
    this.droppedSamples = []
    this.length = 0
  }

  /**
   * Reset the track.
   */
  reset () {
    this.sequenceNumber = 0
    this.samples = []
    this.length = 0
  }
  /**
   * destroy the track.
   */
  distroy () {
    this.reset()
    this.id = -1
  }
}

class AudioTrack extends Track {
  /**
   * The constructor for audio track.
   */
  constructor () {
    super()
    this.TAG = 'AudioTrack'
    this.type = 'audio'
  }
}

class VideoTrack extends Track {
  /**
   * The constructor for video track.
   */
  constructor () {
    super()
    this.TAG = 'VideoTrack'
    this.type = 'video'
    this.dropped = 0
  }
  /**
   * reset the video track.
   */
  reset () {
    this.sequenceNumber = 0
    this.samples = []
    this.length = 0
    this.dropped = 0
  }
}

class Tracks {
  constructor () {
    this.audioTrack = null
    this.videoTrack = null
  }
}


/***/ }),

/***/ "../xgplayer-codec/index.js":
/*!**********************************!*\
  !*** ../xgplayer-codec/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Nalunit: __webpack_require__(/*! ./src/h264/nalunit */ "../xgplayer-codec/src/h264/nalunit/index.js").default,
  SpsParser: __webpack_require__(/*! ./src/h264/nalunit/sps */ "../xgplayer-codec/src/h264/nalunit/sps.js").default,

  Compatibility: __webpack_require__(/*! ./src/compatibility */ "../xgplayer-codec/src/compatibility.js").default
};


/***/ }),

/***/ "../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
  !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

class AAC {

  static getSilentFrame(codec, channelCount) {
    if (codec === 'mp4a.40.2') {
      // handle LC-AAC
      if (channelCount === 1) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);
      } else if (channelCount === 2) {
        return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);
      } else if (channelCount === 3) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);
      } else if (channelCount === 4) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);
      } else if (channelCount === 5) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);
      } else if (channelCount === 6) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);
      }
    } else {
      // handle HE-AAC (mp4a.40.5 / mp4a.40.29)
      if (channelCount === 1) {
        // ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
      } else if (channelCount === 2) {
        // ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
      } else if (channelCount === 3) {
        // ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
      }
    }
    return null;
  }

}

/* harmony default export */ __webpack_exports__["default"] = (AAC);


/***/ }),

/***/ "../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
  !*** ../xgplayer-codec/src/compatibility.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _aac_aac_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aac/aac-helper */ "../xgplayer-codec/src/aac/aac-helper.js");



const {REMUX_EVENTS} = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"]

class Compatibility {
  constructor () {
    this.nextAudioDts = 0 // 模拟下一段音频数据的dts
    this.nextVideoDts = 0 // 模拟下一段视频数据的dts

    this.lastAudioSamplesLen = 0 // 上一段音频数据的长度
    this.lastVideoSamplesLen = 0 // 上一段视频数据的长度

    this.lastVideoDts = undefined // 上一段音频数据的长度
    this.lastAudioDts = undefined // 上一段视频数据的长度

    this.allAudioSamplesCount = 0 // 音频总数据量(原始帧)
    this.allVideoSamplesCount = 0 // 视频总数据量(原始帧)

    this._firstAudioSample = null
    this._firstVideoSample = null

    this.filledAudioSamples = [] // 补充音频帧（）
    this.filledVideoSamples = [] // 补充视频帧（）
  }

  init () {
    this.before(REMUX_EVENTS.REMUX_MEDIA, this.doFix.bind(this))
  }

  reset () {
    this.nextAudioDts = 0 // 模拟下一段音频数据的dts
    this.nextVideoDts = 0 // 模拟下一段视频数据的dts

    this.lastAudioSamplesLen = 0 // 上一段音频数据的长度
    this.lastVideoSamplesLen = 0 // 上一段视频数据的长度

    this.lastVideoDts = undefined // 上一段音频数据的长度
    this.lastAudioDts = undefined // 上一段视频数据的长度

    this.allAudioSamplesCount = 0 // 音频总数据量(原始帧)
    this.allVideoSamplesCount = 0 // 视频总数据量(原始帧)

    this._firstAudioSample = null
    this._firstVideoSample = null

    this.filledAudioSamples = [] // 补充音频帧（）
    this.filledVideoSamples = [] // 补充视频帧（）
  }

  doFix () {
    const { isFirstAudioSamples, isFirstVideoSamples } = this.getFirstSample()

    this.removeInvalidSamples()

    this.recordSamplesCount()

    if (this._firstVideoSample) {
      this.fixRefSampleDuration(this.videoTrack.meta, this.videoTrack.samples)
    }
    if (this._firstAudioSample) {
      this.fixRefSampleDuration(this.audioTrack.meta, this.audioTrack.samples)
    }

    this.doFixVideo(isFirstVideoSamples)
    this.doFixAudio(isFirstAudioSamples)
  }

  doFixVideo (first) {
    let {samples: videoSamples, meta} = this.videoTrack

    if (meta.frameRate && meta.frameRate.fixed === false) {
      return;
    }

    if (!videoSamples || !videoSamples.length || !this._firstVideoSample) {
      return
    }

    // console.log(`video lastSample, ${videoSamples[videoSamples.length - 1].dts}`)

    const firstSample = videoSamples[0]
    const firstDts = firstSample.dts

    const samplesLen = videoSamples.length;

    // step1. 修复与audio首帧差距太大的问题
    if (first && this._firstAudioSample) {
      const videoFirstDts = this._firstVideoSample.dts
      const audioFirstDts = this._firstAudioSample.dts
      const gap = videoFirstDts - audioFirstDts
      if (gap > (2 * meta.refSampleDuration)) {
        const fillCount = Math.floor(gap / meta.refSampleDuration)

        for (let i = 0; i < fillCount; i++) {
          const clonedFirstSample = Object.assign({}, firstSample) // 视频头部帧缺失需要复制第一帧
          // 重新计算sample的dts和pts
          clonedFirstSample.dts = videoFirstDts - (i + 1) * meta.refSampleDuration
          clonedFirstSample.pts = clonedFirstSample.dts + clonedFirstSample.cts

          videoSamples.unshift(clonedFirstSample)

          this.filledVideoSamples.push({
            dts: clonedFirstSample.dts,
            size: clonedFirstSample.data.byteLength
          })
        }
      }
    }

    let gap
    // step2. 修复samples段之间的间距问题、
    if (this.nextVideoDts) {
      // step1. 处理samples段之间的丢帧情况
      // 当发现duration差距大于2帧时进行补帧
      gap = firstDts - this.nextVideoDts
      const absGap = Math.abs(gap)
      if (gap > (2 * meta.refSampleDuration)) {
        const fillFrameCount = Math.floor(gap / meta.refSampleDuration)

        for (let i = 0; i < fillFrameCount; i++) {
          const clonedSample = Object.assign({}, videoSamples[0])
          const computed = firstDts - (i + 1) * meta.refSampleDuration

          clonedSample.dts = computed > this.nextVideoDts ? computed : this.nextVideoDts // 补的第一帧一定要是nextVideoDts
          clonedSample.pts = clonedSample.dts + clonedSample.cts

          this.videoTrack.samples.unshift(clonedSample)

          this.filledVideoSamples.push({
            dts: clonedSample.dts,
            size: clonedSample.data.byteLength
          })
        }
      } else if (absGap <= 10 && absGap > 0) {
        // 当差距在+-一帧之间时将第一帧的dts强行定位到期望位置
        // console.log('重定位视频帧dts', videoSamples[0].dts, this.nextVideoDts)
        videoSamples[0].dts = this.nextVideoDts
        videoSamples[0].originDts = videoSamples[0].dts
        videoSamples[0].cts = videoSamples[0].cts || videoSamples[0].pts - videoSamples[0].dts
        videoSamples[0].pts = videoSamples[0].dts + videoSamples[0].cts
      }
    }
    const lastDts = videoSamples[videoSamples.length - 1].dts;

    const lastSampleDuration = videoSamples.length >= 2 ? lastDts - videoSamples[videoSamples.length - 2].dts : meta.refSampleDuration

    this.lastVideoSamplesLen = samplesLen
    this.nextVideoDts = lastDts + lastSampleDuration
    this.lastVideoDts = lastDts

    // step2. 修复sample段之内的间距问题
    // step3. 修复samples段内部的dts异常问题
    for (let i = 0, len = videoSamples.length; i < len; i++) {
      const current = videoSamples[i]
      const next = videoSamples[i + 1]

      if (!next) {
        break;
      }

      const duration = next.dts - current.dts;

      if (duration > (2 * meta.refSampleDuration)) {
        // 两帧之间间隔太大，需要补空白帧
        let fillFrameCount = Math.floor(duration / meta.refSampleDuration)

        let fillFrameIdx = 0
        while (fillFrameIdx < fillFrameCount) {
          const fillFrame = Object.assign({}, next)
          fillFrame.dts = current.dts + (fillFrameIdx + 1) * meta.refSampleDuration
          fillFrame.pts = fillFrame.dts + fillFrame.cts
          if (fillFrame < next.dts) {
            videoSamples.splice(i, 0, fillFrame)

            this.filledVideoSamples.push({
              dts: fillFrame.dts,
              size: fillFrame.data.byteLength
            })
          }

          fillFrameIdx++
          i++;
        }
      }
    }

    this.videoTrack.samples = videoSamples;
  }

  doFixAudio (first) {
    let {samples: audioSamples, meta} = this.audioTrack

    if (!audioSamples || !audioSamples.length) {
      return
    }
    // console.log(`audio lastSample, ${audioSamples[audioSamples.length - 1].dts}`)

    const samplesLen = audioSamples.length;
    const silentFrame = _aac_aac_helper__WEBPACK_IMPORTED_MODULE_1__["default"].getSilentFrame(meta.codec, meta.channelCount)

    const firstSample = this._firstAudioSample

    // 对audioSamples按照dts做排序
    audioSamples = Compatibility.sortAudioSamples(audioSamples)

    // step0. 首帧与video首帧间距大的问题
    if (this._firstVideoSample && first) {
      const videoFirstPts = this._firstVideoSample.pts ? this._firstVideoSample.pts : this._firstVideoSample.dts + this._firstVideoSample.cts

      if (firstSample.dts - videoFirstPts > meta.refSampleDuration) {
        const silentSampleCount = Math.floor((firstSample.dts - videoFirstPts) / meta.refSampleDuration)

        for (let i = 0; i < silentSampleCount; i++) {
          const silentSample = {
            data: silentFrame,
            datasize: silentFrame.byteLength,
            dts: firstSample.dts - (i + 1) * meta.refSampleDuration,
            filtered: 0
          }

          audioSamples.unshift(silentSample)

          this.filledAudioSamples.push({
            dts: silentSample.dts,
            size: silentSample.data.byteLength
          })
        }
      }
    }

    let gap
    const firstDts = audioSamples[0].dts

    if (this.nextAudioDts) {
      // step1. 处理samples段之间的丢帧情况
      // 当发现duration差距大于1帧时进行补帧
      gap = firstDts - this.nextAudioDts
      const absGap = Math.abs(gap)

      if (absGap > meta.refSampleDuration && samplesLen === 1 && this.lastAudioSamplesLen === 1) {
        meta.refSampleDurationFixed = undefined
      }

      if (gap > (2 * meta.refSampleDuration)) {
        if (samplesLen === 1 && this.lastAudioSamplesLen === 1) {
          // 如果sample的length一直是1，而且一直不符合refSampleDuration，需要动态修改refSampleDuration
          meta.refSampleDurationFixed = meta.refSampleDurationFixed !== undefined ? meta.refSampleDurationFixed + gap : meta.refSampleDuration + gap
        } else {
          const silentFrameCount = Math.floor(gap / meta.refSampleDuration)

          for (let i = 0; i < silentFrameCount; i++) {
            const computed = firstDts - (i + 1) * meta.refSampleDuration
            const silentSample = Object.assign({}, audioSamples[0], {
              dts: computed > this.nextAudioDts ? computed : this.nextAudioDts
            })

            this.filledAudioSamples.push({
              dts: silentSample.dts,
              size: silentSample.data.byteLength
            })
            this.audioTrack.samples.unshift(silentSample)
          }
        }
      } else if (absGap <= 10 && absGap > 0) {
        // 当差距比较小的时候将音频帧重定位
        // console.log('重定位音频帧dts', audioSamples[0].dts, this.nextAudioDts)
        audioSamples[0].dts = this.nextAudioDts
        audioSamples[0].pts = this.nextAudioDts
      }
    }
    const lastDts = audioSamples[audioSamples.length - 1].dts;
    const lastSampleDuration = audioSamples.length >= 2 ? lastDts - audioSamples[audioSamples.length - 2].dts : meta.refSampleDuration

    this.lastAudioSamplesLen = samplesLen;
    this.nextAudioDts = meta.refSampleDurationFixed ? lastDts + meta.refSampleDurationFixed : lastDts + lastSampleDuration
    this.lastAudioDts = lastDts

    // step3. 修复samples段内部的dts异常问题
    for (let i = 0, len = audioSamples.length; i < len; i++) {
      const current = audioSamples[i]
      const next = audioSamples[i + 1]

      if (!next) {
        break;
      }

      const duration = next.dts - current.dts;
      audioSamples[i].duration = duration;
      /*
      if (duration > (2 * meta.refSampleDuration)) {
        // 两帧之间间隔太大，需要补空白帧
        /**
        let silentFrameCount = Math.floor(duration / meta.refSampleDuration)
        let frameIdx = 0

        while (frameIdx < silentFrameCount) {
          const silentSample = {
            data: silentFrame,
            datasize: silentFrame.byteLength,
            dts: current.dts + (frameIdx + 1) * meta.refSampleDuration,
            filtered: 0,
            isSilent: true
          }

          audioSamples.splice(i, 0, silentSample)

          this.filledAudioSamples.push({
            dts: silentSample.dts,
            size: silentSample.data.byteLength
          })

          frameIdx++
          i++ // 不对静音帧做比较
        }
      } */
    }

    this.audioTrack.samples = Compatibility.sortAudioSamples(audioSamples)
  }

  getFirstSample () {
    // 获取video和audio的首帧数据
    let {samples: videoSamples} = this.videoTrack
    let {samples: audioSamples} = this.audioTrack

    let isFirstVideoSamples = false;
    let isFirstAudioSamples = false;

    if (!this._firstVideoSample && videoSamples.length) {
      this._firstVideoSample = Compatibility.findFirstVideoSample(videoSamples)
      isFirstVideoSamples = true
    }

    if (!this._firstAudioSample && audioSamples.length) {
      this._firstAudioSample = Compatibility.findFirstAudioSample(audioSamples) // 寻找dts最小的帧作为首个音频帧
      isFirstAudioSamples = true
    }

    return {
      isFirstVideoSamples,
      isFirstAudioSamples
    }
  }

  /**
   * 在没有refSampleDuration的问题流中，
   */
  fixRefSampleDuration (meta, samples) {
    const isVideo = meta.type === 'video'
    const allSamplesCount = isVideo ? this.allVideoSamplesCount : this.allAudioSamplesCount
    const firstDts = isVideo ? this._firstVideoSample.dts : this._firstAudioSample.dts
    const filledSamplesCount = isVideo ? this.filledVideoSamples.length : this.filledAudioSamples.length

    if (!meta.refSampleDuration || meta.refSampleDuration <= 0 || Number.isNaN(meta.refSampleDuration)) {
      if (samples.length >= 1) {
        const lastDts = samples[samples.length - 1].dts

        meta.refSampleDuration = Math.floor((lastDts - firstDts) / ((allSamplesCount + filledSamplesCount) - 1)); // 将refSampleDuration重置为计算后的平均值
      }
    } else if (meta.refSampleDuration) {
      if (samples.length >= 3) {
        const lastDts = samples[samples.length - 1].dts
        const firstDts = samples[0].dts
        const durationAvg = (lastDts - firstDts) / samples.length

        meta.refSampleDuration = Math.abs(meta.refSampleDuration - durationAvg) <= meta.refSampleDuration ? meta.refSampleDuration : durationAvg; // 将refSampleDuration重置为计算后的平均值
      }
    }
  }

  /**
   * 记录截止目前一共播放了多少帧
   */
  recordSamplesCount () {
    const { audioTrack, videoTrack } = this

    this.allAudioSamplesCount += audioTrack.samples.length
    this.allVideoSamplesCount += videoTrack.samples.length
  }

  /**
   * 去除不合法的帧（倒退、重复帧）
   */
  removeInvalidSamples () {
    const { _firstVideoSample, _firstAudioSample } = this

    this.audioTrack.samples = this.audioTrack.samples.filter((sample) => {
      return sample.dts >= _firstAudioSample.dts && (this.lastAudioDts === undefined || sample.dts > this.lastAudioDts)
    })

    this.videoTrack.samples = this.videoTrack.samples.filter((sample) => {
      return sample.dts >= _firstVideoSample.dts && (this.lastVideoDts === undefined || sample.dts > this.lastVideoDts)
    })
  }

  static sortAudioSamples (samples) {
    if (samples.length === 1) {
      return samples
    }

    return samples.sort((a, b) => {
      return a.dts - b.dts
    })
  }

  /**
   * 寻找dts最小的sample
   * @param samples
   */
  static findFirstAudioSample (samples) {
    if (!samples || samples.length === 0) {
      return null
    }

    return Compatibility.sortAudioSamples(samples)[0]
  }

  static findFirstVideoSample (samples) {
    if (!samples.length) {
      return null
    }

    const sorted = samples.sort((a, b) => {
      return a.dts - b.dts;
    })

    for (let i = 0, len = sorted.length; i < len; i++) {
      if (sorted[i].isKeyframe) {
        return sorted[i]
      }
    }
  }

  get tracks () {
    return this._context.getInstance('TRACKS')
  }

  get audioTrack () {
    if (this.tracks) {
      return this.tracks.audioTrack
    }
    return null
  }

  get videoTrack () {
    if (this.tracks) {
      return this.tracks.videoTrack
    }
    return null
  }
}
/* harmony default export */ __webpack_exports__["default"] = (Compatibility);


/***/ }),

/***/ "../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Golomb {
  constructor (uint8array) {
    this.TAG = 'Golomb'
    this._buffer = uint8array
    this._bufferIndex = 0
    this._totalBytes = uint8array.byteLength
    this._totalBits = uint8array.byteLength * 8
    this._currentWord = 0
    this._currentWordBitsLeft = 0
  }

  destroy () {
    this._buffer = null
  }

  _fillCurrentWord () {
    let bufferBytesLeft = this._totalBytes - this._bufferIndex
    if (bufferBytesLeft <= 0) {
      // TODO 异常处理
    }

    let bytesRead = Math.min(4, bufferBytesLeft)
    let word = new Uint8Array(4)
    word.set(this._buffer.subarray(this._bufferIndex, this._bufferIndex + bytesRead))
    this._currentWord = new DataView(word.buffer).getUint32(0, false)

    this._bufferIndex += bytesRead
    this._currentWordBitsLeft = bytesRead * 8
  }

  readBits (bits) {
    if (bits > 32) {
      // TODO
    }

    if (bits <= this._currentWordBitsLeft) {
      let result = this._currentWord >>> (32 - bits)
      this._currentWord <<= bits
      this._currentWordBitsLeft -= bits
      return result
    }

    let result = this._currentWordBitsLeft ? this._currentWord : 0
    // eslint-disable-next-line
    result >>> (32 - this._currentWordBitsLeft)
    let bitsNeedLeft = bits - this._currentWordBitsLeft

    this._fillCurrentWord()
    let bitsReadNext = Math.min(bitsNeedLeft, this._currentWordBitsLeft)

    let result2 = this._currentWord >>> (32 - bitsReadNext)
    this._currentWord <<= bitsReadNext
    this._currentWordBitsLeft -= bitsReadNext

    result = (result << bitsReadNext) | result2
    return result
  }

  readBool () {
    return this.readBits(1) === 1
  }

  readByte () {
    return this.readBits(8)
  }

  _skipLeadingZero () {
    let zeroCount
    for (zeroCount = 0; zeroCount < this._currentWordBitsLeft; zeroCount++) {
      if ((this._currentWord & (0x80000000 >>> zeroCount)) !== 0) {
        this._currentWord <<= zeroCount
        this._currentWordBitsLeft -= zeroCount
        return zeroCount
      }
    }
    this._fillCurrentWord()
    return zeroCount + this._skipLeadingZero()
  }

  readUEG () { // unsigned exponential golomb
    let leadingZeros = this._skipLeadingZero()
    return this.readBits(leadingZeros + 1) - 1
  }

  readSEG () { // signed exponential golomb
    let value = this.readUEG()
    if (value & 0x01) {
      return (value + 1) >>> 1
    } else {
      return -1 * (value >>> 1)
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Golomb);


/***/ }),

/***/ "../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sps */ "../xgplayer-codec/src/h264/nalunit/sps.js");

class Nalunit {
  static getNalunits (buffer) {
    if (buffer.length - buffer.position < 4) {
      return [];
    }

    let buf = buffer.dataview;
    let position = buffer.position;
    if (buf.getInt32(position) === 1 ||
    (buf.getInt16(position) === 0 && buf.getInt8(position + 2) === 1)) {
      return Nalunit.getAnnexbNals(buffer);
    } else {
      return Nalunit.getAvccNals(buffer);
    }
  }

  static getAnnexbNals (buffer) {
    let nals = [];
    let position = Nalunit.getHeaderPositionAnnexB(buffer);
    let start = position.pos;
    let end = start;
    while (start < buffer.length - 4) {
      let header = buffer.buffer.slice(start, start + position.headerLength);
      if (position.pos === buffer.position) {
        buffer.skip(position.headerLength);
      }
      position = Nalunit.getHeaderPositionAnnexB(buffer);
      end = position.pos;
      let body = new Uint8Array(buffer.buffer.slice(start + header.byteLength, end));
      let unit = {header, body};
      Nalunit.analyseNal(unit);
      nals.push(unit);
      buffer.skip(end - buffer.position);
      start = end;
    }
    return nals;
  }

  static getAvccNals (buffer) {
    let nals = [];
    while (buffer.position < buffer.length - 4) {
      let length = buffer.dataview.getInt32(buffer.position);
      if (buffer.length - buffer.position >= length) {
        let header = buffer.buffer.slice(buffer.position, buffer.position + 4);
        buffer.skip(4)
        let body = buffer.buffer.slice(buffer.position, buffer.position + length);
        buffer.skip(length);
        let unit = {header, body};
        Nalunit.analyseNal(unit);
        nals.push(unit);
      } else {
        break;
      }
    }
    return nals;
  }

  static analyseNal (unit) {
    let type = unit.body[0] & 0x1f;
    switch (type) {
      case 1:
        // NDR
        unit.ndr = true;
        break;
      case 5:
        // IDR
        unit.idr = true;
        break;
      case 6:
        // SEI
        break;
      case 7:
        // SPS
        unit.sps = _sps__WEBPACK_IMPORTED_MODULE_0__["default"].parseSPS(unit.body);
        break;
      case 8:
        // PPS
        unit.pps = true;
        break;
      case 9:
        // AUD
        break;
      default:
        break;
    }
  }

  static getHeaderPositionAnnexB (buffer) {
    // seperate
    let pos = buffer.position;
    let headerLength = 0;
    while (headerLength !== 3 && headerLength !== 4 && pos < buffer.length - 4) {
      if (buffer.dataview.getInt16(pos) === 0) {
        if (buffer.dataview.getInt16(pos + 2) === 1) {
          // 0x000001
          headerLength = 4;
        } else if (buffer.dataview.getInt8(pos + 2) === 1) {
          headerLength = 3;
        } else {
          pos++;
        }
      } else {
        pos++;
      }
    }

    if (pos === buffer.length - 4) {
      if (buffer.dataview.getInt16(pos) === 0) {
        if (buffer.dataview.getInt16(pos + 2) === 1) {
          // 0x000001
          headerLength = 4;
        }
      } else {
        pos++;
        if (buffer.dataview.getInt16(pos) === 0 && buffer.dataview.getInt8(pos) === 1) {
          // 0x0000001
          headerLength = 3;
        } else {
          pos = buffer.length;
        }
      }
    }
    return {pos, headerLength};
  }

  static getAvcc (sps, pps) {
    let ret = new Uint8Array(sps.byteLength + pps.byteLength + 11);
    ret[0] = 0x01;
    ret[1] = sps[1];
    ret[2] = sps[2];
    ret[3] = sps[3];
    ret[4] = 255;
    ret[5] = 225;

    let offset = 6;

    ret.set(new Uint8Array([(sps.byteLength >>> 8) & 0xff, sps.byteLength & 0xff]), offset);
    offset += 2;
    ret.set(sps, offset);
    offset += sps.byteLength;

    ret[offset] = 1;
    offset++;

    ret.set(new Uint8Array([(pps.byteLength >>> 8) & 0xff, pps.byteLength & 0xff]), offset);
    offset += 2;
    ret.set(pps, offset);
    return ret;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Nalunit);


/***/ }),

/***/ "../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _golomb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./golomb */ "../xgplayer-codec/src/h264/nalunit/golomb.js");
/* eslint-disable camelcase  */
/* eslint-disable one-var  */


class SPSParser {
  static _ebsp2rbsp (uint8array) {
    let src = uint8array
    let srcLength = src.byteLength
    let dst = new Uint8Array(srcLength)
    let dstIdx = 0

    for (let i = 0; i < srcLength; i++) {
      if (i >= 2) {
        if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {
          continue
        }
      }
      dst[dstIdx] = src[i]
      dstIdx++
    }

    return new Uint8Array(dst.buffer, 0, dstIdx)
  }

  static parseSPS (uint8array) {
    let rbsp = SPSParser._ebsp2rbsp(uint8array)
    let gb = new _golomb__WEBPACK_IMPORTED_MODULE_0__["default"](rbsp)

    gb.readByte()
    let profileIdc = gb.readByte()
    gb.readByte()
    let levelIdc = gb.readByte()
    gb.readUEG()

    let profile_string = SPSParser.getProfileString(profileIdc)
    let level_string = SPSParser.getLevelString(levelIdc)
    let chroma_format_idc = 1
    let chroma_format = 420
    let chroma_format_table = [0, 420, 422, 444]
    let bit_depth = 8

    if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 ||
      profileIdc === 244 || profileIdc === 44 || profileIdc === 83 ||
      profileIdc === 86 || profileIdc === 118 || profileIdc === 128 ||
      profileIdc === 138 || profileIdc === 144) {
      chroma_format_idc = gb.readUEG()
      if (chroma_format_idc === 3) {
        gb.readBits(1)
      }
      if (chroma_format_idc <= 3) {
        chroma_format = chroma_format_table[chroma_format_idc]
      }

      bit_depth = gb.readUEG() + 8
      gb.readUEG()
      gb.readBits(1)
      if (gb.readBool()) {
        let scaling_list_count = (chroma_format_idc !== 3) ? 8 : 12
        for (let i = 0; i < scaling_list_count; i++) {
          if (gb.readBool()) {
            if (i < 6) {
              SPSParser._skipScalingList(gb, 16)
            } else {
              SPSParser._skipScalingList(gb, 64)
            }
          }
        }
      }
    }
    gb.readUEG()
    let pic_order_cnt_type = gb.readUEG()
    if (pic_order_cnt_type === 0) {
      gb.readUEG()
    } else if (pic_order_cnt_type === 1) {
      gb.readBits(1)
      gb.readSEG()
      gb.readSEG()
      let num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG()
      for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {
        gb.readSEG()
      }
    }
    gb.readUEG()
    gb.readBits(1)

    let pic_width_in_mbs_minus1 = gb.readUEG()
    let pic_height_in_map_units_minus1 = gb.readUEG()

    let frame_mbs_only_flag = gb.readBits(1)
    if (frame_mbs_only_flag === 0) {
      gb.readBits(1)
    }
    gb.readBits(1)

    let frame_crop_left_offset = 0
    let frame_crop_right_offset = 0
    let frame_crop_top_offset = 0
    let frame_crop_bottom_offset = 0

    let frame_cropping_flag = gb.readBool()
    if (frame_cropping_flag) {
      frame_crop_left_offset = gb.readUEG()
      frame_crop_right_offset = gb.readUEG()
      frame_crop_top_offset = gb.readUEG()
      frame_crop_bottom_offset = gb.readUEG()
    }

    let par_width = 1, par_height = 1
    let fps = 0, fps_fixed = true, fps_num = 0, fps_den = 0

    let vui_parameters_present_flag = gb.readBool()
    if (vui_parameters_present_flag) {
      if (gb.readBool()) { // aspect_ratio_info_present_flag
        let aspect_ratio_idc = gb.readByte()
        let par_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2]
        let par_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1]

        if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {
          par_width = par_w_table[aspect_ratio_idc - 1]
          par_height = par_h_table[aspect_ratio_idc - 1]
        } else if (aspect_ratio_idc === 255) {
          par_width = gb.readByte() << 8 | gb.readByte()
          par_height = gb.readByte() << 8 | gb.readByte()
        }
      }

      if (gb.readBool()) {
        gb.readBool()
      }
      if (gb.readBool()) {
        gb.readBits(4)
        if (gb.readBool()) {
          gb.readBits(24)
        }
      }
      if (gb.readBool()) {
        gb.readUEG()
        gb.readUEG()
      }
      if (gb.readBool()) {
        let num_units_in_tick = gb.readBits(32)
        let time_scale = gb.readBits(32)
        fps_fixed = gb.readBool()

        fps_num = time_scale
        fps_den = num_units_in_tick * 2
        fps = fps_num / fps_den
      }
    }

    let parScale = 1
    if (par_width !== 1 || par_height !== 1) {
      parScale = par_width / par_height
    }

    let crop_unit_x = 0, crop_unit_y = 0
    if (chroma_format_idc === 0) {
      crop_unit_x = 1
      crop_unit_y = 2 - frame_mbs_only_flag
    } else {
      let sub_wc = (chroma_format_idc === 3) ? 1 : 2
      let sub_hc = (chroma_format_idc === 1) ? 2 : 1
      crop_unit_x = sub_wc
      crop_unit_y = sub_hc * (2 - frame_mbs_only_flag)
    }

    let codec_width = (pic_width_in_mbs_minus1 + 1) * 16
    let codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16)

    codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x
    codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y

    let present_width = Math.ceil(codec_width * parScale)

    gb.destroy()
    gb = null

    return {
      profile_string: profile_string,
      level_string: level_string,
      bit_depth: bit_depth,
      chroma_format: chroma_format,
      chroma_format_string: SPSParser.getChromaFormatString(chroma_format),

      frame_rate: {
        fixed: fps_fixed,
        fps: fps,
        fps_den: fps_den,
        fps_num: fps_num
      },

      par_ratio: {
        width: par_width,
        height: par_height
      },

      codec_size: {
        width: codec_width,
        height: codec_height
      },

      present_size: {
        width: present_width,
        height: codec_height
      }
    }
  }

  static _skipScalingList (gb, count) {
    let last_scale = 8, next_scale = 8
    let delta_scale = 0
    for (let i = 0; i < count; i++) {
      if (next_scale !== 0) {
        delta_scale = gb.readSEG()
        next_scale = (last_scale + delta_scale + 256) % 256
      }
      last_scale = (next_scale === 0) ? last_scale : next_scale
    }
  }

  static getProfileString (profileIdc) {
    switch (profileIdc) {
      case 66:
        return 'Baseline'
      case 77:
        return 'Main'
      case 88:
        return 'Extended'
      case 100:
        return 'High'
      case 110:
        return 'High10'
      case 122:
        return 'High422'
      case 244:
        return 'High444'
      default:
        return 'Unknown'
    }
  }

  static getLevelString (levelIdc) {
    return (levelIdc / 10).toFixed(1)
  }

  static getChromaFormatString (chroma) {
    switch (chroma) {
      case 420:
        return '4:2:0'
      case 422:
        return '4:2:2'
      case 444:
        return '4:4:4'
      default:
        return 'Unknown'
    }
  }

  static toVideoMeta (spsConfig) {
    let meta = {}
    if (spsConfig && spsConfig.codec_size) {
      meta.codecWidth = spsConfig.codec_size.width
      meta.codecHeight = spsConfig.codec_size.height
      meta.presentWidth = spsConfig.present_size.width
      meta.presentHeight = spsConfig.present_size.height
    }

    meta.profile = spsConfig.profile_string
    meta.level = spsConfig.level_string
    meta.bitDepth = spsConfig.bit_depth
    meta.chromaFormat = spsConfig.chroma_format

    meta.parRatio = {
      width: spsConfig.par_ratio.width,
      height: spsConfig.par_ratio.height
    }

    meta.frameRate = spsConfig.frame_rate

    let fpsDen = meta.frameRate.fps_den
    let fpsNum = meta.frameRate.fps_num
    meta.refSampleDuration = Math.floor(meta.timescale * (fpsDen / fpsNum))
  }
}

/* harmony default export */ __webpack_exports__["default"] = (SPSParser);


/***/ }),

/***/ "../xgplayer-demux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-demux/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  // HLS
  M3U8Parser: __webpack_require__(/*! ./src/hls/demuxer/m3u8parser */ "../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,
  TsDemuxer: __webpack_require__(/*! ./src/hls/demuxer/ts */ "../xgplayer-demux/src/hls/demuxer/ts.js").default,
  Playlist: __webpack_require__(/*! ./src/hls/playlist */ "../xgplayer-demux/src/hls/playlist.js").default,
  FlvDemuxer: __webpack_require__(/*! ./src/flv/index */ "../xgplayer-demux/src/flv/index.js").default
};


/***/ }),

/***/ "../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AMFParser; });
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);


const DATA_TYPES = {
  NUMBER: 0,
  BOOLEAN: 1,
  STRING: 2,
  OBJECT: 3,
  MIX_ARRAY: 8,
  OBJECT_END: 9,
  STRICT_ARRAY: 10,
  DATE: 11,
  LONE_STRING: 12
}

/**
 * meta信息解析
 */
class AMFParser {
  constructor () {
    this.offset = 0
    this.readOffset = this.offset
  }

  resolve (meta, size) {
    if (size < 3) {
      throw new Error('not enough data for metainfo')
    }
    const metaData = {}
    const name = this.parseValue(meta)
    const value = this.parseValue(meta, size - name.bodySize)
    metaData[name.data] = value.data

    this.resetStatus()
    return metaData
  }

  resetStatus () {
    this.offset = 0
    this.readOffset = this.offset
  }

  parseString (buffer) {
    const dv = new DataView(buffer, this.readOffset)
    const strLen = dv.getUint16(0, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    let str = ''
    if (strLen > 0) {
      str = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["UTF8"].decode(new Uint8Array(buffer, this.readOffset + 2, strLen))
    } else {
      str = ''
    }
    let size = strLen + 2
    this.readOffset += size
    return {
      data: str,
      bodySize: strLen + 2
    }
  }

  parseDate (buffer, size) {
    const dv = new DataView(buffer, this.readOffset, size)
    let ts = dv.getFloat64(0, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    const timeOffset = dv.getInt16(8, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    ts += timeOffset * 60 * 1000

    this.readOffset += 10
    return {
      data: new Date(ts),
      bodySize: 10
    }
  }

  parseObject (buffer, size) {
    const name = this.parseString(buffer, size)
    const value = this.parseValue(buffer, size - name.bodySize)
    return {
      data: {
        name: name.data,
        value: value.data
      },
      bodySize: name.bodySize + value.bodySize,
      isObjEnd: value.isObjEnd
    }
  }

  parseLongString (buffer) {
    const dv = new DataView(buffer, this.readOffset)
    const strLen = dv.getUint32(0, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    let str = ''
    if (strLen > 0) {
      str = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["UTF8"].decode(new Uint8Array(buffer, this.readOffset + 2, strLen))
    } else {
      str = ''
    }
    // const size = strLen + 4;
    this.readOffset += strLen + 4
    return {
      data: str,
      bodySize: strLen + 4
    }
  }

  /**
   * 解析meta中的变量
   */
  parseValue (data, size) {
    let buffer = new ArrayBuffer()
    if (data instanceof ArrayBuffer) {
      buffer = data
    } else {
      buffer = data.buffer
    }
    const {
      NUMBER,
      BOOLEAN,
      STRING,
      OBJECT,
      MIX_ARRAY,
      OBJECT_END,
      STRICT_ARRAY,
      DATE,
      LONE_STRING
    } = DATA_TYPES
    const dataView = new DataView(buffer, this.readOffset, size)
    let isObjEnd = false
    const type = dataView.getUint8(0)
    let offset = 1
    this.readOffset += 1
    let value = null

    switch (type) {
      case NUMBER: {
        value = dataView.getFloat64(1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
        this.readOffset += 8
        offset += 8
        break
      }
      case BOOLEAN: {
        const boolNum = dataView.getUint8(1)
        value = !!boolNum
        this.readOffset += 1
        offset += 1
        break
      }
      case STRING: {
        const str = this.parseString(buffer)
        value = str.data
        offset += str.bodySize
        break
      }
      case OBJECT: {
        value = {}
        let objEndSize = 0
        if (dataView.getUint32(size - 4, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF) {
          objEndSize = 3
        }
        // this.readOffset += offset - 1;
        while (offset < size - 4) {
          const amfObj = this.parseObject(buffer, size - offset - objEndSize)
          if (amfObj.isObjectEnd) { break }
          value[amfObj.data.name] = amfObj.data.value
          offset += amfObj.bodySize
        }
        if (offset <= size - 3) {
          const mark = dataView.getUint32(offset - 1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF
          if (mark === 9) {
            this.readOffset += 3
            offset += 3
          }
        }
        break
      }
      case MIX_ARRAY: {
        value = {}
        offset += 4
        this.readOffset += 4
        let objEndSize = 0
        if ((dataView.getUint32(size - 4, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF) === 9) {
          objEndSize = 3
        }

        while (offset < size - 8) {
          const amfVar = this.parseObject(buffer, size - offset - objEndSize)
          if (amfVar.isObjectEnd) { break }
          value[amfVar.data.name] = amfVar.data.value
          offset += amfVar.bodySize
        }
        if (offset <= size - 3) {
          const marker = dataView.getUint32(offset - 1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF
          if (marker === 9) {
            offset += 3
            this.readOffset += 3
          }
        }
        break
      }

      case OBJECT_END: {
        value = null
        isObjEnd = true
        break
      }

      case STRICT_ARRAY: {
        value = []
        const arrLength = dataView.getUint32(1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
        offset += 4
        this.readOffset += 4
        for (let i = 0; i < arrLength; i++) {
          const script = this.parseValue(buffer, size - offset)
          value.push(script.data)
          offset += script.bodySize
        }
        break
      }

      case DATE: {
        const date = this.parseDate(buffer, size - 1)
        value = date.data
        offset += date.bodySize
        break
      }

      case LONE_STRING: {
        const longStr = this.parseLongString(buffer, size - 1)
        value = longStr.data
        offset += longStr.bodySize
        break
      }

      default: {
        offset = size
      }
    }

    return {
      data: value,
      bodySize: offset,
      isObjEnd: isObjEnd
    }
  }
}


/***/ }),

/***/ "../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
  !*** ../xgplayer-demux/src/flv/index.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-codec */ "../xgplayer-codec/index.js");
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xgplayer-buffer */ "../xgplayer-buffer/index.js");
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _amf_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./amf-parser */ "../xgplayer-demux/src/flv/amf-parser.js");






const DEMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"].DEMUX_EVENTS;

class FlvDemuxer {
  constructor () {
    this._firstFragmentLoaded = false
    this._trackNum = 0
    this._hasScript = false
  }

  init () {
    this.on(DEMUX_EVENTS.DEMUX_START, this.doParseFlv.bind(this))
  }

  /**
   * if the flv head is valid
   * @param data
   * @returns {boolean}
   */
  static isFlvFile (data) {
    return !(data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01)
  }

  /**
   * If the stream has audio or video.
   * @param {number} streamFlag - Data from the stream which is define whether the audio / video track is exist.
   */
  static getPlayType (streamFlag) {
    const result = {
      hasVideo: false,
      hasAudio: false
    }

    if (streamFlag & 0x01 > 0) {
      result.hasVideo = true
    }

    if (streamFlag & 0x04 > 0) {
      result.hasAudio = true
    }

    return result
  }

  doParseFlv () {
    if (!this._firstFragmentLoaded) {
      if (this.loaderBuffer.length < 13) {
        return
      }
      const header = this.loaderBuffer.shift(13)
      this.parseFlvHeader(header)
      this.doParseFlv() // 递归调用，继续解析flv流
    } else {
      if (this.loaderBuffer.length < 11) {
        return
      }
      let chunk;
      do {
        chunk = this._parseFlvTag()
      } while (chunk)

      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE)
    }
  }

  parseFlvHeader (header) {
    if (!FlvDemuxer.isFlvFile(header)) {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error('invalid flv file'))
      this.doParseFlv()
    } else {
      this._firstFragmentLoaded = true
      const playType = FlvDemuxer.getPlayType(header[4])

      if (playType.hasVideo) {
        this.initVideoTrack()
      }

      if (playType.hasAudio) {
        this.initAudioTrack()
      }
    }
    this.doParseFlv()
  }

  /**
   * init default video track configs
   */
  initVideoTrack () {
    this._trackNum++
    let videoTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__["VideoTrack"]()
    videoTrack.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["VideoTrackMeta"]()
    videoTrack.id = videoTrack.meta.id = this._trackNum

    this.tracks.videoTrack = videoTrack
  }

  /**
   * init default audio track configs
   */
  initAudioTrack () {
    this._trackNum++
    let audioTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__["AudioTrack"]()
    audioTrack.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["AudioTrackMeta"]()
    audioTrack.id = audioTrack.meta.id = this._trackNum

    this.tracks.audioTrack = audioTrack
  }

  /**
   * Package the data as the following data structure
   * {
   *    data: Uint8Array. the Stream data.
   *    info: The first byte info of the Tag.
   *    tagType: 8、9、18
   *    timeStamp: the timestemp
   * }
   */
  _parseFlvTag () {
    if (this.loaderBuffer.length < 11) {
      return null
    }
    let chunk = this._parseFlvTagHeader()
    if (chunk) {
      this._processChunk(chunk)
    }
    return chunk
  }

  /**
   * Parse the 11 byte tag Header
   */
  _parseFlvTagHeader () {
    let offset = 0
    let chunk = {}

    let tagType = this.loaderBuffer.toInt(offset, 1)
    offset += 1

    // 2 bit FMS reserved, 1 bit filtered, 5 bit tag type
    chunk.filtered = (tagType & 32) >>> 5
    chunk.tagType = tagType & 31

    // 3 Byte datasize
    chunk.datasize = this.loaderBuffer.toInt(offset, 3)
    offset += 3

    if ((chunk.tagType !== 8 && chunk.tagType !== 9 && chunk.tagType !== 11 && chunk.tagType !== 18) ||
      this.loaderBuffer.toInt(8, 3) !== 0) {
      if (this.loaderBuffer && this.loaderBuffer.length > 0) {
        this.loaderBuffer.shift(1)
      }
      this.logger.warn(this.TAG, 'tagType ' + chunk.tagType)
      return null
    }

    if (this.loaderBuffer.length < chunk.datasize + 15) {
      return null
    }

    // read the data.
    this.loaderBuffer.shift(4)

    // 3 Byte timestamp
    let timestamp = this.loaderBuffer.toInt(0, 3)
    this.loaderBuffer.shift(3)

    // 1 Byte timestampExt
    let timestampExt = this.loaderBuffer.shift(1)[0]
    if (timestampExt > 0) {
      timestamp += timestampExt * 0x1000000
    }

    chunk.dts = timestamp

    // streamId
    this.loaderBuffer.shift(3)
    return chunk
  }

  _processChunk (chunk) {
    switch (chunk.tagType) {
      case 18:
        this._parseScriptData(chunk)
        break
      case 8:
        this._parseAACData(chunk)
        break
      case 9:
        this._parseHevcData(chunk)
        break
      case 11:
        // for some CDN that did not process the currect RTMP messages
        this.loaderBuffer.shift(3)
        break
      default:
        this.loaderBuffer.shift(1)
    }
  }

  /**
   * parse flv script data
   * @param chunk
   * @private
   */
  _parseScriptData (chunk) {
    let audioTrack = this.tracks.audioTrack
    let videoTrack = this.tracks.videoTrack

    let data = this.loaderBuffer.shift(chunk.datasize)

    const info = new _amf_parser__WEBPACK_IMPORTED_MODULE_3__["default"]().resolve(data, data.length)

    const onMetaData = this._context.onMetaData = info ? info.onMetaData : undefined

    // fill mediaInfo
    this._context.mediaInfo.duration = onMetaData.duration
    this._context.mediaInfo.hasVideo = onMetaData.hasVideo
    this._context.mediaInfo.hsaAudio = onMetaData.hasAudio

    let validate = this._datasizeValidator(chunk.datasize)
    if (validate) {
      this.emit(DEMUX_EVENTS.MEDIA_INFO)
      this._hasScript = true
    }

    // Edit default meta.
    if (audioTrack && !audioTrack.hasSpecificConfig) {
      let meta = audioTrack.meta
      if (onMetaData.audiosamplerate) {
        meta.sampleRate = onMetaData.audiosamplerate
      }

      if (onMetaData.audiochannels) {
        meta.channelCount = onMetaData.audiochannels
      }

      switch (onMetaData.audiosamplerate) {
        case 44100:
          meta.sampleRateIndex = 4
          break
        case 22050:
          meta.sampleRateIndex = 7
          break
        case 11025:
          meta.sampleRateIndex = 10
          break
      }
    }
    if (videoTrack && !videoTrack.hasSpecificConfig) {
      let meta = videoTrack.meta
      if (typeof onMetaData.framerate === 'number') {
        let fpsNum = Math.floor(onMetaData.framerate * 1000)
        if (fpsNum > 0) {
          let fps = fpsNum / 1000
          if (!meta.frameRate) {
            meta.frameRate = {}
          }
          meta.frameRate.fixed = true
          meta.frameRate.fps = fps
          meta.frameRate.fps_num = fpsNum
          meta.frameRate.fps_den = 1000
        }
      }
    }
  }

  _aacSequenceHeaderParser (data) {
    let ret = {}
    ret.hasSpecificConfig = true
    ret.objectType = data[1] >>> 3
    ret.sampleRateIndex = ((data[1] & 7) << 1) | (data[2] >>> 7)
    ret.audiosamplerate = this._switchAudioSampleRate(ret.sampleRateIndex)
    ret.channelCount = (data[2] & 120) >>> 3
    ret.frameLength = (data[2] & 4) >>> 2
    ret.dependsOnCoreCoder = (data[2] & 2) >>> 1
    ret.extensionFlagIndex = data[2] & 1

    ret.codec = `mp4a.40.${ret.objectType}`
    let userAgent = window.navigator.userAgent.toLowerCase();
    let extensionSamplingIndex;

    let config;
    let samplingIndex = ret.sampleRateIndex;

    if (userAgent.indexOf('firefox') !== -1) {
      // firefox: use SBR (HE-AAC) if freq less than 24kHz
      if (ret.sampleRateIndex >= 6) {
        ret.objectType = 5;
        config = new Array(4);
        extensionSamplingIndex = samplingIndex - 3;
      } else { // use LC-AAC
        ret.objectType = 2;
        config = new Array(2);
        extensionSamplingIndex = samplingIndex;
      }
    } else if (userAgent.indexOf('android') !== -1) {
      // android: always use LC-AAC
      ret.objectType = 2;
      config = new Array(2);
      extensionSamplingIndex = samplingIndex;
    } else {
      // for other browsers, e.g. chrome...
      // Always use HE-AAC to make it easier to switch aac codec profile
      ret.objectType = 5;
      extensionSamplingIndex = ret.sampleRateIndex;
      config = new Array(4);

      if (ret.sampleRateIndex >= 6) {
        extensionSamplingIndex = ret.sampleRateIndex - 3;
      } else if (ret.channelCount === 1) { // Mono channel
        ret.objectType = 2;
        config = new Array(2);
        extensionSamplingIndex = ret.sampleRateIndex;
      }
    }

    config[0] = ret.objectType << 3;
    config[0] |= (ret.sampleRateIndex & 0x0F) >>> 1;
    config[1] = (ret.sampleRateIndex & 0x0F) << 7;
    config[1] |= (ret.channelCount & 0x0F) << 3;
    if (ret.objectType === 5) {
      config[1] |= ((extensionSamplingIndex & 0x0F) >>> 1);
      config[2] = (extensionSamplingIndex & 0x01) << 7;
      // extended audio object type: force to 2 (LC-AAC)
      config[2] |= (2 << 2);
      config[3] = 0;
    }
    ret.config = config
    return ret
  }

  _parseAACData (chunk) {
    let track = this.tracks.audioTrack
    if (!track) {
      return
    }

    let meta = track.meta

    if (!meta) {
      meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["AudioTrackMeta"]()
    }

    let info = this.loaderBuffer.shift(1)[0]

    chunk.data = this.loaderBuffer.shift(chunk.datasize - 1)

    let format = (info & 240) >>> 4

    track.format = format

    if (format !== 10) {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error(`invalid audio format: ${format}`))
    }

    if (format === 10 && !this._hasAudioSequence) {
      meta.sampleRate = this._switchAudioSamplingFrequency(info)
      meta.sampleRateIndex = (info & 12) >>> 2
      meta.frameLenth = (info & 2) >>> 1
      meta.channelCount = info & 1
      meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale)
    }

    let audioSampleRate = meta.audioSampleRate
    let audioSampleRateIndex = meta.sampleRateIndex
    let refSampleDuration = meta.refSampleDuration

    delete chunk.tagType
    let validate = this._datasizeValidator(chunk.datasize)

    if (chunk.data[0] === 0) { // AAC Sequence Header
      let aacHeader = this._aacSequenceHeaderParser(chunk.data)
      audioSampleRate = aacHeader.audiosamplerate || meta.audioSampleRate
      audioSampleRateIndex = aacHeader.sampleRateIndex || meta.sampleRateIndex
      refSampleDuration = Math.floor(1024 / audioSampleRate * meta.timescale)

      meta.channelCount = aacHeader.channelCount
      meta.sampleRate = audioSampleRate
      meta.sampleRateIndex = audioSampleRateIndex
      meta.refSampleDuration = refSampleDuration
      meta.duration = this._context.mediaInfo.duration * meta.timescale
      meta.config = aacHeader.config
      meta.objectType = aacHeader.objectType;

      const audioMedia = this._context.mediaInfo.audio

      // fill audio media info
      audioMedia.codec = aacHeader.codec
      audioMedia.channelCount = aacHeader.channelCount
      audioMedia.sampleRate = audioSampleRate
      audioMedia.sampleRateIndex = aacHeader.audioSampleRateIndex

      if (this._hasScript && !this._hasAudioSequence) {
        this.emit(DEMUX_EVENTS.METADATA_PARSED, 'audio')
      } else if (this._hasScript && this._hasAudioSequence) {
        this.emit(DEMUX_EVENTS.AUDIO_METADATA_CHANGE)
      }
      ;
      this._hasAudioSequence = true
    } else {
      chunk.data = chunk.data.slice(1, chunk.data.length)
      track.samples.push(chunk)
    }
    if (!validate) {
      const error = new Error('TAG length error at ' + chunk.datasize)
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, error.message)
      this.logger.warn(this.TAG, error.message)
    }
  }

  /**
   * parse hevc/avc video data
   * @param chunk
   * @private
   */
  _parseHevcData (chunk) {
    // header
    let info = this.loaderBuffer.shift(1)[0]
    chunk.frameType = (info & 0xf0) >>> 4
    chunk.isKeyframe = chunk.frameType === 1
    // let tempCodecID = this.tracks.videoTrack.codecID
    let codecID = info & 0x0f
    this.tracks.videoTrack.codecID = codecID

    // hevc和avc的header解析方式一样
    chunk.avcPacketType = this.loaderBuffer.shift(1)[0]
    chunk.cts = this.loaderBuffer.toInt(0, 3)
    this.loaderBuffer.shift(3)

    // 12 for hevc, 7 for avc
    if (codecID === 12) {
      const data = this.loaderBuffer.shift(chunk.datasize - 5)
      chunk.data = data

      if (Number.parseInt(chunk.avcPacketType) !== 0) {
        if (!this._datasizeValidator(chunk.datasize)) {
          this.logger.warn(this.TAG, `invalid video tag datasize: ${chunk.datasize}`)
        }
        let nalu = {}
        let r = 0
        nalu.cts = chunk.cts
        nalu.dts = chunk.dts
        while (chunk.data.length > r) {
          let sizes = chunk.data.slice(Number.parseInt(r), 4 + r)
          nalu.size = sizes[3]
          nalu.size += sizes[2] * 256
          nalu.size += sizes[1] * 256 * 256
          nalu.size += sizes[0] * 256 * 256 * 256
          r += 4
          nalu.data = chunk.data.slice(Number.parseInt(r), nalu.size + r)
          r += nalu.size
          this.tracks.videoTrack.samples.push(nalu)
          this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video')
        }
      } else if (Number.parseInt(chunk.avcPacketType) === 0) {
        if (!this._datasizeValidator(chunk.datasize)) {
          this.logger.warn(this.TAG, `invalid video tag datasize: ${chunk.datasize}`)
        } else {
          this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video')
        }
      }
    } else if (codecID === 7) {
      let data = this.loaderBuffer.shift(chunk.datasize - 5)
      if (data[4] === 0 && data[5] === 0 && data[6] === 0 && data[7] === 1) {
        let avcclength = 0
        for (let i = 0; i < 4; i++) {
          avcclength = avcclength * 256 + data[i]
        }
        avcclength -= 4
        data = data.slice(4, data.length)
        data[3] = avcclength % 256
        avcclength = (avcclength - data[3]) / 256
        data[2] = avcclength % 256
        avcclength = (avcclength - data[2]) / 256
        data[1] = avcclength % 256
        data[0] = (avcclength - data[1]) / 256
      }

      chunk.data = data
      // If it is AVC sequece Header.
      if (chunk.avcPacketType === 0) {
        this._avcSequenceHeaderParser(chunk.data)
        let validate = this._datasizeValidator(chunk.datasize)
        if (validate) {
          if (this._hasScript && !this._hasVideoSequence) {
            this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video')
          } else if (this._hasScript && this._hasVideoSequence) {
            this.emit(DEMUX_EVENTS.VIDEO_METADATA_CHANGE)
          }
          this._hasVideoSequence = true
        }
      } else {
        if (!this._datasizeValidator(chunk.datasize)) {
          this.logger.warn(this.TAG, `invalid video tag datasize: ${chunk.datasize}`)
          return;
        }
        this.tracks.videoTrack.samples.push(chunk)
        // this.emit(DEMUX_EVENTS.DEMUX_COMPLETE)
      }
    } else {
      this.logger.warn(this.TAG, `video codeid is ${codecID}`)
      chunk.data = this.loaderBuffer.shift(chunk.datasize - 1)
      if (!this._datasizeValidator(chunk.datasize)) {
        this.logger.warn(this.TAG, `invalid video tag datasize: ${chunk.datasize}`)
      }
      this.tracks.videoTrack.samples.push(chunk)
      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE)
    }
    delete chunk.tagType
  }

  /**
   * parse avc metadata
   * @param data
   * @private
   */
  _avcSequenceHeaderParser (data) {
    let track = this.tracks.videoTrack

    if (!track) {
      return
    }

    let offset = 0

    if (!track.meta) {
      track.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["VideoTrackMeta"]()
    }
    let meta = track.meta

    meta.configurationVersion = data[0]
    meta.avcProfileIndication = data[1]
    meta.profileCompatibility = data[2]
    meta.avcLevelIndication = data[3] / 10
    meta.nalUnitLength = (data[4] & 0x03) + 1

    let numOfSps = data[5] & 0x1f
    offset = 6
    let config = {}

    // parse SPS
    for (let i = 0; i < numOfSps; i++) {
      let size = data[offset] * 255 + data[offset + 1]
      offset += 2

      let sps = new Uint8Array(size)
      for (let j = 0; j < size; j++) {
        sps[j] = data[offset + j]
      }

      // codec string
      let codecString = 'avc1.'
      for (let j = 1; j < 4; j++) {
        let h = sps[j].toString(16)
        if (h.length < 2) {
          h = '0' + h
        }
        codecString += h
      }

      meta.codec = codecString

      offset += size
      this.tracks.videoTrack.meta.sps = sps
      config = xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__["SpsParser"].parseSPS(sps)
    }

    let numOfPps = data[offset]

    offset++

    for (let i = 0; i < numOfPps; i++) {
      let size = data[offset] * 255 + data[offset + 1]
      offset += 2
      let pps = new Uint8Array(size)
      for (let j = 0; j < size; j++) {
        pps[j] = data[offset + j]
      }
      offset += size
      this.tracks.videoTrack.meta.pps = pps
    }

    Object.assign(meta, xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__["SpsParser"].toVideoMeta(config))

    // fill video media info
    const videoMedia = this._context.mediaInfo.video

    videoMedia.codec = meta.codec
    videoMedia.profile = meta.profile
    videoMedia.level = meta.level
    videoMedia.chromaFormat = meta.chromaFormat
    videoMedia.frameRate = meta.frameRate
    videoMedia.parRatio = meta.parRatio
    videoMedia.width = videoMedia.width === meta.presentWidth ? videoMedia.width : meta.presentWidth
    videoMedia.height = videoMedia.height === meta.presentHeight ? videoMedia.width : meta.presentHeight

    meta.duration = this._context.mediaInfo.duration * meta.timescale
    meta.avcc = new Uint8Array(data.length)
    meta.avcc.set(data)
    track.meta = meta
  }

  /**
   * choose audio sample rate
   * @param samplingFrequencyIndex
   * @returns {number}
   * @private
   */
  _switchAudioSampleRate (samplingFrequencyIndex) {
    let samplingFrequencyList = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350]
    return samplingFrequencyList[samplingFrequencyIndex]
  }

  /**
   * choose audio sampling frequence
   * @param info
   * @returns {number}
   * @private
   */
  _switchAudioSamplingFrequency (info) {
    let samplingFrequencyIndex = (info & 12) >>> 2
    let samplingFrequencyList = [5500, 11025, 22050, 44100, 48000]
    return samplingFrequencyList[samplingFrequencyIndex]
  }

  /**
   * choose audio channel count
   * @param info
   * @returns {number}
   * @private
   */
  _switchAudioChannel (info) {
    let sampleTrackNumIndex = info & 1
    let sampleTrackNumList = [1, 2]
    return sampleTrackNumList[sampleTrackNumIndex]
  }

  /**
   * check datasize is valid use 4 Byte after current tag
   * @param datasize
   * @returns {boolean}
   * @private
   */
  _datasizeValidator (datasize) {
    let datasizeConfirm = this.loaderBuffer.toInt(0, 4)
    this.loaderBuffer.shift(4)
    return datasizeConfirm === datasize + 11
  }

  get loaderBuffer () {
    if (this._context.getInstance('LOADER_BUFFER')) {
      return this._context.getInstance('LOADER_BUFFER')
    } else {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error('找不到 loaderBuffer 实例'))
    }
  }

  get tracks () {
    return this._context.getInstance('TRACKS')
  }

  get logger () {
    return this._context.getInstance('LOGGER')
  }
}

/* harmony default export */ __webpack_exports__["default"] = (FlvDemuxer);


/***/ }),

/***/ "../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Reference: https://tools.ietf.org/html/rfc8216#section-4.3
 */
class M3U8Parser {
  static parse (text, baseurl = '') {
    let ret = {
      duration: 0
    };
    if (!text || !text.split) {
      return;
    }
    let refs = text.split(/\r|\n/);
    refs = refs.filter((ref) => {
      return ref;
    })
    let ref = refs.shift()
    if (!ref.match('#EXTM3U')) {
      // TODO:M3U格式错误。
      return null;
    }
    ref = refs.shift()
    while (ref) {
      let refm = ref.match(/#(.*):(.*)/);
      if (refm && refm.length > 2) {
        switch (refm[1]) {
          case 'EXT-X-VERSION':
            ret.version = parseInt(refm[2]);
            break;
          case 'EXT-X-MEDIA-SEQUENCE':
            ret.sequence = parseInt(refm[2]);
            break;
          case 'EXT-X-TARGETDURATION':
            ret.targetduration = parseFloat(refm[2]);
            break;
          case 'EXTINF':
            M3U8Parser.parseFrag(refm, refs, ret, baseurl);
            break;
          default:
            break;
        }
      }
      ref = refs.shift()
    }
    return ret;
  }

  static parseFrag (refm, refs, ret, baseurl) {
    if (!ret.frags) {
      ret.frags = []
    }

    let freg = {
      start: ret.duration,
      duration: parseFloat(refm[2]) * 1000
    }

    ret.duration += freg.duration;
    let nextline = refs.shift();
    if (nextline.match(/#(.*):(.*)/)) {
      nextline = refs.shift();
    }
    if (nextline.length > 0 && nextline.charAt(0) === '/' && baseurl.match(/.*\/\/.*\.\w+/g)) {
      baseurl = baseurl.match(/.*\/\/.*\.\w+/g)[0];
    }
    if (nextline.match(/.*:\/\/.*/)) {
      freg.url = nextline;
    } else {
      freg.url = baseurl + nextline;
    }
    
    ret.frags.push(freg);
  }

  static parseURL (url) {
    let baseurl = '';
    let urls = url.match(/(.*\/).*\.m3u8/);
    if (urls && urls.length > 0) {
      for (let i = 0; i < urls.length; i++) {
        if (urls[i].match(/.*\/$/g) && urls[i].length > baseurl.length) {
          baseurl = urls[i];
        }
      }
    }
    return baseurl;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (M3U8Parser);


/***/ }),

/***/ "../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-codec */ "../xgplayer-codec/index.js");
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-buffer */ "../xgplayer-buffer/index.js");
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__);




const DEMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["EVENTS"].DEMUX_EVENTS;
const StreamType = {
  0x01: ['video', 'MPEG-1'],
  0x02: ['video', 'MPEG-2'],
  0x1b: ['video', 'AVC.H264'],
  0xea: ['video', 'VC-1'],
  0x03: ['audio', 'MPEG-1'],
  0x04: ['audio', 'MPEG-2'],
  0x0f: ['audio', 'MPEG-2.AAC'],
  0x11: ['audio', 'MPEG-4.AAC'],
  0x80: ['audio', 'LPCM'],
  0x81: ['audio', 'AC3'],
  0x06: ['audio', 'AC3'],
  0x82: ['audio', 'DTS'],
  0x83: ['audio', 'Dolby TrueHD'],
  0x84: ['audio', 'AC3-Plus'],
  0x85: ['audio', 'DTS-HD'],
  0x86: ['audio', 'DTS-MA'],
  0xa1: ['audio', 'AC3-Plus-SEC'],
  0xa2: ['audio', 'DTS-HD-SEC']
};

class TsDemuxer {
  constructor (configs) {
    this.configs = Object.assign({}, configs);
    this.demuxing = false;
    this.pat = [];
    this.pmt = [];
    this._hasVideoMeta = false;
    this._hasAudioMeta = false;
  }

  init () {
    this.on(DEMUX_EVENTS.DEMUX_START, this.demux.bind(this))
  }

  demux () {
    if (this.demuxing) {
      return
    }

    let buffer = this.inputBuffer;
    let frags = { pat: [], pmt: [] };
    let peses = {};

    // Read TS segment
    while (buffer.length >= 188) {
      while (buffer.length >= 1 && buffer.array[0][buffer.offset] !== 71) {
        buffer.shift(1);
      }
      let buf = buffer.shift(188);
      // console.log(buf);
      let tsStream = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["Stream"](buf.buffer);
      let ts = {};
      TsDemuxer.read(tsStream, ts, frags);
      if (ts.pes) {
        if (!peses[ts.header.pid]) {
          peses[ts.header.pid] = [];
        }
        peses[ts.header.pid].push(ts.pes);
        ts.pes.ES.buffer = [ts.pes.ES.buffer];
      } else if (peses[ts.header.pid]) {
        peses[ts.header.pid][peses[ts.header.pid].length - 1].ES.buffer.push(ts.payload.stream);
      }
    }

    // Get Frames data
    for (let i = 0; i < Object.keys(peses).length; i++) {
      let epeses = peses[Object.keys(peses)[i]];
      for (let j = 0; j < epeses.length; j++) {
        epeses[j].id = Object.keys(peses)[i];
        epeses[j].ES.buffer = TsDemuxer.Merge(epeses[j].ES.buffer);
        if (epeses[j].type === 'audio') {
          this.pushAudioSample(epeses[j]);
        } else if (epeses[j].type === 'video') {
          this.pushVideoSample(epeses[j]);
        }
      }
    }

    if (this._hasAudioMeta) {
      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE, 'audio');
    }
    if (this._hasVideoMeta) {
      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE, 'video');
    }
  }

  pushAudioSample (pes) {
    let track;
    if (!this._tracks.audioTrack) {
      this._tracks.audioTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__["AudioTrack"]();
      track = this._tracks.audioTrack;
      track.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["AudioTrackMeta"]({
        audioSampleRate: pes.ES.frequence,
        sampleRate: pes.ES.frequence,
        channelCount: pes.ES.channel,
        codec: 'mp4a.40.' + pes.ES.audioObjectType,
        config: pes.ES.audioConfig,
        id: 2,
        sampleRateIndex: pes.ES.frequencyIndex
      });
      track.meta.refSampleDuration = Math.floor(1024 / track.meta.audioSampleRate * track.meta.timescale);
      if (!this._hasAudioMeta) {
        this._hasAudioMeta = true
        this.emit(DEMUX_EVENTS.METADATA_PARSED, 'audio');
      }
    } else {
      track = this._tracks.audioTrack;
    }
    let data = new Uint8Array(pes.ES.buffer.buffer.slice(pes.ES.buffer.position, pes.ES.buffer.length));
    let dts = parseInt(pes.pts / 90);
    let pts = parseInt(pes.pts / 90);
    let sample = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["AudioTrackSample"]({dts, pts, data});
    track.samples.push(sample);
  }

  pushVideoSample (pes) {
    let nals = xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__["Nalunit"].getNalunits(pes.ES.buffer);
    let track;
    if (!this._tracks.videoTrack) {
      this._tracks.videoTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__["VideoTrack"]();
      track = this._tracks.videoTrack;
      track.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["VideoTrackMeta"]();
    } else {
      track = this._tracks.videoTrack;
    }
    let sampleLength = 0;
    let sps = false;
    let pps = false;
    for (let i = 0; i < nals.length; i++) {
      let nal = nals[i];
      if (nal.sps) {
        // TODO：VideoTrack信息 和 Meta 信息
        if (track.sps && TsDemuxer.compaireUint8(nal.body, track.sps)) {
          continue;
        }

        sps = nal;
        track.sps = nal.body;
        track.meta.chromaFormat = sps.sps.chroma_format
        track.meta.codec = 'avc1.';
        for (var j = 1; j < 4; j++) {
          var h = sps.body[j].toString(16);
          if (h.length < 2) {
            h = '0' + h;
          }
          track.meta.codec += h;
        }
        track.meta.codecHeight = sps.sps.codec_size.height;
        track.meta.codecWidth = sps.sps.codec_size.width;
        track.meta.frameRate = sps.sps.frame_rate;
        track.meta.id = 1;
        track.meta.level = sps.sps.level_string;
        track.meta.presentHeight = sps.sps.present_size.height;
        track.meta.presentWidth = sps.sps.present_size.width;
        track.meta.profile = sps.sps.profile_string;
        track.meta.refSampleDuration = Math.floor(track.meta.timescale * (sps.sps.frame_rate.fps_den / sps.sps.frame_rate.fps_num));
        track.meta.sarRatio = sps.sps.sar_ratio ? sps.sps.sar_ratio : sps.sps.par_ratio;
      } else if (nal.pps) {
        track.pps = nal.body;
        pps = nal;
      } else {
        sampleLength += (4 + nal.body.byteLength);
      }
    }

    if (sps && pps) {
      track.meta.avcc = xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__["Nalunit"].getAvcc(sps.body, pps.body);
      if (!this._hasVideoMeta) {
        this._hasVideoMeta = true
        this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video');
      }
    }

    let data = new Uint8Array(sampleLength);
    let offset = 0;
    let isKeyframe = false;
    for (let i = 0; i < nals.length; i++) {
      let nal = nals[i];
      let length = nal.body.byteLength;
      if (nal.idr) {
        isKeyframe = true;
      }
      if (!nal.pps && !nal.sps) {
        data.set(new Uint8Array([length >>> 24 & 0xff,
          length >>> 16 & 0xff,
          length >>> 8 & 0xff,
          length & 0xff
        ]), offset);
        offset += 4;
        data.set(nal.body, offset);
        offset += length;
      }
    }
    let sample = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["VideoTrackSample"]({
      dts: parseInt(pes.dts / 90),
      pts: parseInt(pes.pts / 90),
      cts: (pes.pts - pes.dts) / 90,
      originDts: pes.dts,
      isKeyframe,
      data
    })
    track.samples.push(sample);
  }

  destory () {
    this.off(DEMUX_EVENTS.DEMUX_START, this.demux);
    this.configs = {};
    this.demuxing = false;
    this.pat = [];
    this.pmt = [];
    this._hasVideoMeta = false;
    this._hasAudioMeta = false;
  }

  static compaireUint8 (a, b) {
    if (a.byteLength !== b.byteLength) {
      return false;
    }
    let ret = true;
    for (let i = 0; i < a.byteLength; i++) {
      if (a[i] !== b[i]) {
        ret = false;
      }
    }
    return ret;
  }
  static Merge (buffers) {
    let data;
    let length = 0;
    let offset = 0;
    for (let i = 0; i < buffers.length; i++) {
      length += (buffers[i].length - buffers[i].position);
    }

    data = new Uint8Array(length);
    for (let i = 0; i < buffers.length; i++) {
      let buffer = buffers[i];
      data.set(new Uint8Array(buffer.buffer, buffer.position), offset);
      offset += buffer.length - buffer.position;
    }
    return new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["Stream"](data.buffer);
  }

  static read (stream, ts, frags) {
    TsDemuxer.readHeader(stream, ts);
    TsDemuxer.readPayload(stream, ts, frags);
    if (ts.header.packet === 'MEDIA' && ts.header.payload === 1 && !ts.unknownPIDs) {
      ts.pes = TsDemuxer.PES(ts);
    }
  }

  static readPayload (stream, ts, frags) {
    let header = ts.header
    let pid = header.pid;
    switch (pid) {
      case 0:
        TsDemuxer.PAT(stream, ts, frags);
        break;
      case 1:
        TsDemuxer.CAT(stream, ts, frags);
        break;
      case 2:
        TsDemuxer.TSDT(stream, ts, frags);
        break;
      case 0x1fff:
        break;
      default:
        // TODO: some的写法不太好，得改
        if (frags.pat.some((item) => { return item.pid === pid; })) {
          TsDemuxer.PMT(stream, ts, frags);
        } else {
          let sts = frags.pmt ? frags.pmt.filter((item) => item.pid === pid) : [];
          if (sts.length > 0) {
            TsDemuxer.Media(stream, ts, StreamType[sts[0].streamType][0])
          } else {
            ts.unknownPIDs = true;
          };
        }
    }
  }

  static readHeader (stream, ts) {
    let header = {};
    header.sync = stream.readUint8();
    let next = stream.readUint16();
    header.error = next >>> 15;
    header.payload = next >>> 14 & 1;
    header.priority = next >>> 13 & 1;
    header.pid = next & 0x1fff;

    next = stream.readUint8();

    header.scrambling = next >> 6 & 0x3; // 是否加密，00表示不加密

    /**
     * 00 ISO/IEC未来使用保留
     * 01 没有调整字段，仅含有184B有效净荷
     * 02 没有有效净荷，仅含有183B调整字段
     * 03 0~182B调整字段后为有效净荷
     */
    header.adaptation = next >> 4 & 0x3;
    header.continuity = next & 15;
    header.packet = header.pid === 0 ? 'PAT' : 'MEDIA';
    ts.header = header;
  }

  static PAT (stream, ts, frags) {
    let ret = {};
    let next = stream.readUint8();
    stream.skip(next);
    next = stream.readUint8();
    ret.tabelID = next;
    next = stream.readUint16();
    ret.error = next >>> 7;
    ret.zero = next >>> 6 & 1;
    ret.sectionLength = next & 0xfff;
    ret.streamID = stream.readUint16();
    ret.current = stream.readUint8() & 1;
    ret.sectionNumber = stream.readUint8();
    ret.lastSectionNumber = stream.readUint8();
    let N = (ret.sectionLength - 9) / 4;
    let list = [];
    for (let i = 0; i < N; i++) {
      let programNumber = stream.readUint16();
      let pid = stream.readUint16() & 0x1fff;
      list.push({
        program: programNumber,
        pid,
        type: programNumber === 0 ? 'network' : 'mapPID'
      });
    }
    if (list.length > 0) {
      frags.pat = frags.pat.concat(list);
    }
    ret.list = list;
    ret.program = stream.readUint16();
    ret.pid = stream.readUint16() & 0x1fff;
    ts.payload = ret;
    // TODO CRC
  }

  static PMT (stream, ts, frags) {
    let ret = {};
    let header = ts.header;
    header.packet = 'PMT';
    let next = stream.readUint8();
    stream.skip(next);
    next = stream.readUint8();
    ret.tableID = next;
    next = stream.readUint16();
    ret.sectionLength = next & 0xfff;
    ret.program = stream.readUint16();
    ret.current = stream.readUint8() & 1;
    ret.order = stream.readUint8();
    ret.lastOrder = stream.readUint8();
    ret.PCR_PID = stream.readUint16() & 0x1fff;
    ret.programLength = stream.readUint16() & 0xfff;
    let N = (ret.sectionLength - 13) / 5;
    let list = [];
    for (let i = 0; i < N; i++) {
      list.push({
        streamType: stream.readUint8(),
        pid: stream.readUint16() & 0x1fff, // 0x07e5 视频，0x07e6
        es: stream.readUint16() & 0xfff
      });
    }
    ret.list = list;
    if (!this.pmt) {
      this.pmt = [];
    }
    frags.pmt = this.pmt.concat(list.map((item) => {
      return {
        pid: item.pid,
        es: item.es,
        streamType: item.streamType,
        program: ret.program
      };
    }));
    ts.payload = ret;
  }

  static Media (stream, ts, type) {
    let header = ts.header;
    let payload = {};
    header.type = type;
    if (header.adaptation === 0x03) {
      payload.adaptationLength = stream.readUint8();
      if (payload.adaptationLength > 0) {
        let next = stream.readUint8();
        payload.discontinue = next >>> 7;
        payload.access = next >>> 6 & 0x01;
        payload.priority = next >>> 5 & 0x01;
        payload.PCR = next >>> 4 & 0x01;
        payload.OPCR = next >>> 3 & 0x01;
        payload.splicePoint = next >>> 2 & 0x01;
        payload.transportPrivate = next >>> 1 & 0x01;
        payload.adaptationField = next & 0x01;
        let _start = stream.position;
        if (payload.PCR === 1) {
          payload.programClockBase = stream.readUint32() << 1;
          next = stream.readUint16();
          payload.programClockBase |= next >>> 15;
          payload.programClockExtension = next & 0x1ff;
        }
        if (payload.OPCR === 1) {
          payload.originProgramClockBase = stream.readUint32() << 1;
          next = stream.readUint16();
          payload.originProgramClockBase += next >>> 15;
          payload.originProgramClockExtension = next & 0x1ff;
        }
        if (payload.splicePoint === 1) {
          payload.spliceCountdown = stream.readUint8();
        }
        if (payload.transportPrivate === 1) {
          let length = stream.readUint8();
          let transportPrivateData = [];
          for (let i = 0; i < length; i++) {
            transportPrivateData.push(stream.readUint8());
          }
        }
        if (payload.adaptationField === 1) {
          let length = stream.readUint8()
          let next = stream.readUint8()
          let start = stream.position;
          let ltw = next >>> 7;
          let piecewise = next >>> 6 & 0x1;
          let seamless = next >>> 5 & 0x1;
          if (ltw === 1) {
            next = stream.readUint16();
            payload.ltwValid = next >>> 15;
            payload.ltwOffset = next & 0xefff;
          }
          if (piecewise === 1) {
            next = stream.readUint24();
            payload.piecewiseRate = next & 0x3fffff;
          }
          if (seamless === 1) {
            next = stream.readInt8();
            payload.spliceType = next >>> 4;
            payload.dtsNextAU1 = next >>> 1 & 0x7;
            payload.marker1 = next & 0x1;
            next = stream.readUint16();
            payload.dtsNextAU2 = next >>> 1;
            payload.marker2 = next & 0x1;
            next = stream.readUint16();
            payload.dtsNextAU3 = next;
          }
          stream.skip(length - 1 - (stream.position - start));
        }
        let lastStuffing = payload.adaptationLength - 1 - (stream.position - _start);
        stream.skip(lastStuffing);
      }
    }
    payload.stream = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["Stream"](stream.buffer.slice(stream.position));
    ts.payload = payload;
  }

  static PES (ts) {
    let ret = {};
    let buffer = ts.payload.stream;
    
    let next = buffer.readUint24();
    if (next !== 1) {
      ret.ES = {};
      ret.ES.buffer = buffer;
    } else {
      let streamID = buffer.readUint8();
      if (streamID >= 0xe0 && streamID <= 0xef) {
        ret.type = 'video';
      }
      if (streamID >= 0xc0 && streamID <= 0xdf) {
        ret.type = 'audio';
      }
      let packetLength = buffer.readUint16();
      ret.packetLength = packetLength;
      if (ret.type === 'video' || ret.type === 'audio') {
        let next = buffer.readUint8();
        let first = next >>> 6;
        if (first !== 0x02) {
          throw new Error('error when parse pes header');
        }
        next = buffer.readUint8();
        ret.ptsDTSFlag = next >>> 6;
        ret.escrFlag = next >>> 5 & 0x01;
        ret.esRateFlag = next >>> 4 & 0x01;
        ret.dsmFlag = next >>> 3 & 0x01;
        ret.additionalFlag = next >>> 2 & 0x01;
        ret.crcFlag = next >>> 1 & 0x01;
        ret.extensionFlag = next & 0x01;
        ret.pesHeaderLength = buffer.readUint8();
        let N1 = ret.pesHeaderLength;

        if (ret.ptsDTSFlag === 2) {
          let pts = [];
          next = buffer.readUint8();
          pts.push(next >>> 1 & 0x07);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          ret.pts = (pts[0] << 30 | pts[1] << 15 | pts[2]);
          N1 -= 5;
          // 视频如果没有dts用pts
          if (ret.type === 'video') {
            ret.dts = ret.pts;
          }
        }
        if (ret.ptsDTSFlag === 3) {
          let pts = [];
          next = buffer.readUint8();
          pts.push(next >>> 1 & 0x07);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          ret.pts = (pts[0] << 30 | pts[1] << 15 | pts[2]);
          let dts = [];
          next = buffer.readUint8();
          dts.push(next >>> 1 & 0x07);
          next = buffer.readUint16();
          dts.push(next >>> 1);
          next = buffer.readUint16();
          dts.push(next >>> 1);
          ret.dts = (dts[0] << 30 | dts[1] << 15 | dts[2]);
          N1 -= 10;
        }
        if (ret.escrFlag === 1) {
          let escr = []
          let ex = [];
          next = buffer.readUint8();
          escr.push(next >>> 3 & 0x07);
          escr.push(next & 0x03);
          next = buffer.readUint16();
          escr.push(next >>> 13);
          escr.push(next & 0x03);
          next = buffer.readUint16();
          escr.push(next >>> 13);
          ex.push(next & 0x03);
          next = buffer.readUint8();
          ex.push(next >>> 1);
          ret.escr = (escr[0] << 30 | escr[1] << 28 | escr[2] << 15 | escr[3] << 13 | escr[4]) * 300 + (ex[0] << 7 | ex[1]);
          N1 -= 6;
        }
        if (ret.esRateFlag === 1) {
          next = buffer.readUint24();
          ret.esRate = next >>> 1 & 0x3fffff;
          N1 -= 3;
        }
        if (ret.dsmFlag === 1) {
          throw new Error('not support DSM_trick_mode');
        }
        if (ret.additionalFlag === 1) {
          next = buffer.readUint8();
          ret.additionalCopyInfo = next & 0x7f;
          N1 -= 1;
        }
        if (ret.crcFlag === 1) {
          ret.pesCRC = buffer.readUint16();
          N1 -= 2;
        }
        if (ret.extensionFlag === 1) {
          throw new Error('not support extension');
        }
        if (N1 > 0) {
          buffer.skip(N1);
        }
        ret.ES = TsDemuxer.ES(buffer, ret.type);
      } else {
        throw new Error('format is not supported');
      }
    }
    return ret;
  }

  static ES (buffer, type) {
    let next;
    let ret = {};
    if (type === 'video') {
      next = buffer.readUint32();
      if (next !== 1) {
        buffer.back(4);
        next = buffer.readUint24();
        if (next !== 1) {
          throw new Error('h264 nal header parse failed');
        }
      }
      buffer.skip(2);// 09 F0
      // TODO readnalu
      ret.buffer = buffer;
    } else if (type === 'audio') {
      next = buffer.readUint16();
      // adts的同步字节，12位
      if (next >>> 4 !== 0xfff) {
        throw new Error('aac ES parse Error');
      }
      const fq = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];
      ret.id = (next >>> 3 & 0x01) === 0 ? 'MPEG-4' : 'MPEG-2';
      ret.layer = next >>> 1 & 0x03;
      ret.absent = next & 0x01;
      next = buffer.readUint16();
      ret.audioObjectType = (next >>> 14 & 0x03) + 1;
      ret.profile = ret.audioObjectType - 1;
      ret.frequencyIndex = next >>> 10 & 0x0f;
      ret.frequence = fq[ret.frequencyIndex];
      ret.channel = next >>> 6 & 0x07;
      ret.frameLength = (next & 0x03) << 11 | (buffer.readUint16() >>> 5);
      ret.audioConfig = TsDemuxer.getAudioConfig(ret.audioObjectType, ret.channel, ret.frequencyIndex);
      buffer.skip(1);
      ret.buffer = buffer;
    } else {
      throw new Error(`ES ${type} is not supported`);
    }

    return ret;
  }

  static TSDT (stream, ts, frags) {
    // TODO
    ts.payload = {};
  }

  static CAT (stream, ts, frags) {
    let ret = {}
    ret.tableID = stream.readUint8();
    let next = stream.readUint16();
    ret.sectionIndicator = next >>> 7;
    ret.sectionLength = next & 0x0fff;
    stream.skip(2);
    next = stream.readUint8();
    ret.version = next >>> 3;
    ret.currentNextIndicator = next & 0x01;
    ret.sectionNumber = stream.readUint8();
    ret.lastSectionNumber = stream.readUint8();
    let N = (this.sectionLength - 9) / 4;
    let list = [];
    for (let i = 0; i < N; i++) {
      list.push({});
    }
    ret.crc32 = stream.readUint32();
    ts.payload = ret;
  }

  static getAudioConfig (audioObjectType, channel, sampleIndex) {
    let userAgent = navigator.userAgent.toLowerCase()
    let config;
    let extensionSampleIndex;
    if (/firefox/i.test(userAgent)) {
      if (sampleIndex >= 6) {
        audioObjectType = 5;
        config = new Array(4);
        extensionSampleIndex = sampleIndex - 3;
      } else {
        audioObjectType = 2;
        config = new Array(2);
        extensionSampleIndex = sampleIndex;
      }
    } else if (userAgent.indexOf('android') !== -1) {
      audioObjectType = 2;
      config = new Array(2);
      extensionSampleIndex = sampleIndex;
    } else {
      audioObjectType = 5;
      config = new Array(4);
      if (sampleIndex >= 6) {
        extensionSampleIndex = sampleIndex - 3;
      } else {
        if (channel === 1) {
          audioObjectType = 2;
          config = new Array(2);
        }
        extensionSampleIndex = sampleIndex;
      }
    }

    config[0] = audioObjectType << 3;
    config[0] |= (sampleIndex & 0x0e) >> 1;
    config[1] = (sampleIndex & 0x01) << 7;
    config[1] |= channel << 3;
    if (audioObjectType === 5) {
      config[1] |= (extensionSampleIndex & 0x0e) >> 1;
      config[2] = (extensionSampleIndex & 0x01) << 7;
      config[2] |= 2 << 2;
      config[3] = 0;
    }
    return config;
  }

  get inputBuffer () {
    return this._context.getInstance(this.configs.inputbuffer);
  }

  get _tracks () {
    return this._context.getInstance('TRACKS');
  }
}

/* harmony default export */ __webpack_exports__["default"] = (TsDemuxer);


/***/ }),

/***/ "../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
  !*** ../xgplayer-demux/src/hls/playlist.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Playlist {
  constructor (configs) {
    this._baseURL = '';
    this._list = {};
    this._ts = {};
    this.version = 0;
    this.sequence = -1;
    this.targetduration = 0;
    this.duration = 0;
    this.fragLength = 0;
    this._lastget = undefined;
    this._audoclear = configs.autoclear || false;
  }

  get list () {
    return this._list;
  }

  set baseURL (baseURL) {
    if (this.baseURL !== baseURL) {
      this.clear();
      this._baseURL = baseURL;
    }
  }

  get baseURL () {
    return this._baseURL;
  }

  push (ts, duration) {
    if (!this._ts[ts]) {
      this._ts[ts] = {duration: duration, downloaded: false, downloading: false, start: this.duration};
      this._list[this.duration] = ts;
      this.duration += duration;
      this.fragLength += 1;
    }
  }

  deleteFrag (url) {
    if (this._ts[url]) {
      if (this._ts[url].start > this._lastget.time) {
        this._lastget = {
          duration: this._ts[url].duration,
          time: this._ts[url].start,
          downloaded: false,
          downloading: false,
          url: url
        }
      }
      delete this._list[this._ts[url].start];
      delete this._ts[url];
      this.fragLength -= 1;
    }
  }

  pushM3U8 (data, deletepre) {
    // 常规信息替换
    if (!data) {
      return;
    }
    this.version = data.version;
    this.targetduration = data.targetduration;

    // 新分片信息
    if (data.sequence > this.sequence) {
      this.sequence = data.sequence;
      let newfraglist = []
      for (let i = 0; i < data.frags.length; i++) {
        let frag = data.frags[i];
        if (!this._ts[frag.url]) {
          newfraglist.push(frag.url)
          this.push(frag.url, frag.duration);
        }
      }
      if (deletepre) {
        let tslist = this.getTsList();
        for (let i = 0; i < tslist.length; i++) {
          if (newfraglist.indexOf(tslist[i]) < 0) {
            this.deleteFrag(tslist[i]);
          }
        }
      }
    }
  }

  getTsList () {
    return Object.keys(this._ts);
  }

  downloaded (tsname, isloaded) {
    let ts = this._ts[tsname];
    if (ts) {
      ts.downloaded = isloaded
    }
  }

  downloading (tsname, loading) {
    let ts = this._ts[tsname];
    if (ts) {
      ts.downloading = loading
    }
  }

  getTsByName (name) {
    return this._ts[name];
  }

  getTs (time) {
    let timelist = Object.keys(this._list);
    let ts;

    if (time === undefined) {
      if (this._lastget) {
        time = this._lastget.time + this._lastget.duration;
      } else {
        time = 0;
      }
    }

    if (timelist.length < 1 || time >= this.duration) {
      return undefined;
    }
    timelist.sort((a, b) => {
      return parseFloat(a) - parseFloat(b)
    });
    for (let i = 0; i < timelist.length; i++) {
      if (time >= parseInt(timelist[i])) {
        let url = this._list[timelist[i]];
        let downloaded = this._ts[url].downloaded;
        let downloading = this._ts[url].downloading;
        ts = {url, downloaded, downloading, time: parseInt(timelist[i]), duration: parseInt(this._ts[url].duration)};
        if (this.autoclear) {
          delete this._ts[this._lastget.url];
          delete this._list[this._lastget.time];
        }
        this._lastget = ts;
      } else {
        break;
      }
    }
    return ts;
  }

  clear () {
    this._baseURL = '';
    this._list = {};
    this._ts = {};
    this.version = 0;
    this.sequence = -1;
    this.targetduration = 0;
    this.duration = 0;
  }

  clearDownloaded () {
    for (let i = 0, l = Object.keys(this._ts).length; i < l; i++) {
      let ts = this._ts[Object.keys(this._ts)[i]];
      ts.downloaded = false;
      ts.downloading = false;
    }
  }

  destroy () {
    this._baseURL = '';
    this._list = {};
    this._ts = {};
    this.version = 0;
    this.sequence = -1;
    this.targetduration = 0;
    this.duration = 0;
    this.fragLength = 0;
    this._lastget = undefined;
    this._audoclear = false;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Playlist);


/***/ }),

/***/ "../xgplayer-loader/index.js":
/*!***********************************!*\
  !*** ../xgplayer-loader/index.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  FetchLoader: __webpack_require__(/*! ./src/fetch-loader */ "../xgplayer-loader/src/fetch-loader.js").default
};


/***/ }),

/***/ "../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader/src/fetch-loader.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);


const LOADER_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"].LOADER_EVENTS;
const READ_STREAM = 0;
const READ_TEXT = 1;
const READ_JSON = 2;
const READ_BUFFER = 3;
class FetchLoader {
  constructor (configs) {
    this.configs = Object.assign({}, configs);
    this.url = null
    this.status = 0
    this.error = null
    this._reader = null;
    this._canceled = false;
    this.readtype = this.configs.readtype;
    this.buffer = this.configs.buffer || 'LOADER_BUFFER';
    this._loaderTaskNo = 0;
  }

  init () {
    this.on(LOADER_EVENTS.LADER_START, this.load.bind(this))
  }

  static get type () {
    return 'loader'
  }

  load (url, opts) {
    let _this = this;
    this.url = url;
    this._canceled = false;

    // TODO: Add Ranges
    let params = this.getParams(opts)
    _this.loading = true
    return fetch(this.url, params).then(function (response) {
      if (response.ok) {
        _this.status = response.status
        return _this._onFetchResponse(response);
      }
      _this.emit(LOADER_EVENTS.LOADER_ERROR, _this, response);
      _this.loading = false;
    }).catch(function (error)  {
      _this.emit(LOADER_EVENTS.LOADER_ERROR, _this, error);
      _this.loading = false;
      throw new Error(error.message)
    })
  }

  _onFetchResponse (response) {
    let _this = this;
    let buffer = this._context.getInstance(this.buffer);
    this._loaderTaskNo++;
    let taskno = this._loaderTaskNo;
    if (response.ok === true) {
      switch (this.readtype) {
        case READ_JSON:
          response.json().then((data) => {
            _this.loading = false
            if (!_this._canceled) {
              if (buffer) {
                buffer.push(data);
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer);
              } else {
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, data);
              }
            }
          });
          break;
        case READ_TEXT:
          response.text().then((data) => {
            _this.loading = false
            if (!_this._canceled) {
              if (buffer) {
                buffer.push(data);
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer);
              } else {
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, data);
              }
            }
          });
          break;
        case READ_BUFFER:
          response.arrayBuffer().then((data) => {
            _this.loading = false
            if (!_this._canceled) {
              if (buffer) {
                buffer.push(new Uint8Array(data));
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer);
              } else {
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, data);
              }
            }
          });
          break;
        case READ_STREAM:
        default:
          return this._onReader(response.body.getReader(), taskno);
      }
    }
  }

  _onReader (reader, taskno) {
    let buffer = this._context.getInstance(this.buffer);

    if (!buffer) {
      this._reader.cancel();
    }

    this._reader = reader
    if (this.loading === false) {
      return
    }

    let _this = this
    // reader read function returns a Promise. get data when callback and has value.done when disconnected.
    // read方法返回一个Promise. 回调中可以获取到数据。当value.done存在时，说明链接断开。
    this._reader && this._reader.read().then(function (val) {
      if (val.done) {
        // TODO: 完成处理
        _this.loading = false
        _this.status = 0;
        _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer)
        return
      }

      if (_this._canceled) {
        _this._reader.cancel()
        return;
      }
      buffer.push(val.value)
      _this.emit(LOADER_EVENTS.LOADER_DATALOADED, buffer)
      return _this._onReader(reader, taskno)
    }).catch((error) => {
      console.error(error);
      _this.emit(LOADER_EVENTS.LOADER_ERROR, _this, error);
      _this.loading = false;
    })
  }

  getParams (opts) {
    let options = Object.assign({}, opts)
    let headers = new Headers()

    let params = {
      method: 'GET',
      headers: headers,
      mode: 'cors',
      cache: 'default'
    }

    // add custmor headers
    // 添加自定义头
    if (typeof this.configs.headers === 'object') {
      let configHeaders = this.configs.headers
      for (let key in configHeaders) {
        if (configHeaders.hasOwnProperty(key)) {
          headers.append(key, configHeaders[key])
        }
      }
    }

    if (typeof options.headers === 'object') {
      let optHeaders = options.headers
      for (let key in optHeaders) {
        if (optHeaders.hasOwnProperty(key)) {
          headers.append(key, optHeaders[key])
        }
      }
    }

    if (options.cors === false) {
      params.mode = 'same-origin'
    }

    // withCredentials is disabled by default
    // withCredentials 在默认情况下不被使用。
    if (options.withCredentials) {
      params.credentials = 'include'
    }

    // TODO: Add ranges;
    return params;
  }

  cancel () {
    if (this._reader) {
      this._reader.cancel()
      this._reader = null
      this.loading = false
      this._canceled = true;
    }
  }

  destroy () {
    this.cancel();
  }
}

/* harmony default export */ __webpack_exports__["default"] = (FetchLoader);


/***/ }),

/***/ "../xgplayer-remux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-remux/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Mp4Remuxer: __webpack_require__(/*! ./src/mp4 */ "../xgplayer-remux/src/mp4/index.js").default
};


/***/ }),

/***/ "../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);


// const UINT32_MAX = Math.pow(2, 32) - 1;
class Fmp4 {
  static size (value) {
    return xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(value)
  }
  static initBox (size, name, ...content) {
    const buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    buffer.write(Fmp4.size(size), Fmp4.type(name), ...content)
    return buffer.buffer
  }
  static extension (version, flag) {
    return new Uint8Array([
      version,
      (flag >> 16) & 0xff,
      (flag >> 8) & 0xff,
      flag & 0xff
    ])
  }
  static ftyp () {
    return Fmp4.initBox(24, 'ftyp', new Uint8Array([
      0x69, 0x73, 0x6F, 0x6D, // isom,
      0x0, 0x0, 0x00, 0x01, // minor_version: 0x01
      0x69, 0x73, 0x6F, 0x6D, // isom
      0x61, 0x76, 0x63, 0x31 // avc1
    ]))
  }
  static moov ({ type, meta }) {
    let size = 8
    let mvhd = Fmp4.mvhd(meta.duration, meta.timescale)
    let trak

    if (type === 'video') {
      trak = Fmp4.videoTrak(meta)
    } else {
      trak = Fmp4.audioTrak(meta)
    }

    let mvex = Fmp4.mvex(meta.duration, meta.timescale || 1000, meta.id);
    [mvhd, trak, mvex].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'moov', mvhd, trak, mvex)
  }
  static mvhd (duration, timescale = 1000) {
    // duration *= timescale;
    let bytes = new Uint8Array([
      0x00, 0x00, 0x00, 0x00, // version(0) + flags     1位的box版本+3位flags   box版本，0或1，一般为0。（以下字节数均按version=0）
      0x00, 0x00, 0x00, 0x00, // creation_time    创建时间  （相对于UTC时间1904-01-01零点的秒数）
      0x00, 0x00, 0x00, 0x00, // modification_time   修改时间

      /**
             * timescale: 4 bytes文件媒体在1秒时间内的刻度值，可以理解为1秒长度
             */
      (timescale >>> 24) & 0xFF,
      (timescale >>> 16) & 0xFF,
      (timescale >>> 8) & 0xFF,
      (timescale) & 0xFF,

      /**
             * duration: 4 bytes该track的时间长度，用duration和time scale值可以计算track时长，比如audio track的time scale = 8000,
             * duration = 560128，时长为70.016，video track的time scale = 600, duration = 42000，时长为70
             */
      (duration >>> 24) & 0xFF,
      (duration >>> 16) & 0xFF,
      (duration >>> 8) & 0xFF,
      (duration) & 0xFF,
      0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0   推荐播放速率，高16位和低16位分别为小数点整数部分和小数部分，即[16.16] 格式，该值为1.0（0x00010000）表示正常前向播放
      /**
             * PreferredVolume(1.0, 2bytes) + reserved(2bytes)
             * 与rate类似，[8.8] 格式，1.0（0x0100）表示最大音量
             */
      0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, //  reserved: 4 + 4 bytes保留位
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // 视频变换矩阵   线性代数
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, // ----end composition matrix----
      0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // pre-defined 保留位
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----
      0xFF, 0xFF, 0xFF, 0xFF // next_track_ID 下一个track使用的id号
    ])
    return Fmp4.initBox(8 + bytes.length, 'mvhd', new Uint8Array(bytes))
  }
  static videoTrak (data) {
    let size = 8

    let tkhd = Fmp4.tkhd({
      id: 1,
      duration: data.duration,
      timescale: data.timescale || 1000,
      width: data.presentWidth,
      height: data.presentHeight,
      type: 'video'
    })
    let mdia = Fmp4.mdia({
      type: 'video',
      timescale: data.timescale || 1000,
      duration: data.duration,
      avcc: data.avcc,
      parRatio: data.parRatio,
      width: data.presentWidth,
      height: data.presentHeight
    });
    [tkhd, mdia].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'trak', tkhd, mdia)
  }
  static audioTrak (data) {
    let size = 8
    let tkhd = Fmp4.tkhd({
      id: 2,
      duration: data.duration,
      timescale: data.timescale || 1000,
      width: 0,
      height: 0,
      type: 'audio'
    })
    let mdia = Fmp4.mdia({
      type: 'audio',
      timescale: data.timescale || 1000,
      duration: data.duration,
      channelCount: data.channelCount,
      samplerate: data.sampleRate,
      config: data.config
    });
    [tkhd, mdia].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'trak', tkhd, mdia)
  }
  static tkhd (data) {
    let id = data.id
    let duration = data.duration
    let width = data.width
    let height = data.height
    let content = new Uint8Array([
      0x00, 0x00, 0x00, 0x07, // version(0) + flags 1位版本 box版本，0或1，一般为0。（以下字节数均按version=0）按位或操作结果值，预定义如下：
      // 0x000001 track_enabled，否则该track不被播放；
      // 0x000002 track_in_movie，表示该track在播放中被引用；
      // 0x000004 track_in_preview，表示该track在预览时被引用。
      // 一般该值为7，1+2+4 如果一个媒体所有track均未设置track_in_movie和track_in_preview，将被理解为所有track均设置了这两项；对于hint track，该值为0
      // hint track 这个特殊的track并不包含媒体数据，而是包含了一些将其他数据track打包成流媒体的指示信息。
      0x00, 0x00, 0x00, 0x00, // creation_time创建时间（相对于UTC时间1904-01-01零点的秒数）
      0x00, 0x00, 0x00, 0x00, // modification time 修改时间
      (id >>> 24) & 0xFF, // track_ID: 4 bytes id号，不能重复且不能为0
      (id >>> 16) & 0xFF,
      (id >>> 8) & 0xFF,
      (id) & 0xFF,
      0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes    保留位
      (duration >>> 24) & 0xFF, // duration: 4 bytes track的时间长度
      (duration >>> 16) & 0xFF,
      (duration >>> 8) & 0xFF,
      (duration) & 0xFF,
      0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes    保留位
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)  视频层，默认为0，值小的在上层.track分组信息，默认为0表示该track未与其他track有群组关系
      0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)    [8.8] 格式，如果为音频track，1.0（0x0100）表示最大音量；否则为0   +保留位
      0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, // 视频变换矩阵
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, // ----end composition matrix----
      (width >>> 8) & 0xFF, // //宽度
      (width) & 0xFF,
      0x00, 0x00,
      (height >>> 8) & 0xFF, // 高度
      (height) & 0xFF,
      0x00, 0x00
    ])
    return Fmp4.initBox(8 + content.byteLength, 'tkhd', content)
  }
  static edts (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let duration = data.duration
    let mediaTime = data.mediaTime
    buffer.write(Fmp4.size(36), Fmp4.type('edts'))
    // elst
    buffer.write(Fmp4.size(28), Fmp4.type('elst'))
    buffer.write(new Uint8Array([
      0x00, 0x00, 0x00, 0x01, // entry count
      (duration >> 24) & 0xff, (duration >> 16) & 0xff, (duration >> 8) & 0xff, duration & 0xff,
      (mediaTime >> 24) & 0xff, (mediaTime >> 16) & 0xff, (mediaTime >> 8) & 0xff, mediaTime & 0xff,
      0x00, 0x00, 0x00, 0x01 // media rate
    ]))
    return buffer.buffer
  }
  static mdia (data) {
    let size = 8
    let mdhd = Fmp4.mdhd(data.timescale, data.duration)
    let hdlr = Fmp4.hdlr(data.type)
    let minf = Fmp4.minf(data);
    [mdhd, hdlr, minf].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'mdia', mdhd, hdlr, minf)
  }
  static mdhd (timescale = 1000, duration) {
    let content = new Uint8Array([
      0x00, 0x00, 0x00, 0x00, // creation_time    创建时间
      0x00, 0x00, 0x00, 0x00, // modification_time修改时间
      (timescale >>> 24) & 0xFF, // timescale: 4 bytes    文件媒体在1秒时间内的刻度值，可以理解为1秒长度
      (timescale >>> 16) & 0xFF,
      (timescale >>> 8) & 0xFF,
      (timescale) & 0xFF,
      (duration >>> 24) & 0xFF, // duration: 4 bytes  track的时间长度
      (duration >>> 16) & 0xFF,
      (duration >>> 8) & 0xFF,
      (duration) & 0xFF,
      0x55, 0xC4, // language: und (undetermined) 媒体语言码。最高位为0，后面15位为3个字符（见ISO 639-2/T标准中定义）
      0x00, 0x00 // pre_defined = 0
    ])
    return Fmp4.initBox(12 + content.byteLength, 'mdhd', Fmp4.extension(0, 0), content)
  }
  static hdlr (type) {
    let value = [0x00, // version 0
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00, // pre_defined
      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x56, 0x69, 0x64, 0x65,
      0x6f, 0x48, 0x61, 0x6e,
      0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'
    ]
    if (type === 'audio') {
      value.splice(8, 4, ...[0x73, 0x6f, 0x75, 0x6e])
      value.splice(24, 13, ...[0x53, 0x6f, 0x75, 0x6e,
        0x64, 0x48, 0x61, 0x6e,
        0x64, 0x6c, 0x65, 0x72, 0x00])
    }
    return Fmp4.initBox(8 + value.length, 'hdlr', new Uint8Array(value))
  }
  static minf (data) {
    let size = 8
    let vmhd = data.type === 'video' ? Fmp4.vmhd() : Fmp4.smhd()
    let dinf = Fmp4.dinf()
    let stbl = Fmp4.stbl(data);
    [vmhd, dinf, stbl].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'minf', vmhd, dinf, stbl)
  }
  static vmhd () {
    return Fmp4.initBox(20, 'vmhd', new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x01, // flags
      0x00, 0x00, // graphicsmode
      0x00, 0x00,
      0x00, 0x00,
      0x00, 0x00 // opcolor
    ]))
  }
  static smhd () {
    return Fmp4.initBox(16, 'smhd', new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, // balance
      0x00, 0x00 // reserved
    ]))
  }
  static dinf () {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let dref = [0x00, // version 0
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x01, // entry_count
      0x00, 0x00, 0x00, 0x0c, // entry_size
      0x75, 0x72, 0x6c, 0x20, // 'url' type
      0x00, // version 0
      0x00, 0x00, 0x01 // entry_flags
    ]
    buffer.write(Fmp4.size(36), Fmp4.type('dinf'), Fmp4.size(28), Fmp4.type('dref'), new Uint8Array(dref))
    return buffer.buffer
  }
  static stbl (data) {
    let size = 8
    let stsd = Fmp4.stsd(data)
    let stts = Fmp4.stts()
    let stsc = Fmp4.stsc()
    let stsz = Fmp4.stsz()
    let stco = Fmp4.stco();
    [stsd, stts, stsc, stsz, stco].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'stbl', stsd, stts, stsc, stsz, stco)
  }
  static stsd (data) {
    let content
    if (data.type === 'audio') {
      // if (!data.isAAC && data.codec === 'mp4') {
      //     content = FMP4.mp3(data);
      // } else {
      //
      // }
      // 支持mp4a
      content = Fmp4.mp4a(data)
    } else {
      content = Fmp4.avc1(data)
    }
    return Fmp4.initBox(16 + content.byteLength, 'stsd', Fmp4.extension(0, 0), new Uint8Array([0x00, 0x00, 0x00, 0x01]), content)
  }
  static mp4a (data) {
    let content = new Uint8Array([
      0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, // reserved
      0x00, 0x01, // data_reference_index
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, data.channelCount, // channelcount
      0x00, 0x10, // sampleSize:16bits
      0x00, 0x00, 0x00, 0x00, // reserved2
      (data.samplerate >> 8) & 0xff,
      data.samplerate & 0xff, //
      0x00, 0x00
    ])
    let esds = Fmp4.esds(data.config)
    return Fmp4.initBox(8 + content.byteLength + esds.byteLength, 'mp4a', content, esds)
  }
  static esds (config = [43, 146, 8, 0]) {
    const configlen = config.length
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let content = new Uint8Array([
      0x00, // version 0
      0x00, 0x00, 0x00, // flags

      0x03, // descriptor_type
      0x17 + configlen, // length
      0x00, 0x01, // es_id
      0x00, // stream_priority

      0x04, // descriptor_type
      0x0f + configlen, // length
      0x40, // codec : mpeg4_audio
      0x15, // stream_type
      0x00, 0x00, 0x00, // buffer_size
      0x00, 0x00, 0x00, 0x00, // maxBitrate
      0x00, 0x00, 0x00, 0x00, // avgBitrate

      0x05 // descriptor_type
    ].concat([configlen]).concat(config).concat([0x06, 0x01, 0x02]))
    buffer.write(Fmp4.size(8 + content.byteLength), Fmp4.type('esds'), content)
    return buffer.buffer
  }
  static avc1 (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let size = 40// 8(avc1)+8(avcc)+8(btrt)+16(pasp)
    // let sps = data.sps
    // let pps = data.pps
    let width = data.width
    let height = data.height
    let hSpacing = data.parRatio.height
    let vSpacing = data.parRatio.width
    // let avccBuffer = new Buffer()
    // avccBuffer.write(new Uint8Array([
    //   0x01, // version
    //   sps[1], // profile
    //   sps[2], // profile compatible
    //   sps[3], // level
    //   0xfc | 3,
    //   0xE0 | 1 // 目前只处理一个sps
    // ].concat([sps.length >>> 8 & 0xff, sps.length & 0xff])))
    // avccBuffer.write(sps, new Uint8Array([1, pps.length >>> 8 & 0xff, pps.length & 0xff]), pps)

    let avcc = data.avcc
    let avc1 = new Uint8Array([
      0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, // reserved
      0x00, 0x01, // data_reference_index
      0x00, 0x00, // pre_defined
      0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // pre_defined
      (width >> 8) & 0xff,
      width & 0xff, // width
      (height >> 8) & 0xff,
      height & 0xff, // height
      0x00, 0x48, 0x00, 0x00, // horizresolution
      0x00, 0x48, 0x00, 0x00, // vertresolution
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x01, // frame_count
      0x12,
      0x64, 0x61, 0x69, 0x6C, // dailymotion/hls.js
      0x79, 0x6D, 0x6F, 0x74,
      0x69, 0x6F, 0x6E, 0x2F,
      0x68, 0x6C, 0x73, 0x2E,
      0x6A, 0x73, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, // compressorname
      0x00, 0x18, // depth = 24
      0x11, 0x11]) // pre_defined = -1
    let btrt = new Uint8Array([
      0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB
      0x00, 0x2d, 0xc6, 0xc0, // maxBitrate
      0x00, 0x2d, 0xc6, 0xc0 // avgBitrate
    ])
    let pasp = new Uint8Array([
      (hSpacing >> 24), // hSpacing
      (hSpacing >> 16) & 0xff,
      (hSpacing >> 8) & 0xff,
      hSpacing & 0xff,
      (vSpacing >> 24), // vSpacing
      (vSpacing >> 16) & 0xff,
      (vSpacing >> 8) & 0xff,
      vSpacing & 0xff
    ])

    buffer.write(
      Fmp4.size(size + avc1.byteLength + avcc.byteLength + btrt.byteLength), Fmp4.type('avc1'), avc1,
      Fmp4.size(8 + avcc.byteLength), Fmp4.type('avcC'), avcc,
      Fmp4.size(20), Fmp4.type('btrt'), btrt,
      Fmp4.size(16), Fmp4.type('pasp'), pasp
    )
    return buffer.buffer
  }
  static stts () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00 // entry_count
    ])
    return Fmp4.initBox(16, 'stts', content)
  }
  static stsc () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00 // entry_count
    ])
    return Fmp4.initBox(16, 'stsc', content)
  }
  static stco () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00 // entry_count
    ])
    return Fmp4.initBox(16, 'stco', content)
  }
  static stsz () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00, // sample_size
      0x00, 0x00, 0x00, 0x00 // sample_count
    ])
    return Fmp4.initBox(20, 'stsz', content)
  }
  static mvex (duration, timescale = 1000, trackID) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let mehd = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(duration)
    buffer.write(Fmp4.size(56), Fmp4.type('mvex'), Fmp4.size(16), Fmp4.type('mehd'), Fmp4.extension(0, 0), mehd, Fmp4.trex(trackID))
    return buffer.buffer
  }
  static trex (id) {
    let content = new Uint8Array([
      0x00, // version 0
      0x00, 0x00, 0x00, // flags
      (id >> 24),
      (id >> 16) & 0xff,
      (id >> 8) & 0xff,
      (id & 0xff), // track_ID
      0x00, 0x00, 0x00, 0x01, // default_sample_description_index
      0x00, 0x00, 0x00, 0x00, // default_sample_duration
      0x00, 0x00, 0x00, 0x00, // default_sample_size
      0x00, 0x01, 0x00, 0x01 // default_sample_flags
    ])
    return Fmp4.initBox(8 + content.byteLength, 'trex', content)
  }
  static moof (data) {
    let size = 8
    let mfhd = Fmp4.mfhd()
    let traf = Fmp4.traf(data);
    [mfhd, traf].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'moof', mfhd, traf)
  }
  static mfhd () {
    let content = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(Fmp4.sequence)
    Fmp4.sequence += 1
    return Fmp4.initBox(16, 'mfhd', Fmp4.extension(0, 0), content)
  }
  static traf (data) {
    let size = 8
    let tfhd = Fmp4.tfhd(data.id)
    let tfdt = Fmp4.tfdt(data.time)
    let sdtp = Fmp4.sdtp(data)
    let trun = Fmp4.trun(data, sdtp.byteLength);

    [tfhd, tfdt, trun, sdtp].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'traf', tfhd, tfdt, trun, sdtp)
  }
  static tfhd (id) {
    let content = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(id)
    return Fmp4.initBox(16, 'tfhd', Fmp4.extension(0, 0), content)
  }
  static tfdt (time) {
    // let upper = Math.floor(time / (UINT32_MAX + 1)),
    //     lower = Math.floor(time % (UINT32_MAX + 1));
    return Fmp4.initBox(16, 'tfdt', Fmp4.extension(0, 0), xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(time))
  }
  static trun (data, sdtpLength) {
    // let id = data.id;
    // let ceil = id === 1 ? 16 : 12;
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let sampleCount = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(data.samples.length)
    // mdat-header 8
    // moof-header 8
    // mfhd 16
    // traf-header 8
    // thhd 16
    // tfdt 20
    // trun-header 12
    // sampleCount 4
    // data-offset 4
    // samples.length
    let offset = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(8 + 8 + 16 + 8 + 16 + 16 + 12 + 4 + 4 + 16 * data.samples.length + sdtpLength)
    buffer.write(Fmp4.size(20 + 16 * data.samples.length), Fmp4.type('trun'), new Uint8Array([0x00, 0x00, 0x0F, 0x01]), sampleCount, offset)

    // let size = buffer.buffer.byteLength
    // let writeOffset = 0
    // data.samples.forEach(() => {
    //   size += 16
    // })
    //
    // let trunBox = new Uint8Array(size)

    // trunBox.set(buffer.buffer, 0)

    data.samples.forEach((item) => {
      const flags = item.flags
      // console.log(item.type, item.dts, item.duration)

      buffer.write(new Uint8Array([
        (item.duration >>> 24) & 0xFF, // sample_duration
        (item.duration >>> 16) & 0xFF,
        (item.duration >>> 8) & 0xFF,
        (item.duration) & 0xFF,
        (item.size >>> 24) & 0xFF, // sample_size
        (item.size >>> 16) & 0xFF,
        (item.size >>> 8) & 0xFF,
        (item.size) & 0xFF,
        (flags.isLeading << 2) | flags.dependsOn, // sample_flags
        (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,
        0x00, 0x00, // sample_degradation_priority
        (item.cts >>> 24) & 0xFF, // sample_composition_time_offset
        (item.cts >>> 16) & 0xFF,
        (item.cts >>> 8) & 0xFF,
        (item.cts) & 0xFF
      ]))
      // writeOffset += 16
      // buffer.write(Buffer.writeUint32(0));
    })
    return buffer.buffer
  }
  static sdtp (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    buffer.write(Fmp4.size(12 + data.samples.length), Fmp4.type('sdtp'), Fmp4.extension(0, 0))
    data.samples.forEach(item => {
      const flags = item.flags
      const num = (flags.isLeading << 6) | // is_leading: 2 (bit)
        (flags.dependsOn << 4) | // sample_depends_on
        (flags.isDependedOn << 2) | // sample_is_depended_on
        (flags.hasRedundancy)// sample_has_redundancy

      buffer.write(new Uint8Array([num]))
    })
    return buffer.buffer
  }
  static mdat (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let size = 8
    data.samples.forEach(item => {
      size += item.size
    })
    buffer.write(Fmp4.size(size), Fmp4.type('mdat'))
    let mdatBox = new Uint8Array(size)
    let offset = 0
    mdatBox.set(buffer.buffer, offset)
    offset += 8
    data.samples.forEach(item => {
      item.buffer.forEach((unit) => {
        mdatBox.set(unit, offset)
        offset += unit.byteLength
        // buffer.write(unit.data);
      })
    })
    return mdatBox
  }
}
Fmp4.type = (name) => {
  return new Uint8Array([name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)])
}
Fmp4.sequence = 1

/* harmony default export */ __webpack_exports__["default"] = (Fmp4);


/***/ }),

/***/ "../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Mp4Remuxer; });
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _fmp4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fmp4 */ "../xgplayer-remux/src/mp4/fmp4.js");



const REMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"].REMUX_EVENTS

class Mp4Remuxer {
  constructor () {
    this._dtsBase = 0
    this._isDtsBaseInited = false

    this.videoAllDuration = 0
    this.audioAllDuration = 0
  }

  init () {
    this.on(REMUX_EVENTS.REMUX_MEDIA, this.remux.bind(this))
    this.on(REMUX_EVENTS.REMUX_METADATA, this.onMetaDataReady.bind(this))
  }

  destroy () {
    this._dtsBase = -1
    this._dtsBaseInited = false
  }

  reset () {
    this._dtsBase = 0
    this._isDtsBaseInited = false
  }

  remux () {
    const { audioTrack, videoTrack } = this._context.getInstance('TRACKS')
    !this._isDtsBaseInited && this.calcDtsBase(audioTrack, videoTrack)

    this._remuxVideo(videoTrack)
    this._remuxAudio(audioTrack)
  }

  seek () {

  }

  onMetaDataReady (type) {
    let initSegment = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let ftyp = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].ftyp()
    let moov
    let track

    if (type === 'audio') {
      const { audioTrack } = this._context.getInstance('TRACKS')
      track = audioTrack;
    } else {
      const { videoTrack } = this._context.getInstance('TRACKS')
      track = videoTrack;
    }

    moov = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].moov({ type, meta: track.meta })

    initSegment.write(ftyp, moov)

    let presourcebuffer = this._context.getInstance('PRE_SOURCE_BUFFER');
    let source = presourcebuffer.getSource(type);
    if (!source) {
      source = presourcebuffer.createSource(type);
    }

    source.mimetype = track.meta.codec;
    source.init = initSegment;
    this.emit(REMUX_EVENTS.INIT_SEGMENT, type)
  }

  calcDtsBase (audioTrack, videoTrack) {
    if (!audioTrack.samples.length && !videoTrack.samples.length) {
      return;
    }

    let audioBase = Infinity
    let videoBase = Infinity

    if (audioTrack.samples && audioTrack.samples.length) {
      audioBase = audioTrack.samples[0].dts
    }
    if (videoTrack.samples && videoTrack.samples.length) {
      videoBase = videoTrack.samples[0].dts
    }

    this._dtsBase = Math.min(audioBase, videoBase)
    this._isDtsBaseInited = true
  }

  _remuxVideo (videoTrack) {
    const track = videoTrack

    if (!videoTrack.samples || !videoTrack.samples.length) {
      return
    }

    let {samples} = track
    let firstDts = -1

    const mp4Samples = []
    const mdatBox = {
      samples: []
    }

    while (samples.length) {
      const avcSample = samples.shift()
      const { isKeyframe } = avcSample
      let dts = avcSample.dts - this._dtsBase

      if (firstDts === -1) {
        firstDts = dts
      }

      let cts
      let pts
      if (avcSample.pts) {
        pts = avcSample.pts - this._dtsBase
        cts = pts - dts
      }
      if (avcSample.cts) {
        pts = avcSample.cts + dts
        cts = avcSample.cts
      }

      let mdatSample = {
        buffer: [],
        size: 0
      }
      mdatBox.samples.push(mdatSample)
      mdatSample.buffer.push(avcSample.data)
      mdatSample.size += avcSample.data.byteLength

      let sampleDuration = 0
      if (samples.length >= 1) {
        const nextDts = samples[0].dts - this._dtsBase
        sampleDuration = nextDts - dts
      } else {
        if (mp4Samples.length >= 1) { // lastest sample, use second last duration
          sampleDuration = mp4Samples[mp4Samples.length - 1].duration
        } else { // the only one sample, use reference duration
          sampleDuration = this.videoMeta.refSampleDuration
        }
      }
      this.videoAllDuration += sampleDuration
      mp4Samples.push({
        dts,
        cts,
        pts,
        data: avcSample.data,
        size: avcSample.data.byteLength,
        isKeyframe,
        duration: sampleDuration,
        flags: {
          isLeading: 0,
          dependsOn: isKeyframe ? 2 : 1,
          isDependedOn: isKeyframe ? 1 : 0,
          hasRedundancy: 0,
          isNonSync: isKeyframe ? 0 : 1
        },
        originDts: dts,
        type: 'video'
      })
    }

    let moofMdat = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()

    const moof = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].moof({
      id: track.meta.id,
      time: firstDts,
      samples: mp4Samples
    })
    const mdat = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].mdat(mdatBox)
    moofMdat.write(moof, mdat)

    track.samples = []
    track.length = 0

    let presourcebuffer = this._context.getInstance('PRE_SOURCE_BUFFER');
    let source = presourcebuffer.getSource('video');
    if (!source) {
      source = presourcebuffer.createSource('video');
    }

    source.data.push(moofMdat);

    this.emit(REMUX_EVENTS.MEDIA_SEGMENT, 'video')
  }

  _remuxAudio (track) {
    const {samples} = track
    let firstDts = -1
    let mp4Samples = []

    const mdatBox = {
      samples: []
    }
    if (!samples || !samples.length) {
      return
    }
    let isFirstDtsInited = false
    while (samples.length) {
      let sample = samples.shift()
      const { data } = sample
      let dts = sample.dts - this._dtsBase
      const originDts = dts
      if (!isFirstDtsInited) {
        firstDts = dts
        isFirstDtsInited = true
      }

      let sampleDuration = 0

      if (this.audioMeta.refSampleDurationFixed) {
        sampleDuration = this.audioMeta.refSampleDurationFixed
      } else if (samples.length >= 1) {
        const nextDts = samples[0].dts - this._dtsBase;
        sampleDuration = nextDts - dts
      } else {
        if (mp4Samples.length >= 1) { // use second last sample duration
          sampleDuration = mp4Samples[mp4Samples.length - 1].duration
        } else { // the only one sample, use reference sample duration
          sampleDuration = this.audioMeta.refSampleDuration
        }
      }

      // console.log('remux audio ', dts)
      this.audioAllDuration += sampleDuration
      const mp4Sample = {
        dts,
        pts: dts,
        cts: 0,
        size: data.byteLength,
        duration: sample.duration ? sample.duration : sampleDuration,
        flags: {
          isLeading: 0,
          dependsOn: 2,
          isDependedOn: 1,
          hasRedundancy: 0,
          isNonSync: 0
        },
        isKeyframe: true,
        originDts,
        type: 'audio'
      }

      let mdatSample = {
        buffer: [],
        size: 0
      }
      mdatSample.buffer.push(data)
      mdatSample.size += data.byteLength

      mdatBox.samples.push(mdatSample)

      mp4Samples.push(mp4Sample)
    }

    const moofMdat = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    const moof = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].moof({
      id: track.meta.id,
      time: firstDts,
      samples: mp4Samples
    })
    const mdat = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].mdat(mdatBox)
    moofMdat.write(moof, mdat)

    track.samples = []
    track.length = 0

    let presourcebuffer = this._context.getInstance('PRE_SOURCE_BUFFER');
    let source = presourcebuffer.getSource('audio');
    if (!source) {
      source = presourcebuffer.createSource('audio');
    }
    source.data.push(moofMdat);
    this.emit(REMUX_EVENTS.MEDIA_SEGMENT, 'audio', moofMdat)
  }

  initSilentAudio (dts, duration) {
    const unit = Mp4Remuxer.getSilentFrame(this.audioMeta.channelCount)
    return {
      dts,
      pts: dts,
      cts: 0,
      duration,
      unit,
      size: unit.byteLength,
      originDts: dts,
      type: 'video'
    }
  }

  get videoMeta () {
    return this._context.getInstance('TRACKS').videoTrack.meta
  }
  get audioMeta () {
    return this._context.getInstance('TRACKS').audioTrack.meta
  }

  static getSilentFrame (channelCount) {
    if (channelCount === 1) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80])
    } else if (channelCount === 2) {
      return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80])
    } else if (channelCount === 3) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e])
    } else if (channelCount === 4) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38])
    } else if (channelCount === 5) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38])
    } else if (channelCount === 6) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0])
    }
    return null
  }
}


/***/ }),

/***/ "../xgplayer-utils/index.js":
/*!**********************************!*\
  !*** ../xgplayer-utils/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Context: __webpack_require__(/*! ./src/context */ "../xgplayer-utils/src/context.js").default,

  // Modules from constants
  EVENTS: __webpack_require__(/*! ./src/constants/events */ "../xgplayer-utils/src/constants/events.js").default,
  WORKER_COMMANDS: __webpack_require__(/*! ./src/constants/worker-commands */ "../xgplayer-utils/src/constants/worker-commands.js").default,

  // Modules from env
  sniffer: __webpack_require__(/*! ./src/env/sniffer */ "../xgplayer-utils/src/env/sniffer.js").default,
  isLe: __webpack_require__(/*! ./src/env/isle */ "../xgplayer-utils/src/env/isle.js").default,
  UTF8: __webpack_require__(/*! ./src/env/utf8 */ "../xgplayer-utils/src/env/utf8.js").default,

  // Models
  MediaInfo: __webpack_require__(/*! ./src/models/media-info */ "../xgplayer-utils/src/models/media-info.js").default,
  MediaSample: __webpack_require__(/*! ./src/models/media-sample */ "../xgplayer-utils/src/models/media-sample.js").default,
  MediaSegment: __webpack_require__(/*! ./src/models/media-segment */ "../xgplayer-utils/src/models/media-segment.js").default,
  MediaSegmentList: __webpack_require__(/*! ./src/models/media-segment-list */ "../xgplayer-utils/src/models/media-segment-list.js").default,
  AudioTrackMeta: __webpack_require__(/*! ./src/models/track-meta */ "../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,
  VideoTrackMeta: __webpack_require__(/*! ./src/models/track-meta */ "../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,
  AudioTrackSample: __webpack_require__(/*! ./src/models/track-sample */ "../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,
  VideoTrackSample: __webpack_require__(/*! ./src/models/track-sample */ "../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,

  // Modules from mse
  Mse: __webpack_require__(/*! ./src/mse/index */ "../xgplayer-utils/src/mse/index.js").default,

  // Modules from write
  Stream: __webpack_require__(/*! ./src/write/stream */ "../xgplayer-utils/src/write/stream.js").default,
  Buffer: __webpack_require__(/*! ./src/write/buffer */ "../xgplayer-utils/src/write/buffer.js").default,

  MobileVideo: __webpack_require__(/*! ./src/mobile/mobile-video */ "../xgplayer-utils/src/mobile/mobile-video.js")
};


/***/ }),

/***/ "../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (ResultConstructor) {
  var totalLength = 0;

  for (var _len = arguments.length, arrays = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    arrays[_key - 1] = arguments[_key];
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = arrays[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var arr = _step.value;

      totalLength += arr.length;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var result = new ResultConstructor(totalLength);
  var offset = 0;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = arrays[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _arr = _step2.value;

      result.set(_arr, offset);
      offset += _arr.length;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return result;
};

/***/ }),

/***/ "../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(/*! ./concat */ "../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js");

var _concat2 = _interopRequireDefault(_concat);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = _concat2.default;

/***/ }),

/***/ "../xgplayer-utils/node_modules/webworkify-webpack/index.js":
/*!******************************************************************!*\
  !*** ../xgplayer-utils/node_modules/webworkify-webpack/index.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function webpackBootstrapFunc (modules) {
/******/  // The module cache
/******/  var installedModules = {};

/******/  // The require function
/******/  function __webpack_require__(moduleId) {

/******/    // Check if module is in cache
/******/    if(installedModules[moduleId])
/******/      return installedModules[moduleId].exports;

/******/    // Create a new module (and put it into the cache)
/******/    var module = installedModules[moduleId] = {
/******/      i: moduleId,
/******/      l: false,
/******/      exports: {}
/******/    };

/******/    // Execute the module function
/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/    // Flag the module as loaded
/******/    module.l = true;

/******/    // Return the exports of the module
/******/    return module.exports;
/******/  }

/******/  // expose the modules object (__webpack_modules__)
/******/  __webpack_require__.m = modules;

/******/  // expose the module cache
/******/  __webpack_require__.c = installedModules;

/******/  // identity function for calling harmony imports with the correct context
/******/  __webpack_require__.i = function(value) { return value; };

/******/  // define getter function for harmony exports
/******/  __webpack_require__.d = function(exports, name, getter) {
/******/    if(!__webpack_require__.o(exports, name)) {
/******/      Object.defineProperty(exports, name, {
/******/        configurable: false,
/******/        enumerable: true,
/******/        get: getter
/******/      });
/******/    }
/******/  };

/******/  // define __esModule on exports
/******/  __webpack_require__.r = function(exports) {
/******/    Object.defineProperty(exports, '__esModule', { value: true });
/******/  };

/******/  // getDefaultExport function for compatibility with non-harmony modules
/******/  __webpack_require__.n = function(module) {
/******/    var getter = module && module.__esModule ?
/******/      function getDefault() { return module['default']; } :
/******/      function getModuleExports() { return module; };
/******/    __webpack_require__.d(getter, 'a', getter);
/******/    return getter;
/******/  };

/******/  // Object.prototype.hasOwnProperty.call
/******/  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/  // __webpack_public_path__
/******/  __webpack_require__.p = "/";

/******/  // on error function for async loading
/******/  __webpack_require__.oe = function(err) { console.error(err); throw err; };

  var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE)
  return f.default || f // try to call default if defined to also support babel esmodule exports
}

var moduleNameReqExp = '[\\.|\\-|\\+|\\w|\/|@]+'
var dependencyRegExp = '\\(\\s*(\/\\*.*?\\*\/)?\\s*.*?(' + moduleNameReqExp + ').*?\\)' // additional chars when output.pathinfo is true

// http://stackoverflow.com/a/2593661/130442
function quoteRegExp (str) {
  return (str + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&')
}

function isNumeric(n) {
  return !isNaN(1 * n); // 1 * n converts integers, integers as string ("123"), 1e3 and "1e3" to integers and strings to NaN
}

function getModuleDependencies (sources, module, queueName) {
  var retval = {}
  retval[queueName] = []

  var fnString = module.toString()
  var wrapperSignature = fnString.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/)
  if (!wrapperSignature) return retval
  var webpackRequireName = wrapperSignature[1]

  // main bundle deps
  var re = new RegExp('(\\\\n|\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g')
  var match
  while ((match = re.exec(fnString))) {
    if (match[3] === 'dll-reference') continue
    retval[queueName].push(match[3])
  }

  // dll deps
  re = new RegExp('\\(' + quoteRegExp(webpackRequireName) + '\\("(dll-reference\\s(' + moduleNameReqExp + '))"\\)\\)' + dependencyRegExp, 'g')
  while ((match = re.exec(fnString))) {
    if (!sources[match[2]]) {
      retval[queueName].push(match[1])
      sources[match[2]] = __webpack_require__(match[1]).m
    }
    retval[match[2]] = retval[match[2]] || []
    retval[match[2]].push(match[4])
  }

  // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3
  var keys = Object.keys(retval);
  for (var i = 0; i < keys.length; i++) {
    for (var j = 0; j < retval[keys[i]].length; j++) {
      if (isNumeric(retval[keys[i]][j])) {
        retval[keys[i]][j] = 1 * retval[keys[i]][j];
      }
    }
  }

  return retval
}

function hasValuesInQueues (queues) {
  var keys = Object.keys(queues)
  return keys.reduce(function (hasValues, key) {
    return hasValues || queues[key].length > 0
  }, false)
}

function getRequiredModules (sources, moduleId) {
  var modulesQueue = {
    main: [moduleId]
  }
  var requiredModules = {
    main: []
  }
  var seenModules = {
    main: {}
  }

  while (hasValuesInQueues(modulesQueue)) {
    var queues = Object.keys(modulesQueue)
    for (var i = 0; i < queues.length; i++) {
      var queueName = queues[i]
      var queue = modulesQueue[queueName]
      var moduleToCheck = queue.pop()
      seenModules[queueName] = seenModules[queueName] || {}
      if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue
      seenModules[queueName][moduleToCheck] = true
      requiredModules[queueName] = requiredModules[queueName] || []
      requiredModules[queueName].push(moduleToCheck)
      var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName)
      var newModulesKeys = Object.keys(newModules)
      for (var j = 0; j < newModulesKeys.length; j++) {
        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || []
        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]])
      }
    }
  }

  return requiredModules
}

module.exports = function (moduleId, options) {
  options = options || {}
  var sources = {
    main: __webpack_require__.m
  }

  var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId)

  var src = ''

  Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {
    var entryModule = 0
    while (requiredModules[module][entryModule]) {
      entryModule++
    }
    requiredModules[module].push(entryModule)
    sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'
    src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\n'
  })

  src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);'

  var blob = new window.Blob([src], { type: 'text/javascript' })
  if (options.bare) { return blob }

  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL

  var workerUrl = URL.createObjectURL(blob)
  var worker = new window.Worker(workerUrl)
  worker.objectURL = workerUrl

  return worker
}


/***/ }),

/***/ "../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const LOADER_EVENTS = {
  LADER_START: 'LOADER_START',
  LOADER_DATALOADED: 'LOADER_DATALOADED',
  LOADER_COMPLETE: 'LOADER_COMPLETE',
  LOADER_ERROR: 'LOADER_ERROR'
}

const DEMUX_EVENTS = {
  DEMUX_START: 'DEMUX_START',
  DEMUX_COMPLETE: 'DEMUX_COMPLETE',
  DEMUX_ERROR: 'DEMUX_ERROR',
  METADATA_PARSED: 'METADATA_PARSED',
  VIDEO_METADATA_CHANGE: 'VIDEO_METADATA_CHANGE',
  AUDIO_METADATA_CHANGE: 'AUDIO_METADATA_CHANGE',
  MEDIA_INFO: 'MEDIA_INFO'
}

const REMUX_EVENTS = {
  REMUX_METADATA: 'REMUX_METADATA',
  REMUX_MEDIA: 'REMUX_MEDIA',
  MEDIA_SEGMENT: 'MEDIA_SEGMENT',
  REMUX_ERROR: 'REMUX_ERROR',
  INIT_SEGMENT: 'INIT_SEGMENT'
}

const MSE_EVENTS = {
  SOURCE_UPDATE_END: 'SOURCE_UPDATE_END'
}

// hls专有events
const HLS_EVENTS = {
  RETRY_TIME_EXCEEDED: 'RETRY_TIME_EXCEEDED'
}

const ALLEVENTS = Object.assign({}, LOADER_EVENTS, DEMUX_EVENTS, REMUX_EVENTS, MSE_EVENTS, HLS_EVENTS)

const FlvAllowedEvents = []
const HlsAllowedEvents = []

for (let key in ALLEVENTS) {
  if (ALLEVENTS.hasOwnProperty(key)) {
    FlvAllowedEvents.push(ALLEVENTS[key])
  }
}

for (let key in ALLEVENTS) {
  if (ALLEVENTS.hasOwnProperty(key)) {
    HlsAllowedEvents.push(ALLEVENTS[key])
  }
}

/* harmony default export */ __webpack_exports__["default"] = ({
  ALLEVENTS,
  HLS_EVENTS,
  REMUX_EVENTS,
  DEMUX_EVENTS,
  MSE_EVENTS,
  LOADER_EVENTS,
  FlvAllowedEvents,
  HlsAllowedEvents
});


/***/ }),

/***/ "../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
  \**********************************************************/
/*! exports provided: CONTEXT_COMOMANDS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTEXT_COMOMANDS", function() { return CONTEXT_COMOMANDS; });
const CONTEXT_COMOMANDS = {
  ON: 'on',
  ONCE: 'once',
  OFF: 'off',
  EMIT: 'emit',
  DESTROY: 'destroy'
}


/***/ }),

/***/ "../xgplayer-utils/src/context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/context.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_media_info__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models/media-info */ "../xgplayer-utils/src/models/media-info.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ "../../node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);



const DIRECT_EMIT_FLAG = '__TO__'

class Context {
  constructor (allowedEvents = []) {
    this._emitter = new events__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]()
    this._instanceMap = {} // 所有的解码流程实例
    this._clsMap = {} // 构造函数的map
    this._inited = false
    this.mediaInfo = new _models_media_info__WEBPACK_IMPORTED_MODULE_0__["default"]()
    this.allowedEvents = allowedEvents
    this._hooks = {} // 注册在事件前/后的钩子，例如 before('DEMUX_COMPLETE')
  }

  /**
   * 从上下文中获取解码流程实例，如果没有实例，构造一个
   * @param tag
   * @param args
   * @returns {*}
   */
  getInstance (tag) {
    if (this._instanceMap[tag]) {
      return this._instanceMap[tag]
    } else {
      // throw new Error(`${tag}实例尚未初始化`)
      return null
    }
  }

  /**
   * 初始化具体实例
   * @param tag
   * @param args
   */
  initInstance (tag, ...args) {
    if (this._clsMap[tag]) {
      const newInstance = new this._clsMap[tag](...args)
      this._instanceMap[tag] = newInstance
      if (newInstance.init) {
        newInstance.init() // TODO: lifecircle
      }
      return newInstance
    } else {
      throw new Error(`${tag}未在context中注册`)
    }
  }

  /**
   * 避免大量的initInstance调用，初始化所有的组件
   * @param config
   */
  init (config) {
    if (this._inited) {
      return
    }
    for (let tag in this._clsMap) {
      // if not inited, init an instance
      if (this._clsMap.hasOwnProperty(tag) && !this._instanceMap[tag]) {
        this.initInstance(tag, config)
      }
    }
    this._inited = true
  }

  /**
   * 注册一个上下文流程，提供安全的事件发送机制
   * @param tag
   * @param cls
   */
  registry (tag, cls) {
    const emitter = this._emitter
    const checkMessageName = this._isMessageNameValid.bind(this)
    const self = this
    const enhanced = class extends cls {
      constructor (...args) {
        super(...args)
        this.listeners = {}
        this.onceListeners = {}
        this.TAG = tag
        this._context = self
      }

      on (messageName, callback) {
        checkMessageName(messageName)

        if (this.listeners[messageName]) {
          this.listeners[messageName].push(callback)
        } else {
          this.listeners[messageName] = [callback]
        }

        emitter.on(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback) // 建立定向通信监听
        return emitter.on(messageName, callback)
      }

      /**
       * 在某个事件触发前执行
       * @param messageName
       * @param callback
       */
      before (messageName, callback) {
        checkMessageName(messageName)
        if (self._hooks[messageName]) {
          self._hooks[messageName].push(callback)
        } else {
          self._hooks[messageName] = [callback]
        }
      }

      once (messageName, callback) {
        checkMessageName(messageName)

        if (this.onceListeners[messageName]) {
          this.onceListeners[messageName].push(callback)
        } else {
          this.onceListeners[messageName] = [callback]
        }

        emitter.once(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback)
        return emitter.once(messageName, callback)
      }

      emit (messageName, ...args) {
        checkMessageName(messageName)

        const beforeList = self._hooks[messageName]
        if (beforeList) {
          for (let i = 0, len = beforeList.length; i < len; i++) {
            const callback = beforeList[i]
            callback()
          }
        }
        return emitter.emit(messageName, ...args)
      }

      /**
       * 定向发送给某个组件单例的消息
       * @param messageName
       * @param args
       */
      emitTo (tag, messageName, ...args) {
        checkMessageName(messageName)

        return emitter.emit(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, ...args)
      }

      off (messageName, callback) {
        checkMessageName(messageName)
        return emitter.off(messageName, callback)
      }

      removeListeners () {
        const hasOwn = Object.prototype.hasOwnProperty.bind(this.listeners)

        for (let messageName in this.listeners) {
          if (hasOwn(messageName)) {
            const callbacks = this.listeners[messageName] || []
            for (let i = 0; i < callbacks.length; i++) {
              const callback = callbacks[i]
              emitter.off(messageName, callback)
              emitter.off(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback)
            }
          }
        }

        for (let messageName in this.onceListeners) {
          if (hasOwn(messageName)) {
            const callbacks = this.onceListeners[messageName] || []
            for (let i = 0; i < callbacks.length; i++) {
              const callback = callbacks[i]
              emitter.off(messageName, callback)
              emitter.off(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback)
            }
          }
        }
      }

      /**
       * 在组件销毁时，默认将它注册的事件全部卸载，确保不会造成内存泄漏
       */
      destroy () {
        // step1 unlisten events
        this.removeListeners()

        // step2 release from context
        delete self._instanceMap[tag]
        if (super.destroy) {
          super.destroy()
        }
      }
    }
    this._clsMap[tag] = enhanced

    /**
     * get instance immediately
     * e.g const instance = context.registry(tag, Cls)(config)
     * */
    return (...args) => {
      return this.initInstance(tag, ...args)
    }
  }

  /**
   * 对存在的实例进行
   */
  destroyInstances () {
    Object.keys(this._instanceMap).forEach((tag) => {
      if (this._instanceMap[tag].destroy) {
        this._instanceMap[tag].destroy()
      }
    })
  }

  /**
   * 编解码流程无需关注事件的解绑
   */
  destroy () {
    this._emitter = null
    this.allowedEvents = []
    this._clsMap = null
    this._context = null
    this.destroyInstances()
  }

  /**
   * 对信道进行收拢
   * @param messageName
   * @private
   */
  _isMessageNameValid (messageName) {
    if (!this.allowedEvents.indexOf(messageName) < 0) {
      throw new Error(`unregistered message name: ${messageName}`)
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Context);


/***/ }),

/***/ "../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isle.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const le = (function () {
  const buf = new ArrayBuffer(2);
  (new DataView(buf)).setInt16(0, 256, true) // little-endian write
  return (new Int16Array(buf))[0] === 256 // platform-spec read, if equal then LE
})()

/* harmony default export */ __webpack_exports__["default"] = (le);


/***/ }),

/***/ "../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const le = (function () {
  const buf = new ArrayBuffer(2);
  (new DataView(buf)).setInt16(0, 256, true) // little-endian write
  return (new Int16Array(buf))[0] === 256 // platform-spec read, if equal then LE
})()

const sniffer = {
  get device () {
    let r = sniffer.os;
    return r.isPc ? 'pc' : r.isTablet ? 'tablet' : 'mobile';
  },
  get browser () {
    let ua = navigator.userAgent.toLowerCase();
    let reg = {
      ie: /rv:([\d.]+)\) like gecko/,
      firfox: /firefox\/([\d.]+)/,
      chrome: /chrome\/([\d.]+)/,
      opera: /opera.([\d.]+)/,
      safari: /version\/([\d.]+).*safari/
    };
    return [].concat(Object.keys(reg).filter(key => reg[key].test(ua)))[0];
  },
  get os () {
    let ua = navigator.userAgent
    let isWindowsPhone = /(?:Windows Phone)/.test(ua)
    let isSymbian = /(?:SymbianOS)/.test(ua) || isWindowsPhone;
    let isAndroid = /(?:Android)/.test(ua);
    let isFireFox = /(?:Firefox)/.test(ua);
    let isTablet = /(?:iPad|PlayBook)/.test(ua) || (isAndroid && !/(?:Mobile)/.test(ua)) || (isFireFox && /(?:Tablet)/.test(ua));
    let isPhone = /(?:iPhone)/.test(ua) && !isTablet;
    let isPc = !isPhone && !isAndroid && !isSymbian;
    return {
      isTablet,
      isPhone,
      isAndroid,
      isPc,
      isSymbian,
      isWindowsPhone,
      isFireFox
    };
  },

  get isLe () {
    return le
  }
};

/* harmony default export */ __webpack_exports__["default"] = (sniffer);


/***/ }),

/***/ "../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/utf8.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class UTF8 {
  static decode (uint8array) {
    const out = [];
    const input = uint8array;
    let i = 0;
    const length = uint8array.length;

    while (i < length) {
      if (input[i] < 0x80) {
        out.push(String.fromCharCode(input[i]));
        ++i;
        continue;
      } else if (input[i] < 0xC0) {
        // fallthrough
      } else if (input[i] < 0xE0) {
        if (UTF8._checkContinuation(input, i, 1)) {
          const ucs4 = (input[i] & 0x1F) << 6 | (input[i + 1] & 0x3F);
          if (ucs4 >= 0x80) {
            out.push(String.fromCharCode(ucs4 & 0xFFFF));
            i += 2;
            continue;
          }
        }
      } else if (input[i] < 0xF0) {
        if (UTF8._checkContinuation(input, i, 2)) {
          const ucs4 = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;
          if (ucs4 >= 0x800 && (ucs4 & 0xF800) !== 0xD800) {
            out.push(String.fromCharCode(ucs4 & 0xFFFF));
            i += 3;
            continue;
          }
        }
      } else if (input[i] < 0xF8) {
        if (UTF8._checkContinuation(input, i, 3)) {
          let ucs4 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 |
                    (input[i + 2] & 0x3F) << 6 | (input[i + 3] & 0x3F);
          if (ucs4 > 0x10000 && ucs4 < 0x110000) {
            ucs4 -= 0x10000;
            out.push(String.fromCharCode((ucs4 >>> 10) | 0xD800));
            out.push(String.fromCharCode((ucs4 & 0x3FF) | 0xDC00));
            i += 4;
            continue;
          }
        }
      }
      out.push(String.fromCharCode(0xFFFD));
      ++i;
    }

    return out.join('');
  }

  static _checkContinuation (uint8array, start, checkLength) {
    let array = uint8array;
    if (start + checkLength < array.length) {
      while (checkLength--) {
        if ((array[++start] & 0xC0) !== 0x80) {
          return false;
        }
      }
      return true;
    } else {
      return false;
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (UTF8);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/audio-context.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/audio-context.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class AudioCtx {
  constructor (config) {
    this.config = Object.assign({}, config);
    let AudioContext =  window.AudioContext || window.webkitAudioContext;
    this.context = new AudioContext();
    this.gainNode = this.context.createGain();
    this.gainNode.connect(this.context.destination);
    this.meta = undefined;
    this.samples = [];
    this.preloadTime = this.config.preloadTime || 3;
    this.duration = 0;

    this._currentBuffer = undefined;
    this._nextBuffer = undefined;
    this._lastpts = undefined;
    this._preDecode = [];
    this._currentTime = 0;
    this._decoding = false;
    
    // 记录外部传输的状态
    this._played = false;
  }

  get currentTime() {
    return this._currentTime;
  }

  decodeAudio (audioTrack) {
    let {samples} = audioTrack;
    let data = samples;
    audioTrack.samples = [];
    this.setAudioData(data); 
  }
  setAudioData (data) {
    for(let i = 0;i < data.length; i++) {
      data[i].pts = (data[i].pts === undefined) ? data[i].dts : data[i].pts;
      this._preDecode.push(data[i]);
    }
    if(this._preDecode.length > 0) {
      if(this._lastpts === undefined) {
        this._lastpts = this._preDecode[0].pts;
      }
      if((this._preDecode[this._preDecode.length - 1].pts - this._lastpts) / 1000 > this.preloadTime) {
        this.decodeAAC();
      }
    }
  }

  decodeAAC() {
    if(this._decoding) {
      return;
    }
    this._decoding = true;
    let data = this._preDecode;
    let samples = [];
    let _this = this;
    let sample = data.shift();
    while(sample) {
      let sampleData = AudioCtx.getAACData(this.meta, sample)
      samples.push(sampleData);
      this._lastpts = sample.pts;
      sample = data.shift()
    }
    let buffer = AudioCtx.combileData(samples);
    try {
      this.context.decodeAudioData(buffer.buffer, function(buffer) {
        let audioSource = _this.context.createBufferSource();
        audioSource.buffer = buffer;
        audioSource.onended = _this.onSourceEnded.bind(_this);
        _this.samples.push({
          time: _this.duration,
          duration: buffer.duration,
          data: audioSource
        })

        _this.duration += buffer.duration;

        if(!_this._currentBuffer) {
          _this._currentBuffer = _this.getTimeBuffer(_this.currentTime);

          if(_this._played) {
            _this.play();
          }
        }

        if(!_this._nextBuffer && _this._currentBuffer) {
          _this._nextBuffer = _this.getTimeBuffer(_this.currentTime + _this._currentBuffer.duration);
        }
        _this._decoding = false;

        if((_this._preDecode.length > 0 && _this._preDecode[_this._preDecode.length - 1].pts - _this._lastpts) / 1000 >= _this.preloadTime) {
          _this.decodeAAC();
        }
      })
    } catch(err) {
      console.error(err);
    }
  }

  onSourceEnded() {
    if(!this._nextBuffer || !this._played) {
      return;
    }
    let audioSource = this._nextBuffer.data;
    audioSource.start();
    audioSource.connect(this.gainNode);
    this._currentBuffer = this._nextBuffer;
    this._currentTime = this._currentBuffer.time;
    this._nextBuffer = this.getTimeBuffer(this.currentTime);
    if(this._currentBuffer) {
      this._nextBuffer = this.getTimeBuffer(this.currentTime + this._currentBuffer.duration);
    }
  }

  play() {
    this._played = true;
    if(!this._currentBuffer) {
      return;
    }
    let audioSource = this._currentBuffer.data;
    audioSource.connect(this.gainNode);
    audioSource.start();
  }

  getTimeBuffer(time) {
    let ret;
    for(let i = 0; i < this.samples.length; i++) {
      let sample = this.samples[i]
      if(sample.time <= time && (sample.time + sample.duration) > time) {
        ret = sample;
        break;
      }
    }
    return ret;
  }

  setAudioMetaData(meta) {
    this.meta = meta;
  }

  static getAACData(meta, sample) {
    let buffer = new Uint8Array(sample.data.byteLength + 7);
    let adts = AudioCtx.getAdts(meta, sample.data);
    buffer.set(adts);
    buffer.set(sample.data, 7);
    return buffer;
  }

  static combileData(samples) {
    // get length
    let length = 0;
    for(let i = 0,k = samples.length; i < k; i++) {
      length += samples[i].byteLength;
    }
    
    let ret = new Uint8Array(length);
    let offset = 0;
    // combile data;
    for(let i = 0,k = samples.length; i < k; i++) {
      ret.set(samples[i], offset);
      offset += samples[i].byteLength;
    }
    return ret;
  }

  static getAdts(meta, data) {
    let adts = new Uint8Array(7);
    
    // 设置同步位 0xfff 12bit 
    adts[0] = 0xff;
    adts[1] = 0xf0;

    // Object data (没什么人用MPEG-2了，HLS和FLV也全是MPEG-4，这里直接0)  1bit 
    // Level always 00 2bit 
    // CRC always 1 1bit 
    adts[1] = adts[1] | 0x01;

    // profile 2bit
    adts[2] = 0xc0 & ((meta.objectType-1) << 6);

    //sampleFrequencyIndex
    adts[2] = adts[2] | (0x3c & (meta.sampleRateIndex << 2))

    //private bit 0 1bit
    // chanel configuration 3bit
    adts[2] = adts[2] | (0x01 & meta.channelCount >> 2);
    adts[3] = 0xc0 & (meta.channelCount << 6);

    // original_copy: 0 1bit
    // home: 0 1bit

    // adts_variable_header()
    // copyrighted_id_bit 0 1bit
    // copyrighted_id_start 0 1bit

    // aac_frame_length 13bit;
    let aacframelength = data.byteLength + 7;

    adts[3] = adts[3] | (0x03 & aacframelength >> 11);
    adts[4] = 0xff & (aacframelength >> 3);
    adts[5] = 0xe0 & (aacframelength << 5);

    // adts_buffer_fullness 0x7ff 11bit
    adts[5] = adts[5] | 0x1f
    adts[6] = 0xfc;

    // number_of_raw_data_blocks_in_frame 0 2bit;
    return adts;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (AudioCtx);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/mobile-video.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/mobile-video.js ***!
  \****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _video_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./video-context */ "../xgplayer-utils/src/mobile/video-context.js");
/* harmony import */ var _audio_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./audio-context */ "../xgplayer-utils/src/mobile/audio-context.js");
/* harmony import */ var _ticker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ticker */ "../xgplayer-utils/src/mobile/ticker.js");




/**
 * 音画同步调和器
 */
class AVReconciler {
  constructor (props) {
    this.aCtx = props.aCtx;
    this.vCtx = props.vCtx;
    this._ticker = null;
    this.onTick = this.onTick.bind(this)

    this.init()
  }

  init () {
    this._ticker = new (Object(_ticker__WEBPACK_IMPORTED_MODULE_2__["getTicker"])())({ interval: 100 });
    this._ticker.nextTick(this.onTick)
  }

  onTick () {
    this._ticker.nextTick(this.onTick)
  }

  doReconcile () {
    const vCurTime = this.vCtx.currentTime;
    const aCurTime = this.aCtx.currentTime;
    const gap = vCurTime - aCurTime;
    if (gap > 0.1) { // audio delayed for more than 100ms
      this.vCtx.pause()
      setTimeout(() => {
        this.vCtx.play()
      }, gap * 1000)
    } else if (gap < -0.02) {
      this.vCtx.currentTime
    }
  }
}

// eslint-disable-next-line no-undef
class MobileVideo extends HTMLElement {
  constructor (config) {
    super();
    let _this = this;
    this.vCtx = new _video_context__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.aCtx = new _audio_context__WEBPACK_IMPORTED_MODULE_1__["default"](config);

    this.vCtx.oncanplay = function () {
      _this.appendChild(_this.vCtx.canvas);
      console.log('canplay', _this);
      // eslint-disable-next-line no-undef
      _this.dispatchEvent(new Event('canplay'));
    }
    this.historyTime = 0;
  }

  destroy () {

  }

  onDemuxComplete (videoTrack, audioTrack) {
    this.aCtx.decodeAudio(audioTrack);
    this.vCtx.decodeVideo(videoTrack);
  }

  setAudioMeta (meta) {
    this.aCtx.setAudioMetaData(meta);
  }

  setVideoMeta (meta) {
    this.vCtx.setVideoMetaData(meta);
  }

  get currentTime () {

  }

  play () {
    this.aCtx.play();
    this.vCtx.play();
  }
}
// eslint-disable-next-line no-undef
customElements.define('mobile-video', MobileVideo);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/sourcebuffer.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/sourcebuffer.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class SourceBuffer {
  constructor (config) {
    this.config = Object.assign({}, config);
    this.type = this.config.type;
    this.buffer = [];
    this.currentGop = undefined;
    this._lastGet = undefined;
  }

  push (frame) {
    if (this.type === 'video') {
      if (frame.isKeyframe) {
        let currentGop = {
          samples: [],
          start: frame.dts,
          end: frame.dts,
          nextGop: undefined
        };
        if (this.currentGop) {
          this.currentGop.nextGop = currentGop;
        }
        this.currentGop = currentGop;
        this.buffer.push(this.currentGop);
      }

      if (this.currentGop) {
        this.currentGop.samples.push(frame);

        if (frame.dts < this.currentGop.start) {
          this.currentGop.start = frame.dts;
        }

        if (frame.dts > this.currentGop.end) {
          this.currentGop.end = frame.dts;
        }
      }
    }
  }

  get (time) {
    if (this.type === 'video') {
      if (this.buffer.length < 1) {
        return;
      }

      if (time === undefined) {
        let sample = this._getNext();
        return sample;
      }
    }
  }

  _getNext () {
    if (!this._lastGet) {
      let gop = this.buffer[0];
      if (gop.samples.length < 1) {
        return
      }

      this._lastGet = {
        gop,
        index: 0
      }
      return gop.samples[0];
    } else {
      let gop = this._lastGet.gop;
      let sample = gop.samples[this._lastGet.index + 1];
      if (sample) {
        this._lastGet.index = this._lastGet.index + 1;
        return sample;
      } else {
        gop = gop.nextGop;
        if (!gop || gop.samples.length < 1) {
          return;
        }
        sample = gop.samples[0];
        this._lastGet = {
          gop,
          index: 0
        }
        return sample;
      }
    }
  }

  remove (start, end) {
    if (this.buffer.length < 0) {
      return;
    }

    let i = 0;
    let gop = this.buffer[0];
    while (gop) {
      if (gop.end < end && gop.start >= start) {
        delete this.buffer[i];
        gop = this.buffer[i];
      } else {
        i += 1;
        gop = this.buffer[i];
      }
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (SourceBuffer);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/ticker.js":
/*!**********************************************!*\
  !*** ../xgplayer-utils/src/mobile/ticker.js ***!
  \**********************************************/
/*! exports provided: getTicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTicker", function() { return getTicker; });
/**
 * @author fuyuhao@bytedance.com
 */

class Ticker {
  constructor (options) {
    this.options = Object.assign({}, options || {}, {
      interval: 40
    })

    this.callbacks = []
  }

  nextTick(...callbacks) {
    this.callbacks = callbacks
  }

  onTick () {
    for (let i = 0, len = this.callbacks.length; i < len; i++) {
      const callback = this.callbacks[i]
      callback()
    }
  }

  setInterval (interval) {
    this.options.interval = interval
  }
}

/**
 * ticker use requestAnimationFrame
 */
class RafTicker extends Ticker {
  constructor (props) {
    super(props);
    this.prev = null;
    this.timerId = null
    this._subTimerId = null
  }

  nexTick (...callbacks) {
    super.nextTick(...callbacks)
    const tickFunc = RafTicker.getTickFunc()
    tickFunc(this.tick.bind(this))
  }

  tick (timestamp) {
    if (!this.prev) {
      this.prev = timestamp
    }

    const { interval } = this.options;
    const { getTickFunc } = RafTicker;

    const tickFunc = getTickFunc()
    const rest = (this.prev + interval) - timestamp

    const nextTick = () => {
      this.timerId = tickFunc(this.tick.bind(this))
    }

    const runCallback = () => {
      this.prev = null;
      this.onTick()
    }

    if (rest <= 0) {
      if (this._subTimerId) {
        window.clearTimeout(this._subTimerId);
        this._subTimerId = null
      }
      runCallback()
    } else if (rest <= 10) {
      this._subTimerId = setTimeout(() => {
        runCallback()
      }, rest)
    } else {
      nextTick()
    }
  }

  stop () {
    if (this.timerId) {
      const cancelFunc = RafTicker.getCancelFunc()

      cancelFunc(this.timerId)
    }
  }

  static getTickFunc () {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame
  }

  static getCancelFunc () {
    return window.cancelAnimationFrame || window.webkitCancelAnimationFrame
  }

  static isSupported () {
    return RafTicker.getTickFunc() !== undefined
  }
}

/**
 * use setTimeout for browsers without raf support
 */
class TimeoutTicker extends Ticker {
  constructor(config) {
    super(config)
    this.timeoutId = null

  }

  nextTick (...callbacks) {
    super.nextTick(...callbacks)
    this.timeoutId = window.setTimeout(() => {
      this.onTick();
    }, this.options.interval)
  }

  stop () {
    if (this.timeoutId) {
      window.clearTimeout(this.timeoutId)
    }
  }

}

/**
 * 返回Ticker构造函数
 * @returns {Ticker}
 */
const getTicker = () => {
  if (RafTicker.isSupported()) {
    return RafTicker
  } else {
    return TimeoutTicker
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/mobile/video-context.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/video-context.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webworkify-webpack */ "../xgplayer-utils/node_modules/webworkify-webpack/index.js");
/* harmony import */ var webworkify_webpack__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _write_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../write/stream */ "../xgplayer-utils/src/write/stream.js");
/* harmony import */ var _xgplayer_codec_src_h264_nalunit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../xgplayer-codec/src/h264/nalunit */ "../xgplayer-codec/src/h264/nalunit/index.js");
/* harmony import */ var _yuv_canvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./yuv-canvas */ "../xgplayer-utils/src/mobile/yuv-canvas.js");
/* harmony import */ var _sourcebuffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sourcebuffer */ "../xgplayer-utils/src/mobile/sourcebuffer.js");





class VideoCanvas {
  constructor (config) {
    this.config = Object.assign({}, config);
    this.canvas = this.config.canvas ? this.config.canvas : document.createElement('canvas');
    this.source = new _sourcebuffer__WEBPACK_IMPORTED_MODULE_4__["default"]({type: 'video'});
    this.preloadTime = this.config.preloadTime || 3;
    this.oncanplay = undefined;
    this.meta = undefined;
    this.readyStatus = 0;
    this.paused = true;
    this.count = 0;
    this.currentTime = 0;
    this.lastPlayed = 0;

    this._decoderInited = false;
    this._avccpushed = false;
    this._decodedFrames = {};
    this._lastSampleDts = undefined;
    this._baseDts = undefined;
    this.initWasmWorker();
  }

  play () {
    this.paused = false;
    this._onTimer();
  }

  pause () {
    this.paused = true;
  }

  seek (time) {
    this.currentTime = time;
  }

  initWasmWorker () {
    let _this = this;
    this.wasmworker = webworkify_webpack__WEBPACK_IMPORTED_MODULE_0___default()(/*require.resolve*/(/*! ./worker.js */ "../xgplayer-utils/src/mobile/worker.js"));
    this.wasmworker.postMessage({
      msg: 'init'
    })
    this.wasmworker.addEventListener('message', msg => {
      switch (msg.data.msg) {
        case 'DECODER_READY':
          _this._decoderInited = true;
          break;
        case 'DECODED':
          this._onDecoded(msg.data);
          break;
      }
    });
  }

  setVideoMetaData (meta) {
    this.meta = meta;
    if (!this._decoderInited) {
      return
    }
    this._avccpushed = true;
    let data = new Uint8Array(meta.sps.byteLength + 4);
    data.set([0, 0, 0, 1])
    data.set(meta.sps, 4);
    this.wasmworker.postMessage({
      msg: 'decode',
      data: data
    })

    data = new Uint8Array(meta.pps.byteLength + 4);
    data.set([0, 0, 0, 1])
    data.set(meta.pps, 4);
    this.wasmworker.postMessage({
      msg: 'decode',
      data: data
    })

    if (!this.yuvCanvas) {
      let config = Object.assign({meta, canvas: this.canvas}, this.config);
      this.yuvCanvas = new _yuv_canvas__WEBPACK_IMPORTED_MODULE_3__["default"](config);
    }
    this.readyStatus = 1;
  }

  decodeVideo (videoTrack) {
    if (!this._decoderInited) {
      return
    }

    if (!this._avccpushed) {
      this.setVideoMetaData(this.meta);
    }
    let { samples } = videoTrack;
    let sample = samples.shift();

    while (sample) {
      if (!this._baseDts) {
        this._baseDts = sample.dts;
      }
      this.source.push(sample);
      sample = samples.shift();
    }

    this._preload();
  }

  _preload () {
    if (!this._lastSampleDts || this._lastSampleDts - this._baseDts < this.currentTime + this.preloadTime * 1000) {
      let sample = this.source.get();
      if (sample) {
        this._lastSampleDts = sample.dts;
        this._analyseNal(sample);
      }

      while (sample && this._lastSampleDts - this._baseDts < this.currentTime + this.preloadTime * 1000) {
        sample = this.source.get();
        if (sample) {
          this._analyseNal(sample);
          this._lastSampleDts = sample.dts;
        }
      }
    }
  }

  _analyseNal (sample) {
    let nals = _xgplayer_codec_src_h264_nalunit__WEBPACK_IMPORTED_MODULE_2__["default"].getAvccNals(new _write_stream__WEBPACK_IMPORTED_MODULE_1__["default"](sample.data.buffer));

    let length = 0;
    for (let i = 0; i < nals.length; i++) {
      let nal = nals[i];
      length += nal.body.byteLength + 4;
    }
    let offset = 0;
    let data = new Uint8Array(length);
    for (let i = 0; i < nals.length; i++) {
      let nal = nals[i];
      data.set([0, 0, 0, 1], offset);
      offset += 4;
      data.set(new Uint8Array(nal.body), offset);
      offset += nal.body.byteLength;
    }
    this.wasmworker.postMessage({
      msg: 'decode',
      data: data,
      info: {
        dts: sample.dts,
        pts: sample.pts ? sample.pts : sample.dts + sample.cts,
        key: sample.isKeyframe
      }
    })
  }

  _onDecoded (data) {
    let {dts} = data.info
    this._decodedFrames[dts] = data;
  }

  _onTimer () {
    if (this.paused) {
      return;
    }
    let nextTime = 1000 / 60;
    if (this.meta) {
      if (this.meta.frameRate && this.meta.frameRate.fixed && this.meta.frameRate.fps) {
        nextTime = Math.ceil(1000 / this.meta.frameRate.fps);
      }
      let frameTimes = Object.keys(this._decodedFrames);
      if (frameTimes.length > 0) {
        this.currentTime += nextTime;
        let frameTime = -1;
        for (let i = 0; i < frameTimes.length && frameTimes[i] - this._baseDts <= this.currentTime; i++) {
          frameTime = frameTimes[i];
        }
        let frame = this._decodedFrames[frameTime];
        if (frame) {
          if (this.oncanplay && this.readyStatus < 4) {
            this.oncanplay();
            this.readyStatus = 4;
          }
          this.yuvCanvas.render(frame.buffer, frame.width, frame.height);
          delete this._decodedFrames[frameTime];
        }
      }
    }
    this._cleanBuffer();
    setTimeout(this._onTimer.bind(this), nextTime);
  }

  _cleanBuffer () {
    this.source.remove(0, this.currentTime);
  }
}
/* harmony default export */ __webpack_exports__["default"] = (VideoCanvas);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/worker.js":
/*!**********************************************!*\
  !*** ../xgplayer-utils/src/mobile/worker.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

const MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;
var Decoder = function (self) {
  this.inited = false;
  this.self = self;
  this.infolist = {};
  self.par_broadwayOnBroadwayInited = this.broadwayOnBroadwayInited.bind(this);
  self.par_broadwayOnPictureDecoded = this.broadwayOnPictureDecoded.bind(this);
}

Decoder.prototype.toU8Array = function (ptr, length) {
  return this.self.HEAPU8.subarray(ptr, ptr + length);
}

Decoder.prototype.init = function () {
  Module._broadwayInit();
  this.streamBuffer = this.toU8Array(Module._broadwayCreateStream(MAX_STREAM_BUFFER_LENGTH), MAX_STREAM_BUFFER_LENGTH);
}

Decoder.prototype.broadwayOnPictureDecoded = function (offset, width, height, infoid) {
  let info = Object.assign({}, this.infolist[infoid]);
  let data = this.toU8Array(offset, (width * height * 3) / 2);
  this.infolist[infoid] = null;
  let datetemp = new Uint8Array(data.length);
  datetemp.set(data);
  let buffer = datetemp.buffer;
  this.self.postMessage({
    msg: 'DECODED',
    width,
    height,
    info,
    buffer
  }, [buffer]);
}

Decoder.prototype.broadwayOnBroadwayInited = function () {
  this.inited = true;
  this.self.postMessage({msg: 'DECODER_READY'});
}

Decoder.prototype.decode = function (data, info) {
  let time = parseInt(new Date().getTime());
  let infoid = time - (Math.floor(time / 10e9) * 10e9);
  this.infolist[infoid] = info;
  this.streamBuffer.set(data);
  Module._broadwayPlayStream(data.length, infoid);
}

var decoder;

function onPostRun () {
  decoder = new Decoder(this);
  decoder.init();
}

function init () {
  self.importScripts('http://10.95.49.41:9090/examples/flv/decoder.js');
  addOnPostRun(onPostRun.bind(self));
}

module.exports = function (self) {
  self.addEventListener('message', function (e) {
    var data = e.data;
    if (!data.msg) {
      self.postMessage({
        msg: 'ERROR:invalid message'
      })
    } else {
      switch (data.msg) {
        case 'init':
          init(self)
          break;
        case 'decode':
          decoder.decode(data.data, data.info);
          break;
        default:
          break;
      }
    }
  }, false);
}


/***/ }),

/***/ "../xgplayer-utils/src/mobile/yuv-canvas.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/mobile/yuv-canvas.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class YUVCanvas {
  constructor (configs) {
    this.configs = Object.assign({}, configs);
    this.canvas = this.configs.canvas;
    this.meta = Object.assign({}, this.configs.meta);
    this.chroma = this.meta.chromaFormat;
    this.height = this.meta.presentHeight;
    this.width = this.meta.presentWidth;
    this.canvas.width = this.width;
    this.canvas.height = this.height;
    this.canvas.style.width = '100%';
    this.canvas.style.height = '100%';
    this._initContextGL();
    if (this.contextGL) {
      this._initProgram();
      this._initBuffers();
      this._initTextures();
    };
  }

  _initContextGL () {
    var canvas = this.canvas;
    var gl = null;

    var validContextNames = ['webgl', 'experimental-webgl', 'moz-webgl', 'webkit-3d'];
    var nameIndex = 0;

    while (!gl && nameIndex < validContextNames.length) {
      var contextName = validContextNames[nameIndex];

      try {
        if (this.contextOptions) {
          gl = canvas.getContext(contextName, this.contextOptions);
        } else {
          gl = canvas.getContext(contextName);
        };
      } catch (e) {
        gl = null;
      }

      if (!gl || typeof gl.getParameter !== 'function') {
        gl = null;
      }

      ++nameIndex;
    };

    this.contextGL = gl;
  };

  _initProgram () {
    var gl = this.contextGL;

    // vertex shader is the same for all types
    var vertexShaderScript;
    var fragmentShaderScript;
    if (this.chroma === 420) {
      vertexShaderScript = [
        'attribute vec4 vertexPos;',
        'attribute vec4 texturePos;',
        'attribute vec4 uTexturePos;',
        'attribute vec4 vTexturePos;',
        'varying vec2 textureCoord;',
        'varying vec2 uTextureCoord;',
        'varying vec2 vTextureCoord;',

        'void main()',
        '{',
        '  gl_Position = vertexPos;',
        '  textureCoord = texturePos.xy;',
        '  uTextureCoord = uTexturePos.xy;',
        '  vTextureCoord = vTexturePos.xy;',
        '}'
      ].join('\n');

      fragmentShaderScript = [
        'precision highp float;',
        'varying highp vec2 textureCoord;',
        'varying highp vec2 uTextureCoord;',
        'varying highp vec2 vTextureCoord;',
        'uniform sampler2D ySampler;',
        'uniform sampler2D uSampler;',
        'uniform sampler2D vSampler;',
        'uniform mat4 YUV2RGB;',

        'void main(void) {',
        '  highp float y = texture2D(ySampler,  textureCoord).r;',
        '  highp float u = texture2D(uSampler,  uTextureCoord).r;',
        '  highp float v = texture2D(vSampler,  vTextureCoord).r;',
        '  gl_FragColor = vec4(y, u, v, 1) * YUV2RGB;',
        '}'
      ].join('\n');
    } else if (this.chroma === 422) {
      vertexShaderScript = [
        'attribute vec4 vertexPos;',
        'attribute vec4 texturePos;',
        'varying vec2 textureCoord;',

        'void main()',
        '{',
        '  gl_Position = vertexPos;',
        '  textureCoord = texturePos.xy;',
        '}'
      ].join('\n');

      fragmentShaderScript = [
        'precision highp float;',
        'varying highp vec2 textureCoord;',
        'uniform sampler2D sampler;',
        'uniform highp vec2 resolution;',
        'uniform mat4 YUV2RGB;',

        'void main(void) {',

        '  highp float texPixX = 1.0 / resolution.x;',
        '  highp float logPixX = 2.0 / resolution.x;', // half the resolution of the texture
        '  highp float logHalfPixX = 4.0 / resolution.x;', // half of the logical resolution so every 4th pixel
        '  highp float steps = floor(textureCoord.x / logPixX);',
        '  highp float uvSteps = floor(textureCoord.x / logHalfPixX);',
        '  highp float y = texture2D(sampler, vec2((logPixX * steps) + texPixX, textureCoord.y)).r;',
        '  highp float u = texture2D(sampler, vec2((logHalfPixX * uvSteps), textureCoord.y)).r;',
        '  highp float v = texture2D(sampler, vec2((logHalfPixX * uvSteps) + texPixX + texPixX, textureCoord.y)).r;',

        // '  highp float y = texture2D(sampler,  textureCoord).r;',
        // '  gl_FragColor = vec4(y, u, v, 1) * YUV2RGB;',
        '  gl_FragColor = vec4(y, u, v, 1.0) * YUV2RGB;',
        '}'
      ].join('\n');
    };

    var YUV2RGB = [
      1.16438, 0.00000, 1.59603, -0.87079,
      1.16438, -0.39176, -0.81297, 0.52959,
      1.16438, 2.01723, 0.00000, -1.08139,
      0, 0, 0, 1
    ];
    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, vertexShaderScript);
    gl.compileShader(vertexShader);
    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
      console.log('Vertex shader failed to compile: ' + gl.getShaderInfoLog(vertexShader));
    }

    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, fragmentShaderScript);
    gl.compileShader(fragmentShader);
    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
      console.log('Fragment shader failed to compile: ' + gl.getShaderInfoLog(fragmentShader));
    }

    var program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      console.log('Program failed to compile: ' + gl.getProgramInfoLog(program));
    }

    gl.useProgram(program);

    var YUV2RGBRef = gl.getUniformLocation(program, 'YUV2RGB');
    gl.uniformMatrix4fv(YUV2RGBRef, false, YUV2RGB);

    this.shaderProgram = program;
  }

  _initBuffers () {
    var gl = this.contextGL;
    var program = this.shaderProgram;

    var vertexPosBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]), gl.STATIC_DRAW);

    var vertexPosRef = gl.getAttribLocation(program, 'vertexPos');
    gl.enableVertexAttribArray(vertexPosRef);
    gl.vertexAttribPointer(vertexPosRef, 2, gl.FLOAT, false, 0, 0);

    var texturePosBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);

    var texturePosRef = gl.getAttribLocation(program, 'texturePos');
    gl.enableVertexAttribArray(texturePosRef);
    gl.vertexAttribPointer(texturePosRef, 2, gl.FLOAT, false, 0, 0);

    this.texturePosBuffer = texturePosBuffer;

    if (this.chroma === 420) {
      var uTexturePosBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, uTexturePosBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);

      var uTexturePosRef = gl.getAttribLocation(program, 'uTexturePos');
      gl.enableVertexAttribArray(uTexturePosRef);
      gl.vertexAttribPointer(uTexturePosRef, 2, gl.FLOAT, false, 0, 0);

      this.uTexturePosBuffer = uTexturePosBuffer;

      var vTexturePosBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, vTexturePosBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);

      var vTexturePosRef = gl.getAttribLocation(program, 'vTexturePos');
      gl.enableVertexAttribArray(vTexturePosRef);
      gl.vertexAttribPointer(vTexturePosRef, 2, gl.FLOAT, false, 0, 0);

      this.vTexturePosBuffer = vTexturePosBuffer;
    };
  };

  _initTextures () {
    var gl = this.contextGL;
    var program = this.shaderProgram;

    if (this.chroma === 420) {
      var yTextureRef = this._initTexture();
      var ySamplerRef = gl.getUniformLocation(program, 'ySampler');
      gl.uniform1i(ySamplerRef, 0);
      this.yTextureRef = yTextureRef;

      var uTextureRef = this._initTexture();
      var uSamplerRef = gl.getUniformLocation(program, 'uSampler');
      gl.uniform1i(uSamplerRef, 1);
      this.uTextureRef = uTextureRef;

      var vTextureRef = this._initTexture();
      var vSamplerRef = gl.getUniformLocation(program, 'vSampler');
      gl.uniform1i(vSamplerRef, 2);
      this.vTextureRef = vTextureRef;
    } else if (this.chroma === 422) {
      // only one texture for 422
      var textureRef = this._initTexture();
      var samplerRef = gl.getUniformLocation(program, 'sampler');
      gl.uniform1i(samplerRef, 0);
      this.textureRef = textureRef;
    };
  }

  _initTexture () {
    var gl = this.contextGL;

    var textureRef = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, textureRef);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.bindTexture(gl.TEXTURE_2D, null);

    return textureRef;
  }

  _drawPictureGL (data, width, height) {
    if (this.chroma === 420) {
      let nWidth = width;
      var ylen = width * height;
      var uvlen = (width / 2) * (height / 2);
      data = new Uint8Array(data);
      let renderData = {
        yData: data.subarray(0, ylen),
        uData: data.subarray(ylen, ylen + uvlen),
        vData: data.subarray(ylen + uvlen, ylen + uvlen + uvlen)
      }
      if (width % 4 > 0) {
        nWidth = width + 4 - (width % 4);
        let yArray = new Uint8Array(nWidth * height);
        for (let i = 0; i < height; i++) {
          yArray.set(renderData.yData.subarray(i * width, (i + 1) * width), i * nWidth);
        }
        renderData.yData = yArray;
      }

      if ((width / 2) % 4 > 0) {
        nWidth = (width / 2) + 4 - ((width / 2) % 4);
        let uArray = new Uint8Array(nWidth * height / 2);
        let vArray = new Uint8Array(nWidth * height / 2);
        for (let i = 0; i < height / 2; i++) {
          uArray.set(renderData.uData.subarray(i * width / 2, (i + 1) * width / 2), i * nWidth);
          vArray.set(renderData.vData.subarray(i * width / 2, (i + 1) * width / 2), i * nWidth);
        }
        renderData.uData = uArray;
        renderData.vData = vArray;
      }
      this._drawPictureGL420(renderData, width, height);
    } else if (this.chroma === 422) {
      data = new Uint8Array(data);
      this._drawPictureGL422(width, height, data);
    }
  }

  _drawPictureGL422 (data, width, height) {
    var gl = this.contextGL;
    var texturePosBuffer = this.texturePosBuffer;

    var textureRef = this.textureRef;

    var dataPerRow = width * 2;
    var rowCnt = height;

    gl.viewport(0, 0, width, height);

    var tTop = 0;
    var tLeft = 0;
    var tBottom = height / rowCnt;
    var tRight = width / (dataPerRow / 2);
    var texturePosValues = new Float32Array([tRight, tTop, tLeft, tTop, tRight, tBottom, tLeft, tBottom]);

    gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, texturePosValues, gl.DYNAMIC_DRAW);

    gl.uniform2f(gl.getUniformLocation(this.shaderProgram, 'resolution'), dataPerRow, height);

    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, textureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, dataPerRow, rowCnt, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, data);

    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  }

  _drawPictureGL420 (data, width, height) {
    var gl = this.contextGL;
    var texturePosBuffer = this.texturePosBuffer;
    var uTexturePosBuffer = this.uTexturePosBuffer;
    var vTexturePosBuffer = this.vTexturePosBuffer;

    var yTextureRef = this.yTextureRef;
    var uTextureRef = this.uTextureRef;
    var vTextureRef = this.vTextureRef;

    var yData = data.yData;
    var uData = data.uData;
    var vData = data.vData;

    var yDataPerRow = width;
    var yRowCnt = height;

    var uDataPerRow = width / 2;
    var uRowCnt = height / 2;

    var vDataPerRow = uDataPerRow;
    var vRowCnt = uRowCnt;
    gl.viewport(0, 0, this.width, this.height);

    var tTop = 0;
    var tLeft = 0;
    var tBottom = height / yRowCnt;
    var tRight = width / yDataPerRow;
    var texturePosValues = new Float32Array([tRight, tTop, tLeft, tTop, tRight, tBottom, tLeft, tBottom]);

    gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, texturePosValues, gl.DYNAMIC_DRAW);


    tBottom = (height / 2) / uRowCnt;
    tRight = (width / 2) / uDataPerRow;
    var uTexturePosValues = new Float32Array([tRight, tTop, tLeft, tTop, tRight, tBottom, tLeft, tBottom]);

    gl.bindBuffer(gl.ARRAY_BUFFER, uTexturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, uTexturePosValues, gl.DYNAMIC_DRAW);

    tBottom = (height / 2) / vRowCnt;
    tRight = (width / 2) / vDataPerRow;

    var vTexturePosValues = new Float32Array([tRight, tTop, tLeft, tTop, tRight, tBottom, tLeft, tBottom]);

    gl.bindBuffer(gl.ARRAY_BUFFER, vTexturePosBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, vTexturePosValues, gl.DYNAMIC_DRAW);
    
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, yTextureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, yDataPerRow, yRowCnt, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, yData);

    gl.activeTexture(gl.TEXTURE1);
    gl.bindTexture(gl.TEXTURE_2D, uTextureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, uDataPerRow, uRowCnt, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uData);

    gl.activeTexture(gl.TEXTURE2);
    gl.bindTexture(gl.TEXTURE_2D, vTextureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, vDataPerRow, vRowCnt, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, vData);

    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  }

  _drawPictureRGB (data) {

  }

  render (data, width, height) {
    var gl = this.contextGL;
    if (gl) {
      this._drawPictureGL(data, width, height);
    } else {
      this._drawPictureRGB(data);
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (YUVCanvas);


/***/ }),

/***/ "../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/media-info.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaInfo; });
const isObjectFilled = (obj) => {
  for (let key in obj) {
    if (obj.hasOwnProperty(key)) {
      if (obj[key] === null) {
        return false
      }
    }
  }
  return true
}

class MediaInfo {
  constructor () {
    this.mimeType = null
    this.duration = null

    this.hasVideo = null
    this.video = {
      codec: null,
      width: null,
      height: null,
      profile: null,
      level: null,
      frameRate: {
        fixed: true,
        fps: 25,
        fps_num: 25000,
        fps_den: 1000
      },
      chromaFormat: null,
      parRatio: {
        width: 1,
        height: 1
      }
    }

    this.hasAudio = null

    this.audio = {
      codec: null,
      sampleRate: null,
      sampleRateIndex: null,
      channelCount: null
    }
  }

  isComplete () {
    return MediaInfo.isBaseInfoReady(this) && MediaInfo.isVideoReady(this) && MediaInfo.isAudioReady(this)
  }

  static isBaseInfoReady (mediaInfo) {
    return isObjectFilled(mediaInfo)
  }

  static isVideoReady (mediaInfo) {
    if (!mediaInfo.hasVideo) {
      return true
    }

    return isObjectFilled(mediaInfo.video)
  }

  static isAudioReady (mediaInfo) {
    if (!mediaInfo.hasAudio) {
      return true
    }

    return isObjectFilled(mediaInfo.video)
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-sample.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaSample; });
class MediaSample {
  constructor (info) {
    let _default = MediaSample.getDefaultInf()

    if (!info || Object.prototype.toString.call(info) !== '[object Object]') {
      return _default
    }
    let sample = Object.assign({}, _default, info)

    Object.entries(sample).forEach(([k, v]) => {
      this[k] = v
    })
  }

  static getDefaultInf () {
    return {
      dts: null,
      pts: null,
      duration: null,
      position: null,
      isRAP: false, // is Random access point
      originDts: null
    }
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaSegmentList; });
class MediaSegmentList {

    constructor (type) {
        this._type = type;
        this._list = [];
        this._lastAppendLocation = -1; // cached last insert location
    }

    get type () {
        return this._type;
    }

    get length () {
        return this._list.length;
    }

    isEmpty () {
        return this._list.length === 0;
    }

    clear () {
        this._list = [];
        this._lastAppendLocation = -1;
    }

    _searchNearestSegmentBefore (beginDts) {
        let list = this._list;
        if (list.length === 0) {
            return -2;
        }
        let last = list.length - 1;
        let mid = 0;
        let lbound = 0;
        let ubound = last;

        let idx = 0;

        if (beginDts < list[0].originDts) {
            idx = -1;
            return idx;
        }

        while (lbound <= ubound) {
            mid = lbound + Math.floor((ubound - lbound) / 2);
            if (mid === last || (beginDts > list[mid].lastSample.originDts
                    && (beginDts < list[mid + 1].originDts))) {
                idx = mid;
                break;
            } else if (list[mid].originDts < beginDts) {
                lbound = mid + 1;
            } else {
                ubound = mid - 1;
            }
        }
        return idx;
    }

    _searchNearestSegmentAfter (beginDts) {
        return this._searchNearestSegmentBefore(beginDts) + 1;
    }

    append (segment) {
        let list = this._list;
        let lastAppendIdx = this._lastAppendLocation;
        let insertIdx = 0;

        if (lastAppendIdx !== -1 && lastAppendIdx < list.length
            && segment.originStartDts >= list[lastAppendIdx].lastSample.originDts
            && ((lastAppendIdx === list.length - 1)
                || (lastAppendIdx < list.length - 1
                    && segment.originStartDts < list[lastAppendIdx + 1].originStartDts))) {
            insertIdx = lastAppendIdx + 1; // use cached location idx
        } else {
            if (list.length > 0) {
                insertIdx = this._searchNearestSegmentBefore(segment.originStartDts) + 1;
            }
        }

        this._lastAppendLocation = insertIdx;
        this._list.splice(insertIdx, 0, segment);
    }

    getLastSegmentBefore (beginDts) {
        let idx = this._searchNearestSegmentBefore(beginDts);
        if (idx >= 0) {
            return this._list[idx];
        } else { // -1
            return null;
        }
    }

    getLastSampleBefore (beginDts) {
        let segment = this.getLastSegmentBefore(beginDts);
        if (segment !== null) {
            return segment.lastSample;
        } else {
            return null;
        }
    }

    getLastRAPBefore (beginDts) {
        let segmentIdx = this._searchNearestSegmentBefore(beginDts);
        let randomAccessPoints = this._list[segmentIdx].randomAccessPoints;
        while (randomAccessPoints.length === 0 && segmentIdx > 0) {
            segmentIdx--;
            randomAccessPoints = this._list[segmentIdx].randomAccessPoints;
        }
        if (randomAccessPoints.length > 0) {
            return randomAccessPoints[randomAccessPoints.length - 1];
        } else {
            return null;
        }
    }

}

/***/ }),

/***/ "../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaSegment; });
class MediaSegment {
    constructor () {
        this.startDts = -1;
        this.endDts = -1;
        this.startPts = -1;
        this.endPts = -1;
        this.originStartDts = -1;
        this.originEndDts = -1;
        this.randomAccessPoints = [];
        this.firstSample = null;
        this.lastSample = null;
    }

    addRAP (sample) {
        sample.isRAP = true;
        this.randomAccessPoints.push(sample);
    }
}

/***/ }),

/***/ "../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/track-meta.js ***!
  \**************************************************/
/*! exports provided: AudioTrackMeta, VideoTrackMeta */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioTrackMeta", function() { return AudioTrackMeta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoTrackMeta", function() { return VideoTrackMeta; });
class AudioTrackMeta {
  constructor (meta) {
    const _default = {
      sampleRate: 48000,
      channelCount: 2,
      codec: 'mp4a.40.2',
      config: [41, 401, 136, 0],
      duration: 0,
      id: 2,
      refSampleDuration: 21,
      sampleRateIndex: 3,
      timescale: 1000,
      type: 'audio'
    }
    if (meta) {
      return Object.assign({}, _default, meta)
    }
    return _default
  }
}

class VideoTrackMeta {
  constructor (meta) {
    const _default = {
      avcc: null,
      sps: new Uint8Array(0),
      pps: new Uint8Array(0),
      chromaFormat: 420,
      codec: 'avc1.640020',
      codecHeight: 720,
      codecWidth: 1280,
      duration: 0,
      frameRate: {
        fixed: true,
        fps: 25,
        fps_num: 25000,
        fps_den: 1000
      },
      id: 1,
      level: '3.2',
      presentHeight: 720,
      presentWidth: 1280,
      profile: 'High',
      refSampleDuration: 40,
      parRatio: {
        height: 1,
        width: 1
      },
      timescale: 1000,
      type: 'video'
    }

    if (meta) {
      return Object.assign({}, _default, meta)
    }
    return _default
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/track-sample.js ***!
  \****************************************************/
/*! exports provided: AudioTrackSample, VideoTrackSample */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioTrackSample", function() { return AudioTrackSample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoTrackSample", function() { return VideoTrackSample; });
class AudioTrackSample {
  constructor (info) {
    let _default = AudioTrackSample.getDefault()
    if (!info) {
      return _default
    }
    let sample = Object.assign({}, _default, info)

    return sample
  }

  static getDefault () {
    return {
      dts: null,
      pts: null,
      data: new Uint8Array()
    }
  }
}

class VideoTrackSample {
  constructor (info) {
    let _default = VideoTrackSample.getDefault()

    if (!info) {
      return _default
    }
    let sample = Object.assign({}, _default, info)

    return sample
  }

  static getDefault () {
    return {
      dts: null,
      pts: null,
      isKeyframe: false, // is Random access point
      originDts: null,
      data: new Uint8Array()
    }
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class MSE {
  constructor (configs) {
    this.configs = Object.assign({}, configs);
    this.container = this.configs.container;
    this.mediaSource = null;
    this.sourceBuffers = {};
    this.preloadTime = this.configs.preloadTime || 1;
  }

  init () {
    // eslint-disable-next-line no-undef
    this.mediaSource = new self.MediaSource();
    this.mediaSource.addEventListener('sourceopen', this.onSourceOpen.bind(this));
    this.container.src = URL.createObjectURL(this.mediaSource);
    this.url = this.container.src;
    this.container.addEventListener('timeupdate', this.onTimeUpdate.bind(this));
    this.container.addEventListener('waiting', this.onWaiting.bind(this));
  }

  onTimeUpdate () {
    this.emit('TIME_UPDATE', this.container);
  }
   
  onWaiting () {
    this.emit('WAITING', this.container);
  }

  onSourceOpen () {
    this.addSourceBuffers();
  }

  onUpdateEnd () {
    this.emit('SOURCE_UPDATE_END');
    this.doAppend()
  }
  addSourceBuffers () {
    if (this.mediaSource.readyState !== 'open') {
      return;
    }
    let sources = this._context.getInstance('PRE_SOURCE_BUFFER');
    let tracks = this._context.getInstance('TRACKS');
    let track;

    sources = sources.sources;
    let add = false;
    for (let i = 0, k = Object.keys(sources).length; i < k; i++) {
      let type = Object.keys(sources)[i];
      if (type === 'audio') {
        track = tracks.audioTrack;
      } else if (type === 'video') {
        track = tracks.videoTrack;
      }
      if (track) {
        let dur = type === 'audio' ? 21 : 40;
        if (track.meta && track.meta.refSampleDuration) dur = track.meta.refSampleDuration;
        if (sources[type].data.length >= (this.preloadTime / dur)) {
          add = true;
        }
      }
    }

    if (add) {
      if (Object.keys(this.sourceBuffers).length > 0) {
        return;
      }
      for (let i = 0, k = Object.keys(sources).length; i < k; i++) {
        let type = Object.keys(sources)[i];
        let source = sources[type]
        let mime = (type === 'video') ? 'video/mp4;codecs=' + source.mimetype : 'audio/mp4;codecs=' + source.mimetype
        let sourceBuffer = this.mediaSource.addSourceBuffer(mime);
        this.sourceBuffers[type] = sourceBuffer;
        sourceBuffer.addEventListener('updateend', this.onUpdateEnd.bind(this));
        this.doAppend();
      }
    }
  }

  doAppend () {
    let sources = this._context.getInstance('PRE_SOURCE_BUFFER');
    if (sources) {
      for (let i = 0; i < Object.keys(this.sourceBuffers).length; i++) {
        let type = Object.keys(this.sourceBuffers)[i]
        let sourceBuffer = this.sourceBuffers[type];
        if (!sourceBuffer.updating) {
          let source = sources.sources[type];
          if (source && !source.inited) {
            sourceBuffer.appendBuffer(source.init.buffer.buffer);
            source.inited = true;
          } else if (source) {
            let data = source.data.shift()
            if (data) {
              sourceBuffer.appendBuffer(data.buffer.buffer);
            }
          }
        }
      }
    }
  }

  endOfStream () {
    if (this.mediaSource.readyState === 'open') {
      this.mediaSource.endOfStream()
    }
  }

  remove (end) {
    for (let i = 0; i < Object.keys(this.sourceBuffers).length; i++) {
      let buffer = this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];
      if (!buffer.updating) {
        buffer.remove(0, end);
      }
    }
  }

  destroy () {
    this.container.removeEventListener('timeupdate', this.onTimeUpdate);
    this.container.removeEventListener('waiting', this.onWaiting);
    this.mediaSource.removeEventListener('sourceopen', this.onSourceOpen);
    this.configs = {};
    this.container = null;
    this.mediaSource = null;
    this.sourceBuffers = {};
    this.preloadTime = 1;
    for (let i = 0; i < Object.keys(this.sourceBuffers).length; i++) {
      let buffer = this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];
      buffer.removeEventListener('updateend', this.onUpdateEnd);
      this.mediaSource.removeSourceBuffer(buffer);
      delete this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];
    }
  }
}
/* harmony default export */ __webpack_exports__["default"] = (MSE);


/***/ }),

/***/ "../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/buffer.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var concat_typed_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! concat-typed-array */ "../xgplayer-utils/node_modules/concat-typed-array/lib/index.js");
/* harmony import */ var concat_typed_array__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(concat_typed_array__WEBPACK_IMPORTED_MODULE_0__);


class Buffer {
  constructor (buffer) {
    this.buffer = buffer || new Uint8Array(0)
  }

  write (...buffer) {
    buffer.forEach(item => {
      this.buffer = concat_typed_array__WEBPACK_IMPORTED_MODULE_0___default()(Uint8Array, this.buffer, item)
    })
  }

  static writeUint32 (value) {
    return new Uint8Array([
      value >> 24,
      (value >> 16) & 0xff,
      (value >> 8) & 0xff,
      value & 0xff
    ])
  }

  static readAsInt (arr) {
    let temp = ''

    function padStart4Hex (hexNum) {
      let hexStr = hexNum.toString(16)
      return hexStr.padStart(2, '0')
    }

    arr.forEach(num => {
      temp += padStart4Hex(num)
    })
    return parseInt(temp, 16)
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Buffer);


/***/ }),

/***/ "../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/stream.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Stream {
  constructor (buffer) {
    if (buffer instanceof ArrayBuffer) {
      this.buffer = buffer;
      this.dataview = new DataView(buffer);
      this.dataview.position = 0;
    } else {
      throw new Error('data is invalid');
    }
  }

  get length () {
    return this.buffer.byteLength;
  }

  set position (value) {
    this.dataview.position = value;
  }

  get position () {
    return this.dataview.position;
  }

  back (count) {
    this.position -= count;
  }

  skip (count) {
    let loop = Math.floor(count / 4);
    let last = count % 4;
    for (let i = 0; i < loop; i++) {
      Stream.readByte(this.dataview, 4);
    }
    if (last > 0) {
      Stream.readByte(this.dataview, last);
    }
  }

  /**
   * [readByte 从DataView中读取数据]
   * @param  {DataView} buffer [DataView实例]
   * @param  {Number} size   [读取字节数]
   * @return {Number}        [整数]
   */
  static readByte (buffer, size, sign) {
    let res;
    switch (size) {
      case 1:
        if (sign) {
          res = buffer.getInt8(buffer.position);
        } else {
          res = buffer.getUint8(buffer.position);
        }
        break;
      case 2:
        if (sign) {
          res = buffer.getInt16(buffer.position);
        } else {
          res = buffer.getUint16(buffer.position);
        }
        break;
      case 3:
        if (sign) {
          throw new Error('not supported for readByte 3');
        } else {
          res = buffer.getUint8(buffer.position) << 16;
          res |= buffer.getUint8(buffer.position + 1) << 8;
          res |= buffer.getUint8(buffer.position + 2);
        }
        break;
      case 4:
        if (sign) {
          res = buffer.getInt32(buffer.position);
        } else {
          res = buffer.getUint32(buffer.position);
        }
        break;
      case 8:
        if (sign) {
          throw new Error('not supported for readBody 8');
        } else {
          res = buffer.getUint32(buffer.position) << 32;
          res |= buffer.getUint32(buffer.position + 4);
        }
        break;
      default:
        res = '';
    }
    buffer.position += size;
    return res;
  }

  readUint8 () {
    return Stream.readByte(this.dataview, 1);
  }

  readUint16 () {
    return Stream.readByte(this.dataview, 2);
  }

  readUint24 () {
    return Stream.readByte(this.dataview, 3);
  }

  readUint32 () {
    return Stream.readByte(this.dataview, 4);
  }

  readUint64 () {
    return Stream.readByte(this.dataview, 8);
  }

  readInt8 () {
    return Stream.readByte(this.dataview, 1, true);
  }
  readInt16 () {
    return Stream.readByte(this.dataview, 2, true);
  }

  readInt32 () {
    return Stream.readByte(this.dataview, 4, true);
  }

  writeUint32 (value) {
    return new Uint8Array([
      value >>> 24 & 0xff,
      value >>> 16 & 0xff,
      value >>> 8 & 0xff,
      value & 0xff
    ]);
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Stream);


/***/ }),

/***/ "../xgplayer/dist/index.js":
/*!*********************************!*\
  !*** ../xgplayer/dist/index.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(e,t){ true?module.exports=t():undefined}(window,(function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}({"./node_modules/css-loader/index.js?!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/style/index.scss":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--5-1!./node_modules/postcss-loader/lib!./node_modules/sass-loader/lib/loader.js!./src/style/index.scss ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */function(e,t,n){(e.exports=n(/*! ../../node_modules/css-loader/lib/css-base.js */"./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,"@-webkit-keyframes playPause{0%{-webkit-transform:scale(1);transform:scale(1);opacity:1}99%{-webkit-transform:scale(1.3);transform:scale(1.3);opacity:0}to{-webkit-transform:scale(0);transform:scale(0);opacity:0}}@-webkit-keyframes loadingRotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes loadingDashOffset{0%{stroke-dashoffset:236}to{stroke-dashoffset:0}}@-webkit-keyframes enterTips{0%{opacity:0;left:0;width:3px}50%{opacity:1;left:50%;width:5px}to{opacity:0;left:100%;width:3px}}.xgplayer-download{position:relative;width:36px;height:40px;-webkit-order:8;-moz-box-ordinal-group:9;order:8;cursor:pointer}.xgplayer-inactive .xgplayer-download,.xgplayer-nostart .xgplayer-download{display:none}.xgplayer-download:hover .xgplayer-tips{display:block}.xgplayer-download-img{display:inline-block;width:24px;height:24px;margin-top:7px!important;margin-left:4px!important;background:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23FFF' fill-rule='evenodd'%3E%3Crect x='11' y='4' width='2' height='12' rx='1'/%3E%3Crect x='3' y='18' width='18' height='2' rx='1'/%3E%3Crect transform='rotate(90 4 17.5)' x='1.5' y='16.5' width='5' height='2' rx='1'/%3E%3Crect transform='rotate(90 20 17.5)' x='17.5' y='16.5' width='5' height='2' rx='1'/%3E%3Cpath d='M11.988 14.3l-4.243-4.242a1 1 0 0 0-1.414 1.414l4.95 4.95a1 1 0 0 0 1.414 0l4.95-4.95a1 1 0 1 0-1.414-1.414L11.988 14.3z'/%3E%3C/g%3E%3C/svg%3E\") no-repeat 50%/100% 100%}.xgplayer-rotate{-webkit-order:9;-moz-box-ordinal-group:10;order:9;position:relative;display:inline-block;cursor:pointer;margin:0 4px}.xgplayer-rotate:hover .xgplayer-tips{display:block}.xgplayer-rotate-img{width:20px;height:20px;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 20 20' fill='none'%3E%3Cg clip-path='url(%23a)' fill='%23fff'%3E%3Cpath d='M11.666 9.167h-7.5a2.5 2.5 0 0 0-2.5 2.5v4.166a2.5 2.5 0 0 0 2.5 2.5h7.5a2.5 2.5 0 0 0 2.5-2.5v-4.166a2.5 2.5 0 0 0-2.5-2.5z'/%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M3.881 4.063a.83.83 0 0 0 .105 1.193L6.99 8.06A.833.833 0 1 0 8.128 6.84L6.62 5.435l3.199-.013a6.667 6.667 0 0 1 6.374 9.322.833.833 0 0 0 1.528.665A8.334 8.334 0 0 0 9.8 3.756l-3.367.013 1.53-1.64A.833.833 0 1 0 6.743.992L3.903 4.04a.83.83 0 0 0-.021.023z'/%3E%3C/g%3E%3Cdefs%3E%3CclipPath id='a'%3E%3Cpath fill='%23fff' d='M0 0h20v20H0z'/%3E%3C/clipPath%3E%3C/defs%3E%3C/svg%3E\");background-repeat:no-repeat;background-position:10px 10px}.xgplayer{background:rgba(0,0,0,.26);width:100%;height:100%;position:relative;-webkit-user-select:none;-moz-user-select:none;user-select:none;-ms-user-select:none}.xgplayer *{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}.xgplayer.xgplayer-is-fullscreen{width:100%!important;height:100%!important;padding-top:0!important;z-index:9999}.xgplayer.xgplayer-is-fullscreen.xgplayer-inactive{cursor:none}.xgplayer video{width:100%;height:100%;outline:none}.xgplayer-icon{display:block;width:40px;height:40px;overflow:hidden;fill:#fff}.xgplayer-controls{display:-webkit-flex;display:-moz-box;display:flex;position:absolute;bottom:0;left:0;right:0;height:40px;background-image:linear-gradient(-1deg,rgba(0,0,0,.3),transparent);z-index:10}.xgplayer-nostart .xgplayer-controls{display:none}.no-controls .xgplayer-controls{display:none!important}.xgplayer-inactive .xgplayer-controls,.xgplayer-is-live .xgplayer-controls>*{display:none}.xgplayer-is-live .xgplayer-controls .xgplayer-fullscreen,.xgplayer-is-live .xgplayer-controls .xgplayer-live,.xgplayer-is-live .xgplayer-controls .xgplayer-placeholder,.xgplayer-is-live .xgplayer-controls .xgplayer-play,.xgplayer-is-live .xgplayer-controls .xgplayer-play-img,.xgplayer-is-live .xgplayer-controls .xgplayer-volume{display:block}.xgplayer-progress{display:block;position:absolute;height:20px;line-height:20px;left:0;right:0;outline:none;top:-10px;z-index:35}.xgplayer.xgplayer-definition-active .xgplayer-progress,.xgplayer.xgplayer-textTrack-active .xgplayer-progress,.xgplayer.xgplayer-volume-active .xgplayer-progress{z-index:15}.xgplayer-progress-outer{background:hsla(0,0%,100%,.3);display:block;height:3px;line-height:3px;margin-top:8.5px;width:100%;position:relative;cursor:pointer}.xgplayer-progress-cache,.xgplayer-progress-played{display:block;height:100%;line-height:1;position:absolute;left:0;top:0}.xgplayer-progress-cache{width:0;background:hsla(0,0%,100%,.5)}.xgplayer-progress-played{display:block;width:0;background-image:linear-gradient(-90deg,#fa1f41,#e31106);border-radius:0 1.5px 1.5px 0}.xgplayer-progress-btn{display:none;position:absolute;left:0;top:-6px;width:14px;height:16px;border-radius:6px;background:#fff;box-shadow:0 0 2px 0 rgba(0,0,0,.26)}.xgplayer-progress-point{position:absolute}.xgplayer-progress-point.xgplayer-tips{margin-left:0;top:-25px;display:none;z-index:100}.xgplayer-progress-dot{display:inline-block;position:absolute;height:3px;width:5px;top:0;background:#fff;border-radius:6px;z-index:16}.xgplayer-progress-dot .xgplayer-progress-tip{position:absolute;left:0;top:-40px;height:auto;line-height:30px;width:auto;-webkit-transform:scale(.8);-ms-transform:scale(.8);transform:scale(.8);background:rgba(0,0,0,.3);border-radius:6px;border:1px solid rgba(0,0,0,.8);cursor:default;white-space:nowrap;display:none}.xgplayer-progress-dot-show .xgplayer-progress-tip{display:block}.xgplayer-progress-thumbnail{position:absolute;-moz-box-sizing:border-box;box-sizing:border-box}.xgplayer-progress-thumbnail.xgplayer-tips{margin-left:0;display:none;z-index:99}.xgplayer-progress:focus .xgplayer-progress-outer,.xgplayer-progress:hover .xgplayer-progress-outer{height:6px;margin-top:7px}.xgplayer-progress:focus .xgplayer-progress-dot,.xgplayer-progress:hover .xgplayer-progress-dot{height:6px}.xgplayer-progress:focus .xgplayer-progress-btn,.xgplayer-progress:hover .xgplayer-progress-btn{display:block}.xgplayer-play,.xgplayer-play-img{position:relative;-webkit-order:0;-moz-box-ordinal-group:1;order:0;display:block;cursor:pointer}.xgplayer-play-img .xgplayer-icon,.xgplayer-play .xgplayer-icon{margin-top:3px}.xgplayer-play-img:hover,.xgplayer-play:hover{opacity:.85}.xgplayer-play-img:hover .xgplayer-tips,.xgplayer-play:hover .xgplayer-tips{display:block}.xgplayer-playNext,.xgplayer-playNext-img{-webkit-order:1;-moz-box-ordinal-group:2;order:1;cursor:pointer}.xgplayer-playNext-img:hover,.xgplayer-playNext:hover{opacity:.85}.xgplayer-time{-webkit-order:2;-moz-box-ordinal-group:3;order:2;font-family:ArialMT;font-size:13px;color:#fff;line-height:40px;display:inline-block}.xgplayer-time span:after{content:\"/\";display:inline-block;padding:0 3px}.xgplayer-time em{color:hsla(0,0%,100%,.5)}.xgplayer-tips{background:rgba(0,0,0,.54);border-radius:1px;display:none;position:absolute;font-family:PingFangSC-Regular;font-size:11px;color:#fff;padding:2px 4px;text-align:center;top:-30px;left:50%;margin-left:-16px;width:auto;white-space:nowrap}.xgplayer-volume{outline:none;-webkit-order:4;-moz-box-ordinal-group:5;order:4;width:28px;height:140px;display:inline-block;position:relative;margin-top:-100px;z-index:18}.xgplayer-volume .xgplayer-icon{margin-top:8px;cursor:pointer;position:absolute;bottom:-9px}.xgplayer-slider{display:none;position:absolute;width:28px;height:88px;background:rgba(0,0,0,.54);border-radius:1px;bottom:50px;outline:none;left:0}.xgplayer.xgplayer-volume-active .xgplayer-slider{display:block}.xgplayer-slider:after{content:\" \";display:block;height:15px;width:28px;position:absolute;bottom:-15px;left:0;z-index:20}.xgplayer-bar,.xgplayer-drag{display:block;position:absolute;bottom:6px;left:12px;background:hsla(0,0%,100%,.3);border-radius:100px;width:4px;height:76px;outline:none;cursor:pointer}.xgplayer-drag{bottom:0;left:0;background:#fa1f41;max-height:76px}.xgplayer-drag:after{content:\" \";display:inline-block;width:8px;height:8px;background:#fff;box-shadow:0 0 5px 0 rgba(0,0,0,.26);position:absolute;border-radius:50%;left:-2px;top:-6px}.xgplayer-placeholder{-webkit-flex:1;-moz-box-flex:1;flex:1;-webkit-order:3;-moz-box-ordinal-group:4;order:3;display:block}.xgplayer-start{border-radius:50%;display:inline-block;width:70px;height:70px;background:hsla(0,0%,100%,.3);overflow:hidden;text-align:center;line-height:70px;vertical-align:middle;position:absolute;left:50%;top:50%;z-index:1000;margin:-55px auto auto -35px;cursor:pointer}.xgplayer-inactive .xgplayer-start,.xgplayer-nostart .xgplayer-start{margin:-35px auto auto -35px}.xgplayer-start svg{fill:hsla(0,0%,100%,.7);margin:14px}.xgplayer-start.xgplayer-start-interact{-webkit-animation:playPause .4s ease-out forwards;animation:playPause .4s ease-out forwards}.xgplayer-start:hover{background:hsla(0,0%,100%,.5)}.xgplayer-start:hover svg{fill:hsla(0,0%,100%,.6)}.xgplayer-start-img{display:none;position:absolute;left:50%;top:50%;z-index:1000;cursor:pointer}.xgplayer-nostart .xgplayer-start-img{display:block}.xgplayer-start-img.xgplayer-start-interact{-webkit-animation:playPause .4s ease-out forwards;animation:playPause .4s ease-out forwards}.xgplayer-start-img:hover{opacity:.85}.xgplayer-textTrack{-webkit-order:7;-moz-box-ordinal-group:8;order:7;width:60px;height:150px;z-index:18;position:relative;outline:none;display:none;cursor:default;margin-left:10px;margin-top:-119px;margin-bottom:11px}.xgplayer-textTrack ul{display:none;list-style:none;width:78px;background:rgba(0,0,0,.54);border-radius:1px;position:absolute;bottom:30px;left:0;text-align:center;white-space:nowrap;margin-left:-10px;z-index:26;cursor:pointer}.xgplayer.xgplayer-textTrack-active .xgplayer-textTrack ul{display:block}.xgplayer-textTrack ul li{opacity:.7;font-family:PingFangSC-Regular;font-size:11px;color:hsla(0,0%,100%,.8);padding:6px 13px}.xgplayer-textTrack ul li.textTrack,.xgplayer-textTrack ul li:hover{color:#fff;opacity:1}.xgplayer-textTrack .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;cursor:pointer;color:hsla(0,0%,100%,.8);position:absolute;bottom:0;width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer-is-textTrack .xgplayer-textTrack{display:block}.xgplayer-definition{-webkit-order:5;-moz-box-ordinal-group:6;order:5;width:60px;height:150px;z-index:18;position:relative;outline:none;display:none;cursor:default;margin-left:10px;margin-top:-119px;margin-bottom:11px}.xgplayer-definition ul{display:none;list-style:none;width:78px;background:rgba(0,0,0,.54);border-radius:1px;position:absolute;bottom:30px;left:0;text-align:center;white-space:nowrap;margin-left:-10px;z-index:26;cursor:pointer}.xgplayer.xgplayer-definition-active .xgplayer-definition ul{display:block}.xgplayer-definition ul li{opacity:.7;font-family:PingFangSC-Regular;font-size:11px;color:hsla(0,0%,100%,.8);padding:6px 13px}.xgplayer-definition ul li.definition,.xgplayer-definition ul li:hover{color:#fff;opacity:1}.xgplayer-definition .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;cursor:pointer;color:hsla(0,0%,100%,.8);position:absolute;bottom:0;width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer-is-definition .xgplayer-definition{display:block}.xgplayer-playback{-webkit-order:8;-moz-box-ordinal-group:9;order:8;position:relative;outline:none;display:block;cursor:pointer;margin:10px;height:20px}.xgplayer-playback .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;line-height:20px;height:20px;color:hsla(0,0%,100%,.8)}.xgplayer-playback .name span{width:40px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer-playback:hover .xgplayer-tips{display:block;top:-40px}.xgplayer-pip{-webkit-order:9;-moz-box-ordinal-group:10;order:9;position:relative;outline:none;display:block;cursor:pointer;margin-left:10px;margin-top:9px;margin-bottom:11px;height:20px}.xgplayer-pip .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;line-height:20px;height:20px;color:hsla(0,0%,100%,.8)}.xgplayer-pip .name span{width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer.xgplayer-pip-active{position:fixed!important;right:0;bottom:200px;width:320px!important;height:180px!important;z-index:999!important}.xgplayer.xgplayer-pip-active .xgplayer-controls,.xgplayer.xgplayer-pip-active xg-bullet{display:none}.xgplayer.xgplayer-pip-active .xgplayer-pip-lay{display:block}.xgplayer-pip-lay{position:absolute;top:26px;left:0;z-index:1450;cursor:pointer;background-color:transparent;display:none}.xgplayer-pip-lay,.xgplayer-pip-lay div{width:100%;height:100%}.xgplayer-pip-drag{cursor:move;position:absolute;top:0;left:0;width:100%;height:26px;line-height:26px;background-image:linear-gradient(rgba(0,0,0,.3),transparent);z-index:1500;display:none}.xgplayer.xgplayer-pip-active .xgplayer-pip-drag{display:-webkit-flex;display:-moz-box;display:flex}.xgplayer.xgplayer-inactive .xgplayer-pip-drag{display:none}.xgplayer-fullscreen{-webkit-order:12;-moz-box-ordinal-group:13;order:12;position:relative;display:inline-block;cursor:pointer}.xgplayer-fullscreen .xgplayer-icon{margin:4px -4px 0 0}.xgplayer-fullscreen:hover .xgplayer-tips{display:block}.xgplayer.xgplayer-fullscreen-active{position:fixed!important;left:0!important;top:0!important;width:100%!important;height:100%!important;z-index:99999!important}.xgplayer-cssfullscreen{-webkit-order:11;-moz-box-ordinal-group:12;order:11;position:relative;display:inline-block;cursor:pointer;left:6px}.xgplayer-cssfullscreen .xgplayer-icon{margin:4px -4px 0 0}.xgplayer-cssfullscreen:hover .xgplayer-tips{display:block}.xgplayer.xgplayer-cssfullscreen-active{position:fixed!important;left:0!important;top:0!important;width:100%!important;height:100%!important;z-index:99999!important}.danmu-switch{-webkit-order:6;-moz-box-ordinal-group:7;order:6;z-index:26;margin:10px auto}.xgplayer-bullet{display:none;position:absolute;top:0;left:0;right:0;height:100%;overflow:hidden;z-index:9;outline:none}.xgplayer-bullet>*{position:absolute;white-space:nowrap;z-index:9}.xgplayer-has-bullet{display:block}.xgplayer-loading{display:none;width:100px;height:100px;overflow:hidden;-webkit-transform:scale(.7);-ms-transform:scale(.7);transform:scale(.7);position:absolute;left:50%;top:50%;margin:-70px auto auto -50px}.xgplayer-loading svg{border-radius:50%;-webkit-transform-origin:center;-ms-transform-origin:center;transform-origin:center;-webkit-animation:loadingRotate 1s linear infinite;animation:loadingRotate 1s linear infinite}.xgplayer-loading svg path{stroke:#ddd;stroke-dasharray:236;-webkit-animation:loadingDashOffset 2s linear infinite;animation:loadingDashOffset 2s linear infinite;animation-direction:alternate-reverse;fill:none;stroke-width:12px}.xgplayer-nostart .xgplayer-loading{display:none}.xgplayer-isloading .xgplayer-loading{display:block}.xgplayer-replay{position:absolute;left:0;top:0;width:100%;height:100%;z-index:500;display:none;-webkit-justify-content:center;-moz-box-pack:center;justify-content:center;-webkit-align-items:center;-moz-box-align:center;align-items:center;background:rgba(0,0,0,.54);-webkit-flex-direction:column;-moz-box-orient:vertical;-moz-box-direction:normal;flex-direction:column;cursor:pointer}.xgplayer-replay svg{background:rgba(0,0,0,.58);border-radius:100%;cursor:pointer}.xgplayer-replay svg path{-webkit-transform:translate(20px,21px);-ms-transform:translate(20px,21px);transform:translate(20px,21px);fill:#ddd}.xgplayer-replay svg:hover{background:rgba(0,0,0,.38)}.xgplayer-replay svg:hover path{fill:#fff}.xgplayer-replay .xgplayer-replay-img{position:absolute;left:50%;top:50%;cursor:pointer}.xgplayer-replay .xgplayer-replay-img:hover{opacity:.85}.xgplayer-replay .xgplayer-replay-txt{display:inline-block;font-family:PingFangSC-Regular;font-size:14px;color:#fff;line-height:34px;cursor:pointer}.xgplayer.xgplayer-ended .xgplayer-controls{display:none}.xgplayer.xgplayer-ended .xgplayer-replay{display:-webkit-flex;display:-moz-box;display:flex}.xgplayer-replay-img{display:none;position:absolute;left:50%;top:50%;z-index:500;cursor:pointer}.xgplayer-replay-img:hover{opacity:.85}.xgplayer.xgplayer-ended .xgplayer-replay-img{display:block}@keyframes playPause{0%{-webkit-transform:scale(1);transform:scale(1);opacity:1}99%{-webkit-transform:scale(1.3);transform:scale(1.3);opacity:0}to{-webkit-transform:scale(0);transform:scale(0);opacity:0}}@keyframes loadingRotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes loadingDashOffset{0%{stroke-dashoffset:236}to{stroke-dashoffset:0}}@keyframes enterTips{0%{opacity:0;left:0;width:3px}50%{opacity:1;left:50%;width:5px}to{opacity:0;left:100%;width:3px}}.xgplayer-enter{display:none;position:absolute;left:0;top:0;width:100%;height:100%;background:url(\"//s2.pstatp.com/cdn/expire-1-M/byted-player-images/1.0.2/bg.svg\") no-repeat 50%/cover;z-index:1100}.xgplayer-enter .xgplayer-enter-logo{display:block;position:absolute;left:50%;top:50%;width:130px;height:44px;margin:-22px auto auto -65px;background-size:130px 44px;background-image:url(\"//s3.pstatp.com/cdn/expire-1-M/byted-player-images/1.0.1/xg-logo-new.png\")}.xgplayer-enter .xgplayer-enter-tips{display:none;position:absolute;left:50%;top:50%;width:120px;height:1px;background:linear-gradient(90deg,#000,red,red,red,#000);margin:32px auto auto -62px}.xgplayer-enter .xgplayer-enter-tips:before{content:\" \";display:block;width:5px;height:1px;border-radius:50%;position:absolute;left:0;top:0;-webkit-animation:enterTips 1.6s linear infinite;animation:enterTips 1.6s linear infinite;background:#fff}.xgplayer-is-enter .xgplayer-enter,.xgplayer-is-enter .xgplayer-enter .xgplayer-enter-tips{display:block}.xgplayer-screenShot{-webkit-order:10;-moz-box-ordinal-group:11;order:10;position:relative;outline:none;display:block;cursor:pointer;margin-left:10px;margin-top:9px;margin-bottom:11px;height:20px}.xgplayer-screenShot .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;line-height:20px;height:20px;color:hsla(0,0%,100%,.8)}.xgplayer-screenShot .name span{width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer-poster{position:absolute;left:0;top:0;width:100%;height:100%;z-index:100;background-size:cover;background-position:50%}.xgplayer-live{display:block;font-size:12px;color:#fff;line-height:40px;-webkit-order:1;-moz-box-ordinal-group:2;order:1}.xgplayer .xgplayer-none{display:none}.xgplayer-error{background:#000;display:none;position:absolute;left:0;top:0;width:100%;height:100%;z-index:1200;font-family:PingFangSC-Regular;font-size:14px;color:#fff;text-align:center;line-height:100%;-webkit-justify-content:center;-moz-box-pack:center;justify-content:center;-webkit-align-items:center;-moz-box-align:center;align-items:center}.xgplayer-error .xgplayer-error-refresh{color:#fa1f41;padding:0 3px;cursor:pointer}.xgplayer-is-error .xgplayer-error{display:-webkit-flex;display:-moz-box;display:flex}.xgplayer-error .xgplayer-error-text{line-height:18px;margin:auto 6px}.xgplayer-mobile .xgplayer-progress-btn{display:block}.xgplayer-mobile .xgplayer-progress:focus .xgplayer-progress-outer,.xgplayer-mobile .xgplayer-progress:hover .xgplayer-progress-outer{height:3px;margin-top:8.5px}.xgplayer-mobile .xgplayer-progress:focus .xgplayer-progress-dot,.xgplayer-mobile .xgplayer-progress:hover .xgplayer-progress-dot{height:3px}.xgplayer-mobile.xgplayer-ended .xgplayer-start,.xgplayer-mobile.xgplayer-ended .xgplayer-start-img,.xgplayer-mobile.xgplayer-inactive .xgplayer-start,.xgplayer-mobile.xgplayer-inactive .xgplayer-start-img{display:none}.xgplayer-mobile .xgplayer-start{width:60px;height:60px;line-height:60px;display:none;margin:-50px auto auto -30px}.xgplayer-mobile .xgplayer-start svg{margin:10px}.xgplayer-mobile .xgplayer-start-img{display:none}.xgplayer-mobile .xgplayer-tips{display:none!important}.xgplayer-mobile.xgplayer-nostart .xgplayer-start{margin:-30px auto auto -30px;display:block}.xgplayer-mobile.xgplayer-nostart .xgplayer-start-img{display:block}.xgplayer-mobile .xgplayer-loading{-webkit-transform:scale(.5);-ms-transform:scale(.5);transform:scale(.5)}.xgplayer-mobile.xgplayer-mobile-npassed .xgplayer-controls,.xgplayer-mobile.xgplayer-mobile-npassed .xgplayer-poster,.xgplayer-mobile.xgplayer-mobile-npassed .xgplayer-start,.xgplayer-mobile.xgplayer-mobile-npassed .xgplayer-start-img{display:none}",""])},"./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(a=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=o.sources.map((function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"}));return[n].concat(i).concat([r]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},"./node_modules/d/index.js":
/*!*********************************!*\
  !*** ./node_modules/d/index.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! type/value/is */"./node_modules/type/value/is.js"),r=n(/*! type/plain-function/is */"./node_modules/type/plain-function/is.js"),i=n(/*! es5-ext/object/assign */"./node_modules/es5-ext/object/assign/index.js"),a=n(/*! es5-ext/object/normalize-options */"./node_modules/es5-ext/object/normalize-options.js"),s=n(/*! es5-ext/string/#/contains */"./node_modules/es5-ext/string/#/contains/index.js");(e.exports=function(e,t){var n,r,l,c,u;return arguments.length<2||"string"!=typeof e?(c=t,t=e,e=null):c=arguments[2],o(e)?(n=s.call(e,"c"),r=s.call(e,"e"),l=s.call(e,"w")):(n=l=!0,r=!1),u={value:t,configurable:n,enumerable:r,writable:l},c?i(a(c),u):u}).gs=function(e,t,n){var l,c,u,d;return"string"!=typeof e?(u=n,n=t,t=e,e=null):u=arguments[3],o(t)?r(t)?o(n)?r(n)||(u=n,n=void 0):n=void 0:(u=t,t=n=void 0):t=void 0,o(e)?(l=s.call(e,"c"),c=s.call(e,"e")):(l=!0,c=!1),d={get:t,set:n,configurable:l,enumerable:c},u?i(a(u),d):d}},"./node_modules/danmu.js/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/danmu.js/dist/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){var n,o,r,i,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};window,i=function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==(void 0===e?"undefined":a(e))&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o,r=(o=n(22))&&o.__esModule?o:{default:o},i={};i.domObj=new r.default,i.createDom=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",r=document.createElement(e);return r.className=o,r.innerHTML=t,Object.keys(n).forEach((function(t){var o=t,i=n[t];"video"===e||"audio"===e?i&&r.setAttribute(o,i):r.setAttribute(o,i)})),r},i.hasClass=function(e,t){return e.classList?Array.prototype.some.call(e.classList,(function(e){return e===t})):!!e.className.match(new RegExp("(\\s|^)"+t+"(\\s|$)"))},i.addClass=function(e,t){e.classList?t.replace(/(^\s+|\s+$)/g,"").split(/\s+/g).forEach((function(t){t&&e.classList.add(t)})):i.hasClass(e,t)||(e.className+=" "+t)},i.removeClass=function(e,t){e.classList?t.split(/\s+/g).forEach((function(t){e.classList.remove(t)})):i.hasClass(e,t)&&t.split(/\s+/g).forEach((function(t){var n=new RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ")}))},i.toggleClass=function(e,t){t.split(/\s+/g).forEach((function(t){i.hasClass(e,t)?i.removeClass(e,t):i.addClass(e,t)}))},i.findDom=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,t=arguments[1],n=void 0;try{n=e.querySelector(t)}catch(o){t.startsWith("#")&&(n=e.getElementById(t.slice(1)))}return n},i.deepCopy=function(e,t){if("Object"===i.typeOf(t)&&"Object"===i.typeOf(e))return Object.keys(t).forEach((function(n){"Object"!==i.typeOf(t[n])||t[n]instanceof Node?"Array"===i.typeOf(t[n])?e[n]="Array"===i.typeOf(e[n])?e[n].concat(t[n]):t[n]:e[n]=t[n]:e[n]?i.deepCopy(e[n],t[n]):e[n]=t[n]})),e},i.typeOf=function(e){return Object.prototype.toString.call(e).match(/([^\s.*]+)(?=]$)/g)[0]},i.copyDom=function(e){if(e&&1===e.nodeType){var t=document.createElement(e.tagName);return Array.prototype.forEach.call(e.attributes,(function(e){t.setAttribute(e.name,e.value)})),e.innerHTML&&(t.innerHTML=e.innerHTML),t}return""},i.formatTime=function(e){var t=Math.floor(e);return 1e3*t+(e-t)},t.default=i,e.exports=t.default},function(e,t,n){var o=n(13)();e.exports=function(e){return e!==o&&null!==e}},function(e,t,n){e.exports=n(3)},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o,r=(o=n(4))&&o.__esModule?o:{default:o};n(26),t.default=r.default,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=s(n(5)),i=s(n(21)),a=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.config=a.default.deepCopy({overlap:!1,area:{start:0,end:1},live:!1,comments:[],direction:"r2l"},t),this.hideArr=[],(0,r.default)(this);var n=this;if(this.config.comments.forEach((function(e){e.duration=e.duration<5e3?5e3:e.duration,e.mode||(e.mode="scroll")})),!this.config.container||1!==this.config.container.nodeType)return this.emit("error","container id can't be empty"),!1;if(this.container=this.config.container,this.config.containerStyle){var o=this.config.containerStyle;Object.keys(o).forEach((function(e){n.container.style[e]=o[e]}))}this.live=this.config.live,this.player=this.config.player,this.direction=this.config.direction,a.default.addClass(this.container,"danmu"),this.bulletBtn=new i.default(this),this.emit("ready")}return o(e,[{key:"start",value:function(){this.bulletBtn.main.start()}},{key:"pause",value:function(){this.bulletBtn.main.pause()}},{key:"play",value:function(){this.bulletBtn.main.play()}},{key:"stop",value:function(){this.bulletBtn.main.stop()}},{key:"sendComment",value:function(e){e&&e.id&&e.duration&&(e.el||e.txt)&&(e.duration=e.duration<5e3?5e3:e.duration,this.bulletBtn.main.data.push(e))}},{key:"setCommentID",value:function(e,t){var n=this.container.getBoundingClientRect();e&&t&&(this.bulletBtn.main.data.some((function(n){return n.id===e&&(n.id=t,!0)})),this.bulletBtn.main.queue.some((function(o){return o.id===e&&(o.id=t,o.pauseMove(n),o.startMove(n),!0)})))}},{key:"setCommentDuration",value:function(e,t){var n=this.container.getBoundingClientRect();e&&t&&(t=t<5e3?5e3:t,this.bulletBtn.main.data.some((function(n){return n.id===e&&(n.duration=t,!0)})),this.bulletBtn.main.queue.some((function(o){return o.id===e&&(o.duration=t,o.pauseMove(n),o.startMove(n),!0)})))}},{key:"setAllDuration",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"scroll",t=arguments[1],n=this.container.getBoundingClientRect();t&&(t=t<5e3?5e3:t,this.bulletBtn.main.data.forEach((function(n){e===n.mode&&(n.duration=t)})),this.bulletBtn.main.queue.forEach((function(o){e===o.mode&&(o.duration=t,o.pauseMove(n),o.startMove(n))})))}},{key:"hide",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"scroll";this.hideArr.indexOf(e)<0&&this.hideArr.push(e),this.bulletBtn.main.queue.filter((function(t){return e===t.mode||"color"===e&&t.color})).forEach((function(e){return e.remove()}))}},{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"scroll",t=this.hideArr.indexOf(e);t>-1&&this.hideArr.splice(t,1)}},{key:"setDirection",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"r2l";this.emit("changeDirection",e)}}]),e}();t.default=l,e.exports=t.default},function(e,t,n){var o,r,i,s,l,c,u,d=n(6),p=n(20),f=Function.prototype.apply,h=Function.prototype.call,g=Object.create,v=Object.defineProperty,m=Object.defineProperties,y=Object.prototype.hasOwnProperty,b={configurable:!0,enumerable:!1,writable:!0};r=function(e,t){var n,r;return p(t),r=this,o.call(this,e,n=function(){i.call(r,e,n),f.call(t,this,arguments)}),n.__eeOnceListener__=t,this},l={on:o=function(e,t){var n;return p(t),y.call(this,"__ee__")?n=this.__ee__:(n=b.value=g(null),v(this,"__ee__",b),b.value=null),n[e]?"object"==a(n[e])?n[e].push(t):n[e]=[n[e],t]:n[e]=t,this},once:r,off:i=function(e,t){var n,o,r,i;if(p(t),!y.call(this,"__ee__"))return this;if(!(n=this.__ee__)[e])return this;if("object"==a(o=n[e]))for(i=0;r=o[i];++i)r!==t&&r.__eeOnceListener__!==t||(2===o.length?n[e]=o[i?0:1]:o.splice(i,1));else o!==t&&o.__eeOnceListener__!==t||delete n[e];return this},emit:s=function(e){var t,n,o,r,i;if(y.call(this,"__ee__")&&(r=this.__ee__[e]))if("object"==(void 0===r?"undefined":a(r))){for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];for(r=r.slice(),t=0;o=r[t];++t)f.call(o,this,i)}else switch(arguments.length){case 1:h.call(r,this);break;case 2:h.call(r,this,arguments[1]);break;case 3:h.call(r,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];f.call(r,this,i)}}},c={on:d(o),once:d(r),off:d(i),emit:d(s)},u=m({},c),e.exports=t=function(e){return null==e?g(u):m(Object(e),c)},t.methods=l},function(e,t,n){var o=n(7),r=n(15),i=n(16),a=n(17);(e.exports=function(e,t){var n,i,s,l,c;return arguments.length<2||"string"!=typeof e?(l=t,t=e,e=null):l=arguments[2],null==e?(n=s=!0,i=!1):(n=a.call(e,"c"),i=a.call(e,"e"),s=a.call(e,"w")),c={value:t,configurable:n,enumerable:i,writable:s},l?o(r(l),c):c}).gs=function(e,t,n){var s,l,c,u;return"string"!=typeof e?(c=n,n=t,t=e,e=null):c=arguments[3],null==t?t=void 0:i(t)?null==n?n=void 0:i(n)||(c=n,n=void 0):(c=t,t=n=void 0),null==e?(s=!0,l=!1):(s=a.call(e,"c"),l=a.call(e,"e")),u={get:t,set:n,configurable:s,enumerable:l},c?o(r(c),u):u}},function(e,t,n){e.exports=n(8)()?Object.assign:n(9)},function(e,t,n){e.exports=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}},function(e,t,n){var o=n(10),r=n(14),i=Math.max;e.exports=function(e,t){var n,a,s,l=i(arguments.length,2);for(e=Object(r(e)),s=function(o){try{e[o]=t[o]}catch(e){n||(n=e)}},a=1;a<l;++a)t=arguments[a],o(t).forEach(s);if(void 0!==n)throw n;return e}},function(e,t,n){e.exports=n(11)()?Object.keys:n(12)},function(e,t,n){e.exports=function(){try{return Object.keys("primitive"),!0}catch(e){return!1}}},function(e,t,n){var o=n(1),r=Object.keys;e.exports=function(e){return r(o(e)?Object(e):e)}},function(e,t,n){e.exports=function(){}},function(e,t,n){var o=n(1);e.exports=function(e){if(!o(e))throw new TypeError("Cannot use null or undefined");return e}},function(e,t,n){var o=n(1),r=Array.prototype.forEach,i=Object.create;e.exports=function(e){var t=i(null);return r.call(arguments,(function(e){o(e)&&function(e,t){var n;for(n in e)t[n]=e[n]}(Object(e),t)})),t}},function(e,t,n){e.exports=function(e){return"function"==typeof e}},function(e,t,n){e.exports=n(18)()?String.prototype.contains:n(19)},function(e,t,n){var o="razdwatrzy";e.exports=function(){return"function"==typeof o.contains&&!0===o.contains("dwa")&&!1===o.contains("foo")}},function(e,t,n){var o=String.prototype.indexOf;e.exports=function(e){return o.call(this,e,arguments[1])>-1}},function(e,t,n){e.exports=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=a(n(0)),i=a(n(23));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.main=new i.default(t),t.config.defaultOff||this.main.start()}return o(e,[{key:"createSwitch",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.switchBtn=r.default.createDom("dk-switch",'<span class="txt">弹</span>',{},"danmu-switch "+(e?"danmu-switch-active":"")),this.switchBtn}}]),e}();t.default=s,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t={initDOM:function(){return document.createElement("div")},initSize:10},this.init(t)}return o(e,[{key:"init",value:function(e){this.idleList=[],this.usingList=[],this._id=0,this.options=e,this._expand(e.initSize)}},{key:"use",value:function(){this.idleList.length||this._expand(1);var e=this.idleList.shift();return this.usingList.push(e),e}},{key:"unuse",value:function(e){var t=this.usingList.indexOf(e);t<0||(this.usingList.splice(t,1),e.innerHTML="",e.textcontent="",e.style="",this.idleList.push(e))}},{key:"_expand",value:function(e){for(var t=0;t<e;t++)this.idleList.push(this.options.initDOM(this._id++))}}]),e}();t.default=r,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=s(n(24)),i=s(n(25)),a=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.container=t.container,this.channel=new r.default(t),this.data=[].concat(t.config.comments),this.queue=[],this.timer=null,this.retryTimer=null,this.interval=2e3,this.status="idle",t.on("bullet_remove",this.updateQueue.bind(this));var n=this;this.danmu.on("changeDirection",(function(e){n.danmu.direction=e}))}return o(e,[{key:"updateQueue",value:function(e){var t=this;t.queue.some((function(n,o){return n.id===e.bullet.id&&(t.queue.splice(o,1),!0)}))}},{key:"init",value:function(e,t){t||(t=this),t.data.sort((function(e,t){return e.start-t.start})),t.retryTimer||(t.retryTimer=setInterval((function(){t.readData(),t.dataHandle()}),t.interval-1e3))}},{key:"start",value:function(){this.status="playing",this.queue=[],this.container.innerHTML="",this.channel.resetWithCb(this.init,this)}},{key:"stop",value:function(){this.status="closed",clearInterval(this.retryTimer),this.retryTimer=null,this.channel.reset(),this.queue=[],this.container.innerHTML=""}},{key:"play",value:function(){this.status="playing";var e=this.channel.channels,t=this.danmu.container.getBoundingClientRect();e&&e.length>0&&["scroll","top","bottom"].forEach((function(n){for(var o=0;o<e.length;o++)e[o].queue[n].forEach((function(e){e.resized||(e.startMove(t),e.resized=!0)}));for(var r=0;r<e.length;r++)e[r].queue[n].forEach((function(e){e.resized=!1}))}))}},{key:"pause",value:function(){this.status="paused";var e=this.channel.channels,t=this.danmu.container.getBoundingClientRect();e&&e.length>0&&["scroll","top","bottom"].forEach((function(n){for(var o=0;o<e.length;o++)e[o].queue[n].forEach((function(e){e.pauseMove(t)}))}))}},{key:"dataHandle",value:function(){var e=this;"paused"!==this.status&&"closed"!==this.status&&e.queue.length&&e.queue.forEach((function(t){"waiting"!==t.status&&"paused"!==t.status||t.startMove(e.channel.containerPos)}))}},{key:"readData",value:function(){var e=this,t=this.danmu,n=0;t.player&&t.player.currentTime&&(n=a.default.formatTime(t.player.currentTime));var o=void 0,r=e.interval,s=e.channel,l=void 0;t.player?(l=e.data.filter((function(t){return!t.start&&e.danmu.hideArr.indexOf(t.mode)<0&&(!t.color||e.danmu.hideArr.indexOf("color")<0)&&(t.start=n),e.danmu.hideArr.indexOf(t.mode)<0&&(!t.color||e.danmu.hideArr.indexOf("color")<0)&&t.start-r<=n&&n<=t.start+r})),t.live&&(e.data=e.data.filter((function(e){return e.start||(e.start=n),e.start>n-3*r})))):l=e.data.filter((function(t){return e.danmu.hideArr.indexOf(t.mode)<0&&(!t.color||e.danmu.hideArr.indexOf("color")<0)})),l.length>0&&l.forEach((function(n){(o=new i.default(t,n)).attach(),s.addBullet(o).result?(e.queue.push(o),o.topInit()):o.detach()}))}}]),e}();t.default=l,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.reset();var n=this;this.danmu.on("bullet_remove",(function(e){n.removeBullet(e.bullet)})),this.direction=t.direction,this.danmu.on("changeDirection",(function(e){n.direction=e})),this.containerPos=this.danmu.container.getBoundingClientRect(),this.containerWidth=this.containerPos.width,this.containerHeight=this.containerPos.height,this.containerLeft=this.containerPos.left,this.containerRight=this.containerPos.right,this.danmu.bulletResizeTimer=setInterval((function(){n.containerPos=n.danmu.container.getBoundingClientRect(),(Math.abs(n.containerPos.width-n.containerWidth)>=2||Math.abs(n.containerPos.height-n.containerHeight)>=2||Math.abs(n.containerPos.left-n.containerLeft)>=2||Math.abs(n.containerPos.right-n.containerRight)>=2)&&(n.containerWidth=n.containerPos.width,n.containerHeight=n.containerPos.height,n.containerLeft=n.containerPos.left,n.containerRight=n.containerPos.right,n.resize(!0))}),50)}return o(e,[{key:"resize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.danmu.container,n=this;setTimeout((function(){n.danmu.bulletBtn.main.data&&n.danmu.bulletBtn.main.data.forEach((function(e){e.bookChannelId&&delete e.bookChannelId}));var o=t.getBoundingClientRect();n.width=o.width,n.height=o.height,n.danmu.config.area&&n.danmu.config.area.start>=0&&n.danmu.config.area.end>=n.danmu.config.area.start&&("b2t"===n.direction?n.width=n.width*(n.danmu.config.area.end-n.danmu.config.area.start):n.height=n.height*(n.danmu.config.area.end-n.danmu.config.area.start)),n.container=t;var r,i=/mobile/gi.test(navigator.userAgent)?10:12;r="b2t"===n.direction?Math.floor(n.width/i):Math.floor(n.height/i);for(var a=[],s=0;s<r;s++)a[s]={id:s,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};if(n.channels&&n.channels.length<=a.length){for(var l=function(t){a[t]={id:t,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top"].forEach((function(o){n.channels[t].queue[o].forEach((function(r){r.el&&(a[t].queue[o].push(r),r.resized||(r.pauseMove(n.containerPos,e),r.startMove(n.containerPos),r.resized=!0))}))})),n.channels[t].queue.bottom.forEach((function(o){if(o.el){if(a[t+a.length-n.channels.length].queue.bottom.push(o),o.channel_id[0]+o.channel_id[1]-1===t){var r=[].concat(o.channel_id);o.channel_id=[r[0]-n.channels.length+a.length,r[1]],o.top=o.channel_id[0]*i,n.danmu.config.area&&n.danmu.config.area.start&&(o.top+=n.containerHeight*n.danmu.config.area.start),o.topInit()}o.resized||(o.pauseMove(n.containerPos,e),o.startMove(n.containerPos),o.resized=!0)}}))},c=0;c<n.channels.length;c++)l(c);for(var u=function(e){["scroll","top","bottom"].forEach((function(t){a[e].queue[t].forEach((function(e){e.resized=!1}))}))},d=0;d<a.length;d++)u(d);n.channels=a,"b2t"===n.direction?n.channelWidth=i:n.channelHeight=i}else if(n.channels&&n.channels.length>a.length){for(var p=function(t){a[t]={id:t,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top","bottom"].forEach((function(o){if("top"===o&&t>Math.floor(a.length/2));else if("bottom"===o&&t<=Math.floor(a.length/2));else{var r="bottom"===o?t-a.length+n.channels.length:t;n.channels[r].queue[o].forEach((function(s,l){if(s.el){if(a[t].queue[o].push(s),"bottom"===o&&s.channel_id[0]+s.channel_id[1]-1===r){var c=[].concat(s.channel_id);s.channel_id=[c[0]-n.channels.length+a.length,c[1]],s.top=s.channel_id[0]*i,n.danmu.config.area&&n.danmu.config.area.start&&(s.top+=n.containerHeight*n.danmu.config.area.start),s.topInit()}s.resized||(s.pauseMove(n.containerPos,e),s.startMove(n.containerPos),s.resized=!0)}n.channels[r].queue[o].splice(l,1)}))}}))},f=0;f<a.length;f++)p(f);for(var h=function(e){["scroll","top","bottom"].forEach((function(t){n.channels[e].queue[t].forEach((function(e){e.pauseMove(n.containerPos),e.remove()}))}))},g=a.length;g<n.channels.length;g++)h(g);for(var v=function(e){["scroll","top","bottom"].forEach((function(t){a[e].queue[t].forEach((function(e){e.resized=!1}))}))},m=0;m<a.length;m++)v(m);n.channels=a,"b2t"===n.direction?n.channelWidth=i:n.channelHeight=i}}),10)}},{key:"addBullet",value:function(e){var t=this.danmu,n=this.channels,o=void 0,r=void 0,i=void 0;if("b2t"===this.direction?(r=this.channelWidth,i=Math.ceil(e.width/r)):(o=this.channelHeight,i=Math.ceil(e.height/o)),i>n.length)return{result:!1,message:"exceed channels.length, occupy="+i+",channelsSize="+n.length};for(var a=!0,s=void 0,l=-1,c=0,u=n.length;c<u;c++)if(n[c].queue[e.mode].some((function(t){return t.id===e.id})))return{result:!1,message:"exsited, channelOrder="+c+",danmu_id="+e.id};if("scroll"===e.mode)for(var d=0,p=n.length-i;d<=p;d++){a=!0;for(var f=d;f<d+i;f++){if((s=n[f]).operating.scroll){a=!1;break}if((s.bookId.scroll||e.prior)&&s.bookId.scroll!==e.id){a=!1;break}s.operating.scroll=!0;var h=s.queue.scroll[0];if(h){var g=h.el.getBoundingClientRect();if("b2t"===this.direction){if(g.bottom>this.containerPos.bottom){a=!1,s.operating.scroll=!1;break}}else if(g.right>this.containerPos.right){a=!1,s.operating.scroll=!1;break}var v,m=void 0,y=void 0,b=void 0,x=void 0;if("b2t"===this.direction?(y=(g.top-this.containerPos.top+g.height)/(m=(this.containerPos.height+g.height)/h.duration),b=this.containerPos.height,x=(this.containerPos.height+e.height)/e.duration):(y=(g.left-this.containerPos.left+g.width)/(m=(this.containerPos.width+g.width)/h.duration),b=this.containerPos.width,x=(this.containerPos.width+e.width)/e.duration),v=b/x,t.config.bOffset||(t.config.bOffset=0),m<x&&y+t.config.bOffset>v){a=!1,s.operating.scroll=!1;break}}s.operating.scroll=!1}if(a){l=d;break}}else if("top"===e.mode)for(var w=0,_=n.length-i;w<=_;w++){a=!0;for(var k=w;k<w+i;k++){if(k>Math.floor(n.length/2)){a=!1;break}if((s=n[k]).operating[e.mode]){a=!1;break}if((s.bookId[e.mode]||e.prior)&&s.bookId[e.mode]!==e.id){a=!1;break}if(s.operating[e.mode]=!0,s.queue[e.mode].length>0){a=!1,s.operating[e.mode]=!1;break}s.operating[e.mode]=!1}if(a){l=w;break}}else if("bottom"===e.mode)for(var E=n.length-i;E>=0;E--){a=!0;for(var C=E;C<E+i;C++){if(C<=Math.floor(n.length/2)){a=!1;break}if((s=n[C]).operating[e.mode]){a=!1;break}if((s.bookId[e.mode]||e.prior)&&s.bookId[e.mode]!==e.id){a=!1;break}if(s.operating[e.mode]=!0,s.queue[e.mode].length>0){a=!1,s.operating[e.mode]=!1;break}s.operating[e.mode]=!1}if(a){l=E;break}}if(-1!==l){for(var S=l,P=l+i;S<P;S++)(s=n[S]).operating[e.mode]=!0,s.queue[e.mode].unshift(e),e.prior&&delete s.bookId[e.mode],s.operating[e.mode]=!1;return e.prior&&(delete e.bookChannelId,t.bulletBtn.main.data.some((function(t){return t.id===e.id&&(delete t.bookChannelId,!0)}))),e.channel_id=[l,i],"b2t"===this.direction?(e.top=l*r,this.danmu.config.area&&this.danmu.config.area.start&&(e.top+=this.containerWidth*this.danmu.config.area.start)):(e.top=l*o,this.danmu.config.area&&this.danmu.config.area.start&&(e.top+=this.containerHeight*this.danmu.config.area.start)),{result:e,message:"success"}}if(e.prior)if(e.bookChannelId)t.bulletBtn.main.data.some((function(t){return t.id===e.id&&(t.start+=2e3,!0)}));else{l=-1;for(var j=0,T=n.length-i;j<=T;j++){a=!0;for(var M=j;M<j+i;M++)if(n[M].bookId[e.mode]){a=!1;break}if(a){l=j;break}}if(-1!==l){for(var O=l;O<l+i;O++)n[O].bookId[e.mode]=e.id;t.bulletBtn.main.data.some((function(t){return t.id===e.id&&(t.start+=2e3,t.bookChannelId=[l,i],!0)}))}}return{result:!1,message:"no surplus will right"}}},{key:"removeBullet",value:function(e){for(var t=this.channels,n=e.channel_id,o=void 0,r=n[0],i=n[0]+n[1];r<i;r++)if(o=t[r]){o.operating[e.mode]=!0;var a=-1;o.queue[e.mode].some((function(t,n){return t.id===e.id&&(a=n,!0)})),a>-1&&o.queue[e.mode].splice(a,1),o.operating[e.mode]=!1}}},{key:"resetArea",value:function(){var e=this.danmu.container,t=this,n=e.getBoundingClientRect();t.width=n.width,t.height=n.height,t.danmu.config.area&&t.danmu.config.area.start>=0&&t.danmu.config.area.end>=t.danmu.config.area.start&&("b2t"===t.direction?t.width=t.width*(t.danmu.config.area.end-t.danmu.config.area.start):t.height=t.height*(t.danmu.config.area.end-t.danmu.config.area.start)),t.container=e;var o,r=/mobile/gi.test(navigator.userAgent)?10:12;o="b2t"===t.direction?Math.floor(t.width/r):Math.floor(t.height/r);for(var i=[],a=0;a<o;a++)i[a]={id:a,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};if(t.channels&&t.channels.length<=i.length){for(var s=function(e){i[e]={id:e,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top"].forEach((function(n){t.channels[e].queue[n].forEach((function(o){o.el&&(i[e].queue[n].push(o),o.resized||(o.pauseMove(t.containerPos,!1),o.startMove(t.containerPos),o.resized=!0))}))})),t.channels[e].queue.bottom.forEach((function(n){if(n.el){if(i[e+i.length-t.channels.length].queue.bottom.push(n),n.channel_id[0]+n.channel_id[1]-1===e){var o=[].concat(n.channel_id);n.channel_id=[o[0]-t.channels.length+i.length,o[1]],n.top=n.channel_id[0]*r,t.danmu.config.area&&t.danmu.config.area.start&&(n.top+=t.containerHeight*t.danmu.config.area.start),n.topInit()}n.resized||(n.pauseMove(t.containerPos,!1),n.startMove(t.containerPos),n.resized=!0)}}))},l=0;l<t.channels.length;l++)s(l);for(var c=function(e){["scroll","top","bottom"].forEach((function(t){i[e].queue[t].forEach((function(e){e.resized=!1}))}))},u=0;u<i.length;u++)c(u);t.channels=i,"b2t"===t.direction?t.channelWidth=r:t.channelHeight=r}else if(t.channels&&t.channels.length>i.length){for(var d=function(e){i[e]={id:e,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top","bottom"].forEach((function(n){if("top"===n&&e>Math.floor(i.length/2));else if("bottom"===n&&e<=Math.floor(i.length/2));else{var o="bottom"===n?e-i.length+t.channels.length:e;t.channels[o].queue[n].forEach((function(a,s){if(a.el){if(i[e].queue[n].push(a),"bottom"===n&&a.channel_id[0]+a.channel_id[1]-1===o){var l=[].concat(a.channel_id);a.channel_id=[l[0]-t.channels.length+i.length,l[1]],a.top=a.channel_id[0]*r,t.danmu.config.area&&t.danmu.config.area.start&&(a.top+=t.containerHeight*t.danmu.config.area.start),a.topInit()}a.resized||(a.pauseMove(t.containerPos,!1),a.startMove(t.containerPos),a.resized=!0)}t.channels[o].queue[n].splice(s,1)}))}}))},p=0;p<i.length;p++)d(p);for(var f=function(e){["scroll","top","bottom"].forEach((function(t){i[e].queue[t].forEach((function(e){e.resized=!1}))}))},h=0;h<i.length;h++)f(h);t.channels=i,"b2t"===t.direction?t.channelWidth=r:t.channelHeight=r}}},{key:"reset",value:function(){var e=this.danmu.container,t=this;t.channels&&t.channels.length>0&&["scroll","top","bottom"].forEach((function(e){for(var n=0;n<t.channels.length;n++)t.channels[n].queue[e].forEach((function(e){e.pauseMove(t.containerPos),e.remove()}))})),setTimeout((function(){var n=e.getBoundingClientRect();t.width=n.width,t.height=n.height,t.danmu.config.area&&t.danmu.config.area.start>=0&&t.danmu.config.area.end>=t.danmu.config.area.start&&("b2t"===t.direction?t.width=t.width*(t.danmu.config.area.end-t.danmu.config.area.start):t.height=t.height*(t.danmu.config.area.end-t.danmu.config.area.start)),t.container=e;var o,r=/mobile/gi.test(navigator.userAgent)?10:12;o="b2t"===t.direction?Math.floor(t.width/r):Math.floor(t.height/r);for(var i=[],a=0;a<o;a++)i[a]={id:a,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};t.channels=i,"b2t"===t.direction?t.channelWidth=r:t.channelHeight=r}),200)}},{key:"resetWithCb",value:function(e,t){var n=this.danmu.container,o=this;o.channels&&o.channels.length>0&&["scroll","top","bottom"].forEach((function(e){for(var t=0;t<o.channels.length;t++)o.channels[t].queue[e].forEach((function(e){e.pauseMove(o.containerPos),e.remove()}))}));var r=n.getBoundingClientRect();o.width=r.width,o.height=r.height,o.danmu.config.area&&o.danmu.config.area.start>=0&&o.danmu.config.area.end>=o.danmu.config.area.start&&("b2t"===o.direction?o.width=o.width*(o.danmu.config.area.end-o.danmu.config.area.start):o.height=o.height*(o.danmu.config.area.end-o.danmu.config.area.start)),o.container=n;var i,a=/mobile/gi.test(navigator.userAgent)?10:12;i="b2t"===o.direction?Math.floor(o.width/a):Math.floor(o.height/a);for(var s=[],l=0;l<i;l++)s[l]={id:l,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};o.channels=s,o.channelHeight=a,e&&e(!0,t)}}]),e}();t.default=r,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=(o=n(0))&&o.__esModule?o:{default:o},a=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.duration=n.duration,this.id=n.id,this.container=t.container,this.start=n.start,this.prior=n.prior,this.color=n.color,this.bookChannelId=n.bookChannelId,this.direction=t.direction;var o=this;this.danmu.on("changeDirection",(function(e){o.direction=e}));var r=void 0;if(this.domObj=i.default.domObj,n.el&&1===n.el.nodeType)(r=this.domObj.use()).appendChild(i.default.copyDom(n.el));else if((r=this.domObj.use()).textContent=n.txt,n.style){var a=n.style;Object.keys(a).forEach((function(e){r.style[e]=a[e]}))}"top"===n.mode||"bottom"===n.mode?this.mode=n.mode:this.mode="scroll",this.el=r,this.status="waiting";var s=this.container.getBoundingClientRect();this.el.style.left=s.width+"px"}return r(e,[{key:"attach",value:function(){this.container.appendChild(this.el),this.elPos=this.el.getBoundingClientRect(),"b2t"===this.direction?(this.width=this.elPos.height,this.height=this.elPos.width):(this.width=this.elPos.width,this.height=this.elPos.height)}},{key:"detach",value:function(){this.container&&this.el&&(this.domObj.unuse(this.el),this.container.removeChild(this.el));var e=this;this.danmu.off("changeDirection",(function(t){e.direction=t})),this.el=null}},{key:"topInit",value:function(){if("b2t"===this.direction){var e=this.container.getBoundingClientRect();this.el.style.transformOrigin="left top",this.el.style.transform="translateX(-"+this.top+"px) translateY("+e.height+"px) translateZ(0px) rotate(90deg)",this.el.style.transition="transform 0s linear 0s"}else this.el.style.top=this.top+"px"}},{key:"pauseMove",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if("paused"!==this.status&&(this.status="paused",clearTimeout(this.removeTimer),this.el))if(this.el.style.willChange="auto","scroll"===this.mode){if(t){var n=((new Date).getTime()-this.moveTime)/1e3*this.moveV,o=0;o=this.moveMoreS-n>=0?"b2t"===this.direction?(this.moveMoreS-n)/this.moveContainerHeight*e.height:(this.moveMoreS-n)/this.moveContainerWidth*e.width:this.moveMoreS-n,"b2t"===this.direction?this.el.style.transform="translateX(-"+this.top+"px) translateY("+o+"px) translateZ(0px) rotate(90deg)":this.el.style.left=o+"px"}else"b2t"===this.direction?this.el.style.transform="translateX(-"+this.top+"px) translateY("+(this.el.getBoundingClientRect().top-e.top)+"px) translateZ(0px) rotate(90deg)":this.el.style.left=this.el.getBoundingClientRect().left-e.left+"px";"b2t"===this.direction?this.el.style.transition="transform 0s linear 0s":(this.el.style.transform="translateX(0px) translateY(0px) translateZ(0px)",this.el.style.transition="transform 0s linear 0s")}else this.pastDuration&&this.startTime?this.pastDuration=this.pastDuration+(new Date).getTime()-this.startTime:this.pastDuration=1}},{key:"startMove",value:function(e){var t=this;if(this.el&&"start"!==this.status)if(this.status="start",this.el.style.willChange="transform","scroll"===this.mode)if("b2t"===this.direction){this.moveV=(e.height+this.height)/this.duration*1e3;var n=(t.el.getBoundingClientRect().bottom-e.top)/this.moveV;this.el.style.transition="transform "+n+"s linear 0s",setTimeout((function(){t.el&&(t.el.style.transform="translateX(-"+t.top+"px) translateY(-"+t.height+"px) translateZ(0px) rotate(90deg)",t.moveTime=(new Date).getTime(),t.moveMoreS=t.el.getBoundingClientRect().top-e.top,t.moveContainerHeight=e.height,t.removeTimer=setTimeout(i,1e3*n))}),20)}else{this.moveV=(e.width+this.width)/this.duration*1e3;var o=(t.el.getBoundingClientRect().right-e.left)/this.moveV;this.el.style.transition="transform "+o+"s linear 0s",setTimeout((function(){t.el&&(t.el.style.transform="translateX(-"+(t.el.getBoundingClientRect().right-e.left)+"px) translateY(0px) translateZ(0px)",t.moveTime=(new Date).getTime(),t.moveMoreS=t.el.getBoundingClientRect().left-e.left,t.moveContainerWidth=e.width,t.removeTimer=setTimeout(i,1e3*o))}),20)}else{this.el.style.left="50%",this.el.style.margin="0 0 0 -"+this.width/2+"px",this.pastDuration||(this.pastDuration=1);var r=this.duration>=this.pastDuration?this.duration-this.pastDuration:0;this.removeTimer=setTimeout(i,r),this.startTime=(new Date).getTime()}function i(){if(t.el)if("scroll"===t.mode){var e=t.danmu.container.getBoundingClientRect(),n=t.el.getBoundingClientRect();"b2t"===t.direction?n&&n.bottom<=e.top+100?(t.status="end",t.remove()):(t.pauseMove(e),t.startMove(e)):n&&n.right<=e.left+100?(t.status="end",t.remove()):(t.pauseMove(e),t.startMove(e))}else t.status="end",t.remove()}}},{key:"remove",value:function(){var e=this;this.removeTimer&&clearTimeout(this.removeTimer),e.el&&e.el.parentNode&&(e.el.style.willChange="auto",this.danmu.off("changeDirection",(function(t){e.direction=t})),this.domObj.unuse(e.el),e.el.parentNode.removeChild(e.el),e.el=null,e.danmu.emit("bullet_remove",{bullet:e}))}}]),e}();t.default=a,e.exports=t.default},function(e,t,n){var o=n(27);"string"==typeof o&&(o=[[e.i,o,""]]),n(29)(o,{hmr:!0,transform:void 0,insertInto:void 0}),o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(28)(!1)).push([e.i,".danmu{overflow:hidden;-webkit-user-select:none;-moz-user-select:none;user-select:none;-ms-user-select:none}.danmu>*{position:absolute;white-space:nowrap}.danmu-switch{width:32px;height:20px;border-radius:100px;background-color:#ccc;-webkit-box-sizing:border-box;box-sizing:border-box;outline:none;cursor:pointer;position:relative;text-align:center;margin:10px auto}.danmu-switch.danmu-switch-active{padding-left:12px;background-color:#f85959}.danmu-switch span.txt{width:20px;height:20px;line-height:20px;text-align:center;display:block;border-radius:100px;background-color:#ffffff;-webkit-box-shadow:-2px 0 0 0 rgba(0, 0, 0, .04);box-shadow:-2px 0 0 0 rgba(0, 0, 0, .04);font-family:PingFangSC;font-size:10px;font-weight:500;color:#f44336}\n",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,o=e[1]||"",r=e[3];if(!r)return o;if(t&&"function"==typeof btoa){var i=(n=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),a=r.sources.map((function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"}));return[o].concat(a).concat([i]).join("\n")}return[o].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var o,r,i={},s=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,u=0,d=[],p=n(30);function f(e,t){for(var n=0;n<e.length;n++){var o=e[n],r=i[o.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](o.parts[a]);for(;a<o.parts.length;a++)r.parts.push(b(o.parts[a],t))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(b(o.parts[a],t));i[o.id]={id:o.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function g(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=d[d.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=a(e.insertAt)||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),y(t,e.attrs),g(e,t),t}function y(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function b(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=u++;n=c||(c=m(t)),o=_.bind(null,n,a,!1),r=_.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),g(e,t),t}(t),o=function(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=p(o)),r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),r=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),o=function(e,t){var n=t.css,o=t.media;if(o&&e.setAttribute("media",o),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){v(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=("undefined"==typeof document?"undefined":a(document)))throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==a(t.attrs)?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return f(n,t),function(e){for(var o=[],r=0;r<n.length;r++){var a=n[r];(s=i[a.id]).refs--,o.push(s)}for(e&&f(h(e,t),t),r=0;r<o.length;r++){var s;if(0===(s=o[r]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var x,w=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join("\n")});function _(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=w(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")}))}}])},"object"==a(t)&&"object"==a(e)?e.exports=i():(o=[],void 0===(r="function"==typeof(n=i)?n.apply(t,o):n)||(e.exports=r))}).call(this,n(/*! ./../../webpack/buildin/module.js */"./node_modules/webpack/buildin/module.js")(e))},"./node_modules/downloadjs/download.js":
/*!*********************************************!*\
  !*** ./node_modules/downloadjs/download.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r,i;"function"==typeof Symbol&&Symbol.iterator;r=[],void 0===(i="function"==typeof(o=function(){return function e(t,n,o){var r,i,a=window,s="application/octet-stream",l=o||s,c=t,u=!n&&!o&&c,d=document.createElement("a"),p=function(e){return String(e)},f=a.Blob||a.MozBlob||a.WebKitBlob||p,h=n||"download";if(f=f.call?f.bind(a):Blob,"true"===String(this)&&(l=(c=[c,l])[0],c=c[1]),u&&u.length<2048&&(h=u.split("/").pop().split("?")[0],d.href=u,-1!==d.href.indexOf(u))){var g=new XMLHttpRequest;return g.open("GET",u,!0),g.responseType="blob",g.onload=function(t){e(t.target.response,h,s)},setTimeout((function(){g.send()}),0),g}if(/^data:([\w+-]+\/[\w+.-]+)?[,;]/.test(c)){if(!(c.length>2096103.424&&f!==p))return navigator.msSaveBlob?navigator.msSaveBlob(b(c),h):x(c);l=(c=b(c)).type||s}else if(/([\x80-\xff])/.test(c)){for(var v=0,m=new Uint8Array(c.length),y=m.length;v<y;++v)m[v]=c.charCodeAt(v);c=new f([m],{type:l})}function b(e){for(var t=e.split(/[:;,]/),n=t[1],o=("base64"==t[2]?atob:decodeURIComponent)(t.pop()),r=o.length,i=0,a=new Uint8Array(r);i<r;++i)a[i]=o.charCodeAt(i);return new f([a],{type:n})}function x(e,t){if("download"in d)return d.href=e,d.setAttribute("download",h),d.className="download-js-link",d.innerHTML="downloading...",d.style.display="none",document.body.appendChild(d),setTimeout((function(){d.click(),document.body.removeChild(d),!0===t&&setTimeout((function(){a.URL.revokeObjectURL(d.href)}),250)}),66),!0;if(/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent))return/^data:/.test(e)&&(e="data:"+e.replace(/^data:([\w\/\-\+]+)/,s)),window.open(e)||confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.")&&(location.href=e),!0;var n=document.createElement("iframe");document.body.appendChild(n),!t&&/^data:/.test(e)&&(e="data:"+e.replace(/^data:([\w\/\-\+]+)/,s)),n.src=e,setTimeout((function(){document.body.removeChild(n)}),333)}if(r=c instanceof f?c:new f([c],{type:l}),navigator.msSaveBlob)return navigator.msSaveBlob(r,h);if(a.URL)x(a.URL.createObjectURL(r),!0);else{if("string"==typeof r||r.constructor===p)try{return x("data:"+l+";base64,"+a.btoa(r))}catch(e){return x("data:"+l+","+encodeURIComponent(r))}(i=new FileReader).onload=function(e){x(this.result)},i.readAsDataURL(r)}return!0}})?o.apply(t,r):o)||(e.exports=i)},"./node_modules/draggabilly/draggabilly.js":
/*!*************************************************!*\
  !*** ./node_modules/draggabilly/draggabilly.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r;"function"==typeof Symbol&&Symbol.iterator;
/*!
 * Draggabilly v2.2.0
 * Make that shiz draggable
 * https://draggabilly.desandro.com
 * MIT license
 */
!function(i,a){o=[n(/*! get-size/get-size */"./node_modules/get-size/get-size.js"),n(/*! unidragger/unidragger */"./node_modules/unidragger/unidragger.js")],void 0===(r=function(e,t){return function(e,t,n){function o(e,t){for(var n in t)e[n]=t[n];return e}var r=e.jQuery;function i(e,t){this.element="string"==typeof e?document.querySelector(e):e,r&&(this.$element=r(this.element)),this.options=o({},this.constructor.defaults),this.option(t),this._create()}var a=i.prototype=Object.create(n.prototype);i.defaults={},a.option=function(e){o(this.options,e)};var s={relative:!0,absolute:!0,fixed:!0};function l(e,t,n){return n=n||"round",t?Math[n](e/t)*t:e}a._create=function(){this.position={},this._getPosition(),this.startPoint={x:0,y:0},this.dragPoint={x:0,y:0},this.startPosition=o({},this.position);var e=getComputedStyle(this.element);s[e.position]||(this.element.style.position="relative"),this.on("pointerDown",this.onPointerDown),this.on("pointerMove",this.onPointerMove),this.on("pointerUp",this.onPointerUp),this.enable(),this.setHandles()},a.setHandles=function(){this.handles=this.options.handle?this.element.querySelectorAll(this.options.handle):[this.element],this.bindHandles()},a.dispatchEvent=function(e,t,n){var o=[t].concat(n);this.emitEvent(e,o),this.dispatchJQueryEvent(e,t,n)},a.dispatchJQueryEvent=function(t,n,o){var r=e.jQuery;if(r&&this.$element){var i=r.Event(n);i.type=t,this.$element.trigger(i,o)}},a._getPosition=function(){var e=getComputedStyle(this.element),t=this._getPositionCoord(e.left,"width"),n=this._getPositionCoord(e.top,"height");this.position.x=isNaN(t)?0:t,this.position.y=isNaN(n)?0:n,this._addTransformPosition(e)},a._getPositionCoord=function(e,n){if(-1!=e.indexOf("%")){var o=t(this.element.parentNode);return o?parseFloat(e)/100*o[n]:0}return parseInt(e,10)},a._addTransformPosition=function(e){var t=e.transform;if(0===t.indexOf("matrix")){var n=t.split(","),o=0===t.indexOf("matrix3d")?12:4,r=parseInt(n[o],10),i=parseInt(n[o+1],10);this.position.x+=r,this.position.y+=i}},a.onPointerDown=function(e,t){this.element.classList.add("is-pointer-down"),this.dispatchJQueryEvent("pointerDown",e,[t])},a.dragStart=function(e,t){this.isEnabled&&(this._getPosition(),this.measureContainment(),this.startPosition.x=this.position.x,this.startPosition.y=this.position.y,this.setLeftTop(),this.dragPoint.x=0,this.dragPoint.y=0,this.element.classList.add("is-dragging"),this.dispatchEvent("dragStart",e,[t]),this.animate())},a.measureContainment=function(){var e=this.getContainer();if(e){var n=t(this.element),o=t(e),r=this.element.getBoundingClientRect(),i=e.getBoundingClientRect(),a=o.borderLeftWidth+o.borderRightWidth,s=o.borderTopWidth+o.borderBottomWidth,l=this.relativeStartPosition={x:r.left-(i.left+o.borderLeftWidth),y:r.top-(i.top+o.borderTopWidth)};this.containSize={width:o.width-a-l.x-n.width,height:o.height-s-l.y-n.height}}},a.getContainer=function(){var e=this.options.containment;if(e)return e instanceof HTMLElement?e:"string"==typeof e?document.querySelector(e):this.element.parentNode},a.onPointerMove=function(e,t,n){this.dispatchJQueryEvent("pointerMove",e,[t,n])},a.dragMove=function(e,t,n){if(this.isEnabled){var o=n.x,r=n.y,i=this.options.grid,a=i&&i[0],s=i&&i[1];o=l(o,a),r=l(r,s),o=this.containDrag("x",o,a),r=this.containDrag("y",r,s),o="y"==this.options.axis?0:o,r="x"==this.options.axis?0:r,this.position.x=this.startPosition.x+o,this.position.y=this.startPosition.y+r,this.dragPoint.x=o,this.dragPoint.y=r,this.dispatchEvent("dragMove",e,[t,n])}},a.containDrag=function(e,t,n){if(!this.options.containment)return t;var o="x"==e?"width":"height",r=l(-this.relativeStartPosition[e],n,"ceil"),i=this.containSize[o];return i=l(i,n,"floor"),Math.max(r,Math.min(i,t))},a.onPointerUp=function(e,t){this.element.classList.remove("is-pointer-down"),this.dispatchJQueryEvent("pointerUp",e,[t])},a.dragEnd=function(e,t){this.isEnabled&&(this.element.style.transform="",this.setLeftTop(),this.element.classList.remove("is-dragging"),this.dispatchEvent("dragEnd",e,[t]))},a.animate=function(){if(this.isDragging){this.positionDrag();var e=this;requestAnimationFrame((function(){e.animate()}))}},a.setLeftTop=function(){this.element.style.left=this.position.x+"px",this.element.style.top=this.position.y+"px"},a.positionDrag=function(){this.element.style.transform="translate3d( "+this.dragPoint.x+"px, "+this.dragPoint.y+"px, 0)"},a.staticClick=function(e,t){this.dispatchEvent("staticClick",e,[t])},a.setPosition=function(e,t){this.position.x=e,this.position.y=t,this.setLeftTop()},a.enable=function(){this.isEnabled=!0},a.disable=function(){this.isEnabled=!1,this.isDragging&&this.dragEnd()},a.destroy=function(){this.disable(),this.element.style.transform="",this.element.style.left="",this.element.style.top="",this.element.style.position="",this.unbindHandles(),this.$element&&this.$element.removeData("draggabilly")},a._init=function(){},r&&r.bridget&&r.bridget("draggabilly",i);return i}(i,e,t)}.apply(t,o))||(e.exports=r)}(window)},"./node_modules/es5-ext/function/noop.js":
/*!***********************************************!*\
  !*** ./node_modules/es5-ext/function/noop.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){}},"./node_modules/es5-ext/object/assign/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/object/assign/is-implemented.js")()?Object.assign:n(/*! ./shim */"./node_modules/es5-ext/object/assign/shim.js")},"./node_modules/es5-ext/object/assign/is-implemented.js":
/*!**************************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/is-implemented.js ***!
  \**************************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}},"./node_modules/es5-ext/object/assign/shim.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/shim.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../keys */"./node_modules/es5-ext/object/keys/index.js"),r=n(/*! ../valid-value */"./node_modules/es5-ext/object/valid-value.js"),i=Math.max;e.exports=function(e,t){var n,a,s,l=i(arguments.length,2);for(e=Object(r(e)),s=function(o){try{e[o]=t[o]}catch(e){n||(n=e)}},a=1;a<l;++a)t=arguments[a],o(t).forEach(s);if(void 0!==n)throw n;return e}},"./node_modules/es5-ext/object/is-value.js":
/*!*************************************************!*\
  !*** ./node_modules/es5-ext/object/is-value.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../function/noop */"./node_modules/es5-ext/function/noop.js")();e.exports=function(e){return e!==o&&null!==e}},"./node_modules/es5-ext/object/keys/index.js":
/*!***************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/object/keys/is-implemented.js")()?Object.keys:n(/*! ./shim */"./node_modules/es5-ext/object/keys/shim.js")},"./node_modules/es5-ext/object/keys/is-implemented.js":
/*!************************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/is-implemented.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){try{return Object.keys("primitive"),!0}catch(e){return!1}}},"./node_modules/es5-ext/object/keys/shim.js":
/*!**************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/shim.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../is-value */"./node_modules/es5-ext/object/is-value.js"),r=Object.keys;e.exports=function(e){return r(o(e)?Object(e):e)}},"./node_modules/es5-ext/object/normalize-options.js":
/*!**********************************************************!*\
  !*** ./node_modules/es5-ext/object/normalize-options.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js"),r=Array.prototype.forEach,i=Object.create,a=function(e,t){var n;for(n in e)t[n]=e[n]};e.exports=function(e){var t=i(null);return r.call(arguments,(function(e){o(e)&&a(Object(e),t)})),t}},"./node_modules/es5-ext/object/valid-callable.js":
/*!*******************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-callable.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e}},"./node_modules/es5-ext/object/valid-value.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-value.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js");e.exports=function(e){if(!o(e))throw new TypeError("Cannot use null or undefined");return e}},"./node_modules/es5-ext/string/#/contains/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/index.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/string/#/contains/is-implemented.js")()?String.prototype.contains:n(/*! ./shim */"./node_modules/es5-ext/string/#/contains/shim.js")},"./node_modules/es5-ext/string/#/contains/is-implemented.js":
/*!******************************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/is-implemented.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o="razdwatrzy";e.exports=function(){return"function"==typeof o.contains&&(!0===o.contains("dwa")&&!1===o.contains("foo"))}},"./node_modules/es5-ext/string/#/contains/shim.js":
/*!********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/shim.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=String.prototype.indexOf;e.exports=function(e){return o.call(this,e,arguments[1])>-1}},"./node_modules/ev-emitter/ev-emitter.js":
/*!***********************************************!*\
  !*** ./node_modules/ev-emitter/ev-emitter.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r;"function"==typeof Symbol&&Symbol.iterator;"undefined"!=typeof window&&window,void 0===(r="function"==typeof(o=function(){function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var n=this._events=this._events||{},o=n[e]=n[e]||[];return-1==o.indexOf(t)&&o.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var n=this._onceEvents=this._onceEvents||{};return(n[e]=n[e]||{})[t]=!0,this}},t.off=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){var o=n.indexOf(t);return-1!=o&&n.splice(o,1),this}},t.emitEvent=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){n=n.slice(0),t=t||[];for(var o=this._onceEvents&&this._onceEvents[e],r=0;r<n.length;r++){var i=n[r];o&&o[i]&&(this.off(e,i),delete o[i]),i.apply(this,t)}return this}},t.allOff=function(){delete this._events,delete this._onceEvents},e})?o.call(t,n,t,e):o)||(e.exports=r)},"./node_modules/event-emitter/index.js":
/*!*********************************************!*\
  !*** ./node_modules/event-emitter/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r,i,a,s,l,c,u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d=n(/*! d */"./node_modules/d/index.js"),p=n(/*! es5-ext/object/valid-callable */"./node_modules/es5-ext/object/valid-callable.js"),f=Function.prototype.apply,h=Function.prototype.call,g=Object.create,v=Object.defineProperty,m=Object.defineProperties,y=Object.prototype.hasOwnProperty,b={configurable:!0,enumerable:!1,writable:!0};r=function(e,t){var n,r;return p(t),r=this,o.call(this,e,n=function(){i.call(r,e,n),f.call(t,this,arguments)}),n.__eeOnceListener__=t,this},s={on:o=function(e,t){var n;return p(t),y.call(this,"__ee__")?n=this.__ee__:(n=b.value=g(null),v(this,"__ee__",b),b.value=null),n[e]?"object"===u(n[e])?n[e].push(t):n[e]=[n[e],t]:n[e]=t,this},once:r,off:i=function(e,t){var n,o,r,i;if(p(t),!y.call(this,"__ee__"))return this;if(!(n=this.__ee__)[e])return this;if("object"===(void 0===(o=n[e])?"undefined":u(o)))for(i=0;r=o[i];++i)r!==t&&r.__eeOnceListener__!==t||(2===o.length?n[e]=o[i?0:1]:o.splice(i,1));else o!==t&&o.__eeOnceListener__!==t||delete n[e];return this},emit:a=function(e){var t,n,o,r,i;if(y.call(this,"__ee__")&&(r=this.__ee__[e]))if("object"===(void 0===r?"undefined":u(r))){for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];for(r=r.slice(),t=0;o=r[t];++t)f.call(o,this,i)}else switch(arguments.length){case 1:h.call(r,this);break;case 2:h.call(r,this,arguments[1]);break;case 3:h.call(r,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];f.call(r,this,i)}}},l={on:d(o),once:d(r),off:d(i),emit:d(a)},c=m({},l),e.exports=t=function(e){return null==e?g(c):m(Object(e),l)},t.methods=s},"./node_modules/get-size/get-size.js":
/*!*******************************************!*\
  !*** ./node_modules/get-size/get-size.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};window,void 0===(r="function"==typeof(o=function(){function e(e){var t=parseFloat(e);return-1==e.indexOf("%")&&!isNaN(t)&&t}var t="undefined"==typeof console?function(){}:function(e){console.error(e)},n=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],o=n.length;function r(e){var n=getComputedStyle(e);return n||t("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),n}var a,s=!1;function l(t){if(function(){if(!s){s=!0;var t=document.createElement("div");t.style.width="200px",t.style.padding="1px 2px 3px 4px",t.style.borderStyle="solid",t.style.borderWidth="1px 2px 3px 4px",t.style.boxSizing="border-box";var n=document.body||document.documentElement;n.appendChild(t);var o=r(t);a=200==Math.round(e(o.width)),l.isBoxSizeOuter=a,n.removeChild(t)}}(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==(void 0===t?"undefined":i(t))&&t.nodeType){var c=r(t);if("none"==c.display)return function(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0;t<o;t++)e[n[t]]=0;return e}();var u={};u.width=t.offsetWidth,u.height=t.offsetHeight;for(var d=u.isBorderBox="border-box"==c.boxSizing,p=0;p<o;p++){var f=n[p],h=c[f],g=parseFloat(h);u[f]=isNaN(g)?0:g}var v=u.paddingLeft+u.paddingRight,m=u.paddingTop+u.paddingBottom,y=u.marginLeft+u.marginRight,b=u.marginTop+u.marginBottom,x=u.borderLeftWidth+u.borderRightWidth,w=u.borderTopWidth+u.borderBottomWidth,_=d&&a,k=e(c.width);!1!==k&&(u.width=k+(_?0:v+x));var E=e(c.height);return!1!==E&&(u.height=E+(_?0:m+w)),u.innerWidth=u.width-(v+x),u.innerHeight=u.height-(m+w),u.outerWidth=u.width+y,u.outerHeight=u.height+b,u}}return l})?o.call(t,n,t,e):o)||(e.exports=r)},"./node_modules/pasition/dist/pasition.js":
/*!************************************************!*\
  !*** ./node_modules/pasition/dist/pasition.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r,i,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};i=function(){var e=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],o=!0,r=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{!o&&s.return&&s.return()}finally{if(r)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},t=2*Math.PI,n=function(e,t,n,o,r,i,a){var s=e.x,l=e.y;return{x:o*(s*=t)-r*(l*=n)+i,y:r*s+o*l+a}},o=function(e,t){var n=4/3*Math.tan(t/4),o=Math.cos(e),r=Math.sin(e),i=Math.cos(e+t),a=Math.sin(e+t);return[{x:o-r*n,y:r+o*n},{x:i+a*n,y:a-i*n},{x:i,y:a}]},r=function(e,t,n,o){var r=e*o-t*n<0?-1:1,i=(e*n+t*o)/(Math.sqrt(e*e+t*t)*Math.sqrt(e*e+t*t));return i>1&&(i=1),i<-1&&(i=-1),r*Math.acos(i)},i=function(i){var a=i.px,s=i.py,l=i.cx,c=i.cy,u=i.rx,d=i.ry,p=i.xAxisRotation,f=void 0===p?0:p,h=i.largeArcFlag,g=void 0===h?0:h,v=i.sweepFlag,m=void 0===v?0:v,y=[];if(0===u||0===d)return[];var b=Math.sin(f*t/360),x=Math.cos(f*t/360),w=x*(a-l)/2+b*(s-c)/2,_=-b*(a-l)/2+x*(s-c)/2;if(0===w&&0===_)return[];u=Math.abs(u),d=Math.abs(d);var k=Math.pow(w,2)/Math.pow(u,2)+Math.pow(_,2)/Math.pow(d,2);k>1&&(u*=Math.sqrt(k),d*=Math.sqrt(k));var E=function(e,n,o,i,a,s,l,c,u,d,p,f){var h=Math.pow(a,2),g=Math.pow(s,2),v=Math.pow(p,2),m=Math.pow(f,2),y=h*g-h*m-g*v;y<0&&(y=0),y/=h*m+g*v;var b=(y=Math.sqrt(y)*(l===c?-1:1))*a/s*f,x=y*-s/a*p,w=d*b-u*x+(e+o)/2,_=u*b+d*x+(n+i)/2,k=(p-b)/a,E=(f-x)/s,C=(-p-b)/a,S=(-f-x)/s,P=r(1,0,k,E),j=r(k,E,C,S);return 0===c&&j>0&&(j-=t),1===c&&j<0&&(j+=t),[w,_,P,j]}(a,s,l,c,u,d,g,m,b,x,w,_),C=e(E,4),S=C[0],P=C[1],j=C[2],T=C[3],M=Math.max(Math.ceil(Math.abs(T)/(t/4)),1);T/=M;for(var O=0;O<M;O++)y.push(o(j,T)),j+=T;return y.map((function(e){var t=n(e[0],u,d,x,b,S,P),o=t.x,r=t.y,i=n(e[1],u,d,x,b,S,P),a=i.x,s=i.y,l=n(e[2],u,d,x,b,S,P);return{x1:o,y1:r,x2:a,y2:s,x:l.x,y:l.y}}))},a={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0},s=/([astvzqmhlc])([^astvzqmhlc]*)/gi,l=/-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi;function c(e){var t=e[0][0],n=e[0][1],o=t,r=n;return e.forEach((function(e){var i=e[0],a=e[2],s=e[4],l=e[6],c=e[1],u=e[3],d=e[5],p=e[7];t=Math.min(t,i,a,s,l),n=Math.min(n,c,u,d,p),o=Math.max(o,i,a,s,l),r=Math.max(r,c,u,d,p)})),[t,n,o,r]}function u(e,t){var n=function(e){for(var t=[],n=0;n<e;n++){for(var o=[],r=0;r<e;r++){var i=r+n;i>e-1&&(i-=e),o[i]=r}t.push(o)}return t}(e.length),o=[];n.forEach((function(n){var r=0,i=0;n.forEach((function(n){var o,a,s,l,c,u,d,p,f,h,g,v,m,y,b,x,w,_;r+=(o=e[n],a=t[i++],s=o[0],l=o[2],c=o[4],u=o[6],d=o[1],p=o[3],f=o[5],h=o[7],g=a[0],v=a[2],m=a[4],y=a[6],b=a[1],x=a[3],w=a[5],_=a[7],Math.sqrt(Math.pow(g-s,2)+Math.pow(b-d,2))+Math.sqrt(Math.pow(v-l,2)+Math.pow(x-p,2))+Math.sqrt(Math.pow(m-c,2)+Math.pow(w-f,2))+Math.sqrt(Math.pow(y-u,2)+Math.pow(_-h,2)))})),o.push({index:n,distance:r})})),o.sort((function(e,t){return e.distance-t.distance}));var r=[];return o[0].index.forEach((function(t){r.push(e[t])})),r}function d(e,t){var n=function(e){for(var t=[],n=0;n<e;n++)t.push(n);return o=[],r=[],function e(t){var n,i;for(n=0;n<t.length;n++)i=t.splice(n,1)[0],r.push(i),0==t.length&&o.push(r.slice()),e(t),t.splice(n,0,i),r.pop();return o}(t);var o,r}(e.length),o=[];n.forEach((function(n){var r=0;n.forEach((function(n){var o,i;r+=(o=c(e[n]),i=c(t[n]),Math.sqrt(Math.pow(o[0]-i[0],2)+Math.pow(o[1]-i[1],2))+Math.sqrt(Math.pow(o[2]-i[2],2)+Math.pow(o[3]-i[3],2)))})),o.push({index:n,distance:r})})),o.sort((function(e,t){return e.distance-t.distance}));var r=[];return o[0].index.forEach((function(t){r.push(e[t])})),r}var p={};function f(e,t,n,o,r,i,a,s,l,c){var u=(n-e)*l+e,d=(o-t)*l+t,p=(r-n)*l+n,f=(i-o)*l+o,h=(p-u)*l+u,g=(f-d)*l+d,v=(((a-r)*l+r-p)*l+p-h)*l+h,m=(((s-i)*l+i-f)*l+f-g)*l+g;return c?[v,m,h,g,u,d,e,t]:[e,t,u,d,h,g,v,m]}function h(e,t){for(var n=function(t){var n=e[e.length-1],o=[];n.forEach((function(e){o.push(e.slice(0))})),e.push(o)},o=0;o<t;o++)n()}return p.parser=function(e){var t=[];return e.replace(s,(function(e,n,o){var r=n.toLowerCase();for(o=function(e){var t=e.match(l);return t?t.map(Number):[]}(o),"m"==r&&o.length>2&&(t.push([n].concat(o.splice(0,2))),r="l",n="m"==n?"l":"L");;){if(o.length==a[r])return o.unshift(n),t.push(o);if(o.length<a[r])throw new Error("malformed path data");t.push([n].concat(o.splice(0,a[r])))}})),t},p.lerpCurve=function(e,t,n){return p.lerpPoints(e[0],e[1],t[0],t[1],n).concat(p.lerpPoints(e[2],e[3],t[2],t[3],n)).concat(p.lerpPoints(e[4],e[5],t[4],t[5],n)).concat(p.lerpPoints(e[6],e[7],t[6],t[7],n))},p.lerpPoints=function(e,t,n,o,r){return[e+(n-e)*r,t+(o-t)*r]},p.q2b=function(e,t,n,o,r,i){return[e,t,(e+2*n)/3,(t+2*o)/3,(r+2*n)/3,(i+2*o)/3,r,i]},p.path2shapes=function(e){for(var t=p.parser(e),n=0,o=0,r=0,a=t.length,s=[],l=null,c=void 0,u=void 0,d=void 0,f=void 0,h=void 0,g=void 0,v=void 0;r<a;r++){var m=t[r],y=m[0],b=t[r-1];switch(y){case"m":s[h=s.length]=[],l=s[h],n+=m[1],o+=m[2];break;case"M":s[h=s.length]=[],l=s[h],n=m[1],o=m[2];break;case"l":l.push([n,o,n,o,n,o,n+m[1],o+m[2]]),n+=m[1],o+=m[2];break;case"L":l.push([n,o,m[1],m[2],m[1],m[2],m[1],m[2]]),n=m[1],o=m[2];break;case"h":l.push([n,o,n,o,n,o,n+m[1],o]),n+=m[1];break;case"H":l.push([n,o,m[1],o,m[1],o,m[1],o]),n=m[1];break;case"v":l.push([n,o,n,o,n,o,n,o+m[1]]),o+=m[1];break;case"V":l.push([n,o,n,m[1],n,m[1],n,m[1]]),o=m[1];break;case"C":l.push([n,o,m[1],m[2],m[3],m[4],m[5],m[6]]),n=m[5],o=m[6];break;case"S":"C"===b[0]||"c"===b[0]?l.push([n,o,n+b[5]-b[3],o+b[6]-b[4],m[1],m[2],m[3],m[4]]):"S"!==b[0]&&"s"!==b[0]||l.push([n,o,n+b[3]-b[1],o+b[4]-b[2],m[1],m[2],m[3],m[4]]),n=m[3],o=m[4];break;case"c":l.push([n,o,n+m[1],o+m[2],n+m[3],o+m[4],n+m[5],o+m[6]]),n+=m[5],o+=m[6];break;case"s":"C"===b[0]||"c"===b[0]?l.push([n,o,n+b[5]-b[3],o+b[6]-b[4],n+m[1],o+m[2],n+m[3],o+m[4]]):"S"!==b[0]&&"s"!==b[0]||l.push([n,o,n+b[3]-b[1],o+b[4]-b[2],n+m[1],o+m[2],n+m[3],o+m[4]]),n+=m[3],o+=m[4];break;case"a":v=(g=i({rx:m[1],ry:m[2],px:n,py:o,xAxisRotation:m[3],largeArcFlag:m[4],sweepFlag:m[5],cx:n+m[6],cy:o+m[7]}))[g.length-1],g.forEach((function(e,t){0===t?l.push([n,o,e.x1,e.y1,e.x2,e.y2,e.x,e.y]):l.push([g[t-1].x,g[t-1].y,e.x1,e.y1,e.x2,e.y2,e.x,e.y])})),n=v.x,o=v.y;break;case"A":v=(g=i({rx:m[1],ry:m[2],px:n,py:o,xAxisRotation:m[3],largeArcFlag:m[4],sweepFlag:m[5],cx:m[6],cy:m[7]}))[g.length-1],g.forEach((function(e,t){0===t?l.push([n,o,e.x1,e.y1,e.x2,e.y2,e.x,e.y]):l.push([g[t-1].x,g[t-1].y,e.x1,e.y1,e.x2,e.y2,e.x,e.y])})),n=v.x,o=v.y;break;case"Q":l.push(p.q2b(n,o,m[1],m[2],m[3],m[4])),n=m[3],o=m[4];break;case"q":l.push(p.q2b(n,o,n+m[1],o+m[2],m[3]+n,m[4]+o)),n+=m[3],o+=m[4];break;case"T":"Q"===b[0]||"q"===b[0]?(d=n+b[3]-b[1],f=o+b[4]-b[2],l.push(p.q2b(n,o,d,f,m[1],m[2]))):"T"!==b[0]&&"t"!==b[0]||(l.push(p.q2b(n,o,n+n-d,o+o-f,m[1],m[2])),d=n+n-d,f=o+o-f),n=m[1],o=m[2];break;case"t":"Q"===b[0]||"q"===b[0]?(d=n+b[3]-b[1],f=o+b[4]-b[2],l.push(p.q2b(n,o,d,f,n+m[1],o+m[2]))):"T"!==b[0]&&"t"!==b[0]||(l.push(p.q2b(n,o,n+n-d,o+o-f,n+m[1],o+m[2])),d=n+n-d,f=o+o-f),n+=m[1],o+=m[2];break;case"Z":case"z":c=l[0][0],u=l[0][1],l.push([n,o,c,u,c,u,c,u])}}return s},p._upCurves=function(e,t){for(var n=0,o=0,r=e.length;n<t;n++)e.push(e[o].slice(0)),++o>r-1&&(o-=r)},p._splitCurves=function(e,t){for(var n,o,r,i,a,s,l,c,u,d=0,p=0;d<t;d++){var h=e[p],g=(n=h[0],o=h[1],r=h[2],i=h[3],a=h[4],s=h[5],l=h[6],c=h[7],{left:f(n,o,r,i,a,s,l,c,u=.5),right:f(l,c,a,s,r,i,n,o,1-u,!0)});e.splice(p,1),e.splice(p,0,g.left,g.right),(p+=2)>=e.length-1&&(p=0)}},p.lerp=function(e,t,n){return p._lerp(p.path2shapes(e),p.path2shapes(t),n)},p.MIM_CURVES_COUNT=100,p._preprocessing=function(e,t){var n=e.length,o=t.length,r=JSON.parse(JSON.stringify(e)),i=JSON.parse(JSON.stringify(t));return n>o?h(i,n-o):n<o&&h(r,o-n),(r=d(r,i)).forEach((function(e,t){var n=e.length,o=i[t].length;n>o?n<p.MIM_CURVES_COUNT?(p._splitCurves(e,p.MIM_CURVES_COUNT-n),p._splitCurves(i[t],p.MIM_CURVES_COUNT-o)):p._splitCurves(i[t],n-o):n<o&&(o<p.MIM_CURVES_COUNT?(p._splitCurves(e,p.MIM_CURVES_COUNT-n),p._splitCurves(i[t],p.MIM_CURVES_COUNT-o)):p._splitCurves(e,o-n))})),r.forEach((function(e,t){r[t]=u(e,i[t])})),[r,i]},p._lerp=function(e,t,n){var o=[];return e.forEach((function(e,r){var i=[];e.forEach((function(e,o){i.push(p.lerpCurve(e,t[r][o],n))})),o.push(i)})),o},p.animate=function(e){var t=p.path2shapes(e.from),n=p.path2shapes(e.to),o=p._preprocessing(t,n),r=new Date,i=e.end||function(){},a=e.progress||function(){},s=e.begin||function(){},l=e.easing||function(e){return e},c=null,u=null,d=e.time;s(t),function e(){var t=new Date-r;if(t>=d)return a(u=n,1),i(u),void cancelAnimationFrame(c);var s=l(t/d);u=p._lerp(o[0],o[1],s),a(u,s),c=requestAnimationFrame(e)}()},p},"object"===a(t)&&void 0!==e?e.exports=i():void 0===(r="function"==typeof(o=i)?o.call(t,n,t,e):o)||(e.exports=r)},"./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var o,r,i={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),s=function(e){return document.querySelector(e)},l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=s.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,u=0,d=[],p=n(/*! ./urls */"./node_modules/style-loader/lib/urls.js");function f(e,t){for(var n=0;n<e.length;n++){var o=e[n],r=i[o.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](o.parts[a]);for(;a<o.parts.length;a++)r.parts.push(b(o.parts[a],t))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(b(o.parts[a],t));i[o.id]={id:o.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function g(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=d[d.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function m(e){var t=document.createElement("style");return e.attrs.type="text/css",y(t,e.attrs),g(e,t),t}function y(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function b(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=u++;n=c||(c=m(t)),o=_.bind(null,n,a,!1),r=_.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",y(t,e.attrs),g(e,t),t}(t),o=E.bind(null,n,t),r=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),o=k.bind(null,n),r=function(){v(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return f(n,t),function(e){for(var o=[],r=0;r<n.length;r++){var a=n[r];(s=i[a.id]).refs--,o.push(s)}e&&f(h(e,t),t);for(r=0;r<o.length;r++){var s;if(0===(s=o[r]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var x,w=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join("\n")});function _(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=w(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function k(e,t){var n=t.css,o=t.media;if(o&&e.setAttribute("media",o),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function E(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=p(o)),r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}},"./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")}))}},"./node_modules/type/function/is.js":
/*!******************************************!*\
  !*** ./node_modules/type/function/is.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../prototype/is */"./node_modules/type/prototype/is.js");e.exports=function(e){if("function"!=typeof e)return!1;if(!hasOwnProperty.call(e,"length"))return!1;try{if("number"!=typeof e.length)return!1;if("function"!=typeof e.call)return!1;if("function"!=typeof e.apply)return!1}catch(e){return!1}return!o(e)}},"./node_modules/type/object/is.js":
/*!****************************************!*\
  !*** ./node_modules/type/object/is.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=n(/*! ../value/is */"./node_modules/type/value/is.js"),i={object:!0,function:!0,undefined:!0};e.exports=function(e){return!!r(e)&&hasOwnProperty.call(i,void 0===e?"undefined":o(e))}},"./node_modules/type/plain-function/is.js":
/*!************************************************!*\
  !*** ./node_modules/type/plain-function/is.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../function/is */"./node_modules/type/function/is.js"),r=/^\s*class[\s{\/}]/,i=Function.prototype.toString;e.exports=function(e){return!!o(e)&&!r.test(i.call(e))}},"./node_modules/type/prototype/is.js":
/*!*******************************************!*\
  !*** ./node_modules/type/prototype/is.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../object/is */"./node_modules/type/object/is.js");e.exports=function(e){if(!o(e))return!1;try{return!!e.constructor&&e.constructor.prototype===e}catch(e){return!1}}},"./node_modules/type/value/is.js":
/*!***************************************!*\
  !*** ./node_modules/type/value/is.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){return null!=e}},"./node_modules/unidragger/unidragger.js":
/*!***********************************************!*\
  !*** ./node_modules/unidragger/unidragger.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r;"function"==typeof Symbol&&Symbol.iterator;
/*!
 * Unidragger v2.3.0
 * Draggable base class
 * MIT license
 */
!function(i,a){o=[n(/*! unipointer/unipointer */"./node_modules/unipointer/unipointer.js")],void 0===(r=function(e){return function(e,t){function n(){}var o=n.prototype=Object.create(t.prototype);o.bindHandles=function(){this._bindHandles(!0)},o.unbindHandles=function(){this._bindHandles(!1)},o._bindHandles=function(t){for(var n=(t=void 0===t||t)?"addEventListener":"removeEventListener",o=t?this._touchActionValue:"",r=0;r<this.handles.length;r++){var i=this.handles[r];this._bindStartEvent(i,t),i[n]("click",this),e.PointerEvent&&(i.style.touchAction=o)}},o._touchActionValue="none",o.pointerDown=function(e,t){this.okayPointerDown(e)&&(this.pointerDownPointer=t,e.preventDefault(),this.pointerDownBlur(),this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,t]))};var r={TEXTAREA:!0,INPUT:!0,SELECT:!0,OPTION:!0},i={radio:!0,checkbox:!0,button:!0,submit:!0,image:!0,file:!0};return o.okayPointerDown=function(e){var t=r[e.target.nodeName],n=i[e.target.type],o=!t||n;return o||this._pointerReset(),o},o.pointerDownBlur=function(){var e=document.activeElement;e&&e.blur&&e!=document.body&&e.blur()},o.pointerMove=function(e,t){var n=this._dragPointerMove(e,t);this.emitEvent("pointerMove",[e,t,n]),this._dragMove(e,t,n)},o._dragPointerMove=function(e,t){var n={x:t.pageX-this.pointerDownPointer.pageX,y:t.pageY-this.pointerDownPointer.pageY};return!this.isDragging&&this.hasDragStarted(n)&&this._dragStart(e,t),n},o.hasDragStarted=function(e){return Math.abs(e.x)>3||Math.abs(e.y)>3},o.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t]),this._dragPointerUp(e,t)},o._dragPointerUp=function(e,t){this.isDragging?this._dragEnd(e,t):this._staticClick(e,t)},o._dragStart=function(e,t){this.isDragging=!0,this.isPreventingClicks=!0,this.dragStart(e,t)},o.dragStart=function(e,t){this.emitEvent("dragStart",[e,t])},o._dragMove=function(e,t,n){this.isDragging&&this.dragMove(e,t,n)},o.dragMove=function(e,t,n){e.preventDefault(),this.emitEvent("dragMove",[e,t,n])},o._dragEnd=function(e,t){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(e,t)},o.dragEnd=function(e,t){this.emitEvent("dragEnd",[e,t])},o.onclick=function(e){this.isPreventingClicks&&e.preventDefault()},o._staticClick=function(e,t){this.isIgnoringMouseUp&&"mouseup"==e.type||(this.staticClick(e,t),"mouseup"!=e.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400)))},o.staticClick=function(e,t){this.emitEvent("staticClick",[e,t])},n.getPointerPoint=t.getPointerPoint,n}(i,e)}.apply(t,o))||(e.exports=r)}(window)},"./node_modules/unipointer/unipointer.js":
/*!***********************************************!*\
  !*** ./node_modules/unipointer/unipointer.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r;"function"==typeof Symbol&&Symbol.iterator;
/*!
 * Unipointer v2.3.0
 * base class for doing one thing with pointer event
 * MIT license
 */
!function(i,a){o=[n(/*! ev-emitter/ev-emitter */"./node_modules/ev-emitter/ev-emitter.js")],void 0===(r=function(e){return function(e,t){function n(){}var o=n.prototype=Object.create(t.prototype);o.bindStartEvent=function(e){this._bindStartEvent(e,!0)},o.unbindStartEvent=function(e){this._bindStartEvent(e,!1)},o._bindStartEvent=function(t,n){var o=(n=void 0===n||n)?"addEventListener":"removeEventListener",r="mousedown";e.PointerEvent?r="pointerdown":"ontouchstart"in e&&(r="touchstart"),t[o](r,this)},o.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.getTouch=function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.identifier==this.pointerIdentifier)return n}},o.onmousedown=function(e){var t=e.button;t&&0!==t&&1!==t||this._pointerDown(e,e)},o.ontouchstart=function(e){this._pointerDown(e,e.changedTouches[0])},o.onpointerdown=function(e){this._pointerDown(e,e)},o._pointerDown=function(e,t){e.button||this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==t.pointerId?t.pointerId:t.identifier,this.pointerDown(e,t))},o.pointerDown=function(e,t){this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,t])};var r={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"]};return o._bindPostStartEvents=function(t){if(t){var n=r[t.type];n.forEach((function(t){e.addEventListener(t,this)}),this),this._boundPointerEvents=n}},o._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach((function(t){e.removeEventListener(t,this)}),this),delete this._boundPointerEvents)},o.onmousemove=function(e){this._pointerMove(e,e)},o.onpointermove=function(e){e.pointerId==this.pointerIdentifier&&this._pointerMove(e,e)},o.ontouchmove=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerMove(e,t)},o._pointerMove=function(e,t){this.pointerMove(e,t)},o.pointerMove=function(e,t){this.emitEvent("pointerMove",[e,t])},o.onmouseup=function(e){this._pointerUp(e,e)},o.onpointerup=function(e){e.pointerId==this.pointerIdentifier&&this._pointerUp(e,e)},o.ontouchend=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerUp(e,t)},o._pointerUp=function(e,t){this._pointerDone(),this.pointerUp(e,t)},o.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t])},o._pointerDone=function(){this._pointerReset(),this._unbindPostStartEvents(),this.pointerDone()},o._pointerReset=function(){this.isPointerDown=!1,delete this.pointerIdentifier},o.pointerDone=function(){},o.onpointercancel=function(e){e.pointerId==this.pointerIdentifier&&this._pointerCancel(e,e)},o.ontouchcancel=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerCancel(e,t)},o._pointerCancel=function(e,t){this._pointerDone(),this.pointerCancel(e,t)},o.pointerCancel=function(e,t){this.emitEvent("pointerCancel",[e,t])},n.getPointerPoint=function(e){return{x:e.pageX,y:e.pageY}},n}(i,e)}.apply(t,o))||(e.exports=r)}(window)},"./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},"./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, main, scripts, keywords, babel, repository, author, license, dependencies, browserslist, devDependencies, default */function(e){e.exports=JSON.parse('{"name":"xgplayer","version":"1.1.6-alpha.0","description":"video player","main":"./dist/index.js","scripts":{"prepare":"npm run build","build":"webpack --progress --display-chunks -p","watch":"webpack --progress --display-chunks -p --watch --mode development","test":"karma start --single-run","test:watch":"karma start"},"keywords":["video","player"],"babel":{"presets":["es2015"],"plugins":["add-module-exports","babel-plugin-bulk-import"]},"repository":{"type":"git","url":"git+https://github.com/bytedance/xgplayer.git"},"author":"yinguohui@bytedance.com","license":"MIT","dependencies":{"danmu.js":"0.1.0","deepmerge":"^1.5.0","downloadjs":"1.4.7","draggabilly":"^2.2.0","event-emitter":"^0.3.5","pasition":"^1.0.1","request-frame":"^1.5.3"},"browserslist":["> 5%","IE 9","iOS 7","Firefox > 20"],"devDependencies":{"autoprefixer":"^9.1.5","babel-core":"^6.26.3","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-bulk-import":"^1.0.2","babel-plugin-transform-object-rest-spread":"^6.26.0","babel-plugin-transform-runtime":"^6.23.0","babel-preset-es2015":"^6.24.1","chai":"^4.1.2","core-js":"^2.5.4","css-loader":"^0.28.11","json-loader":"^0.5.7","karma":"^3.0.0","karma-chrome-launcher":"^2.2.0","karma-mocha":"^1.3.0","karma-sourcemap-loader":"^0.3.7","karma-spec-reporter":"0.0.32","karma-webpack":"^4.0.0-rc.1","mocha":"^5.2.0","node-sass":"^4.8.3","postcss-cssnext":"^3.1.0","postcss-loader":"^2.1.5","sass-loader":"^6.0.7","style-loader":"^0.20.3","sugarss":"^1.0.1","webpack":"^4.11.0","webpack-cli":"^3.0.2","zlib":"^1.0.5"}}')},"./src/control/collect.js":
/*!********************************!*\
  !*** ./src/control/collect.js ***!
  \********************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};var i=void 0,a=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.set=function(e,n){var o=e,r=n;if(null===r)return!1;var i="";if(o.indexOf(".")>-1){var a=o.split(".");i=a[0],o=a[1]}"os_version"===o&&(r=""+r),i?"user"===i||"header"===i?t.envInfo[i][o]=r:"headers"===i?t.envInfo.header.headers[o]=r:t.envInfo.header.headers.custom[o]=r:t.envInfo.user.hasOwnProperty(o)?["user_type","device_id","ip_addr_id"].indexOf(o)>-1?t.envInfo.user[o]=Number(r):["user_id","web_id","user_unique_id","ssid"].indexOf(o)>-1?t.envInfo.user[o]=String(r):["user_is_auth","user_is_login"].indexOf(o)>-1&&(t.envInfo.user[o]=Boolean(r)):t.envInfo.header.hasOwnProperty(o)?t.envInfo.header[o]=r:t.envInfo.header.headers.hasOwnProperty(o)?t.envInfo.header.headers[o]=r:t.envInfo.header.headers.custom[o]=r},this.get=function(){var e={user:{},header:{headers:{custom:{}}}},n=t.envInfo,o=n.user,a=Object.keys(o),s=Array.isArray(a),l=0;for(a=s?a:a[Symbol.iterator]();;){var c;if(s){if(l>=a.length)break;c=a[l++]}else{if((l=a.next()).done)break;c=l.value}var u=c;o[u]!==i&&(e.user[u]=o[u])}var d=n.header,p=Object.keys(d),f=Array.isArray(p),h=0;for(p=f?p:p[Symbol.iterator]();;){var g;if(f){if(h>=p.length)break;g=p[h++]}else{if((h=p.next()).done)break;g=h.value}var v=g;d[v]!==i&&"headers"!==v&&(e.header[v]=d[v])}var m=n.header.headers,y=Object.keys(m),b=Array.isArray(y),x=0;for(y=b?y:y[Symbol.iterator]();;){var w;if(b){if(x>=y.length)break;w=y[x++]}else{if((x=y.next()).done)break;w=x.value}var _=w;"custom"!==_&&m[_]!==i&&(e.header.headers[_]=m[_])}var k=n.header.headers.custom,E=Object.keys(k);if(E.length){var C=E,S=Array.isArray(C),P=0;for(C=S?C:C[Symbol.iterator]();;){var j;if(S){if(P>=C.length)break;j=C[P++]}else{if((P=C.next()).done)break;j=P.value}var T=j;e.header.headers.custom[T]=k[T]}}return{user:e.user,header:r({},e.header,{headers:e.header.headers})}},this.envInfo={user:{user_unique_id:i,user_type:i,user_id:i,user_is_auth:i,user_is_login:i,device_id:i,web_id:i,ip_addr_id:i,ssid:i},header:{app_id:i,app_name:i,app_install_id:i,app_package:i,app_channel:i,app_version:i,os_name:i,os_version:i,device_model:i,ab_client:i,ab_version:i,traffic_type:i,utm_source:i,utm_medium:i,utm_campaign:i,client_ip:i,device_brand:i,os_api:i,access:i,language:i,region:i,app_language:i,app_region:i,creative_id:i,ad_id:i,campaign_id:i,log_type:i,rnd:i,platform:i,sdk_version:i,province:i,city:i,timezone:i,tz_offset:i,tz_name:i,sim_region:i,carrier:i,resolution:i,browser:i,browser_version:i,referrer:i,referrer_host:i,headers:{utm_term:i,utm_content:i,custom:{}}}}},s=function(e){var t=document.createElement("a");return t.href=e,t},l=screen.width||0,c=screen.height||0,u=l+" x "+c,d=navigator.appVersion,p=navigator.userAgent,f=navigator.language,h=document.referrer,g=s(h).hostname,v=function(e){var t=s(e).search;t=t.slice(1);var n={};return t.split("&").forEach((function(e){var t=e.split("="),o=t[0],r=t[1];n[o]=decodeURIComponent(void 0===r?"":r)})),n}(location.href),m="",y="",b="",x=""+parseFloat(d),w=void 0,_=void 0;-1!==(w=p.indexOf("Opera"))&&(b="Opera",x=p.substring(w+6),-1!==(w=p.indexOf("Version"))&&(x=p.substring(w+8))),-1!==(w=p.indexOf("Edge"))?(b="Microsoft Edge",x=p.substring(w+5)):-1!==(w=p.indexOf("MSIE"))?(b="Microsoft Internet Explorer",x=p.substring(w+5)):-1!==(w=p.indexOf("Chrome"))?(b="Chrome",x=p.substring(w+7)):-1!==(w=p.indexOf("Safari"))?(b="Safari",x=p.substring(w+7),-1!==(w=p.indexOf("Version"))&&(x=p.substring(w+8))):-1!==(w=p.indexOf("Firefox"))&&(b="Firefox",x=p.substring(w+8)),-1!==(_=x.indexOf(";"))&&(x=x.substring(0,_)),-1!==(_=x.indexOf(" "))&&(x=x.substring(0,_)),-1!==(_=x.indexOf(")"))&&(x=x.substring(0,_));for(var k,E,C=/Mobile|htc|mini|Android|iP(ad|od|hone)/.test(d)?"wap":"web",S=[{s:"Windows 10",r:/(Windows 10.0|Windows NT 10.0)/},{s:"Windows 8.1",r:/(Windows 8.1|Windows NT 6.3)/},{s:"Windows 8",r:/(Windows 8|Windows NT 6.2)/},{s:"Windows 7",r:/(Windows 7|Windows NT 6.1)/},{s:"Android",r:/Android/},{s:"Sun OS",r:/SunOS/},{s:"Linux",r:/(Linux|X11)/},{s:"iOS",r:/(iPhone|iPad|iPod)/},{s:"Mac OS X",r:/Mac OS X/},{s:"Mac OS",r:/(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/}],P=0;P<S.length;P++){var j=S[P];if(j.r.test(p)){m=j.s;break}}function T(e,t){var n=e.exec(t);return n&&n[1]?n[1]:""}switch(/Windows/.test(m)&&(y=T(/Windows (.*)/,m),m="windows"),m){case"Mac OS X":y=T(/Mac OS X (10[\.\_\d]+)/,p),m="mac";break;case"Android":(E=T(/Android ([\.\_\d]+)/,k=p))||(E=T(/Android\/([\.\_\d]+)/,k)),y=E,m="android";break;case"iOS":y=(y=/OS (\d+)_(\d+)_?(\d+)?/.exec(d))?y[1]+"."+y[2]+"."+(0|y[3]):"",m="ios"}var M={screen_size:u,browser:b,browser_version:x,platform:C,os_name:m,os_version:y,userAgent:p,screen_width:l,screen_height:c,device_model:m,language:f,referrer:h,referrer_host:g,utm_source:v.utm_source,utm_medium:v.utm_medium,utm_campaign:v.utm_campaign,utm_term:v.utm_term,utm_content:v.utm_content},O={get:function(e){var t=localStorage.getItem(e),n=t;try{t&&"string"==typeof t&&(n=JSON.parse(t))}catch(e){}return n},set:function(e,t){try{var n="string"==typeof t?t:JSON.stringify(t);localStorage.setItem(e,n)}catch(e){}}},L="__tea_cache_",D=4001,z=4e3,R=4002,A=4003,I=500,B=5001,q="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(e){return void 0===e?"undefined":o(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":o(e)};function F(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var N=function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";F(this,e),this.init=function(e){t.isLog=e},this.info=function(e){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];var i;t.isLog&&(i=console).log.apply(i,[t.prefix+e].concat(o))},this.warn=function(e){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];var i;t.isLog&&(i=console).warn.apply(i,[t.prefix+e].concat(o))},this.error=function(e){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];var i;t.isLog&&(i=console).error.apply(i,[t.prefix+e].concat(o))},this.dir=function(){var e;t.isLog&&(e=console).dir.apply(e,arguments)},this.table=function(e){t.isLog&&console.table(e)},this.logJSON=function(e){"object"===(void 0===e?"undefined":q(e))&&t.isLog&&t.info("",JSON.stringify(e,null,2))},this.deprecated=function(e){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];t.warn.apply(t,["[DEPRECATED]"+e].concat(o))},this.throw=function(e){throw t.error(t.prefix),new Error(e)};var o=n?"["+n+"]":"";this.prefix="[tea-sdk]"+o},U=new N,H=function(e,t,n,o){var r=new XMLHttpRequest;r.open("POST",e,!0),r.setRequestHeader("Content-Type","application/json; charset=utf-8"),r.onload=function(){try{var e=JSON.parse(r.responseText);n&&n(e)}catch(e){o&&o()}},r.onerror=function(){o&&o()},r.send(JSON.stringify(t))};var W=(new Date).getTimezoneOffset(),V=parseInt(-W/60,10),K=60*W,J=void 0;try{J="3.2.7"}catch(k){J="2.x"}var X=new(function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":o(t))&&"function"!=typeof t?e:t}(this,e.call(this));return n.initClientEnv=function(){n.set("os_name",M.os_name),n.set("os_version",M.os_version),n.set("device_model",M.device_model),n.set("platform",M.platform),n.set("sdk_version",J),n.set("browser",M.browser),n.set("browser_version",M.browser_version),n.set("language",M.language),n.set("timezone",V),n.set("tz_offset",K),n.set("resolution",M.screen_width+"x"+M.screen_height),n.set("screen_width",M.screen_width),n.set("screen_height",M.screen_height),n.set("referrer",M.referrer),n.set("referrer_host",M.referrer_host),n.set("utm_source",M.utm_source),n.set("utm_medium",M.utm_medium),n.set("utm_campaign",M.utm_campaign),n.set("utm_term",M.utm_term),n.set("utm_content",M.utm_content)},n.initClientEnv(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":o(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(a));var Q=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return e.prototype.isString=function(e){return"String"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isNumber=function(e){return"Number"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isBoolean=function(e){return"Boolean"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isFunction=function(e){return"Function"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isNull=function(e){return"Null"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isUndefined=function(e){return"Undefined"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isObj=function(e){return"Object"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isArray=function(e){return"Array"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isFalse=function(e){return""===e||null==e||"null"===e||"undefined"===e||0===e||!1===e||NaN===e},e.prototype.isTrue=function(e){return!this.isFalse(e)},e.prototype.isLowIE=function(){return window.XDomainRequest},e}());var $=function(e){return function(e,t,n){if("string"==typeof e&&"number"==typeof t&&"number"==typeof n){var o,r=[];n=n<=25?n:n%25;var i=String.fromCharCode(n+97);o=e.split(i);for(var a=0;a<o.length;a++){var s=parseInt(o[a],n);s=1*s^t;var l=String.fromCharCode(s);r.push(l)}return r.join("")}}(e,64,25)};function Y(e){return e?(e^16*Math.random()>>e/4).toString(10):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,Y)}var G=function(){return Y().replace(/-/g,"").slice(0,19)},Z=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};var ee={cn:"1fz22z22z1nz21z4mz4bz4bz1kz1az21z4az21z1lz21z21z1bz1iz4az1az1mz1k",sg:"1fz22z22z1nz21z4mz4bz4bz21z1ez18z1jz1gz49z1kz1az21z4az19z27z22z1cz1mz24z1cz20z21z1cz18z4az1az1mz1k",va:"1fz22z22z1nz21z4mz4bz4bz1kz18z1jz1gz24z18z49z1kz1az21z4az19z27z22z1cz1mz24z1cz20z21z1cz18z4az1az1mz1k"},te=function(e){try{var t=document.cookie.match(new RegExp("(?:^|;)\\s*"+e+"=([^;]+)"));return decodeURIComponent(t?t[1]:"")}catch(e){return""}},ne=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":o(t))&&"function"!=typeof t?e:t}(this,e.call(this));return n.init=function(e){var t=e.app_id,o=e.channel,r=e.log,i=e.channel_domain,a=e.name;if("number"!=typeof t)throw new Error("app_id 必须是一个数字，注意检查是否是以`string`的方式传入的？");n.logger=new N(a),n.logger.init(r),n.initConfigs(e),n.initUrls(o,i),n.setEnv("app_id",t)},n.initConfigs=function(e){var t=e.app_id,o=e.disable_ssid,r=e.disable_webid,i=e.disable_sdk_monitor;n.app_id=t,n.evtDataCacheKey=L+"events_"+t,o&&(n.logger.info("ssid已禁用，设置user_unique_id不会请求ssid接口。"),n.isSsidDisabled=!0),r&&(n.logger.info("webid服务已禁用，ssid同时被禁用。将本地生成webid。"),n.isWebidDisabled=!0,n.isSsidDisabled=!0),i&&(n.logger.info("SDK监控已禁用。"),n.isSdkMonitorDisabled=!0)},n.initUrls=function(e,t){if("internal"===e&&(n.logger.warn("channel 的值 internal 已被废弃，已自动改为 cn。"),e="cn"),!t&&!ee[e])throw new Error("channel 变量只能是 `cn`, `sg`,`va`");var o=t||$(ee[e]);o=o.replace(/\/+$/,""),n.reportUrl=o+"/v1/list",n.userTokensPrefix=""+o},n.setEnv=function(e,t){if("app_id"===e&&n.checkUserToken(t),"user_unique_id"===e){if(n.blackUuid.some((function(e){return e===String(t)})))return void n.logger.warn('设置了无效的值 {user_unique_id："%s"}。该操作已忽略。',t);n.verifyTokens(t)}if("web_id"===e){if(!t)return;(!n.envInfo.user.user_unique_id||n.envInfo.user.user_unique_id&&n.envInfo.user.user_unique_id===n.envInfo.user.web_id)&&n.set("user_unique_id",t)}n.set(e,t)},n.transferFromCookie=function(){var e=n.tokensCacheKey,t=te("tt_webid"),o=te("__tea_sdk__ssid"),r=te("__tea_sdk__user_unique_id");if(Q.isLowIE()){if(t){var i={web_id:t,ssid:t,user_unique_id:t};O.set(e,JSON.stringify(i))}return!1}if(t&&o&&r){var a={web_id:t,ssid:o,user_unique_id:r};O.set(e,JSON.stringify(a))}},n.purifyBlackUuid=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(n.blackUuid.some((function(t){return t===e.user_unique_id}))){var t={};return n.setUserTokens(t),n.logger.warn('检测到无效的用户标识，已重置用户状态。{user_unique_id: "%s"}',e.user_unique_id),t}return e},n.getUserTokens=function(){return O.get(n.tokensCacheKey)||{}},n.setUserTokens=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return O.set(n.tokensCacheKey,e)},n.checkUserToken=function(e){var t=L+"tokens_"+e;n.tokensCacheKey=t,n.transferFromCookie();var o=n.purifyBlackUuid(n.getUserTokens());o.user_unique_id&&o.web_id?(n.envInfo.user.user_unique_id=o.user_unique_id,n.envInfo.user.web_id=o.web_id,n.envInfo.user.ssid=o.ssid||"",n.logger.info("初始化已经检测到了 webid user_unique_id，一般情况下不需要再次验证 id 了"),n.unlock()):n.requestWebId(e)},n.saveTokenToStorage=function(e){var t=e.web_id,o=e.ssid,r=e.user_unique_id;n.setUserTokens({web_id:t,ssid:o,user_unique_id:r})},n.requestWebId=function(){n.isRequestWebId=!0;var e=function(e){var t=n.envInfo.user.web_id||e.web_id,o=e.ssid;n.isRequestWebId=!1,n.envInfo.user.ssid=o,n.envInfo.user.web_id=t,n.envInfo.user.user_unique_id=t,n.saveTokenToStorage({web_id:t,ssid:o,user_unique_id:t}),n.waitForVerifyTokens?(n.lock(),n.verifyTokens(n.realUuid)):(n.unlock(),n.callback&&n.callback())};n.isWebidDisabled?e({web_id:G(),ssid:""}):function(){var t=n.userTokensPrefix+"/v1/user/webid";H(t,{app_id:n.app_id,url:location.href,user_agent:M.userAgent,referer:M.referrer,user_unique_id:""},(function(t){0!==t.e?n.logger.error("请求 webid 失败。请联系管理员。"):e(t)}),(function(){n.isRequestWebId=!1,n.logger.error("获取 webid 失败，数据将不会被上报")}))}()},n.verifyTokens=function(e){var t=n.tokensCacheKey;if(n.waitForVerifyTokens=!1,n.realUuid=""+e,n.isRequestWebId)return n.waitForVerifyTokens=!0,n.logger.info("正在请求 webid，requestSsid 将会在前者请求完毕之后被调用"),!1;var o=n.getUserTokens();if(o.user_unique_id===n.realUuid&&o.ssid&&o.web_id)n.logger.info("传入的 user_id/user_unique_id 与 缓存中的完全一致，无需再次请求"),n.unlock();else{n.lock(),n.envInfo.user.user_unique_id=n.realUuid;var r=Z({},n.getUserTokens(),{user_unique_id:n.realUuid});if(O.set(t,JSON.stringify(r)),Q.isLowIE())return n.unlock(),!1;n.isSsidDisabled?(n.unlock(),n.callback&&n.callback()):n.requestSsid()}},n.requestSsid=function(){var e=n.getUserTokens(),t=n.userTokensPrefix+"/v1/user/ssid";H(t,{app_id:n.app_id,web_id:e.web_id,user_unique_id:""+e.user_unique_id},(function(t){if(n.unlock(),0!==t.e)n.logger.error("请求 ssid 失败~");else{n.envInfo.user.ssid=t.ssid;var o=Z({},e,{ssid:t.ssid});n.setUserTokens(o),n.logger.info("根据 user_unique_id 更新 ssid 成功！注意：在这之前不应该有数据被发出去"),n.callback&&n.callback()}}),(function(){n.unlock(),n.logger.error("根据 user_unique_id 获取新 ssid 失败")}))},n.setEvtParams=function(e){var t=Z({},e);Object.keys(t).forEach((function(e){n.evtParams[e]=t[e]}))},n.mergeEnvToEvents=function(e){var t=n.mergeEnv(),o=[],r=0,i=void 0;return e.forEach((function(e){var t=!!e.params.__disable_storage__;void 0===i?i=t:(t!==i||o[r].length>=5)&&(r+=1,i=!i),o[r]=o[r]||[],o[r].push(e)})),o.map((function(e){return{events:e.map((function(e){var t=Z({},n.evtParams,e.params);return delete t.__disable_storage__,Z({},e,{params:JSON.stringify(t)})})),user:t.user,header:t.header,verbose:n.debugMode?1:void 0,__disable_storage__:e[0].params.__disable_storage__}}))},n.mergeEnv=function(){var e=n.get(),t=X.get(),o=Z({},e.user),r=Z({},t.header.headers.custom,e.header.headers.custom),i=Z({},t.header.headers,e.header.headers,{custom:r}),a=Z({},t.header,e.header);return{user:o,header:Z({},a,{headers:JSON.stringify(i)})}},n.evtParams={},n.reportUrl="",n.userTokensPrefix="",n.isSsidDisabled=!1,n.isWebidDisabled=!1,n.isSdkMonitorDisabled=!1,n.debugMode=!1,n.blackUuid=["null","undefined","0","","None"],n.logger=function(){},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":o(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.lock=function(){this.isUserTokensReady=!1},t.prototype.unlock=function(){this.isUserTokensReady=!0},t.prototype.enableDebugMode=function(e){this.debugMode=e},t}(a);var oe=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.set=function(e,n){t.cache[e]=n},this.get=function(e){return t.cache[e]},this.clean=function(e){t.cache[e]=void 0},this.cache={}},re=new oe;var ie=function(){function e(t){var n=t.disable_storage,o=void 0!==n&&n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._isPersistent=!o,this._storage=this._isPersistent?O:new oe,this._storageKey="",this._data=void 0}return e.prototype.setStorageKey=function(e){this._storageKey=e},e.prototype.getAllEvents=function(){var e=this.getData();Object.keys(e).reduce((function(t,n){return t.concat(e[n]||[])}),[])},e.prototype.getData=function(){return this._checkIsDataInit(),this._data},e.prototype.add=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];this._checkIsDataInit(),0!==t.length&&(this._data[e]=t,this._save())},e.prototype.delete=function(e){this._checkIsDataInit(),this._data[e]&&(delete this._data[e],this._save())},e.prototype._checkIsDataInit=function(){if(void 0===this._data)try{var e,t=this._getDataFromStorage();if(Q.isArray(t))this._data=((e={})[G()]=t,e),this._save();else this._data=t}catch(e){this._data={}}},e.prototype._checkStorageKey=function(){if(!this._storageKey)throw new Error("must call setStorageKey('xxx') first")},e.prototype._getDataFromStorage=function(){return this._checkStorageKey(),this._storage.get(this._storageKey)||{}},e.prototype._save=function(){this._checkStorageKey(),this._storage.set(this._storageKey,this._data)},e}(),ae=function(e,t){try{var n=e.split("v1")[0];t.forEach((function(e){var t=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t+="&"+n+"="+encodeURIComponent(JSON.stringify(e[n])));return t="&"===t[0]?t.slice(1):t}(e),o=new Image(1,1);o.onload=function(){o=null},o.onerror=function(){o=null},o.src=n+"/v1/gif?"+t}))}catch(e){}},se=function(e,t){if(window.XDomainRequest)return ae(e,t);var n=new XMLHttpRequest;n.open("POST",e+"?rdn="+Math.random(),!0),n.onload=function(){},n.onerror=function(){n.abort()},n.send(JSON.stringify(t))},le=function e(t,n,o,r){try{var i=t.split("v1")[0];if(!i)return void r(t,n,D);n.forEach((function(e){var a=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t+="&"+n+"="+encodeURIComponent(JSON.stringify(e[n])));return t="&"===t[0]?t.slice(1):t}(e),s=new Image(1,1);s.onload=function(){s=null,o()},s.onerror=function(){s=null,r(t,n,z)},s.src=i+"/v1/gif?"+a}))}catch(e){r(t,n,R,e.message)}};var ce=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.send=function(e){var t=e.url,o=e.data,r=e.success,i=e.fail,a=e.eventError;if(function(e){var t=e.url,n=e.data,o=e.success,r=e.fail,i=e.notSure,a=e.isUnload,s=n;if(window.XDomainRequest)le(t,s,o,r);else{if(a)return window.navigator&&window.navigator.sendBeacon?(i(),void(window.navigator.sendBeacon(t,JSON.stringify(s))?o():r(t,n,A))):void le(t,s,o,r);var l=new XMLHttpRequest;l.open("POST",t+"?rdn="+Math.random(),!0),l.onload=function(){o(t,s,l.responseText)},l.onerror=function(){l.abort(),r(t,s,I)},l.send(JSON.stringify(s))}}({url:t,data:o,success:function(e,t,o){r();try{var i=JSON.parse(o).e;if(0!==i){var s="未知错误";-2===i&&(s="事件格式错误！请检查字段类型是否正确。"),n.logger.error("数据上报失败！","错误码："+i+"。错误信息："+s),a(t,i),de(e,t,i)}}catch(n){de(e,t,B)}},fail:function(e,t,o){n.logger.error("数据上报失败！","错误码："+o),i(t,o),de(e,t,o)},notSure:e.notSure,isUnload:e.isUnload}),!n.isSdkMonitorDisabled&&!n.isSdkOnLoadEventReady){n.isSdkOnLoadEventReady=!0;try{var s=o[0].header,l=o[0].user;ue(t,{app_id:s.app_id,app_name:s.app_name,sdk_version:s.sdk_version,web_id:l.web_id})}catch(e){}}},this.logger=t.logger||U,this.isSdkOnLoadEventReady=!1,this.isSdkMonitorDisabled=!1},ue=function(e,t){try{var n={events:[{event:"onload",params:JSON.stringify({app_id:t.app_id,app_name:t.app_name||"",sdk_version:t.sdk_version}),local_time_ms:Date.now()}],user:{user_unique_id:t.web_id},header:{app_id:1338}};setTimeout((function(){se(e,[n])}),16)}catch(e){}},de=function(e,t,n){try{var o=t[0].user,r=t[0].header,i=[];t.forEach((function(e){e.events.forEach((function(e){i.push(e)}))}));var a={events:i.map((function(e){return{event:"on_error",params:JSON.stringify({error_code:n,app_id:r.app_id,app_name:r.app_name||"",error_event:e.event,local_time_ms:e.local_time_ms,tea_event_index:Date.now(),params:e.params,header:JSON.stringify(r),user:JSON.stringify(o)}),local_time_ms:Date.now()}})),user:{user_unique_id:o.user_unique_id},header:{app_id:1338}};setTimeout((function(){se(e,[a])}),16)}catch(e){}};var pe=function(e){function t(n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":o(t))&&"function"!=typeof t?e:t}(this,e.call(this));r.addListener=function(){window.addEventListener("unload",(function(){r.report(!0)}),!1),window.addEventListener("beforeunload",(function(){r.report(!0)}),!1),document.addEventListener("visibilitychange",(function(){"hidden"===document.visibilityState&&r.report(!0)}),!1)},r.setReady=function(e){r.isReady=e,r.eventSender.isSdkMonitorDisabled=r.isSdkMonitorDisabled,r.checkAndSendCachedStorageEvents(),r.report()},r.eventReportTimer=null,r.event=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=re.get(r.evtDataCacheKey)||[],o=t?[].concat(e,n):[].concat(n,e);re.set(r.evtDataCacheKey,o),o.length>=5?r.report():(r.eventReportTimer&&clearTimeout(r.eventReportTimer),r.eventReportTimer=setTimeout((function(){r.report(),r.eventReportTimer=null}),r.waitForBatchTime))},r.report=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!r.isUserTokensReady)return!1;if(!r.isReady)return!1;var t=re.get(r.evtDataCacheKey)||[];re.clean(r.evtDataCacheKey);var n=r.mergeEnvToEvents(t);r.sendData(n,e)},r.sendData=function(e,t){var n=[],o=0,i=void 0;e.forEach((function(e){var t=!!e.__disable_storage__;void 0===i?i=t:(t!==i||n[o].length>=5)&&(o+=1,i=!i),n[o]=n[o]||[],n[o].push(e)})),n.forEach((function(e){var n=G();e[0].__disable_storage__||r.eventStorage.add(n,e),r._sendData(n,e,t)}))},r.checkAndSendCachedStorageEvents=function(){var e=r.eventStorage.getData(),t=Object.keys(e);t.length>0&&t.forEach((function(t){r._sendData(t,e[t])}))},r._sendData=function(e,t,n){r.isReporting=!0;var o=function(){r.isReporting=!1};r.eventSender.send({url:r.reportUrl,data:t,success:function(){o(),r.sendDataSuccess(e)},fail:function(e,t){o(),r.reportErrorCallback(e,t),setTimeout((function(){r.report()}),3e3)},eventError:function(e,t){r.reportErrorCallback(e,t)},notSure:o,isUnload:n})},r.sendDataSuccess=function(e){r.eventStorage.delete(e),r.report()};var i=n.log,a=n.disable_storage,s=n.max_batch_num,l=void 0===s?5:s,c=n.batch_time,u=void 0===c?30:c;return r.init(n),r.maxBatchNum=l,r.waitForBatchTime=u,r.isReady=!1,r.addListener(),r.enableDebugMode(!!i),r.eventStorage=new ie({disable_storage:a}),r.eventStorage.setStorageKey(r.evtDataCacheKey),r.eventSender=new ce({logger:r.logger}),r.reportErrorCallback=function(){},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":o(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(ne),fe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};var he=function(){var e=+Date.now()+Number((""+Math.random()).slice(2,8));return function(){return e+=1}}(),ge=function(e,t){var n=e;/^event\./.test(e)&&(n=e.slice(6));var o=t;return Q.isObj(o)||(o={}),o.event_index=he(),{event:n,params:o,local_time_ms:+new Date}},ve=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.init=function(e){if(!Q.isObj(e))throw new Error("init 的参数必须是Object类型");n.logger.init(e.log),n.channel=new pe(fe({},e,{name:n.name})),n.channel.callback=function(){n.callbackSend&&n.start()}},this.config=function(e){Q.isObj(e)||n.logger.throw("config 参数必须是 {} 的格式"),e.log&&(n.logger.init(!0),n.channel.enableDebugMode(!0),e.log=null);var t=Object.keys(e);if(!t.length)return!1;var o=t,r=Array.isArray(o),i=0;for(o=r?o:o[Symbol.iterator]();;){var a;if(r){if(i>=o.length)break;a=o[i++]}else{if((i=o.next()).done)break;a=i.value}var s=a,l=e[s];switch(s){case"evtParams":n.channel.setEvtParams(l);break;case"disable_ssid":n.logger.deprecated("(disable_ssid)请通过init函数来设置。"),l&&(n.logger.info("ssid已禁用，设置user_unique_id不会请求ssid接口。"),n.channel.isSsidDisabled=l);break;case"disable_auto_pv":l&&(n.logger.info("已禁止默认上报predefine_pageview事件，需手动上报。"),n._autoSendPV=!1);break;case"_staging_flag":""+l=="1"&&n.logger.info("根据_staging_flag设置，数据将会上报到stag 表。"),n.channel.setEvtParams({_staging_flag:Number(l)});break;case"reportErrorCallback":"function"==typeof l&&(n.channel.reportErrorCallback=l);break;default:n.channel.setEnv(s,l)}}},this.send=function(){n.start()},this.start=function(){if(n.channel.isUserTokensReady){if(n._isSendFuncCalled)return;n._isSendFuncCalled=!0,n.logger.info("看到本提示，意味着用户信息已完全就绪，上报通道打开。用户标识如下："),n.logger.logJSON(n.channel.get().user),n._autoSendPV&&n.predefinePageView(),n.channel.setReady(!0)}else n.callbackSend=!0},this.predefinePageView=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={title:document.title||location.pathname,url:location.href,url_path:location.pathname},o=fe({},t,e);n.event("predefine_pageview",o,!0)},this.event=function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];var r=Q.isBoolean(t[t.length-1]),i=!!r&&t[t.length-1],a=r?t.slice(0,t.length-1):t,s=a[0],l=[];Q.isArray(s)?l=a:l[0]=a,l=l.map((function(e){return ge.apply(void 0,e)})),n.channel.event(l,i)},this._isSendFuncCalled=!1,this._autoSendPV=!0,this.name=t,this.logger=new N(t)};ve.exportMethods=["init","config","send","start","predefinePageView"];t.default=function e(t){var n=this;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._exportCollect=function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];n._isQueueProcessed?n._executeCmd.apply(n,t):(n.cmdQueue.push(t),n._processCmdQueue())},this._processCmdQueue=function(){if(0!==n.cmdQueue.length){var e=function(e,t,n){var o=-1;return e.forEach((function(e,r){(void 0!==n?e[n]:e)===t&&(o=r)})),o}(n.cmdQueue,"init","0");-1!==e&&(n._isQueueProcessed=!0,n._executeCmd.apply(n,n.cmdQueue[e]),n.cmdQueue.forEach((function(t,o){o!==e&&n._executeCmd.apply(n,t)})),n.cmdQueue=[])}},this._executeCmd=function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];var r,i,a=t[0];ve.exportMethods.indexOf(a)>-1?(r=n.colloctor)[a].apply(r,t.slice(1)):(i=n.colloctor).event.apply(i,t)},this.name=t||"Collector"+ +new Date,this.cmdQueue=[],this.colloctor=new ve(this.name),this._isQueueProcessed=!1,this._processCmdQueue(),this._exportCollect.init=this._exportCollect.bind(this,"init"),this._exportCollect.config=this._exportCollect.bind(this,"config"),this._exportCollect.send=this._exportCollect.bind(this,"send"),this._exportCollect.start=this._exportCollect.bind(this,"start"),this._exportCollect.predefinePageView=this._exportCollect.bind(this,"predefinePageView"),this._exportCollect},e.exports=t.default},"./src/control/cssFullscreen.js":
/*!**************************************!*\
  !*** ./src/control/cssFullscreen.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("cssFullscreen",(function(){var e=i.default.util;if(this.config.cssFullscreen){var t="M834.56 81.92H189.44c-59.392 0-107.52 48.128-107.52 107.52v645.12c0 59.392 48.128 107.52 107.52 107.52h645.12c59.392 0 107.52-48.128 107.52-107.52V189.44c0-59.392-48.128-107.52-107.52-107.52zM458.24 727.04c0 14.848-12.288 26.624-26.624 26.624S404.48 741.888 404.48 727.04v-69.632L289.28 773.12c-10.752 10.24-27.648 10.24-37.888 0-10.24-10.752-10.24-27.648 0-37.888L366.592 619.52H296.96c-14.848 0-26.624-12.288-26.624-26.624s12.288-26.624 26.624-26.624h134.144c14.848 0 26.624 12.288 26.624 26.624V727.04z m0-295.936c0 14.848-12.288 26.624-26.624 26.624H296.96c-14.848 0-26.624-12.288-26.624-26.624S282.112 404.48 296.96 404.48h69.632L251.392 289.28c-10.24-10.752-10.24-27.648 0-37.888 5.12-5.12 12.288-7.68 18.944-7.68 6.656 0 13.824 2.56 18.944 7.68L404.48 366.592V296.96c0-14.848 12.288-26.624 26.624-26.624s26.624 12.288 26.624 26.624v134.144zM773.12 773.12c-10.752 10.24-27.648 10.24-37.888 0L619.52 657.408V727.04c0 14.848-12.288 26.624-26.624 26.624s-26.624-11.776-26.624-26.624v-134.144c0-14.848 12.288-26.624 26.624-26.624H727.04c14.848 0 26.624 12.288 26.624 26.624s-12.288 26.624-26.624 26.624h-69.632l115.2 115.2c10.752 10.752 10.752 27.648 0.512 38.4z m0-483.84L657.408 404.48H727.04c14.848 0 26.624 12.288 26.624 26.624 0 14.848-12.288 26.624-26.624 26.624h-134.144c-14.848 0-26.624-12.288-26.624-26.624V296.96c0-14.848 12.288-26.624 26.624-26.624s26.624 12.288 26.624 26.624v69.632L734.72 250.88c5.12-5.12 12.288-7.68 18.944-7.68s13.824 2.56 18.944 7.68c10.752 10.752 10.752 27.648 0.512 38.4z",n="M843.617212 67.898413 175.411567 67.898413c-61.502749 0-111.367437 49.856501-111.367437 111.367437l0 668.205645c0 61.510936 49.864688 111.367437 111.367437 111.367437L843.617212 958.838931c61.510936 0 111.367437-49.856501 111.367437-111.367437L954.984648 179.26585C954.984648 117.754914 905.12917 67.898413 843.617212 67.898413zM398.146441 736.104057c15.380292 0 27.842115 12.461823 27.842115 27.842115 0 15.379269-12.461823 27.841092-27.842115 27.841092L259.725858 791.787264c-7.785314 0-14.781658-3.217275-19.838837-8.365528-5.383614-4.577249-8.791224-11.228739-8.791224-19.475564L231.095797 624.736621c0-15.371082 12.471033-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115l-0.61603 71.426773 133.036969-133.037992 39.378869 39.378869L324.962651 736.113267 398.146441 736.104057zM419.199942 463.611943 286.162974 330.565764l0.61603 71.435982c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.371082 0-27.842115-12.461823-27.842115-27.842115L231.094774 262.791172c0-8.256034 3.40761-14.908548 8.791224-19.476587 5.057179-5.148253 12.053524-8.374738 19.838837-8.374738l138.420583 0.00921c15.380292 0 27.842115 12.461823 27.842115 27.842115s-12.461823 27.842115-27.842115 27.842115l-73.175603-0.00921 133.607974 133.607974L419.199942 463.611943zM787.932981 763.946172c0 8.247848-3.40761 14.899338-8.791224 19.475564-5.057179 5.148253-12.053524 8.365528-19.839861 8.365528L620.881314 791.787264c-15.379269 0-27.841092-12.461823-27.841092-27.841092 0-15.380292 12.461823-27.842115 27.841092-27.842115l73.185836 0.00921L560.449967 602.50427l39.378869-39.378869L732.875015 696.163393l-0.62524-71.426773c0-15.371082 12.462846-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115L787.934005 763.946172zM787.932981 402.000724c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.379269 0-27.842115-12.461823-27.842115-27.842115l0.62524-71.435982L599.828836 463.611943l-39.378869-39.378869 133.617184-133.607974-73.185836 0.00921c-15.379269 0-27.841092-12.461823-27.841092-27.842115s12.461823-27.842115 27.841092-27.842115l138.421606-0.00921c7.785314 0 14.781658 3.226484 19.839861 8.374738 5.383614 4.568039 8.791224 11.219529 8.791224 19.476587L787.934005 402.000724z",o=e.createDom("xg-cssfullscreen",'<xg-icon class="xgplayer-icon"><svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n            <path transform="scale(0.03 0.03)" d="'+n+'"></path>\n        </svg></xg-icon>',{},"xgplayer-cssfullscreen"),r=this.config.lang&&"zh-cn"===this.config.lang?"样式全屏":"Full screen",a=this.config.lang&&"zh-cn"===this.config.lang?"退出全屏":"Exit full screen",s=this.controls,l=this.root,c=e.createDom("xg-tips",r,{},"xgplayer-tips"),u=o.querySelector("path");o.appendChild(c);s.appendChild(o),["click","touchend"].forEach((function(i){o.addEventListener(i,(function(o){var i;o.preventDefault(),o.stopPropagation(),e.hasClass(l,"xgplayer-cssfullscreen-active")||e.hasClass(l,"xgplayer-is-fullscreen")?(i=l,u.setAttribute("d",n),c.textContent=r,e.removeClass(i,"xgplayer-cssfullscreen-active")):function(n){u.setAttribute("d",t),c.textContent=a,e.addClass(n,"xgplayer-cssfullscreen-active")}(l)}))})),o.addEventListener("mouseenter",(function(e){e.preventDefault(),e.stopPropagation(),c.style.left="50%";var t=c.getBoundingClientRect(),n=l.getBoundingClientRect();t.right>n.right&&(c.style.left=-t.right+n.right+16+"px")}))}}))},"./src/control/danmu.js":
/*!******************************!*\
  !*** ./src/control/danmu.js ***!
  \******************************/
/*! no static exports found */function(e,t,n){"use strict";var o=i(n(/*! ../player */"./src/player.js")),r=i(n(/*! danmu.js */"./node_modules/danmu.js/dist/index.js"));function i(e){return e&&e.__esModule?e:{default:e}}o.default.install("danmu",(function(){var e=this;if(e.config.danmu){var t=o.default.util.createDom("xg-bullet","",{},"xgplayer-bullet");e.root.appendChild(t),t.style.height="100%";var n=o.default.util.deepCopy({container:t,player:e.video,comments:[],area:{start:0,end:1}},e.config.danmu);e.once("complete",(function(){var i=new r.default(n);o.default.util.addClass(t,"xgplayer-has-bullet"),e.config.danmu.closeDefaultBtn||(e.bulletBtn=o.default.util.copyDom(i.bulletBtn.createSwitch(!0)),e.controls.appendChild(e.bulletBtn),["click","touchend"].forEach((function(n){e.bulletBtn.addEventListener(n,(function(n){n.preventDefault(),n.stopPropagation(),o.default.util.toggleClass(e.bulletBtn,"danmu-switch-active"),o.default.util.hasClass(e.bulletBtn,"danmu-switch-active")?(o.default.util.addClass(t,"xgplayer-has-bullet"),e.once("timeupdate",(function(){i.start()}))):(o.default.util.removeClass(t,"xgplayer-has-bullet"),i.stop())}),!1)})),e.onElementClick&&t.addEventListener("click",(function(n){e.onElementClick(n,t)}),!1),e.onElementDblclick&&t.addEventListener("dblclick",(function(n){e.onElementDblclick(n,t)}),!1),e.on("pause",(function(){o.default.util.hasClass(e.bulletBtn,"danmu-switch-active")&&i.pause()})),e.on("play",(function(){o.default.util.hasClass(e.bulletBtn,"danmu-switch-active")&&i.play()})),e.on("seeked",(function(){o.default.util.hasClass(e.bulletBtn,"danmu-switch-active")&&(i.stop(),i.start())}))),e.danmu=i}))}}))},"./src/control/definition.js":
/*!***********************************!*\
  !*** ./src/control/definition.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("definition",(function(){var e=this,t=i.default.util,n=i.default.sniffer,o=t.createDom("xg-definition","",{tabindex:3},"xgplayer-definition"),r=e.controls;"mobile"===n.device&&(e.config.definitionActive="click");var a=[];function s(){var n=["<ul>"],i=e.config.url,s=document.createElement("a");e.switchURL?["mp4","hls","__flv__","dash"].every((function(t){return!e[t]||(e[t].url&&(s.href=e[t].url),"__flv__"===t&&(e[t]._options?s.href=e[t]._options.url:s.href=e[t]._mediaDataSource.url),i=s.href,!1)})):i=e.currentSrc||e.src,e.hls&&(s.href=e.hls.url,i=s.href),a.forEach((function(t){s.href=t.url,e.dash?n.push("<li url='"+t.url+"' cname='"+t.name+"' class='"+(t.selected?"definition":"")+"'>"+t.name+"</li>"):n.push("<li url='"+t.url+"' cname='"+t.name+"' class='"+(s.href===i?"definition":"")+"'>"+t.name+"</li>")}));var l=a.filter((function(t){return s.href=t.url,e.dash?!0===t.selected:s.href===i}));n.push("</ul><p class='name'>"+(l[0]||{name:""}).name+"</p>");var c=r.querySelector(".xgplayer-definition");if(c){c.innerHTML=n.join("");var u=c.querySelector(".name");e.config.definitionActive&&"hover"!==e.config.definitionActive||u.addEventListener("mouseenter",(function(n){n.preventDefault(),n.stopPropagation(),t.addClass(e.root,"xgplayer-definition-active"),c.focus()}))}else{o.innerHTML=n.join("");var d=o.querySelector(".name");e.config.definitionActive&&"hover"!==e.config.definitionActive||d.addEventListener("mouseenter",(function(n){n.preventDefault(),n.stopPropagation(),t.addClass(e.root,"xgplayer-definition-active"),o.focus()})),r.appendChild(o)}}function l(n){(a=n)&&a instanceof Array&&a.length>1&&(t.addClass(e.root,"xgplayer-is-definition"),e.on("canplay",s))}e.on("resourceReady",l),["touchend","click"].forEach((function(r){o.addEventListener(r,(function(r){r.preventDefault(),r.stopPropagation();var i=r.target||r.srcElement,s=document.createElement("a");if(i&&"li"===i.tagName.toLocaleLowerCase()){if(e.emit("beforeDefinitionChange",s.href),Array.prototype.forEach.call(i.parentNode.childNodes,(function(e){t.removeClass(e,"definition")})),e.dash&&a.forEach((function(e){e.selected=!1,e.name===i.innerHTML&&(e.selected=!0)})),t.addClass(i,"definition"),i.parentNode.nextSibling.innerHTML=""+i.getAttribute("cname"),s.href=i.getAttribute("url"),e.switchURL){var l=document.createElement("a");["mp4","hls","__flv__","dash"].every((function(t){return!e[t]||(e[t].url&&(l.href=e[t].url),"__flv__"===t&&(e[t]._options?l.href=e[t]._options.url:l.href=e[t]._mediaDataSource.url),!1)})),l.href===s.href||e.ended||e.switchURL(s.href)}else{if(e.hls){document.createElement("a");e.hls.url}if(s.href!==e.currentSrc){var c=e.currentTime,u=e.paused;e.ended||(e.src=s.href,e.once("canplay",(function(){e.currentTime=c,u||e.play()})))}}e.emit("definitionChange",s.href),"mobile"===n.device&&t.removeClass(e.root,"xgplayer-definition-active")}else"click"!==e.config.definitionActive||!i||"p"!==i.tagName.toLocaleLowerCase()&&"em"!==i.tagName.toLocaleLowerCase()||(t.addClass(e.root,"xgplayer-definition-active"),o.focus());e.emit("focus")}),!1)})),o.addEventListener("mouseleave",(function(n){n.preventDefault(),n.stopPropagation(),t.removeClass(e.root,"xgplayer-definition-active")})),e.once("destroy",(function t(){e.off("canplay",s),e.off("resourceReady",l),e.off("destroy",t)}))}))},"./src/control/download.js":
/*!*********************************!*\
  !*** ./src/control/download.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";var o=a(n(/*! ../player */"./src/player.js")),r=n(/*! ../utils/url */"./src/utils/url.js"),i=a(n(/*! downloadjs */"./node_modules/downloadjs/download.js"));function a(e){return e&&e.__esModule?e:{default:e}}o.default.install("download",(function(){var e=this;if(this.config.download){var t=e.root,n=o.default.util,a=n.createDom("xgplayer-download",'<xg-icon class="xgplayer-download-img"></xg-icon>',{},"xgplayer-download");e.controls.appendChild(a);var s=e.config.lang&&"zh-cn"===e.config.lang?"下载":"Download",l=n.createDom("xg-tips",s,{},"xgplayer-tips");a.appendChild(l),e.download=function(){var t=(0,r.getAbsoluteURL)(e.config.url);(0,i.default)(t)},a.addEventListener("click",(function(t){t.stopPropagation(),e.download()})),a.addEventListener("mouseenter",(function(e){e.preventDefault(),e.stopPropagation(),l.style.left="50%";var n=l.getBoundingClientRect(),o=t.getBoundingClientRect();n.right>o.right&&(l.style.left=-n.right+o.right+16+"px")}))}}))},"./src/control/error.js":
/*!******************************!*\
  !*** ./src/control/error.js ***!
  \******************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("error",(function(){var e=this,t=i.default.util,n=t.createDom("xg-error",'<em class="xgplayer-error-text">请<span class="xgplayer-error-refresh">刷新</span>试试</em>',{},"xgplayer-error");e.root.appendChild(n);var o=n.querySelector(".xgplayer-error-text"),r=null;function a(){e.error?o.innerHTML=e.error:e.config.lang&&"zh-cn"===e.config.lang?o.innerHTML=e.lang.ERROR+'，请<span class="xgplayer-error-refresh">刷新</span>试试':o.innerHTML=e.lang.ERROR+'，please try to <span class="xgplayer-error-refresh">refresh</span>',t.addClass(e.root,"xgplayer-is-error"),(r=n.querySelector(".xgplayer-error-refresh"))&&["touchend","click"].forEach((function(t){r.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation();var n=t.target||t.srcElement;n&&"span"===n.tagName.toLocaleLowerCase()&&(e.controls.style.display="flex",e.reload())}))}))}e.on("error",a),e.once("destroy",(function t(){e.off("error",a),e.off("destroy",t)}))}))},"./src/control/flex.js":
/*!*****************************!*\
  !*** ./src/control/flex.js ***!
  \*****************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("__flex__",(function(){var e=i.default.util.createDom("xg-placeholder","",{},"xgplayer-placeholder");this.controls.appendChild(e)}))},"./src/control/fullscreen.js":
/*!***********************************!*\
  !*** ./src/control/fullscreen.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("fullscreen",(function(){var e=this,t=i.default.util,n="M682 342h128v84h-212v-212h84v128zM598 810v-212h212v84h-128v128h-84zM342 342v-128h84v212h-212v-84h128zM214 682v-84h212v212h-84v-128h-128z",o="M598 214h212v212h-84v-128h-128v-84zM726 726v-128h84v212h-212v-84h128zM214 426v-212h212v84h-128v128h-84zM298 598v128h128v84h-212v-212h84z",r=t.createDom("xg-fullscreen",'<xg-icon class="xgplayer-icon"><svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n            <path transform="scale(0.03 0.03)" d="'+o+'"></path>\n        </svg></xg-icon>',{},"xgplayer-fullscreen"),a=e.config.lang&&"zh-cn"===e.config.lang?"全屏":"Full screen",s=e.config.lang&&"zh-cn"===e.config.lang?"退出全屏":"Exit full screen",l=e.controls,c=e.root,u=t.createDom("xg-tips",a,{},"xgplayer-tips"),d=r.querySelector("path");r.appendChild(u);l.appendChild(r),["click","touchend"].forEach((function(o){r.addEventListener(o,(function(o){var r,i;o.preventDefault(),o.stopPropagation(),t.hasClass(c,"xgplayer-fullscreen-active")||t.hasClass(c,"xgplayer-is-fullscreen")?function(n){var o=t.findDom(e.controls,"xg-cssfullscreen"),r="M843.617212 67.898413 175.411567 67.898413c-61.502749 0-111.367437 49.856501-111.367437 111.367437l0 668.205645c0 61.510936 49.864688 111.367437 111.367437 111.367437L843.617212 958.838931c61.510936 0 111.367437-49.856501 111.367437-111.367437L954.984648 179.26585C954.984648 117.754914 905.12917 67.898413 843.617212 67.898413zM398.146441 736.104057c15.380292 0 27.842115 12.461823 27.842115 27.842115 0 15.379269-12.461823 27.841092-27.842115 27.841092L259.725858 791.787264c-7.785314 0-14.781658-3.217275-19.838837-8.365528-5.383614-4.577249-8.791224-11.228739-8.791224-19.475564L231.095797 624.736621c0-15.371082 12.471033-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115l-0.61603 71.426773 133.036969-133.037992 39.378869 39.378869L324.962651 736.113267 398.146441 736.104057zM419.199942 463.611943 286.162974 330.565764l0.61603 71.435982c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.371082 0-27.842115-12.461823-27.842115-27.842115L231.094774 262.791172c0-8.256034 3.40761-14.908548 8.791224-19.476587 5.057179-5.148253 12.053524-8.374738 19.838837-8.374738l138.420583 0.00921c15.380292 0 27.842115 12.461823 27.842115 27.842115s-12.461823 27.842115-27.842115 27.842115l-73.175603-0.00921 133.607974 133.607974L419.199942 463.611943zM787.932981 763.946172c0 8.247848-3.40761 14.899338-8.791224 19.475564-5.057179 5.148253-12.053524 8.365528-19.839861 8.365528L620.881314 791.787264c-15.379269 0-27.841092-12.461823-27.841092-27.841092 0-15.380292 12.461823-27.842115 27.841092-27.842115l73.185836 0.00921L560.449967 602.50427l39.378869-39.378869L732.875015 696.163393l-0.62524-71.426773c0-15.371082 12.462846-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115L787.934005 763.946172zM787.932981 402.000724c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.379269 0-27.842115-12.461823-27.842115-27.842115l0.62524-71.435982L599.828836 463.611943l-39.378869-39.378869 133.617184-133.607974-73.185836 0.00921c-15.379269 0-27.841092-12.461823-27.841092-27.842115s12.461823-27.842115 27.841092-27.842115l138.421606-0.00921c7.785314 0 14.781658 3.226484 19.839861 8.374738 5.383614 4.568039 8.791224 11.219529 8.791224 19.476587L787.934005 402.000724z";if(o){var i=t.findDom(o,"xg-tips"),s=o.querySelector("path");o.style.display="block",i.textContent=e.config.lang&&"zh-cn"===e.config.lang?"样式全屏":"Full screen",s.setAttribute("d",r)}t.removeClass(n,"xgplayer-cssfullscreen-active"),d.setAttribute("d",r),u.textContent=a,document.exitFullscreen?document.exitFullscreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.msExitFullscreen?document.msExitFullscreen():t.removeClass(n,"xgplayer-fullscreen-active")}(c):(r=c,(i=t.findDom(e.controls,"xg-cssfullscreen"))&&(i.style.display="none"),d.setAttribute("d",n),u.textContent=s,r.requestFullscreen?r.requestFullscreen():r.mozRequestFullScreen?r.mozRequestFullScreen():r.webkitRequestFullscreen?r.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT):e.video.webkitSupportsFullscreen?e.video.webkitEnterFullscreen():r.msRequestFullscreen?r.msRequestFullscreen():t.addClass(r,"xgplayer-fullscreen-active"))}))})),e.video.addEventListener("webkitendfullscreen",(function(){e.emit("exitFullscreen"),d.setAttribute("d",o)}));["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"].forEach((function(n){document.addEventListener(n,(function(n){if(n.preventDefault(),n.stopPropagation(),!(document.fullscreenElement||document.webkitIsFullScreen||document.mozFullScreen||document.msFullscreenElement)){var o=t.findDom(e.controls,"xg-cssfullscreen"),r={default:"M843.617212 67.898413 175.411567 67.898413c-61.502749 0-111.367437 49.856501-111.367437 111.367437l0 668.205645c0 61.510936 49.864688 111.367437 111.367437 111.367437L843.617212 958.838931c61.510936 0 111.367437-49.856501 111.367437-111.367437L954.984648 179.26585C954.984648 117.754914 905.12917 67.898413 843.617212 67.898413zM398.146441 736.104057c15.380292 0 27.842115 12.461823 27.842115 27.842115 0 15.379269-12.461823 27.841092-27.842115 27.841092L259.725858 791.787264c-7.785314 0-14.781658-3.217275-19.838837-8.365528-5.383614-4.577249-8.791224-11.228739-8.791224-19.475564L231.095797 624.736621c0-15.371082 12.471033-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115l-0.61603 71.426773 133.036969-133.037992 39.378869 39.378869L324.962651 736.113267 398.146441 736.104057zM419.199942 463.611943 286.162974 330.565764l0.61603 71.435982c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.371082 0-27.842115-12.461823-27.842115-27.842115L231.094774 262.791172c0-8.256034 3.40761-14.908548 8.791224-19.476587 5.057179-5.148253 12.053524-8.374738 19.838837-8.374738l138.420583 0.00921c15.380292 0 27.842115 12.461823 27.842115 27.842115s-12.461823 27.842115-27.842115 27.842115l-73.175603-0.00921 133.607974 133.607974L419.199942 463.611943zM787.932981 763.946172c0 8.247848-3.40761 14.899338-8.791224 19.475564-5.057179 5.148253-12.053524 8.365528-19.839861 8.365528L620.881314 791.787264c-15.379269 0-27.841092-12.461823-27.841092-27.841092 0-15.380292 12.461823-27.842115 27.841092-27.842115l73.185836 0.00921L560.449967 602.50427l39.378869-39.378869L732.875015 696.163393l-0.62524-71.426773c0-15.371082 12.462846-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115L787.934005 763.946172zM787.932981 402.000724c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.379269 0-27.842115-12.461823-27.842115-27.842115l0.62524-71.435982L599.828836 463.611943l-39.378869-39.378869 133.617184-133.607974-73.185836 0.00921c-15.379269 0-27.841092-12.461823-27.841092-27.842115s12.461823-27.842115 27.841092-27.842115l138.421606-0.00921c7.785314 0 14.781658 3.226484 19.839861 8.374738 5.383614 4.568039 8.791224 11.219529 8.791224 19.476587L787.934005 402.000724z"};if(o){var i=t.findDom(o,"xg-tips"),s=o.querySelector("path");o.style.display="block",i.textContent=e.config.lang&&"zh-cn"===e.config.lang?"样式全屏":"Full screen",s.setAttribute("d",r.default)}t.removeClass(c,"xgplayer-cssfullscreen-active"),d.setAttribute("d",r.default),u.textContent=a,t.removeClass(c,"xgplayer-fullscreen-active")}}))}));var p=function(r){var i=document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement;i&&i===c?(t.addClass(c,"xgplayer-is-fullscreen"),d.setAttribute("d",n),u.textContent=s,e.emit("requestFullscreen")):(t.removeClass(c,"xgplayer-is-fullscreen"),d.setAttribute("d",o),u.textContent=a,e.emit("exitFullscreen"))};r.addEventListener("mouseenter",(function(e){e.preventDefault(),e.stopPropagation(),u.style.left="50%";var t=u.getBoundingClientRect(),n=c.getBoundingClientRect();t.right>n.right&&(u.style.left=-t.right+n.right+16+"px")})),["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"].forEach((function(e){document.addEventListener(e,p)})),e.once("destroy",(function t(){["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"].forEach((function(e){document.removeEventListener(e,p)})),e.off("destroy",t)}))}))},"./src/control/i18n.js":
/*!*****************************!*\
  !*** ./src/control/i18n.js ***!
  \*****************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js");((o=r)&&o.__esModule?o:{default:o}).default.install("i18n",(function(){var e=this,t={},n=e.constructor.util;t.en={HAVE_NOTHING:"There is no information on whether audio/video is ready",HAVE_METADATA:"audio/video metadata is ready ",HAVE_CURRENT_DATA:"Data about the current play location is available, but there is not enough data to play the next frame/millisecond",HAVE_FUTURE_DATA:"Current and at least one frame of data is available",HAVE_ENOUGH_DATA:"The available data is sufficient to start playing",NETWORK_EMPTY:"Audio/video has not been initialized",NETWORK_IDLE:"Audio/video is active and has been selected for resources, but no network is used",NETWORK_LOADING:"The browser is downloading the data",NETWORK_NO_SOURCE:"No audio/video source was found",MEDIA_ERR_ABORTED:"The fetch process is aborted by the user",MEDIA_ERR_NETWORK:"An error occurred while downloading",MEDIA_ERR_DECODE:"An error occurred while decoding",MEDIA_ERR_SRC_NOT_SUPPORTED:"Audio/video is not supported",REPLAY:"Replay",ERROR:"network is offline"},t["zh-cn"]={HAVE_NOTHING:"没有关于音频/视频是否就绪的信息",HAVE_METADATA:"音频/视频的元数据已就绪",HAVE_CURRENT_DATA:"关于当前播放位置的数据是可用的，但没有足够的数据来播放下一帧/毫秒",HAVE_FUTURE_DATA:"当前及至少下一帧的数据是可用的",HAVE_ENOUGH_DATA:"可用数据足以开始播放",NETWORK_EMPTY:"音频/视频尚未初始化",NETWORK_IDLE:"音频/视频是活动的且已选取资源，但并未使用网络",NETWORK_LOADING:"浏览器正在下载数据",NETWORK_NO_SOURCE:"未找到音频/视频来源",MEDIA_ERR_ABORTED:"取回过程被用户中止",MEDIA_ERR_NETWORK:"当下载时发生错误",MEDIA_ERR_DECODE:"当解码时发生错误",MEDIA_ERR_SRC_NOT_SUPPORTED:"不支持的音频/视频格式",REPLAY:"重播",ERROR:"网络连接似乎出现了问题"},Object.defineProperty(e,"lang",{get:function(){return t[e.config.lang]||t.en},set:function(e){"Object"===n.typeOf(e)&&Object.keys(e).forEach((function(n){t[n]=e[n]}))}})}))},"./src/control/loading.js":
/*!********************************!*\
  !*** ./src/control/loading.js ***!
  \********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("loading",(function(){var e=i.default.util.createDom("xg-loading",'\n    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewbox="0 0 100 100">\n      <path d="M100,50A50,50,0,1,1,50,0"></path>\n    </svg>\n    ',{},"xgplayer-loading");this.root.appendChild(e)}))},"./src/control/localPreview.js":
/*!*************************************!*\
  !*** ./src/control/localPreview.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("localPreview",(function(){var e=this,t=i.default.util,n=t.createDom("xg-preview",'<input type="file">',{},"xgplayer-preview"),o=n.querySelector("input");e.config.preview&&e.config.preview.uploadEl&&(e.config.preview.uploadEl.appendChild(n),o.onchange=function(){e.uploadFile=o.files[0];var n=URL.createObjectURL(e.uploadFile);t.hasClass(e.root,"xgplayer-nostart")?(e.config.url=n,e.start()):(e.src=n,e.play())})}))},"./src/control/logger.js":
/*!*******************************!*\
  !*** ./src/control/logger.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o=a(n(/*! ../player */"./src/player.js")),r=a(n(/*! ../utils/sniffer */"./src/utils/sniffer.js")),i=a(n(/*! ./collect */"./src/control/collect.js"));function a(e){return e&&e.__esModule?e:{default:e}}o.default.install("logger",(function(){var e=this,t=o.default.util;if(!0!==e.config.noLog){var n=function(){e.video.played;var t=l(e.logParams.played),n=(new Date).getTime();c();var o={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*t).toFixed(3)),cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3)),et:n};window.__xigua_log_sdk__("c",o)},a=function(){e.video.played;var t=l(e.logParams.played),n=(new Date).getTime();c();var o={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*t).toFixed(3)),cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3)),lt:n};window.__xigua_log_sdk__("d",o)},s=function(t){e.video.played;var n=l(e.logParams.played);c();var o=(new Date).getTime();if(!(e.logParams.lastErrLog&&o-e.logParams.lastErrLog<=3e3)){e.logParams.lastErrLog=o;var r={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*n).toFixed(3)),err_msg:t.errd.msg,line:t.errd.line,et:o,cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3))};if(e.logParams.nologFunc&&e.logParams.nologFunc(e))return!0;window.__xigua_log_sdk__("e",r)}};window.__xigua_log_sdk__||(window.__xigua_log_sdk__=new i.default("tracker"),window.__xigua_log_sdk__.init({app_id:1300,channel:"cn",log:!1,disable_sdk_monitor:!0}),window.__xigua_log_sdk__("config",{evtParams:{log_type:"logger",page_url:document.URL,domain:window.location.host,pver:e.version,ua:navigator.userAgent.toLowerCase()},disable_auto_pv:!0}),window.__xigua_log_sdk__.start()),e.config.uid&&window.__xigua_log_sdk__("config",{user_unique_id:e.config.uid});var l=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=[],n=0;n<e.length;n++)if(!(!e[n].end||e[n].begin<0||e[n].end<0||e[n].end<e[n].begin))if(t.length<1)t.push({begin:e[n].begin,end:e[n].end});else for(var o=0;o<t.length;o++){var r=e[n].begin,i=e[n].end;if(i<t[o].begin){t.splice(o,0,{begin:r,end:i});break}if(!(r>t[o].end)){var a=t[o].begin,s=t[o].end;t[o].begin=Math.min(r,a),t[o].end=Math.max(i,s);break}if(o>t.length-2){t.push({begin:r,end:i});break}}for(var l=0,c=0;c<t.length;c++)l+=t[c].end-t[c].begin;return l},c=function(){e.logParams.pt&&e.logParams.vt||(e.logParams.pt=(new Date).getTime(),e.logParams.vt=e.logParams.pt),e.logParams.pt>e.logParams.vt&&(e.logParams.pt=e.logParams.vt)},u=function(n){if(t.hasClass(e.root,"xgplayer-is-enter")){var o=(new Date).getTime(),r={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,pt:e.logParams.pt,lt:o};window.__xigua_log_sdk__("b",r)}else if(t.hasClass(e.root,"xgplayer-playing")){var i=l(e.logParams.played),a=(new Date).getTime();c();var s={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*i).toFixed(3)),cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3)),lt:a};window.__xigua_log_sdk__("d",s)}};"pc"===r.default.device?window.addEventListener("beforeunload",u,!1):"mobile"===r.default.device&&window.addEventListener("pagehide",u,!1),e.on("routechange",u),e.on("ended",n),e.on("urlchange",a),e.on("error",s),e.once("destroy",(function t(){"pc"===r.default.device?window.removeEventListener("beforeunload",u):"mobile"===r.default.device&&window.removeEventListener("pagehide",u),e.off("routechange",u),e.off("ended",n),e.off("urlchange",a),e.off("error",s),e.off("destroy",t)}))}}))},"./src/control/mobile.js":
/*!*******************************!*\
  !*** ./src/control/mobile.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o=i(n(/*! ../player */"./src/player.js")),r=i(n(/*! ../utils/svg */"./src/utils/svg.js"));function i(e){return e&&e.__esModule?e:{default:e}}o.default.install("mobile",(function(){var e=this,t=o.default.util,n=e.root,i=function(e){var t=o.default.util;return e.some((function(e){return"Function"===t.typeOf(e)?e.call(void 0,navigator.userAgent):"RegExp"===t.typeOf(e)?e.test(navigator.userAgent):"String"===t.typeOf(e)&&navigator.userAgent.indexOf(e)>-1}))}(e.config.whitelist);e.mobilePass=i;var a=e.config.centerBtn?e.config.centerBtn:{},s=void 0,l=void 0,c=void 0,u=void 0;"img"===a.type?l=o.default.util.createImgBtn("start",a.url.play,a.width,a.height):(s={pause:a.pausePath?a.pausePath:"M576,363L810,512L576,661zM342,214L576,363L576,661L342,810z",play:a.playPath?a.playPath:"M598,214h170v596h-170v-596zM256 810v-596h170v596h-170z"},l=t.createDom("xg-start",'\n          <svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n              <path transform="scale(0.04,0.04)" d="'+s.pause+'"></path>\n          </svg>',{},"xgplayer-start"),c=l.querySelector("path"),u=new r.default({from:s.play,to:s.pause,progress:function(e,t){c.setAttribute("d",u.toSVGString(e))}}));var d=t.createDom("xg-enter",'<xg-enter-logo class="xgplayer-enter-logo"></xg-enter-logo><xg-enter-tips class="xgplayer-enter-tips"></xg-player-tips>',{},"xgplayer-enter"),p=d.querySelector(".xgplayer-enter-logo");n.appendChild(l),n.appendChild(d);var f=d.querySelector(".xgplayer-enter-tips"),h=new Image;h.onload=function(){f.style.display="block"},e.config.enterLogo&&e.config.enterLogo.url&&e.config.enterLogo.width&&e.config.enterLogo.height?(h.src=e.config.enterLogo.url,p.style.backgroundImage='url("'+e.config.enterLogo.url+'")',p.style.width=e.config.enterLogo.width+"px",p.style.height=e.config.enterLogo.height+"px",p.style.backgroundSize=e.config.enterLogo.width+"px "+e.config.enterLogo.height+"px",p.style.margin="-"+e.config.enterLogo.height/2+"px auto auto -"+e.config.enterLogo.width/2+"px",f.style.margin=e.config.enterLogo.height-6+"px auto auto -62px"):h.src=t.getBgImage(p),e.config.enterTips&&e.config.enterTips.background&&(f.style.background=""+e.config.enterTips.background),e.config.enterBg&&(e.config.enterBg.url?d.style.backgroundImage='url("'+e.config.enterBg.url+'")':e.config.enterBg.color&&(d.style.background=e.config.enterBg.color)),e.start(),i?(e.video.addEventListener("touchend",(function(o){o.preventDefault(),t.hasClass(n,"xgplayer-inactive")?e.emit("focus"):e.emit("blur"),e.config.closeVideoTouch||e.ended||(e.paused?e.play():e.pause())}),!1),l.addEventListener("touchend",(function(o){o.preventDefault(),t.hasClass(n,"xgplayer-nostart")?(t.removeClass(n,"xgplayer-nostart"),t.addClass(n,"xgplayer-is-enter"),e.on("canplay",(function(){t.removeClass(n,"xgplayer-is-enter")})),e.once("playing",(function(){t.removeClass(n,"xgplayer-is-enter")})),e.play()):e.paused?e.play():e.pause()})),e.on("play",(function(){"img"===a.type?l.style.backgroundImage='url("'+a.url.pause+'")':u.reset(s.play,s.pause)})),e.on("pause",(function(){"img"===a.type?l.style.backgroundImage='url("'+a.url.play+'")':u.reset(s.pause,s.play)}))):(t.addClass(n,"xgplayer-mobile-npassed"),e.once("ready",(function(){e.video.controls=e.config.controls,e.video.controlsList=e.config.controlsList.join(" "),e.config.poster&&(e.video.poster=e.config.poster)}))),e.config.debug&&function(e){var t={};Object.assign(t,{host:"127.0.0.1",port:9090},e);var n=document.createElement("script"),o=document.createElement("h4");o.style.cssText="position:fixed;bottom:0;padding:10px;width:100%;background-color:#fff;text-align:center",o.textContent="weinre --boundHost "+t.host+" --httpPort "+t.port+"\r\n 启动服务后，刷新页面",n.anonymous=!0,n.async=!0,n.src="http://"+t.host+":"+t.port+"/target/target-script-min.js#anonymous",n.onload=function(){o.parentNode.removeChild(o)},document.body.appendChild(n),document.body.appendChild(o)}(e.config.debug)}))},"./src/control/pc.js":
/*!***************************!*\
  !*** ./src/control/pc.js ***!
  \***************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("pc",(function(){var e=this,t=i.default.util,n=e.controls,o=e.root,r=0,a=void 0,s=e.config.centerBtn?e.config.centerBtn:{},l=void 0,c=void 0,u=void 0;"img"===s.type?c=i.default.util.createImgBtn("start",s.url.play,s.width,s.height):(l={pause:s.pausePath?s.pausePath:"M576,363L810,512L576,661zM342,214L576,363L576,661L342,810z",play:s.playPath?s.playPath:"M598,214h170v596h-170v-596zM256 810v-596h170v596h-170z"},c=t.createDom("xg-start",'\n          <svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n              <path transform="scale(0.04,0.04)" d="'+l.pause+'"></path>\n          </svg>',{},"xgplayer-start"),u=c.querySelector("path"));var d=t.createDom("xg-enter",'<xg-enter-logo class="xgplayer-enter-logo"></xg-enter-logo><xg-enter-tips class="xgplayer-enter-tips"></xg-player-tips>',{},"xgplayer-enter"),p=d.querySelector(".xgplayer-enter-logo");o.appendChild(c),o.appendChild(d);var f=d.querySelector(".xgplayer-enter-tips"),h=new Image;function g(){t.removeClass(o,"xgplayer-is-enter")}function v(){t.removeClass(o,"xgplayer-is-enter")}function m(){"img"===s.type?c.style.backgroundImage='url("'+s.url.pause+'")':u.setAttribute("d",l.pause),c.style.display="inline-block",t.addClass(c,"xgplayer-start-interact")}function y(){"img"===s.type?c.style.backgroundImage='url("'+s.url.play+'")':u.setAttribute("d",l.play),c.style.display="inline-block",t.addClass(c,"xgplayer-start-interact")}function b(t){e.config.autoplay&&e.start()}h.onload=function(){f.style.display="block"},e.config.enterLogo&&e.config.enterLogo.url&&e.config.enterLogo.width&&e.config.enterLogo.height?(h.src=e.config.enterLogo.url,p.style.backgroundImage='url("'+e.config.enterLogo.url+'")',p.style.width=e.config.enterLogo.width+"px",p.style.height=e.config.enterLogo.height+"px",p.style.backgroundSize=e.config.enterLogo.width+"px "+e.config.enterLogo.height+"px",p.style.margin="-"+e.config.enterLogo.height/2+"px auto auto -"+e.config.enterLogo.width/2+"px",f.style.margin=e.config.enterLogo.height-6+"px auto auto -62px"):h.src=t.getBgImage(p),e.config.enterTips&&e.config.enterTips.background&&(f.style.background=""+e.config.enterTips.background),e.config.enterBg&&(e.config.enterBg.url?d.style.backgroundImage='url("'+e.config.enterBg.url+'")':e.config.enterBg.color&&(d.style.background=e.config.enterBg.color)),["click","touchend"].forEach((function(n){c.addEventListener(n,(function(n){!function(n){n.preventDefault(),n.stopPropagation(),t.hasClass(o,"xgplayer-nostart")?(t.removeClass(o,"xgplayer-nostart"),t.addClass(o,"xgplayer-is-enter"),e.on("canplay",g),e.once("playing",v),o.querySelector("video")||e.start(),e.play()):e.paused&&(t.removeClass(o,"xgplayer-nostart xgplayer-isloading"),setTimeout((function(){e.play()}),10))}(n)}),!1)})),c.addEventListener("animationend",(function(e){!function(e){e.preventDefault(),t.removeClass(c,"xgplayer-start-interact"),c.style.display="none"}(e)})),e.on("play",m),e.on("pause",y),e.onElementClick=function(e,n){e.preventDefault(),e.stopPropagation();var o=this;o.config.closeVideoClick||(r++,a&&clearTimeout(a),1===r?a=setTimeout((function(){if(t.hasClass(o.root,"xgplayer-nostart"))return!1;o.ended||(o.paused?o.play():o.pause()),r=0}),200):r=0)},e.video.addEventListener("click",(function(t){e.onElementClick(t,e.video)}),!1),e.onElementDblclick=function(e,t){e.preventDefault(),e.stopPropagation();if(!this.config.closeVideoDblclick){var o=n.querySelector(".xgplayer-fullscreen");if(o){var r=void 0;document.createEvent?(r=document.createEvent("Event")).initEvent("click",!0,!0):r=new Event("click"),o.dispatchEvent(r)}}},e.video.addEventListener("dblclick",(function(t){e.onElementDblclick(t,e.video)}),!1),o.addEventListener("mouseenter",(function(){clearTimeout(e.leavePlayerTimer),e.emit("focus",e)}),!1),o.addEventListener("mouseleave",(function(){e.config.closePlayerBlur||(e.leavePlayerTimer=setTimeout((function(){e.emit("blur",e)}),e.config.leavePlayerTime||0))}),!1),n.addEventListener("mouseenter",(function(t){e.userTimer&&clearTimeout(e.userTimer)}),!1),n.addEventListener("mouseleave",(function(t){e.config.closeControlsBlur||e.emit("focus",e)}),!1),e.once("ready",b),e.once("destroy",(function t(){e.off("canplay",g),e.off("playing",v),e.off("play",m),e.off("pause",y),e.off("ready",b),e.off("destroy",t)}))}))},"./src/control/pip.js":
/*!****************************!*\
  !*** ./src/control/pip.js ***!
  \****************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("pip",(function(){var e=this,t=i.default.util;if(e.config.pip){var n=t.createDom("xg-pip",'<p class="name"><span>画中画</span></p>',{tabindex:9},"xgplayer-pip"),o=e.controls,r=e.root;o.appendChild(n);["click","touchstart"].forEach((function(o){n.addEventListener(o,(function(n){n.preventDefault(),n.stopPropagation(),t.hasClass(r,"xgplayer-pip-active")?e.exitPIP(e):e.getPIP(e)}))}))}}))},"./src/control/play.js":
/*!*****************************!*\
  !*** ./src/control/play.js ***!
  \*****************************/
/*! no static exports found */function(e,t,n){"use strict";var o=i(n(/*! ../player */"./src/player.js")),r=i(n(/*! ../utils/svg */"./src/utils/svg.js"));function i(e){return e&&e.__esModule?e:{default:e}}o.default.install("play",(function(){var e=this,t=e.controls,n=o.default.util,i=e.config.iconScale||.0320625,a={play:"M576,363L810,512L576,661zM342,214L576,363L576,661L342,810z",pause:"M598,214h170v596h-170v-596zM256 810v-596h170v596h-170z"},s=e.config.playBtn?e.config.playBtn:{},l=void 0,c=void 0,u=void 0;"img"===s.type?l=o.default.util.createImgBtn("play",s.url.play,s.width,s.height):(l=n.createDom("xg-play",'<xg-icon class="xgplayer-icon"><svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n              <path transform="scale('+i+" "+i+')" d="'+a.play+'"></path>\n          </svg></xg-icon>',{},"xgplayer-play"),c=l.querySelector("path"),u=new r.default({progress:function(e,t){c.setAttribute("d",u.toSVGString(e))},from:a.pause,to:a.play,duration:50}));var d=e.config.lang&&"zh-cn"===e.config.lang?"播放":"Play",p=e.config.lang&&"zh-cn"===e.config.lang?"暂停":"Pause",f=n.createDom("xg-tips",d,{},"xgplayer-tips");l.appendChild(f);function h(){"img"===s.type?l.style.backgroundImage='url("'+s.url.pause+'")':setTimeout((function(){f.textContent=p,u.to!==a.pause&&u.reset(a.pause,a.play)}),80)}function g(){"img"===s.type?l.style.backgroundImage='url("'+s.url.play+'")':setTimeout((function(){f.textContent=d,u.to!==a.play&&u.reset(a.play,a.pause)}),80)}t.appendChild(l),["click","touchstart"].forEach((function(t){l.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation(),e.ended||(e.paused?e.play():e.pause())}),!1)})),e.on("play",h),e.on("pause",g),e.once("destroy",(function t(){e.off("play",h),e.off("pause",g),e.off("destroy",t)}))}))},"./src/control/playNext.js":
/*!*********************************!*\
  !*** ./src/control/playNext.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("playNext",(function(){var e=this,t=i.default.util,n=e.controls,o=e.config.playNextBtn,r=-1;if(o&&o.urlList){var a=void 0;a="img"===o.type?i.default.util.createImgBtn("playNext",o.url,o.width,o.height):t.createDom("xg-playNext",'<xg-icon class="xgplayer-icon"><svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n                <path transform="scale(0.025 0.025)"\n                d="M800 380v768h-128v-352l-320 320v-704l320 320v-352z"></path>\n            </svg></xg-icon>',{},"xgplayer-playNext"),n.appendChild(a);["click","touchend"].forEach((function(t){a.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation(),r+1<o.urlList.length?(r++,e.video.pause(),e.currentTime=0,e.video.autoplay=!0,e.src=o.urlList[r],e.emit("playerNext",r+1)):e.emit("urlList last")}),!1)}))}}))},"./src/control/playbackRate.js":
/*!*************************************!*\
  !*** ./src/control/playbackRate.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("playbackRate",(function(){var e=this,t=i.default.util,n=0,o=1,r=[];if(!e.config.playbackRate)return!1;e.config.playbackRate.sort((function(e,t){return e-t})),e.config.playbackRate.forEach((function(t,i){e.config.defaultPlaybackRate&&e.config.defaultPlaybackRate===t?(n=i,o=t,e.once("playing",(function(){e.video.playbackRate=t}))):1!==t&&"1"!==t||(n=i),r.push(t+"x")}));var a=e.config.lang&&"zh-cn"===e.config.lang?"倍速":"Speed",s=t.createDom("xg-playback","<p class='name'><span>"+o+"x</span></p>",{},"xgplayer-playback"),l=e.controls,c=t.createDom("xg-tips",a,{},"xgplayer-tips");s.appendChild(c),l.appendChild(s),["touchstart","click"].forEach((function(t){s.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation();var o=t.target||t.srcElement;!o||"p"!==o.tagName.toLocaleLowerCase()&&"span"!==o.tagName.toLocaleLowerCase()||(n=n+1===r.length?0:n+1,s.querySelector("p").innerHTML="<span>"+r[n]+"</span>",e.video.playbackRate=1*r[n].replace(/x$/g,""))}),!1)})),s.addEventListener("mouseenter",(function(t){t.preventDefault(),t.stopPropagation(),c.style.left="50%";var n=c.getBoundingClientRect(),o=e.root.getBoundingClientRect();n.right>o.right&&(c.style.left=-n.right+o.right+16+"px")})),e.on("play",(function(){var t=parseFloat(r[n].substring(0,r[n].length-1));e.video.playbackRate.toFixed(1)!==t.toFixed(1)&&(e.video.playbackRate=t)}))}))},"./src/control/poster.js":
/*!*******************************!*\
  !*** ./src/control/poster.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("poster",(function(){var e=this,t=i.default.util.createDom("xg-poster","",{},"xgplayer-poster"),n=e.root;function o(){t.style.display="none"}e.config.poster&&(t.style.backgroundImage="url("+e.config.poster+")",n.appendChild(t)),e.on("play",o),e.once("destroy",(function t(){e.off("play",o),e.off("destroy",t)}))}))},"./src/control/progress.js":
/*!*********************************!*\
  !*** ./src/control/progress.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("progress",(function(){var e=this,t=i.default.util,n=t.createDom("xg-progress",'<xg-outer class="xgplayer-progress-outer"><xg-cache class="xgplayer-progress-cache"></xg-cache><xg-played class="xgplayer-progress-played"></xgplayer-played><xg-progress-btn class="xgplayer-progress-btn"></xg-progress-btn><xg-point class="xgplayer-progress-point xgplayer-tips"></xg-point><xg-thumbnail class="xgplayer-progress-thumbnail xgplayer-tips"></xg-thumbnail></xg-outer>',{tabindex:1},"xgplayer-progress"),o=e.controls,r=void 0;o.appendChild(n);var a=n.querySelector(".xgplayer-progress-played"),s=n.querySelector(".xgplayer-progress-btn"),l=n.querySelector(".xgplayer-progress-outer"),c=n.querySelector(".xgplayer-progress-cache"),u=n.querySelector(".xgplayer-progress-point"),d=n.querySelector(".xgplayer-progress-thumbnail");function p(o,r){o.addEventListener("mouseenter",(function(e){r&&(t.addClass(o,"xgplayer-progress-dot-show"),t.addClass(n,"xgplayer-progress-dot-active"))})),o.addEventListener("mouseleave",(function(e){r&&(t.removeClass(o,"xgplayer-progress-dot-show"),t.removeClass(n,"xgplayer-progress-dot-active"))})),o.addEventListener("touchend",(function(i){i.preventDefault(),i.stopPropagation(),r&&(t.hasClass(o,"xgplayer-progress-dot-show")||Object.keys(e.dotArr).forEach((function(n){e.dotArr[n]&&t.removeClass(e.dotArr[n],"xgplayer-progress-dot-show")})),t.toggleClass(o,"xgplayer-progress-dot-show"),t.toggleClass(n,"xgplayer-progress-dot-active"))}))}function f(){e.config.progressDot&&"Array"===t.typeOf(e.config.progressDot)&&e.config.progressDot.forEach((function(n){if(n.time>=0&&n.time<=e.duration){var o=t.createDom("xg-progress-dot",n.text?'<span class="xgplayer-progress-tip">'+n.text+"</span>":"",{},"xgplayer-progress-dot");o.style.left=n.time/e.duration*100+"%",l.appendChild(o),e.dotArr[n.time]=o,p(o,n.text)}}))}e.dotArr={},e.once("canplay",f),e.addProgressDot=function(n,o){if(!e.dotArr[n]&&n>=0&&n<=e.duration){var r=t.createDom("xg-progress-dot","",{},"xgplayer-progress-dot");r.style.left=n/e.duration*100+"%",l.appendChild(r),e.dotArr[n]=r,p(r,o)}},e.removeProgressDot=function(t){if(t>=0&&t<=e.duration&&e.dotArr[t]){var n=e.dotArr[t];n.parentNode.removeChild(n),n=null,e.dotArr[t]=null}},e.removeAllProgressDot=function(){Object.keys(e.dotArr).forEach((function(t){if(e.dotArr[t]){var n=e.dotArr[t];n.parentNode.removeChild(n),n=null,e.dotArr[t]=null}}))};var h=0,g=0,v=0,m=0,y=0,b=0,x=[];e.config.thumbnail&&(h=e.config.thumbnail.pic_num,g=e.config.thumbnail.width,v=e.config.thumbnail.height,m=e.config.thumbnail.col,y=e.config.thumbnail.row,x=e.config.thumbnail.urls,d.style.width=g+"px",d.style.height=v+"px"),["touchstart","mousedown"].forEach((function(i){n.addEventListener(i,(function(i){if(i.preventDefault(),i.stopPropagation(),t.event(i),i._target===u||!e.config.allowSeekAfterEnded&&e.ended)return!1;n.focus(),r=n.getBoundingClientRect().width;var l=a.getBoundingClientRect().left,c=function(n){n.preventDefault(),n.stopPropagation(),t.event(n),e.isProgressMoving=!0;var i=n.clientX-l>r?r:n.clientX-l,c=i/r*e.duration;if(a.style.width=100*i/r+"%",i-7<0?(s.style.left="0px",s.style.transform=""):i+7>r?(s.style.left=r-14+"px",s.style.transform=""):(s.style.left="100%",s.style.transform="translate(-50%, 0)"),"video"!==e.videoConfig.mediaType||e.dash||e.config.closeMoveSeek){var u=t.findDom(o,".xgplayer-time");u&&(u.innerHTML="<span>"+t.format(c||0)+"</span><em>"+t.format(e.duration))}else e.currentTime=Number(c).toFixed(1);e.emit("focus")},d=function o(i){if(i.preventDefault(),i.stopPropagation(),t.event(i),window.removeEventListener("mousemove",c),window.removeEventListener("touchmove",c,{passive:!1}),window.removeEventListener("mouseup",o),window.removeEventListener("touchend",o),n.blur(),!e.isProgressMoving||"audio"===e.videoConfig.mediaType||e.dash||e.config.closeMoveSeek){var u=i.clientX-l,d=u/r*e.duration;a.style.width=100*u/r+"%",u-7<0?(s.style.left="0px",s.style.transform=""):u+7>r?(s.style.left=r-14+"px",s.style.transform=""):(s.style.left="100%",s.style.transform="translate(-50%, 0)"),e.currentTime=Number(d).toFixed(1)}e.emit("focus"),e.isProgressMoving=!1};return window.addEventListener("mousemove",c),window.addEventListener("touchmove",c,{passive:!1}),window.addEventListener("mouseup",d),window.addEventListener("touchend",d),!1}))})),n.addEventListener("mouseenter",(function(o){if(!e.config.allowSeekAfterEnded&&e.ended)return!1;var r=n.getBoundingClientRect().left,i=n.getBoundingClientRect().width,a=function(o){var a=(o.clientX-r)/i*e.duration;a=a<0?0:a,u.textContent=t.format(a);var s=u.getBoundingClientRect().width;if(e.config.thumbnail){b=e.duration/h;var l=Math.floor(a/b);d.style.backgroundImage="url("+x[Math.ceil((l+1)/(m*y))-1]+")";var c=l+1-m*y*(Math.ceil((l+1)/(m*y))-1),p=Math.ceil(c/y)-1,f=c-p*y-1;d.style["background-position"]="-"+f*g+"px -"+p*v+"px";var w=o.clientX-r-g/2;w=(w=w>0?w:0)<i-g?w:i-g,d.style.left=w+"px",d.style.top=-10-v+"px",d.style.display="block",u.style.left=w+g/2-s/2+"px"}else{var _=o.clientX-r-s/2;_=(_=_>0?_:0)>i-s?i-s:_,u.style.left=_+"px"}t.hasClass(n,"xgplayer-progress-dot-active")?u.style.display="none":u.style.display="block"},s=function(e){a(e)};n.addEventListener("mousemove",s,!1),n.addEventListener("mouseleave",(function e(t){n.removeEventListener("mousemove",s,!1),n.removeEventListener("mouseleave",e,!1),a(t),u.style.display="none",d.style.display="none"}),!1),a(o)}),!1);var w=!1,_=function(){if(!r&&n&&(r=n.getBoundingClientRect().width),"audio"!==e.videoConfig.mediaType||!e.isProgressMoving||!e.dash){a.style.width=100*e.currentTime/e.duration+"%";var t=e.currentTime/e.duration*r-7;if(t<0)s.style.left="0px",s.style.transform="",w=!1;else if(t+14>r)s.style.left=r-14+"px",s.style.transform="",w=!1;else{if(w)return;s.style.left="100%",s.style.transform="translate(-50%, 0)",w=!0}}};e.on("timeupdate",_);var k=function(){var t=e.buffered;if(t&&t.length>0){for(var n=t.end(t.length-1),o=0,r=t.length;o<r;o++)if(e.currentTime>=t.start(o)&&e.currentTime<=t.end(o)){n=t.end(o);for(var i=o+1;i<t.length;i++)if(t.start(i)-t.end(i-1)>=2){n=t.end(i-1);break}break}c.style.width=n/e.duration*100+"%"}},E=["bufferedChange","cacheupdate","ended","timeupdate"];E.forEach((function(t){e.on(t,k)})),e.once("destroy",(function t(){e.removeAllProgressDot(),e.off("canplay",f),e.off("timeupdate",_),E.forEach((function(t){e.off(t,k)})),e.off("destroy",t)}))}))},"./src/control/replay.js":
/*!*******************************!*\
  !*** ./src/control/replay.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("replay",(function(){var e=this,t=i.default.util,n=e.config.centerBtn?e.config.centerBtn:{},o=void 0,r=void 0,a=void 0,s=void 0;if(!(navigator.userAgent.indexOf("iPhone OS 9")>-1)){if("img"===n.type){if(r=t.createDom("xg-replay",'<div class="xgplayer-replay-img"></div>',{},"xgplayer-replay"),(a=r.querySelector(".xgplayer-replay-img")).style.backgroundImage='url("'+n.url.replay+'")',n.width&&n.height){var l=void 0,c=void 0,u=void 0;["px","rem","em","pt","dp","vw","vh","vm","%"].every((function(e){return!(n.width.indexOf(e)>-1&&n.height.indexOf(e)>-1)||(l=parseFloat(n.width.slice(0,n.width.indexOf(e)).trim()),c=parseFloat(n.height.slice(0,n.height.indexOf(e)).trim()),u=e,!1)})),a.style.width=""+l+u,a.style.height=""+c+u,a.style.backgroundSize=""+l+u+" "+c+u,a.style.margin="-"+c/2+u+" auto auto -"+l/2+u}}else o={replay:n.replayPath?n.replayPath:"M8.22708362,13.8757234 L11.2677371,12.6472196 C11.7798067,12.4403301 12.3626381,12.6877273 12.5695276,13.1997969 L12.9441342,14.1269807 C13.1510237,14.6390502 12.9036264,15.2218816 12.3915569,15.4287712 L6.8284538,17.6764107 L5.90126995,18.0510173 C5.38920044,18.2579068 4.80636901,18.0105096 4.5994795,17.49844 L1.97723335,11.0081531 C1.77034384,10.4960836 2.0177411,9.91325213 2.52981061,9.70636262 L3.45699446,9.33175602 C3.96906396,9.12486652 4.5518954,9.37226378 4.75878491,9.88433329 L5.67885163,12.1615783 C7.99551726,6.6766934 13.3983951,3 19.5,3 C27.7842712,3 34.5,9.71572875 34.5,18 C34.5,26.2842712 27.7842712,33 19.5,33 C15.4573596,33 11.6658607,31.3912946 8.87004692,28.5831991 C8.28554571,27.9961303 8.28762719,27.0463851 8.87469603,26.4618839 C9.46176488,25.8773827 10.4115101,25.8794641 10.9960113,26.466533 C13.2344327,28.7147875 16.263503,30 19.5,30 C26.127417,30 31.5,24.627417 31.5,18 C31.5,11.372583 26.127417,6 19.5,6 C14.4183772,6 9.94214483,9.18783811 8.22708362,13.8757234 Z"},s=(r=t.createDom("xg-replay",'\n          <svg class="xgplayer-replay-svg" xmlns="http://www.w3.org/2000/svg" width="78" height="78" viewbox="0 0 78 78">\n            <path d="'+o.replay+'"></path>\n          </svg>\n          <xg-replay-txt class="xgplayer-replay-txt">重播</xg-replay-txt>\n          ',{},"xgplayer-replay")).querySelector(".xgplayer-replay-svg");var d=e.root;d.appendChild(r),e.on("ended",p),(s||a).addEventListener("click",(function(n){n.preventDefault(),t.removeClass(d,"replay"),e.replay()})),e.once("destroy",(function t(){e.off("ended",p),e.off("destroy",t)}))}function p(){if("img"===n.type)a.style.backgroundImage='url("'+n.url.replay+'")';else{r.querySelector(".xgplayer-replay-txt").textContent=e.lang.REPLAY;var o=r.querySelector("path"),i=window.getComputedStyle(o).getPropertyValue("transform");"none"!==i&&o.setAttribute("transform",i)}e.config.loop||t.addClass(d,"replay")}}))},"./src/control/rotate.js":
/*!*******************************!*\
  !*** ./src/control/rotate.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("rotate",(function(){var e=this;if(this.config.rotate){!0===this.config.rotate&&(this.config.rotate={});var t=i.default.util,n=t.createDom("xg-rotate",'<xg-icon class="xgplayer-icon xgplayer-rotate-img"></xg-icon>',{},"xgplayer-rotate"),o=e.config.lang&&"zh-cn"===e.config.lang?"旋转":"Rotate",r=t.createDom("xg-tips",o,{},"xgplayer-tips");n.appendChild(r),e.controls.appendChild(n);var a=0;e.rotate=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=e.root.offsetWidth,o=e.root.offsetHeight;e.config.rotate.innerRotate||(e.root.style.width=o+"px",e.root.style.height=n+"px");var r=e.config.rotate.clockwise?1:-1,i=void 0;i=.25===(a=(a+1+.25*r*t)%1)||.75===a?(e.config.rotate.innerRotate,(o/n).toFixed(2)):1,e.video.style.transformOrigin="center center",e.video.style.transform="rotate("+a+"turn) scale("+i+")",e.video.style.webKitTransform="rotate("+a+"turn) scale("+i+")",e.emit("rotate",360*a)},n.addEventListener("mouseenter",(function(t){t.preventDefault(),t.stopPropagation(),r.style.left="50%";var n=r.getBoundingClientRect(),o=e.root.getBoundingClientRect();n.right>o.right&&(r.style.left=-n.right+o.right+16+"px")})),n.addEventListener("click",(function(){e.rotate()}))}}))},"./src/control/screenShot.js":
/*!***********************************!*\
  !*** ./src/control/screenShot.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("screenShot",(function(){var e=this,t=i.default.util;if(e.config.screenShot){var n=t.createDom("xg-screenShot",'<p class="name"><span>截图</span></p>',{tabindex:11},"xgplayer-screenShot"),o=document.createElement("canvas"),r=o.getContext("2d"),a=new Image;o.width=this.config.width||600,o.height=this.config.height||337.5,e.controls.appendChild(n);["click","touchstart"].forEach((function(t){n.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation(),a.onload=(r.drawImage(e.video,0,0,o.width,o.height),a.setAttribute("crossOrigin","anonymous"),a.src=o.toDataURL("image/png").replace("image/png","image/octet-stream"),void function(e,t){var n=document.createElement("a");n.href=e,n.download=t;var o=document.createEvent("MouseEvents");o.initMouseEvent("click",!0,!1,window,0,0,0,0,0,!1,!1,!1,!1,0,null),n.dispatchEvent(o)}(a.src.replace(/^data:image\/[^;]+/,"data:application/octet-stream"),"截图.png"))}))}))}}))},"./src/control/textTrack.js":
/*!**********************************!*\
  !*** ./src/control/textTrack.js ***!
  \**********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("textTrack",(function(){if(-1!==navigator.userAgent.indexOf("Chrome")){var e=this,t=i.default.util,n=(i.default.sniffer,t.createDom("xg-textTrack","",{tabindex:7},"xgplayer-textTrack")),o=e.controls,r=e.config.textTrack;r&&Array.isArray(r)&&r.length>1&&(t.addClass(e.root,"xgplayer-is-textTrack"),e.on("canplay",(function(){var i=["<ul>"];i.push("<li class=''}'>关闭</li>"),r.forEach((function(e){i.push("<li class='"+(e.default?"textTrack":"")+"'>"+e.label+"</li>")}));var a=e.config.lang&&"zh-cn"===e.config.lang?"字幕":"Caption";i.push('</ul><p class="name"><em>'+a+"</em></p>");var s=o.querySelector(".xgplayer-textTrack");s?(s.innerHTML=i.join(""),s.querySelector(".name").addEventListener("mouseenter",(function(n){n.preventDefault(),n.stopPropagation(),t.addClass(e.root,"xgplayer-textTrack-active"),s.focus()}))):(n.innerHTML=i.join(""),n.querySelector(".name").addEventListener("mouseenter",(function(o){o.preventDefault(),o.stopPropagation(),t.addClass(e.root,"xgplayer-textTrack-active"),n.focus()})),o.appendChild(n))}))),["touchend","click"].forEach((function(o){n.addEventListener(o,(function(n){n.preventDefault(),n.stopPropagation();var o=n.target||n.srcElement;if(o&&"li"===o.tagName.toLocaleLowerCase()){Array.prototype.forEach.call(o.parentNode.childNodes,(function(e){t.removeClass(e,"textTrack")})),t.addClass(o,"textTrack");var i=e.root.getElementsByTagName("Track");"关闭"===o.innerHTML?(i[0].track.mode="hidden",t.removeClass(e.root,"xgplayer-textTrack-active")):(t.hasClass(e.root,"xgplayer-textTrack-active")||t.addClass(e.root,"xgplayer-textTrack-active"),i[0].track.mode="showing",r.some((function(e){if(e.label===o.innerHTML)return i[0].src=e.src,e.kind&&(i[0].kind=e.kind),i[0].label=e.label,e.srclang&&(i[0].srclang=e.srclang),!0})),e.emit("textTrackChange",o.innerHTML))}}),!1)})),n.addEventListener("mouseleave",(function(n){n.preventDefault(),n.stopPropagation(),t.removeClass(e.root,"xgplayer-textTrack-active")}))}}))},"./src/control/time.js":
/*!*****************************!*\
  !*** ./src/control/time.js ***!
  \*****************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("time",(function(){var e=this,t=i.default.util,n=t.format,o=t.createDom("xg-time","<span>"+(e.currentTime||n(0))+"</span><em>"+(e.duration||n(0))+"</em>",{},"xgplayer-time");e.controls.appendChild(o);var r=function(){"audio"===e.videoConfig.mediaType&&e.isProgressMoving&&e.dash||(o.innerHTML="<span>"+n(e.currentTime||0)+"</span><em>"+n(e.duration))};e.on("durationchange",r),e.on("timeupdate",r),e.once("destroy",(function t(){e.off("durationchange",r),e.off("timeupdate",r),e.off("destroy",t)}))}))},"./src/control/volume.js":
/*!*******************************!*\
  !*** ./src/control/volume.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o=i(n(/*! ../player */"./src/player.js")),r=i(n(/*! ../utils/svg */"./src/utils/svg.js"));function i(e){return e&&e.__esModule?e:{default:e}}o.default.install("volume",(function(){var e=this,t=o.default.util,n=o.default.sniffer;function i(){e.config.autoplay&&e.config.autoplayMuted?e.volume=0:e.volume=e.config.volume}e.config.autoplayMuted&&(e.config.volume=e.config.autoplay?0:e.config.volume),e.once("canplay",i);var a=e.config.volume;if("mobile"!==n.device){var s={muted:"M920.4 439.808l-108.544-109.056-72.704 72.704 109.568 108.544-109.056 108.544 72.704 72.704 108.032-109.568 108.544 109.056 72.704-72.704-109.568-108.032 109.056-108.544-72.704-72.704-108.032 109.568z",small:"M795.648 693.248l-72.704-72.704c27.756-27.789 44.921-66.162 44.921-108.544s-17.165-80.755-44.922-108.546l0.002 0.002 72.704-72.704c46.713 46.235 75.639 110.363 75.639 181.248s-28.926 135.013-75.617 181.227l-0.021 0.021zM795.648 693.248l-72.704-72.704c27.756-27.789 44.921-66.162 44.921-108.544s-17.165-80.755-44.922-108.546l0.002 0.002 72.704-72.704c46.713 46.235 75.639 110.363 75.639 181.248s-28.926 135.013-75.617 181.227l-0.021 0.021z",large:"M940.632 837.632l-72.192-72.192c65.114-64.745 105.412-154.386 105.412-253.44s-40.299-188.695-105.396-253.424l-0.016-0.016 72.192-72.192c83.639 83.197 135.401 198.37 135.401 325.632s-51.762 242.434-135.381 325.612l-0.020 0.020zM795.648 693.248l-72.704-72.704c27.756-27.789 44.921-66.162 44.921-108.544s-17.165-80.755-44.922-108.546l0.002 0.002 72.704-72.704c46.713 46.235 75.639 110.363 75.639 181.248s-28.926 135.013-75.617 181.227l-0.021 0.021z"},l=function(e){return 0===e?"muted":e<.5?"small":"large"},c=s[l(a)],u=s[l(a)],d=t.createDom("xg-volume",'<xg-icon class="xgplayer-icon">\n                                                    <svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n                                                        <path transform="scale(0.0220625 0.0220625)" d="M358.4 358.4h-204.8v307.2h204.8l256 256v-819.2l-256 256z"></path>\n                                                        <path transform="scale(0.0220625 0.0220625)" d="'+u+'"></path>\n                                                    </svg>\n                                                </xg-icon>\n                                                <xg-slider class="xgplayer-slider" tabindex="2">\n                                                    <xg-bar class="xgplayer-bar">\n                                                        <xg-drag class="xgplayer-drag"></xg-drag>\n                                                    </xg-bar>\n                                                </xg-slider>',{},"xgplayer-volume");e.controls.appendChild(d);var p=void 0,f=d.querySelector(".xgplayer-slider"),h=d.querySelector(".xgplayer-bar"),g=d.querySelector(".xgplayer-drag"),v=d.querySelector(".xgplayer-icon");g.style.height=100*e.config.volume+"%";var m=d.querySelectorAll("path")[1],y=new r.default({progress:function(e,t){var n=y.toSVGString(e);m.setAttribute("d",n),c=n},from:c,to:s.large}),b=null;f.volume=e.config.volume,["touchstart","mousedown"].forEach((function(n){h.addEventListener(n,(function(n){n.preventDefault(),n.stopPropagation(),e.video.muted=!1,f.focus(),t.event(n),p=h.getBoundingClientRect().height;n.clientX;var o=n.clientY,r=g.getBoundingClientRect().height,i=!1,a=function(n){n.preventDefault(),n.stopPropagation(),t.event(n),i=!0;var a=r-n.clientY+o,s=a/p;g.style.height=a+"px",e.volume=Math.max(Math.min(s,1),.01)},s=function n(o){if(o.preventDefault(),o.stopPropagation(),t.event(o),window.removeEventListener("mousemove",a),window.removeEventListener("touchmove",a),window.removeEventListener("mouseup",n),window.removeEventListener("touchend",n),b||(b=h.getBoundingClientRect()),!i){var r=b.height-(o.clientY-b.top),s=r/b.height;g.style.height=r+"px",s<=0&&(e.volume>0?g.volume=e.video.volume:s=g.volume),e.volume=Math.max(Math.min(s,1),.01)}f.volume=e.volume,i=!1};return window.addEventListener("mousemove",a),window.addEventListener("touchmove",a),window.addEventListener("mouseup",s),window.addEventListener("touchend",s),!1}))})),["touchstart","mousedown"].forEach((function(t){v.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation(),e.video.muted=!1,0===e.volume?e.volume=f.volume:e.volume=0}))})),v.addEventListener("mouseenter",(function(n){n.preventDefault(),n.stopPropagation(),t.addClass(e.root,"xgplayer-volume-active"),d.focus()})),d.addEventListener("blur",(function(n){n.preventDefault(),n.stopPropagation(),t.removeClass(e.root,"xgplayer-volume-active")})),d.addEventListener("mouseleave",(function(n){n.preventDefault(),n.stopPropagation(),t.removeClass(e.root,"xgplayer-volume-active")}));var x=null;e.on("volumechange",T),e.once("destroy",(function t(){e.off("canplay",i),e.off("volumechange",T),e.off("destroy",t)}))}else{var w={muted:"M920.4 439.808l-108.544-109.056-72.704 72.704 109.568 108.544-109.056 108.544 72.704 72.704 108.032-109.568 108.544 109.056 72.704-72.704-109.568-108.032 109.056-108.544-72.704-72.704-108.032 109.568z",large:"M940.632 837.632l-72.192-72.192c65.114-64.745 105.412-154.386 105.412-253.44s-40.299-188.695-105.396-253.424l-0.016-0.016 72.192-72.192c83.639 83.197 135.401 198.37 135.401 325.632s-51.762 242.434-135.381 325.612l-0.020 0.020zM795.648 693.248l-72.704-72.704c27.756-27.789 44.921-66.162 44.921-108.544s-17.165-80.755-44.922-108.546l0.002 0.002 72.704-72.704c46.713 46.235 75.639 110.363 75.639 181.248s-28.926 135.013-75.617 181.227l-0.021 0.021z"},_=function(e){return 0===e?"muted":"large"},k=w[_(a)],E=w[_(a)],C=t.createDom("xg-volume",'<xg-icon class="xgplayer-icon">\n                                                      <svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n                                                          <path transform="scale(0.0220625 0.0220625)" d="M358.4 358.4h-204.8v307.2h204.8l256 256v-819.2l-256 256z"></path>\n                                                          <path transform="scale(0.0220625 0.0220625)" d="'+E+'"></path>\n                                                      </svg>\n                                                  </xg-icon>',{},"xgplayer-volume");e.controls.appendChild(C);var S=C.querySelector(".xgplayer-icon"),P=C.querySelectorAll("path")[1],j=new r.default({progress:function(e,t){var n=j.toSVGString(e);P.setAttribute("d",n),k=n},from:k,to:w.large});["touchend","mousedown"].forEach((function(t){S.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation(),e.video.muted?(e.video.muted=!1,e.volume=1,j.reset(w.large,w.muted),k=w.large):(e.volume=0,e.video.muted=!0,j.reset(w.muted,w.large),k=w.muted)}))}))}function T(){x&&clearTimeout(x),x=setTimeout((function(){y.reset(s[l(e.volume)],c),c=s[l[e.volume]],p||(p=h.getBoundingClientRect().height||76),g.style.height=e.volume*p+"px"}),50)}}))},"./src/error.js":
/*!**********************!*\
  !*** ./src/error.js ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(/*! ../package.json */"./package.json");function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i={network:{code:1,msg:"视频下载错误",remark:"只要视频下载错误就使用此类型，无论是video本身的超时还是xhr的分段请求超时或者资源不存在"},mse:{code:2,msg:"流追加错误",remark:"追加流的时候如果类型不对、无法被正确解码则会触发此类错误"},parse:{code:3,msg:"解析错误",remark:"mp4、hls、flv我们都是使用js进行格式解析，如果解析失败则会触发此类错误"},format:{code:4,msg:"格式错误",remark:"如果浏览器不支持的格式导致播放错误"},decoder:{code:5,msg:"解码错误",remark:"浏览器解码异常会抛出此类型错误"},runtime:{code:6,msg:"语法错误",remark:"播放器语法错误"},timeout:{code:7,msg:"播放超时",remark:"播放过程中无法正常请求下一个分段导致播放中断"},other:{code:8,msg:"其他错误",remark:"不可知的错误或被忽略的错误类型"}};t.default=function e(t,n,a,s,l,c,u,d){var p=arguments.length>8&&void 0!==arguments[8]?arguments[8]:{line:"",handle:"",msg:"",version:""};r(this,e);var f={};return f.playerVersion=o.version,f.errorType=t,f.domain=document.domain,f.duration=a,f.currentTime=n,f.networkState=s,f.readyState=l,f.currentSrc=u,f.src=c,f.ended=d,f.errd=p,f.ex=(i[t]||{}).msg,f},e.exports=t.default},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=M(n(/*! ./player */"./src/player.js")),r=M(n(/*! ./control/volume.js */"./src/control/volume.js")),i=M(n(/*! ./control/time.js */"./src/control/time.js")),a=M(n(/*! ./control/textTrack.js */"./src/control/textTrack.js")),s=M(n(/*! ./control/screenShot.js */"./src/control/screenShot.js")),l=M(n(/*! ./control/rotate.js */"./src/control/rotate.js")),c=M(n(/*! ./control/replay.js */"./src/control/replay.js")),u=M(n(/*! ./control/progress.js */"./src/control/progress.js")),d=M(n(/*! ./control/poster.js */"./src/control/poster.js")),p=M(n(/*! ./control/playNext.js */"./src/control/playNext.js")),f=M(n(/*! ./control/playbackRate.js */"./src/control/playbackRate.js")),h=M(n(/*! ./control/play.js */"./src/control/play.js")),g=M(n(/*! ./control/pip.js */"./src/control/pip.js")),v=M(n(/*! ./control/pc.js */"./src/control/pc.js")),m=M(n(/*! ./control/mobile.js */"./src/control/mobile.js")),y=M(n(/*! ./control/logger.js */"./src/control/logger.js")),b=M(n(/*! ./control/localPreview.js */"./src/control/localPreview.js")),x=M(n(/*! ./control/loading.js */"./src/control/loading.js")),w=M(n(/*! ./control/i18n.js */"./src/control/i18n.js")),_=M(n(/*! ./control/fullscreen.js */"./src/control/fullscreen.js")),k=M(n(/*! ./control/flex.js */"./src/control/flex.js")),E=M(n(/*! ./control/error.js */"./src/control/error.js")),C=M(n(/*! ./control/download.js */"./src/control/download.js")),S=M(n(/*! ./control/definition.js */"./src/control/definition.js")),P=M(n(/*! ./control/danmu.js */"./src/control/danmu.js")),j=M(n(/*! ./control/cssFullscreen.js */"./src/control/cssFullscreen.js")),T=M(n(/*! ./control/collect.js */"./src/control/collect.js"));function M(e){return e&&e.__esModule?e:{default:e}}n(/*! ./style/index.scss */"./src/style/index.scss");var O={};function L(e,t,n){var o=e;t.map((function(e,r){o[e]=r==t.length-1?n:o[e]||{},o=o[e]}))}L(O,["control","collect"],T.default),L(O,["control","cssFullscreen"],j.default),L(O,["control","danmu"],P.default),L(O,["control","definition"],S.default),L(O,["control","download"],C.default),L(O,["control","error"],E.default),L(O,["control","flex"],k.default),L(O,["control","fullscreen"],_.default),L(O,["control","i18n"],w.default),L(O,["control","loading"],x.default),L(O,["control","localPreview"],b.default),L(O,["control","logger"],y.default),L(O,["control","mobile"],m.default),L(O,["control","pc"],v.default),L(O,["control","pip"],g.default),L(O,["control","play"],h.default),L(O,["control","playbackRate"],f.default),L(O,["control","playNext"],p.default),L(O,["control","poster"],d.default),L(O,["control","progress"],u.default),L(O,["control","replay"],c.default),L(O,["control","rotate"],l.default),L(O,["control","screenShot"],s.default),L(O,["control","textTrack"],a.default),L(O,["control","time"],i.default),L(O,["control","volume"],r.default),t.default=o.default,e.exports=t.default},"./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=function e(t,n,o){null===t&&(t=Function.prototype);var r=Object.getOwnPropertyDescriptor(t,n);if(void 0===r){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,o)}if("value"in r)return r.value;var a=r.get;return void 0!==a?a.call(o):void 0},i=p(n(/*! ./proxy */"./src/proxy.js")),a=p(n(/*! ./utils/util */"./src/utils/util.js")),s=p(n(/*! ./utils/database */"./src/utils/database.js")),l=p(n(/*! ./utils/sniffer */"./src/utils/sniffer.js")),c=p(n(/*! ./error */"./src/error.js")),u=p(n(/*! draggabilly */"./node_modules/draggabilly/draggabilly.js")),d=n(/*! ../package.json */"./package.json");function p(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=f(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));if(n.config=a.default.deepCopy({width:600,height:337.5,ignores:[],whitelist:[],lang:(document.documentElement.getAttribute("lang")||navigator.language||"zh-cn").toLocaleLowerCase(),inactive:3e3,volume:.6,controls:!0,controlsList:["nodownload"]},e),n.version=d.version,n.userTimer=null,n.waitTimer=null,n.database=new s.default,n.history=[],n.isProgressMoving=!1,n.root=a.default.findDom(document,"#"+n.config.id),n.controls=a.default.createDom("xg-controls","",{unselectable:"on",onselectstart:"return false"},"xgplayer-controls"),!n.root){var o=n.config.el;if(!o||1!==o.nodeType)return n.emit("error",new c.default("use",n.config.vid,{line:32,handle:"Constructor",msg:"container id can't be empty"})),!1,f(n,!1);n.root=o}if(a.default.addClass(n.root,"xgplayer xgplayer-"+l.default.device+" xgplayer-nostart "+(n.config.controls?"":"no-controls")),n.root.appendChild(n.controls),n.config.fluid?(n.root.style["max-width"]="100%",n.root.style.width="100%",n.root.style.height="0",n.root.style["padding-top"]=100*n.config.height/n.config.width+"%",n.video.style.position="absolute",n.video.style.top="0",n.video.style.left="0"):(n.root.style.width=n.config.width+"px",n.root.style.height=n.config.height+"px"),n.config.execBeforePluginsCall&&n.config.execBeforePluginsCall.forEach((function(e){e.call(n,n)})),n.config.controlStyle&&"String"===a.default.typeOf(n.config.controlStyle)){var r=n;fetch(r.config.controlStyle,{method:"GET",headers:{Accept:"application/json"}}).then((function(e){e.ok&&e.json().then((function(e){for(var t in e)e.hasOwnProperty(t)&&(r.config[t]=e[t]);r.pluginsCall()}))})).catch((function(e){console.log("Fetch错误:"+e)}))}else n.pluginsCall();n.ev.forEach((function(e){var t=Object.keys(e)[0],o=n[e[t]];o&&n.on(t,o)})),["focus","blur"].forEach((function(e){n.on(e,n["on"+e.charAt(0).toUpperCase()+e.slice(1)])}));var i=n;return n.mousemoveFunc=function(){i.emit("focus"),i.config.closeFocusVideoFocus||i.video.focus()},n.root.addEventListener("mousemove",n.mousemoveFunc),n.playFunc=function(){i.emit("focus"),i.config.closePlayVideoFocus||i.video.focus()},i.once("play",n.playFunc),setTimeout((function(){n.emit("ready")}),0),n.config.keyShortcut&&"on"!==n.config.keyShortcut||["video","controls"].forEach((function(e){i[e].addEventListener("keydown",(function(e){i.onKeydown(e,i)}))})),n.config.videoInit&&a.default.hasClass(n.root,"xgplayer-nostart")&&n.start(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"start",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.config.url,o=this.root,r=this;n&&""!==n||this.emit("urlNull"),this.logParams.playSrc=n,this.canPlayFunc=function(){var e=r.video.play();void 0!==e&&e&&e.then((function(){r.emit("autoplay started")})).catch((function(){r.emit("autoplay was prevented"),t.util.addClass(r.root,"xgplayer-is-autoplay")})),r.off("canplay",r.canPlayFunc)},"String"===a.default.typeOf(n)?this.video.src=n:n.forEach((function(t){e.video.appendChild(a.default.createDom("source","",{src:""+t.src,type:""+(t.type||"")}))})),this.logParams.pt=(new Date).getTime(),this.logParams.vt=this.logParams.pt,this.loadeddataFunc=function(){r.logParams.vt=(new Date).getTime(),r.logParams.pt>r.logParams.vt&&(r.logParams.pt=r.logParams.vt),r.logParams.vd=r.video.duration},this.once("loadeddata",this.loadeddataFunc),this.config.autoplay&&this.on("canplay",this.canPlayFunc),o.insertBefore(this.video,o.firstChild),setTimeout((function(){e.emit("complete")}),1)}},{key:"reload",value:function(){this.video.load(),this.reloadFunc=function(){this.play()},this.once("loadeddata",this.reloadFunc)}},{key:"destroy",value:function(){var e=this,n=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],o=this,i=this.root.parentNode;for(var a in clearInterval(this.bulletResizeTimer),this._interval)clearInterval(this._interval[a]),this._interval[a]=null;function s(){for(var e in this.emit("destroy"),this.video.removeAttribute("src"),this.video.load(),n&&i.removeChild(this.root),this)delete this[e];this.off("pause",s)}this.ev.forEach((function(t){var n=Object.keys(t)[0],o=e[t[n]];o&&e.off(n,o)})),this.loadeddataFunc&&this.off("loadeddata",this.loadeddataFunc),this.reloadFunc&&this.off("loadeddata",this.reloadFunc),this.replayFunc&&this.off("play",this.replayFunc),this.playFunc&&this.off("play",this.playFunc),["focus","blur"].forEach((function(t){e.off(t,e["on"+t.charAt(0).toUpperCase()+t.slice(1)])})),this.config.keyShortcut&&"on"!==this.config.keyShortcut||["video","controls"].forEach((function(t){e[t]&&e[t].removeEventListener("keydown",(function(e){o.onKeydown(e,o)}))})),this.paused?s.call(this):(this.pause(),this.once("pause",s)),r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"destroy",this).call(this)}},{key:"replay",value:function(){var e=this,t=this._replay;a.default.removeClass(this.root,"xgplayer-ended"),this.logParams={bc:0,bu_acu_t:0,played:[],pt:(new Date).getTime(),vt:(new Date).getTime(),vd:0},this.logParams.pt=(new Date).getTime(),this.logParams.vt=this.logParams.pt,this.replayFunc=function(){e.logParams.vt=(new Date).getTime(),e.logParams.pt>e.logParams.vt&&(e.logParams.pt=e.logParams.vt),e.logParams.vd=e.video.duration},this.once("play",this.replayFunc),this.logParams.playSrc=this.video.currentSrc,t&&t instanceof Function?t():(this.currentTime=0,this.play())}},{key:"pluginsCall",value:function(){var e=this,n=this;if(t.plugins){var o=this.config.ignores;Object.keys(t.plugins).forEach((function(r){var i=t.plugins[r];o.some((function(e){return r===e}))||(["pc","tablet","mobile"].some((function(e){return e===r}))?r===l.default.device&&setTimeout((function(){i.call(n,n)}),0):i.call(e,e))}))}}},{key:"getPIP",value:function(){var e=this.root.getBoundingClientRect(),t=e.top,n=e.left,o=a.default.createDom("xg-pip-lay","<div></div>",{},"xgplayer-pip-lay");this.root.appendChild(o);var r=a.default.createDom("xg-pip-drag",'<div class="drag-handle"><span>点击按住可拖动视频</span></div>',{tabindex:9},"xgplayer-pip-drag");this.root.appendChild(r);new u.default(".xgplayer",{handle:".drag-handle"});a.default.addClass(this.root,"xgplayer-pip-active"),this.root.style.right=0,this.root.style.bottom="200px",this.root.style.top="",this.root.style.left="",this.config.fluid&&(this.root.style["padding-top"]="");var i=this;["click","touchstart"].forEach((function(e){o.addEventListener(e,(function(e){e.preventDefault(),e.stopPropagation(),i.exitPIP(),i.root.style.top=t+"px",i.root.style.left=n+"px"}))}))}},{key:"exitPIP",value:function(){a.default.removeClass(this.root,"xgplayer-pip-active"),this.root.style.right="",this.root.style.bottom="",this.root.style.top="",this.root.style.left="",this.config.fluid&&(this.root.style["padding-top"]=100*this.config.height/this.config.width+"%")}},{key:"onFocus",value:function(){var e=this;a.default.removeClass(this.root,"xgplayer-inactive"),e.userTimer&&clearTimeout(e.userTimer),e.userTimer=setTimeout((function(){e.emit("blur")}),e.config.inactive)}},{key:"onBlur",value:function(){this.paused||this.ended||a.default.addClass(this.root,"xgplayer-inactive")}},{key:"onPlay",value:function(){a.default.addClass(this.root,"xgplayer-playing"),a.default.removeClass(this.root,"xgplayer-pause")}},{key:"onPause",value:function(){a.default.addClass(this.root,"xgplayer-pause"),this.userTimer&&clearTimeout(this.userTimer),this.emit("focus")}},{key:"onEnded",value:function(){a.default.addClass(this.root,"xgplayer-ended"),a.default.removeClass(this.root,"xgplayer-playing")}},{key:"onSeeking",value:function(){}},{key:"onSeeked",value:function(){this.waitTimer&&clearTimeout(this.waitTimer),a.default.removeClass(this.root,"xgplayer-isloading")}},{key:"onWaiting",value:function(){var e=this;e.waitTimer&&clearTimeout(e.waitTimer),e.waitTimer=setTimeout((function(){a.default.addClass(e.root,"xgplayer-isloading")}),500)}},{key:"onPlaying",value:function(){this.waitTimer&&clearTimeout(this.waitTimer),a.default.removeClass(this.root,"xgplayer-isloading xgplayer-nostart xgplayer-pause xgplayer-ended xgplayer-is-error xgplayer-replay"),a.default.addClass(this.root,"xgplayer-playing")}},{key:"onKeydown",value:function(e,t){var n=e||window.event;if(!n||37!==n.keyCode&&38!==n.keyCode&&39!==n.keyCode&&40!==n.keyCode&&32!==n.keyCode||t.emit("focus"),!n||40!==n.keyCode&&38!==n.keyCode)n&&39===n.keyCode?t.currentTime+10<=t.duration?t.currentTime+=10:t.currentTime=t.duration-1:n&&37===n.keyCode?t.currentTime-10>=0?t.currentTime-=10:t.currentTime=0:n&&32===n.keyCode&&(t.paused?t.play():t.pause());else{if(t.controls){var o=t.controls.querySelector(".xgplayer-slider");o&&(a.default.hasClass(o,"xgplayer-none")&&a.default.removeClass(o,"xgplayer-none"),t.sliderTimer&&clearTimeout(t.sliderTimer),t.sliderTimer=setTimeout((function(){a.default.addClass(o,"xgplayer-none")}),t.config.inactive))}n&&40===n.keyCode?t.volume-.1>=0?t.volume-=.1:t.volume=0:n&&38===n.keyCode&&(t.volume+.1<=1?t.volume+=.1:t.volume=1)}}}],[{key:"install",value:function(e,n){t.plugins||(t.plugins={}),t.plugins[e]=n}}]),t}(i.default);h.util=a.default,h.sniffer=l.default,h.Errors=c.default,t.default=h,e.exports=t.default},"./src/proxy.js":
/*!**********************!*\
  !*** ./src/proxy.js ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=s(n(/*! event-emitter */"./node_modules/event-emitter/index.js")),i=s(n(/*! ./utils/util */"./src/utils/util.js")),a=s(n(/*! ./error */"./src/error.js"));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.logParams={bc:0,bu_acu_t:0,played:[]},this._hasStart=!1,this.videoConfig={controls:!1,autoplay:t.autoplay,playsinline:t.playsinline,"webkit-playsinline":t.playsinline,"x5-playsinline":t.playsinline,"x5-video-player-type":t["x5-video-player-type"],"x5-video-player-fullscreen":t["x5-video-player-fullscreen"],"x5-video-orientation":t["x5-video-orientation"],airplay:t.airplay,"webkit-airplay":t.airplay,tabindex:2,mediaType:t.mediaType||"video"},t.loop&&(this.videoConfig.loop="loop");var n="";if(t.textTrack&&Array.isArray(t.textTrack)&&(navigator.userAgent.indexOf("Chrome")>-1||navigator.userAgent.indexOf("Firefox")>-1)&&(t.textTrack.some((function(e){if(e.src&&e.label&&e.default)return n+='<track src="'+e.src+'" ',e.kind&&(n+='kind="'+e.kind+'" '),n+='label="'+e.label+'" ',e.srclang&&(n+='srclang="'+e.srclang+'" '),n+=(e.default?"default":"")+">",!0})),this.videoConfig.crossorigin="anonymous"),t.textTrackStyle){var o=document.createElement("style");this.textTrackStyle=o,document.head.appendChild(o);var s="";for(var l in t.textTrackStyle)s+=l+": "+t.textTrackStyle[l]+";";var c=t.id?"#"+t.id:t.el.id?"#"+t.el.id:"."+t.el.className;o.sheet.insertRule?o.sheet.insertRule(c+" video::cue { "+s+" }",0):o.sheet.addRule&&o.sheet.addRule(c+" video::cue",s)}this.video=i.default.createDom(this.videoConfig.mediaType,n,this.videoConfig,""),t.autoplay&&(this.video.autoplay=!0,t.autoplayMuted&&(this.video.muted=!0)),this.ev=["play","playing","pause","ended","error","seeking","seeked","timeupdate","waiting","canplay","canplaythrough","durationchange","volumechange","loadeddata"].map((function(e){return t={},n=e,o="on"+e.charAt(0).toUpperCase()+e.slice(1),n in t?Object.defineProperty(t,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[n]=o,t;var t,n,o})),(0,r.default)(this),this._interval={};var u="0,0",d=this;this.ev.forEach((function(e){d.evItem=Object.keys(e)[0];var t=Object.keys(e)[0];d.video.addEventListener(Object.keys(e)[0],(function(){d.logParams&&("play"===t?d.hasStart=!0:"waiting"===t?(d.logParams.bc++,d.inWaitingStart=(new Date).getTime()):"playing"===t?d.inWaitingStart&&(d.logParams.bu_acu_t+=(new Date).getTime()-d.inWaitingStart,d.inWaitingStart=void 0):"loadeddata"===t?d.logParams.played.push({begin:0,end:-1}):"seeking"===t?d.logParams.played.push({begin:d.video.currentTime,end:-1}):d&&d.logParams&&d.logParams.played&&"timeupdate"===t&&(d.logParams.played.length<1&&d.logParams.played.push({begin:d.video.currentTime,end:-1}),d.logParams.played[d.logParams.played.length-1].end=d.video.currentTime),"error"===t?d.video.error&&d.emit(t,new a.default("other",d.currentTime,d.duration,d.networkState,d.readyState,d.currentSrc,d.src,d.ended,{line:41,msg:d.error,handle:"Constructor"})):d.emit(t,d),d.hasOwnProperty("_interval")&&(["ended","error","timeupdate"].indexOf(t)<0?(clearInterval(d._interval.bufferedChange),i.default.setInterval(d,"bufferedChange",(function(){for(var e=[],t=0,n=d.video.buffered.length;t<n;t++)e.push([d.video.buffered.start(t),d.video.buffered.end(t)]);e.toString()!==u&&(u=e.toString(),d.emit("bufferedChange",e))}),200)):"timeupdate"!==t&&i.default.clearInterval(d,"bufferedChange")))}),!1)}))}return o(e,[{key:"destroy",value:function(){this.textTrackStyle&&this.textTrackStyle.parentNode.removeChild(this.textTrackStyle)}},{key:"play",value:function(){this.video.play()}},{key:"pause",value:function(){this.video.pause()}},{key:"canPlayType",value:function(){this.video.canPlayType()}},{key:"getBufferedRange",value:function(){var e=[0,0],t=this.video,n=t.buffered,o=t.currentTime;if(n)for(var r=0,i=n.length;r<i&&(e[0]=n.start(r),e[1]=n.end(r),!(e[0]<=o&&o<=e[1]));r++);return e[0]-o<=0&&o-e[1]<=0?e:[0,0]}},{key:"hasStart",get:function(){return this._hasStart},set:function(e){"boolean"!=typeof e||!0!==e||this._hasStart||(this._hasStart=!0,this.emit("hasstart"))}},{key:"autoplay",set:function(e){this.video.autoplay=e},get:function(){return this.video.autoplay}},{key:"buffered",get:function(){return this.video.buffered}},{key:"crossOrigin",get:function(){return this.video.crossOrigin},set:function(e){this.video.crossOrigin=e}},{key:"currentSrc",get:function(){return this.video.currentSrc},set:function(e){this.video.currentSrc=e}},{key:"currentTime",get:function(){return this.video.currentTime},set:function(e){this.video.currentTime=e}},{key:"defaultMuted",get:function(){return this.video.defaultMuted},set:function(e){this.video.defaultMuted=e}},{key:"duration",get:function(){return this.video.duration}},{key:"ended",get:function(){return this.video.ended}},{key:"error",get:function(){var e=this.video.error;if(!e)return null;var t=[{en:"MEDIA_ERR_ABORTED",cn:"取回过程被用户中止"},{en:"MEDIA_ERR_NETWORK",cn:"当下载时发生错误"},{en:"MEDIA_ERR_DECODE",cn:"当解码时发生错误"},{en:"MEDIA_ERR_SRC_NOT_SUPPORTED",cn:"不支持音频/视频"}];return this.lang?this.lang[t[e.code-1].en]:t[e.code-1].en}},{key:"loop",get:function(){return this.video.loop},set:function(e){this.video.loop=e}},{key:"muted",get:function(){return this.video.muted},set:function(e){this.video.muted=e}},{key:"networkState",get:function(){var e=[{en:"NETWORK_EMPTY",cn:"音频/视频尚未初始化"},{en:"NETWORK_IDLE",cn:"音频/视频是活动的且已选取资源，但并未使用网络"},{en:"NETWORK_LOADING",cn:"浏览器正在下载数据"},{en:"NETWORK_NO_SOURCE",cn:"未找到音频/视频来源"}];return this.lang?this.lang[e[this.video.networkState].en]:e[this.video.networkState].en}},{key:"paused",get:function(){return this.video.paused}},{key:"playbackRate",get:function(){return this.video.playbackRate},set:function(e){this.video.playbackRate=e}},{key:"played",get:function(){return this.video.played}},{key:"preload",get:function(){return this.video.preload},set:function(e){this.video.preload=e}},{key:"readyState",get:function(){var e=[{en:"HAVE_NOTHING",cn:"没有关于音频/视频是否就绪的信息"},{en:"HAVE_METADATA",cn:"关于音频/视频就绪的元数据"},{en:"HAVE_CURRENT_DATA",cn:"关于当前播放位置的数据是可用的，但没有足够的数据来播放下一帧/毫秒"},{en:"HAVE_FUTURE_DATA",cn:"当前及至少下一帧的数据是可用的"},{en:"HAVE_ENOUGH_DATA",cn:"可用数据足以开始播放"}];return this.lang?this.lang[e[this.video.readyState].en]:e[this.video.readyState]}},{key:"seekable",get:function(){return this.video.seekable}},{key:"seeking",get:function(){return this.video.seeking}},{key:"src",get:function(){return this.video.src},set:function(e){var t=this;i.default.hasClass(this.root,"xgplayer-ended")||this.emit("urlchange",JSON.parse(JSON.stringify(t.logParams))),this.logParams={bc:0,bu_acu_t:0,played:[],pt:(new Date).getTime(),vt:(new Date).getTime(),vd:0},this.video.pause(),this.video.src=e,this.logParams.playSrc=e,this.logParams.pt=(new Date).getTime(),this.logParams.vt=this.logParams.pt,this.once("loadeddata",(function e(){t.logParams.vt=(new Date).getTime(),t.logParams.pt>t.logParams.vt&&(t.logParams.pt=t.logParams.vt),t.logParams.vd=t.video.duration,t.off("loadeddata",e)}))}},{key:"volume",get:function(){return this.video.volume},set:function(e){this.video.volume=e}},{key:"fullscreen",get:function(){return i.default.hasClass(this.root,"xgplayer-is-fullscreen")||i.default.hasClass(this.root,"xgplayer-fullscreen-active")}},{key:"bullet",get:function(){return!!i.default.findDom(this.root,"xg-bullet")&&i.default.hasClass(i.default.findDom(this.root,"xg-bullet"),"xgplayer-has-bullet")}},{key:"textTrack",get:function(){return i.default.hasClass(this.root,"xgplayer-is-textTrack")}},{key:"pip",get:function(){return i.default.hasClass(this.root,"xgplayer-pip-active")}}]),e}();t.default=l,e.exports=t.default},"./src/style/index.scss":
/*!******************************!*\
  !*** ./src/style/index.scss ***!
  \******************************/
/*! no static exports found */function(e,t,n){var o=n(/*! !../../node_modules/css-loader??ref--5-1!../../node_modules/postcss-loader/lib!../../node_modules/sass-loader/lib/loader.js!./index.scss */"./node_modules/css-loader/index.js?!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/style/index.scss");"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(o,r);o.locals&&(e.exports=o.locals)},"./src/utils/animation.js":
/*!********************************!*\
  !*** ./src/utils/animation.js ***!
  \********************************/
/*! no static exports found */function(e,t,n){"use strict";!function(){for(var e=0,t=["webkit","moz"],n=0;n<t.length&&!window.requestAnimationFrame;++n)window.requestAnimationFrame=window[t[n]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[t[n]+"CancelAnimationFrame"]||window[t[n]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t,n){var o=(new Date).getTime(),r=Math.max(0,16-(o-e)),i=window.setTimeout((function(){t(o+r)}),r);return e=o+r,i}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(e){clearTimeout(e)})}()},"./src/utils/database.js":
/*!*******************************!*\
  !*** ./src/utils/database.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{name:"xgplayer",version:1,db:null,ojstore:{name:"xg-m4a",keypath:"vid"}};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.indexedDB=window.indexedDB||window.webkitindexedDB,this.IDBKeyRange=window.IDBKeyRange||window.webkitIDBKeyRange,this.myDB=t}return o(e,[{key:"openDB",value:function(e){var t=this,n=this,o=this.myDB.version||1,r=n.indexedDB.open(n.myDB.name,o);r.onerror=function(e){},r.onsuccess=function(o){t.myDB.db=o.target.result,e.call(n)},r.onupgradeneeded=function(e){var t=e.target.result;e.target.transaction;t.objectStoreNames.contains(n.myDB.ojstore.name)||t.createObjectStore(n.myDB.ojstore.name,{keyPath:n.myDB.ojstore.keypath})}}},{key:"deletedb",value:function(){this.indexedDB.deleteDatabase(this.myDB.name)}},{key:"closeDB",value:function(){this.myDB.db.close()}},{key:"addData",value:function(e,t){for(var n=this.myDB.db.transaction(e,"readwrite").objectStore(e),o=void 0,r=0;r<t.length;r++)(o=n.add(t[r])).onerror=function(){},o.onsuccess=function(){}}},{key:"putData",value:function(e,t){for(var n=this.myDB.db.transaction(e,"readwrite").objectStore(e),o=void 0,r=0;r<t.length;r++)(o=n.put(t[r])).onerror=function(){},o.onsuccess=function(){}}},{key:"getDataByKey",value:function(e,t,n){var o=this,r=this.myDB.db.transaction(e,"readwrite").objectStore(e).get(t);r.onerror=function(){n.call(o,null)},r.onsuccess=function(e){var t=e.target.result;n.call(o,t)}}},{key:"deleteData",value:function(e,t){this.myDB.db.transaction(e,"readwrite").objectStore(e).delete(t)}},{key:"clearData",value:function(e){this.myDB.db.transaction(e,"readwrite").objectStore(e).clear()}}]),e}();t.default=r,e.exports=t.default},"./src/utils/sniffer.js":
/*!******************************!*\
  !*** ./src/utils/sniffer.js ***!
  \******************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o={get device(){return o.os.isPc?"pc":"mobile"},get browser(){var e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter((function(n){return t[n].test(e)})))[0]},get os(){var e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),n=/(?:SymbianOS)/.test(e)||t,o=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),i=/(?:iPad|PlayBook)/.test(e)||o&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),a=/(?:iPhone)/.test(e)&&!i;return{isTablet:i,isPhone:a,isAndroid:o,isPc:!(a||o||n||i),isSymbian:n,isWindowsPhone:t,isFireFox:r}}};t.default=o,e.exports=t.default},"./src/utils/svg.js":
/*!**************************!*\
  !*** ./src/utils/svg.js ***!
  \**************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(/*! pasition */"./node_modules/pasition/dist/pasition.js"),a=(o=i)&&o.__esModule?o:{default:o};n(/*! ./animation */"./src/utils/animation.js");var s=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.from=t.from,this.to=t.to,this.easing=t.easing||function(e){return e*e},this.duration=t.duration||150,this.curPath="",this.progress=t.progress,this.state=0}return r(e,[{key:"animate",value:function(){var e=this,t=new Date,n=e.duration,o=null,r=e.path2shapes(e.from),i=e.path2shapes(e.to),a=e._preprocessing(r,i);e.state=1;!function r(){var s=new Date-t;if(s>=n||2===e.state)return o=i,e.progress(o,1),window.cancelAnimationFrame(e.tickId),void(e.state=0);var l=e.easing(s/n);o=e._lerp(a[0],a[1],l),e.progress(o,l),e.tickId=window.requestAnimationFrame(r)}()}},{key:"toSVGString",value:function(e){return e.map((function(e){return e.forEach((function(e,t){t?e.splice(0,2,"C"):(e.splice(2,0,"C"),e.unshift("M"))})),e.map((function(e){return e.join(" ")})).join("")})).join("")}},{key:"start",value:function(){this.animate()}},{key:"stop",value:function(){0!==this.state&&(this.state=2),window.cancelAnimationFrame(self.tickId),this.state=0}},{key:"reverse",value:function(){0!==this.state&&this.stop();var e=this.from;this.from=this.to,this.to=e,this.animate()}},{key:"reset",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.from;0!==this.state&&this.stop(),this.from=t,this.to=e,this.animate()}}]),e}();for(var l in a.default)a.default[l]instanceof Function&&!s.prototype[l]&&(s.prototype[l]=a.default[l]);t.default=s,e.exports=t.default},"./src/utils/url.js":
/*!**************************!*\
  !*** ./src/utils/url.js ***!
  \**************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.getAbsoluteURL=function(e){if(!e.match(/^https?:\/\//)){var t=document.createElement("div");t.innerHTML='<a href="'+e+'">x</a>',e=t.firstChild.href}return e}},"./src/utils/util.js":
/*!***************************!*\
  !*** ./src/utils/util.js ***!
  \***************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var util={createDom:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",r=document.createElement(e);return r.className=o,r.innerHTML=t,Object.keys(n).forEach((function(t){var o=t,i=n[t];"video"===e||"audio"===e?i&&r.setAttribute(o,i):r.setAttribute(o,i)})),r},hasClass:function(e,t){return e.classList?Array.prototype.some.call(e.classList,(function(e){return e===t})):!!e.className.match(new RegExp("(\\s|^)"+t+"(\\s|$)"))},addClass:function(e,t){e.classList?t.replace(/(^\s+|\s+$)/g,"").split(/\s+/g).forEach((function(t){t&&e.classList.add(t)})):util.hasClass(e,t)||(e.className+=" "+t)},removeClass:function(e,t){e.classList?t.split(/\s+/g).forEach((function(t){e.classList.remove(t)})):util.hasClass(e,t)&&t.split(/\s+/g).forEach((function(t){var n=new RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ")}))},toggleClass:function(e,t){t.split(/\s+/g).forEach((function(t){util.hasClass(e,t)?util.removeClass(e,t):util.addClass(e,t)}))},findDom:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,t=arguments[1],n=void 0;try{n=e.querySelector(t)}catch(o){t.startsWith("#")&&(n=e.getElementById(t.slice(1)))}return n},padStart:function(e,t,n){for(var o=String(n),r=t>>0,i=Math.ceil(r/o.length),a=[],s=String(e);i--;)a.push(o);return a.join("").substring(0,r-s.length)+s},format:function(e){if(window.isNaN(e))return"";var t=util.padStart(Math.floor(e/3600),2,0),n=util.padStart(Math.floor((e-3600*t)/60),2,0),o=util.padStart(Math.floor(e-3600*t-60*n),2,0);return("00"===t?[n,o]:[t,n,o]).join(":")},event:function(e){if(e.touches){var t=e.touches[0]||e.changedTouches[0];e.clientX=t.clientX||0,e.clientY=t.clientY||0,e.offsetX=t.pageX-t.target.offsetLeft,e.offsetY=t.pageY-t.target.offsetTop}e._target=e.target||e.srcElement},typeOf:function(e){return Object.prototype.toString.call(e).match(/([^\s.*]+)(?=]$)/g)[0]},deepCopy:function(e,t){if("Object"===util.typeOf(t)&&"Object"===util.typeOf(e))return Object.keys(t).forEach((function(n){"Object"!==util.typeOf(t[n])||t[n]instanceof Node?"Array"===util.typeOf(t[n])?e[n]="Array"===util.typeOf(e[n])?e[n].concat(t[n]):t[n]:e[n]=t[n]:e[n]?util.deepCopy(e[n],t[n]):e[n]=t[n]})),e},getBgImage:function(e){var t=(e.currentStyle||window.getComputedStyle(e,null)).backgroundImage;if(!t||"none"===t)return"";var n=document.createElement("a");return n.href=t.replace(/url\("|"\)/g,""),n.href},copyDom:function(e){if(e&&1===e.nodeType){var t=document.createElement(e.tagName);return Array.prototype.forEach.call(e.attributes,(function(e){t.setAttribute(e.name,e.value)})),e.innerHTML&&(t.innerHTML=e.innerHTML),t}return""},setInterval:function(e,t,n,o){e._interval[t]||(e._interval[t]=setInterval(n.bind(e),o))},clearInterval:function(e,t){clearInterval(e._interval[t]),e._interval[t]=null},createImgBtn:function(e,t,n,o){var r=util.createDom("xg-"+e,"",{},"xgplayer-"+e+"-img");if(r.style.backgroundImage='url("'+t+'")',n&&o){var i=void 0,a=void 0,s=void 0;["px","rem","em","pt","dp","vw","vh","vm","%"].every((function(e){return!(n.indexOf(e)>-1&&o.indexOf(e)>-1)||(i=parseFloat(n.slice(0,n.indexOf(e)).trim()),a=parseFloat(o.slice(0,o.indexOf(e)).trim()),s=e,!1)})),r.style.width=""+i+s,r.style.height=""+a+s,r.style.backgroundSize=""+i+s+" "+a+s,r.style.margin="start"===e?"-"+a/2+s+" auto auto -"+i/2+s:"auto 5px auto 5px"}return r},Hex2RGBA:function(hex,alpha){var rgb=[];if(/^\#[0-9A-F]{3}$/i.test(hex)){var sixHex="#";hex.replace(/[0-9A-F]/gi,(function(e){sixHex+=e+e})),hex=sixHex}return/^#[0-9A-F]{6}$/i.test(hex)?(hex.replace(/[0-9A-F]{2}/gi,(function(kw){rgb.push(eval("0x"+kw))})),"rgba("+rgb.join(",")+", "+alpha+")"):"rgba(255, 255, 255, 0.1)"}};exports.default=util,module.exports=exports.default},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./src/index.js */"./src/index.js")}})}));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./src/flv-live.js":
/*!*************************!*\
  !*** ./src/flv-live.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FlvController; });
/* harmony import */ var xgplayer_remux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-remux */ "../xgplayer-remux/index.js");
/* harmony import */ var xgplayer_remux__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_remux__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-loader */ "../xgplayer-loader/index.js");
/* harmony import */ var xgplayer_loader__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_loader__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var xgplayer_demux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xgplayer-demux */ "../xgplayer-demux/index.js");
/* harmony import */ var xgplayer_demux__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xgplayer_demux__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xgplayer-buffer */ "../xgplayer-buffer/index.js");
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xgplayer-codec */ "../xgplayer-codec/index.js");
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(xgplayer_codec__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! xgplayer */ "../xgplayer/dist/index.js");
/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(xgplayer__WEBPACK_IMPORTED_MODULE_6__);








const REMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].REMUX_EVENTS;
const DEMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].DEMUX_EVENTS;
const LOADER_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].LOADER_EVENTS
const MSE_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].MSE_EVENTS

const Tag = 'FLVController'

class Logger {
  warn () {}
}

class FlvController {
  constructor (player) {
    this.TAG = Tag
    this._player = player

    this.state = {
      initSegmentArrived: false
    }
  }

  init () {
    this._context.registry('FETCH_LOADER', xgplayer_loader__WEBPACK_IMPORTED_MODULE_1__["FetchLoader"])
    this._context.registry('LOADER_BUFFER', xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__["XgBuffer"])

    this._context.registry('FLV_DEMUXER', xgplayer_demux__WEBPACK_IMPORTED_MODULE_2__["FlvDemuxer"])
    this._context.registry('TRACKS', xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__["Tracks"])

    this._context.registry('MP4_REMUXER', xgplayer_remux__WEBPACK_IMPORTED_MODULE_0___default.a.Mp4Remuxer)
    this._context.registry('PRE_SOURCE_BUFFER', xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__["PreSource"])

    this._context.registry('COMPATIBILITY', xgplayer_codec__WEBPACK_IMPORTED_MODULE_5__["Compatibility"])

    this._context.registry('LOGGER', Logger)
    this.mse = this._context.registry('MSE', xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["Mse"])({ container: this._player.video })

    this.initListeners()
  }

  initListeners () {
    this.on(LOADER_EVENTS.LOADER_DATALOADED, this._handleLoaderDataLoaded.bind(this))
    this.on(LOADER_EVENTS.LOADER_ERROR, this._handleNetworkError.bind(this))

    this.on(DEMUX_EVENTS.MEDIA_INFO, this._handleMediaInfo.bind(this))
    this.on(DEMUX_EVENTS.METADATA_PARSED, this._handleMetadataParsed.bind(this))
    this.on(DEMUX_EVENTS.DEMUX_COMPLETE, this._handleDemuxComplete.bind(this))
    this.on(DEMUX_EVENTS.DEMUX_ERROR, this._handleDemuxError.bind(this))

    this.on(REMUX_EVENTS.INIT_SEGMENT, this._handleAppendInitSegment.bind(this))
    this.on(REMUX_EVENTS.MEDIA_SEGMENT, this._handleMediaSegment.bind(this))

    this.on(MSE_EVENTS.SOURCE_UPDATE_END, this._handleSourceUpdateEnd.bind(this))

    this._player.on('timeupdate', this._handleTimeUpdate.bind(this))
  }

  _handleMediaInfo () {
    if (!this._context.mediaInfo) {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error('failed to get mediainfo'))
    }
  }

  _handleLoaderDataLoaded () {
    this.emitTo('FLV_DEMUXER', DEMUX_EVENTS.DEMUX_START)
  }

  _handleMetadataParsed (type) {
    this.emit(REMUX_EVENTS.REMUX_METADATA, type)
  }
  _handleDemuxComplete () {
    this.emit(REMUX_EVENTS.REMUX_MEDIA)
  }

  _handleAppendInitSegment () {
    this.state.initSegmentArrived = true
    this.mse.addSourceBuffers()
  }

  _handleMediaSegment () {
    this.mse.addSourceBuffers()
    this.mse.doAppend();
  }

  _handleSourceUpdateEnd () {
    const time = this._player.currentTime;
    const video = this._player.video;
    const preloadTime = this._player.config.preloadTime || 5

    const { length } = video.buffered;

    if (length === 0) {
      return;
    }

    const bufferEnd = video.buffered.end(length - 1);
    if (bufferEnd - time > preloadTime * 2) {
      this._player.currentTime = bufferEnd - preloadTime
    }
  }

  _handleTimeUpdate () {
    const time = this._player.currentTime
    if (time > 2) {
      // 在直播时及时清空buffer，降低直播内存占用
      this.mse.remove(time - 2)
    }
  }

  _handleNetworkError () {
    this._player.emit('error', new xgplayer__WEBPACK_IMPORTED_MODULE_6___default.a.Errors('network', this._player.config.url))
  }

  _handleDemuxError() {
    this._player.emit('error', new xgplayer__WEBPACK_IMPORTED_MODULE_6___default.a.Errors('parse', this._player.config.url))
  }

  seek () {
    if (!this.state.initSegmentArrived) {
      this.loadData()
    }
  }

  loadData () {
    this.emit(LOADER_EVENTS.LADER_START, this._player.config.url)
  }

  pause () {
    const loader = this._context.getInstance('FETCH_LOADER')

    if (loader) {
      loader.cancel()
    }
  }
}


/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer */ "../xgplayer/dist/index.js");
/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _flv_live__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./flv-live */ "./src/flv-live.js");



const flvAllowedEvents = xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["EVENTS"].FlvAllowedEvents;

class FlvPlayer extends xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a {
  constructor (config) {
    super(config)
    this.context = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["Context"](flvAllowedEvents)
    this.initEvents()
    // const preloadTime = player.config.preloadTime || 15
  }

  start () {
    this.initFlv()
    this.context.init()
    super.start(this.flv.mse.url)
  }

  initFlvEvents (flv) {
    const player = this;
    flv.once(xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["EVENTS"].REMUX_EVENTS.INIT_SEGMENT, () => {
      xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a.util.addClass(player.root, 'xgplayer-is-live')
      if (!xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a.util.findDom(this.root, 'xg-live')) {
        const live = xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a.util.createDom('xg-live', '正在直播', {}, 'xgplayer-live')
        player.controls.appendChild(live)
      }
    })

    flv.once(xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["EVENTS"].LOADER_EVENTS.LOADER_COMPLETE, () => {
      // 直播完成，待播放器播完缓存后发送关闭事件
      if (!player.paused) {
        const timer = setInterval(() => {
          const end = player.getBufferedRange()[1]
          if (Math.abs(player.currentTime - end) < 0.5) {
            player.emit('ended')
            window.clearInterval(timer)
          }
        }, 200)
      }
    })
  }

  initEvents () {
    this.on('timeupdate', () => {
      this.loadData()
    })

    this.on('seeking', () => {
      const time = this.currentTime
      const range = this.getBufferedRange()
      if (time > range[1] || time < range[0]) {
        this.flv.seek(this.currentTime)
      }
    })
  }

  initFlv () {
    const flv = this.context.registry('FLV_CONTROLLER', _flv_live__WEBPACK_IMPORTED_MODULE_2__["default"])(this)
    this.initFlvEvents(flv)
    this.flv = flv
  }

  play () {
    if (this._hasStart) {
      this._destroy()
      this.context = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["Context"](flvAllowedEvents)
      const flv = this.context.registry('FLV_CONTROLLER', _flv_live__WEBPACK_IMPORTED_MODULE_2__["default"])(this)
      this.initFlvEvents(flv)
      this.flv = flv
      this.context.init()
      super.start(flv.mse.url)
      super.play()
    } else {
      super.play()
    }
  }

  pause () {
    super.pause()
    if (this.flv) {
      this.flv.pause()
    }
  }

  loadData (time = this.currentTime) {
    if (this.flv) {
      this.flv.seek(time)
    }
  }

  destroy () {
    this._destroy()
    super.destroy();
  }

  _destroy () {
    this.context.destroy()
    this.flv = null
    this.context = null
  }

  get src () {
    return this.currentSrc
  }

  set src (url) {
    this.player.config.url = url
    if (!this.paused) {
      this.pause()
      this.once('pause', () => {
        this.start(url)
      })
      this.once('canplay', () => {
        this.play()
      })
    } else {
      this.start(url)
    }
    this.once('canplay', () => {
      this.currentTime = 0
    })
  }
}

module.exports = FlvPlayer

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ "../../node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9sZW9uYXJkby9Eb2N1bWVudHMvZnJvbnQtZW5kL3BsYXllci94Z3BsYXllci9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItYnVmZmVyL3NyYy9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWJ1ZmZlci9zcmMvcHJlc291Y2UuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWJ1ZmZlci9zcmMvdHJhY2suanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWNvZGVjL2luZGV4LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci1jb2RlYy9zcmMvYWFjL2FhYy1oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWNvZGVjL3NyYy9jb21wYXRpYmlsaXR5LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci1jb2RlYy9zcmMvaDI2NC9uYWx1bml0L2dvbG9tYi5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItY29kZWMvc3JjL2gyNjQvbmFsdW5pdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItY29kZWMvc3JjL2gyNjQvbmFsdW5pdC9zcHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWRlbXV4L2luZGV4LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci1kZW11eC9zcmMvZmx2L2FtZi1wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWRlbXV4L3NyYy9mbHYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWRlbXV4L3NyYy9obHMvZGVtdXhlci9tM3U4cGFyc2VyLmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci1kZW11eC9zcmMvaGxzL2RlbXV4ZXIvdHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWRlbXV4L3NyYy9obHMvcGxheWxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWxvYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItbG9hZGVyL3NyYy9mZXRjaC1sb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXJlbXV4L2luZGV4LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci1yZW11eC9zcmMvbXA0L2ZtcDQuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXJlbXV4L3NyYy9tcDQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci11dGlscy9ub2RlX21vZHVsZXMvY29uY2F0LXR5cGVkLWFycmF5L2xpYi9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL25vZGVfbW9kdWxlcy9jb25jYXQtdHlwZWQtYXJyYXkvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci11dGlscy9ub2RlX21vZHVsZXMvd2Vid29ya2lmeS13ZWJwYWNrL2luZGV4LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci11dGlscy9zcmMvY29uc3RhbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL2NvbnN0YW50cy93b3JrZXItY29tbWFuZHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9jb250ZXh0LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci11dGlscy9zcmMvZW52L2lzbGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9lbnYvc25pZmZlci5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL2Vudi91dGY4LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci11dGlscy9zcmMvbW9iaWxlL2F1ZGlvLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2JpbGUvbW9iaWxlLXZpZGVvLmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci11dGlscy9zcmMvbW9iaWxlL3NvdXJjZWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL21vYmlsZS90aWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2JpbGUvdmlkZW8tY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL21vYmlsZS93b3JrZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2JpbGUveXV2LWNhbnZhcy5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy9tZWRpYS1pbmZvLmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL21lZGlhLXNhbXBsZS5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy9tZWRpYS1zZWdtZW50LWxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvbWVkaWEtc2VnbWVudC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy90cmFjay1tZXRhLmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL3RyYWNrLXNhbXBsZS5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL21zZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL3dyaXRlL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL3dyaXRlL3N0cmVhbS5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZmx2LWxpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDBDQUEwQyxnQ0FBZ0M7UUFDMUU7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSx3REFBd0Qsa0JBQWtCO1FBQzFFO1FBQ0EsaURBQWlELGNBQWM7UUFDL0Q7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLHlDQUF5QyxpQ0FBaUM7UUFDMUUsZ0hBQWdILG1CQUFtQixFQUFFO1FBQ3JJO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMkJBQTJCLDBCQUEwQixFQUFFO1FBQ3ZELGlDQUFpQyxlQUFlO1FBQ2hEO1FBQ0E7UUFDQTs7UUFFQTtRQUNBLHNEQUFzRCwrREFBK0Q7O1FBRXJIO1FBQ0E7OztRQUdBO1FBQ0E7Ozs7Ozs7Ozs7Ozs7QUNsRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FB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LEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiwwREFBVTtBQUNuQywwQkFBMEIsNkRBQWM7QUFDeEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDBEQUFVO0FBQ25DLDBCQUEwQiw2REFBYztBQUN4Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHFCQUFxQixtREFBUzs7QUFFOUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCLGVBQWU7QUFDMUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sT0FBTztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU8sbUNBQW1DO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsaUJBQWlCLDZEQUFjO0FBQy9COztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsNkVBQTZFLE9BQU87QUFDcEY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9FQUFvRSxlQUFlO0FB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFlBQVk7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHFEQUFNO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDRCQUE0QixLQUFLO0FBQ2pDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRWUsd0VBQVMsRUFBQzs7Ozs7Ozs7Ozs7OztBQ3JzQnpCO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxtQkFBbUIscUJBQXFCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxREFBcUQsT0FBTztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVlLHVFQUFRLEVBQUM7Ozs7Ozs7Ozs7OztBQy9LeEI7QUFDQSxlQUFlLG1CQUFPLENBQUMsa0VBQW9CO0FBQzNDOzs7Ozs7Ozs7Ozs7O0FDRkE7QUFBQTtBQUFBO0FBQXdDOztBQUV4QyxzQkFBc0IscURBQU07QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLGtDQUFrQztBQUNsQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZSwwRUFBVzs7Ozs7Ozs7Ozs7O0FDeE0xQjtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxxREFBVztBQUNqQzs7Ozs7Ozs7Ozs7OztBQ0ZBO0FBQUE7QUFBQTtBQUF3Qzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxREFBTTtBQUNqQjtBQUNBO0FBQ0EsdUJBQXVCLHFEQUFNO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxREFBTTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxREFBTTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscURBQU07QUFDM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxREFBTTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLHlCQUF5QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsT0FBTztBQUM1QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxPQUFPO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZSx1RUFBUSxFQUFDOzs7Ozs7Ozs7Ozs7O0FDbk54QjtBQUFBO0FBQUE7QUFBQTtBQUF1QztBQUNBO0FBQ0Y7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixZQUFZO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGdCQUFnQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFZSx3RUFBUyxFQUFDOzs7Ozs7Ozs7Ozs7O0FDOVl6QjtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDckVBO0FBQUE7QUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUN4QkE7QUFBQTtBQUFlOztBQUVmO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztB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QUNBLEtBQUs7O0FBRUwsYUFBYSxxREFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0Esd0RBQXdELGlEQUFHO0FBQzNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsc0RBQU87QUFDaEMsMERBQTBELGlEQUFHO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9pbmRleC5qc1wiKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiAkZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiAkZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIFJlZmxlY3RBcHBseSh0aGlzLmxpc3RlbmVyLCB0aGlzLnRhcmdldCwgYXJncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBUcmFjazogcmVxdWlyZSgnLi9zcmMvdHJhY2snKS5kZWZhdWx0LFxuICBUcmFja3M6IHJlcXVpcmUoJy4vc3JjL3RyYWNrJykuVHJhY2tzLFxuICBBdWRpb1RyYWNrOiByZXF1aXJlKCcuL3NyYy90cmFjaycpLkF1ZGlvVHJhY2ssXG4gIFZpZGVvVHJhY2s6IHJlcXVpcmUoJy4vc3JjL3RyYWNrJykuVmlkZW9UcmFjayxcblxuICBYZ0J1ZmZlcjogcmVxdWlyZSgnLi9zcmMvYnVmZmVyJykuWGdCdWZmZXIsXG4gIFJlbXV4QnVmZmVyOiByZXF1aXJlKCcuL3NyYy9idWZmZXInKS5SZW11eEJ1ZmZlcixcblxuICBQcmVTb3VyY2U6IHJlcXVpcmUoJy4vc3JjL3ByZXNvdWNlJykuZGVmYXVsdFxufTtcbiIsImV4cG9ydCBjbGFzcyBYZ0J1ZmZlciB7XG4gIC8qKlxuICAgKiBBIGJ1ZmZlciB0byBzdG9yZSBsb2FkZWQgZGF0YS5cbiAgICpcbiAgICogQGNsYXNzIExvYWRlckJ1ZmZlclxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gT3B0aW9uYWwgdGhlIGJ1ZmZlciBzaXplXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobGVuZ3RoKSB7XG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGggfHwgMFxuICAgIHRoaXMuaGlzdG9yeUxlbiA9IGxlbmd0aCB8fCAwXG4gICAgdGhpcy5hcnJheSA9IFtdXG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gIH1cblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIHB1c2ggZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRhdGEgLSBUaGUgZGF0YSB0byBwdXNoIGludG8gdGhlIGJ1ZmZlclxuICAgKi9cbiAgcHVzaCAoZGF0YSkge1xuICAgIHRoaXMuYXJyYXkucHVzaChkYXRhKVxuICAgIHRoaXMubGVuZ3RoICs9IGRhdGEuYnl0ZUxlbmd0aFxuICAgIHRoaXMuaGlzdG9yeUxlbiArPSBkYXRhLmJ5dGVMZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdG8gc2hpZnQgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIFRoZSBzaXplIG9mIHNoaWZ0LlxuICAgKi9cbiAgc2hpZnQgKGxlbmd0aCkge1xuICAgIGlmICh0aGlzLmFycmF5Lmxlbmd0aCA8IDEpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKVxuICAgIH1cblxuICAgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NoaWZ0QnVmZmVyKClcbiAgICB9XG4gICAgaWYgKCh0aGlzLm9mZnNldCArIGxlbmd0aCkgPT09IHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSB7XG4gICAgICBsZXQgcmV0ID0gdGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW5ndGgpXG4gICAgICB0aGlzLm9mZnNldCA9IDBcbiAgICAgIHRoaXMuYXJyYXkuc2hpZnQoKVxuICAgICAgdGhpcy5sZW5ndGggLT0gbGVuZ3RoXG4gICAgICByZXR1cm4gcmV0XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLm9mZnNldCArIGxlbmd0aCkgPCB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgbGV0IHJldCA9IHRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKVxuICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoXG4gICAgICB0aGlzLmxlbmd0aCAtPSBsZW5ndGhcbiAgICAgIHJldHVybiByZXRcbiAgICB9XG5cbiAgICBsZXQgcmV0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIGxldCB0bXBvZmYgPSAwXG4gICAgd2hpbGUgKHRoaXMuYXJyYXkubGVuZ3RoID4gMCAmJiBsZW5ndGggPiAwKSB7XG4gICAgICBpZiAoKHRoaXMub2Zmc2V0ICsgbGVuZ3RoKSA8IHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSB7XG4gICAgICAgIGxldCB0bXAgPSB0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aClcbiAgICAgICAgcmV0LnNldCh0bXAsIHRtcG9mZilcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoXG4gICAgICAgIHRoaXMubGVuZ3RoIC09IGxlbmd0aFxuICAgICAgICBsZW5ndGggPSAwXG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgdGVtcGxlbmd0aCA9IHRoaXMuYXJyYXlbMF0ubGVuZ3RoIC0gdGhpcy5vZmZzZXRcbiAgICAgICAgcmV0LnNldCh0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLmFycmF5WzBdLmxlbmd0aCksIHRtcG9mZilcbiAgICAgICAgdGhpcy5hcnJheS5zaGlmdCgpXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgICAgICB0bXBvZmYgKz0gdGVtcGxlbmd0aFxuICAgICAgICB0aGlzLmxlbmd0aCAtPSB0ZW1wbGVuZ3RoXG4gICAgICAgIGxlbmd0aCAtPSB0ZW1wbGVuZ3RoXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBjbGVhciB0aGUgYnVmZmVyLlxuICAgKi9cbiAgY2xlYXIgKCkge1xuICAgIHRoaXMuYXJyYXkgPSBbXVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5jbGVhcigpXG4gICAgdGhpcy5oaXN0b3J5TGVuID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHNoaWZ0IG9uZSB1bml0OEFycmF5LlxuICAgKi9cbiAgX3NoaWZ0QnVmZmVyICgpIHtcbiAgICB0aGlzLmxlbmd0aCAtPSB0aGlzLmFycmF5WzBdLmxlbmd0aFxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgIHJldHVybiB0aGlzLmFycmF5LnNoaWZ0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHVpbnQ4IGRhdGEgdG8gbnVtYmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSB0aGUgc3RhcnQgcG9zdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIHRoZSBsZW5ndGggb2YgZGF0YS5cbiAgICovXG4gIHRvSW50IChzdGFydCwgbGVuZ3RoKSB7XG4gICAgbGV0IHJldEludCA9IDBcbiAgICBsZXQgaSA9IHRoaXMub2Zmc2V0ICsgc3RhcnRcbiAgICB3aGlsZSAoaSA8IHRoaXMub2Zmc2V0ICsgbGVuZ3RoICsgc3RhcnQpIHtcbiAgICAgIGlmIChpIDwgdGhpcy5hcnJheVswXS5sZW5ndGgpIHtcbiAgICAgICAgcmV0SW50ID0gcmV0SW50ICogMjU2ICsgdGhpcy5hcnJheVswXVtpXVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmFycmF5WzFdKSB7XG4gICAgICAgIHJldEludCA9IHJldEludCAqIDI1NiArIHRoaXMuYXJyYXlbMV1baSAtIHRoaXMuYXJyYXlbMF0ubGVuZ3RoXVxuICAgICAgfVxuXG4gICAgICBpKytcbiAgICB9XG4gICAgcmV0dXJuIHJldEludFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZW11eEJ1ZmZlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnZpZGVvID0gW11cbiAgICB0aGlzLmF1ZGlvID0gW11cbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMudmlkZW8gPSBbXVxuICAgIHRoaXMuYXVkaW8gPSBbXVxuICB9XG59XG4iLCJjbGFzcyBTb3VyY2Uge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5taW1ldHlwZSA9ICcnO1xuICAgIHRoaXMuaW5pdCA9IG51bGw7XG4gICAgdGhpcy5kYXRhID0gW107XG4gIH1cbn1cblxuY2xhc3MgUHJlU291cmNlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuc291cmNlcyA9IHt9O1xuICB9XG5cbiAgZ2V0U291cmNlIChzb3VyY2UpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2VzW3NvdXJjZV07XG4gIH1cblxuICBjcmVhdGVTb3VyY2UgKG5hbWUpIHtcbiAgICB0aGlzLnNvdXJjZXNbbmFtZV0gPSBuZXcgU291cmNlKCk7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc1tuYW1lXTtcbiAgfVxuXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLnNvdXJjZXMgPSB7fTtcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuc291cmNlcyA9IHt9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByZVNvdXJjZTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3Rvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmlkID0gLTFcbiAgICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gMFxuICAgIHRoaXMuc2FtcGxlcyA9IFtdXG4gICAgdGhpcy5kcm9wcGVkU2FtcGxlcyA9IFtdXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdGhlIHRyYWNrLlxuICAgKi9cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMuc2VxdWVuY2VOdW1iZXIgPSAwXG4gICAgdGhpcy5zYW1wbGVzID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgfVxuICAvKipcbiAgICogZGVzdHJveSB0aGUgdHJhY2suXG4gICAqL1xuICBkaXN0cm95ICgpIHtcbiAgICB0aGlzLnJlc2V0KClcbiAgICB0aGlzLmlkID0gLTFcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXVkaW9UcmFjayBleHRlbmRzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3RvciBmb3IgYXVkaW8gdHJhY2suXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuVEFHID0gJ0F1ZGlvVHJhY2snXG4gICAgdGhpcy50eXBlID0gJ2F1ZGlvJ1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrIGV4dGVuZHMgVHJhY2sge1xuICAvKipcbiAgICogVGhlIGNvbnN0cnVjdG9yIGZvciB2aWRlbyB0cmFjay5cbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5UQUcgPSAnVmlkZW9UcmFjaydcbiAgICB0aGlzLnR5cGUgPSAndmlkZW8nXG4gICAgdGhpcy5kcm9wcGVkID0gMFxuICB9XG4gIC8qKlxuICAgKiByZXNldCB0aGUgdmlkZW8gdHJhY2suXG4gICAqL1xuICByZXNldCAoKSB7XG4gICAgdGhpcy5zZXF1ZW5jZU51bWJlciA9IDBcbiAgICB0aGlzLnNhbXBsZXMgPSBbXVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICAgIHRoaXMuZHJvcHBlZCA9IDBcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhY2tzIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuYXVkaW9UcmFjayA9IG51bGxcbiAgICB0aGlzLnZpZGVvVHJhY2sgPSBudWxsXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBOYWx1bml0OiByZXF1aXJlKCcuL3NyYy9oMjY0L25hbHVuaXQnKS5kZWZhdWx0LFxuICBTcHNQYXJzZXI6IHJlcXVpcmUoJy4vc3JjL2gyNjQvbmFsdW5pdC9zcHMnKS5kZWZhdWx0LFxuXG4gIENvbXBhdGliaWxpdHk6IHJlcXVpcmUoJy4vc3JjL2NvbXBhdGliaWxpdHknKS5kZWZhdWx0XG59O1xuIiwiXG5jbGFzcyBBQUMge1xuXG4gIHN0YXRpYyBnZXRTaWxlbnRGcmFtZShjb2RlYywgY2hhbm5lbENvdW50KSB7XG4gICAgaWYgKGNvZGVjID09PSAnbXA0YS40MC4yJykge1xuICAgICAgLy8gaGFuZGxlIExDLUFBQ1xuICAgICAgaWYgKGNoYW5uZWxDb3VudCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjMsIDB4ODBdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgyMSwgMHgwMCwgMHg0OSwgMHg5MCwgMHgwMiwgMHgxOSwgMHgwMCwgMHgyMywgMHg4MF0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDhlXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODAsIDB4MmMsIDB4ODAsIDB4MDgsIDB4MDIsIDB4MzhdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA1KSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgzOF0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgyLCAweDMwLCAweDA0LCAweDk5LCAweDAwLCAweDIxLCAweDkwLCAweDAyLCAweDAwLCAweGIyLCAweDAwLCAweDIwLCAweDA4LCAweGUwXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhhbmRsZSBIRS1BQUMgKG1wNGEuNDAuNSAvIG1wNGEuNDAuMjkpXG4gICAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICAgIC8vIGZmbXBlZyAteSAtZiBsYXZmaSAtaSBcImFldmFsc3JjPTA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgxLCAweDQwLCAweDIyLCAweDgwLCAweGEzLCAweDRlLCAweGU2LCAweDgwLCAweGJhLCAweDgsIDB4MCwgMHgwLCAweDAsIDB4MWMsIDB4NiwgMHhmMSwgMHhjMSwgMHhhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVhLCAweDVlXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMikge1xuICAgICAgICAvLyBmZm1wZWcgLXkgLWYgbGF2ZmkgLWkgXCJhZXZhbHNyYz0wfDA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlX3YyIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgxLCAweDQwLCAweDIyLCAweDgwLCAweGEzLCAweDVlLCAweGU2LCAweDgwLCAweGJhLCAweDgsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHg5NSwgMHgwLCAweDYsIDB4ZjEsIDB4YTEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgICAgLy8gZmZtcGVnIC15IC1mIGxhdmZpIC1pIFwiYWV2YWxzcmM9MHwwfDA6ZD0wLjA1XCIgLWM6YSBsaWJmZGtfYWFjIC1wcm9maWxlOmEgYWFjX2hlX3YyIC1iOmEgNGsgb3V0cHV0LmFhYyAmJiBoZXhkdW1wIC12IC1lICcxNi8xIFwiMHgleCxcIiBcIlxcblwiJyAtdiBvdXRwdXQuYWFjXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgxLCAweDQwLCAweDIyLCAweDgwLCAweGEzLCAweDVlLCAweGU2LCAweDgwLCAweGJhLCAweDgsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHg5NSwgMHgwLCAweDYsIDB4ZjEsIDB4YTEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFBQztcbiIsImltcG9ydCB7RVZFTlRTfSBmcm9tICd4Z3BsYXllci11dGlscydcbmltcG9ydCBBQUMgZnJvbSAnLi9hYWMvYWFjLWhlbHBlcidcblxuY29uc3Qge1JFTVVYX0VWRU5UU30gPSBFVkVOVFNcblxuY2xhc3MgQ29tcGF0aWJpbGl0eSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm5leHRBdWRpb0R0cyA9IDAgLy8g5qih5ouf5LiL5LiA5q616Z+z6aKR5pWw5o2u55qEZHRzXG4gICAgdGhpcy5uZXh0VmlkZW9EdHMgPSAwIC8vIOaooeaLn+S4i+S4gOauteinhumikeaVsOaNrueahGR0c1xuXG4gICAgdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuID0gMCAvLyDkuIrkuIDmrrXpn7PpopHmlbDmja7nmoTplb/luqZcbiAgICB0aGlzLmxhc3RWaWRlb1NhbXBsZXNMZW4gPSAwIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgdGhpcy5sYXN0VmlkZW9EdHMgPSB1bmRlZmluZWQgLy8g5LiK5LiA5q616Z+z6aKR5pWw5o2u55qE6ZW/5bqmXG4gICAgdGhpcy5sYXN0QXVkaW9EdHMgPSB1bmRlZmluZWQgLy8g5LiK5LiA5q616KeG6aKR5pWw5o2u55qE6ZW/5bqmXG5cbiAgICB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50ID0gMCAvLyDpn7PpopHmgLvmlbDmja7ph48o5Y6f5aeL5binKVxuICAgIHRoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQgPSAwIC8vIOinhumikeaAu+aVsOaNrumHjyjljp/lp4vluKcpXG5cbiAgICB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlID0gbnVsbFxuICAgIHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUgPSBudWxsXG5cbiAgICB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcyA9IFtdIC8vIOihpeWFhemfs+mikeW4p++8iO+8iVxuICAgIHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzID0gW10gLy8g6KGl5YWF6KeG6aKR5bin77yI77yJXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLmJlZm9yZShSRU1VWF9FVkVOVFMuUkVNVVhfTUVESUEsIHRoaXMuZG9GaXguYmluZCh0aGlzKSlcbiAgfVxuXG4gIHJlc2V0ICgpIHtcbiAgICB0aGlzLm5leHRBdWRpb0R0cyA9IDAgLy8g5qih5ouf5LiL5LiA5q616Z+z6aKR5pWw5o2u55qEZHRzXG4gICAgdGhpcy5uZXh0VmlkZW9EdHMgPSAwIC8vIOaooeaLn+S4i+S4gOauteinhumikeaVsOaNrueahGR0c1xuXG4gICAgdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuID0gMCAvLyDkuIrkuIDmrrXpn7PpopHmlbDmja7nmoTplb/luqZcbiAgICB0aGlzLmxhc3RWaWRlb1NhbXBsZXNMZW4gPSAwIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgdGhpcy5sYXN0VmlkZW9EdHMgPSB1bmRlZmluZWQgLy8g5LiK5LiA5q616Z+z6aKR5pWw5o2u55qE6ZW/5bqmXG4gICAgdGhpcy5sYXN0QXVkaW9EdHMgPSB1bmRlZmluZWQgLy8g5LiK5LiA5q616KeG6aKR5pWw5o2u55qE6ZW/5bqmXG5cbiAgICB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50ID0gMCAvLyDpn7PpopHmgLvmlbDmja7ph48o5Y6f5aeL5binKVxuICAgIHRoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQgPSAwIC8vIOinhumikeaAu+aVsOaNrumHjyjljp/lp4vluKcpXG5cbiAgICB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlID0gbnVsbFxuICAgIHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUgPSBudWxsXG5cbiAgICB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcyA9IFtdIC8vIOihpeWFhemfs+mikeW4p++8iO+8iVxuICAgIHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzID0gW10gLy8g6KGl5YWF6KeG6aKR5bin77yI77yJXG4gIH1cblxuICBkb0ZpeCAoKSB7XG4gICAgY29uc3QgeyBpc0ZpcnN0QXVkaW9TYW1wbGVzLCBpc0ZpcnN0VmlkZW9TYW1wbGVzIH0gPSB0aGlzLmdldEZpcnN0U2FtcGxlKClcblxuICAgIHRoaXMucmVtb3ZlSW52YWxpZFNhbXBsZXMoKVxuXG4gICAgdGhpcy5yZWNvcmRTYW1wbGVzQ291bnQoKVxuXG4gICAgaWYgKHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUpIHtcbiAgICAgIHRoaXMuZml4UmVmU2FtcGxlRHVyYXRpb24odGhpcy52aWRlb1RyYWNrLm1ldGEsIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzKVxuICAgIH1cbiAgICBpZiAodGhpcy5fZmlyc3RBdWRpb1NhbXBsZSkge1xuICAgICAgdGhpcy5maXhSZWZTYW1wbGVEdXJhdGlvbih0aGlzLmF1ZGlvVHJhY2subWV0YSwgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMpXG4gICAgfVxuXG4gICAgdGhpcy5kb0ZpeFZpZGVvKGlzRmlyc3RWaWRlb1NhbXBsZXMpXG4gICAgdGhpcy5kb0ZpeEF1ZGlvKGlzRmlyc3RBdWRpb1NhbXBsZXMpXG4gIH1cblxuICBkb0ZpeFZpZGVvIChmaXJzdCkge1xuICAgIGxldCB7c2FtcGxlczogdmlkZW9TYW1wbGVzLCBtZXRhfSA9IHRoaXMudmlkZW9UcmFja1xuXG4gICAgaWYgKG1ldGEuZnJhbWVSYXRlICYmIG1ldGEuZnJhbWVSYXRlLmZpeGVkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdmlkZW9TYW1wbGVzIHx8ICF2aWRlb1NhbXBsZXMubGVuZ3RoIHx8ICF0aGlzLl9maXJzdFZpZGVvU2FtcGxlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBjb25zb2xlLmxvZyhgdmlkZW8gbGFzdFNhbXBsZSwgJHt2aWRlb1NhbXBsZXNbdmlkZW9TYW1wbGVzLmxlbmd0aCAtIDFdLmR0c31gKVxuXG4gICAgY29uc3QgZmlyc3RTYW1wbGUgPSB2aWRlb1NhbXBsZXNbMF1cbiAgICBjb25zdCBmaXJzdER0cyA9IGZpcnN0U2FtcGxlLmR0c1xuXG4gICAgY29uc3Qgc2FtcGxlc0xlbiA9IHZpZGVvU2FtcGxlcy5sZW5ndGg7XG5cbiAgICAvLyBzdGVwMS4g5L+u5aSN5LiOYXVkaW/pppbluKflt67ot53lpKrlpKfnmoTpl67pophcbiAgICBpZiAoZmlyc3QgJiYgdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSkge1xuICAgICAgY29uc3QgdmlkZW9GaXJzdER0cyA9IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzXG4gICAgICBjb25zdCBhdWRpb0ZpcnN0RHRzID0gdGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHNcbiAgICAgIGNvbnN0IGdhcCA9IHZpZGVvRmlyc3REdHMgLSBhdWRpb0ZpcnN0RHRzXG4gICAgICBpZiAoZ2FwID4gKDIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgICBjb25zdCBmaWxsQ291bnQgPSBNYXRoLmZsb29yKGdhcCAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxsQ291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGNsb25lZEZpcnN0U2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgZmlyc3RTYW1wbGUpIC8vIOinhumikeWktOmDqOW4p+e8uuWksemcgOimgeWkjeWItuesrOS4gOW4p1xuICAgICAgICAgIC8vIOmHjeaWsOiuoeeul3NhbXBsZeeahGR0c+WSjHB0c1xuICAgICAgICAgIGNsb25lZEZpcnN0U2FtcGxlLmR0cyA9IHZpZGVvRmlyc3REdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgIGNsb25lZEZpcnN0U2FtcGxlLnB0cyA9IGNsb25lZEZpcnN0U2FtcGxlLmR0cyArIGNsb25lZEZpcnN0U2FtcGxlLmN0c1xuXG4gICAgICAgICAgdmlkZW9TYW1wbGVzLnVuc2hpZnQoY2xvbmVkRmlyc3RTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogY2xvbmVkRmlyc3RTYW1wbGUuZHRzLFxuICAgICAgICAgICAgc2l6ZTogY2xvbmVkRmlyc3RTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBnYXBcbiAgICAvLyBzdGVwMi4g5L+u5aSNc2FtcGxlc+auteS5i+mXtOeahOmXtOi3nemXrumimOOAgVxuICAgIGlmICh0aGlzLm5leHRWaWRlb0R0cykge1xuICAgICAgLy8gc3RlcDEuIOWkhOeQhnNhbXBsZXPmrrXkuYvpl7TnmoTkuKLluKfmg4XlhrVcbiAgICAgIC8vIOW9k+WPkeeOsGR1cmF0aW9u5beu6Led5aSn5LqOMuW4p+aXtui/m+ihjOihpeW4p1xuICAgICAgZ2FwID0gZmlyc3REdHMgLSB0aGlzLm5leHRWaWRlb0R0c1xuICAgICAgY29uc3QgYWJzR2FwID0gTWF0aC5hYnMoZ2FwKVxuICAgICAgaWYgKGdhcCA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgY29uc3QgZmlsbEZyYW1lQ291bnQgPSBNYXRoLmZsb29yKGdhcCAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxsRnJhbWVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgY2xvbmVkU2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgdmlkZW9TYW1wbGVzWzBdKVxuICAgICAgICAgIGNvbnN0IGNvbXB1dGVkID0gZmlyc3REdHMgLSAoaSArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgICAgICAgY2xvbmVkU2FtcGxlLmR0cyA9IGNvbXB1dGVkID4gdGhpcy5uZXh0VmlkZW9EdHMgPyBjb21wdXRlZCA6IHRoaXMubmV4dFZpZGVvRHRzIC8vIOihpeeahOesrOS4gOW4p+S4gOWumuimgeaYr25leHRWaWRlb0R0c1xuICAgICAgICAgIGNsb25lZFNhbXBsZS5wdHMgPSBjbG9uZWRTYW1wbGUuZHRzICsgY2xvbmVkU2FtcGxlLmN0c1xuXG4gICAgICAgICAgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMudW5zaGlmdChjbG9uZWRTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogY2xvbmVkU2FtcGxlLmR0cyxcbiAgICAgICAgICAgIHNpemU6IGNsb25lZFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFic0dhcCA8PSAxMCAmJiBhYnNHYXAgPiAwKSB7XG4gICAgICAgIC8vIOW9k+W3rui3neWcqCst5LiA5bin5LmL6Ze05pe25bCG56ys5LiA5bin55qEZHRz5by66KGM5a6a5L2N5Yiw5pyf5pyb5L2N572uXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCfph43lrprkvY3op4bpopHluKdkdHMnLCB2aWRlb1NhbXBsZXNbMF0uZHRzLCB0aGlzLm5leHRWaWRlb0R0cylcbiAgICAgICAgdmlkZW9TYW1wbGVzWzBdLmR0cyA9IHRoaXMubmV4dFZpZGVvRHRzXG4gICAgICAgIHZpZGVvU2FtcGxlc1swXS5vcmlnaW5EdHMgPSB2aWRlb1NhbXBsZXNbMF0uZHRzXG4gICAgICAgIHZpZGVvU2FtcGxlc1swXS5jdHMgPSB2aWRlb1NhbXBsZXNbMF0uY3RzIHx8IHZpZGVvU2FtcGxlc1swXS5wdHMgLSB2aWRlb1NhbXBsZXNbMF0uZHRzXG4gICAgICAgIHZpZGVvU2FtcGxlc1swXS5wdHMgPSB2aWRlb1NhbXBsZXNbMF0uZHRzICsgdmlkZW9TYW1wbGVzWzBdLmN0c1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsYXN0RHRzID0gdmlkZW9TYW1wbGVzW3ZpZGVvU2FtcGxlcy5sZW5ndGggLSAxXS5kdHM7XG5cbiAgICBjb25zdCBsYXN0U2FtcGxlRHVyYXRpb24gPSB2aWRlb1NhbXBsZXMubGVuZ3RoID49IDIgPyBsYXN0RHRzIC0gdmlkZW9TYW1wbGVzW3ZpZGVvU2FtcGxlcy5sZW5ndGggLSAyXS5kdHMgOiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG5cbiAgICB0aGlzLmxhc3RWaWRlb1NhbXBsZXNMZW4gPSBzYW1wbGVzTGVuXG4gICAgdGhpcy5uZXh0VmlkZW9EdHMgPSBsYXN0RHRzICsgbGFzdFNhbXBsZUR1cmF0aW9uXG4gICAgdGhpcy5sYXN0VmlkZW9EdHMgPSBsYXN0RHRzXG5cbiAgICAvLyBzdGVwMi4g5L+u5aSNc2FtcGxl5q615LmL5YaF55qE6Ze06Led6Zeu6aKYXG4gICAgLy8gc3RlcDMuIOS/ruWkjXNhbXBsZXPmrrXlhoXpg6jnmoRkdHPlvILluLjpl67pophcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdmlkZW9TYW1wbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gdmlkZW9TYW1wbGVzW2ldXG4gICAgICBjb25zdCBuZXh0ID0gdmlkZW9TYW1wbGVzW2kgKyAxXVxuXG4gICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gbmV4dC5kdHMgLSBjdXJyZW50LmR0cztcblxuICAgICAgaWYgKGR1cmF0aW9uID4gKDIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgICAvLyDkuKTluKfkuYvpl7Tpl7TpmpTlpKrlpKfvvIzpnIDopoHooaXnqbrnmb3luKdcbiAgICAgICAgbGV0IGZpbGxGcmFtZUNvdW50ID0gTWF0aC5mbG9vcihkdXJhdGlvbiAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgbGV0IGZpbGxGcmFtZUlkeCA9IDBcbiAgICAgICAgd2hpbGUgKGZpbGxGcmFtZUlkeCA8IGZpbGxGcmFtZUNvdW50KSB7XG4gICAgICAgICAgY29uc3QgZmlsbEZyYW1lID0gT2JqZWN0LmFzc2lnbih7fSwgbmV4dClcbiAgICAgICAgICBmaWxsRnJhbWUuZHRzID0gY3VycmVudC5kdHMgKyAoZmlsbEZyYW1lSWR4ICsgMSkgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgICAgZmlsbEZyYW1lLnB0cyA9IGZpbGxGcmFtZS5kdHMgKyBmaWxsRnJhbWUuY3RzXG4gICAgICAgICAgaWYgKGZpbGxGcmFtZSA8IG5leHQuZHRzKSB7XG4gICAgICAgICAgICB2aWRlb1NhbXBsZXMuc3BsaWNlKGksIDAsIGZpbGxGcmFtZSlcblxuICAgICAgICAgICAgdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgICAgIGR0czogZmlsbEZyYW1lLmR0cyxcbiAgICAgICAgICAgICAgc2l6ZTogZmlsbEZyYW1lLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaWxsRnJhbWVJZHgrK1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzID0gdmlkZW9TYW1wbGVzO1xuICB9XG5cbiAgZG9GaXhBdWRpbyAoZmlyc3QpIHtcbiAgICBsZXQge3NhbXBsZXM6IGF1ZGlvU2FtcGxlcywgbWV0YX0gPSB0aGlzLmF1ZGlvVHJhY2tcblxuICAgIGlmICghYXVkaW9TYW1wbGVzIHx8ICFhdWRpb1NhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coYGF1ZGlvIGxhc3RTYW1wbGUsICR7YXVkaW9TYW1wbGVzW2F1ZGlvU2FtcGxlcy5sZW5ndGggLSAxXS5kdHN9YClcblxuICAgIGNvbnN0IHNhbXBsZXNMZW4gPSBhdWRpb1NhbXBsZXMubGVuZ3RoO1xuICAgIGNvbnN0IHNpbGVudEZyYW1lID0gQUFDLmdldFNpbGVudEZyYW1lKG1ldGEuY29kZWMsIG1ldGEuY2hhbm5lbENvdW50KVxuXG4gICAgY29uc3QgZmlyc3RTYW1wbGUgPSB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlXG5cbiAgICAvLyDlr7lhdWRpb1NhbXBsZXPmjInnhadkdHPlgZrmjpLluo9cbiAgICBhdWRpb1NhbXBsZXMgPSBDb21wYXRpYmlsaXR5LnNvcnRBdWRpb1NhbXBsZXMoYXVkaW9TYW1wbGVzKVxuXG4gICAgLy8gc3RlcDAuIOmmluW4p+S4jnZpZGVv6aaW5bin6Ze06Led5aSn55qE6Zeu6aKYXG4gICAgaWYgKHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUgJiYgZmlyc3QpIHtcbiAgICAgIGNvbnN0IHZpZGVvRmlyc3RQdHMgPSB0aGlzLl9maXJzdFZpZGVvU2FtcGxlLnB0cyA/IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUucHRzIDogdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5kdHMgKyB0aGlzLl9maXJzdFZpZGVvU2FtcGxlLmN0c1xuXG4gICAgICBpZiAoZmlyc3RTYW1wbGUuZHRzIC0gdmlkZW9GaXJzdFB0cyA+IG1ldGEucmVmU2FtcGxlRHVyYXRpb24pIHtcbiAgICAgICAgY29uc3Qgc2lsZW50U2FtcGxlQ291bnQgPSBNYXRoLmZsb29yKChmaXJzdFNhbXBsZS5kdHMgLSB2aWRlb0ZpcnN0UHRzKSAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWxlbnRTYW1wbGVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qgc2lsZW50U2FtcGxlID0ge1xuICAgICAgICAgICAgZGF0YTogc2lsZW50RnJhbWUsXG4gICAgICAgICAgICBkYXRhc2l6ZTogc2lsZW50RnJhbWUuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIGR0czogZmlyc3RTYW1wbGUuZHRzIC0gKGkgKyAxKSAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24sXG4gICAgICAgICAgICBmaWx0ZXJlZDogMFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGF1ZGlvU2FtcGxlcy51bnNoaWZ0KHNpbGVudFNhbXBsZSlcblxuICAgICAgICAgIHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgZHRzOiBzaWxlbnRTYW1wbGUuZHRzLFxuICAgICAgICAgICAgc2l6ZTogc2lsZW50U2FtcGxlLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgZ2FwXG4gICAgY29uc3QgZmlyc3REdHMgPSBhdWRpb1NhbXBsZXNbMF0uZHRzXG5cbiAgICBpZiAodGhpcy5uZXh0QXVkaW9EdHMpIHtcbiAgICAgIC8vIHN0ZXAxLiDlpITnkIZzYW1wbGVz5q615LmL6Ze055qE5Lii5bin5oOF5Ya1XG4gICAgICAvLyDlvZPlj5HnjrBkdXJhdGlvbuW3rui3neWkp+S6jjHluKfml7bov5vooYzooaXluKdcbiAgICAgIGdhcCA9IGZpcnN0RHRzIC0gdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgIGNvbnN0IGFic0dhcCA9IE1hdGguYWJzKGdhcClcblxuICAgICAgaWYgKGFic0dhcCA+IG1ldGEucmVmU2FtcGxlRHVyYXRpb24gJiYgc2FtcGxlc0xlbiA9PT0gMSAmJiB0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4gPT09IDEpIHtcbiAgICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkID0gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIGlmIChnYXAgPiAoMiAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pKSB7XG4gICAgICAgIGlmIChzYW1wbGVzTGVuID09PSAxICYmIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9PT0gMSkge1xuICAgICAgICAgIC8vIOWmguaenHNhbXBsZeeahGxlbmd0aOS4gOebtOaYrzHvvIzogIzkuJTkuIDnm7TkuI3nrKblkIhyZWZTYW1wbGVEdXJhdGlvbu+8jOmcgOimgeWKqOaAgeS/ruaUuXJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkICE9PSB1bmRlZmluZWQgPyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgKyBnYXAgOiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uICsgZ2FwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgc2lsZW50RnJhbWVDb3VudCA9IE1hdGguZmxvb3IoZ2FwIC8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbilcblxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lsZW50RnJhbWVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wdXRlZCA9IGZpcnN0RHRzIC0gKGkgKyAxKSAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IHNpbGVudFNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIGF1ZGlvU2FtcGxlc1swXSwge1xuICAgICAgICAgICAgICBkdHM6IGNvbXB1dGVkID4gdGhpcy5uZXh0QXVkaW9EdHMgPyBjb21wdXRlZCA6IHRoaXMubmV4dEF1ZGlvRHRzXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgICAgZHRzOiBzaWxlbnRTYW1wbGUuZHRzLFxuICAgICAgICAgICAgICBzaXplOiBzaWxlbnRTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMudW5zaGlmdChzaWxlbnRTYW1wbGUpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFic0dhcCA8PSAxMCAmJiBhYnNHYXAgPiAwKSB7XG4gICAgICAgIC8vIOW9k+W3rui3neavlOi+g+Wwj+eahOaXtuWAmeWwhumfs+mikeW4p+mHjeWumuS9jVxuICAgICAgICAvLyBjb25zb2xlLmxvZygn6YeN5a6a5L2N6Z+z6aKR5binZHRzJywgYXVkaW9TYW1wbGVzWzBdLmR0cywgdGhpcy5uZXh0QXVkaW9EdHMpXG4gICAgICAgIGF1ZGlvU2FtcGxlc1swXS5kdHMgPSB0aGlzLm5leHRBdWRpb0R0c1xuICAgICAgICBhdWRpb1NhbXBsZXNbMF0ucHRzID0gdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGFzdER0cyA9IGF1ZGlvU2FtcGxlc1thdWRpb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzO1xuICAgIGNvbnN0IGxhc3RTYW1wbGVEdXJhdGlvbiA9IGF1ZGlvU2FtcGxlcy5sZW5ndGggPj0gMiA/IGxhc3REdHMgLSBhdWRpb1NhbXBsZXNbYXVkaW9TYW1wbGVzLmxlbmd0aCAtIDJdLmR0cyA6IG1ldGEucmVmU2FtcGxlRHVyYXRpb25cblxuICAgIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9IHNhbXBsZXNMZW47XG4gICAgdGhpcy5uZXh0QXVkaW9EdHMgPSBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQgPyBsYXN0RHRzICsgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkIDogbGFzdER0cyArIGxhc3RTYW1wbGVEdXJhdGlvblxuICAgIHRoaXMubGFzdEF1ZGlvRHRzID0gbGFzdER0c1xuXG4gICAgLy8gc3RlcDMuIOS/ruWkjXNhbXBsZXPmrrXlhoXpg6jnmoRkdHPlvILluLjpl67pophcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXVkaW9TYW1wbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gYXVkaW9TYW1wbGVzW2ldXG4gICAgICBjb25zdCBuZXh0ID0gYXVkaW9TYW1wbGVzW2kgKyAxXVxuXG4gICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gbmV4dC5kdHMgLSBjdXJyZW50LmR0cztcbiAgICAgIGF1ZGlvU2FtcGxlc1tpXS5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgLypcbiAgICAgIGlmIChkdXJhdGlvbiA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgLy8g5Lik5bin5LmL6Ze06Ze06ZqU5aSq5aSn77yM6ZyA6KaB6KGl56m655m95binXG4gICAgICAgIC8qKlxuICAgICAgICBsZXQgc2lsZW50RnJhbWVDb3VudCA9IE1hdGguZmxvb3IoZHVyYXRpb24gLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuICAgICAgICBsZXQgZnJhbWVJZHggPSAwXG5cbiAgICAgICAgd2hpbGUgKGZyYW1lSWR4IDwgc2lsZW50RnJhbWVDb3VudCkge1xuICAgICAgICAgIGNvbnN0IHNpbGVudFNhbXBsZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IHNpbGVudEZyYW1lLFxuICAgICAgICAgICAgZGF0YXNpemU6IHNpbGVudEZyYW1lLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICBkdHM6IGN1cnJlbnQuZHRzICsgKGZyYW1lSWR4ICsgMSkgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uLFxuICAgICAgICAgICAgZmlsdGVyZWQ6IDAsXG4gICAgICAgICAgICBpc1NpbGVudDogdHJ1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGF1ZGlvU2FtcGxlcy5zcGxpY2UoaSwgMCwgc2lsZW50U2FtcGxlKVxuXG4gICAgICAgICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgICBkdHM6IHNpbGVudFNhbXBsZS5kdHMsXG4gICAgICAgICAgICBzaXplOiBzaWxlbnRTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIGZyYW1lSWR4KytcbiAgICAgICAgICBpKysgLy8g5LiN5a+56Z2Z6Z+z5bin5YGa5q+U6L6DXG4gICAgICAgIH1cbiAgICAgIH0gKi9cbiAgICB9XG5cbiAgICB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcyA9IENvbXBhdGliaWxpdHkuc29ydEF1ZGlvU2FtcGxlcyhhdWRpb1NhbXBsZXMpXG4gIH1cblxuICBnZXRGaXJzdFNhbXBsZSAoKSB7XG4gICAgLy8g6I635Y+WdmlkZW/lkoxhdWRpb+eahOmmluW4p+aVsOaNrlxuICAgIGxldCB7c2FtcGxlczogdmlkZW9TYW1wbGVzfSA9IHRoaXMudmlkZW9UcmFja1xuICAgIGxldCB7c2FtcGxlczogYXVkaW9TYW1wbGVzfSA9IHRoaXMuYXVkaW9UcmFja1xuXG4gICAgbGV0IGlzRmlyc3RWaWRlb1NhbXBsZXMgPSBmYWxzZTtcbiAgICBsZXQgaXNGaXJzdEF1ZGlvU2FtcGxlcyA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLl9maXJzdFZpZGVvU2FtcGxlICYmIHZpZGVvU2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUgPSBDb21wYXRpYmlsaXR5LmZpbmRGaXJzdFZpZGVvU2FtcGxlKHZpZGVvU2FtcGxlcylcbiAgICAgIGlzRmlyc3RWaWRlb1NhbXBsZXMgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9maXJzdEF1ZGlvU2FtcGxlICYmIGF1ZGlvU2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUgPSBDb21wYXRpYmlsaXR5LmZpbmRGaXJzdEF1ZGlvU2FtcGxlKGF1ZGlvU2FtcGxlcykgLy8g5a+75om+ZHRz5pyA5bCP55qE5bin5L2c5Li66aaW5Liq6Z+z6aKR5binXG4gICAgICBpc0ZpcnN0QXVkaW9TYW1wbGVzID0gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpc0ZpcnN0VmlkZW9TYW1wbGVzLFxuICAgICAgaXNGaXJzdEF1ZGlvU2FtcGxlc1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDlnKjmsqHmnIlyZWZTYW1wbGVEdXJhdGlvbueahOmXrumimOa1geS4re+8jFxuICAgKi9cbiAgZml4UmVmU2FtcGxlRHVyYXRpb24gKG1ldGEsIHNhbXBsZXMpIHtcbiAgICBjb25zdCBpc1ZpZGVvID0gbWV0YS50eXBlID09PSAndmlkZW8nXG4gICAgY29uc3QgYWxsU2FtcGxlc0NvdW50ID0gaXNWaWRlbyA/IHRoaXMuYWxsVmlkZW9TYW1wbGVzQ291bnQgOiB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50XG4gICAgY29uc3QgZmlyc3REdHMgPSBpc1ZpZGVvID8gdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5kdHMgOiB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlLmR0c1xuICAgIGNvbnN0IGZpbGxlZFNhbXBsZXNDb3VudCA9IGlzVmlkZW8gPyB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcy5sZW5ndGggOiB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5sZW5ndGhcblxuICAgIGlmICghbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiB8fCBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uIDw9IDAgfHwgTnVtYmVyLmlzTmFOKG1ldGEucmVmU2FtcGxlRHVyYXRpb24pKSB7XG4gICAgICBpZiAoc2FtcGxlcy5sZW5ndGggPj0gMSkge1xuICAgICAgICBjb25zdCBsYXN0RHRzID0gc2FtcGxlc1tzYW1wbGVzLmxlbmd0aCAtIDFdLmR0c1xuXG4gICAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKChsYXN0RHRzIC0gZmlyc3REdHMpIC8gKChhbGxTYW1wbGVzQ291bnQgKyBmaWxsZWRTYW1wbGVzQ291bnQpIC0gMSkpOyAvLyDlsIZyZWZTYW1wbGVEdXJhdGlvbumHjee9ruS4uuiuoeeul+WQjueahOW5s+Wdh+WAvFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobWV0YS5yZWZTYW1wbGVEdXJhdGlvbikge1xuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgY29uc3QgbGFzdER0cyA9IHNhbXBsZXNbc2FtcGxlcy5sZW5ndGggLSAxXS5kdHNcbiAgICAgICAgY29uc3QgZmlyc3REdHMgPSBzYW1wbGVzWzBdLmR0c1xuICAgICAgICBjb25zdCBkdXJhdGlvbkF2ZyA9IChsYXN0RHRzIC0gZmlyc3REdHMpIC8gc2FtcGxlcy5sZW5ndGhcblxuICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5hYnMobWV0YS5yZWZTYW1wbGVEdXJhdGlvbiAtIGR1cmF0aW9uQXZnKSA8PSBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA6IGR1cmF0aW9uQXZnOyAvLyDlsIZyZWZTYW1wbGVEdXJhdGlvbumHjee9ruS4uuiuoeeul+WQjueahOW5s+Wdh+WAvFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDorrDlvZXmiKrmraLnm67liY3kuIDlhbHmkq3mlL7kuoblpJrlsJHluKdcbiAgICovXG4gIHJlY29yZFNhbXBsZXNDb3VudCAoKSB7XG4gICAgY29uc3QgeyBhdWRpb1RyYWNrLCB2aWRlb1RyYWNrIH0gPSB0aGlzXG5cbiAgICB0aGlzLmFsbEF1ZGlvU2FtcGxlc0NvdW50ICs9IGF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGhcbiAgICB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50ICs9IHZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiDljrvpmaTkuI3lkIjms5XnmoTluKfvvIjlgJLpgIDjgIHph43lpI3luKfvvIlcbiAgICovXG4gIHJlbW92ZUludmFsaWRTYW1wbGVzICgpIHtcbiAgICBjb25zdCB7IF9maXJzdFZpZGVvU2FtcGxlLCBfZmlyc3RBdWRpb1NhbXBsZSB9ID0gdGhpc1xuXG4gICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMgPSB0aGlzLmF1ZGlvVHJhY2suc2FtcGxlcy5maWx0ZXIoKHNhbXBsZSkgPT4ge1xuICAgICAgcmV0dXJuIHNhbXBsZS5kdHMgPj0gX2ZpcnN0QXVkaW9TYW1wbGUuZHRzICYmICh0aGlzLmxhc3RBdWRpb0R0cyA9PT0gdW5kZWZpbmVkIHx8IHNhbXBsZS5kdHMgPiB0aGlzLmxhc3RBdWRpb0R0cylcbiAgICB9KVxuXG4gICAgdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMgPSB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcy5maWx0ZXIoKHNhbXBsZSkgPT4ge1xuICAgICAgcmV0dXJuIHNhbXBsZS5kdHMgPj0gX2ZpcnN0VmlkZW9TYW1wbGUuZHRzICYmICh0aGlzLmxhc3RWaWRlb0R0cyA9PT0gdW5kZWZpbmVkIHx8IHNhbXBsZS5kdHMgPiB0aGlzLmxhc3RWaWRlb0R0cylcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIHNvcnRBdWRpb1NhbXBsZXMgKHNhbXBsZXMpIHtcbiAgICBpZiAoc2FtcGxlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBzYW1wbGVzXG4gICAgfVxuXG4gICAgcmV0dXJuIHNhbXBsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGEuZHRzIC0gYi5kdHNcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIOWvu+aJvmR0c+acgOWwj+eahHNhbXBsZVxuICAgKiBAcGFyYW0gc2FtcGxlc1xuICAgKi9cbiAgc3RhdGljIGZpbmRGaXJzdEF1ZGlvU2FtcGxlIChzYW1wbGVzKSB7XG4gICAgaWYgKCFzYW1wbGVzIHx8IHNhbXBsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHJldHVybiBDb21wYXRpYmlsaXR5LnNvcnRBdWRpb1NhbXBsZXMoc2FtcGxlcylbMF1cbiAgfVxuXG4gIHN0YXRpYyBmaW5kRmlyc3RWaWRlb1NhbXBsZSAoc2FtcGxlcykge1xuICAgIGlmICghc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3Qgc29ydGVkID0gc2FtcGxlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gYS5kdHMgLSBiLmR0cztcbiAgICB9KVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNvcnRlZC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKHNvcnRlZFtpXS5pc0tleWZyYW1lKSB7XG4gICAgICAgIHJldHVybiBzb3J0ZWRbaV1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgdHJhY2tzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgfVxuXG4gIGdldCBhdWRpb1RyYWNrICgpIHtcbiAgICBpZiAodGhpcy50cmFja3MpIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYWNrcy5hdWRpb1RyYWNrXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgdmlkZW9UcmFjayAoKSB7XG4gICAgaWYgKHRoaXMudHJhY2tzKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFja3MudmlkZW9UcmFja1xuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBDb21wYXRpYmlsaXR5O1xuIiwiY2xhc3MgR29sb21iIHtcbiAgY29uc3RydWN0b3IgKHVpbnQ4YXJyYXkpIHtcbiAgICB0aGlzLlRBRyA9ICdHb2xvbWInXG4gICAgdGhpcy5fYnVmZmVyID0gdWludDhhcnJheVxuICAgIHRoaXMuX2J1ZmZlckluZGV4ID0gMFxuICAgIHRoaXMuX3RvdGFsQnl0ZXMgPSB1aW50OGFycmF5LmJ5dGVMZW5ndGhcbiAgICB0aGlzLl90b3RhbEJpdHMgPSB1aW50OGFycmF5LmJ5dGVMZW5ndGggKiA4XG4gICAgdGhpcy5fY3VycmVudFdvcmQgPSAwXG4gICAgdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCA9IDBcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2J1ZmZlciA9IG51bGxcbiAgfVxuXG4gIF9maWxsQ3VycmVudFdvcmQgKCkge1xuICAgIGxldCBidWZmZXJCeXRlc0xlZnQgPSB0aGlzLl90b3RhbEJ5dGVzIC0gdGhpcy5fYnVmZmVySW5kZXhcbiAgICBpZiAoYnVmZmVyQnl0ZXNMZWZ0IDw9IDApIHtcbiAgICAgIC8vIFRPRE8g5byC5bi45aSE55CGXG4gICAgfVxuXG4gICAgbGV0IGJ5dGVzUmVhZCA9IE1hdGgubWluKDQsIGJ1ZmZlckJ5dGVzTGVmdClcbiAgICBsZXQgd29yZCA9IG5ldyBVaW50OEFycmF5KDQpXG4gICAgd29yZC5zZXQodGhpcy5fYnVmZmVyLnN1YmFycmF5KHRoaXMuX2J1ZmZlckluZGV4LCB0aGlzLl9idWZmZXJJbmRleCArIGJ5dGVzUmVhZCkpXG4gICAgdGhpcy5fY3VycmVudFdvcmQgPSBuZXcgRGF0YVZpZXcod29yZC5idWZmZXIpLmdldFVpbnQzMigwLCBmYWxzZSlcblxuICAgIHRoaXMuX2J1ZmZlckluZGV4ICs9IGJ5dGVzUmVhZFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPSBieXRlc1JlYWQgKiA4XG4gIH1cblxuICByZWFkQml0cyAoYml0cykge1xuICAgIGlmIChiaXRzID4gMzIpIHtcbiAgICAgIC8vIFRPRE9cbiAgICB9XG5cbiAgICBpZiAoYml0cyA8PSB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0KSB7XG4gICAgICBsZXQgcmVzdWx0ID0gdGhpcy5fY3VycmVudFdvcmQgPj4+ICgzMiAtIGJpdHMpXG4gICAgICB0aGlzLl9jdXJyZW50V29yZCA8PD0gYml0c1xuICAgICAgdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCAtPSBiaXRzXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPyB0aGlzLl9jdXJyZW50V29yZCA6IDBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZXN1bHQgPj4+ICgzMiAtIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQpXG4gICAgbGV0IGJpdHNOZWVkTGVmdCA9IGJpdHMgLSB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0XG5cbiAgICB0aGlzLl9maWxsQ3VycmVudFdvcmQoKVxuICAgIGxldCBiaXRzUmVhZE5leHQgPSBNYXRoLm1pbihiaXRzTmVlZExlZnQsIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQpXG5cbiAgICBsZXQgcmVzdWx0MiA9IHRoaXMuX2N1cnJlbnRXb3JkID4+PiAoMzIgLSBiaXRzUmVhZE5leHQpXG4gICAgdGhpcy5fY3VycmVudFdvcmQgPDw9IGJpdHNSZWFkTmV4dFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgLT0gYml0c1JlYWROZXh0XG5cbiAgICByZXN1bHQgPSAocmVzdWx0IDw8IGJpdHNSZWFkTmV4dCkgfCByZXN1bHQyXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcmVhZEJvb2wgKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDEpID09PSAxXG4gIH1cblxuICByZWFkQnl0ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZEJpdHMoOClcbiAgfVxuXG4gIF9za2lwTGVhZGluZ1plcm8gKCkge1xuICAgIGxldCB6ZXJvQ291bnRcbiAgICBmb3IgKHplcm9Db3VudCA9IDA7IHplcm9Db3VudCA8IHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQ7IHplcm9Db3VudCsrKSB7XG4gICAgICBpZiAoKHRoaXMuX2N1cnJlbnRXb3JkICYgKDB4ODAwMDAwMDAgPj4+IHplcm9Db3VudCkpICE9PSAwKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRXb3JkIDw8PSB6ZXJvQ291bnRcbiAgICAgICAgdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCAtPSB6ZXJvQ291bnRcbiAgICAgICAgcmV0dXJuIHplcm9Db3VudFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9maWxsQ3VycmVudFdvcmQoKVxuICAgIHJldHVybiB6ZXJvQ291bnQgKyB0aGlzLl9za2lwTGVhZGluZ1plcm8oKVxuICB9XG5cbiAgcmVhZFVFRyAoKSB7IC8vIHVuc2lnbmVkIGV4cG9uZW50aWFsIGdvbG9tYlxuICAgIGxldCBsZWFkaW5nWmVyb3MgPSB0aGlzLl9za2lwTGVhZGluZ1plcm8oKVxuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKGxlYWRpbmdaZXJvcyArIDEpIC0gMVxuICB9XG5cbiAgcmVhZFNFRyAoKSB7IC8vIHNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbiAgICBsZXQgdmFsdWUgPSB0aGlzLnJlYWRVRUcoKVxuICAgIGlmICh2YWx1ZSAmIDB4MDEpIHtcbiAgICAgIHJldHVybiAodmFsdWUgKyAxKSA+Pj4gMVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTEgKiAodmFsdWUgPj4+IDEpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdvbG9tYlxuIiwiaW1wb3J0IFNwc1BhcnNlciBmcm9tICcuL3Nwcyc7XG5jbGFzcyBOYWx1bml0IHtcbiAgc3RhdGljIGdldE5hbHVuaXRzIChidWZmZXIpIHtcbiAgICBpZiAoYnVmZmVyLmxlbmd0aCAtIGJ1ZmZlci5wb3NpdGlvbiA8IDQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBsZXQgYnVmID0gYnVmZmVyLmRhdGF2aWV3O1xuICAgIGxldCBwb3NpdGlvbiA9IGJ1ZmZlci5wb3NpdGlvbjtcbiAgICBpZiAoYnVmLmdldEludDMyKHBvc2l0aW9uKSA9PT0gMSB8fFxuICAgIChidWYuZ2V0SW50MTYocG9zaXRpb24pID09PSAwICYmIGJ1Zi5nZXRJbnQ4KHBvc2l0aW9uICsgMikgPT09IDEpKSB7XG4gICAgICByZXR1cm4gTmFsdW5pdC5nZXRBbm5leGJOYWxzKGJ1ZmZlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBOYWx1bml0LmdldEF2Y2NOYWxzKGJ1ZmZlcik7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldEFubmV4Yk5hbHMgKGJ1ZmZlcikge1xuICAgIGxldCBuYWxzID0gW107XG4gICAgbGV0IHBvc2l0aW9uID0gTmFsdW5pdC5nZXRIZWFkZXJQb3NpdGlvbkFubmV4QihidWZmZXIpO1xuICAgIGxldCBzdGFydCA9IHBvc2l0aW9uLnBvcztcbiAgICBsZXQgZW5kID0gc3RhcnQ7XG4gICAgd2hpbGUgKHN0YXJ0IDwgYnVmZmVyLmxlbmd0aCAtIDQpIHtcbiAgICAgIGxldCBoZWFkZXIgPSBidWZmZXIuYnVmZmVyLnNsaWNlKHN0YXJ0LCBzdGFydCArIHBvc2l0aW9uLmhlYWRlckxlbmd0aCk7XG4gICAgICBpZiAocG9zaXRpb24ucG9zID09PSBidWZmZXIucG9zaXRpb24pIHtcbiAgICAgICAgYnVmZmVyLnNraXAocG9zaXRpb24uaGVhZGVyTGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHBvc2l0aW9uID0gTmFsdW5pdC5nZXRIZWFkZXJQb3NpdGlvbkFubmV4QihidWZmZXIpO1xuICAgICAgZW5kID0gcG9zaXRpb24ucG9zO1xuICAgICAgbGV0IGJvZHkgPSBuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLnNsaWNlKHN0YXJ0ICsgaGVhZGVyLmJ5dGVMZW5ndGgsIGVuZCkpO1xuICAgICAgbGV0IHVuaXQgPSB7aGVhZGVyLCBib2R5fTtcbiAgICAgIE5hbHVuaXQuYW5hbHlzZU5hbCh1bml0KTtcbiAgICAgIG5hbHMucHVzaCh1bml0KTtcbiAgICAgIGJ1ZmZlci5za2lwKGVuZCAtIGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICBzdGFydCA9IGVuZDtcbiAgICB9XG4gICAgcmV0dXJuIG5hbHM7XG4gIH1cblxuICBzdGF0aWMgZ2V0QXZjY05hbHMgKGJ1ZmZlcikge1xuICAgIGxldCBuYWxzID0gW107XG4gICAgd2hpbGUgKGJ1ZmZlci5wb3NpdGlvbiA8IGJ1ZmZlci5sZW5ndGggLSA0KSB7XG4gICAgICBsZXQgbGVuZ3RoID0gYnVmZmVyLmRhdGF2aWV3LmdldEludDMyKGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICBpZiAoYnVmZmVyLmxlbmd0aCAtIGJ1ZmZlci5wb3NpdGlvbiA+PSBsZW5ndGgpIHtcbiAgICAgICAgbGV0IGhlYWRlciA9IGJ1ZmZlci5idWZmZXIuc2xpY2UoYnVmZmVyLnBvc2l0aW9uLCBidWZmZXIucG9zaXRpb24gKyA0KTtcbiAgICAgICAgYnVmZmVyLnNraXAoNClcbiAgICAgICAgbGV0IGJvZHkgPSBidWZmZXIuYnVmZmVyLnNsaWNlKGJ1ZmZlci5wb3NpdGlvbiwgYnVmZmVyLnBvc2l0aW9uICsgbGVuZ3RoKTtcbiAgICAgICAgYnVmZmVyLnNraXAobGVuZ3RoKTtcbiAgICAgICAgbGV0IHVuaXQgPSB7aGVhZGVyLCBib2R5fTtcbiAgICAgICAgTmFsdW5pdC5hbmFseXNlTmFsKHVuaXQpO1xuICAgICAgICBuYWxzLnB1c2godW5pdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5hbHM7XG4gIH1cblxuICBzdGF0aWMgYW5hbHlzZU5hbCAodW5pdCkge1xuICAgIGxldCB0eXBlID0gdW5pdC5ib2R5WzBdICYgMHgxZjtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgLy8gTkRSXG4gICAgICAgIHVuaXQubmRyID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIC8vIElEUlxuICAgICAgICB1bml0LmlkciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2OlxuICAgICAgICAvLyBTRUlcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDc6XG4gICAgICAgIC8vIFNQU1xuICAgICAgICB1bml0LnNwcyA9IFNwc1BhcnNlci5wYXJzZVNQUyh1bml0LmJvZHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgLy8gUFBTXG4gICAgICAgIHVuaXQucHBzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDk6XG4gICAgICAgIC8vIEFVRFxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRIZWFkZXJQb3NpdGlvbkFubmV4QiAoYnVmZmVyKSB7XG4gICAgLy8gc2VwZXJhdGVcbiAgICBsZXQgcG9zID0gYnVmZmVyLnBvc2l0aW9uO1xuICAgIGxldCBoZWFkZXJMZW5ndGggPSAwO1xuICAgIHdoaWxlIChoZWFkZXJMZW5ndGggIT09IDMgJiYgaGVhZGVyTGVuZ3RoICE9PSA0ICYmIHBvcyA8IGJ1ZmZlci5sZW5ndGggLSA0KSB7XG4gICAgICBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDE2KHBvcykgPT09IDApIHtcbiAgICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MgKyAyKSA9PT0gMSkge1xuICAgICAgICAgIC8vIDB4MDAwMDAxXG4gICAgICAgICAgaGVhZGVyTGVuZ3RoID0gNDtcbiAgICAgICAgfSBlbHNlIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50OChwb3MgKyAyKSA9PT0gMSkge1xuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9zKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3MgPT09IGJ1ZmZlci5sZW5ndGggLSA0KSB7XG4gICAgICBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDE2KHBvcykgPT09IDApIHtcbiAgICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MgKyAyKSA9PT0gMSkge1xuICAgICAgICAgIC8vIDB4MDAwMDAxXG4gICAgICAgICAgaGVhZGVyTGVuZ3RoID0gNDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zKSA9PT0gMCAmJiBidWZmZXIuZGF0YXZpZXcuZ2V0SW50OChwb3MpID09PSAxKSB7XG4gICAgICAgICAgLy8gMHgwMDAwMDAxXG4gICAgICAgICAgaGVhZGVyTGVuZ3RoID0gMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb3MgPSBidWZmZXIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7cG9zLCBoZWFkZXJMZW5ndGh9O1xuICB9XG5cbiAgc3RhdGljIGdldEF2Y2MgKHNwcywgcHBzKSB7XG4gICAgbGV0IHJldCA9IG5ldyBVaW50OEFycmF5KHNwcy5ieXRlTGVuZ3RoICsgcHBzLmJ5dGVMZW5ndGggKyAxMSk7XG4gICAgcmV0WzBdID0gMHgwMTtcbiAgICByZXRbMV0gPSBzcHNbMV07XG4gICAgcmV0WzJdID0gc3BzWzJdO1xuICAgIHJldFszXSA9IHNwc1szXTtcbiAgICByZXRbNF0gPSAyNTU7XG4gICAgcmV0WzVdID0gMjI1O1xuXG4gICAgbGV0IG9mZnNldCA9IDY7XG5cbiAgICByZXQuc2V0KG5ldyBVaW50OEFycmF5KFsoc3BzLmJ5dGVMZW5ndGggPj4+IDgpICYgMHhmZiwgc3BzLmJ5dGVMZW5ndGggJiAweGZmXSksIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IDI7XG4gICAgcmV0LnNldChzcHMsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IHNwcy5ieXRlTGVuZ3RoO1xuXG4gICAgcmV0W29mZnNldF0gPSAxO1xuICAgIG9mZnNldCsrO1xuXG4gICAgcmV0LnNldChuZXcgVWludDhBcnJheShbKHBwcy5ieXRlTGVuZ3RoID4+PiA4KSAmIDB4ZmYsIHBwcy5ieXRlTGVuZ3RoICYgMHhmZl0pLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSAyO1xuICAgIHJldC5zZXQocHBzLCBvZmZzZXQpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmFsdW5pdDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAgKi9cbi8qIGVzbGludC1kaXNhYmxlIG9uZS12YXIgICovXG5pbXBvcnQgR29sb21iIGZyb20gJy4vZ29sb21iJ1xuXG5jbGFzcyBTUFNQYXJzZXIge1xuICBzdGF0aWMgX2Vic3AycmJzcCAodWludDhhcnJheSkge1xuICAgIGxldCBzcmMgPSB1aW50OGFycmF5XG4gICAgbGV0IHNyY0xlbmd0aCA9IHNyYy5ieXRlTGVuZ3RoXG4gICAgbGV0IGRzdCA9IG5ldyBVaW50OEFycmF5KHNyY0xlbmd0aClcbiAgICBsZXQgZHN0SWR4ID0gMFxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcmNMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGkgPj0gMikge1xuICAgICAgICBpZiAoc3JjW2ldID09PSAweDAzICYmIHNyY1tpIC0gMV0gPT09IDB4MDAgJiYgc3JjW2kgLSAyXSA9PT0gMHgwMCkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRzdFtkc3RJZHhdID0gc3JjW2ldXG4gICAgICBkc3RJZHgrK1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShkc3QuYnVmZmVyLCAwLCBkc3RJZHgpXG4gIH1cblxuICBzdGF0aWMgcGFyc2VTUFMgKHVpbnQ4YXJyYXkpIHtcbiAgICBsZXQgcmJzcCA9IFNQU1BhcnNlci5fZWJzcDJyYnNwKHVpbnQ4YXJyYXkpXG4gICAgbGV0IGdiID0gbmV3IEdvbG9tYihyYnNwKVxuXG4gICAgZ2IucmVhZEJ5dGUoKVxuICAgIGxldCBwcm9maWxlSWRjID0gZ2IucmVhZEJ5dGUoKVxuICAgIGdiLnJlYWRCeXRlKClcbiAgICBsZXQgbGV2ZWxJZGMgPSBnYi5yZWFkQnl0ZSgpXG4gICAgZ2IucmVhZFVFRygpXG5cbiAgICBsZXQgcHJvZmlsZV9zdHJpbmcgPSBTUFNQYXJzZXIuZ2V0UHJvZmlsZVN0cmluZyhwcm9maWxlSWRjKVxuICAgIGxldCBsZXZlbF9zdHJpbmcgPSBTUFNQYXJzZXIuZ2V0TGV2ZWxTdHJpbmcobGV2ZWxJZGMpXG4gICAgbGV0IGNocm9tYV9mb3JtYXRfaWRjID0gMVxuICAgIGxldCBjaHJvbWFfZm9ybWF0ID0gNDIwXG4gICAgbGV0IGNocm9tYV9mb3JtYXRfdGFibGUgPSBbMCwgNDIwLCA0MjIsIDQ0NF1cbiAgICBsZXQgYml0X2RlcHRoID0gOFxuXG4gICAgaWYgKHByb2ZpbGVJZGMgPT09IDEwMCB8fCBwcm9maWxlSWRjID09PSAxMTAgfHwgcHJvZmlsZUlkYyA9PT0gMTIyIHx8XG4gICAgICBwcm9maWxlSWRjID09PSAyNDQgfHwgcHJvZmlsZUlkYyA9PT0gNDQgfHwgcHJvZmlsZUlkYyA9PT0gODMgfHxcbiAgICAgIHByb2ZpbGVJZGMgPT09IDg2IHx8IHByb2ZpbGVJZGMgPT09IDExOCB8fCBwcm9maWxlSWRjID09PSAxMjggfHxcbiAgICAgIHByb2ZpbGVJZGMgPT09IDEzOCB8fCBwcm9maWxlSWRjID09PSAxNDQpIHtcbiAgICAgIGNocm9tYV9mb3JtYXRfaWRjID0gZ2IucmVhZFVFRygpXG4gICAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDMpIHtcbiAgICAgICAgZ2IucmVhZEJpdHMoMSlcbiAgICAgIH1cbiAgICAgIGlmIChjaHJvbWFfZm9ybWF0X2lkYyA8PSAzKSB7XG4gICAgICAgIGNocm9tYV9mb3JtYXQgPSBjaHJvbWFfZm9ybWF0X3RhYmxlW2Nocm9tYV9mb3JtYXRfaWRjXVxuICAgICAgfVxuXG4gICAgICBiaXRfZGVwdGggPSBnYi5yZWFkVUVHKCkgKyA4XG4gICAgICBnYi5yZWFkVUVHKClcbiAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgICBpZiAoZ2IucmVhZEJvb2woKSkge1xuICAgICAgICBsZXQgc2NhbGluZ19saXN0X2NvdW50ID0gKGNocm9tYV9mb3JtYXRfaWRjICE9PSAzKSA/IDggOiAxMlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjYWxpbmdfbGlzdF9jb3VudDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgICAgIGlmIChpIDwgNikge1xuICAgICAgICAgICAgICBTUFNQYXJzZXIuX3NraXBTY2FsaW5nTGlzdChnYiwgMTYpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBTUFNQYXJzZXIuX3NraXBTY2FsaW5nTGlzdChnYiwgNjQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdiLnJlYWRVRUcoKVxuICAgIGxldCBwaWNfb3JkZXJfY250X3R5cGUgPSBnYi5yZWFkVUVHKClcbiAgICBpZiAocGljX29yZGVyX2NudF90eXBlID09PSAwKSB7XG4gICAgICBnYi5yZWFkVUVHKClcbiAgICB9IGVsc2UgaWYgKHBpY19vcmRlcl9jbnRfdHlwZSA9PT0gMSkge1xuICAgICAgZ2IucmVhZEJpdHMoMSlcbiAgICAgIGdiLnJlYWRTRUcoKVxuICAgICAgZ2IucmVhZFNFRygpXG4gICAgICBsZXQgbnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZSA9IGdiLnJlYWRVRUcoKVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1fcmVmX2ZyYW1lc19pbl9waWNfb3JkZXJfY250X2N5Y2xlOyBpKyspIHtcbiAgICAgICAgZ2IucmVhZFNFRygpXG4gICAgICB9XG4gICAgfVxuICAgIGdiLnJlYWRVRUcoKVxuICAgIGdiLnJlYWRCaXRzKDEpXG5cbiAgICBsZXQgcGljX3dpZHRoX2luX21ic19taW51czEgPSBnYi5yZWFkVUVHKClcbiAgICBsZXQgcGljX2hlaWdodF9pbl9tYXBfdW5pdHNfbWludXMxID0gZ2IucmVhZFVFRygpXG5cbiAgICBsZXQgZnJhbWVfbWJzX29ubHlfZmxhZyA9IGdiLnJlYWRCaXRzKDEpXG4gICAgaWYgKGZyYW1lX21ic19vbmx5X2ZsYWcgPT09IDApIHtcbiAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgfVxuICAgIGdiLnJlYWRCaXRzKDEpXG5cbiAgICBsZXQgZnJhbWVfY3JvcF9sZWZ0X29mZnNldCA9IDBcbiAgICBsZXQgZnJhbWVfY3JvcF9yaWdodF9vZmZzZXQgPSAwXG4gICAgbGV0IGZyYW1lX2Nyb3BfdG9wX29mZnNldCA9IDBcbiAgICBsZXQgZnJhbWVfY3JvcF9ib3R0b21fb2Zmc2V0ID0gMFxuXG4gICAgbGV0IGZyYW1lX2Nyb3BwaW5nX2ZsYWcgPSBnYi5yZWFkQm9vbCgpXG4gICAgaWYgKGZyYW1lX2Nyb3BwaW5nX2ZsYWcpIHtcbiAgICAgIGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgPSBnYi5yZWFkVUVHKClcbiAgICAgIGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgICBmcmFtZV9jcm9wX3RvcF9vZmZzZXQgPSBnYi5yZWFkVUVHKClcbiAgICAgIGZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCA9IGdiLnJlYWRVRUcoKVxuICAgIH1cblxuICAgIGxldCBwYXJfd2lkdGggPSAxLCBwYXJfaGVpZ2h0ID0gMVxuICAgIGxldCBmcHMgPSAwLCBmcHNfZml4ZWQgPSB0cnVlLCBmcHNfbnVtID0gMCwgZnBzX2RlbiA9IDBcblxuICAgIGxldCB2dWlfcGFyYW1ldGVyc19wcmVzZW50X2ZsYWcgPSBnYi5yZWFkQm9vbCgpXG4gICAgaWYgKHZ1aV9wYXJhbWV0ZXJzX3ByZXNlbnRfZmxhZykge1xuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHsgLy8gYXNwZWN0X3JhdGlvX2luZm9fcHJlc2VudF9mbGFnXG4gICAgICAgIGxldCBhc3BlY3RfcmF0aW9faWRjID0gZ2IucmVhZEJ5dGUoKVxuICAgICAgICBsZXQgcGFyX3dfdGFibGUgPSBbMSwgMTIsIDEwLCAxNiwgNDAsIDI0LCAyMCwgMzIsIDgwLCAxOCwgMTUsIDY0LCAxNjAsIDQsIDMsIDJdXG4gICAgICAgIGxldCBwYXJfaF90YWJsZSA9IFsxLCAxMSwgMTEsIDExLCAzMywgMTEsIDExLCAxMSwgMzMsIDExLCAxMSwgMzMsIDk5LCAzLCAyLCAxXVxuXG4gICAgICAgIGlmIChhc3BlY3RfcmF0aW9faWRjID4gMCAmJiBhc3BlY3RfcmF0aW9faWRjIDwgMTYpIHtcbiAgICAgICAgICBwYXJfd2lkdGggPSBwYXJfd190YWJsZVthc3BlY3RfcmF0aW9faWRjIC0gMV1cbiAgICAgICAgICBwYXJfaGVpZ2h0ID0gcGFyX2hfdGFibGVbYXNwZWN0X3JhdGlvX2lkYyAtIDFdXG4gICAgICAgIH0gZWxzZSBpZiAoYXNwZWN0X3JhdGlvX2lkYyA9PT0gMjU1KSB7XG4gICAgICAgICAgcGFyX3dpZHRoID0gZ2IucmVhZEJ5dGUoKSA8PCA4IHwgZ2IucmVhZEJ5dGUoKVxuICAgICAgICAgIHBhcl9oZWlnaHQgPSBnYi5yZWFkQnl0ZSgpIDw8IDggfCBnYi5yZWFkQnl0ZSgpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgZ2IucmVhZEJvb2woKVxuICAgICAgfVxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgZ2IucmVhZEJpdHMoNClcbiAgICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgICBnYi5yZWFkQml0cygyNClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgZ2IucmVhZFVFRygpXG4gICAgICAgIGdiLnJlYWRVRUcoKVxuICAgICAgfVxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgbGV0IG51bV91bml0c19pbl90aWNrID0gZ2IucmVhZEJpdHMoMzIpXG4gICAgICAgIGxldCB0aW1lX3NjYWxlID0gZ2IucmVhZEJpdHMoMzIpXG4gICAgICAgIGZwc19maXhlZCA9IGdiLnJlYWRCb29sKClcblxuICAgICAgICBmcHNfbnVtID0gdGltZV9zY2FsZVxuICAgICAgICBmcHNfZGVuID0gbnVtX3VuaXRzX2luX3RpY2sgKiAyXG4gICAgICAgIGZwcyA9IGZwc19udW0gLyBmcHNfZGVuXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHBhclNjYWxlID0gMVxuICAgIGlmIChwYXJfd2lkdGggIT09IDEgfHwgcGFyX2hlaWdodCAhPT0gMSkge1xuICAgICAgcGFyU2NhbGUgPSBwYXJfd2lkdGggLyBwYXJfaGVpZ2h0XG4gICAgfVxuXG4gICAgbGV0IGNyb3BfdW5pdF94ID0gMCwgY3JvcF91bml0X3kgPSAwXG4gICAgaWYgKGNocm9tYV9mb3JtYXRfaWRjID09PSAwKSB7XG4gICAgICBjcm9wX3VuaXRfeCA9IDFcbiAgICAgIGNyb3BfdW5pdF95ID0gMiAtIGZyYW1lX21ic19vbmx5X2ZsYWdcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHN1Yl93YyA9IChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMykgPyAxIDogMlxuICAgICAgbGV0IHN1Yl9oYyA9IChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMSkgPyAyIDogMVxuICAgICAgY3JvcF91bml0X3ggPSBzdWJfd2NcbiAgICAgIGNyb3BfdW5pdF95ID0gc3ViX2hjICogKDIgLSBmcmFtZV9tYnNfb25seV9mbGFnKVxuICAgIH1cblxuICAgIGxldCBjb2RlY193aWR0aCA9IChwaWNfd2lkdGhfaW5fbWJzX21pbnVzMSArIDEpICogMTZcbiAgICBsZXQgY29kZWNfaGVpZ2h0ID0gKDIgLSBmcmFtZV9tYnNfb25seV9mbGFnKSAqICgocGljX2hlaWdodF9pbl9tYXBfdW5pdHNfbWludXMxICsgMSkgKiAxNilcblxuICAgIGNvZGVjX3dpZHRoIC09IChmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0ICsgZnJhbWVfY3JvcF9yaWdodF9vZmZzZXQpICogY3JvcF91bml0X3hcbiAgICBjb2RlY19oZWlnaHQgLT0gKGZyYW1lX2Nyb3BfdG9wX29mZnNldCArIGZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCkgKiBjcm9wX3VuaXRfeVxuXG4gICAgbGV0IHByZXNlbnRfd2lkdGggPSBNYXRoLmNlaWwoY29kZWNfd2lkdGggKiBwYXJTY2FsZSlcblxuICAgIGdiLmRlc3Ryb3koKVxuICAgIGdiID0gbnVsbFxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2ZpbGVfc3RyaW5nOiBwcm9maWxlX3N0cmluZyxcbiAgICAgIGxldmVsX3N0cmluZzogbGV2ZWxfc3RyaW5nLFxuICAgICAgYml0X2RlcHRoOiBiaXRfZGVwdGgsXG4gICAgICBjaHJvbWFfZm9ybWF0OiBjaHJvbWFfZm9ybWF0LFxuICAgICAgY2hyb21hX2Zvcm1hdF9zdHJpbmc6IFNQU1BhcnNlci5nZXRDaHJvbWFGb3JtYXRTdHJpbmcoY2hyb21hX2Zvcm1hdCksXG5cbiAgICAgIGZyYW1lX3JhdGU6IHtcbiAgICAgICAgZml4ZWQ6IGZwc19maXhlZCxcbiAgICAgICAgZnBzOiBmcHMsXG4gICAgICAgIGZwc19kZW46IGZwc19kZW4sXG4gICAgICAgIGZwc19udW06IGZwc19udW1cbiAgICAgIH0sXG5cbiAgICAgIHBhcl9yYXRpbzoge1xuICAgICAgICB3aWR0aDogcGFyX3dpZHRoLFxuICAgICAgICBoZWlnaHQ6IHBhcl9oZWlnaHRcbiAgICAgIH0sXG5cbiAgICAgIGNvZGVjX3NpemU6IHtcbiAgICAgICAgd2lkdGg6IGNvZGVjX3dpZHRoLFxuICAgICAgICBoZWlnaHQ6IGNvZGVjX2hlaWdodFxuICAgICAgfSxcblxuICAgICAgcHJlc2VudF9zaXplOiB7XG4gICAgICAgIHdpZHRoOiBwcmVzZW50X3dpZHRoLFxuICAgICAgICBoZWlnaHQ6IGNvZGVjX2hlaWdodFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBfc2tpcFNjYWxpbmdMaXN0IChnYiwgY291bnQpIHtcbiAgICBsZXQgbGFzdF9zY2FsZSA9IDgsIG5leHRfc2NhbGUgPSA4XG4gICAgbGV0IGRlbHRhX3NjYWxlID0gMFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgaWYgKG5leHRfc2NhbGUgIT09IDApIHtcbiAgICAgICAgZGVsdGFfc2NhbGUgPSBnYi5yZWFkU0VHKClcbiAgICAgICAgbmV4dF9zY2FsZSA9IChsYXN0X3NjYWxlICsgZGVsdGFfc2NhbGUgKyAyNTYpICUgMjU2XG4gICAgICB9XG4gICAgICBsYXN0X3NjYWxlID0gKG5leHRfc2NhbGUgPT09IDApID8gbGFzdF9zY2FsZSA6IG5leHRfc2NhbGVcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0UHJvZmlsZVN0cmluZyAocHJvZmlsZUlkYykge1xuICAgIHN3aXRjaCAocHJvZmlsZUlkYykge1xuICAgICAgY2FzZSA2NjpcbiAgICAgICAgcmV0dXJuICdCYXNlbGluZSdcbiAgICAgIGNhc2UgNzc6XG4gICAgICAgIHJldHVybiAnTWFpbidcbiAgICAgIGNhc2UgODg6XG4gICAgICAgIHJldHVybiAnRXh0ZW5kZWQnXG4gICAgICBjYXNlIDEwMDpcbiAgICAgICAgcmV0dXJuICdIaWdoJ1xuICAgICAgY2FzZSAxMTA6XG4gICAgICAgIHJldHVybiAnSGlnaDEwJ1xuICAgICAgY2FzZSAxMjI6XG4gICAgICAgIHJldHVybiAnSGlnaDQyMidcbiAgICAgIGNhc2UgMjQ0OlxuICAgICAgICByZXR1cm4gJ0hpZ2g0NDQnXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ1Vua25vd24nXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldExldmVsU3RyaW5nIChsZXZlbElkYykge1xuICAgIHJldHVybiAobGV2ZWxJZGMgLyAxMCkudG9GaXhlZCgxKVxuICB9XG5cbiAgc3RhdGljIGdldENocm9tYUZvcm1hdFN0cmluZyAoY2hyb21hKSB7XG4gICAgc3dpdGNoIChjaHJvbWEpIHtcbiAgICAgIGNhc2UgNDIwOlxuICAgICAgICByZXR1cm4gJzQ6MjowJ1xuICAgICAgY2FzZSA0MjI6XG4gICAgICAgIHJldHVybiAnNDoyOjInXG4gICAgICBjYXNlIDQ0NDpcbiAgICAgICAgcmV0dXJuICc0OjQ6NCdcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnVW5rbm93bidcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgdG9WaWRlb01ldGEgKHNwc0NvbmZpZykge1xuICAgIGxldCBtZXRhID0ge31cbiAgICBpZiAoc3BzQ29uZmlnICYmIHNwc0NvbmZpZy5jb2RlY19zaXplKSB7XG4gICAgICBtZXRhLmNvZGVjV2lkdGggPSBzcHNDb25maWcuY29kZWNfc2l6ZS53aWR0aFxuICAgICAgbWV0YS5jb2RlY0hlaWdodCA9IHNwc0NvbmZpZy5jb2RlY19zaXplLmhlaWdodFxuICAgICAgbWV0YS5wcmVzZW50V2lkdGggPSBzcHNDb25maWcucHJlc2VudF9zaXplLndpZHRoXG4gICAgICBtZXRhLnByZXNlbnRIZWlnaHQgPSBzcHNDb25maWcucHJlc2VudF9zaXplLmhlaWdodFxuICAgIH1cblxuICAgIG1ldGEucHJvZmlsZSA9IHNwc0NvbmZpZy5wcm9maWxlX3N0cmluZ1xuICAgIG1ldGEubGV2ZWwgPSBzcHNDb25maWcubGV2ZWxfc3RyaW5nXG4gICAgbWV0YS5iaXREZXB0aCA9IHNwc0NvbmZpZy5iaXRfZGVwdGhcbiAgICBtZXRhLmNocm9tYUZvcm1hdCA9IHNwc0NvbmZpZy5jaHJvbWFfZm9ybWF0XG5cbiAgICBtZXRhLnBhclJhdGlvID0ge1xuICAgICAgd2lkdGg6IHNwc0NvbmZpZy5wYXJfcmF0aW8ud2lkdGgsXG4gICAgICBoZWlnaHQ6IHNwc0NvbmZpZy5wYXJfcmF0aW8uaGVpZ2h0XG4gICAgfVxuXG4gICAgbWV0YS5mcmFtZVJhdGUgPSBzcHNDb25maWcuZnJhbWVfcmF0ZVxuXG4gICAgbGV0IGZwc0RlbiA9IG1ldGEuZnJhbWVSYXRlLmZwc19kZW5cbiAgICBsZXQgZnBzTnVtID0gbWV0YS5mcmFtZVJhdGUuZnBzX251bVxuICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKG1ldGEudGltZXNjYWxlICogKGZwc0RlbiAvIGZwc051bSkpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU1BTUGFyc2VyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gSExTXG4gIE0zVThQYXJzZXI6IHJlcXVpcmUoJy4vc3JjL2hscy9kZW11eGVyL20zdThwYXJzZXInKS5kZWZhdWx0LFxuICBUc0RlbXV4ZXI6IHJlcXVpcmUoJy4vc3JjL2hscy9kZW11eGVyL3RzJykuZGVmYXVsdCxcbiAgUGxheWxpc3Q6IHJlcXVpcmUoJy4vc3JjL2hscy9wbGF5bGlzdCcpLmRlZmF1bHQsXG4gIEZsdkRlbXV4ZXI6IHJlcXVpcmUoJy4vc3JjL2Zsdi9pbmRleCcpLmRlZmF1bHRcbn07XG4iLCJpbXBvcnQgeyBpc0xlLCBVVEY4IH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnXG5cbmNvbnN0IERBVEFfVFlQRVMgPSB7XG4gIE5VTUJFUjogMCxcbiAgQk9PTEVBTjogMSxcbiAgU1RSSU5HOiAyLFxuICBPQkpFQ1Q6IDMsXG4gIE1JWF9BUlJBWTogOCxcbiAgT0JKRUNUX0VORDogOSxcbiAgU1RSSUNUX0FSUkFZOiAxMCxcbiAgREFURTogMTEsXG4gIExPTkVfU1RSSU5HOiAxMlxufVxuXG4vKipcbiAqIG1ldGHkv6Hmga/op6PmnpBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQU1GUGFyc2VyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgIHRoaXMucmVhZE9mZnNldCA9IHRoaXMub2Zmc2V0XG4gIH1cblxuICByZXNvbHZlIChtZXRhLCBzaXplKSB7XG4gICAgaWYgKHNpemUgPCAzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBlbm91Z2ggZGF0YSBmb3IgbWV0YWluZm8nKVxuICAgIH1cbiAgICBjb25zdCBtZXRhRGF0YSA9IHt9XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VWYWx1ZShtZXRhKVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKG1ldGEsIHNpemUgLSBuYW1lLmJvZHlTaXplKVxuICAgIG1ldGFEYXRhW25hbWUuZGF0YV0gPSB2YWx1ZS5kYXRhXG5cbiAgICB0aGlzLnJlc2V0U3RhdHVzKClcbiAgICByZXR1cm4gbWV0YURhdGFcbiAgfVxuXG4gIHJlc2V0U3RhdHVzICgpIHtcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLnJlYWRPZmZzZXQgPSB0aGlzLm9mZnNldFxuICB9XG5cbiAgcGFyc2VTdHJpbmcgKGJ1ZmZlcikge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0KVxuICAgIGNvbnN0IHN0ckxlbiA9IGR2LmdldFVpbnQxNigwLCAhaXNMZSlcbiAgICBsZXQgc3RyID0gJydcbiAgICBpZiAoc3RyTGVuID4gMCkge1xuICAgICAgc3RyID0gVVRGOC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQgKyAyLCBzdHJMZW4pKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSAnJ1xuICAgIH1cbiAgICBsZXQgc2l6ZSA9IHN0ckxlbiArIDJcbiAgICB0aGlzLnJlYWRPZmZzZXQgKz0gc2l6ZVxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBzdHIsXG4gICAgICBib2R5U2l6ZTogc3RyTGVuICsgMlxuICAgIH1cbiAgfVxuXG4gIHBhcnNlRGF0ZSAoYnVmZmVyLCBzaXplKSB7XG4gICAgY29uc3QgZHYgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQsIHNpemUpXG4gICAgbGV0IHRzID0gZHYuZ2V0RmxvYXQ2NCgwLCAhaXNMZSlcbiAgICBjb25zdCB0aW1lT2Zmc2V0ID0gZHYuZ2V0SW50MTYoOCwgIWlzTGUpXG4gICAgdHMgKz0gdGltZU9mZnNldCAqIDYwICogMTAwMFxuXG4gICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDEwXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IG5ldyBEYXRlKHRzKSxcbiAgICAgIGJvZHlTaXplOiAxMFxuICAgIH1cbiAgfVxuXG4gIHBhcnNlT2JqZWN0IChidWZmZXIsIHNpemUpIHtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5wYXJzZVN0cmluZyhidWZmZXIsIHNpemUpXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBzaXplIC0gbmFtZS5ib2R5U2l6ZSlcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YToge1xuICAgICAgICBuYW1lOiBuYW1lLmRhdGEsXG4gICAgICAgIHZhbHVlOiB2YWx1ZS5kYXRhXG4gICAgICB9LFxuICAgICAgYm9keVNpemU6IG5hbWUuYm9keVNpemUgKyB2YWx1ZS5ib2R5U2l6ZSxcbiAgICAgIGlzT2JqRW5kOiB2YWx1ZS5pc09iakVuZFxuICAgIH1cbiAgfVxuXG4gIHBhcnNlTG9uZ1N0cmluZyAoYnVmZmVyKSB7XG4gICAgY29uc3QgZHYgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQpXG4gICAgY29uc3Qgc3RyTGVuID0gZHYuZ2V0VWludDMyKDAsICFpc0xlKVxuICAgIGxldCBzdHIgPSAnJ1xuICAgIGlmIChzdHJMZW4gPiAwKSB7XG4gICAgICBzdHIgPSBVVEY4LmRlY29kZShuZXcgVWludDhBcnJheShidWZmZXIsIHRoaXMucmVhZE9mZnNldCArIDIsIHN0ckxlbikpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9ICcnXG4gICAgfVxuICAgIC8vIGNvbnN0IHNpemUgPSBzdHJMZW4gKyA0O1xuICAgIHRoaXMucmVhZE9mZnNldCArPSBzdHJMZW4gKyA0XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHN0cixcbiAgICAgIGJvZHlTaXplOiBzdHJMZW4gKyA0XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOino+aekG1ldGHkuK3nmoTlj5jph49cbiAgICovXG4gIHBhcnNlVmFsdWUgKGRhdGEsIHNpemUpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKClcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICBidWZmZXIgPSBkYXRhXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciA9IGRhdGEuYnVmZmVyXG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIE5VTUJFUixcbiAgICAgIEJPT0xFQU4sXG4gICAgICBTVFJJTkcsXG4gICAgICBPQkpFQ1QsXG4gICAgICBNSVhfQVJSQVksXG4gICAgICBPQkpFQ1RfRU5ELFxuICAgICAgU1RSSUNUX0FSUkFZLFxuICAgICAgREFURSxcbiAgICAgIExPTkVfU1RSSU5HXG4gICAgfSA9IERBVEFfVFlQRVNcbiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIsIHRoaXMucmVhZE9mZnNldCwgc2l6ZSlcbiAgICBsZXQgaXNPYmpFbmQgPSBmYWxzZVxuICAgIGNvbnN0IHR5cGUgPSBkYXRhVmlldy5nZXRVaW50OCgwKVxuICAgIGxldCBvZmZzZXQgPSAxXG4gICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDFcbiAgICBsZXQgdmFsdWUgPSBudWxsXG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgTlVNQkVSOiB7XG4gICAgICAgIHZhbHVlID0gZGF0YVZpZXcuZ2V0RmxvYXQ2NCgxLCAhaXNMZSlcbiAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDhcbiAgICAgICAgb2Zmc2V0ICs9IDhcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgQk9PTEVBTjoge1xuICAgICAgICBjb25zdCBib29sTnVtID0gZGF0YVZpZXcuZ2V0VWludDgoMSlcbiAgICAgICAgdmFsdWUgPSAhIWJvb2xOdW1cbiAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDFcbiAgICAgICAgb2Zmc2V0ICs9IDFcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgU1RSSU5HOiB7XG4gICAgICAgIGNvbnN0IHN0ciA9IHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyKVxuICAgICAgICB2YWx1ZSA9IHN0ci5kYXRhXG4gICAgICAgIG9mZnNldCArPSBzdHIuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgT0JKRUNUOiB7XG4gICAgICAgIHZhbHVlID0ge31cbiAgICAgICAgbGV0IG9iakVuZFNpemUgPSAwXG4gICAgICAgIGlmIChkYXRhVmlldy5nZXRVaW50MzIoc2l6ZSAtIDQsICFpc0xlKSAmIDB4MDBGRkZGRkYpIHtcbiAgICAgICAgICBvYmpFbmRTaXplID0gM1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMucmVhZE9mZnNldCArPSBvZmZzZXQgLSAxO1xuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgc2l6ZSAtIDQpIHtcbiAgICAgICAgICBjb25zdCBhbWZPYmogPSB0aGlzLnBhcnNlT2JqZWN0KGJ1ZmZlciwgc2l6ZSAtIG9mZnNldCAtIG9iakVuZFNpemUpXG4gICAgICAgICAgaWYgKGFtZk9iai5pc09iamVjdEVuZCkgeyBicmVhayB9XG4gICAgICAgICAgdmFsdWVbYW1mT2JqLmRhdGEubmFtZV0gPSBhbWZPYmouZGF0YS52YWx1ZVxuICAgICAgICAgIG9mZnNldCArPSBhbWZPYmouYm9keVNpemVcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0IDw9IHNpemUgLSAzKSB7XG4gICAgICAgICAgY29uc3QgbWFyayA9IGRhdGFWaWV3LmdldFVpbnQzMihvZmZzZXQgLSAxLCAhaXNMZSkgJiAweDAwRkZGRkZGXG4gICAgICAgICAgaWYgKG1hcmsgPT09IDkpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZE9mZnNldCArPSAzXG4gICAgICAgICAgICBvZmZzZXQgKz0gM1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSBNSVhfQVJSQVk6IHtcbiAgICAgICAgdmFsdWUgPSB7fVxuICAgICAgICBvZmZzZXQgKz0gNFxuICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gNFxuICAgICAgICBsZXQgb2JqRW5kU2l6ZSA9IDBcbiAgICAgICAgaWYgKChkYXRhVmlldy5nZXRVaW50MzIoc2l6ZSAtIDQsICFpc0xlKSAmIDB4MDBGRkZGRkYpID09PSA5KSB7XG4gICAgICAgICAgb2JqRW5kU2l6ZSA9IDNcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCBzaXplIC0gOCkge1xuICAgICAgICAgIGNvbnN0IGFtZlZhciA9IHRoaXMucGFyc2VPYmplY3QoYnVmZmVyLCBzaXplIC0gb2Zmc2V0IC0gb2JqRW5kU2l6ZSlcbiAgICAgICAgICBpZiAoYW1mVmFyLmlzT2JqZWN0RW5kKSB7IGJyZWFrIH1cbiAgICAgICAgICB2YWx1ZVthbWZWYXIuZGF0YS5uYW1lXSA9IGFtZlZhci5kYXRhLnZhbHVlXG4gICAgICAgICAgb2Zmc2V0ICs9IGFtZlZhci5ib2R5U2l6ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgPD0gc2l6ZSAtIDMpIHtcbiAgICAgICAgICBjb25zdCBtYXJrZXIgPSBkYXRhVmlldy5nZXRVaW50MzIob2Zmc2V0IC0gMSwgIWlzTGUpICYgMHgwMEZGRkZGRlxuICAgICAgICAgIGlmIChtYXJrZXIgPT09IDkpIHtcbiAgICAgICAgICAgIG9mZnNldCArPSAzXG4gICAgICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gM1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlIE9CSkVDVF9FTkQ6IHtcbiAgICAgICAgdmFsdWUgPSBudWxsXG4gICAgICAgIGlzT2JqRW5kID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlIFNUUklDVF9BUlJBWToge1xuICAgICAgICB2YWx1ZSA9IFtdXG4gICAgICAgIGNvbnN0IGFyckxlbmd0aCA9IGRhdGFWaWV3LmdldFVpbnQzMigxLCAhaXNMZSlcbiAgICAgICAgb2Zmc2V0ICs9IDRcbiAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHNjcmlwdCA9IHRoaXMucGFyc2VWYWx1ZShidWZmZXIsIHNpemUgLSBvZmZzZXQpXG4gICAgICAgICAgdmFsdWUucHVzaChzY3JpcHQuZGF0YSlcbiAgICAgICAgICBvZmZzZXQgKz0gc2NyaXB0LmJvZHlTaXplXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBEQVRFOiB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSB0aGlzLnBhcnNlRGF0ZShidWZmZXIsIHNpemUgLSAxKVxuICAgICAgICB2YWx1ZSA9IGRhdGUuZGF0YVxuICAgICAgICBvZmZzZXQgKz0gZGF0ZS5ib2R5U2l6ZVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlIExPTkVfU1RSSU5HOiB7XG4gICAgICAgIGNvbnN0IGxvbmdTdHIgPSB0aGlzLnBhcnNlTG9uZ1N0cmluZyhidWZmZXIsIHNpemUgLSAxKVxuICAgICAgICB2YWx1ZSA9IGxvbmdTdHIuZGF0YVxuICAgICAgICBvZmZzZXQgKz0gbG9uZ1N0ci5ib2R5U2l6ZVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIG9mZnNldCA9IHNpemVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogdmFsdWUsXG4gICAgICBib2R5U2l6ZTogb2Zmc2V0LFxuICAgICAgaXNPYmpFbmQ6IGlzT2JqRW5kXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBFVkVOVFMsIEF1ZGlvVHJhY2tNZXRhLCBWaWRlb1RyYWNrTWV0YSB9IGZyb20gJ3hncGxheWVyLXV0aWxzJztcbmltcG9ydCB7IFNwc1BhcnNlciB9IGZyb20gJ3hncGxheWVyLWNvZGVjJztcbmltcG9ydCB7IFZpZGVvVHJhY2ssIEF1ZGlvVHJhY2sgfSBmcm9tICd4Z3BsYXllci1idWZmZXInXG5cbmltcG9ydCBBTUZQYXJzZXIgZnJvbSAnLi9hbWYtcGFyc2VyJ1xuXG5jb25zdCBERU1VWF9FVkVOVFMgPSBFVkVOVFMuREVNVVhfRVZFTlRTO1xuXG5jbGFzcyBGbHZEZW11eGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuX2ZpcnN0RnJhZ21lbnRMb2FkZWQgPSBmYWxzZVxuICAgIHRoaXMuX3RyYWNrTnVtID0gMFxuICAgIHRoaXMuX2hhc1NjcmlwdCA9IGZhbHNlXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5ERU1VWF9TVEFSVCwgdGhpcy5kb1BhcnNlRmx2LmJpbmQodGhpcykpXG4gIH1cblxuICAvKipcbiAgICogaWYgdGhlIGZsdiBoZWFkIGlzIHZhbGlkXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRmx2RmlsZSAoZGF0YSkge1xuICAgIHJldHVybiAhKGRhdGFbMF0gIT09IDB4NDYgfHwgZGF0YVsxXSAhPT0gMHg0QyB8fCBkYXRhWzJdICE9PSAweDU2IHx8IGRhdGFbM10gIT09IDB4MDEpXG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlIHN0cmVhbSBoYXMgYXVkaW8gb3IgdmlkZW8uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdHJlYW1GbGFnIC0gRGF0YSBmcm9tIHRoZSBzdHJlYW0gd2hpY2ggaXMgZGVmaW5lIHdoZXRoZXIgdGhlIGF1ZGlvIC8gdmlkZW8gdHJhY2sgaXMgZXhpc3QuXG4gICAqL1xuICBzdGF0aWMgZ2V0UGxheVR5cGUgKHN0cmVhbUZsYWcpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICBoYXNWaWRlbzogZmFsc2UsXG4gICAgICBoYXNBdWRpbzogZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoc3RyZWFtRmxhZyAmIDB4MDEgPiAwKSB7XG4gICAgICByZXN1bHQuaGFzVmlkZW8gPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHN0cmVhbUZsYWcgJiAweDA0ID4gMCkge1xuICAgICAgcmVzdWx0Lmhhc0F1ZGlvID0gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGRvUGFyc2VGbHYgKCkge1xuICAgIGlmICghdGhpcy5fZmlyc3RGcmFnbWVudExvYWRlZCkge1xuICAgICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA8IDEzKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY29uc3QgaGVhZGVyID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMTMpXG4gICAgICB0aGlzLnBhcnNlRmx2SGVhZGVyKGhlYWRlcilcbiAgICAgIHRoaXMuZG9QYXJzZUZsdigpIC8vIOmAkuW9kuiwg+eUqO+8jOe7p+e7reino+aekGZsdua1gVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoIDwgMTEpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBsZXQgY2h1bms7XG4gICAgICBkbyB7XG4gICAgICAgIGNodW5rID0gdGhpcy5fcGFyc2VGbHZUYWcoKVxuICAgICAgfSB3aGlsZSAoY2h1bmspXG5cbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgfVxuICB9XG5cbiAgcGFyc2VGbHZIZWFkZXIgKGhlYWRlcikge1xuICAgIGlmICghRmx2RGVtdXhlci5pc0ZsdkZpbGUoaGVhZGVyKSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKCdpbnZhbGlkIGZsdiBmaWxlJykpXG4gICAgICB0aGlzLmRvUGFyc2VGbHYoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkID0gdHJ1ZVxuICAgICAgY29uc3QgcGxheVR5cGUgPSBGbHZEZW11eGVyLmdldFBsYXlUeXBlKGhlYWRlcls0XSlcblxuICAgICAgaWYgKHBsYXlUeXBlLmhhc1ZpZGVvKSB7XG4gICAgICAgIHRoaXMuaW5pdFZpZGVvVHJhY2soKVxuICAgICAgfVxuXG4gICAgICBpZiAocGxheVR5cGUuaGFzQXVkaW8pIHtcbiAgICAgICAgdGhpcy5pbml0QXVkaW9UcmFjaygpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZG9QYXJzZUZsdigpXG4gIH1cblxuICAvKipcbiAgICogaW5pdCBkZWZhdWx0IHZpZGVvIHRyYWNrIGNvbmZpZ3NcbiAgICovXG4gIGluaXRWaWRlb1RyYWNrICgpIHtcbiAgICB0aGlzLl90cmFja051bSsrXG4gICAgbGV0IHZpZGVvVHJhY2sgPSBuZXcgVmlkZW9UcmFjaygpXG4gICAgdmlkZW9UcmFjay5tZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKClcbiAgICB2aWRlb1RyYWNrLmlkID0gdmlkZW9UcmFjay5tZXRhLmlkID0gdGhpcy5fdHJhY2tOdW1cblxuICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2sgPSB2aWRlb1RyYWNrXG4gIH1cblxuICAvKipcbiAgICogaW5pdCBkZWZhdWx0IGF1ZGlvIHRyYWNrIGNvbmZpZ3NcbiAgICovXG4gIGluaXRBdWRpb1RyYWNrICgpIHtcbiAgICB0aGlzLl90cmFja051bSsrXG4gICAgbGV0IGF1ZGlvVHJhY2sgPSBuZXcgQXVkaW9UcmFjaygpXG4gICAgYXVkaW9UcmFjay5tZXRhID0gbmV3IEF1ZGlvVHJhY2tNZXRhKClcbiAgICBhdWRpb1RyYWNrLmlkID0gYXVkaW9UcmFjay5tZXRhLmlkID0gdGhpcy5fdHJhY2tOdW1cblxuICAgIHRoaXMudHJhY2tzLmF1ZGlvVHJhY2sgPSBhdWRpb1RyYWNrXG4gIH1cblxuICAvKipcbiAgICogUGFja2FnZSB0aGUgZGF0YSBhcyB0aGUgZm9sbG93aW5nIGRhdGEgc3RydWN0dXJlXG4gICAqIHtcbiAgICogICAgZGF0YTogVWludDhBcnJheS4gdGhlIFN0cmVhbSBkYXRhLlxuICAgKiAgICBpbmZvOiBUaGUgZmlyc3QgYnl0ZSBpbmZvIG9mIHRoZSBUYWcuXG4gICAqICAgIHRhZ1R5cGU6IDjjgIE544CBMThcbiAgICogICAgdGltZVN0YW1wOiB0aGUgdGltZXN0ZW1wXG4gICAqIH1cbiAgICovXG4gIF9wYXJzZUZsdlRhZyAoKSB7XG4gICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA8IDExKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBsZXQgY2h1bmsgPSB0aGlzLl9wYXJzZUZsdlRhZ0hlYWRlcigpXG4gICAgaWYgKGNodW5rKSB7XG4gICAgICB0aGlzLl9wcm9jZXNzQ2h1bmsoY2h1bmspXG4gICAgfVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSAxMSBieXRlIHRhZyBIZWFkZXJcbiAgICovXG4gIF9wYXJzZUZsdlRhZ0hlYWRlciAoKSB7XG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICBsZXQgY2h1bmsgPSB7fVxuXG4gICAgbGV0IHRhZ1R5cGUgPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludChvZmZzZXQsIDEpXG4gICAgb2Zmc2V0ICs9IDFcblxuICAgIC8vIDIgYml0IEZNUyByZXNlcnZlZCwgMSBiaXQgZmlsdGVyZWQsIDUgYml0IHRhZyB0eXBlXG4gICAgY2h1bmsuZmlsdGVyZWQgPSAodGFnVHlwZSAmIDMyKSA+Pj4gNVxuICAgIGNodW5rLnRhZ1R5cGUgPSB0YWdUeXBlICYgMzFcblxuICAgIC8vIDMgQnl0ZSBkYXRhc2l6ZVxuICAgIGNodW5rLmRhdGFzaXplID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQob2Zmc2V0LCAzKVxuICAgIG9mZnNldCArPSAzXG5cbiAgICBpZiAoKGNodW5rLnRhZ1R5cGUgIT09IDggJiYgY2h1bmsudGFnVHlwZSAhPT0gOSAmJiBjaHVuay50YWdUeXBlICE9PSAxMSAmJiBjaHVuay50YWdUeXBlICE9PSAxOCkgfHxcbiAgICAgIHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDgsIDMpICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIgJiYgdGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVxuICAgICAgfVxuICAgICAgdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgJ3RhZ1R5cGUgJyArIGNodW5rLnRhZ1R5cGUpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPCBjaHVuay5kYXRhc2l6ZSArIDE1KSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIHJlYWQgdGhlIGRhdGEuXG4gICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoNClcblxuICAgIC8vIDMgQnl0ZSB0aW1lc3RhbXBcbiAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwgMylcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuXG4gICAgLy8gMSBCeXRlIHRpbWVzdGFtcEV4dFxuICAgIGxldCB0aW1lc3RhbXBFeHQgPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXVxuICAgIGlmICh0aW1lc3RhbXBFeHQgPiAwKSB7XG4gICAgICB0aW1lc3RhbXAgKz0gdGltZXN0YW1wRXh0ICogMHgxMDAwMDAwXG4gICAgfVxuXG4gICAgY2h1bmsuZHRzID0gdGltZXN0YW1wXG5cbiAgICAvLyBzdHJlYW1JZFxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDMpXG4gICAgcmV0dXJuIGNodW5rXG4gIH1cblxuICBfcHJvY2Vzc0NodW5rIChjaHVuaykge1xuICAgIHN3aXRjaCAoY2h1bmsudGFnVHlwZSkge1xuICAgICAgY2FzZSAxODpcbiAgICAgICAgdGhpcy5fcGFyc2VTY3JpcHREYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSA4OlxuICAgICAgICB0aGlzLl9wYXJzZUFBQ0RhdGEoY2h1bmspXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDk6XG4gICAgICAgIHRoaXMuX3BhcnNlSGV2Y0RhdGEoY2h1bmspXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDExOlxuICAgICAgICAvLyBmb3Igc29tZSBDRE4gdGhhdCBkaWQgbm90IHByb2Nlc3MgdGhlIGN1cnJlY3QgUlRNUCBtZXNzYWdlc1xuICAgICAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgZmx2IHNjcmlwdCBkYXRhXG4gICAqIEBwYXJhbSBjaHVua1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhcnNlU2NyaXB0RGF0YSAoY2h1bmspIHtcbiAgICBsZXQgYXVkaW9UcmFjayA9IHRoaXMudHJhY2tzLmF1ZGlvVHJhY2tcbiAgICBsZXQgdmlkZW9UcmFjayA9IHRoaXMudHJhY2tzLnZpZGVvVHJhY2tcblxuICAgIGxldCBkYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUpXG5cbiAgICBjb25zdCBpbmZvID0gbmV3IEFNRlBhcnNlcigpLnJlc29sdmUoZGF0YSwgZGF0YS5sZW5ndGgpXG5cbiAgICBjb25zdCBvbk1ldGFEYXRhID0gdGhpcy5fY29udGV4dC5vbk1ldGFEYXRhID0gaW5mbyA/IGluZm8ub25NZXRhRGF0YSA6IHVuZGVmaW5lZFxuXG4gICAgLy8gZmlsbCBtZWRpYUluZm9cbiAgICB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5kdXJhdGlvbiA9IG9uTWV0YURhdGEuZHVyYXRpb25cbiAgICB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5oYXNWaWRlbyA9IG9uTWV0YURhdGEuaGFzVmlkZW9cbiAgICB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5oc2FBdWRpbyA9IG9uTWV0YURhdGEuaGFzQXVkaW9cblxuICAgIGxldCB2YWxpZGF0ZSA9IHRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKVxuICAgIGlmICh2YWxpZGF0ZSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRURJQV9JTkZPKVxuICAgICAgdGhpcy5faGFzU2NyaXB0ID0gdHJ1ZVxuICAgIH1cblxuICAgIC8vIEVkaXQgZGVmYXVsdCBtZXRhLlxuICAgIGlmIChhdWRpb1RyYWNrICYmICFhdWRpb1RyYWNrLmhhc1NwZWNpZmljQ29uZmlnKSB7XG4gICAgICBsZXQgbWV0YSA9IGF1ZGlvVHJhY2subWV0YVxuICAgICAgaWYgKG9uTWV0YURhdGEuYXVkaW9zYW1wbGVyYXRlKSB7XG4gICAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IG9uTWV0YURhdGEuYXVkaW9zYW1wbGVyYXRlXG4gICAgICB9XG5cbiAgICAgIGlmIChvbk1ldGFEYXRhLmF1ZGlvY2hhbm5lbHMpIHtcbiAgICAgICAgbWV0YS5jaGFubmVsQ291bnQgPSBvbk1ldGFEYXRhLmF1ZGlvY2hhbm5lbHNcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZSkge1xuICAgICAgICBjYXNlIDQ0MTAwOlxuICAgICAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gNFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjIwNTA6XG4gICAgICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSA3XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxMTAyNTpcbiAgICAgICAgICBtZXRhLnNhbXBsZVJhdGVJbmRleCA9IDEwXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZpZGVvVHJhY2sgJiYgIXZpZGVvVHJhY2suaGFzU3BlY2lmaWNDb25maWcpIHtcbiAgICAgIGxldCBtZXRhID0gdmlkZW9UcmFjay5tZXRhXG4gICAgICBpZiAodHlwZW9mIG9uTWV0YURhdGEuZnJhbWVyYXRlID09PSAnbnVtYmVyJykge1xuICAgICAgICBsZXQgZnBzTnVtID0gTWF0aC5mbG9vcihvbk1ldGFEYXRhLmZyYW1lcmF0ZSAqIDEwMDApXG4gICAgICAgIGlmIChmcHNOdW0gPiAwKSB7XG4gICAgICAgICAgbGV0IGZwcyA9IGZwc051bSAvIDEwMDBcbiAgICAgICAgICBpZiAoIW1ldGEuZnJhbWVSYXRlKSB7XG4gICAgICAgICAgICBtZXRhLmZyYW1lUmF0ZSA9IHt9XG4gICAgICAgICAgfVxuICAgICAgICAgIG1ldGEuZnJhbWVSYXRlLmZpeGVkID0gdHJ1ZVxuICAgICAgICAgIG1ldGEuZnJhbWVSYXRlLmZwcyA9IGZwc1xuICAgICAgICAgIG1ldGEuZnJhbWVSYXRlLmZwc19udW0gPSBmcHNOdW1cbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHNfZGVuID0gMTAwMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2FhY1NlcXVlbmNlSGVhZGVyUGFyc2VyIChkYXRhKSB7XG4gICAgbGV0IHJldCA9IHt9XG4gICAgcmV0Lmhhc1NwZWNpZmljQ29uZmlnID0gdHJ1ZVxuICAgIHJldC5vYmplY3RUeXBlID0gZGF0YVsxXSA+Pj4gM1xuICAgIHJldC5zYW1wbGVSYXRlSW5kZXggPSAoKGRhdGFbMV0gJiA3KSA8PCAxKSB8IChkYXRhWzJdID4+PiA3KVxuICAgIHJldC5hdWRpb3NhbXBsZXJhdGUgPSB0aGlzLl9zd2l0Y2hBdWRpb1NhbXBsZVJhdGUocmV0LnNhbXBsZVJhdGVJbmRleClcbiAgICByZXQuY2hhbm5lbENvdW50ID0gKGRhdGFbMl0gJiAxMjApID4+PiAzXG4gICAgcmV0LmZyYW1lTGVuZ3RoID0gKGRhdGFbMl0gJiA0KSA+Pj4gMlxuICAgIHJldC5kZXBlbmRzT25Db3JlQ29kZXIgPSAoZGF0YVsyXSAmIDIpID4+PiAxXG4gICAgcmV0LmV4dGVuc2lvbkZsYWdJbmRleCA9IGRhdGFbMl0gJiAxXG5cbiAgICByZXQuY29kZWMgPSBgbXA0YS40MC4ke3JldC5vYmplY3RUeXBlfWBcbiAgICBsZXQgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBsZXQgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleDtcblxuICAgIGxldCBjb25maWc7XG4gICAgbGV0IHNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4O1xuXG4gICAgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdmaXJlZm94JykgIT09IC0xKSB7XG4gICAgICAvLyBmaXJlZm94OiB1c2UgU0JSIChIRS1BQUMpIGlmIGZyZXEgbGVzcyB0aGFuIDI0a0h6XG4gICAgICBpZiAocmV0LnNhbXBsZVJhdGVJbmRleCA+PSA2KSB7XG4gICAgICAgIHJldC5vYmplY3RUeXBlID0gNTtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdJbmRleCAtIDM7XG4gICAgICB9IGVsc2UgeyAvLyB1c2UgTEMtQUFDXG4gICAgICAgIHJldC5vYmplY3RUeXBlID0gMjtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdJbmRleDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5pbmRleE9mKCdhbmRyb2lkJykgIT09IC0xKSB7XG4gICAgICAvLyBhbmRyb2lkOiBhbHdheXMgdXNlIExDLUFBQ1xuICAgICAgcmV0Lm9iamVjdFR5cGUgPSAyO1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBvdGhlciBicm93c2VycywgZS5nLiBjaHJvbWUuLi5cbiAgICAgIC8vIEFsd2F5cyB1c2UgSEUtQUFDIHRvIG1ha2UgaXQgZWFzaWVyIHRvIHN3aXRjaCBhYWMgY29kZWMgcHJvZmlsZVxuICAgICAgcmV0Lm9iamVjdFR5cGUgPSA1O1xuICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXg7XG4gICAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7XG5cbiAgICAgIGlmIChyZXQuc2FtcGxlUmF0ZUluZGV4ID49IDYpIHtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIGlmIChyZXQuY2hhbm5lbENvdW50ID09PSAxKSB7IC8vIE1vbm8gY2hhbm5lbFxuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDI7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHJldC5zYW1wbGVSYXRlSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uZmlnWzBdID0gcmV0Lm9iamVjdFR5cGUgPDwgMztcbiAgICBjb25maWdbMF0gfD0gKHJldC5zYW1wbGVSYXRlSW5kZXggJiAweDBGKSA+Pj4gMTtcbiAgICBjb25maWdbMV0gPSAocmV0LnNhbXBsZVJhdGVJbmRleCAmIDB4MEYpIDw8IDc7XG4gICAgY29uZmlnWzFdIHw9IChyZXQuY2hhbm5lbENvdW50ICYgMHgwRikgPDwgMztcbiAgICBpZiAocmV0Lm9iamVjdFR5cGUgPT09IDUpIHtcbiAgICAgIGNvbmZpZ1sxXSB8PSAoKGV4dGVuc2lvblNhbXBsaW5nSW5kZXggJiAweDBGKSA+Pj4gMSk7XG4gICAgICBjb25maWdbMl0gPSAoZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCAmIDB4MDEpIDw8IDc7XG4gICAgICAvLyBleHRlbmRlZCBhdWRpbyBvYmplY3QgdHlwZTogZm9yY2UgdG8gMiAoTEMtQUFDKVxuICAgICAgY29uZmlnWzJdIHw9ICgyIDw8IDIpO1xuICAgICAgY29uZmlnWzNdID0gMDtcbiAgICB9XG4gICAgcmV0LmNvbmZpZyA9IGNvbmZpZ1xuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIF9wYXJzZUFBQ0RhdGEgKGNodW5rKSB7XG4gICAgbGV0IHRyYWNrID0gdGhpcy50cmFja3MuYXVkaW9UcmFja1xuICAgIGlmICghdHJhY2spIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBtZXRhID0gdHJhY2subWV0YVxuXG4gICAgaWYgKCFtZXRhKSB7XG4gICAgICBtZXRhID0gbmV3IEF1ZGlvVHJhY2tNZXRhKClcbiAgICB9XG5cbiAgICBsZXQgaW5mbyA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdXG5cbiAgICBjaHVuay5kYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSAxKVxuXG4gICAgbGV0IGZvcm1hdCA9IChpbmZvICYgMjQwKSA+Pj4gNFxuXG4gICAgdHJhY2suZm9ybWF0ID0gZm9ybWF0XG5cbiAgICBpZiAoZm9ybWF0ICE9PSAxMCkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKGBpbnZhbGlkIGF1ZGlvIGZvcm1hdDogJHtmb3JtYXR9YCkpXG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdCA9PT0gMTAgJiYgIXRoaXMuX2hhc0F1ZGlvU2VxdWVuY2UpIHtcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IHRoaXMuX3N3aXRjaEF1ZGlvU2FtcGxpbmdGcmVxdWVuY3koaW5mbylcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gKGluZm8gJiAxMikgPj4+IDJcbiAgICAgIG1ldGEuZnJhbWVMZW50aCA9IChpbmZvICYgMikgPj4+IDFcbiAgICAgIG1ldGEuY2hhbm5lbENvdW50ID0gaW5mbyAmIDFcbiAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKDEwMjQgLyBtZXRhLmF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKVxuICAgIH1cblxuICAgIGxldCBhdWRpb1NhbXBsZVJhdGUgPSBtZXRhLmF1ZGlvU2FtcGxlUmF0ZVxuICAgIGxldCBhdWRpb1NhbXBsZVJhdGVJbmRleCA9IG1ldGEuc2FtcGxlUmF0ZUluZGV4XG4gICAgbGV0IHJlZlNhbXBsZUR1cmF0aW9uID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgZGVsZXRlIGNodW5rLnRhZ1R5cGVcbiAgICBsZXQgdmFsaWRhdGUgPSB0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSlcblxuICAgIGlmIChjaHVuay5kYXRhWzBdID09PSAwKSB7IC8vIEFBQyBTZXF1ZW5jZSBIZWFkZXJcbiAgICAgIGxldCBhYWNIZWFkZXIgPSB0aGlzLl9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlcihjaHVuay5kYXRhKVxuICAgICAgYXVkaW9TYW1wbGVSYXRlID0gYWFjSGVhZGVyLmF1ZGlvc2FtcGxlcmF0ZSB8fCBtZXRhLmF1ZGlvU2FtcGxlUmF0ZVxuICAgICAgYXVkaW9TYW1wbGVSYXRlSW5kZXggPSBhYWNIZWFkZXIuc2FtcGxlUmF0ZUluZGV4IHx8IG1ldGEuc2FtcGxlUmF0ZUluZGV4XG4gICAgICByZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IoMTAyNCAvIGF1ZGlvU2FtcGxlUmF0ZSAqIG1ldGEudGltZXNjYWxlKVxuXG4gICAgICBtZXRhLmNoYW5uZWxDb3VudCA9IGFhY0hlYWRlci5jaGFubmVsQ291bnRcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZSA9IGF1ZGlvU2FtcGxlUmF0ZVxuICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSBhdWRpb1NhbXBsZVJhdGVJbmRleFxuICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IHJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICBtZXRhLmR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gKiBtZXRhLnRpbWVzY2FsZVxuICAgICAgbWV0YS5jb25maWcgPSBhYWNIZWFkZXIuY29uZmlnXG4gICAgICBtZXRhLm9iamVjdFR5cGUgPSBhYWNIZWFkZXIub2JqZWN0VHlwZTtcblxuICAgICAgY29uc3QgYXVkaW9NZWRpYSA9IHRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmF1ZGlvXG5cbiAgICAgIC8vIGZpbGwgYXVkaW8gbWVkaWEgaW5mb1xuICAgICAgYXVkaW9NZWRpYS5jb2RlYyA9IGFhY0hlYWRlci5jb2RlY1xuICAgICAgYXVkaW9NZWRpYS5jaGFubmVsQ291bnQgPSBhYWNIZWFkZXIuY2hhbm5lbENvdW50XG4gICAgICBhdWRpb01lZGlhLnNhbXBsZVJhdGUgPSBhdWRpb1NhbXBsZVJhdGVcbiAgICAgIGF1ZGlvTWVkaWEuc2FtcGxlUmF0ZUluZGV4ID0gYWFjSGVhZGVyLmF1ZGlvU2FtcGxlUmF0ZUluZGV4XG5cbiAgICAgIGlmICh0aGlzLl9oYXNTY3JpcHQgJiYgIXRoaXMuX2hhc0F1ZGlvU2VxdWVuY2UpIHtcbiAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICdhdWRpbycpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2hhc1NjcmlwdCAmJiB0aGlzLl9oYXNBdWRpb1NlcXVlbmNlKSB7XG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuQVVESU9fTUVUQURBVEFfQ0hBTkdFKVxuICAgICAgfVxuICAgICAgO1xuICAgICAgdGhpcy5faGFzQXVkaW9TZXF1ZW5jZSA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgY2h1bmsuZGF0YSA9IGNodW5rLmRhdGEuc2xpY2UoMSwgY2h1bmsuZGF0YS5sZW5ndGgpXG4gICAgICB0cmFjay5zYW1wbGVzLnB1c2goY2h1bmspXG4gICAgfVxuICAgIGlmICghdmFsaWRhdGUpIHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdUQUcgbGVuZ3RoIGVycm9yIGF0ICcgKyBjaHVuay5kYXRhc2l6ZSlcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIGVycm9yLm1lc3NhZ2UpXG4gICAgICB0aGlzLmxvZ2dlci53YXJuKHRoaXMuVEFHLCBlcnJvci5tZXNzYWdlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBwYXJzZSBoZXZjL2F2YyB2aWRlbyBkYXRhXG4gICAqIEBwYXJhbSBjaHVua1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhcnNlSGV2Y0RhdGEgKGNodW5rKSB7XG4gICAgLy8gaGVhZGVyXG4gICAgbGV0IGluZm8gPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXVxuICAgIGNodW5rLmZyYW1lVHlwZSA9IChpbmZvICYgMHhmMCkgPj4+IDRcbiAgICBjaHVuay5pc0tleWZyYW1lID0gY2h1bmsuZnJhbWVUeXBlID09PSAxXG4gICAgLy8gbGV0IHRlbXBDb2RlY0lEID0gdGhpcy50cmFja3MudmlkZW9UcmFjay5jb2RlY0lEXG4gICAgbGV0IGNvZGVjSUQgPSBpbmZvICYgMHgwZlxuICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2suY29kZWNJRCA9IGNvZGVjSURcblxuICAgIC8vIGhldmPlkoxhdmPnmoRoZWFkZXLop6PmnpDmlrnlvI/kuIDmoLdcbiAgICBjaHVuay5hdmNQYWNrZXRUeXBlID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBjaHVuay5jdHMgPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludCgwLCAzKVxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDMpXG5cbiAgICAvLyAxMiBmb3IgaGV2YywgNyBmb3IgYXZjXG4gICAgaWYgKGNvZGVjSUQgPT09IDEyKSB7XG4gICAgICBjb25zdCBkYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSA1KVxuICAgICAgY2h1bmsuZGF0YSA9IGRhdGFcblxuICAgICAgaWYgKE51bWJlci5wYXJzZUludChjaHVuay5hdmNQYWNrZXRUeXBlKSAhPT0gMCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKSkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsIGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKVxuICAgICAgICB9XG4gICAgICAgIGxldCBuYWx1ID0ge31cbiAgICAgICAgbGV0IHIgPSAwXG4gICAgICAgIG5hbHUuY3RzID0gY2h1bmsuY3RzXG4gICAgICAgIG5hbHUuZHRzID0gY2h1bmsuZHRzXG4gICAgICAgIHdoaWxlIChjaHVuay5kYXRhLmxlbmd0aCA+IHIpIHtcbiAgICAgICAgICBsZXQgc2l6ZXMgPSBjaHVuay5kYXRhLnNsaWNlKE51bWJlci5wYXJzZUludChyKSwgNCArIHIpXG4gICAgICAgICAgbmFsdS5zaXplID0gc2l6ZXNbM11cbiAgICAgICAgICBuYWx1LnNpemUgKz0gc2l6ZXNbMl0gKiAyNTZcbiAgICAgICAgICBuYWx1LnNpemUgKz0gc2l6ZXNbMV0gKiAyNTYgKiAyNTZcbiAgICAgICAgICBuYWx1LnNpemUgKz0gc2l6ZXNbMF0gKiAyNTYgKiAyNTYgKiAyNTZcbiAgICAgICAgICByICs9IDRcbiAgICAgICAgICBuYWx1LmRhdGEgPSBjaHVuay5kYXRhLnNsaWNlKE51bWJlci5wYXJzZUludChyKSwgbmFsdS5zaXplICsgcilcbiAgICAgICAgICByICs9IG5hbHUuc2l6ZVxuICAgICAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2suc2FtcGxlcy5wdXNoKG5hbHUpXG4gICAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoTnVtYmVyLnBhcnNlSW50KGNodW5rLmF2Y1BhY2tldFR5cGUpID09PSAwKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoY2h1bmsuZGF0YXNpemUpKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2NodW5rLmRhdGFzaXplfWApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvZGVjSUQgPT09IDcpIHtcbiAgICAgIGxldCBkYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSA1KVxuICAgICAgaWYgKGRhdGFbNF0gPT09IDAgJiYgZGF0YVs1XSA9PT0gMCAmJiBkYXRhWzZdID09PSAwICYmIGRhdGFbN10gPT09IDEpIHtcbiAgICAgICAgbGV0IGF2Y2NsZW5ndGggPSAwXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgYXZjY2xlbmd0aCA9IGF2Y2NsZW5ndGggKiAyNTYgKyBkYXRhW2ldXG4gICAgICAgIH1cbiAgICAgICAgYXZjY2xlbmd0aCAtPSA0XG4gICAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKDQsIGRhdGEubGVuZ3RoKVxuICAgICAgICBkYXRhWzNdID0gYXZjY2xlbmd0aCAlIDI1NlxuICAgICAgICBhdmNjbGVuZ3RoID0gKGF2Y2NsZW5ndGggLSBkYXRhWzNdKSAvIDI1NlxuICAgICAgICBkYXRhWzJdID0gYXZjY2xlbmd0aCAlIDI1NlxuICAgICAgICBhdmNjbGVuZ3RoID0gKGF2Y2NsZW5ndGggLSBkYXRhWzJdKSAvIDI1NlxuICAgICAgICBkYXRhWzFdID0gYXZjY2xlbmd0aCAlIDI1NlxuICAgICAgICBkYXRhWzBdID0gKGF2Y2NsZW5ndGggLSBkYXRhWzFdKSAvIDI1NlxuICAgICAgfVxuXG4gICAgICBjaHVuay5kYXRhID0gZGF0YVxuICAgICAgLy8gSWYgaXQgaXMgQVZDIHNlcXVlY2UgSGVhZGVyLlxuICAgICAgaWYgKGNodW5rLmF2Y1BhY2tldFR5cGUgPT09IDApIHtcbiAgICAgICAgdGhpcy5fYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIoY2h1bmsuZGF0YSlcbiAgICAgICAgbGV0IHZhbGlkYXRlID0gdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoY2h1bmsuZGF0YXNpemUpXG4gICAgICAgIGlmICh2YWxpZGF0ZSkge1xuICAgICAgICAgIGlmICh0aGlzLl9oYXNTY3JpcHQgJiYgIXRoaXMuX2hhc1ZpZGVvU2VxdWVuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5faGFzU2NyaXB0ICYmIHRoaXMuX2hhc1ZpZGVvU2VxdWVuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuVklERU9fTUVUQURBVEFfQ0hBTkdFKVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9oYXNWaWRlb1NlcXVlbmNlID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKSkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsIGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChjaHVuaylcbiAgICAgICAgLy8gdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgYHZpZGVvIGNvZGVpZCBpcyAke2NvZGVjSUR9YClcbiAgICAgIGNodW5rLmRhdGEgPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdChjaHVuay5kYXRhc2l6ZSAtIDEpXG4gICAgICBpZiAoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKSkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKHRoaXMuVEFHLCBgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7Y2h1bmsuZGF0YXNpemV9YClcbiAgICAgIH1cbiAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2suc2FtcGxlcy5wdXNoKGNodW5rKVxuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSlcbiAgICB9XG4gICAgZGVsZXRlIGNodW5rLnRhZ1R5cGVcbiAgfVxuXG4gIC8qKlxuICAgKiBwYXJzZSBhdmMgbWV0YWRhdGFcbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hdmNTZXF1ZW5jZUhlYWRlclBhcnNlciAoZGF0YSkge1xuICAgIGxldCB0cmFjayA9IHRoaXMudHJhY2tzLnZpZGVvVHJhY2tcblxuICAgIGlmICghdHJhY2spIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBvZmZzZXQgPSAwXG5cbiAgICBpZiAoIXRyYWNrLm1ldGEpIHtcbiAgICAgIHRyYWNrLm1ldGEgPSBuZXcgVmlkZW9UcmFja01ldGEoKVxuICAgIH1cbiAgICBsZXQgbWV0YSA9IHRyYWNrLm1ldGFcblxuICAgIG1ldGEuY29uZmlndXJhdGlvblZlcnNpb24gPSBkYXRhWzBdXG4gICAgbWV0YS5hdmNQcm9maWxlSW5kaWNhdGlvbiA9IGRhdGFbMV1cbiAgICBtZXRhLnByb2ZpbGVDb21wYXRpYmlsaXR5ID0gZGF0YVsyXVxuICAgIG1ldGEuYXZjTGV2ZWxJbmRpY2F0aW9uID0gZGF0YVszXSAvIDEwXG4gICAgbWV0YS5uYWxVbml0TGVuZ3RoID0gKGRhdGFbNF0gJiAweDAzKSArIDFcblxuICAgIGxldCBudW1PZlNwcyA9IGRhdGFbNV0gJiAweDFmXG4gICAgb2Zmc2V0ID0gNlxuICAgIGxldCBjb25maWcgPSB7fVxuXG4gICAgLy8gcGFyc2UgU1BTXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PZlNwczsgaSsrKSB7XG4gICAgICBsZXQgc2l6ZSA9IGRhdGFbb2Zmc2V0XSAqIDI1NSArIGRhdGFbb2Zmc2V0ICsgMV1cbiAgICAgIG9mZnNldCArPSAyXG5cbiAgICAgIGxldCBzcHMgPSBuZXcgVWludDhBcnJheShzaXplKVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcbiAgICAgICAgc3BzW2pdID0gZGF0YVtvZmZzZXQgKyBqXVxuICAgICAgfVxuXG4gICAgICAvLyBjb2RlYyBzdHJpbmdcbiAgICAgIGxldCBjb2RlY1N0cmluZyA9ICdhdmMxLidcbiAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgNDsgaisrKSB7XG4gICAgICAgIGxldCBoID0gc3BzW2pdLnRvU3RyaW5nKDE2KVxuICAgICAgICBpZiAoaC5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgaCA9ICcwJyArIGhcbiAgICAgICAgfVxuICAgICAgICBjb2RlY1N0cmluZyArPSBoXG4gICAgICB9XG5cbiAgICAgIG1ldGEuY29kZWMgPSBjb2RlY1N0cmluZ1xuXG4gICAgICBvZmZzZXQgKz0gc2l6ZVxuICAgICAgdGhpcy50cmFja3MudmlkZW9UcmFjay5tZXRhLnNwcyA9IHNwc1xuICAgICAgY29uZmlnID0gU3BzUGFyc2VyLnBhcnNlU1BTKHNwcylcbiAgICB9XG5cbiAgICBsZXQgbnVtT2ZQcHMgPSBkYXRhW29mZnNldF1cblxuICAgIG9mZnNldCsrXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU9mUHBzOyBpKyspIHtcbiAgICAgIGxldCBzaXplID0gZGF0YVtvZmZzZXRdICogMjU1ICsgZGF0YVtvZmZzZXQgKyAxXVxuICAgICAgb2Zmc2V0ICs9IDJcbiAgICAgIGxldCBwcHMgPSBuZXcgVWludDhBcnJheShzaXplKVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcbiAgICAgICAgcHBzW2pdID0gZGF0YVtvZmZzZXQgKyBqXVxuICAgICAgfVxuICAgICAgb2Zmc2V0ICs9IHNpemVcbiAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YS5wcHMgPSBwcHNcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKG1ldGEsIFNwc1BhcnNlci50b1ZpZGVvTWV0YShjb25maWcpKVxuXG4gICAgLy8gZmlsbCB2aWRlbyBtZWRpYSBpbmZvXG4gICAgY29uc3QgdmlkZW9NZWRpYSA9IHRoaXMuX2NvbnRleHQubWVkaWFJbmZvLnZpZGVvXG5cbiAgICB2aWRlb01lZGlhLmNvZGVjID0gbWV0YS5jb2RlY1xuICAgIHZpZGVvTWVkaWEucHJvZmlsZSA9IG1ldGEucHJvZmlsZVxuICAgIHZpZGVvTWVkaWEubGV2ZWwgPSBtZXRhLmxldmVsXG4gICAgdmlkZW9NZWRpYS5jaHJvbWFGb3JtYXQgPSBtZXRhLmNocm9tYUZvcm1hdFxuICAgIHZpZGVvTWVkaWEuZnJhbWVSYXRlID0gbWV0YS5mcmFtZVJhdGVcbiAgICB2aWRlb01lZGlhLnBhclJhdGlvID0gbWV0YS5wYXJSYXRpb1xuICAgIHZpZGVvTWVkaWEud2lkdGggPSB2aWRlb01lZGlhLndpZHRoID09PSBtZXRhLnByZXNlbnRXaWR0aCA/IHZpZGVvTWVkaWEud2lkdGggOiBtZXRhLnByZXNlbnRXaWR0aFxuICAgIHZpZGVvTWVkaWEuaGVpZ2h0ID0gdmlkZW9NZWRpYS5oZWlnaHQgPT09IG1ldGEucHJlc2VudEhlaWdodCA/IHZpZGVvTWVkaWEud2lkdGggOiBtZXRhLnByZXNlbnRIZWlnaHRcblxuICAgIG1ldGEuZHVyYXRpb24gPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5kdXJhdGlvbiAqIG1ldGEudGltZXNjYWxlXG4gICAgbWV0YS5hdmNjID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5sZW5ndGgpXG4gICAgbWV0YS5hdmNjLnNldChkYXRhKVxuICAgIHRyYWNrLm1ldGEgPSBtZXRhXG4gIH1cblxuICAvKipcbiAgICogY2hvb3NlIGF1ZGlvIHNhbXBsZSByYXRlXG4gICAqIEBwYXJhbSBzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4XG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3dpdGNoQXVkaW9TYW1wbGVSYXRlIChzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4KSB7XG4gICAgbGV0IHNhbXBsaW5nRnJlcXVlbmN5TGlzdCA9IFs5NjAwMCwgODgyMDAsIDY0MDAwLCA0ODAwMCwgNDQxMDAsIDMyMDAwLCAyNDAwMCwgMjIwNTAsIDE2MDAwLCAxMjAwMCwgMTEwMjUsIDgwMDAsIDczNTBdXG4gICAgcmV0dXJuIHNhbXBsaW5nRnJlcXVlbmN5TGlzdFtzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4XVxuICB9XG5cbiAgLyoqXG4gICAqIGNob29zZSBhdWRpbyBzYW1wbGluZyBmcmVxdWVuY2VcbiAgICogQHBhcmFtIGluZm9cbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zd2l0Y2hBdWRpb1NhbXBsaW5nRnJlcXVlbmN5IChpbmZvKSB7XG4gICAgbGV0IHNhbXBsaW5nRnJlcXVlbmN5SW5kZXggPSAoaW5mbyAmIDEyKSA+Pj4gMlxuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3QgPSBbNTUwMCwgMTEwMjUsIDIyMDUwLCA0NDEwMCwgNDgwMDBdXG4gICAgcmV0dXJuIHNhbXBsaW5nRnJlcXVlbmN5TGlzdFtzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4XVxuICB9XG5cbiAgLyoqXG4gICAqIGNob29zZSBhdWRpbyBjaGFubmVsIGNvdW50XG4gICAqIEBwYXJhbSBpbmZvXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3dpdGNoQXVkaW9DaGFubmVsIChpbmZvKSB7XG4gICAgbGV0IHNhbXBsZVRyYWNrTnVtSW5kZXggPSBpbmZvICYgMVxuICAgIGxldCBzYW1wbGVUcmFja051bUxpc3QgPSBbMSwgMl1cbiAgICByZXR1cm4gc2FtcGxlVHJhY2tOdW1MaXN0W3NhbXBsZVRyYWNrTnVtSW5kZXhdXG4gIH1cblxuICAvKipcbiAgICogY2hlY2sgZGF0YXNpemUgaXMgdmFsaWQgdXNlIDQgQnl0ZSBhZnRlciBjdXJyZW50IHRhZ1xuICAgKiBAcGFyYW0gZGF0YXNpemVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGF0YXNpemVWYWxpZGF0b3IgKGRhdGFzaXplKSB7XG4gICAgbGV0IGRhdGFzaXplQ29uZmlybSA9IHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDAsIDQpXG4gICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoNClcbiAgICByZXR1cm4gZGF0YXNpemVDb25maXJtID09PSBkYXRhc2l6ZSArIDExXG4gIH1cblxuICBnZXQgbG9hZGVyQnVmZmVyICgpIHtcbiAgICBpZiAodGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTE9BREVSX0JVRkZFUicpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTE9BREVSX0JVRkZFUicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIG5ldyBFcnJvcign5om+5LiN5YiwIGxvYWRlckJ1ZmZlciDlrp7kvosnKSlcbiAgICB9XG4gIH1cblxuICBnZXQgdHJhY2tzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgfVxuXG4gIGdldCBsb2dnZXIgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdMT0dHRVInKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZsdkRlbXV4ZXJcbiIsIi8qKlxuICogUmVmZXJlbmNlOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjODIxNiNzZWN0aW9uLTQuM1xuICovXG5jbGFzcyBNM1U4UGFyc2VyIHtcbiAgc3RhdGljIHBhcnNlICh0ZXh0LCBiYXNldXJsID0gJycpIHtcbiAgICBsZXQgcmV0ID0ge1xuICAgICAgZHVyYXRpb246IDBcbiAgICB9O1xuICAgIGlmICghdGV4dCB8fCAhdGV4dC5zcGxpdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcmVmcyA9IHRleHQuc3BsaXQoL1xccnxcXG4vKTtcbiAgICByZWZzID0gcmVmcy5maWx0ZXIoKHJlZikgPT4ge1xuICAgICAgcmV0dXJuIHJlZjtcbiAgICB9KVxuICAgIGxldCByZWYgPSByZWZzLnNoaWZ0KClcbiAgICBpZiAoIXJlZi5tYXRjaCgnI0VYVE0zVScpKSB7XG4gICAgICAvLyBUT0RPOk0zVeagvOW8j+mUmeivr+OAglxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJlZiA9IHJlZnMuc2hpZnQoKVxuICAgIHdoaWxlIChyZWYpIHtcbiAgICAgIGxldCByZWZtID0gcmVmLm1hdGNoKC8jKC4qKTooLiopLyk7XG4gICAgICBpZiAocmVmbSAmJiByZWZtLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgc3dpdGNoIChyZWZtWzFdKSB7XG4gICAgICAgICAgY2FzZSAnRVhULVgtVkVSU0lPTic6XG4gICAgICAgICAgICByZXQudmVyc2lvbiA9IHBhcnNlSW50KHJlZm1bMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnRVhULVgtTUVESUEtU0VRVUVOQ0UnOlxuICAgICAgICAgICAgcmV0LnNlcXVlbmNlID0gcGFyc2VJbnQocmVmbVsyXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdFWFQtWC1UQVJHRVREVVJBVElPTic6XG4gICAgICAgICAgICByZXQudGFyZ2V0ZHVyYXRpb24gPSBwYXJzZUZsb2F0KHJlZm1bMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnRVhUSU5GJzpcbiAgICAgICAgICAgIE0zVThQYXJzZXIucGFyc2VGcmFnKHJlZm0sIHJlZnMsIHJldCwgYmFzZXVybCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlZiA9IHJlZnMuc2hpZnQoKVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgc3RhdGljIHBhcnNlRnJhZyAocmVmbSwgcmVmcywgcmV0LCBiYXNldXJsKSB7XG4gICAgaWYgKCFyZXQuZnJhZ3MpIHtcbiAgICAgIHJldC5mcmFncyA9IFtdXG4gICAgfVxuXG4gICAgbGV0IGZyZWcgPSB7XG4gICAgICBzdGFydDogcmV0LmR1cmF0aW9uLFxuICAgICAgZHVyYXRpb246IHBhcnNlRmxvYXQocmVmbVsyXSkgKiAxMDAwXG4gICAgfVxuXG4gICAgcmV0LmR1cmF0aW9uICs9IGZyZWcuZHVyYXRpb247XG4gICAgbGV0IG5leHRsaW5lID0gcmVmcy5zaGlmdCgpO1xuICAgIGlmIChuZXh0bGluZS5tYXRjaCgvIyguKik6KC4qKS8pKSB7XG4gICAgICBuZXh0bGluZSA9IHJlZnMuc2hpZnQoKTtcbiAgICB9XG4gICAgaWYgKG5leHRsaW5lLmxlbmd0aCA+IDAgJiYgbmV4dGxpbmUuY2hhckF0KDApID09PSAnLycgJiYgYmFzZXVybC5tYXRjaCgvLipcXC9cXC8uKlxcLlxcdysvZykpIHtcbiAgICAgIGJhc2V1cmwgPSBiYXNldXJsLm1hdGNoKC8uKlxcL1xcLy4qXFwuXFx3Ky9nKVswXTtcbiAgICB9XG4gICAgaWYgKG5leHRsaW5lLm1hdGNoKC8uKjpcXC9cXC8uKi8pKSB7XG4gICAgICBmcmVnLnVybCA9IG5leHRsaW5lO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcmVnLnVybCA9IGJhc2V1cmwgKyBuZXh0bGluZTtcbiAgICB9XG4gICAgXG4gICAgcmV0LmZyYWdzLnB1c2goZnJlZyk7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VVUkwgKHVybCkge1xuICAgIGxldCBiYXNldXJsID0gJyc7XG4gICAgbGV0IHVybHMgPSB1cmwubWF0Y2goLyguKlxcLykuKlxcLm0zdTgvKTtcbiAgICBpZiAodXJscyAmJiB1cmxzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodXJsc1tpXS5tYXRjaCgvLipcXC8kL2cpICYmIHVybHNbaV0ubGVuZ3RoID4gYmFzZXVybC5sZW5ndGgpIHtcbiAgICAgICAgICBiYXNldXJsID0gdXJsc1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmFzZXVybDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNM1U4UGFyc2VyO1xuIiwiaW1wb3J0IHsgTmFsdW5pdCB9IGZyb20gJ3hncGxheWVyLWNvZGVjJztcbmltcG9ydCB7IEF1ZGlvVHJhY2ssIFZpZGVvVHJhY2sgfSBmcm9tICd4Z3BsYXllci1idWZmZXInO1xuaW1wb3J0IHtcbiAgQXVkaW9UcmFja01ldGEsXG4gIFZpZGVvVHJhY2tNZXRhLFxuICBBdWRpb1RyYWNrU2FtcGxlLFxuICBWaWRlb1RyYWNrU2FtcGxlLFxuICBFVkVOVFMsXG4gIFN0cmVhbVxufSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5cbmNvbnN0IERFTVVYX0VWRU5UUyA9IEVWRU5UUy5ERU1VWF9FVkVOVFM7XG5jb25zdCBTdHJlYW1UeXBlID0ge1xuICAweDAxOiBbJ3ZpZGVvJywgJ01QRUctMSddLFxuICAweDAyOiBbJ3ZpZGVvJywgJ01QRUctMiddLFxuICAweDFiOiBbJ3ZpZGVvJywgJ0FWQy5IMjY0J10sXG4gIDB4ZWE6IFsndmlkZW8nLCAnVkMtMSddLFxuICAweDAzOiBbJ2F1ZGlvJywgJ01QRUctMSddLFxuICAweDA0OiBbJ2F1ZGlvJywgJ01QRUctMiddLFxuICAweDBmOiBbJ2F1ZGlvJywgJ01QRUctMi5BQUMnXSxcbiAgMHgxMTogWydhdWRpbycsICdNUEVHLTQuQUFDJ10sXG4gIDB4ODA6IFsnYXVkaW8nLCAnTFBDTSddLFxuICAweDgxOiBbJ2F1ZGlvJywgJ0FDMyddLFxuICAweDA2OiBbJ2F1ZGlvJywgJ0FDMyddLFxuICAweDgyOiBbJ2F1ZGlvJywgJ0RUUyddLFxuICAweDgzOiBbJ2F1ZGlvJywgJ0RvbGJ5IFRydWVIRCddLFxuICAweDg0OiBbJ2F1ZGlvJywgJ0FDMy1QbHVzJ10sXG4gIDB4ODU6IFsnYXVkaW8nLCAnRFRTLUhEJ10sXG4gIDB4ODY6IFsnYXVkaW8nLCAnRFRTLU1BJ10sXG4gIDB4YTE6IFsnYXVkaW8nLCAnQUMzLVBsdXMtU0VDJ10sXG4gIDB4YTI6IFsnYXVkaW8nLCAnRFRTLUhELVNFQyddXG59O1xuXG5jbGFzcyBUc0RlbXV4ZXIge1xuICBjb25zdHJ1Y3RvciAoY29uZmlncykge1xuICAgIHRoaXMuY29uZmlncyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZ3MpO1xuICAgIHRoaXMuZGVtdXhpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnBhdCA9IFtdO1xuICAgIHRoaXMucG10ID0gW107XG4gICAgdGhpcy5faGFzVmlkZW9NZXRhID0gZmFsc2U7XG4gICAgdGhpcy5faGFzQXVkaW9NZXRhID0gZmFsc2U7XG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5ERU1VWF9TVEFSVCwgdGhpcy5kZW11eC5iaW5kKHRoaXMpKVxuICB9XG5cbiAgZGVtdXggKCkge1xuICAgIGlmICh0aGlzLmRlbXV4aW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgYnVmZmVyID0gdGhpcy5pbnB1dEJ1ZmZlcjtcbiAgICBsZXQgZnJhZ3MgPSB7IHBhdDogW10sIHBtdDogW10gfTtcbiAgICBsZXQgcGVzZXMgPSB7fTtcblxuICAgIC8vIFJlYWQgVFMgc2VnbWVudFxuICAgIHdoaWxlIChidWZmZXIubGVuZ3RoID49IDE4OCkge1xuICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggPj0gMSAmJiBidWZmZXIuYXJyYXlbMF1bYnVmZmVyLm9mZnNldF0gIT09IDcxKSB7XG4gICAgICAgIGJ1ZmZlci5zaGlmdCgxKTtcbiAgICAgIH1cbiAgICAgIGxldCBidWYgPSBidWZmZXIuc2hpZnQoMTg4KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGJ1Zik7XG4gICAgICBsZXQgdHNTdHJlYW0gPSBuZXcgU3RyZWFtKGJ1Zi5idWZmZXIpO1xuICAgICAgbGV0IHRzID0ge307XG4gICAgICBUc0RlbXV4ZXIucmVhZCh0c1N0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgIGlmICh0cy5wZXMpIHtcbiAgICAgICAgaWYgKCFwZXNlc1t0cy5oZWFkZXIucGlkXSkge1xuICAgICAgICAgIHBlc2VzW3RzLmhlYWRlci5waWRdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcGVzZXNbdHMuaGVhZGVyLnBpZF0ucHVzaCh0cy5wZXMpO1xuICAgICAgICB0cy5wZXMuRVMuYnVmZmVyID0gW3RzLnBlcy5FUy5idWZmZXJdO1xuICAgICAgfSBlbHNlIGlmIChwZXNlc1t0cy5oZWFkZXIucGlkXSkge1xuICAgICAgICBwZXNlc1t0cy5oZWFkZXIucGlkXVtwZXNlc1t0cy5oZWFkZXIucGlkXS5sZW5ndGggLSAxXS5FUy5idWZmZXIucHVzaCh0cy5wYXlsb2FkLnN0cmVhbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2V0IEZyYW1lcyBkYXRhXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBPYmplY3Qua2V5cyhwZXNlcykubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBlcGVzZXMgPSBwZXNlc1tPYmplY3Qua2V5cyhwZXNlcylbaV1dO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBlcGVzZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZXBlc2VzW2pdLmlkID0gT2JqZWN0LmtleXMocGVzZXMpW2ldO1xuICAgICAgICBlcGVzZXNbal0uRVMuYnVmZmVyID0gVHNEZW11eGVyLk1lcmdlKGVwZXNlc1tqXS5FUy5idWZmZXIpO1xuICAgICAgICBpZiAoZXBlc2VzW2pdLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICB0aGlzLnB1c2hBdWRpb1NhbXBsZShlcGVzZXNbal0pO1xuICAgICAgICB9IGVsc2UgaWYgKGVwZXNlc1tqXS50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgdGhpcy5wdXNoVmlkZW9TYW1wbGUoZXBlc2VzW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9oYXNBdWRpb01ldGEpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUsICdhdWRpbycpO1xuICAgIH1cbiAgICBpZiAodGhpcy5faGFzVmlkZW9NZXRhKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFLCAndmlkZW8nKTtcbiAgICB9XG4gIH1cblxuICBwdXNoQXVkaW9TYW1wbGUgKHBlcykge1xuICAgIGxldCB0cmFjaztcbiAgICBpZiAoIXRoaXMuX3RyYWNrcy5hdWRpb1RyYWNrKSB7XG4gICAgICB0aGlzLl90cmFja3MuYXVkaW9UcmFjayA9IG5ldyBBdWRpb1RyYWNrKCk7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy5hdWRpb1RyYWNrO1xuICAgICAgdHJhY2subWV0YSA9IG5ldyBBdWRpb1RyYWNrTWV0YSh7XG4gICAgICAgIGF1ZGlvU2FtcGxlUmF0ZTogcGVzLkVTLmZyZXF1ZW5jZSxcbiAgICAgICAgc2FtcGxlUmF0ZTogcGVzLkVTLmZyZXF1ZW5jZSxcbiAgICAgICAgY2hhbm5lbENvdW50OiBwZXMuRVMuY2hhbm5lbCxcbiAgICAgICAgY29kZWM6ICdtcDRhLjQwLicgKyBwZXMuRVMuYXVkaW9PYmplY3RUeXBlLFxuICAgICAgICBjb25maWc6IHBlcy5FUy5hdWRpb0NvbmZpZyxcbiAgICAgICAgaWQ6IDIsXG4gICAgICAgIHNhbXBsZVJhdGVJbmRleDogcGVzLkVTLmZyZXF1ZW5jeUluZGV4XG4gICAgICB9KTtcbiAgICAgIHRyYWNrLm1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKDEwMjQgLyB0cmFjay5tZXRhLmF1ZGlvU2FtcGxlUmF0ZSAqIHRyYWNrLm1ldGEudGltZXNjYWxlKTtcbiAgICAgIGlmICghdGhpcy5faGFzQXVkaW9NZXRhKSB7XG4gICAgICAgIHRoaXMuX2hhc0F1ZGlvTWV0YSA9IHRydWVcbiAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICdhdWRpbycpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy5hdWRpb1RyYWNrO1xuICAgIH1cbiAgICBsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KHBlcy5FUy5idWZmZXIuYnVmZmVyLnNsaWNlKHBlcy5FUy5idWZmZXIucG9zaXRpb24sIHBlcy5FUy5idWZmZXIubGVuZ3RoKSk7XG4gICAgbGV0IGR0cyA9IHBhcnNlSW50KHBlcy5wdHMgLyA5MCk7XG4gICAgbGV0IHB0cyA9IHBhcnNlSW50KHBlcy5wdHMgLyA5MCk7XG4gICAgbGV0IHNhbXBsZSA9IG5ldyBBdWRpb1RyYWNrU2FtcGxlKHtkdHMsIHB0cywgZGF0YX0pO1xuICAgIHRyYWNrLnNhbXBsZXMucHVzaChzYW1wbGUpO1xuICB9XG5cbiAgcHVzaFZpZGVvU2FtcGxlIChwZXMpIHtcbiAgICBsZXQgbmFscyA9IE5hbHVuaXQuZ2V0TmFsdW5pdHMocGVzLkVTLmJ1ZmZlcik7XG4gICAgbGV0IHRyYWNrO1xuICAgIGlmICghdGhpcy5fdHJhY2tzLnZpZGVvVHJhY2spIHtcbiAgICAgIHRoaXMuX3RyYWNrcy52aWRlb1RyYWNrID0gbmV3IFZpZGVvVHJhY2soKTtcbiAgICAgIHRyYWNrID0gdGhpcy5fdHJhY2tzLnZpZGVvVHJhY2s7XG4gICAgICB0cmFjay5tZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYWNrID0gdGhpcy5fdHJhY2tzLnZpZGVvVHJhY2s7XG4gICAgfVxuICAgIGxldCBzYW1wbGVMZW5ndGggPSAwO1xuICAgIGxldCBzcHMgPSBmYWxzZTtcbiAgICBsZXQgcHBzID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbmFsID0gbmFsc1tpXTtcbiAgICAgIGlmIChuYWwuc3BzKSB7XG4gICAgICAgIC8vIFRPRE/vvJpWaWRlb1RyYWNr5L+h5oGvIOWSjCBNZXRhIOS/oeaBr1xuICAgICAgICBpZiAodHJhY2suc3BzICYmIFRzRGVtdXhlci5jb21wYWlyZVVpbnQ4KG5hbC5ib2R5LCB0cmFjay5zcHMpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBzcHMgPSBuYWw7XG4gICAgICAgIHRyYWNrLnNwcyA9IG5hbC5ib2R5O1xuICAgICAgICB0cmFjay5tZXRhLmNocm9tYUZvcm1hdCA9IHNwcy5zcHMuY2hyb21hX2Zvcm1hdFxuICAgICAgICB0cmFjay5tZXRhLmNvZGVjID0gJ2F2YzEuJztcbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCA0OyBqKyspIHtcbiAgICAgICAgICB2YXIgaCA9IHNwcy5ib2R5W2pdLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICBpZiAoaC5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICBoID0gJzAnICsgaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJhY2subWV0YS5jb2RlYyArPSBoO1xuICAgICAgICB9XG4gICAgICAgIHRyYWNrLm1ldGEuY29kZWNIZWlnaHQgPSBzcHMuc3BzLmNvZGVjX3NpemUuaGVpZ2h0O1xuICAgICAgICB0cmFjay5tZXRhLmNvZGVjV2lkdGggPSBzcHMuc3BzLmNvZGVjX3NpemUud2lkdGg7XG4gICAgICAgIHRyYWNrLm1ldGEuZnJhbWVSYXRlID0gc3BzLnNwcy5mcmFtZV9yYXRlO1xuICAgICAgICB0cmFjay5tZXRhLmlkID0gMTtcbiAgICAgICAgdHJhY2subWV0YS5sZXZlbCA9IHNwcy5zcHMubGV2ZWxfc3RyaW5nO1xuICAgICAgICB0cmFjay5tZXRhLnByZXNlbnRIZWlnaHQgPSBzcHMuc3BzLnByZXNlbnRfc2l6ZS5oZWlnaHQ7XG4gICAgICAgIHRyYWNrLm1ldGEucHJlc2VudFdpZHRoID0gc3BzLnNwcy5wcmVzZW50X3NpemUud2lkdGg7XG4gICAgICAgIHRyYWNrLm1ldGEucHJvZmlsZSA9IHNwcy5zcHMucHJvZmlsZV9zdHJpbmc7XG4gICAgICAgIHRyYWNrLm1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKHRyYWNrLm1ldGEudGltZXNjYWxlICogKHNwcy5zcHMuZnJhbWVfcmF0ZS5mcHNfZGVuIC8gc3BzLnNwcy5mcmFtZV9yYXRlLmZwc19udW0pKTtcbiAgICAgICAgdHJhY2subWV0YS5zYXJSYXRpbyA9IHNwcy5zcHMuc2FyX3JhdGlvID8gc3BzLnNwcy5zYXJfcmF0aW8gOiBzcHMuc3BzLnBhcl9yYXRpbztcbiAgICAgIH0gZWxzZSBpZiAobmFsLnBwcykge1xuICAgICAgICB0cmFjay5wcHMgPSBuYWwuYm9keTtcbiAgICAgICAgcHBzID0gbmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2FtcGxlTGVuZ3RoICs9ICg0ICsgbmFsLmJvZHkuYnl0ZUxlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNwcyAmJiBwcHMpIHtcbiAgICAgIHRyYWNrLm1ldGEuYXZjYyA9IE5hbHVuaXQuZ2V0QXZjYyhzcHMuYm9keSwgcHBzLmJvZHkpO1xuICAgICAgaWYgKCF0aGlzLl9oYXNWaWRlb01ldGEpIHtcbiAgICAgICAgdGhpcy5faGFzVmlkZW9NZXRhID0gdHJ1ZVxuICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ3ZpZGVvJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShzYW1wbGVMZW5ndGgpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGxldCBpc0tleWZyYW1lID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbmFsID0gbmFsc1tpXTtcbiAgICAgIGxldCBsZW5ndGggPSBuYWwuYm9keS5ieXRlTGVuZ3RoO1xuICAgICAgaWYgKG5hbC5pZHIpIHtcbiAgICAgICAgaXNLZXlmcmFtZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIW5hbC5wcHMgJiYgIW5hbC5zcHMpIHtcbiAgICAgICAgZGF0YS5zZXQobmV3IFVpbnQ4QXJyYXkoW2xlbmd0aCA+Pj4gMjQgJiAweGZmLFxuICAgICAgICAgIGxlbmd0aCA+Pj4gMTYgJiAweGZmLFxuICAgICAgICAgIGxlbmd0aCA+Pj4gOCAmIDB4ZmYsXG4gICAgICAgICAgbGVuZ3RoICYgMHhmZlxuICAgICAgICBdKSwgb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICAgIGRhdGEuc2V0KG5hbC5ib2R5LCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgc2FtcGxlID0gbmV3IFZpZGVvVHJhY2tTYW1wbGUoe1xuICAgICAgZHRzOiBwYXJzZUludChwZXMuZHRzIC8gOTApLFxuICAgICAgcHRzOiBwYXJzZUludChwZXMucHRzIC8gOTApLFxuICAgICAgY3RzOiAocGVzLnB0cyAtIHBlcy5kdHMpIC8gOTAsXG4gICAgICBvcmlnaW5EdHM6IHBlcy5kdHMsXG4gICAgICBpc0tleWZyYW1lLFxuICAgICAgZGF0YVxuICAgIH0pXG4gICAgdHJhY2suc2FtcGxlcy5wdXNoKHNhbXBsZSk7XG4gIH1cblxuICBkZXN0b3J5ICgpIHtcbiAgICB0aGlzLm9mZihERU1VWF9FVkVOVFMuREVNVVhfU1RBUlQsIHRoaXMuZGVtdXgpO1xuICAgIHRoaXMuY29uZmlncyA9IHt9O1xuICAgIHRoaXMuZGVtdXhpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnBhdCA9IFtdO1xuICAgIHRoaXMucG10ID0gW107XG4gICAgdGhpcy5faGFzVmlkZW9NZXRhID0gZmFsc2U7XG4gICAgdGhpcy5faGFzQXVkaW9NZXRhID0gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgY29tcGFpcmVVaW50OCAoYSwgYikge1xuICAgIGlmIChhLmJ5dGVMZW5ndGggIT09IGIuYnl0ZUxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgcmV0ID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICBzdGF0aWMgTWVyZ2UgKGJ1ZmZlcnMpIHtcbiAgICBsZXQgZGF0YTtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxlbmd0aCArPSAoYnVmZmVyc1tpXS5sZW5ndGggLSBidWZmZXJzW2ldLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBkYXRhID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBidWZmZXIgPSBidWZmZXJzW2ldO1xuICAgICAgZGF0YS5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnVmZmVyLnBvc2l0aW9uKSwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBidWZmZXIubGVuZ3RoIC0gYnVmZmVyLnBvc2l0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN0cmVhbShkYXRhLmJ1ZmZlcik7XG4gIH1cblxuICBzdGF0aWMgcmVhZCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBUc0RlbXV4ZXIucmVhZEhlYWRlcihzdHJlYW0sIHRzKTtcbiAgICBUc0RlbXV4ZXIucmVhZFBheWxvYWQoc3RyZWFtLCB0cywgZnJhZ3MpO1xuICAgIGlmICh0cy5oZWFkZXIucGFja2V0ID09PSAnTUVESUEnICYmIHRzLmhlYWRlci5wYXlsb2FkID09PSAxICYmICF0cy51bmtub3duUElEcykge1xuICAgICAgdHMucGVzID0gVHNEZW11eGVyLlBFUyh0cyk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHJlYWRQYXlsb2FkIChzdHJlYW0sIHRzLCBmcmFncykge1xuICAgIGxldCBoZWFkZXIgPSB0cy5oZWFkZXJcbiAgICBsZXQgcGlkID0gaGVhZGVyLnBpZDtcbiAgICBzd2l0Y2ggKHBpZCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBUc0RlbXV4ZXIuUEFUKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIFRzRGVtdXhlci5DQVQoc3RyZWFtLCB0cywgZnJhZ3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgVHNEZW11eGVyLlRTRFQoc3RyZWFtLCB0cywgZnJhZ3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMHgxZmZmOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIFRPRE86IHNvbWXnmoTlhpnms5XkuI3lpKrlpb3vvIzlvpfmlLlcbiAgICAgICAgaWYgKGZyYWdzLnBhdC5zb21lKChpdGVtKSA9PiB7IHJldHVybiBpdGVtLnBpZCA9PT0gcGlkOyB9KSkge1xuICAgICAgICAgIFRzRGVtdXhlci5QTVQoc3RyZWFtLCB0cywgZnJhZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBzdHMgPSBmcmFncy5wbXQgPyBmcmFncy5wbXQuZmlsdGVyKChpdGVtKSA9PiBpdGVtLnBpZCA9PT0gcGlkKSA6IFtdO1xuICAgICAgICAgIGlmIChzdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgVHNEZW11eGVyLk1lZGlhKHN0cmVhbSwgdHMsIFN0cmVhbVR5cGVbc3RzWzBdLnN0cmVhbVR5cGVdWzBdKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cy51bmtub3duUElEcyA9IHRydWU7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyByZWFkSGVhZGVyIChzdHJlYW0sIHRzKSB7XG4gICAgbGV0IGhlYWRlciA9IHt9O1xuICAgIGhlYWRlci5zeW5jID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICBoZWFkZXIuZXJyb3IgPSBuZXh0ID4+PiAxNTtcbiAgICBoZWFkZXIucGF5bG9hZCA9IG5leHQgPj4+IDE0ICYgMTtcbiAgICBoZWFkZXIucHJpb3JpdHkgPSBuZXh0ID4+PiAxMyAmIDE7XG4gICAgaGVhZGVyLnBpZCA9IG5leHQgJiAweDFmZmY7XG5cbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuXG4gICAgaGVhZGVyLnNjcmFtYmxpbmcgPSBuZXh0ID4+IDYgJiAweDM7IC8vIOaYr+WQpuWKoOWvhu+8jDAw6KGo56S65LiN5Yqg5a+GXG5cbiAgICAvKipcbiAgICAgKiAwMCBJU08vSUVD5pyq5p2l5L2/55So5L+d55WZXG4gICAgICogMDEg5rKh5pyJ6LCD5pW05a2X5q6177yM5LuF5ZCr5pyJMTg0QuacieaViOWHgOiNt1xuICAgICAqIDAyIOayoeacieacieaViOWHgOiNt++8jOS7heWQq+aciTE4M0LosIPmlbTlrZfmrrVcbiAgICAgKiAwMyAwfjE4MkLosIPmlbTlrZfmrrXlkI7kuLrmnInmlYjlh4DojbdcbiAgICAgKi9cbiAgICBoZWFkZXIuYWRhcHRhdGlvbiA9IG5leHQgPj4gNCAmIDB4MztcbiAgICBoZWFkZXIuY29udGludWl0eSA9IG5leHQgJiAxNTtcbiAgICBoZWFkZXIucGFja2V0ID0gaGVhZGVyLnBpZCA9PT0gMCA/ICdQQVQnIDogJ01FRElBJztcbiAgICB0cy5oZWFkZXIgPSBoZWFkZXI7XG4gIH1cblxuICBzdGF0aWMgUEFUIChzdHJlYW0sIHRzLCBmcmFncykge1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBzdHJlYW0uc2tpcChuZXh0KTtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC50YWJlbElEID0gbmV4dDtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQuZXJyb3IgPSBuZXh0ID4+PiA3O1xuICAgIHJldC56ZXJvID0gbmV4dCA+Pj4gNiAmIDE7XG4gICAgcmV0LnNlY3Rpb25MZW5ndGggPSBuZXh0ICYgMHhmZmY7XG4gICAgcmV0LnN0cmVhbUlEID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQuY3VycmVudCA9IHN0cmVhbS5yZWFkVWludDgoKSAmIDE7XG4gICAgcmV0LnNlY3Rpb25OdW1iZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgcmV0Lmxhc3RTZWN0aW9uTnVtYmVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIGxldCBOID0gKHJldC5zZWN0aW9uTGVuZ3RoIC0gOSkgLyA0O1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIGxldCBwcm9ncmFtTnVtYmVyID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgIGxldCBwaWQgPSBzdHJlYW0ucmVhZFVpbnQxNigpICYgMHgxZmZmO1xuICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgcHJvZ3JhbTogcHJvZ3JhbU51bWJlcixcbiAgICAgICAgcGlkLFxuICAgICAgICB0eXBlOiBwcm9ncmFtTnVtYmVyID09PSAwID8gJ25ldHdvcmsnIDogJ21hcFBJRCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICBmcmFncy5wYXQgPSBmcmFncy5wYXQuY29uY2F0KGxpc3QpO1xuICAgIH1cbiAgICByZXQubGlzdCA9IGxpc3Q7XG4gICAgcmV0LnByb2dyYW0gPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIHJldC5waWQgPSBzdHJlYW0ucmVhZFVpbnQxNigpICYgMHgxZmZmO1xuICAgIHRzLnBheWxvYWQgPSByZXQ7XG4gICAgLy8gVE9ETyBDUkNcbiAgfVxuXG4gIHN0YXRpYyBQTVQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgbGV0IHJldCA9IHt9O1xuICAgIGxldCBoZWFkZXIgPSB0cy5oZWFkZXI7XG4gICAgaGVhZGVyLnBhY2tldCA9ICdQTVQnO1xuICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHN0cmVhbS5za2lwKG5leHQpO1xuICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgcmV0LnRhYmxlSUQgPSBuZXh0O1xuICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIHJldC5zZWN0aW9uTGVuZ3RoID0gbmV4dCAmIDB4ZmZmO1xuICAgIHJldC5wcm9ncmFtID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQuY3VycmVudCA9IHN0cmVhbS5yZWFkVWludDgoKSAmIDE7XG4gICAgcmV0Lm9yZGVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC5sYXN0T3JkZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgcmV0LlBDUl9QSUQgPSBzdHJlYW0ucmVhZFVpbnQxNigpICYgMHgxZmZmO1xuICAgIHJldC5wcm9ncmFtTGVuZ3RoID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4ZmZmO1xuICAgIGxldCBOID0gKHJldC5zZWN0aW9uTGVuZ3RoIC0gMTMpIC8gNTtcbiAgICBsZXQgbGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBsaXN0LnB1c2goe1xuICAgICAgICBzdHJlYW1UeXBlOiBzdHJlYW0ucmVhZFVpbnQ4KCksXG4gICAgICAgIHBpZDogc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZiwgLy8gMHgwN2U1IOinhumike+8jDB4MDdlNlxuICAgICAgICBlczogc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4ZmZmXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0Lmxpc3QgPSBsaXN0O1xuICAgIGlmICghdGhpcy5wbXQpIHtcbiAgICAgIHRoaXMucG10ID0gW107XG4gICAgfVxuICAgIGZyYWdzLnBtdCA9IHRoaXMucG10LmNvbmNhdChsaXN0Lm1hcCgoaXRlbSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGlkOiBpdGVtLnBpZCxcbiAgICAgICAgZXM6IGl0ZW0uZXMsXG4gICAgICAgIHN0cmVhbVR5cGU6IGl0ZW0uc3RyZWFtVHlwZSxcbiAgICAgICAgcHJvZ3JhbTogcmV0LnByb2dyYW1cbiAgICAgIH07XG4gICAgfSkpO1xuICAgIHRzLnBheWxvYWQgPSByZXQ7XG4gIH1cblxuICBzdGF0aWMgTWVkaWEgKHN0cmVhbSwgdHMsIHR5cGUpIHtcbiAgICBsZXQgaGVhZGVyID0gdHMuaGVhZGVyO1xuICAgIGxldCBwYXlsb2FkID0ge307XG4gICAgaGVhZGVyLnR5cGUgPSB0eXBlO1xuICAgIGlmIChoZWFkZXIuYWRhcHRhdGlvbiA9PT0gMHgwMykge1xuICAgICAgcGF5bG9hZC5hZGFwdGF0aW9uTGVuZ3RoID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgaWYgKHBheWxvYWQuYWRhcHRhdGlvbkxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgICAgIHBheWxvYWQuZGlzY29udGludWUgPSBuZXh0ID4+PiA3O1xuICAgICAgICBwYXlsb2FkLmFjY2VzcyA9IG5leHQgPj4+IDYgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLnByaW9yaXR5ID0gbmV4dCA+Pj4gNSAmIDB4MDE7XG4gICAgICAgIHBheWxvYWQuUENSID0gbmV4dCA+Pj4gNCAmIDB4MDE7XG4gICAgICAgIHBheWxvYWQuT1BDUiA9IG5leHQgPj4+IDMgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLnNwbGljZVBvaW50ID0gbmV4dCA+Pj4gMiAmIDB4MDE7XG4gICAgICAgIHBheWxvYWQudHJhbnNwb3J0UHJpdmF0ZSA9IG5leHQgPj4+IDEgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLmFkYXB0YXRpb25GaWVsZCA9IG5leHQgJiAweDAxO1xuICAgICAgICBsZXQgX3N0YXJ0ID0gc3RyZWFtLnBvc2l0aW9uO1xuICAgICAgICBpZiAocGF5bG9hZC5QQ1IgPT09IDEpIHtcbiAgICAgICAgICBwYXlsb2FkLnByb2dyYW1DbG9ja0Jhc2UgPSBzdHJlYW0ucmVhZFVpbnQzMigpIDw8IDE7XG4gICAgICAgICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcGF5bG9hZC5wcm9ncmFtQ2xvY2tCYXNlIHw9IG5leHQgPj4+IDE1O1xuICAgICAgICAgIHBheWxvYWQucHJvZ3JhbUNsb2NrRXh0ZW5zaW9uID0gbmV4dCAmIDB4MWZmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXlsb2FkLk9QQ1IgPT09IDEpIHtcbiAgICAgICAgICBwYXlsb2FkLm9yaWdpblByb2dyYW1DbG9ja0Jhc2UgPSBzdHJlYW0ucmVhZFVpbnQzMigpIDw8IDE7XG4gICAgICAgICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcGF5bG9hZC5vcmlnaW5Qcm9ncmFtQ2xvY2tCYXNlICs9IG5leHQgPj4+IDE1O1xuICAgICAgICAgIHBheWxvYWQub3JpZ2luUHJvZ3JhbUNsb2NrRXh0ZW5zaW9uID0gbmV4dCAmIDB4MWZmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXlsb2FkLnNwbGljZVBvaW50ID09PSAxKSB7XG4gICAgICAgICAgcGF5bG9hZC5zcGxpY2VDb3VudGRvd24gPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQudHJhbnNwb3J0UHJpdmF0ZSA9PT0gMSkge1xuICAgICAgICAgIGxldCBsZW5ndGggPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgICAgICAgbGV0IHRyYW5zcG9ydFByaXZhdGVEYXRhID0gW107XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJhbnNwb3J0UHJpdmF0ZURhdGEucHVzaChzdHJlYW0ucmVhZFVpbnQ4KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5hZGFwdGF0aW9uRmllbGQgPT09IDEpIHtcbiAgICAgICAgICBsZXQgbGVuZ3RoID0gc3RyZWFtLnJlYWRVaW50OCgpXG4gICAgICAgICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KClcbiAgICAgICAgICBsZXQgc3RhcnQgPSBzdHJlYW0ucG9zaXRpb247XG4gICAgICAgICAgbGV0IGx0dyA9IG5leHQgPj4+IDc7XG4gICAgICAgICAgbGV0IHBpZWNld2lzZSA9IG5leHQgPj4+IDYgJiAweDE7XG4gICAgICAgICAgbGV0IHNlYW1sZXNzID0gbmV4dCA+Pj4gNSAmIDB4MTtcbiAgICAgICAgICBpZiAobHR3ID09PSAxKSB7XG4gICAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICAgIHBheWxvYWQubHR3VmFsaWQgPSBuZXh0ID4+PiAxNTtcbiAgICAgICAgICAgIHBheWxvYWQubHR3T2Zmc2V0ID0gbmV4dCAmIDB4ZWZmZjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBpZWNld2lzZSA9PT0gMSkge1xuICAgICAgICAgICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDI0KCk7XG4gICAgICAgICAgICBwYXlsb2FkLnBpZWNld2lzZVJhdGUgPSBuZXh0ICYgMHgzZmZmZmY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWFtbGVzcyA9PT0gMSkge1xuICAgICAgICAgICAgbmV4dCA9IHN0cmVhbS5yZWFkSW50OCgpO1xuICAgICAgICAgICAgcGF5bG9hZC5zcGxpY2VUeXBlID0gbmV4dCA+Pj4gNDtcbiAgICAgICAgICAgIHBheWxvYWQuZHRzTmV4dEFVMSA9IG5leHQgPj4+IDEgJiAweDc7XG4gICAgICAgICAgICBwYXlsb2FkLm1hcmtlcjEgPSBuZXh0ICYgMHgxO1xuICAgICAgICAgICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICAgICAgICBwYXlsb2FkLmR0c05leHRBVTIgPSBuZXh0ID4+PiAxO1xuICAgICAgICAgICAgcGF5bG9hZC5tYXJrZXIyID0gbmV4dCAmIDB4MTtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgICAgcGF5bG9hZC5kdHNOZXh0QVUzID0gbmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RyZWFtLnNraXAobGVuZ3RoIC0gMSAtIChzdHJlYW0ucG9zaXRpb24gLSBzdGFydCkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYXN0U3R1ZmZpbmcgPSBwYXlsb2FkLmFkYXB0YXRpb25MZW5ndGggLSAxIC0gKHN0cmVhbS5wb3NpdGlvbiAtIF9zdGFydCk7XG4gICAgICAgIHN0cmVhbS5za2lwKGxhc3RTdHVmZmluZyk7XG4gICAgICB9XG4gICAgfVxuICAgIHBheWxvYWQuc3RyZWFtID0gbmV3IFN0cmVhbShzdHJlYW0uYnVmZmVyLnNsaWNlKHN0cmVhbS5wb3NpdGlvbikpO1xuICAgIHRzLnBheWxvYWQgPSBwYXlsb2FkO1xuICB9XG5cbiAgc3RhdGljIFBFUyAodHMpIHtcbiAgICBsZXQgcmV0ID0ge307XG4gICAgbGV0IGJ1ZmZlciA9IHRzLnBheWxvYWQuc3RyZWFtO1xuICAgIFxuICAgIGxldCBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MjQoKTtcbiAgICBpZiAobmV4dCAhPT0gMSkge1xuICAgICAgcmV0LkVTID0ge307XG4gICAgICByZXQuRVMuYnVmZmVyID0gYnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgc3RyZWFtSUQgPSBidWZmZXIucmVhZFVpbnQ4KCk7XG4gICAgICBpZiAoc3RyZWFtSUQgPj0gMHhlMCAmJiBzdHJlYW1JRCA8PSAweGVmKSB7XG4gICAgICAgIHJldC50eXBlID0gJ3ZpZGVvJztcbiAgICAgIH1cbiAgICAgIGlmIChzdHJlYW1JRCA+PSAweGMwICYmIHN0cmVhbUlEIDw9IDB4ZGYpIHtcbiAgICAgICAgcmV0LnR5cGUgPSAnYXVkaW8nO1xuICAgICAgfVxuICAgICAgbGV0IHBhY2tldExlbmd0aCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICByZXQucGFja2V0TGVuZ3RoID0gcGFja2V0TGVuZ3RoO1xuICAgICAgaWYgKHJldC50eXBlID09PSAndmlkZW8nIHx8IHJldC50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgIGxldCBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICBsZXQgZmlyc3QgPSBuZXh0ID4+PiA2O1xuICAgICAgICBpZiAoZmlyc3QgIT09IDB4MDIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Vycm9yIHdoZW4gcGFyc2UgcGVzIGhlYWRlcicpO1xuICAgICAgICB9XG4gICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQ4KCk7XG4gICAgICAgIHJldC5wdHNEVFNGbGFnID0gbmV4dCA+Pj4gNjtcbiAgICAgICAgcmV0LmVzY3JGbGFnID0gbmV4dCA+Pj4gNSAmIDB4MDE7XG4gICAgICAgIHJldC5lc1JhdGVGbGFnID0gbmV4dCA+Pj4gNCAmIDB4MDE7XG4gICAgICAgIHJldC5kc21GbGFnID0gbmV4dCA+Pj4gMyAmIDB4MDE7XG4gICAgICAgIHJldC5hZGRpdGlvbmFsRmxhZyA9IG5leHQgPj4+IDIgJiAweDAxO1xuICAgICAgICByZXQuY3JjRmxhZyA9IG5leHQgPj4+IDEgJiAweDAxO1xuICAgICAgICByZXQuZXh0ZW5zaW9uRmxhZyA9IG5leHQgJiAweDAxO1xuICAgICAgICByZXQucGVzSGVhZGVyTGVuZ3RoID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICBsZXQgTjEgPSByZXQucGVzSGVhZGVyTGVuZ3RoO1xuXG4gICAgICAgIGlmIChyZXQucHRzRFRTRmxhZyA9PT0gMikge1xuICAgICAgICAgIGxldCBwdHMgPSBbXTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEgJiAweDA3KTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBwdHMucHVzaChuZXh0ID4+PiAxKTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBwdHMucHVzaChuZXh0ID4+PiAxKTtcbiAgICAgICAgICByZXQucHRzID0gKHB0c1swXSA8PCAzMCB8IHB0c1sxXSA8PCAxNSB8IHB0c1syXSk7XG4gICAgICAgICAgTjEgLT0gNTtcbiAgICAgICAgICAvLyDop4bpopHlpoLmnpzmsqHmnIlkdHPnlKhwdHNcbiAgICAgICAgICBpZiAocmV0LnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgIHJldC5kdHMgPSByZXQucHRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LnB0c0RUU0ZsYWcgPT09IDMpIHtcbiAgICAgICAgICBsZXQgcHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBwdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LnB0cyA9IChwdHNbMF0gPDwgMzAgfCBwdHNbMV0gPDwgMTUgfCBwdHNbMl0pO1xuICAgICAgICAgIGxldCBkdHMgPSBbXTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICAgIGR0cy5wdXNoKG5leHQgPj4+IDEgJiAweDA3KTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBkdHMucHVzaChuZXh0ID4+PiAxKTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBkdHMucHVzaChuZXh0ID4+PiAxKTtcbiAgICAgICAgICByZXQuZHRzID0gKGR0c1swXSA8PCAzMCB8IGR0c1sxXSA8PCAxNSB8IGR0c1syXSk7XG4gICAgICAgICAgTjEgLT0gMTA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5lc2NyRmxhZyA9PT0gMSkge1xuICAgICAgICAgIGxldCBlc2NyID0gW11cbiAgICAgICAgICBsZXQgZXggPSBbXTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ID4+PiAzICYgMHgwNyk7XG4gICAgICAgICAgZXNjci5wdXNoKG5leHQgJiAweDAzKTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCA+Pj4gMTMpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZXNjci5wdXNoKG5leHQgPj4+IDEzKTtcbiAgICAgICAgICBleC5wdXNoKG5leHQgJiAweDAzKTtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICAgIGV4LnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LmVzY3IgPSAoZXNjclswXSA8PCAzMCB8IGVzY3JbMV0gPDwgMjggfCBlc2NyWzJdIDw8IDE1IHwgZXNjclszXSA8PCAxMyB8IGVzY3JbNF0pICogMzAwICsgKGV4WzBdIDw8IDcgfCBleFsxXSk7XG4gICAgICAgICAgTjEgLT0gNjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmVzUmF0ZUZsYWcgPT09IDEpIHtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MjQoKTtcbiAgICAgICAgICByZXQuZXNSYXRlID0gbmV4dCA+Pj4gMSAmIDB4M2ZmZmZmO1xuICAgICAgICAgIE4xIC09IDM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5kc21GbGFnID09PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3Qgc3VwcG9ydCBEU01fdHJpY2tfbW9kZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuYWRkaXRpb25hbEZsYWcgPT09IDEpIHtcbiAgICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICAgIHJldC5hZGRpdGlvbmFsQ29weUluZm8gPSBuZXh0ICYgMHg3ZjtcbiAgICAgICAgICBOMSAtPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuY3JjRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHJldC5wZXNDUkMgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIE4xIC09IDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5leHRlbnNpb25GbGFnID09PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3Qgc3VwcG9ydCBleHRlbnNpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTjEgPiAwKSB7XG4gICAgICAgICAgYnVmZmVyLnNraXAoTjEpO1xuICAgICAgICB9XG4gICAgICAgIHJldC5FUyA9IFRzRGVtdXhlci5FUyhidWZmZXIsIHJldC50eXBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZm9ybWF0IGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHN0YXRpYyBFUyAoYnVmZmVyLCB0eXBlKSB7XG4gICAgbGV0IG5leHQ7XG4gICAgbGV0IHJldCA9IHt9O1xuICAgIGlmICh0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MzIoKTtcbiAgICAgIGlmIChuZXh0ICE9PSAxKSB7XG4gICAgICAgIGJ1ZmZlci5iYWNrKDQpO1xuICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MjQoKTtcbiAgICAgICAgaWYgKG5leHQgIT09IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2gyNjQgbmFsIGhlYWRlciBwYXJzZSBmYWlsZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnVmZmVyLnNraXAoMik7Ly8gMDkgRjBcbiAgICAgIC8vIFRPRE8gcmVhZG5hbHVcbiAgICAgIHJldC5idWZmZXIgPSBidWZmZXI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgIC8vIGFkdHPnmoTlkIzmraXlrZfoioLvvIwxMuS9jVxuICAgICAgaWYgKG5leHQgPj4+IDQgIT09IDB4ZmZmKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYWFjIEVTIHBhcnNlIEVycm9yJyk7XG4gICAgICB9XG4gICAgICBjb25zdCBmcSA9IFs5NjAwMCwgODgyMDAsIDY0MDAwLCA0ODAwMCwgNDQxMDAsIDMyMDAwLCAyNDAwMCwgMjIwNTAsIDE2MDAwLCAxMjAwMCwgMTEwMjUsIDgwMDAsIDczNTBdO1xuICAgICAgcmV0LmlkID0gKG5leHQgPj4+IDMgJiAweDAxKSA9PT0gMCA/ICdNUEVHLTQnIDogJ01QRUctMic7XG4gICAgICByZXQubGF5ZXIgPSBuZXh0ID4+PiAxICYgMHgwMztcbiAgICAgIHJldC5hYnNlbnQgPSBuZXh0ICYgMHgwMTtcbiAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgcmV0LmF1ZGlvT2JqZWN0VHlwZSA9IChuZXh0ID4+PiAxNCAmIDB4MDMpICsgMTtcbiAgICAgIHJldC5wcm9maWxlID0gcmV0LmF1ZGlvT2JqZWN0VHlwZSAtIDE7XG4gICAgICByZXQuZnJlcXVlbmN5SW5kZXggPSBuZXh0ID4+PiAxMCAmIDB4MGY7XG4gICAgICByZXQuZnJlcXVlbmNlID0gZnFbcmV0LmZyZXF1ZW5jeUluZGV4XTtcbiAgICAgIHJldC5jaGFubmVsID0gbmV4dCA+Pj4gNiAmIDB4MDc7XG4gICAgICByZXQuZnJhbWVMZW5ndGggPSAobmV4dCAmIDB4MDMpIDw8IDExIHwgKGJ1ZmZlci5yZWFkVWludDE2KCkgPj4+IDUpO1xuICAgICAgcmV0LmF1ZGlvQ29uZmlnID0gVHNEZW11eGVyLmdldEF1ZGlvQ29uZmlnKHJldC5hdWRpb09iamVjdFR5cGUsIHJldC5jaGFubmVsLCByZXQuZnJlcXVlbmN5SW5kZXgpO1xuICAgICAgYnVmZmVyLnNraXAoMSk7XG4gICAgICByZXQuYnVmZmVyID0gYnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEVTICR7dHlwZX0gaXMgbm90IHN1cHBvcnRlZGApO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgVFNEVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICAvLyBUT0RPXG4gICAgdHMucGF5bG9hZCA9IHt9O1xuICB9XG5cbiAgc3RhdGljIENBVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgcmV0ID0ge31cbiAgICByZXQudGFibGVJRCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LnNlY3Rpb25JbmRpY2F0b3IgPSBuZXh0ID4+PiA3O1xuICAgIHJldC5zZWN0aW9uTGVuZ3RoID0gbmV4dCAmIDB4MGZmZjtcbiAgICBzdHJlYW0uc2tpcCgyKTtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC52ZXJzaW9uID0gbmV4dCA+Pj4gMztcbiAgICByZXQuY3VycmVudE5leHRJbmRpY2F0b3IgPSBuZXh0ICYgMHgwMTtcbiAgICByZXQuc2VjdGlvbk51bWJlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQubGFzdFNlY3Rpb25OdW1iZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgbGV0IE4gPSAodGhpcy5zZWN0aW9uTGVuZ3RoIC0gOSkgLyA0O1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIGxpc3QucHVzaCh7fSk7XG4gICAgfVxuICAgIHJldC5jcmMzMiA9IHN0cmVhbS5yZWFkVWludDMyKCk7XG4gICAgdHMucGF5bG9hZCA9IHJldDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBdWRpb0NvbmZpZyAoYXVkaW9PYmplY3RUeXBlLCBjaGFubmVsLCBzYW1wbGVJbmRleCkge1xuICAgIGxldCB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKClcbiAgICBsZXQgY29uZmlnO1xuICAgIGxldCBleHRlbnNpb25TYW1wbGVJbmRleDtcbiAgICBpZiAoL2ZpcmVmb3gvaS50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICAgIGlmIChzYW1wbGVJbmRleCA+PSA2KSB7XG4gICAgICAgIGF1ZGlvT2JqZWN0VHlwZSA9IDU7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSg0KTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxlSW5kZXggPSBzYW1wbGVJbmRleCAtIDM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdWRpb09iamVjdFR5cGUgPSAyO1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gc2FtcGxlSW5kZXg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh1c2VyQWdlbnQuaW5kZXhPZignYW5kcm9pZCcpICE9PSAtMSkge1xuICAgICAgYXVkaW9PYmplY3RUeXBlID0gMjtcbiAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gc2FtcGxlSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF1ZGlvT2JqZWN0VHlwZSA9IDU7XG4gICAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7XG4gICAgICBpZiAoc2FtcGxlSW5kZXggPj0gNikge1xuICAgICAgICBleHRlbnNpb25TYW1wbGVJbmRleCA9IHNhbXBsZUluZGV4IC0gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjaGFubmVsID09PSAxKSB7XG4gICAgICAgICAgYXVkaW9PYmplY3RUeXBlID0gMjtcbiAgICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICAgIH1cbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxlSW5kZXggPSBzYW1wbGVJbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25maWdbMF0gPSBhdWRpb09iamVjdFR5cGUgPDwgMztcbiAgICBjb25maWdbMF0gfD0gKHNhbXBsZUluZGV4ICYgMHgwZSkgPj4gMTtcbiAgICBjb25maWdbMV0gPSAoc2FtcGxlSW5kZXggJiAweDAxKSA8PCA3O1xuICAgIGNvbmZpZ1sxXSB8PSBjaGFubmVsIDw8IDM7XG4gICAgaWYgKGF1ZGlvT2JqZWN0VHlwZSA9PT0gNSkge1xuICAgICAgY29uZmlnWzFdIHw9IChleHRlbnNpb25TYW1wbGVJbmRleCAmIDB4MGUpID4+IDE7XG4gICAgICBjb25maWdbMl0gPSAoZXh0ZW5zaW9uU2FtcGxlSW5kZXggJiAweDAxKSA8PCA3O1xuICAgICAgY29uZmlnWzJdIHw9IDIgPDwgMjtcbiAgICAgIGNvbmZpZ1szXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBnZXQgaW5wdXRCdWZmZXIgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMuY29uZmlncy5pbnB1dGJ1ZmZlcik7XG4gIH1cblxuICBnZXQgX3RyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRzRGVtdXhlcjtcbiIsImNsYXNzIFBsYXlsaXN0IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZ3MpIHtcbiAgICB0aGlzLl9iYXNlVVJMID0gJyc7XG4gICAgdGhpcy5fbGlzdCA9IHt9O1xuICAgIHRoaXMuX3RzID0ge307XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICB0aGlzLnNlcXVlbmNlID0gLTE7XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5mcmFnTGVuZ3RoID0gMDtcbiAgICB0aGlzLl9sYXN0Z2V0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2F1ZG9jbGVhciA9IGNvbmZpZ3MuYXV0b2NsZWFyIHx8IGZhbHNlO1xuICB9XG5cbiAgZ2V0IGxpc3QgKCkge1xuICAgIHJldHVybiB0aGlzLl9saXN0O1xuICB9XG5cbiAgc2V0IGJhc2VVUkwgKGJhc2VVUkwpIHtcbiAgICBpZiAodGhpcy5iYXNlVVJMICE9PSBiYXNlVVJMKSB7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB0aGlzLl9iYXNlVVJMID0gYmFzZVVSTDtcbiAgICB9XG4gIH1cblxuICBnZXQgYmFzZVVSTCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jhc2VVUkw7XG4gIH1cblxuICBwdXNoICh0cywgZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuX3RzW3RzXSkge1xuICAgICAgdGhpcy5fdHNbdHNdID0ge2R1cmF0aW9uOiBkdXJhdGlvbiwgZG93bmxvYWRlZDogZmFsc2UsIGRvd25sb2FkaW5nOiBmYWxzZSwgc3RhcnQ6IHRoaXMuZHVyYXRpb259O1xuICAgICAgdGhpcy5fbGlzdFt0aGlzLmR1cmF0aW9uXSA9IHRzO1xuICAgICAgdGhpcy5kdXJhdGlvbiArPSBkdXJhdGlvbjtcbiAgICAgIHRoaXMuZnJhZ0xlbmd0aCArPSAxO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZUZyYWcgKHVybCkge1xuICAgIGlmICh0aGlzLl90c1t1cmxdKSB7XG4gICAgICBpZiAodGhpcy5fdHNbdXJsXS5zdGFydCA+IHRoaXMuX2xhc3RnZXQudGltZSkge1xuICAgICAgICB0aGlzLl9sYXN0Z2V0ID0ge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLl90c1t1cmxdLmR1cmF0aW9uLFxuICAgICAgICAgIHRpbWU6IHRoaXMuX3RzW3VybF0uc3RhcnQsXG4gICAgICAgICAgZG93bmxvYWRlZDogZmFsc2UsXG4gICAgICAgICAgZG93bmxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIHVybDogdXJsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLl9saXN0W3RoaXMuX3RzW3VybF0uc3RhcnRdO1xuICAgICAgZGVsZXRlIHRoaXMuX3RzW3VybF07XG4gICAgICB0aGlzLmZyYWdMZW5ndGggLT0gMTtcbiAgICB9XG4gIH1cblxuICBwdXNoTTNVOCAoZGF0YSwgZGVsZXRlcHJlKSB7XG4gICAgLy8g5bi46KeE5L+h5oGv5pu/5o2iXG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudmVyc2lvbiA9IGRhdGEudmVyc2lvbjtcbiAgICB0aGlzLnRhcmdldGR1cmF0aW9uID0gZGF0YS50YXJnZXRkdXJhdGlvbjtcblxuICAgIC8vIOaWsOWIhueJh+S/oeaBr1xuICAgIGlmIChkYXRhLnNlcXVlbmNlID4gdGhpcy5zZXF1ZW5jZSkge1xuICAgICAgdGhpcy5zZXF1ZW5jZSA9IGRhdGEuc2VxdWVuY2U7XG4gICAgICBsZXQgbmV3ZnJhZ2xpc3QgPSBbXVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmZyYWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBmcmFnID0gZGF0YS5mcmFnc1tpXTtcbiAgICAgICAgaWYgKCF0aGlzLl90c1tmcmFnLnVybF0pIHtcbiAgICAgICAgICBuZXdmcmFnbGlzdC5wdXNoKGZyYWcudXJsKVxuICAgICAgICAgIHRoaXMucHVzaChmcmFnLnVybCwgZnJhZy5kdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkZWxldGVwcmUpIHtcbiAgICAgICAgbGV0IHRzbGlzdCA9IHRoaXMuZ2V0VHNMaXN0KCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHNsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKG5ld2ZyYWdsaXN0LmluZGV4T2YodHNsaXN0W2ldKSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlRnJhZyh0c2xpc3RbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFRzTGlzdCAoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX3RzKTtcbiAgfVxuXG4gIGRvd25sb2FkZWQgKHRzbmFtZSwgaXNsb2FkZWQpIHtcbiAgICBsZXQgdHMgPSB0aGlzLl90c1t0c25hbWVdO1xuICAgIGlmICh0cykge1xuICAgICAgdHMuZG93bmxvYWRlZCA9IGlzbG9hZGVkXG4gICAgfVxuICB9XG5cbiAgZG93bmxvYWRpbmcgKHRzbmFtZSwgbG9hZGluZykge1xuICAgIGxldCB0cyA9IHRoaXMuX3RzW3RzbmFtZV07XG4gICAgaWYgKHRzKSB7XG4gICAgICB0cy5kb3dubG9hZGluZyA9IGxvYWRpbmdcbiAgICB9XG4gIH1cblxuICBnZXRUc0J5TmFtZSAobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl90c1tuYW1lXTtcbiAgfVxuXG4gIGdldFRzICh0aW1lKSB7XG4gICAgbGV0IHRpbWVsaXN0ID0gT2JqZWN0LmtleXModGhpcy5fbGlzdCk7XG4gICAgbGV0IHRzO1xuXG4gICAgaWYgKHRpbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHRoaXMuX2xhc3RnZXQpIHtcbiAgICAgICAgdGltZSA9IHRoaXMuX2xhc3RnZXQudGltZSArIHRoaXMuX2xhc3RnZXQuZHVyYXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGltZWxpc3QubGVuZ3RoIDwgMSB8fCB0aW1lID49IHRoaXMuZHVyYXRpb24pIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRpbWVsaXN0LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KGEpIC0gcGFyc2VGbG9hdChiKVxuICAgIH0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGltZWxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aW1lID49IHBhcnNlSW50KHRpbWVsaXN0W2ldKSkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy5fbGlzdFt0aW1lbGlzdFtpXV07XG4gICAgICAgIGxldCBkb3dubG9hZGVkID0gdGhpcy5fdHNbdXJsXS5kb3dubG9hZGVkO1xuICAgICAgICBsZXQgZG93bmxvYWRpbmcgPSB0aGlzLl90c1t1cmxdLmRvd25sb2FkaW5nO1xuICAgICAgICB0cyA9IHt1cmwsIGRvd25sb2FkZWQsIGRvd25sb2FkaW5nLCB0aW1lOiBwYXJzZUludCh0aW1lbGlzdFtpXSksIGR1cmF0aW9uOiBwYXJzZUludCh0aGlzLl90c1t1cmxdLmR1cmF0aW9uKX07XG4gICAgICAgIGlmICh0aGlzLmF1dG9jbGVhcikge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl90c1t0aGlzLl9sYXN0Z2V0LnVybF07XG4gICAgICAgICAgZGVsZXRlIHRoaXMuX2xpc3RbdGhpcy5fbGFzdGdldC50aW1lXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sYXN0Z2V0ID0gdHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRzO1xuICB9XG5cbiAgY2xlYXIgKCkge1xuICAgIHRoaXMuX2Jhc2VVUkwgPSAnJztcbiAgICB0aGlzLl9saXN0ID0ge307XG4gICAgdGhpcy5fdHMgPSB7fTtcbiAgICB0aGlzLnZlcnNpb24gPSAwO1xuICAgIHRoaXMuc2VxdWVuY2UgPSAtMTtcbiAgICB0aGlzLnRhcmdldGR1cmF0aW9uID0gMDtcbiAgICB0aGlzLmR1cmF0aW9uID0gMDtcbiAgfVxuXG4gIGNsZWFyRG93bmxvYWRlZCAoKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBPYmplY3Qua2V5cyh0aGlzLl90cykubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgdHMgPSB0aGlzLl90c1tPYmplY3Qua2V5cyh0aGlzLl90cylbaV1dO1xuICAgICAgdHMuZG93bmxvYWRlZCA9IGZhbHNlO1xuICAgICAgdHMuZG93bmxvYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9iYXNlVVJMID0gJyc7XG4gICAgdGhpcy5fbGlzdCA9IHt9O1xuICAgIHRoaXMuX3RzID0ge307XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICB0aGlzLnNlcXVlbmNlID0gLTE7XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5mcmFnTGVuZ3RoID0gMDtcbiAgICB0aGlzLl9sYXN0Z2V0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2F1ZG9jbGVhciA9IGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXlsaXN0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZldGNoTG9hZGVyOiByZXF1aXJlKCcuL3NyYy9mZXRjaC1sb2FkZXInKS5kZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgRVZFTlRTIH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuXG5jb25zdCBMT0FERVJfRVZFTlRTID0gRVZFTlRTLkxPQURFUl9FVkVOVFM7XG5jb25zdCBSRUFEX1NUUkVBTSA9IDA7XG5jb25zdCBSRUFEX1RFWFQgPSAxO1xuY29uc3QgUkVBRF9KU09OID0gMjtcbmNvbnN0IFJFQURfQlVGRkVSID0gMztcbmNsYXNzIEZldGNoTG9hZGVyIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZ3MpIHtcbiAgICB0aGlzLmNvbmZpZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWdzKTtcbiAgICB0aGlzLnVybCA9IG51bGxcbiAgICB0aGlzLnN0YXR1cyA9IDBcbiAgICB0aGlzLmVycm9yID0gbnVsbFxuICAgIHRoaXMuX3JlYWRlciA9IG51bGw7XG4gICAgdGhpcy5fY2FuY2VsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlYWR0eXBlID0gdGhpcy5jb25maWdzLnJlYWR0eXBlO1xuICAgIHRoaXMuYnVmZmVyID0gdGhpcy5jb25maWdzLmJ1ZmZlciB8fCAnTE9BREVSX0JVRkZFUic7XG4gICAgdGhpcy5fbG9hZGVyVGFza05vID0gMDtcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMub24oTE9BREVSX0VWRU5UUy5MQURFUl9TVEFSVCwgdGhpcy5sb2FkLmJpbmQodGhpcykpXG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnbG9hZGVyJ1xuICB9XG5cbiAgbG9hZCAodXJsLCBvcHRzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLl9jYW5jZWxlZCA9IGZhbHNlO1xuXG4gICAgLy8gVE9ETzogQWRkIFJhbmdlc1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLmdldFBhcmFtcyhvcHRzKVxuICAgIF90aGlzLmxvYWRpbmcgPSB0cnVlXG4gICAgcmV0dXJuIGZldGNoKHRoaXMudXJsLCBwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgX3RoaXMuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzXG4gICAgICAgIHJldHVybiBfdGhpcy5fb25GZXRjaFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfRVJST1IsIF90aGlzLCByZXNwb25zZSk7XG4gICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSAge1xuICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9FUlJPUiwgX3RoaXMsIGVycm9yKTtcbiAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvci5tZXNzYWdlKVxuICAgIH0pXG4gIH1cblxuICBfb25GZXRjaFJlc3BvbnNlIChyZXNwb25zZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGJ1ZmZlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UodGhpcy5idWZmZXIpO1xuICAgIHRoaXMuX2xvYWRlclRhc2tObysrO1xuICAgIGxldCB0YXNrbm8gPSB0aGlzLl9sb2FkZXJUYXNrTm87XG4gICAgaWYgKHJlc3BvbnNlLm9rID09PSB0cnVlKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMucmVhZHR5cGUpIHtcbiAgICAgICAgY2FzZSBSRUFEX0pTT046XG4gICAgICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5fY2FuY2VsZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSRUFEX1RFWFQ6XG4gICAgICAgICAgcmVzcG9uc2UudGV4dCgpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5fY2FuY2VsZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSRUFEX0JVRkZFUjpcbiAgICAgICAgICByZXNwb25zZS5hcnJheUJ1ZmZlcigpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5fY2FuY2VsZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKG5ldyBVaW50OEFycmF5KGRhdGEpKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUkVBRF9TVFJFQU06XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX29uUmVhZGVyKHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCksIHRhc2tubyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX29uUmVhZGVyIChyZWFkZXIsIHRhc2tubykge1xuICAgIGxldCBidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMuYnVmZmVyKTtcblxuICAgIGlmICghYnVmZmVyKSB7XG4gICAgICB0aGlzLl9yZWFkZXIuY2FuY2VsKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVhZGVyID0gcmVhZGVyXG4gICAgaWYgKHRoaXMubG9hZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBfdGhpcyA9IHRoaXNcbiAgICAvLyByZWFkZXIgcmVhZCBmdW5jdGlvbiByZXR1cm5zIGEgUHJvbWlzZS4gZ2V0IGRhdGEgd2hlbiBjYWxsYmFjayBhbmQgaGFzIHZhbHVlLmRvbmUgd2hlbiBkaXNjb25uZWN0ZWQuXG4gICAgLy8gcmVhZOaWueazlei/lOWbnuS4gOS4qlByb21pc2UuIOWbnuiwg+S4reWPr+S7peiOt+WPluWIsOaVsOaNruOAguW9k3ZhbHVlLmRvbmXlrZjlnKjml7bvvIzor7TmmI7pk77mjqXmlq3lvIDjgIJcbiAgICB0aGlzLl9yZWFkZXIgJiYgdGhpcy5fcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIGlmICh2YWwuZG9uZSkge1xuICAgICAgICAvLyBUT0RPOiDlrozmiJDlpITnkIZcbiAgICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICAgIF90aGlzLnN0YXR1cyA9IDA7XG4gICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGJ1ZmZlcilcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5fY2FuY2VsZWQpIHtcbiAgICAgICAgX3RoaXMuX3JlYWRlci5jYW5jZWwoKVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBidWZmZXIucHVzaCh2YWwudmFsdWUpXG4gICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0RBVEFMT0FERUQsIGJ1ZmZlcilcbiAgICAgIHJldHVybiBfdGhpcy5fb25SZWFkZXIocmVhZGVyLCB0YXNrbm8pXG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfRVJST1IsIF90aGlzLCBlcnJvcik7XG4gICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgfSlcbiAgfVxuXG4gIGdldFBhcmFtcyAob3B0cykge1xuICAgIGxldCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cylcbiAgICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcblxuICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgIG1vZGU6ICdjb3JzJyxcbiAgICAgIGNhY2hlOiAnZGVmYXVsdCdcbiAgICB9XG5cbiAgICAvLyBhZGQgY3VzdG1vciBoZWFkZXJzXG4gICAgLy8g5re75Yqg6Ieq5a6a5LmJ5aS0XG4gICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZ3MuaGVhZGVycyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGxldCBjb25maWdIZWFkZXJzID0gdGhpcy5jb25maWdzLmhlYWRlcnNcbiAgICAgIGZvciAobGV0IGtleSBpbiBjb25maWdIZWFkZXJzKSB7XG4gICAgICAgIGlmIChjb25maWdIZWFkZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIGNvbmZpZ0hlYWRlcnNba2V5XSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5oZWFkZXJzID09PSAnb2JqZWN0Jykge1xuICAgICAgbGV0IG9wdEhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnNcbiAgICAgIGZvciAobGV0IGtleSBpbiBvcHRIZWFkZXJzKSB7XG4gICAgICAgIGlmIChvcHRIZWFkZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIG9wdEhlYWRlcnNba2V5XSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNvcnMgPT09IGZhbHNlKSB7XG4gICAgICBwYXJhbXMubW9kZSA9ICdzYW1lLW9yaWdpbidcbiAgICB9XG5cbiAgICAvLyB3aXRoQ3JlZGVudGlhbHMgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdFxuICAgIC8vIHdpdGhDcmVkZW50aWFscyDlnKjpu5jorqTmg4XlhrXkuIvkuI3ooqvkvb/nlKjjgIJcbiAgICBpZiAob3B0aW9ucy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHBhcmFtcy5jcmVkZW50aWFscyA9ICdpbmNsdWRlJ1xuICAgIH1cblxuICAgIC8vIFRPRE86IEFkZCByYW5nZXM7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIGNhbmNlbCAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRlcikge1xuICAgICAgdGhpcy5fcmVhZGVyLmNhbmNlbCgpXG4gICAgICB0aGlzLl9yZWFkZXIgPSBudWxsXG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgdGhpcy5fY2FuY2VsZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuY2FuY2VsKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmV0Y2hMb2FkZXJcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBNcDRSZW11eGVyOiByZXF1aXJlKCcuL3NyYy9tcDQnKS5kZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuXG4vLyBjb25zdCBVSU5UMzJfTUFYID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcbmNsYXNzIEZtcDQge1xuICBzdGF0aWMgc2l6ZSAodmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLndyaXRlVWludDMyKHZhbHVlKVxuICB9XG4gIHN0YXRpYyBpbml0Qm94IChzaXplLCBuYW1lLCAuLi5jb250ZW50KSB7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZShzaXplKSwgRm1wNC50eXBlKG5hbWUpLCAuLi5jb250ZW50KVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIGV4dGVuc2lvbiAodmVyc2lvbiwgZmxhZykge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXG4gICAgICB2ZXJzaW9uLFxuICAgICAgKGZsYWcgPj4gMTYpICYgMHhmZixcbiAgICAgIChmbGFnID4+IDgpICYgMHhmZixcbiAgICAgIGZsYWcgJiAweGZmXG4gICAgXSlcbiAgfVxuICBzdGF0aWMgZnR5cCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyNCwgJ2Z0eXAnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDY5LCAweDczLCAweDZGLCAweDZELCAvLyBpc29tLFxuICAgICAgMHgwLCAweDAsIDB4MDAsIDB4MDEsIC8vIG1pbm9yX3ZlcnNpb246IDB4MDFcbiAgICAgIDB4NjksIDB4NzMsIDB4NkYsIDB4NkQsIC8vIGlzb21cbiAgICAgIDB4NjEsIDB4NzYsIDB4NjMsIDB4MzEgLy8gYXZjMVxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBtb292ICh7IHR5cGUsIG1ldGEgfSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCBtdmhkID0gRm1wNC5tdmhkKG1ldGEuZHVyYXRpb24sIG1ldGEudGltZXNjYWxlKVxuICAgIGxldCB0cmFrXG5cbiAgICBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgdHJhayA9IEZtcDQudmlkZW9UcmFrKG1ldGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYWsgPSBGbXA0LmF1ZGlvVHJhayhtZXRhKVxuICAgIH1cblxuICAgIGxldCBtdmV4ID0gRm1wNC5tdmV4KG1ldGEuZHVyYXRpb24sIG1ldGEudGltZXNjYWxlIHx8IDEwMDAsIG1ldGEuaWQpO1xuICAgIFttdmhkLCB0cmFrLCBtdmV4XS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21vb3YnLCBtdmhkLCB0cmFrLCBtdmV4KVxuICB9XG4gIHN0YXRpYyBtdmhkIChkdXJhdGlvbiwgdGltZXNjYWxlID0gMTAwMCkge1xuICAgIC8vIGR1cmF0aW9uICo9IHRpbWVzY2FsZTtcbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3MgICAgIDHkvY3nmoRib3jniYjmnKwrM+S9jWZsYWdzICAgYm9454mI5pys77yMMOaIljHvvIzkuIDoiKzkuLow44CC77yI5Lul5LiL5a2X6IqC5pWw5Z2H5oyJdmVyc2lvbj0w77yJXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1lICAgIOWIm+W7uuaXtumXtCAg77yI55u45a+55LqOVVRD5pe26Ze0MTkwNC0wMS0wMembtueCueeahOenkuaVsO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uX3RpbWUgICDkv67mlLnml7bpl7RcblxuICAgICAgLyoqXG4gICAgICAgICAgICAgKiB0aW1lc2NhbGU6IDQgYnl0ZXPmlofku7blqpLkvZPlnKgx56eS5pe26Ze05YaF55qE5Yi75bqm5YC877yM5Y+v5Lul55CG6Kej5Li6MeenkumVv+W6plxuICAgICAgICAgICAgICovXG4gICAgICAodGltZXNjYWxlID4+PiAyNCkgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSA+Pj4gMTYpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUgPj4+IDgpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUpICYgMHhGRixcblxuICAgICAgLyoqXG4gICAgICAgICAgICAgKiBkdXJhdGlvbjogNCBieXRlc+ivpXRyYWNr55qE5pe26Ze06ZW/5bqm77yM55SoZHVyYXRpb27lkox0aW1lIHNjYWxl5YC85Y+v5Lul6K6h566XdHJhY2vml7bplb/vvIzmr5TlpoJhdWRpbyB0cmFja+eahHRpbWUgc2NhbGUgPSA4MDAwLFxuICAgICAgICAgICAgICogZHVyYXRpb24gPSA1NjAxMjjvvIzml7bplb/kuLo3MC4wMTbvvIx2aWRlbyB0cmFja+eahHRpbWUgc2NhbGUgPSA2MDAsIGR1cmF0aW9uID0gNDIwMDDvvIzml7bplb/kuLo3MFxuICAgICAgICAgICAgICovXG4gICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDgpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbikgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8gUHJlZmVycmVkIHJhdGU6IDEuMCAgIOaOqOiNkOaSreaUvumAn+eOh++8jOmrmDE25L2N5ZKM5L2OMTbkvY3liIbliKvkuLrlsI/mlbDngrnmlbTmlbDpg6jliIblkozlsI/mlbDpg6jliIbvvIzljbNbMTYuMTZdIOagvOW8j++8jOivpeWAvOS4ujEuMO+8iDB4MDAwMTAwMDDvvInooajnpLrmraPluLjliY3lkJHmkq3mlL5cbiAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJlZmVycmVkVm9sdW1lKDEuMCwgMmJ5dGVzKSArIHJlc2VydmVkKDJieXRlcylcbiAgICAgICAgICAgICAqIOS4jnJhdGXnsbvkvLzvvIxbOC44XSDmoLzlvI/vvIwxLjDvvIgweDAxMDDvvInooajnpLrmnIDlpKfpn7Pph49cbiAgICAgICAgICAgICAqL1xuICAgICAgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vICByZXNlcnZlZDogNCArIDQgYnl0ZXPkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyAtLS0tYmVnaW4gY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIOinhumikeWPmOaNouefqemYtSAgIOe6v+aAp+S7o+aVsFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDQwLCAweDAwLCAweDAwLCAweDAwLCAvLyAtLS0tZW5kIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBwcmVfZGVmaW5lZCA2ICogNCBieXRlcy0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmUtZGVmaW5lZCDkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gLS0tLWVuZCBwcmVfZGVmaW5lZCA2ICogNCBieXRlcy0tLS1cbiAgICAgIDB4RkYsIDB4RkYsIDB4RkYsIDB4RkYgLy8gbmV4dF90cmFja19JRCDkuIvkuIDkuKp0cmFja+S9v+eUqOeahGlk5Y+3XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDggKyBieXRlcy5sZW5ndGgsICdtdmhkJywgbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpKVxuICB9XG4gIHN0YXRpYyB2aWRlb1RyYWsgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcblxuICAgIGxldCB0a2hkID0gRm1wNC50a2hkKHtcbiAgICAgIGlkOiAxLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICB3aWR0aDogZGF0YS5wcmVzZW50V2lkdGgsXG4gICAgICBoZWlnaHQ6IGRhdGEucHJlc2VudEhlaWdodCxcbiAgICAgIHR5cGU6ICd2aWRlbydcbiAgICB9KVxuICAgIGxldCBtZGlhID0gRm1wNC5tZGlhKHtcbiAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIGF2Y2M6IGRhdGEuYXZjYyxcbiAgICAgIHBhclJhdGlvOiBkYXRhLnBhclJhdGlvLFxuICAgICAgd2lkdGg6IGRhdGEucHJlc2VudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkYXRhLnByZXNlbnRIZWlnaHRcbiAgICB9KTtcbiAgICBbdGtoZCwgbWRpYV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFrJywgdGtoZCwgbWRpYSlcbiAgfVxuICBzdGF0aWMgYXVkaW9UcmFrIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IHRraGQgPSBGbXA0LnRraGQoe1xuICAgICAgaWQ6IDIsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgIH0pXG4gICAgbGV0IG1kaWEgPSBGbXA0Lm1kaWEoe1xuICAgICAgdHlwZTogJ2F1ZGlvJyxcbiAgICAgIHRpbWVzY2FsZTogZGF0YS50aW1lc2NhbGUgfHwgMTAwMCxcbiAgICAgIGR1cmF0aW9uOiBkYXRhLmR1cmF0aW9uLFxuICAgICAgY2hhbm5lbENvdW50OiBkYXRhLmNoYW5uZWxDb3VudCxcbiAgICAgIHNhbXBsZXJhdGU6IGRhdGEuc2FtcGxlUmF0ZSxcbiAgICAgIGNvbmZpZzogZGF0YS5jb25maWdcbiAgICB9KTtcbiAgICBbdGtoZCwgbWRpYV0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFrJywgdGtoZCwgbWRpYSlcbiAgfVxuICBzdGF0aWMgdGtoZCAoZGF0YSkge1xuICAgIGxldCBpZCA9IGRhdGEuaWRcbiAgICBsZXQgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uXG4gICAgbGV0IHdpZHRoID0gZGF0YS53aWR0aFxuICAgIGxldCBoZWlnaHQgPSBkYXRhLmhlaWdodFxuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwNywgLy8gdmVyc2lvbigwKSArIGZsYWdzIDHkvY3niYjmnKwgYm9454mI5pys77yMMOaIljHvvIzkuIDoiKzkuLow44CC77yI5Lul5LiL5a2X6IqC5pWw5Z2H5oyJdmVyc2lvbj0w77yJ5oyJ5L2N5oiW5pON5L2c57uT5p6c5YC877yM6aKE5a6a5LmJ5aaC5LiL77yaXG4gICAgICAvLyAweDAwMDAwMSB0cmFja19lbmFibGVk77yM5ZCm5YiZ6K+ldHJhY2vkuI3ooqvmkq3mlL7vvJtcbiAgICAgIC8vIDB4MDAwMDAyIHRyYWNrX2luX21vdmll77yM6KGo56S66K+ldHJhY2vlnKjmkq3mlL7kuK3ooqvlvJXnlKjvvJtcbiAgICAgIC8vIDB4MDAwMDA0IHRyYWNrX2luX3ByZXZpZXfvvIzooajnpLror6V0cmFja+WcqOmihOiniOaXtuiiq+W8leeUqOOAglxuICAgICAgLy8g5LiA6Iis6K+l5YC85Li6N++8jDErMis0IOWmguaenOS4gOS4quWqkuS9k+aJgOaciXRyYWNr5Z2H5pyq6K6+572udHJhY2tfaW5fbW92aWXlkox0cmFja19pbl9wcmV2aWV377yM5bCG6KKr55CG6Kej5Li65omA5pyJdHJhY2vlnYforr7nva7kuobov5nkuKTpobnvvJvlr7nkuo5oaW50IHRyYWNr77yM6K+l5YC85Li6MFxuICAgICAgLy8gaGludCB0cmFjayDov5nkuKrnibnmrornmoR0cmFja+W5tuS4jeWMheWQq+WqkuS9k+aVsOaNru+8jOiAjOaYr+WMheWQq+S6huS4gOS6m+WwhuWFtuS7luaVsOaNrnRyYWNr5omT5YyF5oiQ5rWB5aqS5L2T55qE5oyH56S65L+h5oGv44CCXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBjcmVhdGlvbl90aW1l5Yib5bu65pe26Ze077yI55u45a+55LqOVVRD5pe26Ze0MTkwNC0wMS0wMembtueCueeahOenkuaVsO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbW9kaWZpY2F0aW9uIHRpbWUg5L+u5pS55pe26Ze0XG4gICAgICAoaWQgPj4+IDI0KSAmIDB4RkYsIC8vIHRyYWNrX0lEOiA0IGJ5dGVzIGlk5Y+377yM5LiN6IO96YeN5aSN5LiU5LiN6IO95Li6MFxuICAgICAgKGlkID4+PiAxNikgJiAweEZGLFxuICAgICAgKGlkID4+PiA4KSAmIDB4RkYsXG4gICAgICAoaWQpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiA0IGJ5dGVzICAgIOS/neeVmeS9jVxuICAgICAgKGR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBkdXJhdGlvbjogNCBieXRlcyB0cmFja+eahOaXtumXtOmVv+W6plxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiAyICogNCBieXRlcyAgICDkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBsYXllcigyYnl0ZXMpICsgYWx0ZXJuYXRlX2dyb3VwKDJieXRlcykgIOinhumikeWxgu+8jOm7mOiupOS4ujDvvIzlgLzlsI/nmoTlnKjkuIrlsYIudHJhY2vliIbnu4Tkv6Hmga/vvIzpu5jorqTkuLow6KGo56S66K+ldHJhY2vmnKrkuI7lhbbku5Z0cmFja+aciee+pOe7hOWFs+ezu1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdm9sdW1lKDJieXRlcykgKyByZXNlcnZlZCgyYnl0ZXMpICAgIFs4LjhdIOagvOW8j++8jOWmguaenOS4uumfs+mikXRyYWNr77yMMS4w77yIMHgwMTAw77yJ6KGo56S65pyA5aSn6Z+z6YeP77yb5ZCm5YiZ5Li6MCAgICvkv53nlZnkvY1cbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBjb21wb3NpdGlvbiBtYXRyaXgtLS0tXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyDop4bpopHlj5jmjaLnn6npmLVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgKHdpZHRoID4+PiA4KSAmIDB4RkYsIC8vIC8v5a695bqmXG4gICAgICAod2lkdGgpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAoaGVpZ2h0ID4+PiA4KSAmIDB4RkYsIC8vIOmrmOW6plxuICAgICAgKGhlaWdodCkgJiAweEZGLFxuICAgICAgMHgwMCwgMHgwMFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoLCAndGtoZCcsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIGVkdHMgKGRhdGEpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvblxuICAgIGxldCBtZWRpYVRpbWUgPSBkYXRhLm1lZGlhVGltZVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMzYpLCBGbXA0LnR5cGUoJ2VkdHMnKSlcbiAgICAvLyBlbHN0XG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSgyOCksIEZtcDQudHlwZSgnZWxzdCcpKVxuICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeSBjb3VudFxuICAgICAgKGR1cmF0aW9uID4+IDI0KSAmIDB4ZmYsIChkdXJhdGlvbiA+PiAxNikgJiAweGZmLCAoZHVyYXRpb24gPj4gOCkgJiAweGZmLCBkdXJhdGlvbiAmIDB4ZmYsXG4gICAgICAobWVkaWFUaW1lID4+IDI0KSAmIDB4ZmYsIChtZWRpYVRpbWUgPj4gMTYpICYgMHhmZiwgKG1lZGlhVGltZSA+PiA4KSAmIDB4ZmYsIG1lZGlhVGltZSAmIDB4ZmYsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxIC8vIG1lZGlhIHJhdGVcbiAgICBdKSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBtZGlhIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IG1kaGQgPSBGbXA0Lm1kaGQoZGF0YS50aW1lc2NhbGUsIGRhdGEuZHVyYXRpb24pXG4gICAgbGV0IGhkbHIgPSBGbXA0LmhkbHIoZGF0YS50eXBlKVxuICAgIGxldCBtaW5mID0gRm1wNC5taW5mKGRhdGEpO1xuICAgIFttZGhkLCBoZGxyLCBtaW5mXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21kaWEnLCBtZGhkLCBoZGxyLCBtaW5mKVxuICB9XG4gIHN0YXRpYyBtZGhkICh0aW1lc2NhbGUgPSAxMDAwLCBkdXJhdGlvbikge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY3JlYXRpb25fdGltZSAgICDliJvlu7rml7bpl7RcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1vZGlmaWNhdGlvbl90aW1l5L+u5pS55pe26Ze0XG4gICAgICAodGltZXNjYWxlID4+PiAyNCkgJiAweEZGLCAvLyB0aW1lc2NhbGU6IDQgYnl0ZXMgICAg5paH5Lu25aqS5L2T5ZyoMeenkuaXtumXtOWGheeahOWIu+W6puWAvO+8jOWPr+S7peeQhuino+S4ujHnp5Lplb/luqZcbiAgICAgICh0aW1lc2NhbGUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlID4+PiA4KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlKSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsIC8vIGR1cmF0aW9uOiA0IGJ5dGVzICB0cmFja+eahOaXtumXtOmVv+W6plxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4NTUsIDB4QzQsIC8vIGxhbmd1YWdlOiB1bmQgKHVuZGV0ZXJtaW5lZCkg5aqS5L2T6K+t6KiA56CB44CC5pyA6auY5L2N5Li6MO+8jOWQjumdojE15L2N5Li6M+S4quWtl+espu+8iOingUlTTyA2MzktMi9U5qCH5YeG5Lit5a6a5LmJ77yJXG4gICAgICAweDAwLCAweDAwIC8vIHByZV9kZWZpbmVkID0gMFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxMiArIGNvbnRlbnQuYnl0ZUxlbmd0aCwgJ21kaGQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgaGRsciAodHlwZSkge1xuICAgIGxldCB2YWx1ZSA9IFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmVfZGVmaW5lZFxuICAgICAgMHg3NiwgMHg2OSwgMHg2NCwgMHg2NSwgLy8gaGFuZGxlcl90eXBlOiAndmlkZSdcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4NTYsIDB4NjksIDB4NjQsIDB4NjUsXG4gICAgICAweDZmLCAweDQ4LCAweDYxLCAweDZlLFxuICAgICAgMHg2NCwgMHg2YywgMHg2NSwgMHg3MiwgMHgwMCAvLyBuYW1lOiAnVmlkZW9IYW5kbGVyJ1xuICAgIF1cbiAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgdmFsdWUuc3BsaWNlKDgsIDQsIC4uLlsweDczLCAweDZmLCAweDc1LCAweDZlXSlcbiAgICAgIHZhbHVlLnNwbGljZSgyNCwgMTMsIC4uLlsweDUzLCAweDZmLCAweDc1LCAweDZlLFxuICAgICAgICAweDY0LCAweDQ4LCAweDYxLCAweDZlLFxuICAgICAgICAweDY0LCAweDZjLCAweDY1LCAweDcyLCAweDAwXSlcbiAgICB9XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgdmFsdWUubGVuZ3RoLCAnaGRscicsIG5ldyBVaW50OEFycmF5KHZhbHVlKSlcbiAgfVxuICBzdGF0aWMgbWluZiAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB2bWhkID0gZGF0YS50eXBlID09PSAndmlkZW8nID8gRm1wNC52bWhkKCkgOiBGbXA0LnNtaGQoKVxuICAgIGxldCBkaW5mID0gRm1wNC5kaW5mKClcbiAgICBsZXQgc3RibCA9IEZtcDQuc3RibChkYXRhKTtcbiAgICBbdm1oZCwgZGluZiwgc3RibF0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICdtaW5mJywgdm1oZCwgZGluZiwgc3RibClcbiAgfVxuICBzdGF0aWMgdm1oZCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyMCwgJ3ZtaGQnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAxLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgLy8gZ3JhcGhpY3Ntb2RlXG4gICAgICAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAgLy8gb3Bjb2xvclxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBzbWhkICgpIHtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc21oZCcsIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAvLyBiYWxhbmNlXG4gICAgICAweDAwLCAweDAwIC8vIHJlc2VydmVkXG4gICAgXSkpXG4gIH1cbiAgc3RhdGljIGRpbmYgKCkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgZHJlZiA9IFsweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeV9jb3VudFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwYywgLy8gZW50cnlfc2l6ZVxuICAgICAgMHg3NSwgMHg3MiwgMHg2YywgMHgyMCwgLy8gJ3VybCcgdHlwZVxuICAgICAgMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAxIC8vIGVudHJ5X2ZsYWdzXG4gICAgXVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMzYpLCBGbXA0LnR5cGUoJ2RpbmYnKSwgRm1wNC5zaXplKDI4KSwgRm1wNC50eXBlKCdkcmVmJyksIG5ldyBVaW50OEFycmF5KGRyZWYpKVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIHN0YmwgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgc3RzZCA9IEZtcDQuc3RzZChkYXRhKVxuICAgIGxldCBzdHRzID0gRm1wNC5zdHRzKClcbiAgICBsZXQgc3RzYyA9IEZtcDQuc3RzYygpXG4gICAgbGV0IHN0c3ogPSBGbXA0LnN0c3ooKVxuICAgIGxldCBzdGNvID0gRm1wNC5zdGNvKCk7XG4gICAgW3N0c2QsIHN0dHMsIHN0c2MsIHN0c3osIHN0Y29dLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnc3RibCcsIHN0c2QsIHN0dHMsIHN0c2MsIHN0c3osIHN0Y28pXG4gIH1cbiAgc3RhdGljIHN0c2QgKGRhdGEpIHtcbiAgICBsZXQgY29udGVudFxuICAgIGlmIChkYXRhLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIC8vIGlmICghZGF0YS5pc0FBQyAmJiBkYXRhLmNvZGVjID09PSAnbXA0Jykge1xuICAgICAgLy8gICAgIGNvbnRlbnQgPSBGTVA0Lm1wMyhkYXRhKTtcbiAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAvL1xuICAgICAgLy8gfVxuICAgICAgLy8g5pSv5oyBbXA0YVxuICAgICAgY29udGVudCA9IEZtcDQubXA0YShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ID0gRm1wNC5hdmMxKGRhdGEpXG4gICAgfVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYgKyBjb250ZW50LmJ5dGVMZW5ndGgsICdzdHNkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIG5ldyBVaW50OEFycmF5KFsweDAwLCAweDAwLCAweDAwLCAweDAxXSksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG1wNGEgKGRhdGEpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSwgLy8gZGF0YV9yZWZlcmVuY2VfaW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgZGF0YS5jaGFubmVsQ291bnQsIC8vIGNoYW5uZWxjb3VudFxuICAgICAgMHgwMCwgMHgxMCwgLy8gc2FtcGxlU2l6ZToxNmJpdHNcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkMlxuICAgICAgKGRhdGEuc2FtcGxlcmF0ZSA+PiA4KSAmIDB4ZmYsXG4gICAgICBkYXRhLnNhbXBsZXJhdGUgJiAweGZmLCAvL1xuICAgICAgMHgwMCwgMHgwMFxuICAgIF0pXG4gICAgbGV0IGVzZHMgPSBGbXA0LmVzZHMoZGF0YS5jb25maWcpXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoICsgZXNkcy5ieXRlTGVuZ3RoLCAnbXA0YScsIGNvbnRlbnQsIGVzZHMpXG4gIH1cbiAgc3RhdGljIGVzZHMgKGNvbmZpZyA9IFs0MywgMTQ2LCA4LCAwXSkge1xuICAgIGNvbnN0IGNvbmZpZ2xlbiA9IGNvbmZpZy5sZW5ndGhcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG5cbiAgICAgIDB4MDMsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgxNyArIGNvbmZpZ2xlbiwgLy8gbGVuZ3RoXG4gICAgICAweDAwLCAweDAxLCAvLyBlc19pZFxuICAgICAgMHgwMCwgLy8gc3RyZWFtX3ByaW9yaXR5XG5cbiAgICAgIDB4MDQsIC8vIGRlc2NyaXB0b3JfdHlwZVxuICAgICAgMHgwZiArIGNvbmZpZ2xlbiwgLy8gbGVuZ3RoXG4gICAgICAweDQwLCAvLyBjb2RlYyA6IG1wZWc0X2F1ZGlvXG4gICAgICAweDE1LCAvLyBzdHJlYW1fdHlwZVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gYnVmZmVyX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGF2Z0JpdHJhdGVcblxuICAgICAgMHgwNSAvLyBkZXNjcmlwdG9yX3R5cGVcbiAgICBdLmNvbmNhdChbY29uZmlnbGVuXSkuY29uY2F0KGNvbmZpZykuY29uY2F0KFsweDA2LCAweDAxLCAweDAyXSkpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSg4ICsgY29udGVudC5ieXRlTGVuZ3RoKSwgRm1wNC50eXBlKCdlc2RzJyksIGNvbnRlbnQpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgYXZjMSAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2l6ZSA9IDQwLy8gOChhdmMxKSs4KGF2Y2MpKzgoYnRydCkrMTYocGFzcClcbiAgICAvLyBsZXQgc3BzID0gZGF0YS5zcHNcbiAgICAvLyBsZXQgcHBzID0gZGF0YS5wcHNcbiAgICBsZXQgd2lkdGggPSBkYXRhLndpZHRoXG4gICAgbGV0IGhlaWdodCA9IGRhdGEuaGVpZ2h0XG4gICAgbGV0IGhTcGFjaW5nID0gZGF0YS5wYXJSYXRpby5oZWlnaHRcbiAgICBsZXQgdlNwYWNpbmcgPSBkYXRhLnBhclJhdGlvLndpZHRoXG4gICAgLy8gbGV0IGF2Y2NCdWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICAvLyBhdmNjQnVmZmVyLndyaXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAvLyAgIDB4MDEsIC8vIHZlcnNpb25cbiAgICAvLyAgIHNwc1sxXSwgLy8gcHJvZmlsZVxuICAgIC8vICAgc3BzWzJdLCAvLyBwcm9maWxlIGNvbXBhdGlibGVcbiAgICAvLyAgIHNwc1szXSwgLy8gbGV2ZWxcbiAgICAvLyAgIDB4ZmMgfCAzLFxuICAgIC8vICAgMHhFMCB8IDEgLy8g55uu5YmN5Y+q5aSE55CG5LiA5Liqc3BzXG4gICAgLy8gXS5jb25jYXQoW3Nwcy5sZW5ndGggPj4+IDggJiAweGZmLCBzcHMubGVuZ3RoICYgMHhmZl0pKSlcbiAgICAvLyBhdmNjQnVmZmVyLndyaXRlKHNwcywgbmV3IFVpbnQ4QXJyYXkoWzEsIHBwcy5sZW5ndGggPj4+IDggJiAweGZmLCBwcHMubGVuZ3RoICYgMHhmZl0pLCBwcHMpXG5cbiAgICBsZXQgYXZjYyA9IGRhdGEuYXZjY1xuICAgIGxldCBhdmMxID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAvLyBkYXRhX3JlZmVyZW5jZV9pbmRleFxuICAgICAgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAod2lkdGggPj4gOCkgJiAweGZmLFxuICAgICAgd2lkdGggJiAweGZmLCAvLyB3aWR0aFxuICAgICAgKGhlaWdodCA+PiA4KSAmIDB4ZmYsXG4gICAgICBoZWlnaHQgJiAweGZmLCAvLyBoZWlnaHRcbiAgICAgIDB4MDAsIDB4NDgsIDB4MDAsIDB4MDAsIC8vIGhvcml6cmVzb2x1dGlvblxuICAgICAgMHgwMCwgMHg0OCwgMHgwMCwgMHgwMCwgLy8gdmVydHJlc29sdXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAxLCAvLyBmcmFtZV9jb3VudFxuICAgICAgMHgxMixcbiAgICAgIDB4NjQsIDB4NjEsIDB4NjksIDB4NkMsIC8vIGRhaWx5bW90aW9uL2hscy5qc1xuICAgICAgMHg3OSwgMHg2RCwgMHg2RiwgMHg3NCxcbiAgICAgIDB4NjksIDB4NkYsIDB4NkUsIDB4MkYsXG4gICAgICAweDY4LCAweDZDLCAweDczLCAweDJFLFxuICAgICAgMHg2QSwgMHg3MywgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY29tcHJlc3Nvcm5hbWVcbiAgICAgIDB4MDAsIDB4MTgsIC8vIGRlcHRoID0gMjRcbiAgICAgIDB4MTEsIDB4MTFdKSAvLyBwcmVfZGVmaW5lZCA9IC0xXG4gICAgbGV0IGJ0cnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDFjLCAweDljLCAweDgwLCAvLyBidWZmZXJTaXplREJcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzAsIC8vIG1heEJpdHJhdGVcbiAgICAgIDB4MDAsIDB4MmQsIDB4YzYsIDB4YzAgLy8gYXZnQml0cmF0ZVxuICAgIF0pXG4gICAgbGV0IHBhc3AgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAoaFNwYWNpbmcgPj4gMjQpLCAvLyBoU3BhY2luZ1xuICAgICAgKGhTcGFjaW5nID4+IDE2KSAmIDB4ZmYsXG4gICAgICAoaFNwYWNpbmcgPj4gOCkgJiAweGZmLFxuICAgICAgaFNwYWNpbmcgJiAweGZmLFxuICAgICAgKHZTcGFjaW5nID4+IDI0KSwgLy8gdlNwYWNpbmdcbiAgICAgICh2U3BhY2luZyA+PiAxNikgJiAweGZmLFxuICAgICAgKHZTcGFjaW5nID4+IDgpICYgMHhmZixcbiAgICAgIHZTcGFjaW5nICYgMHhmZlxuICAgIF0pXG5cbiAgICBidWZmZXIud3JpdGUoXG4gICAgICBGbXA0LnNpemUoc2l6ZSArIGF2YzEuYnl0ZUxlbmd0aCArIGF2Y2MuYnl0ZUxlbmd0aCArIGJ0cnQuYnl0ZUxlbmd0aCksIEZtcDQudHlwZSgnYXZjMScpLCBhdmMxLFxuICAgICAgRm1wNC5zaXplKDggKyBhdmNjLmJ5dGVMZW5ndGgpLCBGbXA0LnR5cGUoJ2F2Y0MnKSwgYXZjYyxcbiAgICAgIEZtcDQuc2l6ZSgyMCksIEZtcDQudHlwZSgnYnRydCcpLCBidHJ0LFxuICAgICAgRm1wNC5zaXplKDE2KSwgRm1wNC50eXBlKCdwYXNwJyksIHBhc3BcbiAgICApXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgc3R0cyAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBlbnRyeV9jb3VudFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3N0dHMnLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBzdHNjICgpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIGVudHJ5X2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc3RzYycsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHN0Y28gKCkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZW50cnlfY291bnRcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICdzdGNvJywgY29udGVudClcbiAgfVxuICBzdGF0aWMgc3RzeiAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gc2FtcGxlX3NpemVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gc2FtcGxlX2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDIwLCAnc3RzeicsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG12ZXggKGR1cmF0aW9uLCB0aW1lc2NhbGUgPSAxMDAwLCB0cmFja0lEKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBtZWhkID0gQnVmZmVyLndyaXRlVWludDMyKGR1cmF0aW9uKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoNTYpLCBGbXA0LnR5cGUoJ212ZXgnKSwgRm1wNC5zaXplKDE2KSwgRm1wNC50eXBlKCdtZWhkJyksIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBtZWhkLCBGbXA0LnRyZXgodHJhY2tJRCkpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgdHJleCAoaWQpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIChpZCA+PiAyNCksXG4gICAgICAoaWQgPj4gMTYpICYgMHhmZixcbiAgICAgIChpZCA+PiA4KSAmIDB4ZmYsXG4gICAgICAoaWQgJiAweGZmKSwgLy8gdHJhY2tfSURcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGRlZmF1bHRfc2FtcGxlX2Rlc2NyaXB0aW9uX2luZGV4XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9kdXJhdGlvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZGVmYXVsdF9zYW1wbGVfc2l6ZVxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMSAvLyBkZWZhdWx0X3NhbXBsZV9mbGFnc1xuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgY29udGVudC5ieXRlTGVuZ3RoLCAndHJleCcsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIG1vb2YgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgbWZoZCA9IEZtcDQubWZoZCgpXG4gICAgbGV0IHRyYWYgPSBGbXA0LnRyYWYoZGF0YSk7XG4gICAgW21maGQsIHRyYWZdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnbW9vZicsIG1maGQsIHRyYWYpXG4gIH1cbiAgc3RhdGljIG1maGQgKCkge1xuICAgIGxldCBjb250ZW50ID0gQnVmZmVyLndyaXRlVWludDMyKEZtcDQuc2VxdWVuY2UpXG4gICAgRm1wNC5zZXF1ZW5jZSArPSAxXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ21maGQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgY29udGVudClcbiAgfVxuICBzdGF0aWMgdHJhZiAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB0ZmhkID0gRm1wNC50ZmhkKGRhdGEuaWQpXG4gICAgbGV0IHRmZHQgPSBGbXA0LnRmZHQoZGF0YS50aW1lKVxuICAgIGxldCBzZHRwID0gRm1wNC5zZHRwKGRhdGEpXG4gICAgbGV0IHRydW4gPSBGbXA0LnRydW4oZGF0YSwgc2R0cC5ieXRlTGVuZ3RoKTtcblxuICAgIFt0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ3RyYWYnLCB0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwKVxuICB9XG4gIHN0YXRpYyB0ZmhkIChpZCkge1xuICAgIGxldCBjb250ZW50ID0gQnVmZmVyLndyaXRlVWludDMyKGlkKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICd0ZmhkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHRmZHQgKHRpbWUpIHtcbiAgICAvLyBsZXQgdXBwZXIgPSBNYXRoLmZsb29yKHRpbWUgLyAoVUlOVDMyX01BWCArIDEpKSxcbiAgICAvLyAgICAgbG93ZXIgPSBNYXRoLmZsb29yKHRpbWUgJSAoVUlOVDMyX01BWCArIDEpKTtcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAndGZkdCcsIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBCdWZmZXIud3JpdGVVaW50MzIodGltZSkpXG4gIH1cbiAgc3RhdGljIHRydW4gKGRhdGEsIHNkdHBMZW5ndGgpIHtcbiAgICAvLyBsZXQgaWQgPSBkYXRhLmlkO1xuICAgIC8vIGxldCBjZWlsID0gaWQgPT09IDEgPyAxNiA6IDEyO1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2FtcGxlQ291bnQgPSBCdWZmZXIud3JpdGVVaW50MzIoZGF0YS5zYW1wbGVzLmxlbmd0aClcbiAgICAvLyBtZGF0LWhlYWRlciA4XG4gICAgLy8gbW9vZi1oZWFkZXIgOFxuICAgIC8vIG1maGQgMTZcbiAgICAvLyB0cmFmLWhlYWRlciA4XG4gICAgLy8gdGhoZCAxNlxuICAgIC8vIHRmZHQgMjBcbiAgICAvLyB0cnVuLWhlYWRlciAxMlxuICAgIC8vIHNhbXBsZUNvdW50IDRcbiAgICAvLyBkYXRhLW9mZnNldCA0XG4gICAgLy8gc2FtcGxlcy5sZW5ndGhcbiAgICBsZXQgb2Zmc2V0ID0gQnVmZmVyLndyaXRlVWludDMyKDggKyA4ICsgMTYgKyA4ICsgMTYgKyAxNiArIDEyICsgNCArIDQgKyAxNiAqIGRhdGEuc2FtcGxlcy5sZW5ndGggKyBzZHRwTGVuZ3RoKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMjAgKyAxNiAqIGRhdGEuc2FtcGxlcy5sZW5ndGgpLCBGbXA0LnR5cGUoJ3RydW4nKSwgbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4MDAsIDB4MEYsIDB4MDFdKSwgc2FtcGxlQ291bnQsIG9mZnNldClcblxuICAgIC8vIGxldCBzaXplID0gYnVmZmVyLmJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAgLy8gbGV0IHdyaXRlT2Zmc2V0ID0gMFxuICAgIC8vIGRhdGEuc2FtcGxlcy5mb3JFYWNoKCgpID0+IHtcbiAgICAvLyAgIHNpemUgKz0gMTZcbiAgICAvLyB9KVxuICAgIC8vXG4gICAgLy8gbGV0IHRydW5Cb3ggPSBuZXcgVWludDhBcnJheShzaXplKVxuXG4gICAgLy8gdHJ1bkJveC5zZXQoYnVmZmVyLmJ1ZmZlciwgMClcblxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBmbGFncyA9IGl0ZW0uZmxhZ3NcbiAgICAgIC8vIGNvbnNvbGUubG9nKGl0ZW0udHlwZSwgaXRlbS5kdHMsIGl0ZW0uZHVyYXRpb24pXG5cbiAgICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfZHVyYXRpb25cbiAgICAgICAgKGl0ZW0uZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDI0KSAmIDB4RkYsIC8vIHNhbXBsZV9zaXplXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUgPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uc2l6ZSkgJiAweEZGLFxuICAgICAgICAoZmxhZ3MuaXNMZWFkaW5nIDw8IDIpIHwgZmxhZ3MuZGVwZW5kc09uLCAvLyBzYW1wbGVfZmxhZ3NcbiAgICAgICAgKGZsYWdzLmlzRGVwZW5kZWRPbiA8PCA2KSB8IChmbGFncy5oYXNSZWR1bmRhbmN5IDw8IDQpIHwgZmxhZ3MuaXNOb25TeW5jLFxuICAgICAgICAweDAwLCAweDAwLCAvLyBzYW1wbGVfZGVncmFkYXRpb25fcHJpb3JpdHlcbiAgICAgICAgKGl0ZW0uY3RzID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfY29tcG9zaXRpb25fdGltZV9vZmZzZXRcbiAgICAgICAgKGl0ZW0uY3RzID4+PiAxNikgJiAweEZGLFxuICAgICAgICAoaXRlbS5jdHMgPj4+IDgpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uY3RzKSAmIDB4RkZcbiAgICAgIF0pKVxuICAgICAgLy8gd3JpdGVPZmZzZXQgKz0gMTZcbiAgICAgIC8vIGJ1ZmZlci53cml0ZShCdWZmZXIud3JpdGVVaW50MzIoMCkpO1xuICAgIH0pXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgc2R0cCAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDEyICsgZGF0YS5zYW1wbGVzLmxlbmd0aCksIEZtcDQudHlwZSgnc2R0cCcpLCBGbXA0LmV4dGVuc2lvbigwLCAwKSlcbiAgICBkYXRhLnNhbXBsZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGZsYWdzID0gaXRlbS5mbGFnc1xuICAgICAgY29uc3QgbnVtID0gKGZsYWdzLmlzTGVhZGluZyA8PCA2KSB8IC8vIGlzX2xlYWRpbmc6IDIgKGJpdClcbiAgICAgICAgKGZsYWdzLmRlcGVuZHNPbiA8PCA0KSB8IC8vIHNhbXBsZV9kZXBlbmRzX29uXG4gICAgICAgIChmbGFncy5pc0RlcGVuZGVkT24gPDwgMikgfCAvLyBzYW1wbGVfaXNfZGVwZW5kZWRfb25cbiAgICAgICAgKGZsYWdzLmhhc1JlZHVuZGFuY3kpLy8gc2FtcGxlX2hhc19yZWR1bmRhbmN5XG5cbiAgICAgIGJ1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbbnVtXSkpXG4gICAgfSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBtZGF0IChkYXRhKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBzaXplID0gOFxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLnNpemVcbiAgICB9KVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoc2l6ZSksIEZtcDQudHlwZSgnbWRhdCcpKVxuICAgIGxldCBtZGF0Qm94ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICBsZXQgb2Zmc2V0ID0gMFxuICAgIG1kYXRCb3guc2V0KGJ1ZmZlci5idWZmZXIsIG9mZnNldClcbiAgICBvZmZzZXQgKz0gOFxuICAgIGRhdGEuc2FtcGxlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaXRlbS5idWZmZXIuZm9yRWFjaCgodW5pdCkgPT4ge1xuICAgICAgICBtZGF0Qm94LnNldCh1bml0LCBvZmZzZXQpXG4gICAgICAgIG9mZnNldCArPSB1bml0LmJ5dGVMZW5ndGhcbiAgICAgICAgLy8gYnVmZmVyLndyaXRlKHVuaXQuZGF0YSk7XG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIG1kYXRCb3hcbiAgfVxufVxuRm1wNC50eXBlID0gKG5hbWUpID0+IHtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtuYW1lLmNoYXJDb2RlQXQoMCksIG5hbWUuY2hhckNvZGVBdCgxKSwgbmFtZS5jaGFyQ29kZUF0KDIpLCBuYW1lLmNoYXJDb2RlQXQoMyldKVxufVxuRm1wNC5zZXF1ZW5jZSA9IDFcblxuZXhwb3J0IGRlZmF1bHQgRm1wNFxuIiwiaW1wb3J0IHtcbiAgRVZFTlRTLFxuICBzbmlmZmVyLFxuICBNZWRpYVNlZ21lbnRMaXN0LFxuICBCdWZmZXJcbn0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuaW1wb3J0IEZtcDQgZnJvbSAnLi9mbXA0J1xuXG5jb25zdCBSRU1VWF9FVkVOVFMgPSBFVkVOVFMuUkVNVVhfRVZFTlRTXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1wNFJlbXV4ZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5fZHRzQmFzZSA9IDBcbiAgICB0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgPSBmYWxzZVxuXG4gICAgdGhpcy52aWRlb0FsbER1cmF0aW9uID0gMFxuICAgIHRoaXMuYXVkaW9BbGxEdXJhdGlvbiA9IDBcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLlJFTVVYX01FRElBLCB0aGlzLnJlbXV4LmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihSRU1VWF9FVkVOVFMuUkVNVVhfTUVUQURBVEEsIHRoaXMub25NZXRhRGF0YVJlYWR5LmJpbmQodGhpcykpXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9kdHNCYXNlID0gLTFcbiAgICB0aGlzLl9kdHNCYXNlSW5pdGVkID0gZmFsc2VcbiAgfVxuXG4gIHJlc2V0ICgpIHtcbiAgICB0aGlzLl9kdHNCYXNlID0gMFxuICAgIHRoaXMuX2lzRHRzQmFzZUluaXRlZCA9IGZhbHNlXG4gIH1cblxuICByZW11eCAoKSB7XG4gICAgY29uc3QgeyBhdWRpb1RyYWNrLCB2aWRlb1RyYWNrIH0gPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKVxuICAgICF0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgJiYgdGhpcy5jYWxjRHRzQmFzZShhdWRpb1RyYWNrLCB2aWRlb1RyYWNrKVxuXG4gICAgdGhpcy5fcmVtdXhWaWRlbyh2aWRlb1RyYWNrKVxuICAgIHRoaXMuX3JlbXV4QXVkaW8oYXVkaW9UcmFjaylcbiAgfVxuXG4gIHNlZWsgKCkge1xuXG4gIH1cblxuICBvbk1ldGFEYXRhUmVhZHkgKHR5cGUpIHtcbiAgICBsZXQgaW5pdFNlZ21lbnQgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgZnR5cCA9IEZtcDQuZnR5cCgpXG4gICAgbGV0IG1vb3ZcbiAgICBsZXQgdHJhY2tcblxuICAgIGlmICh0eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICBjb25zdCB7IGF1ZGlvVHJhY2sgfSA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gICAgICB0cmFjayA9IGF1ZGlvVHJhY2s7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgdmlkZW9UcmFjayB9ID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgICAgIHRyYWNrID0gdmlkZW9UcmFjaztcbiAgICB9XG5cbiAgICBtb292ID0gRm1wNC5tb292KHsgdHlwZSwgbWV0YTogdHJhY2subWV0YSB9KVxuXG4gICAgaW5pdFNlZ21lbnQud3JpdGUoZnR5cCwgbW9vdilcblxuICAgIGxldCBwcmVzb3VyY2VidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuZ2V0U291cmNlKHR5cGUpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuY3JlYXRlU291cmNlKHR5cGUpO1xuICAgIH1cblxuICAgIHNvdXJjZS5taW1ldHlwZSA9IHRyYWNrLm1ldGEuY29kZWM7XG4gICAgc291cmNlLmluaXQgPSBpbml0U2VnbWVudDtcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLklOSVRfU0VHTUVOVCwgdHlwZSlcbiAgfVxuXG4gIGNhbGNEdHNCYXNlIChhdWRpb1RyYWNrLCB2aWRlb1RyYWNrKSB7XG4gICAgaWYgKCFhdWRpb1RyYWNrLnNhbXBsZXMubGVuZ3RoICYmICF2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGF1ZGlvQmFzZSA9IEluZmluaXR5XG4gICAgbGV0IHZpZGVvQmFzZSA9IEluZmluaXR5XG5cbiAgICBpZiAoYXVkaW9UcmFjay5zYW1wbGVzICYmIGF1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIGF1ZGlvQmFzZSA9IGF1ZGlvVHJhY2suc2FtcGxlc1swXS5kdHNcbiAgICB9XG4gICAgaWYgKHZpZGVvVHJhY2suc2FtcGxlcyAmJiB2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICB2aWRlb0Jhc2UgPSB2aWRlb1RyYWNrLnNhbXBsZXNbMF0uZHRzXG4gICAgfVxuXG4gICAgdGhpcy5fZHRzQmFzZSA9IE1hdGgubWluKGF1ZGlvQmFzZSwgdmlkZW9CYXNlKVxuICAgIHRoaXMuX2lzRHRzQmFzZUluaXRlZCA9IHRydWVcbiAgfVxuXG4gIF9yZW11eFZpZGVvICh2aWRlb1RyYWNrKSB7XG4gICAgY29uc3QgdHJhY2sgPSB2aWRlb1RyYWNrXG5cbiAgICBpZiAoIXZpZGVvVHJhY2suc2FtcGxlcyB8fCAhdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IHtzYW1wbGVzfSA9IHRyYWNrXG4gICAgbGV0IGZpcnN0RHRzID0gLTFcblxuICAgIGNvbnN0IG1wNFNhbXBsZXMgPSBbXVxuICAgIGNvbnN0IG1kYXRCb3ggPSB7XG4gICAgICBzYW1wbGVzOiBbXVxuICAgIH1cblxuICAgIHdoaWxlIChzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgY29uc3QgYXZjU2FtcGxlID0gc2FtcGxlcy5zaGlmdCgpXG4gICAgICBjb25zdCB7IGlzS2V5ZnJhbWUgfSA9IGF2Y1NhbXBsZVxuICAgICAgbGV0IGR0cyA9IGF2Y1NhbXBsZS5kdHMgLSB0aGlzLl9kdHNCYXNlXG5cbiAgICAgIGlmIChmaXJzdER0cyA9PT0gLTEpIHtcbiAgICAgICAgZmlyc3REdHMgPSBkdHNcbiAgICAgIH1cblxuICAgICAgbGV0IGN0c1xuICAgICAgbGV0IHB0c1xuICAgICAgaWYgKGF2Y1NhbXBsZS5wdHMpIHtcbiAgICAgICAgcHRzID0gYXZjU2FtcGxlLnB0cyAtIHRoaXMuX2R0c0Jhc2VcbiAgICAgICAgY3RzID0gcHRzIC0gZHRzXG4gICAgICB9XG4gICAgICBpZiAoYXZjU2FtcGxlLmN0cykge1xuICAgICAgICBwdHMgPSBhdmNTYW1wbGUuY3RzICsgZHRzXG4gICAgICAgIGN0cyA9IGF2Y1NhbXBsZS5jdHNcbiAgICAgIH1cblxuICAgICAgbGV0IG1kYXRTYW1wbGUgPSB7XG4gICAgICAgIGJ1ZmZlcjogW10sXG4gICAgICAgIHNpemU6IDBcbiAgICAgIH1cbiAgICAgIG1kYXRCb3guc2FtcGxlcy5wdXNoKG1kYXRTYW1wbGUpXG4gICAgICBtZGF0U2FtcGxlLmJ1ZmZlci5wdXNoKGF2Y1NhbXBsZS5kYXRhKVxuICAgICAgbWRhdFNhbXBsZS5zaXplICs9IGF2Y1NhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcblxuICAgICAgbGV0IHNhbXBsZUR1cmF0aW9uID0gMFxuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dER0cyA9IHNhbXBsZXNbMF0uZHRzIC0gdGhpcy5fZHRzQmFzZVxuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG5leHREdHMgLSBkdHNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtcDRTYW1wbGVzLmxlbmd0aCA+PSAxKSB7IC8vIGxhc3Rlc3Qgc2FtcGxlLCB1c2Ugc2Vjb25kIGxhc3QgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG1wNFNhbXBsZXNbbXA0U2FtcGxlcy5sZW5ndGggLSAxXS5kdXJhdGlvblxuICAgICAgICB9IGVsc2UgeyAvLyB0aGUgb25seSBvbmUgc2FtcGxlLCB1c2UgcmVmZXJlbmNlIGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSB0aGlzLnZpZGVvTWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnZpZGVvQWxsRHVyYXRpb24gKz0gc2FtcGxlRHVyYXRpb25cbiAgICAgIG1wNFNhbXBsZXMucHVzaCh7XG4gICAgICAgIGR0cyxcbiAgICAgICAgY3RzLFxuICAgICAgICBwdHMsXG4gICAgICAgIGRhdGE6IGF2Y1NhbXBsZS5kYXRhLFxuICAgICAgICBzaXplOiBhdmNTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICBpc0tleWZyYW1lLFxuICAgICAgICBkdXJhdGlvbjogc2FtcGxlRHVyYXRpb24sXG4gICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgaXNMZWFkaW5nOiAwLFxuICAgICAgICAgIGRlcGVuZHNPbjogaXNLZXlmcmFtZSA/IDIgOiAxLFxuICAgICAgICAgIGlzRGVwZW5kZWRPbjogaXNLZXlmcmFtZSA/IDEgOiAwLFxuICAgICAgICAgIGhhc1JlZHVuZGFuY3k6IDAsXG4gICAgICAgICAgaXNOb25TeW5jOiBpc0tleWZyYW1lID8gMCA6IDFcbiAgICAgICAgfSxcbiAgICAgICAgb3JpZ2luRHRzOiBkdHMsXG4gICAgICAgIHR5cGU6ICd2aWRlbydcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgbGV0IG1vb2ZNZGF0ID0gbmV3IEJ1ZmZlcigpXG5cbiAgICBjb25zdCBtb29mID0gRm1wNC5tb29mKHtcbiAgICAgIGlkOiB0cmFjay5tZXRhLmlkLFxuICAgICAgdGltZTogZmlyc3REdHMsXG4gICAgICBzYW1wbGVzOiBtcDRTYW1wbGVzXG4gICAgfSlcbiAgICBjb25zdCBtZGF0ID0gRm1wNC5tZGF0KG1kYXRCb3gpXG4gICAgbW9vZk1kYXQud3JpdGUobW9vZiwgbWRhdClcblxuICAgIHRyYWNrLnNhbXBsZXMgPSBbXVxuICAgIHRyYWNrLmxlbmd0aCA9IDBcblxuICAgIGxldCBwcmVzb3VyY2VidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuZ2V0U291cmNlKCd2aWRlbycpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuY3JlYXRlU291cmNlKCd2aWRlbycpO1xuICAgIH1cblxuICAgIHNvdXJjZS5kYXRhLnB1c2gobW9vZk1kYXQpO1xuXG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5NRURJQV9TRUdNRU5ULCAndmlkZW8nKVxuICB9XG5cbiAgX3JlbXV4QXVkaW8gKHRyYWNrKSB7XG4gICAgY29uc3Qge3NhbXBsZXN9ID0gdHJhY2tcbiAgICBsZXQgZmlyc3REdHMgPSAtMVxuICAgIGxldCBtcDRTYW1wbGVzID0gW11cblxuICAgIGNvbnN0IG1kYXRCb3ggPSB7XG4gICAgICBzYW1wbGVzOiBbXVxuICAgIH1cbiAgICBpZiAoIXNhbXBsZXMgfHwgIXNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbGV0IGlzRmlyc3REdHNJbml0ZWQgPSBmYWxzZVxuICAgIHdoaWxlIChzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgbGV0IHNhbXBsZSA9IHNhbXBsZXMuc2hpZnQoKVxuICAgICAgY29uc3QgeyBkYXRhIH0gPSBzYW1wbGVcbiAgICAgIGxldCBkdHMgPSBzYW1wbGUuZHRzIC0gdGhpcy5fZHRzQmFzZVxuICAgICAgY29uc3Qgb3JpZ2luRHRzID0gZHRzXG4gICAgICBpZiAoIWlzRmlyc3REdHNJbml0ZWQpIHtcbiAgICAgICAgZmlyc3REdHMgPSBkdHNcbiAgICAgICAgaXNGaXJzdER0c0luaXRlZCA9IHRydWVcbiAgICAgIH1cblxuICAgICAgbGV0IHNhbXBsZUR1cmF0aW9uID0gMFxuXG4gICAgICBpZiAodGhpcy5hdWRpb01ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCkge1xuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWRcbiAgICAgIH0gZWxzZSBpZiAoc2FtcGxlcy5sZW5ndGggPj0gMSkge1xuICAgICAgICBjb25zdCBuZXh0RHRzID0gc2FtcGxlc1swXS5kdHMgLSB0aGlzLl9kdHNCYXNlO1xuICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG5leHREdHMgLSBkdHNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtcDRTYW1wbGVzLmxlbmd0aCA+PSAxKSB7IC8vIHVzZSBzZWNvbmQgbGFzdCBzYW1wbGUgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IG1wNFNhbXBsZXNbbXA0U2FtcGxlcy5sZW5ndGggLSAxXS5kdXJhdGlvblxuICAgICAgICB9IGVsc2UgeyAvLyB0aGUgb25seSBvbmUgc2FtcGxlLCB1c2UgcmVmZXJlbmNlIHNhbXBsZSBkdXJhdGlvblxuICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gdGhpcy5hdWRpb01ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBjb25zb2xlLmxvZygncmVtdXggYXVkaW8gJywgZHRzKVxuICAgICAgdGhpcy5hdWRpb0FsbER1cmF0aW9uICs9IHNhbXBsZUR1cmF0aW9uXG4gICAgICBjb25zdCBtcDRTYW1wbGUgPSB7XG4gICAgICAgIGR0cyxcbiAgICAgICAgcHRzOiBkdHMsXG4gICAgICAgIGN0czogMCxcbiAgICAgICAgc2l6ZTogZGF0YS5ieXRlTGVuZ3RoLFxuICAgICAgICBkdXJhdGlvbjogc2FtcGxlLmR1cmF0aW9uID8gc2FtcGxlLmR1cmF0aW9uIDogc2FtcGxlRHVyYXRpb24sXG4gICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgaXNMZWFkaW5nOiAwLFxuICAgICAgICAgIGRlcGVuZHNPbjogMixcbiAgICAgICAgICBpc0RlcGVuZGVkT246IDEsXG4gICAgICAgICAgaGFzUmVkdW5kYW5jeTogMCxcbiAgICAgICAgICBpc05vblN5bmM6IDBcbiAgICAgICAgfSxcbiAgICAgICAgaXNLZXlmcmFtZTogdHJ1ZSxcbiAgICAgICAgb3JpZ2luRHRzLFxuICAgICAgICB0eXBlOiAnYXVkaW8nXG4gICAgICB9XG5cbiAgICAgIGxldCBtZGF0U2FtcGxlID0ge1xuICAgICAgICBidWZmZXI6IFtdLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9XG4gICAgICBtZGF0U2FtcGxlLmJ1ZmZlci5wdXNoKGRhdGEpXG4gICAgICBtZGF0U2FtcGxlLnNpemUgKz0gZGF0YS5ieXRlTGVuZ3RoXG5cbiAgICAgIG1kYXRCb3guc2FtcGxlcy5wdXNoKG1kYXRTYW1wbGUpXG5cbiAgICAgIG1wNFNhbXBsZXMucHVzaChtcDRTYW1wbGUpXG4gICAgfVxuXG4gICAgY29uc3QgbW9vZk1kYXQgPSBuZXcgQnVmZmVyKClcbiAgICBjb25zdCBtb29mID0gRm1wNC5tb29mKHtcbiAgICAgIGlkOiB0cmFjay5tZXRhLmlkLFxuICAgICAgdGltZTogZmlyc3REdHMsXG4gICAgICBzYW1wbGVzOiBtcDRTYW1wbGVzXG4gICAgfSlcbiAgICBjb25zdCBtZGF0ID0gRm1wNC5tZGF0KG1kYXRCb3gpXG4gICAgbW9vZk1kYXQud3JpdGUobW9vZiwgbWRhdClcblxuICAgIHRyYWNrLnNhbXBsZXMgPSBbXVxuICAgIHRyYWNrLmxlbmd0aCA9IDBcblxuICAgIGxldCBwcmVzb3VyY2VidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuZ2V0U291cmNlKCdhdWRpbycpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBzb3VyY2UgPSBwcmVzb3VyY2VidWZmZXIuY3JlYXRlU291cmNlKCdhdWRpbycpO1xuICAgIH1cbiAgICBzb3VyY2UuZGF0YS5wdXNoKG1vb2ZNZGF0KTtcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLk1FRElBX1NFR01FTlQsICdhdWRpbycsIG1vb2ZNZGF0KVxuICB9XG5cbiAgaW5pdFNpbGVudEF1ZGlvIChkdHMsIGR1cmF0aW9uKSB7XG4gICAgY29uc3QgdW5pdCA9IE1wNFJlbXV4ZXIuZ2V0U2lsZW50RnJhbWUodGhpcy5hdWRpb01ldGEuY2hhbm5lbENvdW50KVxuICAgIHJldHVybiB7XG4gICAgICBkdHMsXG4gICAgICBwdHM6IGR0cyxcbiAgICAgIGN0czogMCxcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgdW5pdCxcbiAgICAgIHNpemU6IHVuaXQuYnl0ZUxlbmd0aCxcbiAgICAgIG9yaWdpbkR0czogZHRzLFxuICAgICAgdHlwZTogJ3ZpZGVvJ1xuICAgIH1cbiAgfVxuXG4gIGdldCB2aWRlb01ldGEgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKS52aWRlb1RyYWNrLm1ldGFcbiAgfVxuICBnZXQgYXVkaW9NZXRhICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJykuYXVkaW9UcmFjay5tZXRhXG4gIH1cblxuICBzdGF0aWMgZ2V0U2lsZW50RnJhbWUgKGNoYW5uZWxDb3VudCkge1xuICAgIGlmIChjaGFubmVsQ291bnQgPT09IDEpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMywgMHg4MF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDIpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgyMSwgMHgwMCwgMHg0OSwgMHg5MCwgMHgwMiwgMHgxOSwgMHgwMCwgMHgyMywgMHg4MF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDMpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4ZV0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDQpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MCwgMHgyYywgMHg4MCwgMHgwOCwgMHgwMiwgMHgzOF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDUpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgzOF0pXG4gICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDYpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgwMCwgMHhiMiwgMHgwMCwgMHgyMCwgMHgwOCwgMHhlMF0pXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBDb250ZXh0OiByZXF1aXJlKCcuL3NyYy9jb250ZXh0JykuZGVmYXVsdCxcblxuICAvLyBNb2R1bGVzIGZyb20gY29uc3RhbnRzXG4gIEVWRU5UUzogcmVxdWlyZSgnLi9zcmMvY29uc3RhbnRzL2V2ZW50cycpLmRlZmF1bHQsXG4gIFdPUktFUl9DT01NQU5EUzogcmVxdWlyZSgnLi9zcmMvY29uc3RhbnRzL3dvcmtlci1jb21tYW5kcycpLmRlZmF1bHQsXG5cbiAgLy8gTW9kdWxlcyBmcm9tIGVudlxuICBzbmlmZmVyOiByZXF1aXJlKCcuL3NyYy9lbnYvc25pZmZlcicpLmRlZmF1bHQsXG4gIGlzTGU6IHJlcXVpcmUoJy4vc3JjL2Vudi9pc2xlJykuZGVmYXVsdCxcbiAgVVRGODogcmVxdWlyZSgnLi9zcmMvZW52L3V0ZjgnKS5kZWZhdWx0LFxuXG4gIC8vIE1vZGVsc1xuICBNZWRpYUluZm86IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1pbmZvJykuZGVmYXVsdCxcbiAgTWVkaWFTYW1wbGU6IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1zYW1wbGUnKS5kZWZhdWx0LFxuICBNZWRpYVNlZ21lbnQ6IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1zZWdtZW50JykuZGVmYXVsdCxcbiAgTWVkaWFTZWdtZW50TGlzdDogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL21lZGlhLXNlZ21lbnQtbGlzdCcpLmRlZmF1bHQsXG4gIEF1ZGlvVHJhY2tNZXRhOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvdHJhY2stbWV0YScpLkF1ZGlvVHJhY2tNZXRhLFxuICBWaWRlb1RyYWNrTWV0YTogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL3RyYWNrLW1ldGEnKS5WaWRlb1RyYWNrTWV0YSxcbiAgQXVkaW9UcmFja1NhbXBsZTogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL3RyYWNrLXNhbXBsZScpLkF1ZGlvVHJhY2tTYW1wbGUsXG4gIFZpZGVvVHJhY2tTYW1wbGU6IHJlcXVpcmUoJy4vc3JjL21vZGVscy90cmFjay1zYW1wbGUnKS5WaWRlb1RyYWNrU2FtcGxlLFxuXG4gIC8vIE1vZHVsZXMgZnJvbSBtc2VcbiAgTXNlOiByZXF1aXJlKCcuL3NyYy9tc2UvaW5kZXgnKS5kZWZhdWx0LFxuXG4gIC8vIE1vZHVsZXMgZnJvbSB3cml0ZVxuICBTdHJlYW06IHJlcXVpcmUoJy4vc3JjL3dyaXRlL3N0cmVhbScpLmRlZmF1bHQsXG4gIEJ1ZmZlcjogcmVxdWlyZSgnLi9zcmMvd3JpdGUvYnVmZmVyJykuZGVmYXVsdCxcblxuICBNb2JpbGVWaWRlbzogcmVxdWlyZSgnLi9zcmMvbW9iaWxlL21vYmlsZS12aWRlbycpXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChSZXN1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgdG90YWxMZW5ndGggPSAwO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcnJheXMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJyYXlzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGFycmF5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgIHZhciBhcnIgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgdG90YWxMZW5ndGggKz0gYXJyLmxlbmd0aDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBSZXN1bHRDb25zdHJ1Y3Rvcih0b3RhbExlbmd0aCk7XG4gIHZhciBvZmZzZXQgPSAwO1xuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gYXJyYXlzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICB2YXIgX2FyciA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgcmVzdWx0LnNldChfYXJyLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IF9hcnIubGVuZ3RoO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NvbmNhdCA9IHJlcXVpcmUoJy4vY29uY2F0Jyk7XG5cbnZhciBfY29uY2F0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbmNhdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm1vZHVsZS5leHBvcnRzID0gX2NvbmNhdDIuZGVmYXVsdDsiLCJmdW5jdGlvbiB3ZWJwYWNrQm9vdHN0cmFwRnVuYyAobW9kdWxlcykge1xuLyoqKioqKi8gIC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovICB2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4vKioqKioqLyAgLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovICBmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbi8qKioqKiovICAgIC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gICAgaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyAgICAgIHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4vKioqKioqLyAgICAvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gICAgdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gICAgICBpOiBtb2R1bGVJZCxcbi8qKioqKiovICAgICAgbDogZmFsc2UsXG4vKioqKioqLyAgICAgIGV4cG9ydHM6IHt9XG4vKioqKioqLyAgICB9O1xuXG4vKioqKioqLyAgICAvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovICAgIG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4vKioqKioqLyAgICAvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyAgICBtb2R1bGUubCA9IHRydWU7XG5cbi8qKioqKiovICAgIC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyAgfVxuXG4vKioqKioqLyAgLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovICBfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4vKioqKioqLyAgLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovICBfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4vKioqKioqLyAgLy8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuLyoqKioqKi8gIC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gICAgaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovICAgICAgICBnZXQ6IGdldHRlclxuLyoqKioqKi8gICAgICB9KTtcbi8qKioqKiovICAgIH1cbi8qKioqKiovICB9O1xuXG4vKioqKioqLyAgLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyAgfTtcblxuLyoqKioqKi8gIC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyAgX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyAgICB2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovICAgICAgZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovICAgICAgZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovICAgIF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovICAgIHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyAgfTtcblxuLyoqKioqKi8gIC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuLyoqKioqKi8gIC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyAgX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cbi8qKioqKiovICAvLyBvbiBlcnJvciBmdW5jdGlvbiBmb3IgYXN5bmMgbG9hZGluZ1xuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18ub2UgPSBmdW5jdGlvbihlcnIpIHsgY29uc29sZS5lcnJvcihlcnIpOyB0aHJvdyBlcnI7IH07XG5cbiAgdmFyIGYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IEVOVFJZX01PRFVMRSlcbiAgcmV0dXJuIGYuZGVmYXVsdCB8fCBmIC8vIHRyeSB0byBjYWxsIGRlZmF1bHQgaWYgZGVmaW5lZCB0byBhbHNvIHN1cHBvcnQgYmFiZWwgZXNtb2R1bGUgZXhwb3J0c1xufVxuXG52YXIgbW9kdWxlTmFtZVJlcUV4cCA9ICdbXFxcXC58XFxcXC18XFxcXCt8XFxcXHd8XFwvfEBdKydcbnZhciBkZXBlbmRlbmN5UmVnRXhwID0gJ1xcXFwoXFxcXHMqKFxcL1xcXFwqLio/XFxcXCpcXC8pP1xcXFxzKi4qPygnICsgbW9kdWxlTmFtZVJlcUV4cCArICcpLio/XFxcXCknIC8vIGFkZGl0aW9uYWwgY2hhcnMgd2hlbiBvdXRwdXQucGF0aGluZm8gaXMgdHJ1ZVxuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNTkzNjYxLzEzMDQ0MlxuZnVuY3Rpb24gcXVvdGVSZWdFeHAgKHN0cikge1xuICByZXR1cm4gKHN0ciArICcnKS5yZXBsYWNlKC9bLj8qK14kW1xcXVxcXFwoKXt9fC1dL2csICdcXFxcJCYnKVxufVxuXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gIWlzTmFOKDEgKiBuKTsgLy8gMSAqIG4gY29udmVydHMgaW50ZWdlcnMsIGludGVnZXJzIGFzIHN0cmluZyAoXCIxMjNcIiksIDFlMyBhbmQgXCIxZTNcIiB0byBpbnRlZ2VycyBhbmQgc3RyaW5ncyB0byBOYU5cbn1cblxuZnVuY3Rpb24gZ2V0TW9kdWxlRGVwZW5kZW5jaWVzIChzb3VyY2VzLCBtb2R1bGUsIHF1ZXVlTmFtZSkge1xuICB2YXIgcmV0dmFsID0ge31cbiAgcmV0dmFsW3F1ZXVlTmFtZV0gPSBbXVxuXG4gIHZhciBmblN0cmluZyA9IG1vZHVsZS50b1N0cmluZygpXG4gIHZhciB3cmFwcGVyU2lnbmF0dXJlID0gZm5TdHJpbmcubWF0Y2goL15mdW5jdGlvblxccz9cXHcqXFwoXFx3KyxcXHMqXFx3KyxcXHMqKFxcdyspXFwpLylcbiAgaWYgKCF3cmFwcGVyU2lnbmF0dXJlKSByZXR1cm4gcmV0dmFsXG4gIHZhciB3ZWJwYWNrUmVxdWlyZU5hbWUgPSB3cmFwcGVyU2lnbmF0dXJlWzFdXG5cbiAgLy8gbWFpbiBidW5kbGUgZGVwc1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKCcoXFxcXFxcXFxufFxcXFxXKScgKyBxdW90ZVJlZ0V4cCh3ZWJwYWNrUmVxdWlyZU5hbWUpICsgZGVwZW5kZW5jeVJlZ0V4cCwgJ2cnKVxuICB2YXIgbWF0Y2hcbiAgd2hpbGUgKChtYXRjaCA9IHJlLmV4ZWMoZm5TdHJpbmcpKSkge1xuICAgIGlmIChtYXRjaFszXSA9PT0gJ2RsbC1yZWZlcmVuY2UnKSBjb250aW51ZVxuICAgIHJldHZhbFtxdWV1ZU5hbWVdLnB1c2gobWF0Y2hbM10pXG4gIH1cblxuICAvLyBkbGwgZGVwc1xuICByZSA9IG5ldyBSZWdFeHAoJ1xcXFwoJyArIHF1b3RlUmVnRXhwKHdlYnBhY2tSZXF1aXJlTmFtZSkgKyAnXFxcXChcIihkbGwtcmVmZXJlbmNlXFxcXHMoJyArIG1vZHVsZU5hbWVSZXFFeHAgKyAnKSlcIlxcXFwpXFxcXCknICsgZGVwZW5kZW5jeVJlZ0V4cCwgJ2cnKVxuICB3aGlsZSAoKG1hdGNoID0gcmUuZXhlYyhmblN0cmluZykpKSB7XG4gICAgaWYgKCFzb3VyY2VzW21hdGNoWzJdXSkge1xuICAgICAgcmV0dmFsW3F1ZXVlTmFtZV0ucHVzaChtYXRjaFsxXSlcbiAgICAgIHNvdXJjZXNbbWF0Y2hbMl1dID0gX193ZWJwYWNrX3JlcXVpcmVfXyhtYXRjaFsxXSkubVxuICAgIH1cbiAgICByZXR2YWxbbWF0Y2hbMl1dID0gcmV0dmFsW21hdGNoWzJdXSB8fCBbXVxuICAgIHJldHZhbFttYXRjaFsyXV0ucHVzaChtYXRjaFs0XSlcbiAgfVxuXG4gIC8vIGNvbnZlcnQgMWUzIGJhY2sgdG8gMTAwMCAtIHRoaXMgY2FuIGJlIGltcG9ydGFudCBhZnRlciB1Z2xpZnktanMgY29udmVydGVkIDEwMDAgdG8gMWUzXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmV0dmFsKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCByZXR2YWxba2V5c1tpXV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChpc051bWVyaWMocmV0dmFsW2tleXNbaV1dW2pdKSkge1xuICAgICAgICByZXR2YWxba2V5c1tpXV1bal0gPSAxICogcmV0dmFsW2tleXNbaV1dW2pdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXR2YWxcbn1cblxuZnVuY3Rpb24gaGFzVmFsdWVzSW5RdWV1ZXMgKHF1ZXVlcykge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHF1ZXVlcylcbiAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChoYXNWYWx1ZXMsIGtleSkge1xuICAgIHJldHVybiBoYXNWYWx1ZXMgfHwgcXVldWVzW2tleV0ubGVuZ3RoID4gMFxuICB9LCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gZ2V0UmVxdWlyZWRNb2R1bGVzIChzb3VyY2VzLCBtb2R1bGVJZCkge1xuICB2YXIgbW9kdWxlc1F1ZXVlID0ge1xuICAgIG1haW46IFttb2R1bGVJZF1cbiAgfVxuICB2YXIgcmVxdWlyZWRNb2R1bGVzID0ge1xuICAgIG1haW46IFtdXG4gIH1cbiAgdmFyIHNlZW5Nb2R1bGVzID0ge1xuICAgIG1haW46IHt9XG4gIH1cblxuICB3aGlsZSAoaGFzVmFsdWVzSW5RdWV1ZXMobW9kdWxlc1F1ZXVlKSkge1xuICAgIHZhciBxdWV1ZXMgPSBPYmplY3Qua2V5cyhtb2R1bGVzUXVldWUpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBxdWV1ZU5hbWUgPSBxdWV1ZXNbaV1cbiAgICAgIHZhciBxdWV1ZSA9IG1vZHVsZXNRdWV1ZVtxdWV1ZU5hbWVdXG4gICAgICB2YXIgbW9kdWxlVG9DaGVjayA9IHF1ZXVlLnBvcCgpXG4gICAgICBzZWVuTW9kdWxlc1txdWV1ZU5hbWVdID0gc2Vlbk1vZHVsZXNbcXVldWVOYW1lXSB8fCB7fVxuICAgICAgaWYgKHNlZW5Nb2R1bGVzW3F1ZXVlTmFtZV1bbW9kdWxlVG9DaGVja10gfHwgIXNvdXJjZXNbcXVldWVOYW1lXVttb2R1bGVUb0NoZWNrXSkgY29udGludWVcbiAgICAgIHNlZW5Nb2R1bGVzW3F1ZXVlTmFtZV1bbW9kdWxlVG9DaGVja10gPSB0cnVlXG4gICAgICByZXF1aXJlZE1vZHVsZXNbcXVldWVOYW1lXSA9IHJlcXVpcmVkTW9kdWxlc1txdWV1ZU5hbWVdIHx8IFtdXG4gICAgICByZXF1aXJlZE1vZHVsZXNbcXVldWVOYW1lXS5wdXNoKG1vZHVsZVRvQ2hlY2spXG4gICAgICB2YXIgbmV3TW9kdWxlcyA9IGdldE1vZHVsZURlcGVuZGVuY2llcyhzb3VyY2VzLCBzb3VyY2VzW3F1ZXVlTmFtZV1bbW9kdWxlVG9DaGVja10sIHF1ZXVlTmFtZSlcbiAgICAgIHZhciBuZXdNb2R1bGVzS2V5cyA9IE9iamVjdC5rZXlzKG5ld01vZHVsZXMpXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5ld01vZHVsZXNLZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIG1vZHVsZXNRdWV1ZVtuZXdNb2R1bGVzS2V5c1tqXV0gPSBtb2R1bGVzUXVldWVbbmV3TW9kdWxlc0tleXNbal1dIHx8IFtdXG4gICAgICAgIG1vZHVsZXNRdWV1ZVtuZXdNb2R1bGVzS2V5c1tqXV0gPSBtb2R1bGVzUXVldWVbbmV3TW9kdWxlc0tleXNbal1dLmNvbmNhdChuZXdNb2R1bGVzW25ld01vZHVsZXNLZXlzW2pdXSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVxdWlyZWRNb2R1bGVzXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBzb3VyY2VzID0ge1xuICAgIG1haW46IF9fd2VicGFja19tb2R1bGVzX19cbiAgfVxuXG4gIHZhciByZXF1aXJlZE1vZHVsZXMgPSBvcHRpb25zLmFsbCA/IHsgbWFpbjogT2JqZWN0LmtleXMoc291cmNlcy5tYWluKSB9IDogZ2V0UmVxdWlyZWRNb2R1bGVzKHNvdXJjZXMsIG1vZHVsZUlkKVxuXG4gIHZhciBzcmMgPSAnJ1xuXG4gIE9iamVjdC5rZXlzKHJlcXVpcmVkTW9kdWxlcykuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtICE9PSAnbWFpbicgfSkuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlKSB7XG4gICAgdmFyIGVudHJ5TW9kdWxlID0gMFxuICAgIHdoaWxlIChyZXF1aXJlZE1vZHVsZXNbbW9kdWxlXVtlbnRyeU1vZHVsZV0pIHtcbiAgICAgIGVudHJ5TW9kdWxlKytcbiAgICB9XG4gICAgcmVxdWlyZWRNb2R1bGVzW21vZHVsZV0ucHVzaChlbnRyeU1vZHVsZSlcbiAgICBzb3VyY2VzW21vZHVsZV1bZW50cnlNb2R1bGVdID0gJyhmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsgbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fOyB9KSdcbiAgICBzcmMgPSBzcmMgKyAndmFyICcgKyBtb2R1bGUgKyAnID0gKCcgKyB3ZWJwYWNrQm9vdHN0cmFwRnVuYy50b1N0cmluZygpLnJlcGxhY2UoJ0VOVFJZX01PRFVMRScsIEpTT04uc3RyaW5naWZ5KGVudHJ5TW9kdWxlKSkgKyAnKSh7JyArIHJlcXVpcmVkTW9kdWxlc1ttb2R1bGVdLm1hcChmdW5jdGlvbiAoaWQpIHsgcmV0dXJuICcnICsgSlNPTi5zdHJpbmdpZnkoaWQpICsgJzogJyArIHNvdXJjZXNbbW9kdWxlXVtpZF0udG9TdHJpbmcoKSB9KS5qb2luKCcsJykgKyAnfSk7XFxuJ1xuICB9KVxuXG4gIHNyYyA9IHNyYyArICduZXcgKCgnICsgd2VicGFja0Jvb3RzdHJhcEZ1bmMudG9TdHJpbmcoKS5yZXBsYWNlKCdFTlRSWV9NT0RVTEUnLCBKU09OLnN0cmluZ2lmeShtb2R1bGVJZCkpICsgJykoeycgKyByZXF1aXJlZE1vZHVsZXMubWFpbi5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiAnJyArIEpTT04uc3RyaW5naWZ5KGlkKSArICc6ICcgKyBzb3VyY2VzLm1haW5baWRdLnRvU3RyaW5nKCkgfSkuam9pbignLCcpICsgJ30pKShzZWxmKTsnXG5cbiAgdmFyIGJsb2IgPSBuZXcgd2luZG93LkJsb2IoW3NyY10sIHsgdHlwZTogJ3RleHQvamF2YXNjcmlwdCcgfSlcbiAgaWYgKG9wdGlvbnMuYmFyZSkgeyByZXR1cm4gYmxvYiB9XG5cbiAgdmFyIFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTCB8fCB3aW5kb3cubW96VVJMIHx8IHdpbmRvdy5tc1VSTFxuXG4gIHZhciB3b3JrZXJVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpXG4gIHZhciB3b3JrZXIgPSBuZXcgd2luZG93Lldvcmtlcih3b3JrZXJVcmwpXG4gIHdvcmtlci5vYmplY3RVUkwgPSB3b3JrZXJVcmxcblxuICByZXR1cm4gd29ya2VyXG59XG4iLCJjb25zdCBMT0FERVJfRVZFTlRTID0ge1xuICBMQURFUl9TVEFSVDogJ0xPQURFUl9TVEFSVCcsXG4gIExPQURFUl9EQVRBTE9BREVEOiAnTE9BREVSX0RBVEFMT0FERUQnLFxuICBMT0FERVJfQ09NUExFVEU6ICdMT0FERVJfQ09NUExFVEUnLFxuICBMT0FERVJfRVJST1I6ICdMT0FERVJfRVJST1InXG59XG5cbmNvbnN0IERFTVVYX0VWRU5UUyA9IHtcbiAgREVNVVhfU1RBUlQ6ICdERU1VWF9TVEFSVCcsXG4gIERFTVVYX0NPTVBMRVRFOiAnREVNVVhfQ09NUExFVEUnLFxuICBERU1VWF9FUlJPUjogJ0RFTVVYX0VSUk9SJyxcbiAgTUVUQURBVEFfUEFSU0VEOiAnTUVUQURBVEFfUEFSU0VEJyxcbiAgVklERU9fTUVUQURBVEFfQ0hBTkdFOiAnVklERU9fTUVUQURBVEFfQ0hBTkdFJyxcbiAgQVVESU9fTUVUQURBVEFfQ0hBTkdFOiAnQVVESU9fTUVUQURBVEFfQ0hBTkdFJyxcbiAgTUVESUFfSU5GTzogJ01FRElBX0lORk8nXG59XG5cbmNvbnN0IFJFTVVYX0VWRU5UUyA9IHtcbiAgUkVNVVhfTUVUQURBVEE6ICdSRU1VWF9NRVRBREFUQScsXG4gIFJFTVVYX01FRElBOiAnUkVNVVhfTUVESUEnLFxuICBNRURJQV9TRUdNRU5UOiAnTUVESUFfU0VHTUVOVCcsXG4gIFJFTVVYX0VSUk9SOiAnUkVNVVhfRVJST1InLFxuICBJTklUX1NFR01FTlQ6ICdJTklUX1NFR01FTlQnXG59XG5cbmNvbnN0IE1TRV9FVkVOVFMgPSB7XG4gIFNPVVJDRV9VUERBVEVfRU5EOiAnU09VUkNFX1VQREFURV9FTkQnXG59XG5cbi8vIGhsc+S4k+aciWV2ZW50c1xuY29uc3QgSExTX0VWRU5UUyA9IHtcbiAgUkVUUllfVElNRV9FWENFRURFRDogJ1JFVFJZX1RJTUVfRVhDRUVERUQnXG59XG5cbmNvbnN0IEFMTEVWRU5UUyA9IE9iamVjdC5hc3NpZ24oe30sIExPQURFUl9FVkVOVFMsIERFTVVYX0VWRU5UUywgUkVNVVhfRVZFTlRTLCBNU0VfRVZFTlRTLCBITFNfRVZFTlRTKVxuXG5jb25zdCBGbHZBbGxvd2VkRXZlbnRzID0gW11cbmNvbnN0IEhsc0FsbG93ZWRFdmVudHMgPSBbXVxuXG5mb3IgKGxldCBrZXkgaW4gQUxMRVZFTlRTKSB7XG4gIGlmIChBTExFVkVOVFMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgIEZsdkFsbG93ZWRFdmVudHMucHVzaChBTExFVkVOVFNba2V5XSlcbiAgfVxufVxuXG5mb3IgKGxldCBrZXkgaW4gQUxMRVZFTlRTKSB7XG4gIGlmIChBTExFVkVOVFMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgIEhsc0FsbG93ZWRFdmVudHMucHVzaChBTExFVkVOVFNba2V5XSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEFMTEVWRU5UUyxcbiAgSExTX0VWRU5UUyxcbiAgUkVNVVhfRVZFTlRTLFxuICBERU1VWF9FVkVOVFMsXG4gIE1TRV9FVkVOVFMsXG4gIExPQURFUl9FVkVOVFMsXG4gIEZsdkFsbG93ZWRFdmVudHMsXG4gIEhsc0FsbG93ZWRFdmVudHNcbn07XG4iLCJleHBvcnQgY29uc3QgQ09OVEVYVF9DT01PTUFORFMgPSB7XG4gIE9OOiAnb24nLFxuICBPTkNFOiAnb25jZScsXG4gIE9GRjogJ29mZicsXG4gIEVNSVQ6ICdlbWl0JyxcbiAgREVTVFJPWTogJ2Rlc3Ryb3knXG59XG4iLCJpbXBvcnQgTWVkaWFJbmZvIGZyb20gJy4vbW9kZWxzL21lZGlhLWluZm8nXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnXG5cbmNvbnN0IERJUkVDVF9FTUlUX0ZMQUcgPSAnX19UT19fJ1xuXG5jbGFzcyBDb250ZXh0IHtcbiAgY29uc3RydWN0b3IgKGFsbG93ZWRFdmVudHMgPSBbXSkge1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKClcbiAgICB0aGlzLl9pbnN0YW5jZU1hcCA9IHt9IC8vIOaJgOacieeahOino+eggea1geeoi+WunuS+i1xuICAgIHRoaXMuX2Nsc01hcCA9IHt9IC8vIOaehOmAoOWHveaVsOeahG1hcFxuICAgIHRoaXMuX2luaXRlZCA9IGZhbHNlXG4gICAgdGhpcy5tZWRpYUluZm8gPSBuZXcgTWVkaWFJbmZvKClcbiAgICB0aGlzLmFsbG93ZWRFdmVudHMgPSBhbGxvd2VkRXZlbnRzXG4gICAgdGhpcy5faG9va3MgPSB7fSAvLyDms6jlhozlnKjkuovku7bliY0v5ZCO55qE6ZKp5a2Q77yM5L6L5aaCIGJlZm9yZSgnREVNVVhfQ09NUExFVEUnKVxuICB9XG5cbiAgLyoqXG4gICAqIOS7juS4iuS4i+aWh+S4reiOt+WPluino+eggea1geeoi+WunuS+i++8jOWmguaenOayoeacieWunuS+i++8jOaehOmAoOS4gOS4qlxuICAgKiBAcGFyYW0gdGFnXG4gICAqIEBwYXJhbSBhcmdzXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgZ2V0SW5zdGFuY2UgKHRhZykge1xuICAgIGlmICh0aGlzLl9pbnN0YW5jZU1hcFt0YWddKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VNYXBbdGFnXVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoYCR7dGFnfeWunuS+i+WwmuacquWIneWni+WMlmApXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3lp4vljJblhbfkvZPlrp7kvotcbiAgICogQHBhcmFtIHRhZ1xuICAgKiBAcGFyYW0gYXJnc1xuICAgKi9cbiAgaW5pdEluc3RhbmNlICh0YWcsIC4uLmFyZ3MpIHtcbiAgICBpZiAodGhpcy5fY2xzTWFwW3RhZ10pIHtcbiAgICAgIGNvbnN0IG5ld0luc3RhbmNlID0gbmV3IHRoaXMuX2Nsc01hcFt0YWddKC4uLmFyZ3MpXG4gICAgICB0aGlzLl9pbnN0YW5jZU1hcFt0YWddID0gbmV3SW5zdGFuY2VcbiAgICAgIGlmIChuZXdJbnN0YW5jZS5pbml0KSB7XG4gICAgICAgIG5ld0luc3RhbmNlLmluaXQoKSAvLyBUT0RPOiBsaWZlY2lyY2xlXG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3SW5zdGFuY2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RhZ33mnKrlnKhjb250ZXh05Lit5rOo5YaMYClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6YG/5YWN5aSn6YeP55qEaW5pdEluc3RhbmNl6LCD55So77yM5Yid5aeL5YyW5omA5pyJ55qE57uE5Lu2XG4gICAqIEBwYXJhbSBjb25maWdcbiAgICovXG4gIGluaXQgKGNvbmZpZykge1xuICAgIGlmICh0aGlzLl9pbml0ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKGxldCB0YWcgaW4gdGhpcy5fY2xzTWFwKSB7XG4gICAgICAvLyBpZiBub3QgaW5pdGVkLCBpbml0IGFuIGluc3RhbmNlXG4gICAgICBpZiAodGhpcy5fY2xzTWFwLmhhc093blByb3BlcnR5KHRhZykgJiYgIXRoaXMuX2luc3RhbmNlTWFwW3RhZ10pIHtcbiAgICAgICAgdGhpcy5pbml0SW5zdGFuY2UodGFnLCBjb25maWcpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2luaXRlZCA9IHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiDms6jlhozkuIDkuKrkuIrkuIvmlofmtYHnqIvvvIzmj5DkvpvlronlhajnmoTkuovku7blj5HpgIHmnLrliLZcbiAgICogQHBhcmFtIHRhZ1xuICAgKiBAcGFyYW0gY2xzXG4gICAqL1xuICByZWdpc3RyeSAodGFnLCBjbHMpIHtcbiAgICBjb25zdCBlbWl0dGVyID0gdGhpcy5fZW1pdHRlclxuICAgIGNvbnN0IGNoZWNrTWVzc2FnZU5hbWUgPSB0aGlzLl9pc01lc3NhZ2VOYW1lVmFsaWQuYmluZCh0aGlzKVxuICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgY29uc3QgZW5oYW5jZWQgPSBjbGFzcyBleHRlbmRzIGNscyB7XG4gICAgICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgICAgICBzdXBlciguLi5hcmdzKVxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9XG4gICAgICAgIHRoaXMub25jZUxpc3RlbmVycyA9IHt9XG4gICAgICAgIHRoaXMuVEFHID0gdGFnXG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBzZWxmXG4gICAgICB9XG5cbiAgICAgIG9uIChtZXNzYWdlTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcblxuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnNbbWVzc2FnZU5hbWVdKSB7XG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnNbbWVzc2FnZU5hbWVdLnB1c2goY2FsbGJhY2spXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnNbbWVzc2FnZU5hbWVdID0gW2NhbGxiYWNrXVxuICAgICAgICB9XG5cbiAgICAgICAgZW1pdHRlci5vbihgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgY2FsbGJhY2spIC8vIOW7uueri+WumuWQkemAmuS/oeebkeWQrFxuICAgICAgICByZXR1cm4gZW1pdHRlci5vbihtZXNzYWdlTmFtZSwgY2FsbGJhY2spXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICog5Zyo5p+Q5Liq5LqL5Lu26Kem5Y+R5YmN5omn6KGMXG4gICAgICAgKiBAcGFyYW0gbWVzc2FnZU5hbWVcbiAgICAgICAqIEBwYXJhbSBjYWxsYmFja1xuICAgICAgICovXG4gICAgICBiZWZvcmUgKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuICAgICAgICBpZiAoc2VsZi5faG9va3NbbWVzc2FnZU5hbWVdKSB7XG4gICAgICAgICAgc2VsZi5faG9va3NbbWVzc2FnZU5hbWVdLnB1c2goY2FsbGJhY2spXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5faG9va3NbbWVzc2FnZU5hbWVdID0gW2NhbGxiYWNrXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9uY2UgKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuXG4gICAgICAgIGlmICh0aGlzLm9uY2VMaXN0ZW5lcnNbbWVzc2FnZU5hbWVdKSB7XG4gICAgICAgICAgdGhpcy5vbmNlTGlzdGVuZXJzW21lc3NhZ2VOYW1lXS5wdXNoKGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub25jZUxpc3RlbmVyc1ttZXNzYWdlTmFtZV0gPSBbY2FsbGJhY2tdXG4gICAgICAgIH1cblxuICAgICAgICBlbWl0dGVyLm9uY2UoYCR7bWVzc2FnZU5hbWV9JHtESVJFQ1RfRU1JVF9GTEFHfSR7dGFnfWAsIGNhbGxiYWNrKVxuICAgICAgICByZXR1cm4gZW1pdHRlci5vbmNlKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgIH1cblxuICAgICAgZW1pdCAobWVzc2FnZU5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcblxuICAgICAgICBjb25zdCBiZWZvcmVMaXN0ID0gc2VsZi5faG9va3NbbWVzc2FnZU5hbWVdXG4gICAgICAgIGlmIChiZWZvcmVMaXN0KSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGJlZm9yZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gYmVmb3JlTGlzdFtpXVxuICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW1pdHRlci5lbWl0KG1lc3NhZ2VOYW1lLCAuLi5hcmdzKVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIOWumuWQkeWPkemAgee7meafkOS4que7hOS7tuWNleS+i+eahOa2iOaBr1xuICAgICAgICogQHBhcmFtIG1lc3NhZ2VOYW1lXG4gICAgICAgKiBAcGFyYW0gYXJnc1xuICAgICAgICovXG4gICAgICBlbWl0VG8gKHRhZywgbWVzc2FnZU5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcblxuICAgICAgICByZXR1cm4gZW1pdHRlci5lbWl0KGAke21lc3NhZ2VOYW1lfSR7RElSRUNUX0VNSVRfRkxBR30ke3RhZ31gLCAuLi5hcmdzKVxuICAgICAgfVxuXG4gICAgICBvZmYgKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjaGVja01lc3NhZ2VOYW1lKG1lc3NhZ2VOYW1lKVxuICAgICAgICByZXR1cm4gZW1pdHRlci5vZmYobWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgfVxuXG4gICAgICByZW1vdmVMaXN0ZW5lcnMgKCkge1xuICAgICAgICBjb25zdCBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmJpbmQodGhpcy5saXN0ZW5lcnMpXG5cbiAgICAgICAgZm9yIChsZXQgbWVzc2FnZU5hbWUgaW4gdGhpcy5saXN0ZW5lcnMpIHtcbiAgICAgICAgICBpZiAoaGFzT3duKG1lc3NhZ2VOYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5saXN0ZW5lcnNbbWVzc2FnZU5hbWVdIHx8IFtdXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXVxuICAgICAgICAgICAgICBlbWl0dGVyLm9mZihtZXNzYWdlTmFtZSwgY2FsbGJhY2spXG4gICAgICAgICAgICAgIGVtaXR0ZXIub2ZmKGAke21lc3NhZ2VOYW1lfSR7RElSRUNUX0VNSVRfRkxBR30ke3RhZ31gLCBjYWxsYmFjaylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBtZXNzYWdlTmFtZSBpbiB0aGlzLm9uY2VMaXN0ZW5lcnMpIHtcbiAgICAgICAgICBpZiAoaGFzT3duKG1lc3NhZ2VOYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5vbmNlTGlzdGVuZXJzW21lc3NhZ2VOYW1lXSB8fCBbXVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV1cbiAgICAgICAgICAgICAgZW1pdHRlci5vZmYobWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgICAgICAgICBlbWl0dGVyLm9mZihgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgY2FsbGJhY2spXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICog5Zyo57uE5Lu26ZSA5q+B5pe277yM6buY6K6k5bCG5a6D5rOo5YaM55qE5LqL5Lu25YWo6YOo5Y246L2977yM56Gu5L+d5LiN5Lya6YCg5oiQ5YaF5a2Y5rOE5ryPXG4gICAgICAgKi9cbiAgICAgIGRlc3Ryb3kgKCkge1xuICAgICAgICAvLyBzdGVwMSB1bmxpc3RlbiBldmVudHNcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKVxuXG4gICAgICAgIC8vIHN0ZXAyIHJlbGVhc2UgZnJvbSBjb250ZXh0XG4gICAgICAgIGRlbGV0ZSBzZWxmLl9pbnN0YW5jZU1hcFt0YWddXG4gICAgICAgIGlmIChzdXBlci5kZXN0cm95KSB7XG4gICAgICAgICAgc3VwZXIuZGVzdHJveSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fY2xzTWFwW3RhZ10gPSBlbmhhbmNlZFxuXG4gICAgLyoqXG4gICAgICogZ2V0IGluc3RhbmNlIGltbWVkaWF0ZWx5XG4gICAgICogZS5nIGNvbnN0IGluc3RhbmNlID0gY29udGV4dC5yZWdpc3RyeSh0YWcsIENscykoY29uZmlnKVxuICAgICAqICovXG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5pbml0SW5zdGFuY2UodGFnLCAuLi5hcmdzKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDlr7nlrZjlnKjnmoTlrp7kvovov5vooYxcbiAgICovXG4gIGRlc3Ryb3lJbnN0YW5jZXMgKCkge1xuICAgIE9iamVjdC5rZXlzKHRoaXMuX2luc3RhbmNlTWFwKS5mb3JFYWNoKCh0YWcpID0+IHtcbiAgICAgIGlmICh0aGlzLl9pbnN0YW5jZU1hcFt0YWddLmRlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2VNYXBbdGFnXS5kZXN0cm95KClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIOe8luino+eggea1geeoi+aXoOmcgOWFs+azqOS6i+S7tueahOino+e7kVxuICAgKi9cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fZW1pdHRlciA9IG51bGxcbiAgICB0aGlzLmFsbG93ZWRFdmVudHMgPSBbXVxuICAgIHRoaXMuX2Nsc01hcCA9IG51bGxcbiAgICB0aGlzLl9jb250ZXh0ID0gbnVsbFxuICAgIHRoaXMuZGVzdHJveUluc3RhbmNlcygpXG4gIH1cblxuICAvKipcbiAgICog5a+55L+h6YGT6L+b6KGM5pS25ouiXG4gICAqIEBwYXJhbSBtZXNzYWdlTmFtZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2lzTWVzc2FnZU5hbWVWYWxpZCAobWVzc2FnZU5hbWUpIHtcbiAgICBpZiAoIXRoaXMuYWxsb3dlZEV2ZW50cy5pbmRleE9mKG1lc3NhZ2VOYW1lKSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5yZWdpc3RlcmVkIG1lc3NhZ2UgbmFtZTogJHttZXNzYWdlTmFtZX1gKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250ZXh0XG4iLCJjb25zdCBsZSA9IChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcigyKTtcbiAgKG5ldyBEYXRhVmlldyhidWYpKS5zZXRJbnQxNigwLCAyNTYsIHRydWUpIC8vIGxpdHRsZS1lbmRpYW4gd3JpdGVcbiAgcmV0dXJuIChuZXcgSW50MTZBcnJheShidWYpKVswXSA9PT0gMjU2IC8vIHBsYXRmb3JtLXNwZWMgcmVhZCwgaWYgZXF1YWwgdGhlbiBMRVxufSkoKVxuXG5leHBvcnQgZGVmYXVsdCBsZVxuIiwiY29uc3QgbGUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gIChuZXcgRGF0YVZpZXcoYnVmKSkuc2V0SW50MTYoMCwgMjU2LCB0cnVlKSAvLyBsaXR0bGUtZW5kaWFuIHdyaXRlXG4gIHJldHVybiAobmV3IEludDE2QXJyYXkoYnVmKSlbMF0gPT09IDI1NiAvLyBwbGF0Zm9ybS1zcGVjIHJlYWQsIGlmIGVxdWFsIHRoZW4gTEVcbn0pKClcblxuY29uc3Qgc25pZmZlciA9IHtcbiAgZ2V0IGRldmljZSAoKSB7XG4gICAgbGV0IHIgPSBzbmlmZmVyLm9zO1xuICAgIHJldHVybiByLmlzUGMgPyAncGMnIDogci5pc1RhYmxldCA/ICd0YWJsZXQnIDogJ21vYmlsZSc7XG4gIH0sXG4gIGdldCBicm93c2VyICgpIHtcbiAgICBsZXQgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IHJlZyA9IHtcbiAgICAgIGllOiAvcnY6KFtcXGQuXSspXFwpIGxpa2UgZ2Vja28vLFxuICAgICAgZmlyZm94OiAvZmlyZWZveFxcLyhbXFxkLl0rKS8sXG4gICAgICBjaHJvbWU6IC9jaHJvbWVcXC8oW1xcZC5dKykvLFxuICAgICAgb3BlcmE6IC9vcGVyYS4oW1xcZC5dKykvLFxuICAgICAgc2FmYXJpOiAvdmVyc2lvblxcLyhbXFxkLl0rKS4qc2FmYXJpL1xuICAgIH07XG4gICAgcmV0dXJuIFtdLmNvbmNhdChPYmplY3Qua2V5cyhyZWcpLmZpbHRlcihrZXkgPT4gcmVnW2tleV0udGVzdCh1YSkpKVswXTtcbiAgfSxcbiAgZ2V0IG9zICgpIHtcbiAgICBsZXQgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50XG4gICAgbGV0IGlzV2luZG93c1Bob25lID0gLyg/OldpbmRvd3MgUGhvbmUpLy50ZXN0KHVhKVxuICAgIGxldCBpc1N5bWJpYW4gPSAvKD86U3ltYmlhbk9TKS8udGVzdCh1YSkgfHwgaXNXaW5kb3dzUGhvbmU7XG4gICAgbGV0IGlzQW5kcm9pZCA9IC8oPzpBbmRyb2lkKS8udGVzdCh1YSk7XG4gICAgbGV0IGlzRmlyZUZveCA9IC8oPzpGaXJlZm94KS8udGVzdCh1YSk7XG4gICAgbGV0IGlzVGFibGV0ID0gLyg/OmlQYWR8UGxheUJvb2spLy50ZXN0KHVhKSB8fCAoaXNBbmRyb2lkICYmICEvKD86TW9iaWxlKS8udGVzdCh1YSkpIHx8IChpc0ZpcmVGb3ggJiYgLyg/OlRhYmxldCkvLnRlc3QodWEpKTtcbiAgICBsZXQgaXNQaG9uZSA9IC8oPzppUGhvbmUpLy50ZXN0KHVhKSAmJiAhaXNUYWJsZXQ7XG4gICAgbGV0IGlzUGMgPSAhaXNQaG9uZSAmJiAhaXNBbmRyb2lkICYmICFpc1N5bWJpYW47XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVGFibGV0LFxuICAgICAgaXNQaG9uZSxcbiAgICAgIGlzQW5kcm9pZCxcbiAgICAgIGlzUGMsXG4gICAgICBpc1N5bWJpYW4sXG4gICAgICBpc1dpbmRvd3NQaG9uZSxcbiAgICAgIGlzRmlyZUZveFxuICAgIH07XG4gIH0sXG5cbiAgZ2V0IGlzTGUgKCkge1xuICAgIHJldHVybiBsZVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzbmlmZmVyO1xuIiwiY2xhc3MgVVRGOCB7XG4gIHN0YXRpYyBkZWNvZGUgKHVpbnQ4YXJyYXkpIHtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBjb25zdCBpbnB1dCA9IHVpbnQ4YXJyYXk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGNvbnN0IGxlbmd0aCA9IHVpbnQ4YXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpbnB1dFtpXSA8IDB4ODApIHtcbiAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShpbnB1dFtpXSkpO1xuICAgICAgICArK2k7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4QzApIHtcbiAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEUwKSB7XG4gICAgICAgIGlmIChVVEY4Ll9jaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMSkpIHtcbiAgICAgICAgICBjb25zdCB1Y3M0ID0gKGlucHV0W2ldICYgMHgxRikgPDwgNiB8IChpbnB1dFtpICsgMV0gJiAweDNGKTtcbiAgICAgICAgICBpZiAodWNzNCA+PSAweDgwKSB7XG4gICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHVjczQgJiAweEZGRkYpKTtcbiAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RjApIHtcbiAgICAgICAgaWYgKFVURjguX2NoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAyKSkge1xuICAgICAgICAgIGNvbnN0IHVjczQgPSAoaW5wdXRbaV0gJiAweEYpIDw8IDEyIHwgKGlucHV0W2kgKyAxXSAmIDB4M0YpIDw8IDYgfCBpbnB1dFtpICsgMl0gJiAweDNGO1xuICAgICAgICAgIGlmICh1Y3M0ID49IDB4ODAwICYmICh1Y3M0ICYgMHhGODAwKSAhPT0gMHhEODAwKSB7XG4gICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHVjczQgJiAweEZGRkYpKTtcbiAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RjgpIHtcbiAgICAgICAgaWYgKFVURjguX2NoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAzKSkge1xuICAgICAgICAgIGxldCB1Y3M0ID0gKGlucHV0W2ldICYgMHg3KSA8PCAxOCB8IChpbnB1dFtpICsgMV0gJiAweDNGKSA8PCAxMiB8XG4gICAgICAgICAgICAgICAgICAgIChpbnB1dFtpICsgMl0gJiAweDNGKSA8PCA2IHwgKGlucHV0W2kgKyAzXSAmIDB4M0YpO1xuICAgICAgICAgIGlmICh1Y3M0ID4gMHgxMDAwMCAmJiB1Y3M0IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgIHVjczQgLT0gMHgxMDAwMDtcbiAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHVjczQgPj4+IDEwKSB8IDB4RDgwMCkpO1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgodWNzNCAmIDB4M0ZGKSB8IDB4REMwMCkpO1xuICAgICAgICAgICAgaSArPSA0O1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkZGRCkpO1xuICAgICAgKytpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuam9pbignJyk7XG4gIH1cblxuICBzdGF0aWMgX2NoZWNrQ29udGludWF0aW9uICh1aW50OGFycmF5LCBzdGFydCwgY2hlY2tMZW5ndGgpIHtcbiAgICBsZXQgYXJyYXkgPSB1aW50OGFycmF5O1xuICAgIGlmIChzdGFydCArIGNoZWNrTGVuZ3RoIDwgYXJyYXkubGVuZ3RoKSB7XG4gICAgICB3aGlsZSAoY2hlY2tMZW5ndGgtLSkge1xuICAgICAgICBpZiAoKGFycmF5Wysrc3RhcnRdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVURjg7XG4iLCJjbGFzcyBBdWRpb0N0eCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZyk7XG4gICAgbGV0IEF1ZGlvQ29udGV4dCA9ICB3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQ7XG4gICAgdGhpcy5jb250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuICAgIHRoaXMuZ2Fpbk5vZGUgPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgIHRoaXMuZ2Fpbk5vZGUuY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pO1xuICAgIHRoaXMubWV0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNhbXBsZXMgPSBbXTtcbiAgICB0aGlzLnByZWxvYWRUaW1lID0gdGhpcy5jb25maWcucHJlbG9hZFRpbWUgfHwgMztcbiAgICB0aGlzLmR1cmF0aW9uID0gMDtcblxuICAgIHRoaXMuX2N1cnJlbnRCdWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbmV4dEJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9sYXN0cHRzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3ByZURlY29kZSA9IFtdO1xuICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gMDtcbiAgICB0aGlzLl9kZWNvZGluZyA9IGZhbHNlO1xuICAgIFxuICAgIC8vIOiusOW9leWklumDqOS8oOi+k+eahOeKtuaAgVxuICAgIHRoaXMuX3BsYXllZCA9IGZhbHNlO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50VGltZTtcbiAgfVxuXG4gIGRlY29kZUF1ZGlvIChhdWRpb1RyYWNrKSB7XG4gICAgbGV0IHtzYW1wbGVzfSA9IGF1ZGlvVHJhY2s7XG4gICAgbGV0IGRhdGEgPSBzYW1wbGVzO1xuICAgIGF1ZGlvVHJhY2suc2FtcGxlcyA9IFtdO1xuICAgIHRoaXMuc2V0QXVkaW9EYXRhKGRhdGEpOyBcbiAgfVxuICBzZXRBdWRpb0RhdGEgKGRhdGEpIHtcbiAgICBmb3IobGV0IGkgPSAwO2kgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldLnB0cyA9IChkYXRhW2ldLnB0cyA9PT0gdW5kZWZpbmVkKSA/IGRhdGFbaV0uZHRzIDogZGF0YVtpXS5wdHM7XG4gICAgICB0aGlzLl9wcmVEZWNvZGUucHVzaChkYXRhW2ldKTtcbiAgICB9XG4gICAgaWYodGhpcy5fcHJlRGVjb2RlLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmKHRoaXMuX2xhc3RwdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9sYXN0cHRzID0gdGhpcy5fcHJlRGVjb2RlWzBdLnB0cztcbiAgICAgIH1cbiAgICAgIGlmKCh0aGlzLl9wcmVEZWNvZGVbdGhpcy5fcHJlRGVjb2RlLmxlbmd0aCAtIDFdLnB0cyAtIHRoaXMuX2xhc3RwdHMpIC8gMTAwMCA+IHRoaXMucHJlbG9hZFRpbWUpIHtcbiAgICAgICAgdGhpcy5kZWNvZGVBQUMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkZWNvZGVBQUMoKSB7XG4gICAgaWYodGhpcy5fZGVjb2RpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fZGVjb2RpbmcgPSB0cnVlO1xuICAgIGxldCBkYXRhID0gdGhpcy5fcHJlRGVjb2RlO1xuICAgIGxldCBzYW1wbGVzID0gW107XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgc2FtcGxlID0gZGF0YS5zaGlmdCgpO1xuICAgIHdoaWxlKHNhbXBsZSkge1xuICAgICAgbGV0IHNhbXBsZURhdGEgPSBBdWRpb0N0eC5nZXRBQUNEYXRhKHRoaXMubWV0YSwgc2FtcGxlKVxuICAgICAgc2FtcGxlcy5wdXNoKHNhbXBsZURhdGEpO1xuICAgICAgdGhpcy5fbGFzdHB0cyA9IHNhbXBsZS5wdHM7XG4gICAgICBzYW1wbGUgPSBkYXRhLnNoaWZ0KClcbiAgICB9XG4gICAgbGV0IGJ1ZmZlciA9IEF1ZGlvQ3R4LmNvbWJpbGVEYXRhKHNhbXBsZXMpO1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmNvbnRleHQuZGVjb2RlQXVkaW9EYXRhKGJ1ZmZlci5idWZmZXIsIGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAgICAgICBsZXQgYXVkaW9Tb3VyY2UgPSBfdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgICBhdWRpb1NvdXJjZS5idWZmZXIgPSBidWZmZXI7XG4gICAgICAgIGF1ZGlvU291cmNlLm9uZW5kZWQgPSBfdGhpcy5vblNvdXJjZUVuZGVkLmJpbmQoX3RoaXMpO1xuICAgICAgICBfdGhpcy5zYW1wbGVzLnB1c2goe1xuICAgICAgICAgIHRpbWU6IF90aGlzLmR1cmF0aW9uLFxuICAgICAgICAgIGR1cmF0aW9uOiBidWZmZXIuZHVyYXRpb24sXG4gICAgICAgICAgZGF0YTogYXVkaW9Tb3VyY2VcbiAgICAgICAgfSlcblxuICAgICAgICBfdGhpcy5kdXJhdGlvbiArPSBidWZmZXIuZHVyYXRpb247XG5cbiAgICAgICAgaWYoIV90aGlzLl9jdXJyZW50QnVmZmVyKSB7XG4gICAgICAgICAgX3RoaXMuX2N1cnJlbnRCdWZmZXIgPSBfdGhpcy5nZXRUaW1lQnVmZmVyKF90aGlzLmN1cnJlbnRUaW1lKTtcblxuICAgICAgICAgIGlmKF90aGlzLl9wbGF5ZWQpIHtcbiAgICAgICAgICAgIF90aGlzLnBsYXkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZighX3RoaXMuX25leHRCdWZmZXIgJiYgX3RoaXMuX2N1cnJlbnRCdWZmZXIpIHtcbiAgICAgICAgICBfdGhpcy5fbmV4dEJ1ZmZlciA9IF90aGlzLmdldFRpbWVCdWZmZXIoX3RoaXMuY3VycmVudFRpbWUgKyBfdGhpcy5fY3VycmVudEJ1ZmZlci5kdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuX2RlY29kaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYoKF90aGlzLl9wcmVEZWNvZGUubGVuZ3RoID4gMCAmJiBfdGhpcy5fcHJlRGVjb2RlW190aGlzLl9wcmVEZWNvZGUubGVuZ3RoIC0gMV0ucHRzIC0gX3RoaXMuX2xhc3RwdHMpIC8gMTAwMCA+PSBfdGhpcy5wcmVsb2FkVGltZSkge1xuICAgICAgICAgIF90aGlzLmRlY29kZUFBQygpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICB9XG5cbiAgb25Tb3VyY2VFbmRlZCgpIHtcbiAgICBpZighdGhpcy5fbmV4dEJ1ZmZlciB8fCAhdGhpcy5fcGxheWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBhdWRpb1NvdXJjZSA9IHRoaXMuX25leHRCdWZmZXIuZGF0YTtcbiAgICBhdWRpb1NvdXJjZS5zdGFydCgpO1xuICAgIGF1ZGlvU291cmNlLmNvbm5lY3QodGhpcy5nYWluTm9kZSk7XG4gICAgdGhpcy5fY3VycmVudEJ1ZmZlciA9IHRoaXMuX25leHRCdWZmZXI7XG4gICAgdGhpcy5fY3VycmVudFRpbWUgPSB0aGlzLl9jdXJyZW50QnVmZmVyLnRpbWU7XG4gICAgdGhpcy5fbmV4dEJ1ZmZlciA9IHRoaXMuZ2V0VGltZUJ1ZmZlcih0aGlzLmN1cnJlbnRUaW1lKTtcbiAgICBpZih0aGlzLl9jdXJyZW50QnVmZmVyKSB7XG4gICAgICB0aGlzLl9uZXh0QnVmZmVyID0gdGhpcy5nZXRUaW1lQnVmZmVyKHRoaXMuY3VycmVudFRpbWUgKyB0aGlzLl9jdXJyZW50QnVmZmVyLmR1cmF0aW9uKTtcbiAgICB9XG4gIH1cblxuICBwbGF5KCkge1xuICAgIHRoaXMuX3BsYXllZCA9IHRydWU7XG4gICAgaWYoIXRoaXMuX2N1cnJlbnRCdWZmZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGF1ZGlvU291cmNlID0gdGhpcy5fY3VycmVudEJ1ZmZlci5kYXRhO1xuICAgIGF1ZGlvU291cmNlLmNvbm5lY3QodGhpcy5nYWluTm9kZSk7XG4gICAgYXVkaW9Tb3VyY2Uuc3RhcnQoKTtcbiAgfVxuXG4gIGdldFRpbWVCdWZmZXIodGltZSkge1xuICAgIGxldCByZXQ7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuc2FtcGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHNhbXBsZSA9IHRoaXMuc2FtcGxlc1tpXVxuICAgICAgaWYoc2FtcGxlLnRpbWUgPD0gdGltZSAmJiAoc2FtcGxlLnRpbWUgKyBzYW1wbGUuZHVyYXRpb24pID4gdGltZSkge1xuICAgICAgICByZXQgPSBzYW1wbGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgc2V0QXVkaW9NZXRhRGF0YShtZXRhKSB7XG4gICAgdGhpcy5tZXRhID0gbWV0YTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBQUNEYXRhKG1ldGEsIHNhbXBsZSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgVWludDhBcnJheShzYW1wbGUuZGF0YS5ieXRlTGVuZ3RoICsgNyk7XG4gICAgbGV0IGFkdHMgPSBBdWRpb0N0eC5nZXRBZHRzKG1ldGEsIHNhbXBsZS5kYXRhKTtcbiAgICBidWZmZXIuc2V0KGFkdHMpO1xuICAgIGJ1ZmZlci5zZXQoc2FtcGxlLmRhdGEsIDcpO1xuICAgIHJldHVybiBidWZmZXI7XG4gIH1cblxuICBzdGF0aWMgY29tYmlsZURhdGEoc2FtcGxlcykge1xuICAgIC8vIGdldCBsZW5ndGhcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBmb3IobGV0IGkgPSAwLGsgPSBzYW1wbGVzLmxlbmd0aDsgaSA8IGs7IGkrKykge1xuICAgICAgbGVuZ3RoICs9IHNhbXBsZXNbaV0uYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgXG4gICAgbGV0IHJldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgLy8gY29tYmlsZSBkYXRhO1xuICAgIGZvcihsZXQgaSA9IDAsayA9IHNhbXBsZXMubGVuZ3RoOyBpIDwgazsgaSsrKSB7XG4gICAgICByZXQuc2V0KHNhbXBsZXNbaV0sIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gc2FtcGxlc1tpXS5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgc3RhdGljIGdldEFkdHMobWV0YSwgZGF0YSkge1xuICAgIGxldCBhZHRzID0gbmV3IFVpbnQ4QXJyYXkoNyk7XG4gICAgXG4gICAgLy8g6K6+572u5ZCM5q2l5L2NIDB4ZmZmIDEyYml0IFxuICAgIGFkdHNbMF0gPSAweGZmO1xuICAgIGFkdHNbMV0gPSAweGYwO1xuXG4gICAgLy8gT2JqZWN0IGRhdGEgKOayoeS7gOS5iOS6uueUqE1QRUctMuS6hu+8jEhMU+WSjEZMVuS5n+WFqOaYr01QRUctNO+8jOi/memHjOebtOaOpTApICAxYml0IFxuICAgIC8vIExldmVsIGFsd2F5cyAwMCAyYml0IFxuICAgIC8vIENSQyBhbHdheXMgMSAxYml0IFxuICAgIGFkdHNbMV0gPSBhZHRzWzFdIHwgMHgwMTtcblxuICAgIC8vIHByb2ZpbGUgMmJpdFxuICAgIGFkdHNbMl0gPSAweGMwICYgKChtZXRhLm9iamVjdFR5cGUtMSkgPDwgNik7XG5cbiAgICAvL3NhbXBsZUZyZXF1ZW5jeUluZGV4XG4gICAgYWR0c1syXSA9IGFkdHNbMl0gfCAoMHgzYyAmIChtZXRhLnNhbXBsZVJhdGVJbmRleCA8PCAyKSlcblxuICAgIC8vcHJpdmF0ZSBiaXQgMCAxYml0XG4gICAgLy8gY2hhbmVsIGNvbmZpZ3VyYXRpb24gM2JpdFxuICAgIGFkdHNbMl0gPSBhZHRzWzJdIHwgKDB4MDEgJiBtZXRhLmNoYW5uZWxDb3VudCA+PiAyKTtcbiAgICBhZHRzWzNdID0gMHhjMCAmIChtZXRhLmNoYW5uZWxDb3VudCA8PCA2KTtcblxuICAgIC8vIG9yaWdpbmFsX2NvcHk6IDAgMWJpdFxuICAgIC8vIGhvbWU6IDAgMWJpdFxuXG4gICAgLy8gYWR0c192YXJpYWJsZV9oZWFkZXIoKVxuICAgIC8vIGNvcHlyaWdodGVkX2lkX2JpdCAwIDFiaXRcbiAgICAvLyBjb3B5cmlnaHRlZF9pZF9zdGFydCAwIDFiaXRcblxuICAgIC8vIGFhY19mcmFtZV9sZW5ndGggMTNiaXQ7XG4gICAgbGV0IGFhY2ZyYW1lbGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoICsgNztcblxuICAgIGFkdHNbM10gPSBhZHRzWzNdIHwgKDB4MDMgJiBhYWNmcmFtZWxlbmd0aCA+PiAxMSk7XG4gICAgYWR0c1s0XSA9IDB4ZmYgJiAoYWFjZnJhbWVsZW5ndGggPj4gMyk7XG4gICAgYWR0c1s1XSA9IDB4ZTAgJiAoYWFjZnJhbWVsZW5ndGggPDwgNSk7XG5cbiAgICAvLyBhZHRzX2J1ZmZlcl9mdWxsbmVzcyAweDdmZiAxMWJpdFxuICAgIGFkdHNbNV0gPSBhZHRzWzVdIHwgMHgxZlxuICAgIGFkdHNbNl0gPSAweGZjO1xuXG4gICAgLy8gbnVtYmVyX29mX3Jhd19kYXRhX2Jsb2Nrc19pbl9mcmFtZSAwIDJiaXQ7XG4gICAgcmV0dXJuIGFkdHM7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXVkaW9DdHg7XG4iLCJpbXBvcnQgVmlkZW9DdHggZnJvbSAnLi92aWRlby1jb250ZXh0JztcbmltcG9ydCBBdWRpb0N0eCBmcm9tICcuL2F1ZGlvLWNvbnRleHQnO1xuaW1wb3J0IHsgZ2V0VGlja2VyIH0gZnJvbSAnLi90aWNrZXInO1xuXG4vKipcbiAqIOmfs+eUu+WQjOatpeiwg+WSjOWZqFxuICovXG5jbGFzcyBBVlJlY29uY2lsZXIge1xuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcbiAgICB0aGlzLmFDdHggPSBwcm9wcy5hQ3R4O1xuICAgIHRoaXMudkN0eCA9IHByb3BzLnZDdHg7XG4gICAgdGhpcy5fdGlja2VyID0gbnVsbDtcbiAgICB0aGlzLm9uVGljayA9IHRoaXMub25UaWNrLmJpbmQodGhpcylcblxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLl90aWNrZXIgPSBuZXcgKGdldFRpY2tlcigpKSh7IGludGVydmFsOiAxMDAgfSk7XG4gICAgdGhpcy5fdGlja2VyLm5leHRUaWNrKHRoaXMub25UaWNrKVxuICB9XG5cbiAgb25UaWNrICgpIHtcbiAgICB0aGlzLl90aWNrZXIubmV4dFRpY2sodGhpcy5vblRpY2spXG4gIH1cblxuICBkb1JlY29uY2lsZSAoKSB7XG4gICAgY29uc3QgdkN1clRpbWUgPSB0aGlzLnZDdHguY3VycmVudFRpbWU7XG4gICAgY29uc3QgYUN1clRpbWUgPSB0aGlzLmFDdHguY3VycmVudFRpbWU7XG4gICAgY29uc3QgZ2FwID0gdkN1clRpbWUgLSBhQ3VyVGltZTtcbiAgICBpZiAoZ2FwID4gMC4xKSB7IC8vIGF1ZGlvIGRlbGF5ZWQgZm9yIG1vcmUgdGhhbiAxMDBtc1xuICAgICAgdGhpcy52Q3R4LnBhdXNlKClcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnZDdHgucGxheSgpXG4gICAgICB9LCBnYXAgKiAxMDAwKVxuICAgIH0gZWxzZSBpZiAoZ2FwIDwgLTAuMDIpIHtcbiAgICAgIHRoaXMudkN0eC5jdXJyZW50VGltZVxuICAgIH1cbiAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbmNsYXNzIE1vYmlsZVZpZGVvIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMudkN0eCA9IG5ldyBWaWRlb0N0eCgpO1xuICAgIHRoaXMuYUN0eCA9IG5ldyBBdWRpb0N0eChjb25maWcpO1xuXG4gICAgdGhpcy52Q3R4Lm9uY2FucGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmFwcGVuZENoaWxkKF90aGlzLnZDdHguY2FudmFzKTtcbiAgICAgIGNvbnNvbGUubG9nKCdjYW5wbGF5JywgX3RoaXMpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2FucGxheScpKTtcbiAgICB9XG4gICAgdGhpcy5oaXN0b3J5VGltZSA9IDA7XG4gIH1cblxuICBkZXN0cm95ICgpIHtcblxuICB9XG5cbiAgb25EZW11eENvbXBsZXRlICh2aWRlb1RyYWNrLCBhdWRpb1RyYWNrKSB7XG4gICAgdGhpcy5hQ3R4LmRlY29kZUF1ZGlvKGF1ZGlvVHJhY2spO1xuICAgIHRoaXMudkN0eC5kZWNvZGVWaWRlbyh2aWRlb1RyYWNrKTtcbiAgfVxuXG4gIHNldEF1ZGlvTWV0YSAobWV0YSkge1xuICAgIHRoaXMuYUN0eC5zZXRBdWRpb01ldGFEYXRhKG1ldGEpO1xuICB9XG5cbiAgc2V0VmlkZW9NZXRhIChtZXRhKSB7XG4gICAgdGhpcy52Q3R4LnNldFZpZGVvTWV0YURhdGEobWV0YSk7XG4gIH1cblxuICBnZXQgY3VycmVudFRpbWUgKCkge1xuXG4gIH1cblxuICBwbGF5ICgpIHtcbiAgICB0aGlzLmFDdHgucGxheSgpO1xuICAgIHRoaXMudkN0eC5wbGF5KCk7XG4gIH1cbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdtb2JpbGUtdmlkZW8nLCBNb2JpbGVWaWRlbyk7XG4iLCJjbGFzcyBTb3VyY2VCdWZmZXIge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWcpO1xuICAgIHRoaXMudHlwZSA9IHRoaXMuY29uZmlnLnR5cGU7XG4gICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRHb3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbGFzdEdldCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1c2ggKGZyYW1lKSB7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgaWYgKGZyYW1lLmlzS2V5ZnJhbWUpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRHb3AgPSB7XG4gICAgICAgICAgc2FtcGxlczogW10sXG4gICAgICAgICAgc3RhcnQ6IGZyYW1lLmR0cyxcbiAgICAgICAgICBlbmQ6IGZyYW1lLmR0cyxcbiAgICAgICAgICBuZXh0R29wOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEdvcCkge1xuICAgICAgICAgIHRoaXMuY3VycmVudEdvcC5uZXh0R29wID0gY3VycmVudEdvcDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRHb3AgPSBjdXJyZW50R29wO1xuICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHRoaXMuY3VycmVudEdvcCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRHb3ApIHtcbiAgICAgICAgdGhpcy5jdXJyZW50R29wLnNhbXBsZXMucHVzaChmcmFtZSk7XG5cbiAgICAgICAgaWYgKGZyYW1lLmR0cyA8IHRoaXMuY3VycmVudEdvcC5zdGFydCkge1xuICAgICAgICAgIHRoaXMuY3VycmVudEdvcC5zdGFydCA9IGZyYW1lLmR0cztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmcmFtZS5kdHMgPiB0aGlzLmN1cnJlbnRHb3AuZW5kKSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50R29wLmVuZCA9IGZyYW1lLmR0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCAodGltZSkge1xuICAgIGlmICh0aGlzLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgc2FtcGxlID0gdGhpcy5fZ2V0TmV4dCgpO1xuICAgICAgICByZXR1cm4gc2FtcGxlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9nZXROZXh0ICgpIHtcbiAgICBpZiAoIXRoaXMuX2xhc3RHZXQpIHtcbiAgICAgIGxldCBnb3AgPSB0aGlzLmJ1ZmZlclswXTtcbiAgICAgIGlmIChnb3Auc2FtcGxlcy5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLl9sYXN0R2V0ID0ge1xuICAgICAgICBnb3AsXG4gICAgICAgIGluZGV4OiAwXG4gICAgICB9XG4gICAgICByZXR1cm4gZ29wLnNhbXBsZXNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBnb3AgPSB0aGlzLl9sYXN0R2V0LmdvcDtcbiAgICAgIGxldCBzYW1wbGUgPSBnb3Auc2FtcGxlc1t0aGlzLl9sYXN0R2V0LmluZGV4ICsgMV07XG4gICAgICBpZiAoc2FtcGxlKSB7XG4gICAgICAgIHRoaXMuX2xhc3RHZXQuaW5kZXggPSB0aGlzLl9sYXN0R2V0LmluZGV4ICsgMTtcbiAgICAgICAgcmV0dXJuIHNhbXBsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdvcCA9IGdvcC5uZXh0R29wO1xuICAgICAgICBpZiAoIWdvcCB8fCBnb3Auc2FtcGxlcy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNhbXBsZSA9IGdvcC5zYW1wbGVzWzBdO1xuICAgICAgICB0aGlzLl9sYXN0R2V0ID0ge1xuICAgICAgICAgIGdvcCxcbiAgICAgICAgICBpbmRleDogMFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzYW1wbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlIChzdGFydCwgZW5kKSB7XG4gICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGdvcCA9IHRoaXMuYnVmZmVyWzBdO1xuICAgIHdoaWxlIChnb3ApIHtcbiAgICAgIGlmIChnb3AuZW5kIDwgZW5kICYmIGdvcC5zdGFydCA+PSBzdGFydCkge1xuICAgICAgICBkZWxldGUgdGhpcy5idWZmZXJbaV07XG4gICAgICAgIGdvcCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBnb3AgPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU291cmNlQnVmZmVyO1xuIiwiLyoqXG4gKiBAYXV0aG9yIGZ1eXVoYW9AYnl0ZWRhbmNlLmNvbVxuICovXG5cbmNsYXNzIFRpY2tlciB7XG4gIGNvbnN0cnVjdG9yIChvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyB8fCB7fSwge1xuICAgICAgaW50ZXJ2YWw6IDQwXG4gICAgfSlcblxuICAgIHRoaXMuY2FsbGJhY2tzID0gW11cbiAgfVxuXG4gIG5leHRUaWNrKC4uLmNhbGxiYWNrcykge1xuICAgIHRoaXMuY2FsbGJhY2tzID0gY2FsbGJhY2tzXG4gIH1cblxuICBvblRpY2sgKCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLmNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY2FsbGJhY2sgPSB0aGlzLmNhbGxiYWNrc1tpXVxuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIHNldEludGVydmFsIChpbnRlcnZhbCkge1xuICAgIHRoaXMub3B0aW9ucy5pbnRlcnZhbCA9IGludGVydmFsXG4gIH1cbn1cblxuLyoqXG4gKiB0aWNrZXIgdXNlIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICovXG5jbGFzcyBSYWZUaWNrZXIgZXh0ZW5kcyBUaWNrZXIge1xuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICB0aGlzLnRpbWVySWQgPSBudWxsXG4gICAgdGhpcy5fc3ViVGltZXJJZCA9IG51bGxcbiAgfVxuXG4gIG5leFRpY2sgKC4uLmNhbGxiYWNrcykge1xuICAgIHN1cGVyLm5leHRUaWNrKC4uLmNhbGxiYWNrcylcbiAgICBjb25zdCB0aWNrRnVuYyA9IFJhZlRpY2tlci5nZXRUaWNrRnVuYygpXG4gICAgdGlja0Z1bmModGhpcy50aWNrLmJpbmQodGhpcykpXG4gIH1cblxuICB0aWNrICh0aW1lc3RhbXApIHtcbiAgICBpZiAoIXRoaXMucHJldikge1xuICAgICAgdGhpcy5wcmV2ID0gdGltZXN0YW1wXG4gICAgfVxuXG4gICAgY29uc3QgeyBpbnRlcnZhbCB9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHsgZ2V0VGlja0Z1bmMgfSA9IFJhZlRpY2tlcjtcblxuICAgIGNvbnN0IHRpY2tGdW5jID0gZ2V0VGlja0Z1bmMoKVxuICAgIGNvbnN0IHJlc3QgPSAodGhpcy5wcmV2ICsgaW50ZXJ2YWwpIC0gdGltZXN0YW1wXG5cbiAgICBjb25zdCBuZXh0VGljayA9ICgpID0+IHtcbiAgICAgIHRoaXMudGltZXJJZCA9IHRpY2tGdW5jKHRoaXMudGljay5iaW5kKHRoaXMpKVxuICAgIH1cblxuICAgIGNvbnN0IHJ1bkNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICAgIHRoaXMub25UaWNrKClcbiAgICB9XG5cbiAgICBpZiAocmVzdCA8PSAwKSB7XG4gICAgICBpZiAodGhpcy5fc3ViVGltZXJJZCkge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3N1YlRpbWVySWQpO1xuICAgICAgICB0aGlzLl9zdWJUaW1lcklkID0gbnVsbFxuICAgICAgfVxuICAgICAgcnVuQ2FsbGJhY2soKVxuICAgIH0gZWxzZSBpZiAocmVzdCA8PSAxMCkge1xuICAgICAgdGhpcy5fc3ViVGltZXJJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBydW5DYWxsYmFjaygpXG4gICAgICB9LCByZXN0KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0VGljaygpXG4gICAgfVxuICB9XG5cbiAgc3RvcCAoKSB7XG4gICAgaWYgKHRoaXMudGltZXJJZCkge1xuICAgICAgY29uc3QgY2FuY2VsRnVuYyA9IFJhZlRpY2tlci5nZXRDYW5jZWxGdW5jKClcblxuICAgICAgY2FuY2VsRnVuYyh0aGlzLnRpbWVySWQpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFRpY2tGdW5jICgpIHtcbiAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gIH1cblxuICBzdGF0aWMgZ2V0Q2FuY2VsRnVuYyAoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWVcbiAgfVxuXG4gIHN0YXRpYyBpc1N1cHBvcnRlZCAoKSB7XG4gICAgcmV0dXJuIFJhZlRpY2tlci5nZXRUaWNrRnVuYygpICE9PSB1bmRlZmluZWRcbiAgfVxufVxuXG4vKipcbiAqIHVzZSBzZXRUaW1lb3V0IGZvciBicm93c2VycyB3aXRob3V0IHJhZiBzdXBwb3J0XG4gKi9cbmNsYXNzIFRpbWVvdXRUaWNrZXIgZXh0ZW5kcyBUaWNrZXIge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpXG4gICAgdGhpcy50aW1lb3V0SWQgPSBudWxsXG5cbiAgfVxuXG4gIG5leHRUaWNrICguLi5jYWxsYmFja3MpIHtcbiAgICBzdXBlci5uZXh0VGljayguLi5jYWxsYmFja3MpXG4gICAgdGhpcy50aW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLm9uVGljaygpO1xuICAgIH0sIHRoaXMub3B0aW9ucy5pbnRlcnZhbClcbiAgfVxuXG4gIHN0b3AgKCkge1xuICAgIGlmICh0aGlzLnRpbWVvdXRJZCkge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZClcbiAgICB9XG4gIH1cblxufVxuXG4vKipcbiAqIOi/lOWbnlRpY2tlcuaehOmAoOWHveaVsFxuICogQHJldHVybnMge1RpY2tlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFRpY2tlciA9ICgpID0+IHtcbiAgaWYgKFJhZlRpY2tlci5pc1N1cHBvcnRlZCgpKSB7XG4gICAgcmV0dXJuIFJhZlRpY2tlclxuICB9IGVsc2Uge1xuICAgIHJldHVybiBUaW1lb3V0VGlja2VyXG4gIH1cbn1cbiIsImltcG9ydCBXb3JrZXJpZnkgZnJvbSAnd2Vid29ya2lmeS13ZWJwYWNrJ1xuaW1wb3J0IFN0cmVhbSBmcm9tICcuLi93cml0ZS9zdHJlYW0nO1xuaW1wb3J0IE5hbHVuaXQgZnJvbSAnLi4vLi4vLi4veGdwbGF5ZXItY29kZWMvc3JjL2gyNjQvbmFsdW5pdCc7XG5pbXBvcnQgWVVWQ2FudmFzIGZyb20gJy4veXV2LWNhbnZhcyc7XG5pbXBvcnQgU291cmNlQnVmZmVyIGZyb20gJy4vc291cmNlYnVmZmVyJztcbmNsYXNzIFZpZGVvQ2FudmFzIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnKTtcbiAgICB0aGlzLmNhbnZhcyA9IHRoaXMuY29uZmlnLmNhbnZhcyA/IHRoaXMuY29uZmlnLmNhbnZhcyA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIHRoaXMuc291cmNlID0gbmV3IFNvdXJjZUJ1ZmZlcih7dHlwZTogJ3ZpZGVvJ30pO1xuICAgIHRoaXMucHJlbG9hZFRpbWUgPSB0aGlzLmNvbmZpZy5wcmVsb2FkVGltZSB8fCAzO1xuICAgIHRoaXMub25jYW5wbGF5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWV0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJlYWR5U3RhdHVzID0gMDtcbiAgICB0aGlzLnBhdXNlZCA9IHRydWU7XG4gICAgdGhpcy5jb3VudCA9IDA7XG4gICAgdGhpcy5jdXJyZW50VGltZSA9IDA7XG4gICAgdGhpcy5sYXN0UGxheWVkID0gMDtcblxuICAgIHRoaXMuX2RlY29kZXJJbml0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9hdmNjcHVzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fZGVjb2RlZEZyYW1lcyA9IHt9O1xuICAgIHRoaXMuX2xhc3RTYW1wbGVEdHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fYmFzZUR0cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmluaXRXYXNtV29ya2VyKCk7XG4gIH1cblxuICBwbGF5ICgpIHtcbiAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuICAgIHRoaXMuX29uVGltZXIoKTtcbiAgfVxuXG4gIHBhdXNlICgpIHtcbiAgICB0aGlzLnBhdXNlZCA9IHRydWU7XG4gIH1cblxuICBzZWVrICh0aW1lKSB7XG4gICAgdGhpcy5jdXJyZW50VGltZSA9IHRpbWU7XG4gIH1cblxuICBpbml0V2FzbVdvcmtlciAoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICB0aGlzLndhc213b3JrZXIgPSBXb3JrZXJpZnkocmVxdWlyZS5yZXNvbHZlKCcuL3dvcmtlci5qcycpKTtcbiAgICB0aGlzLndhc213b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgbXNnOiAnaW5pdCdcbiAgICB9KVxuICAgIHRoaXMud2FzbXdvcmtlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbXNnID0+IHtcbiAgICAgIHN3aXRjaCAobXNnLmRhdGEubXNnKSB7XG4gICAgICAgIGNhc2UgJ0RFQ09ERVJfUkVBRFknOlxuICAgICAgICAgIF90aGlzLl9kZWNvZGVySW5pdGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnREVDT0RFRCc6XG4gICAgICAgICAgdGhpcy5fb25EZWNvZGVkKG1zZy5kYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldFZpZGVvTWV0YURhdGEgKG1ldGEpIHtcbiAgICB0aGlzLm1ldGEgPSBtZXRhO1xuICAgIGlmICghdGhpcy5fZGVjb2RlckluaXRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuX2F2Y2NwdXNoZWQgPSB0cnVlO1xuICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkobWV0YS5zcHMuYnl0ZUxlbmd0aCArIDQpO1xuICAgIGRhdGEuc2V0KFswLCAwLCAwLCAxXSlcbiAgICBkYXRhLnNldChtZXRhLnNwcywgNCk7XG4gICAgdGhpcy53YXNtd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgIG1zZzogJ2RlY29kZScsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSlcblxuICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShtZXRhLnBwcy5ieXRlTGVuZ3RoICsgNCk7XG4gICAgZGF0YS5zZXQoWzAsIDAsIDAsIDFdKVxuICAgIGRhdGEuc2V0KG1ldGEucHBzLCA0KTtcbiAgICB0aGlzLndhc213b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgbXNnOiAnZGVjb2RlJyxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KVxuXG4gICAgaWYgKCF0aGlzLnl1dkNhbnZhcykge1xuICAgICAgbGV0IGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe21ldGEsIGNhbnZhczogdGhpcy5jYW52YXN9LCB0aGlzLmNvbmZpZyk7XG4gICAgICB0aGlzLnl1dkNhbnZhcyA9IG5ldyBZVVZDYW52YXMoY29uZmlnKTtcbiAgICB9XG4gICAgdGhpcy5yZWFkeVN0YXR1cyA9IDE7XG4gIH1cblxuICBkZWNvZGVWaWRlbyAodmlkZW9UcmFjaykge1xuICAgIGlmICghdGhpcy5fZGVjb2RlckluaXRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9hdmNjcHVzaGVkKSB7XG4gICAgICB0aGlzLnNldFZpZGVvTWV0YURhdGEodGhpcy5tZXRhKTtcbiAgICB9XG4gICAgbGV0IHsgc2FtcGxlcyB9ID0gdmlkZW9UcmFjaztcbiAgICBsZXQgc2FtcGxlID0gc2FtcGxlcy5zaGlmdCgpO1xuXG4gICAgd2hpbGUgKHNhbXBsZSkge1xuICAgICAgaWYgKCF0aGlzLl9iYXNlRHRzKSB7XG4gICAgICAgIHRoaXMuX2Jhc2VEdHMgPSBzYW1wbGUuZHRzO1xuICAgICAgfVxuICAgICAgdGhpcy5zb3VyY2UucHVzaChzYW1wbGUpO1xuICAgICAgc2FtcGxlID0gc2FtcGxlcy5zaGlmdCgpO1xuICAgIH1cblxuICAgIHRoaXMuX3ByZWxvYWQoKTtcbiAgfVxuXG4gIF9wcmVsb2FkICgpIHtcbiAgICBpZiAoIXRoaXMuX2xhc3RTYW1wbGVEdHMgfHwgdGhpcy5fbGFzdFNhbXBsZUR0cyAtIHRoaXMuX2Jhc2VEdHMgPCB0aGlzLmN1cnJlbnRUaW1lICsgdGhpcy5wcmVsb2FkVGltZSAqIDEwMDApIHtcbiAgICAgIGxldCBzYW1wbGUgPSB0aGlzLnNvdXJjZS5nZXQoKTtcbiAgICAgIGlmIChzYW1wbGUpIHtcbiAgICAgICAgdGhpcy5fbGFzdFNhbXBsZUR0cyA9IHNhbXBsZS5kdHM7XG4gICAgICAgIHRoaXMuX2FuYWx5c2VOYWwoc2FtcGxlKTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHNhbXBsZSAmJiB0aGlzLl9sYXN0U2FtcGxlRHRzIC0gdGhpcy5fYmFzZUR0cyA8IHRoaXMuY3VycmVudFRpbWUgKyB0aGlzLnByZWxvYWRUaW1lICogMTAwMCkge1xuICAgICAgICBzYW1wbGUgPSB0aGlzLnNvdXJjZS5nZXQoKTtcbiAgICAgICAgaWYgKHNhbXBsZSkge1xuICAgICAgICAgIHRoaXMuX2FuYWx5c2VOYWwoc2FtcGxlKTtcbiAgICAgICAgICB0aGlzLl9sYXN0U2FtcGxlRHRzID0gc2FtcGxlLmR0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hbmFseXNlTmFsIChzYW1wbGUpIHtcbiAgICBsZXQgbmFscyA9IE5hbHVuaXQuZ2V0QXZjY05hbHMobmV3IFN0cmVhbShzYW1wbGUuZGF0YS5idWZmZXIpKTtcblxuICAgIGxldCBsZW5ndGggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG5hbCA9IG5hbHNbaV07XG4gICAgICBsZW5ndGggKz0gbmFsLmJvZHkuYnl0ZUxlbmd0aCArIDQ7XG4gICAgfVxuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBuYWwgPSBuYWxzW2ldO1xuICAgICAgZGF0YS5zZXQoWzAsIDAsIDAsIDFdLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICBkYXRhLnNldChuZXcgVWludDhBcnJheShuYWwuYm9keSksIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gbmFsLmJvZHkuYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgdGhpcy53YXNtd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgIG1zZzogJ2RlY29kZScsXG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgaW5mbzoge1xuICAgICAgICBkdHM6IHNhbXBsZS5kdHMsXG4gICAgICAgIHB0czogc2FtcGxlLnB0cyA/IHNhbXBsZS5wdHMgOiBzYW1wbGUuZHRzICsgc2FtcGxlLmN0cyxcbiAgICAgICAga2V5OiBzYW1wbGUuaXNLZXlmcmFtZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBfb25EZWNvZGVkIChkYXRhKSB7XG4gICAgbGV0IHtkdHN9ID0gZGF0YS5pbmZvXG4gICAgdGhpcy5fZGVjb2RlZEZyYW1lc1tkdHNdID0gZGF0YTtcbiAgfVxuXG4gIF9vblRpbWVyICgpIHtcbiAgICBpZiAodGhpcy5wYXVzZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5leHRUaW1lID0gMTAwMCAvIDYwO1xuICAgIGlmICh0aGlzLm1ldGEpIHtcbiAgICAgIGlmICh0aGlzLm1ldGEuZnJhbWVSYXRlICYmIHRoaXMubWV0YS5mcmFtZVJhdGUuZml4ZWQgJiYgdGhpcy5tZXRhLmZyYW1lUmF0ZS5mcHMpIHtcbiAgICAgICAgbmV4dFRpbWUgPSBNYXRoLmNlaWwoMTAwMCAvIHRoaXMubWV0YS5mcmFtZVJhdGUuZnBzKTtcbiAgICAgIH1cbiAgICAgIGxldCBmcmFtZVRpbWVzID0gT2JqZWN0LmtleXModGhpcy5fZGVjb2RlZEZyYW1lcyk7XG4gICAgICBpZiAoZnJhbWVUaW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWUgKz0gbmV4dFRpbWU7XG4gICAgICAgIGxldCBmcmFtZVRpbWUgPSAtMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFtZVRpbWVzLmxlbmd0aCAmJiBmcmFtZVRpbWVzW2ldIC0gdGhpcy5fYmFzZUR0cyA8PSB0aGlzLmN1cnJlbnRUaW1lOyBpKyspIHtcbiAgICAgICAgICBmcmFtZVRpbWUgPSBmcmFtZVRpbWVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmcmFtZSA9IHRoaXMuX2RlY29kZWRGcmFtZXNbZnJhbWVUaW1lXTtcbiAgICAgICAgaWYgKGZyYW1lKSB7XG4gICAgICAgICAgaWYgKHRoaXMub25jYW5wbGF5ICYmIHRoaXMucmVhZHlTdGF0dXMgPCA0KSB7XG4gICAgICAgICAgICB0aGlzLm9uY2FucGxheSgpO1xuICAgICAgICAgICAgdGhpcy5yZWFkeVN0YXR1cyA9IDQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMueXV2Q2FudmFzLnJlbmRlcihmcmFtZS5idWZmZXIsIGZyYW1lLndpZHRoLCBmcmFtZS5oZWlnaHQpO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9kZWNvZGVkRnJhbWVzW2ZyYW1lVGltZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fY2xlYW5CdWZmZXIoKTtcbiAgICBzZXRUaW1lb3V0KHRoaXMuX29uVGltZXIuYmluZCh0aGlzKSwgbmV4dFRpbWUpO1xuICB9XG5cbiAgX2NsZWFuQnVmZmVyICgpIHtcbiAgICB0aGlzLnNvdXJjZS5yZW1vdmUoMCwgdGhpcy5jdXJyZW50VGltZSk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFZpZGVvQ2FudmFzO1xuIiwiY29uc3QgTUFYX1NUUkVBTV9CVUZGRVJfTEVOR1RIID0gMTAyNCAqIDEwMjQ7XG52YXIgRGVjb2RlciA9IGZ1bmN0aW9uIChzZWxmKSB7XG4gIHRoaXMuaW5pdGVkID0gZmFsc2U7XG4gIHRoaXMuc2VsZiA9IHNlbGY7XG4gIHRoaXMuaW5mb2xpc3QgPSB7fTtcbiAgc2VsZi5wYXJfYnJvYWR3YXlPbkJyb2Fkd2F5SW5pdGVkID0gdGhpcy5icm9hZHdheU9uQnJvYWR3YXlJbml0ZWQuYmluZCh0aGlzKTtcbiAgc2VsZi5wYXJfYnJvYWR3YXlPblBpY3R1cmVEZWNvZGVkID0gdGhpcy5icm9hZHdheU9uUGljdHVyZURlY29kZWQuYmluZCh0aGlzKTtcbn1cblxuRGVjb2Rlci5wcm90b3R5cGUudG9VOEFycmF5ID0gZnVuY3Rpb24gKHB0ciwgbGVuZ3RoKSB7XG4gIHJldHVybiB0aGlzLnNlbGYuSEVBUFU4LnN1YmFycmF5KHB0ciwgcHRyICsgbGVuZ3RoKTtcbn1cblxuRGVjb2Rlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgTW9kdWxlLl9icm9hZHdheUluaXQoKTtcbiAgdGhpcy5zdHJlYW1CdWZmZXIgPSB0aGlzLnRvVThBcnJheShNb2R1bGUuX2Jyb2Fkd2F5Q3JlYXRlU3RyZWFtKE1BWF9TVFJFQU1fQlVGRkVSX0xFTkdUSCksIE1BWF9TVFJFQU1fQlVGRkVSX0xFTkdUSCk7XG59XG5cbkRlY29kZXIucHJvdG90eXBlLmJyb2Fkd2F5T25QaWN0dXJlRGVjb2RlZCA9IGZ1bmN0aW9uIChvZmZzZXQsIHdpZHRoLCBoZWlnaHQsIGluZm9pZCkge1xuICBsZXQgaW5mbyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuaW5mb2xpc3RbaW5mb2lkXSk7XG4gIGxldCBkYXRhID0gdGhpcy50b1U4QXJyYXkob2Zmc2V0LCAod2lkdGggKiBoZWlnaHQgKiAzKSAvIDIpO1xuICB0aGlzLmluZm9saXN0W2luZm9pZF0gPSBudWxsO1xuICBsZXQgZGF0ZXRlbXAgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCk7XG4gIGRhdGV0ZW1wLnNldChkYXRhKTtcbiAgbGV0IGJ1ZmZlciA9IGRhdGV0ZW1wLmJ1ZmZlcjtcbiAgdGhpcy5zZWxmLnBvc3RNZXNzYWdlKHtcbiAgICBtc2c6ICdERUNPREVEJyxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgaW5mbyxcbiAgICBidWZmZXJcbiAgfSwgW2J1ZmZlcl0pO1xufVxuXG5EZWNvZGVyLnByb3RvdHlwZS5icm9hZHdheU9uQnJvYWR3YXlJbml0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaW5pdGVkID0gdHJ1ZTtcbiAgdGhpcy5zZWxmLnBvc3RNZXNzYWdlKHttc2c6ICdERUNPREVSX1JFQURZJ30pO1xufVxuXG5EZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiAoZGF0YSwgaW5mbykge1xuICBsZXQgdGltZSA9IHBhcnNlSW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgbGV0IGluZm9pZCA9IHRpbWUgLSAoTWF0aC5mbG9vcih0aW1lIC8gMTBlOSkgKiAxMGU5KTtcbiAgdGhpcy5pbmZvbGlzdFtpbmZvaWRdID0gaW5mbztcbiAgdGhpcy5zdHJlYW1CdWZmZXIuc2V0KGRhdGEpO1xuICBNb2R1bGUuX2Jyb2Fkd2F5UGxheVN0cmVhbShkYXRhLmxlbmd0aCwgaW5mb2lkKTtcbn1cblxudmFyIGRlY29kZXI7XG5cbmZ1bmN0aW9uIG9uUG9zdFJ1biAoKSB7XG4gIGRlY29kZXIgPSBuZXcgRGVjb2Rlcih0aGlzKTtcbiAgZGVjb2Rlci5pbml0KCk7XG59XG5cbmZ1bmN0aW9uIGluaXQgKCkge1xuICBzZWxmLmltcG9ydFNjcmlwdHMoJ2h0dHA6Ly8xMC45NS40OS40MTo5MDkwL2V4YW1wbGVzL2Zsdi9kZWNvZGVyLmpzJyk7XG4gIGFkZE9uUG9zdFJ1bihvblBvc3RSdW4uYmluZChzZWxmKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlbGYpIHtcbiAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgZGF0YSA9IGUuZGF0YTtcbiAgICBpZiAoIWRhdGEubXNnKSB7XG4gICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgbXNnOiAnRVJST1I6aW52YWxpZCBtZXNzYWdlJ1xuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChkYXRhLm1zZykge1xuICAgICAgICBjYXNlICdpbml0JzpcbiAgICAgICAgICBpbml0KHNlbGYpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RlY29kZSc6XG4gICAgICAgICAgZGVjb2Rlci5kZWNvZGUoZGF0YS5kYXRhLCBkYXRhLmluZm8pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSwgZmFsc2UpO1xufVxuIiwiY2xhc3MgWVVWQ2FudmFzIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZ3MpIHtcbiAgICB0aGlzLmNvbmZpZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWdzKTtcbiAgICB0aGlzLmNhbnZhcyA9IHRoaXMuY29uZmlncy5jYW52YXM7XG4gICAgdGhpcy5tZXRhID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWdzLm1ldGEpO1xuICAgIHRoaXMuY2hyb21hID0gdGhpcy5tZXRhLmNocm9tYUZvcm1hdDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMubWV0YS5wcmVzZW50SGVpZ2h0O1xuICAgIHRoaXMud2lkdGggPSB0aGlzLm1ldGEucHJlc2VudFdpZHRoO1xuICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy53aWR0aDtcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgdGhpcy5faW5pdENvbnRleHRHTCgpO1xuICAgIGlmICh0aGlzLmNvbnRleHRHTCkge1xuICAgICAgdGhpcy5faW5pdFByb2dyYW0oKTtcbiAgICAgIHRoaXMuX2luaXRCdWZmZXJzKCk7XG4gICAgICB0aGlzLl9pbml0VGV4dHVyZXMoKTtcbiAgICB9O1xuICB9XG5cbiAgX2luaXRDb250ZXh0R0wgKCkge1xuICAgIHZhciBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICB2YXIgZ2wgPSBudWxsO1xuXG4gICAgdmFyIHZhbGlkQ29udGV4dE5hbWVzID0gWyd3ZWJnbCcsICdleHBlcmltZW50YWwtd2ViZ2wnLCAnbW96LXdlYmdsJywgJ3dlYmtpdC0zZCddO1xuICAgIHZhciBuYW1lSW5kZXggPSAwO1xuXG4gICAgd2hpbGUgKCFnbCAmJiBuYW1lSW5kZXggPCB2YWxpZENvbnRleHROYW1lcy5sZW5ndGgpIHtcbiAgICAgIHZhciBjb250ZXh0TmFtZSA9IHZhbGlkQ29udGV4dE5hbWVzW25hbWVJbmRleF07XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRleHRPcHRpb25zKSB7XG4gICAgICAgICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dChjb250ZXh0TmFtZSwgdGhpcy5jb250ZXh0T3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dChjb250ZXh0TmFtZSk7XG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGdsID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFnbCB8fCB0eXBlb2YgZ2wuZ2V0UGFyYW1ldGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGdsID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgKytuYW1lSW5kZXg7XG4gICAgfTtcblxuICAgIHRoaXMuY29udGV4dEdMID0gZ2w7XG4gIH07XG5cbiAgX2luaXRQcm9ncmFtICgpIHtcbiAgICB2YXIgZ2wgPSB0aGlzLmNvbnRleHRHTDtcblxuICAgIC8vIHZlcnRleCBzaGFkZXIgaXMgdGhlIHNhbWUgZm9yIGFsbCB0eXBlc1xuICAgIHZhciB2ZXJ0ZXhTaGFkZXJTY3JpcHQ7XG4gICAgdmFyIGZyYWdtZW50U2hhZGVyU2NyaXB0O1xuICAgIGlmICh0aGlzLmNocm9tYSA9PT0gNDIwKSB7XG4gICAgICB2ZXJ0ZXhTaGFkZXJTY3JpcHQgPSBbXG4gICAgICAgICdhdHRyaWJ1dGUgdmVjNCB2ZXJ0ZXhQb3M7JyxcbiAgICAgICAgJ2F0dHJpYnV0ZSB2ZWM0IHRleHR1cmVQb3M7JyxcbiAgICAgICAgJ2F0dHJpYnV0ZSB2ZWM0IHVUZXh0dXJlUG9zOycsXG4gICAgICAgICdhdHRyaWJ1dGUgdmVjNCB2VGV4dHVyZVBvczsnLFxuICAgICAgICAndmFyeWluZyB2ZWMyIHRleHR1cmVDb29yZDsnLFxuICAgICAgICAndmFyeWluZyB2ZWMyIHVUZXh0dXJlQ29vcmQ7JyxcbiAgICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkOycsXG5cbiAgICAgICAgJ3ZvaWQgbWFpbigpJyxcbiAgICAgICAgJ3snLFxuICAgICAgICAnICBnbF9Qb3NpdGlvbiA9IHZlcnRleFBvczsnLFxuICAgICAgICAnICB0ZXh0dXJlQ29vcmQgPSB0ZXh0dXJlUG9zLnh5OycsXG4gICAgICAgICcgIHVUZXh0dXJlQ29vcmQgPSB1VGV4dHVyZVBvcy54eTsnLFxuICAgICAgICAnICB2VGV4dHVyZUNvb3JkID0gdlRleHR1cmVQb3MueHk7JyxcbiAgICAgICAgJ30nXG4gICAgICBdLmpvaW4oJ1xcbicpO1xuXG4gICAgICBmcmFnbWVudFNoYWRlclNjcmlwdCA9IFtcbiAgICAgICAgJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDsnLFxuICAgICAgICAndmFyeWluZyBoaWdocCB2ZWMyIHRleHR1cmVDb29yZDsnLFxuICAgICAgICAndmFyeWluZyBoaWdocCB2ZWMyIHVUZXh0dXJlQ29vcmQ7JyxcbiAgICAgICAgJ3ZhcnlpbmcgaGlnaHAgdmVjMiB2VGV4dHVyZUNvb3JkOycsXG4gICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB5U2FtcGxlcjsnLFxuICAgICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXI7JyxcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHZTYW1wbGVyOycsXG4gICAgICAgICd1bmlmb3JtIG1hdDQgWVVWMlJHQjsnLFxuXG4gICAgICAgICd2b2lkIG1haW4odm9pZCkgeycsXG4gICAgICAgICcgIGhpZ2hwIGZsb2F0IHkgPSB0ZXh0dXJlMkQoeVNhbXBsZXIsICB0ZXh0dXJlQ29vcmQpLnI7JyxcbiAgICAgICAgJyAgaGlnaHAgZmxvYXQgdSA9IHRleHR1cmUyRCh1U2FtcGxlciwgIHVUZXh0dXJlQ29vcmQpLnI7JyxcbiAgICAgICAgJyAgaGlnaHAgZmxvYXQgdiA9IHRleHR1cmUyRCh2U2FtcGxlciwgIHZUZXh0dXJlQ29vcmQpLnI7JyxcbiAgICAgICAgJyAgZ2xfRnJhZ0NvbG9yID0gdmVjNCh5LCB1LCB2LCAxKSAqIFlVVjJSR0I7JyxcbiAgICAgICAgJ30nXG4gICAgICBdLmpvaW4oJ1xcbicpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jaHJvbWEgPT09IDQyMikge1xuICAgICAgdmVydGV4U2hhZGVyU2NyaXB0ID0gW1xuICAgICAgICAnYXR0cmlidXRlIHZlYzQgdmVydGV4UG9zOycsXG4gICAgICAgICdhdHRyaWJ1dGUgdmVjNCB0ZXh0dXJlUG9zOycsXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdGV4dHVyZUNvb3JkOycsXG5cbiAgICAgICAgJ3ZvaWQgbWFpbigpJyxcbiAgICAgICAgJ3snLFxuICAgICAgICAnICBnbF9Qb3NpdGlvbiA9IHZlcnRleFBvczsnLFxuICAgICAgICAnICB0ZXh0dXJlQ29vcmQgPSB0ZXh0dXJlUG9zLnh5OycsXG4gICAgICAgICd9J1xuICAgICAgXS5qb2luKCdcXG4nKTtcblxuICAgICAgZnJhZ21lbnRTaGFkZXJTY3JpcHQgPSBbXG4gICAgICAgICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7JyxcbiAgICAgICAgJ3ZhcnlpbmcgaGlnaHAgdmVjMiB0ZXh0dXJlQ29vcmQ7JyxcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHNhbXBsZXI7JyxcbiAgICAgICAgJ3VuaWZvcm0gaGlnaHAgdmVjMiByZXNvbHV0aW9uOycsXG4gICAgICAgICd1bmlmb3JtIG1hdDQgWVVWMlJHQjsnLFxuXG4gICAgICAgICd2b2lkIG1haW4odm9pZCkgeycsXG5cbiAgICAgICAgJyAgaGlnaHAgZmxvYXQgdGV4UGl4WCA9IDEuMCAvIHJlc29sdXRpb24ueDsnLFxuICAgICAgICAnICBoaWdocCBmbG9hdCBsb2dQaXhYID0gMi4wIC8gcmVzb2x1dGlvbi54OycsIC8vIGhhbGYgdGhlIHJlc29sdXRpb24gb2YgdGhlIHRleHR1cmVcbiAgICAgICAgJyAgaGlnaHAgZmxvYXQgbG9nSGFsZlBpeFggPSA0LjAgLyByZXNvbHV0aW9uLng7JywgLy8gaGFsZiBvZiB0aGUgbG9naWNhbCByZXNvbHV0aW9uIHNvIGV2ZXJ5IDR0aCBwaXhlbFxuICAgICAgICAnICBoaWdocCBmbG9hdCBzdGVwcyA9IGZsb29yKHRleHR1cmVDb29yZC54IC8gbG9nUGl4WCk7JyxcbiAgICAgICAgJyAgaGlnaHAgZmxvYXQgdXZTdGVwcyA9IGZsb29yKHRleHR1cmVDb29yZC54IC8gbG9nSGFsZlBpeFgpOycsXG4gICAgICAgICcgIGhpZ2hwIGZsb2F0IHkgPSB0ZXh0dXJlMkQoc2FtcGxlciwgdmVjMigobG9nUGl4WCAqIHN0ZXBzKSArIHRleFBpeFgsIHRleHR1cmVDb29yZC55KSkucjsnLFxuICAgICAgICAnICBoaWdocCBmbG9hdCB1ID0gdGV4dHVyZTJEKHNhbXBsZXIsIHZlYzIoKGxvZ0hhbGZQaXhYICogdXZTdGVwcyksIHRleHR1cmVDb29yZC55KSkucjsnLFxuICAgICAgICAnICBoaWdocCBmbG9hdCB2ID0gdGV4dHVyZTJEKHNhbXBsZXIsIHZlYzIoKGxvZ0hhbGZQaXhYICogdXZTdGVwcykgKyB0ZXhQaXhYICsgdGV4UGl4WCwgdGV4dHVyZUNvb3JkLnkpKS5yOycsXG5cbiAgICAgICAgLy8gJyAgaGlnaHAgZmxvYXQgeSA9IHRleHR1cmUyRChzYW1wbGVyLCAgdGV4dHVyZUNvb3JkKS5yOycsXG4gICAgICAgIC8vICcgIGdsX0ZyYWdDb2xvciA9IHZlYzQoeSwgdSwgdiwgMSkgKiBZVVYyUkdCOycsXG4gICAgICAgICcgIGdsX0ZyYWdDb2xvciA9IHZlYzQoeSwgdSwgdiwgMS4wKSAqIFlVVjJSR0I7JyxcbiAgICAgICAgJ30nXG4gICAgICBdLmpvaW4oJ1xcbicpO1xuICAgIH07XG5cbiAgICB2YXIgWVVWMlJHQiA9IFtcbiAgICAgIDEuMTY0MzgsIDAuMDAwMDAsIDEuNTk2MDMsIC0wLjg3MDc5LFxuICAgICAgMS4xNjQzOCwgLTAuMzkxNzYsIC0wLjgxMjk3LCAwLjUyOTU5LFxuICAgICAgMS4xNjQzOCwgMi4wMTcyMywgMC4wMDAwMCwgLTEuMDgxMzksXG4gICAgICAwLCAwLCAwLCAxXG4gICAgXTtcbiAgICB2YXIgdmVydGV4U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpO1xuICAgIGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXIsIHZlcnRleFNoYWRlclNjcmlwdCk7XG4gICAgZ2wuY29tcGlsZVNoYWRlcih2ZXJ0ZXhTaGFkZXIpO1xuICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHZlcnRleFNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICBjb25zb2xlLmxvZygnVmVydGV4IHNoYWRlciBmYWlsZWQgdG8gY29tcGlsZTogJyArIGdsLmdldFNoYWRlckluZm9Mb2codmVydGV4U2hhZGVyKSk7XG4gICAgfVxuXG4gICAgdmFyIGZyYWdtZW50U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUik7XG4gICAgZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVyLCBmcmFnbWVudFNoYWRlclNjcmlwdCk7XG4gICAgZ2wuY29tcGlsZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnJhZ21lbnRTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgY29uc29sZS5sb2coJ0ZyYWdtZW50IHNoYWRlciBmYWlsZWQgdG8gY29tcGlsZTogJyArIGdsLmdldFNoYWRlckluZm9Mb2coZnJhZ21lbnRTaGFkZXIpKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdQcm9ncmFtIGZhaWxlZCB0byBjb21waWxlOiAnICsgZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSkpO1xuICAgIH1cblxuICAgIGdsLnVzZVByb2dyYW0ocHJvZ3JhbSk7XG5cbiAgICB2YXIgWVVWMlJHQlJlZiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAnWVVWMlJHQicpO1xuICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYoWVVWMlJHQlJlZiwgZmFsc2UsIFlVVjJSR0IpO1xuXG4gICAgdGhpcy5zaGFkZXJQcm9ncmFtID0gcHJvZ3JhbTtcbiAgfVxuXG4gIF9pbml0QnVmZmVycyAoKSB7XG4gICAgdmFyIGdsID0gdGhpcy5jb250ZXh0R0w7XG4gICAgdmFyIHByb2dyYW0gPSB0aGlzLnNoYWRlclByb2dyYW07XG5cbiAgICB2YXIgdmVydGV4UG9zQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZlcnRleFBvc0J1ZmZlcik7XG4gICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoWzEsIDEsIC0xLCAxLCAxLCAtMSwgLTEsIC0xXSksIGdsLlNUQVRJQ19EUkFXKTtcblxuICAgIHZhciB2ZXJ0ZXhQb3NSZWYgPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCAndmVydGV4UG9zJyk7XG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodmVydGV4UG9zUmVmKTtcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHZlcnRleFBvc1JlZiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblxuICAgIHZhciB0ZXh0dXJlUG9zQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRleHR1cmVQb3NCdWZmZXIpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KFsxLCAwLCAwLCAwLCAxLCAxLCAwLCAxXSksIGdsLlNUQVRJQ19EUkFXKTtcblxuICAgIHZhciB0ZXh0dXJlUG9zUmVmID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgJ3RleHR1cmVQb3MnKTtcbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0ZXh0dXJlUG9zUmVmKTtcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRleHR1cmVQb3NSZWYsIDIsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cbiAgICB0aGlzLnRleHR1cmVQb3NCdWZmZXIgPSB0ZXh0dXJlUG9zQnVmZmVyO1xuXG4gICAgaWYgKHRoaXMuY2hyb21hID09PSA0MjApIHtcbiAgICAgIHZhciB1VGV4dHVyZVBvc0J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHVUZXh0dXJlUG9zQnVmZmVyKTtcbiAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KFsxLCAwLCAwLCAwLCAxLCAxLCAwLCAxXSksIGdsLlNUQVRJQ19EUkFXKTtcblxuICAgICAgdmFyIHVUZXh0dXJlUG9zUmVmID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgJ3VUZXh0dXJlUG9zJyk7XG4gICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh1VGV4dHVyZVBvc1JlZik7XG4gICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHVUZXh0dXJlUG9zUmVmLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gICAgICB0aGlzLnVUZXh0dXJlUG9zQnVmZmVyID0gdVRleHR1cmVQb3NCdWZmZXI7XG5cbiAgICAgIHZhciB2VGV4dHVyZVBvc0J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZUZXh0dXJlUG9zQnVmZmVyKTtcbiAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KFsxLCAwLCAwLCAwLCAxLCAxLCAwLCAxXSksIGdsLlNUQVRJQ19EUkFXKTtcblxuICAgICAgdmFyIHZUZXh0dXJlUG9zUmVmID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgJ3ZUZXh0dXJlUG9zJyk7XG4gICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh2VGV4dHVyZVBvc1JlZik7XG4gICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHZUZXh0dXJlUG9zUmVmLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gICAgICB0aGlzLnZUZXh0dXJlUG9zQnVmZmVyID0gdlRleHR1cmVQb3NCdWZmZXI7XG4gICAgfTtcbiAgfTtcblxuICBfaW5pdFRleHR1cmVzICgpIHtcbiAgICB2YXIgZ2wgPSB0aGlzLmNvbnRleHRHTDtcbiAgICB2YXIgcHJvZ3JhbSA9IHRoaXMuc2hhZGVyUHJvZ3JhbTtcblxuICAgIGlmICh0aGlzLmNocm9tYSA9PT0gNDIwKSB7XG4gICAgICB2YXIgeVRleHR1cmVSZWYgPSB0aGlzLl9pbml0VGV4dHVyZSgpO1xuICAgICAgdmFyIHlTYW1wbGVyUmVmID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd5U2FtcGxlcicpO1xuICAgICAgZ2wudW5pZm9ybTFpKHlTYW1wbGVyUmVmLCAwKTtcbiAgICAgIHRoaXMueVRleHR1cmVSZWYgPSB5VGV4dHVyZVJlZjtcblxuICAgICAgdmFyIHVUZXh0dXJlUmVmID0gdGhpcy5faW5pdFRleHR1cmUoKTtcbiAgICAgIHZhciB1U2FtcGxlclJlZiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndVNhbXBsZXInKTtcbiAgICAgIGdsLnVuaWZvcm0xaSh1U2FtcGxlclJlZiwgMSk7XG4gICAgICB0aGlzLnVUZXh0dXJlUmVmID0gdVRleHR1cmVSZWY7XG5cbiAgICAgIHZhciB2VGV4dHVyZVJlZiA9IHRoaXMuX2luaXRUZXh0dXJlKCk7XG4gICAgICB2YXIgdlNhbXBsZXJSZWYgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3ZTYW1wbGVyJyk7XG4gICAgICBnbC51bmlmb3JtMWkodlNhbXBsZXJSZWYsIDIpO1xuICAgICAgdGhpcy52VGV4dHVyZVJlZiA9IHZUZXh0dXJlUmVmO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jaHJvbWEgPT09IDQyMikge1xuICAgICAgLy8gb25seSBvbmUgdGV4dHVyZSBmb3IgNDIyXG4gICAgICB2YXIgdGV4dHVyZVJlZiA9IHRoaXMuX2luaXRUZXh0dXJlKCk7XG4gICAgICB2YXIgc2FtcGxlclJlZiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAnc2FtcGxlcicpO1xuICAgICAgZ2wudW5pZm9ybTFpKHNhbXBsZXJSZWYsIDApO1xuICAgICAgdGhpcy50ZXh0dXJlUmVmID0gdGV4dHVyZVJlZjtcbiAgICB9O1xuICB9XG5cbiAgX2luaXRUZXh0dXJlICgpIHtcbiAgICB2YXIgZ2wgPSB0aGlzLmNvbnRleHRHTDtcblxuICAgIHZhciB0ZXh0dXJlUmVmID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmVSZWYpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG5cbiAgICByZXR1cm4gdGV4dHVyZVJlZjtcbiAgfVxuXG4gIF9kcmF3UGljdHVyZUdMIChkYXRhLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgaWYgKHRoaXMuY2hyb21hID09PSA0MjApIHtcbiAgICAgIGxldCBuV2lkdGggPSB3aWR0aDtcbiAgICAgIHZhciB5bGVuID0gd2lkdGggKiBoZWlnaHQ7XG4gICAgICB2YXIgdXZsZW4gPSAod2lkdGggLyAyKSAqIChoZWlnaHQgLyAyKTtcbiAgICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICAgIGxldCByZW5kZXJEYXRhID0ge1xuICAgICAgICB5RGF0YTogZGF0YS5zdWJhcnJheSgwLCB5bGVuKSxcbiAgICAgICAgdURhdGE6IGRhdGEuc3ViYXJyYXkoeWxlbiwgeWxlbiArIHV2bGVuKSxcbiAgICAgICAgdkRhdGE6IGRhdGEuc3ViYXJyYXkoeWxlbiArIHV2bGVuLCB5bGVuICsgdXZsZW4gKyB1dmxlbilcbiAgICAgIH1cbiAgICAgIGlmICh3aWR0aCAlIDQgPiAwKSB7XG4gICAgICAgIG5XaWR0aCA9IHdpZHRoICsgNCAtICh3aWR0aCAlIDQpO1xuICAgICAgICBsZXQgeUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkobldpZHRoICogaGVpZ2h0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykge1xuICAgICAgICAgIHlBcnJheS5zZXQocmVuZGVyRGF0YS55RGF0YS5zdWJhcnJheShpICogd2lkdGgsIChpICsgMSkgKiB3aWR0aCksIGkgKiBuV2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlckRhdGEueURhdGEgPSB5QXJyYXk7XG4gICAgICB9XG5cbiAgICAgIGlmICgod2lkdGggLyAyKSAlIDQgPiAwKSB7XG4gICAgICAgIG5XaWR0aCA9ICh3aWR0aCAvIDIpICsgNCAtICgod2lkdGggLyAyKSAlIDQpO1xuICAgICAgICBsZXQgdUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkobldpZHRoICogaGVpZ2h0IC8gMik7XG4gICAgICAgIGxldCB2QXJyYXkgPSBuZXcgVWludDhBcnJheShuV2lkdGggKiBoZWlnaHQgLyAyKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQgLyAyOyBpKyspIHtcbiAgICAgICAgICB1QXJyYXkuc2V0KHJlbmRlckRhdGEudURhdGEuc3ViYXJyYXkoaSAqIHdpZHRoIC8gMiwgKGkgKyAxKSAqIHdpZHRoIC8gMiksIGkgKiBuV2lkdGgpO1xuICAgICAgICAgIHZBcnJheS5zZXQocmVuZGVyRGF0YS52RGF0YS5zdWJhcnJheShpICogd2lkdGggLyAyLCAoaSArIDEpICogd2lkdGggLyAyKSwgaSAqIG5XaWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyRGF0YS51RGF0YSA9IHVBcnJheTtcbiAgICAgICAgcmVuZGVyRGF0YS52RGF0YSA9IHZBcnJheTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2RyYXdQaWN0dXJlR0w0MjAocmVuZGVyRGF0YSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNocm9tYSA9PT0gNDIyKSB7XG4gICAgICBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gICAgICB0aGlzLl9kcmF3UGljdHVyZUdMNDIyKHdpZHRoLCBoZWlnaHQsIGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIF9kcmF3UGljdHVyZUdMNDIyIChkYXRhLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdmFyIGdsID0gdGhpcy5jb250ZXh0R0w7XG4gICAgdmFyIHRleHR1cmVQb3NCdWZmZXIgPSB0aGlzLnRleHR1cmVQb3NCdWZmZXI7XG5cbiAgICB2YXIgdGV4dHVyZVJlZiA9IHRoaXMudGV4dHVyZVJlZjtcblxuICAgIHZhciBkYXRhUGVyUm93ID0gd2lkdGggKiAyO1xuICAgIHZhciByb3dDbnQgPSBoZWlnaHQ7XG5cbiAgICBnbC52aWV3cG9ydCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgIHZhciB0VG9wID0gMDtcbiAgICB2YXIgdExlZnQgPSAwO1xuICAgIHZhciB0Qm90dG9tID0gaGVpZ2h0IC8gcm93Q250O1xuICAgIHZhciB0UmlnaHQgPSB3aWR0aCAvIChkYXRhUGVyUm93IC8gMik7XG4gICAgdmFyIHRleHR1cmVQb3NWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KFt0UmlnaHQsIHRUb3AsIHRMZWZ0LCB0VG9wLCB0UmlnaHQsIHRCb3R0b20sIHRMZWZ0LCB0Qm90dG9tXSk7XG5cbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGV4dHVyZVBvc0J1ZmZlcik7XG4gICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIHRleHR1cmVQb3NWYWx1ZXMsIGdsLkRZTkFNSUNfRFJBVyk7XG5cbiAgICBnbC51bmlmb3JtMmYoZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuc2hhZGVyUHJvZ3JhbSwgJ3Jlc29sdXRpb24nKSwgZGF0YVBlclJvdywgaGVpZ2h0KTtcblxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmVSZWYpO1xuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuTFVNSU5BTkNFLCBkYXRhUGVyUm93LCByb3dDbnQsIDAsIGdsLkxVTUlOQU5DRSwgZ2wuVU5TSUdORURfQllURSwgZGF0YSk7XG5cbiAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcbiAgfVxuXG4gIF9kcmF3UGljdHVyZUdMNDIwIChkYXRhLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdmFyIGdsID0gdGhpcy5jb250ZXh0R0w7XG4gICAgdmFyIHRleHR1cmVQb3NCdWZmZXIgPSB0aGlzLnRleHR1cmVQb3NCdWZmZXI7XG4gICAgdmFyIHVUZXh0dXJlUG9zQnVmZmVyID0gdGhpcy51VGV4dHVyZVBvc0J1ZmZlcjtcbiAgICB2YXIgdlRleHR1cmVQb3NCdWZmZXIgPSB0aGlzLnZUZXh0dXJlUG9zQnVmZmVyO1xuXG4gICAgdmFyIHlUZXh0dXJlUmVmID0gdGhpcy55VGV4dHVyZVJlZjtcbiAgICB2YXIgdVRleHR1cmVSZWYgPSB0aGlzLnVUZXh0dXJlUmVmO1xuICAgIHZhciB2VGV4dHVyZVJlZiA9IHRoaXMudlRleHR1cmVSZWY7XG5cbiAgICB2YXIgeURhdGEgPSBkYXRhLnlEYXRhO1xuICAgIHZhciB1RGF0YSA9IGRhdGEudURhdGE7XG4gICAgdmFyIHZEYXRhID0gZGF0YS52RGF0YTtcblxuICAgIHZhciB5RGF0YVBlclJvdyA9IHdpZHRoO1xuICAgIHZhciB5Um93Q250ID0gaGVpZ2h0O1xuXG4gICAgdmFyIHVEYXRhUGVyUm93ID0gd2lkdGggLyAyO1xuICAgIHZhciB1Um93Q250ID0gaGVpZ2h0IC8gMjtcblxuICAgIHZhciB2RGF0YVBlclJvdyA9IHVEYXRhUGVyUm93O1xuICAgIHZhciB2Um93Q250ID0gdVJvd0NudDtcbiAgICBnbC52aWV3cG9ydCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICB2YXIgdFRvcCA9IDA7XG4gICAgdmFyIHRMZWZ0ID0gMDtcbiAgICB2YXIgdEJvdHRvbSA9IGhlaWdodCAvIHlSb3dDbnQ7XG4gICAgdmFyIHRSaWdodCA9IHdpZHRoIC8geURhdGFQZXJSb3c7XG4gICAgdmFyIHRleHR1cmVQb3NWYWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KFt0UmlnaHQsIHRUb3AsIHRMZWZ0LCB0VG9wLCB0UmlnaHQsIHRCb3R0b20sIHRMZWZ0LCB0Qm90dG9tXSk7XG5cbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGV4dHVyZVBvc0J1ZmZlcik7XG4gICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIHRleHR1cmVQb3NWYWx1ZXMsIGdsLkRZTkFNSUNfRFJBVyk7XG5cblxuICAgIHRCb3R0b20gPSAoaGVpZ2h0IC8gMikgLyB1Um93Q250O1xuICAgIHRSaWdodCA9ICh3aWR0aCAvIDIpIC8gdURhdGFQZXJSb3c7XG4gICAgdmFyIHVUZXh0dXJlUG9zVmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShbdFJpZ2h0LCB0VG9wLCB0TGVmdCwgdFRvcCwgdFJpZ2h0LCB0Qm90dG9tLCB0TGVmdCwgdEJvdHRvbV0pO1xuXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHVUZXh0dXJlUG9zQnVmZmVyKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdVRleHR1cmVQb3NWYWx1ZXMsIGdsLkRZTkFNSUNfRFJBVyk7XG5cbiAgICB0Qm90dG9tID0gKGhlaWdodCAvIDIpIC8gdlJvd0NudDtcbiAgICB0UmlnaHQgPSAod2lkdGggLyAyKSAvIHZEYXRhUGVyUm93O1xuXG4gICAgdmFyIHZUZXh0dXJlUG9zVmFsdWVzID0gbmV3IEZsb2F0MzJBcnJheShbdFJpZ2h0LCB0VG9wLCB0TGVmdCwgdFRvcCwgdFJpZ2h0LCB0Qm90dG9tLCB0TGVmdCwgdEJvdHRvbV0pO1xuXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZUZXh0dXJlUG9zQnVmZmVyKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdlRleHR1cmVQb3NWYWx1ZXMsIGdsLkRZTkFNSUNfRFJBVyk7XG4gICAgXG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCk7XG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgeVRleHR1cmVSZWYpO1xuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuTFVNSU5BTkNFLCB5RGF0YVBlclJvdywgeVJvd0NudCwgMCwgZ2wuTFVNSU5BTkNFLCBnbC5VTlNJR05FRF9CWVRFLCB5RGF0YSk7XG5cbiAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUxKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB1VGV4dHVyZVJlZik7XG4gICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5MVU1JTkFOQ0UsIHVEYXRhUGVyUm93LCB1Um93Q250LCAwLCBnbC5MVU1JTkFOQ0UsIGdsLlVOU0lHTkVEX0JZVEUsIHVEYXRhKTtcblxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTIpO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHZUZXh0dXJlUmVmKTtcbiAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLkxVTUlOQU5DRSwgdkRhdGFQZXJSb3csIHZSb3dDbnQsIDAsIGdsLkxVTUlOQU5DRSwgZ2wuVU5TSUdORURfQllURSwgdkRhdGEpO1xuXG4gICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNCk7XG4gIH1cblxuICBfZHJhd1BpY3R1cmVSR0IgKGRhdGEpIHtcblxuICB9XG5cbiAgcmVuZGVyIChkYXRhLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdmFyIGdsID0gdGhpcy5jb250ZXh0R0w7XG4gICAgaWYgKGdsKSB7XG4gICAgICB0aGlzLl9kcmF3UGljdHVyZUdMKGRhdGEsIHdpZHRoLCBoZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kcmF3UGljdHVyZVJHQihkYXRhKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgWVVWQ2FudmFzO1xuIiwiY29uc3QgaXNPYmplY3RGaWxsZWQgPSAob2JqKSA9PiB7XG4gIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGlmIChvYmpba2V5XSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFJbmZvIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMubWltZVR5cGUgPSBudWxsXG4gICAgdGhpcy5kdXJhdGlvbiA9IG51bGxcblxuICAgIHRoaXMuaGFzVmlkZW8gPSBudWxsXG4gICAgdGhpcy52aWRlbyA9IHtcbiAgICAgIGNvZGVjOiBudWxsLFxuICAgICAgd2lkdGg6IG51bGwsXG4gICAgICBoZWlnaHQ6IG51bGwsXG4gICAgICBwcm9maWxlOiBudWxsLFxuICAgICAgbGV2ZWw6IG51bGwsXG4gICAgICBmcmFtZVJhdGU6IHtcbiAgICAgICAgZml4ZWQ6IHRydWUsXG4gICAgICAgIGZwczogMjUsXG4gICAgICAgIGZwc19udW06IDI1MDAwLFxuICAgICAgICBmcHNfZGVuOiAxMDAwXG4gICAgICB9LFxuICAgICAgY2hyb21hRm9ybWF0OiBudWxsLFxuICAgICAgcGFyUmF0aW86IHtcbiAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgIGhlaWdodDogMVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaGFzQXVkaW8gPSBudWxsXG5cbiAgICB0aGlzLmF1ZGlvID0ge1xuICAgICAgY29kZWM6IG51bGwsXG4gICAgICBzYW1wbGVSYXRlOiBudWxsLFxuICAgICAgc2FtcGxlUmF0ZUluZGV4OiBudWxsLFxuICAgICAgY2hhbm5lbENvdW50OiBudWxsXG4gICAgfVxuICB9XG5cbiAgaXNDb21wbGV0ZSAoKSB7XG4gICAgcmV0dXJuIE1lZGlhSW5mby5pc0Jhc2VJbmZvUmVhZHkodGhpcykgJiYgTWVkaWFJbmZvLmlzVmlkZW9SZWFkeSh0aGlzKSAmJiBNZWRpYUluZm8uaXNBdWRpb1JlYWR5KHRoaXMpXG4gIH1cblxuICBzdGF0aWMgaXNCYXNlSW5mb1JlYWR5IChtZWRpYUluZm8pIHtcbiAgICByZXR1cm4gaXNPYmplY3RGaWxsZWQobWVkaWFJbmZvKVxuICB9XG5cbiAgc3RhdGljIGlzVmlkZW9SZWFkeSAobWVkaWFJbmZvKSB7XG4gICAgaWYgKCFtZWRpYUluZm8uaGFzVmlkZW8pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGlzT2JqZWN0RmlsbGVkKG1lZGlhSW5mby52aWRlbylcbiAgfVxuXG4gIHN0YXRpYyBpc0F1ZGlvUmVhZHkgKG1lZGlhSW5mbykge1xuICAgIGlmICghbWVkaWFJbmZvLmhhc0F1ZGlvKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBpc09iamVjdEZpbGxlZChtZWRpYUluZm8udmlkZW8pXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBNZWRpYVNhbXBsZS5nZXREZWZhdWx0SW5mKClcblxuICAgIGlmICghaW5mbyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5mbykgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRcbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBpbmZvKVxuXG4gICAgT2JqZWN0LmVudHJpZXMoc2FtcGxlKS5mb3JFYWNoKChbaywgdl0pID0+IHtcbiAgICAgIHRoaXNba10gPSB2XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0SW5mICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgZHVyYXRpb246IG51bGwsXG4gICAgICBwb3NpdGlvbjogbnVsbCxcbiAgICAgIGlzUkFQOiBmYWxzZSwgLy8gaXMgUmFuZG9tIGFjY2VzcyBwb2ludFxuICAgICAgb3JpZ2luRHRzOiBudWxsXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYVNlZ21lbnRMaXN0IHtcblxuICAgIGNvbnN0cnVjdG9yICh0eXBlKSB7XG4gICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLl9saXN0ID0gW107XG4gICAgICAgIHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbiA9IC0xOyAvLyBjYWNoZWQgbGFzdCBpbnNlcnQgbG9jYXRpb25cbiAgICB9XG5cbiAgICBnZXQgdHlwZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgIH1cblxuICAgIGdldCBsZW5ndGggKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5sZW5ndGg7XG4gICAgfVxuXG4gICAgaXNFbXB0eSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICBjbGVhciAoKSB7XG4gICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gLTE7XG4gICAgfVxuXG4gICAgX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuX2xpc3Q7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0yO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYXN0ID0gbGlzdC5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgbWlkID0gMDtcbiAgICAgICAgbGV0IGxib3VuZCA9IDA7XG4gICAgICAgIGxldCB1Ym91bmQgPSBsYXN0O1xuXG4gICAgICAgIGxldCBpZHggPSAwO1xuXG4gICAgICAgIGlmIChiZWdpbkR0cyA8IGxpc3RbMF0ub3JpZ2luRHRzKSB7XG4gICAgICAgICAgICBpZHggPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAobGJvdW5kIDw9IHVib3VuZCkge1xuICAgICAgICAgICAgbWlkID0gbGJvdW5kICsgTWF0aC5mbG9vcigodWJvdW5kIC0gbGJvdW5kKSAvIDIpO1xuICAgICAgICAgICAgaWYgKG1pZCA9PT0gbGFzdCB8fCAoYmVnaW5EdHMgPiBsaXN0W21pZF0ubGFzdFNhbXBsZS5vcmlnaW5EdHNcbiAgICAgICAgICAgICAgICAgICAgJiYgKGJlZ2luRHRzIDwgbGlzdFttaWQgKyAxXS5vcmlnaW5EdHMpKSkge1xuICAgICAgICAgICAgICAgIGlkeCA9IG1pZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlzdFttaWRdLm9yaWdpbkR0cyA8IGJlZ2luRHRzKSB7XG4gICAgICAgICAgICAgICAgbGJvdW5kID0gbWlkICsgMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWJvdW5kID0gbWlkIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cblxuICAgIF9zZWFyY2hOZWFyZXN0U2VnbWVudEFmdGVyIChiZWdpbkR0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpICsgMTtcbiAgICB9XG5cbiAgICBhcHBlbmQgKHNlZ21lbnQpIHtcbiAgICAgICAgbGV0IGxpc3QgPSB0aGlzLl9saXN0O1xuICAgICAgICBsZXQgbGFzdEFwcGVuZElkeCA9IHRoaXMuX2xhc3RBcHBlbmRMb2NhdGlvbjtcbiAgICAgICAgbGV0IGluc2VydElkeCA9IDA7XG5cbiAgICAgICAgaWYgKGxhc3RBcHBlbmRJZHggIT09IC0xICYmIGxhc3RBcHBlbmRJZHggPCBsaXN0Lmxlbmd0aFxuICAgICAgICAgICAgJiYgc2VnbWVudC5vcmlnaW5TdGFydER0cyA+PSBsaXN0W2xhc3RBcHBlbmRJZHhdLmxhc3RTYW1wbGUub3JpZ2luRHRzXG4gICAgICAgICAgICAmJiAoKGxhc3RBcHBlbmRJZHggPT09IGxpc3QubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICB8fCAobGFzdEFwcGVuZElkeCA8IGxpc3QubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICAmJiBzZWdtZW50Lm9yaWdpblN0YXJ0RHRzIDwgbGlzdFtsYXN0QXBwZW5kSWR4ICsgMV0ub3JpZ2luU3RhcnREdHMpKSkge1xuICAgICAgICAgICAgaW5zZXJ0SWR4ID0gbGFzdEFwcGVuZElkeCArIDE7IC8vIHVzZSBjYWNoZWQgbG9jYXRpb24gaWR4XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0SWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoc2VnbWVudC5vcmlnaW5TdGFydER0cykgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gaW5zZXJ0SWR4O1xuICAgICAgICB0aGlzLl9saXN0LnNwbGljZShpbnNlcnRJZHgsIDAsIHNlZ21lbnQpO1xuICAgIH1cblxuICAgIGdldExhc3RTZWdtZW50QmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgaWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0W2lkeF07XG4gICAgICAgIH0gZWxzZSB7IC8vIC0xXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldExhc3RTYW1wbGVCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBzZWdtZW50ID0gdGhpcy5nZXRMYXN0U2VnbWVudEJlZm9yZShiZWdpbkR0cyk7XG4gICAgICAgIGlmIChzZWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VnbWVudC5sYXN0U2FtcGxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRMYXN0UkFQQmVmb3JlIChiZWdpbkR0cykge1xuICAgICAgICBsZXQgc2VnbWVudElkeCA9IHRoaXMuX3NlYXJjaE5lYXJlc3RTZWdtZW50QmVmb3JlKGJlZ2luRHRzKTtcbiAgICAgICAgbGV0IHJhbmRvbUFjY2Vzc1BvaW50cyA9IHRoaXMuX2xpc3Rbc2VnbWVudElkeF0ucmFuZG9tQWNjZXNzUG9pbnRzO1xuICAgICAgICB3aGlsZSAocmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCA9PT0gMCAmJiBzZWdtZW50SWR4ID4gMCkge1xuICAgICAgICAgICAgc2VnbWVudElkeC0tO1xuICAgICAgICAgICAgcmFuZG9tQWNjZXNzUG9pbnRzID0gdGhpcy5fbGlzdFtzZWdtZW50SWR4XS5yYW5kb21BY2Nlc3NQb2ludHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhbmRvbUFjY2Vzc1BvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZG9tQWNjZXNzUG9pbnRzW3JhbmRvbUFjY2Vzc1BvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFTZWdtZW50IHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuc3RhcnREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5lbmREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5zdGFydFB0cyA9IC0xO1xuICAgICAgICB0aGlzLmVuZFB0cyA9IC0xO1xuICAgICAgICB0aGlzLm9yaWdpblN0YXJ0RHRzID0gLTE7XG4gICAgICAgIHRoaXMub3JpZ2luRW5kRHRzID0gLTE7XG4gICAgICAgIHRoaXMucmFuZG9tQWNjZXNzUG9pbnRzID0gW107XG4gICAgICAgIHRoaXMuZmlyc3RTYW1wbGUgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RTYW1wbGUgPSBudWxsO1xuICAgIH1cblxuICAgIGFkZFJBUCAoc2FtcGxlKSB7XG4gICAgICAgIHNhbXBsZS5pc1JBUCA9IHRydWU7XG4gICAgICAgIHRoaXMucmFuZG9tQWNjZXNzUG9pbnRzLnB1c2goc2FtcGxlKTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tNZXRhIHtcbiAgY29uc3RydWN0b3IgKG1ldGEpIHtcbiAgICBjb25zdCBfZGVmYXVsdCA9IHtcbiAgICAgIHNhbXBsZVJhdGU6IDQ4MDAwLFxuICAgICAgY2hhbm5lbENvdW50OiAyLFxuICAgICAgY29kZWM6ICdtcDRhLjQwLjInLFxuICAgICAgY29uZmlnOiBbNDEsIDQwMSwgMTM2LCAwXSxcbiAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgaWQ6IDIsXG4gICAgICByZWZTYW1wbGVEdXJhdGlvbjogMjEsXG4gICAgICBzYW1wbGVSYXRlSW5kZXg6IDMsXG4gICAgICB0aW1lc2NhbGU6IDEwMDAsXG4gICAgICB0eXBlOiAnYXVkaW8nXG4gICAgfVxuICAgIGlmIChtZXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgX2RlZmF1bHQsIG1ldGEpXG4gICAgfVxuICAgIHJldHVybiBfZGVmYXVsdFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrTWV0YSB7XG4gIGNvbnN0cnVjdG9yIChtZXRhKSB7XG4gICAgY29uc3QgX2RlZmF1bHQgPSB7XG4gICAgICBhdmNjOiBudWxsLFxuICAgICAgc3BzOiBuZXcgVWludDhBcnJheSgwKSxcbiAgICAgIHBwczogbmV3IFVpbnQ4QXJyYXkoMCksXG4gICAgICBjaHJvbWFGb3JtYXQ6IDQyMCxcbiAgICAgIGNvZGVjOiAnYXZjMS42NDAwMjAnLFxuICAgICAgY29kZWNIZWlnaHQ6IDcyMCxcbiAgICAgIGNvZGVjV2lkdGg6IDEyODAsXG4gICAgICBkdXJhdGlvbjogMCxcbiAgICAgIGZyYW1lUmF0ZToge1xuICAgICAgICBmaXhlZDogdHJ1ZSxcbiAgICAgICAgZnBzOiAyNSxcbiAgICAgICAgZnBzX251bTogMjUwMDAsXG4gICAgICAgIGZwc19kZW46IDEwMDBcbiAgICAgIH0sXG4gICAgICBpZDogMSxcbiAgICAgIGxldmVsOiAnMy4yJyxcbiAgICAgIHByZXNlbnRIZWlnaHQ6IDcyMCxcbiAgICAgIHByZXNlbnRXaWR0aDogMTI4MCxcbiAgICAgIHByb2ZpbGU6ICdIaWdoJyxcbiAgICAgIHJlZlNhbXBsZUR1cmF0aW9uOiA0MCxcbiAgICAgIHBhclJhdGlvOiB7XG4gICAgICAgIGhlaWdodDogMSxcbiAgICAgICAgd2lkdGg6IDFcbiAgICAgIH0sXG4gICAgICB0aW1lc2NhbGU6IDEwMDAsXG4gICAgICB0eXBlOiAndmlkZW8nXG4gICAgfVxuXG4gICAgaWYgKG1ldGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgbWV0YSlcbiAgICB9XG4gICAgcmV0dXJuIF9kZWZhdWx0XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBBdWRpb1RyYWNrU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBBdWRpb1RyYWNrU2FtcGxlLmdldERlZmF1bHQoKVxuICAgIGlmICghaW5mbykge1xuICAgICAgcmV0dXJuIF9kZWZhdWx0XG4gICAgfVxuICAgIGxldCBzYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgaW5mbylcblxuICAgIHJldHVybiBzYW1wbGVcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0ICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmlkZW9UcmFja1NhbXBsZSB7XG4gIGNvbnN0cnVjdG9yIChpbmZvKSB7XG4gICAgbGV0IF9kZWZhdWx0ID0gVmlkZW9UcmFja1NhbXBsZS5nZXREZWZhdWx0KClcblxuICAgIGlmICghaW5mbykge1xuICAgICAgcmV0dXJuIF9kZWZhdWx0XG4gICAgfVxuICAgIGxldCBzYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgaW5mbylcblxuICAgIHJldHVybiBzYW1wbGVcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0ICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHRzOiBudWxsLFxuICAgICAgcHRzOiBudWxsLFxuICAgICAgaXNLZXlmcmFtZTogZmFsc2UsIC8vIGlzIFJhbmRvbSBhY2Nlc3MgcG9pbnRcbiAgICAgIG9yaWdpbkR0czogbnVsbCxcbiAgICAgIGRhdGE6IG5ldyBVaW50OEFycmF5KClcbiAgICB9XG4gIH1cbn1cbiIsImNsYXNzIE1TRSB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5jb25maWdzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlncyk7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmNvbmZpZ3MuY29udGFpbmVyO1xuICAgIHRoaXMubWVkaWFTb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuc291cmNlQnVmZmVycyA9IHt9O1xuICAgIHRoaXMucHJlbG9hZFRpbWUgPSB0aGlzLmNvbmZpZ3MucHJlbG9hZFRpbWUgfHwgMTtcbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHRoaXMubWVkaWFTb3VyY2UgPSBuZXcgc2VsZi5NZWRpYVNvdXJjZSgpO1xuICAgIHRoaXMubWVkaWFTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMub25Tb3VyY2VPcGVuLmJpbmQodGhpcykpO1xuICAgIHRoaXMuY29udGFpbmVyLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy5tZWRpYVNvdXJjZSk7XG4gICAgdGhpcy51cmwgPSB0aGlzLmNvbnRhaW5lci5zcmM7XG4gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsIHRoaXMub25UaW1lVXBkYXRlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3dhaXRpbmcnLCB0aGlzLm9uV2FpdGluZy5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIG9uVGltZVVwZGF0ZSAoKSB7XG4gICAgdGhpcy5lbWl0KCdUSU1FX1VQREFURScsIHRoaXMuY29udGFpbmVyKTtcbiAgfVxuICAgXG4gIG9uV2FpdGluZyAoKSB7XG4gICAgdGhpcy5lbWl0KCdXQUlUSU5HJywgdGhpcy5jb250YWluZXIpO1xuICB9XG5cbiAgb25Tb3VyY2VPcGVuICgpIHtcbiAgICB0aGlzLmFkZFNvdXJjZUJ1ZmZlcnMoKTtcbiAgfVxuXG4gIG9uVXBkYXRlRW5kICgpIHtcbiAgICB0aGlzLmVtaXQoJ1NPVVJDRV9VUERBVEVfRU5EJyk7XG4gICAgdGhpcy5kb0FwcGVuZCgpXG4gIH1cbiAgYWRkU291cmNlQnVmZmVycyAoKSB7XG4gICAgaWYgKHRoaXMubWVkaWFTb3VyY2UucmVhZHlTdGF0ZSAhPT0gJ29wZW4nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzb3VyY2VzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgdHJhY2tzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJyk7XG4gICAgbGV0IHRyYWNrO1xuXG4gICAgc291cmNlcyA9IHNvdXJjZXMuc291cmNlcztcbiAgICBsZXQgYWRkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDAsIGsgPSBPYmplY3Qua2V5cyhzb3VyY2VzKS5sZW5ndGg7IGkgPCBrOyBpKyspIHtcbiAgICAgIGxldCB0eXBlID0gT2JqZWN0LmtleXMoc291cmNlcylbaV07XG4gICAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICB0cmFjayA9IHRyYWNrcy5hdWRpb1RyYWNrO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgIHRyYWNrID0gdHJhY2tzLnZpZGVvVHJhY2s7XG4gICAgICB9XG4gICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgbGV0IGR1ciA9IHR5cGUgPT09ICdhdWRpbycgPyAyMSA6IDQwO1xuICAgICAgICBpZiAodHJhY2subWV0YSAmJiB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSBkdXIgPSB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uO1xuICAgICAgICBpZiAoc291cmNlc1t0eXBlXS5kYXRhLmxlbmd0aCA+PSAodGhpcy5wcmVsb2FkVGltZSAvIGR1cikpIHtcbiAgICAgICAgICBhZGQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFkZCkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMCwgayA9IE9iamVjdC5rZXlzKHNvdXJjZXMpLmxlbmd0aDsgaSA8IGs7IGkrKykge1xuICAgICAgICBsZXQgdHlwZSA9IE9iamVjdC5rZXlzKHNvdXJjZXMpW2ldO1xuICAgICAgICBsZXQgc291cmNlID0gc291cmNlc1t0eXBlXVxuICAgICAgICBsZXQgbWltZSA9ICh0eXBlID09PSAndmlkZW8nKSA/ICd2aWRlby9tcDQ7Y29kZWNzPScgKyBzb3VyY2UubWltZXR5cGUgOiAnYXVkaW8vbXA0O2NvZGVjcz0nICsgc291cmNlLm1pbWV0eXBlXG4gICAgICAgIGxldCBzb3VyY2VCdWZmZXIgPSB0aGlzLm1lZGlhU291cmNlLmFkZFNvdXJjZUJ1ZmZlcihtaW1lKTtcbiAgICAgICAgdGhpcy5zb3VyY2VCdWZmZXJzW3R5cGVdID0gc291cmNlQnVmZmVyO1xuICAgICAgICBzb3VyY2VCdWZmZXIuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgdGhpcy5vblVwZGF0ZUVuZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5kb0FwcGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRvQXBwZW5kICgpIHtcbiAgICBsZXQgc291cmNlcyA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1BSRV9TT1VSQ0VfQlVGRkVSJyk7XG4gICAgaWYgKHNvdXJjZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdHlwZSA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1cbiAgICAgICAgbGV0IHNvdXJjZUJ1ZmZlciA9IHRoaXMuc291cmNlQnVmZmVyc1t0eXBlXTtcbiAgICAgICAgaWYgKCFzb3VyY2VCdWZmZXIudXBkYXRpbmcpIHtcbiAgICAgICAgICBsZXQgc291cmNlID0gc291cmNlcy5zb3VyY2VzW3R5cGVdO1xuICAgICAgICAgIGlmIChzb3VyY2UgJiYgIXNvdXJjZS5pbml0ZWQpIHtcbiAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hcHBlbmRCdWZmZXIoc291cmNlLmluaXQuYnVmZmVyLmJ1ZmZlcik7XG4gICAgICAgICAgICBzb3VyY2UuaW5pdGVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBzb3VyY2UuZGF0YS5zaGlmdCgpXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYXBwZW5kQnVmZmVyKGRhdGEuYnVmZmVyLmJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZW5kT2ZTdHJlYW0gKCkge1xuICAgIGlmICh0aGlzLm1lZGlhU291cmNlLnJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgdGhpcy5tZWRpYVNvdXJjZS5lbmRPZlN0cmVhbSgpXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlIChlbmQpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBidWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXV07XG4gICAgICBpZiAoIWJ1ZmZlci51cGRhdGluZykge1xuICAgICAgICBidWZmZXIucmVtb3ZlKDAsIGVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsIHRoaXMub25UaW1lVXBkYXRlKTtcbiAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCd3YWl0aW5nJywgdGhpcy5vbldhaXRpbmcpO1xuICAgIHRoaXMubWVkaWFTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignc291cmNlb3BlbicsIHRoaXMub25Tb3VyY2VPcGVuKTtcbiAgICB0aGlzLmNvbmZpZ3MgPSB7fTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XG4gICAgdGhpcy5tZWRpYVNvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5zb3VyY2VCdWZmZXJzID0ge307XG4gICAgdGhpcy5wcmVsb2FkVGltZSA9IDE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgYnVmZmVyID0gdGhpcy5zb3VyY2VCdWZmZXJzW09iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycylbaV1dO1xuICAgICAgYnVmZmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VwZGF0ZWVuZCcsIHRoaXMub25VcGRhdGVFbmQpO1xuICAgICAgdGhpcy5tZWRpYVNvdXJjZS5yZW1vdmVTb3VyY2VCdWZmZXIoYnVmZmVyKTtcbiAgICAgIGRlbGV0ZSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXV07XG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBNU0U7XG4iLCJpbXBvcnQgQ29uY2F0IGZyb20gJ2NvbmNhdC10eXBlZC1hcnJheSdcblxuY2xhc3MgQnVmZmVyIHtcbiAgY29uc3RydWN0b3IgKGJ1ZmZlcikge1xuICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyIHx8IG5ldyBVaW50OEFycmF5KDApXG4gIH1cblxuICB3cml0ZSAoLi4uYnVmZmVyKSB7XG4gICAgYnVmZmVyLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IENvbmNhdChVaW50OEFycmF5LCB0aGlzLmJ1ZmZlciwgaXRlbSlcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIHdyaXRlVWludDMyICh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXG4gICAgICB2YWx1ZSA+PiAyNCxcbiAgICAgICh2YWx1ZSA+PiAxNikgJiAweGZmLFxuICAgICAgKHZhbHVlID4+IDgpICYgMHhmZixcbiAgICAgIHZhbHVlICYgMHhmZlxuICAgIF0pXG4gIH1cblxuICBzdGF0aWMgcmVhZEFzSW50IChhcnIpIHtcbiAgICBsZXQgdGVtcCA9ICcnXG5cbiAgICBmdW5jdGlvbiBwYWRTdGFydDRIZXggKGhleE51bSkge1xuICAgICAgbGV0IGhleFN0ciA9IGhleE51bS50b1N0cmluZygxNilcbiAgICAgIHJldHVybiBoZXhTdHIucGFkU3RhcnQoMiwgJzAnKVxuICAgIH1cblxuICAgIGFyci5mb3JFYWNoKG51bSA9PiB7XG4gICAgICB0ZW1wICs9IHBhZFN0YXJ0NEhleChudW0pXG4gICAgfSlcbiAgICByZXR1cm4gcGFyc2VJbnQodGVtcCwgMTYpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnVmZmVyXG4iLCJjbGFzcyBTdHJlYW0ge1xuICBjb25zdHJ1Y3RvciAoYnVmZmVyKSB7XG4gICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgIHRoaXMuZGF0YXZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICAgIHRoaXMuZGF0YXZpZXcucG9zaXRpb24gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBsZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgc2V0IHBvc2l0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuZGF0YXZpZXcucG9zaXRpb24gPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBwb3NpdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YXZpZXcucG9zaXRpb247XG4gIH1cblxuICBiYWNrIChjb3VudCkge1xuICAgIHRoaXMucG9zaXRpb24gLT0gY291bnQ7XG4gIH1cblxuICBza2lwIChjb3VudCkge1xuICAgIGxldCBsb29wID0gTWF0aC5mbG9vcihjb3VudCAvIDQpO1xuICAgIGxldCBsYXN0ID0gY291bnQgJSA0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcDsgaSsrKSB7XG4gICAgICBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgNCk7XG4gICAgfVxuICAgIGlmIChsYXN0ID4gMCkge1xuICAgICAgU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIGxhc3QpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbcmVhZEJ5dGUg5LuORGF0YVZpZXfkuK3or7vlj5bmlbDmja5dXG4gICAqIEBwYXJhbSAge0RhdGFWaWV3fSBidWZmZXIgW0RhdGFWaWV35a6e5L6LXVxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHNpemUgICBb6K+75Y+W5a2X6IqC5pWwXVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICBb5pW05pWwXVxuICAgKi9cbiAgc3RhdGljIHJlYWRCeXRlIChidWZmZXIsIHNpemUsIHNpZ24pIHtcbiAgICBsZXQgcmVzO1xuICAgIHN3aXRjaCAoc2l6ZSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRJbnQ4KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQ4KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGlmIChzaWduKSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldEludDE2KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQxNihidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnRlZCBmb3IgcmVhZEJ5dGUgMycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50OChidWZmZXIucG9zaXRpb24pIDw8IDE2O1xuICAgICAgICAgIHJlcyB8PSBidWZmZXIuZ2V0VWludDgoYnVmZmVyLnBvc2l0aW9uICsgMSkgPDwgODtcbiAgICAgICAgICByZXMgfD0gYnVmZmVyLmdldFVpbnQ4KGJ1ZmZlci5wb3NpdGlvbiArIDIpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRJbnQzMihidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50MzIoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgaWYgKHNpZ24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBzdXBwb3J0ZWQgZm9yIHJlYWRCb2R5IDgnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0VWludDMyKGJ1ZmZlci5wb3NpdGlvbikgPDwgMzI7XG4gICAgICAgICAgcmVzIHw9IGJ1ZmZlci5nZXRVaW50MzIoYnVmZmVyLnBvc2l0aW9uICsgNCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXMgPSAnJztcbiAgICB9XG4gICAgYnVmZmVyLnBvc2l0aW9uICs9IHNpemU7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIHJlYWRVaW50OCAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAxKTtcbiAgfVxuXG4gIHJlYWRVaW50MTYgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMik7XG4gIH1cblxuICByZWFkVWludDI0ICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDMpO1xuICB9XG5cbiAgcmVhZFVpbnQzMiAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCA0KTtcbiAgfVxuXG4gIHJlYWRVaW50NjQgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgOCk7XG4gIH1cblxuICByZWFkSW50OCAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAxLCB0cnVlKTtcbiAgfVxuICByZWFkSW50MTYgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMiwgdHJ1ZSk7XG4gIH1cblxuICByZWFkSW50MzIgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgNCwgdHJ1ZSk7XG4gIH1cblxuICB3cml0ZVVpbnQzMiAodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgdmFsdWUgPj4+IDI0ICYgMHhmZixcbiAgICAgIHZhbHVlID4+PiAxNiAmIDB4ZmYsXG4gICAgICB2YWx1ZSA+Pj4gOCAmIDB4ZmYsXG4gICAgICB2YWx1ZSAmIDB4ZmZcbiAgICBdKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdHJlYW07XG4iLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLnhncGxheWVyPXQoKTplLnhncGxheWVyPXQoKX0od2luZG93LChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKG8pe2lmKHRbb10pcmV0dXJuIHRbb10uZXhwb3J0czt2YXIgcj10W29dPXtpOm8sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtvXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyxuKSxyLmw9ITAsci5leHBvcnRzfXJldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LG8pe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDpvfSl9LG4ucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxuLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPW4oZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIG89T2JqZWN0LmNyZWF0ZShudWxsKTtpZihuLnIobyksT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciByIGluIGUpbi5kKG8scixmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLHIpKTtyZXR1cm4gb30sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCxcImFcIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD1cIlwiLG4obi5zPTApfSh7XCIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPyEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanMhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3NyYy9zdHlsZS9pbmRleC5zY3NzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlcj8/cmVmLS01LTEhLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zcmMvc3R5bGUvaW5kZXguc2NzcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4peyhlLmV4cG9ydHM9bigvKiEgLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzICovXCIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSghMSkpLnB1c2goW2UuaSxcIkAtd2Via2l0LWtleWZyYW1lcyBwbGF5UGF1c2V7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX05OSV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4zKTt0cmFuc2Zvcm06c2NhbGUoMS4zKTtvcGFjaXR5OjB9dG97LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMCk7dHJhbnNmb3JtOnNjYWxlKDApO29wYWNpdHk6MH19QC13ZWJraXQta2V5ZnJhbWVzIGxvYWRpbmdSb3RhdGV7MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDF0dXJuKTt0cmFuc2Zvcm06cm90YXRlKDF0dXJuKX19QC13ZWJraXQta2V5ZnJhbWVzIGxvYWRpbmdEYXNoT2Zmc2V0ezAle3N0cm9rZS1kYXNob2Zmc2V0OjIzNn10b3tzdHJva2UtZGFzaG9mZnNldDowfX1ALXdlYmtpdC1rZXlmcmFtZXMgZW50ZXJUaXBzezAle29wYWNpdHk6MDtsZWZ0OjA7d2lkdGg6M3B4fTUwJXtvcGFjaXR5OjE7bGVmdDo1MCU7d2lkdGg6NXB4fXRve29wYWNpdHk6MDtsZWZ0OjEwMCU7d2lkdGg6M3B4fX0ueGdwbGF5ZXItZG93bmxvYWR7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MzZweDtoZWlnaHQ6NDBweDstd2Via2l0LW9yZGVyOjg7LW1vei1ib3gtb3JkaW5hbC1ncm91cDo5O29yZGVyOjg7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLWluYWN0aXZlIC54Z3BsYXllci1kb3dubG9hZCwueGdwbGF5ZXItbm9zdGFydCAueGdwbGF5ZXItZG93bmxvYWR7ZGlzcGxheTpub25lfS54Z3BsYXllci1kb3dubG9hZDpob3ZlciAueGdwbGF5ZXItdGlwc3tkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1kb3dubG9hZC1pbWd7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MjRweDtoZWlnaHQ6MjRweDttYXJnaW4tdG9wOjdweCFpbXBvcnRhbnQ7bWFyZ2luLWxlZnQ6NHB4IWltcG9ydGFudDtiYWNrZ3JvdW5kOnVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsJTNDc3ZnIHdpZHRoPScyNCcgaGVpZ2h0PScyNCcgdmlld0JveD0nMCAwIDI0IDI0JyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFJTNDZyBmaWxsPSclMjNGRkYnIGZpbGwtcnVsZT0nZXZlbm9kZCclM0UlM0NyZWN0IHg9JzExJyB5PSc0JyB3aWR0aD0nMicgaGVpZ2h0PScxMicgcng9JzEnLyUzRSUzQ3JlY3QgeD0nMycgeT0nMTgnIHdpZHRoPScxOCcgaGVpZ2h0PScyJyByeD0nMScvJTNFJTNDcmVjdCB0cmFuc2Zvcm09J3JvdGF0ZSg5MCA0IDE3LjUpJyB4PScxLjUnIHk9JzE2LjUnIHdpZHRoPSc1JyBoZWlnaHQ9JzInIHJ4PScxJy8lM0UlM0NyZWN0IHRyYW5zZm9ybT0ncm90YXRlKDkwIDIwIDE3LjUpJyB4PScxNy41JyB5PScxNi41JyB3aWR0aD0nNScgaGVpZ2h0PScyJyByeD0nMScvJTNFJTNDcGF0aCBkPSdNMTEuOTg4IDE0LjNsLTQuMjQzLTQuMjQyYTEgMSAwIDAgMC0xLjQxNCAxLjQxNGw0Ljk1IDQuOTVhMSAxIDAgMCAwIDEuNDE0IDBsNC45NS00Ljk1YTEgMSAwIDEgMC0xLjQxNC0xLjQxNEwxMS45ODggMTQuM3onLyUzRSUzQy9nJTNFJTNDL3N2ZyUzRVxcXCIpIG5vLXJlcGVhdCA1MCUvMTAwJSAxMDAlfS54Z3BsYXllci1yb3RhdGV7LXdlYmtpdC1vcmRlcjo5Oy1tb3otYm94LW9yZGluYWwtZ3JvdXA6MTA7b3JkZXI6OTtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmlubGluZS1ibG9jaztjdXJzb3I6cG9pbnRlcjttYXJnaW46MCA0cHh9LnhncGxheWVyLXJvdGF0ZTpob3ZlciAueGdwbGF5ZXItdGlwc3tkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1yb3RhdGUtaW1ne3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7YmFja2dyb3VuZC1pbWFnZTp1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHdpZHRoPScyMCcgaGVpZ2h0PScyMCcgdmlld0JveD0nMCAwIDIwIDIwJyBmaWxsPSdub25lJyUzRSUzQ2cgY2xpcC1wYXRoPSd1cmwoJTIzYSknIGZpbGw9JyUyM2ZmZiclM0UlM0NwYXRoIGQ9J00xMS42NjYgOS4xNjdoLTcuNWEyLjUgMi41IDAgMCAwLTIuNSAyLjV2NC4xNjZhMi41IDIuNSAwIDAgMCAyLjUgMi41aDcuNWEyLjUgMi41IDAgMCAwIDIuNS0yLjV2LTQuMTY2YTIuNSAyLjUgMCAwIDAtMi41LTIuNXonLyUzRSUzQ3BhdGggZmlsbC1ydWxlPSdldmVub2RkJyBjbGlwLXJ1bGU9J2V2ZW5vZGQnIGQ9J00zLjg4MSA0LjA2M2EuODMuODMgMCAwIDAgLjEwNSAxLjE5M0w2Ljk5IDguMDZBLjgzMy44MzMgMCAxIDAgOC4xMjggNi44NEw2LjYyIDUuNDM1bDMuMTk5LS4wMTNhNi42NjcgNi42NjcgMCAwIDEgNi4zNzQgOS4zMjIuODMzLjgzMyAwIDAgMCAxLjUyOC42NjVBOC4zMzQgOC4zMzQgMCAwIDAgOS44IDMuNzU2bC0zLjM2Ny4wMTMgMS41My0xLjY0QS44MzMuODMzIDAgMSAwIDYuNzQzLjk5MkwzLjkwMyA0LjA0YS44My44MyAwIDAgMC0uMDIxLjAyM3onLyUzRSUzQy9nJTNFJTNDZGVmcyUzRSUzQ2NsaXBQYXRoIGlkPSdhJyUzRSUzQ3BhdGggZmlsbD0nJTIzZmZmJyBkPSdNMCAwaDIwdjIwSDB6Jy8lM0UlM0MvY2xpcFBhdGglM0UlM0MvZGVmcyUzRSUzQy9zdmclM0VcXFwiKTtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjoxMHB4IDEwcHh9LnhncGxheWVye2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMjYpO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7cG9zaXRpb246cmVsYXRpdmU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lfS54Z3BsYXllciAqe21hcmdpbjowO3BhZGRpbmc6MDtib3JkZXI6MDtmb250LXNpemU6MTAwJTtmb250OmluaGVyaXQ7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9LnhncGxheWVyLnhncGxheWVyLWlzLWZ1bGxzY3JlZW57d2lkdGg6MTAwJSFpbXBvcnRhbnQ7aGVpZ2h0OjEwMCUhaW1wb3J0YW50O3BhZGRpbmctdG9wOjAhaW1wb3J0YW50O3otaW5kZXg6OTk5OX0ueGdwbGF5ZXIueGdwbGF5ZXItaXMtZnVsbHNjcmVlbi54Z3BsYXllci1pbmFjdGl2ZXtjdXJzb3I6bm9uZX0ueGdwbGF5ZXIgdmlkZW97d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtvdXRsaW5lOm5vbmV9LnhncGxheWVyLWljb257ZGlzcGxheTpibG9jazt3aWR0aDo0MHB4O2hlaWdodDo0MHB4O292ZXJmbG93OmhpZGRlbjtmaWxsOiNmZmZ9LnhncGxheWVyLWNvbnRyb2xze2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6LW1vei1ib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTowO2xlZnQ6MDtyaWdodDowO2hlaWdodDo0MHB4O2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KC0xZGVnLHJnYmEoMCwwLDAsLjMpLHRyYW5zcGFyZW50KTt6LWluZGV4OjEwfS54Z3BsYXllci1ub3N0YXJ0IC54Z3BsYXllci1jb250cm9sc3tkaXNwbGF5Om5vbmV9Lm5vLWNvbnRyb2xzIC54Z3BsYXllci1jb250cm9sc3tkaXNwbGF5Om5vbmUhaW1wb3J0YW50fS54Z3BsYXllci1pbmFjdGl2ZSAueGdwbGF5ZXItY29udHJvbHMsLnhncGxheWVyLWlzLWxpdmUgLnhncGxheWVyLWNvbnRyb2xzPip7ZGlzcGxheTpub25lfS54Z3BsYXllci1pcy1saXZlIC54Z3BsYXllci1jb250cm9scyAueGdwbGF5ZXItZnVsbHNjcmVlbiwueGdwbGF5ZXItaXMtbGl2ZSAueGdwbGF5ZXItY29udHJvbHMgLnhncGxheWVyLWxpdmUsLnhncGxheWVyLWlzLWxpdmUgLnhncGxheWVyLWNvbnRyb2xzIC54Z3BsYXllci1wbGFjZWhvbGRlciwueGdwbGF5ZXItaXMtbGl2ZSAueGdwbGF5ZXItY29udHJvbHMgLnhncGxheWVyLXBsYXksLnhncGxheWVyLWlzLWxpdmUgLnhncGxheWVyLWNvbnRyb2xzIC54Z3BsYXllci1wbGF5LWltZywueGdwbGF5ZXItaXMtbGl2ZSAueGdwbGF5ZXItY29udHJvbHMgLnhncGxheWVyLXZvbHVtZXtkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1wcm9ncmVzc3tkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDoyMHB4O2xpbmUtaGVpZ2h0OjIwcHg7bGVmdDowO3JpZ2h0OjA7b3V0bGluZTpub25lO3RvcDotMTBweDt6LWluZGV4OjM1fS54Z3BsYXllci54Z3BsYXllci1kZWZpbml0aW9uLWFjdGl2ZSAueGdwbGF5ZXItcHJvZ3Jlc3MsLnhncGxheWVyLnhncGxheWVyLXRleHRUcmFjay1hY3RpdmUgLnhncGxheWVyLXByb2dyZXNzLC54Z3BsYXllci54Z3BsYXllci12b2x1bWUtYWN0aXZlIC54Z3BsYXllci1wcm9ncmVzc3t6LWluZGV4OjE1fS54Z3BsYXllci1wcm9ncmVzcy1vdXRlcntiYWNrZ3JvdW5kOmhzbGEoMCwwJSwxMDAlLC4zKTtkaXNwbGF5OmJsb2NrO2hlaWdodDozcHg7bGluZS1oZWlnaHQ6M3B4O21hcmdpbi10b3A6OC41cHg7d2lkdGg6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTtjdXJzb3I6cG9pbnRlcn0ueGdwbGF5ZXItcHJvZ3Jlc3MtY2FjaGUsLnhncGxheWVyLXByb2dyZXNzLXBsYXllZHtkaXNwbGF5OmJsb2NrO2hlaWdodDoxMDAlO2xpbmUtaGVpZ2h0OjE7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowfS54Z3BsYXllci1wcm9ncmVzcy1jYWNoZXt3aWR0aDowO2JhY2tncm91bmQ6aHNsYSgwLDAlLDEwMCUsLjUpfS54Z3BsYXllci1wcm9ncmVzcy1wbGF5ZWR7ZGlzcGxheTpibG9jazt3aWR0aDowO2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KC05MGRlZywjZmExZjQxLCNlMzExMDYpO2JvcmRlci1yYWRpdXM6MCAxLjVweCAxLjVweCAwfS54Z3BsYXllci1wcm9ncmVzcy1idG57ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6LTZweDt3aWR0aDoxNHB4O2hlaWdodDoxNnB4O2JvcmRlci1yYWRpdXM6NnB4O2JhY2tncm91bmQ6I2ZmZjtib3gtc2hhZG93OjAgMCAycHggMCByZ2JhKDAsMCwwLC4yNil9LnhncGxheWVyLXByb2dyZXNzLXBvaW50e3Bvc2l0aW9uOmFic29sdXRlfS54Z3BsYXllci1wcm9ncmVzcy1wb2ludC54Z3BsYXllci10aXBze21hcmdpbi1sZWZ0OjA7dG9wOi0yNXB4O2Rpc3BsYXk6bm9uZTt6LWluZGV4OjEwMH0ueGdwbGF5ZXItcHJvZ3Jlc3MtZG90e2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDozcHg7d2lkdGg6NXB4O3RvcDowO2JhY2tncm91bmQ6I2ZmZjtib3JkZXItcmFkaXVzOjZweDt6LWluZGV4OjE2fS54Z3BsYXllci1wcm9ncmVzcy1kb3QgLnhncGxheWVyLXByb2dyZXNzLXRpcHtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOi00MHB4O2hlaWdodDphdXRvO2xpbmUtaGVpZ2h0OjMwcHg7d2lkdGg6YXV0bzstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguOCk7LW1zLXRyYW5zZm9ybTpzY2FsZSguOCk7dHJhbnNmb3JtOnNjYWxlKC44KTtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjMpO2JvcmRlci1yYWRpdXM6NnB4O2JvcmRlcjoxcHggc29saWQgcmdiYSgwLDAsMCwuOCk7Y3Vyc29yOmRlZmF1bHQ7d2hpdGUtc3BhY2U6bm93cmFwO2Rpc3BsYXk6bm9uZX0ueGdwbGF5ZXItcHJvZ3Jlc3MtZG90LXNob3cgLnhncGxheWVyLXByb2dyZXNzLXRpcHtkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1wcm9ncmVzcy10aHVtYm5haWx7cG9zaXRpb246YWJzb2x1dGU7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fS54Z3BsYXllci1wcm9ncmVzcy10aHVtYm5haWwueGdwbGF5ZXItdGlwc3ttYXJnaW4tbGVmdDowO2Rpc3BsYXk6bm9uZTt6LWluZGV4Ojk5fS54Z3BsYXllci1wcm9ncmVzczpmb2N1cyAueGdwbGF5ZXItcHJvZ3Jlc3Mtb3V0ZXIsLnhncGxheWVyLXByb2dyZXNzOmhvdmVyIC54Z3BsYXllci1wcm9ncmVzcy1vdXRlcntoZWlnaHQ6NnB4O21hcmdpbi10b3A6N3B4fS54Z3BsYXllci1wcm9ncmVzczpmb2N1cyAueGdwbGF5ZXItcHJvZ3Jlc3MtZG90LC54Z3BsYXllci1wcm9ncmVzczpob3ZlciAueGdwbGF5ZXItcHJvZ3Jlc3MtZG90e2hlaWdodDo2cHh9LnhncGxheWVyLXByb2dyZXNzOmZvY3VzIC54Z3BsYXllci1wcm9ncmVzcy1idG4sLnhncGxheWVyLXByb2dyZXNzOmhvdmVyIC54Z3BsYXllci1wcm9ncmVzcy1idG57ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItcGxheSwueGdwbGF5ZXItcGxheS1pbWd7cG9zaXRpb246cmVsYXRpdmU7LXdlYmtpdC1vcmRlcjowOy1tb3otYm94LW9yZGluYWwtZ3JvdXA6MTtvcmRlcjowO2Rpc3BsYXk6YmxvY2s7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLXBsYXktaW1nIC54Z3BsYXllci1pY29uLC54Z3BsYXllci1wbGF5IC54Z3BsYXllci1pY29ue21hcmdpbi10b3A6M3B4fS54Z3BsYXllci1wbGF5LWltZzpob3ZlciwueGdwbGF5ZXItcGxheTpob3ZlcntvcGFjaXR5Oi44NX0ueGdwbGF5ZXItcGxheS1pbWc6aG92ZXIgLnhncGxheWVyLXRpcHMsLnhncGxheWVyLXBsYXk6aG92ZXIgLnhncGxheWVyLXRpcHN7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItcGxheU5leHQsLnhncGxheWVyLXBsYXlOZXh0LWltZ3std2Via2l0LW9yZGVyOjE7LW1vei1ib3gtb3JkaW5hbC1ncm91cDoyO29yZGVyOjE7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLXBsYXlOZXh0LWltZzpob3ZlciwueGdwbGF5ZXItcGxheU5leHQ6aG92ZXJ7b3BhY2l0eTouODV9LnhncGxheWVyLXRpbWV7LXdlYmtpdC1vcmRlcjoyOy1tb3otYm94LW9yZGluYWwtZ3JvdXA6MztvcmRlcjoyO2ZvbnQtZmFtaWx5OkFyaWFsTVQ7Zm9udC1zaXplOjEzcHg7Y29sb3I6I2ZmZjtsaW5lLWhlaWdodDo0MHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrfS54Z3BsYXllci10aW1lIHNwYW46YWZ0ZXJ7Y29udGVudDpcXFwiL1xcXCI7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZzowIDNweH0ueGdwbGF5ZXItdGltZSBlbXtjb2xvcjpoc2xhKDAsMCUsMTAwJSwuNSl9LnhncGxheWVyLXRpcHN7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC41NCk7Ym9yZGVyLXJhZGl1czoxcHg7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2ZvbnQtZmFtaWx5OlBpbmdGYW5nU0MtUmVndWxhcjtmb250LXNpemU6MTFweDtjb2xvcjojZmZmO3BhZGRpbmc6MnB4IDRweDt0ZXh0LWFsaWduOmNlbnRlcjt0b3A6LTMwcHg7bGVmdDo1MCU7bWFyZ2luLWxlZnQ6LTE2cHg7d2lkdGg6YXV0bzt3aGl0ZS1zcGFjZTpub3dyYXB9LnhncGxheWVyLXZvbHVtZXtvdXRsaW5lOm5vbmU7LXdlYmtpdC1vcmRlcjo0Oy1tb3otYm94LW9yZGluYWwtZ3JvdXA6NTtvcmRlcjo0O3dpZHRoOjI4cHg7aGVpZ2h0OjE0MHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi10b3A6LTEwMHB4O3otaW5kZXg6MTh9LnhncGxheWVyLXZvbHVtZSAueGdwbGF5ZXItaWNvbnttYXJnaW4tdG9wOjhweDtjdXJzb3I6cG9pbnRlcjtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206LTlweH0ueGdwbGF5ZXItc2xpZGVye2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoyOHB4O2hlaWdodDo4OHB4O2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuNTQpO2JvcmRlci1yYWRpdXM6MXB4O2JvdHRvbTo1MHB4O291dGxpbmU6bm9uZTtsZWZ0OjB9LnhncGxheWVyLnhncGxheWVyLXZvbHVtZS1hY3RpdmUgLnhncGxheWVyLXNsaWRlcntkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1zbGlkZXI6YWZ0ZXJ7Y29udGVudDpcXFwiIFxcXCI7ZGlzcGxheTpibG9jaztoZWlnaHQ6MTVweDt3aWR0aDoyOHB4O3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTotMTVweDtsZWZ0OjA7ei1pbmRleDoyMH0ueGdwbGF5ZXItYmFyLC54Z3BsYXllci1kcmFne2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjZweDtsZWZ0OjEycHg7YmFja2dyb3VuZDpoc2xhKDAsMCUsMTAwJSwuMyk7Ym9yZGVyLXJhZGl1czoxMDBweDt3aWR0aDo0cHg7aGVpZ2h0Ojc2cHg7b3V0bGluZTpub25lO2N1cnNvcjpwb2ludGVyfS54Z3BsYXllci1kcmFne2JvdHRvbTowO2xlZnQ6MDtiYWNrZ3JvdW5kOiNmYTFmNDE7bWF4LWhlaWdodDo3NnB4fS54Z3BsYXllci1kcmFnOmFmdGVye2NvbnRlbnQ6XFxcIiBcXFwiO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjhweDtoZWlnaHQ6OHB4O2JhY2tncm91bmQ6I2ZmZjtib3gtc2hhZG93OjAgMCA1cHggMCByZ2JhKDAsMCwwLC4yNik7cG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyLXJhZGl1czo1MCU7bGVmdDotMnB4O3RvcDotNnB4fS54Z3BsYXllci1wbGFjZWhvbGRlcnstd2Via2l0LWZsZXg6MTstbW96LWJveC1mbGV4OjE7ZmxleDoxOy13ZWJraXQtb3JkZXI6MzstbW96LWJveC1vcmRpbmFsLWdyb3VwOjQ7b3JkZXI6MztkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1zdGFydHtib3JkZXItcmFkaXVzOjUwJTtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDo3MHB4O2hlaWdodDo3MHB4O2JhY2tncm91bmQ6aHNsYSgwLDAlLDEwMCUsLjMpO292ZXJmbG93OmhpZGRlbjt0ZXh0LWFsaWduOmNlbnRlcjtsaW5lLWhlaWdodDo3MHB4O3ZlcnRpY2FsLWFsaWduOm1pZGRsZTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO3otaW5kZXg6MTAwMDttYXJnaW46LTU1cHggYXV0byBhdXRvIC0zNXB4O2N1cnNvcjpwb2ludGVyfS54Z3BsYXllci1pbmFjdGl2ZSAueGdwbGF5ZXItc3RhcnQsLnhncGxheWVyLW5vc3RhcnQgLnhncGxheWVyLXN0YXJ0e21hcmdpbjotMzVweCBhdXRvIGF1dG8gLTM1cHh9LnhncGxheWVyLXN0YXJ0IHN2Z3tmaWxsOmhzbGEoMCwwJSwxMDAlLC43KTttYXJnaW46MTRweH0ueGdwbGF5ZXItc3RhcnQueGdwbGF5ZXItc3RhcnQtaW50ZXJhY3R7LXdlYmtpdC1hbmltYXRpb246cGxheVBhdXNlIC40cyBlYXNlLW91dCBmb3J3YXJkczthbmltYXRpb246cGxheVBhdXNlIC40cyBlYXNlLW91dCBmb3J3YXJkc30ueGdwbGF5ZXItc3RhcnQ6aG92ZXJ7YmFja2dyb3VuZDpoc2xhKDAsMCUsMTAwJSwuNSl9LnhncGxheWVyLXN0YXJ0OmhvdmVyIHN2Z3tmaWxsOmhzbGEoMCwwJSwxMDAlLC42KX0ueGdwbGF5ZXItc3RhcnQtaW1ne2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO3otaW5kZXg6MTAwMDtjdXJzb3I6cG9pbnRlcn0ueGdwbGF5ZXItbm9zdGFydCAueGdwbGF5ZXItc3RhcnQtaW1ne2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLXN0YXJ0LWltZy54Z3BsYXllci1zdGFydC1pbnRlcmFjdHstd2Via2l0LWFuaW1hdGlvbjpwbGF5UGF1c2UgLjRzIGVhc2Utb3V0IGZvcndhcmRzO2FuaW1hdGlvbjpwbGF5UGF1c2UgLjRzIGVhc2Utb3V0IGZvcndhcmRzfS54Z3BsYXllci1zdGFydC1pbWc6aG92ZXJ7b3BhY2l0eTouODV9LnhncGxheWVyLXRleHRUcmFja3std2Via2l0LW9yZGVyOjc7LW1vei1ib3gtb3JkaW5hbC1ncm91cDo4O29yZGVyOjc7d2lkdGg6NjBweDtoZWlnaHQ6MTUwcHg7ei1pbmRleDoxODtwb3NpdGlvbjpyZWxhdGl2ZTtvdXRsaW5lOm5vbmU7ZGlzcGxheTpub25lO2N1cnNvcjpkZWZhdWx0O21hcmdpbi1sZWZ0OjEwcHg7bWFyZ2luLXRvcDotMTE5cHg7bWFyZ2luLWJvdHRvbToxMXB4fS54Z3BsYXllci10ZXh0VHJhY2sgdWx7ZGlzcGxheTpub25lO2xpc3Qtc3R5bGU6bm9uZTt3aWR0aDo3OHB4O2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuNTQpO2JvcmRlci1yYWRpdXM6MXB4O3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTozMHB4O2xlZnQ6MDt0ZXh0LWFsaWduOmNlbnRlcjt3aGl0ZS1zcGFjZTpub3dyYXA7bWFyZ2luLWxlZnQ6LTEwcHg7ei1pbmRleDoyNjtjdXJzb3I6cG9pbnRlcn0ueGdwbGF5ZXIueGdwbGF5ZXItdGV4dFRyYWNrLWFjdGl2ZSAueGdwbGF5ZXItdGV4dFRyYWNrIHVse2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLXRleHRUcmFjayB1bCBsaXtvcGFjaXR5Oi43O2ZvbnQtZmFtaWx5OlBpbmdGYW5nU0MtUmVndWxhcjtmb250LXNpemU6MTFweDtjb2xvcjpoc2xhKDAsMCUsMTAwJSwuOCk7cGFkZGluZzo2cHggMTNweH0ueGdwbGF5ZXItdGV4dFRyYWNrIHVsIGxpLnRleHRUcmFjaywueGdwbGF5ZXItdGV4dFRyYWNrIHVsIGxpOmhvdmVye2NvbG9yOiNmZmY7b3BhY2l0eToxfS54Z3BsYXllci10ZXh0VHJhY2sgLm5hbWV7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC1mYW1pbHk6UGluZ0ZhbmdTQy1SZWd1bGFyO2ZvbnQtc2l6ZToxM3B4O2N1cnNvcjpwb2ludGVyO2NvbG9yOmhzbGEoMCwwJSwxMDAlLC44KTtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MDt3aWR0aDo2MHB4O2hlaWdodDoyMHB4O2xpbmUtaGVpZ2h0OjIwcHg7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC4zOCk7Ym9yZGVyLXJhZGl1czoxMHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0ueGdwbGF5ZXItaXMtdGV4dFRyYWNrIC54Z3BsYXllci10ZXh0VHJhY2t7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItZGVmaW5pdGlvbnstd2Via2l0LW9yZGVyOjU7LW1vei1ib3gtb3JkaW5hbC1ncm91cDo2O29yZGVyOjU7d2lkdGg6NjBweDtoZWlnaHQ6MTUwcHg7ei1pbmRleDoxODtwb3NpdGlvbjpyZWxhdGl2ZTtvdXRsaW5lOm5vbmU7ZGlzcGxheTpub25lO2N1cnNvcjpkZWZhdWx0O21hcmdpbi1sZWZ0OjEwcHg7bWFyZ2luLXRvcDotMTE5cHg7bWFyZ2luLWJvdHRvbToxMXB4fS54Z3BsYXllci1kZWZpbml0aW9uIHVse2Rpc3BsYXk6bm9uZTtsaXN0LXN0eWxlOm5vbmU7d2lkdGg6NzhweDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjU0KTtib3JkZXItcmFkaXVzOjFweDtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MzBweDtsZWZ0OjA7dGV4dC1hbGlnbjpjZW50ZXI7d2hpdGUtc3BhY2U6bm93cmFwO21hcmdpbi1sZWZ0Oi0xMHB4O3otaW5kZXg6MjY7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLnhncGxheWVyLWRlZmluaXRpb24tYWN0aXZlIC54Z3BsYXllci1kZWZpbml0aW9uIHVse2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLWRlZmluaXRpb24gdWwgbGl7b3BhY2l0eTouNztmb250LWZhbWlseTpQaW5nRmFuZ1NDLVJlZ3VsYXI7Zm9udC1zaXplOjExcHg7Y29sb3I6aHNsYSgwLDAlLDEwMCUsLjgpO3BhZGRpbmc6NnB4IDEzcHh9LnhncGxheWVyLWRlZmluaXRpb24gdWwgbGkuZGVmaW5pdGlvbiwueGdwbGF5ZXItZGVmaW5pdGlvbiB1bCBsaTpob3Zlcntjb2xvcjojZmZmO29wYWNpdHk6MX0ueGdwbGF5ZXItZGVmaW5pdGlvbiAubmFtZXt0ZXh0LWFsaWduOmNlbnRlcjtmb250LWZhbWlseTpQaW5nRmFuZ1NDLVJlZ3VsYXI7Zm9udC1zaXplOjEzcHg7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6aHNsYSgwLDAlLDEwMCUsLjgpO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTowO3dpZHRoOjYwcHg7aGVpZ2h0OjIwcHg7bGluZS1oZWlnaHQ6MjBweDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjM4KTtib3JkZXItcmFkaXVzOjEwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246bWlkZGxlfS54Z3BsYXllci1pcy1kZWZpbml0aW9uIC54Z3BsYXllci1kZWZpbml0aW9ue2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLXBsYXliYWNrey13ZWJraXQtb3JkZXI6ODstbW96LWJveC1vcmRpbmFsLWdyb3VwOjk7b3JkZXI6ODtwb3NpdGlvbjpyZWxhdGl2ZTtvdXRsaW5lOm5vbmU7ZGlzcGxheTpibG9jaztjdXJzb3I6cG9pbnRlcjttYXJnaW46MTBweDtoZWlnaHQ6MjBweH0ueGdwbGF5ZXItcGxheWJhY2sgLm5hbWV7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC1mYW1pbHk6UGluZ0ZhbmdTQy1SZWd1bGFyO2ZvbnQtc2l6ZToxM3B4O2xpbmUtaGVpZ2h0OjIwcHg7aGVpZ2h0OjIwcHg7Y29sb3I6aHNsYSgwLDAlLDEwMCUsLjgpfS54Z3BsYXllci1wbGF5YmFjayAubmFtZSBzcGFue3dpZHRoOjQwcHg7aGVpZ2h0OjIwcHg7bGluZS1oZWlnaHQ6MjBweDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjM4KTtib3JkZXItcmFkaXVzOjEwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246bWlkZGxlfS54Z3BsYXllci1wbGF5YmFjazpob3ZlciAueGdwbGF5ZXItdGlwc3tkaXNwbGF5OmJsb2NrO3RvcDotNDBweH0ueGdwbGF5ZXItcGlwey13ZWJraXQtb3JkZXI6OTstbW96LWJveC1vcmRpbmFsLWdyb3VwOjEwO29yZGVyOjk7cG9zaXRpb246cmVsYXRpdmU7b3V0bGluZTpub25lO2Rpc3BsYXk6YmxvY2s7Y3Vyc29yOnBvaW50ZXI7bWFyZ2luLWxlZnQ6MTBweDttYXJnaW4tdG9wOjlweDttYXJnaW4tYm90dG9tOjExcHg7aGVpZ2h0OjIwcHh9LnhncGxheWVyLXBpcCAubmFtZXt0ZXh0LWFsaWduOmNlbnRlcjtmb250LWZhbWlseTpQaW5nRmFuZ1NDLVJlZ3VsYXI7Zm9udC1zaXplOjEzcHg7bGluZS1oZWlnaHQ6MjBweDtoZWlnaHQ6MjBweDtjb2xvcjpoc2xhKDAsMCUsMTAwJSwuOCl9LnhncGxheWVyLXBpcCAubmFtZSBzcGFue3dpZHRoOjYwcHg7aGVpZ2h0OjIwcHg7bGluZS1oZWlnaHQ6MjBweDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjM4KTtib3JkZXItcmFkaXVzOjEwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246bWlkZGxlfS54Z3BsYXllci54Z3BsYXllci1waXAtYWN0aXZle3Bvc2l0aW9uOmZpeGVkIWltcG9ydGFudDtyaWdodDowO2JvdHRvbToyMDBweDt3aWR0aDozMjBweCFpbXBvcnRhbnQ7aGVpZ2h0OjE4MHB4IWltcG9ydGFudDt6LWluZGV4Ojk5OSFpbXBvcnRhbnR9LnhncGxheWVyLnhncGxheWVyLXBpcC1hY3RpdmUgLnhncGxheWVyLWNvbnRyb2xzLC54Z3BsYXllci54Z3BsYXllci1waXAtYWN0aXZlIHhnLWJ1bGxldHtkaXNwbGF5Om5vbmV9LnhncGxheWVyLnhncGxheWVyLXBpcC1hY3RpdmUgLnhncGxheWVyLXBpcC1sYXl7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItcGlwLWxheXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MjZweDtsZWZ0OjA7ei1pbmRleDoxNDUwO2N1cnNvcjpwb2ludGVyO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7ZGlzcGxheTpub25lfS54Z3BsYXllci1waXAtbGF5LC54Z3BsYXllci1waXAtbGF5IGRpdnt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS54Z3BsYXllci1waXAtZHJhZ3tjdXJzb3I6bW92ZTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MjZweDtsaW5lLWhlaWdodDoyNnB4O2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHJnYmEoMCwwLDAsLjMpLHRyYW5zcGFyZW50KTt6LWluZGV4OjE1MDA7ZGlzcGxheTpub25lfS54Z3BsYXllci54Z3BsYXllci1waXAtYWN0aXZlIC54Z3BsYXllci1waXAtZHJhZ3tkaXNwbGF5Oi13ZWJraXQtZmxleDtkaXNwbGF5Oi1tb3otYm94O2Rpc3BsYXk6ZmxleH0ueGdwbGF5ZXIueGdwbGF5ZXItaW5hY3RpdmUgLnhncGxheWVyLXBpcC1kcmFne2Rpc3BsYXk6bm9uZX0ueGdwbGF5ZXItZnVsbHNjcmVlbnstd2Via2l0LW9yZGVyOjEyOy1tb3otYm94LW9yZGluYWwtZ3JvdXA6MTM7b3JkZXI6MTI7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLWZ1bGxzY3JlZW4gLnhncGxheWVyLWljb257bWFyZ2luOjRweCAtNHB4IDAgMH0ueGdwbGF5ZXItZnVsbHNjcmVlbjpob3ZlciAueGdwbGF5ZXItdGlwc3tkaXNwbGF5OmJsb2NrfS54Z3BsYXllci54Z3BsYXllci1mdWxsc2NyZWVuLWFjdGl2ZXtwb3NpdGlvbjpmaXhlZCFpbXBvcnRhbnQ7bGVmdDowIWltcG9ydGFudDt0b3A6MCFpbXBvcnRhbnQ7d2lkdGg6MTAwJSFpbXBvcnRhbnQ7aGVpZ2h0OjEwMCUhaW1wb3J0YW50O3otaW5kZXg6OTk5OTkhaW1wb3J0YW50fS54Z3BsYXllci1jc3NmdWxsc2NyZWVuey13ZWJraXQtb3JkZXI6MTE7LW1vei1ib3gtb3JkaW5hbC1ncm91cDoxMjtvcmRlcjoxMTtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmlubGluZS1ibG9jaztjdXJzb3I6cG9pbnRlcjtsZWZ0OjZweH0ueGdwbGF5ZXItY3NzZnVsbHNjcmVlbiAueGdwbGF5ZXItaWNvbnttYXJnaW46NHB4IC00cHggMCAwfS54Z3BsYXllci1jc3NmdWxsc2NyZWVuOmhvdmVyIC54Z3BsYXllci10aXBze2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLnhncGxheWVyLWNzc2Z1bGxzY3JlZW4tYWN0aXZle3Bvc2l0aW9uOmZpeGVkIWltcG9ydGFudDtsZWZ0OjAhaW1wb3J0YW50O3RvcDowIWltcG9ydGFudDt3aWR0aDoxMDAlIWltcG9ydGFudDtoZWlnaHQ6MTAwJSFpbXBvcnRhbnQ7ei1pbmRleDo5OTk5OSFpbXBvcnRhbnR9LmRhbm11LXN3aXRjaHstd2Via2l0LW9yZGVyOjY7LW1vei1ib3gtb3JkaW5hbC1ncm91cDo3O29yZGVyOjY7ei1pbmRleDoyNjttYXJnaW46MTBweCBhdXRvfS54Z3BsYXllci1idWxsZXR7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2hlaWdodDoxMDAlO292ZXJmbG93OmhpZGRlbjt6LWluZGV4Ojk7b3V0bGluZTpub25lfS54Z3BsYXllci1idWxsZXQ+Kntwb3NpdGlvbjphYnNvbHV0ZTt3aGl0ZS1zcGFjZTpub3dyYXA7ei1pbmRleDo5fS54Z3BsYXllci1oYXMtYnVsbGV0e2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLWxvYWRpbmd7ZGlzcGxheTpub25lO3dpZHRoOjEwMHB4O2hlaWdodDoxMDBweDtvdmVyZmxvdzpoaWRkZW47LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjcpOy1tcy10cmFuc2Zvcm06c2NhbGUoLjcpO3RyYW5zZm9ybTpzY2FsZSguNyk7cG9zaXRpb246YWJzb2x1dGU7bGVmdDo1MCU7dG9wOjUwJTttYXJnaW46LTcwcHggYXV0byBhdXRvIC01MHB4fS54Z3BsYXllci1sb2FkaW5nIHN2Z3tib3JkZXItcmFkaXVzOjUwJTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlcjstd2Via2l0LWFuaW1hdGlvbjpsb2FkaW5nUm90YXRlIDFzIGxpbmVhciBpbmZpbml0ZTthbmltYXRpb246bG9hZGluZ1JvdGF0ZSAxcyBsaW5lYXIgaW5maW5pdGV9LnhncGxheWVyLWxvYWRpbmcgc3ZnIHBhdGh7c3Ryb2tlOiNkZGQ7c3Ryb2tlLWRhc2hhcnJheToyMzY7LXdlYmtpdC1hbmltYXRpb246bG9hZGluZ0Rhc2hPZmZzZXQgMnMgbGluZWFyIGluZmluaXRlO2FuaW1hdGlvbjpsb2FkaW5nRGFzaE9mZnNldCAycyBsaW5lYXIgaW5maW5pdGU7YW5pbWF0aW9uLWRpcmVjdGlvbjphbHRlcm5hdGUtcmV2ZXJzZTtmaWxsOm5vbmU7c3Ryb2tlLXdpZHRoOjEycHh9LnhncGxheWVyLW5vc3RhcnQgLnhncGxheWVyLWxvYWRpbmd7ZGlzcGxheTpub25lfS54Z3BsYXllci1pc2xvYWRpbmcgLnhncGxheWVyLWxvYWRpbmd7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItcmVwbGF5e3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6NTAwO2Rpc3BsYXk6bm9uZTstd2Via2l0LWp1c3RpZnktY29udGVudDpjZW50ZXI7LW1vei1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjstd2Via2l0LWFsaWduLWl0ZW1zOmNlbnRlcjstbW96LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuNTQpOy13ZWJraXQtZmxleC1kaXJlY3Rpb246Y29sdW1uOy1tb3otYm94LW9yaWVudDp2ZXJ0aWNhbDstbW96LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtjdXJzb3I6cG9pbnRlcn0ueGdwbGF5ZXItcmVwbGF5IHN2Z3tiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjU4KTtib3JkZXItcmFkaXVzOjEwMCU7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLXJlcGxheSBzdmcgcGF0aHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoMjBweCwyMXB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZSgyMHB4LDIxcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGUoMjBweCwyMXB4KTtmaWxsOiNkZGR9LnhncGxheWVyLXJlcGxheSBzdmc6aG92ZXJ7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC4zOCl9LnhncGxheWVyLXJlcGxheSBzdmc6aG92ZXIgcGF0aHtmaWxsOiNmZmZ9LnhncGxheWVyLXJlcGxheSAueGdwbGF5ZXItcmVwbGF5LWltZ3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO2N1cnNvcjpwb2ludGVyfS54Z3BsYXllci1yZXBsYXkgLnhncGxheWVyLXJlcGxheS1pbWc6aG92ZXJ7b3BhY2l0eTouODV9LnhncGxheWVyLXJlcGxheSAueGdwbGF5ZXItcmVwbGF5LXR4dHtkaXNwbGF5OmlubGluZS1ibG9jaztmb250LWZhbWlseTpQaW5nRmFuZ1NDLVJlZ3VsYXI7Zm9udC1zaXplOjE0cHg7Y29sb3I6I2ZmZjtsaW5lLWhlaWdodDozNHB4O2N1cnNvcjpwb2ludGVyfS54Z3BsYXllci54Z3BsYXllci1lbmRlZCAueGdwbGF5ZXItY29udHJvbHN7ZGlzcGxheTpub25lfS54Z3BsYXllci54Z3BsYXllci1lbmRlZCAueGdwbGF5ZXItcmVwbGF5e2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6LW1vei1ib3g7ZGlzcGxheTpmbGV4fS54Z3BsYXllci1yZXBsYXktaW1ne2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO3otaW5kZXg6NTAwO2N1cnNvcjpwb2ludGVyfS54Z3BsYXllci1yZXBsYXktaW1nOmhvdmVye29wYWNpdHk6Ljg1fS54Z3BsYXllci54Z3BsYXllci1lbmRlZCAueGdwbGF5ZXItcmVwbGF5LWltZ3tkaXNwbGF5OmJsb2NrfUBrZXlmcmFtZXMgcGxheVBhdXNlezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9OTkley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMyk7dHJhbnNmb3JtOnNjYWxlKDEuMyk7b3BhY2l0eTowfXRvey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDApO3RyYW5zZm9ybTpzY2FsZSgwKTtvcGFjaXR5OjB9fUBrZXlmcmFtZXMgbG9hZGluZ1JvdGF0ZXswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMXR1cm4pO3RyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX1Aa2V5ZnJhbWVzIGxvYWRpbmdEYXNoT2Zmc2V0ezAle3N0cm9rZS1kYXNob2Zmc2V0OjIzNn10b3tzdHJva2UtZGFzaG9mZnNldDowfX1Aa2V5ZnJhbWVzIGVudGVyVGlwc3swJXtvcGFjaXR5OjA7bGVmdDowO3dpZHRoOjNweH01MCV7b3BhY2l0eToxO2xlZnQ6NTAlO3dpZHRoOjVweH10b3tvcGFjaXR5OjA7bGVmdDoxMDAlO3dpZHRoOjNweH19LnhncGxheWVyLWVudGVye2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kOnVybChcXFwiLy9zMi5wc3RhdHAuY29tL2Nkbi9leHBpcmUtMS1NL2J5dGVkLXBsYXllci1pbWFnZXMvMS4wLjIvYmcuc3ZnXFxcIikgbm8tcmVwZWF0IDUwJS9jb3Zlcjt6LWluZGV4OjExMDB9LnhncGxheWVyLWVudGVyIC54Z3BsYXllci1lbnRlci1sb2dve2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7bGVmdDo1MCU7dG9wOjUwJTt3aWR0aDoxMzBweDtoZWlnaHQ6NDRweDttYXJnaW46LTIycHggYXV0byBhdXRvIC02NXB4O2JhY2tncm91bmQtc2l6ZToxMzBweCA0NHB4O2JhY2tncm91bmQtaW1hZ2U6dXJsKFxcXCIvL3MzLnBzdGF0cC5jb20vY2RuL2V4cGlyZS0xLU0vYnl0ZWQtcGxheWVyLWltYWdlcy8xLjAuMS94Zy1sb2dvLW5ldy5wbmdcXFwiKX0ueGdwbGF5ZXItZW50ZXIgLnhncGxheWVyLWVudGVyLXRpcHN7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO3RvcDo1MCU7d2lkdGg6MTIwcHg7aGVpZ2h0OjFweDtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCg5MGRlZywjMDAwLHJlZCxyZWQscmVkLCMwMDApO21hcmdpbjozMnB4IGF1dG8gYXV0byAtNjJweH0ueGdwbGF5ZXItZW50ZXIgLnhncGxheWVyLWVudGVyLXRpcHM6YmVmb3Jle2NvbnRlbnQ6XFxcIiBcXFwiO2Rpc3BsYXk6YmxvY2s7d2lkdGg6NXB4O2hlaWdodDoxcHg7Ym9yZGVyLXJhZGl1czo1MCU7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowOy13ZWJraXQtYW5pbWF0aW9uOmVudGVyVGlwcyAxLjZzIGxpbmVhciBpbmZpbml0ZTthbmltYXRpb246ZW50ZXJUaXBzIDEuNnMgbGluZWFyIGluZmluaXRlO2JhY2tncm91bmQ6I2ZmZn0ueGdwbGF5ZXItaXMtZW50ZXIgLnhncGxheWVyLWVudGVyLC54Z3BsYXllci1pcy1lbnRlciAueGdwbGF5ZXItZW50ZXIgLnhncGxheWVyLWVudGVyLXRpcHN7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItc2NyZWVuU2hvdHstd2Via2l0LW9yZGVyOjEwOy1tb3otYm94LW9yZGluYWwtZ3JvdXA6MTE7b3JkZXI6MTA7cG9zaXRpb246cmVsYXRpdmU7b3V0bGluZTpub25lO2Rpc3BsYXk6YmxvY2s7Y3Vyc29yOnBvaW50ZXI7bWFyZ2luLWxlZnQ6MTBweDttYXJnaW4tdG9wOjlweDttYXJnaW4tYm90dG9tOjExcHg7aGVpZ2h0OjIwcHh9LnhncGxheWVyLXNjcmVlblNob3QgLm5hbWV7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC1mYW1pbHk6UGluZ0ZhbmdTQy1SZWd1bGFyO2ZvbnQtc2l6ZToxM3B4O2xpbmUtaGVpZ2h0OjIwcHg7aGVpZ2h0OjIwcHg7Y29sb3I6aHNsYSgwLDAlLDEwMCUsLjgpfS54Z3BsYXllci1zY3JlZW5TaG90IC5uYW1lIHNwYW57d2lkdGg6NjBweDtoZWlnaHQ6MjBweDtsaW5lLWhlaWdodDoyMHB4O2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMzgpO2JvcmRlci1yYWRpdXM6MTBweDtkaXNwbGF5OmlubGluZS1ibG9jazt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LnhncGxheWVyLXBvc3Rlcntwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt6LWluZGV4OjEwMDtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1wb3NpdGlvbjo1MCV9LnhncGxheWVyLWxpdmV7ZGlzcGxheTpibG9jaztmb250LXNpemU6MTJweDtjb2xvcjojZmZmO2xpbmUtaGVpZ2h0OjQwcHg7LXdlYmtpdC1vcmRlcjoxOy1tb3otYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxfS54Z3BsYXllciAueGdwbGF5ZXItbm9uZXtkaXNwbGF5Om5vbmV9LnhncGxheWVyLWVycm9ye2JhY2tncm91bmQ6IzAwMDtkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ei1pbmRleDoxMjAwO2ZvbnQtZmFtaWx5OlBpbmdGYW5nU0MtUmVndWxhcjtmb250LXNpemU6MTRweDtjb2xvcjojZmZmO3RleHQtYWxpZ246Y2VudGVyO2xpbmUtaGVpZ2h0OjEwMCU7LXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyOy1tb3otYm94LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7LXdlYmtpdC1hbGlnbi1pdGVtczpjZW50ZXI7LW1vei1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0ueGdwbGF5ZXItZXJyb3IgLnhncGxheWVyLWVycm9yLXJlZnJlc2h7Y29sb3I6I2ZhMWY0MTtwYWRkaW5nOjAgM3B4O2N1cnNvcjpwb2ludGVyfS54Z3BsYXllci1pcy1lcnJvciAueGdwbGF5ZXItZXJyb3J7ZGlzcGxheTotd2Via2l0LWZsZXg7ZGlzcGxheTotbW96LWJveDtkaXNwbGF5OmZsZXh9LnhncGxheWVyLWVycm9yIC54Z3BsYXllci1lcnJvci10ZXh0e2xpbmUtaGVpZ2h0OjE4cHg7bWFyZ2luOmF1dG8gNnB4fS54Z3BsYXllci1tb2JpbGUgLnhncGxheWVyLXByb2dyZXNzLWJ0bntkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1tb2JpbGUgLnhncGxheWVyLXByb2dyZXNzOmZvY3VzIC54Z3BsYXllci1wcm9ncmVzcy1vdXRlciwueGdwbGF5ZXItbW9iaWxlIC54Z3BsYXllci1wcm9ncmVzczpob3ZlciAueGdwbGF5ZXItcHJvZ3Jlc3Mtb3V0ZXJ7aGVpZ2h0OjNweDttYXJnaW4tdG9wOjguNXB4fS54Z3BsYXllci1tb2JpbGUgLnhncGxheWVyLXByb2dyZXNzOmZvY3VzIC54Z3BsYXllci1wcm9ncmVzcy1kb3QsLnhncGxheWVyLW1vYmlsZSAueGdwbGF5ZXItcHJvZ3Jlc3M6aG92ZXIgLnhncGxheWVyLXByb2dyZXNzLWRvdHtoZWlnaHQ6M3B4fS54Z3BsYXllci1tb2JpbGUueGdwbGF5ZXItZW5kZWQgLnhncGxheWVyLXN0YXJ0LC54Z3BsYXllci1tb2JpbGUueGdwbGF5ZXItZW5kZWQgLnhncGxheWVyLXN0YXJ0LWltZywueGdwbGF5ZXItbW9iaWxlLnhncGxheWVyLWluYWN0aXZlIC54Z3BsYXllci1zdGFydCwueGdwbGF5ZXItbW9iaWxlLnhncGxheWVyLWluYWN0aXZlIC54Z3BsYXllci1zdGFydC1pbWd7ZGlzcGxheTpub25lfS54Z3BsYXllci1tb2JpbGUgLnhncGxheWVyLXN0YXJ0e3dpZHRoOjYwcHg7aGVpZ2h0OjYwcHg7bGluZS1oZWlnaHQ6NjBweDtkaXNwbGF5Om5vbmU7bWFyZ2luOi01MHB4IGF1dG8gYXV0byAtMzBweH0ueGdwbGF5ZXItbW9iaWxlIC54Z3BsYXllci1zdGFydCBzdmd7bWFyZ2luOjEwcHh9LnhncGxheWVyLW1vYmlsZSAueGdwbGF5ZXItc3RhcnQtaW1ne2Rpc3BsYXk6bm9uZX0ueGdwbGF5ZXItbW9iaWxlIC54Z3BsYXllci10aXBze2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LnhncGxheWVyLW1vYmlsZS54Z3BsYXllci1ub3N0YXJ0IC54Z3BsYXllci1zdGFydHttYXJnaW46LTMwcHggYXV0byBhdXRvIC0zMHB4O2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLW1vYmlsZS54Z3BsYXllci1ub3N0YXJ0IC54Z3BsYXllci1zdGFydC1pbWd7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItbW9iaWxlIC54Z3BsYXllci1sb2FkaW5ney13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC41KTstbXMtdHJhbnNmb3JtOnNjYWxlKC41KTt0cmFuc2Zvcm06c2NhbGUoLjUpfS54Z3BsYXllci1tb2JpbGUueGdwbGF5ZXItbW9iaWxlLW5wYXNzZWQgLnhncGxheWVyLWNvbnRyb2xzLC54Z3BsYXllci1tb2JpbGUueGdwbGF5ZXItbW9iaWxlLW5wYXNzZWQgLnhncGxheWVyLXBvc3RlciwueGdwbGF5ZXItbW9iaWxlLnhncGxheWVyLW1vYmlsZS1ucGFzc2VkIC54Z3BsYXllci1zdGFydCwueGdwbGF5ZXItbW9iaWxlLnhncGxheWVyLW1vYmlsZS1ucGFzc2VkIC54Z3BsYXllci1zdGFydC1pbWd7ZGlzcGxheTpub25lfVwiLFwiXCJdKX0sXCIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107cmV0dXJuIHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoKGZ1bmN0aW9uKHQpe3ZhciBuPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZVsxXXx8XCJcIixvPWVbM107aWYoIW8pcmV0dXJuIG47aWYodCYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYSl7dmFyIHI9KGE9byxcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShhKSkpKStcIiAqL1wiKSxpPW8uc291cmNlcy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIitvLnNvdXJjZVJvb3QrZStcIiAqL1wifSkpO3JldHVybltuXS5jb25jYXQoaSkuY29uY2F0KFtyXSkuam9pbihcIlxcblwiKX12YXIgYTtyZXR1cm5bbl0uam9pbihcIlxcblwiKX0odCxlKTtyZXR1cm4gdFsyXT9cIkBtZWRpYSBcIit0WzJdK1wie1wiK24rXCJ9XCI6bn0pKS5qb2luKFwiXCIpfSx0Lmk9ZnVuY3Rpb24oZSxuKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9W1tudWxsLGUsXCJcIl1dKTtmb3IodmFyIG89e30scj0wO3I8dGhpcy5sZW5ndGg7cisrKXt2YXIgaT10aGlzW3JdWzBdO1wibnVtYmVyXCI9PXR5cGVvZiBpJiYob1tpXT0hMCl9Zm9yKHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIGE9ZVtyXTtcIm51bWJlclwiPT10eXBlb2YgYVswXSYmb1thWzBdXXx8KG4mJiFhWzJdP2FbMl09bjpuJiYoYVsyXT1cIihcIithWzJdK1wiKSBhbmQgKFwiK24rXCIpXCIpLHQucHVzaChhKSl9fSx0fX0sXCIuL25vZGVfbW9kdWxlcy9kL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZC9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oLyohIHR5cGUvdmFsdWUvaXMgKi9cIi4vbm9kZV9tb2R1bGVzL3R5cGUvdmFsdWUvaXMuanNcIikscj1uKC8qISB0eXBlL3BsYWluLWZ1bmN0aW9uL2lzICovXCIuL25vZGVfbW9kdWxlcy90eXBlL3BsYWluLWZ1bmN0aW9uL2lzLmpzXCIpLGk9bigvKiEgZXM1LWV4dC9vYmplY3QvYXNzaWduICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9hc3NpZ24vaW5kZXguanNcIiksYT1uKC8qISBlczUtZXh0L29iamVjdC9ub3JtYWxpemUtb3B0aW9ucyAqL1wiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3Qvbm9ybWFsaXplLW9wdGlvbnMuanNcIikscz1uKC8qISBlczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zL2luZGV4LmpzXCIpOyhlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGwsYyx1O3JldHVybiBhcmd1bWVudHMubGVuZ3RoPDJ8fFwic3RyaW5nXCIhPXR5cGVvZiBlPyhjPXQsdD1lLGU9bnVsbCk6Yz1hcmd1bWVudHNbMl0sbyhlKT8obj1zLmNhbGwoZSxcImNcIikscj1zLmNhbGwoZSxcImVcIiksbD1zLmNhbGwoZSxcIndcIikpOihuPWw9ITAscj0hMSksdT17dmFsdWU6dCxjb25maWd1cmFibGU6bixlbnVtZXJhYmxlOnIsd3JpdGFibGU6bH0sYz9pKGEoYyksdSk6dX0pLmdzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbCxjLHUsZDtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZT8odT1uLG49dCx0PWUsZT1udWxsKTp1PWFyZ3VtZW50c1szXSxvKHQpP3IodCk/byhuKT9yKG4pfHwodT1uLG49dm9pZCAwKTpuPXZvaWQgMDoodT10LHQ9bj12b2lkIDApOnQ9dm9pZCAwLG8oZSk/KGw9cy5jYWxsKGUsXCJjXCIpLGM9cy5jYWxsKGUsXCJlXCIpKToobD0hMCxjPSExKSxkPXtnZXQ6dCxzZXQ6bixjb25maWd1cmFibGU6bCxlbnVtZXJhYmxlOmN9LHU/aShhKHUpLGQpOmR9fSxcIi4vbm9kZV9tb2R1bGVzL2Rhbm11LmpzL2Rpc3QvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9kYW5tdS5qcy9kaXN0L2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7KGZ1bmN0aW9uKGUpe3ZhciBuLG8scixpLGE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX07d2luZG93LGk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihvKXtpZih0W29dKXJldHVybiB0W29dLmV4cG9ydHM7dmFyIHI9dFtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsbiksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxvKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6b30pfSxuLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1uKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT0odm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOmEoZSkpJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIG89T2JqZWN0LmNyZWF0ZShudWxsKTtpZihuLnIobyksT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciByIGluIGUpbi5kKG8scixmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLHIpKTtyZXR1cm4gb30sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCxcImFcIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD1cIlwiLG4obi5zPTIpfShbZnVuY3Rpb24oZSx0LG4pe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvLHI9KG89bigyMikpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfSxpPXt9O2kuZG9tT2JqPW5ldyByLmRlZmF1bHQsaS5jcmVhdGVEb209ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06XCJkaXZcIix0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIlwiLG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9LG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOlwiXCIscj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpO3JldHVybiByLmNsYXNzTmFtZT1vLHIuaW5uZXJIVE1MPXQsT2JqZWN0LmtleXMobikuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIG89dCxpPW5bdF07XCJ2aWRlb1wiPT09ZXx8XCJhdWRpb1wiPT09ZT9pJiZyLnNldEF0dHJpYnV0ZShvLGkpOnIuc2V0QXR0cmlidXRlKG8saSl9KSkscn0saS5oYXNDbGFzcz1mdW5jdGlvbihlLHQpe3JldHVybiBlLmNsYXNzTGlzdD9BcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGUuY2xhc3NMaXN0LChmdW5jdGlvbihlKXtyZXR1cm4gZT09PXR9KSk6ISFlLmNsYXNzTmFtZS5tYXRjaChuZXcgUmVnRXhwKFwiKFxcXFxzfF4pXCIrdCtcIihcXFxcc3wkKVwiKSl9LGkuYWRkQ2xhc3M9ZnVuY3Rpb24oZSx0KXtlLmNsYXNzTGlzdD90LnJlcGxhY2UoLyheXFxzK3xcXHMrJCkvZyxcIlwiKS5zcGxpdCgvXFxzKy9nKS5mb3JFYWNoKChmdW5jdGlvbih0KXt0JiZlLmNsYXNzTGlzdC5hZGQodCl9KSk6aS5oYXNDbGFzcyhlLHQpfHwoZS5jbGFzc05hbWUrPVwiIFwiK3QpfSxpLnJlbW92ZUNsYXNzPWZ1bmN0aW9uKGUsdCl7ZS5jbGFzc0xpc3Q/dC5zcGxpdCgvXFxzKy9nKS5mb3JFYWNoKChmdW5jdGlvbih0KXtlLmNsYXNzTGlzdC5yZW1vdmUodCl9KSk6aS5oYXNDbGFzcyhlLHQpJiZ0LnNwbGl0KC9cXHMrL2cpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuPW5ldyBSZWdFeHAoXCIoXFxcXHN8XilcIit0K1wiKFxcXFxzfCQpXCIpO2UuY2xhc3NOYW1lPWUuY2xhc3NOYW1lLnJlcGxhY2UobixcIiBcIil9KSl9LGkudG9nZ2xlQ2xhc3M9ZnVuY3Rpb24oZSx0KXt0LnNwbGl0KC9cXHMrL2cpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2kuaGFzQ2xhc3MoZSx0KT9pLnJlbW92ZUNsYXNzKGUsdCk6aS5hZGRDbGFzcyhlLHQpfSkpfSxpLmZpbmREb209ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06ZG9jdW1lbnQsdD1hcmd1bWVudHNbMV0sbj12b2lkIDA7dHJ5e249ZS5xdWVyeVNlbGVjdG9yKHQpfWNhdGNoKG8pe3Quc3RhcnRzV2l0aChcIiNcIikmJihuPWUuZ2V0RWxlbWVudEJ5SWQodC5zbGljZSgxKSkpfXJldHVybiBufSxpLmRlZXBDb3B5PWZ1bmN0aW9uKGUsdCl7aWYoXCJPYmplY3RcIj09PWkudHlwZU9mKHQpJiZcIk9iamVjdFwiPT09aS50eXBlT2YoZSkpcmV0dXJuIE9iamVjdC5rZXlzKHQpLmZvckVhY2goKGZ1bmN0aW9uKG4pe1wiT2JqZWN0XCIhPT1pLnR5cGVPZih0W25dKXx8dFtuXWluc3RhbmNlb2YgTm9kZT9cIkFycmF5XCI9PT1pLnR5cGVPZih0W25dKT9lW25dPVwiQXJyYXlcIj09PWkudHlwZU9mKGVbbl0pP2Vbbl0uY29uY2F0KHRbbl0pOnRbbl06ZVtuXT10W25dOmVbbl0/aS5kZWVwQ29weShlW25dLHRbbl0pOmVbbl09dFtuXX0pKSxlfSxpLnR5cGVPZj1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLm1hdGNoKC8oW15cXHMuKl0rKSg/PV0kKS9nKVswXX0saS5jb3B5RG9tPWZ1bmN0aW9uKGUpe2lmKGUmJjE9PT1lLm5vZGVUeXBlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUudGFnTmFtZSk7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZS5hdHRyaWJ1dGVzLChmdW5jdGlvbihlKXt0LnNldEF0dHJpYnV0ZShlLm5hbWUsZS52YWx1ZSl9KSksZS5pbm5lckhUTUwmJih0LmlubmVySFRNTD1lLmlubmVySFRNTCksdH1yZXR1cm5cIlwifSxpLmZvcm1hdFRpbWU9ZnVuY3Rpb24oZSl7dmFyIHQ9TWF0aC5mbG9vcihlKTtyZXR1cm4gMWUzKnQrKGUtdCl9LHQuZGVmYXVsdD1pLGUuZXhwb3J0cz10LmRlZmF1bHR9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1uKDEzKSgpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZSE9PW8mJm51bGwhPT1lfX0sZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1uKDMpfSxmdW5jdGlvbihlLHQsbil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG8scj0obz1uKDQpKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307bigyNiksdC5kZWZhdWx0PXIuZGVmYXVsdCxlLmV4cG9ydHM9dC5kZWZhdWx0fSxmdW5jdGlvbihlLHQsbil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKSxyPXMobig1KSksaT1zKG4oMjEpKSxhPXMobigwKSk7ZnVuY3Rpb24gcyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGw9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5jb25maWc9YS5kZWZhdWx0LmRlZXBDb3B5KHtvdmVybGFwOiExLGFyZWE6e3N0YXJ0OjAsZW5kOjF9LGxpdmU6ITEsY29tbWVudHM6W10sZGlyZWN0aW9uOlwicjJsXCJ9LHQpLHRoaXMuaGlkZUFycj1bXSwoMCxyLmRlZmF1bHQpKHRoaXMpO3ZhciBuPXRoaXM7aWYodGhpcy5jb25maWcuY29tbWVudHMuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5kdXJhdGlvbj1lLmR1cmF0aW9uPDVlMz81ZTM6ZS5kdXJhdGlvbixlLm1vZGV8fChlLm1vZGU9XCJzY3JvbGxcIil9KSksIXRoaXMuY29uZmlnLmNvbnRhaW5lcnx8MSE9PXRoaXMuY29uZmlnLmNvbnRhaW5lci5ub2RlVHlwZSlyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixcImNvbnRhaW5lciBpZCBjYW4ndCBiZSBlbXB0eVwiKSwhMTtpZih0aGlzLmNvbnRhaW5lcj10aGlzLmNvbmZpZy5jb250YWluZXIsdGhpcy5jb25maWcuY29udGFpbmVyU3R5bGUpe3ZhciBvPXRoaXMuY29uZmlnLmNvbnRhaW5lclN0eWxlO09iamVjdC5rZXlzKG8pLmZvckVhY2goKGZ1bmN0aW9uKGUpe24uY29udGFpbmVyLnN0eWxlW2VdPW9bZV19KSl9dGhpcy5saXZlPXRoaXMuY29uZmlnLmxpdmUsdGhpcy5wbGF5ZXI9dGhpcy5jb25maWcucGxheWVyLHRoaXMuZGlyZWN0aW9uPXRoaXMuY29uZmlnLmRpcmVjdGlvbixhLmRlZmF1bHQuYWRkQ2xhc3ModGhpcy5jb250YWluZXIsXCJkYW5tdVwiKSx0aGlzLmJ1bGxldEJ0bj1uZXcgaS5kZWZhdWx0KHRoaXMpLHRoaXMuZW1pdChcInJlYWR5XCIpfXJldHVybiBvKGUsW3trZXk6XCJzdGFydFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5idWxsZXRCdG4ubWFpbi5zdGFydCgpfX0se2tleTpcInBhdXNlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmJ1bGxldEJ0bi5tYWluLnBhdXNlKCl9fSx7a2V5OlwicGxheVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5idWxsZXRCdG4ubWFpbi5wbGF5KCl9fSx7a2V5Olwic3RvcFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5idWxsZXRCdG4ubWFpbi5zdG9wKCl9fSx7a2V5Olwic2VuZENvbW1lbnRcIix2YWx1ZTpmdW5jdGlvbihlKXtlJiZlLmlkJiZlLmR1cmF0aW9uJiYoZS5lbHx8ZS50eHQpJiYoZS5kdXJhdGlvbj1lLmR1cmF0aW9uPDVlMz81ZTM6ZS5kdXJhdGlvbix0aGlzLmJ1bGxldEJ0bi5tYWluLmRhdGEucHVzaChlKSl9fSx7a2V5Olwic2V0Q29tbWVudElEXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtlJiZ0JiYodGhpcy5idWxsZXRCdG4ubWFpbi5kYXRhLnNvbWUoKGZ1bmN0aW9uKG4pe3JldHVybiBuLmlkPT09ZSYmKG4uaWQ9dCwhMCl9KSksdGhpcy5idWxsZXRCdG4ubWFpbi5xdWV1ZS5zb21lKChmdW5jdGlvbihvKXtyZXR1cm4gby5pZD09PWUmJihvLmlkPXQsby5wYXVzZU1vdmUobiksby5zdGFydE1vdmUobiksITApfSkpKX19LHtrZXk6XCJzZXRDb21tZW50RHVyYXRpb25cIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2UmJnQmJih0PXQ8NWUzPzVlMzp0LHRoaXMuYnVsbGV0QnRuLm1haW4uZGF0YS5zb21lKChmdW5jdGlvbihuKXtyZXR1cm4gbi5pZD09PWUmJihuLmR1cmF0aW9uPXQsITApfSkpLHRoaXMuYnVsbGV0QnRuLm1haW4ucXVldWUuc29tZSgoZnVuY3Rpb24obyl7cmV0dXJuIG8uaWQ9PT1lJiYoby5kdXJhdGlvbj10LG8ucGF1c2VNb3ZlKG4pLG8uc3RhcnRNb3ZlKG4pLCEwKX0pKSl9fSx7a2V5Olwic2V0QWxsRHVyYXRpb25cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcInNjcm9sbFwiLHQ9YXJndW1lbnRzWzFdLG49dGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dCYmKHQ9dDw1ZTM/NWUzOnQsdGhpcy5idWxsZXRCdG4ubWFpbi5kYXRhLmZvckVhY2goKGZ1bmN0aW9uKG4pe2U9PT1uLm1vZGUmJihuLmR1cmF0aW9uPXQpfSkpLHRoaXMuYnVsbGV0QnRuLm1haW4ucXVldWUuZm9yRWFjaCgoZnVuY3Rpb24obyl7ZT09PW8ubW9kZSYmKG8uZHVyYXRpb249dCxvLnBhdXNlTW92ZShuKSxvLnN0YXJ0TW92ZShuKSl9KSkpfX0se2tleTpcImhpZGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcInNjcm9sbFwiO3RoaXMuaGlkZUFyci5pbmRleE9mKGUpPDAmJnRoaXMuaGlkZUFyci5wdXNoKGUpLHRoaXMuYnVsbGV0QnRuLm1haW4ucXVldWUuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gZT09PXQubW9kZXx8XCJjb2xvclwiPT09ZSYmdC5jb2xvcn0pKS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gZS5yZW1vdmUoKX0pKX19LHtrZXk6XCJzaG93XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06XCJzY3JvbGxcIix0PXRoaXMuaGlkZUFyci5pbmRleE9mKGUpO3Q+LTEmJnRoaXMuaGlkZUFyci5zcGxpY2UodCwxKX19LHtrZXk6XCJzZXREaXJlY3Rpb25cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcInIybFwiO3RoaXMuZW1pdChcImNoYW5nZURpcmVjdGlvblwiLGUpfX1dKSxlfSgpO3QuZGVmYXVsdD1sLGUuZXhwb3J0cz10LmRlZmF1bHR9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxyLGkscyxsLGMsdSxkPW4oNikscD1uKDIwKSxmPUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSxoPUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLGc9T2JqZWN0LmNyZWF0ZSx2PU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxtPU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLHk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxiPXtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMH07cj1mdW5jdGlvbihlLHQpe3ZhciBuLHI7cmV0dXJuIHAodCkscj10aGlzLG8uY2FsbCh0aGlzLGUsbj1mdW5jdGlvbigpe2kuY2FsbChyLGUsbiksZi5jYWxsKHQsdGhpcyxhcmd1bWVudHMpfSksbi5fX2VlT25jZUxpc3RlbmVyX189dCx0aGlzfSxsPXtvbjpvPWZ1bmN0aW9uKGUsdCl7dmFyIG47cmV0dXJuIHAodCkseS5jYWxsKHRoaXMsXCJfX2VlX19cIik/bj10aGlzLl9fZWVfXzoobj1iLnZhbHVlPWcobnVsbCksdih0aGlzLFwiX19lZV9fXCIsYiksYi52YWx1ZT1udWxsKSxuW2VdP1wib2JqZWN0XCI9PWEobltlXSk/bltlXS5wdXNoKHQpOm5bZV09W25bZV0sdF06bltlXT10LHRoaXN9LG9uY2U6cixvZmY6aT1mdW5jdGlvbihlLHQpe3ZhciBuLG8scixpO2lmKHAodCksIXkuY2FsbCh0aGlzLFwiX19lZV9fXCIpKXJldHVybiB0aGlzO2lmKCEobj10aGlzLl9fZWVfXylbZV0pcmV0dXJuIHRoaXM7aWYoXCJvYmplY3RcIj09YShvPW5bZV0pKWZvcihpPTA7cj1vW2ldOysraSlyIT09dCYmci5fX2VlT25jZUxpc3RlbmVyX18hPT10fHwoMj09PW8ubGVuZ3RoP25bZV09b1tpPzA6MV06by5zcGxpY2UoaSwxKSk7ZWxzZSBvIT09dCYmby5fX2VlT25jZUxpc3RlbmVyX18hPT10fHxkZWxldGUgbltlXTtyZXR1cm4gdGhpc30sZW1pdDpzPWZ1bmN0aW9uKGUpe3ZhciB0LG4sbyxyLGk7aWYoeS5jYWxsKHRoaXMsXCJfX2VlX19cIikmJihyPXRoaXMuX19lZV9fW2VdKSlpZihcIm9iamVjdFwiPT0odm9pZCAwPT09cj9cInVuZGVmaW5lZFwiOmEocikpKXtmb3Iobj1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KG4tMSksdD0xO3Q8bjsrK3QpaVt0LTFdPWFyZ3VtZW50c1t0XTtmb3Iocj1yLnNsaWNlKCksdD0wO289clt0XTsrK3QpZi5jYWxsKG8sdGhpcyxpKX1lbHNlIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDE6aC5jYWxsKHIsdGhpcyk7YnJlYWs7Y2FzZSAyOmguY2FsbChyLHRoaXMsYXJndW1lbnRzWzFdKTticmVhaztjYXNlIDM6aC5jYWxsKHIsdGhpcyxhcmd1bWVudHNbMV0sYXJndW1lbnRzWzJdKTticmVhaztkZWZhdWx0OmZvcihuPWFyZ3VtZW50cy5sZW5ndGgsaT1uZXcgQXJyYXkobi0xKSx0PTE7dDxuOysrdClpW3QtMV09YXJndW1lbnRzW3RdO2YuY2FsbChyLHRoaXMsaSl9fX0sYz17b246ZChvKSxvbmNlOmQociksb2ZmOmQoaSksZW1pdDpkKHMpfSx1PW0oe30sYyksZS5leHBvcnRzPXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/Zyh1KTptKE9iamVjdChlKSxjKX0sdC5tZXRob2RzPWx9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1uKDcpLHI9bigxNSksaT1uKDE2KSxhPW4oMTcpOyhlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgbixpLHMsbCxjO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPDJ8fFwic3RyaW5nXCIhPXR5cGVvZiBlPyhsPXQsdD1lLGU9bnVsbCk6bD1hcmd1bWVudHNbMl0sbnVsbD09ZT8obj1zPSEwLGk9ITEpOihuPWEuY2FsbChlLFwiY1wiKSxpPWEuY2FsbChlLFwiZVwiKSxzPWEuY2FsbChlLFwid1wiKSksYz17dmFsdWU6dCxjb25maWd1cmFibGU6bixlbnVtZXJhYmxlOmksd3JpdGFibGU6c30sbD9vKHIobCksYyk6Y30pLmdzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcyxsLGMsdTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZT8oYz1uLG49dCx0PWUsZT1udWxsKTpjPWFyZ3VtZW50c1szXSxudWxsPT10P3Q9dm9pZCAwOmkodCk/bnVsbD09bj9uPXZvaWQgMDppKG4pfHwoYz1uLG49dm9pZCAwKTooYz10LHQ9bj12b2lkIDApLG51bGw9PWU/KHM9ITAsbD0hMSk6KHM9YS5jYWxsKGUsXCJjXCIpLGw9YS5jYWxsKGUsXCJlXCIpKSx1PXtnZXQ6dCxzZXQ6bixjb25maWd1cmFibGU6cyxlbnVtZXJhYmxlOmx9LGM/byhyKGMpLHUpOnV9fSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPW4oOCkoKT9PYmplY3QuYXNzaWduOm4oOSl9LGZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgZSx0PU9iamVjdC5hc3NpZ247cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHQoZT17Zm9vOlwicmF6XCJ9LHtiYXI6XCJkd2FcIn0se3Ryenk6XCJ0cnp5XCJ9KSxlLmZvbytlLmJhcitlLnRyenk9PT1cInJhemR3YXRyenlcIil9fSxmdW5jdGlvbihlLHQsbil7dmFyIG89bigxMCkscj1uKDE0KSxpPU1hdGgubWF4O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBuLGEscyxsPWkoYXJndW1lbnRzLmxlbmd0aCwyKTtmb3IoZT1PYmplY3QocihlKSkscz1mdW5jdGlvbihvKXt0cnl7ZVtvXT10W29dfWNhdGNoKGUpe258fChuPWUpfX0sYT0xO2E8bDsrK2EpdD1hcmd1bWVudHNbYV0sbyh0KS5mb3JFYWNoKHMpO2lmKHZvaWQgMCE9PW4pdGhyb3cgbjtyZXR1cm4gZX19LGZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9bigxMSkoKT9PYmplY3Qua2V5czpuKDEyKX0sZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1mdW5jdGlvbigpe3RyeXtyZXR1cm4gT2JqZWN0LmtleXMoXCJwcmltaXRpdmVcIiksITB9Y2F0Y2goZSl7cmV0dXJuITF9fX0sZnVuY3Rpb24oZSx0LG4pe3ZhciBvPW4oMSkscj1PYmplY3Qua2V5cztlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHIobyhlKT9PYmplY3QoZSk6ZSl9fSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7fX0sZnVuY3Rpb24oZSx0LG4pe3ZhciBvPW4oMSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFvKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlIG51bGwgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LG4pe3ZhciBvPW4oMSkscj1BcnJheS5wcm90b3R5cGUuZm9yRWFjaCxpPU9iamVjdC5jcmVhdGU7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PWkobnVsbCk7cmV0dXJuIHIuY2FsbChhcmd1bWVudHMsKGZ1bmN0aW9uKGUpe28oZSkmJmZ1bmN0aW9uKGUsdCl7dmFyIG47Zm9yKG4gaW4gZSl0W25dPWVbbl19KE9iamVjdChlKSx0KX0pKSx0fX0sZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfX0sZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1uKDE4KSgpP1N0cmluZy5wcm90b3R5cGUuY29udGFpbnM6bigxOSl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1cInJhemR3YXRyenlcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBvLmNvbnRhaW5zJiYhMD09PW8uY29udGFpbnMoXCJkd2FcIikmJiExPT09by5jb250YWlucyhcImZvb1wiKX19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1TdHJpbmcucHJvdG90eXBlLmluZGV4T2Y7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBvLmNhbGwodGhpcyxlLGFyZ3VtZW50c1sxXSk+LTF9fSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LG4pe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgbz10W25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLmtleSxvKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixvKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxvJiZlKHQsbyksdH19KCkscj1hKG4oMCkpLGk9YShuKDIzKSk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5kYW5tdT10LHRoaXMubWFpbj1uZXcgaS5kZWZhdWx0KHQpLHQuY29uZmlnLmRlZmF1bHRPZmZ8fHRoaXMubWFpbi5zdGFydCgpfXJldHVybiBvKGUsW3trZXk6XCJjcmVhdGVTd2l0Y2hcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPSEoYXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0pfHxhcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuc3dpdGNoQnRuPXIuZGVmYXVsdC5jcmVhdGVEb20oXCJkay1zd2l0Y2hcIiwnPHNwYW4gY2xhc3M9XCJ0eHRcIj7lvLk8L3NwYW4+Jyx7fSxcImRhbm11LXN3aXRjaCBcIisoZT9cImRhbm11LXN3aXRjaC1hY3RpdmVcIjpcIlwiKSksdGhpcy5zd2l0Y2hCdG59fV0pLGV9KCk7dC5kZWZhdWx0PXMsZS5leHBvcnRzPXQuZGVmYXVsdH0sZnVuY3Rpb24oZSx0LG4pe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgbz10W25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLmtleSxvKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixvKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxvJiZlKHQsbyksdH19KCkscj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0PXtpbml0RE9NOmZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIil9LGluaXRTaXplOjEwfSx0aGlzLmluaXQodCl9cmV0dXJuIG8oZSxbe2tleTpcImluaXRcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLmlkbGVMaXN0PVtdLHRoaXMudXNpbmdMaXN0PVtdLHRoaXMuX2lkPTAsdGhpcy5vcHRpb25zPWUsdGhpcy5fZXhwYW5kKGUuaW5pdFNpemUpfX0se2tleTpcInVzZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5pZGxlTGlzdC5sZW5ndGh8fHRoaXMuX2V4cGFuZCgxKTt2YXIgZT10aGlzLmlkbGVMaXN0LnNoaWZ0KCk7cmV0dXJuIHRoaXMudXNpbmdMaXN0LnB1c2goZSksZX19LHtrZXk6XCJ1bnVzZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMudXNpbmdMaXN0LmluZGV4T2YoZSk7dDwwfHwodGhpcy51c2luZ0xpc3Quc3BsaWNlKHQsMSksZS5pbm5lckhUTUw9XCJcIixlLnRleHRjb250ZW50PVwiXCIsZS5zdHlsZT1cIlwiLHRoaXMuaWRsZUxpc3QucHVzaChlKSl9fSx7a2V5OlwiX2V4cGFuZFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZTt0KyspdGhpcy5pZGxlTGlzdC5wdXNoKHRoaXMub3B0aW9ucy5pbml0RE9NKHRoaXMuX2lkKyspKX19XSksZX0oKTt0LmRlZmF1bHQ9cixlLmV4cG9ydHM9dC5kZWZhdWx0fSxmdW5jdGlvbihlLHQsbil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKSxyPXMobigyNCkpLGk9cyhuKDI1KSksYT1zKG4oMCkpO2Z1bmN0aW9uIHMoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBsPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuZGFubXU9dCx0aGlzLmNvbnRhaW5lcj10LmNvbnRhaW5lcix0aGlzLmNoYW5uZWw9bmV3IHIuZGVmYXVsdCh0KSx0aGlzLmRhdGE9W10uY29uY2F0KHQuY29uZmlnLmNvbW1lbnRzKSx0aGlzLnF1ZXVlPVtdLHRoaXMudGltZXI9bnVsbCx0aGlzLnJldHJ5VGltZXI9bnVsbCx0aGlzLmludGVydmFsPTJlMyx0aGlzLnN0YXR1cz1cImlkbGVcIix0Lm9uKFwiYnVsbGV0X3JlbW92ZVwiLHRoaXMudXBkYXRlUXVldWUuYmluZCh0aGlzKSk7dmFyIG49dGhpczt0aGlzLmRhbm11Lm9uKFwiY2hhbmdlRGlyZWN0aW9uXCIsKGZ1bmN0aW9uKGUpe24uZGFubXUuZGlyZWN0aW9uPWV9KSl9cmV0dXJuIG8oZSxbe2tleTpcInVwZGF0ZVF1ZXVlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0LnF1ZXVlLnNvbWUoKGZ1bmN0aW9uKG4sbyl7cmV0dXJuIG4uaWQ9PT1lLmJ1bGxldC5pZCYmKHQucXVldWUuc3BsaWNlKG8sMSksITApfSkpfX0se2tleTpcImluaXRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3R8fCh0PXRoaXMpLHQuZGF0YS5zb3J0KChmdW5jdGlvbihlLHQpe3JldHVybiBlLnN0YXJ0LXQuc3RhcnR9KSksdC5yZXRyeVRpbWVyfHwodC5yZXRyeVRpbWVyPXNldEludGVydmFsKChmdW5jdGlvbigpe3QucmVhZERhdGEoKSx0LmRhdGFIYW5kbGUoKX0pLHQuaW50ZXJ2YWwtMWUzKSl9fSx7a2V5Olwic3RhcnRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc3RhdHVzPVwicGxheWluZ1wiLHRoaXMucXVldWU9W10sdGhpcy5jb250YWluZXIuaW5uZXJIVE1MPVwiXCIsdGhpcy5jaGFubmVsLnJlc2V0V2l0aENiKHRoaXMuaW5pdCx0aGlzKX19LHtrZXk6XCJzdG9wXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnN0YXR1cz1cImNsb3NlZFwiLGNsZWFySW50ZXJ2YWwodGhpcy5yZXRyeVRpbWVyKSx0aGlzLnJldHJ5VGltZXI9bnVsbCx0aGlzLmNoYW5uZWwucmVzZXQoKSx0aGlzLnF1ZXVlPVtdLHRoaXMuY29udGFpbmVyLmlubmVySFRNTD1cIlwifX0se2tleTpcInBsYXlcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc3RhdHVzPVwicGxheWluZ1wiO3ZhciBlPXRoaXMuY2hhbm5lbC5jaGFubmVscyx0PXRoaXMuZGFubXUuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2UmJmUubGVuZ3RoPjAmJltcInNjcm9sbFwiLFwidG9wXCIsXCJib3R0b21cIl0uZm9yRWFjaCgoZnVuY3Rpb24obil7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspZVtvXS5xdWV1ZVtuXS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnJlc2l6ZWR8fChlLnN0YXJ0TW92ZSh0KSxlLnJlc2l6ZWQ9ITApfSkpO2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWVbcl0ucXVldWVbbl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5yZXNpemVkPSExfSkpfSkpfX0se2tleTpcInBhdXNlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnN0YXR1cz1cInBhdXNlZFwiO3ZhciBlPXRoaXMuY2hhbm5lbC5jaGFubmVscyx0PXRoaXMuZGFubXUuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2UmJmUubGVuZ3RoPjAmJltcInNjcm9sbFwiLFwidG9wXCIsXCJib3R0b21cIl0uZm9yRWFjaCgoZnVuY3Rpb24obil7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspZVtvXS5xdWV1ZVtuXS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnBhdXNlTW92ZSh0KX0pKX0pKX19LHtrZXk6XCJkYXRhSGFuZGxlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO1wicGF1c2VkXCIhPT10aGlzLnN0YXR1cyYmXCJjbG9zZWRcIiE9PXRoaXMuc3RhdHVzJiZlLnF1ZXVlLmxlbmd0aCYmZS5xdWV1ZS5mb3JFYWNoKChmdW5jdGlvbih0KXtcIndhaXRpbmdcIiE9PXQuc3RhdHVzJiZcInBhdXNlZFwiIT09dC5zdGF0dXN8fHQuc3RhcnRNb3ZlKGUuY2hhbm5lbC5jb250YWluZXJQb3MpfSkpfX0se2tleTpcInJlYWREYXRhXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5kYW5tdSxuPTA7dC5wbGF5ZXImJnQucGxheWVyLmN1cnJlbnRUaW1lJiYobj1hLmRlZmF1bHQuZm9ybWF0VGltZSh0LnBsYXllci5jdXJyZW50VGltZSkpO3ZhciBvPXZvaWQgMCxyPWUuaW50ZXJ2YWwscz1lLmNoYW5uZWwsbD12b2lkIDA7dC5wbGF5ZXI/KGw9ZS5kYXRhLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIXQuc3RhcnQmJmUuZGFubXUuaGlkZUFyci5pbmRleE9mKHQubW9kZSk8MCYmKCF0LmNvbG9yfHxlLmRhbm11LmhpZGVBcnIuaW5kZXhPZihcImNvbG9yXCIpPDApJiYodC5zdGFydD1uKSxlLmRhbm11LmhpZGVBcnIuaW5kZXhPZih0Lm1vZGUpPDAmJighdC5jb2xvcnx8ZS5kYW5tdS5oaWRlQXJyLmluZGV4T2YoXCJjb2xvclwiKTwwKSYmdC5zdGFydC1yPD1uJiZuPD10LnN0YXJ0K3J9KSksdC5saXZlJiYoZS5kYXRhPWUuZGF0YS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnN0YXJ0fHwoZS5zdGFydD1uKSxlLnN0YXJ0Pm4tMypyfSkpKSk6bD1lLmRhdGEuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gZS5kYW5tdS5oaWRlQXJyLmluZGV4T2YodC5tb2RlKTwwJiYoIXQuY29sb3J8fGUuZGFubXUuaGlkZUFyci5pbmRleE9mKFwiY29sb3JcIik8MCl9KSksbC5sZW5ndGg+MCYmbC5mb3JFYWNoKChmdW5jdGlvbihuKXsobz1uZXcgaS5kZWZhdWx0KHQsbikpLmF0dGFjaCgpLHMuYWRkQnVsbGV0KG8pLnJlc3VsdD8oZS5xdWV1ZS5wdXNoKG8pLG8udG9wSW5pdCgpKTpvLmRldGFjaCgpfSkpfX1dKSxlfSgpO3QuZGVmYXVsdD1sLGUuZXhwb3J0cz10LmRlZmF1bHR9LGZ1bmN0aW9uKGUsdCxuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpLHI9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5kYW5tdT10LHRoaXMucmVzZXQoKTt2YXIgbj10aGlzO3RoaXMuZGFubXUub24oXCJidWxsZXRfcmVtb3ZlXCIsKGZ1bmN0aW9uKGUpe24ucmVtb3ZlQnVsbGV0KGUuYnVsbGV0KX0pKSx0aGlzLmRpcmVjdGlvbj10LmRpcmVjdGlvbix0aGlzLmRhbm11Lm9uKFwiY2hhbmdlRGlyZWN0aW9uXCIsKGZ1bmN0aW9uKGUpe24uZGlyZWN0aW9uPWV9KSksdGhpcy5jb250YWluZXJQb3M9dGhpcy5kYW5tdS5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksdGhpcy5jb250YWluZXJXaWR0aD10aGlzLmNvbnRhaW5lclBvcy53aWR0aCx0aGlzLmNvbnRhaW5lckhlaWdodD10aGlzLmNvbnRhaW5lclBvcy5oZWlnaHQsdGhpcy5jb250YWluZXJMZWZ0PXRoaXMuY29udGFpbmVyUG9zLmxlZnQsdGhpcy5jb250YWluZXJSaWdodD10aGlzLmNvbnRhaW5lclBvcy5yaWdodCx0aGlzLmRhbm11LmJ1bGxldFJlc2l6ZVRpbWVyPXNldEludGVydmFsKChmdW5jdGlvbigpe24uY29udGFpbmVyUG9zPW4uZGFubXUuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLChNYXRoLmFicyhuLmNvbnRhaW5lclBvcy53aWR0aC1uLmNvbnRhaW5lcldpZHRoKT49Mnx8TWF0aC5hYnMobi5jb250YWluZXJQb3MuaGVpZ2h0LW4uY29udGFpbmVySGVpZ2h0KT49Mnx8TWF0aC5hYnMobi5jb250YWluZXJQb3MubGVmdC1uLmNvbnRhaW5lckxlZnQpPj0yfHxNYXRoLmFicyhuLmNvbnRhaW5lclBvcy5yaWdodC1uLmNvbnRhaW5lclJpZ2h0KT49MikmJihuLmNvbnRhaW5lcldpZHRoPW4uY29udGFpbmVyUG9zLndpZHRoLG4uY29udGFpbmVySGVpZ2h0PW4uY29udGFpbmVyUG9zLmhlaWdodCxuLmNvbnRhaW5lckxlZnQ9bi5jb250YWluZXJQb3MubGVmdCxuLmNvbnRhaW5lclJpZ2h0PW4uY29udGFpbmVyUG9zLnJpZ2h0LG4ucmVzaXplKCEwKSl9KSw1MCl9cmV0dXJuIG8oZSxbe2tleTpcInJlc2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0mJmFyZ3VtZW50c1swXSx0PXRoaXMuZGFubXUuY29udGFpbmVyLG49dGhpcztzZXRUaW1lb3V0KChmdW5jdGlvbigpe24uZGFubXUuYnVsbGV0QnRuLm1haW4uZGF0YSYmbi5kYW5tdS5idWxsZXRCdG4ubWFpbi5kYXRhLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UuYm9va0NoYW5uZWxJZCYmZGVsZXRlIGUuYm9va0NoYW5uZWxJZH0pKTt2YXIgbz10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO24ud2lkdGg9by53aWR0aCxuLmhlaWdodD1vLmhlaWdodCxuLmRhbm11LmNvbmZpZy5hcmVhJiZuLmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0Pj0wJiZuLmRhbm11LmNvbmZpZy5hcmVhLmVuZD49bi5kYW5tdS5jb25maWcuYXJlYS5zdGFydCYmKFwiYjJ0XCI9PT1uLmRpcmVjdGlvbj9uLndpZHRoPW4ud2lkdGgqKG4uZGFubXUuY29uZmlnLmFyZWEuZW5kLW4uZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpOm4uaGVpZ2h0PW4uaGVpZ2h0KihuLmRhbm11LmNvbmZpZy5hcmVhLmVuZC1uLmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0KSksbi5jb250YWluZXI9dDt2YXIgcixpPS9tb2JpbGUvZ2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KT8xMDoxMjtyPVwiYjJ0XCI9PT1uLmRpcmVjdGlvbj9NYXRoLmZsb29yKG4ud2lkdGgvaSk6TWF0aC5mbG9vcihuLmhlaWdodC9pKTtmb3IodmFyIGE9W10scz0wO3M8cjtzKyspYVtzXT17aWQ6cyxxdWV1ZTp7c2Nyb2xsOltdLHRvcDpbXSxib3R0b206W119LG9wZXJhdGluZzp7c2Nyb2xsOiExLHRvcDohMSxib3R0b206ITF9LGJvb2tJZDp7fX07aWYobi5jaGFubmVscyYmbi5jaGFubmVscy5sZW5ndGg8PWEubGVuZ3RoKXtmb3IodmFyIGw9ZnVuY3Rpb24odCl7YVt0XT17aWQ6dCxxdWV1ZTp7c2Nyb2xsOltdLHRvcDpbXSxib3R0b206W119LG9wZXJhdGluZzp7c2Nyb2xsOiExLHRvcDohMSxib3R0b206ITF9LGJvb2tJZDp7fX0sW1wic2Nyb2xsXCIsXCJ0b3BcIl0uZm9yRWFjaCgoZnVuY3Rpb24obyl7bi5jaGFubmVsc1t0XS5xdWV1ZVtvXS5mb3JFYWNoKChmdW5jdGlvbihyKXtyLmVsJiYoYVt0XS5xdWV1ZVtvXS5wdXNoKHIpLHIucmVzaXplZHx8KHIucGF1c2VNb3ZlKG4uY29udGFpbmVyUG9zLGUpLHIuc3RhcnRNb3ZlKG4uY29udGFpbmVyUG9zKSxyLnJlc2l6ZWQ9ITApKX0pKX0pKSxuLmNoYW5uZWxzW3RdLnF1ZXVlLmJvdHRvbS5mb3JFYWNoKChmdW5jdGlvbihvKXtpZihvLmVsKXtpZihhW3QrYS5sZW5ndGgtbi5jaGFubmVscy5sZW5ndGhdLnF1ZXVlLmJvdHRvbS5wdXNoKG8pLG8uY2hhbm5lbF9pZFswXStvLmNoYW5uZWxfaWRbMV0tMT09PXQpe3ZhciByPVtdLmNvbmNhdChvLmNoYW5uZWxfaWQpO28uY2hhbm5lbF9pZD1bclswXS1uLmNoYW5uZWxzLmxlbmd0aCthLmxlbmd0aCxyWzFdXSxvLnRvcD1vLmNoYW5uZWxfaWRbMF0qaSxuLmRhbm11LmNvbmZpZy5hcmVhJiZuLmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0JiYoby50b3ArPW4uY29udGFpbmVySGVpZ2h0Km4uZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpLG8udG9wSW5pdCgpfW8ucmVzaXplZHx8KG8ucGF1c2VNb3ZlKG4uY29udGFpbmVyUG9zLGUpLG8uc3RhcnRNb3ZlKG4uY29udGFpbmVyUG9zKSxvLnJlc2l6ZWQ9ITApfX0pKX0sYz0wO2M8bi5jaGFubmVscy5sZW5ndGg7YysrKWwoYyk7Zm9yKHZhciB1PWZ1bmN0aW9uKGUpe1tcInNjcm9sbFwiLFwidG9wXCIsXCJib3R0b21cIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7YVtlXS5xdWV1ZVt0XS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnJlc2l6ZWQ9ITF9KSl9KSl9LGQ9MDtkPGEubGVuZ3RoO2QrKyl1KGQpO24uY2hhbm5lbHM9YSxcImIydFwiPT09bi5kaXJlY3Rpb24/bi5jaGFubmVsV2lkdGg9aTpuLmNoYW5uZWxIZWlnaHQ9aX1lbHNlIGlmKG4uY2hhbm5lbHMmJm4uY2hhbm5lbHMubGVuZ3RoPmEubGVuZ3RoKXtmb3IodmFyIHA9ZnVuY3Rpb24odCl7YVt0XT17aWQ6dCxxdWV1ZTp7c2Nyb2xsOltdLHRvcDpbXSxib3R0b206W119LG9wZXJhdGluZzp7c2Nyb2xsOiExLHRvcDohMSxib3R0b206ITF9LGJvb2tJZDp7fX0sW1wic2Nyb2xsXCIsXCJ0b3BcIixcImJvdHRvbVwiXS5mb3JFYWNoKChmdW5jdGlvbihvKXtpZihcInRvcFwiPT09byYmdD5NYXRoLmZsb29yKGEubGVuZ3RoLzIpKTtlbHNlIGlmKFwiYm90dG9tXCI9PT1vJiZ0PD1NYXRoLmZsb29yKGEubGVuZ3RoLzIpKTtlbHNle3ZhciByPVwiYm90dG9tXCI9PT1vP3QtYS5sZW5ndGgrbi5jaGFubmVscy5sZW5ndGg6dDtuLmNoYW5uZWxzW3JdLnF1ZXVlW29dLmZvckVhY2goKGZ1bmN0aW9uKHMsbCl7aWYocy5lbCl7aWYoYVt0XS5xdWV1ZVtvXS5wdXNoKHMpLFwiYm90dG9tXCI9PT1vJiZzLmNoYW5uZWxfaWRbMF0rcy5jaGFubmVsX2lkWzFdLTE9PT1yKXt2YXIgYz1bXS5jb25jYXQocy5jaGFubmVsX2lkKTtzLmNoYW5uZWxfaWQ9W2NbMF0tbi5jaGFubmVscy5sZW5ndGgrYS5sZW5ndGgsY1sxXV0scy50b3A9cy5jaGFubmVsX2lkWzBdKmksbi5kYW5tdS5jb25maWcuYXJlYSYmbi5kYW5tdS5jb25maWcuYXJlYS5zdGFydCYmKHMudG9wKz1uLmNvbnRhaW5lckhlaWdodCpuLmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0KSxzLnRvcEluaXQoKX1zLnJlc2l6ZWR8fChzLnBhdXNlTW92ZShuLmNvbnRhaW5lclBvcyxlKSxzLnN0YXJ0TW92ZShuLmNvbnRhaW5lclBvcykscy5yZXNpemVkPSEwKX1uLmNoYW5uZWxzW3JdLnF1ZXVlW29dLnNwbGljZShsLDEpfSkpfX0pKX0sZj0wO2Y8YS5sZW5ndGg7ZisrKXAoZik7Zm9yKHZhciBoPWZ1bmN0aW9uKGUpe1tcInNjcm9sbFwiLFwidG9wXCIsXCJib3R0b21cIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7bi5jaGFubmVsc1tlXS5xdWV1ZVt0XS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnBhdXNlTW92ZShuLmNvbnRhaW5lclBvcyksZS5yZW1vdmUoKX0pKX0pKX0sZz1hLmxlbmd0aDtnPG4uY2hhbm5lbHMubGVuZ3RoO2crKyloKGcpO2Zvcih2YXIgdj1mdW5jdGlvbihlKXtbXCJzY3JvbGxcIixcInRvcFwiLFwiYm90dG9tXCJdLmZvckVhY2goKGZ1bmN0aW9uKHQpe2FbZV0ucXVldWVbdF0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5yZXNpemVkPSExfSkpfSkpfSxtPTA7bTxhLmxlbmd0aDttKyspdihtKTtuLmNoYW5uZWxzPWEsXCJiMnRcIj09PW4uZGlyZWN0aW9uP24uY2hhbm5lbFdpZHRoPWk6bi5jaGFubmVsSGVpZ2h0PWl9fSksMTApfX0se2tleTpcImFkZEJ1bGxldFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZGFubXUsbj10aGlzLmNoYW5uZWxzLG89dm9pZCAwLHI9dm9pZCAwLGk9dm9pZCAwO2lmKFwiYjJ0XCI9PT10aGlzLmRpcmVjdGlvbj8ocj10aGlzLmNoYW5uZWxXaWR0aCxpPU1hdGguY2VpbChlLndpZHRoL3IpKToobz10aGlzLmNoYW5uZWxIZWlnaHQsaT1NYXRoLmNlaWwoZS5oZWlnaHQvbykpLGk+bi5sZW5ndGgpcmV0dXJue3Jlc3VsdDohMSxtZXNzYWdlOlwiZXhjZWVkIGNoYW5uZWxzLmxlbmd0aCwgb2NjdXB5PVwiK2krXCIsY2hhbm5lbHNTaXplPVwiK24ubGVuZ3RofTtmb3IodmFyIGE9ITAscz12b2lkIDAsbD0tMSxjPTAsdT1uLmxlbmd0aDtjPHU7YysrKWlmKG5bY10ucXVldWVbZS5tb2RlXS5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4gdC5pZD09PWUuaWR9KSkpcmV0dXJue3Jlc3VsdDohMSxtZXNzYWdlOlwiZXhzaXRlZCwgY2hhbm5lbE9yZGVyPVwiK2MrXCIsZGFubXVfaWQ9XCIrZS5pZH07aWYoXCJzY3JvbGxcIj09PWUubW9kZSlmb3IodmFyIGQ9MCxwPW4ubGVuZ3RoLWk7ZDw9cDtkKyspe2E9ITA7Zm9yKHZhciBmPWQ7ZjxkK2k7ZisrKXtpZigocz1uW2ZdKS5vcGVyYXRpbmcuc2Nyb2xsKXthPSExO2JyZWFrfWlmKChzLmJvb2tJZC5zY3JvbGx8fGUucHJpb3IpJiZzLmJvb2tJZC5zY3JvbGwhPT1lLmlkKXthPSExO2JyZWFrfXMub3BlcmF0aW5nLnNjcm9sbD0hMDt2YXIgaD1zLnF1ZXVlLnNjcm9sbFswXTtpZihoKXt2YXIgZz1oLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2lmKFwiYjJ0XCI9PT10aGlzLmRpcmVjdGlvbil7aWYoZy5ib3R0b20+dGhpcy5jb250YWluZXJQb3MuYm90dG9tKXthPSExLHMub3BlcmF0aW5nLnNjcm9sbD0hMTticmVha319ZWxzZSBpZihnLnJpZ2h0PnRoaXMuY29udGFpbmVyUG9zLnJpZ2h0KXthPSExLHMub3BlcmF0aW5nLnNjcm9sbD0hMTticmVha312YXIgdixtPXZvaWQgMCx5PXZvaWQgMCxiPXZvaWQgMCx4PXZvaWQgMDtpZihcImIydFwiPT09dGhpcy5kaXJlY3Rpb24/KHk9KGcudG9wLXRoaXMuY29udGFpbmVyUG9zLnRvcCtnLmhlaWdodCkvKG09KHRoaXMuY29udGFpbmVyUG9zLmhlaWdodCtnLmhlaWdodCkvaC5kdXJhdGlvbiksYj10aGlzLmNvbnRhaW5lclBvcy5oZWlnaHQseD0odGhpcy5jb250YWluZXJQb3MuaGVpZ2h0K2UuaGVpZ2h0KS9lLmR1cmF0aW9uKTooeT0oZy5sZWZ0LXRoaXMuY29udGFpbmVyUG9zLmxlZnQrZy53aWR0aCkvKG09KHRoaXMuY29udGFpbmVyUG9zLndpZHRoK2cud2lkdGgpL2guZHVyYXRpb24pLGI9dGhpcy5jb250YWluZXJQb3Mud2lkdGgseD0odGhpcy5jb250YWluZXJQb3Mud2lkdGgrZS53aWR0aCkvZS5kdXJhdGlvbiksdj1iL3gsdC5jb25maWcuYk9mZnNldHx8KHQuY29uZmlnLmJPZmZzZXQ9MCksbTx4JiZ5K3QuY29uZmlnLmJPZmZzZXQ+dil7YT0hMSxzLm9wZXJhdGluZy5zY3JvbGw9ITE7YnJlYWt9fXMub3BlcmF0aW5nLnNjcm9sbD0hMX1pZihhKXtsPWQ7YnJlYWt9fWVsc2UgaWYoXCJ0b3BcIj09PWUubW9kZSlmb3IodmFyIHc9MCxfPW4ubGVuZ3RoLWk7dzw9Xzt3Kyspe2E9ITA7Zm9yKHZhciBrPXc7azx3K2k7aysrKXtpZihrPk1hdGguZmxvb3Iobi5sZW5ndGgvMikpe2E9ITE7YnJlYWt9aWYoKHM9bltrXSkub3BlcmF0aW5nW2UubW9kZV0pe2E9ITE7YnJlYWt9aWYoKHMuYm9va0lkW2UubW9kZV18fGUucHJpb3IpJiZzLmJvb2tJZFtlLm1vZGVdIT09ZS5pZCl7YT0hMTticmVha31pZihzLm9wZXJhdGluZ1tlLm1vZGVdPSEwLHMucXVldWVbZS5tb2RlXS5sZW5ndGg+MCl7YT0hMSxzLm9wZXJhdGluZ1tlLm1vZGVdPSExO2JyZWFrfXMub3BlcmF0aW5nW2UubW9kZV09ITF9aWYoYSl7bD13O2JyZWFrfX1lbHNlIGlmKFwiYm90dG9tXCI9PT1lLm1vZGUpZm9yKHZhciBFPW4ubGVuZ3RoLWk7RT49MDtFLS0pe2E9ITA7Zm9yKHZhciBDPUU7QzxFK2k7QysrKXtpZihDPD1NYXRoLmZsb29yKG4ubGVuZ3RoLzIpKXthPSExO2JyZWFrfWlmKChzPW5bQ10pLm9wZXJhdGluZ1tlLm1vZGVdKXthPSExO2JyZWFrfWlmKChzLmJvb2tJZFtlLm1vZGVdfHxlLnByaW9yKSYmcy5ib29rSWRbZS5tb2RlXSE9PWUuaWQpe2E9ITE7YnJlYWt9aWYocy5vcGVyYXRpbmdbZS5tb2RlXT0hMCxzLnF1ZXVlW2UubW9kZV0ubGVuZ3RoPjApe2E9ITEscy5vcGVyYXRpbmdbZS5tb2RlXT0hMTticmVha31zLm9wZXJhdGluZ1tlLm1vZGVdPSExfWlmKGEpe2w9RTticmVha319aWYoLTEhPT1sKXtmb3IodmFyIFM9bCxQPWwraTtTPFA7UysrKShzPW5bU10pLm9wZXJhdGluZ1tlLm1vZGVdPSEwLHMucXVldWVbZS5tb2RlXS51bnNoaWZ0KGUpLGUucHJpb3ImJmRlbGV0ZSBzLmJvb2tJZFtlLm1vZGVdLHMub3BlcmF0aW5nW2UubW9kZV09ITE7cmV0dXJuIGUucHJpb3ImJihkZWxldGUgZS5ib29rQ2hhbm5lbElkLHQuYnVsbGV0QnRuLm1haW4uZGF0YS5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4gdC5pZD09PWUuaWQmJihkZWxldGUgdC5ib29rQ2hhbm5lbElkLCEwKX0pKSksZS5jaGFubmVsX2lkPVtsLGldLFwiYjJ0XCI9PT10aGlzLmRpcmVjdGlvbj8oZS50b3A9bCpyLHRoaXMuZGFubXUuY29uZmlnLmFyZWEmJnRoaXMuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQmJihlLnRvcCs9dGhpcy5jb250YWluZXJXaWR0aCp0aGlzLmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0KSk6KGUudG9wPWwqbyx0aGlzLmRhbm11LmNvbmZpZy5hcmVhJiZ0aGlzLmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0JiYoZS50b3ArPXRoaXMuY29udGFpbmVySGVpZ2h0KnRoaXMuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpKSx7cmVzdWx0OmUsbWVzc2FnZTpcInN1Y2Nlc3NcIn19aWYoZS5wcmlvcilpZihlLmJvb2tDaGFubmVsSWQpdC5idWxsZXRCdG4ubWFpbi5kYXRhLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkPT09ZS5pZCYmKHQuc3RhcnQrPTJlMywhMCl9KSk7ZWxzZXtsPS0xO2Zvcih2YXIgaj0wLFQ9bi5sZW5ndGgtaTtqPD1UO2orKyl7YT0hMDtmb3IodmFyIE09ajtNPGoraTtNKyspaWYobltNXS5ib29rSWRbZS5tb2RlXSl7YT0hMTticmVha31pZihhKXtsPWo7YnJlYWt9fWlmKC0xIT09bCl7Zm9yKHZhciBPPWw7TzxsK2k7TysrKW5bT10uYm9va0lkW2UubW9kZV09ZS5pZDt0LmJ1bGxldEJ0bi5tYWluLmRhdGEuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIHQuaWQ9PT1lLmlkJiYodC5zdGFydCs9MmUzLHQuYm9va0NoYW5uZWxJZD1bbCxpXSwhMCl9KSl9fXJldHVybntyZXN1bHQ6ITEsbWVzc2FnZTpcIm5vIHN1cnBsdXMgd2lsbCByaWdodFwifX19LHtrZXk6XCJyZW1vdmVCdWxsZXRcIix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy5jaGFubmVscyxuPWUuY2hhbm5lbF9pZCxvPXZvaWQgMCxyPW5bMF0saT1uWzBdK25bMV07cjxpO3IrKylpZihvPXRbcl0pe28ub3BlcmF0aW5nW2UubW9kZV09ITA7dmFyIGE9LTE7by5xdWV1ZVtlLm1vZGVdLnNvbWUoKGZ1bmN0aW9uKHQsbil7cmV0dXJuIHQuaWQ9PT1lLmlkJiYoYT1uLCEwKX0pKSxhPi0xJiZvLnF1ZXVlW2UubW9kZV0uc3BsaWNlKGEsMSksby5vcGVyYXRpbmdbZS5tb2RlXT0hMX19fSx7a2V5OlwicmVzZXRBcmVhXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmRhbm11LmNvbnRhaW5lcix0PXRoaXMsbj1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3Qud2lkdGg9bi53aWR0aCx0LmhlaWdodD1uLmhlaWdodCx0LmRhbm11LmNvbmZpZy5hcmVhJiZ0LmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0Pj0wJiZ0LmRhbm11LmNvbmZpZy5hcmVhLmVuZD49dC5kYW5tdS5jb25maWcuYXJlYS5zdGFydCYmKFwiYjJ0XCI9PT10LmRpcmVjdGlvbj90LndpZHRoPXQud2lkdGgqKHQuZGFubXUuY29uZmlnLmFyZWEuZW5kLXQuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpOnQuaGVpZ2h0PXQuaGVpZ2h0Kih0LmRhbm11LmNvbmZpZy5hcmVhLmVuZC10LmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0KSksdC5jb250YWluZXI9ZTt2YXIgbyxyPS9tb2JpbGUvZ2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KT8xMDoxMjtvPVwiYjJ0XCI9PT10LmRpcmVjdGlvbj9NYXRoLmZsb29yKHQud2lkdGgvcik6TWF0aC5mbG9vcih0LmhlaWdodC9yKTtmb3IodmFyIGk9W10sYT0wO2E8bzthKyspaVthXT17aWQ6YSxxdWV1ZTp7c2Nyb2xsOltdLHRvcDpbXSxib3R0b206W119LG9wZXJhdGluZzp7c2Nyb2xsOiExLHRvcDohMSxib3R0b206ITF9LGJvb2tJZDp7fX07aWYodC5jaGFubmVscyYmdC5jaGFubmVscy5sZW5ndGg8PWkubGVuZ3RoKXtmb3IodmFyIHM9ZnVuY3Rpb24oZSl7aVtlXT17aWQ6ZSxxdWV1ZTp7c2Nyb2xsOltdLHRvcDpbXSxib3R0b206W119LG9wZXJhdGluZzp7c2Nyb2xsOiExLHRvcDohMSxib3R0b206ITF9LGJvb2tJZDp7fX0sW1wic2Nyb2xsXCIsXCJ0b3BcIl0uZm9yRWFjaCgoZnVuY3Rpb24obil7dC5jaGFubmVsc1tlXS5xdWV1ZVtuXS5mb3JFYWNoKChmdW5jdGlvbihvKXtvLmVsJiYoaVtlXS5xdWV1ZVtuXS5wdXNoKG8pLG8ucmVzaXplZHx8KG8ucGF1c2VNb3ZlKHQuY29udGFpbmVyUG9zLCExKSxvLnN0YXJ0TW92ZSh0LmNvbnRhaW5lclBvcyksby5yZXNpemVkPSEwKSl9KSl9KSksdC5jaGFubmVsc1tlXS5xdWV1ZS5ib3R0b20uZm9yRWFjaCgoZnVuY3Rpb24obil7aWYobi5lbCl7aWYoaVtlK2kubGVuZ3RoLXQuY2hhbm5lbHMubGVuZ3RoXS5xdWV1ZS5ib3R0b20ucHVzaChuKSxuLmNoYW5uZWxfaWRbMF0rbi5jaGFubmVsX2lkWzFdLTE9PT1lKXt2YXIgbz1bXS5jb25jYXQobi5jaGFubmVsX2lkKTtuLmNoYW5uZWxfaWQ9W29bMF0tdC5jaGFubmVscy5sZW5ndGgraS5sZW5ndGgsb1sxXV0sbi50b3A9bi5jaGFubmVsX2lkWzBdKnIsdC5kYW5tdS5jb25maWcuYXJlYSYmdC5kYW5tdS5jb25maWcuYXJlYS5zdGFydCYmKG4udG9wKz10LmNvbnRhaW5lckhlaWdodCp0LmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0KSxuLnRvcEluaXQoKX1uLnJlc2l6ZWR8fChuLnBhdXNlTW92ZSh0LmNvbnRhaW5lclBvcywhMSksbi5zdGFydE1vdmUodC5jb250YWluZXJQb3MpLG4ucmVzaXplZD0hMCl9fSkpfSxsPTA7bDx0LmNoYW5uZWxzLmxlbmd0aDtsKyspcyhsKTtmb3IodmFyIGM9ZnVuY3Rpb24oZSl7W1wic2Nyb2xsXCIsXCJ0b3BcIixcImJvdHRvbVwiXS5mb3JFYWNoKChmdW5jdGlvbih0KXtpW2VdLnF1ZXVlW3RdLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UucmVzaXplZD0hMX0pKX0pKX0sdT0wO3U8aS5sZW5ndGg7dSsrKWModSk7dC5jaGFubmVscz1pLFwiYjJ0XCI9PT10LmRpcmVjdGlvbj90LmNoYW5uZWxXaWR0aD1yOnQuY2hhbm5lbEhlaWdodD1yfWVsc2UgaWYodC5jaGFubmVscyYmdC5jaGFubmVscy5sZW5ndGg+aS5sZW5ndGgpe2Zvcih2YXIgZD1mdW5jdGlvbihlKXtpW2VdPXtpZDplLHF1ZXVlOntzY3JvbGw6W10sdG9wOltdLGJvdHRvbTpbXX0sb3BlcmF0aW5nOntzY3JvbGw6ITEsdG9wOiExLGJvdHRvbTohMX0sYm9va0lkOnt9fSxbXCJzY3JvbGxcIixcInRvcFwiLFwiYm90dG9tXCJdLmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKFwidG9wXCI9PT1uJiZlPk1hdGguZmxvb3IoaS5sZW5ndGgvMikpO2Vsc2UgaWYoXCJib3R0b21cIj09PW4mJmU8PU1hdGguZmxvb3IoaS5sZW5ndGgvMikpO2Vsc2V7dmFyIG89XCJib3R0b21cIj09PW4/ZS1pLmxlbmd0aCt0LmNoYW5uZWxzLmxlbmd0aDplO3QuY2hhbm5lbHNbb10ucXVldWVbbl0uZm9yRWFjaCgoZnVuY3Rpb24oYSxzKXtpZihhLmVsKXtpZihpW2VdLnF1ZXVlW25dLnB1c2goYSksXCJib3R0b21cIj09PW4mJmEuY2hhbm5lbF9pZFswXSthLmNoYW5uZWxfaWRbMV0tMT09PW8pe3ZhciBsPVtdLmNvbmNhdChhLmNoYW5uZWxfaWQpO2EuY2hhbm5lbF9pZD1bbFswXS10LmNoYW5uZWxzLmxlbmd0aCtpLmxlbmd0aCxsWzFdXSxhLnRvcD1hLmNoYW5uZWxfaWRbMF0qcix0LmRhbm11LmNvbmZpZy5hcmVhJiZ0LmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0JiYoYS50b3ArPXQuY29udGFpbmVySGVpZ2h0KnQuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpLGEudG9wSW5pdCgpfWEucmVzaXplZHx8KGEucGF1c2VNb3ZlKHQuY29udGFpbmVyUG9zLCExKSxhLnN0YXJ0TW92ZSh0LmNvbnRhaW5lclBvcyksYS5yZXNpemVkPSEwKX10LmNoYW5uZWxzW29dLnF1ZXVlW25dLnNwbGljZShzLDEpfSkpfX0pKX0scD0wO3A8aS5sZW5ndGg7cCsrKWQocCk7Zm9yKHZhciBmPWZ1bmN0aW9uKGUpe1tcInNjcm9sbFwiLFwidG9wXCIsXCJib3R0b21cIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7aVtlXS5xdWV1ZVt0XS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnJlc2l6ZWQ9ITF9KSl9KSl9LGg9MDtoPGkubGVuZ3RoO2grKylmKGgpO3QuY2hhbm5lbHM9aSxcImIydFwiPT09dC5kaXJlY3Rpb24/dC5jaGFubmVsV2lkdGg9cjp0LmNoYW5uZWxIZWlnaHQ9cn19fSx7a2V5OlwicmVzZXRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuZGFubXUuY29udGFpbmVyLHQ9dGhpczt0LmNoYW5uZWxzJiZ0LmNoYW5uZWxzLmxlbmd0aD4wJiZbXCJzY3JvbGxcIixcInRvcFwiLFwiYm90dG9tXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe2Zvcih2YXIgbj0wO248dC5jaGFubmVscy5sZW5ndGg7bisrKXQuY2hhbm5lbHNbbl0ucXVldWVbZV0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5wYXVzZU1vdmUodC5jb250YWluZXJQb3MpLGUucmVtb3ZlKCl9KSl9KSksc2V0VGltZW91dCgoZnVuY3Rpb24oKXt2YXIgbj1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3Qud2lkdGg9bi53aWR0aCx0LmhlaWdodD1uLmhlaWdodCx0LmRhbm11LmNvbmZpZy5hcmVhJiZ0LmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0Pj0wJiZ0LmRhbm11LmNvbmZpZy5hcmVhLmVuZD49dC5kYW5tdS5jb25maWcuYXJlYS5zdGFydCYmKFwiYjJ0XCI9PT10LmRpcmVjdGlvbj90LndpZHRoPXQud2lkdGgqKHQuZGFubXUuY29uZmlnLmFyZWEuZW5kLXQuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpOnQuaGVpZ2h0PXQuaGVpZ2h0Kih0LmRhbm11LmNvbmZpZy5hcmVhLmVuZC10LmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0KSksdC5jb250YWluZXI9ZTt2YXIgbyxyPS9tb2JpbGUvZ2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KT8xMDoxMjtvPVwiYjJ0XCI9PT10LmRpcmVjdGlvbj9NYXRoLmZsb29yKHQud2lkdGgvcik6TWF0aC5mbG9vcih0LmhlaWdodC9yKTtmb3IodmFyIGk9W10sYT0wO2E8bzthKyspaVthXT17aWQ6YSxxdWV1ZTp7c2Nyb2xsOltdLHRvcDpbXSxib3R0b206W119LG9wZXJhdGluZzp7c2Nyb2xsOiExLHRvcDohMSxib3R0b206ITF9LGJvb2tJZDp7fX07dC5jaGFubmVscz1pLFwiYjJ0XCI9PT10LmRpcmVjdGlvbj90LmNoYW5uZWxXaWR0aD1yOnQuY2hhbm5lbEhlaWdodD1yfSksMjAwKX19LHtrZXk6XCJyZXNldFdpdGhDYlwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5kYW5tdS5jb250YWluZXIsbz10aGlzO28uY2hhbm5lbHMmJm8uY2hhbm5lbHMubGVuZ3RoPjAmJltcInNjcm9sbFwiLFwidG9wXCIsXCJib3R0b21cIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxvLmNoYW5uZWxzLmxlbmd0aDt0Kyspby5jaGFubmVsc1t0XS5xdWV1ZVtlXS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnBhdXNlTW92ZShvLmNvbnRhaW5lclBvcyksZS5yZW1vdmUoKX0pKX0pKTt2YXIgcj1uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO28ud2lkdGg9ci53aWR0aCxvLmhlaWdodD1yLmhlaWdodCxvLmRhbm11LmNvbmZpZy5hcmVhJiZvLmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0Pj0wJiZvLmRhbm11LmNvbmZpZy5hcmVhLmVuZD49by5kYW5tdS5jb25maWcuYXJlYS5zdGFydCYmKFwiYjJ0XCI9PT1vLmRpcmVjdGlvbj9vLndpZHRoPW8ud2lkdGgqKG8uZGFubXUuY29uZmlnLmFyZWEuZW5kLW8uZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpOm8uaGVpZ2h0PW8uaGVpZ2h0KihvLmRhbm11LmNvbmZpZy5hcmVhLmVuZC1vLmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0KSksby5jb250YWluZXI9bjt2YXIgaSxhPS9tb2JpbGUvZ2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KT8xMDoxMjtpPVwiYjJ0XCI9PT1vLmRpcmVjdGlvbj9NYXRoLmZsb29yKG8ud2lkdGgvYSk6TWF0aC5mbG9vcihvLmhlaWdodC9hKTtmb3IodmFyIHM9W10sbD0wO2w8aTtsKyspc1tsXT17aWQ6bCxxdWV1ZTp7c2Nyb2xsOltdLHRvcDpbXSxib3R0b206W119LG9wZXJhdGluZzp7c2Nyb2xsOiExLHRvcDohMSxib3R0b206ITF9LGJvb2tJZDp7fX07by5jaGFubmVscz1zLG8uY2hhbm5lbEhlaWdodD1hLGUmJmUoITAsdCl9fV0pLGV9KCk7dC5kZWZhdWx0PXIsZS5leHBvcnRzPXQuZGVmYXVsdH0sZnVuY3Rpb24oZSx0LG4pe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvLHI9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKSxpPShvPW4oMCkpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfSxhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4peyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5kYW5tdT10LHRoaXMuZHVyYXRpb249bi5kdXJhdGlvbix0aGlzLmlkPW4uaWQsdGhpcy5jb250YWluZXI9dC5jb250YWluZXIsdGhpcy5zdGFydD1uLnN0YXJ0LHRoaXMucHJpb3I9bi5wcmlvcix0aGlzLmNvbG9yPW4uY29sb3IsdGhpcy5ib29rQ2hhbm5lbElkPW4uYm9va0NoYW5uZWxJZCx0aGlzLmRpcmVjdGlvbj10LmRpcmVjdGlvbjt2YXIgbz10aGlzO3RoaXMuZGFubXUub24oXCJjaGFuZ2VEaXJlY3Rpb25cIiwoZnVuY3Rpb24oZSl7by5kaXJlY3Rpb249ZX0pKTt2YXIgcj12b2lkIDA7aWYodGhpcy5kb21PYmo9aS5kZWZhdWx0LmRvbU9iaixuLmVsJiYxPT09bi5lbC5ub2RlVHlwZSkocj10aGlzLmRvbU9iai51c2UoKSkuYXBwZW5kQ2hpbGQoaS5kZWZhdWx0LmNvcHlEb20obi5lbCkpO2Vsc2UgaWYoKHI9dGhpcy5kb21PYmoudXNlKCkpLnRleHRDb250ZW50PW4udHh0LG4uc3R5bGUpe3ZhciBhPW4uc3R5bGU7T2JqZWN0LmtleXMoYSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ci5zdHlsZVtlXT1hW2VdfSkpfVwidG9wXCI9PT1uLm1vZGV8fFwiYm90dG9tXCI9PT1uLm1vZGU/dGhpcy5tb2RlPW4ubW9kZTp0aGlzLm1vZGU9XCJzY3JvbGxcIix0aGlzLmVsPXIsdGhpcy5zdGF0dXM9XCJ3YWl0aW5nXCI7dmFyIHM9dGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dGhpcy5lbC5zdHlsZS5sZWZ0PXMud2lkdGgrXCJweFwifXJldHVybiByKGUsW3trZXk6XCJhdHRhY2hcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWwpLHRoaXMuZWxQb3M9dGhpcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcImIydFwiPT09dGhpcy5kaXJlY3Rpb24/KHRoaXMud2lkdGg9dGhpcy5lbFBvcy5oZWlnaHQsdGhpcy5oZWlnaHQ9dGhpcy5lbFBvcy53aWR0aCk6KHRoaXMud2lkdGg9dGhpcy5lbFBvcy53aWR0aCx0aGlzLmhlaWdodD10aGlzLmVsUG9zLmhlaWdodCl9fSx7a2V5OlwiZGV0YWNoXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmNvbnRhaW5lciYmdGhpcy5lbCYmKHRoaXMuZG9tT2JqLnVudXNlKHRoaXMuZWwpLHRoaXMuY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuZWwpKTt2YXIgZT10aGlzO3RoaXMuZGFubXUub2ZmKFwiY2hhbmdlRGlyZWN0aW9uXCIsKGZ1bmN0aW9uKHQpe2UuZGlyZWN0aW9uPXR9KSksdGhpcy5lbD1udWxsfX0se2tleTpcInRvcEluaXRcIix2YWx1ZTpmdW5jdGlvbigpe2lmKFwiYjJ0XCI9PT10aGlzLmRpcmVjdGlvbil7dmFyIGU9dGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dGhpcy5lbC5zdHlsZS50cmFuc2Zvcm1PcmlnaW49XCJsZWZ0IHRvcFwiLHRoaXMuZWwuc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlWCgtXCIrdGhpcy50b3ArXCJweCkgdHJhbnNsYXRlWShcIitlLmhlaWdodCtcInB4KSB0cmFuc2xhdGVaKDBweCkgcm90YXRlKDkwZGVnKVwiLHRoaXMuZWwuc3R5bGUudHJhbnNpdGlvbj1cInRyYW5zZm9ybSAwcyBsaW5lYXIgMHNcIn1lbHNlIHRoaXMuZWwuc3R5bGUudG9wPXRoaXMudG9wK1wicHhcIn19LHtrZXk6XCJwYXVzZU1vdmVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdO2lmKFwicGF1c2VkXCIhPT10aGlzLnN0YXR1cyYmKHRoaXMuc3RhdHVzPVwicGF1c2VkXCIsY2xlYXJUaW1lb3V0KHRoaXMucmVtb3ZlVGltZXIpLHRoaXMuZWwpKWlmKHRoaXMuZWwuc3R5bGUud2lsbENoYW5nZT1cImF1dG9cIixcInNjcm9sbFwiPT09dGhpcy5tb2RlKXtpZih0KXt2YXIgbj0oKG5ldyBEYXRlKS5nZXRUaW1lKCktdGhpcy5tb3ZlVGltZSkvMWUzKnRoaXMubW92ZVYsbz0wO289dGhpcy5tb3ZlTW9yZVMtbj49MD9cImIydFwiPT09dGhpcy5kaXJlY3Rpb24/KHRoaXMubW92ZU1vcmVTLW4pL3RoaXMubW92ZUNvbnRhaW5lckhlaWdodCplLmhlaWdodDoodGhpcy5tb3ZlTW9yZVMtbikvdGhpcy5tb3ZlQ29udGFpbmVyV2lkdGgqZS53aWR0aDp0aGlzLm1vdmVNb3JlUy1uLFwiYjJ0XCI9PT10aGlzLmRpcmVjdGlvbj90aGlzLmVsLnN0eWxlLnRyYW5zZm9ybT1cInRyYW5zbGF0ZVgoLVwiK3RoaXMudG9wK1wicHgpIHRyYW5zbGF0ZVkoXCIrbytcInB4KSB0cmFuc2xhdGVaKDBweCkgcm90YXRlKDkwZGVnKVwiOnRoaXMuZWwuc3R5bGUubGVmdD1vK1wicHhcIn1lbHNlXCJiMnRcIj09PXRoaXMuZGlyZWN0aW9uP3RoaXMuZWwuc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlWCgtXCIrdGhpcy50b3ArXCJweCkgdHJhbnNsYXRlWShcIisodGhpcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AtZS50b3ApK1wicHgpIHRyYW5zbGF0ZVooMHB4KSByb3RhdGUoOTBkZWcpXCI6dGhpcy5lbC5zdHlsZS5sZWZ0PXRoaXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdC1lLmxlZnQrXCJweFwiO1wiYjJ0XCI9PT10aGlzLmRpcmVjdGlvbj90aGlzLmVsLnN0eWxlLnRyYW5zaXRpb249XCJ0cmFuc2Zvcm0gMHMgbGluZWFyIDBzXCI6KHRoaXMuZWwuc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlWCgwcHgpIHRyYW5zbGF0ZVkoMHB4KSB0cmFuc2xhdGVaKDBweClcIix0aGlzLmVsLnN0eWxlLnRyYW5zaXRpb249XCJ0cmFuc2Zvcm0gMHMgbGluZWFyIDBzXCIpfWVsc2UgdGhpcy5wYXN0RHVyYXRpb24mJnRoaXMuc3RhcnRUaW1lP3RoaXMucGFzdER1cmF0aW9uPXRoaXMucGFzdER1cmF0aW9uKyhuZXcgRGF0ZSkuZ2V0VGltZSgpLXRoaXMuc3RhcnRUaW1lOnRoaXMucGFzdER1cmF0aW9uPTF9fSx7a2V5Olwic3RhcnRNb3ZlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0aGlzLmVsJiZcInN0YXJ0XCIhPT10aGlzLnN0YXR1cylpZih0aGlzLnN0YXR1cz1cInN0YXJ0XCIsdGhpcy5lbC5zdHlsZS53aWxsQ2hhbmdlPVwidHJhbnNmb3JtXCIsXCJzY3JvbGxcIj09PXRoaXMubW9kZSlpZihcImIydFwiPT09dGhpcy5kaXJlY3Rpb24pe3RoaXMubW92ZVY9KGUuaGVpZ2h0K3RoaXMuaGVpZ2h0KS90aGlzLmR1cmF0aW9uKjFlMzt2YXIgbj0odC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20tZS50b3ApL3RoaXMubW92ZVY7dGhpcy5lbC5zdHlsZS50cmFuc2l0aW9uPVwidHJhbnNmb3JtIFwiK24rXCJzIGxpbmVhciAwc1wiLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5lbCYmKHQuZWwuc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlWCgtXCIrdC50b3ArXCJweCkgdHJhbnNsYXRlWSgtXCIrdC5oZWlnaHQrXCJweCkgdHJhbnNsYXRlWigwcHgpIHJvdGF0ZSg5MGRlZylcIix0Lm1vdmVUaW1lPShuZXcgRGF0ZSkuZ2V0VGltZSgpLHQubW92ZU1vcmVTPXQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wLWUudG9wLHQubW92ZUNvbnRhaW5lckhlaWdodD1lLmhlaWdodCx0LnJlbW92ZVRpbWVyPXNldFRpbWVvdXQoaSwxZTMqbikpfSksMjApfWVsc2V7dGhpcy5tb3ZlVj0oZS53aWR0aCt0aGlzLndpZHRoKS90aGlzLmR1cmF0aW9uKjFlMzt2YXIgbz0odC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodC1lLmxlZnQpL3RoaXMubW92ZVY7dGhpcy5lbC5zdHlsZS50cmFuc2l0aW9uPVwidHJhbnNmb3JtIFwiK28rXCJzIGxpbmVhciAwc1wiLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5lbCYmKHQuZWwuc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlWCgtXCIrKHQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQtZS5sZWZ0KStcInB4KSB0cmFuc2xhdGVZKDBweCkgdHJhbnNsYXRlWigwcHgpXCIsdC5tb3ZlVGltZT0obmV3IERhdGUpLmdldFRpbWUoKSx0Lm1vdmVNb3JlUz10LmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQtZS5sZWZ0LHQubW92ZUNvbnRhaW5lcldpZHRoPWUud2lkdGgsdC5yZW1vdmVUaW1lcj1zZXRUaW1lb3V0KGksMWUzKm8pKX0pLDIwKX1lbHNle3RoaXMuZWwuc3R5bGUubGVmdD1cIjUwJVwiLHRoaXMuZWwuc3R5bGUubWFyZ2luPVwiMCAwIDAgLVwiK3RoaXMud2lkdGgvMitcInB4XCIsdGhpcy5wYXN0RHVyYXRpb258fCh0aGlzLnBhc3REdXJhdGlvbj0xKTt2YXIgcj10aGlzLmR1cmF0aW9uPj10aGlzLnBhc3REdXJhdGlvbj90aGlzLmR1cmF0aW9uLXRoaXMucGFzdER1cmF0aW9uOjA7dGhpcy5yZW1vdmVUaW1lcj1zZXRUaW1lb3V0KGksciksdGhpcy5zdGFydFRpbWU9KG5ldyBEYXRlKS5nZXRUaW1lKCl9ZnVuY3Rpb24gaSgpe2lmKHQuZWwpaWYoXCJzY3JvbGxcIj09PXQubW9kZSl7dmFyIGU9dC5kYW5tdS5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj10LmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1wiYjJ0XCI9PT10LmRpcmVjdGlvbj9uJiZuLmJvdHRvbTw9ZS50b3ArMTAwPyh0LnN0YXR1cz1cImVuZFwiLHQucmVtb3ZlKCkpOih0LnBhdXNlTW92ZShlKSx0LnN0YXJ0TW92ZShlKSk6biYmbi5yaWdodDw9ZS5sZWZ0KzEwMD8odC5zdGF0dXM9XCJlbmRcIix0LnJlbW92ZSgpKToodC5wYXVzZU1vdmUoZSksdC5zdGFydE1vdmUoZSkpfWVsc2UgdC5zdGF0dXM9XCJlbmRcIix0LnJlbW92ZSgpfX19LHtrZXk6XCJyZW1vdmVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5yZW1vdmVUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMucmVtb3ZlVGltZXIpLGUuZWwmJmUuZWwucGFyZW50Tm9kZSYmKGUuZWwuc3R5bGUud2lsbENoYW5nZT1cImF1dG9cIix0aGlzLmRhbm11Lm9mZihcImNoYW5nZURpcmVjdGlvblwiLChmdW5jdGlvbih0KXtlLmRpcmVjdGlvbj10fSkpLHRoaXMuZG9tT2JqLnVudXNlKGUuZWwpLGUuZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlLmVsKSxlLmVsPW51bGwsZS5kYW5tdS5lbWl0KFwiYnVsbGV0X3JlbW92ZVwiLHtidWxsZXQ6ZX0pKX19XSksZX0oKTt0LmRlZmF1bHQ9YSxlLmV4cG9ydHM9dC5kZWZhdWx0fSxmdW5jdGlvbihlLHQsbil7dmFyIG89bigyNyk7XCJzdHJpbmdcIj09dHlwZW9mIG8mJihvPVtbZS5pLG8sXCJcIl1dKSxuKDI5KShvLHtobXI6ITAsdHJhbnNmb3JtOnZvaWQgMCxpbnNlcnRJbnRvOnZvaWQgMH0pLG8ubG9jYWxzJiYoZS5leHBvcnRzPW8ubG9jYWxzKX0sZnVuY3Rpb24oZSx0LG4peyhlLmV4cG9ydHM9bigyOCkoITEpKS5wdXNoKFtlLmksXCIuZGFubXV7b3ZlcmZsb3c6aGlkZGVuOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZX0uZGFubXU+Kntwb3NpdGlvbjphYnNvbHV0ZTt3aGl0ZS1zcGFjZTpub3dyYXB9LmRhbm11LXN3aXRjaHt3aWR0aDozMnB4O2hlaWdodDoyMHB4O2JvcmRlci1yYWRpdXM6MTAwcHg7YmFja2dyb3VuZC1jb2xvcjojY2NjOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdXRsaW5lOm5vbmU7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246cmVsYXRpdmU7dGV4dC1hbGlnbjpjZW50ZXI7bWFyZ2luOjEwcHggYXV0b30uZGFubXUtc3dpdGNoLmRhbm11LXN3aXRjaC1hY3RpdmV7cGFkZGluZy1sZWZ0OjEycHg7YmFja2dyb3VuZC1jb2xvcjojZjg1OTU5fS5kYW5tdS1zd2l0Y2ggc3Bhbi50eHR7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtsaW5lLWhlaWdodDoyMHB4O3RleHQtYWxpZ246Y2VudGVyO2Rpc3BsYXk6YmxvY2s7Ym9yZGVyLXJhZGl1czoxMDBweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmY7LXdlYmtpdC1ib3gtc2hhZG93Oi0ycHggMCAwIDAgcmdiYSgwLCAwLCAwLCAuMDQpO2JveC1zaGFkb3c6LTJweCAwIDAgMCByZ2JhKDAsIDAsIDAsIC4wNCk7Zm9udC1mYW1pbHk6UGluZ0ZhbmdTQztmb250LXNpemU6MTBweDtmb250LXdlaWdodDo1MDA7Y29sb3I6I2Y0NDMzNn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiB0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKChmdW5jdGlvbih0KXt2YXIgbj1mdW5jdGlvbihlLHQpe3ZhciBuLG89ZVsxXXx8XCJcIixyPWVbM107aWYoIXIpcmV0dXJuIG87aWYodCYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYSl7dmFyIGk9KG49cixcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShuKSkpKStcIiAqL1wiKSxhPXIuc291cmNlcy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIityLnNvdXJjZVJvb3QrZStcIiAqL1wifSkpO3JldHVybltvXS5jb25jYXQoYSkuY29uY2F0KFtpXSkuam9pbihcIlxcblwiKX1yZXR1cm5bb10uam9pbihcIlxcblwiKX0odCxlKTtyZXR1cm4gdFsyXT9cIkBtZWRpYSBcIit0WzJdK1wie1wiK24rXCJ9XCI6bn0pKS5qb2luKFwiXCIpfSx0Lmk9ZnVuY3Rpb24oZSxuKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9W1tudWxsLGUsXCJcIl1dKTtmb3IodmFyIG89e30scj0wO3I8dGhpcy5sZW5ndGg7cisrKXt2YXIgaT10aGlzW3JdWzBdO1wibnVtYmVyXCI9PXR5cGVvZiBpJiYob1tpXT0hMCl9Zm9yKHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIGE9ZVtyXTtcIm51bWJlclwiPT10eXBlb2YgYVswXSYmb1thWzBdXXx8KG4mJiFhWzJdP2FbMl09bjpuJiYoYVsyXT1cIihcIithWzJdK1wiKSBhbmQgKFwiK24rXCIpXCIpLHQucHVzaChhKSl9fSx0fX0sZnVuY3Rpb24oZSx0LG4pe3ZhciBvLHIsaT17fSxzPShvPWZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdyYmZG9jdW1lbnQmJmRvY3VtZW50LmFsbCYmIXdpbmRvdy5hdG9ifSxmdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1yJiYocj1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkscn0pLGw9ZnVuY3Rpb24oZSl7dmFyIHQ9e307cmV0dXJuIGZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpcmV0dXJuIGUoKTtpZih2b2lkIDA9PT10W2VdKXt2YXIgbj1mdW5jdGlvbihlKXtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKX0uY2FsbCh0aGlzLGUpO2lmKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCYmbiBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCl0cnl7bj1uLmNvbnRlbnREb2N1bWVudC5oZWFkfWNhdGNoKGUpe249bnVsbH10W2VdPW59cmV0dXJuIHRbZV19fSgpLGM9bnVsbCx1PTAsZD1bXSxwPW4oMzApO2Z1bmN0aW9uIGYoZSx0KXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIG89ZVtuXSxyPWlbby5pZF07aWYocil7ci5yZWZzKys7Zm9yKHZhciBhPTA7YTxyLnBhcnRzLmxlbmd0aDthKyspci5wYXJ0c1thXShvLnBhcnRzW2FdKTtmb3IoO2E8by5wYXJ0cy5sZW5ndGg7YSsrKXIucGFydHMucHVzaChiKG8ucGFydHNbYV0sdCkpfWVsc2V7dmFyIHM9W107Zm9yKGE9MDthPG8ucGFydHMubGVuZ3RoO2ErKylzLnB1c2goYihvLnBhcnRzW2FdLHQpKTtpW28uaWRdPXtpZDpvLmlkLHJlZnM6MSxwYXJ0czpzfX19fWZ1bmN0aW9uIGgoZSx0KXtmb3IodmFyIG49W10sbz17fSxyPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBpPWVbcl0sYT10LmJhc2U/aVswXSt0LmJhc2U6aVswXSxzPXtjc3M6aVsxXSxtZWRpYTppWzJdLHNvdXJjZU1hcDppWzNdfTtvW2FdP29bYV0ucGFydHMucHVzaChzKTpuLnB1c2gob1thXT17aWQ6YSxwYXJ0czpbc119KX1yZXR1cm4gbn1mdW5jdGlvbiBnKGUsdCl7dmFyIG49bChlLmluc2VydEludG8pO2lmKCFuKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO3ZhciBvPWRbZC5sZW5ndGgtMV07aWYoXCJ0b3BcIj09PWUuaW5zZXJ0QXQpbz9vLm5leHRTaWJsaW5nP24uaW5zZXJ0QmVmb3JlKHQsby5uZXh0U2libGluZyk6bi5hcHBlbmRDaGlsZCh0KTpuLmluc2VydEJlZm9yZSh0LG4uZmlyc3RDaGlsZCksZC5wdXNoKHQpO2Vsc2UgaWYoXCJib3R0b21cIj09PWUuaW5zZXJ0QXQpbi5hcHBlbmRDaGlsZCh0KTtlbHNle2lmKFwib2JqZWN0XCIhPWEoZS5pbnNlcnRBdCl8fCFlLmluc2VydEF0LmJlZm9yZSl0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTt2YXIgcj1sKGUuaW5zZXJ0SW50bytcIiBcIitlLmluc2VydEF0LmJlZm9yZSk7bi5pbnNlcnRCZWZvcmUodCxyKX19ZnVuY3Rpb24gdihlKXtpZihudWxsPT09ZS5wYXJlbnROb2RlKXJldHVybiExO2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKTt2YXIgdD1kLmluZGV4T2YoZSk7dD49MCYmZC5zcGxpY2UodCwxKX1mdW5jdGlvbiBtKGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtyZXR1cm4gdm9pZCAwPT09ZS5hdHRycy50eXBlJiYoZS5hdHRycy50eXBlPVwidGV4dC9jc3NcIikseSh0LGUuYXR0cnMpLGcoZSx0KSx0fWZ1bmN0aW9uIHkoZSx0KXtPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChmdW5jdGlvbihuKXtlLnNldEF0dHJpYnV0ZShuLHRbbl0pfSkpfWZ1bmN0aW9uIGIoZSx0KXt2YXIgbixvLHIsaTtpZih0LnRyYW5zZm9ybSYmZS5jc3Mpe2lmKCEoaT10LnRyYW5zZm9ybShlLmNzcykpKXJldHVybiBmdW5jdGlvbigpe307ZS5jc3M9aX1pZih0LnNpbmdsZXRvbil7dmFyIGE9dSsrO249Y3x8KGM9bSh0KSksbz1fLmJpbmQobnVsbCxuLGEsITEpLHI9Xy5iaW5kKG51bGwsbixhLCEwKX1lbHNlIGUuc291cmNlTWFwJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIEJsb2ImJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2E/KG49ZnVuY3Rpb24oZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7cmV0dXJuIHZvaWQgMD09PWUuYXR0cnMudHlwZSYmKGUuYXR0cnMudHlwZT1cInRleHQvY3NzXCIpLGUuYXR0cnMucmVsPVwic3R5bGVzaGVldFwiLHkodCxlLmF0dHJzKSxnKGUsdCksdH0odCksbz1mdW5jdGlvbihlLHQsbil7dmFyIG89bi5jc3Mscj1uLnNvdXJjZU1hcCxpPXZvaWQgMD09PXQuY29udmVydFRvQWJzb2x1dGVVcmxzJiZyOyh0LmNvbnZlcnRUb0Fic29sdXRlVXJsc3x8aSkmJihvPXAobykpLHImJihvKz1cIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocikpKSkrXCIgKi9cIik7dmFyIGE9bmV3IEJsb2IoW29dLHt0eXBlOlwidGV4dC9jc3NcIn0pLHM9ZS5ocmVmO2UuaHJlZj1VUkwuY3JlYXRlT2JqZWN0VVJMKGEpLHMmJlVSTC5yZXZva2VPYmplY3RVUkwocyl9LmJpbmQobnVsbCxuLHQpLHI9ZnVuY3Rpb24oKXt2KG4pLG4uaHJlZiYmVVJMLnJldm9rZU9iamVjdFVSTChuLmhyZWYpfSk6KG49bSh0KSxvPWZ1bmN0aW9uKGUsdCl7dmFyIG49dC5jc3Msbz10Lm1lZGlhO2lmKG8mJmUuc2V0QXR0cmlidXRlKFwibWVkaWFcIixvKSxlLnN0eWxlU2hlZXQpZS5zdHlsZVNoZWV0LmNzc1RleHQ9bjtlbHNle2Zvcig7ZS5maXJzdENoaWxkOyllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKSl9fS5iaW5kKG51bGwsbikscj1mdW5jdGlvbigpe3Yobil9KTtyZXR1cm4gbyhlKSxmdW5jdGlvbih0KXtpZih0KXtpZih0LmNzcz09PWUuY3NzJiZ0Lm1lZGlhPT09ZS5tZWRpYSYmdC5zb3VyY2VNYXA9PT1lLnNvdXJjZU1hcClyZXR1cm47byhlPXQpfWVsc2UgcigpfX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgREVCVUcmJkRFQlVHJiZcIm9iamVjdFwiIT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50P1widW5kZWZpbmVkXCI6YShkb2N1bWVudCkpKXRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTsodD10fHx7fSkuYXR0cnM9XCJvYmplY3RcIj09YSh0LmF0dHJzKT90LmF0dHJzOnt9LHQuc2luZ2xldG9ufHxcImJvb2xlYW5cIj09dHlwZW9mIHQuc2luZ2xldG9ufHwodC5zaW5nbGV0b249cygpKSx0Lmluc2VydEludG98fCh0Lmluc2VydEludG89XCJoZWFkXCIpLHQuaW5zZXJ0QXR8fCh0Lmluc2VydEF0PVwiYm90dG9tXCIpO3ZhciBuPWgoZSx0KTtyZXR1cm4gZihuLHQpLGZ1bmN0aW9uKGUpe2Zvcih2YXIgbz1bXSxyPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBhPW5bcl07KHM9aVthLmlkXSkucmVmcy0tLG8ucHVzaChzKX1mb3IoZSYmZihoKGUsdCksdCkscj0wO3I8by5sZW5ndGg7cisrKXt2YXIgcztpZigwPT09KHM9b1tyXSkucmVmcyl7Zm9yKHZhciBsPTA7bDxzLnBhcnRzLmxlbmd0aDtsKyspcy5wYXJ0c1tsXSgpO2RlbGV0ZSBpW3MuaWRdfX19fTt2YXIgeCx3PSh4PVtdLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHhbZV09dCx4LmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpfSk7ZnVuY3Rpb24gXyhlLHQsbixvKXt2YXIgcj1uP1wiXCI6by5jc3M7aWYoZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PXcodCxyKTtlbHNle3ZhciBpPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpLGE9ZS5jaGlsZE5vZGVzO2FbdF0mJmUucmVtb3ZlQ2hpbGQoYVt0XSksYS5sZW5ndGg/ZS5pbnNlcnRCZWZvcmUoaSxhW3RdKTplLmFwcGVuZENoaWxkKGkpfX19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5sb2NhdGlvbjtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtpZighZXx8XCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIGU7dmFyIG49dC5wcm90b2NvbCtcIi8vXCIrdC5ob3N0LG89bit0LnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLyxcIi9cIik7cmV0dXJuIGUucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksKGZ1bmN0aW9uKGUsdCl7dmFyIHIsaT10LnRyaW0oKS5yZXBsYWNlKC9eXCIoLiopXCIkLywoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdH0pKS5yZXBsYWNlKC9eJyguKiknJC8sKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR9KSk7cmV0dXJuL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdChpKT9lOihyPTA9PT1pLmluZGV4T2YoXCIvL1wiKT9pOjA9PT1pLmluZGV4T2YoXCIvXCIpP24raTpvK2kucmVwbGFjZSgvXlxcLlxcLy8sXCJcIiksXCJ1cmwoXCIrSlNPTi5zdHJpbmdpZnkocikrXCIpXCIpfSkpfX1dKX0sXCJvYmplY3RcIj09YSh0KSYmXCJvYmplY3RcIj09YShlKT9lLmV4cG9ydHM9aSgpOihvPVtdLHZvaWQgMD09PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mKG49aSk/bi5hcHBseSh0LG8pOm4pfHwoZS5leHBvcnRzPXIpKX0pLmNhbGwodGhpcyxuKC8qISAuLy4uLy4uL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMgKi9cIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanNcIikoZSkpfSxcIi4vbm9kZV9tb2R1bGVzL2Rvd25sb2FkanMvZG93bmxvYWQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9kb3dubG9hZGpzL2Rvd25sb2FkLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scixpO1wiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO3I9W10sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBlKHQsbixvKXt2YXIgcixpLGE9d2luZG93LHM9XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIixsPW98fHMsYz10LHU9IW4mJiFvJiZjLGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIikscD1mdW5jdGlvbihlKXtyZXR1cm4gU3RyaW5nKGUpfSxmPWEuQmxvYnx8YS5Nb3pCbG9ifHxhLldlYktpdEJsb2J8fHAsaD1ufHxcImRvd25sb2FkXCI7aWYoZj1mLmNhbGw/Zi5iaW5kKGEpOkJsb2IsXCJ0cnVlXCI9PT1TdHJpbmcodGhpcykmJihsPShjPVtjLGxdKVswXSxjPWNbMV0pLHUmJnUubGVuZ3RoPDIwNDgmJihoPXUuc3BsaXQoXCIvXCIpLnBvcCgpLnNwbGl0KFwiP1wiKVswXSxkLmhyZWY9dSwtMSE9PWQuaHJlZi5pbmRleE9mKHUpKSl7dmFyIGc9bmV3IFhNTEh0dHBSZXF1ZXN0O3JldHVybiBnLm9wZW4oXCJHRVRcIix1LCEwKSxnLnJlc3BvbnNlVHlwZT1cImJsb2JcIixnLm9ubG9hZD1mdW5jdGlvbih0KXtlKHQudGFyZ2V0LnJlc3BvbnNlLGgscyl9LHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7Zy5zZW5kKCl9KSwwKSxnfWlmKC9eZGF0YTooW1xcdystXStcXC9bXFx3Ky4tXSspP1ssO10vLnRlc3QoYykpe2lmKCEoYy5sZW5ndGg+MjA5NjEwMy40MjQmJmYhPT1wKSlyZXR1cm4gbmF2aWdhdG9yLm1zU2F2ZUJsb2I/bmF2aWdhdG9yLm1zU2F2ZUJsb2IoYihjKSxoKTp4KGMpO2w9KGM9YihjKSkudHlwZXx8c31lbHNlIGlmKC8oW1xceDgwLVxceGZmXSkvLnRlc3QoYykpe2Zvcih2YXIgdj0wLG09bmV3IFVpbnQ4QXJyYXkoYy5sZW5ndGgpLHk9bS5sZW5ndGg7djx5OysrdiltW3ZdPWMuY2hhckNvZGVBdCh2KTtjPW5ldyBmKFttXSx7dHlwZTpsfSl9ZnVuY3Rpb24gYihlKXtmb3IodmFyIHQ9ZS5zcGxpdCgvWzo7LF0vKSxuPXRbMV0sbz0oXCJiYXNlNjRcIj09dFsyXT9hdG9iOmRlY29kZVVSSUNvbXBvbmVudCkodC5wb3AoKSkscj1vLmxlbmd0aCxpPTAsYT1uZXcgVWludDhBcnJheShyKTtpPHI7KytpKWFbaV09by5jaGFyQ29kZUF0KGkpO3JldHVybiBuZXcgZihbYV0se3R5cGU6bn0pfWZ1bmN0aW9uIHgoZSx0KXtpZihcImRvd25sb2FkXCJpbiBkKXJldHVybiBkLmhyZWY9ZSxkLnNldEF0dHJpYnV0ZShcImRvd25sb2FkXCIsaCksZC5jbGFzc05hbWU9XCJkb3dubG9hZC1qcy1saW5rXCIsZC5pbm5lckhUTUw9XCJkb3dubG9hZGluZy4uLlwiLGQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIixkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGQpLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZC5jbGljaygpLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZCksITA9PT10JiZzZXRUaW1lb3V0KChmdW5jdGlvbigpe2EuVVJMLnJldm9rZU9iamVjdFVSTChkLmhyZWYpfSksMjUwKX0pLDY2KSwhMDtpZigvKFZlcnNpb24pXFwvKFxcZCspXFwuKFxcZCspKD86XFwuKFxcZCspKT8uKlNhZmFyaVxcLy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSlyZXR1cm4vXmRhdGE6Ly50ZXN0KGUpJiYoZT1cImRhdGE6XCIrZS5yZXBsYWNlKC9eZGF0YTooW1xcd1xcL1xcLVxcK10rKS8scykpLHdpbmRvdy5vcGVuKGUpfHxjb25maXJtKFwiRGlzcGxheWluZyBOZXcgRG9jdW1lbnRcXG5cXG5Vc2UgU2F2ZSBBcy4uLiB0byBkb3dubG9hZCwgdGhlbiBjbGljayBiYWNrIHRvIHJldHVybiB0byB0aGlzIHBhZ2UuXCIpJiYobG9jYXRpb24uaHJlZj1lKSwhMDt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobiksIXQmJi9eZGF0YTovLnRlc3QoZSkmJihlPVwiZGF0YTpcIitlLnJlcGxhY2UoL15kYXRhOihbXFx3XFwvXFwtXFwrXSspLyxzKSksbi5zcmM9ZSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe2RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobil9KSwzMzMpfWlmKHI9YyBpbnN0YW5jZW9mIGY/YzpuZXcgZihbY10se3R5cGU6bH0pLG5hdmlnYXRvci5tc1NhdmVCbG9iKXJldHVybiBuYXZpZ2F0b3IubXNTYXZlQmxvYihyLGgpO2lmKGEuVVJMKXgoYS5VUkwuY3JlYXRlT2JqZWN0VVJMKHIpLCEwKTtlbHNle2lmKFwic3RyaW5nXCI9PXR5cGVvZiByfHxyLmNvbnN0cnVjdG9yPT09cCl0cnl7cmV0dXJuIHgoXCJkYXRhOlwiK2wrXCI7YmFzZTY0LFwiK2EuYnRvYShyKSl9Y2F0Y2goZSl7cmV0dXJuIHgoXCJkYXRhOlwiK2wrXCIsXCIrZW5jb2RlVVJJQ29tcG9uZW50KHIpKX0oaT1uZXcgRmlsZVJlYWRlcikub25sb2FkPWZ1bmN0aW9uKGUpe3godGhpcy5yZXN1bHQpfSxpLnJlYWRBc0RhdGFVUkwocil9cmV0dXJuITB9fSk/by5hcHBseSh0LHIpOm8pfHwoZS5leHBvcnRzPWkpfSxcIi4vbm9kZV9tb2R1bGVzL2RyYWdnYWJpbGx5L2RyYWdnYWJpbGx5LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2RyYWdnYWJpbGx5L2RyYWdnYWJpbGx5LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI7XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG4vKiFcbiAqIERyYWdnYWJpbGx5IHYyLjIuMFxuICogTWFrZSB0aGF0IHNoaXogZHJhZ2dhYmxlXG4gKiBodHRwczovL2RyYWdnYWJpbGx5LmRlc2FuZHJvLmNvbVxuICogTUlUIGxpY2Vuc2VcbiAqL1xuIWZ1bmN0aW9uKGksYSl7bz1bbigvKiEgZ2V0LXNpemUvZ2V0LXNpemUgKi9cIi4vbm9kZV9tb2R1bGVzL2dldC1zaXplL2dldC1zaXplLmpzXCIpLG4oLyohIHVuaWRyYWdnZXIvdW5pZHJhZ2dlciAqL1wiLi9ub2RlX21vZHVsZXMvdW5pZHJhZ2dlci91bmlkcmFnZ2VyLmpzXCIpXSx2b2lkIDA9PT0ocj1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gbyhlLHQpe2Zvcih2YXIgbiBpbiB0KWVbbl09dFtuXTtyZXR1cm4gZX12YXIgcj1lLmpRdWVyeTtmdW5jdGlvbiBpKGUsdCl7dGhpcy5lbGVtZW50PVwic3RyaW5nXCI9PXR5cGVvZiBlP2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSk6ZSxyJiYodGhpcy4kZWxlbWVudD1yKHRoaXMuZWxlbWVudCkpLHRoaXMub3B0aW9ucz1vKHt9LHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMpLHRoaXMub3B0aW9uKHQpLHRoaXMuX2NyZWF0ZSgpfXZhciBhPWkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobi5wcm90b3R5cGUpO2kuZGVmYXVsdHM9e30sYS5vcHRpb249ZnVuY3Rpb24oZSl7byh0aGlzLm9wdGlvbnMsZSl9O3ZhciBzPXtyZWxhdGl2ZTohMCxhYnNvbHV0ZTohMCxmaXhlZDohMH07ZnVuY3Rpb24gbChlLHQsbil7cmV0dXJuIG49bnx8XCJyb3VuZFwiLHQ/TWF0aFtuXShlL3QpKnQ6ZX1hLl9jcmVhdGU9ZnVuY3Rpb24oKXt0aGlzLnBvc2l0aW9uPXt9LHRoaXMuX2dldFBvc2l0aW9uKCksdGhpcy5zdGFydFBvaW50PXt4OjAseTowfSx0aGlzLmRyYWdQb2ludD17eDowLHk6MH0sdGhpcy5zdGFydFBvc2l0aW9uPW8oe30sdGhpcy5wb3NpdGlvbik7dmFyIGU9Z2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsZW1lbnQpO3NbZS5wb3NpdGlvbl18fCh0aGlzLmVsZW1lbnQuc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiKSx0aGlzLm9uKFwicG9pbnRlckRvd25cIix0aGlzLm9uUG9pbnRlckRvd24pLHRoaXMub24oXCJwb2ludGVyTW92ZVwiLHRoaXMub25Qb2ludGVyTW92ZSksdGhpcy5vbihcInBvaW50ZXJVcFwiLHRoaXMub25Qb2ludGVyVXApLHRoaXMuZW5hYmxlKCksdGhpcy5zZXRIYW5kbGVzKCl9LGEuc2V0SGFuZGxlcz1mdW5jdGlvbigpe3RoaXMuaGFuZGxlcz10aGlzLm9wdGlvbnMuaGFuZGxlP3RoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMub3B0aW9ucy5oYW5kbGUpOlt0aGlzLmVsZW1lbnRdLHRoaXMuYmluZEhhbmRsZXMoKX0sYS5kaXNwYXRjaEV2ZW50PWZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1bdF0uY29uY2F0KG4pO3RoaXMuZW1pdEV2ZW50KGUsbyksdGhpcy5kaXNwYXRjaEpRdWVyeUV2ZW50KGUsdCxuKX0sYS5kaXNwYXRjaEpRdWVyeUV2ZW50PWZ1bmN0aW9uKHQsbixvKXt2YXIgcj1lLmpRdWVyeTtpZihyJiZ0aGlzLiRlbGVtZW50KXt2YXIgaT1yLkV2ZW50KG4pO2kudHlwZT10LHRoaXMuJGVsZW1lbnQudHJpZ2dlcihpLG8pfX0sYS5fZ2V0UG9zaXRpb249ZnVuY3Rpb24oKXt2YXIgZT1nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudCksdD10aGlzLl9nZXRQb3NpdGlvbkNvb3JkKGUubGVmdCxcIndpZHRoXCIpLG49dGhpcy5fZ2V0UG9zaXRpb25Db29yZChlLnRvcCxcImhlaWdodFwiKTt0aGlzLnBvc2l0aW9uLng9aXNOYU4odCk/MDp0LHRoaXMucG9zaXRpb24ueT1pc05hTihuKT8wOm4sdGhpcy5fYWRkVHJhbnNmb3JtUG9zaXRpb24oZSl9LGEuX2dldFBvc2l0aW9uQ29vcmQ9ZnVuY3Rpb24oZSxuKXtpZigtMSE9ZS5pbmRleE9mKFwiJVwiKSl7dmFyIG89dCh0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSk7cmV0dXJuIG8/cGFyc2VGbG9hdChlKS8xMDAqb1tuXTowfXJldHVybiBwYXJzZUludChlLDEwKX0sYS5fYWRkVHJhbnNmb3JtUG9zaXRpb249ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50cmFuc2Zvcm07aWYoMD09PXQuaW5kZXhPZihcIm1hdHJpeFwiKSl7dmFyIG49dC5zcGxpdChcIixcIiksbz0wPT09dC5pbmRleE9mKFwibWF0cml4M2RcIik/MTI6NCxyPXBhcnNlSW50KG5bb10sMTApLGk9cGFyc2VJbnQobltvKzFdLDEwKTt0aGlzLnBvc2l0aW9uLngrPXIsdGhpcy5wb3NpdGlvbi55Kz1pfX0sYS5vblBvaW50ZXJEb3duPWZ1bmN0aW9uKGUsdCl7dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJpcy1wb2ludGVyLWRvd25cIiksdGhpcy5kaXNwYXRjaEpRdWVyeUV2ZW50KFwicG9pbnRlckRvd25cIixlLFt0XSl9LGEuZHJhZ1N0YXJ0PWZ1bmN0aW9uKGUsdCl7dGhpcy5pc0VuYWJsZWQmJih0aGlzLl9nZXRQb3NpdGlvbigpLHRoaXMubWVhc3VyZUNvbnRhaW5tZW50KCksdGhpcy5zdGFydFBvc2l0aW9uLng9dGhpcy5wb3NpdGlvbi54LHRoaXMuc3RhcnRQb3NpdGlvbi55PXRoaXMucG9zaXRpb24ueSx0aGlzLnNldExlZnRUb3AoKSx0aGlzLmRyYWdQb2ludC54PTAsdGhpcy5kcmFnUG9pbnQueT0wLHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaXMtZHJhZ2dpbmdcIiksdGhpcy5kaXNwYXRjaEV2ZW50KFwiZHJhZ1N0YXJ0XCIsZSxbdF0pLHRoaXMuYW5pbWF0ZSgpKX0sYS5tZWFzdXJlQ29udGFpbm1lbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmdldENvbnRhaW5lcigpO2lmKGUpe3ZhciBuPXQodGhpcy5lbGVtZW50KSxvPXQoZSkscj10aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksaT1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGE9by5ib3JkZXJMZWZ0V2lkdGgrby5ib3JkZXJSaWdodFdpZHRoLHM9by5ib3JkZXJUb3BXaWR0aCtvLmJvcmRlckJvdHRvbVdpZHRoLGw9dGhpcy5yZWxhdGl2ZVN0YXJ0UG9zaXRpb249e3g6ci5sZWZ0LShpLmxlZnQrby5ib3JkZXJMZWZ0V2lkdGgpLHk6ci50b3AtKGkudG9wK28uYm9yZGVyVG9wV2lkdGgpfTt0aGlzLmNvbnRhaW5TaXplPXt3aWR0aDpvLndpZHRoLWEtbC54LW4ud2lkdGgsaGVpZ2h0Om8uaGVpZ2h0LXMtbC55LW4uaGVpZ2h0fX19LGEuZ2V0Q29udGFpbmVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcHRpb25zLmNvbnRhaW5tZW50O2lmKGUpcmV0dXJuIGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudD9lOlwic3RyaW5nXCI9PXR5cGVvZiBlP2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSk6dGhpcy5lbGVtZW50LnBhcmVudE5vZGV9LGEub25Qb2ludGVyTW92ZT1mdW5jdGlvbihlLHQsbil7dGhpcy5kaXNwYXRjaEpRdWVyeUV2ZW50KFwicG9pbnRlck1vdmVcIixlLFt0LG5dKX0sYS5kcmFnTW92ZT1mdW5jdGlvbihlLHQsbil7aWYodGhpcy5pc0VuYWJsZWQpe3ZhciBvPW4ueCxyPW4ueSxpPXRoaXMub3B0aW9ucy5ncmlkLGE9aSYmaVswXSxzPWkmJmlbMV07bz1sKG8sYSkscj1sKHIscyksbz10aGlzLmNvbnRhaW5EcmFnKFwieFwiLG8sYSkscj10aGlzLmNvbnRhaW5EcmFnKFwieVwiLHIscyksbz1cInlcIj09dGhpcy5vcHRpb25zLmF4aXM/MDpvLHI9XCJ4XCI9PXRoaXMub3B0aW9ucy5heGlzPzA6cix0aGlzLnBvc2l0aW9uLng9dGhpcy5zdGFydFBvc2l0aW9uLngrbyx0aGlzLnBvc2l0aW9uLnk9dGhpcy5zdGFydFBvc2l0aW9uLnkrcix0aGlzLmRyYWdQb2ludC54PW8sdGhpcy5kcmFnUG9pbnQueT1yLHRoaXMuZGlzcGF0Y2hFdmVudChcImRyYWdNb3ZlXCIsZSxbdCxuXSl9fSxhLmNvbnRhaW5EcmFnPWZ1bmN0aW9uKGUsdCxuKXtpZighdGhpcy5vcHRpb25zLmNvbnRhaW5tZW50KXJldHVybiB0O3ZhciBvPVwieFwiPT1lP1wid2lkdGhcIjpcImhlaWdodFwiLHI9bCgtdGhpcy5yZWxhdGl2ZVN0YXJ0UG9zaXRpb25bZV0sbixcImNlaWxcIiksaT10aGlzLmNvbnRhaW5TaXplW29dO3JldHVybiBpPWwoaSxuLFwiZmxvb3JcIiksTWF0aC5tYXgocixNYXRoLm1pbihpLHQpKX0sYS5vblBvaW50ZXJVcD1mdW5jdGlvbihlLHQpe3RoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtcG9pbnRlci1kb3duXCIpLHRoaXMuZGlzcGF0Y2hKUXVlcnlFdmVudChcInBvaW50ZXJVcFwiLGUsW3RdKX0sYS5kcmFnRW5kPWZ1bmN0aW9uKGUsdCl7dGhpcy5pc0VuYWJsZWQmJih0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtPVwiXCIsdGhpcy5zZXRMZWZ0VG9wKCksdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1kcmFnZ2luZ1wiKSx0aGlzLmRpc3BhdGNoRXZlbnQoXCJkcmFnRW5kXCIsZSxbdF0pKX0sYS5hbmltYXRlPWZ1bmN0aW9uKCl7aWYodGhpcy5pc0RyYWdnaW5nKXt0aGlzLnBvc2l0aW9uRHJhZygpO3ZhciBlPXRoaXM7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKChmdW5jdGlvbigpe2UuYW5pbWF0ZSgpfSkpfX0sYS5zZXRMZWZ0VG9wPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LnN0eWxlLmxlZnQ9dGhpcy5wb3NpdGlvbi54K1wicHhcIix0aGlzLmVsZW1lbnQuc3R5bGUudG9wPXRoaXMucG9zaXRpb24ueStcInB4XCJ9LGEucG9zaXRpb25EcmFnPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybT1cInRyYW5zbGF0ZTNkKCBcIit0aGlzLmRyYWdQb2ludC54K1wicHgsIFwiK3RoaXMuZHJhZ1BvaW50LnkrXCJweCwgMClcIn0sYS5zdGF0aWNDbGljaz1mdW5jdGlvbihlLHQpe3RoaXMuZGlzcGF0Y2hFdmVudChcInN0YXRpY0NsaWNrXCIsZSxbdF0pfSxhLnNldFBvc2l0aW9uPWZ1bmN0aW9uKGUsdCl7dGhpcy5wb3NpdGlvbi54PWUsdGhpcy5wb3NpdGlvbi55PXQsdGhpcy5zZXRMZWZ0VG9wKCl9LGEuZW5hYmxlPWZ1bmN0aW9uKCl7dGhpcy5pc0VuYWJsZWQ9ITB9LGEuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuaXNFbmFibGVkPSExLHRoaXMuaXNEcmFnZ2luZyYmdGhpcy5kcmFnRW5kKCl9LGEuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuZGlzYWJsZSgpLHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm09XCJcIix0aGlzLmVsZW1lbnQuc3R5bGUubGVmdD1cIlwiLHRoaXMuZWxlbWVudC5zdHlsZS50b3A9XCJcIix0aGlzLmVsZW1lbnQuc3R5bGUucG9zaXRpb249XCJcIix0aGlzLnVuYmluZEhhbmRsZXMoKSx0aGlzLiRlbGVtZW50JiZ0aGlzLiRlbGVtZW50LnJlbW92ZURhdGEoXCJkcmFnZ2FiaWxseVwiKX0sYS5faW5pdD1mdW5jdGlvbigpe30sciYmci5icmlkZ2V0JiZyLmJyaWRnZXQoXCJkcmFnZ2FiaWxseVwiLGkpO3JldHVybiBpfShpLGUsdCl9LmFwcGx5KHQsbykpfHwoZS5leHBvcnRzPXIpfSh3aW5kb3cpfSxcIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvZnVuY3Rpb24vbm9vcC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9mdW5jdGlvbi9ub29wLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt9fSxcIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvYXNzaWduL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9bigvKiEgLi9pcy1pbXBsZW1lbnRlZCAqL1wiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvYXNzaWduL2lzLWltcGxlbWVudGVkLmpzXCIpKCk/T2JqZWN0LmFzc2lnbjpuKC8qISAuL3NoaW0gKi9cIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9zaGltLmpzXCIpfSxcIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9pcy1pbXBsZW1lbnRlZC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvYXNzaWduL2lzLWltcGxlbWVudGVkLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgZSx0PU9iamVjdC5hc3NpZ247cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHQoZT17Zm9vOlwicmF6XCJ9LHtiYXI6XCJkd2FcIn0se3Ryenk6XCJ0cnp5XCJ9KSxlLmZvbytlLmJhcitlLnRyenk9PT1cInJhemR3YXRyenlcIil9fSxcIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9zaGltLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9zaGltLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oLyohIC4uL2tleXMgKi9cIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2tleXMvaW5kZXguanNcIikscj1uKC8qISAuLi92YWxpZC12YWx1ZSAqL1wiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvdmFsaWQtdmFsdWUuanNcIiksaT1NYXRoLm1heDtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgbixhLHMsbD1pKGFyZ3VtZW50cy5sZW5ndGgsMik7Zm9yKGU9T2JqZWN0KHIoZSkpLHM9ZnVuY3Rpb24obyl7dHJ5e2Vbb109dFtvXX1jYXRjaChlKXtufHwobj1lKX19LGE9MTthPGw7KythKXQ9YXJndW1lbnRzW2FdLG8odCkuZm9yRWFjaChzKTtpZih2b2lkIDAhPT1uKXRocm93IG47cmV0dXJuIGV9fSxcIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2lzLXZhbHVlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2lzLXZhbHVlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oLyohIC4uL2Z1bmN0aW9uL25vb3AgKi9cIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvZnVuY3Rpb24vbm9vcC5qc1wiKSgpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZSE9PW8mJm51bGwhPT1lfX0sXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9rZXlzL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3Qva2V5cy9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1uKC8qISAuL2lzLWltcGxlbWVudGVkICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9rZXlzL2lzLWltcGxlbWVudGVkLmpzXCIpKCk/T2JqZWN0LmtleXM6bigvKiEgLi9zaGltICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9rZXlzL3NoaW0uanNcIil9LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3Qva2V5cy9pcy1pbXBsZW1lbnRlZC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2tleXMvaXMtaW1wbGVtZW50ZWQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIE9iamVjdC5rZXlzKFwicHJpbWl0aXZlXCIpLCEwfWNhdGNoKGUpe3JldHVybiExfX19LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3Qva2V5cy9zaGltLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9rZXlzL3NoaW0uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oLyohIC4uL2lzLXZhbHVlICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9pcy12YWx1ZS5qc1wiKSxyPU9iamVjdC5rZXlzO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gcihvKGUpP09iamVjdChlKTplKX19LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3Qvbm9ybWFsaXplLW9wdGlvbnMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3Qvbm9ybWFsaXplLW9wdGlvbnMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigvKiEgLi9pcy12YWx1ZSAqL1wiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvaXMtdmFsdWUuanNcIikscj1BcnJheS5wcm90b3R5cGUuZm9yRWFjaCxpPU9iamVjdC5jcmVhdGUsYT1mdW5jdGlvbihlLHQpe3ZhciBuO2ZvcihuIGluIGUpdFtuXT1lW25dfTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9aShudWxsKTtyZXR1cm4gci5jYWxsKGFyZ3VtZW50cywoZnVuY3Rpb24oZSl7byhlKSYmYShPYmplY3QoZSksdCl9KSksdH19LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvdmFsaWQtY2FsbGFibGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvdmFsaWQtY2FsbGFibGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO3JldHVybiBlfX0sXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC92YWxpZC12YWx1ZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC92YWxpZC12YWx1ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKC8qISAuL2lzLXZhbHVlICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9pcy12YWx1ZS5qc1wiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIW8oZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgbnVsbCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGV9fSxcIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9lczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPW4oLyohIC4vaXMtaW1wbGVtZW50ZWQgKi9cIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaXMtaW1wbGVtZW50ZWQuanNcIikoKT9TdHJpbmcucHJvdG90eXBlLmNvbnRhaW5zOm4oLyohIC4vc2hpbSAqL1wiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucy9zaGltLmpzXCIpfSxcIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaXMtaW1wbGVtZW50ZWQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9lczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zL2lzLWltcGxlbWVudGVkLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89XCJyYXpkd2F0cnp5XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygby5jb250YWlucyYmKCEwPT09by5jb250YWlucyhcImR3YVwiKSYmITE9PT1vLmNvbnRhaW5zKFwiZm9vXCIpKX19LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucy9zaGltLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9lczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zL3NoaW0uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvPVN0cmluZy5wcm90b3R5cGUuaW5kZXhPZjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uY2FsbCh0aGlzLGUsYXJndW1lbnRzWzFdKT4tMX19LFwiLi9ub2RlX21vZHVsZXMvZXYtZW1pdHRlci9ldi1lbWl0dGVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9ldi1lbWl0dGVyL2V2LWVtaXR0ZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI7XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LHZvaWQgMD09PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lm9uPWZ1bmN0aW9uKGUsdCl7aWYoZSYmdCl7dmFyIG49dGhpcy5fZXZlbnRzPXRoaXMuX2V2ZW50c3x8e30sbz1uW2VdPW5bZV18fFtdO3JldHVybi0xPT1vLmluZGV4T2YodCkmJm8ucHVzaCh0KSx0aGlzfX0sdC5vbmNlPWZ1bmN0aW9uKGUsdCl7aWYoZSYmdCl7dGhpcy5vbihlLHQpO3ZhciBuPXRoaXMuX29uY2VFdmVudHM9dGhpcy5fb25jZUV2ZW50c3x8e307cmV0dXJuKG5bZV09bltlXXx8e30pW3RdPSEwLHRoaXN9fSx0Lm9mZj1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuX2V2ZW50cyYmdGhpcy5fZXZlbnRzW2VdO2lmKG4mJm4ubGVuZ3RoKXt2YXIgbz1uLmluZGV4T2YodCk7cmV0dXJuLTEhPW8mJm4uc3BsaWNlKG8sMSksdGhpc319LHQuZW1pdEV2ZW50PWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5fZXZlbnRzJiZ0aGlzLl9ldmVudHNbZV07aWYobiYmbi5sZW5ndGgpe249bi5zbGljZSgwKSx0PXR8fFtdO2Zvcih2YXIgbz10aGlzLl9vbmNlRXZlbnRzJiZ0aGlzLl9vbmNlRXZlbnRzW2VdLHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIGk9bltyXTtvJiZvW2ldJiYodGhpcy5vZmYoZSxpKSxkZWxldGUgb1tpXSksaS5hcHBseSh0aGlzLHQpfXJldHVybiB0aGlzfX0sdC5hbGxPZmY9ZnVuY3Rpb24oKXtkZWxldGUgdGhpcy5fZXZlbnRzLGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzfSxlfSk/by5jYWxsKHQsbix0LGUpOm8pfHwoZS5leHBvcnRzPXIpfSxcIi4vbm9kZV9tb2R1bGVzL2V2ZW50LWVtaXR0ZXIvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9ldmVudC1lbWl0dGVyL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scixpLGEscyxsLGMsdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxkPW4oLyohIGQgKi9cIi4vbm9kZV9tb2R1bGVzL2QvaW5kZXguanNcIikscD1uKC8qISBlczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZSAqL1wiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvdmFsaWQtY2FsbGFibGUuanNcIiksZj1GdW5jdGlvbi5wcm90b3R5cGUuYXBwbHksaD1GdW5jdGlvbi5wcm90b3R5cGUuY2FsbCxnPU9iamVjdC5jcmVhdGUsdj1PYmplY3QuZGVmaW5lUHJvcGVydHksbT1PYmplY3QuZGVmaW5lUHJvcGVydGllcyx5PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksYj17Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITB9O3I9ZnVuY3Rpb24oZSx0KXt2YXIgbixyO3JldHVybiBwKHQpLHI9dGhpcyxvLmNhbGwodGhpcyxlLG49ZnVuY3Rpb24oKXtpLmNhbGwocixlLG4pLGYuY2FsbCh0LHRoaXMsYXJndW1lbnRzKX0pLG4uX19lZU9uY2VMaXN0ZW5lcl9fPXQsdGhpc30scz17b246bz1mdW5jdGlvbihlLHQpe3ZhciBuO3JldHVybiBwKHQpLHkuY2FsbCh0aGlzLFwiX19lZV9fXCIpP249dGhpcy5fX2VlX186KG49Yi52YWx1ZT1nKG51bGwpLHYodGhpcyxcIl9fZWVfX1wiLGIpLGIudmFsdWU9bnVsbCksbltlXT9cIm9iamVjdFwiPT09dShuW2VdKT9uW2VdLnB1c2godCk6bltlXT1bbltlXSx0XTpuW2VdPXQsdGhpc30sb25jZTpyLG9mZjppPWZ1bmN0aW9uKGUsdCl7dmFyIG4sbyxyLGk7aWYocCh0KSwheS5jYWxsKHRoaXMsXCJfX2VlX19cIikpcmV0dXJuIHRoaXM7aWYoIShuPXRoaXMuX19lZV9fKVtlXSlyZXR1cm4gdGhpcztpZihcIm9iamVjdFwiPT09KHZvaWQgMD09PShvPW5bZV0pP1widW5kZWZpbmVkXCI6dShvKSkpZm9yKGk9MDtyPW9baV07KytpKXIhPT10JiZyLl9fZWVPbmNlTGlzdGVuZXJfXyE9PXR8fCgyPT09by5sZW5ndGg/bltlXT1vW2k/MDoxXTpvLnNwbGljZShpLDEpKTtlbHNlIG8hPT10JiZvLl9fZWVPbmNlTGlzdGVuZXJfXyE9PXR8fGRlbGV0ZSBuW2VdO3JldHVybiB0aGlzfSxlbWl0OmE9ZnVuY3Rpb24oZSl7dmFyIHQsbixvLHIsaTtpZih5LmNhbGwodGhpcyxcIl9fZWVfX1wiKSYmKHI9dGhpcy5fX2VlX19bZV0pKWlmKFwib2JqZWN0XCI9PT0odm9pZCAwPT09cj9cInVuZGVmaW5lZFwiOnUocikpKXtmb3Iobj1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KG4tMSksdD0xO3Q8bjsrK3QpaVt0LTFdPWFyZ3VtZW50c1t0XTtmb3Iocj1yLnNsaWNlKCksdD0wO289clt0XTsrK3QpZi5jYWxsKG8sdGhpcyxpKX1lbHNlIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDE6aC5jYWxsKHIsdGhpcyk7YnJlYWs7Y2FzZSAyOmguY2FsbChyLHRoaXMsYXJndW1lbnRzWzFdKTticmVhaztjYXNlIDM6aC5jYWxsKHIsdGhpcyxhcmd1bWVudHNbMV0sYXJndW1lbnRzWzJdKTticmVhaztkZWZhdWx0OmZvcihuPWFyZ3VtZW50cy5sZW5ndGgsaT1uZXcgQXJyYXkobi0xKSx0PTE7dDxuOysrdClpW3QtMV09YXJndW1lbnRzW3RdO2YuY2FsbChyLHRoaXMsaSl9fX0sbD17b246ZChvKSxvbmNlOmQociksb2ZmOmQoaSksZW1pdDpkKGEpfSxjPW0oe30sbCksZS5leHBvcnRzPXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/ZyhjKTptKE9iamVjdChlKSxsKX0sdC5tZXRob2RzPXN9LFwiLi9ub2RlX21vZHVsZXMvZ2V0LXNpemUvZ2V0LXNpemUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZ2V0LXNpemUvZ2V0LXNpemUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scixpPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9O3dpbmRvdyx2b2lkIDA9PT0ocj1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD1wYXJzZUZsb2F0KGUpO3JldHVybi0xPT1lLmluZGV4T2YoXCIlXCIpJiYhaXNOYU4odCkmJnR9dmFyIHQ9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGNvbnNvbGU/ZnVuY3Rpb24oKXt9OmZ1bmN0aW9uKGUpe2NvbnNvbGUuZXJyb3IoZSl9LG49W1wicGFkZGluZ0xlZnRcIixcInBhZGRpbmdSaWdodFwiLFwicGFkZGluZ1RvcFwiLFwicGFkZGluZ0JvdHRvbVwiLFwibWFyZ2luTGVmdFwiLFwibWFyZ2luUmlnaHRcIixcIm1hcmdpblRvcFwiLFwibWFyZ2luQm90dG9tXCIsXCJib3JkZXJMZWZ0V2lkdGhcIixcImJvcmRlclJpZ2h0V2lkdGhcIixcImJvcmRlclRvcFdpZHRoXCIsXCJib3JkZXJCb3R0b21XaWR0aFwiXSxvPW4ubGVuZ3RoO2Z1bmN0aW9uIHIoZSl7dmFyIG49Z2V0Q29tcHV0ZWRTdHlsZShlKTtyZXR1cm4gbnx8dChcIlN0eWxlIHJldHVybmVkIFwiK24rXCIuIEFyZSB5b3UgcnVubmluZyB0aGlzIGNvZGUgaW4gYSBoaWRkZW4gaWZyYW1lIG9uIEZpcmVmb3g/IFNlZSBodHRwczovL2JpdC5seS9nZXRzaXplYnVnMVwiKSxufXZhciBhLHM9ITE7ZnVuY3Rpb24gbCh0KXtpZihmdW5jdGlvbigpe2lmKCFzKXtzPSEwO3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dC5zdHlsZS53aWR0aD1cIjIwMHB4XCIsdC5zdHlsZS5wYWRkaW5nPVwiMXB4IDJweCAzcHggNHB4XCIsdC5zdHlsZS5ib3JkZXJTdHlsZT1cInNvbGlkXCIsdC5zdHlsZS5ib3JkZXJXaWR0aD1cIjFweCAycHggM3B4IDRweFwiLHQuc3R5bGUuYm94U2l6aW5nPVwiYm9yZGVyLWJveFwiO3ZhciBuPWRvY3VtZW50LmJvZHl8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtuLmFwcGVuZENoaWxkKHQpO3ZhciBvPXIodCk7YT0yMDA9PU1hdGgucm91bmQoZShvLndpZHRoKSksbC5pc0JveFNpemVPdXRlcj1hLG4ucmVtb3ZlQ2hpbGQodCl9fSgpLFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQpKSx0JiZcIm9iamVjdFwiPT0odm9pZCAwPT09dD9cInVuZGVmaW5lZFwiOmkodCkpJiZ0Lm5vZGVUeXBlKXt2YXIgYz1yKHQpO2lmKFwibm9uZVwiPT1jLmRpc3BsYXkpcmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciBlPXt3aWR0aDowLGhlaWdodDowLGlubmVyV2lkdGg6MCxpbm5lckhlaWdodDowLG91dGVyV2lkdGg6MCxvdXRlckhlaWdodDowfSx0PTA7dDxvO3QrKyllW25bdF1dPTA7cmV0dXJuIGV9KCk7dmFyIHU9e307dS53aWR0aD10Lm9mZnNldFdpZHRoLHUuaGVpZ2h0PXQub2Zmc2V0SGVpZ2h0O2Zvcih2YXIgZD11LmlzQm9yZGVyQm94PVwiYm9yZGVyLWJveFwiPT1jLmJveFNpemluZyxwPTA7cDxvO3ArKyl7dmFyIGY9bltwXSxoPWNbZl0sZz1wYXJzZUZsb2F0KGgpO3VbZl09aXNOYU4oZyk/MDpnfXZhciB2PXUucGFkZGluZ0xlZnQrdS5wYWRkaW5nUmlnaHQsbT11LnBhZGRpbmdUb3ArdS5wYWRkaW5nQm90dG9tLHk9dS5tYXJnaW5MZWZ0K3UubWFyZ2luUmlnaHQsYj11Lm1hcmdpblRvcCt1Lm1hcmdpbkJvdHRvbSx4PXUuYm9yZGVyTGVmdFdpZHRoK3UuYm9yZGVyUmlnaHRXaWR0aCx3PXUuYm9yZGVyVG9wV2lkdGgrdS5ib3JkZXJCb3R0b21XaWR0aCxfPWQmJmEsaz1lKGMud2lkdGgpOyExIT09ayYmKHUud2lkdGg9aysoXz8wOnYreCkpO3ZhciBFPWUoYy5oZWlnaHQpO3JldHVybiExIT09RSYmKHUuaGVpZ2h0PUUrKF8/MDptK3cpKSx1LmlubmVyV2lkdGg9dS53aWR0aC0odit4KSx1LmlubmVySGVpZ2h0PXUuaGVpZ2h0LShtK3cpLHUub3V0ZXJXaWR0aD11LndpZHRoK3ksdS5vdXRlckhlaWdodD11LmhlaWdodCtiLHV9fXJldHVybiBsfSk/by5jYWxsKHQsbix0LGUpOm8pfHwoZS5leHBvcnRzPXIpfSxcIi4vbm9kZV9tb2R1bGVzL3Bhc2l0aW9uL2Rpc3QvcGFzaXRpb24uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9wYXNpdGlvbi9kaXN0L3Bhc2l0aW9uLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scixpLGE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX07aT1mdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKGUsdCl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZTtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpKXJldHVybiBmdW5jdGlvbihlLHQpe3ZhciBuPVtdLG89ITAscj0hMSxpPXZvaWQgMDt0cnl7Zm9yKHZhciBhLHM9ZVtTeW1ib2wuaXRlcmF0b3JdKCk7IShvPShhPXMubmV4dCgpKS5kb25lKSYmKG4ucHVzaChhLnZhbHVlKSwhdHx8bi5sZW5ndGghPT10KTtvPSEwKTt9Y2F0Y2goZSl7cj0hMCxpPWV9ZmluYWxseXt0cnl7IW8mJnMucmV0dXJuJiZzLnJldHVybigpfWZpbmFsbHl7aWYocil0aHJvdyBpfX1yZXR1cm4gbn0oZSx0KTt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKX0sdD0yKk1hdGguUEksbj1mdW5jdGlvbihlLHQsbixvLHIsaSxhKXt2YXIgcz1lLngsbD1lLnk7cmV0dXJue3g6byoocyo9dCktcioobCo9bikraSx5OnIqcytvKmwrYX19LG89ZnVuY3Rpb24oZSx0KXt2YXIgbj00LzMqTWF0aC50YW4odC80KSxvPU1hdGguY29zKGUpLHI9TWF0aC5zaW4oZSksaT1NYXRoLmNvcyhlK3QpLGE9TWF0aC5zaW4oZSt0KTtyZXR1cm5be3g6by1yKm4seTpyK28qbn0se3g6aSthKm4seTphLWkqbn0se3g6aSx5OmF9XX0scj1mdW5jdGlvbihlLHQsbixvKXt2YXIgcj1lKm8tdCpuPDA/LTE6MSxpPShlKm4rdCpvKS8oTWF0aC5zcXJ0KGUqZSt0KnQpKk1hdGguc3FydChlKmUrdCp0KSk7cmV0dXJuIGk+MSYmKGk9MSksaTwtMSYmKGk9LTEpLHIqTWF0aC5hY29zKGkpfSxpPWZ1bmN0aW9uKGkpe3ZhciBhPWkucHgscz1pLnB5LGw9aS5jeCxjPWkuY3ksdT1pLnJ4LGQ9aS5yeSxwPWkueEF4aXNSb3RhdGlvbixmPXZvaWQgMD09PXA/MDpwLGg9aS5sYXJnZUFyY0ZsYWcsZz12b2lkIDA9PT1oPzA6aCx2PWkuc3dlZXBGbGFnLG09dm9pZCAwPT09dj8wOnYseT1bXTtpZigwPT09dXx8MD09PWQpcmV0dXJuW107dmFyIGI9TWF0aC5zaW4oZip0LzM2MCkseD1NYXRoLmNvcyhmKnQvMzYwKSx3PXgqKGEtbCkvMitiKihzLWMpLzIsXz0tYiooYS1sKS8yK3gqKHMtYykvMjtpZigwPT09dyYmMD09PV8pcmV0dXJuW107dT1NYXRoLmFicyh1KSxkPU1hdGguYWJzKGQpO3ZhciBrPU1hdGgucG93KHcsMikvTWF0aC5wb3codSwyKStNYXRoLnBvdyhfLDIpL01hdGgucG93KGQsMik7az4xJiYodSo9TWF0aC5zcXJ0KGspLGQqPU1hdGguc3FydChrKSk7dmFyIEU9ZnVuY3Rpb24oZSxuLG8saSxhLHMsbCxjLHUsZCxwLGYpe3ZhciBoPU1hdGgucG93KGEsMiksZz1NYXRoLnBvdyhzLDIpLHY9TWF0aC5wb3cocCwyKSxtPU1hdGgucG93KGYsMikseT1oKmctaCptLWcqdjt5PDAmJih5PTApLHkvPWgqbStnKnY7dmFyIGI9KHk9TWF0aC5zcXJ0KHkpKihsPT09Yz8tMToxKSkqYS9zKmYseD15Ki1zL2EqcCx3PWQqYi11KngrKGUrbykvMixfPXUqYitkKngrKG4raSkvMixrPShwLWIpL2EsRT0oZi14KS9zLEM9KC1wLWIpL2EsUz0oLWYteCkvcyxQPXIoMSwwLGssRSksaj1yKGssRSxDLFMpO3JldHVybiAwPT09YyYmaj4wJiYoai09dCksMT09PWMmJmo8MCYmKGorPXQpLFt3LF8sUCxqXX0oYSxzLGwsYyx1LGQsZyxtLGIseCx3LF8pLEM9ZShFLDQpLFM9Q1swXSxQPUNbMV0saj1DWzJdLFQ9Q1szXSxNPU1hdGgubWF4KE1hdGguY2VpbChNYXRoLmFicyhUKS8odC80KSksMSk7VC89TTtmb3IodmFyIE89MDtPPE07TysrKXkucHVzaChvKGosVCkpLGorPVQ7cmV0dXJuIHkubWFwKChmdW5jdGlvbihlKXt2YXIgdD1uKGVbMF0sdSxkLHgsYixTLFApLG89dC54LHI9dC55LGk9bihlWzFdLHUsZCx4LGIsUyxQKSxhPWkueCxzPWkueSxsPW4oZVsyXSx1LGQseCxiLFMsUCk7cmV0dXJue3gxOm8seTE6cix4MjphLHkyOnMseDpsLngseTpsLnl9fSkpfSxhPXthOjcsYzo2LGg6MSxsOjIsbToyLHE6NCxzOjQsdDoyLHY6MSx6OjB9LHM9LyhbYXN0dnpxbWhsY10pKFteYXN0dnpxbWhsY10qKS9naSxsPS8tP1swLTldKlxcLj9bMC05XSsoPzplWy0rXT9cXGQrKT8vZ2k7ZnVuY3Rpb24gYyhlKXt2YXIgdD1lWzBdWzBdLG49ZVswXVsxXSxvPXQscj1uO3JldHVybiBlLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBpPWVbMF0sYT1lWzJdLHM9ZVs0XSxsPWVbNl0sYz1lWzFdLHU9ZVszXSxkPWVbNV0scD1lWzddO3Q9TWF0aC5taW4odCxpLGEscyxsKSxuPU1hdGgubWluKG4sYyx1LGQscCksbz1NYXRoLm1heChvLGksYSxzLGwpLHI9TWF0aC5tYXgocixjLHUsZCxwKX0pKSxbdCxuLG8scl19ZnVuY3Rpb24gdShlLHQpe3ZhciBuPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxuPTA7bjxlO24rKyl7Zm9yKHZhciBvPVtdLHI9MDtyPGU7cisrKXt2YXIgaT1yK247aT5lLTEmJihpLT1lKSxvW2ldPXJ9dC5wdXNoKG8pfXJldHVybiB0fShlLmxlbmd0aCksbz1bXTtuLmZvckVhY2goKGZ1bmN0aW9uKG4pe3ZhciByPTAsaT0wO24uZm9yRWFjaCgoZnVuY3Rpb24obil7dmFyIG8sYSxzLGwsYyx1LGQscCxmLGgsZyx2LG0seSxiLHgsdyxfO3IrPShvPWVbbl0sYT10W2krK10scz1vWzBdLGw9b1syXSxjPW9bNF0sdT1vWzZdLGQ9b1sxXSxwPW9bM10sZj1vWzVdLGg9b1s3XSxnPWFbMF0sdj1hWzJdLG09YVs0XSx5PWFbNl0sYj1hWzFdLHg9YVszXSx3PWFbNV0sXz1hWzddLE1hdGguc3FydChNYXRoLnBvdyhnLXMsMikrTWF0aC5wb3coYi1kLDIpKStNYXRoLnNxcnQoTWF0aC5wb3codi1sLDIpK01hdGgucG93KHgtcCwyKSkrTWF0aC5zcXJ0KE1hdGgucG93KG0tYywyKStNYXRoLnBvdyh3LWYsMikpK01hdGguc3FydChNYXRoLnBvdyh5LXUsMikrTWF0aC5wb3coXy1oLDIpKSl9KSksby5wdXNoKHtpbmRleDpuLGRpc3RhbmNlOnJ9KX0pKSxvLnNvcnQoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuZGlzdGFuY2UtdC5kaXN0YW5jZX0pKTt2YXIgcj1bXTtyZXR1cm4gb1swXS5pbmRleC5mb3JFYWNoKChmdW5jdGlvbih0KXtyLnB1c2goZVt0XSl9KSkscn1mdW5jdGlvbiBkKGUsdCl7dmFyIG49ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MDtuPGU7bisrKXQucHVzaChuKTtyZXR1cm4gbz1bXSxyPVtdLGZ1bmN0aW9uIGUodCl7dmFyIG4saTtmb3Iobj0wO248dC5sZW5ndGg7bisrKWk9dC5zcGxpY2UobiwxKVswXSxyLnB1c2goaSksMD09dC5sZW5ndGgmJm8ucHVzaChyLnNsaWNlKCkpLGUodCksdC5zcGxpY2UobiwwLGkpLHIucG9wKCk7cmV0dXJuIG99KHQpO3ZhciBvLHJ9KGUubGVuZ3RoKSxvPVtdO24uZm9yRWFjaCgoZnVuY3Rpb24obil7dmFyIHI9MDtuLmZvckVhY2goKGZ1bmN0aW9uKG4pe3ZhciBvLGk7cis9KG89YyhlW25dKSxpPWModFtuXSksTWF0aC5zcXJ0KE1hdGgucG93KG9bMF0taVswXSwyKStNYXRoLnBvdyhvWzFdLWlbMV0sMikpK01hdGguc3FydChNYXRoLnBvdyhvWzJdLWlbMl0sMikrTWF0aC5wb3cob1szXS1pWzNdLDIpKSl9KSksby5wdXNoKHtpbmRleDpuLGRpc3RhbmNlOnJ9KX0pKSxvLnNvcnQoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuZGlzdGFuY2UtdC5kaXN0YW5jZX0pKTt2YXIgcj1bXTtyZXR1cm4gb1swXS5pbmRleC5mb3JFYWNoKChmdW5jdGlvbih0KXtyLnB1c2goZVt0XSl9KSkscn12YXIgcD17fTtmdW5jdGlvbiBmKGUsdCxuLG8scixpLGEscyxsLGMpe3ZhciB1PShuLWUpKmwrZSxkPShvLXQpKmwrdCxwPShyLW4pKmwrbixmPShpLW8pKmwrbyxoPShwLXUpKmwrdSxnPShmLWQpKmwrZCx2PSgoKGEtcikqbCtyLXApKmwrcC1oKSpsK2gsbT0oKChzLWkpKmwraS1mKSpsK2YtZykqbCtnO3JldHVybiBjP1t2LG0saCxnLHUsZCxlLHRdOltlLHQsdSxkLGgsZyx2LG1dfWZ1bmN0aW9uIGgoZSx0KXtmb3IodmFyIG49ZnVuY3Rpb24odCl7dmFyIG49ZVtlLmxlbmd0aC0xXSxvPVtdO24uZm9yRWFjaCgoZnVuY3Rpb24oZSl7by5wdXNoKGUuc2xpY2UoMCkpfSkpLGUucHVzaChvKX0sbz0wO288dDtvKyspbigpfXJldHVybiBwLnBhcnNlcj1mdW5jdGlvbihlKXt2YXIgdD1bXTtyZXR1cm4gZS5yZXBsYWNlKHMsKGZ1bmN0aW9uKGUsbixvKXt2YXIgcj1uLnRvTG93ZXJDYXNlKCk7Zm9yKG89ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5tYXRjaChsKTtyZXR1cm4gdD90Lm1hcChOdW1iZXIpOltdfShvKSxcIm1cIj09ciYmby5sZW5ndGg+MiYmKHQucHVzaChbbl0uY29uY2F0KG8uc3BsaWNlKDAsMikpKSxyPVwibFwiLG49XCJtXCI9PW4/XCJsXCI6XCJMXCIpOzspe2lmKG8ubGVuZ3RoPT1hW3JdKXJldHVybiBvLnVuc2hpZnQobiksdC5wdXNoKG8pO2lmKG8ubGVuZ3RoPGFbcl0pdGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIHBhdGggZGF0YVwiKTt0LnB1c2goW25dLmNvbmNhdChvLnNwbGljZSgwLGFbcl0pKSl9fSkpLHR9LHAubGVycEN1cnZlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gcC5sZXJwUG9pbnRzKGVbMF0sZVsxXSx0WzBdLHRbMV0sbikuY29uY2F0KHAubGVycFBvaW50cyhlWzJdLGVbM10sdFsyXSx0WzNdLG4pKS5jb25jYXQocC5sZXJwUG9pbnRzKGVbNF0sZVs1XSx0WzRdLHRbNV0sbikpLmNvbmNhdChwLmxlcnBQb2ludHMoZVs2XSxlWzddLHRbNl0sdFs3XSxuKSl9LHAubGVycFBvaW50cz1mdW5jdGlvbihlLHQsbixvLHIpe3JldHVybltlKyhuLWUpKnIsdCsoby10KSpyXX0scC5xMmI9ZnVuY3Rpb24oZSx0LG4sbyxyLGkpe3JldHVybltlLHQsKGUrMipuKS8zLCh0KzIqbykvMywocisyKm4pLzMsKGkrMipvKS8zLHIsaV19LHAucGF0aDJzaGFwZXM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXAucGFyc2VyKGUpLG49MCxvPTAscj0wLGE9dC5sZW5ndGgscz1bXSxsPW51bGwsYz12b2lkIDAsdT12b2lkIDAsZD12b2lkIDAsZj12b2lkIDAsaD12b2lkIDAsZz12b2lkIDAsdj12b2lkIDA7cjxhO3IrKyl7dmFyIG09dFtyXSx5PW1bMF0sYj10W3ItMV07c3dpdGNoKHkpe2Nhc2VcIm1cIjpzW2g9cy5sZW5ndGhdPVtdLGw9c1toXSxuKz1tWzFdLG8rPW1bMl07YnJlYWs7Y2FzZVwiTVwiOnNbaD1zLmxlbmd0aF09W10sbD1zW2hdLG49bVsxXSxvPW1bMl07YnJlYWs7Y2FzZVwibFwiOmwucHVzaChbbixvLG4sbyxuLG8sbittWzFdLG8rbVsyXV0pLG4rPW1bMV0sbys9bVsyXTticmVhaztjYXNlXCJMXCI6bC5wdXNoKFtuLG8sbVsxXSxtWzJdLG1bMV0sbVsyXSxtWzFdLG1bMl1dKSxuPW1bMV0sbz1tWzJdO2JyZWFrO2Nhc2VcImhcIjpsLnB1c2goW24sbyxuLG8sbixvLG4rbVsxXSxvXSksbis9bVsxXTticmVhaztjYXNlXCJIXCI6bC5wdXNoKFtuLG8sbVsxXSxvLG1bMV0sbyxtWzFdLG9dKSxuPW1bMV07YnJlYWs7Y2FzZVwidlwiOmwucHVzaChbbixvLG4sbyxuLG8sbixvK21bMV1dKSxvKz1tWzFdO2JyZWFrO2Nhc2VcIlZcIjpsLnB1c2goW24sbyxuLG1bMV0sbixtWzFdLG4sbVsxXV0pLG89bVsxXTticmVhaztjYXNlXCJDXCI6bC5wdXNoKFtuLG8sbVsxXSxtWzJdLG1bM10sbVs0XSxtWzVdLG1bNl1dKSxuPW1bNV0sbz1tWzZdO2JyZWFrO2Nhc2VcIlNcIjpcIkNcIj09PWJbMF18fFwiY1wiPT09YlswXT9sLnB1c2goW24sbyxuK2JbNV0tYlszXSxvK2JbNl0tYls0XSxtWzFdLG1bMl0sbVszXSxtWzRdXSk6XCJTXCIhPT1iWzBdJiZcInNcIiE9PWJbMF18fGwucHVzaChbbixvLG4rYlszXS1iWzFdLG8rYls0XS1iWzJdLG1bMV0sbVsyXSxtWzNdLG1bNF1dKSxuPW1bM10sbz1tWzRdO2JyZWFrO2Nhc2VcImNcIjpsLnB1c2goW24sbyxuK21bMV0sbyttWzJdLG4rbVszXSxvK21bNF0sbittWzVdLG8rbVs2XV0pLG4rPW1bNV0sbys9bVs2XTticmVhaztjYXNlXCJzXCI6XCJDXCI9PT1iWzBdfHxcImNcIj09PWJbMF0/bC5wdXNoKFtuLG8sbitiWzVdLWJbM10sbytiWzZdLWJbNF0sbittWzFdLG8rbVsyXSxuK21bM10sbyttWzRdXSk6XCJTXCIhPT1iWzBdJiZcInNcIiE9PWJbMF18fGwucHVzaChbbixvLG4rYlszXS1iWzFdLG8rYls0XS1iWzJdLG4rbVsxXSxvK21bMl0sbittWzNdLG8rbVs0XV0pLG4rPW1bM10sbys9bVs0XTticmVhaztjYXNlXCJhXCI6dj0oZz1pKHtyeDptWzFdLHJ5Om1bMl0scHg6bixweTpvLHhBeGlzUm90YXRpb246bVszXSxsYXJnZUFyY0ZsYWc6bVs0XSxzd2VlcEZsYWc6bVs1XSxjeDpuK21bNl0sY3k6byttWzddfSkpW2cubGVuZ3RoLTFdLGcuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXswPT09dD9sLnB1c2goW24sbyxlLngxLGUueTEsZS54MixlLnkyLGUueCxlLnldKTpsLnB1c2goW2dbdC0xXS54LGdbdC0xXS55LGUueDEsZS55MSxlLngyLGUueTIsZS54LGUueV0pfSkpLG49di54LG89di55O2JyZWFrO2Nhc2VcIkFcIjp2PShnPWkoe3J4Om1bMV0scnk6bVsyXSxweDpuLHB5Om8seEF4aXNSb3RhdGlvbjptWzNdLGxhcmdlQXJjRmxhZzptWzRdLHN3ZWVwRmxhZzptWzVdLGN4Om1bNl0sY3k6bVs3XX0pKVtnLmxlbmd0aC0xXSxnLmZvckVhY2goKGZ1bmN0aW9uKGUsdCl7MD09PXQ/bC5wdXNoKFtuLG8sZS54MSxlLnkxLGUueDIsZS55MixlLngsZS55XSk6bC5wdXNoKFtnW3QtMV0ueCxnW3QtMV0ueSxlLngxLGUueTEsZS54MixlLnkyLGUueCxlLnldKX0pKSxuPXYueCxvPXYueTticmVhaztjYXNlXCJRXCI6bC5wdXNoKHAucTJiKG4sbyxtWzFdLG1bMl0sbVszXSxtWzRdKSksbj1tWzNdLG89bVs0XTticmVhaztjYXNlXCJxXCI6bC5wdXNoKHAucTJiKG4sbyxuK21bMV0sbyttWzJdLG1bM10rbixtWzRdK28pKSxuKz1tWzNdLG8rPW1bNF07YnJlYWs7Y2FzZVwiVFwiOlwiUVwiPT09YlswXXx8XCJxXCI9PT1iWzBdPyhkPW4rYlszXS1iWzFdLGY9bytiWzRdLWJbMl0sbC5wdXNoKHAucTJiKG4sbyxkLGYsbVsxXSxtWzJdKSkpOlwiVFwiIT09YlswXSYmXCJ0XCIhPT1iWzBdfHwobC5wdXNoKHAucTJiKG4sbyxuK24tZCxvK28tZixtWzFdLG1bMl0pKSxkPW4rbi1kLGY9bytvLWYpLG49bVsxXSxvPW1bMl07YnJlYWs7Y2FzZVwidFwiOlwiUVwiPT09YlswXXx8XCJxXCI9PT1iWzBdPyhkPW4rYlszXS1iWzFdLGY9bytiWzRdLWJbMl0sbC5wdXNoKHAucTJiKG4sbyxkLGYsbittWzFdLG8rbVsyXSkpKTpcIlRcIiE9PWJbMF0mJlwidFwiIT09YlswXXx8KGwucHVzaChwLnEyYihuLG8sbituLWQsbytvLWYsbittWzFdLG8rbVsyXSkpLGQ9bituLWQsZj1vK28tZiksbis9bVsxXSxvKz1tWzJdO2JyZWFrO2Nhc2VcIlpcIjpjYXNlXCJ6XCI6Yz1sWzBdWzBdLHU9bFswXVsxXSxsLnB1c2goW24sbyxjLHUsYyx1LGMsdV0pfX1yZXR1cm4gc30scC5fdXBDdXJ2ZXM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MCxvPTAscj1lLmxlbmd0aDtuPHQ7bisrKWUucHVzaChlW29dLnNsaWNlKDApKSwrK28+ci0xJiYoby09cil9LHAuX3NwbGl0Q3VydmVzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuLG8scixpLGEscyxsLGMsdSxkPTAscD0wO2Q8dDtkKyspe3ZhciBoPWVbcF0sZz0obj1oWzBdLG89aFsxXSxyPWhbMl0saT1oWzNdLGE9aFs0XSxzPWhbNV0sbD1oWzZdLGM9aFs3XSx7bGVmdDpmKG4sbyxyLGksYSxzLGwsYyx1PS41KSxyaWdodDpmKGwsYyxhLHMscixpLG4sbywxLXUsITApfSk7ZS5zcGxpY2UocCwxKSxlLnNwbGljZShwLDAsZy5sZWZ0LGcucmlnaHQpLChwKz0yKT49ZS5sZW5ndGgtMSYmKHA9MCl9fSxwLmxlcnA9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBwLl9sZXJwKHAucGF0aDJzaGFwZXMoZSkscC5wYXRoMnNoYXBlcyh0KSxuKX0scC5NSU1fQ1VSVkVTX0NPVU5UPTEwMCxwLl9wcmVwcm9jZXNzaW5nPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5sZW5ndGgsbz10Lmxlbmd0aCxyPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpLGk9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0KSk7cmV0dXJuIG4+bz9oKGksbi1vKTpuPG8mJmgocixvLW4pLChyPWQocixpKSkuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmxlbmd0aCxvPWlbdF0ubGVuZ3RoO24+bz9uPHAuTUlNX0NVUlZFU19DT1VOVD8ocC5fc3BsaXRDdXJ2ZXMoZSxwLk1JTV9DVVJWRVNfQ09VTlQtbikscC5fc3BsaXRDdXJ2ZXMoaVt0XSxwLk1JTV9DVVJWRVNfQ09VTlQtbykpOnAuX3NwbGl0Q3VydmVzKGlbdF0sbi1vKTpuPG8mJihvPHAuTUlNX0NVUlZFU19DT1VOVD8ocC5fc3BsaXRDdXJ2ZXMoZSxwLk1JTV9DVVJWRVNfQ09VTlQtbikscC5fc3BsaXRDdXJ2ZXMoaVt0XSxwLk1JTV9DVVJWRVNfQ09VTlQtbykpOnAuX3NwbGl0Q3VydmVzKGUsby1uKSl9KSksci5mb3JFYWNoKChmdW5jdGlvbihlLHQpe3JbdF09dShlLGlbdF0pfSkpLFtyLGldfSxwLl9sZXJwPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1bXTtyZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlLHIpe3ZhciBpPVtdO2UuZm9yRWFjaCgoZnVuY3Rpb24oZSxvKXtpLnB1c2gocC5sZXJwQ3VydmUoZSx0W3JdW29dLG4pKX0pKSxvLnB1c2goaSl9KSksb30scC5hbmltYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PXAucGF0aDJzaGFwZXMoZS5mcm9tKSxuPXAucGF0aDJzaGFwZXMoZS50byksbz1wLl9wcmVwcm9jZXNzaW5nKHQsbikscj1uZXcgRGF0ZSxpPWUuZW5kfHxmdW5jdGlvbigpe30sYT1lLnByb2dyZXNzfHxmdW5jdGlvbigpe30scz1lLmJlZ2lufHxmdW5jdGlvbigpe30sbD1lLmVhc2luZ3x8ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGM9bnVsbCx1PW51bGwsZD1lLnRpbWU7cyh0KSxmdW5jdGlvbiBlKCl7dmFyIHQ9bmV3IERhdGUtcjtpZih0Pj1kKXJldHVybiBhKHU9biwxKSxpKHUpLHZvaWQgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYyk7dmFyIHM9bCh0L2QpO3U9cC5fbGVycChvWzBdLG9bMV0scyksYSh1LHMpLGM9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGUpfSgpfSxwfSxcIm9iamVjdFwiPT09YSh0KSYmdm9pZCAwIT09ZT9lLmV4cG9ydHM9aSgpOnZvaWQgMD09PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89aSk/by5jYWxsKHQsbix0LGUpOm8pfHwoZS5leHBvcnRzPXIpfSxcIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe3ZhciBvLHIsaT17fSxhPShvPWZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdyYmZG9jdW1lbnQmJmRvY3VtZW50LmFsbCYmIXdpbmRvdy5hdG9ifSxmdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1yJiYocj1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkscn0pLHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSl9LGw9ZnVuY3Rpb24oZSl7dmFyIHQ9e307cmV0dXJuIGZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpcmV0dXJuIGUoKTtpZih2b2lkIDA9PT10W2VdKXt2YXIgbj1zLmNhbGwodGhpcyxlKTtpZih3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQmJm4gaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpdHJ5e249bi5jb250ZW50RG9jdW1lbnQuaGVhZH1jYXRjaChlKXtuPW51bGx9dFtlXT1ufXJldHVybiB0W2VdfX0oKSxjPW51bGwsdT0wLGQ9W10scD1uKC8qISAuL3VybHMgKi9cIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qc1wiKTtmdW5jdGlvbiBmKGUsdCl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBvPWVbbl0scj1pW28uaWRdO2lmKHIpe3IucmVmcysrO2Zvcih2YXIgYT0wO2E8ci5wYXJ0cy5sZW5ndGg7YSsrKXIucGFydHNbYV0oby5wYXJ0c1thXSk7Zm9yKDthPG8ucGFydHMubGVuZ3RoO2ErKylyLnBhcnRzLnB1c2goYihvLnBhcnRzW2FdLHQpKX1lbHNle3ZhciBzPVtdO2ZvcihhPTA7YTxvLnBhcnRzLmxlbmd0aDthKyspcy5wdXNoKGIoby5wYXJ0c1thXSx0KSk7aVtvLmlkXT17aWQ6by5pZCxyZWZzOjEscGFydHM6c319fX1mdW5jdGlvbiBoKGUsdCl7Zm9yKHZhciBuPVtdLG89e30scj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgaT1lW3JdLGE9dC5iYXNlP2lbMF0rdC5iYXNlOmlbMF0scz17Y3NzOmlbMV0sbWVkaWE6aVsyXSxzb3VyY2VNYXA6aVszXX07b1thXT9vW2FdLnBhcnRzLnB1c2gocyk6bi5wdXNoKG9bYV09e2lkOmEscGFydHM6W3NdfSl9cmV0dXJuIG59ZnVuY3Rpb24gZyhlLHQpe3ZhciBuPWwoZS5pbnNlcnRJbnRvKTtpZighbil0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTt2YXIgbz1kW2QubGVuZ3RoLTFdO2lmKFwidG9wXCI9PT1lLmluc2VydEF0KW8/by5uZXh0U2libGluZz9uLmluc2VydEJlZm9yZSh0LG8ubmV4dFNpYmxpbmcpOm4uYXBwZW5kQ2hpbGQodCk6bi5pbnNlcnRCZWZvcmUodCxuLmZpcnN0Q2hpbGQpLGQucHVzaCh0KTtlbHNlIGlmKFwiYm90dG9tXCI9PT1lLmluc2VydEF0KW4uYXBwZW5kQ2hpbGQodCk7ZWxzZXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5pbnNlcnRBdHx8IWUuaW5zZXJ0QXQuYmVmb3JlKXRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO3ZhciByPWwoZS5pbnNlcnRJbnRvK1wiIFwiK2UuaW5zZXJ0QXQuYmVmb3JlKTtuLmluc2VydEJlZm9yZSh0LHIpfX1mdW5jdGlvbiB2KGUpe2lmKG51bGw9PT1lLnBhcmVudE5vZGUpcmV0dXJuITE7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpO3ZhciB0PWQuaW5kZXhPZihlKTt0Pj0wJiZkLnNwbGljZSh0LDEpfWZ1bmN0aW9uIG0oZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3JldHVybiBlLmF0dHJzLnR5cGU9XCJ0ZXh0L2Nzc1wiLHkodCxlLmF0dHJzKSxnKGUsdCksdH1mdW5jdGlvbiB5KGUsdCl7T2JqZWN0LmtleXModCkuZm9yRWFjaCgoZnVuY3Rpb24obil7ZS5zZXRBdHRyaWJ1dGUobix0W25dKX0pKX1mdW5jdGlvbiBiKGUsdCl7dmFyIG4sbyxyLGk7aWYodC50cmFuc2Zvcm0mJmUuY3NzKXtpZighKGk9dC50cmFuc2Zvcm0oZS5jc3MpKSlyZXR1cm4gZnVuY3Rpb24oKXt9O2UuY3NzPWl9aWYodC5zaW5nbGV0b24pe3ZhciBhPXUrKztuPWN8fChjPW0odCkpLG89Xy5iaW5kKG51bGwsbixhLCExKSxyPV8uYmluZChudWxsLG4sYSwhMCl9ZWxzZSBlLnNvdXJjZU1hcCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBCbG9iJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hPyhuPWZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO3JldHVybiBlLmF0dHJzLnR5cGU9XCJ0ZXh0L2Nzc1wiLGUuYXR0cnMucmVsPVwic3R5bGVzaGVldFwiLHkodCxlLmF0dHJzKSxnKGUsdCksdH0odCksbz1FLmJpbmQobnVsbCxuLHQpLHI9ZnVuY3Rpb24oKXt2KG4pLG4uaHJlZiYmVVJMLnJldm9rZU9iamVjdFVSTChuLmhyZWYpfSk6KG49bSh0KSxvPWsuYmluZChudWxsLG4pLHI9ZnVuY3Rpb24oKXt2KG4pfSk7cmV0dXJuIG8oZSksZnVuY3Rpb24odCl7aWYodCl7aWYodC5jc3M9PT1lLmNzcyYmdC5tZWRpYT09PWUubWVkaWEmJnQuc291cmNlTWFwPT09ZS5zb3VyY2VNYXApcmV0dXJuO28oZT10KX1lbHNlIHIoKX19ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIERFQlVHJiZERUJVRyYmXCJvYmplY3RcIiE9dHlwZW9mIGRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTsodD10fHx7fSkuYXR0cnM9XCJvYmplY3RcIj09dHlwZW9mIHQuYXR0cnM/dC5hdHRyczp7fSx0LnNpbmdsZXRvbnx8XCJib29sZWFuXCI9PXR5cGVvZiB0LnNpbmdsZXRvbnx8KHQuc2luZ2xldG9uPWEoKSksdC5pbnNlcnRJbnRvfHwodC5pbnNlcnRJbnRvPVwiaGVhZFwiKSx0Lmluc2VydEF0fHwodC5pbnNlcnRBdD1cImJvdHRvbVwiKTt2YXIgbj1oKGUsdCk7cmV0dXJuIGYobix0KSxmdW5jdGlvbihlKXtmb3IodmFyIG89W10scj0wO3I8bi5sZW5ndGg7cisrKXt2YXIgYT1uW3JdOyhzPWlbYS5pZF0pLnJlZnMtLSxvLnB1c2gocyl9ZSYmZihoKGUsdCksdCk7Zm9yKHI9MDtyPG8ubGVuZ3RoO3IrKyl7dmFyIHM7aWYoMD09PShzPW9bcl0pLnJlZnMpe2Zvcih2YXIgbD0wO2w8cy5wYXJ0cy5sZW5ndGg7bCsrKXMucGFydHNbbF0oKTtkZWxldGUgaVtzLmlkXX19fX07dmFyIHgsdz0oeD1bXSxmdW5jdGlvbihlLHQpe3JldHVybiB4W2VdPXQseC5maWx0ZXIoQm9vbGVhbikuam9pbihcIlxcblwiKX0pO2Z1bmN0aW9uIF8oZSx0LG4sbyl7dmFyIHI9bj9cIlwiOm8uY3NzO2lmKGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD13KHQscik7ZWxzZXt2YXIgaT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShyKSxhPWUuY2hpbGROb2RlczthW3RdJiZlLnJlbW92ZUNoaWxkKGFbdF0pLGEubGVuZ3RoP2UuaW5zZXJ0QmVmb3JlKGksYVt0XSk6ZS5hcHBlbmRDaGlsZChpKX19ZnVuY3Rpb24gayhlLHQpe3ZhciBuPXQuY3NzLG89dC5tZWRpYTtpZihvJiZlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsbyksZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PW47ZWxzZXtmb3IoO2UuZmlyc3RDaGlsZDspZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpO2UuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobikpfX1mdW5jdGlvbiBFKGUsdCxuKXt2YXIgbz1uLmNzcyxyPW4uc291cmNlTWFwLGk9dm9pZCAwPT09dC5jb252ZXJ0VG9BYnNvbHV0ZVVybHMmJnI7KHQuY29udmVydFRvQWJzb2x1dGVVcmxzfHxpKSYmKG89cChvKSksciYmKG8rPVwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShyKSkpKStcIiAqL1wiKTt2YXIgYT1uZXcgQmxvYihbb10se3R5cGU6XCJ0ZXh0L2Nzc1wifSkscz1lLmhyZWY7ZS5ocmVmPVVSTC5jcmVhdGVPYmplY3RVUkwoYSkscyYmVVJMLnJldm9rZU9iamVjdFVSTChzKX19LFwiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cubG9jYXRpb247aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7aWYoIWV8fFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBlO3ZhciBuPXQucHJvdG9jb2wrXCIvL1wiK3QuaG9zdCxvPW4rdC5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sXCIvXCIpO3JldHVybiBlLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLChmdW5jdGlvbihlLHQpe3ZhciByLGk9dC50cmltKCkucmVwbGFjZSgvXlwiKC4qKVwiJC8sKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR9KSkucmVwbGFjZSgvXicoLiopJyQvLChmdW5jdGlvbihlLHQpe3JldHVybiB0fSkpO3JldHVybi9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QoaSk/ZToocj0wPT09aS5pbmRleE9mKFwiLy9cIik/aTowPT09aS5pbmRleE9mKFwiL1wiKT9uK2k6bytpLnJlcGxhY2UoL15cXC5cXC8vLFwiXCIpLFwidXJsKFwiK0pTT04uc3RyaW5naWZ5KHIpK1wiKVwiKX0pKX19LFwiLi9ub2RlX21vZHVsZXMvdHlwZS9mdW5jdGlvbi9pcy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3R5cGUvZnVuY3Rpb24vaXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKC8qISAuLi9wcm90b3R5cGUvaXMgKi9cIi4vbm9kZV9tb2R1bGVzL3R5cGUvcHJvdG90eXBlL2lzLmpzXCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXJldHVybiExO2lmKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsZW5ndGhcIikpcmV0dXJuITE7dHJ5e2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlLmxlbmd0aClyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlLmNhbGwpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZS5hcHBseSlyZXR1cm4hMX1jYXRjaChlKXtyZXR1cm4hMX1yZXR1cm4hbyhlKX19LFwiLi9ub2RlX21vZHVsZXMvdHlwZS9vYmplY3QvaXMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvdHlwZS9vYmplY3QvaXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0scj1uKC8qISAuLi92YWx1ZS9pcyAqL1wiLi9ub2RlX21vZHVsZXMvdHlwZS92YWx1ZS9pcy5qc1wiKSxpPXtvYmplY3Q6ITAsZnVuY3Rpb246ITAsdW5kZWZpbmVkOiEwfTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuISFyKGUpJiZoYXNPd25Qcm9wZXJ0eS5jYWxsKGksdm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOm8oZSkpfX0sXCIuL25vZGVfbW9kdWxlcy90eXBlL3BsYWluLWZ1bmN0aW9uL2lzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvdHlwZS9wbGFpbi1mdW5jdGlvbi9pcy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oLyohIC4uL2Z1bmN0aW9uL2lzICovXCIuL25vZGVfbW9kdWxlcy90eXBlL2Z1bmN0aW9uL2lzLmpzXCIpLHI9L15cXHMqY2xhc3NbXFxze1xcL31dLyxpPUZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuISFvKGUpJiYhci50ZXN0KGkuY2FsbChlKSl9fSxcIi4vbm9kZV9tb2R1bGVzL3R5cGUvcHJvdG90eXBlL2lzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3R5cGUvcHJvdG90eXBlL2lzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oLyohIC4uL29iamVjdC9pcyAqL1wiLi9ub2RlX21vZHVsZXMvdHlwZS9vYmplY3QvaXMuanNcIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFvKGUpKXJldHVybiExO3RyeXtyZXR1cm4hIWUuY29uc3RydWN0b3ImJmUuY29uc3RydWN0b3IucHJvdG90eXBlPT09ZX1jYXRjaChlKXtyZXR1cm4hMX19fSxcIi4vbm9kZV9tb2R1bGVzL3R5cGUvdmFsdWUvaXMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy90eXBlL3ZhbHVlL2lzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lfX0sXCIuL25vZGVfbW9kdWxlcy91bmlkcmFnZ2VyL3VuaWRyYWdnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3VuaWRyYWdnZXIvdW5pZHJhZ2dlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbi8qIVxuICogVW5pZHJhZ2dlciB2Mi4zLjBcbiAqIERyYWdnYWJsZSBiYXNlIGNsYXNzXG4gKiBNSVQgbGljZW5zZVxuICovXG4hZnVuY3Rpb24oaSxhKXtvPVtuKC8qISB1bmlwb2ludGVyL3VuaXBvaW50ZXIgKi9cIi4vbm9kZV9tb2R1bGVzL3VuaXBvaW50ZXIvdW5pcG9pbnRlci5qc1wiKV0sdm9pZCAwPT09KHI9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbigpe312YXIgbz1uLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKTtvLmJpbmRIYW5kbGVzPWZ1bmN0aW9uKCl7dGhpcy5fYmluZEhhbmRsZXMoITApfSxvLnVuYmluZEhhbmRsZXM9ZnVuY3Rpb24oKXt0aGlzLl9iaW5kSGFuZGxlcyghMSl9LG8uX2JpbmRIYW5kbGVzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgbj0odD12b2lkIDA9PT10fHx0KT9cImFkZEV2ZW50TGlzdGVuZXJcIjpcInJlbW92ZUV2ZW50TGlzdGVuZXJcIixvPXQ/dGhpcy5fdG91Y2hBY3Rpb25WYWx1ZTpcIlwiLHI9MDtyPHRoaXMuaGFuZGxlcy5sZW5ndGg7cisrKXt2YXIgaT10aGlzLmhhbmRsZXNbcl07dGhpcy5fYmluZFN0YXJ0RXZlbnQoaSx0KSxpW25dKFwiY2xpY2tcIix0aGlzKSxlLlBvaW50ZXJFdmVudCYmKGkuc3R5bGUudG91Y2hBY3Rpb249byl9fSxvLl90b3VjaEFjdGlvblZhbHVlPVwibm9uZVwiLG8ucG9pbnRlckRvd249ZnVuY3Rpb24oZSx0KXt0aGlzLm9rYXlQb2ludGVyRG93bihlKSYmKHRoaXMucG9pbnRlckRvd25Qb2ludGVyPXQsZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMucG9pbnRlckRvd25CbHVyKCksdGhpcy5fYmluZFBvc3RTdGFydEV2ZW50cyhlKSx0aGlzLmVtaXRFdmVudChcInBvaW50ZXJEb3duXCIsW2UsdF0pKX07dmFyIHI9e1RFWFRBUkVBOiEwLElOUFVUOiEwLFNFTEVDVDohMCxPUFRJT046ITB9LGk9e3JhZGlvOiEwLGNoZWNrYm94OiEwLGJ1dHRvbjohMCxzdWJtaXQ6ITAsaW1hZ2U6ITAsZmlsZTohMH07cmV0dXJuIG8ub2theVBvaW50ZXJEb3duPWZ1bmN0aW9uKGUpe3ZhciB0PXJbZS50YXJnZXQubm9kZU5hbWVdLG49aVtlLnRhcmdldC50eXBlXSxvPSF0fHxuO3JldHVybiBvfHx0aGlzLl9wb2ludGVyUmVzZXQoKSxvfSxvLnBvaW50ZXJEb3duQmx1cj1mdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7ZSYmZS5ibHVyJiZlIT1kb2N1bWVudC5ib2R5JiZlLmJsdXIoKX0sby5wb2ludGVyTW92ZT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuX2RyYWdQb2ludGVyTW92ZShlLHQpO3RoaXMuZW1pdEV2ZW50KFwicG9pbnRlck1vdmVcIixbZSx0LG5dKSx0aGlzLl9kcmFnTW92ZShlLHQsbil9LG8uX2RyYWdQb2ludGVyTW92ZT1mdW5jdGlvbihlLHQpe3ZhciBuPXt4OnQucGFnZVgtdGhpcy5wb2ludGVyRG93blBvaW50ZXIucGFnZVgseTp0LnBhZ2VZLXRoaXMucG9pbnRlckRvd25Qb2ludGVyLnBhZ2VZfTtyZXR1cm4hdGhpcy5pc0RyYWdnaW5nJiZ0aGlzLmhhc0RyYWdTdGFydGVkKG4pJiZ0aGlzLl9kcmFnU3RhcnQoZSx0KSxufSxvLmhhc0RyYWdTdGFydGVkPWZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLmFicyhlLngpPjN8fE1hdGguYWJzKGUueSk+M30sby5wb2ludGVyVXA9ZnVuY3Rpb24oZSx0KXt0aGlzLmVtaXRFdmVudChcInBvaW50ZXJVcFwiLFtlLHRdKSx0aGlzLl9kcmFnUG9pbnRlclVwKGUsdCl9LG8uX2RyYWdQb2ludGVyVXA9ZnVuY3Rpb24oZSx0KXt0aGlzLmlzRHJhZ2dpbmc/dGhpcy5fZHJhZ0VuZChlLHQpOnRoaXMuX3N0YXRpY0NsaWNrKGUsdCl9LG8uX2RyYWdTdGFydD1mdW5jdGlvbihlLHQpe3RoaXMuaXNEcmFnZ2luZz0hMCx0aGlzLmlzUHJldmVudGluZ0NsaWNrcz0hMCx0aGlzLmRyYWdTdGFydChlLHQpfSxvLmRyYWdTdGFydD1mdW5jdGlvbihlLHQpe3RoaXMuZW1pdEV2ZW50KFwiZHJhZ1N0YXJ0XCIsW2UsdF0pfSxvLl9kcmFnTW92ZT1mdW5jdGlvbihlLHQsbil7dGhpcy5pc0RyYWdnaW5nJiZ0aGlzLmRyYWdNb3ZlKGUsdCxuKX0sby5kcmFnTW92ZT1mdW5jdGlvbihlLHQsbil7ZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuZW1pdEV2ZW50KFwiZHJhZ01vdmVcIixbZSx0LG5dKX0sby5fZHJhZ0VuZD1mdW5jdGlvbihlLHQpe3RoaXMuaXNEcmFnZ2luZz0hMSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMuaXNQcmV2ZW50aW5nQ2xpY2tzfS5iaW5kKHRoaXMpKSx0aGlzLmRyYWdFbmQoZSx0KX0sby5kcmFnRW5kPWZ1bmN0aW9uKGUsdCl7dGhpcy5lbWl0RXZlbnQoXCJkcmFnRW5kXCIsW2UsdF0pfSxvLm9uY2xpY2s9ZnVuY3Rpb24oZSl7dGhpcy5pc1ByZXZlbnRpbmdDbGlja3MmJmUucHJldmVudERlZmF1bHQoKX0sby5fc3RhdGljQ2xpY2s9ZnVuY3Rpb24oZSx0KXt0aGlzLmlzSWdub3JpbmdNb3VzZVVwJiZcIm1vdXNldXBcIj09ZS50eXBlfHwodGhpcy5zdGF0aWNDbGljayhlLHQpLFwibW91c2V1cFwiIT1lLnR5cGUmJih0aGlzLmlzSWdub3JpbmdNb3VzZVVwPSEwLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtkZWxldGUgdGhpcy5pc0lnbm9yaW5nTW91c2VVcH0uYmluZCh0aGlzKSw0MDApKSl9LG8uc3RhdGljQ2xpY2s9ZnVuY3Rpb24oZSx0KXt0aGlzLmVtaXRFdmVudChcInN0YXRpY0NsaWNrXCIsW2UsdF0pfSxuLmdldFBvaW50ZXJQb2ludD10LmdldFBvaW50ZXJQb2ludCxufShpLGUpfS5hcHBseSh0LG8pKXx8KGUuZXhwb3J0cz1yKX0od2luZG93KX0sXCIuL25vZGVfbW9kdWxlcy91bmlwb2ludGVyL3VuaXBvaW50ZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3VuaXBvaW50ZXIvdW5pcG9pbnRlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbi8qIVxuICogVW5pcG9pbnRlciB2Mi4zLjBcbiAqIGJhc2UgY2xhc3MgZm9yIGRvaW5nIG9uZSB0aGluZyB3aXRoIHBvaW50ZXIgZXZlbnRcbiAqIE1JVCBsaWNlbnNlXG4gKi9cbiFmdW5jdGlvbihpLGEpe289W24oLyohIGV2LWVtaXR0ZXIvZXYtZW1pdHRlciAqL1wiLi9ub2RlX21vZHVsZXMvZXYtZW1pdHRlci9ldi1lbWl0dGVyLmpzXCIpXSx2b2lkIDA9PT0ocj1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKCl7fXZhciBvPW4ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpO28uYmluZFN0YXJ0RXZlbnQ9ZnVuY3Rpb24oZSl7dGhpcy5fYmluZFN0YXJ0RXZlbnQoZSwhMCl9LG8udW5iaW5kU3RhcnRFdmVudD1mdW5jdGlvbihlKXt0aGlzLl9iaW5kU3RhcnRFdmVudChlLCExKX0sby5fYmluZFN0YXJ0RXZlbnQ9ZnVuY3Rpb24odCxuKXt2YXIgbz0obj12b2lkIDA9PT1ufHxuKT9cImFkZEV2ZW50TGlzdGVuZXJcIjpcInJlbW92ZUV2ZW50TGlzdGVuZXJcIixyPVwibW91c2Vkb3duXCI7ZS5Qb2ludGVyRXZlbnQ/cj1cInBvaW50ZXJkb3duXCI6XCJvbnRvdWNoc3RhcnRcImluIGUmJihyPVwidG91Y2hzdGFydFwiKSx0W29dKHIsdGhpcyl9LG8uaGFuZGxlRXZlbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJvblwiK2UudHlwZTt0aGlzW3RdJiZ0aGlzW3RdKGUpfSxvLmdldFRvdWNoPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgbj1lW3RdO2lmKG4uaWRlbnRpZmllcj09dGhpcy5wb2ludGVySWRlbnRpZmllcilyZXR1cm4gbn19LG8ub25tb3VzZWRvd249ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5idXR0b247dCYmMCE9PXQmJjEhPT10fHx0aGlzLl9wb2ludGVyRG93bihlLGUpfSxvLm9udG91Y2hzdGFydD1mdW5jdGlvbihlKXt0aGlzLl9wb2ludGVyRG93bihlLGUuY2hhbmdlZFRvdWNoZXNbMF0pfSxvLm9ucG9pbnRlcmRvd249ZnVuY3Rpb24oZSl7dGhpcy5fcG9pbnRlckRvd24oZSxlKX0sby5fcG9pbnRlckRvd249ZnVuY3Rpb24oZSx0KXtlLmJ1dHRvbnx8dGhpcy5pc1BvaW50ZXJEb3dufHwodGhpcy5pc1BvaW50ZXJEb3duPSEwLHRoaXMucG9pbnRlcklkZW50aWZpZXI9dm9pZCAwIT09dC5wb2ludGVySWQ/dC5wb2ludGVySWQ6dC5pZGVudGlmaWVyLHRoaXMucG9pbnRlckRvd24oZSx0KSl9LG8ucG9pbnRlckRvd249ZnVuY3Rpb24oZSx0KXt0aGlzLl9iaW5kUG9zdFN0YXJ0RXZlbnRzKGUpLHRoaXMuZW1pdEV2ZW50KFwicG9pbnRlckRvd25cIixbZSx0XSl9O3ZhciByPXttb3VzZWRvd246W1wibW91c2Vtb3ZlXCIsXCJtb3VzZXVwXCJdLHRvdWNoc3RhcnQ6W1widG91Y2htb3ZlXCIsXCJ0b3VjaGVuZFwiLFwidG91Y2hjYW5jZWxcIl0scG9pbnRlcmRvd246W1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJ1cFwiLFwicG9pbnRlcmNhbmNlbFwiXX07cmV0dXJuIG8uX2JpbmRQb3N0U3RhcnRFdmVudHM9ZnVuY3Rpb24odCl7aWYodCl7dmFyIG49clt0LnR5cGVdO24uZm9yRWFjaCgoZnVuY3Rpb24odCl7ZS5hZGRFdmVudExpc3RlbmVyKHQsdGhpcyl9KSx0aGlzKSx0aGlzLl9ib3VuZFBvaW50ZXJFdmVudHM9bn19LG8uX3VuYmluZFBvc3RTdGFydEV2ZW50cz1mdW5jdGlvbigpe3RoaXMuX2JvdW5kUG9pbnRlckV2ZW50cyYmKHRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cy5mb3JFYWNoKChmdW5jdGlvbih0KXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCx0aGlzKX0pLHRoaXMpLGRlbGV0ZSB0aGlzLl9ib3VuZFBvaW50ZXJFdmVudHMpfSxvLm9ubW91c2Vtb3ZlPWZ1bmN0aW9uKGUpe3RoaXMuX3BvaW50ZXJNb3ZlKGUsZSl9LG8ub25wb2ludGVybW92ZT1mdW5jdGlvbihlKXtlLnBvaW50ZXJJZD09dGhpcy5wb2ludGVySWRlbnRpZmllciYmdGhpcy5fcG9pbnRlck1vdmUoZSxlKX0sby5vbnRvdWNobW92ZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmdldFRvdWNoKGUuY2hhbmdlZFRvdWNoZXMpO3QmJnRoaXMuX3BvaW50ZXJNb3ZlKGUsdCl9LG8uX3BvaW50ZXJNb3ZlPWZ1bmN0aW9uKGUsdCl7dGhpcy5wb2ludGVyTW92ZShlLHQpfSxvLnBvaW50ZXJNb3ZlPWZ1bmN0aW9uKGUsdCl7dGhpcy5lbWl0RXZlbnQoXCJwb2ludGVyTW92ZVwiLFtlLHRdKX0sby5vbm1vdXNldXA9ZnVuY3Rpb24oZSl7dGhpcy5fcG9pbnRlclVwKGUsZSl9LG8ub25wb2ludGVydXA9ZnVuY3Rpb24oZSl7ZS5wb2ludGVySWQ9PXRoaXMucG9pbnRlcklkZW50aWZpZXImJnRoaXMuX3BvaW50ZXJVcChlLGUpfSxvLm9udG91Y2hlbmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5nZXRUb3VjaChlLmNoYW5nZWRUb3VjaGVzKTt0JiZ0aGlzLl9wb2ludGVyVXAoZSx0KX0sby5fcG9pbnRlclVwPWZ1bmN0aW9uKGUsdCl7dGhpcy5fcG9pbnRlckRvbmUoKSx0aGlzLnBvaW50ZXJVcChlLHQpfSxvLnBvaW50ZXJVcD1mdW5jdGlvbihlLHQpe3RoaXMuZW1pdEV2ZW50KFwicG9pbnRlclVwXCIsW2UsdF0pfSxvLl9wb2ludGVyRG9uZT1mdW5jdGlvbigpe3RoaXMuX3BvaW50ZXJSZXNldCgpLHRoaXMuX3VuYmluZFBvc3RTdGFydEV2ZW50cygpLHRoaXMucG9pbnRlckRvbmUoKX0sby5fcG9pbnRlclJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5pc1BvaW50ZXJEb3duPSExLGRlbGV0ZSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyfSxvLnBvaW50ZXJEb25lPWZ1bmN0aW9uKCl7fSxvLm9ucG9pbnRlcmNhbmNlbD1mdW5jdGlvbihlKXtlLnBvaW50ZXJJZD09dGhpcy5wb2ludGVySWRlbnRpZmllciYmdGhpcy5fcG9pbnRlckNhbmNlbChlLGUpfSxvLm9udG91Y2hjYW5jZWw9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5nZXRUb3VjaChlLmNoYW5nZWRUb3VjaGVzKTt0JiZ0aGlzLl9wb2ludGVyQ2FuY2VsKGUsdCl9LG8uX3BvaW50ZXJDYW5jZWw9ZnVuY3Rpb24oZSx0KXt0aGlzLl9wb2ludGVyRG9uZSgpLHRoaXMucG9pbnRlckNhbmNlbChlLHQpfSxvLnBvaW50ZXJDYW5jZWw9ZnVuY3Rpb24oZSx0KXt0aGlzLmVtaXRFdmVudChcInBvaW50ZXJDYW5jZWxcIixbZSx0XSl9LG4uZ2V0UG9pbnRlclBvaW50PWZ1bmN0aW9uKGUpe3JldHVybnt4OmUucGFnZVgseTplLnBhZ2VZfX0sbn0oaSxlKX0uYXBwbHkodCxvKSl8fChlLmV4cG9ydHM9cil9KHdpbmRvdyl9LFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUud2VicGFja1BvbHlmaWxsfHwoZS5kZXByZWNhdGU9ZnVuY3Rpb24oKXt9LGUucGF0aHM9W10sZS5jaGlsZHJlbnx8KGUuY2hpbGRyZW49W10pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwibG9hZGVkXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUubH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImlkXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuaX19KSxlLndlYnBhY2tQb2x5ZmlsbD0xKSxlfX0sXCIuL3BhY2thZ2UuanNvblwiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3BhY2thZ2UuanNvbiAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBuYW1lLCB2ZXJzaW9uLCBkZXNjcmlwdGlvbiwgbWFpbiwgc2NyaXB0cywga2V5d29yZHMsIGJhYmVsLCByZXBvc2l0b3J5LCBhdXRob3IsIGxpY2Vuc2UsIGRlcGVuZGVuY2llcywgYnJvd3NlcnNsaXN0LCBkZXZEZXBlbmRlbmNpZXMsIGRlZmF1bHQgKi9mdW5jdGlvbihlKXtlLmV4cG9ydHM9SlNPTi5wYXJzZSgne1wibmFtZVwiOlwieGdwbGF5ZXJcIixcInZlcnNpb25cIjpcIjEuMS42LWFscGhhLjBcIixcImRlc2NyaXB0aW9uXCI6XCJ2aWRlbyBwbGF5ZXJcIixcIm1haW5cIjpcIi4vZGlzdC9pbmRleC5qc1wiLFwic2NyaXB0c1wiOntcInByZXBhcmVcIjpcIm5wbSBydW4gYnVpbGRcIixcImJ1aWxkXCI6XCJ3ZWJwYWNrIC0tcHJvZ3Jlc3MgLS1kaXNwbGF5LWNodW5rcyAtcFwiLFwid2F0Y2hcIjpcIndlYnBhY2sgLS1wcm9ncmVzcyAtLWRpc3BsYXktY2h1bmtzIC1wIC0td2F0Y2ggLS1tb2RlIGRldmVsb3BtZW50XCIsXCJ0ZXN0XCI6XCJrYXJtYSBzdGFydCAtLXNpbmdsZS1ydW5cIixcInRlc3Q6d2F0Y2hcIjpcImthcm1hIHN0YXJ0XCJ9LFwia2V5d29yZHNcIjpbXCJ2aWRlb1wiLFwicGxheWVyXCJdLFwiYmFiZWxcIjp7XCJwcmVzZXRzXCI6W1wiZXMyMDE1XCJdLFwicGx1Z2luc1wiOltcImFkZC1tb2R1bGUtZXhwb3J0c1wiLFwiYmFiZWwtcGx1Z2luLWJ1bGstaW1wb3J0XCJdfSxcInJlcG9zaXRvcnlcIjp7XCJ0eXBlXCI6XCJnaXRcIixcInVybFwiOlwiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9ieXRlZGFuY2UveGdwbGF5ZXIuZ2l0XCJ9LFwiYXV0aG9yXCI6XCJ5aW5ndW9odWlAYnl0ZWRhbmNlLmNvbVwiLFwibGljZW5zZVwiOlwiTUlUXCIsXCJkZXBlbmRlbmNpZXNcIjp7XCJkYW5tdS5qc1wiOlwiMC4xLjBcIixcImRlZXBtZXJnZVwiOlwiXjEuNS4wXCIsXCJkb3dubG9hZGpzXCI6XCIxLjQuN1wiLFwiZHJhZ2dhYmlsbHlcIjpcIl4yLjIuMFwiLFwiZXZlbnQtZW1pdHRlclwiOlwiXjAuMy41XCIsXCJwYXNpdGlvblwiOlwiXjEuMC4xXCIsXCJyZXF1ZXN0LWZyYW1lXCI6XCJeMS41LjNcIn0sXCJicm93c2Vyc2xpc3RcIjpbXCI+IDUlXCIsXCJJRSA5XCIsXCJpT1MgN1wiLFwiRmlyZWZveCA+IDIwXCJdLFwiZGV2RGVwZW5kZW5jaWVzXCI6e1wiYXV0b3ByZWZpeGVyXCI6XCJeOS4xLjVcIixcImJhYmVsLWNvcmVcIjpcIl42LjI2LjNcIixcImJhYmVsLWxvYWRlclwiOlwiXjcuMS40XCIsXCJiYWJlbC1wbHVnaW4tYWRkLW1vZHVsZS1leHBvcnRzXCI6XCJeMC4yLjFcIixcImJhYmVsLXBsdWdpbi1idWxrLWltcG9ydFwiOlwiXjEuMC4yXCIsXCJiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFwiOlwiXjYuMjYuMFwiLFwiYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS1ydW50aW1lXCI6XCJeNi4yMy4wXCIsXCJiYWJlbC1wcmVzZXQtZXMyMDE1XCI6XCJeNi4yNC4xXCIsXCJjaGFpXCI6XCJeNC4xLjJcIixcImNvcmUtanNcIjpcIl4yLjUuNFwiLFwiY3NzLWxvYWRlclwiOlwiXjAuMjguMTFcIixcImpzb24tbG9hZGVyXCI6XCJeMC41LjdcIixcImthcm1hXCI6XCJeMy4wLjBcIixcImthcm1hLWNocm9tZS1sYXVuY2hlclwiOlwiXjIuMi4wXCIsXCJrYXJtYS1tb2NoYVwiOlwiXjEuMy4wXCIsXCJrYXJtYS1zb3VyY2VtYXAtbG9hZGVyXCI6XCJeMC4zLjdcIixcImthcm1hLXNwZWMtcmVwb3J0ZXJcIjpcIjAuMC4zMlwiLFwia2FybWEtd2VicGFja1wiOlwiXjQuMC4wLXJjLjFcIixcIm1vY2hhXCI6XCJeNS4yLjBcIixcIm5vZGUtc2Fzc1wiOlwiXjQuOC4zXCIsXCJwb3N0Y3NzLWNzc25leHRcIjpcIl4zLjEuMFwiLFwicG9zdGNzcy1sb2FkZXJcIjpcIl4yLjEuNVwiLFwic2Fzcy1sb2FkZXJcIjpcIl42LjAuN1wiLFwic3R5bGUtbG9hZGVyXCI6XCJeMC4yMC4zXCIsXCJzdWdhcnNzXCI6XCJeMS4wLjFcIixcIndlYnBhY2tcIjpcIl40LjExLjBcIixcIndlYnBhY2stY2xpXCI6XCJeMy4wLjJcIixcInpsaWJcIjpcIl4xLjAuNVwifX0nKX0sXCIuL3NyYy9jb250cm9sL2NvbGxlY3QuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvY29sbGVjdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0scj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07Zm9yKHZhciBvIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sbykmJihlW29dPW5bb10pfXJldHVybiBlfTt2YXIgaT12b2lkIDAsYT1mdW5jdGlvbiBlKCl7dmFyIHQ9dGhpczshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuc2V0PWZ1bmN0aW9uKGUsbil7dmFyIG89ZSxyPW47aWYobnVsbD09PXIpcmV0dXJuITE7dmFyIGk9XCJcIjtpZihvLmluZGV4T2YoXCIuXCIpPi0xKXt2YXIgYT1vLnNwbGl0KFwiLlwiKTtpPWFbMF0sbz1hWzFdfVwib3NfdmVyc2lvblwiPT09byYmKHI9XCJcIityKSxpP1widXNlclwiPT09aXx8XCJoZWFkZXJcIj09PWk/dC5lbnZJbmZvW2ldW29dPXI6XCJoZWFkZXJzXCI9PT1pP3QuZW52SW5mby5oZWFkZXIuaGVhZGVyc1tvXT1yOnQuZW52SW5mby5oZWFkZXIuaGVhZGVycy5jdXN0b21bb109cjp0LmVudkluZm8udXNlci5oYXNPd25Qcm9wZXJ0eShvKT9bXCJ1c2VyX3R5cGVcIixcImRldmljZV9pZFwiLFwiaXBfYWRkcl9pZFwiXS5pbmRleE9mKG8pPi0xP3QuZW52SW5mby51c2VyW29dPU51bWJlcihyKTpbXCJ1c2VyX2lkXCIsXCJ3ZWJfaWRcIixcInVzZXJfdW5pcXVlX2lkXCIsXCJzc2lkXCJdLmluZGV4T2Yobyk+LTE/dC5lbnZJbmZvLnVzZXJbb109U3RyaW5nKHIpOltcInVzZXJfaXNfYXV0aFwiLFwidXNlcl9pc19sb2dpblwiXS5pbmRleE9mKG8pPi0xJiYodC5lbnZJbmZvLnVzZXJbb109Qm9vbGVhbihyKSk6dC5lbnZJbmZvLmhlYWRlci5oYXNPd25Qcm9wZXJ0eShvKT90LmVudkluZm8uaGVhZGVyW29dPXI6dC5lbnZJbmZvLmhlYWRlci5oZWFkZXJzLmhhc093blByb3BlcnR5KG8pP3QuZW52SW5mby5oZWFkZXIuaGVhZGVyc1tvXT1yOnQuZW52SW5mby5oZWFkZXIuaGVhZGVycy5jdXN0b21bb109cn0sdGhpcy5nZXQ9ZnVuY3Rpb24oKXt2YXIgZT17dXNlcjp7fSxoZWFkZXI6e2hlYWRlcnM6e2N1c3RvbTp7fX19fSxuPXQuZW52SW5mbyxvPW4udXNlcixhPU9iamVjdC5rZXlzKG8pLHM9QXJyYXkuaXNBcnJheShhKSxsPTA7Zm9yKGE9cz9hOmFbU3ltYm9sLml0ZXJhdG9yXSgpOzspe3ZhciBjO2lmKHMpe2lmKGw+PWEubGVuZ3RoKWJyZWFrO2M9YVtsKytdfWVsc2V7aWYoKGw9YS5uZXh0KCkpLmRvbmUpYnJlYWs7Yz1sLnZhbHVlfXZhciB1PWM7b1t1XSE9PWkmJihlLnVzZXJbdV09b1t1XSl9dmFyIGQ9bi5oZWFkZXIscD1PYmplY3Qua2V5cyhkKSxmPUFycmF5LmlzQXJyYXkocCksaD0wO2ZvcihwPWY/cDpwW1N5bWJvbC5pdGVyYXRvcl0oKTs7KXt2YXIgZztpZihmKXtpZihoPj1wLmxlbmd0aClicmVhaztnPXBbaCsrXX1lbHNle2lmKChoPXAubmV4dCgpKS5kb25lKWJyZWFrO2c9aC52YWx1ZX12YXIgdj1nO2Rbdl0hPT1pJiZcImhlYWRlcnNcIiE9PXYmJihlLmhlYWRlclt2XT1kW3ZdKX12YXIgbT1uLmhlYWRlci5oZWFkZXJzLHk9T2JqZWN0LmtleXMobSksYj1BcnJheS5pc0FycmF5KHkpLHg9MDtmb3IoeT1iP3k6eVtTeW1ib2wuaXRlcmF0b3JdKCk7Oyl7dmFyIHc7aWYoYil7aWYoeD49eS5sZW5ndGgpYnJlYWs7dz15W3grK119ZWxzZXtpZigoeD15Lm5leHQoKSkuZG9uZSlicmVhazt3PXgudmFsdWV9dmFyIF89dztcImN1c3RvbVwiIT09XyYmbVtfXSE9PWkmJihlLmhlYWRlci5oZWFkZXJzW19dPW1bX10pfXZhciBrPW4uaGVhZGVyLmhlYWRlcnMuY3VzdG9tLEU9T2JqZWN0LmtleXMoayk7aWYoRS5sZW5ndGgpe3ZhciBDPUUsUz1BcnJheS5pc0FycmF5KEMpLFA9MDtmb3IoQz1TP0M6Q1tTeW1ib2wuaXRlcmF0b3JdKCk7Oyl7dmFyIGo7aWYoUyl7aWYoUD49Qy5sZW5ndGgpYnJlYWs7aj1DW1ArK119ZWxzZXtpZigoUD1DLm5leHQoKSkuZG9uZSlicmVhaztqPVAudmFsdWV9dmFyIFQ9ajtlLmhlYWRlci5oZWFkZXJzLmN1c3RvbVtUXT1rW1RdfX1yZXR1cm57dXNlcjplLnVzZXIsaGVhZGVyOnIoe30sZS5oZWFkZXIse2hlYWRlcnM6ZS5oZWFkZXIuaGVhZGVyc30pfX0sdGhpcy5lbnZJbmZvPXt1c2VyOnt1c2VyX3VuaXF1ZV9pZDppLHVzZXJfdHlwZTppLHVzZXJfaWQ6aSx1c2VyX2lzX2F1dGg6aSx1c2VyX2lzX2xvZ2luOmksZGV2aWNlX2lkOmksd2ViX2lkOmksaXBfYWRkcl9pZDppLHNzaWQ6aX0saGVhZGVyOnthcHBfaWQ6aSxhcHBfbmFtZTppLGFwcF9pbnN0YWxsX2lkOmksYXBwX3BhY2thZ2U6aSxhcHBfY2hhbm5lbDppLGFwcF92ZXJzaW9uOmksb3NfbmFtZTppLG9zX3ZlcnNpb246aSxkZXZpY2VfbW9kZWw6aSxhYl9jbGllbnQ6aSxhYl92ZXJzaW9uOmksdHJhZmZpY190eXBlOmksdXRtX3NvdXJjZTppLHV0bV9tZWRpdW06aSx1dG1fY2FtcGFpZ246aSxjbGllbnRfaXA6aSxkZXZpY2VfYnJhbmQ6aSxvc19hcGk6aSxhY2Nlc3M6aSxsYW5ndWFnZTppLHJlZ2lvbjppLGFwcF9sYW5ndWFnZTppLGFwcF9yZWdpb246aSxjcmVhdGl2ZV9pZDppLGFkX2lkOmksY2FtcGFpZ25faWQ6aSxsb2dfdHlwZTppLHJuZDppLHBsYXRmb3JtOmksc2RrX3ZlcnNpb246aSxwcm92aW5jZTppLGNpdHk6aSx0aW1lem9uZTppLHR6X29mZnNldDppLHR6X25hbWU6aSxzaW1fcmVnaW9uOmksY2FycmllcjppLHJlc29sdXRpb246aSxicm93c2VyOmksYnJvd3Nlcl92ZXJzaW9uOmkscmVmZXJyZXI6aSxyZWZlcnJlcl9ob3N0OmksaGVhZGVyczp7dXRtX3Rlcm06aSx1dG1fY29udGVudDppLGN1c3RvbTp7fX19fX0scz1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtyZXR1cm4gdC5ocmVmPWUsdH0sbD1zY3JlZW4ud2lkdGh8fDAsYz1zY3JlZW4uaGVpZ2h0fHwwLHU9bCtcIiB4IFwiK2MsZD1uYXZpZ2F0b3IuYXBwVmVyc2lvbixwPW5hdmlnYXRvci51c2VyQWdlbnQsZj1uYXZpZ2F0b3IubGFuZ3VhZ2UsaD1kb2N1bWVudC5yZWZlcnJlcixnPXMoaCkuaG9zdG5hbWUsdj1mdW5jdGlvbihlKXt2YXIgdD1zKGUpLnNlYXJjaDt0PXQuc2xpY2UoMSk7dmFyIG49e307cmV0dXJuIHQuc3BsaXQoXCImXCIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0PWUuc3BsaXQoXCI9XCIpLG89dFswXSxyPXRbMV07bltvXT1kZWNvZGVVUklDb21wb25lbnQodm9pZCAwPT09cj9cIlwiOnIpfSkpLG59KGxvY2F0aW9uLmhyZWYpLG09XCJcIix5PVwiXCIsYj1cIlwiLHg9XCJcIitwYXJzZUZsb2F0KGQpLHc9dm9pZCAwLF89dm9pZCAwOy0xIT09KHc9cC5pbmRleE9mKFwiT3BlcmFcIikpJiYoYj1cIk9wZXJhXCIseD1wLnN1YnN0cmluZyh3KzYpLC0xIT09KHc9cC5pbmRleE9mKFwiVmVyc2lvblwiKSkmJih4PXAuc3Vic3RyaW5nKHcrOCkpKSwtMSE9PSh3PXAuaW5kZXhPZihcIkVkZ2VcIikpPyhiPVwiTWljcm9zb2Z0IEVkZ2VcIix4PXAuc3Vic3RyaW5nKHcrNSkpOi0xIT09KHc9cC5pbmRleE9mKFwiTVNJRVwiKSk/KGI9XCJNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXJcIix4PXAuc3Vic3RyaW5nKHcrNSkpOi0xIT09KHc9cC5pbmRleE9mKFwiQ2hyb21lXCIpKT8oYj1cIkNocm9tZVwiLHg9cC5zdWJzdHJpbmcodys3KSk6LTEhPT0odz1wLmluZGV4T2YoXCJTYWZhcmlcIikpPyhiPVwiU2FmYXJpXCIseD1wLnN1YnN0cmluZyh3KzcpLC0xIT09KHc9cC5pbmRleE9mKFwiVmVyc2lvblwiKSkmJih4PXAuc3Vic3RyaW5nKHcrOCkpKTotMSE9PSh3PXAuaW5kZXhPZihcIkZpcmVmb3hcIikpJiYoYj1cIkZpcmVmb3hcIix4PXAuc3Vic3RyaW5nKHcrOCkpLC0xIT09KF89eC5pbmRleE9mKFwiO1wiKSkmJih4PXguc3Vic3RyaW5nKDAsXykpLC0xIT09KF89eC5pbmRleE9mKFwiIFwiKSkmJih4PXguc3Vic3RyaW5nKDAsXykpLC0xIT09KF89eC5pbmRleE9mKFwiKVwiKSkmJih4PXguc3Vic3RyaW5nKDAsXykpO2Zvcih2YXIgayxFLEM9L01vYmlsZXxodGN8bWluaXxBbmRyb2lkfGlQKGFkfG9kfGhvbmUpLy50ZXN0KGQpP1wid2FwXCI6XCJ3ZWJcIixTPVt7czpcIldpbmRvd3MgMTBcIixyOi8oV2luZG93cyAxMC4wfFdpbmRvd3MgTlQgMTAuMCkvfSx7czpcIldpbmRvd3MgOC4xXCIscjovKFdpbmRvd3MgOC4xfFdpbmRvd3MgTlQgNi4zKS99LHtzOlwiV2luZG93cyA4XCIscjovKFdpbmRvd3MgOHxXaW5kb3dzIE5UIDYuMikvfSx7czpcIldpbmRvd3MgN1wiLHI6LyhXaW5kb3dzIDd8V2luZG93cyBOVCA2LjEpL30se3M6XCJBbmRyb2lkXCIscjovQW5kcm9pZC99LHtzOlwiU3VuIE9TXCIscjovU3VuT1MvfSx7czpcIkxpbnV4XCIscjovKExpbnV4fFgxMSkvfSx7czpcImlPU1wiLHI6LyhpUGhvbmV8aVBhZHxpUG9kKS99LHtzOlwiTWFjIE9TIFhcIixyOi9NYWMgT1MgWC99LHtzOlwiTWFjIE9TXCIscjovKE1hY1BQQ3xNYWNJbnRlbHxNYWNfUG93ZXJQQ3xNYWNpbnRvc2gpL31dLFA9MDtQPFMubGVuZ3RoO1ArKyl7dmFyIGo9U1tQXTtpZihqLnIudGVzdChwKSl7bT1qLnM7YnJlYWt9fWZ1bmN0aW9uIFQoZSx0KXt2YXIgbj1lLmV4ZWModCk7cmV0dXJuIG4mJm5bMV0/blsxXTpcIlwifXN3aXRjaCgvV2luZG93cy8udGVzdChtKSYmKHk9VCgvV2luZG93cyAoLiopLyxtKSxtPVwid2luZG93c1wiKSxtKXtjYXNlXCJNYWMgT1MgWFwiOnk9VCgvTWFjIE9TIFggKDEwW1xcLlxcX1xcZF0rKS8scCksbT1cIm1hY1wiO2JyZWFrO2Nhc2VcIkFuZHJvaWRcIjooRT1UKC9BbmRyb2lkIChbXFwuXFxfXFxkXSspLyxrPXApKXx8KEU9VCgvQW5kcm9pZFxcLyhbXFwuXFxfXFxkXSspLyxrKSkseT1FLG09XCJhbmRyb2lkXCI7YnJlYWs7Y2FzZVwiaU9TXCI6eT0oeT0vT1MgKFxcZCspXyhcXGQrKV8/KFxcZCspPy8uZXhlYyhkKSk/eVsxXStcIi5cIit5WzJdK1wiLlwiKygwfHlbM10pOlwiXCIsbT1cImlvc1wifXZhciBNPXtzY3JlZW5fc2l6ZTp1LGJyb3dzZXI6Yixicm93c2VyX3ZlcnNpb246eCxwbGF0Zm9ybTpDLG9zX25hbWU6bSxvc192ZXJzaW9uOnksdXNlckFnZW50OnAsc2NyZWVuX3dpZHRoOmwsc2NyZWVuX2hlaWdodDpjLGRldmljZV9tb2RlbDptLGxhbmd1YWdlOmYscmVmZXJyZXI6aCxyZWZlcnJlcl9ob3N0OmcsdXRtX3NvdXJjZTp2LnV0bV9zb3VyY2UsdXRtX21lZGl1bTp2LnV0bV9tZWRpdW0sdXRtX2NhbXBhaWduOnYudXRtX2NhbXBhaWduLHV0bV90ZXJtOnYudXRtX3Rlcm0sdXRtX2NvbnRlbnQ6di51dG1fY29udGVudH0sTz17Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWxvY2FsU3RvcmFnZS5nZXRJdGVtKGUpLG49dDt0cnl7dCYmXCJzdHJpbmdcIj09dHlwZW9mIHQmJihuPUpTT04ucGFyc2UodCkpfWNhdGNoKGUpe31yZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGUsdCl7dHJ5e3ZhciBuPVwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6SlNPTi5zdHJpbmdpZnkodCk7bG9jYWxTdG9yYWdlLnNldEl0ZW0oZSxuKX1jYXRjaChlKXt9fX0sTD1cIl9fdGVhX2NhY2hlX1wiLEQ9NDAwMSx6PTRlMyxSPTQwMDIsQT00MDAzLEk9NTAwLEI9NTAwMSxxPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09PW8oU3ltYm9sLml0ZXJhdG9yKT9mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOm8oZSl9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOm8oZSl9O2Z1bmN0aW9uIEYoZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfXZhciBOPWZ1bmN0aW9uIGUoKXt2YXIgdD10aGlzLG49YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwiXCI7Rih0aGlzLGUpLHRoaXMuaW5pdD1mdW5jdGlvbihlKXt0LmlzTG9nPWV9LHRoaXMuaW5mbz1mdW5jdGlvbihlKXtmb3IodmFyIG49YXJndW1lbnRzLmxlbmd0aCxvPUFycmF5KG4+MT9uLTE6MCkscj0xO3I8bjtyKyspb1tyLTFdPWFyZ3VtZW50c1tyXTt2YXIgaTt0LmlzTG9nJiYoaT1jb25zb2xlKS5sb2cuYXBwbHkoaSxbdC5wcmVmaXgrZV0uY29uY2F0KG8pKX0sdGhpcy53YXJuPWZ1bmN0aW9uKGUpe2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLG89QXJyYXkobj4xP24tMTowKSxyPTE7cjxuO3IrKylvW3ItMV09YXJndW1lbnRzW3JdO3ZhciBpO3QuaXNMb2cmJihpPWNvbnNvbGUpLndhcm4uYXBwbHkoaSxbdC5wcmVmaXgrZV0uY29uY2F0KG8pKX0sdGhpcy5lcnJvcj1mdW5jdGlvbihlKXtmb3IodmFyIG49YXJndW1lbnRzLmxlbmd0aCxvPUFycmF5KG4+MT9uLTE6MCkscj0xO3I8bjtyKyspb1tyLTFdPWFyZ3VtZW50c1tyXTt2YXIgaTt0LmlzTG9nJiYoaT1jb25zb2xlKS5lcnJvci5hcHBseShpLFt0LnByZWZpeCtlXS5jb25jYXQobykpfSx0aGlzLmRpcj1mdW5jdGlvbigpe3ZhciBlO3QuaXNMb2cmJihlPWNvbnNvbGUpLmRpci5hcHBseShlLGFyZ3VtZW50cyl9LHRoaXMudGFibGU9ZnVuY3Rpb24oZSl7dC5pc0xvZyYmY29uc29sZS50YWJsZShlKX0sdGhpcy5sb2dKU09OPWZ1bmN0aW9uKGUpe1wib2JqZWN0XCI9PT0odm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOnEoZSkpJiZ0LmlzTG9nJiZ0LmluZm8oXCJcIixKU09OLnN0cmluZ2lmeShlLG51bGwsMikpfSx0aGlzLmRlcHJlY2F0ZWQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgsbz1BcnJheShuPjE/bi0xOjApLHI9MTtyPG47cisrKW9bci0xXT1hcmd1bWVudHNbcl07dC53YXJuLmFwcGx5KHQsW1wiW0RFUFJFQ0FURURdXCIrZV0uY29uY2F0KG8pKX0sdGhpcy50aHJvdz1mdW5jdGlvbihlKXt0aHJvdyB0LmVycm9yKHQucHJlZml4KSxuZXcgRXJyb3IoZSl9O3ZhciBvPW4/XCJbXCIrbitcIl1cIjpcIlwiO3RoaXMucHJlZml4PVwiW3RlYS1zZGtdXCIrb30sVT1uZXcgTixIPWZ1bmN0aW9uKGUsdCxuLG8pe3ZhciByPW5ldyBYTUxIdHRwUmVxdWVzdDtyLm9wZW4oXCJQT1NUXCIsZSwhMCksci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpLHIub25sb2FkPWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPUpTT04ucGFyc2Uoci5yZXNwb25zZVRleHQpO24mJm4oZSl9Y2F0Y2goZSl7byYmbygpfX0sci5vbmVycm9yPWZ1bmN0aW9uKCl7byYmbygpfSxyLnNlbmQoSlNPTi5zdHJpbmdpZnkodCkpfTt2YXIgVz0obmV3IERhdGUpLmdldFRpbWV6b25lT2Zmc2V0KCksVj1wYXJzZUludCgtVy82MCwxMCksSz02MCpXLEo9dm9pZCAwO3RyeXtKPVwiMy4yLjdcIn1jYXRjaChrKXtKPVwiMi54XCJ9dmFyIFg9bmV3KGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpO3ZhciBuPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT09KHZvaWQgMD09PXQ/XCJ1bmRlZmluZWRcIjpvKHQpKSYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsZS5jYWxsKHRoaXMpKTtyZXR1cm4gbi5pbml0Q2xpZW50RW52PWZ1bmN0aW9uKCl7bi5zZXQoXCJvc19uYW1lXCIsTS5vc19uYW1lKSxuLnNldChcIm9zX3ZlcnNpb25cIixNLm9zX3ZlcnNpb24pLG4uc2V0KFwiZGV2aWNlX21vZGVsXCIsTS5kZXZpY2VfbW9kZWwpLG4uc2V0KFwicGxhdGZvcm1cIixNLnBsYXRmb3JtKSxuLnNldChcInNka192ZXJzaW9uXCIsSiksbi5zZXQoXCJicm93c2VyXCIsTS5icm93c2VyKSxuLnNldChcImJyb3dzZXJfdmVyc2lvblwiLE0uYnJvd3Nlcl92ZXJzaW9uKSxuLnNldChcImxhbmd1YWdlXCIsTS5sYW5ndWFnZSksbi5zZXQoXCJ0aW1lem9uZVwiLFYpLG4uc2V0KFwidHpfb2Zmc2V0XCIsSyksbi5zZXQoXCJyZXNvbHV0aW9uXCIsTS5zY3JlZW5fd2lkdGgrXCJ4XCIrTS5zY3JlZW5faGVpZ2h0KSxuLnNldChcInNjcmVlbl93aWR0aFwiLE0uc2NyZWVuX3dpZHRoKSxuLnNldChcInNjcmVlbl9oZWlnaHRcIixNLnNjcmVlbl9oZWlnaHQpLG4uc2V0KFwicmVmZXJyZXJcIixNLnJlZmVycmVyKSxuLnNldChcInJlZmVycmVyX2hvc3RcIixNLnJlZmVycmVyX2hvc3QpLG4uc2V0KFwidXRtX3NvdXJjZVwiLE0udXRtX3NvdXJjZSksbi5zZXQoXCJ1dG1fbWVkaXVtXCIsTS51dG1fbWVkaXVtKSxuLnNldChcInV0bV9jYW1wYWlnblwiLE0udXRtX2NhbXBhaWduKSxuLnNldChcInV0bV90ZXJtXCIsTS51dG1fdGVybSksbi5zZXQoXCJ1dG1fY29udGVudFwiLE0udXRtX2NvbnRlbnQpfSxuLmluaXRDbGllbnRFbnYoKSxufXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiKyh2b2lkIDA9PT10P1widW5kZWZpbmVkXCI6byh0KSkpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHQsZSksdH0oYSkpO3ZhciBRPW5ldyhmdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpfXJldHVybiBlLnByb3RvdHlwZS5pc1N0cmluZz1mdW5jdGlvbihlKXtyZXR1cm5cIlN0cmluZ1wiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpfSxlLnByb3RvdHlwZS5pc051bWJlcj1mdW5jdGlvbihlKXtyZXR1cm5cIk51bWJlclwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpfSxlLnByb3RvdHlwZS5pc0Jvb2xlYW49ZnVuY3Rpb24oZSl7cmV0dXJuXCJCb29sZWFuXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSl9LGUucHJvdG90eXBlLmlzRnVuY3Rpb249ZnVuY3Rpb24oZSl7cmV0dXJuXCJGdW5jdGlvblwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpfSxlLnByb3RvdHlwZS5pc051bGw9ZnVuY3Rpb24oZSl7cmV0dXJuXCJOdWxsXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSl9LGUucHJvdG90eXBlLmlzVW5kZWZpbmVkPWZ1bmN0aW9uKGUpe3JldHVyblwiVW5kZWZpbmVkXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSl9LGUucHJvdG90eXBlLmlzT2JqPWZ1bmN0aW9uKGUpe3JldHVyblwiT2JqZWN0XCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSl9LGUucHJvdG90eXBlLmlzQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJBcnJheVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpfSxlLnByb3RvdHlwZS5pc0ZhbHNlPWZ1bmN0aW9uKGUpe3JldHVyblwiXCI9PT1lfHxudWxsPT1lfHxcIm51bGxcIj09PWV8fFwidW5kZWZpbmVkXCI9PT1lfHwwPT09ZXx8ITE9PT1lfHxOYU49PT1lfSxlLnByb3RvdHlwZS5pc1RydWU9ZnVuY3Rpb24oZSl7cmV0dXJuIXRoaXMuaXNGYWxzZShlKX0sZS5wcm90b3R5cGUuaXNMb3dJRT1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cuWERvbWFpblJlcXVlc3R9LGV9KCkpO3ZhciAkPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlLHQsbil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJlwibnVtYmVyXCI9PXR5cGVvZiB0JiZcIm51bWJlclwiPT10eXBlb2Ygbil7dmFyIG8scj1bXTtuPW48PTI1P246biUyNTt2YXIgaT1TdHJpbmcuZnJvbUNoYXJDb2RlKG4rOTcpO289ZS5zcGxpdChpKTtmb3IodmFyIGE9MDthPG8ubGVuZ3RoO2ErKyl7dmFyIHM9cGFyc2VJbnQob1thXSxuKTtzPTEqc150O3ZhciBsPVN0cmluZy5mcm9tQ2hhckNvZGUocyk7ci5wdXNoKGwpfXJldHVybiByLmpvaW4oXCJcIil9fShlLDY0LDI1KX07ZnVuY3Rpb24gWShlKXtyZXR1cm4gZT8oZV4xNipNYXRoLnJhbmRvbSgpPj5lLzQpLnRvU3RyaW5nKDEwKTooWzFlN10rLTFlMystNGUzKy04ZTMrLTFlMTEpLnJlcGxhY2UoL1swMThdL2csWSl9dmFyIEc9ZnVuY3Rpb24oKXtyZXR1cm4gWSgpLnJlcGxhY2UoLy0vZyxcIlwiKS5zbGljZSgwLDE5KX0sWj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07Zm9yKHZhciBvIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sbykmJihlW29dPW5bb10pfXJldHVybiBlfTt2YXIgZWU9e2NuOlwiMWZ6MjJ6MjJ6MW56MjF6NG16NGJ6NGJ6MWt6MWF6MjF6NGF6MjF6MWx6MjF6MjF6MWJ6MWl6NGF6MWF6MW16MWtcIixzZzpcIjFmejIyejIyejFuejIxejRtejRiejRiejIxejFlejE4ejFqejFnejQ5ejFrejFhejIxejRhejE5ejI3ejIyejFjejFtejI0ejFjejIwejIxejFjejE4ejRhejFhejFtejFrXCIsdmE6XCIxZnoyMnoyMnoxbnoyMXo0bXo0Yno0Ynoxa3oxOHoxanoxZ3oyNHoxOHo0OXoxa3oxYXoyMXo0YXoxOXoyN3oyMnoxY3oxbXoyNHoxY3oyMHoyMXoxY3oxOHo0YXoxYXoxbXoxa1wifSx0ZT1mdW5jdGlvbihlKXt0cnl7dmFyIHQ9ZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoXCIoPzpefDspXFxcXHMqXCIrZStcIj0oW147XSspXCIpKTtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHQ/dFsxXTpcIlwiKX1jYXRjaChlKXtyZXR1cm5cIlwifX0sbmU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIG49ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPT0odm9pZCAwPT09dD9cInVuZGVmaW5lZFwiOm8odCkpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcyxlLmNhbGwodGhpcykpO3JldHVybiBuLmluaXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5hcHBfaWQsbz1lLmNoYW5uZWwscj1lLmxvZyxpPWUuY2hhbm5lbF9kb21haW4sYT1lLm5hbWU7aWYoXCJudW1iZXJcIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiYXBwX2lkIOW/hemhu+aYr+S4gOS4quaVsOWtl++8jOazqOaEj+ajgOafpeaYr+WQpuaYr+S7pWBzdHJpbmdg55qE5pa55byP5Lyg5YWl55qE77yfXCIpO24ubG9nZ2VyPW5ldyBOKGEpLG4ubG9nZ2VyLmluaXQociksbi5pbml0Q29uZmlncyhlKSxuLmluaXRVcmxzKG8saSksbi5zZXRFbnYoXCJhcHBfaWRcIix0KX0sbi5pbml0Q29uZmlncz1mdW5jdGlvbihlKXt2YXIgdD1lLmFwcF9pZCxvPWUuZGlzYWJsZV9zc2lkLHI9ZS5kaXNhYmxlX3dlYmlkLGk9ZS5kaXNhYmxlX3Nka19tb25pdG9yO24uYXBwX2lkPXQsbi5ldnREYXRhQ2FjaGVLZXk9TCtcImV2ZW50c19cIit0LG8mJihuLmxvZ2dlci5pbmZvKFwic3NpZOW3suemgeeUqO+8jOiuvue9rnVzZXJfdW5pcXVlX2lk5LiN5Lya6K+35rGCc3NpZOaOpeWPo+OAglwiKSxuLmlzU3NpZERpc2FibGVkPSEwKSxyJiYobi5sb2dnZXIuaW5mbyhcIndlYmlk5pyN5Yqh5bey56aB55So77yMc3NpZOWQjOaXtuiiq+emgeeUqOOAguWwhuacrOWcsOeUn+aIkHdlYmlk44CCXCIpLG4uaXNXZWJpZERpc2FibGVkPSEwLG4uaXNTc2lkRGlzYWJsZWQ9ITApLGkmJihuLmxvZ2dlci5pbmZvKFwiU0RL55uR5o6n5bey56aB55So44CCXCIpLG4uaXNTZGtNb25pdG9yRGlzYWJsZWQ9ITApfSxuLmluaXRVcmxzPWZ1bmN0aW9uKGUsdCl7aWYoXCJpbnRlcm5hbFwiPT09ZSYmKG4ubG9nZ2VyLndhcm4oXCJjaGFubmVsIOeahOWAvCBpbnRlcm5hbCDlt7Looqvlup/lvIPvvIzlt7Loh6rliqjmlLnkuLogY27jgIJcIiksZT1cImNuXCIpLCF0JiYhZWVbZV0pdGhyb3cgbmV3IEVycm9yKFwiY2hhbm5lbCDlj5jph4/lj6rog73mmK8gYGNuYCwgYHNnYCxgdmFgXCIpO3ZhciBvPXR8fCQoZWVbZV0pO289by5yZXBsYWNlKC9cXC8rJC8sXCJcIiksbi5yZXBvcnRVcmw9bytcIi92MS9saXN0XCIsbi51c2VyVG9rZW5zUHJlZml4PVwiXCIrb30sbi5zZXRFbnY9ZnVuY3Rpb24oZSx0KXtpZihcImFwcF9pZFwiPT09ZSYmbi5jaGVja1VzZXJUb2tlbih0KSxcInVzZXJfdW5pcXVlX2lkXCI9PT1lKXtpZihuLmJsYWNrVXVpZC5zb21lKChmdW5jdGlvbihlKXtyZXR1cm4gZT09PVN0cmluZyh0KX0pKSlyZXR1cm4gdm9pZCBuLmxvZ2dlci53YXJuKCforr7nva7kuobml6DmlYjnmoTlgLwge3VzZXJfdW5pcXVlX2lk77yaXCIlc1wifeOAguivpeaTjeS9nOW3suW/veeVpeOAgicsdCk7bi52ZXJpZnlUb2tlbnModCl9aWYoXCJ3ZWJfaWRcIj09PWUpe2lmKCF0KXJldHVybjsoIW4uZW52SW5mby51c2VyLnVzZXJfdW5pcXVlX2lkfHxuLmVudkluZm8udXNlci51c2VyX3VuaXF1ZV9pZCYmbi5lbnZJbmZvLnVzZXIudXNlcl91bmlxdWVfaWQ9PT1uLmVudkluZm8udXNlci53ZWJfaWQpJiZuLnNldChcInVzZXJfdW5pcXVlX2lkXCIsdCl9bi5zZXQoZSx0KX0sbi50cmFuc2ZlckZyb21Db29raWU9ZnVuY3Rpb24oKXt2YXIgZT1uLnRva2Vuc0NhY2hlS2V5LHQ9dGUoXCJ0dF93ZWJpZFwiKSxvPXRlKFwiX190ZWFfc2RrX19zc2lkXCIpLHI9dGUoXCJfX3RlYV9zZGtfX3VzZXJfdW5pcXVlX2lkXCIpO2lmKFEuaXNMb3dJRSgpKXtpZih0KXt2YXIgaT17d2ViX2lkOnQsc3NpZDp0LHVzZXJfdW5pcXVlX2lkOnR9O08uc2V0KGUsSlNPTi5zdHJpbmdpZnkoaSkpfXJldHVybiExfWlmKHQmJm8mJnIpe3ZhciBhPXt3ZWJfaWQ6dCxzc2lkOm8sdXNlcl91bmlxdWVfaWQ6cn07Ty5zZXQoZSxKU09OLnN0cmluZ2lmeShhKSl9fSxuLnB1cmlmeUJsYWNrVXVpZD1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtpZihuLmJsYWNrVXVpZC5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4gdD09PWUudXNlcl91bmlxdWVfaWR9KSkpe3ZhciB0PXt9O3JldHVybiBuLnNldFVzZXJUb2tlbnModCksbi5sb2dnZXIud2Fybign5qOA5rWL5Yiw5peg5pWI55qE55So5oi35qCH6K+G77yM5bey6YeN572u55So5oi354q25oCB44CCe3VzZXJfdW5pcXVlX2lkOiBcIiVzXCJ9JyxlLnVzZXJfdW5pcXVlX2lkKSx0fXJldHVybiBlfSxuLmdldFVzZXJUb2tlbnM9ZnVuY3Rpb24oKXtyZXR1cm4gTy5nZXQobi50b2tlbnNDYWNoZUtleSl8fHt9fSxuLnNldFVzZXJUb2tlbnM9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307cmV0dXJuIE8uc2V0KG4udG9rZW5zQ2FjaGVLZXksZSl9LG4uY2hlY2tVc2VyVG9rZW49ZnVuY3Rpb24oZSl7dmFyIHQ9TCtcInRva2Vuc19cIitlO24udG9rZW5zQ2FjaGVLZXk9dCxuLnRyYW5zZmVyRnJvbUNvb2tpZSgpO3ZhciBvPW4ucHVyaWZ5QmxhY2tVdWlkKG4uZ2V0VXNlclRva2VucygpKTtvLnVzZXJfdW5pcXVlX2lkJiZvLndlYl9pZD8obi5lbnZJbmZvLnVzZXIudXNlcl91bmlxdWVfaWQ9by51c2VyX3VuaXF1ZV9pZCxuLmVudkluZm8udXNlci53ZWJfaWQ9by53ZWJfaWQsbi5lbnZJbmZvLnVzZXIuc3NpZD1vLnNzaWR8fFwiXCIsbi5sb2dnZXIuaW5mbyhcIuWIneWni+WMluW3sue7j+ajgOa1i+WIsOS6hiB3ZWJpZCB1c2VyX3VuaXF1ZV9pZO+8jOS4gOiIrOaDheWGteS4i+S4jemcgOimgeWGjeasoemqjOivgSBpZCDkuoZcIiksbi51bmxvY2soKSk6bi5yZXF1ZXN0V2ViSWQoZSl9LG4uc2F2ZVRva2VuVG9TdG9yYWdlPWZ1bmN0aW9uKGUpe3ZhciB0PWUud2ViX2lkLG89ZS5zc2lkLHI9ZS51c2VyX3VuaXF1ZV9pZDtuLnNldFVzZXJUb2tlbnMoe3dlYl9pZDp0LHNzaWQ6byx1c2VyX3VuaXF1ZV9pZDpyfSl9LG4ucmVxdWVzdFdlYklkPWZ1bmN0aW9uKCl7bi5pc1JlcXVlc3RXZWJJZD0hMDt2YXIgZT1mdW5jdGlvbihlKXt2YXIgdD1uLmVudkluZm8udXNlci53ZWJfaWR8fGUud2ViX2lkLG89ZS5zc2lkO24uaXNSZXF1ZXN0V2ViSWQ9ITEsbi5lbnZJbmZvLnVzZXIuc3NpZD1vLG4uZW52SW5mby51c2VyLndlYl9pZD10LG4uZW52SW5mby51c2VyLnVzZXJfdW5pcXVlX2lkPXQsbi5zYXZlVG9rZW5Ub1N0b3JhZ2Uoe3dlYl9pZDp0LHNzaWQ6byx1c2VyX3VuaXF1ZV9pZDp0fSksbi53YWl0Rm9yVmVyaWZ5VG9rZW5zPyhuLmxvY2soKSxuLnZlcmlmeVRva2VucyhuLnJlYWxVdWlkKSk6KG4udW5sb2NrKCksbi5jYWxsYmFjayYmbi5jYWxsYmFjaygpKX07bi5pc1dlYmlkRGlzYWJsZWQ/ZSh7d2ViX2lkOkcoKSxzc2lkOlwiXCJ9KTpmdW5jdGlvbigpe3ZhciB0PW4udXNlclRva2Vuc1ByZWZpeCtcIi92MS91c2VyL3dlYmlkXCI7SCh0LHthcHBfaWQ6bi5hcHBfaWQsdXJsOmxvY2F0aW9uLmhyZWYsdXNlcl9hZ2VudDpNLnVzZXJBZ2VudCxyZWZlcmVyOk0ucmVmZXJyZXIsdXNlcl91bmlxdWVfaWQ6XCJcIn0sKGZ1bmN0aW9uKHQpezAhPT10LmU/bi5sb2dnZXIuZXJyb3IoXCLor7fmsYIgd2ViaWQg5aSx6LSl44CC6K+36IGU57O7566h55CG5ZGY44CCXCIpOmUodCl9KSwoZnVuY3Rpb24oKXtuLmlzUmVxdWVzdFdlYklkPSExLG4ubG9nZ2VyLmVycm9yKFwi6I635Y+WIHdlYmlkIOWksei0pe+8jOaVsOaNruWwhuS4jeS8muiiq+S4iuaKpVwiKX0pKX0oKX0sbi52ZXJpZnlUb2tlbnM9ZnVuY3Rpb24oZSl7dmFyIHQ9bi50b2tlbnNDYWNoZUtleTtpZihuLndhaXRGb3JWZXJpZnlUb2tlbnM9ITEsbi5yZWFsVXVpZD1cIlwiK2Usbi5pc1JlcXVlc3RXZWJJZClyZXR1cm4gbi53YWl0Rm9yVmVyaWZ5VG9rZW5zPSEwLG4ubG9nZ2VyLmluZm8oXCLmraPlnKjor7fmsYIgd2ViaWTvvIxyZXF1ZXN0U3NpZCDlsIbkvJrlnKjliY3ogIXor7fmsYLlrozmr5XkuYvlkI7ooqvosIPnlKhcIiksITE7dmFyIG89bi5nZXRVc2VyVG9rZW5zKCk7aWYoby51c2VyX3VuaXF1ZV9pZD09PW4ucmVhbFV1aWQmJm8uc3NpZCYmby53ZWJfaWQpbi5sb2dnZXIuaW5mbyhcIuS8oOWFpeeahCB1c2VyX2lkL3VzZXJfdW5pcXVlX2lkIOS4jiDnvJPlrZjkuK3nmoTlrozlhajkuIDoh7TvvIzml6DpnIDlho3mrKHor7fmsYJcIiksbi51bmxvY2soKTtlbHNle24ubG9jaygpLG4uZW52SW5mby51c2VyLnVzZXJfdW5pcXVlX2lkPW4ucmVhbFV1aWQ7dmFyIHI9Wih7fSxuLmdldFVzZXJUb2tlbnMoKSx7dXNlcl91bmlxdWVfaWQ6bi5yZWFsVXVpZH0pO2lmKE8uc2V0KHQsSlNPTi5zdHJpbmdpZnkocikpLFEuaXNMb3dJRSgpKXJldHVybiBuLnVubG9jaygpLCExO24uaXNTc2lkRGlzYWJsZWQ/KG4udW5sb2NrKCksbi5jYWxsYmFjayYmbi5jYWxsYmFjaygpKTpuLnJlcXVlc3RTc2lkKCl9fSxuLnJlcXVlc3RTc2lkPWZ1bmN0aW9uKCl7dmFyIGU9bi5nZXRVc2VyVG9rZW5zKCksdD1uLnVzZXJUb2tlbnNQcmVmaXgrXCIvdjEvdXNlci9zc2lkXCI7SCh0LHthcHBfaWQ6bi5hcHBfaWQsd2ViX2lkOmUud2ViX2lkLHVzZXJfdW5pcXVlX2lkOlwiXCIrZS51c2VyX3VuaXF1ZV9pZH0sKGZ1bmN0aW9uKHQpe2lmKG4udW5sb2NrKCksMCE9PXQuZSluLmxvZ2dlci5lcnJvcihcIuivt+axgiBzc2lkIOWksei0pX5cIik7ZWxzZXtuLmVudkluZm8udXNlci5zc2lkPXQuc3NpZDt2YXIgbz1aKHt9LGUse3NzaWQ6dC5zc2lkfSk7bi5zZXRVc2VyVG9rZW5zKG8pLG4ubG9nZ2VyLmluZm8oXCLmoLnmja4gdXNlcl91bmlxdWVfaWQg5pu05pawIHNzaWQg5oiQ5Yqf77yB5rOo5oSP77ya5Zyo6L+Z5LmL5YmN5LiN5bqU6K+l5pyJ5pWw5o2u6KKr5Y+R5Ye65Y67XCIpLG4uY2FsbGJhY2smJm4uY2FsbGJhY2soKX19KSwoZnVuY3Rpb24oKXtuLnVubG9jaygpLG4ubG9nZ2VyLmVycm9yKFwi5qC55o2uIHVzZXJfdW5pcXVlX2lkIOiOt+WPluaWsCBzc2lkIOWksei0pVwiKX0pKX0sbi5zZXRFdnRQYXJhbXM9ZnVuY3Rpb24oZSl7dmFyIHQ9Wih7fSxlKTtPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChmdW5jdGlvbihlKXtuLmV2dFBhcmFtc1tlXT10W2VdfSkpfSxuLm1lcmdlRW52VG9FdmVudHM9ZnVuY3Rpb24oZSl7dmFyIHQ9bi5tZXJnZUVudigpLG89W10scj0wLGk9dm9pZCAwO3JldHVybiBlLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0PSEhZS5wYXJhbXMuX19kaXNhYmxlX3N0b3JhZ2VfXzt2b2lkIDA9PT1pP2k9dDoodCE9PWl8fG9bcl0ubGVuZ3RoPj01KSYmKHIrPTEsaT0haSksb1tyXT1vW3JdfHxbXSxvW3JdLnB1c2goZSl9KSksby5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybntldmVudHM6ZS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PVooe30sbi5ldnRQYXJhbXMsZS5wYXJhbXMpO3JldHVybiBkZWxldGUgdC5fX2Rpc2FibGVfc3RvcmFnZV9fLFooe30sZSx7cGFyYW1zOkpTT04uc3RyaW5naWZ5KHQpfSl9KSksdXNlcjp0LnVzZXIsaGVhZGVyOnQuaGVhZGVyLHZlcmJvc2U6bi5kZWJ1Z01vZGU/MTp2b2lkIDAsX19kaXNhYmxlX3N0b3JhZ2VfXzplWzBdLnBhcmFtcy5fX2Rpc2FibGVfc3RvcmFnZV9ffX0pKX0sbi5tZXJnZUVudj1mdW5jdGlvbigpe3ZhciBlPW4uZ2V0KCksdD1YLmdldCgpLG89Wih7fSxlLnVzZXIpLHI9Wih7fSx0LmhlYWRlci5oZWFkZXJzLmN1c3RvbSxlLmhlYWRlci5oZWFkZXJzLmN1c3RvbSksaT1aKHt9LHQuaGVhZGVyLmhlYWRlcnMsZS5oZWFkZXIuaGVhZGVycyx7Y3VzdG9tOnJ9KSxhPVooe30sdC5oZWFkZXIsZS5oZWFkZXIpO3JldHVybnt1c2VyOm8saGVhZGVyOlooe30sYSx7aGVhZGVyczpKU09OLnN0cmluZ2lmeShpKX0pfX0sbi5ldnRQYXJhbXM9e30sbi5yZXBvcnRVcmw9XCJcIixuLnVzZXJUb2tlbnNQcmVmaXg9XCJcIixuLmlzU3NpZERpc2FibGVkPSExLG4uaXNXZWJpZERpc2FibGVkPSExLG4uaXNTZGtNb25pdG9yRGlzYWJsZWQ9ITEsbi5kZWJ1Z01vZGU9ITEsbi5ibGFja1V1aWQ9W1wibnVsbFwiLFwidW5kZWZpbmVkXCIsXCIwXCIsXCJcIixcIk5vbmVcIl0sbi5sb2dnZXI9ZnVuY3Rpb24oKXt9LG59cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrKHZvaWQgMD09PXQ/XCJ1bmRlZmluZWRcIjpvKHQpKSk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCxlKSx0LnByb3RvdHlwZS5sb2NrPWZ1bmN0aW9uKCl7dGhpcy5pc1VzZXJUb2tlbnNSZWFkeT0hMX0sdC5wcm90b3R5cGUudW5sb2NrPWZ1bmN0aW9uKCl7dGhpcy5pc1VzZXJUb2tlbnNSZWFkeT0hMH0sdC5wcm90b3R5cGUuZW5hYmxlRGVidWdNb2RlPWZ1bmN0aW9uKGUpe3RoaXMuZGVidWdNb2RlPWV9LHR9KGEpO3ZhciBvZT1mdW5jdGlvbiBlKCl7dmFyIHQ9dGhpczshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuc2V0PWZ1bmN0aW9uKGUsbil7dC5jYWNoZVtlXT1ufSx0aGlzLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gdC5jYWNoZVtlXX0sdGhpcy5jbGVhbj1mdW5jdGlvbihlKXt0LmNhY2hlW2VdPXZvaWQgMH0sdGhpcy5jYWNoZT17fX0scmU9bmV3IG9lO3ZhciBpZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7dmFyIG49dC5kaXNhYmxlX3N0b3JhZ2Usbz12b2lkIDAhPT1uJiZuOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5faXNQZXJzaXN0ZW50PSFvLHRoaXMuX3N0b3JhZ2U9dGhpcy5faXNQZXJzaXN0ZW50P086bmV3IG9lLHRoaXMuX3N0b3JhZ2VLZXk9XCJcIix0aGlzLl9kYXRhPXZvaWQgMH1yZXR1cm4gZS5wcm90b3R5cGUuc2V0U3RvcmFnZUtleT1mdW5jdGlvbihlKXt0aGlzLl9zdG9yYWdlS2V5PWV9LGUucHJvdG90eXBlLmdldEFsbEV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuZ2V0RGF0YSgpO09iamVjdC5rZXlzKGUpLnJlZHVjZSgoZnVuY3Rpb24odCxuKXtyZXR1cm4gdC5jb25jYXQoZVtuXXx8W10pfSksW10pfSxlLnByb3RvdHlwZS5nZXREYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NoZWNrSXNEYXRhSW5pdCgpLHRoaXMuX2RhdGF9LGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06W107dGhpcy5fY2hlY2tJc0RhdGFJbml0KCksMCE9PXQubGVuZ3RoJiYodGhpcy5fZGF0YVtlXT10LHRoaXMuX3NhdmUoKSl9LGUucHJvdG90eXBlLmRlbGV0ZT1mdW5jdGlvbihlKXt0aGlzLl9jaGVja0lzRGF0YUluaXQoKSx0aGlzLl9kYXRhW2VdJiYoZGVsZXRlIHRoaXMuX2RhdGFbZV0sdGhpcy5fc2F2ZSgpKX0sZS5wcm90b3R5cGUuX2NoZWNrSXNEYXRhSW5pdD1mdW5jdGlvbigpe2lmKHZvaWQgMD09PXRoaXMuX2RhdGEpdHJ5e3ZhciBlLHQ9dGhpcy5fZ2V0RGF0YUZyb21TdG9yYWdlKCk7aWYoUS5pc0FycmF5KHQpKXRoaXMuX2RhdGE9KChlPXt9KVtHKCldPXQsZSksdGhpcy5fc2F2ZSgpO2Vsc2UgdGhpcy5fZGF0YT10fWNhdGNoKGUpe3RoaXMuX2RhdGE9e319fSxlLnByb3RvdHlwZS5fY2hlY2tTdG9yYWdlS2V5PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX3N0b3JhZ2VLZXkpdGhyb3cgbmV3IEVycm9yKFwibXVzdCBjYWxsIHNldFN0b3JhZ2VLZXkoJ3h4eCcpIGZpcnN0XCIpfSxlLnByb3RvdHlwZS5fZ2V0RGF0YUZyb21TdG9yYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NoZWNrU3RvcmFnZUtleSgpLHRoaXMuX3N0b3JhZ2UuZ2V0KHRoaXMuX3N0b3JhZ2VLZXkpfHx7fX0sZS5wcm90b3R5cGUuX3NhdmU9ZnVuY3Rpb24oKXt0aGlzLl9jaGVja1N0b3JhZ2VLZXkoKSx0aGlzLl9zdG9yYWdlLnNldCh0aGlzLl9zdG9yYWdlS2V5LHRoaXMuX2RhdGEpfSxlfSgpLGFlPWZ1bmN0aW9uKGUsdCl7dHJ5e3ZhciBuPWUuc3BsaXQoXCJ2MVwiKVswXTt0LmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUpe3ZhciB0PVwiXCI7Zm9yKHZhciBuIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShuKSYmKHQrPVwiJlwiK24rXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGVbbl0pKSk7cmV0dXJuIHQ9XCImXCI9PT10WzBdP3Quc2xpY2UoMSk6dH0oZSksbz1uZXcgSW1hZ2UoMSwxKTtvLm9ubG9hZD1mdW5jdGlvbigpe289bnVsbH0sby5vbmVycm9yPWZ1bmN0aW9uKCl7bz1udWxsfSxvLnNyYz1uK1wiL3YxL2dpZj9cIit0fSkpfWNhdGNoKGUpe319LHNlPWZ1bmN0aW9uKGUsdCl7aWYod2luZG93LlhEb21haW5SZXF1ZXN0KXJldHVybiBhZShlLHQpO3ZhciBuPW5ldyBYTUxIdHRwUmVxdWVzdDtuLm9wZW4oXCJQT1NUXCIsZStcIj9yZG49XCIrTWF0aC5yYW5kb20oKSwhMCksbi5vbmxvYWQ9ZnVuY3Rpb24oKXt9LG4ub25lcnJvcj1mdW5jdGlvbigpe24uYWJvcnQoKX0sbi5zZW5kKEpTT04uc3RyaW5naWZ5KHQpKX0sbGU9ZnVuY3Rpb24gZSh0LG4sbyxyKXt0cnl7dmFyIGk9dC5zcGxpdChcInYxXCIpWzBdO2lmKCFpKXJldHVybiB2b2lkIHIodCxuLEQpO24uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIGE9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtmb3IodmFyIG4gaW4gZSllLmhhc093blByb3BlcnR5KG4pJiYodCs9XCImXCIrbitcIj1cIitlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoZVtuXSkpKTtyZXR1cm4gdD1cIiZcIj09PXRbMF0/dC5zbGljZSgxKTp0fShlKSxzPW5ldyBJbWFnZSgxLDEpO3Mub25sb2FkPWZ1bmN0aW9uKCl7cz1udWxsLG8oKX0scy5vbmVycm9yPWZ1bmN0aW9uKCl7cz1udWxsLHIodCxuLHopfSxzLnNyYz1pK1wiL3YxL2dpZj9cIithfSkpfWNhdGNoKGUpe3IodCxuLFIsZS5tZXNzYWdlKX19O3ZhciBjZT1mdW5jdGlvbiBlKHQpe3ZhciBuPXRoaXM7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLnNlbmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS51cmwsbz1lLmRhdGEscj1lLnN1Y2Nlc3MsaT1lLmZhaWwsYT1lLmV2ZW50RXJyb3I7aWYoZnVuY3Rpb24oZSl7dmFyIHQ9ZS51cmwsbj1lLmRhdGEsbz1lLnN1Y2Nlc3Mscj1lLmZhaWwsaT1lLm5vdFN1cmUsYT1lLmlzVW5sb2FkLHM9bjtpZih3aW5kb3cuWERvbWFpblJlcXVlc3QpbGUodCxzLG8scik7ZWxzZXtpZihhKXJldHVybiB3aW5kb3cubmF2aWdhdG9yJiZ3aW5kb3cubmF2aWdhdG9yLnNlbmRCZWFjb24/KGkoKSx2b2lkKHdpbmRvdy5uYXZpZ2F0b3Iuc2VuZEJlYWNvbih0LEpTT04uc3RyaW5naWZ5KHMpKT9vKCk6cih0LG4sQSkpKTp2b2lkIGxlKHQscyxvLHIpO3ZhciBsPW5ldyBYTUxIdHRwUmVxdWVzdDtsLm9wZW4oXCJQT1NUXCIsdCtcIj9yZG49XCIrTWF0aC5yYW5kb20oKSwhMCksbC5vbmxvYWQ9ZnVuY3Rpb24oKXtvKHQscyxsLnJlc3BvbnNlVGV4dCl9LGwub25lcnJvcj1mdW5jdGlvbigpe2wuYWJvcnQoKSxyKHQscyxJKX0sbC5zZW5kKEpTT04uc3RyaW5naWZ5KHMpKX19KHt1cmw6dCxkYXRhOm8sc3VjY2VzczpmdW5jdGlvbihlLHQsbyl7cigpO3RyeXt2YXIgaT1KU09OLnBhcnNlKG8pLmU7aWYoMCE9PWkpe3ZhciBzPVwi5pyq55+l6ZSZ6K+vXCI7LTI9PT1pJiYocz1cIuS6i+S7tuagvOW8j+mUmeivr++8geivt+ajgOafpeWtl+auteexu+Wei+aYr+WQpuato+ehruOAglwiKSxuLmxvZ2dlci5lcnJvcihcIuaVsOaNruS4iuaKpeWksei0pe+8gVwiLFwi6ZSZ6K+v56CB77yaXCIraStcIuOAgumUmeivr+S/oeaBr++8mlwiK3MpLGEodCxpKSxkZShlLHQsaSl9fWNhdGNoKG4pe2RlKGUsdCxCKX19LGZhaWw6ZnVuY3Rpb24oZSx0LG8pe24ubG9nZ2VyLmVycm9yKFwi5pWw5o2u5LiK5oql5aSx6LSl77yBXCIsXCLplJnor6/noIHvvJpcIitvKSxpKHQsbyksZGUoZSx0LG8pfSxub3RTdXJlOmUubm90U3VyZSxpc1VubG9hZDplLmlzVW5sb2FkfSksIW4uaXNTZGtNb25pdG9yRGlzYWJsZWQmJiFuLmlzU2RrT25Mb2FkRXZlbnRSZWFkeSl7bi5pc1Nka09uTG9hZEV2ZW50UmVhZHk9ITA7dHJ5e3ZhciBzPW9bMF0uaGVhZGVyLGw9b1swXS51c2VyO3VlKHQse2FwcF9pZDpzLmFwcF9pZCxhcHBfbmFtZTpzLmFwcF9uYW1lLHNka192ZXJzaW9uOnMuc2RrX3ZlcnNpb24sd2ViX2lkOmwud2ViX2lkfSl9Y2F0Y2goZSl7fX19LHRoaXMubG9nZ2VyPXQubG9nZ2VyfHxVLHRoaXMuaXNTZGtPbkxvYWRFdmVudFJlYWR5PSExLHRoaXMuaXNTZGtNb25pdG9yRGlzYWJsZWQ9ITF9LHVlPWZ1bmN0aW9uKGUsdCl7dHJ5e3ZhciBuPXtldmVudHM6W3tldmVudDpcIm9ubG9hZFwiLHBhcmFtczpKU09OLnN0cmluZ2lmeSh7YXBwX2lkOnQuYXBwX2lkLGFwcF9uYW1lOnQuYXBwX25hbWV8fFwiXCIsc2RrX3ZlcnNpb246dC5zZGtfdmVyc2lvbn0pLGxvY2FsX3RpbWVfbXM6RGF0ZS5ub3coKX1dLHVzZXI6e3VzZXJfdW5pcXVlX2lkOnQud2ViX2lkfSxoZWFkZXI6e2FwcF9pZDoxMzM4fX07c2V0VGltZW91dCgoZnVuY3Rpb24oKXtzZShlLFtuXSl9KSwxNil9Y2F0Y2goZSl7fX0sZGU9ZnVuY3Rpb24oZSx0LG4pe3RyeXt2YXIgbz10WzBdLnVzZXIscj10WzBdLmhlYWRlcixpPVtdO3QuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5ldmVudHMuZm9yRWFjaCgoZnVuY3Rpb24oZSl7aS5wdXNoKGUpfSkpfSkpO3ZhciBhPXtldmVudHM6aS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybntldmVudDpcIm9uX2Vycm9yXCIscGFyYW1zOkpTT04uc3RyaW5naWZ5KHtlcnJvcl9jb2RlOm4sYXBwX2lkOnIuYXBwX2lkLGFwcF9uYW1lOnIuYXBwX25hbWV8fFwiXCIsZXJyb3JfZXZlbnQ6ZS5ldmVudCxsb2NhbF90aW1lX21zOmUubG9jYWxfdGltZV9tcyx0ZWFfZXZlbnRfaW5kZXg6RGF0ZS5ub3coKSxwYXJhbXM6ZS5wYXJhbXMsaGVhZGVyOkpTT04uc3RyaW5naWZ5KHIpLHVzZXI6SlNPTi5zdHJpbmdpZnkobyl9KSxsb2NhbF90aW1lX21zOkRhdGUubm93KCl9fSkpLHVzZXI6e3VzZXJfdW5pcXVlX2lkOm8udXNlcl91bmlxdWVfaWR9LGhlYWRlcjp7YXBwX2lkOjEzMzh9fTtzZXRUaW1lb3V0KChmdW5jdGlvbigpe3NlKGUsW2FdKX0pLDE2KX1jYXRjaChlKXt9fTt2YXIgcGU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChuKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpO3ZhciByPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT09KHZvaWQgMD09PXQ/XCJ1bmRlZmluZWRcIjpvKHQpKSYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsZS5jYWxsKHRoaXMpKTtyLmFkZExpc3RlbmVyPWZ1bmN0aW9uKCl7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIiwoZnVuY3Rpb24oKXtyLnJlcG9ydCghMCl9KSwhMSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwoZnVuY3Rpb24oKXtyLnJlcG9ydCghMCl9KSwhMSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwoZnVuY3Rpb24oKXtcImhpZGRlblwiPT09ZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlJiZyLnJlcG9ydCghMCl9KSwhMSl9LHIuc2V0UmVhZHk9ZnVuY3Rpb24oZSl7ci5pc1JlYWR5PWUsci5ldmVudFNlbmRlci5pc1Nka01vbml0b3JEaXNhYmxlZD1yLmlzU2RrTW9uaXRvckRpc2FibGVkLHIuY2hlY2tBbmRTZW5kQ2FjaGVkU3RvcmFnZUV2ZW50cygpLHIucmVwb3J0KCl9LHIuZXZlbnRSZXBvcnRUaW1lcj1udWxsLHIuZXZlbnQ9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06W10sdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLG49cmUuZ2V0KHIuZXZ0RGF0YUNhY2hlS2V5KXx8W10sbz10P1tdLmNvbmNhdChlLG4pOltdLmNvbmNhdChuLGUpO3JlLnNldChyLmV2dERhdGFDYWNoZUtleSxvKSxvLmxlbmd0aD49NT9yLnJlcG9ydCgpOihyLmV2ZW50UmVwb3J0VGltZXImJmNsZWFyVGltZW91dChyLmV2ZW50UmVwb3J0VGltZXIpLHIuZXZlbnRSZXBvcnRUaW1lcj1zZXRUaW1lb3V0KChmdW5jdGlvbigpe3IucmVwb3J0KCksci5ldmVudFJlcG9ydFRpbWVyPW51bGx9KSxyLndhaXRGb3JCYXRjaFRpbWUpKX0sci5yZXBvcnQ9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdO2lmKCFyLmlzVXNlclRva2Vuc1JlYWR5KXJldHVybiExO2lmKCFyLmlzUmVhZHkpcmV0dXJuITE7dmFyIHQ9cmUuZ2V0KHIuZXZ0RGF0YUNhY2hlS2V5KXx8W107cmUuY2xlYW4oci5ldnREYXRhQ2FjaGVLZXkpO3ZhciBuPXIubWVyZ2VFbnZUb0V2ZW50cyh0KTtyLnNlbmREYXRhKG4sZSl9LHIuc2VuZERhdGE9ZnVuY3Rpb24oZSx0KXt2YXIgbj1bXSxvPTAsaT12b2lkIDA7ZS5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgdD0hIWUuX19kaXNhYmxlX3N0b3JhZ2VfXzt2b2lkIDA9PT1pP2k9dDoodCE9PWl8fG5bb10ubGVuZ3RoPj01KSYmKG8rPTEsaT0haSksbltvXT1uW29dfHxbXSxuW29dLnB1c2goZSl9KSksbi5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgbj1HKCk7ZVswXS5fX2Rpc2FibGVfc3RvcmFnZV9ffHxyLmV2ZW50U3RvcmFnZS5hZGQobixlKSxyLl9zZW5kRGF0YShuLGUsdCl9KSl9LHIuY2hlY2tBbmRTZW5kQ2FjaGVkU3RvcmFnZUV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXIuZXZlbnRTdG9yYWdlLmdldERhdGEoKSx0PU9iamVjdC5rZXlzKGUpO3QubGVuZ3RoPjAmJnQuZm9yRWFjaCgoZnVuY3Rpb24odCl7ci5fc2VuZERhdGEodCxlW3RdKX0pKX0sci5fc2VuZERhdGE9ZnVuY3Rpb24oZSx0LG4pe3IuaXNSZXBvcnRpbmc9ITA7dmFyIG89ZnVuY3Rpb24oKXtyLmlzUmVwb3J0aW5nPSExfTtyLmV2ZW50U2VuZGVyLnNlbmQoe3VybDpyLnJlcG9ydFVybCxkYXRhOnQsc3VjY2VzczpmdW5jdGlvbigpe28oKSxyLnNlbmREYXRhU3VjY2VzcyhlKX0sZmFpbDpmdW5jdGlvbihlLHQpe28oKSxyLnJlcG9ydEVycm9yQ2FsbGJhY2soZSx0KSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe3IucmVwb3J0KCl9KSwzZTMpfSxldmVudEVycm9yOmZ1bmN0aW9uKGUsdCl7ci5yZXBvcnRFcnJvckNhbGxiYWNrKGUsdCl9LG5vdFN1cmU6byxpc1VubG9hZDpufSl9LHIuc2VuZERhdGFTdWNjZXNzPWZ1bmN0aW9uKGUpe3IuZXZlbnRTdG9yYWdlLmRlbGV0ZShlKSxyLnJlcG9ydCgpfTt2YXIgaT1uLmxvZyxhPW4uZGlzYWJsZV9zdG9yYWdlLHM9bi5tYXhfYmF0Y2hfbnVtLGw9dm9pZCAwPT09cz81OnMsYz1uLmJhdGNoX3RpbWUsdT12b2lkIDA9PT1jPzMwOmM7cmV0dXJuIHIuaW5pdChuKSxyLm1heEJhdGNoTnVtPWwsci53YWl0Rm9yQmF0Y2hUaW1lPXUsci5pc1JlYWR5PSExLHIuYWRkTGlzdGVuZXIoKSxyLmVuYWJsZURlYnVnTW9kZSghIWkpLHIuZXZlbnRTdG9yYWdlPW5ldyBpZSh7ZGlzYWJsZV9zdG9yYWdlOmF9KSxyLmV2ZW50U3RvcmFnZS5zZXRTdG9yYWdlS2V5KHIuZXZ0RGF0YUNhY2hlS2V5KSxyLmV2ZW50U2VuZGVyPW5ldyBjZSh7bG9nZ2VyOnIubG9nZ2VyfSksci5yZXBvcnRFcnJvckNhbGxiYWNrPWZ1bmN0aW9uKCl7fSxyfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiKyh2b2lkIDA9PT10P1widW5kZWZpbmVkXCI6byh0KSkpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHQsZSksdH0obmUpLGZlPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPWFyZ3VtZW50c1t0XTtmb3IodmFyIG8gaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixvKSYmKGVbb109bltvXSl9cmV0dXJuIGV9O3ZhciBoZT1mdW5jdGlvbigpe3ZhciBlPStEYXRlLm5vdygpK051bWJlcigoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyLDgpKTtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZSs9MX19KCksZ2U9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lOy9eZXZlbnRcXC4vLnRlc3QoZSkmJihuPWUuc2xpY2UoNikpO3ZhciBvPXQ7cmV0dXJuIFEuaXNPYmoobyl8fChvPXt9KSxvLmV2ZW50X2luZGV4PWhlKCkse2V2ZW50Om4scGFyYW1zOm8sbG9jYWxfdGltZV9tczorbmV3IERhdGV9fSx2ZT1mdW5jdGlvbiBlKHQpe3ZhciBuPXRoaXM7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmluaXQ9ZnVuY3Rpb24oZSl7aWYoIVEuaXNPYmooZSkpdGhyb3cgbmV3IEVycm9yKFwiaW5pdCDnmoTlj4LmlbDlv4XpobvmmK9PYmplY3TnsbvlnotcIik7bi5sb2dnZXIuaW5pdChlLmxvZyksbi5jaGFubmVsPW5ldyBwZShmZSh7fSxlLHtuYW1lOm4ubmFtZX0pKSxuLmNoYW5uZWwuY2FsbGJhY2s9ZnVuY3Rpb24oKXtuLmNhbGxiYWNrU2VuZCYmbi5zdGFydCgpfX0sdGhpcy5jb25maWc9ZnVuY3Rpb24oZSl7US5pc09iaihlKXx8bi5sb2dnZXIudGhyb3coXCJjb25maWcg5Y+C5pWw5b+F6aG75pivIHt9IOeahOagvOW8j1wiKSxlLmxvZyYmKG4ubG9nZ2VyLmluaXQoITApLG4uY2hhbm5lbC5lbmFibGVEZWJ1Z01vZGUoITApLGUubG9nPW51bGwpO3ZhciB0PU9iamVjdC5rZXlzKGUpO2lmKCF0Lmxlbmd0aClyZXR1cm4hMTt2YXIgbz10LHI9QXJyYXkuaXNBcnJheShvKSxpPTA7Zm9yKG89cj9vOm9bU3ltYm9sLml0ZXJhdG9yXSgpOzspe3ZhciBhO2lmKHIpe2lmKGk+PW8ubGVuZ3RoKWJyZWFrO2E9b1tpKytdfWVsc2V7aWYoKGk9by5uZXh0KCkpLmRvbmUpYnJlYWs7YT1pLnZhbHVlfXZhciBzPWEsbD1lW3NdO3N3aXRjaChzKXtjYXNlXCJldnRQYXJhbXNcIjpuLmNoYW5uZWwuc2V0RXZ0UGFyYW1zKGwpO2JyZWFrO2Nhc2VcImRpc2FibGVfc3NpZFwiOm4ubG9nZ2VyLmRlcHJlY2F0ZWQoXCIoZGlzYWJsZV9zc2lkKeivt+mAmui/h2luaXTlh73mlbDmnaXorr7nva7jgIJcIiksbCYmKG4ubG9nZ2VyLmluZm8oXCJzc2lk5bey56aB55So77yM6K6+572udXNlcl91bmlxdWVfaWTkuI3kvJror7fmsYJzc2lk5o6l5Y+j44CCXCIpLG4uY2hhbm5lbC5pc1NzaWREaXNhYmxlZD1sKTticmVhaztjYXNlXCJkaXNhYmxlX2F1dG9fcHZcIjpsJiYobi5sb2dnZXIuaW5mbyhcIuW3suemgeatoum7mOiupOS4iuaKpXByZWRlZmluZV9wYWdldmlld+S6i+S7tu+8jOmcgOaJi+WKqOS4iuaKpeOAglwiKSxuLl9hdXRvU2VuZFBWPSExKTticmVhaztjYXNlXCJfc3RhZ2luZ19mbGFnXCI6XCJcIitsPT1cIjFcIiYmbi5sb2dnZXIuaW5mbyhcIuagueaNrl9zdGFnaW5nX2ZsYWforr7nva7vvIzmlbDmja7lsIbkvJrkuIrmiqXliLBzdGFnIOihqOOAglwiKSxuLmNoYW5uZWwuc2V0RXZ0UGFyYW1zKHtfc3RhZ2luZ19mbGFnOk51bWJlcihsKX0pO2JyZWFrO2Nhc2VcInJlcG9ydEVycm9yQ2FsbGJhY2tcIjpcImZ1bmN0aW9uXCI9PXR5cGVvZiBsJiYobi5jaGFubmVsLnJlcG9ydEVycm9yQ2FsbGJhY2s9bCk7YnJlYWs7ZGVmYXVsdDpuLmNoYW5uZWwuc2V0RW52KHMsbCl9fX0sdGhpcy5zZW5kPWZ1bmN0aW9uKCl7bi5zdGFydCgpfSx0aGlzLnN0YXJ0PWZ1bmN0aW9uKCl7aWYobi5jaGFubmVsLmlzVXNlclRva2Vuc1JlYWR5KXtpZihuLl9pc1NlbmRGdW5jQ2FsbGVkKXJldHVybjtuLl9pc1NlbmRGdW5jQ2FsbGVkPSEwLG4ubG9nZ2VyLmluZm8oXCLnnIvliLDmnKzmj5DnpLrvvIzmhI/lkbPnnYDnlKjmiLfkv6Hmga/lt7LlrozlhajlsLHnu6rvvIzkuIrmiqXpgJrpgZPmiZPlvIDjgILnlKjmiLfmoIfor4blpoLkuIvvvJpcIiksbi5sb2dnZXIubG9nSlNPTihuLmNoYW5uZWwuZ2V0KCkudXNlciksbi5fYXV0b1NlbmRQViYmbi5wcmVkZWZpbmVQYWdlVmlldygpLG4uY2hhbm5lbC5zZXRSZWFkeSghMCl9ZWxzZSBuLmNhbGxiYWNrU2VuZD0hMH0sdGhpcy5wcmVkZWZpbmVQYWdlVmlldz1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSx0PXt0aXRsZTpkb2N1bWVudC50aXRsZXx8bG9jYXRpb24ucGF0aG5hbWUsdXJsOmxvY2F0aW9uLmhyZWYsdXJsX3BhdGg6bG9jYXRpb24ucGF0aG5hbWV9LG89ZmUoe30sdCxlKTtuLmV2ZW50KFwicHJlZGVmaW5lX3BhZ2V2aWV3XCIsbywhMCl9LHRoaXMuZXZlbnQ9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PUFycmF5KGUpLG89MDtvPGU7bysrKXRbb109YXJndW1lbnRzW29dO3ZhciByPVEuaXNCb29sZWFuKHRbdC5sZW5ndGgtMV0pLGk9ISFyJiZ0W3QubGVuZ3RoLTFdLGE9cj90LnNsaWNlKDAsdC5sZW5ndGgtMSk6dCxzPWFbMF0sbD1bXTtRLmlzQXJyYXkocyk/bD1hOmxbMF09YSxsPWwubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZ2UuYXBwbHkodm9pZCAwLGUpfSkpLG4uY2hhbm5lbC5ldmVudChsLGkpfSx0aGlzLl9pc1NlbmRGdW5jQ2FsbGVkPSExLHRoaXMuX2F1dG9TZW5kUFY9ITAsdGhpcy5uYW1lPXQsdGhpcy5sb2dnZXI9bmV3IE4odCl9O3ZlLmV4cG9ydE1ldGhvZHM9W1wiaW5pdFwiLFwiY29uZmlnXCIsXCJzZW5kXCIsXCJzdGFydFwiLFwicHJlZGVmaW5lUGFnZVZpZXdcIl07dC5kZWZhdWx0PWZ1bmN0aW9uIGUodCl7dmFyIG49dGhpcztyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuX2V4cG9ydENvbGxlY3Q9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PUFycmF5KGUpLG89MDtvPGU7bysrKXRbb109YXJndW1lbnRzW29dO24uX2lzUXVldWVQcm9jZXNzZWQ/bi5fZXhlY3V0ZUNtZC5hcHBseShuLHQpOihuLmNtZFF1ZXVlLnB1c2godCksbi5fcHJvY2Vzc0NtZFF1ZXVlKCkpfSx0aGlzLl9wcm9jZXNzQ21kUXVldWU9ZnVuY3Rpb24oKXtpZigwIT09bi5jbWRRdWV1ZS5sZW5ndGgpe3ZhciBlPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbz0tMTtyZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlLHIpeyh2b2lkIDAhPT1uP2Vbbl06ZSk9PT10JiYobz1yKX0pKSxvfShuLmNtZFF1ZXVlLFwiaW5pdFwiLFwiMFwiKTstMSE9PWUmJihuLl9pc1F1ZXVlUHJvY2Vzc2VkPSEwLG4uX2V4ZWN1dGVDbWQuYXBwbHkobixuLmNtZFF1ZXVlW2VdKSxuLmNtZFF1ZXVlLmZvckVhY2goKGZ1bmN0aW9uKHQsbyl7byE9PWUmJm4uX2V4ZWN1dGVDbWQuYXBwbHkobix0KX0pKSxuLmNtZFF1ZXVlPVtdKX19LHRoaXMuX2V4ZWN1dGVDbWQ9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PUFycmF5KGUpLG89MDtvPGU7bysrKXRbb109YXJndW1lbnRzW29dO3ZhciByLGksYT10WzBdO3ZlLmV4cG9ydE1ldGhvZHMuaW5kZXhPZihhKT4tMT8ocj1uLmNvbGxvY3RvcilbYV0uYXBwbHkocix0LnNsaWNlKDEpKTooaT1uLmNvbGxvY3RvcikuZXZlbnQuYXBwbHkoaSx0KX0sdGhpcy5uYW1lPXR8fFwiQ29sbGVjdG9yXCIrICtuZXcgRGF0ZSx0aGlzLmNtZFF1ZXVlPVtdLHRoaXMuY29sbG9jdG9yPW5ldyB2ZSh0aGlzLm5hbWUpLHRoaXMuX2lzUXVldWVQcm9jZXNzZWQ9ITEsdGhpcy5fcHJvY2Vzc0NtZFF1ZXVlKCksdGhpcy5fZXhwb3J0Q29sbGVjdC5pbml0PXRoaXMuX2V4cG9ydENvbGxlY3QuYmluZCh0aGlzLFwiaW5pdFwiKSx0aGlzLl9leHBvcnRDb2xsZWN0LmNvbmZpZz10aGlzLl9leHBvcnRDb2xsZWN0LmJpbmQodGhpcyxcImNvbmZpZ1wiKSx0aGlzLl9leHBvcnRDb2xsZWN0LnNlbmQ9dGhpcy5fZXhwb3J0Q29sbGVjdC5iaW5kKHRoaXMsXCJzZW5kXCIpLHRoaXMuX2V4cG9ydENvbGxlY3Quc3RhcnQ9dGhpcy5fZXhwb3J0Q29sbGVjdC5iaW5kKHRoaXMsXCJzdGFydFwiKSx0aGlzLl9leHBvcnRDb2xsZWN0LnByZWRlZmluZVBhZ2VWaWV3PXRoaXMuX2V4cG9ydENvbGxlY3QuYmluZCh0aGlzLFwicHJlZGVmaW5lUGFnZVZpZXdcIiksdGhpcy5fZXhwb3J0Q29sbGVjdH0sZS5leHBvcnRzPXQuZGVmYXVsdH0sXCIuL3NyYy9jb250cm9sL2Nzc0Z1bGxzY3JlZW4uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvY3NzRnVsbHNjcmVlbi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcImNzc0Z1bGxzY3JlZW5cIiwoZnVuY3Rpb24oKXt2YXIgZT1pLmRlZmF1bHQudXRpbDtpZih0aGlzLmNvbmZpZy5jc3NGdWxsc2NyZWVuKXt2YXIgdD1cIk04MzQuNTYgODEuOTJIMTg5LjQ0Yy01OS4zOTIgMC0xMDcuNTIgNDguMTI4LTEwNy41MiAxMDcuNTJ2NjQ1LjEyYzAgNTkuMzkyIDQ4LjEyOCAxMDcuNTIgMTA3LjUyIDEwNy41Mmg2NDUuMTJjNTkuMzkyIDAgMTA3LjUyLTQ4LjEyOCAxMDcuNTItMTA3LjUyVjE4OS40NGMwLTU5LjM5Mi00OC4xMjgtMTA3LjUyLTEwNy41Mi0xMDcuNTJ6TTQ1OC4yNCA3MjcuMDRjMCAxNC44NDgtMTIuMjg4IDI2LjYyNC0yNi42MjQgMjYuNjI0UzQwNC40OCA3NDEuODg4IDQwNC40OCA3MjcuMDR2LTY5LjYzMkwyODkuMjggNzczLjEyYy0xMC43NTIgMTAuMjQtMjcuNjQ4IDEwLjI0LTM3Ljg4OCAwLTEwLjI0LTEwLjc1Mi0xMC4yNC0yNy42NDggMC0zNy44ODhMMzY2LjU5MiA2MTkuNTJIMjk2Ljk2Yy0xNC44NDggMC0yNi42MjQtMTIuMjg4LTI2LjYyNC0yNi42MjRzMTIuMjg4LTI2LjYyNCAyNi42MjQtMjYuNjI0aDEzNC4xNDRjMTQuODQ4IDAgMjYuNjI0IDEyLjI4OCAyNi42MjQgMjYuNjI0VjcyNy4wNHogbTAtMjk1LjkzNmMwIDE0Ljg0OC0xMi4yODggMjYuNjI0LTI2LjYyNCAyNi42MjRIMjk2Ljk2Yy0xNC44NDggMC0yNi42MjQtMTIuMjg4LTI2LjYyNC0yNi42MjRTMjgyLjExMiA0MDQuNDggMjk2Ljk2IDQwNC40OGg2OS42MzJMMjUxLjM5MiAyODkuMjhjLTEwLjI0LTEwLjc1Mi0xMC4yNC0yNy42NDggMC0zNy44ODggNS4xMi01LjEyIDEyLjI4OC03LjY4IDE4Ljk0NC03LjY4IDYuNjU2IDAgMTMuODI0IDIuNTYgMTguOTQ0IDcuNjhMNDA0LjQ4IDM2Ni41OTJWMjk2Ljk2YzAtMTQuODQ4IDEyLjI4OC0yNi42MjQgMjYuNjI0LTI2LjYyNHMyNi42MjQgMTIuMjg4IDI2LjYyNCAyNi42MjR2MTM0LjE0NHpNNzczLjEyIDc3My4xMmMtMTAuNzUyIDEwLjI0LTI3LjY0OCAxMC4yNC0zNy44ODggMEw2MTkuNTIgNjU3LjQwOFY3MjcuMDRjMCAxNC44NDgtMTIuMjg4IDI2LjYyNC0yNi42MjQgMjYuNjI0cy0yNi42MjQtMTEuNzc2LTI2LjYyNC0yNi42MjR2LTEzNC4xNDRjMC0xNC44NDggMTIuMjg4LTI2LjYyNCAyNi42MjQtMjYuNjI0SDcyNy4wNGMxNC44NDggMCAyNi42MjQgMTIuMjg4IDI2LjYyNCAyNi42MjRzLTEyLjI4OCAyNi42MjQtMjYuNjI0IDI2LjYyNGgtNjkuNjMybDExNS4yIDExNS4yYzEwLjc1MiAxMC43NTIgMTAuNzUyIDI3LjY0OCAwLjUxMiAzOC40eiBtMC00ODMuODRMNjU3LjQwOCA0MDQuNDhINzI3LjA0YzE0Ljg0OCAwIDI2LjYyNCAxMi4yODggMjYuNjI0IDI2LjYyNCAwIDE0Ljg0OC0xMi4yODggMjYuNjI0LTI2LjYyNCAyNi42MjRoLTEzNC4xNDRjLTE0Ljg0OCAwLTI2LjYyNC0xMi4yODgtMjYuNjI0LTI2LjYyNFYyOTYuOTZjMC0xNC44NDggMTIuMjg4LTI2LjYyNCAyNi42MjQtMjYuNjI0czI2LjYyNCAxMi4yODggMjYuNjI0IDI2LjYyNHY2OS42MzJMNzM0LjcyIDI1MC44OGM1LjEyLTUuMTIgMTIuMjg4LTcuNjggMTguOTQ0LTcuNjhzMTMuODI0IDIuNTYgMTguOTQ0IDcuNjhjMTAuNzUyIDEwLjc1MiAxMC43NTIgMjcuNjQ4IDAuNTEyIDM4LjR6XCIsbj1cIk04NDMuNjE3MjEyIDY3Ljg5ODQxMyAxNzUuNDExNTY3IDY3Ljg5ODQxM2MtNjEuNTAyNzQ5IDAtMTExLjM2NzQzNyA0OS44NTY1MDEtMTExLjM2NzQzNyAxMTEuMzY3NDM3bDAgNjY4LjIwNTY0NWMwIDYxLjUxMDkzNiA0OS44NjQ2ODggMTExLjM2NzQzNyAxMTEuMzY3NDM3IDExMS4zNjc0MzdMODQzLjYxNzIxMiA5NTguODM4OTMxYzYxLjUxMDkzNiAwIDExMS4zNjc0MzctNDkuODU2NTAxIDExMS4zNjc0MzctMTExLjM2NzQzN0w5NTQuOTg0NjQ4IDE3OS4yNjU4NUM5NTQuOTg0NjQ4IDExNy43NTQ5MTQgOTA1LjEyOTE3IDY3Ljg5ODQxMyA4NDMuNjE3MjEyIDY3Ljg5ODQxM3pNMzk4LjE0NjQ0MSA3MzYuMTA0MDU3YzE1LjM4MDI5MiAwIDI3Ljg0MjExNSAxMi40NjE4MjMgMjcuODQyMTE1IDI3Ljg0MjExNSAwIDE1LjM3OTI2OS0xMi40NjE4MjMgMjcuODQxMDkyLTI3Ljg0MjExNSAyNy44NDEwOTJMMjU5LjcyNTg1OCA3OTEuNzg3MjY0Yy03Ljc4NTMxNCAwLTE0Ljc4MTY1OC0zLjIxNzI3NS0xOS44Mzg4MzctOC4zNjU1MjgtNS4zODM2MTQtNC41NzcyNDktOC43OTEyMjQtMTEuMjI4NzM5LTguNzkxMjI0LTE5LjQ3NTU2NEwyMzEuMDk1Nzk3IDYyNC43MzY2MjFjMC0xNS4zNzEwODIgMTIuNDcxMDMzLTI3Ljg0MjExNSAyNy44NDIxMTUtMjcuODQyMTE1IDE1LjM4MDI5MiAwIDI3Ljg0MjExNSAxMi40NzEwMzMgMjcuODQyMTE1IDI3Ljg0MjExNWwtMC42MTYwMyA3MS40MjY3NzMgMTMzLjAzNjk2OS0xMzMuMDM3OTkyIDM5LjM3ODg2OSAzOS4zNzg4NjlMMzI0Ljk2MjY1MSA3MzYuMTEzMjY3IDM5OC4xNDY0NDEgNzM2LjEwNDA1N3pNNDE5LjE5OTk0MiA0NjMuNjExOTQzIDI4Ni4xNjI5NzQgMzMwLjU2NTc2NGwwLjYxNjAzIDcxLjQzNTk4MmMwIDE1LjM4MDI5Mi0xMi40NjE4MjMgMjcuODQyMTE1LTI3Ljg0MjExNSAyNy44NDIxMTUtMTUuMzcxMDgyIDAtMjcuODQyMTE1LTEyLjQ2MTgyMy0yNy44NDIxMTUtMjcuODQyMTE1TDIzMS4wOTQ3NzQgMjYyLjc5MTE3MmMwLTguMjU2MDM0IDMuNDA3NjEtMTQuOTA4NTQ4IDguNzkxMjI0LTE5LjQ3NjU4NyA1LjA1NzE3OS01LjE0ODI1MyAxMi4wNTM1MjQtOC4zNzQ3MzggMTkuODM4ODM3LTguMzc0NzM4bDEzOC40MjA1ODMgMC4wMDkyMWMxNS4zODAyOTIgMCAyNy44NDIxMTUgMTIuNDYxODIzIDI3Ljg0MjExNSAyNy44NDIxMTVzLTEyLjQ2MTgyMyAyNy44NDIxMTUtMjcuODQyMTE1IDI3Ljg0MjExNWwtNzMuMTc1NjAzLTAuMDA5MjEgMTMzLjYwNzk3NCAxMzMuNjA3OTc0TDQxOS4xOTk5NDIgNDYzLjYxMTk0M3pNNzg3LjkzMjk4MSA3NjMuOTQ2MTcyYzAgOC4yNDc4NDgtMy40MDc2MSAxNC44OTkzMzgtOC43OTEyMjQgMTkuNDc1NTY0LTUuMDU3MTc5IDUuMTQ4MjUzLTEyLjA1MzUyNCA4LjM2NTUyOC0xOS44Mzk4NjEgOC4zNjU1MjhMNjIwLjg4MTMxNCA3OTEuNzg3MjY0Yy0xNS4zNzkyNjkgMC0yNy44NDEwOTItMTIuNDYxODIzLTI3Ljg0MTA5Mi0yNy44NDEwOTIgMC0xNS4zODAyOTIgMTIuNDYxODIzLTI3Ljg0MjExNSAyNy44NDEwOTItMjcuODQyMTE1bDczLjE4NTgzNiAwLjAwOTIxTDU2MC40NDk5NjcgNjAyLjUwNDI3bDM5LjM3ODg2OS0zOS4zNzg4NjlMNzMyLjg3NTAxNSA2OTYuMTYzMzkzbC0wLjYyNTI0LTcxLjQyNjc3M2MwLTE1LjM3MTA4MiAxMi40NjI4NDYtMjcuODQyMTE1IDI3Ljg0MjExNS0yNy44NDIxMTUgMTUuMzgwMjkyIDAgMjcuODQyMTE1IDEyLjQ3MTAzMyAyNy44NDIxMTUgMjcuODQyMTE1TDc4Ny45MzQwMDUgNzYzLjk0NjE3MnpNNzg3LjkzMjk4MSA0MDIuMDAwNzI0YzAgMTUuMzgwMjkyLTEyLjQ2MTgyMyAyNy44NDIxMTUtMjcuODQyMTE1IDI3Ljg0MjExNS0xNS4zNzkyNjkgMC0yNy44NDIxMTUtMTIuNDYxODIzLTI3Ljg0MjExNS0yNy44NDIxMTVsMC42MjUyNC03MS40MzU5ODJMNTk5LjgyODgzNiA0NjMuNjExOTQzbC0zOS4zNzg4NjktMzkuMzc4ODY5IDEzMy42MTcxODQtMTMzLjYwNzk3NC03My4xODU4MzYgMC4wMDkyMWMtMTUuMzc5MjY5IDAtMjcuODQxMDkyLTEyLjQ2MTgyMy0yNy44NDEwOTItMjcuODQyMTE1czEyLjQ2MTgyMy0yNy44NDIxMTUgMjcuODQxMDkyLTI3Ljg0MjExNWwxMzguNDIxNjA2LTAuMDA5MjFjNy43ODUzMTQgMCAxNC43ODE2NTggMy4yMjY0ODQgMTkuODM5ODYxIDguMzc0NzM4IDUuMzgzNjE0IDQuNTY4MDM5IDguNzkxMjI0IDExLjIxOTUyOSA4Ljc5MTIyNCAxOS40NzY1ODdMNzg3LjkzNDAwNSA0MDIuMDAwNzI0elwiLG89ZS5jcmVhdGVEb20oXCJ4Zy1jc3NmdWxsc2NyZWVuXCIsJzx4Zy1pY29uIGNsYXNzPVwieGdwbGF5ZXItaWNvblwiPjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTAyNFwiIGhlaWdodD1cIjEwMjRcIiB2aWV3Qm94PVwiMCAwIDEwMjQgMTAyNFwiPlxcbiAgICAgICAgICAgIDxwYXRoIHRyYW5zZm9ybT1cInNjYWxlKDAuMDMgMC4wMylcIiBkPVwiJytuKydcIj48L3BhdGg+XFxuICAgICAgICA8L3N2Zz48L3hnLWljb24+Jyx7fSxcInhncGxheWVyLWNzc2Z1bGxzY3JlZW5cIikscj10aGlzLmNvbmZpZy5sYW5nJiZcInpoLWNuXCI9PT10aGlzLmNvbmZpZy5sYW5nP1wi5qC35byP5YWo5bGPXCI6XCJGdWxsIHNjcmVlblwiLGE9dGhpcy5jb25maWcubGFuZyYmXCJ6aC1jblwiPT09dGhpcy5jb25maWcubGFuZz9cIumAgOWHuuWFqOWxj1wiOlwiRXhpdCBmdWxsIHNjcmVlblwiLHM9dGhpcy5jb250cm9scyxsPXRoaXMucm9vdCxjPWUuY3JlYXRlRG9tKFwieGctdGlwc1wiLHIse30sXCJ4Z3BsYXllci10aXBzXCIpLHU9by5xdWVyeVNlbGVjdG9yKFwicGF0aFwiKTtvLmFwcGVuZENoaWxkKGMpO3MuYXBwZW5kQ2hpbGQobyksW1wiY2xpY2tcIixcInRvdWNoZW5kXCJdLmZvckVhY2goKGZ1bmN0aW9uKGkpe28uYWRkRXZlbnRMaXN0ZW5lcihpLChmdW5jdGlvbihvKXt2YXIgaTtvLnByZXZlbnREZWZhdWx0KCksby5zdG9wUHJvcGFnYXRpb24oKSxlLmhhc0NsYXNzKGwsXCJ4Z3BsYXllci1jc3NmdWxsc2NyZWVuLWFjdGl2ZVwiKXx8ZS5oYXNDbGFzcyhsLFwieGdwbGF5ZXItaXMtZnVsbHNjcmVlblwiKT8oaT1sLHUuc2V0QXR0cmlidXRlKFwiZFwiLG4pLGMudGV4dENvbnRlbnQ9cixlLnJlbW92ZUNsYXNzKGksXCJ4Z3BsYXllci1jc3NmdWxsc2NyZWVuLWFjdGl2ZVwiKSk6ZnVuY3Rpb24obil7dS5zZXRBdHRyaWJ1dGUoXCJkXCIsdCksYy50ZXh0Q29udGVudD1hLGUuYWRkQ2xhc3MobixcInhncGxheWVyLWNzc2Z1bGxzY3JlZW4tYWN0aXZlXCIpfShsKX0pKX0pKSxvLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsKGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpLGMuc3R5bGUubGVmdD1cIjUwJVwiO3ZhciB0PWMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj1sLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3QucmlnaHQ+bi5yaWdodCYmKGMuc3R5bGUubGVmdD0tdC5yaWdodCtuLnJpZ2h0KzE2K1wicHhcIil9KSl9fSkpfSxcIi4vc3JjL2NvbnRyb2wvZGFubXUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL2Rhbm11LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89aShuKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSkscj1pKG4oLyohIGRhbm11LmpzICovXCIuL25vZGVfbW9kdWxlcy9kYW5tdS5qcy9kaXN0L2luZGV4LmpzXCIpKTtmdW5jdGlvbiBpKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1vLmRlZmF1bHQuaW5zdGFsbChcImRhbm11XCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZihlLmNvbmZpZy5kYW5tdSl7dmFyIHQ9by5kZWZhdWx0LnV0aWwuY3JlYXRlRG9tKFwieGctYnVsbGV0XCIsXCJcIix7fSxcInhncGxheWVyLWJ1bGxldFwiKTtlLnJvb3QuYXBwZW5kQ2hpbGQodCksdC5zdHlsZS5oZWlnaHQ9XCIxMDAlXCI7dmFyIG49by5kZWZhdWx0LnV0aWwuZGVlcENvcHkoe2NvbnRhaW5lcjp0LHBsYXllcjplLnZpZGVvLGNvbW1lbnRzOltdLGFyZWE6e3N0YXJ0OjAsZW5kOjF9fSxlLmNvbmZpZy5kYW5tdSk7ZS5vbmNlKFwiY29tcGxldGVcIiwoZnVuY3Rpb24oKXt2YXIgaT1uZXcgci5kZWZhdWx0KG4pO28uZGVmYXVsdC51dGlsLmFkZENsYXNzKHQsXCJ4Z3BsYXllci1oYXMtYnVsbGV0XCIpLGUuY29uZmlnLmRhbm11LmNsb3NlRGVmYXVsdEJ0bnx8KGUuYnVsbGV0QnRuPW8uZGVmYXVsdC51dGlsLmNvcHlEb20oaS5idWxsZXRCdG4uY3JlYXRlU3dpdGNoKCEwKSksZS5jb250cm9scy5hcHBlbmRDaGlsZChlLmJ1bGxldEJ0biksW1wiY2xpY2tcIixcInRvdWNoZW5kXCJdLmZvckVhY2goKGZ1bmN0aW9uKG4pe2UuYnVsbGV0QnRuLmFkZEV2ZW50TGlzdGVuZXIobiwoZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksby5kZWZhdWx0LnV0aWwudG9nZ2xlQ2xhc3MoZS5idWxsZXRCdG4sXCJkYW5tdS1zd2l0Y2gtYWN0aXZlXCIpLG8uZGVmYXVsdC51dGlsLmhhc0NsYXNzKGUuYnVsbGV0QnRuLFwiZGFubXUtc3dpdGNoLWFjdGl2ZVwiKT8oby5kZWZhdWx0LnV0aWwuYWRkQ2xhc3ModCxcInhncGxheWVyLWhhcy1idWxsZXRcIiksZS5vbmNlKFwidGltZXVwZGF0ZVwiLChmdW5jdGlvbigpe2kuc3RhcnQoKX0pKSk6KG8uZGVmYXVsdC51dGlsLnJlbW92ZUNsYXNzKHQsXCJ4Z3BsYXllci1oYXMtYnVsbGV0XCIpLGkuc3RvcCgpKX0pLCExKX0pKSxlLm9uRWxlbWVudENsaWNrJiZ0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLChmdW5jdGlvbihuKXtlLm9uRWxlbWVudENsaWNrKG4sdCl9KSwhMSksZS5vbkVsZW1lbnREYmxjbGljayYmdC5hZGRFdmVudExpc3RlbmVyKFwiZGJsY2xpY2tcIiwoZnVuY3Rpb24obil7ZS5vbkVsZW1lbnREYmxjbGljayhuLHQpfSksITEpLGUub24oXCJwYXVzZVwiLChmdW5jdGlvbigpe28uZGVmYXVsdC51dGlsLmhhc0NsYXNzKGUuYnVsbGV0QnRuLFwiZGFubXUtc3dpdGNoLWFjdGl2ZVwiKSYmaS5wYXVzZSgpfSkpLGUub24oXCJwbGF5XCIsKGZ1bmN0aW9uKCl7by5kZWZhdWx0LnV0aWwuaGFzQ2xhc3MoZS5idWxsZXRCdG4sXCJkYW5tdS1zd2l0Y2gtYWN0aXZlXCIpJiZpLnBsYXkoKX0pKSxlLm9uKFwic2Vla2VkXCIsKGZ1bmN0aW9uKCl7by5kZWZhdWx0LnV0aWwuaGFzQ2xhc3MoZS5idWxsZXRCdG4sXCJkYW5tdS1zd2l0Y2gtYWN0aXZlXCIpJiYoaS5zdG9wKCksaS5zdGFydCgpKX0pKSksZS5kYW5tdT1pfSkpfX0pKX0sXCIuL3NyYy9jb250cm9sL2RlZmluaXRpb24uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvZGVmaW5pdGlvbi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcImRlZmluaXRpb25cIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9aS5kZWZhdWx0LnV0aWwsbj1pLmRlZmF1bHQuc25pZmZlcixvPXQuY3JlYXRlRG9tKFwieGctZGVmaW5pdGlvblwiLFwiXCIse3RhYmluZGV4OjN9LFwieGdwbGF5ZXItZGVmaW5pdGlvblwiKSxyPWUuY29udHJvbHM7XCJtb2JpbGVcIj09PW4uZGV2aWNlJiYoZS5jb25maWcuZGVmaW5pdGlvbkFjdGl2ZT1cImNsaWNrXCIpO3ZhciBhPVtdO2Z1bmN0aW9uIHMoKXt2YXIgbj1bXCI8dWw+XCJdLGk9ZS5jb25maWcudXJsLHM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7ZS5zd2l0Y2hVUkw/W1wibXA0XCIsXCJobHNcIixcIl9fZmx2X19cIixcImRhc2hcIl0uZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiFlW3RdfHwoZVt0XS51cmwmJihzLmhyZWY9ZVt0XS51cmwpLFwiX19mbHZfX1wiPT09dCYmKGVbdF0uX29wdGlvbnM/cy5ocmVmPWVbdF0uX29wdGlvbnMudXJsOnMuaHJlZj1lW3RdLl9tZWRpYURhdGFTb3VyY2UudXJsKSxpPXMuaHJlZiwhMSl9KSk6aT1lLmN1cnJlbnRTcmN8fGUuc3JjLGUuaGxzJiYocy5ocmVmPWUuaGxzLnVybCxpPXMuaHJlZiksYS5mb3JFYWNoKChmdW5jdGlvbih0KXtzLmhyZWY9dC51cmwsZS5kYXNoP24ucHVzaChcIjxsaSB1cmw9J1wiK3QudXJsK1wiJyBjbmFtZT0nXCIrdC5uYW1lK1wiJyBjbGFzcz0nXCIrKHQuc2VsZWN0ZWQ/XCJkZWZpbml0aW9uXCI6XCJcIikrXCInPlwiK3QubmFtZStcIjwvbGk+XCIpOm4ucHVzaChcIjxsaSB1cmw9J1wiK3QudXJsK1wiJyBjbmFtZT0nXCIrdC5uYW1lK1wiJyBjbGFzcz0nXCIrKHMuaHJlZj09PWk/XCJkZWZpbml0aW9uXCI6XCJcIikrXCInPlwiK3QubmFtZStcIjwvbGk+XCIpfSkpO3ZhciBsPWEuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gcy5ocmVmPXQudXJsLGUuZGFzaD8hMD09PXQuc2VsZWN0ZWQ6cy5ocmVmPT09aX0pKTtuLnB1c2goXCI8L3VsPjxwIGNsYXNzPSduYW1lJz5cIisobFswXXx8e25hbWU6XCJcIn0pLm5hbWUrXCI8L3A+XCIpO3ZhciBjPXIucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1kZWZpbml0aW9uXCIpO2lmKGMpe2MuaW5uZXJIVE1MPW4uam9pbihcIlwiKTt2YXIgdT1jLnF1ZXJ5U2VsZWN0b3IoXCIubmFtZVwiKTtlLmNvbmZpZy5kZWZpbml0aW9uQWN0aXZlJiZcImhvdmVyXCIhPT1lLmNvbmZpZy5kZWZpbml0aW9uQWN0aXZlfHx1LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsKGZ1bmN0aW9uKG4pe24ucHJldmVudERlZmF1bHQoKSxuLnN0b3BQcm9wYWdhdGlvbigpLHQuYWRkQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItZGVmaW5pdGlvbi1hY3RpdmVcIiksYy5mb2N1cygpfSkpfWVsc2V7by5pbm5lckhUTUw9bi5qb2luKFwiXCIpO3ZhciBkPW8ucXVlcnlTZWxlY3RvcihcIi5uYW1lXCIpO2UuY29uZmlnLmRlZmluaXRpb25BY3RpdmUmJlwiaG92ZXJcIiE9PWUuY29uZmlnLmRlZmluaXRpb25BY3RpdmV8fGQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwoZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksdC5hZGRDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci1kZWZpbml0aW9uLWFjdGl2ZVwiKSxvLmZvY3VzKCl9KSksci5hcHBlbmRDaGlsZChvKX19ZnVuY3Rpb24gbChuKXsoYT1uKSYmYSBpbnN0YW5jZW9mIEFycmF5JiZhLmxlbmd0aD4xJiYodC5hZGRDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci1pcy1kZWZpbml0aW9uXCIpLGUub24oXCJjYW5wbGF5XCIscykpfWUub24oXCJyZXNvdXJjZVJlYWR5XCIsbCksW1widG91Y2hlbmRcIixcImNsaWNrXCJdLmZvckVhY2goKGZ1bmN0aW9uKHIpe28uYWRkRXZlbnRMaXN0ZW5lcihyLChmdW5jdGlvbihyKXtyLnByZXZlbnREZWZhdWx0KCksci5zdG9wUHJvcGFnYXRpb24oKTt2YXIgaT1yLnRhcmdldHx8ci5zcmNFbGVtZW50LHM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7aWYoaSYmXCJsaVwiPT09aS50YWdOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkpe2lmKGUuZW1pdChcImJlZm9yZURlZmluaXRpb25DaGFuZ2VcIixzLmhyZWYpLEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoaS5wYXJlbnROb2RlLmNoaWxkTm9kZXMsKGZ1bmN0aW9uKGUpe3QucmVtb3ZlQ2xhc3MoZSxcImRlZmluaXRpb25cIil9KSksZS5kYXNoJiZhLmZvckVhY2goKGZ1bmN0aW9uKGUpe2Uuc2VsZWN0ZWQ9ITEsZS5uYW1lPT09aS5pbm5lckhUTUwmJihlLnNlbGVjdGVkPSEwKX0pKSx0LmFkZENsYXNzKGksXCJkZWZpbml0aW9uXCIpLGkucGFyZW50Tm9kZS5uZXh0U2libGluZy5pbm5lckhUTUw9XCJcIitpLmdldEF0dHJpYnV0ZShcImNuYW1lXCIpLHMuaHJlZj1pLmdldEF0dHJpYnV0ZShcInVybFwiKSxlLnN3aXRjaFVSTCl7dmFyIGw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7W1wibXA0XCIsXCJobHNcIixcIl9fZmx2X19cIixcImRhc2hcIl0uZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiFlW3RdfHwoZVt0XS51cmwmJihsLmhyZWY9ZVt0XS51cmwpLFwiX19mbHZfX1wiPT09dCYmKGVbdF0uX29wdGlvbnM/bC5ocmVmPWVbdF0uX29wdGlvbnMudXJsOmwuaHJlZj1lW3RdLl9tZWRpYURhdGFTb3VyY2UudXJsKSwhMSl9KSksbC5ocmVmPT09cy5ocmVmfHxlLmVuZGVkfHxlLnN3aXRjaFVSTChzLmhyZWYpfWVsc2V7aWYoZS5obHMpe2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2UuaGxzLnVybH1pZihzLmhyZWYhPT1lLmN1cnJlbnRTcmMpe3ZhciBjPWUuY3VycmVudFRpbWUsdT1lLnBhdXNlZDtlLmVuZGVkfHwoZS5zcmM9cy5ocmVmLGUub25jZShcImNhbnBsYXlcIiwoZnVuY3Rpb24oKXtlLmN1cnJlbnRUaW1lPWMsdXx8ZS5wbGF5KCl9KSkpfX1lLmVtaXQoXCJkZWZpbml0aW9uQ2hhbmdlXCIscy5ocmVmKSxcIm1vYmlsZVwiPT09bi5kZXZpY2UmJnQucmVtb3ZlQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItZGVmaW5pdGlvbi1hY3RpdmVcIil9ZWxzZVwiY2xpY2tcIiE9PWUuY29uZmlnLmRlZmluaXRpb25BY3RpdmV8fCFpfHxcInBcIiE9PWkudGFnTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpJiZcImVtXCIhPT1pLnRhZ05hbWUudG9Mb2NhbGVMb3dlckNhc2UoKXx8KHQuYWRkQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItZGVmaW5pdGlvbi1hY3RpdmVcIiksby5mb2N1cygpKTtlLmVtaXQoXCJmb2N1c1wiKX0pLCExKX0pKSxvLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsKGZ1bmN0aW9uKG4pe24ucHJldmVudERlZmF1bHQoKSxuLnN0b3BQcm9wYWdhdGlvbigpLHQucmVtb3ZlQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItZGVmaW5pdGlvbi1hY3RpdmVcIil9KSksZS5vbmNlKFwiZGVzdHJveVwiLChmdW5jdGlvbiB0KCl7ZS5vZmYoXCJjYW5wbGF5XCIscyksZS5vZmYoXCJyZXNvdXJjZVJlYWR5XCIsbCksZS5vZmYoXCJkZXN0cm95XCIsdCl9KSl9KSl9LFwiLi9zcmMvY29udHJvbC9kb3dubG9hZC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvZG93bmxvYWQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1hKG4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpKSxyPW4oLyohIC4uL3V0aWxzL3VybCAqL1wiLi9zcmMvdXRpbHMvdXJsLmpzXCIpLGk9YShuKC8qISBkb3dubG9hZGpzICovXCIuL25vZGVfbW9kdWxlcy9kb3dubG9hZGpzL2Rvd25sb2FkLmpzXCIpKTtmdW5jdGlvbiBhKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1vLmRlZmF1bHQuaW5zdGFsbChcImRvd25sb2FkXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZih0aGlzLmNvbmZpZy5kb3dubG9hZCl7dmFyIHQ9ZS5yb290LG49by5kZWZhdWx0LnV0aWwsYT1uLmNyZWF0ZURvbShcInhncGxheWVyLWRvd25sb2FkXCIsJzx4Zy1pY29uIGNsYXNzPVwieGdwbGF5ZXItZG93bmxvYWQtaW1nXCI+PC94Zy1pY29uPicse30sXCJ4Z3BsYXllci1kb3dubG9hZFwiKTtlLmNvbnRyb2xzLmFwcGVuZENoaWxkKGEpO3ZhciBzPWUuY29uZmlnLmxhbmcmJlwiemgtY25cIj09PWUuY29uZmlnLmxhbmc/XCLkuIvovb1cIjpcIkRvd25sb2FkXCIsbD1uLmNyZWF0ZURvbShcInhnLXRpcHNcIixzLHt9LFwieGdwbGF5ZXItdGlwc1wiKTthLmFwcGVuZENoaWxkKGwpLGUuZG93bmxvYWQ9ZnVuY3Rpb24oKXt2YXIgdD0oMCxyLmdldEFic29sdXRlVVJMKShlLmNvbmZpZy51cmwpOygwLGkuZGVmYXVsdCkodCl9LGEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKGZ1bmN0aW9uKHQpe3Quc3RvcFByb3BhZ2F0aW9uKCksZS5kb3dubG9hZCgpfSkpLGEuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwoZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCksbC5zdHlsZS5sZWZ0PVwiNTAlXCI7dmFyIG49bC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxvPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7bi5yaWdodD5vLnJpZ2h0JiYobC5zdHlsZS5sZWZ0PS1uLnJpZ2h0K28ucmlnaHQrMTYrXCJweFwiKX0pKX19KSl9LFwiLi9zcmMvY29udHJvbC9lcnJvci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvZXJyb3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwiZXJyb3JcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9aS5kZWZhdWx0LnV0aWwsbj10LmNyZWF0ZURvbShcInhnLWVycm9yXCIsJzxlbSBjbGFzcz1cInhncGxheWVyLWVycm9yLXRleHRcIj7or7c8c3BhbiBjbGFzcz1cInhncGxheWVyLWVycm9yLXJlZnJlc2hcIj7liLfmlrA8L3NwYW4+6K+V6K+VPC9lbT4nLHt9LFwieGdwbGF5ZXItZXJyb3JcIik7ZS5yb290LmFwcGVuZENoaWxkKG4pO3ZhciBvPW4ucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1lcnJvci10ZXh0XCIpLHI9bnVsbDtmdW5jdGlvbiBhKCl7ZS5lcnJvcj9vLmlubmVySFRNTD1lLmVycm9yOmUuY29uZmlnLmxhbmcmJlwiemgtY25cIj09PWUuY29uZmlnLmxhbmc/by5pbm5lckhUTUw9ZS5sYW5nLkVSUk9SKyfvvIzor7c8c3BhbiBjbGFzcz1cInhncGxheWVyLWVycm9yLXJlZnJlc2hcIj7liLfmlrA8L3NwYW4+6K+V6K+VJzpvLmlubmVySFRNTD1lLmxhbmcuRVJST1IrJ++8jHBsZWFzZSB0cnkgdG8gPHNwYW4gY2xhc3M9XCJ4Z3BsYXllci1lcnJvci1yZWZyZXNoXCI+cmVmcmVzaDwvc3Bhbj4nLHQuYWRkQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItaXMtZXJyb3JcIiksKHI9bi5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLWVycm9yLXJlZnJlc2hcIikpJiZbXCJ0b3VjaGVuZFwiLFwiY2xpY2tcIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7ci5hZGRFdmVudExpc3RlbmVyKHQsKGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpO3ZhciBuPXQudGFyZ2V0fHx0LnNyY0VsZW1lbnQ7biYmXCJzcGFuXCI9PT1uLnRhZ05hbWUudG9Mb2NhbGVMb3dlckNhc2UoKSYmKGUuY29udHJvbHMuc3R5bGUuZGlzcGxheT1cImZsZXhcIixlLnJlbG9hZCgpKX0pKX0pKX1lLm9uKFwiZXJyb3JcIixhKSxlLm9uY2UoXCJkZXN0cm95XCIsKGZ1bmN0aW9uIHQoKXtlLm9mZihcImVycm9yXCIsYSksZS5vZmYoXCJkZXN0cm95XCIsdCl9KSl9KSl9LFwiLi9zcmMvY29udHJvbC9mbGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL2ZsZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI9bigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIiksaT0obz1yKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307aS5kZWZhdWx0Lmluc3RhbGwoXCJfX2ZsZXhfX1wiLChmdW5jdGlvbigpe3ZhciBlPWkuZGVmYXVsdC51dGlsLmNyZWF0ZURvbShcInhnLXBsYWNlaG9sZGVyXCIsXCJcIix7fSxcInhncGxheWVyLXBsYWNlaG9sZGVyXCIpO3RoaXMuY29udHJvbHMuYXBwZW5kQ2hpbGQoZSl9KSl9LFwiLi9zcmMvY29udHJvbC9mdWxsc2NyZWVuLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL2Z1bGxzY3JlZW4uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI9bigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIiksaT0obz1yKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307aS5kZWZhdWx0Lmluc3RhbGwoXCJmdWxsc2NyZWVuXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWkuZGVmYXVsdC51dGlsLG49XCJNNjgyIDM0MmgxMjh2ODRoLTIxMnYtMjEyaDg0djEyOHpNNTk4IDgxMHYtMjEyaDIxMnY4NGgtMTI4djEyOGgtODR6TTM0MiAzNDJ2LTEyOGg4NHYyMTJoLTIxMnYtODRoMTI4ek0yMTQgNjgydi04NGgyMTJ2MjEyaC04NHYtMTI4aC0xMjh6XCIsbz1cIk01OTggMjE0aDIxMnYyMTJoLTg0di0xMjhoLTEyOHYtODR6TTcyNiA3MjZ2LTEyOGg4NHYyMTJoLTIxMnYtODRoMTI4ek0yMTQgNDI2di0yMTJoMjEydjg0aC0xMjh2MTI4aC04NHpNMjk4IDU5OHYxMjhoMTI4djg0aC0yMTJ2LTIxMmg4NHpcIixyPXQuY3JlYXRlRG9tKFwieGctZnVsbHNjcmVlblwiLCc8eGctaWNvbiBjbGFzcz1cInhncGxheWVyLWljb25cIj48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjEwMjRcIiBoZWlnaHQ9XCIxMDI0XCIgdmlld0JveD1cIjAgMCAxMDI0IDEwMjRcIj5cXG4gICAgICAgICAgICA8cGF0aCB0cmFuc2Zvcm09XCJzY2FsZSgwLjAzIDAuMDMpXCIgZD1cIicrbysnXCI+PC9wYXRoPlxcbiAgICAgICAgPC9zdmc+PC94Zy1pY29uPicse30sXCJ4Z3BsYXllci1mdWxsc2NyZWVuXCIpLGE9ZS5jb25maWcubGFuZyYmXCJ6aC1jblwiPT09ZS5jb25maWcubGFuZz9cIuWFqOWxj1wiOlwiRnVsbCBzY3JlZW5cIixzPWUuY29uZmlnLmxhbmcmJlwiemgtY25cIj09PWUuY29uZmlnLmxhbmc/XCLpgIDlh7rlhajlsY9cIjpcIkV4aXQgZnVsbCBzY3JlZW5cIixsPWUuY29udHJvbHMsYz1lLnJvb3QsdT10LmNyZWF0ZURvbShcInhnLXRpcHNcIixhLHt9LFwieGdwbGF5ZXItdGlwc1wiKSxkPXIucXVlcnlTZWxlY3RvcihcInBhdGhcIik7ci5hcHBlbmRDaGlsZCh1KTtsLmFwcGVuZENoaWxkKHIpLFtcImNsaWNrXCIsXCJ0b3VjaGVuZFwiXS5mb3JFYWNoKChmdW5jdGlvbihvKXtyLmFkZEV2ZW50TGlzdGVuZXIobywoZnVuY3Rpb24obyl7dmFyIHIsaTtvLnByZXZlbnREZWZhdWx0KCksby5zdG9wUHJvcGFnYXRpb24oKSx0Lmhhc0NsYXNzKGMsXCJ4Z3BsYXllci1mdWxsc2NyZWVuLWFjdGl2ZVwiKXx8dC5oYXNDbGFzcyhjLFwieGdwbGF5ZXItaXMtZnVsbHNjcmVlblwiKT9mdW5jdGlvbihuKXt2YXIgbz10LmZpbmREb20oZS5jb250cm9scyxcInhnLWNzc2Z1bGxzY3JlZW5cIikscj1cIk04NDMuNjE3MjEyIDY3Ljg5ODQxMyAxNzUuNDExNTY3IDY3Ljg5ODQxM2MtNjEuNTAyNzQ5IDAtMTExLjM2NzQzNyA0OS44NTY1MDEtMTExLjM2NzQzNyAxMTEuMzY3NDM3bDAgNjY4LjIwNTY0NWMwIDYxLjUxMDkzNiA0OS44NjQ2ODggMTExLjM2NzQzNyAxMTEuMzY3NDM3IDExMS4zNjc0MzdMODQzLjYxNzIxMiA5NTguODM4OTMxYzYxLjUxMDkzNiAwIDExMS4zNjc0MzctNDkuODU2NTAxIDExMS4zNjc0MzctMTExLjM2NzQzN0w5NTQuOTg0NjQ4IDE3OS4yNjU4NUM5NTQuOTg0NjQ4IDExNy43NTQ5MTQgOTA1LjEyOTE3IDY3Ljg5ODQxMyA4NDMuNjE3MjEyIDY3Ljg5ODQxM3pNMzk4LjE0NjQ0MSA3MzYuMTA0MDU3YzE1LjM4MDI5MiAwIDI3Ljg0MjExNSAxMi40NjE4MjMgMjcuODQyMTE1IDI3Ljg0MjExNSAwIDE1LjM3OTI2OS0xMi40NjE4MjMgMjcuODQxMDkyLTI3Ljg0MjExNSAyNy44NDEwOTJMMjU5LjcyNTg1OCA3OTEuNzg3MjY0Yy03Ljc4NTMxNCAwLTE0Ljc4MTY1OC0zLjIxNzI3NS0xOS44Mzg4MzctOC4zNjU1MjgtNS4zODM2MTQtNC41NzcyNDktOC43OTEyMjQtMTEuMjI4NzM5LTguNzkxMjI0LTE5LjQ3NTU2NEwyMzEuMDk1Nzk3IDYyNC43MzY2MjFjMC0xNS4zNzEwODIgMTIuNDcxMDMzLTI3Ljg0MjExNSAyNy44NDIxMTUtMjcuODQyMTE1IDE1LjM4MDI5MiAwIDI3Ljg0MjExNSAxMi40NzEwMzMgMjcuODQyMTE1IDI3Ljg0MjExNWwtMC42MTYwMyA3MS40MjY3NzMgMTMzLjAzNjk2OS0xMzMuMDM3OTkyIDM5LjM3ODg2OSAzOS4zNzg4NjlMMzI0Ljk2MjY1MSA3MzYuMTEzMjY3IDM5OC4xNDY0NDEgNzM2LjEwNDA1N3pNNDE5LjE5OTk0MiA0NjMuNjExOTQzIDI4Ni4xNjI5NzQgMzMwLjU2NTc2NGwwLjYxNjAzIDcxLjQzNTk4MmMwIDE1LjM4MDI5Mi0xMi40NjE4MjMgMjcuODQyMTE1LTI3Ljg0MjExNSAyNy44NDIxMTUtMTUuMzcxMDgyIDAtMjcuODQyMTE1LTEyLjQ2MTgyMy0yNy44NDIxMTUtMjcuODQyMTE1TDIzMS4wOTQ3NzQgMjYyLjc5MTE3MmMwLTguMjU2MDM0IDMuNDA3NjEtMTQuOTA4NTQ4IDguNzkxMjI0LTE5LjQ3NjU4NyA1LjA1NzE3OS01LjE0ODI1MyAxMi4wNTM1MjQtOC4zNzQ3MzggMTkuODM4ODM3LTguMzc0NzM4bDEzOC40MjA1ODMgMC4wMDkyMWMxNS4zODAyOTIgMCAyNy44NDIxMTUgMTIuNDYxODIzIDI3Ljg0MjExNSAyNy44NDIxMTVzLTEyLjQ2MTgyMyAyNy44NDIxMTUtMjcuODQyMTE1IDI3Ljg0MjExNWwtNzMuMTc1NjAzLTAuMDA5MjEgMTMzLjYwNzk3NCAxMzMuNjA3OTc0TDQxOS4xOTk5NDIgNDYzLjYxMTk0M3pNNzg3LjkzMjk4MSA3NjMuOTQ2MTcyYzAgOC4yNDc4NDgtMy40MDc2MSAxNC44OTkzMzgtOC43OTEyMjQgMTkuNDc1NTY0LTUuMDU3MTc5IDUuMTQ4MjUzLTEyLjA1MzUyNCA4LjM2NTUyOC0xOS44Mzk4NjEgOC4zNjU1MjhMNjIwLjg4MTMxNCA3OTEuNzg3MjY0Yy0xNS4zNzkyNjkgMC0yNy44NDEwOTItMTIuNDYxODIzLTI3Ljg0MTA5Mi0yNy44NDEwOTIgMC0xNS4zODAyOTIgMTIuNDYxODIzLTI3Ljg0MjExNSAyNy44NDEwOTItMjcuODQyMTE1bDczLjE4NTgzNiAwLjAwOTIxTDU2MC40NDk5NjcgNjAyLjUwNDI3bDM5LjM3ODg2OS0zOS4zNzg4NjlMNzMyLjg3NTAxNSA2OTYuMTYzMzkzbC0wLjYyNTI0LTcxLjQyNjc3M2MwLTE1LjM3MTA4MiAxMi40NjI4NDYtMjcuODQyMTE1IDI3Ljg0MjExNS0yNy44NDIxMTUgMTUuMzgwMjkyIDAgMjcuODQyMTE1IDEyLjQ3MTAzMyAyNy44NDIxMTUgMjcuODQyMTE1TDc4Ny45MzQwMDUgNzYzLjk0NjE3MnpNNzg3LjkzMjk4MSA0MDIuMDAwNzI0YzAgMTUuMzgwMjkyLTEyLjQ2MTgyMyAyNy44NDIxMTUtMjcuODQyMTE1IDI3Ljg0MjExNS0xNS4zNzkyNjkgMC0yNy44NDIxMTUtMTIuNDYxODIzLTI3Ljg0MjExNS0yNy44NDIxMTVsMC42MjUyNC03MS40MzU5ODJMNTk5LjgyODgzNiA0NjMuNjExOTQzbC0zOS4zNzg4NjktMzkuMzc4ODY5IDEzMy42MTcxODQtMTMzLjYwNzk3NC03My4xODU4MzYgMC4wMDkyMWMtMTUuMzc5MjY5IDAtMjcuODQxMDkyLTEyLjQ2MTgyMy0yNy44NDEwOTItMjcuODQyMTE1czEyLjQ2MTgyMy0yNy44NDIxMTUgMjcuODQxMDkyLTI3Ljg0MjExNWwxMzguNDIxNjA2LTAuMDA5MjFjNy43ODUzMTQgMCAxNC43ODE2NTggMy4yMjY0ODQgMTkuODM5ODYxIDguMzc0NzM4IDUuMzgzNjE0IDQuNTY4MDM5IDguNzkxMjI0IDExLjIxOTUyOSA4Ljc5MTIyNCAxOS40NzY1ODdMNzg3LjkzNDAwNSA0MDIuMDAwNzI0elwiO2lmKG8pe3ZhciBpPXQuZmluZERvbShvLFwieGctdGlwc1wiKSxzPW8ucXVlcnlTZWxlY3RvcihcInBhdGhcIik7by5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIixpLnRleHRDb250ZW50PWUuY29uZmlnLmxhbmcmJlwiemgtY25cIj09PWUuY29uZmlnLmxhbmc/XCLmoLflvI/lhajlsY9cIjpcIkZ1bGwgc2NyZWVuXCIscy5zZXRBdHRyaWJ1dGUoXCJkXCIscil9dC5yZW1vdmVDbGFzcyhuLFwieGdwbGF5ZXItY3NzZnVsbHNjcmVlbi1hY3RpdmVcIiksZC5zZXRBdHRyaWJ1dGUoXCJkXCIsciksdS50ZXh0Q29udGVudD1hLGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuP2RvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk6ZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4/ZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4oKTpkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuP2RvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKTpkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuP2RvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTp0LnJlbW92ZUNsYXNzKG4sXCJ4Z3BsYXllci1mdWxsc2NyZWVuLWFjdGl2ZVwiKX0oYyk6KHI9YywoaT10LmZpbmREb20oZS5jb250cm9scyxcInhnLWNzc2Z1bGxzY3JlZW5cIikpJiYoaS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiKSxkLnNldEF0dHJpYnV0ZShcImRcIixuKSx1LnRleHRDb250ZW50PXMsci5yZXF1ZXN0RnVsbHNjcmVlbj9yLnJlcXVlc3RGdWxsc2NyZWVuKCk6ci5tb3pSZXF1ZXN0RnVsbFNjcmVlbj9yLm1velJlcXVlc3RGdWxsU2NyZWVuKCk6ci53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbj9yLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKEVsZW1lbnQuQUxMT1dfS0VZQk9BUkRfSU5QVVQpOmUudmlkZW8ud2Via2l0U3VwcG9ydHNGdWxsc2NyZWVuP2UudmlkZW8ud2Via2l0RW50ZXJGdWxsc2NyZWVuKCk6ci5tc1JlcXVlc3RGdWxsc2NyZWVuP3IubXNSZXF1ZXN0RnVsbHNjcmVlbigpOnQuYWRkQ2xhc3MocixcInhncGxheWVyLWZ1bGxzY3JlZW4tYWN0aXZlXCIpKX0pKX0pKSxlLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJraXRlbmRmdWxsc2NyZWVuXCIsKGZ1bmN0aW9uKCl7ZS5lbWl0KFwiZXhpdEZ1bGxzY3JlZW5cIiksZC5zZXRBdHRyaWJ1dGUoXCJkXCIsbyl9KSk7W1wiZnVsbHNjcmVlbmNoYW5nZVwiLFwid2Via2l0ZnVsbHNjcmVlbmNoYW5nZVwiLFwibW96ZnVsbHNjcmVlbmNoYW5nZVwiLFwiTVNGdWxsc2NyZWVuQ2hhbmdlXCJdLmZvckVhY2goKGZ1bmN0aW9uKG4pe2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIobiwoZnVuY3Rpb24obil7aWYobi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksIShkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudHx8ZG9jdW1lbnQud2Via2l0SXNGdWxsU2NyZWVufHxkb2N1bWVudC5tb3pGdWxsU2NyZWVufHxkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbGVtZW50KSl7dmFyIG89dC5maW5kRG9tKGUuY29udHJvbHMsXCJ4Zy1jc3NmdWxsc2NyZWVuXCIpLHI9e2RlZmF1bHQ6XCJNODQzLjYxNzIxMiA2Ny44OTg0MTMgMTc1LjQxMTU2NyA2Ny44OTg0MTNjLTYxLjUwMjc0OSAwLTExMS4zNjc0MzcgNDkuODU2NTAxLTExMS4zNjc0MzcgMTExLjM2NzQzN2wwIDY2OC4yMDU2NDVjMCA2MS41MTA5MzYgNDkuODY0Njg4IDExMS4zNjc0MzcgMTExLjM2NzQzNyAxMTEuMzY3NDM3TDg0My42MTcyMTIgOTU4LjgzODkzMWM2MS41MTA5MzYgMCAxMTEuMzY3NDM3LTQ5Ljg1NjUwMSAxMTEuMzY3NDM3LTExMS4zNjc0MzdMOTU0Ljk4NDY0OCAxNzkuMjY1ODVDOTU0Ljk4NDY0OCAxMTcuNzU0OTE0IDkwNS4xMjkxNyA2Ny44OTg0MTMgODQzLjYxNzIxMiA2Ny44OTg0MTN6TTM5OC4xNDY0NDEgNzM2LjEwNDA1N2MxNS4zODAyOTIgMCAyNy44NDIxMTUgMTIuNDYxODIzIDI3Ljg0MjExNSAyNy44NDIxMTUgMCAxNS4zNzkyNjktMTIuNDYxODIzIDI3Ljg0MTA5Mi0yNy44NDIxMTUgMjcuODQxMDkyTDI1OS43MjU4NTggNzkxLjc4NzI2NGMtNy43ODUzMTQgMC0xNC43ODE2NTgtMy4yMTcyNzUtMTkuODM4ODM3LTguMzY1NTI4LTUuMzgzNjE0LTQuNTc3MjQ5LTguNzkxMjI0LTExLjIyODczOS04Ljc5MTIyNC0xOS40NzU1NjRMMjMxLjA5NTc5NyA2MjQuNzM2NjIxYzAtMTUuMzcxMDgyIDEyLjQ3MTAzMy0yNy44NDIxMTUgMjcuODQyMTE1LTI3Ljg0MjExNSAxNS4zODAyOTIgMCAyNy44NDIxMTUgMTIuNDcxMDMzIDI3Ljg0MjExNSAyNy44NDIxMTVsLTAuNjE2MDMgNzEuNDI2NzczIDEzMy4wMzY5NjktMTMzLjAzNzk5MiAzOS4zNzg4NjkgMzkuMzc4ODY5TDMyNC45NjI2NTEgNzM2LjExMzI2NyAzOTguMTQ2NDQxIDczNi4xMDQwNTd6TTQxOS4xOTk5NDIgNDYzLjYxMTk0MyAyODYuMTYyOTc0IDMzMC41NjU3NjRsMC42MTYwMyA3MS40MzU5ODJjMCAxNS4zODAyOTItMTIuNDYxODIzIDI3Ljg0MjExNS0yNy44NDIxMTUgMjcuODQyMTE1LTE1LjM3MTA4MiAwLTI3Ljg0MjExNS0xMi40NjE4MjMtMjcuODQyMTE1LTI3Ljg0MjExNUwyMzEuMDk0Nzc0IDI2Mi43OTExNzJjMC04LjI1NjAzNCAzLjQwNzYxLTE0LjkwODU0OCA4Ljc5MTIyNC0xOS40NzY1ODcgNS4wNTcxNzktNS4xNDgyNTMgMTIuMDUzNTI0LTguMzc0NzM4IDE5LjgzODgzNy04LjM3NDczOGwxMzguNDIwNTgzIDAuMDA5MjFjMTUuMzgwMjkyIDAgMjcuODQyMTE1IDEyLjQ2MTgyMyAyNy44NDIxMTUgMjcuODQyMTE1cy0xMi40NjE4MjMgMjcuODQyMTE1LTI3Ljg0MjExNSAyNy44NDIxMTVsLTczLjE3NTYwMy0wLjAwOTIxIDEzMy42MDc5NzQgMTMzLjYwNzk3NEw0MTkuMTk5OTQyIDQ2My42MTE5NDN6TTc4Ny45MzI5ODEgNzYzLjk0NjE3MmMwIDguMjQ3ODQ4LTMuNDA3NjEgMTQuODk5MzM4LTguNzkxMjI0IDE5LjQ3NTU2NC01LjA1NzE3OSA1LjE0ODI1My0xMi4wNTM1MjQgOC4zNjU1MjgtMTkuODM5ODYxIDguMzY1NTI4TDYyMC44ODEzMTQgNzkxLjc4NzI2NGMtMTUuMzc5MjY5IDAtMjcuODQxMDkyLTEyLjQ2MTgyMy0yNy44NDEwOTItMjcuODQxMDkyIDAtMTUuMzgwMjkyIDEyLjQ2MTgyMy0yNy44NDIxMTUgMjcuODQxMDkyLTI3Ljg0MjExNWw3My4xODU4MzYgMC4wMDkyMUw1NjAuNDQ5OTY3IDYwMi41MDQyN2wzOS4zNzg4NjktMzkuMzc4ODY5TDczMi44NzUwMTUgNjk2LjE2MzM5M2wtMC42MjUyNC03MS40MjY3NzNjMC0xNS4zNzEwODIgMTIuNDYyODQ2LTI3Ljg0MjExNSAyNy44NDIxMTUtMjcuODQyMTE1IDE1LjM4MDI5MiAwIDI3Ljg0MjExNSAxMi40NzEwMzMgMjcuODQyMTE1IDI3Ljg0MjExNUw3ODcuOTM0MDA1IDc2My45NDYxNzJ6TTc4Ny45MzI5ODEgNDAyLjAwMDcyNGMwIDE1LjM4MDI5Mi0xMi40NjE4MjMgMjcuODQyMTE1LTI3Ljg0MjExNSAyNy44NDIxMTUtMTUuMzc5MjY5IDAtMjcuODQyMTE1LTEyLjQ2MTgyMy0yNy44NDIxMTUtMjcuODQyMTE1bDAuNjI1MjQtNzEuNDM1OTgyTDU5OS44Mjg4MzYgNDYzLjYxMTk0M2wtMzkuMzc4ODY5LTM5LjM3ODg2OSAxMzMuNjE3MTg0LTEzMy42MDc5NzQtNzMuMTg1ODM2IDAuMDA5MjFjLTE1LjM3OTI2OSAwLTI3Ljg0MTA5Mi0xMi40NjE4MjMtMjcuODQxMDkyLTI3Ljg0MjExNXMxMi40NjE4MjMtMjcuODQyMTE1IDI3Ljg0MTA5Mi0yNy44NDIxMTVsMTM4LjQyMTYwNi0wLjAwOTIxYzcuNzg1MzE0IDAgMTQuNzgxNjU4IDMuMjI2NDg0IDE5LjgzOTg2MSA4LjM3NDczOCA1LjM4MzYxNCA0LjU2ODAzOSA4Ljc5MTIyNCAxMS4yMTk1MjkgOC43OTEyMjQgMTkuNDc2NTg3TDc4Ny45MzQwMDUgNDAyLjAwMDcyNHpcIn07aWYobyl7dmFyIGk9dC5maW5kRG9tKG8sXCJ4Zy10aXBzXCIpLHM9by5xdWVyeVNlbGVjdG9yKFwicGF0aFwiKTtvLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLGkudGV4dENvbnRlbnQ9ZS5jb25maWcubGFuZyYmXCJ6aC1jblwiPT09ZS5jb25maWcubGFuZz9cIuagt+W8j+WFqOWxj1wiOlwiRnVsbCBzY3JlZW5cIixzLnNldEF0dHJpYnV0ZShcImRcIixyLmRlZmF1bHQpfXQucmVtb3ZlQ2xhc3MoYyxcInhncGxheWVyLWNzc2Z1bGxzY3JlZW4tYWN0aXZlXCIpLGQuc2V0QXR0cmlidXRlKFwiZFwiLHIuZGVmYXVsdCksdS50ZXh0Q29udGVudD1hLHQucmVtb3ZlQ2xhc3MoYyxcInhncGxheWVyLWZ1bGxzY3JlZW4tYWN0aXZlXCIpfX0pKX0pKTt2YXIgcD1mdW5jdGlvbihyKXt2YXIgaT1kb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudHx8ZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnR8fGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50fHxkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbGVtZW50O2kmJmk9PT1jPyh0LmFkZENsYXNzKGMsXCJ4Z3BsYXllci1pcy1mdWxsc2NyZWVuXCIpLGQuc2V0QXR0cmlidXRlKFwiZFwiLG4pLHUudGV4dENvbnRlbnQ9cyxlLmVtaXQoXCJyZXF1ZXN0RnVsbHNjcmVlblwiKSk6KHQucmVtb3ZlQ2xhc3MoYyxcInhncGxheWVyLWlzLWZ1bGxzY3JlZW5cIiksZC5zZXRBdHRyaWJ1dGUoXCJkXCIsbyksdS50ZXh0Q29udGVudD1hLGUuZW1pdChcImV4aXRGdWxsc2NyZWVuXCIpKX07ci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLChmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKSx1LnN0eWxlLmxlZnQ9XCI1MCVcIjt2YXIgdD11LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG49Yy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0LnJpZ2h0Pm4ucmlnaHQmJih1LnN0eWxlLmxlZnQ9LXQucmlnaHQrbi5yaWdodCsxNitcInB4XCIpfSkpLFtcImZ1bGxzY3JlZW5jaGFuZ2VcIixcIndlYmtpdGZ1bGxzY3JlZW5jaGFuZ2VcIixcIm1vemZ1bGxzY3JlZW5jaGFuZ2VcIixcIk1TRnVsbHNjcmVlbkNoYW5nZVwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGUscCl9KSksZS5vbmNlKFwiZGVzdHJveVwiLChmdW5jdGlvbiB0KCl7W1wiZnVsbHNjcmVlbmNoYW5nZVwiLFwid2Via2l0ZnVsbHNjcmVlbmNoYW5nZVwiLFwibW96ZnVsbHNjcmVlbmNoYW5nZVwiLFwiTVNGdWxsc2NyZWVuQ2hhbmdlXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe2RvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxwKX0pKSxlLm9mZihcImRlc3Ryb3lcIix0KX0pKX0pKX0sXCIuL3NyYy9jb250cm9sL2kxOG4uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvaTE4bi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKTsoKG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99KS5kZWZhdWx0Lmluc3RhbGwoXCJpMThuXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXt9LG49ZS5jb25zdHJ1Y3Rvci51dGlsO3QuZW49e0hBVkVfTk9USElORzpcIlRoZXJlIGlzIG5vIGluZm9ybWF0aW9uIG9uIHdoZXRoZXIgYXVkaW8vdmlkZW8gaXMgcmVhZHlcIixIQVZFX01FVEFEQVRBOlwiYXVkaW8vdmlkZW8gbWV0YWRhdGEgaXMgcmVhZHkgXCIsSEFWRV9DVVJSRU5UX0RBVEE6XCJEYXRhIGFib3V0IHRoZSBjdXJyZW50IHBsYXkgbG9jYXRpb24gaXMgYXZhaWxhYmxlLCBidXQgdGhlcmUgaXMgbm90IGVub3VnaCBkYXRhIHRvIHBsYXkgdGhlIG5leHQgZnJhbWUvbWlsbGlzZWNvbmRcIixIQVZFX0ZVVFVSRV9EQVRBOlwiQ3VycmVudCBhbmQgYXQgbGVhc3Qgb25lIGZyYW1lIG9mIGRhdGEgaXMgYXZhaWxhYmxlXCIsSEFWRV9FTk9VR0hfREFUQTpcIlRoZSBhdmFpbGFibGUgZGF0YSBpcyBzdWZmaWNpZW50IHRvIHN0YXJ0IHBsYXlpbmdcIixORVRXT1JLX0VNUFRZOlwiQXVkaW8vdmlkZW8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkXCIsTkVUV09SS19JRExFOlwiQXVkaW8vdmlkZW8gaXMgYWN0aXZlIGFuZCBoYXMgYmVlbiBzZWxlY3RlZCBmb3IgcmVzb3VyY2VzLCBidXQgbm8gbmV0d29yayBpcyB1c2VkXCIsTkVUV09SS19MT0FESU5HOlwiVGhlIGJyb3dzZXIgaXMgZG93bmxvYWRpbmcgdGhlIGRhdGFcIixORVRXT1JLX05PX1NPVVJDRTpcIk5vIGF1ZGlvL3ZpZGVvIHNvdXJjZSB3YXMgZm91bmRcIixNRURJQV9FUlJfQUJPUlRFRDpcIlRoZSBmZXRjaCBwcm9jZXNzIGlzIGFib3J0ZWQgYnkgdGhlIHVzZXJcIixNRURJQV9FUlJfTkVUV09SSzpcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGRvd25sb2FkaW5nXCIsTUVESUFfRVJSX0RFQ09ERTpcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGRlY29kaW5nXCIsTUVESUFfRVJSX1NSQ19OT1RfU1VQUE9SVEVEOlwiQXVkaW8vdmlkZW8gaXMgbm90IHN1cHBvcnRlZFwiLFJFUExBWTpcIlJlcGxheVwiLEVSUk9SOlwibmV0d29yayBpcyBvZmZsaW5lXCJ9LHRbXCJ6aC1jblwiXT17SEFWRV9OT1RISU5HOlwi5rKh5pyJ5YWz5LqO6Z+z6aKRL+inhumikeaYr+WQpuWwsee7queahOS/oeaBr1wiLEhBVkVfTUVUQURBVEE6XCLpn7PpopEv6KeG6aKR55qE5YWD5pWw5o2u5bey5bCx57uqXCIsSEFWRV9DVVJSRU5UX0RBVEE6XCLlhbPkuo7lvZPliY3mkq3mlL7kvY3nva7nmoTmlbDmja7mmK/lj6/nlKjnmoTvvIzkvYbmsqHmnInotrPlpJ/nmoTmlbDmja7mnaXmkq3mlL7kuIvkuIDluKcv5q+r56eSXCIsSEFWRV9GVVRVUkVfREFUQTpcIuW9k+WJjeWPiuiHs+WwkeS4i+S4gOW4p+eahOaVsOaNruaYr+WPr+eUqOeahFwiLEhBVkVfRU5PVUdIX0RBVEE6XCLlj6/nlKjmlbDmja7otrPku6XlvIDlp4vmkq3mlL5cIixORVRXT1JLX0VNUFRZOlwi6Z+z6aKRL+inhumikeWwmuacquWIneWni+WMllwiLE5FVFdPUktfSURMRTpcIumfs+mikS/op4bpopHmmK/mtLvliqjnmoTkuJTlt7LpgInlj5botYTmupDvvIzkvYblubbmnKrkvb/nlKjnvZHnu5xcIixORVRXT1JLX0xPQURJTkc6XCLmtY/op4jlmajmraPlnKjkuIvovb3mlbDmja5cIixORVRXT1JLX05PX1NPVVJDRTpcIuacquaJvuWIsOmfs+mikS/op4bpopHmnaXmupBcIixNRURJQV9FUlJfQUJPUlRFRDpcIuWPluWbnui/h+eoi+iiq+eUqOaIt+S4reatolwiLE1FRElBX0VSUl9ORVRXT1JLOlwi5b2T5LiL6L295pe25Y+R55Sf6ZSZ6K+vXCIsTUVESUFfRVJSX0RFQ09ERTpcIuW9k+ino+eggeaXtuWPkeeUn+mUmeivr1wiLE1FRElBX0VSUl9TUkNfTk9UX1NVUFBPUlRFRDpcIuS4jeaUr+aMgeeahOmfs+mikS/op4bpopHmoLzlvI9cIixSRVBMQVk6XCLph43mkq1cIixFUlJPUjpcIue9kee7nOi/nuaOpeS8vOS5juWHuueOsOS6humXrumimFwifSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImxhbmdcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRbZS5jb25maWcubGFuZ118fHQuZW59LHNldDpmdW5jdGlvbihlKXtcIk9iamVjdFwiPT09bi50eXBlT2YoZSkmJk9iamVjdC5rZXlzKGUpLmZvckVhY2goKGZ1bmN0aW9uKG4pe3Rbbl09ZVtuXX0pKX19KX0pKX0sXCIuL3NyYy9jb250cm9sL2xvYWRpbmcuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvbG9hZGluZy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcImxvYWRpbmdcIiwoZnVuY3Rpb24oKXt2YXIgZT1pLmRlZmF1bHQudXRpbC5jcmVhdGVEb20oXCJ4Zy1sb2FkaW5nXCIsJ1xcbiAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiIHZpZXdib3g9XCIwIDAgMTAwIDEwMFwiPlxcbiAgICAgIDxwYXRoIGQ9XCJNMTAwLDUwQTUwLDUwLDAsMSwxLDUwLDBcIj48L3BhdGg+XFxuICAgIDwvc3ZnPlxcbiAgICAnLHt9LFwieGdwbGF5ZXItbG9hZGluZ1wiKTt0aGlzLnJvb3QuYXBwZW5kQ2hpbGQoZSl9KSl9LFwiLi9zcmMvY29udHJvbC9sb2NhbFByZXZpZXcuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9sb2NhbFByZXZpZXcuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcImxvY2FsUHJldmlld1wiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1pLmRlZmF1bHQudXRpbCxuPXQuY3JlYXRlRG9tKFwieGctcHJldmlld1wiLCc8aW5wdXQgdHlwZT1cImZpbGVcIj4nLHt9LFwieGdwbGF5ZXItcHJldmlld1wiKSxvPW4ucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO2UuY29uZmlnLnByZXZpZXcmJmUuY29uZmlnLnByZXZpZXcudXBsb2FkRWwmJihlLmNvbmZpZy5wcmV2aWV3LnVwbG9hZEVsLmFwcGVuZENoaWxkKG4pLG8ub25jaGFuZ2U9ZnVuY3Rpb24oKXtlLnVwbG9hZEZpbGU9by5maWxlc1swXTt2YXIgbj1VUkwuY3JlYXRlT2JqZWN0VVJMKGUudXBsb2FkRmlsZSk7dC5oYXNDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci1ub3N0YXJ0XCIpPyhlLmNvbmZpZy51cmw9bixlLnN0YXJ0KCkpOihlLnNyYz1uLGUucGxheSgpKX0pfSkpfSxcIi4vc3JjL2NvbnRyb2wvbG9nZ2VyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvbG9nZ2VyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvPWEobigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIikpLHI9YShuKC8qISAuLi91dGlscy9zbmlmZmVyICovXCIuL3NyYy91dGlscy9zbmlmZmVyLmpzXCIpKSxpPWEobigvKiEgLi9jb2xsZWN0ICovXCIuL3NyYy9jb250cm9sL2NvbGxlY3QuanNcIikpO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fW8uZGVmYXVsdC5pbnN0YWxsKFwibG9nZ2VyXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PW8uZGVmYXVsdC51dGlsO2lmKCEwIT09ZS5jb25maWcubm9Mb2cpe3ZhciBuPWZ1bmN0aW9uKCl7ZS52aWRlby5wbGF5ZWQ7dmFyIHQ9bChlLmxvZ1BhcmFtcy5wbGF5ZWQpLG49KG5ldyBEYXRlKS5nZXRUaW1lKCk7YygpO3ZhciBvPXt1cmw6ZS5sb2dQYXJhbXMucGx1Z2luU3JjP2UubG9nUGFyYW1zLnBsdWdpblNyYzplLmxvZ1BhcmFtcy5wbGF5U3JjLHZpZDplLmNvbmZpZy52aWQsYmM6ZS5sb2dQYXJhbXMuYmMtMT4wP2UubG9nUGFyYW1zLmJjLTE6MCxiYjplLmxvZ1BhcmFtcy5iYy0xPjA/MTowLGJ1X2FjdV90OmUubG9nUGFyYW1zLmJ1X2FjdV90LHB0OmUubG9nUGFyYW1zLnB0LHZ0OmUubG9nUGFyYW1zLnZ0LHZkOjFlMyplLmxvZ1BhcmFtcy52ZCx3YXRjaF9kdXI6cGFyc2VGbG9hdCgoMWUzKnQpLnRvRml4ZWQoMykpLGN1cl9wbGF5X3BvczpwYXJzZUZsb2F0KCgxZTMqZS5jdXJyZW50VGltZSkudG9GaXhlZCgzKSksZXQ6bn07d2luZG93Ll9feGlndWFfbG9nX3Nka19fKFwiY1wiLG8pfSxhPWZ1bmN0aW9uKCl7ZS52aWRlby5wbGF5ZWQ7dmFyIHQ9bChlLmxvZ1BhcmFtcy5wbGF5ZWQpLG49KG5ldyBEYXRlKS5nZXRUaW1lKCk7YygpO3ZhciBvPXt1cmw6ZS5sb2dQYXJhbXMucGx1Z2luU3JjP2UubG9nUGFyYW1zLnBsdWdpblNyYzplLmxvZ1BhcmFtcy5wbGF5U3JjLHZpZDplLmNvbmZpZy52aWQsYmM6ZS5sb2dQYXJhbXMuYmMtMT4wP2UubG9nUGFyYW1zLmJjLTE6MCxiYjplLmxvZ1BhcmFtcy5iYy0xPjA/MTowLGJ1X2FjdV90OmUubG9nUGFyYW1zLmJ1X2FjdV90LHB0OmUubG9nUGFyYW1zLnB0LHZ0OmUubG9nUGFyYW1zLnZ0LHZkOjFlMyplLmxvZ1BhcmFtcy52ZCx3YXRjaF9kdXI6cGFyc2VGbG9hdCgoMWUzKnQpLnRvRml4ZWQoMykpLGN1cl9wbGF5X3BvczpwYXJzZUZsb2F0KCgxZTMqZS5jdXJyZW50VGltZSkudG9GaXhlZCgzKSksbHQ6bn07d2luZG93Ll9feGlndWFfbG9nX3Nka19fKFwiZFwiLG8pfSxzPWZ1bmN0aW9uKHQpe2UudmlkZW8ucGxheWVkO3ZhciBuPWwoZS5sb2dQYXJhbXMucGxheWVkKTtjKCk7dmFyIG89KG5ldyBEYXRlKS5nZXRUaW1lKCk7aWYoIShlLmxvZ1BhcmFtcy5sYXN0RXJyTG9nJiZvLWUubG9nUGFyYW1zLmxhc3RFcnJMb2c8PTNlMykpe2UubG9nUGFyYW1zLmxhc3RFcnJMb2c9bzt2YXIgcj17dXJsOmUubG9nUGFyYW1zLnBsdWdpblNyYz9lLmxvZ1BhcmFtcy5wbHVnaW5TcmM6ZS5sb2dQYXJhbXMucGxheVNyYyx2aWQ6ZS5jb25maWcudmlkLGJjOmUubG9nUGFyYW1zLmJjLTE+MD9lLmxvZ1BhcmFtcy5iYy0xOjAsYmI6ZS5sb2dQYXJhbXMuYmMtMT4wPzE6MCxidV9hY3VfdDplLmxvZ1BhcmFtcy5idV9hY3VfdCxwdDplLmxvZ1BhcmFtcy5wdCx2dDplLmxvZ1BhcmFtcy52dCx2ZDoxZTMqZS5sb2dQYXJhbXMudmQsd2F0Y2hfZHVyOnBhcnNlRmxvYXQoKDFlMypuKS50b0ZpeGVkKDMpKSxlcnJfbXNnOnQuZXJyZC5tc2csbGluZTp0LmVycmQubGluZSxldDpvLGN1cl9wbGF5X3BvczpwYXJzZUZsb2F0KCgxZTMqZS5jdXJyZW50VGltZSkudG9GaXhlZCgzKSl9O2lmKGUubG9nUGFyYW1zLm5vbG9nRnVuYyYmZS5sb2dQYXJhbXMubm9sb2dGdW5jKGUpKXJldHVybiEwO3dpbmRvdy5fX3hpZ3VhX2xvZ19zZGtfXyhcImVcIixyKX19O3dpbmRvdy5fX3hpZ3VhX2xvZ19zZGtfX3x8KHdpbmRvdy5fX3hpZ3VhX2xvZ19zZGtfXz1uZXcgaS5kZWZhdWx0KFwidHJhY2tlclwiKSx3aW5kb3cuX194aWd1YV9sb2dfc2RrX18uaW5pdCh7YXBwX2lkOjEzMDAsY2hhbm5lbDpcImNuXCIsbG9nOiExLGRpc2FibGVfc2RrX21vbml0b3I6ITB9KSx3aW5kb3cuX194aWd1YV9sb2dfc2RrX18oXCJjb25maWdcIix7ZXZ0UGFyYW1zOntsb2dfdHlwZTpcImxvZ2dlclwiLHBhZ2VfdXJsOmRvY3VtZW50LlVSTCxkb21haW46d2luZG93LmxvY2F0aW9uLmhvc3QscHZlcjplLnZlcnNpb24sdWE6bmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpfSxkaXNhYmxlX2F1dG9fcHY6ITB9KSx3aW5kb3cuX194aWd1YV9sb2dfc2RrX18uc3RhcnQoKSksZS5jb25maWcudWlkJiZ3aW5kb3cuX194aWd1YV9sb2dfc2RrX18oXCJjb25maWdcIix7dXNlcl91bmlxdWVfaWQ6ZS5jb25maWcudWlkfSk7dmFyIGw9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOltdLHQ9W10sbj0wO248ZS5sZW5ndGg7bisrKWlmKCEoIWVbbl0uZW5kfHxlW25dLmJlZ2luPDB8fGVbbl0uZW5kPDB8fGVbbl0uZW5kPGVbbl0uYmVnaW4pKWlmKHQubGVuZ3RoPDEpdC5wdXNoKHtiZWdpbjplW25dLmJlZ2luLGVuZDplW25dLmVuZH0pO2Vsc2UgZm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciByPWVbbl0uYmVnaW4saT1lW25dLmVuZDtpZihpPHRbb10uYmVnaW4pe3Quc3BsaWNlKG8sMCx7YmVnaW46cixlbmQ6aX0pO2JyZWFrfWlmKCEocj50W29dLmVuZCkpe3ZhciBhPXRbb10uYmVnaW4scz10W29dLmVuZDt0W29dLmJlZ2luPU1hdGgubWluKHIsYSksdFtvXS5lbmQ9TWF0aC5tYXgoaSxzKTticmVha31pZihvPnQubGVuZ3RoLTIpe3QucHVzaCh7YmVnaW46cixlbmQ6aX0pO2JyZWFrfX1mb3IodmFyIGw9MCxjPTA7Yzx0Lmxlbmd0aDtjKyspbCs9dFtjXS5lbmQtdFtjXS5iZWdpbjtyZXR1cm4gbH0sYz1mdW5jdGlvbigpe2UubG9nUGFyYW1zLnB0JiZlLmxvZ1BhcmFtcy52dHx8KGUubG9nUGFyYW1zLnB0PShuZXcgRGF0ZSkuZ2V0VGltZSgpLGUubG9nUGFyYW1zLnZ0PWUubG9nUGFyYW1zLnB0KSxlLmxvZ1BhcmFtcy5wdD5lLmxvZ1BhcmFtcy52dCYmKGUubG9nUGFyYW1zLnB0PWUubG9nUGFyYW1zLnZ0KX0sdT1mdW5jdGlvbihuKXtpZih0Lmhhc0NsYXNzKGUucm9vdCxcInhncGxheWVyLWlzLWVudGVyXCIpKXt2YXIgbz0obmV3IERhdGUpLmdldFRpbWUoKSxyPXt1cmw6ZS5sb2dQYXJhbXMucGx1Z2luU3JjP2UubG9nUGFyYW1zLnBsdWdpblNyYzplLmxvZ1BhcmFtcy5wbGF5U3JjLHZpZDplLmNvbmZpZy52aWQscHQ6ZS5sb2dQYXJhbXMucHQsbHQ6b307d2luZG93Ll9feGlndWFfbG9nX3Nka19fKFwiYlwiLHIpfWVsc2UgaWYodC5oYXNDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci1wbGF5aW5nXCIpKXt2YXIgaT1sKGUubG9nUGFyYW1zLnBsYXllZCksYT0obmV3IERhdGUpLmdldFRpbWUoKTtjKCk7dmFyIHM9e3VybDplLmxvZ1BhcmFtcy5wbHVnaW5TcmM/ZS5sb2dQYXJhbXMucGx1Z2luU3JjOmUubG9nUGFyYW1zLnBsYXlTcmMsdmlkOmUuY29uZmlnLnZpZCxiYzplLmxvZ1BhcmFtcy5iYy0xPjA/ZS5sb2dQYXJhbXMuYmMtMTowLGJiOmUubG9nUGFyYW1zLmJjLTE+MD8xOjAsYnVfYWN1X3Q6ZS5sb2dQYXJhbXMuYnVfYWN1X3QscHQ6ZS5sb2dQYXJhbXMucHQsdnQ6ZS5sb2dQYXJhbXMudnQsdmQ6MWUzKmUubG9nUGFyYW1zLnZkLHdhdGNoX2R1cjpwYXJzZUZsb2F0KCgxZTMqaSkudG9GaXhlZCgzKSksY3VyX3BsYXlfcG9zOnBhcnNlRmxvYXQoKDFlMyplLmN1cnJlbnRUaW1lKS50b0ZpeGVkKDMpKSxsdDphfTt3aW5kb3cuX194aWd1YV9sb2dfc2RrX18oXCJkXCIscyl9fTtcInBjXCI9PT1yLmRlZmF1bHQuZGV2aWNlP3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsdSwhMSk6XCJtb2JpbGVcIj09PXIuZGVmYXVsdC5kZXZpY2UmJndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIix1LCExKSxlLm9uKFwicm91dGVjaGFuZ2VcIix1KSxlLm9uKFwiZW5kZWRcIixuKSxlLm9uKFwidXJsY2hhbmdlXCIsYSksZS5vbihcImVycm9yXCIscyksZS5vbmNlKFwiZGVzdHJveVwiLChmdW5jdGlvbiB0KCl7XCJwY1wiPT09ci5kZWZhdWx0LmRldmljZT93aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLHUpOlwibW9iaWxlXCI9PT1yLmRlZmF1bHQuZGV2aWNlJiZ3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsdSksZS5vZmYoXCJyb3V0ZWNoYW5nZVwiLHUpLGUub2ZmKFwiZW5kZWRcIixuKSxlLm9mZihcInVybGNoYW5nZVwiLGEpLGUub2ZmKFwiZXJyb3JcIixzKSxlLm9mZihcImRlc3Ryb3lcIix0KX0pKX19KSl9LFwiLi9zcmMvY29udHJvbC9tb2JpbGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9tb2JpbGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89aShuKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSkscj1pKG4oLyohIC4uL3V0aWxzL3N2ZyAqL1wiLi9zcmMvdXRpbHMvc3ZnLmpzXCIpKTtmdW5jdGlvbiBpKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1vLmRlZmF1bHQuaW5zdGFsbChcIm1vYmlsZVwiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1vLmRlZmF1bHQudXRpbCxuPWUucm9vdCxpPWZ1bmN0aW9uKGUpe3ZhciB0PW8uZGVmYXVsdC51dGlsO3JldHVybiBlLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVyblwiRnVuY3Rpb25cIj09PXQudHlwZU9mKGUpP2UuY2FsbCh2b2lkIDAsbmF2aWdhdG9yLnVzZXJBZ2VudCk6XCJSZWdFeHBcIj09PXQudHlwZU9mKGUpP2UudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTpcIlN0cmluZ1wiPT09dC50eXBlT2YoZSkmJm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihlKT4tMX0pKX0oZS5jb25maWcud2hpdGVsaXN0KTtlLm1vYmlsZVBhc3M9aTt2YXIgYT1lLmNvbmZpZy5jZW50ZXJCdG4/ZS5jb25maWcuY2VudGVyQnRuOnt9LHM9dm9pZCAwLGw9dm9pZCAwLGM9dm9pZCAwLHU9dm9pZCAwO1wiaW1nXCI9PT1hLnR5cGU/bD1vLmRlZmF1bHQudXRpbC5jcmVhdGVJbWdCdG4oXCJzdGFydFwiLGEudXJsLnBsYXksYS53aWR0aCxhLmhlaWdodCk6KHM9e3BhdXNlOmEucGF1c2VQYXRoP2EucGF1c2VQYXRoOlwiTTU3NiwzNjNMODEwLDUxMkw1NzYsNjYxek0zNDIsMjE0TDU3NiwzNjNMNTc2LDY2MUwzNDIsODEwelwiLHBsYXk6YS5wbGF5UGF0aD9hLnBsYXlQYXRoOlwiTTU5OCwyMTRoMTcwdjU5NmgtMTcwdi01OTZ6TTI1NiA4MTB2LTU5NmgxNzB2NTk2aC0xNzB6XCJ9LGw9dC5jcmVhdGVEb20oXCJ4Zy1zdGFydFwiLCdcXG4gICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxMDI0XCIgaGVpZ2h0PVwiMTAyNFwiIHZpZXdCb3g9XCIwIDAgMTAyNCAxMDI0XCI+XFxuICAgICAgICAgICAgICA8cGF0aCB0cmFuc2Zvcm09XCJzY2FsZSgwLjA0LDAuMDQpXCIgZD1cIicrcy5wYXVzZSsnXCI+PC9wYXRoPlxcbiAgICAgICAgICA8L3N2Zz4nLHt9LFwieGdwbGF5ZXItc3RhcnRcIiksYz1sLnF1ZXJ5U2VsZWN0b3IoXCJwYXRoXCIpLHU9bmV3IHIuZGVmYXVsdCh7ZnJvbTpzLnBsYXksdG86cy5wYXVzZSxwcm9ncmVzczpmdW5jdGlvbihlLHQpe2Muc2V0QXR0cmlidXRlKFwiZFwiLHUudG9TVkdTdHJpbmcoZSkpfX0pKTt2YXIgZD10LmNyZWF0ZURvbShcInhnLWVudGVyXCIsJzx4Zy1lbnRlci1sb2dvIGNsYXNzPVwieGdwbGF5ZXItZW50ZXItbG9nb1wiPjwveGctZW50ZXItbG9nbz48eGctZW50ZXItdGlwcyBjbGFzcz1cInhncGxheWVyLWVudGVyLXRpcHNcIj48L3hnLXBsYXllci10aXBzPicse30sXCJ4Z3BsYXllci1lbnRlclwiKSxwPWQucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1lbnRlci1sb2dvXCIpO24uYXBwZW5kQ2hpbGQobCksbi5hcHBlbmRDaGlsZChkKTt2YXIgZj1kLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItZW50ZXItdGlwc1wiKSxoPW5ldyBJbWFnZTtoLm9ubG9hZD1mdW5jdGlvbigpe2Yuc3R5bGUuZGlzcGxheT1cImJsb2NrXCJ9LGUuY29uZmlnLmVudGVyTG9nbyYmZS5jb25maWcuZW50ZXJMb2dvLnVybCYmZS5jb25maWcuZW50ZXJMb2dvLndpZHRoJiZlLmNvbmZpZy5lbnRlckxvZ28uaGVpZ2h0PyhoLnNyYz1lLmNvbmZpZy5lbnRlckxvZ28udXJsLHAuc3R5bGUuYmFja2dyb3VuZEltYWdlPSd1cmwoXCInK2UuY29uZmlnLmVudGVyTG9nby51cmwrJ1wiKScscC5zdHlsZS53aWR0aD1lLmNvbmZpZy5lbnRlckxvZ28ud2lkdGgrXCJweFwiLHAuc3R5bGUuaGVpZ2h0PWUuY29uZmlnLmVudGVyTG9nby5oZWlnaHQrXCJweFwiLHAuc3R5bGUuYmFja2dyb3VuZFNpemU9ZS5jb25maWcuZW50ZXJMb2dvLndpZHRoK1wicHggXCIrZS5jb25maWcuZW50ZXJMb2dvLmhlaWdodCtcInB4XCIscC5zdHlsZS5tYXJnaW49XCItXCIrZS5jb25maWcuZW50ZXJMb2dvLmhlaWdodC8yK1wicHggYXV0byBhdXRvIC1cIitlLmNvbmZpZy5lbnRlckxvZ28ud2lkdGgvMitcInB4XCIsZi5zdHlsZS5tYXJnaW49ZS5jb25maWcuZW50ZXJMb2dvLmhlaWdodC02K1wicHggYXV0byBhdXRvIC02MnB4XCIpOmguc3JjPXQuZ2V0QmdJbWFnZShwKSxlLmNvbmZpZy5lbnRlclRpcHMmJmUuY29uZmlnLmVudGVyVGlwcy5iYWNrZ3JvdW5kJiYoZi5zdHlsZS5iYWNrZ3JvdW5kPVwiXCIrZS5jb25maWcuZW50ZXJUaXBzLmJhY2tncm91bmQpLGUuY29uZmlnLmVudGVyQmcmJihlLmNvbmZpZy5lbnRlckJnLnVybD9kLnN0eWxlLmJhY2tncm91bmRJbWFnZT0ndXJsKFwiJytlLmNvbmZpZy5lbnRlckJnLnVybCsnXCIpJzplLmNvbmZpZy5lbnRlckJnLmNvbG9yJiYoZC5zdHlsZS5iYWNrZ3JvdW5kPWUuY29uZmlnLmVudGVyQmcuY29sb3IpKSxlLnN0YXJ0KCksaT8oZS52aWRlby5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwoZnVuY3Rpb24obyl7by5wcmV2ZW50RGVmYXVsdCgpLHQuaGFzQ2xhc3MobixcInhncGxheWVyLWluYWN0aXZlXCIpP2UuZW1pdChcImZvY3VzXCIpOmUuZW1pdChcImJsdXJcIiksZS5jb25maWcuY2xvc2VWaWRlb1RvdWNofHxlLmVuZGVkfHwoZS5wYXVzZWQ/ZS5wbGF5KCk6ZS5wYXVzZSgpKX0pLCExKSxsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLChmdW5jdGlvbihvKXtvLnByZXZlbnREZWZhdWx0KCksdC5oYXNDbGFzcyhuLFwieGdwbGF5ZXItbm9zdGFydFwiKT8odC5yZW1vdmVDbGFzcyhuLFwieGdwbGF5ZXItbm9zdGFydFwiKSx0LmFkZENsYXNzKG4sXCJ4Z3BsYXllci1pcy1lbnRlclwiKSxlLm9uKFwiY2FucGxheVwiLChmdW5jdGlvbigpe3QucmVtb3ZlQ2xhc3MobixcInhncGxheWVyLWlzLWVudGVyXCIpfSkpLGUub25jZShcInBsYXlpbmdcIiwoZnVuY3Rpb24oKXt0LnJlbW92ZUNsYXNzKG4sXCJ4Z3BsYXllci1pcy1lbnRlclwiKX0pKSxlLnBsYXkoKSk6ZS5wYXVzZWQ/ZS5wbGF5KCk6ZS5wYXVzZSgpfSkpLGUub24oXCJwbGF5XCIsKGZ1bmN0aW9uKCl7XCJpbWdcIj09PWEudHlwZT9sLnN0eWxlLmJhY2tncm91bmRJbWFnZT0ndXJsKFwiJythLnVybC5wYXVzZSsnXCIpJzp1LnJlc2V0KHMucGxheSxzLnBhdXNlKX0pKSxlLm9uKFwicGF1c2VcIiwoZnVuY3Rpb24oKXtcImltZ1wiPT09YS50eXBlP2wuc3R5bGUuYmFja2dyb3VuZEltYWdlPSd1cmwoXCInK2EudXJsLnBsYXkrJ1wiKSc6dS5yZXNldChzLnBhdXNlLHMucGxheSl9KSkpOih0LmFkZENsYXNzKG4sXCJ4Z3BsYXllci1tb2JpbGUtbnBhc3NlZFwiKSxlLm9uY2UoXCJyZWFkeVwiLChmdW5jdGlvbigpe2UudmlkZW8uY29udHJvbHM9ZS5jb25maWcuY29udHJvbHMsZS52aWRlby5jb250cm9sc0xpc3Q9ZS5jb25maWcuY29udHJvbHNMaXN0LmpvaW4oXCIgXCIpLGUuY29uZmlnLnBvc3RlciYmKGUudmlkZW8ucG9zdGVyPWUuY29uZmlnLnBvc3Rlcil9KSkpLGUuY29uZmlnLmRlYnVnJiZmdW5jdGlvbihlKXt2YXIgdD17fTtPYmplY3QuYXNzaWduKHQse2hvc3Q6XCIxMjcuMC4wLjFcIixwb3J0OjkwOTB9LGUpO3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDRcIik7by5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246Zml4ZWQ7Ym90dG9tOjA7cGFkZGluZzoxMHB4O3dpZHRoOjEwMCU7YmFja2dyb3VuZC1jb2xvcjojZmZmO3RleHQtYWxpZ246Y2VudGVyXCIsby50ZXh0Q29udGVudD1cIndlaW5yZSAtLWJvdW5kSG9zdCBcIit0Lmhvc3QrXCIgLS1odHRwUG9ydCBcIit0LnBvcnQrXCJcXHJcXG4g5ZCv5Yqo5pyN5Yqh5ZCO77yM5Yi35paw6aG16Z2iXCIsbi5hbm9ueW1vdXM9ITAsbi5hc3luYz0hMCxuLnNyYz1cImh0dHA6Ly9cIit0Lmhvc3QrXCI6XCIrdC5wb3J0K1wiL3RhcmdldC90YXJnZXQtc2NyaXB0LW1pbi5qcyNhbm9ueW1vdXNcIixuLm9ubG9hZD1mdW5jdGlvbigpe28ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKX0sZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChuKSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG8pfShlLmNvbmZpZy5kZWJ1Zyl9KSl9LFwiLi9zcmMvY29udHJvbC9wYy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvcGMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwicGNcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9aS5kZWZhdWx0LnV0aWwsbj1lLmNvbnRyb2xzLG89ZS5yb290LHI9MCxhPXZvaWQgMCxzPWUuY29uZmlnLmNlbnRlckJ0bj9lLmNvbmZpZy5jZW50ZXJCdG46e30sbD12b2lkIDAsYz12b2lkIDAsdT12b2lkIDA7XCJpbWdcIj09PXMudHlwZT9jPWkuZGVmYXVsdC51dGlsLmNyZWF0ZUltZ0J0bihcInN0YXJ0XCIscy51cmwucGxheSxzLndpZHRoLHMuaGVpZ2h0KToobD17cGF1c2U6cy5wYXVzZVBhdGg/cy5wYXVzZVBhdGg6XCJNNTc2LDM2M0w4MTAsNTEyTDU3Niw2NjF6TTM0MiwyMTRMNTc2LDM2M0w1NzYsNjYxTDM0Miw4MTB6XCIscGxheTpzLnBsYXlQYXRoP3MucGxheVBhdGg6XCJNNTk4LDIxNGgxNzB2NTk2aC0xNzB2LTU5NnpNMjU2IDgxMHYtNTk2aDE3MHY1OTZoLTE3MHpcIn0sYz10LmNyZWF0ZURvbShcInhnLXN0YXJ0XCIsJ1xcbiAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjEwMjRcIiBoZWlnaHQ9XCIxMDI0XCIgdmlld0JveD1cIjAgMCAxMDI0IDEwMjRcIj5cXG4gICAgICAgICAgICAgIDxwYXRoIHRyYW5zZm9ybT1cInNjYWxlKDAuMDQsMC4wNClcIiBkPVwiJytsLnBhdXNlKydcIj48L3BhdGg+XFxuICAgICAgICAgIDwvc3ZnPicse30sXCJ4Z3BsYXllci1zdGFydFwiKSx1PWMucXVlcnlTZWxlY3RvcihcInBhdGhcIikpO3ZhciBkPXQuY3JlYXRlRG9tKFwieGctZW50ZXJcIiwnPHhnLWVudGVyLWxvZ28gY2xhc3M9XCJ4Z3BsYXllci1lbnRlci1sb2dvXCI+PC94Zy1lbnRlci1sb2dvPjx4Zy1lbnRlci10aXBzIGNsYXNzPVwieGdwbGF5ZXItZW50ZXItdGlwc1wiPjwveGctcGxheWVyLXRpcHM+Jyx7fSxcInhncGxheWVyLWVudGVyXCIpLHA9ZC5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLWVudGVyLWxvZ29cIik7by5hcHBlbmRDaGlsZChjKSxvLmFwcGVuZENoaWxkKGQpO3ZhciBmPWQucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1lbnRlci10aXBzXCIpLGg9bmV3IEltYWdlO2Z1bmN0aW9uIGcoKXt0LnJlbW92ZUNsYXNzKG8sXCJ4Z3BsYXllci1pcy1lbnRlclwiKX1mdW5jdGlvbiB2KCl7dC5yZW1vdmVDbGFzcyhvLFwieGdwbGF5ZXItaXMtZW50ZXJcIil9ZnVuY3Rpb24gbSgpe1wiaW1nXCI9PT1zLnR5cGU/Yy5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9J3VybChcIicrcy51cmwucGF1c2UrJ1wiKSc6dS5zZXRBdHRyaWJ1dGUoXCJkXCIsbC5wYXVzZSksYy5zdHlsZS5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIsdC5hZGRDbGFzcyhjLFwieGdwbGF5ZXItc3RhcnQtaW50ZXJhY3RcIil9ZnVuY3Rpb24geSgpe1wiaW1nXCI9PT1zLnR5cGU/Yy5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9J3VybChcIicrcy51cmwucGxheSsnXCIpJzp1LnNldEF0dHJpYnV0ZShcImRcIixsLnBsYXkpLGMuc3R5bGUuZGlzcGxheT1cImlubGluZS1ibG9ja1wiLHQuYWRkQ2xhc3MoYyxcInhncGxheWVyLXN0YXJ0LWludGVyYWN0XCIpfWZ1bmN0aW9uIGIodCl7ZS5jb25maWcuYXV0b3BsYXkmJmUuc3RhcnQoKX1oLm9ubG9hZD1mdW5jdGlvbigpe2Yuc3R5bGUuZGlzcGxheT1cImJsb2NrXCJ9LGUuY29uZmlnLmVudGVyTG9nbyYmZS5jb25maWcuZW50ZXJMb2dvLnVybCYmZS5jb25maWcuZW50ZXJMb2dvLndpZHRoJiZlLmNvbmZpZy5lbnRlckxvZ28uaGVpZ2h0PyhoLnNyYz1lLmNvbmZpZy5lbnRlckxvZ28udXJsLHAuc3R5bGUuYmFja2dyb3VuZEltYWdlPSd1cmwoXCInK2UuY29uZmlnLmVudGVyTG9nby51cmwrJ1wiKScscC5zdHlsZS53aWR0aD1lLmNvbmZpZy5lbnRlckxvZ28ud2lkdGgrXCJweFwiLHAuc3R5bGUuaGVpZ2h0PWUuY29uZmlnLmVudGVyTG9nby5oZWlnaHQrXCJweFwiLHAuc3R5bGUuYmFja2dyb3VuZFNpemU9ZS5jb25maWcuZW50ZXJMb2dvLndpZHRoK1wicHggXCIrZS5jb25maWcuZW50ZXJMb2dvLmhlaWdodCtcInB4XCIscC5zdHlsZS5tYXJnaW49XCItXCIrZS5jb25maWcuZW50ZXJMb2dvLmhlaWdodC8yK1wicHggYXV0byBhdXRvIC1cIitlLmNvbmZpZy5lbnRlckxvZ28ud2lkdGgvMitcInB4XCIsZi5zdHlsZS5tYXJnaW49ZS5jb25maWcuZW50ZXJMb2dvLmhlaWdodC02K1wicHggYXV0byBhdXRvIC02MnB4XCIpOmguc3JjPXQuZ2V0QmdJbWFnZShwKSxlLmNvbmZpZy5lbnRlclRpcHMmJmUuY29uZmlnLmVudGVyVGlwcy5iYWNrZ3JvdW5kJiYoZi5zdHlsZS5iYWNrZ3JvdW5kPVwiXCIrZS5jb25maWcuZW50ZXJUaXBzLmJhY2tncm91bmQpLGUuY29uZmlnLmVudGVyQmcmJihlLmNvbmZpZy5lbnRlckJnLnVybD9kLnN0eWxlLmJhY2tncm91bmRJbWFnZT0ndXJsKFwiJytlLmNvbmZpZy5lbnRlckJnLnVybCsnXCIpJzplLmNvbmZpZy5lbnRlckJnLmNvbG9yJiYoZC5zdHlsZS5iYWNrZ3JvdW5kPWUuY29uZmlnLmVudGVyQmcuY29sb3IpKSxbXCJjbGlja1wiLFwidG91Y2hlbmRcIl0uZm9yRWFjaCgoZnVuY3Rpb24obil7Yy5hZGRFdmVudExpc3RlbmVyKG4sKGZ1bmN0aW9uKG4peyFmdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKSx0Lmhhc0NsYXNzKG8sXCJ4Z3BsYXllci1ub3N0YXJ0XCIpPyh0LnJlbW92ZUNsYXNzKG8sXCJ4Z3BsYXllci1ub3N0YXJ0XCIpLHQuYWRkQ2xhc3MobyxcInhncGxheWVyLWlzLWVudGVyXCIpLGUub24oXCJjYW5wbGF5XCIsZyksZS5vbmNlKFwicGxheWluZ1wiLHYpLG8ucXVlcnlTZWxlY3RvcihcInZpZGVvXCIpfHxlLnN0YXJ0KCksZS5wbGF5KCkpOmUucGF1c2VkJiYodC5yZW1vdmVDbGFzcyhvLFwieGdwbGF5ZXItbm9zdGFydCB4Z3BsYXllci1pc2xvYWRpbmdcIiksc2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLnBsYXkoKX0pLDEwKSl9KG4pfSksITEpfSkpLGMuYWRkRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbmVuZFwiLChmdW5jdGlvbihlKXshZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLHQucmVtb3ZlQ2xhc3MoYyxcInhncGxheWVyLXN0YXJ0LWludGVyYWN0XCIpLGMuc3R5bGUuZGlzcGxheT1cIm5vbmVcIn0oZSl9KSksZS5vbihcInBsYXlcIixtKSxlLm9uKFwicGF1c2VcIix5KSxlLm9uRWxlbWVudENsaWNrPWZ1bmN0aW9uKGUsbil7ZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCk7dmFyIG89dGhpcztvLmNvbmZpZy5jbG9zZVZpZGVvQ2xpY2t8fChyKyssYSYmY2xlYXJUaW1lb3V0KGEpLDE9PT1yP2E9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtpZih0Lmhhc0NsYXNzKG8ucm9vdCxcInhncGxheWVyLW5vc3RhcnRcIikpcmV0dXJuITE7by5lbmRlZHx8KG8ucGF1c2VkP28ucGxheSgpOm8ucGF1c2UoKSkscj0wfSksMjAwKTpyPTApfSxlLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLChmdW5jdGlvbih0KXtlLm9uRWxlbWVudENsaWNrKHQsZS52aWRlbyl9KSwhMSksZS5vbkVsZW1lbnREYmxjbGljaz1mdW5jdGlvbihlLHQpe2UucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpO2lmKCF0aGlzLmNvbmZpZy5jbG9zZVZpZGVvRGJsY2xpY2spe3ZhciBvPW4ucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1mdWxsc2NyZWVuXCIpO2lmKG8pe3ZhciByPXZvaWQgMDtkb2N1bWVudC5jcmVhdGVFdmVudD8ocj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpKS5pbml0RXZlbnQoXCJjbGlja1wiLCEwLCEwKTpyPW5ldyBFdmVudChcImNsaWNrXCIpLG8uZGlzcGF0Y2hFdmVudChyKX19fSxlLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLChmdW5jdGlvbih0KXtlLm9uRWxlbWVudERibGNsaWNrKHQsZS52aWRlbyl9KSwhMSksby5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLChmdW5jdGlvbigpe2NsZWFyVGltZW91dChlLmxlYXZlUGxheWVyVGltZXIpLGUuZW1pdChcImZvY3VzXCIsZSl9KSwhMSksby5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLChmdW5jdGlvbigpe2UuY29uZmlnLmNsb3NlUGxheWVyQmx1cnx8KGUubGVhdmVQbGF5ZXJUaW1lcj1zZXRUaW1lb3V0KChmdW5jdGlvbigpe2UuZW1pdChcImJsdXJcIixlKX0pLGUuY29uZmlnLmxlYXZlUGxheWVyVGltZXx8MCkpfSksITEpLG4uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwoZnVuY3Rpb24odCl7ZS51c2VyVGltZXImJmNsZWFyVGltZW91dChlLnVzZXJUaW1lcil9KSwhMSksbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLChmdW5jdGlvbih0KXtlLmNvbmZpZy5jbG9zZUNvbnRyb2xzQmx1cnx8ZS5lbWl0KFwiZm9jdXNcIixlKX0pLCExKSxlLm9uY2UoXCJyZWFkeVwiLGIpLGUub25jZShcImRlc3Ryb3lcIiwoZnVuY3Rpb24gdCgpe2Uub2ZmKFwiY2FucGxheVwiLGcpLGUub2ZmKFwicGxheWluZ1wiLHYpLGUub2ZmKFwicGxheVwiLG0pLGUub2ZmKFwicGF1c2VcIix5KSxlLm9mZihcInJlYWR5XCIsYiksZS5vZmYoXCJkZXN0cm95XCIsdCl9KSl9KSl9LFwiLi9zcmMvY29udHJvbC9waXAuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9waXAuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcInBpcFwiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1pLmRlZmF1bHQudXRpbDtpZihlLmNvbmZpZy5waXApe3ZhciBuPXQuY3JlYXRlRG9tKFwieGctcGlwXCIsJzxwIGNsYXNzPVwibmFtZVwiPjxzcGFuPueUu+S4reeUuzwvc3Bhbj48L3A+Jyx7dGFiaW5kZXg6OX0sXCJ4Z3BsYXllci1waXBcIiksbz1lLmNvbnRyb2xzLHI9ZS5yb290O28uYXBwZW5kQ2hpbGQobik7W1wiY2xpY2tcIixcInRvdWNoc3RhcnRcIl0uZm9yRWFjaCgoZnVuY3Rpb24obyl7bi5hZGRFdmVudExpc3RlbmVyKG8sKGZ1bmN0aW9uKG4pe24ucHJldmVudERlZmF1bHQoKSxuLnN0b3BQcm9wYWdhdGlvbigpLHQuaGFzQ2xhc3MocixcInhncGxheWVyLXBpcC1hY3RpdmVcIik/ZS5leGl0UElQKGUpOmUuZ2V0UElQKGUpfSkpfSkpfX0pKX0sXCIuL3NyYy9jb250cm9sL3BsYXkuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvcGxheS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89aShuKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSkscj1pKG4oLyohIC4uL3V0aWxzL3N2ZyAqL1wiLi9zcmMvdXRpbHMvc3ZnLmpzXCIpKTtmdW5jdGlvbiBpKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1vLmRlZmF1bHQuaW5zdGFsbChcInBsYXlcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS5jb250cm9scyxuPW8uZGVmYXVsdC51dGlsLGk9ZS5jb25maWcuaWNvblNjYWxlfHwuMDMyMDYyNSxhPXtwbGF5OlwiTTU3NiwzNjNMODEwLDUxMkw1NzYsNjYxek0zNDIsMjE0TDU3NiwzNjNMNTc2LDY2MUwzNDIsODEwelwiLHBhdXNlOlwiTTU5OCwyMTRoMTcwdjU5NmgtMTcwdi01OTZ6TTI1NiA4MTB2LTU5NmgxNzB2NTk2aC0xNzB6XCJ9LHM9ZS5jb25maWcucGxheUJ0bj9lLmNvbmZpZy5wbGF5QnRuOnt9LGw9dm9pZCAwLGM9dm9pZCAwLHU9dm9pZCAwO1wiaW1nXCI9PT1zLnR5cGU/bD1vLmRlZmF1bHQudXRpbC5jcmVhdGVJbWdCdG4oXCJwbGF5XCIscy51cmwucGxheSxzLndpZHRoLHMuaGVpZ2h0KToobD1uLmNyZWF0ZURvbShcInhnLXBsYXlcIiwnPHhnLWljb24gY2xhc3M9XCJ4Z3BsYXllci1pY29uXCI+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxMDI0XCIgaGVpZ2h0PVwiMTAyNFwiIHZpZXdCb3g9XCIwIDAgMTAyNCAxMDI0XCI+XFxuICAgICAgICAgICAgICA8cGF0aCB0cmFuc2Zvcm09XCJzY2FsZSgnK2krXCIgXCIraSsnKVwiIGQ9XCInK2EucGxheSsnXCI+PC9wYXRoPlxcbiAgICAgICAgICA8L3N2Zz48L3hnLWljb24+Jyx7fSxcInhncGxheWVyLXBsYXlcIiksYz1sLnF1ZXJ5U2VsZWN0b3IoXCJwYXRoXCIpLHU9bmV3IHIuZGVmYXVsdCh7cHJvZ3Jlc3M6ZnVuY3Rpb24oZSx0KXtjLnNldEF0dHJpYnV0ZShcImRcIix1LnRvU1ZHU3RyaW5nKGUpKX0sZnJvbTphLnBhdXNlLHRvOmEucGxheSxkdXJhdGlvbjo1MH0pKTt2YXIgZD1lLmNvbmZpZy5sYW5nJiZcInpoLWNuXCI9PT1lLmNvbmZpZy5sYW5nP1wi5pKt5pS+XCI6XCJQbGF5XCIscD1lLmNvbmZpZy5sYW5nJiZcInpoLWNuXCI9PT1lLmNvbmZpZy5sYW5nP1wi5pqC5YGcXCI6XCJQYXVzZVwiLGY9bi5jcmVhdGVEb20oXCJ4Zy10aXBzXCIsZCx7fSxcInhncGxheWVyLXRpcHNcIik7bC5hcHBlbmRDaGlsZChmKTtmdW5jdGlvbiBoKCl7XCJpbWdcIj09PXMudHlwZT9sLnN0eWxlLmJhY2tncm91bmRJbWFnZT0ndXJsKFwiJytzLnVybC5wYXVzZSsnXCIpJzpzZXRUaW1lb3V0KChmdW5jdGlvbigpe2YudGV4dENvbnRlbnQ9cCx1LnRvIT09YS5wYXVzZSYmdS5yZXNldChhLnBhdXNlLGEucGxheSl9KSw4MCl9ZnVuY3Rpb24gZygpe1wiaW1nXCI9PT1zLnR5cGU/bC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9J3VybChcIicrcy51cmwucGxheSsnXCIpJzpzZXRUaW1lb3V0KChmdW5jdGlvbigpe2YudGV4dENvbnRlbnQ9ZCx1LnRvIT09YS5wbGF5JiZ1LnJlc2V0KGEucGxheSxhLnBhdXNlKX0pLDgwKX10LmFwcGVuZENoaWxkKGwpLFtcImNsaWNrXCIsXCJ0b3VjaHN0YXJ0XCJdLmZvckVhY2goKGZ1bmN0aW9uKHQpe2wuYWRkRXZlbnRMaXN0ZW5lcih0LChmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxlLmVuZGVkfHwoZS5wYXVzZWQ/ZS5wbGF5KCk6ZS5wYXVzZSgpKX0pLCExKX0pKSxlLm9uKFwicGxheVwiLGgpLGUub24oXCJwYXVzZVwiLGcpLGUub25jZShcImRlc3Ryb3lcIiwoZnVuY3Rpb24gdCgpe2Uub2ZmKFwicGxheVwiLGgpLGUub2ZmKFwicGF1c2VcIixnKSxlLm9mZihcImRlc3Ryb3lcIix0KX0pKX0pKX0sXCIuL3NyYy9jb250cm9sL3BsYXlOZXh0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9wbGF5TmV4dC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI9bigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIiksaT0obz1yKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307aS5kZWZhdWx0Lmluc3RhbGwoXCJwbGF5TmV4dFwiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1pLmRlZmF1bHQudXRpbCxuPWUuY29udHJvbHMsbz1lLmNvbmZpZy5wbGF5TmV4dEJ0bixyPS0xO2lmKG8mJm8udXJsTGlzdCl7dmFyIGE9dm9pZCAwO2E9XCJpbWdcIj09PW8udHlwZT9pLmRlZmF1bHQudXRpbC5jcmVhdGVJbWdCdG4oXCJwbGF5TmV4dFwiLG8udXJsLG8ud2lkdGgsby5oZWlnaHQpOnQuY3JlYXRlRG9tKFwieGctcGxheU5leHRcIiwnPHhnLWljb24gY2xhc3M9XCJ4Z3BsYXllci1pY29uXCI+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxMDI0XCIgaGVpZ2h0PVwiMTAyNFwiIHZpZXdCb3g9XCIwIDAgMTAyNCAxMDI0XCI+XFxuICAgICAgICAgICAgICAgIDxwYXRoIHRyYW5zZm9ybT1cInNjYWxlKDAuMDI1IDAuMDI1KVwiXFxuICAgICAgICAgICAgICAgIGQ9XCJNODAwIDM4MHY3NjhoLTEyOHYtMzUybC0zMjAgMzIwdi03MDRsMzIwIDMyMHYtMzUyelwiPjwvcGF0aD5cXG4gICAgICAgICAgICA8L3N2Zz48L3hnLWljb24+Jyx7fSxcInhncGxheWVyLXBsYXlOZXh0XCIpLG4uYXBwZW5kQ2hpbGQoYSk7W1wiY2xpY2tcIixcInRvdWNoZW5kXCJdLmZvckVhY2goKGZ1bmN0aW9uKHQpe2EuYWRkRXZlbnRMaXN0ZW5lcih0LChmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxyKzE8by51cmxMaXN0Lmxlbmd0aD8ocisrLGUudmlkZW8ucGF1c2UoKSxlLmN1cnJlbnRUaW1lPTAsZS52aWRlby5hdXRvcGxheT0hMCxlLnNyYz1vLnVybExpc3Rbcl0sZS5lbWl0KFwicGxheWVyTmV4dFwiLHIrMSkpOmUuZW1pdChcInVybExpc3QgbGFzdFwiKX0pLCExKX0pKX19KSl9LFwiLi9zcmMvY29udHJvbC9wbGF5YmFja1JhdGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9wbGF5YmFja1JhdGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcInBsYXliYWNrUmF0ZVwiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1pLmRlZmF1bHQudXRpbCxuPTAsbz0xLHI9W107aWYoIWUuY29uZmlnLnBsYXliYWNrUmF0ZSlyZXR1cm4hMTtlLmNvbmZpZy5wbGF5YmFja1JhdGUuc29ydCgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS10fSkpLGUuY29uZmlnLnBsYXliYWNrUmF0ZS5mb3JFYWNoKChmdW5jdGlvbih0LGkpe2UuY29uZmlnLmRlZmF1bHRQbGF5YmFja1JhdGUmJmUuY29uZmlnLmRlZmF1bHRQbGF5YmFja1JhdGU9PT10PyhuPWksbz10LGUub25jZShcInBsYXlpbmdcIiwoZnVuY3Rpb24oKXtlLnZpZGVvLnBsYXliYWNrUmF0ZT10fSkpKToxIT09dCYmXCIxXCIhPT10fHwobj1pKSxyLnB1c2godCtcInhcIil9KSk7dmFyIGE9ZS5jb25maWcubGFuZyYmXCJ6aC1jblwiPT09ZS5jb25maWcubGFuZz9cIuWAjemAn1wiOlwiU3BlZWRcIixzPXQuY3JlYXRlRG9tKFwieGctcGxheWJhY2tcIixcIjxwIGNsYXNzPSduYW1lJz48c3Bhbj5cIitvK1wieDwvc3Bhbj48L3A+XCIse30sXCJ4Z3BsYXllci1wbGF5YmFja1wiKSxsPWUuY29udHJvbHMsYz10LmNyZWF0ZURvbShcInhnLXRpcHNcIixhLHt9LFwieGdwbGF5ZXItdGlwc1wiKTtzLmFwcGVuZENoaWxkKGMpLGwuYXBwZW5kQ2hpbGQocyksW1widG91Y2hzdGFydFwiLFwiY2xpY2tcIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7cy5hZGRFdmVudExpc3RlbmVyKHQsKGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpO3ZhciBvPXQudGFyZ2V0fHx0LnNyY0VsZW1lbnQ7IW98fFwicFwiIT09by50YWdOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkmJlwic3BhblwiIT09by50YWdOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCl8fChuPW4rMT09PXIubGVuZ3RoPzA6bisxLHMucXVlcnlTZWxlY3RvcihcInBcIikuaW5uZXJIVE1MPVwiPHNwYW4+XCIrcltuXStcIjwvc3Bhbj5cIixlLnZpZGVvLnBsYXliYWNrUmF0ZT0xKnJbbl0ucmVwbGFjZSgveCQvZyxcIlwiKSl9KSwhMSl9KSkscy5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLChmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxjLnN0eWxlLmxlZnQ9XCI1MCVcIjt2YXIgbj1jLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG89ZS5yb290LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO24ucmlnaHQ+by5yaWdodCYmKGMuc3R5bGUubGVmdD0tbi5yaWdodCtvLnJpZ2h0KzE2K1wicHhcIil9KSksZS5vbihcInBsYXlcIiwoZnVuY3Rpb24oKXt2YXIgdD1wYXJzZUZsb2F0KHJbbl0uc3Vic3RyaW5nKDAscltuXS5sZW5ndGgtMSkpO2UudmlkZW8ucGxheWJhY2tSYXRlLnRvRml4ZWQoMSkhPT10LnRvRml4ZWQoMSkmJihlLnZpZGVvLnBsYXliYWNrUmF0ZT10KX0pKX0pKX0sXCIuL3NyYy9jb250cm9sL3Bvc3Rlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL3Bvc3Rlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwicG9zdGVyXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWkuZGVmYXVsdC51dGlsLmNyZWF0ZURvbShcInhnLXBvc3RlclwiLFwiXCIse30sXCJ4Z3BsYXllci1wb3N0ZXJcIiksbj1lLnJvb3Q7ZnVuY3Rpb24gbygpe3Quc3R5bGUuZGlzcGxheT1cIm5vbmVcIn1lLmNvbmZpZy5wb3N0ZXImJih0LnN0eWxlLmJhY2tncm91bmRJbWFnZT1cInVybChcIitlLmNvbmZpZy5wb3N0ZXIrXCIpXCIsbi5hcHBlbmRDaGlsZCh0KSksZS5vbihcInBsYXlcIixvKSxlLm9uY2UoXCJkZXN0cm95XCIsKGZ1bmN0aW9uIHQoKXtlLm9mZihcInBsYXlcIixvKSxlLm9mZihcImRlc3Ryb3lcIix0KX0pKX0pKX0sXCIuL3NyYy9jb250cm9sL3Byb2dyZXNzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9wcm9ncmVzcy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI9bigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIiksaT0obz1yKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307aS5kZWZhdWx0Lmluc3RhbGwoXCJwcm9ncmVzc1wiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1pLmRlZmF1bHQudXRpbCxuPXQuY3JlYXRlRG9tKFwieGctcHJvZ3Jlc3NcIiwnPHhnLW91dGVyIGNsYXNzPVwieGdwbGF5ZXItcHJvZ3Jlc3Mtb3V0ZXJcIj48eGctY2FjaGUgY2xhc3M9XCJ4Z3BsYXllci1wcm9ncmVzcy1jYWNoZVwiPjwveGctY2FjaGU+PHhnLXBsYXllZCBjbGFzcz1cInhncGxheWVyLXByb2dyZXNzLXBsYXllZFwiPjwveGdwbGF5ZXItcGxheWVkPjx4Zy1wcm9ncmVzcy1idG4gY2xhc3M9XCJ4Z3BsYXllci1wcm9ncmVzcy1idG5cIj48L3hnLXByb2dyZXNzLWJ0bj48eGctcG9pbnQgY2xhc3M9XCJ4Z3BsYXllci1wcm9ncmVzcy1wb2ludCB4Z3BsYXllci10aXBzXCI+PC94Zy1wb2ludD48eGctdGh1bWJuYWlsIGNsYXNzPVwieGdwbGF5ZXItcHJvZ3Jlc3MtdGh1bWJuYWlsIHhncGxheWVyLXRpcHNcIj48L3hnLXRodW1ibmFpbD48L3hnLW91dGVyPicse3RhYmluZGV4OjF9LFwieGdwbGF5ZXItcHJvZ3Jlc3NcIiksbz1lLmNvbnRyb2xzLHI9dm9pZCAwO28uYXBwZW5kQ2hpbGQobik7dmFyIGE9bi5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLXByb2dyZXNzLXBsYXllZFwiKSxzPW4ucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1wcm9ncmVzcy1idG5cIiksbD1uLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItcHJvZ3Jlc3Mtb3V0ZXJcIiksYz1uLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItcHJvZ3Jlc3MtY2FjaGVcIiksdT1uLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItcHJvZ3Jlc3MtcG9pbnRcIiksZD1uLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItcHJvZ3Jlc3MtdGh1bWJuYWlsXCIpO2Z1bmN0aW9uIHAobyxyKXtvLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsKGZ1bmN0aW9uKGUpe3ImJih0LmFkZENsYXNzKG8sXCJ4Z3BsYXllci1wcm9ncmVzcy1kb3Qtc2hvd1wiKSx0LmFkZENsYXNzKG4sXCJ4Z3BsYXllci1wcm9ncmVzcy1kb3QtYWN0aXZlXCIpKX0pKSxvLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsKGZ1bmN0aW9uKGUpe3ImJih0LnJlbW92ZUNsYXNzKG8sXCJ4Z3BsYXllci1wcm9ncmVzcy1kb3Qtc2hvd1wiKSx0LnJlbW92ZUNsYXNzKG4sXCJ4Z3BsYXllci1wcm9ncmVzcy1kb3QtYWN0aXZlXCIpKX0pKSxvLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLChmdW5jdGlvbihpKXtpLnByZXZlbnREZWZhdWx0KCksaS5zdG9wUHJvcGFnYXRpb24oKSxyJiYodC5oYXNDbGFzcyhvLFwieGdwbGF5ZXItcHJvZ3Jlc3MtZG90LXNob3dcIil8fE9iamVjdC5rZXlzKGUuZG90QXJyKS5mb3JFYWNoKChmdW5jdGlvbihuKXtlLmRvdEFycltuXSYmdC5yZW1vdmVDbGFzcyhlLmRvdEFycltuXSxcInhncGxheWVyLXByb2dyZXNzLWRvdC1zaG93XCIpfSkpLHQudG9nZ2xlQ2xhc3MobyxcInhncGxheWVyLXByb2dyZXNzLWRvdC1zaG93XCIpLHQudG9nZ2xlQ2xhc3MobixcInhncGxheWVyLXByb2dyZXNzLWRvdC1hY3RpdmVcIikpfSkpfWZ1bmN0aW9uIGYoKXtlLmNvbmZpZy5wcm9ncmVzc0RvdCYmXCJBcnJheVwiPT09dC50eXBlT2YoZS5jb25maWcucHJvZ3Jlc3NEb3QpJiZlLmNvbmZpZy5wcm9ncmVzc0RvdC5mb3JFYWNoKChmdW5jdGlvbihuKXtpZihuLnRpbWU+PTAmJm4udGltZTw9ZS5kdXJhdGlvbil7dmFyIG89dC5jcmVhdGVEb20oXCJ4Zy1wcm9ncmVzcy1kb3RcIixuLnRleHQ/JzxzcGFuIGNsYXNzPVwieGdwbGF5ZXItcHJvZ3Jlc3MtdGlwXCI+JytuLnRleHQrXCI8L3NwYW4+XCI6XCJcIix7fSxcInhncGxheWVyLXByb2dyZXNzLWRvdFwiKTtvLnN0eWxlLmxlZnQ9bi50aW1lL2UuZHVyYXRpb24qMTAwK1wiJVwiLGwuYXBwZW5kQ2hpbGQobyksZS5kb3RBcnJbbi50aW1lXT1vLHAobyxuLnRleHQpfX0pKX1lLmRvdEFycj17fSxlLm9uY2UoXCJjYW5wbGF5XCIsZiksZS5hZGRQcm9ncmVzc0RvdD1mdW5jdGlvbihuLG8pe2lmKCFlLmRvdEFycltuXSYmbj49MCYmbjw9ZS5kdXJhdGlvbil7dmFyIHI9dC5jcmVhdGVEb20oXCJ4Zy1wcm9ncmVzcy1kb3RcIixcIlwiLHt9LFwieGdwbGF5ZXItcHJvZ3Jlc3MtZG90XCIpO3Iuc3R5bGUubGVmdD1uL2UuZHVyYXRpb24qMTAwK1wiJVwiLGwuYXBwZW5kQ2hpbGQociksZS5kb3RBcnJbbl09cixwKHIsbyl9fSxlLnJlbW92ZVByb2dyZXNzRG90PWZ1bmN0aW9uKHQpe2lmKHQ+PTAmJnQ8PWUuZHVyYXRpb24mJmUuZG90QXJyW3RdKXt2YXIgbj1lLmRvdEFyclt0XTtuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobiksbj1udWxsLGUuZG90QXJyW3RdPW51bGx9fSxlLnJlbW92ZUFsbFByb2dyZXNzRG90PWZ1bmN0aW9uKCl7T2JqZWN0LmtleXMoZS5kb3RBcnIpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2lmKGUuZG90QXJyW3RdKXt2YXIgbj1lLmRvdEFyclt0XTtuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobiksbj1udWxsLGUuZG90QXJyW3RdPW51bGx9fSkpfTt2YXIgaD0wLGc9MCx2PTAsbT0wLHk9MCxiPTAseD1bXTtlLmNvbmZpZy50aHVtYm5haWwmJihoPWUuY29uZmlnLnRodW1ibmFpbC5waWNfbnVtLGc9ZS5jb25maWcudGh1bWJuYWlsLndpZHRoLHY9ZS5jb25maWcudGh1bWJuYWlsLmhlaWdodCxtPWUuY29uZmlnLnRodW1ibmFpbC5jb2wseT1lLmNvbmZpZy50aHVtYm5haWwucm93LHg9ZS5jb25maWcudGh1bWJuYWlsLnVybHMsZC5zdHlsZS53aWR0aD1nK1wicHhcIixkLnN0eWxlLmhlaWdodD12K1wicHhcIiksW1widG91Y2hzdGFydFwiLFwibW91c2Vkb3duXCJdLmZvckVhY2goKGZ1bmN0aW9uKGkpe24uYWRkRXZlbnRMaXN0ZW5lcihpLChmdW5jdGlvbihpKXtpZihpLnByZXZlbnREZWZhdWx0KCksaS5zdG9wUHJvcGFnYXRpb24oKSx0LmV2ZW50KGkpLGkuX3RhcmdldD09PXV8fCFlLmNvbmZpZy5hbGxvd1NlZWtBZnRlckVuZGVkJiZlLmVuZGVkKXJldHVybiExO24uZm9jdXMoKSxyPW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7dmFyIGw9YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LGM9ZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksdC5ldmVudChuKSxlLmlzUHJvZ3Jlc3NNb3Zpbmc9ITA7dmFyIGk9bi5jbGllbnRYLWw+cj9yOm4uY2xpZW50WC1sLGM9aS9yKmUuZHVyYXRpb247aWYoYS5zdHlsZS53aWR0aD0xMDAqaS9yK1wiJVwiLGktNzwwPyhzLnN0eWxlLmxlZnQ9XCIwcHhcIixzLnN0eWxlLnRyYW5zZm9ybT1cIlwiKTppKzc+cj8ocy5zdHlsZS5sZWZ0PXItMTQrXCJweFwiLHMuc3R5bGUudHJhbnNmb3JtPVwiXCIpOihzLnN0eWxlLmxlZnQ9XCIxMDAlXCIscy5zdHlsZS50cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTUwJSwgMClcIiksXCJ2aWRlb1wiIT09ZS52aWRlb0NvbmZpZy5tZWRpYVR5cGV8fGUuZGFzaHx8ZS5jb25maWcuY2xvc2VNb3ZlU2Vlayl7dmFyIHU9dC5maW5kRG9tKG8sXCIueGdwbGF5ZXItdGltZVwiKTt1JiYodS5pbm5lckhUTUw9XCI8c3Bhbj5cIit0LmZvcm1hdChjfHwwKStcIjwvc3Bhbj48ZW0+XCIrdC5mb3JtYXQoZS5kdXJhdGlvbikpfWVsc2UgZS5jdXJyZW50VGltZT1OdW1iZXIoYykudG9GaXhlZCgxKTtlLmVtaXQoXCJmb2N1c1wiKX0sZD1mdW5jdGlvbiBvKGkpe2lmKGkucHJldmVudERlZmF1bHQoKSxpLnN0b3BQcm9wYWdhdGlvbigpLHQuZXZlbnQoaSksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixjKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLGMse3Bhc3NpdmU6ITF9KSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixvKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsbyksbi5ibHVyKCksIWUuaXNQcm9ncmVzc01vdmluZ3x8XCJhdWRpb1wiPT09ZS52aWRlb0NvbmZpZy5tZWRpYVR5cGV8fGUuZGFzaHx8ZS5jb25maWcuY2xvc2VNb3ZlU2Vlayl7dmFyIHU9aS5jbGllbnRYLWwsZD11L3IqZS5kdXJhdGlvbjthLnN0eWxlLndpZHRoPTEwMCp1L3IrXCIlXCIsdS03PDA/KHMuc3R5bGUubGVmdD1cIjBweFwiLHMuc3R5bGUudHJhbnNmb3JtPVwiXCIpOnUrNz5yPyhzLnN0eWxlLmxlZnQ9ci0xNCtcInB4XCIscy5zdHlsZS50cmFuc2Zvcm09XCJcIik6KHMuc3R5bGUubGVmdD1cIjEwMCVcIixzLnN0eWxlLnRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNTAlLCAwKVwiKSxlLmN1cnJlbnRUaW1lPU51bWJlcihkKS50b0ZpeGVkKDEpfWUuZW1pdChcImZvY3VzXCIpLGUuaXNQcm9ncmVzc01vdmluZz0hMX07cmV0dXJuIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsYyksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIixjLHtwYXNzaXZlOiExfSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsZCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLGQpLCExfSkpfSkpLG4uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwoZnVuY3Rpb24obyl7aWYoIWUuY29uZmlnLmFsbG93U2Vla0FmdGVyRW5kZWQmJmUuZW5kZWQpcmV0dXJuITE7dmFyIHI9bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LGk9bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCxhPWZ1bmN0aW9uKG8pe3ZhciBhPShvLmNsaWVudFgtcikvaSplLmR1cmF0aW9uO2E9YTwwPzA6YSx1LnRleHRDb250ZW50PXQuZm9ybWF0KGEpO3ZhciBzPXUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7aWYoZS5jb25maWcudGh1bWJuYWlsKXtiPWUuZHVyYXRpb24vaDt2YXIgbD1NYXRoLmZsb29yKGEvYik7ZC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9XCJ1cmwoXCIreFtNYXRoLmNlaWwoKGwrMSkvKG0qeSkpLTFdK1wiKVwiO3ZhciBjPWwrMS1tKnkqKE1hdGguY2VpbCgobCsxKS8obSp5KSktMSkscD1NYXRoLmNlaWwoYy95KS0xLGY9Yy1wKnktMTtkLnN0eWxlW1wiYmFja2dyb3VuZC1wb3NpdGlvblwiXT1cIi1cIitmKmcrXCJweCAtXCIrcCp2K1wicHhcIjt2YXIgdz1vLmNsaWVudFgtci1nLzI7dz0odz13PjA/dzowKTxpLWc/dzppLWcsZC5zdHlsZS5sZWZ0PXcrXCJweFwiLGQuc3R5bGUudG9wPS0xMC12K1wicHhcIixkLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLHUuc3R5bGUubGVmdD13K2cvMi1zLzIrXCJweFwifWVsc2V7dmFyIF89by5jbGllbnRYLXItcy8yO189KF89Xz4wP186MCk+aS1zP2ktczpfLHUuc3R5bGUubGVmdD1fK1wicHhcIn10Lmhhc0NsYXNzKG4sXCJ4Z3BsYXllci1wcm9ncmVzcy1kb3QtYWN0aXZlXCIpP3Uuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjp1LnN0eWxlLmRpc3BsYXk9XCJibG9ja1wifSxzPWZ1bmN0aW9uKGUpe2EoZSl9O24uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHMsITEpLG4uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwoZnVuY3Rpb24gZSh0KXtuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixzLCExKSxuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsZSwhMSksYSh0KSx1LnN0eWxlLmRpc3BsYXk9XCJub25lXCIsZC5zdHlsZS5kaXNwbGF5PVwibm9uZVwifSksITEpLGEobyl9KSwhMSk7dmFyIHc9ITEsXz1mdW5jdGlvbigpe2lmKCFyJiZuJiYocj1uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKSxcImF1ZGlvXCIhPT1lLnZpZGVvQ29uZmlnLm1lZGlhVHlwZXx8IWUuaXNQcm9ncmVzc01vdmluZ3x8IWUuZGFzaCl7YS5zdHlsZS53aWR0aD0xMDAqZS5jdXJyZW50VGltZS9lLmR1cmF0aW9uK1wiJVwiO3ZhciB0PWUuY3VycmVudFRpbWUvZS5kdXJhdGlvbipyLTc7aWYodDwwKXMuc3R5bGUubGVmdD1cIjBweFwiLHMuc3R5bGUudHJhbnNmb3JtPVwiXCIsdz0hMTtlbHNlIGlmKHQrMTQ+cilzLnN0eWxlLmxlZnQ9ci0xNCtcInB4XCIscy5zdHlsZS50cmFuc2Zvcm09XCJcIix3PSExO2Vsc2V7aWYodylyZXR1cm47cy5zdHlsZS5sZWZ0PVwiMTAwJVwiLHMuc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlKC01MCUsIDApXCIsdz0hMH19fTtlLm9uKFwidGltZXVwZGF0ZVwiLF8pO3ZhciBrPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5idWZmZXJlZDtpZih0JiZ0Lmxlbmd0aD4wKXtmb3IodmFyIG49dC5lbmQodC5sZW5ndGgtMSksbz0wLHI9dC5sZW5ndGg7bzxyO28rKylpZihlLmN1cnJlbnRUaW1lPj10LnN0YXJ0KG8pJiZlLmN1cnJlbnRUaW1lPD10LmVuZChvKSl7bj10LmVuZChvKTtmb3IodmFyIGk9bysxO2k8dC5sZW5ndGg7aSsrKWlmKHQuc3RhcnQoaSktdC5lbmQoaS0xKT49Mil7bj10LmVuZChpLTEpO2JyZWFrfWJyZWFrfWMuc3R5bGUud2lkdGg9bi9lLmR1cmF0aW9uKjEwMCtcIiVcIn19LEU9W1wiYnVmZmVyZWRDaGFuZ2VcIixcImNhY2hldXBkYXRlXCIsXCJlbmRlZFwiLFwidGltZXVwZGF0ZVwiXTtFLmZvckVhY2goKGZ1bmN0aW9uKHQpe2Uub24odCxrKX0pKSxlLm9uY2UoXCJkZXN0cm95XCIsKGZ1bmN0aW9uIHQoKXtlLnJlbW92ZUFsbFByb2dyZXNzRG90KCksZS5vZmYoXCJjYW5wbGF5XCIsZiksZS5vZmYoXCJ0aW1ldXBkYXRlXCIsXyksRS5mb3JFYWNoKChmdW5jdGlvbih0KXtlLm9mZih0LGspfSkpLGUub2ZmKFwiZGVzdHJveVwiLHQpfSkpfSkpfSxcIi4vc3JjL2NvbnRyb2wvcmVwbGF5LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvcmVwbGF5LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI9bigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIiksaT0obz1yKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307aS5kZWZhdWx0Lmluc3RhbGwoXCJyZXBsYXlcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9aS5kZWZhdWx0LnV0aWwsbj1lLmNvbmZpZy5jZW50ZXJCdG4/ZS5jb25maWcuY2VudGVyQnRuOnt9LG89dm9pZCAwLHI9dm9pZCAwLGE9dm9pZCAwLHM9dm9pZCAwO2lmKCEobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiaVBob25lIE9TIDlcIik+LTEpKXtpZihcImltZ1wiPT09bi50eXBlKXtpZihyPXQuY3JlYXRlRG9tKFwieGctcmVwbGF5XCIsJzxkaXYgY2xhc3M9XCJ4Z3BsYXllci1yZXBsYXktaW1nXCI+PC9kaXY+Jyx7fSxcInhncGxheWVyLXJlcGxheVwiKSwoYT1yLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItcmVwbGF5LWltZ1wiKSkuc3R5bGUuYmFja2dyb3VuZEltYWdlPSd1cmwoXCInK24udXJsLnJlcGxheSsnXCIpJyxuLndpZHRoJiZuLmhlaWdodCl7dmFyIGw9dm9pZCAwLGM9dm9pZCAwLHU9dm9pZCAwO1tcInB4XCIsXCJyZW1cIixcImVtXCIsXCJwdFwiLFwiZHBcIixcInZ3XCIsXCJ2aFwiLFwidm1cIixcIiVcIl0uZXZlcnkoKGZ1bmN0aW9uKGUpe3JldHVybiEobi53aWR0aC5pbmRleE9mKGUpPi0xJiZuLmhlaWdodC5pbmRleE9mKGUpPi0xKXx8KGw9cGFyc2VGbG9hdChuLndpZHRoLnNsaWNlKDAsbi53aWR0aC5pbmRleE9mKGUpKS50cmltKCkpLGM9cGFyc2VGbG9hdChuLmhlaWdodC5zbGljZSgwLG4uaGVpZ2h0LmluZGV4T2YoZSkpLnRyaW0oKSksdT1lLCExKX0pKSxhLnN0eWxlLndpZHRoPVwiXCIrbCt1LGEuc3R5bGUuaGVpZ2h0PVwiXCIrYyt1LGEuc3R5bGUuYmFja2dyb3VuZFNpemU9XCJcIitsK3UrXCIgXCIrYyt1LGEuc3R5bGUubWFyZ2luPVwiLVwiK2MvMit1K1wiIGF1dG8gYXV0byAtXCIrbC8yK3V9fWVsc2Ugbz17cmVwbGF5Om4ucmVwbGF5UGF0aD9uLnJlcGxheVBhdGg6XCJNOC4yMjcwODM2MiwxMy44NzU3MjM0IEwxMS4yNjc3MzcxLDEyLjY0NzIxOTYgQzExLjc3OTgwNjcsMTIuNDQwMzMwMSAxMi4zNjI2MzgxLDEyLjY4NzcyNzMgMTIuNTY5NTI3NiwxMy4xOTk3OTY5IEwxMi45NDQxMzQyLDE0LjEyNjk4MDcgQzEzLjE1MTAyMzcsMTQuNjM5MDUwMiAxMi45MDM2MjY0LDE1LjIyMTg4MTYgMTIuMzkxNTU2OSwxNS40Mjg3NzEyIEw2LjgyODQ1MzgsMTcuNjc2NDEwNyBMNS45MDEyNjk5NSwxOC4wNTEwMTczIEM1LjM4OTIwMDQ0LDE4LjI1NzkwNjggNC44MDYzNjkwMSwxOC4wMTA1MDk2IDQuNTk5NDc5NSwxNy40OTg0NCBMMS45NzcyMzMzNSwxMS4wMDgxNTMxIEMxLjc3MDM0Mzg0LDEwLjQ5NjA4MzYgMi4wMTc3NDExLDkuOTEzMjUyMTMgMi41Mjk4MTA2MSw5LjcwNjM2MjYyIEwzLjQ1Njk5NDQ2LDkuMzMxNzU2MDIgQzMuOTY5MDYzOTYsOS4xMjQ4NjY1MiA0LjU1MTg5NTQsOS4zNzIyNjM3OCA0Ljc1ODc4NDkxLDkuODg0MzMzMjkgTDUuNjc4ODUxNjMsMTIuMTYxNTc4MyBDNy45OTU1MTcyNiw2LjY3NjY5MzQgMTMuMzk4Mzk1MSwzIDE5LjUsMyBDMjcuNzg0MjcxMiwzIDM0LjUsOS43MTU3Mjg3NSAzNC41LDE4IEMzNC41LDI2LjI4NDI3MTIgMjcuNzg0MjcxMiwzMyAxOS41LDMzIEMxNS40NTczNTk2LDMzIDExLjY2NTg2MDcsMzEuMzkxMjk0NiA4Ljg3MDA0NjkyLDI4LjU4MzE5OTEgQzguMjg1NTQ1NzEsMjcuOTk2MTMwMyA4LjI4NzYyNzE5LDI3LjA0NjM4NTEgOC44NzQ2OTYwMywyNi40NjE4ODM5IEM5LjQ2MTc2NDg4LDI1Ljg3NzM4MjcgMTAuNDExNTEwMSwyNS44Nzk0NjQxIDEwLjk5NjAxMTMsMjYuNDY2NTMzIEMxMy4yMzQ0MzI3LDI4LjcxNDc4NzUgMTYuMjYzNTAzLDMwIDE5LjUsMzAgQzI2LjEyNzQxNywzMCAzMS41LDI0LjYyNzQxNyAzMS41LDE4IEMzMS41LDExLjM3MjU4MyAyNi4xMjc0MTcsNiAxOS41LDYgQzE0LjQxODM3NzIsNiA5Ljk0MjE0NDgzLDkuMTg3ODM4MTEgOC4yMjcwODM2MiwxMy44NzU3MjM0IFpcIn0scz0ocj10LmNyZWF0ZURvbShcInhnLXJlcGxheVwiLCdcXG4gICAgICAgICAgPHN2ZyBjbGFzcz1cInhncGxheWVyLXJlcGxheS1zdmdcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCI3OFwiIGhlaWdodD1cIjc4XCIgdmlld2JveD1cIjAgMCA3OCA3OFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGQ9XCInK28ucmVwbGF5KydcIj48L3BhdGg+XFxuICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICA8eGctcmVwbGF5LXR4dCBjbGFzcz1cInhncGxheWVyLXJlcGxheS10eHRcIj7ph43mkq08L3hnLXJlcGxheS10eHQ+XFxuICAgICAgICAgICcse30sXCJ4Z3BsYXllci1yZXBsYXlcIikpLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItcmVwbGF5LXN2Z1wiKTt2YXIgZD1lLnJvb3Q7ZC5hcHBlbmRDaGlsZChyKSxlLm9uKFwiZW5kZWRcIixwKSwoc3x8YSkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKGZ1bmN0aW9uKG4pe24ucHJldmVudERlZmF1bHQoKSx0LnJlbW92ZUNsYXNzKGQsXCJyZXBsYXlcIiksZS5yZXBsYXkoKX0pKSxlLm9uY2UoXCJkZXN0cm95XCIsKGZ1bmN0aW9uIHQoKXtlLm9mZihcImVuZGVkXCIscCksZS5vZmYoXCJkZXN0cm95XCIsdCl9KSl9ZnVuY3Rpb24gcCgpe2lmKFwiaW1nXCI9PT1uLnR5cGUpYS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9J3VybChcIicrbi51cmwucmVwbGF5KydcIiknO2Vsc2V7ci5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLXJlcGxheS10eHRcIikudGV4dENvbnRlbnQ9ZS5sYW5nLlJFUExBWTt2YXIgbz1yLnF1ZXJ5U2VsZWN0b3IoXCJwYXRoXCIpLGk9d2luZG93LmdldENvbXB1dGVkU3R5bGUobykuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcIm5vbmVcIiE9PWkmJm8uc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsaSl9ZS5jb25maWcubG9vcHx8dC5hZGRDbGFzcyhkLFwicmVwbGF5XCIpfX0pKX0sXCIuL3NyYy9jb250cm9sL3JvdGF0ZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL3JvdGF0ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwicm90YXRlXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZih0aGlzLmNvbmZpZy5yb3RhdGUpeyEwPT09dGhpcy5jb25maWcucm90YXRlJiYodGhpcy5jb25maWcucm90YXRlPXt9KTt2YXIgdD1pLmRlZmF1bHQudXRpbCxuPXQuY3JlYXRlRG9tKFwieGctcm90YXRlXCIsJzx4Zy1pY29uIGNsYXNzPVwieGdwbGF5ZXItaWNvbiB4Z3BsYXllci1yb3RhdGUtaW1nXCI+PC94Zy1pY29uPicse30sXCJ4Z3BsYXllci1yb3RhdGVcIiksbz1lLmNvbmZpZy5sYW5nJiZcInpoLWNuXCI9PT1lLmNvbmZpZy5sYW5nP1wi5peL6L2sXCI6XCJSb3RhdGVcIixyPXQuY3JlYXRlRG9tKFwieGctdGlwc1wiLG8se30sXCJ4Z3BsYXllci10aXBzXCIpO24uYXBwZW5kQ2hpbGQociksZS5jb250cm9scy5hcHBlbmRDaGlsZChuKTt2YXIgYT0wO2Uucm90YXRlPWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOjEsbj1lLnJvb3Qub2Zmc2V0V2lkdGgsbz1lLnJvb3Qub2Zmc2V0SGVpZ2h0O2UuY29uZmlnLnJvdGF0ZS5pbm5lclJvdGF0ZXx8KGUucm9vdC5zdHlsZS53aWR0aD1vK1wicHhcIixlLnJvb3Quc3R5bGUuaGVpZ2h0PW4rXCJweFwiKTt2YXIgcj1lLmNvbmZpZy5yb3RhdGUuY2xvY2t3aXNlPzE6LTEsaT12b2lkIDA7aT0uMjU9PT0oYT0oYSsxKy4yNSpyKnQpJTEpfHwuNzU9PT1hPyhlLmNvbmZpZy5yb3RhdGUuaW5uZXJSb3RhdGUsKG8vbikudG9GaXhlZCgyKSk6MSxlLnZpZGVvLnN0eWxlLnRyYW5zZm9ybU9yaWdpbj1cImNlbnRlciBjZW50ZXJcIixlLnZpZGVvLnN0eWxlLnRyYW5zZm9ybT1cInJvdGF0ZShcIithK1widHVybikgc2NhbGUoXCIraStcIilcIixlLnZpZGVvLnN0eWxlLndlYktpdFRyYW5zZm9ybT1cInJvdGF0ZShcIithK1widHVybikgc2NhbGUoXCIraStcIilcIixlLmVtaXQoXCJyb3RhdGVcIiwzNjAqYSl9LG4uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwoZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksci5zdHlsZS5sZWZ0PVwiNTAlXCI7dmFyIG49ci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxvPWUucm9vdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtuLnJpZ2h0Pm8ucmlnaHQmJihyLnN0eWxlLmxlZnQ9LW4ucmlnaHQrby5yaWdodCsxNitcInB4XCIpfSkpLG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKGZ1bmN0aW9uKCl7ZS5yb3RhdGUoKX0pKX19KSl9LFwiLi9zcmMvY29udHJvbC9zY3JlZW5TaG90LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL3NjcmVlblNob3QuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI9bigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIiksaT0obz1yKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307aS5kZWZhdWx0Lmluc3RhbGwoXCJzY3JlZW5TaG90XCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWkuZGVmYXVsdC51dGlsO2lmKGUuY29uZmlnLnNjcmVlblNob3Qpe3ZhciBuPXQuY3JlYXRlRG9tKFwieGctc2NyZWVuU2hvdFwiLCc8cCBjbGFzcz1cIm5hbWVcIj48c3Bhbj7miKrlm748L3NwYW4+PC9wPicse3RhYmluZGV4OjExfSxcInhncGxheWVyLXNjcmVlblNob3RcIiksbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLHI9by5nZXRDb250ZXh0KFwiMmRcIiksYT1uZXcgSW1hZ2U7by53aWR0aD10aGlzLmNvbmZpZy53aWR0aHx8NjAwLG8uaGVpZ2h0PXRoaXMuY29uZmlnLmhlaWdodHx8MzM3LjUsZS5jb250cm9scy5hcHBlbmRDaGlsZChuKTtbXCJjbGlja1wiLFwidG91Y2hzdGFydFwiXS5mb3JFYWNoKChmdW5jdGlvbih0KXtuLmFkZEV2ZW50TGlzdGVuZXIodCwoZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksYS5vbmxvYWQ9KHIuZHJhd0ltYWdlKGUudmlkZW8sMCwwLG8ud2lkdGgsby5oZWlnaHQpLGEuc2V0QXR0cmlidXRlKFwiY3Jvc3NPcmlnaW5cIixcImFub255bW91c1wiKSxhLnNyYz1vLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiKS5yZXBsYWNlKFwiaW1hZ2UvcG5nXCIsXCJpbWFnZS9vY3RldC1zdHJlYW1cIiksdm9pZCBmdW5jdGlvbihlLHQpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO24uaHJlZj1lLG4uZG93bmxvYWQ9dDt2YXIgbz1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO28uaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCEwLCExLHdpbmRvdywwLDAsMCwwLDAsITEsITEsITEsITEsMCxudWxsKSxuLmRpc3BhdGNoRXZlbnQobyl9KGEuc3JjLnJlcGxhY2UoL15kYXRhOmltYWdlXFwvW147XSsvLFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIiksXCLmiKrlm74ucG5nXCIpKX0pKX0pKX19KSl9LFwiLi9zcmMvY29udHJvbC90ZXh0VHJhY2suanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC90ZXh0VHJhY2suanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcInRleHRUcmFja1wiLChmdW5jdGlvbigpe2lmKC0xIT09bmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiQ2hyb21lXCIpKXt2YXIgZT10aGlzLHQ9aS5kZWZhdWx0LnV0aWwsbj0oaS5kZWZhdWx0LnNuaWZmZXIsdC5jcmVhdGVEb20oXCJ4Zy10ZXh0VHJhY2tcIixcIlwiLHt0YWJpbmRleDo3fSxcInhncGxheWVyLXRleHRUcmFja1wiKSksbz1lLmNvbnRyb2xzLHI9ZS5jb25maWcudGV4dFRyYWNrO3ImJkFycmF5LmlzQXJyYXkocikmJnIubGVuZ3RoPjEmJih0LmFkZENsYXNzKGUucm9vdCxcInhncGxheWVyLWlzLXRleHRUcmFja1wiKSxlLm9uKFwiY2FucGxheVwiLChmdW5jdGlvbigpe3ZhciBpPVtcIjx1bD5cIl07aS5wdXNoKFwiPGxpIGNsYXNzPScnfSc+5YWz6ZetPC9saT5cIiksci5mb3JFYWNoKChmdW5jdGlvbihlKXtpLnB1c2goXCI8bGkgY2xhc3M9J1wiKyhlLmRlZmF1bHQ/XCJ0ZXh0VHJhY2tcIjpcIlwiKStcIic+XCIrZS5sYWJlbCtcIjwvbGk+XCIpfSkpO3ZhciBhPWUuY29uZmlnLmxhbmcmJlwiemgtY25cIj09PWUuY29uZmlnLmxhbmc/XCLlrZfluZVcIjpcIkNhcHRpb25cIjtpLnB1c2goJzwvdWw+PHAgY2xhc3M9XCJuYW1lXCI+PGVtPicrYStcIjwvZW0+PC9wPlwiKTt2YXIgcz1vLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItdGV4dFRyYWNrXCIpO3M/KHMuaW5uZXJIVE1MPWkuam9pbihcIlwiKSxzLnF1ZXJ5U2VsZWN0b3IoXCIubmFtZVwiKS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLChmdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKSx0LmFkZENsYXNzKGUucm9vdCxcInhncGxheWVyLXRleHRUcmFjay1hY3RpdmVcIikscy5mb2N1cygpfSkpKToobi5pbm5lckhUTUw9aS5qb2luKFwiXCIpLG4ucXVlcnlTZWxlY3RvcihcIi5uYW1lXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsKGZ1bmN0aW9uKG8pe28ucHJldmVudERlZmF1bHQoKSxvLnN0b3BQcm9wYWdhdGlvbigpLHQuYWRkQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItdGV4dFRyYWNrLWFjdGl2ZVwiKSxuLmZvY3VzKCl9KSksby5hcHBlbmRDaGlsZChuKSl9KSkpLFtcInRvdWNoZW5kXCIsXCJjbGlja1wiXS5mb3JFYWNoKChmdW5jdGlvbihvKXtuLmFkZEV2ZW50TGlzdGVuZXIobywoZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCk7dmFyIG89bi50YXJnZXR8fG4uc3JjRWxlbWVudDtpZihvJiZcImxpXCI9PT1vLnRhZ05hbWUudG9Mb2NhbGVMb3dlckNhc2UoKSl7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChvLnBhcmVudE5vZGUuY2hpbGROb2RlcywoZnVuY3Rpb24oZSl7dC5yZW1vdmVDbGFzcyhlLFwidGV4dFRyYWNrXCIpfSkpLHQuYWRkQ2xhc3MobyxcInRleHRUcmFja1wiKTt2YXIgaT1lLnJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJUcmFja1wiKTtcIuWFs+mXrVwiPT09by5pbm5lckhUTUw/KGlbMF0udHJhY2subW9kZT1cImhpZGRlblwiLHQucmVtb3ZlQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItdGV4dFRyYWNrLWFjdGl2ZVwiKSk6KHQuaGFzQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItdGV4dFRyYWNrLWFjdGl2ZVwiKXx8dC5hZGRDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci10ZXh0VHJhY2stYWN0aXZlXCIpLGlbMF0udHJhY2subW9kZT1cInNob3dpbmdcIixyLnNvbWUoKGZ1bmN0aW9uKGUpe2lmKGUubGFiZWw9PT1vLmlubmVySFRNTClyZXR1cm4gaVswXS5zcmM9ZS5zcmMsZS5raW5kJiYoaVswXS5raW5kPWUua2luZCksaVswXS5sYWJlbD1lLmxhYmVsLGUuc3JjbGFuZyYmKGlbMF0uc3JjbGFuZz1lLnNyY2xhbmcpLCEwfSkpLGUuZW1pdChcInRleHRUcmFja0NoYW5nZVwiLG8uaW5uZXJIVE1MKSl9fSksITEpfSkpLG4uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwoZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksdC5yZW1vdmVDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci10ZXh0VHJhY2stYWN0aXZlXCIpfSkpfX0pKX0sXCIuL3NyYy9jb250cm9sL3RpbWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvdGltZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcInRpbWVcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9aS5kZWZhdWx0LnV0aWwsbj10LmZvcm1hdCxvPXQuY3JlYXRlRG9tKFwieGctdGltZVwiLFwiPHNwYW4+XCIrKGUuY3VycmVudFRpbWV8fG4oMCkpK1wiPC9zcGFuPjxlbT5cIisoZS5kdXJhdGlvbnx8bigwKSkrXCI8L2VtPlwiLHt9LFwieGdwbGF5ZXItdGltZVwiKTtlLmNvbnRyb2xzLmFwcGVuZENoaWxkKG8pO3ZhciByPWZ1bmN0aW9uKCl7XCJhdWRpb1wiPT09ZS52aWRlb0NvbmZpZy5tZWRpYVR5cGUmJmUuaXNQcm9ncmVzc01vdmluZyYmZS5kYXNofHwoby5pbm5lckhUTUw9XCI8c3Bhbj5cIituKGUuY3VycmVudFRpbWV8fDApK1wiPC9zcGFuPjxlbT5cIituKGUuZHVyYXRpb24pKX07ZS5vbihcImR1cmF0aW9uY2hhbmdlXCIsciksZS5vbihcInRpbWV1cGRhdGVcIixyKSxlLm9uY2UoXCJkZXN0cm95XCIsKGZ1bmN0aW9uIHQoKXtlLm9mZihcImR1cmF0aW9uY2hhbmdlXCIsciksZS5vZmYoXCJ0aW1ldXBkYXRlXCIsciksZS5vZmYoXCJkZXN0cm95XCIsdCl9KSl9KSl9LFwiLi9zcmMvY29udHJvbC92b2x1bWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC92b2x1bWUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89aShuKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSkscj1pKG4oLyohIC4uL3V0aWxzL3N2ZyAqL1wiLi9zcmMvdXRpbHMvc3ZnLmpzXCIpKTtmdW5jdGlvbiBpKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1vLmRlZmF1bHQuaW5zdGFsbChcInZvbHVtZVwiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1vLmRlZmF1bHQudXRpbCxuPW8uZGVmYXVsdC5zbmlmZmVyO2Z1bmN0aW9uIGkoKXtlLmNvbmZpZy5hdXRvcGxheSYmZS5jb25maWcuYXV0b3BsYXlNdXRlZD9lLnZvbHVtZT0wOmUudm9sdW1lPWUuY29uZmlnLnZvbHVtZX1lLmNvbmZpZy5hdXRvcGxheU11dGVkJiYoZS5jb25maWcudm9sdW1lPWUuY29uZmlnLmF1dG9wbGF5PzA6ZS5jb25maWcudm9sdW1lKSxlLm9uY2UoXCJjYW5wbGF5XCIsaSk7dmFyIGE9ZS5jb25maWcudm9sdW1lO2lmKFwibW9iaWxlXCIhPT1uLmRldmljZSl7dmFyIHM9e211dGVkOlwiTTkyMC40IDQzOS44MDhsLTEwOC41NDQtMTA5LjA1Ni03Mi43MDQgNzIuNzA0IDEwOS41NjggMTA4LjU0NC0xMDkuMDU2IDEwOC41NDQgNzIuNzA0IDcyLjcwNCAxMDguMDMyLTEwOS41NjggMTA4LjU0NCAxMDkuMDU2IDcyLjcwNC03Mi43MDQtMTA5LjU2OC0xMDguMDMyIDEwOS4wNTYtMTA4LjU0NC03Mi43MDQtNzIuNzA0LTEwOC4wMzIgMTA5LjU2OHpcIixzbWFsbDpcIk03OTUuNjQ4IDY5My4yNDhsLTcyLjcwNC03Mi43MDRjMjcuNzU2LTI3Ljc4OSA0NC45MjEtNjYuMTYyIDQ0LjkyMS0xMDguNTQ0cy0xNy4xNjUtODAuNzU1LTQ0LjkyMi0xMDguNTQ2bDAuMDAyIDAuMDAyIDcyLjcwNC03Mi43MDRjNDYuNzEzIDQ2LjIzNSA3NS42MzkgMTEwLjM2MyA3NS42MzkgMTgxLjI0OHMtMjguOTI2IDEzNS4wMTMtNzUuNjE3IDE4MS4yMjdsLTAuMDIxIDAuMDIxek03OTUuNjQ4IDY5My4yNDhsLTcyLjcwNC03Mi43MDRjMjcuNzU2LTI3Ljc4OSA0NC45MjEtNjYuMTYyIDQ0LjkyMS0xMDguNTQ0cy0xNy4xNjUtODAuNzU1LTQ0LjkyMi0xMDguNTQ2bDAuMDAyIDAuMDAyIDcyLjcwNC03Mi43MDRjNDYuNzEzIDQ2LjIzNSA3NS42MzkgMTEwLjM2MyA3NS42MzkgMTgxLjI0OHMtMjguOTI2IDEzNS4wMTMtNzUuNjE3IDE4MS4yMjdsLTAuMDIxIDAuMDIxelwiLGxhcmdlOlwiTTk0MC42MzIgODM3LjYzMmwtNzIuMTkyLTcyLjE5MmM2NS4xMTQtNjQuNzQ1IDEwNS40MTItMTU0LjM4NiAxMDUuNDEyLTI1My40NHMtNDAuMjk5LTE4OC42OTUtMTA1LjM5Ni0yNTMuNDI0bC0wLjAxNi0wLjAxNiA3Mi4xOTItNzIuMTkyYzgzLjYzOSA4My4xOTcgMTM1LjQwMSAxOTguMzcgMTM1LjQwMSAzMjUuNjMycy01MS43NjIgMjQyLjQzNC0xMzUuMzgxIDMyNS42MTJsLTAuMDIwIDAuMDIwek03OTUuNjQ4IDY5My4yNDhsLTcyLjcwNC03Mi43MDRjMjcuNzU2LTI3Ljc4OSA0NC45MjEtNjYuMTYyIDQ0LjkyMS0xMDguNTQ0cy0xNy4xNjUtODAuNzU1LTQ0LjkyMi0xMDguNTQ2bDAuMDAyIDAuMDAyIDcyLjcwNC03Mi43MDRjNDYuNzEzIDQ2LjIzNSA3NS42MzkgMTEwLjM2MyA3NS42MzkgMTgxLjI0OHMtMjguOTI2IDEzNS4wMTMtNzUuNjE3IDE4MS4yMjdsLTAuMDIxIDAuMDIxelwifSxsPWZ1bmN0aW9uKGUpe3JldHVybiAwPT09ZT9cIm11dGVkXCI6ZTwuNT9cInNtYWxsXCI6XCJsYXJnZVwifSxjPXNbbChhKV0sdT1zW2woYSldLGQ9dC5jcmVhdGVEb20oXCJ4Zy12b2x1bWVcIiwnPHhnLWljb24gY2xhc3M9XCJ4Z3BsYXllci1pY29uXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTAyNFwiIGhlaWdodD1cIjEwMjRcIiB2aWV3Qm94PVwiMCAwIDEwMjQgMTAyNFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggdHJhbnNmb3JtPVwic2NhbGUoMC4wMjIwNjI1IDAuMDIyMDYyNSlcIiBkPVwiTTM1OC40IDM1OC40aC0yMDQuOHYzMDcuMmgyMDQuOGwyNTYgMjU2di04MTkuMmwtMjU2IDI1NnpcIj48L3BhdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCB0cmFuc2Zvcm09XCJzY2FsZSgwLjAyMjA2MjUgMC4wMjIwNjI1KVwiIGQ9XCInK3UrJ1wiPjwvcGF0aD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94Zy1pY29uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4Zy1zbGlkZXIgY2xhc3M9XCJ4Z3BsYXllci1zbGlkZXJcIiB0YWJpbmRleD1cIjJcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhnLWJhciBjbGFzcz1cInhncGxheWVyLWJhclwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhnLWRyYWcgY2xhc3M9XCJ4Z3BsYXllci1kcmFnXCI+PC94Zy1kcmFnPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hnLWJhcj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hnLXNsaWRlcj4nLHt9LFwieGdwbGF5ZXItdm9sdW1lXCIpO2UuY29udHJvbHMuYXBwZW5kQ2hpbGQoZCk7dmFyIHA9dm9pZCAwLGY9ZC5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLXNsaWRlclwiKSxoPWQucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1iYXJcIiksZz1kLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItZHJhZ1wiKSx2PWQucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1pY29uXCIpO2cuc3R5bGUuaGVpZ2h0PTEwMCplLmNvbmZpZy52b2x1bWUrXCIlXCI7dmFyIG09ZC5xdWVyeVNlbGVjdG9yQWxsKFwicGF0aFwiKVsxXSx5PW5ldyByLmRlZmF1bHQoe3Byb2dyZXNzOmZ1bmN0aW9uKGUsdCl7dmFyIG49eS50b1NWR1N0cmluZyhlKTttLnNldEF0dHJpYnV0ZShcImRcIixuKSxjPW59LGZyb206Yyx0bzpzLmxhcmdlfSksYj1udWxsO2Yudm9sdW1lPWUuY29uZmlnLnZvbHVtZSxbXCJ0b3VjaHN0YXJ0XCIsXCJtb3VzZWRvd25cIl0uZm9yRWFjaCgoZnVuY3Rpb24obil7aC5hZGRFdmVudExpc3RlbmVyKG4sKGZ1bmN0aW9uKG4pe24ucHJldmVudERlZmF1bHQoKSxuLnN0b3BQcm9wYWdhdGlvbigpLGUudmlkZW8ubXV0ZWQ9ITEsZi5mb2N1cygpLHQuZXZlbnQobikscD1oLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtuLmNsaWVudFg7dmFyIG89bi5jbGllbnRZLHI9Zy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQsaT0hMSxhPWZ1bmN0aW9uKG4pe24ucHJldmVudERlZmF1bHQoKSxuLnN0b3BQcm9wYWdhdGlvbigpLHQuZXZlbnQobiksaT0hMDt2YXIgYT1yLW4uY2xpZW50WStvLHM9YS9wO2cuc3R5bGUuaGVpZ2h0PWErXCJweFwiLGUudm9sdW1lPU1hdGgubWF4KE1hdGgubWluKHMsMSksLjAxKX0scz1mdW5jdGlvbiBuKG8pe2lmKG8ucHJldmVudERlZmF1bHQoKSxvLnN0b3BQcm9wYWdhdGlvbigpLHQuZXZlbnQobyksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixhKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLGEpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLG4pLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIixuKSxifHwoYj1oLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKSwhaSl7dmFyIHI9Yi5oZWlnaHQtKG8uY2xpZW50WS1iLnRvcCkscz1yL2IuaGVpZ2h0O2cuc3R5bGUuaGVpZ2h0PXIrXCJweFwiLHM8PTAmJihlLnZvbHVtZT4wP2cudm9sdW1lPWUudmlkZW8udm9sdW1lOnM9Zy52b2x1bWUpLGUudm9sdW1lPU1hdGgubWF4KE1hdGgubWluKHMsMSksLjAxKX1mLnZvbHVtZT1lLnZvbHVtZSxpPSExfTtyZXR1cm4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixhKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLGEpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLHMpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIixzKSwhMX0pKX0pKSxbXCJ0b3VjaHN0YXJ0XCIsXCJtb3VzZWRvd25cIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7di5hZGRFdmVudExpc3RlbmVyKHQsKGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLGUudmlkZW8ubXV0ZWQ9ITEsMD09PWUudm9sdW1lP2Uudm9sdW1lPWYudm9sdW1lOmUudm9sdW1lPTB9KSl9KSksdi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLChmdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKSx0LmFkZENsYXNzKGUucm9vdCxcInhncGxheWVyLXZvbHVtZS1hY3RpdmVcIiksZC5mb2N1cygpfSkpLGQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwoZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksdC5yZW1vdmVDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci12b2x1bWUtYWN0aXZlXCIpfSkpLGQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwoZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksdC5yZW1vdmVDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci12b2x1bWUtYWN0aXZlXCIpfSkpO3ZhciB4PW51bGw7ZS5vbihcInZvbHVtZWNoYW5nZVwiLFQpLGUub25jZShcImRlc3Ryb3lcIiwoZnVuY3Rpb24gdCgpe2Uub2ZmKFwiY2FucGxheVwiLGkpLGUub2ZmKFwidm9sdW1lY2hhbmdlXCIsVCksZS5vZmYoXCJkZXN0cm95XCIsdCl9KSl9ZWxzZXt2YXIgdz17bXV0ZWQ6XCJNOTIwLjQgNDM5LjgwOGwtMTA4LjU0NC0xMDkuMDU2LTcyLjcwNCA3Mi43MDQgMTA5LjU2OCAxMDguNTQ0LTEwOS4wNTYgMTA4LjU0NCA3Mi43MDQgNzIuNzA0IDEwOC4wMzItMTA5LjU2OCAxMDguNTQ0IDEwOS4wNTYgNzIuNzA0LTcyLjcwNC0xMDkuNTY4LTEwOC4wMzIgMTA5LjA1Ni0xMDguNTQ0LTcyLjcwNC03Mi43MDQtMTA4LjAzMiAxMDkuNTY4elwiLGxhcmdlOlwiTTk0MC42MzIgODM3LjYzMmwtNzIuMTkyLTcyLjE5MmM2NS4xMTQtNjQuNzQ1IDEwNS40MTItMTU0LjM4NiAxMDUuNDEyLTI1My40NHMtNDAuMjk5LTE4OC42OTUtMTA1LjM5Ni0yNTMuNDI0bC0wLjAxNi0wLjAxNiA3Mi4xOTItNzIuMTkyYzgzLjYzOSA4My4xOTcgMTM1LjQwMSAxOTguMzcgMTM1LjQwMSAzMjUuNjMycy01MS43NjIgMjQyLjQzNC0xMzUuMzgxIDMyNS42MTJsLTAuMDIwIDAuMDIwek03OTUuNjQ4IDY5My4yNDhsLTcyLjcwNC03Mi43MDRjMjcuNzU2LTI3Ljc4OSA0NC45MjEtNjYuMTYyIDQ0LjkyMS0xMDguNTQ0cy0xNy4xNjUtODAuNzU1LTQ0LjkyMi0xMDguNTQ2bDAuMDAyIDAuMDAyIDcyLjcwNC03Mi43MDRjNDYuNzEzIDQ2LjIzNSA3NS42MzkgMTEwLjM2MyA3NS42MzkgMTgxLjI0OHMtMjguOTI2IDEzNS4wMTMtNzUuNjE3IDE4MS4yMjdsLTAuMDIxIDAuMDIxelwifSxfPWZ1bmN0aW9uKGUpe3JldHVybiAwPT09ZT9cIm11dGVkXCI6XCJsYXJnZVwifSxrPXdbXyhhKV0sRT13W18oYSldLEM9dC5jcmVhdGVEb20oXCJ4Zy12b2x1bWVcIiwnPHhnLWljb24gY2xhc3M9XCJ4Z3BsYXllci1pY29uXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxMDI0XCIgaGVpZ2h0PVwiMTAyNFwiIHZpZXdCb3g9XCIwIDAgMTAyNCAxMDI0XCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIHRyYW5zZm9ybT1cInNjYWxlKDAuMDIyMDYyNSAwLjAyMjA2MjUpXCIgZD1cIk0zNTguNCAzNTguNGgtMjA0Ljh2MzA3LjJoMjA0LjhsMjU2IDI1NnYtODE5LjJsLTI1NiAyNTZ6XCI+PC9wYXRoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCB0cmFuc2Zvcm09XCJzY2FsZSgwLjAyMjA2MjUgMC4wMjIwNjI1KVwiIGQ9XCInK0UrJ1wiPjwvcGF0aD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveGctaWNvbj4nLHt9LFwieGdwbGF5ZXItdm9sdW1lXCIpO2UuY29udHJvbHMuYXBwZW5kQ2hpbGQoQyk7dmFyIFM9Qy5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLWljb25cIiksUD1DLnF1ZXJ5U2VsZWN0b3JBbGwoXCJwYXRoXCIpWzFdLGo9bmV3IHIuZGVmYXVsdCh7cHJvZ3Jlc3M6ZnVuY3Rpb24oZSx0KXt2YXIgbj1qLnRvU1ZHU3RyaW5nKGUpO1Auc2V0QXR0cmlidXRlKFwiZFwiLG4pLGs9bn0sZnJvbTprLHRvOncubGFyZ2V9KTtbXCJ0b3VjaGVuZFwiLFwibW91c2Vkb3duXCJdLmZvckVhY2goKGZ1bmN0aW9uKHQpe1MuYWRkRXZlbnRMaXN0ZW5lcih0LChmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxlLnZpZGVvLm11dGVkPyhlLnZpZGVvLm11dGVkPSExLGUudm9sdW1lPTEsai5yZXNldCh3LmxhcmdlLHcubXV0ZWQpLGs9dy5sYXJnZSk6KGUudm9sdW1lPTAsZS52aWRlby5tdXRlZD0hMCxqLnJlc2V0KHcubXV0ZWQsdy5sYXJnZSksaz13Lm11dGVkKX0pKX0pKX1mdW5jdGlvbiBUKCl7eCYmY2xlYXJUaW1lb3V0KHgpLHg9c2V0VGltZW91dCgoZnVuY3Rpb24oKXt5LnJlc2V0KHNbbChlLnZvbHVtZSldLGMpLGM9c1tsW2Uudm9sdW1lXV0scHx8KHA9aC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHR8fDc2KSxnLnN0eWxlLmhlaWdodD1lLnZvbHVtZSpwK1wicHhcIn0pLDUwKX19KSl9LFwiLi9zcmMvZXJyb3IuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvZXJyb3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigvKiEgLi4vcGFja2FnZS5qc29uICovXCIuL3BhY2thZ2UuanNvblwiKTtmdW5jdGlvbiByKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX12YXIgaT17bmV0d29yazp7Y29kZToxLG1zZzpcIuinhumikeS4i+i9vemUmeivr1wiLHJlbWFyazpcIuWPquimgeinhumikeS4i+i9vemUmeivr+WwseS9v+eUqOatpOexu+Wei++8jOaXoOiuuuaYr3ZpZGVv5pys6Lqr55qE6LaF5pe26L+Y5piveGhy55qE5YiG5q616K+35rGC6LaF5pe25oiW6ICF6LWE5rqQ5LiN5a2Y5ZyoXCJ9LG1zZTp7Y29kZToyLG1zZzpcIua1gei/veWKoOmUmeivr1wiLHJlbWFyazpcIui/veWKoOa1geeahOaXtuWAmeWmguaenOexu+Wei+S4jeWvueOAgeaXoOazleiiq+ato+ehruino+eggeWImeS8muinpuWPkeatpOexu+mUmeivr1wifSxwYXJzZTp7Y29kZTozLG1zZzpcIuino+aekOmUmeivr1wiLHJlbWFyazpcIm1wNOOAgWhsc+OAgWZsduaIkeS7rOmDveaYr+S9v+eUqGpz6L+b6KGM5qC85byP6Kej5p6Q77yM5aaC5p6c6Kej5p6Q5aSx6LSl5YiZ5Lya6Kem5Y+R5q2k57G76ZSZ6K+vXCJ9LGZvcm1hdDp7Y29kZTo0LG1zZzpcIuagvOW8j+mUmeivr1wiLHJlbWFyazpcIuWmguaenOa1j+iniOWZqOS4jeaUr+aMgeeahOagvOW8j+WvvOiHtOaSreaUvumUmeivr1wifSxkZWNvZGVyOntjb2RlOjUsbXNnOlwi6Kej56CB6ZSZ6K+vXCIscmVtYXJrOlwi5rWP6KeI5Zmo6Kej56CB5byC5bi45Lya5oqb5Ye65q2k57G75Z6L6ZSZ6K+vXCJ9LHJ1bnRpbWU6e2NvZGU6Nixtc2c6XCLor63ms5XplJnor69cIixyZW1hcms6XCLmkq3mlL7lmajor63ms5XplJnor69cIn0sdGltZW91dDp7Y29kZTo3LG1zZzpcIuaSreaUvui2heaXtlwiLHJlbWFyazpcIuaSreaUvui/h+eoi+S4reaXoOazleato+W4uOivt+axguS4i+S4gOS4quWIhuauteWvvOiHtOaSreaUvuS4reaWrVwifSxvdGhlcjp7Y29kZTo4LG1zZzpcIuWFtuS7lumUmeivr1wiLHJlbWFyazpcIuS4jeWPr+efpeeahOmUmeivr+aIluiiq+W/veeVpeeahOmUmeivr+exu+Wei1wifX07dC5kZWZhdWx0PWZ1bmN0aW9uIGUodCxuLGEscyxsLGMsdSxkKXt2YXIgcD1hcmd1bWVudHMubGVuZ3RoPjgmJnZvaWQgMCE9PWFyZ3VtZW50c1s4XT9hcmd1bWVudHNbOF06e2xpbmU6XCJcIixoYW5kbGU6XCJcIixtc2c6XCJcIix2ZXJzaW9uOlwiXCJ9O3IodGhpcyxlKTt2YXIgZj17fTtyZXR1cm4gZi5wbGF5ZXJWZXJzaW9uPW8udmVyc2lvbixmLmVycm9yVHlwZT10LGYuZG9tYWluPWRvY3VtZW50LmRvbWFpbixmLmR1cmF0aW9uPWEsZi5jdXJyZW50VGltZT1uLGYubmV0d29ya1N0YXRlPXMsZi5yZWFkeVN0YXRlPWwsZi5jdXJyZW50U3JjPXUsZi5zcmM9YyxmLmVuZGVkPWQsZi5lcnJkPXAsZi5leD0oaVt0XXx8e30pLm1zZyxmfSxlLmV4cG9ydHM9dC5kZWZhdWx0fSxcIi4vc3JjL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPU0obigvKiEgLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSkscj1NKG4oLyohIC4vY29udHJvbC92b2x1bWUuanMgKi9cIi4vc3JjL2NvbnRyb2wvdm9sdW1lLmpzXCIpKSxpPU0obigvKiEgLi9jb250cm9sL3RpbWUuanMgKi9cIi4vc3JjL2NvbnRyb2wvdGltZS5qc1wiKSksYT1NKG4oLyohIC4vY29udHJvbC90ZXh0VHJhY2suanMgKi9cIi4vc3JjL2NvbnRyb2wvdGV4dFRyYWNrLmpzXCIpKSxzPU0obigvKiEgLi9jb250cm9sL3NjcmVlblNob3QuanMgKi9cIi4vc3JjL2NvbnRyb2wvc2NyZWVuU2hvdC5qc1wiKSksbD1NKG4oLyohIC4vY29udHJvbC9yb3RhdGUuanMgKi9cIi4vc3JjL2NvbnRyb2wvcm90YXRlLmpzXCIpKSxjPU0obigvKiEgLi9jb250cm9sL3JlcGxheS5qcyAqL1wiLi9zcmMvY29udHJvbC9yZXBsYXkuanNcIikpLHU9TShuKC8qISAuL2NvbnRyb2wvcHJvZ3Jlc3MuanMgKi9cIi4vc3JjL2NvbnRyb2wvcHJvZ3Jlc3MuanNcIikpLGQ9TShuKC8qISAuL2NvbnRyb2wvcG9zdGVyLmpzICovXCIuL3NyYy9jb250cm9sL3Bvc3Rlci5qc1wiKSkscD1NKG4oLyohIC4vY29udHJvbC9wbGF5TmV4dC5qcyAqL1wiLi9zcmMvY29udHJvbC9wbGF5TmV4dC5qc1wiKSksZj1NKG4oLyohIC4vY29udHJvbC9wbGF5YmFja1JhdGUuanMgKi9cIi4vc3JjL2NvbnRyb2wvcGxheWJhY2tSYXRlLmpzXCIpKSxoPU0obigvKiEgLi9jb250cm9sL3BsYXkuanMgKi9cIi4vc3JjL2NvbnRyb2wvcGxheS5qc1wiKSksZz1NKG4oLyohIC4vY29udHJvbC9waXAuanMgKi9cIi4vc3JjL2NvbnRyb2wvcGlwLmpzXCIpKSx2PU0obigvKiEgLi9jb250cm9sL3BjLmpzICovXCIuL3NyYy9jb250cm9sL3BjLmpzXCIpKSxtPU0obigvKiEgLi9jb250cm9sL21vYmlsZS5qcyAqL1wiLi9zcmMvY29udHJvbC9tb2JpbGUuanNcIikpLHk9TShuKC8qISAuL2NvbnRyb2wvbG9nZ2VyLmpzICovXCIuL3NyYy9jb250cm9sL2xvZ2dlci5qc1wiKSksYj1NKG4oLyohIC4vY29udHJvbC9sb2NhbFByZXZpZXcuanMgKi9cIi4vc3JjL2NvbnRyb2wvbG9jYWxQcmV2aWV3LmpzXCIpKSx4PU0obigvKiEgLi9jb250cm9sL2xvYWRpbmcuanMgKi9cIi4vc3JjL2NvbnRyb2wvbG9hZGluZy5qc1wiKSksdz1NKG4oLyohIC4vY29udHJvbC9pMThuLmpzICovXCIuL3NyYy9jb250cm9sL2kxOG4uanNcIikpLF89TShuKC8qISAuL2NvbnRyb2wvZnVsbHNjcmVlbi5qcyAqL1wiLi9zcmMvY29udHJvbC9mdWxsc2NyZWVuLmpzXCIpKSxrPU0obigvKiEgLi9jb250cm9sL2ZsZXguanMgKi9cIi4vc3JjL2NvbnRyb2wvZmxleC5qc1wiKSksRT1NKG4oLyohIC4vY29udHJvbC9lcnJvci5qcyAqL1wiLi9zcmMvY29udHJvbC9lcnJvci5qc1wiKSksQz1NKG4oLyohIC4vY29udHJvbC9kb3dubG9hZC5qcyAqL1wiLi9zcmMvY29udHJvbC9kb3dubG9hZC5qc1wiKSksUz1NKG4oLyohIC4vY29udHJvbC9kZWZpbml0aW9uLmpzICovXCIuL3NyYy9jb250cm9sL2RlZmluaXRpb24uanNcIikpLFA9TShuKC8qISAuL2NvbnRyb2wvZGFubXUuanMgKi9cIi4vc3JjL2NvbnRyb2wvZGFubXUuanNcIikpLGo9TShuKC8qISAuL2NvbnRyb2wvY3NzRnVsbHNjcmVlbi5qcyAqL1wiLi9zcmMvY29udHJvbC9jc3NGdWxsc2NyZWVuLmpzXCIpKSxUPU0obigvKiEgLi9jb250cm9sL2NvbGxlY3QuanMgKi9cIi4vc3JjL2NvbnRyb2wvY29sbGVjdC5qc1wiKSk7ZnVuY3Rpb24gTShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19bigvKiEgLi9zdHlsZS9pbmRleC5zY3NzICovXCIuL3NyYy9zdHlsZS9pbmRleC5zY3NzXCIpO3ZhciBPPXt9O2Z1bmN0aW9uIEwoZSx0LG4pe3ZhciBvPWU7dC5tYXAoKGZ1bmN0aW9uKGUscil7b1tlXT1yPT10Lmxlbmd0aC0xP246b1tlXXx8e30sbz1vW2VdfSkpfUwoTyxbXCJjb250cm9sXCIsXCJjb2xsZWN0XCJdLFQuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcImNzc0Z1bGxzY3JlZW5cIl0sai5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwiZGFubXVcIl0sUC5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwiZGVmaW5pdGlvblwiXSxTLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJkb3dubG9hZFwiXSxDLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJlcnJvclwiXSxFLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJmbGV4XCJdLGsuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcImZ1bGxzY3JlZW5cIl0sXy5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwiaTE4blwiXSx3LmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJsb2FkaW5nXCJdLHguZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcImxvY2FsUHJldmlld1wiXSxiLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJsb2dnZXJcIl0seS5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwibW9iaWxlXCJdLG0uZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcInBjXCJdLHYuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcInBpcFwiXSxnLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJwbGF5XCJdLGguZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcInBsYXliYWNrUmF0ZVwiXSxmLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJwbGF5TmV4dFwiXSxwLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJwb3N0ZXJcIl0sZC5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwicHJvZ3Jlc3NcIl0sdS5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwicmVwbGF5XCJdLGMuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcInJvdGF0ZVwiXSxsLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJzY3JlZW5TaG90XCJdLHMuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcInRleHRUcmFja1wiXSxhLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJ0aW1lXCJdLGkuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcInZvbHVtZVwiXSxyLmRlZmF1bHQpLHQuZGVmYXVsdD1vLmRlZmF1bHQsZS5leHBvcnRzPXQuZGVmYXVsdH0sXCIuL3NyYy9wbGF5ZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3BsYXllci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKSxyPWZ1bmN0aW9uIGUodCxuLG8pe251bGw9PT10JiYodD1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxuKTtpZih2b2lkIDA9PT1yKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDplKGksbixvKX1pZihcInZhbHVlXCJpbiByKXJldHVybiByLnZhbHVlO3ZhciBhPXIuZ2V0O3JldHVybiB2b2lkIDAhPT1hP2EuY2FsbChvKTp2b2lkIDB9LGk9cChuKC8qISAuL3Byb3h5ICovXCIuL3NyYy9wcm94eS5qc1wiKSksYT1wKG4oLyohIC4vdXRpbHMvdXRpbCAqL1wiLi9zcmMvdXRpbHMvdXRpbC5qc1wiKSkscz1wKG4oLyohIC4vdXRpbHMvZGF0YWJhc2UgKi9cIi4vc3JjL3V0aWxzL2RhdGFiYXNlLmpzXCIpKSxsPXAobigvKiEgLi91dGlscy9zbmlmZmVyICovXCIuL3NyYy91dGlscy9zbmlmZmVyLmpzXCIpKSxjPXAobigvKiEgLi9lcnJvciAqL1wiLi9zcmMvZXJyb3IuanNcIikpLHU9cChuKC8qISBkcmFnZ2FiaWxseSAqL1wiLi9ub2RlX21vZHVsZXMvZHJhZ2dhYmlsbHkvZHJhZ2dhYmlsbHkuanNcIikpLGQ9bigvKiEgLi4vcGFja2FnZS5qc29uICovXCIuL3BhY2thZ2UuanNvblwiKTtmdW5jdGlvbiBwKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBmKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9dmFyIGg9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpO3ZhciBuPWYodGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbCh0aGlzLGUpKTtpZihuLmNvbmZpZz1hLmRlZmF1bHQuZGVlcENvcHkoe3dpZHRoOjYwMCxoZWlnaHQ6MzM3LjUsaWdub3JlczpbXSx3aGl0ZWxpc3Q6W10sbGFuZzooZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcImxhbmdcIil8fG5hdmlnYXRvci5sYW5ndWFnZXx8XCJ6aC1jblwiKS50b0xvY2FsZUxvd2VyQ2FzZSgpLGluYWN0aXZlOjNlMyx2b2x1bWU6LjYsY29udHJvbHM6ITAsY29udHJvbHNMaXN0OltcIm5vZG93bmxvYWRcIl19LGUpLG4udmVyc2lvbj1kLnZlcnNpb24sbi51c2VyVGltZXI9bnVsbCxuLndhaXRUaW1lcj1udWxsLG4uZGF0YWJhc2U9bmV3IHMuZGVmYXVsdCxuLmhpc3Rvcnk9W10sbi5pc1Byb2dyZXNzTW92aW5nPSExLG4ucm9vdD1hLmRlZmF1bHQuZmluZERvbShkb2N1bWVudCxcIiNcIituLmNvbmZpZy5pZCksbi5jb250cm9scz1hLmRlZmF1bHQuY3JlYXRlRG9tKFwieGctY29udHJvbHNcIixcIlwiLHt1bnNlbGVjdGFibGU6XCJvblwiLG9uc2VsZWN0c3RhcnQ6XCJyZXR1cm4gZmFsc2VcIn0sXCJ4Z3BsYXllci1jb250cm9sc1wiKSwhbi5yb290KXt2YXIgbz1uLmNvbmZpZy5lbDtpZighb3x8MSE9PW8ubm9kZVR5cGUpcmV0dXJuIG4uZW1pdChcImVycm9yXCIsbmV3IGMuZGVmYXVsdChcInVzZVwiLG4uY29uZmlnLnZpZCx7bGluZTozMixoYW5kbGU6XCJDb25zdHJ1Y3RvclwiLG1zZzpcImNvbnRhaW5lciBpZCBjYW4ndCBiZSBlbXB0eVwifSkpLCExLGYobiwhMSk7bi5yb290PW99aWYoYS5kZWZhdWx0LmFkZENsYXNzKG4ucm9vdCxcInhncGxheWVyIHhncGxheWVyLVwiK2wuZGVmYXVsdC5kZXZpY2UrXCIgeGdwbGF5ZXItbm9zdGFydCBcIisobi5jb25maWcuY29udHJvbHM/XCJcIjpcIm5vLWNvbnRyb2xzXCIpKSxuLnJvb3QuYXBwZW5kQ2hpbGQobi5jb250cm9scyksbi5jb25maWcuZmx1aWQ/KG4ucm9vdC5zdHlsZVtcIm1heC13aWR0aFwiXT1cIjEwMCVcIixuLnJvb3Quc3R5bGUud2lkdGg9XCIxMDAlXCIsbi5yb290LnN0eWxlLmhlaWdodD1cIjBcIixuLnJvb3Quc3R5bGVbXCJwYWRkaW5nLXRvcFwiXT0xMDAqbi5jb25maWcuaGVpZ2h0L24uY29uZmlnLndpZHRoK1wiJVwiLG4udmlkZW8uc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLG4udmlkZW8uc3R5bGUudG9wPVwiMFwiLG4udmlkZW8uc3R5bGUubGVmdD1cIjBcIik6KG4ucm9vdC5zdHlsZS53aWR0aD1uLmNvbmZpZy53aWR0aCtcInB4XCIsbi5yb290LnN0eWxlLmhlaWdodD1uLmNvbmZpZy5oZWlnaHQrXCJweFwiKSxuLmNvbmZpZy5leGVjQmVmb3JlUGx1Z2luc0NhbGwmJm4uY29uZmlnLmV4ZWNCZWZvcmVQbHVnaW5zQ2FsbC5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmNhbGwobixuKX0pKSxuLmNvbmZpZy5jb250cm9sU3R5bGUmJlwiU3RyaW5nXCI9PT1hLmRlZmF1bHQudHlwZU9mKG4uY29uZmlnLmNvbnRyb2xTdHlsZSkpe3ZhciByPW47ZmV0Y2goci5jb25maWcuY29udHJvbFN0eWxlLHttZXRob2Q6XCJHRVRcIixoZWFkZXJzOntBY2NlcHQ6XCJhcHBsaWNhdGlvbi9qc29uXCJ9fSkudGhlbigoZnVuY3Rpb24oZSl7ZS5vayYmZS5qc29uKCkudGhlbigoZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmKHIuY29uZmlnW3RdPWVbdF0pO3IucGx1Z2luc0NhbGwoKX0pKX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7Y29uc29sZS5sb2coXCJGZXRjaOmUmeivrzpcIitlKX0pKX1lbHNlIG4ucGx1Z2luc0NhbGwoKTtuLmV2LmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0PU9iamVjdC5rZXlzKGUpWzBdLG89bltlW3RdXTtvJiZuLm9uKHQsbyl9KSksW1wiZm9jdXNcIixcImJsdXJcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7bi5vbihlLG5bXCJvblwiK2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKV0pfSkpO3ZhciBpPW47cmV0dXJuIG4ubW91c2Vtb3ZlRnVuYz1mdW5jdGlvbigpe2kuZW1pdChcImZvY3VzXCIpLGkuY29uZmlnLmNsb3NlRm9jdXNWaWRlb0ZvY3VzfHxpLnZpZGVvLmZvY3VzKCl9LG4ucm9vdC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsbi5tb3VzZW1vdmVGdW5jKSxuLnBsYXlGdW5jPWZ1bmN0aW9uKCl7aS5lbWl0KFwiZm9jdXNcIiksaS5jb25maWcuY2xvc2VQbGF5VmlkZW9Gb2N1c3x8aS52aWRlby5mb2N1cygpfSxpLm9uY2UoXCJwbGF5XCIsbi5wbGF5RnVuYyksc2V0VGltZW91dCgoZnVuY3Rpb24oKXtuLmVtaXQoXCJyZWFkeVwiKX0pLDApLG4uY29uZmlnLmtleVNob3J0Y3V0JiZcIm9uXCIhPT1uLmNvbmZpZy5rZXlTaG9ydGN1dHx8W1widmlkZW9cIixcImNvbnRyb2xzXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe2lbZV0uYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwoZnVuY3Rpb24oZSl7aS5vbktleWRvd24oZSxpKX0pKX0pKSxuLmNvbmZpZy52aWRlb0luaXQmJmEuZGVmYXVsdC5oYXNDbGFzcyhuLnJvb3QsXCJ4Z3BsYXllci1ub3N0YXJ0XCIpJiZuLnN0YXJ0KCksbn1yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCxlKSxvKHQsW3trZXk6XCJzdGFydFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp0aGlzLmNvbmZpZy51cmwsbz10aGlzLnJvb3Qscj10aGlzO24mJlwiXCIhPT1ufHx0aGlzLmVtaXQoXCJ1cmxOdWxsXCIpLHRoaXMubG9nUGFyYW1zLnBsYXlTcmM9bix0aGlzLmNhblBsYXlGdW5jPWZ1bmN0aW9uKCl7dmFyIGU9ci52aWRlby5wbGF5KCk7dm9pZCAwIT09ZSYmZSYmZS50aGVuKChmdW5jdGlvbigpe3IuZW1pdChcImF1dG9wbGF5IHN0YXJ0ZWRcIil9KSkuY2F0Y2goKGZ1bmN0aW9uKCl7ci5lbWl0KFwiYXV0b3BsYXkgd2FzIHByZXZlbnRlZFwiKSx0LnV0aWwuYWRkQ2xhc3Moci5yb290LFwieGdwbGF5ZXItaXMtYXV0b3BsYXlcIil9KSksci5vZmYoXCJjYW5wbGF5XCIsci5jYW5QbGF5RnVuYyl9LFwiU3RyaW5nXCI9PT1hLmRlZmF1bHQudHlwZU9mKG4pP3RoaXMudmlkZW8uc3JjPW46bi5mb3JFYWNoKChmdW5jdGlvbih0KXtlLnZpZGVvLmFwcGVuZENoaWxkKGEuZGVmYXVsdC5jcmVhdGVEb20oXCJzb3VyY2VcIixcIlwiLHtzcmM6XCJcIit0LnNyYyx0eXBlOlwiXCIrKHQudHlwZXx8XCJcIil9KSl9KSksdGhpcy5sb2dQYXJhbXMucHQ9KG5ldyBEYXRlKS5nZXRUaW1lKCksdGhpcy5sb2dQYXJhbXMudnQ9dGhpcy5sb2dQYXJhbXMucHQsdGhpcy5sb2FkZWRkYXRhRnVuYz1mdW5jdGlvbigpe3IubG9nUGFyYW1zLnZ0PShuZXcgRGF0ZSkuZ2V0VGltZSgpLHIubG9nUGFyYW1zLnB0PnIubG9nUGFyYW1zLnZ0JiYoci5sb2dQYXJhbXMucHQ9ci5sb2dQYXJhbXMudnQpLHIubG9nUGFyYW1zLnZkPXIudmlkZW8uZHVyYXRpb259LHRoaXMub25jZShcImxvYWRlZGRhdGFcIix0aGlzLmxvYWRlZGRhdGFGdW5jKSx0aGlzLmNvbmZpZy5hdXRvcGxheSYmdGhpcy5vbihcImNhbnBsYXlcIix0aGlzLmNhblBsYXlGdW5jKSxvLmluc2VydEJlZm9yZSh0aGlzLnZpZGVvLG8uZmlyc3RDaGlsZCksc2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLmVtaXQoXCJjb21wbGV0ZVwiKX0pLDEpfX0se2tleTpcInJlbG9hZFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy52aWRlby5sb2FkKCksdGhpcy5yZWxvYWRGdW5jPWZ1bmN0aW9uKCl7dGhpcy5wbGF5KCl9LHRoaXMub25jZShcImxvYWRlZGRhdGFcIix0aGlzLnJlbG9hZEZ1bmMpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsbj0hKGFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdKXx8YXJndW1lbnRzWzBdLG89dGhpcyxpPXRoaXMucm9vdC5wYXJlbnROb2RlO2Zvcih2YXIgYSBpbiBjbGVhckludGVydmFsKHRoaXMuYnVsbGV0UmVzaXplVGltZXIpLHRoaXMuX2ludGVydmFsKWNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWxbYV0pLHRoaXMuX2ludGVydmFsW2FdPW51bGw7ZnVuY3Rpb24gcygpe2Zvcih2YXIgZSBpbiB0aGlzLmVtaXQoXCJkZXN0cm95XCIpLHRoaXMudmlkZW8ucmVtb3ZlQXR0cmlidXRlKFwic3JjXCIpLHRoaXMudmlkZW8ubG9hZCgpLG4mJmkucmVtb3ZlQ2hpbGQodGhpcy5yb290KSx0aGlzKWRlbGV0ZSB0aGlzW2VdO3RoaXMub2ZmKFwicGF1c2VcIixzKX10aGlzLmV2LmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuPU9iamVjdC5rZXlzKHQpWzBdLG89ZVt0W25dXTtvJiZlLm9mZihuLG8pfSkpLHRoaXMubG9hZGVkZGF0YUZ1bmMmJnRoaXMub2ZmKFwibG9hZGVkZGF0YVwiLHRoaXMubG9hZGVkZGF0YUZ1bmMpLHRoaXMucmVsb2FkRnVuYyYmdGhpcy5vZmYoXCJsb2FkZWRkYXRhXCIsdGhpcy5yZWxvYWRGdW5jKSx0aGlzLnJlcGxheUZ1bmMmJnRoaXMub2ZmKFwicGxheVwiLHRoaXMucmVwbGF5RnVuYyksdGhpcy5wbGF5RnVuYyYmdGhpcy5vZmYoXCJwbGF5XCIsdGhpcy5wbGF5RnVuYyksW1wiZm9jdXNcIixcImJsdXJcIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7ZS5vZmYodCxlW1wib25cIit0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSldKX0pKSx0aGlzLmNvbmZpZy5rZXlTaG9ydGN1dCYmXCJvblwiIT09dGhpcy5jb25maWcua2V5U2hvcnRjdXR8fFtcInZpZGVvXCIsXCJjb250cm9sc1wiXS5mb3JFYWNoKChmdW5jdGlvbih0KXtlW3RdJiZlW3RdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsKGZ1bmN0aW9uKGUpe28ub25LZXlkb3duKGUsbyl9KSl9KSksdGhpcy5wYXVzZWQ/cy5jYWxsKHRoaXMpOih0aGlzLnBhdXNlKCksdGhpcy5vbmNlKFwicGF1c2VcIixzKSkscih0LnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJkZXN0cm95XCIsdGhpcykuY2FsbCh0aGlzKX19LHtrZXk6XCJyZXBsYXlcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLl9yZXBsYXk7YS5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLWVuZGVkXCIpLHRoaXMubG9nUGFyYW1zPXtiYzowLGJ1X2FjdV90OjAscGxheWVkOltdLHB0OihuZXcgRGF0ZSkuZ2V0VGltZSgpLHZ0OihuZXcgRGF0ZSkuZ2V0VGltZSgpLHZkOjB9LHRoaXMubG9nUGFyYW1zLnB0PShuZXcgRGF0ZSkuZ2V0VGltZSgpLHRoaXMubG9nUGFyYW1zLnZ0PXRoaXMubG9nUGFyYW1zLnB0LHRoaXMucmVwbGF5RnVuYz1mdW5jdGlvbigpe2UubG9nUGFyYW1zLnZ0PShuZXcgRGF0ZSkuZ2V0VGltZSgpLGUubG9nUGFyYW1zLnB0PmUubG9nUGFyYW1zLnZ0JiYoZS5sb2dQYXJhbXMucHQ9ZS5sb2dQYXJhbXMudnQpLGUubG9nUGFyYW1zLnZkPWUudmlkZW8uZHVyYXRpb259LHRoaXMub25jZShcInBsYXlcIix0aGlzLnJlcGxheUZ1bmMpLHRoaXMubG9nUGFyYW1zLnBsYXlTcmM9dGhpcy52aWRlby5jdXJyZW50U3JjLHQmJnQgaW5zdGFuY2VvZiBGdW5jdGlvbj90KCk6KHRoaXMuY3VycmVudFRpbWU9MCx0aGlzLnBsYXkoKSl9fSx7a2V5OlwicGx1Z2luc0NhbGxcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsbj10aGlzO2lmKHQucGx1Z2lucyl7dmFyIG89dGhpcy5jb25maWcuaWdub3JlcztPYmplY3Qua2V5cyh0LnBsdWdpbnMpLmZvckVhY2goKGZ1bmN0aW9uKHIpe3ZhciBpPXQucGx1Z2luc1tyXTtvLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVybiByPT09ZX0pKXx8KFtcInBjXCIsXCJ0YWJsZXRcIixcIm1vYmlsZVwiXS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm4gZT09PXJ9KSk/cj09PWwuZGVmYXVsdC5kZXZpY2UmJnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7aS5jYWxsKG4sbil9KSwwKTppLmNhbGwoZSxlKSl9KSl9fX0se2tleTpcImdldFBJUFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yb290LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHQ9ZS50b3Asbj1lLmxlZnQsbz1hLmRlZmF1bHQuY3JlYXRlRG9tKFwieGctcGlwLWxheVwiLFwiPGRpdj48L2Rpdj5cIix7fSxcInhncGxheWVyLXBpcC1sYXlcIik7dGhpcy5yb290LmFwcGVuZENoaWxkKG8pO3ZhciByPWEuZGVmYXVsdC5jcmVhdGVEb20oXCJ4Zy1waXAtZHJhZ1wiLCc8ZGl2IGNsYXNzPVwiZHJhZy1oYW5kbGVcIj48c3Bhbj7ngrnlh7vmjInkvY/lj6/mi5bliqjop4bpopE8L3NwYW4+PC9kaXY+Jyx7dGFiaW5kZXg6OX0sXCJ4Z3BsYXllci1waXAtZHJhZ1wiKTt0aGlzLnJvb3QuYXBwZW5kQ2hpbGQocik7bmV3IHUuZGVmYXVsdChcIi54Z3BsYXllclwiLHtoYW5kbGU6XCIuZHJhZy1oYW5kbGVcIn0pO2EuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1waXAtYWN0aXZlXCIpLHRoaXMucm9vdC5zdHlsZS5yaWdodD0wLHRoaXMucm9vdC5zdHlsZS5ib3R0b209XCIyMDBweFwiLHRoaXMucm9vdC5zdHlsZS50b3A9XCJcIix0aGlzLnJvb3Quc3R5bGUubGVmdD1cIlwiLHRoaXMuY29uZmlnLmZsdWlkJiYodGhpcy5yb290LnN0eWxlW1wicGFkZGluZy10b3BcIl09XCJcIik7dmFyIGk9dGhpcztbXCJjbGlja1wiLFwidG91Y2hzdGFydFwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtvLmFkZEV2ZW50TGlzdGVuZXIoZSwoZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCksaS5leGl0UElQKCksaS5yb290LnN0eWxlLnRvcD10K1wicHhcIixpLnJvb3Quc3R5bGUubGVmdD1uK1wicHhcIn0pKX0pKX19LHtrZXk6XCJleGl0UElQXCIsdmFsdWU6ZnVuY3Rpb24oKXthLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5yb290LFwieGdwbGF5ZXItcGlwLWFjdGl2ZVwiKSx0aGlzLnJvb3Quc3R5bGUucmlnaHQ9XCJcIix0aGlzLnJvb3Quc3R5bGUuYm90dG9tPVwiXCIsdGhpcy5yb290LnN0eWxlLnRvcD1cIlwiLHRoaXMucm9vdC5zdHlsZS5sZWZ0PVwiXCIsdGhpcy5jb25maWcuZmx1aWQmJih0aGlzLnJvb3Quc3R5bGVbXCJwYWRkaW5nLXRvcFwiXT0xMDAqdGhpcy5jb25maWcuaGVpZ2h0L3RoaXMuY29uZmlnLndpZHRoK1wiJVwiKX19LHtrZXk6XCJvbkZvY3VzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2EuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1pbmFjdGl2ZVwiKSxlLnVzZXJUaW1lciYmY2xlYXJUaW1lb3V0KGUudXNlclRpbWVyKSxlLnVzZXJUaW1lcj1zZXRUaW1lb3V0KChmdW5jdGlvbigpe2UuZW1pdChcImJsdXJcIil9KSxlLmNvbmZpZy5pbmFjdGl2ZSl9fSx7a2V5Olwib25CbHVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnBhdXNlZHx8dGhpcy5lbmRlZHx8YS5kZWZhdWx0LmFkZENsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLWluYWN0aXZlXCIpfX0se2tleTpcIm9uUGxheVwiLHZhbHVlOmZ1bmN0aW9uKCl7YS5kZWZhdWx0LmFkZENsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLXBsYXlpbmdcIiksYS5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLXBhdXNlXCIpfX0se2tleTpcIm9uUGF1c2VcIix2YWx1ZTpmdW5jdGlvbigpe2EuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1wYXVzZVwiKSx0aGlzLnVzZXJUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMudXNlclRpbWVyKSx0aGlzLmVtaXQoXCJmb2N1c1wiKX19LHtrZXk6XCJvbkVuZGVkXCIsdmFsdWU6ZnVuY3Rpb24oKXthLmRlZmF1bHQuYWRkQ2xhc3ModGhpcy5yb290LFwieGdwbGF5ZXItZW5kZWRcIiksYS5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLXBsYXlpbmdcIil9fSx7a2V5Olwib25TZWVraW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXt9fSx7a2V5Olwib25TZWVrZWRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMud2FpdFRpbWVyJiZjbGVhclRpbWVvdXQodGhpcy53YWl0VGltZXIpLGEuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1pc2xvYWRpbmdcIil9fSx7a2V5Olwib25XYWl0aW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Uud2FpdFRpbWVyJiZjbGVhclRpbWVvdXQoZS53YWl0VGltZXIpLGUud2FpdFRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7YS5kZWZhdWx0LmFkZENsYXNzKGUucm9vdCxcInhncGxheWVyLWlzbG9hZGluZ1wiKX0pLDUwMCl9fSx7a2V5Olwib25QbGF5aW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLndhaXRUaW1lciYmY2xlYXJUaW1lb3V0KHRoaXMud2FpdFRpbWVyKSxhLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5yb290LFwieGdwbGF5ZXItaXNsb2FkaW5nIHhncGxheWVyLW5vc3RhcnQgeGdwbGF5ZXItcGF1c2UgeGdwbGF5ZXItZW5kZWQgeGdwbGF5ZXItaXMtZXJyb3IgeGdwbGF5ZXItcmVwbGF5XCIpLGEuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1wbGF5aW5nXCIpfX0se2tleTpcIm9uS2V5ZG93blwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZXx8d2luZG93LmV2ZW50O2lmKCFufHwzNyE9PW4ua2V5Q29kZSYmMzghPT1uLmtleUNvZGUmJjM5IT09bi5rZXlDb2RlJiY0MCE9PW4ua2V5Q29kZSYmMzIhPT1uLmtleUNvZGV8fHQuZW1pdChcImZvY3VzXCIpLCFufHw0MCE9PW4ua2V5Q29kZSYmMzghPT1uLmtleUNvZGUpbiYmMzk9PT1uLmtleUNvZGU/dC5jdXJyZW50VGltZSsxMDw9dC5kdXJhdGlvbj90LmN1cnJlbnRUaW1lKz0xMDp0LmN1cnJlbnRUaW1lPXQuZHVyYXRpb24tMTpuJiYzNz09PW4ua2V5Q29kZT90LmN1cnJlbnRUaW1lLTEwPj0wP3QuY3VycmVudFRpbWUtPTEwOnQuY3VycmVudFRpbWU9MDpuJiYzMj09PW4ua2V5Q29kZSYmKHQucGF1c2VkP3QucGxheSgpOnQucGF1c2UoKSk7ZWxzZXtpZih0LmNvbnRyb2xzKXt2YXIgbz10LmNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItc2xpZGVyXCIpO28mJihhLmRlZmF1bHQuaGFzQ2xhc3MobyxcInhncGxheWVyLW5vbmVcIikmJmEuZGVmYXVsdC5yZW1vdmVDbGFzcyhvLFwieGdwbGF5ZXItbm9uZVwiKSx0LnNsaWRlclRpbWVyJiZjbGVhclRpbWVvdXQodC5zbGlkZXJUaW1lciksdC5zbGlkZXJUaW1lcj1zZXRUaW1lb3V0KChmdW5jdGlvbigpe2EuZGVmYXVsdC5hZGRDbGFzcyhvLFwieGdwbGF5ZXItbm9uZVwiKX0pLHQuY29uZmlnLmluYWN0aXZlKSl9biYmNDA9PT1uLmtleUNvZGU/dC52b2x1bWUtLjE+PTA/dC52b2x1bWUtPS4xOnQudm9sdW1lPTA6biYmMzg9PT1uLmtleUNvZGUmJih0LnZvbHVtZSsuMTw9MT90LnZvbHVtZSs9LjE6dC52b2x1bWU9MSl9fX1dLFt7a2V5OlwiaW5zdGFsbFwiLHZhbHVlOmZ1bmN0aW9uKGUsbil7dC5wbHVnaW5zfHwodC5wbHVnaW5zPXt9KSx0LnBsdWdpbnNbZV09bn19XSksdH0oaS5kZWZhdWx0KTtoLnV0aWw9YS5kZWZhdWx0LGguc25pZmZlcj1sLmRlZmF1bHQsaC5FcnJvcnM9Yy5kZWZhdWx0LHQuZGVmYXVsdD1oLGUuZXhwb3J0cz10LmRlZmF1bHR9LFwiLi9zcmMvcHJveHkuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvcHJveHkuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKSxyPXMobigvKiEgZXZlbnQtZW1pdHRlciAqL1wiLi9ub2RlX21vZHVsZXMvZXZlbnQtZW1pdHRlci9pbmRleC5qc1wiKSksaT1zKG4oLyohIC4vdXRpbHMvdXRpbCAqL1wiLi9zcmMvdXRpbHMvdXRpbC5qc1wiKSksYT1zKG4oLyohIC4vZXJyb3IgKi9cIi4vc3JjL2Vycm9yLmpzXCIpKTtmdW5jdGlvbiBzKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgbD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmxvZ1BhcmFtcz17YmM6MCxidV9hY3VfdDowLHBsYXllZDpbXX0sdGhpcy5faGFzU3RhcnQ9ITEsdGhpcy52aWRlb0NvbmZpZz17Y29udHJvbHM6ITEsYXV0b3BsYXk6dC5hdXRvcGxheSxwbGF5c2lubGluZTp0LnBsYXlzaW5saW5lLFwid2Via2l0LXBsYXlzaW5saW5lXCI6dC5wbGF5c2lubGluZSxcIng1LXBsYXlzaW5saW5lXCI6dC5wbGF5c2lubGluZSxcIng1LXZpZGVvLXBsYXllci10eXBlXCI6dFtcIng1LXZpZGVvLXBsYXllci10eXBlXCJdLFwieDUtdmlkZW8tcGxheWVyLWZ1bGxzY3JlZW5cIjp0W1wieDUtdmlkZW8tcGxheWVyLWZ1bGxzY3JlZW5cIl0sXCJ4NS12aWRlby1vcmllbnRhdGlvblwiOnRbXCJ4NS12aWRlby1vcmllbnRhdGlvblwiXSxhaXJwbGF5OnQuYWlycGxheSxcIndlYmtpdC1haXJwbGF5XCI6dC5haXJwbGF5LHRhYmluZGV4OjIsbWVkaWFUeXBlOnQubWVkaWFUeXBlfHxcInZpZGVvXCJ9LHQubG9vcCYmKHRoaXMudmlkZW9Db25maWcubG9vcD1cImxvb3BcIik7dmFyIG49XCJcIjtpZih0LnRleHRUcmFjayYmQXJyYXkuaXNBcnJheSh0LnRleHRUcmFjaykmJihuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJDaHJvbWVcIik+LTF8fG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkZpcmVmb3hcIik+LTEpJiYodC50ZXh0VHJhY2suc29tZSgoZnVuY3Rpb24oZSl7aWYoZS5zcmMmJmUubGFiZWwmJmUuZGVmYXVsdClyZXR1cm4gbis9Jzx0cmFjayBzcmM9XCInK2Uuc3JjKydcIiAnLGUua2luZCYmKG4rPSdraW5kPVwiJytlLmtpbmQrJ1wiICcpLG4rPSdsYWJlbD1cIicrZS5sYWJlbCsnXCIgJyxlLnNyY2xhbmcmJihuKz0nc3JjbGFuZz1cIicrZS5zcmNsYW5nKydcIiAnKSxuKz0oZS5kZWZhdWx0P1wiZGVmYXVsdFwiOlwiXCIpK1wiPlwiLCEwfSkpLHRoaXMudmlkZW9Db25maWcuY3Jvc3NvcmlnaW49XCJhbm9ueW1vdXNcIiksdC50ZXh0VHJhY2tTdHlsZSl7dmFyIG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3RoaXMudGV4dFRyYWNrU3R5bGU9byxkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG8pO3ZhciBzPVwiXCI7Zm9yKHZhciBsIGluIHQudGV4dFRyYWNrU3R5bGUpcys9bCtcIjogXCIrdC50ZXh0VHJhY2tTdHlsZVtsXStcIjtcIjt2YXIgYz10LmlkP1wiI1wiK3QuaWQ6dC5lbC5pZD9cIiNcIit0LmVsLmlkOlwiLlwiK3QuZWwuY2xhc3NOYW1lO28uc2hlZXQuaW5zZXJ0UnVsZT9vLnNoZWV0Lmluc2VydFJ1bGUoYytcIiB2aWRlbzo6Y3VlIHsgXCIrcytcIiB9XCIsMCk6by5zaGVldC5hZGRSdWxlJiZvLnNoZWV0LmFkZFJ1bGUoYytcIiB2aWRlbzo6Y3VlXCIscyl9dGhpcy52aWRlbz1pLmRlZmF1bHQuY3JlYXRlRG9tKHRoaXMudmlkZW9Db25maWcubWVkaWFUeXBlLG4sdGhpcy52aWRlb0NvbmZpZyxcIlwiKSx0LmF1dG9wbGF5JiYodGhpcy52aWRlby5hdXRvcGxheT0hMCx0LmF1dG9wbGF5TXV0ZWQmJih0aGlzLnZpZGVvLm11dGVkPSEwKSksdGhpcy5ldj1bXCJwbGF5XCIsXCJwbGF5aW5nXCIsXCJwYXVzZVwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJzZWVraW5nXCIsXCJzZWVrZWRcIixcInRpbWV1cGRhdGVcIixcIndhaXRpbmdcIixcImNhbnBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwidm9sdW1lY2hhbmdlXCIsXCJsb2FkZWRkYXRhXCJdLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIHQ9e30sbj1lLG89XCJvblwiK2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxuIGluIHQ/T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbix7dmFsdWU6byxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOnRbbl09byx0O3ZhciB0LG4sb30pKSwoMCxyLmRlZmF1bHQpKHRoaXMpLHRoaXMuX2ludGVydmFsPXt9O3ZhciB1PVwiMCwwXCIsZD10aGlzO3RoaXMuZXYuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZC5ldkl0ZW09T2JqZWN0LmtleXMoZSlbMF07dmFyIHQ9T2JqZWN0LmtleXMoZSlbMF07ZC52aWRlby5hZGRFdmVudExpc3RlbmVyKE9iamVjdC5rZXlzKGUpWzBdLChmdW5jdGlvbigpe2QubG9nUGFyYW1zJiYoXCJwbGF5XCI9PT10P2QuaGFzU3RhcnQ9ITA6XCJ3YWl0aW5nXCI9PT10PyhkLmxvZ1BhcmFtcy5iYysrLGQuaW5XYWl0aW5nU3RhcnQ9KG5ldyBEYXRlKS5nZXRUaW1lKCkpOlwicGxheWluZ1wiPT09dD9kLmluV2FpdGluZ1N0YXJ0JiYoZC5sb2dQYXJhbXMuYnVfYWN1X3QrPShuZXcgRGF0ZSkuZ2V0VGltZSgpLWQuaW5XYWl0aW5nU3RhcnQsZC5pbldhaXRpbmdTdGFydD12b2lkIDApOlwibG9hZGVkZGF0YVwiPT09dD9kLmxvZ1BhcmFtcy5wbGF5ZWQucHVzaCh7YmVnaW46MCxlbmQ6LTF9KTpcInNlZWtpbmdcIj09PXQ/ZC5sb2dQYXJhbXMucGxheWVkLnB1c2goe2JlZ2luOmQudmlkZW8uY3VycmVudFRpbWUsZW5kOi0xfSk6ZCYmZC5sb2dQYXJhbXMmJmQubG9nUGFyYW1zLnBsYXllZCYmXCJ0aW1ldXBkYXRlXCI9PT10JiYoZC5sb2dQYXJhbXMucGxheWVkLmxlbmd0aDwxJiZkLmxvZ1BhcmFtcy5wbGF5ZWQucHVzaCh7YmVnaW46ZC52aWRlby5jdXJyZW50VGltZSxlbmQ6LTF9KSxkLmxvZ1BhcmFtcy5wbGF5ZWRbZC5sb2dQYXJhbXMucGxheWVkLmxlbmd0aC0xXS5lbmQ9ZC52aWRlby5jdXJyZW50VGltZSksXCJlcnJvclwiPT09dD9kLnZpZGVvLmVycm9yJiZkLmVtaXQodCxuZXcgYS5kZWZhdWx0KFwib3RoZXJcIixkLmN1cnJlbnRUaW1lLGQuZHVyYXRpb24sZC5uZXR3b3JrU3RhdGUsZC5yZWFkeVN0YXRlLGQuY3VycmVudFNyYyxkLnNyYyxkLmVuZGVkLHtsaW5lOjQxLG1zZzpkLmVycm9yLGhhbmRsZTpcIkNvbnN0cnVjdG9yXCJ9KSk6ZC5lbWl0KHQsZCksZC5oYXNPd25Qcm9wZXJ0eShcIl9pbnRlcnZhbFwiKSYmKFtcImVuZGVkXCIsXCJlcnJvclwiLFwidGltZXVwZGF0ZVwiXS5pbmRleE9mKHQpPDA/KGNsZWFySW50ZXJ2YWwoZC5faW50ZXJ2YWwuYnVmZmVyZWRDaGFuZ2UpLGkuZGVmYXVsdC5zZXRJbnRlcnZhbChkLFwiYnVmZmVyZWRDaGFuZ2VcIiwoZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wLG49ZC52aWRlby5idWZmZXJlZC5sZW5ndGg7dDxuO3QrKyllLnB1c2goW2QudmlkZW8uYnVmZmVyZWQuc3RhcnQodCksZC52aWRlby5idWZmZXJlZC5lbmQodCldKTtlLnRvU3RyaW5nKCkhPT11JiYodT1lLnRvU3RyaW5nKCksZC5lbWl0KFwiYnVmZmVyZWRDaGFuZ2VcIixlKSl9KSwyMDApKTpcInRpbWV1cGRhdGVcIiE9PXQmJmkuZGVmYXVsdC5jbGVhckludGVydmFsKGQsXCJidWZmZXJlZENoYW5nZVwiKSkpfSksITEpfSkpfXJldHVybiBvKGUsW3trZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnRleHRUcmFja1N0eWxlJiZ0aGlzLnRleHRUcmFja1N0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy50ZXh0VHJhY2tTdHlsZSl9fSx7a2V5OlwicGxheVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy52aWRlby5wbGF5KCl9fSx7a2V5OlwicGF1c2VcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMudmlkZW8ucGF1c2UoKX19LHtrZXk6XCJjYW5QbGF5VHlwZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy52aWRlby5jYW5QbGF5VHlwZSgpfX0se2tleTpcImdldEJ1ZmZlcmVkUmFuZ2VcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPVswLDBdLHQ9dGhpcy52aWRlbyxuPXQuYnVmZmVyZWQsbz10LmN1cnJlbnRUaW1lO2lmKG4pZm9yKHZhciByPTAsaT1uLmxlbmd0aDtyPGkmJihlWzBdPW4uc3RhcnQociksZVsxXT1uLmVuZChyKSwhKGVbMF08PW8mJm88PWVbMV0pKTtyKyspO3JldHVybiBlWzBdLW88PTAmJm8tZVsxXTw9MD9lOlswLDBdfX0se2tleTpcImhhc1N0YXJ0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2hhc1N0YXJ0fSxzZXQ6ZnVuY3Rpb24oZSl7XCJib29sZWFuXCIhPXR5cGVvZiBlfHwhMCE9PWV8fHRoaXMuX2hhc1N0YXJ0fHwodGhpcy5faGFzU3RhcnQ9ITAsdGhpcy5lbWl0KFwiaGFzc3RhcnRcIikpfX0se2tleTpcImF1dG9wbGF5XCIsc2V0OmZ1bmN0aW9uKGUpe3RoaXMudmlkZW8uYXV0b3BsYXk9ZX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlkZW8uYXV0b3BsYXl9fSx7a2V5OlwiYnVmZmVyZWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5idWZmZXJlZH19LHtrZXk6XCJjcm9zc09yaWdpblwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLmNyb3NzT3JpZ2lufSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy52aWRlby5jcm9zc09yaWdpbj1lfX0se2tleTpcImN1cnJlbnRTcmNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5jdXJyZW50U3JjfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy52aWRlby5jdXJyZW50U3JjPWV9fSx7a2V5OlwiY3VycmVudFRpbWVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5jdXJyZW50VGltZX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMudmlkZW8uY3VycmVudFRpbWU9ZX19LHtrZXk6XCJkZWZhdWx0TXV0ZWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5kZWZhdWx0TXV0ZWR9LHNldDpmdW5jdGlvbihlKXt0aGlzLnZpZGVvLmRlZmF1bHRNdXRlZD1lfX0se2tleTpcImR1cmF0aW9uXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlkZW8uZHVyYXRpb259fSx7a2V5OlwiZW5kZWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5lbmRlZH19LHtrZXk6XCJlcnJvclwiLGdldDpmdW5jdGlvbigpe3ZhciBlPXRoaXMudmlkZW8uZXJyb3I7aWYoIWUpcmV0dXJuIG51bGw7dmFyIHQ9W3tlbjpcIk1FRElBX0VSUl9BQk9SVEVEXCIsY246XCLlj5blm57ov4fnqIvooqvnlKjmiLfkuK3mraJcIn0se2VuOlwiTUVESUFfRVJSX05FVFdPUktcIixjbjpcIuW9k+S4i+i9veaXtuWPkeeUn+mUmeivr1wifSx7ZW46XCJNRURJQV9FUlJfREVDT0RFXCIsY246XCLlvZPop6PnoIHml7blj5HnlJ/plJnor69cIn0se2VuOlwiTUVESUFfRVJSX1NSQ19OT1RfU1VQUE9SVEVEXCIsY246XCLkuI3mlK/mjIHpn7PpopEv6KeG6aKRXCJ9XTtyZXR1cm4gdGhpcy5sYW5nP3RoaXMubGFuZ1t0W2UuY29kZS0xXS5lbl06dFtlLmNvZGUtMV0uZW59fSx7a2V5OlwibG9vcFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLmxvb3B9LHNldDpmdW5jdGlvbihlKXt0aGlzLnZpZGVvLmxvb3A9ZX19LHtrZXk6XCJtdXRlZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLm11dGVkfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy52aWRlby5tdXRlZD1lfX0se2tleTpcIm5ldHdvcmtTdGF0ZVwiLGdldDpmdW5jdGlvbigpe3ZhciBlPVt7ZW46XCJORVRXT1JLX0VNUFRZXCIsY246XCLpn7PpopEv6KeG6aKR5bCa5pyq5Yid5aeL5YyWXCJ9LHtlbjpcIk5FVFdPUktfSURMRVwiLGNuOlwi6Z+z6aKRL+inhumikeaYr+a0u+WKqOeahOS4lOW3sumAieWPlui1hOa6kO+8jOS9huW5tuacquS9v+eUqOe9kee7nFwifSx7ZW46XCJORVRXT1JLX0xPQURJTkdcIixjbjpcIua1j+iniOWZqOato+WcqOS4i+i9veaVsOaNrlwifSx7ZW46XCJORVRXT1JLX05PX1NPVVJDRVwiLGNuOlwi5pyq5om+5Yiw6Z+z6aKRL+inhumikeadpea6kFwifV07cmV0dXJuIHRoaXMubGFuZz90aGlzLmxhbmdbZVt0aGlzLnZpZGVvLm5ldHdvcmtTdGF0ZV0uZW5dOmVbdGhpcy52aWRlby5uZXR3b3JrU3RhdGVdLmVufX0se2tleTpcInBhdXNlZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLnBhdXNlZH19LHtrZXk6XCJwbGF5YmFja1JhdGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5wbGF5YmFja1JhdGV9LHNldDpmdW5jdGlvbihlKXt0aGlzLnZpZGVvLnBsYXliYWNrUmF0ZT1lfX0se2tleTpcInBsYXllZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLnBsYXllZH19LHtrZXk6XCJwcmVsb2FkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlkZW8ucHJlbG9hZH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMudmlkZW8ucHJlbG9hZD1lfX0se2tleTpcInJlYWR5U3RhdGVcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgZT1be2VuOlwiSEFWRV9OT1RISU5HXCIsY246XCLmsqHmnInlhbPkuo7pn7PpopEv6KeG6aKR5piv5ZCm5bCx57uq55qE5L+h5oGvXCJ9LHtlbjpcIkhBVkVfTUVUQURBVEFcIixjbjpcIuWFs+S6jumfs+mikS/op4bpopHlsLHnu6rnmoTlhYPmlbDmja5cIn0se2VuOlwiSEFWRV9DVVJSRU5UX0RBVEFcIixjbjpcIuWFs+S6juW9k+WJjeaSreaUvuS9jee9rueahOaVsOaNruaYr+WPr+eUqOeahO+8jOS9huayoeaciei2s+Wkn+eahOaVsOaNruadpeaSreaUvuS4i+S4gOW4py/mr6vnp5JcIn0se2VuOlwiSEFWRV9GVVRVUkVfREFUQVwiLGNuOlwi5b2T5YmN5Y+K6Iez5bCR5LiL5LiA5bin55qE5pWw5o2u5piv5Y+v55So55qEXCJ9LHtlbjpcIkhBVkVfRU5PVUdIX0RBVEFcIixjbjpcIuWPr+eUqOaVsOaNrui2s+S7peW8gOWni+aSreaUvlwifV07cmV0dXJuIHRoaXMubGFuZz90aGlzLmxhbmdbZVt0aGlzLnZpZGVvLnJlYWR5U3RhdGVdLmVuXTplW3RoaXMudmlkZW8ucmVhZHlTdGF0ZV19fSx7a2V5Olwic2Vla2FibGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5zZWVrYWJsZX19LHtrZXk6XCJzZWVraW5nXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlkZW8uc2Vla2luZ319LHtrZXk6XCJzcmNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5zcmN9LHNldDpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2kuZGVmYXVsdC5oYXNDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1lbmRlZFwiKXx8dGhpcy5lbWl0KFwidXJsY2hhbmdlXCIsSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0LmxvZ1BhcmFtcykpKSx0aGlzLmxvZ1BhcmFtcz17YmM6MCxidV9hY3VfdDowLHBsYXllZDpbXSxwdDoobmV3IERhdGUpLmdldFRpbWUoKSx2dDoobmV3IERhdGUpLmdldFRpbWUoKSx2ZDowfSx0aGlzLnZpZGVvLnBhdXNlKCksdGhpcy52aWRlby5zcmM9ZSx0aGlzLmxvZ1BhcmFtcy5wbGF5U3JjPWUsdGhpcy5sb2dQYXJhbXMucHQ9KG5ldyBEYXRlKS5nZXRUaW1lKCksdGhpcy5sb2dQYXJhbXMudnQ9dGhpcy5sb2dQYXJhbXMucHQsdGhpcy5vbmNlKFwibG9hZGVkZGF0YVwiLChmdW5jdGlvbiBlKCl7dC5sb2dQYXJhbXMudnQ9KG5ldyBEYXRlKS5nZXRUaW1lKCksdC5sb2dQYXJhbXMucHQ+dC5sb2dQYXJhbXMudnQmJih0LmxvZ1BhcmFtcy5wdD10LmxvZ1BhcmFtcy52dCksdC5sb2dQYXJhbXMudmQ9dC52aWRlby5kdXJhdGlvbix0Lm9mZihcImxvYWRlZGRhdGFcIixlKX0pKX19LHtrZXk6XCJ2b2x1bWVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby52b2x1bWV9LHNldDpmdW5jdGlvbihlKXt0aGlzLnZpZGVvLnZvbHVtZT1lfX0se2tleTpcImZ1bGxzY3JlZW5cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5kZWZhdWx0Lmhhc0NsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLWlzLWZ1bGxzY3JlZW5cIil8fGkuZGVmYXVsdC5oYXNDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1mdWxsc2NyZWVuLWFjdGl2ZVwiKX19LHtrZXk6XCJidWxsZXRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWkuZGVmYXVsdC5maW5kRG9tKHRoaXMucm9vdCxcInhnLWJ1bGxldFwiKSYmaS5kZWZhdWx0Lmhhc0NsYXNzKGkuZGVmYXVsdC5maW5kRG9tKHRoaXMucm9vdCxcInhnLWJ1bGxldFwiKSxcInhncGxheWVyLWhhcy1idWxsZXRcIil9fSx7a2V5OlwidGV4dFRyYWNrXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuZGVmYXVsdC5oYXNDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1pcy10ZXh0VHJhY2tcIil9fSx7a2V5OlwicGlwXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuZGVmYXVsdC5oYXNDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1waXAtYWN0aXZlXCIpfX1dKSxlfSgpO3QuZGVmYXVsdD1sLGUuZXhwb3J0cz10LmRlZmF1bHR9LFwiLi9zcmMvc3R5bGUvaW5kZXguc2Nzc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3N0eWxlL2luZGV4LnNjc3MgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXt2YXIgbz1uKC8qISAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXI/P3JlZi0tNS0xIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9pbmRleC5zY3NzICovXCIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPyEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanMhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3NyYy9zdHlsZS9pbmRleC5zY3NzXCIpO1wic3RyaW5nXCI9PXR5cGVvZiBvJiYobz1bW2UuaSxvLFwiXCJdXSk7dmFyIHI9e2htcjohMCx0cmFuc2Zvcm06dm9pZCAwLGluc2VydEludG86dm9pZCAwfTtuKC8qISAuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMgKi9cIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKG8scik7by5sb2NhbHMmJihlLmV4cG9ydHM9by5sb2NhbHMpfSxcIi4vc3JjL3V0aWxzL2FuaW1hdGlvbi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdXRpbHMvYW5pbWF0aW9uLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjshZnVuY3Rpb24oKXtmb3IodmFyIGU9MCx0PVtcIndlYmtpdFwiLFwibW96XCJdLG49MDtuPHQubGVuZ3RoJiYhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsrK24pd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT13aW5kb3dbdFtuXStcIlJlcXVlc3RBbmltYXRpb25GcmFtZVwiXSx3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU9d2luZG93W3Rbbl0rXCJDYW5jZWxBbmltYXRpb25GcmFtZVwiXXx8d2luZG93W3Rbbl0rXCJDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZXx8KHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU9ZnVuY3Rpb24odCxuKXt2YXIgbz0obmV3IERhdGUpLmdldFRpbWUoKSxyPU1hdGgubWF4KDAsMTYtKG8tZSkpLGk9d2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dChvK3IpfSkscik7cmV0dXJuIGU9bytyLGl9KSx3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWV8fCh3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU9ZnVuY3Rpb24oZSl7Y2xlYXJUaW1lb3V0KGUpfSl9KCl9LFwiLi9zcmMvdXRpbHMvZGF0YWJhc2UuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdXRpbHMvZGF0YWJhc2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKTt2YXIgcj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e25hbWU6XCJ4Z3BsYXllclwiLHZlcnNpb246MSxkYjpudWxsLG9qc3RvcmU6e25hbWU6XCJ4Zy1tNGFcIixrZXlwYXRoOlwidmlkXCJ9fTshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuaW5kZXhlZERCPXdpbmRvdy5pbmRleGVkREJ8fHdpbmRvdy53ZWJraXRpbmRleGVkREIsdGhpcy5JREJLZXlSYW5nZT13aW5kb3cuSURCS2V5UmFuZ2V8fHdpbmRvdy53ZWJraXRJREJLZXlSYW5nZSx0aGlzLm15REI9dH1yZXR1cm4gbyhlLFt7a2V5Olwib3BlbkRCXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPXRoaXMsbz10aGlzLm15REIudmVyc2lvbnx8MSxyPW4uaW5kZXhlZERCLm9wZW4obi5teURCLm5hbWUsbyk7ci5vbmVycm9yPWZ1bmN0aW9uKGUpe30sci5vbnN1Y2Nlc3M9ZnVuY3Rpb24obyl7dC5teURCLmRiPW8udGFyZ2V0LnJlc3VsdCxlLmNhbGwobil9LHIub251cGdyYWRlbmVlZGVkPWZ1bmN0aW9uKGUpe3ZhciB0PWUudGFyZ2V0LnJlc3VsdDtlLnRhcmdldC50cmFuc2FjdGlvbjt0Lm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMobi5teURCLm9qc3RvcmUubmFtZSl8fHQuY3JlYXRlT2JqZWN0U3RvcmUobi5teURCLm9qc3RvcmUubmFtZSx7a2V5UGF0aDpuLm15REIub2pzdG9yZS5rZXlwYXRofSl9fX0se2tleTpcImRlbGV0ZWRiXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmluZGV4ZWREQi5kZWxldGVEYXRhYmFzZSh0aGlzLm15REIubmFtZSl9fSx7a2V5OlwiY2xvc2VEQlwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5teURCLmRiLmNsb3NlKCl9fSx7a2V5OlwiYWRkRGF0YVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXRoaXMubXlEQi5kYi50cmFuc2FjdGlvbihlLFwicmVhZHdyaXRlXCIpLm9iamVjdFN0b3JlKGUpLG89dm9pZCAwLHI9MDtyPHQubGVuZ3RoO3IrKykobz1uLmFkZCh0W3JdKSkub25lcnJvcj1mdW5jdGlvbigpe30sby5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXt9fX0se2tleTpcInB1dERhdGFcIix2YWx1ZTpmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10aGlzLm15REIuZGIudHJhbnNhY3Rpb24oZSxcInJlYWR3cml0ZVwiKS5vYmplY3RTdG9yZShlKSxvPXZvaWQgMCxyPTA7cjx0Lmxlbmd0aDtyKyspKG89bi5wdXQodFtyXSkpLm9uZXJyb3I9ZnVuY3Rpb24oKXt9LG8ub25zdWNjZXNzPWZ1bmN0aW9uKCl7fX19LHtrZXk6XCJnZXREYXRhQnlLZXlcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dmFyIG89dGhpcyxyPXRoaXMubXlEQi5kYi50cmFuc2FjdGlvbihlLFwicmVhZHdyaXRlXCIpLm9iamVjdFN0b3JlKGUpLmdldCh0KTtyLm9uZXJyb3I9ZnVuY3Rpb24oKXtuLmNhbGwobyxudWxsKX0sci5vbnN1Y2Nlc3M9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQucmVzdWx0O24uY2FsbChvLHQpfX19LHtrZXk6XCJkZWxldGVEYXRhXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt0aGlzLm15REIuZGIudHJhbnNhY3Rpb24oZSxcInJlYWR3cml0ZVwiKS5vYmplY3RTdG9yZShlKS5kZWxldGUodCl9fSx7a2V5OlwiY2xlYXJEYXRhXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5teURCLmRiLnRyYW5zYWN0aW9uKGUsXCJyZWFkd3JpdGVcIikub2JqZWN0U3RvcmUoZSkuY2xlYXIoKX19XSksZX0oKTt0LmRlZmF1bHQ9cixlLmV4cG9ydHM9dC5kZWZhdWx0fSxcIi4vc3JjL3V0aWxzL3NuaWZmZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy91dGlscy9zbmlmZmVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89e2dldCBkZXZpY2UoKXtyZXR1cm4gby5vcy5pc1BjP1wicGNcIjpcIm1vYmlsZVwifSxnZXQgYnJvd3Nlcigpe3ZhciBlPW5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSx0PXtpZTovcnY6KFtcXGQuXSspXFwpIGxpa2UgZ2Vja28vLGZpcmZveDovZmlyZWZveFxcLyhbXFxkLl0rKS8sY2hyb21lOi9jaHJvbWVcXC8oW1xcZC5dKykvLG9wZXJhOi9vcGVyYS4oW1xcZC5dKykvLHNhZmFyaTovdmVyc2lvblxcLyhbXFxkLl0rKS4qc2FmYXJpL307cmV0dXJuW10uY29uY2F0KE9iamVjdC5rZXlzKHQpLmZpbHRlcigoZnVuY3Rpb24obil7cmV0dXJuIHRbbl0udGVzdChlKX0pKSlbMF19LGdldCBvcygpe3ZhciBlPW5hdmlnYXRvci51c2VyQWdlbnQsdD0vKD86V2luZG93cyBQaG9uZSkvLnRlc3QoZSksbj0vKD86U3ltYmlhbk9TKS8udGVzdChlKXx8dCxvPS8oPzpBbmRyb2lkKS8udGVzdChlKSxyPS8oPzpGaXJlZm94KS8udGVzdChlKSxpPS8oPzppUGFkfFBsYXlCb29rKS8udGVzdChlKXx8byYmIS8oPzpNb2JpbGUpLy50ZXN0KGUpfHxyJiYvKD86VGFibGV0KS8udGVzdChlKSxhPS8oPzppUGhvbmUpLy50ZXN0KGUpJiYhaTtyZXR1cm57aXNUYWJsZXQ6aSxpc1Bob25lOmEsaXNBbmRyb2lkOm8saXNQYzohKGF8fG98fG58fGkpLGlzU3ltYmlhbjpuLGlzV2luZG93c1Bob25lOnQsaXNGaXJlRm94OnJ9fX07dC5kZWZhdWx0PW8sZS5leHBvcnRzPXQuZGVmYXVsdH0sXCIuL3NyYy91dGlscy9zdmcuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWxzL3N2Zy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG8scj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpLGk9bigvKiEgcGFzaXRpb24gKi9cIi4vbm9kZV9tb2R1bGVzL3Bhc2l0aW9uL2Rpc3QvcGFzaXRpb24uanNcIiksYT0obz1pKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307bigvKiEgLi9hbmltYXRpb24gKi9cIi4vc3JjL3V0aWxzL2FuaW1hdGlvbi5qc1wiKTt2YXIgcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmZyb209dC5mcm9tLHRoaXMudG89dC50byx0aGlzLmVhc2luZz10LmVhc2luZ3x8ZnVuY3Rpb24oZSl7cmV0dXJuIGUqZX0sdGhpcy5kdXJhdGlvbj10LmR1cmF0aW9ufHwxNTAsdGhpcy5jdXJQYXRoPVwiXCIsdGhpcy5wcm9ncmVzcz10LnByb2dyZXNzLHRoaXMuc3RhdGU9MH1yZXR1cm4gcihlLFt7a2V5OlwiYW5pbWF0ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PW5ldyBEYXRlLG49ZS5kdXJhdGlvbixvPW51bGwscj1lLnBhdGgyc2hhcGVzKGUuZnJvbSksaT1lLnBhdGgyc2hhcGVzKGUudG8pLGE9ZS5fcHJlcHJvY2Vzc2luZyhyLGkpO2Uuc3RhdGU9MTshZnVuY3Rpb24gcigpe3ZhciBzPW5ldyBEYXRlLXQ7aWYocz49bnx8Mj09PWUuc3RhdGUpcmV0dXJuIG89aSxlLnByb2dyZXNzKG8sMSksd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGUudGlja0lkKSx2b2lkKGUuc3RhdGU9MCk7dmFyIGw9ZS5lYXNpbmcocy9uKTtvPWUuX2xlcnAoYVswXSxhWzFdLGwpLGUucHJvZ3Jlc3MobyxsKSxlLnRpY2tJZD13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHIpfSgpfX0se2tleTpcInRvU1ZHU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlLHQpe3Q/ZS5zcGxpY2UoMCwyLFwiQ1wiKTooZS5zcGxpY2UoMiwwLFwiQ1wiKSxlLnVuc2hpZnQoXCJNXCIpKX0pKSxlLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUuam9pbihcIiBcIil9KSkuam9pbihcIlwiKX0pKS5qb2luKFwiXCIpfX0se2tleTpcInN0YXJ0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmFuaW1hdGUoKX19LHtrZXk6XCJzdG9wXCIsdmFsdWU6ZnVuY3Rpb24oKXswIT09dGhpcy5zdGF0ZSYmKHRoaXMuc3RhdGU9Miksd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHNlbGYudGlja0lkKSx0aGlzLnN0YXRlPTB9fSx7a2V5OlwicmV2ZXJzZVwiLHZhbHVlOmZ1bmN0aW9uKCl7MCE9PXRoaXMuc3RhdGUmJnRoaXMuc3RvcCgpO3ZhciBlPXRoaXMuZnJvbTt0aGlzLmZyb209dGhpcy50byx0aGlzLnRvPWUsdGhpcy5hbmltYXRlKCl9fSx7a2V5OlwicmVzZXRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5mcm9tOzAhPT10aGlzLnN0YXRlJiZ0aGlzLnN0b3AoKSx0aGlzLmZyb209dCx0aGlzLnRvPWUsdGhpcy5hbmltYXRlKCl9fV0pLGV9KCk7Zm9yKHZhciBsIGluIGEuZGVmYXVsdClhLmRlZmF1bHRbbF1pbnN0YW5jZW9mIEZ1bmN0aW9uJiYhcy5wcm90b3R5cGVbbF0mJihzLnByb3RvdHlwZVtsXT1hLmRlZmF1bHRbbF0pO3QuZGVmYXVsdD1zLGUuZXhwb3J0cz10LmRlZmF1bHR9LFwiLi9zcmMvdXRpbHMvdXJsLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy91dGlscy91cmwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3QuZ2V0QWJzb2x1dGVVUkw9ZnVuY3Rpb24oZSl7aWYoIWUubWF0Y2goL15odHRwcz86XFwvXFwvLykpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dC5pbm5lckhUTUw9JzxhIGhyZWY9XCInK2UrJ1wiPng8L2E+JyxlPXQuZmlyc3RDaGlsZC5ocmVmfXJldHVybiBlfX0sXCIuL3NyYy91dGlscy91dGlsLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdXRpbHMvdXRpbC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHV0aWw9e2NyZWF0ZURvbTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcImRpdlwiLHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOlwiXCIsbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e30sbz1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106XCJcIixyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZSk7cmV0dXJuIHIuY2xhc3NOYW1lPW8sci5pbm5lckhUTUw9dCxPYmplY3Qua2V5cyhuKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbz10LGk9blt0XTtcInZpZGVvXCI9PT1lfHxcImF1ZGlvXCI9PT1lP2kmJnIuc2V0QXR0cmlidXRlKG8saSk6ci5zZXRBdHRyaWJ1dGUobyxpKX0pKSxyfSxoYXNDbGFzczpmdW5jdGlvbihlLHQpe3JldHVybiBlLmNsYXNzTGlzdD9BcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGUuY2xhc3NMaXN0LChmdW5jdGlvbihlKXtyZXR1cm4gZT09PXR9KSk6ISFlLmNsYXNzTmFtZS5tYXRjaChuZXcgUmVnRXhwKFwiKFxcXFxzfF4pXCIrdCtcIihcXFxcc3wkKVwiKSl9LGFkZENsYXNzOmZ1bmN0aW9uKGUsdCl7ZS5jbGFzc0xpc3Q/dC5yZXBsYWNlKC8oXlxccyt8XFxzKyQpL2csXCJcIikuc3BsaXQoL1xccysvZykuZm9yRWFjaCgoZnVuY3Rpb24odCl7dCYmZS5jbGFzc0xpc3QuYWRkKHQpfSkpOnV0aWwuaGFzQ2xhc3MoZSx0KXx8KGUuY2xhc3NOYW1lKz1cIiBcIit0KX0scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oZSx0KXtlLmNsYXNzTGlzdD90LnNwbGl0KC9cXHMrL2cpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2UuY2xhc3NMaXN0LnJlbW92ZSh0KX0pKTp1dGlsLmhhc0NsYXNzKGUsdCkmJnQuc3BsaXQoL1xccysvZykuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIG49bmV3IFJlZ0V4cChcIihcXFxcc3xeKVwiK3QrXCIoXFxcXHN8JClcIik7ZS5jbGFzc05hbWU9ZS5jbGFzc05hbWUucmVwbGFjZShuLFwiIFwiKX0pKX0sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oZSx0KXt0LnNwbGl0KC9cXHMrL2cpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3V0aWwuaGFzQ2xhc3MoZSx0KT91dGlsLnJlbW92ZUNsYXNzKGUsdCk6dXRpbC5hZGRDbGFzcyhlLHQpfSkpfSxmaW5kRG9tOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmRvY3VtZW50LHQ9YXJndW1lbnRzWzFdLG49dm9pZCAwO3RyeXtuPWUucXVlcnlTZWxlY3Rvcih0KX1jYXRjaChvKXt0LnN0YXJ0c1dpdGgoXCIjXCIpJiYobj1lLmdldEVsZW1lbnRCeUlkKHQuc2xpY2UoMSkpKX1yZXR1cm4gbn0scGFkU3RhcnQ6ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgbz1TdHJpbmcobikscj10Pj4wLGk9TWF0aC5jZWlsKHIvby5sZW5ndGgpLGE9W10scz1TdHJpbmcoZSk7aS0tOylhLnB1c2gobyk7cmV0dXJuIGEuam9pbihcIlwiKS5zdWJzdHJpbmcoMCxyLXMubGVuZ3RoKStzfSxmb3JtYXQ6ZnVuY3Rpb24oZSl7aWYod2luZG93LmlzTmFOKGUpKXJldHVyblwiXCI7dmFyIHQ9dXRpbC5wYWRTdGFydChNYXRoLmZsb29yKGUvMzYwMCksMiwwKSxuPXV0aWwucGFkU3RhcnQoTWF0aC5mbG9vcigoZS0zNjAwKnQpLzYwKSwyLDApLG89dXRpbC5wYWRTdGFydChNYXRoLmZsb29yKGUtMzYwMCp0LTYwKm4pLDIsMCk7cmV0dXJuKFwiMDBcIj09PXQ/W24sb106W3QsbixvXSkuam9pbihcIjpcIil9LGV2ZW50OmZ1bmN0aW9uKGUpe2lmKGUudG91Y2hlcyl7dmFyIHQ9ZS50b3VjaGVzWzBdfHxlLmNoYW5nZWRUb3VjaGVzWzBdO2UuY2xpZW50WD10LmNsaWVudFh8fDAsZS5jbGllbnRZPXQuY2xpZW50WXx8MCxlLm9mZnNldFg9dC5wYWdlWC10LnRhcmdldC5vZmZzZXRMZWZ0LGUub2Zmc2V0WT10LnBhZ2VZLXQudGFyZ2V0Lm9mZnNldFRvcH1lLl90YXJnZXQ9ZS50YXJnZXR8fGUuc3JjRWxlbWVudH0sdHlwZU9mOmZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkubWF0Y2goLyhbXlxccy4qXSspKD89XSQpL2cpWzBdfSxkZWVwQ29weTpmdW5jdGlvbihlLHQpe2lmKFwiT2JqZWN0XCI9PT11dGlsLnR5cGVPZih0KSYmXCJPYmplY3RcIj09PXV0aWwudHlwZU9mKGUpKXJldHVybiBPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChmdW5jdGlvbihuKXtcIk9iamVjdFwiIT09dXRpbC50eXBlT2YodFtuXSl8fHRbbl1pbnN0YW5jZW9mIE5vZGU/XCJBcnJheVwiPT09dXRpbC50eXBlT2YodFtuXSk/ZVtuXT1cIkFycmF5XCI9PT11dGlsLnR5cGVPZihlW25dKT9lW25dLmNvbmNhdCh0W25dKTp0W25dOmVbbl09dFtuXTplW25dP3V0aWwuZGVlcENvcHkoZVtuXSx0W25dKTplW25dPXRbbl19KSksZX0sZ2V0QmdJbWFnZTpmdW5jdGlvbihlKXt2YXIgdD0oZS5jdXJyZW50U3R5bGV8fHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUsbnVsbCkpLmJhY2tncm91bmRJbWFnZTtpZighdHx8XCJub25lXCI9PT10KXJldHVyblwiXCI7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7cmV0dXJuIG4uaHJlZj10LnJlcGxhY2UoL3VybFxcKFwifFwiXFwpL2csXCJcIiksbi5ocmVmfSxjb3B5RG9tOmZ1bmN0aW9uKGUpe2lmKGUmJjE9PT1lLm5vZGVUeXBlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUudGFnTmFtZSk7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZS5hdHRyaWJ1dGVzLChmdW5jdGlvbihlKXt0LnNldEF0dHJpYnV0ZShlLm5hbWUsZS52YWx1ZSl9KSksZS5pbm5lckhUTUwmJih0LmlubmVySFRNTD1lLmlubmVySFRNTCksdH1yZXR1cm5cIlwifSxzZXRJbnRlcnZhbDpmdW5jdGlvbihlLHQsbixvKXtlLl9pbnRlcnZhbFt0XXx8KGUuX2ludGVydmFsW3RdPXNldEludGVydmFsKG4uYmluZChlKSxvKSl9LGNsZWFySW50ZXJ2YWw6ZnVuY3Rpb24oZSx0KXtjbGVhckludGVydmFsKGUuX2ludGVydmFsW3RdKSxlLl9pbnRlcnZhbFt0XT1udWxsfSxjcmVhdGVJbWdCdG46ZnVuY3Rpb24oZSx0LG4sbyl7dmFyIHI9dXRpbC5jcmVhdGVEb20oXCJ4Zy1cIitlLFwiXCIse30sXCJ4Z3BsYXllci1cIitlK1wiLWltZ1wiKTtpZihyLnN0eWxlLmJhY2tncm91bmRJbWFnZT0ndXJsKFwiJyt0KydcIiknLG4mJm8pe3ZhciBpPXZvaWQgMCxhPXZvaWQgMCxzPXZvaWQgMDtbXCJweFwiLFwicmVtXCIsXCJlbVwiLFwicHRcIixcImRwXCIsXCJ2d1wiLFwidmhcIixcInZtXCIsXCIlXCJdLmV2ZXJ5KChmdW5jdGlvbihlKXtyZXR1cm4hKG4uaW5kZXhPZihlKT4tMSYmby5pbmRleE9mKGUpPi0xKXx8KGk9cGFyc2VGbG9hdChuLnNsaWNlKDAsbi5pbmRleE9mKGUpKS50cmltKCkpLGE9cGFyc2VGbG9hdChvLnNsaWNlKDAsby5pbmRleE9mKGUpKS50cmltKCkpLHM9ZSwhMSl9KSksci5zdHlsZS53aWR0aD1cIlwiK2krcyxyLnN0eWxlLmhlaWdodD1cIlwiK2ErcyxyLnN0eWxlLmJhY2tncm91bmRTaXplPVwiXCIraStzK1wiIFwiK2ErcyxyLnN0eWxlLm1hcmdpbj1cInN0YXJ0XCI9PT1lP1wiLVwiK2EvMitzK1wiIGF1dG8gYXV0byAtXCIraS8yK3M6XCJhdXRvIDVweCBhdXRvIDVweFwifXJldHVybiByfSxIZXgyUkdCQTpmdW5jdGlvbihoZXgsYWxwaGEpe3ZhciByZ2I9W107aWYoL15cXCNbMC05QS1GXXszfSQvaS50ZXN0KGhleCkpe3ZhciBzaXhIZXg9XCIjXCI7aGV4LnJlcGxhY2UoL1swLTlBLUZdL2dpLChmdW5jdGlvbihlKXtzaXhIZXgrPWUrZX0pKSxoZXg9c2l4SGV4fXJldHVybi9eI1swLTlBLUZdezZ9JC9pLnRlc3QoaGV4KT8oaGV4LnJlcGxhY2UoL1swLTlBLUZdezJ9L2dpLChmdW5jdGlvbihrdyl7cmdiLnB1c2goZXZhbChcIjB4XCIra3cpKX0pKSxcInJnYmEoXCIrcmdiLmpvaW4oXCIsXCIpK1wiLCBcIithbHBoYStcIilcIik6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSlcIn19O2V4cG9ydHMuZGVmYXVsdD11dGlsLG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdH0sMDpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogbXVsdGkgLi9zcmMvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPW4oLyohIC4vc3JjL2luZGV4LmpzICovXCIuL3NyYy9pbmRleC5qc1wiKX19KX0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCBSZW11eGVyIGZyb20gJ3hncGxheWVyLXJlbXV4J1xuaW1wb3J0IHsgRmV0Y2hMb2FkZXIgfSBmcm9tICd4Z3BsYXllci1sb2FkZXInXG5pbXBvcnQgeyBGbHZEZW11eGVyIH0gZnJvbSAneGdwbGF5ZXItZGVtdXgnXG5pbXBvcnQgeyBUcmFja3MsIFhnQnVmZmVyLCBQcmVTb3VyY2UgfSBmcm9tICd4Z3BsYXllci1idWZmZXInXG5pbXBvcnQgeyBNc2UsIEVWRU5UUyB9IGZyb20gJ3hncGxheWVyLXV0aWxzJ1xuaW1wb3J0IHsgQ29tcGF0aWJpbGl0eSB9IGZyb20gJ3hncGxheWVyLWNvZGVjJ1xuaW1wb3J0IFBsYXllciBmcm9tICd4Z3BsYXllcidcblxuY29uc3QgUkVNVVhfRVZFTlRTID0gRVZFTlRTLlJFTVVYX0VWRU5UUztcbmNvbnN0IERFTVVYX0VWRU5UUyA9IEVWRU5UUy5ERU1VWF9FVkVOVFM7XG5jb25zdCBMT0FERVJfRVZFTlRTID0gRVZFTlRTLkxPQURFUl9FVkVOVFNcbmNvbnN0IE1TRV9FVkVOVFMgPSBFVkVOVFMuTVNFX0VWRU5UU1xuXG5jb25zdCBUYWcgPSAnRkxWQ29udHJvbGxlcidcblxuY2xhc3MgTG9nZ2VyIHtcbiAgd2FybiAoKSB7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbHZDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IgKHBsYXllcikge1xuICAgIHRoaXMuVEFHID0gVGFnXG4gICAgdGhpcy5fcGxheWVyID0gcGxheWVyXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaW5pdFNlZ21lbnRBcnJpdmVkOiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGluaXQgKCkge1xuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0ZFVENIX0xPQURFUicsIEZldGNoTG9hZGVyKVxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0xPQURFUl9CVUZGRVInLCBYZ0J1ZmZlcilcblxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0ZMVl9ERU1VWEVSJywgRmx2RGVtdXhlcilcbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdUUkFDS1MnLCBUcmFja3MpXG5cbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdNUDRfUkVNVVhFUicsIFJlbXV4ZXIuTXA0UmVtdXhlcilcbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdQUkVfU09VUkNFX0JVRkZFUicsIFByZVNvdXJjZSlcblxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ0NPTVBBVElCSUxJVFknLCBDb21wYXRpYmlsaXR5KVxuXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnTE9HR0VSJywgTG9nZ2VyKVxuICAgIHRoaXMubXNlID0gdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnTVNFJywgTXNlKSh7IGNvbnRhaW5lcjogdGhpcy5fcGxheWVyLnZpZGVvIH0pXG5cbiAgICB0aGlzLmluaXRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgaW5pdExpc3RlbmVycyAoKSB7XG4gICAgdGhpcy5vbihMT0FERVJfRVZFTlRTLkxPQURFUl9EQVRBTE9BREVELCB0aGlzLl9oYW5kbGVMb2FkZXJEYXRhTG9hZGVkLmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihMT0FERVJfRVZFTlRTLkxPQURFUl9FUlJPUiwgdGhpcy5faGFuZGxlTmV0d29ya0Vycm9yLmJpbmQodGhpcykpXG5cbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5NRURJQV9JTkZPLCB0aGlzLl9oYW5kbGVNZWRpYUluZm8uYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsIHRoaXMuX2hhbmRsZU1ldGFkYXRhUGFyc2VkLmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUsIHRoaXMuX2hhbmRsZURlbXV4Q29tcGxldGUuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgdGhpcy5faGFuZGxlRGVtdXhFcnJvci5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5vbihSRU1VWF9FVkVOVFMuSU5JVF9TRUdNRU5ULCB0aGlzLl9oYW5kbGVBcHBlbmRJbml0U2VnbWVudC5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLk1FRElBX1NFR01FTlQsIHRoaXMuX2hhbmRsZU1lZGlhU2VnbWVudC5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5vbihNU0VfRVZFTlRTLlNPVVJDRV9VUERBVEVfRU5ELCB0aGlzLl9oYW5kbGVTb3VyY2VVcGRhdGVFbmQuYmluZCh0aGlzKSlcblxuICAgIHRoaXMuX3BsYXllci5vbigndGltZXVwZGF0ZScsIHRoaXMuX2hhbmRsZVRpbWVVcGRhdGUuYmluZCh0aGlzKSlcbiAgfVxuXG4gIF9oYW5kbGVNZWRpYUluZm8gKCkge1xuICAgIGlmICghdGhpcy5fY29udGV4dC5tZWRpYUluZm8pIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIG5ldyBFcnJvcignZmFpbGVkIHRvIGdldCBtZWRpYWluZm8nKSlcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlTG9hZGVyRGF0YUxvYWRlZCAoKSB7XG4gICAgdGhpcy5lbWl0VG8oJ0ZMVl9ERU1VWEVSJywgREVNVVhfRVZFTlRTLkRFTVVYX1NUQVJUKVxuICB9XG5cbiAgX2hhbmRsZU1ldGFkYXRhUGFyc2VkICh0eXBlKSB7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5SRU1VWF9NRVRBREFUQSwgdHlwZSlcbiAgfVxuICBfaGFuZGxlRGVtdXhDb21wbGV0ZSAoKSB7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5SRU1VWF9NRURJQSlcbiAgfVxuXG4gIF9oYW5kbGVBcHBlbmRJbml0U2VnbWVudCAoKSB7XG4gICAgdGhpcy5zdGF0ZS5pbml0U2VnbWVudEFycml2ZWQgPSB0cnVlXG4gICAgdGhpcy5tc2UuYWRkU291cmNlQnVmZmVycygpXG4gIH1cblxuICBfaGFuZGxlTWVkaWFTZWdtZW50ICgpIHtcbiAgICB0aGlzLm1zZS5hZGRTb3VyY2VCdWZmZXJzKClcbiAgICB0aGlzLm1zZS5kb0FwcGVuZCgpO1xuICB9XG5cbiAgX2hhbmRsZVNvdXJjZVVwZGF0ZUVuZCAoKSB7XG4gICAgY29uc3QgdGltZSA9IHRoaXMuX3BsYXllci5jdXJyZW50VGltZTtcbiAgICBjb25zdCB2aWRlbyA9IHRoaXMuX3BsYXllci52aWRlbztcbiAgICBjb25zdCBwcmVsb2FkVGltZSA9IHRoaXMuX3BsYXllci5jb25maWcucHJlbG9hZFRpbWUgfHwgNVxuXG4gICAgY29uc3QgeyBsZW5ndGggfSA9IHZpZGVvLmJ1ZmZlcmVkO1xuXG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGJ1ZmZlckVuZCA9IHZpZGVvLmJ1ZmZlcmVkLmVuZChsZW5ndGggLSAxKTtcbiAgICBpZiAoYnVmZmVyRW5kIC0gdGltZSA+IHByZWxvYWRUaW1lICogMikge1xuICAgICAgdGhpcy5fcGxheWVyLmN1cnJlbnRUaW1lID0gYnVmZmVyRW5kIC0gcHJlbG9hZFRpbWVcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlVGltZVVwZGF0ZSAoKSB7XG4gICAgY29uc3QgdGltZSA9IHRoaXMuX3BsYXllci5jdXJyZW50VGltZVxuICAgIGlmICh0aW1lID4gMikge1xuICAgICAgLy8g5Zyo55u05pKt5pe25Y+K5pe25riF56m6YnVmZmVy77yM6ZmN5L2O55u05pKt5YaF5a2Y5Y2g55SoXG4gICAgICB0aGlzLm1zZS5yZW1vdmUodGltZSAtIDIpXG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZU5ldHdvcmtFcnJvciAoKSB7XG4gICAgdGhpcy5fcGxheWVyLmVtaXQoJ2Vycm9yJywgbmV3IFBsYXllci5FcnJvcnMoJ25ldHdvcmsnLCB0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCkpXG4gIH1cblxuICBfaGFuZGxlRGVtdXhFcnJvcigpIHtcbiAgICB0aGlzLl9wbGF5ZXIuZW1pdCgnZXJyb3InLCBuZXcgUGxheWVyLkVycm9ycygncGFyc2UnLCB0aGlzLl9wbGF5ZXIuY29uZmlnLnVybCkpXG4gIH1cblxuICBzZWVrICgpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaW5pdFNlZ21lbnRBcnJpdmVkKSB7XG4gICAgICB0aGlzLmxvYWREYXRhKClcbiAgICB9XG4gIH1cblxuICBsb2FkRGF0YSAoKSB7XG4gICAgdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTEFERVJfU1RBUlQsIHRoaXMuX3BsYXllci5jb25maWcudXJsKVxuICB9XG5cbiAgcGF1c2UgKCkge1xuICAgIGNvbnN0IGxvYWRlciA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0ZFVENIX0xPQURFUicpXG5cbiAgICBpZiAobG9hZGVyKSB7XG4gICAgICBsb2FkZXIuY2FuY2VsKClcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBQbGF5ZXIgZnJvbSAneGdwbGF5ZXInXG5pbXBvcnQgeyBDb250ZXh0LCBFVkVOVFMgfSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5pbXBvcnQgRkxWIGZyb20gJy4vZmx2LWxpdmUnXG5jb25zdCBmbHZBbGxvd2VkRXZlbnRzID0gRVZFTlRTLkZsdkFsbG93ZWRFdmVudHM7XG5cbmNsYXNzIEZsdlBsYXllciBleHRlbmRzIFBsYXllciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpXG4gICAgdGhpcy5jb250ZXh0ID0gbmV3IENvbnRleHQoZmx2QWxsb3dlZEV2ZW50cylcbiAgICB0aGlzLmluaXRFdmVudHMoKVxuICAgIC8vIGNvbnN0IHByZWxvYWRUaW1lID0gcGxheWVyLmNvbmZpZy5wcmVsb2FkVGltZSB8fCAxNVxuICB9XG5cbiAgc3RhcnQgKCkge1xuICAgIHRoaXMuaW5pdEZsdigpXG4gICAgdGhpcy5jb250ZXh0LmluaXQoKVxuICAgIHN1cGVyLnN0YXJ0KHRoaXMuZmx2Lm1zZS51cmwpXG4gIH1cblxuICBpbml0Rmx2RXZlbnRzIChmbHYpIHtcbiAgICBjb25zdCBwbGF5ZXIgPSB0aGlzO1xuICAgIGZsdi5vbmNlKEVWRU5UUy5SRU1VWF9FVkVOVFMuSU5JVF9TRUdNRU5ULCAoKSA9PiB7XG4gICAgICBQbGF5ZXIudXRpbC5hZGRDbGFzcyhwbGF5ZXIucm9vdCwgJ3hncGxheWVyLWlzLWxpdmUnKVxuICAgICAgaWYgKCFQbGF5ZXIudXRpbC5maW5kRG9tKHRoaXMucm9vdCwgJ3hnLWxpdmUnKSkge1xuICAgICAgICBjb25zdCBsaXZlID0gUGxheWVyLnV0aWwuY3JlYXRlRG9tKCd4Zy1saXZlJywgJ+ato+WcqOebtOaSrScsIHt9LCAneGdwbGF5ZXItbGl2ZScpXG4gICAgICAgIHBsYXllci5jb250cm9scy5hcHBlbmRDaGlsZChsaXZlKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBmbHYub25jZShFVkVOVFMuTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsICgpID0+IHtcbiAgICAgIC8vIOebtOaSreWujOaIkO+8jOW+heaSreaUvuWZqOaSreWujOe8k+WtmOWQjuWPkemAgeWFs+mXreS6i+S7tlxuICAgICAgaWYgKCFwbGF5ZXIucGF1c2VkKSB7XG4gICAgICAgIGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGVuZCA9IHBsYXllci5nZXRCdWZmZXJlZFJhbmdlKClbMV1cbiAgICAgICAgICBpZiAoTWF0aC5hYnMocGxheWVyLmN1cnJlbnRUaW1lIC0gZW5kKSA8IDAuNSkge1xuICAgICAgICAgICAgcGxheWVyLmVtaXQoJ2VuZGVkJylcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVyKVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgMjAwKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBpbml0RXZlbnRzICgpIHtcbiAgICB0aGlzLm9uKCd0aW1ldXBkYXRlJywgKCkgPT4ge1xuICAgICAgdGhpcy5sb2FkRGF0YSgpXG4gICAgfSlcblxuICAgIHRoaXMub24oJ3NlZWtpbmcnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0aW1lID0gdGhpcy5jdXJyZW50VGltZVxuICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldEJ1ZmZlcmVkUmFuZ2UoKVxuICAgICAgaWYgKHRpbWUgPiByYW5nZVsxXSB8fCB0aW1lIDwgcmFuZ2VbMF0pIHtcbiAgICAgICAgdGhpcy5mbHYuc2Vlayh0aGlzLmN1cnJlbnRUaW1lKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBpbml0Rmx2ICgpIHtcbiAgICBjb25zdCBmbHYgPSB0aGlzLmNvbnRleHQucmVnaXN0cnkoJ0ZMVl9DT05UUk9MTEVSJywgRkxWKSh0aGlzKVxuICAgIHRoaXMuaW5pdEZsdkV2ZW50cyhmbHYpXG4gICAgdGhpcy5mbHYgPSBmbHZcbiAgfVxuXG4gIHBsYXkgKCkge1xuICAgIGlmICh0aGlzLl9oYXNTdGFydCkge1xuICAgICAgdGhpcy5fZGVzdHJveSgpXG4gICAgICB0aGlzLmNvbnRleHQgPSBuZXcgQ29udGV4dChmbHZBbGxvd2VkRXZlbnRzKVxuICAgICAgY29uc3QgZmx2ID0gdGhpcy5jb250ZXh0LnJlZ2lzdHJ5KCdGTFZfQ09OVFJPTExFUicsIEZMVikodGhpcylcbiAgICAgIHRoaXMuaW5pdEZsdkV2ZW50cyhmbHYpXG4gICAgICB0aGlzLmZsdiA9IGZsdlxuICAgICAgdGhpcy5jb250ZXh0LmluaXQoKVxuICAgICAgc3VwZXIuc3RhcnQoZmx2Lm1zZS51cmwpXG4gICAgICBzdXBlci5wbGF5KClcbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIucGxheSgpXG4gICAgfVxuICB9XG5cbiAgcGF1c2UgKCkge1xuICAgIHN1cGVyLnBhdXNlKClcbiAgICBpZiAodGhpcy5mbHYpIHtcbiAgICAgIHRoaXMuZmx2LnBhdXNlKClcbiAgICB9XG4gIH1cblxuICBsb2FkRGF0YSAodGltZSA9IHRoaXMuY3VycmVudFRpbWUpIHtcbiAgICBpZiAodGhpcy5mbHYpIHtcbiAgICAgIHRoaXMuZmx2LnNlZWsodGltZSlcbiAgICB9XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9kZXN0cm95KClcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gIH1cblxuICBfZGVzdHJveSAoKSB7XG4gICAgdGhpcy5jb250ZXh0LmRlc3Ryb3koKVxuICAgIHRoaXMuZmx2ID0gbnVsbFxuICAgIHRoaXMuY29udGV4dCA9IG51bGxcbiAgfVxuXG4gIGdldCBzcmMgKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRTcmNcbiAgfVxuXG4gIHNldCBzcmMgKHVybCkge1xuICAgIHRoaXMucGxheWVyLmNvbmZpZy51cmwgPSB1cmxcbiAgICBpZiAoIXRoaXMucGF1c2VkKSB7XG4gICAgICB0aGlzLnBhdXNlKClcbiAgICAgIHRoaXMub25jZSgncGF1c2UnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhcnQodXJsKVxuICAgICAgfSlcbiAgICAgIHRoaXMub25jZSgnY2FucGxheScsICgpID0+IHtcbiAgICAgICAgdGhpcy5wbGF5KClcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhcnQodXJsKVxuICAgIH1cbiAgICB0aGlzLm9uY2UoJ2NhbnBsYXknLCAoKSA9PiB7XG4gICAgICB0aGlzLmN1cnJlbnRUaW1lID0gMFxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGbHZQbGF5ZXJcbiJdLCJzb3VyY2VSb290IjoiIn0=