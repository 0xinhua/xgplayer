/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../node_modules/events/events.js":
/*!**********************************************************************************!*\
  !*** /Users/jiangyuqing/Desktop/Projects/xgplayer/node_modules/events/events.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = $getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  var args = [];
  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "../../node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "../xgplayer-buffer/index.js":
/*!***********************************!*\
  !*** ../xgplayer-buffer/index.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Track: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").default,
  Tracks: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").Tracks,
  AudioTrack: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").AudioTrack,
  VideoTrack: __webpack_require__(/*! ./src/track */ "../xgplayer-buffer/src/track.js").VideoTrack,

  XgBuffer: __webpack_require__(/*! ./src/buffer */ "../xgplayer-buffer/src/buffer.js").XgBuffer,
  RemuxBuffer: __webpack_require__(/*! ./src/buffer */ "../xgplayer-buffer/src/buffer.js").RemuxBuffer,

  PreSource: __webpack_require__(/*! ./src/presouce */ "../xgplayer-buffer/src/presouce.js").default
};


/***/ }),

/***/ "../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
  !*** ../xgplayer-buffer/src/buffer.js ***!
  \****************************************/
/*! exports provided: XgBuffer, RemuxBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XgBuffer", function() { return XgBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RemuxBuffer", function() { return RemuxBuffer; });
class XgBuffer {
  /**
   * A buffer to store loaded data.
   *
   * @class LoaderBuffer
   * @param {number} length - Optional the buffer size
   */
  constructor (length) {
    this.length = length || 0
    this.historyLen = length || 0
    this.array = []
    this.offset = 0
  }

  /**
   * The function to push data.
   *
   * @param {number} data - The data to push into the buffer
   */
  push (data) {
    this.array.push(data)
    this.length += data.byteLength
    this.historyLen += data.byteLength
  }

  /**
   * The function to shift data.
   *
   * @param {number} length - The size of shift.
   */
  shift (length) {
    if (this.array.length < 1) {
      return new Uint8Array(0)
    }

    if (length === undefined) {
      return this._shiftBuffer()
    }
    if ((this.offset + length) === this.array[0].length) {
      let ret = this.array[0].slice(this.offset, this.offset + length)
      this.offset = 0
      this.array.shift()
      this.length -= length
      return ret
    }

    if ((this.offset + length) < this.array[0].length) {
      let ret = this.array[0].slice(this.offset, this.offset + length)
      this.offset += length
      this.length -= length
      return ret
    }

    let ret = new Uint8Array(length)
    let tmpoff = 0
    while (this.array.length > 0 && length > 0) {
      if ((this.offset + length) < this.array[0].length) {
        let tmp = this.array[0].slice(this.offset, this.offset + length)
        ret.set(tmp, tmpoff)
        this.offset += length
        this.length -= length
        length = 0
        break
      } else {
        let templength = this.array[0].length - this.offset
        ret.set(this.array[0].slice(this.offset, this.array[0].length), tmpoff)
        this.array.shift()
        this.offset = 0
        tmpoff += templength
        this.length -= templength
        length -= templength
      }
    }
    return ret
  }

  /**
   * Function to clear the buffer.
   */
  clear () {
    this.array = []
    this.length = 0
    this.offset = 0
  }

  destroy () {
    this.clear()
    this.historyLen = 0
  }

  /**
   * Function to shift one unit8Array.
   */
  _shiftBuffer () {
    this.length -= this.array[0].length
    this.offset = 0
    return this.array.shift()
  }

  /**
   * Convert uint8 data to number.
   *
   * @param {number} start - the start postion.
   * @param {number} length - the length of data.
   */
  toInt (start, length) {
    let retInt = 0
    let i = this.offset + start
    while (i < this.offset + length + start) {
      if (i < this.array[0].length) {
        retInt = retInt * 256 + this.array[0][i]
      } else if (this.array[1]) {
        retInt = retInt * 256 + this.array[1][i - this.array[0].length]
      }

      i++
    }
    return retInt
  }
}

class RemuxBuffer {
  constructor () {
    this.video = []
    this.audio = []
  }

  destroy () {
    this.video = []
    this.audio = []
  }
}


/***/ }),

/***/ "../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Source {
  constructor () {
    this.mimetype = '';
    this.init = null;
    this.data = [];
  }
}

class PreSource {
  constructor () {
    this.sources = {};
  }

  getSource (source) {
    return this.sources[source];
  }

  createSource (name) {
    this.sources[name] = new Source();
    return this.sources[name];
  }

  clear () {
    this.sources = {};
  }

  destroy () {
    this.sources = {};
  }
}

/* harmony default export */ __webpack_exports__["default"] = (PreSource);


/***/ }),

/***/ "../xgplayer-buffer/src/track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/track.js ***!
  \***************************************/
/*! exports provided: default, AudioTrack, VideoTrack, Tracks */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Track; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioTrack", function() { return AudioTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoTrack", function() { return VideoTrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tracks", function() { return Tracks; });
class Track {
  /**
   * The constructor.
   */
  constructor () {
    this.id = -1
    this.sequenceNumber = 0
    this.samples = []
    this.droppedSamples = []
    this.length = 0
  }

  /**
   * Reset the track.
   */
  reset () {
    this.sequenceNumber = 0
    this.samples = []
    this.length = 0
  }
  /**
   * destroy the track.
   */
  distroy () {
    this.reset()
    this.id = -1
  }
}

class AudioTrack extends Track {
  /**
   * The constructor for audio track.
   */
  constructor () {
    super()
    this.TAG = 'AudioTrack'
    this.type = 'audio'
  }
}

class VideoTrack extends Track {
  /**
   * The constructor for video track.
   */
  constructor () {
    super()
    this.TAG = 'VideoTrack'
    this.type = 'video'
    this.dropped = 0
  }
  /**
   * reset the video track.
   */
  reset () {
    this.sequenceNumber = 0
    this.samples = []
    this.length = 0
    this.dropped = 0
  }
}

class Tracks {
  constructor () {
    this.audioTrack = null
    this.videoTrack = null
  }
}


/***/ }),

/***/ "../xgplayer-codec/index.js":
/*!**********************************!*\
  !*** ../xgplayer-codec/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Nalunit: __webpack_require__(/*! ./src/h264/nalunit */ "../xgplayer-codec/src/h264/nalunit/index.js").default,
  SpsParser: __webpack_require__(/*! ./src/h264/nalunit/sps */ "../xgplayer-codec/src/h264/nalunit/sps.js").default,

  Compatibility: __webpack_require__(/*! ./src/compatibility */ "../xgplayer-codec/src/compatibility.js").default
};


/***/ }),

/***/ "../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
  !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

class AAC {

  static getSilentFrame(codec, channelCount) {
    if (codec === 'mp4a.40.2') {
      // handle LC-AAC
      if (channelCount === 1) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);
      } else if (channelCount === 2) {
        return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);
      } else if (channelCount === 3) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);
      } else if (channelCount === 4) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);
      } else if (channelCount === 5) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);
      } else if (channelCount === 6) {
        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);
      }
    } else {
      // handle HE-AAC (mp4a.40.5 / mp4a.40.29)
      if (channelCount === 1) {
        // ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
      } else if (channelCount === 2) {
        // ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
      } else if (channelCount === 3) {
        // ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
      }
    }
    return null;
  }

}

/* harmony default export */ __webpack_exports__["default"] = (AAC);


/***/ }),

/***/ "../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
  !*** ../xgplayer-codec/src/compatibility.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _aac_aac_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aac/aac-helper */ "../xgplayer-codec/src/aac/aac-helper.js");



const {REMUX_EVENTS} = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"]

class Compatibility {
  constructor () {
    this.nextAudioDts = 0 // 模拟下一段音频数据的dts
    this.nextVideoDts = 0 // 模拟下一段视频数据的dts

    this.lastAudioSamplesLen = 0 // 上一段音频数据的长度
    this.lastVideoSamplesLen = 0 // 上一段视频数据的长度

    this.lastVideoDts = undefined // 上一段音频数据的长度
    this.lastAudioDts = undefined // 上一段视频数据的长度

    this.allAudioSamplesCount = 0 // 音频总数据量(原始帧)
    this.allVideoSamplesCount = 0 // 视频总数据量(原始帧)

    this._firstAudioSample = null
    this._firstVideoSample = null

    this.filledAudioSamples = [] // 补充音频帧（）
    this.filledVideoSamples = [] // 补充视频帧（）
  }

  init () {
    this.before(REMUX_EVENTS.REMUX_MEDIA, this.doFix.bind(this))
  }

  reset () {
    this.nextAudioDts = 0 // 模拟下一段音频数据的dts
    this.nextVideoDts = 0 // 模拟下一段视频数据的dts

    this.lastAudioSamplesLen = 0 // 上一段音频数据的长度
    this.lastVideoSamplesLen = 0 // 上一段视频数据的长度

    this.lastVideoDts = undefined // 上一段音频数据的长度
    this.lastAudioDts = undefined // 上一段视频数据的长度

    this.allAudioSamplesCount = 0 // 音频总数据量(原始帧)
    this.allVideoSamplesCount = 0 // 视频总数据量(原始帧)

    this._firstAudioSample = null
    this._firstVideoSample = null

    this.filledAudioSamples = [] // 补充音频帧（）
    this.filledVideoSamples = [] // 补充视频帧（）
  }

  doFix () {
    const { isFirstAudioSamples, isFirstVideoSamples } = this.getFirstSample()

    this.removeInvalidSamples()

    this.recordSamplesCount()

    if (this._firstVideoSample) {
      this.fixRefSampleDuration(this.videoTrack.meta, this.videoTrack.samples)
    }
    if (this._firstAudioSample) {
      this.fixRefSampleDuration(this.audioTrack.meta, this.audioTrack.samples)
    }

    this.doFixVideo(isFirstVideoSamples)
    this.doFixAudio(isFirstAudioSamples)
  }

  doFixVideo (first) {
    let {samples: videoSamples, meta} = this.videoTrack

    if (meta.frameRate && meta.frameRate.fixed === false) {
      return;
    }

    if (!videoSamples || !videoSamples.length || !this._firstVideoSample) {
      return
    }

    // console.log(`video lastSample, ${videoSamples[videoSamples.length - 1].dts}`)

    const firstSample = videoSamples[0]
    const firstDts = firstSample.dts

    const samplesLen = videoSamples.length;

    // step1. 修复与audio首帧差距太大的问题
    if (first && this._firstAudioSample) {
      const videoFirstDts = this._firstVideoSample.dts
      const audioFirstDts = this._firstAudioSample.dts
      const gap = videoFirstDts - audioFirstDts
      if (gap > (2 * meta.refSampleDuration)) {
        const fillCount = Math.floor(gap / meta.refSampleDuration)

        for (let i = 0; i < fillCount; i++) {
          const clonedFirstSample = Object.assign({}, firstSample) // 视频头部帧缺失需要复制第一帧
          // 重新计算sample的dts和pts
          clonedFirstSample.dts = videoFirstDts - (i + 1) * meta.refSampleDuration
          clonedFirstSample.pts = clonedFirstSample.dts + clonedFirstSample.cts

          videoSamples.unshift(clonedFirstSample)

          this.filledVideoSamples.push({
            dts: clonedFirstSample.dts,
            size: clonedFirstSample.data.byteLength
          })
        }
      }
    }

    let gap
    // step2. 修复samples段之间的间距问题、
    if (this.nextVideoDts) {
      // step1. 处理samples段之间的丢帧情况
      // 当发现duration差距大于2帧时进行补帧
      gap = firstDts - this.nextVideoDts
      const absGap = Math.abs(gap)
      if (gap > (2 * meta.refSampleDuration)) {
        const fillFrameCount = Math.floor(gap / meta.refSampleDuration)

        for (let i = 0; i < fillFrameCount; i++) {
          const clonedSample = Object.assign({}, videoSamples[0])
          const computed = firstDts - (i + 1) * meta.refSampleDuration

          clonedSample.dts = computed > this.nextVideoDts ? computed : this.nextVideoDts // 补的第一帧一定要是nextVideoDts
          clonedSample.pts = clonedSample.dts + clonedSample.cts

          this.videoTrack.samples.unshift(clonedSample)

          this.filledVideoSamples.push({
            dts: clonedSample.dts,
            size: clonedSample.data.byteLength
          })
        }
      } else if (absGap <= 10 && absGap > 0) {
        // 当差距在+-一帧之间时将第一帧的dts强行定位到期望位置
        // console.log('重定位视频帧dts', videoSamples[0].dts, this.nextVideoDts)
        videoSamples[0].dts = this.nextVideoDts
        videoSamples[0].originDts = videoSamples[0].dts
        videoSamples[0].cts = videoSamples[0].cts || videoSamples[0].pts - videoSamples[0].dts
        videoSamples[0].pts = videoSamples[0].dts + videoSamples[0].cts
      }
    }
    const lastDts = videoSamples[videoSamples.length - 1].dts;

    const lastSampleDuration = videoSamples.length >= 2 ? lastDts - videoSamples[videoSamples.length - 2].dts : meta.refSampleDuration

    this.lastVideoSamplesLen = samplesLen
    this.nextVideoDts = lastDts + lastSampleDuration
    this.lastVideoDts = lastDts

    // step2. 修复sample段之内的间距问题
    // step3. 修复samples段内部的dts异常问题
    for (let i = 0, len = videoSamples.length; i < len; i++) {
      const current = videoSamples[i]
      const next = videoSamples[i + 1]

      if (!next) {
        break;
      }

      const duration = next.dts - current.dts;

      if (duration > (2 * meta.refSampleDuration)) {
        // 两帧之间间隔太大，需要补空白帧
        let fillFrameCount = Math.floor(duration / meta.refSampleDuration)

        let fillFrameIdx = 0
        while (fillFrameIdx < fillFrameCount) {
          const fillFrame = Object.assign({}, next)
          fillFrame.dts = current.dts + (fillFrameIdx + 1) * meta.refSampleDuration
          fillFrame.pts = fillFrame.dts + fillFrame.cts
          if (fillFrame < next.dts) {
            videoSamples.splice(i, 0, fillFrame)

            this.filledVideoSamples.push({
              dts: fillFrame.dts,
              size: fillFrame.data.byteLength
            })
          }

          fillFrameIdx++
          i++;
        }
      }
    }

    this.videoTrack.samples = videoSamples;
  }

  doFixAudio (first) {
    let {samples: audioSamples, meta} = this.audioTrack

    if (!audioSamples || !audioSamples.length) {
      return
    }
    // console.log(`audio lastSample, ${audioSamples[audioSamples.length - 1].dts}`)

    const samplesLen = audioSamples.length;
    const silentFrame = _aac_aac_helper__WEBPACK_IMPORTED_MODULE_1__["default"].getSilentFrame(meta.codec, meta.channelCount)

    const firstSample = this._firstAudioSample

    // 对audioSamples按照dts做排序
    audioSamples = Compatibility.sortAudioSamples(audioSamples)

    // step0. 首帧与video首帧间距大的问题
    if (this._firstVideoSample && first) {
      const videoFirstPts = this._firstVideoSample.pts ? this._firstVideoSample.pts : this._firstVideoSample.dts + this._firstVideoSample.cts

      if (firstSample.dts - videoFirstPts > meta.refSampleDuration) {
        const silentSampleCount = Math.floor((firstSample.dts - videoFirstPts) / meta.refSampleDuration)

        for (let i = 0; i < silentSampleCount; i++) {
          const silentSample = {
            data: silentFrame,
            datasize: silentFrame.byteLength,
            dts: firstSample.dts - (i + 1) * meta.refSampleDuration,
            filtered: 0
          }

          audioSamples.unshift(silentSample)

          this.filledAudioSamples.push({
            dts: silentSample.dts,
            size: silentSample.data.byteLength
          })
        }
      }
    }

    let gap
    const firstDts = audioSamples[0].dts

    if (this.nextAudioDts) {
      // step1. 处理samples段之间的丢帧情况
      // 当发现duration差距大于1帧时进行补帧
      gap = firstDts - this.nextAudioDts
      const absGap = Math.abs(gap)

      if (absGap > meta.refSampleDuration && samplesLen === 1 && this.lastAudioSamplesLen === 1) {
        meta.refSampleDurationFixed = undefined
      }

      if (gap > (2 * meta.refSampleDuration)) {
        if (samplesLen === 1 && this.lastAudioSamplesLen === 1) {
          // 如果sample的length一直是1，而且一直不符合refSampleDuration，需要动态修改refSampleDuration
          meta.refSampleDurationFixed = meta.refSampleDurationFixed !== undefined ? meta.refSampleDurationFixed + gap : meta.refSampleDuration + gap
        } else {
          const silentFrameCount = Math.floor(gap / meta.refSampleDuration)

          for (let i = 0; i < silentFrameCount; i++) {
            const computed = firstDts - (i + 1) * meta.refSampleDuration
            const silentSample = Object.assign({}, audioSamples[0], {
              dts: computed > this.nextAudioDts ? computed : this.nextAudioDts
            })

            this.filledAudioSamples.push({
              dts: silentSample.dts,
              size: silentSample.data.byteLength
            })
            this.audioTrack.samples.unshift(silentSample)
          }
        }
      } else if (absGap <= 10 && absGap > 0) {
        // 当差距比较小的时候将音频帧重定位
        // console.log('重定位音频帧dts', audioSamples[0].dts, this.nextAudioDts)
        audioSamples[0].dts = this.nextAudioDts
        audioSamples[0].pts = this.nextAudioDts
      }
    }
    const lastDts = audioSamples[audioSamples.length - 1].dts;
    const lastSampleDuration = audioSamples.length >= 2 ? lastDts - audioSamples[audioSamples.length - 2].dts : meta.refSampleDuration

    this.lastAudioSamplesLen = samplesLen;
    this.nextAudioDts = meta.refSampleDurationFixed ? lastDts + meta.refSampleDurationFixed : lastDts + lastSampleDuration
    this.lastAudioDts = lastDts

    // step3. 修复samples段内部的dts异常问题
    for (let i = 0, len = audioSamples.length; i < len; i++) {
      const current = audioSamples[i]
      const next = audioSamples[i + 1]

      if (!next) {
        break;
      }

      const duration = next.dts - current.dts;
      audioSamples[i].duration = duration;
      /*
      if (duration > (2 * meta.refSampleDuration)) {
        // 两帧之间间隔太大，需要补空白帧
        /**
        let silentFrameCount = Math.floor(duration / meta.refSampleDuration)
        let frameIdx = 0

        while (frameIdx < silentFrameCount) {
          const silentSample = {
            data: silentFrame,
            datasize: silentFrame.byteLength,
            dts: current.dts + (frameIdx + 1) * meta.refSampleDuration,
            filtered: 0,
            isSilent: true
          }

          audioSamples.splice(i, 0, silentSample)

          this.filledAudioSamples.push({
            dts: silentSample.dts,
            size: silentSample.data.byteLength
          })

          frameIdx++
          i++ // 不对静音帧做比较
        }
      } */
    }

    this.audioTrack.samples = Compatibility.sortAudioSamples(audioSamples)
  }

  getFirstSample () {
    // 获取video和audio的首帧数据
    let {samples: videoSamples} = this.videoTrack
    let {samples: audioSamples} = this.audioTrack

    let isFirstVideoSamples = false;
    let isFirstAudioSamples = false;

    if (!this._firstVideoSample && videoSamples.length) {
      this._firstVideoSample = Compatibility.findFirstVideoSample(videoSamples)
      isFirstVideoSamples = true
    }

    if (!this._firstAudioSample && audioSamples.length) {
      this._firstAudioSample = Compatibility.findFirstAudioSample(audioSamples) // 寻找dts最小的帧作为首个音频帧
      isFirstAudioSamples = true
    }

    return {
      isFirstVideoSamples,
      isFirstAudioSamples
    }
  }

  /**
   * 在没有refSampleDuration的问题流中，
   */
  fixRefSampleDuration (meta, samples) {
    const isVideo = meta.type === 'video'
    const allSamplesCount = isVideo ? this.allVideoSamplesCount : this.allAudioSamplesCount
    const firstDts = isVideo ? this._firstVideoSample.dts : this._firstAudioSample.dts
    const filledSamplesCount = isVideo ? this.filledVideoSamples.length : this.filledAudioSamples.length

    if (!meta.refSampleDuration || meta.refSampleDuration <= 0 || Number.isNaN(meta.refSampleDuration)) {
      if (samples.length >= 1) {
        const lastDts = samples[samples.length - 1].dts

        meta.refSampleDuration = Math.floor((lastDts - firstDts) / ((allSamplesCount + filledSamplesCount) - 1)); // 将refSampleDuration重置为计算后的平均值
      }
    } else if (meta.refSampleDuration) {
      if (samples.length >= 3) {
        const lastDts = samples[samples.length - 1].dts
        const firstDts = samples[0].dts
        const durationAvg = (lastDts - firstDts) / samples.length

        meta.refSampleDuration = Math.abs(meta.refSampleDuration - durationAvg) <= meta.refSampleDuration ? meta.refSampleDuration : durationAvg; // 将refSampleDuration重置为计算后的平均值
      }
    }
  }

  /**
   * 记录截止目前一共播放了多少帧
   */
  recordSamplesCount () {
    const { audioTrack, videoTrack } = this

    this.allAudioSamplesCount += audioTrack.samples.length
    this.allVideoSamplesCount += videoTrack.samples.length
  }

  /**
   * 去除不合法的帧（倒退、重复帧）
   */
  removeInvalidSamples () {
    const { _firstVideoSample, _firstAudioSample } = this

    this.audioTrack.samples = this.audioTrack.samples.filter((sample) => {
      return sample.dts >= _firstAudioSample.dts && (this.lastAudioDts === undefined || sample.dts > this.lastAudioDts)
    })

    this.videoTrack.samples = this.videoTrack.samples.filter((sample) => {
      return sample.dts >= _firstVideoSample.dts && (this.lastVideoDts === undefined || sample.dts > this.lastVideoDts)
    })
  }

  static sortAudioSamples (samples) {
    if (samples.length === 1) {
      return samples
    }

    return samples.sort((a, b) => {
      return a.dts - b.dts
    })
  }

  /**
   * 寻找dts最小的sample
   * @param samples
   */
  static findFirstAudioSample (samples) {
    if (!samples || samples.length === 0) {
      return null
    }

    return Compatibility.sortAudioSamples(samples)[0]
  }

  static findFirstVideoSample (samples) {
    if (!samples.length) {
      return null
    }

    const sorted = samples.sort((a, b) => {
      return a.dts - b.dts;
    })

    for (let i = 0, len = sorted.length; i < len; i++) {
      if (sorted[i].isKeyframe) {
        return sorted[i]
      }
    }
  }

  get tracks () {
    return this._context.getInstance('TRACKS')
  }

  get audioTrack () {
    if (this.tracks) {
      return this.tracks.audioTrack
    }
    return null
  }

  get videoTrack () {
    if (this.tracks) {
      return this.tracks.videoTrack
    }
    return null
  }
}
/* harmony default export */ __webpack_exports__["default"] = (Compatibility);


/***/ }),

/***/ "../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Golomb {
  constructor (uint8array) {
    this.TAG = 'Golomb'
    this._buffer = uint8array
    this._bufferIndex = 0
    this._totalBytes = uint8array.byteLength
    this._totalBits = uint8array.byteLength * 8
    this._currentWord = 0
    this._currentWordBitsLeft = 0
  }

  destroy () {
    this._buffer = null
  }

  _fillCurrentWord () {
    let bufferBytesLeft = this._totalBytes - this._bufferIndex
    if (bufferBytesLeft <= 0) {
      // TODO 异常处理
    }

    let bytesRead = Math.min(4, bufferBytesLeft)
    let word = new Uint8Array(4)
    word.set(this._buffer.subarray(this._bufferIndex, this._bufferIndex + bytesRead))
    this._currentWord = new DataView(word.buffer).getUint32(0, false)

    this._bufferIndex += bytesRead
    this._currentWordBitsLeft = bytesRead * 8
  }

  readBits (bits) {
    if (bits > 32) {
      // TODO
    }

    if (bits <= this._currentWordBitsLeft) {
      let result = this._currentWord >>> (32 - bits)
      this._currentWord <<= bits
      this._currentWordBitsLeft -= bits
      return result
    }

    let result = this._currentWordBitsLeft ? this._currentWord : 0
    // eslint-disable-next-line
    result >>> (32 - this._currentWordBitsLeft)
    let bitsNeedLeft = bits - this._currentWordBitsLeft

    this._fillCurrentWord()
    let bitsReadNext = Math.min(bitsNeedLeft, this._currentWordBitsLeft)

    let result2 = this._currentWord >>> (32 - bitsReadNext)
    this._currentWord <<= bitsReadNext
    this._currentWordBitsLeft -= bitsReadNext

    result = (result << bitsReadNext) | result2
    return result
  }

  readBool () {
    return this.readBits(1) === 1
  }

  readByte () {
    return this.readBits(8)
  }

  _skipLeadingZero () {
    let zeroCount
    for (zeroCount = 0; zeroCount < this._currentWordBitsLeft; zeroCount++) {
      if ((this._currentWord & (0x80000000 >>> zeroCount)) !== 0) {
        this._currentWord <<= zeroCount
        this._currentWordBitsLeft -= zeroCount
        return zeroCount
      }
    }
    this._fillCurrentWord()
    return zeroCount + this._skipLeadingZero()
  }

  readUEG () { // unsigned exponential golomb
    let leadingZeros = this._skipLeadingZero()
    return this.readBits(leadingZeros + 1) - 1
  }

  readSEG () { // signed exponential golomb
    let value = this.readUEG()
    if (value & 0x01) {
      return (value + 1) >>> 1
    } else {
      return -1 * (value >>> 1)
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Golomb);


/***/ }),

/***/ "../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sps */ "../xgplayer-codec/src/h264/nalunit/sps.js");

class Nalunit {
  static getNalunits (buffer) {
    if (buffer.length - buffer.position < 4) {
      return [];
    }

    let buf = buffer.dataview;
    let position = buffer.position;
    if (buf.getInt32(position) === 1 ||
    (buf.getInt16(position) === 0 && buf.getInt8(position + 2) === 1)) {
      return Nalunit.getAnnexbNals(buffer);
    } else {
      return Nalunit.getAvccNals(buffer);
    }
  }

  static getAnnexbNals (buffer) {
    let nals = [];
    let position = Nalunit.getHeaderPositionAnnexB(buffer);
    let start = position.pos;
    let end = start;
    while (start < buffer.length - 4) {
      let header = buffer.buffer.slice(start, start + position.headerLength);
      if (position.pos === buffer.position) {
        buffer.skip(position.headerLength);
      }
      position = Nalunit.getHeaderPositionAnnexB(buffer);
      end = position.pos;
      let body = new Uint8Array(buffer.buffer.slice(start + header.byteLength, end));
      let unit = {header, body};
      Nalunit.analyseNal(unit);
      nals.push(unit);
      buffer.skip(end - buffer.position);
      start = end;
    }
    return nals;
  }

  static getAvccNals (buffer) {
    let nals = [];
    while (buffer.position < buffer.length - 4) {
      let length = buffer.dataview.getInt32(buffer.position);
      if (buffer.length - buffer.position >= length) {
        let header = buffer.buffer.slice(buffer.position, buffer.position + 4);
        buffer.skip(4)
        let body = buffer.buffer.slice(buffer.position, buffer.position + length);
        buffer.skip(length);
        let unit = {header, body};
        Nalunit.analyseNal(unit);
        nals.push(unit);
      } else {
        break;
      }
    }
    return nals;
  }

  static analyseNal (unit) {
    let type = unit.body[0] & 0x1f;
    switch (type) {
      case 1:
        // NDR
        unit.ndr = true;
        break;
      case 5:
        // IDR
        unit.idr = true;
        break;
      case 6:
        // SEI
        break;
      case 7:
        // SPS
        unit.sps = _sps__WEBPACK_IMPORTED_MODULE_0__["default"].parseSPS(unit.body);
        break;
      case 8:
        // PPS
        unit.pps = true;
        break;
      case 9:
        // AUD
        break;
      default:
        break;
    }
  }

  static getHeaderPositionAnnexB (buffer) {
    // seperate
    let pos = buffer.position;
    let headerLength = 0;
    while (headerLength !== 3 && headerLength !== 4 && pos < buffer.length - 4) {
      if (buffer.dataview.getInt16(pos) === 0) {
        if (buffer.dataview.getInt16(pos + 2) === 1) {
          // 0x000001
          headerLength = 4;
        } else if (buffer.dataview.getInt8(pos + 2) === 1) {
          headerLength = 3;
        } else {
          pos++;
        }
      } else {
        pos++;
      }
    }

    if (pos === buffer.length - 4) {
      if (buffer.dataview.getInt16(pos) === 0) {
        if (buffer.dataview.getInt16(pos + 2) === 1) {
          // 0x000001
          headerLength = 4;
        }
      } else {
        pos++;
        if (buffer.dataview.getInt16(pos) === 0 && buffer.dataview.getInt8(pos) === 1) {
          // 0x0000001
          headerLength = 3;
        } else {
          pos = buffer.length;
        }
      }
    }
    return {pos, headerLength};
  }

  static getAvcc (sps, pps) {
    let ret = new Uint8Array(sps.byteLength + pps.byteLength + 11);
    ret[0] = 0x01;
    ret[1] = sps[1];
    ret[2] = sps[2];
    ret[3] = sps[3];
    ret[4] = 255;
    ret[5] = 225;

    let offset = 6;

    ret.set(new Uint8Array([(sps.byteLength >>> 8) & 0xff, sps.byteLength & 0xff]), offset);
    offset += 2;
    ret.set(sps, offset);
    offset += sps.byteLength;

    ret[offset] = 1;
    offset++;

    ret.set(new Uint8Array([(pps.byteLength >>> 8) & 0xff, pps.byteLength & 0xff]), offset);
    offset += 2;
    ret.set(pps, offset);
    return ret;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Nalunit);


/***/ }),

/***/ "../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _golomb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./golomb */ "../xgplayer-codec/src/h264/nalunit/golomb.js");
/* eslint-disable camelcase  */
/* eslint-disable one-var  */


class SPSParser {
  static _ebsp2rbsp (uint8array) {
    let src = uint8array
    let srcLength = src.byteLength
    let dst = new Uint8Array(srcLength)
    let dstIdx = 0

    for (let i = 0; i < srcLength; i++) {
      if (i >= 2) {
        if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {
          continue
        }
      }
      dst[dstIdx] = src[i]
      dstIdx++
    }

    return new Uint8Array(dst.buffer, 0, dstIdx)
  }

  static parseSPS (uint8array) {
    let rbsp = SPSParser._ebsp2rbsp(uint8array)
    let gb = new _golomb__WEBPACK_IMPORTED_MODULE_0__["default"](rbsp)

    gb.readByte()
    let profileIdc = gb.readByte()
    gb.readByte()
    let levelIdc = gb.readByte()
    gb.readUEG()

    let profile_string = SPSParser.getProfileString(profileIdc)
    let level_string = SPSParser.getLevelString(levelIdc)
    let chroma_format_idc = 1
    let chroma_format = 420
    let chroma_format_table = [0, 420, 422, 444]
    let bit_depth = 8

    if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 ||
      profileIdc === 244 || profileIdc === 44 || profileIdc === 83 ||
      profileIdc === 86 || profileIdc === 118 || profileIdc === 128 ||
      profileIdc === 138 || profileIdc === 144) {
      chroma_format_idc = gb.readUEG()
      if (chroma_format_idc === 3) {
        gb.readBits(1)
      }
      if (chroma_format_idc <= 3) {
        chroma_format = chroma_format_table[chroma_format_idc]
      }

      bit_depth = gb.readUEG() + 8
      gb.readUEG()
      gb.readBits(1)
      if (gb.readBool()) {
        let scaling_list_count = (chroma_format_idc !== 3) ? 8 : 12
        for (let i = 0; i < scaling_list_count; i++) {
          if (gb.readBool()) {
            if (i < 6) {
              SPSParser._skipScalingList(gb, 16)
            } else {
              SPSParser._skipScalingList(gb, 64)
            }
          }
        }
      }
    }
    gb.readUEG()
    let pic_order_cnt_type = gb.readUEG()
    if (pic_order_cnt_type === 0) {
      gb.readUEG()
    } else if (pic_order_cnt_type === 1) {
      gb.readBits(1)
      gb.readSEG()
      gb.readSEG()
      let num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG()
      for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {
        gb.readSEG()
      }
    }
    gb.readUEG()
    gb.readBits(1)

    let pic_width_in_mbs_minus1 = gb.readUEG()
    let pic_height_in_map_units_minus1 = gb.readUEG()

    let frame_mbs_only_flag = gb.readBits(1)
    if (frame_mbs_only_flag === 0) {
      gb.readBits(1)
    }
    gb.readBits(1)

    let frame_crop_left_offset = 0
    let frame_crop_right_offset = 0
    let frame_crop_top_offset = 0
    let frame_crop_bottom_offset = 0

    let frame_cropping_flag = gb.readBool()
    if (frame_cropping_flag) {
      frame_crop_left_offset = gb.readUEG()
      frame_crop_right_offset = gb.readUEG()
      frame_crop_top_offset = gb.readUEG()
      frame_crop_bottom_offset = gb.readUEG()
    }

    let par_width = 1, par_height = 1
    let fps = 0, fps_fixed = true, fps_num = 0, fps_den = 0

    let vui_parameters_present_flag = gb.readBool()
    if (vui_parameters_present_flag) {
      if (gb.readBool()) { // aspect_ratio_info_present_flag
        let aspect_ratio_idc = gb.readByte()
        let par_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2]
        let par_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1]

        if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {
          par_width = par_w_table[aspect_ratio_idc - 1]
          par_height = par_h_table[aspect_ratio_idc - 1]
        } else if (aspect_ratio_idc === 255) {
          par_width = gb.readByte() << 8 | gb.readByte()
          par_height = gb.readByte() << 8 | gb.readByte()
        }
      }

      if (gb.readBool()) {
        gb.readBool()
      }
      if (gb.readBool()) {
        gb.readBits(4)
        if (gb.readBool()) {
          gb.readBits(24)
        }
      }
      if (gb.readBool()) {
        gb.readUEG()
        gb.readUEG()
      }
      if (gb.readBool()) {
        let num_units_in_tick = gb.readBits(32)
        let time_scale = gb.readBits(32)
        fps_fixed = gb.readBool()

        fps_num = time_scale
        fps_den = num_units_in_tick * 2
        fps = fps_num / fps_den
      }
    }

    let parScale = 1
    if (par_width !== 1 || par_height !== 1) {
      parScale = par_width / par_height
    }

    let crop_unit_x = 0, crop_unit_y = 0
    if (chroma_format_idc === 0) {
      crop_unit_x = 1
      crop_unit_y = 2 - frame_mbs_only_flag
    } else {
      let sub_wc = (chroma_format_idc === 3) ? 1 : 2
      let sub_hc = (chroma_format_idc === 1) ? 2 : 1
      crop_unit_x = sub_wc
      crop_unit_y = sub_hc * (2 - frame_mbs_only_flag)
    }

    let codec_width = (pic_width_in_mbs_minus1 + 1) * 16
    let codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16)

    codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x
    codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y

    let present_width = Math.ceil(codec_width * parScale)

    gb.destroy()
    gb = null

    return {
      profile_string: profile_string,
      level_string: level_string,
      bit_depth: bit_depth,
      chroma_format: chroma_format,
      chroma_format_string: SPSParser.getChromaFormatString(chroma_format),

      frame_rate: {
        fixed: fps_fixed,
        fps: fps,
        fps_den: fps_den,
        fps_num: fps_num
      },

      par_ratio: {
        width: par_width,
        height: par_height
      },

      codec_size: {
        width: codec_width,
        height: codec_height
      },

      present_size: {
        width: present_width,
        height: codec_height
      }
    }
  }

  static _skipScalingList (gb, count) {
    let last_scale = 8, next_scale = 8
    let delta_scale = 0
    for (let i = 0; i < count; i++) {
      if (next_scale !== 0) {
        delta_scale = gb.readSEG()
        next_scale = (last_scale + delta_scale + 256) % 256
      }
      last_scale = (next_scale === 0) ? last_scale : next_scale
    }
  }

  static getProfileString (profileIdc) {
    switch (profileIdc) {
      case 66:
        return 'Baseline'
      case 77:
        return 'Main'
      case 88:
        return 'Extended'
      case 100:
        return 'High'
      case 110:
        return 'High10'
      case 122:
        return 'High422'
      case 244:
        return 'High444'
      default:
        return 'Unknown'
    }
  }

  static getLevelString (levelIdc) {
    return (levelIdc / 10).toFixed(1)
  }

  static getChromaFormatString (chroma) {
    switch (chroma) {
      case 420:
        return '4:2:0'
      case 422:
        return '4:2:2'
      case 444:
        return '4:4:4'
      default:
        return 'Unknown'
    }
  }

  static toVideoMeta (spsConfig) {
    let meta = {}
    if (spsConfig && spsConfig.codec_size) {
      meta.codecWidth = spsConfig.codec_size.width
      meta.codecHeight = spsConfig.codec_size.height
      meta.presentWidth = spsConfig.present_size.width
      meta.presentHeight = spsConfig.present_size.height
    }

    meta.profile = spsConfig.profile_string
    meta.level = spsConfig.level_string
    meta.bitDepth = spsConfig.bit_depth
    meta.chromaFormat = spsConfig.chroma_format

    meta.parRatio = {
      width: spsConfig.par_ratio.width,
      height: spsConfig.par_ratio.height
    }

    meta.frameRate = spsConfig.frame_rate

    let fpsDen = meta.frameRate.fps_den
    let fpsNum = meta.frameRate.fps_num
    meta.refSampleDuration = Math.floor(meta.timescale * (fpsDen / fpsNum))
  }
}

/* harmony default export */ __webpack_exports__["default"] = (SPSParser);


/***/ }),

/***/ "../xgplayer-demux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-demux/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  // HLS
  M3U8Parser: __webpack_require__(/*! ./src/hls/demuxer/m3u8parser */ "../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,
  TsDemuxer: __webpack_require__(/*! ./src/hls/demuxer/ts */ "../xgplayer-demux/src/hls/demuxer/ts.js").default,
  Playlist: __webpack_require__(/*! ./src/hls/playlist */ "../xgplayer-demux/src/hls/playlist.js").default,
  FlvDemuxer: __webpack_require__(/*! ./src/flv/index */ "../xgplayer-demux/src/flv/index.js").default
};


/***/ }),

/***/ "../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AMFParser; });
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);


const DATA_TYPES = {
  NUMBER: 0,
  BOOLEAN: 1,
  STRING: 2,
  OBJECT: 3,
  MIX_ARRAY: 8,
  OBJECT_END: 9,
  STRICT_ARRAY: 10,
  DATE: 11,
  LONE_STRING: 12
}

/**
 * meta信息解析
 */
class AMFParser {
  constructor () {
    this.offset = 0
    this.readOffset = this.offset
  }

  resolve (meta, size) {
    if (size < 3) {
      throw new Error('not enough data for metainfo')
    }
    const metaData = {}
    const name = this.parseValue(meta)
    const value = this.parseValue(meta, size - name.bodySize)
    metaData[name.data] = value.data

    this.resetStatus()
    return metaData
  }

  resetStatus () {
    this.offset = 0
    this.readOffset = this.offset
  }

  parseString (buffer) {
    const dv = new DataView(buffer, this.readOffset)
    const strLen = dv.getUint16(0, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    let str = ''
    if (strLen > 0) {
      str = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["UTF8"].decode(new Uint8Array(buffer, this.readOffset + 2, strLen))
    } else {
      str = ''
    }
    let size = strLen + 2
    this.readOffset += size
    return {
      data: str,
      bodySize: strLen + 2
    }
  }

  parseDate (buffer, size) {
    const dv = new DataView(buffer, this.readOffset, size)
    let ts = dv.getFloat64(0, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    const timeOffset = dv.getInt16(8, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    ts += timeOffset * 60 * 1000

    this.readOffset += 10
    return {
      data: new Date(ts),
      bodySize: 10
    }
  }

  parseObject (buffer, size) {
    const name = this.parseString(buffer, size)
    const value = this.parseValue(buffer, size - name.bodySize)
    return {
      data: {
        name: name.data,
        value: value.data
      },
      bodySize: name.bodySize + value.bodySize,
      isObjEnd: value.isObjEnd
    }
  }

  parseLongString (buffer) {
    const dv = new DataView(buffer, this.readOffset)
    const strLen = dv.getUint32(0, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
    let str = ''
    if (strLen > 0) {
      str = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["UTF8"].decode(new Uint8Array(buffer, this.readOffset + 2, strLen))
    } else {
      str = ''
    }
    // const size = strLen + 4;
    this.readOffset += strLen + 4
    return {
      data: str,
      bodySize: strLen + 4
    }
  }

  /**
   * 解析meta中的变量
   */
  parseValue (data, size) {
    let buffer = new ArrayBuffer()
    if (data instanceof ArrayBuffer) {
      buffer = data
    } else {
      buffer = data.buffer
    }
    const {
      NUMBER,
      BOOLEAN,
      STRING,
      OBJECT,
      MIX_ARRAY,
      OBJECT_END,
      STRICT_ARRAY,
      DATE,
      LONE_STRING
    } = DATA_TYPES
    const dataView = new DataView(buffer, this.readOffset, size)
    let isObjEnd = false
    const type = dataView.getUint8(0)
    let offset = 1
    this.readOffset += 1
    let value = null

    switch (type) {
      case NUMBER: {
        value = dataView.getFloat64(1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
        this.readOffset += 8
        offset += 8
        break
      }
      case BOOLEAN: {
        const boolNum = dataView.getUint8(1)
        value = !!boolNum
        this.readOffset += 1
        offset += 1
        break
      }
      case STRING: {
        const str = this.parseString(buffer)
        value = str.data
        offset += str.bodySize
        break
      }
      case OBJECT: {
        value = {}
        let objEndSize = 0
        if (dataView.getUint32(size - 4, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF) {
          objEndSize = 3
        }
        // this.readOffset += offset - 1;
        while (offset < size - 4) {
          const amfObj = this.parseObject(buffer, size - offset - objEndSize)
          if (amfObj.isObjectEnd) { break }
          value[amfObj.data.name] = amfObj.data.value
          offset += amfObj.bodySize
        }
        if (offset <= size - 3) {
          const mark = dataView.getUint32(offset - 1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF
          if (mark === 9) {
            this.readOffset += 3
            offset += 3
          }
        }
        break
      }
      case MIX_ARRAY: {
        value = {}
        offset += 4
        this.readOffset += 4
        let objEndSize = 0
        if ((dataView.getUint32(size - 4, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF) === 9) {
          objEndSize = 3
        }

        while (offset < size - 8) {
          const amfVar = this.parseObject(buffer, size - offset - objEndSize)
          if (amfVar.isObjectEnd) { break }
          value[amfVar.data.name] = amfVar.data.value
          offset += amfVar.bodySize
        }
        if (offset <= size - 3) {
          const marker = dataView.getUint32(offset - 1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"]) & 0x00FFFFFF
          if (marker === 9) {
            offset += 3
            this.readOffset += 3
          }
        }
        break
      }

      case OBJECT_END: {
        value = null
        isObjEnd = true
        break
      }

      case STRICT_ARRAY: {
        value = []
        const arrLength = dataView.getUint32(1, !xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["isLe"])
        offset += 4
        this.readOffset += 4
        for (let i = 0; i < arrLength; i++) {
          const script = this.parseValue(buffer, size - offset)
          value.push(script.data)
          offset += script.bodySize
        }
        break
      }

      case DATE: {
        const date = this.parseDate(buffer, size - 1)
        value = date.data
        offset += date.bodySize
        break
      }

      case LONE_STRING: {
        const longStr = this.parseLongString(buffer, size - 1)
        value = longStr.data
        offset += longStr.bodySize
        break
      }

      default: {
        offset = size
      }
    }

    return {
      data: value,
      bodySize: offset,
      isObjEnd: isObjEnd
    }
  }
}


/***/ }),

/***/ "../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
  !*** ../xgplayer-demux/src/flv/index.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-codec */ "../xgplayer-codec/index.js");
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xgplayer-buffer */ "../xgplayer-buffer/index.js");
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _amf_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./amf-parser */ "../xgplayer-demux/src/flv/amf-parser.js");






const DEMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"].DEMUX_EVENTS;

class FlvDemuxer {
  constructor () {
    this._firstFragmentLoaded = false
    this._trackNum = 0
    this._hasScript = false
  }

  init () {
    this.on(DEMUX_EVENTS.DEMUX_START, this.doParseFlv.bind(this))
  }

  /**
   * if the flv head is valid
   * @param data
   * @returns {boolean}
   */
  static isFlvFile (data) {
    return !(data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01)
  }

  /**
   * If the stream has audio or video.
   * @param {number} streamFlag - Data from the stream which is define whether the audio / video track is exist.
   */
  static getPlayType (streamFlag) {
    const result = {
      hasVideo: false,
      hasAudio: false
    }

    if (streamFlag & 0x01 > 0) {
      result.hasVideo = true
    }

    if (streamFlag & 0x04 > 0) {
      result.hasAudio = true
    }

    return result
  }

  doParseFlv () {
    if (!this._firstFragmentLoaded) {
      if (this.loaderBuffer.length < 13) {
        return
      }
      const header = this.loaderBuffer.shift(13)
      this.parseFlvHeader(header)
      this.doParseFlv() // 递归调用，继续解析flv流
    } else {
      if (this.loaderBuffer.length < 11) {
        return
      }
      let chunk;
      do {
        chunk = this._parseFlvTag()
      } while (chunk)

      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE)
    }
  }

  parseFlvHeader (header) {
    if (!FlvDemuxer.isFlvFile(header)) {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error('invalid flv file'))
      this.doParseFlv()
    } else {
      this._firstFragmentLoaded = true
      const playType = FlvDemuxer.getPlayType(header[4])

      if (playType.hasVideo) {
        this.initVideoTrack()
      }

      if (playType.hasAudio) {
        this.initAudioTrack()
      }
    }
    this.doParseFlv()
  }

  /**
   * init default video track configs
   */
  initVideoTrack () {
    this._trackNum++
    let videoTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__["VideoTrack"]()
    videoTrack.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["VideoTrackMeta"]()
    videoTrack.id = videoTrack.meta.id = this._trackNum

    this.tracks.videoTrack = videoTrack
  }

  /**
   * init default audio track configs
   */
  initAudioTrack () {
    this._trackNum++
    let audioTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_2__["AudioTrack"]()
    audioTrack.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["AudioTrackMeta"]()
    audioTrack.id = audioTrack.meta.id = this._trackNum

    this.tracks.audioTrack = audioTrack
  }

  /**
   * Package the data as the following data structure
   * {
   *    data: Uint8Array. the Stream data.
   *    info: The first byte info of the Tag.
   *    tagType: 8、9、18
   *    timeStamp: the timestemp
   * }
   */
  _parseFlvTag () {
    if (this.loaderBuffer.length < 11) {
      return null
    }
    let chunk = this._parseFlvTagHeader()
    if (chunk) {
      this._processChunk(chunk)
    }
    return chunk
  }

  /**
   * Parse the 11 byte tag Header
   */
  _parseFlvTagHeader () {
    let offset = 0
    let chunk = {}

    let tagType = this.loaderBuffer.toInt(offset, 1)
    offset += 1

    // 2 bit FMS reserved, 1 bit filtered, 5 bit tag type
    chunk.filtered = (tagType & 32) >>> 5
    chunk.tagType = tagType & 31

    // 3 Byte datasize
    chunk.datasize = this.loaderBuffer.toInt(offset, 3)
    offset += 3

    if ((chunk.tagType !== 8 && chunk.tagType !== 9 && chunk.tagType !== 11 && chunk.tagType !== 18) ||
      this.loaderBuffer.toInt(8, 3) !== 0) {
      if (this.loaderBuffer && this.loaderBuffer.length > 0) {
        this.loaderBuffer.shift(1)
      }
      this.logger.warn(this.TAG, 'tagType ' + chunk.tagType)
      return null
    }

    if (this.loaderBuffer.length < chunk.datasize + 15) {
      return null
    }

    // read the data.
    this.loaderBuffer.shift(4)

    // 3 Byte timestamp
    let timestamp = this.loaderBuffer.toInt(0, 3)
    this.loaderBuffer.shift(3)

    // 1 Byte timestampExt
    let timestampExt = this.loaderBuffer.shift(1)[0]
    if (timestampExt > 0) {
      timestamp += timestampExt * 0x1000000
    }

    chunk.dts = timestamp

    // streamId
    this.loaderBuffer.shift(3)
    return chunk
  }

  _processChunk (chunk) {
    switch (chunk.tagType) {
      case 18:
        this._parseScriptData(chunk)
        break
      case 8:
        this._parseAACData(chunk)
        break
      case 9:
        this._parseHevcData(chunk)
        break
      case 11:
        // for some CDN that did not process the currect RTMP messages
        this.loaderBuffer.shift(3)
        break
      default:
        this.loaderBuffer.shift(1)
    }
  }

  /**
   * parse flv script data
   * @param chunk
   * @private
   */
  _parseScriptData (chunk) {
    let audioTrack = this.tracks.audioTrack
    let videoTrack = this.tracks.videoTrack

    let data = this.loaderBuffer.shift(chunk.datasize)

    const info = new _amf_parser__WEBPACK_IMPORTED_MODULE_3__["default"]().resolve(data, data.length)

    const onMetaData = this._context.onMetaData = info ? info.onMetaData : undefined

    // fill mediaInfo
    this._context.mediaInfo.duration = onMetaData.duration
    this._context.mediaInfo.hasVideo = onMetaData.hasVideo
    this._context.mediaInfo.hsaAudio = onMetaData.hasAudio

    let validate = this._datasizeValidator(chunk.datasize)
    if (validate) {
      this.emit(DEMUX_EVENTS.MEDIA_INFO)
      this._hasScript = true
    }

    // Edit default meta.
    if (audioTrack && !audioTrack.hasSpecificConfig) {
      let meta = audioTrack.meta
      if (onMetaData.audiosamplerate) {
        meta.sampleRate = onMetaData.audiosamplerate
      }

      if (onMetaData.audiochannels) {
        meta.channelCount = onMetaData.audiochannels
      }

      switch (onMetaData.audiosamplerate) {
        case 44100:
          meta.sampleRateIndex = 4
          break
        case 22050:
          meta.sampleRateIndex = 7
          break
        case 11025:
          meta.sampleRateIndex = 10
          break
      }
    }
    if (videoTrack && !videoTrack.hasSpecificConfig) {
      let meta = videoTrack.meta
      if (typeof onMetaData.framerate === 'number') {
        let fpsNum = Math.floor(onMetaData.framerate * 1000)
        if (fpsNum > 0) {
          let fps = fpsNum / 1000
          if (!meta.frameRate) {
            meta.frameRate = {}
          }
          meta.frameRate.fixed = true
          meta.frameRate.fps = fps
          meta.frameRate.fps_num = fpsNum
          meta.frameRate.fps_den = 1000
        }
      }
    }
  }

  _aacSequenceHeaderParser (data) {
    let ret = {}
    ret.hasSpecificConfig = true
    ret.objectType = data[1] >>> 3
    ret.sampleRateIndex = ((data[1] & 7) << 1) | (data[2] >>> 7)
    ret.audiosamplerate = this._switchAudioSampleRate(ret.sampleRateIndex)
    ret.channelCount = (data[2] & 120) >>> 3
    ret.frameLength = (data[2] & 4) >>> 2
    ret.dependsOnCoreCoder = (data[2] & 2) >>> 1
    ret.extensionFlagIndex = data[2] & 1

    ret.codec = `mp4a.40.${ret.objectType}`
    let userAgent = window.navigator.userAgent.toLowerCase();
    let extensionSamplingIndex;

    let config;
    let samplingIndex = ret.sampleRateIndex;

    if (userAgent.indexOf('firefox') !== -1) {
      // firefox: use SBR (HE-AAC) if freq less than 24kHz
      if (ret.sampleRateIndex >= 6) {
        ret.objectType = 5;
        config = new Array(4);
        extensionSamplingIndex = samplingIndex - 3;
      } else { // use LC-AAC
        ret.objectType = 2;
        config = new Array(2);
        extensionSamplingIndex = samplingIndex;
      }
    } else if (userAgent.indexOf('android') !== -1) {
      // android: always use LC-AAC
      ret.objectType = 2;
      config = new Array(2);
      extensionSamplingIndex = samplingIndex;
    } else {
      // for other browsers, e.g. chrome...
      // Always use HE-AAC to make it easier to switch aac codec profile
      ret.objectType = 5;
      extensionSamplingIndex = ret.sampleRateIndex;
      config = new Array(4);

      if (ret.sampleRateIndex >= 6) {
        extensionSamplingIndex = ret.sampleRateIndex - 3;
      } else if (ret.channelCount === 1) { // Mono channel
        ret.objectType = 2;
        config = new Array(2);
        extensionSamplingIndex = ret.sampleRateIndex;
      }
    }

    config[0] = ret.objectType << 3;
    config[0] |= (ret.sampleRateIndex & 0x0F) >>> 1;
    config[1] = (ret.sampleRateIndex & 0x0F) << 7;
    config[1] |= (ret.channelCount & 0x0F) << 3;
    if (ret.objectType === 5) {
      config[1] |= ((extensionSamplingIndex & 0x0F) >>> 1);
      config[2] = (extensionSamplingIndex & 0x01) << 7;
      // extended audio object type: force to 2 (LC-AAC)
      config[2] |= (2 << 2);
      config[3] = 0;
    }
    ret.config = config
    return ret
  }

  _parseAACData (chunk) {
    let track = this.tracks.audioTrack
    if (!track) {
      return
    }

    let meta = track.meta

    if (!meta) {
      meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["AudioTrackMeta"]()
    }

    let info = this.loaderBuffer.shift(1)[0]

    chunk.data = this.loaderBuffer.shift(chunk.datasize - 1)

    let format = (info & 240) >>> 4

    track.format = format

    if (format !== 10) {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error(`invalid audio format: ${format}`))
    }

    if (format === 10 && !this._hasAudioSequence) {
      meta.sampleRate = this._switchAudioSamplingFrequency(info)
      meta.sampleRateIndex = (info & 12) >>> 2
      meta.frameLenth = (info & 2) >>> 1
      meta.channelCount = info & 1
      meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale)
    }

    let audioSampleRate = meta.audioSampleRate
    let audioSampleRateIndex = meta.sampleRateIndex
    let refSampleDuration = meta.refSampleDuration

    delete chunk.tagType
    let validate = this._datasizeValidator(chunk.datasize)

    if (chunk.data[0] === 0) { // AAC Sequence Header
      let aacHeader = this._aacSequenceHeaderParser(chunk.data)
      audioSampleRate = aacHeader.audiosamplerate || meta.audioSampleRate
      audioSampleRateIndex = aacHeader.sampleRateIndex || meta.sampleRateIndex
      refSampleDuration = Math.floor(1024 / audioSampleRate * meta.timescale)

      meta.channelCount = aacHeader.channelCount
      meta.sampleRate = audioSampleRate
      meta.sampleRateIndex = audioSampleRateIndex
      meta.refSampleDuration = refSampleDuration
      meta.duration = this._context.mediaInfo.duration * meta.timescale
      meta.config = aacHeader.config
      meta.objectType = aacHeader.objectType;

      const audioMedia = this._context.mediaInfo.audio

      // fill audio media info
      audioMedia.codec = aacHeader.codec
      audioMedia.channelCount = aacHeader.channelCount
      audioMedia.sampleRate = audioSampleRate
      audioMedia.sampleRateIndex = aacHeader.audioSampleRateIndex

      if (this._hasScript && !this._hasAudioSequence) {
        this.emit(DEMUX_EVENTS.METADATA_PARSED, 'audio')
      } else if (this._hasScript && this._hasAudioSequence) {
        this.emit(DEMUX_EVENTS.AUDIO_METADATA_CHANGE)
      }
      ;
      this._hasAudioSequence = true
    } else {
      chunk.data = chunk.data.slice(1, chunk.data.length)
      track.samples.push(chunk)
    }
    if (!validate) {
      const error = new Error('TAG length error at ' + chunk.datasize)
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, error.message)
      this.logger.warn(this.TAG, error.message)
    }
  }

  /**
   * parse hevc/avc video data
   * @param chunk
   * @private
   */
  _parseHevcData (chunk) {
    // header
    let info = this.loaderBuffer.shift(1)[0]
    chunk.frameType = (info & 0xf0) >>> 4
    chunk.isKeyframe = chunk.frameType === 1
    // let tempCodecID = this.tracks.videoTrack.codecID
    let codecID = info & 0x0f
    this.tracks.videoTrack.codecID = codecID

    // hevc和avc的header解析方式一样
    chunk.avcPacketType = this.loaderBuffer.shift(1)[0]
    chunk.cts = this.loaderBuffer.toInt(0, 3)
    this.loaderBuffer.shift(3)

    // 12 for hevc, 7 for avc
    if (codecID === 12) {
      const data = this.loaderBuffer.shift(chunk.datasize - 5)
      chunk.data = data

      if (Number.parseInt(chunk.avcPacketType) !== 0) {
        if (!this._datasizeValidator(chunk.datasize)) {
          this.logger.warn(this.TAG, `invalid video tag datasize: ${chunk.datasize}`)
        }
        let nalu = {}
        let r = 0
        nalu.cts = chunk.cts
        nalu.dts = chunk.dts
        while (chunk.data.length > r) {
          let sizes = chunk.data.slice(Number.parseInt(r), 4 + r)
          nalu.size = sizes[3]
          nalu.size += sizes[2] * 256
          nalu.size += sizes[1] * 256 * 256
          nalu.size += sizes[0] * 256 * 256 * 256
          r += 4
          nalu.data = chunk.data.slice(Number.parseInt(r), nalu.size + r)
          r += nalu.size
          this.tracks.videoTrack.samples.push(nalu)
          this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video')
        }
      } else if (Number.parseInt(chunk.avcPacketType) === 0) {
        if (!this._datasizeValidator(chunk.datasize)) {
          this.logger.warn(this.TAG, `invalid video tag datasize: ${chunk.datasize}`)
        } else {
          this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video')
        }
      }
    } else if (codecID === 7) {
      let data = this.loaderBuffer.shift(chunk.datasize - 5)
      if (data[4] === 0 && data[5] === 0 && data[6] === 0 && data[7] === 1) {
        let avcclength = 0
        for (let i = 0; i < 4; i++) {
          avcclength = avcclength * 256 + data[i]
        }
        avcclength -= 4
        data = data.slice(4, data.length)
        data[3] = avcclength % 256
        avcclength = (avcclength - data[3]) / 256
        data[2] = avcclength % 256
        avcclength = (avcclength - data[2]) / 256
        data[1] = avcclength % 256
        data[0] = (avcclength - data[1]) / 256
      }

      chunk.data = data
      // If it is AVC sequece Header.
      if (chunk.avcPacketType === 0) {
        this._avcSequenceHeaderParser(chunk.data)
        let validate = this._datasizeValidator(chunk.datasize)
        if (validate) {
          if (this._hasScript && !this._hasVideoSequence) {
            this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video')
          } else if (this._hasScript && this._hasVideoSequence) {
            this.emit(DEMUX_EVENTS.VIDEO_METADATA_CHANGE)
          }
          this._hasVideoSequence = true
        }
      } else {
        if (!this._datasizeValidator(chunk.datasize)) {
          this.logger.warn(this.TAG, `invalid video tag datasize: ${chunk.datasize}`)
          return;
        }
        this.tracks.videoTrack.samples.push(chunk)
        // this.emit(DEMUX_EVENTS.DEMUX_COMPLETE)
      }
    } else {
      this.logger.warn(this.TAG, `video codeid is ${codecID}`)
      chunk.data = this.loaderBuffer.shift(chunk.datasize - 1)
      if (!this._datasizeValidator(chunk.datasize)) {
        this.logger.warn(this.TAG, `invalid video tag datasize: ${chunk.datasize}`)
      }
      this.tracks.videoTrack.samples.push(chunk)
      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE)
    }
    delete chunk.tagType
  }

  /**
   * parse avc metadata
   * @param data
   * @private
   */
  _avcSequenceHeaderParser (data) {
    let track = this.tracks.videoTrack

    if (!track) {
      return
    }

    let offset = 0

    if (!track.meta) {
      track.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["VideoTrackMeta"]()
    }
    let meta = track.meta

    meta.configurationVersion = data[0]
    meta.avcProfileIndication = data[1]
    meta.profileCompatibility = data[2]
    meta.avcLevelIndication = data[3] / 10
    meta.nalUnitLength = (data[4] & 0x03) + 1

    let numOfSps = data[5] & 0x1f
    offset = 6
    let config = {}

    // parse SPS
    for (let i = 0; i < numOfSps; i++) {
      let size = data[offset] * 255 + data[offset + 1]
      offset += 2

      let sps = new Uint8Array(size)
      for (let j = 0; j < size; j++) {
        sps[j] = data[offset + j]
      }

      // codec string
      let codecString = 'avc1.'
      for (let j = 1; j < 4; j++) {
        let h = sps[j].toString(16)
        if (h.length < 2) {
          h = '0' + h
        }
        codecString += h
      }

      meta.codec = codecString

      offset += size
      this.tracks.videoTrack.meta.sps = sps
      config = xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__["SpsParser"].parseSPS(sps)
    }

    let numOfPps = data[offset]

    offset++

    for (let i = 0; i < numOfPps; i++) {
      let size = data[offset] * 255 + data[offset + 1]
      offset += 2
      let pps = new Uint8Array(size)
      for (let j = 0; j < size; j++) {
        pps[j] = data[offset + j]
      }
      offset += size
      this.tracks.videoTrack.meta.pps = pps
    }

    Object.assign(meta, xgplayer_codec__WEBPACK_IMPORTED_MODULE_1__["SpsParser"].toVideoMeta(config))

    // fill video media info
    const videoMedia = this._context.mediaInfo.video

    videoMedia.codec = meta.codec
    videoMedia.profile = meta.profile
    videoMedia.level = meta.level
    videoMedia.chromaFormat = meta.chromaFormat
    videoMedia.frameRate = meta.frameRate
    videoMedia.parRatio = meta.parRatio
    videoMedia.width = videoMedia.width === meta.presentWidth ? videoMedia.width : meta.presentWidth
    videoMedia.height = videoMedia.height === meta.presentHeight ? videoMedia.width : meta.presentHeight

    meta.duration = this._context.mediaInfo.duration * meta.timescale
    meta.avcc = new Uint8Array(data.length)
    meta.avcc.set(data)
    track.meta = meta
  }

  /**
   * choose audio sample rate
   * @param samplingFrequencyIndex
   * @returns {number}
   * @private
   */
  _switchAudioSampleRate (samplingFrequencyIndex) {
    let samplingFrequencyList = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350]
    return samplingFrequencyList[samplingFrequencyIndex]
  }

  /**
   * choose audio sampling frequence
   * @param info
   * @returns {number}
   * @private
   */
  _switchAudioSamplingFrequency (info) {
    let samplingFrequencyIndex = (info & 12) >>> 2
    let samplingFrequencyList = [5500, 11025, 22050, 44100, 48000]
    return samplingFrequencyList[samplingFrequencyIndex]
  }

  /**
   * choose audio channel count
   * @param info
   * @returns {number}
   * @private
   */
  _switchAudioChannel (info) {
    let sampleTrackNumIndex = info & 1
    let sampleTrackNumList = [1, 2]
    return sampleTrackNumList[sampleTrackNumIndex]
  }

  /**
   * check datasize is valid use 4 Byte after current tag
   * @param datasize
   * @returns {boolean}
   * @private
   */
  _datasizeValidator (datasize) {
    let datasizeConfirm = this.loaderBuffer.toInt(0, 4)
    this.loaderBuffer.shift(4)
    return datasizeConfirm === datasize + 11
  }

  get loaderBuffer () {
    if (this._context.getInstance('LOADER_BUFFER')) {
      return this._context.getInstance('LOADER_BUFFER')
    } else {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error('找不到 loaderBuffer 实例'))
    }
  }

  get tracks () {
    return this._context.getInstance('TRACKS')
  }

  get logger () {
    return this._context.getInstance('LOGGER')
  }
}

/* harmony default export */ __webpack_exports__["default"] = (FlvDemuxer);


/***/ }),

/***/ "../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Reference: https://tools.ietf.org/html/rfc8216#section-4.3
 */
class M3U8Parser {
  static parse (text, baseurl = '') {
    let ret = {
      duration: 0
    };
    if (!text || !text.split) {
      return;
    }
    let refs = text.split(/\r|\n/);
    refs = refs.filter((ref) => {
      return ref;
    })
    let ref = refs.shift()
    if (!ref.match('#EXTM3U')) {
      // TODO:M3U格式错误。
      return null;
    }
    ref = refs.shift()
    while (ref) {
      let refm = ref.match(/#(.*):(.*)/);
      if (refm && refm.length > 2) {
        switch (refm[1]) {
          case 'EXT-X-VERSION':
            ret.version = parseInt(refm[2]);
            break;
          case 'EXT-X-MEDIA-SEQUENCE':
            ret.sequence = parseInt(refm[2]);
            break;
          case 'EXT-X-TARGETDURATION':
            ret.targetduration = parseFloat(refm[2]);
            break;
          case 'EXTINF':
            M3U8Parser.parseFrag(refm, refs, ret, baseurl);
            break;
          default:
            break;
        }
      }
      ref = refs.shift()
    }
    return ret;
  }

  static parseFrag (refm, refs, ret, baseurl) {
    if (!ret.frags) {
      ret.frags = []
    }

    let freg = {
      start: ret.duration,
      duration: parseFloat(refm[2]) * 1000
    }

    ret.duration += freg.duration;
    let nextline = refs.shift();
    if (nextline.match(/#(.*):(.*)/)) {
      nextline = refs.shift();
    }
    if (nextline.length > 0 && nextline.charAt(0) === '/' && baseurl.match(/.*\/\/.*\.\w+/g)) {
      baseurl = baseurl.match(/.*\/\/.*\.\w+/g)[0];
    }
    if (nextline.match(/.*:\/\/.*/)) {
      freg.url = nextline;
    } else {
      freg.url = baseurl + nextline;
    }
    
    ret.frags.push(freg);
  }

  static parseURL (url) {
    let baseurl = '';
    let urls = url.match(/(.*\/).*\.m3u8/);
    if (urls && urls.length > 0) {
      for (let i = 0; i < urls.length; i++) {
        if (urls[i].match(/.*\/$/g) && urls[i].length > baseurl.length) {
          baseurl = urls[i];
        }
      }
    }
    return baseurl;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (M3U8Parser);


/***/ }),

/***/ "../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-codec */ "../xgplayer-codec/index.js");
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-buffer */ "../xgplayer-buffer/index.js");
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__);




const DEMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["EVENTS"].DEMUX_EVENTS;
const StreamType = {
  0x01: ['video', 'MPEG-1'],
  0x02: ['video', 'MPEG-2'],
  0x1b: ['video', 'AVC.H264'],
  0xea: ['video', 'VC-1'],
  0x03: ['audio', 'MPEG-1'],
  0x04: ['audio', 'MPEG-2'],
  0x0f: ['audio', 'MPEG-2.AAC'],
  0x11: ['audio', 'MPEG-4.AAC'],
  0x80: ['audio', 'LPCM'],
  0x81: ['audio', 'AC3'],
  0x06: ['audio', 'AC3'],
  0x82: ['audio', 'DTS'],
  0x83: ['audio', 'Dolby TrueHD'],
  0x84: ['audio', 'AC3-Plus'],
  0x85: ['audio', 'DTS-HD'],
  0x86: ['audio', 'DTS-MA'],
  0xa1: ['audio', 'AC3-Plus-SEC'],
  0xa2: ['audio', 'DTS-HD-SEC']
};

class TsDemuxer {
  constructor (configs) {
    this.configs = Object.assign({}, configs);
    this.demuxing = false;
    this.pat = [];
    this.pmt = [];
    this._hasVideoMeta = false;
    this._hasAudioMeta = false;
  }

  init () {
    this.on(DEMUX_EVENTS.DEMUX_START, this.demux.bind(this))
  }

  demux () {
    if (this.demuxing) {
      return
    }

    let buffer = this.inputBuffer;
    let frags = { pat: [], pmt: [] };
    let peses = {};

    // Read TS segment
    while (buffer.length >= 188) {
      while (buffer.length >= 1 && buffer.array[0][buffer.offset] !== 71) {
        buffer.shift(1);
      }
      let buf = buffer.shift(188);
      // console.log(buf);
      let tsStream = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["Stream"](buf.buffer);
      let ts = {};
      TsDemuxer.read(tsStream, ts, frags);
      if (ts.pes) {
        if (!peses[ts.header.pid]) {
          peses[ts.header.pid] = [];
        }
        peses[ts.header.pid].push(ts.pes);
        ts.pes.ES.buffer = [ts.pes.ES.buffer];
      } else if (peses[ts.header.pid]) {
        peses[ts.header.pid][peses[ts.header.pid].length - 1].ES.buffer.push(ts.payload.stream);
      }
    }

    // Get Frames data
    for (let i = 0; i < Object.keys(peses).length; i++) {
      let epeses = peses[Object.keys(peses)[i]];
      for (let j = 0; j < epeses.length; j++) {
        epeses[j].id = Object.keys(peses)[i];
        epeses[j].ES.buffer = TsDemuxer.Merge(epeses[j].ES.buffer);
        if (epeses[j].type === 'audio') {
          this.pushAudioSample(epeses[j]);
        } else if (epeses[j].type === 'video') {
          this.pushVideoSample(epeses[j]);
        }
      }
    }

    if (this._hasAudioMeta) {
      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE, 'audio');
    }
    if (this._hasVideoMeta) {
      this.emit(DEMUX_EVENTS.DEMUX_COMPLETE, 'video');
    }
  }

  pushAudioSample (pes) {
    let track;
    if (!this._tracks.audioTrack) {
      this._tracks.audioTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__["AudioTrack"]();
      track = this._tracks.audioTrack;
      track.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["AudioTrackMeta"]({
        audioSampleRate: pes.ES.frequence,
        sampleRate: pes.ES.frequence,
        channelCount: pes.ES.channel,
        codec: 'mp4a.40.' + pes.ES.audioObjectType,
        config: pes.ES.audioConfig,
        id: 2,
        sampleRateIndex: pes.ES.frequencyIndex
      });
      track.meta.refSampleDuration = Math.floor(1024 / track.meta.audioSampleRate * track.meta.timescale);
      if (!this._hasAudioMeta) {
        this._hasAudioMeta = true
        this.emit(DEMUX_EVENTS.METADATA_PARSED, 'audio');
      }
    } else {
      track = this._tracks.audioTrack;
    }
    let data = new Uint8Array(pes.ES.buffer.buffer.slice(pes.ES.buffer.position, pes.ES.buffer.length));
    let dts = parseInt(pes.pts / 90);
    let pts = parseInt(pes.pts / 90);
    let sample = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["AudioTrackSample"]({dts, pts, data});
    track.samples.push(sample);
  }

  pushVideoSample (pes) {
    let nals = xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__["Nalunit"].getNalunits(pes.ES.buffer);
    let track;
    if (!this._tracks.videoTrack) {
      this._tracks.videoTrack = new xgplayer_buffer__WEBPACK_IMPORTED_MODULE_1__["VideoTrack"]();
      track = this._tracks.videoTrack;
      track.meta = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["VideoTrackMeta"]();
    } else {
      track = this._tracks.videoTrack;
    }
    let sampleLength = 0;
    let sps = false;
    let pps = false;
    for (let i = 0; i < nals.length; i++) {
      let nal = nals[i];
      if (nal.sps) {
        // TODO：VideoTrack信息 和 Meta 信息
        if (track.sps && TsDemuxer.compaireUint8(nal.body, track.sps)) {
          continue;
        }

        sps = nal;
        track.sps = nal.body;
        track.meta.chromaFormat = sps.sps.chroma_format
        track.meta.codec = 'avc1.';
        for (var j = 1; j < 4; j++) {
          var h = sps.body[j].toString(16);
          if (h.length < 2) {
            h = '0' + h;
          }
          track.meta.codec += h;
        }
        track.meta.codecHeight = sps.sps.codec_size.height;
        track.meta.codecWidth = sps.sps.codec_size.width;
        track.meta.frameRate = sps.sps.frame_rate;
        track.meta.id = 1;
        track.meta.level = sps.sps.level_string;
        track.meta.presentHeight = sps.sps.present_size.height;
        track.meta.presentWidth = sps.sps.present_size.width;
        track.meta.profile = sps.sps.profile_string;
        track.meta.refSampleDuration = Math.floor(track.meta.timescale * (sps.sps.frame_rate.fps_den / sps.sps.frame_rate.fps_num));
        track.meta.sarRatio = sps.sps.sar_ratio ? sps.sps.sar_ratio : sps.sps.par_ratio;
      } else if (nal.pps) {
        track.pps = nal.body;
        pps = nal;
      } else {
        sampleLength += (4 + nal.body.byteLength);
      }
    }

    if (sps && pps) {
      track.meta.avcc = xgplayer_codec__WEBPACK_IMPORTED_MODULE_0__["Nalunit"].getAvcc(sps.body, pps.body);
      if (!this._hasVideoMeta) {
        this._hasVideoMeta = true
        this.emit(DEMUX_EVENTS.METADATA_PARSED, 'video');
      }
    }

    let data = new Uint8Array(sampleLength);
    let offset = 0;
    let isKeyframe = false;
    for (let i = 0; i < nals.length; i++) {
      let nal = nals[i];
      let length = nal.body.byteLength;
      if (nal.idr) {
        isKeyframe = true;
      }
      if (!nal.pps && !nal.sps) {
        data.set(new Uint8Array([length >>> 24 & 0xff,
          length >>> 16 & 0xff,
          length >>> 8 & 0xff,
          length & 0xff
        ]), offset);
        offset += 4;
        data.set(nal.body, offset);
        offset += length;
      }
    }
    let sample = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["VideoTrackSample"]({
      dts: parseInt(pes.dts / 90),
      pts: parseInt(pes.pts / 90),
      cts: (pes.pts - pes.dts) / 90,
      originDts: pes.dts,
      isKeyframe,
      data
    })
    track.samples.push(sample);
  }

  destory () {
    this.off(DEMUX_EVENTS.DEMUX_START, this.demux);
    this.configs = {};
    this.demuxing = false;
    this.pat = [];
    this.pmt = [];
    this._hasVideoMeta = false;
    this._hasAudioMeta = false;
  }

  static compaireUint8 (a, b) {
    if (a.byteLength !== b.byteLength) {
      return false;
    }
    let ret = true;
    for (let i = 0; i < a.byteLength; i++) {
      if (a[i] !== b[i]) {
        ret = false;
      }
    }
    return ret;
  }
  static Merge (buffers) {
    let data;
    let length = 0;
    let offset = 0;
    for (let i = 0; i < buffers.length; i++) {
      length += (buffers[i].length - buffers[i].position);
    }

    data = new Uint8Array(length);
    for (let i = 0; i < buffers.length; i++) {
      let buffer = buffers[i];
      data.set(new Uint8Array(buffer.buffer, buffer.position), offset);
      offset += buffer.length - buffer.position;
    }
    return new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["Stream"](data.buffer);
  }

  static read (stream, ts, frags) {
    TsDemuxer.readHeader(stream, ts);
    TsDemuxer.readPayload(stream, ts, frags);
    if (ts.header.packet === 'MEDIA' && ts.header.payload === 1 && !ts.unknownPIDs) {
      ts.pes = TsDemuxer.PES(ts);
    }
  }

  static readPayload (stream, ts, frags) {
    let header = ts.header
    let pid = header.pid;
    switch (pid) {
      case 0:
        TsDemuxer.PAT(stream, ts, frags);
        break;
      case 1:
        TsDemuxer.CAT(stream, ts, frags);
        break;
      case 2:
        TsDemuxer.TSDT(stream, ts, frags);
        break;
      case 0x1fff:
        break;
      default:
        // TODO: some的写法不太好，得改
        if (frags.pat.some((item) => { return item.pid === pid; })) {
          TsDemuxer.PMT(stream, ts, frags);
        } else {
          let sts = frags.pmt ? frags.pmt.filter((item) => item.pid === pid) : [];
          if (sts.length > 0) {
            TsDemuxer.Media(stream, ts, StreamType[sts[0].streamType][0])
          } else {
            ts.unknownPIDs = true;
          };
        }
    }
  }

  static readHeader (stream, ts) {
    let header = {};
    header.sync = stream.readUint8();
    let next = stream.readUint16();
    header.error = next >>> 15;
    header.payload = next >>> 14 & 1;
    header.priority = next >>> 13 & 1;
    header.pid = next & 0x1fff;

    next = stream.readUint8();

    header.scrambling = next >> 6 & 0x3; // 是否加密，00表示不加密

    /**
     * 00 ISO/IEC未来使用保留
     * 01 没有调整字段，仅含有184B有效净荷
     * 02 没有有效净荷，仅含有183B调整字段
     * 03 0~182B调整字段后为有效净荷
     */
    header.adaptation = next >> 4 & 0x3;
    header.continuity = next & 15;
    header.packet = header.pid === 0 ? 'PAT' : 'MEDIA';
    ts.header = header;
  }

  static PAT (stream, ts, frags) {
    let ret = {};
    let next = stream.readUint8();
    stream.skip(next);
    next = stream.readUint8();
    ret.tabelID = next;
    next = stream.readUint16();
    ret.error = next >>> 7;
    ret.zero = next >>> 6 & 1;
    ret.sectionLength = next & 0xfff;
    ret.streamID = stream.readUint16();
    ret.current = stream.readUint8() & 1;
    ret.sectionNumber = stream.readUint8();
    ret.lastSectionNumber = stream.readUint8();
    let N = (ret.sectionLength - 9) / 4;
    let list = [];
    for (let i = 0; i < N; i++) {
      let programNumber = stream.readUint16();
      let pid = stream.readUint16() & 0x1fff;
      list.push({
        program: programNumber,
        pid,
        type: programNumber === 0 ? 'network' : 'mapPID'
      });
    }
    if (list.length > 0) {
      frags.pat = frags.pat.concat(list);
    }
    ret.list = list;
    ret.program = stream.readUint16();
    ret.pid = stream.readUint16() & 0x1fff;
    ts.payload = ret;
    // TODO CRC
  }

  static PMT (stream, ts, frags) {
    let ret = {};
    let header = ts.header;
    header.packet = 'PMT';
    let next = stream.readUint8();
    stream.skip(next);
    next = stream.readUint8();
    ret.tableID = next;
    next = stream.readUint16();
    ret.sectionLength = next & 0xfff;
    ret.program = stream.readUint16();
    ret.current = stream.readUint8() & 1;
    ret.order = stream.readUint8();
    ret.lastOrder = stream.readUint8();
    ret.PCR_PID = stream.readUint16() & 0x1fff;
    ret.programLength = stream.readUint16() & 0xfff;
    let N = (ret.sectionLength - 13) / 5;
    let list = [];
    for (let i = 0; i < N; i++) {
      list.push({
        streamType: stream.readUint8(),
        pid: stream.readUint16() & 0x1fff, // 0x07e5 视频，0x07e6
        es: stream.readUint16() & 0xfff
      });
    }
    ret.list = list;
    if (!this.pmt) {
      this.pmt = [];
    }
    frags.pmt = this.pmt.concat(list.map((item) => {
      return {
        pid: item.pid,
        es: item.es,
        streamType: item.streamType,
        program: ret.program
      };
    }));
    ts.payload = ret;
  }

  static Media (stream, ts, type) {
    let header = ts.header;
    let payload = {};
    header.type = type;
    if (header.adaptation === 0x03) {
      payload.adaptationLength = stream.readUint8();
      if (payload.adaptationLength > 0) {
        let next = stream.readUint8();
        payload.discontinue = next >>> 7;
        payload.access = next >>> 6 & 0x01;
        payload.priority = next >>> 5 & 0x01;
        payload.PCR = next >>> 4 & 0x01;
        payload.OPCR = next >>> 3 & 0x01;
        payload.splicePoint = next >>> 2 & 0x01;
        payload.transportPrivate = next >>> 1 & 0x01;
        payload.adaptationField = next & 0x01;
        let _start = stream.position;
        if (payload.PCR === 1) {
          payload.programClockBase = stream.readUint32() << 1;
          next = stream.readUint16();
          payload.programClockBase |= next >>> 15;
          payload.programClockExtension = next & 0x1ff;
        }
        if (payload.OPCR === 1) {
          payload.originProgramClockBase = stream.readUint32() << 1;
          next = stream.readUint16();
          payload.originProgramClockBase += next >>> 15;
          payload.originProgramClockExtension = next & 0x1ff;
        }
        if (payload.splicePoint === 1) {
          payload.spliceCountdown = stream.readUint8();
        }
        if (payload.transportPrivate === 1) {
          let length = stream.readUint8();
          let transportPrivateData = [];
          for (let i = 0; i < length; i++) {
            transportPrivateData.push(stream.readUint8());
          }
        }
        if (payload.adaptationField === 1) {
          let length = stream.readUint8()
          let next = stream.readUint8()
          let start = stream.position;
          let ltw = next >>> 7;
          let piecewise = next >>> 6 & 0x1;
          let seamless = next >>> 5 & 0x1;
          if (ltw === 1) {
            next = stream.readUint16();
            payload.ltwValid = next >>> 15;
            payload.ltwOffset = next & 0xefff;
          }
          if (piecewise === 1) {
            next = stream.readUint24();
            payload.piecewiseRate = next & 0x3fffff;
          }
          if (seamless === 1) {
            next = stream.readInt8();
            payload.spliceType = next >>> 4;
            payload.dtsNextAU1 = next >>> 1 & 0x7;
            payload.marker1 = next & 0x1;
            next = stream.readUint16();
            payload.dtsNextAU2 = next >>> 1;
            payload.marker2 = next & 0x1;
            next = stream.readUint16();
            payload.dtsNextAU3 = next;
          }
          stream.skip(length - 1 - (stream.position - start));
        }
        let lastStuffing = payload.adaptationLength - 1 - (stream.position - _start);
        stream.skip(lastStuffing);
      }
    }
    payload.stream = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_2__["Stream"](stream.buffer.slice(stream.position));
    ts.payload = payload;
  }

  static PES (ts) {
    let ret = {};
    let buffer = ts.payload.stream;
    
    let next = buffer.readUint24();
    if (next !== 1) {
      ret.ES = {};
      ret.ES.buffer = buffer;
    } else {
      let streamID = buffer.readUint8();
      if (streamID >= 0xe0 && streamID <= 0xef) {
        ret.type = 'video';
      }
      if (streamID >= 0xc0 && streamID <= 0xdf) {
        ret.type = 'audio';
      }
      let packetLength = buffer.readUint16();
      ret.packetLength = packetLength;
      if (ret.type === 'video' || ret.type === 'audio') {
        let next = buffer.readUint8();
        let first = next >>> 6;
        if (first !== 0x02) {
          throw new Error('error when parse pes header');
        }
        next = buffer.readUint8();
        ret.ptsDTSFlag = next >>> 6;
        ret.escrFlag = next >>> 5 & 0x01;
        ret.esRateFlag = next >>> 4 & 0x01;
        ret.dsmFlag = next >>> 3 & 0x01;
        ret.additionalFlag = next >>> 2 & 0x01;
        ret.crcFlag = next >>> 1 & 0x01;
        ret.extensionFlag = next & 0x01;
        ret.pesHeaderLength = buffer.readUint8();
        let N1 = ret.pesHeaderLength;

        if (ret.ptsDTSFlag === 2) {
          let pts = [];
          next = buffer.readUint8();
          pts.push(next >>> 1 & 0x07);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          ret.pts = (pts[0] << 30 | pts[1] << 15 | pts[2]);
          N1 -= 5;
          // 视频如果没有dts用pts
          if (ret.type === 'video') {
            ret.dts = ret.pts;
          }
        }
        if (ret.ptsDTSFlag === 3) {
          let pts = [];
          next = buffer.readUint8();
          pts.push(next >>> 1 & 0x07);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          next = buffer.readUint16();
          pts.push(next >>> 1);
          ret.pts = (pts[0] << 30 | pts[1] << 15 | pts[2]);
          let dts = [];
          next = buffer.readUint8();
          dts.push(next >>> 1 & 0x07);
          next = buffer.readUint16();
          dts.push(next >>> 1);
          next = buffer.readUint16();
          dts.push(next >>> 1);
          ret.dts = (dts[0] << 30 | dts[1] << 15 | dts[2]);
          N1 -= 10;
        }
        if (ret.escrFlag === 1) {
          let escr = []
          let ex = [];
          next = buffer.readUint8();
          escr.push(next >>> 3 & 0x07);
          escr.push(next & 0x03);
          next = buffer.readUint16();
          escr.push(next >>> 13);
          escr.push(next & 0x03);
          next = buffer.readUint16();
          escr.push(next >>> 13);
          ex.push(next & 0x03);
          next = buffer.readUint8();
          ex.push(next >>> 1);
          ret.escr = (escr[0] << 30 | escr[1] << 28 | escr[2] << 15 | escr[3] << 13 | escr[4]) * 300 + (ex[0] << 7 | ex[1]);
          N1 -= 6;
        }
        if (ret.esRateFlag === 1) {
          next = buffer.readUint24();
          ret.esRate = next >>> 1 & 0x3fffff;
          N1 -= 3;
        }
        if (ret.dsmFlag === 1) {
          throw new Error('not support DSM_trick_mode');
        }
        if (ret.additionalFlag === 1) {
          next = buffer.readUint8();
          ret.additionalCopyInfo = next & 0x7f;
          N1 -= 1;
        }
        if (ret.crcFlag === 1) {
          ret.pesCRC = buffer.readUint16();
          N1 -= 2;
        }
        if (ret.extensionFlag === 1) {
          throw new Error('not support extension');
        }
        if (N1 > 0) {
          buffer.skip(N1);
        }
        ret.ES = TsDemuxer.ES(buffer, ret.type);
      } else {
        throw new Error('format is not supported');
      }
    }
    return ret;
  }

  static ES (buffer, type) {
    let next;
    let ret = {};
    if (type === 'video') {
      next = buffer.readUint32();
      if (next !== 1) {
        buffer.back(4);
        next = buffer.readUint24();
        if (next !== 1) {
          throw new Error('h264 nal header parse failed');
        }
      }
      buffer.skip(2);// 09 F0
      // TODO readnalu
      ret.buffer = buffer;
    } else if (type === 'audio') {
      next = buffer.readUint16();
      // adts的同步字节，12位
      if (next >>> 4 !== 0xfff) {
        throw new Error('aac ES parse Error');
      }
      const fq = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];
      ret.id = (next >>> 3 & 0x01) === 0 ? 'MPEG-4' : 'MPEG-2';
      ret.layer = next >>> 1 & 0x03;
      ret.absent = next & 0x01;
      next = buffer.readUint16();
      ret.audioObjectType = (next >>> 14 & 0x03) + 1;
      ret.profile = ret.audioObjectType - 1;
      ret.frequencyIndex = next >>> 10 & 0x0f;
      ret.frequence = fq[ret.frequencyIndex];
      ret.channel = next >>> 6 & 0x07;
      ret.frameLength = (next & 0x03) << 11 | (buffer.readUint16() >>> 5);
      ret.audioConfig = TsDemuxer.getAudioConfig(ret.audioObjectType, ret.channel, ret.frequencyIndex);
      buffer.skip(1);
      ret.buffer = buffer;
    } else {
      throw new Error(`ES ${type} is not supported`);
    }

    return ret;
  }

  static TSDT (stream, ts, frags) {
    // TODO
    ts.payload = {};
  }

  static CAT (stream, ts, frags) {
    let ret = {}
    ret.tableID = stream.readUint8();
    let next = stream.readUint16();
    ret.sectionIndicator = next >>> 7;
    ret.sectionLength = next & 0x0fff;
    stream.skip(2);
    next = stream.readUint8();
    ret.version = next >>> 3;
    ret.currentNextIndicator = next & 0x01;
    ret.sectionNumber = stream.readUint8();
    ret.lastSectionNumber = stream.readUint8();
    let N = (this.sectionLength - 9) / 4;
    let list = [];
    for (let i = 0; i < N; i++) {
      list.push({});
    }
    ret.crc32 = stream.readUint32();
    ts.payload = ret;
  }

  static getAudioConfig (audioObjectType, channel, sampleIndex) {
    let userAgent = navigator.userAgent.toLowerCase()
    let config;
    let extensionSampleIndex;
    if (/firefox/i.test(userAgent)) {
      if (sampleIndex >= 6) {
        audioObjectType = 5;
        config = new Array(4);
        extensionSampleIndex = sampleIndex - 3;
      } else {
        audioObjectType = 2;
        config = new Array(2);
        extensionSampleIndex = sampleIndex;
      }
    } else if (userAgent.indexOf('android') !== -1) {
      audioObjectType = 2;
      config = new Array(2);
      extensionSampleIndex = sampleIndex;
    } else {
      audioObjectType = 5;
      config = new Array(4);
      if (sampleIndex >= 6) {
        extensionSampleIndex = sampleIndex - 3;
      } else {
        if (channel === 1) {
          audioObjectType = 2;
          config = new Array(2);
        }
        extensionSampleIndex = sampleIndex;
      }
    }

    config[0] = audioObjectType << 3;
    config[0] |= (sampleIndex & 0x0e) >> 1;
    config[1] = (sampleIndex & 0x01) << 7;
    config[1] |= channel << 3;
    if (audioObjectType === 5) {
      config[1] |= (extensionSampleIndex & 0x0e) >> 1;
      config[2] = (extensionSampleIndex & 0x01) << 7;
      config[2] |= 2 << 2;
      config[3] = 0;
    }
    return config;
  }

  get inputBuffer () {
    return this._context.getInstance(this.configs.inputbuffer);
  }

  get _tracks () {
    return this._context.getInstance('TRACKS');
  }
}

/* harmony default export */ __webpack_exports__["default"] = (TsDemuxer);


/***/ }),

/***/ "../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
  !*** ../xgplayer-demux/src/hls/playlist.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Playlist {
  constructor (configs) {
    this._baseURL = '';
    this._list = {};
    this._ts = {};
    this.version = 0;
    this.sequence = -1;
    this.targetduration = 0;
    this.duration = 0;
    this.fragLength = 0;
    this._lastget = undefined;
    this._audoclear = configs.autoclear || false;
  }

  get list () {
    return this._list;
  }

  set baseURL (baseURL) {
    if (this.baseURL !== baseURL) {
      this.clear();
      this._baseURL = baseURL;
    }
  }

  get baseURL () {
    return this._baseURL;
  }

  push (ts, duration) {
    if (!this._ts[ts]) {
      this._ts[ts] = {duration: duration, downloaded: false, downloading: false, start: this.duration};
      this._list[this.duration] = ts;
      this.duration += duration;
      this.fragLength += 1;
    }
  }

  deleteFrag (url) {
    if (this._ts[url]) {
      if (this._ts[url].start > this._lastget.time) {
        this._lastget = {
          duration: this._ts[url].duration,
          time: this._ts[url].start,
          downloaded: false,
          downloading: false,
          url: url
        }
      }
      delete this._list[this._ts[url].start];
      delete this._ts[url];
      this.fragLength -= 1;
    }
  }

  pushM3U8 (data, deletepre) {
    // 常规信息替换
    if (!data) {
      return;
    }
    this.version = data.version;
    this.targetduration = data.targetduration;

    // 新分片信息
    if (data.sequence > this.sequence) {
      this.sequence = data.sequence;
      let newfraglist = []
      for (let i = 0; i < data.frags.length; i++) {
        let frag = data.frags[i];
        if (!this._ts[frag.url]) {
          newfraglist.push(frag.url)
          this.push(frag.url, frag.duration);
        }
      }
      if (deletepre) {
        let tslist = this.getTsList();
        for (let i = 0; i < tslist.length; i++) {
          if (newfraglist.indexOf(tslist[i]) < 0) {
            this.deleteFrag(tslist[i]);
          }
        }
      }
    }
  }

  getTsList () {
    return Object.keys(this._ts);
  }

  downloaded (tsname, isloaded) {
    let ts = this._ts[tsname];
    if (ts) {
      ts.downloaded = isloaded
    }
  }

  downloading (tsname, loading) {
    let ts = this._ts[tsname];
    if (ts) {
      ts.downloading = loading
    }
  }

  getTsByName (name) {
    return this._ts[name];
  }

  getTs (time) {
    let timelist = Object.keys(this._list);
    let ts;

    if (time === undefined) {
      if (this._lastget) {
        time = this._lastget.time + this._lastget.duration;
      } else {
        time = 0;
      }
    }

    if (timelist.length < 1 || time >= this.duration) {
      return undefined;
    }
    timelist.sort((a, b) => {
      return parseFloat(a) - parseFloat(b)
    });
    for (let i = 0; i < timelist.length; i++) {
      if (time >= parseInt(timelist[i])) {
        let url = this._list[timelist[i]];
        let downloaded = this._ts[url].downloaded;
        let downloading = this._ts[url].downloading;
        ts = {url, downloaded, downloading, time: parseInt(timelist[i]), duration: parseInt(this._ts[url].duration)};
        if (this.autoclear) {
          delete this._ts[this._lastget.url];
          delete this._list[this._lastget.time];
        }
        this._lastget = ts;
      } else {
        break;
      }
    }
    return ts;
  }

  clear () {
    this._baseURL = '';
    this._list = {};
    this._ts = {};
    this.version = 0;
    this.sequence = -1;
    this.targetduration = 0;
    this.duration = 0;
  }

  clearDownloaded () {
    for (let i = 0, l = Object.keys(this._ts).length; i < l; i++) {
      let ts = this._ts[Object.keys(this._ts)[i]];
      ts.downloaded = false;
      ts.downloading = false;
    }
  }

  destroy () {
    this._baseURL = '';
    this._list = {};
    this._ts = {};
    this.version = 0;
    this.sequence = -1;
    this.targetduration = 0;
    this.duration = 0;
    this.fragLength = 0;
    this._lastget = undefined;
    this._audoclear = false;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Playlist);


/***/ }),

/***/ "../xgplayer-loader/index.js":
/*!***********************************!*\
  !*** ../xgplayer-loader/index.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  FetchLoader: __webpack_require__(/*! ./src/fetch-loader */ "../xgplayer-loader/src/fetch-loader.js").default
};


/***/ }),

/***/ "../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader/src/fetch-loader.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);


const LOADER_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"].LOADER_EVENTS;
const READ_STREAM = 0;
const READ_TEXT = 1;
const READ_JSON = 2;
const READ_BUFFER = 3;
class FetchLoader {
  constructor (configs) {
    this.configs = Object.assign({}, configs);
    this.url = null
    this.status = 0
    this.error = null
    this._reader = null;
    this._canceled = false;
    this.readtype = this.configs.readtype;
    this.buffer = this.configs.buffer || 'LOADER_BUFFER';
    this._loaderTaskNo = 0;
  }

  init () {
    this.on(LOADER_EVENTS.LADER_START, this.load.bind(this))
  }

  static get type () {
    return 'loader'
  }

  load (url, opts) {
    let _this = this;
    this.url = url;
    this._canceled = false;

    // TODO: Add Ranges
    let params = this.getParams(opts)
    _this.loading = true
    return fetch(this.url, params).then(function (response) {
      if (response.ok) {
        _this.status = response.status
        return _this._onFetchResponse(response);
      }
      _this.emit(LOADER_EVENTS.LOADER_ERROR, _this, response);
      _this.loading = false;
    }).catch(function (error)  {
      _this.emit(LOADER_EVENTS.LOADER_ERROR, _this, error);
      _this.loading = false;
      throw new Error(error.message)
    })
  }

  _onFetchResponse (response) {
    let _this = this;
    let buffer = this._context.getInstance(this.buffer);
    this._loaderTaskNo++;
    let taskno = this._loaderTaskNo;
    if (response.ok === true) {
      switch (this.readtype) {
        case READ_JSON:
          response.json().then((data) => {
            _this.loading = false
            if (!_this._canceled) {
              if (buffer) {
                buffer.push(data);
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer);
              } else {
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, data);
              }
            }
          });
          break;
        case READ_TEXT:
          response.text().then((data) => {
            _this.loading = false
            if (!_this._canceled) {
              if (buffer) {
                buffer.push(data);
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer);
              } else {
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, data);
              }
            }
          });
          break;
        case READ_BUFFER:
          response.arrayBuffer().then((data) => {
            _this.loading = false
            if (!_this._canceled) {
              if (buffer) {
                buffer.push(new Uint8Array(data));
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer);
              } else {
                _this.emit(LOADER_EVENTS.LOADER_COMPLETE, data);
              }
            }
          });
          break;
        case READ_STREAM:
        default:
          return this._onReader(response.body.getReader(), taskno);
      }
    }
  }

  _onReader (reader, taskno) {
    let buffer = this._context.getInstance(this.buffer);

    if (!buffer) {
      this._reader.cancel();
    }

    this._reader = reader
    if (this.loading === false) {
      return
    }

    let _this = this
    // reader read function returns a Promise. get data when callback and has value.done when disconnected.
    // read方法返回一个Promise. 回调中可以获取到数据。当value.done存在时，说明链接断开。
    this._reader && this._reader.read().then(function (val) {
      if (val.done) {
        // TODO: 完成处理
        _this.loading = false
        _this.status = 0;
        _this.emit(LOADER_EVENTS.LOADER_COMPLETE, buffer)
        return
      }

      if (_this._canceled) {
        _this._reader.cancel()
        return;
      }
      buffer.push(val.value)
      _this.emit(LOADER_EVENTS.LOADER_DATALOADED, buffer)
      return _this._onReader(reader, taskno)
    }).catch((error) => {
      console.error(error);
      _this.emit(LOADER_EVENTS.LOADER_ERROR, _this, error);
      _this.loading = false;
    })
  }

  getParams (opts) {
    let options = Object.assign({}, opts)
    let headers = new Headers()

    let params = {
      method: 'GET',
      headers: headers,
      mode: 'cors',
      cache: 'default'
    }

    // add custmor headers
    // 添加自定义头
    if (typeof this.configs.headers === 'object') {
      let configHeaders = this.configs.headers
      for (let key in configHeaders) {
        if (configHeaders.hasOwnProperty(key)) {
          headers.append(key, configHeaders[key])
        }
      }
    }

    if (typeof options.headers === 'object') {
      let optHeaders = options.headers
      for (let key in optHeaders) {
        if (optHeaders.hasOwnProperty(key)) {
          headers.append(key, optHeaders[key])
        }
      }
    }

    if (options.cors === false) {
      params.mode = 'same-origin'
    }

    // withCredentials is disabled by default
    // withCredentials 在默认情况下不被使用。
    if (options.withCredentials) {
      params.credentials = 'include'
    }

    // TODO: Add ranges;
    return params;
  }

  cancel () {
    if (this._reader) {
      this._reader.cancel()
      this._reader = null
      this.loading = false
      this._canceled = true;
    }
  }

  destroy () {
    this.cancel();
  }
}

/* harmony default export */ __webpack_exports__["default"] = (FetchLoader);


/***/ }),

/***/ "../xgplayer-remux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-remux/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Mp4Remuxer: __webpack_require__(/*! ./src/mp4 */ "../xgplayer-remux/src/mp4/index.js").default
};


/***/ }),

/***/ "../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);


// const UINT32_MAX = Math.pow(2, 32) - 1;
class Fmp4 {
  static size (value) {
    return xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(value)
  }
  static initBox (size, name, ...content) {
    const buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    buffer.write(Fmp4.size(size), Fmp4.type(name), ...content)
    return buffer.buffer
  }
  static extension (version, flag) {
    return new Uint8Array([
      version,
      (flag >> 16) & 0xff,
      (flag >> 8) & 0xff,
      flag & 0xff
    ])
  }
  static ftyp () {
    return Fmp4.initBox(24, 'ftyp', new Uint8Array([
      0x69, 0x73, 0x6F, 0x6D, // isom,
      0x0, 0x0, 0x00, 0x01, // minor_version: 0x01
      0x69, 0x73, 0x6F, 0x6D, // isom
      0x61, 0x76, 0x63, 0x31 // avc1
    ]))
  }
  static moov ({ type, meta }) {
    let size = 8
    let mvhd = Fmp4.mvhd(meta.duration, meta.timescale)
    let trak

    if (type === 'video') {
      trak = Fmp4.videoTrak(meta)
    } else {
      trak = Fmp4.audioTrak(meta)
    }

    let mvex = Fmp4.mvex(meta.duration, meta.timescale || 1000, meta.id);
    [mvhd, trak, mvex].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'moov', mvhd, trak, mvex)
  }
  static mvhd (duration, timescale = 1000) {
    // duration *= timescale;
    let bytes = new Uint8Array([
      0x00, 0x00, 0x00, 0x00, // version(0) + flags     1位的box版本+3位flags   box版本，0或1，一般为0。（以下字节数均按version=0）
      0x00, 0x00, 0x00, 0x00, // creation_time    创建时间  （相对于UTC时间1904-01-01零点的秒数）
      0x00, 0x00, 0x00, 0x00, // modification_time   修改时间

      /**
             * timescale: 4 bytes文件媒体在1秒时间内的刻度值，可以理解为1秒长度
             */
      (timescale >>> 24) & 0xFF,
      (timescale >>> 16) & 0xFF,
      (timescale >>> 8) & 0xFF,
      (timescale) & 0xFF,

      /**
             * duration: 4 bytes该track的时间长度，用duration和time scale值可以计算track时长，比如audio track的time scale = 8000,
             * duration = 560128，时长为70.016，video track的time scale = 600, duration = 42000，时长为70
             */
      (duration >>> 24) & 0xFF,
      (duration >>> 16) & 0xFF,
      (duration >>> 8) & 0xFF,
      (duration) & 0xFF,
      0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0   推荐播放速率，高16位和低16位分别为小数点整数部分和小数部分，即[16.16] 格式，该值为1.0（0x00010000）表示正常前向播放
      /**
             * PreferredVolume(1.0, 2bytes) + reserved(2bytes)
             * 与rate类似，[8.8] 格式，1.0（0x0100）表示最大音量
             */
      0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, //  reserved: 4 + 4 bytes保留位
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // 视频变换矩阵   线性代数
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, // ----end composition matrix----
      0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // pre-defined 保留位
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----
      0xFF, 0xFF, 0xFF, 0xFF // next_track_ID 下一个track使用的id号
    ])
    return Fmp4.initBox(8 + bytes.length, 'mvhd', new Uint8Array(bytes))
  }
  static videoTrak (data) {
    let size = 8

    let tkhd = Fmp4.tkhd({
      id: 1,
      duration: data.duration,
      timescale: data.timescale || 1000,
      width: data.presentWidth,
      height: data.presentHeight,
      type: 'video'
    })
    let mdia = Fmp4.mdia({
      type: 'video',
      timescale: data.timescale || 1000,
      duration: data.duration,
      avcc: data.avcc,
      parRatio: data.parRatio,
      width: data.presentWidth,
      height: data.presentHeight
    });
    [tkhd, mdia].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'trak', tkhd, mdia)
  }
  static audioTrak (data) {
    let size = 8
    let tkhd = Fmp4.tkhd({
      id: 2,
      duration: data.duration,
      timescale: data.timescale || 1000,
      width: 0,
      height: 0,
      type: 'audio'
    })
    let mdia = Fmp4.mdia({
      type: 'audio',
      timescale: data.timescale || 1000,
      duration: data.duration,
      channelCount: data.channelCount,
      samplerate: data.sampleRate,
      config: data.config
    });
    [tkhd, mdia].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'trak', tkhd, mdia)
  }
  static tkhd (data) {
    let id = data.id
    let duration = data.duration
    let width = data.width
    let height = data.height
    let content = new Uint8Array([
      0x00, 0x00, 0x00, 0x07, // version(0) + flags 1位版本 box版本，0或1，一般为0。（以下字节数均按version=0）按位或操作结果值，预定义如下：
      // 0x000001 track_enabled，否则该track不被播放；
      // 0x000002 track_in_movie，表示该track在播放中被引用；
      // 0x000004 track_in_preview，表示该track在预览时被引用。
      // 一般该值为7，1+2+4 如果一个媒体所有track均未设置track_in_movie和track_in_preview，将被理解为所有track均设置了这两项；对于hint track，该值为0
      // hint track 这个特殊的track并不包含媒体数据，而是包含了一些将其他数据track打包成流媒体的指示信息。
      0x00, 0x00, 0x00, 0x00, // creation_time创建时间（相对于UTC时间1904-01-01零点的秒数）
      0x00, 0x00, 0x00, 0x00, // modification time 修改时间
      (id >>> 24) & 0xFF, // track_ID: 4 bytes id号，不能重复且不能为0
      (id >>> 16) & 0xFF,
      (id >>> 8) & 0xFF,
      (id) & 0xFF,
      0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes    保留位
      (duration >>> 24) & 0xFF, // duration: 4 bytes track的时间长度
      (duration >>> 16) & 0xFF,
      (duration >>> 8) & 0xFF,
      (duration) & 0xFF,
      0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes    保留位
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)  视频层，默认为0，值小的在上层.track分组信息，默认为0表示该track未与其他track有群组关系
      0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)    [8.8] 格式，如果为音频track，1.0（0x0100）表示最大音量；否则为0   +保留位
      0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, // 视频变换矩阵
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, // ----end composition matrix----
      (width >>> 8) & 0xFF, // //宽度
      (width) & 0xFF,
      0x00, 0x00,
      (height >>> 8) & 0xFF, // 高度
      (height) & 0xFF,
      0x00, 0x00
    ])
    return Fmp4.initBox(8 + content.byteLength, 'tkhd', content)
  }
  static edts (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let duration = data.duration
    let mediaTime = data.mediaTime
    buffer.write(Fmp4.size(36), Fmp4.type('edts'))
    // elst
    buffer.write(Fmp4.size(28), Fmp4.type('elst'))
    buffer.write(new Uint8Array([
      0x00, 0x00, 0x00, 0x01, // entry count
      (duration >> 24) & 0xff, (duration >> 16) & 0xff, (duration >> 8) & 0xff, duration & 0xff,
      (mediaTime >> 24) & 0xff, (mediaTime >> 16) & 0xff, (mediaTime >> 8) & 0xff, mediaTime & 0xff,
      0x00, 0x00, 0x00, 0x01 // media rate
    ]))
    return buffer.buffer
  }
  static mdia (data) {
    let size = 8
    let mdhd = Fmp4.mdhd(data.timescale, data.duration)
    let hdlr = Fmp4.hdlr(data.type)
    let minf = Fmp4.minf(data);
    [mdhd, hdlr, minf].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'mdia', mdhd, hdlr, minf)
  }
  static mdhd (timescale = 1000, duration) {
    let content = new Uint8Array([
      0x00, 0x00, 0x00, 0x00, // creation_time    创建时间
      0x00, 0x00, 0x00, 0x00, // modification_time修改时间
      (timescale >>> 24) & 0xFF, // timescale: 4 bytes    文件媒体在1秒时间内的刻度值，可以理解为1秒长度
      (timescale >>> 16) & 0xFF,
      (timescale >>> 8) & 0xFF,
      (timescale) & 0xFF,
      (duration >>> 24) & 0xFF, // duration: 4 bytes  track的时间长度
      (duration >>> 16) & 0xFF,
      (duration >>> 8) & 0xFF,
      (duration) & 0xFF,
      0x55, 0xC4, // language: und (undetermined) 媒体语言码。最高位为0，后面15位为3个字符（见ISO 639-2/T标准中定义）
      0x00, 0x00 // pre_defined = 0
    ])
    return Fmp4.initBox(12 + content.byteLength, 'mdhd', Fmp4.extension(0, 0), content)
  }
  static hdlr (type) {
    let value = [0x00, // version 0
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00, // pre_defined
      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00, // reserved
      0x56, 0x69, 0x64, 0x65,
      0x6f, 0x48, 0x61, 0x6e,
      0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'
    ]
    if (type === 'audio') {
      value.splice(8, 4, ...[0x73, 0x6f, 0x75, 0x6e])
      value.splice(24, 13, ...[0x53, 0x6f, 0x75, 0x6e,
        0x64, 0x48, 0x61, 0x6e,
        0x64, 0x6c, 0x65, 0x72, 0x00])
    }
    return Fmp4.initBox(8 + value.length, 'hdlr', new Uint8Array(value))
  }
  static minf (data) {
    let size = 8
    let vmhd = data.type === 'video' ? Fmp4.vmhd() : Fmp4.smhd()
    let dinf = Fmp4.dinf()
    let stbl = Fmp4.stbl(data);
    [vmhd, dinf, stbl].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'minf', vmhd, dinf, stbl)
  }
  static vmhd () {
    return Fmp4.initBox(20, 'vmhd', new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x01, // flags
      0x00, 0x00, // graphicsmode
      0x00, 0x00,
      0x00, 0x00,
      0x00, 0x00 // opcolor
    ]))
  }
  static smhd () {
    return Fmp4.initBox(16, 'smhd', new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, // balance
      0x00, 0x00 // reserved
    ]))
  }
  static dinf () {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let dref = [0x00, // version 0
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x01, // entry_count
      0x00, 0x00, 0x00, 0x0c, // entry_size
      0x75, 0x72, 0x6c, 0x20, // 'url' type
      0x00, // version 0
      0x00, 0x00, 0x01 // entry_flags
    ]
    buffer.write(Fmp4.size(36), Fmp4.type('dinf'), Fmp4.size(28), Fmp4.type('dref'), new Uint8Array(dref))
    return buffer.buffer
  }
  static stbl (data) {
    let size = 8
    let stsd = Fmp4.stsd(data)
    let stts = Fmp4.stts()
    let stsc = Fmp4.stsc()
    let stsz = Fmp4.stsz()
    let stco = Fmp4.stco();
    [stsd, stts, stsc, stsz, stco].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'stbl', stsd, stts, stsc, stsz, stco)
  }
  static stsd (data) {
    let content
    if (data.type === 'audio') {
      // if (!data.isAAC && data.codec === 'mp4') {
      //     content = FMP4.mp3(data);
      // } else {
      //
      // }
      // 支持mp4a
      content = Fmp4.mp4a(data)
    } else {
      content = Fmp4.avc1(data)
    }
    return Fmp4.initBox(16 + content.byteLength, 'stsd', Fmp4.extension(0, 0), new Uint8Array([0x00, 0x00, 0x00, 0x01]), content)
  }
  static mp4a (data) {
    let content = new Uint8Array([
      0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, // reserved
      0x00, 0x01, // data_reference_index
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, data.channelCount, // channelcount
      0x00, 0x10, // sampleSize:16bits
      0x00, 0x00, 0x00, 0x00, // reserved2
      (data.samplerate >> 8) & 0xff,
      data.samplerate & 0xff, //
      0x00, 0x00
    ])
    let esds = Fmp4.esds(data.config)
    return Fmp4.initBox(8 + content.byteLength + esds.byteLength, 'mp4a', content, esds)
  }
  static esds (config = [43, 146, 8, 0]) {
    const configlen = config.length
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let content = new Uint8Array([
      0x00, // version 0
      0x00, 0x00, 0x00, // flags

      0x03, // descriptor_type
      0x17 + configlen, // length
      0x00, 0x01, // es_id
      0x00, // stream_priority

      0x04, // descriptor_type
      0x0f + configlen, // length
      0x40, // codec : mpeg4_audio
      0x15, // stream_type
      0x00, 0x00, 0x00, // buffer_size
      0x00, 0x00, 0x00, 0x00, // maxBitrate
      0x00, 0x00, 0x00, 0x00, // avgBitrate

      0x05 // descriptor_type
    ].concat([configlen]).concat(config).concat([0x06, 0x01, 0x02]))
    buffer.write(Fmp4.size(8 + content.byteLength), Fmp4.type('esds'), content)
    return buffer.buffer
  }
  static avc1 (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let size = 40// 8(avc1)+8(avcc)+8(btrt)+16(pasp)
    // let sps = data.sps
    // let pps = data.pps
    let width = data.width
    let height = data.height
    let hSpacing = data.parRatio.height
    let vSpacing = data.parRatio.width
    // let avccBuffer = new Buffer()
    // avccBuffer.write(new Uint8Array([
    //   0x01, // version
    //   sps[1], // profile
    //   sps[2], // profile compatible
    //   sps[3], // level
    //   0xfc | 3,
    //   0xE0 | 1 // 目前只处理一个sps
    // ].concat([sps.length >>> 8 & 0xff, sps.length & 0xff])))
    // avccBuffer.write(sps, new Uint8Array([1, pps.length >>> 8 & 0xff, pps.length & 0xff]), pps)

    let avcc = data.avcc
    let avc1 = new Uint8Array([
      0x00, 0x00, 0x00, // reserved
      0x00, 0x00, 0x00, // reserved
      0x00, 0x01, // data_reference_index
      0x00, 0x00, // pre_defined
      0x00, 0x00, // reserved
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, // pre_defined
      (width >> 8) & 0xff,
      width & 0xff, // width
      (height >> 8) & 0xff,
      height & 0xff, // height
      0x00, 0x48, 0x00, 0x00, // horizresolution
      0x00, 0x48, 0x00, 0x00, // vertresolution
      0x00, 0x00, 0x00, 0x00, // reserved
      0x00, 0x01, // frame_count
      0x12,
      0x64, 0x61, 0x69, 0x6C, // dailymotion/hls.js
      0x79, 0x6D, 0x6F, 0x74,
      0x69, 0x6F, 0x6E, 0x2F,
      0x68, 0x6C, 0x73, 0x2E,
      0x6A, 0x73, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, // compressorname
      0x00, 0x18, // depth = 24
      0x11, 0x11]) // pre_defined = -1
    let btrt = new Uint8Array([
      0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB
      0x00, 0x2d, 0xc6, 0xc0, // maxBitrate
      0x00, 0x2d, 0xc6, 0xc0 // avgBitrate
    ])
    let pasp = new Uint8Array([
      (hSpacing >> 24), // hSpacing
      (hSpacing >> 16) & 0xff,
      (hSpacing >> 8) & 0xff,
      hSpacing & 0xff,
      (vSpacing >> 24), // vSpacing
      (vSpacing >> 16) & 0xff,
      (vSpacing >> 8) & 0xff,
      vSpacing & 0xff
    ])

    buffer.write(
      Fmp4.size(size + avc1.byteLength + avcc.byteLength + btrt.byteLength), Fmp4.type('avc1'), avc1,
      Fmp4.size(8 + avcc.byteLength), Fmp4.type('avcC'), avcc,
      Fmp4.size(20), Fmp4.type('btrt'), btrt,
      Fmp4.size(16), Fmp4.type('pasp'), pasp
    )
    return buffer.buffer
  }
  static stts () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00 // entry_count
    ])
    return Fmp4.initBox(16, 'stts', content)
  }
  static stsc () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00 // entry_count
    ])
    return Fmp4.initBox(16, 'stsc', content)
  }
  static stco () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00 // entry_count
    ])
    return Fmp4.initBox(16, 'stco', content)
  }
  static stsz () {
    let content = new Uint8Array([
      0x00, // version
      0x00, 0x00, 0x00, // flags
      0x00, 0x00, 0x00, 0x00, // sample_size
      0x00, 0x00, 0x00, 0x00 // sample_count
    ])
    return Fmp4.initBox(20, 'stsz', content)
  }
  static mvex (duration, timescale = 1000, trackID) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let mehd = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(duration)
    buffer.write(Fmp4.size(56), Fmp4.type('mvex'), Fmp4.size(16), Fmp4.type('mehd'), Fmp4.extension(0, 0), mehd, Fmp4.trex(trackID))
    return buffer.buffer
  }
  static trex (id) {
    let content = new Uint8Array([
      0x00, // version 0
      0x00, 0x00, 0x00, // flags
      (id >> 24),
      (id >> 16) & 0xff,
      (id >> 8) & 0xff,
      (id & 0xff), // track_ID
      0x00, 0x00, 0x00, 0x01, // default_sample_description_index
      0x00, 0x00, 0x00, 0x00, // default_sample_duration
      0x00, 0x00, 0x00, 0x00, // default_sample_size
      0x00, 0x01, 0x00, 0x01 // default_sample_flags
    ])
    return Fmp4.initBox(8 + content.byteLength, 'trex', content)
  }
  static moof (data) {
    let size = 8
    let mfhd = Fmp4.mfhd()
    let traf = Fmp4.traf(data);
    [mfhd, traf].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'moof', mfhd, traf)
  }
  static mfhd () {
    let content = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(Fmp4.sequence)
    Fmp4.sequence += 1
    return Fmp4.initBox(16, 'mfhd', Fmp4.extension(0, 0), content)
  }
  static traf (data) {
    let size = 8
    let tfhd = Fmp4.tfhd(data.id)
    let tfdt = Fmp4.tfdt(data.time)
    let sdtp = Fmp4.sdtp(data)
    let trun = Fmp4.trun(data, sdtp.byteLength);

    [tfhd, tfdt, trun, sdtp].forEach(item => {
      size += item.byteLength
    })
    return Fmp4.initBox(size, 'traf', tfhd, tfdt, trun, sdtp)
  }
  static tfhd (id) {
    let content = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(id)
    return Fmp4.initBox(16, 'tfhd', Fmp4.extension(0, 0), content)
  }
  static tfdt (time) {
    // let upper = Math.floor(time / (UINT32_MAX + 1)),
    //     lower = Math.floor(time % (UINT32_MAX + 1));
    return Fmp4.initBox(16, 'tfdt', Fmp4.extension(0, 0), xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(time))
  }
  static trun (data, sdtpLength) {
    // let id = data.id;
    // let ceil = id === 1 ? 16 : 12;
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let sampleCount = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(data.samples.length)
    // mdat-header 8
    // moof-header 8
    // mfhd 16
    // traf-header 8
    // thhd 16
    // tfdt 20
    // trun-header 12
    // sampleCount 4
    // data-offset 4
    // samples.length
    let offset = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"].writeUint32(8 + 8 + 16 + 8 + 16 + 16 + 12 + 4 + 4 + 16 * data.samples.length + sdtpLength)
    buffer.write(Fmp4.size(20 + 16 * data.samples.length), Fmp4.type('trun'), new Uint8Array([0x00, 0x00, 0x0F, 0x01]), sampleCount, offset)

    // let size = buffer.buffer.byteLength
    // let writeOffset = 0
    // data.samples.forEach(() => {
    //   size += 16
    // })
    //
    // let trunBox = new Uint8Array(size)

    // trunBox.set(buffer.buffer, 0)

    data.samples.forEach((item) => {
      const flags = item.flags
      // console.log(item.type, item.dts, item.duration)

      buffer.write(new Uint8Array([
        (item.duration >>> 24) & 0xFF, // sample_duration
        (item.duration >>> 16) & 0xFF,
        (item.duration >>> 8) & 0xFF,
        (item.duration) & 0xFF,
        (item.size >>> 24) & 0xFF, // sample_size
        (item.size >>> 16) & 0xFF,
        (item.size >>> 8) & 0xFF,
        (item.size) & 0xFF,
        (flags.isLeading << 2) | flags.dependsOn, // sample_flags
        (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,
        0x00, 0x00, // sample_degradation_priority
        (item.cts >>> 24) & 0xFF, // sample_composition_time_offset
        (item.cts >>> 16) & 0xFF,
        (item.cts >>> 8) & 0xFF,
        (item.cts) & 0xFF
      ]))
      // writeOffset += 16
      // buffer.write(Buffer.writeUint32(0));
    })
    return buffer.buffer
  }
  static sdtp (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    buffer.write(Fmp4.size(12 + data.samples.length), Fmp4.type('sdtp'), Fmp4.extension(0, 0))
    data.samples.forEach(item => {
      const flags = item.flags
      const num = (flags.isLeading << 6) | // is_leading: 2 (bit)
        (flags.dependsOn << 4) | // sample_depends_on
        (flags.isDependedOn << 2) | // sample_is_depended_on
        (flags.hasRedundancy)// sample_has_redundancy

      buffer.write(new Uint8Array([num]))
    })
    return buffer.buffer
  }
  static mdat (data) {
    let buffer = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let size = 8
    data.samples.forEach(item => {
      size += item.size
    })
    buffer.write(Fmp4.size(size), Fmp4.type('mdat'))
    let mdatBox = new Uint8Array(size)
    let offset = 0
    mdatBox.set(buffer.buffer, offset)
    offset += 8
    data.samples.forEach(item => {
      item.buffer.forEach((unit) => {
        mdatBox.set(unit, offset)
        offset += unit.byteLength
        // buffer.write(unit.data);
      })
    })
    return mdatBox
  }
}
Fmp4.type = (name) => {
  return new Uint8Array([name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)])
}
Fmp4.sequence = 1

/* harmony default export */ __webpack_exports__["default"] = (Fmp4);


/***/ }),

/***/ "../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Mp4Remuxer; });
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _fmp4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fmp4 */ "../xgplayer-remux/src/mp4/fmp4.js");



const REMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["EVENTS"].REMUX_EVENTS

class Mp4Remuxer {
  constructor () {
    this._dtsBase = 0
    this._isDtsBaseInited = false

    this.videoAllDuration = 0
    this.audioAllDuration = 0
  }

  init () {
    this.on(REMUX_EVENTS.REMUX_MEDIA, this.remux.bind(this))
    this.on(REMUX_EVENTS.REMUX_METADATA, this.onMetaDataReady.bind(this))
  }

  destroy () {
    this._dtsBase = -1
    this._dtsBaseInited = false
  }

  reset () {
    this._dtsBase = 0
    this._isDtsBaseInited = false
  }

  remux () {
    const { audioTrack, videoTrack } = this._context.getInstance('TRACKS')
    !this._isDtsBaseInited && this.calcDtsBase(audioTrack, videoTrack)

    this._remuxVideo(videoTrack)
    this._remuxAudio(audioTrack)
  }

  seek () {

  }

  onMetaDataReady (type) {
    let initSegment = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    let ftyp = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].ftyp()
    let moov
    let track

    if (type === 'audio') {
      const { audioTrack } = this._context.getInstance('TRACKS')
      track = audioTrack;
    } else {
      const { videoTrack } = this._context.getInstance('TRACKS')
      track = videoTrack;
    }

    moov = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].moov({ type, meta: track.meta })

    initSegment.write(ftyp, moov)

    let presourcebuffer = this._context.getInstance('PRE_SOURCE_BUFFER');
    let source = presourcebuffer.getSource(type);
    if (!source) {
      source = presourcebuffer.createSource(type);
    }

    source.mimetype = track.meta.codec;
    source.init = initSegment;
    this.emit(REMUX_EVENTS.INIT_SEGMENT, type)
  }

  calcDtsBase (audioTrack, videoTrack) {
    if (!audioTrack.samples.length && !videoTrack.samples.length) {
      return;
    }

    let audioBase = Infinity
    let videoBase = Infinity

    if (audioTrack.samples && audioTrack.samples.length) {
      audioBase = audioTrack.samples[0].dts
    }
    if (videoTrack.samples && videoTrack.samples.length) {
      videoBase = videoTrack.samples[0].dts
    }

    this._dtsBase = Math.min(audioBase, videoBase)
    this._isDtsBaseInited = true
  }

  _remuxVideo (videoTrack) {
    const track = videoTrack

    if (!videoTrack.samples || !videoTrack.samples.length) {
      return
    }

    let {samples} = track
    let firstDts = -1

    const mp4Samples = []
    const mdatBox = {
      samples: []
    }

    while (samples.length) {
      const avcSample = samples.shift()
      const { isKeyframe } = avcSample
      let dts = avcSample.dts - this._dtsBase

      if (firstDts === -1) {
        firstDts = dts
      }

      let cts
      let pts
      if (avcSample.pts) {
        pts = avcSample.pts - this._dtsBase
        cts = pts - dts
      }
      if (avcSample.cts) {
        pts = avcSample.cts + dts
        cts = avcSample.cts
      }

      let mdatSample = {
        buffer: [],
        size: 0
      }
      mdatBox.samples.push(mdatSample)
      mdatSample.buffer.push(avcSample.data)
      mdatSample.size += avcSample.data.byteLength

      let sampleDuration = 0
      if (samples.length >= 1) {
        const nextDts = samples[0].dts - this._dtsBase
        sampleDuration = nextDts - dts
      } else {
        if (mp4Samples.length >= 1) { // lastest sample, use second last duration
          sampleDuration = mp4Samples[mp4Samples.length - 1].duration
        } else { // the only one sample, use reference duration
          sampleDuration = this.videoMeta.refSampleDuration
        }
      }
      this.videoAllDuration += sampleDuration
      mp4Samples.push({
        dts,
        cts,
        pts,
        data: avcSample.data,
        size: avcSample.data.byteLength,
        isKeyframe,
        duration: sampleDuration,
        flags: {
          isLeading: 0,
          dependsOn: isKeyframe ? 2 : 1,
          isDependedOn: isKeyframe ? 1 : 0,
          hasRedundancy: 0,
          isNonSync: isKeyframe ? 0 : 1
        },
        originDts: dts,
        type: 'video'
      })
    }

    let moofMdat = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()

    const moof = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].moof({
      id: track.meta.id,
      time: firstDts,
      samples: mp4Samples
    })
    const mdat = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].mdat(mdatBox)
    moofMdat.write(moof, mdat)

    track.samples = []
    track.length = 0

    let presourcebuffer = this._context.getInstance('PRE_SOURCE_BUFFER');
    let source = presourcebuffer.getSource('video');
    if (!source) {
      source = presourcebuffer.createSource('video');
    }

    source.data.push(moofMdat);

    this.emit(REMUX_EVENTS.MEDIA_SEGMENT, 'video')
  }

  _remuxAudio (track) {
    const {samples} = track
    let firstDts = -1
    let mp4Samples = []

    const mdatBox = {
      samples: []
    }
    if (!samples || !samples.length) {
      return
    }
    let isFirstDtsInited = false
    while (samples.length) {
      let sample = samples.shift()
      const { data } = sample
      let dts = sample.dts - this._dtsBase
      const originDts = dts
      if (!isFirstDtsInited) {
        firstDts = dts
        isFirstDtsInited = true
      }

      let sampleDuration = 0

      if (this.audioMeta.refSampleDurationFixed) {
        sampleDuration = this.audioMeta.refSampleDurationFixed
      } else if (samples.length >= 1) {
        const nextDts = samples[0].dts - this._dtsBase;
        sampleDuration = nextDts - dts
      } else {
        if (mp4Samples.length >= 1) { // use second last sample duration
          sampleDuration = mp4Samples[mp4Samples.length - 1].duration
        } else { // the only one sample, use reference sample duration
          sampleDuration = this.audioMeta.refSampleDuration
        }
      }

      // console.log('remux audio ', dts)
      this.audioAllDuration += sampleDuration
      const mp4Sample = {
        dts,
        pts: dts,
        cts: 0,
        size: data.byteLength,
        duration: sample.duration ? sample.duration : sampleDuration,
        flags: {
          isLeading: 0,
          dependsOn: 2,
          isDependedOn: 1,
          hasRedundancy: 0,
          isNonSync: 0
        },
        isKeyframe: true,
        originDts,
        type: 'audio'
      }

      let mdatSample = {
        buffer: [],
        size: 0
      }
      mdatSample.buffer.push(data)
      mdatSample.size += data.byteLength

      mdatBox.samples.push(mdatSample)

      mp4Samples.push(mp4Sample)
    }

    const moofMdat = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_0__["Buffer"]()
    const moof = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].moof({
      id: track.meta.id,
      time: firstDts,
      samples: mp4Samples
    })
    const mdat = _fmp4__WEBPACK_IMPORTED_MODULE_1__["default"].mdat(mdatBox)
    moofMdat.write(moof, mdat)

    track.samples = []
    track.length = 0

    let presourcebuffer = this._context.getInstance('PRE_SOURCE_BUFFER');
    let source = presourcebuffer.getSource('audio');
    if (!source) {
      source = presourcebuffer.createSource('audio');
    }
    source.data.push(moofMdat);
    this.emit(REMUX_EVENTS.MEDIA_SEGMENT, 'audio', moofMdat)
  }

  initSilentAudio (dts, duration) {
    const unit = Mp4Remuxer.getSilentFrame(this.audioMeta.channelCount)
    return {
      dts,
      pts: dts,
      cts: 0,
      duration,
      unit,
      size: unit.byteLength,
      originDts: dts,
      type: 'video'
    }
  }

  get videoMeta () {
    return this._context.getInstance('TRACKS').videoTrack.meta
  }
  get audioMeta () {
    return this._context.getInstance('TRACKS').audioTrack.meta
  }

  static getSilentFrame (channelCount) {
    if (channelCount === 1) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80])
    } else if (channelCount === 2) {
      return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80])
    } else if (channelCount === 3) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e])
    } else if (channelCount === 4) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38])
    } else if (channelCount === 5) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38])
    } else if (channelCount === 6) {
      return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0])
    }
    return null
  }
}


/***/ }),

/***/ "../xgplayer-utils/index.js":
/*!**********************************!*\
  !*** ../xgplayer-utils/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  Context: __webpack_require__(/*! ./src/context */ "../xgplayer-utils/src/context.js").default,

  // Modules from constants
  EVENTS: __webpack_require__(/*! ./src/constants/events */ "../xgplayer-utils/src/constants/events.js").default,
  WORKER_COMMANDS: __webpack_require__(/*! ./src/constants/worker-commands */ "../xgplayer-utils/src/constants/worker-commands.js").default,

  // Modules from env
  sniffer: __webpack_require__(/*! ./src/env/sniffer */ "../xgplayer-utils/src/env/sniffer.js").default,
  isLe: __webpack_require__(/*! ./src/env/isle */ "../xgplayer-utils/src/env/isle.js").default,
  UTF8: __webpack_require__(/*! ./src/env/utf8 */ "../xgplayer-utils/src/env/utf8.js").default,

  // Models
  MediaInfo: __webpack_require__(/*! ./src/models/media-info */ "../xgplayer-utils/src/models/media-info.js").default,
  MediaSample: __webpack_require__(/*! ./src/models/media-sample */ "../xgplayer-utils/src/models/media-sample.js").default,
  MediaSegment: __webpack_require__(/*! ./src/models/media-segment */ "../xgplayer-utils/src/models/media-segment.js").default,
  MediaSegmentList: __webpack_require__(/*! ./src/models/media-segment-list */ "../xgplayer-utils/src/models/media-segment-list.js").default,
  AudioTrackMeta: __webpack_require__(/*! ./src/models/track-meta */ "../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,
  VideoTrackMeta: __webpack_require__(/*! ./src/models/track-meta */ "../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,
  AudioTrackSample: __webpack_require__(/*! ./src/models/track-sample */ "../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,
  VideoTrackSample: __webpack_require__(/*! ./src/models/track-sample */ "../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,

  // Modules from mse
  Mse: __webpack_require__(/*! ./src/mse/index */ "../xgplayer-utils/src/mse/index.js").default,

  // Modules from write
  Stream: __webpack_require__(/*! ./src/write/stream */ "../xgplayer-utils/src/write/stream.js").default,
  Buffer: __webpack_require__(/*! ./src/write/buffer */ "../xgplayer-utils/src/write/buffer.js").default,

  MobileVideo: __webpack_require__(/*! ./src/mobile/mobile-video */ "../xgplayer-utils/src/mobile/mobile-video.js")
};


/***/ }),

/***/ "../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (ResultConstructor) {
  var totalLength = 0;

  for (var _len = arguments.length, arrays = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    arrays[_key - 1] = arguments[_key];
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = arrays[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var arr = _step.value;

      totalLength += arr.length;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var result = new ResultConstructor(totalLength);
  var offset = 0;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = arrays[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _arr = _step2.value;

      result.set(_arr, offset);
      offset += _arr.length;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return result;
};

/***/ }),

/***/ "../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(/*! ./concat */ "../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js");

var _concat2 = _interopRequireDefault(_concat);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = _concat2.default;

/***/ }),

/***/ "../xgplayer-utils/node_modules/webworkify-webpack/index.js":
/*!******************************************************************!*\
  !*** ../xgplayer-utils/node_modules/webworkify-webpack/index.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function webpackBootstrapFunc (modules) {
/******/  // The module cache
/******/  var installedModules = {};

/******/  // The require function
/******/  function __webpack_require__(moduleId) {

/******/    // Check if module is in cache
/******/    if(installedModules[moduleId])
/******/      return installedModules[moduleId].exports;

/******/    // Create a new module (and put it into the cache)
/******/    var module = installedModules[moduleId] = {
/******/      i: moduleId,
/******/      l: false,
/******/      exports: {}
/******/    };

/******/    // Execute the module function
/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/    // Flag the module as loaded
/******/    module.l = true;

/******/    // Return the exports of the module
/******/    return module.exports;
/******/  }

/******/  // expose the modules object (__webpack_modules__)
/******/  __webpack_require__.m = modules;

/******/  // expose the module cache
/******/  __webpack_require__.c = installedModules;

/******/  // identity function for calling harmony imports with the correct context
/******/  __webpack_require__.i = function(value) { return value; };

/******/  // define getter function for harmony exports
/******/  __webpack_require__.d = function(exports, name, getter) {
/******/    if(!__webpack_require__.o(exports, name)) {
/******/      Object.defineProperty(exports, name, {
/******/        configurable: false,
/******/        enumerable: true,
/******/        get: getter
/******/      });
/******/    }
/******/  };

/******/  // define __esModule on exports
/******/  __webpack_require__.r = function(exports) {
/******/    Object.defineProperty(exports, '__esModule', { value: true });
/******/  };

/******/  // getDefaultExport function for compatibility with non-harmony modules
/******/  __webpack_require__.n = function(module) {
/******/    var getter = module && module.__esModule ?
/******/      function getDefault() { return module['default']; } :
/******/      function getModuleExports() { return module; };
/******/    __webpack_require__.d(getter, 'a', getter);
/******/    return getter;
/******/  };

/******/  // Object.prototype.hasOwnProperty.call
/******/  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/  // __webpack_public_path__
/******/  __webpack_require__.p = "/";

/******/  // on error function for async loading
/******/  __webpack_require__.oe = function(err) { console.error(err); throw err; };

  var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE)
  return f.default || f // try to call default if defined to also support babel esmodule exports
}

var moduleNameReqExp = '[\\.|\\-|\\+|\\w|\/|@]+'
var dependencyRegExp = '\\(\\s*(\/\\*.*?\\*\/)?\\s*.*?(' + moduleNameReqExp + ').*?\\)' // additional chars when output.pathinfo is true

// http://stackoverflow.com/a/2593661/130442
function quoteRegExp (str) {
  return (str + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&')
}

function isNumeric(n) {
  return !isNaN(1 * n); // 1 * n converts integers, integers as string ("123"), 1e3 and "1e3" to integers and strings to NaN
}

function getModuleDependencies (sources, module, queueName) {
  var retval = {}
  retval[queueName] = []

  var fnString = module.toString()
  var wrapperSignature = fnString.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/)
  if (!wrapperSignature) return retval
  var webpackRequireName = wrapperSignature[1]

  // main bundle deps
  var re = new RegExp('(\\\\n|\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g')
  var match
  while ((match = re.exec(fnString))) {
    if (match[3] === 'dll-reference') continue
    retval[queueName].push(match[3])
  }

  // dll deps
  re = new RegExp('\\(' + quoteRegExp(webpackRequireName) + '\\("(dll-reference\\s(' + moduleNameReqExp + '))"\\)\\)' + dependencyRegExp, 'g')
  while ((match = re.exec(fnString))) {
    if (!sources[match[2]]) {
      retval[queueName].push(match[1])
      sources[match[2]] = __webpack_require__(match[1]).m
    }
    retval[match[2]] = retval[match[2]] || []
    retval[match[2]].push(match[4])
  }

  // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3
  var keys = Object.keys(retval);
  for (var i = 0; i < keys.length; i++) {
    for (var j = 0; j < retval[keys[i]].length; j++) {
      if (isNumeric(retval[keys[i]][j])) {
        retval[keys[i]][j] = 1 * retval[keys[i]][j];
      }
    }
  }

  return retval
}

function hasValuesInQueues (queues) {
  var keys = Object.keys(queues)
  return keys.reduce(function (hasValues, key) {
    return hasValues || queues[key].length > 0
  }, false)
}

function getRequiredModules (sources, moduleId) {
  var modulesQueue = {
    main: [moduleId]
  }
  var requiredModules = {
    main: []
  }
  var seenModules = {
    main: {}
  }

  while (hasValuesInQueues(modulesQueue)) {
    var queues = Object.keys(modulesQueue)
    for (var i = 0; i < queues.length; i++) {
      var queueName = queues[i]
      var queue = modulesQueue[queueName]
      var moduleToCheck = queue.pop()
      seenModules[queueName] = seenModules[queueName] || {}
      if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue
      seenModules[queueName][moduleToCheck] = true
      requiredModules[queueName] = requiredModules[queueName] || []
      requiredModules[queueName].push(moduleToCheck)
      var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName)
      var newModulesKeys = Object.keys(newModules)
      for (var j = 0; j < newModulesKeys.length; j++) {
        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || []
        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]])
      }
    }
  }

  return requiredModules
}

module.exports = function (moduleId, options) {
  options = options || {}
  var sources = {
    main: __webpack_require__.m
  }

  var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId)

  var src = ''

  Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {
    var entryModule = 0
    while (requiredModules[module][entryModule]) {
      entryModule++
    }
    requiredModules[module].push(entryModule)
    sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'
    src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\n'
  })

  src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);'

  var blob = new window.Blob([src], { type: 'text/javascript' })
  if (options.bare) { return blob }

  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL

  var workerUrl = URL.createObjectURL(blob)
  var worker = new window.Worker(workerUrl)
  worker.objectURL = workerUrl

  return worker
}


/***/ }),

/***/ "../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const LOADER_EVENTS = {
  LADER_START: 'LOADER_START',
  LOADER_DATALOADED: 'LOADER_DATALOADED',
  LOADER_COMPLETE: 'LOADER_COMPLETE',
  LOADER_ERROR: 'LOADER_ERROR'
}

const DEMUX_EVENTS = {
  DEMUX_START: 'DEMUX_START',
  DEMUX_COMPLETE: 'DEMUX_COMPLETE',
  DEMUX_ERROR: 'DEMUX_ERROR',
  METADATA_PARSED: 'METADATA_PARSED',
  VIDEO_METADATA_CHANGE: 'VIDEO_METADATA_CHANGE',
  AUDIO_METADATA_CHANGE: 'AUDIO_METADATA_CHANGE',
  MEDIA_INFO: 'MEDIA_INFO'
}

const REMUX_EVENTS = {
  REMUX_METADATA: 'REMUX_METADATA',
  REMUX_MEDIA: 'REMUX_MEDIA',
  MEDIA_SEGMENT: 'MEDIA_SEGMENT',
  REMUX_ERROR: 'REMUX_ERROR',
  INIT_SEGMENT: 'INIT_SEGMENT'
}

const MSE_EVENTS = {
  SOURCE_UPDATE_END: 'SOURCE_UPDATE_END'
}

// hls专有events
const HLS_EVENTS = {
  RETRY_TIME_EXCEEDED: 'RETRY_TIME_EXCEEDED'
}

const ALLEVENTS = Object.assign({}, LOADER_EVENTS, DEMUX_EVENTS, REMUX_EVENTS, MSE_EVENTS, HLS_EVENTS)

const FlvAllowedEvents = []
const HlsAllowedEvents = []

for (let key in ALLEVENTS) {
  if (ALLEVENTS.hasOwnProperty(key)) {
    FlvAllowedEvents.push(ALLEVENTS[key])
  }
}

for (let key in ALLEVENTS) {
  if (ALLEVENTS.hasOwnProperty(key)) {
    HlsAllowedEvents.push(ALLEVENTS[key])
  }
}

/* harmony default export */ __webpack_exports__["default"] = ({
  ALLEVENTS,
  HLS_EVENTS,
  REMUX_EVENTS,
  DEMUX_EVENTS,
  MSE_EVENTS,
  LOADER_EVENTS,
  FlvAllowedEvents,
  HlsAllowedEvents
});


/***/ }),

/***/ "../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
  \**********************************************************/
/*! exports provided: CONTEXT_COMOMANDS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTEXT_COMOMANDS", function() { return CONTEXT_COMOMANDS; });
const CONTEXT_COMOMANDS = {
  ON: 'on',
  ONCE: 'once',
  OFF: 'off',
  EMIT: 'emit',
  DESTROY: 'destroy'
}


/***/ }),

/***/ "../xgplayer-utils/src/context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/context.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_media_info__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models/media-info */ "../xgplayer-utils/src/models/media-info.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ "../../node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);



const DIRECT_EMIT_FLAG = '__TO__'

class Context {
  constructor (allowedEvents = []) {
    this._emitter = new events__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]()
    this._instanceMap = {} // 所有的解码流程实例
    this._clsMap = {} // 构造函数的map
    this._inited = false
    this.mediaInfo = new _models_media_info__WEBPACK_IMPORTED_MODULE_0__["default"]()
    this.allowedEvents = allowedEvents
    this._hooks = {} // 注册在事件前/后的钩子，例如 before('DEMUX_COMPLETE')
  }

  /**
   * 从上下文中获取解码流程实例，如果没有实例，构造一个
   * @param tag
   * @param args
   * @returns {*}
   */
  getInstance (tag) {
    if (this._instanceMap[tag]) {
      return this._instanceMap[tag]
    } else {
      // throw new Error(`${tag}实例尚未初始化`)
      return null
    }
  }

  /**
   * 初始化具体实例
   * @param tag
   * @param args
   */
  initInstance (tag, ...args) {
    if (this._clsMap[tag]) {
      const newInstance = new this._clsMap[tag](...args)
      this._instanceMap[tag] = newInstance
      if (newInstance.init) {
        newInstance.init() // TODO: lifecircle
      }
      return newInstance
    } else {
      throw new Error(`${tag}未在context中注册`)
    }
  }

  /**
   * 避免大量的initInstance调用，初始化所有的组件
   * @param config
   */
  init (config) {
    if (this._inited) {
      return
    }
    for (let tag in this._clsMap) {
      // if not inited, init an instance
      if (this._clsMap.hasOwnProperty(tag) && !this._instanceMap[tag]) {
        this.initInstance(tag, config)
      }
    }
    this._inited = true
  }

  /**
   * 注册一个上下文流程，提供安全的事件发送机制
   * @param tag
   * @param cls
   */
  registry (tag, cls) {
    const emitter = this._emitter
    const checkMessageName = this._isMessageNameValid.bind(this)
    const self = this
    const enhanced = class extends cls {
      constructor (...args) {
        super(...args)
        this.listeners = {}
        this.onceListeners = {}
        this.TAG = tag
        this._context = self
      }

      on (messageName, callback) {
        checkMessageName(messageName)

        if (this.listeners[messageName]) {
          this.listeners[messageName].push(callback)
        } else {
          this.listeners[messageName] = [callback]
        }

        emitter.on(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback) // 建立定向通信监听
        return emitter.on(messageName, callback)
      }

      /**
       * 在某个事件触发前执行
       * @param messageName
       * @param callback
       */
      before (messageName, callback) {
        checkMessageName(messageName)
        if (self._hooks[messageName]) {
          self._hooks[messageName].push(callback)
        } else {
          self._hooks[messageName] = [callback]
        }
      }

      once (messageName, callback) {
        checkMessageName(messageName)

        if (this.onceListeners[messageName]) {
          this.onceListeners[messageName].push(callback)
        } else {
          this.onceListeners[messageName] = [callback]
        }

        emitter.once(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback)
        return emitter.once(messageName, callback)
      }

      emit (messageName, ...args) {
        checkMessageName(messageName)

        const beforeList = self._hooks[messageName]
        if (beforeList) {
          for (let i = 0, len = beforeList.length; i < len; i++) {
            const callback = beforeList[i]
            callback()
          }
        }
        return emitter.emit(messageName, ...args)
      }

      /**
       * 定向发送给某个组件单例的消息
       * @param messageName
       * @param args
       */
      emitTo (tag, messageName, ...args) {
        checkMessageName(messageName)

        return emitter.emit(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, ...args)
      }

      off (messageName, callback) {
        checkMessageName(messageName)
        return emitter.off(messageName, callback)
      }

      removeListeners () {
        const hasOwn = Object.prototype.hasOwnProperty.bind(this.listeners)

        for (let messageName in this.listeners) {
          if (hasOwn(messageName)) {
            const callbacks = this.listeners[messageName] || []
            for (let i = 0; i < callbacks.length; i++) {
              const callback = callbacks[i]
              emitter.off(messageName, callback)
              emitter.off(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback)
            }
          }
        }

        for (let messageName in this.onceListeners) {
          if (hasOwn(messageName)) {
            const callbacks = this.onceListeners[messageName] || []
            for (let i = 0; i < callbacks.length; i++) {
              const callback = callbacks[i]
              emitter.off(messageName, callback)
              emitter.off(`${messageName}${DIRECT_EMIT_FLAG}${tag}`, callback)
            }
          }
        }
      }

      /**
       * 在组件销毁时，默认将它注册的事件全部卸载，确保不会造成内存泄漏
       */
      destroy () {
        // step1 unlisten events
        this.removeListeners()

        // step2 release from context
        delete self._instanceMap[tag]
        if (super.destroy) {
          super.destroy()
        }
      }
    }
    this._clsMap[tag] = enhanced

    /**
     * get instance immediately
     * e.g const instance = context.registry(tag, Cls)(config)
     * */
    return (...args) => {
      return this.initInstance(tag, ...args)
    }
  }

  /**
   * 对存在的实例进行
   */
  destroyInstances () {
    Object.keys(this._instanceMap).forEach((tag) => {
      if (this._instanceMap[tag].destroy) {
        this._instanceMap[tag].destroy()
      }
    })
  }

  /**
   * 编解码流程无需关注事件的解绑
   */
  destroy () {
    this._emitter = null
    this.allowedEvents = []
    this._clsMap = null
    this._context = null
    this.destroyInstances()
  }

  /**
   * 对信道进行收拢
   * @param messageName
   * @private
   */
  _isMessageNameValid (messageName) {
    if (!this.allowedEvents.indexOf(messageName) < 0) {
      throw new Error(`unregistered message name: ${messageName}`)
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Context);


/***/ }),

/***/ "../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isle.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const le = (function () {
  const buf = new ArrayBuffer(2);
  (new DataView(buf)).setInt16(0, 256, true) // little-endian write
  return (new Int16Array(buf))[0] === 256 // platform-spec read, if equal then LE
})()

/* harmony default export */ __webpack_exports__["default"] = (le);


/***/ }),

/***/ "../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const le = (function () {
  const buf = new ArrayBuffer(2);
  (new DataView(buf)).setInt16(0, 256, true) // little-endian write
  return (new Int16Array(buf))[0] === 256 // platform-spec read, if equal then LE
})()

const sniffer = {
  get device () {
    let r = sniffer.os;
    return r.isPc ? 'pc' : r.isTablet ? 'tablet' : 'mobile';
  },
  get browser () {
    let ua = navigator.userAgent.toLowerCase();
    let reg = {
      ie: /rv:([\d.]+)\) like gecko/,
      firfox: /firefox\/([\d.]+)/,
      chrome: /chrome\/([\d.]+)/,
      opera: /opera.([\d.]+)/,
      safari: /version\/([\d.]+).*safari/
    };
    return [].concat(Object.keys(reg).filter(key => reg[key].test(ua)))[0];
  },
  get os () {
    let ua = navigator.userAgent
    let isWindowsPhone = /(?:Windows Phone)/.test(ua)
    let isSymbian = /(?:SymbianOS)/.test(ua) || isWindowsPhone;
    let isAndroid = /(?:Android)/.test(ua);
    let isFireFox = /(?:Firefox)/.test(ua);
    let isTablet = /(?:iPad|PlayBook)/.test(ua) || (isAndroid && !/(?:Mobile)/.test(ua)) || (isFireFox && /(?:Tablet)/.test(ua));
    let isPhone = /(?:iPhone)/.test(ua) && !isTablet;
    let isPc = !isPhone && !isAndroid && !isSymbian;
    return {
      isTablet,
      isPhone,
      isAndroid,
      isPc,
      isSymbian,
      isWindowsPhone,
      isFireFox
    };
  },

  get isLe () {
    return le
  }
};

/* harmony default export */ __webpack_exports__["default"] = (sniffer);


/***/ }),

/***/ "../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/utf8.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class UTF8 {
  static decode (uint8array) {
    const out = [];
    const input = uint8array;
    let i = 0;
    const length = uint8array.length;

    while (i < length) {
      if (input[i] < 0x80) {
        out.push(String.fromCharCode(input[i]));
        ++i;
        continue;
      } else if (input[i] < 0xC0) {
        // fallthrough
      } else if (input[i] < 0xE0) {
        if (UTF8._checkContinuation(input, i, 1)) {
          const ucs4 = (input[i] & 0x1F) << 6 | (input[i + 1] & 0x3F);
          if (ucs4 >= 0x80) {
            out.push(String.fromCharCode(ucs4 & 0xFFFF));
            i += 2;
            continue;
          }
        }
      } else if (input[i] < 0xF0) {
        if (UTF8._checkContinuation(input, i, 2)) {
          const ucs4 = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;
          if (ucs4 >= 0x800 && (ucs4 & 0xF800) !== 0xD800) {
            out.push(String.fromCharCode(ucs4 & 0xFFFF));
            i += 3;
            continue;
          }
        }
      } else if (input[i] < 0xF8) {
        if (UTF8._checkContinuation(input, i, 3)) {
          let ucs4 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 |
                    (input[i + 2] & 0x3F) << 6 | (input[i + 3] & 0x3F);
          if (ucs4 > 0x10000 && ucs4 < 0x110000) {
            ucs4 -= 0x10000;
            out.push(String.fromCharCode((ucs4 >>> 10) | 0xD800));
            out.push(String.fromCharCode((ucs4 & 0x3FF) | 0xDC00));
            i += 4;
            continue;
          }
        }
      }
      out.push(String.fromCharCode(0xFFFD));
      ++i;
    }

    return out.join('');
  }

  static _checkContinuation (uint8array, start, checkLength) {
    let array = uint8array;
    if (start + checkLength < array.length) {
      while (checkLength--) {
        if ((array[++start] & 0xC0) !== 0x80) {
          return false;
        }
      }
      return true;
    } else {
      return false;
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (UTF8);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/audio-context.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/audio-context.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class AudioCtx {
  constructor (config) {
    this.config = Object.assign({},config);
    this.context = new AudioContext();
    this.gainNode = this.context.createGain();
    this.gainNode.connect(this.context.destination);
    this.meta = undefined;
    this.samples = [];
    this.preloadTime = this.config.preloadTime || 3;
    this.duration = 0;

    this._currentBuffer = undefined;
    this._nextBuffer = undefined;
    this._lastpts = undefined;
    this._preDecode = [];
    this._currentTime = 0;
    this._decoding = false;
    
    // 记录外部传输的状态
    this._played = false;
  }

  get currentTime() {
    return this._currentTime;
  }


  setAudioData (data) {
    for(let i = 0;i < data.length; i++) {
      data[i].pts = (data[i].pts === undefined) ? data[i].dts : data[i].pts;
      this._preDecode.push(data[i]);
    }
    if(this._preDecode.length > 0) {
      if(this._lastpts === undefined) {
        this._lastpts = this._preDecode[0].pts;
      }
      if((this._preDecode[this._preDecode.length - 1].pts - this._lastpts) / 1000 > this.preloadTime) {
        this.decodeAAC();
      }
    }
  }

  decodeAAC() {
    if(this._decoding) {
      return;
    }
    this._decoding = true;
    let data = this._preDecode;
    let samples = [];
    let _this = this;
    let sample = data.shift();
    while(sample) {
      let sampleData = AudioCtx.getAACData(this.meta, sample)
      samples.push(sampleData);
      this._lastpts = sample.pts;
      sample = data.shift()
    }
    let buffer = AudioCtx.combileData(samples);
    try {
      this.context.decodeAudioData(buffer.buffer, function(buffer) {
        let audioSource = _this.context.createBufferSource();
        audioSource.buffer = buffer;
        audioSource.onended = _this.onSourceEnded.bind(_this);
        _this.samples.push({
          time: _this.duration,
          duration: buffer.duration,
          data: audioSource
        })

        _this.duration += buffer.duration;

        if(!_this._currentBuffer) {
          _this._currentBuffer = _this.getTimeBuffer(_this.currentTime);

          if(_this._played) {
            _this.play();
          }
        }

        if(!_this._nextBuffer && _this._currentBuffer) {
          _this._nextBuffer = _this.getTimeBuffer(_this.currentTime + _this._currentBuffer.duration);
        }
        _this._decoding = false;

        if((_this._preDecode.length > 0 && _this._preDecode[_this._preDecode.length - 1].pts - _this._lastpts) / 1000 >= _this.preloadTime) {
          _this.decodeAAC();
        }
      })
    } catch(err) {
      console.error(err);
    }
  }

  onSourceEnded() {
    if(!this._nextBuffer || !this._played) {
      return;
    }
    let audioSource = this._nextBuffer.data;
    audioSource.start();
    audioSource.connect(this.gainNode);
    this._currentBuffer = this._nextBuffer;
    this._currentTime = this._currentBuffer.time;
    this._nextBuffer = this.getTimeBuffer(this.currentTime);
    if(this._currentBuffer) {
      this._nextBuffer = this.getTimeBuffer(this.currentTime + this._currentBuffer.duration);
    }
  }

  play() {
    this._played = true;
    if(!this._currentBuffer) {
      return;
    }
    let audioSource = this._currentBuffer.data;
    audioSource.connect(this.gainNode);
    audioSource.start();
  }

  getTimeBuffer(time) {
    let ret;
    for(let i = 0; i < this.samples.length; i++) {
      let sample = this.samples[i]
      if(sample.time <= time && (sample.time + sample.duration) > time) {
        ret = sample;
        break;
      }
    }
    return ret;
  }

  setAudioMetaData(meta) {
    this.meta = meta;
  }

  static getAACData(meta, sample) {
    let buffer = new Uint8Array(sample.data.byteLength + 7);
    let adts = AudioCtx.getAdts(meta, sample.data);
    buffer.set(adts);
    buffer.set(sample.data, 7);
    return buffer;
  }

  static combileData(samples) {
    // get length
    let length = 0;
    for(let i = 0,k = samples.length; i < k; i++) {
      length += samples[i].byteLength;
    }
    
    let ret = new Uint8Array(length);
    let offset = 0;
    // combile data;
    for(let i = 0,k = samples.length; i < k; i++) {
      ret.set(samples[i], offset);
      offset += samples[i].byteLength;
    }
    return ret;
  }

  static getAdts(meta, data) {
    let adts = new Uint8Array(7);
    
    // 设置同步位 0xfff 12bit 
    adts[0] = 0xff;
    adts[1] = 0xf0;

    // Object data (没什么人用MPEG-2了，HLS和FLV也全是MPEG-4，这里直接0)  1bit 
    // Level always 00 2bit 
    // CRC always 1 1bit 
    adts[1] = adts[1] | 0x01;

    // profile 2bit
    adts[2] = 0xc0 & ((meta.objectType-1) << 6);

    //sampleFrequencyIndex
    adts[2] = adts[2] | (0x3c & (meta.sampleRateIndex << 2))

    //private bit 0 1bit
    // chanel configuration 3bit
    adts[2] = adts[2] | (0x01 & meta.channelCount >> 2);
    adts[3] = 0xc0 & (meta.channelCount << 6);

    // original_copy: 0 1bit
    // home: 0 1bit

    // adts_variable_header()
    // copyrighted_id_bit 0 1bit
    // copyrighted_id_start 0 1bit

    // aac_frame_length 13bit;
    let aacframelength = data.byteLength + 7;

    adts[3] = adts[3] | (0x03 & aacframelength >> 11);
    adts[4] = 0xff & (aacframelength >> 3);
    adts[5] = 0xe0 & (aacframelength << 5);

    // adts_buffer_fullness 0x7ff 11bit
    adts[5] = adts[5] | 0x1f
    adts[6] = 0xfc;

    // number_of_raw_data_blocks_in_frame 0 2bit;
    return adts;
  }
}

/* harmony default export */ __webpack_exports__["default"] = (AudioCtx);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/mobile-video.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/mobile-video.js ***!
  \****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _video_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./video-context */ "../xgplayer-utils/src/mobile/video-context.js");
/* harmony import */ var _audio_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./audio-context */ "../xgplayer-utils/src/mobile/audio-context.js");


// eslint-disable-next-line no-undef
class MobileVideo extends HTMLElement {
  constructor (config) {
    super();
    this.vCtx = new _video_context__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.aCtx = new _audio_context__WEBPACK_IMPORTED_MODULE_1__["default"](config);
    this.historyTime = 0;
  }

  destroy () {

  }

  onDemuxComplete(videoTrack, audioTrack) {
    audioTrack.samples = [];
    this.vCtx.decodeVideo(videoTrack);
  }

  setAudioMeta (meta) {
    this.aCtx.setAudioMetaData(meta);
  }
  
  setVideoMeta (meta) {
    this.vCtx.setVideoMetaData(meta);
  }

  get currentTime () {

  }

  play() {
    this.aCtx.play();
    this.vCtx.play();
  }
}
customElements.define('mobile-video', MobileVideo);


/***/ }),

/***/ "../xgplayer-utils/src/mobile/video-context.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/mobile/video-context.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webworkify-webpack */ "../xgplayer-utils/node_modules/webworkify-webpack/index.js");
/* harmony import */ var webworkify_webpack__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _write_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../write/stream */ "../xgplayer-utils/src/write/stream.js");
/* harmony import */ var _xgplayer_codec_src_h264_nalunit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../xgplayer-codec/src/h264/nalunit */ "../xgplayer-codec/src/h264/nalunit/index.js");



class VideoCanvas {
  constructor (config) {
    this.canvas = document.createElement('canvas');
    this.config = Object.assign({}, config);
    this._decoderInited = false;
    this.oncanplay = undefined;
    this.meta = undefined;
    this._avccpushed = false;
    this.initWasmWorker();
  }

  initWasmWorker() {
    let _this = this;
    console.log('init worker');
    this.wasmworker = webworkify_webpack__WEBPACK_IMPORTED_MODULE_0___default()(/*require.resolve*/(/*! ./worker.js */ "../xgplayer-utils/src/mobile/worker.js"));
    
    /*
    this.wasmworker.addEventListener('message', msg => {
      switch(msg.data.msg) {
        case 'DECODER_READY':
          _this._decoderInited = true;
          break;
        case 'DECODED':
          console.log('decoded', msg.data.data, msg.data.width, msg.data.height, msg.data.info);
          break;
      }
    });*/
  }

  setVideoMetaData(meta) {
    console.log(meta);
    this.meta = meta;
    if(!this._decoderInited) {
      return
    }
    this._avccpushed = true;
    let data = new Uint8Array(meta.sps.byteLength + 4);
    data.set([0,0,0,1])
    data.set(meta.sps, 4);
    this.wasmworker.postMessage({
      msg: 'decode',
      data: data
    })

    data = new Uint8Array(meta.pps.byteLength + 4);
    data.set([0,0,0,1])
    data.set(meta.pps, 4);
    this.wasmworker.postMessage({
      msg: 'decode',
      data: data
    })
  }

  decodeVideo(videoTrack) {
    if(!this._decoderInited) {
      return
    }

    if(!this._avccpushed) {
      this.setVideoMetaData(this.meta);
    }
    let { samples } = videoTrack;
    let sample =  samples.shift();

    if(!sample) {
      return;
    }

    
    let nals = _xgplayer_codec_src_h264_nalunit__WEBPACK_IMPORTED_MODULE_2__["default"].getAvccNals(new _write_stream__WEBPACK_IMPORTED_MODULE_1__["default"](sample.data.buffer));
    
    let length = 0;
    for(let i=0;i<nals.length;i++) {
      let nal = nals[i];
      length += nal.body.byteLength + 4;
    }
    let offset = 0;
    let data = new Uint8Array(length);
    for(let i=0;i<nals.length;i++) {
      let nal = nals[i];
      data.set([0,0,0,1],offset);
      offset +=4;
      data.set(new Uint8Array(nal.body), offset);
      offset += nal.body.byteLength;
    }
    this.wasmworker.postMessage({
      msg: 'decode',
      data: data,
      info: {
        dts: sample.dts,
        pts: sample.pts
      }
    })
  }
  
  play() {
    
  }
}
/* harmony default export */ __webpack_exports__["default"] = (VideoCanvas);

/***/ }),

/***/ "../xgplayer-utils/src/mobile/worker.js":
/*!**********************************************!*\
  !*** ../xgplayer-utils/src/mobile/worker.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function init(self) {
  console.log('init');
  self.importScripts('http://localhost:9090/examples/flv/decoder.js').then(data => {
    console.log('loaded',data);
  });
}
module.exports = function(self) {
  self.addEventListener('message', function(e) {
    var data = e.data;    
    if(!data.msg) {
      self.postMessage({
        msg: 'ERROR:invalid message',
      })
    } else {
      switch(data.msg) {
        case 'init':
          init(self);
          break;
        case 'decode':
          break;
        default:
          break;
      }
    }
  }, false);
}

/***/ }),

/***/ "../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/media-info.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaInfo; });
const isObjectFilled = (obj) => {
  for (let key in obj) {
    if (obj.hasOwnProperty(key)) {
      if (obj[key] === null) {
        return false
      }
    }
  }
  return true
}

class MediaInfo {
  constructor () {
    this.mimeType = null
    this.duration = null

    this.hasVideo = null
    this.video = {
      codec: null,
      width: null,
      height: null,
      profile: null,
      level: null,
      frameRate: {
        fixed: true,
        fps: 25,
        fps_num: 25000,
        fps_den: 1000
      },
      chromaFormat: null,
      parRatio: {
        width: 1,
        height: 1
      }
    }

    this.hasAudio = null

    this.audio = {
      codec: null,
      sampleRate: null,
      sampleRateIndex: null,
      channelCount: null
    }
  }

  isComplete () {
    return MediaInfo.isBaseInfoReady(this) && MediaInfo.isVideoReady(this) && MediaInfo.isAudioReady(this)
  }

  static isBaseInfoReady (mediaInfo) {
    return isObjectFilled(mediaInfo)
  }

  static isVideoReady (mediaInfo) {
    if (!mediaInfo.hasVideo) {
      return true
    }

    return isObjectFilled(mediaInfo.video)
  }

  static isAudioReady (mediaInfo) {
    if (!mediaInfo.hasAudio) {
      return true
    }

    return isObjectFilled(mediaInfo.video)
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-sample.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaSample; });
class MediaSample {
  constructor (info) {
    let _default = MediaSample.getDefaultInf()

    if (!info || Object.prototype.toString.call(info) !== '[object Object]') {
      return _default
    }
    let sample = Object.assign({}, _default, info)

    Object.entries(sample).forEach(([k, v]) => {
      this[k] = v
    })
  }

  static getDefaultInf () {
    return {
      dts: null,
      pts: null,
      duration: null,
      position: null,
      isRAP: false, // is Random access point
      originDts: null
    }
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaSegmentList; });
class MediaSegmentList {

    constructor (type) {
        this._type = type;
        this._list = [];
        this._lastAppendLocation = -1; // cached last insert location
    }

    get type () {
        return this._type;
    }

    get length () {
        return this._list.length;
    }

    isEmpty () {
        return this._list.length === 0;
    }

    clear () {
        this._list = [];
        this._lastAppendLocation = -1;
    }

    _searchNearestSegmentBefore (beginDts) {
        let list = this._list;
        if (list.length === 0) {
            return -2;
        }
        let last = list.length - 1;
        let mid = 0;
        let lbound = 0;
        let ubound = last;

        let idx = 0;

        if (beginDts < list[0].originDts) {
            idx = -1;
            return idx;
        }

        while (lbound <= ubound) {
            mid = lbound + Math.floor((ubound - lbound) / 2);
            if (mid === last || (beginDts > list[mid].lastSample.originDts
                    && (beginDts < list[mid + 1].originDts))) {
                idx = mid;
                break;
            } else if (list[mid].originDts < beginDts) {
                lbound = mid + 1;
            } else {
                ubound = mid - 1;
            }
        }
        return idx;
    }

    _searchNearestSegmentAfter (beginDts) {
        return this._searchNearestSegmentBefore(beginDts) + 1;
    }

    append (segment) {
        let list = this._list;
        let lastAppendIdx = this._lastAppendLocation;
        let insertIdx = 0;

        if (lastAppendIdx !== -1 && lastAppendIdx < list.length
            && segment.originStartDts >= list[lastAppendIdx].lastSample.originDts
            && ((lastAppendIdx === list.length - 1)
                || (lastAppendIdx < list.length - 1
                    && segment.originStartDts < list[lastAppendIdx + 1].originStartDts))) {
            insertIdx = lastAppendIdx + 1; // use cached location idx
        } else {
            if (list.length > 0) {
                insertIdx = this._searchNearestSegmentBefore(segment.originStartDts) + 1;
            }
        }

        this._lastAppendLocation = insertIdx;
        this._list.splice(insertIdx, 0, segment);
    }

    getLastSegmentBefore (beginDts) {
        let idx = this._searchNearestSegmentBefore(beginDts);
        if (idx >= 0) {
            return this._list[idx];
        } else { // -1
            return null;
        }
    }

    getLastSampleBefore (beginDts) {
        let segment = this.getLastSegmentBefore(beginDts);
        if (segment !== null) {
            return segment.lastSample;
        } else {
            return null;
        }
    }

    getLastRAPBefore (beginDts) {
        let segmentIdx = this._searchNearestSegmentBefore(beginDts);
        let randomAccessPoints = this._list[segmentIdx].randomAccessPoints;
        while (randomAccessPoints.length === 0 && segmentIdx > 0) {
            segmentIdx--;
            randomAccessPoints = this._list[segmentIdx].randomAccessPoints;
        }
        if (randomAccessPoints.length > 0) {
            return randomAccessPoints[randomAccessPoints.length - 1];
        } else {
            return null;
        }
    }

}

/***/ }),

/***/ "../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MediaSegment; });
class MediaSegment {
    constructor () {
        this.startDts = -1;
        this.endDts = -1;
        this.startPts = -1;
        this.endPts = -1;
        this.originStartDts = -1;
        this.originEndDts = -1;
        this.randomAccessPoints = [];
        this.firstSample = null;
        this.lastSample = null;
    }

    addRAP (sample) {
        sample.isRAP = true;
        this.randomAccessPoints.push(sample);
    }
}

/***/ }),

/***/ "../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/track-meta.js ***!
  \**************************************************/
/*! exports provided: AudioTrackMeta, VideoTrackMeta */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioTrackMeta", function() { return AudioTrackMeta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoTrackMeta", function() { return VideoTrackMeta; });
class AudioTrackMeta {
  constructor (meta) {
    const _default = {
      sampleRate: 48000,
      channelCount: 2,
      codec: 'mp4a.40.2',
      config: [41, 401, 136, 0],
      duration: 0,
      id: 2,
      refSampleDuration: 21,
      sampleRateIndex: 3,
      timescale: 1000,
      type: 'audio'
    }
    if (meta) {
      return Object.assign({}, _default, meta)
    }
    return _default
  }
}

class VideoTrackMeta {
  constructor (meta) {
    const _default = {
      avcc: null,
      sps: new Uint8Array(0),
      pps: new Uint8Array(0),
      chromaFormat: 420,
      codec: 'avc1.640020',
      codecHeight: 720,
      codecWidth: 1280,
      duration: 0,
      frameRate: {
        fixed: true,
        fps: 25,
        fps_num: 25000,
        fps_den: 1000
      },
      id: 1,
      level: '3.2',
      presentHeight: 720,
      presentWidth: 1280,
      profile: 'High',
      refSampleDuration: 40,
      parRatio: {
        height: 1,
        width: 1
      },
      timescale: 1000,
      type: 'video'
    }

    if (meta) {
      return Object.assign({}, _default, meta)
    }
    return _default
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/track-sample.js ***!
  \****************************************************/
/*! exports provided: AudioTrackSample, VideoTrackSample */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioTrackSample", function() { return AudioTrackSample; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoTrackSample", function() { return VideoTrackSample; });
class AudioTrackSample {
  constructor (info) {
    let _default = AudioTrackSample.getDefault()
    if (!info) {
      return _default
    }
    let sample = Object.assign({}, _default, info)

    return sample
  }

  static getDefault () {
    return {
      dts: null,
      pts: null,
      data: new Uint8Array()
    }
  }
}

class VideoTrackSample {
  constructor (info) {
    let _default = VideoTrackSample.getDefault()

    if (!info) {
      return _default
    }
    let sample = Object.assign({}, _default, info)

    return sample
  }

  static getDefault () {
    return {
      dts: null,
      pts: null,
      isKeyframe: false, // is Random access point
      originDts: null,
      data: new Uint8Array()
    }
  }
}


/***/ }),

/***/ "../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class MSE {
  constructor (configs) {
    this.configs = Object.assign({}, configs);
    this.container = this.configs.container;
    this.mediaSource = null;
    this.sourceBuffers = {};
    this.preloadTime = this.configs.preloadTime || 1;
  }

  init () {
    // eslint-disable-next-line no-undef
    this.mediaSource = new self.MediaSource();
    this.mediaSource.addEventListener('sourceopen', this.onSourceOpen.bind(this));
    this.container.src = URL.createObjectURL(this.mediaSource);
    this.url = this.container.src;
    this.container.addEventListener('timeupdate', this.onTimeUpdate.bind(this));
    this.container.addEventListener('waiting', this.onWaiting.bind(this));
  }

  onTimeUpdate () {
    this.emit('TIME_UPDATE', this.container);
  }
   
  onWaiting () {
    this.emit('WAITING', this.container);
  }

  onSourceOpen () {
    this.addSourceBuffers();
  }

  onUpdateEnd () {
    this.emit('SOURCE_UPDATE_END');
    this.doAppend()
  }
  addSourceBuffers () {
    if (this.mediaSource.readyState !== 'open') {
      return;
    }
    let sources = this._context.getInstance('PRE_SOURCE_BUFFER');
    let tracks = this._context.getInstance('TRACKS');
    let track;

    sources = sources.sources;
    let add = false;
    for (let i = 0, k = Object.keys(sources).length; i < k; i++) {
      let type = Object.keys(sources)[i];
      if (type === 'audio') {
        track = tracks.audioTrack;
      } else if (type === 'video') {
        track = tracks.videoTrack;
      }
      if (track) {
        let dur = type === 'audio' ? 21 : 40;
        if (track.meta && track.meta.refSampleDuration) dur = track.meta.refSampleDuration;
        if (sources[type].data.length >= (this.preloadTime / dur)) {
          add = true;
        }
      }
    }

    if (add) {
      if (Object.keys(this.sourceBuffers).length > 0) {
        return;
      }
      for (let i = 0, k = Object.keys(sources).length; i < k; i++) {
        let type = Object.keys(sources)[i];
        let source = sources[type]
        let mime = (type === 'video') ? 'video/mp4;codecs=' + source.mimetype : 'audio/mp4;codecs=' + source.mimetype
        let sourceBuffer = this.mediaSource.addSourceBuffer(mime);
        this.sourceBuffers[type] = sourceBuffer;
        sourceBuffer.addEventListener('updateend', this.onUpdateEnd.bind(this));
        this.doAppend();
      }
    }
  }

  doAppend () {
    let sources = this._context.getInstance('PRE_SOURCE_BUFFER');
    if (sources) {
      for (let i = 0; i < Object.keys(this.sourceBuffers).length; i++) {
        let type = Object.keys(this.sourceBuffers)[i]
        let sourceBuffer = this.sourceBuffers[type];
        if (!sourceBuffer.updating) {
          let source = sources.sources[type];
          if (source && !source.inited) {
            sourceBuffer.appendBuffer(source.init.buffer.buffer);
            source.inited = true;
          } else if (source) {
            let data = source.data.shift()
            if (data) {
              sourceBuffer.appendBuffer(data.buffer.buffer);
            }
          }
        }
      }
    }
  }

  endOfStream () {
    if (this.mediaSource.readyState === 'open') {
      this.mediaSource.endOfStream()
    }
  }

  remove (end) {
    for (let i = 0; i < Object.keys(this.sourceBuffers).length; i++) {
      let buffer = this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];
      if (!buffer.updating) {
        buffer.remove(0, end);
      }
    }
  }

  destroy () {
    this.container.removeEventListener('timeupdate', this.onTimeUpdate);
    this.container.removeEventListener('waiting', this.onWaiting);
    this.mediaSource.removeEventListener('sourceopen', this.onSourceOpen);
    this.configs = {};
    this.container = null;
    this.mediaSource = null;
    this.sourceBuffers = {};
    this.preloadTime = 1;
    for (let i = 0; i < Object.keys(this.sourceBuffers).length; i++) {
      let buffer = this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];
      buffer.removeEventListener('updateend', this.onUpdateEnd);
      this.mediaSource.removeSourceBuffer(buffer);
      delete this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];
    }
  }
}
/* harmony default export */ __webpack_exports__["default"] = (MSE);


/***/ }),

/***/ "../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/buffer.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var concat_typed_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! concat-typed-array */ "../xgplayer-utils/node_modules/concat-typed-array/lib/index.js");
/* harmony import */ var concat_typed_array__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(concat_typed_array__WEBPACK_IMPORTED_MODULE_0__);


class Buffer {
  constructor (buffer) {
    this.buffer = buffer || new Uint8Array(0)
  }

  write (...buffer) {
    buffer.forEach(item => {
      this.buffer = concat_typed_array__WEBPACK_IMPORTED_MODULE_0___default()(Uint8Array, this.buffer, item)
    })
  }

  static writeUint32 (value) {
    return new Uint8Array([
      value >> 24,
      (value >> 16) & 0xff,
      (value >> 8) & 0xff,
      value & 0xff
    ])
  }

  static readAsInt (arr) {
    let temp = ''

    function padStart4Hex (hexNum) {
      let hexStr = hexNum.toString(16)
      return hexStr.padStart(2, '0')
    }

    arr.forEach(num => {
      temp += padStart4Hex(num)
    })
    return parseInt(temp, 16)
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Buffer);


/***/ }),

/***/ "../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/stream.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
class Stream {
  constructor (buffer) {
    if (buffer instanceof ArrayBuffer) {
      this.buffer = buffer;
      this.dataview = new DataView(buffer);
      this.dataview.position = 0;
    } else {
      throw new Error('data is invalid');
    }
  }

  get length () {
    return this.buffer.byteLength;
  }

  set position (value) {
    this.dataview.position = value;
  }

  get position () {
    return this.dataview.position;
  }

  back (count) {
    this.position -= count;
  }

  skip (count) {
    let loop = Math.floor(count / 4);
    let last = count % 4;
    for (let i = 0; i < loop; i++) {
      Stream.readByte(this.dataview, 4);
    }
    if (last > 0) {
      Stream.readByte(this.dataview, last);
    }
  }

  /**
   * [readByte 从DataView中读取数据]
   * @param  {DataView} buffer [DataView实例]
   * @param  {Number} size   [读取字节数]
   * @return {Number}        [整数]
   */
  static readByte (buffer, size, sign) {
    let res;
    switch (size) {
      case 1:
        if (sign) {
          res = buffer.getInt8(buffer.position);
        } else {
          res = buffer.getUint8(buffer.position);
        }
        break;
      case 2:
        if (sign) {
          res = buffer.getInt16(buffer.position);
        } else {
          res = buffer.getUint16(buffer.position);
        }
        break;
      case 3:
        if (sign) {
          throw new Error('not supported for readByte 3');
        } else {
          res = buffer.getUint8(buffer.position) << 16;
          res |= buffer.getUint8(buffer.position + 1) << 8;
          res |= buffer.getUint8(buffer.position + 2);
        }
        break;
      case 4:
        if (sign) {
          res = buffer.getInt32(buffer.position);
        } else {
          res = buffer.getUint32(buffer.position);
        }
        break;
      case 8:
        if (sign) {
          throw new Error('not supported for readBody 8');
        } else {
          res = buffer.getUint32(buffer.position) << 32;
          res |= buffer.getUint32(buffer.position + 4);
        }
        break;
      default:
        res = '';
    }
    buffer.position += size;
    return res;
  }

  readUint8 () {
    return Stream.readByte(this.dataview, 1);
  }

  readUint16 () {
    return Stream.readByte(this.dataview, 2);
  }

  readUint24 () {
    return Stream.readByte(this.dataview, 3);
  }

  readUint32 () {
    return Stream.readByte(this.dataview, 4);
  }

  readUint64 () {
    return Stream.readByte(this.dataview, 8);
  }

  readInt8 () {
    return Stream.readByte(this.dataview, 1, true);
  }
  readInt16 () {
    return Stream.readByte(this.dataview, 2, true);
  }

  readInt32 () {
    return Stream.readByte(this.dataview, 4, true);
  }

  writeUint32 (value) {
    return new Uint8Array([
      value >>> 24 & 0xff,
      value >>> 16 & 0xff,
      value >>> 8 & 0xff,
      value & 0xff
    ]);
  }
}

/* harmony default export */ __webpack_exports__["default"] = (Stream);


/***/ }),

/***/ "../xgplayer/dist/index.js":
/*!*********************************!*\
  !*** ../xgplayer/dist/index.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(e,t){ true?module.exports=t():undefined}(window,(function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}({"./node_modules/css-loader/index.js?!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/style/index.scss":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--5-1!./node_modules/postcss-loader/lib!./node_modules/sass-loader/lib/loader.js!./src/style/index.scss ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */function(e,t,n){(e.exports=n(/*! ../../node_modules/css-loader/lib/css-base.js */"./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,"@-webkit-keyframes playPause{0%{-webkit-transform:scale(1);transform:scale(1);opacity:1}99%{-webkit-transform:scale(1.3);transform:scale(1.3);opacity:0}to{-webkit-transform:scale(0);transform:scale(0);opacity:0}}@-webkit-keyframes loadingRotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes loadingDashOffset{0%{stroke-dashoffset:236}to{stroke-dashoffset:0}}@-webkit-keyframes enterTips{0%{opacity:0;left:0;width:3px}50%{opacity:1;left:50%;width:5px}to{opacity:0;left:100%;width:3px}}.xgplayer-download{position:relative;width:36px;height:40px;-webkit-order:8;-moz-box-ordinal-group:9;order:8;cursor:pointer}.xgplayer-inactive .xgplayer-download,.xgplayer-nostart .xgplayer-download{display:none}.xgplayer-download:hover .xgplayer-tips{display:block}.xgplayer-download-img{display:inline-block;width:24px;height:24px;margin-top:7px!important;margin-left:4px!important;background:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23FFF' fill-rule='evenodd'%3E%3Crect x='11' y='4' width='2' height='12' rx='1'/%3E%3Crect x='3' y='18' width='18' height='2' rx='1'/%3E%3Crect transform='rotate(90 4 17.5)' x='1.5' y='16.5' width='5' height='2' rx='1'/%3E%3Crect transform='rotate(90 20 17.5)' x='17.5' y='16.5' width='5' height='2' rx='1'/%3E%3Cpath d='M11.988 14.3l-4.243-4.242a1 1 0 0 0-1.414 1.414l4.95 4.95a1 1 0 0 0 1.414 0l4.95-4.95a1 1 0 1 0-1.414-1.414L11.988 14.3z'/%3E%3C/g%3E%3C/svg%3E\") no-repeat 50%/100% 100%}.xgplayer-rotate{-webkit-order:9;-moz-box-ordinal-group:10;order:9;position:relative;display:inline-block;cursor:pointer;margin:0 4px}.xgplayer-rotate:hover .xgplayer-tips{display:block}.xgplayer-rotate-img{width:20px;height:20px;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 20 20' fill='none'%3E%3Cg clip-path='url(%23a)' fill='%23fff'%3E%3Cpath d='M11.666 9.167h-7.5a2.5 2.5 0 0 0-2.5 2.5v4.166a2.5 2.5 0 0 0 2.5 2.5h7.5a2.5 2.5 0 0 0 2.5-2.5v-4.166a2.5 2.5 0 0 0-2.5-2.5z'/%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M3.881 4.063a.83.83 0 0 0 .105 1.193L6.99 8.06A.833.833 0 1 0 8.128 6.84L6.62 5.435l3.199-.013a6.667 6.667 0 0 1 6.374 9.322.833.833 0 0 0 1.528.665A8.334 8.334 0 0 0 9.8 3.756l-3.367.013 1.53-1.64A.833.833 0 1 0 6.743.992L3.903 4.04a.83.83 0 0 0-.021.023z'/%3E%3C/g%3E%3Cdefs%3E%3CclipPath id='a'%3E%3Cpath fill='%23fff' d='M0 0h20v20H0z'/%3E%3C/clipPath%3E%3C/defs%3E%3C/svg%3E\");background-repeat:no-repeat;background-position:10px 10px}.xgplayer{background:rgba(0,0,0,.26);width:100%;height:100%;position:relative;-webkit-user-select:none;-moz-user-select:none;user-select:none;-ms-user-select:none}.xgplayer *{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}.xgplayer.xgplayer-is-fullscreen{width:100%!important;height:100%!important;padding-top:0!important;z-index:9999}.xgplayer.xgplayer-is-fullscreen.xgplayer-inactive{cursor:none}.xgplayer video{width:100%;height:100%;outline:none}.xgplayer-icon{display:block;width:40px;height:40px;overflow:hidden;fill:#fff}.xgplayer-controls{display:-webkit-flex;display:-moz-box;display:flex;position:absolute;bottom:0;left:0;right:0;height:40px;background-image:linear-gradient(-1deg,rgba(0,0,0,.3),transparent);z-index:10}.xgplayer-nostart .xgplayer-controls{display:none}.no-controls .xgplayer-controls{display:none!important}.xgplayer-inactive .xgplayer-controls,.xgplayer-is-live .xgplayer-controls>*{display:none}.xgplayer-is-live .xgplayer-controls .xgplayer-fullscreen,.xgplayer-is-live .xgplayer-controls .xgplayer-live,.xgplayer-is-live .xgplayer-controls .xgplayer-placeholder,.xgplayer-is-live .xgplayer-controls .xgplayer-play,.xgplayer-is-live .xgplayer-controls .xgplayer-play-img,.xgplayer-is-live .xgplayer-controls .xgplayer-volume{display:block}.xgplayer-progress{display:block;position:absolute;height:20px;line-height:20px;left:0;right:0;outline:none;top:-10px;z-index:35}.xgplayer.xgplayer-definition-active .xgplayer-progress,.xgplayer.xgplayer-textTrack-active .xgplayer-progress,.xgplayer.xgplayer-volume-active .xgplayer-progress{z-index:15}.xgplayer-progress-outer{background:hsla(0,0%,100%,.3);display:block;height:3px;line-height:3px;margin-top:8.5px;width:100%;position:relative;cursor:pointer}.xgplayer-progress-cache,.xgplayer-progress-played{display:block;height:100%;line-height:1;position:absolute;left:0;top:0}.xgplayer-progress-cache{width:0;background:hsla(0,0%,100%,.5)}.xgplayer-progress-played{display:block;width:0;background-image:linear-gradient(-90deg,#fa1f41,#e31106);border-radius:0 1.5px 1.5px 0}.xgplayer-progress-btn{display:none;position:absolute;left:0;top:-6px;width:14px;height:16px;border-radius:6px;background:#fff;box-shadow:0 0 2px 0 rgba(0,0,0,.26)}.xgplayer-progress-point{position:absolute}.xgplayer-progress-point.xgplayer-tips{margin-left:0;top:-25px;display:none;z-index:100}.xgplayer-progress-dot{display:inline-block;position:absolute;height:3px;width:5px;top:0;background:#fff;border-radius:6px;z-index:16}.xgplayer-progress-dot .xgplayer-progress-tip{position:absolute;left:0;top:-40px;height:auto;line-height:30px;width:auto;-webkit-transform:scale(.8);-ms-transform:scale(.8);transform:scale(.8);background:rgba(0,0,0,.3);border-radius:6px;border:1px solid rgba(0,0,0,.8);cursor:default;white-space:nowrap;display:none}.xgplayer-progress-dot-show .xgplayer-progress-tip{display:block}.xgplayer-progress-thumbnail{position:absolute;-moz-box-sizing:border-box;box-sizing:border-box}.xgplayer-progress-thumbnail.xgplayer-tips{margin-left:0;display:none;z-index:99}.xgplayer-progress:focus .xgplayer-progress-outer,.xgplayer-progress:hover .xgplayer-progress-outer{height:6px;margin-top:7px}.xgplayer-progress:focus .xgplayer-progress-dot,.xgplayer-progress:hover .xgplayer-progress-dot{height:6px}.xgplayer-progress:focus .xgplayer-progress-btn,.xgplayer-progress:hover .xgplayer-progress-btn{display:block}.xgplayer-play,.xgplayer-play-img{position:relative;-webkit-order:0;-moz-box-ordinal-group:1;order:0;display:block;cursor:pointer}.xgplayer-play-img .xgplayer-icon,.xgplayer-play .xgplayer-icon{margin-top:3px}.xgplayer-play-img:hover,.xgplayer-play:hover{opacity:.85}.xgplayer-play-img:hover .xgplayer-tips,.xgplayer-play:hover .xgplayer-tips{display:block}.xgplayer-playNext,.xgplayer-playNext-img{-webkit-order:1;-moz-box-ordinal-group:2;order:1;cursor:pointer}.xgplayer-playNext-img:hover,.xgplayer-playNext:hover{opacity:.85}.xgplayer-time{-webkit-order:2;-moz-box-ordinal-group:3;order:2;font-family:ArialMT;font-size:13px;color:#fff;line-height:40px;display:inline-block}.xgplayer-time span:after{content:\"/\";display:inline-block;padding:0 3px}.xgplayer-time em{color:hsla(0,0%,100%,.5)}.xgplayer-tips{background:rgba(0,0,0,.54);border-radius:1px;display:none;position:absolute;font-family:PingFangSC-Regular;font-size:11px;color:#fff;padding:2px 4px;text-align:center;top:-30px;left:50%;margin-left:-16px;width:auto;white-space:nowrap}.xgplayer-volume{outline:none;-webkit-order:4;-moz-box-ordinal-group:5;order:4;width:28px;height:140px;display:inline-block;position:relative;margin-top:-100px;z-index:18}.xgplayer-volume .xgplayer-icon{margin-top:8px;cursor:pointer;position:absolute;bottom:-9px}.xgplayer-slider{display:none;position:absolute;width:28px;height:88px;background:rgba(0,0,0,.54);border-radius:1px;bottom:50px;outline:none;left:0}.xgplayer.xgplayer-volume-active .xgplayer-slider{display:block}.xgplayer-slider:after{content:\" \";display:block;height:15px;width:28px;position:absolute;bottom:-15px;left:0;z-index:20}.xgplayer-bar,.xgplayer-drag{display:block;position:absolute;bottom:6px;left:12px;background:hsla(0,0%,100%,.3);border-radius:100px;width:4px;height:76px;outline:none;cursor:pointer}.xgplayer-drag{bottom:0;left:0;background:#fa1f41;max-height:76px}.xgplayer-drag:after{content:\" \";display:inline-block;width:8px;height:8px;background:#fff;box-shadow:0 0 5px 0 rgba(0,0,0,.26);position:absolute;border-radius:50%;left:-2px;top:-6px}.xgplayer-placeholder{-webkit-flex:1;-moz-box-flex:1;flex:1;-webkit-order:3;-moz-box-ordinal-group:4;order:3;display:block}.xgplayer-start{border-radius:50%;display:inline-block;width:70px;height:70px;background:hsla(0,0%,100%,.3);overflow:hidden;text-align:center;line-height:70px;vertical-align:middle;position:absolute;left:50%;top:50%;z-index:1000;margin:-55px auto auto -35px;cursor:pointer}.xgplayer-inactive .xgplayer-start,.xgplayer-nostart .xgplayer-start{margin:-35px auto auto -35px}.xgplayer-start svg{fill:hsla(0,0%,100%,.7);margin:14px}.xgplayer-start.xgplayer-start-interact{-webkit-animation:playPause .4s ease-out forwards;animation:playPause .4s ease-out forwards}.xgplayer-start:hover{background:hsla(0,0%,100%,.5)}.xgplayer-start:hover svg{fill:hsla(0,0%,100%,.6)}.xgplayer-start-img{display:none;position:absolute;left:50%;top:50%;z-index:1000;cursor:pointer}.xgplayer-nostart .xgplayer-start-img{display:block}.xgplayer-start-img.xgplayer-start-interact{-webkit-animation:playPause .4s ease-out forwards;animation:playPause .4s ease-out forwards}.xgplayer-start-img:hover{opacity:.85}.xgplayer-textTrack{-webkit-order:7;-moz-box-ordinal-group:8;order:7;width:60px;height:150px;z-index:18;position:relative;outline:none;display:none;cursor:default;margin-left:10px;margin-top:-119px;margin-bottom:11px}.xgplayer-textTrack ul{display:none;list-style:none;width:78px;background:rgba(0,0,0,.54);border-radius:1px;position:absolute;bottom:30px;left:0;text-align:center;white-space:nowrap;margin-left:-10px;z-index:26;cursor:pointer}.xgplayer.xgplayer-textTrack-active .xgplayer-textTrack ul{display:block}.xgplayer-textTrack ul li{opacity:.7;font-family:PingFangSC-Regular;font-size:11px;color:hsla(0,0%,100%,.8);padding:6px 13px}.xgplayer-textTrack ul li.textTrack,.xgplayer-textTrack ul li:hover{color:#fff;opacity:1}.xgplayer-textTrack .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;cursor:pointer;color:hsla(0,0%,100%,.8);position:absolute;bottom:0;width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer-is-textTrack .xgplayer-textTrack{display:block}.xgplayer-definition{-webkit-order:5;-moz-box-ordinal-group:6;order:5;width:60px;height:150px;z-index:18;position:relative;outline:none;display:none;cursor:default;margin-left:10px;margin-top:-119px;margin-bottom:11px}.xgplayer-definition ul{display:none;list-style:none;width:78px;background:rgba(0,0,0,.54);border-radius:1px;position:absolute;bottom:30px;left:0;text-align:center;white-space:nowrap;margin-left:-10px;z-index:26;cursor:pointer}.xgplayer.xgplayer-definition-active .xgplayer-definition ul{display:block}.xgplayer-definition ul li{opacity:.7;font-family:PingFangSC-Regular;font-size:11px;color:hsla(0,0%,100%,.8);padding:6px 13px}.xgplayer-definition ul li.definition,.xgplayer-definition ul li:hover{color:#fff;opacity:1}.xgplayer-definition .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;cursor:pointer;color:hsla(0,0%,100%,.8);position:absolute;bottom:0;width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer-is-definition .xgplayer-definition{display:block}.xgplayer-playback{-webkit-order:8;-moz-box-ordinal-group:9;order:8;position:relative;outline:none;display:block;cursor:pointer;margin:10px;height:20px}.xgplayer-playback .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;line-height:20px;height:20px;color:hsla(0,0%,100%,.8)}.xgplayer-playback .name span{width:40px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer-playback:hover .xgplayer-tips{display:block;top:-40px}.xgplayer-pip{-webkit-order:9;-moz-box-ordinal-group:10;order:9;position:relative;outline:none;display:block;cursor:pointer;margin-left:10px;margin-top:9px;margin-bottom:11px;height:20px}.xgplayer-pip .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;line-height:20px;height:20px;color:hsla(0,0%,100%,.8)}.xgplayer-pip .name span{width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer.xgplayer-pip-active{position:fixed!important;right:0;bottom:200px;width:320px!important;height:180px!important;z-index:999!important}.xgplayer.xgplayer-pip-active .xgplayer-controls,.xgplayer.xgplayer-pip-active xg-bullet{display:none}.xgplayer.xgplayer-pip-active .xgplayer-pip-lay{display:block}.xgplayer-pip-lay{position:absolute;top:26px;left:0;z-index:1450;cursor:pointer;background-color:transparent;display:none}.xgplayer-pip-lay,.xgplayer-pip-lay div{width:100%;height:100%}.xgplayer-pip-drag{cursor:move;position:absolute;top:0;left:0;width:100%;height:26px;line-height:26px;background-image:linear-gradient(rgba(0,0,0,.3),transparent);z-index:1500;display:none}.xgplayer.xgplayer-pip-active .xgplayer-pip-drag{display:-webkit-flex;display:-moz-box;display:flex}.xgplayer.xgplayer-inactive .xgplayer-pip-drag{display:none}.xgplayer-fullscreen{-webkit-order:12;-moz-box-ordinal-group:13;order:12;position:relative;display:inline-block;cursor:pointer}.xgplayer-fullscreen .xgplayer-icon{margin:4px -4px 0 0}.xgplayer-fullscreen:hover .xgplayer-tips{display:block}.xgplayer.xgplayer-fullscreen-active{position:fixed!important;left:0!important;top:0!important;width:100%!important;height:100%!important;z-index:99999!important}.xgplayer-cssfullscreen{-webkit-order:11;-moz-box-ordinal-group:12;order:11;position:relative;display:inline-block;cursor:pointer;left:6px}.xgplayer-cssfullscreen .xgplayer-icon{margin:4px -4px 0 0}.xgplayer-cssfullscreen:hover .xgplayer-tips{display:block}.xgplayer.xgplayer-cssfullscreen-active{position:fixed!important;left:0!important;top:0!important;width:100%!important;height:100%!important;z-index:99999!important}.danmu-switch{-webkit-order:6;-moz-box-ordinal-group:7;order:6;z-index:26;margin:10px auto}.xgplayer-bullet{display:none;position:absolute;top:0;left:0;right:0;height:100%;overflow:hidden;z-index:9;outline:none}.xgplayer-bullet>*{position:absolute;white-space:nowrap;z-index:9}.xgplayer-has-bullet{display:block}.xgplayer-loading{display:none;width:100px;height:100px;overflow:hidden;-webkit-transform:scale(.7);-ms-transform:scale(.7);transform:scale(.7);position:absolute;left:50%;top:50%;margin:-70px auto auto -50px}.xgplayer-loading svg{border-radius:50%;-webkit-transform-origin:center;-ms-transform-origin:center;transform-origin:center;-webkit-animation:loadingRotate 1s linear infinite;animation:loadingRotate 1s linear infinite}.xgplayer-loading svg path{stroke:#ddd;stroke-dasharray:236;-webkit-animation:loadingDashOffset 2s linear infinite;animation:loadingDashOffset 2s linear infinite;animation-direction:alternate-reverse;fill:none;stroke-width:12px}.xgplayer-nostart .xgplayer-loading{display:none}.xgplayer-isloading .xgplayer-loading{display:block}.xgplayer-replay{position:absolute;left:0;top:0;width:100%;height:100%;z-index:500;display:none;-webkit-justify-content:center;-moz-box-pack:center;justify-content:center;-webkit-align-items:center;-moz-box-align:center;align-items:center;background:rgba(0,0,0,.54);-webkit-flex-direction:column;-moz-box-orient:vertical;-moz-box-direction:normal;flex-direction:column;cursor:pointer}.xgplayer-replay svg{background:rgba(0,0,0,.58);border-radius:100%;cursor:pointer}.xgplayer-replay svg path{-webkit-transform:translate(20px,21px);-ms-transform:translate(20px,21px);transform:translate(20px,21px);fill:#ddd}.xgplayer-replay svg:hover{background:rgba(0,0,0,.38)}.xgplayer-replay svg:hover path{fill:#fff}.xgplayer-replay .xgplayer-replay-img{position:absolute;left:50%;top:50%;cursor:pointer}.xgplayer-replay .xgplayer-replay-img:hover{opacity:.85}.xgplayer-replay .xgplayer-replay-txt{display:inline-block;font-family:PingFangSC-Regular;font-size:14px;color:#fff;line-height:34px;cursor:pointer}.xgplayer.xgplayer-ended .xgplayer-controls{display:none}.xgplayer.xgplayer-ended .xgplayer-replay{display:-webkit-flex;display:-moz-box;display:flex}.xgplayer-replay-img{display:none;position:absolute;left:50%;top:50%;z-index:500;cursor:pointer}.xgplayer-replay-img:hover{opacity:.85}.xgplayer.xgplayer-ended .xgplayer-replay-img{display:block}@keyframes playPause{0%{-webkit-transform:scale(1);transform:scale(1);opacity:1}99%{-webkit-transform:scale(1.3);transform:scale(1.3);opacity:0}to{-webkit-transform:scale(0);transform:scale(0);opacity:0}}@keyframes loadingRotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes loadingDashOffset{0%{stroke-dashoffset:236}to{stroke-dashoffset:0}}@keyframes enterTips{0%{opacity:0;left:0;width:3px}50%{opacity:1;left:50%;width:5px}to{opacity:0;left:100%;width:3px}}.xgplayer-enter{display:none;position:absolute;left:0;top:0;width:100%;height:100%;background:url(\"//s2.pstatp.com/cdn/expire-1-M/byted-player-images/1.0.2/bg.svg\") no-repeat 50%/cover;z-index:1100}.xgplayer-enter .xgplayer-enter-logo{display:block;position:absolute;left:50%;top:50%;width:130px;height:44px;margin:-22px auto auto -65px;background-size:130px 44px;background-image:url(\"//s3.pstatp.com/cdn/expire-1-M/byted-player-images/1.0.1/xg-logo-new.png\")}.xgplayer-enter .xgplayer-enter-tips{display:none;position:absolute;left:50%;top:50%;width:120px;height:1px;background:linear-gradient(90deg,#000,red,red,red,#000);margin:32px auto auto -62px}.xgplayer-enter .xgplayer-enter-tips:before{content:\" \";display:block;width:5px;height:1px;border-radius:50%;position:absolute;left:0;top:0;-webkit-animation:enterTips 1.6s linear infinite;animation:enterTips 1.6s linear infinite;background:#fff}.xgplayer-is-enter .xgplayer-enter,.xgplayer-is-enter .xgplayer-enter .xgplayer-enter-tips{display:block}.xgplayer-screenShot{-webkit-order:10;-moz-box-ordinal-group:11;order:10;position:relative;outline:none;display:block;cursor:pointer;margin-left:10px;margin-top:9px;margin-bottom:11px;height:20px}.xgplayer-screenShot .name{text-align:center;font-family:PingFangSC-Regular;font-size:13px;line-height:20px;height:20px;color:hsla(0,0%,100%,.8)}.xgplayer-screenShot .name span{width:60px;height:20px;line-height:20px;background:rgba(0,0,0,.38);border-radius:10px;display:inline-block;vertical-align:middle}.xgplayer-poster{position:absolute;left:0;top:0;width:100%;height:100%;z-index:100;background-size:cover;background-position:50%}.xgplayer-live{display:block;font-size:12px;color:#fff;line-height:40px;-webkit-order:1;-moz-box-ordinal-group:2;order:1}.xgplayer .xgplayer-none{display:none}.xgplayer-error{background:#000;display:none;position:absolute;left:0;top:0;width:100%;height:100%;z-index:1200;font-family:PingFangSC-Regular;font-size:14px;color:#fff;text-align:center;line-height:100%;-webkit-justify-content:center;-moz-box-pack:center;justify-content:center;-webkit-align-items:center;-moz-box-align:center;align-items:center}.xgplayer-error .xgplayer-error-refresh{color:#fa1f41;padding:0 3px;cursor:pointer}.xgplayer-is-error .xgplayer-error{display:-webkit-flex;display:-moz-box;display:flex}.xgplayer-error .xgplayer-error-text{line-height:18px;margin:auto 6px}.xgplayer-mobile .xgplayer-progress-btn{display:block}.xgplayer-mobile .xgplayer-progress:focus .xgplayer-progress-outer,.xgplayer-mobile .xgplayer-progress:hover .xgplayer-progress-outer{height:3px;margin-top:8.5px}.xgplayer-mobile .xgplayer-progress:focus .xgplayer-progress-dot,.xgplayer-mobile .xgplayer-progress:hover .xgplayer-progress-dot{height:3px}.xgplayer-mobile.xgplayer-ended .xgplayer-start,.xgplayer-mobile.xgplayer-ended .xgplayer-start-img,.xgplayer-mobile.xgplayer-inactive .xgplayer-start,.xgplayer-mobile.xgplayer-inactive .xgplayer-start-img{display:none}.xgplayer-mobile .xgplayer-start{width:60px;height:60px;line-height:60px;display:none;margin:-50px auto auto -30px}.xgplayer-mobile .xgplayer-start svg{margin:10px}.xgplayer-mobile .xgplayer-start-img{display:none}.xgplayer-mobile .xgplayer-tips{display:none!important}.xgplayer-mobile.xgplayer-nostart .xgplayer-start{margin:-30px auto auto -30px;display:block}.xgplayer-mobile.xgplayer-nostart .xgplayer-start-img{display:block}.xgplayer-mobile .xgplayer-loading{-webkit-transform:scale(.5);-ms-transform:scale(.5);transform:scale(.5)}.xgplayer-mobile.xgplayer-mobile-npassed .xgplayer-controls,.xgplayer-mobile.xgplayer-mobile-npassed .xgplayer-poster,.xgplayer-mobile.xgplayer-mobile-npassed .xgplayer-start,.xgplayer-mobile.xgplayer-mobile-npassed .xgplayer-start-img{display:none}",""])},"./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(a=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=o.sources.map((function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"}));return[n].concat(i).concat([r]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},"./node_modules/d/index.js":
/*!*********************************!*\
  !*** ./node_modules/d/index.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! type/value/is */"./node_modules/type/value/is.js"),r=n(/*! type/plain-function/is */"./node_modules/type/plain-function/is.js"),i=n(/*! es5-ext/object/assign */"./node_modules/es5-ext/object/assign/index.js"),a=n(/*! es5-ext/object/normalize-options */"./node_modules/es5-ext/object/normalize-options.js"),s=n(/*! es5-ext/string/#/contains */"./node_modules/es5-ext/string/#/contains/index.js");(e.exports=function(e,t){var n,r,l,c,u;return arguments.length<2||"string"!=typeof e?(c=t,t=e,e=null):c=arguments[2],o(e)?(n=s.call(e,"c"),r=s.call(e,"e"),l=s.call(e,"w")):(n=l=!0,r=!1),u={value:t,configurable:n,enumerable:r,writable:l},c?i(a(c),u):u}).gs=function(e,t,n){var l,c,u,d;return"string"!=typeof e?(u=n,n=t,t=e,e=null):u=arguments[3],o(t)?r(t)?o(n)?r(n)||(u=n,n=void 0):n=void 0:(u=t,t=n=void 0):t=void 0,o(e)?(l=s.call(e,"c"),c=s.call(e,"e")):(l=!0,c=!1),d={get:t,set:n,configurable:l,enumerable:c},u?i(a(u),d):d}},"./node_modules/danmu.js/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/danmu.js/dist/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){var n,o,r,i,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};window,i=function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==(void 0===e?"undefined":a(e))&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o,r=(o=n(22))&&o.__esModule?o:{default:o},i={};i.domObj=new r.default,i.createDom=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",r=document.createElement(e);return r.className=o,r.innerHTML=t,Object.keys(n).forEach((function(t){var o=t,i=n[t];"video"===e||"audio"===e?i&&r.setAttribute(o,i):r.setAttribute(o,i)})),r},i.hasClass=function(e,t){return e.classList?Array.prototype.some.call(e.classList,(function(e){return e===t})):!!e.className.match(new RegExp("(\\s|^)"+t+"(\\s|$)"))},i.addClass=function(e,t){e.classList?t.replace(/(^\s+|\s+$)/g,"").split(/\s+/g).forEach((function(t){t&&e.classList.add(t)})):i.hasClass(e,t)||(e.className+=" "+t)},i.removeClass=function(e,t){e.classList?t.split(/\s+/g).forEach((function(t){e.classList.remove(t)})):i.hasClass(e,t)&&t.split(/\s+/g).forEach((function(t){var n=new RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ")}))},i.toggleClass=function(e,t){t.split(/\s+/g).forEach((function(t){i.hasClass(e,t)?i.removeClass(e,t):i.addClass(e,t)}))},i.findDom=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,t=arguments[1],n=void 0;try{n=e.querySelector(t)}catch(o){t.startsWith("#")&&(n=e.getElementById(t.slice(1)))}return n},i.deepCopy=function(e,t){if("Object"===i.typeOf(t)&&"Object"===i.typeOf(e))return Object.keys(t).forEach((function(n){"Object"!==i.typeOf(t[n])||t[n]instanceof Node?"Array"===i.typeOf(t[n])?e[n]="Array"===i.typeOf(e[n])?e[n].concat(t[n]):t[n]:e[n]=t[n]:e[n]?i.deepCopy(e[n],t[n]):e[n]=t[n]})),e},i.typeOf=function(e){return Object.prototype.toString.call(e).match(/([^\s.*]+)(?=]$)/g)[0]},i.copyDom=function(e){if(e&&1===e.nodeType){var t=document.createElement(e.tagName);return Array.prototype.forEach.call(e.attributes,(function(e){t.setAttribute(e.name,e.value)})),e.innerHTML&&(t.innerHTML=e.innerHTML),t}return""},i.formatTime=function(e){var t=Math.floor(e);return 1e3*t+(e-t)},t.default=i,e.exports=t.default},function(e,t,n){var o=n(13)();e.exports=function(e){return e!==o&&null!==e}},function(e,t,n){e.exports=n(3)},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o,r=(o=n(4))&&o.__esModule?o:{default:o};n(26),t.default=r.default,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=s(n(5)),i=s(n(21)),a=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.config=a.default.deepCopy({overlap:!1,area:{start:0,end:1},live:!1,comments:[],direction:"r2l"},t),this.hideArr=[],(0,r.default)(this);var n=this;if(this.config.comments.forEach((function(e){e.duration=e.duration<5e3?5e3:e.duration,e.mode||(e.mode="scroll")})),!this.config.container||1!==this.config.container.nodeType)return this.emit("error","container id can't be empty"),!1;if(this.container=this.config.container,this.config.containerStyle){var o=this.config.containerStyle;Object.keys(o).forEach((function(e){n.container.style[e]=o[e]}))}this.live=this.config.live,this.player=this.config.player,this.direction=this.config.direction,a.default.addClass(this.container,"danmu"),this.bulletBtn=new i.default(this),this.emit("ready")}return o(e,[{key:"start",value:function(){this.bulletBtn.main.start()}},{key:"pause",value:function(){this.bulletBtn.main.pause()}},{key:"play",value:function(){this.bulletBtn.main.play()}},{key:"stop",value:function(){this.bulletBtn.main.stop()}},{key:"sendComment",value:function(e){e&&e.id&&e.duration&&(e.el||e.txt)&&(e.duration=e.duration<5e3?5e3:e.duration,this.bulletBtn.main.data.push(e))}},{key:"setCommentID",value:function(e,t){var n=this.container.getBoundingClientRect();e&&t&&(this.bulletBtn.main.data.some((function(n){return n.id===e&&(n.id=t,!0)})),this.bulletBtn.main.queue.some((function(o){return o.id===e&&(o.id=t,o.pauseMove(n),o.startMove(n),!0)})))}},{key:"setCommentDuration",value:function(e,t){var n=this.container.getBoundingClientRect();e&&t&&(t=t<5e3?5e3:t,this.bulletBtn.main.data.some((function(n){return n.id===e&&(n.duration=t,!0)})),this.bulletBtn.main.queue.some((function(o){return o.id===e&&(o.duration=t,o.pauseMove(n),o.startMove(n),!0)})))}},{key:"setAllDuration",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"scroll",t=arguments[1],n=this.container.getBoundingClientRect();t&&(t=t<5e3?5e3:t,this.bulletBtn.main.data.forEach((function(n){e===n.mode&&(n.duration=t)})),this.bulletBtn.main.queue.forEach((function(o){e===o.mode&&(o.duration=t,o.pauseMove(n),o.startMove(n))})))}},{key:"hide",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"scroll";this.hideArr.indexOf(e)<0&&this.hideArr.push(e),this.bulletBtn.main.queue.filter((function(t){return e===t.mode||"color"===e&&t.color})).forEach((function(e){return e.remove()}))}},{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"scroll",t=this.hideArr.indexOf(e);t>-1&&this.hideArr.splice(t,1)}},{key:"setDirection",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"r2l";this.emit("changeDirection",e)}}]),e}();t.default=l,e.exports=t.default},function(e,t,n){var o,r,i,s,l,c,u,d=n(6),p=n(20),f=Function.prototype.apply,h=Function.prototype.call,g=Object.create,v=Object.defineProperty,m=Object.defineProperties,y=Object.prototype.hasOwnProperty,b={configurable:!0,enumerable:!1,writable:!0};r=function(e,t){var n,r;return p(t),r=this,o.call(this,e,n=function(){i.call(r,e,n),f.call(t,this,arguments)}),n.__eeOnceListener__=t,this},l={on:o=function(e,t){var n;return p(t),y.call(this,"__ee__")?n=this.__ee__:(n=b.value=g(null),v(this,"__ee__",b),b.value=null),n[e]?"object"==a(n[e])?n[e].push(t):n[e]=[n[e],t]:n[e]=t,this},once:r,off:i=function(e,t){var n,o,r,i;if(p(t),!y.call(this,"__ee__"))return this;if(!(n=this.__ee__)[e])return this;if("object"==a(o=n[e]))for(i=0;r=o[i];++i)r!==t&&r.__eeOnceListener__!==t||(2===o.length?n[e]=o[i?0:1]:o.splice(i,1));else o!==t&&o.__eeOnceListener__!==t||delete n[e];return this},emit:s=function(e){var t,n,o,r,i;if(y.call(this,"__ee__")&&(r=this.__ee__[e]))if("object"==(void 0===r?"undefined":a(r))){for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];for(r=r.slice(),t=0;o=r[t];++t)f.call(o,this,i)}else switch(arguments.length){case 1:h.call(r,this);break;case 2:h.call(r,this,arguments[1]);break;case 3:h.call(r,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];f.call(r,this,i)}}},c={on:d(o),once:d(r),off:d(i),emit:d(s)},u=m({},c),e.exports=t=function(e){return null==e?g(u):m(Object(e),c)},t.methods=l},function(e,t,n){var o=n(7),r=n(15),i=n(16),a=n(17);(e.exports=function(e,t){var n,i,s,l,c;return arguments.length<2||"string"!=typeof e?(l=t,t=e,e=null):l=arguments[2],null==e?(n=s=!0,i=!1):(n=a.call(e,"c"),i=a.call(e,"e"),s=a.call(e,"w")),c={value:t,configurable:n,enumerable:i,writable:s},l?o(r(l),c):c}).gs=function(e,t,n){var s,l,c,u;return"string"!=typeof e?(c=n,n=t,t=e,e=null):c=arguments[3],null==t?t=void 0:i(t)?null==n?n=void 0:i(n)||(c=n,n=void 0):(c=t,t=n=void 0),null==e?(s=!0,l=!1):(s=a.call(e,"c"),l=a.call(e,"e")),u={get:t,set:n,configurable:s,enumerable:l},c?o(r(c),u):u}},function(e,t,n){e.exports=n(8)()?Object.assign:n(9)},function(e,t,n){e.exports=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}},function(e,t,n){var o=n(10),r=n(14),i=Math.max;e.exports=function(e,t){var n,a,s,l=i(arguments.length,2);for(e=Object(r(e)),s=function(o){try{e[o]=t[o]}catch(e){n||(n=e)}},a=1;a<l;++a)t=arguments[a],o(t).forEach(s);if(void 0!==n)throw n;return e}},function(e,t,n){e.exports=n(11)()?Object.keys:n(12)},function(e,t,n){e.exports=function(){try{return Object.keys("primitive"),!0}catch(e){return!1}}},function(e,t,n){var o=n(1),r=Object.keys;e.exports=function(e){return r(o(e)?Object(e):e)}},function(e,t,n){e.exports=function(){}},function(e,t,n){var o=n(1);e.exports=function(e){if(!o(e))throw new TypeError("Cannot use null or undefined");return e}},function(e,t,n){var o=n(1),r=Array.prototype.forEach,i=Object.create;e.exports=function(e){var t=i(null);return r.call(arguments,(function(e){o(e)&&function(e,t){var n;for(n in e)t[n]=e[n]}(Object(e),t)})),t}},function(e,t,n){e.exports=function(e){return"function"==typeof e}},function(e,t,n){e.exports=n(18)()?String.prototype.contains:n(19)},function(e,t,n){var o="razdwatrzy";e.exports=function(){return"function"==typeof o.contains&&!0===o.contains("dwa")&&!1===o.contains("foo")}},function(e,t,n){var o=String.prototype.indexOf;e.exports=function(e){return o.call(this,e,arguments[1])>-1}},function(e,t,n){e.exports=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=a(n(0)),i=a(n(23));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.main=new i.default(t),t.config.defaultOff||this.main.start()}return o(e,[{key:"createSwitch",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.switchBtn=r.default.createDom("dk-switch",'<span class="txt">弹</span>',{},"danmu-switch "+(e?"danmu-switch-active":"")),this.switchBtn}}]),e}();t.default=s,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t={initDOM:function(){return document.createElement("div")},initSize:10},this.init(t)}return o(e,[{key:"init",value:function(e){this.idleList=[],this.usingList=[],this._id=0,this.options=e,this._expand(e.initSize)}},{key:"use",value:function(){this.idleList.length||this._expand(1);var e=this.idleList.shift();return this.usingList.push(e),e}},{key:"unuse",value:function(e){var t=this.usingList.indexOf(e);t<0||(this.usingList.splice(t,1),e.innerHTML="",e.textcontent="",e.style="",this.idleList.push(e))}},{key:"_expand",value:function(e){for(var t=0;t<e;t++)this.idleList.push(this.options.initDOM(this._id++))}}]),e}();t.default=r,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=s(n(24)),i=s(n(25)),a=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.container=t.container,this.channel=new r.default(t),this.data=[].concat(t.config.comments),this.queue=[],this.timer=null,this.retryTimer=null,this.interval=2e3,this.status="idle",t.on("bullet_remove",this.updateQueue.bind(this));var n=this;this.danmu.on("changeDirection",(function(e){n.danmu.direction=e}))}return o(e,[{key:"updateQueue",value:function(e){var t=this;t.queue.some((function(n,o){return n.id===e.bullet.id&&(t.queue.splice(o,1),!0)}))}},{key:"init",value:function(e,t){t||(t=this),t.data.sort((function(e,t){return e.start-t.start})),t.retryTimer||(t.retryTimer=setInterval((function(){t.readData(),t.dataHandle()}),t.interval-1e3))}},{key:"start",value:function(){this.status="playing",this.queue=[],this.container.innerHTML="",this.channel.resetWithCb(this.init,this)}},{key:"stop",value:function(){this.status="closed",clearInterval(this.retryTimer),this.retryTimer=null,this.channel.reset(),this.queue=[],this.container.innerHTML=""}},{key:"play",value:function(){this.status="playing";var e=this.channel.channels,t=this.danmu.container.getBoundingClientRect();e&&e.length>0&&["scroll","top","bottom"].forEach((function(n){for(var o=0;o<e.length;o++)e[o].queue[n].forEach((function(e){e.resized||(e.startMove(t),e.resized=!0)}));for(var r=0;r<e.length;r++)e[r].queue[n].forEach((function(e){e.resized=!1}))}))}},{key:"pause",value:function(){this.status="paused";var e=this.channel.channels,t=this.danmu.container.getBoundingClientRect();e&&e.length>0&&["scroll","top","bottom"].forEach((function(n){for(var o=0;o<e.length;o++)e[o].queue[n].forEach((function(e){e.pauseMove(t)}))}))}},{key:"dataHandle",value:function(){var e=this;"paused"!==this.status&&"closed"!==this.status&&e.queue.length&&e.queue.forEach((function(t){"waiting"!==t.status&&"paused"!==t.status||t.startMove(e.channel.containerPos)}))}},{key:"readData",value:function(){var e=this,t=this.danmu,n=0;t.player&&t.player.currentTime&&(n=a.default.formatTime(t.player.currentTime));var o=void 0,r=e.interval,s=e.channel,l=void 0;t.player?(l=e.data.filter((function(t){return!t.start&&e.danmu.hideArr.indexOf(t.mode)<0&&(!t.color||e.danmu.hideArr.indexOf("color")<0)&&(t.start=n),e.danmu.hideArr.indexOf(t.mode)<0&&(!t.color||e.danmu.hideArr.indexOf("color")<0)&&t.start-r<=n&&n<=t.start+r})),t.live&&(e.data=e.data.filter((function(e){return e.start||(e.start=n),e.start>n-3*r})))):l=e.data.filter((function(t){return e.danmu.hideArr.indexOf(t.mode)<0&&(!t.color||e.danmu.hideArr.indexOf("color")<0)})),l.length>0&&l.forEach((function(n){(o=new i.default(t,n)).attach(),s.addBullet(o).result?(e.queue.push(o),o.topInit()):o.detach()}))}}]),e}();t.default=l,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.reset();var n=this;this.danmu.on("bullet_remove",(function(e){n.removeBullet(e.bullet)})),this.direction=t.direction,this.danmu.on("changeDirection",(function(e){n.direction=e})),this.containerPos=this.danmu.container.getBoundingClientRect(),this.containerWidth=this.containerPos.width,this.containerHeight=this.containerPos.height,this.containerLeft=this.containerPos.left,this.containerRight=this.containerPos.right,this.danmu.bulletResizeTimer=setInterval((function(){n.containerPos=n.danmu.container.getBoundingClientRect(),(Math.abs(n.containerPos.width-n.containerWidth)>=2||Math.abs(n.containerPos.height-n.containerHeight)>=2||Math.abs(n.containerPos.left-n.containerLeft)>=2||Math.abs(n.containerPos.right-n.containerRight)>=2)&&(n.containerWidth=n.containerPos.width,n.containerHeight=n.containerPos.height,n.containerLeft=n.containerPos.left,n.containerRight=n.containerPos.right,n.resize(!0))}),50)}return o(e,[{key:"resize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.danmu.container,n=this;setTimeout((function(){n.danmu.bulletBtn.main.data&&n.danmu.bulletBtn.main.data.forEach((function(e){e.bookChannelId&&delete e.bookChannelId}));var o=t.getBoundingClientRect();n.width=o.width,n.height=o.height,n.danmu.config.area&&n.danmu.config.area.start>=0&&n.danmu.config.area.end>=n.danmu.config.area.start&&("b2t"===n.direction?n.width=n.width*(n.danmu.config.area.end-n.danmu.config.area.start):n.height=n.height*(n.danmu.config.area.end-n.danmu.config.area.start)),n.container=t;var r,i=/mobile/gi.test(navigator.userAgent)?10:12;r="b2t"===n.direction?Math.floor(n.width/i):Math.floor(n.height/i);for(var a=[],s=0;s<r;s++)a[s]={id:s,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};if(n.channels&&n.channels.length<=a.length){for(var l=function(t){a[t]={id:t,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top"].forEach((function(o){n.channels[t].queue[o].forEach((function(r){r.el&&(a[t].queue[o].push(r),r.resized||(r.pauseMove(n.containerPos,e),r.startMove(n.containerPos),r.resized=!0))}))})),n.channels[t].queue.bottom.forEach((function(o){if(o.el){if(a[t+a.length-n.channels.length].queue.bottom.push(o),o.channel_id[0]+o.channel_id[1]-1===t){var r=[].concat(o.channel_id);o.channel_id=[r[0]-n.channels.length+a.length,r[1]],o.top=o.channel_id[0]*i,n.danmu.config.area&&n.danmu.config.area.start&&(o.top+=n.containerHeight*n.danmu.config.area.start),o.topInit()}o.resized||(o.pauseMove(n.containerPos,e),o.startMove(n.containerPos),o.resized=!0)}}))},c=0;c<n.channels.length;c++)l(c);for(var u=function(e){["scroll","top","bottom"].forEach((function(t){a[e].queue[t].forEach((function(e){e.resized=!1}))}))},d=0;d<a.length;d++)u(d);n.channels=a,"b2t"===n.direction?n.channelWidth=i:n.channelHeight=i}else if(n.channels&&n.channels.length>a.length){for(var p=function(t){a[t]={id:t,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top","bottom"].forEach((function(o){if("top"===o&&t>Math.floor(a.length/2));else if("bottom"===o&&t<=Math.floor(a.length/2));else{var r="bottom"===o?t-a.length+n.channels.length:t;n.channels[r].queue[o].forEach((function(s,l){if(s.el){if(a[t].queue[o].push(s),"bottom"===o&&s.channel_id[0]+s.channel_id[1]-1===r){var c=[].concat(s.channel_id);s.channel_id=[c[0]-n.channels.length+a.length,c[1]],s.top=s.channel_id[0]*i,n.danmu.config.area&&n.danmu.config.area.start&&(s.top+=n.containerHeight*n.danmu.config.area.start),s.topInit()}s.resized||(s.pauseMove(n.containerPos,e),s.startMove(n.containerPos),s.resized=!0)}n.channels[r].queue[o].splice(l,1)}))}}))},f=0;f<a.length;f++)p(f);for(var h=function(e){["scroll","top","bottom"].forEach((function(t){n.channels[e].queue[t].forEach((function(e){e.pauseMove(n.containerPos),e.remove()}))}))},g=a.length;g<n.channels.length;g++)h(g);for(var v=function(e){["scroll","top","bottom"].forEach((function(t){a[e].queue[t].forEach((function(e){e.resized=!1}))}))},m=0;m<a.length;m++)v(m);n.channels=a,"b2t"===n.direction?n.channelWidth=i:n.channelHeight=i}}),10)}},{key:"addBullet",value:function(e){var t=this.danmu,n=this.channels,o=void 0,r=void 0,i=void 0;if("b2t"===this.direction?(r=this.channelWidth,i=Math.ceil(e.width/r)):(o=this.channelHeight,i=Math.ceil(e.height/o)),i>n.length)return{result:!1,message:"exceed channels.length, occupy="+i+",channelsSize="+n.length};for(var a=!0,s=void 0,l=-1,c=0,u=n.length;c<u;c++)if(n[c].queue[e.mode].some((function(t){return t.id===e.id})))return{result:!1,message:"exsited, channelOrder="+c+",danmu_id="+e.id};if("scroll"===e.mode)for(var d=0,p=n.length-i;d<=p;d++){a=!0;for(var f=d;f<d+i;f++){if((s=n[f]).operating.scroll){a=!1;break}if((s.bookId.scroll||e.prior)&&s.bookId.scroll!==e.id){a=!1;break}s.operating.scroll=!0;var h=s.queue.scroll[0];if(h){var g=h.el.getBoundingClientRect();if("b2t"===this.direction){if(g.bottom>this.containerPos.bottom){a=!1,s.operating.scroll=!1;break}}else if(g.right>this.containerPos.right){a=!1,s.operating.scroll=!1;break}var v,m=void 0,y=void 0,b=void 0,x=void 0;if("b2t"===this.direction?(y=(g.top-this.containerPos.top+g.height)/(m=(this.containerPos.height+g.height)/h.duration),b=this.containerPos.height,x=(this.containerPos.height+e.height)/e.duration):(y=(g.left-this.containerPos.left+g.width)/(m=(this.containerPos.width+g.width)/h.duration),b=this.containerPos.width,x=(this.containerPos.width+e.width)/e.duration),v=b/x,t.config.bOffset||(t.config.bOffset=0),m<x&&y+t.config.bOffset>v){a=!1,s.operating.scroll=!1;break}}s.operating.scroll=!1}if(a){l=d;break}}else if("top"===e.mode)for(var w=0,_=n.length-i;w<=_;w++){a=!0;for(var k=w;k<w+i;k++){if(k>Math.floor(n.length/2)){a=!1;break}if((s=n[k]).operating[e.mode]){a=!1;break}if((s.bookId[e.mode]||e.prior)&&s.bookId[e.mode]!==e.id){a=!1;break}if(s.operating[e.mode]=!0,s.queue[e.mode].length>0){a=!1,s.operating[e.mode]=!1;break}s.operating[e.mode]=!1}if(a){l=w;break}}else if("bottom"===e.mode)for(var E=n.length-i;E>=0;E--){a=!0;for(var C=E;C<E+i;C++){if(C<=Math.floor(n.length/2)){a=!1;break}if((s=n[C]).operating[e.mode]){a=!1;break}if((s.bookId[e.mode]||e.prior)&&s.bookId[e.mode]!==e.id){a=!1;break}if(s.operating[e.mode]=!0,s.queue[e.mode].length>0){a=!1,s.operating[e.mode]=!1;break}s.operating[e.mode]=!1}if(a){l=E;break}}if(-1!==l){for(var S=l,P=l+i;S<P;S++)(s=n[S]).operating[e.mode]=!0,s.queue[e.mode].unshift(e),e.prior&&delete s.bookId[e.mode],s.operating[e.mode]=!1;return e.prior&&(delete e.bookChannelId,t.bulletBtn.main.data.some((function(t){return t.id===e.id&&(delete t.bookChannelId,!0)}))),e.channel_id=[l,i],"b2t"===this.direction?(e.top=l*r,this.danmu.config.area&&this.danmu.config.area.start&&(e.top+=this.containerWidth*this.danmu.config.area.start)):(e.top=l*o,this.danmu.config.area&&this.danmu.config.area.start&&(e.top+=this.containerHeight*this.danmu.config.area.start)),{result:e,message:"success"}}if(e.prior)if(e.bookChannelId)t.bulletBtn.main.data.some((function(t){return t.id===e.id&&(t.start+=2e3,!0)}));else{l=-1;for(var j=0,T=n.length-i;j<=T;j++){a=!0;for(var M=j;M<j+i;M++)if(n[M].bookId[e.mode]){a=!1;break}if(a){l=j;break}}if(-1!==l){for(var O=l;O<l+i;O++)n[O].bookId[e.mode]=e.id;t.bulletBtn.main.data.some((function(t){return t.id===e.id&&(t.start+=2e3,t.bookChannelId=[l,i],!0)}))}}return{result:!1,message:"no surplus will right"}}},{key:"removeBullet",value:function(e){for(var t=this.channels,n=e.channel_id,o=void 0,r=n[0],i=n[0]+n[1];r<i;r++)if(o=t[r]){o.operating[e.mode]=!0;var a=-1;o.queue[e.mode].some((function(t,n){return t.id===e.id&&(a=n,!0)})),a>-1&&o.queue[e.mode].splice(a,1),o.operating[e.mode]=!1}}},{key:"resetArea",value:function(){var e=this.danmu.container,t=this,n=e.getBoundingClientRect();t.width=n.width,t.height=n.height,t.danmu.config.area&&t.danmu.config.area.start>=0&&t.danmu.config.area.end>=t.danmu.config.area.start&&("b2t"===t.direction?t.width=t.width*(t.danmu.config.area.end-t.danmu.config.area.start):t.height=t.height*(t.danmu.config.area.end-t.danmu.config.area.start)),t.container=e;var o,r=/mobile/gi.test(navigator.userAgent)?10:12;o="b2t"===t.direction?Math.floor(t.width/r):Math.floor(t.height/r);for(var i=[],a=0;a<o;a++)i[a]={id:a,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};if(t.channels&&t.channels.length<=i.length){for(var s=function(e){i[e]={id:e,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top"].forEach((function(n){t.channels[e].queue[n].forEach((function(o){o.el&&(i[e].queue[n].push(o),o.resized||(o.pauseMove(t.containerPos,!1),o.startMove(t.containerPos),o.resized=!0))}))})),t.channels[e].queue.bottom.forEach((function(n){if(n.el){if(i[e+i.length-t.channels.length].queue.bottom.push(n),n.channel_id[0]+n.channel_id[1]-1===e){var o=[].concat(n.channel_id);n.channel_id=[o[0]-t.channels.length+i.length,o[1]],n.top=n.channel_id[0]*r,t.danmu.config.area&&t.danmu.config.area.start&&(n.top+=t.containerHeight*t.danmu.config.area.start),n.topInit()}n.resized||(n.pauseMove(t.containerPos,!1),n.startMove(t.containerPos),n.resized=!0)}}))},l=0;l<t.channels.length;l++)s(l);for(var c=function(e){["scroll","top","bottom"].forEach((function(t){i[e].queue[t].forEach((function(e){e.resized=!1}))}))},u=0;u<i.length;u++)c(u);t.channels=i,"b2t"===t.direction?t.channelWidth=r:t.channelHeight=r}else if(t.channels&&t.channels.length>i.length){for(var d=function(e){i[e]={id:e,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}},["scroll","top","bottom"].forEach((function(n){if("top"===n&&e>Math.floor(i.length/2));else if("bottom"===n&&e<=Math.floor(i.length/2));else{var o="bottom"===n?e-i.length+t.channels.length:e;t.channels[o].queue[n].forEach((function(a,s){if(a.el){if(i[e].queue[n].push(a),"bottom"===n&&a.channel_id[0]+a.channel_id[1]-1===o){var l=[].concat(a.channel_id);a.channel_id=[l[0]-t.channels.length+i.length,l[1]],a.top=a.channel_id[0]*r,t.danmu.config.area&&t.danmu.config.area.start&&(a.top+=t.containerHeight*t.danmu.config.area.start),a.topInit()}a.resized||(a.pauseMove(t.containerPos,!1),a.startMove(t.containerPos),a.resized=!0)}t.channels[o].queue[n].splice(s,1)}))}}))},p=0;p<i.length;p++)d(p);for(var f=function(e){["scroll","top","bottom"].forEach((function(t){i[e].queue[t].forEach((function(e){e.resized=!1}))}))},h=0;h<i.length;h++)f(h);t.channels=i,"b2t"===t.direction?t.channelWidth=r:t.channelHeight=r}}},{key:"reset",value:function(){var e=this.danmu.container,t=this;t.channels&&t.channels.length>0&&["scroll","top","bottom"].forEach((function(e){for(var n=0;n<t.channels.length;n++)t.channels[n].queue[e].forEach((function(e){e.pauseMove(t.containerPos),e.remove()}))})),setTimeout((function(){var n=e.getBoundingClientRect();t.width=n.width,t.height=n.height,t.danmu.config.area&&t.danmu.config.area.start>=0&&t.danmu.config.area.end>=t.danmu.config.area.start&&("b2t"===t.direction?t.width=t.width*(t.danmu.config.area.end-t.danmu.config.area.start):t.height=t.height*(t.danmu.config.area.end-t.danmu.config.area.start)),t.container=e;var o,r=/mobile/gi.test(navigator.userAgent)?10:12;o="b2t"===t.direction?Math.floor(t.width/r):Math.floor(t.height/r);for(var i=[],a=0;a<o;a++)i[a]={id:a,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};t.channels=i,"b2t"===t.direction?t.channelWidth=r:t.channelHeight=r}),200)}},{key:"resetWithCb",value:function(e,t){var n=this.danmu.container,o=this;o.channels&&o.channels.length>0&&["scroll","top","bottom"].forEach((function(e){for(var t=0;t<o.channels.length;t++)o.channels[t].queue[e].forEach((function(e){e.pauseMove(o.containerPos),e.remove()}))}));var r=n.getBoundingClientRect();o.width=r.width,o.height=r.height,o.danmu.config.area&&o.danmu.config.area.start>=0&&o.danmu.config.area.end>=o.danmu.config.area.start&&("b2t"===o.direction?o.width=o.width*(o.danmu.config.area.end-o.danmu.config.area.start):o.height=o.height*(o.danmu.config.area.end-o.danmu.config.area.start)),o.container=n;var i,a=/mobile/gi.test(navigator.userAgent)?10:12;i="b2t"===o.direction?Math.floor(o.width/a):Math.floor(o.height/a);for(var s=[],l=0;l<i;l++)s[l]={id:l,queue:{scroll:[],top:[],bottom:[]},operating:{scroll:!1,top:!1,bottom:!1},bookId:{}};o.channels=s,o.channelHeight=a,e&&e(!0,t)}}]),e}();t.default=r,e.exports=t.default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=(o=n(0))&&o.__esModule?o:{default:o},a=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.danmu=t,this.duration=n.duration,this.id=n.id,this.container=t.container,this.start=n.start,this.prior=n.prior,this.color=n.color,this.bookChannelId=n.bookChannelId,this.direction=t.direction;var o=this;this.danmu.on("changeDirection",(function(e){o.direction=e}));var r=void 0;if(this.domObj=i.default.domObj,n.el&&1===n.el.nodeType)(r=this.domObj.use()).appendChild(i.default.copyDom(n.el));else if((r=this.domObj.use()).textContent=n.txt,n.style){var a=n.style;Object.keys(a).forEach((function(e){r.style[e]=a[e]}))}"top"===n.mode||"bottom"===n.mode?this.mode=n.mode:this.mode="scroll",this.el=r,this.status="waiting";var s=this.container.getBoundingClientRect();this.el.style.left=s.width+"px"}return r(e,[{key:"attach",value:function(){this.container.appendChild(this.el),this.elPos=this.el.getBoundingClientRect(),"b2t"===this.direction?(this.width=this.elPos.height,this.height=this.elPos.width):(this.width=this.elPos.width,this.height=this.elPos.height)}},{key:"detach",value:function(){this.container&&this.el&&(this.domObj.unuse(this.el),this.container.removeChild(this.el));var e=this;this.danmu.off("changeDirection",(function(t){e.direction=t})),this.el=null}},{key:"topInit",value:function(){if("b2t"===this.direction){var e=this.container.getBoundingClientRect();this.el.style.transformOrigin="left top",this.el.style.transform="translateX(-"+this.top+"px) translateY("+e.height+"px) translateZ(0px) rotate(90deg)",this.el.style.transition="transform 0s linear 0s"}else this.el.style.top=this.top+"px"}},{key:"pauseMove",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if("paused"!==this.status&&(this.status="paused",clearTimeout(this.removeTimer),this.el))if(this.el.style.willChange="auto","scroll"===this.mode){if(t){var n=((new Date).getTime()-this.moveTime)/1e3*this.moveV,o=0;o=this.moveMoreS-n>=0?"b2t"===this.direction?(this.moveMoreS-n)/this.moveContainerHeight*e.height:(this.moveMoreS-n)/this.moveContainerWidth*e.width:this.moveMoreS-n,"b2t"===this.direction?this.el.style.transform="translateX(-"+this.top+"px) translateY("+o+"px) translateZ(0px) rotate(90deg)":this.el.style.left=o+"px"}else"b2t"===this.direction?this.el.style.transform="translateX(-"+this.top+"px) translateY("+(this.el.getBoundingClientRect().top-e.top)+"px) translateZ(0px) rotate(90deg)":this.el.style.left=this.el.getBoundingClientRect().left-e.left+"px";"b2t"===this.direction?this.el.style.transition="transform 0s linear 0s":(this.el.style.transform="translateX(0px) translateY(0px) translateZ(0px)",this.el.style.transition="transform 0s linear 0s")}else this.pastDuration&&this.startTime?this.pastDuration=this.pastDuration+(new Date).getTime()-this.startTime:this.pastDuration=1}},{key:"startMove",value:function(e){var t=this;if(this.el&&"start"!==this.status)if(this.status="start",this.el.style.willChange="transform","scroll"===this.mode)if("b2t"===this.direction){this.moveV=(e.height+this.height)/this.duration*1e3;var n=(t.el.getBoundingClientRect().bottom-e.top)/this.moveV;this.el.style.transition="transform "+n+"s linear 0s",setTimeout((function(){t.el&&(t.el.style.transform="translateX(-"+t.top+"px) translateY(-"+t.height+"px) translateZ(0px) rotate(90deg)",t.moveTime=(new Date).getTime(),t.moveMoreS=t.el.getBoundingClientRect().top-e.top,t.moveContainerHeight=e.height,t.removeTimer=setTimeout(i,1e3*n))}),20)}else{this.moveV=(e.width+this.width)/this.duration*1e3;var o=(t.el.getBoundingClientRect().right-e.left)/this.moveV;this.el.style.transition="transform "+o+"s linear 0s",setTimeout((function(){t.el&&(t.el.style.transform="translateX(-"+(t.el.getBoundingClientRect().right-e.left)+"px) translateY(0px) translateZ(0px)",t.moveTime=(new Date).getTime(),t.moveMoreS=t.el.getBoundingClientRect().left-e.left,t.moveContainerWidth=e.width,t.removeTimer=setTimeout(i,1e3*o))}),20)}else{this.el.style.left="50%",this.el.style.margin="0 0 0 -"+this.width/2+"px",this.pastDuration||(this.pastDuration=1);var r=this.duration>=this.pastDuration?this.duration-this.pastDuration:0;this.removeTimer=setTimeout(i,r),this.startTime=(new Date).getTime()}function i(){if(t.el)if("scroll"===t.mode){var e=t.danmu.container.getBoundingClientRect(),n=t.el.getBoundingClientRect();"b2t"===t.direction?n&&n.bottom<=e.top+100?(t.status="end",t.remove()):(t.pauseMove(e),t.startMove(e)):n&&n.right<=e.left+100?(t.status="end",t.remove()):(t.pauseMove(e),t.startMove(e))}else t.status="end",t.remove()}}},{key:"remove",value:function(){var e=this;this.removeTimer&&clearTimeout(this.removeTimer),e.el&&e.el.parentNode&&(e.el.style.willChange="auto",this.danmu.off("changeDirection",(function(t){e.direction=t})),this.domObj.unuse(e.el),e.el.parentNode.removeChild(e.el),e.el=null,e.danmu.emit("bullet_remove",{bullet:e}))}}]),e}();t.default=a,e.exports=t.default},function(e,t,n){var o=n(27);"string"==typeof o&&(o=[[e.i,o,""]]),n(29)(o,{hmr:!0,transform:void 0,insertInto:void 0}),o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(28)(!1)).push([e.i,".danmu{overflow:hidden;-webkit-user-select:none;-moz-user-select:none;user-select:none;-ms-user-select:none}.danmu>*{position:absolute;white-space:nowrap}.danmu-switch{width:32px;height:20px;border-radius:100px;background-color:#ccc;-webkit-box-sizing:border-box;box-sizing:border-box;outline:none;cursor:pointer;position:relative;text-align:center;margin:10px auto}.danmu-switch.danmu-switch-active{padding-left:12px;background-color:#f85959}.danmu-switch span.txt{width:20px;height:20px;line-height:20px;text-align:center;display:block;border-radius:100px;background-color:#ffffff;-webkit-box-shadow:-2px 0 0 0 rgba(0, 0, 0, .04);box-shadow:-2px 0 0 0 rgba(0, 0, 0, .04);font-family:PingFangSC;font-size:10px;font-weight:500;color:#f44336}\n",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,o=e[1]||"",r=e[3];if(!r)return o;if(t&&"function"==typeof btoa){var i=(n=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),a=r.sources.map((function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"}));return[o].concat(a).concat([i]).join("\n")}return[o].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var o,r,i={},s=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,u=0,d=[],p=n(30);function f(e,t){for(var n=0;n<e.length;n++){var o=e[n],r=i[o.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](o.parts[a]);for(;a<o.parts.length;a++)r.parts.push(b(o.parts[a],t))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(b(o.parts[a],t));i[o.id]={id:o.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function g(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=d[d.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=a(e.insertAt)||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),y(t,e.attrs),g(e,t),t}function y(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function b(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=u++;n=c||(c=m(t)),o=_.bind(null,n,a,!1),r=_.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),g(e,t),t}(t),o=function(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=p(o)),r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),r=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),o=function(e,t){var n=t.css,o=t.media;if(o&&e.setAttribute("media",o),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){v(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=("undefined"==typeof document?"undefined":a(document)))throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==a(t.attrs)?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return f(n,t),function(e){for(var o=[],r=0;r<n.length;r++){var a=n[r];(s=i[a.id]).refs--,o.push(s)}for(e&&f(h(e,t),t),r=0;r<o.length;r++){var s;if(0===(s=o[r]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var x,w=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join("\n")});function _(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=w(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")}))}}])},"object"==a(t)&&"object"==a(e)?e.exports=i():(o=[],void 0===(r="function"==typeof(n=i)?n.apply(t,o):n)||(e.exports=r))}).call(this,n(/*! ./../../webpack/buildin/module.js */"./node_modules/webpack/buildin/module.js")(e))},"./node_modules/downloadjs/download.js":
/*!*********************************************!*\
  !*** ./node_modules/downloadjs/download.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r,i;"function"==typeof Symbol&&Symbol.iterator;r=[],void 0===(i="function"==typeof(o=function(){return function e(t,n,o){var r,i,a=window,s="application/octet-stream",l=o||s,c=t,u=!n&&!o&&c,d=document.createElement("a"),p=function(e){return String(e)},f=a.Blob||a.MozBlob||a.WebKitBlob||p,h=n||"download";if(f=f.call?f.bind(a):Blob,"true"===String(this)&&(l=(c=[c,l])[0],c=c[1]),u&&u.length<2048&&(h=u.split("/").pop().split("?")[0],d.href=u,-1!==d.href.indexOf(u))){var g=new XMLHttpRequest;return g.open("GET",u,!0),g.responseType="blob",g.onload=function(t){e(t.target.response,h,s)},setTimeout((function(){g.send()}),0),g}if(/^data:([\w+-]+\/[\w+.-]+)?[,;]/.test(c)){if(!(c.length>2096103.424&&f!==p))return navigator.msSaveBlob?navigator.msSaveBlob(b(c),h):x(c);l=(c=b(c)).type||s}else if(/([\x80-\xff])/.test(c)){for(var v=0,m=new Uint8Array(c.length),y=m.length;v<y;++v)m[v]=c.charCodeAt(v);c=new f([m],{type:l})}function b(e){for(var t=e.split(/[:;,]/),n=t[1],o=("base64"==t[2]?atob:decodeURIComponent)(t.pop()),r=o.length,i=0,a=new Uint8Array(r);i<r;++i)a[i]=o.charCodeAt(i);return new f([a],{type:n})}function x(e,t){if("download"in d)return d.href=e,d.setAttribute("download",h),d.className="download-js-link",d.innerHTML="downloading...",d.style.display="none",document.body.appendChild(d),setTimeout((function(){d.click(),document.body.removeChild(d),!0===t&&setTimeout((function(){a.URL.revokeObjectURL(d.href)}),250)}),66),!0;if(/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent))return/^data:/.test(e)&&(e="data:"+e.replace(/^data:([\w\/\-\+]+)/,s)),window.open(e)||confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.")&&(location.href=e),!0;var n=document.createElement("iframe");document.body.appendChild(n),!t&&/^data:/.test(e)&&(e="data:"+e.replace(/^data:([\w\/\-\+]+)/,s)),n.src=e,setTimeout((function(){document.body.removeChild(n)}),333)}if(r=c instanceof f?c:new f([c],{type:l}),navigator.msSaveBlob)return navigator.msSaveBlob(r,h);if(a.URL)x(a.URL.createObjectURL(r),!0);else{if("string"==typeof r||r.constructor===p)try{return x("data:"+l+";base64,"+a.btoa(r))}catch(e){return x("data:"+l+","+encodeURIComponent(r))}(i=new FileReader).onload=function(e){x(this.result)},i.readAsDataURL(r)}return!0}})?o.apply(t,r):o)||(e.exports=i)},"./node_modules/draggabilly/draggabilly.js":
/*!*************************************************!*\
  !*** ./node_modules/draggabilly/draggabilly.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r;"function"==typeof Symbol&&Symbol.iterator;
/*!
 * Draggabilly v2.2.0
 * Make that shiz draggable
 * https://draggabilly.desandro.com
 * MIT license
 */
!function(i,a){o=[n(/*! get-size/get-size */"./node_modules/get-size/get-size.js"),n(/*! unidragger/unidragger */"./node_modules/unidragger/unidragger.js")],void 0===(r=function(e,t){return function(e,t,n){function o(e,t){for(var n in t)e[n]=t[n];return e}var r=e.jQuery;function i(e,t){this.element="string"==typeof e?document.querySelector(e):e,r&&(this.$element=r(this.element)),this.options=o({},this.constructor.defaults),this.option(t),this._create()}var a=i.prototype=Object.create(n.prototype);i.defaults={},a.option=function(e){o(this.options,e)};var s={relative:!0,absolute:!0,fixed:!0};function l(e,t,n){return n=n||"round",t?Math[n](e/t)*t:e}a._create=function(){this.position={},this._getPosition(),this.startPoint={x:0,y:0},this.dragPoint={x:0,y:0},this.startPosition=o({},this.position);var e=getComputedStyle(this.element);s[e.position]||(this.element.style.position="relative"),this.on("pointerDown",this.onPointerDown),this.on("pointerMove",this.onPointerMove),this.on("pointerUp",this.onPointerUp),this.enable(),this.setHandles()},a.setHandles=function(){this.handles=this.options.handle?this.element.querySelectorAll(this.options.handle):[this.element],this.bindHandles()},a.dispatchEvent=function(e,t,n){var o=[t].concat(n);this.emitEvent(e,o),this.dispatchJQueryEvent(e,t,n)},a.dispatchJQueryEvent=function(t,n,o){var r=e.jQuery;if(r&&this.$element){var i=r.Event(n);i.type=t,this.$element.trigger(i,o)}},a._getPosition=function(){var e=getComputedStyle(this.element),t=this._getPositionCoord(e.left,"width"),n=this._getPositionCoord(e.top,"height");this.position.x=isNaN(t)?0:t,this.position.y=isNaN(n)?0:n,this._addTransformPosition(e)},a._getPositionCoord=function(e,n){if(-1!=e.indexOf("%")){var o=t(this.element.parentNode);return o?parseFloat(e)/100*o[n]:0}return parseInt(e,10)},a._addTransformPosition=function(e){var t=e.transform;if(0===t.indexOf("matrix")){var n=t.split(","),o=0===t.indexOf("matrix3d")?12:4,r=parseInt(n[o],10),i=parseInt(n[o+1],10);this.position.x+=r,this.position.y+=i}},a.onPointerDown=function(e,t){this.element.classList.add("is-pointer-down"),this.dispatchJQueryEvent("pointerDown",e,[t])},a.dragStart=function(e,t){this.isEnabled&&(this._getPosition(),this.measureContainment(),this.startPosition.x=this.position.x,this.startPosition.y=this.position.y,this.setLeftTop(),this.dragPoint.x=0,this.dragPoint.y=0,this.element.classList.add("is-dragging"),this.dispatchEvent("dragStart",e,[t]),this.animate())},a.measureContainment=function(){var e=this.getContainer();if(e){var n=t(this.element),o=t(e),r=this.element.getBoundingClientRect(),i=e.getBoundingClientRect(),a=o.borderLeftWidth+o.borderRightWidth,s=o.borderTopWidth+o.borderBottomWidth,l=this.relativeStartPosition={x:r.left-(i.left+o.borderLeftWidth),y:r.top-(i.top+o.borderTopWidth)};this.containSize={width:o.width-a-l.x-n.width,height:o.height-s-l.y-n.height}}},a.getContainer=function(){var e=this.options.containment;if(e)return e instanceof HTMLElement?e:"string"==typeof e?document.querySelector(e):this.element.parentNode},a.onPointerMove=function(e,t,n){this.dispatchJQueryEvent("pointerMove",e,[t,n])},a.dragMove=function(e,t,n){if(this.isEnabled){var o=n.x,r=n.y,i=this.options.grid,a=i&&i[0],s=i&&i[1];o=l(o,a),r=l(r,s),o=this.containDrag("x",o,a),r=this.containDrag("y",r,s),o="y"==this.options.axis?0:o,r="x"==this.options.axis?0:r,this.position.x=this.startPosition.x+o,this.position.y=this.startPosition.y+r,this.dragPoint.x=o,this.dragPoint.y=r,this.dispatchEvent("dragMove",e,[t,n])}},a.containDrag=function(e,t,n){if(!this.options.containment)return t;var o="x"==e?"width":"height",r=l(-this.relativeStartPosition[e],n,"ceil"),i=this.containSize[o];return i=l(i,n,"floor"),Math.max(r,Math.min(i,t))},a.onPointerUp=function(e,t){this.element.classList.remove("is-pointer-down"),this.dispatchJQueryEvent("pointerUp",e,[t])},a.dragEnd=function(e,t){this.isEnabled&&(this.element.style.transform="",this.setLeftTop(),this.element.classList.remove("is-dragging"),this.dispatchEvent("dragEnd",e,[t]))},a.animate=function(){if(this.isDragging){this.positionDrag();var e=this;requestAnimationFrame((function(){e.animate()}))}},a.setLeftTop=function(){this.element.style.left=this.position.x+"px",this.element.style.top=this.position.y+"px"},a.positionDrag=function(){this.element.style.transform="translate3d( "+this.dragPoint.x+"px, "+this.dragPoint.y+"px, 0)"},a.staticClick=function(e,t){this.dispatchEvent("staticClick",e,[t])},a.setPosition=function(e,t){this.position.x=e,this.position.y=t,this.setLeftTop()},a.enable=function(){this.isEnabled=!0},a.disable=function(){this.isEnabled=!1,this.isDragging&&this.dragEnd()},a.destroy=function(){this.disable(),this.element.style.transform="",this.element.style.left="",this.element.style.top="",this.element.style.position="",this.unbindHandles(),this.$element&&this.$element.removeData("draggabilly")},a._init=function(){},r&&r.bridget&&r.bridget("draggabilly",i);return i}(i,e,t)}.apply(t,o))||(e.exports=r)}(window)},"./node_modules/es5-ext/function/noop.js":
/*!***********************************************!*\
  !*** ./node_modules/es5-ext/function/noop.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){}},"./node_modules/es5-ext/object/assign/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/object/assign/is-implemented.js")()?Object.assign:n(/*! ./shim */"./node_modules/es5-ext/object/assign/shim.js")},"./node_modules/es5-ext/object/assign/is-implemented.js":
/*!**************************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/is-implemented.js ***!
  \**************************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}},"./node_modules/es5-ext/object/assign/shim.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/shim.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../keys */"./node_modules/es5-ext/object/keys/index.js"),r=n(/*! ../valid-value */"./node_modules/es5-ext/object/valid-value.js"),i=Math.max;e.exports=function(e,t){var n,a,s,l=i(arguments.length,2);for(e=Object(r(e)),s=function(o){try{e[o]=t[o]}catch(e){n||(n=e)}},a=1;a<l;++a)t=arguments[a],o(t).forEach(s);if(void 0!==n)throw n;return e}},"./node_modules/es5-ext/object/is-value.js":
/*!*************************************************!*\
  !*** ./node_modules/es5-ext/object/is-value.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../function/noop */"./node_modules/es5-ext/function/noop.js")();e.exports=function(e){return e!==o&&null!==e}},"./node_modules/es5-ext/object/keys/index.js":
/*!***************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/object/keys/is-implemented.js")()?Object.keys:n(/*! ./shim */"./node_modules/es5-ext/object/keys/shim.js")},"./node_modules/es5-ext/object/keys/is-implemented.js":
/*!************************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/is-implemented.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){try{return Object.keys("primitive"),!0}catch(e){return!1}}},"./node_modules/es5-ext/object/keys/shim.js":
/*!**************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/shim.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../is-value */"./node_modules/es5-ext/object/is-value.js"),r=Object.keys;e.exports=function(e){return r(o(e)?Object(e):e)}},"./node_modules/es5-ext/object/normalize-options.js":
/*!**********************************************************!*\
  !*** ./node_modules/es5-ext/object/normalize-options.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js"),r=Array.prototype.forEach,i=Object.create,a=function(e,t){var n;for(n in e)t[n]=e[n]};e.exports=function(e){var t=i(null);return r.call(arguments,(function(e){o(e)&&a(Object(e),t)})),t}},"./node_modules/es5-ext/object/valid-callable.js":
/*!*******************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-callable.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e}},"./node_modules/es5-ext/object/valid-value.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-value.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js");e.exports=function(e){if(!o(e))throw new TypeError("Cannot use null or undefined");return e}},"./node_modules/es5-ext/string/#/contains/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/index.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/string/#/contains/is-implemented.js")()?String.prototype.contains:n(/*! ./shim */"./node_modules/es5-ext/string/#/contains/shim.js")},"./node_modules/es5-ext/string/#/contains/is-implemented.js":
/*!******************************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/is-implemented.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o="razdwatrzy";e.exports=function(){return"function"==typeof o.contains&&(!0===o.contains("dwa")&&!1===o.contains("foo"))}},"./node_modules/es5-ext/string/#/contains/shim.js":
/*!********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/shim.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=String.prototype.indexOf;e.exports=function(e){return o.call(this,e,arguments[1])>-1}},"./node_modules/ev-emitter/ev-emitter.js":
/*!***********************************************!*\
  !*** ./node_modules/ev-emitter/ev-emitter.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r;"function"==typeof Symbol&&Symbol.iterator;"undefined"!=typeof window&&window,void 0===(r="function"==typeof(o=function(){function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var n=this._events=this._events||{},o=n[e]=n[e]||[];return-1==o.indexOf(t)&&o.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var n=this._onceEvents=this._onceEvents||{};return(n[e]=n[e]||{})[t]=!0,this}},t.off=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){var o=n.indexOf(t);return-1!=o&&n.splice(o,1),this}},t.emitEvent=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){n=n.slice(0),t=t||[];for(var o=this._onceEvents&&this._onceEvents[e],r=0;r<n.length;r++){var i=n[r];o&&o[i]&&(this.off(e,i),delete o[i]),i.apply(this,t)}return this}},t.allOff=function(){delete this._events,delete this._onceEvents},e})?o.call(t,n,t,e):o)||(e.exports=r)},"./node_modules/event-emitter/index.js":
/*!*********************************************!*\
  !*** ./node_modules/event-emitter/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r,i,a,s,l,c,u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d=n(/*! d */"./node_modules/d/index.js"),p=n(/*! es5-ext/object/valid-callable */"./node_modules/es5-ext/object/valid-callable.js"),f=Function.prototype.apply,h=Function.prototype.call,g=Object.create,v=Object.defineProperty,m=Object.defineProperties,y=Object.prototype.hasOwnProperty,b={configurable:!0,enumerable:!1,writable:!0};r=function(e,t){var n,r;return p(t),r=this,o.call(this,e,n=function(){i.call(r,e,n),f.call(t,this,arguments)}),n.__eeOnceListener__=t,this},s={on:o=function(e,t){var n;return p(t),y.call(this,"__ee__")?n=this.__ee__:(n=b.value=g(null),v(this,"__ee__",b),b.value=null),n[e]?"object"===u(n[e])?n[e].push(t):n[e]=[n[e],t]:n[e]=t,this},once:r,off:i=function(e,t){var n,o,r,i;if(p(t),!y.call(this,"__ee__"))return this;if(!(n=this.__ee__)[e])return this;if("object"===(void 0===(o=n[e])?"undefined":u(o)))for(i=0;r=o[i];++i)r!==t&&r.__eeOnceListener__!==t||(2===o.length?n[e]=o[i?0:1]:o.splice(i,1));else o!==t&&o.__eeOnceListener__!==t||delete n[e];return this},emit:a=function(e){var t,n,o,r,i;if(y.call(this,"__ee__")&&(r=this.__ee__[e]))if("object"===(void 0===r?"undefined":u(r))){for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];for(r=r.slice(),t=0;o=r[t];++t)f.call(o,this,i)}else switch(arguments.length){case 1:h.call(r,this);break;case 2:h.call(r,this,arguments[1]);break;case 3:h.call(r,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];f.call(r,this,i)}}},l={on:d(o),once:d(r),off:d(i),emit:d(a)},c=m({},l),e.exports=t=function(e){return null==e?g(c):m(Object(e),l)},t.methods=s},"./node_modules/get-size/get-size.js":
/*!*******************************************!*\
  !*** ./node_modules/get-size/get-size.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};window,void 0===(r="function"==typeof(o=function(){function e(e){var t=parseFloat(e);return-1==e.indexOf("%")&&!isNaN(t)&&t}var t="undefined"==typeof console?function(){}:function(e){console.error(e)},n=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],o=n.length;function r(e){var n=getComputedStyle(e);return n||t("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),n}var a,s=!1;function l(t){if(function(){if(!s){s=!0;var t=document.createElement("div");t.style.width="200px",t.style.padding="1px 2px 3px 4px",t.style.borderStyle="solid",t.style.borderWidth="1px 2px 3px 4px",t.style.boxSizing="border-box";var n=document.body||document.documentElement;n.appendChild(t);var o=r(t);a=200==Math.round(e(o.width)),l.isBoxSizeOuter=a,n.removeChild(t)}}(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==(void 0===t?"undefined":i(t))&&t.nodeType){var c=r(t);if("none"==c.display)return function(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0;t<o;t++)e[n[t]]=0;return e}();var u={};u.width=t.offsetWidth,u.height=t.offsetHeight;for(var d=u.isBorderBox="border-box"==c.boxSizing,p=0;p<o;p++){var f=n[p],h=c[f],g=parseFloat(h);u[f]=isNaN(g)?0:g}var v=u.paddingLeft+u.paddingRight,m=u.paddingTop+u.paddingBottom,y=u.marginLeft+u.marginRight,b=u.marginTop+u.marginBottom,x=u.borderLeftWidth+u.borderRightWidth,w=u.borderTopWidth+u.borderBottomWidth,_=d&&a,k=e(c.width);!1!==k&&(u.width=k+(_?0:v+x));var E=e(c.height);return!1!==E&&(u.height=E+(_?0:m+w)),u.innerWidth=u.width-(v+x),u.innerHeight=u.height-(m+w),u.outerWidth=u.width+y,u.outerHeight=u.height+b,u}}return l})?o.call(t,n,t,e):o)||(e.exports=r)},"./node_modules/pasition/dist/pasition.js":
/*!************************************************!*\
  !*** ./node_modules/pasition/dist/pasition.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r,i,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};i=function(){var e=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],o=!0,r=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{!o&&s.return&&s.return()}finally{if(r)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},t=2*Math.PI,n=function(e,t,n,o,r,i,a){var s=e.x,l=e.y;return{x:o*(s*=t)-r*(l*=n)+i,y:r*s+o*l+a}},o=function(e,t){var n=4/3*Math.tan(t/4),o=Math.cos(e),r=Math.sin(e),i=Math.cos(e+t),a=Math.sin(e+t);return[{x:o-r*n,y:r+o*n},{x:i+a*n,y:a-i*n},{x:i,y:a}]},r=function(e,t,n,o){var r=e*o-t*n<0?-1:1,i=(e*n+t*o)/(Math.sqrt(e*e+t*t)*Math.sqrt(e*e+t*t));return i>1&&(i=1),i<-1&&(i=-1),r*Math.acos(i)},i=function(i){var a=i.px,s=i.py,l=i.cx,c=i.cy,u=i.rx,d=i.ry,p=i.xAxisRotation,f=void 0===p?0:p,h=i.largeArcFlag,g=void 0===h?0:h,v=i.sweepFlag,m=void 0===v?0:v,y=[];if(0===u||0===d)return[];var b=Math.sin(f*t/360),x=Math.cos(f*t/360),w=x*(a-l)/2+b*(s-c)/2,_=-b*(a-l)/2+x*(s-c)/2;if(0===w&&0===_)return[];u=Math.abs(u),d=Math.abs(d);var k=Math.pow(w,2)/Math.pow(u,2)+Math.pow(_,2)/Math.pow(d,2);k>1&&(u*=Math.sqrt(k),d*=Math.sqrt(k));var E=function(e,n,o,i,a,s,l,c,u,d,p,f){var h=Math.pow(a,2),g=Math.pow(s,2),v=Math.pow(p,2),m=Math.pow(f,2),y=h*g-h*m-g*v;y<0&&(y=0),y/=h*m+g*v;var b=(y=Math.sqrt(y)*(l===c?-1:1))*a/s*f,x=y*-s/a*p,w=d*b-u*x+(e+o)/2,_=u*b+d*x+(n+i)/2,k=(p-b)/a,E=(f-x)/s,C=(-p-b)/a,S=(-f-x)/s,P=r(1,0,k,E),j=r(k,E,C,S);return 0===c&&j>0&&(j-=t),1===c&&j<0&&(j+=t),[w,_,P,j]}(a,s,l,c,u,d,g,m,b,x,w,_),C=e(E,4),S=C[0],P=C[1],j=C[2],T=C[3],M=Math.max(Math.ceil(Math.abs(T)/(t/4)),1);T/=M;for(var O=0;O<M;O++)y.push(o(j,T)),j+=T;return y.map((function(e){var t=n(e[0],u,d,x,b,S,P),o=t.x,r=t.y,i=n(e[1],u,d,x,b,S,P),a=i.x,s=i.y,l=n(e[2],u,d,x,b,S,P);return{x1:o,y1:r,x2:a,y2:s,x:l.x,y:l.y}}))},a={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0},s=/([astvzqmhlc])([^astvzqmhlc]*)/gi,l=/-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi;function c(e){var t=e[0][0],n=e[0][1],o=t,r=n;return e.forEach((function(e){var i=e[0],a=e[2],s=e[4],l=e[6],c=e[1],u=e[3],d=e[5],p=e[7];t=Math.min(t,i,a,s,l),n=Math.min(n,c,u,d,p),o=Math.max(o,i,a,s,l),r=Math.max(r,c,u,d,p)})),[t,n,o,r]}function u(e,t){var n=function(e){for(var t=[],n=0;n<e;n++){for(var o=[],r=0;r<e;r++){var i=r+n;i>e-1&&(i-=e),o[i]=r}t.push(o)}return t}(e.length),o=[];n.forEach((function(n){var r=0,i=0;n.forEach((function(n){var o,a,s,l,c,u,d,p,f,h,g,v,m,y,b,x,w,_;r+=(o=e[n],a=t[i++],s=o[0],l=o[2],c=o[4],u=o[6],d=o[1],p=o[3],f=o[5],h=o[7],g=a[0],v=a[2],m=a[4],y=a[6],b=a[1],x=a[3],w=a[5],_=a[7],Math.sqrt(Math.pow(g-s,2)+Math.pow(b-d,2))+Math.sqrt(Math.pow(v-l,2)+Math.pow(x-p,2))+Math.sqrt(Math.pow(m-c,2)+Math.pow(w-f,2))+Math.sqrt(Math.pow(y-u,2)+Math.pow(_-h,2)))})),o.push({index:n,distance:r})})),o.sort((function(e,t){return e.distance-t.distance}));var r=[];return o[0].index.forEach((function(t){r.push(e[t])})),r}function d(e,t){var n=function(e){for(var t=[],n=0;n<e;n++)t.push(n);return o=[],r=[],function e(t){var n,i;for(n=0;n<t.length;n++)i=t.splice(n,1)[0],r.push(i),0==t.length&&o.push(r.slice()),e(t),t.splice(n,0,i),r.pop();return o}(t);var o,r}(e.length),o=[];n.forEach((function(n){var r=0;n.forEach((function(n){var o,i;r+=(o=c(e[n]),i=c(t[n]),Math.sqrt(Math.pow(o[0]-i[0],2)+Math.pow(o[1]-i[1],2))+Math.sqrt(Math.pow(o[2]-i[2],2)+Math.pow(o[3]-i[3],2)))})),o.push({index:n,distance:r})})),o.sort((function(e,t){return e.distance-t.distance}));var r=[];return o[0].index.forEach((function(t){r.push(e[t])})),r}var p={};function f(e,t,n,o,r,i,a,s,l,c){var u=(n-e)*l+e,d=(o-t)*l+t,p=(r-n)*l+n,f=(i-o)*l+o,h=(p-u)*l+u,g=(f-d)*l+d,v=(((a-r)*l+r-p)*l+p-h)*l+h,m=(((s-i)*l+i-f)*l+f-g)*l+g;return c?[v,m,h,g,u,d,e,t]:[e,t,u,d,h,g,v,m]}function h(e,t){for(var n=function(t){var n=e[e.length-1],o=[];n.forEach((function(e){o.push(e.slice(0))})),e.push(o)},o=0;o<t;o++)n()}return p.parser=function(e){var t=[];return e.replace(s,(function(e,n,o){var r=n.toLowerCase();for(o=function(e){var t=e.match(l);return t?t.map(Number):[]}(o),"m"==r&&o.length>2&&(t.push([n].concat(o.splice(0,2))),r="l",n="m"==n?"l":"L");;){if(o.length==a[r])return o.unshift(n),t.push(o);if(o.length<a[r])throw new Error("malformed path data");t.push([n].concat(o.splice(0,a[r])))}})),t},p.lerpCurve=function(e,t,n){return p.lerpPoints(e[0],e[1],t[0],t[1],n).concat(p.lerpPoints(e[2],e[3],t[2],t[3],n)).concat(p.lerpPoints(e[4],e[5],t[4],t[5],n)).concat(p.lerpPoints(e[6],e[7],t[6],t[7],n))},p.lerpPoints=function(e,t,n,o,r){return[e+(n-e)*r,t+(o-t)*r]},p.q2b=function(e,t,n,o,r,i){return[e,t,(e+2*n)/3,(t+2*o)/3,(r+2*n)/3,(i+2*o)/3,r,i]},p.path2shapes=function(e){for(var t=p.parser(e),n=0,o=0,r=0,a=t.length,s=[],l=null,c=void 0,u=void 0,d=void 0,f=void 0,h=void 0,g=void 0,v=void 0;r<a;r++){var m=t[r],y=m[0],b=t[r-1];switch(y){case"m":s[h=s.length]=[],l=s[h],n+=m[1],o+=m[2];break;case"M":s[h=s.length]=[],l=s[h],n=m[1],o=m[2];break;case"l":l.push([n,o,n,o,n,o,n+m[1],o+m[2]]),n+=m[1],o+=m[2];break;case"L":l.push([n,o,m[1],m[2],m[1],m[2],m[1],m[2]]),n=m[1],o=m[2];break;case"h":l.push([n,o,n,o,n,o,n+m[1],o]),n+=m[1];break;case"H":l.push([n,o,m[1],o,m[1],o,m[1],o]),n=m[1];break;case"v":l.push([n,o,n,o,n,o,n,o+m[1]]),o+=m[1];break;case"V":l.push([n,o,n,m[1],n,m[1],n,m[1]]),o=m[1];break;case"C":l.push([n,o,m[1],m[2],m[3],m[4],m[5],m[6]]),n=m[5],o=m[6];break;case"S":"C"===b[0]||"c"===b[0]?l.push([n,o,n+b[5]-b[3],o+b[6]-b[4],m[1],m[2],m[3],m[4]]):"S"!==b[0]&&"s"!==b[0]||l.push([n,o,n+b[3]-b[1],o+b[4]-b[2],m[1],m[2],m[3],m[4]]),n=m[3],o=m[4];break;case"c":l.push([n,o,n+m[1],o+m[2],n+m[3],o+m[4],n+m[5],o+m[6]]),n+=m[5],o+=m[6];break;case"s":"C"===b[0]||"c"===b[0]?l.push([n,o,n+b[5]-b[3],o+b[6]-b[4],n+m[1],o+m[2],n+m[3],o+m[4]]):"S"!==b[0]&&"s"!==b[0]||l.push([n,o,n+b[3]-b[1],o+b[4]-b[2],n+m[1],o+m[2],n+m[3],o+m[4]]),n+=m[3],o+=m[4];break;case"a":v=(g=i({rx:m[1],ry:m[2],px:n,py:o,xAxisRotation:m[3],largeArcFlag:m[4],sweepFlag:m[5],cx:n+m[6],cy:o+m[7]}))[g.length-1],g.forEach((function(e,t){0===t?l.push([n,o,e.x1,e.y1,e.x2,e.y2,e.x,e.y]):l.push([g[t-1].x,g[t-1].y,e.x1,e.y1,e.x2,e.y2,e.x,e.y])})),n=v.x,o=v.y;break;case"A":v=(g=i({rx:m[1],ry:m[2],px:n,py:o,xAxisRotation:m[3],largeArcFlag:m[4],sweepFlag:m[5],cx:m[6],cy:m[7]}))[g.length-1],g.forEach((function(e,t){0===t?l.push([n,o,e.x1,e.y1,e.x2,e.y2,e.x,e.y]):l.push([g[t-1].x,g[t-1].y,e.x1,e.y1,e.x2,e.y2,e.x,e.y])})),n=v.x,o=v.y;break;case"Q":l.push(p.q2b(n,o,m[1],m[2],m[3],m[4])),n=m[3],o=m[4];break;case"q":l.push(p.q2b(n,o,n+m[1],o+m[2],m[3]+n,m[4]+o)),n+=m[3],o+=m[4];break;case"T":"Q"===b[0]||"q"===b[0]?(d=n+b[3]-b[1],f=o+b[4]-b[2],l.push(p.q2b(n,o,d,f,m[1],m[2]))):"T"!==b[0]&&"t"!==b[0]||(l.push(p.q2b(n,o,n+n-d,o+o-f,m[1],m[2])),d=n+n-d,f=o+o-f),n=m[1],o=m[2];break;case"t":"Q"===b[0]||"q"===b[0]?(d=n+b[3]-b[1],f=o+b[4]-b[2],l.push(p.q2b(n,o,d,f,n+m[1],o+m[2]))):"T"!==b[0]&&"t"!==b[0]||(l.push(p.q2b(n,o,n+n-d,o+o-f,n+m[1],o+m[2])),d=n+n-d,f=o+o-f),n+=m[1],o+=m[2];break;case"Z":case"z":c=l[0][0],u=l[0][1],l.push([n,o,c,u,c,u,c,u])}}return s},p._upCurves=function(e,t){for(var n=0,o=0,r=e.length;n<t;n++)e.push(e[o].slice(0)),++o>r-1&&(o-=r)},p._splitCurves=function(e,t){for(var n,o,r,i,a,s,l,c,u,d=0,p=0;d<t;d++){var h=e[p],g=(n=h[0],o=h[1],r=h[2],i=h[3],a=h[4],s=h[5],l=h[6],c=h[7],{left:f(n,o,r,i,a,s,l,c,u=.5),right:f(l,c,a,s,r,i,n,o,1-u,!0)});e.splice(p,1),e.splice(p,0,g.left,g.right),(p+=2)>=e.length-1&&(p=0)}},p.lerp=function(e,t,n){return p._lerp(p.path2shapes(e),p.path2shapes(t),n)},p.MIM_CURVES_COUNT=100,p._preprocessing=function(e,t){var n=e.length,o=t.length,r=JSON.parse(JSON.stringify(e)),i=JSON.parse(JSON.stringify(t));return n>o?h(i,n-o):n<o&&h(r,o-n),(r=d(r,i)).forEach((function(e,t){var n=e.length,o=i[t].length;n>o?n<p.MIM_CURVES_COUNT?(p._splitCurves(e,p.MIM_CURVES_COUNT-n),p._splitCurves(i[t],p.MIM_CURVES_COUNT-o)):p._splitCurves(i[t],n-o):n<o&&(o<p.MIM_CURVES_COUNT?(p._splitCurves(e,p.MIM_CURVES_COUNT-n),p._splitCurves(i[t],p.MIM_CURVES_COUNT-o)):p._splitCurves(e,o-n))})),r.forEach((function(e,t){r[t]=u(e,i[t])})),[r,i]},p._lerp=function(e,t,n){var o=[];return e.forEach((function(e,r){var i=[];e.forEach((function(e,o){i.push(p.lerpCurve(e,t[r][o],n))})),o.push(i)})),o},p.animate=function(e){var t=p.path2shapes(e.from),n=p.path2shapes(e.to),o=p._preprocessing(t,n),r=new Date,i=e.end||function(){},a=e.progress||function(){},s=e.begin||function(){},l=e.easing||function(e){return e},c=null,u=null,d=e.time;s(t),function e(){var t=new Date-r;if(t>=d)return a(u=n,1),i(u),void cancelAnimationFrame(c);var s=l(t/d);u=p._lerp(o[0],o[1],s),a(u,s),c=requestAnimationFrame(e)}()},p},"object"===a(t)&&void 0!==e?e.exports=i():void 0===(r="function"==typeof(o=i)?o.call(t,n,t,e):o)||(e.exports=r)},"./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var o,r,i={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),s=function(e){return document.querySelector(e)},l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=s.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,u=0,d=[],p=n(/*! ./urls */"./node_modules/style-loader/lib/urls.js");function f(e,t){for(var n=0;n<e.length;n++){var o=e[n],r=i[o.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](o.parts[a]);for(;a<o.parts.length;a++)r.parts.push(b(o.parts[a],t))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(b(o.parts[a],t));i[o.id]={id:o.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function g(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=d[d.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function m(e){var t=document.createElement("style");return e.attrs.type="text/css",y(t,e.attrs),g(e,t),t}function y(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function b(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=u++;n=c||(c=m(t)),o=_.bind(null,n,a,!1),r=_.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",y(t,e.attrs),g(e,t),t}(t),o=E.bind(null,n,t),r=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),o=k.bind(null,n),r=function(){v(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return f(n,t),function(e){for(var o=[],r=0;r<n.length;r++){var a=n[r];(s=i[a.id]).refs--,o.push(s)}e&&f(h(e,t),t);for(r=0;r<o.length;r++){var s;if(0===(s=o[r]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var x,w=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join("\n")});function _(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=w(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function k(e,t){var n=t.css,o=t.media;if(o&&e.setAttribute("media",o),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function E(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=p(o)),r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}},"./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")}))}},"./node_modules/type/function/is.js":
/*!******************************************!*\
  !*** ./node_modules/type/function/is.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../prototype/is */"./node_modules/type/prototype/is.js");e.exports=function(e){if("function"!=typeof e)return!1;if(!hasOwnProperty.call(e,"length"))return!1;try{if("number"!=typeof e.length)return!1;if("function"!=typeof e.call)return!1;if("function"!=typeof e.apply)return!1}catch(e){return!1}return!o(e)}},"./node_modules/type/object/is.js":
/*!****************************************!*\
  !*** ./node_modules/type/object/is.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=n(/*! ../value/is */"./node_modules/type/value/is.js"),i={object:!0,function:!0,undefined:!0};e.exports=function(e){return!!r(e)&&hasOwnProperty.call(i,void 0===e?"undefined":o(e))}},"./node_modules/type/plain-function/is.js":
/*!************************************************!*\
  !*** ./node_modules/type/plain-function/is.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../function/is */"./node_modules/type/function/is.js"),r=/^\s*class[\s{\/}]/,i=Function.prototype.toString;e.exports=function(e){return!!o(e)&&!r.test(i.call(e))}},"./node_modules/type/prototype/is.js":
/*!*******************************************!*\
  !*** ./node_modules/type/prototype/is.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){"use strict";var o=n(/*! ../object/is */"./node_modules/type/object/is.js");e.exports=function(e){if(!o(e))return!1;try{return!!e.constructor&&e.constructor.prototype===e}catch(e){return!1}}},"./node_modules/type/value/is.js":
/*!***************************************!*\
  !*** ./node_modules/type/value/is.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){return null!=e}},"./node_modules/unidragger/unidragger.js":
/*!***********************************************!*\
  !*** ./node_modules/unidragger/unidragger.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r;"function"==typeof Symbol&&Symbol.iterator;
/*!
 * Unidragger v2.3.0
 * Draggable base class
 * MIT license
 */
!function(i,a){o=[n(/*! unipointer/unipointer */"./node_modules/unipointer/unipointer.js")],void 0===(r=function(e){return function(e,t){function n(){}var o=n.prototype=Object.create(t.prototype);o.bindHandles=function(){this._bindHandles(!0)},o.unbindHandles=function(){this._bindHandles(!1)},o._bindHandles=function(t){for(var n=(t=void 0===t||t)?"addEventListener":"removeEventListener",o=t?this._touchActionValue:"",r=0;r<this.handles.length;r++){var i=this.handles[r];this._bindStartEvent(i,t),i[n]("click",this),e.PointerEvent&&(i.style.touchAction=o)}},o._touchActionValue="none",o.pointerDown=function(e,t){this.okayPointerDown(e)&&(this.pointerDownPointer=t,e.preventDefault(),this.pointerDownBlur(),this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,t]))};var r={TEXTAREA:!0,INPUT:!0,SELECT:!0,OPTION:!0},i={radio:!0,checkbox:!0,button:!0,submit:!0,image:!0,file:!0};return o.okayPointerDown=function(e){var t=r[e.target.nodeName],n=i[e.target.type],o=!t||n;return o||this._pointerReset(),o},o.pointerDownBlur=function(){var e=document.activeElement;e&&e.blur&&e!=document.body&&e.blur()},o.pointerMove=function(e,t){var n=this._dragPointerMove(e,t);this.emitEvent("pointerMove",[e,t,n]),this._dragMove(e,t,n)},o._dragPointerMove=function(e,t){var n={x:t.pageX-this.pointerDownPointer.pageX,y:t.pageY-this.pointerDownPointer.pageY};return!this.isDragging&&this.hasDragStarted(n)&&this._dragStart(e,t),n},o.hasDragStarted=function(e){return Math.abs(e.x)>3||Math.abs(e.y)>3},o.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t]),this._dragPointerUp(e,t)},o._dragPointerUp=function(e,t){this.isDragging?this._dragEnd(e,t):this._staticClick(e,t)},o._dragStart=function(e,t){this.isDragging=!0,this.isPreventingClicks=!0,this.dragStart(e,t)},o.dragStart=function(e,t){this.emitEvent("dragStart",[e,t])},o._dragMove=function(e,t,n){this.isDragging&&this.dragMove(e,t,n)},o.dragMove=function(e,t,n){e.preventDefault(),this.emitEvent("dragMove",[e,t,n])},o._dragEnd=function(e,t){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(e,t)},o.dragEnd=function(e,t){this.emitEvent("dragEnd",[e,t])},o.onclick=function(e){this.isPreventingClicks&&e.preventDefault()},o._staticClick=function(e,t){this.isIgnoringMouseUp&&"mouseup"==e.type||(this.staticClick(e,t),"mouseup"!=e.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400)))},o.staticClick=function(e,t){this.emitEvent("staticClick",[e,t])},n.getPointerPoint=t.getPointerPoint,n}(i,e)}.apply(t,o))||(e.exports=r)}(window)},"./node_modules/unipointer/unipointer.js":
/*!***********************************************!*\
  !*** ./node_modules/unipointer/unipointer.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r;"function"==typeof Symbol&&Symbol.iterator;
/*!
 * Unipointer v2.3.0
 * base class for doing one thing with pointer event
 * MIT license
 */
!function(i,a){o=[n(/*! ev-emitter/ev-emitter */"./node_modules/ev-emitter/ev-emitter.js")],void 0===(r=function(e){return function(e,t){function n(){}var o=n.prototype=Object.create(t.prototype);o.bindStartEvent=function(e){this._bindStartEvent(e,!0)},o.unbindStartEvent=function(e){this._bindStartEvent(e,!1)},o._bindStartEvent=function(t,n){var o=(n=void 0===n||n)?"addEventListener":"removeEventListener",r="mousedown";e.PointerEvent?r="pointerdown":"ontouchstart"in e&&(r="touchstart"),t[o](r,this)},o.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.getTouch=function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.identifier==this.pointerIdentifier)return n}},o.onmousedown=function(e){var t=e.button;t&&0!==t&&1!==t||this._pointerDown(e,e)},o.ontouchstart=function(e){this._pointerDown(e,e.changedTouches[0])},o.onpointerdown=function(e){this._pointerDown(e,e)},o._pointerDown=function(e,t){e.button||this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==t.pointerId?t.pointerId:t.identifier,this.pointerDown(e,t))},o.pointerDown=function(e,t){this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,t])};var r={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"]};return o._bindPostStartEvents=function(t){if(t){var n=r[t.type];n.forEach((function(t){e.addEventListener(t,this)}),this),this._boundPointerEvents=n}},o._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach((function(t){e.removeEventListener(t,this)}),this),delete this._boundPointerEvents)},o.onmousemove=function(e){this._pointerMove(e,e)},o.onpointermove=function(e){e.pointerId==this.pointerIdentifier&&this._pointerMove(e,e)},o.ontouchmove=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerMove(e,t)},o._pointerMove=function(e,t){this.pointerMove(e,t)},o.pointerMove=function(e,t){this.emitEvent("pointerMove",[e,t])},o.onmouseup=function(e){this._pointerUp(e,e)},o.onpointerup=function(e){e.pointerId==this.pointerIdentifier&&this._pointerUp(e,e)},o.ontouchend=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerUp(e,t)},o._pointerUp=function(e,t){this._pointerDone(),this.pointerUp(e,t)},o.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t])},o._pointerDone=function(){this._pointerReset(),this._unbindPostStartEvents(),this.pointerDone()},o._pointerReset=function(){this.isPointerDown=!1,delete this.pointerIdentifier},o.pointerDone=function(){},o.onpointercancel=function(e){e.pointerId==this.pointerIdentifier&&this._pointerCancel(e,e)},o.ontouchcancel=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerCancel(e,t)},o._pointerCancel=function(e,t){this._pointerDone(),this.pointerCancel(e,t)},o.pointerCancel=function(e,t){this.emitEvent("pointerCancel",[e,t])},n.getPointerPoint=function(e){return{x:e.pageX,y:e.pageY}},n}(i,e)}.apply(t,o))||(e.exports=r)}(window)},"./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},"./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, main, scripts, keywords, babel, repository, author, license, dependencies, browserslist, devDependencies, default */function(e){e.exports=JSON.parse('{"name":"xgplayer","version":"1.1.6-alpha.0","description":"video player","main":"./dist/index.js","scripts":{"prepare":"npm run build","build":"webpack --progress --display-chunks -p","watch":"webpack --progress --display-chunks -p --watch --mode development","test":"karma start --single-run","test:watch":"karma start"},"keywords":["video","player"],"babel":{"presets":["es2015"],"plugins":["add-module-exports","babel-plugin-bulk-import"]},"repository":{"type":"git","url":"git+https://github.com/bytedance/xgplayer.git"},"author":"yinguohui@bytedance.com","license":"MIT","dependencies":{"danmu.js":"0.1.0","deepmerge":"^1.5.0","downloadjs":"1.4.7","draggabilly":"^2.2.0","event-emitter":"^0.3.5","pasition":"^1.0.1","request-frame":"^1.5.3"},"browserslist":["> 5%","IE 9","iOS 7","Firefox > 20"],"devDependencies":{"autoprefixer":"^9.1.5","babel-core":"^6.26.3","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-bulk-import":"^1.0.2","babel-plugin-transform-object-rest-spread":"^6.26.0","babel-plugin-transform-runtime":"^6.23.0","babel-preset-es2015":"^6.24.1","chai":"^4.1.2","core-js":"^2.5.4","css-loader":"^0.28.11","json-loader":"^0.5.7","karma":"^3.0.0","karma-chrome-launcher":"^2.2.0","karma-mocha":"^1.3.0","karma-sourcemap-loader":"^0.3.7","karma-spec-reporter":"0.0.32","karma-webpack":"^4.0.0-rc.1","mocha":"^5.2.0","node-sass":"^4.8.3","postcss-cssnext":"^3.1.0","postcss-loader":"^2.1.5","sass-loader":"^6.0.7","style-loader":"^0.20.3","sugarss":"^1.0.1","webpack":"^4.11.0","webpack-cli":"^3.0.2","zlib":"^1.0.5"}}')},"./src/control/collect.js":
/*!********************************!*\
  !*** ./src/control/collect.js ***!
  \********************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};var i=void 0,a=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.set=function(e,n){var o=e,r=n;if(null===r)return!1;var i="";if(o.indexOf(".")>-1){var a=o.split(".");i=a[0],o=a[1]}"os_version"===o&&(r=""+r),i?"user"===i||"header"===i?t.envInfo[i][o]=r:"headers"===i?t.envInfo.header.headers[o]=r:t.envInfo.header.headers.custom[o]=r:t.envInfo.user.hasOwnProperty(o)?["user_type","device_id","ip_addr_id"].indexOf(o)>-1?t.envInfo.user[o]=Number(r):["user_id","web_id","user_unique_id","ssid"].indexOf(o)>-1?t.envInfo.user[o]=String(r):["user_is_auth","user_is_login"].indexOf(o)>-1&&(t.envInfo.user[o]=Boolean(r)):t.envInfo.header.hasOwnProperty(o)?t.envInfo.header[o]=r:t.envInfo.header.headers.hasOwnProperty(o)?t.envInfo.header.headers[o]=r:t.envInfo.header.headers.custom[o]=r},this.get=function(){var e={user:{},header:{headers:{custom:{}}}},n=t.envInfo,o=n.user,a=Object.keys(o),s=Array.isArray(a),l=0;for(a=s?a:a[Symbol.iterator]();;){var c;if(s){if(l>=a.length)break;c=a[l++]}else{if((l=a.next()).done)break;c=l.value}var u=c;o[u]!==i&&(e.user[u]=o[u])}var d=n.header,p=Object.keys(d),f=Array.isArray(p),h=0;for(p=f?p:p[Symbol.iterator]();;){var g;if(f){if(h>=p.length)break;g=p[h++]}else{if((h=p.next()).done)break;g=h.value}var v=g;d[v]!==i&&"headers"!==v&&(e.header[v]=d[v])}var m=n.header.headers,y=Object.keys(m),b=Array.isArray(y),x=0;for(y=b?y:y[Symbol.iterator]();;){var w;if(b){if(x>=y.length)break;w=y[x++]}else{if((x=y.next()).done)break;w=x.value}var _=w;"custom"!==_&&m[_]!==i&&(e.header.headers[_]=m[_])}var k=n.header.headers.custom,E=Object.keys(k);if(E.length){var C=E,S=Array.isArray(C),P=0;for(C=S?C:C[Symbol.iterator]();;){var j;if(S){if(P>=C.length)break;j=C[P++]}else{if((P=C.next()).done)break;j=P.value}var T=j;e.header.headers.custom[T]=k[T]}}return{user:e.user,header:r({},e.header,{headers:e.header.headers})}},this.envInfo={user:{user_unique_id:i,user_type:i,user_id:i,user_is_auth:i,user_is_login:i,device_id:i,web_id:i,ip_addr_id:i,ssid:i},header:{app_id:i,app_name:i,app_install_id:i,app_package:i,app_channel:i,app_version:i,os_name:i,os_version:i,device_model:i,ab_client:i,ab_version:i,traffic_type:i,utm_source:i,utm_medium:i,utm_campaign:i,client_ip:i,device_brand:i,os_api:i,access:i,language:i,region:i,app_language:i,app_region:i,creative_id:i,ad_id:i,campaign_id:i,log_type:i,rnd:i,platform:i,sdk_version:i,province:i,city:i,timezone:i,tz_offset:i,tz_name:i,sim_region:i,carrier:i,resolution:i,browser:i,browser_version:i,referrer:i,referrer_host:i,headers:{utm_term:i,utm_content:i,custom:{}}}}},s=function(e){var t=document.createElement("a");return t.href=e,t},l=screen.width||0,c=screen.height||0,u=l+" x "+c,d=navigator.appVersion,p=navigator.userAgent,f=navigator.language,h=document.referrer,g=s(h).hostname,v=function(e){var t=s(e).search;t=t.slice(1);var n={};return t.split("&").forEach((function(e){var t=e.split("="),o=t[0],r=t[1];n[o]=decodeURIComponent(void 0===r?"":r)})),n}(location.href),m="",y="",b="",x=""+parseFloat(d),w=void 0,_=void 0;-1!==(w=p.indexOf("Opera"))&&(b="Opera",x=p.substring(w+6),-1!==(w=p.indexOf("Version"))&&(x=p.substring(w+8))),-1!==(w=p.indexOf("Edge"))?(b="Microsoft Edge",x=p.substring(w+5)):-1!==(w=p.indexOf("MSIE"))?(b="Microsoft Internet Explorer",x=p.substring(w+5)):-1!==(w=p.indexOf("Chrome"))?(b="Chrome",x=p.substring(w+7)):-1!==(w=p.indexOf("Safari"))?(b="Safari",x=p.substring(w+7),-1!==(w=p.indexOf("Version"))&&(x=p.substring(w+8))):-1!==(w=p.indexOf("Firefox"))&&(b="Firefox",x=p.substring(w+8)),-1!==(_=x.indexOf(";"))&&(x=x.substring(0,_)),-1!==(_=x.indexOf(" "))&&(x=x.substring(0,_)),-1!==(_=x.indexOf(")"))&&(x=x.substring(0,_));for(var k,E,C=/Mobile|htc|mini|Android|iP(ad|od|hone)/.test(d)?"wap":"web",S=[{s:"Windows 10",r:/(Windows 10.0|Windows NT 10.0)/},{s:"Windows 8.1",r:/(Windows 8.1|Windows NT 6.3)/},{s:"Windows 8",r:/(Windows 8|Windows NT 6.2)/},{s:"Windows 7",r:/(Windows 7|Windows NT 6.1)/},{s:"Android",r:/Android/},{s:"Sun OS",r:/SunOS/},{s:"Linux",r:/(Linux|X11)/},{s:"iOS",r:/(iPhone|iPad|iPod)/},{s:"Mac OS X",r:/Mac OS X/},{s:"Mac OS",r:/(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/}],P=0;P<S.length;P++){var j=S[P];if(j.r.test(p)){m=j.s;break}}function T(e,t){var n=e.exec(t);return n&&n[1]?n[1]:""}switch(/Windows/.test(m)&&(y=T(/Windows (.*)/,m),m="windows"),m){case"Mac OS X":y=T(/Mac OS X (10[\.\_\d]+)/,p),m="mac";break;case"Android":(E=T(/Android ([\.\_\d]+)/,k=p))||(E=T(/Android\/([\.\_\d]+)/,k)),y=E,m="android";break;case"iOS":y=(y=/OS (\d+)_(\d+)_?(\d+)?/.exec(d))?y[1]+"."+y[2]+"."+(0|y[3]):"",m="ios"}var M={screen_size:u,browser:b,browser_version:x,platform:C,os_name:m,os_version:y,userAgent:p,screen_width:l,screen_height:c,device_model:m,language:f,referrer:h,referrer_host:g,utm_source:v.utm_source,utm_medium:v.utm_medium,utm_campaign:v.utm_campaign,utm_term:v.utm_term,utm_content:v.utm_content},O={get:function(e){var t=localStorage.getItem(e),n=t;try{t&&"string"==typeof t&&(n=JSON.parse(t))}catch(e){}return n},set:function(e,t){try{var n="string"==typeof t?t:JSON.stringify(t);localStorage.setItem(e,n)}catch(e){}}},L="__tea_cache_",D=4001,z=4e3,R=4002,A=4003,I=500,B=5001,q="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(e){return void 0===e?"undefined":o(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":o(e)};function F(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var N=function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";F(this,e),this.init=function(e){t.isLog=e},this.info=function(e){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];var i;t.isLog&&(i=console).log.apply(i,[t.prefix+e].concat(o))},this.warn=function(e){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];var i;t.isLog&&(i=console).warn.apply(i,[t.prefix+e].concat(o))},this.error=function(e){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];var i;t.isLog&&(i=console).error.apply(i,[t.prefix+e].concat(o))},this.dir=function(){var e;t.isLog&&(e=console).dir.apply(e,arguments)},this.table=function(e){t.isLog&&console.table(e)},this.logJSON=function(e){"object"===(void 0===e?"undefined":q(e))&&t.isLog&&t.info("",JSON.stringify(e,null,2))},this.deprecated=function(e){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];t.warn.apply(t,["[DEPRECATED]"+e].concat(o))},this.throw=function(e){throw t.error(t.prefix),new Error(e)};var o=n?"["+n+"]":"";this.prefix="[tea-sdk]"+o},U=new N,H=function(e,t,n,o){var r=new XMLHttpRequest;r.open("POST",e,!0),r.setRequestHeader("Content-Type","application/json; charset=utf-8"),r.onload=function(){try{var e=JSON.parse(r.responseText);n&&n(e)}catch(e){o&&o()}},r.onerror=function(){o&&o()},r.send(JSON.stringify(t))};var W=(new Date).getTimezoneOffset(),V=parseInt(-W/60,10),K=60*W,J=void 0;try{J="3.2.7"}catch(k){J="2.x"}var X=new(function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":o(t))&&"function"!=typeof t?e:t}(this,e.call(this));return n.initClientEnv=function(){n.set("os_name",M.os_name),n.set("os_version",M.os_version),n.set("device_model",M.device_model),n.set("platform",M.platform),n.set("sdk_version",J),n.set("browser",M.browser),n.set("browser_version",M.browser_version),n.set("language",M.language),n.set("timezone",V),n.set("tz_offset",K),n.set("resolution",M.screen_width+"x"+M.screen_height),n.set("screen_width",M.screen_width),n.set("screen_height",M.screen_height),n.set("referrer",M.referrer),n.set("referrer_host",M.referrer_host),n.set("utm_source",M.utm_source),n.set("utm_medium",M.utm_medium),n.set("utm_campaign",M.utm_campaign),n.set("utm_term",M.utm_term),n.set("utm_content",M.utm_content)},n.initClientEnv(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":o(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(a));var Q=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return e.prototype.isString=function(e){return"String"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isNumber=function(e){return"Number"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isBoolean=function(e){return"Boolean"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isFunction=function(e){return"Function"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isNull=function(e){return"Null"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isUndefined=function(e){return"Undefined"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isObj=function(e){return"Object"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isArray=function(e){return"Array"===Object.prototype.toString.call(e).slice(8,-1)},e.prototype.isFalse=function(e){return""===e||null==e||"null"===e||"undefined"===e||0===e||!1===e||NaN===e},e.prototype.isTrue=function(e){return!this.isFalse(e)},e.prototype.isLowIE=function(){return window.XDomainRequest},e}());var $=function(e){return function(e,t,n){if("string"==typeof e&&"number"==typeof t&&"number"==typeof n){var o,r=[];n=n<=25?n:n%25;var i=String.fromCharCode(n+97);o=e.split(i);for(var a=0;a<o.length;a++){var s=parseInt(o[a],n);s=1*s^t;var l=String.fromCharCode(s);r.push(l)}return r.join("")}}(e,64,25)};function Y(e){return e?(e^16*Math.random()>>e/4).toString(10):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,Y)}var G=function(){return Y().replace(/-/g,"").slice(0,19)},Z=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};var ee={cn:"1fz22z22z1nz21z4mz4bz4bz1kz1az21z4az21z1lz21z21z1bz1iz4az1az1mz1k",sg:"1fz22z22z1nz21z4mz4bz4bz21z1ez18z1jz1gz49z1kz1az21z4az19z27z22z1cz1mz24z1cz20z21z1cz18z4az1az1mz1k",va:"1fz22z22z1nz21z4mz4bz4bz1kz18z1jz1gz24z18z49z1kz1az21z4az19z27z22z1cz1mz24z1cz20z21z1cz18z4az1az1mz1k"},te=function(e){try{var t=document.cookie.match(new RegExp("(?:^|;)\\s*"+e+"=([^;]+)"));return decodeURIComponent(t?t[1]:"")}catch(e){return""}},ne=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":o(t))&&"function"!=typeof t?e:t}(this,e.call(this));return n.init=function(e){var t=e.app_id,o=e.channel,r=e.log,i=e.channel_domain,a=e.name;if("number"!=typeof t)throw new Error("app_id 必须是一个数字，注意检查是否是以`string`的方式传入的？");n.logger=new N(a),n.logger.init(r),n.initConfigs(e),n.initUrls(o,i),n.setEnv("app_id",t)},n.initConfigs=function(e){var t=e.app_id,o=e.disable_ssid,r=e.disable_webid,i=e.disable_sdk_monitor;n.app_id=t,n.evtDataCacheKey=L+"events_"+t,o&&(n.logger.info("ssid已禁用，设置user_unique_id不会请求ssid接口。"),n.isSsidDisabled=!0),r&&(n.logger.info("webid服务已禁用，ssid同时被禁用。将本地生成webid。"),n.isWebidDisabled=!0,n.isSsidDisabled=!0),i&&(n.logger.info("SDK监控已禁用。"),n.isSdkMonitorDisabled=!0)},n.initUrls=function(e,t){if("internal"===e&&(n.logger.warn("channel 的值 internal 已被废弃，已自动改为 cn。"),e="cn"),!t&&!ee[e])throw new Error("channel 变量只能是 `cn`, `sg`,`va`");var o=t||$(ee[e]);o=o.replace(/\/+$/,""),n.reportUrl=o+"/v1/list",n.userTokensPrefix=""+o},n.setEnv=function(e,t){if("app_id"===e&&n.checkUserToken(t),"user_unique_id"===e){if(n.blackUuid.some((function(e){return e===String(t)})))return void n.logger.warn('设置了无效的值 {user_unique_id："%s"}。该操作已忽略。',t);n.verifyTokens(t)}if("web_id"===e){if(!t)return;(!n.envInfo.user.user_unique_id||n.envInfo.user.user_unique_id&&n.envInfo.user.user_unique_id===n.envInfo.user.web_id)&&n.set("user_unique_id",t)}n.set(e,t)},n.transferFromCookie=function(){var e=n.tokensCacheKey,t=te("tt_webid"),o=te("__tea_sdk__ssid"),r=te("__tea_sdk__user_unique_id");if(Q.isLowIE()){if(t){var i={web_id:t,ssid:t,user_unique_id:t};O.set(e,JSON.stringify(i))}return!1}if(t&&o&&r){var a={web_id:t,ssid:o,user_unique_id:r};O.set(e,JSON.stringify(a))}},n.purifyBlackUuid=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(n.blackUuid.some((function(t){return t===e.user_unique_id}))){var t={};return n.setUserTokens(t),n.logger.warn('检测到无效的用户标识，已重置用户状态。{user_unique_id: "%s"}',e.user_unique_id),t}return e},n.getUserTokens=function(){return O.get(n.tokensCacheKey)||{}},n.setUserTokens=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return O.set(n.tokensCacheKey,e)},n.checkUserToken=function(e){var t=L+"tokens_"+e;n.tokensCacheKey=t,n.transferFromCookie();var o=n.purifyBlackUuid(n.getUserTokens());o.user_unique_id&&o.web_id?(n.envInfo.user.user_unique_id=o.user_unique_id,n.envInfo.user.web_id=o.web_id,n.envInfo.user.ssid=o.ssid||"",n.logger.info("初始化已经检测到了 webid user_unique_id，一般情况下不需要再次验证 id 了"),n.unlock()):n.requestWebId(e)},n.saveTokenToStorage=function(e){var t=e.web_id,o=e.ssid,r=e.user_unique_id;n.setUserTokens({web_id:t,ssid:o,user_unique_id:r})},n.requestWebId=function(){n.isRequestWebId=!0;var e=function(e){var t=n.envInfo.user.web_id||e.web_id,o=e.ssid;n.isRequestWebId=!1,n.envInfo.user.ssid=o,n.envInfo.user.web_id=t,n.envInfo.user.user_unique_id=t,n.saveTokenToStorage({web_id:t,ssid:o,user_unique_id:t}),n.waitForVerifyTokens?(n.lock(),n.verifyTokens(n.realUuid)):(n.unlock(),n.callback&&n.callback())};n.isWebidDisabled?e({web_id:G(),ssid:""}):function(){var t=n.userTokensPrefix+"/v1/user/webid";H(t,{app_id:n.app_id,url:location.href,user_agent:M.userAgent,referer:M.referrer,user_unique_id:""},(function(t){0!==t.e?n.logger.error("请求 webid 失败。请联系管理员。"):e(t)}),(function(){n.isRequestWebId=!1,n.logger.error("获取 webid 失败，数据将不会被上报")}))}()},n.verifyTokens=function(e){var t=n.tokensCacheKey;if(n.waitForVerifyTokens=!1,n.realUuid=""+e,n.isRequestWebId)return n.waitForVerifyTokens=!0,n.logger.info("正在请求 webid，requestSsid 将会在前者请求完毕之后被调用"),!1;var o=n.getUserTokens();if(o.user_unique_id===n.realUuid&&o.ssid&&o.web_id)n.logger.info("传入的 user_id/user_unique_id 与 缓存中的完全一致，无需再次请求"),n.unlock();else{n.lock(),n.envInfo.user.user_unique_id=n.realUuid;var r=Z({},n.getUserTokens(),{user_unique_id:n.realUuid});if(O.set(t,JSON.stringify(r)),Q.isLowIE())return n.unlock(),!1;n.isSsidDisabled?(n.unlock(),n.callback&&n.callback()):n.requestSsid()}},n.requestSsid=function(){var e=n.getUserTokens(),t=n.userTokensPrefix+"/v1/user/ssid";H(t,{app_id:n.app_id,web_id:e.web_id,user_unique_id:""+e.user_unique_id},(function(t){if(n.unlock(),0!==t.e)n.logger.error("请求 ssid 失败~");else{n.envInfo.user.ssid=t.ssid;var o=Z({},e,{ssid:t.ssid});n.setUserTokens(o),n.logger.info("根据 user_unique_id 更新 ssid 成功！注意：在这之前不应该有数据被发出去"),n.callback&&n.callback()}}),(function(){n.unlock(),n.logger.error("根据 user_unique_id 获取新 ssid 失败")}))},n.setEvtParams=function(e){var t=Z({},e);Object.keys(t).forEach((function(e){n.evtParams[e]=t[e]}))},n.mergeEnvToEvents=function(e){var t=n.mergeEnv(),o=[],r=0,i=void 0;return e.forEach((function(e){var t=!!e.params.__disable_storage__;void 0===i?i=t:(t!==i||o[r].length>=5)&&(r+=1,i=!i),o[r]=o[r]||[],o[r].push(e)})),o.map((function(e){return{events:e.map((function(e){var t=Z({},n.evtParams,e.params);return delete t.__disable_storage__,Z({},e,{params:JSON.stringify(t)})})),user:t.user,header:t.header,verbose:n.debugMode?1:void 0,__disable_storage__:e[0].params.__disable_storage__}}))},n.mergeEnv=function(){var e=n.get(),t=X.get(),o=Z({},e.user),r=Z({},t.header.headers.custom,e.header.headers.custom),i=Z({},t.header.headers,e.header.headers,{custom:r}),a=Z({},t.header,e.header);return{user:o,header:Z({},a,{headers:JSON.stringify(i)})}},n.evtParams={},n.reportUrl="",n.userTokensPrefix="",n.isSsidDisabled=!1,n.isWebidDisabled=!1,n.isSdkMonitorDisabled=!1,n.debugMode=!1,n.blackUuid=["null","undefined","0","","None"],n.logger=function(){},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":o(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.lock=function(){this.isUserTokensReady=!1},t.prototype.unlock=function(){this.isUserTokensReady=!0},t.prototype.enableDebugMode=function(e){this.debugMode=e},t}(a);var oe=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.set=function(e,n){t.cache[e]=n},this.get=function(e){return t.cache[e]},this.clean=function(e){t.cache[e]=void 0},this.cache={}},re=new oe;var ie=function(){function e(t){var n=t.disable_storage,o=void 0!==n&&n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._isPersistent=!o,this._storage=this._isPersistent?O:new oe,this._storageKey="",this._data=void 0}return e.prototype.setStorageKey=function(e){this._storageKey=e},e.prototype.getAllEvents=function(){var e=this.getData();Object.keys(e).reduce((function(t,n){return t.concat(e[n]||[])}),[])},e.prototype.getData=function(){return this._checkIsDataInit(),this._data},e.prototype.add=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];this._checkIsDataInit(),0!==t.length&&(this._data[e]=t,this._save())},e.prototype.delete=function(e){this._checkIsDataInit(),this._data[e]&&(delete this._data[e],this._save())},e.prototype._checkIsDataInit=function(){if(void 0===this._data)try{var e,t=this._getDataFromStorage();if(Q.isArray(t))this._data=((e={})[G()]=t,e),this._save();else this._data=t}catch(e){this._data={}}},e.prototype._checkStorageKey=function(){if(!this._storageKey)throw new Error("must call setStorageKey('xxx') first")},e.prototype._getDataFromStorage=function(){return this._checkStorageKey(),this._storage.get(this._storageKey)||{}},e.prototype._save=function(){this._checkStorageKey(),this._storage.set(this._storageKey,this._data)},e}(),ae=function(e,t){try{var n=e.split("v1")[0];t.forEach((function(e){var t=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t+="&"+n+"="+encodeURIComponent(JSON.stringify(e[n])));return t="&"===t[0]?t.slice(1):t}(e),o=new Image(1,1);o.onload=function(){o=null},o.onerror=function(){o=null},o.src=n+"/v1/gif?"+t}))}catch(e){}},se=function(e,t){if(window.XDomainRequest)return ae(e,t);var n=new XMLHttpRequest;n.open("POST",e+"?rdn="+Math.random(),!0),n.onload=function(){},n.onerror=function(){n.abort()},n.send(JSON.stringify(t))},le=function e(t,n,o,r){try{var i=t.split("v1")[0];if(!i)return void r(t,n,D);n.forEach((function(e){var a=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t+="&"+n+"="+encodeURIComponent(JSON.stringify(e[n])));return t="&"===t[0]?t.slice(1):t}(e),s=new Image(1,1);s.onload=function(){s=null,o()},s.onerror=function(){s=null,r(t,n,z)},s.src=i+"/v1/gif?"+a}))}catch(e){r(t,n,R,e.message)}};var ce=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.send=function(e){var t=e.url,o=e.data,r=e.success,i=e.fail,a=e.eventError;if(function(e){var t=e.url,n=e.data,o=e.success,r=e.fail,i=e.notSure,a=e.isUnload,s=n;if(window.XDomainRequest)le(t,s,o,r);else{if(a)return window.navigator&&window.navigator.sendBeacon?(i(),void(window.navigator.sendBeacon(t,JSON.stringify(s))?o():r(t,n,A))):void le(t,s,o,r);var l=new XMLHttpRequest;l.open("POST",t+"?rdn="+Math.random(),!0),l.onload=function(){o(t,s,l.responseText)},l.onerror=function(){l.abort(),r(t,s,I)},l.send(JSON.stringify(s))}}({url:t,data:o,success:function(e,t,o){r();try{var i=JSON.parse(o).e;if(0!==i){var s="未知错误";-2===i&&(s="事件格式错误！请检查字段类型是否正确。"),n.logger.error("数据上报失败！","错误码："+i+"。错误信息："+s),a(t,i),de(e,t,i)}}catch(n){de(e,t,B)}},fail:function(e,t,o){n.logger.error("数据上报失败！","错误码："+o),i(t,o),de(e,t,o)},notSure:e.notSure,isUnload:e.isUnload}),!n.isSdkMonitorDisabled&&!n.isSdkOnLoadEventReady){n.isSdkOnLoadEventReady=!0;try{var s=o[0].header,l=o[0].user;ue(t,{app_id:s.app_id,app_name:s.app_name,sdk_version:s.sdk_version,web_id:l.web_id})}catch(e){}}},this.logger=t.logger||U,this.isSdkOnLoadEventReady=!1,this.isSdkMonitorDisabled=!1},ue=function(e,t){try{var n={events:[{event:"onload",params:JSON.stringify({app_id:t.app_id,app_name:t.app_name||"",sdk_version:t.sdk_version}),local_time_ms:Date.now()}],user:{user_unique_id:t.web_id},header:{app_id:1338}};setTimeout((function(){se(e,[n])}),16)}catch(e){}},de=function(e,t,n){try{var o=t[0].user,r=t[0].header,i=[];t.forEach((function(e){e.events.forEach((function(e){i.push(e)}))}));var a={events:i.map((function(e){return{event:"on_error",params:JSON.stringify({error_code:n,app_id:r.app_id,app_name:r.app_name||"",error_event:e.event,local_time_ms:e.local_time_ms,tea_event_index:Date.now(),params:e.params,header:JSON.stringify(r),user:JSON.stringify(o)}),local_time_ms:Date.now()}})),user:{user_unique_id:o.user_unique_id},header:{app_id:1338}};setTimeout((function(){se(e,[a])}),16)}catch(e){}};var pe=function(e){function t(n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":o(t))&&"function"!=typeof t?e:t}(this,e.call(this));r.addListener=function(){window.addEventListener("unload",(function(){r.report(!0)}),!1),window.addEventListener("beforeunload",(function(){r.report(!0)}),!1),document.addEventListener("visibilitychange",(function(){"hidden"===document.visibilityState&&r.report(!0)}),!1)},r.setReady=function(e){r.isReady=e,r.eventSender.isSdkMonitorDisabled=r.isSdkMonitorDisabled,r.checkAndSendCachedStorageEvents(),r.report()},r.eventReportTimer=null,r.event=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=re.get(r.evtDataCacheKey)||[],o=t?[].concat(e,n):[].concat(n,e);re.set(r.evtDataCacheKey,o),o.length>=5?r.report():(r.eventReportTimer&&clearTimeout(r.eventReportTimer),r.eventReportTimer=setTimeout((function(){r.report(),r.eventReportTimer=null}),r.waitForBatchTime))},r.report=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!r.isUserTokensReady)return!1;if(!r.isReady)return!1;var t=re.get(r.evtDataCacheKey)||[];re.clean(r.evtDataCacheKey);var n=r.mergeEnvToEvents(t);r.sendData(n,e)},r.sendData=function(e,t){var n=[],o=0,i=void 0;e.forEach((function(e){var t=!!e.__disable_storage__;void 0===i?i=t:(t!==i||n[o].length>=5)&&(o+=1,i=!i),n[o]=n[o]||[],n[o].push(e)})),n.forEach((function(e){var n=G();e[0].__disable_storage__||r.eventStorage.add(n,e),r._sendData(n,e,t)}))},r.checkAndSendCachedStorageEvents=function(){var e=r.eventStorage.getData(),t=Object.keys(e);t.length>0&&t.forEach((function(t){r._sendData(t,e[t])}))},r._sendData=function(e,t,n){r.isReporting=!0;var o=function(){r.isReporting=!1};r.eventSender.send({url:r.reportUrl,data:t,success:function(){o(),r.sendDataSuccess(e)},fail:function(e,t){o(),r.reportErrorCallback(e,t),setTimeout((function(){r.report()}),3e3)},eventError:function(e,t){r.reportErrorCallback(e,t)},notSure:o,isUnload:n})},r.sendDataSuccess=function(e){r.eventStorage.delete(e),r.report()};var i=n.log,a=n.disable_storage,s=n.max_batch_num,l=void 0===s?5:s,c=n.batch_time,u=void 0===c?30:c;return r.init(n),r.maxBatchNum=l,r.waitForBatchTime=u,r.isReady=!1,r.addListener(),r.enableDebugMode(!!i),r.eventStorage=new ie({disable_storage:a}),r.eventStorage.setStorageKey(r.evtDataCacheKey),r.eventSender=new ce({logger:r.logger}),r.reportErrorCallback=function(){},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":o(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(ne),fe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};var he=function(){var e=+Date.now()+Number((""+Math.random()).slice(2,8));return function(){return e+=1}}(),ge=function(e,t){var n=e;/^event\./.test(e)&&(n=e.slice(6));var o=t;return Q.isObj(o)||(o={}),o.event_index=he(),{event:n,params:o,local_time_ms:+new Date}},ve=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.init=function(e){if(!Q.isObj(e))throw new Error("init 的参数必须是Object类型");n.logger.init(e.log),n.channel=new pe(fe({},e,{name:n.name})),n.channel.callback=function(){n.callbackSend&&n.start()}},this.config=function(e){Q.isObj(e)||n.logger.throw("config 参数必须是 {} 的格式"),e.log&&(n.logger.init(!0),n.channel.enableDebugMode(!0),e.log=null);var t=Object.keys(e);if(!t.length)return!1;var o=t,r=Array.isArray(o),i=0;for(o=r?o:o[Symbol.iterator]();;){var a;if(r){if(i>=o.length)break;a=o[i++]}else{if((i=o.next()).done)break;a=i.value}var s=a,l=e[s];switch(s){case"evtParams":n.channel.setEvtParams(l);break;case"disable_ssid":n.logger.deprecated("(disable_ssid)请通过init函数来设置。"),l&&(n.logger.info("ssid已禁用，设置user_unique_id不会请求ssid接口。"),n.channel.isSsidDisabled=l);break;case"disable_auto_pv":l&&(n.logger.info("已禁止默认上报predefine_pageview事件，需手动上报。"),n._autoSendPV=!1);break;case"_staging_flag":""+l=="1"&&n.logger.info("根据_staging_flag设置，数据将会上报到stag 表。"),n.channel.setEvtParams({_staging_flag:Number(l)});break;case"reportErrorCallback":"function"==typeof l&&(n.channel.reportErrorCallback=l);break;default:n.channel.setEnv(s,l)}}},this.send=function(){n.start()},this.start=function(){if(n.channel.isUserTokensReady){if(n._isSendFuncCalled)return;n._isSendFuncCalled=!0,n.logger.info("看到本提示，意味着用户信息已完全就绪，上报通道打开。用户标识如下："),n.logger.logJSON(n.channel.get().user),n._autoSendPV&&n.predefinePageView(),n.channel.setReady(!0)}else n.callbackSend=!0},this.predefinePageView=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={title:document.title||location.pathname,url:location.href,url_path:location.pathname},o=fe({},t,e);n.event("predefine_pageview",o,!0)},this.event=function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];var r=Q.isBoolean(t[t.length-1]),i=!!r&&t[t.length-1],a=r?t.slice(0,t.length-1):t,s=a[0],l=[];Q.isArray(s)?l=a:l[0]=a,l=l.map((function(e){return ge.apply(void 0,e)})),n.channel.event(l,i)},this._isSendFuncCalled=!1,this._autoSendPV=!0,this.name=t,this.logger=new N(t)};ve.exportMethods=["init","config","send","start","predefinePageView"];t.default=function e(t){var n=this;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._exportCollect=function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];n._isQueueProcessed?n._executeCmd.apply(n,t):(n.cmdQueue.push(t),n._processCmdQueue())},this._processCmdQueue=function(){if(0!==n.cmdQueue.length){var e=function(e,t,n){var o=-1;return e.forEach((function(e,r){(void 0!==n?e[n]:e)===t&&(o=r)})),o}(n.cmdQueue,"init","0");-1!==e&&(n._isQueueProcessed=!0,n._executeCmd.apply(n,n.cmdQueue[e]),n.cmdQueue.forEach((function(t,o){o!==e&&n._executeCmd.apply(n,t)})),n.cmdQueue=[])}},this._executeCmd=function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];var r,i,a=t[0];ve.exportMethods.indexOf(a)>-1?(r=n.colloctor)[a].apply(r,t.slice(1)):(i=n.colloctor).event.apply(i,t)},this.name=t||"Collector"+ +new Date,this.cmdQueue=[],this.colloctor=new ve(this.name),this._isQueueProcessed=!1,this._processCmdQueue(),this._exportCollect.init=this._exportCollect.bind(this,"init"),this._exportCollect.config=this._exportCollect.bind(this,"config"),this._exportCollect.send=this._exportCollect.bind(this,"send"),this._exportCollect.start=this._exportCollect.bind(this,"start"),this._exportCollect.predefinePageView=this._exportCollect.bind(this,"predefinePageView"),this._exportCollect},e.exports=t.default},"./src/control/cssFullscreen.js":
/*!**************************************!*\
  !*** ./src/control/cssFullscreen.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("cssFullscreen",(function(){var e=i.default.util;if(this.config.cssFullscreen){var t="M834.56 81.92H189.44c-59.392 0-107.52 48.128-107.52 107.52v645.12c0 59.392 48.128 107.52 107.52 107.52h645.12c59.392 0 107.52-48.128 107.52-107.52V189.44c0-59.392-48.128-107.52-107.52-107.52zM458.24 727.04c0 14.848-12.288 26.624-26.624 26.624S404.48 741.888 404.48 727.04v-69.632L289.28 773.12c-10.752 10.24-27.648 10.24-37.888 0-10.24-10.752-10.24-27.648 0-37.888L366.592 619.52H296.96c-14.848 0-26.624-12.288-26.624-26.624s12.288-26.624 26.624-26.624h134.144c14.848 0 26.624 12.288 26.624 26.624V727.04z m0-295.936c0 14.848-12.288 26.624-26.624 26.624H296.96c-14.848 0-26.624-12.288-26.624-26.624S282.112 404.48 296.96 404.48h69.632L251.392 289.28c-10.24-10.752-10.24-27.648 0-37.888 5.12-5.12 12.288-7.68 18.944-7.68 6.656 0 13.824 2.56 18.944 7.68L404.48 366.592V296.96c0-14.848 12.288-26.624 26.624-26.624s26.624 12.288 26.624 26.624v134.144zM773.12 773.12c-10.752 10.24-27.648 10.24-37.888 0L619.52 657.408V727.04c0 14.848-12.288 26.624-26.624 26.624s-26.624-11.776-26.624-26.624v-134.144c0-14.848 12.288-26.624 26.624-26.624H727.04c14.848 0 26.624 12.288 26.624 26.624s-12.288 26.624-26.624 26.624h-69.632l115.2 115.2c10.752 10.752 10.752 27.648 0.512 38.4z m0-483.84L657.408 404.48H727.04c14.848 0 26.624 12.288 26.624 26.624 0 14.848-12.288 26.624-26.624 26.624h-134.144c-14.848 0-26.624-12.288-26.624-26.624V296.96c0-14.848 12.288-26.624 26.624-26.624s26.624 12.288 26.624 26.624v69.632L734.72 250.88c5.12-5.12 12.288-7.68 18.944-7.68s13.824 2.56 18.944 7.68c10.752 10.752 10.752 27.648 0.512 38.4z",n="M843.617212 67.898413 175.411567 67.898413c-61.502749 0-111.367437 49.856501-111.367437 111.367437l0 668.205645c0 61.510936 49.864688 111.367437 111.367437 111.367437L843.617212 958.838931c61.510936 0 111.367437-49.856501 111.367437-111.367437L954.984648 179.26585C954.984648 117.754914 905.12917 67.898413 843.617212 67.898413zM398.146441 736.104057c15.380292 0 27.842115 12.461823 27.842115 27.842115 0 15.379269-12.461823 27.841092-27.842115 27.841092L259.725858 791.787264c-7.785314 0-14.781658-3.217275-19.838837-8.365528-5.383614-4.577249-8.791224-11.228739-8.791224-19.475564L231.095797 624.736621c0-15.371082 12.471033-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115l-0.61603 71.426773 133.036969-133.037992 39.378869 39.378869L324.962651 736.113267 398.146441 736.104057zM419.199942 463.611943 286.162974 330.565764l0.61603 71.435982c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.371082 0-27.842115-12.461823-27.842115-27.842115L231.094774 262.791172c0-8.256034 3.40761-14.908548 8.791224-19.476587 5.057179-5.148253 12.053524-8.374738 19.838837-8.374738l138.420583 0.00921c15.380292 0 27.842115 12.461823 27.842115 27.842115s-12.461823 27.842115-27.842115 27.842115l-73.175603-0.00921 133.607974 133.607974L419.199942 463.611943zM787.932981 763.946172c0 8.247848-3.40761 14.899338-8.791224 19.475564-5.057179 5.148253-12.053524 8.365528-19.839861 8.365528L620.881314 791.787264c-15.379269 0-27.841092-12.461823-27.841092-27.841092 0-15.380292 12.461823-27.842115 27.841092-27.842115l73.185836 0.00921L560.449967 602.50427l39.378869-39.378869L732.875015 696.163393l-0.62524-71.426773c0-15.371082 12.462846-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115L787.934005 763.946172zM787.932981 402.000724c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.379269 0-27.842115-12.461823-27.842115-27.842115l0.62524-71.435982L599.828836 463.611943l-39.378869-39.378869 133.617184-133.607974-73.185836 0.00921c-15.379269 0-27.841092-12.461823-27.841092-27.842115s12.461823-27.842115 27.841092-27.842115l138.421606-0.00921c7.785314 0 14.781658 3.226484 19.839861 8.374738 5.383614 4.568039 8.791224 11.219529 8.791224 19.476587L787.934005 402.000724z",o=e.createDom("xg-cssfullscreen",'<xg-icon class="xgplayer-icon"><svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n            <path transform="scale(0.03 0.03)" d="'+n+'"></path>\n        </svg></xg-icon>',{},"xgplayer-cssfullscreen"),r=this.config.lang&&"zh-cn"===this.config.lang?"样式全屏":"Full screen",a=this.config.lang&&"zh-cn"===this.config.lang?"退出全屏":"Exit full screen",s=this.controls,l=this.root,c=e.createDom("xg-tips",r,{},"xgplayer-tips"),u=o.querySelector("path");o.appendChild(c);s.appendChild(o),["click","touchend"].forEach((function(i){o.addEventListener(i,(function(o){var i;o.preventDefault(),o.stopPropagation(),e.hasClass(l,"xgplayer-cssfullscreen-active")||e.hasClass(l,"xgplayer-is-fullscreen")?(i=l,u.setAttribute("d",n),c.textContent=r,e.removeClass(i,"xgplayer-cssfullscreen-active")):function(n){u.setAttribute("d",t),c.textContent=a,e.addClass(n,"xgplayer-cssfullscreen-active")}(l)}))})),o.addEventListener("mouseenter",(function(e){e.preventDefault(),e.stopPropagation(),c.style.left="50%";var t=c.getBoundingClientRect(),n=l.getBoundingClientRect();t.right>n.right&&(c.style.left=-t.right+n.right+16+"px")}))}}))},"./src/control/danmu.js":
/*!******************************!*\
  !*** ./src/control/danmu.js ***!
  \******************************/
/*! no static exports found */function(e,t,n){"use strict";var o=i(n(/*! ../player */"./src/player.js")),r=i(n(/*! danmu.js */"./node_modules/danmu.js/dist/index.js"));function i(e){return e&&e.__esModule?e:{default:e}}o.default.install("danmu",(function(){var e=this;if(e.config.danmu){var t=o.default.util.createDom("xg-bullet","",{},"xgplayer-bullet");e.root.appendChild(t),t.style.height="100%";var n=o.default.util.deepCopy({container:t,player:e.video,comments:[],area:{start:0,end:1}},e.config.danmu);e.once("complete",(function(){var i=new r.default(n);o.default.util.addClass(t,"xgplayer-has-bullet"),e.config.danmu.closeDefaultBtn||(e.bulletBtn=o.default.util.copyDom(i.bulletBtn.createSwitch(!0)),e.controls.appendChild(e.bulletBtn),["click","touchend"].forEach((function(n){e.bulletBtn.addEventListener(n,(function(n){n.preventDefault(),n.stopPropagation(),o.default.util.toggleClass(e.bulletBtn,"danmu-switch-active"),o.default.util.hasClass(e.bulletBtn,"danmu-switch-active")?(o.default.util.addClass(t,"xgplayer-has-bullet"),e.once("timeupdate",(function(){i.start()}))):(o.default.util.removeClass(t,"xgplayer-has-bullet"),i.stop())}),!1)})),e.onElementClick&&t.addEventListener("click",(function(n){e.onElementClick(n,t)}),!1),e.onElementDblclick&&t.addEventListener("dblclick",(function(n){e.onElementDblclick(n,t)}),!1),e.on("pause",(function(){o.default.util.hasClass(e.bulletBtn,"danmu-switch-active")&&i.pause()})),e.on("play",(function(){o.default.util.hasClass(e.bulletBtn,"danmu-switch-active")&&i.play()})),e.on("seeked",(function(){o.default.util.hasClass(e.bulletBtn,"danmu-switch-active")&&(i.stop(),i.start())}))),e.danmu=i}))}}))},"./src/control/definition.js":
/*!***********************************!*\
  !*** ./src/control/definition.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("definition",(function(){var e=this,t=i.default.util,n=i.default.sniffer,o=t.createDom("xg-definition","",{tabindex:3},"xgplayer-definition"),r=e.controls;"mobile"===n.device&&(e.config.definitionActive="click");var a=[];function s(){var n=["<ul>"],i=e.config.url,s=document.createElement("a");e.switchURL?["mp4","hls","__flv__","dash"].every((function(t){return!e[t]||(e[t].url&&(s.href=e[t].url),"__flv__"===t&&(e[t]._options?s.href=e[t]._options.url:s.href=e[t]._mediaDataSource.url),i=s.href,!1)})):i=e.currentSrc||e.src,e.hls&&(s.href=e.hls.url,i=s.href),a.forEach((function(t){s.href=t.url,e.dash?n.push("<li url='"+t.url+"' cname='"+t.name+"' class='"+(t.selected?"definition":"")+"'>"+t.name+"</li>"):n.push("<li url='"+t.url+"' cname='"+t.name+"' class='"+(s.href===i?"definition":"")+"'>"+t.name+"</li>")}));var l=a.filter((function(t){return s.href=t.url,e.dash?!0===t.selected:s.href===i}));n.push("</ul><p class='name'>"+(l[0]||{name:""}).name+"</p>");var c=r.querySelector(".xgplayer-definition");if(c){c.innerHTML=n.join("");var u=c.querySelector(".name");e.config.definitionActive&&"hover"!==e.config.definitionActive||u.addEventListener("mouseenter",(function(n){n.preventDefault(),n.stopPropagation(),t.addClass(e.root,"xgplayer-definition-active"),c.focus()}))}else{o.innerHTML=n.join("");var d=o.querySelector(".name");e.config.definitionActive&&"hover"!==e.config.definitionActive||d.addEventListener("mouseenter",(function(n){n.preventDefault(),n.stopPropagation(),t.addClass(e.root,"xgplayer-definition-active"),o.focus()})),r.appendChild(o)}}function l(n){(a=n)&&a instanceof Array&&a.length>1&&(t.addClass(e.root,"xgplayer-is-definition"),e.on("canplay",s))}e.on("resourceReady",l),["touchend","click"].forEach((function(r){o.addEventListener(r,(function(r){r.preventDefault(),r.stopPropagation();var i=r.target||r.srcElement,s=document.createElement("a");if(i&&"li"===i.tagName.toLocaleLowerCase()){if(e.emit("beforeDefinitionChange",s.href),Array.prototype.forEach.call(i.parentNode.childNodes,(function(e){t.removeClass(e,"definition")})),e.dash&&a.forEach((function(e){e.selected=!1,e.name===i.innerHTML&&(e.selected=!0)})),t.addClass(i,"definition"),i.parentNode.nextSibling.innerHTML=""+i.getAttribute("cname"),s.href=i.getAttribute("url"),e.switchURL){var l=document.createElement("a");["mp4","hls","__flv__","dash"].every((function(t){return!e[t]||(e[t].url&&(l.href=e[t].url),"__flv__"===t&&(e[t]._options?l.href=e[t]._options.url:l.href=e[t]._mediaDataSource.url),!1)})),l.href===s.href||e.ended||e.switchURL(s.href)}else{if(e.hls){document.createElement("a");e.hls.url}if(s.href!==e.currentSrc){var c=e.currentTime,u=e.paused;e.ended||(e.src=s.href,e.once("canplay",(function(){e.currentTime=c,u||e.play()})))}}e.emit("definitionChange",s.href),"mobile"===n.device&&t.removeClass(e.root,"xgplayer-definition-active")}else"click"!==e.config.definitionActive||!i||"p"!==i.tagName.toLocaleLowerCase()&&"em"!==i.tagName.toLocaleLowerCase()||(t.addClass(e.root,"xgplayer-definition-active"),o.focus());e.emit("focus")}),!1)})),o.addEventListener("mouseleave",(function(n){n.preventDefault(),n.stopPropagation(),t.removeClass(e.root,"xgplayer-definition-active")})),e.once("destroy",(function t(){e.off("canplay",s),e.off("resourceReady",l),e.off("destroy",t)}))}))},"./src/control/download.js":
/*!*********************************!*\
  !*** ./src/control/download.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";var o=a(n(/*! ../player */"./src/player.js")),r=n(/*! ../utils/url */"./src/utils/url.js"),i=a(n(/*! downloadjs */"./node_modules/downloadjs/download.js"));function a(e){return e&&e.__esModule?e:{default:e}}o.default.install("download",(function(){var e=this;if(this.config.download){var t=e.root,n=o.default.util,a=n.createDom("xgplayer-download",'<xg-icon class="xgplayer-download-img"></xg-icon>',{},"xgplayer-download");e.controls.appendChild(a);var s=e.config.lang&&"zh-cn"===e.config.lang?"下载":"Download",l=n.createDom("xg-tips",s,{},"xgplayer-tips");a.appendChild(l),e.download=function(){var t=(0,r.getAbsoluteURL)(e.config.url);(0,i.default)(t)},a.addEventListener("click",(function(t){t.stopPropagation(),e.download()})),a.addEventListener("mouseenter",(function(e){e.preventDefault(),e.stopPropagation(),l.style.left="50%";var n=l.getBoundingClientRect(),o=t.getBoundingClientRect();n.right>o.right&&(l.style.left=-n.right+o.right+16+"px")}))}}))},"./src/control/error.js":
/*!******************************!*\
  !*** ./src/control/error.js ***!
  \******************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("error",(function(){var e=this,t=i.default.util,n=t.createDom("xg-error",'<em class="xgplayer-error-text">请<span class="xgplayer-error-refresh">刷新</span>试试</em>',{},"xgplayer-error");e.root.appendChild(n);var o=n.querySelector(".xgplayer-error-text"),r=null;function a(){e.error?o.innerHTML=e.error:e.config.lang&&"zh-cn"===e.config.lang?o.innerHTML=e.lang.ERROR+'，请<span class="xgplayer-error-refresh">刷新</span>试试':o.innerHTML=e.lang.ERROR+'，please try to <span class="xgplayer-error-refresh">refresh</span>',t.addClass(e.root,"xgplayer-is-error"),(r=n.querySelector(".xgplayer-error-refresh"))&&["touchend","click"].forEach((function(t){r.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation();var n=t.target||t.srcElement;n&&"span"===n.tagName.toLocaleLowerCase()&&(e.controls.style.display="flex",e.reload())}))}))}e.on("error",a),e.once("destroy",(function t(){e.off("error",a),e.off("destroy",t)}))}))},"./src/control/flex.js":
/*!*****************************!*\
  !*** ./src/control/flex.js ***!
  \*****************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("__flex__",(function(){var e=i.default.util.createDom("xg-placeholder","",{},"xgplayer-placeholder");this.controls.appendChild(e)}))},"./src/control/fullscreen.js":
/*!***********************************!*\
  !*** ./src/control/fullscreen.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("fullscreen",(function(){var e=this,t=i.default.util,n="M682 342h128v84h-212v-212h84v128zM598 810v-212h212v84h-128v128h-84zM342 342v-128h84v212h-212v-84h128zM214 682v-84h212v212h-84v-128h-128z",o="M598 214h212v212h-84v-128h-128v-84zM726 726v-128h84v212h-212v-84h128zM214 426v-212h212v84h-128v128h-84zM298 598v128h128v84h-212v-212h84z",r=t.createDom("xg-fullscreen",'<xg-icon class="xgplayer-icon"><svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n            <path transform="scale(0.03 0.03)" d="'+o+'"></path>\n        </svg></xg-icon>',{},"xgplayer-fullscreen"),a=e.config.lang&&"zh-cn"===e.config.lang?"全屏":"Full screen",s=e.config.lang&&"zh-cn"===e.config.lang?"退出全屏":"Exit full screen",l=e.controls,c=e.root,u=t.createDom("xg-tips",a,{},"xgplayer-tips"),d=r.querySelector("path");r.appendChild(u);l.appendChild(r),["click","touchend"].forEach((function(o){r.addEventListener(o,(function(o){var r,i;o.preventDefault(),o.stopPropagation(),t.hasClass(c,"xgplayer-fullscreen-active")||t.hasClass(c,"xgplayer-is-fullscreen")?function(n){var o=t.findDom(e.controls,"xg-cssfullscreen"),r="M843.617212 67.898413 175.411567 67.898413c-61.502749 0-111.367437 49.856501-111.367437 111.367437l0 668.205645c0 61.510936 49.864688 111.367437 111.367437 111.367437L843.617212 958.838931c61.510936 0 111.367437-49.856501 111.367437-111.367437L954.984648 179.26585C954.984648 117.754914 905.12917 67.898413 843.617212 67.898413zM398.146441 736.104057c15.380292 0 27.842115 12.461823 27.842115 27.842115 0 15.379269-12.461823 27.841092-27.842115 27.841092L259.725858 791.787264c-7.785314 0-14.781658-3.217275-19.838837-8.365528-5.383614-4.577249-8.791224-11.228739-8.791224-19.475564L231.095797 624.736621c0-15.371082 12.471033-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115l-0.61603 71.426773 133.036969-133.037992 39.378869 39.378869L324.962651 736.113267 398.146441 736.104057zM419.199942 463.611943 286.162974 330.565764l0.61603 71.435982c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.371082 0-27.842115-12.461823-27.842115-27.842115L231.094774 262.791172c0-8.256034 3.40761-14.908548 8.791224-19.476587 5.057179-5.148253 12.053524-8.374738 19.838837-8.374738l138.420583 0.00921c15.380292 0 27.842115 12.461823 27.842115 27.842115s-12.461823 27.842115-27.842115 27.842115l-73.175603-0.00921 133.607974 133.607974L419.199942 463.611943zM787.932981 763.946172c0 8.247848-3.40761 14.899338-8.791224 19.475564-5.057179 5.148253-12.053524 8.365528-19.839861 8.365528L620.881314 791.787264c-15.379269 0-27.841092-12.461823-27.841092-27.841092 0-15.380292 12.461823-27.842115 27.841092-27.842115l73.185836 0.00921L560.449967 602.50427l39.378869-39.378869L732.875015 696.163393l-0.62524-71.426773c0-15.371082 12.462846-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115L787.934005 763.946172zM787.932981 402.000724c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.379269 0-27.842115-12.461823-27.842115-27.842115l0.62524-71.435982L599.828836 463.611943l-39.378869-39.378869 133.617184-133.607974-73.185836 0.00921c-15.379269 0-27.841092-12.461823-27.841092-27.842115s12.461823-27.842115 27.841092-27.842115l138.421606-0.00921c7.785314 0 14.781658 3.226484 19.839861 8.374738 5.383614 4.568039 8.791224 11.219529 8.791224 19.476587L787.934005 402.000724z";if(o){var i=t.findDom(o,"xg-tips"),s=o.querySelector("path");o.style.display="block",i.textContent=e.config.lang&&"zh-cn"===e.config.lang?"样式全屏":"Full screen",s.setAttribute("d",r)}t.removeClass(n,"xgplayer-cssfullscreen-active"),d.setAttribute("d",r),u.textContent=a,document.exitFullscreen?document.exitFullscreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.msExitFullscreen?document.msExitFullscreen():t.removeClass(n,"xgplayer-fullscreen-active")}(c):(r=c,(i=t.findDom(e.controls,"xg-cssfullscreen"))&&(i.style.display="none"),d.setAttribute("d",n),u.textContent=s,r.requestFullscreen?r.requestFullscreen():r.mozRequestFullScreen?r.mozRequestFullScreen():r.webkitRequestFullscreen?r.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT):e.video.webkitSupportsFullscreen?e.video.webkitEnterFullscreen():r.msRequestFullscreen?r.msRequestFullscreen():t.addClass(r,"xgplayer-fullscreen-active"))}))})),e.video.addEventListener("webkitendfullscreen",(function(){e.emit("exitFullscreen"),d.setAttribute("d",o)}));["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"].forEach((function(n){document.addEventListener(n,(function(n){if(n.preventDefault(),n.stopPropagation(),!(document.fullscreenElement||document.webkitIsFullScreen||document.mozFullScreen||document.msFullscreenElement)){var o=t.findDom(e.controls,"xg-cssfullscreen"),r={default:"M843.617212 67.898413 175.411567 67.898413c-61.502749 0-111.367437 49.856501-111.367437 111.367437l0 668.205645c0 61.510936 49.864688 111.367437 111.367437 111.367437L843.617212 958.838931c61.510936 0 111.367437-49.856501 111.367437-111.367437L954.984648 179.26585C954.984648 117.754914 905.12917 67.898413 843.617212 67.898413zM398.146441 736.104057c15.380292 0 27.842115 12.461823 27.842115 27.842115 0 15.379269-12.461823 27.841092-27.842115 27.841092L259.725858 791.787264c-7.785314 0-14.781658-3.217275-19.838837-8.365528-5.383614-4.577249-8.791224-11.228739-8.791224-19.475564L231.095797 624.736621c0-15.371082 12.471033-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115l-0.61603 71.426773 133.036969-133.037992 39.378869 39.378869L324.962651 736.113267 398.146441 736.104057zM419.199942 463.611943 286.162974 330.565764l0.61603 71.435982c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.371082 0-27.842115-12.461823-27.842115-27.842115L231.094774 262.791172c0-8.256034 3.40761-14.908548 8.791224-19.476587 5.057179-5.148253 12.053524-8.374738 19.838837-8.374738l138.420583 0.00921c15.380292 0 27.842115 12.461823 27.842115 27.842115s-12.461823 27.842115-27.842115 27.842115l-73.175603-0.00921 133.607974 133.607974L419.199942 463.611943zM787.932981 763.946172c0 8.247848-3.40761 14.899338-8.791224 19.475564-5.057179 5.148253-12.053524 8.365528-19.839861 8.365528L620.881314 791.787264c-15.379269 0-27.841092-12.461823-27.841092-27.841092 0-15.380292 12.461823-27.842115 27.841092-27.842115l73.185836 0.00921L560.449967 602.50427l39.378869-39.378869L732.875015 696.163393l-0.62524-71.426773c0-15.371082 12.462846-27.842115 27.842115-27.842115 15.380292 0 27.842115 12.471033 27.842115 27.842115L787.934005 763.946172zM787.932981 402.000724c0 15.380292-12.461823 27.842115-27.842115 27.842115-15.379269 0-27.842115-12.461823-27.842115-27.842115l0.62524-71.435982L599.828836 463.611943l-39.378869-39.378869 133.617184-133.607974-73.185836 0.00921c-15.379269 0-27.841092-12.461823-27.841092-27.842115s12.461823-27.842115 27.841092-27.842115l138.421606-0.00921c7.785314 0 14.781658 3.226484 19.839861 8.374738 5.383614 4.568039 8.791224 11.219529 8.791224 19.476587L787.934005 402.000724z"};if(o){var i=t.findDom(o,"xg-tips"),s=o.querySelector("path");o.style.display="block",i.textContent=e.config.lang&&"zh-cn"===e.config.lang?"样式全屏":"Full screen",s.setAttribute("d",r.default)}t.removeClass(c,"xgplayer-cssfullscreen-active"),d.setAttribute("d",r.default),u.textContent=a,t.removeClass(c,"xgplayer-fullscreen-active")}}))}));var p=function(r){var i=document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement;i&&i===c?(t.addClass(c,"xgplayer-is-fullscreen"),d.setAttribute("d",n),u.textContent=s,e.emit("requestFullscreen")):(t.removeClass(c,"xgplayer-is-fullscreen"),d.setAttribute("d",o),u.textContent=a,e.emit("exitFullscreen"))};r.addEventListener("mouseenter",(function(e){e.preventDefault(),e.stopPropagation(),u.style.left="50%";var t=u.getBoundingClientRect(),n=c.getBoundingClientRect();t.right>n.right&&(u.style.left=-t.right+n.right+16+"px")})),["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"].forEach((function(e){document.addEventListener(e,p)})),e.once("destroy",(function t(){["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"].forEach((function(e){document.removeEventListener(e,p)})),e.off("destroy",t)}))}))},"./src/control/i18n.js":
/*!*****************************!*\
  !*** ./src/control/i18n.js ***!
  \*****************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js");((o=r)&&o.__esModule?o:{default:o}).default.install("i18n",(function(){var e=this,t={},n=e.constructor.util;t.en={HAVE_NOTHING:"There is no information on whether audio/video is ready",HAVE_METADATA:"audio/video metadata is ready ",HAVE_CURRENT_DATA:"Data about the current play location is available, but there is not enough data to play the next frame/millisecond",HAVE_FUTURE_DATA:"Current and at least one frame of data is available",HAVE_ENOUGH_DATA:"The available data is sufficient to start playing",NETWORK_EMPTY:"Audio/video has not been initialized",NETWORK_IDLE:"Audio/video is active and has been selected for resources, but no network is used",NETWORK_LOADING:"The browser is downloading the data",NETWORK_NO_SOURCE:"No audio/video source was found",MEDIA_ERR_ABORTED:"The fetch process is aborted by the user",MEDIA_ERR_NETWORK:"An error occurred while downloading",MEDIA_ERR_DECODE:"An error occurred while decoding",MEDIA_ERR_SRC_NOT_SUPPORTED:"Audio/video is not supported",REPLAY:"Replay",ERROR:"network is offline"},t["zh-cn"]={HAVE_NOTHING:"没有关于音频/视频是否就绪的信息",HAVE_METADATA:"音频/视频的元数据已就绪",HAVE_CURRENT_DATA:"关于当前播放位置的数据是可用的，但没有足够的数据来播放下一帧/毫秒",HAVE_FUTURE_DATA:"当前及至少下一帧的数据是可用的",HAVE_ENOUGH_DATA:"可用数据足以开始播放",NETWORK_EMPTY:"音频/视频尚未初始化",NETWORK_IDLE:"音频/视频是活动的且已选取资源，但并未使用网络",NETWORK_LOADING:"浏览器正在下载数据",NETWORK_NO_SOURCE:"未找到音频/视频来源",MEDIA_ERR_ABORTED:"取回过程被用户中止",MEDIA_ERR_NETWORK:"当下载时发生错误",MEDIA_ERR_DECODE:"当解码时发生错误",MEDIA_ERR_SRC_NOT_SUPPORTED:"不支持的音频/视频格式",REPLAY:"重播",ERROR:"网络连接似乎出现了问题"},Object.defineProperty(e,"lang",{get:function(){return t[e.config.lang]||t.en},set:function(e){"Object"===n.typeOf(e)&&Object.keys(e).forEach((function(n){t[n]=e[n]}))}})}))},"./src/control/loading.js":
/*!********************************!*\
  !*** ./src/control/loading.js ***!
  \********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("loading",(function(){var e=i.default.util.createDom("xg-loading",'\n    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewbox="0 0 100 100">\n      <path d="M100,50A50,50,0,1,1,50,0"></path>\n    </svg>\n    ',{},"xgplayer-loading");this.root.appendChild(e)}))},"./src/control/localPreview.js":
/*!*************************************!*\
  !*** ./src/control/localPreview.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("localPreview",(function(){var e=this,t=i.default.util,n=t.createDom("xg-preview",'<input type="file">',{},"xgplayer-preview"),o=n.querySelector("input");e.config.preview&&e.config.preview.uploadEl&&(e.config.preview.uploadEl.appendChild(n),o.onchange=function(){e.uploadFile=o.files[0];var n=URL.createObjectURL(e.uploadFile);t.hasClass(e.root,"xgplayer-nostart")?(e.config.url=n,e.start()):(e.src=n,e.play())})}))},"./src/control/logger.js":
/*!*******************************!*\
  !*** ./src/control/logger.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o=a(n(/*! ../player */"./src/player.js")),r=a(n(/*! ../utils/sniffer */"./src/utils/sniffer.js")),i=a(n(/*! ./collect */"./src/control/collect.js"));function a(e){return e&&e.__esModule?e:{default:e}}o.default.install("logger",(function(){var e=this,t=o.default.util;if(!0!==e.config.noLog){var n=function(){e.video.played;var t=l(e.logParams.played),n=(new Date).getTime();c();var o={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*t).toFixed(3)),cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3)),et:n};window.__xigua_log_sdk__("c",o)},a=function(){e.video.played;var t=l(e.logParams.played),n=(new Date).getTime();c();var o={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*t).toFixed(3)),cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3)),lt:n};window.__xigua_log_sdk__("d",o)},s=function(t){e.video.played;var n=l(e.logParams.played);c();var o=(new Date).getTime();if(!(e.logParams.lastErrLog&&o-e.logParams.lastErrLog<=3e3)){e.logParams.lastErrLog=o;var r={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*n).toFixed(3)),err_msg:t.errd.msg,line:t.errd.line,et:o,cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3))};if(e.logParams.nologFunc&&e.logParams.nologFunc(e))return!0;window.__xigua_log_sdk__("e",r)}};window.__xigua_log_sdk__||(window.__xigua_log_sdk__=new i.default("tracker"),window.__xigua_log_sdk__.init({app_id:1300,channel:"cn",log:!1,disable_sdk_monitor:!0}),window.__xigua_log_sdk__("config",{evtParams:{log_type:"logger",page_url:document.URL,domain:window.location.host,pver:e.version,ua:navigator.userAgent.toLowerCase()},disable_auto_pv:!0}),window.__xigua_log_sdk__.start()),e.config.uid&&window.__xigua_log_sdk__("config",{user_unique_id:e.config.uid});var l=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=[],n=0;n<e.length;n++)if(!(!e[n].end||e[n].begin<0||e[n].end<0||e[n].end<e[n].begin))if(t.length<1)t.push({begin:e[n].begin,end:e[n].end});else for(var o=0;o<t.length;o++){var r=e[n].begin,i=e[n].end;if(i<t[o].begin){t.splice(o,0,{begin:r,end:i});break}if(!(r>t[o].end)){var a=t[o].begin,s=t[o].end;t[o].begin=Math.min(r,a),t[o].end=Math.max(i,s);break}if(o>t.length-2){t.push({begin:r,end:i});break}}for(var l=0,c=0;c<t.length;c++)l+=t[c].end-t[c].begin;return l},c=function(){e.logParams.pt&&e.logParams.vt||(e.logParams.pt=(new Date).getTime(),e.logParams.vt=e.logParams.pt),e.logParams.pt>e.logParams.vt&&(e.logParams.pt=e.logParams.vt)},u=function(n){if(t.hasClass(e.root,"xgplayer-is-enter")){var o=(new Date).getTime(),r={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,pt:e.logParams.pt,lt:o};window.__xigua_log_sdk__("b",r)}else if(t.hasClass(e.root,"xgplayer-playing")){var i=l(e.logParams.played),a=(new Date).getTime();c();var s={url:e.logParams.pluginSrc?e.logParams.pluginSrc:e.logParams.playSrc,vid:e.config.vid,bc:e.logParams.bc-1>0?e.logParams.bc-1:0,bb:e.logParams.bc-1>0?1:0,bu_acu_t:e.logParams.bu_acu_t,pt:e.logParams.pt,vt:e.logParams.vt,vd:1e3*e.logParams.vd,watch_dur:parseFloat((1e3*i).toFixed(3)),cur_play_pos:parseFloat((1e3*e.currentTime).toFixed(3)),lt:a};window.__xigua_log_sdk__("d",s)}};"pc"===r.default.device?window.addEventListener("beforeunload",u,!1):"mobile"===r.default.device&&window.addEventListener("pagehide",u,!1),e.on("routechange",u),e.on("ended",n),e.on("urlchange",a),e.on("error",s),e.once("destroy",(function t(){"pc"===r.default.device?window.removeEventListener("beforeunload",u):"mobile"===r.default.device&&window.removeEventListener("pagehide",u),e.off("routechange",u),e.off("ended",n),e.off("urlchange",a),e.off("error",s),e.off("destroy",t)}))}}))},"./src/control/mobile.js":
/*!*******************************!*\
  !*** ./src/control/mobile.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o=i(n(/*! ../player */"./src/player.js")),r=i(n(/*! ../utils/svg */"./src/utils/svg.js"));function i(e){return e&&e.__esModule?e:{default:e}}o.default.install("mobile",(function(){var e=this,t=o.default.util,n=e.root,i=function(e){var t=o.default.util;return e.some((function(e){return"Function"===t.typeOf(e)?e.call(void 0,navigator.userAgent):"RegExp"===t.typeOf(e)?e.test(navigator.userAgent):"String"===t.typeOf(e)&&navigator.userAgent.indexOf(e)>-1}))}(e.config.whitelist);e.mobilePass=i;var a=e.config.centerBtn?e.config.centerBtn:{},s=void 0,l=void 0,c=void 0,u=void 0;"img"===a.type?l=o.default.util.createImgBtn("start",a.url.play,a.width,a.height):(s={pause:a.pausePath?a.pausePath:"M576,363L810,512L576,661zM342,214L576,363L576,661L342,810z",play:a.playPath?a.playPath:"M598,214h170v596h-170v-596zM256 810v-596h170v596h-170z"},l=t.createDom("xg-start",'\n          <svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n              <path transform="scale(0.04,0.04)" d="'+s.pause+'"></path>\n          </svg>',{},"xgplayer-start"),c=l.querySelector("path"),u=new r.default({from:s.play,to:s.pause,progress:function(e,t){c.setAttribute("d",u.toSVGString(e))}}));var d=t.createDom("xg-enter",'<xg-enter-logo class="xgplayer-enter-logo"></xg-enter-logo><xg-enter-tips class="xgplayer-enter-tips"></xg-player-tips>',{},"xgplayer-enter"),p=d.querySelector(".xgplayer-enter-logo");n.appendChild(l),n.appendChild(d);var f=d.querySelector(".xgplayer-enter-tips"),h=new Image;h.onload=function(){f.style.display="block"},e.config.enterLogo&&e.config.enterLogo.url&&e.config.enterLogo.width&&e.config.enterLogo.height?(h.src=e.config.enterLogo.url,p.style.backgroundImage='url("'+e.config.enterLogo.url+'")',p.style.width=e.config.enterLogo.width+"px",p.style.height=e.config.enterLogo.height+"px",p.style.backgroundSize=e.config.enterLogo.width+"px "+e.config.enterLogo.height+"px",p.style.margin="-"+e.config.enterLogo.height/2+"px auto auto -"+e.config.enterLogo.width/2+"px",f.style.margin=e.config.enterLogo.height-6+"px auto auto -62px"):h.src=t.getBgImage(p),e.config.enterTips&&e.config.enterTips.background&&(f.style.background=""+e.config.enterTips.background),e.config.enterBg&&(e.config.enterBg.url?d.style.backgroundImage='url("'+e.config.enterBg.url+'")':e.config.enterBg.color&&(d.style.background=e.config.enterBg.color)),e.start(),i?(e.video.addEventListener("touchend",(function(o){o.preventDefault(),t.hasClass(n,"xgplayer-inactive")?e.emit("focus"):e.emit("blur"),e.config.closeVideoTouch||e.ended||(e.paused?e.play():e.pause())}),!1),l.addEventListener("touchend",(function(o){o.preventDefault(),t.hasClass(n,"xgplayer-nostart")?(t.removeClass(n,"xgplayer-nostart"),t.addClass(n,"xgplayer-is-enter"),e.on("canplay",(function(){t.removeClass(n,"xgplayer-is-enter")})),e.once("playing",(function(){t.removeClass(n,"xgplayer-is-enter")})),e.play()):e.paused?e.play():e.pause()})),e.on("play",(function(){"img"===a.type?l.style.backgroundImage='url("'+a.url.pause+'")':u.reset(s.play,s.pause)})),e.on("pause",(function(){"img"===a.type?l.style.backgroundImage='url("'+a.url.play+'")':u.reset(s.pause,s.play)}))):(t.addClass(n,"xgplayer-mobile-npassed"),e.once("ready",(function(){e.video.controls=e.config.controls,e.video.controlsList=e.config.controlsList.join(" "),e.config.poster&&(e.video.poster=e.config.poster)}))),e.config.debug&&function(e){var t={};Object.assign(t,{host:"127.0.0.1",port:9090},e);var n=document.createElement("script"),o=document.createElement("h4");o.style.cssText="position:fixed;bottom:0;padding:10px;width:100%;background-color:#fff;text-align:center",o.textContent="weinre --boundHost "+t.host+" --httpPort "+t.port+"\r\n 启动服务后，刷新页面",n.anonymous=!0,n.async=!0,n.src="http://"+t.host+":"+t.port+"/target/target-script-min.js#anonymous",n.onload=function(){o.parentNode.removeChild(o)},document.body.appendChild(n),document.body.appendChild(o)}(e.config.debug)}))},"./src/control/pc.js":
/*!***************************!*\
  !*** ./src/control/pc.js ***!
  \***************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("pc",(function(){var e=this,t=i.default.util,n=e.controls,o=e.root,r=0,a=void 0,s=e.config.centerBtn?e.config.centerBtn:{},l=void 0,c=void 0,u=void 0;"img"===s.type?c=i.default.util.createImgBtn("start",s.url.play,s.width,s.height):(l={pause:s.pausePath?s.pausePath:"M576,363L810,512L576,661zM342,214L576,363L576,661L342,810z",play:s.playPath?s.playPath:"M598,214h170v596h-170v-596zM256 810v-596h170v596h-170z"},c=t.createDom("xg-start",'\n          <svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n              <path transform="scale(0.04,0.04)" d="'+l.pause+'"></path>\n          </svg>',{},"xgplayer-start"),u=c.querySelector("path"));var d=t.createDom("xg-enter",'<xg-enter-logo class="xgplayer-enter-logo"></xg-enter-logo><xg-enter-tips class="xgplayer-enter-tips"></xg-player-tips>',{},"xgplayer-enter"),p=d.querySelector(".xgplayer-enter-logo");o.appendChild(c),o.appendChild(d);var f=d.querySelector(".xgplayer-enter-tips"),h=new Image;function g(){t.removeClass(o,"xgplayer-is-enter")}function v(){t.removeClass(o,"xgplayer-is-enter")}function m(){"img"===s.type?c.style.backgroundImage='url("'+s.url.pause+'")':u.setAttribute("d",l.pause),c.style.display="inline-block",t.addClass(c,"xgplayer-start-interact")}function y(){"img"===s.type?c.style.backgroundImage='url("'+s.url.play+'")':u.setAttribute("d",l.play),c.style.display="inline-block",t.addClass(c,"xgplayer-start-interact")}function b(t){e.config.autoplay&&e.start()}h.onload=function(){f.style.display="block"},e.config.enterLogo&&e.config.enterLogo.url&&e.config.enterLogo.width&&e.config.enterLogo.height?(h.src=e.config.enterLogo.url,p.style.backgroundImage='url("'+e.config.enterLogo.url+'")',p.style.width=e.config.enterLogo.width+"px",p.style.height=e.config.enterLogo.height+"px",p.style.backgroundSize=e.config.enterLogo.width+"px "+e.config.enterLogo.height+"px",p.style.margin="-"+e.config.enterLogo.height/2+"px auto auto -"+e.config.enterLogo.width/2+"px",f.style.margin=e.config.enterLogo.height-6+"px auto auto -62px"):h.src=t.getBgImage(p),e.config.enterTips&&e.config.enterTips.background&&(f.style.background=""+e.config.enterTips.background),e.config.enterBg&&(e.config.enterBg.url?d.style.backgroundImage='url("'+e.config.enterBg.url+'")':e.config.enterBg.color&&(d.style.background=e.config.enterBg.color)),["click","touchend"].forEach((function(n){c.addEventListener(n,(function(n){!function(n){n.preventDefault(),n.stopPropagation(),t.hasClass(o,"xgplayer-nostart")?(t.removeClass(o,"xgplayer-nostart"),t.addClass(o,"xgplayer-is-enter"),e.on("canplay",g),e.once("playing",v),o.querySelector("video")||e.start(),e.play()):e.paused&&(t.removeClass(o,"xgplayer-nostart xgplayer-isloading"),setTimeout((function(){e.play()}),10))}(n)}),!1)})),c.addEventListener("animationend",(function(e){!function(e){e.preventDefault(),t.removeClass(c,"xgplayer-start-interact"),c.style.display="none"}(e)})),e.on("play",m),e.on("pause",y),e.onElementClick=function(e,n){e.preventDefault(),e.stopPropagation();var o=this;o.config.closeVideoClick||(r++,a&&clearTimeout(a),1===r?a=setTimeout((function(){if(t.hasClass(o.root,"xgplayer-nostart"))return!1;o.ended||(o.paused?o.play():o.pause()),r=0}),200):r=0)},e.video.addEventListener("click",(function(t){e.onElementClick(t,e.video)}),!1),e.onElementDblclick=function(e,t){e.preventDefault(),e.stopPropagation();if(!this.config.closeVideoDblclick){var o=n.querySelector(".xgplayer-fullscreen");if(o){var r=void 0;document.createEvent?(r=document.createEvent("Event")).initEvent("click",!0,!0):r=new Event("click"),o.dispatchEvent(r)}}},e.video.addEventListener("dblclick",(function(t){e.onElementDblclick(t,e.video)}),!1),o.addEventListener("mouseenter",(function(){clearTimeout(e.leavePlayerTimer),e.emit("focus",e)}),!1),o.addEventListener("mouseleave",(function(){e.config.closePlayerBlur||(e.leavePlayerTimer=setTimeout((function(){e.emit("blur",e)}),e.config.leavePlayerTime||0))}),!1),n.addEventListener("mouseenter",(function(t){e.userTimer&&clearTimeout(e.userTimer)}),!1),n.addEventListener("mouseleave",(function(t){e.config.closeControlsBlur||e.emit("focus",e)}),!1),e.once("ready",b),e.once("destroy",(function t(){e.off("canplay",g),e.off("playing",v),e.off("play",m),e.off("pause",y),e.off("ready",b),e.off("destroy",t)}))}))},"./src/control/pip.js":
/*!****************************!*\
  !*** ./src/control/pip.js ***!
  \****************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("pip",(function(){var e=this,t=i.default.util;if(e.config.pip){var n=t.createDom("xg-pip",'<p class="name"><span>画中画</span></p>',{tabindex:9},"xgplayer-pip"),o=e.controls,r=e.root;o.appendChild(n);["click","touchstart"].forEach((function(o){n.addEventListener(o,(function(n){n.preventDefault(),n.stopPropagation(),t.hasClass(r,"xgplayer-pip-active")?e.exitPIP(e):e.getPIP(e)}))}))}}))},"./src/control/play.js":
/*!*****************************!*\
  !*** ./src/control/play.js ***!
  \*****************************/
/*! no static exports found */function(e,t,n){"use strict";var o=i(n(/*! ../player */"./src/player.js")),r=i(n(/*! ../utils/svg */"./src/utils/svg.js"));function i(e){return e&&e.__esModule?e:{default:e}}o.default.install("play",(function(){var e=this,t=e.controls,n=o.default.util,i=e.config.iconScale||.0320625,a={play:"M576,363L810,512L576,661zM342,214L576,363L576,661L342,810z",pause:"M598,214h170v596h-170v-596zM256 810v-596h170v596h-170z"},s=e.config.playBtn?e.config.playBtn:{},l=void 0,c=void 0,u=void 0;"img"===s.type?l=o.default.util.createImgBtn("play",s.url.play,s.width,s.height):(l=n.createDom("xg-play",'<xg-icon class="xgplayer-icon"><svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n              <path transform="scale('+i+" "+i+')" d="'+a.play+'"></path>\n          </svg></xg-icon>',{},"xgplayer-play"),c=l.querySelector("path"),u=new r.default({progress:function(e,t){c.setAttribute("d",u.toSVGString(e))},from:a.pause,to:a.play,duration:50}));var d=e.config.lang&&"zh-cn"===e.config.lang?"播放":"Play",p=e.config.lang&&"zh-cn"===e.config.lang?"暂停":"Pause",f=n.createDom("xg-tips",d,{},"xgplayer-tips");l.appendChild(f);function h(){"img"===s.type?l.style.backgroundImage='url("'+s.url.pause+'")':setTimeout((function(){f.textContent=p,u.to!==a.pause&&u.reset(a.pause,a.play)}),80)}function g(){"img"===s.type?l.style.backgroundImage='url("'+s.url.play+'")':setTimeout((function(){f.textContent=d,u.to!==a.play&&u.reset(a.play,a.pause)}),80)}t.appendChild(l),["click","touchstart"].forEach((function(t){l.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation(),e.ended||(e.paused?e.play():e.pause())}),!1)})),e.on("play",h),e.on("pause",g),e.once("destroy",(function t(){e.off("play",h),e.off("pause",g),e.off("destroy",t)}))}))},"./src/control/playNext.js":
/*!*********************************!*\
  !*** ./src/control/playNext.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("playNext",(function(){var e=this,t=i.default.util,n=e.controls,o=e.config.playNextBtn,r=-1;if(o&&o.urlList){var a=void 0;a="img"===o.type?i.default.util.createImgBtn("playNext",o.url,o.width,o.height):t.createDom("xg-playNext",'<xg-icon class="xgplayer-icon"><svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n                <path transform="scale(0.025 0.025)"\n                d="M800 380v768h-128v-352l-320 320v-704l320 320v-352z"></path>\n            </svg></xg-icon>',{},"xgplayer-playNext"),n.appendChild(a);["click","touchend"].forEach((function(t){a.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation(),r+1<o.urlList.length?(r++,e.video.pause(),e.currentTime=0,e.video.autoplay=!0,e.src=o.urlList[r],e.emit("playerNext",r+1)):e.emit("urlList last")}),!1)}))}}))},"./src/control/playbackRate.js":
/*!*************************************!*\
  !*** ./src/control/playbackRate.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("playbackRate",(function(){var e=this,t=i.default.util,n=0,o=1,r=[];if(!e.config.playbackRate)return!1;e.config.playbackRate.sort((function(e,t){return e-t})),e.config.playbackRate.forEach((function(t,i){e.config.defaultPlaybackRate&&e.config.defaultPlaybackRate===t?(n=i,o=t,e.once("playing",(function(){e.video.playbackRate=t}))):1!==t&&"1"!==t||(n=i),r.push(t+"x")}));var a=e.config.lang&&"zh-cn"===e.config.lang?"倍速":"Speed",s=t.createDom("xg-playback","<p class='name'><span>"+o+"x</span></p>",{},"xgplayer-playback"),l=e.controls,c=t.createDom("xg-tips",a,{},"xgplayer-tips");s.appendChild(c),l.appendChild(s),["touchstart","click"].forEach((function(t){s.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation();var o=t.target||t.srcElement;!o||"p"!==o.tagName.toLocaleLowerCase()&&"span"!==o.tagName.toLocaleLowerCase()||(n=n+1===r.length?0:n+1,s.querySelector("p").innerHTML="<span>"+r[n]+"</span>",e.video.playbackRate=1*r[n].replace(/x$/g,""))}),!1)})),s.addEventListener("mouseenter",(function(t){t.preventDefault(),t.stopPropagation(),c.style.left="50%";var n=c.getBoundingClientRect(),o=e.root.getBoundingClientRect();n.right>o.right&&(c.style.left=-n.right+o.right+16+"px")})),e.on("play",(function(){var t=parseFloat(r[n].substring(0,r[n].length-1));e.video.playbackRate.toFixed(1)!==t.toFixed(1)&&(e.video.playbackRate=t)}))}))},"./src/control/poster.js":
/*!*******************************!*\
  !*** ./src/control/poster.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("poster",(function(){var e=this,t=i.default.util.createDom("xg-poster","",{},"xgplayer-poster"),n=e.root;function o(){t.style.display="none"}e.config.poster&&(t.style.backgroundImage="url("+e.config.poster+")",n.appendChild(t)),e.on("play",o),e.once("destroy",(function t(){e.off("play",o),e.off("destroy",t)}))}))},"./src/control/progress.js":
/*!*********************************!*\
  !*** ./src/control/progress.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("progress",(function(){var e=this,t=i.default.util,n=t.createDom("xg-progress",'<xg-outer class="xgplayer-progress-outer"><xg-cache class="xgplayer-progress-cache"></xg-cache><xg-played class="xgplayer-progress-played"></xgplayer-played><xg-progress-btn class="xgplayer-progress-btn"></xg-progress-btn><xg-point class="xgplayer-progress-point xgplayer-tips"></xg-point><xg-thumbnail class="xgplayer-progress-thumbnail xgplayer-tips"></xg-thumbnail></xg-outer>',{tabindex:1},"xgplayer-progress"),o=e.controls,r=void 0;o.appendChild(n);var a=n.querySelector(".xgplayer-progress-played"),s=n.querySelector(".xgplayer-progress-btn"),l=n.querySelector(".xgplayer-progress-outer"),c=n.querySelector(".xgplayer-progress-cache"),u=n.querySelector(".xgplayer-progress-point"),d=n.querySelector(".xgplayer-progress-thumbnail");function p(o,r){o.addEventListener("mouseenter",(function(e){r&&(t.addClass(o,"xgplayer-progress-dot-show"),t.addClass(n,"xgplayer-progress-dot-active"))})),o.addEventListener("mouseleave",(function(e){r&&(t.removeClass(o,"xgplayer-progress-dot-show"),t.removeClass(n,"xgplayer-progress-dot-active"))})),o.addEventListener("touchend",(function(i){i.preventDefault(),i.stopPropagation(),r&&(t.hasClass(o,"xgplayer-progress-dot-show")||Object.keys(e.dotArr).forEach((function(n){e.dotArr[n]&&t.removeClass(e.dotArr[n],"xgplayer-progress-dot-show")})),t.toggleClass(o,"xgplayer-progress-dot-show"),t.toggleClass(n,"xgplayer-progress-dot-active"))}))}function f(){e.config.progressDot&&"Array"===t.typeOf(e.config.progressDot)&&e.config.progressDot.forEach((function(n){if(n.time>=0&&n.time<=e.duration){var o=t.createDom("xg-progress-dot",n.text?'<span class="xgplayer-progress-tip">'+n.text+"</span>":"",{},"xgplayer-progress-dot");o.style.left=n.time/e.duration*100+"%",l.appendChild(o),e.dotArr[n.time]=o,p(o,n.text)}}))}e.dotArr={},e.once("canplay",f),e.addProgressDot=function(n,o){if(!e.dotArr[n]&&n>=0&&n<=e.duration){var r=t.createDom("xg-progress-dot","",{},"xgplayer-progress-dot");r.style.left=n/e.duration*100+"%",l.appendChild(r),e.dotArr[n]=r,p(r,o)}},e.removeProgressDot=function(t){if(t>=0&&t<=e.duration&&e.dotArr[t]){var n=e.dotArr[t];n.parentNode.removeChild(n),n=null,e.dotArr[t]=null}},e.removeAllProgressDot=function(){Object.keys(e.dotArr).forEach((function(t){if(e.dotArr[t]){var n=e.dotArr[t];n.parentNode.removeChild(n),n=null,e.dotArr[t]=null}}))};var h=0,g=0,v=0,m=0,y=0,b=0,x=[];e.config.thumbnail&&(h=e.config.thumbnail.pic_num,g=e.config.thumbnail.width,v=e.config.thumbnail.height,m=e.config.thumbnail.col,y=e.config.thumbnail.row,x=e.config.thumbnail.urls,d.style.width=g+"px",d.style.height=v+"px"),["touchstart","mousedown"].forEach((function(i){n.addEventListener(i,(function(i){if(i.preventDefault(),i.stopPropagation(),t.event(i),i._target===u||!e.config.allowSeekAfterEnded&&e.ended)return!1;n.focus(),r=n.getBoundingClientRect().width;var l=a.getBoundingClientRect().left,c=function(n){n.preventDefault(),n.stopPropagation(),t.event(n),e.isProgressMoving=!0;var i=n.clientX-l>r?r:n.clientX-l,c=i/r*e.duration;if(a.style.width=100*i/r+"%",i-7<0?(s.style.left="0px",s.style.transform=""):i+7>r?(s.style.left=r-14+"px",s.style.transform=""):(s.style.left="100%",s.style.transform="translate(-50%, 0)"),"video"!==e.videoConfig.mediaType||e.dash||e.config.closeMoveSeek){var u=t.findDom(o,".xgplayer-time");u&&(u.innerHTML="<span>"+t.format(c||0)+"</span><em>"+t.format(e.duration))}else e.currentTime=Number(c).toFixed(1);e.emit("focus")},d=function o(i){if(i.preventDefault(),i.stopPropagation(),t.event(i),window.removeEventListener("mousemove",c),window.removeEventListener("touchmove",c,{passive:!1}),window.removeEventListener("mouseup",o),window.removeEventListener("touchend",o),n.blur(),!e.isProgressMoving||"audio"===e.videoConfig.mediaType||e.dash||e.config.closeMoveSeek){var u=i.clientX-l,d=u/r*e.duration;a.style.width=100*u/r+"%",u-7<0?(s.style.left="0px",s.style.transform=""):u+7>r?(s.style.left=r-14+"px",s.style.transform=""):(s.style.left="100%",s.style.transform="translate(-50%, 0)"),e.currentTime=Number(d).toFixed(1)}e.emit("focus"),e.isProgressMoving=!1};return window.addEventListener("mousemove",c),window.addEventListener("touchmove",c,{passive:!1}),window.addEventListener("mouseup",d),window.addEventListener("touchend",d),!1}))})),n.addEventListener("mouseenter",(function(o){if(!e.config.allowSeekAfterEnded&&e.ended)return!1;var r=n.getBoundingClientRect().left,i=n.getBoundingClientRect().width,a=function(o){var a=(o.clientX-r)/i*e.duration;a=a<0?0:a,u.textContent=t.format(a);var s=u.getBoundingClientRect().width;if(e.config.thumbnail){b=e.duration/h;var l=Math.floor(a/b);d.style.backgroundImage="url("+x[Math.ceil((l+1)/(m*y))-1]+")";var c=l+1-m*y*(Math.ceil((l+1)/(m*y))-1),p=Math.ceil(c/y)-1,f=c-p*y-1;d.style["background-position"]="-"+f*g+"px -"+p*v+"px";var w=o.clientX-r-g/2;w=(w=w>0?w:0)<i-g?w:i-g,d.style.left=w+"px",d.style.top=-10-v+"px",d.style.display="block",u.style.left=w+g/2-s/2+"px"}else{var _=o.clientX-r-s/2;_=(_=_>0?_:0)>i-s?i-s:_,u.style.left=_+"px"}t.hasClass(n,"xgplayer-progress-dot-active")?u.style.display="none":u.style.display="block"},s=function(e){a(e)};n.addEventListener("mousemove",s,!1),n.addEventListener("mouseleave",(function e(t){n.removeEventListener("mousemove",s,!1),n.removeEventListener("mouseleave",e,!1),a(t),u.style.display="none",d.style.display="none"}),!1),a(o)}),!1);var w=!1,_=function(){if(!r&&n&&(r=n.getBoundingClientRect().width),"audio"!==e.videoConfig.mediaType||!e.isProgressMoving||!e.dash){a.style.width=100*e.currentTime/e.duration+"%";var t=e.currentTime/e.duration*r-7;if(t<0)s.style.left="0px",s.style.transform="",w=!1;else if(t+14>r)s.style.left=r-14+"px",s.style.transform="",w=!1;else{if(w)return;s.style.left="100%",s.style.transform="translate(-50%, 0)",w=!0}}};e.on("timeupdate",_);var k=function(){var t=e.buffered;if(t&&t.length>0){for(var n=t.end(t.length-1),o=0,r=t.length;o<r;o++)if(e.currentTime>=t.start(o)&&e.currentTime<=t.end(o)){n=t.end(o);for(var i=o+1;i<t.length;i++)if(t.start(i)-t.end(i-1)>=2){n=t.end(i-1);break}break}c.style.width=n/e.duration*100+"%"}},E=["bufferedChange","cacheupdate","ended","timeupdate"];E.forEach((function(t){e.on(t,k)})),e.once("destroy",(function t(){e.removeAllProgressDot(),e.off("canplay",f),e.off("timeupdate",_),E.forEach((function(t){e.off(t,k)})),e.off("destroy",t)}))}))},"./src/control/replay.js":
/*!*******************************!*\
  !*** ./src/control/replay.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("replay",(function(){var e=this,t=i.default.util,n=e.config.centerBtn?e.config.centerBtn:{},o=void 0,r=void 0,a=void 0,s=void 0;if(!(navigator.userAgent.indexOf("iPhone OS 9")>-1)){if("img"===n.type){if(r=t.createDom("xg-replay",'<div class="xgplayer-replay-img"></div>',{},"xgplayer-replay"),(a=r.querySelector(".xgplayer-replay-img")).style.backgroundImage='url("'+n.url.replay+'")',n.width&&n.height){var l=void 0,c=void 0,u=void 0;["px","rem","em","pt","dp","vw","vh","vm","%"].every((function(e){return!(n.width.indexOf(e)>-1&&n.height.indexOf(e)>-1)||(l=parseFloat(n.width.slice(0,n.width.indexOf(e)).trim()),c=parseFloat(n.height.slice(0,n.height.indexOf(e)).trim()),u=e,!1)})),a.style.width=""+l+u,a.style.height=""+c+u,a.style.backgroundSize=""+l+u+" "+c+u,a.style.margin="-"+c/2+u+" auto auto -"+l/2+u}}else o={replay:n.replayPath?n.replayPath:"M8.22708362,13.8757234 L11.2677371,12.6472196 C11.7798067,12.4403301 12.3626381,12.6877273 12.5695276,13.1997969 L12.9441342,14.1269807 C13.1510237,14.6390502 12.9036264,15.2218816 12.3915569,15.4287712 L6.8284538,17.6764107 L5.90126995,18.0510173 C5.38920044,18.2579068 4.80636901,18.0105096 4.5994795,17.49844 L1.97723335,11.0081531 C1.77034384,10.4960836 2.0177411,9.91325213 2.52981061,9.70636262 L3.45699446,9.33175602 C3.96906396,9.12486652 4.5518954,9.37226378 4.75878491,9.88433329 L5.67885163,12.1615783 C7.99551726,6.6766934 13.3983951,3 19.5,3 C27.7842712,3 34.5,9.71572875 34.5,18 C34.5,26.2842712 27.7842712,33 19.5,33 C15.4573596,33 11.6658607,31.3912946 8.87004692,28.5831991 C8.28554571,27.9961303 8.28762719,27.0463851 8.87469603,26.4618839 C9.46176488,25.8773827 10.4115101,25.8794641 10.9960113,26.466533 C13.2344327,28.7147875 16.263503,30 19.5,30 C26.127417,30 31.5,24.627417 31.5,18 C31.5,11.372583 26.127417,6 19.5,6 C14.4183772,6 9.94214483,9.18783811 8.22708362,13.8757234 Z"},s=(r=t.createDom("xg-replay",'\n          <svg class="xgplayer-replay-svg" xmlns="http://www.w3.org/2000/svg" width="78" height="78" viewbox="0 0 78 78">\n            <path d="'+o.replay+'"></path>\n          </svg>\n          <xg-replay-txt class="xgplayer-replay-txt">重播</xg-replay-txt>\n          ',{},"xgplayer-replay")).querySelector(".xgplayer-replay-svg");var d=e.root;d.appendChild(r),e.on("ended",p),(s||a).addEventListener("click",(function(n){n.preventDefault(),t.removeClass(d,"replay"),e.replay()})),e.once("destroy",(function t(){e.off("ended",p),e.off("destroy",t)}))}function p(){if("img"===n.type)a.style.backgroundImage='url("'+n.url.replay+'")';else{r.querySelector(".xgplayer-replay-txt").textContent=e.lang.REPLAY;var o=r.querySelector("path"),i=window.getComputedStyle(o).getPropertyValue("transform");"none"!==i&&o.setAttribute("transform",i)}e.config.loop||t.addClass(d,"replay")}}))},"./src/control/rotate.js":
/*!*******************************!*\
  !*** ./src/control/rotate.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("rotate",(function(){var e=this;if(this.config.rotate){!0===this.config.rotate&&(this.config.rotate={});var t=i.default.util,n=t.createDom("xg-rotate",'<xg-icon class="xgplayer-icon xgplayer-rotate-img"></xg-icon>',{},"xgplayer-rotate"),o=e.config.lang&&"zh-cn"===e.config.lang?"旋转":"Rotate",r=t.createDom("xg-tips",o,{},"xgplayer-tips");n.appendChild(r),e.controls.appendChild(n);var a=0;e.rotate=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=e.root.offsetWidth,o=e.root.offsetHeight;e.config.rotate.innerRotate||(e.root.style.width=o+"px",e.root.style.height=n+"px");var r=e.config.rotate.clockwise?1:-1,i=void 0;i=.25===(a=(a+1+.25*r*t)%1)||.75===a?(e.config.rotate.innerRotate,(o/n).toFixed(2)):1,e.video.style.transformOrigin="center center",e.video.style.transform="rotate("+a+"turn) scale("+i+")",e.video.style.webKitTransform="rotate("+a+"turn) scale("+i+")",e.emit("rotate",360*a)},n.addEventListener("mouseenter",(function(t){t.preventDefault(),t.stopPropagation(),r.style.left="50%";var n=r.getBoundingClientRect(),o=e.root.getBoundingClientRect();n.right>o.right&&(r.style.left=-n.right+o.right+16+"px")})),n.addEventListener("click",(function(){e.rotate()}))}}))},"./src/control/screenShot.js":
/*!***********************************!*\
  !*** ./src/control/screenShot.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("screenShot",(function(){var e=this,t=i.default.util;if(e.config.screenShot){var n=t.createDom("xg-screenShot",'<p class="name"><span>截图</span></p>',{tabindex:11},"xgplayer-screenShot"),o=document.createElement("canvas"),r=o.getContext("2d"),a=new Image;o.width=this.config.width||600,o.height=this.config.height||337.5,e.controls.appendChild(n);["click","touchstart"].forEach((function(t){n.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation(),a.onload=(r.drawImage(e.video,0,0,o.width,o.height),a.setAttribute("crossOrigin","anonymous"),a.src=o.toDataURL("image/png").replace("image/png","image/octet-stream"),void function(e,t){var n=document.createElement("a");n.href=e,n.download=t;var o=document.createEvent("MouseEvents");o.initMouseEvent("click",!0,!1,window,0,0,0,0,0,!1,!1,!1,!1,0,null),n.dispatchEvent(o)}(a.src.replace(/^data:image\/[^;]+/,"data:application/octet-stream"),"截图.png"))}))}))}}))},"./src/control/textTrack.js":
/*!**********************************!*\
  !*** ./src/control/textTrack.js ***!
  \**********************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("textTrack",(function(){if(-1!==navigator.userAgent.indexOf("Chrome")){var e=this,t=i.default.util,n=(i.default.sniffer,t.createDom("xg-textTrack","",{tabindex:7},"xgplayer-textTrack")),o=e.controls,r=e.config.textTrack;r&&Array.isArray(r)&&r.length>1&&(t.addClass(e.root,"xgplayer-is-textTrack"),e.on("canplay",(function(){var i=["<ul>"];i.push("<li class=''}'>关闭</li>"),r.forEach((function(e){i.push("<li class='"+(e.default?"textTrack":"")+"'>"+e.label+"</li>")}));var a=e.config.lang&&"zh-cn"===e.config.lang?"字幕":"Caption";i.push('</ul><p class="name"><em>'+a+"</em></p>");var s=o.querySelector(".xgplayer-textTrack");s?(s.innerHTML=i.join(""),s.querySelector(".name").addEventListener("mouseenter",(function(n){n.preventDefault(),n.stopPropagation(),t.addClass(e.root,"xgplayer-textTrack-active"),s.focus()}))):(n.innerHTML=i.join(""),n.querySelector(".name").addEventListener("mouseenter",(function(o){o.preventDefault(),o.stopPropagation(),t.addClass(e.root,"xgplayer-textTrack-active"),n.focus()})),o.appendChild(n))}))),["touchend","click"].forEach((function(o){n.addEventListener(o,(function(n){n.preventDefault(),n.stopPropagation();var o=n.target||n.srcElement;if(o&&"li"===o.tagName.toLocaleLowerCase()){Array.prototype.forEach.call(o.parentNode.childNodes,(function(e){t.removeClass(e,"textTrack")})),t.addClass(o,"textTrack");var i=e.root.getElementsByTagName("Track");"关闭"===o.innerHTML?(i[0].track.mode="hidden",t.removeClass(e.root,"xgplayer-textTrack-active")):(t.hasClass(e.root,"xgplayer-textTrack-active")||t.addClass(e.root,"xgplayer-textTrack-active"),i[0].track.mode="showing",r.some((function(e){if(e.label===o.innerHTML)return i[0].src=e.src,e.kind&&(i[0].kind=e.kind),i[0].label=e.label,e.srclang&&(i[0].srclang=e.srclang),!0})),e.emit("textTrackChange",o.innerHTML))}}),!1)})),n.addEventListener("mouseleave",(function(n){n.preventDefault(),n.stopPropagation(),t.removeClass(e.root,"xgplayer-textTrack-active")}))}}))},"./src/control/time.js":
/*!*****************************!*\
  !*** ./src/control/time.js ***!
  \*****************************/
/*! no static exports found */function(e,t,n){"use strict";var o,r=n(/*! ../player */"./src/player.js"),i=(o=r)&&o.__esModule?o:{default:o};i.default.install("time",(function(){var e=this,t=i.default.util,n=t.format,o=t.createDom("xg-time","<span>"+(e.currentTime||n(0))+"</span><em>"+(e.duration||n(0))+"</em>",{},"xgplayer-time");e.controls.appendChild(o);var r=function(){"audio"===e.videoConfig.mediaType&&e.isProgressMoving&&e.dash||(o.innerHTML="<span>"+n(e.currentTime||0)+"</span><em>"+n(e.duration))};e.on("durationchange",r),e.on("timeupdate",r),e.once("destroy",(function t(){e.off("durationchange",r),e.off("timeupdate",r),e.off("destroy",t)}))}))},"./src/control/volume.js":
/*!*******************************!*\
  !*** ./src/control/volume.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var o=i(n(/*! ../player */"./src/player.js")),r=i(n(/*! ../utils/svg */"./src/utils/svg.js"));function i(e){return e&&e.__esModule?e:{default:e}}o.default.install("volume",(function(){var e=this,t=o.default.util,n=o.default.sniffer;function i(){e.config.autoplay&&e.config.autoplayMuted?e.volume=0:e.volume=e.config.volume}e.config.autoplayMuted&&(e.config.volume=e.config.autoplay?0:e.config.volume),e.once("canplay",i);var a=e.config.volume;if("mobile"!==n.device){var s={muted:"M920.4 439.808l-108.544-109.056-72.704 72.704 109.568 108.544-109.056 108.544 72.704 72.704 108.032-109.568 108.544 109.056 72.704-72.704-109.568-108.032 109.056-108.544-72.704-72.704-108.032 109.568z",small:"M795.648 693.248l-72.704-72.704c27.756-27.789 44.921-66.162 44.921-108.544s-17.165-80.755-44.922-108.546l0.002 0.002 72.704-72.704c46.713 46.235 75.639 110.363 75.639 181.248s-28.926 135.013-75.617 181.227l-0.021 0.021zM795.648 693.248l-72.704-72.704c27.756-27.789 44.921-66.162 44.921-108.544s-17.165-80.755-44.922-108.546l0.002 0.002 72.704-72.704c46.713 46.235 75.639 110.363 75.639 181.248s-28.926 135.013-75.617 181.227l-0.021 0.021z",large:"M940.632 837.632l-72.192-72.192c65.114-64.745 105.412-154.386 105.412-253.44s-40.299-188.695-105.396-253.424l-0.016-0.016 72.192-72.192c83.639 83.197 135.401 198.37 135.401 325.632s-51.762 242.434-135.381 325.612l-0.020 0.020zM795.648 693.248l-72.704-72.704c27.756-27.789 44.921-66.162 44.921-108.544s-17.165-80.755-44.922-108.546l0.002 0.002 72.704-72.704c46.713 46.235 75.639 110.363 75.639 181.248s-28.926 135.013-75.617 181.227l-0.021 0.021z"},l=function(e){return 0===e?"muted":e<.5?"small":"large"},c=s[l(a)],u=s[l(a)],d=t.createDom("xg-volume",'<xg-icon class="xgplayer-icon">\n                                                    <svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n                                                        <path transform="scale(0.0220625 0.0220625)" d="M358.4 358.4h-204.8v307.2h204.8l256 256v-819.2l-256 256z"></path>\n                                                        <path transform="scale(0.0220625 0.0220625)" d="'+u+'"></path>\n                                                    </svg>\n                                                </xg-icon>\n                                                <xg-slider class="xgplayer-slider" tabindex="2">\n                                                    <xg-bar class="xgplayer-bar">\n                                                        <xg-drag class="xgplayer-drag"></xg-drag>\n                                                    </xg-bar>\n                                                </xg-slider>',{},"xgplayer-volume");e.controls.appendChild(d);var p=void 0,f=d.querySelector(".xgplayer-slider"),h=d.querySelector(".xgplayer-bar"),g=d.querySelector(".xgplayer-drag"),v=d.querySelector(".xgplayer-icon");g.style.height=100*e.config.volume+"%";var m=d.querySelectorAll("path")[1],y=new r.default({progress:function(e,t){var n=y.toSVGString(e);m.setAttribute("d",n),c=n},from:c,to:s.large}),b=null;f.volume=e.config.volume,["touchstart","mousedown"].forEach((function(n){h.addEventListener(n,(function(n){n.preventDefault(),n.stopPropagation(),e.video.muted=!1,f.focus(),t.event(n),p=h.getBoundingClientRect().height;n.clientX;var o=n.clientY,r=g.getBoundingClientRect().height,i=!1,a=function(n){n.preventDefault(),n.stopPropagation(),t.event(n),i=!0;var a=r-n.clientY+o,s=a/p;g.style.height=a+"px",e.volume=Math.max(Math.min(s,1),.01)},s=function n(o){if(o.preventDefault(),o.stopPropagation(),t.event(o),window.removeEventListener("mousemove",a),window.removeEventListener("touchmove",a),window.removeEventListener("mouseup",n),window.removeEventListener("touchend",n),b||(b=h.getBoundingClientRect()),!i){var r=b.height-(o.clientY-b.top),s=r/b.height;g.style.height=r+"px",s<=0&&(e.volume>0?g.volume=e.video.volume:s=g.volume),e.volume=Math.max(Math.min(s,1),.01)}f.volume=e.volume,i=!1};return window.addEventListener("mousemove",a),window.addEventListener("touchmove",a),window.addEventListener("mouseup",s),window.addEventListener("touchend",s),!1}))})),["touchstart","mousedown"].forEach((function(t){v.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation(),e.video.muted=!1,0===e.volume?e.volume=f.volume:e.volume=0}))})),v.addEventListener("mouseenter",(function(n){n.preventDefault(),n.stopPropagation(),t.addClass(e.root,"xgplayer-volume-active"),d.focus()})),d.addEventListener("blur",(function(n){n.preventDefault(),n.stopPropagation(),t.removeClass(e.root,"xgplayer-volume-active")})),d.addEventListener("mouseleave",(function(n){n.preventDefault(),n.stopPropagation(),t.removeClass(e.root,"xgplayer-volume-active")}));var x=null;e.on("volumechange",T),e.once("destroy",(function t(){e.off("canplay",i),e.off("volumechange",T),e.off("destroy",t)}))}else{var w={muted:"M920.4 439.808l-108.544-109.056-72.704 72.704 109.568 108.544-109.056 108.544 72.704 72.704 108.032-109.568 108.544 109.056 72.704-72.704-109.568-108.032 109.056-108.544-72.704-72.704-108.032 109.568z",large:"M940.632 837.632l-72.192-72.192c65.114-64.745 105.412-154.386 105.412-253.44s-40.299-188.695-105.396-253.424l-0.016-0.016 72.192-72.192c83.639 83.197 135.401 198.37 135.401 325.632s-51.762 242.434-135.381 325.612l-0.020 0.020zM795.648 693.248l-72.704-72.704c27.756-27.789 44.921-66.162 44.921-108.544s-17.165-80.755-44.922-108.546l0.002 0.002 72.704-72.704c46.713 46.235 75.639 110.363 75.639 181.248s-28.926 135.013-75.617 181.227l-0.021 0.021z"},_=function(e){return 0===e?"muted":"large"},k=w[_(a)],E=w[_(a)],C=t.createDom("xg-volume",'<xg-icon class="xgplayer-icon">\n                                                      <svg xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">\n                                                          <path transform="scale(0.0220625 0.0220625)" d="M358.4 358.4h-204.8v307.2h204.8l256 256v-819.2l-256 256z"></path>\n                                                          <path transform="scale(0.0220625 0.0220625)" d="'+E+'"></path>\n                                                      </svg>\n                                                  </xg-icon>',{},"xgplayer-volume");e.controls.appendChild(C);var S=C.querySelector(".xgplayer-icon"),P=C.querySelectorAll("path")[1],j=new r.default({progress:function(e,t){var n=j.toSVGString(e);P.setAttribute("d",n),k=n},from:k,to:w.large});["touchend","mousedown"].forEach((function(t){S.addEventListener(t,(function(t){t.preventDefault(),t.stopPropagation(),e.video.muted?(e.video.muted=!1,e.volume=1,j.reset(w.large,w.muted),k=w.large):(e.volume=0,e.video.muted=!0,j.reset(w.muted,w.large),k=w.muted)}))}))}function T(){x&&clearTimeout(x),x=setTimeout((function(){y.reset(s[l(e.volume)],c),c=s[l[e.volume]],p||(p=h.getBoundingClientRect().height||76),g.style.height=e.volume*p+"px"}),50)}}))},"./src/error.js":
/*!**********************!*\
  !*** ./src/error.js ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(/*! ../package.json */"./package.json");function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i={network:{code:1,msg:"视频下载错误",remark:"只要视频下载错误就使用此类型，无论是video本身的超时还是xhr的分段请求超时或者资源不存在"},mse:{code:2,msg:"流追加错误",remark:"追加流的时候如果类型不对、无法被正确解码则会触发此类错误"},parse:{code:3,msg:"解析错误",remark:"mp4、hls、flv我们都是使用js进行格式解析，如果解析失败则会触发此类错误"},format:{code:4,msg:"格式错误",remark:"如果浏览器不支持的格式导致播放错误"},decoder:{code:5,msg:"解码错误",remark:"浏览器解码异常会抛出此类型错误"},runtime:{code:6,msg:"语法错误",remark:"播放器语法错误"},timeout:{code:7,msg:"播放超时",remark:"播放过程中无法正常请求下一个分段导致播放中断"},other:{code:8,msg:"其他错误",remark:"不可知的错误或被忽略的错误类型"}};t.default=function e(t,n,a,s,l,c,u,d){var p=arguments.length>8&&void 0!==arguments[8]?arguments[8]:{line:"",handle:"",msg:"",version:""};r(this,e);var f={};return f.playerVersion=o.version,f.errorType=t,f.domain=document.domain,f.duration=a,f.currentTime=n,f.networkState=s,f.readyState=l,f.currentSrc=u,f.src=c,f.ended=d,f.errd=p,f.ex=(i[t]||{}).msg,f},e.exports=t.default},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=M(n(/*! ./player */"./src/player.js")),r=M(n(/*! ./control/volume.js */"./src/control/volume.js")),i=M(n(/*! ./control/time.js */"./src/control/time.js")),a=M(n(/*! ./control/textTrack.js */"./src/control/textTrack.js")),s=M(n(/*! ./control/screenShot.js */"./src/control/screenShot.js")),l=M(n(/*! ./control/rotate.js */"./src/control/rotate.js")),c=M(n(/*! ./control/replay.js */"./src/control/replay.js")),u=M(n(/*! ./control/progress.js */"./src/control/progress.js")),d=M(n(/*! ./control/poster.js */"./src/control/poster.js")),p=M(n(/*! ./control/playNext.js */"./src/control/playNext.js")),f=M(n(/*! ./control/playbackRate.js */"./src/control/playbackRate.js")),h=M(n(/*! ./control/play.js */"./src/control/play.js")),g=M(n(/*! ./control/pip.js */"./src/control/pip.js")),v=M(n(/*! ./control/pc.js */"./src/control/pc.js")),m=M(n(/*! ./control/mobile.js */"./src/control/mobile.js")),y=M(n(/*! ./control/logger.js */"./src/control/logger.js")),b=M(n(/*! ./control/localPreview.js */"./src/control/localPreview.js")),x=M(n(/*! ./control/loading.js */"./src/control/loading.js")),w=M(n(/*! ./control/i18n.js */"./src/control/i18n.js")),_=M(n(/*! ./control/fullscreen.js */"./src/control/fullscreen.js")),k=M(n(/*! ./control/flex.js */"./src/control/flex.js")),E=M(n(/*! ./control/error.js */"./src/control/error.js")),C=M(n(/*! ./control/download.js */"./src/control/download.js")),S=M(n(/*! ./control/definition.js */"./src/control/definition.js")),P=M(n(/*! ./control/danmu.js */"./src/control/danmu.js")),j=M(n(/*! ./control/cssFullscreen.js */"./src/control/cssFullscreen.js")),T=M(n(/*! ./control/collect.js */"./src/control/collect.js"));function M(e){return e&&e.__esModule?e:{default:e}}n(/*! ./style/index.scss */"./src/style/index.scss");var O={};function L(e,t,n){var o=e;t.map((function(e,r){o[e]=r==t.length-1?n:o[e]||{},o=o[e]}))}L(O,["control","collect"],T.default),L(O,["control","cssFullscreen"],j.default),L(O,["control","danmu"],P.default),L(O,["control","definition"],S.default),L(O,["control","download"],C.default),L(O,["control","error"],E.default),L(O,["control","flex"],k.default),L(O,["control","fullscreen"],_.default),L(O,["control","i18n"],w.default),L(O,["control","loading"],x.default),L(O,["control","localPreview"],b.default),L(O,["control","logger"],y.default),L(O,["control","mobile"],m.default),L(O,["control","pc"],v.default),L(O,["control","pip"],g.default),L(O,["control","play"],h.default),L(O,["control","playbackRate"],f.default),L(O,["control","playNext"],p.default),L(O,["control","poster"],d.default),L(O,["control","progress"],u.default),L(O,["control","replay"],c.default),L(O,["control","rotate"],l.default),L(O,["control","screenShot"],s.default),L(O,["control","textTrack"],a.default),L(O,["control","time"],i.default),L(O,["control","volume"],r.default),t.default=o.default,e.exports=t.default},"./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=function e(t,n,o){null===t&&(t=Function.prototype);var r=Object.getOwnPropertyDescriptor(t,n);if(void 0===r){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,o)}if("value"in r)return r.value;var a=r.get;return void 0!==a?a.call(o):void 0},i=p(n(/*! ./proxy */"./src/proxy.js")),a=p(n(/*! ./utils/util */"./src/utils/util.js")),s=p(n(/*! ./utils/database */"./src/utils/database.js")),l=p(n(/*! ./utils/sniffer */"./src/utils/sniffer.js")),c=p(n(/*! ./error */"./src/error.js")),u=p(n(/*! draggabilly */"./node_modules/draggabilly/draggabilly.js")),d=n(/*! ../package.json */"./package.json");function p(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=f(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));if(n.config=a.default.deepCopy({width:600,height:337.5,ignores:[],whitelist:[],lang:(document.documentElement.getAttribute("lang")||navigator.language||"zh-cn").toLocaleLowerCase(),inactive:3e3,volume:.6,controls:!0,controlsList:["nodownload"]},e),n.version=d.version,n.userTimer=null,n.waitTimer=null,n.database=new s.default,n.history=[],n.isProgressMoving=!1,n.root=a.default.findDom(document,"#"+n.config.id),n.controls=a.default.createDom("xg-controls","",{unselectable:"on",onselectstart:"return false"},"xgplayer-controls"),!n.root){var o=n.config.el;if(!o||1!==o.nodeType)return n.emit("error",new c.default("use",n.config.vid,{line:32,handle:"Constructor",msg:"container id can't be empty"})),!1,f(n,!1);n.root=o}if(a.default.addClass(n.root,"xgplayer xgplayer-"+l.default.device+" xgplayer-nostart "+(n.config.controls?"":"no-controls")),n.root.appendChild(n.controls),n.config.fluid?(n.root.style["max-width"]="100%",n.root.style.width="100%",n.root.style.height="0",n.root.style["padding-top"]=100*n.config.height/n.config.width+"%",n.video.style.position="absolute",n.video.style.top="0",n.video.style.left="0"):(n.root.style.width=n.config.width+"px",n.root.style.height=n.config.height+"px"),n.config.execBeforePluginsCall&&n.config.execBeforePluginsCall.forEach((function(e){e.call(n,n)})),n.config.controlStyle&&"String"===a.default.typeOf(n.config.controlStyle)){var r=n;fetch(r.config.controlStyle,{method:"GET",headers:{Accept:"application/json"}}).then((function(e){e.ok&&e.json().then((function(e){for(var t in e)e.hasOwnProperty(t)&&(r.config[t]=e[t]);r.pluginsCall()}))})).catch((function(e){console.log("Fetch错误:"+e)}))}else n.pluginsCall();n.ev.forEach((function(e){var t=Object.keys(e)[0],o=n[e[t]];o&&n.on(t,o)})),["focus","blur"].forEach((function(e){n.on(e,n["on"+e.charAt(0).toUpperCase()+e.slice(1)])}));var i=n;return n.mousemoveFunc=function(){i.emit("focus"),i.config.closeFocusVideoFocus||i.video.focus()},n.root.addEventListener("mousemove",n.mousemoveFunc),n.playFunc=function(){i.emit("focus"),i.config.closePlayVideoFocus||i.video.focus()},i.once("play",n.playFunc),setTimeout((function(){n.emit("ready")}),0),n.config.keyShortcut&&"on"!==n.config.keyShortcut||["video","controls"].forEach((function(e){i[e].addEventListener("keydown",(function(e){i.onKeydown(e,i)}))})),n.config.videoInit&&a.default.hasClass(n.root,"xgplayer-nostart")&&n.start(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"start",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.config.url,o=this.root,r=this;n&&""!==n||this.emit("urlNull"),this.logParams.playSrc=n,this.canPlayFunc=function(){var e=r.video.play();void 0!==e&&e&&e.then((function(){r.emit("autoplay started")})).catch((function(){r.emit("autoplay was prevented"),t.util.addClass(r.root,"xgplayer-is-autoplay")})),r.off("canplay",r.canPlayFunc)},"String"===a.default.typeOf(n)?this.video.src=n:n.forEach((function(t){e.video.appendChild(a.default.createDom("source","",{src:""+t.src,type:""+(t.type||"")}))})),this.logParams.pt=(new Date).getTime(),this.logParams.vt=this.logParams.pt,this.loadeddataFunc=function(){r.logParams.vt=(new Date).getTime(),r.logParams.pt>r.logParams.vt&&(r.logParams.pt=r.logParams.vt),r.logParams.vd=r.video.duration},this.once("loadeddata",this.loadeddataFunc),this.config.autoplay&&this.on("canplay",this.canPlayFunc),o.insertBefore(this.video,o.firstChild),setTimeout((function(){e.emit("complete")}),1)}},{key:"reload",value:function(){this.video.load(),this.reloadFunc=function(){this.play()},this.once("loadeddata",this.reloadFunc)}},{key:"destroy",value:function(){var e=this,n=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],o=this,i=this.root.parentNode;for(var a in clearInterval(this.bulletResizeTimer),this._interval)clearInterval(this._interval[a]),this._interval[a]=null;function s(){for(var e in this.emit("destroy"),this.video.removeAttribute("src"),this.video.load(),n&&i.removeChild(this.root),this)delete this[e];this.off("pause",s)}this.ev.forEach((function(t){var n=Object.keys(t)[0],o=e[t[n]];o&&e.off(n,o)})),this.loadeddataFunc&&this.off("loadeddata",this.loadeddataFunc),this.reloadFunc&&this.off("loadeddata",this.reloadFunc),this.replayFunc&&this.off("play",this.replayFunc),this.playFunc&&this.off("play",this.playFunc),["focus","blur"].forEach((function(t){e.off(t,e["on"+t.charAt(0).toUpperCase()+t.slice(1)])})),this.config.keyShortcut&&"on"!==this.config.keyShortcut||["video","controls"].forEach((function(t){e[t]&&e[t].removeEventListener("keydown",(function(e){o.onKeydown(e,o)}))})),this.paused?s.call(this):(this.pause(),this.once("pause",s)),r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"destroy",this).call(this)}},{key:"replay",value:function(){var e=this,t=this._replay;a.default.removeClass(this.root,"xgplayer-ended"),this.logParams={bc:0,bu_acu_t:0,played:[],pt:(new Date).getTime(),vt:(new Date).getTime(),vd:0},this.logParams.pt=(new Date).getTime(),this.logParams.vt=this.logParams.pt,this.replayFunc=function(){e.logParams.vt=(new Date).getTime(),e.logParams.pt>e.logParams.vt&&(e.logParams.pt=e.logParams.vt),e.logParams.vd=e.video.duration},this.once("play",this.replayFunc),this.logParams.playSrc=this.video.currentSrc,t&&t instanceof Function?t():(this.currentTime=0,this.play())}},{key:"pluginsCall",value:function(){var e=this,n=this;if(t.plugins){var o=this.config.ignores;Object.keys(t.plugins).forEach((function(r){var i=t.plugins[r];o.some((function(e){return r===e}))||(["pc","tablet","mobile"].some((function(e){return e===r}))?r===l.default.device&&setTimeout((function(){i.call(n,n)}),0):i.call(e,e))}))}}},{key:"getPIP",value:function(){var e=this.root.getBoundingClientRect(),t=e.top,n=e.left,o=a.default.createDom("xg-pip-lay","<div></div>",{},"xgplayer-pip-lay");this.root.appendChild(o);var r=a.default.createDom("xg-pip-drag",'<div class="drag-handle"><span>点击按住可拖动视频</span></div>',{tabindex:9},"xgplayer-pip-drag");this.root.appendChild(r);new u.default(".xgplayer",{handle:".drag-handle"});a.default.addClass(this.root,"xgplayer-pip-active"),this.root.style.right=0,this.root.style.bottom="200px",this.root.style.top="",this.root.style.left="",this.config.fluid&&(this.root.style["padding-top"]="");var i=this;["click","touchstart"].forEach((function(e){o.addEventListener(e,(function(e){e.preventDefault(),e.stopPropagation(),i.exitPIP(),i.root.style.top=t+"px",i.root.style.left=n+"px"}))}))}},{key:"exitPIP",value:function(){a.default.removeClass(this.root,"xgplayer-pip-active"),this.root.style.right="",this.root.style.bottom="",this.root.style.top="",this.root.style.left="",this.config.fluid&&(this.root.style["padding-top"]=100*this.config.height/this.config.width+"%")}},{key:"onFocus",value:function(){var e=this;a.default.removeClass(this.root,"xgplayer-inactive"),e.userTimer&&clearTimeout(e.userTimer),e.userTimer=setTimeout((function(){e.emit("blur")}),e.config.inactive)}},{key:"onBlur",value:function(){this.paused||this.ended||a.default.addClass(this.root,"xgplayer-inactive")}},{key:"onPlay",value:function(){a.default.addClass(this.root,"xgplayer-playing"),a.default.removeClass(this.root,"xgplayer-pause")}},{key:"onPause",value:function(){a.default.addClass(this.root,"xgplayer-pause"),this.userTimer&&clearTimeout(this.userTimer),this.emit("focus")}},{key:"onEnded",value:function(){a.default.addClass(this.root,"xgplayer-ended"),a.default.removeClass(this.root,"xgplayer-playing")}},{key:"onSeeking",value:function(){}},{key:"onSeeked",value:function(){this.waitTimer&&clearTimeout(this.waitTimer),a.default.removeClass(this.root,"xgplayer-isloading")}},{key:"onWaiting",value:function(){var e=this;e.waitTimer&&clearTimeout(e.waitTimer),e.waitTimer=setTimeout((function(){a.default.addClass(e.root,"xgplayer-isloading")}),500)}},{key:"onPlaying",value:function(){this.waitTimer&&clearTimeout(this.waitTimer),a.default.removeClass(this.root,"xgplayer-isloading xgplayer-nostart xgplayer-pause xgplayer-ended xgplayer-is-error xgplayer-replay"),a.default.addClass(this.root,"xgplayer-playing")}},{key:"onKeydown",value:function(e,t){var n=e||window.event;if(!n||37!==n.keyCode&&38!==n.keyCode&&39!==n.keyCode&&40!==n.keyCode&&32!==n.keyCode||t.emit("focus"),!n||40!==n.keyCode&&38!==n.keyCode)n&&39===n.keyCode?t.currentTime+10<=t.duration?t.currentTime+=10:t.currentTime=t.duration-1:n&&37===n.keyCode?t.currentTime-10>=0?t.currentTime-=10:t.currentTime=0:n&&32===n.keyCode&&(t.paused?t.play():t.pause());else{if(t.controls){var o=t.controls.querySelector(".xgplayer-slider");o&&(a.default.hasClass(o,"xgplayer-none")&&a.default.removeClass(o,"xgplayer-none"),t.sliderTimer&&clearTimeout(t.sliderTimer),t.sliderTimer=setTimeout((function(){a.default.addClass(o,"xgplayer-none")}),t.config.inactive))}n&&40===n.keyCode?t.volume-.1>=0?t.volume-=.1:t.volume=0:n&&38===n.keyCode&&(t.volume+.1<=1?t.volume+=.1:t.volume=1)}}}],[{key:"install",value:function(e,n){t.plugins||(t.plugins={}),t.plugins[e]=n}}]),t}(i.default);h.util=a.default,h.sniffer=l.default,h.Errors=c.default,t.default=h,e.exports=t.default},"./src/proxy.js":
/*!**********************!*\
  !*** ./src/proxy.js ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=s(n(/*! event-emitter */"./node_modules/event-emitter/index.js")),i=s(n(/*! ./utils/util */"./src/utils/util.js")),a=s(n(/*! ./error */"./src/error.js"));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.logParams={bc:0,bu_acu_t:0,played:[]},this._hasStart=!1,this.videoConfig={controls:!1,autoplay:t.autoplay,playsinline:t.playsinline,"webkit-playsinline":t.playsinline,"x5-playsinline":t.playsinline,"x5-video-player-type":t["x5-video-player-type"],"x5-video-player-fullscreen":t["x5-video-player-fullscreen"],"x5-video-orientation":t["x5-video-orientation"],airplay:t.airplay,"webkit-airplay":t.airplay,tabindex:2,mediaType:t.mediaType||"video"},t.loop&&(this.videoConfig.loop="loop");var n="";if(t.textTrack&&Array.isArray(t.textTrack)&&(navigator.userAgent.indexOf("Chrome")>-1||navigator.userAgent.indexOf("Firefox")>-1)&&(t.textTrack.some((function(e){if(e.src&&e.label&&e.default)return n+='<track src="'+e.src+'" ',e.kind&&(n+='kind="'+e.kind+'" '),n+='label="'+e.label+'" ',e.srclang&&(n+='srclang="'+e.srclang+'" '),n+=(e.default?"default":"")+">",!0})),this.videoConfig.crossorigin="anonymous"),t.textTrackStyle){var o=document.createElement("style");this.textTrackStyle=o,document.head.appendChild(o);var s="";for(var l in t.textTrackStyle)s+=l+": "+t.textTrackStyle[l]+";";var c=t.id?"#"+t.id:t.el.id?"#"+t.el.id:"."+t.el.className;o.sheet.insertRule?o.sheet.insertRule(c+" video::cue { "+s+" }",0):o.sheet.addRule&&o.sheet.addRule(c+" video::cue",s)}this.video=i.default.createDom(this.videoConfig.mediaType,n,this.videoConfig,""),t.autoplay&&(this.video.autoplay=!0,t.autoplayMuted&&(this.video.muted=!0)),this.ev=["play","playing","pause","ended","error","seeking","seeked","timeupdate","waiting","canplay","canplaythrough","durationchange","volumechange","loadeddata"].map((function(e){return t={},n=e,o="on"+e.charAt(0).toUpperCase()+e.slice(1),n in t?Object.defineProperty(t,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[n]=o,t;var t,n,o})),(0,r.default)(this),this._interval={};var u="0,0",d=this;this.ev.forEach((function(e){d.evItem=Object.keys(e)[0];var t=Object.keys(e)[0];d.video.addEventListener(Object.keys(e)[0],(function(){d.logParams&&("play"===t?d.hasStart=!0:"waiting"===t?(d.logParams.bc++,d.inWaitingStart=(new Date).getTime()):"playing"===t?d.inWaitingStart&&(d.logParams.bu_acu_t+=(new Date).getTime()-d.inWaitingStart,d.inWaitingStart=void 0):"loadeddata"===t?d.logParams.played.push({begin:0,end:-1}):"seeking"===t?d.logParams.played.push({begin:d.video.currentTime,end:-1}):d&&d.logParams&&d.logParams.played&&"timeupdate"===t&&(d.logParams.played.length<1&&d.logParams.played.push({begin:d.video.currentTime,end:-1}),d.logParams.played[d.logParams.played.length-1].end=d.video.currentTime),"error"===t?d.video.error&&d.emit(t,new a.default("other",d.currentTime,d.duration,d.networkState,d.readyState,d.currentSrc,d.src,d.ended,{line:41,msg:d.error,handle:"Constructor"})):d.emit(t,d),d.hasOwnProperty("_interval")&&(["ended","error","timeupdate"].indexOf(t)<0?(clearInterval(d._interval.bufferedChange),i.default.setInterval(d,"bufferedChange",(function(){for(var e=[],t=0,n=d.video.buffered.length;t<n;t++)e.push([d.video.buffered.start(t),d.video.buffered.end(t)]);e.toString()!==u&&(u=e.toString(),d.emit("bufferedChange",e))}),200)):"timeupdate"!==t&&i.default.clearInterval(d,"bufferedChange")))}),!1)}))}return o(e,[{key:"destroy",value:function(){this.textTrackStyle&&this.textTrackStyle.parentNode.removeChild(this.textTrackStyle)}},{key:"play",value:function(){this.video.play()}},{key:"pause",value:function(){this.video.pause()}},{key:"canPlayType",value:function(){this.video.canPlayType()}},{key:"getBufferedRange",value:function(){var e=[0,0],t=this.video,n=t.buffered,o=t.currentTime;if(n)for(var r=0,i=n.length;r<i&&(e[0]=n.start(r),e[1]=n.end(r),!(e[0]<=o&&o<=e[1]));r++);return e[0]-o<=0&&o-e[1]<=0?e:[0,0]}},{key:"hasStart",get:function(){return this._hasStart},set:function(e){"boolean"!=typeof e||!0!==e||this._hasStart||(this._hasStart=!0,this.emit("hasstart"))}},{key:"autoplay",set:function(e){this.video.autoplay=e},get:function(){return this.video.autoplay}},{key:"buffered",get:function(){return this.video.buffered}},{key:"crossOrigin",get:function(){return this.video.crossOrigin},set:function(e){this.video.crossOrigin=e}},{key:"currentSrc",get:function(){return this.video.currentSrc},set:function(e){this.video.currentSrc=e}},{key:"currentTime",get:function(){return this.video.currentTime},set:function(e){this.video.currentTime=e}},{key:"defaultMuted",get:function(){return this.video.defaultMuted},set:function(e){this.video.defaultMuted=e}},{key:"duration",get:function(){return this.video.duration}},{key:"ended",get:function(){return this.video.ended}},{key:"error",get:function(){var e=this.video.error;if(!e)return null;var t=[{en:"MEDIA_ERR_ABORTED",cn:"取回过程被用户中止"},{en:"MEDIA_ERR_NETWORK",cn:"当下载时发生错误"},{en:"MEDIA_ERR_DECODE",cn:"当解码时发生错误"},{en:"MEDIA_ERR_SRC_NOT_SUPPORTED",cn:"不支持音频/视频"}];return this.lang?this.lang[t[e.code-1].en]:t[e.code-1].en}},{key:"loop",get:function(){return this.video.loop},set:function(e){this.video.loop=e}},{key:"muted",get:function(){return this.video.muted},set:function(e){this.video.muted=e}},{key:"networkState",get:function(){var e=[{en:"NETWORK_EMPTY",cn:"音频/视频尚未初始化"},{en:"NETWORK_IDLE",cn:"音频/视频是活动的且已选取资源，但并未使用网络"},{en:"NETWORK_LOADING",cn:"浏览器正在下载数据"},{en:"NETWORK_NO_SOURCE",cn:"未找到音频/视频来源"}];return this.lang?this.lang[e[this.video.networkState].en]:e[this.video.networkState].en}},{key:"paused",get:function(){return this.video.paused}},{key:"playbackRate",get:function(){return this.video.playbackRate},set:function(e){this.video.playbackRate=e}},{key:"played",get:function(){return this.video.played}},{key:"preload",get:function(){return this.video.preload},set:function(e){this.video.preload=e}},{key:"readyState",get:function(){var e=[{en:"HAVE_NOTHING",cn:"没有关于音频/视频是否就绪的信息"},{en:"HAVE_METADATA",cn:"关于音频/视频就绪的元数据"},{en:"HAVE_CURRENT_DATA",cn:"关于当前播放位置的数据是可用的，但没有足够的数据来播放下一帧/毫秒"},{en:"HAVE_FUTURE_DATA",cn:"当前及至少下一帧的数据是可用的"},{en:"HAVE_ENOUGH_DATA",cn:"可用数据足以开始播放"}];return this.lang?this.lang[e[this.video.readyState].en]:e[this.video.readyState]}},{key:"seekable",get:function(){return this.video.seekable}},{key:"seeking",get:function(){return this.video.seeking}},{key:"src",get:function(){return this.video.src},set:function(e){var t=this;i.default.hasClass(this.root,"xgplayer-ended")||this.emit("urlchange",JSON.parse(JSON.stringify(t.logParams))),this.logParams={bc:0,bu_acu_t:0,played:[],pt:(new Date).getTime(),vt:(new Date).getTime(),vd:0},this.video.pause(),this.video.src=e,this.logParams.playSrc=e,this.logParams.pt=(new Date).getTime(),this.logParams.vt=this.logParams.pt,this.once("loadeddata",(function e(){t.logParams.vt=(new Date).getTime(),t.logParams.pt>t.logParams.vt&&(t.logParams.pt=t.logParams.vt),t.logParams.vd=t.video.duration,t.off("loadeddata",e)}))}},{key:"volume",get:function(){return this.video.volume},set:function(e){this.video.volume=e}},{key:"fullscreen",get:function(){return i.default.hasClass(this.root,"xgplayer-is-fullscreen")||i.default.hasClass(this.root,"xgplayer-fullscreen-active")}},{key:"bullet",get:function(){return!!i.default.findDom(this.root,"xg-bullet")&&i.default.hasClass(i.default.findDom(this.root,"xg-bullet"),"xgplayer-has-bullet")}},{key:"textTrack",get:function(){return i.default.hasClass(this.root,"xgplayer-is-textTrack")}},{key:"pip",get:function(){return i.default.hasClass(this.root,"xgplayer-pip-active")}}]),e}();t.default=l,e.exports=t.default},"./src/style/index.scss":
/*!******************************!*\
  !*** ./src/style/index.scss ***!
  \******************************/
/*! no static exports found */function(e,t,n){var o=n(/*! !../../node_modules/css-loader??ref--5-1!../../node_modules/postcss-loader/lib!../../node_modules/sass-loader/lib/loader.js!./index.scss */"./node_modules/css-loader/index.js?!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/style/index.scss");"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(o,r);o.locals&&(e.exports=o.locals)},"./src/utils/animation.js":
/*!********************************!*\
  !*** ./src/utils/animation.js ***!
  \********************************/
/*! no static exports found */function(e,t,n){"use strict";!function(){for(var e=0,t=["webkit","moz"],n=0;n<t.length&&!window.requestAnimationFrame;++n)window.requestAnimationFrame=window[t[n]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[t[n]+"CancelAnimationFrame"]||window[t[n]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t,n){var o=(new Date).getTime(),r=Math.max(0,16-(o-e)),i=window.setTimeout((function(){t(o+r)}),r);return e=o+r,i}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(e){clearTimeout(e)})}()},"./src/utils/database.js":
/*!*******************************!*\
  !*** ./src/utils/database.js ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();var r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{name:"xgplayer",version:1,db:null,ojstore:{name:"xg-m4a",keypath:"vid"}};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.indexedDB=window.indexedDB||window.webkitindexedDB,this.IDBKeyRange=window.IDBKeyRange||window.webkitIDBKeyRange,this.myDB=t}return o(e,[{key:"openDB",value:function(e){var t=this,n=this,o=this.myDB.version||1,r=n.indexedDB.open(n.myDB.name,o);r.onerror=function(e){},r.onsuccess=function(o){t.myDB.db=o.target.result,e.call(n)},r.onupgradeneeded=function(e){var t=e.target.result;e.target.transaction;t.objectStoreNames.contains(n.myDB.ojstore.name)||t.createObjectStore(n.myDB.ojstore.name,{keyPath:n.myDB.ojstore.keypath})}}},{key:"deletedb",value:function(){this.indexedDB.deleteDatabase(this.myDB.name)}},{key:"closeDB",value:function(){this.myDB.db.close()}},{key:"addData",value:function(e,t){for(var n=this.myDB.db.transaction(e,"readwrite").objectStore(e),o=void 0,r=0;r<t.length;r++)(o=n.add(t[r])).onerror=function(){},o.onsuccess=function(){}}},{key:"putData",value:function(e,t){for(var n=this.myDB.db.transaction(e,"readwrite").objectStore(e),o=void 0,r=0;r<t.length;r++)(o=n.put(t[r])).onerror=function(){},o.onsuccess=function(){}}},{key:"getDataByKey",value:function(e,t,n){var o=this,r=this.myDB.db.transaction(e,"readwrite").objectStore(e).get(t);r.onerror=function(){n.call(o,null)},r.onsuccess=function(e){var t=e.target.result;n.call(o,t)}}},{key:"deleteData",value:function(e,t){this.myDB.db.transaction(e,"readwrite").objectStore(e).delete(t)}},{key:"clearData",value:function(e){this.myDB.db.transaction(e,"readwrite").objectStore(e).clear()}}]),e}();t.default=r,e.exports=t.default},"./src/utils/sniffer.js":
/*!******************************!*\
  !*** ./src/utils/sniffer.js ***!
  \******************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o={get device(){return o.os.isPc?"pc":"mobile"},get browser(){var e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter((function(n){return t[n].test(e)})))[0]},get os(){var e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),n=/(?:SymbianOS)/.test(e)||t,o=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),i=/(?:iPad|PlayBook)/.test(e)||o&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),a=/(?:iPhone)/.test(e)&&!i;return{isTablet:i,isPhone:a,isAndroid:o,isPc:!(a||o||n||i),isSymbian:n,isWindowsPhone:t,isFireFox:r}}};t.default=o,e.exports=t.default},"./src/utils/svg.js":
/*!**************************!*\
  !*** ./src/utils/svg.js ***!
  \**************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=n(/*! pasition */"./node_modules/pasition/dist/pasition.js"),a=(o=i)&&o.__esModule?o:{default:o};n(/*! ./animation */"./src/utils/animation.js");var s=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.from=t.from,this.to=t.to,this.easing=t.easing||function(e){return e*e},this.duration=t.duration||150,this.curPath="",this.progress=t.progress,this.state=0}return r(e,[{key:"animate",value:function(){var e=this,t=new Date,n=e.duration,o=null,r=e.path2shapes(e.from),i=e.path2shapes(e.to),a=e._preprocessing(r,i);e.state=1;!function r(){var s=new Date-t;if(s>=n||2===e.state)return o=i,e.progress(o,1),window.cancelAnimationFrame(e.tickId),void(e.state=0);var l=e.easing(s/n);o=e._lerp(a[0],a[1],l),e.progress(o,l),e.tickId=window.requestAnimationFrame(r)}()}},{key:"toSVGString",value:function(e){return e.map((function(e){return e.forEach((function(e,t){t?e.splice(0,2,"C"):(e.splice(2,0,"C"),e.unshift("M"))})),e.map((function(e){return e.join(" ")})).join("")})).join("")}},{key:"start",value:function(){this.animate()}},{key:"stop",value:function(){0!==this.state&&(this.state=2),window.cancelAnimationFrame(self.tickId),this.state=0}},{key:"reverse",value:function(){0!==this.state&&this.stop();var e=this.from;this.from=this.to,this.to=e,this.animate()}},{key:"reset",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.from;0!==this.state&&this.stop(),this.from=t,this.to=e,this.animate()}}]),e}();for(var l in a.default)a.default[l]instanceof Function&&!s.prototype[l]&&(s.prototype[l]=a.default[l]);t.default=s,e.exports=t.default},"./src/utils/url.js":
/*!**************************!*\
  !*** ./src/utils/url.js ***!
  \**************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.getAbsoluteURL=function(e){if(!e.match(/^https?:\/\//)){var t=document.createElement("div");t.innerHTML='<a href="'+e+'">x</a>',e=t.firstChild.href}return e}},"./src/utils/util.js":
/*!***************************!*\
  !*** ./src/utils/util.js ***!
  \***************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var util={createDom:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",r=document.createElement(e);return r.className=o,r.innerHTML=t,Object.keys(n).forEach((function(t){var o=t,i=n[t];"video"===e||"audio"===e?i&&r.setAttribute(o,i):r.setAttribute(o,i)})),r},hasClass:function(e,t){return e.classList?Array.prototype.some.call(e.classList,(function(e){return e===t})):!!e.className.match(new RegExp("(\\s|^)"+t+"(\\s|$)"))},addClass:function(e,t){e.classList?t.replace(/(^\s+|\s+$)/g,"").split(/\s+/g).forEach((function(t){t&&e.classList.add(t)})):util.hasClass(e,t)||(e.className+=" "+t)},removeClass:function(e,t){e.classList?t.split(/\s+/g).forEach((function(t){e.classList.remove(t)})):util.hasClass(e,t)&&t.split(/\s+/g).forEach((function(t){var n=new RegExp("(\\s|^)"+t+"(\\s|$)");e.className=e.className.replace(n," ")}))},toggleClass:function(e,t){t.split(/\s+/g).forEach((function(t){util.hasClass(e,t)?util.removeClass(e,t):util.addClass(e,t)}))},findDom:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,t=arguments[1],n=void 0;try{n=e.querySelector(t)}catch(o){t.startsWith("#")&&(n=e.getElementById(t.slice(1)))}return n},padStart:function(e,t,n){for(var o=String(n),r=t>>0,i=Math.ceil(r/o.length),a=[],s=String(e);i--;)a.push(o);return a.join("").substring(0,r-s.length)+s},format:function(e){if(window.isNaN(e))return"";var t=util.padStart(Math.floor(e/3600),2,0),n=util.padStart(Math.floor((e-3600*t)/60),2,0),o=util.padStart(Math.floor(e-3600*t-60*n),2,0);return("00"===t?[n,o]:[t,n,o]).join(":")},event:function(e){if(e.touches){var t=e.touches[0]||e.changedTouches[0];e.clientX=t.clientX||0,e.clientY=t.clientY||0,e.offsetX=t.pageX-t.target.offsetLeft,e.offsetY=t.pageY-t.target.offsetTop}e._target=e.target||e.srcElement},typeOf:function(e){return Object.prototype.toString.call(e).match(/([^\s.*]+)(?=]$)/g)[0]},deepCopy:function(e,t){if("Object"===util.typeOf(t)&&"Object"===util.typeOf(e))return Object.keys(t).forEach((function(n){"Object"!==util.typeOf(t[n])||t[n]instanceof Node?"Array"===util.typeOf(t[n])?e[n]="Array"===util.typeOf(e[n])?e[n].concat(t[n]):t[n]:e[n]=t[n]:e[n]?util.deepCopy(e[n],t[n]):e[n]=t[n]})),e},getBgImage:function(e){var t=(e.currentStyle||window.getComputedStyle(e,null)).backgroundImage;if(!t||"none"===t)return"";var n=document.createElement("a");return n.href=t.replace(/url\("|"\)/g,""),n.href},copyDom:function(e){if(e&&1===e.nodeType){var t=document.createElement(e.tagName);return Array.prototype.forEach.call(e.attributes,(function(e){t.setAttribute(e.name,e.value)})),e.innerHTML&&(t.innerHTML=e.innerHTML),t}return""},setInterval:function(e,t,n,o){e._interval[t]||(e._interval[t]=setInterval(n.bind(e),o))},clearInterval:function(e,t){clearInterval(e._interval[t]),e._interval[t]=null},createImgBtn:function(e,t,n,o){var r=util.createDom("xg-"+e,"",{},"xgplayer-"+e+"-img");if(r.style.backgroundImage='url("'+t+'")',n&&o){var i=void 0,a=void 0,s=void 0;["px","rem","em","pt","dp","vw","vh","vm","%"].every((function(e){return!(n.indexOf(e)>-1&&o.indexOf(e)>-1)||(i=parseFloat(n.slice(0,n.indexOf(e)).trim()),a=parseFloat(o.slice(0,o.indexOf(e)).trim()),s=e,!1)})),r.style.width=""+i+s,r.style.height=""+a+s,r.style.backgroundSize=""+i+s+" "+a+s,r.style.margin="start"===e?"-"+a/2+s+" auto auto -"+i/2+s:"auto 5px auto 5px"}return r},Hex2RGBA:function(hex,alpha){var rgb=[];if(/^\#[0-9A-F]{3}$/i.test(hex)){var sixHex="#";hex.replace(/[0-9A-F]/gi,(function(e){sixHex+=e+e})),hex=sixHex}return/^#[0-9A-F]{6}$/i.test(hex)?(hex.replace(/[0-9A-F]{2}/gi,(function(kw){rgb.push(eval("0x"+kw))})),"rgba("+rgb.join(",")+", "+alpha+")"):"rgba(255, 255, 255, 0.1)"}};exports.default=util,module.exports=exports.default},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./src/index.js */"./src/index.js")}})}));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./src/flv-live.js":
/*!*************************!*\
  !*** ./src/flv-live.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FlvController; });
/* harmony import */ var xgplayer_remux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer-remux */ "../xgplayer-remux/index.js");
/* harmony import */ var xgplayer_remux__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer_remux__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-loader */ "../xgplayer-loader/index.js");
/* harmony import */ var xgplayer_loader__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_loader__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var xgplayer_demux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xgplayer-demux */ "../xgplayer-demux/index.js");
/* harmony import */ var xgplayer_demux__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xgplayer_demux__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xgplayer-buffer */ "../xgplayer-buffer/index.js");
/* harmony import */ var xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xgplayer-codec */ "../xgplayer-codec/index.js");
/* harmony import */ var xgplayer_codec__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(xgplayer_codec__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! xgplayer */ "../xgplayer/dist/index.js");
/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(xgplayer__WEBPACK_IMPORTED_MODULE_6__);








const REMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].REMUX_EVENTS;
const DEMUX_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].DEMUX_EVENTS;
const LOADER_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].LOADER_EVENTS
const MSE_EVENTS = xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["EVENTS"].MSE_EVENTS

const Tag = 'FLVController'

class Logger {
  warn () {}
}

class FlvController {
  constructor (player) {
    this.TAG = Tag
    this._player = player

    this.state = {
      initSegmentArrived: false
    }
  }

  init () {
    this._context.registry('FETCH_LOADER', xgplayer_loader__WEBPACK_IMPORTED_MODULE_1__["FetchLoader"])
    this._context.registry('LOADER_BUFFER', xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__["XgBuffer"])

    this._context.registry('FLV_DEMUXER', xgplayer_demux__WEBPACK_IMPORTED_MODULE_2__["FlvDemuxer"])
    this._context.registry('TRACKS', xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__["Tracks"])

    this._context.registry('MP4_REMUXER', xgplayer_remux__WEBPACK_IMPORTED_MODULE_0___default.a.Mp4Remuxer)
    this._context.registry('PRE_SOURCE_BUFFER', xgplayer_buffer__WEBPACK_IMPORTED_MODULE_3__["PreSource"])

    this._context.registry('COMPATIBILITY', xgplayer_codec__WEBPACK_IMPORTED_MODULE_5__["Compatibility"])

    this._context.registry('LOGGER', Logger)
    this.mse = this._context.registry('MSE', xgplayer_utils__WEBPACK_IMPORTED_MODULE_4__["Mse"])({ container: this._player.video })

    this.initListeners()
  }

  initListeners () {
    this.on(LOADER_EVENTS.LOADER_DATALOADED, this._handleLoaderDataLoaded.bind(this))
    this.on(LOADER_EVENTS.LOADER_ERROR, this._handleNetworkError.bind(this))

    this.on(DEMUX_EVENTS.MEDIA_INFO, this._handleMediaInfo.bind(this))
    this.on(DEMUX_EVENTS.METADATA_PARSED, this._handleMetadataParsed.bind(this))
    this.on(DEMUX_EVENTS.DEMUX_COMPLETE, this._handleDemuxComplete.bind(this))
    this.on(DEMUX_EVENTS.DEMUX_ERROR, this._handleDemuxError.bind(this))

    this.on(REMUX_EVENTS.INIT_SEGMENT, this._handleAppendInitSegment.bind(this))
    this.on(REMUX_EVENTS.MEDIA_SEGMENT, this._handleMediaSegment.bind(this))

    this.on(MSE_EVENTS.SOURCE_UPDATE_END, this._handleSourceUpdateEnd.bind(this))

    this._player.on('timeupdate', this._handleTimeUpdate.bind(this))
  }

  _handleMediaInfo () {
    if (!this._context.mediaInfo) {
      this.emit(DEMUX_EVENTS.DEMUX_ERROR, new Error('failed to get mediainfo'))
    }
  }

  _handleLoaderDataLoaded () {
    this.emitTo('FLV_DEMUXER', DEMUX_EVENTS.DEMUX_START)
  }

  _handleMetadataParsed (type) {
    this.emit(REMUX_EVENTS.REMUX_METADATA, type)
  }
  _handleDemuxComplete () {
    this.emit(REMUX_EVENTS.REMUX_MEDIA)
  }

  _handleAppendInitSegment () {
    this.state.initSegmentArrived = true
    this.mse.addSourceBuffers()
  }

  _handleMediaSegment () {
    this.mse.addSourceBuffers()
    this.mse.doAppend();
  }

  _handleSourceUpdateEnd () {
    const time = this._player.currentTime;
    const video = this._player.video;
    const preloadTime = this._player.config.preloadTime || 5

    const { length } = video.buffered;

    if (length === 0) {
      return;
    }

    const bufferEnd = video.buffered.end(length - 1);
    if (bufferEnd - time > preloadTime * 2) {
      this._player.currentTime = bufferEnd - preloadTime
    }
  }

  _handleTimeUpdate () {
    const time = this._player.currentTime
    if (time > 2) {
      // 在直播时及时清空buffer，降低直播内存占用
      this.mse.remove(time - 2)
    }
  }

  _handleNetworkError () {
    this._player.emit('error', new xgplayer__WEBPACK_IMPORTED_MODULE_6___default.a.Errors('network', this._player.config.url))
  }

  _handleDemuxError() {
    this._player.emit('error', new xgplayer__WEBPACK_IMPORTED_MODULE_6___default.a.Errors('parse', this._player.config.url))
  }

  seek () {
    if (!this.state.initSegmentArrived) {
      this.loadData()
    }
  }

  loadData () {
    this.emit(LOADER_EVENTS.LADER_START, this._player.config.url)
  }

  pause () {
    const loader = this._context.getInstance('FETCH_LOADER')

    if (loader) {
      loader.cancel()
    }
  }
}


/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xgplayer */ "../xgplayer/dist/index.js");
/* harmony import */ var xgplayer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xgplayer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xgplayer-utils */ "../xgplayer-utils/index.js");
/* harmony import */ var xgplayer_utils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _flv_live__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./flv-live */ "./src/flv-live.js");



const flvAllowedEvents = xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["EVENTS"].FlvAllowedEvents;

class FlvPlayer extends xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a {
  constructor (config) {
    super(config)
    this.context = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["Context"](flvAllowedEvents)
    this.initEvents()
    // const preloadTime = player.config.preloadTime || 15
  }

  start () {
    this.initFlv()
    this.context.init()
    super.start(this.flv.mse.url)
  }

  initFlvEvents (flv) {
    const player = this;
    flv.once(xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["EVENTS"].REMUX_EVENTS.INIT_SEGMENT, () => {
      xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a.util.addClass(player.root, 'xgplayer-is-live')
      if (!xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a.util.findDom(this.root, 'xg-live')) {
        const live = xgplayer__WEBPACK_IMPORTED_MODULE_0___default.a.util.createDom('xg-live', '正在直播', {}, 'xgplayer-live')
        player.controls.appendChild(live)
      }
    })

    flv.once(xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["EVENTS"].LOADER_EVENTS.LOADER_COMPLETE, () => {
      // 直播完成，待播放器播完缓存后发送关闭事件
      if (!player.paused) {
        const timer = setInterval(() => {
          const end = player.getBufferedRange()[1]
          if (Math.abs(player.currentTime - end) < 0.5) {
            player.emit('ended')
            window.clearInterval(timer)
          }
        }, 200)
      }
    })
  }

  initEvents () {
    this.on('timeupdate', () => {
      this.loadData()
    })

    this.on('seeking', () => {
      const time = this.currentTime
      const range = this.getBufferedRange()
      if (time > range[1] || time < range[0]) {
        this.flv.seek(this.currentTime)
      }
    })
  }

  initFlv () {
    const flv = this.context.registry('FLV_CONTROLLER', _flv_live__WEBPACK_IMPORTED_MODULE_2__["default"])(this)
    this.initFlvEvents(flv)
    this.flv = flv
  }

  play () {
    if (this._hasStart) {
      this._destroy()
      this.context = new xgplayer_utils__WEBPACK_IMPORTED_MODULE_1__["Context"](flvAllowedEvents)
      const flv = this.context.registry('FLV_CONTROLLER', _flv_live__WEBPACK_IMPORTED_MODULE_2__["default"])(this)
      this.initFlvEvents(flv)
      this.flv = flv
      this.context.init()
      super.start(flv.mse.url)
      super.play()
    } else {
      super.play()
    }
  }

  pause () {
    super.pause()
    if (this.flv) {
      this.flv.pause()
    }
  }

  loadData (time = this.currentTime) {
    if (this.flv) {
      this.flv.seek(time)
    }
  }

  destroy () {
    this._destroy()
    super.destroy();
  }

  _destroy () {
    this.context.destroy()
    this.flv = null
    this.context = null
  }

  get src () {
    return this.currentSrc
  }

  set src (url) {
    this.player.config.url = url
    if (!this.paused) {
      this.pause()
      this.once('pause', () => {
        this.start(url)
      })
      this.once('canplay', () => {
        this.play()
      })
    } else {
      this.start(url)
    }
    this.once('canplay', () => {
      this.currentTime = 0
    })
  }
}

module.exports = FlvPlayer

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ "../../node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9qaWFuZ3l1cWluZy9EZXNrdG9wL1Byb2plY3RzL3hncGxheWVyL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci1idWZmZXIvc3JjL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItYnVmZmVyL3NyYy9wcmVzb3VjZS5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItYnVmZmVyL3NyYy90cmFjay5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItY29kZWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWNvZGVjL3NyYy9hYWMvYWFjLWhlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItY29kZWMvc3JjL2NvbXBhdGliaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWNvZGVjL3NyYy9oMjY0L25hbHVuaXQvZ29sb21iLmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci1jb2RlYy9zcmMvaDI2NC9uYWx1bml0L2luZGV4LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci1jb2RlYy9zcmMvaDI2NC9uYWx1bml0L3Nwcy5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItZGVtdXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWRlbXV4L3NyYy9mbHYvYW1mLXBhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItZGVtdXgvc3JjL2Zsdi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItZGVtdXgvc3JjL2hscy9kZW11eGVyL20zdThwYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLWRlbXV4L3NyYy9obHMvZGVtdXhlci90cy5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItZGVtdXgvc3JjL2hscy9wbGF5bGlzdC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItbG9hZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci1sb2FkZXIvc3JjL2ZldGNoLWxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItcmVtdXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXJlbXV4L3NyYy9tcDQvZm1wNC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItcmVtdXgvc3JjL21wNC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL25vZGVfbW9kdWxlcy9jb25jYXQtdHlwZWQtYXJyYXkvbGliL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvbm9kZV9tb2R1bGVzL2NvbmNhdC10eXBlZC1hcnJheS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL25vZGVfbW9kdWxlcy93ZWJ3b3JraWZ5LXdlYnBhY2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9jb25zdGFudHMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci11dGlscy9zcmMvY29uc3RhbnRzL3dvcmtlci1jb21tYW5kcy5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9lbnYvaXNsZS5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL2Vudi9zbmlmZmVyLmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci11dGlscy9zcmMvZW52L3V0ZjguanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2JpbGUvYXVkaW8tY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL21vYmlsZS9tb2JpbGUtdmlkZW8uanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2JpbGUvdmlkZW8tY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL21vYmlsZS93b3JrZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvbWVkaWEtaW5mby5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy9tZWRpYS1zYW1wbGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvbWVkaWEtc2VnbWVudC1saXN0LmpzIiwid2VicGFjazovLy8uLi94Z3BsYXllci11dGlscy9zcmMvbW9kZWxzL21lZGlhLXNlZ21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tb2RlbHMvdHJhY2stbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi4veGdwbGF5ZXItdXRpbHMvc3JjL21vZGVscy90cmFjay1zYW1wbGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy9tc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy93cml0ZS9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyLXV0aWxzL3NyYy93cml0ZS9zdHJlYW0uanMiLCJ3ZWJwYWNrOi8vLy4uL3hncGxheWVyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zsdi1saXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtR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LHlCQUF5QiwwREFBVTtBQUNuQywwQkFBMEIsNkRBQWM7QUFDeEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxxQkFBcUIsbURBQVM7O0FBRTlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCQUEyQixlQUFlO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLE9B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QUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixZQUFZO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixxREFBTTtBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCw0QkFBNEIsS0FBSztBQUNqQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscURBQU07QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscURBQU07QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFEQUFNO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscURBQU07QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxREFBTTtBQUMzQixlQUFlLHFEQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscURBQU07QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHFEQUFNO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQscURBQU07QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscURBQU07QUFDM0Isc0JBQXNCLHFEQUFNO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHFEQUFNO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxREFBTTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7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QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQ3JFQTtBQUFBO0FBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQzs7QUFFakM7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDeEJBO0FBQUE7QUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLE9BQU87QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBLEM7Ozs7Ozs7Ozs7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QUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHNEQUFPO0FBQ2hDLDBEQUEwRCxpREFBRztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9zcmMvaW5kZXguanNcIik7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gJGdldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9ICRnZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBSZWZsZWN0QXBwbHkodGhpcy5saXN0ZW5lciwgdGhpcy50YXJnZXQsIGFyZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgVHJhY2s6IHJlcXVpcmUoJy4vc3JjL3RyYWNrJykuZGVmYXVsdCxcbiAgVHJhY2tzOiByZXF1aXJlKCcuL3NyYy90cmFjaycpLlRyYWNrcyxcbiAgQXVkaW9UcmFjazogcmVxdWlyZSgnLi9zcmMvdHJhY2snKS5BdWRpb1RyYWNrLFxuICBWaWRlb1RyYWNrOiByZXF1aXJlKCcuL3NyYy90cmFjaycpLlZpZGVvVHJhY2ssXG5cbiAgWGdCdWZmZXI6IHJlcXVpcmUoJy4vc3JjL2J1ZmZlcicpLlhnQnVmZmVyLFxuICBSZW11eEJ1ZmZlcjogcmVxdWlyZSgnLi9zcmMvYnVmZmVyJykuUmVtdXhCdWZmZXIsXG5cbiAgUHJlU291cmNlOiByZXF1aXJlKCcuL3NyYy9wcmVzb3VjZScpLmRlZmF1bHRcbn07XG4iLCJleHBvcnQgY2xhc3MgWGdCdWZmZXIge1xuICAvKipcbiAgICogQSBidWZmZXIgdG8gc3RvcmUgbG9hZGVkIGRhdGEuXG4gICAqXG4gICAqIEBjbGFzcyBMb2FkZXJCdWZmZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIE9wdGlvbmFsIHRoZSBidWZmZXIgc2l6ZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGxlbmd0aCkge1xuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoIHx8IDBcbiAgICB0aGlzLmhpc3RvcnlMZW4gPSBsZW5ndGggfHwgMFxuICAgIHRoaXMuYXJyYXkgPSBbXVxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiB0byBwdXNoIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRhIC0gVGhlIGRhdGEgdG8gcHVzaCBpbnRvIHRoZSBidWZmZXJcbiAgICovXG4gIHB1c2ggKGRhdGEpIHtcbiAgICB0aGlzLmFycmF5LnB1c2goZGF0YSlcbiAgICB0aGlzLmxlbmd0aCArPSBkYXRhLmJ5dGVMZW5ndGhcbiAgICB0aGlzLmhpc3RvcnlMZW4gKz0gZGF0YS5ieXRlTGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIHNoaWZ0IGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBUaGUgc2l6ZSBvZiBzaGlmdC5cbiAgICovXG4gIHNoaWZ0IChsZW5ndGgpIHtcbiAgICBpZiAodGhpcy5hcnJheS5sZW5ndGggPCAxKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMClcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zaGlmdEJ1ZmZlcigpXG4gICAgfVxuICAgIGlmICgodGhpcy5vZmZzZXQgKyBsZW5ndGgpID09PSB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgbGV0IHJldCA9IHRoaXMuYXJyYXlbMF0uc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKVxuICAgICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgICB0aGlzLmFycmF5LnNoaWZ0KClcbiAgICAgIHRoaXMubGVuZ3RoIC09IGxlbmd0aFxuICAgICAgcmV0dXJuIHJldFxuICAgIH1cblxuICAgIGlmICgodGhpcy5vZmZzZXQgKyBsZW5ndGgpIDwgdGhpcy5hcnJheVswXS5sZW5ndGgpIHtcbiAgICAgIGxldCByZXQgPSB0aGlzLmFycmF5WzBdLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aClcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aFxuICAgICAgdGhpcy5sZW5ndGggLT0gbGVuZ3RoXG4gICAgICByZXR1cm4gcmV0XG4gICAgfVxuXG4gICAgbGV0IHJldCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICBsZXQgdG1wb2ZmID0gMFxuICAgIHdoaWxlICh0aGlzLmFycmF5Lmxlbmd0aCA+IDAgJiYgbGVuZ3RoID4gMCkge1xuICAgICAgaWYgKCh0aGlzLm9mZnNldCArIGxlbmd0aCkgPCB0aGlzLmFycmF5WzBdLmxlbmd0aCkge1xuICAgICAgICBsZXQgdG1wID0gdGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW5ndGgpXG4gICAgICAgIHJldC5zZXQodG1wLCB0bXBvZmYpXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aFxuICAgICAgICB0aGlzLmxlbmd0aCAtPSBsZW5ndGhcbiAgICAgICAgbGVuZ3RoID0gMFxuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHRlbXBsZW5ndGggPSB0aGlzLmFycmF5WzBdLmxlbmd0aCAtIHRoaXMub2Zmc2V0XG4gICAgICAgIHJldC5zZXQodGhpcy5hcnJheVswXS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5hcnJheVswXS5sZW5ndGgpLCB0bXBvZmYpXG4gICAgICAgIHRoaXMuYXJyYXkuc2hpZnQoKVxuICAgICAgICB0aGlzLm9mZnNldCA9IDBcbiAgICAgICAgdG1wb2ZmICs9IHRlbXBsZW5ndGhcbiAgICAgICAgdGhpcy5sZW5ndGggLT0gdGVtcGxlbmd0aFxuICAgICAgICBsZW5ndGggLT0gdGVtcGxlbmd0aFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gY2xlYXIgdGhlIGJ1ZmZlci5cbiAgICovXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLmFycmF5ID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuY2xlYXIoKVxuICAgIHRoaXMuaGlzdG9yeUxlbiA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBzaGlmdCBvbmUgdW5pdDhBcnJheS5cbiAgICovXG4gIF9zaGlmdEJ1ZmZlciAoKSB7XG4gICAgdGhpcy5sZW5ndGggLT0gdGhpcy5hcnJheVswXS5sZW5ndGhcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICByZXR1cm4gdGhpcy5hcnJheS5zaGlmdCgpXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCB1aW50OCBkYXRhIHRvIG51bWJlci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gdGhlIHN0YXJ0IHBvc3Rpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSB0aGUgbGVuZ3RoIG9mIGRhdGEuXG4gICAqL1xuICB0b0ludCAoc3RhcnQsIGxlbmd0aCkge1xuICAgIGxldCByZXRJbnQgPSAwXG4gICAgbGV0IGkgPSB0aGlzLm9mZnNldCArIHN0YXJ0XG4gICAgd2hpbGUgKGkgPCB0aGlzLm9mZnNldCArIGxlbmd0aCArIHN0YXJ0KSB7XG4gICAgICBpZiAoaSA8IHRoaXMuYXJyYXlbMF0ubGVuZ3RoKSB7XG4gICAgICAgIHJldEludCA9IHJldEludCAqIDI1NiArIHRoaXMuYXJyYXlbMF1baV1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hcnJheVsxXSkge1xuICAgICAgICByZXRJbnQgPSByZXRJbnQgKiAyNTYgKyB0aGlzLmFycmF5WzFdW2kgLSB0aGlzLmFycmF5WzBdLmxlbmd0aF1cbiAgICAgIH1cblxuICAgICAgaSsrXG4gICAgfVxuICAgIHJldHVybiByZXRJbnRcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVtdXhCdWZmZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy52aWRlbyA9IFtdXG4gICAgdGhpcy5hdWRpbyA9IFtdXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLnZpZGVvID0gW11cbiAgICB0aGlzLmF1ZGlvID0gW11cbiAgfVxufVxuIiwiY2xhc3MgU291cmNlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMubWltZXR5cGUgPSAnJztcbiAgICB0aGlzLmluaXQgPSBudWxsO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICB9XG59XG5cbmNsYXNzIFByZVNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnNvdXJjZXMgPSB7fTtcbiAgfVxuXG4gIGdldFNvdXJjZSAoc291cmNlKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc1tzb3VyY2VdO1xuICB9XG5cbiAgY3JlYXRlU291cmNlIChuYW1lKSB7XG4gICAgdGhpcy5zb3VyY2VzW25hbWVdID0gbmV3IFNvdXJjZSgpO1xuICAgIHJldHVybiB0aGlzLnNvdXJjZXNbbmFtZV07XG4gIH1cblxuICBjbGVhciAoKSB7XG4gICAgdGhpcy5zb3VyY2VzID0ge307XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLnNvdXJjZXMgPSB7fTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcmVTb3VyY2U7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFjayB7XG4gIC8qKlxuICAgKiBUaGUgY29uc3RydWN0b3IuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5pZCA9IC0xXG4gICAgdGhpcy5zZXF1ZW5jZU51bWJlciA9IDBcbiAgICB0aGlzLnNhbXBsZXMgPSBbXVxuICAgIHRoaXMuZHJvcHBlZFNhbXBsZXMgPSBbXVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSB0cmFjay5cbiAgICovXG4gIHJlc2V0ICgpIHtcbiAgICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gMFxuICAgIHRoaXMuc2FtcGxlcyA9IFtdXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gIH1cbiAgLyoqXG4gICAqIGRlc3Ryb3kgdGhlIHRyYWNrLlxuICAgKi9cbiAgZGlzdHJveSAoKSB7XG4gICAgdGhpcy5yZXNldCgpXG4gICAgdGhpcy5pZCA9IC0xXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2sgZXh0ZW5kcyBUcmFjayB7XG4gIC8qKlxuICAgKiBUaGUgY29uc3RydWN0b3IgZm9yIGF1ZGlvIHRyYWNrLlxuICAgKi9cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLlRBRyA9ICdBdWRpb1RyYWNrJ1xuICAgIHRoaXMudHlwZSA9ICdhdWRpbydcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmlkZW9UcmFjayBleHRlbmRzIFRyYWNrIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3RvciBmb3IgdmlkZW8gdHJhY2suXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuVEFHID0gJ1ZpZGVvVHJhY2snXG4gICAgdGhpcy50eXBlID0gJ3ZpZGVvJ1xuICAgIHRoaXMuZHJvcHBlZCA9IDBcbiAgfVxuICAvKipcbiAgICogcmVzZXQgdGhlIHZpZGVvIHRyYWNrLlxuICAgKi9cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMuc2VxdWVuY2VOdW1iZXIgPSAwXG4gICAgdGhpcy5zYW1wbGVzID0gW11cbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgICB0aGlzLmRyb3BwZWQgPSAwXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRyYWNrcyB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmF1ZGlvVHJhY2sgPSBudWxsXG4gICAgdGhpcy52aWRlb1RyYWNrID0gbnVsbFxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgTmFsdW5pdDogcmVxdWlyZSgnLi9zcmMvaDI2NC9uYWx1bml0JykuZGVmYXVsdCxcbiAgU3BzUGFyc2VyOiByZXF1aXJlKCcuL3NyYy9oMjY0L25hbHVuaXQvc3BzJykuZGVmYXVsdCxcblxuICBDb21wYXRpYmlsaXR5OiByZXF1aXJlKCcuL3NyYy9jb21wYXRpYmlsaXR5JykuZGVmYXVsdFxufTtcbiIsIlxuY2xhc3MgQUFDIHtcblxuICBzdGF0aWMgZ2V0U2lsZW50RnJhbWUoY29kZWMsIGNoYW5uZWxDb3VudCkge1xuICAgIGlmIChjb2RlYyA9PT0gJ21wNGEuNDAuMicpIHtcbiAgICAgIC8vIGhhbmRsZSBMQy1BQUNcbiAgICAgIGlmIChjaGFubmVsQ291bnQgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIzLCAweDgwXSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gMikge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MjEsIDB4MDAsIDB4NDksIDB4OTAsIDB4MDIsIDB4MTksIDB4MDAsIDB4MjMsIDB4ODBdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAzKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4ZV0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsweDAwLCAweGM4LCAweDAwLCAweDgwLCAweDIwLCAweDg0LCAweDAxLCAweDI2LCAweDQwLCAweDA4LCAweDY0LCAweDAwLCAweDgwLCAweDJjLCAweDgwLCAweDA4LCAweDAyLCAweDM4XSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWxDb3VudCA9PT0gNSkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MzhdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA2KSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShbMHgwMCwgMHhjOCwgMHgwMCwgMHg4MCwgMHgyMCwgMHg4NCwgMHgwMSwgMHgyNiwgMHg0MCwgMHgwOCwgMHg2NCwgMHgwMCwgMHg4MiwgMHgzMCwgMHgwNCwgMHg5OSwgMHgwMCwgMHgyMSwgMHg5MCwgMHgwMiwgMHgwMCwgMHhiMiwgMHgwMCwgMHgyMCwgMHgwOCwgMHhlMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYW5kbGUgSEUtQUFDIChtcDRhLjQwLjUgLyBtcDRhLjQwLjI5KVxuICAgICAgaWYgKGNoYW5uZWxDb3VudCA9PT0gMSkge1xuICAgICAgICAvLyBmZm1wZWcgLXkgLWYgbGF2ZmkgLWkgXCJhZXZhbHNyYz0wOmQ9MC4wNVwiIC1jOmEgbGliZmRrX2FhYyAtcHJvZmlsZTphIGFhY19oZSAtYjphIDRrIG91dHB1dC5hYWMgJiYgaGV4ZHVtcCAtdiAtZSAnMTYvMSBcIjB4JXgsXCIgXCJcXG5cIicgLXYgb3V0cHV0LmFhY1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg0ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDFjLCAweDYsIDB4ZjEsIDB4YzEsIDB4YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1YSwgMHg1ZV0pO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsQ291bnQgPT09IDIpIHtcbiAgICAgICAgLy8gZmZtcGVnIC15IC1mIGxhdmZpIC1pIFwiYWV2YWxzcmM9MHwwOmQ9MC4wNVwiIC1jOmEgbGliZmRrX2FhYyAtcHJvZmlsZTphIGFhY19oZV92MiAtYjphIDRrIG91dHB1dC5hYWMgJiYgaGV4ZHVtcCAtdiAtZSAnMTYvMSBcIjB4JXgsXCIgXCJcXG5cIicgLXYgb3V0cHV0LmFhY1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg1ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDAsIDB4OTUsIDB4MCwgMHg2LCAweGYxLCAweGExLCAweGEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWVdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAzKSB7XG4gICAgICAgIC8vIGZmbXBlZyAteSAtZiBsYXZmaSAtaSBcImFldmFsc3JjPTB8MHwwOmQ9MC4wNVwiIC1jOmEgbGliZmRrX2FhYyAtcHJvZmlsZTphIGFhY19oZV92MiAtYjphIDRrIG91dHB1dC5hYWMgJiYgaGV4ZHVtcCAtdiAtZSAnMTYvMSBcIjB4JXgsXCIgXCJcXG5cIicgLXYgb3V0cHV0LmFhY1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MSwgMHg0MCwgMHgyMiwgMHg4MCwgMHhhMywgMHg1ZSwgMHhlNiwgMHg4MCwgMHhiYSwgMHg4LCAweDAsIDB4MCwgMHgwLCAweDAsIDB4OTUsIDB4MCwgMHg2LCAweGYxLCAweGExLCAweGEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWEsIDB4NWVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBQUM7XG4iLCJpbXBvcnQge0VWRU5UU30gZnJvbSAneGdwbGF5ZXItdXRpbHMnXG5pbXBvcnQgQUFDIGZyb20gJy4vYWFjL2FhYy1oZWxwZXInXG5cbmNvbnN0IHtSRU1VWF9FVkVOVFN9ID0gRVZFTlRTXG5cbmNsYXNzIENvbXBhdGliaWxpdHkge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5uZXh0QXVkaW9EdHMgPSAwIC8vIOaooeaLn+S4i+S4gOautemfs+mikeaVsOaNrueahGR0c1xuICAgIHRoaXMubmV4dFZpZGVvRHRzID0gMCAvLyDmqKHmi5/kuIvkuIDmrrXop4bpopHmlbDmja7nmoRkdHNcblxuICAgIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9IDAgLy8g5LiK5LiA5q616Z+z6aKR5pWw5o2u55qE6ZW/5bqmXG4gICAgdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuID0gMCAvLyDkuIrkuIDmrrXop4bpopHmlbDmja7nmoTplb/luqZcblxuICAgIHRoaXMubGFzdFZpZGVvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOautemfs+mikeaVsOaNrueahOmVv+W6plxuICAgIHRoaXMubGFzdEF1ZGlvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCA9IDAgLy8g6Z+z6aKR5oC75pWw5o2u6YePKOWOn+Wni+W4pylcbiAgICB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50ID0gMCAvLyDop4bpopHmgLvmlbDmja7ph48o5Y6f5aeL5binKVxuXG4gICAgdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSA9IG51bGxcbiAgICB0aGlzLl9maXJzdFZpZGVvU2FtcGxlID0gbnVsbFxuXG4gICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMgPSBbXSAvLyDooaXlhYXpn7PpopHluKfvvIjvvIlcbiAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcyA9IFtdIC8vIOihpeWFheinhumikeW4p++8iO+8iVxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5iZWZvcmUoUkVNVVhfRVZFTlRTLlJFTVVYX01FRElBLCB0aGlzLmRvRml4LmJpbmQodGhpcykpXG4gIH1cblxuICByZXNldCAoKSB7XG4gICAgdGhpcy5uZXh0QXVkaW9EdHMgPSAwIC8vIOaooeaLn+S4i+S4gOautemfs+mikeaVsOaNrueahGR0c1xuICAgIHRoaXMubmV4dFZpZGVvRHRzID0gMCAvLyDmqKHmi5/kuIvkuIDmrrXop4bpopHmlbDmja7nmoRkdHNcblxuICAgIHRoaXMubGFzdEF1ZGlvU2FtcGxlc0xlbiA9IDAgLy8g5LiK5LiA5q616Z+z6aKR5pWw5o2u55qE6ZW/5bqmXG4gICAgdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuID0gMCAvLyDkuIrkuIDmrrXop4bpopHmlbDmja7nmoTplb/luqZcblxuICAgIHRoaXMubGFzdFZpZGVvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOautemfs+mikeaVsOaNrueahOmVv+W6plxuICAgIHRoaXMubGFzdEF1ZGlvRHRzID0gdW5kZWZpbmVkIC8vIOS4iuS4gOauteinhumikeaVsOaNrueahOmVv+W6plxuXG4gICAgdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCA9IDAgLy8g6Z+z6aKR5oC75pWw5o2u6YePKOWOn+Wni+W4pylcbiAgICB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50ID0gMCAvLyDop4bpopHmgLvmlbDmja7ph48o5Y6f5aeL5binKVxuXG4gICAgdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSA9IG51bGxcbiAgICB0aGlzLl9maXJzdFZpZGVvU2FtcGxlID0gbnVsbFxuXG4gICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMgPSBbXSAvLyDooaXlhYXpn7PpopHluKfvvIjvvIlcbiAgICB0aGlzLmZpbGxlZFZpZGVvU2FtcGxlcyA9IFtdIC8vIOihpeWFheinhumikeW4p++8iO+8iVxuICB9XG5cbiAgZG9GaXggKCkge1xuICAgIGNvbnN0IHsgaXNGaXJzdEF1ZGlvU2FtcGxlcywgaXNGaXJzdFZpZGVvU2FtcGxlcyB9ID0gdGhpcy5nZXRGaXJzdFNhbXBsZSgpXG5cbiAgICB0aGlzLnJlbW92ZUludmFsaWRTYW1wbGVzKClcblxuICAgIHRoaXMucmVjb3JkU2FtcGxlc0NvdW50KClcblxuICAgIGlmICh0aGlzLl9maXJzdFZpZGVvU2FtcGxlKSB7XG4gICAgICB0aGlzLmZpeFJlZlNhbXBsZUR1cmF0aW9uKHRoaXMudmlkZW9UcmFjay5tZXRhLCB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcylcbiAgICB9XG4gICAgaWYgKHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUpIHtcbiAgICAgIHRoaXMuZml4UmVmU2FtcGxlRHVyYXRpb24odGhpcy5hdWRpb1RyYWNrLm1ldGEsIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzKVxuICAgIH1cblxuICAgIHRoaXMuZG9GaXhWaWRlbyhpc0ZpcnN0VmlkZW9TYW1wbGVzKVxuICAgIHRoaXMuZG9GaXhBdWRpbyhpc0ZpcnN0QXVkaW9TYW1wbGVzKVxuICB9XG5cbiAgZG9GaXhWaWRlbyAoZmlyc3QpIHtcbiAgICBsZXQge3NhbXBsZXM6IHZpZGVvU2FtcGxlcywgbWV0YX0gPSB0aGlzLnZpZGVvVHJhY2tcblxuICAgIGlmIChtZXRhLmZyYW1lUmF0ZSAmJiBtZXRhLmZyYW1lUmF0ZS5maXhlZCA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXZpZGVvU2FtcGxlcyB8fCAhdmlkZW9TYW1wbGVzLmxlbmd0aCB8fCAhdGhpcy5fZmlyc3RWaWRlb1NhbXBsZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coYHZpZGVvIGxhc3RTYW1wbGUsICR7dmlkZW9TYW1wbGVzW3ZpZGVvU2FtcGxlcy5sZW5ndGggLSAxXS5kdHN9YClcblxuICAgIGNvbnN0IGZpcnN0U2FtcGxlID0gdmlkZW9TYW1wbGVzWzBdXG4gICAgY29uc3QgZmlyc3REdHMgPSBmaXJzdFNhbXBsZS5kdHNcblxuICAgIGNvbnN0IHNhbXBsZXNMZW4gPSB2aWRlb1NhbXBsZXMubGVuZ3RoO1xuXG4gICAgLy8gc3RlcDEuIOS/ruWkjeS4jmF1ZGlv6aaW5bin5beu6Led5aSq5aSn55qE6Zeu6aKYXG4gICAgaWYgKGZpcnN0ICYmIHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUpIHtcbiAgICAgIGNvbnN0IHZpZGVvRmlyc3REdHMgPSB0aGlzLl9maXJzdFZpZGVvU2FtcGxlLmR0c1xuICAgICAgY29uc3QgYXVkaW9GaXJzdER0cyA9IHRoaXMuX2ZpcnN0QXVkaW9TYW1wbGUuZHRzXG4gICAgICBjb25zdCBnYXAgPSB2aWRlb0ZpcnN0RHRzIC0gYXVkaW9GaXJzdER0c1xuICAgICAgaWYgKGdhcCA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgY29uc3QgZmlsbENvdW50ID0gTWF0aC5mbG9vcihnYXAgLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsbENvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjbG9uZWRGaXJzdFNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIGZpcnN0U2FtcGxlKSAvLyDop4bpopHlpLTpg6jluKfnvLrlpLHpnIDopoHlpI3liLbnrKzkuIDluKdcbiAgICAgICAgICAvLyDph43mlrDorqHnrpdzYW1wbGXnmoRkdHPlkoxwdHNcbiAgICAgICAgICBjbG9uZWRGaXJzdFNhbXBsZS5kdHMgPSB2aWRlb0ZpcnN0RHRzIC0gKGkgKyAxKSAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgICBjbG9uZWRGaXJzdFNhbXBsZS5wdHMgPSBjbG9uZWRGaXJzdFNhbXBsZS5kdHMgKyBjbG9uZWRGaXJzdFNhbXBsZS5jdHNcblxuICAgICAgICAgIHZpZGVvU2FtcGxlcy51bnNoaWZ0KGNsb25lZEZpcnN0U2FtcGxlKVxuXG4gICAgICAgICAgdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgICBkdHM6IGNsb25lZEZpcnN0U2FtcGxlLmR0cyxcbiAgICAgICAgICAgIHNpemU6IGNsb25lZEZpcnN0U2FtcGxlLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgZ2FwXG4gICAgLy8gc3RlcDIuIOS/ruWkjXNhbXBsZXPmrrXkuYvpl7TnmoTpl7Tot53pl67popjjgIFcbiAgICBpZiAodGhpcy5uZXh0VmlkZW9EdHMpIHtcbiAgICAgIC8vIHN0ZXAxLiDlpITnkIZzYW1wbGVz5q615LmL6Ze055qE5Lii5bin5oOF5Ya1XG4gICAgICAvLyDlvZPlj5HnjrBkdXJhdGlvbuW3rui3neWkp+S6jjLluKfml7bov5vooYzooaXluKdcbiAgICAgIGdhcCA9IGZpcnN0RHRzIC0gdGhpcy5uZXh0VmlkZW9EdHNcbiAgICAgIGNvbnN0IGFic0dhcCA9IE1hdGguYWJzKGdhcClcbiAgICAgIGlmIChnYXAgPiAoMiAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pKSB7XG4gICAgICAgIGNvbnN0IGZpbGxGcmFtZUNvdW50ID0gTWF0aC5mbG9vcihnYXAgLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsbEZyYW1lQ291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGNsb25lZFNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIHZpZGVvU2FtcGxlc1swXSlcbiAgICAgICAgICBjb25zdCBjb21wdXRlZCA9IGZpcnN0RHRzIC0gKGkgKyAxKSAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb25cblxuICAgICAgICAgIGNsb25lZFNhbXBsZS5kdHMgPSBjb21wdXRlZCA+IHRoaXMubmV4dFZpZGVvRHRzID8gY29tcHV0ZWQgOiB0aGlzLm5leHRWaWRlb0R0cyAvLyDooaXnmoTnrKzkuIDluKfkuIDlrpropoHmmK9uZXh0VmlkZW9EdHNcbiAgICAgICAgICBjbG9uZWRTYW1wbGUucHRzID0gY2xvbmVkU2FtcGxlLmR0cyArIGNsb25lZFNhbXBsZS5jdHNcblxuICAgICAgICAgIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzLnVuc2hpZnQoY2xvbmVkU2FtcGxlKVxuXG4gICAgICAgICAgdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgICBkdHM6IGNsb25lZFNhbXBsZS5kdHMsXG4gICAgICAgICAgICBzaXplOiBjbG9uZWRTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhYnNHYXAgPD0gMTAgJiYgYWJzR2FwID4gMCkge1xuICAgICAgICAvLyDlvZPlt67ot53lnKgrLeS4gOW4p+S5i+mXtOaXtuWwhuesrOS4gOW4p+eahGR0c+W8uuihjOWumuS9jeWIsOacn+acm+S9jee9rlxuICAgICAgICAvLyBjb25zb2xlLmxvZygn6YeN5a6a5L2N6KeG6aKR5binZHRzJywgdmlkZW9TYW1wbGVzWzBdLmR0cywgdGhpcy5uZXh0VmlkZW9EdHMpXG4gICAgICAgIHZpZGVvU2FtcGxlc1swXS5kdHMgPSB0aGlzLm5leHRWaWRlb0R0c1xuICAgICAgICB2aWRlb1NhbXBsZXNbMF0ub3JpZ2luRHRzID0gdmlkZW9TYW1wbGVzWzBdLmR0c1xuICAgICAgICB2aWRlb1NhbXBsZXNbMF0uY3RzID0gdmlkZW9TYW1wbGVzWzBdLmN0cyB8fCB2aWRlb1NhbXBsZXNbMF0ucHRzIC0gdmlkZW9TYW1wbGVzWzBdLmR0c1xuICAgICAgICB2aWRlb1NhbXBsZXNbMF0ucHRzID0gdmlkZW9TYW1wbGVzWzBdLmR0cyArIHZpZGVvU2FtcGxlc1swXS5jdHNcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGFzdER0cyA9IHZpZGVvU2FtcGxlc1t2aWRlb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzO1xuXG4gICAgY29uc3QgbGFzdFNhbXBsZUR1cmF0aW9uID0gdmlkZW9TYW1wbGVzLmxlbmd0aCA+PSAyID8gbGFzdER0cyAtIHZpZGVvU2FtcGxlc1t2aWRlb1NhbXBsZXMubGVuZ3RoIC0gMl0uZHRzIDogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuXG4gICAgdGhpcy5sYXN0VmlkZW9TYW1wbGVzTGVuID0gc2FtcGxlc0xlblxuICAgIHRoaXMubmV4dFZpZGVvRHRzID0gbGFzdER0cyArIGxhc3RTYW1wbGVEdXJhdGlvblxuICAgIHRoaXMubGFzdFZpZGVvRHRzID0gbGFzdER0c1xuXG4gICAgLy8gc3RlcDIuIOS/ruWkjXNhbXBsZeauteS5i+WGheeahOmXtOi3nemXrumimFxuICAgIC8vIHN0ZXAzLiDkv67lpI1zYW1wbGVz5q615YaF6YOo55qEZHRz5byC5bi46Zeu6aKYXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZpZGVvU2FtcGxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudCA9IHZpZGVvU2FtcGxlc1tpXVxuICAgICAgY29uc3QgbmV4dCA9IHZpZGVvU2FtcGxlc1tpICsgMV1cblxuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IG5leHQuZHRzIC0gY3VycmVudC5kdHM7XG5cbiAgICAgIGlmIChkdXJhdGlvbiA+ICgyICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbikpIHtcbiAgICAgICAgLy8g5Lik5bin5LmL6Ze06Ze06ZqU5aSq5aSn77yM6ZyA6KaB6KGl56m655m95binXG4gICAgICAgIGxldCBmaWxsRnJhbWVDb3VudCA9IE1hdGguZmxvb3IoZHVyYXRpb24gLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgIGxldCBmaWxsRnJhbWVJZHggPSAwXG4gICAgICAgIHdoaWxlIChmaWxsRnJhbWVJZHggPCBmaWxsRnJhbWVDb3VudCkge1xuICAgICAgICAgIGNvbnN0IGZpbGxGcmFtZSA9IE9iamVjdC5hc3NpZ24oe30sIG5leHQpXG4gICAgICAgICAgZmlsbEZyYW1lLmR0cyA9IGN1cnJlbnQuZHRzICsgKGZpbGxGcmFtZUlkeCArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgIGZpbGxGcmFtZS5wdHMgPSBmaWxsRnJhbWUuZHRzICsgZmlsbEZyYW1lLmN0c1xuICAgICAgICAgIGlmIChmaWxsRnJhbWUgPCBuZXh0LmR0cykge1xuICAgICAgICAgICAgdmlkZW9TYW1wbGVzLnNwbGljZShpLCAwLCBmaWxsRnJhbWUpXG5cbiAgICAgICAgICAgIHRoaXMuZmlsbGVkVmlkZW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgICBkdHM6IGZpbGxGcmFtZS5kdHMsXG4gICAgICAgICAgICAgIHNpemU6IGZpbGxGcmFtZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmlsbEZyYW1lSWR4KytcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnZpZGVvVHJhY2suc2FtcGxlcyA9IHZpZGVvU2FtcGxlcztcbiAgfVxuXG4gIGRvRml4QXVkaW8gKGZpcnN0KSB7XG4gICAgbGV0IHtzYW1wbGVzOiBhdWRpb1NhbXBsZXMsIG1ldGF9ID0gdGhpcy5hdWRpb1RyYWNrXG5cbiAgICBpZiAoIWF1ZGlvU2FtcGxlcyB8fCAhYXVkaW9TYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKGBhdWRpbyBsYXN0U2FtcGxlLCAke2F1ZGlvU2FtcGxlc1thdWRpb1NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzfWApXG5cbiAgICBjb25zdCBzYW1wbGVzTGVuID0gYXVkaW9TYW1wbGVzLmxlbmd0aDtcbiAgICBjb25zdCBzaWxlbnRGcmFtZSA9IEFBQy5nZXRTaWxlbnRGcmFtZShtZXRhLmNvZGVjLCBtZXRhLmNoYW5uZWxDb3VudClcblxuICAgIGNvbnN0IGZpcnN0U2FtcGxlID0gdGhpcy5fZmlyc3RBdWRpb1NhbXBsZVxuXG4gICAgLy8g5a+5YXVkaW9TYW1wbGVz5oyJ54WnZHRz5YGa5o6S5bqPXG4gICAgYXVkaW9TYW1wbGVzID0gQ29tcGF0aWJpbGl0eS5zb3J0QXVkaW9TYW1wbGVzKGF1ZGlvU2FtcGxlcylcblxuICAgIC8vIHN0ZXAwLiDpppbluKfkuI52aWRlb+mmluW4p+mXtOi3neWkp+eahOmXrumimFxuICAgIGlmICh0aGlzLl9maXJzdFZpZGVvU2FtcGxlICYmIGZpcnN0KSB7XG4gICAgICBjb25zdCB2aWRlb0ZpcnN0UHRzID0gdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5wdHMgPyB0aGlzLl9maXJzdFZpZGVvU2FtcGxlLnB0cyA6IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzICsgdGhpcy5fZmlyc3RWaWRlb1NhbXBsZS5jdHNcblxuICAgICAgaWYgKGZpcnN0U2FtcGxlLmR0cyAtIHZpZGVvRmlyc3RQdHMgPiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNpbGVudFNhbXBsZUNvdW50ID0gTWF0aC5mbG9vcigoZmlyc3RTYW1wbGUuZHRzIC0gdmlkZW9GaXJzdFB0cykgLyBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lsZW50U2FtcGxlQ291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHNpbGVudFNhbXBsZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IHNpbGVudEZyYW1lLFxuICAgICAgICAgICAgZGF0YXNpemU6IHNpbGVudEZyYW1lLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICBkdHM6IGZpcnN0U2FtcGxlLmR0cyAtIChpICsgMSkgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uLFxuICAgICAgICAgICAgZmlsdGVyZWQ6IDBcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdWRpb1NhbXBsZXMudW5zaGlmdChzaWxlbnRTYW1wbGUpXG5cbiAgICAgICAgICB0aGlzLmZpbGxlZEF1ZGlvU2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgIGR0czogc2lsZW50U2FtcGxlLmR0cyxcbiAgICAgICAgICAgIHNpemU6IHNpbGVudFNhbXBsZS5kYXRhLmJ5dGVMZW5ndGhcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGdhcFxuICAgIGNvbnN0IGZpcnN0RHRzID0gYXVkaW9TYW1wbGVzWzBdLmR0c1xuXG4gICAgaWYgKHRoaXMubmV4dEF1ZGlvRHRzKSB7XG4gICAgICAvLyBzdGVwMS4g5aSE55CGc2FtcGxlc+auteS5i+mXtOeahOS4ouW4p+aDheWGtVxuICAgICAgLy8g5b2T5Y+R546wZHVyYXRpb27lt67ot53lpKfkuo4x5bin5pe26L+b6KGM6KGl5binXG4gICAgICBnYXAgPSBmaXJzdER0cyAtIHRoaXMubmV4dEF1ZGlvRHRzXG4gICAgICBjb25zdCBhYnNHYXAgPSBNYXRoLmFicyhnYXApXG5cbiAgICAgIGlmIChhYnNHYXAgPiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uICYmIHNhbXBsZXNMZW4gPT09IDEgJiYgdGhpcy5sYXN0QXVkaW9TYW1wbGVzTGVuID09PSAxKSB7XG4gICAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICBpZiAoZ2FwID4gKDIgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgICBpZiAoc2FtcGxlc0xlbiA9PT0gMSAmJiB0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4gPT09IDEpIHtcbiAgICAgICAgICAvLyDlpoLmnpxzYW1wbGXnmoRsZW5ndGjkuIDnm7TmmK8x77yM6ICM5LiU5LiA55u05LiN56ym5ZCIcmVmU2FtcGxlRHVyYXRpb27vvIzpnIDopoHliqjmgIHkv67mlLlyZWZTYW1wbGVEdXJhdGlvblxuICAgICAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCA9IG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCAhPT0gdW5kZWZpbmVkID8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkICsgZ2FwIDogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiArIGdhcFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHNpbGVudEZyYW1lQ291bnQgPSBNYXRoLmZsb29yKGdhcCAvIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pXG5cbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpbGVudEZyYW1lQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZWQgPSBmaXJzdER0cyAtIChpICsgMSkgKiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgICAgICBjb25zdCBzaWxlbnRTYW1wbGUgPSBPYmplY3QuYXNzaWduKHt9LCBhdWRpb1NhbXBsZXNbMF0sIHtcbiAgICAgICAgICAgICAgZHRzOiBjb21wdXRlZCA+IHRoaXMubmV4dEF1ZGlvRHRzID8gY29tcHV0ZWQgOiB0aGlzLm5leHRBdWRpb0R0c1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMucHVzaCh7XG4gICAgICAgICAgICAgIGR0czogc2lsZW50U2FtcGxlLmR0cyxcbiAgICAgICAgICAgICAgc2l6ZTogc2lsZW50U2FtcGxlLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzLnVuc2hpZnQoc2lsZW50U2FtcGxlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhYnNHYXAgPD0gMTAgJiYgYWJzR2FwID4gMCkge1xuICAgICAgICAvLyDlvZPlt67ot53mr5TovoPlsI/nmoTml7blgJnlsIbpn7PpopHluKfph43lrprkvY1cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ+mHjeWumuS9jemfs+mikeW4p2R0cycsIGF1ZGlvU2FtcGxlc1swXS5kdHMsIHRoaXMubmV4dEF1ZGlvRHRzKVxuICAgICAgICBhdWRpb1NhbXBsZXNbMF0uZHRzID0gdGhpcy5uZXh0QXVkaW9EdHNcbiAgICAgICAgYXVkaW9TYW1wbGVzWzBdLnB0cyA9IHRoaXMubmV4dEF1ZGlvRHRzXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGxhc3REdHMgPSBhdWRpb1NhbXBsZXNbYXVkaW9TYW1wbGVzLmxlbmd0aCAtIDFdLmR0cztcbiAgICBjb25zdCBsYXN0U2FtcGxlRHVyYXRpb24gPSBhdWRpb1NhbXBsZXMubGVuZ3RoID49IDIgPyBsYXN0RHRzIC0gYXVkaW9TYW1wbGVzW2F1ZGlvU2FtcGxlcy5sZW5ndGggLSAyXS5kdHMgOiBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG5cbiAgICB0aGlzLmxhc3RBdWRpb1NhbXBsZXNMZW4gPSBzYW1wbGVzTGVuO1xuICAgIHRoaXMubmV4dEF1ZGlvRHRzID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkID8gbGFzdER0cyArIG1ldGEucmVmU2FtcGxlRHVyYXRpb25GaXhlZCA6IGxhc3REdHMgKyBsYXN0U2FtcGxlRHVyYXRpb25cbiAgICB0aGlzLmxhc3RBdWRpb0R0cyA9IGxhc3REdHNcblxuICAgIC8vIHN0ZXAzLiDkv67lpI1zYW1wbGVz5q615YaF6YOo55qEZHRz5byC5bi46Zeu6aKYXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGF1ZGlvU2FtcGxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudCA9IGF1ZGlvU2FtcGxlc1tpXVxuICAgICAgY29uc3QgbmV4dCA9IGF1ZGlvU2FtcGxlc1tpICsgMV1cblxuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IG5leHQuZHRzIC0gY3VycmVudC5kdHM7XG4gICAgICBhdWRpb1NhbXBsZXNbaV0uZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgIC8qXG4gICAgICBpZiAoZHVyYXRpb24gPiAoMiAqIG1ldGEucmVmU2FtcGxlRHVyYXRpb24pKSB7XG4gICAgICAgIC8vIOS4pOW4p+S5i+mXtOmXtOmalOWkquWkp++8jOmcgOimgeihpeepuueZveW4p1xuICAgICAgICAvKipcbiAgICAgICAgbGV0IHNpbGVudEZyYW1lQ291bnQgPSBNYXRoLmZsb29yKGR1cmF0aW9uIC8gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbilcbiAgICAgICAgbGV0IGZyYW1lSWR4ID0gMFxuXG4gICAgICAgIHdoaWxlIChmcmFtZUlkeCA8IHNpbGVudEZyYW1lQ291bnQpIHtcbiAgICAgICAgICBjb25zdCBzaWxlbnRTYW1wbGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBzaWxlbnRGcmFtZSxcbiAgICAgICAgICAgIGRhdGFzaXplOiBzaWxlbnRGcmFtZS5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgZHRzOiBjdXJyZW50LmR0cyArIChmcmFtZUlkeCArIDEpICogbWV0YS5yZWZTYW1wbGVEdXJhdGlvbixcbiAgICAgICAgICAgIGZpbHRlcmVkOiAwLFxuICAgICAgICAgICAgaXNTaWxlbnQ6IHRydWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdWRpb1NhbXBsZXMuc3BsaWNlKGksIDAsIHNpbGVudFNhbXBsZSlcblxuICAgICAgICAgIHRoaXMuZmlsbGVkQXVkaW9TYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgZHRzOiBzaWxlbnRTYW1wbGUuZHRzLFxuICAgICAgICAgICAgc2l6ZTogc2lsZW50U2FtcGxlLmRhdGEuYnl0ZUxlbmd0aFxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBmcmFtZUlkeCsrXG4gICAgICAgICAgaSsrIC8vIOS4jeWvuemdmemfs+W4p+WBmuavlOi+g1xuICAgICAgICB9XG4gICAgICB9ICovXG4gICAgfVxuXG4gICAgdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMgPSBDb21wYXRpYmlsaXR5LnNvcnRBdWRpb1NhbXBsZXMoYXVkaW9TYW1wbGVzKVxuICB9XG5cbiAgZ2V0Rmlyc3RTYW1wbGUgKCkge1xuICAgIC8vIOiOt+WPlnZpZGVv5ZKMYXVkaW/nmoTpppbluKfmlbDmja5cbiAgICBsZXQge3NhbXBsZXM6IHZpZGVvU2FtcGxlc30gPSB0aGlzLnZpZGVvVHJhY2tcbiAgICBsZXQge3NhbXBsZXM6IGF1ZGlvU2FtcGxlc30gPSB0aGlzLmF1ZGlvVHJhY2tcblxuICAgIGxldCBpc0ZpcnN0VmlkZW9TYW1wbGVzID0gZmFsc2U7XG4gICAgbGV0IGlzRmlyc3RBdWRpb1NhbXBsZXMgPSBmYWxzZTtcblxuICAgIGlmICghdGhpcy5fZmlyc3RWaWRlb1NhbXBsZSAmJiB2aWRlb1NhbXBsZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9maXJzdFZpZGVvU2FtcGxlID0gQ29tcGF0aWJpbGl0eS5maW5kRmlyc3RWaWRlb1NhbXBsZSh2aWRlb1NhbXBsZXMpXG4gICAgICBpc0ZpcnN0VmlkZW9TYW1wbGVzID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmICghdGhpcy5fZmlyc3RBdWRpb1NhbXBsZSAmJiBhdWRpb1NhbXBsZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9maXJzdEF1ZGlvU2FtcGxlID0gQ29tcGF0aWJpbGl0eS5maW5kRmlyc3RBdWRpb1NhbXBsZShhdWRpb1NhbXBsZXMpIC8vIOWvu+aJvmR0c+acgOWwj+eahOW4p+S9nOS4uummluS4qumfs+mikeW4p1xuICAgICAgaXNGaXJzdEF1ZGlvU2FtcGxlcyA9IHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNGaXJzdFZpZGVvU2FtcGxlcyxcbiAgICAgIGlzRmlyc3RBdWRpb1NhbXBsZXNcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5Zyo5rKh5pyJcmVmU2FtcGxlRHVyYXRpb27nmoTpl67popjmtYHkuK3vvIxcbiAgICovXG4gIGZpeFJlZlNhbXBsZUR1cmF0aW9uIChtZXRhLCBzYW1wbGVzKSB7XG4gICAgY29uc3QgaXNWaWRlbyA9IG1ldGEudHlwZSA9PT0gJ3ZpZGVvJ1xuICAgIGNvbnN0IGFsbFNhbXBsZXNDb3VudCA9IGlzVmlkZW8gPyB0aGlzLmFsbFZpZGVvU2FtcGxlc0NvdW50IDogdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudFxuICAgIGNvbnN0IGZpcnN0RHRzID0gaXNWaWRlbyA/IHRoaXMuX2ZpcnN0VmlkZW9TYW1wbGUuZHRzIDogdGhpcy5fZmlyc3RBdWRpb1NhbXBsZS5kdHNcbiAgICBjb25zdCBmaWxsZWRTYW1wbGVzQ291bnQgPSBpc1ZpZGVvID8gdGhpcy5maWxsZWRWaWRlb1NhbXBsZXMubGVuZ3RoIDogdGhpcy5maWxsZWRBdWRpb1NhbXBsZXMubGVuZ3RoXG5cbiAgICBpZiAoIW1ldGEucmVmU2FtcGxlRHVyYXRpb24gfHwgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA8PSAwIHx8IE51bWJlci5pc05hTihtZXRhLnJlZlNhbXBsZUR1cmF0aW9uKSkge1xuICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgY29uc3QgbGFzdER0cyA9IHNhbXBsZXNbc2FtcGxlcy5sZW5ndGggLSAxXS5kdHNcblxuICAgICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcigobGFzdER0cyAtIGZpcnN0RHRzKSAvICgoYWxsU2FtcGxlc0NvdW50ICsgZmlsbGVkU2FtcGxlc0NvdW50KSAtIDEpKTsgLy8g5bCGcmVmU2FtcGxlRHVyYXRpb27ph43nva7kuLrorqHnrpflkI7nmoTlubPlnYflgLxcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG1ldGEucmVmU2FtcGxlRHVyYXRpb24pIHtcbiAgICAgIGlmIChzYW1wbGVzLmxlbmd0aCA+PSAzKSB7XG4gICAgICAgIGNvbnN0IGxhc3REdHMgPSBzYW1wbGVzW3NhbXBsZXMubGVuZ3RoIC0gMV0uZHRzXG4gICAgICAgIGNvbnN0IGZpcnN0RHRzID0gc2FtcGxlc1swXS5kdHNcbiAgICAgICAgY29uc3QgZHVyYXRpb25BdmcgPSAobGFzdER0cyAtIGZpcnN0RHRzKSAvIHNhbXBsZXMubGVuZ3RoXG5cbiAgICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguYWJzKG1ldGEucmVmU2FtcGxlRHVyYXRpb24gLSBkdXJhdGlvbkF2ZykgPD0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA/IG1ldGEucmVmU2FtcGxlRHVyYXRpb24gOiBkdXJhdGlvbkF2ZzsgLy8g5bCGcmVmU2FtcGxlRHVyYXRpb27ph43nva7kuLrorqHnrpflkI7nmoTlubPlnYflgLxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6K6w5b2V5oiq5q2i55uu5YmN5LiA5YWx5pKt5pS+5LqG5aSa5bCR5binXG4gICAqL1xuICByZWNvcmRTYW1wbGVzQ291bnQgKCkge1xuICAgIGNvbnN0IHsgYXVkaW9UcmFjaywgdmlkZW9UcmFjayB9ID0gdGhpc1xuXG4gICAgdGhpcy5hbGxBdWRpb1NhbXBsZXNDb3VudCArPSBhdWRpb1RyYWNrLnNhbXBsZXMubGVuZ3RoXG4gICAgdGhpcy5hbGxWaWRlb1NhbXBsZXNDb3VudCArPSB2aWRlb1RyYWNrLnNhbXBsZXMubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICog5Y676Zmk5LiN5ZCI5rOV55qE5bin77yI5YCS6YCA44CB6YeN5aSN5bin77yJXG4gICAqL1xuICByZW1vdmVJbnZhbGlkU2FtcGxlcyAoKSB7XG4gICAgY29uc3QgeyBfZmlyc3RWaWRlb1NhbXBsZSwgX2ZpcnN0QXVkaW9TYW1wbGUgfSA9IHRoaXNcblxuICAgIHRoaXMuYXVkaW9UcmFjay5zYW1wbGVzID0gdGhpcy5hdWRpb1RyYWNrLnNhbXBsZXMuZmlsdGVyKChzYW1wbGUpID0+IHtcbiAgICAgIHJldHVybiBzYW1wbGUuZHRzID49IF9maXJzdEF1ZGlvU2FtcGxlLmR0cyAmJiAodGhpcy5sYXN0QXVkaW9EdHMgPT09IHVuZGVmaW5lZCB8fCBzYW1wbGUuZHRzID4gdGhpcy5sYXN0QXVkaW9EdHMpXG4gICAgfSlcblxuICAgIHRoaXMudmlkZW9UcmFjay5zYW1wbGVzID0gdGhpcy52aWRlb1RyYWNrLnNhbXBsZXMuZmlsdGVyKChzYW1wbGUpID0+IHtcbiAgICAgIHJldHVybiBzYW1wbGUuZHRzID49IF9maXJzdFZpZGVvU2FtcGxlLmR0cyAmJiAodGhpcy5sYXN0VmlkZW9EdHMgPT09IHVuZGVmaW5lZCB8fCBzYW1wbGUuZHRzID4gdGhpcy5sYXN0VmlkZW9EdHMpXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBzb3J0QXVkaW9TYW1wbGVzIChzYW1wbGVzKSB7XG4gICAgaWYgKHNhbXBsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gc2FtcGxlc1xuICAgIH1cblxuICAgIHJldHVybiBzYW1wbGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIHJldHVybiBhLmR0cyAtIGIuZHRzXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDlr7vmib5kdHPmnIDlsI/nmoRzYW1wbGVcbiAgICogQHBhcmFtIHNhbXBsZXNcbiAgICovXG4gIHN0YXRpYyBmaW5kRmlyc3RBdWRpb1NhbXBsZSAoc2FtcGxlcykge1xuICAgIGlmICghc2FtcGxlcyB8fCBzYW1wbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gQ29tcGF0aWJpbGl0eS5zb3J0QXVkaW9TYW1wbGVzKHNhbXBsZXMpWzBdXG4gIH1cblxuICBzdGF0aWMgZmluZEZpcnN0VmlkZW9TYW1wbGUgKHNhbXBsZXMpIHtcbiAgICBpZiAoIXNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IHNvcnRlZCA9IHNhbXBsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGEuZHRzIC0gYi5kdHM7XG4gICAgfSlcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzb3J0ZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChzb3J0ZWRbaV0uaXNLZXlmcmFtZSkge1xuICAgICAgICByZXR1cm4gc29ydGVkW2ldXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gIH1cblxuICBnZXQgYXVkaW9UcmFjayAoKSB7XG4gICAgaWYgKHRoaXMudHJhY2tzKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFja3MuYXVkaW9UcmFja1xuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHZpZGVvVHJhY2sgKCkge1xuICAgIGlmICh0aGlzLnRyYWNrcykge1xuICAgICAgcmV0dXJuIHRoaXMudHJhY2tzLnZpZGVvVHJhY2tcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQ29tcGF0aWJpbGl0eTtcbiIsImNsYXNzIEdvbG9tYiB7XG4gIGNvbnN0cnVjdG9yICh1aW50OGFycmF5KSB7XG4gICAgdGhpcy5UQUcgPSAnR29sb21iJ1xuICAgIHRoaXMuX2J1ZmZlciA9IHVpbnQ4YXJyYXlcbiAgICB0aGlzLl9idWZmZXJJbmRleCA9IDBcbiAgICB0aGlzLl90b3RhbEJ5dGVzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoXG4gICAgdGhpcy5fdG90YWxCaXRzID0gdWludDhhcnJheS5ieXRlTGVuZ3RoICogOFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkID0gMFxuICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgPSAwXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9idWZmZXIgPSBudWxsXG4gIH1cblxuICBfZmlsbEN1cnJlbnRXb3JkICgpIHtcbiAgICBsZXQgYnVmZmVyQnl0ZXNMZWZ0ID0gdGhpcy5fdG90YWxCeXRlcyAtIHRoaXMuX2J1ZmZlckluZGV4XG4gICAgaWYgKGJ1ZmZlckJ5dGVzTGVmdCA8PSAwKSB7XG4gICAgICAvLyBUT0RPIOW8guW4uOWkhOeQhlxuICAgIH1cblxuICAgIGxldCBieXRlc1JlYWQgPSBNYXRoLm1pbig0LCBidWZmZXJCeXRlc0xlZnQpXG4gICAgbGV0IHdvcmQgPSBuZXcgVWludDhBcnJheSg0KVxuICAgIHdvcmQuc2V0KHRoaXMuX2J1ZmZlci5zdWJhcnJheSh0aGlzLl9idWZmZXJJbmRleCwgdGhpcy5fYnVmZmVySW5kZXggKyBieXRlc1JlYWQpKVxuICAgIHRoaXMuX2N1cnJlbnRXb3JkID0gbmV3IERhdGFWaWV3KHdvcmQuYnVmZmVyKS5nZXRVaW50MzIoMCwgZmFsc2UpXG5cbiAgICB0aGlzLl9idWZmZXJJbmRleCArPSBieXRlc1JlYWRcbiAgICB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0ID0gYnl0ZXNSZWFkICogOFxuICB9XG5cbiAgcmVhZEJpdHMgKGJpdHMpIHtcbiAgICBpZiAoYml0cyA+IDMyKSB7XG4gICAgICAvLyBUT0RPXG4gICAgfVxuXG4gICAgaWYgKGJpdHMgPD0gdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdCkge1xuICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuX2N1cnJlbnRXb3JkID4+PiAoMzIgLSBiaXRzKVxuICAgICAgdGhpcy5fY3VycmVudFdvcmQgPDw9IGJpdHNcbiAgICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgLT0gYml0c1xuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0ID8gdGhpcy5fY3VycmVudFdvcmQgOiAwXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcmVzdWx0ID4+PiAoMzIgLSB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0KVxuICAgIGxldCBiaXRzTmVlZExlZnQgPSBiaXRzIC0gdGhpcy5fY3VycmVudFdvcmRCaXRzTGVmdFxuXG4gICAgdGhpcy5fZmlsbEN1cnJlbnRXb3JkKClcbiAgICBsZXQgYml0c1JlYWROZXh0ID0gTWF0aC5taW4oYml0c05lZWRMZWZ0LCB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0KVxuXG4gICAgbGV0IHJlc3VsdDIgPSB0aGlzLl9jdXJyZW50V29yZCA+Pj4gKDMyIC0gYml0c1JlYWROZXh0KVxuICAgIHRoaXMuX2N1cnJlbnRXb3JkIDw8PSBiaXRzUmVhZE5leHRcbiAgICB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0IC09IGJpdHNSZWFkTmV4dFxuXG4gICAgcmVzdWx0ID0gKHJlc3VsdCA8PCBiaXRzUmVhZE5leHQpIHwgcmVzdWx0MlxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHJlYWRCb29sICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkQml0cygxKSA9PT0gMVxuICB9XG5cbiAgcmVhZEJ5dGUgKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDgpXG4gIH1cblxuICBfc2tpcExlYWRpbmdaZXJvICgpIHtcbiAgICBsZXQgemVyb0NvdW50XG4gICAgZm9yICh6ZXJvQ291bnQgPSAwOyB6ZXJvQ291bnQgPCB0aGlzLl9jdXJyZW50V29yZEJpdHNMZWZ0OyB6ZXJvQ291bnQrKykge1xuICAgICAgaWYgKCh0aGlzLl9jdXJyZW50V29yZCAmICgweDgwMDAwMDAwID4+PiB6ZXJvQ291bnQpKSAhPT0gMCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50V29yZCA8PD0gemVyb0NvdW50XG4gICAgICAgIHRoaXMuX2N1cnJlbnRXb3JkQml0c0xlZnQgLT0gemVyb0NvdW50XG4gICAgICAgIHJldHVybiB6ZXJvQ291bnRcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fZmlsbEN1cnJlbnRXb3JkKClcbiAgICByZXR1cm4gemVyb0NvdW50ICsgdGhpcy5fc2tpcExlYWRpbmdaZXJvKClcbiAgfVxuXG4gIHJlYWRVRUcgKCkgeyAvLyB1bnNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbiAgICBsZXQgbGVhZGluZ1plcm9zID0gdGhpcy5fc2tpcExlYWRpbmdaZXJvKClcbiAgICByZXR1cm4gdGhpcy5yZWFkQml0cyhsZWFkaW5nWmVyb3MgKyAxKSAtIDFcbiAgfVxuXG4gIHJlYWRTRUcgKCkgeyAvLyBzaWduZWQgZXhwb25lbnRpYWwgZ29sb21iXG4gICAgbGV0IHZhbHVlID0gdGhpcy5yZWFkVUVHKClcbiAgICBpZiAodmFsdWUgJiAweDAxKSB7XG4gICAgICByZXR1cm4gKHZhbHVlICsgMSkgPj4+IDFcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0xICogKHZhbHVlID4+PiAxKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHb2xvbWJcbiIsImltcG9ydCBTcHNQYXJzZXIgZnJvbSAnLi9zcHMnO1xuY2xhc3MgTmFsdW5pdCB7XG4gIHN0YXRpYyBnZXROYWx1bml0cyAoYnVmZmVyKSB7XG4gICAgaWYgKGJ1ZmZlci5sZW5ndGggLSBidWZmZXIucG9zaXRpb24gPCA0KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgbGV0IGJ1ZiA9IGJ1ZmZlci5kYXRhdmlldztcbiAgICBsZXQgcG9zaXRpb24gPSBidWZmZXIucG9zaXRpb247XG4gICAgaWYgKGJ1Zi5nZXRJbnQzMihwb3NpdGlvbikgPT09IDEgfHxcbiAgICAoYnVmLmdldEludDE2KHBvc2l0aW9uKSA9PT0gMCAmJiBidWYuZ2V0SW50OChwb3NpdGlvbiArIDIpID09PSAxKSkge1xuICAgICAgcmV0dXJuIE5hbHVuaXQuZ2V0QW5uZXhiTmFscyhidWZmZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTmFsdW5pdC5nZXRBdmNjTmFscyhidWZmZXIpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRBbm5leGJOYWxzIChidWZmZXIpIHtcbiAgICBsZXQgbmFscyA9IFtdO1xuICAgIGxldCBwb3NpdGlvbiA9IE5hbHVuaXQuZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIoYnVmZmVyKTtcbiAgICBsZXQgc3RhcnQgPSBwb3NpdGlvbi5wb3M7XG4gICAgbGV0IGVuZCA9IHN0YXJ0O1xuICAgIHdoaWxlIChzdGFydCA8IGJ1ZmZlci5sZW5ndGggLSA0KSB7XG4gICAgICBsZXQgaGVhZGVyID0gYnVmZmVyLmJ1ZmZlci5zbGljZShzdGFydCwgc3RhcnQgKyBwb3NpdGlvbi5oZWFkZXJMZW5ndGgpO1xuICAgICAgaWYgKHBvc2l0aW9uLnBvcyA9PT0gYnVmZmVyLnBvc2l0aW9uKSB7XG4gICAgICAgIGJ1ZmZlci5za2lwKHBvc2l0aW9uLmhlYWRlckxlbmd0aCk7XG4gICAgICB9XG4gICAgICBwb3NpdGlvbiA9IE5hbHVuaXQuZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIoYnVmZmVyKTtcbiAgICAgIGVuZCA9IHBvc2l0aW9uLnBvcztcbiAgICAgIGxldCBib2R5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlci5zbGljZShzdGFydCArIGhlYWRlci5ieXRlTGVuZ3RoLCBlbmQpKTtcbiAgICAgIGxldCB1bml0ID0ge2hlYWRlciwgYm9keX07XG4gICAgICBOYWx1bml0LmFuYWx5c2VOYWwodW5pdCk7XG4gICAgICBuYWxzLnB1c2godW5pdCk7XG4gICAgICBidWZmZXIuc2tpcChlbmQgLSBidWZmZXIucG9zaXRpb24pO1xuICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgfVxuICAgIHJldHVybiBuYWxzO1xuICB9XG5cbiAgc3RhdGljIGdldEF2Y2NOYWxzIChidWZmZXIpIHtcbiAgICBsZXQgbmFscyA9IFtdO1xuICAgIHdoaWxlIChidWZmZXIucG9zaXRpb24gPCBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgbGV0IGxlbmd0aCA9IGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQzMihidWZmZXIucG9zaXRpb24pO1xuICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggLSBidWZmZXIucG9zaXRpb24gPj0gbGVuZ3RoKSB7XG4gICAgICAgIGxldCBoZWFkZXIgPSBidWZmZXIuYnVmZmVyLnNsaWNlKGJ1ZmZlci5wb3NpdGlvbiwgYnVmZmVyLnBvc2l0aW9uICsgNCk7XG4gICAgICAgIGJ1ZmZlci5za2lwKDQpXG4gICAgICAgIGxldCBib2R5ID0gYnVmZmVyLmJ1ZmZlci5zbGljZShidWZmZXIucG9zaXRpb24sIGJ1ZmZlci5wb3NpdGlvbiArIGxlbmd0aCk7XG4gICAgICAgIGJ1ZmZlci5za2lwKGxlbmd0aCk7XG4gICAgICAgIGxldCB1bml0ID0ge2hlYWRlciwgYm9keX07XG4gICAgICAgIE5hbHVuaXQuYW5hbHlzZU5hbCh1bml0KTtcbiAgICAgICAgbmFscy5wdXNoKHVuaXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuYWxzO1xuICB9XG5cbiAgc3RhdGljIGFuYWx5c2VOYWwgKHVuaXQpIHtcbiAgICBsZXQgdHlwZSA9IHVuaXQuYm9keVswXSAmIDB4MWY7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIC8vIE5EUlxuICAgICAgICB1bml0Lm5kciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICAvLyBJRFJcbiAgICAgICAgdW5pdC5pZHIgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjpcbiAgICAgICAgLy8gU0VJXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA3OlxuICAgICAgICAvLyBTUFNcbiAgICAgICAgdW5pdC5zcHMgPSBTcHNQYXJzZXIucGFyc2VTUFModW5pdC5ib2R5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIC8vIFBQU1xuICAgICAgICB1bml0LnBwcyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5OlxuICAgICAgICAvLyBBVURcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0SGVhZGVyUG9zaXRpb25Bbm5leEIgKGJ1ZmZlcikge1xuICAgIC8vIHNlcGVyYXRlXG4gICAgbGV0IHBvcyA9IGJ1ZmZlci5wb3NpdGlvbjtcbiAgICBsZXQgaGVhZGVyTGVuZ3RoID0gMDtcbiAgICB3aGlsZSAoaGVhZGVyTGVuZ3RoICE9PSAzICYmIGhlYWRlckxlbmd0aCAhPT0gNCAmJiBwb3MgPCBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MpID09PSAwKSB7XG4gICAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICAvLyAweDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDQ7XG4gICAgICAgIH0gZWxzZSBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDgocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICBoZWFkZXJMZW5ndGggPSAzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3MrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zID09PSBidWZmZXIubGVuZ3RoIC0gNCkge1xuICAgICAgaWYgKGJ1ZmZlci5kYXRhdmlldy5nZXRJbnQxNihwb3MpID09PSAwKSB7XG4gICAgICAgIGlmIChidWZmZXIuZGF0YXZpZXcuZ2V0SW50MTYocG9zICsgMikgPT09IDEpIHtcbiAgICAgICAgICAvLyAweDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgICBpZiAoYnVmZmVyLmRhdGF2aWV3LmdldEludDE2KHBvcykgPT09IDAgJiYgYnVmZmVyLmRhdGF2aWV3LmdldEludDgocG9zKSA9PT0gMSkge1xuICAgICAgICAgIC8vIDB4MDAwMDAwMVxuICAgICAgICAgIGhlYWRlckxlbmd0aCA9IDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9zID0gYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge3BvcywgaGVhZGVyTGVuZ3RofTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBdmNjIChzcHMsIHBwcykge1xuICAgIGxldCByZXQgPSBuZXcgVWludDhBcnJheShzcHMuYnl0ZUxlbmd0aCArIHBwcy5ieXRlTGVuZ3RoICsgMTEpO1xuICAgIHJldFswXSA9IDB4MDE7XG4gICAgcmV0WzFdID0gc3BzWzFdO1xuICAgIHJldFsyXSA9IHNwc1syXTtcbiAgICByZXRbM10gPSBzcHNbM107XG4gICAgcmV0WzRdID0gMjU1O1xuICAgIHJldFs1XSA9IDIyNTtcblxuICAgIGxldCBvZmZzZXQgPSA2O1xuXG4gICAgcmV0LnNldChuZXcgVWludDhBcnJheShbKHNwcy5ieXRlTGVuZ3RoID4+PiA4KSAmIDB4ZmYsIHNwcy5ieXRlTGVuZ3RoICYgMHhmZl0pLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSAyO1xuICAgIHJldC5zZXQoc3BzLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBzcHMuYnl0ZUxlbmd0aDtcblxuICAgIHJldFtvZmZzZXRdID0gMTtcbiAgICBvZmZzZXQrKztcblxuICAgIHJldC5zZXQobmV3IFVpbnQ4QXJyYXkoWyhwcHMuYnl0ZUxlbmd0aCA+Pj4gOCkgJiAweGZmLCBwcHMuYnl0ZUxlbmd0aCAmIDB4ZmZdKSwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gMjtcbiAgICByZXQuc2V0KHBwcywgb2Zmc2V0KTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5hbHVuaXQ7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgICovXG4vKiBlc2xpbnQtZGlzYWJsZSBvbmUtdmFyICAqL1xuaW1wb3J0IEdvbG9tYiBmcm9tICcuL2dvbG9tYidcblxuY2xhc3MgU1BTUGFyc2VyIHtcbiAgc3RhdGljIF9lYnNwMnJic3AgKHVpbnQ4YXJyYXkpIHtcbiAgICBsZXQgc3JjID0gdWludDhhcnJheVxuICAgIGxldCBzcmNMZW5ndGggPSBzcmMuYnl0ZUxlbmd0aFxuICAgIGxldCBkc3QgPSBuZXcgVWludDhBcnJheShzcmNMZW5ndGgpXG4gICAgbGV0IGRzdElkeCA9IDBcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3JjTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpID49IDIpIHtcbiAgICAgICAgaWYgKHNyY1tpXSA9PT0gMHgwMyAmJiBzcmNbaSAtIDFdID09PSAweDAwICYmIHNyY1tpIC0gMl0gPT09IDB4MDApIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkc3RbZHN0SWR4XSA9IHNyY1tpXVxuICAgICAgZHN0SWR4KytcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZHN0LmJ1ZmZlciwgMCwgZHN0SWR4KVxuICB9XG5cbiAgc3RhdGljIHBhcnNlU1BTICh1aW50OGFycmF5KSB7XG4gICAgbGV0IHJic3AgPSBTUFNQYXJzZXIuX2Vic3AycmJzcCh1aW50OGFycmF5KVxuICAgIGxldCBnYiA9IG5ldyBHb2xvbWIocmJzcClcblxuICAgIGdiLnJlYWRCeXRlKClcbiAgICBsZXQgcHJvZmlsZUlkYyA9IGdiLnJlYWRCeXRlKClcbiAgICBnYi5yZWFkQnl0ZSgpXG4gICAgbGV0IGxldmVsSWRjID0gZ2IucmVhZEJ5dGUoKVxuICAgIGdiLnJlYWRVRUcoKVxuXG4gICAgbGV0IHByb2ZpbGVfc3RyaW5nID0gU1BTUGFyc2VyLmdldFByb2ZpbGVTdHJpbmcocHJvZmlsZUlkYylcbiAgICBsZXQgbGV2ZWxfc3RyaW5nID0gU1BTUGFyc2VyLmdldExldmVsU3RyaW5nKGxldmVsSWRjKVxuICAgIGxldCBjaHJvbWFfZm9ybWF0X2lkYyA9IDFcbiAgICBsZXQgY2hyb21hX2Zvcm1hdCA9IDQyMFxuICAgIGxldCBjaHJvbWFfZm9ybWF0X3RhYmxlID0gWzAsIDQyMCwgNDIyLCA0NDRdXG4gICAgbGV0IGJpdF9kZXB0aCA9IDhcblxuICAgIGlmIChwcm9maWxlSWRjID09PSAxMDAgfHwgcHJvZmlsZUlkYyA9PT0gMTEwIHx8IHByb2ZpbGVJZGMgPT09IDEyMiB8fFxuICAgICAgcHJvZmlsZUlkYyA9PT0gMjQ0IHx8IHByb2ZpbGVJZGMgPT09IDQ0IHx8IHByb2ZpbGVJZGMgPT09IDgzIHx8XG4gICAgICBwcm9maWxlSWRjID09PSA4NiB8fCBwcm9maWxlSWRjID09PSAxMTggfHwgcHJvZmlsZUlkYyA9PT0gMTI4IHx8XG4gICAgICBwcm9maWxlSWRjID09PSAxMzggfHwgcHJvZmlsZUlkYyA9PT0gMTQ0KSB7XG4gICAgICBjaHJvbWFfZm9ybWF0X2lkYyA9IGdiLnJlYWRVRUcoKVxuICAgICAgaWYgKGNocm9tYV9mb3JtYXRfaWRjID09PSAzKSB7XG4gICAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgICB9XG4gICAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPD0gMykge1xuICAgICAgICBjaHJvbWFfZm9ybWF0ID0gY2hyb21hX2Zvcm1hdF90YWJsZVtjaHJvbWFfZm9ybWF0X2lkY11cbiAgICAgIH1cblxuICAgICAgYml0X2RlcHRoID0gZ2IucmVhZFVFRygpICsgOFxuICAgICAgZ2IucmVhZFVFRygpXG4gICAgICBnYi5yZWFkQml0cygxKVxuICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHtcbiAgICAgICAgbGV0IHNjYWxpbmdfbGlzdF9jb3VudCA9IChjaHJvbWFfZm9ybWF0X2lkYyAhPT0gMykgPyA4IDogMTJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2FsaW5nX2xpc3RfY291bnQ7IGkrKykge1xuICAgICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgICAgICBpZiAoaSA8IDYpIHtcbiAgICAgICAgICAgICAgU1BTUGFyc2VyLl9za2lwU2NhbGluZ0xpc3QoZ2IsIDE2KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgU1BTUGFyc2VyLl9za2lwU2NhbGluZ0xpc3QoZ2IsIDY0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnYi5yZWFkVUVHKClcbiAgICBsZXQgcGljX29yZGVyX2NudF90eXBlID0gZ2IucmVhZFVFRygpXG4gICAgaWYgKHBpY19vcmRlcl9jbnRfdHlwZSA9PT0gMCkge1xuICAgICAgZ2IucmVhZFVFRygpXG4gICAgfSBlbHNlIGlmIChwaWNfb3JkZXJfY250X3R5cGUgPT09IDEpIHtcbiAgICAgIGdiLnJlYWRCaXRzKDEpXG4gICAgICBnYi5yZWFkU0VHKClcbiAgICAgIGdiLnJlYWRTRUcoKVxuICAgICAgbGV0IG51bV9yZWZfZnJhbWVzX2luX3BpY19vcmRlcl9jbnRfY3ljbGUgPSBnYi5yZWFkVUVHKClcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZTsgaSsrKSB7XG4gICAgICAgIGdiLnJlYWRTRUcoKVxuICAgICAgfVxuICAgIH1cbiAgICBnYi5yZWFkVUVHKClcbiAgICBnYi5yZWFkQml0cygxKVxuXG4gICAgbGV0IHBpY193aWR0aF9pbl9tYnNfbWludXMxID0gZ2IucmVhZFVFRygpXG4gICAgbGV0IHBpY19oZWlnaHRfaW5fbWFwX3VuaXRzX21pbnVzMSA9IGdiLnJlYWRVRUcoKVxuXG4gICAgbGV0IGZyYW1lX21ic19vbmx5X2ZsYWcgPSBnYi5yZWFkQml0cygxKVxuICAgIGlmIChmcmFtZV9tYnNfb25seV9mbGFnID09PSAwKSB7XG4gICAgICBnYi5yZWFkQml0cygxKVxuICAgIH1cbiAgICBnYi5yZWFkQml0cygxKVxuXG4gICAgbGV0IGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgPSAwXG4gICAgbGV0IGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0ID0gMFxuICAgIGxldCBmcmFtZV9jcm9wX3RvcF9vZmZzZXQgPSAwXG4gICAgbGV0IGZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCA9IDBcblxuICAgIGxldCBmcmFtZV9jcm9wcGluZ19mbGFnID0gZ2IucmVhZEJvb2woKVxuICAgIGlmIChmcmFtZV9jcm9wcGluZ19mbGFnKSB7XG4gICAgICBmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgICBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCA9IGdiLnJlYWRVRUcoKVxuICAgICAgZnJhbWVfY3JvcF90b3Bfb2Zmc2V0ID0gZ2IucmVhZFVFRygpXG4gICAgICBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQgPSBnYi5yZWFkVUVHKClcbiAgICB9XG5cbiAgICBsZXQgcGFyX3dpZHRoID0gMSwgcGFyX2hlaWdodCA9IDFcbiAgICBsZXQgZnBzID0gMCwgZnBzX2ZpeGVkID0gdHJ1ZSwgZnBzX251bSA9IDAsIGZwc19kZW4gPSAwXG5cbiAgICBsZXQgdnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnID0gZ2IucmVhZEJvb2woKVxuICAgIGlmICh2dWlfcGFyYW1ldGVyc19wcmVzZW50X2ZsYWcpIHtcbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7IC8vIGFzcGVjdF9yYXRpb19pbmZvX3ByZXNlbnRfZmxhZ1xuICAgICAgICBsZXQgYXNwZWN0X3JhdGlvX2lkYyA9IGdiLnJlYWRCeXRlKClcbiAgICAgICAgbGV0IHBhcl93X3RhYmxlID0gWzEsIDEyLCAxMCwgMTYsIDQwLCAyNCwgMjAsIDMyLCA4MCwgMTgsIDE1LCA2NCwgMTYwLCA0LCAzLCAyXVxuICAgICAgICBsZXQgcGFyX2hfdGFibGUgPSBbMSwgMTEsIDExLCAxMSwgMzMsIDExLCAxMSwgMTEsIDMzLCAxMSwgMTEsIDMzLCA5OSwgMywgMiwgMV1cblxuICAgICAgICBpZiAoYXNwZWN0X3JhdGlvX2lkYyA+IDAgJiYgYXNwZWN0X3JhdGlvX2lkYyA8IDE2KSB7XG4gICAgICAgICAgcGFyX3dpZHRoID0gcGFyX3dfdGFibGVbYXNwZWN0X3JhdGlvX2lkYyAtIDFdXG4gICAgICAgICAgcGFyX2hlaWdodCA9IHBhcl9oX3RhYmxlW2FzcGVjdF9yYXRpb19pZGMgLSAxXVxuICAgICAgICB9IGVsc2UgaWYgKGFzcGVjdF9yYXRpb19pZGMgPT09IDI1NSkge1xuICAgICAgICAgIHBhcl93aWR0aCA9IGdiLnJlYWRCeXRlKCkgPDwgOCB8IGdiLnJlYWRCeXRlKClcbiAgICAgICAgICBwYXJfaGVpZ2h0ID0gZ2IucmVhZEJ5dGUoKSA8PCA4IHwgZ2IucmVhZEJ5dGUoKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRCb29sKClcbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRCaXRzKDQpXG4gICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgICAgZ2IucmVhZEJpdHMoMjQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGdiLnJlYWRVRUcoKVxuICAgICAgICBnYi5yZWFkVUVHKClcbiAgICAgIH1cbiAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7XG4gICAgICAgIGxldCBudW1fdW5pdHNfaW5fdGljayA9IGdiLnJlYWRCaXRzKDMyKVxuICAgICAgICBsZXQgdGltZV9zY2FsZSA9IGdiLnJlYWRCaXRzKDMyKVxuICAgICAgICBmcHNfZml4ZWQgPSBnYi5yZWFkQm9vbCgpXG5cbiAgICAgICAgZnBzX251bSA9IHRpbWVfc2NhbGVcbiAgICAgICAgZnBzX2RlbiA9IG51bV91bml0c19pbl90aWNrICogMlxuICAgICAgICBmcHMgPSBmcHNfbnVtIC8gZnBzX2RlblxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwYXJTY2FsZSA9IDFcbiAgICBpZiAocGFyX3dpZHRoICE9PSAxIHx8IHBhcl9oZWlnaHQgIT09IDEpIHtcbiAgICAgIHBhclNjYWxlID0gcGFyX3dpZHRoIC8gcGFyX2hlaWdodFxuICAgIH1cblxuICAgIGxldCBjcm9wX3VuaXRfeCA9IDAsIGNyb3BfdW5pdF95ID0gMFxuICAgIGlmIChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMCkge1xuICAgICAgY3JvcF91bml0X3ggPSAxXG4gICAgICBjcm9wX3VuaXRfeSA9IDIgLSBmcmFtZV9tYnNfb25seV9mbGFnXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBzdWJfd2MgPSAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDMpID8gMSA6IDJcbiAgICAgIGxldCBzdWJfaGMgPSAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDEpID8gMiA6IDFcbiAgICAgIGNyb3BfdW5pdF94ID0gc3ViX3djXG4gICAgICBjcm9wX3VuaXRfeSA9IHN1Yl9oYyAqICgyIC0gZnJhbWVfbWJzX29ubHlfZmxhZylcbiAgICB9XG5cbiAgICBsZXQgY29kZWNfd2lkdGggPSAocGljX3dpZHRoX2luX21ic19taW51czEgKyAxKSAqIDE2XG4gICAgbGV0IGNvZGVjX2hlaWdodCA9ICgyIC0gZnJhbWVfbWJzX29ubHlfZmxhZykgKiAoKHBpY19oZWlnaHRfaW5fbWFwX3VuaXRzX21pbnVzMSArIDEpICogMTYpXG5cbiAgICBjb2RlY193aWR0aCAtPSAoZnJhbWVfY3JvcF9sZWZ0X29mZnNldCArIGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0KSAqIGNyb3BfdW5pdF94XG4gICAgY29kZWNfaGVpZ2h0IC09IChmcmFtZV9jcm9wX3RvcF9vZmZzZXQgKyBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQpICogY3JvcF91bml0X3lcblxuICAgIGxldCBwcmVzZW50X3dpZHRoID0gTWF0aC5jZWlsKGNvZGVjX3dpZHRoICogcGFyU2NhbGUpXG5cbiAgICBnYi5kZXN0cm95KClcbiAgICBnYiA9IG51bGxcblxuICAgIHJldHVybiB7XG4gICAgICBwcm9maWxlX3N0cmluZzogcHJvZmlsZV9zdHJpbmcsXG4gICAgICBsZXZlbF9zdHJpbmc6IGxldmVsX3N0cmluZyxcbiAgICAgIGJpdF9kZXB0aDogYml0X2RlcHRoLFxuICAgICAgY2hyb21hX2Zvcm1hdDogY2hyb21hX2Zvcm1hdCxcbiAgICAgIGNocm9tYV9mb3JtYXRfc3RyaW5nOiBTUFNQYXJzZXIuZ2V0Q2hyb21hRm9ybWF0U3RyaW5nKGNocm9tYV9mb3JtYXQpLFxuXG4gICAgICBmcmFtZV9yYXRlOiB7XG4gICAgICAgIGZpeGVkOiBmcHNfZml4ZWQsXG4gICAgICAgIGZwczogZnBzLFxuICAgICAgICBmcHNfZGVuOiBmcHNfZGVuLFxuICAgICAgICBmcHNfbnVtOiBmcHNfbnVtXG4gICAgICB9LFxuXG4gICAgICBwYXJfcmF0aW86IHtcbiAgICAgICAgd2lkdGg6IHBhcl93aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBwYXJfaGVpZ2h0XG4gICAgICB9LFxuXG4gICAgICBjb2RlY19zaXplOiB7XG4gICAgICAgIHdpZHRoOiBjb2RlY193aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjb2RlY19oZWlnaHRcbiAgICAgIH0sXG5cbiAgICAgIHByZXNlbnRfc2l6ZToge1xuICAgICAgICB3aWR0aDogcHJlc2VudF93aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjb2RlY19oZWlnaHRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX3NraXBTY2FsaW5nTGlzdCAoZ2IsIGNvdW50KSB7XG4gICAgbGV0IGxhc3Rfc2NhbGUgPSA4LCBuZXh0X3NjYWxlID0gOFxuICAgIGxldCBkZWx0YV9zY2FsZSA9IDBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIGlmIChuZXh0X3NjYWxlICE9PSAwKSB7XG4gICAgICAgIGRlbHRhX3NjYWxlID0gZ2IucmVhZFNFRygpXG4gICAgICAgIG5leHRfc2NhbGUgPSAobGFzdF9zY2FsZSArIGRlbHRhX3NjYWxlICsgMjU2KSAlIDI1NlxuICAgICAgfVxuICAgICAgbGFzdF9zY2FsZSA9IChuZXh0X3NjYWxlID09PSAwKSA/IGxhc3Rfc2NhbGUgOiBuZXh0X3NjYWxlXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFByb2ZpbGVTdHJpbmcgKHByb2ZpbGVJZGMpIHtcbiAgICBzd2l0Y2ggKHByb2ZpbGVJZGMpIHtcbiAgICAgIGNhc2UgNjY6XG4gICAgICAgIHJldHVybiAnQmFzZWxpbmUnXG4gICAgICBjYXNlIDc3OlxuICAgICAgICByZXR1cm4gJ01haW4nXG4gICAgICBjYXNlIDg4OlxuICAgICAgICByZXR1cm4gJ0V4dGVuZGVkJ1xuICAgICAgY2FzZSAxMDA6XG4gICAgICAgIHJldHVybiAnSGlnaCdcbiAgICAgIGNhc2UgMTEwOlxuICAgICAgICByZXR1cm4gJ0hpZ2gxMCdcbiAgICAgIGNhc2UgMTIyOlxuICAgICAgICByZXR1cm4gJ0hpZ2g0MjInXG4gICAgICBjYXNlIDI0NDpcbiAgICAgICAgcmV0dXJuICdIaWdoNDQ0J1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdVbmtub3duJ1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRMZXZlbFN0cmluZyAobGV2ZWxJZGMpIHtcbiAgICByZXR1cm4gKGxldmVsSWRjIC8gMTApLnRvRml4ZWQoMSlcbiAgfVxuXG4gIHN0YXRpYyBnZXRDaHJvbWFGb3JtYXRTdHJpbmcgKGNocm9tYSkge1xuICAgIHN3aXRjaCAoY2hyb21hKSB7XG4gICAgICBjYXNlIDQyMDpcbiAgICAgICAgcmV0dXJuICc0OjI6MCdcbiAgICAgIGNhc2UgNDIyOlxuICAgICAgICByZXR1cm4gJzQ6MjoyJ1xuICAgICAgY2FzZSA0NDQ6XG4gICAgICAgIHJldHVybiAnNDo0OjQnXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ1Vua25vd24nXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHRvVmlkZW9NZXRhIChzcHNDb25maWcpIHtcbiAgICBsZXQgbWV0YSA9IHt9XG4gICAgaWYgKHNwc0NvbmZpZyAmJiBzcHNDb25maWcuY29kZWNfc2l6ZSkge1xuICAgICAgbWV0YS5jb2RlY1dpZHRoID0gc3BzQ29uZmlnLmNvZGVjX3NpemUud2lkdGhcbiAgICAgIG1ldGEuY29kZWNIZWlnaHQgPSBzcHNDb25maWcuY29kZWNfc2l6ZS5oZWlnaHRcbiAgICAgIG1ldGEucHJlc2VudFdpZHRoID0gc3BzQ29uZmlnLnByZXNlbnRfc2l6ZS53aWR0aFxuICAgICAgbWV0YS5wcmVzZW50SGVpZ2h0ID0gc3BzQ29uZmlnLnByZXNlbnRfc2l6ZS5oZWlnaHRcbiAgICB9XG5cbiAgICBtZXRhLnByb2ZpbGUgPSBzcHNDb25maWcucHJvZmlsZV9zdHJpbmdcbiAgICBtZXRhLmxldmVsID0gc3BzQ29uZmlnLmxldmVsX3N0cmluZ1xuICAgIG1ldGEuYml0RGVwdGggPSBzcHNDb25maWcuYml0X2RlcHRoXG4gICAgbWV0YS5jaHJvbWFGb3JtYXQgPSBzcHNDb25maWcuY2hyb21hX2Zvcm1hdFxuXG4gICAgbWV0YS5wYXJSYXRpbyA9IHtcbiAgICAgIHdpZHRoOiBzcHNDb25maWcucGFyX3JhdGlvLndpZHRoLFxuICAgICAgaGVpZ2h0OiBzcHNDb25maWcucGFyX3JhdGlvLmhlaWdodFxuICAgIH1cblxuICAgIG1ldGEuZnJhbWVSYXRlID0gc3BzQ29uZmlnLmZyYW1lX3JhdGVcblxuICAgIGxldCBmcHNEZW4gPSBtZXRhLmZyYW1lUmF0ZS5mcHNfZGVuXG4gICAgbGV0IGZwc051bSA9IG1ldGEuZnJhbWVSYXRlLmZwc19udW1cbiAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcihtZXRhLnRpbWVzY2FsZSAqIChmcHNEZW4gLyBmcHNOdW0pKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNQU1BhcnNlclxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIEhMU1xuICBNM1U4UGFyc2VyOiByZXF1aXJlKCcuL3NyYy9obHMvZGVtdXhlci9tM3U4cGFyc2VyJykuZGVmYXVsdCxcbiAgVHNEZW11eGVyOiByZXF1aXJlKCcuL3NyYy9obHMvZGVtdXhlci90cycpLmRlZmF1bHQsXG4gIFBsYXlsaXN0OiByZXF1aXJlKCcuL3NyYy9obHMvcGxheWxpc3QnKS5kZWZhdWx0LFxuICBGbHZEZW11eGVyOiByZXF1aXJlKCcuL3NyYy9mbHYvaW5kZXgnKS5kZWZhdWx0XG59O1xuIiwiaW1wb3J0IHsgaXNMZSwgVVRGOCB9IGZyb20gJ3hncGxheWVyLXV0aWxzJ1xuXG5jb25zdCBEQVRBX1RZUEVTID0ge1xuICBOVU1CRVI6IDAsXG4gIEJPT0xFQU46IDEsXG4gIFNUUklORzogMixcbiAgT0JKRUNUOiAzLFxuICBNSVhfQVJSQVk6IDgsXG4gIE9CSkVDVF9FTkQ6IDksXG4gIFNUUklDVF9BUlJBWTogMTAsXG4gIERBVEU6IDExLFxuICBMT05FX1NUUklORzogMTJcbn1cblxuLyoqXG4gKiBtZXRh5L+h5oGv6Kej5p6QXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFNRlBhcnNlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLnJlYWRPZmZzZXQgPSB0aGlzLm9mZnNldFxuICB9XG5cbiAgcmVzb2x2ZSAobWV0YSwgc2l6ZSkge1xuICAgIGlmIChzaXplIDwgMykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgZW5vdWdoIGRhdGEgZm9yIG1ldGFpbmZvJylcbiAgICB9XG4gICAgY29uc3QgbWV0YURhdGEgPSB7fVxuICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBhcnNlVmFsdWUobWV0YSlcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucGFyc2VWYWx1ZShtZXRhLCBzaXplIC0gbmFtZS5ib2R5U2l6ZSlcbiAgICBtZXRhRGF0YVtuYW1lLmRhdGFdID0gdmFsdWUuZGF0YVxuXG4gICAgdGhpcy5yZXNldFN0YXR1cygpXG4gICAgcmV0dXJuIG1ldGFEYXRhXG4gIH1cblxuICByZXNldFN0YXR1cyAoKSB7XG4gICAgdGhpcy5vZmZzZXQgPSAwXG4gICAgdGhpcy5yZWFkT2Zmc2V0ID0gdGhpcy5vZmZzZXRcbiAgfVxuXG4gIHBhcnNlU3RyaW5nIChidWZmZXIpIHtcbiAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhidWZmZXIsIHRoaXMucmVhZE9mZnNldClcbiAgICBjb25zdCBzdHJMZW4gPSBkdi5nZXRVaW50MTYoMCwgIWlzTGUpXG4gICAgbGV0IHN0ciA9ICcnXG4gICAgaWYgKHN0ckxlbiA+IDApIHtcbiAgICAgIHN0ciA9IFVURjguZGVjb2RlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0ICsgMiwgc3RyTGVuKSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gJydcbiAgICB9XG4gICAgbGV0IHNpemUgPSBzdHJMZW4gKyAyXG4gICAgdGhpcy5yZWFkT2Zmc2V0ICs9IHNpemVcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogc3RyLFxuICAgICAgYm9keVNpemU6IHN0ckxlbiArIDJcbiAgICB9XG4gIH1cblxuICBwYXJzZURhdGUgKGJ1ZmZlciwgc2l6ZSkge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0LCBzaXplKVxuICAgIGxldCB0cyA9IGR2LmdldEZsb2F0NjQoMCwgIWlzTGUpXG4gICAgY29uc3QgdGltZU9mZnNldCA9IGR2LmdldEludDE2KDgsICFpc0xlKVxuICAgIHRzICs9IHRpbWVPZmZzZXQgKiA2MCAqIDEwMDBcblxuICAgIHRoaXMucmVhZE9mZnNldCArPSAxMFxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBuZXcgRGF0ZSh0cyksXG4gICAgICBib2R5U2l6ZTogMTBcbiAgICB9XG4gIH1cblxuICBwYXJzZU9iamVjdCAoYnVmZmVyLCBzaXplKSB7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBzaXplKVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wYXJzZVZhbHVlKGJ1ZmZlciwgc2l6ZSAtIG5hbWUuYm9keVNpemUpXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbmFtZTogbmFtZS5kYXRhLFxuICAgICAgICB2YWx1ZTogdmFsdWUuZGF0YVxuICAgICAgfSxcbiAgICAgIGJvZHlTaXplOiBuYW1lLmJvZHlTaXplICsgdmFsdWUuYm9keVNpemUsXG4gICAgICBpc09iakVuZDogdmFsdWUuaXNPYmpFbmRcbiAgICB9XG4gIH1cblxuICBwYXJzZUxvbmdTdHJpbmcgKGJ1ZmZlcikge1xuICAgIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgdGhpcy5yZWFkT2Zmc2V0KVxuICAgIGNvbnN0IHN0ckxlbiA9IGR2LmdldFVpbnQzMigwLCAhaXNMZSlcbiAgICBsZXQgc3RyID0gJydcbiAgICBpZiAoc3RyTGVuID4gMCkge1xuICAgICAgc3RyID0gVVRGOC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQgKyAyLCBzdHJMZW4pKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSAnJ1xuICAgIH1cbiAgICAvLyBjb25zdCBzaXplID0gc3RyTGVuICsgNDtcbiAgICB0aGlzLnJlYWRPZmZzZXQgKz0gc3RyTGVuICsgNFxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBzdHIsXG4gICAgICBib2R5U2l6ZTogc3RyTGVuICsgNFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmnpBtZXRh5Lit55qE5Y+Y6YePXG4gICAqL1xuICBwYXJzZVZhbHVlIChkYXRhLCBzaXplKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigpXG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgYnVmZmVyID0gZGF0YVxuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIgPSBkYXRhLmJ1ZmZlclxuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBOVU1CRVIsXG4gICAgICBCT09MRUFOLFxuICAgICAgU1RSSU5HLFxuICAgICAgT0JKRUNULFxuICAgICAgTUlYX0FSUkFZLFxuICAgICAgT0JKRUNUX0VORCxcbiAgICAgIFNUUklDVF9BUlJBWSxcbiAgICAgIERBVEUsXG4gICAgICBMT05FX1NUUklOR1xuICAgIH0gPSBEQVRBX1RZUEVTXG4gICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCB0aGlzLnJlYWRPZmZzZXQsIHNpemUpXG4gICAgbGV0IGlzT2JqRW5kID0gZmFsc2VcbiAgICBjb25zdCB0eXBlID0gZGF0YVZpZXcuZ2V0VWludDgoMClcbiAgICBsZXQgb2Zmc2V0ID0gMVxuICAgIHRoaXMucmVhZE9mZnNldCArPSAxXG4gICAgbGV0IHZhbHVlID0gbnVsbFxuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIE5VTUJFUjoge1xuICAgICAgICB2YWx1ZSA9IGRhdGFWaWV3LmdldEZsb2F0NjQoMSwgIWlzTGUpXG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSA4XG4gICAgICAgIG9mZnNldCArPSA4XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIEJPT0xFQU46IHtcbiAgICAgICAgY29uc3QgYm9vbE51bSA9IGRhdGFWaWV3LmdldFVpbnQ4KDEpXG4gICAgICAgIHZhbHVlID0gISFib29sTnVtXG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSAxXG4gICAgICAgIG9mZnNldCArPSAxXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIFNUUklORzoge1xuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlcilcbiAgICAgICAgdmFsdWUgPSBzdHIuZGF0YVxuICAgICAgICBvZmZzZXQgKz0gc3RyLmJvZHlTaXplXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlIE9CSkVDVDoge1xuICAgICAgICB2YWx1ZSA9IHt9XG4gICAgICAgIGxldCBvYmpFbmRTaXplID0gMFxuICAgICAgICBpZiAoZGF0YVZpZXcuZ2V0VWludDMyKHNpemUgLSA0LCAhaXNMZSkgJiAweDAwRkZGRkZGKSB7XG4gICAgICAgICAgb2JqRW5kU2l6ZSA9IDNcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLnJlYWRPZmZzZXQgKz0gb2Zmc2V0IC0gMTtcbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IHNpemUgLSA0KSB7XG4gICAgICAgICAgY29uc3QgYW1mT2JqID0gdGhpcy5wYXJzZU9iamVjdChidWZmZXIsIHNpemUgLSBvZmZzZXQgLSBvYmpFbmRTaXplKVxuICAgICAgICAgIGlmIChhbWZPYmouaXNPYmplY3RFbmQpIHsgYnJlYWsgfVxuICAgICAgICAgIHZhbHVlW2FtZk9iai5kYXRhLm5hbWVdID0gYW1mT2JqLmRhdGEudmFsdWVcbiAgICAgICAgICBvZmZzZXQgKz0gYW1mT2JqLmJvZHlTaXplXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA8PSBzaXplIC0gMykge1xuICAgICAgICAgIGNvbnN0IG1hcmsgPSBkYXRhVmlldy5nZXRVaW50MzIob2Zmc2V0IC0gMSwgIWlzTGUpICYgMHgwMEZGRkZGRlxuICAgICAgICAgIGlmIChtYXJrID09PSA5KSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRPZmZzZXQgKz0gM1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgTUlYX0FSUkFZOiB7XG4gICAgICAgIHZhbHVlID0ge31cbiAgICAgICAgb2Zmc2V0ICs9IDRcbiAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDRcbiAgICAgICAgbGV0IG9iakVuZFNpemUgPSAwXG4gICAgICAgIGlmICgoZGF0YVZpZXcuZ2V0VWludDMyKHNpemUgLSA0LCAhaXNMZSkgJiAweDAwRkZGRkZGKSA9PT0gOSkge1xuICAgICAgICAgIG9iakVuZFNpemUgPSAzXG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgc2l6ZSAtIDgpIHtcbiAgICAgICAgICBjb25zdCBhbWZWYXIgPSB0aGlzLnBhcnNlT2JqZWN0KGJ1ZmZlciwgc2l6ZSAtIG9mZnNldCAtIG9iakVuZFNpemUpXG4gICAgICAgICAgaWYgKGFtZlZhci5pc09iamVjdEVuZCkgeyBicmVhayB9XG4gICAgICAgICAgdmFsdWVbYW1mVmFyLmRhdGEubmFtZV0gPSBhbWZWYXIuZGF0YS52YWx1ZVxuICAgICAgICAgIG9mZnNldCArPSBhbWZWYXIuYm9keVNpemVcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0IDw9IHNpemUgLSAzKSB7XG4gICAgICAgICAgY29uc3QgbWFya2VyID0gZGF0YVZpZXcuZ2V0VWludDMyKG9mZnNldCAtIDEsICFpc0xlKSAmIDB4MDBGRkZGRkZcbiAgICAgICAgICBpZiAobWFya2VyID09PSA5KSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gM1xuICAgICAgICAgICAgdGhpcy5yZWFkT2Zmc2V0ICs9IDNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBPQkpFQ1RfRU5EOiB7XG4gICAgICAgIHZhbHVlID0gbnVsbFxuICAgICAgICBpc09iakVuZCA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBTVFJJQ1RfQVJSQVk6IHtcbiAgICAgICAgdmFsdWUgPSBbXVxuICAgICAgICBjb25zdCBhcnJMZW5ndGggPSBkYXRhVmlldy5nZXRVaW50MzIoMSwgIWlzTGUpXG4gICAgICAgIG9mZnNldCArPSA0XG4gICAgICAgIHRoaXMucmVhZE9mZnNldCArPSA0XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzY3JpcHQgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBzaXplIC0gb2Zmc2V0KVxuICAgICAgICAgIHZhbHVlLnB1c2goc2NyaXB0LmRhdGEpXG4gICAgICAgICAgb2Zmc2V0ICs9IHNjcmlwdC5ib2R5U2l6ZVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgREFURToge1xuICAgICAgICBjb25zdCBkYXRlID0gdGhpcy5wYXJzZURhdGUoYnVmZmVyLCBzaXplIC0gMSlcbiAgICAgICAgdmFsdWUgPSBkYXRlLmRhdGFcbiAgICAgICAgb2Zmc2V0ICs9IGRhdGUuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBMT05FX1NUUklORzoge1xuICAgICAgICBjb25zdCBsb25nU3RyID0gdGhpcy5wYXJzZUxvbmdTdHJpbmcoYnVmZmVyLCBzaXplIC0gMSlcbiAgICAgICAgdmFsdWUgPSBsb25nU3RyLmRhdGFcbiAgICAgICAgb2Zmc2V0ICs9IGxvbmdTdHIuYm9keVNpemVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBvZmZzZXQgPSBzaXplXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHZhbHVlLFxuICAgICAgYm9keVNpemU6IG9mZnNldCxcbiAgICAgIGlzT2JqRW5kOiBpc09iakVuZFxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRVZFTlRTLCBBdWRpb1RyYWNrTWV0YSwgVmlkZW9UcmFja01ldGEgfSBmcm9tICd4Z3BsYXllci11dGlscyc7XG5pbXBvcnQgeyBTcHNQYXJzZXIgfSBmcm9tICd4Z3BsYXllci1jb2RlYyc7XG5pbXBvcnQgeyBWaWRlb1RyYWNrLCBBdWRpb1RyYWNrIH0gZnJvbSAneGdwbGF5ZXItYnVmZmVyJ1xuXG5pbXBvcnQgQU1GUGFyc2VyIGZyb20gJy4vYW1mLXBhcnNlcidcblxuY29uc3QgREVNVVhfRVZFTlRTID0gRVZFTlRTLkRFTVVYX0VWRU5UUztcblxuY2xhc3MgRmx2RGVtdXhlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9maXJzdEZyYWdtZW50TG9hZGVkID0gZmFsc2VcbiAgICB0aGlzLl90cmFja051bSA9IDBcbiAgICB0aGlzLl9oYXNTY3JpcHQgPSBmYWxzZVxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuREVNVVhfU1RBUlQsIHRoaXMuZG9QYXJzZUZsdi5iaW5kKHRoaXMpKVxuICB9XG5cbiAgLyoqXG4gICAqIGlmIHRoZSBmbHYgaGVhZCBpcyB2YWxpZFxuICAgKiBAcGFyYW0gZGF0YVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0ZsdkZpbGUgKGRhdGEpIHtcbiAgICByZXR1cm4gIShkYXRhWzBdICE9PSAweDQ2IHx8IGRhdGFbMV0gIT09IDB4NEMgfHwgZGF0YVsyXSAhPT0gMHg1NiB8fCBkYXRhWzNdICE9PSAweDAxKVxuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoZSBzdHJlYW0gaGFzIGF1ZGlvIG9yIHZpZGVvLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RyZWFtRmxhZyAtIERhdGEgZnJvbSB0aGUgc3RyZWFtIHdoaWNoIGlzIGRlZmluZSB3aGV0aGVyIHRoZSBhdWRpbyAvIHZpZGVvIHRyYWNrIGlzIGV4aXN0LlxuICAgKi9cbiAgc3RhdGljIGdldFBsYXlUeXBlIChzdHJlYW1GbGFnKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgaGFzVmlkZW86IGZhbHNlLFxuICAgICAgaGFzQXVkaW86IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHN0cmVhbUZsYWcgJiAweDAxID4gMCkge1xuICAgICAgcmVzdWx0Lmhhc1ZpZGVvID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChzdHJlYW1GbGFnICYgMHgwNCA+IDApIHtcbiAgICAgIHJlc3VsdC5oYXNBdWRpbyA9IHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBkb1BhcnNlRmx2ICgpIHtcbiAgICBpZiAoIXRoaXMuX2ZpcnN0RnJhZ21lbnRMb2FkZWQpIHtcbiAgICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPCAxMykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IGhlYWRlciA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEzKVxuICAgICAgdGhpcy5wYXJzZUZsdkhlYWRlcihoZWFkZXIpXG4gICAgICB0aGlzLmRvUGFyc2VGbHYoKSAvLyDpgJLlvZLosIPnlKjvvIznu6fnu63op6PmnpBmbHbmtYFcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA8IDExKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbGV0IGNodW5rO1xuICAgICAgZG8ge1xuICAgICAgICBjaHVuayA9IHRoaXMuX3BhcnNlRmx2VGFnKClcbiAgICAgIH0gd2hpbGUgKGNodW5rKVxuXG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFKVxuICAgIH1cbiAgfVxuXG4gIHBhcnNlRmx2SGVhZGVyIChoZWFkZXIpIHtcbiAgICBpZiAoIUZsdkRlbXV4ZXIuaXNGbHZGaWxlKGhlYWRlcikpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIG5ldyBFcnJvcignaW52YWxpZCBmbHYgZmlsZScpKVxuICAgICAgdGhpcy5kb1BhcnNlRmx2KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZmlyc3RGcmFnbWVudExvYWRlZCA9IHRydWVcbiAgICAgIGNvbnN0IHBsYXlUeXBlID0gRmx2RGVtdXhlci5nZXRQbGF5VHlwZShoZWFkZXJbNF0pXG5cbiAgICAgIGlmIChwbGF5VHlwZS5oYXNWaWRlbykge1xuICAgICAgICB0aGlzLmluaXRWaWRlb1RyYWNrKClcbiAgICAgIH1cblxuICAgICAgaWYgKHBsYXlUeXBlLmhhc0F1ZGlvKSB7XG4gICAgICAgIHRoaXMuaW5pdEF1ZGlvVHJhY2soKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmRvUGFyc2VGbHYoKVxuICB9XG5cbiAgLyoqXG4gICAqIGluaXQgZGVmYXVsdCB2aWRlbyB0cmFjayBjb25maWdzXG4gICAqL1xuICBpbml0VmlkZW9UcmFjayAoKSB7XG4gICAgdGhpcy5fdHJhY2tOdW0rK1xuICAgIGxldCB2aWRlb1RyYWNrID0gbmV3IFZpZGVvVHJhY2soKVxuICAgIHZpZGVvVHJhY2subWV0YSA9IG5ldyBWaWRlb1RyYWNrTWV0YSgpXG4gICAgdmlkZW9UcmFjay5pZCA9IHZpZGVvVHJhY2subWV0YS5pZCA9IHRoaXMuX3RyYWNrTnVtXG5cbiAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrID0gdmlkZW9UcmFja1xuICB9XG5cbiAgLyoqXG4gICAqIGluaXQgZGVmYXVsdCBhdWRpbyB0cmFjayBjb25maWdzXG4gICAqL1xuICBpbml0QXVkaW9UcmFjayAoKSB7XG4gICAgdGhpcy5fdHJhY2tOdW0rK1xuICAgIGxldCBhdWRpb1RyYWNrID0gbmV3IEF1ZGlvVHJhY2soKVxuICAgIGF1ZGlvVHJhY2subWV0YSA9IG5ldyBBdWRpb1RyYWNrTWV0YSgpXG4gICAgYXVkaW9UcmFjay5pZCA9IGF1ZGlvVHJhY2subWV0YS5pZCA9IHRoaXMuX3RyYWNrTnVtXG5cbiAgICB0aGlzLnRyYWNrcy5hdWRpb1RyYWNrID0gYXVkaW9UcmFja1xuICB9XG5cbiAgLyoqXG4gICAqIFBhY2thZ2UgdGhlIGRhdGEgYXMgdGhlIGZvbGxvd2luZyBkYXRhIHN0cnVjdHVyZVxuICAgKiB7XG4gICAqICAgIGRhdGE6IFVpbnQ4QXJyYXkuIHRoZSBTdHJlYW0gZGF0YS5cbiAgICogICAgaW5mbzogVGhlIGZpcnN0IGJ5dGUgaW5mbyBvZiB0aGUgVGFnLlxuICAgKiAgICB0YWdUeXBlOiA444CBOeOAgTE4XG4gICAqICAgIHRpbWVTdGFtcDogdGhlIHRpbWVzdGVtcFxuICAgKiB9XG4gICAqL1xuICBfcGFyc2VGbHZUYWcgKCkge1xuICAgIGlmICh0aGlzLmxvYWRlckJ1ZmZlci5sZW5ndGggPCAxMSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgbGV0IGNodW5rID0gdGhpcy5fcGFyc2VGbHZUYWdIZWFkZXIoKVxuICAgIGlmIChjaHVuaykge1xuICAgICAgdGhpcy5fcHJvY2Vzc0NodW5rKGNodW5rKVxuICAgIH1cbiAgICByZXR1cm4gY2h1bmtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgMTEgYnl0ZSB0YWcgSGVhZGVyXG4gICAqL1xuICBfcGFyc2VGbHZUYWdIZWFkZXIgKCkge1xuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgbGV0IGNodW5rID0ge31cblxuICAgIGxldCB0YWdUeXBlID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQob2Zmc2V0LCAxKVxuICAgIG9mZnNldCArPSAxXG5cbiAgICAvLyAyIGJpdCBGTVMgcmVzZXJ2ZWQsIDEgYml0IGZpbHRlcmVkLCA1IGJpdCB0YWcgdHlwZVxuICAgIGNodW5rLmZpbHRlcmVkID0gKHRhZ1R5cGUgJiAzMikgPj4+IDVcbiAgICBjaHVuay50YWdUeXBlID0gdGFnVHlwZSAmIDMxXG5cbiAgICAvLyAzIEJ5dGUgZGF0YXNpemVcbiAgICBjaHVuay5kYXRhc2l6ZSA9IHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KG9mZnNldCwgMylcbiAgICBvZmZzZXQgKz0gM1xuXG4gICAgaWYgKChjaHVuay50YWdUeXBlICE9PSA4ICYmIGNodW5rLnRhZ1R5cGUgIT09IDkgJiYgY2h1bmsudGFnVHlwZSAhPT0gMTEgJiYgY2h1bmsudGFnVHlwZSAhPT0gMTgpIHx8XG4gICAgICB0aGlzLmxvYWRlckJ1ZmZlci50b0ludCg4LCAzKSAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMubG9hZGVyQnVmZmVyICYmIHRoaXMubG9hZGVyQnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlcbiAgICAgIH1cbiAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsICd0YWdUeXBlICcgKyBjaHVuay50YWdUeXBlKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sb2FkZXJCdWZmZXIubGVuZ3RoIDwgY2h1bmsuZGF0YXNpemUgKyAxNSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICAvLyByZWFkIHRoZSBkYXRhLlxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpXG5cbiAgICAvLyAzIEJ5dGUgdGltZXN0YW1wXG4gICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubG9hZGVyQnVmZmVyLnRvSW50KDAsIDMpXG4gICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMylcblxuICAgIC8vIDEgQnl0ZSB0aW1lc3RhbXBFeHRcbiAgICBsZXQgdGltZXN0YW1wRXh0ID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBpZiAodGltZXN0YW1wRXh0ID4gMCkge1xuICAgICAgdGltZXN0YW1wICs9IHRpbWVzdGFtcEV4dCAqIDB4MTAwMDAwMFxuICAgIH1cblxuICAgIGNodW5rLmR0cyA9IHRpbWVzdGFtcFxuXG4gICAgLy8gc3RyZWFtSWRcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgX3Byb2Nlc3NDaHVuayAoY2h1bmspIHtcbiAgICBzd2l0Y2ggKGNodW5rLnRhZ1R5cGUpIHtcbiAgICAgIGNhc2UgMTg6XG4gICAgICAgIHRoaXMuX3BhcnNlU2NyaXB0RGF0YShjaHVuaylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgODpcbiAgICAgICAgdGhpcy5fcGFyc2VBQUNEYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSA5OlxuICAgICAgICB0aGlzLl9wYXJzZUhldmNEYXRhKGNodW5rKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAxMTpcbiAgICAgICAgLy8gZm9yIHNvbWUgQ0ROIHRoYXQgZGlkIG5vdCBwcm9jZXNzIHRoZSBjdXJyZWN0IFJUTVAgbWVzc2FnZXNcbiAgICAgICAgdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMylcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHBhcnNlIGZsdiBzY3JpcHQgZGF0YVxuICAgKiBAcGFyYW0gY2h1bmtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZVNjcmlwdERhdGEgKGNodW5rKSB7XG4gICAgbGV0IGF1ZGlvVHJhY2sgPSB0aGlzLnRyYWNrcy5hdWRpb1RyYWNrXG4gICAgbGV0IHZpZGVvVHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG5cbiAgICBsZXQgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplKVxuXG4gICAgY29uc3QgaW5mbyA9IG5ldyBBTUZQYXJzZXIoKS5yZXNvbHZlKGRhdGEsIGRhdGEubGVuZ3RoKVxuXG4gICAgY29uc3Qgb25NZXRhRGF0YSA9IHRoaXMuX2NvbnRleHQub25NZXRhRGF0YSA9IGluZm8gPyBpbmZvLm9uTWV0YURhdGEgOiB1bmRlZmluZWRcblxuICAgIC8vIGZpbGwgbWVkaWFJbmZvXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gPSBvbk1ldGFEYXRhLmR1cmF0aW9uXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaGFzVmlkZW8gPSBvbk1ldGFEYXRhLmhhc1ZpZGVvXG4gICAgdGhpcy5fY29udGV4dC5tZWRpYUluZm8uaHNhQXVkaW8gPSBvbk1ldGFEYXRhLmhhc0F1ZGlvXG5cbiAgICBsZXQgdmFsaWRhdGUgPSB0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSlcbiAgICBpZiAodmFsaWRhdGUpIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVESUFfSU5GTylcbiAgICAgIHRoaXMuX2hhc1NjcmlwdCA9IHRydWVcbiAgICB9XG5cbiAgICAvLyBFZGl0IGRlZmF1bHQgbWV0YS5cbiAgICBpZiAoYXVkaW9UcmFjayAmJiAhYXVkaW9UcmFjay5oYXNTcGVjaWZpY0NvbmZpZykge1xuICAgICAgbGV0IG1ldGEgPSBhdWRpb1RyYWNrLm1ldGFcbiAgICAgIGlmIChvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZSkge1xuICAgICAgICBtZXRhLnNhbXBsZVJhdGUgPSBvbk1ldGFEYXRhLmF1ZGlvc2FtcGxlcmF0ZVxuICAgICAgfVxuXG4gICAgICBpZiAob25NZXRhRGF0YS5hdWRpb2NoYW5uZWxzKSB7XG4gICAgICAgIG1ldGEuY2hhbm5lbENvdW50ID0gb25NZXRhRGF0YS5hdWRpb2NoYW5uZWxzXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAob25NZXRhRGF0YS5hdWRpb3NhbXBsZXJhdGUpIHtcbiAgICAgICAgY2FzZSA0NDEwMDpcbiAgICAgICAgICBtZXRhLnNhbXBsZVJhdGVJbmRleCA9IDRcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDIyMDUwOlxuICAgICAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gN1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTEwMjU6XG4gICAgICAgICAgbWV0YS5zYW1wbGVSYXRlSW5kZXggPSAxMFxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2aWRlb1RyYWNrICYmICF2aWRlb1RyYWNrLmhhc1NwZWNpZmljQ29uZmlnKSB7XG4gICAgICBsZXQgbWV0YSA9IHZpZGVvVHJhY2subWV0YVxuICAgICAgaWYgKHR5cGVvZiBvbk1ldGFEYXRhLmZyYW1lcmF0ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbGV0IGZwc051bSA9IE1hdGguZmxvb3Iob25NZXRhRGF0YS5mcmFtZXJhdGUgKiAxMDAwKVxuICAgICAgICBpZiAoZnBzTnVtID4gMCkge1xuICAgICAgICAgIGxldCBmcHMgPSBmcHNOdW0gLyAxMDAwXG4gICAgICAgICAgaWYgKCFtZXRhLmZyYW1lUmF0ZSkge1xuICAgICAgICAgICAgbWV0YS5mcmFtZVJhdGUgPSB7fVxuICAgICAgICAgIH1cbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5maXhlZCA9IHRydWVcbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHMgPSBmcHNcbiAgICAgICAgICBtZXRhLmZyYW1lUmF0ZS5mcHNfbnVtID0gZnBzTnVtXG4gICAgICAgICAgbWV0YS5mcmFtZVJhdGUuZnBzX2RlbiA9IDEwMDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hYWNTZXF1ZW5jZUhlYWRlclBhcnNlciAoZGF0YSkge1xuICAgIGxldCByZXQgPSB7fVxuICAgIHJldC5oYXNTcGVjaWZpY0NvbmZpZyA9IHRydWVcbiAgICByZXQub2JqZWN0VHlwZSA9IGRhdGFbMV0gPj4+IDNcbiAgICByZXQuc2FtcGxlUmF0ZUluZGV4ID0gKChkYXRhWzFdICYgNykgPDwgMSkgfCAoZGF0YVsyXSA+Pj4gNylcbiAgICByZXQuYXVkaW9zYW1wbGVyYXRlID0gdGhpcy5fc3dpdGNoQXVkaW9TYW1wbGVSYXRlKHJldC5zYW1wbGVSYXRlSW5kZXgpXG4gICAgcmV0LmNoYW5uZWxDb3VudCA9IChkYXRhWzJdICYgMTIwKSA+Pj4gM1xuICAgIHJldC5mcmFtZUxlbmd0aCA9IChkYXRhWzJdICYgNCkgPj4+IDJcbiAgICByZXQuZGVwZW5kc09uQ29yZUNvZGVyID0gKGRhdGFbMl0gJiAyKSA+Pj4gMVxuICAgIHJldC5leHRlbnNpb25GbGFnSW5kZXggPSBkYXRhWzJdICYgMVxuXG4gICAgcmV0LmNvZGVjID0gYG1wNGEuNDAuJHtyZXQub2JqZWN0VHlwZX1gXG4gICAgbGV0IHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGV4dGVuc2lvblNhbXBsaW5nSW5kZXg7XG5cbiAgICBsZXQgY29uZmlnO1xuICAgIGxldCBzYW1wbGluZ0luZGV4ID0gcmV0LnNhbXBsZVJhdGVJbmRleDtcblxuICAgIGlmICh1c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpICE9PSAtMSkge1xuICAgICAgLy8gZmlyZWZveDogdXNlIFNCUiAoSEUtQUFDKSBpZiBmcmVxIGxlc3MgdGhhbiAyNGtIelxuICAgICAgaWYgKHJldC5zYW1wbGVSYXRlSW5kZXggPj0gNikge1xuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDU7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSg0KTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIHsgLy8gdXNlIExDLUFBQ1xuICAgICAgICByZXQub2JqZWN0VHlwZSA9IDI7XG4gICAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nSW5kZXg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh1c2VyQWdlbnQuaW5kZXhPZignYW5kcm9pZCcpICE9PSAtMSkge1xuICAgICAgLy8gYW5kcm9pZDogYWx3YXlzIHVzZSBMQy1BQUNcbiAgICAgIHJldC5vYmplY3RUeXBlID0gMjtcbiAgICAgIGNvbmZpZyA9IG5ldyBBcnJheSgyKTtcbiAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSBzYW1wbGluZ0luZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3Igb3RoZXIgYnJvd3NlcnMsIGUuZy4gY2hyb21lLi4uXG4gICAgICAvLyBBbHdheXMgdXNlIEhFLUFBQyB0byBtYWtlIGl0IGVhc2llciB0byBzd2l0Y2ggYWFjIGNvZGVjIHByb2ZpbGVcbiAgICAgIHJldC5vYmplY3RUeXBlID0gNTtcbiAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4O1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuXG4gICAgICBpZiAocmV0LnNhbXBsZVJhdGVJbmRleCA+PSA2KSB7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4IC0gMztcbiAgICAgIH0gZWxzZSBpZiAocmV0LmNoYW5uZWxDb3VudCA9PT0gMSkgeyAvLyBNb25vIGNoYW5uZWxcbiAgICAgICAgcmV0Lm9iamVjdFR5cGUgPSAyO1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSByZXQuc2FtcGxlUmF0ZUluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbmZpZ1swXSA9IHJldC5vYmplY3RUeXBlIDw8IDM7XG4gICAgY29uZmlnWzBdIHw9IChyZXQuc2FtcGxlUmF0ZUluZGV4ICYgMHgwRikgPj4+IDE7XG4gICAgY29uZmlnWzFdID0gKHJldC5zYW1wbGVSYXRlSW5kZXggJiAweDBGKSA8PCA3O1xuICAgIGNvbmZpZ1sxXSB8PSAocmV0LmNoYW5uZWxDb3VudCAmIDB4MEYpIDw8IDM7XG4gICAgaWYgKHJldC5vYmplY3RUeXBlID09PSA1KSB7XG4gICAgICBjb25maWdbMV0gfD0gKChleHRlbnNpb25TYW1wbGluZ0luZGV4ICYgMHgwRikgPj4+IDEpO1xuICAgICAgY29uZmlnWzJdID0gKGV4dGVuc2lvblNhbXBsaW5nSW5kZXggJiAweDAxKSA8PCA3O1xuICAgICAgLy8gZXh0ZW5kZWQgYXVkaW8gb2JqZWN0IHR5cGU6IGZvcmNlIHRvIDIgKExDLUFBQylcbiAgICAgIGNvbmZpZ1syXSB8PSAoMiA8PCAyKTtcbiAgICAgIGNvbmZpZ1szXSA9IDA7XG4gICAgfVxuICAgIHJldC5jb25maWcgPSBjb25maWdcbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICBfcGFyc2VBQUNEYXRhIChjaHVuaykge1xuICAgIGxldCB0cmFjayA9IHRoaXMudHJhY2tzLmF1ZGlvVHJhY2tcbiAgICBpZiAoIXRyYWNrKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgbWV0YSA9IHRyYWNrLm1ldGFcblxuICAgIGlmICghbWV0YSkge1xuICAgICAgbWV0YSA9IG5ldyBBdWRpb1RyYWNrTWV0YSgpXG4gICAgfVxuXG4gICAgbGV0IGluZm8gPSB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgxKVswXVxuXG4gICAgY2h1bmsuZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gMSlcblxuICAgIGxldCBmb3JtYXQgPSAoaW5mbyAmIDI0MCkgPj4+IDRcblxuICAgIHRyYWNrLmZvcm1hdCA9IGZvcm1hdFxuXG4gICAgaWYgKGZvcm1hdCAhPT0gMTApIHtcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfRVJST1IsIG5ldyBFcnJvcihgaW52YWxpZCBhdWRpbyBmb3JtYXQ6ICR7Zm9ybWF0fWApKVxuICAgIH1cblxuICAgIGlmIChmb3JtYXQgPT09IDEwICYmICF0aGlzLl9oYXNBdWRpb1NlcXVlbmNlKSB7XG4gICAgICBtZXRhLnNhbXBsZVJhdGUgPSB0aGlzLl9zd2l0Y2hBdWRpb1NhbXBsaW5nRnJlcXVlbmN5KGluZm8pXG4gICAgICBtZXRhLnNhbXBsZVJhdGVJbmRleCA9IChpbmZvICYgMTIpID4+PiAyXG4gICAgICBtZXRhLmZyYW1lTGVudGggPSAoaW5mbyAmIDIpID4+PiAxXG4gICAgICBtZXRhLmNoYW5uZWxDb3VudCA9IGluZm8gJiAxXG4gICAgICBtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcigxMDI0IC8gbWV0YS5hdWRpb1NhbXBsZVJhdGUgKiBtZXRhLnRpbWVzY2FsZSlcbiAgICB9XG5cbiAgICBsZXQgYXVkaW9TYW1wbGVSYXRlID0gbWV0YS5hdWRpb1NhbXBsZVJhdGVcbiAgICBsZXQgYXVkaW9TYW1wbGVSYXRlSW5kZXggPSBtZXRhLnNhbXBsZVJhdGVJbmRleFxuICAgIGxldCByZWZTYW1wbGVEdXJhdGlvbiA9IG1ldGEucmVmU2FtcGxlRHVyYXRpb25cblxuICAgIGRlbGV0ZSBjaHVuay50YWdUeXBlXG4gICAgbGV0IHZhbGlkYXRlID0gdGhpcy5fZGF0YXNpemVWYWxpZGF0b3IoY2h1bmsuZGF0YXNpemUpXG5cbiAgICBpZiAoY2h1bmsuZGF0YVswXSA9PT0gMCkgeyAvLyBBQUMgU2VxdWVuY2UgSGVhZGVyXG4gICAgICBsZXQgYWFjSGVhZGVyID0gdGhpcy5fYWFjU2VxdWVuY2VIZWFkZXJQYXJzZXIoY2h1bmsuZGF0YSlcbiAgICAgIGF1ZGlvU2FtcGxlUmF0ZSA9IGFhY0hlYWRlci5hdWRpb3NhbXBsZXJhdGUgfHwgbWV0YS5hdWRpb1NhbXBsZVJhdGVcbiAgICAgIGF1ZGlvU2FtcGxlUmF0ZUluZGV4ID0gYWFjSGVhZGVyLnNhbXBsZVJhdGVJbmRleCB8fCBtZXRhLnNhbXBsZVJhdGVJbmRleFxuICAgICAgcmVmU2FtcGxlRHVyYXRpb24gPSBNYXRoLmZsb29yKDEwMjQgLyBhdWRpb1NhbXBsZVJhdGUgKiBtZXRhLnRpbWVzY2FsZSlcblxuICAgICAgbWV0YS5jaGFubmVsQ291bnQgPSBhYWNIZWFkZXIuY2hhbm5lbENvdW50XG4gICAgICBtZXRhLnNhbXBsZVJhdGUgPSBhdWRpb1NhbXBsZVJhdGVcbiAgICAgIG1ldGEuc2FtcGxlUmF0ZUluZGV4ID0gYXVkaW9TYW1wbGVSYXRlSW5kZXhcbiAgICAgIG1ldGEucmVmU2FtcGxlRHVyYXRpb24gPSByZWZTYW1wbGVEdXJhdGlvblxuICAgICAgbWV0YS5kdXJhdGlvbiA9IHRoaXMuX2NvbnRleHQubWVkaWFJbmZvLmR1cmF0aW9uICogbWV0YS50aW1lc2NhbGVcbiAgICAgIG1ldGEuY29uZmlnID0gYWFjSGVhZGVyLmNvbmZpZ1xuICAgICAgbWV0YS5vYmplY3RUeXBlID0gYWFjSGVhZGVyLm9iamVjdFR5cGU7XG5cbiAgICAgIGNvbnN0IGF1ZGlvTWVkaWEgPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby5hdWRpb1xuXG4gICAgICAvLyBmaWxsIGF1ZGlvIG1lZGlhIGluZm9cbiAgICAgIGF1ZGlvTWVkaWEuY29kZWMgPSBhYWNIZWFkZXIuY29kZWNcbiAgICAgIGF1ZGlvTWVkaWEuY2hhbm5lbENvdW50ID0gYWFjSGVhZGVyLmNoYW5uZWxDb3VudFxuICAgICAgYXVkaW9NZWRpYS5zYW1wbGVSYXRlID0gYXVkaW9TYW1wbGVSYXRlXG4gICAgICBhdWRpb01lZGlhLnNhbXBsZVJhdGVJbmRleCA9IGFhY0hlYWRlci5hdWRpb1NhbXBsZVJhdGVJbmRleFxuXG4gICAgICBpZiAodGhpcy5faGFzU2NyaXB0ICYmICF0aGlzLl9oYXNBdWRpb1NlcXVlbmNlKSB7XG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAnYXVkaW8nKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9oYXNTY3JpcHQgJiYgdGhpcy5faGFzQXVkaW9TZXF1ZW5jZSkge1xuICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkFVRElPX01FVEFEQVRBX0NIQU5HRSlcbiAgICAgIH1cbiAgICAgIDtcbiAgICAgIHRoaXMuX2hhc0F1ZGlvU2VxdWVuY2UgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGNodW5rLmRhdGEgPSBjaHVuay5kYXRhLnNsaWNlKDEsIGNodW5rLmRhdGEubGVuZ3RoKVxuICAgICAgdHJhY2suc2FtcGxlcy5wdXNoKGNodW5rKVxuICAgIH1cbiAgICBpZiAoIXZhbGlkYXRlKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignVEFHIGxlbmd0aCBlcnJvciBhdCAnICsgY2h1bmsuZGF0YXNpemUpXG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBlcnJvci5tZXNzYWdlKVxuICAgICAgdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgZXJyb3IubWVzc2FnZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgaGV2Yy9hdmMgdmlkZW8gZGF0YVxuICAgKiBAcGFyYW0gY2h1bmtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZUhldmNEYXRhIChjaHVuaykge1xuICAgIC8vIGhlYWRlclxuICAgIGxldCBpbmZvID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoMSlbMF1cbiAgICBjaHVuay5mcmFtZVR5cGUgPSAoaW5mbyAmIDB4ZjApID4+PiA0XG4gICAgY2h1bmsuaXNLZXlmcmFtZSA9IGNodW5rLmZyYW1lVHlwZSA9PT0gMVxuICAgIC8vIGxldCB0ZW1wQ29kZWNJRCA9IHRoaXMudHJhY2tzLnZpZGVvVHJhY2suY29kZWNJRFxuICAgIGxldCBjb2RlY0lEID0gaW5mbyAmIDB4MGZcbiAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLmNvZGVjSUQgPSBjb2RlY0lEXG5cbiAgICAvLyBoZXZj5ZKMYXZj55qEaGVhZGVy6Kej5p6Q5pa55byP5LiA5qC3XG4gICAgY2h1bmsuYXZjUGFja2V0VHlwZSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDEpWzBdXG4gICAgY2h1bmsuY3RzID0gdGhpcy5sb2FkZXJCdWZmZXIudG9JbnQoMCwgMylcbiAgICB0aGlzLmxvYWRlckJ1ZmZlci5zaGlmdCgzKVxuXG4gICAgLy8gMTIgZm9yIGhldmMsIDcgZm9yIGF2Y1xuICAgIGlmIChjb2RlY0lEID09PSAxMikge1xuICAgICAgY29uc3QgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gNSlcbiAgICAgIGNodW5rLmRhdGEgPSBkYXRhXG5cbiAgICAgIGlmIChOdW1iZXIucGFyc2VJbnQoY2h1bmsuYXZjUGFja2V0VHlwZSkgIT09IDApIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKHRoaXMuVEFHLCBgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7Y2h1bmsuZGF0YXNpemV9YClcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmFsdSA9IHt9XG4gICAgICAgIGxldCByID0gMFxuICAgICAgICBuYWx1LmN0cyA9IGNodW5rLmN0c1xuICAgICAgICBuYWx1LmR0cyA9IGNodW5rLmR0c1xuICAgICAgICB3aGlsZSAoY2h1bmsuZGF0YS5sZW5ndGggPiByKSB7XG4gICAgICAgICAgbGV0IHNpemVzID0gY2h1bmsuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQociksIDQgKyByKVxuICAgICAgICAgIG5hbHUuc2l6ZSA9IHNpemVzWzNdXG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzJdICogMjU2XG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzFdICogMjU2ICogMjU2XG4gICAgICAgICAgbmFsdS5zaXplICs9IHNpemVzWzBdICogMjU2ICogMjU2ICogMjU2XG4gICAgICAgICAgciArPSA0XG4gICAgICAgICAgbmFsdS5kYXRhID0gY2h1bmsuZGF0YS5zbGljZShOdW1iZXIucGFyc2VJbnQociksIG5hbHUuc2l6ZSArIHIpXG4gICAgICAgICAgciArPSBuYWx1LnNpemVcbiAgICAgICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChuYWx1KVxuICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKE51bWJlci5wYXJzZUludChjaHVuay5hdmNQYWNrZXRUeXBlKSA9PT0gMCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKSkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsIGBpbnZhbGlkIHZpZGVvIHRhZyBkYXRhc2l6ZTogJHtjaHVuay5kYXRhc2l6ZX1gKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAndmlkZW8nKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2RlY0lEID09PSA3KSB7XG4gICAgICBsZXQgZGF0YSA9IHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KGNodW5rLmRhdGFzaXplIC0gNSlcbiAgICAgIGlmIChkYXRhWzRdID09PSAwICYmIGRhdGFbNV0gPT09IDAgJiYgZGF0YVs2XSA9PT0gMCAmJiBkYXRhWzddID09PSAxKSB7XG4gICAgICAgIGxldCBhdmNjbGVuZ3RoID0gMFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgIGF2Y2NsZW5ndGggPSBhdmNjbGVuZ3RoICogMjU2ICsgZGF0YVtpXVxuICAgICAgICB9XG4gICAgICAgIGF2Y2NsZW5ndGggLT0gNFxuICAgICAgICBkYXRhID0gZGF0YS5zbGljZSg0LCBkYXRhLmxlbmd0aClcbiAgICAgICAgZGF0YVszXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgYXZjY2xlbmd0aCA9IChhdmNjbGVuZ3RoIC0gZGF0YVszXSkgLyAyNTZcbiAgICAgICAgZGF0YVsyXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgYXZjY2xlbmd0aCA9IChhdmNjbGVuZ3RoIC0gZGF0YVsyXSkgLyAyNTZcbiAgICAgICAgZGF0YVsxXSA9IGF2Y2NsZW5ndGggJSAyNTZcbiAgICAgICAgZGF0YVswXSA9IChhdmNjbGVuZ3RoIC0gZGF0YVsxXSkgLyAyNTZcbiAgICAgIH1cblxuICAgICAgY2h1bmsuZGF0YSA9IGRhdGFcbiAgICAgIC8vIElmIGl0IGlzIEFWQyBzZXF1ZWNlIEhlYWRlci5cbiAgICAgIGlmIChjaHVuay5hdmNQYWNrZXRUeXBlID09PSAwKSB7XG4gICAgICAgIHRoaXMuX2F2Y1NlcXVlbmNlSGVhZGVyUGFyc2VyKGNodW5rLmRhdGEpXG4gICAgICAgIGxldCB2YWxpZGF0ZSA9IHRoaXMuX2RhdGFzaXplVmFsaWRhdG9yKGNodW5rLmRhdGFzaXplKVxuICAgICAgICBpZiAodmFsaWRhdGUpIHtcbiAgICAgICAgICBpZiAodGhpcy5faGFzU2NyaXB0ICYmICF0aGlzLl9oYXNWaWRlb1NlcXVlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgJ3ZpZGVvJylcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2hhc1NjcmlwdCAmJiB0aGlzLl9oYXNWaWRlb1NlcXVlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLlZJREVPX01FVEFEQVRBX0NIQU5HRSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5faGFzVmlkZW9TZXF1ZW5jZSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKHRoaXMuVEFHLCBgaW52YWxpZCB2aWRlbyB0YWcgZGF0YXNpemU6ICR7Y2h1bmsuZGF0YXNpemV9YClcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmFja3MudmlkZW9UcmFjay5zYW1wbGVzLnB1c2goY2h1bmspXG4gICAgICAgIC8vIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4odGhpcy5UQUcsIGB2aWRlbyBjb2RlaWQgaXMgJHtjb2RlY0lEfWApXG4gICAgICBjaHVuay5kYXRhID0gdGhpcy5sb2FkZXJCdWZmZXIuc2hpZnQoY2h1bmsuZGF0YXNpemUgLSAxKVxuICAgICAgaWYgKCF0aGlzLl9kYXRhc2l6ZVZhbGlkYXRvcihjaHVuay5kYXRhc2l6ZSkpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2Fybih0aGlzLlRBRywgYGludmFsaWQgdmlkZW8gdGFnIGRhdGFzaXplOiAke2NodW5rLmRhdGFzaXplfWApXG4gICAgICB9XG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLnNhbXBsZXMucHVzaChjaHVuaylcbiAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuREVNVVhfQ09NUExFVEUpXG4gICAgfVxuICAgIGRlbGV0ZSBjaHVuay50YWdUeXBlXG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgYXZjIG1ldGFkYXRhXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYXZjU2VxdWVuY2VIZWFkZXJQYXJzZXIgKGRhdGEpIHtcbiAgICBsZXQgdHJhY2sgPSB0aGlzLnRyYWNrcy52aWRlb1RyYWNrXG5cbiAgICBpZiAoIXRyYWNrKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgaWYgKCF0cmFjay5tZXRhKSB7XG4gICAgICB0cmFjay5tZXRhID0gbmV3IFZpZGVvVHJhY2tNZXRhKClcbiAgICB9XG4gICAgbGV0IG1ldGEgPSB0cmFjay5tZXRhXG5cbiAgICBtZXRhLmNvbmZpZ3VyYXRpb25WZXJzaW9uID0gZGF0YVswXVxuICAgIG1ldGEuYXZjUHJvZmlsZUluZGljYXRpb24gPSBkYXRhWzFdXG4gICAgbWV0YS5wcm9maWxlQ29tcGF0aWJpbGl0eSA9IGRhdGFbMl1cbiAgICBtZXRhLmF2Y0xldmVsSW5kaWNhdGlvbiA9IGRhdGFbM10gLyAxMFxuICAgIG1ldGEubmFsVW5pdExlbmd0aCA9IChkYXRhWzRdICYgMHgwMykgKyAxXG5cbiAgICBsZXQgbnVtT2ZTcHMgPSBkYXRhWzVdICYgMHgxZlxuICAgIG9mZnNldCA9IDZcbiAgICBsZXQgY29uZmlnID0ge31cblxuICAgIC8vIHBhcnNlIFNQU1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZTcHM7IGkrKykge1xuICAgICAgbGV0IHNpemUgPSBkYXRhW29mZnNldF0gKiAyNTUgKyBkYXRhW29mZnNldCArIDFdXG4gICAgICBvZmZzZXQgKz0gMlxuXG4gICAgICBsZXQgc3BzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHNwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cblxuICAgICAgLy8gY29kZWMgc3RyaW5nXG4gICAgICBsZXQgY29kZWNTdHJpbmcgPSAnYXZjMS4nXG4gICAgICBmb3IgKGxldCBqID0gMTsgaiA8IDQ7IGorKykge1xuICAgICAgICBsZXQgaCA9IHNwc1tqXS50b1N0cmluZygxNilcbiAgICAgICAgaWYgKGgubGVuZ3RoIDwgMikge1xuICAgICAgICAgIGggPSAnMCcgKyBoXG4gICAgICAgIH1cbiAgICAgICAgY29kZWNTdHJpbmcgKz0gaFxuICAgICAgfVxuXG4gICAgICBtZXRhLmNvZGVjID0gY29kZWNTdHJpbmdcblxuICAgICAgb2Zmc2V0ICs9IHNpemVcbiAgICAgIHRoaXMudHJhY2tzLnZpZGVvVHJhY2subWV0YS5zcHMgPSBzcHNcbiAgICAgIGNvbmZpZyA9IFNwc1BhcnNlci5wYXJzZVNQUyhzcHMpXG4gICAgfVxuXG4gICAgbGV0IG51bU9mUHBzID0gZGF0YVtvZmZzZXRdXG5cbiAgICBvZmZzZXQrK1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PZlBwczsgaSsrKSB7XG4gICAgICBsZXQgc2l6ZSA9IGRhdGFbb2Zmc2V0XSAqIDI1NSArIGRhdGFbb2Zmc2V0ICsgMV1cbiAgICAgIG9mZnNldCArPSAyXG4gICAgICBsZXQgcHBzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIHBwc1tqXSA9IGRhdGFbb2Zmc2V0ICsgal1cbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSBzaXplXG4gICAgICB0aGlzLnRyYWNrcy52aWRlb1RyYWNrLm1ldGEucHBzID0gcHBzXG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihtZXRhLCBTcHNQYXJzZXIudG9WaWRlb01ldGEoY29uZmlnKSlcblxuICAgIC8vIGZpbGwgdmlkZW8gbWVkaWEgaW5mb1xuICAgIGNvbnN0IHZpZGVvTWVkaWEgPSB0aGlzLl9jb250ZXh0Lm1lZGlhSW5mby52aWRlb1xuXG4gICAgdmlkZW9NZWRpYS5jb2RlYyA9IG1ldGEuY29kZWNcbiAgICB2aWRlb01lZGlhLnByb2ZpbGUgPSBtZXRhLnByb2ZpbGVcbiAgICB2aWRlb01lZGlhLmxldmVsID0gbWV0YS5sZXZlbFxuICAgIHZpZGVvTWVkaWEuY2hyb21hRm9ybWF0ID0gbWV0YS5jaHJvbWFGb3JtYXRcbiAgICB2aWRlb01lZGlhLmZyYW1lUmF0ZSA9IG1ldGEuZnJhbWVSYXRlXG4gICAgdmlkZW9NZWRpYS5wYXJSYXRpbyA9IG1ldGEucGFyUmF0aW9cbiAgICB2aWRlb01lZGlhLndpZHRoID0gdmlkZW9NZWRpYS53aWR0aCA9PT0gbWV0YS5wcmVzZW50V2lkdGggPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50V2lkdGhcbiAgICB2aWRlb01lZGlhLmhlaWdodCA9IHZpZGVvTWVkaWEuaGVpZ2h0ID09PSBtZXRhLnByZXNlbnRIZWlnaHQgPyB2aWRlb01lZGlhLndpZHRoIDogbWV0YS5wcmVzZW50SGVpZ2h0XG5cbiAgICBtZXRhLmR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5tZWRpYUluZm8uZHVyYXRpb24gKiBtZXRhLnRpbWVzY2FsZVxuICAgIG1ldGEuYXZjYyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKVxuICAgIG1ldGEuYXZjYy5zZXQoZGF0YSlcbiAgICB0cmFjay5tZXRhID0gbWV0YVxuICB9XG5cbiAgLyoqXG4gICAqIGNob29zZSBhdWRpbyBzYW1wbGUgcmF0ZVxuICAgKiBAcGFyYW0gc2FtcGxpbmdGcmVxdWVuY3lJbmRleFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvU2FtcGxlUmF0ZSAoc2FtcGxpbmdGcmVxdWVuY3lJbmRleCkge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3QgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gc2FtcGxpbmcgZnJlcXVlbmNlXG4gICAqIEBwYXJhbSBpbmZvXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3dpdGNoQXVkaW9TYW1wbGluZ0ZyZXF1ZW5jeSAoaW5mbykge1xuICAgIGxldCBzYW1wbGluZ0ZyZXF1ZW5jeUluZGV4ID0gKGluZm8gJiAxMikgPj4+IDJcbiAgICBsZXQgc2FtcGxpbmdGcmVxdWVuY3lMaXN0ID0gWzU1MDAsIDExMDI1LCAyMjA1MCwgNDQxMDAsIDQ4MDAwXVxuICAgIHJldHVybiBzYW1wbGluZ0ZyZXF1ZW5jeUxpc3Rbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF1cbiAgfVxuXG4gIC8qKlxuICAgKiBjaG9vc2UgYXVkaW8gY2hhbm5lbCBjb3VudFxuICAgKiBAcGFyYW0gaW5mb1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N3aXRjaEF1ZGlvQ2hhbm5lbCAoaW5mbykge1xuICAgIGxldCBzYW1wbGVUcmFja051bUluZGV4ID0gaW5mbyAmIDFcbiAgICBsZXQgc2FtcGxlVHJhY2tOdW1MaXN0ID0gWzEsIDJdXG4gICAgcmV0dXJuIHNhbXBsZVRyYWNrTnVtTGlzdFtzYW1wbGVUcmFja051bUluZGV4XVxuICB9XG5cbiAgLyoqXG4gICAqIGNoZWNrIGRhdGFzaXplIGlzIHZhbGlkIHVzZSA0IEJ5dGUgYWZ0ZXIgY3VycmVudCB0YWdcbiAgICogQHBhcmFtIGRhdGFzaXplXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RhdGFzaXplVmFsaWRhdG9yIChkYXRhc2l6ZSkge1xuICAgIGxldCBkYXRhc2l6ZUNvbmZpcm0gPSB0aGlzLmxvYWRlckJ1ZmZlci50b0ludCgwLCA0KVxuICAgIHRoaXMubG9hZGVyQnVmZmVyLnNoaWZ0KDQpXG4gICAgcmV0dXJuIGRhdGFzaXplQ29uZmlybSA9PT0gZGF0YXNpemUgKyAxMVxuICB9XG5cbiAgZ2V0IGxvYWRlckJ1ZmZlciAoKSB7XG4gICAgaWYgKHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0xPQURFUl9CVUZGRVInKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ0xPQURFUl9CVUZGRVInKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCBuZXcgRXJyb3IoJ+aJvuS4jeWIsCBsb2FkZXJCdWZmZXIg5a6e5L6LJykpXG4gICAgfVxuICB9XG5cbiAgZ2V0IHRyYWNrcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gIH1cblxuICBnZXQgbG9nZ2VyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnTE9HR0VSJylcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGbHZEZW11eGVyXG4iLCIvKipcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzgyMTYjc2VjdGlvbi00LjNcbiAqL1xuY2xhc3MgTTNVOFBhcnNlciB7XG4gIHN0YXRpYyBwYXJzZSAodGV4dCwgYmFzZXVybCA9ICcnKSB7XG4gICAgbGV0IHJldCA9IHtcbiAgICAgIGR1cmF0aW9uOiAwXG4gICAgfTtcbiAgICBpZiAoIXRleHQgfHwgIXRleHQuc3BsaXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHJlZnMgPSB0ZXh0LnNwbGl0KC9cXHJ8XFxuLyk7XG4gICAgcmVmcyA9IHJlZnMuZmlsdGVyKChyZWYpID0+IHtcbiAgICAgIHJldHVybiByZWY7XG4gICAgfSlcbiAgICBsZXQgcmVmID0gcmVmcy5zaGlmdCgpXG4gICAgaWYgKCFyZWYubWF0Y2goJyNFWFRNM1UnKSkge1xuICAgICAgLy8gVE9ETzpNM1XmoLzlvI/plJnor6/jgIJcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZWYgPSByZWZzLnNoaWZ0KClcbiAgICB3aGlsZSAocmVmKSB7XG4gICAgICBsZXQgcmVmbSA9IHJlZi5tYXRjaCgvIyguKik6KC4qKS8pO1xuICAgICAgaWYgKHJlZm0gJiYgcmVmbS5sZW5ndGggPiAyKSB7XG4gICAgICAgIHN3aXRjaCAocmVmbVsxXSkge1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLVZFUlNJT04nOlxuICAgICAgICAgICAgcmV0LnZlcnNpb24gPSBwYXJzZUludChyZWZtWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVC1YLU1FRElBLVNFUVVFTkNFJzpcbiAgICAgICAgICAgIHJldC5zZXF1ZW5jZSA9IHBhcnNlSW50KHJlZm1bMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnRVhULVgtVEFSR0VURFVSQVRJT04nOlxuICAgICAgICAgICAgcmV0LnRhcmdldGR1cmF0aW9uID0gcGFyc2VGbG9hdChyZWZtWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0VYVElORic6XG4gICAgICAgICAgICBNM1U4UGFyc2VyLnBhcnNlRnJhZyhyZWZtLCByZWZzLCByZXQsIGJhc2V1cmwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWYgPSByZWZzLnNoaWZ0KClcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUZyYWcgKHJlZm0sIHJlZnMsIHJldCwgYmFzZXVybCkge1xuICAgIGlmICghcmV0LmZyYWdzKSB7XG4gICAgICByZXQuZnJhZ3MgPSBbXVxuICAgIH1cblxuICAgIGxldCBmcmVnID0ge1xuICAgICAgc3RhcnQ6IHJldC5kdXJhdGlvbixcbiAgICAgIGR1cmF0aW9uOiBwYXJzZUZsb2F0KHJlZm1bMl0pICogMTAwMFxuICAgIH1cblxuICAgIHJldC5kdXJhdGlvbiArPSBmcmVnLmR1cmF0aW9uO1xuICAgIGxldCBuZXh0bGluZSA9IHJlZnMuc2hpZnQoKTtcbiAgICBpZiAobmV4dGxpbmUubWF0Y2goLyMoLiopOiguKikvKSkge1xuICAgICAgbmV4dGxpbmUgPSByZWZzLnNoaWZ0KCk7XG4gICAgfVxuICAgIGlmIChuZXh0bGluZS5sZW5ndGggPiAwICYmIG5leHRsaW5lLmNoYXJBdCgwKSA9PT0gJy8nICYmIGJhc2V1cmwubWF0Y2goLy4qXFwvXFwvLipcXC5cXHcrL2cpKSB7XG4gICAgICBiYXNldXJsID0gYmFzZXVybC5tYXRjaCgvLipcXC9cXC8uKlxcLlxcdysvZylbMF07XG4gICAgfVxuICAgIGlmIChuZXh0bGluZS5tYXRjaCgvLio6XFwvXFwvLiovKSkge1xuICAgICAgZnJlZy51cmwgPSBuZXh0bGluZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJlZy51cmwgPSBiYXNldXJsICsgbmV4dGxpbmU7XG4gICAgfVxuICAgIFxuICAgIHJldC5mcmFncy5wdXNoKGZyZWcpO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlVVJMICh1cmwpIHtcbiAgICBsZXQgYmFzZXVybCA9ICcnO1xuICAgIGxldCB1cmxzID0gdXJsLm1hdGNoKC8oLipcXC8pLipcXC5tM3U4Lyk7XG4gICAgaWYgKHVybHMgJiYgdXJscy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHVybHNbaV0ubWF0Y2goLy4qXFwvJC9nKSAmJiB1cmxzW2ldLmxlbmd0aCA+IGJhc2V1cmwubGVuZ3RoKSB7XG4gICAgICAgICAgYmFzZXVybCA9IHVybHNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJhc2V1cmw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTTNVOFBhcnNlcjtcbiIsImltcG9ydCB7IE5hbHVuaXQgfSBmcm9tICd4Z3BsYXllci1jb2RlYyc7XG5pbXBvcnQgeyBBdWRpb1RyYWNrLCBWaWRlb1RyYWNrIH0gZnJvbSAneGdwbGF5ZXItYnVmZmVyJztcbmltcG9ydCB7XG4gIEF1ZGlvVHJhY2tNZXRhLFxuICBWaWRlb1RyYWNrTWV0YSxcbiAgQXVkaW9UcmFja1NhbXBsZSxcbiAgVmlkZW9UcmFja1NhbXBsZSxcbiAgRVZFTlRTLFxuICBTdHJlYW1cbn0gZnJvbSAneGdwbGF5ZXItdXRpbHMnO1xuXG5jb25zdCBERU1VWF9FVkVOVFMgPSBFVkVOVFMuREVNVVhfRVZFTlRTO1xuY29uc3QgU3RyZWFtVHlwZSA9IHtcbiAgMHgwMTogWyd2aWRlbycsICdNUEVHLTEnXSxcbiAgMHgwMjogWyd2aWRlbycsICdNUEVHLTInXSxcbiAgMHgxYjogWyd2aWRlbycsICdBVkMuSDI2NCddLFxuICAweGVhOiBbJ3ZpZGVvJywgJ1ZDLTEnXSxcbiAgMHgwMzogWydhdWRpbycsICdNUEVHLTEnXSxcbiAgMHgwNDogWydhdWRpbycsICdNUEVHLTInXSxcbiAgMHgwZjogWydhdWRpbycsICdNUEVHLTIuQUFDJ10sXG4gIDB4MTE6IFsnYXVkaW8nLCAnTVBFRy00LkFBQyddLFxuICAweDgwOiBbJ2F1ZGlvJywgJ0xQQ00nXSxcbiAgMHg4MTogWydhdWRpbycsICdBQzMnXSxcbiAgMHgwNjogWydhdWRpbycsICdBQzMnXSxcbiAgMHg4MjogWydhdWRpbycsICdEVFMnXSxcbiAgMHg4MzogWydhdWRpbycsICdEb2xieSBUcnVlSEQnXSxcbiAgMHg4NDogWydhdWRpbycsICdBQzMtUGx1cyddLFxuICAweDg1OiBbJ2F1ZGlvJywgJ0RUUy1IRCddLFxuICAweDg2OiBbJ2F1ZGlvJywgJ0RUUy1NQSddLFxuICAweGExOiBbJ2F1ZGlvJywgJ0FDMy1QbHVzLVNFQyddLFxuICAweGEyOiBbJ2F1ZGlvJywgJ0RUUy1IRC1TRUMnXVxufTtcblxuY2xhc3MgVHNEZW11eGVyIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZ3MpIHtcbiAgICB0aGlzLmNvbmZpZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWdzKTtcbiAgICB0aGlzLmRlbXV4aW5nID0gZmFsc2U7XG4gICAgdGhpcy5wYXQgPSBbXTtcbiAgICB0aGlzLnBtdCA9IFtdO1xuICAgIHRoaXMuX2hhc1ZpZGVvTWV0YSA9IGZhbHNlO1xuICAgIHRoaXMuX2hhc0F1ZGlvTWV0YSA9IGZhbHNlO1xuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5vbihERU1VWF9FVkVOVFMuREVNVVhfU1RBUlQsIHRoaXMuZGVtdXguYmluZCh0aGlzKSlcbiAgfVxuXG4gIGRlbXV4ICgpIHtcbiAgICBpZiAodGhpcy5kZW11eGluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IGJ1ZmZlciA9IHRoaXMuaW5wdXRCdWZmZXI7XG4gICAgbGV0IGZyYWdzID0geyBwYXQ6IFtdLCBwbXQ6IFtdIH07XG4gICAgbGV0IHBlc2VzID0ge307XG5cbiAgICAvLyBSZWFkIFRTIHNlZ21lbnRcbiAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCA+PSAxODgpIHtcbiAgICAgIHdoaWxlIChidWZmZXIubGVuZ3RoID49IDEgJiYgYnVmZmVyLmFycmF5WzBdW2J1ZmZlci5vZmZzZXRdICE9PSA3MSkge1xuICAgICAgICBidWZmZXIuc2hpZnQoMSk7XG4gICAgICB9XG4gICAgICBsZXQgYnVmID0gYnVmZmVyLnNoaWZ0KDE4OCk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhidWYpO1xuICAgICAgbGV0IHRzU3RyZWFtID0gbmV3IFN0cmVhbShidWYuYnVmZmVyKTtcbiAgICAgIGxldCB0cyA9IHt9O1xuICAgICAgVHNEZW11eGVyLnJlYWQodHNTdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICBpZiAodHMucGVzKSB7XG4gICAgICAgIGlmICghcGVzZXNbdHMuaGVhZGVyLnBpZF0pIHtcbiAgICAgICAgICBwZXNlc1t0cy5oZWFkZXIucGlkXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHBlc2VzW3RzLmhlYWRlci5waWRdLnB1c2godHMucGVzKTtcbiAgICAgICAgdHMucGVzLkVTLmJ1ZmZlciA9IFt0cy5wZXMuRVMuYnVmZmVyXTtcbiAgICAgIH0gZWxzZSBpZiAocGVzZXNbdHMuaGVhZGVyLnBpZF0pIHtcbiAgICAgICAgcGVzZXNbdHMuaGVhZGVyLnBpZF1bcGVzZXNbdHMuaGVhZGVyLnBpZF0ubGVuZ3RoIC0gMV0uRVMuYnVmZmVyLnB1c2godHMucGF5bG9hZC5zdHJlYW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldCBGcmFtZXMgZGF0YVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXMocGVzZXMpLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZXBlc2VzID0gcGVzZXNbT2JqZWN0LmtleXMocGVzZXMpW2ldXTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZXBlc2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGVwZXNlc1tqXS5pZCA9IE9iamVjdC5rZXlzKHBlc2VzKVtpXTtcbiAgICAgICAgZXBlc2VzW2pdLkVTLmJ1ZmZlciA9IFRzRGVtdXhlci5NZXJnZShlcGVzZXNbal0uRVMuYnVmZmVyKTtcbiAgICAgICAgaWYgKGVwZXNlc1tqXS50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgdGhpcy5wdXNoQXVkaW9TYW1wbGUoZXBlc2VzW2pdKTtcbiAgICAgICAgfSBlbHNlIGlmIChlcGVzZXNbal0udHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgIHRoaXMucHVzaFZpZGVvU2FtcGxlKGVwZXNlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5faGFzQXVkaW9NZXRhKSB7XG4gICAgICB0aGlzLmVtaXQoREVNVVhfRVZFTlRTLkRFTVVYX0NPTVBMRVRFLCAnYXVkaW8nKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2hhc1ZpZGVvTWV0YSkge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSwgJ3ZpZGVvJyk7XG4gICAgfVxuICB9XG5cbiAgcHVzaEF1ZGlvU2FtcGxlIChwZXMpIHtcbiAgICBsZXQgdHJhY2s7XG4gICAgaWYgKCF0aGlzLl90cmFja3MuYXVkaW9UcmFjaykge1xuICAgICAgdGhpcy5fdHJhY2tzLmF1ZGlvVHJhY2sgPSBuZXcgQXVkaW9UcmFjaygpO1xuICAgICAgdHJhY2sgPSB0aGlzLl90cmFja3MuYXVkaW9UcmFjaztcbiAgICAgIHRyYWNrLm1ldGEgPSBuZXcgQXVkaW9UcmFja01ldGEoe1xuICAgICAgICBhdWRpb1NhbXBsZVJhdGU6IHBlcy5FUy5mcmVxdWVuY2UsXG4gICAgICAgIHNhbXBsZVJhdGU6IHBlcy5FUy5mcmVxdWVuY2UsXG4gICAgICAgIGNoYW5uZWxDb3VudDogcGVzLkVTLmNoYW5uZWwsXG4gICAgICAgIGNvZGVjOiAnbXA0YS40MC4nICsgcGVzLkVTLmF1ZGlvT2JqZWN0VHlwZSxcbiAgICAgICAgY29uZmlnOiBwZXMuRVMuYXVkaW9Db25maWcsXG4gICAgICAgIGlkOiAyLFxuICAgICAgICBzYW1wbGVSYXRlSW5kZXg6IHBlcy5FUy5mcmVxdWVuY3lJbmRleFxuICAgICAgfSk7XG4gICAgICB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcigxMDI0IC8gdHJhY2subWV0YS5hdWRpb1NhbXBsZVJhdGUgKiB0cmFjay5tZXRhLnRpbWVzY2FsZSk7XG4gICAgICBpZiAoIXRoaXMuX2hhc0F1ZGlvTWV0YSkge1xuICAgICAgICB0aGlzLl9oYXNBdWRpb01ldGEgPSB0cnVlXG4gICAgICAgIHRoaXMuZW1pdChERU1VWF9FVkVOVFMuTUVUQURBVEFfUEFSU0VELCAnYXVkaW8nKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdHJhY2sgPSB0aGlzLl90cmFja3MuYXVkaW9UcmFjaztcbiAgICB9XG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShwZXMuRVMuYnVmZmVyLmJ1ZmZlci5zbGljZShwZXMuRVMuYnVmZmVyLnBvc2l0aW9uLCBwZXMuRVMuYnVmZmVyLmxlbmd0aCkpO1xuICAgIGxldCBkdHMgPSBwYXJzZUludChwZXMucHRzIC8gOTApO1xuICAgIGxldCBwdHMgPSBwYXJzZUludChwZXMucHRzIC8gOTApO1xuICAgIGxldCBzYW1wbGUgPSBuZXcgQXVkaW9UcmFja1NhbXBsZSh7ZHRzLCBwdHMsIGRhdGF9KTtcbiAgICB0cmFjay5zYW1wbGVzLnB1c2goc2FtcGxlKTtcbiAgfVxuXG4gIHB1c2hWaWRlb1NhbXBsZSAocGVzKSB7XG4gICAgbGV0IG5hbHMgPSBOYWx1bml0LmdldE5hbHVuaXRzKHBlcy5FUy5idWZmZXIpO1xuICAgIGxldCB0cmFjaztcbiAgICBpZiAoIXRoaXMuX3RyYWNrcy52aWRlb1RyYWNrKSB7XG4gICAgICB0aGlzLl90cmFja3MudmlkZW9UcmFjayA9IG5ldyBWaWRlb1RyYWNrKCk7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy52aWRlb1RyYWNrO1xuICAgICAgdHJhY2subWV0YSA9IG5ldyBWaWRlb1RyYWNrTWV0YSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFjayA9IHRoaXMuX3RyYWNrcy52aWRlb1RyYWNrO1xuICAgIH1cbiAgICBsZXQgc2FtcGxlTGVuZ3RoID0gMDtcbiAgICBsZXQgc3BzID0gZmFsc2U7XG4gICAgbGV0IHBwcyA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG5hbCA9IG5hbHNbaV07XG4gICAgICBpZiAobmFsLnNwcykge1xuICAgICAgICAvLyBUT0RP77yaVmlkZW9UcmFja+S/oeaBryDlkowgTWV0YSDkv6Hmga9cbiAgICAgICAgaWYgKHRyYWNrLnNwcyAmJiBUc0RlbXV4ZXIuY29tcGFpcmVVaW50OChuYWwuYm9keSwgdHJhY2suc3BzKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3BzID0gbmFsO1xuICAgICAgICB0cmFjay5zcHMgPSBuYWwuYm9keTtcbiAgICAgICAgdHJhY2subWV0YS5jaHJvbWFGb3JtYXQgPSBzcHMuc3BzLmNocm9tYV9mb3JtYXRcbiAgICAgICAgdHJhY2subWV0YS5jb2RlYyA9ICdhdmMxLic7XG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgNDsgaisrKSB7XG4gICAgICAgICAgdmFyIGggPSBzcHMuYm9keVtqXS50b1N0cmluZygxNik7XG4gICAgICAgICAgaWYgKGgubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgaCA9ICcwJyArIGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyYWNrLm1ldGEuY29kZWMgKz0gaDtcbiAgICAgICAgfVxuICAgICAgICB0cmFjay5tZXRhLmNvZGVjSGVpZ2h0ID0gc3BzLnNwcy5jb2RlY19zaXplLmhlaWdodDtcbiAgICAgICAgdHJhY2subWV0YS5jb2RlY1dpZHRoID0gc3BzLnNwcy5jb2RlY19zaXplLndpZHRoO1xuICAgICAgICB0cmFjay5tZXRhLmZyYW1lUmF0ZSA9IHNwcy5zcHMuZnJhbWVfcmF0ZTtcbiAgICAgICAgdHJhY2subWV0YS5pZCA9IDE7XG4gICAgICAgIHRyYWNrLm1ldGEubGV2ZWwgPSBzcHMuc3BzLmxldmVsX3N0cmluZztcbiAgICAgICAgdHJhY2subWV0YS5wcmVzZW50SGVpZ2h0ID0gc3BzLnNwcy5wcmVzZW50X3NpemUuaGVpZ2h0O1xuICAgICAgICB0cmFjay5tZXRhLnByZXNlbnRXaWR0aCA9IHNwcy5zcHMucHJlc2VudF9zaXplLndpZHRoO1xuICAgICAgICB0cmFjay5tZXRhLnByb2ZpbGUgPSBzcHMuc3BzLnByb2ZpbGVfc3RyaW5nO1xuICAgICAgICB0cmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcih0cmFjay5tZXRhLnRpbWVzY2FsZSAqIChzcHMuc3BzLmZyYW1lX3JhdGUuZnBzX2RlbiAvIHNwcy5zcHMuZnJhbWVfcmF0ZS5mcHNfbnVtKSk7XG4gICAgICAgIHRyYWNrLm1ldGEuc2FyUmF0aW8gPSBzcHMuc3BzLnNhcl9yYXRpbyA/IHNwcy5zcHMuc2FyX3JhdGlvIDogc3BzLnNwcy5wYXJfcmF0aW87XG4gICAgICB9IGVsc2UgaWYgKG5hbC5wcHMpIHtcbiAgICAgICAgdHJhY2sucHBzID0gbmFsLmJvZHk7XG4gICAgICAgIHBwcyA9IG5hbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNhbXBsZUxlbmd0aCArPSAoNCArIG5hbC5ib2R5LmJ5dGVMZW5ndGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzcHMgJiYgcHBzKSB7XG4gICAgICB0cmFjay5tZXRhLmF2Y2MgPSBOYWx1bml0LmdldEF2Y2Moc3BzLmJvZHksIHBwcy5ib2R5KTtcbiAgICAgIGlmICghdGhpcy5faGFzVmlkZW9NZXRhKSB7XG4gICAgICAgIHRoaXMuX2hhc1ZpZGVvTWV0YSA9IHRydWVcbiAgICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5NRVRBREFUQV9QQVJTRUQsICd2aWRlbycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoc2FtcGxlTGVuZ3RoKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgaXNLZXlmcmFtZSA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG5hbCA9IG5hbHNbaV07XG4gICAgICBsZXQgbGVuZ3RoID0gbmFsLmJvZHkuYnl0ZUxlbmd0aDtcbiAgICAgIGlmIChuYWwuaWRyKSB7XG4gICAgICAgIGlzS2V5ZnJhbWUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFuYWwucHBzICYmICFuYWwuc3BzKSB7XG4gICAgICAgIGRhdGEuc2V0KG5ldyBVaW50OEFycmF5KFtsZW5ndGggPj4+IDI0ICYgMHhmZixcbiAgICAgICAgICBsZW5ndGggPj4+IDE2ICYgMHhmZixcbiAgICAgICAgICBsZW5ndGggPj4+IDggJiAweGZmLFxuICAgICAgICAgIGxlbmd0aCAmIDB4ZmZcbiAgICAgICAgXSksIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICBkYXRhLnNldChuYWwuYm9keSwgb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IG5ldyBWaWRlb1RyYWNrU2FtcGxlKHtcbiAgICAgIGR0czogcGFyc2VJbnQocGVzLmR0cyAvIDkwKSxcbiAgICAgIHB0czogcGFyc2VJbnQocGVzLnB0cyAvIDkwKSxcbiAgICAgIGN0czogKHBlcy5wdHMgLSBwZXMuZHRzKSAvIDkwLFxuICAgICAgb3JpZ2luRHRzOiBwZXMuZHRzLFxuICAgICAgaXNLZXlmcmFtZSxcbiAgICAgIGRhdGFcbiAgICB9KVxuICAgIHRyYWNrLnNhbXBsZXMucHVzaChzYW1wbGUpO1xuICB9XG5cbiAgZGVzdG9yeSAoKSB7XG4gICAgdGhpcy5vZmYoREVNVVhfRVZFTlRTLkRFTVVYX1NUQVJULCB0aGlzLmRlbXV4KTtcbiAgICB0aGlzLmNvbmZpZ3MgPSB7fTtcbiAgICB0aGlzLmRlbXV4aW5nID0gZmFsc2U7XG4gICAgdGhpcy5wYXQgPSBbXTtcbiAgICB0aGlzLnBtdCA9IFtdO1xuICAgIHRoaXMuX2hhc1ZpZGVvTWV0YSA9IGZhbHNlO1xuICAgIHRoaXMuX2hhc0F1ZGlvTWV0YSA9IGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGNvbXBhaXJlVWludDggKGEsIGIpIHtcbiAgICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHJldCA9IHRydWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cbiAgc3RhdGljIE1lcmdlIChidWZmZXJzKSB7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZW5ndGggKz0gKGJ1ZmZlcnNbaV0ubGVuZ3RoIC0gYnVmZmVyc1tpXS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgYnVmZmVyID0gYnVmZmVyc1tpXTtcbiAgICAgIGRhdGEuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5wb3NpdGlvbiksIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gYnVmZmVyLmxlbmd0aCAtIGJ1ZmZlci5wb3NpdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdHJlYW0oZGF0YS5idWZmZXIpO1xuICB9XG5cbiAgc3RhdGljIHJlYWQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgVHNEZW11eGVyLnJlYWRIZWFkZXIoc3RyZWFtLCB0cyk7XG4gICAgVHNEZW11eGVyLnJlYWRQYXlsb2FkKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICBpZiAodHMuaGVhZGVyLnBhY2tldCA9PT0gJ01FRElBJyAmJiB0cy5oZWFkZXIucGF5bG9hZCA9PT0gMSAmJiAhdHMudW5rbm93blBJRHMpIHtcbiAgICAgIHRzLnBlcyA9IFRzRGVtdXhlci5QRVModHMpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyByZWFkUGF5bG9hZCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgaGVhZGVyID0gdHMuaGVhZGVyXG4gICAgbGV0IHBpZCA9IGhlYWRlci5waWQ7XG4gICAgc3dpdGNoIChwaWQpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgVHNEZW11eGVyLlBBVChzdHJlYW0sIHRzLCBmcmFncyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBUc0RlbXV4ZXIuQ0FUKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIFRzRGVtdXhlci5UU0RUKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDB4MWZmZjpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBUT0RPOiBzb21l55qE5YaZ5rOV5LiN5aSq5aW977yM5b6X5pS5XG4gICAgICAgIGlmIChmcmFncy5wYXQuc29tZSgoaXRlbSkgPT4geyByZXR1cm4gaXRlbS5waWQgPT09IHBpZDsgfSkpIHtcbiAgICAgICAgICBUc0RlbXV4ZXIuUE1UKHN0cmVhbSwgdHMsIGZyYWdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgc3RzID0gZnJhZ3MucG10ID8gZnJhZ3MucG10LmZpbHRlcigoaXRlbSkgPT4gaXRlbS5waWQgPT09IHBpZCkgOiBbXTtcbiAgICAgICAgICBpZiAoc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIFRzRGVtdXhlci5NZWRpYShzdHJlYW0sIHRzLCBTdHJlYW1UeXBlW3N0c1swXS5zdHJlYW1UeXBlXVswXSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHMudW5rbm93blBJRHMgPSB0cnVlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcmVhZEhlYWRlciAoc3RyZWFtLCB0cykge1xuICAgIGxldCBoZWFkZXIgPSB7fTtcbiAgICBoZWFkZXIuc3luYyA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgaGVhZGVyLmVycm9yID0gbmV4dCA+Pj4gMTU7XG4gICAgaGVhZGVyLnBheWxvYWQgPSBuZXh0ID4+PiAxNCAmIDE7XG4gICAgaGVhZGVyLnByaW9yaXR5ID0gbmV4dCA+Pj4gMTMgJiAxO1xuICAgIGhlYWRlci5waWQgPSBuZXh0ICYgMHgxZmZmO1xuXG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcblxuICAgIGhlYWRlci5zY3JhbWJsaW5nID0gbmV4dCA+PiA2ICYgMHgzOyAvLyDmmK/lkKbliqDlr4bvvIwwMOihqOekuuS4jeWKoOWvhlxuXG4gICAgLyoqXG4gICAgICogMDAgSVNPL0lFQ+acquadpeS9v+eUqOS/neeVmVxuICAgICAqIDAxIOayoeacieiwg+aVtOWtl+aute+8jOS7heWQq+aciTE4NELmnInmlYjlh4DojbdcbiAgICAgKiAwMiDmsqHmnInmnInmlYjlh4DojbfvvIzku4XlkKvmnIkxODNC6LCD5pW05a2X5q61XG4gICAgICogMDMgMH4xODJC6LCD5pW05a2X5q615ZCO5Li65pyJ5pWI5YeA6I23XG4gICAgICovXG4gICAgaGVhZGVyLmFkYXB0YXRpb24gPSBuZXh0ID4+IDQgJiAweDM7XG4gICAgaGVhZGVyLmNvbnRpbnVpdHkgPSBuZXh0ICYgMTU7XG4gICAgaGVhZGVyLnBhY2tldCA9IGhlYWRlci5waWQgPT09IDAgPyAnUEFUJyA6ICdNRURJQSc7XG4gICAgdHMuaGVhZGVyID0gaGVhZGVyO1xuICB9XG5cbiAgc3RhdGljIFBBVCAoc3RyZWFtLCB0cywgZnJhZ3MpIHtcbiAgICBsZXQgcmV0ID0ge307XG4gICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgc3RyZWFtLnNraXAobmV4dCk7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQudGFiZWxJRCA9IG5leHQ7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmVycm9yID0gbmV4dCA+Pj4gNztcbiAgICByZXQuemVybyA9IG5leHQgPj4+IDYgJiAxO1xuICAgIHJldC5zZWN0aW9uTGVuZ3RoID0gbmV4dCAmIDB4ZmZmO1xuICAgIHJldC5zdHJlYW1JRCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmN1cnJlbnQgPSBzdHJlYW0ucmVhZFVpbnQ4KCkgJiAxO1xuICAgIHJldC5zZWN0aW9uTnVtYmVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC5sYXN0U2VjdGlvbk51bWJlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBsZXQgTiA9IChyZXQuc2VjdGlvbkxlbmd0aCAtIDkpIC8gNDtcbiAgICBsZXQgbGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBsZXQgcHJvZ3JhbU51bWJlciA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICBsZXQgcGlkID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgIHByb2dyYW06IHByb2dyYW1OdW1iZXIsXG4gICAgICAgIHBpZCxcbiAgICAgICAgdHlwZTogcHJvZ3JhbU51bWJlciA9PT0gMCA/ICduZXR3b3JrJyA6ICdtYXBQSUQnXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgZnJhZ3MucGF0ID0gZnJhZ3MucGF0LmNvbmNhdChsaXN0KTtcbiAgICB9XG4gICAgcmV0Lmxpc3QgPSBsaXN0O1xuICAgIHJldC5wcm9ncmFtID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQucGlkID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICB0cy5wYXlsb2FkID0gcmV0O1xuICAgIC8vIFRPRE8gQ1JDXG4gIH1cblxuICBzdGF0aWMgUE1UIChzdHJlYW0sIHRzLCBmcmFncykge1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBsZXQgaGVhZGVyID0gdHMuaGVhZGVyO1xuICAgIGhlYWRlci5wYWNrZXQgPSAnUE1UJztcbiAgICBsZXQgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICBzdHJlYW0uc2tpcChuZXh0KTtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC50YWJsZUlEID0gbmV4dDtcbiAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICByZXQuc2VjdGlvbkxlbmd0aCA9IG5leHQgJiAweGZmZjtcbiAgICByZXQucHJvZ3JhbSA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgcmV0LmN1cnJlbnQgPSBzdHJlYW0ucmVhZFVpbnQ4KCkgJiAxO1xuICAgIHJldC5vcmRlciA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQubGFzdE9yZGVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIHJldC5QQ1JfUElEID0gc3RyZWFtLnJlYWRVaW50MTYoKSAmIDB4MWZmZjtcbiAgICByZXQucHJvZ3JhbUxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweGZmZjtcbiAgICBsZXQgTiA9IChyZXQuc2VjdGlvbkxlbmd0aCAtIDEzKSAvIDU7XG4gICAgbGV0IGxpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgc3RyZWFtVHlwZTogc3RyZWFtLnJlYWRVaW50OCgpLFxuICAgICAgICBwaWQ6IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweDFmZmYsIC8vIDB4MDdlNSDop4bpopHvvIwweDA3ZTZcbiAgICAgICAgZXM6IHN0cmVhbS5yZWFkVWludDE2KCkgJiAweGZmZlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldC5saXN0ID0gbGlzdDtcbiAgICBpZiAoIXRoaXMucG10KSB7XG4gICAgICB0aGlzLnBtdCA9IFtdO1xuICAgIH1cbiAgICBmcmFncy5wbXQgPSB0aGlzLnBtdC5jb25jYXQobGlzdC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBpZDogaXRlbS5waWQsXG4gICAgICAgIGVzOiBpdGVtLmVzLFxuICAgICAgICBzdHJlYW1UeXBlOiBpdGVtLnN0cmVhbVR5cGUsXG4gICAgICAgIHByb2dyYW06IHJldC5wcm9ncmFtXG4gICAgICB9O1xuICAgIH0pKTtcbiAgICB0cy5wYXlsb2FkID0gcmV0O1xuICB9XG5cbiAgc3RhdGljIE1lZGlhIChzdHJlYW0sIHRzLCB0eXBlKSB7XG4gICAgbGV0IGhlYWRlciA9IHRzLmhlYWRlcjtcbiAgICBsZXQgcGF5bG9hZCA9IHt9O1xuICAgIGhlYWRlci50eXBlID0gdHlwZTtcbiAgICBpZiAoaGVhZGVyLmFkYXB0YXRpb24gPT09IDB4MDMpIHtcbiAgICAgIHBheWxvYWQuYWRhcHRhdGlvbkxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICAgIGlmIChwYXlsb2FkLmFkYXB0YXRpb25MZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICBwYXlsb2FkLmRpc2NvbnRpbnVlID0gbmV4dCA+Pj4gNztcbiAgICAgICAgcGF5bG9hZC5hY2Nlc3MgPSBuZXh0ID4+PiA2ICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5wcmlvcml0eSA9IG5leHQgPj4+IDUgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLlBDUiA9IG5leHQgPj4+IDQgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLk9QQ1IgPSBuZXh0ID4+PiAzICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5zcGxpY2VQb2ludCA9IG5leHQgPj4+IDIgJiAweDAxO1xuICAgICAgICBwYXlsb2FkLnRyYW5zcG9ydFByaXZhdGUgPSBuZXh0ID4+PiAxICYgMHgwMTtcbiAgICAgICAgcGF5bG9hZC5hZGFwdGF0aW9uRmllbGQgPSBuZXh0ICYgMHgwMTtcbiAgICAgICAgbGV0IF9zdGFydCA9IHN0cmVhbS5wb3NpdGlvbjtcbiAgICAgICAgaWYgKHBheWxvYWQuUENSID09PSAxKSB7XG4gICAgICAgICAgcGF5bG9hZC5wcm9ncmFtQ2xvY2tCYXNlID0gc3RyZWFtLnJlYWRVaW50MzIoKSA8PCAxO1xuICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHBheWxvYWQucHJvZ3JhbUNsb2NrQmFzZSB8PSBuZXh0ID4+PiAxNTtcbiAgICAgICAgICBwYXlsb2FkLnByb2dyYW1DbG9ja0V4dGVuc2lvbiA9IG5leHQgJiAweDFmZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5PUENSID09PSAxKSB7XG4gICAgICAgICAgcGF5bG9hZC5vcmlnaW5Qcm9ncmFtQ2xvY2tCYXNlID0gc3RyZWFtLnJlYWRVaW50MzIoKSA8PCAxO1xuICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHBheWxvYWQub3JpZ2luUHJvZ3JhbUNsb2NrQmFzZSArPSBuZXh0ID4+PiAxNTtcbiAgICAgICAgICBwYXlsb2FkLm9yaWdpblByb2dyYW1DbG9ja0V4dGVuc2lvbiA9IG5leHQgJiAweDFmZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5zcGxpY2VQb2ludCA9PT0gMSkge1xuICAgICAgICAgIHBheWxvYWQuc3BsaWNlQ291bnRkb3duID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXlsb2FkLnRyYW5zcG9ydFByaXZhdGUgPT09IDEpIHtcbiAgICAgICAgICBsZXQgbGVuZ3RoID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgICAgICAgIGxldCB0cmFuc3BvcnRQcml2YXRlRGF0YSA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydFByaXZhdGVEYXRhLnB1c2goc3RyZWFtLnJlYWRVaW50OCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQuYWRhcHRhdGlvbkZpZWxkID09PSAxKSB7XG4gICAgICAgICAgbGV0IGxlbmd0aCA9IHN0cmVhbS5yZWFkVWludDgoKVxuICAgICAgICAgIGxldCBuZXh0ID0gc3RyZWFtLnJlYWRVaW50OCgpXG4gICAgICAgICAgbGV0IHN0YXJ0ID0gc3RyZWFtLnBvc2l0aW9uO1xuICAgICAgICAgIGxldCBsdHcgPSBuZXh0ID4+PiA3O1xuICAgICAgICAgIGxldCBwaWVjZXdpc2UgPSBuZXh0ID4+PiA2ICYgMHgxO1xuICAgICAgICAgIGxldCBzZWFtbGVzcyA9IG5leHQgPj4+IDUgJiAweDE7XG4gICAgICAgICAgaWYgKGx0dyA9PT0gMSkge1xuICAgICAgICAgICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDE2KCk7XG4gICAgICAgICAgICBwYXlsb2FkLmx0d1ZhbGlkID0gbmV4dCA+Pj4gMTU7XG4gICAgICAgICAgICBwYXlsb2FkLmx0d09mZnNldCA9IG5leHQgJiAweGVmZmY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwaWVjZXdpc2UgPT09IDEpIHtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQyNCgpO1xuICAgICAgICAgICAgcGF5bG9hZC5waWVjZXdpc2VSYXRlID0gbmV4dCAmIDB4M2ZmZmZmO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2VhbWxlc3MgPT09IDEpIHtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZEludDgoKTtcbiAgICAgICAgICAgIHBheWxvYWQuc3BsaWNlVHlwZSA9IG5leHQgPj4+IDQ7XG4gICAgICAgICAgICBwYXlsb2FkLmR0c05leHRBVTEgPSBuZXh0ID4+PiAxICYgMHg3O1xuICAgICAgICAgICAgcGF5bG9hZC5tYXJrZXIxID0gbmV4dCAmIDB4MTtcbiAgICAgICAgICAgIG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgICAgICAgICAgcGF5bG9hZC5kdHNOZXh0QVUyID0gbmV4dCA+Pj4gMTtcbiAgICAgICAgICAgIHBheWxvYWQubWFya2VyMiA9IG5leHQgJiAweDE7XG4gICAgICAgICAgICBuZXh0ID0gc3RyZWFtLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICAgIHBheWxvYWQuZHRzTmV4dEFVMyA9IG5leHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmVhbS5za2lwKGxlbmd0aCAtIDEgLSAoc3RyZWFtLnBvc2l0aW9uIC0gc3RhcnQpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGFzdFN0dWZmaW5nID0gcGF5bG9hZC5hZGFwdGF0aW9uTGVuZ3RoIC0gMSAtIChzdHJlYW0ucG9zaXRpb24gLSBfc3RhcnQpO1xuICAgICAgICBzdHJlYW0uc2tpcChsYXN0U3R1ZmZpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgICBwYXlsb2FkLnN0cmVhbSA9IG5ldyBTdHJlYW0oc3RyZWFtLmJ1ZmZlci5zbGljZShzdHJlYW0ucG9zaXRpb24pKTtcbiAgICB0cy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgfVxuXG4gIHN0YXRpYyBQRVMgKHRzKSB7XG4gICAgbGV0IHJldCA9IHt9O1xuICAgIGxldCBidWZmZXIgPSB0cy5wYXlsb2FkLnN0cmVhbTtcbiAgICBcbiAgICBsZXQgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgaWYgKG5leHQgIT09IDEpIHtcbiAgICAgIHJldC5FUyA9IHt9O1xuICAgICAgcmV0LkVTLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHN0cmVhbUlEID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgaWYgKHN0cmVhbUlEID49IDB4ZTAgJiYgc3RyZWFtSUQgPD0gMHhlZikge1xuICAgICAgICByZXQudHlwZSA9ICd2aWRlbyc7XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtSUQgPj0gMHhjMCAmJiBzdHJlYW1JRCA8PSAweGRmKSB7XG4gICAgICAgIHJldC50eXBlID0gJ2F1ZGlvJztcbiAgICAgIH1cbiAgICAgIGxldCBwYWNrZXRMZW5ndGggPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgcmV0LnBhY2tldExlbmd0aCA9IHBhY2tldExlbmd0aDtcbiAgICAgIGlmIChyZXQudHlwZSA9PT0gJ3ZpZGVvJyB8fCByZXQudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICBsZXQgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgbGV0IGZpcnN0ID0gbmV4dCA+Pj4gNjtcbiAgICAgICAgaWYgKGZpcnN0ICE9PSAweDAyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlcnJvciB3aGVuIHBhcnNlIHBlcyBoZWFkZXInKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50OCgpO1xuICAgICAgICByZXQucHRzRFRTRmxhZyA9IG5leHQgPj4+IDY7XG4gICAgICAgIHJldC5lc2NyRmxhZyA9IG5leHQgPj4+IDUgJiAweDAxO1xuICAgICAgICByZXQuZXNSYXRlRmxhZyA9IG5leHQgPj4+IDQgJiAweDAxO1xuICAgICAgICByZXQuZHNtRmxhZyA9IG5leHQgPj4+IDMgJiAweDAxO1xuICAgICAgICByZXQuYWRkaXRpb25hbEZsYWcgPSBuZXh0ID4+PiAyICYgMHgwMTtcbiAgICAgICAgcmV0LmNyY0ZsYWcgPSBuZXh0ID4+PiAxICYgMHgwMTtcbiAgICAgICAgcmV0LmV4dGVuc2lvbkZsYWcgPSBuZXh0ICYgMHgwMTtcbiAgICAgICAgcmV0LnBlc0hlYWRlckxlbmd0aCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgbGV0IE4xID0gcmV0LnBlc0hlYWRlckxlbmd0aDtcblxuICAgICAgICBpZiAocmV0LnB0c0RUU0ZsYWcgPT09IDIpIHtcbiAgICAgICAgICBsZXQgcHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBwdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LnB0cyA9IChwdHNbMF0gPDwgMzAgfCBwdHNbMV0gPDwgMTUgfCBwdHNbMl0pO1xuICAgICAgICAgIE4xIC09IDU7XG4gICAgICAgICAgLy8g6KeG6aKR5aaC5p6c5rKh5pyJZHRz55SocHRzXG4gICAgICAgICAgaWYgKHJldC50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICByZXQuZHRzID0gcmV0LnB0cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5wdHNEVFNGbGFnID09PSAzKSB7XG4gICAgICAgICAgbGV0IHB0cyA9IFtdO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQ4KCk7XG4gICAgICAgICAgcHRzLnB1c2gobmV4dCA+Pj4gMSAmIDB4MDcpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIHB0cy5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIHJldC5wdHMgPSAocHRzWzBdIDw8IDMwIHwgcHRzWzFdIDw8IDE1IHwgcHRzWzJdKTtcbiAgICAgICAgICBsZXQgZHRzID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBkdHMucHVzaChuZXh0ID4+PiAxICYgMHgwNyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZHRzLnB1c2gobmV4dCA+Pj4gMSk7XG4gICAgICAgICAgcmV0LmR0cyA9IChkdHNbMF0gPDwgMzAgfCBkdHNbMV0gPDwgMTUgfCBkdHNbMl0pO1xuICAgICAgICAgIE4xIC09IDEwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZXNjckZsYWcgPT09IDEpIHtcbiAgICAgICAgICBsZXQgZXNjciA9IFtdXG4gICAgICAgICAgbGV0IGV4ID0gW107XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCA+Pj4gMyAmIDB4MDcpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAgICAgZXNjci5wdXNoKG5leHQgPj4+IDEzKTtcbiAgICAgICAgICBlc2NyLnB1c2gobmV4dCAmIDB4MDMpO1xuICAgICAgICAgIG5leHQgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICAgIGVzY3IucHVzaChuZXh0ID4+PiAxMyk7XG4gICAgICAgICAgZXgucHVzaChuZXh0ICYgMHgwMyk7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICBleC5wdXNoKG5leHQgPj4+IDEpO1xuICAgICAgICAgIHJldC5lc2NyID0gKGVzY3JbMF0gPDwgMzAgfCBlc2NyWzFdIDw8IDI4IHwgZXNjclsyXSA8PCAxNSB8IGVzY3JbM10gPDwgMTMgfCBlc2NyWzRdKSAqIDMwMCArIChleFswXSA8PCA3IHwgZXhbMV0pO1xuICAgICAgICAgIE4xIC09IDY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJldC5lc1JhdGVGbGFnID09PSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgICAgICAgcmV0LmVzUmF0ZSA9IG5leHQgPj4+IDEgJiAweDNmZmZmZjtcbiAgICAgICAgICBOMSAtPSAzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZHNtRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnQgRFNNX3RyaWNrX21vZGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmFkZGl0aW9uYWxGbGFnID09PSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDgoKTtcbiAgICAgICAgICByZXQuYWRkaXRpb25hbENvcHlJbmZvID0gbmV4dCAmIDB4N2Y7XG4gICAgICAgICAgTjEgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0LmNyY0ZsYWcgPT09IDEpIHtcbiAgICAgICAgICByZXQucGVzQ1JDID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgICAgICBOMSAtPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXQuZXh0ZW5zaW9uRmxhZyA9PT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnQgZXh0ZW5zaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE4xID4gMCkge1xuICAgICAgICAgIGJ1ZmZlci5za2lwKE4xKTtcbiAgICAgICAgfVxuICAgICAgICByZXQuRVMgPSBUc0RlbXV4ZXIuRVMoYnVmZmVyLCByZXQudHlwZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Zvcm1hdCBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBzdGF0aWMgRVMgKGJ1ZmZlciwgdHlwZSkge1xuICAgIGxldCBuZXh0O1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBpZiAodHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDMyKCk7XG4gICAgICBpZiAobmV4dCAhPT0gMSkge1xuICAgICAgICBidWZmZXIuYmFjayg0KTtcbiAgICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDI0KCk7XG4gICAgICAgIGlmIChuZXh0ICE9PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoMjY0IG5hbCBoZWFkZXIgcGFyc2UgZmFpbGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1ZmZlci5za2lwKDIpOy8vIDA5IEYwXG4gICAgICAvLyBUT0RPIHJlYWRuYWx1XG4gICAgICByZXQuYnVmZmVyID0gYnVmZmVyO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgICAvLyBhZHRz55qE5ZCM5q2l5a2X6IqC77yMMTLkvY1cbiAgICAgIGlmIChuZXh0ID4+PiA0ICE9PSAweGZmZikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FhYyBFUyBwYXJzZSBFcnJvcicpO1xuICAgICAgfVxuICAgICAgY29uc3QgZnEgPSBbOTYwMDAsIDg4MjAwLCA2NDAwMCwgNDgwMDAsIDQ0MTAwLCAzMjAwMCwgMjQwMDAsIDIyMDUwLCAxNjAwMCwgMTIwMDAsIDExMDI1LCA4MDAwLCA3MzUwXTtcbiAgICAgIHJldC5pZCA9IChuZXh0ID4+PiAzICYgMHgwMSkgPT09IDAgPyAnTVBFRy00JyA6ICdNUEVHLTInO1xuICAgICAgcmV0LmxheWVyID0gbmV4dCA+Pj4gMSAmIDB4MDM7XG4gICAgICByZXQuYWJzZW50ID0gbmV4dCAmIDB4MDE7XG4gICAgICBuZXh0ID0gYnVmZmVyLnJlYWRVaW50MTYoKTtcbiAgICAgIHJldC5hdWRpb09iamVjdFR5cGUgPSAobmV4dCA+Pj4gMTQgJiAweDAzKSArIDE7XG4gICAgICByZXQucHJvZmlsZSA9IHJldC5hdWRpb09iamVjdFR5cGUgLSAxO1xuICAgICAgcmV0LmZyZXF1ZW5jeUluZGV4ID0gbmV4dCA+Pj4gMTAgJiAweDBmO1xuICAgICAgcmV0LmZyZXF1ZW5jZSA9IGZxW3JldC5mcmVxdWVuY3lJbmRleF07XG4gICAgICByZXQuY2hhbm5lbCA9IG5leHQgPj4+IDYgJiAweDA3O1xuICAgICAgcmV0LmZyYW1lTGVuZ3RoID0gKG5leHQgJiAweDAzKSA8PCAxMSB8IChidWZmZXIucmVhZFVpbnQxNigpID4+PiA1KTtcbiAgICAgIHJldC5hdWRpb0NvbmZpZyA9IFRzRGVtdXhlci5nZXRBdWRpb0NvbmZpZyhyZXQuYXVkaW9PYmplY3RUeXBlLCByZXQuY2hhbm5lbCwgcmV0LmZyZXF1ZW5jeUluZGV4KTtcbiAgICAgIGJ1ZmZlci5za2lwKDEpO1xuICAgICAgcmV0LmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFUyAke3R5cGV9IGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgc3RhdGljIFRTRFQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgLy8gVE9ET1xuICAgIHRzLnBheWxvYWQgPSB7fTtcbiAgfVxuXG4gIHN0YXRpYyBDQVQgKHN0cmVhbSwgdHMsIGZyYWdzKSB7XG4gICAgbGV0IHJldCA9IHt9XG4gICAgcmV0LnRhYmxlSUQgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgbGV0IG5leHQgPSBzdHJlYW0ucmVhZFVpbnQxNigpO1xuICAgIHJldC5zZWN0aW9uSW5kaWNhdG9yID0gbmV4dCA+Pj4gNztcbiAgICByZXQuc2VjdGlvbkxlbmd0aCA9IG5leHQgJiAweDBmZmY7XG4gICAgc3RyZWFtLnNraXAoMik7XG4gICAgbmV4dCA9IHN0cmVhbS5yZWFkVWludDgoKTtcbiAgICByZXQudmVyc2lvbiA9IG5leHQgPj4+IDM7XG4gICAgcmV0LmN1cnJlbnROZXh0SW5kaWNhdG9yID0gbmV4dCAmIDB4MDE7XG4gICAgcmV0LnNlY3Rpb25OdW1iZXIgPSBzdHJlYW0ucmVhZFVpbnQ4KCk7XG4gICAgcmV0Lmxhc3RTZWN0aW9uTnVtYmVyID0gc3RyZWFtLnJlYWRVaW50OCgpO1xuICAgIGxldCBOID0gKHRoaXMuc2VjdGlvbkxlbmd0aCAtIDkpIC8gNDtcbiAgICBsZXQgbGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBsaXN0LnB1c2goe30pO1xuICAgIH1cbiAgICByZXQuY3JjMzIgPSBzdHJlYW0ucmVhZFVpbnQzMigpO1xuICAgIHRzLnBheWxvYWQgPSByZXQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0QXVkaW9Db25maWcgKGF1ZGlvT2JqZWN0VHlwZSwgY2hhbm5lbCwgc2FtcGxlSW5kZXgpIHtcbiAgICBsZXQgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpXG4gICAgbGV0IGNvbmZpZztcbiAgICBsZXQgZXh0ZW5zaW9uU2FtcGxlSW5kZXg7XG4gICAgaWYgKC9maXJlZm94L2kudGVzdCh1c2VyQWdlbnQpKSB7XG4gICAgICBpZiAoc2FtcGxlSW5kZXggPj0gNikge1xuICAgICAgICBhdWRpb09iamVjdFR5cGUgPSA1O1xuICAgICAgICBjb25maWcgPSBuZXcgQXJyYXkoNCk7XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gc2FtcGxlSW5kZXggLSAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXVkaW9PYmplY3RUeXBlID0gMjtcbiAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICBleHRlbnNpb25TYW1wbGVJbmRleCA9IHNhbXBsZUluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoJ2FuZHJvaWQnKSAhPT0gLTEpIHtcbiAgICAgIGF1ZGlvT2JqZWN0VHlwZSA9IDI7XG4gICAgICBjb25maWcgPSBuZXcgQXJyYXkoMik7XG4gICAgICBleHRlbnNpb25TYW1wbGVJbmRleCA9IHNhbXBsZUluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBhdWRpb09iamVjdFR5cGUgPSA1O1xuICAgICAgY29uZmlnID0gbmV3IEFycmF5KDQpO1xuICAgICAgaWYgKHNhbXBsZUluZGV4ID49IDYpIHtcbiAgICAgICAgZXh0ZW5zaW9uU2FtcGxlSW5kZXggPSBzYW1wbGVJbmRleCAtIDM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY2hhbm5lbCA9PT0gMSkge1xuICAgICAgICAgIGF1ZGlvT2JqZWN0VHlwZSA9IDI7XG4gICAgICAgICAgY29uZmlnID0gbmV3IEFycmF5KDIpO1xuICAgICAgICB9XG4gICAgICAgIGV4dGVuc2lvblNhbXBsZUluZGV4ID0gc2FtcGxlSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uZmlnWzBdID0gYXVkaW9PYmplY3RUeXBlIDw8IDM7XG4gICAgY29uZmlnWzBdIHw9IChzYW1wbGVJbmRleCAmIDB4MGUpID4+IDE7XG4gICAgY29uZmlnWzFdID0gKHNhbXBsZUluZGV4ICYgMHgwMSkgPDwgNztcbiAgICBjb25maWdbMV0gfD0gY2hhbm5lbCA8PCAzO1xuICAgIGlmIChhdWRpb09iamVjdFR5cGUgPT09IDUpIHtcbiAgICAgIGNvbmZpZ1sxXSB8PSAoZXh0ZW5zaW9uU2FtcGxlSW5kZXggJiAweDBlKSA+PiAxO1xuICAgICAgY29uZmlnWzJdID0gKGV4dGVuc2lvblNhbXBsZUluZGV4ICYgMHgwMSkgPDwgNztcbiAgICAgIGNvbmZpZ1syXSB8PSAyIDw8IDI7XG4gICAgICBjb25maWdbM10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgZ2V0IGlucHV0QnVmZmVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmNvbmZpZ3MuaW5wdXRidWZmZXIpO1xuICB9XG5cbiAgZ2V0IF90cmFja3MgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUc0RlbXV4ZXI7XG4iLCJjbGFzcyBQbGF5bGlzdCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5fYmFzZVVSTCA9ICcnO1xuICAgIHRoaXMuX2xpc3QgPSB7fTtcbiAgICB0aGlzLl90cyA9IHt9O1xuICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgdGhpcy5zZXF1ZW5jZSA9IC0xO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZnJhZ0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbGFzdGdldCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9hdWRvY2xlYXIgPSBjb25maWdzLmF1dG9jbGVhciB8fCBmYWxzZTtcbiAgfVxuXG4gIGdldCBsaXN0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGlzdDtcbiAgfVxuXG4gIHNldCBiYXNlVVJMIChiYXNlVVJMKSB7XG4gICAgaWYgKHRoaXMuYmFzZVVSTCAhPT0gYmFzZVVSTCkge1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgdGhpcy5fYmFzZVVSTCA9IGJhc2VVUkw7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGJhc2VVUkwgKCkge1xuICAgIHJldHVybiB0aGlzLl9iYXNlVVJMO1xuICB9XG5cbiAgcHVzaCAodHMsIGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLl90c1t0c10pIHtcbiAgICAgIHRoaXMuX3RzW3RzXSA9IHtkdXJhdGlvbjogZHVyYXRpb24sIGRvd25sb2FkZWQ6IGZhbHNlLCBkb3dubG9hZGluZzogZmFsc2UsIHN0YXJ0OiB0aGlzLmR1cmF0aW9ufTtcbiAgICAgIHRoaXMuX2xpc3RbdGhpcy5kdXJhdGlvbl0gPSB0cztcbiAgICAgIHRoaXMuZHVyYXRpb24gKz0gZHVyYXRpb247XG4gICAgICB0aGlzLmZyYWdMZW5ndGggKz0gMTtcbiAgICB9XG4gIH1cblxuICBkZWxldGVGcmFnICh1cmwpIHtcbiAgICBpZiAodGhpcy5fdHNbdXJsXSkge1xuICAgICAgaWYgKHRoaXMuX3RzW3VybF0uc3RhcnQgPiB0aGlzLl9sYXN0Z2V0LnRpbWUpIHtcbiAgICAgICAgdGhpcy5fbGFzdGdldCA9IHtcbiAgICAgICAgICBkdXJhdGlvbjogdGhpcy5fdHNbdXJsXS5kdXJhdGlvbixcbiAgICAgICAgICB0aW1lOiB0aGlzLl90c1t1cmxdLnN0YXJ0LFxuICAgICAgICAgIGRvd25sb2FkZWQ6IGZhbHNlLFxuICAgICAgICAgIGRvd25sb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICB1cmw6IHVybFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWxldGUgdGhpcy5fbGlzdFt0aGlzLl90c1t1cmxdLnN0YXJ0XTtcbiAgICAgIGRlbGV0ZSB0aGlzLl90c1t1cmxdO1xuICAgICAgdGhpcy5mcmFnTGVuZ3RoIC09IDE7XG4gICAgfVxuICB9XG5cbiAgcHVzaE0zVTggKGRhdGEsIGRlbGV0ZXByZSkge1xuICAgIC8vIOW4uOinhOS/oeaBr+abv+aNolxuICAgIGlmICghZGF0YSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnZlcnNpb24gPSBkYXRhLnZlcnNpb247XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IGRhdGEudGFyZ2V0ZHVyYXRpb247XG5cbiAgICAvLyDmlrDliIbniYfkv6Hmga9cbiAgICBpZiAoZGF0YS5zZXF1ZW5jZSA+IHRoaXMuc2VxdWVuY2UpIHtcbiAgICAgIHRoaXMuc2VxdWVuY2UgPSBkYXRhLnNlcXVlbmNlO1xuICAgICAgbGV0IG5ld2ZyYWdsaXN0ID0gW11cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5mcmFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZnJhZyA9IGRhdGEuZnJhZ3NbaV07XG4gICAgICAgIGlmICghdGhpcy5fdHNbZnJhZy51cmxdKSB7XG4gICAgICAgICAgbmV3ZnJhZ2xpc3QucHVzaChmcmFnLnVybClcbiAgICAgICAgICB0aGlzLnB1c2goZnJhZy51cmwsIGZyYWcuZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGVsZXRlcHJlKSB7XG4gICAgICAgIGxldCB0c2xpc3QgPSB0aGlzLmdldFRzTGlzdCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRzbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChuZXdmcmFnbGlzdC5pbmRleE9mKHRzbGlzdFtpXSkgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZUZyYWcodHNsaXN0W2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRUc0xpc3QgKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl90cyk7XG4gIH1cblxuICBkb3dubG9hZGVkICh0c25hbWUsIGlzbG9hZGVkKSB7XG4gICAgbGV0IHRzID0gdGhpcy5fdHNbdHNuYW1lXTtcbiAgICBpZiAodHMpIHtcbiAgICAgIHRzLmRvd25sb2FkZWQgPSBpc2xvYWRlZFxuICAgIH1cbiAgfVxuXG4gIGRvd25sb2FkaW5nICh0c25hbWUsIGxvYWRpbmcpIHtcbiAgICBsZXQgdHMgPSB0aGlzLl90c1t0c25hbWVdO1xuICAgIGlmICh0cykge1xuICAgICAgdHMuZG93bmxvYWRpbmcgPSBsb2FkaW5nXG4gICAgfVxuICB9XG5cbiAgZ2V0VHNCeU5hbWUgKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fdHNbbmFtZV07XG4gIH1cblxuICBnZXRUcyAodGltZSkge1xuICAgIGxldCB0aW1lbGlzdCA9IE9iamVjdC5rZXlzKHRoaXMuX2xpc3QpO1xuICAgIGxldCB0cztcblxuICAgIGlmICh0aW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLl9sYXN0Z2V0KSB7XG4gICAgICAgIHRpbWUgPSB0aGlzLl9sYXN0Z2V0LnRpbWUgKyB0aGlzLl9sYXN0Z2V0LmR1cmF0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaXN0Lmxlbmd0aCA8IDEgfHwgdGltZSA+PSB0aGlzLmR1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aW1lbGlzdC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChhKSAtIHBhcnNlRmxvYXQoYilcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbWVsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGltZSA+PSBwYXJzZUludCh0aW1lbGlzdFtpXSkpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMuX2xpc3RbdGltZWxpc3RbaV1dO1xuICAgICAgICBsZXQgZG93bmxvYWRlZCA9IHRoaXMuX3RzW3VybF0uZG93bmxvYWRlZDtcbiAgICAgICAgbGV0IGRvd25sb2FkaW5nID0gdGhpcy5fdHNbdXJsXS5kb3dubG9hZGluZztcbiAgICAgICAgdHMgPSB7dXJsLCBkb3dubG9hZGVkLCBkb3dubG9hZGluZywgdGltZTogcGFyc2VJbnQodGltZWxpc3RbaV0pLCBkdXJhdGlvbjogcGFyc2VJbnQodGhpcy5fdHNbdXJsXS5kdXJhdGlvbil9O1xuICAgICAgICBpZiAodGhpcy5hdXRvY2xlYXIpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fdHNbdGhpcy5fbGFzdGdldC51cmxdO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXN0W3RoaXMuX2xhc3RnZXQudGltZV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFzdGdldCA9IHRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cztcbiAgfVxuXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLl9iYXNlVVJMID0gJyc7XG4gICAgdGhpcy5fbGlzdCA9IHt9O1xuICAgIHRoaXMuX3RzID0ge307XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICB0aGlzLnNlcXVlbmNlID0gLTE7XG4gICAgdGhpcy50YXJnZXRkdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDA7XG4gIH1cblxuICBjbGVhckRvd25sb2FkZWQgKCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gT2JqZWN0LmtleXModGhpcy5fdHMpLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGV0IHRzID0gdGhpcy5fdHNbT2JqZWN0LmtleXModGhpcy5fdHMpW2ldXTtcbiAgICAgIHRzLmRvd25sb2FkZWQgPSBmYWxzZTtcbiAgICAgIHRzLmRvd25sb2FkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fYmFzZVVSTCA9ICcnO1xuICAgIHRoaXMuX2xpc3QgPSB7fTtcbiAgICB0aGlzLl90cyA9IHt9O1xuICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgdGhpcy5zZXF1ZW5jZSA9IC0xO1xuICAgIHRoaXMudGFyZ2V0ZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZHVyYXRpb24gPSAwO1xuICAgIHRoaXMuZnJhZ0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbGFzdGdldCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9hdWRvY2xlYXIgPSBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGF5bGlzdDtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBGZXRjaExvYWRlcjogcmVxdWlyZSgnLi9zcmMvZmV0Y2gtbG9hZGVyJykuZGVmYXVsdFxufTtcbiIsImltcG9ydCB7IEVWRU5UUyB9IGZyb20gJ3hncGxheWVyLXV0aWxzJztcblxuY29uc3QgTE9BREVSX0VWRU5UUyA9IEVWRU5UUy5MT0FERVJfRVZFTlRTO1xuY29uc3QgUkVBRF9TVFJFQU0gPSAwO1xuY29uc3QgUkVBRF9URVhUID0gMTtcbmNvbnN0IFJFQURfSlNPTiA9IDI7XG5jb25zdCBSRUFEX0JVRkZFUiA9IDM7XG5jbGFzcyBGZXRjaExvYWRlciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWdzKSB7XG4gICAgdGhpcy5jb25maWdzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlncyk7XG4gICAgdGhpcy51cmwgPSBudWxsXG4gICAgdGhpcy5zdGF0dXMgPSAwXG4gICAgdGhpcy5lcnJvciA9IG51bGxcbiAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX2NhbmNlbGVkID0gZmFsc2U7XG4gICAgdGhpcy5yZWFkdHlwZSA9IHRoaXMuY29uZmlncy5yZWFkdHlwZTtcbiAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuY29uZmlncy5idWZmZXIgfHwgJ0xPQURFUl9CVUZGRVInO1xuICAgIHRoaXMuX2xvYWRlclRhc2tObyA9IDA7XG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTEFERVJfU1RBUlQsIHRoaXMubG9hZC5iaW5kKHRoaXMpKVxuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ2xvYWRlcidcbiAgfVxuXG4gIGxvYWQgKHVybCwgb3B0cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy5fY2FuY2VsZWQgPSBmYWxzZTtcblxuICAgIC8vIFRPRE86IEFkZCBSYW5nZXNcbiAgICBsZXQgcGFyYW1zID0gdGhpcy5nZXRQYXJhbXMob3B0cylcbiAgICBfdGhpcy5sb2FkaW5nID0gdHJ1ZVxuICAgIHJldHVybiBmZXRjaCh0aGlzLnVybCwgcGFyYW1zKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIF90aGlzLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1c1xuICAgICAgICByZXR1cm4gX3RoaXMuX29uRmV0Y2hSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICB9XG4gICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCBfdGhpcywgcmVzcG9uc2UpO1xuICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgIHtcbiAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfRVJST1IsIF90aGlzLCBlcnJvcik7XG4gICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IubWVzc2FnZSlcbiAgICB9KVxuICB9XG5cbiAgX29uRmV0Y2hSZXNwb25zZSAocmVzcG9uc2UpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBidWZmZXIgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKHRoaXMuYnVmZmVyKTtcbiAgICB0aGlzLl9sb2FkZXJUYXNrTm8rKztcbiAgICBsZXQgdGFza25vID0gdGhpcy5fbG9hZGVyVGFza05vO1xuICAgIGlmIChyZXNwb25zZS5vayA9PT0gdHJ1ZSkge1xuICAgICAgc3dpdGNoICh0aGlzLnJlYWR0eXBlKSB7XG4gICAgICAgIGNhc2UgUkVBRF9KU09OOlxuICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2NhbmNlbGVkKSB7XG4gICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUkVBRF9URVhUOlxuICAgICAgICAgIHJlc3BvbnNlLnRleHQoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2NhbmNlbGVkKSB7XG4gICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MT0FERVJfQ09NUExFVEUsIGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUkVBRF9CVUZGRVI6XG4gICAgICAgICAgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2NhbmNlbGVkKSB7XG4gICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChuZXcgVWludDhBcnJheShkYXRhKSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBkYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJFQURfU1RSRUFNOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB0aGlzLl9vblJlYWRlcihyZXNwb25zZS5ib2R5LmdldFJlYWRlcigpLCB0YXNrbm8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9vblJlYWRlciAocmVhZGVyLCB0YXNrbm8pIHtcbiAgICBsZXQgYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSh0aGlzLmJ1ZmZlcik7XG5cbiAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgdGhpcy5fcmVhZGVyLmNhbmNlbCgpO1xuICAgIH1cblxuICAgIHRoaXMuX3JlYWRlciA9IHJlYWRlclxuICAgIGlmICh0aGlzLmxvYWRpbmcgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzXG4gICAgLy8gcmVhZGVyIHJlYWQgZnVuY3Rpb24gcmV0dXJucyBhIFByb21pc2UuIGdldCBkYXRhIHdoZW4gY2FsbGJhY2sgYW5kIGhhcyB2YWx1ZS5kb25lIHdoZW4gZGlzY29ubmVjdGVkLlxuICAgIC8vIHJlYWTmlrnms5Xov5Tlm57kuIDkuKpQcm9taXNlLiDlm57osIPkuK3lj6/ku6Xojrflj5bliLDmlbDmja7jgILlvZN2YWx1ZS5kb25l5a2Y5Zyo5pe277yM6K+05piO6ZO+5o6l5pat5byA44CCXG4gICAgdGhpcy5fcmVhZGVyICYmIHRoaXMuX3JlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICBpZiAodmFsLmRvbmUpIHtcbiAgICAgICAgLy8gVE9ETzog5a6M5oiQ5aSE55CGXG4gICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICBfdGhpcy5zdGF0dXMgPSAwO1xuICAgICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0NPTVBMRVRFLCBidWZmZXIpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuX2NhbmNlbGVkKSB7XG4gICAgICAgIF90aGlzLl9yZWFkZXIuY2FuY2VsKClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnVmZmVyLnB1c2godmFsLnZhbHVlKVxuICAgICAgX3RoaXMuZW1pdChMT0FERVJfRVZFTlRTLkxPQURFUl9EQVRBTE9BREVELCBidWZmZXIpXG4gICAgICByZXR1cm4gX3RoaXMuX29uUmVhZGVyKHJlYWRlciwgdGFza25vKVxuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICBfdGhpcy5lbWl0KExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCBfdGhpcywgZXJyb3IpO1xuICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgIH0pXG4gIH1cblxuICBnZXRQYXJhbXMgKG9wdHMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMpXG4gICAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG5cbiAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICBtb2RlOiAnY29ycycsXG4gICAgICBjYWNoZTogJ2RlZmF1bHQnXG4gICAgfVxuXG4gICAgLy8gYWRkIGN1c3Rtb3IgaGVhZGVyc1xuICAgIC8vIOa3u+WKoOiHquWumuS5ieWktFxuICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWdzLmhlYWRlcnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBsZXQgY29uZmlnSGVhZGVycyA9IHRoaXMuY29uZmlncy5oZWFkZXJzXG4gICAgICBmb3IgKGxldCBrZXkgaW4gY29uZmlnSGVhZGVycykge1xuICAgICAgICBpZiAoY29uZmlnSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCBjb25maWdIZWFkZXJzW2tleV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuaGVhZGVycyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGxldCBvcHRIZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzXG4gICAgICBmb3IgKGxldCBrZXkgaW4gb3B0SGVhZGVycykge1xuICAgICAgICBpZiAob3B0SGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCBvcHRIZWFkZXJzW2tleV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jb3JzID09PSBmYWxzZSkge1xuICAgICAgcGFyYW1zLm1vZGUgPSAnc2FtZS1vcmlnaW4nXG4gICAgfVxuXG4gICAgLy8gd2l0aENyZWRlbnRpYWxzIGlzIGRpc2FibGVkIGJ5IGRlZmF1bHRcbiAgICAvLyB3aXRoQ3JlZGVudGlhbHMg5Zyo6buY6K6k5oOF5Ya15LiL5LiN6KKr5L2/55So44CCXG4gICAgaWYgKG9wdGlvbnMud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICBwYXJhbXMuY3JlZGVudGlhbHMgPSAnaW5jbHVkZSdcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBBZGQgcmFuZ2VzO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICBjYW5jZWwgKCkge1xuICAgIGlmICh0aGlzLl9yZWFkZXIpIHtcbiAgICAgIHRoaXMuX3JlYWRlci5jYW5jZWwoKVxuICAgICAgdGhpcy5fcmVhZGVyID0gbnVsbFxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuX2NhbmNlbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLmNhbmNlbCgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZldGNoTG9hZGVyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgTXA0UmVtdXhlcjogcmVxdWlyZSgnLi9zcmMvbXA0JykuZGVmYXVsdFxufTtcbiIsImltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ3hncGxheWVyLXV0aWxzJztcblxuLy8gY29uc3QgVUlOVDMyX01BWCA9IE1hdGgucG93KDIsIDMyKSAtIDE7XG5jbGFzcyBGbXA0IHtcbiAgc3RhdGljIHNpemUgKHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci53cml0ZVVpbnQzMih2YWx1ZSlcbiAgfVxuICBzdGF0aWMgaW5pdEJveCAoc2l6ZSwgbmFtZSwgLi4uY29udGVudCkge1xuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoc2l6ZSksIEZtcDQudHlwZShuYW1lKSwgLi4uY29udGVudClcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBleHRlbnNpb24gKHZlcnNpb24sIGZsYWcpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgdmVyc2lvbixcbiAgICAgIChmbGFnID4+IDE2KSAmIDB4ZmYsXG4gICAgICAoZmxhZyA+PiA4KSAmIDB4ZmYsXG4gICAgICBmbGFnICYgMHhmZlxuICAgIF0pXG4gIH1cbiAgc3RhdGljIGZ0eXAgKCkge1xuICAgIHJldHVybiBGbXA0LmluaXRCb3goMjQsICdmdHlwJywgbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHg2OSwgMHg3MywgMHg2RiwgMHg2RCwgLy8gaXNvbSxcbiAgICAgIDB4MCwgMHgwLCAweDAwLCAweDAxLCAvLyBtaW5vcl92ZXJzaW9uOiAweDAxXG4gICAgICAweDY5LCAweDczLCAweDZGLCAweDZELCAvLyBpc29tXG4gICAgICAweDYxLCAweDc2LCAweDYzLCAweDMxIC8vIGF2YzFcbiAgICBdKSlcbiAgfVxuICBzdGF0aWMgbW9vdiAoeyB0eXBlLCBtZXRhIH0pIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgbXZoZCA9IEZtcDQubXZoZChtZXRhLmR1cmF0aW9uLCBtZXRhLnRpbWVzY2FsZSlcbiAgICBsZXQgdHJha1xuXG4gICAgaWYgKHR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgIHRyYWsgPSBGbXA0LnZpZGVvVHJhayhtZXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0cmFrID0gRm1wNC5hdWRpb1RyYWsobWV0YSlcbiAgICB9XG5cbiAgICBsZXQgbXZleCA9IEZtcDQubXZleChtZXRhLmR1cmF0aW9uLCBtZXRhLnRpbWVzY2FsZSB8fCAxMDAwLCBtZXRhLmlkKTtcbiAgICBbbXZoZCwgdHJhaywgbXZleF0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICdtb292JywgbXZoZCwgdHJhaywgbXZleClcbiAgfVxuICBzdGF0aWMgbXZoZCAoZHVyYXRpb24sIHRpbWVzY2FsZSA9IDEwMDApIHtcbiAgICAvLyBkdXJhdGlvbiAqPSB0aW1lc2NhbGU7XG4gICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdmVyc2lvbigwKSArIGZsYWdzICAgICAx5L2N55qEYm9454mI5pysKzPkvY1mbGFncyAgIGJveOeJiOacrO+8jDDmiJYx77yM5LiA6Iis5Li6MOOAgu+8iOS7peS4i+Wtl+iKguaVsOWdh+aMiXZlcnNpb249MO+8iVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY3JlYXRpb25fdGltZSAgICDliJvlu7rml7bpl7QgIO+8iOebuOWvueS6jlVUQ+aXtumXtDE5MDQtMDEtMDHpm7bngrnnmoTnp5LmlbDvvIlcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1vZGlmaWNhdGlvbl90aW1lICAg5L+u5pS55pe26Ze0XG5cbiAgICAgIC8qKlxuICAgICAgICAgICAgICogdGltZXNjYWxlOiA0IGJ5dGVz5paH5Lu25aqS5L2T5ZyoMeenkuaXtumXtOWGheeahOWIu+W6puWAvO+8jOWPr+S7peeQhuino+S4ujHnp5Lplb/luqZcbiAgICAgICAgICAgICAqL1xuICAgICAgKHRpbWVzY2FsZSA+Pj4gMjQpICYgMHhGRixcbiAgICAgICh0aW1lc2NhbGUgPj4+IDE2KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlID4+PiA4KSAmIDB4RkYsXG4gICAgICAodGltZXNjYWxlKSAmIDB4RkYsXG5cbiAgICAgIC8qKlxuICAgICAgICAgICAgICogZHVyYXRpb246IDQgYnl0ZXPor6V0cmFja+eahOaXtumXtOmVv+W6pu+8jOeUqGR1cmF0aW9u5ZKMdGltZSBzY2FsZeWAvOWPr+S7peiuoeeul3RyYWNr5pe26ZW/77yM5q+U5aaCYXVkaW8gdHJhY2vnmoR0aW1lIHNjYWxlID0gODAwMCxcbiAgICAgICAgICAgICAqIGR1cmF0aW9uID0gNTYwMTI477yM5pe26ZW/5Li6NzAuMDE277yMdmlkZW8gdHJhY2vnmoR0aW1lIHNjYWxlID0gNjAwLCBkdXJhdGlvbiA9IDQyMDAw77yM5pe26ZW/5Li6NzBcbiAgICAgICAgICAgICAqL1xuICAgICAgKGR1cmF0aW9uID4+PiAyNCkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG4gICAgICAoZHVyYXRpb24pICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIFByZWZlcnJlZCByYXRlOiAxLjAgICDmjqjojZDmkq3mlL7pgJ/njofvvIzpq5gxNuS9jeWSjOS9jjE25L2N5YiG5Yir5Li65bCP5pWw54K55pW05pWw6YOo5YiG5ZKM5bCP5pWw6YOo5YiG77yM5Y2zWzE2LjE2XSDmoLzlvI/vvIzor6XlgLzkuLoxLjDvvIgweDAwMDEwMDAw77yJ6KGo56S65q2j5bi45YmN5ZCR5pKt5pS+XG4gICAgICAvKipcbiAgICAgICAgICAgICAqIFByZWZlcnJlZFZvbHVtZSgxLjAsIDJieXRlcykgKyByZXNlcnZlZCgyYnl0ZXMpXG4gICAgICAgICAgICAgKiDkuI5yYXRl57G75Ly877yMWzguOF0g5qC85byP77yMMS4w77yIMHgwMTAw77yJ6KGo56S65pyA5aSn6Z+z6YePXG4gICAgICAgICAgICAgKi9cbiAgICAgIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyAgcmVzZXJ2ZWQ6IDQgKyA0IGJ5dGVz5L+d55WZ5L2NXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8gLS0tLWJlZ2luIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyDop4bpopHlj5jmjaLnn6npmLUgICDnur/mgKfku6PmlbBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHg0MCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gLS0tLWVuZCBjb21wb3NpdGlvbiBtYXRyaXgtLS0tXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyAtLS0tYmVnaW4gcHJlX2RlZmluZWQgNiAqIDQgYnl0ZXMtLS0tXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcHJlLWRlZmluZWQg5L+d55WZ5L2NXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgcHJlX2RlZmluZWQgNiAqIDQgYnl0ZXMtLS0tXG4gICAgICAweEZGLCAweEZGLCAweEZGLCAweEZGIC8vIG5leHRfdHJhY2tfSUQg5LiL5LiA5LiqdHJhY2vkvb/nlKjnmoRpZOWPt1xuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCg4ICsgYnl0ZXMubGVuZ3RoLCAnbXZoZCcsIG5ldyBVaW50OEFycmF5KGJ5dGVzKSlcbiAgfVxuICBzdGF0aWMgdmlkZW9UcmFrIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG5cbiAgICBsZXQgdGtoZCA9IEZtcDQudGtoZCh7XG4gICAgICBpZDogMSxcbiAgICAgIGR1cmF0aW9uOiBkYXRhLmR1cmF0aW9uLFxuICAgICAgdGltZXNjYWxlOiBkYXRhLnRpbWVzY2FsZSB8fCAxMDAwLFxuICAgICAgd2lkdGg6IGRhdGEucHJlc2VudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkYXRhLnByZXNlbnRIZWlnaHQsXG4gICAgICB0eXBlOiAndmlkZW8nXG4gICAgfSlcbiAgICBsZXQgbWRpYSA9IEZtcDQubWRpYSh7XG4gICAgICB0eXBlOiAndmlkZW8nLFxuICAgICAgdGltZXNjYWxlOiBkYXRhLnRpbWVzY2FsZSB8fCAxMDAwLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICBhdmNjOiBkYXRhLmF2Y2MsXG4gICAgICBwYXJSYXRpbzogZGF0YS5wYXJSYXRpbyxcbiAgICAgIHdpZHRoOiBkYXRhLnByZXNlbnRXaWR0aCxcbiAgICAgIGhlaWdodDogZGF0YS5wcmVzZW50SGVpZ2h0XG4gICAgfSk7XG4gICAgW3RraGQsIG1kaWFdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAndHJhaycsIHRraGQsIG1kaWEpXG4gIH1cbiAgc3RhdGljIGF1ZGlvVHJhayAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCB0a2hkID0gRm1wNC50a2hkKHtcbiAgICAgIGlkOiAyLFxuICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24sXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIHR5cGU6ICdhdWRpbydcbiAgICB9KVxuICAgIGxldCBtZGlhID0gRm1wNC5tZGlhKHtcbiAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICB0aW1lc2NhbGU6IGRhdGEudGltZXNjYWxlIHx8IDEwMDAsXG4gICAgICBkdXJhdGlvbjogZGF0YS5kdXJhdGlvbixcbiAgICAgIGNoYW5uZWxDb3VudDogZGF0YS5jaGFubmVsQ291bnQsXG4gICAgICBzYW1wbGVyYXRlOiBkYXRhLnNhbXBsZVJhdGUsXG4gICAgICBjb25maWc6IGRhdGEuY29uZmlnXG4gICAgfSk7XG4gICAgW3RraGQsIG1kaWFdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAndHJhaycsIHRraGQsIG1kaWEpXG4gIH1cbiAgc3RhdGljIHRraGQgKGRhdGEpIHtcbiAgICBsZXQgaWQgPSBkYXRhLmlkXG4gICAgbGV0IGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvblxuICAgIGxldCB3aWR0aCA9IGRhdGEud2lkdGhcbiAgICBsZXQgaGVpZ2h0ID0gZGF0YS5oZWlnaHRcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDcsIC8vIHZlcnNpb24oMCkgKyBmbGFncyAx5L2N54mI5pysIGJveOeJiOacrO+8jDDmiJYx77yM5LiA6Iis5Li6MOOAgu+8iOS7peS4i+Wtl+iKguaVsOWdh+aMiXZlcnNpb249MO+8ieaMieS9jeaIluaTjeS9nOe7k+aenOWAvO+8jOmihOWumuS5ieWmguS4i++8mlxuICAgICAgLy8gMHgwMDAwMDEgdHJhY2tfZW5hYmxlZO+8jOWQpuWImeivpXRyYWNr5LiN6KKr5pKt5pS+77ybXG4gICAgICAvLyAweDAwMDAwMiB0cmFja19pbl9tb3ZpZe+8jOihqOekuuivpXRyYWNr5Zyo5pKt5pS+5Lit6KKr5byV55So77ybXG4gICAgICAvLyAweDAwMDAwNCB0cmFja19pbl9wcmV2aWV377yM6KGo56S66K+ldHJhY2vlnKjpooTop4jml7booqvlvJXnlKjjgIJcbiAgICAgIC8vIOS4gOiIrOivpeWAvOS4ujfvvIwxKzIrNCDlpoLmnpzkuIDkuKrlqpLkvZPmiYDmnIl0cmFja+Wdh+acquiuvue9rnRyYWNrX2luX21vdmll5ZKMdHJhY2tfaW5fcHJldmlld++8jOWwhuiiq+eQhuino+S4uuaJgOaciXRyYWNr5Z2H6K6+572u5LqG6L+Z5Lik6aG577yb5a+55LqOaGludCB0cmFja++8jOivpeWAvOS4ujBcbiAgICAgIC8vIGhpbnQgdHJhY2sg6L+Z5Liq54m55q6K55qEdHJhY2vlubbkuI3ljIXlkKvlqpLkvZPmlbDmja7vvIzogIzmmK/ljIXlkKvkuobkuIDkupvlsIblhbbku5bmlbDmja50cmFja+aJk+WMheaIkOa1geWqkuS9k+eahOaMh+ekuuS/oeaBr+OAglxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY3JlYXRpb25fdGltZeWIm+W7uuaXtumXtO+8iOebuOWvueS6jlVUQ+aXtumXtDE5MDQtMDEtMDHpm7bngrnnmoTnp5LmlbDvvIlcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1vZGlmaWNhdGlvbiB0aW1lIOS/ruaUueaXtumXtFxuICAgICAgKGlkID4+PiAyNCkgJiAweEZGLCAvLyB0cmFja19JRDogNCBieXRlcyBpZOWPt++8jOS4jeiDvemHjeWkjeS4lOS4jeiDveS4ujBcbiAgICAgIChpZCA+Pj4gMTYpICYgMHhGRixcbiAgICAgIChpZCA+Pj4gOCkgJiAweEZGLFxuICAgICAgKGlkKSAmIDB4RkYsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZDogNCBieXRlcyAgICDkv53nlZnkvY1cbiAgICAgIChkdXJhdGlvbiA+Pj4gMjQpICYgMHhGRiwgLy8gZHVyYXRpb246IDQgYnl0ZXMgdHJhY2vnmoTml7bpl7Tplb/luqZcbiAgICAgIChkdXJhdGlvbiA+Pj4gMTYpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZDogMiAqIDQgYnl0ZXMgICAg5L+d55WZ5L2NXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gbGF5ZXIoMmJ5dGVzKSArIGFsdGVybmF0ZV9ncm91cCgyYnl0ZXMpICDop4bpopHlsYLvvIzpu5jorqTkuLow77yM5YC85bCP55qE5Zyo5LiK5bGCLnRyYWNr5YiG57uE5L+h5oGv77yM6buY6K6k5Li6MOihqOekuuivpXRyYWNr5pyq5LiO5YW25LuWdHJhY2vmnInnvqTnu4TlhbPns7tcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZvbHVtZSgyYnl0ZXMpICsgcmVzZXJ2ZWQoMmJ5dGVzKSAgICBbOC44XSDmoLzlvI/vvIzlpoLmnpzkuLrpn7PpopF0cmFja++8jDEuMO+8iDB4MDEwMO+8ieihqOekuuacgOWkp+mfs+mHj++8m+WQpuWImeS4ujAgICAr5L+d55WZ5L2NXG4gICAgICAweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyAtLS0tYmVnaW4gY29tcG9zaXRpb24gbWF0cml4LS0tLVxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8g6KeG6aKR5Y+Y5o2i55+p6Zi1XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDQwLCAweDAwLCAweDAwLCAweDAwLCAvLyAtLS0tZW5kIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbiAgICAgICh3aWR0aCA+Pj4gOCkgJiAweEZGLCAvLyAvL+WuveW6plxuICAgICAgKHdpZHRoKSAmIDB4RkYsXG4gICAgICAweDAwLCAweDAwLFxuICAgICAgKGhlaWdodCA+Pj4gOCkgJiAweEZGLCAvLyDpq5jluqZcbiAgICAgIChoZWlnaHQpICYgMHhGRixcbiAgICAgIDB4MDAsIDB4MDBcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goOCArIGNvbnRlbnQuYnl0ZUxlbmd0aCwgJ3RraGQnLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBlZHRzIChkYXRhKSB7XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb25cbiAgICBsZXQgbWVkaWFUaW1lID0gZGF0YS5tZWRpYVRpbWVcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDM2KSwgRm1wNC50eXBlKCdlZHRzJykpXG4gICAgLy8gZWxzdFxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoMjgpLCBGbXA0LnR5cGUoJ2Vsc3QnKSlcbiAgICBidWZmZXIud3JpdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZW50cnkgY291bnRcbiAgICAgIChkdXJhdGlvbiA+PiAyNCkgJiAweGZmLCAoZHVyYXRpb24gPj4gMTYpICYgMHhmZiwgKGR1cmF0aW9uID4+IDgpICYgMHhmZiwgZHVyYXRpb24gJiAweGZmLFxuICAgICAgKG1lZGlhVGltZSA+PiAyNCkgJiAweGZmLCAobWVkaWFUaW1lID4+IDE2KSAmIDB4ZmYsIChtZWRpYVRpbWUgPj4gOCkgJiAweGZmLCBtZWRpYVRpbWUgJiAweGZmLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSAvLyBtZWRpYSByYXRlXG4gICAgXSkpXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgbWRpYSAoZGF0YSkge1xuICAgIGxldCBzaXplID0gOFxuICAgIGxldCBtZGhkID0gRm1wNC5tZGhkKGRhdGEudGltZXNjYWxlLCBkYXRhLmR1cmF0aW9uKVxuICAgIGxldCBoZGxyID0gRm1wNC5oZGxyKGRhdGEudHlwZSlcbiAgICBsZXQgbWluZiA9IEZtcDQubWluZihkYXRhKTtcbiAgICBbbWRoZCwgaGRsciwgbWluZl0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICdtZGlhJywgbWRoZCwgaGRsciwgbWluZilcbiAgfVxuICBzdGF0aWMgbWRoZCAodGltZXNjYWxlID0gMTAwMCwgZHVyYXRpb24pIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGNyZWF0aW9uX3RpbWUgICAg5Yib5bu65pe26Ze0XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtb2RpZmljYXRpb25fdGltZeS/ruaUueaXtumXtFxuICAgICAgKHRpbWVzY2FsZSA+Pj4gMjQpICYgMHhGRiwgLy8gdGltZXNjYWxlOiA0IGJ5dGVzICAgIOaWh+S7tuWqkuS9k+WcqDHnp5Lml7bpl7TlhoXnmoTliLvluqblgLzvvIzlj6/ku6XnkIbop6PkuLox56eS6ZW/5bqmXG4gICAgICAodGltZXNjYWxlID4+PiAxNikgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSA+Pj4gOCkgJiAweEZGLFxuICAgICAgKHRpbWVzY2FsZSkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uID4+PiAyNCkgJiAweEZGLCAvLyBkdXJhdGlvbjogNCBieXRlcyAgdHJhY2vnmoTml7bpl7Tplb/luqZcbiAgICAgIChkdXJhdGlvbiA+Pj4gMTYpICYgMHhGRixcbiAgICAgIChkdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuICAgICAgKGR1cmF0aW9uKSAmIDB4RkYsXG4gICAgICAweDU1LCAweEM0LCAvLyBsYW5ndWFnZTogdW5kICh1bmRldGVybWluZWQpIOWqkuS9k+ivreiogOeggeOAguacgOmrmOS9jeS4ujDvvIzlkI7pnaIxNeS9jeS4ujPkuKrlrZfnrKbvvIjop4FJU08gNjM5LTIvVOagh+WHhuS4reWumuS5ie+8iVxuICAgICAgMHgwMCwgMHgwMCAvLyBwcmVfZGVmaW5lZCA9IDBcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTIgKyBjb250ZW50LmJ5dGVMZW5ndGgsICdtZGhkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIGhkbHIgKHR5cGUpIHtcbiAgICBsZXQgdmFsdWUgPSBbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcbiAgICAgIDB4NzYsIDB4NjksIDB4NjQsIDB4NjUsIC8vIGhhbmRsZXJfdHlwZTogJ3ZpZGUnXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDU2LCAweDY5LCAweDY0LCAweDY1LFxuICAgICAgMHg2ZiwgMHg0OCwgMHg2MSwgMHg2ZSxcbiAgICAgIDB4NjQsIDB4NmMsIDB4NjUsIDB4NzIsIDB4MDAgLy8gbmFtZTogJ1ZpZGVvSGFuZGxlcidcbiAgICBdXG4gICAgaWYgKHR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgIHZhbHVlLnNwbGljZSg4LCA0LCAuLi5bMHg3MywgMHg2ZiwgMHg3NSwgMHg2ZV0pXG4gICAgICB2YWx1ZS5zcGxpY2UoMjQsIDEzLCAuLi5bMHg1MywgMHg2ZiwgMHg3NSwgMHg2ZSxcbiAgICAgICAgMHg2NCwgMHg0OCwgMHg2MSwgMHg2ZSxcbiAgICAgICAgMHg2NCwgMHg2YywgMHg2NSwgMHg3MiwgMHgwMF0pXG4gICAgfVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goOCArIHZhbHVlLmxlbmd0aCwgJ2hkbHInLCBuZXcgVWludDhBcnJheSh2YWx1ZSkpXG4gIH1cbiAgc3RhdGljIG1pbmYgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgdm1oZCA9IGRhdGEudHlwZSA9PT0gJ3ZpZGVvJyA/IEZtcDQudm1oZCgpIDogRm1wNC5zbWhkKClcbiAgICBsZXQgZGluZiA9IEZtcDQuZGluZigpXG4gICAgbGV0IHN0YmwgPSBGbXA0LnN0YmwoZGF0YSk7XG4gICAgW3ZtaGQsIGRpbmYsIHN0YmxdLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBzaXplICs9IGl0ZW0uYnl0ZUxlbmd0aFxuICAgIH0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveChzaXplLCAnbWluZicsIHZtaGQsIGRpbmYsIHN0YmwpXG4gIH1cbiAgc3RhdGljIHZtaGQgKCkge1xuICAgIHJldHVybiBGbXA0LmluaXRCb3goMjAsICd2bWhkJywgbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIC8vIGdyYXBoaWNzbW9kZVxuICAgICAgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwIC8vIG9wY29sb3JcbiAgICBdKSlcbiAgfVxuICBzdGF0aWMgc21oZCAoKSB7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3NtaGQnLCBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgLy8gYmFsYW5jZVxuICAgICAgMHgwMCwgMHgwMCAvLyByZXNlcnZlZFxuICAgIF0pKVxuICB9XG4gIHN0YXRpYyBkaW5mICgpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGRyZWYgPSBbMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gZW50cnlfY291bnRcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MGMsIC8vIGVudHJ5X3NpemVcbiAgICAgIDB4NzUsIDB4NzIsIDB4NmMsIDB4MjAsIC8vICd1cmwnIHR5cGVcbiAgICAgIDB4MDAsIC8vIHZlcnNpb24gMFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMSAvLyBlbnRyeV9mbGFnc1xuICAgIF1cbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDM2KSwgRm1wNC50eXBlKCdkaW5mJyksIEZtcDQuc2l6ZSgyOCksIEZtcDQudHlwZSgnZHJlZicpLCBuZXcgVWludDhBcnJheShkcmVmKSlcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlclxuICB9XG4gIHN0YXRpYyBzdGJsIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IHN0c2QgPSBGbXA0LnN0c2QoZGF0YSlcbiAgICBsZXQgc3R0cyA9IEZtcDQuc3R0cygpXG4gICAgbGV0IHN0c2MgPSBGbXA0LnN0c2MoKVxuICAgIGxldCBzdHN6ID0gRm1wNC5zdHN6KClcbiAgICBsZXQgc3RjbyA9IEZtcDQuc3RjbygpO1xuICAgIFtzdHNkLCBzdHRzLCBzdHNjLCBzdHN6LCBzdGNvXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ3N0YmwnLCBzdHNkLCBzdHRzLCBzdHNjLCBzdHN6LCBzdGNvKVxuICB9XG4gIHN0YXRpYyBzdHNkIChkYXRhKSB7XG4gICAgbGV0IGNvbnRlbnRcbiAgICBpZiAoZGF0YS50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAvLyBpZiAoIWRhdGEuaXNBQUMgJiYgZGF0YS5jb2RlYyA9PT0gJ21wNCcpIHtcbiAgICAgIC8vICAgICBjb250ZW50ID0gRk1QNC5tcDMoZGF0YSk7XG4gICAgICAvLyB9IGVsc2Uge1xuICAgICAgLy9cbiAgICAgIC8vIH1cbiAgICAgIC8vIOaUr+aMgW1wNGFcbiAgICAgIGNvbnRlbnQgPSBGbXA0Lm1wNGEoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudCA9IEZtcDQuYXZjMShkYXRhKVxuICAgIH1cbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2ICsgY29udGVudC5ieXRlTGVuZ3RoLCAnc3RzZCcsIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBuZXcgVWludDhBcnJheShbMHgwMCwgMHgwMCwgMHgwMCwgMHgwMV0pLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBtcDRhIChkYXRhKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIDB4MDEsIC8vIGRhdGFfcmVmZXJlbmNlX2luZGV4XG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWRcbiAgICAgIDB4MDAsIGRhdGEuY2hhbm5lbENvdW50LCAvLyBjaGFubmVsY291bnRcbiAgICAgIDB4MDAsIDB4MTAsIC8vIHNhbXBsZVNpemU6MTZiaXRzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZDJcbiAgICAgIChkYXRhLnNhbXBsZXJhdGUgPj4gOCkgJiAweGZmLFxuICAgICAgZGF0YS5zYW1wbGVyYXRlICYgMHhmZiwgLy9cbiAgICAgIDB4MDAsIDB4MDBcbiAgICBdKVxuICAgIGxldCBlc2RzID0gRm1wNC5lc2RzKGRhdGEuY29uZmlnKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goOCArIGNvbnRlbnQuYnl0ZUxlbmd0aCArIGVzZHMuYnl0ZUxlbmd0aCwgJ21wNGEnLCBjb250ZW50LCBlc2RzKVxuICB9XG4gIHN0YXRpYyBlc2RzIChjb25maWcgPSBbNDMsIDE0NiwgOCwgMF0pIHtcbiAgICBjb25zdCBjb25maWdsZW4gPSBjb25maWcubGVuZ3RoXG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoKVxuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvbiAwXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuXG4gICAgICAweDAzLCAvLyBkZXNjcmlwdG9yX3R5cGVcbiAgICAgIDB4MTcgKyBjb25maWdsZW4sIC8vIGxlbmd0aFxuICAgICAgMHgwMCwgMHgwMSwgLy8gZXNfaWRcbiAgICAgIDB4MDAsIC8vIHN0cmVhbV9wcmlvcml0eVxuXG4gICAgICAweDA0LCAvLyBkZXNjcmlwdG9yX3R5cGVcbiAgICAgIDB4MGYgKyBjb25maWdsZW4sIC8vIGxlbmd0aFxuICAgICAgMHg0MCwgLy8gY29kZWMgOiBtcGVnNF9hdWRpb1xuICAgICAgMHgxNSwgLy8gc3RyZWFtX3R5cGVcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGJ1ZmZlcl9zaXplXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtYXhCaXRyYXRlXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBhdmdCaXRyYXRlXG5cbiAgICAgIDB4MDUgLy8gZGVzY3JpcHRvcl90eXBlXG4gICAgXS5jb25jYXQoW2NvbmZpZ2xlbl0pLmNvbmNhdChjb25maWcpLmNvbmNhdChbMHgwNiwgMHgwMSwgMHgwMl0pKVxuICAgIGJ1ZmZlci53cml0ZShGbXA0LnNpemUoOCArIGNvbnRlbnQuYnl0ZUxlbmd0aCksIEZtcDQudHlwZSgnZXNkcycpLCBjb250ZW50KVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIGF2YzEgKGRhdGEpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IHNpemUgPSA0MC8vIDgoYXZjMSkrOChhdmNjKSs4KGJ0cnQpKzE2KHBhc3ApXG4gICAgLy8gbGV0IHNwcyA9IGRhdGEuc3BzXG4gICAgLy8gbGV0IHBwcyA9IGRhdGEucHBzXG4gICAgbGV0IHdpZHRoID0gZGF0YS53aWR0aFxuICAgIGxldCBoZWlnaHQgPSBkYXRhLmhlaWdodFxuICAgIGxldCBoU3BhY2luZyA9IGRhdGEucGFyUmF0aW8uaGVpZ2h0XG4gICAgbGV0IHZTcGFjaW5nID0gZGF0YS5wYXJSYXRpby53aWR0aFxuICAgIC8vIGxldCBhdmNjQnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgLy8gYXZjY0J1ZmZlci53cml0ZShuZXcgVWludDhBcnJheShbXG4gICAgLy8gICAweDAxLCAvLyB2ZXJzaW9uXG4gICAgLy8gICBzcHNbMV0sIC8vIHByb2ZpbGVcbiAgICAvLyAgIHNwc1syXSwgLy8gcHJvZmlsZSBjb21wYXRpYmxlXG4gICAgLy8gICBzcHNbM10sIC8vIGxldmVsXG4gICAgLy8gICAweGZjIHwgMyxcbiAgICAvLyAgIDB4RTAgfCAxIC8vIOebruWJjeWPquWkhOeQhuS4gOS4qnNwc1xuICAgIC8vIF0uY29uY2F0KFtzcHMubGVuZ3RoID4+PiA4ICYgMHhmZiwgc3BzLmxlbmd0aCAmIDB4ZmZdKSkpXG4gICAgLy8gYXZjY0J1ZmZlci53cml0ZShzcHMsIG5ldyBVaW50OEFycmF5KFsxLCBwcHMubGVuZ3RoID4+PiA4ICYgMHhmZiwgcHBzLmxlbmd0aCAmIDB4ZmZdKSwgcHBzKVxuXG4gICAgbGV0IGF2Y2MgPSBkYXRhLmF2Y2NcbiAgICBsZXQgYXZjMSA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSwgLy8gZGF0YV9yZWZlcmVuY2VfaW5kZXhcbiAgICAgIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG4gICAgICAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmVfZGVmaW5lZFxuICAgICAgKHdpZHRoID4+IDgpICYgMHhmZixcbiAgICAgIHdpZHRoICYgMHhmZiwgLy8gd2lkdGhcbiAgICAgIChoZWlnaHQgPj4gOCkgJiAweGZmLFxuICAgICAgaGVpZ2h0ICYgMHhmZiwgLy8gaGVpZ2h0XG4gICAgICAweDAwLCAweDQ4LCAweDAwLCAweDAwLCAvLyBob3JpenJlc29sdXRpb25cbiAgICAgIDB4MDAsIDB4NDgsIDB4MDAsIDB4MDAsIC8vIHZlcnRyZXNvbHV0aW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZFxuICAgICAgMHgwMCwgMHgwMSwgLy8gZnJhbWVfY291bnRcbiAgICAgIDB4MTIsXG4gICAgICAweDY0LCAweDYxLCAweDY5LCAweDZDLCAvLyBkYWlseW1vdGlvbi9obHMuanNcbiAgICAgIDB4NzksIDB4NkQsIDB4NkYsIDB4NzQsXG4gICAgICAweDY5LCAweDZGLCAweDZFLCAweDJGLFxuICAgICAgMHg2OCwgMHg2QywgMHg3MywgMHgyRSxcbiAgICAgIDB4NkEsIDB4NzMsIDB4MDAsIDB4MDAsXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGNvbXByZXNzb3JuYW1lXG4gICAgICAweDAwLCAweDE4LCAvLyBkZXB0aCA9IDI0XG4gICAgICAweDExLCAweDExXSkgLy8gcHJlX2RlZmluZWQgPSAtMVxuICAgIGxldCBidHJ0ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgMHgxYywgMHg5YywgMHg4MCwgLy8gYnVmZmVyU2l6ZURCXG4gICAgICAweDAwLCAweDJkLCAweGM2LCAweGMwLCAvLyBtYXhCaXRyYXRlXG4gICAgICAweDAwLCAweDJkLCAweGM2LCAweGMwIC8vIGF2Z0JpdHJhdGVcbiAgICBdKVxuICAgIGxldCBwYXNwID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgKGhTcGFjaW5nID4+IDI0KSwgLy8gaFNwYWNpbmdcbiAgICAgIChoU3BhY2luZyA+PiAxNikgJiAweGZmLFxuICAgICAgKGhTcGFjaW5nID4+IDgpICYgMHhmZixcbiAgICAgIGhTcGFjaW5nICYgMHhmZixcbiAgICAgICh2U3BhY2luZyA+PiAyNCksIC8vIHZTcGFjaW5nXG4gICAgICAodlNwYWNpbmcgPj4gMTYpICYgMHhmZixcbiAgICAgICh2U3BhY2luZyA+PiA4KSAmIDB4ZmYsXG4gICAgICB2U3BhY2luZyAmIDB4ZmZcbiAgICBdKVxuXG4gICAgYnVmZmVyLndyaXRlKFxuICAgICAgRm1wNC5zaXplKHNpemUgKyBhdmMxLmJ5dGVMZW5ndGggKyBhdmNjLmJ5dGVMZW5ndGggKyBidHJ0LmJ5dGVMZW5ndGgpLCBGbXA0LnR5cGUoJ2F2YzEnKSwgYXZjMSxcbiAgICAgIEZtcDQuc2l6ZSg4ICsgYXZjYy5ieXRlTGVuZ3RoKSwgRm1wNC50eXBlKCdhdmNDJyksIGF2Y2MsXG4gICAgICBGbXA0LnNpemUoMjApLCBGbXA0LnR5cGUoJ2J0cnQnKSwgYnRydCxcbiAgICAgIEZtcDQuc2l6ZSgxNiksIEZtcDQudHlwZSgncGFzcCcpLCBwYXNwXG4gICAgKVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIHN0dHMgKCkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZW50cnlfY291bnRcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICdzdHRzJywgY29udGVudClcbiAgfVxuICBzdGF0aWMgc3RzYyAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAvLyBmbGFnc1xuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBlbnRyeV9jb3VudFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3N0c2MnLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBzdGNvICgpIHtcbiAgICBsZXQgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDB4MDAsIC8vIHZlcnNpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIGVudHJ5X2NvdW50XG4gICAgXSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAnc3RjbycsIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHN0c3ogKCkge1xuICAgIGxldCBjb250ZW50ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMHgwMCwgLy8gdmVyc2lvblxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxhZ3NcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHNhbXBsZV9zaXplXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIHNhbXBsZV9jb3VudFxuICAgIF0pXG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgyMCwgJ3N0c3onLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBtdmV4IChkdXJhdGlvbiwgdGltZXNjYWxlID0gMTAwMCwgdHJhY2tJRCkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgbWVoZCA9IEJ1ZmZlci53cml0ZVVpbnQzMihkdXJhdGlvbilcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDU2KSwgRm1wNC50eXBlKCdtdmV4JyksIEZtcDQuc2l6ZSgxNiksIEZtcDQudHlwZSgnbWVoZCcpLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgbWVoZCwgRm1wNC50cmV4KHRyYWNrSUQpKVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIHRyZXggKGlkKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICAweDAwLCAvLyB2ZXJzaW9uIDBcbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGZsYWdzXG4gICAgICAoaWQgPj4gMjQpLFxuICAgICAgKGlkID4+IDE2KSAmIDB4ZmYsXG4gICAgICAoaWQgPj4gOCkgJiAweGZmLFxuICAgICAgKGlkICYgMHhmZiksIC8vIHRyYWNrX0lEXG4gICAgICAweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBkZWZhdWx0X3NhbXBsZV9kZXNjcmlwdGlvbl9pbmRleFxuICAgICAgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZGVmYXVsdF9zYW1wbGVfZHVyYXRpb25cbiAgICAgIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGRlZmF1bHRfc2FtcGxlX3NpemVcbiAgICAgIDB4MDAsIDB4MDEsIDB4MDAsIDB4MDEgLy8gZGVmYXVsdF9zYW1wbGVfZmxhZ3NcbiAgICBdKVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goOCArIGNvbnRlbnQuYnl0ZUxlbmd0aCwgJ3RyZXgnLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyBtb29mIChkYXRhKSB7XG4gICAgbGV0IHNpemUgPSA4XG4gICAgbGV0IG1maGQgPSBGbXA0Lm1maGQoKVxuICAgIGxldCB0cmFmID0gRm1wNC50cmFmKGRhdGEpO1xuICAgIFttZmhkLCB0cmFmXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgc2l6ZSArPSBpdGVtLmJ5dGVMZW5ndGhcbiAgICB9KVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goc2l6ZSwgJ21vb2YnLCBtZmhkLCB0cmFmKVxuICB9XG4gIHN0YXRpYyBtZmhkICgpIHtcbiAgICBsZXQgY29udGVudCA9IEJ1ZmZlci53cml0ZVVpbnQzMihGbXA0LnNlcXVlbmNlKVxuICAgIEZtcDQuc2VxdWVuY2UgKz0gMVxuICAgIHJldHVybiBGbXA0LmluaXRCb3goMTYsICdtZmhkJywgRm1wNC5leHRlbnNpb24oMCwgMCksIGNvbnRlbnQpXG4gIH1cbiAgc3RhdGljIHRyYWYgKGRhdGEpIHtcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBsZXQgdGZoZCA9IEZtcDQudGZoZChkYXRhLmlkKVxuICAgIGxldCB0ZmR0ID0gRm1wNC50ZmR0KGRhdGEudGltZSlcbiAgICBsZXQgc2R0cCA9IEZtcDQuc2R0cChkYXRhKVxuICAgIGxldCB0cnVuID0gRm1wNC50cnVuKGRhdGEsIHNkdHAuYnl0ZUxlbmd0aCk7XG5cbiAgICBbdGZoZCwgdGZkdCwgdHJ1biwgc2R0cF0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5ieXRlTGVuZ3RoXG4gICAgfSlcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KHNpemUsICd0cmFmJywgdGZoZCwgdGZkdCwgdHJ1biwgc2R0cClcbiAgfVxuICBzdGF0aWMgdGZoZCAoaWQpIHtcbiAgICBsZXQgY29udGVudCA9IEJ1ZmZlci53cml0ZVVpbnQzMihpZClcbiAgICByZXR1cm4gRm1wNC5pbml0Qm94KDE2LCAndGZoZCcsIEZtcDQuZXh0ZW5zaW9uKDAsIDApLCBjb250ZW50KVxuICB9XG4gIHN0YXRpYyB0ZmR0ICh0aW1lKSB7XG4gICAgLy8gbGV0IHVwcGVyID0gTWF0aC5mbG9vcih0aW1lIC8gKFVJTlQzMl9NQVggKyAxKSksXG4gICAgLy8gICAgIGxvd2VyID0gTWF0aC5mbG9vcih0aW1lICUgKFVJTlQzMl9NQVggKyAxKSk7XG4gICAgcmV0dXJuIEZtcDQuaW5pdEJveCgxNiwgJ3RmZHQnLCBGbXA0LmV4dGVuc2lvbigwLCAwKSwgQnVmZmVyLndyaXRlVWludDMyKHRpbWUpKVxuICB9XG4gIHN0YXRpYyB0cnVuIChkYXRhLCBzZHRwTGVuZ3RoKSB7XG4gICAgLy8gbGV0IGlkID0gZGF0YS5pZDtcbiAgICAvLyBsZXQgY2VpbCA9IGlkID09PSAxID8gMTYgOiAxMjtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IHNhbXBsZUNvdW50ID0gQnVmZmVyLndyaXRlVWludDMyKGRhdGEuc2FtcGxlcy5sZW5ndGgpXG4gICAgLy8gbWRhdC1oZWFkZXIgOFxuICAgIC8vIG1vb2YtaGVhZGVyIDhcbiAgICAvLyBtZmhkIDE2XG4gICAgLy8gdHJhZi1oZWFkZXIgOFxuICAgIC8vIHRoaGQgMTZcbiAgICAvLyB0ZmR0IDIwXG4gICAgLy8gdHJ1bi1oZWFkZXIgMTJcbiAgICAvLyBzYW1wbGVDb3VudCA0XG4gICAgLy8gZGF0YS1vZmZzZXQgNFxuICAgIC8vIHNhbXBsZXMubGVuZ3RoXG4gICAgbGV0IG9mZnNldCA9IEJ1ZmZlci53cml0ZVVpbnQzMig4ICsgOCArIDE2ICsgOCArIDE2ICsgMTYgKyAxMiArIDQgKyA0ICsgMTYgKiBkYXRhLnNhbXBsZXMubGVuZ3RoICsgc2R0cExlbmd0aClcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKDIwICsgMTYgKiBkYXRhLnNhbXBsZXMubGVuZ3RoKSwgRm1wNC50eXBlKCd0cnVuJyksIG5ldyBVaW50OEFycmF5KFsweDAwLCAweDAwLCAweDBGLCAweDAxXSksIHNhbXBsZUNvdW50LCBvZmZzZXQpXG5cbiAgICAvLyBsZXQgc2l6ZSA9IGJ1ZmZlci5idWZmZXIuYnl0ZUxlbmd0aFxuICAgIC8vIGxldCB3cml0ZU9mZnNldCA9IDBcbiAgICAvLyBkYXRhLnNhbXBsZXMuZm9yRWFjaCgoKSA9PiB7XG4gICAgLy8gICBzaXplICs9IDE2XG4gICAgLy8gfSlcbiAgICAvL1xuICAgIC8vIGxldCB0cnVuQm94ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcblxuICAgIC8vIHRydW5Cb3guc2V0KGJ1ZmZlci5idWZmZXIsIDApXG5cbiAgICBkYXRhLnNhbXBsZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgZmxhZ3MgPSBpdGVtLmZsYWdzXG4gICAgICAvLyBjb25zb2xlLmxvZyhpdGVtLnR5cGUsIGl0ZW0uZHRzLCBpdGVtLmR1cmF0aW9uKVxuXG4gICAgICBidWZmZXIud3JpdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgICAoaXRlbS5kdXJhdGlvbiA+Pj4gMjQpICYgMHhGRiwgLy8gc2FtcGxlX2R1cmF0aW9uXG4gICAgICAgIChpdGVtLmR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuICAgICAgICAoaXRlbS5kdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuICAgICAgICAoaXRlbS5kdXJhdGlvbikgJiAweEZGLFxuICAgICAgICAoaXRlbS5zaXplID4+PiAyNCkgJiAweEZGLCAvLyBzYW1wbGVfc2l6ZVxuICAgICAgICAoaXRlbS5zaXplID4+PiAxNikgJiAweEZGLFxuICAgICAgICAoaXRlbS5zaXplID4+PiA4KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLnNpemUpICYgMHhGRixcbiAgICAgICAgKGZsYWdzLmlzTGVhZGluZyA8PCAyKSB8IGZsYWdzLmRlcGVuZHNPbiwgLy8gc2FtcGxlX2ZsYWdzXG4gICAgICAgIChmbGFncy5pc0RlcGVuZGVkT24gPDwgNikgfCAoZmxhZ3MuaGFzUmVkdW5kYW5jeSA8PCA0KSB8IGZsYWdzLmlzTm9uU3luYyxcbiAgICAgICAgMHgwMCwgMHgwMCwgLy8gc2FtcGxlX2RlZ3JhZGF0aW9uX3ByaW9yaXR5XG4gICAgICAgIChpdGVtLmN0cyA+Pj4gMjQpICYgMHhGRiwgLy8gc2FtcGxlX2NvbXBvc2l0aW9uX3RpbWVfb2Zmc2V0XG4gICAgICAgIChpdGVtLmN0cyA+Pj4gMTYpICYgMHhGRixcbiAgICAgICAgKGl0ZW0uY3RzID4+PiA4KSAmIDB4RkYsXG4gICAgICAgIChpdGVtLmN0cykgJiAweEZGXG4gICAgICBdKSlcbiAgICAgIC8vIHdyaXRlT2Zmc2V0ICs9IDE2XG4gICAgICAvLyBidWZmZXIud3JpdGUoQnVmZmVyLndyaXRlVWludDMyKDApKTtcbiAgICB9KVxuICAgIHJldHVybiBidWZmZXIuYnVmZmVyXG4gIH1cbiAgc3RhdGljIHNkdHAgKGRhdGEpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IEJ1ZmZlcigpXG4gICAgYnVmZmVyLndyaXRlKEZtcDQuc2l6ZSgxMiArIGRhdGEuc2FtcGxlcy5sZW5ndGgpLCBGbXA0LnR5cGUoJ3NkdHAnKSwgRm1wNC5leHRlbnNpb24oMCwgMCkpXG4gICAgZGF0YS5zYW1wbGVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBjb25zdCBmbGFncyA9IGl0ZW0uZmxhZ3NcbiAgICAgIGNvbnN0IG51bSA9IChmbGFncy5pc0xlYWRpbmcgPDwgNikgfCAvLyBpc19sZWFkaW5nOiAyIChiaXQpXG4gICAgICAgIChmbGFncy5kZXBlbmRzT24gPDwgNCkgfCAvLyBzYW1wbGVfZGVwZW5kc19vblxuICAgICAgICAoZmxhZ3MuaXNEZXBlbmRlZE9uIDw8IDIpIHwgLy8gc2FtcGxlX2lzX2RlcGVuZGVkX29uXG4gICAgICAgIChmbGFncy5oYXNSZWR1bmRhbmN5KS8vIHNhbXBsZV9oYXNfcmVkdW5kYW5jeVxuXG4gICAgICBidWZmZXIud3JpdGUobmV3IFVpbnQ4QXJyYXkoW251bV0pKVxuICAgIH0pXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXJcbiAgfVxuICBzdGF0aWMgbWRhdCAoZGF0YSkge1xuICAgIGxldCBidWZmZXIgPSBuZXcgQnVmZmVyKClcbiAgICBsZXQgc2l6ZSA9IDhcbiAgICBkYXRhLnNhbXBsZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHNpemUgKz0gaXRlbS5zaXplXG4gICAgfSlcbiAgICBidWZmZXIud3JpdGUoRm1wNC5zaXplKHNpemUpLCBGbXA0LnR5cGUoJ21kYXQnKSlcbiAgICBsZXQgbWRhdEJveCA9IG5ldyBVaW50OEFycmF5KHNpemUpXG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICBtZGF0Qm94LnNldChidWZmZXIuYnVmZmVyLCBvZmZzZXQpXG4gICAgb2Zmc2V0ICs9IDhcbiAgICBkYXRhLnNhbXBsZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGl0ZW0uYnVmZmVyLmZvckVhY2goKHVuaXQpID0+IHtcbiAgICAgICAgbWRhdEJveC5zZXQodW5pdCwgb2Zmc2V0KVxuICAgICAgICBvZmZzZXQgKz0gdW5pdC5ieXRlTGVuZ3RoXG4gICAgICAgIC8vIGJ1ZmZlci53cml0ZSh1bml0LmRhdGEpO1xuICAgICAgfSlcbiAgICB9KVxuICAgIHJldHVybiBtZGF0Qm94XG4gIH1cbn1cbkZtcDQudHlwZSA9IChuYW1lKSA9PiB7XG4gIHJldHVybiBuZXcgVWludDhBcnJheShbbmFtZS5jaGFyQ29kZUF0KDApLCBuYW1lLmNoYXJDb2RlQXQoMSksIG5hbWUuY2hhckNvZGVBdCgyKSwgbmFtZS5jaGFyQ29kZUF0KDMpXSlcbn1cbkZtcDQuc2VxdWVuY2UgPSAxXG5cbmV4cG9ydCBkZWZhdWx0IEZtcDRcbiIsImltcG9ydCB7XG4gIEVWRU5UUyxcbiAgc25pZmZlcixcbiAgTWVkaWFTZWdtZW50TGlzdCxcbiAgQnVmZmVyXG59IGZyb20gJ3hncGxheWVyLXV0aWxzJztcbmltcG9ydCBGbXA0IGZyb20gJy4vZm1wNCdcblxuY29uc3QgUkVNVVhfRVZFTlRTID0gRVZFTlRTLlJFTVVYX0VWRU5UU1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNcDRSZW11eGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuX2R0c0Jhc2UgPSAwXG4gICAgdGhpcy5faXNEdHNCYXNlSW5pdGVkID0gZmFsc2VcblxuICAgIHRoaXMudmlkZW9BbGxEdXJhdGlvbiA9IDBcbiAgICB0aGlzLmF1ZGlvQWxsRHVyYXRpb24gPSAwXG4gIH1cblxuICBpbml0ICgpIHtcbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5SRU1VWF9NRURJQSwgdGhpcy5yZW11eC5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oUkVNVVhfRVZFTlRTLlJFTVVYX01FVEFEQVRBLCB0aGlzLm9uTWV0YURhdGFSZWFkeS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fZHRzQmFzZSA9IC0xXG4gICAgdGhpcy5fZHRzQmFzZUluaXRlZCA9IGZhbHNlXG4gIH1cblxuICByZXNldCAoKSB7XG4gICAgdGhpcy5fZHRzQmFzZSA9IDBcbiAgICB0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgPSBmYWxzZVxuICB9XG5cbiAgcmVtdXggKCkge1xuICAgIGNvbnN0IHsgYXVkaW9UcmFjaywgdmlkZW9UcmFjayB9ID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJylcbiAgICAhdGhpcy5faXNEdHNCYXNlSW5pdGVkICYmIHRoaXMuY2FsY0R0c0Jhc2UoYXVkaW9UcmFjaywgdmlkZW9UcmFjaylcblxuICAgIHRoaXMuX3JlbXV4VmlkZW8odmlkZW9UcmFjaylcbiAgICB0aGlzLl9yZW11eEF1ZGlvKGF1ZGlvVHJhY2spXG4gIH1cblxuICBzZWVrICgpIHtcblxuICB9XG5cbiAgb25NZXRhRGF0YVJlYWR5ICh0eXBlKSB7XG4gICAgbGV0IGluaXRTZWdtZW50ID0gbmV3IEJ1ZmZlcigpXG4gICAgbGV0IGZ0eXAgPSBGbXA0LmZ0eXAoKVxuICAgIGxldCBtb292XG4gICAgbGV0IHRyYWNrXG5cbiAgICBpZiAodHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgY29uc3QgeyBhdWRpb1RyYWNrIH0gPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKVxuICAgICAgdHJhY2sgPSBhdWRpb1RyYWNrO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IHZpZGVvVHJhY2sgfSA9IHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpXG4gICAgICB0cmFjayA9IHZpZGVvVHJhY2s7XG4gICAgfVxuXG4gICAgbW9vdiA9IEZtcDQubW9vdih7IHR5cGUsIG1ldGE6IHRyYWNrLm1ldGEgfSlcblxuICAgIGluaXRTZWdtZW50LndyaXRlKGZ0eXAsIG1vb3YpXG5cbiAgICBsZXQgcHJlc291cmNlYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmdldFNvdXJjZSh0eXBlKTtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmNyZWF0ZVNvdXJjZSh0eXBlKTtcbiAgICB9XG5cbiAgICBzb3VyY2UubWltZXR5cGUgPSB0cmFjay5tZXRhLmNvZGVjO1xuICAgIHNvdXJjZS5pbml0ID0gaW5pdFNlZ21lbnQ7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5JTklUX1NFR01FTlQsIHR5cGUpXG4gIH1cblxuICBjYWxjRHRzQmFzZSAoYXVkaW9UcmFjaywgdmlkZW9UcmFjaykge1xuICAgIGlmICghYXVkaW9UcmFjay5zYW1wbGVzLmxlbmd0aCAmJiAhdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBhdWRpb0Jhc2UgPSBJbmZpbml0eVxuICAgIGxldCB2aWRlb0Jhc2UgPSBJbmZpbml0eVxuXG4gICAgaWYgKGF1ZGlvVHJhY2suc2FtcGxlcyAmJiBhdWRpb1RyYWNrLnNhbXBsZXMubGVuZ3RoKSB7XG4gICAgICBhdWRpb0Jhc2UgPSBhdWRpb1RyYWNrLnNhbXBsZXNbMF0uZHRzXG4gICAgfVxuICAgIGlmICh2aWRlb1RyYWNrLnNhbXBsZXMgJiYgdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aCkge1xuICAgICAgdmlkZW9CYXNlID0gdmlkZW9UcmFjay5zYW1wbGVzWzBdLmR0c1xuICAgIH1cblxuICAgIHRoaXMuX2R0c0Jhc2UgPSBNYXRoLm1pbihhdWRpb0Jhc2UsIHZpZGVvQmFzZSlcbiAgICB0aGlzLl9pc0R0c0Jhc2VJbml0ZWQgPSB0cnVlXG4gIH1cblxuICBfcmVtdXhWaWRlbyAodmlkZW9UcmFjaykge1xuICAgIGNvbnN0IHRyYWNrID0gdmlkZW9UcmFja1xuXG4gICAgaWYgKCF2aWRlb1RyYWNrLnNhbXBsZXMgfHwgIXZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCB7c2FtcGxlc30gPSB0cmFja1xuICAgIGxldCBmaXJzdER0cyA9IC0xXG5cbiAgICBjb25zdCBtcDRTYW1wbGVzID0gW11cbiAgICBjb25zdCBtZGF0Qm94ID0ge1xuICAgICAgc2FtcGxlczogW11cbiAgICB9XG5cbiAgICB3aGlsZSAoc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGF2Y1NhbXBsZSA9IHNhbXBsZXMuc2hpZnQoKVxuICAgICAgY29uc3QgeyBpc0tleWZyYW1lIH0gPSBhdmNTYW1wbGVcbiAgICAgIGxldCBkdHMgPSBhdmNTYW1wbGUuZHRzIC0gdGhpcy5fZHRzQmFzZVxuXG4gICAgICBpZiAoZmlyc3REdHMgPT09IC0xKSB7XG4gICAgICAgIGZpcnN0RHRzID0gZHRzXG4gICAgICB9XG5cbiAgICAgIGxldCBjdHNcbiAgICAgIGxldCBwdHNcbiAgICAgIGlmIChhdmNTYW1wbGUucHRzKSB7XG4gICAgICAgIHB0cyA9IGF2Y1NhbXBsZS5wdHMgLSB0aGlzLl9kdHNCYXNlXG4gICAgICAgIGN0cyA9IHB0cyAtIGR0c1xuICAgICAgfVxuICAgICAgaWYgKGF2Y1NhbXBsZS5jdHMpIHtcbiAgICAgICAgcHRzID0gYXZjU2FtcGxlLmN0cyArIGR0c1xuICAgICAgICBjdHMgPSBhdmNTYW1wbGUuY3RzXG4gICAgICB9XG5cbiAgICAgIGxldCBtZGF0U2FtcGxlID0ge1xuICAgICAgICBidWZmZXI6IFtdLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9XG4gICAgICBtZGF0Qm94LnNhbXBsZXMucHVzaChtZGF0U2FtcGxlKVxuICAgICAgbWRhdFNhbXBsZS5idWZmZXIucHVzaChhdmNTYW1wbGUuZGF0YSlcbiAgICAgIG1kYXRTYW1wbGUuc2l6ZSArPSBhdmNTYW1wbGUuZGF0YS5ieXRlTGVuZ3RoXG5cbiAgICAgIGxldCBzYW1wbGVEdXJhdGlvbiA9IDBcbiAgICAgIGlmIChzYW1wbGVzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHREdHMgPSBzYW1wbGVzWzBdLmR0cyAtIHRoaXMuX2R0c0Jhc2VcbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBuZXh0RHRzIC0gZHRzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGggPj0gMSkgeyAvLyBsYXN0ZXN0IHNhbXBsZSwgdXNlIHNlY29uZCBsYXN0IGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlIG9ubHkgb25lIHNhbXBsZSwgdXNlIHJlZmVyZW5jZSBkdXJhdGlvblxuICAgICAgICAgIHNhbXBsZUR1cmF0aW9uID0gdGhpcy52aWRlb01ldGEucmVmU2FtcGxlRHVyYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy52aWRlb0FsbER1cmF0aW9uICs9IHNhbXBsZUR1cmF0aW9uXG4gICAgICBtcDRTYW1wbGVzLnB1c2goe1xuICAgICAgICBkdHMsXG4gICAgICAgIGN0cyxcbiAgICAgICAgcHRzLFxuICAgICAgICBkYXRhOiBhdmNTYW1wbGUuZGF0YSxcbiAgICAgICAgc2l6ZTogYXZjU2FtcGxlLmRhdGEuYnl0ZUxlbmd0aCxcbiAgICAgICAgaXNLZXlmcmFtZSxcbiAgICAgICAgZHVyYXRpb246IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBmbGFnczoge1xuICAgICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgICBkZXBlbmRzT246IGlzS2V5ZnJhbWUgPyAyIDogMSxcbiAgICAgICAgICBpc0RlcGVuZGVkT246IGlzS2V5ZnJhbWUgPyAxIDogMCxcbiAgICAgICAgICBoYXNSZWR1bmRhbmN5OiAwLFxuICAgICAgICAgIGlzTm9uU3luYzogaXNLZXlmcmFtZSA/IDAgOiAxXG4gICAgICAgIH0sXG4gICAgICAgIG9yaWdpbkR0czogZHRzLFxuICAgICAgICB0eXBlOiAndmlkZW8nXG4gICAgICB9KVxuICAgIH1cblxuICAgIGxldCBtb29mTWRhdCA9IG5ldyBCdWZmZXIoKVxuXG4gICAgY29uc3QgbW9vZiA9IEZtcDQubW9vZih7XG4gICAgICBpZDogdHJhY2subWV0YS5pZCxcbiAgICAgIHRpbWU6IGZpcnN0RHRzLFxuICAgICAgc2FtcGxlczogbXA0U2FtcGxlc1xuICAgIH0pXG4gICAgY29uc3QgbWRhdCA9IEZtcDQubWRhdChtZGF0Qm94KVxuICAgIG1vb2ZNZGF0LndyaXRlKG1vb2YsIG1kYXQpXG5cbiAgICB0cmFjay5zYW1wbGVzID0gW11cbiAgICB0cmFjay5sZW5ndGggPSAwXG5cbiAgICBsZXQgcHJlc291cmNlYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmdldFNvdXJjZSgndmlkZW8nKTtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmNyZWF0ZVNvdXJjZSgndmlkZW8nKTtcbiAgICB9XG5cbiAgICBzb3VyY2UuZGF0YS5wdXNoKG1vb2ZNZGF0KTtcblxuICAgIHRoaXMuZW1pdChSRU1VWF9FVkVOVFMuTUVESUFfU0VHTUVOVCwgJ3ZpZGVvJylcbiAgfVxuXG4gIF9yZW11eEF1ZGlvICh0cmFjaykge1xuICAgIGNvbnN0IHtzYW1wbGVzfSA9IHRyYWNrXG4gICAgbGV0IGZpcnN0RHRzID0gLTFcbiAgICBsZXQgbXA0U2FtcGxlcyA9IFtdXG5cbiAgICBjb25zdCBtZGF0Qm94ID0ge1xuICAgICAgc2FtcGxlczogW11cbiAgICB9XG4gICAgaWYgKCFzYW1wbGVzIHx8ICFzYW1wbGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGxldCBpc0ZpcnN0RHRzSW5pdGVkID0gZmFsc2VcbiAgICB3aGlsZSAoc2FtcGxlcy5sZW5ndGgpIHtcbiAgICAgIGxldCBzYW1wbGUgPSBzYW1wbGVzLnNoaWZ0KClcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gc2FtcGxlXG4gICAgICBsZXQgZHRzID0gc2FtcGxlLmR0cyAtIHRoaXMuX2R0c0Jhc2VcbiAgICAgIGNvbnN0IG9yaWdpbkR0cyA9IGR0c1xuICAgICAgaWYgKCFpc0ZpcnN0RHRzSW5pdGVkKSB7XG4gICAgICAgIGZpcnN0RHRzID0gZHRzXG4gICAgICAgIGlzRmlyc3REdHNJbml0ZWQgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGxldCBzYW1wbGVEdXJhdGlvbiA9IDBcblxuICAgICAgaWYgKHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uRml4ZWQpIHtcbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSB0aGlzLmF1ZGlvTWV0YS5yZWZTYW1wbGVEdXJhdGlvbkZpeGVkXG4gICAgICB9IGVsc2UgaWYgKHNhbXBsZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dER0cyA9IHNhbXBsZXNbMF0uZHRzIC0gdGhpcy5fZHRzQmFzZTtcbiAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBuZXh0RHRzIC0gZHRzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobXA0U2FtcGxlcy5sZW5ndGggPj0gMSkgeyAvLyB1c2Ugc2Vjb25kIGxhc3Qgc2FtcGxlIGR1cmF0aW9uXG4gICAgICAgICAgc2FtcGxlRHVyYXRpb24gPSBtcDRTYW1wbGVzW21wNFNhbXBsZXMubGVuZ3RoIC0gMV0uZHVyYXRpb25cbiAgICAgICAgfSBlbHNlIHsgLy8gdGhlIG9ubHkgb25lIHNhbXBsZSwgdXNlIHJlZmVyZW5jZSBzYW1wbGUgZHVyYXRpb25cbiAgICAgICAgICBzYW1wbGVEdXJhdGlvbiA9IHRoaXMuYXVkaW9NZXRhLnJlZlNhbXBsZUR1cmF0aW9uXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gY29uc29sZS5sb2coJ3JlbXV4IGF1ZGlvICcsIGR0cylcbiAgICAgIHRoaXMuYXVkaW9BbGxEdXJhdGlvbiArPSBzYW1wbGVEdXJhdGlvblxuICAgICAgY29uc3QgbXA0U2FtcGxlID0ge1xuICAgICAgICBkdHMsXG4gICAgICAgIHB0czogZHRzLFxuICAgICAgICBjdHM6IDAsXG4gICAgICAgIHNpemU6IGRhdGEuYnl0ZUxlbmd0aCxcbiAgICAgICAgZHVyYXRpb246IHNhbXBsZS5kdXJhdGlvbiA/IHNhbXBsZS5kdXJhdGlvbiA6IHNhbXBsZUR1cmF0aW9uLFxuICAgICAgICBmbGFnczoge1xuICAgICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgICBkZXBlbmRzT246IDIsXG4gICAgICAgICAgaXNEZXBlbmRlZE9uOiAxLFxuICAgICAgICAgIGhhc1JlZHVuZGFuY3k6IDAsXG4gICAgICAgICAgaXNOb25TeW5jOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGlzS2V5ZnJhbWU6IHRydWUsXG4gICAgICAgIG9yaWdpbkR0cyxcbiAgICAgICAgdHlwZTogJ2F1ZGlvJ1xuICAgICAgfVxuXG4gICAgICBsZXQgbWRhdFNhbXBsZSA9IHtcbiAgICAgICAgYnVmZmVyOiBbXSxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfVxuICAgICAgbWRhdFNhbXBsZS5idWZmZXIucHVzaChkYXRhKVxuICAgICAgbWRhdFNhbXBsZS5zaXplICs9IGRhdGEuYnl0ZUxlbmd0aFxuXG4gICAgICBtZGF0Qm94LnNhbXBsZXMucHVzaChtZGF0U2FtcGxlKVxuXG4gICAgICBtcDRTYW1wbGVzLnB1c2gobXA0U2FtcGxlKVxuICAgIH1cblxuICAgIGNvbnN0IG1vb2ZNZGF0ID0gbmV3IEJ1ZmZlcigpXG4gICAgY29uc3QgbW9vZiA9IEZtcDQubW9vZih7XG4gICAgICBpZDogdHJhY2subWV0YS5pZCxcbiAgICAgIHRpbWU6IGZpcnN0RHRzLFxuICAgICAgc2FtcGxlczogbXA0U2FtcGxlc1xuICAgIH0pXG4gICAgY29uc3QgbWRhdCA9IEZtcDQubWRhdChtZGF0Qm94KVxuICAgIG1vb2ZNZGF0LndyaXRlKG1vb2YsIG1kYXQpXG5cbiAgICB0cmFjay5zYW1wbGVzID0gW11cbiAgICB0cmFjay5sZW5ndGggPSAwXG5cbiAgICBsZXQgcHJlc291cmNlYnVmZmVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBsZXQgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmdldFNvdXJjZSgnYXVkaW8nKTtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgc291cmNlID0gcHJlc291cmNlYnVmZmVyLmNyZWF0ZVNvdXJjZSgnYXVkaW8nKTtcbiAgICB9XG4gICAgc291cmNlLmRhdGEucHVzaChtb29mTWRhdCk7XG4gICAgdGhpcy5lbWl0KFJFTVVYX0VWRU5UUy5NRURJQV9TRUdNRU5ULCAnYXVkaW8nLCBtb29mTWRhdClcbiAgfVxuXG4gIGluaXRTaWxlbnRBdWRpbyAoZHRzLCBkdXJhdGlvbikge1xuICAgIGNvbnN0IHVuaXQgPSBNcDRSZW11eGVyLmdldFNpbGVudEZyYW1lKHRoaXMuYXVkaW9NZXRhLmNoYW5uZWxDb3VudClcbiAgICByZXR1cm4ge1xuICAgICAgZHRzLFxuICAgICAgcHRzOiBkdHMsXG4gICAgICBjdHM6IDAsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHVuaXQsXG4gICAgICBzaXplOiB1bml0LmJ5dGVMZW5ndGgsXG4gICAgICBvcmlnaW5EdHM6IGR0cyxcbiAgICAgIHR5cGU6ICd2aWRlbydcbiAgICB9XG4gIH1cblxuICBnZXQgdmlkZW9NZXRhICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnVFJBQ0tTJykudmlkZW9UcmFjay5tZXRhXG4gIH1cbiAgZ2V0IGF1ZGlvTWV0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZ2V0SW5zdGFuY2UoJ1RSQUNLUycpLmF1ZGlvVHJhY2subWV0YVxuICB9XG5cbiAgc3RhdGljIGdldFNpbGVudEZyYW1lIChjaGFubmVsQ291bnQpIHtcbiAgICBpZiAoY2hhbm5lbENvdW50ID09PSAxKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjMsIDB4ODBdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAyKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MjEsIDB4MDAsIDB4NDksIDB4OTAsIDB4MDIsIDB4MTksIDB4MDAsIDB4MjMsIDB4ODBdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSAzKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4OGVdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA0KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODAsIDB4MmMsIDB4ODAsIDB4MDgsIDB4MDIsIDB4MzhdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA1KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MzhdKVxuICAgIH0gZWxzZSBpZiAoY2hhbm5lbENvdW50ID09PSA2KSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWzB4MDAsIDB4YzgsIDB4MDAsIDB4ODAsIDB4MjAsIDB4ODQsIDB4MDEsIDB4MjYsIDB4NDAsIDB4MDgsIDB4NjQsIDB4MDAsIDB4ODIsIDB4MzAsIDB4MDQsIDB4OTksIDB4MDAsIDB4MjEsIDB4OTAsIDB4MDIsIDB4MDAsIDB4YjIsIDB4MDAsIDB4MjAsIDB4MDgsIDB4ZTBdKVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ29udGV4dDogcmVxdWlyZSgnLi9zcmMvY29udGV4dCcpLmRlZmF1bHQsXG5cbiAgLy8gTW9kdWxlcyBmcm9tIGNvbnN0YW50c1xuICBFVkVOVFM6IHJlcXVpcmUoJy4vc3JjL2NvbnN0YW50cy9ldmVudHMnKS5kZWZhdWx0LFxuICBXT1JLRVJfQ09NTUFORFM6IHJlcXVpcmUoJy4vc3JjL2NvbnN0YW50cy93b3JrZXItY29tbWFuZHMnKS5kZWZhdWx0LFxuXG4gIC8vIE1vZHVsZXMgZnJvbSBlbnZcbiAgc25pZmZlcjogcmVxdWlyZSgnLi9zcmMvZW52L3NuaWZmZXInKS5kZWZhdWx0LFxuICBpc0xlOiByZXF1aXJlKCcuL3NyYy9lbnYvaXNsZScpLmRlZmF1bHQsXG4gIFVURjg6IHJlcXVpcmUoJy4vc3JjL2Vudi91dGY4JykuZGVmYXVsdCxcblxuICAvLyBNb2RlbHNcbiAgTWVkaWFJbmZvOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvbWVkaWEtaW5mbycpLmRlZmF1bHQsXG4gIE1lZGlhU2FtcGxlOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvbWVkaWEtc2FtcGxlJykuZGVmYXVsdCxcbiAgTWVkaWFTZWdtZW50OiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvbWVkaWEtc2VnbWVudCcpLmRlZmF1bHQsXG4gIE1lZGlhU2VnbWVudExpc3Q6IHJlcXVpcmUoJy4vc3JjL21vZGVscy9tZWRpYS1zZWdtZW50LWxpc3QnKS5kZWZhdWx0LFxuICBBdWRpb1RyYWNrTWV0YTogcmVxdWlyZSgnLi9zcmMvbW9kZWxzL3RyYWNrLW1ldGEnKS5BdWRpb1RyYWNrTWV0YSxcbiAgVmlkZW9UcmFja01ldGE6IHJlcXVpcmUoJy4vc3JjL21vZGVscy90cmFjay1tZXRhJykuVmlkZW9UcmFja01ldGEsXG4gIEF1ZGlvVHJhY2tTYW1wbGU6IHJlcXVpcmUoJy4vc3JjL21vZGVscy90cmFjay1zYW1wbGUnKS5BdWRpb1RyYWNrU2FtcGxlLFxuICBWaWRlb1RyYWNrU2FtcGxlOiByZXF1aXJlKCcuL3NyYy9tb2RlbHMvdHJhY2stc2FtcGxlJykuVmlkZW9UcmFja1NhbXBsZSxcblxuICAvLyBNb2R1bGVzIGZyb20gbXNlXG4gIE1zZTogcmVxdWlyZSgnLi9zcmMvbXNlL2luZGV4JykuZGVmYXVsdCxcblxuICAvLyBNb2R1bGVzIGZyb20gd3JpdGVcbiAgU3RyZWFtOiByZXF1aXJlKCcuL3NyYy93cml0ZS9zdHJlYW0nKS5kZWZhdWx0LFxuICBCdWZmZXI6IHJlcXVpcmUoJy4vc3JjL3dyaXRlL2J1ZmZlcicpLmRlZmF1bHQsXG5cbiAgTW9iaWxlVmlkZW86IHJlcXVpcmUoJy4vc3JjL21vYmlsZS9tb2JpbGUtdmlkZW8nKVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoUmVzdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIHRvdGFsTGVuZ3RoID0gMDtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJyYXlzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFycmF5c1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBhcnJheXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICB2YXIgYXJyID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIHRvdGFsTGVuZ3RoICs9IGFyci5sZW5ndGg7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSBuZXcgUmVzdWx0Q29uc3RydWN0b3IodG90YWxMZW5ndGgpO1xuICB2YXIgb2Zmc2V0ID0gMDtcbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IGFycmF5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgdmFyIF9hcnIgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgIHJlc3VsdC5zZXQoX2Fyciwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBfYXJyLmxlbmd0aDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jb25jYXQgPSByZXF1aXJlKCcuL2NvbmNhdCcpO1xuXG52YXIgX2NvbmNhdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb25jYXQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jb25jYXQyLmRlZmF1bHQ7IiwiZnVuY3Rpb24gd2VicGFja0Jvb3RzdHJhcEZ1bmMgKG1vZHVsZXMpIHtcbi8qKioqKiovICAvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyAgdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuLyoqKioqKi8gIC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyAgZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4vKioqKioqLyAgICAvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovICAgIGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gICAgICByZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuLyoqKioqKi8gICAgLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovICAgIHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovICAgICAgaTogbW9kdWxlSWQsXG4vKioqKioqLyAgICAgIGw6IGZhbHNlLFxuLyoqKioqKi8gICAgICBleHBvcnRzOiB7fVxuLyoqKioqKi8gICAgfTtcblxuLyoqKioqKi8gICAgLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyAgICBtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuLyoqKioqKi8gICAgLy8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gICAgbW9kdWxlLmwgPSB0cnVlO1xuXG4vKioqKioqLyAgICAvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gICAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gIH1cblxuLyoqKioqKi8gIC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyAgX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuLyoqKioqKi8gIC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyAgX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuLyoqKioqKi8gIC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovICBfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG5cbi8qKioqKiovICAvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovICBfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovICAgIGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyAgICAgICAgZ2V0OiBnZXR0ZXJcbi8qKioqKiovICAgICAgfSk7XG4vKioqKioqLyAgICB9XG4vKioqKioqLyAgfTtcblxuLyoqKioqKi8gIC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovICBfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gIH07XG5cbi8qKioqKiovICAvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gICAgdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyAgICAgIGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyAgICAgIGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyAgICByZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gIH07XG5cbi8qKioqKiovICAvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovICBfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbi8qKioqKiovICAvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gIF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG4vKioqKioqLyAgLy8gb24gZXJyb3IgZnVuY3Rpb24gZm9yIGFzeW5jIGxvYWRpbmdcbi8qKioqKiovICBfX3dlYnBhY2tfcmVxdWlyZV9fLm9lID0gZnVuY3Rpb24oZXJyKSB7IGNvbnNvbGUuZXJyb3IoZXJyKTsgdGhyb3cgZXJyOyB9O1xuXG4gIHZhciBmID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBFTlRSWV9NT0RVTEUpXG4gIHJldHVybiBmLmRlZmF1bHQgfHwgZiAvLyB0cnkgdG8gY2FsbCBkZWZhdWx0IGlmIGRlZmluZWQgdG8gYWxzbyBzdXBwb3J0IGJhYmVsIGVzbW9kdWxlIGV4cG9ydHNcbn1cblxudmFyIG1vZHVsZU5hbWVSZXFFeHAgPSAnW1xcXFwufFxcXFwtfFxcXFwrfFxcXFx3fFxcL3xAXSsnXG52YXIgZGVwZW5kZW5jeVJlZ0V4cCA9ICdcXFxcKFxcXFxzKihcXC9cXFxcKi4qP1xcXFwqXFwvKT9cXFxccyouKj8oJyArIG1vZHVsZU5hbWVSZXFFeHAgKyAnKS4qP1xcXFwpJyAvLyBhZGRpdGlvbmFsIGNoYXJzIHdoZW4gb3V0cHV0LnBhdGhpbmZvIGlzIHRydWVcblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjU5MzY2MS8xMzA0NDJcbmZ1bmN0aW9uIHF1b3RlUmVnRXhwIChzdHIpIHtcbiAgcmV0dXJuIChzdHIgKyAnJykucmVwbGFjZSgvWy4/KiteJFtcXF1cXFxcKCl7fXwtXS9nLCAnXFxcXCQmJylcbn1cblxuZnVuY3Rpb24gaXNOdW1lcmljKG4pIHtcbiAgcmV0dXJuICFpc05hTigxICogbik7IC8vIDEgKiBuIGNvbnZlcnRzIGludGVnZXJzLCBpbnRlZ2VycyBhcyBzdHJpbmcgKFwiMTIzXCIpLCAxZTMgYW5kIFwiMWUzXCIgdG8gaW50ZWdlcnMgYW5kIHN0cmluZ3MgdG8gTmFOXG59XG5cbmZ1bmN0aW9uIGdldE1vZHVsZURlcGVuZGVuY2llcyAoc291cmNlcywgbW9kdWxlLCBxdWV1ZU5hbWUpIHtcbiAgdmFyIHJldHZhbCA9IHt9XG4gIHJldHZhbFtxdWV1ZU5hbWVdID0gW11cblxuICB2YXIgZm5TdHJpbmcgPSBtb2R1bGUudG9TdHJpbmcoKVxuICB2YXIgd3JhcHBlclNpZ25hdHVyZSA9IGZuU3RyaW5nLm1hdGNoKC9eZnVuY3Rpb25cXHM/XFx3KlxcKFxcdyssXFxzKlxcdyssXFxzKihcXHcrKVxcKS8pXG4gIGlmICghd3JhcHBlclNpZ25hdHVyZSkgcmV0dXJuIHJldHZhbFxuICB2YXIgd2VicGFja1JlcXVpcmVOYW1lID0gd3JhcHBlclNpZ25hdHVyZVsxXVxuXG4gIC8vIG1haW4gYnVuZGxlIGRlcHNcbiAgdmFyIHJlID0gbmV3IFJlZ0V4cCgnKFxcXFxcXFxcbnxcXFxcVyknICsgcXVvdGVSZWdFeHAod2VicGFja1JlcXVpcmVOYW1lKSArIGRlcGVuZGVuY3lSZWdFeHAsICdnJylcbiAgdmFyIG1hdGNoXG4gIHdoaWxlICgobWF0Y2ggPSByZS5leGVjKGZuU3RyaW5nKSkpIHtcbiAgICBpZiAobWF0Y2hbM10gPT09ICdkbGwtcmVmZXJlbmNlJykgY29udGludWVcbiAgICByZXR2YWxbcXVldWVOYW1lXS5wdXNoKG1hdGNoWzNdKVxuICB9XG5cbiAgLy8gZGxsIGRlcHNcbiAgcmUgPSBuZXcgUmVnRXhwKCdcXFxcKCcgKyBxdW90ZVJlZ0V4cCh3ZWJwYWNrUmVxdWlyZU5hbWUpICsgJ1xcXFwoXCIoZGxsLXJlZmVyZW5jZVxcXFxzKCcgKyBtb2R1bGVOYW1lUmVxRXhwICsgJykpXCJcXFxcKVxcXFwpJyArIGRlcGVuZGVuY3lSZWdFeHAsICdnJylcbiAgd2hpbGUgKChtYXRjaCA9IHJlLmV4ZWMoZm5TdHJpbmcpKSkge1xuICAgIGlmICghc291cmNlc1ttYXRjaFsyXV0pIHtcbiAgICAgIHJldHZhbFtxdWV1ZU5hbWVdLnB1c2gobWF0Y2hbMV0pXG4gICAgICBzb3VyY2VzW21hdGNoWzJdXSA9IF9fd2VicGFja19yZXF1aXJlX18obWF0Y2hbMV0pLm1cbiAgICB9XG4gICAgcmV0dmFsW21hdGNoWzJdXSA9IHJldHZhbFttYXRjaFsyXV0gfHwgW11cbiAgICByZXR2YWxbbWF0Y2hbMl1dLnB1c2gobWF0Y2hbNF0pXG4gIH1cblxuICAvLyBjb252ZXJ0IDFlMyBiYWNrIHRvIDEwMDAgLSB0aGlzIGNhbiBiZSBpbXBvcnRhbnQgYWZ0ZXIgdWdsaWZ5LWpzIGNvbnZlcnRlZCAxMDAwIHRvIDFlM1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJldHZhbCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmV0dmFsW2tleXNbaV1dLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKHJldHZhbFtrZXlzW2ldXVtqXSkpIHtcbiAgICAgICAgcmV0dmFsW2tleXNbaV1dW2pdID0gMSAqIHJldHZhbFtrZXlzW2ldXVtqXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmV0dmFsXG59XG5cbmZ1bmN0aW9uIGhhc1ZhbHVlc0luUXVldWVzIChxdWV1ZXMpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhxdWV1ZXMpXG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzVmFsdWVzLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzVmFsdWVzIHx8IHF1ZXVlc1trZXldLmxlbmd0aCA+IDBcbiAgfSwgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGdldFJlcXVpcmVkTW9kdWxlcyAoc291cmNlcywgbW9kdWxlSWQpIHtcbiAgdmFyIG1vZHVsZXNRdWV1ZSA9IHtcbiAgICBtYWluOiBbbW9kdWxlSWRdXG4gIH1cbiAgdmFyIHJlcXVpcmVkTW9kdWxlcyA9IHtcbiAgICBtYWluOiBbXVxuICB9XG4gIHZhciBzZWVuTW9kdWxlcyA9IHtcbiAgICBtYWluOiB7fVxuICB9XG5cbiAgd2hpbGUgKGhhc1ZhbHVlc0luUXVldWVzKG1vZHVsZXNRdWV1ZSkpIHtcbiAgICB2YXIgcXVldWVzID0gT2JqZWN0LmtleXMobW9kdWxlc1F1ZXVlKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcXVldWVOYW1lID0gcXVldWVzW2ldXG4gICAgICB2YXIgcXVldWUgPSBtb2R1bGVzUXVldWVbcXVldWVOYW1lXVxuICAgICAgdmFyIG1vZHVsZVRvQ2hlY2sgPSBxdWV1ZS5wb3AoKVxuICAgICAgc2Vlbk1vZHVsZXNbcXVldWVOYW1lXSA9IHNlZW5Nb2R1bGVzW3F1ZXVlTmFtZV0gfHwge31cbiAgICAgIGlmIChzZWVuTW9kdWxlc1txdWV1ZU5hbWVdW21vZHVsZVRvQ2hlY2tdIHx8ICFzb3VyY2VzW3F1ZXVlTmFtZV1bbW9kdWxlVG9DaGVja10pIGNvbnRpbnVlXG4gICAgICBzZWVuTW9kdWxlc1txdWV1ZU5hbWVdW21vZHVsZVRvQ2hlY2tdID0gdHJ1ZVxuICAgICAgcmVxdWlyZWRNb2R1bGVzW3F1ZXVlTmFtZV0gPSByZXF1aXJlZE1vZHVsZXNbcXVldWVOYW1lXSB8fCBbXVxuICAgICAgcmVxdWlyZWRNb2R1bGVzW3F1ZXVlTmFtZV0ucHVzaChtb2R1bGVUb0NoZWNrKVxuICAgICAgdmFyIG5ld01vZHVsZXMgPSBnZXRNb2R1bGVEZXBlbmRlbmNpZXMoc291cmNlcywgc291cmNlc1txdWV1ZU5hbWVdW21vZHVsZVRvQ2hlY2tdLCBxdWV1ZU5hbWUpXG4gICAgICB2YXIgbmV3TW9kdWxlc0tleXMgPSBPYmplY3Qua2V5cyhuZXdNb2R1bGVzKVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXdNb2R1bGVzS2V5cy5sZW5ndGg7IGorKykge1xuICAgICAgICBtb2R1bGVzUXVldWVbbmV3TW9kdWxlc0tleXNbal1dID0gbW9kdWxlc1F1ZXVlW25ld01vZHVsZXNLZXlzW2pdXSB8fCBbXVxuICAgICAgICBtb2R1bGVzUXVldWVbbmV3TW9kdWxlc0tleXNbal1dID0gbW9kdWxlc1F1ZXVlW25ld01vZHVsZXNLZXlzW2pdXS5jb25jYXQobmV3TW9kdWxlc1tuZXdNb2R1bGVzS2V5c1tqXV0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcXVpcmVkTW9kdWxlc1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgc291cmNlcyA9IHtcbiAgICBtYWluOiBfX3dlYnBhY2tfbW9kdWxlc19fXG4gIH1cblxuICB2YXIgcmVxdWlyZWRNb2R1bGVzID0gb3B0aW9ucy5hbGwgPyB7IG1haW46IE9iamVjdC5rZXlzKHNvdXJjZXMubWFpbikgfSA6IGdldFJlcXVpcmVkTW9kdWxlcyhzb3VyY2VzLCBtb2R1bGVJZClcblxuICB2YXIgc3JjID0gJydcblxuICBPYmplY3Qua2V5cyhyZXF1aXJlZE1vZHVsZXMpLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbSAhPT0gJ21haW4nIH0pLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgIHZhciBlbnRyeU1vZHVsZSA9IDBcbiAgICB3aGlsZSAocmVxdWlyZWRNb2R1bGVzW21vZHVsZV1bZW50cnlNb2R1bGVdKSB7XG4gICAgICBlbnRyeU1vZHVsZSsrXG4gICAgfVxuICAgIHJlcXVpcmVkTW9kdWxlc1ttb2R1bGVdLnB1c2goZW50cnlNb2R1bGUpXG4gICAgc291cmNlc1ttb2R1bGVdW2VudHJ5TW9kdWxlXSA9ICcoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7IG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXzsgfSknXG4gICAgc3JjID0gc3JjICsgJ3ZhciAnICsgbW9kdWxlICsgJyA9ICgnICsgd2VicGFja0Jvb3RzdHJhcEZ1bmMudG9TdHJpbmcoKS5yZXBsYWNlKCdFTlRSWV9NT0RVTEUnLCBKU09OLnN0cmluZ2lmeShlbnRyeU1vZHVsZSkpICsgJykoeycgKyByZXF1aXJlZE1vZHVsZXNbbW9kdWxlXS5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiAnJyArIEpTT04uc3RyaW5naWZ5KGlkKSArICc6ICcgKyBzb3VyY2VzW21vZHVsZV1baWRdLnRvU3RyaW5nKCkgfSkuam9pbignLCcpICsgJ30pO1xcbidcbiAgfSlcblxuICBzcmMgPSBzcmMgKyAnbmV3ICgoJyArIHdlYnBhY2tCb290c3RyYXBGdW5jLnRvU3RyaW5nKCkucmVwbGFjZSgnRU5UUllfTU9EVUxFJywgSlNPTi5zdHJpbmdpZnkobW9kdWxlSWQpKSArICcpKHsnICsgcmVxdWlyZWRNb2R1bGVzLm1haW4ubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gJycgKyBKU09OLnN0cmluZ2lmeShpZCkgKyAnOiAnICsgc291cmNlcy5tYWluW2lkXS50b1N0cmluZygpIH0pLmpvaW4oJywnKSArICd9KSkoc2VsZik7J1xuXG4gIHZhciBibG9iID0gbmV3IHdpbmRvdy5CbG9iKFtzcmNdLCB7IHR5cGU6ICd0ZXh0L2phdmFzY3JpcHQnIH0pXG4gIGlmIChvcHRpb25zLmJhcmUpIHsgcmV0dXJuIGJsb2IgfVxuXG4gIHZhciBVUkwgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkwgfHwgd2luZG93Lm1velVSTCB8fCB3aW5kb3cubXNVUkxcblxuICB2YXIgd29ya2VyVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKVxuICB2YXIgd29ya2VyID0gbmV3IHdpbmRvdy5Xb3JrZXIod29ya2VyVXJsKVxuICB3b3JrZXIub2JqZWN0VVJMID0gd29ya2VyVXJsXG5cbiAgcmV0dXJuIHdvcmtlclxufVxuIiwiY29uc3QgTE9BREVSX0VWRU5UUyA9IHtcbiAgTEFERVJfU1RBUlQ6ICdMT0FERVJfU1RBUlQnLFxuICBMT0FERVJfREFUQUxPQURFRDogJ0xPQURFUl9EQVRBTE9BREVEJyxcbiAgTE9BREVSX0NPTVBMRVRFOiAnTE9BREVSX0NPTVBMRVRFJyxcbiAgTE9BREVSX0VSUk9SOiAnTE9BREVSX0VSUk9SJ1xufVxuXG5jb25zdCBERU1VWF9FVkVOVFMgPSB7XG4gIERFTVVYX1NUQVJUOiAnREVNVVhfU1RBUlQnLFxuICBERU1VWF9DT01QTEVURTogJ0RFTVVYX0NPTVBMRVRFJyxcbiAgREVNVVhfRVJST1I6ICdERU1VWF9FUlJPUicsXG4gIE1FVEFEQVRBX1BBUlNFRDogJ01FVEFEQVRBX1BBUlNFRCcsXG4gIFZJREVPX01FVEFEQVRBX0NIQU5HRTogJ1ZJREVPX01FVEFEQVRBX0NIQU5HRScsXG4gIEFVRElPX01FVEFEQVRBX0NIQU5HRTogJ0FVRElPX01FVEFEQVRBX0NIQU5HRScsXG4gIE1FRElBX0lORk86ICdNRURJQV9JTkZPJ1xufVxuXG5jb25zdCBSRU1VWF9FVkVOVFMgPSB7XG4gIFJFTVVYX01FVEFEQVRBOiAnUkVNVVhfTUVUQURBVEEnLFxuICBSRU1VWF9NRURJQTogJ1JFTVVYX01FRElBJyxcbiAgTUVESUFfU0VHTUVOVDogJ01FRElBX1NFR01FTlQnLFxuICBSRU1VWF9FUlJPUjogJ1JFTVVYX0VSUk9SJyxcbiAgSU5JVF9TRUdNRU5UOiAnSU5JVF9TRUdNRU5UJ1xufVxuXG5jb25zdCBNU0VfRVZFTlRTID0ge1xuICBTT1VSQ0VfVVBEQVRFX0VORDogJ1NPVVJDRV9VUERBVEVfRU5EJ1xufVxuXG4vLyBobHPkuJPmnIlldmVudHNcbmNvbnN0IEhMU19FVkVOVFMgPSB7XG4gIFJFVFJZX1RJTUVfRVhDRUVERUQ6ICdSRVRSWV9USU1FX0VYQ0VFREVEJ1xufVxuXG5jb25zdCBBTExFVkVOVFMgPSBPYmplY3QuYXNzaWduKHt9LCBMT0FERVJfRVZFTlRTLCBERU1VWF9FVkVOVFMsIFJFTVVYX0VWRU5UUywgTVNFX0VWRU5UUywgSExTX0VWRU5UUylcblxuY29uc3QgRmx2QWxsb3dlZEV2ZW50cyA9IFtdXG5jb25zdCBIbHNBbGxvd2VkRXZlbnRzID0gW11cblxuZm9yIChsZXQga2V5IGluIEFMTEVWRU5UUykge1xuICBpZiAoQUxMRVZFTlRTLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICBGbHZBbGxvd2VkRXZlbnRzLnB1c2goQUxMRVZFTlRTW2tleV0pXG4gIH1cbn1cblxuZm9yIChsZXQga2V5IGluIEFMTEVWRU5UUykge1xuICBpZiAoQUxMRVZFTlRTLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICBIbHNBbGxvd2VkRXZlbnRzLnB1c2goQUxMRVZFTlRTW2tleV0pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBBTExFVkVOVFMsXG4gIEhMU19FVkVOVFMsXG4gIFJFTVVYX0VWRU5UUyxcbiAgREVNVVhfRVZFTlRTLFxuICBNU0VfRVZFTlRTLFxuICBMT0FERVJfRVZFTlRTLFxuICBGbHZBbGxvd2VkRXZlbnRzLFxuICBIbHNBbGxvd2VkRXZlbnRzXG59O1xuIiwiZXhwb3J0IGNvbnN0IENPTlRFWFRfQ09NT01BTkRTID0ge1xuICBPTjogJ29uJyxcbiAgT05DRTogJ29uY2UnLFxuICBPRkY6ICdvZmYnLFxuICBFTUlUOiAnZW1pdCcsXG4gIERFU1RST1k6ICdkZXN0cm95J1xufVxuIiwiaW1wb3J0IE1lZGlhSW5mbyBmcm9tICcuL21vZGVscy9tZWRpYS1pbmZvJ1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJ1xuXG5jb25zdCBESVJFQ1RfRU1JVF9GTEFHID0gJ19fVE9fXydcblxuY2xhc3MgQ29udGV4dCB7XG4gIGNvbnN0cnVjdG9yIChhbGxvd2VkRXZlbnRzID0gW10pIHtcbiAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpXG4gICAgdGhpcy5faW5zdGFuY2VNYXAgPSB7fSAvLyDmiYDmnInnmoTop6PnoIHmtYHnqIvlrp7kvotcbiAgICB0aGlzLl9jbHNNYXAgPSB7fSAvLyDmnoTpgKDlh73mlbDnmoRtYXBcbiAgICB0aGlzLl9pbml0ZWQgPSBmYWxzZVxuICAgIHRoaXMubWVkaWFJbmZvID0gbmV3IE1lZGlhSW5mbygpXG4gICAgdGhpcy5hbGxvd2VkRXZlbnRzID0gYWxsb3dlZEV2ZW50c1xuICAgIHRoaXMuX2hvb2tzID0ge30gLy8g5rOo5YaM5Zyo5LqL5Lu25YmNL+WQjueahOmSqeWtkO+8jOS+i+WmgiBiZWZvcmUoJ0RFTVVYX0NPTVBMRVRFJylcbiAgfVxuXG4gIC8qKlxuICAgKiDku47kuIrkuIvmlofkuK3ojrflj5bop6PnoIHmtYHnqIvlrp7kvovvvIzlpoLmnpzmsqHmnInlrp7kvovvvIzmnoTpgKDkuIDkuKpcbiAgICogQHBhcmFtIHRhZ1xuICAgKiBAcGFyYW0gYXJnc1xuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGdldEluc3RhbmNlICh0YWcpIHtcbiAgICBpZiAodGhpcy5faW5zdGFuY2VNYXBbdGFnXSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlTWFwW3RhZ11cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKGAke3RhZ33lrp7kvovlsJrmnKrliJ3lp4vljJZgKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5Yid5aeL5YyW5YW35L2T5a6e5L6LXG4gICAqIEBwYXJhbSB0YWdcbiAgICogQHBhcmFtIGFyZ3NcbiAgICovXG4gIGluaXRJbnN0YW5jZSAodGFnLCAuLi5hcmdzKSB7XG4gICAgaWYgKHRoaXMuX2Nsc01hcFt0YWddKSB7XG4gICAgICBjb25zdCBuZXdJbnN0YW5jZSA9IG5ldyB0aGlzLl9jbHNNYXBbdGFnXSguLi5hcmdzKVxuICAgICAgdGhpcy5faW5zdGFuY2VNYXBbdGFnXSA9IG5ld0luc3RhbmNlXG4gICAgICBpZiAobmV3SW5zdGFuY2UuaW5pdCkge1xuICAgICAgICBuZXdJbnN0YW5jZS5pbml0KCkgLy8gVE9ETzogbGlmZWNpcmNsZVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld0luc3RhbmNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0YWd95pyq5ZyoY29udGV4dOS4reazqOWGjGApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOmBv+WFjeWkp+mHj+eahGluaXRJbnN0YW5jZeiwg+eUqO+8jOWIneWni+WMluaJgOacieeahOe7hOS7tlxuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqL1xuICBpbml0IChjb25maWcpIHtcbiAgICBpZiAodGhpcy5faW5pdGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZm9yIChsZXQgdGFnIGluIHRoaXMuX2Nsc01hcCkge1xuICAgICAgLy8gaWYgbm90IGluaXRlZCwgaW5pdCBhbiBpbnN0YW5jZVxuICAgICAgaWYgKHRoaXMuX2Nsc01hcC5oYXNPd25Qcm9wZXJ0eSh0YWcpICYmICF0aGlzLl9pbnN0YW5jZU1hcFt0YWddKSB7XG4gICAgICAgIHRoaXMuaW5pdEluc3RhbmNlKHRhZywgY29uZmlnKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9pbml0ZWQgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICog5rOo5YaM5LiA5Liq5LiK5LiL5paH5rWB56iL77yM5o+Q5L6b5a6J5YWo55qE5LqL5Lu25Y+R6YCB5py65Yi2XG4gICAqIEBwYXJhbSB0YWdcbiAgICogQHBhcmFtIGNsc1xuICAgKi9cbiAgcmVnaXN0cnkgKHRhZywgY2xzKSB7XG4gICAgY29uc3QgZW1pdHRlciA9IHRoaXMuX2VtaXR0ZXJcbiAgICBjb25zdCBjaGVja01lc3NhZ2VOYW1lID0gdGhpcy5faXNNZXNzYWdlTmFtZVZhbGlkLmJpbmQodGhpcylcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIGNvbnN0IGVuaGFuY2VkID0gY2xhc3MgZXh0ZW5kcyBjbHMge1xuICAgICAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJncylcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSB7fVxuICAgICAgICB0aGlzLm9uY2VMaXN0ZW5lcnMgPSB7fVxuICAgICAgICB0aGlzLlRBRyA9IHRhZ1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gc2VsZlxuICAgICAgfVxuXG4gICAgICBvbiAobWVzc2FnZU5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG5cbiAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXSkge1xuICAgICAgICAgIHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXS5wdXNoKGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXSA9IFtjYWxsYmFja11cbiAgICAgICAgfVxuXG4gICAgICAgIGVtaXR0ZXIub24oYCR7bWVzc2FnZU5hbWV9JHtESVJFQ1RfRU1JVF9GTEFHfSR7dGFnfWAsIGNhbGxiYWNrKSAvLyDlu7rnq4vlrprlkJHpgJrkv6Hnm5HlkKxcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub24obWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIOWcqOafkOS4quS6i+S7tuinpuWPkeWJjeaJp+ihjFxuICAgICAgICogQHBhcmFtIG1lc3NhZ2VOYW1lXG4gICAgICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICAgICAqL1xuICAgICAgYmVmb3JlIChtZXNzYWdlTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcbiAgICAgICAgaWYgKHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXSkge1xuICAgICAgICAgIHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXS5wdXNoKGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXSA9IFtjYWxsYmFja11cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvbmNlIChtZXNzYWdlTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcblxuICAgICAgICBpZiAodGhpcy5vbmNlTGlzdGVuZXJzW21lc3NhZ2VOYW1lXSkge1xuICAgICAgICAgIHRoaXMub25jZUxpc3RlbmVyc1ttZXNzYWdlTmFtZV0ucHVzaChjYWxsYmFjaylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9uY2VMaXN0ZW5lcnNbbWVzc2FnZU5hbWVdID0gW2NhbGxiYWNrXVxuICAgICAgICB9XG5cbiAgICAgICAgZW1pdHRlci5vbmNlKGAke21lc3NhZ2VOYW1lfSR7RElSRUNUX0VNSVRfRkxBR30ke3RhZ31gLCBjYWxsYmFjaylcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub25jZShtZXNzYWdlTmFtZSwgY2FsbGJhY2spXG4gICAgICB9XG5cbiAgICAgIGVtaXQgKG1lc3NhZ2VOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG5cbiAgICAgICAgY29uc3QgYmVmb3JlTGlzdCA9IHNlbGYuX2hvb2tzW21lc3NhZ2VOYW1lXVxuICAgICAgICBpZiAoYmVmb3JlTGlzdCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBiZWZvcmVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGJlZm9yZUxpc3RbaV1cbiAgICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIuZW1pdChtZXNzYWdlTmFtZSwgLi4uYXJncylcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiDlrprlkJHlj5HpgIHnu5nmn5DkuKrnu4Tku7bljZXkvovnmoTmtojmga9cbiAgICAgICAqIEBwYXJhbSBtZXNzYWdlTmFtZVxuICAgICAgICogQHBhcmFtIGFyZ3NcbiAgICAgICAqL1xuICAgICAgZW1pdFRvICh0YWcsIG1lc3NhZ2VOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGNoZWNrTWVzc2FnZU5hbWUobWVzc2FnZU5hbWUpXG5cbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIuZW1pdChgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgLi4uYXJncylcbiAgICAgIH1cblxuICAgICAgb2ZmIChtZXNzYWdlTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY2hlY2tNZXNzYWdlTmFtZShtZXNzYWdlTmFtZSlcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub2ZmKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgIH1cblxuICAgICAgcmVtb3ZlTGlzdGVuZXJzICgpIHtcbiAgICAgICAgY29uc3QgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKHRoaXMubGlzdGVuZXJzKVxuXG4gICAgICAgIGZvciAobGV0IG1lc3NhZ2VOYW1lIGluIHRoaXMubGlzdGVuZXJzKSB7XG4gICAgICAgICAgaWYgKGhhc093bihtZXNzYWdlTmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMubGlzdGVuZXJzW21lc3NhZ2VOYW1lXSB8fCBbXVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV1cbiAgICAgICAgICAgICAgZW1pdHRlci5vZmYobWVzc2FnZU5hbWUsIGNhbGxiYWNrKVxuICAgICAgICAgICAgICBlbWl0dGVyLm9mZihgJHttZXNzYWdlTmFtZX0ke0RJUkVDVF9FTUlUX0ZMQUd9JHt0YWd9YCwgY2FsbGJhY2spXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgbWVzc2FnZU5hbWUgaW4gdGhpcy5vbmNlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgaWYgKGhhc093bihtZXNzYWdlTmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMub25jZUxpc3RlbmVyc1ttZXNzYWdlTmFtZV0gfHwgW11cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldXG4gICAgICAgICAgICAgIGVtaXR0ZXIub2ZmKG1lc3NhZ2VOYW1lLCBjYWxsYmFjaylcbiAgICAgICAgICAgICAgZW1pdHRlci5vZmYoYCR7bWVzc2FnZU5hbWV9JHtESVJFQ1RfRU1JVF9GTEFHfSR7dGFnfWAsIGNhbGxiYWNrKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIOWcqOe7hOS7tumUgOavgeaXtu+8jOm7mOiupOWwhuWug+azqOWGjOeahOS6i+S7tuWFqOmDqOWNuOi9ve+8jOehruS/neS4jeS8mumAoOaIkOWGheWtmOazhOa8j1xuICAgICAgICovXG4gICAgICBkZXN0cm95ICgpIHtcbiAgICAgICAgLy8gc3RlcDEgdW5saXN0ZW4gZXZlbnRzXG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKClcblxuICAgICAgICAvLyBzdGVwMiByZWxlYXNlIGZyb20gY29udGV4dFxuICAgICAgICBkZWxldGUgc2VsZi5faW5zdGFuY2VNYXBbdGFnXVxuICAgICAgICBpZiAoc3VwZXIuZGVzdHJveSkge1xuICAgICAgICAgIHN1cGVyLmRlc3Ryb3koKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2Nsc01hcFt0YWddID0gZW5oYW5jZWRcblxuICAgIC8qKlxuICAgICAqIGdldCBpbnN0YW5jZSBpbW1lZGlhdGVseVxuICAgICAqIGUuZyBjb25zdCBpbnN0YW5jZSA9IGNvbnRleHQucmVnaXN0cnkodGFnLCBDbHMpKGNvbmZpZylcbiAgICAgKiAqL1xuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaW5pdEluc3RhbmNlKHRhZywgLi4uYXJncylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5a+55a2Y5Zyo55qE5a6e5L6L6L+b6KGMXG4gICAqL1xuICBkZXN0cm95SW5zdGFuY2VzICgpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9pbnN0YW5jZU1hcCkuZm9yRWFjaCgodGFnKSA9PiB7XG4gICAgICBpZiAodGhpcy5faW5zdGFuY2VNYXBbdGFnXS5kZXN0cm95KSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlTWFwW3RhZ10uZGVzdHJveSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiDnvJbop6PnoIHmtYHnqIvml6DpnIDlhbPms6jkuovku7bnmoTop6Pnu5FcbiAgICovXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBudWxsXG4gICAgdGhpcy5hbGxvd2VkRXZlbnRzID0gW11cbiAgICB0aGlzLl9jbHNNYXAgPSBudWxsXG4gICAgdGhpcy5fY29udGV4dCA9IG51bGxcbiAgICB0aGlzLmRlc3Ryb3lJbnN0YW5jZXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIOWvueS/oemBk+i/m+ihjOaUtuaLolxuICAgKiBAcGFyYW0gbWVzc2FnZU5hbWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pc01lc3NhZ2VOYW1lVmFsaWQgKG1lc3NhZ2VOYW1lKSB7XG4gICAgaWYgKCF0aGlzLmFsbG93ZWRFdmVudHMuaW5kZXhPZihtZXNzYWdlTmFtZSkgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVucmVnaXN0ZXJlZCBtZXNzYWdlIG5hbWU6ICR7bWVzc2FnZU5hbWV9YClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGV4dFxuIiwiY29uc3QgbGUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gIChuZXcgRGF0YVZpZXcoYnVmKSkuc2V0SW50MTYoMCwgMjU2LCB0cnVlKSAvLyBsaXR0bGUtZW5kaWFuIHdyaXRlXG4gIHJldHVybiAobmV3IEludDE2QXJyYXkoYnVmKSlbMF0gPT09IDI1NiAvLyBwbGF0Zm9ybS1zcGVjIHJlYWQsIGlmIGVxdWFsIHRoZW4gTEVcbn0pKClcblxuZXhwb3J0IGRlZmF1bHQgbGVcbiIsImNvbnN0IGxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYnVmID0gbmV3IEFycmF5QnVmZmVyKDIpO1xuICAobmV3IERhdGFWaWV3KGJ1ZikpLnNldEludDE2KDAsIDI1NiwgdHJ1ZSkgLy8gbGl0dGxlLWVuZGlhbiB3cml0ZVxuICByZXR1cm4gKG5ldyBJbnQxNkFycmF5KGJ1ZikpWzBdID09PSAyNTYgLy8gcGxhdGZvcm0tc3BlYyByZWFkLCBpZiBlcXVhbCB0aGVuIExFXG59KSgpXG5cbmNvbnN0IHNuaWZmZXIgPSB7XG4gIGdldCBkZXZpY2UgKCkge1xuICAgIGxldCByID0gc25pZmZlci5vcztcbiAgICByZXR1cm4gci5pc1BjID8gJ3BjJyA6IHIuaXNUYWJsZXQgPyAndGFibGV0JyA6ICdtb2JpbGUnO1xuICB9LFxuICBnZXQgYnJvd3NlciAoKSB7XG4gICAgbGV0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCByZWcgPSB7XG4gICAgICBpZTogL3J2OihbXFxkLl0rKVxcKSBsaWtlIGdlY2tvLyxcbiAgICAgIGZpcmZveDogL2ZpcmVmb3hcXC8oW1xcZC5dKykvLFxuICAgICAgY2hyb21lOiAvY2hyb21lXFwvKFtcXGQuXSspLyxcbiAgICAgIG9wZXJhOiAvb3BlcmEuKFtcXGQuXSspLyxcbiAgICAgIHNhZmFyaTogL3ZlcnNpb25cXC8oW1xcZC5dKykuKnNhZmFyaS9cbiAgICB9O1xuICAgIHJldHVybiBbXS5jb25jYXQoT2JqZWN0LmtleXMocmVnKS5maWx0ZXIoa2V5ID0+IHJlZ1trZXldLnRlc3QodWEpKSlbMF07XG4gIH0sXG4gIGdldCBvcyAoKSB7XG4gICAgbGV0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgIGxldCBpc1dpbmRvd3NQaG9uZSA9IC8oPzpXaW5kb3dzIFBob25lKS8udGVzdCh1YSlcbiAgICBsZXQgaXNTeW1iaWFuID0gLyg/OlN5bWJpYW5PUykvLnRlc3QodWEpIHx8IGlzV2luZG93c1Bob25lO1xuICAgIGxldCBpc0FuZHJvaWQgPSAvKD86QW5kcm9pZCkvLnRlc3QodWEpO1xuICAgIGxldCBpc0ZpcmVGb3ggPSAvKD86RmlyZWZveCkvLnRlc3QodWEpO1xuICAgIGxldCBpc1RhYmxldCA9IC8oPzppUGFkfFBsYXlCb29rKS8udGVzdCh1YSkgfHwgKGlzQW5kcm9pZCAmJiAhLyg/Ok1vYmlsZSkvLnRlc3QodWEpKSB8fCAoaXNGaXJlRm94ICYmIC8oPzpUYWJsZXQpLy50ZXN0KHVhKSk7XG4gICAgbGV0IGlzUGhvbmUgPSAvKD86aVBob25lKS8udGVzdCh1YSkgJiYgIWlzVGFibGV0O1xuICAgIGxldCBpc1BjID0gIWlzUGhvbmUgJiYgIWlzQW5kcm9pZCAmJiAhaXNTeW1iaWFuO1xuICAgIHJldHVybiB7XG4gICAgICBpc1RhYmxldCxcbiAgICAgIGlzUGhvbmUsXG4gICAgICBpc0FuZHJvaWQsXG4gICAgICBpc1BjLFxuICAgICAgaXNTeW1iaWFuLFxuICAgICAgaXNXaW5kb3dzUGhvbmUsXG4gICAgICBpc0ZpcmVGb3hcbiAgICB9O1xuICB9LFxuXG4gIGdldCBpc0xlICgpIHtcbiAgICByZXR1cm4gbGVcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgc25pZmZlcjtcbiIsImNsYXNzIFVURjgge1xuICBzdGF0aWMgZGVjb2RlICh1aW50OGFycmF5KSB7XG4gICAgY29uc3Qgb3V0ID0gW107XG4gICAgY29uc3QgaW5wdXQgPSB1aW50OGFycmF5O1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBsZW5ndGggPSB1aW50OGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaW5wdXRbaV0gPCAweDgwKSB7XG4gICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoaW5wdXRbaV0pKTtcbiAgICAgICAgKytpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEMwKSB7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICB9IGVsc2UgaWYgKGlucHV0W2ldIDwgMHhFMCkge1xuICAgICAgICBpZiAoVVRGOC5fY2hlY2tDb250aW51YXRpb24oaW5wdXQsIGksIDEpKSB7XG4gICAgICAgICAgY29uc3QgdWNzNCA9IChpbnB1dFtpXSAmIDB4MUYpIDw8IDYgfCAoaW5wdXRbaSArIDFdICYgMHgzRik7XG4gICAgICAgICAgaWYgKHVjczQgPj0gMHg4MCkge1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEYwKSB7XG4gICAgICAgIGlmIChVVEY4Ll9jaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMikpIHtcbiAgICAgICAgICBjb25zdCB1Y3M0ID0gKGlucHV0W2ldICYgMHhGKSA8PCAxMiB8IChpbnB1dFtpICsgMV0gJiAweDNGKSA8PCA2IHwgaW5wdXRbaSArIDJdICYgMHgzRjtcbiAgICAgICAgICBpZiAodWNzNCA+PSAweDgwMCAmJiAodWNzNCAmIDB4RjgwMCkgIT09IDB4RDgwMCkge1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEY4KSB7XG4gICAgICAgIGlmIChVVEY4Ll9jaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMykpIHtcbiAgICAgICAgICBsZXQgdWNzNCA9IChpbnB1dFtpXSAmIDB4NykgPDwgMTggfCAoaW5wdXRbaSArIDFdICYgMHgzRikgPDwgMTIgfFxuICAgICAgICAgICAgICAgICAgICAoaW5wdXRbaSArIDJdICYgMHgzRikgPDwgNiB8IChpbnB1dFtpICsgM10gJiAweDNGKTtcbiAgICAgICAgICBpZiAodWNzNCA+IDB4MTAwMDAgJiYgdWNzNCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICB1Y3M0IC09IDB4MTAwMDA7XG4gICAgICAgICAgICBvdXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCh1Y3M0ID4+PiAxMCkgfCAweEQ4MDApKTtcbiAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHVjczQgJiAweDNGRikgfCAweERDMDApKTtcbiAgICAgICAgICAgIGkgKz0gNDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgweEZGRkQpKTtcbiAgICAgICsraTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xuICB9XG5cbiAgc3RhdGljIF9jaGVja0NvbnRpbnVhdGlvbiAodWludDhhcnJheSwgc3RhcnQsIGNoZWNrTGVuZ3RoKSB7XG4gICAgbGV0IGFycmF5ID0gdWludDhhcnJheTtcbiAgICBpZiAoc3RhcnQgKyBjaGVja0xlbmd0aCA8IGFycmF5Lmxlbmd0aCkge1xuICAgICAgd2hpbGUgKGNoZWNrTGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKChhcnJheVsrK3N0YXJ0XSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVVEY4O1xuIiwiY2xhc3MgQXVkaW9DdHgge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBPYmplY3QuYXNzaWduKHt9LGNvbmZpZyk7XG4gICAgdGhpcy5jb250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuICAgIHRoaXMuZ2Fpbk5vZGUgPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgIHRoaXMuZ2Fpbk5vZGUuY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pO1xuICAgIHRoaXMubWV0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNhbXBsZXMgPSBbXTtcbiAgICB0aGlzLnByZWxvYWRUaW1lID0gdGhpcy5jb25maWcucHJlbG9hZFRpbWUgfHwgMztcbiAgICB0aGlzLmR1cmF0aW9uID0gMDtcblxuICAgIHRoaXMuX2N1cnJlbnRCdWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbmV4dEJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9sYXN0cHRzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3ByZURlY29kZSA9IFtdO1xuICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gMDtcbiAgICB0aGlzLl9kZWNvZGluZyA9IGZhbHNlO1xuICAgIFxuICAgIC8vIOiusOW9leWklumDqOS8oOi+k+eahOeKtuaAgVxuICAgIHRoaXMuX3BsYXllZCA9IGZhbHNlO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50VGltZTtcbiAgfVxuXG5cbiAgc2V0QXVkaW9EYXRhIChkYXRhKSB7XG4gICAgZm9yKGxldCBpID0gMDtpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgZGF0YVtpXS5wdHMgPSAoZGF0YVtpXS5wdHMgPT09IHVuZGVmaW5lZCkgPyBkYXRhW2ldLmR0cyA6IGRhdGFbaV0ucHRzO1xuICAgICAgdGhpcy5fcHJlRGVjb2RlLnB1c2goZGF0YVtpXSk7XG4gICAgfVxuICAgIGlmKHRoaXMuX3ByZURlY29kZS5sZW5ndGggPiAwKSB7XG4gICAgICBpZih0aGlzLl9sYXN0cHRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fbGFzdHB0cyA9IHRoaXMuX3ByZURlY29kZVswXS5wdHM7XG4gICAgICB9XG4gICAgICBpZigodGhpcy5fcHJlRGVjb2RlW3RoaXMuX3ByZURlY29kZS5sZW5ndGggLSAxXS5wdHMgLSB0aGlzLl9sYXN0cHRzKSAvIDEwMDAgPiB0aGlzLnByZWxvYWRUaW1lKSB7XG4gICAgICAgIHRoaXMuZGVjb2RlQUFDKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZGVjb2RlQUFDKCkge1xuICAgIGlmKHRoaXMuX2RlY29kaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2RlY29kaW5nID0gdHJ1ZTtcbiAgICBsZXQgZGF0YSA9IHRoaXMuX3ByZURlY29kZTtcbiAgICBsZXQgc2FtcGxlcyA9IFtdO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHNhbXBsZSA9IGRhdGEuc2hpZnQoKTtcbiAgICB3aGlsZShzYW1wbGUpIHtcbiAgICAgIGxldCBzYW1wbGVEYXRhID0gQXVkaW9DdHguZ2V0QUFDRGF0YSh0aGlzLm1ldGEsIHNhbXBsZSlcbiAgICAgIHNhbXBsZXMucHVzaChzYW1wbGVEYXRhKTtcbiAgICAgIHRoaXMuX2xhc3RwdHMgPSBzYW1wbGUucHRzO1xuICAgICAgc2FtcGxlID0gZGF0YS5zaGlmdCgpXG4gICAgfVxuICAgIGxldCBidWZmZXIgPSBBdWRpb0N0eC5jb21iaWxlRGF0YShzYW1wbGVzKTtcbiAgICB0cnkge1xuICAgICAgdGhpcy5jb250ZXh0LmRlY29kZUF1ZGlvRGF0YShidWZmZXIuYnVmZmVyLCBmdW5jdGlvbihidWZmZXIpIHtcbiAgICAgICAgbGV0IGF1ZGlvU291cmNlID0gX3RoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICAgICAgYXVkaW9Tb3VyY2UuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICBhdWRpb1NvdXJjZS5vbmVuZGVkID0gX3RoaXMub25Tb3VyY2VFbmRlZC5iaW5kKF90aGlzKTtcbiAgICAgICAgX3RoaXMuc2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICB0aW1lOiBfdGhpcy5kdXJhdGlvbixcbiAgICAgICAgICBkdXJhdGlvbjogYnVmZmVyLmR1cmF0aW9uLFxuICAgICAgICAgIGRhdGE6IGF1ZGlvU291cmNlXG4gICAgICAgIH0pXG5cbiAgICAgICAgX3RoaXMuZHVyYXRpb24gKz0gYnVmZmVyLmR1cmF0aW9uO1xuXG4gICAgICAgIGlmKCFfdGhpcy5fY3VycmVudEJ1ZmZlcikge1xuICAgICAgICAgIF90aGlzLl9jdXJyZW50QnVmZmVyID0gX3RoaXMuZ2V0VGltZUJ1ZmZlcihfdGhpcy5jdXJyZW50VGltZSk7XG5cbiAgICAgICAgICBpZihfdGhpcy5fcGxheWVkKSB7XG4gICAgICAgICAgICBfdGhpcy5wbGF5KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIV90aGlzLl9uZXh0QnVmZmVyICYmIF90aGlzLl9jdXJyZW50QnVmZmVyKSB7XG4gICAgICAgICAgX3RoaXMuX25leHRCdWZmZXIgPSBfdGhpcy5nZXRUaW1lQnVmZmVyKF90aGlzLmN1cnJlbnRUaW1lICsgX3RoaXMuX2N1cnJlbnRCdWZmZXIuZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9kZWNvZGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmKChfdGhpcy5fcHJlRGVjb2RlLmxlbmd0aCA+IDAgJiYgX3RoaXMuX3ByZURlY29kZVtfdGhpcy5fcHJlRGVjb2RlLmxlbmd0aCAtIDFdLnB0cyAtIF90aGlzLl9sYXN0cHRzKSAvIDEwMDAgPj0gX3RoaXMucHJlbG9hZFRpbWUpIHtcbiAgICAgICAgICBfdGhpcy5kZWNvZGVBQUMoKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbiAgfVxuXG4gIG9uU291cmNlRW5kZWQoKSB7XG4gICAgaWYoIXRoaXMuX25leHRCdWZmZXIgfHwgIXRoaXMuX3BsYXllZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgYXVkaW9Tb3VyY2UgPSB0aGlzLl9uZXh0QnVmZmVyLmRhdGE7XG4gICAgYXVkaW9Tb3VyY2Uuc3RhcnQoKTtcbiAgICBhdWRpb1NvdXJjZS5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xuICAgIHRoaXMuX2N1cnJlbnRCdWZmZXIgPSB0aGlzLl9uZXh0QnVmZmVyO1xuICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gdGhpcy5fY3VycmVudEJ1ZmZlci50aW1lO1xuICAgIHRoaXMuX25leHRCdWZmZXIgPSB0aGlzLmdldFRpbWVCdWZmZXIodGhpcy5jdXJyZW50VGltZSk7XG4gICAgaWYodGhpcy5fY3VycmVudEJ1ZmZlcikge1xuICAgICAgdGhpcy5fbmV4dEJ1ZmZlciA9IHRoaXMuZ2V0VGltZUJ1ZmZlcih0aGlzLmN1cnJlbnRUaW1lICsgdGhpcy5fY3VycmVudEJ1ZmZlci5kdXJhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgcGxheSgpIHtcbiAgICB0aGlzLl9wbGF5ZWQgPSB0cnVlO1xuICAgIGlmKCF0aGlzLl9jdXJyZW50QnVmZmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBhdWRpb1NvdXJjZSA9IHRoaXMuX2N1cnJlbnRCdWZmZXIuZGF0YTtcbiAgICBhdWRpb1NvdXJjZS5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xuICAgIGF1ZGlvU291cmNlLnN0YXJ0KCk7XG4gIH1cblxuICBnZXRUaW1lQnVmZmVyKHRpbWUpIHtcbiAgICBsZXQgcmV0O1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnNhbXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBzYW1wbGUgPSB0aGlzLnNhbXBsZXNbaV1cbiAgICAgIGlmKHNhbXBsZS50aW1lIDw9IHRpbWUgJiYgKHNhbXBsZS50aW1lICsgc2FtcGxlLmR1cmF0aW9uKSA+IHRpbWUpIHtcbiAgICAgICAgcmV0ID0gc2FtcGxlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHNldEF1ZGlvTWV0YURhdGEobWV0YSkge1xuICAgIHRoaXMubWV0YSA9IG1ldGE7XG4gIH1cblxuICBzdGF0aWMgZ2V0QUFDRGF0YShtZXRhLCBzYW1wbGUpIHtcbiAgICBsZXQgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoc2FtcGxlLmRhdGEuYnl0ZUxlbmd0aCArIDcpO1xuICAgIGxldCBhZHRzID0gQXVkaW9DdHguZ2V0QWR0cyhtZXRhLCBzYW1wbGUuZGF0YSk7XG4gICAgYnVmZmVyLnNldChhZHRzKTtcbiAgICBidWZmZXIuc2V0KHNhbXBsZS5kYXRhLCA3KTtcbiAgICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbiAgc3RhdGljIGNvbWJpbGVEYXRhKHNhbXBsZXMpIHtcbiAgICAvLyBnZXQgbGVuZ3RoXG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgZm9yKGxldCBpID0gMCxrID0gc2FtcGxlcy5sZW5ndGg7IGkgPCBrOyBpKyspIHtcbiAgICAgIGxlbmd0aCArPSBzYW1wbGVzW2ldLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIFxuICAgIGxldCByZXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIC8vIGNvbWJpbGUgZGF0YTtcbiAgICBmb3IobGV0IGkgPSAwLGsgPSBzYW1wbGVzLmxlbmd0aDsgaSA8IGs7IGkrKykge1xuICAgICAgcmV0LnNldChzYW1wbGVzW2ldLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IHNhbXBsZXNbaV0uYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBZHRzKG1ldGEsIGRhdGEpIHtcbiAgICBsZXQgYWR0cyA9IG5ldyBVaW50OEFycmF5KDcpO1xuICAgIFxuICAgIC8vIOiuvue9ruWQjOatpeS9jSAweGZmZiAxMmJpdCBcbiAgICBhZHRzWzBdID0gMHhmZjtcbiAgICBhZHRzWzFdID0gMHhmMDtcblxuICAgIC8vIE9iamVjdCBkYXRhICjmsqHku4DkuYjkurrnlKhNUEVHLTLkuobvvIxITFPlkoxGTFbkuZ/lhajmmK9NUEVHLTTvvIzov5nph4znm7TmjqUwKSAgMWJpdCBcbiAgICAvLyBMZXZlbCBhbHdheXMgMDAgMmJpdCBcbiAgICAvLyBDUkMgYWx3YXlzIDEgMWJpdCBcbiAgICBhZHRzWzFdID0gYWR0c1sxXSB8IDB4MDE7XG5cbiAgICAvLyBwcm9maWxlIDJiaXRcbiAgICBhZHRzWzJdID0gMHhjMCAmICgobWV0YS5vYmplY3RUeXBlLTEpIDw8IDYpO1xuXG4gICAgLy9zYW1wbGVGcmVxdWVuY3lJbmRleFxuICAgIGFkdHNbMl0gPSBhZHRzWzJdIHwgKDB4M2MgJiAobWV0YS5zYW1wbGVSYXRlSW5kZXggPDwgMikpXG5cbiAgICAvL3ByaXZhdGUgYml0IDAgMWJpdFxuICAgIC8vIGNoYW5lbCBjb25maWd1cmF0aW9uIDNiaXRcbiAgICBhZHRzWzJdID0gYWR0c1syXSB8ICgweDAxICYgbWV0YS5jaGFubmVsQ291bnQgPj4gMik7XG4gICAgYWR0c1szXSA9IDB4YzAgJiAobWV0YS5jaGFubmVsQ291bnQgPDwgNik7XG5cbiAgICAvLyBvcmlnaW5hbF9jb3B5OiAwIDFiaXRcbiAgICAvLyBob21lOiAwIDFiaXRcblxuICAgIC8vIGFkdHNfdmFyaWFibGVfaGVhZGVyKClcbiAgICAvLyBjb3B5cmlnaHRlZF9pZF9iaXQgMCAxYml0XG4gICAgLy8gY29weXJpZ2h0ZWRfaWRfc3RhcnQgMCAxYml0XG5cbiAgICAvLyBhYWNfZnJhbWVfbGVuZ3RoIDEzYml0O1xuICAgIGxldCBhYWNmcmFtZWxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aCArIDc7XG5cbiAgICBhZHRzWzNdID0gYWR0c1szXSB8ICgweDAzICYgYWFjZnJhbWVsZW5ndGggPj4gMTEpO1xuICAgIGFkdHNbNF0gPSAweGZmICYgKGFhY2ZyYW1lbGVuZ3RoID4+IDMpO1xuICAgIGFkdHNbNV0gPSAweGUwICYgKGFhY2ZyYW1lbGVuZ3RoIDw8IDUpO1xuXG4gICAgLy8gYWR0c19idWZmZXJfZnVsbG5lc3MgMHg3ZmYgMTFiaXRcbiAgICBhZHRzWzVdID0gYWR0c1s1XSB8IDB4MWZcbiAgICBhZHRzWzZdID0gMHhmYztcblxuICAgIC8vIG51bWJlcl9vZl9yYXdfZGF0YV9ibG9ja3NfaW5fZnJhbWUgMCAyYml0O1xuICAgIHJldHVybiBhZHRzO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEF1ZGlvQ3R4O1xuIiwiaW1wb3J0IFZpZGVvQ3R4IGZyb20gJy4vdmlkZW8tY29udGV4dCc7XG5pbXBvcnQgQXVkaW9DdHggZnJvbSAnLi9hdWRpby1jb250ZXh0Jztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuY2xhc3MgTW9iaWxlVmlkZW8gZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudkN0eCA9IG5ldyBWaWRlb0N0eCgpO1xuICAgIHRoaXMuYUN0eCA9IG5ldyBBdWRpb0N0eChjb25maWcpO1xuICAgIHRoaXMuaGlzdG9yeVRpbWUgPSAwO1xuICB9XG5cbiAgZGVzdHJveSAoKSB7XG5cbiAgfVxuXG4gIG9uRGVtdXhDb21wbGV0ZSh2aWRlb1RyYWNrLCBhdWRpb1RyYWNrKSB7XG4gICAgYXVkaW9UcmFjay5zYW1wbGVzID0gW107XG4gICAgdGhpcy52Q3R4LmRlY29kZVZpZGVvKHZpZGVvVHJhY2spO1xuICB9XG5cbiAgc2V0QXVkaW9NZXRhIChtZXRhKSB7XG4gICAgdGhpcy5hQ3R4LnNldEF1ZGlvTWV0YURhdGEobWV0YSk7XG4gIH1cbiAgXG4gIHNldFZpZGVvTWV0YSAobWV0YSkge1xuICAgIHRoaXMudkN0eC5zZXRWaWRlb01ldGFEYXRhKG1ldGEpO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRUaW1lICgpIHtcblxuICB9XG5cbiAgcGxheSgpIHtcbiAgICB0aGlzLmFDdHgucGxheSgpO1xuICAgIHRoaXMudkN0eC5wbGF5KCk7XG4gIH1cbn1cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbW9iaWxlLXZpZGVvJywgTW9iaWxlVmlkZW8pO1xuIiwiaW1wb3J0IFdvcmtlcmlmeSBmcm9tICd3ZWJ3b3JraWZ5LXdlYnBhY2snXG5pbXBvcnQgU3RyZWFtIGZyb20gJy4uL3dyaXRlL3N0cmVhbSc7XG5pbXBvcnQgTmFsdW5pdCBmcm9tICcuLi8uLi8uLi94Z3BsYXllci1jb2RlYy9zcmMvaDI2NC9uYWx1bml0JztcbmNsYXNzIFZpZGVvQ2FudmFzIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgdGhpcy5jb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWcpO1xuICAgIHRoaXMuX2RlY29kZXJJbml0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLm9uY2FucGxheSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1ldGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fYXZjY3B1c2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuaW5pdFdhc21Xb3JrZXIoKTtcbiAgfVxuXG4gIGluaXRXYXNtV29ya2VyKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgY29uc29sZS5sb2coJ2luaXQgd29ya2VyJyk7XG4gICAgdGhpcy53YXNtd29ya2VyID0gV29ya2VyaWZ5KHJlcXVpcmUucmVzb2x2ZSgnLi93b3JrZXIuanMnKSk7XG4gICAgXG4gICAgLypcbiAgICB0aGlzLndhc213b3JrZXIuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG1zZyA9PiB7XG4gICAgICBzd2l0Y2gobXNnLmRhdGEubXNnKSB7XG4gICAgICAgIGNhc2UgJ0RFQ09ERVJfUkVBRFknOlxuICAgICAgICAgIF90aGlzLl9kZWNvZGVySW5pdGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnREVDT0RFRCc6XG4gICAgICAgICAgY29uc29sZS5sb2coJ2RlY29kZWQnLCBtc2cuZGF0YS5kYXRhLCBtc2cuZGF0YS53aWR0aCwgbXNnLmRhdGEuaGVpZ2h0LCBtc2cuZGF0YS5pbmZvKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTsqL1xuICB9XG5cbiAgc2V0VmlkZW9NZXRhRGF0YShtZXRhKSB7XG4gICAgY29uc29sZS5sb2cobWV0YSk7XG4gICAgdGhpcy5tZXRhID0gbWV0YTtcbiAgICBpZighdGhpcy5fZGVjb2RlckluaXRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuX2F2Y2NwdXNoZWQgPSB0cnVlO1xuICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkobWV0YS5zcHMuYnl0ZUxlbmd0aCArIDQpO1xuICAgIGRhdGEuc2V0KFswLDAsMCwxXSlcbiAgICBkYXRhLnNldChtZXRhLnNwcywgNCk7XG4gICAgdGhpcy53YXNtd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgIG1zZzogJ2RlY29kZScsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSlcblxuICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShtZXRhLnBwcy5ieXRlTGVuZ3RoICsgNCk7XG4gICAgZGF0YS5zZXQoWzAsMCwwLDFdKVxuICAgIGRhdGEuc2V0KG1ldGEucHBzLCA0KTtcbiAgICB0aGlzLndhc213b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgbXNnOiAnZGVjb2RlJyxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KVxuICB9XG5cbiAgZGVjb2RlVmlkZW8odmlkZW9UcmFjaykge1xuICAgIGlmKCF0aGlzLl9kZWNvZGVySW5pdGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZighdGhpcy5fYXZjY3B1c2hlZCkge1xuICAgICAgdGhpcy5zZXRWaWRlb01ldGFEYXRhKHRoaXMubWV0YSk7XG4gICAgfVxuICAgIGxldCB7IHNhbXBsZXMgfSA9IHZpZGVvVHJhY2s7XG4gICAgbGV0IHNhbXBsZSA9ICBzYW1wbGVzLnNoaWZ0KCk7XG5cbiAgICBpZighc2FtcGxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgXG4gICAgbGV0IG5hbHMgPSBOYWx1bml0LmdldEF2Y2NOYWxzKG5ldyBTdHJlYW0oc2FtcGxlLmRhdGEuYnVmZmVyKSk7XG4gICAgXG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgZm9yKGxldCBpPTA7aTxuYWxzLmxlbmd0aDtpKyspIHtcbiAgICAgIGxldCBuYWwgPSBuYWxzW2ldO1xuICAgICAgbGVuZ3RoICs9IG5hbC5ib2R5LmJ5dGVMZW5ndGggKyA0O1xuICAgIH1cbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZm9yKGxldCBpPTA7aTxuYWxzLmxlbmd0aDtpKyspIHtcbiAgICAgIGxldCBuYWwgPSBuYWxzW2ldO1xuICAgICAgZGF0YS5zZXQoWzAsMCwwLDFdLG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz00O1xuICAgICAgZGF0YS5zZXQobmV3IFVpbnQ4QXJyYXkobmFsLmJvZHkpLCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IG5hbC5ib2R5LmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIHRoaXMud2FzbXdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICBtc2c6ICdkZWNvZGUnLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGluZm86IHtcbiAgICAgICAgZHRzOiBzYW1wbGUuZHRzLFxuICAgICAgICBwdHM6IHNhbXBsZS5wdHNcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIFxuICBwbGF5KCkge1xuICAgIFxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBWaWRlb0NhbnZhczsiLCJmdW5jdGlvbiBpbml0KHNlbGYpIHtcbiAgY29uc29sZS5sb2coJ2luaXQnKTtcbiAgc2VsZi5pbXBvcnRTY3JpcHRzKCdodHRwOi8vbG9jYWxob3N0OjkwOTAvZXhhbXBsZXMvZmx2L2RlY29kZXIuanMnKS50aGVuKGRhdGEgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdsb2FkZWQnLGRhdGEpO1xuICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc2VsZikge1xuICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGRhdGEgPSBlLmRhdGE7ICAgIFxuICAgIGlmKCFkYXRhLm1zZykge1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgIG1zZzogJ0VSUk9SOmludmFsaWQgbWVzc2FnZScsXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2goZGF0YS5tc2cpIHtcbiAgICAgICAgY2FzZSAnaW5pdCc6XG4gICAgICAgICAgaW5pdChzZWxmKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZGVjb2RlJzpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sIGZhbHNlKTtcbn0iLCJjb25zdCBpc09iamVjdEZpbGxlZCA9IChvYmopID0+IHtcbiAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYUluZm8ge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5taW1lVHlwZSA9IG51bGxcbiAgICB0aGlzLmR1cmF0aW9uID0gbnVsbFxuXG4gICAgdGhpcy5oYXNWaWRlbyA9IG51bGxcbiAgICB0aGlzLnZpZGVvID0ge1xuICAgICAgY29kZWM6IG51bGwsXG4gICAgICB3aWR0aDogbnVsbCxcbiAgICAgIGhlaWdodDogbnVsbCxcbiAgICAgIHByb2ZpbGU6IG51bGwsXG4gICAgICBsZXZlbDogbnVsbCxcbiAgICAgIGZyYW1lUmF0ZToge1xuICAgICAgICBmaXhlZDogdHJ1ZSxcbiAgICAgICAgZnBzOiAyNSxcbiAgICAgICAgZnBzX251bTogMjUwMDAsXG4gICAgICAgIGZwc19kZW46IDEwMDBcbiAgICAgIH0sXG4gICAgICBjaHJvbWFGb3JtYXQ6IG51bGwsXG4gICAgICBwYXJSYXRpbzoge1xuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgaGVpZ2h0OiAxXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5oYXNBdWRpbyA9IG51bGxcblxuICAgIHRoaXMuYXVkaW8gPSB7XG4gICAgICBjb2RlYzogbnVsbCxcbiAgICAgIHNhbXBsZVJhdGU6IG51bGwsXG4gICAgICBzYW1wbGVSYXRlSW5kZXg6IG51bGwsXG4gICAgICBjaGFubmVsQ291bnQ6IG51bGxcbiAgICB9XG4gIH1cblxuICBpc0NvbXBsZXRlICgpIHtcbiAgICByZXR1cm4gTWVkaWFJbmZvLmlzQmFzZUluZm9SZWFkeSh0aGlzKSAmJiBNZWRpYUluZm8uaXNWaWRlb1JlYWR5KHRoaXMpICYmIE1lZGlhSW5mby5pc0F1ZGlvUmVhZHkodGhpcylcbiAgfVxuXG4gIHN0YXRpYyBpc0Jhc2VJbmZvUmVhZHkgKG1lZGlhSW5mbykge1xuICAgIHJldHVybiBpc09iamVjdEZpbGxlZChtZWRpYUluZm8pXG4gIH1cblxuICBzdGF0aWMgaXNWaWRlb1JlYWR5IChtZWRpYUluZm8pIHtcbiAgICBpZiAoIW1lZGlhSW5mby5oYXNWaWRlbykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gaXNPYmplY3RGaWxsZWQobWVkaWFJbmZvLnZpZGVvKVxuICB9XG5cbiAgc3RhdGljIGlzQXVkaW9SZWFkeSAobWVkaWFJbmZvKSB7XG4gICAgaWYgKCFtZWRpYUluZm8uaGFzQXVkaW8pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGlzT2JqZWN0RmlsbGVkKG1lZGlhSW5mby52aWRlbylcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVkaWFTYW1wbGUge1xuICBjb25zdHJ1Y3RvciAoaW5mbykge1xuICAgIGxldCBfZGVmYXVsdCA9IE1lZGlhU2FtcGxlLmdldERlZmF1bHRJbmYoKVxuXG4gICAgaWYgKCFpbmZvIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbmZvKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIHJldHVybiBfZGVmYXVsdFxuICAgIH1cbiAgICBsZXQgc2FtcGxlID0gT2JqZWN0LmFzc2lnbih7fSwgX2RlZmF1bHQsIGluZm8pXG5cbiAgICBPYmplY3QuZW50cmllcyhzYW1wbGUpLmZvckVhY2goKFtrLCB2XSkgPT4ge1xuICAgICAgdGhpc1trXSA9IHZcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGdldERlZmF1bHRJbmYgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkdHM6IG51bGwsXG4gICAgICBwdHM6IG51bGwsXG4gICAgICBkdXJhdGlvbjogbnVsbCxcbiAgICAgIHBvc2l0aW9uOiBudWxsLFxuICAgICAgaXNSQVA6IGZhbHNlLCAvLyBpcyBSYW5kb20gYWNjZXNzIHBvaW50XG4gICAgICBvcmlnaW5EdHM6IG51bGxcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhU2VnbWVudExpc3Qge1xuXG4gICAgY29uc3RydWN0b3IgKHR5cGUpIHtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uID0gLTE7IC8vIGNhY2hlZCBsYXN0IGluc2VydCBsb2NhdGlvblxuICAgIH1cblxuICAgIGdldCB0eXBlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aDtcbiAgICB9XG5cbiAgICBpc0VtcHR5ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3QubGVuZ3RoID09PSAwO1xuICAgIH1cblxuICAgIGNsZWFyICgpIHtcbiAgICAgICAgdGhpcy5fbGlzdCA9IFtdO1xuICAgICAgICB0aGlzLl9sYXN0QXBwZW5kTG9jYXRpb24gPSAtMTtcbiAgICB9XG5cbiAgICBfc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBsaXN0ID0gdGhpcy5fbGlzdDtcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhc3QgPSBsaXN0Lmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBtaWQgPSAwO1xuICAgICAgICBsZXQgbGJvdW5kID0gMDtcbiAgICAgICAgbGV0IHVib3VuZCA9IGxhc3Q7XG5cbiAgICAgICAgbGV0IGlkeCA9IDA7XG5cbiAgICAgICAgaWYgKGJlZ2luRHRzIDwgbGlzdFswXS5vcmlnaW5EdHMpIHtcbiAgICAgICAgICAgIGlkeCA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuIGlkeDtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChsYm91bmQgPD0gdWJvdW5kKSB7XG4gICAgICAgICAgICBtaWQgPSBsYm91bmQgKyBNYXRoLmZsb29yKCh1Ym91bmQgLSBsYm91bmQpIC8gMik7XG4gICAgICAgICAgICBpZiAobWlkID09PSBsYXN0IHx8IChiZWdpbkR0cyA+IGxpc3RbbWlkXS5sYXN0U2FtcGxlLm9yaWdpbkR0c1xuICAgICAgICAgICAgICAgICAgICAmJiAoYmVnaW5EdHMgPCBsaXN0W21pZCArIDFdLm9yaWdpbkR0cykpKSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gbWlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0W21pZF0ub3JpZ2luRHRzIDwgYmVnaW5EdHMpIHtcbiAgICAgICAgICAgICAgICBsYm91bmQgPSBtaWQgKyAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1Ym91bmQgPSBtaWQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuXG4gICAgX3NlYXJjaE5lYXJlc3RTZWdtZW50QWZ0ZXIgKGJlZ2luRHRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShiZWdpbkR0cykgKyAxO1xuICAgIH1cblxuICAgIGFwcGVuZCAoc2VnbWVudCkge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuX2xpc3Q7XG4gICAgICAgIGxldCBsYXN0QXBwZW5kSWR4ID0gdGhpcy5fbGFzdEFwcGVuZExvY2F0aW9uO1xuICAgICAgICBsZXQgaW5zZXJ0SWR4ID0gMDtcblxuICAgICAgICBpZiAobGFzdEFwcGVuZElkeCAhPT0gLTEgJiYgbGFzdEFwcGVuZElkeCA8IGxpc3QubGVuZ3RoXG4gICAgICAgICAgICAmJiBzZWdtZW50Lm9yaWdpblN0YXJ0RHRzID49IGxpc3RbbGFzdEFwcGVuZElkeF0ubGFzdFNhbXBsZS5vcmlnaW5EdHNcbiAgICAgICAgICAgICYmICgobGFzdEFwcGVuZElkeCA9PT0gbGlzdC5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICAgIHx8IChsYXN0QXBwZW5kSWR4IDwgbGlzdC5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgICYmIHNlZ21lbnQub3JpZ2luU3RhcnREdHMgPCBsaXN0W2xhc3RBcHBlbmRJZHggKyAxXS5vcmlnaW5TdGFydER0cykpKSB7XG4gICAgICAgICAgICBpbnNlcnRJZHggPSBsYXN0QXBwZW5kSWR4ICsgMTsgLy8gdXNlIGNhY2hlZCBsb2NhdGlvbiBpZHhcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRJZHggPSB0aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShzZWdtZW50Lm9yaWdpblN0YXJ0RHRzKSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sYXN0QXBwZW5kTG9jYXRpb24gPSBpbnNlcnRJZHg7XG4gICAgICAgIHRoaXMuX2xpc3Quc3BsaWNlKGluc2VydElkeCwgMCwgc2VnbWVudCk7XG4gICAgfVxuXG4gICAgZ2V0TGFzdFNlZ21lbnRCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBpZHggPSB0aGlzLl9zZWFyY2hOZWFyZXN0U2VnbWVudEJlZm9yZShiZWdpbkR0cyk7XG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RbaWR4XTtcbiAgICAgICAgfSBlbHNlIHsgLy8gLTFcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0TGFzdFNhbXBsZUJlZm9yZSAoYmVnaW5EdHMpIHtcbiAgICAgICAgbGV0IHNlZ21lbnQgPSB0aGlzLmdldExhc3RTZWdtZW50QmVmb3JlKGJlZ2luRHRzKTtcbiAgICAgICAgaWYgKHNlZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWdtZW50Lmxhc3RTYW1wbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldExhc3RSQVBCZWZvcmUgKGJlZ2luRHRzKSB7XG4gICAgICAgIGxldCBzZWdtZW50SWR4ID0gdGhpcy5fc2VhcmNoTmVhcmVzdFNlZ21lbnRCZWZvcmUoYmVnaW5EdHMpO1xuICAgICAgICBsZXQgcmFuZG9tQWNjZXNzUG9pbnRzID0gdGhpcy5fbGlzdFtzZWdtZW50SWR4XS5yYW5kb21BY2Nlc3NQb2ludHM7XG4gICAgICAgIHdoaWxlIChyYW5kb21BY2Nlc3NQb2ludHMubGVuZ3RoID09PSAwICYmIHNlZ21lbnRJZHggPiAwKSB7XG4gICAgICAgICAgICBzZWdtZW50SWR4LS07XG4gICAgICAgICAgICByYW5kb21BY2Nlc3NQb2ludHMgPSB0aGlzLl9saXN0W3NlZ21lbnRJZHhdLnJhbmRvbUFjY2Vzc1BvaW50cztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiByYW5kb21BY2Nlc3NQb2ludHNbcmFuZG9tQWNjZXNzUG9pbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYVNlZ21lbnQge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5zdGFydER0cyA9IC0xO1xuICAgICAgICB0aGlzLmVuZER0cyA9IC0xO1xuICAgICAgICB0aGlzLnN0YXJ0UHRzID0gLTE7XG4gICAgICAgIHRoaXMuZW5kUHRzID0gLTE7XG4gICAgICAgIHRoaXMub3JpZ2luU3RhcnREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5vcmlnaW5FbmREdHMgPSAtMTtcbiAgICAgICAgdGhpcy5yYW5kb21BY2Nlc3NQb2ludHMgPSBbXTtcbiAgICAgICAgdGhpcy5maXJzdFNhbXBsZSA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdFNhbXBsZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYWRkUkFQIChzYW1wbGUpIHtcbiAgICAgICAgc2FtcGxlLmlzUkFQID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yYW5kb21BY2Nlc3NQb2ludHMucHVzaChzYW1wbGUpO1xuICAgIH1cbn0iLCJleHBvcnQgY2xhc3MgQXVkaW9UcmFja01ldGEge1xuICBjb25zdHJ1Y3RvciAobWV0YSkge1xuICAgIGNvbnN0IF9kZWZhdWx0ID0ge1xuICAgICAgc2FtcGxlUmF0ZTogNDgwMDAsXG4gICAgICBjaGFubmVsQ291bnQ6IDIsXG4gICAgICBjb2RlYzogJ21wNGEuNDAuMicsXG4gICAgICBjb25maWc6IFs0MSwgNDAxLCAxMzYsIDBdLFxuICAgICAgZHVyYXRpb246IDAsXG4gICAgICBpZDogMixcbiAgICAgIHJlZlNhbXBsZUR1cmF0aW9uOiAyMSxcbiAgICAgIHNhbXBsZVJhdGVJbmRleDogMyxcbiAgICAgIHRpbWVzY2FsZTogMTAwMCxcbiAgICAgIHR5cGU6ICdhdWRpbydcbiAgICB9XG4gICAgaWYgKG1ldGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBfZGVmYXVsdCwgbWV0YSlcbiAgICB9XG4gICAgcmV0dXJuIF9kZWZhdWx0XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZpZGVvVHJhY2tNZXRhIHtcbiAgY29uc3RydWN0b3IgKG1ldGEpIHtcbiAgICBjb25zdCBfZGVmYXVsdCA9IHtcbiAgICAgIGF2Y2M6IG51bGwsXG4gICAgICBzcHM6IG5ldyBVaW50OEFycmF5KDApLFxuICAgICAgcHBzOiBuZXcgVWludDhBcnJheSgwKSxcbiAgICAgIGNocm9tYUZvcm1hdDogNDIwLFxuICAgICAgY29kZWM6ICdhdmMxLjY0MDAyMCcsXG4gICAgICBjb2RlY0hlaWdodDogNzIwLFxuICAgICAgY29kZWNXaWR0aDogMTI4MCxcbiAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgZnJhbWVSYXRlOiB7XG4gICAgICAgIGZpeGVkOiB0cnVlLFxuICAgICAgICBmcHM6IDI1LFxuICAgICAgICBmcHNfbnVtOiAyNTAwMCxcbiAgICAgICAgZnBzX2RlbjogMTAwMFxuICAgICAgfSxcbiAgICAgIGlkOiAxLFxuICAgICAgbGV2ZWw6ICczLjInLFxuICAgICAgcHJlc2VudEhlaWdodDogNzIwLFxuICAgICAgcHJlc2VudFdpZHRoOiAxMjgwLFxuICAgICAgcHJvZmlsZTogJ0hpZ2gnLFxuICAgICAgcmVmU2FtcGxlRHVyYXRpb246IDQwLFxuICAgICAgcGFyUmF0aW86IHtcbiAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICB3aWR0aDogMVxuICAgICAgfSxcbiAgICAgIHRpbWVzY2FsZTogMTAwMCxcbiAgICAgIHR5cGU6ICd2aWRlbydcbiAgICB9XG5cbiAgICBpZiAobWV0YSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBtZXRhKVxuICAgIH1cbiAgICByZXR1cm4gX2RlZmF1bHRcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEF1ZGlvVHJhY2tTYW1wbGUge1xuICBjb25zdHJ1Y3RvciAoaW5mbykge1xuICAgIGxldCBfZGVmYXVsdCA9IEF1ZGlvVHJhY2tTYW1wbGUuZ2V0RGVmYXVsdCgpXG4gICAgaWYgKCFpbmZvKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRcbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBpbmZvKVxuXG4gICAgcmV0dXJuIHNhbXBsZVxuICB9XG5cbiAgc3RhdGljIGdldERlZmF1bHQgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkdHM6IG51bGwsXG4gICAgICBwdHM6IG51bGwsXG4gICAgICBkYXRhOiBuZXcgVWludDhBcnJheSgpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyYWNrU2FtcGxlIHtcbiAgY29uc3RydWN0b3IgKGluZm8pIHtcbiAgICBsZXQgX2RlZmF1bHQgPSBWaWRlb1RyYWNrU2FtcGxlLmdldERlZmF1bHQoKVxuXG4gICAgaWYgKCFpbmZvKSB7XG4gICAgICByZXR1cm4gX2RlZmF1bHRcbiAgICB9XG4gICAgbGV0IHNhbXBsZSA9IE9iamVjdC5hc3NpZ24oe30sIF9kZWZhdWx0LCBpbmZvKVxuXG4gICAgcmV0dXJuIHNhbXBsZVxuICB9XG5cbiAgc3RhdGljIGdldERlZmF1bHQgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkdHM6IG51bGwsXG4gICAgICBwdHM6IG51bGwsXG4gICAgICBpc0tleWZyYW1lOiBmYWxzZSwgLy8gaXMgUmFuZG9tIGFjY2VzcyBwb2ludFxuICAgICAgb3JpZ2luRHRzOiBudWxsLFxuICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoKVxuICAgIH1cbiAgfVxufVxuIiwiY2xhc3MgTVNFIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZ3MpIHtcbiAgICB0aGlzLmNvbmZpZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWdzKTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuY29uZmlncy5jb250YWluZXI7XG4gICAgdGhpcy5tZWRpYVNvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5zb3VyY2VCdWZmZXJzID0ge307XG4gICAgdGhpcy5wcmVsb2FkVGltZSA9IHRoaXMuY29uZmlncy5wcmVsb2FkVGltZSB8fCAxO1xuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdGhpcy5tZWRpYVNvdXJjZSA9IG5ldyBzZWxmLk1lZGlhU291cmNlKCk7XG4gICAgdGhpcy5tZWRpYVNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgdGhpcy5vblNvdXJjZU9wZW4uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5jb250YWluZXIuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTCh0aGlzLm1lZGlhU291cmNlKTtcbiAgICB0aGlzLnVybCA9IHRoaXMuY29udGFpbmVyLnNyYztcbiAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgdGhpcy5vblRpbWVVcGRhdGUuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIHRoaXMub25XYWl0aW5nLmJpbmQodGhpcykpO1xuICB9XG5cbiAgb25UaW1lVXBkYXRlICgpIHtcbiAgICB0aGlzLmVtaXQoJ1RJTUVfVVBEQVRFJywgdGhpcy5jb250YWluZXIpO1xuICB9XG4gICBcbiAgb25XYWl0aW5nICgpIHtcbiAgICB0aGlzLmVtaXQoJ1dBSVRJTkcnLCB0aGlzLmNvbnRhaW5lcik7XG4gIH1cblxuICBvblNvdXJjZU9wZW4gKCkge1xuICAgIHRoaXMuYWRkU291cmNlQnVmZmVycygpO1xuICB9XG5cbiAgb25VcGRhdGVFbmQgKCkge1xuICAgIHRoaXMuZW1pdCgnU09VUkNFX1VQREFURV9FTkQnKTtcbiAgICB0aGlzLmRvQXBwZW5kKClcbiAgfVxuICBhZGRTb3VyY2VCdWZmZXJzICgpIHtcbiAgICBpZiAodGhpcy5tZWRpYVNvdXJjZS5yZWFkeVN0YXRlICE9PSAnb3BlbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHNvdXJjZXMgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdQUkVfU09VUkNFX0JVRkZFUicpO1xuICAgIGxldCB0cmFja3MgPSB0aGlzLl9jb250ZXh0LmdldEluc3RhbmNlKCdUUkFDS1MnKTtcbiAgICBsZXQgdHJhY2s7XG5cbiAgICBzb3VyY2VzID0gc291cmNlcy5zb3VyY2VzO1xuICAgIGxldCBhZGQgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMCwgayA9IE9iamVjdC5rZXlzKHNvdXJjZXMpLmxlbmd0aDsgaSA8IGs7IGkrKykge1xuICAgICAgbGV0IHR5cGUgPSBPYmplY3Qua2V5cyhzb3VyY2VzKVtpXTtcbiAgICAgIGlmICh0eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgIHRyYWNrID0gdHJhY2tzLmF1ZGlvVHJhY2s7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgdHJhY2sgPSB0cmFja3MudmlkZW9UcmFjaztcbiAgICAgIH1cbiAgICAgIGlmICh0cmFjaykge1xuICAgICAgICBsZXQgZHVyID0gdHlwZSA9PT0gJ2F1ZGlvJyA/IDIxIDogNDA7XG4gICAgICAgIGlmICh0cmFjay5tZXRhICYmIHRyYWNrLm1ldGEucmVmU2FtcGxlRHVyYXRpb24pIGR1ciA9IHRyYWNrLm1ldGEucmVmU2FtcGxlRHVyYXRpb247XG4gICAgICAgIGlmIChzb3VyY2VzW3R5cGVdLmRhdGEubGVuZ3RoID49ICh0aGlzLnByZWxvYWRUaW1lIC8gZHVyKSkge1xuICAgICAgICAgIGFkZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWRkKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwLCBrID0gT2JqZWN0LmtleXMoc291cmNlcykubGVuZ3RoOyBpIDwgazsgaSsrKSB7XG4gICAgICAgIGxldCB0eXBlID0gT2JqZWN0LmtleXMoc291cmNlcylbaV07XG4gICAgICAgIGxldCBzb3VyY2UgPSBzb3VyY2VzW3R5cGVdXG4gICAgICAgIGxldCBtaW1lID0gKHR5cGUgPT09ICd2aWRlbycpID8gJ3ZpZGVvL21wNDtjb2RlY3M9JyArIHNvdXJjZS5taW1ldHlwZSA6ICdhdWRpby9tcDQ7Y29kZWNzPScgKyBzb3VyY2UubWltZXR5cGVcbiAgICAgICAgbGV0IHNvdXJjZUJ1ZmZlciA9IHRoaXMubWVkaWFTb3VyY2UuYWRkU291cmNlQnVmZmVyKG1pbWUpO1xuICAgICAgICB0aGlzLnNvdXJjZUJ1ZmZlcnNbdHlwZV0gPSBzb3VyY2VCdWZmZXI7XG4gICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRFdmVudExpc3RlbmVyKCd1cGRhdGVlbmQnLCB0aGlzLm9uVXBkYXRlRW5kLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmRvQXBwZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZG9BcHBlbmQgKCkge1xuICAgIGxldCBzb3VyY2VzID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnUFJFX1NPVVJDRV9CVUZGRVInKTtcbiAgICBpZiAoc291cmNlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCB0eXBlID0gT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXVxuICAgICAgICBsZXQgc291cmNlQnVmZmVyID0gdGhpcy5zb3VyY2VCdWZmZXJzW3R5cGVdO1xuICAgICAgICBpZiAoIXNvdXJjZUJ1ZmZlci51cGRhdGluZykge1xuICAgICAgICAgIGxldCBzb3VyY2UgPSBzb3VyY2VzLnNvdXJjZXNbdHlwZV07XG4gICAgICAgICAgaWYgKHNvdXJjZSAmJiAhc291cmNlLmluaXRlZCkge1xuICAgICAgICAgICAgc291cmNlQnVmZmVyLmFwcGVuZEJ1ZmZlcihzb3VyY2UuaW5pdC5idWZmZXIuYnVmZmVyKTtcbiAgICAgICAgICAgIHNvdXJjZS5pbml0ZWQgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHNvdXJjZS5kYXRhLnNoaWZ0KClcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hcHBlbmRCdWZmZXIoZGF0YS5idWZmZXIuYnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbmRPZlN0cmVhbSAoKSB7XG4gICAgaWYgKHRoaXMubWVkaWFTb3VyY2UucmVhZHlTdGF0ZSA9PT0gJ29wZW4nKSB7XG4gICAgICB0aGlzLm1lZGlhU291cmNlLmVuZE9mU3RyZWFtKClcbiAgICB9XG4gIH1cblxuICByZW1vdmUgKGVuZCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKS5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGJ1ZmZlciA9IHRoaXMuc291cmNlQnVmZmVyc1tPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpW2ldXTtcbiAgICAgIGlmICghYnVmZmVyLnVwZGF0aW5nKSB7XG4gICAgICAgIGJ1ZmZlci5yZW1vdmUoMCwgZW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgdGhpcy5vblRpbWVVcGRhdGUpO1xuICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dhaXRpbmcnLCB0aGlzLm9uV2FpdGluZyk7XG4gICAgdGhpcy5tZWRpYVNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgdGhpcy5vblNvdXJjZU9wZW4pO1xuICAgIHRoaXMuY29uZmlncyA9IHt9O1xuICAgIHRoaXMuY29udGFpbmVyID0gbnVsbDtcbiAgICB0aGlzLm1lZGlhU291cmNlID0gbnVsbDtcbiAgICB0aGlzLnNvdXJjZUJ1ZmZlcnMgPSB7fTtcbiAgICB0aGlzLnByZWxvYWRUaW1lID0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQnVmZmVycykubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBidWZmZXIgPSB0aGlzLnNvdXJjZUJ1ZmZlcnNbT2JqZWN0LmtleXModGhpcy5zb3VyY2VCdWZmZXJzKVtpXV07XG4gICAgICBidWZmZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndXBkYXRlZW5kJywgdGhpcy5vblVwZGF0ZUVuZCk7XG4gICAgICB0aGlzLm1lZGlhU291cmNlLnJlbW92ZVNvdXJjZUJ1ZmZlcihidWZmZXIpO1xuICAgICAgZGVsZXRlIHRoaXMuc291cmNlQnVmZmVyc1tPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUJ1ZmZlcnMpW2ldXTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IE1TRTtcbiIsImltcG9ydCBDb25jYXQgZnJvbSAnY29uY2F0LXR5cGVkLWFycmF5J1xuXG5jbGFzcyBCdWZmZXIge1xuICBjb25zdHJ1Y3RvciAoYnVmZmVyKSB7XG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXIgfHwgbmV3IFVpbnQ4QXJyYXkoMClcbiAgfVxuXG4gIHdyaXRlICguLi5idWZmZXIpIHtcbiAgICBidWZmZXIuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHRoaXMuYnVmZmVyID0gQ29uY2F0KFVpbnQ4QXJyYXksIHRoaXMuYnVmZmVyLCBpdGVtKVxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgd3JpdGVVaW50MzIgKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtcbiAgICAgIHZhbHVlID4+IDI0LFxuICAgICAgKHZhbHVlID4+IDE2KSAmIDB4ZmYsXG4gICAgICAodmFsdWUgPj4gOCkgJiAweGZmLFxuICAgICAgdmFsdWUgJiAweGZmXG4gICAgXSlcbiAgfVxuXG4gIHN0YXRpYyByZWFkQXNJbnQgKGFycikge1xuICAgIGxldCB0ZW1wID0gJydcblxuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0NEhleCAoaGV4TnVtKSB7XG4gICAgICBsZXQgaGV4U3RyID0gaGV4TnVtLnRvU3RyaW5nKDE2KVxuICAgICAgcmV0dXJuIGhleFN0ci5wYWRTdGFydCgyLCAnMCcpXG4gICAgfVxuXG4gICAgYXJyLmZvckVhY2gobnVtID0+IHtcbiAgICAgIHRlbXAgKz0gcGFkU3RhcnQ0SGV4KG51bSlcbiAgICB9KVxuICAgIHJldHVybiBwYXJzZUludCh0ZW1wLCAxNilcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCdWZmZXJcbiIsImNsYXNzIFN0cmVhbSB7XG4gIGNvbnN0cnVjdG9yIChidWZmZXIpIHtcbiAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgdGhpcy5kYXRhdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgICAgdGhpcy5kYXRhdmlldy5wb3NpdGlvbiA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gIH1cblxuICBzZXQgcG9zaXRpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5kYXRhdmlldy5wb3NpdGlvbiA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHBvc2l0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhdmlldy5wb3NpdGlvbjtcbiAgfVxuXG4gIGJhY2sgKGNvdW50KSB7XG4gICAgdGhpcy5wb3NpdGlvbiAtPSBjb3VudDtcbiAgfVxuXG4gIHNraXAgKGNvdW50KSB7XG4gICAgbGV0IGxvb3AgPSBNYXRoLmZsb29yKGNvdW50IC8gNCk7XG4gICAgbGV0IGxhc3QgPSBjb3VudCAlIDQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wOyBpKyspIHtcbiAgICAgIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCA0KTtcbiAgICB9XG4gICAgaWYgKGxhc3QgPiAwKSB7XG4gICAgICBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgbGFzdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFtyZWFkQnl0ZSDku45EYXRhVmlld+S4reivu+WPluaVsOaNrl1cbiAgICogQHBhcmFtICB7RGF0YVZpZXd9IGJ1ZmZlciBbRGF0YVZpZXflrp7kvotdXG4gICAqIEBwYXJhbSAge051bWJlcn0gc2l6ZSAgIFvor7vlj5blrZfoioLmlbBdXG4gICAqIEByZXR1cm4ge051bWJlcn0gICAgICAgIFvmlbTmlbBdXG4gICAqL1xuICBzdGF0aWMgcmVhZEJ5dGUgKGJ1ZmZlciwgc2l6ZSwgc2lnbikge1xuICAgIGxldCByZXM7XG4gICAgc3dpdGNoIChzaXplKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGlmIChzaWduKSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldEludDgoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0VWludDgoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaWYgKHNpZ24pIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0SW50MTYoYnVmZmVyLnBvc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMgPSBidWZmZXIuZ2V0VWludDE2KGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGlmIChzaWduKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3Qgc3VwcG9ydGVkIGZvciByZWFkQnl0ZSAzJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQ4KGJ1ZmZlci5wb3NpdGlvbikgPDwgMTY7XG4gICAgICAgICAgcmVzIHw9IGJ1ZmZlci5nZXRVaW50OChidWZmZXIucG9zaXRpb24gKyAxKSA8PCA4O1xuICAgICAgICAgIHJlcyB8PSBidWZmZXIuZ2V0VWludDgoYnVmZmVyLnBvc2l0aW9uICsgMik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIGlmIChzaWduKSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldEludDMyKGJ1ZmZlci5wb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gYnVmZmVyLmdldFVpbnQzMihidWZmZXIucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA4OlxuICAgICAgICBpZiAoc2lnbikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnRlZCBmb3IgcmVhZEJvZHkgOCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGJ1ZmZlci5nZXRVaW50MzIoYnVmZmVyLnBvc2l0aW9uKSA8PCAzMjtcbiAgICAgICAgICByZXMgfD0gYnVmZmVyLmdldFVpbnQzMihidWZmZXIucG9zaXRpb24gKyA0KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlcyA9ICcnO1xuICAgIH1cbiAgICBidWZmZXIucG9zaXRpb24gKz0gc2l6ZTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgcmVhZFVpbnQ4ICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDEpO1xuICB9XG5cbiAgcmVhZFVpbnQxNiAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAyKTtcbiAgfVxuXG4gIHJlYWRVaW50MjQgKCkge1xuICAgIHJldHVybiBTdHJlYW0ucmVhZEJ5dGUodGhpcy5kYXRhdmlldywgMyk7XG4gIH1cblxuICByZWFkVWludDMyICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDQpO1xuICB9XG5cbiAgcmVhZFVpbnQ2NCAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCA4KTtcbiAgfVxuXG4gIHJlYWRJbnQ4ICgpIHtcbiAgICByZXR1cm4gU3RyZWFtLnJlYWRCeXRlKHRoaXMuZGF0YXZpZXcsIDEsIHRydWUpO1xuICB9XG4gIHJlYWRJbnQxNiAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCAyLCB0cnVlKTtcbiAgfVxuXG4gIHJlYWRJbnQzMiAoKSB7XG4gICAgcmV0dXJuIFN0cmVhbS5yZWFkQnl0ZSh0aGlzLmRhdGF2aWV3LCA0LCB0cnVlKTtcbiAgfVxuXG4gIHdyaXRlVWludDMyICh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShbXG4gICAgICB2YWx1ZSA+Pj4gMjQgJiAweGZmLFxuICAgICAgdmFsdWUgPj4+IDE2ICYgMHhmZixcbiAgICAgIHZhbHVlID4+PiA4ICYgMHhmZixcbiAgICAgIHZhbHVlICYgMHhmZlxuICAgIF0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0cmVhbTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMueGdwbGF5ZXI9dCgpOmUueGdwbGF5ZXI9dCgpfSh3aW5kb3csKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4obyl7aWYodFtvXSlyZXR1cm4gdFtvXS5leHBvcnRzO3ZhciByPXRbb109e2k6byxsOiExLGV4cG9ydHM6e319O3JldHVybiBlW29dLmNhbGwoci5leHBvcnRzLHIsci5leHBvcnRzLG4pLHIubD0hMCxyLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQsbyl7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0Om99KX0sbi5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LG4udD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9bihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgbz1PYmplY3QuY3JlYXRlKG51bGwpO2lmKG4ucihvKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIHIgaW4gZSluLmQobyxyLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwscikpO3JldHVybiBvfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LFwiYVwiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPVwiXCIsbihuLnM9MCl9KHtcIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/IS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3JjL3N0eWxlL2luZGV4LnNjc3NcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyPz9yZWYtLTUtMSEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3NyYy9zdHlsZS9pbmRleC5zY3NzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7KGUuZXhwb3J0cz1uKC8qISAuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMgKi9cIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCExKSkucHVzaChbZS5pLFwiQC13ZWJraXQta2V5ZnJhbWVzIHBsYXlQYXVzZXswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSk7b3BhY2l0eToxfTk5JXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjMpO3RyYW5zZm9ybTpzY2FsZSgxLjMpO29wYWNpdHk6MH10b3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwKTt0cmFuc2Zvcm06c2NhbGUoMCk7b3BhY2l0eTowfX1ALXdlYmtpdC1rZXlmcmFtZXMgbG9hZGluZ1JvdGF0ZXswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMXR1cm4pO3RyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX1ALXdlYmtpdC1rZXlmcmFtZXMgbG9hZGluZ0Rhc2hPZmZzZXR7MCV7c3Ryb2tlLWRhc2hvZmZzZXQ6MjM2fXRve3N0cm9rZS1kYXNob2Zmc2V0OjB9fUAtd2Via2l0LWtleWZyYW1lcyBlbnRlclRpcHN7MCV7b3BhY2l0eTowO2xlZnQ6MDt3aWR0aDozcHh9NTAle29wYWNpdHk6MTtsZWZ0OjUwJTt3aWR0aDo1cHh9dG97b3BhY2l0eTowO2xlZnQ6MTAwJTt3aWR0aDozcHh9fS54Z3BsYXllci1kb3dubG9hZHtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDozNnB4O2hlaWdodDo0MHB4Oy13ZWJraXQtb3JkZXI6ODstbW96LWJveC1vcmRpbmFsLWdyb3VwOjk7b3JkZXI6ODtjdXJzb3I6cG9pbnRlcn0ueGdwbGF5ZXItaW5hY3RpdmUgLnhncGxheWVyLWRvd25sb2FkLC54Z3BsYXllci1ub3N0YXJ0IC54Z3BsYXllci1kb3dubG9hZHtkaXNwbGF5Om5vbmV9LnhncGxheWVyLWRvd25sb2FkOmhvdmVyIC54Z3BsYXllci10aXBze2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLWRvd25sb2FkLWltZ3tkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDoyNHB4O2hlaWdodDoyNHB4O21hcmdpbi10b3A6N3B4IWltcG9ydGFudDttYXJnaW4tbGVmdDo0cHghaW1wb3J0YW50O2JhY2tncm91bmQ6dXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwlM0Nzdmcgd2lkdGg9JzI0JyBoZWlnaHQ9JzI0JyB2aWV3Qm94PScwIDAgMjQgMjQnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM0UlM0NnIGZpbGw9JyUyM0ZGRicgZmlsbC1ydWxlPSdldmVub2RkJyUzRSUzQ3JlY3QgeD0nMTEnIHk9JzQnIHdpZHRoPScyJyBoZWlnaHQ9JzEyJyByeD0nMScvJTNFJTNDcmVjdCB4PSczJyB5PScxOCcgd2lkdGg9JzE4JyBoZWlnaHQ9JzInIHJ4PScxJy8lM0UlM0NyZWN0IHRyYW5zZm9ybT0ncm90YXRlKDkwIDQgMTcuNSknIHg9JzEuNScgeT0nMTYuNScgd2lkdGg9JzUnIGhlaWdodD0nMicgcng9JzEnLyUzRSUzQ3JlY3QgdHJhbnNmb3JtPSdyb3RhdGUoOTAgMjAgMTcuNSknIHg9JzE3LjUnIHk9JzE2LjUnIHdpZHRoPSc1JyBoZWlnaHQ9JzInIHJ4PScxJy8lM0UlM0NwYXRoIGQ9J00xMS45ODggMTQuM2wtNC4yNDMtNC4yNDJhMSAxIDAgMCAwLTEuNDE0IDEuNDE0bDQuOTUgNC45NWExIDEgMCAwIDAgMS40MTQgMGw0Ljk1LTQuOTVhMSAxIDAgMSAwLTEuNDE0LTEuNDE0TDExLjk4OCAxNC4zeicvJTNFJTNDL2clM0UlM0Mvc3ZnJTNFXFxcIikgbm8tcmVwZWF0IDUwJS8xMDAlIDEwMCV9LnhncGxheWVyLXJvdGF0ZXstd2Via2l0LW9yZGVyOjk7LW1vei1ib3gtb3JkaW5hbC1ncm91cDoxMDtvcmRlcjo5O3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2N1cnNvcjpwb2ludGVyO21hcmdpbjowIDRweH0ueGdwbGF5ZXItcm90YXRlOmhvdmVyIC54Z3BsYXllci10aXBze2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLXJvdGF0ZS1pbWd7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtiYWNrZ3JvdW5kLWltYWdlOnVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzIwJyBoZWlnaHQ9JzIwJyB2aWV3Qm94PScwIDAgMjAgMjAnIGZpbGw9J25vbmUnJTNFJTNDZyBjbGlwLXBhdGg9J3VybCglMjNhKScgZmlsbD0nJTIzZmZmJyUzRSUzQ3BhdGggZD0nTTExLjY2NiA5LjE2N2gtNy41YTIuNSAyLjUgMCAwIDAtMi41IDIuNXY0LjE2NmEyLjUgMi41IDAgMCAwIDIuNSAyLjVoNy41YTIuNSAyLjUgMCAwIDAgMi41LTIuNXYtNC4xNjZhMi41IDIuNSAwIDAgMC0yLjUtMi41eicvJTNFJTNDcGF0aCBmaWxsLXJ1bGU9J2V2ZW5vZGQnIGNsaXAtcnVsZT0nZXZlbm9kZCcgZD0nTTMuODgxIDQuMDYzYS44My44MyAwIDAgMCAuMTA1IDEuMTkzTDYuOTkgOC4wNkEuODMzLjgzMyAwIDEgMCA4LjEyOCA2Ljg0TDYuNjIgNS40MzVsMy4xOTktLjAxM2E2LjY2NyA2LjY2NyAwIDAgMSA2LjM3NCA5LjMyMi44MzMuODMzIDAgMCAwIDEuNTI4LjY2NUE4LjMzNCA4LjMzNCAwIDAgMCA5LjggMy43NTZsLTMuMzY3LjAxMyAxLjUzLTEuNjRBLjgzMy44MzMgMCAxIDAgNi43NDMuOTkyTDMuOTAzIDQuMDRhLjgzLjgzIDAgMCAwLS4wMjEuMDIzeicvJTNFJTNDL2clM0UlM0NkZWZzJTNFJTNDY2xpcFBhdGggaWQ9J2EnJTNFJTNDcGF0aCBmaWxsPSclMjNmZmYnIGQ9J00wIDBoMjB2MjBIMHonLyUzRSUzQy9jbGlwUGF0aCUzRSUzQy9kZWZzJTNFJTNDL3N2ZyUzRVxcXCIpO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXBvc2l0aW9uOjEwcHggMTBweH0ueGdwbGF5ZXJ7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC4yNik7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmV9LnhncGxheWVyICp7bWFyZ2luOjA7cGFkZGluZzowO2JvcmRlcjowO2ZvbnQtc2l6ZToxMDAlO2ZvbnQ6aW5oZXJpdDt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX0ueGdwbGF5ZXIueGdwbGF5ZXItaXMtZnVsbHNjcmVlbnt3aWR0aDoxMDAlIWltcG9ydGFudDtoZWlnaHQ6MTAwJSFpbXBvcnRhbnQ7cGFkZGluZy10b3A6MCFpbXBvcnRhbnQ7ei1pbmRleDo5OTk5fS54Z3BsYXllci54Z3BsYXllci1pcy1mdWxsc2NyZWVuLnhncGxheWVyLWluYWN0aXZle2N1cnNvcjpub25lfS54Z3BsYXllciB2aWRlb3t3aWR0aDoxMDAlO2hlaWdodDoxMDAlO291dGxpbmU6bm9uZX0ueGdwbGF5ZXItaWNvbntkaXNwbGF5OmJsb2NrO3dpZHRoOjQwcHg7aGVpZ2h0OjQwcHg7b3ZlcmZsb3c6aGlkZGVuO2ZpbGw6I2ZmZn0ueGdwbGF5ZXItY29udHJvbHN7ZGlzcGxheTotd2Via2l0LWZsZXg7ZGlzcGxheTotbW96LWJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7aGVpZ2h0OjQwcHg7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQoLTFkZWcscmdiYSgwLDAsMCwuMyksdHJhbnNwYXJlbnQpO3otaW5kZXg6MTB9LnhncGxheWVyLW5vc3RhcnQgLnhncGxheWVyLWNvbnRyb2xze2Rpc3BsYXk6bm9uZX0ubm8tY29udHJvbHMgLnhncGxheWVyLWNvbnRyb2xze2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LnhncGxheWVyLWluYWN0aXZlIC54Z3BsYXllci1jb250cm9scywueGdwbGF5ZXItaXMtbGl2ZSAueGdwbGF5ZXItY29udHJvbHM+KntkaXNwbGF5Om5vbmV9LnhncGxheWVyLWlzLWxpdmUgLnhncGxheWVyLWNvbnRyb2xzIC54Z3BsYXllci1mdWxsc2NyZWVuLC54Z3BsYXllci1pcy1saXZlIC54Z3BsYXllci1jb250cm9scyAueGdwbGF5ZXItbGl2ZSwueGdwbGF5ZXItaXMtbGl2ZSAueGdwbGF5ZXItY29udHJvbHMgLnhncGxheWVyLXBsYWNlaG9sZGVyLC54Z3BsYXllci1pcy1saXZlIC54Z3BsYXllci1jb250cm9scyAueGdwbGF5ZXItcGxheSwueGdwbGF5ZXItaXMtbGl2ZSAueGdwbGF5ZXItY29udHJvbHMgLnhncGxheWVyLXBsYXktaW1nLC54Z3BsYXllci1pcy1saXZlIC54Z3BsYXllci1jb250cm9scyAueGdwbGF5ZXItdm9sdW1le2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLXByb2dyZXNze2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjIwcHg7bGluZS1oZWlnaHQ6MjBweDtsZWZ0OjA7cmlnaHQ6MDtvdXRsaW5lOm5vbmU7dG9wOi0xMHB4O3otaW5kZXg6MzV9LnhncGxheWVyLnhncGxheWVyLWRlZmluaXRpb24tYWN0aXZlIC54Z3BsYXllci1wcm9ncmVzcywueGdwbGF5ZXIueGdwbGF5ZXItdGV4dFRyYWNrLWFjdGl2ZSAueGdwbGF5ZXItcHJvZ3Jlc3MsLnhncGxheWVyLnhncGxheWVyLXZvbHVtZS1hY3RpdmUgLnhncGxheWVyLXByb2dyZXNze3otaW5kZXg6MTV9LnhncGxheWVyLXByb2dyZXNzLW91dGVye2JhY2tncm91bmQ6aHNsYSgwLDAlLDEwMCUsLjMpO2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjNweDtsaW5lLWhlaWdodDozcHg7bWFyZ2luLXRvcDo4LjVweDt3aWR0aDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlO2N1cnNvcjpwb2ludGVyfS54Z3BsYXllci1wcm9ncmVzcy1jYWNoZSwueGdwbGF5ZXItcHJvZ3Jlc3MtcGxheWVke2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjEwMCU7bGluZS1oZWlnaHQ6MTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjB9LnhncGxheWVyLXByb2dyZXNzLWNhY2hle3dpZHRoOjA7YmFja2dyb3VuZDpoc2xhKDAsMCUsMTAwJSwuNSl9LnhncGxheWVyLXByb2dyZXNzLXBsYXllZHtkaXNwbGF5OmJsb2NrO3dpZHRoOjA7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQoLTkwZGVnLCNmYTFmNDEsI2UzMTEwNik7Ym9yZGVyLXJhZGl1czowIDEuNXB4IDEuNXB4IDB9LnhncGxheWVyLXByb2dyZXNzLWJ0bntkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDotNnB4O3dpZHRoOjE0cHg7aGVpZ2h0OjE2cHg7Ym9yZGVyLXJhZGl1czo2cHg7YmFja2dyb3VuZDojZmZmO2JveC1zaGFkb3c6MCAwIDJweCAwIHJnYmEoMCwwLDAsLjI2KX0ueGdwbGF5ZXItcHJvZ3Jlc3MtcG9pbnR7cG9zaXRpb246YWJzb2x1dGV9LnhncGxheWVyLXByb2dyZXNzLXBvaW50LnhncGxheWVyLXRpcHN7bWFyZ2luLWxlZnQ6MDt0b3A6LTI1cHg7ZGlzcGxheTpub25lO3otaW5kZXg6MTAwfS54Z3BsYXllci1wcm9ncmVzcy1kb3R7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjNweDt3aWR0aDo1cHg7dG9wOjA7YmFja2dyb3VuZDojZmZmO2JvcmRlci1yYWRpdXM6NnB4O3otaW5kZXg6MTZ9LnhncGxheWVyLXByb2dyZXNzLWRvdCAueGdwbGF5ZXItcHJvZ3Jlc3MtdGlwe3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6LTQwcHg7aGVpZ2h0OmF1dG87bGluZS1oZWlnaHQ6MzBweDt3aWR0aDphdXRvOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC44KTstbXMtdHJhbnNmb3JtOnNjYWxlKC44KTt0cmFuc2Zvcm06c2NhbGUoLjgpO2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMyk7Ym9yZGVyLXJhZGl1czo2cHg7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC44KTtjdXJzb3I6ZGVmYXVsdDt3aGl0ZS1zcGFjZTpub3dyYXA7ZGlzcGxheTpub25lfS54Z3BsYXllci1wcm9ncmVzcy1kb3Qtc2hvdyAueGdwbGF5ZXItcHJvZ3Jlc3MtdGlwe2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLXByb2dyZXNzLXRodW1ibmFpbHtwb3NpdGlvbjphYnNvbHV0ZTstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3h9LnhncGxheWVyLXByb2dyZXNzLXRodW1ibmFpbC54Z3BsYXllci10aXBze21hcmdpbi1sZWZ0OjA7ZGlzcGxheTpub25lO3otaW5kZXg6OTl9LnhncGxheWVyLXByb2dyZXNzOmZvY3VzIC54Z3BsYXllci1wcm9ncmVzcy1vdXRlciwueGdwbGF5ZXItcHJvZ3Jlc3M6aG92ZXIgLnhncGxheWVyLXByb2dyZXNzLW91dGVye2hlaWdodDo2cHg7bWFyZ2luLXRvcDo3cHh9LnhncGxheWVyLXByb2dyZXNzOmZvY3VzIC54Z3BsYXllci1wcm9ncmVzcy1kb3QsLnhncGxheWVyLXByb2dyZXNzOmhvdmVyIC54Z3BsYXllci1wcm9ncmVzcy1kb3R7aGVpZ2h0OjZweH0ueGdwbGF5ZXItcHJvZ3Jlc3M6Zm9jdXMgLnhncGxheWVyLXByb2dyZXNzLWJ0biwueGdwbGF5ZXItcHJvZ3Jlc3M6aG92ZXIgLnhncGxheWVyLXByb2dyZXNzLWJ0bntkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1wbGF5LC54Z3BsYXllci1wbGF5LWltZ3twb3NpdGlvbjpyZWxhdGl2ZTstd2Via2l0LW9yZGVyOjA7LW1vei1ib3gtb3JkaW5hbC1ncm91cDoxO29yZGVyOjA7ZGlzcGxheTpibG9jaztjdXJzb3I6cG9pbnRlcn0ueGdwbGF5ZXItcGxheS1pbWcgLnhncGxheWVyLWljb24sLnhncGxheWVyLXBsYXkgLnhncGxheWVyLWljb257bWFyZ2luLXRvcDozcHh9LnhncGxheWVyLXBsYXktaW1nOmhvdmVyLC54Z3BsYXllci1wbGF5OmhvdmVye29wYWNpdHk6Ljg1fS54Z3BsYXllci1wbGF5LWltZzpob3ZlciAueGdwbGF5ZXItdGlwcywueGdwbGF5ZXItcGxheTpob3ZlciAueGdwbGF5ZXItdGlwc3tkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1wbGF5TmV4dCwueGdwbGF5ZXItcGxheU5leHQtaW1ney13ZWJraXQtb3JkZXI6MTstbW96LWJveC1vcmRpbmFsLWdyb3VwOjI7b3JkZXI6MTtjdXJzb3I6cG9pbnRlcn0ueGdwbGF5ZXItcGxheU5leHQtaW1nOmhvdmVyLC54Z3BsYXllci1wbGF5TmV4dDpob3ZlcntvcGFjaXR5Oi44NX0ueGdwbGF5ZXItdGltZXstd2Via2l0LW9yZGVyOjI7LW1vei1ib3gtb3JkaW5hbC1ncm91cDozO29yZGVyOjI7Zm9udC1mYW1pbHk6QXJpYWxNVDtmb250LXNpemU6MTNweDtjb2xvcjojZmZmO2xpbmUtaGVpZ2h0OjQwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2t9LnhncGxheWVyLXRpbWUgc3BhbjphZnRlcntjb250ZW50OlxcXCIvXFxcIjtkaXNwbGF5OmlubGluZS1ibG9jaztwYWRkaW5nOjAgM3B4fS54Z3BsYXllci10aW1lIGVte2NvbG9yOmhzbGEoMCwwJSwxMDAlLC41KX0ueGdwbGF5ZXItdGlwc3tiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjU0KTtib3JkZXItcmFkaXVzOjFweDtkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7Zm9udC1mYW1pbHk6UGluZ0ZhbmdTQy1SZWd1bGFyO2ZvbnQtc2l6ZToxMXB4O2NvbG9yOiNmZmY7cGFkZGluZzoycHggNHB4O3RleHQtYWxpZ246Y2VudGVyO3RvcDotMzBweDtsZWZ0OjUwJTttYXJnaW4tbGVmdDotMTZweDt3aWR0aDphdXRvO3doaXRlLXNwYWNlOm5vd3JhcH0ueGdwbGF5ZXItdm9sdW1le291dGxpbmU6bm9uZTstd2Via2l0LW9yZGVyOjQ7LW1vei1ib3gtb3JkaW5hbC1ncm91cDo1O29yZGVyOjQ7d2lkdGg6MjhweDtoZWlnaHQ6MTQwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLXRvcDotMTAwcHg7ei1pbmRleDoxOH0ueGdwbGF5ZXItdm9sdW1lIC54Z3BsYXllci1pY29ue21hcmdpbi10b3A6OHB4O2N1cnNvcjpwb2ludGVyO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTotOXB4fS54Z3BsYXllci1zbGlkZXJ7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjI4cHg7aGVpZ2h0Ojg4cHg7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC41NCk7Ym9yZGVyLXJhZGl1czoxcHg7Ym90dG9tOjUwcHg7b3V0bGluZTpub25lO2xlZnQ6MH0ueGdwbGF5ZXIueGdwbGF5ZXItdm9sdW1lLWFjdGl2ZSAueGdwbGF5ZXItc2xpZGVye2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLXNsaWRlcjphZnRlcntjb250ZW50OlxcXCIgXFxcIjtkaXNwbGF5OmJsb2NrO2hlaWdodDoxNXB4O3dpZHRoOjI4cHg7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOi0xNXB4O2xlZnQ6MDt6LWluZGV4OjIwfS54Z3BsYXllci1iYXIsLnhncGxheWVyLWRyYWd7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206NnB4O2xlZnQ6MTJweDtiYWNrZ3JvdW5kOmhzbGEoMCwwJSwxMDAlLC4zKTtib3JkZXItcmFkaXVzOjEwMHB4O3dpZHRoOjRweDtoZWlnaHQ6NzZweDtvdXRsaW5lOm5vbmU7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLWRyYWd7Ym90dG9tOjA7bGVmdDowO2JhY2tncm91bmQ6I2ZhMWY0MTttYXgtaGVpZ2h0Ojc2cHh9LnhncGxheWVyLWRyYWc6YWZ0ZXJ7Y29udGVudDpcXFwiIFxcXCI7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6OHB4O2hlaWdodDo4cHg7YmFja2dyb3VuZDojZmZmO2JveC1zaGFkb3c6MCAwIDVweCAwIHJnYmEoMCwwLDAsLjI2KTtwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXItcmFkaXVzOjUwJTtsZWZ0Oi0ycHg7dG9wOi02cHh9LnhncGxheWVyLXBsYWNlaG9sZGVyey13ZWJraXQtZmxleDoxOy1tb3otYm94LWZsZXg6MTtmbGV4OjE7LXdlYmtpdC1vcmRlcjozOy1tb3otYm94LW9yZGluYWwtZ3JvdXA6NDtvcmRlcjozO2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLXN0YXJ0e2JvcmRlci1yYWRpdXM6NTAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjcwcHg7aGVpZ2h0OjcwcHg7YmFja2dyb3VuZDpoc2xhKDAsMCUsMTAwJSwuMyk7b3ZlcmZsb3c6aGlkZGVuO3RleHQtYWxpZ246Y2VudGVyO2xpbmUtaGVpZ2h0OjcwcHg7dmVydGljYWwtYWxpZ246bWlkZGxlO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO3RvcDo1MCU7ei1pbmRleDoxMDAwO21hcmdpbjotNTVweCBhdXRvIGF1dG8gLTM1cHg7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLWluYWN0aXZlIC54Z3BsYXllci1zdGFydCwueGdwbGF5ZXItbm9zdGFydCAueGdwbGF5ZXItc3RhcnR7bWFyZ2luOi0zNXB4IGF1dG8gYXV0byAtMzVweH0ueGdwbGF5ZXItc3RhcnQgc3Zne2ZpbGw6aHNsYSgwLDAlLDEwMCUsLjcpO21hcmdpbjoxNHB4fS54Z3BsYXllci1zdGFydC54Z3BsYXllci1zdGFydC1pbnRlcmFjdHstd2Via2l0LWFuaW1hdGlvbjpwbGF5UGF1c2UgLjRzIGVhc2Utb3V0IGZvcndhcmRzO2FuaW1hdGlvbjpwbGF5UGF1c2UgLjRzIGVhc2Utb3V0IGZvcndhcmRzfS54Z3BsYXllci1zdGFydDpob3ZlcntiYWNrZ3JvdW5kOmhzbGEoMCwwJSwxMDAlLC41KX0ueGdwbGF5ZXItc3RhcnQ6aG92ZXIgc3Zne2ZpbGw6aHNsYSgwLDAlLDEwMCUsLjYpfS54Z3BsYXllci1zdGFydC1pbWd7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO3RvcDo1MCU7ei1pbmRleDoxMDAwO2N1cnNvcjpwb2ludGVyfS54Z3BsYXllci1ub3N0YXJ0IC54Z3BsYXllci1zdGFydC1pbWd7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItc3RhcnQtaW1nLnhncGxheWVyLXN0YXJ0LWludGVyYWN0ey13ZWJraXQtYW5pbWF0aW9uOnBsYXlQYXVzZSAuNHMgZWFzZS1vdXQgZm9yd2FyZHM7YW5pbWF0aW9uOnBsYXlQYXVzZSAuNHMgZWFzZS1vdXQgZm9yd2FyZHN9LnhncGxheWVyLXN0YXJ0LWltZzpob3ZlcntvcGFjaXR5Oi44NX0ueGdwbGF5ZXItdGV4dFRyYWNrey13ZWJraXQtb3JkZXI6NzstbW96LWJveC1vcmRpbmFsLWdyb3VwOjg7b3JkZXI6Nzt3aWR0aDo2MHB4O2hlaWdodDoxNTBweDt6LWluZGV4OjE4O3Bvc2l0aW9uOnJlbGF0aXZlO291dGxpbmU6bm9uZTtkaXNwbGF5Om5vbmU7Y3Vyc29yOmRlZmF1bHQ7bWFyZ2luLWxlZnQ6MTBweDttYXJnaW4tdG9wOi0xMTlweDttYXJnaW4tYm90dG9tOjExcHh9LnhncGxheWVyLXRleHRUcmFjayB1bHtkaXNwbGF5Om5vbmU7bGlzdC1zdHlsZTpub25lO3dpZHRoOjc4cHg7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC41NCk7Ym9yZGVyLXJhZGl1czoxcHg7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjMwcHg7bGVmdDowO3RleHQtYWxpZ246Y2VudGVyO3doaXRlLXNwYWNlOm5vd3JhcDttYXJnaW4tbGVmdDotMTBweDt6LWluZGV4OjI2O2N1cnNvcjpwb2ludGVyfS54Z3BsYXllci54Z3BsYXllci10ZXh0VHJhY2stYWN0aXZlIC54Z3BsYXllci10ZXh0VHJhY2sgdWx7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItdGV4dFRyYWNrIHVsIGxpe29wYWNpdHk6Ljc7Zm9udC1mYW1pbHk6UGluZ0ZhbmdTQy1SZWd1bGFyO2ZvbnQtc2l6ZToxMXB4O2NvbG9yOmhzbGEoMCwwJSwxMDAlLC44KTtwYWRkaW5nOjZweCAxM3B4fS54Z3BsYXllci10ZXh0VHJhY2sgdWwgbGkudGV4dFRyYWNrLC54Z3BsYXllci10ZXh0VHJhY2sgdWwgbGk6aG92ZXJ7Y29sb3I6I2ZmZjtvcGFjaXR5OjF9LnhncGxheWVyLXRleHRUcmFjayAubmFtZXt0ZXh0LWFsaWduOmNlbnRlcjtmb250LWZhbWlseTpQaW5nRmFuZ1NDLVJlZ3VsYXI7Zm9udC1zaXplOjEzcHg7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6aHNsYSgwLDAlLDEwMCUsLjgpO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTowO3dpZHRoOjYwcHg7aGVpZ2h0OjIwcHg7bGluZS1oZWlnaHQ6MjBweDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjM4KTtib3JkZXItcmFkaXVzOjEwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246bWlkZGxlfS54Z3BsYXllci1pcy10ZXh0VHJhY2sgLnhncGxheWVyLXRleHRUcmFja3tkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1kZWZpbml0aW9uey13ZWJraXQtb3JkZXI6NTstbW96LWJveC1vcmRpbmFsLWdyb3VwOjY7b3JkZXI6NTt3aWR0aDo2MHB4O2hlaWdodDoxNTBweDt6LWluZGV4OjE4O3Bvc2l0aW9uOnJlbGF0aXZlO291dGxpbmU6bm9uZTtkaXNwbGF5Om5vbmU7Y3Vyc29yOmRlZmF1bHQ7bWFyZ2luLWxlZnQ6MTBweDttYXJnaW4tdG9wOi0xMTlweDttYXJnaW4tYm90dG9tOjExcHh9LnhncGxheWVyLWRlZmluaXRpb24gdWx7ZGlzcGxheTpub25lO2xpc3Qtc3R5bGU6bm9uZTt3aWR0aDo3OHB4O2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuNTQpO2JvcmRlci1yYWRpdXM6MXB4O3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTozMHB4O2xlZnQ6MDt0ZXh0LWFsaWduOmNlbnRlcjt3aGl0ZS1zcGFjZTpub3dyYXA7bWFyZ2luLWxlZnQ6LTEwcHg7ei1pbmRleDoyNjtjdXJzb3I6cG9pbnRlcn0ueGdwbGF5ZXIueGdwbGF5ZXItZGVmaW5pdGlvbi1hY3RpdmUgLnhncGxheWVyLWRlZmluaXRpb24gdWx7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItZGVmaW5pdGlvbiB1bCBsaXtvcGFjaXR5Oi43O2ZvbnQtZmFtaWx5OlBpbmdGYW5nU0MtUmVndWxhcjtmb250LXNpemU6MTFweDtjb2xvcjpoc2xhKDAsMCUsMTAwJSwuOCk7cGFkZGluZzo2cHggMTNweH0ueGdwbGF5ZXItZGVmaW5pdGlvbiB1bCBsaS5kZWZpbml0aW9uLC54Z3BsYXllci1kZWZpbml0aW9uIHVsIGxpOmhvdmVye2NvbG9yOiNmZmY7b3BhY2l0eToxfS54Z3BsYXllci1kZWZpbml0aW9uIC5uYW1le3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtZmFtaWx5OlBpbmdGYW5nU0MtUmVndWxhcjtmb250LXNpemU6MTNweDtjdXJzb3I6cG9pbnRlcjtjb2xvcjpoc2xhKDAsMCUsMTAwJSwuOCk7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjA7d2lkdGg6NjBweDtoZWlnaHQ6MjBweDtsaW5lLWhlaWdodDoyMHB4O2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMzgpO2JvcmRlci1yYWRpdXM6MTBweDtkaXNwbGF5OmlubGluZS1ibG9jazt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LnhncGxheWVyLWlzLWRlZmluaXRpb24gLnhncGxheWVyLWRlZmluaXRpb257ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItcGxheWJhY2t7LXdlYmtpdC1vcmRlcjo4Oy1tb3otYm94LW9yZGluYWwtZ3JvdXA6OTtvcmRlcjo4O3Bvc2l0aW9uOnJlbGF0aXZlO291dGxpbmU6bm9uZTtkaXNwbGF5OmJsb2NrO2N1cnNvcjpwb2ludGVyO21hcmdpbjoxMHB4O2hlaWdodDoyMHB4fS54Z3BsYXllci1wbGF5YmFjayAubmFtZXt0ZXh0LWFsaWduOmNlbnRlcjtmb250LWZhbWlseTpQaW5nRmFuZ1NDLVJlZ3VsYXI7Zm9udC1zaXplOjEzcHg7bGluZS1oZWlnaHQ6MjBweDtoZWlnaHQ6MjBweDtjb2xvcjpoc2xhKDAsMCUsMTAwJSwuOCl9LnhncGxheWVyLXBsYXliYWNrIC5uYW1lIHNwYW57d2lkdGg6NDBweDtoZWlnaHQ6MjBweDtsaW5lLWhlaWdodDoyMHB4O2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMzgpO2JvcmRlci1yYWRpdXM6MTBweDtkaXNwbGF5OmlubGluZS1ibG9jazt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LnhncGxheWVyLXBsYXliYWNrOmhvdmVyIC54Z3BsYXllci10aXBze2Rpc3BsYXk6YmxvY2s7dG9wOi00MHB4fS54Z3BsYXllci1waXB7LXdlYmtpdC1vcmRlcjo5Oy1tb3otYm94LW9yZGluYWwtZ3JvdXA6MTA7b3JkZXI6OTtwb3NpdGlvbjpyZWxhdGl2ZTtvdXRsaW5lOm5vbmU7ZGlzcGxheTpibG9jaztjdXJzb3I6cG9pbnRlcjttYXJnaW4tbGVmdDoxMHB4O21hcmdpbi10b3A6OXB4O21hcmdpbi1ib3R0b206MTFweDtoZWlnaHQ6MjBweH0ueGdwbGF5ZXItcGlwIC5uYW1le3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtZmFtaWx5OlBpbmdGYW5nU0MtUmVndWxhcjtmb250LXNpemU6MTNweDtsaW5lLWhlaWdodDoyMHB4O2hlaWdodDoyMHB4O2NvbG9yOmhzbGEoMCwwJSwxMDAlLC44KX0ueGdwbGF5ZXItcGlwIC5uYW1lIHNwYW57d2lkdGg6NjBweDtoZWlnaHQ6MjBweDtsaW5lLWhlaWdodDoyMHB4O2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMzgpO2JvcmRlci1yYWRpdXM6MTBweDtkaXNwbGF5OmlubGluZS1ibG9jazt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LnhncGxheWVyLnhncGxheWVyLXBpcC1hY3RpdmV7cG9zaXRpb246Zml4ZWQhaW1wb3J0YW50O3JpZ2h0OjA7Ym90dG9tOjIwMHB4O3dpZHRoOjMyMHB4IWltcG9ydGFudDtoZWlnaHQ6MTgwcHghaW1wb3J0YW50O3otaW5kZXg6OTk5IWltcG9ydGFudH0ueGdwbGF5ZXIueGdwbGF5ZXItcGlwLWFjdGl2ZSAueGdwbGF5ZXItY29udHJvbHMsLnhncGxheWVyLnhncGxheWVyLXBpcC1hY3RpdmUgeGctYnVsbGV0e2Rpc3BsYXk6bm9uZX0ueGdwbGF5ZXIueGdwbGF5ZXItcGlwLWFjdGl2ZSAueGdwbGF5ZXItcGlwLWxheXtkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1waXAtbGF5e3Bvc2l0aW9uOmFic29sdXRlO3RvcDoyNnB4O2xlZnQ6MDt6LWluZGV4OjE0NTA7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtkaXNwbGF5Om5vbmV9LnhncGxheWVyLXBpcC1sYXksLnhncGxheWVyLXBpcC1sYXkgZGl2e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LnhncGxheWVyLXBpcC1kcmFne2N1cnNvcjptb3ZlO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoyNnB4O2xpbmUtaGVpZ2h0OjI2cHg7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQocmdiYSgwLDAsMCwuMyksdHJhbnNwYXJlbnQpO3otaW5kZXg6MTUwMDtkaXNwbGF5Om5vbmV9LnhncGxheWVyLnhncGxheWVyLXBpcC1hY3RpdmUgLnhncGxheWVyLXBpcC1kcmFne2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6LW1vei1ib3g7ZGlzcGxheTpmbGV4fS54Z3BsYXllci54Z3BsYXllci1pbmFjdGl2ZSAueGdwbGF5ZXItcGlwLWRyYWd7ZGlzcGxheTpub25lfS54Z3BsYXllci1mdWxsc2NyZWVuey13ZWJraXQtb3JkZXI6MTI7LW1vei1ib3gtb3JkaW5hbC1ncm91cDoxMztvcmRlcjoxMjtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmlubGluZS1ibG9jaztjdXJzb3I6cG9pbnRlcn0ueGdwbGF5ZXItZnVsbHNjcmVlbiAueGdwbGF5ZXItaWNvbnttYXJnaW46NHB4IC00cHggMCAwfS54Z3BsYXllci1mdWxsc2NyZWVuOmhvdmVyIC54Z3BsYXllci10aXBze2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLnhncGxheWVyLWZ1bGxzY3JlZW4tYWN0aXZle3Bvc2l0aW9uOmZpeGVkIWltcG9ydGFudDtsZWZ0OjAhaW1wb3J0YW50O3RvcDowIWltcG9ydGFudDt3aWR0aDoxMDAlIWltcG9ydGFudDtoZWlnaHQ6MTAwJSFpbXBvcnRhbnQ7ei1pbmRleDo5OTk5OSFpbXBvcnRhbnR9LnhncGxheWVyLWNzc2Z1bGxzY3JlZW57LXdlYmtpdC1vcmRlcjoxMTstbW96LWJveC1vcmRpbmFsLWdyb3VwOjEyO29yZGVyOjExO3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2N1cnNvcjpwb2ludGVyO2xlZnQ6NnB4fS54Z3BsYXllci1jc3NmdWxsc2NyZWVuIC54Z3BsYXllci1pY29ue21hcmdpbjo0cHggLTRweCAwIDB9LnhncGxheWVyLWNzc2Z1bGxzY3JlZW46aG92ZXIgLnhncGxheWVyLXRpcHN7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXIueGdwbGF5ZXItY3NzZnVsbHNjcmVlbi1hY3RpdmV7cG9zaXRpb246Zml4ZWQhaW1wb3J0YW50O2xlZnQ6MCFpbXBvcnRhbnQ7dG9wOjAhaW1wb3J0YW50O3dpZHRoOjEwMCUhaW1wb3J0YW50O2hlaWdodDoxMDAlIWltcG9ydGFudDt6LWluZGV4Ojk5OTk5IWltcG9ydGFudH0uZGFubXUtc3dpdGNoey13ZWJraXQtb3JkZXI6NjstbW96LWJveC1vcmRpbmFsLWdyb3VwOjc7b3JkZXI6Njt6LWluZGV4OjI2O21hcmdpbjoxMHB4IGF1dG99LnhncGxheWVyLWJ1bGxldHtkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7aGVpZ2h0OjEwMCU7b3ZlcmZsb3c6aGlkZGVuO3otaW5kZXg6OTtvdXRsaW5lOm5vbmV9LnhncGxheWVyLWJ1bGxldD4qe3Bvc2l0aW9uOmFic29sdXRlO3doaXRlLXNwYWNlOm5vd3JhcDt6LWluZGV4Ojl9LnhncGxheWVyLWhhcy1idWxsZXR7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItbG9hZGluZ3tkaXNwbGF5Om5vbmU7d2lkdGg6MTAwcHg7aGVpZ2h0OjEwMHB4O292ZXJmbG93OmhpZGRlbjstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguNyk7LW1zLXRyYW5zZm9ybTpzY2FsZSguNyk7dHJhbnNmb3JtOnNjYWxlKC43KTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO21hcmdpbjotNzBweCBhdXRvIGF1dG8gLTUwcHh9LnhncGxheWVyLWxvYWRpbmcgc3Zne2JvcmRlci1yYWRpdXM6NTAlOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXI7LW1zLXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyOy13ZWJraXQtYW5pbWF0aW9uOmxvYWRpbmdSb3RhdGUgMXMgbGluZWFyIGluZmluaXRlO2FuaW1hdGlvbjpsb2FkaW5nUm90YXRlIDFzIGxpbmVhciBpbmZpbml0ZX0ueGdwbGF5ZXItbG9hZGluZyBzdmcgcGF0aHtzdHJva2U6I2RkZDtzdHJva2UtZGFzaGFycmF5OjIzNjstd2Via2l0LWFuaW1hdGlvbjpsb2FkaW5nRGFzaE9mZnNldCAycyBsaW5lYXIgaW5maW5pdGU7YW5pbWF0aW9uOmxvYWRpbmdEYXNoT2Zmc2V0IDJzIGxpbmVhciBpbmZpbml0ZTthbmltYXRpb24tZGlyZWN0aW9uOmFsdGVybmF0ZS1yZXZlcnNlO2ZpbGw6bm9uZTtzdHJva2Utd2lkdGg6MTJweH0ueGdwbGF5ZXItbm9zdGFydCAueGdwbGF5ZXItbG9hZGluZ3tkaXNwbGF5Om5vbmV9LnhncGxheWVyLWlzbG9hZGluZyAueGdwbGF5ZXItbG9hZGluZ3tkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1yZXBsYXl7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ei1pbmRleDo1MDA7ZGlzcGxheTpub25lOy13ZWJraXQtanVzdGlmeS1jb250ZW50OmNlbnRlcjstbW96LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyOy13ZWJraXQtYWxpZ24taXRlbXM6Y2VudGVyOy1tb3otYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC41NCk7LXdlYmtpdC1mbGV4LWRpcmVjdGlvbjpjb2x1bW47LW1vei1ib3gtb3JpZW50OnZlcnRpY2FsOy1tb3otYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2N1cnNvcjpwb2ludGVyfS54Z3BsYXllci1yZXBsYXkgc3Zne2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuNTgpO2JvcmRlci1yYWRpdXM6MTAwJTtjdXJzb3I6cG9pbnRlcn0ueGdwbGF5ZXItcmVwbGF5IHN2ZyBwYXRoey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgyMHB4LDIxcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlKDIwcHgsMjFweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgyMHB4LDIxcHgpO2ZpbGw6I2RkZH0ueGdwbGF5ZXItcmVwbGF5IHN2Zzpob3ZlcntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjM4KX0ueGdwbGF5ZXItcmVwbGF5IHN2Zzpob3ZlciBwYXRoe2ZpbGw6I2ZmZn0ueGdwbGF5ZXItcmVwbGF5IC54Z3BsYXllci1yZXBsYXktaW1ne3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO3RvcDo1MCU7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLXJlcGxheSAueGdwbGF5ZXItcmVwbGF5LWltZzpob3ZlcntvcGFjaXR5Oi44NX0ueGdwbGF5ZXItcmVwbGF5IC54Z3BsYXllci1yZXBsYXktdHh0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO2ZvbnQtZmFtaWx5OlBpbmdGYW5nU0MtUmVndWxhcjtmb250LXNpemU6MTRweDtjb2xvcjojZmZmO2xpbmUtaGVpZ2h0OjM0cHg7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLnhncGxheWVyLWVuZGVkIC54Z3BsYXllci1jb250cm9sc3tkaXNwbGF5Om5vbmV9LnhncGxheWVyLnhncGxheWVyLWVuZGVkIC54Z3BsYXllci1yZXBsYXl7ZGlzcGxheTotd2Via2l0LWZsZXg7ZGlzcGxheTotbW96LWJveDtkaXNwbGF5OmZsZXh9LnhncGxheWVyLXJlcGxheS1pbWd7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO3RvcDo1MCU7ei1pbmRleDo1MDA7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLXJlcGxheS1pbWc6aG92ZXJ7b3BhY2l0eTouODV9LnhncGxheWVyLnhncGxheWVyLWVuZGVkIC54Z3BsYXllci1yZXBsYXktaW1ne2Rpc3BsYXk6YmxvY2t9QGtleWZyYW1lcyBwbGF5UGF1c2V7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX05OSV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4zKTt0cmFuc2Zvcm06c2NhbGUoMS4zKTtvcGFjaXR5OjB9dG97LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMCk7dHJhbnNmb3JtOnNjYWxlKDApO29wYWNpdHk6MH19QGtleWZyYW1lcyBsb2FkaW5nUm90YXRlezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApfXRvey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgxdHVybik7dHJhbnNmb3JtOnJvdGF0ZSgxdHVybil9fUBrZXlmcmFtZXMgbG9hZGluZ0Rhc2hPZmZzZXR7MCV7c3Ryb2tlLWRhc2hvZmZzZXQ6MjM2fXRve3N0cm9rZS1kYXNob2Zmc2V0OjB9fUBrZXlmcmFtZXMgZW50ZXJUaXBzezAle29wYWNpdHk6MDtsZWZ0OjA7d2lkdGg6M3B4fTUwJXtvcGFjaXR5OjE7bGVmdDo1MCU7d2lkdGg6NXB4fXRve29wYWNpdHk6MDtsZWZ0OjEwMCU7d2lkdGg6M3B4fX0ueGdwbGF5ZXItZW50ZXJ7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JhY2tncm91bmQ6dXJsKFxcXCIvL3MyLnBzdGF0cC5jb20vY2RuL2V4cGlyZS0xLU0vYnl0ZWQtcGxheWVyLWltYWdlcy8xLjAuMi9iZy5zdmdcXFwiKSBuby1yZXBlYXQgNTAlL2NvdmVyO3otaW5kZXg6MTEwMH0ueGdwbGF5ZXItZW50ZXIgLnhncGxheWVyLWVudGVyLWxvZ297ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO3dpZHRoOjEzMHB4O2hlaWdodDo0NHB4O21hcmdpbjotMjJweCBhdXRvIGF1dG8gLTY1cHg7YmFja2dyb3VuZC1zaXplOjEzMHB4IDQ0cHg7YmFja2dyb3VuZC1pbWFnZTp1cmwoXFxcIi8vczMucHN0YXRwLmNvbS9jZG4vZXhwaXJlLTEtTS9ieXRlZC1wbGF5ZXItaW1hZ2VzLzEuMC4xL3hnLWxvZ28tbmV3LnBuZ1xcXCIpfS54Z3BsYXllci1lbnRlciAueGdwbGF5ZXItZW50ZXItdGlwc3tkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7bGVmdDo1MCU7dG9wOjUwJTt3aWR0aDoxMjBweDtoZWlnaHQ6MXB4O2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDkwZGVnLCMwMDAscmVkLHJlZCxyZWQsIzAwMCk7bWFyZ2luOjMycHggYXV0byBhdXRvIC02MnB4fS54Z3BsYXllci1lbnRlciAueGdwbGF5ZXItZW50ZXItdGlwczpiZWZvcmV7Y29udGVudDpcXFwiIFxcXCI7ZGlzcGxheTpibG9jazt3aWR0aDo1cHg7aGVpZ2h0OjFweDtib3JkZXItcmFkaXVzOjUwJTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjA7LXdlYmtpdC1hbmltYXRpb246ZW50ZXJUaXBzIDEuNnMgbGluZWFyIGluZmluaXRlO2FuaW1hdGlvbjplbnRlclRpcHMgMS42cyBsaW5lYXIgaW5maW5pdGU7YmFja2dyb3VuZDojZmZmfS54Z3BsYXllci1pcy1lbnRlciAueGdwbGF5ZXItZW50ZXIsLnhncGxheWVyLWlzLWVudGVyIC54Z3BsYXllci1lbnRlciAueGdwbGF5ZXItZW50ZXItdGlwc3tkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1zY3JlZW5TaG90ey13ZWJraXQtb3JkZXI6MTA7LW1vei1ib3gtb3JkaW5hbC1ncm91cDoxMTtvcmRlcjoxMDtwb3NpdGlvbjpyZWxhdGl2ZTtvdXRsaW5lOm5vbmU7ZGlzcGxheTpibG9jaztjdXJzb3I6cG9pbnRlcjttYXJnaW4tbGVmdDoxMHB4O21hcmdpbi10b3A6OXB4O21hcmdpbi1ib3R0b206MTFweDtoZWlnaHQ6MjBweH0ueGdwbGF5ZXItc2NyZWVuU2hvdCAubmFtZXt0ZXh0LWFsaWduOmNlbnRlcjtmb250LWZhbWlseTpQaW5nRmFuZ1NDLVJlZ3VsYXI7Zm9udC1zaXplOjEzcHg7bGluZS1oZWlnaHQ6MjBweDtoZWlnaHQ6MjBweDtjb2xvcjpoc2xhKDAsMCUsMTAwJSwuOCl9LnhncGxheWVyLXNjcmVlblNob3QgLm5hbWUgc3Bhbnt3aWR0aDo2MHB4O2hlaWdodDoyMHB4O2xpbmUtaGVpZ2h0OjIwcHg7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC4zOCk7Ym9yZGVyLXJhZGl1czoxMHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0ueGdwbGF5ZXItcG9zdGVye3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6MTAwO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJX0ueGdwbGF5ZXItbGl2ZXtkaXNwbGF5OmJsb2NrO2ZvbnQtc2l6ZToxMnB4O2NvbG9yOiNmZmY7bGluZS1oZWlnaHQ6NDBweDstd2Via2l0LW9yZGVyOjE7LW1vei1ib3gtb3JkaW5hbC1ncm91cDoyO29yZGVyOjF9LnhncGxheWVyIC54Z3BsYXllci1ub25le2Rpc3BsYXk6bm9uZX0ueGdwbGF5ZXItZXJyb3J7YmFja2dyb3VuZDojMDAwO2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt6LWluZGV4OjEyMDA7Zm9udC1mYW1pbHk6UGluZ0ZhbmdTQy1SZWd1bGFyO2ZvbnQtc2l6ZToxNHB4O2NvbG9yOiNmZmY7dGV4dC1hbGlnbjpjZW50ZXI7bGluZS1oZWlnaHQ6MTAwJTstd2Via2l0LWp1c3RpZnktY29udGVudDpjZW50ZXI7LW1vei1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjstd2Via2l0LWFsaWduLWl0ZW1zOmNlbnRlcjstbW96LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS54Z3BsYXllci1lcnJvciAueGdwbGF5ZXItZXJyb3ItcmVmcmVzaHtjb2xvcjojZmExZjQxO3BhZGRpbmc6MCAzcHg7Y3Vyc29yOnBvaW50ZXJ9LnhncGxheWVyLWlzLWVycm9yIC54Z3BsYXllci1lcnJvcntkaXNwbGF5Oi13ZWJraXQtZmxleDtkaXNwbGF5Oi1tb3otYm94O2Rpc3BsYXk6ZmxleH0ueGdwbGF5ZXItZXJyb3IgLnhncGxheWVyLWVycm9yLXRleHR7bGluZS1oZWlnaHQ6MThweDttYXJnaW46YXV0byA2cHh9LnhncGxheWVyLW1vYmlsZSAueGdwbGF5ZXItcHJvZ3Jlc3MtYnRue2Rpc3BsYXk6YmxvY2t9LnhncGxheWVyLW1vYmlsZSAueGdwbGF5ZXItcHJvZ3Jlc3M6Zm9jdXMgLnhncGxheWVyLXByb2dyZXNzLW91dGVyLC54Z3BsYXllci1tb2JpbGUgLnhncGxheWVyLXByb2dyZXNzOmhvdmVyIC54Z3BsYXllci1wcm9ncmVzcy1vdXRlcntoZWlnaHQ6M3B4O21hcmdpbi10b3A6OC41cHh9LnhncGxheWVyLW1vYmlsZSAueGdwbGF5ZXItcHJvZ3Jlc3M6Zm9jdXMgLnhncGxheWVyLXByb2dyZXNzLWRvdCwueGdwbGF5ZXItbW9iaWxlIC54Z3BsYXllci1wcm9ncmVzczpob3ZlciAueGdwbGF5ZXItcHJvZ3Jlc3MtZG90e2hlaWdodDozcHh9LnhncGxheWVyLW1vYmlsZS54Z3BsYXllci1lbmRlZCAueGdwbGF5ZXItc3RhcnQsLnhncGxheWVyLW1vYmlsZS54Z3BsYXllci1lbmRlZCAueGdwbGF5ZXItc3RhcnQtaW1nLC54Z3BsYXllci1tb2JpbGUueGdwbGF5ZXItaW5hY3RpdmUgLnhncGxheWVyLXN0YXJ0LC54Z3BsYXllci1tb2JpbGUueGdwbGF5ZXItaW5hY3RpdmUgLnhncGxheWVyLXN0YXJ0LWltZ3tkaXNwbGF5Om5vbmV9LnhncGxheWVyLW1vYmlsZSAueGdwbGF5ZXItc3RhcnR7d2lkdGg6NjBweDtoZWlnaHQ6NjBweDtsaW5lLWhlaWdodDo2MHB4O2Rpc3BsYXk6bm9uZTttYXJnaW46LTUwcHggYXV0byBhdXRvIC0zMHB4fS54Z3BsYXllci1tb2JpbGUgLnhncGxheWVyLXN0YXJ0IHN2Z3ttYXJnaW46MTBweH0ueGdwbGF5ZXItbW9iaWxlIC54Z3BsYXllci1zdGFydC1pbWd7ZGlzcGxheTpub25lfS54Z3BsYXllci1tb2JpbGUgLnhncGxheWVyLXRpcHN7ZGlzcGxheTpub25lIWltcG9ydGFudH0ueGdwbGF5ZXItbW9iaWxlLnhncGxheWVyLW5vc3RhcnQgLnhncGxheWVyLXN0YXJ0e21hcmdpbjotMzBweCBhdXRvIGF1dG8gLTMwcHg7ZGlzcGxheTpibG9ja30ueGdwbGF5ZXItbW9iaWxlLnhncGxheWVyLW5vc3RhcnQgLnhncGxheWVyLXN0YXJ0LWltZ3tkaXNwbGF5OmJsb2NrfS54Z3BsYXllci1tb2JpbGUgLnhncGxheWVyLWxvYWRpbmd7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjUpOy1tcy10cmFuc2Zvcm06c2NhbGUoLjUpO3RyYW5zZm9ybTpzY2FsZSguNSl9LnhncGxheWVyLW1vYmlsZS54Z3BsYXllci1tb2JpbGUtbnBhc3NlZCAueGdwbGF5ZXItY29udHJvbHMsLnhncGxheWVyLW1vYmlsZS54Z3BsYXllci1tb2JpbGUtbnBhc3NlZCAueGdwbGF5ZXItcG9zdGVyLC54Z3BsYXllci1tb2JpbGUueGdwbGF5ZXItbW9iaWxlLW5wYXNzZWQgLnhncGxheWVyLXN0YXJ0LC54Z3BsYXllci1tb2JpbGUueGdwbGF5ZXItbW9iaWxlLW5wYXNzZWQgLnhncGxheWVyLXN0YXJ0LWltZ3tkaXNwbGF5Om5vbmV9XCIsXCJcIl0pfSxcIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1bXTtyZXR1cm4gdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcCgoZnVuY3Rpb24odCl7dmFyIG49ZnVuY3Rpb24oZSx0KXt2YXIgbj1lWzFdfHxcIlwiLG89ZVszXTtpZighbylyZXR1cm4gbjtpZih0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hKXt2YXIgcj0oYT1vLFwiLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGEpKSkpK1wiICovXCIpLGk9by5zb3VyY2VzLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuXCIvKiMgc291cmNlVVJMPVwiK28uc291cmNlUm9vdCtlK1wiICovXCJ9KSk7cmV0dXJuW25dLmNvbmNhdChpKS5jb25jYXQoW3JdKS5qb2luKFwiXFxuXCIpfXZhciBhO3JldHVybltuXS5qb2luKFwiXFxuXCIpfSh0LGUpO3JldHVybiB0WzJdP1wiQG1lZGlhIFwiK3RbMl0rXCJ7XCIrbitcIn1cIjpufSkpLmpvaW4oXCJcIil9LHQuaT1mdW5jdGlvbihlLG4pe1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1bW251bGwsZSxcIlwiXV0pO2Zvcih2YXIgbz17fSxyPTA7cjx0aGlzLmxlbmd0aDtyKyspe3ZhciBpPXRoaXNbcl1bMF07XCJudW1iZXJcIj09dHlwZW9mIGkmJihvW2ldPSEwKX1mb3Iocj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgYT1lW3JdO1wibnVtYmVyXCI9PXR5cGVvZiBhWzBdJiZvW2FbMF1dfHwobiYmIWFbMl0/YVsyXT1uOm4mJihhWzJdPVwiKFwiK2FbMl0rXCIpIGFuZCAoXCIrbitcIilcIiksdC5wdXNoKGEpKX19LHR9fSxcIi4vbm9kZV9tb2R1bGVzL2QvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9kL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigvKiEgdHlwZS92YWx1ZS9pcyAqL1wiLi9ub2RlX21vZHVsZXMvdHlwZS92YWx1ZS9pcy5qc1wiKSxyPW4oLyohIHR5cGUvcGxhaW4tZnVuY3Rpb24vaXMgKi9cIi4vbm9kZV9tb2R1bGVzL3R5cGUvcGxhaW4tZnVuY3Rpb24vaXMuanNcIiksaT1uKC8qISBlczUtZXh0L29iamVjdC9hc3NpZ24gKi9cIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9pbmRleC5qc1wiKSxhPW4oLyohIGVzNS1leHQvb2JqZWN0L25vcm1hbGl6ZS1vcHRpb25zICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9ub3JtYWxpemUtb3B0aW9ucy5qc1wiKSxzPW4oLyohIGVzNS1leHQvc3RyaW5nLyMvY29udGFpbnMgKi9cIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaW5kZXguanNcIik7KGUuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBuLHIsbCxjLHU7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8Mnx8XCJzdHJpbmdcIiE9dHlwZW9mIGU/KGM9dCx0PWUsZT1udWxsKTpjPWFyZ3VtZW50c1syXSxvKGUpPyhuPXMuY2FsbChlLFwiY1wiKSxyPXMuY2FsbChlLFwiZVwiKSxsPXMuY2FsbChlLFwid1wiKSk6KG49bD0hMCxyPSExKSx1PXt2YWx1ZTp0LGNvbmZpZ3VyYWJsZTpuLGVudW1lcmFibGU6cix3cml0YWJsZTpsfSxjP2koYShjKSx1KTp1fSkuZ3M9ZnVuY3Rpb24oZSx0LG4pe3ZhciBsLGMsdSxkO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlPyh1PW4sbj10LHQ9ZSxlPW51bGwpOnU9YXJndW1lbnRzWzNdLG8odCk/cih0KT9vKG4pP3Iobil8fCh1PW4sbj12b2lkIDApOm49dm9pZCAwOih1PXQsdD1uPXZvaWQgMCk6dD12b2lkIDAsbyhlKT8obD1zLmNhbGwoZSxcImNcIiksYz1zLmNhbGwoZSxcImVcIikpOihsPSEwLGM9ITEpLGQ9e2dldDp0LHNldDpuLGNvbmZpZ3VyYWJsZTpsLGVudW1lcmFibGU6Y30sdT9pKGEodSksZCk6ZH19LFwiLi9ub2RlX21vZHVsZXMvZGFubXUuanMvZGlzdC9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2Rhbm11LmpzL2Rpc3QvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjsoZnVuY3Rpb24oZSl7dmFyIG4sbyxyLGksYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfTt3aW5kb3csaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKG8pe2lmKHRbb10pcmV0dXJuIHRbb10uZXhwb3J0czt2YXIgcj10W29dPXtpOm8sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtvXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyxuKSxyLmw9ITAsci5leHBvcnRzfXJldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LG8pe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDpvfSl9LG4ucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxuLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPW4oZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PSh2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6YShlKSkmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgbz1PYmplY3QuY3JlYXRlKG51bGwpO2lmKG4ucihvKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIHIgaW4gZSluLmQobyxyLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwscikpO3JldHVybiBvfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LFwiYVwiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPVwiXCIsbihuLnM9Mil9KFtmdW5jdGlvbihlLHQsbil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG8scj0obz1uKDIyKSkmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99LGk9e307aS5kb21PYmo9bmV3IHIuZGVmYXVsdCxpLmNyZWF0ZURvbT1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcImRpdlwiLHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOlwiXCIsbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e30sbz1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106XCJcIixyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZSk7cmV0dXJuIHIuY2xhc3NOYW1lPW8sci5pbm5lckhUTUw9dCxPYmplY3Qua2V5cyhuKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbz10LGk9blt0XTtcInZpZGVvXCI9PT1lfHxcImF1ZGlvXCI9PT1lP2kmJnIuc2V0QXR0cmlidXRlKG8saSk6ci5zZXRBdHRyaWJ1dGUobyxpKX0pKSxyfSxpLmhhc0NsYXNzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuY2xhc3NMaXN0P0FycmF5LnByb3RvdHlwZS5zb21lLmNhbGwoZS5jbGFzc0xpc3QsKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09dH0pKTohIWUuY2xhc3NOYW1lLm1hdGNoKG5ldyBSZWdFeHAoXCIoXFxcXHN8XilcIit0K1wiKFxcXFxzfCQpXCIpKX0saS5hZGRDbGFzcz1mdW5jdGlvbihlLHQpe2UuY2xhc3NMaXN0P3QucmVwbGFjZSgvKF5cXHMrfFxccyskKS9nLFwiXCIpLnNwbGl0KC9cXHMrL2cpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QmJmUuY2xhc3NMaXN0LmFkZCh0KX0pKTppLmhhc0NsYXNzKGUsdCl8fChlLmNsYXNzTmFtZSs9XCIgXCIrdCl9LGkucmVtb3ZlQ2xhc3M9ZnVuY3Rpb24oZSx0KXtlLmNsYXNzTGlzdD90LnNwbGl0KC9cXHMrL2cpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2UuY2xhc3NMaXN0LnJlbW92ZSh0KX0pKTppLmhhc0NsYXNzKGUsdCkmJnQuc3BsaXQoL1xccysvZykuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIG49bmV3IFJlZ0V4cChcIihcXFxcc3xeKVwiK3QrXCIoXFxcXHN8JClcIik7ZS5jbGFzc05hbWU9ZS5jbGFzc05hbWUucmVwbGFjZShuLFwiIFwiKX0pKX0saS50b2dnbGVDbGFzcz1mdW5jdGlvbihlLHQpe3Quc3BsaXQoL1xccysvZykuZm9yRWFjaCgoZnVuY3Rpb24odCl7aS5oYXNDbGFzcyhlLHQpP2kucmVtb3ZlQ2xhc3MoZSx0KTppLmFkZENsYXNzKGUsdCl9KSl9LGkuZmluZERvbT1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpkb2N1bWVudCx0PWFyZ3VtZW50c1sxXSxuPXZvaWQgMDt0cnl7bj1lLnF1ZXJ5U2VsZWN0b3IodCl9Y2F0Y2gobyl7dC5zdGFydHNXaXRoKFwiI1wiKSYmKG49ZS5nZXRFbGVtZW50QnlJZCh0LnNsaWNlKDEpKSl9cmV0dXJuIG59LGkuZGVlcENvcHk9ZnVuY3Rpb24oZSx0KXtpZihcIk9iamVjdFwiPT09aS50eXBlT2YodCkmJlwiT2JqZWN0XCI9PT1pLnR5cGVPZihlKSlyZXR1cm4gT2JqZWN0LmtleXModCkuZm9yRWFjaCgoZnVuY3Rpb24obil7XCJPYmplY3RcIiE9PWkudHlwZU9mKHRbbl0pfHx0W25daW5zdGFuY2VvZiBOb2RlP1wiQXJyYXlcIj09PWkudHlwZU9mKHRbbl0pP2Vbbl09XCJBcnJheVwiPT09aS50eXBlT2YoZVtuXSk/ZVtuXS5jb25jYXQodFtuXSk6dFtuXTplW25dPXRbbl06ZVtuXT9pLmRlZXBDb3B5KGVbbl0sdFtuXSk6ZVtuXT10W25dfSkpLGV9LGkudHlwZU9mPWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkubWF0Y2goLyhbXlxccy4qXSspKD89XSQpL2cpWzBdfSxpLmNvcHlEb209ZnVuY3Rpb24oZSl7aWYoZSYmMT09PWUubm9kZVR5cGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZS50YWdOYW1lKTtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlLmF0dHJpYnV0ZXMsKGZ1bmN0aW9uKGUpe3Quc2V0QXR0cmlidXRlKGUubmFtZSxlLnZhbHVlKX0pKSxlLmlubmVySFRNTCYmKHQuaW5uZXJIVE1MPWUuaW5uZXJIVE1MKSx0fXJldHVyblwiXCJ9LGkuZm9ybWF0VGltZT1mdW5jdGlvbihlKXt2YXIgdD1NYXRoLmZsb29yKGUpO3JldHVybiAxZTMqdCsoZS10KX0sdC5kZWZhdWx0PWksZS5leHBvcnRzPXQuZGVmYXVsdH0sZnVuY3Rpb24oZSx0LG4pe3ZhciBvPW4oMTMpKCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlIT09byYmbnVsbCE9PWV9fSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPW4oMyl9LGZ1bmN0aW9uKGUsdCxuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbyxyPShvPW4oNCkpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtuKDI2KSx0LmRlZmF1bHQ9ci5kZWZhdWx0LGUuZXhwb3J0cz10LmRlZmF1bHR9LGZ1bmN0aW9uKGUsdCxuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpLHI9cyhuKDUpKSxpPXMobigyMSkpLGE9cyhuKDApKTtmdW5jdGlvbiBzKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgbD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmNvbmZpZz1hLmRlZmF1bHQuZGVlcENvcHkoe292ZXJsYXA6ITEsYXJlYTp7c3RhcnQ6MCxlbmQ6MX0sbGl2ZTohMSxjb21tZW50czpbXSxkaXJlY3Rpb246XCJyMmxcIn0sdCksdGhpcy5oaWRlQXJyPVtdLCgwLHIuZGVmYXVsdCkodGhpcyk7dmFyIG49dGhpcztpZih0aGlzLmNvbmZpZy5jb21tZW50cy5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmR1cmF0aW9uPWUuZHVyYXRpb248NWUzPzVlMzplLmR1cmF0aW9uLGUubW9kZXx8KGUubW9kZT1cInNjcm9sbFwiKX0pKSwhdGhpcy5jb25maWcuY29udGFpbmVyfHwxIT09dGhpcy5jb25maWcuY29udGFpbmVyLm5vZGVUeXBlKXJldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLFwiY29udGFpbmVyIGlkIGNhbid0IGJlIGVtcHR5XCIpLCExO2lmKHRoaXMuY29udGFpbmVyPXRoaXMuY29uZmlnLmNvbnRhaW5lcix0aGlzLmNvbmZpZy5jb250YWluZXJTdHlsZSl7dmFyIG89dGhpcy5jb25maWcuY29udGFpbmVyU3R5bGU7T2JqZWN0LmtleXMobykuZm9yRWFjaCgoZnVuY3Rpb24oZSl7bi5jb250YWluZXIuc3R5bGVbZV09b1tlXX0pKX10aGlzLmxpdmU9dGhpcy5jb25maWcubGl2ZSx0aGlzLnBsYXllcj10aGlzLmNvbmZpZy5wbGF5ZXIsdGhpcy5kaXJlY3Rpb249dGhpcy5jb25maWcuZGlyZWN0aW9uLGEuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmNvbnRhaW5lcixcImRhbm11XCIpLHRoaXMuYnVsbGV0QnRuPW5ldyBpLmRlZmF1bHQodGhpcyksdGhpcy5lbWl0KFwicmVhZHlcIil9cmV0dXJuIG8oZSxbe2tleTpcInN0YXJ0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmJ1bGxldEJ0bi5tYWluLnN0YXJ0KCl9fSx7a2V5OlwicGF1c2VcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuYnVsbGV0QnRuLm1haW4ucGF1c2UoKX19LHtrZXk6XCJwbGF5XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmJ1bGxldEJ0bi5tYWluLnBsYXkoKX19LHtrZXk6XCJzdG9wXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmJ1bGxldEJ0bi5tYWluLnN0b3AoKX19LHtrZXk6XCJzZW5kQ29tbWVudFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2UmJmUuaWQmJmUuZHVyYXRpb24mJihlLmVsfHxlLnR4dCkmJihlLmR1cmF0aW9uPWUuZHVyYXRpb248NWUzPzVlMzplLmR1cmF0aW9uLHRoaXMuYnVsbGV0QnRuLm1haW4uZGF0YS5wdXNoKGUpKX19LHtrZXk6XCJzZXRDb21tZW50SURcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2UmJnQmJih0aGlzLmJ1bGxldEJ0bi5tYWluLmRhdGEuc29tZSgoZnVuY3Rpb24obil7cmV0dXJuIG4uaWQ9PT1lJiYobi5pZD10LCEwKX0pKSx0aGlzLmJ1bGxldEJ0bi5tYWluLnF1ZXVlLnNvbWUoKGZ1bmN0aW9uKG8pe3JldHVybiBvLmlkPT09ZSYmKG8uaWQ9dCxvLnBhdXNlTW92ZShuKSxvLnN0YXJ0TW92ZShuKSwhMCl9KSkpfX0se2tleTpcInNldENvbW1lbnREdXJhdGlvblwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ZSYmdCYmKHQ9dDw1ZTM/NWUzOnQsdGhpcy5idWxsZXRCdG4ubWFpbi5kYXRhLnNvbWUoKGZ1bmN0aW9uKG4pe3JldHVybiBuLmlkPT09ZSYmKG4uZHVyYXRpb249dCwhMCl9KSksdGhpcy5idWxsZXRCdG4ubWFpbi5xdWV1ZS5zb21lKChmdW5jdGlvbihvKXtyZXR1cm4gby5pZD09PWUmJihvLmR1cmF0aW9uPXQsby5wYXVzZU1vdmUobiksby5zdGFydE1vdmUobiksITApfSkpKX19LHtrZXk6XCJzZXRBbGxEdXJhdGlvblwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwic2Nyb2xsXCIsdD1hcmd1bWVudHNbMV0sbj10aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0JiYodD10PDVlMz81ZTM6dCx0aGlzLmJ1bGxldEJ0bi5tYWluLmRhdGEuZm9yRWFjaCgoZnVuY3Rpb24obil7ZT09PW4ubW9kZSYmKG4uZHVyYXRpb249dCl9KSksdGhpcy5idWxsZXRCdG4ubWFpbi5xdWV1ZS5mb3JFYWNoKChmdW5jdGlvbihvKXtlPT09by5tb2RlJiYoby5kdXJhdGlvbj10LG8ucGF1c2VNb3ZlKG4pLG8uc3RhcnRNb3ZlKG4pKX0pKSl9fSx7a2V5OlwiaGlkZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwic2Nyb2xsXCI7dGhpcy5oaWRlQXJyLmluZGV4T2YoZSk8MCYmdGhpcy5oaWRlQXJyLnB1c2goZSksdGhpcy5idWxsZXRCdG4ubWFpbi5xdWV1ZS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBlPT09dC5tb2RlfHxcImNvbG9yXCI9PT1lJiZ0LmNvbG9yfSkpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJlbW92ZSgpfSkpfX0se2tleTpcInNob3dcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcInNjcm9sbFwiLHQ9dGhpcy5oaWRlQXJyLmluZGV4T2YoZSk7dD4tMSYmdGhpcy5oaWRlQXJyLnNwbGljZSh0LDEpfX0se2tleTpcInNldERpcmVjdGlvblwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwicjJsXCI7dGhpcy5lbWl0KFwiY2hhbmdlRGlyZWN0aW9uXCIsZSl9fV0pLGV9KCk7dC5kZWZhdWx0PWwsZS5leHBvcnRzPXQuZGVmYXVsdH0sZnVuY3Rpb24oZSx0LG4pe3ZhciBvLHIsaSxzLGwsYyx1LGQ9big2KSxwPW4oMjApLGY9RnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LGg9RnVuY3Rpb24ucHJvdG90eXBlLmNhbGwsZz1PYmplY3QuY3JlYXRlLHY9T2JqZWN0LmRlZmluZVByb3BlcnR5LG09T2JqZWN0LmRlZmluZVByb3BlcnRpZXMseT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGI9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwfTtyPWZ1bmN0aW9uKGUsdCl7dmFyIG4scjtyZXR1cm4gcCh0KSxyPXRoaXMsby5jYWxsKHRoaXMsZSxuPWZ1bmN0aW9uKCl7aS5jYWxsKHIsZSxuKSxmLmNhbGwodCx0aGlzLGFyZ3VtZW50cyl9KSxuLl9fZWVPbmNlTGlzdGVuZXJfXz10LHRoaXN9LGw9e29uOm89ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4gcCh0KSx5LmNhbGwodGhpcyxcIl9fZWVfX1wiKT9uPXRoaXMuX19lZV9fOihuPWIudmFsdWU9ZyhudWxsKSx2KHRoaXMsXCJfX2VlX19cIixiKSxiLnZhbHVlPW51bGwpLG5bZV0/XCJvYmplY3RcIj09YShuW2VdKT9uW2VdLnB1c2godCk6bltlXT1bbltlXSx0XTpuW2VdPXQsdGhpc30sb25jZTpyLG9mZjppPWZ1bmN0aW9uKGUsdCl7dmFyIG4sbyxyLGk7aWYocCh0KSwheS5jYWxsKHRoaXMsXCJfX2VlX19cIikpcmV0dXJuIHRoaXM7aWYoIShuPXRoaXMuX19lZV9fKVtlXSlyZXR1cm4gdGhpcztpZihcIm9iamVjdFwiPT1hKG89bltlXSkpZm9yKGk9MDtyPW9baV07KytpKXIhPT10JiZyLl9fZWVPbmNlTGlzdGVuZXJfXyE9PXR8fCgyPT09by5sZW5ndGg/bltlXT1vW2k/MDoxXTpvLnNwbGljZShpLDEpKTtlbHNlIG8hPT10JiZvLl9fZWVPbmNlTGlzdGVuZXJfXyE9PXR8fGRlbGV0ZSBuW2VdO3JldHVybiB0aGlzfSxlbWl0OnM9ZnVuY3Rpb24oZSl7dmFyIHQsbixvLHIsaTtpZih5LmNhbGwodGhpcyxcIl9fZWVfX1wiKSYmKHI9dGhpcy5fX2VlX19bZV0pKWlmKFwib2JqZWN0XCI9PSh2b2lkIDA9PT1yP1widW5kZWZpbmVkXCI6YShyKSkpe2ZvcihuPWFyZ3VtZW50cy5sZW5ndGgsaT1uZXcgQXJyYXkobi0xKSx0PTE7dDxuOysrdClpW3QtMV09YXJndW1lbnRzW3RdO2ZvcihyPXIuc2xpY2UoKSx0PTA7bz1yW3RdOysrdClmLmNhbGwobyx0aGlzLGkpfWVsc2Ugc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMTpoLmNhbGwocix0aGlzKTticmVhaztjYXNlIDI6aC5jYWxsKHIsdGhpcyxhcmd1bWVudHNbMV0pO2JyZWFrO2Nhc2UgMzpoLmNhbGwocix0aGlzLGFyZ3VtZW50c1sxXSxhcmd1bWVudHNbMl0pO2JyZWFrO2RlZmF1bHQ6Zm9yKG49YXJndW1lbnRzLmxlbmd0aCxpPW5ldyBBcnJheShuLTEpLHQ9MTt0PG47Kyt0KWlbdC0xXT1hcmd1bWVudHNbdF07Zi5jYWxsKHIsdGhpcyxpKX19fSxjPXtvbjpkKG8pLG9uY2U6ZChyKSxvZmY6ZChpKSxlbWl0OmQocyl9LHU9bSh7fSxjKSxlLmV4cG9ydHM9dD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9nKHUpOm0oT2JqZWN0KGUpLGMpfSx0Lm1ldGhvZHM9bH0sZnVuY3Rpb24oZSx0LG4pe3ZhciBvPW4oNykscj1uKDE1KSxpPW4oMTYpLGE9bigxNyk7KGUuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBuLGkscyxsLGM7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8Mnx8XCJzdHJpbmdcIiE9dHlwZW9mIGU/KGw9dCx0PWUsZT1udWxsKTpsPWFyZ3VtZW50c1syXSxudWxsPT1lPyhuPXM9ITAsaT0hMSk6KG49YS5jYWxsKGUsXCJjXCIpLGk9YS5jYWxsKGUsXCJlXCIpLHM9YS5jYWxsKGUsXCJ3XCIpKSxjPXt2YWx1ZTp0LGNvbmZpZ3VyYWJsZTpuLGVudW1lcmFibGU6aSx3cml0YWJsZTpzfSxsP28ocihsKSxjKTpjfSkuZ3M9ZnVuY3Rpb24oZSx0LG4pe3ZhciBzLGwsYyx1O3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlPyhjPW4sbj10LHQ9ZSxlPW51bGwpOmM9YXJndW1lbnRzWzNdLG51bGw9PXQ/dD12b2lkIDA6aSh0KT9udWxsPT1uP249dm9pZCAwOmkobil8fChjPW4sbj12b2lkIDApOihjPXQsdD1uPXZvaWQgMCksbnVsbD09ZT8ocz0hMCxsPSExKToocz1hLmNhbGwoZSxcImNcIiksbD1hLmNhbGwoZSxcImVcIikpLHU9e2dldDp0LHNldDpuLGNvbmZpZ3VyYWJsZTpzLGVudW1lcmFibGU6bH0sYz9vKHIoYyksdSk6dX19LGZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9big4KSgpP09iamVjdC5hc3NpZ246big5KX0sZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciBlLHQ9T2JqZWN0LmFzc2lnbjtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYodChlPXtmb286XCJyYXpcIn0se2JhcjpcImR3YVwifSx7dHJ6eTpcInRyenlcIn0pLGUuZm9vK2UuYmFyK2UudHJ6eT09PVwicmF6ZHdhdHJ6eVwiKX19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1uKDEwKSxyPW4oMTQpLGk9TWF0aC5tYXg7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIG4sYSxzLGw9aShhcmd1bWVudHMubGVuZ3RoLDIpO2ZvcihlPU9iamVjdChyKGUpKSxzPWZ1bmN0aW9uKG8pe3RyeXtlW29dPXRbb119Y2F0Y2goZSl7bnx8KG49ZSl9fSxhPTE7YTxsOysrYSl0PWFyZ3VtZW50c1thXSxvKHQpLmZvckVhY2gocyk7aWYodm9pZCAwIT09bil0aHJvdyBuO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1uKDExKSgpP09iamVjdC5rZXlzOm4oMTIpfSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBPYmplY3Qua2V5cyhcInByaW1pdGl2ZVwiKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19fSxmdW5jdGlvbihlLHQsbil7dmFyIG89bigxKSxyPU9iamVjdC5rZXlzO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gcihvKGUpP09iamVjdChlKTplKX19LGZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt9fSxmdW5jdGlvbihlLHQsbil7dmFyIG89bigxKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIW8oZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgbnVsbCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQsbil7dmFyIG89bigxKSxyPUFycmF5LnByb3RvdHlwZS5mb3JFYWNoLGk9T2JqZWN0LmNyZWF0ZTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9aShudWxsKTtyZXR1cm4gci5jYWxsKGFyZ3VtZW50cywoZnVuY3Rpb24oZSl7byhlKSYmZnVuY3Rpb24oZSx0KXt2YXIgbjtmb3IobiBpbiBlKXRbbl09ZVtuXX0oT2JqZWN0KGUpLHQpfSkpLHR9fSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9fSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPW4oMTgpKCk/U3RyaW5nLnByb3RvdHlwZS5jb250YWluczpuKDE5KX0sZnVuY3Rpb24oZSx0LG4pe3ZhciBvPVwicmF6ZHdhdHJ6eVwiO2UuZXhwb3J0cz1mdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG8uY29udGFpbnMmJiEwPT09by5jb250YWlucyhcImR3YVwiKSYmITE9PT1vLmNvbnRhaW5zKFwiZm9vXCIpfX0sZnVuY3Rpb24oZSx0LG4pe3ZhciBvPVN0cmluZy5wcm90b3R5cGUuaW5kZXhPZjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uY2FsbCh0aGlzLGUsYXJndW1lbnRzWzFdKT4tMX19LGZ1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKGUrXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQsbil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKSxyPWEobigwKSksaT1hKG4oMjMpKTtmdW5jdGlvbiBhKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmRhbm11PXQsdGhpcy5tYWluPW5ldyBpLmRlZmF1bHQodCksdC5jb25maWcuZGVmYXVsdE9mZnx8dGhpcy5tYWluLnN0YXJ0KCl9cmV0dXJuIG8oZSxbe2tleTpcImNyZWF0ZVN3aXRjaFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9IShhcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSl8fGFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5zd2l0Y2hCdG49ci5kZWZhdWx0LmNyZWF0ZURvbShcImRrLXN3aXRjaFwiLCc8c3BhbiBjbGFzcz1cInR4dFwiPuW8uTwvc3Bhbj4nLHt9LFwiZGFubXUtc3dpdGNoIFwiKyhlP1wiZGFubXUtc3dpdGNoLWFjdGl2ZVwiOlwiXCIpKSx0aGlzLnN3aXRjaEJ0bn19XSksZX0oKTt0LmRlZmF1bHQ9cyxlLmV4cG9ydHM9dC5kZWZhdWx0fSxmdW5jdGlvbihlLHQsbil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKSxyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHQ9e2luaXRET006ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKX0saW5pdFNpemU6MTB9LHRoaXMuaW5pdCh0KX1yZXR1cm4gbyhlLFt7a2V5OlwiaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuaWRsZUxpc3Q9W10sdGhpcy51c2luZ0xpc3Q9W10sdGhpcy5faWQ9MCx0aGlzLm9wdGlvbnM9ZSx0aGlzLl9leHBhbmQoZS5pbml0U2l6ZSl9fSx7a2V5OlwidXNlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmlkbGVMaXN0Lmxlbmd0aHx8dGhpcy5fZXhwYW5kKDEpO3ZhciBlPXRoaXMuaWRsZUxpc3Quc2hpZnQoKTtyZXR1cm4gdGhpcy51c2luZ0xpc3QucHVzaChlKSxlfX0se2tleTpcInVudXNlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy51c2luZ0xpc3QuaW5kZXhPZihlKTt0PDB8fCh0aGlzLnVzaW5nTGlzdC5zcGxpY2UodCwxKSxlLmlubmVySFRNTD1cIlwiLGUudGV4dGNvbnRlbnQ9XCJcIixlLnN0eWxlPVwiXCIsdGhpcy5pZGxlTGlzdC5wdXNoKGUpKX19LHtrZXk6XCJfZXhwYW5kXCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxlO3QrKyl0aGlzLmlkbGVMaXN0LnB1c2godGhpcy5vcHRpb25zLmluaXRET00odGhpcy5faWQrKykpfX1dKSxlfSgpO3QuZGVmYXVsdD1yLGUuZXhwb3J0cz10LmRlZmF1bHR9LGZ1bmN0aW9uKGUsdCxuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpLHI9cyhuKDI0KSksaT1zKG4oMjUpKSxhPXMobigwKSk7ZnVuY3Rpb24gcyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGw9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5kYW5tdT10LHRoaXMuY29udGFpbmVyPXQuY29udGFpbmVyLHRoaXMuY2hhbm5lbD1uZXcgci5kZWZhdWx0KHQpLHRoaXMuZGF0YT1bXS5jb25jYXQodC5jb25maWcuY29tbWVudHMpLHRoaXMucXVldWU9W10sdGhpcy50aW1lcj1udWxsLHRoaXMucmV0cnlUaW1lcj1udWxsLHRoaXMuaW50ZXJ2YWw9MmUzLHRoaXMuc3RhdHVzPVwiaWRsZVwiLHQub24oXCJidWxsZXRfcmVtb3ZlXCIsdGhpcy51cGRhdGVRdWV1ZS5iaW5kKHRoaXMpKTt2YXIgbj10aGlzO3RoaXMuZGFubXUub24oXCJjaGFuZ2VEaXJlY3Rpb25cIiwoZnVuY3Rpb24oZSl7bi5kYW5tdS5kaXJlY3Rpb249ZX0pKX1yZXR1cm4gbyhlLFt7a2V5OlwidXBkYXRlUXVldWVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3QucXVldWUuc29tZSgoZnVuY3Rpb24obixvKXtyZXR1cm4gbi5pZD09PWUuYnVsbGV0LmlkJiYodC5xdWV1ZS5zcGxpY2UobywxKSwhMCl9KSl9fSx7a2V5OlwiaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dHx8KHQ9dGhpcyksdC5kYXRhLnNvcnQoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuc3RhcnQtdC5zdGFydH0pKSx0LnJldHJ5VGltZXJ8fCh0LnJldHJ5VGltZXI9c2V0SW50ZXJ2YWwoKGZ1bmN0aW9uKCl7dC5yZWFkRGF0YSgpLHQuZGF0YUhhbmRsZSgpfSksdC5pbnRlcnZhbC0xZTMpKX19LHtrZXk6XCJzdGFydFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zdGF0dXM9XCJwbGF5aW5nXCIsdGhpcy5xdWV1ZT1bXSx0aGlzLmNvbnRhaW5lci5pbm5lckhUTUw9XCJcIix0aGlzLmNoYW5uZWwucmVzZXRXaXRoQ2IodGhpcy5pbml0LHRoaXMpfX0se2tleTpcInN0b3BcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc3RhdHVzPVwiY2xvc2VkXCIsY2xlYXJJbnRlcnZhbCh0aGlzLnJldHJ5VGltZXIpLHRoaXMucmV0cnlUaW1lcj1udWxsLHRoaXMuY2hhbm5lbC5yZXNldCgpLHRoaXMucXVldWU9W10sdGhpcy5jb250YWluZXIuaW5uZXJIVE1MPVwiXCJ9fSx7a2V5OlwicGxheVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zdGF0dXM9XCJwbGF5aW5nXCI7dmFyIGU9dGhpcy5jaGFubmVsLmNoYW5uZWxzLHQ9dGhpcy5kYW5tdS5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ZSYmZS5sZW5ndGg+MCYmW1wic2Nyb2xsXCIsXCJ0b3BcIixcImJvdHRvbVwiXS5mb3JFYWNoKChmdW5jdGlvbihuKXtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyllW29dLnF1ZXVlW25dLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UucmVzaXplZHx8KGUuc3RhcnRNb3ZlKHQpLGUucmVzaXplZD0hMCl9KSk7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspZVtyXS5xdWV1ZVtuXS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnJlc2l6ZWQ9ITF9KSl9KSl9fSx7a2V5OlwicGF1c2VcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc3RhdHVzPVwicGF1c2VkXCI7dmFyIGU9dGhpcy5jaGFubmVsLmNoYW5uZWxzLHQ9dGhpcy5kYW5tdS5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ZSYmZS5sZW5ndGg+MCYmW1wic2Nyb2xsXCIsXCJ0b3BcIixcImJvdHRvbVwiXS5mb3JFYWNoKChmdW5jdGlvbihuKXtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyllW29dLnF1ZXVlW25dLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UucGF1c2VNb3ZlKHQpfSkpfSkpfX0se2tleTpcImRhdGFIYW5kbGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7XCJwYXVzZWRcIiE9PXRoaXMuc3RhdHVzJiZcImNsb3NlZFwiIT09dGhpcy5zdGF0dXMmJmUucXVldWUubGVuZ3RoJiZlLnF1ZXVlLmZvckVhY2goKGZ1bmN0aW9uKHQpe1wid2FpdGluZ1wiIT09dC5zdGF0dXMmJlwicGF1c2VkXCIhPT10LnN0YXR1c3x8dC5zdGFydE1vdmUoZS5jaGFubmVsLmNvbnRhaW5lclBvcyl9KSl9fSx7a2V5OlwicmVhZERhdGFcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLmRhbm11LG49MDt0LnBsYXllciYmdC5wbGF5ZXIuY3VycmVudFRpbWUmJihuPWEuZGVmYXVsdC5mb3JtYXRUaW1lKHQucGxheWVyLmN1cnJlbnRUaW1lKSk7dmFyIG89dm9pZCAwLHI9ZS5pbnRlcnZhbCxzPWUuY2hhbm5lbCxsPXZvaWQgMDt0LnBsYXllcj8obD1lLmRhdGEuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4hdC5zdGFydCYmZS5kYW5tdS5oaWRlQXJyLmluZGV4T2YodC5tb2RlKTwwJiYoIXQuY29sb3J8fGUuZGFubXUuaGlkZUFyci5pbmRleE9mKFwiY29sb3JcIik8MCkmJih0LnN0YXJ0PW4pLGUuZGFubXUuaGlkZUFyci5pbmRleE9mKHQubW9kZSk8MCYmKCF0LmNvbG9yfHxlLmRhbm11LmhpZGVBcnIuaW5kZXhPZihcImNvbG9yXCIpPDApJiZ0LnN0YXJ0LXI8PW4mJm48PXQuc3RhcnQrcn0pKSx0LmxpdmUmJihlLmRhdGE9ZS5kYXRhLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3RhcnR8fChlLnN0YXJ0PW4pLGUuc3RhcnQ+bi0zKnJ9KSkpKTpsPWUuZGF0YS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBlLmRhbm11LmhpZGVBcnIuaW5kZXhPZih0Lm1vZGUpPDAmJighdC5jb2xvcnx8ZS5kYW5tdS5oaWRlQXJyLmluZGV4T2YoXCJjb2xvclwiKTwwKX0pKSxsLmxlbmd0aD4wJiZsLmZvckVhY2goKGZ1bmN0aW9uKG4peyhvPW5ldyBpLmRlZmF1bHQodCxuKSkuYXR0YWNoKCkscy5hZGRCdWxsZXQobykucmVzdWx0PyhlLnF1ZXVlLnB1c2gobyksby50b3BJbml0KCkpOm8uZGV0YWNoKCl9KSl9fV0pLGV9KCk7dC5kZWZhdWx0PWwsZS5leHBvcnRzPXQuZGVmYXVsdH0sZnVuY3Rpb24oZSx0LG4pe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgbz10W25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLmtleSxvKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixvKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxvJiZlKHQsbyksdH19KCkscj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmRhbm11PXQsdGhpcy5yZXNldCgpO3ZhciBuPXRoaXM7dGhpcy5kYW5tdS5vbihcImJ1bGxldF9yZW1vdmVcIiwoZnVuY3Rpb24oZSl7bi5yZW1vdmVCdWxsZXQoZS5idWxsZXQpfSkpLHRoaXMuZGlyZWN0aW9uPXQuZGlyZWN0aW9uLHRoaXMuZGFubXUub24oXCJjaGFuZ2VEaXJlY3Rpb25cIiwoZnVuY3Rpb24oZSl7bi5kaXJlY3Rpb249ZX0pKSx0aGlzLmNvbnRhaW5lclBvcz10aGlzLmRhbm11LmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSx0aGlzLmNvbnRhaW5lcldpZHRoPXRoaXMuY29udGFpbmVyUG9zLndpZHRoLHRoaXMuY29udGFpbmVySGVpZ2h0PXRoaXMuY29udGFpbmVyUG9zLmhlaWdodCx0aGlzLmNvbnRhaW5lckxlZnQ9dGhpcy5jb250YWluZXJQb3MubGVmdCx0aGlzLmNvbnRhaW5lclJpZ2h0PXRoaXMuY29udGFpbmVyUG9zLnJpZ2h0LHRoaXMuZGFubXUuYnVsbGV0UmVzaXplVGltZXI9c2V0SW50ZXJ2YWwoKGZ1bmN0aW9uKCl7bi5jb250YWluZXJQb3M9bi5kYW5tdS5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksKE1hdGguYWJzKG4uY29udGFpbmVyUG9zLndpZHRoLW4uY29udGFpbmVyV2lkdGgpPj0yfHxNYXRoLmFicyhuLmNvbnRhaW5lclBvcy5oZWlnaHQtbi5jb250YWluZXJIZWlnaHQpPj0yfHxNYXRoLmFicyhuLmNvbnRhaW5lclBvcy5sZWZ0LW4uY29udGFpbmVyTGVmdCk+PTJ8fE1hdGguYWJzKG4uY29udGFpbmVyUG9zLnJpZ2h0LW4uY29udGFpbmVyUmlnaHQpPj0yKSYmKG4uY29udGFpbmVyV2lkdGg9bi5jb250YWluZXJQb3Mud2lkdGgsbi5jb250YWluZXJIZWlnaHQ9bi5jb250YWluZXJQb3MuaGVpZ2h0LG4uY29udGFpbmVyTGVmdD1uLmNvbnRhaW5lclBvcy5sZWZ0LG4uY29udGFpbmVyUmlnaHQ9bi5jb250YWluZXJQb3MucmlnaHQsbi5yZXNpemUoITApKX0pLDUwKX1yZXR1cm4gbyhlLFt7a2V5OlwicmVzaXplXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdLHQ9dGhpcy5kYW5tdS5jb250YWluZXIsbj10aGlzO3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7bi5kYW5tdS5idWxsZXRCdG4ubWFpbi5kYXRhJiZuLmRhbm11LmJ1bGxldEJ0bi5tYWluLmRhdGEuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5ib29rQ2hhbm5lbElkJiZkZWxldGUgZS5ib29rQ2hhbm5lbElkfSkpO3ZhciBvPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7bi53aWR0aD1vLndpZHRoLG4uaGVpZ2h0PW8uaGVpZ2h0LG4uZGFubXUuY29uZmlnLmFyZWEmJm4uZGFubXUuY29uZmlnLmFyZWEuc3RhcnQ+PTAmJm4uZGFubXUuY29uZmlnLmFyZWEuZW5kPj1uLmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0JiYoXCJiMnRcIj09PW4uZGlyZWN0aW9uP24ud2lkdGg9bi53aWR0aCoobi5kYW5tdS5jb25maWcuYXJlYS5lbmQtbi5kYW5tdS5jb25maWcuYXJlYS5zdGFydCk6bi5oZWlnaHQ9bi5oZWlnaHQqKG4uZGFubXUuY29uZmlnLmFyZWEuZW5kLW4uZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpKSxuLmNvbnRhaW5lcj10O3ZhciByLGk9L21vYmlsZS9naS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpPzEwOjEyO3I9XCJiMnRcIj09PW4uZGlyZWN0aW9uP01hdGguZmxvb3Iobi53aWR0aC9pKTpNYXRoLmZsb29yKG4uaGVpZ2h0L2kpO2Zvcih2YXIgYT1bXSxzPTA7czxyO3MrKylhW3NdPXtpZDpzLHF1ZXVlOntzY3JvbGw6W10sdG9wOltdLGJvdHRvbTpbXX0sb3BlcmF0aW5nOntzY3JvbGw6ITEsdG9wOiExLGJvdHRvbTohMX0sYm9va0lkOnt9fTtpZihuLmNoYW5uZWxzJiZuLmNoYW5uZWxzLmxlbmd0aDw9YS5sZW5ndGgpe2Zvcih2YXIgbD1mdW5jdGlvbih0KXthW3RdPXtpZDp0LHF1ZXVlOntzY3JvbGw6W10sdG9wOltdLGJvdHRvbTpbXX0sb3BlcmF0aW5nOntzY3JvbGw6ITEsdG9wOiExLGJvdHRvbTohMX0sYm9va0lkOnt9fSxbXCJzY3JvbGxcIixcInRvcFwiXS5mb3JFYWNoKChmdW5jdGlvbihvKXtuLmNoYW5uZWxzW3RdLnF1ZXVlW29dLmZvckVhY2goKGZ1bmN0aW9uKHIpe3IuZWwmJihhW3RdLnF1ZXVlW29dLnB1c2gociksci5yZXNpemVkfHwoci5wYXVzZU1vdmUobi5jb250YWluZXJQb3MsZSksci5zdGFydE1vdmUobi5jb250YWluZXJQb3MpLHIucmVzaXplZD0hMCkpfSkpfSkpLG4uY2hhbm5lbHNbdF0ucXVldWUuYm90dG9tLmZvckVhY2goKGZ1bmN0aW9uKG8pe2lmKG8uZWwpe2lmKGFbdCthLmxlbmd0aC1uLmNoYW5uZWxzLmxlbmd0aF0ucXVldWUuYm90dG9tLnB1c2gobyksby5jaGFubmVsX2lkWzBdK28uY2hhbm5lbF9pZFsxXS0xPT09dCl7dmFyIHI9W10uY29uY2F0KG8uY2hhbm5lbF9pZCk7by5jaGFubmVsX2lkPVtyWzBdLW4uY2hhbm5lbHMubGVuZ3RoK2EubGVuZ3RoLHJbMV1dLG8udG9wPW8uY2hhbm5lbF9pZFswXSppLG4uZGFubXUuY29uZmlnLmFyZWEmJm4uZGFubXUuY29uZmlnLmFyZWEuc3RhcnQmJihvLnRvcCs9bi5jb250YWluZXJIZWlnaHQqbi5kYW5tdS5jb25maWcuYXJlYS5zdGFydCksby50b3BJbml0KCl9by5yZXNpemVkfHwoby5wYXVzZU1vdmUobi5jb250YWluZXJQb3MsZSksby5zdGFydE1vdmUobi5jb250YWluZXJQb3MpLG8ucmVzaXplZD0hMCl9fSkpfSxjPTA7YzxuLmNoYW5uZWxzLmxlbmd0aDtjKyspbChjKTtmb3IodmFyIHU9ZnVuY3Rpb24oZSl7W1wic2Nyb2xsXCIsXCJ0b3BcIixcImJvdHRvbVwiXS5mb3JFYWNoKChmdW5jdGlvbih0KXthW2VdLnF1ZXVlW3RdLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UucmVzaXplZD0hMX0pKX0pKX0sZD0wO2Q8YS5sZW5ndGg7ZCsrKXUoZCk7bi5jaGFubmVscz1hLFwiYjJ0XCI9PT1uLmRpcmVjdGlvbj9uLmNoYW5uZWxXaWR0aD1pOm4uY2hhbm5lbEhlaWdodD1pfWVsc2UgaWYobi5jaGFubmVscyYmbi5jaGFubmVscy5sZW5ndGg+YS5sZW5ndGgpe2Zvcih2YXIgcD1mdW5jdGlvbih0KXthW3RdPXtpZDp0LHF1ZXVlOntzY3JvbGw6W10sdG9wOltdLGJvdHRvbTpbXX0sb3BlcmF0aW5nOntzY3JvbGw6ITEsdG9wOiExLGJvdHRvbTohMX0sYm9va0lkOnt9fSxbXCJzY3JvbGxcIixcInRvcFwiLFwiYm90dG9tXCJdLmZvckVhY2goKGZ1bmN0aW9uKG8pe2lmKFwidG9wXCI9PT1vJiZ0Pk1hdGguZmxvb3IoYS5sZW5ndGgvMikpO2Vsc2UgaWYoXCJib3R0b21cIj09PW8mJnQ8PU1hdGguZmxvb3IoYS5sZW5ndGgvMikpO2Vsc2V7dmFyIHI9XCJib3R0b21cIj09PW8/dC1hLmxlbmd0aCtuLmNoYW5uZWxzLmxlbmd0aDp0O24uY2hhbm5lbHNbcl0ucXVldWVbb10uZm9yRWFjaCgoZnVuY3Rpb24ocyxsKXtpZihzLmVsKXtpZihhW3RdLnF1ZXVlW29dLnB1c2gocyksXCJib3R0b21cIj09PW8mJnMuY2hhbm5lbF9pZFswXStzLmNoYW5uZWxfaWRbMV0tMT09PXIpe3ZhciBjPVtdLmNvbmNhdChzLmNoYW5uZWxfaWQpO3MuY2hhbm5lbF9pZD1bY1swXS1uLmNoYW5uZWxzLmxlbmd0aCthLmxlbmd0aCxjWzFdXSxzLnRvcD1zLmNoYW5uZWxfaWRbMF0qaSxuLmRhbm11LmNvbmZpZy5hcmVhJiZuLmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0JiYocy50b3ArPW4uY29udGFpbmVySGVpZ2h0Km4uZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpLHMudG9wSW5pdCgpfXMucmVzaXplZHx8KHMucGF1c2VNb3ZlKG4uY29udGFpbmVyUG9zLGUpLHMuc3RhcnRNb3ZlKG4uY29udGFpbmVyUG9zKSxzLnJlc2l6ZWQ9ITApfW4uY2hhbm5lbHNbcl0ucXVldWVbb10uc3BsaWNlKGwsMSl9KSl9fSkpfSxmPTA7ZjxhLmxlbmd0aDtmKyspcChmKTtmb3IodmFyIGg9ZnVuY3Rpb24oZSl7W1wic2Nyb2xsXCIsXCJ0b3BcIixcImJvdHRvbVwiXS5mb3JFYWNoKChmdW5jdGlvbih0KXtuLmNoYW5uZWxzW2VdLnF1ZXVlW3RdLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UucGF1c2VNb3ZlKG4uY29udGFpbmVyUG9zKSxlLnJlbW92ZSgpfSkpfSkpfSxnPWEubGVuZ3RoO2c8bi5jaGFubmVscy5sZW5ndGg7ZysrKWgoZyk7Zm9yKHZhciB2PWZ1bmN0aW9uKGUpe1tcInNjcm9sbFwiLFwidG9wXCIsXCJib3R0b21cIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7YVtlXS5xdWV1ZVt0XS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnJlc2l6ZWQ9ITF9KSl9KSl9LG09MDttPGEubGVuZ3RoO20rKyl2KG0pO24uY2hhbm5lbHM9YSxcImIydFwiPT09bi5kaXJlY3Rpb24/bi5jaGFubmVsV2lkdGg9aTpuLmNoYW5uZWxIZWlnaHQ9aX19KSwxMCl9fSx7a2V5OlwiYWRkQnVsbGV0XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5kYW5tdSxuPXRoaXMuY2hhbm5lbHMsbz12b2lkIDAscj12b2lkIDAsaT12b2lkIDA7aWYoXCJiMnRcIj09PXRoaXMuZGlyZWN0aW9uPyhyPXRoaXMuY2hhbm5lbFdpZHRoLGk9TWF0aC5jZWlsKGUud2lkdGgvcikpOihvPXRoaXMuY2hhbm5lbEhlaWdodCxpPU1hdGguY2VpbChlLmhlaWdodC9vKSksaT5uLmxlbmd0aClyZXR1cm57cmVzdWx0OiExLG1lc3NhZ2U6XCJleGNlZWQgY2hhbm5lbHMubGVuZ3RoLCBvY2N1cHk9XCIraStcIixjaGFubmVsc1NpemU9XCIrbi5sZW5ndGh9O2Zvcih2YXIgYT0hMCxzPXZvaWQgMCxsPS0xLGM9MCx1PW4ubGVuZ3RoO2M8dTtjKyspaWYobltjXS5xdWV1ZVtlLm1vZGVdLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkPT09ZS5pZH0pKSlyZXR1cm57cmVzdWx0OiExLG1lc3NhZ2U6XCJleHNpdGVkLCBjaGFubmVsT3JkZXI9XCIrYytcIixkYW5tdV9pZD1cIitlLmlkfTtpZihcInNjcm9sbFwiPT09ZS5tb2RlKWZvcih2YXIgZD0wLHA9bi5sZW5ndGgtaTtkPD1wO2QrKyl7YT0hMDtmb3IodmFyIGY9ZDtmPGQraTtmKyspe2lmKChzPW5bZl0pLm9wZXJhdGluZy5zY3JvbGwpe2E9ITE7YnJlYWt9aWYoKHMuYm9va0lkLnNjcm9sbHx8ZS5wcmlvcikmJnMuYm9va0lkLnNjcm9sbCE9PWUuaWQpe2E9ITE7YnJlYWt9cy5vcGVyYXRpbmcuc2Nyb2xsPSEwO3ZhciBoPXMucXVldWUuc2Nyb2xsWzBdO2lmKGgpe3ZhciBnPWguZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7aWYoXCJiMnRcIj09PXRoaXMuZGlyZWN0aW9uKXtpZihnLmJvdHRvbT50aGlzLmNvbnRhaW5lclBvcy5ib3R0b20pe2E9ITEscy5vcGVyYXRpbmcuc2Nyb2xsPSExO2JyZWFrfX1lbHNlIGlmKGcucmlnaHQ+dGhpcy5jb250YWluZXJQb3MucmlnaHQpe2E9ITEscy5vcGVyYXRpbmcuc2Nyb2xsPSExO2JyZWFrfXZhciB2LG09dm9pZCAwLHk9dm9pZCAwLGI9dm9pZCAwLHg9dm9pZCAwO2lmKFwiYjJ0XCI9PT10aGlzLmRpcmVjdGlvbj8oeT0oZy50b3AtdGhpcy5jb250YWluZXJQb3MudG9wK2cuaGVpZ2h0KS8obT0odGhpcy5jb250YWluZXJQb3MuaGVpZ2h0K2cuaGVpZ2h0KS9oLmR1cmF0aW9uKSxiPXRoaXMuY29udGFpbmVyUG9zLmhlaWdodCx4PSh0aGlzLmNvbnRhaW5lclBvcy5oZWlnaHQrZS5oZWlnaHQpL2UuZHVyYXRpb24pOih5PShnLmxlZnQtdGhpcy5jb250YWluZXJQb3MubGVmdCtnLndpZHRoKS8obT0odGhpcy5jb250YWluZXJQb3Mud2lkdGgrZy53aWR0aCkvaC5kdXJhdGlvbiksYj10aGlzLmNvbnRhaW5lclBvcy53aWR0aCx4PSh0aGlzLmNvbnRhaW5lclBvcy53aWR0aCtlLndpZHRoKS9lLmR1cmF0aW9uKSx2PWIveCx0LmNvbmZpZy5iT2Zmc2V0fHwodC5jb25maWcuYk9mZnNldD0wKSxtPHgmJnkrdC5jb25maWcuYk9mZnNldD52KXthPSExLHMub3BlcmF0aW5nLnNjcm9sbD0hMTticmVha319cy5vcGVyYXRpbmcuc2Nyb2xsPSExfWlmKGEpe2w9ZDticmVha319ZWxzZSBpZihcInRvcFwiPT09ZS5tb2RlKWZvcih2YXIgdz0wLF89bi5sZW5ndGgtaTt3PD1fO3crKyl7YT0hMDtmb3IodmFyIGs9dztrPHcraTtrKyspe2lmKGs+TWF0aC5mbG9vcihuLmxlbmd0aC8yKSl7YT0hMTticmVha31pZigocz1uW2tdKS5vcGVyYXRpbmdbZS5tb2RlXSl7YT0hMTticmVha31pZigocy5ib29rSWRbZS5tb2RlXXx8ZS5wcmlvcikmJnMuYm9va0lkW2UubW9kZV0hPT1lLmlkKXthPSExO2JyZWFrfWlmKHMub3BlcmF0aW5nW2UubW9kZV09ITAscy5xdWV1ZVtlLm1vZGVdLmxlbmd0aD4wKXthPSExLHMub3BlcmF0aW5nW2UubW9kZV09ITE7YnJlYWt9cy5vcGVyYXRpbmdbZS5tb2RlXT0hMX1pZihhKXtsPXc7YnJlYWt9fWVsc2UgaWYoXCJib3R0b21cIj09PWUubW9kZSlmb3IodmFyIEU9bi5sZW5ndGgtaTtFPj0wO0UtLSl7YT0hMDtmb3IodmFyIEM9RTtDPEUraTtDKyspe2lmKEM8PU1hdGguZmxvb3Iobi5sZW5ndGgvMikpe2E9ITE7YnJlYWt9aWYoKHM9bltDXSkub3BlcmF0aW5nW2UubW9kZV0pe2E9ITE7YnJlYWt9aWYoKHMuYm9va0lkW2UubW9kZV18fGUucHJpb3IpJiZzLmJvb2tJZFtlLm1vZGVdIT09ZS5pZCl7YT0hMTticmVha31pZihzLm9wZXJhdGluZ1tlLm1vZGVdPSEwLHMucXVldWVbZS5tb2RlXS5sZW5ndGg+MCl7YT0hMSxzLm9wZXJhdGluZ1tlLm1vZGVdPSExO2JyZWFrfXMub3BlcmF0aW5nW2UubW9kZV09ITF9aWYoYSl7bD1FO2JyZWFrfX1pZigtMSE9PWwpe2Zvcih2YXIgUz1sLFA9bCtpO1M8UDtTKyspKHM9bltTXSkub3BlcmF0aW5nW2UubW9kZV09ITAscy5xdWV1ZVtlLm1vZGVdLnVuc2hpZnQoZSksZS5wcmlvciYmZGVsZXRlIHMuYm9va0lkW2UubW9kZV0scy5vcGVyYXRpbmdbZS5tb2RlXT0hMTtyZXR1cm4gZS5wcmlvciYmKGRlbGV0ZSBlLmJvb2tDaGFubmVsSWQsdC5idWxsZXRCdG4ubWFpbi5kYXRhLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkPT09ZS5pZCYmKGRlbGV0ZSB0LmJvb2tDaGFubmVsSWQsITApfSkpKSxlLmNoYW5uZWxfaWQ9W2wsaV0sXCJiMnRcIj09PXRoaXMuZGlyZWN0aW9uPyhlLnRvcD1sKnIsdGhpcy5kYW5tdS5jb25maWcuYXJlYSYmdGhpcy5kYW5tdS5jb25maWcuYXJlYS5zdGFydCYmKGUudG9wKz10aGlzLmNvbnRhaW5lcldpZHRoKnRoaXMuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpKTooZS50b3A9bCpvLHRoaXMuZGFubXUuY29uZmlnLmFyZWEmJnRoaXMuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQmJihlLnRvcCs9dGhpcy5jb250YWluZXJIZWlnaHQqdGhpcy5kYW5tdS5jb25maWcuYXJlYS5zdGFydCkpLHtyZXN1bHQ6ZSxtZXNzYWdlOlwic3VjY2Vzc1wifX1pZihlLnByaW9yKWlmKGUuYm9va0NoYW5uZWxJZCl0LmJ1bGxldEJ0bi5tYWluLmRhdGEuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIHQuaWQ9PT1lLmlkJiYodC5zdGFydCs9MmUzLCEwKX0pKTtlbHNle2w9LTE7Zm9yKHZhciBqPTAsVD1uLmxlbmd0aC1pO2o8PVQ7aisrKXthPSEwO2Zvcih2YXIgTT1qO008aitpO00rKylpZihuW01dLmJvb2tJZFtlLm1vZGVdKXthPSExO2JyZWFrfWlmKGEpe2w9ajticmVha319aWYoLTEhPT1sKXtmb3IodmFyIE89bDtPPGwraTtPKyspbltPXS5ib29rSWRbZS5tb2RlXT1lLmlkO3QuYnVsbGV0QnRuLm1haW4uZGF0YS5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4gdC5pZD09PWUuaWQmJih0LnN0YXJ0Kz0yZTMsdC5ib29rQ2hhbm5lbElkPVtsLGldLCEwKX0pKX19cmV0dXJue3Jlc3VsdDohMSxtZXNzYWdlOlwibm8gc3VycGx1cyB3aWxsIHJpZ2h0XCJ9fX0se2tleTpcInJlbW92ZUJ1bGxldFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLmNoYW5uZWxzLG49ZS5jaGFubmVsX2lkLG89dm9pZCAwLHI9blswXSxpPW5bMF0rblsxXTtyPGk7cisrKWlmKG89dFtyXSl7by5vcGVyYXRpbmdbZS5tb2RlXT0hMDt2YXIgYT0tMTtvLnF1ZXVlW2UubW9kZV0uc29tZSgoZnVuY3Rpb24odCxuKXtyZXR1cm4gdC5pZD09PWUuaWQmJihhPW4sITApfSkpLGE+LTEmJm8ucXVldWVbZS5tb2RlXS5zcGxpY2UoYSwxKSxvLm9wZXJhdGluZ1tlLm1vZGVdPSExfX19LHtrZXk6XCJyZXNldEFyZWFcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuZGFubXUuY29udGFpbmVyLHQ9dGhpcyxuPWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dC53aWR0aD1uLndpZHRoLHQuaGVpZ2h0PW4uaGVpZ2h0LHQuZGFubXUuY29uZmlnLmFyZWEmJnQuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQ+PTAmJnQuZGFubXUuY29uZmlnLmFyZWEuZW5kPj10LmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0JiYoXCJiMnRcIj09PXQuZGlyZWN0aW9uP3Qud2lkdGg9dC53aWR0aCoodC5kYW5tdS5jb25maWcuYXJlYS5lbmQtdC5kYW5tdS5jb25maWcuYXJlYS5zdGFydCk6dC5oZWlnaHQ9dC5oZWlnaHQqKHQuZGFubXUuY29uZmlnLmFyZWEuZW5kLXQuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpKSx0LmNvbnRhaW5lcj1lO3ZhciBvLHI9L21vYmlsZS9naS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpPzEwOjEyO289XCJiMnRcIj09PXQuZGlyZWN0aW9uP01hdGguZmxvb3IodC53aWR0aC9yKTpNYXRoLmZsb29yKHQuaGVpZ2h0L3IpO2Zvcih2YXIgaT1bXSxhPTA7YTxvO2ErKylpW2FdPXtpZDphLHF1ZXVlOntzY3JvbGw6W10sdG9wOltdLGJvdHRvbTpbXX0sb3BlcmF0aW5nOntzY3JvbGw6ITEsdG9wOiExLGJvdHRvbTohMX0sYm9va0lkOnt9fTtpZih0LmNoYW5uZWxzJiZ0LmNoYW5uZWxzLmxlbmd0aDw9aS5sZW5ndGgpe2Zvcih2YXIgcz1mdW5jdGlvbihlKXtpW2VdPXtpZDplLHF1ZXVlOntzY3JvbGw6W10sdG9wOltdLGJvdHRvbTpbXX0sb3BlcmF0aW5nOntzY3JvbGw6ITEsdG9wOiExLGJvdHRvbTohMX0sYm9va0lkOnt9fSxbXCJzY3JvbGxcIixcInRvcFwiXS5mb3JFYWNoKChmdW5jdGlvbihuKXt0LmNoYW5uZWxzW2VdLnF1ZXVlW25dLmZvckVhY2goKGZ1bmN0aW9uKG8pe28uZWwmJihpW2VdLnF1ZXVlW25dLnB1c2gobyksby5yZXNpemVkfHwoby5wYXVzZU1vdmUodC5jb250YWluZXJQb3MsITEpLG8uc3RhcnRNb3ZlKHQuY29udGFpbmVyUG9zKSxvLnJlc2l6ZWQ9ITApKX0pKX0pKSx0LmNoYW5uZWxzW2VdLnF1ZXVlLmJvdHRvbS5mb3JFYWNoKChmdW5jdGlvbihuKXtpZihuLmVsKXtpZihpW2UraS5sZW5ndGgtdC5jaGFubmVscy5sZW5ndGhdLnF1ZXVlLmJvdHRvbS5wdXNoKG4pLG4uY2hhbm5lbF9pZFswXStuLmNoYW5uZWxfaWRbMV0tMT09PWUpe3ZhciBvPVtdLmNvbmNhdChuLmNoYW5uZWxfaWQpO24uY2hhbm5lbF9pZD1bb1swXS10LmNoYW5uZWxzLmxlbmd0aCtpLmxlbmd0aCxvWzFdXSxuLnRvcD1uLmNoYW5uZWxfaWRbMF0qcix0LmRhbm11LmNvbmZpZy5hcmVhJiZ0LmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0JiYobi50b3ArPXQuY29udGFpbmVySGVpZ2h0KnQuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpLG4udG9wSW5pdCgpfW4ucmVzaXplZHx8KG4ucGF1c2VNb3ZlKHQuY29udGFpbmVyUG9zLCExKSxuLnN0YXJ0TW92ZSh0LmNvbnRhaW5lclBvcyksbi5yZXNpemVkPSEwKX19KSl9LGw9MDtsPHQuY2hhbm5lbHMubGVuZ3RoO2wrKylzKGwpO2Zvcih2YXIgYz1mdW5jdGlvbihlKXtbXCJzY3JvbGxcIixcInRvcFwiLFwiYm90dG9tXCJdLmZvckVhY2goKGZ1bmN0aW9uKHQpe2lbZV0ucXVldWVbdF0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5yZXNpemVkPSExfSkpfSkpfSx1PTA7dTxpLmxlbmd0aDt1KyspYyh1KTt0LmNoYW5uZWxzPWksXCJiMnRcIj09PXQuZGlyZWN0aW9uP3QuY2hhbm5lbFdpZHRoPXI6dC5jaGFubmVsSGVpZ2h0PXJ9ZWxzZSBpZih0LmNoYW5uZWxzJiZ0LmNoYW5uZWxzLmxlbmd0aD5pLmxlbmd0aCl7Zm9yKHZhciBkPWZ1bmN0aW9uKGUpe2lbZV09e2lkOmUscXVldWU6e3Njcm9sbDpbXSx0b3A6W10sYm90dG9tOltdfSxvcGVyYXRpbmc6e3Njcm9sbDohMSx0b3A6ITEsYm90dG9tOiExfSxib29rSWQ6e319LFtcInNjcm9sbFwiLFwidG9wXCIsXCJib3R0b21cIl0uZm9yRWFjaCgoZnVuY3Rpb24obil7aWYoXCJ0b3BcIj09PW4mJmU+TWF0aC5mbG9vcihpLmxlbmd0aC8yKSk7ZWxzZSBpZihcImJvdHRvbVwiPT09biYmZTw9TWF0aC5mbG9vcihpLmxlbmd0aC8yKSk7ZWxzZXt2YXIgbz1cImJvdHRvbVwiPT09bj9lLWkubGVuZ3RoK3QuY2hhbm5lbHMubGVuZ3RoOmU7dC5jaGFubmVsc1tvXS5xdWV1ZVtuXS5mb3JFYWNoKChmdW5jdGlvbihhLHMpe2lmKGEuZWwpe2lmKGlbZV0ucXVldWVbbl0ucHVzaChhKSxcImJvdHRvbVwiPT09biYmYS5jaGFubmVsX2lkWzBdK2EuY2hhbm5lbF9pZFsxXS0xPT09byl7dmFyIGw9W10uY29uY2F0KGEuY2hhbm5lbF9pZCk7YS5jaGFubmVsX2lkPVtsWzBdLXQuY2hhbm5lbHMubGVuZ3RoK2kubGVuZ3RoLGxbMV1dLGEudG9wPWEuY2hhbm5lbF9pZFswXSpyLHQuZGFubXUuY29uZmlnLmFyZWEmJnQuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQmJihhLnRvcCs9dC5jb250YWluZXJIZWlnaHQqdC5kYW5tdS5jb25maWcuYXJlYS5zdGFydCksYS50b3BJbml0KCl9YS5yZXNpemVkfHwoYS5wYXVzZU1vdmUodC5jb250YWluZXJQb3MsITEpLGEuc3RhcnRNb3ZlKHQuY29udGFpbmVyUG9zKSxhLnJlc2l6ZWQ9ITApfXQuY2hhbm5lbHNbb10ucXVldWVbbl0uc3BsaWNlKHMsMSl9KSl9fSkpfSxwPTA7cDxpLmxlbmd0aDtwKyspZChwKTtmb3IodmFyIGY9ZnVuY3Rpb24oZSl7W1wic2Nyb2xsXCIsXCJ0b3BcIixcImJvdHRvbVwiXS5mb3JFYWNoKChmdW5jdGlvbih0KXtpW2VdLnF1ZXVlW3RdLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UucmVzaXplZD0hMX0pKX0pKX0saD0wO2g8aS5sZW5ndGg7aCsrKWYoaCk7dC5jaGFubmVscz1pLFwiYjJ0XCI9PT10LmRpcmVjdGlvbj90LmNoYW5uZWxXaWR0aD1yOnQuY2hhbm5lbEhlaWdodD1yfX19LHtrZXk6XCJyZXNldFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5kYW5tdS5jb250YWluZXIsdD10aGlzO3QuY2hhbm5lbHMmJnQuY2hhbm5lbHMubGVuZ3RoPjAmJltcInNjcm9sbFwiLFwidG9wXCIsXCJib3R0b21cIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7Zm9yKHZhciBuPTA7bjx0LmNoYW5uZWxzLmxlbmd0aDtuKyspdC5jaGFubmVsc1tuXS5xdWV1ZVtlXS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnBhdXNlTW92ZSh0LmNvbnRhaW5lclBvcyksZS5yZW1vdmUoKX0pKX0pKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe3ZhciBuPWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dC53aWR0aD1uLndpZHRoLHQuaGVpZ2h0PW4uaGVpZ2h0LHQuZGFubXUuY29uZmlnLmFyZWEmJnQuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQ+PTAmJnQuZGFubXUuY29uZmlnLmFyZWEuZW5kPj10LmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0JiYoXCJiMnRcIj09PXQuZGlyZWN0aW9uP3Qud2lkdGg9dC53aWR0aCoodC5kYW5tdS5jb25maWcuYXJlYS5lbmQtdC5kYW5tdS5jb25maWcuYXJlYS5zdGFydCk6dC5oZWlnaHQ9dC5oZWlnaHQqKHQuZGFubXUuY29uZmlnLmFyZWEuZW5kLXQuZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpKSx0LmNvbnRhaW5lcj1lO3ZhciBvLHI9L21vYmlsZS9naS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpPzEwOjEyO289XCJiMnRcIj09PXQuZGlyZWN0aW9uP01hdGguZmxvb3IodC53aWR0aC9yKTpNYXRoLmZsb29yKHQuaGVpZ2h0L3IpO2Zvcih2YXIgaT1bXSxhPTA7YTxvO2ErKylpW2FdPXtpZDphLHF1ZXVlOntzY3JvbGw6W10sdG9wOltdLGJvdHRvbTpbXX0sb3BlcmF0aW5nOntzY3JvbGw6ITEsdG9wOiExLGJvdHRvbTohMX0sYm9va0lkOnt9fTt0LmNoYW5uZWxzPWksXCJiMnRcIj09PXQuZGlyZWN0aW9uP3QuY2hhbm5lbFdpZHRoPXI6dC5jaGFubmVsSGVpZ2h0PXJ9KSwyMDApfX0se2tleTpcInJlc2V0V2l0aENiXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmRhbm11LmNvbnRhaW5lcixvPXRoaXM7by5jaGFubmVscyYmby5jaGFubmVscy5sZW5ndGg+MCYmW1wic2Nyb2xsXCIsXCJ0b3BcIixcImJvdHRvbVwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PG8uY2hhbm5lbHMubGVuZ3RoO3QrKylvLmNoYW5uZWxzW3RdLnF1ZXVlW2VdLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UucGF1c2VNb3ZlKG8uY29udGFpbmVyUG9zKSxlLnJlbW92ZSgpfSkpfSkpO3ZhciByPW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7by53aWR0aD1yLndpZHRoLG8uaGVpZ2h0PXIuaGVpZ2h0LG8uZGFubXUuY29uZmlnLmFyZWEmJm8uZGFubXUuY29uZmlnLmFyZWEuc3RhcnQ+PTAmJm8uZGFubXUuY29uZmlnLmFyZWEuZW5kPj1vLmRhbm11LmNvbmZpZy5hcmVhLnN0YXJ0JiYoXCJiMnRcIj09PW8uZGlyZWN0aW9uP28ud2lkdGg9by53aWR0aCooby5kYW5tdS5jb25maWcuYXJlYS5lbmQtby5kYW5tdS5jb25maWcuYXJlYS5zdGFydCk6by5oZWlnaHQ9by5oZWlnaHQqKG8uZGFubXUuY29uZmlnLmFyZWEuZW5kLW8uZGFubXUuY29uZmlnLmFyZWEuc3RhcnQpKSxvLmNvbnRhaW5lcj1uO3ZhciBpLGE9L21vYmlsZS9naS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpPzEwOjEyO2k9XCJiMnRcIj09PW8uZGlyZWN0aW9uP01hdGguZmxvb3Ioby53aWR0aC9hKTpNYXRoLmZsb29yKG8uaGVpZ2h0L2EpO2Zvcih2YXIgcz1bXSxsPTA7bDxpO2wrKylzW2xdPXtpZDpsLHF1ZXVlOntzY3JvbGw6W10sdG9wOltdLGJvdHRvbTpbXX0sb3BlcmF0aW5nOntzY3JvbGw6ITEsdG9wOiExLGJvdHRvbTohMX0sYm9va0lkOnt9fTtvLmNoYW5uZWxzPXMsby5jaGFubmVsSGVpZ2h0PWEsZSYmZSghMCx0KX19XSksZX0oKTt0LmRlZmF1bHQ9cixlLmV4cG9ydHM9dC5kZWZhdWx0fSxmdW5jdGlvbihlLHQsbil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG8scj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpLGk9KG89bigwKSkmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99LGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbil7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLmRhbm11PXQsdGhpcy5kdXJhdGlvbj1uLmR1cmF0aW9uLHRoaXMuaWQ9bi5pZCx0aGlzLmNvbnRhaW5lcj10LmNvbnRhaW5lcix0aGlzLnN0YXJ0PW4uc3RhcnQsdGhpcy5wcmlvcj1uLnByaW9yLHRoaXMuY29sb3I9bi5jb2xvcix0aGlzLmJvb2tDaGFubmVsSWQ9bi5ib29rQ2hhbm5lbElkLHRoaXMuZGlyZWN0aW9uPXQuZGlyZWN0aW9uO3ZhciBvPXRoaXM7dGhpcy5kYW5tdS5vbihcImNoYW5nZURpcmVjdGlvblwiLChmdW5jdGlvbihlKXtvLmRpcmVjdGlvbj1lfSkpO3ZhciByPXZvaWQgMDtpZih0aGlzLmRvbU9iaj1pLmRlZmF1bHQuZG9tT2JqLG4uZWwmJjE9PT1uLmVsLm5vZGVUeXBlKShyPXRoaXMuZG9tT2JqLnVzZSgpKS5hcHBlbmRDaGlsZChpLmRlZmF1bHQuY29weURvbShuLmVsKSk7ZWxzZSBpZigocj10aGlzLmRvbU9iai51c2UoKSkudGV4dENvbnRlbnQ9bi50eHQsbi5zdHlsZSl7dmFyIGE9bi5zdHlsZTtPYmplY3Qua2V5cyhhKS5mb3JFYWNoKChmdW5jdGlvbihlKXtyLnN0eWxlW2VdPWFbZV19KSl9XCJ0b3BcIj09PW4ubW9kZXx8XCJib3R0b21cIj09PW4ubW9kZT90aGlzLm1vZGU9bi5tb2RlOnRoaXMubW9kZT1cInNjcm9sbFwiLHRoaXMuZWw9cix0aGlzLnN0YXR1cz1cIndhaXRpbmdcIjt2YXIgcz10aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0aGlzLmVsLnN0eWxlLmxlZnQ9cy53aWR0aCtcInB4XCJ9cmV0dXJuIHIoZSxbe2tleTpcImF0dGFjaFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5lbCksdGhpcy5lbFBvcz10aGlzLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFwiYjJ0XCI9PT10aGlzLmRpcmVjdGlvbj8odGhpcy53aWR0aD10aGlzLmVsUG9zLmhlaWdodCx0aGlzLmhlaWdodD10aGlzLmVsUG9zLndpZHRoKToodGhpcy53aWR0aD10aGlzLmVsUG9zLndpZHRoLHRoaXMuaGVpZ2h0PXRoaXMuZWxQb3MuaGVpZ2h0KX19LHtrZXk6XCJkZXRhY2hcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuY29udGFpbmVyJiZ0aGlzLmVsJiYodGhpcy5kb21PYmoudW51c2UodGhpcy5lbCksdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5lbCkpO3ZhciBlPXRoaXM7dGhpcy5kYW5tdS5vZmYoXCJjaGFuZ2VEaXJlY3Rpb25cIiwoZnVuY3Rpb24odCl7ZS5kaXJlY3Rpb249dH0pKSx0aGlzLmVsPW51bGx9fSx7a2V5OlwidG9wSW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoXCJiMnRcIj09PXRoaXMuZGlyZWN0aW9uKXt2YXIgZT10aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0aGlzLmVsLnN0eWxlLnRyYW5zZm9ybU9yaWdpbj1cImxlZnQgdG9wXCIsdGhpcy5lbC5zdHlsZS50cmFuc2Zvcm09XCJ0cmFuc2xhdGVYKC1cIit0aGlzLnRvcCtcInB4KSB0cmFuc2xhdGVZKFwiK2UuaGVpZ2h0K1wicHgpIHRyYW5zbGF0ZVooMHB4KSByb3RhdGUoOTBkZWcpXCIsdGhpcy5lbC5zdHlsZS50cmFuc2l0aW9uPVwidHJhbnNmb3JtIDBzIGxpbmVhciAwc1wifWVsc2UgdGhpcy5lbC5zdHlsZS50b3A9dGhpcy50b3ArXCJweFwifX0se2tleTpcInBhdXNlTW92ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV07aWYoXCJwYXVzZWRcIiE9PXRoaXMuc3RhdHVzJiYodGhpcy5zdGF0dXM9XCJwYXVzZWRcIixjbGVhclRpbWVvdXQodGhpcy5yZW1vdmVUaW1lciksdGhpcy5lbCkpaWYodGhpcy5lbC5zdHlsZS53aWxsQ2hhbmdlPVwiYXV0b1wiLFwic2Nyb2xsXCI9PT10aGlzLm1vZGUpe2lmKHQpe3ZhciBuPSgobmV3IERhdGUpLmdldFRpbWUoKS10aGlzLm1vdmVUaW1lKS8xZTMqdGhpcy5tb3ZlVixvPTA7bz10aGlzLm1vdmVNb3JlUy1uPj0wP1wiYjJ0XCI9PT10aGlzLmRpcmVjdGlvbj8odGhpcy5tb3ZlTW9yZVMtbikvdGhpcy5tb3ZlQ29udGFpbmVySGVpZ2h0KmUuaGVpZ2h0Oih0aGlzLm1vdmVNb3JlUy1uKS90aGlzLm1vdmVDb250YWluZXJXaWR0aCplLndpZHRoOnRoaXMubW92ZU1vcmVTLW4sXCJiMnRcIj09PXRoaXMuZGlyZWN0aW9uP3RoaXMuZWwuc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlWCgtXCIrdGhpcy50b3ArXCJweCkgdHJhbnNsYXRlWShcIitvK1wicHgpIHRyYW5zbGF0ZVooMHB4KSByb3RhdGUoOTBkZWcpXCI6dGhpcy5lbC5zdHlsZS5sZWZ0PW8rXCJweFwifWVsc2VcImIydFwiPT09dGhpcy5kaXJlY3Rpb24/dGhpcy5lbC5zdHlsZS50cmFuc2Zvcm09XCJ0cmFuc2xhdGVYKC1cIit0aGlzLnRvcCtcInB4KSB0cmFuc2xhdGVZKFwiKyh0aGlzLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcC1lLnRvcCkrXCJweCkgdHJhbnNsYXRlWigwcHgpIHJvdGF0ZSg5MGRlZylcIjp0aGlzLmVsLnN0eWxlLmxlZnQ9dGhpcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LWUubGVmdCtcInB4XCI7XCJiMnRcIj09PXRoaXMuZGlyZWN0aW9uP3RoaXMuZWwuc3R5bGUudHJhbnNpdGlvbj1cInRyYW5zZm9ybSAwcyBsaW5lYXIgMHNcIjoodGhpcy5lbC5zdHlsZS50cmFuc2Zvcm09XCJ0cmFuc2xhdGVYKDBweCkgdHJhbnNsYXRlWSgwcHgpIHRyYW5zbGF0ZVooMHB4KVwiLHRoaXMuZWwuc3R5bGUudHJhbnNpdGlvbj1cInRyYW5zZm9ybSAwcyBsaW5lYXIgMHNcIil9ZWxzZSB0aGlzLnBhc3REdXJhdGlvbiYmdGhpcy5zdGFydFRpbWU/dGhpcy5wYXN0RHVyYXRpb249dGhpcy5wYXN0RHVyYXRpb24rKG5ldyBEYXRlKS5nZXRUaW1lKCktdGhpcy5zdGFydFRpbWU6dGhpcy5wYXN0RHVyYXRpb249MX19LHtrZXk6XCJzdGFydE1vdmVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKHRoaXMuZWwmJlwic3RhcnRcIiE9PXRoaXMuc3RhdHVzKWlmKHRoaXMuc3RhdHVzPVwic3RhcnRcIix0aGlzLmVsLnN0eWxlLndpbGxDaGFuZ2U9XCJ0cmFuc2Zvcm1cIixcInNjcm9sbFwiPT09dGhpcy5tb2RlKWlmKFwiYjJ0XCI9PT10aGlzLmRpcmVjdGlvbil7dGhpcy5tb3ZlVj0oZS5oZWlnaHQrdGhpcy5oZWlnaHQpL3RoaXMuZHVyYXRpb24qMWUzO3ZhciBuPSh0LmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbS1lLnRvcCkvdGhpcy5tb3ZlVjt0aGlzLmVsLnN0eWxlLnRyYW5zaXRpb249XCJ0cmFuc2Zvcm0gXCIrbitcInMgbGluZWFyIDBzXCIsc2V0VGltZW91dCgoZnVuY3Rpb24oKXt0LmVsJiYodC5lbC5zdHlsZS50cmFuc2Zvcm09XCJ0cmFuc2xhdGVYKC1cIit0LnRvcCtcInB4KSB0cmFuc2xhdGVZKC1cIit0LmhlaWdodCtcInB4KSB0cmFuc2xhdGVaKDBweCkgcm90YXRlKDkwZGVnKVwiLHQubW92ZVRpbWU9KG5ldyBEYXRlKS5nZXRUaW1lKCksdC5tb3ZlTW9yZVM9dC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AtZS50b3AsdC5tb3ZlQ29udGFpbmVySGVpZ2h0PWUuaGVpZ2h0LHQucmVtb3ZlVGltZXI9c2V0VGltZW91dChpLDFlMypuKSl9KSwyMCl9ZWxzZXt0aGlzLm1vdmVWPShlLndpZHRoK3RoaXMud2lkdGgpL3RoaXMuZHVyYXRpb24qMWUzO3ZhciBvPSh0LmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0LWUubGVmdCkvdGhpcy5tb3ZlVjt0aGlzLmVsLnN0eWxlLnRyYW5zaXRpb249XCJ0cmFuc2Zvcm0gXCIrbytcInMgbGluZWFyIDBzXCIsc2V0VGltZW91dCgoZnVuY3Rpb24oKXt0LmVsJiYodC5lbC5zdHlsZS50cmFuc2Zvcm09XCJ0cmFuc2xhdGVYKC1cIisodC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodC1lLmxlZnQpK1wicHgpIHRyYW5zbGF0ZVkoMHB4KSB0cmFuc2xhdGVaKDBweClcIix0Lm1vdmVUaW1lPShuZXcgRGF0ZSkuZ2V0VGltZSgpLHQubW92ZU1vcmVTPXQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdC1lLmxlZnQsdC5tb3ZlQ29udGFpbmVyV2lkdGg9ZS53aWR0aCx0LnJlbW92ZVRpbWVyPXNldFRpbWVvdXQoaSwxZTMqbykpfSksMjApfWVsc2V7dGhpcy5lbC5zdHlsZS5sZWZ0PVwiNTAlXCIsdGhpcy5lbC5zdHlsZS5tYXJnaW49XCIwIDAgMCAtXCIrdGhpcy53aWR0aC8yK1wicHhcIix0aGlzLnBhc3REdXJhdGlvbnx8KHRoaXMucGFzdER1cmF0aW9uPTEpO3ZhciByPXRoaXMuZHVyYXRpb24+PXRoaXMucGFzdER1cmF0aW9uP3RoaXMuZHVyYXRpb24tdGhpcy5wYXN0RHVyYXRpb246MDt0aGlzLnJlbW92ZVRpbWVyPXNldFRpbWVvdXQoaSxyKSx0aGlzLnN0YXJ0VGltZT0obmV3IERhdGUpLmdldFRpbWUoKX1mdW5jdGlvbiBpKCl7aWYodC5lbClpZihcInNjcm9sbFwiPT09dC5tb2RlKXt2YXIgZT10LmRhbm11LmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPXQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XCJiMnRcIj09PXQuZGlyZWN0aW9uP24mJm4uYm90dG9tPD1lLnRvcCsxMDA/KHQuc3RhdHVzPVwiZW5kXCIsdC5yZW1vdmUoKSk6KHQucGF1c2VNb3ZlKGUpLHQuc3RhcnRNb3ZlKGUpKTpuJiZuLnJpZ2h0PD1lLmxlZnQrMTAwPyh0LnN0YXR1cz1cImVuZFwiLHQucmVtb3ZlKCkpOih0LnBhdXNlTW92ZShlKSx0LnN0YXJ0TW92ZShlKSl9ZWxzZSB0LnN0YXR1cz1cImVuZFwiLHQucmVtb3ZlKCl9fX0se2tleTpcInJlbW92ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLnJlbW92ZVRpbWVyJiZjbGVhclRpbWVvdXQodGhpcy5yZW1vdmVUaW1lciksZS5lbCYmZS5lbC5wYXJlbnROb2RlJiYoZS5lbC5zdHlsZS53aWxsQ2hhbmdlPVwiYXV0b1wiLHRoaXMuZGFubXUub2ZmKFwiY2hhbmdlRGlyZWN0aW9uXCIsKGZ1bmN0aW9uKHQpe2UuZGlyZWN0aW9uPXR9KSksdGhpcy5kb21PYmoudW51c2UoZS5lbCksZS5lbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUuZWwpLGUuZWw9bnVsbCxlLmRhbm11LmVtaXQoXCJidWxsZXRfcmVtb3ZlXCIse2J1bGxldDplfSkpfX1dKSxlfSgpO3QuZGVmYXVsdD1hLGUuZXhwb3J0cz10LmRlZmF1bHR9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1uKDI3KTtcInN0cmluZ1wiPT10eXBlb2YgbyYmKG89W1tlLmksbyxcIlwiXV0pLG4oMjkpKG8se2htcjohMCx0cmFuc2Zvcm06dm9pZCAwLGluc2VydEludG86dm9pZCAwfSksby5sb2NhbHMmJihlLmV4cG9ydHM9by5sb2NhbHMpfSxmdW5jdGlvbihlLHQsbil7KGUuZXhwb3J0cz1uKDI4KSghMSkpLnB1c2goW2UuaSxcIi5kYW5tdXtvdmVyZmxvdzpoaWRkZW47LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lfS5kYW5tdT4qe3Bvc2l0aW9uOmFic29sdXRlO3doaXRlLXNwYWNlOm5vd3JhcH0uZGFubXUtc3dpdGNoe3dpZHRoOjMycHg7aGVpZ2h0OjIwcHg7Ym9yZGVyLXJhZGl1czoxMDBweDtiYWNrZ3JvdW5kLWNvbG9yOiNjY2M7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O291dGxpbmU6bm9uZTtjdXJzb3I6cG9pbnRlcjtwb3NpdGlvbjpyZWxhdGl2ZTt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW46MTBweCBhdXRvfS5kYW5tdS1zd2l0Y2guZGFubXUtc3dpdGNoLWFjdGl2ZXtwYWRkaW5nLWxlZnQ6MTJweDtiYWNrZ3JvdW5kLWNvbG9yOiNmODU5NTl9LmRhbm11LXN3aXRjaCBzcGFuLnR4dHt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2xpbmUtaGVpZ2h0OjIwcHg7dGV4dC1hbGlnbjpjZW50ZXI7ZGlzcGxheTpibG9jaztib3JkZXItcmFkaXVzOjEwMHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZmZmZjstd2Via2l0LWJveC1zaGFkb3c6LTJweCAwIDAgMCByZ2JhKDAsIDAsIDAsIC4wNCk7Ym94LXNoYWRvdzotMnB4IDAgMCAwIHJnYmEoMCwgMCwgMCwgLjA0KTtmb250LWZhbWlseTpQaW5nRmFuZ1NDO2ZvbnQtc2l6ZToxMHB4O2ZvbnQtd2VpZ2h0OjUwMDtjb2xvcjojZjQ0MzM2fVxcblwiLFwiXCJdKX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107cmV0dXJuIHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoKGZ1bmN0aW9uKHQpe3ZhciBuPWZ1bmN0aW9uKGUsdCl7dmFyIG4sbz1lWzFdfHxcIlwiLHI9ZVszXTtpZighcilyZXR1cm4gbztpZih0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hKXt2YXIgaT0obj1yLFwiLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KG4pKSkpK1wiICovXCIpLGE9ci5zb3VyY2VzLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuXCIvKiMgc291cmNlVVJMPVwiK3Iuc291cmNlUm9vdCtlK1wiICovXCJ9KSk7cmV0dXJuW29dLmNvbmNhdChhKS5jb25jYXQoW2ldKS5qb2luKFwiXFxuXCIpfXJldHVybltvXS5qb2luKFwiXFxuXCIpfSh0LGUpO3JldHVybiB0WzJdP1wiQG1lZGlhIFwiK3RbMl0rXCJ7XCIrbitcIn1cIjpufSkpLmpvaW4oXCJcIil9LHQuaT1mdW5jdGlvbihlLG4pe1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1bW251bGwsZSxcIlwiXV0pO2Zvcih2YXIgbz17fSxyPTA7cjx0aGlzLmxlbmd0aDtyKyspe3ZhciBpPXRoaXNbcl1bMF07XCJudW1iZXJcIj09dHlwZW9mIGkmJihvW2ldPSEwKX1mb3Iocj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgYT1lW3JdO1wibnVtYmVyXCI9PXR5cGVvZiBhWzBdJiZvW2FbMF1dfHwobiYmIWFbMl0/YVsyXT1uOm4mJihhWzJdPVwiKFwiK2FbMl0rXCIpIGFuZCAoXCIrbitcIilcIiksdC5wdXNoKGEpKX19LHR9fSxmdW5jdGlvbihlLHQsbil7dmFyIG8scixpPXt9LHM9KG89ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93JiZkb2N1bWVudCYmZG9jdW1lbnQuYWxsJiYhd2luZG93LmF0b2J9LGZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PXImJihyPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpKSxyfSksbD1mdW5jdGlvbihlKXt2YXIgdD17fTtyZXR1cm4gZnVuY3Rpb24oZSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZSlyZXR1cm4gZSgpO2lmKHZvaWQgMD09PXRbZV0pe3ZhciBuPWZ1bmN0aW9uKGUpe3JldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpfS5jYWxsKHRoaXMsZSk7aWYod2luZG93LkhUTUxJRnJhbWVFbGVtZW50JiZuIGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KXRyeXtuPW4uY29udGVudERvY3VtZW50LmhlYWR9Y2F0Y2goZSl7bj1udWxsfXRbZV09bn1yZXR1cm4gdFtlXX19KCksYz1udWxsLHU9MCxkPVtdLHA9bigzMCk7ZnVuY3Rpb24gZihlLHQpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW25dLHI9aVtvLmlkXTtpZihyKXtyLnJlZnMrKztmb3IodmFyIGE9MDthPHIucGFydHMubGVuZ3RoO2ErKylyLnBhcnRzW2FdKG8ucGFydHNbYV0pO2Zvcig7YTxvLnBhcnRzLmxlbmd0aDthKyspci5wYXJ0cy5wdXNoKGIoby5wYXJ0c1thXSx0KSl9ZWxzZXt2YXIgcz1bXTtmb3IoYT0wO2E8by5wYXJ0cy5sZW5ndGg7YSsrKXMucHVzaChiKG8ucGFydHNbYV0sdCkpO2lbby5pZF09e2lkOm8uaWQscmVmczoxLHBhcnRzOnN9fX19ZnVuY3Rpb24gaChlLHQpe2Zvcih2YXIgbj1bXSxvPXt9LHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIGk9ZVtyXSxhPXQuYmFzZT9pWzBdK3QuYmFzZTppWzBdLHM9e2NzczppWzFdLG1lZGlhOmlbMl0sc291cmNlTWFwOmlbM119O29bYV0/b1thXS5wYXJ0cy5wdXNoKHMpOm4ucHVzaChvW2FdPXtpZDphLHBhcnRzOltzXX0pfXJldHVybiBufWZ1bmN0aW9uIGcoZSx0KXt2YXIgbj1sKGUuaW5zZXJ0SW50byk7aWYoIW4pdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7dmFyIG89ZFtkLmxlbmd0aC0xXTtpZihcInRvcFwiPT09ZS5pbnNlcnRBdClvP28ubmV4dFNpYmxpbmc/bi5pbnNlcnRCZWZvcmUodCxvLm5leHRTaWJsaW5nKTpuLmFwcGVuZENoaWxkKHQpOm4uaW5zZXJ0QmVmb3JlKHQsbi5maXJzdENoaWxkKSxkLnB1c2godCk7ZWxzZSBpZihcImJvdHRvbVwiPT09ZS5pbnNlcnRBdCluLmFwcGVuZENoaWxkKHQpO2Vsc2V7aWYoXCJvYmplY3RcIiE9YShlLmluc2VydEF0KXx8IWUuaW5zZXJ0QXQuYmVmb3JlKXRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO3ZhciByPWwoZS5pbnNlcnRJbnRvK1wiIFwiK2UuaW5zZXJ0QXQuYmVmb3JlKTtuLmluc2VydEJlZm9yZSh0LHIpfX1mdW5jdGlvbiB2KGUpe2lmKG51bGw9PT1lLnBhcmVudE5vZGUpcmV0dXJuITE7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpO3ZhciB0PWQuaW5kZXhPZihlKTt0Pj0wJiZkLnNwbGljZSh0LDEpfWZ1bmN0aW9uIG0oZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3JldHVybiB2b2lkIDA9PT1lLmF0dHJzLnR5cGUmJihlLmF0dHJzLnR5cGU9XCJ0ZXh0L2Nzc1wiKSx5KHQsZS5hdHRycyksZyhlLHQpLHR9ZnVuY3Rpb24geShlLHQpe09iamVjdC5rZXlzKHQpLmZvckVhY2goKGZ1bmN0aW9uKG4pe2Uuc2V0QXR0cmlidXRlKG4sdFtuXSl9KSl9ZnVuY3Rpb24gYihlLHQpe3ZhciBuLG8scixpO2lmKHQudHJhbnNmb3JtJiZlLmNzcyl7aWYoIShpPXQudHJhbnNmb3JtKGUuY3NzKSkpcmV0dXJuIGZ1bmN0aW9uKCl7fTtlLmNzcz1pfWlmKHQuc2luZ2xldG9uKXt2YXIgYT11Kys7bj1jfHwoYz1tKHQpKSxvPV8uYmluZChudWxsLG4sYSwhMSkscj1fLmJpbmQobnVsbCxuLGEsITApfWVsc2UgZS5zb3VyY2VNYXAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgQmxvYiYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYT8obj1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtyZXR1cm4gdm9pZCAwPT09ZS5hdHRycy50eXBlJiYoZS5hdHRycy50eXBlPVwidGV4dC9jc3NcIiksZS5hdHRycy5yZWw9XCJzdHlsZXNoZWV0XCIseSh0LGUuYXR0cnMpLGcoZSx0KSx0fSh0KSxvPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1uLmNzcyxyPW4uc291cmNlTWFwLGk9dm9pZCAwPT09dC5jb252ZXJ0VG9BYnNvbHV0ZVVybHMmJnI7KHQuY29udmVydFRvQWJzb2x1dGVVcmxzfHxpKSYmKG89cChvKSksciYmKG8rPVwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShyKSkpKStcIiAqL1wiKTt2YXIgYT1uZXcgQmxvYihbb10se3R5cGU6XCJ0ZXh0L2Nzc1wifSkscz1lLmhyZWY7ZS5ocmVmPVVSTC5jcmVhdGVPYmplY3RVUkwoYSkscyYmVVJMLnJldm9rZU9iamVjdFVSTChzKX0uYmluZChudWxsLG4sdCkscj1mdW5jdGlvbigpe3Yobiksbi5ocmVmJiZVUkwucmV2b2tlT2JqZWN0VVJMKG4uaHJlZil9KToobj1tKHQpLG89ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmNzcyxvPXQubWVkaWE7aWYobyYmZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLG8pLGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD1uO2Vsc2V7Zm9yKDtlLmZpcnN0Q2hpbGQ7KWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKTtlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG4pKX19LmJpbmQobnVsbCxuKSxyPWZ1bmN0aW9uKCl7dihuKX0pO3JldHVybiBvKGUpLGZ1bmN0aW9uKHQpe2lmKHQpe2lmKHQuY3NzPT09ZS5jc3MmJnQubWVkaWE9PT1lLm1lZGlhJiZ0LnNvdXJjZU1hcD09PWUuc291cmNlTWFwKXJldHVybjtvKGU9dCl9ZWxzZSByKCl9fWUuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBERUJVRyYmREVCVUcmJlwib2JqZWN0XCIhPShcInVuZGVmaW5lZFwiPT10eXBlb2YgZG9jdW1lbnQ/XCJ1bmRlZmluZWRcIjphKGRvY3VtZW50KSkpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpOyh0PXR8fHt9KS5hdHRycz1cIm9iamVjdFwiPT1hKHQuYXR0cnMpP3QuYXR0cnM6e30sdC5zaW5nbGV0b258fFwiYm9vbGVhblwiPT10eXBlb2YgdC5zaW5nbGV0b258fCh0LnNpbmdsZXRvbj1zKCkpLHQuaW5zZXJ0SW50b3x8KHQuaW5zZXJ0SW50bz1cImhlYWRcIiksdC5pbnNlcnRBdHx8KHQuaW5zZXJ0QXQ9XCJib3R0b21cIik7dmFyIG49aChlLHQpO3JldHVybiBmKG4sdCksZnVuY3Rpb24oZSl7Zm9yKHZhciBvPVtdLHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIGE9bltyXTsocz1pW2EuaWRdKS5yZWZzLS0sby5wdXNoKHMpfWZvcihlJiZmKGgoZSx0KSx0KSxyPTA7cjxvLmxlbmd0aDtyKyspe3ZhciBzO2lmKDA9PT0ocz1vW3JdKS5yZWZzKXtmb3IodmFyIGw9MDtsPHMucGFydHMubGVuZ3RoO2wrKylzLnBhcnRzW2xdKCk7ZGVsZXRlIGlbcy5pZF19fX19O3ZhciB4LHc9KHg9W10sZnVuY3Rpb24oZSx0KXtyZXR1cm4geFtlXT10LHguZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIil9KTtmdW5jdGlvbiBfKGUsdCxuLG8pe3ZhciByPW4/XCJcIjpvLmNzcztpZihlLnN0eWxlU2hlZXQpZS5zdHlsZVNoZWV0LmNzc1RleHQ9dyh0LHIpO2Vsc2V7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUociksYT1lLmNoaWxkTm9kZXM7YVt0XSYmZS5yZW1vdmVDaGlsZChhW3RdKSxhLmxlbmd0aD9lLmluc2VydEJlZm9yZShpLGFbdF0pOmUuYXBwZW5kQ2hpbGQoaSl9fX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LmxvY2F0aW9uO2lmKCF0KXRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO2lmKCFlfHxcInN0cmluZ1wiIT10eXBlb2YgZSlyZXR1cm4gZTt2YXIgbj10LnByb3RvY29sK1wiLy9cIit0Lmhvc3Qsbz1uK3QucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLFwiL1wiKTtyZXR1cm4gZS5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwoZnVuY3Rpb24oZSx0KXt2YXIgcixpPXQudHJpbSgpLnJlcGxhY2UoL15cIiguKilcIiQvLChmdW5jdGlvbihlLHQpe3JldHVybiB0fSkpLnJlcGxhY2UoL14nKC4qKSckLywoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdH0pKTtyZXR1cm4vXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KGkpP2U6KHI9MD09PWkuaW5kZXhPZihcIi8vXCIpP2k6MD09PWkuaW5kZXhPZihcIi9cIik/bitpOm8raS5yZXBsYWNlKC9eXFwuXFwvLyxcIlwiKSxcInVybChcIitKU09OLnN0cmluZ2lmeShyKStcIilcIil9KSl9fV0pfSxcIm9iamVjdFwiPT1hKHQpJiZcIm9iamVjdFwiPT1hKGUpP2UuZXhwb3J0cz1pKCk6KG89W10sdm9pZCAwPT09KHI9XCJmdW5jdGlvblwiPT10eXBlb2Yobj1pKT9uLmFwcGx5KHQsbyk6bil8fChlLmV4cG9ydHM9cikpfSkuY2FsbCh0aGlzLG4oLyohIC4vLi4vLi4vd2VicGFjay9idWlsZGluL21vZHVsZS5qcyAqL1wiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qc1wiKShlKSl9LFwiLi9ub2RlX21vZHVsZXMvZG93bmxvYWRqcy9kb3dubG9hZC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2Rvd25sb2FkanMvZG93bmxvYWQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyLGk7XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7cj1bXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIGUodCxuLG8pe3ZhciByLGksYT13aW5kb3cscz1cImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiLGw9b3x8cyxjPXQsdT0hbiYmIW8mJmMsZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKSxwPWZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcoZSl9LGY9YS5CbG9ifHxhLk1vekJsb2J8fGEuV2ViS2l0QmxvYnx8cCxoPW58fFwiZG93bmxvYWRcIjtpZihmPWYuY2FsbD9mLmJpbmQoYSk6QmxvYixcInRydWVcIj09PVN0cmluZyh0aGlzKSYmKGw9KGM9W2MsbF0pWzBdLGM9Y1sxXSksdSYmdS5sZW5ndGg8MjA0OCYmKGg9dS5zcGxpdChcIi9cIikucG9wKCkuc3BsaXQoXCI/XCIpWzBdLGQuaHJlZj11LC0xIT09ZC5ocmVmLmluZGV4T2YodSkpKXt2YXIgZz1uZXcgWE1MSHR0cFJlcXVlc3Q7cmV0dXJuIGcub3BlbihcIkdFVFwiLHUsITApLGcucmVzcG9uc2VUeXBlPVwiYmxvYlwiLGcub25sb2FkPWZ1bmN0aW9uKHQpe2UodC50YXJnZXQucmVzcG9uc2UsaCxzKX0sc2V0VGltZW91dCgoZnVuY3Rpb24oKXtnLnNlbmQoKX0pLDApLGd9aWYoL15kYXRhOihbXFx3Ky1dK1xcL1tcXHcrLi1dKyk/Wyw7XS8udGVzdChjKSl7aWYoIShjLmxlbmd0aD4yMDk2MTAzLjQyNCYmZiE9PXApKXJldHVybiBuYXZpZ2F0b3IubXNTYXZlQmxvYj9uYXZpZ2F0b3IubXNTYXZlQmxvYihiKGMpLGgpOngoYyk7bD0oYz1iKGMpKS50eXBlfHxzfWVsc2UgaWYoLyhbXFx4ODAtXFx4ZmZdKS8udGVzdChjKSl7Zm9yKHZhciB2PTAsbT1uZXcgVWludDhBcnJheShjLmxlbmd0aCkseT1tLmxlbmd0aDt2PHk7Kyt2KW1bdl09Yy5jaGFyQ29kZUF0KHYpO2M9bmV3IGYoW21dLHt0eXBlOmx9KX1mdW5jdGlvbiBiKGUpe2Zvcih2YXIgdD1lLnNwbGl0KC9bOjssXS8pLG49dFsxXSxvPShcImJhc2U2NFwiPT10WzJdP2F0b2I6ZGVjb2RlVVJJQ29tcG9uZW50KSh0LnBvcCgpKSxyPW8ubGVuZ3RoLGk9MCxhPW5ldyBVaW50OEFycmF5KHIpO2k8cjsrK2kpYVtpXT1vLmNoYXJDb2RlQXQoaSk7cmV0dXJuIG5ldyBmKFthXSx7dHlwZTpufSl9ZnVuY3Rpb24geChlLHQpe2lmKFwiZG93bmxvYWRcImluIGQpcmV0dXJuIGQuaHJlZj1lLGQuc2V0QXR0cmlidXRlKFwiZG93bmxvYWRcIixoKSxkLmNsYXNzTmFtZT1cImRvd25sb2FkLWpzLWxpbmtcIixkLmlubmVySFRNTD1cImRvd25sb2FkaW5nLi4uXCIsZC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZCksc2V0VGltZW91dCgoZnVuY3Rpb24oKXtkLmNsaWNrKCksZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkKSwhMD09PXQmJnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7YS5VUkwucmV2b2tlT2JqZWN0VVJMKGQuaHJlZil9KSwyNTApfSksNjYpLCEwO2lmKC8oVmVyc2lvbilcXC8oXFxkKylcXC4oXFxkKykoPzpcXC4oXFxkKykpPy4qU2FmYXJpXFwvLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKXJldHVybi9eZGF0YTovLnRlc3QoZSkmJihlPVwiZGF0YTpcIitlLnJlcGxhY2UoL15kYXRhOihbXFx3XFwvXFwtXFwrXSspLyxzKSksd2luZG93Lm9wZW4oZSl8fGNvbmZpcm0oXCJEaXNwbGF5aW5nIE5ldyBEb2N1bWVudFxcblxcblVzZSBTYXZlIEFzLi4uIHRvIGRvd25sb2FkLCB0aGVuIGNsaWNrIGJhY2sgdG8gcmV0dXJuIHRvIHRoaXMgcGFnZS5cIikmJihsb2NhdGlvbi5ocmVmPWUpLCEwO3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChuKSwhdCYmL15kYXRhOi8udGVzdChlKSYmKGU9XCJkYXRhOlwiK2UucmVwbGFjZSgvXmRhdGE6KFtcXHdcXC9cXC1cXCtdKykvLHMpKSxuLnNyYz1lLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChuKX0pLDMzMyl9aWYocj1jIGluc3RhbmNlb2YgZj9jOm5ldyBmKFtjXSx7dHlwZTpsfSksbmF2aWdhdG9yLm1zU2F2ZUJsb2IpcmV0dXJuIG5hdmlnYXRvci5tc1NhdmVCbG9iKHIsaCk7aWYoYS5VUkwpeChhLlVSTC5jcmVhdGVPYmplY3RVUkwociksITApO2Vsc2V7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHJ8fHIuY29uc3RydWN0b3I9PT1wKXRyeXtyZXR1cm4geChcImRhdGE6XCIrbCtcIjtiYXNlNjQsXCIrYS5idG9hKHIpKX1jYXRjaChlKXtyZXR1cm4geChcImRhdGE6XCIrbCtcIixcIitlbmNvZGVVUklDb21wb25lbnQocikpfShpPW5ldyBGaWxlUmVhZGVyKS5vbmxvYWQ9ZnVuY3Rpb24oZSl7eCh0aGlzLnJlc3VsdCl9LGkucmVhZEFzRGF0YVVSTChyKX1yZXR1cm4hMH19KT9vLmFwcGx5KHQscik6byl8fChlLmV4cG9ydHM9aSl9LFwiLi9ub2RlX21vZHVsZXMvZHJhZ2dhYmlsbHkvZHJhZ2dhYmlsbHkuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZHJhZ2dhYmlsbHkvZHJhZ2dhYmlsbHkuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbi8qIVxuICogRHJhZ2dhYmlsbHkgdjIuMi4wXG4gKiBNYWtlIHRoYXQgc2hpeiBkcmFnZ2FibGVcbiAqIGh0dHBzOi8vZHJhZ2dhYmlsbHkuZGVzYW5kcm8uY29tXG4gKiBNSVQgbGljZW5zZVxuICovXG4hZnVuY3Rpb24oaSxhKXtvPVtuKC8qISBnZXQtc2l6ZS9nZXQtc2l6ZSAqL1wiLi9ub2RlX21vZHVsZXMvZ2V0LXNpemUvZ2V0LXNpemUuanNcIiksbigvKiEgdW5pZHJhZ2dlci91bmlkcmFnZ2VyICovXCIuL25vZGVfbW9kdWxlcy91bmlkcmFnZ2VyL3VuaWRyYWdnZXIuanNcIildLHZvaWQgMD09PShyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiBvKGUsdCl7Zm9yKHZhciBuIGluIHQpZVtuXT10W25dO3JldHVybiBlfXZhciByPWUualF1ZXJ5O2Z1bmN0aW9uIGkoZSx0KXt0aGlzLmVsZW1lbnQ9XCJzdHJpbmdcIj09dHlwZW9mIGU/ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKTplLHImJih0aGlzLiRlbGVtZW50PXIodGhpcy5lbGVtZW50KSksdGhpcy5vcHRpb25zPW8oe30sdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0cyksdGhpcy5vcHRpb24odCksdGhpcy5fY3JlYXRlKCl9dmFyIGE9aS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSk7aS5kZWZhdWx0cz17fSxhLm9wdGlvbj1mdW5jdGlvbihlKXtvKHRoaXMub3B0aW9ucyxlKX07dmFyIHM9e3JlbGF0aXZlOiEwLGFic29sdXRlOiEwLGZpeGVkOiEwfTtmdW5jdGlvbiBsKGUsdCxuKXtyZXR1cm4gbj1ufHxcInJvdW5kXCIsdD9NYXRoW25dKGUvdCkqdDplfWEuX2NyZWF0ZT1mdW5jdGlvbigpe3RoaXMucG9zaXRpb249e30sdGhpcy5fZ2V0UG9zaXRpb24oKSx0aGlzLnN0YXJ0UG9pbnQ9e3g6MCx5OjB9LHRoaXMuZHJhZ1BvaW50PXt4OjAseTowfSx0aGlzLnN0YXJ0UG9zaXRpb249byh7fSx0aGlzLnBvc2l0aW9uKTt2YXIgZT1nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudCk7c1tlLnBvc2l0aW9uXXx8KHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIpLHRoaXMub24oXCJwb2ludGVyRG93blwiLHRoaXMub25Qb2ludGVyRG93biksdGhpcy5vbihcInBvaW50ZXJNb3ZlXCIsdGhpcy5vblBvaW50ZXJNb3ZlKSx0aGlzLm9uKFwicG9pbnRlclVwXCIsdGhpcy5vblBvaW50ZXJVcCksdGhpcy5lbmFibGUoKSx0aGlzLnNldEhhbmRsZXMoKX0sYS5zZXRIYW5kbGVzPWZ1bmN0aW9uKCl7dGhpcy5oYW5kbGVzPXRoaXMub3B0aW9ucy5oYW5kbGU/dGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5vcHRpb25zLmhhbmRsZSk6W3RoaXMuZWxlbWVudF0sdGhpcy5iaW5kSGFuZGxlcygpfSxhLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPVt0XS5jb25jYXQobik7dGhpcy5lbWl0RXZlbnQoZSxvKSx0aGlzLmRpc3BhdGNoSlF1ZXJ5RXZlbnQoZSx0LG4pfSxhLmRpc3BhdGNoSlF1ZXJ5RXZlbnQ9ZnVuY3Rpb24odCxuLG8pe3ZhciByPWUualF1ZXJ5O2lmKHImJnRoaXMuJGVsZW1lbnQpe3ZhciBpPXIuRXZlbnQobik7aS50eXBlPXQsdGhpcy4kZWxlbWVudC50cmlnZ2VyKGksbyl9fSxhLl9nZXRQb3NpdGlvbj1mdW5jdGlvbigpe3ZhciBlPWdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50KSx0PXRoaXMuX2dldFBvc2l0aW9uQ29vcmQoZS5sZWZ0LFwid2lkdGhcIiksbj10aGlzLl9nZXRQb3NpdGlvbkNvb3JkKGUudG9wLFwiaGVpZ2h0XCIpO3RoaXMucG9zaXRpb24ueD1pc05hTih0KT8wOnQsdGhpcy5wb3NpdGlvbi55PWlzTmFOKG4pPzA6bix0aGlzLl9hZGRUcmFuc2Zvcm1Qb3NpdGlvbihlKX0sYS5fZ2V0UG9zaXRpb25Db29yZD1mdW5jdGlvbihlLG4pe2lmKC0xIT1lLmluZGV4T2YoXCIlXCIpKXt2YXIgbz10KHRoaXMuZWxlbWVudC5wYXJlbnROb2RlKTtyZXR1cm4gbz9wYXJzZUZsb2F0KGUpLzEwMCpvW25dOjB9cmV0dXJuIHBhcnNlSW50KGUsMTApfSxhLl9hZGRUcmFuc2Zvcm1Qb3NpdGlvbj1mdW5jdGlvbihlKXt2YXIgdD1lLnRyYW5zZm9ybTtpZigwPT09dC5pbmRleE9mKFwibWF0cml4XCIpKXt2YXIgbj10LnNwbGl0KFwiLFwiKSxvPTA9PT10LmluZGV4T2YoXCJtYXRyaXgzZFwiKT8xMjo0LHI9cGFyc2VJbnQobltvXSwxMCksaT1wYXJzZUludChuW28rMV0sMTApO3RoaXMucG9zaXRpb24ueCs9cix0aGlzLnBvc2l0aW9uLnkrPWl9fSxhLm9uUG9pbnRlckRvd249ZnVuY3Rpb24oZSx0KXt0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImlzLXBvaW50ZXItZG93blwiKSx0aGlzLmRpc3BhdGNoSlF1ZXJ5RXZlbnQoXCJwb2ludGVyRG93blwiLGUsW3RdKX0sYS5kcmFnU3RhcnQ9ZnVuY3Rpb24oZSx0KXt0aGlzLmlzRW5hYmxlZCYmKHRoaXMuX2dldFBvc2l0aW9uKCksdGhpcy5tZWFzdXJlQ29udGFpbm1lbnQoKSx0aGlzLnN0YXJ0UG9zaXRpb24ueD10aGlzLnBvc2l0aW9uLngsdGhpcy5zdGFydFBvc2l0aW9uLnk9dGhpcy5wb3NpdGlvbi55LHRoaXMuc2V0TGVmdFRvcCgpLHRoaXMuZHJhZ1BvaW50Lng9MCx0aGlzLmRyYWdQb2ludC55PTAsdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJpcy1kcmFnZ2luZ1wiKSx0aGlzLmRpc3BhdGNoRXZlbnQoXCJkcmFnU3RhcnRcIixlLFt0XSksdGhpcy5hbmltYXRlKCkpfSxhLm1lYXN1cmVDb250YWlubWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuZ2V0Q29udGFpbmVyKCk7aWYoZSl7dmFyIG49dCh0aGlzLmVsZW1lbnQpLG89dChlKSxyPXRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxpPWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksYT1vLmJvcmRlckxlZnRXaWR0aCtvLmJvcmRlclJpZ2h0V2lkdGgscz1vLmJvcmRlclRvcFdpZHRoK28uYm9yZGVyQm90dG9tV2lkdGgsbD10aGlzLnJlbGF0aXZlU3RhcnRQb3NpdGlvbj17eDpyLmxlZnQtKGkubGVmdCtvLmJvcmRlckxlZnRXaWR0aCkseTpyLnRvcC0oaS50b3Arby5ib3JkZXJUb3BXaWR0aCl9O3RoaXMuY29udGFpblNpemU9e3dpZHRoOm8ud2lkdGgtYS1sLngtbi53aWR0aCxoZWlnaHQ6by5oZWlnaHQtcy1sLnktbi5oZWlnaHR9fX0sYS5nZXRDb250YWluZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9wdGlvbnMuY29udGFpbm1lbnQ7aWYoZSlyZXR1cm4gZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50P2U6XCJzdHJpbmdcIj09dHlwZW9mIGU/ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKTp0aGlzLmVsZW1lbnQucGFyZW50Tm9kZX0sYS5vblBvaW50ZXJNb3ZlPWZ1bmN0aW9uKGUsdCxuKXt0aGlzLmRpc3BhdGNoSlF1ZXJ5RXZlbnQoXCJwb2ludGVyTW92ZVwiLGUsW3Qsbl0pfSxhLmRyYWdNb3ZlPWZ1bmN0aW9uKGUsdCxuKXtpZih0aGlzLmlzRW5hYmxlZCl7dmFyIG89bi54LHI9bi55LGk9dGhpcy5vcHRpb25zLmdyaWQsYT1pJiZpWzBdLHM9aSYmaVsxXTtvPWwobyxhKSxyPWwocixzKSxvPXRoaXMuY29udGFpbkRyYWcoXCJ4XCIsbyxhKSxyPXRoaXMuY29udGFpbkRyYWcoXCJ5XCIscixzKSxvPVwieVwiPT10aGlzLm9wdGlvbnMuYXhpcz8wOm8scj1cInhcIj09dGhpcy5vcHRpb25zLmF4aXM/MDpyLHRoaXMucG9zaXRpb24ueD10aGlzLnN0YXJ0UG9zaXRpb24ueCtvLHRoaXMucG9zaXRpb24ueT10aGlzLnN0YXJ0UG9zaXRpb24ueStyLHRoaXMuZHJhZ1BvaW50Lng9byx0aGlzLmRyYWdQb2ludC55PXIsdGhpcy5kaXNwYXRjaEV2ZW50KFwiZHJhZ01vdmVcIixlLFt0LG5dKX19LGEuY29udGFpbkRyYWc9ZnVuY3Rpb24oZSx0LG4pe2lmKCF0aGlzLm9wdGlvbnMuY29udGFpbm1lbnQpcmV0dXJuIHQ7dmFyIG89XCJ4XCI9PWU/XCJ3aWR0aFwiOlwiaGVpZ2h0XCIscj1sKC10aGlzLnJlbGF0aXZlU3RhcnRQb3NpdGlvbltlXSxuLFwiY2VpbFwiKSxpPXRoaXMuY29udGFpblNpemVbb107cmV0dXJuIGk9bChpLG4sXCJmbG9vclwiKSxNYXRoLm1heChyLE1hdGgubWluKGksdCkpfSxhLm9uUG9pbnRlclVwPWZ1bmN0aW9uKGUsdCl7dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1wb2ludGVyLWRvd25cIiksdGhpcy5kaXNwYXRjaEpRdWVyeUV2ZW50KFwicG9pbnRlclVwXCIsZSxbdF0pfSxhLmRyYWdFbmQ9ZnVuY3Rpb24oZSx0KXt0aGlzLmlzRW5hYmxlZCYmKHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm09XCJcIix0aGlzLnNldExlZnRUb3AoKSx0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImlzLWRyYWdnaW5nXCIpLHRoaXMuZGlzcGF0Y2hFdmVudChcImRyYWdFbmRcIixlLFt0XSkpfSxhLmFuaW1hdGU9ZnVuY3Rpb24oKXtpZih0aGlzLmlzRHJhZ2dpbmcpe3RoaXMucG9zaXRpb25EcmFnKCk7dmFyIGU9dGhpcztyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uKCl7ZS5hbmltYXRlKCl9KSl9fSxhLnNldExlZnRUb3A9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuc3R5bGUubGVmdD10aGlzLnBvc2l0aW9uLngrXCJweFwiLHRoaXMuZWxlbWVudC5zdHlsZS50b3A9dGhpcy5wb3NpdGlvbi55K1wicHhcIn0sYS5wb3NpdGlvbkRyYWc9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlM2QoIFwiK3RoaXMuZHJhZ1BvaW50LngrXCJweCwgXCIrdGhpcy5kcmFnUG9pbnQueStcInB4LCAwKVwifSxhLnN0YXRpY0NsaWNrPWZ1bmN0aW9uKGUsdCl7dGhpcy5kaXNwYXRjaEV2ZW50KFwic3RhdGljQ2xpY2tcIixlLFt0XSl9LGEuc2V0UG9zaXRpb249ZnVuY3Rpb24oZSx0KXt0aGlzLnBvc2l0aW9uLng9ZSx0aGlzLnBvc2l0aW9uLnk9dCx0aGlzLnNldExlZnRUb3AoKX0sYS5lbmFibGU9ZnVuY3Rpb24oKXt0aGlzLmlzRW5hYmxlZD0hMH0sYS5kaXNhYmxlPWZ1bmN0aW9uKCl7dGhpcy5pc0VuYWJsZWQ9ITEsdGhpcy5pc0RyYWdnaW5nJiZ0aGlzLmRyYWdFbmQoKX0sYS5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy5kaXNhYmxlKCksdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybT1cIlwiLHRoaXMuZWxlbWVudC5zdHlsZS5sZWZ0PVwiXCIsdGhpcy5lbGVtZW50LnN0eWxlLnRvcD1cIlwiLHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbj1cIlwiLHRoaXMudW5iaW5kSGFuZGxlcygpLHRoaXMuJGVsZW1lbnQmJnRoaXMuJGVsZW1lbnQucmVtb3ZlRGF0YShcImRyYWdnYWJpbGx5XCIpfSxhLl9pbml0PWZ1bmN0aW9uKCl7fSxyJiZyLmJyaWRnZXQmJnIuYnJpZGdldChcImRyYWdnYWJpbGx5XCIsaSk7cmV0dXJuIGl9KGksZSx0KX0uYXBwbHkodCxvKSl8fChlLmV4cG9ydHM9cil9KHdpbmRvdyl9LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9mdW5jdGlvbi9ub29wLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9lczUtZXh0L2Z1bmN0aW9uL25vb3AuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbigpe319LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvYXNzaWduL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9hc3NpZ24vaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1uKC8qISAuL2lzLWltcGxlbWVudGVkICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9hc3NpZ24vaXMtaW1wbGVtZW50ZWQuanNcIikoKT9PYmplY3QuYXNzaWduOm4oLyohIC4vc2hpbSAqL1wiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvYXNzaWduL3NoaW0uanNcIil9LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvYXNzaWduL2lzLWltcGxlbWVudGVkLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9hc3NpZ24vaXMtaW1wbGVtZW50ZWQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciBlLHQ9T2JqZWN0LmFzc2lnbjtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYodChlPXtmb286XCJyYXpcIn0se2JhcjpcImR3YVwifSx7dHJ6eTpcInRyenlcIn0pLGUuZm9vK2UuYmFyK2UudHJ6eT09PVwicmF6ZHdhdHJ6eVwiKX19LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvYXNzaWduL3NoaW0uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvYXNzaWduL3NoaW0uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigvKiEgLi4va2V5cyAqL1wiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3Qva2V5cy9pbmRleC5qc1wiKSxyPW4oLyohIC4uL3ZhbGlkLXZhbHVlICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC92YWxpZC12YWx1ZS5qc1wiKSxpPU1hdGgubWF4O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBuLGEscyxsPWkoYXJndW1lbnRzLmxlbmd0aCwyKTtmb3IoZT1PYmplY3QocihlKSkscz1mdW5jdGlvbihvKXt0cnl7ZVtvXT10W29dfWNhdGNoKGUpe258fChuPWUpfX0sYT0xO2E8bDsrK2EpdD1hcmd1bWVudHNbYV0sbyh0KS5mb3JFYWNoKHMpO2lmKHZvaWQgMCE9PW4pdGhyb3cgbjtyZXR1cm4gZX19LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvaXMtdmFsdWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvaXMtdmFsdWUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigvKiEgLi4vZnVuY3Rpb24vbm9vcCAqL1wiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9mdW5jdGlvbi9ub29wLmpzXCIpKCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlIT09byYmbnVsbCE9PWV9fSxcIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2tleXMvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9rZXlzL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPW4oLyohIC4vaXMtaW1wbGVtZW50ZWQgKi9cIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2tleXMvaXMtaW1wbGVtZW50ZWQuanNcIikoKT9PYmplY3Qua2V5czpuKC8qISAuL3NoaW0gKi9cIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2tleXMvc2hpbS5qc1wiKX0sXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9rZXlzL2lzLWltcGxlbWVudGVkLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3Qva2V5cy9pcy1pbXBsZW1lbnRlZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbigpe3RyeXtyZXR1cm4gT2JqZWN0LmtleXMoXCJwcmltaXRpdmVcIiksITB9Y2F0Y2goZSl7cmV0dXJuITF9fX0sXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9rZXlzL3NoaW0uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2tleXMvc2hpbS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigvKiEgLi4vaXMtdmFsdWUgKi9cIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2lzLXZhbHVlLmpzXCIpLHI9T2JqZWN0LmtleXM7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiByKG8oZSk/T2JqZWN0KGUpOmUpfX0sXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9ub3JtYWxpemUtb3B0aW9ucy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9ub3JtYWxpemUtb3B0aW9ucy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKC8qISAuL2lzLXZhbHVlICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9pcy12YWx1ZS5qc1wiKSxyPUFycmF5LnByb3RvdHlwZS5mb3JFYWNoLGk9T2JqZWN0LmNyZWF0ZSxhPWZ1bmN0aW9uKGUsdCl7dmFyIG47Zm9yKG4gaW4gZSl0W25dPWVbbl19O2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1pKG51bGwpO3JldHVybiByLmNhbGwoYXJndW1lbnRzLChmdW5jdGlvbihlKXtvKGUpJiZhKE9iamVjdChlKSx0KX0pKSx0fX0sXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKGUrXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7cmV0dXJuIGV9fSxcIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L3ZhbGlkLXZhbHVlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L3ZhbGlkLXZhbHVlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oLyohIC4vaXMtdmFsdWUgKi9cIi4vbm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2lzLXZhbHVlLmpzXCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZighbyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSBudWxsIG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZX19LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucy9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9bigvKiEgLi9pcy1pbXBsZW1lbnRlZCAqL1wiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucy9pcy1pbXBsZW1lbnRlZC5qc1wiKSgpP1N0cmluZy5wcm90b3R5cGUuY29udGFpbnM6bigvKiEgLi9zaGltICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zL3NoaW0uanNcIil9LFwiLi9ub2RlX21vZHVsZXMvZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucy9pcy1pbXBsZW1lbnRlZC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaXMtaW1wbGVtZW50ZWQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1cInJhemR3YXRyenlcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBvLmNvbnRhaW5zJiYoITA9PT1vLmNvbnRhaW5zKFwiZHdhXCIpJiYhMT09PW8uY29udGFpbnMoXCJmb29cIikpfX0sXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zL3NoaW0uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvc2hpbS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89U3RyaW5nLnByb3RvdHlwZS5pbmRleE9mO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gby5jYWxsKHRoaXMsZSxhcmd1bWVudHNbMV0pPi0xfX0sXCIuL25vZGVfbW9kdWxlcy9ldi1lbWl0dGVyL2V2LWVtaXR0ZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2V2LWVtaXR0ZXIvZXYtZW1pdHRlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3csdm9pZCAwPT09KHI9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQub249ZnVuY3Rpb24oZSx0KXtpZihlJiZ0KXt2YXIgbj10aGlzLl9ldmVudHM9dGhpcy5fZXZlbnRzfHx7fSxvPW5bZV09bltlXXx8W107cmV0dXJuLTE9PW8uaW5kZXhPZih0KSYmby5wdXNoKHQpLHRoaXN9fSx0Lm9uY2U9ZnVuY3Rpb24oZSx0KXtpZihlJiZ0KXt0aGlzLm9uKGUsdCk7dmFyIG49dGhpcy5fb25jZUV2ZW50cz10aGlzLl9vbmNlRXZlbnRzfHx7fTtyZXR1cm4obltlXT1uW2VdfHx7fSlbdF09ITAsdGhpc319LHQub2ZmPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5fZXZlbnRzJiZ0aGlzLl9ldmVudHNbZV07aWYobiYmbi5sZW5ndGgpe3ZhciBvPW4uaW5kZXhPZih0KTtyZXR1cm4tMSE9byYmbi5zcGxpY2UobywxKSx0aGlzfX0sdC5lbWl0RXZlbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50c1tlXTtpZihuJiZuLmxlbmd0aCl7bj1uLnNsaWNlKDApLHQ9dHx8W107Zm9yKHZhciBvPXRoaXMuX29uY2VFdmVudHMmJnRoaXMuX29uY2VFdmVudHNbZV0scj0wO3I8bi5sZW5ndGg7cisrKXt2YXIgaT1uW3JdO28mJm9baV0mJih0aGlzLm9mZihlLGkpLGRlbGV0ZSBvW2ldKSxpLmFwcGx5KHRoaXMsdCl9cmV0dXJuIHRoaXN9fSx0LmFsbE9mZj1mdW5jdGlvbigpe2RlbGV0ZSB0aGlzLl9ldmVudHMsZGVsZXRlIHRoaXMuX29uY2VFdmVudHN9LGV9KT9vLmNhbGwodCxuLHQsZSk6byl8fChlLmV4cG9ydHM9cil9LFwiLi9ub2RlX21vZHVsZXMvZXZlbnQtZW1pdHRlci9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2V2ZW50LWVtaXR0ZXIvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyLGksYSxzLGwsYyx1PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LGQ9bigvKiEgZCAqL1wiLi9ub2RlX21vZHVsZXMvZC9pbmRleC5qc1wiKSxwPW4oLyohIGVzNS1leHQvb2JqZWN0L3ZhbGlkLWNhbGxhYmxlICovXCIuL25vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZS5qc1wiKSxmPUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSxoPUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLGc9T2JqZWN0LmNyZWF0ZSx2PU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxtPU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLHk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxiPXtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMH07cj1mdW5jdGlvbihlLHQpe3ZhciBuLHI7cmV0dXJuIHAodCkscj10aGlzLG8uY2FsbCh0aGlzLGUsbj1mdW5jdGlvbigpe2kuY2FsbChyLGUsbiksZi5jYWxsKHQsdGhpcyxhcmd1bWVudHMpfSksbi5fX2VlT25jZUxpc3RlbmVyX189dCx0aGlzfSxzPXtvbjpvPWZ1bmN0aW9uKGUsdCl7dmFyIG47cmV0dXJuIHAodCkseS5jYWxsKHRoaXMsXCJfX2VlX19cIik/bj10aGlzLl9fZWVfXzoobj1iLnZhbHVlPWcobnVsbCksdih0aGlzLFwiX19lZV9fXCIsYiksYi52YWx1ZT1udWxsKSxuW2VdP1wib2JqZWN0XCI9PT11KG5bZV0pP25bZV0ucHVzaCh0KTpuW2VdPVtuW2VdLHRdOm5bZV09dCx0aGlzfSxvbmNlOnIsb2ZmOmk9ZnVuY3Rpb24oZSx0KXt2YXIgbixvLHIsaTtpZihwKHQpLCF5LmNhbGwodGhpcyxcIl9fZWVfX1wiKSlyZXR1cm4gdGhpcztpZighKG49dGhpcy5fX2VlX18pW2VdKXJldHVybiB0aGlzO2lmKFwib2JqZWN0XCI9PT0odm9pZCAwPT09KG89bltlXSk/XCJ1bmRlZmluZWRcIjp1KG8pKSlmb3IoaT0wO3I9b1tpXTsrK2kpciE9PXQmJnIuX19lZU9uY2VMaXN0ZW5lcl9fIT09dHx8KDI9PT1vLmxlbmd0aD9uW2VdPW9baT8wOjFdOm8uc3BsaWNlKGksMSkpO2Vsc2UgbyE9PXQmJm8uX19lZU9uY2VMaXN0ZW5lcl9fIT09dHx8ZGVsZXRlIG5bZV07cmV0dXJuIHRoaXN9LGVtaXQ6YT1mdW5jdGlvbihlKXt2YXIgdCxuLG8scixpO2lmKHkuY2FsbCh0aGlzLFwiX19lZV9fXCIpJiYocj10aGlzLl9fZWVfX1tlXSkpaWYoXCJvYmplY3RcIj09PSh2b2lkIDA9PT1yP1widW5kZWZpbmVkXCI6dShyKSkpe2ZvcihuPWFyZ3VtZW50cy5sZW5ndGgsaT1uZXcgQXJyYXkobi0xKSx0PTE7dDxuOysrdClpW3QtMV09YXJndW1lbnRzW3RdO2ZvcihyPXIuc2xpY2UoKSx0PTA7bz1yW3RdOysrdClmLmNhbGwobyx0aGlzLGkpfWVsc2Ugc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMTpoLmNhbGwocix0aGlzKTticmVhaztjYXNlIDI6aC5jYWxsKHIsdGhpcyxhcmd1bWVudHNbMV0pO2JyZWFrO2Nhc2UgMzpoLmNhbGwocix0aGlzLGFyZ3VtZW50c1sxXSxhcmd1bWVudHNbMl0pO2JyZWFrO2RlZmF1bHQ6Zm9yKG49YXJndW1lbnRzLmxlbmd0aCxpPW5ldyBBcnJheShuLTEpLHQ9MTt0PG47Kyt0KWlbdC0xXT1hcmd1bWVudHNbdF07Zi5jYWxsKHIsdGhpcyxpKX19fSxsPXtvbjpkKG8pLG9uY2U6ZChyKSxvZmY6ZChpKSxlbWl0OmQoYSl9LGM9bSh7fSxsKSxlLmV4cG9ydHM9dD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9nKGMpOm0oT2JqZWN0KGUpLGwpfSx0Lm1ldGhvZHM9c30sXCIuL25vZGVfbW9kdWxlcy9nZXQtc2l6ZS9nZXQtc2l6ZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9nZXQtc2l6ZS9nZXQtc2l6ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyLGk9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX07d2luZG93LHZvaWQgMD09PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXBhcnNlRmxvYXQoZSk7cmV0dXJuLTE9PWUuaW5kZXhPZihcIiVcIikmJiFpc05hTih0KSYmdH12YXIgdD1cInVuZGVmaW5lZFwiPT10eXBlb2YgY29uc29sZT9mdW5jdGlvbigpe306ZnVuY3Rpb24oZSl7Y29uc29sZS5lcnJvcihlKX0sbj1bXCJwYWRkaW5nTGVmdFwiLFwicGFkZGluZ1JpZ2h0XCIsXCJwYWRkaW5nVG9wXCIsXCJwYWRkaW5nQm90dG9tXCIsXCJtYXJnaW5MZWZ0XCIsXCJtYXJnaW5SaWdodFwiLFwibWFyZ2luVG9wXCIsXCJtYXJnaW5Cb3R0b21cIixcImJvcmRlckxlZnRXaWR0aFwiLFwiYm9yZGVyUmlnaHRXaWR0aFwiLFwiYm9yZGVyVG9wV2lkdGhcIixcImJvcmRlckJvdHRvbVdpZHRoXCJdLG89bi5sZW5ndGg7ZnVuY3Rpb24gcihlKXt2YXIgbj1nZXRDb21wdXRlZFN0eWxlKGUpO3JldHVybiBufHx0KFwiU3R5bGUgcmV0dXJuZWQgXCIrbitcIi4gQXJlIHlvdSBydW5uaW5nIHRoaXMgY29kZSBpbiBhIGhpZGRlbiBpZnJhbWUgb24gRmlyZWZveD8gU2VlIGh0dHBzOi8vYml0Lmx5L2dldHNpemVidWcxXCIpLG59dmFyIGEscz0hMTtmdW5jdGlvbiBsKHQpe2lmKGZ1bmN0aW9uKCl7aWYoIXMpe3M9ITA7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0LnN0eWxlLndpZHRoPVwiMjAwcHhcIix0LnN0eWxlLnBhZGRpbmc9XCIxcHggMnB4IDNweCA0cHhcIix0LnN0eWxlLmJvcmRlclN0eWxlPVwic29saWRcIix0LnN0eWxlLmJvcmRlcldpZHRoPVwiMXB4IDJweCAzcHggNHB4XCIsdC5zdHlsZS5ib3hTaXppbmc9XCJib3JkZXItYm94XCI7dmFyIG49ZG9jdW1lbnQuYm9keXx8ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O24uYXBwZW5kQ2hpbGQodCk7dmFyIG89cih0KTthPTIwMD09TWF0aC5yb3VuZChlKG8ud2lkdGgpKSxsLmlzQm94U2l6ZU91dGVyPWEsbi5yZW1vdmVDaGlsZCh0KX19KCksXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCkpLHQmJlwib2JqZWN0XCI9PSh2b2lkIDA9PT10P1widW5kZWZpbmVkXCI6aSh0KSkmJnQubm9kZVR5cGUpe3ZhciBjPXIodCk7aWYoXCJub25lXCI9PWMuZGlzcGxheSlyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIGU9e3dpZHRoOjAsaGVpZ2h0OjAsaW5uZXJXaWR0aDowLGlubmVySGVpZ2h0OjAsb3V0ZXJXaWR0aDowLG91dGVySGVpZ2h0OjB9LHQ9MDt0PG87dCsrKWVbblt0XV09MDtyZXR1cm4gZX0oKTt2YXIgdT17fTt1LndpZHRoPXQub2Zmc2V0V2lkdGgsdS5oZWlnaHQ9dC5vZmZzZXRIZWlnaHQ7Zm9yKHZhciBkPXUuaXNCb3JkZXJCb3g9XCJib3JkZXItYm94XCI9PWMuYm94U2l6aW5nLHA9MDtwPG87cCsrKXt2YXIgZj1uW3BdLGg9Y1tmXSxnPXBhcnNlRmxvYXQoaCk7dVtmXT1pc05hTihnKT8wOmd9dmFyIHY9dS5wYWRkaW5nTGVmdCt1LnBhZGRpbmdSaWdodCxtPXUucGFkZGluZ1RvcCt1LnBhZGRpbmdCb3R0b20seT11Lm1hcmdpbkxlZnQrdS5tYXJnaW5SaWdodCxiPXUubWFyZ2luVG9wK3UubWFyZ2luQm90dG9tLHg9dS5ib3JkZXJMZWZ0V2lkdGgrdS5ib3JkZXJSaWdodFdpZHRoLHc9dS5ib3JkZXJUb3BXaWR0aCt1LmJvcmRlckJvdHRvbVdpZHRoLF89ZCYmYSxrPWUoYy53aWR0aCk7ITEhPT1rJiYodS53aWR0aD1rKyhfPzA6dit4KSk7dmFyIEU9ZShjLmhlaWdodCk7cmV0dXJuITEhPT1FJiYodS5oZWlnaHQ9RSsoXz8wOm0rdykpLHUuaW5uZXJXaWR0aD11LndpZHRoLSh2K3gpLHUuaW5uZXJIZWlnaHQ9dS5oZWlnaHQtKG0rdyksdS5vdXRlcldpZHRoPXUud2lkdGgreSx1Lm91dGVySGVpZ2h0PXUuaGVpZ2h0K2IsdX19cmV0dXJuIGx9KT9vLmNhbGwodCxuLHQsZSk6byl8fChlLmV4cG9ydHM9cil9LFwiLi9ub2RlX21vZHVsZXMvcGFzaXRpb24vZGlzdC9wYXNpdGlvbi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3Bhc2l0aW9uL2Rpc3QvcGFzaXRpb24uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyLGksYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfTtpPWZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlO2lmKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoZSkpcmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIG49W10sbz0hMCxyPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGEscz1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKG89KGE9cy5uZXh0KCkpLmRvbmUpJiYobi5wdXNoKGEudmFsdWUpLCF0fHxuLmxlbmd0aCE9PXQpO289ITApO31jYXRjaChlKXtyPSEwLGk9ZX1maW5hbGx5e3RyeXshbyYmcy5yZXR1cm4mJnMucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IGl9fXJldHVybiBufShlLHQpO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpfSx0PTIqTWF0aC5QSSxuPWZ1bmN0aW9uKGUsdCxuLG8scixpLGEpe3ZhciBzPWUueCxsPWUueTtyZXR1cm57eDpvKihzKj10KS1yKihsKj1uKStpLHk6cipzK28qbCthfX0sbz1mdW5jdGlvbihlLHQpe3ZhciBuPTQvMypNYXRoLnRhbih0LzQpLG89TWF0aC5jb3MoZSkscj1NYXRoLnNpbihlKSxpPU1hdGguY29zKGUrdCksYT1NYXRoLnNpbihlK3QpO3JldHVyblt7eDpvLXIqbix5OnIrbypufSx7eDppK2Eqbix5OmEtaSpufSx7eDppLHk6YX1dfSxyPWZ1bmN0aW9uKGUsdCxuLG8pe3ZhciByPWUqby10Km48MD8tMToxLGk9KGUqbit0Km8pLyhNYXRoLnNxcnQoZSplK3QqdCkqTWF0aC5zcXJ0KGUqZSt0KnQpKTtyZXR1cm4gaT4xJiYoaT0xKSxpPC0xJiYoaT0tMSkscipNYXRoLmFjb3MoaSl9LGk9ZnVuY3Rpb24oaSl7dmFyIGE9aS5weCxzPWkucHksbD1pLmN4LGM9aS5jeSx1PWkucngsZD1pLnJ5LHA9aS54QXhpc1JvdGF0aW9uLGY9dm9pZCAwPT09cD8wOnAsaD1pLmxhcmdlQXJjRmxhZyxnPXZvaWQgMD09PWg/MDpoLHY9aS5zd2VlcEZsYWcsbT12b2lkIDA9PT12PzA6dix5PVtdO2lmKDA9PT11fHwwPT09ZClyZXR1cm5bXTt2YXIgYj1NYXRoLnNpbihmKnQvMzYwKSx4PU1hdGguY29zKGYqdC8zNjApLHc9eCooYS1sKS8yK2IqKHMtYykvMixfPS1iKihhLWwpLzIreCoocy1jKS8yO2lmKDA9PT13JiYwPT09XylyZXR1cm5bXTt1PU1hdGguYWJzKHUpLGQ9TWF0aC5hYnMoZCk7dmFyIGs9TWF0aC5wb3codywyKS9NYXRoLnBvdyh1LDIpK01hdGgucG93KF8sMikvTWF0aC5wb3coZCwyKTtrPjEmJih1Kj1NYXRoLnNxcnQoayksZCo9TWF0aC5zcXJ0KGspKTt2YXIgRT1mdW5jdGlvbihlLG4sbyxpLGEscyxsLGMsdSxkLHAsZil7dmFyIGg9TWF0aC5wb3coYSwyKSxnPU1hdGgucG93KHMsMiksdj1NYXRoLnBvdyhwLDIpLG09TWF0aC5wb3coZiwyKSx5PWgqZy1oKm0tZyp2O3k8MCYmKHk9MCkseS89aCptK2cqdjt2YXIgYj0oeT1NYXRoLnNxcnQoeSkqKGw9PT1jPy0xOjEpKSphL3MqZix4PXkqLXMvYSpwLHc9ZCpiLXUqeCsoZStvKS8yLF89dSpiK2QqeCsobitpKS8yLGs9KHAtYikvYSxFPShmLXgpL3MsQz0oLXAtYikvYSxTPSgtZi14KS9zLFA9cigxLDAsayxFKSxqPXIoayxFLEMsUyk7cmV0dXJuIDA9PT1jJiZqPjAmJihqLT10KSwxPT09YyYmajwwJiYoais9dCksW3csXyxQLGpdfShhLHMsbCxjLHUsZCxnLG0sYix4LHcsXyksQz1lKEUsNCksUz1DWzBdLFA9Q1sxXSxqPUNbMl0sVD1DWzNdLE09TWF0aC5tYXgoTWF0aC5jZWlsKE1hdGguYWJzKFQpLyh0LzQpKSwxKTtULz1NO2Zvcih2YXIgTz0wO088TTtPKyspeS5wdXNoKG8oaixUKSksais9VDtyZXR1cm4geS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PW4oZVswXSx1LGQseCxiLFMsUCksbz10Lngscj10LnksaT1uKGVbMV0sdSxkLHgsYixTLFApLGE9aS54LHM9aS55LGw9bihlWzJdLHUsZCx4LGIsUyxQKTtyZXR1cm57eDE6byx5MTpyLHgyOmEseTI6cyx4OmwueCx5OmwueX19KSl9LGE9e2E6NyxjOjYsaDoxLGw6MixtOjIscTo0LHM6NCx0OjIsdjoxLHo6MH0scz0vKFthc3R2enFtaGxjXSkoW15hc3R2enFtaGxjXSopL2dpLGw9Ly0/WzAtOV0qXFwuP1swLTldKyg/OmVbLStdP1xcZCspPy9naTtmdW5jdGlvbiBjKGUpe3ZhciB0PWVbMF1bMF0sbj1lWzBdWzFdLG89dCxyPW47cmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIGk9ZVswXSxhPWVbMl0scz1lWzRdLGw9ZVs2XSxjPWVbMV0sdT1lWzNdLGQ9ZVs1XSxwPWVbN107dD1NYXRoLm1pbih0LGksYSxzLGwpLG49TWF0aC5taW4obixjLHUsZCxwKSxvPU1hdGgubWF4KG8saSxhLHMsbCkscj1NYXRoLm1heChyLGMsdSxkLHApfSkpLFt0LG4sbyxyXX1mdW5jdGlvbiB1KGUsdCl7dmFyIG49ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MDtuPGU7bisrKXtmb3IodmFyIG89W10scj0wO3I8ZTtyKyspe3ZhciBpPXIrbjtpPmUtMSYmKGktPWUpLG9baV09cn10LnB1c2gobyl9cmV0dXJuIHR9KGUubGVuZ3RoKSxvPVtdO24uZm9yRWFjaCgoZnVuY3Rpb24obil7dmFyIHI9MCxpPTA7bi5mb3JFYWNoKChmdW5jdGlvbihuKXt2YXIgbyxhLHMsbCxjLHUsZCxwLGYsaCxnLHYsbSx5LGIseCx3LF87cis9KG89ZVtuXSxhPXRbaSsrXSxzPW9bMF0sbD1vWzJdLGM9b1s0XSx1PW9bNl0sZD1vWzFdLHA9b1szXSxmPW9bNV0saD1vWzddLGc9YVswXSx2PWFbMl0sbT1hWzRdLHk9YVs2XSxiPWFbMV0seD1hWzNdLHc9YVs1XSxfPWFbN10sTWF0aC5zcXJ0KE1hdGgucG93KGctcywyKStNYXRoLnBvdyhiLWQsMikpK01hdGguc3FydChNYXRoLnBvdyh2LWwsMikrTWF0aC5wb3coeC1wLDIpKStNYXRoLnNxcnQoTWF0aC5wb3cobS1jLDIpK01hdGgucG93KHctZiwyKSkrTWF0aC5zcXJ0KE1hdGgucG93KHktdSwyKStNYXRoLnBvdyhfLWgsMikpKX0pKSxvLnB1c2goe2luZGV4Om4sZGlzdGFuY2U6cn0pfSkpLG8uc29ydCgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5kaXN0YW5jZS10LmRpc3RhbmNlfSkpO3ZhciByPVtdO3JldHVybiBvWzBdLmluZGV4LmZvckVhY2goKGZ1bmN0aW9uKHQpe3IucHVzaChlW3RdKX0pKSxyfWZ1bmN0aW9uIGQoZSx0KXt2YXIgbj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10sbj0wO248ZTtuKyspdC5wdXNoKG4pO3JldHVybiBvPVtdLHI9W10sZnVuY3Rpb24gZSh0KXt2YXIgbixpO2ZvcihuPTA7bjx0Lmxlbmd0aDtuKyspaT10LnNwbGljZShuLDEpWzBdLHIucHVzaChpKSwwPT10Lmxlbmd0aCYmby5wdXNoKHIuc2xpY2UoKSksZSh0KSx0LnNwbGljZShuLDAsaSksci5wb3AoKTtyZXR1cm4gb30odCk7dmFyIG8scn0oZS5sZW5ndGgpLG89W107bi5mb3JFYWNoKChmdW5jdGlvbihuKXt2YXIgcj0wO24uZm9yRWFjaCgoZnVuY3Rpb24obil7dmFyIG8saTtyKz0obz1jKGVbbl0pLGk9Yyh0W25dKSxNYXRoLnNxcnQoTWF0aC5wb3cob1swXS1pWzBdLDIpK01hdGgucG93KG9bMV0taVsxXSwyKSkrTWF0aC5zcXJ0KE1hdGgucG93KG9bMl0taVsyXSwyKStNYXRoLnBvdyhvWzNdLWlbM10sMikpKX0pKSxvLnB1c2goe2luZGV4Om4sZGlzdGFuY2U6cn0pfSkpLG8uc29ydCgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5kaXN0YW5jZS10LmRpc3RhbmNlfSkpO3ZhciByPVtdO3JldHVybiBvWzBdLmluZGV4LmZvckVhY2goKGZ1bmN0aW9uKHQpe3IucHVzaChlW3RdKX0pKSxyfXZhciBwPXt9O2Z1bmN0aW9uIGYoZSx0LG4sbyxyLGksYSxzLGwsYyl7dmFyIHU9KG4tZSkqbCtlLGQ9KG8tdCkqbCt0LHA9KHItbikqbCtuLGY9KGktbykqbCtvLGg9KHAtdSkqbCt1LGc9KGYtZCkqbCtkLHY9KCgoYS1yKSpsK3ItcCkqbCtwLWgpKmwraCxtPSgoKHMtaSkqbCtpLWYpKmwrZi1nKSpsK2c7cmV0dXJuIGM/W3YsbSxoLGcsdSxkLGUsdF06W2UsdCx1LGQsaCxnLHYsbV19ZnVuY3Rpb24gaChlLHQpe2Zvcih2YXIgbj1mdW5jdGlvbih0KXt2YXIgbj1lW2UubGVuZ3RoLTFdLG89W107bi5mb3JFYWNoKChmdW5jdGlvbihlKXtvLnB1c2goZS5zbGljZSgwKSl9KSksZS5wdXNoKG8pfSxvPTA7bzx0O28rKyluKCl9cmV0dXJuIHAucGFyc2VyPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiBlLnJlcGxhY2UocywoZnVuY3Rpb24oZSxuLG8pe3ZhciByPW4udG9Mb3dlckNhc2UoKTtmb3Iobz1mdW5jdGlvbihlKXt2YXIgdD1lLm1hdGNoKGwpO3JldHVybiB0P3QubWFwKE51bWJlcik6W119KG8pLFwibVwiPT1yJiZvLmxlbmd0aD4yJiYodC5wdXNoKFtuXS5jb25jYXQoby5zcGxpY2UoMCwyKSkpLHI9XCJsXCIsbj1cIm1cIj09bj9cImxcIjpcIkxcIik7Oyl7aWYoby5sZW5ndGg9PWFbcl0pcmV0dXJuIG8udW5zaGlmdChuKSx0LnB1c2gobyk7aWYoby5sZW5ndGg8YVtyXSl0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgcGF0aCBkYXRhXCIpO3QucHVzaChbbl0uY29uY2F0KG8uc3BsaWNlKDAsYVtyXSkpKX19KSksdH0scC5sZXJwQ3VydmU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBwLmxlcnBQb2ludHMoZVswXSxlWzFdLHRbMF0sdFsxXSxuKS5jb25jYXQocC5sZXJwUG9pbnRzKGVbMl0sZVszXSx0WzJdLHRbM10sbikpLmNvbmNhdChwLmxlcnBQb2ludHMoZVs0XSxlWzVdLHRbNF0sdFs1XSxuKSkuY29uY2F0KHAubGVycFBvaW50cyhlWzZdLGVbN10sdFs2XSx0WzddLG4pKX0scC5sZXJwUG9pbnRzPWZ1bmN0aW9uKGUsdCxuLG8scil7cmV0dXJuW2UrKG4tZSkqcix0KyhvLXQpKnJdfSxwLnEyYj1mdW5jdGlvbihlLHQsbixvLHIsaSl7cmV0dXJuW2UsdCwoZSsyKm4pLzMsKHQrMipvKS8zLChyKzIqbikvMywoaSsyKm8pLzMscixpXX0scC5wYXRoMnNoYXBlcz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9cC5wYXJzZXIoZSksbj0wLG89MCxyPTAsYT10Lmxlbmd0aCxzPVtdLGw9bnVsbCxjPXZvaWQgMCx1PXZvaWQgMCxkPXZvaWQgMCxmPXZvaWQgMCxoPXZvaWQgMCxnPXZvaWQgMCx2PXZvaWQgMDtyPGE7cisrKXt2YXIgbT10W3JdLHk9bVswXSxiPXRbci0xXTtzd2l0Y2goeSl7Y2FzZVwibVwiOnNbaD1zLmxlbmd0aF09W10sbD1zW2hdLG4rPW1bMV0sbys9bVsyXTticmVhaztjYXNlXCJNXCI6c1toPXMubGVuZ3RoXT1bXSxsPXNbaF0sbj1tWzFdLG89bVsyXTticmVhaztjYXNlXCJsXCI6bC5wdXNoKFtuLG8sbixvLG4sbyxuK21bMV0sbyttWzJdXSksbis9bVsxXSxvKz1tWzJdO2JyZWFrO2Nhc2VcIkxcIjpsLnB1c2goW24sbyxtWzFdLG1bMl0sbVsxXSxtWzJdLG1bMV0sbVsyXV0pLG49bVsxXSxvPW1bMl07YnJlYWs7Y2FzZVwiaFwiOmwucHVzaChbbixvLG4sbyxuLG8sbittWzFdLG9dKSxuKz1tWzFdO2JyZWFrO2Nhc2VcIkhcIjpsLnB1c2goW24sbyxtWzFdLG8sbVsxXSxvLG1bMV0sb10pLG49bVsxXTticmVhaztjYXNlXCJ2XCI6bC5wdXNoKFtuLG8sbixvLG4sbyxuLG8rbVsxXV0pLG8rPW1bMV07YnJlYWs7Y2FzZVwiVlwiOmwucHVzaChbbixvLG4sbVsxXSxuLG1bMV0sbixtWzFdXSksbz1tWzFdO2JyZWFrO2Nhc2VcIkNcIjpsLnB1c2goW24sbyxtWzFdLG1bMl0sbVszXSxtWzRdLG1bNV0sbVs2XV0pLG49bVs1XSxvPW1bNl07YnJlYWs7Y2FzZVwiU1wiOlwiQ1wiPT09YlswXXx8XCJjXCI9PT1iWzBdP2wucHVzaChbbixvLG4rYls1XS1iWzNdLG8rYls2XS1iWzRdLG1bMV0sbVsyXSxtWzNdLG1bNF1dKTpcIlNcIiE9PWJbMF0mJlwic1wiIT09YlswXXx8bC5wdXNoKFtuLG8sbitiWzNdLWJbMV0sbytiWzRdLWJbMl0sbVsxXSxtWzJdLG1bM10sbVs0XV0pLG49bVszXSxvPW1bNF07YnJlYWs7Y2FzZVwiY1wiOmwucHVzaChbbixvLG4rbVsxXSxvK21bMl0sbittWzNdLG8rbVs0XSxuK21bNV0sbyttWzZdXSksbis9bVs1XSxvKz1tWzZdO2JyZWFrO2Nhc2VcInNcIjpcIkNcIj09PWJbMF18fFwiY1wiPT09YlswXT9sLnB1c2goW24sbyxuK2JbNV0tYlszXSxvK2JbNl0tYls0XSxuK21bMV0sbyttWzJdLG4rbVszXSxvK21bNF1dKTpcIlNcIiE9PWJbMF0mJlwic1wiIT09YlswXXx8bC5wdXNoKFtuLG8sbitiWzNdLWJbMV0sbytiWzRdLWJbMl0sbittWzFdLG8rbVsyXSxuK21bM10sbyttWzRdXSksbis9bVszXSxvKz1tWzRdO2JyZWFrO2Nhc2VcImFcIjp2PShnPWkoe3J4Om1bMV0scnk6bVsyXSxweDpuLHB5Om8seEF4aXNSb3RhdGlvbjptWzNdLGxhcmdlQXJjRmxhZzptWzRdLHN3ZWVwRmxhZzptWzVdLGN4Om4rbVs2XSxjeTpvK21bN119KSlbZy5sZW5ndGgtMV0sZy5mb3JFYWNoKChmdW5jdGlvbihlLHQpezA9PT10P2wucHVzaChbbixvLGUueDEsZS55MSxlLngyLGUueTIsZS54LGUueV0pOmwucHVzaChbZ1t0LTFdLngsZ1t0LTFdLnksZS54MSxlLnkxLGUueDIsZS55MixlLngsZS55XSl9KSksbj12Lngsbz12Lnk7YnJlYWs7Y2FzZVwiQVwiOnY9KGc9aSh7cng6bVsxXSxyeTptWzJdLHB4Om4scHk6byx4QXhpc1JvdGF0aW9uOm1bM10sbGFyZ2VBcmNGbGFnOm1bNF0sc3dlZXBGbGFnOm1bNV0sY3g6bVs2XSxjeTptWzddfSkpW2cubGVuZ3RoLTFdLGcuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXswPT09dD9sLnB1c2goW24sbyxlLngxLGUueTEsZS54MixlLnkyLGUueCxlLnldKTpsLnB1c2goW2dbdC0xXS54LGdbdC0xXS55LGUueDEsZS55MSxlLngyLGUueTIsZS54LGUueV0pfSkpLG49di54LG89di55O2JyZWFrO2Nhc2VcIlFcIjpsLnB1c2gocC5xMmIobixvLG1bMV0sbVsyXSxtWzNdLG1bNF0pKSxuPW1bM10sbz1tWzRdO2JyZWFrO2Nhc2VcInFcIjpsLnB1c2gocC5xMmIobixvLG4rbVsxXSxvK21bMl0sbVszXStuLG1bNF0rbykpLG4rPW1bM10sbys9bVs0XTticmVhaztjYXNlXCJUXCI6XCJRXCI9PT1iWzBdfHxcInFcIj09PWJbMF0/KGQ9bitiWzNdLWJbMV0sZj1vK2JbNF0tYlsyXSxsLnB1c2gocC5xMmIobixvLGQsZixtWzFdLG1bMl0pKSk6XCJUXCIhPT1iWzBdJiZcInRcIiE9PWJbMF18fChsLnB1c2gocC5xMmIobixvLG4rbi1kLG8rby1mLG1bMV0sbVsyXSkpLGQ9bituLWQsZj1vK28tZiksbj1tWzFdLG89bVsyXTticmVhaztjYXNlXCJ0XCI6XCJRXCI9PT1iWzBdfHxcInFcIj09PWJbMF0/KGQ9bitiWzNdLWJbMV0sZj1vK2JbNF0tYlsyXSxsLnB1c2gocC5xMmIobixvLGQsZixuK21bMV0sbyttWzJdKSkpOlwiVFwiIT09YlswXSYmXCJ0XCIhPT1iWzBdfHwobC5wdXNoKHAucTJiKG4sbyxuK24tZCxvK28tZixuK21bMV0sbyttWzJdKSksZD1uK24tZCxmPW8rby1mKSxuKz1tWzFdLG8rPW1bMl07YnJlYWs7Y2FzZVwiWlwiOmNhc2VcInpcIjpjPWxbMF1bMF0sdT1sWzBdWzFdLGwucHVzaChbbixvLGMsdSxjLHUsYyx1XSl9fXJldHVybiBzfSxwLl91cEN1cnZlcz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLG89MCxyPWUubGVuZ3RoO248dDtuKyspZS5wdXNoKGVbb10uc2xpY2UoMCkpLCsrbz5yLTEmJihvLT1yKX0scC5fc3BsaXRDdXJ2ZXM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4sbyxyLGksYSxzLGwsYyx1LGQ9MCxwPTA7ZDx0O2QrKyl7dmFyIGg9ZVtwXSxnPShuPWhbMF0sbz1oWzFdLHI9aFsyXSxpPWhbM10sYT1oWzRdLHM9aFs1XSxsPWhbNl0sYz1oWzddLHtsZWZ0OmYobixvLHIsaSxhLHMsbCxjLHU9LjUpLHJpZ2h0OmYobCxjLGEscyxyLGksbixvLDEtdSwhMCl9KTtlLnNwbGljZShwLDEpLGUuc3BsaWNlKHAsMCxnLmxlZnQsZy5yaWdodCksKHArPTIpPj1lLmxlbmd0aC0xJiYocD0wKX19LHAubGVycD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHAuX2xlcnAocC5wYXRoMnNoYXBlcyhlKSxwLnBhdGgyc2hhcGVzKHQpLG4pfSxwLk1JTV9DVVJWRVNfQ09VTlQ9MTAwLHAuX3ByZXByb2Nlc3Npbmc9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmxlbmd0aCxvPXQubGVuZ3RoLHI9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlKSksaT1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHQpKTtyZXR1cm4gbj5vP2goaSxuLW8pOm48byYmaChyLG8tbiksKHI9ZChyLGkpKS5mb3JFYWNoKChmdW5jdGlvbihlLHQpe3ZhciBuPWUubGVuZ3RoLG89aVt0XS5sZW5ndGg7bj5vP248cC5NSU1fQ1VSVkVTX0NPVU5UPyhwLl9zcGxpdEN1cnZlcyhlLHAuTUlNX0NVUlZFU19DT1VOVC1uKSxwLl9zcGxpdEN1cnZlcyhpW3RdLHAuTUlNX0NVUlZFU19DT1VOVC1vKSk6cC5fc3BsaXRDdXJ2ZXMoaVt0XSxuLW8pOm48byYmKG88cC5NSU1fQ1VSVkVTX0NPVU5UPyhwLl9zcGxpdEN1cnZlcyhlLHAuTUlNX0NVUlZFU19DT1VOVC1uKSxwLl9zcGxpdEN1cnZlcyhpW3RdLHAuTUlNX0NVUlZFU19DT1VOVC1vKSk6cC5fc3BsaXRDdXJ2ZXMoZSxvLW4pKX0pKSxyLmZvckVhY2goKGZ1bmN0aW9uKGUsdCl7clt0XT11KGUsaVt0XSl9KSksW3IsaV19LHAuX2xlcnA9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPVtdO3JldHVybiBlLmZvckVhY2goKGZ1bmN0aW9uKGUscil7dmFyIGk9W107ZS5mb3JFYWNoKChmdW5jdGlvbihlLG8pe2kucHVzaChwLmxlcnBDdXJ2ZShlLHRbcl1bb10sbikpfSkpLG8ucHVzaChpKX0pKSxvfSxwLmFuaW1hdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9cC5wYXRoMnNoYXBlcyhlLmZyb20pLG49cC5wYXRoMnNoYXBlcyhlLnRvKSxvPXAuX3ByZXByb2Nlc3NpbmcodCxuKSxyPW5ldyBEYXRlLGk9ZS5lbmR8fGZ1bmN0aW9uKCl7fSxhPWUucHJvZ3Jlc3N8fGZ1bmN0aW9uKCl7fSxzPWUuYmVnaW58fGZ1bmN0aW9uKCl7fSxsPWUuZWFzaW5nfHxmdW5jdGlvbihlKXtyZXR1cm4gZX0sYz1udWxsLHU9bnVsbCxkPWUudGltZTtzKHQpLGZ1bmN0aW9uIGUoKXt2YXIgdD1uZXcgRGF0ZS1yO2lmKHQ+PWQpcmV0dXJuIGEodT1uLDEpLGkodSksdm9pZCBjYW5jZWxBbmltYXRpb25GcmFtZShjKTt2YXIgcz1sKHQvZCk7dT1wLl9sZXJwKG9bMF0sb1sxXSxzKSxhKHUscyksYz1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZSl9KCl9LHB9LFwib2JqZWN0XCI9PT1hKHQpJiZ2b2lkIDAhPT1lP2UuZXhwb3J0cz1pKCk6dm9pZCAwPT09KHI9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1pKT9vLmNhbGwodCxuLHQsZSk6byl8fChlLmV4cG9ydHM9cil9LFwiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7dmFyIG8scixpPXt9LGE9KG89ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93JiZkb2N1bWVudCYmZG9jdW1lbnQuYWxsJiYhd2luZG93LmF0b2J9LGZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PXImJihyPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpKSxyfSkscz1mdW5jdGlvbihlKXtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKX0sbD1mdW5jdGlvbihlKXt2YXIgdD17fTtyZXR1cm4gZnVuY3Rpb24oZSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZSlyZXR1cm4gZSgpO2lmKHZvaWQgMD09PXRbZV0pe3ZhciBuPXMuY2FsbCh0aGlzLGUpO2lmKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCYmbiBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCl0cnl7bj1uLmNvbnRlbnREb2N1bWVudC5oZWFkfWNhdGNoKGUpe249bnVsbH10W2VdPW59cmV0dXJuIHRbZV19fSgpLGM9bnVsbCx1PTAsZD1bXSxwPW4oLyohIC4vdXJscyAqL1wiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzXCIpO2Z1bmN0aW9uIGYoZSx0KXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIG89ZVtuXSxyPWlbby5pZF07aWYocil7ci5yZWZzKys7Zm9yKHZhciBhPTA7YTxyLnBhcnRzLmxlbmd0aDthKyspci5wYXJ0c1thXShvLnBhcnRzW2FdKTtmb3IoO2E8by5wYXJ0cy5sZW5ndGg7YSsrKXIucGFydHMucHVzaChiKG8ucGFydHNbYV0sdCkpfWVsc2V7dmFyIHM9W107Zm9yKGE9MDthPG8ucGFydHMubGVuZ3RoO2ErKylzLnB1c2goYihvLnBhcnRzW2FdLHQpKTtpW28uaWRdPXtpZDpvLmlkLHJlZnM6MSxwYXJ0czpzfX19fWZ1bmN0aW9uIGgoZSx0KXtmb3IodmFyIG49W10sbz17fSxyPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBpPWVbcl0sYT10LmJhc2U/aVswXSt0LmJhc2U6aVswXSxzPXtjc3M6aVsxXSxtZWRpYTppWzJdLHNvdXJjZU1hcDppWzNdfTtvW2FdP29bYV0ucGFydHMucHVzaChzKTpuLnB1c2gob1thXT17aWQ6YSxwYXJ0czpbc119KX1yZXR1cm4gbn1mdW5jdGlvbiBnKGUsdCl7dmFyIG49bChlLmluc2VydEludG8pO2lmKCFuKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO3ZhciBvPWRbZC5sZW5ndGgtMV07aWYoXCJ0b3BcIj09PWUuaW5zZXJ0QXQpbz9vLm5leHRTaWJsaW5nP24uaW5zZXJ0QmVmb3JlKHQsby5uZXh0U2libGluZyk6bi5hcHBlbmRDaGlsZCh0KTpuLmluc2VydEJlZm9yZSh0LG4uZmlyc3RDaGlsZCksZC5wdXNoKHQpO2Vsc2UgaWYoXCJib3R0b21cIj09PWUuaW5zZXJ0QXQpbi5hcHBlbmRDaGlsZCh0KTtlbHNle2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLmluc2VydEF0fHwhZS5pbnNlcnRBdC5iZWZvcmUpdGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7dmFyIHI9bChlLmluc2VydEludG8rXCIgXCIrZS5pbnNlcnRBdC5iZWZvcmUpO24uaW5zZXJ0QmVmb3JlKHQscil9fWZ1bmN0aW9uIHYoZSl7aWYobnVsbD09PWUucGFyZW50Tm9kZSlyZXR1cm4hMTtlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7dmFyIHQ9ZC5pbmRleE9mKGUpO3Q+PTAmJmQuc3BsaWNlKHQsMSl9ZnVuY3Rpb24gbShlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7cmV0dXJuIGUuYXR0cnMudHlwZT1cInRleHQvY3NzXCIseSh0LGUuYXR0cnMpLGcoZSx0KSx0fWZ1bmN0aW9uIHkoZSx0KXtPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChmdW5jdGlvbihuKXtlLnNldEF0dHJpYnV0ZShuLHRbbl0pfSkpfWZ1bmN0aW9uIGIoZSx0KXt2YXIgbixvLHIsaTtpZih0LnRyYW5zZm9ybSYmZS5jc3Mpe2lmKCEoaT10LnRyYW5zZm9ybShlLmNzcykpKXJldHVybiBmdW5jdGlvbigpe307ZS5jc3M9aX1pZih0LnNpbmdsZXRvbil7dmFyIGE9dSsrO249Y3x8KGM9bSh0KSksbz1fLmJpbmQobnVsbCxuLGEsITEpLHI9Xy5iaW5kKG51bGwsbixhLCEwKX1lbHNlIGUuc291cmNlTWFwJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIEJsb2ImJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2E/KG49ZnVuY3Rpb24oZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7cmV0dXJuIGUuYXR0cnMudHlwZT1cInRleHQvY3NzXCIsZS5hdHRycy5yZWw9XCJzdHlsZXNoZWV0XCIseSh0LGUuYXR0cnMpLGcoZSx0KSx0fSh0KSxvPUUuYmluZChudWxsLG4sdCkscj1mdW5jdGlvbigpe3Yobiksbi5ocmVmJiZVUkwucmV2b2tlT2JqZWN0VVJMKG4uaHJlZil9KToobj1tKHQpLG89ay5iaW5kKG51bGwsbikscj1mdW5jdGlvbigpe3Yobil9KTtyZXR1cm4gbyhlKSxmdW5jdGlvbih0KXtpZih0KXtpZih0LmNzcz09PWUuY3NzJiZ0Lm1lZGlhPT09ZS5tZWRpYSYmdC5zb3VyY2VNYXA9PT1lLnNvdXJjZU1hcClyZXR1cm47byhlPXQpfWVsc2UgcigpfX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgREVCVUcmJkRFQlVHJiZcIm9iamVjdFwiIT10eXBlb2YgZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpOyh0PXR8fHt9KS5hdHRycz1cIm9iamVjdFwiPT10eXBlb2YgdC5hdHRycz90LmF0dHJzOnt9LHQuc2luZ2xldG9ufHxcImJvb2xlYW5cIj09dHlwZW9mIHQuc2luZ2xldG9ufHwodC5zaW5nbGV0b249YSgpKSx0Lmluc2VydEludG98fCh0Lmluc2VydEludG89XCJoZWFkXCIpLHQuaW5zZXJ0QXR8fCh0Lmluc2VydEF0PVwiYm90dG9tXCIpO3ZhciBuPWgoZSx0KTtyZXR1cm4gZihuLHQpLGZ1bmN0aW9uKGUpe2Zvcih2YXIgbz1bXSxyPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBhPW5bcl07KHM9aVthLmlkXSkucmVmcy0tLG8ucHVzaChzKX1lJiZmKGgoZSx0KSx0KTtmb3Iocj0wO3I8by5sZW5ndGg7cisrKXt2YXIgcztpZigwPT09KHM9b1tyXSkucmVmcyl7Zm9yKHZhciBsPTA7bDxzLnBhcnRzLmxlbmd0aDtsKyspcy5wYXJ0c1tsXSgpO2RlbGV0ZSBpW3MuaWRdfX19fTt2YXIgeCx3PSh4PVtdLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHhbZV09dCx4LmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpfSk7ZnVuY3Rpb24gXyhlLHQsbixvKXt2YXIgcj1uP1wiXCI6by5jc3M7aWYoZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PXcodCxyKTtlbHNle3ZhciBpPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpLGE9ZS5jaGlsZE5vZGVzO2FbdF0mJmUucmVtb3ZlQ2hpbGQoYVt0XSksYS5sZW5ndGg/ZS5pbnNlcnRCZWZvcmUoaSxhW3RdKTplLmFwcGVuZENoaWxkKGkpfX1mdW5jdGlvbiBrKGUsdCl7dmFyIG49dC5jc3Msbz10Lm1lZGlhO2lmKG8mJmUuc2V0QXR0cmlidXRlKFwibWVkaWFcIixvKSxlLnN0eWxlU2hlZXQpZS5zdHlsZVNoZWV0LmNzc1RleHQ9bjtlbHNle2Zvcig7ZS5maXJzdENoaWxkOyllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKSl9fWZ1bmN0aW9uIEUoZSx0LG4pe3ZhciBvPW4uY3NzLHI9bi5zb3VyY2VNYXAsaT12b2lkIDA9PT10LmNvbnZlcnRUb0Fic29sdXRlVXJscyYmcjsodC5jb252ZXJ0VG9BYnNvbHV0ZVVybHN8fGkpJiYobz1wKG8pKSxyJiYobys9XCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHIpKSkpK1wiICovXCIpO3ZhciBhPW5ldyBCbG9iKFtvXSx7dHlwZTpcInRleHQvY3NzXCJ9KSxzPWUuaHJlZjtlLmhyZWY9VVJMLmNyZWF0ZU9iamVjdFVSTChhKSxzJiZVUkwucmV2b2tlT2JqZWN0VVJMKHMpfX0sXCIuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5sb2NhdGlvbjtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtpZighZXx8XCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIGU7dmFyIG49dC5wcm90b2NvbCtcIi8vXCIrdC5ob3N0LG89bit0LnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLyxcIi9cIik7cmV0dXJuIGUucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksKGZ1bmN0aW9uKGUsdCl7dmFyIHIsaT10LnRyaW0oKS5yZXBsYWNlKC9eXCIoLiopXCIkLywoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdH0pKS5yZXBsYWNlKC9eJyguKiknJC8sKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR9KSk7cmV0dXJuL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdChpKT9lOihyPTA9PT1pLmluZGV4T2YoXCIvL1wiKT9pOjA9PT1pLmluZGV4T2YoXCIvXCIpP24raTpvK2kucmVwbGFjZSgvXlxcLlxcLy8sXCJcIiksXCJ1cmwoXCIrSlNPTi5zdHJpbmdpZnkocikrXCIpXCIpfSkpfX0sXCIuL25vZGVfbW9kdWxlcy90eXBlL2Z1bmN0aW9uL2lzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvdHlwZS9mdW5jdGlvbi9pcy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oLyohIC4uL3Byb3RvdHlwZS9pcyAqL1wiLi9ub2RlX21vZHVsZXMvdHlwZS9wcm90b3R5cGUvaXMuanNcIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpcmV0dXJuITE7aWYoIWhhc093blByb3BlcnR5LmNhbGwoZSxcImxlbmd0aFwiKSlyZXR1cm4hMTt0cnl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUubGVuZ3RoKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUuY2FsbClyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlLmFwcGx5KXJldHVybiExfWNhdGNoKGUpe3JldHVybiExfXJldHVybiFvKGUpfX0sXCIuL25vZGVfbW9kdWxlcy90eXBlL29iamVjdC9pcy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy90eXBlL29iamVjdC9pcy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxyPW4oLyohIC4uL3ZhbHVlL2lzICovXCIuL25vZGVfbW9kdWxlcy90eXBlL3ZhbHVlL2lzLmpzXCIpLGk9e29iamVjdDohMCxmdW5jdGlvbjohMCx1bmRlZmluZWQ6ITB9O2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4hIXIoZSkmJmhhc093blByb3BlcnR5LmNhbGwoaSx2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6byhlKSl9fSxcIi4vbm9kZV9tb2R1bGVzL3R5cGUvcGxhaW4tZnVuY3Rpb24vaXMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy90eXBlL3BsYWluLWZ1bmN0aW9uL2lzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigvKiEgLi4vZnVuY3Rpb24vaXMgKi9cIi4vbm9kZV9tb2R1bGVzL3R5cGUvZnVuY3Rpb24vaXMuanNcIikscj0vXlxccypjbGFzc1tcXHN7XFwvfV0vLGk9RnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4hIW8oZSkmJiFyLnRlc3QoaS5jYWxsKGUpKX19LFwiLi9ub2RlX21vZHVsZXMvdHlwZS9wcm90b3R5cGUvaXMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvdHlwZS9wcm90b3R5cGUvaXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigvKiEgLi4vb2JqZWN0L2lzICovXCIuL25vZGVfbW9kdWxlcy90eXBlL29iamVjdC9pcy5qc1wiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIW8oZSkpcmV0dXJuITE7dHJ5e3JldHVybiEhZS5jb25zdHJ1Y3RvciYmZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU9PT1lfWNhdGNoKGUpe3JldHVybiExfX19LFwiLi9ub2RlX21vZHVsZXMvdHlwZS92YWx1ZS9pcy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3R5cGUvdmFsdWUvaXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWV9fSxcIi4vbm9kZV9tb2R1bGVzL3VuaWRyYWdnZXIvdW5pZHJhZ2dlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvdW5pZHJhZ2dlci91bmlkcmFnZ2VyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyO1wiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuLyohXG4gKiBVbmlkcmFnZ2VyIHYyLjMuMFxuICogRHJhZ2dhYmxlIGJhc2UgY2xhc3NcbiAqIE1JVCBsaWNlbnNlXG4gKi9cbiFmdW5jdGlvbihpLGEpe289W24oLyohIHVuaXBvaW50ZXIvdW5pcG9pbnRlciAqL1wiLi9ub2RlX21vZHVsZXMvdW5pcG9pbnRlci91bmlwb2ludGVyLmpzXCIpXSx2b2lkIDA9PT0ocj1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKCl7fXZhciBvPW4ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpO28uYmluZEhhbmRsZXM9ZnVuY3Rpb24oKXt0aGlzLl9iaW5kSGFuZGxlcyghMCl9LG8udW5iaW5kSGFuZGxlcz1mdW5jdGlvbigpe3RoaXMuX2JpbmRIYW5kbGVzKCExKX0sby5fYmluZEhhbmRsZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBuPSh0PXZvaWQgMD09PXR8fHQpP1wiYWRkRXZlbnRMaXN0ZW5lclwiOlwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiLG89dD90aGlzLl90b3VjaEFjdGlvblZhbHVlOlwiXCIscj0wO3I8dGhpcy5oYW5kbGVzLmxlbmd0aDtyKyspe3ZhciBpPXRoaXMuaGFuZGxlc1tyXTt0aGlzLl9iaW5kU3RhcnRFdmVudChpLHQpLGlbbl0oXCJjbGlja1wiLHRoaXMpLGUuUG9pbnRlckV2ZW50JiYoaS5zdHlsZS50b3VjaEFjdGlvbj1vKX19LG8uX3RvdWNoQWN0aW9uVmFsdWU9XCJub25lXCIsby5wb2ludGVyRG93bj1mdW5jdGlvbihlLHQpe3RoaXMub2theVBvaW50ZXJEb3duKGUpJiYodGhpcy5wb2ludGVyRG93blBvaW50ZXI9dCxlLnByZXZlbnREZWZhdWx0KCksdGhpcy5wb2ludGVyRG93bkJsdXIoKSx0aGlzLl9iaW5kUG9zdFN0YXJ0RXZlbnRzKGUpLHRoaXMuZW1pdEV2ZW50KFwicG9pbnRlckRvd25cIixbZSx0XSkpfTt2YXIgcj17VEVYVEFSRUE6ITAsSU5QVVQ6ITAsU0VMRUNUOiEwLE9QVElPTjohMH0saT17cmFkaW86ITAsY2hlY2tib3g6ITAsYnV0dG9uOiEwLHN1Ym1pdDohMCxpbWFnZTohMCxmaWxlOiEwfTtyZXR1cm4gby5va2F5UG9pbnRlckRvd249ZnVuY3Rpb24oZSl7dmFyIHQ9cltlLnRhcmdldC5ub2RlTmFtZV0sbj1pW2UudGFyZ2V0LnR5cGVdLG89IXR8fG47cmV0dXJuIG98fHRoaXMuX3BvaW50ZXJSZXNldCgpLG99LG8ucG9pbnRlckRvd25CbHVyPWZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtlJiZlLmJsdXImJmUhPWRvY3VtZW50LmJvZHkmJmUuYmx1cigpfSxvLnBvaW50ZXJNb3ZlPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5fZHJhZ1BvaW50ZXJNb3ZlKGUsdCk7dGhpcy5lbWl0RXZlbnQoXCJwb2ludGVyTW92ZVwiLFtlLHQsbl0pLHRoaXMuX2RyYWdNb3ZlKGUsdCxuKX0sby5fZHJhZ1BvaW50ZXJNb3ZlPWZ1bmN0aW9uKGUsdCl7dmFyIG49e3g6dC5wYWdlWC10aGlzLnBvaW50ZXJEb3duUG9pbnRlci5wYWdlWCx5OnQucGFnZVktdGhpcy5wb2ludGVyRG93blBvaW50ZXIucGFnZVl9O3JldHVybiF0aGlzLmlzRHJhZ2dpbmcmJnRoaXMuaGFzRHJhZ1N0YXJ0ZWQobikmJnRoaXMuX2RyYWdTdGFydChlLHQpLG59LG8uaGFzRHJhZ1N0YXJ0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIE1hdGguYWJzKGUueCk+M3x8TWF0aC5hYnMoZS55KT4zfSxvLnBvaW50ZXJVcD1mdW5jdGlvbihlLHQpe3RoaXMuZW1pdEV2ZW50KFwicG9pbnRlclVwXCIsW2UsdF0pLHRoaXMuX2RyYWdQb2ludGVyVXAoZSx0KX0sby5fZHJhZ1BvaW50ZXJVcD1mdW5jdGlvbihlLHQpe3RoaXMuaXNEcmFnZ2luZz90aGlzLl9kcmFnRW5kKGUsdCk6dGhpcy5fc3RhdGljQ2xpY2soZSx0KX0sby5fZHJhZ1N0YXJ0PWZ1bmN0aW9uKGUsdCl7dGhpcy5pc0RyYWdnaW5nPSEwLHRoaXMuaXNQcmV2ZW50aW5nQ2xpY2tzPSEwLHRoaXMuZHJhZ1N0YXJ0KGUsdCl9LG8uZHJhZ1N0YXJ0PWZ1bmN0aW9uKGUsdCl7dGhpcy5lbWl0RXZlbnQoXCJkcmFnU3RhcnRcIixbZSx0XSl9LG8uX2RyYWdNb3ZlPWZ1bmN0aW9uKGUsdCxuKXt0aGlzLmlzRHJhZ2dpbmcmJnRoaXMuZHJhZ01vdmUoZSx0LG4pfSxvLmRyYWdNb3ZlPWZ1bmN0aW9uKGUsdCxuKXtlLnByZXZlbnREZWZhdWx0KCksdGhpcy5lbWl0RXZlbnQoXCJkcmFnTW92ZVwiLFtlLHQsbl0pfSxvLl9kcmFnRW5kPWZ1bmN0aW9uKGUsdCl7dGhpcy5pc0RyYWdnaW5nPSExLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtkZWxldGUgdGhpcy5pc1ByZXZlbnRpbmdDbGlja3N9LmJpbmQodGhpcykpLHRoaXMuZHJhZ0VuZChlLHQpfSxvLmRyYWdFbmQ9ZnVuY3Rpb24oZSx0KXt0aGlzLmVtaXRFdmVudChcImRyYWdFbmRcIixbZSx0XSl9LG8ub25jbGljaz1mdW5jdGlvbihlKXt0aGlzLmlzUHJldmVudGluZ0NsaWNrcyYmZS5wcmV2ZW50RGVmYXVsdCgpfSxvLl9zdGF0aWNDbGljaz1mdW5jdGlvbihlLHQpe3RoaXMuaXNJZ25vcmluZ01vdXNlVXAmJlwibW91c2V1cFwiPT1lLnR5cGV8fCh0aGlzLnN0YXRpY0NsaWNrKGUsdCksXCJtb3VzZXVwXCIhPWUudHlwZSYmKHRoaXMuaXNJZ25vcmluZ01vdXNlVXA9ITAsc2V0VGltZW91dChmdW5jdGlvbigpe2RlbGV0ZSB0aGlzLmlzSWdub3JpbmdNb3VzZVVwfS5iaW5kKHRoaXMpLDQwMCkpKX0sby5zdGF0aWNDbGljaz1mdW5jdGlvbihlLHQpe3RoaXMuZW1pdEV2ZW50KFwic3RhdGljQ2xpY2tcIixbZSx0XSl9LG4uZ2V0UG9pbnRlclBvaW50PXQuZ2V0UG9pbnRlclBvaW50LG59KGksZSl9LmFwcGx5KHQsbykpfHwoZS5leHBvcnRzPXIpfSh3aW5kb3cpfSxcIi4vbm9kZV9tb2R1bGVzL3VuaXBvaW50ZXIvdW5pcG9pbnRlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvdW5pcG9pbnRlci91bmlwb2ludGVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyO1wiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuLyohXG4gKiBVbmlwb2ludGVyIHYyLjMuMFxuICogYmFzZSBjbGFzcyBmb3IgZG9pbmcgb25lIHRoaW5nIHdpdGggcG9pbnRlciBldmVudFxuICogTUlUIGxpY2Vuc2VcbiAqL1xuIWZ1bmN0aW9uKGksYSl7bz1bbigvKiEgZXYtZW1pdHRlci9ldi1lbWl0dGVyICovXCIuL25vZGVfbW9kdWxlcy9ldi1lbWl0dGVyL2V2LWVtaXR0ZXIuanNcIildLHZvaWQgMD09PShyPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oKXt9dmFyIG89bi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7by5iaW5kU3RhcnRFdmVudD1mdW5jdGlvbihlKXt0aGlzLl9iaW5kU3RhcnRFdmVudChlLCEwKX0sby51bmJpbmRTdGFydEV2ZW50PWZ1bmN0aW9uKGUpe3RoaXMuX2JpbmRTdGFydEV2ZW50KGUsITEpfSxvLl9iaW5kU3RhcnRFdmVudD1mdW5jdGlvbih0LG4pe3ZhciBvPShuPXZvaWQgMD09PW58fG4pP1wiYWRkRXZlbnRMaXN0ZW5lclwiOlwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiLHI9XCJtb3VzZWRvd25cIjtlLlBvaW50ZXJFdmVudD9yPVwicG9pbnRlcmRvd25cIjpcIm9udG91Y2hzdGFydFwiaW4gZSYmKHI9XCJ0b3VjaHN0YXJ0XCIpLHRbb10ocix0aGlzKX0sby5oYW5kbGVFdmVudD1mdW5jdGlvbihlKXt2YXIgdD1cIm9uXCIrZS50eXBlO3RoaXNbdF0mJnRoaXNbdF0oZSl9LG8uZ2V0VG91Y2g9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciBuPWVbdF07aWYobi5pZGVudGlmaWVyPT10aGlzLnBvaW50ZXJJZGVudGlmaWVyKXJldHVybiBufX0sby5vbm1vdXNlZG93bj1mdW5jdGlvbihlKXt2YXIgdD1lLmJ1dHRvbjt0JiYwIT09dCYmMSE9PXR8fHRoaXMuX3BvaW50ZXJEb3duKGUsZSl9LG8ub250b3VjaHN0YXJ0PWZ1bmN0aW9uKGUpe3RoaXMuX3BvaW50ZXJEb3duKGUsZS5jaGFuZ2VkVG91Y2hlc1swXSl9LG8ub25wb2ludGVyZG93bj1mdW5jdGlvbihlKXt0aGlzLl9wb2ludGVyRG93bihlLGUpfSxvLl9wb2ludGVyRG93bj1mdW5jdGlvbihlLHQpe2UuYnV0dG9ufHx0aGlzLmlzUG9pbnRlckRvd258fCh0aGlzLmlzUG9pbnRlckRvd249ITAsdGhpcy5wb2ludGVySWRlbnRpZmllcj12b2lkIDAhPT10LnBvaW50ZXJJZD90LnBvaW50ZXJJZDp0LmlkZW50aWZpZXIsdGhpcy5wb2ludGVyRG93bihlLHQpKX0sby5wb2ludGVyRG93bj1mdW5jdGlvbihlLHQpe3RoaXMuX2JpbmRQb3N0U3RhcnRFdmVudHMoZSksdGhpcy5lbWl0RXZlbnQoXCJwb2ludGVyRG93blwiLFtlLHRdKX07dmFyIHI9e21vdXNlZG93bjpbXCJtb3VzZW1vdmVcIixcIm1vdXNldXBcIl0sdG91Y2hzdGFydDpbXCJ0b3VjaG1vdmVcIixcInRvdWNoZW5kXCIsXCJ0b3VjaGNhbmNlbFwiXSxwb2ludGVyZG93bjpbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlcnVwXCIsXCJwb2ludGVyY2FuY2VsXCJdfTtyZXR1cm4gby5fYmluZFBvc3RTdGFydEV2ZW50cz1mdW5jdGlvbih0KXtpZih0KXt2YXIgbj1yW3QudHlwZV07bi5mb3JFYWNoKChmdW5jdGlvbih0KXtlLmFkZEV2ZW50TGlzdGVuZXIodCx0aGlzKX0pLHRoaXMpLHRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cz1ufX0sby5fdW5iaW5kUG9zdFN0YXJ0RXZlbnRzPWZ1bmN0aW9uKCl7dGhpcy5fYm91bmRQb2ludGVyRXZlbnRzJiYodGhpcy5fYm91bmRQb2ludGVyRXZlbnRzLmZvckVhY2goKGZ1bmN0aW9uKHQpe2UucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LHRoaXMpfSksdGhpcyksZGVsZXRlIHRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cyl9LG8ub25tb3VzZW1vdmU9ZnVuY3Rpb24oZSl7dGhpcy5fcG9pbnRlck1vdmUoZSxlKX0sby5vbnBvaW50ZXJtb3ZlPWZ1bmN0aW9uKGUpe2UucG9pbnRlcklkPT10aGlzLnBvaW50ZXJJZGVudGlmaWVyJiZ0aGlzLl9wb2ludGVyTW92ZShlLGUpfSxvLm9udG91Y2htb3ZlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0VG91Y2goZS5jaGFuZ2VkVG91Y2hlcyk7dCYmdGhpcy5fcG9pbnRlck1vdmUoZSx0KX0sby5fcG9pbnRlck1vdmU9ZnVuY3Rpb24oZSx0KXt0aGlzLnBvaW50ZXJNb3ZlKGUsdCl9LG8ucG9pbnRlck1vdmU9ZnVuY3Rpb24oZSx0KXt0aGlzLmVtaXRFdmVudChcInBvaW50ZXJNb3ZlXCIsW2UsdF0pfSxvLm9ubW91c2V1cD1mdW5jdGlvbihlKXt0aGlzLl9wb2ludGVyVXAoZSxlKX0sby5vbnBvaW50ZXJ1cD1mdW5jdGlvbihlKXtlLnBvaW50ZXJJZD09dGhpcy5wb2ludGVySWRlbnRpZmllciYmdGhpcy5fcG9pbnRlclVwKGUsZSl9LG8ub250b3VjaGVuZD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmdldFRvdWNoKGUuY2hhbmdlZFRvdWNoZXMpO3QmJnRoaXMuX3BvaW50ZXJVcChlLHQpfSxvLl9wb2ludGVyVXA9ZnVuY3Rpb24oZSx0KXt0aGlzLl9wb2ludGVyRG9uZSgpLHRoaXMucG9pbnRlclVwKGUsdCl9LG8ucG9pbnRlclVwPWZ1bmN0aW9uKGUsdCl7dGhpcy5lbWl0RXZlbnQoXCJwb2ludGVyVXBcIixbZSx0XSl9LG8uX3BvaW50ZXJEb25lPWZ1bmN0aW9uKCl7dGhpcy5fcG9pbnRlclJlc2V0KCksdGhpcy5fdW5iaW5kUG9zdFN0YXJ0RXZlbnRzKCksdGhpcy5wb2ludGVyRG9uZSgpfSxvLl9wb2ludGVyUmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmlzUG9pbnRlckRvd249ITEsZGVsZXRlIHRoaXMucG9pbnRlcklkZW50aWZpZXJ9LG8ucG9pbnRlckRvbmU9ZnVuY3Rpb24oKXt9LG8ub25wb2ludGVyY2FuY2VsPWZ1bmN0aW9uKGUpe2UucG9pbnRlcklkPT10aGlzLnBvaW50ZXJJZGVudGlmaWVyJiZ0aGlzLl9wb2ludGVyQ2FuY2VsKGUsZSl9LG8ub250b3VjaGNhbmNlbD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmdldFRvdWNoKGUuY2hhbmdlZFRvdWNoZXMpO3QmJnRoaXMuX3BvaW50ZXJDYW5jZWwoZSx0KX0sby5fcG9pbnRlckNhbmNlbD1mdW5jdGlvbihlLHQpe3RoaXMuX3BvaW50ZXJEb25lKCksdGhpcy5wb2ludGVyQ2FuY2VsKGUsdCl9LG8ucG9pbnRlckNhbmNlbD1mdW5jdGlvbihlLHQpe3RoaXMuZW1pdEV2ZW50KFwicG9pbnRlckNhbmNlbFwiLFtlLHRdKX0sbi5nZXRQb2ludGVyUG9pbnQ9ZnVuY3Rpb24oZSl7cmV0dXJue3g6ZS5wYWdlWCx5OmUucGFnZVl9fSxufShpLGUpfS5hcHBseSh0LG8pKXx8KGUuZXhwb3J0cz1yKX0od2luZG93KX0sXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vbW9kdWxlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZS53ZWJwYWNrUG9seWZpbGx8fChlLmRlcHJlY2F0ZT1mdW5jdGlvbigpe30sZS5wYXRocz1bXSxlLmNoaWxkcmVufHwoZS5jaGlsZHJlbj1bXSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJsb2FkZWRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5sfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiaWRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5pfX0pLGUud2VicGFja1BvbHlmaWxsPTEpLGV9fSxcIi4vcGFja2FnZS5qc29uXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcGFja2FnZS5qc29uICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IG5hbWUsIHZlcnNpb24sIGRlc2NyaXB0aW9uLCBtYWluLCBzY3JpcHRzLCBrZXl3b3JkcywgYmFiZWwsIHJlcG9zaXRvcnksIGF1dGhvciwgbGljZW5zZSwgZGVwZW5kZW5jaWVzLCBicm93c2Vyc2xpc3QsIGRldkRlcGVuZGVuY2llcywgZGVmYXVsdCAqL2Z1bmN0aW9uKGUpe2UuZXhwb3J0cz1KU09OLnBhcnNlKCd7XCJuYW1lXCI6XCJ4Z3BsYXllclwiLFwidmVyc2lvblwiOlwiMS4xLjYtYWxwaGEuMFwiLFwiZGVzY3JpcHRpb25cIjpcInZpZGVvIHBsYXllclwiLFwibWFpblwiOlwiLi9kaXN0L2luZGV4LmpzXCIsXCJzY3JpcHRzXCI6e1wicHJlcGFyZVwiOlwibnBtIHJ1biBidWlsZFwiLFwiYnVpbGRcIjpcIndlYnBhY2sgLS1wcm9ncmVzcyAtLWRpc3BsYXktY2h1bmtzIC1wXCIsXCJ3YXRjaFwiOlwid2VicGFjayAtLXByb2dyZXNzIC0tZGlzcGxheS1jaHVua3MgLXAgLS13YXRjaCAtLW1vZGUgZGV2ZWxvcG1lbnRcIixcInRlc3RcIjpcImthcm1hIHN0YXJ0IC0tc2luZ2xlLXJ1blwiLFwidGVzdDp3YXRjaFwiOlwia2FybWEgc3RhcnRcIn0sXCJrZXl3b3Jkc1wiOltcInZpZGVvXCIsXCJwbGF5ZXJcIl0sXCJiYWJlbFwiOntcInByZXNldHNcIjpbXCJlczIwMTVcIl0sXCJwbHVnaW5zXCI6W1wiYWRkLW1vZHVsZS1leHBvcnRzXCIsXCJiYWJlbC1wbHVnaW4tYnVsay1pbXBvcnRcIl19LFwicmVwb3NpdG9yeVwiOntcInR5cGVcIjpcImdpdFwiLFwidXJsXCI6XCJnaXQraHR0cHM6Ly9naXRodWIuY29tL2J5dGVkYW5jZS94Z3BsYXllci5naXRcIn0sXCJhdXRob3JcIjpcInlpbmd1b2h1aUBieXRlZGFuY2UuY29tXCIsXCJsaWNlbnNlXCI6XCJNSVRcIixcImRlcGVuZGVuY2llc1wiOntcImRhbm11LmpzXCI6XCIwLjEuMFwiLFwiZGVlcG1lcmdlXCI6XCJeMS41LjBcIixcImRvd25sb2FkanNcIjpcIjEuNC43XCIsXCJkcmFnZ2FiaWxseVwiOlwiXjIuMi4wXCIsXCJldmVudC1lbWl0dGVyXCI6XCJeMC4zLjVcIixcInBhc2l0aW9uXCI6XCJeMS4wLjFcIixcInJlcXVlc3QtZnJhbWVcIjpcIl4xLjUuM1wifSxcImJyb3dzZXJzbGlzdFwiOltcIj4gNSVcIixcIklFIDlcIixcImlPUyA3XCIsXCJGaXJlZm94ID4gMjBcIl0sXCJkZXZEZXBlbmRlbmNpZXNcIjp7XCJhdXRvcHJlZml4ZXJcIjpcIl45LjEuNVwiLFwiYmFiZWwtY29yZVwiOlwiXjYuMjYuM1wiLFwiYmFiZWwtbG9hZGVyXCI6XCJeNy4xLjRcIixcImJhYmVsLXBsdWdpbi1hZGQtbW9kdWxlLWV4cG9ydHNcIjpcIl4wLjIuMVwiLFwiYmFiZWwtcGx1Z2luLWJ1bGstaW1wb3J0XCI6XCJeMS4wLjJcIixcImJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXCI6XCJeNi4yNi4wXCIsXCJiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXJ1bnRpbWVcIjpcIl42LjIzLjBcIixcImJhYmVsLXByZXNldC1lczIwMTVcIjpcIl42LjI0LjFcIixcImNoYWlcIjpcIl40LjEuMlwiLFwiY29yZS1qc1wiOlwiXjIuNS40XCIsXCJjc3MtbG9hZGVyXCI6XCJeMC4yOC4xMVwiLFwianNvbi1sb2FkZXJcIjpcIl4wLjUuN1wiLFwia2FybWFcIjpcIl4zLjAuMFwiLFwia2FybWEtY2hyb21lLWxhdW5jaGVyXCI6XCJeMi4yLjBcIixcImthcm1hLW1vY2hhXCI6XCJeMS4zLjBcIixcImthcm1hLXNvdXJjZW1hcC1sb2FkZXJcIjpcIl4wLjMuN1wiLFwia2FybWEtc3BlYy1yZXBvcnRlclwiOlwiMC4wLjMyXCIsXCJrYXJtYS13ZWJwYWNrXCI6XCJeNC4wLjAtcmMuMVwiLFwibW9jaGFcIjpcIl41LjIuMFwiLFwibm9kZS1zYXNzXCI6XCJeNC44LjNcIixcInBvc3Rjc3MtY3NzbmV4dFwiOlwiXjMuMS4wXCIsXCJwb3N0Y3NzLWxvYWRlclwiOlwiXjIuMS41XCIsXCJzYXNzLWxvYWRlclwiOlwiXjYuMC43XCIsXCJzdHlsZS1sb2FkZXJcIjpcIl4wLjIwLjNcIixcInN1Z2Fyc3NcIjpcIl4xLjAuMVwiLFwid2VicGFja1wiOlwiXjQuMTEuMFwiLFwid2VicGFjay1jbGlcIjpcIl4zLjAuMlwiLFwiemxpYlwiOlwiXjEuMC41XCJ9fScpfSxcIi4vc3JjL2NvbnRyb2wvY29sbGVjdC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9jb2xsZWN0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxyPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPWFyZ3VtZW50c1t0XTtmb3IodmFyIG8gaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixvKSYmKGVbb109bltvXSl9cmV0dXJuIGV9O3ZhciBpPXZvaWQgMCxhPWZ1bmN0aW9uIGUoKXt2YXIgdD10aGlzOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5zZXQ9ZnVuY3Rpb24oZSxuKXt2YXIgbz1lLHI9bjtpZihudWxsPT09cilyZXR1cm4hMTt2YXIgaT1cIlwiO2lmKG8uaW5kZXhPZihcIi5cIik+LTEpe3ZhciBhPW8uc3BsaXQoXCIuXCIpO2k9YVswXSxvPWFbMV19XCJvc192ZXJzaW9uXCI9PT1vJiYocj1cIlwiK3IpLGk/XCJ1c2VyXCI9PT1pfHxcImhlYWRlclwiPT09aT90LmVudkluZm9baV1bb109cjpcImhlYWRlcnNcIj09PWk/dC5lbnZJbmZvLmhlYWRlci5oZWFkZXJzW29dPXI6dC5lbnZJbmZvLmhlYWRlci5oZWFkZXJzLmN1c3RvbVtvXT1yOnQuZW52SW5mby51c2VyLmhhc093blByb3BlcnR5KG8pP1tcInVzZXJfdHlwZVwiLFwiZGV2aWNlX2lkXCIsXCJpcF9hZGRyX2lkXCJdLmluZGV4T2Yobyk+LTE/dC5lbnZJbmZvLnVzZXJbb109TnVtYmVyKHIpOltcInVzZXJfaWRcIixcIndlYl9pZFwiLFwidXNlcl91bmlxdWVfaWRcIixcInNzaWRcIl0uaW5kZXhPZihvKT4tMT90LmVudkluZm8udXNlcltvXT1TdHJpbmcocik6W1widXNlcl9pc19hdXRoXCIsXCJ1c2VyX2lzX2xvZ2luXCJdLmluZGV4T2Yobyk+LTEmJih0LmVudkluZm8udXNlcltvXT1Cb29sZWFuKHIpKTp0LmVudkluZm8uaGVhZGVyLmhhc093blByb3BlcnR5KG8pP3QuZW52SW5mby5oZWFkZXJbb109cjp0LmVudkluZm8uaGVhZGVyLmhlYWRlcnMuaGFzT3duUHJvcGVydHkobyk/dC5lbnZJbmZvLmhlYWRlci5oZWFkZXJzW29dPXI6dC5lbnZJbmZvLmhlYWRlci5oZWFkZXJzLmN1c3RvbVtvXT1yfSx0aGlzLmdldD1mdW5jdGlvbigpe3ZhciBlPXt1c2VyOnt9LGhlYWRlcjp7aGVhZGVyczp7Y3VzdG9tOnt9fX19LG49dC5lbnZJbmZvLG89bi51c2VyLGE9T2JqZWN0LmtleXMobykscz1BcnJheS5pc0FycmF5KGEpLGw9MDtmb3IoYT1zP2E6YVtTeW1ib2wuaXRlcmF0b3JdKCk7Oyl7dmFyIGM7aWYocyl7aWYobD49YS5sZW5ndGgpYnJlYWs7Yz1hW2wrK119ZWxzZXtpZigobD1hLm5leHQoKSkuZG9uZSlicmVhaztjPWwudmFsdWV9dmFyIHU9YztvW3VdIT09aSYmKGUudXNlclt1XT1vW3VdKX12YXIgZD1uLmhlYWRlcixwPU9iamVjdC5rZXlzKGQpLGY9QXJyYXkuaXNBcnJheShwKSxoPTA7Zm9yKHA9Zj9wOnBbU3ltYm9sLml0ZXJhdG9yXSgpOzspe3ZhciBnO2lmKGYpe2lmKGg+PXAubGVuZ3RoKWJyZWFrO2c9cFtoKytdfWVsc2V7aWYoKGg9cC5uZXh0KCkpLmRvbmUpYnJlYWs7Zz1oLnZhbHVlfXZhciB2PWc7ZFt2XSE9PWkmJlwiaGVhZGVyc1wiIT09diYmKGUuaGVhZGVyW3ZdPWRbdl0pfXZhciBtPW4uaGVhZGVyLmhlYWRlcnMseT1PYmplY3Qua2V5cyhtKSxiPUFycmF5LmlzQXJyYXkoeSkseD0wO2Zvcih5PWI/eTp5W1N5bWJvbC5pdGVyYXRvcl0oKTs7KXt2YXIgdztpZihiKXtpZih4Pj15Lmxlbmd0aClicmVhazt3PXlbeCsrXX1lbHNle2lmKCh4PXkubmV4dCgpKS5kb25lKWJyZWFrO3c9eC52YWx1ZX12YXIgXz13O1wiY3VzdG9tXCIhPT1fJiZtW19dIT09aSYmKGUuaGVhZGVyLmhlYWRlcnNbX109bVtfXSl9dmFyIGs9bi5oZWFkZXIuaGVhZGVycy5jdXN0b20sRT1PYmplY3Qua2V5cyhrKTtpZihFLmxlbmd0aCl7dmFyIEM9RSxTPUFycmF5LmlzQXJyYXkoQyksUD0wO2ZvcihDPVM/QzpDW1N5bWJvbC5pdGVyYXRvcl0oKTs7KXt2YXIgajtpZihTKXtpZihQPj1DLmxlbmd0aClicmVhaztqPUNbUCsrXX1lbHNle2lmKChQPUMubmV4dCgpKS5kb25lKWJyZWFrO2o9UC52YWx1ZX12YXIgVD1qO2UuaGVhZGVyLmhlYWRlcnMuY3VzdG9tW1RdPWtbVF19fXJldHVybnt1c2VyOmUudXNlcixoZWFkZXI6cih7fSxlLmhlYWRlcix7aGVhZGVyczplLmhlYWRlci5oZWFkZXJzfSl9fSx0aGlzLmVudkluZm89e3VzZXI6e3VzZXJfdW5pcXVlX2lkOmksdXNlcl90eXBlOmksdXNlcl9pZDppLHVzZXJfaXNfYXV0aDppLHVzZXJfaXNfbG9naW46aSxkZXZpY2VfaWQ6aSx3ZWJfaWQ6aSxpcF9hZGRyX2lkOmksc3NpZDppfSxoZWFkZXI6e2FwcF9pZDppLGFwcF9uYW1lOmksYXBwX2luc3RhbGxfaWQ6aSxhcHBfcGFja2FnZTppLGFwcF9jaGFubmVsOmksYXBwX3ZlcnNpb246aSxvc19uYW1lOmksb3NfdmVyc2lvbjppLGRldmljZV9tb2RlbDppLGFiX2NsaWVudDppLGFiX3ZlcnNpb246aSx0cmFmZmljX3R5cGU6aSx1dG1fc291cmNlOmksdXRtX21lZGl1bTppLHV0bV9jYW1wYWlnbjppLGNsaWVudF9pcDppLGRldmljZV9icmFuZDppLG9zX2FwaTppLGFjY2VzczppLGxhbmd1YWdlOmkscmVnaW9uOmksYXBwX2xhbmd1YWdlOmksYXBwX3JlZ2lvbjppLGNyZWF0aXZlX2lkOmksYWRfaWQ6aSxjYW1wYWlnbl9pZDppLGxvZ190eXBlOmkscm5kOmkscGxhdGZvcm06aSxzZGtfdmVyc2lvbjppLHByb3ZpbmNlOmksY2l0eTppLHRpbWV6b25lOmksdHpfb2Zmc2V0OmksdHpfbmFtZTppLHNpbV9yZWdpb246aSxjYXJyaWVyOmkscmVzb2x1dGlvbjppLGJyb3dzZXI6aSxicm93c2VyX3ZlcnNpb246aSxyZWZlcnJlcjppLHJlZmVycmVyX2hvc3Q6aSxoZWFkZXJzOnt1dG1fdGVybTppLHV0bV9jb250ZW50OmksY3VzdG9tOnt9fX19fSxzPWZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO3JldHVybiB0LmhyZWY9ZSx0fSxsPXNjcmVlbi53aWR0aHx8MCxjPXNjcmVlbi5oZWlnaHR8fDAsdT1sK1wiIHggXCIrYyxkPW5hdmlnYXRvci5hcHBWZXJzaW9uLHA9bmF2aWdhdG9yLnVzZXJBZ2VudCxmPW5hdmlnYXRvci5sYW5ndWFnZSxoPWRvY3VtZW50LnJlZmVycmVyLGc9cyhoKS5ob3N0bmFtZSx2PWZ1bmN0aW9uKGUpe3ZhciB0PXMoZSkuc2VhcmNoO3Q9dC5zbGljZSgxKTt2YXIgbj17fTtyZXR1cm4gdC5zcGxpdChcIiZcIikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zcGxpdChcIj1cIiksbz10WzBdLHI9dFsxXTtuW29dPWRlY29kZVVSSUNvbXBvbmVudCh2b2lkIDA9PT1yP1wiXCI6cil9KSksbn0obG9jYXRpb24uaHJlZiksbT1cIlwiLHk9XCJcIixiPVwiXCIseD1cIlwiK3BhcnNlRmxvYXQoZCksdz12b2lkIDAsXz12b2lkIDA7LTEhPT0odz1wLmluZGV4T2YoXCJPcGVyYVwiKSkmJihiPVwiT3BlcmFcIix4PXAuc3Vic3RyaW5nKHcrNiksLTEhPT0odz1wLmluZGV4T2YoXCJWZXJzaW9uXCIpKSYmKHg9cC5zdWJzdHJpbmcodys4KSkpLC0xIT09KHc9cC5pbmRleE9mKFwiRWRnZVwiKSk/KGI9XCJNaWNyb3NvZnQgRWRnZVwiLHg9cC5zdWJzdHJpbmcodys1KSk6LTEhPT0odz1wLmluZGV4T2YoXCJNU0lFXCIpKT8oYj1cIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlclwiLHg9cC5zdWJzdHJpbmcodys1KSk6LTEhPT0odz1wLmluZGV4T2YoXCJDaHJvbWVcIikpPyhiPVwiQ2hyb21lXCIseD1wLnN1YnN0cmluZyh3KzcpKTotMSE9PSh3PXAuaW5kZXhPZihcIlNhZmFyaVwiKSk/KGI9XCJTYWZhcmlcIix4PXAuc3Vic3RyaW5nKHcrNyksLTEhPT0odz1wLmluZGV4T2YoXCJWZXJzaW9uXCIpKSYmKHg9cC5zdWJzdHJpbmcodys4KSkpOi0xIT09KHc9cC5pbmRleE9mKFwiRmlyZWZveFwiKSkmJihiPVwiRmlyZWZveFwiLHg9cC5zdWJzdHJpbmcodys4KSksLTEhPT0oXz14LmluZGV4T2YoXCI7XCIpKSYmKHg9eC5zdWJzdHJpbmcoMCxfKSksLTEhPT0oXz14LmluZGV4T2YoXCIgXCIpKSYmKHg9eC5zdWJzdHJpbmcoMCxfKSksLTEhPT0oXz14LmluZGV4T2YoXCIpXCIpKSYmKHg9eC5zdWJzdHJpbmcoMCxfKSk7Zm9yKHZhciBrLEUsQz0vTW9iaWxlfGh0Y3xtaW5pfEFuZHJvaWR8aVAoYWR8b2R8aG9uZSkvLnRlc3QoZCk/XCJ3YXBcIjpcIndlYlwiLFM9W3tzOlwiV2luZG93cyAxMFwiLHI6LyhXaW5kb3dzIDEwLjB8V2luZG93cyBOVCAxMC4wKS99LHtzOlwiV2luZG93cyA4LjFcIixyOi8oV2luZG93cyA4LjF8V2luZG93cyBOVCA2LjMpL30se3M6XCJXaW5kb3dzIDhcIixyOi8oV2luZG93cyA4fFdpbmRvd3MgTlQgNi4yKS99LHtzOlwiV2luZG93cyA3XCIscjovKFdpbmRvd3MgN3xXaW5kb3dzIE5UIDYuMSkvfSx7czpcIkFuZHJvaWRcIixyOi9BbmRyb2lkL30se3M6XCJTdW4gT1NcIixyOi9TdW5PUy99LHtzOlwiTGludXhcIixyOi8oTGludXh8WDExKS99LHtzOlwiaU9TXCIscjovKGlQaG9uZXxpUGFkfGlQb2QpL30se3M6XCJNYWMgT1MgWFwiLHI6L01hYyBPUyBYL30se3M6XCJNYWMgT1NcIixyOi8oTWFjUFBDfE1hY0ludGVsfE1hY19Qb3dlclBDfE1hY2ludG9zaCkvfV0sUD0wO1A8Uy5sZW5ndGg7UCsrKXt2YXIgaj1TW1BdO2lmKGouci50ZXN0KHApKXttPWouczticmVha319ZnVuY3Rpb24gVChlLHQpe3ZhciBuPWUuZXhlYyh0KTtyZXR1cm4gbiYmblsxXT9uWzFdOlwiXCJ9c3dpdGNoKC9XaW5kb3dzLy50ZXN0KG0pJiYoeT1UKC9XaW5kb3dzICguKikvLG0pLG09XCJ3aW5kb3dzXCIpLG0pe2Nhc2VcIk1hYyBPUyBYXCI6eT1UKC9NYWMgT1MgWCAoMTBbXFwuXFxfXFxkXSspLyxwKSxtPVwibWFjXCI7YnJlYWs7Y2FzZVwiQW5kcm9pZFwiOihFPVQoL0FuZHJvaWQgKFtcXC5cXF9cXGRdKykvLGs9cCkpfHwoRT1UKC9BbmRyb2lkXFwvKFtcXC5cXF9cXGRdKykvLGspKSx5PUUsbT1cImFuZHJvaWRcIjticmVhaztjYXNlXCJpT1NcIjp5PSh5PS9PUyAoXFxkKylfKFxcZCspXz8oXFxkKyk/Ly5leGVjKGQpKT95WzFdK1wiLlwiK3lbMl0rXCIuXCIrKDB8eVszXSk6XCJcIixtPVwiaW9zXCJ9dmFyIE09e3NjcmVlbl9zaXplOnUsYnJvd3NlcjpiLGJyb3dzZXJfdmVyc2lvbjp4LHBsYXRmb3JtOkMsb3NfbmFtZTptLG9zX3ZlcnNpb246eSx1c2VyQWdlbnQ6cCxzY3JlZW5fd2lkdGg6bCxzY3JlZW5faGVpZ2h0OmMsZGV2aWNlX21vZGVsOm0sbGFuZ3VhZ2U6ZixyZWZlcnJlcjpoLHJlZmVycmVyX2hvc3Q6Zyx1dG1fc291cmNlOnYudXRtX3NvdXJjZSx1dG1fbWVkaXVtOnYudXRtX21lZGl1bSx1dG1fY2FtcGFpZ246di51dG1fY2FtcGFpZ24sdXRtX3Rlcm06di51dG1fdGVybSx1dG1fY29udGVudDp2LnV0bV9jb250ZW50fSxPPXtnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9bG9jYWxTdG9yYWdlLmdldEl0ZW0oZSksbj10O3RyeXt0JiZcInN0cmluZ1wiPT10eXBlb2YgdCYmKG49SlNPTi5wYXJzZSh0KSl9Y2F0Y2goZSl7fXJldHVybiBufSxzZXQ6ZnVuY3Rpb24oZSx0KXt0cnl7dmFyIG49XCJzdHJpbmdcIj09dHlwZW9mIHQ/dDpKU09OLnN0cmluZ2lmeSh0KTtsb2NhbFN0b3JhZ2Uuc2V0SXRlbShlLG4pfWNhdGNoKGUpe319fSxMPVwiX190ZWFfY2FjaGVfXCIsRD00MDAxLHo9NGUzLFI9NDAwMixBPTQwMDMsST01MDAsQj01MDAxLHE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT09byhTeW1ib2wuaXRlcmF0b3IpP2Z1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6byhlKX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6byhlKX07ZnVuY3Rpb24gRihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9dmFyIE49ZnVuY3Rpb24gZSgpe3ZhciB0PXRoaXMsbj1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06XCJcIjtGKHRoaXMsZSksdGhpcy5pbml0PWZ1bmN0aW9uKGUpe3QuaXNMb2c9ZX0sdGhpcy5pbmZvPWZ1bmN0aW9uKGUpe2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLG89QXJyYXkobj4xP24tMTowKSxyPTE7cjxuO3IrKylvW3ItMV09YXJndW1lbnRzW3JdO3ZhciBpO3QuaXNMb2cmJihpPWNvbnNvbGUpLmxvZy5hcHBseShpLFt0LnByZWZpeCtlXS5jb25jYXQobykpfSx0aGlzLndhcm49ZnVuY3Rpb24oZSl7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgsbz1BcnJheShuPjE/bi0xOjApLHI9MTtyPG47cisrKW9bci0xXT1hcmd1bWVudHNbcl07dmFyIGk7dC5pc0xvZyYmKGk9Y29uc29sZSkud2Fybi5hcHBseShpLFt0LnByZWZpeCtlXS5jb25jYXQobykpfSx0aGlzLmVycm9yPWZ1bmN0aW9uKGUpe2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLG89QXJyYXkobj4xP24tMTowKSxyPTE7cjxuO3IrKylvW3ItMV09YXJndW1lbnRzW3JdO3ZhciBpO3QuaXNMb2cmJihpPWNvbnNvbGUpLmVycm9yLmFwcGx5KGksW3QucHJlZml4K2VdLmNvbmNhdChvKSl9LHRoaXMuZGlyPWZ1bmN0aW9uKCl7dmFyIGU7dC5pc0xvZyYmKGU9Y29uc29sZSkuZGlyLmFwcGx5KGUsYXJndW1lbnRzKX0sdGhpcy50YWJsZT1mdW5jdGlvbihlKXt0LmlzTG9nJiZjb25zb2xlLnRhYmxlKGUpfSx0aGlzLmxvZ0pTT049ZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09PSh2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6cShlKSkmJnQuaXNMb2cmJnQuaW5mbyhcIlwiLEpTT04uc3RyaW5naWZ5KGUsbnVsbCwyKSl9LHRoaXMuZGVwcmVjYXRlZD1mdW5jdGlvbihlKXtmb3IodmFyIG49YXJndW1lbnRzLmxlbmd0aCxvPUFycmF5KG4+MT9uLTE6MCkscj0xO3I8bjtyKyspb1tyLTFdPWFyZ3VtZW50c1tyXTt0Lndhcm4uYXBwbHkodCxbXCJbREVQUkVDQVRFRF1cIitlXS5jb25jYXQobykpfSx0aGlzLnRocm93PWZ1bmN0aW9uKGUpe3Rocm93IHQuZXJyb3IodC5wcmVmaXgpLG5ldyBFcnJvcihlKX07dmFyIG89bj9cIltcIituK1wiXVwiOlwiXCI7dGhpcy5wcmVmaXg9XCJbdGVhLXNka11cIitvfSxVPW5ldyBOLEg9ZnVuY3Rpb24oZSx0LG4sbyl7dmFyIHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3Iub3BlbihcIlBPU1RcIixlLCEwKSxyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIiksci5vbmxvYWQ9ZnVuY3Rpb24oKXt0cnl7dmFyIGU9SlNPTi5wYXJzZShyLnJlc3BvbnNlVGV4dCk7biYmbihlKX1jYXRjaChlKXtvJiZvKCl9fSxyLm9uZXJyb3I9ZnVuY3Rpb24oKXtvJiZvKCl9LHIuc2VuZChKU09OLnN0cmluZ2lmeSh0KSl9O3ZhciBXPShuZXcgRGF0ZSkuZ2V0VGltZXpvbmVPZmZzZXQoKSxWPXBhcnNlSW50KC1XLzYwLDEwKSxLPTYwKlcsSj12b2lkIDA7dHJ5e0o9XCIzLjIuN1wifWNhdGNoKGspe0o9XCIyLnhcIn12YXIgWD1uZXcoZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIG49ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPT0odm9pZCAwPT09dD9cInVuZGVmaW5lZFwiOm8odCkpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcyxlLmNhbGwodGhpcykpO3JldHVybiBuLmluaXRDbGllbnRFbnY9ZnVuY3Rpb24oKXtuLnNldChcIm9zX25hbWVcIixNLm9zX25hbWUpLG4uc2V0KFwib3NfdmVyc2lvblwiLE0ub3NfdmVyc2lvbiksbi5zZXQoXCJkZXZpY2VfbW9kZWxcIixNLmRldmljZV9tb2RlbCksbi5zZXQoXCJwbGF0Zm9ybVwiLE0ucGxhdGZvcm0pLG4uc2V0KFwic2RrX3ZlcnNpb25cIixKKSxuLnNldChcImJyb3dzZXJcIixNLmJyb3dzZXIpLG4uc2V0KFwiYnJvd3Nlcl92ZXJzaW9uXCIsTS5icm93c2VyX3ZlcnNpb24pLG4uc2V0KFwibGFuZ3VhZ2VcIixNLmxhbmd1YWdlKSxuLnNldChcInRpbWV6b25lXCIsViksbi5zZXQoXCJ0el9vZmZzZXRcIixLKSxuLnNldChcInJlc29sdXRpb25cIixNLnNjcmVlbl93aWR0aCtcInhcIitNLnNjcmVlbl9oZWlnaHQpLG4uc2V0KFwic2NyZWVuX3dpZHRoXCIsTS5zY3JlZW5fd2lkdGgpLG4uc2V0KFwic2NyZWVuX2hlaWdodFwiLE0uc2NyZWVuX2hlaWdodCksbi5zZXQoXCJyZWZlcnJlclwiLE0ucmVmZXJyZXIpLG4uc2V0KFwicmVmZXJyZXJfaG9zdFwiLE0ucmVmZXJyZXJfaG9zdCksbi5zZXQoXCJ1dG1fc291cmNlXCIsTS51dG1fc291cmNlKSxuLnNldChcInV0bV9tZWRpdW1cIixNLnV0bV9tZWRpdW0pLG4uc2V0KFwidXRtX2NhbXBhaWduXCIsTS51dG1fY2FtcGFpZ24pLG4uc2V0KFwidXRtX3Rlcm1cIixNLnV0bV90ZXJtKSxuLnNldChcInV0bV9jb250ZW50XCIsTS51dG1fY29udGVudCl9LG4uaW5pdENsaWVudEVudigpLG59cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrKHZvaWQgMD09PXQ/XCJ1bmRlZmluZWRcIjpvKHQpKSk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCxlKSx0fShhKSk7dmFyIFE9bmV3KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSl9cmV0dXJuIGUucHJvdG90eXBlLmlzU3RyaW5nPWZ1bmN0aW9uKGUpe3JldHVyblwiU3RyaW5nXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSl9LGUucHJvdG90eXBlLmlzTnVtYmVyPWZ1bmN0aW9uKGUpe3JldHVyblwiTnVtYmVyXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSl9LGUucHJvdG90eXBlLmlzQm9vbGVhbj1mdW5jdGlvbihlKXtyZXR1cm5cIkJvb2xlYW5cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKX0sZS5wcm90b3R5cGUuaXNGdW5jdGlvbj1mdW5jdGlvbihlKXtyZXR1cm5cIkZ1bmN0aW9uXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSl9LGUucHJvdG90eXBlLmlzTnVsbD1mdW5jdGlvbihlKXtyZXR1cm5cIk51bGxcIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKX0sZS5wcm90b3R5cGUuaXNVbmRlZmluZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuXCJVbmRlZmluZWRcIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKX0sZS5wcm90b3R5cGUuaXNPYmo9ZnVuY3Rpb24oZSl7cmV0dXJuXCJPYmplY3RcIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKX0sZS5wcm90b3R5cGUuaXNBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cIkFycmF5XCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSl9LGUucHJvdG90eXBlLmlzRmFsc2U9ZnVuY3Rpb24oZSl7cmV0dXJuXCJcIj09PWV8fG51bGw9PWV8fFwibnVsbFwiPT09ZXx8XCJ1bmRlZmluZWRcIj09PWV8fDA9PT1lfHwhMT09PWV8fE5hTj09PWV9LGUucHJvdG90eXBlLmlzVHJ1ZT1mdW5jdGlvbihlKXtyZXR1cm4hdGhpcy5pc0ZhbHNlKGUpfSxlLnByb3RvdHlwZS5pc0xvd0lFPWZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5YRG9tYWluUmVxdWVzdH0sZX0oKSk7dmFyICQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmXCJudW1iZXJcIj09dHlwZW9mIHQmJlwibnVtYmVyXCI9PXR5cGVvZiBuKXt2YXIgbyxyPVtdO249bjw9MjU/bjpuJTI1O3ZhciBpPVN0cmluZy5mcm9tQ2hhckNvZGUobis5Nyk7bz1lLnNwbGl0KGkpO2Zvcih2YXIgYT0wO2E8by5sZW5ndGg7YSsrKXt2YXIgcz1wYXJzZUludChvW2FdLG4pO3M9MSpzXnQ7dmFyIGw9U3RyaW5nLmZyb21DaGFyQ29kZShzKTtyLnB1c2gobCl9cmV0dXJuIHIuam9pbihcIlwiKX19KGUsNjQsMjUpfTtmdW5jdGlvbiBZKGUpe3JldHVybiBlPyhlXjE2Kk1hdGgucmFuZG9tKCk+PmUvNCkudG9TdHJpbmcoMTApOihbMWU3XSstMWUzKy00ZTMrLThlMystMWUxMSkucmVwbGFjZSgvWzAxOF0vZyxZKX12YXIgRz1mdW5jdGlvbigpe3JldHVybiBZKCkucmVwbGFjZSgvLS9nLFwiXCIpLnNsaWNlKDAsMTkpfSxaPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPWFyZ3VtZW50c1t0XTtmb3IodmFyIG8gaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixvKSYmKGVbb109bltvXSl9cmV0dXJuIGV9O3ZhciBlZT17Y246XCIxZnoyMnoyMnoxbnoyMXo0bXo0Yno0Ynoxa3oxYXoyMXo0YXoyMXoxbHoyMXoyMXoxYnoxaXo0YXoxYXoxbXoxa1wiLHNnOlwiMWZ6MjJ6MjJ6MW56MjF6NG16NGJ6NGJ6MjF6MWV6MTh6MWp6MWd6NDl6MWt6MWF6MjF6NGF6MTl6Mjd6MjJ6MWN6MW16MjR6MWN6MjB6MjF6MWN6MTh6NGF6MWF6MW16MWtcIix2YTpcIjFmejIyejIyejFuejIxejRtejRiejRiejFrejE4ejFqejFnejI0ejE4ejQ5ejFrejFhejIxejRhejE5ejI3ejIyejFjejFtejI0ejFjejIwejIxejFjejE4ejRhejFhejFtejFrXCJ9LHRlPWZ1bmN0aW9uKGUpe3RyeXt2YXIgdD1kb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cChcIig/Ol58OylcXFxccypcIitlK1wiPShbXjtdKylcIikpO3JldHVybiBkZWNvZGVVUklDb21wb25lbnQodD90WzFdOlwiXCIpfWNhdGNoKGUpe3JldHVyblwiXCJ9fSxuZT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KTt2YXIgbj1mdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9PSh2b2lkIDA9PT10P1widW5kZWZpbmVkXCI6byh0KSkmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSh0aGlzLGUuY2FsbCh0aGlzKSk7cmV0dXJuIG4uaW5pdD1mdW5jdGlvbihlKXt2YXIgdD1lLmFwcF9pZCxvPWUuY2hhbm5lbCxyPWUubG9nLGk9ZS5jaGFubmVsX2RvbWFpbixhPWUubmFtZTtpZihcIm51bWJlclwiIT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoXCJhcHBfaWQg5b+F6aG75piv5LiA5Liq5pWw5a2X77yM5rOo5oSP5qOA5p+l5piv5ZCm5piv5LulYHN0cmluZ2DnmoTmlrnlvI/kvKDlhaXnmoTvvJ9cIik7bi5sb2dnZXI9bmV3IE4oYSksbi5sb2dnZXIuaW5pdChyKSxuLmluaXRDb25maWdzKGUpLG4uaW5pdFVybHMobyxpKSxuLnNldEVudihcImFwcF9pZFwiLHQpfSxuLmluaXRDb25maWdzPWZ1bmN0aW9uKGUpe3ZhciB0PWUuYXBwX2lkLG89ZS5kaXNhYmxlX3NzaWQscj1lLmRpc2FibGVfd2ViaWQsaT1lLmRpc2FibGVfc2RrX21vbml0b3I7bi5hcHBfaWQ9dCxuLmV2dERhdGFDYWNoZUtleT1MK1wiZXZlbnRzX1wiK3QsbyYmKG4ubG9nZ2VyLmluZm8oXCJzc2lk5bey56aB55So77yM6K6+572udXNlcl91bmlxdWVfaWTkuI3kvJror7fmsYJzc2lk5o6l5Y+j44CCXCIpLG4uaXNTc2lkRGlzYWJsZWQ9ITApLHImJihuLmxvZ2dlci5pbmZvKFwid2ViaWTmnI3liqHlt7LnpoHnlKjvvIxzc2lk5ZCM5pe26KKr56aB55So44CC5bCG5pys5Zyw55Sf5oiQd2ViaWTjgIJcIiksbi5pc1dlYmlkRGlzYWJsZWQ9ITAsbi5pc1NzaWREaXNhYmxlZD0hMCksaSYmKG4ubG9nZ2VyLmluZm8oXCJTREvnm5Hmjqflt7LnpoHnlKjjgIJcIiksbi5pc1Nka01vbml0b3JEaXNhYmxlZD0hMCl9LG4uaW5pdFVybHM9ZnVuY3Rpb24oZSx0KXtpZihcImludGVybmFsXCI9PT1lJiYobi5sb2dnZXIud2FybihcImNoYW5uZWwg55qE5YC8IGludGVybmFsIOW3suiiq+W6n+W8g++8jOW3suiHquWKqOaUueS4uiBjbuOAglwiKSxlPVwiY25cIiksIXQmJiFlZVtlXSl0aHJvdyBuZXcgRXJyb3IoXCJjaGFubmVsIOWPmOmHj+WPquiDveaYryBgY25gLCBgc2dgLGB2YWBcIik7dmFyIG89dHx8JChlZVtlXSk7bz1vLnJlcGxhY2UoL1xcLyskLyxcIlwiKSxuLnJlcG9ydFVybD1vK1wiL3YxL2xpc3RcIixuLnVzZXJUb2tlbnNQcmVmaXg9XCJcIitvfSxuLnNldEVudj1mdW5jdGlvbihlLHQpe2lmKFwiYXBwX2lkXCI9PT1lJiZuLmNoZWNrVXNlclRva2VuKHQpLFwidXNlcl91bmlxdWVfaWRcIj09PWUpe2lmKG4uYmxhY2tVdWlkLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09U3RyaW5nKHQpfSkpKXJldHVybiB2b2lkIG4ubG9nZ2VyLndhcm4oJ+iuvue9ruS6huaXoOaViOeahOWAvCB7dXNlcl91bmlxdWVfaWTvvJpcIiVzXCJ944CC6K+l5pON5L2c5bey5b+955Wl44CCJyx0KTtuLnZlcmlmeVRva2Vucyh0KX1pZihcIndlYl9pZFwiPT09ZSl7aWYoIXQpcmV0dXJuOyghbi5lbnZJbmZvLnVzZXIudXNlcl91bmlxdWVfaWR8fG4uZW52SW5mby51c2VyLnVzZXJfdW5pcXVlX2lkJiZuLmVudkluZm8udXNlci51c2VyX3VuaXF1ZV9pZD09PW4uZW52SW5mby51c2VyLndlYl9pZCkmJm4uc2V0KFwidXNlcl91bmlxdWVfaWRcIix0KX1uLnNldChlLHQpfSxuLnRyYW5zZmVyRnJvbUNvb2tpZT1mdW5jdGlvbigpe3ZhciBlPW4udG9rZW5zQ2FjaGVLZXksdD10ZShcInR0X3dlYmlkXCIpLG89dGUoXCJfX3RlYV9zZGtfX3NzaWRcIikscj10ZShcIl9fdGVhX3Nka19fdXNlcl91bmlxdWVfaWRcIik7aWYoUS5pc0xvd0lFKCkpe2lmKHQpe3ZhciBpPXt3ZWJfaWQ6dCxzc2lkOnQsdXNlcl91bmlxdWVfaWQ6dH07Ty5zZXQoZSxKU09OLnN0cmluZ2lmeShpKSl9cmV0dXJuITF9aWYodCYmbyYmcil7dmFyIGE9e3dlYl9pZDp0LHNzaWQ6byx1c2VyX3VuaXF1ZV9pZDpyfTtPLnNldChlLEpTT04uc3RyaW5naWZ5KGEpKX19LG4ucHVyaWZ5QmxhY2tVdWlkPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O2lmKG4uYmxhY2tVdWlkLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiB0PT09ZS51c2VyX3VuaXF1ZV9pZH0pKSl7dmFyIHQ9e307cmV0dXJuIG4uc2V0VXNlclRva2Vucyh0KSxuLmxvZ2dlci53YXJuKCfmo4DmtYvliLDml6DmlYjnmoTnlKjmiLfmoIfor4bvvIzlt7Lph43nva7nlKjmiLfnirbmgIHjgIJ7dXNlcl91bmlxdWVfaWQ6IFwiJXNcIn0nLGUudXNlcl91bmlxdWVfaWQpLHR9cmV0dXJuIGV9LG4uZ2V0VXNlclRva2Vucz1mdW5jdGlvbigpe3JldHVybiBPLmdldChuLnRva2Vuc0NhY2hlS2V5KXx8e319LG4uc2V0VXNlclRva2Vucz1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtyZXR1cm4gTy5zZXQobi50b2tlbnNDYWNoZUtleSxlKX0sbi5jaGVja1VzZXJUb2tlbj1mdW5jdGlvbihlKXt2YXIgdD1MK1widG9rZW5zX1wiK2U7bi50b2tlbnNDYWNoZUtleT10LG4udHJhbnNmZXJGcm9tQ29va2llKCk7dmFyIG89bi5wdXJpZnlCbGFja1V1aWQobi5nZXRVc2VyVG9rZW5zKCkpO28udXNlcl91bmlxdWVfaWQmJm8ud2ViX2lkPyhuLmVudkluZm8udXNlci51c2VyX3VuaXF1ZV9pZD1vLnVzZXJfdW5pcXVlX2lkLG4uZW52SW5mby51c2VyLndlYl9pZD1vLndlYl9pZCxuLmVudkluZm8udXNlci5zc2lkPW8uc3NpZHx8XCJcIixuLmxvZ2dlci5pbmZvKFwi5Yid5aeL5YyW5bey57uP5qOA5rWL5Yiw5LqGIHdlYmlkIHVzZXJfdW5pcXVlX2lk77yM5LiA6Iis5oOF5Ya15LiL5LiN6ZyA6KaB5YaN5qyh6aqM6K+BIGlkIOS6hlwiKSxuLnVubG9jaygpKTpuLnJlcXVlc3RXZWJJZChlKX0sbi5zYXZlVG9rZW5Ub1N0b3JhZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS53ZWJfaWQsbz1lLnNzaWQscj1lLnVzZXJfdW5pcXVlX2lkO24uc2V0VXNlclRva2Vucyh7d2ViX2lkOnQsc3NpZDpvLHVzZXJfdW5pcXVlX2lkOnJ9KX0sbi5yZXF1ZXN0V2ViSWQ9ZnVuY3Rpb24oKXtuLmlzUmVxdWVzdFdlYklkPSEwO3ZhciBlPWZ1bmN0aW9uKGUpe3ZhciB0PW4uZW52SW5mby51c2VyLndlYl9pZHx8ZS53ZWJfaWQsbz1lLnNzaWQ7bi5pc1JlcXVlc3RXZWJJZD0hMSxuLmVudkluZm8udXNlci5zc2lkPW8sbi5lbnZJbmZvLnVzZXIud2ViX2lkPXQsbi5lbnZJbmZvLnVzZXIudXNlcl91bmlxdWVfaWQ9dCxuLnNhdmVUb2tlblRvU3RvcmFnZSh7d2ViX2lkOnQsc3NpZDpvLHVzZXJfdW5pcXVlX2lkOnR9KSxuLndhaXRGb3JWZXJpZnlUb2tlbnM/KG4ubG9jaygpLG4udmVyaWZ5VG9rZW5zKG4ucmVhbFV1aWQpKToobi51bmxvY2soKSxuLmNhbGxiYWNrJiZuLmNhbGxiYWNrKCkpfTtuLmlzV2ViaWREaXNhYmxlZD9lKHt3ZWJfaWQ6RygpLHNzaWQ6XCJcIn0pOmZ1bmN0aW9uKCl7dmFyIHQ9bi51c2VyVG9rZW5zUHJlZml4K1wiL3YxL3VzZXIvd2ViaWRcIjtIKHQse2FwcF9pZDpuLmFwcF9pZCx1cmw6bG9jYXRpb24uaHJlZix1c2VyX2FnZW50Ok0udXNlckFnZW50LHJlZmVyZXI6TS5yZWZlcnJlcix1c2VyX3VuaXF1ZV9pZDpcIlwifSwoZnVuY3Rpb24odCl7MCE9PXQuZT9uLmxvZ2dlci5lcnJvcihcIuivt+axgiB3ZWJpZCDlpLHotKXjgILor7fogZTns7vnrqHnkIblkZjjgIJcIik6ZSh0KX0pLChmdW5jdGlvbigpe24uaXNSZXF1ZXN0V2ViSWQ9ITEsbi5sb2dnZXIuZXJyb3IoXCLojrflj5Ygd2ViaWQg5aSx6LSl77yM5pWw5o2u5bCG5LiN5Lya6KKr5LiK5oqlXCIpfSkpfSgpfSxuLnZlcmlmeVRva2Vucz1mdW5jdGlvbihlKXt2YXIgdD1uLnRva2Vuc0NhY2hlS2V5O2lmKG4ud2FpdEZvclZlcmlmeVRva2Vucz0hMSxuLnJlYWxVdWlkPVwiXCIrZSxuLmlzUmVxdWVzdFdlYklkKXJldHVybiBuLndhaXRGb3JWZXJpZnlUb2tlbnM9ITAsbi5sb2dnZXIuaW5mbyhcIuato+WcqOivt+axgiB3ZWJpZO+8jHJlcXVlc3RTc2lkIOWwhuS8muWcqOWJjeiAheivt+axguWujOavleS5i+WQjuiiq+iwg+eUqFwiKSwhMTt2YXIgbz1uLmdldFVzZXJUb2tlbnMoKTtpZihvLnVzZXJfdW5pcXVlX2lkPT09bi5yZWFsVXVpZCYmby5zc2lkJiZvLndlYl9pZCluLmxvZ2dlci5pbmZvKFwi5Lyg5YWl55qEIHVzZXJfaWQvdXNlcl91bmlxdWVfaWQg5LiOIOe8k+WtmOS4reeahOWujOWFqOS4gOiHtO+8jOaXoOmcgOWGjeasoeivt+axglwiKSxuLnVubG9jaygpO2Vsc2V7bi5sb2NrKCksbi5lbnZJbmZvLnVzZXIudXNlcl91bmlxdWVfaWQ9bi5yZWFsVXVpZDt2YXIgcj1aKHt9LG4uZ2V0VXNlclRva2VucygpLHt1c2VyX3VuaXF1ZV9pZDpuLnJlYWxVdWlkfSk7aWYoTy5zZXQodCxKU09OLnN0cmluZ2lmeShyKSksUS5pc0xvd0lFKCkpcmV0dXJuIG4udW5sb2NrKCksITE7bi5pc1NzaWREaXNhYmxlZD8obi51bmxvY2soKSxuLmNhbGxiYWNrJiZuLmNhbGxiYWNrKCkpOm4ucmVxdWVzdFNzaWQoKX19LG4ucmVxdWVzdFNzaWQ9ZnVuY3Rpb24oKXt2YXIgZT1uLmdldFVzZXJUb2tlbnMoKSx0PW4udXNlclRva2Vuc1ByZWZpeCtcIi92MS91c2VyL3NzaWRcIjtIKHQse2FwcF9pZDpuLmFwcF9pZCx3ZWJfaWQ6ZS53ZWJfaWQsdXNlcl91bmlxdWVfaWQ6XCJcIitlLnVzZXJfdW5pcXVlX2lkfSwoZnVuY3Rpb24odCl7aWYobi51bmxvY2soKSwwIT09dC5lKW4ubG9nZ2VyLmVycm9yKFwi6K+35rGCIHNzaWQg5aSx6LSlflwiKTtlbHNle24uZW52SW5mby51c2VyLnNzaWQ9dC5zc2lkO3ZhciBvPVooe30sZSx7c3NpZDp0LnNzaWR9KTtuLnNldFVzZXJUb2tlbnMobyksbi5sb2dnZXIuaW5mbyhcIuagueaNriB1c2VyX3VuaXF1ZV9pZCDmm7TmlrAgc3NpZCDmiJDlip/vvIHms6jmhI/vvJrlnKjov5nkuYvliY3kuI3lupTor6XmnInmlbDmja7ooqvlj5Hlh7rljrtcIiksbi5jYWxsYmFjayYmbi5jYWxsYmFjaygpfX0pLChmdW5jdGlvbigpe24udW5sb2NrKCksbi5sb2dnZXIuZXJyb3IoXCLmoLnmja4gdXNlcl91bmlxdWVfaWQg6I635Y+W5pawIHNzaWQg5aSx6LSlXCIpfSkpfSxuLnNldEV2dFBhcmFtcz1mdW5jdGlvbihlKXt2YXIgdD1aKHt9LGUpO09iamVjdC5rZXlzKHQpLmZvckVhY2goKGZ1bmN0aW9uKGUpe24uZXZ0UGFyYW1zW2VdPXRbZV19KSl9LG4ubWVyZ2VFbnZUb0V2ZW50cz1mdW5jdGlvbihlKXt2YXIgdD1uLm1lcmdlRW52KCksbz1bXSxyPTAsaT12b2lkIDA7cmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQ9ISFlLnBhcmFtcy5fX2Rpc2FibGVfc3RvcmFnZV9fO3ZvaWQgMD09PWk/aT10Oih0IT09aXx8b1tyXS5sZW5ndGg+PTUpJiYocis9MSxpPSFpKSxvW3JdPW9bcl18fFtdLG9bcl0ucHVzaChlKX0pKSxvLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJue2V2ZW50czplLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9Wih7fSxuLmV2dFBhcmFtcyxlLnBhcmFtcyk7cmV0dXJuIGRlbGV0ZSB0Ll9fZGlzYWJsZV9zdG9yYWdlX18sWih7fSxlLHtwYXJhbXM6SlNPTi5zdHJpbmdpZnkodCl9KX0pKSx1c2VyOnQudXNlcixoZWFkZXI6dC5oZWFkZXIsdmVyYm9zZTpuLmRlYnVnTW9kZT8xOnZvaWQgMCxfX2Rpc2FibGVfc3RvcmFnZV9fOmVbMF0ucGFyYW1zLl9fZGlzYWJsZV9zdG9yYWdlX199fSkpfSxuLm1lcmdlRW52PWZ1bmN0aW9uKCl7dmFyIGU9bi5nZXQoKSx0PVguZ2V0KCksbz1aKHt9LGUudXNlcikscj1aKHt9LHQuaGVhZGVyLmhlYWRlcnMuY3VzdG9tLGUuaGVhZGVyLmhlYWRlcnMuY3VzdG9tKSxpPVooe30sdC5oZWFkZXIuaGVhZGVycyxlLmhlYWRlci5oZWFkZXJzLHtjdXN0b206cn0pLGE9Wih7fSx0LmhlYWRlcixlLmhlYWRlcik7cmV0dXJue3VzZXI6byxoZWFkZXI6Wih7fSxhLHtoZWFkZXJzOkpTT04uc3RyaW5naWZ5KGkpfSl9fSxuLmV2dFBhcmFtcz17fSxuLnJlcG9ydFVybD1cIlwiLG4udXNlclRva2Vuc1ByZWZpeD1cIlwiLG4uaXNTc2lkRGlzYWJsZWQ9ITEsbi5pc1dlYmlkRGlzYWJsZWQ9ITEsbi5pc1Nka01vbml0b3JEaXNhYmxlZD0hMSxuLmRlYnVnTW9kZT0hMSxuLmJsYWNrVXVpZD1bXCJudWxsXCIsXCJ1bmRlZmluZWRcIixcIjBcIixcIlwiLFwiTm9uZVwiXSxuLmxvZ2dlcj1mdW5jdGlvbigpe30sbn1yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIisodm9pZCAwPT09dD9cInVuZGVmaW5lZFwiOm8odCkpKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LGUpLHQucHJvdG90eXBlLmxvY2s9ZnVuY3Rpb24oKXt0aGlzLmlzVXNlclRva2Vuc1JlYWR5PSExfSx0LnByb3RvdHlwZS51bmxvY2s9ZnVuY3Rpb24oKXt0aGlzLmlzVXNlclRva2Vuc1JlYWR5PSEwfSx0LnByb3RvdHlwZS5lbmFibGVEZWJ1Z01vZGU9ZnVuY3Rpb24oZSl7dGhpcy5kZWJ1Z01vZGU9ZX0sdH0oYSk7dmFyIG9lPWZ1bmN0aW9uIGUoKXt2YXIgdD10aGlzOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5zZXQ9ZnVuY3Rpb24oZSxuKXt0LmNhY2hlW2VdPW59LHRoaXMuZ2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0LmNhY2hlW2VdfSx0aGlzLmNsZWFuPWZ1bmN0aW9uKGUpe3QuY2FjaGVbZV09dm9pZCAwfSx0aGlzLmNhY2hlPXt9fSxyZT1uZXcgb2U7dmFyIGllPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt2YXIgbj10LmRpc2FibGVfc3RvcmFnZSxvPXZvaWQgMCE9PW4mJm47IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLl9pc1BlcnNpc3RlbnQ9IW8sdGhpcy5fc3RvcmFnZT10aGlzLl9pc1BlcnNpc3RlbnQ/TzpuZXcgb2UsdGhpcy5fc3RvcmFnZUtleT1cIlwiLHRoaXMuX2RhdGE9dm9pZCAwfXJldHVybiBlLnByb3RvdHlwZS5zZXRTdG9yYWdlS2V5PWZ1bmN0aW9uKGUpe3RoaXMuX3N0b3JhZ2VLZXk9ZX0sZS5wcm90b3R5cGUuZ2V0QWxsRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5nZXREYXRhKCk7T2JqZWN0LmtleXMoZSkucmVkdWNlKChmdW5jdGlvbih0LG4pe3JldHVybiB0LmNvbmNhdChlW25dfHxbXSl9KSxbXSl9LGUucHJvdG90eXBlLmdldERhdGE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2hlY2tJc0RhdGFJbml0KCksdGhpcy5fZGF0YX0sZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpbXTt0aGlzLl9jaGVja0lzRGF0YUluaXQoKSwwIT09dC5sZW5ndGgmJih0aGlzLl9kYXRhW2VdPXQsdGhpcy5fc2F2ZSgpKX0sZS5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKGUpe3RoaXMuX2NoZWNrSXNEYXRhSW5pdCgpLHRoaXMuX2RhdGFbZV0mJihkZWxldGUgdGhpcy5fZGF0YVtlXSx0aGlzLl9zYXZlKCkpfSxlLnByb3RvdHlwZS5fY2hlY2tJc0RhdGFJbml0PWZ1bmN0aW9uKCl7aWYodm9pZCAwPT09dGhpcy5fZGF0YSl0cnl7dmFyIGUsdD10aGlzLl9nZXREYXRhRnJvbVN0b3JhZ2UoKTtpZihRLmlzQXJyYXkodCkpdGhpcy5fZGF0YT0oKGU9e30pW0coKV09dCxlKSx0aGlzLl9zYXZlKCk7ZWxzZSB0aGlzLl9kYXRhPXR9Y2F0Y2goZSl7dGhpcy5fZGF0YT17fX19LGUucHJvdG90eXBlLl9jaGVja1N0b3JhZ2VLZXk9ZnVuY3Rpb24oKXtpZighdGhpcy5fc3RvcmFnZUtleSl0aHJvdyBuZXcgRXJyb3IoXCJtdXN0IGNhbGwgc2V0U3RvcmFnZUtleSgneHh4JykgZmlyc3RcIil9LGUucHJvdG90eXBlLl9nZXREYXRhRnJvbVN0b3JhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2hlY2tTdG9yYWdlS2V5KCksdGhpcy5fc3RvcmFnZS5nZXQodGhpcy5fc3RvcmFnZUtleSl8fHt9fSxlLnByb3RvdHlwZS5fc2F2ZT1mdW5jdGlvbigpe3RoaXMuX2NoZWNrU3RvcmFnZUtleSgpLHRoaXMuX3N0b3JhZ2Uuc2V0KHRoaXMuX3N0b3JhZ2VLZXksdGhpcy5fZGF0YSl9LGV9KCksYWU9ZnVuY3Rpb24oZSx0KXt0cnl7dmFyIG49ZS5zcGxpdChcInYxXCIpWzBdO3QuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtmb3IodmFyIG4gaW4gZSllLmhhc093blByb3BlcnR5KG4pJiYodCs9XCImXCIrbitcIj1cIitlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoZVtuXSkpKTtyZXR1cm4gdD1cIiZcIj09PXRbMF0/dC5zbGljZSgxKTp0fShlKSxvPW5ldyBJbWFnZSgxLDEpO28ub25sb2FkPWZ1bmN0aW9uKCl7bz1udWxsfSxvLm9uZXJyb3I9ZnVuY3Rpb24oKXtvPW51bGx9LG8uc3JjPW4rXCIvdjEvZ2lmP1wiK3R9KSl9Y2F0Y2goZSl7fX0sc2U9ZnVuY3Rpb24oZSx0KXtpZih3aW5kb3cuWERvbWFpblJlcXVlc3QpcmV0dXJuIGFlKGUsdCk7dmFyIG49bmV3IFhNTEh0dHBSZXF1ZXN0O24ub3BlbihcIlBPU1RcIixlK1wiP3Jkbj1cIitNYXRoLnJhbmRvbSgpLCEwKSxuLm9ubG9hZD1mdW5jdGlvbigpe30sbi5vbmVycm9yPWZ1bmN0aW9uKCl7bi5hYm9ydCgpfSxuLnNlbmQoSlNPTi5zdHJpbmdpZnkodCkpfSxsZT1mdW5jdGlvbiBlKHQsbixvLHIpe3RyeXt2YXIgaT10LnNwbGl0KFwidjFcIilbMF07aWYoIWkpcmV0dXJuIHZvaWQgcih0LG4sRCk7bi5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgYT1mdW5jdGlvbihlKXt2YXIgdD1cIlwiO2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0Kz1cIiZcIituK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShlW25dKSkpO3JldHVybiB0PVwiJlwiPT09dFswXT90LnNsaWNlKDEpOnR9KGUpLHM9bmV3IEltYWdlKDEsMSk7cy5vbmxvYWQ9ZnVuY3Rpb24oKXtzPW51bGwsbygpfSxzLm9uZXJyb3I9ZnVuY3Rpb24oKXtzPW51bGwscih0LG4seil9LHMuc3JjPWkrXCIvdjEvZ2lmP1wiK2F9KSl9Y2F0Y2goZSl7cih0LG4sUixlLm1lc3NhZ2UpfX07dmFyIGNlPWZ1bmN0aW9uIGUodCl7dmFyIG49dGhpczshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuc2VuZD1mdW5jdGlvbihlKXt2YXIgdD1lLnVybCxvPWUuZGF0YSxyPWUuc3VjY2VzcyxpPWUuZmFpbCxhPWUuZXZlbnRFcnJvcjtpZihmdW5jdGlvbihlKXt2YXIgdD1lLnVybCxuPWUuZGF0YSxvPWUuc3VjY2VzcyxyPWUuZmFpbCxpPWUubm90U3VyZSxhPWUuaXNVbmxvYWQscz1uO2lmKHdpbmRvdy5YRG9tYWluUmVxdWVzdClsZSh0LHMsbyxyKTtlbHNle2lmKGEpcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3ImJndpbmRvdy5uYXZpZ2F0b3Iuc2VuZEJlYWNvbj8oaSgpLHZvaWQod2luZG93Lm5hdmlnYXRvci5zZW5kQmVhY29uKHQsSlNPTi5zdHJpbmdpZnkocykpP28oKTpyKHQsbixBKSkpOnZvaWQgbGUodCxzLG8scik7dmFyIGw9bmV3IFhNTEh0dHBSZXF1ZXN0O2wub3BlbihcIlBPU1RcIix0K1wiP3Jkbj1cIitNYXRoLnJhbmRvbSgpLCEwKSxsLm9ubG9hZD1mdW5jdGlvbigpe28odCxzLGwucmVzcG9uc2VUZXh0KX0sbC5vbmVycm9yPWZ1bmN0aW9uKCl7bC5hYm9ydCgpLHIodCxzLEkpfSxsLnNlbmQoSlNPTi5zdHJpbmdpZnkocykpfX0oe3VybDp0LGRhdGE6byxzdWNjZXNzOmZ1bmN0aW9uKGUsdCxvKXtyKCk7dHJ5e3ZhciBpPUpTT04ucGFyc2UobykuZTtpZigwIT09aSl7dmFyIHM9XCLmnKrnn6XplJnor69cIjstMj09PWkmJihzPVwi5LqL5Lu25qC85byP6ZSZ6K+v77yB6K+35qOA5p+l5a2X5q6157G75Z6L5piv5ZCm5q2j56Gu44CCXCIpLG4ubG9nZ2VyLmVycm9yKFwi5pWw5o2u5LiK5oql5aSx6LSl77yBXCIsXCLplJnor6/noIHvvJpcIitpK1wi44CC6ZSZ6K+v5L+h5oGv77yaXCIrcyksYSh0LGkpLGRlKGUsdCxpKX19Y2F0Y2gobil7ZGUoZSx0LEIpfX0sZmFpbDpmdW5jdGlvbihlLHQsbyl7bi5sb2dnZXIuZXJyb3IoXCLmlbDmja7kuIrmiqXlpLHotKXvvIFcIixcIumUmeivr+egge+8mlwiK28pLGkodCxvKSxkZShlLHQsbyl9LG5vdFN1cmU6ZS5ub3RTdXJlLGlzVW5sb2FkOmUuaXNVbmxvYWR9KSwhbi5pc1Nka01vbml0b3JEaXNhYmxlZCYmIW4uaXNTZGtPbkxvYWRFdmVudFJlYWR5KXtuLmlzU2RrT25Mb2FkRXZlbnRSZWFkeT0hMDt0cnl7dmFyIHM9b1swXS5oZWFkZXIsbD1vWzBdLnVzZXI7dWUodCx7YXBwX2lkOnMuYXBwX2lkLGFwcF9uYW1lOnMuYXBwX25hbWUsc2RrX3ZlcnNpb246cy5zZGtfdmVyc2lvbix3ZWJfaWQ6bC53ZWJfaWR9KX1jYXRjaChlKXt9fX0sdGhpcy5sb2dnZXI9dC5sb2dnZXJ8fFUsdGhpcy5pc1Nka09uTG9hZEV2ZW50UmVhZHk9ITEsdGhpcy5pc1Nka01vbml0b3JEaXNhYmxlZD0hMX0sdWU9ZnVuY3Rpb24oZSx0KXt0cnl7dmFyIG49e2V2ZW50czpbe2V2ZW50Olwib25sb2FkXCIscGFyYW1zOkpTT04uc3RyaW5naWZ5KHthcHBfaWQ6dC5hcHBfaWQsYXBwX25hbWU6dC5hcHBfbmFtZXx8XCJcIixzZGtfdmVyc2lvbjp0LnNka192ZXJzaW9ufSksbG9jYWxfdGltZV9tczpEYXRlLm5vdygpfV0sdXNlcjp7dXNlcl91bmlxdWVfaWQ6dC53ZWJfaWR9LGhlYWRlcjp7YXBwX2lkOjEzMzh9fTtzZXRUaW1lb3V0KChmdW5jdGlvbigpe3NlKGUsW25dKX0pLDE2KX1jYXRjaChlKXt9fSxkZT1mdW5jdGlvbihlLHQsbil7dHJ5e3ZhciBvPXRbMF0udXNlcixyPXRbMF0uaGVhZGVyLGk9W107dC5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmV2ZW50cy5mb3JFYWNoKChmdW5jdGlvbihlKXtpLnB1c2goZSl9KSl9KSk7dmFyIGE9e2V2ZW50czppLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJue2V2ZW50Olwib25fZXJyb3JcIixwYXJhbXM6SlNPTi5zdHJpbmdpZnkoe2Vycm9yX2NvZGU6bixhcHBfaWQ6ci5hcHBfaWQsYXBwX25hbWU6ci5hcHBfbmFtZXx8XCJcIixlcnJvcl9ldmVudDplLmV2ZW50LGxvY2FsX3RpbWVfbXM6ZS5sb2NhbF90aW1lX21zLHRlYV9ldmVudF9pbmRleDpEYXRlLm5vdygpLHBhcmFtczplLnBhcmFtcyxoZWFkZXI6SlNPTi5zdHJpbmdpZnkociksdXNlcjpKU09OLnN0cmluZ2lmeShvKX0pLGxvY2FsX3RpbWVfbXM6RGF0ZS5ub3coKX19KSksdXNlcjp7dXNlcl91bmlxdWVfaWQ6by51c2VyX3VuaXF1ZV9pZH0saGVhZGVyOnthcHBfaWQ6MTMzOH19O3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7c2UoZSxbYV0pfSksMTYpfWNhdGNoKGUpe319O3ZhciBwZT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KG4peyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIHI9ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPT0odm9pZCAwPT09dD9cInVuZGVmaW5lZFwiOm8odCkpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcyxlLmNhbGwodGhpcykpO3IuYWRkTGlzdGVuZXI9ZnVuY3Rpb24oKXt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLChmdW5jdGlvbigpe3IucmVwb3J0KCEwKX0pLCExKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLChmdW5jdGlvbigpe3IucmVwb3J0KCEwKX0pLCExKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLChmdW5jdGlvbigpe1wiaGlkZGVuXCI9PT1kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUmJnIucmVwb3J0KCEwKX0pLCExKX0sci5zZXRSZWFkeT1mdW5jdGlvbihlKXtyLmlzUmVhZHk9ZSxyLmV2ZW50U2VuZGVyLmlzU2RrTW9uaXRvckRpc2FibGVkPXIuaXNTZGtNb25pdG9yRGlzYWJsZWQsci5jaGVja0FuZFNlbmRDYWNoZWRTdG9yYWdlRXZlbnRzKCksci5yZXBvcnQoKX0sci5ldmVudFJlcG9ydFRpbWVyPW51bGwsci5ldmVudD1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpbXSx0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj1yZS5nZXQoci5ldnREYXRhQ2FjaGVLZXkpfHxbXSxvPXQ/W10uY29uY2F0KGUsbik6W10uY29uY2F0KG4sZSk7cmUuc2V0KHIuZXZ0RGF0YUNhY2hlS2V5LG8pLG8ubGVuZ3RoPj01P3IucmVwb3J0KCk6KHIuZXZlbnRSZXBvcnRUaW1lciYmY2xlYXJUaW1lb3V0KHIuZXZlbnRSZXBvcnRUaW1lciksci5ldmVudFJlcG9ydFRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ci5yZXBvcnQoKSxyLmV2ZW50UmVwb3J0VGltZXI9bnVsbH0pLHIud2FpdEZvckJhdGNoVGltZSkpfSxyLnJlcG9ydD1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF07aWYoIXIuaXNVc2VyVG9rZW5zUmVhZHkpcmV0dXJuITE7aWYoIXIuaXNSZWFkeSlyZXR1cm4hMTt2YXIgdD1yZS5nZXQoci5ldnREYXRhQ2FjaGVLZXkpfHxbXTtyZS5jbGVhbihyLmV2dERhdGFDYWNoZUtleSk7dmFyIG49ci5tZXJnZUVudlRvRXZlbnRzKHQpO3Iuc2VuZERhdGEobixlKX0sci5zZW5kRGF0YT1mdW5jdGlvbihlLHQpe3ZhciBuPVtdLG89MCxpPXZvaWQgMDtlLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0PSEhZS5fX2Rpc2FibGVfc3RvcmFnZV9fO3ZvaWQgMD09PWk/aT10Oih0IT09aXx8bltvXS5sZW5ndGg+PTUpJiYobys9MSxpPSFpKSxuW29dPW5bb118fFtdLG5bb10ucHVzaChlKX0pKSxuLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBuPUcoKTtlWzBdLl9fZGlzYWJsZV9zdG9yYWdlX198fHIuZXZlbnRTdG9yYWdlLmFkZChuLGUpLHIuX3NlbmREYXRhKG4sZSx0KX0pKX0sci5jaGVja0FuZFNlbmRDYWNoZWRTdG9yYWdlRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9ci5ldmVudFN0b3JhZ2UuZ2V0RGF0YSgpLHQ9T2JqZWN0LmtleXMoZSk7dC5sZW5ndGg+MCYmdC5mb3JFYWNoKChmdW5jdGlvbih0KXtyLl9zZW5kRGF0YSh0LGVbdF0pfSkpfSxyLl9zZW5kRGF0YT1mdW5jdGlvbihlLHQsbil7ci5pc1JlcG9ydGluZz0hMDt2YXIgbz1mdW5jdGlvbigpe3IuaXNSZXBvcnRpbmc9ITF9O3IuZXZlbnRTZW5kZXIuc2VuZCh7dXJsOnIucmVwb3J0VXJsLGRhdGE6dCxzdWNjZXNzOmZ1bmN0aW9uKCl7bygpLHIuc2VuZERhdGFTdWNjZXNzKGUpfSxmYWlsOmZ1bmN0aW9uKGUsdCl7bygpLHIucmVwb3J0RXJyb3JDYWxsYmFjayhlLHQpLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ci5yZXBvcnQoKX0pLDNlMyl9LGV2ZW50RXJyb3I6ZnVuY3Rpb24oZSx0KXtyLnJlcG9ydEVycm9yQ2FsbGJhY2soZSx0KX0sbm90U3VyZTpvLGlzVW5sb2FkOm59KX0sci5zZW5kRGF0YVN1Y2Nlc3M9ZnVuY3Rpb24oZSl7ci5ldmVudFN0b3JhZ2UuZGVsZXRlKGUpLHIucmVwb3J0KCl9O3ZhciBpPW4ubG9nLGE9bi5kaXNhYmxlX3N0b3JhZ2Uscz1uLm1heF9iYXRjaF9udW0sbD12b2lkIDA9PT1zPzU6cyxjPW4uYmF0Y2hfdGltZSx1PXZvaWQgMD09PWM/MzA6YztyZXR1cm4gci5pbml0KG4pLHIubWF4QmF0Y2hOdW09bCxyLndhaXRGb3JCYXRjaFRpbWU9dSxyLmlzUmVhZHk9ITEsci5hZGRMaXN0ZW5lcigpLHIuZW5hYmxlRGVidWdNb2RlKCEhaSksci5ldmVudFN0b3JhZ2U9bmV3IGllKHtkaXNhYmxlX3N0b3JhZ2U6YX0pLHIuZXZlbnRTdG9yYWdlLnNldFN0b3JhZ2VLZXkoci5ldnREYXRhQ2FjaGVLZXkpLHIuZXZlbnRTZW5kZXI9bmV3IGNlKHtsb2dnZXI6ci5sb2dnZXJ9KSxyLnJlcG9ydEVycm9yQ2FsbGJhY2s9ZnVuY3Rpb24oKXt9LHJ9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrKHZvaWQgMD09PXQ/XCJ1bmRlZmluZWRcIjpvKHQpKSk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCxlKSx0fShuZSksZmU9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIG49YXJndW1lbnRzW3RdO2Zvcih2YXIgbyBpbiBuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLG8pJiYoZVtvXT1uW29dKX1yZXR1cm4gZX07dmFyIGhlPWZ1bmN0aW9uKCl7dmFyIGU9K0RhdGUubm93KCkrTnVtYmVyKChcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIsOCkpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlKz0xfX0oKSxnZT1mdW5jdGlvbihlLHQpe3ZhciBuPWU7L15ldmVudFxcLi8udGVzdChlKSYmKG49ZS5zbGljZSg2KSk7dmFyIG89dDtyZXR1cm4gUS5pc09iaihvKXx8KG89e30pLG8uZXZlbnRfaW5kZXg9aGUoKSx7ZXZlbnQ6bixwYXJhbXM6byxsb2NhbF90aW1lX21zOituZXcgRGF0ZX19LHZlPWZ1bmN0aW9uIGUodCl7dmFyIG49dGhpczshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuaW5pdD1mdW5jdGlvbihlKXtpZighUS5pc09iaihlKSl0aHJvdyBuZXcgRXJyb3IoXCJpbml0IOeahOWPguaVsOW/hemhu+aYr09iamVjdOexu+Wei1wiKTtuLmxvZ2dlci5pbml0KGUubG9nKSxuLmNoYW5uZWw9bmV3IHBlKGZlKHt9LGUse25hbWU6bi5uYW1lfSkpLG4uY2hhbm5lbC5jYWxsYmFjaz1mdW5jdGlvbigpe24uY2FsbGJhY2tTZW5kJiZuLnN0YXJ0KCl9fSx0aGlzLmNvbmZpZz1mdW5jdGlvbihlKXtRLmlzT2JqKGUpfHxuLmxvZ2dlci50aHJvdyhcImNvbmZpZyDlj4LmlbDlv4XpobvmmK8ge30g55qE5qC85byPXCIpLGUubG9nJiYobi5sb2dnZXIuaW5pdCghMCksbi5jaGFubmVsLmVuYWJsZURlYnVnTW9kZSghMCksZS5sb2c9bnVsbCk7dmFyIHQ9T2JqZWN0LmtleXMoZSk7aWYoIXQubGVuZ3RoKXJldHVybiExO3ZhciBvPXQscj1BcnJheS5pc0FycmF5KG8pLGk9MDtmb3Iobz1yP286b1tTeW1ib2wuaXRlcmF0b3JdKCk7Oyl7dmFyIGE7aWYocil7aWYoaT49by5sZW5ndGgpYnJlYWs7YT1vW2krK119ZWxzZXtpZigoaT1vLm5leHQoKSkuZG9uZSlicmVhazthPWkudmFsdWV9dmFyIHM9YSxsPWVbc107c3dpdGNoKHMpe2Nhc2VcImV2dFBhcmFtc1wiOm4uY2hhbm5lbC5zZXRFdnRQYXJhbXMobCk7YnJlYWs7Y2FzZVwiZGlzYWJsZV9zc2lkXCI6bi5sb2dnZXIuZGVwcmVjYXRlZChcIihkaXNhYmxlX3NzaWQp6K+36YCa6L+HaW5pdOWHveaVsOadpeiuvue9ruOAglwiKSxsJiYobi5sb2dnZXIuaW5mbyhcInNzaWTlt7LnpoHnlKjvvIzorr7nva51c2VyX3VuaXF1ZV9pZOS4jeS8muivt+axgnNzaWTmjqXlj6PjgIJcIiksbi5jaGFubmVsLmlzU3NpZERpc2FibGVkPWwpO2JyZWFrO2Nhc2VcImRpc2FibGVfYXV0b19wdlwiOmwmJihuLmxvZ2dlci5pbmZvKFwi5bey56aB5q2i6buY6K6k5LiK5oqlcHJlZGVmaW5lX3BhZ2V2aWV35LqL5Lu277yM6ZyA5omL5Yqo5LiK5oql44CCXCIpLG4uX2F1dG9TZW5kUFY9ITEpO2JyZWFrO2Nhc2VcIl9zdGFnaW5nX2ZsYWdcIjpcIlwiK2w9PVwiMVwiJiZuLmxvZ2dlci5pbmZvKFwi5qC55o2uX3N0YWdpbmdfZmxhZ+iuvue9ru+8jOaVsOaNruWwhuS8muS4iuaKpeWIsHN0YWcg6KGo44CCXCIpLG4uY2hhbm5lbC5zZXRFdnRQYXJhbXMoe19zdGFnaW5nX2ZsYWc6TnVtYmVyKGwpfSk7YnJlYWs7Y2FzZVwicmVwb3J0RXJyb3JDYWxsYmFja1wiOlwiZnVuY3Rpb25cIj09dHlwZW9mIGwmJihuLmNoYW5uZWwucmVwb3J0RXJyb3JDYWxsYmFjaz1sKTticmVhaztkZWZhdWx0Om4uY2hhbm5lbC5zZXRFbnYocyxsKX19fSx0aGlzLnNlbmQ9ZnVuY3Rpb24oKXtuLnN0YXJ0KCl9LHRoaXMuc3RhcnQ9ZnVuY3Rpb24oKXtpZihuLmNoYW5uZWwuaXNVc2VyVG9rZW5zUmVhZHkpe2lmKG4uX2lzU2VuZEZ1bmNDYWxsZWQpcmV0dXJuO24uX2lzU2VuZEZ1bmNDYWxsZWQ9ITAsbi5sb2dnZXIuaW5mbyhcIueci+WIsOacrOaPkOekuu+8jOaEj+WRs+edgOeUqOaIt+S/oeaBr+W3suWujOWFqOWwsee7qu+8jOS4iuaKpemAmumBk+aJk+W8gOOAgueUqOaIt+agh+ivhuWmguS4i++8mlwiKSxuLmxvZ2dlci5sb2dKU09OKG4uY2hhbm5lbC5nZXQoKS51c2VyKSxuLl9hdXRvU2VuZFBWJiZuLnByZWRlZmluZVBhZ2VWaWV3KCksbi5jaGFubmVsLnNldFJlYWR5KCEwKX1lbHNlIG4uY2FsbGJhY2tTZW5kPSEwfSx0aGlzLnByZWRlZmluZVBhZ2VWaWV3PWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHQ9e3RpdGxlOmRvY3VtZW50LnRpdGxlfHxsb2NhdGlvbi5wYXRobmFtZSx1cmw6bG9jYXRpb24uaHJlZix1cmxfcGF0aDpsb2NhdGlvbi5wYXRobmFtZX0sbz1mZSh7fSx0LGUpO24uZXZlbnQoXCJwcmVkZWZpbmVfcGFnZXZpZXdcIixvLCEwKX0sdGhpcy5ldmVudD1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9QXJyYXkoZSksbz0wO288ZTtvKyspdFtvXT1hcmd1bWVudHNbb107dmFyIHI9US5pc0Jvb2xlYW4odFt0Lmxlbmd0aC0xXSksaT0hIXImJnRbdC5sZW5ndGgtMV0sYT1yP3Quc2xpY2UoMCx0Lmxlbmd0aC0xKTp0LHM9YVswXSxsPVtdO1EuaXNBcnJheShzKT9sPWE6bFswXT1hLGw9bC5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiBnZS5hcHBseSh2b2lkIDAsZSl9KSksbi5jaGFubmVsLmV2ZW50KGwsaSl9LHRoaXMuX2lzU2VuZEZ1bmNDYWxsZWQ9ITEsdGhpcy5fYXV0b1NlbmRQVj0hMCx0aGlzLm5hbWU9dCx0aGlzLmxvZ2dlcj1uZXcgTih0KX07dmUuZXhwb3J0TWV0aG9kcz1bXCJpbml0XCIsXCJjb25maWdcIixcInNlbmRcIixcInN0YXJ0XCIsXCJwcmVkZWZpbmVQYWdlVmlld1wiXTt0LmRlZmF1bHQ9ZnVuY3Rpb24gZSh0KXt2YXIgbj10aGlzO3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5fZXhwb3J0Q29sbGVjdD1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9QXJyYXkoZSksbz0wO288ZTtvKyspdFtvXT1hcmd1bWVudHNbb107bi5faXNRdWV1ZVByb2Nlc3NlZD9uLl9leGVjdXRlQ21kLmFwcGx5KG4sdCk6KG4uY21kUXVldWUucHVzaCh0KSxuLl9wcm9jZXNzQ21kUXVldWUoKSl9LHRoaXMuX3Byb2Nlc3NDbWRRdWV1ZT1mdW5jdGlvbigpe2lmKDAhPT1uLmNtZFF1ZXVlLmxlbmd0aCl7dmFyIGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPS0xO3JldHVybiBlLmZvckVhY2goKGZ1bmN0aW9uKGUscil7KHZvaWQgMCE9PW4/ZVtuXTplKT09PXQmJihvPXIpfSkpLG99KG4uY21kUXVldWUsXCJpbml0XCIsXCIwXCIpOy0xIT09ZSYmKG4uX2lzUXVldWVQcm9jZXNzZWQ9ITAsbi5fZXhlY3V0ZUNtZC5hcHBseShuLG4uY21kUXVldWVbZV0pLG4uY21kUXVldWUuZm9yRWFjaCgoZnVuY3Rpb24odCxvKXtvIT09ZSYmbi5fZXhlY3V0ZUNtZC5hcHBseShuLHQpfSkpLG4uY21kUXVldWU9W10pfX0sdGhpcy5fZXhlY3V0ZUNtZD1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9QXJyYXkoZSksbz0wO288ZTtvKyspdFtvXT1hcmd1bWVudHNbb107dmFyIHIsaSxhPXRbMF07dmUuZXhwb3J0TWV0aG9kcy5pbmRleE9mKGEpPi0xPyhyPW4uY29sbG9jdG9yKVthXS5hcHBseShyLHQuc2xpY2UoMSkpOihpPW4uY29sbG9jdG9yKS5ldmVudC5hcHBseShpLHQpfSx0aGlzLm5hbWU9dHx8XCJDb2xsZWN0b3JcIisgK25ldyBEYXRlLHRoaXMuY21kUXVldWU9W10sdGhpcy5jb2xsb2N0b3I9bmV3IHZlKHRoaXMubmFtZSksdGhpcy5faXNRdWV1ZVByb2Nlc3NlZD0hMSx0aGlzLl9wcm9jZXNzQ21kUXVldWUoKSx0aGlzLl9leHBvcnRDb2xsZWN0LmluaXQ9dGhpcy5fZXhwb3J0Q29sbGVjdC5iaW5kKHRoaXMsXCJpbml0XCIpLHRoaXMuX2V4cG9ydENvbGxlY3QuY29uZmlnPXRoaXMuX2V4cG9ydENvbGxlY3QuYmluZCh0aGlzLFwiY29uZmlnXCIpLHRoaXMuX2V4cG9ydENvbGxlY3Quc2VuZD10aGlzLl9leHBvcnRDb2xsZWN0LmJpbmQodGhpcyxcInNlbmRcIiksdGhpcy5fZXhwb3J0Q29sbGVjdC5zdGFydD10aGlzLl9leHBvcnRDb2xsZWN0LmJpbmQodGhpcyxcInN0YXJ0XCIpLHRoaXMuX2V4cG9ydENvbGxlY3QucHJlZGVmaW5lUGFnZVZpZXc9dGhpcy5fZXhwb3J0Q29sbGVjdC5iaW5kKHRoaXMsXCJwcmVkZWZpbmVQYWdlVmlld1wiKSx0aGlzLl9leHBvcnRDb2xsZWN0fSxlLmV4cG9ydHM9dC5kZWZhdWx0fSxcIi4vc3JjL2NvbnRyb2wvY3NzRnVsbHNjcmVlbi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9jc3NGdWxsc2NyZWVuLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwiY3NzRnVsbHNjcmVlblwiLChmdW5jdGlvbigpe3ZhciBlPWkuZGVmYXVsdC51dGlsO2lmKHRoaXMuY29uZmlnLmNzc0Z1bGxzY3JlZW4pe3ZhciB0PVwiTTgzNC41NiA4MS45MkgxODkuNDRjLTU5LjM5MiAwLTEwNy41MiA0OC4xMjgtMTA3LjUyIDEwNy41MnY2NDUuMTJjMCA1OS4zOTIgNDguMTI4IDEwNy41MiAxMDcuNTIgMTA3LjUyaDY0NS4xMmM1OS4zOTIgMCAxMDcuNTItNDguMTI4IDEwNy41Mi0xMDcuNTJWMTg5LjQ0YzAtNTkuMzkyLTQ4LjEyOC0xMDcuNTItMTA3LjUyLTEwNy41MnpNNDU4LjI0IDcyNy4wNGMwIDE0Ljg0OC0xMi4yODggMjYuNjI0LTI2LjYyNCAyNi42MjRTNDA0LjQ4IDc0MS44ODggNDA0LjQ4IDcyNy4wNHYtNjkuNjMyTDI4OS4yOCA3NzMuMTJjLTEwLjc1MiAxMC4yNC0yNy42NDggMTAuMjQtMzcuODg4IDAtMTAuMjQtMTAuNzUyLTEwLjI0LTI3LjY0OCAwLTM3Ljg4OEwzNjYuNTkyIDYxOS41MkgyOTYuOTZjLTE0Ljg0OCAwLTI2LjYyNC0xMi4yODgtMjYuNjI0LTI2LjYyNHMxMi4yODgtMjYuNjI0IDI2LjYyNC0yNi42MjRoMTM0LjE0NGMxNC44NDggMCAyNi42MjQgMTIuMjg4IDI2LjYyNCAyNi42MjRWNzI3LjA0eiBtMC0yOTUuOTM2YzAgMTQuODQ4LTEyLjI4OCAyNi42MjQtMjYuNjI0IDI2LjYyNEgyOTYuOTZjLTE0Ljg0OCAwLTI2LjYyNC0xMi4yODgtMjYuNjI0LTI2LjYyNFMyODIuMTEyIDQwNC40OCAyOTYuOTYgNDA0LjQ4aDY5LjYzMkwyNTEuMzkyIDI4OS4yOGMtMTAuMjQtMTAuNzUyLTEwLjI0LTI3LjY0OCAwLTM3Ljg4OCA1LjEyLTUuMTIgMTIuMjg4LTcuNjggMTguOTQ0LTcuNjggNi42NTYgMCAxMy44MjQgMi41NiAxOC45NDQgNy42OEw0MDQuNDggMzY2LjU5MlYyOTYuOTZjMC0xNC44NDggMTIuMjg4LTI2LjYyNCAyNi42MjQtMjYuNjI0czI2LjYyNCAxMi4yODggMjYuNjI0IDI2LjYyNHYxMzQuMTQ0ek03NzMuMTIgNzczLjEyYy0xMC43NTIgMTAuMjQtMjcuNjQ4IDEwLjI0LTM3Ljg4OCAwTDYxOS41MiA2NTcuNDA4VjcyNy4wNGMwIDE0Ljg0OC0xMi4yODggMjYuNjI0LTI2LjYyNCAyNi42MjRzLTI2LjYyNC0xMS43NzYtMjYuNjI0LTI2LjYyNHYtMTM0LjE0NGMwLTE0Ljg0OCAxMi4yODgtMjYuNjI0IDI2LjYyNC0yNi42MjRINzI3LjA0YzE0Ljg0OCAwIDI2LjYyNCAxMi4yODggMjYuNjI0IDI2LjYyNHMtMTIuMjg4IDI2LjYyNC0yNi42MjQgMjYuNjI0aC02OS42MzJsMTE1LjIgMTE1LjJjMTAuNzUyIDEwLjc1MiAxMC43NTIgMjcuNjQ4IDAuNTEyIDM4LjR6IG0wLTQ4My44NEw2NTcuNDA4IDQwNC40OEg3MjcuMDRjMTQuODQ4IDAgMjYuNjI0IDEyLjI4OCAyNi42MjQgMjYuNjI0IDAgMTQuODQ4LTEyLjI4OCAyNi42MjQtMjYuNjI0IDI2LjYyNGgtMTM0LjE0NGMtMTQuODQ4IDAtMjYuNjI0LTEyLjI4OC0yNi42MjQtMjYuNjI0VjI5Ni45NmMwLTE0Ljg0OCAxMi4yODgtMjYuNjI0IDI2LjYyNC0yNi42MjRzMjYuNjI0IDEyLjI4OCAyNi42MjQgMjYuNjI0djY5LjYzMkw3MzQuNzIgMjUwLjg4YzUuMTItNS4xMiAxMi4yODgtNy42OCAxOC45NDQtNy42OHMxMy44MjQgMi41NiAxOC45NDQgNy42OGMxMC43NTIgMTAuNzUyIDEwLjc1MiAyNy42NDggMC41MTIgMzguNHpcIixuPVwiTTg0My42MTcyMTIgNjcuODk4NDEzIDE3NS40MTE1NjcgNjcuODk4NDEzYy02MS41MDI3NDkgMC0xMTEuMzY3NDM3IDQ5Ljg1NjUwMS0xMTEuMzY3NDM3IDExMS4zNjc0MzdsMCA2NjguMjA1NjQ1YzAgNjEuNTEwOTM2IDQ5Ljg2NDY4OCAxMTEuMzY3NDM3IDExMS4zNjc0MzcgMTExLjM2NzQzN0w4NDMuNjE3MjEyIDk1OC44Mzg5MzFjNjEuNTEwOTM2IDAgMTExLjM2NzQzNy00OS44NTY1MDEgMTExLjM2NzQzNy0xMTEuMzY3NDM3TDk1NC45ODQ2NDggMTc5LjI2NTg1Qzk1NC45ODQ2NDggMTE3Ljc1NDkxNCA5MDUuMTI5MTcgNjcuODk4NDEzIDg0My42MTcyMTIgNjcuODk4NDEzek0zOTguMTQ2NDQxIDczNi4xMDQwNTdjMTUuMzgwMjkyIDAgMjcuODQyMTE1IDEyLjQ2MTgyMyAyNy44NDIxMTUgMjcuODQyMTE1IDAgMTUuMzc5MjY5LTEyLjQ2MTgyMyAyNy44NDEwOTItMjcuODQyMTE1IDI3Ljg0MTA5MkwyNTkuNzI1ODU4IDc5MS43ODcyNjRjLTcuNzg1MzE0IDAtMTQuNzgxNjU4LTMuMjE3Mjc1LTE5LjgzODgzNy04LjM2NTUyOC01LjM4MzYxNC00LjU3NzI0OS04Ljc5MTIyNC0xMS4yMjg3MzktOC43OTEyMjQtMTkuNDc1NTY0TDIzMS4wOTU3OTcgNjI0LjczNjYyMWMwLTE1LjM3MTA4MiAxMi40NzEwMzMtMjcuODQyMTE1IDI3Ljg0MjExNS0yNy44NDIxMTUgMTUuMzgwMjkyIDAgMjcuODQyMTE1IDEyLjQ3MTAzMyAyNy44NDIxMTUgMjcuODQyMTE1bC0wLjYxNjAzIDcxLjQyNjc3MyAxMzMuMDM2OTY5LTEzMy4wMzc5OTIgMzkuMzc4ODY5IDM5LjM3ODg2OUwzMjQuOTYyNjUxIDczNi4xMTMyNjcgMzk4LjE0NjQ0MSA3MzYuMTA0MDU3ek00MTkuMTk5OTQyIDQ2My42MTE5NDMgMjg2LjE2Mjk3NCAzMzAuNTY1NzY0bDAuNjE2MDMgNzEuNDM1OTgyYzAgMTUuMzgwMjkyLTEyLjQ2MTgyMyAyNy44NDIxMTUtMjcuODQyMTE1IDI3Ljg0MjExNS0xNS4zNzEwODIgMC0yNy44NDIxMTUtMTIuNDYxODIzLTI3Ljg0MjExNS0yNy44NDIxMTVMMjMxLjA5NDc3NCAyNjIuNzkxMTcyYzAtOC4yNTYwMzQgMy40MDc2MS0xNC45MDg1NDggOC43OTEyMjQtMTkuNDc2NTg3IDUuMDU3MTc5LTUuMTQ4MjUzIDEyLjA1MzUyNC04LjM3NDczOCAxOS44Mzg4MzctOC4zNzQ3MzhsMTM4LjQyMDU4MyAwLjAwOTIxYzE1LjM4MDI5MiAwIDI3Ljg0MjExNSAxMi40NjE4MjMgMjcuODQyMTE1IDI3Ljg0MjExNXMtMTIuNDYxODIzIDI3Ljg0MjExNS0yNy44NDIxMTUgMjcuODQyMTE1bC03My4xNzU2MDMtMC4wMDkyMSAxMzMuNjA3OTc0IDEzMy42MDc5NzRMNDE5LjE5OTk0MiA0NjMuNjExOTQzek03ODcuOTMyOTgxIDc2My45NDYxNzJjMCA4LjI0Nzg0OC0zLjQwNzYxIDE0Ljg5OTMzOC04Ljc5MTIyNCAxOS40NzU1NjQtNS4wNTcxNzkgNS4xNDgyNTMtMTIuMDUzNTI0IDguMzY1NTI4LTE5LjgzOTg2MSA4LjM2NTUyOEw2MjAuODgxMzE0IDc5MS43ODcyNjRjLTE1LjM3OTI2OSAwLTI3Ljg0MTA5Mi0xMi40NjE4MjMtMjcuODQxMDkyLTI3Ljg0MTA5MiAwLTE1LjM4MDI5MiAxMi40NjE4MjMtMjcuODQyMTE1IDI3Ljg0MTA5Mi0yNy44NDIxMTVsNzMuMTg1ODM2IDAuMDA5MjFMNTYwLjQ0OTk2NyA2MDIuNTA0MjdsMzkuMzc4ODY5LTM5LjM3ODg2OUw3MzIuODc1MDE1IDY5Ni4xNjMzOTNsLTAuNjI1MjQtNzEuNDI2NzczYzAtMTUuMzcxMDgyIDEyLjQ2Mjg0Ni0yNy44NDIxMTUgMjcuODQyMTE1LTI3Ljg0MjExNSAxNS4zODAyOTIgMCAyNy44NDIxMTUgMTIuNDcxMDMzIDI3Ljg0MjExNSAyNy44NDIxMTVMNzg3LjkzNDAwNSA3NjMuOTQ2MTcyek03ODcuOTMyOTgxIDQwMi4wMDA3MjRjMCAxNS4zODAyOTItMTIuNDYxODIzIDI3Ljg0MjExNS0yNy44NDIxMTUgMjcuODQyMTE1LTE1LjM3OTI2OSAwLTI3Ljg0MjExNS0xMi40NjE4MjMtMjcuODQyMTE1LTI3Ljg0MjExNWwwLjYyNTI0LTcxLjQzNTk4Mkw1OTkuODI4ODM2IDQ2My42MTE5NDNsLTM5LjM3ODg2OS0zOS4zNzg4NjkgMTMzLjYxNzE4NC0xMzMuNjA3OTc0LTczLjE4NTgzNiAwLjAwOTIxYy0xNS4zNzkyNjkgMC0yNy44NDEwOTItMTIuNDYxODIzLTI3Ljg0MTA5Mi0yNy44NDIxMTVzMTIuNDYxODIzLTI3Ljg0MjExNSAyNy44NDEwOTItMjcuODQyMTE1bDEzOC40MjE2MDYtMC4wMDkyMWM3Ljc4NTMxNCAwIDE0Ljc4MTY1OCAzLjIyNjQ4NCAxOS44Mzk4NjEgOC4zNzQ3MzggNS4zODM2MTQgNC41NjgwMzkgOC43OTEyMjQgMTEuMjE5NTI5IDguNzkxMjI0IDE5LjQ3NjU4N0w3ODcuOTM0MDA1IDQwMi4wMDA3MjR6XCIsbz1lLmNyZWF0ZURvbShcInhnLWNzc2Z1bGxzY3JlZW5cIiwnPHhnLWljb24gY2xhc3M9XCJ4Z3BsYXllci1pY29uXCI+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxMDI0XCIgaGVpZ2h0PVwiMTAyNFwiIHZpZXdCb3g9XCIwIDAgMTAyNCAxMDI0XCI+XFxuICAgICAgICAgICAgPHBhdGggdHJhbnNmb3JtPVwic2NhbGUoMC4wMyAwLjAzKVwiIGQ9XCInK24rJ1wiPjwvcGF0aD5cXG4gICAgICAgIDwvc3ZnPjwveGctaWNvbj4nLHt9LFwieGdwbGF5ZXItY3NzZnVsbHNjcmVlblwiKSxyPXRoaXMuY29uZmlnLmxhbmcmJlwiemgtY25cIj09PXRoaXMuY29uZmlnLmxhbmc/XCLmoLflvI/lhajlsY9cIjpcIkZ1bGwgc2NyZWVuXCIsYT10aGlzLmNvbmZpZy5sYW5nJiZcInpoLWNuXCI9PT10aGlzLmNvbmZpZy5sYW5nP1wi6YCA5Ye65YWo5bGPXCI6XCJFeGl0IGZ1bGwgc2NyZWVuXCIscz10aGlzLmNvbnRyb2xzLGw9dGhpcy5yb290LGM9ZS5jcmVhdGVEb20oXCJ4Zy10aXBzXCIscix7fSxcInhncGxheWVyLXRpcHNcIiksdT1vLnF1ZXJ5U2VsZWN0b3IoXCJwYXRoXCIpO28uYXBwZW5kQ2hpbGQoYyk7cy5hcHBlbmRDaGlsZChvKSxbXCJjbGlja1wiLFwidG91Y2hlbmRcIl0uZm9yRWFjaCgoZnVuY3Rpb24oaSl7by5hZGRFdmVudExpc3RlbmVyKGksKGZ1bmN0aW9uKG8pe3ZhciBpO28ucHJldmVudERlZmF1bHQoKSxvLnN0b3BQcm9wYWdhdGlvbigpLGUuaGFzQ2xhc3MobCxcInhncGxheWVyLWNzc2Z1bGxzY3JlZW4tYWN0aXZlXCIpfHxlLmhhc0NsYXNzKGwsXCJ4Z3BsYXllci1pcy1mdWxsc2NyZWVuXCIpPyhpPWwsdS5zZXRBdHRyaWJ1dGUoXCJkXCIsbiksYy50ZXh0Q29udGVudD1yLGUucmVtb3ZlQ2xhc3MoaSxcInhncGxheWVyLWNzc2Z1bGxzY3JlZW4tYWN0aXZlXCIpKTpmdW5jdGlvbihuKXt1LnNldEF0dHJpYnV0ZShcImRcIix0KSxjLnRleHRDb250ZW50PWEsZS5hZGRDbGFzcyhuLFwieGdwbGF5ZXItY3NzZnVsbHNjcmVlbi1hY3RpdmVcIil9KGwpfSkpfSkpLG8uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwoZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCksYy5zdHlsZS5sZWZ0PVwiNTAlXCI7dmFyIHQ9Yy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dC5yaWdodD5uLnJpZ2h0JiYoYy5zdHlsZS5sZWZ0PS10LnJpZ2h0K24ucmlnaHQrMTYrXCJweFwiKX0pKX19KSl9LFwiLi9zcmMvY29udHJvbC9kYW5tdS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvZGFubXUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1pKG4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpKSxyPWkobigvKiEgZGFubXUuanMgKi9cIi4vbm9kZV9tb2R1bGVzL2Rhbm11LmpzL2Rpc3QvaW5kZXguanNcIikpO2Z1bmN0aW9uIGkoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fW8uZGVmYXVsdC5pbnN0YWxsKFwiZGFubXVcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKGUuY29uZmlnLmRhbm11KXt2YXIgdD1vLmRlZmF1bHQudXRpbC5jcmVhdGVEb20oXCJ4Zy1idWxsZXRcIixcIlwiLHt9LFwieGdwbGF5ZXItYnVsbGV0XCIpO2Uucm9vdC5hcHBlbmRDaGlsZCh0KSx0LnN0eWxlLmhlaWdodD1cIjEwMCVcIjt2YXIgbj1vLmRlZmF1bHQudXRpbC5kZWVwQ29weSh7Y29udGFpbmVyOnQscGxheWVyOmUudmlkZW8sY29tbWVudHM6W10sYXJlYTp7c3RhcnQ6MCxlbmQ6MX19LGUuY29uZmlnLmRhbm11KTtlLm9uY2UoXCJjb21wbGV0ZVwiLChmdW5jdGlvbigpe3ZhciBpPW5ldyByLmRlZmF1bHQobik7by5kZWZhdWx0LnV0aWwuYWRkQ2xhc3ModCxcInhncGxheWVyLWhhcy1idWxsZXRcIiksZS5jb25maWcuZGFubXUuY2xvc2VEZWZhdWx0QnRufHwoZS5idWxsZXRCdG49by5kZWZhdWx0LnV0aWwuY29weURvbShpLmJ1bGxldEJ0bi5jcmVhdGVTd2l0Y2goITApKSxlLmNvbnRyb2xzLmFwcGVuZENoaWxkKGUuYnVsbGV0QnRuKSxbXCJjbGlja1wiLFwidG91Y2hlbmRcIl0uZm9yRWFjaCgoZnVuY3Rpb24obil7ZS5idWxsZXRCdG4uYWRkRXZlbnRMaXN0ZW5lcihuLChmdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKSxvLmRlZmF1bHQudXRpbC50b2dnbGVDbGFzcyhlLmJ1bGxldEJ0bixcImRhbm11LXN3aXRjaC1hY3RpdmVcIiksby5kZWZhdWx0LnV0aWwuaGFzQ2xhc3MoZS5idWxsZXRCdG4sXCJkYW5tdS1zd2l0Y2gtYWN0aXZlXCIpPyhvLmRlZmF1bHQudXRpbC5hZGRDbGFzcyh0LFwieGdwbGF5ZXItaGFzLWJ1bGxldFwiKSxlLm9uY2UoXCJ0aW1ldXBkYXRlXCIsKGZ1bmN0aW9uKCl7aS5zdGFydCgpfSkpKTooby5kZWZhdWx0LnV0aWwucmVtb3ZlQ2xhc3ModCxcInhncGxheWVyLWhhcy1idWxsZXRcIiksaS5zdG9wKCkpfSksITEpfSkpLGUub25FbGVtZW50Q2xpY2smJnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKGZ1bmN0aW9uKG4pe2Uub25FbGVtZW50Q2xpY2sobix0KX0pLCExKSxlLm9uRWxlbWVudERibGNsaWNrJiZ0LmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLChmdW5jdGlvbihuKXtlLm9uRWxlbWVudERibGNsaWNrKG4sdCl9KSwhMSksZS5vbihcInBhdXNlXCIsKGZ1bmN0aW9uKCl7by5kZWZhdWx0LnV0aWwuaGFzQ2xhc3MoZS5idWxsZXRCdG4sXCJkYW5tdS1zd2l0Y2gtYWN0aXZlXCIpJiZpLnBhdXNlKCl9KSksZS5vbihcInBsYXlcIiwoZnVuY3Rpb24oKXtvLmRlZmF1bHQudXRpbC5oYXNDbGFzcyhlLmJ1bGxldEJ0bixcImRhbm11LXN3aXRjaC1hY3RpdmVcIikmJmkucGxheSgpfSkpLGUub24oXCJzZWVrZWRcIiwoZnVuY3Rpb24oKXtvLmRlZmF1bHQudXRpbC5oYXNDbGFzcyhlLmJ1bGxldEJ0bixcImRhbm11LXN3aXRjaC1hY3RpdmVcIikmJihpLnN0b3AoKSxpLnN0YXJ0KCkpfSkpKSxlLmRhbm11PWl9KSl9fSkpfSxcIi4vc3JjL2NvbnRyb2wvZGVmaW5pdGlvbi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9kZWZpbml0aW9uLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwiZGVmaW5pdGlvblwiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1pLmRlZmF1bHQudXRpbCxuPWkuZGVmYXVsdC5zbmlmZmVyLG89dC5jcmVhdGVEb20oXCJ4Zy1kZWZpbml0aW9uXCIsXCJcIix7dGFiaW5kZXg6M30sXCJ4Z3BsYXllci1kZWZpbml0aW9uXCIpLHI9ZS5jb250cm9scztcIm1vYmlsZVwiPT09bi5kZXZpY2UmJihlLmNvbmZpZy5kZWZpbml0aW9uQWN0aXZlPVwiY2xpY2tcIik7dmFyIGE9W107ZnVuY3Rpb24gcygpe3ZhciBuPVtcIjx1bD5cIl0saT1lLmNvbmZpZy51cmwscz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtlLnN3aXRjaFVSTD9bXCJtcDRcIixcImhsc1wiLFwiX19mbHZfX1wiLFwiZGFzaFwiXS5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuIWVbdF18fChlW3RdLnVybCYmKHMuaHJlZj1lW3RdLnVybCksXCJfX2Zsdl9fXCI9PT10JiYoZVt0XS5fb3B0aW9ucz9zLmhyZWY9ZVt0XS5fb3B0aW9ucy51cmw6cy5ocmVmPWVbdF0uX21lZGlhRGF0YVNvdXJjZS51cmwpLGk9cy5ocmVmLCExKX0pKTppPWUuY3VycmVudFNyY3x8ZS5zcmMsZS5obHMmJihzLmhyZWY9ZS5obHMudXJsLGk9cy5ocmVmKSxhLmZvckVhY2goKGZ1bmN0aW9uKHQpe3MuaHJlZj10LnVybCxlLmRhc2g/bi5wdXNoKFwiPGxpIHVybD0nXCIrdC51cmwrXCInIGNuYW1lPSdcIit0Lm5hbWUrXCInIGNsYXNzPSdcIisodC5zZWxlY3RlZD9cImRlZmluaXRpb25cIjpcIlwiKStcIic+XCIrdC5uYW1lK1wiPC9saT5cIik6bi5wdXNoKFwiPGxpIHVybD0nXCIrdC51cmwrXCInIGNuYW1lPSdcIit0Lm5hbWUrXCInIGNsYXNzPSdcIisocy5ocmVmPT09aT9cImRlZmluaXRpb25cIjpcIlwiKStcIic+XCIrdC5uYW1lK1wiPC9saT5cIil9KSk7dmFyIGw9YS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBzLmhyZWY9dC51cmwsZS5kYXNoPyEwPT09dC5zZWxlY3RlZDpzLmhyZWY9PT1pfSkpO24ucHVzaChcIjwvdWw+PHAgY2xhc3M9J25hbWUnPlwiKyhsWzBdfHx7bmFtZTpcIlwifSkubmFtZStcIjwvcD5cIik7dmFyIGM9ci5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLWRlZmluaXRpb25cIik7aWYoYyl7Yy5pbm5lckhUTUw9bi5qb2luKFwiXCIpO3ZhciB1PWMucXVlcnlTZWxlY3RvcihcIi5uYW1lXCIpO2UuY29uZmlnLmRlZmluaXRpb25BY3RpdmUmJlwiaG92ZXJcIiE9PWUuY29uZmlnLmRlZmluaXRpb25BY3RpdmV8fHUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwoZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksdC5hZGRDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci1kZWZpbml0aW9uLWFjdGl2ZVwiKSxjLmZvY3VzKCl9KSl9ZWxzZXtvLmlubmVySFRNTD1uLmpvaW4oXCJcIik7dmFyIGQ9by5xdWVyeVNlbGVjdG9yKFwiLm5hbWVcIik7ZS5jb25maWcuZGVmaW5pdGlvbkFjdGl2ZSYmXCJob3ZlclwiIT09ZS5jb25maWcuZGVmaW5pdGlvbkFjdGl2ZXx8ZC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLChmdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKSx0LmFkZENsYXNzKGUucm9vdCxcInhncGxheWVyLWRlZmluaXRpb24tYWN0aXZlXCIpLG8uZm9jdXMoKX0pKSxyLmFwcGVuZENoaWxkKG8pfX1mdW5jdGlvbiBsKG4peyhhPW4pJiZhIGluc3RhbmNlb2YgQXJyYXkmJmEubGVuZ3RoPjEmJih0LmFkZENsYXNzKGUucm9vdCxcInhncGxheWVyLWlzLWRlZmluaXRpb25cIiksZS5vbihcImNhbnBsYXlcIixzKSl9ZS5vbihcInJlc291cmNlUmVhZHlcIixsKSxbXCJ0b3VjaGVuZFwiLFwiY2xpY2tcIl0uZm9yRWFjaCgoZnVuY3Rpb24ocil7by5hZGRFdmVudExpc3RlbmVyKHIsKGZ1bmN0aW9uKHIpe3IucHJldmVudERlZmF1bHQoKSxyLnN0b3BQcm9wYWdhdGlvbigpO3ZhciBpPXIudGFyZ2V0fHxyLnNyY0VsZW1lbnQscz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtpZihpJiZcImxpXCI9PT1pLnRhZ05hbWUudG9Mb2NhbGVMb3dlckNhc2UoKSl7aWYoZS5lbWl0KFwiYmVmb3JlRGVmaW5pdGlvbkNoYW5nZVwiLHMuaHJlZiksQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChpLnBhcmVudE5vZGUuY2hpbGROb2RlcywoZnVuY3Rpb24oZSl7dC5yZW1vdmVDbGFzcyhlLFwiZGVmaW5pdGlvblwiKX0pKSxlLmRhc2gmJmEuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5zZWxlY3RlZD0hMSxlLm5hbWU9PT1pLmlubmVySFRNTCYmKGUuc2VsZWN0ZWQ9ITApfSkpLHQuYWRkQ2xhc3MoaSxcImRlZmluaXRpb25cIiksaS5wYXJlbnROb2RlLm5leHRTaWJsaW5nLmlubmVySFRNTD1cIlwiK2kuZ2V0QXR0cmlidXRlKFwiY25hbWVcIikscy5ocmVmPWkuZ2V0QXR0cmlidXRlKFwidXJsXCIpLGUuc3dpdGNoVVJMKXt2YXIgbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtbXCJtcDRcIixcImhsc1wiLFwiX19mbHZfX1wiLFwiZGFzaFwiXS5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuIWVbdF18fChlW3RdLnVybCYmKGwuaHJlZj1lW3RdLnVybCksXCJfX2Zsdl9fXCI9PT10JiYoZVt0XS5fb3B0aW9ucz9sLmhyZWY9ZVt0XS5fb3B0aW9ucy51cmw6bC5ocmVmPWVbdF0uX21lZGlhRGF0YVNvdXJjZS51cmwpLCExKX0pKSxsLmhyZWY9PT1zLmhyZWZ8fGUuZW5kZWR8fGUuc3dpdGNoVVJMKHMuaHJlZil9ZWxzZXtpZihlLmhscyl7ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7ZS5obHMudXJsfWlmKHMuaHJlZiE9PWUuY3VycmVudFNyYyl7dmFyIGM9ZS5jdXJyZW50VGltZSx1PWUucGF1c2VkO2UuZW5kZWR8fChlLnNyYz1zLmhyZWYsZS5vbmNlKFwiY2FucGxheVwiLChmdW5jdGlvbigpe2UuY3VycmVudFRpbWU9Yyx1fHxlLnBsYXkoKX0pKSl9fWUuZW1pdChcImRlZmluaXRpb25DaGFuZ2VcIixzLmhyZWYpLFwibW9iaWxlXCI9PT1uLmRldmljZSYmdC5yZW1vdmVDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci1kZWZpbml0aW9uLWFjdGl2ZVwiKX1lbHNlXCJjbGlja1wiIT09ZS5jb25maWcuZGVmaW5pdGlvbkFjdGl2ZXx8IWl8fFwicFwiIT09aS50YWdOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkmJlwiZW1cIiE9PWkudGFnTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpfHwodC5hZGRDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci1kZWZpbml0aW9uLWFjdGl2ZVwiKSxvLmZvY3VzKCkpO2UuZW1pdChcImZvY3VzXCIpfSksITEpfSkpLG8uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwoZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksdC5yZW1vdmVDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci1kZWZpbml0aW9uLWFjdGl2ZVwiKX0pKSxlLm9uY2UoXCJkZXN0cm95XCIsKGZ1bmN0aW9uIHQoKXtlLm9mZihcImNhbnBsYXlcIixzKSxlLm9mZihcInJlc291cmNlUmVhZHlcIixsKSxlLm9mZihcImRlc3Ryb3lcIix0KX0pKX0pKX0sXCIuL3NyYy9jb250cm9sL2Rvd25sb2FkLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9kb3dubG9hZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvPWEobigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIikpLHI9bigvKiEgLi4vdXRpbHMvdXJsICovXCIuL3NyYy91dGlscy91cmwuanNcIiksaT1hKG4oLyohIGRvd25sb2FkanMgKi9cIi4vbm9kZV9tb2R1bGVzL2Rvd25sb2FkanMvZG93bmxvYWQuanNcIikpO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fW8uZGVmYXVsdC5pbnN0YWxsKFwiZG93bmxvYWRcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKHRoaXMuY29uZmlnLmRvd25sb2FkKXt2YXIgdD1lLnJvb3Qsbj1vLmRlZmF1bHQudXRpbCxhPW4uY3JlYXRlRG9tKFwieGdwbGF5ZXItZG93bmxvYWRcIiwnPHhnLWljb24gY2xhc3M9XCJ4Z3BsYXllci1kb3dubG9hZC1pbWdcIj48L3hnLWljb24+Jyx7fSxcInhncGxheWVyLWRvd25sb2FkXCIpO2UuY29udHJvbHMuYXBwZW5kQ2hpbGQoYSk7dmFyIHM9ZS5jb25maWcubGFuZyYmXCJ6aC1jblwiPT09ZS5jb25maWcubGFuZz9cIuS4i+i9vVwiOlwiRG93bmxvYWRcIixsPW4uY3JlYXRlRG9tKFwieGctdGlwc1wiLHMse30sXCJ4Z3BsYXllci10aXBzXCIpO2EuYXBwZW5kQ2hpbGQobCksZS5kb3dubG9hZD1mdW5jdGlvbigpe3ZhciB0PSgwLHIuZ2V0QWJzb2x1dGVVUkwpKGUuY29uZmlnLnVybCk7KDAsaS5kZWZhdWx0KSh0KX0sYS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoZnVuY3Rpb24odCl7dC5zdG9wUHJvcGFnYXRpb24oKSxlLmRvd25sb2FkKCl9KSksYS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLChmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKSxsLnN0eWxlLmxlZnQ9XCI1MCVcIjt2YXIgbj1sLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG89dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtuLnJpZ2h0Pm8ucmlnaHQmJihsLnN0eWxlLmxlZnQ9LW4ucmlnaHQrby5yaWdodCsxNitcInB4XCIpfSkpfX0pKX0sXCIuL3NyYy9jb250cm9sL2Vycm9yLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9lcnJvci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI9bigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIiksaT0obz1yKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307aS5kZWZhdWx0Lmluc3RhbGwoXCJlcnJvclwiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1pLmRlZmF1bHQudXRpbCxuPXQuY3JlYXRlRG9tKFwieGctZXJyb3JcIiwnPGVtIGNsYXNzPVwieGdwbGF5ZXItZXJyb3ItdGV4dFwiPuivtzxzcGFuIGNsYXNzPVwieGdwbGF5ZXItZXJyb3ItcmVmcmVzaFwiPuWIt+aWsDwvc3Bhbj7or5Xor5U8L2VtPicse30sXCJ4Z3BsYXllci1lcnJvclwiKTtlLnJvb3QuYXBwZW5kQ2hpbGQobik7dmFyIG89bi5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLWVycm9yLXRleHRcIikscj1udWxsO2Z1bmN0aW9uIGEoKXtlLmVycm9yP28uaW5uZXJIVE1MPWUuZXJyb3I6ZS5jb25maWcubGFuZyYmXCJ6aC1jblwiPT09ZS5jb25maWcubGFuZz9vLmlubmVySFRNTD1lLmxhbmcuRVJST1IrJ++8jOivtzxzcGFuIGNsYXNzPVwieGdwbGF5ZXItZXJyb3ItcmVmcmVzaFwiPuWIt+aWsDwvc3Bhbj7or5Xor5UnOm8uaW5uZXJIVE1MPWUubGFuZy5FUlJPUisn77yMcGxlYXNlIHRyeSB0byA8c3BhbiBjbGFzcz1cInhncGxheWVyLWVycm9yLXJlZnJlc2hcIj5yZWZyZXNoPC9zcGFuPicsdC5hZGRDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci1pcy1lcnJvclwiKSwocj1uLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItZXJyb3ItcmVmcmVzaFwiKSkmJltcInRvdWNoZW5kXCIsXCJjbGlja1wiXS5mb3JFYWNoKChmdW5jdGlvbih0KXtyLmFkZEV2ZW50TGlzdGVuZXIodCwoZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCk7dmFyIG49dC50YXJnZXR8fHQuc3JjRWxlbWVudDtuJiZcInNwYW5cIj09PW4udGFnTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpJiYoZS5jb250cm9scy5zdHlsZS5kaXNwbGF5PVwiZmxleFwiLGUucmVsb2FkKCkpfSkpfSkpfWUub24oXCJlcnJvclwiLGEpLGUub25jZShcImRlc3Ryb3lcIiwoZnVuY3Rpb24gdCgpe2Uub2ZmKFwiZXJyb3JcIixhKSxlLm9mZihcImRlc3Ryb3lcIix0KX0pKX0pKX0sXCIuL3NyYy9jb250cm9sL2ZsZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvZmxleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcIl9fZmxleF9fXCIsKGZ1bmN0aW9uKCl7dmFyIGU9aS5kZWZhdWx0LnV0aWwuY3JlYXRlRG9tKFwieGctcGxhY2Vob2xkZXJcIixcIlwiLHt9LFwieGdwbGF5ZXItcGxhY2Vob2xkZXJcIik7dGhpcy5jb250cm9scy5hcHBlbmRDaGlsZChlKX0pKX0sXCIuL3NyYy9jb250cm9sL2Z1bGxzY3JlZW4uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvZnVsbHNjcmVlbi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcImZ1bGxzY3JlZW5cIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9aS5kZWZhdWx0LnV0aWwsbj1cIk02ODIgMzQyaDEyOHY4NGgtMjEydi0yMTJoODR2MTI4ek01OTggODEwdi0yMTJoMjEydjg0aC0xMjh2MTI4aC04NHpNMzQyIDM0MnYtMTI4aDg0djIxMmgtMjEydi04NGgxMjh6TTIxNCA2ODJ2LTg0aDIxMnYyMTJoLTg0di0xMjhoLTEyOHpcIixvPVwiTTU5OCAyMTRoMjEydjIxMmgtODR2LTEyOGgtMTI4di04NHpNNzI2IDcyNnYtMTI4aDg0djIxMmgtMjEydi04NGgxMjh6TTIxNCA0MjZ2LTIxMmgyMTJ2ODRoLTEyOHYxMjhoLTg0ek0yOTggNTk4djEyOGgxMjh2ODRoLTIxMnYtMjEyaDg0elwiLHI9dC5jcmVhdGVEb20oXCJ4Zy1mdWxsc2NyZWVuXCIsJzx4Zy1pY29uIGNsYXNzPVwieGdwbGF5ZXItaWNvblwiPjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTAyNFwiIGhlaWdodD1cIjEwMjRcIiB2aWV3Qm94PVwiMCAwIDEwMjQgMTAyNFwiPlxcbiAgICAgICAgICAgIDxwYXRoIHRyYW5zZm9ybT1cInNjYWxlKDAuMDMgMC4wMylcIiBkPVwiJytvKydcIj48L3BhdGg+XFxuICAgICAgICA8L3N2Zz48L3hnLWljb24+Jyx7fSxcInhncGxheWVyLWZ1bGxzY3JlZW5cIiksYT1lLmNvbmZpZy5sYW5nJiZcInpoLWNuXCI9PT1lLmNvbmZpZy5sYW5nP1wi5YWo5bGPXCI6XCJGdWxsIHNjcmVlblwiLHM9ZS5jb25maWcubGFuZyYmXCJ6aC1jblwiPT09ZS5jb25maWcubGFuZz9cIumAgOWHuuWFqOWxj1wiOlwiRXhpdCBmdWxsIHNjcmVlblwiLGw9ZS5jb250cm9scyxjPWUucm9vdCx1PXQuY3JlYXRlRG9tKFwieGctdGlwc1wiLGEse30sXCJ4Z3BsYXllci10aXBzXCIpLGQ9ci5xdWVyeVNlbGVjdG9yKFwicGF0aFwiKTtyLmFwcGVuZENoaWxkKHUpO2wuYXBwZW5kQ2hpbGQociksW1wiY2xpY2tcIixcInRvdWNoZW5kXCJdLmZvckVhY2goKGZ1bmN0aW9uKG8pe3IuYWRkRXZlbnRMaXN0ZW5lcihvLChmdW5jdGlvbihvKXt2YXIgcixpO28ucHJldmVudERlZmF1bHQoKSxvLnN0b3BQcm9wYWdhdGlvbigpLHQuaGFzQ2xhc3MoYyxcInhncGxheWVyLWZ1bGxzY3JlZW4tYWN0aXZlXCIpfHx0Lmhhc0NsYXNzKGMsXCJ4Z3BsYXllci1pcy1mdWxsc2NyZWVuXCIpP2Z1bmN0aW9uKG4pe3ZhciBvPXQuZmluZERvbShlLmNvbnRyb2xzLFwieGctY3NzZnVsbHNjcmVlblwiKSxyPVwiTTg0My42MTcyMTIgNjcuODk4NDEzIDE3NS40MTE1NjcgNjcuODk4NDEzYy02MS41MDI3NDkgMC0xMTEuMzY3NDM3IDQ5Ljg1NjUwMS0xMTEuMzY3NDM3IDExMS4zNjc0MzdsMCA2NjguMjA1NjQ1YzAgNjEuNTEwOTM2IDQ5Ljg2NDY4OCAxMTEuMzY3NDM3IDExMS4zNjc0MzcgMTExLjM2NzQzN0w4NDMuNjE3MjEyIDk1OC44Mzg5MzFjNjEuNTEwOTM2IDAgMTExLjM2NzQzNy00OS44NTY1MDEgMTExLjM2NzQzNy0xMTEuMzY3NDM3TDk1NC45ODQ2NDggMTc5LjI2NTg1Qzk1NC45ODQ2NDggMTE3Ljc1NDkxNCA5MDUuMTI5MTcgNjcuODk4NDEzIDg0My42MTcyMTIgNjcuODk4NDEzek0zOTguMTQ2NDQxIDczNi4xMDQwNTdjMTUuMzgwMjkyIDAgMjcuODQyMTE1IDEyLjQ2MTgyMyAyNy44NDIxMTUgMjcuODQyMTE1IDAgMTUuMzc5MjY5LTEyLjQ2MTgyMyAyNy44NDEwOTItMjcuODQyMTE1IDI3Ljg0MTA5MkwyNTkuNzI1ODU4IDc5MS43ODcyNjRjLTcuNzg1MzE0IDAtMTQuNzgxNjU4LTMuMjE3Mjc1LTE5LjgzODgzNy04LjM2NTUyOC01LjM4MzYxNC00LjU3NzI0OS04Ljc5MTIyNC0xMS4yMjg3MzktOC43OTEyMjQtMTkuNDc1NTY0TDIzMS4wOTU3OTcgNjI0LjczNjYyMWMwLTE1LjM3MTA4MiAxMi40NzEwMzMtMjcuODQyMTE1IDI3Ljg0MjExNS0yNy44NDIxMTUgMTUuMzgwMjkyIDAgMjcuODQyMTE1IDEyLjQ3MTAzMyAyNy44NDIxMTUgMjcuODQyMTE1bC0wLjYxNjAzIDcxLjQyNjc3MyAxMzMuMDM2OTY5LTEzMy4wMzc5OTIgMzkuMzc4ODY5IDM5LjM3ODg2OUwzMjQuOTYyNjUxIDczNi4xMTMyNjcgMzk4LjE0NjQ0MSA3MzYuMTA0MDU3ek00MTkuMTk5OTQyIDQ2My42MTE5NDMgMjg2LjE2Mjk3NCAzMzAuNTY1NzY0bDAuNjE2MDMgNzEuNDM1OTgyYzAgMTUuMzgwMjkyLTEyLjQ2MTgyMyAyNy44NDIxMTUtMjcuODQyMTE1IDI3Ljg0MjExNS0xNS4zNzEwODIgMC0yNy44NDIxMTUtMTIuNDYxODIzLTI3Ljg0MjExNS0yNy44NDIxMTVMMjMxLjA5NDc3NCAyNjIuNzkxMTcyYzAtOC4yNTYwMzQgMy40MDc2MS0xNC45MDg1NDggOC43OTEyMjQtMTkuNDc2NTg3IDUuMDU3MTc5LTUuMTQ4MjUzIDEyLjA1MzUyNC04LjM3NDczOCAxOS44Mzg4MzctOC4zNzQ3MzhsMTM4LjQyMDU4MyAwLjAwOTIxYzE1LjM4MDI5MiAwIDI3Ljg0MjExNSAxMi40NjE4MjMgMjcuODQyMTE1IDI3Ljg0MjExNXMtMTIuNDYxODIzIDI3Ljg0MjExNS0yNy44NDIxMTUgMjcuODQyMTE1bC03My4xNzU2MDMtMC4wMDkyMSAxMzMuNjA3OTc0IDEzMy42MDc5NzRMNDE5LjE5OTk0MiA0NjMuNjExOTQzek03ODcuOTMyOTgxIDc2My45NDYxNzJjMCA4LjI0Nzg0OC0zLjQwNzYxIDE0Ljg5OTMzOC04Ljc5MTIyNCAxOS40NzU1NjQtNS4wNTcxNzkgNS4xNDgyNTMtMTIuMDUzNTI0IDguMzY1NTI4LTE5LjgzOTg2MSA4LjM2NTUyOEw2MjAuODgxMzE0IDc5MS43ODcyNjRjLTE1LjM3OTI2OSAwLTI3Ljg0MTA5Mi0xMi40NjE4MjMtMjcuODQxMDkyLTI3Ljg0MTA5MiAwLTE1LjM4MDI5MiAxMi40NjE4MjMtMjcuODQyMTE1IDI3Ljg0MTA5Mi0yNy44NDIxMTVsNzMuMTg1ODM2IDAuMDA5MjFMNTYwLjQ0OTk2NyA2MDIuNTA0MjdsMzkuMzc4ODY5LTM5LjM3ODg2OUw3MzIuODc1MDE1IDY5Ni4xNjMzOTNsLTAuNjI1MjQtNzEuNDI2NzczYzAtMTUuMzcxMDgyIDEyLjQ2Mjg0Ni0yNy44NDIxMTUgMjcuODQyMTE1LTI3Ljg0MjExNSAxNS4zODAyOTIgMCAyNy44NDIxMTUgMTIuNDcxMDMzIDI3Ljg0MjExNSAyNy44NDIxMTVMNzg3LjkzNDAwNSA3NjMuOTQ2MTcyek03ODcuOTMyOTgxIDQwMi4wMDA3MjRjMCAxNS4zODAyOTItMTIuNDYxODIzIDI3Ljg0MjExNS0yNy44NDIxMTUgMjcuODQyMTE1LTE1LjM3OTI2OSAwLTI3Ljg0MjExNS0xMi40NjE4MjMtMjcuODQyMTE1LTI3Ljg0MjExNWwwLjYyNTI0LTcxLjQzNTk4Mkw1OTkuODI4ODM2IDQ2My42MTE5NDNsLTM5LjM3ODg2OS0zOS4zNzg4NjkgMTMzLjYxNzE4NC0xMzMuNjA3OTc0LTczLjE4NTgzNiAwLjAwOTIxYy0xNS4zNzkyNjkgMC0yNy44NDEwOTItMTIuNDYxODIzLTI3Ljg0MTA5Mi0yNy44NDIxMTVzMTIuNDYxODIzLTI3Ljg0MjExNSAyNy44NDEwOTItMjcuODQyMTE1bDEzOC40MjE2MDYtMC4wMDkyMWM3Ljc4NTMxNCAwIDE0Ljc4MTY1OCAzLjIyNjQ4NCAxOS44Mzk4NjEgOC4zNzQ3MzggNS4zODM2MTQgNC41NjgwMzkgOC43OTEyMjQgMTEuMjE5NTI5IDguNzkxMjI0IDE5LjQ3NjU4N0w3ODcuOTM0MDA1IDQwMi4wMDA3MjR6XCI7aWYobyl7dmFyIGk9dC5maW5kRG9tKG8sXCJ4Zy10aXBzXCIpLHM9by5xdWVyeVNlbGVjdG9yKFwicGF0aFwiKTtvLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLGkudGV4dENvbnRlbnQ9ZS5jb25maWcubGFuZyYmXCJ6aC1jblwiPT09ZS5jb25maWcubGFuZz9cIuagt+W8j+WFqOWxj1wiOlwiRnVsbCBzY3JlZW5cIixzLnNldEF0dHJpYnV0ZShcImRcIixyKX10LnJlbW92ZUNsYXNzKG4sXCJ4Z3BsYXllci1jc3NmdWxsc2NyZWVuLWFjdGl2ZVwiKSxkLnNldEF0dHJpYnV0ZShcImRcIixyKSx1LnRleHRDb250ZW50PWEsZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4/ZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTpkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbj9kb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpOmRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4/ZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbigpOmRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4/ZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbigpOnQucmVtb3ZlQ2xhc3MobixcInhncGxheWVyLWZ1bGxzY3JlZW4tYWN0aXZlXCIpfShjKToocj1jLChpPXQuZmluZERvbShlLmNvbnRyb2xzLFwieGctY3NzZnVsbHNjcmVlblwiKSkmJihpLnN0eWxlLmRpc3BsYXk9XCJub25lXCIpLGQuc2V0QXR0cmlidXRlKFwiZFwiLG4pLHUudGV4dENvbnRlbnQ9cyxyLnJlcXVlc3RGdWxsc2NyZWVuP3IucmVxdWVzdEZ1bGxzY3JlZW4oKTpyLm1velJlcXVlc3RGdWxsU2NyZWVuP3IubW96UmVxdWVzdEZ1bGxTY3JlZW4oKTpyLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuP3Iud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oRWxlbWVudC5BTExPV19LRVlCT0FSRF9JTlBVVCk6ZS52aWRlby53ZWJraXRTdXBwb3J0c0Z1bGxzY3JlZW4/ZS52aWRlby53ZWJraXRFbnRlckZ1bGxzY3JlZW4oKTpyLm1zUmVxdWVzdEZ1bGxzY3JlZW4/ci5tc1JlcXVlc3RGdWxsc2NyZWVuKCk6dC5hZGRDbGFzcyhyLFwieGdwbGF5ZXItZnVsbHNjcmVlbi1hY3RpdmVcIikpfSkpfSkpLGUudmlkZW8uYWRkRXZlbnRMaXN0ZW5lcihcIndlYmtpdGVuZGZ1bGxzY3JlZW5cIiwoZnVuY3Rpb24oKXtlLmVtaXQoXCJleGl0RnVsbHNjcmVlblwiKSxkLnNldEF0dHJpYnV0ZShcImRcIixvKX0pKTtbXCJmdWxsc2NyZWVuY2hhbmdlXCIsXCJ3ZWJraXRmdWxsc2NyZWVuY2hhbmdlXCIsXCJtb3pmdWxsc2NyZWVuY2hhbmdlXCIsXCJNU0Z1bGxzY3JlZW5DaGFuZ2VcIl0uZm9yRWFjaCgoZnVuY3Rpb24obil7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihuLChmdW5jdGlvbihuKXtpZihuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKSwhKGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50fHxkb2N1bWVudC53ZWJraXRJc0Z1bGxTY3JlZW58fGRvY3VtZW50Lm1vekZ1bGxTY3JlZW58fGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQpKXt2YXIgbz10LmZpbmREb20oZS5jb250cm9scyxcInhnLWNzc2Z1bGxzY3JlZW5cIikscj17ZGVmYXVsdDpcIk04NDMuNjE3MjEyIDY3Ljg5ODQxMyAxNzUuNDExNTY3IDY3Ljg5ODQxM2MtNjEuNTAyNzQ5IDAtMTExLjM2NzQzNyA0OS44NTY1MDEtMTExLjM2NzQzNyAxMTEuMzY3NDM3bDAgNjY4LjIwNTY0NWMwIDYxLjUxMDkzNiA0OS44NjQ2ODggMTExLjM2NzQzNyAxMTEuMzY3NDM3IDExMS4zNjc0MzdMODQzLjYxNzIxMiA5NTguODM4OTMxYzYxLjUxMDkzNiAwIDExMS4zNjc0MzctNDkuODU2NTAxIDExMS4zNjc0MzctMTExLjM2NzQzN0w5NTQuOTg0NjQ4IDE3OS4yNjU4NUM5NTQuOTg0NjQ4IDExNy43NTQ5MTQgOTA1LjEyOTE3IDY3Ljg5ODQxMyA4NDMuNjE3MjEyIDY3Ljg5ODQxM3pNMzk4LjE0NjQ0MSA3MzYuMTA0MDU3YzE1LjM4MDI5MiAwIDI3Ljg0MjExNSAxMi40NjE4MjMgMjcuODQyMTE1IDI3Ljg0MjExNSAwIDE1LjM3OTI2OS0xMi40NjE4MjMgMjcuODQxMDkyLTI3Ljg0MjExNSAyNy44NDEwOTJMMjU5LjcyNTg1OCA3OTEuNzg3MjY0Yy03Ljc4NTMxNCAwLTE0Ljc4MTY1OC0zLjIxNzI3NS0xOS44Mzg4MzctOC4zNjU1MjgtNS4zODM2MTQtNC41NzcyNDktOC43OTEyMjQtMTEuMjI4NzM5LTguNzkxMjI0LTE5LjQ3NTU2NEwyMzEuMDk1Nzk3IDYyNC43MzY2MjFjMC0xNS4zNzEwODIgMTIuNDcxMDMzLTI3Ljg0MjExNSAyNy44NDIxMTUtMjcuODQyMTE1IDE1LjM4MDI5MiAwIDI3Ljg0MjExNSAxMi40NzEwMzMgMjcuODQyMTE1IDI3Ljg0MjExNWwtMC42MTYwMyA3MS40MjY3NzMgMTMzLjAzNjk2OS0xMzMuMDM3OTkyIDM5LjM3ODg2OSAzOS4zNzg4NjlMMzI0Ljk2MjY1MSA3MzYuMTEzMjY3IDM5OC4xNDY0NDEgNzM2LjEwNDA1N3pNNDE5LjE5OTk0MiA0NjMuNjExOTQzIDI4Ni4xNjI5NzQgMzMwLjU2NTc2NGwwLjYxNjAzIDcxLjQzNTk4MmMwIDE1LjM4MDI5Mi0xMi40NjE4MjMgMjcuODQyMTE1LTI3Ljg0MjExNSAyNy44NDIxMTUtMTUuMzcxMDgyIDAtMjcuODQyMTE1LTEyLjQ2MTgyMy0yNy44NDIxMTUtMjcuODQyMTE1TDIzMS4wOTQ3NzQgMjYyLjc5MTE3MmMwLTguMjU2MDM0IDMuNDA3NjEtMTQuOTA4NTQ4IDguNzkxMjI0LTE5LjQ3NjU4NyA1LjA1NzE3OS01LjE0ODI1MyAxMi4wNTM1MjQtOC4zNzQ3MzggMTkuODM4ODM3LTguMzc0NzM4bDEzOC40MjA1ODMgMC4wMDkyMWMxNS4zODAyOTIgMCAyNy44NDIxMTUgMTIuNDYxODIzIDI3Ljg0MjExNSAyNy44NDIxMTVzLTEyLjQ2MTgyMyAyNy44NDIxMTUtMjcuODQyMTE1IDI3Ljg0MjExNWwtNzMuMTc1NjAzLTAuMDA5MjEgMTMzLjYwNzk3NCAxMzMuNjA3OTc0TDQxOS4xOTk5NDIgNDYzLjYxMTk0M3pNNzg3LjkzMjk4MSA3NjMuOTQ2MTcyYzAgOC4yNDc4NDgtMy40MDc2MSAxNC44OTkzMzgtOC43OTEyMjQgMTkuNDc1NTY0LTUuMDU3MTc5IDUuMTQ4MjUzLTEyLjA1MzUyNCA4LjM2NTUyOC0xOS44Mzk4NjEgOC4zNjU1MjhMNjIwLjg4MTMxNCA3OTEuNzg3MjY0Yy0xNS4zNzkyNjkgMC0yNy44NDEwOTItMTIuNDYxODIzLTI3Ljg0MTA5Mi0yNy44NDEwOTIgMC0xNS4zODAyOTIgMTIuNDYxODIzLTI3Ljg0MjExNSAyNy44NDEwOTItMjcuODQyMTE1bDczLjE4NTgzNiAwLjAwOTIxTDU2MC40NDk5NjcgNjAyLjUwNDI3bDM5LjM3ODg2OS0zOS4zNzg4NjlMNzMyLjg3NTAxNSA2OTYuMTYzMzkzbC0wLjYyNTI0LTcxLjQyNjc3M2MwLTE1LjM3MTA4MiAxMi40NjI4NDYtMjcuODQyMTE1IDI3Ljg0MjExNS0yNy44NDIxMTUgMTUuMzgwMjkyIDAgMjcuODQyMTE1IDEyLjQ3MTAzMyAyNy44NDIxMTUgMjcuODQyMTE1TDc4Ny45MzQwMDUgNzYzLjk0NjE3MnpNNzg3LjkzMjk4MSA0MDIuMDAwNzI0YzAgMTUuMzgwMjkyLTEyLjQ2MTgyMyAyNy44NDIxMTUtMjcuODQyMTE1IDI3Ljg0MjExNS0xNS4zNzkyNjkgMC0yNy44NDIxMTUtMTIuNDYxODIzLTI3Ljg0MjExNS0yNy44NDIxMTVsMC42MjUyNC03MS40MzU5ODJMNTk5LjgyODgzNiA0NjMuNjExOTQzbC0zOS4zNzg4NjktMzkuMzc4ODY5IDEzMy42MTcxODQtMTMzLjYwNzk3NC03My4xODU4MzYgMC4wMDkyMWMtMTUuMzc5MjY5IDAtMjcuODQxMDkyLTEyLjQ2MTgyMy0yNy44NDEwOTItMjcuODQyMTE1czEyLjQ2MTgyMy0yNy44NDIxMTUgMjcuODQxMDkyLTI3Ljg0MjExNWwxMzguNDIxNjA2LTAuMDA5MjFjNy43ODUzMTQgMCAxNC43ODE2NTggMy4yMjY0ODQgMTkuODM5ODYxIDguMzc0NzM4IDUuMzgzNjE0IDQuNTY4MDM5IDguNzkxMjI0IDExLjIxOTUyOSA4Ljc5MTIyNCAxOS40NzY1ODdMNzg3LjkzNDAwNSA0MDIuMDAwNzI0elwifTtpZihvKXt2YXIgaT10LmZpbmREb20obyxcInhnLXRpcHNcIikscz1vLnF1ZXJ5U2VsZWN0b3IoXCJwYXRoXCIpO28uc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsaS50ZXh0Q29udGVudD1lLmNvbmZpZy5sYW5nJiZcInpoLWNuXCI9PT1lLmNvbmZpZy5sYW5nP1wi5qC35byP5YWo5bGPXCI6XCJGdWxsIHNjcmVlblwiLHMuc2V0QXR0cmlidXRlKFwiZFwiLHIuZGVmYXVsdCl9dC5yZW1vdmVDbGFzcyhjLFwieGdwbGF5ZXItY3NzZnVsbHNjcmVlbi1hY3RpdmVcIiksZC5zZXRBdHRyaWJ1dGUoXCJkXCIsci5kZWZhdWx0KSx1LnRleHRDb250ZW50PWEsdC5yZW1vdmVDbGFzcyhjLFwieGdwbGF5ZXItZnVsbHNjcmVlbi1hY3RpdmVcIil9fSkpfSkpO3ZhciBwPWZ1bmN0aW9uKHIpe3ZhciBpPWRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50fHxkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudHx8ZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnR8fGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQ7aSYmaT09PWM/KHQuYWRkQ2xhc3MoYyxcInhncGxheWVyLWlzLWZ1bGxzY3JlZW5cIiksZC5zZXRBdHRyaWJ1dGUoXCJkXCIsbiksdS50ZXh0Q29udGVudD1zLGUuZW1pdChcInJlcXVlc3RGdWxsc2NyZWVuXCIpKToodC5yZW1vdmVDbGFzcyhjLFwieGdwbGF5ZXItaXMtZnVsbHNjcmVlblwiKSxkLnNldEF0dHJpYnV0ZShcImRcIixvKSx1LnRleHRDb250ZW50PWEsZS5lbWl0KFwiZXhpdEZ1bGxzY3JlZW5cIikpfTtyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsKGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpLHUuc3R5bGUubGVmdD1cIjUwJVwiO3ZhciB0PXUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj1jLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3QucmlnaHQ+bi5yaWdodCYmKHUuc3R5bGUubGVmdD0tdC5yaWdodCtuLnJpZ2h0KzE2K1wicHhcIil9KSksW1wiZnVsbHNjcmVlbmNoYW5nZVwiLFwid2Via2l0ZnVsbHNjcmVlbmNoYW5nZVwiLFwibW96ZnVsbHNjcmVlbmNoYW5nZVwiLFwiTVNGdWxsc2NyZWVuQ2hhbmdlXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZSxwKX0pKSxlLm9uY2UoXCJkZXN0cm95XCIsKGZ1bmN0aW9uIHQoKXtbXCJmdWxsc2NyZWVuY2hhbmdlXCIsXCJ3ZWJraXRmdWxsc2NyZWVuY2hhbmdlXCIsXCJtb3pmdWxsc2NyZWVuY2hhbmdlXCIsXCJNU0Z1bGxzY3JlZW5DaGFuZ2VcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLHApfSkpLGUub2ZmKFwiZGVzdHJveVwiLHQpfSkpfSkpfSxcIi4vc3JjL2NvbnRyb2wvaTE4bi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9pMThuLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpOygobz1yKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b30pLmRlZmF1bHQuaW5zdGFsbChcImkxOG5cIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9e30sbj1lLmNvbnN0cnVjdG9yLnV0aWw7dC5lbj17SEFWRV9OT1RISU5HOlwiVGhlcmUgaXMgbm8gaW5mb3JtYXRpb24gb24gd2hldGhlciBhdWRpby92aWRlbyBpcyByZWFkeVwiLEhBVkVfTUVUQURBVEE6XCJhdWRpby92aWRlbyBtZXRhZGF0YSBpcyByZWFkeSBcIixIQVZFX0NVUlJFTlRfREFUQTpcIkRhdGEgYWJvdXQgdGhlIGN1cnJlbnQgcGxheSBsb2NhdGlvbiBpcyBhdmFpbGFibGUsIGJ1dCB0aGVyZSBpcyBub3QgZW5vdWdoIGRhdGEgdG8gcGxheSB0aGUgbmV4dCBmcmFtZS9taWxsaXNlY29uZFwiLEhBVkVfRlVUVVJFX0RBVEE6XCJDdXJyZW50IGFuZCBhdCBsZWFzdCBvbmUgZnJhbWUgb2YgZGF0YSBpcyBhdmFpbGFibGVcIixIQVZFX0VOT1VHSF9EQVRBOlwiVGhlIGF2YWlsYWJsZSBkYXRhIGlzIHN1ZmZpY2llbnQgdG8gc3RhcnQgcGxheWluZ1wiLE5FVFdPUktfRU1QVFk6XCJBdWRpby92aWRlbyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWRcIixORVRXT1JLX0lETEU6XCJBdWRpby92aWRlbyBpcyBhY3RpdmUgYW5kIGhhcyBiZWVuIHNlbGVjdGVkIGZvciByZXNvdXJjZXMsIGJ1dCBubyBuZXR3b3JrIGlzIHVzZWRcIixORVRXT1JLX0xPQURJTkc6XCJUaGUgYnJvd3NlciBpcyBkb3dubG9hZGluZyB0aGUgZGF0YVwiLE5FVFdPUktfTk9fU09VUkNFOlwiTm8gYXVkaW8vdmlkZW8gc291cmNlIHdhcyBmb3VuZFwiLE1FRElBX0VSUl9BQk9SVEVEOlwiVGhlIGZldGNoIHByb2Nlc3MgaXMgYWJvcnRlZCBieSB0aGUgdXNlclwiLE1FRElBX0VSUl9ORVRXT1JLOlwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgZG93bmxvYWRpbmdcIixNRURJQV9FUlJfREVDT0RFOlwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgZGVjb2RpbmdcIixNRURJQV9FUlJfU1JDX05PVF9TVVBQT1JURUQ6XCJBdWRpby92aWRlbyBpcyBub3Qgc3VwcG9ydGVkXCIsUkVQTEFZOlwiUmVwbGF5XCIsRVJST1I6XCJuZXR3b3JrIGlzIG9mZmxpbmVcIn0sdFtcInpoLWNuXCJdPXtIQVZFX05PVEhJTkc6XCLmsqHmnInlhbPkuo7pn7PpopEv6KeG6aKR5piv5ZCm5bCx57uq55qE5L+h5oGvXCIsSEFWRV9NRVRBREFUQTpcIumfs+mikS/op4bpopHnmoTlhYPmlbDmja7lt7LlsLHnu6pcIixIQVZFX0NVUlJFTlRfREFUQTpcIuWFs+S6juW9k+WJjeaSreaUvuS9jee9rueahOaVsOaNruaYr+WPr+eUqOeahO+8jOS9huayoeaciei2s+Wkn+eahOaVsOaNruadpeaSreaUvuS4i+S4gOW4py/mr6vnp5JcIixIQVZFX0ZVVFVSRV9EQVRBOlwi5b2T5YmN5Y+K6Iez5bCR5LiL5LiA5bin55qE5pWw5o2u5piv5Y+v55So55qEXCIsSEFWRV9FTk9VR0hfREFUQTpcIuWPr+eUqOaVsOaNrui2s+S7peW8gOWni+aSreaUvlwiLE5FVFdPUktfRU1QVFk6XCLpn7PpopEv6KeG6aKR5bCa5pyq5Yid5aeL5YyWXCIsTkVUV09SS19JRExFOlwi6Z+z6aKRL+inhumikeaYr+a0u+WKqOeahOS4lOW3sumAieWPlui1hOa6kO+8jOS9huW5tuacquS9v+eUqOe9kee7nFwiLE5FVFdPUktfTE9BRElORzpcIua1j+iniOWZqOato+WcqOS4i+i9veaVsOaNrlwiLE5FVFdPUktfTk9fU09VUkNFOlwi5pyq5om+5Yiw6Z+z6aKRL+inhumikeadpea6kFwiLE1FRElBX0VSUl9BQk9SVEVEOlwi5Y+W5Zue6L+H56iL6KKr55So5oi35Lit5q2iXCIsTUVESUFfRVJSX05FVFdPUks6XCLlvZPkuIvovb3ml7blj5HnlJ/plJnor69cIixNRURJQV9FUlJfREVDT0RFOlwi5b2T6Kej56CB5pe25Y+R55Sf6ZSZ6K+vXCIsTUVESUFfRVJSX1NSQ19OT1RfU1VQUE9SVEVEOlwi5LiN5pSv5oyB55qE6Z+z6aKRL+inhumikeagvOW8j1wiLFJFUExBWTpcIumHjeaSrVwiLEVSUk9SOlwi572R57uc6L+e5o6l5Ly85LmO5Ye6546w5LqG6Zeu6aKYXCJ9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwibGFuZ1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtlLmNvbmZpZy5sYW5nXXx8dC5lbn0sc2V0OmZ1bmN0aW9uKGUpe1wiT2JqZWN0XCI9PT1uLnR5cGVPZihlKSYmT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24obil7dFtuXT1lW25dfSkpfX0pfSkpfSxcIi4vc3JjL2NvbnRyb2wvbG9hZGluZy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9sb2FkaW5nLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwibG9hZGluZ1wiLChmdW5jdGlvbigpe3ZhciBlPWkuZGVmYXVsdC51dGlsLmNyZWF0ZURvbShcInhnLWxvYWRpbmdcIiwnXFxuICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCIgdmlld2JveD1cIjAgMCAxMDAgMTAwXCI+XFxuICAgICAgPHBhdGggZD1cIk0xMDAsNTBBNTAsNTAsMCwxLDEsNTAsMFwiPjwvcGF0aD5cXG4gICAgPC9zdmc+XFxuICAgICcse30sXCJ4Z3BsYXllci1sb2FkaW5nXCIpO3RoaXMucm9vdC5hcHBlbmRDaGlsZChlKX0pKX0sXCIuL3NyYy9jb250cm9sL2xvY2FsUHJldmlldy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL2xvY2FsUHJldmlldy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwibG9jYWxQcmV2aWV3XCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWkuZGVmYXVsdC51dGlsLG49dC5jcmVhdGVEb20oXCJ4Zy1wcmV2aWV3XCIsJzxpbnB1dCB0eXBlPVwiZmlsZVwiPicse30sXCJ4Z3BsYXllci1wcmV2aWV3XCIpLG89bi5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIik7ZS5jb25maWcucHJldmlldyYmZS5jb25maWcucHJldmlldy51cGxvYWRFbCYmKGUuY29uZmlnLnByZXZpZXcudXBsb2FkRWwuYXBwZW5kQ2hpbGQobiksby5vbmNoYW5nZT1mdW5jdGlvbigpe2UudXBsb2FkRmlsZT1vLmZpbGVzWzBdO3ZhciBuPVVSTC5jcmVhdGVPYmplY3RVUkwoZS51cGxvYWRGaWxlKTt0Lmhhc0NsYXNzKGUucm9vdCxcInhncGxheWVyLW5vc3RhcnRcIik/KGUuY29uZmlnLnVybD1uLGUuc3RhcnQoKSk6KGUuc3JjPW4sZS5wbGF5KCkpfSl9KSl9LFwiLi9zcmMvY29udHJvbC9sb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9sb2dnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89YShuKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSkscj1hKG4oLyohIC4uL3V0aWxzL3NuaWZmZXIgKi9cIi4vc3JjL3V0aWxzL3NuaWZmZXIuanNcIikpLGk9YShuKC8qISAuL2NvbGxlY3QgKi9cIi4vc3JjL2NvbnRyb2wvY29sbGVjdC5qc1wiKSk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19by5kZWZhdWx0Lmluc3RhbGwoXCJsb2dnZXJcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9by5kZWZhdWx0LnV0aWw7aWYoITAhPT1lLmNvbmZpZy5ub0xvZyl7dmFyIG49ZnVuY3Rpb24oKXtlLnZpZGVvLnBsYXllZDt2YXIgdD1sKGUubG9nUGFyYW1zLnBsYXllZCksbj0obmV3IERhdGUpLmdldFRpbWUoKTtjKCk7dmFyIG89e3VybDplLmxvZ1BhcmFtcy5wbHVnaW5TcmM/ZS5sb2dQYXJhbXMucGx1Z2luU3JjOmUubG9nUGFyYW1zLnBsYXlTcmMsdmlkOmUuY29uZmlnLnZpZCxiYzplLmxvZ1BhcmFtcy5iYy0xPjA/ZS5sb2dQYXJhbXMuYmMtMTowLGJiOmUubG9nUGFyYW1zLmJjLTE+MD8xOjAsYnVfYWN1X3Q6ZS5sb2dQYXJhbXMuYnVfYWN1X3QscHQ6ZS5sb2dQYXJhbXMucHQsdnQ6ZS5sb2dQYXJhbXMudnQsdmQ6MWUzKmUubG9nUGFyYW1zLnZkLHdhdGNoX2R1cjpwYXJzZUZsb2F0KCgxZTMqdCkudG9GaXhlZCgzKSksY3VyX3BsYXlfcG9zOnBhcnNlRmxvYXQoKDFlMyplLmN1cnJlbnRUaW1lKS50b0ZpeGVkKDMpKSxldDpufTt3aW5kb3cuX194aWd1YV9sb2dfc2RrX18oXCJjXCIsbyl9LGE9ZnVuY3Rpb24oKXtlLnZpZGVvLnBsYXllZDt2YXIgdD1sKGUubG9nUGFyYW1zLnBsYXllZCksbj0obmV3IERhdGUpLmdldFRpbWUoKTtjKCk7dmFyIG89e3VybDplLmxvZ1BhcmFtcy5wbHVnaW5TcmM/ZS5sb2dQYXJhbXMucGx1Z2luU3JjOmUubG9nUGFyYW1zLnBsYXlTcmMsdmlkOmUuY29uZmlnLnZpZCxiYzplLmxvZ1BhcmFtcy5iYy0xPjA/ZS5sb2dQYXJhbXMuYmMtMTowLGJiOmUubG9nUGFyYW1zLmJjLTE+MD8xOjAsYnVfYWN1X3Q6ZS5sb2dQYXJhbXMuYnVfYWN1X3QscHQ6ZS5sb2dQYXJhbXMucHQsdnQ6ZS5sb2dQYXJhbXMudnQsdmQ6MWUzKmUubG9nUGFyYW1zLnZkLHdhdGNoX2R1cjpwYXJzZUZsb2F0KCgxZTMqdCkudG9GaXhlZCgzKSksY3VyX3BsYXlfcG9zOnBhcnNlRmxvYXQoKDFlMyplLmN1cnJlbnRUaW1lKS50b0ZpeGVkKDMpKSxsdDpufTt3aW5kb3cuX194aWd1YV9sb2dfc2RrX18oXCJkXCIsbyl9LHM9ZnVuY3Rpb24odCl7ZS52aWRlby5wbGF5ZWQ7dmFyIG49bChlLmxvZ1BhcmFtcy5wbGF5ZWQpO2MoKTt2YXIgbz0obmV3IERhdGUpLmdldFRpbWUoKTtpZighKGUubG9nUGFyYW1zLmxhc3RFcnJMb2cmJm8tZS5sb2dQYXJhbXMubGFzdEVyckxvZzw9M2UzKSl7ZS5sb2dQYXJhbXMubGFzdEVyckxvZz1vO3ZhciByPXt1cmw6ZS5sb2dQYXJhbXMucGx1Z2luU3JjP2UubG9nUGFyYW1zLnBsdWdpblNyYzplLmxvZ1BhcmFtcy5wbGF5U3JjLHZpZDplLmNvbmZpZy52aWQsYmM6ZS5sb2dQYXJhbXMuYmMtMT4wP2UubG9nUGFyYW1zLmJjLTE6MCxiYjplLmxvZ1BhcmFtcy5iYy0xPjA/MTowLGJ1X2FjdV90OmUubG9nUGFyYW1zLmJ1X2FjdV90LHB0OmUubG9nUGFyYW1zLnB0LHZ0OmUubG9nUGFyYW1zLnZ0LHZkOjFlMyplLmxvZ1BhcmFtcy52ZCx3YXRjaF9kdXI6cGFyc2VGbG9hdCgoMWUzKm4pLnRvRml4ZWQoMykpLGVycl9tc2c6dC5lcnJkLm1zZyxsaW5lOnQuZXJyZC5saW5lLGV0Om8sY3VyX3BsYXlfcG9zOnBhcnNlRmxvYXQoKDFlMyplLmN1cnJlbnRUaW1lKS50b0ZpeGVkKDMpKX07aWYoZS5sb2dQYXJhbXMubm9sb2dGdW5jJiZlLmxvZ1BhcmFtcy5ub2xvZ0Z1bmMoZSkpcmV0dXJuITA7d2luZG93Ll9feGlndWFfbG9nX3Nka19fKFwiZVwiLHIpfX07d2luZG93Ll9feGlndWFfbG9nX3Nka19ffHwod2luZG93Ll9feGlndWFfbG9nX3Nka19fPW5ldyBpLmRlZmF1bHQoXCJ0cmFja2VyXCIpLHdpbmRvdy5fX3hpZ3VhX2xvZ19zZGtfXy5pbml0KHthcHBfaWQ6MTMwMCxjaGFubmVsOlwiY25cIixsb2c6ITEsZGlzYWJsZV9zZGtfbW9uaXRvcjohMH0pLHdpbmRvdy5fX3hpZ3VhX2xvZ19zZGtfXyhcImNvbmZpZ1wiLHtldnRQYXJhbXM6e2xvZ190eXBlOlwibG9nZ2VyXCIscGFnZV91cmw6ZG9jdW1lbnQuVVJMLGRvbWFpbjp3aW5kb3cubG9jYXRpb24uaG9zdCxwdmVyOmUudmVyc2lvbix1YTpuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCl9LGRpc2FibGVfYXV0b19wdjohMH0pLHdpbmRvdy5fX3hpZ3VhX2xvZ19zZGtfXy5zdGFydCgpKSxlLmNvbmZpZy51aWQmJndpbmRvdy5fX3hpZ3VhX2xvZ19zZGtfXyhcImNvbmZpZ1wiLHt1c2VyX3VuaXF1ZV9pZDplLmNvbmZpZy51aWR9KTt2YXIgbD1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06W10sdD1bXSxuPTA7bjxlLmxlbmd0aDtuKyspaWYoISghZVtuXS5lbmR8fGVbbl0uYmVnaW48MHx8ZVtuXS5lbmQ8MHx8ZVtuXS5lbmQ8ZVtuXS5iZWdpbikpaWYodC5sZW5ndGg8MSl0LnB1c2goe2JlZ2luOmVbbl0uYmVnaW4sZW5kOmVbbl0uZW5kfSk7ZWxzZSBmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIHI9ZVtuXS5iZWdpbixpPWVbbl0uZW5kO2lmKGk8dFtvXS5iZWdpbil7dC5zcGxpY2UobywwLHtiZWdpbjpyLGVuZDppfSk7YnJlYWt9aWYoIShyPnRbb10uZW5kKSl7dmFyIGE9dFtvXS5iZWdpbixzPXRbb10uZW5kO3Rbb10uYmVnaW49TWF0aC5taW4ocixhKSx0W29dLmVuZD1NYXRoLm1heChpLHMpO2JyZWFrfWlmKG8+dC5sZW5ndGgtMil7dC5wdXNoKHtiZWdpbjpyLGVuZDppfSk7YnJlYWt9fWZvcih2YXIgbD0wLGM9MDtjPHQubGVuZ3RoO2MrKylsKz10W2NdLmVuZC10W2NdLmJlZ2luO3JldHVybiBsfSxjPWZ1bmN0aW9uKCl7ZS5sb2dQYXJhbXMucHQmJmUubG9nUGFyYW1zLnZ0fHwoZS5sb2dQYXJhbXMucHQ9KG5ldyBEYXRlKS5nZXRUaW1lKCksZS5sb2dQYXJhbXMudnQ9ZS5sb2dQYXJhbXMucHQpLGUubG9nUGFyYW1zLnB0PmUubG9nUGFyYW1zLnZ0JiYoZS5sb2dQYXJhbXMucHQ9ZS5sb2dQYXJhbXMudnQpfSx1PWZ1bmN0aW9uKG4pe2lmKHQuaGFzQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItaXMtZW50ZXJcIikpe3ZhciBvPShuZXcgRGF0ZSkuZ2V0VGltZSgpLHI9e3VybDplLmxvZ1BhcmFtcy5wbHVnaW5TcmM/ZS5sb2dQYXJhbXMucGx1Z2luU3JjOmUubG9nUGFyYW1zLnBsYXlTcmMsdmlkOmUuY29uZmlnLnZpZCxwdDplLmxvZ1BhcmFtcy5wdCxsdDpvfTt3aW5kb3cuX194aWd1YV9sb2dfc2RrX18oXCJiXCIscil9ZWxzZSBpZih0Lmhhc0NsYXNzKGUucm9vdCxcInhncGxheWVyLXBsYXlpbmdcIikpe3ZhciBpPWwoZS5sb2dQYXJhbXMucGxheWVkKSxhPShuZXcgRGF0ZSkuZ2V0VGltZSgpO2MoKTt2YXIgcz17dXJsOmUubG9nUGFyYW1zLnBsdWdpblNyYz9lLmxvZ1BhcmFtcy5wbHVnaW5TcmM6ZS5sb2dQYXJhbXMucGxheVNyYyx2aWQ6ZS5jb25maWcudmlkLGJjOmUubG9nUGFyYW1zLmJjLTE+MD9lLmxvZ1BhcmFtcy5iYy0xOjAsYmI6ZS5sb2dQYXJhbXMuYmMtMT4wPzE6MCxidV9hY3VfdDplLmxvZ1BhcmFtcy5idV9hY3VfdCxwdDplLmxvZ1BhcmFtcy5wdCx2dDplLmxvZ1BhcmFtcy52dCx2ZDoxZTMqZS5sb2dQYXJhbXMudmQsd2F0Y2hfZHVyOnBhcnNlRmxvYXQoKDFlMyppKS50b0ZpeGVkKDMpKSxjdXJfcGxheV9wb3M6cGFyc2VGbG9hdCgoMWUzKmUuY3VycmVudFRpbWUpLnRvRml4ZWQoMykpLGx0OmF9O3dpbmRvdy5fX3hpZ3VhX2xvZ19zZGtfXyhcImRcIixzKX19O1wicGNcIj09PXIuZGVmYXVsdC5kZXZpY2U/d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIix1LCExKTpcIm1vYmlsZVwiPT09ci5kZWZhdWx0LmRldmljZSYmd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLHUsITEpLGUub24oXCJyb3V0ZWNoYW5nZVwiLHUpLGUub24oXCJlbmRlZFwiLG4pLGUub24oXCJ1cmxjaGFuZ2VcIixhKSxlLm9uKFwiZXJyb3JcIixzKSxlLm9uY2UoXCJkZXN0cm95XCIsKGZ1bmN0aW9uIHQoKXtcInBjXCI9PT1yLmRlZmF1bHQuZGV2aWNlP3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsdSk6XCJtb2JpbGVcIj09PXIuZGVmYXVsdC5kZXZpY2UmJndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIix1KSxlLm9mZihcInJvdXRlY2hhbmdlXCIsdSksZS5vZmYoXCJlbmRlZFwiLG4pLGUub2ZmKFwidXJsY2hhbmdlXCIsYSksZS5vZmYoXCJlcnJvclwiLHMpLGUub2ZmKFwiZGVzdHJveVwiLHQpfSkpfX0pKX0sXCIuL3NyYy9jb250cm9sL21vYmlsZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL21vYmlsZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1pKG4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpKSxyPWkobigvKiEgLi4vdXRpbHMvc3ZnICovXCIuL3NyYy91dGlscy9zdmcuanNcIikpO2Z1bmN0aW9uIGkoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fW8uZGVmYXVsdC5pbnN0YWxsKFwibW9iaWxlXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PW8uZGVmYXVsdC51dGlsLG49ZS5yb290LGk9ZnVuY3Rpb24oZSl7dmFyIHQ9by5kZWZhdWx0LnV0aWw7cmV0dXJuIGUuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuXCJGdW5jdGlvblwiPT09dC50eXBlT2YoZSk/ZS5jYWxsKHZvaWQgMCxuYXZpZ2F0b3IudXNlckFnZW50KTpcIlJlZ0V4cFwiPT09dC50eXBlT2YoZSk/ZS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOlwiU3RyaW5nXCI9PT10LnR5cGVPZihlKSYmbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGUpPi0xfSkpfShlLmNvbmZpZy53aGl0ZWxpc3QpO2UubW9iaWxlUGFzcz1pO3ZhciBhPWUuY29uZmlnLmNlbnRlckJ0bj9lLmNvbmZpZy5jZW50ZXJCdG46e30scz12b2lkIDAsbD12b2lkIDAsYz12b2lkIDAsdT12b2lkIDA7XCJpbWdcIj09PWEudHlwZT9sPW8uZGVmYXVsdC51dGlsLmNyZWF0ZUltZ0J0bihcInN0YXJ0XCIsYS51cmwucGxheSxhLndpZHRoLGEuaGVpZ2h0KToocz17cGF1c2U6YS5wYXVzZVBhdGg/YS5wYXVzZVBhdGg6XCJNNTc2LDM2M0w4MTAsNTEyTDU3Niw2NjF6TTM0MiwyMTRMNTc2LDM2M0w1NzYsNjYxTDM0Miw4MTB6XCIscGxheTphLnBsYXlQYXRoP2EucGxheVBhdGg6XCJNNTk4LDIxNGgxNzB2NTk2aC0xNzB2LTU5NnpNMjU2IDgxMHYtNTk2aDE3MHY1OTZoLTE3MHpcIn0sbD10LmNyZWF0ZURvbShcInhnLXN0YXJ0XCIsJ1xcbiAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjEwMjRcIiBoZWlnaHQ9XCIxMDI0XCIgdmlld0JveD1cIjAgMCAxMDI0IDEwMjRcIj5cXG4gICAgICAgICAgICAgIDxwYXRoIHRyYW5zZm9ybT1cInNjYWxlKDAuMDQsMC4wNClcIiBkPVwiJytzLnBhdXNlKydcIj48L3BhdGg+XFxuICAgICAgICAgIDwvc3ZnPicse30sXCJ4Z3BsYXllci1zdGFydFwiKSxjPWwucXVlcnlTZWxlY3RvcihcInBhdGhcIiksdT1uZXcgci5kZWZhdWx0KHtmcm9tOnMucGxheSx0bzpzLnBhdXNlLHByb2dyZXNzOmZ1bmN0aW9uKGUsdCl7Yy5zZXRBdHRyaWJ1dGUoXCJkXCIsdS50b1NWR1N0cmluZyhlKSl9fSkpO3ZhciBkPXQuY3JlYXRlRG9tKFwieGctZW50ZXJcIiwnPHhnLWVudGVyLWxvZ28gY2xhc3M9XCJ4Z3BsYXllci1lbnRlci1sb2dvXCI+PC94Zy1lbnRlci1sb2dvPjx4Zy1lbnRlci10aXBzIGNsYXNzPVwieGdwbGF5ZXItZW50ZXItdGlwc1wiPjwveGctcGxheWVyLXRpcHM+Jyx7fSxcInhncGxheWVyLWVudGVyXCIpLHA9ZC5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLWVudGVyLWxvZ29cIik7bi5hcHBlbmRDaGlsZChsKSxuLmFwcGVuZENoaWxkKGQpO3ZhciBmPWQucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1lbnRlci10aXBzXCIpLGg9bmV3IEltYWdlO2gub25sb2FkPWZ1bmN0aW9uKCl7Zi5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIn0sZS5jb25maWcuZW50ZXJMb2dvJiZlLmNvbmZpZy5lbnRlckxvZ28udXJsJiZlLmNvbmZpZy5lbnRlckxvZ28ud2lkdGgmJmUuY29uZmlnLmVudGVyTG9nby5oZWlnaHQ/KGguc3JjPWUuY29uZmlnLmVudGVyTG9nby51cmwscC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9J3VybChcIicrZS5jb25maWcuZW50ZXJMb2dvLnVybCsnXCIpJyxwLnN0eWxlLndpZHRoPWUuY29uZmlnLmVudGVyTG9nby53aWR0aCtcInB4XCIscC5zdHlsZS5oZWlnaHQ9ZS5jb25maWcuZW50ZXJMb2dvLmhlaWdodCtcInB4XCIscC5zdHlsZS5iYWNrZ3JvdW5kU2l6ZT1lLmNvbmZpZy5lbnRlckxvZ28ud2lkdGgrXCJweCBcIitlLmNvbmZpZy5lbnRlckxvZ28uaGVpZ2h0K1wicHhcIixwLnN0eWxlLm1hcmdpbj1cIi1cIitlLmNvbmZpZy5lbnRlckxvZ28uaGVpZ2h0LzIrXCJweCBhdXRvIGF1dG8gLVwiK2UuY29uZmlnLmVudGVyTG9nby53aWR0aC8yK1wicHhcIixmLnN0eWxlLm1hcmdpbj1lLmNvbmZpZy5lbnRlckxvZ28uaGVpZ2h0LTYrXCJweCBhdXRvIGF1dG8gLTYycHhcIik6aC5zcmM9dC5nZXRCZ0ltYWdlKHApLGUuY29uZmlnLmVudGVyVGlwcyYmZS5jb25maWcuZW50ZXJUaXBzLmJhY2tncm91bmQmJihmLnN0eWxlLmJhY2tncm91bmQ9XCJcIitlLmNvbmZpZy5lbnRlclRpcHMuYmFja2dyb3VuZCksZS5jb25maWcuZW50ZXJCZyYmKGUuY29uZmlnLmVudGVyQmcudXJsP2Quc3R5bGUuYmFja2dyb3VuZEltYWdlPSd1cmwoXCInK2UuY29uZmlnLmVudGVyQmcudXJsKydcIiknOmUuY29uZmlnLmVudGVyQmcuY29sb3ImJihkLnN0eWxlLmJhY2tncm91bmQ9ZS5jb25maWcuZW50ZXJCZy5jb2xvcikpLGUuc3RhcnQoKSxpPyhlLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLChmdW5jdGlvbihvKXtvLnByZXZlbnREZWZhdWx0KCksdC5oYXNDbGFzcyhuLFwieGdwbGF5ZXItaW5hY3RpdmVcIik/ZS5lbWl0KFwiZm9jdXNcIik6ZS5lbWl0KFwiYmx1clwiKSxlLmNvbmZpZy5jbG9zZVZpZGVvVG91Y2h8fGUuZW5kZWR8fChlLnBhdXNlZD9lLnBsYXkoKTplLnBhdXNlKCkpfSksITEpLGwuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsKGZ1bmN0aW9uKG8pe28ucHJldmVudERlZmF1bHQoKSx0Lmhhc0NsYXNzKG4sXCJ4Z3BsYXllci1ub3N0YXJ0XCIpPyh0LnJlbW92ZUNsYXNzKG4sXCJ4Z3BsYXllci1ub3N0YXJ0XCIpLHQuYWRkQ2xhc3MobixcInhncGxheWVyLWlzLWVudGVyXCIpLGUub24oXCJjYW5wbGF5XCIsKGZ1bmN0aW9uKCl7dC5yZW1vdmVDbGFzcyhuLFwieGdwbGF5ZXItaXMtZW50ZXJcIil9KSksZS5vbmNlKFwicGxheWluZ1wiLChmdW5jdGlvbigpe3QucmVtb3ZlQ2xhc3MobixcInhncGxheWVyLWlzLWVudGVyXCIpfSkpLGUucGxheSgpKTplLnBhdXNlZD9lLnBsYXkoKTplLnBhdXNlKCl9KSksZS5vbihcInBsYXlcIiwoZnVuY3Rpb24oKXtcImltZ1wiPT09YS50eXBlP2wuc3R5bGUuYmFja2dyb3VuZEltYWdlPSd1cmwoXCInK2EudXJsLnBhdXNlKydcIiknOnUucmVzZXQocy5wbGF5LHMucGF1c2UpfSkpLGUub24oXCJwYXVzZVwiLChmdW5jdGlvbigpe1wiaW1nXCI9PT1hLnR5cGU/bC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9J3VybChcIicrYS51cmwucGxheSsnXCIpJzp1LnJlc2V0KHMucGF1c2Uscy5wbGF5KX0pKSk6KHQuYWRkQ2xhc3MobixcInhncGxheWVyLW1vYmlsZS1ucGFzc2VkXCIpLGUub25jZShcInJlYWR5XCIsKGZ1bmN0aW9uKCl7ZS52aWRlby5jb250cm9scz1lLmNvbmZpZy5jb250cm9scyxlLnZpZGVvLmNvbnRyb2xzTGlzdD1lLmNvbmZpZy5jb250cm9sc0xpc3Quam9pbihcIiBcIiksZS5jb25maWcucG9zdGVyJiYoZS52aWRlby5wb3N0ZXI9ZS5jb25maWcucG9zdGVyKX0pKSksZS5jb25maWcuZGVidWcmJmZ1bmN0aW9uKGUpe3ZhciB0PXt9O09iamVjdC5hc3NpZ24odCx7aG9zdDpcIjEyNy4wLjAuMVwiLHBvcnQ6OTA5MH0sZSk7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoNFwiKTtvLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjpmaXhlZDtib3R0b206MDtwYWRkaW5nOjEwcHg7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7dGV4dC1hbGlnbjpjZW50ZXJcIixvLnRleHRDb250ZW50PVwid2VpbnJlIC0tYm91bmRIb3N0IFwiK3QuaG9zdCtcIiAtLWh0dHBQb3J0IFwiK3QucG9ydCtcIlxcclxcbiDlkK/liqjmnI3liqHlkI7vvIzliLfmlrDpobXpnaJcIixuLmFub255bW91cz0hMCxuLmFzeW5jPSEwLG4uc3JjPVwiaHR0cDovL1wiK3QuaG9zdCtcIjpcIit0LnBvcnQrXCIvdGFyZ2V0L3RhcmdldC1zY3JpcHQtbWluLmpzI2Fub255bW91c1wiLG4ub25sb2FkPWZ1bmN0aW9uKCl7by5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG8pfSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG4pLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobyl9KGUuY29uZmlnLmRlYnVnKX0pKX0sXCIuL3NyYy9jb250cm9sL3BjLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9wYy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI9bigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIiksaT0obz1yKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307aS5kZWZhdWx0Lmluc3RhbGwoXCJwY1wiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1pLmRlZmF1bHQudXRpbCxuPWUuY29udHJvbHMsbz1lLnJvb3Qscj0wLGE9dm9pZCAwLHM9ZS5jb25maWcuY2VudGVyQnRuP2UuY29uZmlnLmNlbnRlckJ0bjp7fSxsPXZvaWQgMCxjPXZvaWQgMCx1PXZvaWQgMDtcImltZ1wiPT09cy50eXBlP2M9aS5kZWZhdWx0LnV0aWwuY3JlYXRlSW1nQnRuKFwic3RhcnRcIixzLnVybC5wbGF5LHMud2lkdGgscy5oZWlnaHQpOihsPXtwYXVzZTpzLnBhdXNlUGF0aD9zLnBhdXNlUGF0aDpcIk01NzYsMzYzTDgxMCw1MTJMNTc2LDY2MXpNMzQyLDIxNEw1NzYsMzYzTDU3Niw2NjFMMzQyLDgxMHpcIixwbGF5OnMucGxheVBhdGg/cy5wbGF5UGF0aDpcIk01OTgsMjE0aDE3MHY1OTZoLTE3MHYtNTk2ek0yNTYgODEwdi01OTZoMTcwdjU5NmgtMTcwelwifSxjPXQuY3JlYXRlRG9tKFwieGctc3RhcnRcIiwnXFxuICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTAyNFwiIGhlaWdodD1cIjEwMjRcIiB2aWV3Qm94PVwiMCAwIDEwMjQgMTAyNFwiPlxcbiAgICAgICAgICAgICAgPHBhdGggdHJhbnNmb3JtPVwic2NhbGUoMC4wNCwwLjA0KVwiIGQ9XCInK2wucGF1c2UrJ1wiPjwvcGF0aD5cXG4gICAgICAgICAgPC9zdmc+Jyx7fSxcInhncGxheWVyLXN0YXJ0XCIpLHU9Yy5xdWVyeVNlbGVjdG9yKFwicGF0aFwiKSk7dmFyIGQ9dC5jcmVhdGVEb20oXCJ4Zy1lbnRlclwiLCc8eGctZW50ZXItbG9nbyBjbGFzcz1cInhncGxheWVyLWVudGVyLWxvZ29cIj48L3hnLWVudGVyLWxvZ28+PHhnLWVudGVyLXRpcHMgY2xhc3M9XCJ4Z3BsYXllci1lbnRlci10aXBzXCI+PC94Zy1wbGF5ZXItdGlwcz4nLHt9LFwieGdwbGF5ZXItZW50ZXJcIikscD1kLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItZW50ZXItbG9nb1wiKTtvLmFwcGVuZENoaWxkKGMpLG8uYXBwZW5kQ2hpbGQoZCk7dmFyIGY9ZC5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLWVudGVyLXRpcHNcIiksaD1uZXcgSW1hZ2U7ZnVuY3Rpb24gZygpe3QucmVtb3ZlQ2xhc3MobyxcInhncGxheWVyLWlzLWVudGVyXCIpfWZ1bmN0aW9uIHYoKXt0LnJlbW92ZUNsYXNzKG8sXCJ4Z3BsYXllci1pcy1lbnRlclwiKX1mdW5jdGlvbiBtKCl7XCJpbWdcIj09PXMudHlwZT9jLnN0eWxlLmJhY2tncm91bmRJbWFnZT0ndXJsKFwiJytzLnVybC5wYXVzZSsnXCIpJzp1LnNldEF0dHJpYnV0ZShcImRcIixsLnBhdXNlKSxjLnN0eWxlLmRpc3BsYXk9XCJpbmxpbmUtYmxvY2tcIix0LmFkZENsYXNzKGMsXCJ4Z3BsYXllci1zdGFydC1pbnRlcmFjdFwiKX1mdW5jdGlvbiB5KCl7XCJpbWdcIj09PXMudHlwZT9jLnN0eWxlLmJhY2tncm91bmRJbWFnZT0ndXJsKFwiJytzLnVybC5wbGF5KydcIiknOnUuc2V0QXR0cmlidXRlKFwiZFwiLGwucGxheSksYy5zdHlsZS5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIsdC5hZGRDbGFzcyhjLFwieGdwbGF5ZXItc3RhcnQtaW50ZXJhY3RcIil9ZnVuY3Rpb24gYih0KXtlLmNvbmZpZy5hdXRvcGxheSYmZS5zdGFydCgpfWgub25sb2FkPWZ1bmN0aW9uKCl7Zi5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIn0sZS5jb25maWcuZW50ZXJMb2dvJiZlLmNvbmZpZy5lbnRlckxvZ28udXJsJiZlLmNvbmZpZy5lbnRlckxvZ28ud2lkdGgmJmUuY29uZmlnLmVudGVyTG9nby5oZWlnaHQ/KGguc3JjPWUuY29uZmlnLmVudGVyTG9nby51cmwscC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9J3VybChcIicrZS5jb25maWcuZW50ZXJMb2dvLnVybCsnXCIpJyxwLnN0eWxlLndpZHRoPWUuY29uZmlnLmVudGVyTG9nby53aWR0aCtcInB4XCIscC5zdHlsZS5oZWlnaHQ9ZS5jb25maWcuZW50ZXJMb2dvLmhlaWdodCtcInB4XCIscC5zdHlsZS5iYWNrZ3JvdW5kU2l6ZT1lLmNvbmZpZy5lbnRlckxvZ28ud2lkdGgrXCJweCBcIitlLmNvbmZpZy5lbnRlckxvZ28uaGVpZ2h0K1wicHhcIixwLnN0eWxlLm1hcmdpbj1cIi1cIitlLmNvbmZpZy5lbnRlckxvZ28uaGVpZ2h0LzIrXCJweCBhdXRvIGF1dG8gLVwiK2UuY29uZmlnLmVudGVyTG9nby53aWR0aC8yK1wicHhcIixmLnN0eWxlLm1hcmdpbj1lLmNvbmZpZy5lbnRlckxvZ28uaGVpZ2h0LTYrXCJweCBhdXRvIGF1dG8gLTYycHhcIik6aC5zcmM9dC5nZXRCZ0ltYWdlKHApLGUuY29uZmlnLmVudGVyVGlwcyYmZS5jb25maWcuZW50ZXJUaXBzLmJhY2tncm91bmQmJihmLnN0eWxlLmJhY2tncm91bmQ9XCJcIitlLmNvbmZpZy5lbnRlclRpcHMuYmFja2dyb3VuZCksZS5jb25maWcuZW50ZXJCZyYmKGUuY29uZmlnLmVudGVyQmcudXJsP2Quc3R5bGUuYmFja2dyb3VuZEltYWdlPSd1cmwoXCInK2UuY29uZmlnLmVudGVyQmcudXJsKydcIiknOmUuY29uZmlnLmVudGVyQmcuY29sb3ImJihkLnN0eWxlLmJhY2tncm91bmQ9ZS5jb25maWcuZW50ZXJCZy5jb2xvcikpLFtcImNsaWNrXCIsXCJ0b3VjaGVuZFwiXS5mb3JFYWNoKChmdW5jdGlvbihuKXtjLmFkZEV2ZW50TGlzdGVuZXIobiwoZnVuY3Rpb24obil7IWZ1bmN0aW9uKG4pe24ucHJldmVudERlZmF1bHQoKSxuLnN0b3BQcm9wYWdhdGlvbigpLHQuaGFzQ2xhc3MobyxcInhncGxheWVyLW5vc3RhcnRcIik/KHQucmVtb3ZlQ2xhc3MobyxcInhncGxheWVyLW5vc3RhcnRcIiksdC5hZGRDbGFzcyhvLFwieGdwbGF5ZXItaXMtZW50ZXJcIiksZS5vbihcImNhbnBsYXlcIixnKSxlLm9uY2UoXCJwbGF5aW5nXCIsdiksby5xdWVyeVNlbGVjdG9yKFwidmlkZW9cIil8fGUuc3RhcnQoKSxlLnBsYXkoKSk6ZS5wYXVzZWQmJih0LnJlbW92ZUNsYXNzKG8sXCJ4Z3BsYXllci1ub3N0YXJ0IHhncGxheWVyLWlzbG9hZGluZ1wiKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe2UucGxheSgpfSksMTApKX0obil9KSwhMSl9KSksYy5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsKGZ1bmN0aW9uKGUpeyFmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksdC5yZW1vdmVDbGFzcyhjLFwieGdwbGF5ZXItc3RhcnQtaW50ZXJhY3RcIiksYy5zdHlsZS5kaXNwbGF5PVwibm9uZVwifShlKX0pKSxlLm9uKFwicGxheVwiLG0pLGUub24oXCJwYXVzZVwiLHkpLGUub25FbGVtZW50Q2xpY2s9ZnVuY3Rpb24oZSxuKXtlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKTt2YXIgbz10aGlzO28uY29uZmlnLmNsb3NlVmlkZW9DbGlja3x8KHIrKyxhJiZjbGVhclRpbWVvdXQoYSksMT09PXI/YT1zZXRUaW1lb3V0KChmdW5jdGlvbigpe2lmKHQuaGFzQ2xhc3Moby5yb290LFwieGdwbGF5ZXItbm9zdGFydFwiKSlyZXR1cm4hMTtvLmVuZGVkfHwoby5wYXVzZWQ/by5wbGF5KCk6by5wYXVzZSgpKSxyPTB9KSwyMDApOnI9MCl9LGUudmlkZW8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKGZ1bmN0aW9uKHQpe2Uub25FbGVtZW50Q2xpY2sodCxlLnZpZGVvKX0pLCExKSxlLm9uRWxlbWVudERibGNsaWNrPWZ1bmN0aW9uKGUsdCl7ZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCk7aWYoIXRoaXMuY29uZmlnLmNsb3NlVmlkZW9EYmxjbGljayl7dmFyIG89bi5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLWZ1bGxzY3JlZW5cIik7aWYobyl7dmFyIHI9dm9pZCAwO2RvY3VtZW50LmNyZWF0ZUV2ZW50PyhyPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikpLmluaXRFdmVudChcImNsaWNrXCIsITAsITApOnI9bmV3IEV2ZW50KFwiY2xpY2tcIiksby5kaXNwYXRjaEV2ZW50KHIpfX19LGUudmlkZW8uYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsKGZ1bmN0aW9uKHQpe2Uub25FbGVtZW50RGJsY2xpY2sodCxlLnZpZGVvKX0pLCExKSxvLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsKGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KGUubGVhdmVQbGF5ZXJUaW1lciksZS5lbWl0KFwiZm9jdXNcIixlKX0pLCExKSxvLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsKGZ1bmN0aW9uKCl7ZS5jb25maWcuY2xvc2VQbGF5ZXJCbHVyfHwoZS5sZWF2ZVBsYXllclRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5lbWl0KFwiYmx1clwiLGUpfSksZS5jb25maWcubGVhdmVQbGF5ZXJUaW1lfHwwKSl9KSwhMSksbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLChmdW5jdGlvbih0KXtlLnVzZXJUaW1lciYmY2xlYXJUaW1lb3V0KGUudXNlclRpbWVyKX0pLCExKSxuLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsKGZ1bmN0aW9uKHQpe2UuY29uZmlnLmNsb3NlQ29udHJvbHNCbHVyfHxlLmVtaXQoXCJmb2N1c1wiLGUpfSksITEpLGUub25jZShcInJlYWR5XCIsYiksZS5vbmNlKFwiZGVzdHJveVwiLChmdW5jdGlvbiB0KCl7ZS5vZmYoXCJjYW5wbGF5XCIsZyksZS5vZmYoXCJwbGF5aW5nXCIsdiksZS5vZmYoXCJwbGF5XCIsbSksZS5vZmYoXCJwYXVzZVwiLHkpLGUub2ZmKFwicmVhZHlcIixiKSxlLm9mZihcImRlc3Ryb3lcIix0KX0pKX0pKX0sXCIuL3NyYy9jb250cm9sL3BpcC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL3BpcC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwicGlwXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWkuZGVmYXVsdC51dGlsO2lmKGUuY29uZmlnLnBpcCl7dmFyIG49dC5jcmVhdGVEb20oXCJ4Zy1waXBcIiwnPHAgY2xhc3M9XCJuYW1lXCI+PHNwYW4+55S75Lit55S7PC9zcGFuPjwvcD4nLHt0YWJpbmRleDo5fSxcInhncGxheWVyLXBpcFwiKSxvPWUuY29udHJvbHMscj1lLnJvb3Q7by5hcHBlbmRDaGlsZChuKTtbXCJjbGlja1wiLFwidG91Y2hzdGFydFwiXS5mb3JFYWNoKChmdW5jdGlvbihvKXtuLmFkZEV2ZW50TGlzdGVuZXIobywoZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksdC5oYXNDbGFzcyhyLFwieGdwbGF5ZXItcGlwLWFjdGl2ZVwiKT9lLmV4aXRQSVAoZSk6ZS5nZXRQSVAoZSl9KSl9KSl9fSkpfSxcIi4vc3JjL2NvbnRyb2wvcGxheS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9wbGF5LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1pKG4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpKSxyPWkobigvKiEgLi4vdXRpbHMvc3ZnICovXCIuL3NyYy91dGlscy9zdmcuanNcIikpO2Z1bmN0aW9uIGkoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fW8uZGVmYXVsdC5pbnN0YWxsKFwicGxheVwiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLmNvbnRyb2xzLG49by5kZWZhdWx0LnV0aWwsaT1lLmNvbmZpZy5pY29uU2NhbGV8fC4wMzIwNjI1LGE9e3BsYXk6XCJNNTc2LDM2M0w4MTAsNTEyTDU3Niw2NjF6TTM0MiwyMTRMNTc2LDM2M0w1NzYsNjYxTDM0Miw4MTB6XCIscGF1c2U6XCJNNTk4LDIxNGgxNzB2NTk2aC0xNzB2LTU5NnpNMjU2IDgxMHYtNTk2aDE3MHY1OTZoLTE3MHpcIn0scz1lLmNvbmZpZy5wbGF5QnRuP2UuY29uZmlnLnBsYXlCdG46e30sbD12b2lkIDAsYz12b2lkIDAsdT12b2lkIDA7XCJpbWdcIj09PXMudHlwZT9sPW8uZGVmYXVsdC51dGlsLmNyZWF0ZUltZ0J0bihcInBsYXlcIixzLnVybC5wbGF5LHMud2lkdGgscy5oZWlnaHQpOihsPW4uY3JlYXRlRG9tKFwieGctcGxheVwiLCc8eGctaWNvbiBjbGFzcz1cInhncGxheWVyLWljb25cIj48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjEwMjRcIiBoZWlnaHQ9XCIxMDI0XCIgdmlld0JveD1cIjAgMCAxMDI0IDEwMjRcIj5cXG4gICAgICAgICAgICAgIDxwYXRoIHRyYW5zZm9ybT1cInNjYWxlKCcraStcIiBcIitpKycpXCIgZD1cIicrYS5wbGF5KydcIj48L3BhdGg+XFxuICAgICAgICAgIDwvc3ZnPjwveGctaWNvbj4nLHt9LFwieGdwbGF5ZXItcGxheVwiKSxjPWwucXVlcnlTZWxlY3RvcihcInBhdGhcIiksdT1uZXcgci5kZWZhdWx0KHtwcm9ncmVzczpmdW5jdGlvbihlLHQpe2Muc2V0QXR0cmlidXRlKFwiZFwiLHUudG9TVkdTdHJpbmcoZSkpfSxmcm9tOmEucGF1c2UsdG86YS5wbGF5LGR1cmF0aW9uOjUwfSkpO3ZhciBkPWUuY29uZmlnLmxhbmcmJlwiemgtY25cIj09PWUuY29uZmlnLmxhbmc/XCLmkq3mlL5cIjpcIlBsYXlcIixwPWUuY29uZmlnLmxhbmcmJlwiemgtY25cIj09PWUuY29uZmlnLmxhbmc/XCLmmoLlgZxcIjpcIlBhdXNlXCIsZj1uLmNyZWF0ZURvbShcInhnLXRpcHNcIixkLHt9LFwieGdwbGF5ZXItdGlwc1wiKTtsLmFwcGVuZENoaWxkKGYpO2Z1bmN0aW9uIGgoKXtcImltZ1wiPT09cy50eXBlP2wuc3R5bGUuYmFja2dyb3VuZEltYWdlPSd1cmwoXCInK3MudXJsLnBhdXNlKydcIiknOnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7Zi50ZXh0Q29udGVudD1wLHUudG8hPT1hLnBhdXNlJiZ1LnJlc2V0KGEucGF1c2UsYS5wbGF5KX0pLDgwKX1mdW5jdGlvbiBnKCl7XCJpbWdcIj09PXMudHlwZT9sLnN0eWxlLmJhY2tncm91bmRJbWFnZT0ndXJsKFwiJytzLnVybC5wbGF5KydcIiknOnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7Zi50ZXh0Q29udGVudD1kLHUudG8hPT1hLnBsYXkmJnUucmVzZXQoYS5wbGF5LGEucGF1c2UpfSksODApfXQuYXBwZW5kQ2hpbGQobCksW1wiY2xpY2tcIixcInRvdWNoc3RhcnRcIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7bC5hZGRFdmVudExpc3RlbmVyKHQsKGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLGUuZW5kZWR8fChlLnBhdXNlZD9lLnBsYXkoKTplLnBhdXNlKCkpfSksITEpfSkpLGUub24oXCJwbGF5XCIsaCksZS5vbihcInBhdXNlXCIsZyksZS5vbmNlKFwiZGVzdHJveVwiLChmdW5jdGlvbiB0KCl7ZS5vZmYoXCJwbGF5XCIsaCksZS5vZmYoXCJwYXVzZVwiLGcpLGUub2ZmKFwiZGVzdHJveVwiLHQpfSkpfSkpfSxcIi4vc3JjL2NvbnRyb2wvcGxheU5leHQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL3BsYXlOZXh0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcInBsYXlOZXh0XCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWkuZGVmYXVsdC51dGlsLG49ZS5jb250cm9scyxvPWUuY29uZmlnLnBsYXlOZXh0QnRuLHI9LTE7aWYobyYmby51cmxMaXN0KXt2YXIgYT12b2lkIDA7YT1cImltZ1wiPT09by50eXBlP2kuZGVmYXVsdC51dGlsLmNyZWF0ZUltZ0J0bihcInBsYXlOZXh0XCIsby51cmwsby53aWR0aCxvLmhlaWdodCk6dC5jcmVhdGVEb20oXCJ4Zy1wbGF5TmV4dFwiLCc8eGctaWNvbiBjbGFzcz1cInhncGxheWVyLWljb25cIj48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjEwMjRcIiBoZWlnaHQ9XCIxMDI0XCIgdmlld0JveD1cIjAgMCAxMDI0IDEwMjRcIj5cXG4gICAgICAgICAgICAgICAgPHBhdGggdHJhbnNmb3JtPVwic2NhbGUoMC4wMjUgMC4wMjUpXCJcXG4gICAgICAgICAgICAgICAgZD1cIk04MDAgMzgwdjc2OGgtMTI4di0zNTJsLTMyMCAzMjB2LTcwNGwzMjAgMzIwdi0zNTJ6XCI+PC9wYXRoPlxcbiAgICAgICAgICAgIDwvc3ZnPjwveGctaWNvbj4nLHt9LFwieGdwbGF5ZXItcGxheU5leHRcIiksbi5hcHBlbmRDaGlsZChhKTtbXCJjbGlja1wiLFwidG91Y2hlbmRcIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7YS5hZGRFdmVudExpc3RlbmVyKHQsKGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLHIrMTxvLnVybExpc3QubGVuZ3RoPyhyKyssZS52aWRlby5wYXVzZSgpLGUuY3VycmVudFRpbWU9MCxlLnZpZGVvLmF1dG9wbGF5PSEwLGUuc3JjPW8udXJsTGlzdFtyXSxlLmVtaXQoXCJwbGF5ZXJOZXh0XCIscisxKSk6ZS5lbWl0KFwidXJsTGlzdCBsYXN0XCIpfSksITEpfSkpfX0pKX0sXCIuL3NyYy9jb250cm9sL3BsYXliYWNrUmF0ZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL3BsYXliYWNrUmF0ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwicGxheWJhY2tSYXRlXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWkuZGVmYXVsdC51dGlsLG49MCxvPTEscj1bXTtpZighZS5jb25maWcucGxheWJhY2tSYXRlKXJldHVybiExO2UuY29uZmlnLnBsYXliYWNrUmF0ZS5zb3J0KChmdW5jdGlvbihlLHQpe3JldHVybiBlLXR9KSksZS5jb25maWcucGxheWJhY2tSYXRlLmZvckVhY2goKGZ1bmN0aW9uKHQsaSl7ZS5jb25maWcuZGVmYXVsdFBsYXliYWNrUmF0ZSYmZS5jb25maWcuZGVmYXVsdFBsYXliYWNrUmF0ZT09PXQ/KG49aSxvPXQsZS5vbmNlKFwicGxheWluZ1wiLChmdW5jdGlvbigpe2UudmlkZW8ucGxheWJhY2tSYXRlPXR9KSkpOjEhPT10JiZcIjFcIiE9PXR8fChuPWkpLHIucHVzaCh0K1wieFwiKX0pKTt2YXIgYT1lLmNvbmZpZy5sYW5nJiZcInpoLWNuXCI9PT1lLmNvbmZpZy5sYW5nP1wi5YCN6YCfXCI6XCJTcGVlZFwiLHM9dC5jcmVhdGVEb20oXCJ4Zy1wbGF5YmFja1wiLFwiPHAgY2xhc3M9J25hbWUnPjxzcGFuPlwiK28rXCJ4PC9zcGFuPjwvcD5cIix7fSxcInhncGxheWVyLXBsYXliYWNrXCIpLGw9ZS5jb250cm9scyxjPXQuY3JlYXRlRG9tKFwieGctdGlwc1wiLGEse30sXCJ4Z3BsYXllci10aXBzXCIpO3MuYXBwZW5kQ2hpbGQoYyksbC5hcHBlbmRDaGlsZChzKSxbXCJ0b3VjaHN0YXJ0XCIsXCJjbGlja1wiXS5mb3JFYWNoKChmdW5jdGlvbih0KXtzLmFkZEV2ZW50TGlzdGVuZXIodCwoZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCk7dmFyIG89dC50YXJnZXR8fHQuc3JjRWxlbWVudDshb3x8XCJwXCIhPT1vLnRhZ05hbWUudG9Mb2NhbGVMb3dlckNhc2UoKSYmXCJzcGFuXCIhPT1vLnRhZ05hbWUudG9Mb2NhbGVMb3dlckNhc2UoKXx8KG49bisxPT09ci5sZW5ndGg/MDpuKzEscy5xdWVyeVNlbGVjdG9yKFwicFwiKS5pbm5lckhUTUw9XCI8c3Bhbj5cIityW25dK1wiPC9zcGFuPlwiLGUudmlkZW8ucGxheWJhY2tSYXRlPTEqcltuXS5yZXBsYWNlKC94JC9nLFwiXCIpKX0pLCExKX0pKSxzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsKGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLGMuc3R5bGUubGVmdD1cIjUwJVwiO3ZhciBuPWMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbz1lLnJvb3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7bi5yaWdodD5vLnJpZ2h0JiYoYy5zdHlsZS5sZWZ0PS1uLnJpZ2h0K28ucmlnaHQrMTYrXCJweFwiKX0pKSxlLm9uKFwicGxheVwiLChmdW5jdGlvbigpe3ZhciB0PXBhcnNlRmxvYXQocltuXS5zdWJzdHJpbmcoMCxyW25dLmxlbmd0aC0xKSk7ZS52aWRlby5wbGF5YmFja1JhdGUudG9GaXhlZCgxKSE9PXQudG9GaXhlZCgxKSYmKGUudmlkZW8ucGxheWJhY2tSYXRlPXQpfSkpfSkpfSxcIi4vc3JjL2NvbnRyb2wvcG9zdGVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvcG9zdGVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI9bigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIiksaT0obz1yKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307aS5kZWZhdWx0Lmluc3RhbGwoXCJwb3N0ZXJcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9aS5kZWZhdWx0LnV0aWwuY3JlYXRlRG9tKFwieGctcG9zdGVyXCIsXCJcIix7fSxcInhncGxheWVyLXBvc3RlclwiKSxuPWUucm9vdDtmdW5jdGlvbiBvKCl7dC5zdHlsZS5kaXNwbGF5PVwibm9uZVwifWUuY29uZmlnLnBvc3RlciYmKHQuc3R5bGUuYmFja2dyb3VuZEltYWdlPVwidXJsKFwiK2UuY29uZmlnLnBvc3RlcitcIilcIixuLmFwcGVuZENoaWxkKHQpKSxlLm9uKFwicGxheVwiLG8pLGUub25jZShcImRlc3Ryb3lcIiwoZnVuY3Rpb24gdCgpe2Uub2ZmKFwicGxheVwiLG8pLGUub2ZmKFwiZGVzdHJveVwiLHQpfSkpfSkpfSxcIi4vc3JjL2NvbnRyb2wvcHJvZ3Jlc3MuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL3Byb2dyZXNzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcInByb2dyZXNzXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWkuZGVmYXVsdC51dGlsLG49dC5jcmVhdGVEb20oXCJ4Zy1wcm9ncmVzc1wiLCc8eGctb3V0ZXIgY2xhc3M9XCJ4Z3BsYXllci1wcm9ncmVzcy1vdXRlclwiPjx4Zy1jYWNoZSBjbGFzcz1cInhncGxheWVyLXByb2dyZXNzLWNhY2hlXCI+PC94Zy1jYWNoZT48eGctcGxheWVkIGNsYXNzPVwieGdwbGF5ZXItcHJvZ3Jlc3MtcGxheWVkXCI+PC94Z3BsYXllci1wbGF5ZWQ+PHhnLXByb2dyZXNzLWJ0biBjbGFzcz1cInhncGxheWVyLXByb2dyZXNzLWJ0blwiPjwveGctcHJvZ3Jlc3MtYnRuPjx4Zy1wb2ludCBjbGFzcz1cInhncGxheWVyLXByb2dyZXNzLXBvaW50IHhncGxheWVyLXRpcHNcIj48L3hnLXBvaW50Pjx4Zy10aHVtYm5haWwgY2xhc3M9XCJ4Z3BsYXllci1wcm9ncmVzcy10aHVtYm5haWwgeGdwbGF5ZXItdGlwc1wiPjwveGctdGh1bWJuYWlsPjwveGctb3V0ZXI+Jyx7dGFiaW5kZXg6MX0sXCJ4Z3BsYXllci1wcm9ncmVzc1wiKSxvPWUuY29udHJvbHMscj12b2lkIDA7by5hcHBlbmRDaGlsZChuKTt2YXIgYT1uLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItcHJvZ3Jlc3MtcGxheWVkXCIpLHM9bi5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLXByb2dyZXNzLWJ0blwiKSxsPW4ucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1wcm9ncmVzcy1vdXRlclwiKSxjPW4ucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1wcm9ncmVzcy1jYWNoZVwiKSx1PW4ucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1wcm9ncmVzcy1wb2ludFwiKSxkPW4ucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1wcm9ncmVzcy10aHVtYm5haWxcIik7ZnVuY3Rpb24gcChvLHIpe28uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwoZnVuY3Rpb24oZSl7ciYmKHQuYWRkQ2xhc3MobyxcInhncGxheWVyLXByb2dyZXNzLWRvdC1zaG93XCIpLHQuYWRkQ2xhc3MobixcInhncGxheWVyLXByb2dyZXNzLWRvdC1hY3RpdmVcIikpfSkpLG8uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwoZnVuY3Rpb24oZSl7ciYmKHQucmVtb3ZlQ2xhc3MobyxcInhncGxheWVyLXByb2dyZXNzLWRvdC1zaG93XCIpLHQucmVtb3ZlQ2xhc3MobixcInhncGxheWVyLXByb2dyZXNzLWRvdC1hY3RpdmVcIikpfSkpLG8uYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsKGZ1bmN0aW9uKGkpe2kucHJldmVudERlZmF1bHQoKSxpLnN0b3BQcm9wYWdhdGlvbigpLHImJih0Lmhhc0NsYXNzKG8sXCJ4Z3BsYXllci1wcm9ncmVzcy1kb3Qtc2hvd1wiKXx8T2JqZWN0LmtleXMoZS5kb3RBcnIpLmZvckVhY2goKGZ1bmN0aW9uKG4pe2UuZG90QXJyW25dJiZ0LnJlbW92ZUNsYXNzKGUuZG90QXJyW25dLFwieGdwbGF5ZXItcHJvZ3Jlc3MtZG90LXNob3dcIil9KSksdC50b2dnbGVDbGFzcyhvLFwieGdwbGF5ZXItcHJvZ3Jlc3MtZG90LXNob3dcIiksdC50b2dnbGVDbGFzcyhuLFwieGdwbGF5ZXItcHJvZ3Jlc3MtZG90LWFjdGl2ZVwiKSl9KSl9ZnVuY3Rpb24gZigpe2UuY29uZmlnLnByb2dyZXNzRG90JiZcIkFycmF5XCI9PT10LnR5cGVPZihlLmNvbmZpZy5wcm9ncmVzc0RvdCkmJmUuY29uZmlnLnByb2dyZXNzRG90LmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKG4udGltZT49MCYmbi50aW1lPD1lLmR1cmF0aW9uKXt2YXIgbz10LmNyZWF0ZURvbShcInhnLXByb2dyZXNzLWRvdFwiLG4udGV4dD8nPHNwYW4gY2xhc3M9XCJ4Z3BsYXllci1wcm9ncmVzcy10aXBcIj4nK24udGV4dCtcIjwvc3Bhbj5cIjpcIlwiLHt9LFwieGdwbGF5ZXItcHJvZ3Jlc3MtZG90XCIpO28uc3R5bGUubGVmdD1uLnRpbWUvZS5kdXJhdGlvbioxMDArXCIlXCIsbC5hcHBlbmRDaGlsZChvKSxlLmRvdEFycltuLnRpbWVdPW8scChvLG4udGV4dCl9fSkpfWUuZG90QXJyPXt9LGUub25jZShcImNhbnBsYXlcIixmKSxlLmFkZFByb2dyZXNzRG90PWZ1bmN0aW9uKG4sbyl7aWYoIWUuZG90QXJyW25dJiZuPj0wJiZuPD1lLmR1cmF0aW9uKXt2YXIgcj10LmNyZWF0ZURvbShcInhnLXByb2dyZXNzLWRvdFwiLFwiXCIse30sXCJ4Z3BsYXllci1wcm9ncmVzcy1kb3RcIik7ci5zdHlsZS5sZWZ0PW4vZS5kdXJhdGlvbioxMDArXCIlXCIsbC5hcHBlbmRDaGlsZChyKSxlLmRvdEFycltuXT1yLHAocixvKX19LGUucmVtb3ZlUHJvZ3Jlc3NEb3Q9ZnVuY3Rpb24odCl7aWYodD49MCYmdDw9ZS5kdXJhdGlvbiYmZS5kb3RBcnJbdF0pe3ZhciBuPWUuZG90QXJyW3RdO24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKSxuPW51bGwsZS5kb3RBcnJbdF09bnVsbH19LGUucmVtb3ZlQWxsUHJvZ3Jlc3NEb3Q9ZnVuY3Rpb24oKXtPYmplY3Qua2V5cyhlLmRvdEFycikuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYoZS5kb3RBcnJbdF0pe3ZhciBuPWUuZG90QXJyW3RdO24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKSxuPW51bGwsZS5kb3RBcnJbdF09bnVsbH19KSl9O3ZhciBoPTAsZz0wLHY9MCxtPTAseT0wLGI9MCx4PVtdO2UuY29uZmlnLnRodW1ibmFpbCYmKGg9ZS5jb25maWcudGh1bWJuYWlsLnBpY19udW0sZz1lLmNvbmZpZy50aHVtYm5haWwud2lkdGgsdj1lLmNvbmZpZy50aHVtYm5haWwuaGVpZ2h0LG09ZS5jb25maWcudGh1bWJuYWlsLmNvbCx5PWUuY29uZmlnLnRodW1ibmFpbC5yb3cseD1lLmNvbmZpZy50aHVtYm5haWwudXJscyxkLnN0eWxlLndpZHRoPWcrXCJweFwiLGQuc3R5bGUuaGVpZ2h0PXYrXCJweFwiKSxbXCJ0b3VjaHN0YXJ0XCIsXCJtb3VzZWRvd25cIl0uZm9yRWFjaCgoZnVuY3Rpb24oaSl7bi5hZGRFdmVudExpc3RlbmVyKGksKGZ1bmN0aW9uKGkpe2lmKGkucHJldmVudERlZmF1bHQoKSxpLnN0b3BQcm9wYWdhdGlvbigpLHQuZXZlbnQoaSksaS5fdGFyZ2V0PT09dXx8IWUuY29uZmlnLmFsbG93U2Vla0FmdGVyRW5kZWQmJmUuZW5kZWQpcmV0dXJuITE7bi5mb2N1cygpLHI9bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDt2YXIgbD1hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQsYz1mdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKSx0LmV2ZW50KG4pLGUuaXNQcm9ncmVzc01vdmluZz0hMDt2YXIgaT1uLmNsaWVudFgtbD5yP3I6bi5jbGllbnRYLWwsYz1pL3IqZS5kdXJhdGlvbjtpZihhLnN0eWxlLndpZHRoPTEwMCppL3IrXCIlXCIsaS03PDA/KHMuc3R5bGUubGVmdD1cIjBweFwiLHMuc3R5bGUudHJhbnNmb3JtPVwiXCIpOmkrNz5yPyhzLnN0eWxlLmxlZnQ9ci0xNCtcInB4XCIscy5zdHlsZS50cmFuc2Zvcm09XCJcIik6KHMuc3R5bGUubGVmdD1cIjEwMCVcIixzLnN0eWxlLnRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtNTAlLCAwKVwiKSxcInZpZGVvXCIhPT1lLnZpZGVvQ29uZmlnLm1lZGlhVHlwZXx8ZS5kYXNofHxlLmNvbmZpZy5jbG9zZU1vdmVTZWVrKXt2YXIgdT10LmZpbmREb20obyxcIi54Z3BsYXllci10aW1lXCIpO3UmJih1LmlubmVySFRNTD1cIjxzcGFuPlwiK3QuZm9ybWF0KGN8fDApK1wiPC9zcGFuPjxlbT5cIit0LmZvcm1hdChlLmR1cmF0aW9uKSl9ZWxzZSBlLmN1cnJlbnRUaW1lPU51bWJlcihjKS50b0ZpeGVkKDEpO2UuZW1pdChcImZvY3VzXCIpfSxkPWZ1bmN0aW9uIG8oaSl7aWYoaS5wcmV2ZW50RGVmYXVsdCgpLGkuc3RvcFByb3BhZ2F0aW9uKCksdC5ldmVudChpKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLGMpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsYyx7cGFzc2l2ZTohMX0pLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLG8pLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIixvKSxuLmJsdXIoKSwhZS5pc1Byb2dyZXNzTW92aW5nfHxcImF1ZGlvXCI9PT1lLnZpZGVvQ29uZmlnLm1lZGlhVHlwZXx8ZS5kYXNofHxlLmNvbmZpZy5jbG9zZU1vdmVTZWVrKXt2YXIgdT1pLmNsaWVudFgtbCxkPXUvciplLmR1cmF0aW9uO2Euc3R5bGUud2lkdGg9MTAwKnUvcitcIiVcIix1LTc8MD8ocy5zdHlsZS5sZWZ0PVwiMHB4XCIscy5zdHlsZS50cmFuc2Zvcm09XCJcIik6dSs3PnI/KHMuc3R5bGUubGVmdD1yLTE0K1wicHhcIixzLnN0eWxlLnRyYW5zZm9ybT1cIlwiKToocy5zdHlsZS5sZWZ0PVwiMTAwJVwiLHMuc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlKC01MCUsIDApXCIpLGUuY3VycmVudFRpbWU9TnVtYmVyKGQpLnRvRml4ZWQoMSl9ZS5lbWl0KFwiZm9jdXNcIiksZS5pc1Byb2dyZXNzTW92aW5nPSExfTtyZXR1cm4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixjKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLGMse3Bhc3NpdmU6ITF9KSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixkKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsZCksITF9KSl9KSksbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLChmdW5jdGlvbihvKXtpZighZS5jb25maWcuYWxsb3dTZWVrQWZ0ZXJFbmRlZCYmZS5lbmRlZClyZXR1cm4hMTt2YXIgcj1uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQsaT1uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoLGE9ZnVuY3Rpb24obyl7dmFyIGE9KG8uY2xpZW50WC1yKS9pKmUuZHVyYXRpb247YT1hPDA/MDphLHUudGV4dENvbnRlbnQ9dC5mb3JtYXQoYSk7dmFyIHM9dS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtpZihlLmNvbmZpZy50aHVtYm5haWwpe2I9ZS5kdXJhdGlvbi9oO3ZhciBsPU1hdGguZmxvb3IoYS9iKTtkLnN0eWxlLmJhY2tncm91bmRJbWFnZT1cInVybChcIit4W01hdGguY2VpbCgobCsxKS8obSp5KSktMV0rXCIpXCI7dmFyIGM9bCsxLW0qeSooTWF0aC5jZWlsKChsKzEpLyhtKnkpKS0xKSxwPU1hdGguY2VpbChjL3kpLTEsZj1jLXAqeS0xO2Quc3R5bGVbXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCJdPVwiLVwiK2YqZytcInB4IC1cIitwKnYrXCJweFwiO3ZhciB3PW8uY2xpZW50WC1yLWcvMjt3PSh3PXc+MD93OjApPGktZz93OmktZyxkLnN0eWxlLmxlZnQ9dytcInB4XCIsZC5zdHlsZS50b3A9LTEwLXYrXCJweFwiLGQuc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsdS5zdHlsZS5sZWZ0PXcrZy8yLXMvMitcInB4XCJ9ZWxzZXt2YXIgXz1vLmNsaWVudFgtci1zLzI7Xz0oXz1fPjA/XzowKT5pLXM/aS1zOl8sdS5zdHlsZS5sZWZ0PV8rXCJweFwifXQuaGFzQ2xhc3MobixcInhncGxheWVyLXByb2dyZXNzLWRvdC1hY3RpdmVcIik/dS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiOnUuc3R5bGUuZGlzcGxheT1cImJsb2NrXCJ9LHM9ZnVuY3Rpb24oZSl7YShlKX07bi5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIscywhMSksbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLChmdW5jdGlvbiBlKHQpe24ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLHMsITEpLG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIixlLCExKSxhKHQpLHUuc3R5bGUuZGlzcGxheT1cIm5vbmVcIixkLnN0eWxlLmRpc3BsYXk9XCJub25lXCJ9KSwhMSksYShvKX0pLCExKTt2YXIgdz0hMSxfPWZ1bmN0aW9uKCl7aWYoIXImJm4mJihyPW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpLFwiYXVkaW9cIiE9PWUudmlkZW9Db25maWcubWVkaWFUeXBlfHwhZS5pc1Byb2dyZXNzTW92aW5nfHwhZS5kYXNoKXthLnN0eWxlLndpZHRoPTEwMCplLmN1cnJlbnRUaW1lL2UuZHVyYXRpb24rXCIlXCI7dmFyIHQ9ZS5jdXJyZW50VGltZS9lLmR1cmF0aW9uKnItNztpZih0PDApcy5zdHlsZS5sZWZ0PVwiMHB4XCIscy5zdHlsZS50cmFuc2Zvcm09XCJcIix3PSExO2Vsc2UgaWYodCsxND5yKXMuc3R5bGUubGVmdD1yLTE0K1wicHhcIixzLnN0eWxlLnRyYW5zZm9ybT1cIlwiLHc9ITE7ZWxzZXtpZih3KXJldHVybjtzLnN0eWxlLmxlZnQ9XCIxMDAlXCIscy5zdHlsZS50cmFuc2Zvcm09XCJ0cmFuc2xhdGUoLTUwJSwgMClcIix3PSEwfX19O2Uub24oXCJ0aW1ldXBkYXRlXCIsXyk7dmFyIGs9ZnVuY3Rpb24oKXt2YXIgdD1lLmJ1ZmZlcmVkO2lmKHQmJnQubGVuZ3RoPjApe2Zvcih2YXIgbj10LmVuZCh0Lmxlbmd0aC0xKSxvPTAscj10Lmxlbmd0aDtvPHI7bysrKWlmKGUuY3VycmVudFRpbWU+PXQuc3RhcnQobykmJmUuY3VycmVudFRpbWU8PXQuZW5kKG8pKXtuPXQuZW5kKG8pO2Zvcih2YXIgaT1vKzE7aTx0Lmxlbmd0aDtpKyspaWYodC5zdGFydChpKS10LmVuZChpLTEpPj0yKXtuPXQuZW5kKGktMSk7YnJlYWt9YnJlYWt9Yy5zdHlsZS53aWR0aD1uL2UuZHVyYXRpb24qMTAwK1wiJVwifX0sRT1bXCJidWZmZXJlZENoYW5nZVwiLFwiY2FjaGV1cGRhdGVcIixcImVuZGVkXCIsXCJ0aW1ldXBkYXRlXCJdO0UuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZS5vbih0LGspfSkpLGUub25jZShcImRlc3Ryb3lcIiwoZnVuY3Rpb24gdCgpe2UucmVtb3ZlQWxsUHJvZ3Jlc3NEb3QoKSxlLm9mZihcImNhbnBsYXlcIixmKSxlLm9mZihcInRpbWV1cGRhdGVcIixfKSxFLmZvckVhY2goKGZ1bmN0aW9uKHQpe2Uub2ZmKHQsayl9KSksZS5vZmYoXCJkZXN0cm95XCIsdCl9KSl9KSl9LFwiLi9zcmMvY29udHJvbC9yZXBsYXkuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC9yZXBsYXkuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcInJlcGxheVwiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1pLmRlZmF1bHQudXRpbCxuPWUuY29uZmlnLmNlbnRlckJ0bj9lLmNvbmZpZy5jZW50ZXJCdG46e30sbz12b2lkIDAscj12b2lkIDAsYT12b2lkIDAscz12b2lkIDA7aWYoIShuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJpUGhvbmUgT1MgOVwiKT4tMSkpe2lmKFwiaW1nXCI9PT1uLnR5cGUpe2lmKHI9dC5jcmVhdGVEb20oXCJ4Zy1yZXBsYXlcIiwnPGRpdiBjbGFzcz1cInhncGxheWVyLXJlcGxheS1pbWdcIj48L2Rpdj4nLHt9LFwieGdwbGF5ZXItcmVwbGF5XCIpLChhPXIucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1yZXBsYXktaW1nXCIpKS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9J3VybChcIicrbi51cmwucmVwbGF5KydcIiknLG4ud2lkdGgmJm4uaGVpZ2h0KXt2YXIgbD12b2lkIDAsYz12b2lkIDAsdT12b2lkIDA7W1wicHhcIixcInJlbVwiLFwiZW1cIixcInB0XCIsXCJkcFwiLFwidndcIixcInZoXCIsXCJ2bVwiLFwiJVwiXS5ldmVyeSgoZnVuY3Rpb24oZSl7cmV0dXJuIShuLndpZHRoLmluZGV4T2YoZSk+LTEmJm4uaGVpZ2h0LmluZGV4T2YoZSk+LTEpfHwobD1wYXJzZUZsb2F0KG4ud2lkdGguc2xpY2UoMCxuLndpZHRoLmluZGV4T2YoZSkpLnRyaW0oKSksYz1wYXJzZUZsb2F0KG4uaGVpZ2h0LnNsaWNlKDAsbi5oZWlnaHQuaW5kZXhPZihlKSkudHJpbSgpKSx1PWUsITEpfSkpLGEuc3R5bGUud2lkdGg9XCJcIitsK3UsYS5zdHlsZS5oZWlnaHQ9XCJcIitjK3UsYS5zdHlsZS5iYWNrZ3JvdW5kU2l6ZT1cIlwiK2wrdStcIiBcIitjK3UsYS5zdHlsZS5tYXJnaW49XCItXCIrYy8yK3UrXCIgYXV0byBhdXRvIC1cIitsLzIrdX19ZWxzZSBvPXtyZXBsYXk6bi5yZXBsYXlQYXRoP24ucmVwbGF5UGF0aDpcIk04LjIyNzA4MzYyLDEzLjg3NTcyMzQgTDExLjI2NzczNzEsMTIuNjQ3MjE5NiBDMTEuNzc5ODA2NywxMi40NDAzMzAxIDEyLjM2MjYzODEsMTIuNjg3NzI3MyAxMi41Njk1Mjc2LDEzLjE5OTc5NjkgTDEyLjk0NDEzNDIsMTQuMTI2OTgwNyBDMTMuMTUxMDIzNywxNC42MzkwNTAyIDEyLjkwMzYyNjQsMTUuMjIxODgxNiAxMi4zOTE1NTY5LDE1LjQyODc3MTIgTDYuODI4NDUzOCwxNy42NzY0MTA3IEw1LjkwMTI2OTk1LDE4LjA1MTAxNzMgQzUuMzg5MjAwNDQsMTguMjU3OTA2OCA0LjgwNjM2OTAxLDE4LjAxMDUwOTYgNC41OTk0Nzk1LDE3LjQ5ODQ0IEwxLjk3NzIzMzM1LDExLjAwODE1MzEgQzEuNzcwMzQzODQsMTAuNDk2MDgzNiAyLjAxNzc0MTEsOS45MTMyNTIxMyAyLjUyOTgxMDYxLDkuNzA2MzYyNjIgTDMuNDU2OTk0NDYsOS4zMzE3NTYwMiBDMy45NjkwNjM5Niw5LjEyNDg2NjUyIDQuNTUxODk1NCw5LjM3MjI2Mzc4IDQuNzU4Nzg0OTEsOS44ODQzMzMyOSBMNS42Nzg4NTE2MywxMi4xNjE1NzgzIEM3Ljk5NTUxNzI2LDYuNjc2NjkzNCAxMy4zOTgzOTUxLDMgMTkuNSwzIEMyNy43ODQyNzEyLDMgMzQuNSw5LjcxNTcyODc1IDM0LjUsMTggQzM0LjUsMjYuMjg0MjcxMiAyNy43ODQyNzEyLDMzIDE5LjUsMzMgQzE1LjQ1NzM1OTYsMzMgMTEuNjY1ODYwNywzMS4zOTEyOTQ2IDguODcwMDQ2OTIsMjguNTgzMTk5MSBDOC4yODU1NDU3MSwyNy45OTYxMzAzIDguMjg3NjI3MTksMjcuMDQ2Mzg1MSA4Ljg3NDY5NjAzLDI2LjQ2MTg4MzkgQzkuNDYxNzY0ODgsMjUuODc3MzgyNyAxMC40MTE1MTAxLDI1Ljg3OTQ2NDEgMTAuOTk2MDExMywyNi40NjY1MzMgQzEzLjIzNDQzMjcsMjguNzE0Nzg3NSAxNi4yNjM1MDMsMzAgMTkuNSwzMCBDMjYuMTI3NDE3LDMwIDMxLjUsMjQuNjI3NDE3IDMxLjUsMTggQzMxLjUsMTEuMzcyNTgzIDI2LjEyNzQxNyw2IDE5LjUsNiBDMTQuNDE4Mzc3Miw2IDkuOTQyMTQ0ODMsOS4xODc4MzgxMSA4LjIyNzA4MzYyLDEzLjg3NTcyMzQgWlwifSxzPShyPXQuY3JlYXRlRG9tKFwieGctcmVwbGF5XCIsJ1xcbiAgICAgICAgICA8c3ZnIGNsYXNzPVwieGdwbGF5ZXItcmVwbGF5LXN2Z1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjc4XCIgaGVpZ2h0PVwiNzhcIiB2aWV3Ym94PVwiMCAwIDc4IDc4XCI+XFxuICAgICAgICAgICAgPHBhdGggZD1cIicrby5yZXBsYXkrJ1wiPjwvcGF0aD5cXG4gICAgICAgICAgPC9zdmc+XFxuICAgICAgICAgIDx4Zy1yZXBsYXktdHh0IGNsYXNzPVwieGdwbGF5ZXItcmVwbGF5LXR4dFwiPumHjeaSrTwveGctcmVwbGF5LXR4dD5cXG4gICAgICAgICAgJyx7fSxcInhncGxheWVyLXJlcGxheVwiKSkucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1yZXBsYXktc3ZnXCIpO3ZhciBkPWUucm9vdDtkLmFwcGVuZENoaWxkKHIpLGUub24oXCJlbmRlZFwiLHApLChzfHxhKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLHQucmVtb3ZlQ2xhc3MoZCxcInJlcGxheVwiKSxlLnJlcGxheSgpfSkpLGUub25jZShcImRlc3Ryb3lcIiwoZnVuY3Rpb24gdCgpe2Uub2ZmKFwiZW5kZWRcIixwKSxlLm9mZihcImRlc3Ryb3lcIix0KX0pKX1mdW5jdGlvbiBwKCl7aWYoXCJpbWdcIj09PW4udHlwZSlhLnN0eWxlLmJhY2tncm91bmRJbWFnZT0ndXJsKFwiJytuLnVybC5yZXBsYXkrJ1wiKSc7ZWxzZXtyLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItcmVwbGF5LXR4dFwiKS50ZXh0Q29udGVudD1lLmxhbmcuUkVQTEFZO3ZhciBvPXIucXVlcnlTZWxlY3RvcihcInBhdGhcIiksaT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShvKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1wibm9uZVwiIT09aSYmby5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIixpKX1lLmNvbmZpZy5sb29wfHx0LmFkZENsYXNzKGQsXCJyZXBsYXlcIil9fSkpfSxcIi4vc3JjL2NvbnRyb2wvcm90YXRlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvcm90YXRlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHI9bigvKiEgLi4vcGxheWVyICovXCIuL3NyYy9wbGF5ZXIuanNcIiksaT0obz1yKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307aS5kZWZhdWx0Lmluc3RhbGwoXCJyb3RhdGVcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKHRoaXMuY29uZmlnLnJvdGF0ZSl7ITA9PT10aGlzLmNvbmZpZy5yb3RhdGUmJih0aGlzLmNvbmZpZy5yb3RhdGU9e30pO3ZhciB0PWkuZGVmYXVsdC51dGlsLG49dC5jcmVhdGVEb20oXCJ4Zy1yb3RhdGVcIiwnPHhnLWljb24gY2xhc3M9XCJ4Z3BsYXllci1pY29uIHhncGxheWVyLXJvdGF0ZS1pbWdcIj48L3hnLWljb24+Jyx7fSxcInhncGxheWVyLXJvdGF0ZVwiKSxvPWUuY29uZmlnLmxhbmcmJlwiemgtY25cIj09PWUuY29uZmlnLmxhbmc/XCLml4vovaxcIjpcIlJvdGF0ZVwiLHI9dC5jcmVhdGVEb20oXCJ4Zy10aXBzXCIsbyx7fSxcInhncGxheWVyLXRpcHNcIik7bi5hcHBlbmRDaGlsZChyKSxlLmNvbnRyb2xzLmFwcGVuZENoaWxkKG4pO3ZhciBhPTA7ZS5yb3RhdGU9ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06MSxuPWUucm9vdC5vZmZzZXRXaWR0aCxvPWUucm9vdC5vZmZzZXRIZWlnaHQ7ZS5jb25maWcucm90YXRlLmlubmVyUm90YXRlfHwoZS5yb290LnN0eWxlLndpZHRoPW8rXCJweFwiLGUucm9vdC5zdHlsZS5oZWlnaHQ9bitcInB4XCIpO3ZhciByPWUuY29uZmlnLnJvdGF0ZS5jbG9ja3dpc2U/MTotMSxpPXZvaWQgMDtpPS4yNT09PShhPShhKzErLjI1KnIqdCklMSl8fC43NT09PWE/KGUuY29uZmlnLnJvdGF0ZS5pbm5lclJvdGF0ZSwoby9uKS50b0ZpeGVkKDIpKToxLGUudmlkZW8uc3R5bGUudHJhbnNmb3JtT3JpZ2luPVwiY2VudGVyIGNlbnRlclwiLGUudmlkZW8uc3R5bGUudHJhbnNmb3JtPVwicm90YXRlKFwiK2ErXCJ0dXJuKSBzY2FsZShcIitpK1wiKVwiLGUudmlkZW8uc3R5bGUud2ViS2l0VHJhbnNmb3JtPVwicm90YXRlKFwiK2ErXCJ0dXJuKSBzY2FsZShcIitpK1wiKVwiLGUuZW1pdChcInJvdGF0ZVwiLDM2MCphKX0sbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLChmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxyLnN0eWxlLmxlZnQ9XCI1MCVcIjt2YXIgbj1yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG89ZS5yb290LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO24ucmlnaHQ+by5yaWdodCYmKHIuc3R5bGUubGVmdD0tbi5yaWdodCtvLnJpZ2h0KzE2K1wicHhcIil9KSksbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoZnVuY3Rpb24oKXtlLnJvdGF0ZSgpfSkpfX0pKX0sXCIuL3NyYy9jb250cm9sL3NjcmVlblNob3QuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NvbnRyb2wvc2NyZWVuU2hvdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1uKC8qISAuLi9wbGF5ZXIgKi9cIi4vc3JjL3BsYXllci5qc1wiKSxpPShvPXIpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtpLmRlZmF1bHQuaW5zdGFsbChcInNjcmVlblNob3RcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9aS5kZWZhdWx0LnV0aWw7aWYoZS5jb25maWcuc2NyZWVuU2hvdCl7dmFyIG49dC5jcmVhdGVEb20oXCJ4Zy1zY3JlZW5TaG90XCIsJzxwIGNsYXNzPVwibmFtZVwiPjxzcGFuPuaIquWbvjwvc3Bhbj48L3A+Jyx7dGFiaW5kZXg6MTF9LFwieGdwbGF5ZXItc2NyZWVuU2hvdFwiKSxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikscj1vLmdldENvbnRleHQoXCIyZFwiKSxhPW5ldyBJbWFnZTtvLndpZHRoPXRoaXMuY29uZmlnLndpZHRofHw2MDAsby5oZWlnaHQ9dGhpcy5jb25maWcuaGVpZ2h0fHwzMzcuNSxlLmNvbnRyb2xzLmFwcGVuZENoaWxkKG4pO1tcImNsaWNrXCIsXCJ0b3VjaHN0YXJ0XCJdLmZvckVhY2goKGZ1bmN0aW9uKHQpe24uYWRkRXZlbnRMaXN0ZW5lcih0LChmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxhLm9ubG9hZD0oci5kcmF3SW1hZ2UoZS52aWRlbywwLDAsby53aWR0aCxvLmhlaWdodCksYS5zZXRBdHRyaWJ1dGUoXCJjcm9zc09yaWdpblwiLFwiYW5vbnltb3VzXCIpLGEuc3JjPW8udG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpLnJlcGxhY2UoXCJpbWFnZS9wbmdcIixcImltYWdlL29jdGV0LXN0cmVhbVwiKSx2b2lkIGZ1bmN0aW9uKGUsdCl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7bi5ocmVmPWUsbi5kb3dubG9hZD10O3ZhciBvPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7by5pbml0TW91c2VFdmVudChcImNsaWNrXCIsITAsITEsd2luZG93LDAsMCwwLDAsMCwhMSwhMSwhMSwhMSwwLG51bGwpLG4uZGlzcGF0Y2hFdmVudChvKX0oYS5zcmMucmVwbGFjZSgvXmRhdGE6aW1hZ2VcXC9bXjtdKy8sXCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiKSxcIuaIquWbvi5wbmdcIikpfSkpfSkpfX0pKX0sXCIuL3NyYy9jb250cm9sL3RleHRUcmFjay5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL3RleHRUcmFjay5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwidGV4dFRyYWNrXCIsKGZ1bmN0aW9uKCl7aWYoLTEhPT1uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJDaHJvbWVcIikpe3ZhciBlPXRoaXMsdD1pLmRlZmF1bHQudXRpbCxuPShpLmRlZmF1bHQuc25pZmZlcix0LmNyZWF0ZURvbShcInhnLXRleHRUcmFja1wiLFwiXCIse3RhYmluZGV4Ojd9LFwieGdwbGF5ZXItdGV4dFRyYWNrXCIpKSxvPWUuY29udHJvbHMscj1lLmNvbmZpZy50ZXh0VHJhY2s7ciYmQXJyYXkuaXNBcnJheShyKSYmci5sZW5ndGg+MSYmKHQuYWRkQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItaXMtdGV4dFRyYWNrXCIpLGUub24oXCJjYW5wbGF5XCIsKGZ1bmN0aW9uKCl7dmFyIGk9W1wiPHVsPlwiXTtpLnB1c2goXCI8bGkgY2xhc3M9Jyd9Jz7lhbPpl608L2xpPlwiKSxyLmZvckVhY2goKGZ1bmN0aW9uKGUpe2kucHVzaChcIjxsaSBjbGFzcz0nXCIrKGUuZGVmYXVsdD9cInRleHRUcmFja1wiOlwiXCIpK1wiJz5cIitlLmxhYmVsK1wiPC9saT5cIil9KSk7dmFyIGE9ZS5jb25maWcubGFuZyYmXCJ6aC1jblwiPT09ZS5jb25maWcubGFuZz9cIuWtl+W5lVwiOlwiQ2FwdGlvblwiO2kucHVzaCgnPC91bD48cCBjbGFzcz1cIm5hbWVcIj48ZW0+JythK1wiPC9lbT48L3A+XCIpO3ZhciBzPW8ucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci10ZXh0VHJhY2tcIik7cz8ocy5pbm5lckhUTUw9aS5qb2luKFwiXCIpLHMucXVlcnlTZWxlY3RvcihcIi5uYW1lXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsKGZ1bmN0aW9uKG4pe24ucHJldmVudERlZmF1bHQoKSxuLnN0b3BQcm9wYWdhdGlvbigpLHQuYWRkQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItdGV4dFRyYWNrLWFjdGl2ZVwiKSxzLmZvY3VzKCl9KSkpOihuLmlubmVySFRNTD1pLmpvaW4oXCJcIiksbi5xdWVyeVNlbGVjdG9yKFwiLm5hbWVcIikuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwoZnVuY3Rpb24obyl7by5wcmV2ZW50RGVmYXVsdCgpLG8uc3RvcFByb3BhZ2F0aW9uKCksdC5hZGRDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci10ZXh0VHJhY2stYWN0aXZlXCIpLG4uZm9jdXMoKX0pKSxvLmFwcGVuZENoaWxkKG4pKX0pKSksW1widG91Y2hlbmRcIixcImNsaWNrXCJdLmZvckVhY2goKGZ1bmN0aW9uKG8pe24uYWRkRXZlbnRMaXN0ZW5lcihvLChmdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKTt2YXIgbz1uLnRhcmdldHx8bi5zcmNFbGVtZW50O2lmKG8mJlwibGlcIj09PW8udGFnTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpKXtBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG8ucGFyZW50Tm9kZS5jaGlsZE5vZGVzLChmdW5jdGlvbihlKXt0LnJlbW92ZUNsYXNzKGUsXCJ0ZXh0VHJhY2tcIil9KSksdC5hZGRDbGFzcyhvLFwidGV4dFRyYWNrXCIpO3ZhciBpPWUucm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIlRyYWNrXCIpO1wi5YWz6ZetXCI9PT1vLmlubmVySFRNTD8oaVswXS50cmFjay5tb2RlPVwiaGlkZGVuXCIsdC5yZW1vdmVDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci10ZXh0VHJhY2stYWN0aXZlXCIpKToodC5oYXNDbGFzcyhlLnJvb3QsXCJ4Z3BsYXllci10ZXh0VHJhY2stYWN0aXZlXCIpfHx0LmFkZENsYXNzKGUucm9vdCxcInhncGxheWVyLXRleHRUcmFjay1hY3RpdmVcIiksaVswXS50cmFjay5tb2RlPVwic2hvd2luZ1wiLHIuc29tZSgoZnVuY3Rpb24oZSl7aWYoZS5sYWJlbD09PW8uaW5uZXJIVE1MKXJldHVybiBpWzBdLnNyYz1lLnNyYyxlLmtpbmQmJihpWzBdLmtpbmQ9ZS5raW5kKSxpWzBdLmxhYmVsPWUubGFiZWwsZS5zcmNsYW5nJiYoaVswXS5zcmNsYW5nPWUuc3JjbGFuZyksITB9KSksZS5lbWl0KFwidGV4dFRyYWNrQ2hhbmdlXCIsby5pbm5lckhUTUwpKX19KSwhMSl9KSksbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLChmdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKSx0LnJlbW92ZUNsYXNzKGUucm9vdCxcInhncGxheWVyLXRleHRUcmFjay1hY3RpdmVcIil9KSl9fSkpfSxcIi4vc3JjL2NvbnRyb2wvdGltZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvY29udHJvbC90aW1lLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpLGk9KG89cikmJm8uX19lc01vZHVsZT9vOntkZWZhdWx0Om99O2kuZGVmYXVsdC5pbnN0YWxsKFwidGltZVwiLChmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1pLmRlZmF1bHQudXRpbCxuPXQuZm9ybWF0LG89dC5jcmVhdGVEb20oXCJ4Zy10aW1lXCIsXCI8c3Bhbj5cIisoZS5jdXJyZW50VGltZXx8bigwKSkrXCI8L3NwYW4+PGVtPlwiKyhlLmR1cmF0aW9ufHxuKDApKStcIjwvZW0+XCIse30sXCJ4Z3BsYXllci10aW1lXCIpO2UuY29udHJvbHMuYXBwZW5kQ2hpbGQobyk7dmFyIHI9ZnVuY3Rpb24oKXtcImF1ZGlvXCI9PT1lLnZpZGVvQ29uZmlnLm1lZGlhVHlwZSYmZS5pc1Byb2dyZXNzTW92aW5nJiZlLmRhc2h8fChvLmlubmVySFRNTD1cIjxzcGFuPlwiK24oZS5jdXJyZW50VGltZXx8MCkrXCI8L3NwYW4+PGVtPlwiK24oZS5kdXJhdGlvbikpfTtlLm9uKFwiZHVyYXRpb25jaGFuZ2VcIixyKSxlLm9uKFwidGltZXVwZGF0ZVwiLHIpLGUub25jZShcImRlc3Ryb3lcIiwoZnVuY3Rpb24gdCgpe2Uub2ZmKFwiZHVyYXRpb25jaGFuZ2VcIixyKSxlLm9mZihcInRpbWV1cGRhdGVcIixyKSxlLm9mZihcImRlc3Ryb3lcIix0KX0pKX0pKX0sXCIuL3NyYy9jb250cm9sL3ZvbHVtZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9jb250cm9sL3ZvbHVtZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1pKG4oLyohIC4uL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpKSxyPWkobigvKiEgLi4vdXRpbHMvc3ZnICovXCIuL3NyYy91dGlscy9zdmcuanNcIikpO2Z1bmN0aW9uIGkoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fW8uZGVmYXVsdC5pbnN0YWxsKFwidm9sdW1lXCIsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PW8uZGVmYXVsdC51dGlsLG49by5kZWZhdWx0LnNuaWZmZXI7ZnVuY3Rpb24gaSgpe2UuY29uZmlnLmF1dG9wbGF5JiZlLmNvbmZpZy5hdXRvcGxheU11dGVkP2Uudm9sdW1lPTA6ZS52b2x1bWU9ZS5jb25maWcudm9sdW1lfWUuY29uZmlnLmF1dG9wbGF5TXV0ZWQmJihlLmNvbmZpZy52b2x1bWU9ZS5jb25maWcuYXV0b3BsYXk/MDplLmNvbmZpZy52b2x1bWUpLGUub25jZShcImNhbnBsYXlcIixpKTt2YXIgYT1lLmNvbmZpZy52b2x1bWU7aWYoXCJtb2JpbGVcIiE9PW4uZGV2aWNlKXt2YXIgcz17bXV0ZWQ6XCJNOTIwLjQgNDM5LjgwOGwtMTA4LjU0NC0xMDkuMDU2LTcyLjcwNCA3Mi43MDQgMTA5LjU2OCAxMDguNTQ0LTEwOS4wNTYgMTA4LjU0NCA3Mi43MDQgNzIuNzA0IDEwOC4wMzItMTA5LjU2OCAxMDguNTQ0IDEwOS4wNTYgNzIuNzA0LTcyLjcwNC0xMDkuNTY4LTEwOC4wMzIgMTA5LjA1Ni0xMDguNTQ0LTcyLjcwNC03Mi43MDQtMTA4LjAzMiAxMDkuNTY4elwiLHNtYWxsOlwiTTc5NS42NDggNjkzLjI0OGwtNzIuNzA0LTcyLjcwNGMyNy43NTYtMjcuNzg5IDQ0LjkyMS02Ni4xNjIgNDQuOTIxLTEwOC41NDRzLTE3LjE2NS04MC43NTUtNDQuOTIyLTEwOC41NDZsMC4wMDIgMC4wMDIgNzIuNzA0LTcyLjcwNGM0Ni43MTMgNDYuMjM1IDc1LjYzOSAxMTAuMzYzIDc1LjYzOSAxODEuMjQ4cy0yOC45MjYgMTM1LjAxMy03NS42MTcgMTgxLjIyN2wtMC4wMjEgMC4wMjF6TTc5NS42NDggNjkzLjI0OGwtNzIuNzA0LTcyLjcwNGMyNy43NTYtMjcuNzg5IDQ0LjkyMS02Ni4xNjIgNDQuOTIxLTEwOC41NDRzLTE3LjE2NS04MC43NTUtNDQuOTIyLTEwOC41NDZsMC4wMDIgMC4wMDIgNzIuNzA0LTcyLjcwNGM0Ni43MTMgNDYuMjM1IDc1LjYzOSAxMTAuMzYzIDc1LjYzOSAxODEuMjQ4cy0yOC45MjYgMTM1LjAxMy03NS42MTcgMTgxLjIyN2wtMC4wMjEgMC4wMjF6XCIsbGFyZ2U6XCJNOTQwLjYzMiA4MzcuNjMybC03Mi4xOTItNzIuMTkyYzY1LjExNC02NC43NDUgMTA1LjQxMi0xNTQuMzg2IDEwNS40MTItMjUzLjQ0cy00MC4yOTktMTg4LjY5NS0xMDUuMzk2LTI1My40MjRsLTAuMDE2LTAuMDE2IDcyLjE5Mi03Mi4xOTJjODMuNjM5IDgzLjE5NyAxMzUuNDAxIDE5OC4zNyAxMzUuNDAxIDMyNS42MzJzLTUxLjc2MiAyNDIuNDM0LTEzNS4zODEgMzI1LjYxMmwtMC4wMjAgMC4wMjB6TTc5NS42NDggNjkzLjI0OGwtNzIuNzA0LTcyLjcwNGMyNy43NTYtMjcuNzg5IDQ0LjkyMS02Ni4xNjIgNDQuOTIxLTEwOC41NDRzLTE3LjE2NS04MC43NTUtNDQuOTIyLTEwOC41NDZsMC4wMDIgMC4wMDIgNzIuNzA0LTcyLjcwNGM0Ni43MTMgNDYuMjM1IDc1LjYzOSAxMTAuMzYzIDc1LjYzOSAxODEuMjQ4cy0yOC45MjYgMTM1LjAxMy03NS42MTcgMTgxLjIyN2wtMC4wMjEgMC4wMjF6XCJ9LGw9ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lP1wibXV0ZWRcIjplPC41P1wic21hbGxcIjpcImxhcmdlXCJ9LGM9c1tsKGEpXSx1PXNbbChhKV0sZD10LmNyZWF0ZURvbShcInhnLXZvbHVtZVwiLCc8eGctaWNvbiBjbGFzcz1cInhncGxheWVyLWljb25cIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxMDI0XCIgaGVpZ2h0PVwiMTAyNFwiIHZpZXdCb3g9XCIwIDAgMTAyNCAxMDI0XCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCB0cmFuc2Zvcm09XCJzY2FsZSgwLjAyMjA2MjUgMC4wMjIwNjI1KVwiIGQ9XCJNMzU4LjQgMzU4LjRoLTIwNC44djMwNy4yaDIwNC44bDI1NiAyNTZ2LTgxOS4ybC0yNTYgMjU2elwiPjwvcGF0aD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIHRyYW5zZm9ybT1cInNjYWxlKDAuMDIyMDYyNSAwLjAyMjA2MjUpXCIgZD1cIicrdSsnXCI+PC9wYXRoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hnLWljb24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhnLXNsaWRlciBjbGFzcz1cInhncGxheWVyLXNsaWRlclwiIHRhYmluZGV4PVwiMlwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eGctYmFyIGNsYXNzPVwieGdwbGF5ZXItYmFyXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eGctZHJhZyBjbGFzcz1cInhncGxheWVyLWRyYWdcIj48L3hnLWRyYWc+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveGctYmFyPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveGctc2xpZGVyPicse30sXCJ4Z3BsYXllci12b2x1bWVcIik7ZS5jb250cm9scy5hcHBlbmRDaGlsZChkKTt2YXIgcD12b2lkIDAsZj1kLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItc2xpZGVyXCIpLGg9ZC5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLWJhclwiKSxnPWQucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1kcmFnXCIpLHY9ZC5xdWVyeVNlbGVjdG9yKFwiLnhncGxheWVyLWljb25cIik7Zy5zdHlsZS5oZWlnaHQ9MTAwKmUuY29uZmlnLnZvbHVtZStcIiVcIjt2YXIgbT1kLnF1ZXJ5U2VsZWN0b3JBbGwoXCJwYXRoXCIpWzFdLHk9bmV3IHIuZGVmYXVsdCh7cHJvZ3Jlc3M6ZnVuY3Rpb24oZSx0KXt2YXIgbj15LnRvU1ZHU3RyaW5nKGUpO20uc2V0QXR0cmlidXRlKFwiZFwiLG4pLGM9bn0sZnJvbTpjLHRvOnMubGFyZ2V9KSxiPW51bGw7Zi52b2x1bWU9ZS5jb25maWcudm9sdW1lLFtcInRvdWNoc3RhcnRcIixcIm1vdXNlZG93blwiXS5mb3JFYWNoKChmdW5jdGlvbihuKXtoLmFkZEV2ZW50TGlzdGVuZXIobiwoZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksZS52aWRlby5tdXRlZD0hMSxmLmZvY3VzKCksdC5ldmVudChuKSxwPWguZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O24uY2xpZW50WDt2YXIgbz1uLmNsaWVudFkscj1nLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCxpPSExLGE9ZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCksdC5ldmVudChuKSxpPSEwO3ZhciBhPXItbi5jbGllbnRZK28scz1hL3A7Zy5zdHlsZS5oZWlnaHQ9YStcInB4XCIsZS52b2x1bWU9TWF0aC5tYXgoTWF0aC5taW4ocywxKSwuMDEpfSxzPWZ1bmN0aW9uIG4obyl7aWYoby5wcmV2ZW50RGVmYXVsdCgpLG8uc3RvcFByb3BhZ2F0aW9uKCksdC5ldmVudChvKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLGEpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsYSksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsbiksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLG4pLGJ8fChiPWguZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLCFpKXt2YXIgcj1iLmhlaWdodC0oby5jbGllbnRZLWIudG9wKSxzPXIvYi5oZWlnaHQ7Zy5zdHlsZS5oZWlnaHQ9citcInB4XCIsczw9MCYmKGUudm9sdW1lPjA/Zy52b2x1bWU9ZS52aWRlby52b2x1bWU6cz1nLnZvbHVtZSksZS52b2x1bWU9TWF0aC5tYXgoTWF0aC5taW4ocywxKSwuMDEpfWYudm9sdW1lPWUudm9sdW1lLGk9ITF9O3JldHVybiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLGEpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsYSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIscyksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLHMpLCExfSkpfSkpLFtcInRvdWNoc3RhcnRcIixcIm1vdXNlZG93blwiXS5mb3JFYWNoKChmdW5jdGlvbih0KXt2LmFkZEV2ZW50TGlzdGVuZXIodCwoZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksZS52aWRlby5tdXRlZD0hMSwwPT09ZS52b2x1bWU/ZS52b2x1bWU9Zi52b2x1bWU6ZS52b2x1bWU9MH0pKX0pKSx2LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsKGZ1bmN0aW9uKG4pe24ucHJldmVudERlZmF1bHQoKSxuLnN0b3BQcm9wYWdhdGlvbigpLHQuYWRkQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItdm9sdW1lLWFjdGl2ZVwiKSxkLmZvY3VzKCl9KSksZC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLChmdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKSx0LnJlbW92ZUNsYXNzKGUucm9vdCxcInhncGxheWVyLXZvbHVtZS1hY3RpdmVcIil9KSksZC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLChmdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCksbi5zdG9wUHJvcGFnYXRpb24oKSx0LnJlbW92ZUNsYXNzKGUucm9vdCxcInhncGxheWVyLXZvbHVtZS1hY3RpdmVcIil9KSk7dmFyIHg9bnVsbDtlLm9uKFwidm9sdW1lY2hhbmdlXCIsVCksZS5vbmNlKFwiZGVzdHJveVwiLChmdW5jdGlvbiB0KCl7ZS5vZmYoXCJjYW5wbGF5XCIsaSksZS5vZmYoXCJ2b2x1bWVjaGFuZ2VcIixUKSxlLm9mZihcImRlc3Ryb3lcIix0KX0pKX1lbHNle3ZhciB3PXttdXRlZDpcIk05MjAuNCA0MzkuODA4bC0xMDguNTQ0LTEwOS4wNTYtNzIuNzA0IDcyLjcwNCAxMDkuNTY4IDEwOC41NDQtMTA5LjA1NiAxMDguNTQ0IDcyLjcwNCA3Mi43MDQgMTA4LjAzMi0xMDkuNTY4IDEwOC41NDQgMTA5LjA1NiA3Mi43MDQtNzIuNzA0LTEwOS41NjgtMTA4LjAzMiAxMDkuMDU2LTEwOC41NDQtNzIuNzA0LTcyLjcwNC0xMDguMDMyIDEwOS41Njh6XCIsbGFyZ2U6XCJNOTQwLjYzMiA4MzcuNjMybC03Mi4xOTItNzIuMTkyYzY1LjExNC02NC43NDUgMTA1LjQxMi0xNTQuMzg2IDEwNS40MTItMjUzLjQ0cy00MC4yOTktMTg4LjY5NS0xMDUuMzk2LTI1My40MjRsLTAuMDE2LTAuMDE2IDcyLjE5Mi03Mi4xOTJjODMuNjM5IDgzLjE5NyAxMzUuNDAxIDE5OC4zNyAxMzUuNDAxIDMyNS42MzJzLTUxLjc2MiAyNDIuNDM0LTEzNS4zODEgMzI1LjYxMmwtMC4wMjAgMC4wMjB6TTc5NS42NDggNjkzLjI0OGwtNzIuNzA0LTcyLjcwNGMyNy43NTYtMjcuNzg5IDQ0LjkyMS02Ni4xNjIgNDQuOTIxLTEwOC41NDRzLTE3LjE2NS04MC43NTUtNDQuOTIyLTEwOC41NDZsMC4wMDIgMC4wMDIgNzIuNzA0LTcyLjcwNGM0Ni43MTMgNDYuMjM1IDc1LjYzOSAxMTAuMzYzIDc1LjYzOSAxODEuMjQ4cy0yOC45MjYgMTM1LjAxMy03NS42MTcgMTgxLjIyN2wtMC4wMjEgMC4wMjF6XCJ9LF89ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lP1wibXV0ZWRcIjpcImxhcmdlXCJ9LGs9d1tfKGEpXSxFPXdbXyhhKV0sQz10LmNyZWF0ZURvbShcInhnLXZvbHVtZVwiLCc8eGctaWNvbiBjbGFzcz1cInhncGxheWVyLWljb25cIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjEwMjRcIiBoZWlnaHQ9XCIxMDI0XCIgdmlld0JveD1cIjAgMCAxMDI0IDEwMjRcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggdHJhbnNmb3JtPVwic2NhbGUoMC4wMjIwNjI1IDAuMDIyMDYyNSlcIiBkPVwiTTM1OC40IDM1OC40aC0yMDQuOHYzMDcuMmgyMDQuOGwyNTYgMjU2di04MTkuMmwtMjU2IDI1NnpcIj48L3BhdGg+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIHRyYW5zZm9ybT1cInNjYWxlKDAuMDIyMDYyNSAwLjAyMjA2MjUpXCIgZD1cIicrRSsnXCI+PC9wYXRoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94Zy1pY29uPicse30sXCJ4Z3BsYXllci12b2x1bWVcIik7ZS5jb250cm9scy5hcHBlbmRDaGlsZChDKTt2YXIgUz1DLnF1ZXJ5U2VsZWN0b3IoXCIueGdwbGF5ZXItaWNvblwiKSxQPUMucXVlcnlTZWxlY3RvckFsbChcInBhdGhcIilbMV0saj1uZXcgci5kZWZhdWx0KHtwcm9ncmVzczpmdW5jdGlvbihlLHQpe3ZhciBuPWoudG9TVkdTdHJpbmcoZSk7UC5zZXRBdHRyaWJ1dGUoXCJkXCIsbiksaz1ufSxmcm9tOmssdG86dy5sYXJnZX0pO1tcInRvdWNoZW5kXCIsXCJtb3VzZWRvd25cIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7Uy5hZGRFdmVudExpc3RlbmVyKHQsKGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLGUudmlkZW8ubXV0ZWQ/KGUudmlkZW8ubXV0ZWQ9ITEsZS52b2x1bWU9MSxqLnJlc2V0KHcubGFyZ2Usdy5tdXRlZCksaz13LmxhcmdlKTooZS52b2x1bWU9MCxlLnZpZGVvLm11dGVkPSEwLGoucmVzZXQody5tdXRlZCx3LmxhcmdlKSxrPXcubXV0ZWQpfSkpfSkpfWZ1bmN0aW9uIFQoKXt4JiZjbGVhclRpbWVvdXQoeCkseD1zZXRUaW1lb3V0KChmdW5jdGlvbigpe3kucmVzZXQoc1tsKGUudm9sdW1lKV0sYyksYz1zW2xbZS52b2x1bWVdXSxwfHwocD1oLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodHx8NzYpLGcuc3R5bGUuaGVpZ2h0PWUudm9sdW1lKnArXCJweFwifSksNTApfX0pKX0sXCIuL3NyYy9lcnJvci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9lcnJvci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKC8qISAuLi9wYWNrYWdlLmpzb24gKi9cIi4vcGFja2FnZS5qc29uXCIpO2Z1bmN0aW9uIHIoZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfXZhciBpPXtuZXR3b3JrOntjb2RlOjEsbXNnOlwi6KeG6aKR5LiL6L296ZSZ6K+vXCIscmVtYXJrOlwi5Y+q6KaB6KeG6aKR5LiL6L296ZSZ6K+v5bCx5L2/55So5q2k57G75Z6L77yM5peg6K665pivdmlkZW/mnKzouqvnmoTotoXml7bov5jmmK94aHLnmoTliIbmrrXor7fmsYLotoXml7bmiJbogIXotYTmupDkuI3lrZjlnKhcIn0sbXNlOntjb2RlOjIsbXNnOlwi5rWB6L+95Yqg6ZSZ6K+vXCIscmVtYXJrOlwi6L+95Yqg5rWB55qE5pe25YCZ5aaC5p6c57G75Z6L5LiN5a+544CB5peg5rOV6KKr5q2j56Gu6Kej56CB5YiZ5Lya6Kem5Y+R5q2k57G76ZSZ6K+vXCJ9LHBhcnNlOntjb2RlOjMsbXNnOlwi6Kej5p6Q6ZSZ6K+vXCIscmVtYXJrOlwibXA044CBaGxz44CBZmx25oiR5Lus6YO95piv5L2/55SoanPov5vooYzmoLzlvI/op6PmnpDvvIzlpoLmnpzop6PmnpDlpLHotKXliJnkvJrop6blj5HmraTnsbvplJnor69cIn0sZm9ybWF0Ontjb2RlOjQsbXNnOlwi5qC85byP6ZSZ6K+vXCIscmVtYXJrOlwi5aaC5p6c5rWP6KeI5Zmo5LiN5pSv5oyB55qE5qC85byP5a+86Ie05pKt5pS+6ZSZ6K+vXCJ9LGRlY29kZXI6e2NvZGU6NSxtc2c6XCLop6PnoIHplJnor69cIixyZW1hcms6XCLmtY/op4jlmajop6PnoIHlvILluLjkvJrmipvlh7rmraTnsbvlnovplJnor69cIn0scnVudGltZTp7Y29kZTo2LG1zZzpcIuivreazlemUmeivr1wiLHJlbWFyazpcIuaSreaUvuWZqOivreazlemUmeivr1wifSx0aW1lb3V0Ontjb2RlOjcsbXNnOlwi5pKt5pS+6LaF5pe2XCIscmVtYXJrOlwi5pKt5pS+6L+H56iL5Lit5peg5rOV5q2j5bi46K+35rGC5LiL5LiA5Liq5YiG5q615a+86Ie05pKt5pS+5Lit5patXCJ9LG90aGVyOntjb2RlOjgsbXNnOlwi5YW25LuW6ZSZ6K+vXCIscmVtYXJrOlwi5LiN5Y+v55+l55qE6ZSZ6K+v5oiW6KKr5b+955Wl55qE6ZSZ6K+v57G75Z6LXCJ9fTt0LmRlZmF1bHQ9ZnVuY3Rpb24gZSh0LG4sYSxzLGwsYyx1LGQpe3ZhciBwPWFyZ3VtZW50cy5sZW5ndGg+OCYmdm9pZCAwIT09YXJndW1lbnRzWzhdP2FyZ3VtZW50c1s4XTp7bGluZTpcIlwiLGhhbmRsZTpcIlwiLG1zZzpcIlwiLHZlcnNpb246XCJcIn07cih0aGlzLGUpO3ZhciBmPXt9O3JldHVybiBmLnBsYXllclZlcnNpb249by52ZXJzaW9uLGYuZXJyb3JUeXBlPXQsZi5kb21haW49ZG9jdW1lbnQuZG9tYWluLGYuZHVyYXRpb249YSxmLmN1cnJlbnRUaW1lPW4sZi5uZXR3b3JrU3RhdGU9cyxmLnJlYWR5U3RhdGU9bCxmLmN1cnJlbnRTcmM9dSxmLnNyYz1jLGYuZW5kZWQ9ZCxmLmVycmQ9cCxmLmV4PShpW3RdfHx7fSkubXNnLGZ9LGUuZXhwb3J0cz10LmRlZmF1bHR9LFwiLi9zcmMvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89TShuKC8qISAuL3BsYXllciAqL1wiLi9zcmMvcGxheWVyLmpzXCIpKSxyPU0obigvKiEgLi9jb250cm9sL3ZvbHVtZS5qcyAqL1wiLi9zcmMvY29udHJvbC92b2x1bWUuanNcIikpLGk9TShuKC8qISAuL2NvbnRyb2wvdGltZS5qcyAqL1wiLi9zcmMvY29udHJvbC90aW1lLmpzXCIpKSxhPU0obigvKiEgLi9jb250cm9sL3RleHRUcmFjay5qcyAqL1wiLi9zcmMvY29udHJvbC90ZXh0VHJhY2suanNcIikpLHM9TShuKC8qISAuL2NvbnRyb2wvc2NyZWVuU2hvdC5qcyAqL1wiLi9zcmMvY29udHJvbC9zY3JlZW5TaG90LmpzXCIpKSxsPU0obigvKiEgLi9jb250cm9sL3JvdGF0ZS5qcyAqL1wiLi9zcmMvY29udHJvbC9yb3RhdGUuanNcIikpLGM9TShuKC8qISAuL2NvbnRyb2wvcmVwbGF5LmpzICovXCIuL3NyYy9jb250cm9sL3JlcGxheS5qc1wiKSksdT1NKG4oLyohIC4vY29udHJvbC9wcm9ncmVzcy5qcyAqL1wiLi9zcmMvY29udHJvbC9wcm9ncmVzcy5qc1wiKSksZD1NKG4oLyohIC4vY29udHJvbC9wb3N0ZXIuanMgKi9cIi4vc3JjL2NvbnRyb2wvcG9zdGVyLmpzXCIpKSxwPU0obigvKiEgLi9jb250cm9sL3BsYXlOZXh0LmpzICovXCIuL3NyYy9jb250cm9sL3BsYXlOZXh0LmpzXCIpKSxmPU0obigvKiEgLi9jb250cm9sL3BsYXliYWNrUmF0ZS5qcyAqL1wiLi9zcmMvY29udHJvbC9wbGF5YmFja1JhdGUuanNcIikpLGg9TShuKC8qISAuL2NvbnRyb2wvcGxheS5qcyAqL1wiLi9zcmMvY29udHJvbC9wbGF5LmpzXCIpKSxnPU0obigvKiEgLi9jb250cm9sL3BpcC5qcyAqL1wiLi9zcmMvY29udHJvbC9waXAuanNcIikpLHY9TShuKC8qISAuL2NvbnRyb2wvcGMuanMgKi9cIi4vc3JjL2NvbnRyb2wvcGMuanNcIikpLG09TShuKC8qISAuL2NvbnRyb2wvbW9iaWxlLmpzICovXCIuL3NyYy9jb250cm9sL21vYmlsZS5qc1wiKSkseT1NKG4oLyohIC4vY29udHJvbC9sb2dnZXIuanMgKi9cIi4vc3JjL2NvbnRyb2wvbG9nZ2VyLmpzXCIpKSxiPU0obigvKiEgLi9jb250cm9sL2xvY2FsUHJldmlldy5qcyAqL1wiLi9zcmMvY29udHJvbC9sb2NhbFByZXZpZXcuanNcIikpLHg9TShuKC8qISAuL2NvbnRyb2wvbG9hZGluZy5qcyAqL1wiLi9zcmMvY29udHJvbC9sb2FkaW5nLmpzXCIpKSx3PU0obigvKiEgLi9jb250cm9sL2kxOG4uanMgKi9cIi4vc3JjL2NvbnRyb2wvaTE4bi5qc1wiKSksXz1NKG4oLyohIC4vY29udHJvbC9mdWxsc2NyZWVuLmpzICovXCIuL3NyYy9jb250cm9sL2Z1bGxzY3JlZW4uanNcIikpLGs9TShuKC8qISAuL2NvbnRyb2wvZmxleC5qcyAqL1wiLi9zcmMvY29udHJvbC9mbGV4LmpzXCIpKSxFPU0obigvKiEgLi9jb250cm9sL2Vycm9yLmpzICovXCIuL3NyYy9jb250cm9sL2Vycm9yLmpzXCIpKSxDPU0obigvKiEgLi9jb250cm9sL2Rvd25sb2FkLmpzICovXCIuL3NyYy9jb250cm9sL2Rvd25sb2FkLmpzXCIpKSxTPU0obigvKiEgLi9jb250cm9sL2RlZmluaXRpb24uanMgKi9cIi4vc3JjL2NvbnRyb2wvZGVmaW5pdGlvbi5qc1wiKSksUD1NKG4oLyohIC4vY29udHJvbC9kYW5tdS5qcyAqL1wiLi9zcmMvY29udHJvbC9kYW5tdS5qc1wiKSksaj1NKG4oLyohIC4vY29udHJvbC9jc3NGdWxsc2NyZWVuLmpzICovXCIuL3NyYy9jb250cm9sL2Nzc0Z1bGxzY3JlZW4uanNcIikpLFQ9TShuKC8qISAuL2NvbnRyb2wvY29sbGVjdC5qcyAqL1wiLi9zcmMvY29udHJvbC9jb2xsZWN0LmpzXCIpKTtmdW5jdGlvbiBNKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1uKC8qISAuL3N0eWxlL2luZGV4LnNjc3MgKi9cIi4vc3JjL3N0eWxlL2luZGV4LnNjc3NcIik7dmFyIE89e307ZnVuY3Rpb24gTChlLHQsbil7dmFyIG89ZTt0Lm1hcCgoZnVuY3Rpb24oZSxyKXtvW2VdPXI9PXQubGVuZ3RoLTE/bjpvW2VdfHx7fSxvPW9bZV19KSl9TChPLFtcImNvbnRyb2xcIixcImNvbGxlY3RcIl0sVC5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwiY3NzRnVsbHNjcmVlblwiXSxqLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJkYW5tdVwiXSxQLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJkZWZpbml0aW9uXCJdLFMuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcImRvd25sb2FkXCJdLEMuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcImVycm9yXCJdLEUuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcImZsZXhcIl0say5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwiZnVsbHNjcmVlblwiXSxfLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJpMThuXCJdLHcuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcImxvYWRpbmdcIl0seC5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwibG9jYWxQcmV2aWV3XCJdLGIuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcImxvZ2dlclwiXSx5LmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJtb2JpbGVcIl0sbS5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwicGNcIl0sdi5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwicGlwXCJdLGcuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcInBsYXlcIl0saC5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwicGxheWJhY2tSYXRlXCJdLGYuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcInBsYXlOZXh0XCJdLHAuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcInBvc3RlclwiXSxkLmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJwcm9ncmVzc1wiXSx1LmRlZmF1bHQpLEwoTyxbXCJjb250cm9sXCIsXCJyZXBsYXlcIl0sYy5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwicm90YXRlXCJdLGwuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcInNjcmVlblNob3RcIl0scy5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwidGV4dFRyYWNrXCJdLGEuZGVmYXVsdCksTChPLFtcImNvbnRyb2xcIixcInRpbWVcIl0saS5kZWZhdWx0KSxMKE8sW1wiY29udHJvbFwiLFwidm9sdW1lXCJdLHIuZGVmYXVsdCksdC5kZWZhdWx0PW8uZGVmYXVsdCxlLmV4cG9ydHM9dC5kZWZhdWx0fSxcIi4vc3JjL3BsYXllci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvcGxheWVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpLHI9ZnVuY3Rpb24gZSh0LG4sbyl7bnVsbD09PXQmJih0PUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIHI9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LG4pO2lmKHZvaWQgMD09PXIpe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOmUoaSxuLG8pfWlmKFwidmFsdWVcImluIHIpcmV0dXJuIHIudmFsdWU7dmFyIGE9ci5nZXQ7cmV0dXJuIHZvaWQgMCE9PWE/YS5jYWxsKG8pOnZvaWQgMH0saT1wKG4oLyohIC4vcHJveHkgKi9cIi4vc3JjL3Byb3h5LmpzXCIpKSxhPXAobigvKiEgLi91dGlscy91dGlsICovXCIuL3NyYy91dGlscy91dGlsLmpzXCIpKSxzPXAobigvKiEgLi91dGlscy9kYXRhYmFzZSAqL1wiLi9zcmMvdXRpbHMvZGF0YWJhc2UuanNcIikpLGw9cChuKC8qISAuL3V0aWxzL3NuaWZmZXIgKi9cIi4vc3JjL3V0aWxzL3NuaWZmZXIuanNcIikpLGM9cChuKC8qISAuL2Vycm9yICovXCIuL3NyYy9lcnJvci5qc1wiKSksdT1wKG4oLyohIGRyYWdnYWJpbGx5ICovXCIuL25vZGVfbW9kdWxlcy9kcmFnZ2FiaWxseS9kcmFnZ2FiaWxseS5qc1wiKSksZD1uKC8qISAuLi9wYWNrYWdlLmpzb24gKi9cIi4vcGFja2FnZS5qc29uXCIpO2Z1bmN0aW9uIHAoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIGYoZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH12YXIgaD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIG49Zih0aGlzLCh0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5jYWxsKHRoaXMsZSkpO2lmKG4uY29uZmlnPWEuZGVmYXVsdC5kZWVwQ29weSh7d2lkdGg6NjAwLGhlaWdodDozMzcuNSxpZ25vcmVzOltdLHdoaXRlbGlzdDpbXSxsYW5nOihkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKXx8bmF2aWdhdG9yLmxhbmd1YWdlfHxcInpoLWNuXCIpLnRvTG9jYWxlTG93ZXJDYXNlKCksaW5hY3RpdmU6M2UzLHZvbHVtZTouNixjb250cm9sczohMCxjb250cm9sc0xpc3Q6W1wibm9kb3dubG9hZFwiXX0sZSksbi52ZXJzaW9uPWQudmVyc2lvbixuLnVzZXJUaW1lcj1udWxsLG4ud2FpdFRpbWVyPW51bGwsbi5kYXRhYmFzZT1uZXcgcy5kZWZhdWx0LG4uaGlzdG9yeT1bXSxuLmlzUHJvZ3Jlc3NNb3Zpbmc9ITEsbi5yb290PWEuZGVmYXVsdC5maW5kRG9tKGRvY3VtZW50LFwiI1wiK24uY29uZmlnLmlkKSxuLmNvbnRyb2xzPWEuZGVmYXVsdC5jcmVhdGVEb20oXCJ4Zy1jb250cm9sc1wiLFwiXCIse3Vuc2VsZWN0YWJsZTpcIm9uXCIsb25zZWxlY3RzdGFydDpcInJldHVybiBmYWxzZVwifSxcInhncGxheWVyLWNvbnRyb2xzXCIpLCFuLnJvb3Qpe3ZhciBvPW4uY29uZmlnLmVsO2lmKCFvfHwxIT09by5ub2RlVHlwZSlyZXR1cm4gbi5lbWl0KFwiZXJyb3JcIixuZXcgYy5kZWZhdWx0KFwidXNlXCIsbi5jb25maWcudmlkLHtsaW5lOjMyLGhhbmRsZTpcIkNvbnN0cnVjdG9yXCIsbXNnOlwiY29udGFpbmVyIGlkIGNhbid0IGJlIGVtcHR5XCJ9KSksITEsZihuLCExKTtuLnJvb3Q9b31pZihhLmRlZmF1bHQuYWRkQ2xhc3Mobi5yb290LFwieGdwbGF5ZXIgeGdwbGF5ZXItXCIrbC5kZWZhdWx0LmRldmljZStcIiB4Z3BsYXllci1ub3N0YXJ0IFwiKyhuLmNvbmZpZy5jb250cm9scz9cIlwiOlwibm8tY29udHJvbHNcIikpLG4ucm9vdC5hcHBlbmRDaGlsZChuLmNvbnRyb2xzKSxuLmNvbmZpZy5mbHVpZD8obi5yb290LnN0eWxlW1wibWF4LXdpZHRoXCJdPVwiMTAwJVwiLG4ucm9vdC5zdHlsZS53aWR0aD1cIjEwMCVcIixuLnJvb3Quc3R5bGUuaGVpZ2h0PVwiMFwiLG4ucm9vdC5zdHlsZVtcInBhZGRpbmctdG9wXCJdPTEwMCpuLmNvbmZpZy5oZWlnaHQvbi5jb25maWcud2lkdGgrXCIlXCIsbi52aWRlby5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIsbi52aWRlby5zdHlsZS50b3A9XCIwXCIsbi52aWRlby5zdHlsZS5sZWZ0PVwiMFwiKToobi5yb290LnN0eWxlLndpZHRoPW4uY29uZmlnLndpZHRoK1wicHhcIixuLnJvb3Quc3R5bGUuaGVpZ2h0PW4uY29uZmlnLmhlaWdodCtcInB4XCIpLG4uY29uZmlnLmV4ZWNCZWZvcmVQbHVnaW5zQ2FsbCYmbi5jb25maWcuZXhlY0JlZm9yZVBsdWdpbnNDYWxsLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UuY2FsbChuLG4pfSkpLG4uY29uZmlnLmNvbnRyb2xTdHlsZSYmXCJTdHJpbmdcIj09PWEuZGVmYXVsdC50eXBlT2Yobi5jb25maWcuY29udHJvbFN0eWxlKSl7dmFyIHI9bjtmZXRjaChyLmNvbmZpZy5jb250cm9sU3R5bGUse21ldGhvZDpcIkdFVFwiLGhlYWRlcnM6e0FjY2VwdDpcImFwcGxpY2F0aW9uL2pzb25cIn19KS50aGVuKChmdW5jdGlvbihlKXtlLm9rJiZlLmpzb24oKS50aGVuKChmdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gZSllLmhhc093blByb3BlcnR5KHQpJiYoci5jb25maWdbdF09ZVt0XSk7ci5wbHVnaW5zQ2FsbCgpfSkpfSkpLmNhdGNoKChmdW5jdGlvbihlKXtjb25zb2xlLmxvZyhcIkZldGNo6ZSZ6K+vOlwiK2UpfSkpfWVsc2Ugbi5wbHVnaW5zQ2FsbCgpO24uZXYuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQ9T2JqZWN0LmtleXMoZSlbMF0sbz1uW2VbdF1dO28mJm4ub24odCxvKX0pKSxbXCJmb2N1c1wiLFwiYmx1clwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtuLm9uKGUsbltcIm9uXCIrZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnNsaWNlKDEpXSl9KSk7dmFyIGk9bjtyZXR1cm4gbi5tb3VzZW1vdmVGdW5jPWZ1bmN0aW9uKCl7aS5lbWl0KFwiZm9jdXNcIiksaS5jb25maWcuY2xvc2VGb2N1c1ZpZGVvRm9jdXN8fGkudmlkZW8uZm9jdXMoKX0sbi5yb290LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixuLm1vdXNlbW92ZUZ1bmMpLG4ucGxheUZ1bmM9ZnVuY3Rpb24oKXtpLmVtaXQoXCJmb2N1c1wiKSxpLmNvbmZpZy5jbG9zZVBsYXlWaWRlb0ZvY3VzfHxpLnZpZGVvLmZvY3VzKCl9LGkub25jZShcInBsYXlcIixuLnBsYXlGdW5jKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe24uZW1pdChcInJlYWR5XCIpfSksMCksbi5jb25maWcua2V5U2hvcnRjdXQmJlwib25cIiE9PW4uY29uZmlnLmtleVNob3J0Y3V0fHxbXCJ2aWRlb1wiLFwiY29udHJvbHNcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7aVtlXS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLChmdW5jdGlvbihlKXtpLm9uS2V5ZG93bihlLGkpfSkpfSkpLG4uY29uZmlnLnZpZGVvSW5pdCYmYS5kZWZhdWx0Lmhhc0NsYXNzKG4ucm9vdCxcInhncGxheWVyLW5vc3RhcnRcIikmJm4uc3RhcnQoKSxufXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LGUpLG8odCxbe2tleTpcInN0YXJ0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnRoaXMuY29uZmlnLnVybCxvPXRoaXMucm9vdCxyPXRoaXM7biYmXCJcIiE9PW58fHRoaXMuZW1pdChcInVybE51bGxcIiksdGhpcy5sb2dQYXJhbXMucGxheVNyYz1uLHRoaXMuY2FuUGxheUZ1bmM9ZnVuY3Rpb24oKXt2YXIgZT1yLnZpZGVvLnBsYXkoKTt2b2lkIDAhPT1lJiZlJiZlLnRoZW4oKGZ1bmN0aW9uKCl7ci5lbWl0KFwiYXV0b3BsYXkgc3RhcnRlZFwiKX0pKS5jYXRjaCgoZnVuY3Rpb24oKXtyLmVtaXQoXCJhdXRvcGxheSB3YXMgcHJldmVudGVkXCIpLHQudXRpbC5hZGRDbGFzcyhyLnJvb3QsXCJ4Z3BsYXllci1pcy1hdXRvcGxheVwiKX0pKSxyLm9mZihcImNhbnBsYXlcIixyLmNhblBsYXlGdW5jKX0sXCJTdHJpbmdcIj09PWEuZGVmYXVsdC50eXBlT2Yobik/dGhpcy52aWRlby5zcmM9bjpuLmZvckVhY2goKGZ1bmN0aW9uKHQpe2UudmlkZW8uYXBwZW5kQ2hpbGQoYS5kZWZhdWx0LmNyZWF0ZURvbShcInNvdXJjZVwiLFwiXCIse3NyYzpcIlwiK3Quc3JjLHR5cGU6XCJcIisodC50eXBlfHxcIlwiKX0pKX0pKSx0aGlzLmxvZ1BhcmFtcy5wdD0obmV3IERhdGUpLmdldFRpbWUoKSx0aGlzLmxvZ1BhcmFtcy52dD10aGlzLmxvZ1BhcmFtcy5wdCx0aGlzLmxvYWRlZGRhdGFGdW5jPWZ1bmN0aW9uKCl7ci5sb2dQYXJhbXMudnQ9KG5ldyBEYXRlKS5nZXRUaW1lKCksci5sb2dQYXJhbXMucHQ+ci5sb2dQYXJhbXMudnQmJihyLmxvZ1BhcmFtcy5wdD1yLmxvZ1BhcmFtcy52dCksci5sb2dQYXJhbXMudmQ9ci52aWRlby5kdXJhdGlvbn0sdGhpcy5vbmNlKFwibG9hZGVkZGF0YVwiLHRoaXMubG9hZGVkZGF0YUZ1bmMpLHRoaXMuY29uZmlnLmF1dG9wbGF5JiZ0aGlzLm9uKFwiY2FucGxheVwiLHRoaXMuY2FuUGxheUZ1bmMpLG8uaW5zZXJ0QmVmb3JlKHRoaXMudmlkZW8sby5maXJzdENoaWxkKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe2UuZW1pdChcImNvbXBsZXRlXCIpfSksMSl9fSx7a2V5OlwicmVsb2FkXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnZpZGVvLmxvYWQoKSx0aGlzLnJlbG9hZEZ1bmM9ZnVuY3Rpb24oKXt0aGlzLnBsYXkoKX0sdGhpcy5vbmNlKFwibG9hZGVkZGF0YVwiLHRoaXMucmVsb2FkRnVuYyl9fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPSEoYXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0pfHxhcmd1bWVudHNbMF0sbz10aGlzLGk9dGhpcy5yb290LnBhcmVudE5vZGU7Zm9yKHZhciBhIGluIGNsZWFySW50ZXJ2YWwodGhpcy5idWxsZXRSZXNpemVUaW1lciksdGhpcy5faW50ZXJ2YWwpY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbFthXSksdGhpcy5faW50ZXJ2YWxbYV09bnVsbDtmdW5jdGlvbiBzKCl7Zm9yKHZhciBlIGluIHRoaXMuZW1pdChcImRlc3Ryb3lcIiksdGhpcy52aWRlby5yZW1vdmVBdHRyaWJ1dGUoXCJzcmNcIiksdGhpcy52aWRlby5sb2FkKCksbiYmaS5yZW1vdmVDaGlsZCh0aGlzLnJvb3QpLHRoaXMpZGVsZXRlIHRoaXNbZV07dGhpcy5vZmYoXCJwYXVzZVwiLHMpfXRoaXMuZXYuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIG49T2JqZWN0LmtleXModClbMF0sbz1lW3Rbbl1dO28mJmUub2ZmKG4sbyl9KSksdGhpcy5sb2FkZWRkYXRhRnVuYyYmdGhpcy5vZmYoXCJsb2FkZWRkYXRhXCIsdGhpcy5sb2FkZWRkYXRhRnVuYyksdGhpcy5yZWxvYWRGdW5jJiZ0aGlzLm9mZihcImxvYWRlZGRhdGFcIix0aGlzLnJlbG9hZEZ1bmMpLHRoaXMucmVwbGF5RnVuYyYmdGhpcy5vZmYoXCJwbGF5XCIsdGhpcy5yZXBsYXlGdW5jKSx0aGlzLnBsYXlGdW5jJiZ0aGlzLm9mZihcInBsYXlcIix0aGlzLnBsYXlGdW5jKSxbXCJmb2N1c1wiLFwiYmx1clwiXS5mb3JFYWNoKChmdW5jdGlvbih0KXtlLm9mZih0LGVbXCJvblwiK3QuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKV0pfSkpLHRoaXMuY29uZmlnLmtleVNob3J0Y3V0JiZcIm9uXCIhPT10aGlzLmNvbmZpZy5rZXlTaG9ydGN1dHx8W1widmlkZW9cIixcImNvbnRyb2xzXCJdLmZvckVhY2goKGZ1bmN0aW9uKHQpe2VbdF0mJmVbdF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwoZnVuY3Rpb24oZSl7by5vbktleWRvd24oZSxvKX0pKX0pKSx0aGlzLnBhdXNlZD9zLmNhbGwodGhpcyk6KHRoaXMucGF1c2UoKSx0aGlzLm9uY2UoXCJwYXVzZVwiLHMpKSxyKHQucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImRlc3Ryb3lcIix0aGlzKS5jYWxsKHRoaXMpfX0se2tleTpcInJlcGxheVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMuX3JlcGxheTthLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5yb290LFwieGdwbGF5ZXItZW5kZWRcIiksdGhpcy5sb2dQYXJhbXM9e2JjOjAsYnVfYWN1X3Q6MCxwbGF5ZWQ6W10scHQ6KG5ldyBEYXRlKS5nZXRUaW1lKCksdnQ6KG5ldyBEYXRlKS5nZXRUaW1lKCksdmQ6MH0sdGhpcy5sb2dQYXJhbXMucHQ9KG5ldyBEYXRlKS5nZXRUaW1lKCksdGhpcy5sb2dQYXJhbXMudnQ9dGhpcy5sb2dQYXJhbXMucHQsdGhpcy5yZXBsYXlGdW5jPWZ1bmN0aW9uKCl7ZS5sb2dQYXJhbXMudnQ9KG5ldyBEYXRlKS5nZXRUaW1lKCksZS5sb2dQYXJhbXMucHQ+ZS5sb2dQYXJhbXMudnQmJihlLmxvZ1BhcmFtcy5wdD1lLmxvZ1BhcmFtcy52dCksZS5sb2dQYXJhbXMudmQ9ZS52aWRlby5kdXJhdGlvbn0sdGhpcy5vbmNlKFwicGxheVwiLHRoaXMucmVwbGF5RnVuYyksdGhpcy5sb2dQYXJhbXMucGxheVNyYz10aGlzLnZpZGVvLmN1cnJlbnRTcmMsdCYmdCBpbnN0YW5jZW9mIEZ1bmN0aW9uP3QoKToodGhpcy5jdXJyZW50VGltZT0wLHRoaXMucGxheSgpKX19LHtrZXk6XCJwbHVnaW5zQ2FsbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPXRoaXM7aWYodC5wbHVnaW5zKXt2YXIgbz10aGlzLmNvbmZpZy5pZ25vcmVzO09iamVjdC5rZXlzKHQucGx1Z2lucykuZm9yRWFjaCgoZnVuY3Rpb24ocil7dmFyIGk9dC5wbHVnaW5zW3JdO28uc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuIHI9PT1lfSkpfHwoW1wicGNcIixcInRhYmxldFwiLFwibW9iaWxlXCJdLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09cn0pKT9yPT09bC5kZWZhdWx0LmRldmljZSYmc2V0VGltZW91dCgoZnVuY3Rpb24oKXtpLmNhbGwobixuKX0pLDApOmkuY2FsbChlLGUpKX0pKX19fSx7a2V5OlwiZ2V0UElQXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnJvb3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksdD1lLnRvcCxuPWUubGVmdCxvPWEuZGVmYXVsdC5jcmVhdGVEb20oXCJ4Zy1waXAtbGF5XCIsXCI8ZGl2PjwvZGl2PlwiLHt9LFwieGdwbGF5ZXItcGlwLWxheVwiKTt0aGlzLnJvb3QuYXBwZW5kQ2hpbGQobyk7dmFyIHI9YS5kZWZhdWx0LmNyZWF0ZURvbShcInhnLXBpcC1kcmFnXCIsJzxkaXYgY2xhc3M9XCJkcmFnLWhhbmRsZVwiPjxzcGFuPueCueWHu+aMieS9j+WPr+aLluWKqOinhumikTwvc3Bhbj48L2Rpdj4nLHt0YWJpbmRleDo5fSxcInhncGxheWVyLXBpcC1kcmFnXCIpO3RoaXMucm9vdC5hcHBlbmRDaGlsZChyKTtuZXcgdS5kZWZhdWx0KFwiLnhncGxheWVyXCIse2hhbmRsZTpcIi5kcmFnLWhhbmRsZVwifSk7YS5kZWZhdWx0LmFkZENsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLXBpcC1hY3RpdmVcIiksdGhpcy5yb290LnN0eWxlLnJpZ2h0PTAsdGhpcy5yb290LnN0eWxlLmJvdHRvbT1cIjIwMHB4XCIsdGhpcy5yb290LnN0eWxlLnRvcD1cIlwiLHRoaXMucm9vdC5zdHlsZS5sZWZ0PVwiXCIsdGhpcy5jb25maWcuZmx1aWQmJih0aGlzLnJvb3Quc3R5bGVbXCJwYWRkaW5nLXRvcFwiXT1cIlwiKTt2YXIgaT10aGlzO1tcImNsaWNrXCIsXCJ0b3VjaHN0YXJ0XCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe28uYWRkRXZlbnRMaXN0ZW5lcihlLChmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKSxpLmV4aXRQSVAoKSxpLnJvb3Quc3R5bGUudG9wPXQrXCJweFwiLGkucm9vdC5zdHlsZS5sZWZ0PW4rXCJweFwifSkpfSkpfX0se2tleTpcImV4aXRQSVBcIix2YWx1ZTpmdW5jdGlvbigpe2EuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1waXAtYWN0aXZlXCIpLHRoaXMucm9vdC5zdHlsZS5yaWdodD1cIlwiLHRoaXMucm9vdC5zdHlsZS5ib3R0b209XCJcIix0aGlzLnJvb3Quc3R5bGUudG9wPVwiXCIsdGhpcy5yb290LnN0eWxlLmxlZnQ9XCJcIix0aGlzLmNvbmZpZy5mbHVpZCYmKHRoaXMucm9vdC5zdHlsZVtcInBhZGRpbmctdG9wXCJdPTEwMCp0aGlzLmNvbmZpZy5oZWlnaHQvdGhpcy5jb25maWcud2lkdGgrXCIlXCIpfX0se2tleTpcIm9uRm9jdXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7YS5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLWluYWN0aXZlXCIpLGUudXNlclRpbWVyJiZjbGVhclRpbWVvdXQoZS51c2VyVGltZXIpLGUudXNlclRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5lbWl0KFwiYmx1clwiKX0pLGUuY29uZmlnLmluYWN0aXZlKX19LHtrZXk6XCJvbkJsdXJcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucGF1c2VkfHx0aGlzLmVuZGVkfHxhLmRlZmF1bHQuYWRkQ2xhc3ModGhpcy5yb290LFwieGdwbGF5ZXItaW5hY3RpdmVcIil9fSx7a2V5Olwib25QbGF5XCIsdmFsdWU6ZnVuY3Rpb24oKXthLmRlZmF1bHQuYWRkQ2xhc3ModGhpcy5yb290LFwieGdwbGF5ZXItcGxheWluZ1wiKSxhLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5yb290LFwieGdwbGF5ZXItcGF1c2VcIil9fSx7a2V5Olwib25QYXVzZVwiLHZhbHVlOmZ1bmN0aW9uKCl7YS5kZWZhdWx0LmFkZENsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLXBhdXNlXCIpLHRoaXMudXNlclRpbWVyJiZjbGVhclRpbWVvdXQodGhpcy51c2VyVGltZXIpLHRoaXMuZW1pdChcImZvY3VzXCIpfX0se2tleTpcIm9uRW5kZWRcIix2YWx1ZTpmdW5jdGlvbigpe2EuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1lbmRlZFwiKSxhLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5yb290LFwieGdwbGF5ZXItcGxheWluZ1wiKX19LHtrZXk6XCJvblNlZWtpbmdcIix2YWx1ZTpmdW5jdGlvbigpe319LHtrZXk6XCJvblNlZWtlZFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy53YWl0VGltZXImJmNsZWFyVGltZW91dCh0aGlzLndhaXRUaW1lciksYS5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLWlzbG9hZGluZ1wiKX19LHtrZXk6XCJvbldhaXRpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS53YWl0VGltZXImJmNsZWFyVGltZW91dChlLndhaXRUaW1lciksZS53YWl0VGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXthLmRlZmF1bHQuYWRkQ2xhc3MoZS5yb290LFwieGdwbGF5ZXItaXNsb2FkaW5nXCIpfSksNTAwKX19LHtrZXk6XCJvblBsYXlpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMud2FpdFRpbWVyJiZjbGVhclRpbWVvdXQodGhpcy53YWl0VGltZXIpLGEuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLnJvb3QsXCJ4Z3BsYXllci1pc2xvYWRpbmcgeGdwbGF5ZXItbm9zdGFydCB4Z3BsYXllci1wYXVzZSB4Z3BsYXllci1lbmRlZCB4Z3BsYXllci1pcy1lcnJvciB4Z3BsYXllci1yZXBsYXlcIiksYS5kZWZhdWx0LmFkZENsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLXBsYXlpbmdcIil9fSx7a2V5Olwib25LZXlkb3duXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lfHx3aW5kb3cuZXZlbnQ7aWYoIW58fDM3IT09bi5rZXlDb2RlJiYzOCE9PW4ua2V5Q29kZSYmMzkhPT1uLmtleUNvZGUmJjQwIT09bi5rZXlDb2RlJiYzMiE9PW4ua2V5Q29kZXx8dC5lbWl0KFwiZm9jdXNcIiksIW58fDQwIT09bi5rZXlDb2RlJiYzOCE9PW4ua2V5Q29kZSluJiYzOT09PW4ua2V5Q29kZT90LmN1cnJlbnRUaW1lKzEwPD10LmR1cmF0aW9uP3QuY3VycmVudFRpbWUrPTEwOnQuY3VycmVudFRpbWU9dC5kdXJhdGlvbi0xOm4mJjM3PT09bi5rZXlDb2RlP3QuY3VycmVudFRpbWUtMTA+PTA/dC5jdXJyZW50VGltZS09MTA6dC5jdXJyZW50VGltZT0wOm4mJjMyPT09bi5rZXlDb2RlJiYodC5wYXVzZWQ/dC5wbGF5KCk6dC5wYXVzZSgpKTtlbHNle2lmKHQuY29udHJvbHMpe3ZhciBvPXQuY29udHJvbHMucXVlcnlTZWxlY3RvcihcIi54Z3BsYXllci1zbGlkZXJcIik7byYmKGEuZGVmYXVsdC5oYXNDbGFzcyhvLFwieGdwbGF5ZXItbm9uZVwiKSYmYS5kZWZhdWx0LnJlbW92ZUNsYXNzKG8sXCJ4Z3BsYXllci1ub25lXCIpLHQuc2xpZGVyVGltZXImJmNsZWFyVGltZW91dCh0LnNsaWRlclRpbWVyKSx0LnNsaWRlclRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7YS5kZWZhdWx0LmFkZENsYXNzKG8sXCJ4Z3BsYXllci1ub25lXCIpfSksdC5jb25maWcuaW5hY3RpdmUpKX1uJiY0MD09PW4ua2V5Q29kZT90LnZvbHVtZS0uMT49MD90LnZvbHVtZS09LjE6dC52b2x1bWU9MDpuJiYzOD09PW4ua2V5Q29kZSYmKHQudm9sdW1lKy4xPD0xP3Qudm9sdW1lKz0uMTp0LnZvbHVtZT0xKX19fV0sW3trZXk6XCJpbnN0YWxsXCIsdmFsdWU6ZnVuY3Rpb24oZSxuKXt0LnBsdWdpbnN8fCh0LnBsdWdpbnM9e30pLHQucGx1Z2luc1tlXT1ufX1dKSx0fShpLmRlZmF1bHQpO2gudXRpbD1hLmRlZmF1bHQsaC5zbmlmZmVyPWwuZGVmYXVsdCxoLkVycm9ycz1jLmRlZmF1bHQsdC5kZWZhdWx0PWgsZS5leHBvcnRzPXQuZGVmYXVsdH0sXCIuL3NyYy9wcm94eS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9wcm94eS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpLHI9cyhuKC8qISBldmVudC1lbWl0dGVyICovXCIuL25vZGVfbW9kdWxlcy9ldmVudC1lbWl0dGVyL2luZGV4LmpzXCIpKSxpPXMobigvKiEgLi91dGlscy91dGlsICovXCIuL3NyYy91dGlscy91dGlsLmpzXCIpKSxhPXMobigvKiEgLi9lcnJvciAqL1wiLi9zcmMvZXJyb3IuanNcIikpO2Z1bmN0aW9uIHMoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBsPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMubG9nUGFyYW1zPXtiYzowLGJ1X2FjdV90OjAscGxheWVkOltdfSx0aGlzLl9oYXNTdGFydD0hMSx0aGlzLnZpZGVvQ29uZmlnPXtjb250cm9sczohMSxhdXRvcGxheTp0LmF1dG9wbGF5LHBsYXlzaW5saW5lOnQucGxheXNpbmxpbmUsXCJ3ZWJraXQtcGxheXNpbmxpbmVcIjp0LnBsYXlzaW5saW5lLFwieDUtcGxheXNpbmxpbmVcIjp0LnBsYXlzaW5saW5lLFwieDUtdmlkZW8tcGxheWVyLXR5cGVcIjp0W1wieDUtdmlkZW8tcGxheWVyLXR5cGVcIl0sXCJ4NS12aWRlby1wbGF5ZXItZnVsbHNjcmVlblwiOnRbXCJ4NS12aWRlby1wbGF5ZXItZnVsbHNjcmVlblwiXSxcIng1LXZpZGVvLW9yaWVudGF0aW9uXCI6dFtcIng1LXZpZGVvLW9yaWVudGF0aW9uXCJdLGFpcnBsYXk6dC5haXJwbGF5LFwid2Via2l0LWFpcnBsYXlcIjp0LmFpcnBsYXksdGFiaW5kZXg6MixtZWRpYVR5cGU6dC5tZWRpYVR5cGV8fFwidmlkZW9cIn0sdC5sb29wJiYodGhpcy52aWRlb0NvbmZpZy5sb29wPVwibG9vcFwiKTt2YXIgbj1cIlwiO2lmKHQudGV4dFRyYWNrJiZBcnJheS5pc0FycmF5KHQudGV4dFRyYWNrKSYmKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkNocm9tZVwiKT4tMXx8bmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiRmlyZWZveFwiKT4tMSkmJih0LnRleHRUcmFjay5zb21lKChmdW5jdGlvbihlKXtpZihlLnNyYyYmZS5sYWJlbCYmZS5kZWZhdWx0KXJldHVybiBuKz0nPHRyYWNrIHNyYz1cIicrZS5zcmMrJ1wiICcsZS5raW5kJiYobis9J2tpbmQ9XCInK2Uua2luZCsnXCIgJyksbis9J2xhYmVsPVwiJytlLmxhYmVsKydcIiAnLGUuc3JjbGFuZyYmKG4rPSdzcmNsYW5nPVwiJytlLnNyY2xhbmcrJ1wiICcpLG4rPShlLmRlZmF1bHQ/XCJkZWZhdWx0XCI6XCJcIikrXCI+XCIsITB9KSksdGhpcy52aWRlb0NvbmZpZy5jcm9zc29yaWdpbj1cImFub255bW91c1wiKSx0LnRleHRUcmFja1N0eWxlKXt2YXIgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7dGhpcy50ZXh0VHJhY2tTdHlsZT1vLGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobyk7dmFyIHM9XCJcIjtmb3IodmFyIGwgaW4gdC50ZXh0VHJhY2tTdHlsZSlzKz1sK1wiOiBcIit0LnRleHRUcmFja1N0eWxlW2xdK1wiO1wiO3ZhciBjPXQuaWQ/XCIjXCIrdC5pZDp0LmVsLmlkP1wiI1wiK3QuZWwuaWQ6XCIuXCIrdC5lbC5jbGFzc05hbWU7by5zaGVldC5pbnNlcnRSdWxlP28uc2hlZXQuaW5zZXJ0UnVsZShjK1wiIHZpZGVvOjpjdWUgeyBcIitzK1wiIH1cIiwwKTpvLnNoZWV0LmFkZFJ1bGUmJm8uc2hlZXQuYWRkUnVsZShjK1wiIHZpZGVvOjpjdWVcIixzKX10aGlzLnZpZGVvPWkuZGVmYXVsdC5jcmVhdGVEb20odGhpcy52aWRlb0NvbmZpZy5tZWRpYVR5cGUsbix0aGlzLnZpZGVvQ29uZmlnLFwiXCIpLHQuYXV0b3BsYXkmJih0aGlzLnZpZGVvLmF1dG9wbGF5PSEwLHQuYXV0b3BsYXlNdXRlZCYmKHRoaXMudmlkZW8ubXV0ZWQ9ITApKSx0aGlzLmV2PVtcInBsYXlcIixcInBsYXlpbmdcIixcInBhdXNlXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcInNlZWtpbmdcIixcInNlZWtlZFwiLFwidGltZXVwZGF0ZVwiLFwid2FpdGluZ1wiLFwiY2FucGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJ2b2x1bWVjaGFuZ2VcIixcImxvYWRlZGRhdGFcIl0ubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gdD17fSxuPWUsbz1cIm9uXCIrZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLG4gaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLHt2YWx1ZTpvLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtuXT1vLHQ7dmFyIHQsbixvfSkpLCgwLHIuZGVmYXVsdCkodGhpcyksdGhpcy5faW50ZXJ2YWw9e307dmFyIHU9XCIwLDBcIixkPXRoaXM7dGhpcy5ldi5mb3JFYWNoKChmdW5jdGlvbihlKXtkLmV2SXRlbT1PYmplY3Qua2V5cyhlKVswXTt2YXIgdD1PYmplY3Qua2V5cyhlKVswXTtkLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoT2JqZWN0LmtleXMoZSlbMF0sKGZ1bmN0aW9uKCl7ZC5sb2dQYXJhbXMmJihcInBsYXlcIj09PXQ/ZC5oYXNTdGFydD0hMDpcIndhaXRpbmdcIj09PXQ/KGQubG9nUGFyYW1zLmJjKyssZC5pbldhaXRpbmdTdGFydD0obmV3IERhdGUpLmdldFRpbWUoKSk6XCJwbGF5aW5nXCI9PT10P2QuaW5XYWl0aW5nU3RhcnQmJihkLmxvZ1BhcmFtcy5idV9hY3VfdCs9KG5ldyBEYXRlKS5nZXRUaW1lKCktZC5pbldhaXRpbmdTdGFydCxkLmluV2FpdGluZ1N0YXJ0PXZvaWQgMCk6XCJsb2FkZWRkYXRhXCI9PT10P2QubG9nUGFyYW1zLnBsYXllZC5wdXNoKHtiZWdpbjowLGVuZDotMX0pOlwic2Vla2luZ1wiPT09dD9kLmxvZ1BhcmFtcy5wbGF5ZWQucHVzaCh7YmVnaW46ZC52aWRlby5jdXJyZW50VGltZSxlbmQ6LTF9KTpkJiZkLmxvZ1BhcmFtcyYmZC5sb2dQYXJhbXMucGxheWVkJiZcInRpbWV1cGRhdGVcIj09PXQmJihkLmxvZ1BhcmFtcy5wbGF5ZWQubGVuZ3RoPDEmJmQubG9nUGFyYW1zLnBsYXllZC5wdXNoKHtiZWdpbjpkLnZpZGVvLmN1cnJlbnRUaW1lLGVuZDotMX0pLGQubG9nUGFyYW1zLnBsYXllZFtkLmxvZ1BhcmFtcy5wbGF5ZWQubGVuZ3RoLTFdLmVuZD1kLnZpZGVvLmN1cnJlbnRUaW1lKSxcImVycm9yXCI9PT10P2QudmlkZW8uZXJyb3ImJmQuZW1pdCh0LG5ldyBhLmRlZmF1bHQoXCJvdGhlclwiLGQuY3VycmVudFRpbWUsZC5kdXJhdGlvbixkLm5ldHdvcmtTdGF0ZSxkLnJlYWR5U3RhdGUsZC5jdXJyZW50U3JjLGQuc3JjLGQuZW5kZWQse2xpbmU6NDEsbXNnOmQuZXJyb3IsaGFuZGxlOlwiQ29uc3RydWN0b3JcIn0pKTpkLmVtaXQodCxkKSxkLmhhc093blByb3BlcnR5KFwiX2ludGVydmFsXCIpJiYoW1wiZW5kZWRcIixcImVycm9yXCIsXCJ0aW1ldXBkYXRlXCJdLmluZGV4T2YodCk8MD8oY2xlYXJJbnRlcnZhbChkLl9pbnRlcnZhbC5idWZmZXJlZENoYW5nZSksaS5kZWZhdWx0LnNldEludGVydmFsKGQsXCJidWZmZXJlZENoYW5nZVwiLChmdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTAsbj1kLnZpZGVvLmJ1ZmZlcmVkLmxlbmd0aDt0PG47dCsrKWUucHVzaChbZC52aWRlby5idWZmZXJlZC5zdGFydCh0KSxkLnZpZGVvLmJ1ZmZlcmVkLmVuZCh0KV0pO2UudG9TdHJpbmcoKSE9PXUmJih1PWUudG9TdHJpbmcoKSxkLmVtaXQoXCJidWZmZXJlZENoYW5nZVwiLGUpKX0pLDIwMCkpOlwidGltZXVwZGF0ZVwiIT09dCYmaS5kZWZhdWx0LmNsZWFySW50ZXJ2YWwoZCxcImJ1ZmZlcmVkQ2hhbmdlXCIpKSl9KSwhMSl9KSl9cmV0dXJuIG8oZSxbe2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMudGV4dFRyYWNrU3R5bGUmJnRoaXMudGV4dFRyYWNrU3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnRleHRUcmFja1N0eWxlKX19LHtrZXk6XCJwbGF5XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnZpZGVvLnBsYXkoKX19LHtrZXk6XCJwYXVzZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy52aWRlby5wYXVzZSgpfX0se2tleTpcImNhblBsYXlUeXBlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnZpZGVvLmNhblBsYXlUeXBlKCl9fSx7a2V5OlwiZ2V0QnVmZmVyZWRSYW5nZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9WzAsMF0sdD10aGlzLnZpZGVvLG49dC5idWZmZXJlZCxvPXQuY3VycmVudFRpbWU7aWYobilmb3IodmFyIHI9MCxpPW4ubGVuZ3RoO3I8aSYmKGVbMF09bi5zdGFydChyKSxlWzFdPW4uZW5kKHIpLCEoZVswXTw9byYmbzw9ZVsxXSkpO3IrKyk7cmV0dXJuIGVbMF0tbzw9MCYmby1lWzFdPD0wP2U6WzAsMF19fSx7a2V5OlwiaGFzU3RhcnRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faGFzU3RhcnR9LHNldDpmdW5jdGlvbihlKXtcImJvb2xlYW5cIiE9dHlwZW9mIGV8fCEwIT09ZXx8dGhpcy5faGFzU3RhcnR8fCh0aGlzLl9oYXNTdGFydD0hMCx0aGlzLmVtaXQoXCJoYXNzdGFydFwiKSl9fSx7a2V5OlwiYXV0b3BsYXlcIixzZXQ6ZnVuY3Rpb24oZSl7dGhpcy52aWRlby5hdXRvcGxheT1lfSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5hdXRvcGxheX19LHtrZXk6XCJidWZmZXJlZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLmJ1ZmZlcmVkfX0se2tleTpcImNyb3NzT3JpZ2luXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlkZW8uY3Jvc3NPcmlnaW59LHNldDpmdW5jdGlvbihlKXt0aGlzLnZpZGVvLmNyb3NzT3JpZ2luPWV9fSx7a2V5OlwiY3VycmVudFNyY1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLmN1cnJlbnRTcmN9LHNldDpmdW5jdGlvbihlKXt0aGlzLnZpZGVvLmN1cnJlbnRTcmM9ZX19LHtrZXk6XCJjdXJyZW50VGltZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLmN1cnJlbnRUaW1lfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy52aWRlby5jdXJyZW50VGltZT1lfX0se2tleTpcImRlZmF1bHRNdXRlZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLmRlZmF1bHRNdXRlZH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMudmlkZW8uZGVmYXVsdE11dGVkPWV9fSx7a2V5OlwiZHVyYXRpb25cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5kdXJhdGlvbn19LHtrZXk6XCJlbmRlZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLmVuZGVkfX0se2tleTpcImVycm9yXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy52aWRlby5lcnJvcjtpZighZSlyZXR1cm4gbnVsbDt2YXIgdD1be2VuOlwiTUVESUFfRVJSX0FCT1JURURcIixjbjpcIuWPluWbnui/h+eoi+iiq+eUqOaIt+S4reatolwifSx7ZW46XCJNRURJQV9FUlJfTkVUV09SS1wiLGNuOlwi5b2T5LiL6L295pe25Y+R55Sf6ZSZ6K+vXCJ9LHtlbjpcIk1FRElBX0VSUl9ERUNPREVcIixjbjpcIuW9k+ino+eggeaXtuWPkeeUn+mUmeivr1wifSx7ZW46XCJNRURJQV9FUlJfU1JDX05PVF9TVVBQT1JURURcIixjbjpcIuS4jeaUr+aMgemfs+mikS/op4bpopFcIn1dO3JldHVybiB0aGlzLmxhbmc/dGhpcy5sYW5nW3RbZS5jb2RlLTFdLmVuXTp0W2UuY29kZS0xXS5lbn19LHtrZXk6XCJsb29wXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlkZW8ubG9vcH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMudmlkZW8ubG9vcD1lfX0se2tleTpcIm11dGVkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlkZW8ubXV0ZWR9LHNldDpmdW5jdGlvbihlKXt0aGlzLnZpZGVvLm11dGVkPWV9fSx7a2V5OlwibmV0d29ya1N0YXRlXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIGU9W3tlbjpcIk5FVFdPUktfRU1QVFlcIixjbjpcIumfs+mikS/op4bpopHlsJrmnKrliJ3lp4vljJZcIn0se2VuOlwiTkVUV09SS19JRExFXCIsY246XCLpn7PpopEv6KeG6aKR5piv5rS75Yqo55qE5LiU5bey6YCJ5Y+W6LWE5rqQ77yM5L2G5bm25pyq5L2/55So572R57ucXCJ9LHtlbjpcIk5FVFdPUktfTE9BRElOR1wiLGNuOlwi5rWP6KeI5Zmo5q2j5Zyo5LiL6L295pWw5o2uXCJ9LHtlbjpcIk5FVFdPUktfTk9fU09VUkNFXCIsY246XCLmnKrmib7liLDpn7PpopEv6KeG6aKR5p2l5rqQXCJ9XTtyZXR1cm4gdGhpcy5sYW5nP3RoaXMubGFuZ1tlW3RoaXMudmlkZW8ubmV0d29ya1N0YXRlXS5lbl06ZVt0aGlzLnZpZGVvLm5ldHdvcmtTdGF0ZV0uZW59fSx7a2V5OlwicGF1c2VkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlkZW8ucGF1c2VkfX0se2tleTpcInBsYXliYWNrUmF0ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLnBsYXliYWNrUmF0ZX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMudmlkZW8ucGxheWJhY2tSYXRlPWV9fSx7a2V5OlwicGxheWVkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlkZW8ucGxheWVkfX0se2tleTpcInByZWxvYWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5wcmVsb2FkfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy52aWRlby5wcmVsb2FkPWV9fSx7a2V5OlwicmVhZHlTdGF0ZVwiLGdldDpmdW5jdGlvbigpe3ZhciBlPVt7ZW46XCJIQVZFX05PVEhJTkdcIixjbjpcIuayoeacieWFs+S6jumfs+mikS/op4bpopHmmK/lkKblsLHnu6rnmoTkv6Hmga9cIn0se2VuOlwiSEFWRV9NRVRBREFUQVwiLGNuOlwi5YWz5LqO6Z+z6aKRL+inhumikeWwsee7queahOWFg+aVsOaNrlwifSx7ZW46XCJIQVZFX0NVUlJFTlRfREFUQVwiLGNuOlwi5YWz5LqO5b2T5YmN5pKt5pS+5L2N572u55qE5pWw5o2u5piv5Y+v55So55qE77yM5L2G5rKh5pyJ6Laz5aSf55qE5pWw5o2u5p2l5pKt5pS+5LiL5LiA5binL+avq+enklwifSx7ZW46XCJIQVZFX0ZVVFVSRV9EQVRBXCIsY246XCLlvZPliY3lj4roh7PlsJHkuIvkuIDluKfnmoTmlbDmja7mmK/lj6/nlKjnmoRcIn0se2VuOlwiSEFWRV9FTk9VR0hfREFUQVwiLGNuOlwi5Y+v55So5pWw5o2u6Laz5Lul5byA5aeL5pKt5pS+XCJ9XTtyZXR1cm4gdGhpcy5sYW5nP3RoaXMubGFuZ1tlW3RoaXMudmlkZW8ucmVhZHlTdGF0ZV0uZW5dOmVbdGhpcy52aWRlby5yZWFkeVN0YXRlXX19LHtrZXk6XCJzZWVrYWJsZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLnNlZWthYmxlfX0se2tleTpcInNlZWtpbmdcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWRlby5zZWVraW5nfX0se2tleTpcInNyY1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLnNyY30sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aS5kZWZhdWx0Lmhhc0NsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLWVuZGVkXCIpfHx0aGlzLmVtaXQoXCJ1cmxjaGFuZ2VcIixKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHQubG9nUGFyYW1zKSkpLHRoaXMubG9nUGFyYW1zPXtiYzowLGJ1X2FjdV90OjAscGxheWVkOltdLHB0OihuZXcgRGF0ZSkuZ2V0VGltZSgpLHZ0OihuZXcgRGF0ZSkuZ2V0VGltZSgpLHZkOjB9LHRoaXMudmlkZW8ucGF1c2UoKSx0aGlzLnZpZGVvLnNyYz1lLHRoaXMubG9nUGFyYW1zLnBsYXlTcmM9ZSx0aGlzLmxvZ1BhcmFtcy5wdD0obmV3IERhdGUpLmdldFRpbWUoKSx0aGlzLmxvZ1BhcmFtcy52dD10aGlzLmxvZ1BhcmFtcy5wdCx0aGlzLm9uY2UoXCJsb2FkZWRkYXRhXCIsKGZ1bmN0aW9uIGUoKXt0LmxvZ1BhcmFtcy52dD0obmV3IERhdGUpLmdldFRpbWUoKSx0LmxvZ1BhcmFtcy5wdD50LmxvZ1BhcmFtcy52dCYmKHQubG9nUGFyYW1zLnB0PXQubG9nUGFyYW1zLnZ0KSx0LmxvZ1BhcmFtcy52ZD10LnZpZGVvLmR1cmF0aW9uLHQub2ZmKFwibG9hZGVkZGF0YVwiLGUpfSkpfX0se2tleTpcInZvbHVtZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZGVvLnZvbHVtZX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMudmlkZW8udm9sdW1lPWV9fSx7a2V5OlwiZnVsbHNjcmVlblwiLGdldDpmdW5jdGlvbigpe3JldHVybiBpLmRlZmF1bHQuaGFzQ2xhc3ModGhpcy5yb290LFwieGdwbGF5ZXItaXMtZnVsbHNjcmVlblwiKXx8aS5kZWZhdWx0Lmhhc0NsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLWZ1bGxzY3JlZW4tYWN0aXZlXCIpfX0se2tleTpcImJ1bGxldFwiLGdldDpmdW5jdGlvbigpe3JldHVybiEhaS5kZWZhdWx0LmZpbmREb20odGhpcy5yb290LFwieGctYnVsbGV0XCIpJiZpLmRlZmF1bHQuaGFzQ2xhc3MoaS5kZWZhdWx0LmZpbmREb20odGhpcy5yb290LFwieGctYnVsbGV0XCIpLFwieGdwbGF5ZXItaGFzLWJ1bGxldFwiKX19LHtrZXk6XCJ0ZXh0VHJhY2tcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5kZWZhdWx0Lmhhc0NsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLWlzLXRleHRUcmFja1wiKX19LHtrZXk6XCJwaXBcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5kZWZhdWx0Lmhhc0NsYXNzKHRoaXMucm9vdCxcInhncGxheWVyLXBpcC1hY3RpdmVcIil9fV0pLGV9KCk7dC5kZWZhdWx0PWwsZS5leHBvcnRzPXQuZGVmYXVsdH0sXCIuL3NyYy9zdHlsZS9pbmRleC5zY3NzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvc3R5bGUvaW5kZXguc2NzcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe3ZhciBvPW4oLyohICEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlcj8/cmVmLS01LTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2luZGV4LnNjc3MgKi9cIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/IS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3JjL3N0eWxlL2luZGV4LnNjc3NcIik7XCJzdHJpbmdcIj09dHlwZW9mIG8mJihvPVtbZS5pLG8sXCJcIl1dKTt2YXIgcj17aG1yOiEwLHRyYW5zZm9ybTp2b2lkIDAsaW5zZXJ0SW50bzp2b2lkIDB9O24oLyohIC4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyAqL1wiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikobyxyKTtvLmxvY2FscyYmKGUuZXhwb3J0cz1vLmxvY2Fscyl9LFwiLi9zcmMvdXRpbHMvYW5pbWF0aW9uLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy91dGlscy9hbmltYXRpb24uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiOyFmdW5jdGlvbigpe2Zvcih2YXIgZT0wLHQ9W1wid2Via2l0XCIsXCJtb3pcIl0sbj0wO248dC5sZW5ndGgmJiF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOysrbil3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lPXdpbmRvd1t0W25dK1wiUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdLHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZT13aW5kb3dbdFtuXStcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCJdfHx3aW5kb3dbdFtuXStcIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZVwiXTt3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHwod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT1mdW5jdGlvbih0LG4pe3ZhciBvPShuZXcgRGF0ZSkuZ2V0VGltZSgpLHI9TWF0aC5tYXgoMCwxNi0oby1lKSksaT13aW5kb3cuc2V0VGltZW91dCgoZnVuY3Rpb24oKXt0KG8rcil9KSxyKTtyZXR1cm4gZT1vK3IsaX0pLHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZXx8KHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZT1mdW5jdGlvbihlKXtjbGVhclRpbWVvdXQoZSl9KX0oKX0sXCIuL3NyYy91dGlscy9kYXRhYmFzZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy91dGlscy9kYXRhYmFzZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpO3ZhciByPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7bmFtZTpcInhncGxheWVyXCIsdmVyc2lvbjoxLGRiOm51bGwsb2pzdG9yZTp7bmFtZTpcInhnLW00YVwiLGtleXBhdGg6XCJ2aWRcIn19OyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5pbmRleGVkREI9d2luZG93LmluZGV4ZWREQnx8d2luZG93LndlYmtpdGluZGV4ZWREQix0aGlzLklEQktleVJhbmdlPXdpbmRvdy5JREJLZXlSYW5nZXx8d2luZG93LndlYmtpdElEQktleVJhbmdlLHRoaXMubXlEQj10fXJldHVybiBvKGUsW3trZXk6XCJvcGVuREJcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49dGhpcyxvPXRoaXMubXlEQi52ZXJzaW9ufHwxLHI9bi5pbmRleGVkREIub3BlbihuLm15REIubmFtZSxvKTtyLm9uZXJyb3I9ZnVuY3Rpb24oZSl7fSxyLm9uc3VjY2Vzcz1mdW5jdGlvbihvKXt0Lm15REIuZGI9by50YXJnZXQucmVzdWx0LGUuY2FsbChuKX0sci5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQucmVzdWx0O2UudGFyZ2V0LnRyYW5zYWN0aW9uO3Qub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhuLm15REIub2pzdG9yZS5uYW1lKXx8dC5jcmVhdGVPYmplY3RTdG9yZShuLm15REIub2pzdG9yZS5uYW1lLHtrZXlQYXRoOm4ubXlEQi5vanN0b3JlLmtleXBhdGh9KX19fSx7a2V5OlwiZGVsZXRlZGJcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKHRoaXMubXlEQi5uYW1lKX19LHtrZXk6XCJjbG9zZURCXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLm15REIuZGIuY2xvc2UoKX19LHtrZXk6XCJhZGREYXRhXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dGhpcy5teURCLmRiLnRyYW5zYWN0aW9uKGUsXCJyZWFkd3JpdGVcIikub2JqZWN0U3RvcmUoZSksbz12b2lkIDAscj0wO3I8dC5sZW5ndGg7cisrKShvPW4uYWRkKHRbcl0pKS5vbmVycm9yPWZ1bmN0aW9uKCl7fSxvLm9uc3VjY2Vzcz1mdW5jdGlvbigpe319fSx7a2V5OlwicHV0RGF0YVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXRoaXMubXlEQi5kYi50cmFuc2FjdGlvbihlLFwicmVhZHdyaXRlXCIpLm9iamVjdFN0b3JlKGUpLG89dm9pZCAwLHI9MDtyPHQubGVuZ3RoO3IrKykobz1uLnB1dCh0W3JdKSkub25lcnJvcj1mdW5jdGlvbigpe30sby5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXt9fX0se2tleTpcImdldERhdGFCeUtleVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgbz10aGlzLHI9dGhpcy5teURCLmRiLnRyYW5zYWN0aW9uKGUsXCJyZWFkd3JpdGVcIikub2JqZWN0U3RvcmUoZSkuZ2V0KHQpO3Iub25lcnJvcj1mdW5jdGlvbigpe24uY2FsbChvLG51bGwpfSxyLm9uc3VjY2Vzcz1mdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldC5yZXN1bHQ7bi5jYWxsKG8sdCl9fX0se2tleTpcImRlbGV0ZURhdGFcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMubXlEQi5kYi50cmFuc2FjdGlvbihlLFwicmVhZHdyaXRlXCIpLm9iamVjdFN0b3JlKGUpLmRlbGV0ZSh0KX19LHtrZXk6XCJjbGVhckRhdGFcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLm15REIuZGIudHJhbnNhY3Rpb24oZSxcInJlYWR3cml0ZVwiKS5vYmplY3RTdG9yZShlKS5jbGVhcigpfX1dKSxlfSgpO3QuZGVmYXVsdD1yLGUuZXhwb3J0cz10LmRlZmF1bHR9LFwiLi9zcmMvdXRpbHMvc25pZmZlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWxzL3NuaWZmZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz17Z2V0IGRldmljZSgpe3JldHVybiBvLm9zLmlzUGM/XCJwY1wiOlwibW9iaWxlXCJ9LGdldCBicm93c2VyKCl7dmFyIGU9bmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLHQ9e2llOi9ydjooW1xcZC5dKylcXCkgbGlrZSBnZWNrby8sZmlyZm94Oi9maXJlZm94XFwvKFtcXGQuXSspLyxjaHJvbWU6L2Nocm9tZVxcLyhbXFxkLl0rKS8sb3BlcmE6L29wZXJhLihbXFxkLl0rKS8sc2FmYXJpOi92ZXJzaW9uXFwvKFtcXGQuXSspLipzYWZhcmkvfTtyZXR1cm5bXS5jb25jYXQoT2JqZWN0LmtleXModCkuZmlsdGVyKChmdW5jdGlvbihuKXtyZXR1cm4gdFtuXS50ZXN0KGUpfSkpKVswXX0sZ2V0IG9zKCl7dmFyIGU9bmF2aWdhdG9yLnVzZXJBZ2VudCx0PS8oPzpXaW5kb3dzIFBob25lKS8udGVzdChlKSxuPS8oPzpTeW1iaWFuT1MpLy50ZXN0KGUpfHx0LG89Lyg/OkFuZHJvaWQpLy50ZXN0KGUpLHI9Lyg/OkZpcmVmb3gpLy50ZXN0KGUpLGk9Lyg/OmlQYWR8UGxheUJvb2spLy50ZXN0KGUpfHxvJiYhLyg/Ok1vYmlsZSkvLnRlc3QoZSl8fHImJi8oPzpUYWJsZXQpLy50ZXN0KGUpLGE9Lyg/OmlQaG9uZSkvLnRlc3QoZSkmJiFpO3JldHVybntpc1RhYmxldDppLGlzUGhvbmU6YSxpc0FuZHJvaWQ6byxpc1BjOiEoYXx8b3x8bnx8aSksaXNTeW1iaWFuOm4saXNXaW5kb3dzUGhvbmU6dCxpc0ZpcmVGb3g6cn19fTt0LmRlZmF1bHQ9byxlLmV4cG9ydHM9dC5kZWZhdWx0fSxcIi4vc3JjL3V0aWxzL3N2Zy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdXRpbHMvc3ZnLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbyxyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgbz10W25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLmtleSxvKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixvKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxvJiZlKHQsbyksdH19KCksaT1uKC8qISBwYXNpdGlvbiAqL1wiLi9ub2RlX21vZHVsZXMvcGFzaXRpb24vZGlzdC9wYXNpdGlvbi5qc1wiKSxhPShvPWkpJiZvLl9fZXNNb2R1bGU/bzp7ZGVmYXVsdDpvfTtuKC8qISAuL2FuaW1hdGlvbiAqL1wiLi9zcmMvdXRpbHMvYW5pbWF0aW9uLmpzXCIpO3ZhciBzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuZnJvbT10LmZyb20sdGhpcy50bz10LnRvLHRoaXMuZWFzaW5nPXQuZWFzaW5nfHxmdW5jdGlvbihlKXtyZXR1cm4gZSplfSx0aGlzLmR1cmF0aW9uPXQuZHVyYXRpb258fDE1MCx0aGlzLmN1clBhdGg9XCJcIix0aGlzLnByb2dyZXNzPXQucHJvZ3Jlc3MsdGhpcy5zdGF0ZT0wfXJldHVybiByKGUsW3trZXk6XCJhbmltYXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9bmV3IERhdGUsbj1lLmR1cmF0aW9uLG89bnVsbCxyPWUucGF0aDJzaGFwZXMoZS5mcm9tKSxpPWUucGF0aDJzaGFwZXMoZS50byksYT1lLl9wcmVwcm9jZXNzaW5nKHIsaSk7ZS5zdGF0ZT0xOyFmdW5jdGlvbiByKCl7dmFyIHM9bmV3IERhdGUtdDtpZihzPj1ufHwyPT09ZS5zdGF0ZSlyZXR1cm4gbz1pLGUucHJvZ3Jlc3MobywxKSx3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoZS50aWNrSWQpLHZvaWQoZS5zdGF0ZT0wKTt2YXIgbD1lLmVhc2luZyhzL24pO289ZS5fbGVycChhWzBdLGFbMV0sbCksZS5wcm9ncmVzcyhvLGwpLGUudGlja0lkPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocil9KCl9fSx7a2V5OlwidG9TVkdTdHJpbmdcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmZvckVhY2goKGZ1bmN0aW9uKGUsdCl7dD9lLnNwbGljZSgwLDIsXCJDXCIpOihlLnNwbGljZSgyLDAsXCJDXCIpLGUudW5zaGlmdChcIk1cIikpfSkpLGUubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZS5qb2luKFwiIFwiKX0pKS5qb2luKFwiXCIpfSkpLmpvaW4oXCJcIil9fSx7a2V5Olwic3RhcnRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuYW5pbWF0ZSgpfX0se2tleTpcInN0b3BcIix2YWx1ZTpmdW5jdGlvbigpezAhPT10aGlzLnN0YXRlJiYodGhpcy5zdGF0ZT0yKSx3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoc2VsZi50aWNrSWQpLHRoaXMuc3RhdGU9MH19LHtrZXk6XCJyZXZlcnNlXCIsdmFsdWU6ZnVuY3Rpb24oKXswIT09dGhpcy5zdGF0ZSYmdGhpcy5zdG9wKCk7dmFyIGU9dGhpcy5mcm9tO3RoaXMuZnJvbT10aGlzLnRvLHRoaXMudG89ZSx0aGlzLmFuaW1hdGUoKX19LHtrZXk6XCJyZXNldFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp0aGlzLmZyb207MCE9PXRoaXMuc3RhdGUmJnRoaXMuc3RvcCgpLHRoaXMuZnJvbT10LHRoaXMudG89ZSx0aGlzLmFuaW1hdGUoKX19XSksZX0oKTtmb3IodmFyIGwgaW4gYS5kZWZhdWx0KWEuZGVmYXVsdFtsXWluc3RhbmNlb2YgRnVuY3Rpb24mJiFzLnByb3RvdHlwZVtsXSYmKHMucHJvdG90eXBlW2xdPWEuZGVmYXVsdFtsXSk7dC5kZWZhdWx0PXMsZS5leHBvcnRzPXQuZGVmYXVsdH0sXCIuL3NyYy91dGlscy91cmwuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWxzL3VybC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dC5nZXRBYnNvbHV0ZVVSTD1mdW5jdGlvbihlKXtpZighZS5tYXRjaCgvXmh0dHBzPzpcXC9cXC8vKSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0LmlubmVySFRNTD0nPGEgaHJlZj1cIicrZSsnXCI+eDwvYT4nLGU9dC5maXJzdENoaWxkLmhyZWZ9cmV0dXJuIGV9fSxcIi4vc3JjL3V0aWxzL3V0aWwuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy91dGlscy91dGlsLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgdXRpbD17Y3JlYXRlRG9tOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwiZGl2XCIsdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJcIixuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fSxvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpcIlwiLHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlKTtyZXR1cm4gci5jbGFzc05hbWU9byxyLmlubmVySFRNTD10LE9iamVjdC5rZXlzKG4pLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBvPXQsaT1uW3RdO1widmlkZW9cIj09PWV8fFwiYXVkaW9cIj09PWU/aSYmci5zZXRBdHRyaWJ1dGUobyxpKTpyLnNldEF0dHJpYnV0ZShvLGkpfSkpLHJ9LGhhc0NsYXNzOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuY2xhc3NMaXN0P0FycmF5LnByb3RvdHlwZS5zb21lLmNhbGwoZS5jbGFzc0xpc3QsKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09dH0pKTohIWUuY2xhc3NOYW1lLm1hdGNoKG5ldyBSZWdFeHAoXCIoXFxcXHN8XilcIit0K1wiKFxcXFxzfCQpXCIpKX0sYWRkQ2xhc3M6ZnVuY3Rpb24oZSx0KXtlLmNsYXNzTGlzdD90LnJlcGxhY2UoLyheXFxzK3xcXHMrJCkvZyxcIlwiKS5zcGxpdCgvXFxzKy9nKS5mb3JFYWNoKChmdW5jdGlvbih0KXt0JiZlLmNsYXNzTGlzdC5hZGQodCl9KSk6dXRpbC5oYXNDbGFzcyhlLHQpfHwoZS5jbGFzc05hbWUrPVwiIFwiK3QpfSxyZW1vdmVDbGFzczpmdW5jdGlvbihlLHQpe2UuY2xhc3NMaXN0P3Quc3BsaXQoL1xccysvZykuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZS5jbGFzc0xpc3QucmVtb3ZlKHQpfSkpOnV0aWwuaGFzQ2xhc3MoZSx0KSYmdC5zcGxpdCgvXFxzKy9nKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbj1uZXcgUmVnRXhwKFwiKFxcXFxzfF4pXCIrdCtcIihcXFxcc3wkKVwiKTtlLmNsYXNzTmFtZT1lLmNsYXNzTmFtZS5yZXBsYWNlKG4sXCIgXCIpfSkpfSx0b2dnbGVDbGFzczpmdW5jdGlvbihlLHQpe3Quc3BsaXQoL1xccysvZykuZm9yRWFjaCgoZnVuY3Rpb24odCl7dXRpbC5oYXNDbGFzcyhlLHQpP3V0aWwucmVtb3ZlQ2xhc3MoZSx0KTp1dGlsLmFkZENsYXNzKGUsdCl9KSl9LGZpbmREb206ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06ZG9jdW1lbnQsdD1hcmd1bWVudHNbMV0sbj12b2lkIDA7dHJ5e249ZS5xdWVyeVNlbGVjdG9yKHQpfWNhdGNoKG8pe3Quc3RhcnRzV2l0aChcIiNcIikmJihuPWUuZ2V0RWxlbWVudEJ5SWQodC5zbGljZSgxKSkpfXJldHVybiBufSxwYWRTdGFydDpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciBvPVN0cmluZyhuKSxyPXQ+PjAsaT1NYXRoLmNlaWwoci9vLmxlbmd0aCksYT1bXSxzPVN0cmluZyhlKTtpLS07KWEucHVzaChvKTtyZXR1cm4gYS5qb2luKFwiXCIpLnN1YnN0cmluZygwLHItcy5sZW5ndGgpK3N9LGZvcm1hdDpmdW5jdGlvbihlKXtpZih3aW5kb3cuaXNOYU4oZSkpcmV0dXJuXCJcIjt2YXIgdD11dGlsLnBhZFN0YXJ0KE1hdGguZmxvb3IoZS8zNjAwKSwyLDApLG49dXRpbC5wYWRTdGFydChNYXRoLmZsb29yKChlLTM2MDAqdCkvNjApLDIsMCksbz11dGlsLnBhZFN0YXJ0KE1hdGguZmxvb3IoZS0zNjAwKnQtNjAqbiksMiwwKTtyZXR1cm4oXCIwMFwiPT09dD9bbixvXTpbdCxuLG9dKS5qb2luKFwiOlwiKX0sZXZlbnQ6ZnVuY3Rpb24oZSl7aWYoZS50b3VjaGVzKXt2YXIgdD1lLnRvdWNoZXNbMF18fGUuY2hhbmdlZFRvdWNoZXNbMF07ZS5jbGllbnRYPXQuY2xpZW50WHx8MCxlLmNsaWVudFk9dC5jbGllbnRZfHwwLGUub2Zmc2V0WD10LnBhZ2VYLXQudGFyZ2V0Lm9mZnNldExlZnQsZS5vZmZzZXRZPXQucGFnZVktdC50YXJnZXQub2Zmc2V0VG9wfWUuX3RhcmdldD1lLnRhcmdldHx8ZS5zcmNFbGVtZW50fSx0eXBlT2Y6ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5tYXRjaCgvKFteXFxzLipdKykoPz1dJCkvZylbMF19LGRlZXBDb3B5OmZ1bmN0aW9uKGUsdCl7aWYoXCJPYmplY3RcIj09PXV0aWwudHlwZU9mKHQpJiZcIk9iamVjdFwiPT09dXRpbC50eXBlT2YoZSkpcmV0dXJuIE9iamVjdC5rZXlzKHQpLmZvckVhY2goKGZ1bmN0aW9uKG4pe1wiT2JqZWN0XCIhPT11dGlsLnR5cGVPZih0W25dKXx8dFtuXWluc3RhbmNlb2YgTm9kZT9cIkFycmF5XCI9PT11dGlsLnR5cGVPZih0W25dKT9lW25dPVwiQXJyYXlcIj09PXV0aWwudHlwZU9mKGVbbl0pP2Vbbl0uY29uY2F0KHRbbl0pOnRbbl06ZVtuXT10W25dOmVbbl0/dXRpbC5kZWVwQ29weShlW25dLHRbbl0pOmVbbl09dFtuXX0pKSxlfSxnZXRCZ0ltYWdlOmZ1bmN0aW9uKGUpe3ZhciB0PShlLmN1cnJlbnRTdHlsZXx8d2luZG93LmdldENvbXB1dGVkU3R5bGUoZSxudWxsKSkuYmFja2dyb3VuZEltYWdlO2lmKCF0fHxcIm5vbmVcIj09PXQpcmV0dXJuXCJcIjt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtyZXR1cm4gbi5ocmVmPXQucmVwbGFjZSgvdXJsXFwoXCJ8XCJcXCkvZyxcIlwiKSxuLmhyZWZ9LGNvcHlEb206ZnVuY3Rpb24oZSl7aWYoZSYmMT09PWUubm9kZVR5cGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZS50YWdOYW1lKTtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlLmF0dHJpYnV0ZXMsKGZ1bmN0aW9uKGUpe3Quc2V0QXR0cmlidXRlKGUubmFtZSxlLnZhbHVlKX0pKSxlLmlubmVySFRNTCYmKHQuaW5uZXJIVE1MPWUuaW5uZXJIVE1MKSx0fXJldHVyblwiXCJ9LHNldEludGVydmFsOmZ1bmN0aW9uKGUsdCxuLG8pe2UuX2ludGVydmFsW3RdfHwoZS5faW50ZXJ2YWxbdF09c2V0SW50ZXJ2YWwobi5iaW5kKGUpLG8pKX0sY2xlYXJJbnRlcnZhbDpmdW5jdGlvbihlLHQpe2NsZWFySW50ZXJ2YWwoZS5faW50ZXJ2YWxbdF0pLGUuX2ludGVydmFsW3RdPW51bGx9LGNyZWF0ZUltZ0J0bjpmdW5jdGlvbihlLHQsbixvKXt2YXIgcj11dGlsLmNyZWF0ZURvbShcInhnLVwiK2UsXCJcIix7fSxcInhncGxheWVyLVwiK2UrXCItaW1nXCIpO2lmKHIuc3R5bGUuYmFja2dyb3VuZEltYWdlPSd1cmwoXCInK3QrJ1wiKScsbiYmbyl7dmFyIGk9dm9pZCAwLGE9dm9pZCAwLHM9dm9pZCAwO1tcInB4XCIsXCJyZW1cIixcImVtXCIsXCJwdFwiLFwiZHBcIixcInZ3XCIsXCJ2aFwiLFwidm1cIixcIiVcIl0uZXZlcnkoKGZ1bmN0aW9uKGUpe3JldHVybiEobi5pbmRleE9mKGUpPi0xJiZvLmluZGV4T2YoZSk+LTEpfHwoaT1wYXJzZUZsb2F0KG4uc2xpY2UoMCxuLmluZGV4T2YoZSkpLnRyaW0oKSksYT1wYXJzZUZsb2F0KG8uc2xpY2UoMCxvLmluZGV4T2YoZSkpLnRyaW0oKSkscz1lLCExKX0pKSxyLnN0eWxlLndpZHRoPVwiXCIraStzLHIuc3R5bGUuaGVpZ2h0PVwiXCIrYStzLHIuc3R5bGUuYmFja2dyb3VuZFNpemU9XCJcIitpK3MrXCIgXCIrYStzLHIuc3R5bGUubWFyZ2luPVwic3RhcnRcIj09PWU/XCItXCIrYS8yK3MrXCIgYXV0byBhdXRvIC1cIitpLzIrczpcImF1dG8gNXB4IGF1dG8gNXB4XCJ9cmV0dXJuIHJ9LEhleDJSR0JBOmZ1bmN0aW9uKGhleCxhbHBoYSl7dmFyIHJnYj1bXTtpZigvXlxcI1swLTlBLUZdezN9JC9pLnRlc3QoaGV4KSl7dmFyIHNpeEhleD1cIiNcIjtoZXgucmVwbGFjZSgvWzAtOUEtRl0vZ2ksKGZ1bmN0aW9uKGUpe3NpeEhleCs9ZStlfSkpLGhleD1zaXhIZXh9cmV0dXJuL14jWzAtOUEtRl17Nn0kL2kudGVzdChoZXgpPyhoZXgucmVwbGFjZSgvWzAtOUEtRl17Mn0vZ2ksKGZ1bmN0aW9uKGt3KXtyZ2IucHVzaChldmFsKFwiMHhcIitrdykpfSkpLFwicmdiYShcIityZ2Iuam9pbihcIixcIikrXCIsIFwiK2FscGhhK1wiKVwiKTpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKVwifX07ZXhwb3J0cy5kZWZhdWx0PXV0aWwsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0fSwwOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBtdWx0aSAuL3NyYy9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKGUsdCxuKXtlLmV4cG9ydHM9bigvKiEgLi9zcmMvaW5kZXguanMgKi9cIi4vc3JjL2luZGV4LmpzXCIpfX0pfSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IFJlbXV4ZXIgZnJvbSAneGdwbGF5ZXItcmVtdXgnXG5pbXBvcnQgeyBGZXRjaExvYWRlciB9IGZyb20gJ3hncGxheWVyLWxvYWRlcidcbmltcG9ydCB7IEZsdkRlbXV4ZXIgfSBmcm9tICd4Z3BsYXllci1kZW11eCdcbmltcG9ydCB7IFRyYWNrcywgWGdCdWZmZXIsIFByZVNvdXJjZSB9IGZyb20gJ3hncGxheWVyLWJ1ZmZlcidcbmltcG9ydCB7IE1zZSwgRVZFTlRTIH0gZnJvbSAneGdwbGF5ZXItdXRpbHMnXG5pbXBvcnQgeyBDb21wYXRpYmlsaXR5IH0gZnJvbSAneGdwbGF5ZXItY29kZWMnXG5pbXBvcnQgUGxheWVyIGZyb20gJ3hncGxheWVyJ1xuXG5jb25zdCBSRU1VWF9FVkVOVFMgPSBFVkVOVFMuUkVNVVhfRVZFTlRTO1xuY29uc3QgREVNVVhfRVZFTlRTID0gRVZFTlRTLkRFTVVYX0VWRU5UUztcbmNvbnN0IExPQURFUl9FVkVOVFMgPSBFVkVOVFMuTE9BREVSX0VWRU5UU1xuY29uc3QgTVNFX0VWRU5UUyA9IEVWRU5UUy5NU0VfRVZFTlRTXG5cbmNvbnN0IFRhZyA9ICdGTFZDb250cm9sbGVyJ1xuXG5jbGFzcyBMb2dnZXIge1xuICB3YXJuICgpIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsdkNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvciAocGxheWVyKSB7XG4gICAgdGhpcy5UQUcgPSBUYWdcbiAgICB0aGlzLl9wbGF5ZXIgPSBwbGF5ZXJcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpbml0U2VnbWVudEFycml2ZWQ6IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgaW5pdCAoKSB7XG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnRkVUQ0hfTE9BREVSJywgRmV0Y2hMb2FkZXIpXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnTE9BREVSX0JVRkZFUicsIFhnQnVmZmVyKVxuXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnRkxWX0RFTVVYRVInLCBGbHZEZW11eGVyKVxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ1RSQUNLUycsIFRyYWNrcylcblxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ01QNF9SRU1VWEVSJywgUmVtdXhlci5NcDRSZW11eGVyKVxuICAgIHRoaXMuX2NvbnRleHQucmVnaXN0cnkoJ1BSRV9TT1VSQ0VfQlVGRkVSJywgUHJlU291cmNlKVxuXG4gICAgdGhpcy5fY29udGV4dC5yZWdpc3RyeSgnQ09NUEFUSUJJTElUWScsIENvbXBhdGliaWxpdHkpXG5cbiAgICB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdMT0dHRVInLCBMb2dnZXIpXG4gICAgdGhpcy5tc2UgPSB0aGlzLl9jb250ZXh0LnJlZ2lzdHJ5KCdNU0UnLCBNc2UpKHsgY29udGFpbmVyOiB0aGlzLl9wbGF5ZXIudmlkZW8gfSlcblxuICAgIHRoaXMuaW5pdExpc3RlbmVycygpXG4gIH1cblxuICBpbml0TGlzdGVuZXJzICgpIHtcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTE9BREVSX0RBVEFMT0FERUQsIHRoaXMuX2hhbmRsZUxvYWRlckRhdGFMb2FkZWQuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKExPQURFUl9FVkVOVFMuTE9BREVSX0VSUk9SLCB0aGlzLl9oYW5kbGVOZXR3b3JrRXJyb3IuYmluZCh0aGlzKSlcblxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLk1FRElBX0lORk8sIHRoaXMuX2hhbmRsZU1lZGlhSW5mby5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLk1FVEFEQVRBX1BBUlNFRCwgdGhpcy5faGFuZGxlTWV0YWRhdGFQYXJzZWQuYmluZCh0aGlzKSlcbiAgICB0aGlzLm9uKERFTVVYX0VWRU5UUy5ERU1VWF9DT01QTEVURSwgdGhpcy5faGFuZGxlRGVtdXhDb21wbGV0ZS5iaW5kKHRoaXMpKVxuICAgIHRoaXMub24oREVNVVhfRVZFTlRTLkRFTVVYX0VSUk9SLCB0aGlzLl9oYW5kbGVEZW11eEVycm9yLmJpbmQodGhpcykpXG5cbiAgICB0aGlzLm9uKFJFTVVYX0VWRU5UUy5JTklUX1NFR01FTlQsIHRoaXMuX2hhbmRsZUFwcGVuZEluaXRTZWdtZW50LmJpbmQodGhpcykpXG4gICAgdGhpcy5vbihSRU1VWF9FVkVOVFMuTUVESUFfU0VHTUVOVCwgdGhpcy5faGFuZGxlTWVkaWFTZWdtZW50LmJpbmQodGhpcykpXG5cbiAgICB0aGlzLm9uKE1TRV9FVkVOVFMuU09VUkNFX1VQREFURV9FTkQsIHRoaXMuX2hhbmRsZVNvdXJjZVVwZGF0ZUVuZC5iaW5kKHRoaXMpKVxuXG4gICAgdGhpcy5fcGxheWVyLm9uKCd0aW1ldXBkYXRlJywgdGhpcy5faGFuZGxlVGltZVVwZGF0ZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgX2hhbmRsZU1lZGlhSW5mbyAoKSB7XG4gICAgaWYgKCF0aGlzLl9jb250ZXh0Lm1lZGlhSW5mbykge1xuICAgICAgdGhpcy5lbWl0KERFTVVYX0VWRU5UUy5ERU1VWF9FUlJPUiwgbmV3IEVycm9yKCdmYWlsZWQgdG8gZ2V0IG1lZGlhaW5mbycpKVxuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVMb2FkZXJEYXRhTG9hZGVkICgpIHtcbiAgICB0aGlzLmVtaXRUbygnRkxWX0RFTVVYRVInLCBERU1VWF9FVkVOVFMuREVNVVhfU1RBUlQpXG4gIH1cblxuICBfaGFuZGxlTWV0YWRhdGFQYXJzZWQgKHR5cGUpIHtcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLlJFTVVYX01FVEFEQVRBLCB0eXBlKVxuICB9XG4gIF9oYW5kbGVEZW11eENvbXBsZXRlICgpIHtcbiAgICB0aGlzLmVtaXQoUkVNVVhfRVZFTlRTLlJFTVVYX01FRElBKVxuICB9XG5cbiAgX2hhbmRsZUFwcGVuZEluaXRTZWdtZW50ICgpIHtcbiAgICB0aGlzLnN0YXRlLmluaXRTZWdtZW50QXJyaXZlZCA9IHRydWVcbiAgICB0aGlzLm1zZS5hZGRTb3VyY2VCdWZmZXJzKClcbiAgfVxuXG4gIF9oYW5kbGVNZWRpYVNlZ21lbnQgKCkge1xuICAgIHRoaXMubXNlLmFkZFNvdXJjZUJ1ZmZlcnMoKVxuICAgIHRoaXMubXNlLmRvQXBwZW5kKCk7XG4gIH1cblxuICBfaGFuZGxlU291cmNlVXBkYXRlRW5kICgpIHtcbiAgICBjb25zdCB0aW1lID0gdGhpcy5fcGxheWVyLmN1cnJlbnRUaW1lO1xuICAgIGNvbnN0IHZpZGVvID0gdGhpcy5fcGxheWVyLnZpZGVvO1xuICAgIGNvbnN0IHByZWxvYWRUaW1lID0gdGhpcy5fcGxheWVyLmNvbmZpZy5wcmVsb2FkVGltZSB8fCA1XG5cbiAgICBjb25zdCB7IGxlbmd0aCB9ID0gdmlkZW8uYnVmZmVyZWQ7XG5cbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYnVmZmVyRW5kID0gdmlkZW8uYnVmZmVyZWQuZW5kKGxlbmd0aCAtIDEpO1xuICAgIGlmIChidWZmZXJFbmQgLSB0aW1lID4gcHJlbG9hZFRpbWUgKiAyKSB7XG4gICAgICB0aGlzLl9wbGF5ZXIuY3VycmVudFRpbWUgPSBidWZmZXJFbmQgLSBwcmVsb2FkVGltZVxuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVUaW1lVXBkYXRlICgpIHtcbiAgICBjb25zdCB0aW1lID0gdGhpcy5fcGxheWVyLmN1cnJlbnRUaW1lXG4gICAgaWYgKHRpbWUgPiAyKSB7XG4gICAgICAvLyDlnKjnm7Tmkq3ml7blj4rml7bmuIXnqbpidWZmZXLvvIzpmY3kvY7nm7Tmkq3lhoXlrZjljaDnlKhcbiAgICAgIHRoaXMubXNlLnJlbW92ZSh0aW1lIC0gMilcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlTmV0d29ya0Vycm9yICgpIHtcbiAgICB0aGlzLl9wbGF5ZXIuZW1pdCgnZXJyb3InLCBuZXcgUGxheWVyLkVycm9ycygnbmV0d29yaycsIHRoaXMuX3BsYXllci5jb25maWcudXJsKSlcbiAgfVxuXG4gIF9oYW5kbGVEZW11eEVycm9yKCkge1xuICAgIHRoaXMuX3BsYXllci5lbWl0KCdlcnJvcicsIG5ldyBQbGF5ZXIuRXJyb3JzKCdwYXJzZScsIHRoaXMuX3BsYXllci5jb25maWcudXJsKSlcbiAgfVxuXG4gIHNlZWsgKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5pbml0U2VnbWVudEFycml2ZWQpIHtcbiAgICAgIHRoaXMubG9hZERhdGEoKVxuICAgIH1cbiAgfVxuXG4gIGxvYWREYXRhICgpIHtcbiAgICB0aGlzLmVtaXQoTE9BREVSX0VWRU5UUy5MQURFUl9TVEFSVCwgdGhpcy5fcGxheWVyLmNvbmZpZy51cmwpXG4gIH1cblxuICBwYXVzZSAoKSB7XG4gICAgY29uc3QgbG9hZGVyID0gdGhpcy5fY29udGV4dC5nZXRJbnN0YW5jZSgnRkVUQ0hfTE9BREVSJylcblxuICAgIGlmIChsb2FkZXIpIHtcbiAgICAgIGxvYWRlci5jYW5jZWwoKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFBsYXllciBmcm9tICd4Z3BsYXllcidcbmltcG9ydCB7IENvbnRleHQsIEVWRU5UUyB9IGZyb20gJ3hncGxheWVyLXV0aWxzJztcbmltcG9ydCBGTFYgZnJvbSAnLi9mbHYtbGl2ZSdcbmNvbnN0IGZsdkFsbG93ZWRFdmVudHMgPSBFVkVOVFMuRmx2QWxsb3dlZEV2ZW50cztcblxuY2xhc3MgRmx2UGxheWVyIGV4dGVuZHMgUGxheWVyIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZylcbiAgICB0aGlzLmNvbnRleHQgPSBuZXcgQ29udGV4dChmbHZBbGxvd2VkRXZlbnRzKVxuICAgIHRoaXMuaW5pdEV2ZW50cygpXG4gICAgLy8gY29uc3QgcHJlbG9hZFRpbWUgPSBwbGF5ZXIuY29uZmlnLnByZWxvYWRUaW1lIHx8IDE1XG4gIH1cblxuICBzdGFydCAoKSB7XG4gICAgdGhpcy5pbml0Rmx2KClcbiAgICB0aGlzLmNvbnRleHQuaW5pdCgpXG4gICAgc3VwZXIuc3RhcnQodGhpcy5mbHYubXNlLnVybClcbiAgfVxuXG4gIGluaXRGbHZFdmVudHMgKGZsdikge1xuICAgIGNvbnN0IHBsYXllciA9IHRoaXM7XG4gICAgZmx2Lm9uY2UoRVZFTlRTLlJFTVVYX0VWRU5UUy5JTklUX1NFR01FTlQsICgpID0+IHtcbiAgICAgIFBsYXllci51dGlsLmFkZENsYXNzKHBsYXllci5yb290LCAneGdwbGF5ZXItaXMtbGl2ZScpXG4gICAgICBpZiAoIVBsYXllci51dGlsLmZpbmREb20odGhpcy5yb290LCAneGctbGl2ZScpKSB7XG4gICAgICAgIGNvbnN0IGxpdmUgPSBQbGF5ZXIudXRpbC5jcmVhdGVEb20oJ3hnLWxpdmUnLCAn5q2j5Zyo55u05pKtJywge30sICd4Z3BsYXllci1saXZlJylcbiAgICAgICAgcGxheWVyLmNvbnRyb2xzLmFwcGVuZENoaWxkKGxpdmUpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGZsdi5vbmNlKEVWRU5UUy5MT0FERVJfRVZFTlRTLkxPQURFUl9DT01QTEVURSwgKCkgPT4ge1xuICAgICAgLy8g55u05pKt5a6M5oiQ77yM5b6F5pKt5pS+5Zmo5pKt5a6M57yT5a2Y5ZCO5Y+R6YCB5YWz6Zet5LqL5Lu2XG4gICAgICBpZiAoIXBsYXllci5wYXVzZWQpIHtcbiAgICAgICAgY29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgZW5kID0gcGxheWVyLmdldEJ1ZmZlcmVkUmFuZ2UoKVsxXVxuICAgICAgICAgIGlmIChNYXRoLmFicyhwbGF5ZXIuY3VycmVudFRpbWUgLSBlbmQpIDwgMC41KSB7XG4gICAgICAgICAgICBwbGF5ZXIuZW1pdCgnZW5kZWQnKVxuICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGltZXIpXG4gICAgICAgICAgfVxuICAgICAgICB9LCAyMDApXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGluaXRFdmVudHMgKCkge1xuICAgIHRoaXMub24oJ3RpbWV1cGRhdGUnLCAoKSA9PiB7XG4gICAgICB0aGlzLmxvYWREYXRhKClcbiAgICB9KVxuXG4gICAgdGhpcy5vbignc2Vla2luZycsICgpID0+IHtcbiAgICAgIGNvbnN0IHRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lXG4gICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0QnVmZmVyZWRSYW5nZSgpXG4gICAgICBpZiAodGltZSA+IHJhbmdlWzFdIHx8IHRpbWUgPCByYW5nZVswXSkge1xuICAgICAgICB0aGlzLmZsdi5zZWVrKHRoaXMuY3VycmVudFRpbWUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGluaXRGbHYgKCkge1xuICAgIGNvbnN0IGZsdiA9IHRoaXMuY29udGV4dC5yZWdpc3RyeSgnRkxWX0NPTlRST0xMRVInLCBGTFYpKHRoaXMpXG4gICAgdGhpcy5pbml0Rmx2RXZlbnRzKGZsdilcbiAgICB0aGlzLmZsdiA9IGZsdlxuICB9XG5cbiAgcGxheSAoKSB7XG4gICAgaWYgKHRoaXMuX2hhc1N0YXJ0KSB7XG4gICAgICB0aGlzLl9kZXN0cm95KClcbiAgICAgIHRoaXMuY29udGV4dCA9IG5ldyBDb250ZXh0KGZsdkFsbG93ZWRFdmVudHMpXG4gICAgICBjb25zdCBmbHYgPSB0aGlzLmNvbnRleHQucmVnaXN0cnkoJ0ZMVl9DT05UUk9MTEVSJywgRkxWKSh0aGlzKVxuICAgICAgdGhpcy5pbml0Rmx2RXZlbnRzKGZsdilcbiAgICAgIHRoaXMuZmx2ID0gZmx2XG4gICAgICB0aGlzLmNvbnRleHQuaW5pdCgpXG4gICAgICBzdXBlci5zdGFydChmbHYubXNlLnVybClcbiAgICAgIHN1cGVyLnBsYXkoKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5wbGF5KClcbiAgICB9XG4gIH1cblxuICBwYXVzZSAoKSB7XG4gICAgc3VwZXIucGF1c2UoKVxuICAgIGlmICh0aGlzLmZsdikge1xuICAgICAgdGhpcy5mbHYucGF1c2UoKVxuICAgIH1cbiAgfVxuXG4gIGxvYWREYXRhICh0aW1lID0gdGhpcy5jdXJyZW50VGltZSkge1xuICAgIGlmICh0aGlzLmZsdikge1xuICAgICAgdGhpcy5mbHYuc2Vlayh0aW1lKVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX2Rlc3Ryb3koKVxuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxuXG4gIF9kZXN0cm95ICgpIHtcbiAgICB0aGlzLmNvbnRleHQuZGVzdHJveSgpXG4gICAgdGhpcy5mbHYgPSBudWxsXG4gICAgdGhpcy5jb250ZXh0ID0gbnVsbFxuICB9XG5cbiAgZ2V0IHNyYyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFNyY1xuICB9XG5cbiAgc2V0IHNyYyAodXJsKSB7XG4gICAgdGhpcy5wbGF5ZXIuY29uZmlnLnVybCA9IHVybFxuICAgIGlmICghdGhpcy5wYXVzZWQpIHtcbiAgICAgIHRoaXMucGF1c2UoKVxuICAgICAgdGhpcy5vbmNlKCdwYXVzZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5zdGFydCh1cmwpXG4gICAgICB9KVxuICAgICAgdGhpcy5vbmNlKCdjYW5wbGF5JywgKCkgPT4ge1xuICAgICAgICB0aGlzLnBsYXkoKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydCh1cmwpXG4gICAgfVxuICAgIHRoaXMub25jZSgnY2FucGxheScsICgpID0+IHtcbiAgICAgIHRoaXMuY3VycmVudFRpbWUgPSAwXG4gICAgfSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZsdlBsYXllclxuIl0sInNvdXJjZVJvb3QiOiIifQ==