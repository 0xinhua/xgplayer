window.HlsPlayer=function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}({"../xgplayer-buffer/index.js":
/*!***********************************!*\
  !*** ../xgplayer-buffer/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Track:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").default,Tracks:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").Tracks,AudioTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").AudioTrack,VideoTrack:i(/*! ./src/track */"../xgplayer-buffer/src/track.js").VideoTrack,XgBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").XgBuffer,RemuxBuffer:i(/*! ./src/buffer */"../xgplayer-buffer/src/buffer.js").RemuxBuffer,PreSource:i(/*! ./src/presouce */"../xgplayer-buffer/src/presouce.js").default}},"../xgplayer-buffer/src/buffer.js":
/*!****************************************!*\
  !*** ../xgplayer-buffer/src/buffer.js ***!
  \****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.XgBuffer=class{constructor(e){this.length=e||0,this.historyLen=e||0,this.array=[],this.offset=0}push(e){this.array.push(e),this.length+=e.byteLength,this.historyLen+=e.byteLength}shift(e){if(this.array.length<1)return new Uint8Array(0);if(void 0===e)return this._shiftBuffer();if(this.offset+e===this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset=0,this.array.shift(),this.length-=e,t}if(this.offset+e<this.array[0].length){let t=this.array[0].slice(this.offset,this.offset+e);return this.offset+=e,this.length-=e,t}let t=new Uint8Array(e),i=0;for(;this.array.length>0&&e>0;){if(this.offset+e<this.array[0].length){let s=this.array[0].slice(this.offset,this.offset+e);t.set(s,i),this.offset+=e,this.length-=e,e=0;break}{let s=this.array[0].length-this.offset;t.set(this.array[0].slice(this.offset,this.array[0].length),i),this.array.shift(),this.offset=0,i+=s,this.length-=s,e-=s}}return t}clear(){this.array=[],this.length=0,this.offset=0}destroy(){this.clear(),this.historyLen=0}_shiftBuffer(){return this.length-=this.array[0].length,this.offset=0,this.array.shift()}toInt(e,t){let i=0,s=this.offset+e;for(;s<this.offset+t+e;)s<this.array[0].length?i=256*i+this.array[0][s]:this.array[1]&&(i=256*i+this.array[1][s-this.array[0].length]),s++;return i}};t.RemuxBuffer=class{constructor(){this.video=[],this.audio=[]}destroy(){this.video=[],this.audio=[]}}},"../xgplayer-buffer/src/presouce.js":
/*!******************************************!*\
  !*** ../xgplayer-buffer/src/presouce.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.mimetype="",this.init=null,this.data=[]}}t.default=class{constructor(){this.sources={}}getSource(e){return this.sources[e]}createSource(e){return this.sources[e]=new s,this.sources[e]}clear(){this.sources={}}destroy(){this.sources={}}}},"../xgplayer-buffer/src/track.js":
/*!***************************************!*\
  !*** ../xgplayer-buffer/src/track.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.id=-1,this.sequenceNumber=0,this.samples=[],this.droppedSamples=[],this.length=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0}distroy(){this.reset(),this.id=-1}}t.default=s;t.AudioTrack=class extends s{constructor(){super(),this.TAG="AudioTrack",this.type="audio"}};t.VideoTrack=class extends s{constructor(){super(),this.TAG="VideoTrack",this.type="video",this.dropped=0}reset(){this.sequenceNumber=0,this.samples=[],this.length=0,this.dropped=0}};t.Tracks=class{constructor(){this.audioTrack=null,this.videoTrack=null}destroy(){this.audioTrack=null,this.videoTrack=null}}},"../xgplayer-codec/index.js":
/*!**********************************!*\
  !*** ../xgplayer-codec/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Nalunit:i(/*! ./src/h264/nalunit */"../xgplayer-codec/src/h264/nalunit/index.js").default,SpsParser:i(/*! ./src/h264/nalunit/sps */"../xgplayer-codec/src/h264/nalunit/sps.js").default,Compatibility:i(/*! ./src/compatibility */"../xgplayer-codec/src/compatibility.js").default}},"../xgplayer-codec/src/aac/aac-helper.js":
/*!***********************************************!*\
  !*** ../xgplayer-codec/src/aac/aac-helper.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{static getSilentFrame(e,t){if("mp4a.40.2"===e){if(1===t)return new Uint8Array([0,200,0,128,35,128]);if(2===t)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(3===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(4===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(5===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(6===t)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224])}else{if(1===t)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(2===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(3===t)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94])}return null}}},"../xgplayer-codec/src/compatibility.js":
/*!**********************************************!*\
  !*** ../xgplayer-codec/src/compatibility.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! ./aac/aac-helper */"../xgplayer-codec/src/aac/aac-helper.js"),n=(s=a)&&s.__esModule?s:{default:s};const{REMUX_EVENTS:o}=r.EVENTS;class l{constructor(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.allAudioSamplesCount=0,this.allVideoSamplesCount=0,this._firstAudioSample=null,this._firstVideoSample=null,this.filledAudioSamples=[],this.filledVideoSamples=[],this._videoLargeGap=0,this._audioLargeGap=0}init(){this.before(o.REMUX_MEDIA,this.doFix.bind(this))}reset(){this.nextAudioDts=0,this.nextVideoDts=0,this.lastAudioSamplesLen=0,this.lastVideoSamplesLen=0,this.lastVideoDts=void 0,this.lastAudioDts=void 0,this.filledAudioSamples=[],this.filledVideoSamples=[]}doFix(){const{isFirstAudioSamples:e,isFirstVideoSamples:t}=this.getFirstSample();this.recordSamplesCount(),this._firstVideoSample&&this.fixRefSampleDuration(this.videoTrack.meta,this.videoTrack.samples),this._firstAudioSample&&this.fixRefSampleDuration(this.audioTrack.meta,this.audioTrack.samples),this.doFixVideo(t),this.doFixAudio(e)}doFixVideo(e){let{samples:t,meta:i}=this.videoTrack;if(i.frameRate&&!1===i.frameRate.fixed)return;if(!t||!t.length||!this._firstVideoSample)return;const s=t[0],r=t.length;this._videoLargeGap>0&&l.doFixLargeGap(t,this._videoLargeGap),0===this.nextVideoDts&&s.options&&s.options.start&&(this.nextVideoDts=s.options.start),s.dts!==this._firstVideoSample.dts&&l.detectLargeGap(this.nextVideoDts,s)&&(this._videoLargeGap=this.nextVideoDts-s.dts,console.log("nextDts",this.nextVideoDts,"firstSampleDts",s.dts),l.doFixLargeGap(t,this._videoLargeGap));const a=s.dts;if(e&&this._firstAudioSample){const e=this._firstVideoSample.dts,r=e-this._firstAudioSample.dts;if(r>2*i.refSampleDuration){const a=Math.floor(r/i.refSampleDuration);for(let r=0;r<a;r++){const a=Object.assign({},s);a.dts=e-(r+1)*i.refSampleDuration,a.pts=a.dts+a.cts,t.unshift(a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})}}}let n;if(this.nextVideoDts){n=a-this.nextVideoDts;const e=Math.abs(n);if(n>2*i.refSampleDuration){const e=Math.floor(n/i.refSampleDuration);for(let s=0;s<e;s++){const e=Object.assign({},t[0]),r=a-(s+1)*i.refSampleDuration;e.dts=r>this.nextVideoDts?r:this.nextVideoDts,e.pts=e.dts+e.cts,this.videoTrack.samples.unshift(e),this.filledVideoSamples.push({dts:e.dts,size:e.data.byteLength})}}else e<=10&&e>0&&(t[0].dts=this.nextVideoDts,t[0].originDts=t[0].dts,t[0].cts=void 0!==t[0].cts?t[0].cts:t[0].pts-t[0].dts,t[0].pts=t[0].dts+t[0].cts)}const o=t[t.length-1].dts,d=t.length>=2?o-t[t.length-2].dts:i.refSampleDuration;this.lastVideoSamplesLen=r,this.nextVideoDts=o+d,this.lastVideoDts=o;for(let e=0,s=t.length;e<s;e++){const s=t[e],r=t[e+1];if(!r)break;const a=r.dts-s.dts;if(a>2*i.refSampleDuration){let n=Math.floor(a/i.refSampleDuration),o=0;for(;o<n;){const a=Object.assign({},r);a.dts=s.dts+(o+1)*i.refSampleDuration,a.pts=a.dts+a.cts,a<r.dts&&(t.splice(e,0,a),this.filledVideoSamples.push({dts:a.dts,size:a.data.byteLength})),o++,e++}}}this.videoTrack.samples=t}doFixAudio(e){let{samples:t,meta:i}=this.audioTrack;if(!t||!t.length)return;const s=t.length,r=n.default.getSilentFrame(i.codec,i.channelCount),a=this._firstAudioSample,o=t[0];if(this._audioLargeGap>0&&l.doFixLargeGap(t,this._audioLargeGap),0===this.nextAudioDts&&o.options&&o.options.start&&(this.nextAudioDts=o.options.start),o.dts!==this._firstAudioSample.dts&&l.detectLargeGap(this.nextAudioDts,o)&&(this._audioLargeGap=this.nextAudioDts-o.dts,l.doFixLargeGap(t,this._audioLargeGap)),this._firstVideoSample&&e){const e=this._firstVideoSample.pts?this._firstVideoSample.pts:this._firstVideoSample.dts+this._firstVideoSample.cts;if(a.dts-e>i.refSampleDuration){const s=Math.floor((a.dts-e)/i.refSampleDuration);for(let e=0;e<s;e++){const s={data:r,datasize:r.byteLength,dts:a.dts-(e+1)*i.refSampleDuration,filtered:0};t.unshift(s),this.filledAudioSamples.push({dts:s.dts,size:s.data.byteLength})}}}let d;const h=t[0].dts;if(this.nextAudioDts){d=h-this.nextAudioDts;const e=Math.abs(d);if(e>i.refSampleDuration&&1===s&&1===this.lastAudioSamplesLen&&(i.refSampleDurationFixed=void 0),d>2*i.refSampleDuration)if(1===s&&1===this.lastAudioSamplesLen)i.refSampleDurationFixed=void 0!==i.refSampleDurationFixed?i.refSampleDurationFixed+d:i.refSampleDuration+d;else{const e=Math.floor(d/i.refSampleDuration);for(let s=0;s<e;s++){const e=h-(s+1)*i.refSampleDuration,r=Object.assign({},t[0],{dts:e>this.nextAudioDts?e:this.nextAudioDts});this.filledAudioSamples.push({dts:r.dts,size:r.data.byteLength}),this.audioTrack.samples.unshift(r)}}else e<=10&&e>0&&(t[0].dts=this.nextAudioDts,t[0].pts=this.nextAudioDts)}const u=t[t.length-1].dts,c=t.length>=2?u-t[t.length-2].dts:i.refSampleDuration;this.lastAudioSamplesLen=s,this.nextAudioDts=i.refSampleDurationFixed?u+i.refSampleDurationFixed:u+c,this.lastAudioDts=u;for(let e=0,i=t.length;e<i;e++){const i=t[e],s=t[e+1];if(!s)break;const r=s.dts-i.dts;t[e].duration=r}this.audioTrack.samples=l.sortAudioSamples(t)}getFirstSample(){let{samples:e}=this.videoTrack,{samples:t}=this.audioTrack,i=!1,s=!1;return!this._firstVideoSample&&e.length&&(this._firstVideoSample=l.findFirstVideoSample(e),i=!0),!this._firstAudioSample&&t.length&&(this._firstAudioSample=l.findFirstAudioSample(t),s=!0),{isFirstVideoSamples:i,isFirstAudioSamples:s}}fixRefSampleDuration(e,t){const i="video"===e.type,s=i?this.allVideoSamplesCount:this.allAudioSamplesCount,r=i?this._firstVideoSample.dts:this._firstAudioSample.dts,a=i?this.filledVideoSamples.length:this.filledAudioSamples.length;if(!e.refSampleDuration||e.refSampleDuration<=0||Number.isNaN(e.refSampleDuration)){if(t.length>=1){const i=t[t.length-1].dts;e.refSampleDuration=Math.floor((i-r)/(s+a-1))}}else if(e.refSampleDuration&&t.length>=10){const i=(t[t.length-1].dts-t[0].dts)/(t.length-1);e.refSampleDuration=Math.floor(Math.abs(e.refSampleDuration-i)<=5?e.refSampleDuration:i)}}recordSamplesCount(){const{audioTrack:e,videoTrack:t}=this;this.allAudioSamplesCount+=e.samples.length,this.allVideoSamplesCount+=t.samples.length}removeInvalidSamples(){const{_firstVideoSample:e,_firstAudioSample:t}=this;this.audioTrack.samples=this.audioTrack.samples.filter(e=>e.dts>=t.dts&&(void 0===this.lastAudioDts||e.dts>this.lastAudioDts)),this.videoTrack.samples=this.videoTrack.samples.filter(t=>t.dts>=e.dts&&(void 0===this.lastVideoDts||t.dts>this.lastVideoDts))}static sortAudioSamples(e){return 1===e.length?e:e.sort((e,t)=>e.dts-t.dts)}static findFirstAudioSample(e){return e&&0!==e.length?l.sortAudioSamples(e)[0]:null}static findFirstVideoSample(e){if(!e.length)return null;const t=e.sort((e,t)=>e.dts-t.dts);for(let e=0,i=t.length;e<i;e++)if(t[e].isKeyframe)return t[e]}static detectLargeGap(e,t){const i=t.dts||0,s=e-i>=1e3||i-e>=200,r=t.options&&t.options.discontinue;return s||r}static doFixLargeGap(e,t){for(let i=0,s=e.length;i<s;i++){const s=e[i];s.dts+=t,s.pts&&(s.pts+=t)}}get tracks(){return this._context.getInstance("TRACKS")}get audioTrack(){return this.tracks?this.tracks.audioTrack:null}get videoTrack(){return this.tracks?this.tracks.videoTrack:null}}t.default=l},"../xgplayer-codec/src/h264/nalunit/golomb.js":
/*!****************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/golomb.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.TAG="Golomb",this._buffer=e,this._bufferIndex=0,this._totalBytes=e.byteLength,this._totalBits=8*e.byteLength,this._currentWord=0,this._currentWordBitsLeft=0}destroy(){this._buffer=null}_fillCurrentWord(){let e=this._totalBytes-this._bufferIndex,t=Math.min(4,e),i=new Uint8Array(4);i.set(this._buffer.subarray(this._bufferIndex,this._bufferIndex+t)),this._currentWord=new DataView(i.buffer).getUint32(0,!1),this._bufferIndex+=t,this._currentWordBitsLeft=8*t}readBits(e){if(e<=this._currentWordBitsLeft){let t=this._currentWord>>>32-e;return this._currentWord<<=e,this._currentWordBitsLeft-=e,t}let t=this._currentWordBitsLeft?this._currentWord:0;this._currentWordBitsLeft;let i=e-this._currentWordBitsLeft;this._fillCurrentWord();let s=Math.min(i,this._currentWordBitsLeft),r=this._currentWord>>>32-s;return this._currentWord<<=s,this._currentWordBitsLeft-=s,t=t<<s|r}readBool(){return 1===this.readBits(1)}readByte(){return this.readBits(8)}_skipLeadingZero(){let e;for(e=0;e<this._currentWordBitsLeft;e++)if(0!=(this._currentWord&2147483648>>>e))return this._currentWord<<=e,this._currentWordBitsLeft-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}readUEG(){let e=this._skipLeadingZero();return this.readBits(e+1)-1}readSEG(){let e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}},"../xgplayer-codec/src/h264/nalunit/index.js":
/*!***************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! ./sps */"../xgplayer-codec/src/h264/nalunit/sps.js"),a=(s=r)&&s.__esModule?s:{default:s};class n{static getNalunits(e){if(e.length-e.position<4)return[];let t=e.dataview,i=e.position;return 1===t.getInt32(i)||0===t.getInt16(i)&&1===t.getInt8(i+2)?n.getAnnexbNals(e):n.getAvccNals(e)}static getAnnexbNals(e){let t=[],i=n.getHeaderPositionAnnexB(e),s=i.pos,r=s;for(;s<e.length-4;){let a=e.buffer.slice(s,s+i.headerLength);i.pos===e.position&&e.skip(i.headerLength),r=(i=n.getHeaderPositionAnnexB(e)).pos;let o={header:a,body:new Uint8Array(e.buffer.slice(s+a.byteLength,r))};n.analyseNal(o),t.push(o),e.skip(r-e.position),s=r}return t}static getAvccNals(e){let t=[];for(;e.position<e.length-4;){let i=e.dataview.getInt32();if(!(e.length-e.position>=i))break;{let s=e.buffer.slice(e.position,e.position+4);e.skip(4);let r=e.buffer.slice(e.position,e.position+i);e.skip(i);let a={header:s,body:r};n.analyseNal(a),t.push(a)}}return t}static analyseNal(e){switch(31&e.body[0]){case 1:e.ndr=!0;break;case 5:e.idr=!0;break;case 6:break;case 7:e.sps=a.default.parseSPS(e.body);break;case 8:e.pps=!0}}static getHeaderPositionAnnexB(e){let t=e.position,i=0;for(;3!==i&&4!==i&&t<e.length-4;)0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)?i=4:1===e.dataview.getInt8(t+2)?i=3:t++:t++;return t===e.length-4&&(0===e.dataview.getInt16(t)?1===e.dataview.getInt16(t+2)&&(i=4):(t++,0===e.dataview.getInt16(t)&&1===e.dataview.getInt8(t)?i=3:t=e.length)),{pos:t,headerLength:i}}static getAvcc(e,t){let i=new Uint8Array(e.byteLength+t.byteLength+11);i[0]=1,i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=255,i[5]=225;let s=6;return i.set(new Uint8Array([e.byteLength>>>8&255,255&e.byteLength]),s),s+=2,i.set(e,s),i[s+=e.byteLength]=1,s++,i.set(new Uint8Array([t.byteLength>>>8&255,255&t.byteLength]),s),s+=2,i.set(t,s),i}}t.default=n},"../xgplayer-codec/src/h264/nalunit/sps.js":
/*!*************************************************!*\
  !*** ../xgplayer-codec/src/h264/nalunit/sps.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! ./golomb */"../xgplayer-codec/src/h264/nalunit/golomb.js"),a=(s=r)&&s.__esModule?s:{default:s};class n{static _ebsp2rbsp(e){let t=e,i=t.byteLength,s=new Uint8Array(i),r=0;for(let e=0;e<i;e++)e>=2&&3===t[e]&&0===t[e-1]&&0===t[e-2]||(s[r]=t[e],r++);return new Uint8Array(s.buffer,0,r)}static parseSPS(e){let t=n._ebsp2rbsp(e),i=new a.default(t);i.readByte();let s=i.readByte();i.readByte();let r=i.readByte();i.readUEG();let o=n.getProfileString(s),l=n.getLevelString(r),d=1,h=420,u=[0,420,422,444],c=8;if((100===s||110===s||122===s||244===s||44===s||83===s||86===s||118===s||128===s||138===s||144===s)&&(3===(d=i.readUEG())&&i.readBits(1),d<=3&&(h=u[d]),c=i.readUEG()+8,i.readUEG(),i.readBits(1),i.readBool())){let e=3!==d?8:12;for(let t=0;t<e;t++)i.readBool()&&(t<6?n._skipScalingList(i,16):n._skipScalingList(i,64))}i.readUEG();let f=i.readUEG();if(0===f)i.readUEG();else if(1===f){i.readBits(1),i.readSEG(),i.readSEG();let e=i.readUEG();for(let t=0;t<e;t++)i.readSEG()}i.readUEG(),i.readBits(1);let p=i.readUEG(),_=i.readUEG(),m=i.readBits(1);0===m&&i.readBits(1),i.readBits(1);let y=0,g=0,E=0,T=0;i.readBool()&&(y=i.readUEG(),g=i.readUEG(),E=i.readUEG(),T=i.readUEG());let S=1,A=1,v=0,b=!0,R=0,x=0;if(i.readBool()){if(i.readBool()){let e=i.readByte(),t=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],s=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];e>0&&e<16?(S=t[e-1],A=s[e-1]):255===e&&(S=i.readByte()<<8|i.readByte(),A=i.readByte()<<8|i.readByte())}if(i.readBool()&&i.readBool(),i.readBool()&&(i.readBits(4),i.readBool()&&i.readBits(24)),i.readBool()&&(i.readUEG(),i.readUEG()),i.readBool()){let e=i.readBits(32),t=i.readBits(32);b=i.readBool(),v=(R=t)/(x=2*e)}}let D=1;1===S&&1===A||(D=S/A);let w=0,U=0;if(0===d)w=1,U=2-m;else{w=3===d?1:2,U=(1===d?2:1)*(2-m)}let L=16*(p+1),M=16*(_+1)*(2-m);L-=(y+g)*w,M-=(E+T)*U;let O=Math.ceil(L*D);return i.destroy(),i=null,{profile_string:o,level_string:l,bit_depth:c,chroma_format:h,chroma_format_string:n.getChromaFormatString(h),frame_rate:{fixed:b,fps:v,fps_den:x,fps_num:R},par_ratio:{width:S,height:A},codec_size:{width:L,height:M},present_size:{width:O,height:M}}}static _skipScalingList(e,t){let i=8,s=8,r=0;for(let a=0;a<t;a++)0!==s&&(s=(i+(r=e.readSEG())+256)%256),i=0===s?i:s}static getProfileString(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}static getLevelString(e){return(e/10).toFixed(1)}static getChromaFormatString(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}static toVideoMeta(e){let t={};e&&e.codec_size&&(t.codecWidth=e.codec_size.width,t.codecHeight=e.codec_size.height,t.presentWidth=e.present_size.width,t.presentHeight=e.present_size.height),t.profile=e.profile_string,t.level=e.level_string,t.bitDepth=e.bit_depth,t.chromaFormat=e.chroma_format,t.parRatio={width:e.par_ratio.width,height:e.par_ratio.height},t.frameRate=e.frame_rate;let i=t.frameRate.fps_den,s=t.frameRate.fps_num;t.refSampleDuration=Math.floor(t.timescale*(i/s))}}t.default=n},"../xgplayer-demux/index.js":
/*!**********************************!*\
  !*** ../xgplayer-demux/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={M3U8Parser:i(/*! ./src/hls/demuxer/m3u8parser */"../xgplayer-demux/src/hls/demuxer/m3u8parser.js").default,TsDemuxer:i(/*! ./src/hls/demuxer/ts */"../xgplayer-demux/src/hls/demuxer/ts.js").default,Playlist:i(/*! ./src/hls/playlist */"../xgplayer-demux/src/hls/playlist.js").default,FlvDemuxer:i(/*! ./src/flv/index */"../xgplayer-demux/src/flv/index.js").default}},"../xgplayer-demux/src/flv/amf-parser.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/flv/amf-parser.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const r={NUMBER:0,BOOLEAN:1,STRING:2,OBJECT:3,MIX_ARRAY:8,OBJECT_END:9,STRICT_ARRAY:10,DATE:11,LONE_STRING:12};t.default=class{constructor(){this.offset=0,this.readOffset=this.offset}resolve(e,t){if(t<3)throw new Error("not enough data for metainfo");const i={},s=this.parseValue(e),r=this.parseValue(e,t-s.bodySize);return i[s.data]=r.data,this.resetStatus(),i}resetStatus(){this.offset=0,this.readOffset=this.offset}parseString(e){const t=new DataView(e,this.readOffset).getUint16(0,!s.isLe);let i="";i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"";let r=t+2;return this.readOffset+=r,{data:i,bodySize:t+2}}parseDate(e,t){const i=new DataView(e,this.readOffset,t);let r=i.getFloat64(0,!s.isLe);return r+=60*i.getInt16(8,!s.isLe)*1e3,this.readOffset+=10,{data:new Date(r),bodySize:10}}parseObject(e,t){const i=this.parseString(e,t),s=this.parseValue(e,t-i.bodySize);return{data:{name:i.data,value:s.data},bodySize:i.bodySize+s.bodySize,isObjEnd:s.isObjEnd}}parseLongString(e){const t=new DataView(e,this.readOffset).getUint32(0,!s.isLe);let i="";return i=t>0?s.UTF8.decode(new Uint8Array(e,this.readOffset+2,t)):"",this.readOffset+=t+4,{data:i,bodySize:t+4}}parseValue(e,t){let i=new ArrayBuffer;i=e instanceof ArrayBuffer?e:e.buffer;const{NUMBER:a,BOOLEAN:n,STRING:o,OBJECT:l,MIX_ARRAY:d,OBJECT_END:h,STRICT_ARRAY:u,DATE:c,LONE_STRING:f}=r,p=new DataView(i,this.readOffset,t);let _=!1;const m=p.getUint8(0);let y=1;this.readOffset+=1;let g=null;switch(m){case a:g=p.getFloat64(1,!s.isLe),this.readOffset+=8,y+=8;break;case n:g=!!p.getUint8(1),this.readOffset+=1,y+=1;break;case o:{const e=this.parseString(i);g=e.data,y+=e.bodySize;break}case l:{g={};let e=0;for(16777215&p.getUint32(t-4,!s.isLe)&&(e=3);y<t-4;){const s=this.parseObject(i,t-y-e);if(s.isObjectEnd)break;g[s.data.name]=s.data.value,y+=s.bodySize}if(y<=t-3){9===(16777215&p.getUint32(y-1,!s.isLe))&&(this.readOffset+=3,y+=3)}break}case d:{g={},y+=4,this.readOffset+=4;let e=0;for(9==(16777215&p.getUint32(t-4,!s.isLe))&&(e=3);y<t-8;){const s=this.parseObject(i,t-y-e);if(s.isObjectEnd)break;g[s.data.name]=s.data.value,y+=s.bodySize}if(y<=t-3){9===(16777215&p.getUint32(y-1,!s.isLe))&&(y+=3,this.readOffset+=3)}break}case h:g=null,_=!0;break;case u:{g=[];const e=p.getUint32(1,!s.isLe);y+=4,this.readOffset+=4;for(let s=0;s<e;s++){const e=this.parseValue(i,t-y);g.push(e.data),y+=e.bodySize}break}case c:{const e=this.parseDate(i,t-1);g=e.data,y+=e.bodySize;break}case f:{const e=this.parseLongString(i,t-1);g=e.data,y+=e.bodySize;break}default:y=t}return{data:g,bodySize:y,isObjEnd:_}}}},"../xgplayer-demux/src/flv/index.js":
/*!******************************************!*\
  !*** ../xgplayer-demux/src/flv/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),n=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),o=i(/*! ./amf-parser */"../xgplayer-demux/src/flv/amf-parser.js"),l=(s=o)&&s.__esModule?s:{default:s};const d=r.EVENTS.DEMUX_EVENTS;class h{constructor(){this._firstFragmentLoaded=!1,this._trackNum=0,this._hasScript=!1}init(){this.on(d.DEMUX_START,this.doParseFlv.bind(this))}static isFlvFile(e){return!(70!==e[0]||76!==e[1]||86!==e[2]||1!==e[3])}static getPlayType(e){const t={hasVideo:!1,hasAudio:!1};return!0&e&&(t.hasVideo=!0),!0&e&&(t.hasAudio=!0),t}doParseFlv(){if(this._firstFragmentLoaded){if(this.loaderBuffer.length<11)return;let e,t=1e5;do{e=this._parseFlvTag()}while(e&&t-- >0);this.emit(d.DEMUX_COMPLETE)}else{if(this.loaderBuffer.length<13)return;const e=this.loaderBuffer.shift(13);this.parseFlvHeader(e),this.doParseFlv()}}parseFlvHeader(e){if(h.isFlvFile(e)){this._firstFragmentLoaded=!0;const t=h.getPlayType(e[4]);t.hasVideo&&this.initVideoTrack(),t.hasAudio&&this.initAudioTrack()}else this.emit(d.DEMUX_ERROR,new Error("invalid flv file")),this.doParseFlv();this.doParseFlv()}initVideoTrack(){this._trackNum++;let e=new n.VideoTrack;e.meta=new r.VideoTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.videoTrack=e}initAudioTrack(){this._trackNum++;let e=new n.AudioTrack;e.meta=new r.AudioTrackMeta,e.id=e.meta.id=this._trackNum,this.tracks.audioTrack=e}_parseFlvTag(){if(this.loaderBuffer.length<11)return null;let e=this._parseFlvTagHeader();return e&&this._processChunk(e),e}_parseFlvTagHeader(){let e=0,t={},i=this.loaderBuffer.toInt(e,1);if(e+=1,t.filtered=(32&i)>>>5,t.tagType=31&i,t.datasize=this.loaderBuffer.toInt(e,3),e+=3,8!==t.tagType&&9!==t.tagType&&11!==t.tagType&&18!==t.tagType||0!==this.loaderBuffer.toInt(8,3))return this.loaderBuffer&&this.loaderBuffer.length>0&&this.loaderBuffer.shift(1),this.emit(d.DEMUX_ERROR,this.TAG,new Error("tagType "+t.tagType),!1),null;if(this.loaderBuffer.length<t.datasize+15)return null;this.loaderBuffer.shift(4);let s=this.loaderBuffer.toInt(0,3);this.loaderBuffer.shift(3);let r=this.loaderBuffer.shift(1)[0];return r>0&&(s+=16777216*r),t.dts=s,this.loaderBuffer.shift(3),t}_processChunk(e){switch(e.tagType){case 18:this._parseScriptData(e);break;case 8:this._parseAACData(e);break;case 9:this._parseHevcData(e);break;case 11:this.loaderBuffer.shift(3);break;default:this.loaderBuffer.shift(1)}}_parseScriptData(e){let t=this.tracks.audioTrack,i=this.tracks.videoTrack,s=this.loaderBuffer.shift(e.datasize);const r=(new l.default).resolve(s,s.length),a=this._context.onMetaData=r?r.onMetaData:void 0;if(this._context.mediaInfo.duration=a.duration,this._context.mediaInfo.hasVideo=a.hasVideo,this._context.mediaInfo.hsaAudio=a.hasAudio,this._datasizeValidator(e.datasize)&&(this.emit(d.MEDIA_INFO),this._hasScript=!0),t&&!t.hasSpecificConfig){let e=t.meta;switch(a.audiosamplerate&&(e.sampleRate=a.audiosamplerate),a.audiochannels&&(e.channelCount=a.audiochannels),a.audiosamplerate){case 44100:e.sampleRateIndex=4;break;case 22050:e.sampleRateIndex=7;break;case 11025:e.sampleRateIndex=10}}if(i&&!i.hasSpecificConfig){let e=i.meta;if("number"==typeof a.framerate){let t=Math.floor(1e3*a.framerate);if(t>0){let i=t/1e3;e.frameRate||(e.frameRate={}),e.frameRate.fixed=!0,e.frameRate.fps=i,e.frameRate.fps_num=t,e.frameRate.fps_den=1e3}}}}_aacSequenceHeaderParser(e){let t={hasSpecificConfig:!0};t.objectType=e[1]>>>3,t.sampleRateIndex=(7&e[1])<<1|e[2]>>>7,t.audiosamplerate=this._switchAudioSampleRate(t.sampleRateIndex),t.channelCount=(120&e[2])>>>3,t.frameLength=(4&e[2])>>>2,t.dependsOnCoreCoder=(2&e[2])>>>1,t.extensionFlagIndex=1&e[2],t.codec=`mp4a.40.${t.objectType}`;let i,s,r=window.navigator.userAgent.toLowerCase(),a=t.sampleRateIndex;return-1!==r.indexOf("firefox")?t.sampleRateIndex>=6?(t.objectType=5,s=new Array(4),i=a-3):(t.objectType=2,s=new Array(2),i=a):-1!==r.indexOf("android")?(t.objectType=2,s=new Array(2),i=a):(t.objectType=5,i=t.sampleRateIndex,s=new Array(4),t.sampleRateIndex>=6?i=t.sampleRateIndex-3:1===t.channelCount&&(t.objectType=2,s=new Array(2),i=t.sampleRateIndex)),s[0]=t.objectType<<3,s[0]|=(15&t.sampleRateIndex)>>>1,s[1]=(15&t.sampleRateIndex)<<7,s[1]|=(15&t.channelCount)<<3,5===t.objectType&&(s[1]|=(15&i)>>>1,s[2]=(1&i)<<7,s[2]|=8,s[3]=0),t.config=s,t}_parseAACData(e){let t=this.tracks.audioTrack;if(!t)return;let i=t.meta;i||(t.meta=new r.AudioTrackMeta);let s=this.loaderBuffer.shift(1)[0];e.data=this.loaderBuffer.shift(e.datasize-1);let a=(240&s)>>>4;t.format=a,10!==a&&this.emit(d.DEMUX_ERROR,new Error(`invalid audio format: ${a}`)),10!==a||this._hasAudioSequence||(i.sampleRate=this._switchAudioSamplingFrequency(s),i.sampleRateIndex=(12&s)>>>2,i.frameLenth=(2&s)>>>1,i.channelCount=1&s,i.refSampleDuration=Math.floor(1024/i.audioSampleRate*i.timescale));let n=i.audioSampleRate,o=i.sampleRateIndex,l=i.refSampleDuration;delete e.tagType;let h=this._datasizeValidator(e.datasize);if(0===e.data[0]){let t=this._aacSequenceHeaderParser(e.data);n=t.audiosamplerate||i.audioSampleRate,o=t.sampleRateIndex||i.sampleRateIndex,l=Math.floor(1024/n*i.timescale),i.channelCount=t.channelCount,i.sampleRate=n,i.sampleRateIndex=o,i.refSampleDuration=l,i.duration=this._context.mediaInfo.duration*i.timescale,i.config=t.config;const s=this._context.mediaInfo.audio;s.codec=t.codec,s.channelCount=t.channelCount,s.sampleRate=n,s.sampleRateIndex=t.audioSampleRateIndex,this._hasScript&&!this._hasAudioSequence?this.emit(d.METADATA_PARSED,"audio"):this._hasScript&&this._hasAudioSequence&&(this.emit(d.AUDIO_METADATA_CHANGE),this.emit(d.METADATA_PARSED,"audio")),this._hasAudioSequence=!0}else e.data=e.data.slice(1,e.data.length),t.samples.push(e);h||this.emit(d.DEMUX_ERROR,this.TAG,new Error("TAG length error at "+e.datasize),!1)}_parseHevcData(e){let t=this.loaderBuffer.shift(1)[0];e.frameType=(240&t)>>>4,e.isKeyframe=1===e.frameType;let i=15&t;if(this.tracks.videoTrack.codecID=i,e.avcPacketType=this.loaderBuffer.shift(1)[0],e.cts=this.loaderBuffer.toInt(0,3),this.loaderBuffer.shift(3),12===i){const t=this.loaderBuffer.shift(e.datasize-5);if(e.data=t,0!==Number.parseInt(e.avcPacketType)){this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);let t={},i=0;for(t.cts=e.cts,t.dts=e.dts;e.data.length>i;){let s=e.data.slice(Number.parseInt(i),4+i);t.size=s[3],t.size+=256*s[2],t.size+=256*s[1]*256,t.size+=256*s[0]*256*256,i+=4,t.data=e.data.slice(Number.parseInt(i),t.size+i),i+=t.size,this.tracks.videoTrack.samples.push(t),this.emit(d.METADATA_PARSED,"video")}}else 0===Number.parseInt(e.avcPacketType)&&(this._datasizeValidator(e.datasize)?this.emit(d.METADATA_PARSED,"video"):this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1))}else if(7===i){let t=this.loaderBuffer.shift(e.datasize-5);if(0===t[4]&&0===t[5]&&0===t[6]&&1===t[7]){let e=0;for(let i=0;i<4;i++)e=256*e+t[i];e-=4,(t=t.slice(4,t.length))[3]=e%256,e=(e-t[3])/256,t[2]=e%256,e=(e-t[2])/256,t[1]=e%256,t[0]=(e-t[1])/256}if(e.data=t,0===e.avcPacketType){this._avcSequenceHeaderParser(e.data),this._datasizeValidator(e.datasize)&&(this._hasScript&&!this._hasVideoSequence?this.emit(d.METADATA_PARSED,"video"):this._hasScript&&this._hasVideoSequence&&(this.emit(d.VIDEO_METADATA_CHANGE),this.emit(d.METADATA_PARSED,"video")),this._hasVideoSequence=!0)}else{if(!this._datasizeValidator(e.datasize))return void this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1);this.tracks.videoTrack.samples.push(e)}}else this.emit(d.DEMUX_ERROR,this.TAG,new Error(`video codeid is ${i}`),!1),e.data=this.loaderBuffer.shift(e.datasize-1),this._datasizeValidator(e.datasize)||this.emit(d.DEMUX_ERROR,this.TAG,new Error(`invalid video tag datasize: ${e.datasize}`),!1),this.tracks.videoTrack.samples.push(e),this.emit(d.DEMUX_COMPLETE);delete e.tagType}_avcSequenceHeaderParser(e){let t=this.tracks.videoTrack;if(!t)return;let i=0;t.meta||(t.meta=new r.VideoTrackMeta);let s=t.meta;s.configurationVersion=e[0],s.avcProfileIndication=e[1],s.profileCompatibility=e[2],s.avcLevelIndication=e[3]/10,s.nalUnitLength=1+(3&e[4]);let n=31&e[5];i=6;let o={};for(let t=0;t<n;t++){let t=255*e[i]+e[i+1];i+=2;let r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e[i+s];let n="avc1.";for(let e=1;e<4;e++){let t=r[e].toString(16);t.length<2&&(t="0"+t),n+=t}s.codec=n,i+=t,this.tracks.videoTrack.meta.sps=r,o=a.SpsParser.parseSPS(r)}let l=e[i];i++;for(let t=0;t<l;t++){let t=255*e[i]+e[i+1];i+=2;let s=new Uint8Array(t);for(let r=0;r<t;r++)s[r]=e[i+r];i+=t,this.tracks.videoTrack.meta.pps=s}Object.assign(s,a.SpsParser.toVideoMeta(o));const d=this._context.mediaInfo.video;d.codec=s.codec,d.profile=s.profile,d.level=s.level,d.chromaFormat=s.chromaFormat,d.frameRate=s.frameRate,d.parRatio=s.parRatio,d.width=d.width===s.presentWidth?d.width:s.presentWidth,d.height=d.height===s.presentHeight?d.width:s.presentHeight,s.duration=this._context.mediaInfo.duration*s.timescale,s.avcc=new Uint8Array(e.length),s.avcc.set(e),t.meta=s}_switchAudioSampleRate(e){return[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][e]}_switchAudioSamplingFrequency(e){return[5500,11025,22050,44100,48e3][(12&e)>>>2]}_switchAudioChannel(e){return[1,2][1&e]}_datasizeValidator(e){let t=this.loaderBuffer.toInt(0,4);return this.loaderBuffer.shift(4),t===e+11}get loaderBuffer(){const e=this._context.getInstance("LOADER_BUFFER");if(e)return e;this.emit(d.DEMUX_ERROR,new Error("找不到 loaderBuffer 实例"))}get tracks(){return this._context.getInstance("TRACKS")}get logger(){return this._context.getInstance("LOGGER")}}t.default=h},"../xgplayer-demux/src/hls/demuxer/m3u8parser.js":
/*!*******************************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/m3u8parser.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{static parse(e,t=""){let i={duration:0};if(!e||!e.split)return;let r=e.split(/\r|\n/),a=(r=r.filter(e=>e)).shift();if(!a.match("#EXTM3U"))throw new Error('Invalid m3u8 file: not "#EXTM3U"');for(a=r.shift();a;){let e=a.match(/#(.[A-Z|-]*):(.*)/),n=a.match(/#(.[A-Z|-]*)/);if(n&&e&&e.length>2)switch(e[1]){case"EXT-X-VERSION":i.version=parseInt(e[2]);break;case"EXT-X-MEDIA-SEQUENCE":i.sequence=parseInt(e[2]);break;case"EXT-X-TARGETDURATION":i.targetduration=parseFloat(e[2]);break;case"EXTINF":s.parseFrag(e,r,i,t);break;case"EXT-X-KEY":s.parseDecrypt(e[2],i)}if(n&&n.length>1)switch(n[1]){case"EXT-X-DISCONTINUITY":let e=(a=r.shift()).match(/#(.[A-Z|-]*):(.*)/);e.length>2&&"EXTINF"===e[1]&&s.parseFrag(e,r,i,t,!0)}a=r.shift()}return i}static parseFrag(e,t,i,s,r){i.frags||(i.frags=[]);let a={start:i.duration,duration:1e3*parseFloat(e[2])};i.duration+=a.duration;let n=t.shift();n.match(/#(.*):(.*)/)&&(n=t.shift()),n.length>0&&"/"===n.charAt(0)&&s.match(/.*\/\/.*\.\w+/g)&&(s=s.match(/.*\/\/.*\.\w+/g)[0]),n.match(/.*:\/\/.*/)?a.url=n:a.url=s+n,a.discontinue=r,i.frags.push(a)}static parseURL(e){let t="",i=e.match(/(.*\/).*\.m3u8/);if(i&&i.length>0)for(let e=0;e<i.length;e++)i[e].match(/.*\/$/g)&&i[e].length>t.length&&(t=i[e]);return t}static parseDecrypt(e,t){t.encrypt={};let i=e.split(",");for(let e in i){let s=i[e];if(s.match(/METHOD=(.*)/)&&(t.encrypt.method=s.match(/METHOD=(.*)/)[1]),s.match(/URI="(.*)"/)&&(t.encrypt.uri=s.match(/URI="(.*)"/)[1]),s.match(/IV=0x(.*)/)){let e=s.match(/IV=0x(.*)/)[1],i=Math.ceil(e.length/2);t.encrypt.ivb=new Uint8Array(i);for(let s=i-1;s>=0;s--){let i=parseInt(e.substr(2*s,2),16);t.encrypt.ivb[s]=i}t.encrypt.iv=e}}}}t.default=s},"../xgplayer-demux/src/hls/demuxer/ts.js":
/*!***********************************************!*\
  !*** ../xgplayer-demux/src/hls/demuxer/ts.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),r=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),a=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");const n=a.EVENTS.DEMUX_EVENTS,o={1:["video","MPEG-1"],2:["video","MPEG-2"],27:["video","AVC.H264"],234:["video","VC-1"],3:["audio","MPEG-1"],4:["audio","MPEG-2"],15:["audio","MPEG-2.AAC"],17:["audio","MPEG-4.AAC"],128:["audio","LPCM"],129:["audio","AC3"],6:["audio","AC3"],130:["audio","DTS"],131:["audio","Dolby TrueHD"],132:["audio","AC3-Plus"],133:["audio","DTS-HD"],134:["audio","DTS-MA"],161:["audio","AC3-Plus-SEC"],162:["audio","DTS-HD-SEC"]};class l{constructor(e){this.configs=Object.assign({},e),this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}init(){this.on(n.DEMUX_START,this.demux.bind(this))}demux(e){if(this.demuxing)return;let t=this.inputBuffer,i={pat:[],pmt:[]},s={};for(;t.length>=188;){for(t.length>=1&&71!==t.array[0][t.offset]&&this.emit(n.DEMUX_ERROR,this.TAG,new Error(`Untrust sync code: ${t.array[0][t.offset]}, try to recover;`),!1);t.length>=1&&71!==t.array[0][t.offset];)t.shift(1);let e=t.shift(188),r=new a.Stream(e.buffer),o={};l.read(r,o,i),o.pes?(s[o.header.pid]||(s[o.header.pid]=[]),s[o.header.pid].push(o.pes),o.pes.ES.buffer=[o.pes.ES.buffer]):s[o.header.pid]&&s[o.header.pid][s[o.header.pid].length-1].ES.buffer.push(o.payload.stream)}let r=e,o=e;for(let e=0;e<Object.keys(s).length;e++){let t=s[Object.keys(s)[e]];for(let i=0;i<t.length;i++)t[i].id=Object.keys(s)[e],t[i].ES.buffer=l.Merge(t[i].ES.buffer),"audio"===t[i].type?(this.pushAudioSample(t[i],r),r={}):"video"===t[i].type&&(this.pushVideoSample(t[i],o),o={})}this._hasAudioMeta&&this.emit(n.DEMUX_COMPLETE,"audio"),this._hasVideoMeta&&this.emit(n.DEMUX_COMPLETE,"video")}pushAudioSample(e,t){let i;this._tracks.audioTrack?i=this._tracks.audioTrack:(this._tracks.audioTrack=new r.AudioTrack,i=this._tracks.audioTrack);let s=new a.AudioTrackMeta({audioSampleRate:e.ES.frequence,sampleRate:e.ES.frequence,channelCount:e.ES.channel,codec:"mp4a.40."+e.ES.audioObjectType,config:e.ES.audioConfig,id:2,sampleRateIndex:e.ES.frequencyIndex});s.refSampleDuration=Math.floor(1024/s.audioSampleRate*s.timescale);let o=l.compaireMeta(i.meta,s,!0);this._hasAudioMeta&&!o||(i.meta=s,this._hasAudioMeta=!0,this.emit(n.METADATA_PARSED,"audio"));let d=new Uint8Array(e.ES.buffer.buffer.slice(e.ES.buffer.position,e.ES.buffer.length)),h=parseInt(e.pts/90),u=parseInt(e.pts/90),c=new a.AudioTrackSample({dts:h,pts:u,data:d,options:t});i.samples.push(c)}pushVideoSample(e,t){let i,o=s.Nalunit.getNalunits(e.ES.buffer),d=new a.VideoTrackMeta;this._tracks.videoTrack?i=this._tracks.videoTrack:(this._tracks.videoTrack=new r.VideoTrack,i=this._tracks.videoTrack);let h=0,u=!1,c=!1;for(let e=0;e<o.length;e++){let t=o[e];if(t.sps){u=t,i.sps=t.body,d.chromaFormat=u.sps.chroma_format,d.codec="avc1.";for(var f=1;f<4;f++){var p=u.body[f].toString(16);p.length<2&&(p="0"+p),d.codec+=p}d.codecHeight=u.sps.codec_size.height,d.codecWidth=u.sps.codec_size.width,d.frameRate=u.sps.frame_rate,d.id=1,d.level=u.sps.level_string,d.presentHeight=u.sps.present_size.height,d.presentWidth=u.sps.present_size.width,d.profile=u.sps.profile_string,d.refSampleDuration=Math.floor(d.timescale*(u.sps.frame_rate.fps_den/u.sps.frame_rate.fps_num)),d.sarRatio=u.sps.sar_ratio?u.sps.sar_ratio:u.sps.par_ratio}else t.pps?(i.pps=t.body,c=t):h+=4+t.body.byteLength}if(u&&c){d.avcc=s.Nalunit.getAvcc(u.body,c.body),i.meta=d;let e=l.compaireMeta(i.meta,d,!0);this._hasVideoMeta&&!e||(this._hasVideoMeta=!0,this.emit(n.METADATA_PARSED,"video"))}let _=new Uint8Array(h),m=0,y=!1;for(let e=0;e<o.length;e++){let t=o[e],i=t.body.byteLength;t.idr&&(y=!0),t.pps||t.sps||(_.set(new Uint8Array([i>>>24&255,i>>>16&255,i>>>8&255,255&i]),m),m+=4,_.set(t.body,m),m+=i)}let g=new a.VideoTrackSample({dts:parseInt(e.dts/90),pts:parseInt(e.pts/90),cts:(e.pts-e.dts)/90,originDts:e.dts,isKeyframe:y,data:_,options:t});i.samples.push(g)}destory(){this.off(n.DEMUX_START,this.demux),this.configs={},this.demuxing=!1,this.pat=[],this.pmt=[],this._hasVideoMeta=!1,this._hasAudioMeta=!1}static compaireArray(e,t,i){let s=0,r=0;if("Uint8Array"===i?(s=e.byteLength,r=t.byteLength):"Array"===i&&(s=e.length,r=t.length),s!==r)return!1;for(let i=0;i<s;i++)if(e[i]!==t[i])return!1;return!0}static compaireMeta(e,t,i){if(!e||!t)return!1;for(let s=0,r=Object.keys(e).length;s<r;s++){let r=e[Object.keys(e)[s]],a=t[Object.keys(e)[s]];if("object"!=typeof r){if(i&&"duration"!==Object.keys(e)[s]&&r!==a)return!1}else if(void 0!==r.byteLength){if(void 0===a.byteLength)return!1;if(!l.compaireArray(r,a,"Uint8Array"))return!1}else if(void 0!==r.length){if(void 0===a.length)return!1;if(!l.compaireArray(r,a,"Array"))return!1}else if(!l.compaireMeta(r,a))return!1}return!0}static Merge(e){let t,i=0,s=0;for(let t=0;t<e.length;t++)i+=e[t].length-e[t].position;t=new Uint8Array(i);for(let i=0;i<e.length;i++){let r=e[i];t.set(new Uint8Array(r.buffer,r.position),s),s+=r.length-r.position}return new a.Stream(t.buffer)}static read(e,t,i){l.readHeader(e,t),l.readPayload(e,t,i),"MEDIA"!==t.header.packet||1!==t.header.payload||t.unknownPIDs||(t.pes=l.PES(t))}static readPayload(e,t,i){let s=t.header.pid;switch(s){case 0:l.PAT(e,t,i);break;case 1:l.CAT(e,t,i);break;case 2:l.TSDT(e,t,i);break;case 8191:break;default:if(i.pat.some(e=>e.pid===s))l.PMT(e,t,i);else{let r=i.pmt?i.pmt.filter(e=>e.pid===s):[];r.length>0?l.Media(e,t,o[r[0].streamType][0]):t.unknownPIDs=!0}}}static readHeader(e,t){let i={};i.sync=e.readUint8();let s=e.readUint16();i.error=s>>>15,i.payload=s>>>14&1,i.priority=s>>>13&1,i.pid=8191&s,s=e.readUint8(),i.scrambling=s>>6&3,i.adaptation=s>>4&3,i.continuity=15&s,i.packet=0===i.pid?"PAT":"MEDIA",t.header=i}static PAT(e,t,i){let s={},r=e.readUint8();e.skip(r),r=e.readUint8(),s.tabelID=r,r=e.readUint16(),s.error=r>>>7,s.zero=r>>>6&1,s.sectionLength=4095&r,s.streamID=e.readUint16(),s.current=1&e.readUint8(),s.sectionNumber=e.readUint8(),s.lastSectionNumber=e.readUint8();let a=(s.sectionLength-9)/4,n=[];for(let t=0;t<a;t++){let t=e.readUint16(),i=8191&e.readUint16();n.push({program:t,pid:i,type:0===t?"network":"mapPID"})}n.length>0&&(i.pat=i.pat.concat(n)),s.list=n,s.program=e.readUint16(),s.pid=8191&e.readUint16(),t.payload=s}static PMT(e,t,i){let s={};t.header.packet="PMT";let r=e.readUint8();e.skip(r),r=e.readUint8(),s.tableID=r,r=e.readUint16(),s.sectionLength=4095&r,s.program=e.readUint16(),s.current=1&e.readUint8(),s.order=e.readUint8(),s.lastOrder=e.readUint8(),s.PCR_PID=8191&e.readUint16(),s.programLength=4095&e.readUint16();let a=(s.sectionLength-13)/5,n=[];for(let t=0;t<a;t++)n.push({streamType:e.readUint8(),pid:8191&e.readUint16(),es:4095&e.readUint16()});s.list=n,this.pmt||(this.pmt=[]),i.pmt=this.pmt.concat(n.map(e=>({pid:e.pid,es:e.es,streamType:e.streamType,program:s.program}))),t.payload=s}static Media(e,t,i){let s=t.header,r={};if(s.type=i,3===s.adaptation&&(r.adaptationLength=e.readUint8(),r.adaptationLength>0)){let t=e.readUint8();r.discontinue=t>>>7,r.access=t>>>6&1,r.priority=t>>>5&1,r.PCR=t>>>4&1,r.OPCR=t>>>3&1,r.splicePoint=t>>>2&1,r.transportPrivate=t>>>1&1,r.adaptationField=1&t;let i=e.position;if(1===r.PCR&&(r.programClockBase=e.readUint32()<<1,t=e.readUint16(),r.programClockBase|=t>>>15,r.programClockExtension=511&t),1===r.OPCR&&(r.originProgramClockBase=e.readUint32()<<1,t=e.readUint16(),r.originProgramClockBase+=t>>>15,r.originProgramClockExtension=511&t),1===r.splicePoint&&(r.spliceCountdown=e.readUint8()),1===r.transportPrivate){let t=e.readUint8(),i=[];for(let s=0;s<t;s++)i.push(e.readUint8())}if(1===r.adaptationField){let t=e.readUint8(),i=e.readUint8(),s=e.position,a=i>>>6&1,n=i>>>5&1;1===i>>>7&&(i=e.readUint16(),r.ltwValid=i>>>15,r.ltwOffset=61439&i),1===a&&(i=e.readUint24(),r.piecewiseRate=4194303&i),1===n&&(i=e.readInt8(),r.spliceType=i>>>4,r.dtsNextAU1=i>>>1&7,r.marker1=1&i,i=e.readUint16(),r.dtsNextAU2=i>>>1,r.marker2=1&i,i=e.readUint16(),r.dtsNextAU3=i),e.skip(t-1-(e.position-s))}let s=r.adaptationLength-1-(e.position-i);e.skip(s)}r.stream=new a.Stream(e.buffer.slice(e.position)),t.payload=r}static PES(e){let t={},i=e.payload.stream;if(1!==i.readUint24())t.ES={},t.ES.buffer=i;else{let e=i.readUint8();e>=224&&e<=239&&(t.type="video"),e>=192&&e<=223&&(t.type="audio");let s=i.readUint16();if(t.packetLength=s,"video"!==t.type&&"audio"!==t.type)throw new Error("format is not supported");{let e=i.readUint8();if(2!==e>>>6)throw new Error("error when parse pes header");e=i.readUint8(),t.ptsDTSFlag=e>>>6,t.escrFlag=e>>>5&1,t.esRateFlag=e>>>4&1,t.dsmFlag=e>>>3&1,t.additionalFlag=e>>>2&1,t.crcFlag=e>>>1&1,t.extensionFlag=1&e,t.pesHeaderLength=i.readUint8();let s=t.pesHeaderLength;if(2===t.ptsDTSFlag){let r=[];e=i.readUint8(),r.push(e>>>1&7),e=i.readUint16(),r.push(e>>>1),e=i.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2],s-=5,"video"===t.type&&(t.dts=t.pts)}if(3===t.ptsDTSFlag){let r=[];e=i.readUint8(),r.push(e>>>1&7),e=i.readUint16(),r.push(e>>>1),e=i.readUint16(),r.push(e>>>1),t.pts=r[0]<<30|r[1]<<15|r[2];let a=[];e=i.readUint8(),a.push(e>>>1&7),e=i.readUint16(),a.push(e>>>1),e=i.readUint16(),a.push(e>>>1),t.dts=a[0]<<30|a[1]<<15|a[2],s-=10}if(1===t.escrFlag){let r=[],a=[];e=i.readUint8(),r.push(e>>>3&7),r.push(3&e),e=i.readUint16(),r.push(e>>>13),r.push(3&e),e=i.readUint16(),r.push(e>>>13),a.push(3&e),e=i.readUint8(),a.push(e>>>1),t.escr=300*(r[0]<<30|r[1]<<28|r[2]<<15|r[3]<<13|r[4])+(a[0]<<7|a[1]),s-=6}if(1===t.esRateFlag&&(e=i.readUint24(),t.esRate=e>>>1&4194303,s-=3),1===t.dsmFlag)throw new Error("not support DSM_trick_mode");if(1===t.additionalFlag&&(e=i.readUint8(),t.additionalCopyInfo=127&e,s-=1),1===t.crcFlag&&(t.pesCRC=i.readUint16(),s-=2),1===t.extensionFlag)throw new Error("not support extension");s>0&&i.skip(s),t.ES=l.ES(i,t.type)}}return t}static ES(e,t){let i,s={};if("video"===t){if(1!==(i=e.readUint32())&&(e.back(4),1!==(i=e.readUint24())))throw new Error("h264 nal header parse failed");e.skip(2),s.buffer=e}else{if("audio"!==t)throw new Error(`ES ${t} is not supported`);{if((i=e.readUint16())>>>4!=4095)throw new Error("aac ES parse Error");const t=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];s.id=0==(i>>>3&1)?"MPEG-4":"MPEG-2",s.layer=i>>>1&3,s.absent=1&i,i=e.readUint16(),s.audioObjectType=1+(i>>>14&3),s.profile=s.audioObjectType-1,s.frequencyIndex=i>>>10&15,s.frequence=t[s.frequencyIndex],s.channel=i>>>6&7,s.frameLength=(3&i)<<11|e.readUint16()>>>5,l.getAudioConfig(s),e.skip(1),s.buffer=e}}return s}static TSDT(e,t,i){t.payload={}}static CAT(e,t,i){let s={};s.tableID=e.readUint8();let r=e.readUint16();s.sectionIndicator=r>>>7,s.sectionLength=4095&r,e.skip(2),r=e.readUint8(),s.version=r>>>3,s.currentNextIndicator=1&r,s.sectionNumber=e.readUint8(),s.lastSectionNumber=e.readUint8();let a=(this.sectionLength-9)/4,n=[];for(let e=0;e<a;e++)n.push({});s.crc32=e.readUint32(),t.payload=s}static getAudioConfig(e){let t,i,s=navigator.userAgent.toLowerCase();/firefox/i.test(s)?sampleIndex>=6?(e.audioObjectType=5,t=new Array(4),i=e.frequencyIndex-3):(audioObjectType=2,t=new Array(2),i=e.frequencyIndex):-1!==s.indexOf("android")?(e.audioObjectType=2,t=new Array(2),i=e.frequencyIndex):(e.audioObjectType=5,t=new Array(4),e.frequencyIndex>=6?i=e.frequencyIndex-3:(1===e.channel&&(e.audioObjectType=2,t=new Array(2)),i=e.frequencyIndex)),t[0]=e.audioObjectType<<3,t[0]|=(14&e.frequencyIndex)>>1,t[1]=(1&e.frequencyIndex)<<7,t[1]|=e.channel<<3,5===e.audioObjectType&&(t[1]|=(14&i)>>1,t[2]=(1&i)<<7,t[2]|=8,t[3]=0),e.audioConfig=t}get inputBuffer(){return this._context.getInstance(this.configs.inputbuffer)}get _tracks(){return this._context.getInstance("TRACKS")}}t.default=l},"../xgplayer-demux/src/hls/playlist.js":
/*!*********************************************!*\
  !*** ../xgplayer-demux/src/hls/playlist.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=e.autoclear||!1}get list(){return this._list}set baseURL(e){this.baseURL!==e&&(this.clear(),this._baseURL=e)}get baseURL(){return this._baseURL}push(e,t,i){this._ts[e]||(this._ts[e]={duration:t,downloaded:!1,downloading:!1,start:this.duration,discontinue:!!i},this._list[this.duration]=e,this.duration+=t,this.fragLength+=1)}deleteFrag(e){this._ts[e]&&(this._ts[e].start>this._lastget.time&&(this._lastget={duration:this._ts[e].duration,time:this._ts[e].start,downloaded:!1,downloading:!1,url:e}),delete this._list[this._ts[e].start],delete this._ts[e],this.fragLength-=1)}pushM3U8(e,t){if(!e)throw new Error("No m3u8 data received.");if(this.version=e.version,this.targetduration=e.targetduration,e.encrypt&&!this.encrypt&&(this.encrypt=e.encrypt),!(e.sequence>this.sequence))throw new Error(`Old m3u8 file received, ${e.sequence}`);{this.sequence=e.sequence;let i=[];for(let t=0;t<e.frags.length;t++){let s=e.frags[t];this._ts[s.url]||(i.push(s.url),this.push(s.url,s.duration,s.discontinue))}if(i.length<1)throw new Error("Can not read ts file list.");if(t){let e=this.getTsList();for(let t=0;t<e.length;t++)i.indexOf(e[t])<0&&this.deleteFrag(e[t])}}}getTsList(){return Object.keys(this._ts)}downloaded(e,t){let i=this._ts[e];i&&(i.downloaded=t)}downloading(e,t){let i=this._ts[e];i&&(i.downloading=t)}getTsByName(e){return this._ts[e]}getTs(e){let t,i=Object.keys(this._list);if(void 0===e&&(e=this._lastget?this._lastget.time+this._lastget.duration:0),!(i.length<1||e>=this.duration)){i.sort((e,t)=>parseFloat(e)-parseFloat(t));for(let s=0;s<i.length&&e>=parseInt(i[s]);s++){let e=this._list[i[s]];t={url:e,downloaded:this._ts[e].downloaded,downloading:this._ts[e].downloading,time:parseInt(i[s]),duration:parseInt(this._ts[e].duration)},this.autoclear&&(delete this._ts[this._lastget.url],delete this._list[this._lastget.time]),this._lastget=t}return t}}clear(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0}clearDownloaded(){for(let e=0,t=Object.keys(this._ts).length;e<t;e++){let t=this._ts[Object.keys(this._ts)[e]];t.downloaded=!1,t.downloading=!1}}destroy(){this._baseURL="",this._list={},this._ts={},this.version=0,this.sequence=-1,this.targetduration=0,this.duration=0,this.fragLength=0,this._lastget=void 0,this._audoclear=!1}}},"../xgplayer-hls-live/index.js":
/*!***********************!*\
  !*** .-live/index.js ***!
  \***********************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={HlsLivePlayer:i(/*! ./src/index */"../xgplayer-hls-live/src/index.js"),HlsLiveController:i(/*! ./src/hls-live */"../xgplayer-hls-live/src/hls-live.js").default}},"../xgplayer-hls-live/src/hls-live.js":
/*!******************************!*\
  !*** .-live/src/hls-live.js ***!
  \******************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),n=i(/*! xgplayer-loader */"../xgplayer-loader/index.js"),o=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),l=i(/*! xgplayer-remux/src/mp4/index */"../xgplayer-remux/src/mp4/index.js"),d=(s=l)&&s.__esModule?s:{default:s},h=i(/*! xgplayer-demux */"../xgplayer-demux/index.js");const u=r.EVENTS.LOADER_EVENTS,c=r.EVENTS.REMUX_EVENTS,f=r.EVENTS.DEMUX_EVENTS,p=r.EVENTS.HLS_EVENTS,_=r.EVENTS.CRYTO_EVENTS,m="HLS_ERROR";t.default=class{constructor(e){this.configs=Object.assign({},e),this.url="",this.baseurl="",this.sequence=0,this._playlist=null,this.retrytimes=this.configs.retrytimes||3,this.preloadTime=this.configs.preloadTime,this.container=this.configs.container,this._m3u8lasttime=0,this._timmer=setInterval(this._checkStatus.bind(this),50),this._lastCheck=0,this._player=this.configs.player}init(){this._context.registry("M3U8_BUFFER",a.XgBuffer),this._context.registry("TS_BUFFER",a.XgBuffer),this._context.registry("TRACKS",a.Tracks),this._playlist=this._context.registry("PLAYLIST",h.Playlist)({autoclear:!0}),this._context.registry("PRE_SOURCE_BUFFER",a.PreSource),this._context.registry("COMPATIBILITY",o.Compatibility),this._m3u8loader=this._context.registry("M3U8_LOADER",n.FetchLoader)({buffer:"M3U8_BUFFER",readtype:1}),this._tsloader=this._context.registry("TS_LOADER",n.FetchLoader)({buffer:"TS_BUFFER",readtype:3}),this._context.registry("TS_DEMUXER",h.TsDemuxer)({inputbuffer:"TS_BUFFER"}),this._context.registry("MP4_REMUXER",d.default),this.mse=this._context.registry("MSE",r.Mse)({container:this.container}),this.initEvents()}initEvents(){this.on(u.LOADER_COMPLETE,this._onLoadComplete.bind(this)),this.on(c.INIT_SEGMENT,this.mse.addSourceBuffers.bind(this.mse)),this.on(c.MEDIA_SEGMENT,this.mse.doAppend.bind(this.mse)),this.on(f.METADATA_PARSED,this._onMetadataParsed.bind(this)),this.on(f.DEMUX_COMPLETE,this._onDemuxComplete.bind(this)),this.on(u.LOADER_ERROR,this._onLoadError.bind(this)),this.on(f.DEMUX_ERROR,this._onDemuxError.bind(this)),this.on(c.REMUX_ERROR,this._onRemuxError.bind(this))}_onError(e,t,i,s){let r={errorType:e,errorDetails:`[${t}]: ${i.message}`,errorFatal:s};this._player.emit(m,r)}_onDemuxComplete(){this.emit(c.REMUX_MEDIA)}_onMetadataParsed(e){this.emit(c.REMUX_METADATA,e)}_onLoadError(e,t){!this._tsloader.loading&&!this._m3u8loader.loading&&this.retrytimes>1?(this.retrytimes--,this._onError(u.LOADER_ERROR,e,t,!1)):this.retrytimes<=1&&(this._onError(u.LOADER_ERROR,e,t,!0),this.emit(p.RETRY_TIME_EXCEEDED),this.mse.endOfStream())}_onDemuxError(e,t,i){void 0===i&&(i=!0),this._onError(u.LOADER_ERROR,e,t,i)}_onRemuxError(e,t,i){void 0===i&&(i=!0),this._onError(c.REMUX_ERROR,e,t,i)}_onLoadComplete(e){if("M3U8_BUFFER"===e.TAG){let t;try{t=h.M3U8Parser.parse(e.shift(),this.baseurl)}catch(e){this._onError("M3U8_PARSER_ERROR","M3U8_PARSER",e,!1)}if(!t)return void(this.retrytimes>0?(this.retrytimes--,this._preload()):(this.emit(p.RETRY_TIME_EXCEEDED),this.mse.endOfStream()));try{this._playlist.pushM3U8(t,!0)}catch(e){this._onError("M3U8_PARSER_ERROR","PLAYLIST",e,!1)}this._playlist.encrypt&&this._playlist.encrypt.uri&&!this._playlist.encrypt.key?(this._context.registry("DECRYPT_BUFFER",a.XgBuffer)(),this._context.registry("KEY_BUFFER",a.XgBuffer)(),this._tsloader.buffer="DECRYPT_BUFFER",this._keyLoader=this._context.registry("KEY_LOADER",n.FetchLoader)({buffer:"KEY_BUFFER",readtype:3}),this.emitTo("KEY_LOADER",u.LADER_START,this._playlist.encrypt.uri)):this._m3u8Loaded(t)}else"TS_BUFFER"===e.TAG?(this.retrytimes=this.configs.retrytimes||3,this._playlist.downloaded(this._tsloader.url,!0),this.emit(f.DEMUX_START)):"DECRYPT_BUFFER"===e.TAG?(this.retrytimes=this.configs.retrytimes||3,this._playlist.downloaded(this._tsloader.url,!0),this.emitTo("CRYPTO",_.START_DECRYPT)):"KEY_BUFFER"==e.TAG&&(this.retrytimes=this.configs.retrytimes||3,this._playlist.encrypt.key=e.shift(),this._crypto=this._context.registry("CRYPTO",r.Crypto)({key:this._playlist.encrypt.key,iv:this._playlist.encrypt.ivb,method:this._playlist.encrypt.method,inputbuffer:"DECRYPT_BUFFER",outputbuffer:"TS_BUFFER"}),this._crypto.on(_.DECRYPTED,this._onDcripted.bind(this)))}_onDcripted(){this.emit(f.DEMUX_START)}_m3u8Loaded(e){this.preloadTime||(this.preloadTime=this._playlist.targetduration?this._playlist.targetduration:5),this._playlist.fragLength>0&&this._playlist.sequence<e.sequence?this.retrytimes=this.configs.retrytimes||3:this.retrytimes>0?(this.retrytimes--,this._preload()):(this.emit(p.RETRY_TIME_EXCEEDED),this.mse.endOfStream())}_checkStatus(){if(!(this.retrytimes<1&&(new Date).getTime()-this._lastCheck<1e4))if(this._lastCheck=(new Date).getTime(),this.container.buffered.length<1)this._preload();else{let e=this.container.currentTime,t=this.container.buffered.start(this.container.buffered.length-1);this.container.readyState<=2&&(e<t?(this.container.currentTime=t,e=t):this._preload());let i=this.container.buffered.end(this.container.buffered.length-1);e<i-2*this.preloadTime&&(this.container.currentTime=i-2*this.preloadTime),i>2*this.preloadTime&&this.mse.remove(i-2*this.preloadTime),e>i-this.preloadTime&&this._preload()}}_preload(){if(this._tsloader.loading||this._m3u8loader.loading)return;let e=this._playlist.getTs();if(!e||e.downloaded||e.downloading){let t=this.preloadTime?this.preloadTime:0,i=(new Date).getTime();(!e||e.downloaded)&&(i-this._m3u8lasttime)/1e3>t&&(this._m3u8lasttime=i,this.emitTo("M3U8_LOADER",u.LADER_START,this.url))}else this._playlist.downloading(e.url,!0),this.emitTo("TS_LOADER",u.LADER_START,e.url)}load(e){this.baseurl=h.M3U8Parser.parseURL(e),this.url=e,this._preload()}destroy(){clearInterval(this._timmer),this.off(u.LOADER_COMPLETE,this._onLoadComplete),this.off(c.INIT_SEGMENT,this.mse.addSourceBuffers),this.off(c.MEDIA_SEGMENT,this.mse.doAppend),this.off(f.METADATA_PARSED,this._onMetadataParsed),this.off(f.DEMUX_COMPLETE,this._onDemuxComplete),this.mse=null}}},"../xgplayer-hls-live/src/index.js":
/*!***************************!*\
  !*** .-live/src/index.js ***!
  \***************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HlsLivePlayer=void 0;var s=n(i(/*! xgplayer */"xgplayer")),r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=n(i(/*! ./hls-live */"../xgplayer-hls-live/src/hls-live.js"));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.HlsAllowedEvents,l=r.EVENTS.REMUX_EVENTS;class d extends s.default{constructor(e){super(e),this.hlsOps={},this.util=s.default.util,this.util.deepCopy(this.hlsOps,e),this._context=new r.Context(o),this._hasStarted=!1}_initEvents(){this.__core__.once(l.INIT_SEGMENT,()=>{const e=this._context.getInstance("MSE");if(!this._hasStarted){const e=this.util.createDom("xg-live","正在直播",{},"xgplayer-live");this.util.addClass(this.root,"xgplayer-is-live"),this.controls.appendChild(e)}this._hasStarted=!0,super.start(e.url)}),this.once("canplay",()=>{this.video.play()})}_initSrcChangeHandler(){let e=this;Object.defineProperty(this,"src",{get:()=>e.currentSrc,set(t){e.config.url=t,e.paused?e.start(t):(e.pause(),e.once("pause",()=>{e.start(t)}),e.once("canplay",()=>{e.play()})),e.once("canplay",()=>{e.currentTime=0})},configurable:!0})}start(e=this.config.url){e&&(this.__core__=this._context.registry("HLS_LIVE_CONTROLLER",a.default)({player:this,container:this.video}),this._context.init(),this.url=e,this.__core__.load(e),this._initEvents(),this._initSrcChangeHandler())}play(){this._hasStarted&&(this._context.destroy(),this._context=new r.Context(o),this.__core__=this._context.registry("HLS_LIVE_CONTROLLER",a.default)({container:this.video}),this._context.init(),this._initEvents(),this.__core__.load(this.url)),super.play()}destroy(){this._context.destroy(),super.destroy()}}t.HlsLivePlayer=d,e.exports=d},"../xgplayer-hls-vod/index.js":
/*!**********************!*\
  !*** .-vod/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={HlsVodPlayer:i(/*! ./src/index */"../xgplayer-hls-vod/src/index.js"),HlsVodController:i(/*! ./src/hls-vod */"../xgplayer-hls-vod/src/hls-vod.js").default}},"../xgplayer-hls-vod/src/hls-vod.js":
/*!****************************!*\
  !*** .-vod/src/hls-vod.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! xgplayer-buffer */"../xgplayer-buffer/index.js"),n=i(/*! xgplayer-loader */"../xgplayer-loader/index.js"),o=i(/*! xgplayer-codec */"../xgplayer-codec/index.js"),l=i(/*! xgplayer-remux/src/mp4/index */"../xgplayer-remux/src/mp4/index.js"),d=(s=l)&&s.__esModule?s:{default:s},h=i(/*! xgplayer-demux */"../xgplayer-demux/index.js");const u=r.EVENTS.LOADER_EVENTS,c=r.EVENTS.REMUX_EVENTS,f=r.EVENTS.DEMUX_EVENTS,p=r.EVENTS.HLS_EVENTS,_=r.EVENTS.CRYTO_EVENTS,m="HLS_ERROR";t.default=class{constructor(e){this.configs=Object.assign({},e),this.url="",this.baseurl="",this.sequence=0,this._playlist=null,this.retrytimes=this.configs.retrytimes||3,this.container=this.configs.container,this.preloadTime=this.configs.preloadTime||5,this._lastSeekTime=0,this._player=this.configs.player}init(){this._context.registry("M3U8_BUFFER",a.XgBuffer),this._tsBuffer=this._context.registry("TS_BUFFER",a.XgBuffer)(),this._tracks=this._context.registry("TRACKS",a.Tracks)(),this._playlist=this._context.registry("PLAYLIST",h.Playlist)({autoclear:!0}),this._presource=this._context.registry("PRE_SOURCE_BUFFER",a.PreSource)(),this._compat=this._context.registry("COMPATIBILITY",o.Compatibility)(),this._context.registry("M3U8_LOADER",n.FetchLoader)({buffer:"M3U8_BUFFER",readtype:1}),this._tsloader=this._context.registry("TS_LOADER",n.FetchLoader)({buffer:"TS_BUFFER",readtype:3}),this._context.registry("TS_DEMUXER",h.TsDemuxer)({inputbuffer:"TS_BUFFER"}),this._context.registry("MP4_REMUXER",d.default),this.mse=this._context.registry("MSE",r.Mse)({container:this.container,preloadTime:this.preloadTime}),this.initEvents()}initEvents(){this.on(u.LOADER_COMPLETE,this._onLoaderCompete.bind(this)),this.on(u.LOADER_ERROR,this._onLoadError.bind(this)),this.on(c.INIT_SEGMENT,this._onInitSegment.bind(this)),this.on(c.MEDIA_SEGMENT,this._onMediaSegment.bind(this)),this.on(f.METADATA_PARSED,this._onMetadataParsed.bind(this)),this.on(f.DEMUX_COMPLETE,this._onDemuxComplete.bind(this)),this.on(f.DEMUX_ERROR,this._onDemuxError.bind(this)),this.on(c.REMUX_ERROR,this._onRemuxError.bind(this)),this.on("TIME_UPDATE",this._onTimeUpdate.bind(this)),this.on("WAITING",this._onWaiting.bind(this))}_onError(e,t,i,s){let r={errorType:e,errorDetails:`[${t}]: ${i.message}`,errorFatal:s};this._player&&this._player.emit(m,r)}_onLoadError(e,t){this._onError(u.LOADER_ERROR,e,t,!0),this.emit(p.RETRY_TIME_EXCEEDED)}_onDemuxError(e,t,i){void 0===i&&(i=!0),this._onError(u.LOADER_ERROR,e,t,i)}_onRemuxError(e,t,i){void 0===i&&(i=!0),this._onError(c.REMUX_ERROR,e,t,i)}_onWaiting(e){let t=!0;for(let e=0;e<Object.keys(this._playlist.list).length;e++)1e3*this.container.currentTime<parseInt(Object.keys(this._playlist.list)[e])&&(t=!1);if(t){let e=this._playlist.getTs(1e3*this.container.currentTime);e?e.downloaded&&this.mse.endOfStream():this.mse.endOfStream()}}_onTimeUpdate(e){this._preload(e.currentTime)}_onDemuxComplete(){this.emit(c.REMUX_MEDIA)}_onMetadataParsed(e){let t=parseInt(this._playlist.duration);"video"===e?this._tracks.videoTrack.meta.duration=t:"audio"===e&&(this._tracks.audioTrack.meta.duration=t),this.emit(c.REMUX_METADATA,e)}_onMediaSegment(){Object.keys(this.mse.sourceBuffers).length<1&&this.mse.addSourceBuffers(),this.mse.doAppend()}_onInitSegment(){this.mse.addSourceBuffers()}_onLoaderCompete(e){if("M3U8_BUFFER"===e.TAG){let t=h.M3U8Parser.parse(e.shift(),this.baseurl);try{this._playlist.pushM3U8(t)}catch(e){this._onError("M3U8_PARSER_ERROR","PLAYLIST",e,!0)}if(this._playlist.encrypt&&this._playlist.encrypt.uri&&!this._playlist.encrypt.key)this._context.registry("DECRYPT_BUFFER",a.XgBuffer)(),this._context.registry("KEY_BUFFER",a.XgBuffer)(),this._tsloader.buffer="DECRYPT_BUFFER",this._keyLoader=this._context.registry("KEY_LOADER",n.FetchLoader)({buffer:"KEY_BUFFER",readtype:3}),this.emitTo("KEY_LOADER",u.LADER_START,this._playlist.encrypt.uri);else{this.preloadTime||(this._playlist.targetduration?(this.preloadTime=this._playlist.targetduration,this.mse.preloadTime=this._playlist.targetduration):(this.preloadTime=5,this.mse.preloadTime=5));let e=this._playlist.getTs();e?(this._playlist.downloading(e.url,!0),this.emitTo("TS_LOADER",u.LADER_START,e.url)):this.retrytimes>0&&(this.retrytimes--,this.emitTo("M3U8_LOADER",u.LADER_START,this.url))}}else if("TS_BUFFER"===e.TAG)this._preload(this.mse.container.currentTime),this._playlist.downloaded(this._tsloader.url,!0),this.emit(f.DEMUX_START,Object.assign({url:this._tsloader.url},this._playlist._ts[this._tsloader.url]));else if("DECRYPT_BUFFER"===e.TAG)this.retrytimes=this.configs.retrytimes||3,this._playlist.downloaded(this._tsloader.url,!0),this.emitTo("CRYPTO",_.START_DECRYPT,Object.assign({url:this._tsloader.url},this._playlist._ts[this._tsloader.url]));else if("KEY_BUFFER"==e.TAG){this.retrytimes=this.configs.retrytimes||3,this._playlist.encrypt.key=e.shift(),this._crypto=this._context.registry("CRYPTO",r.Crypto)({key:this._playlist.encrypt.key,iv:this._playlist.encrypt.ivb,method:this._playlist.encrypt.method,inputbuffer:"DECRYPT_BUFFER",outputbuffer:"TS_BUFFER"}),this._crypto.on(_.DECRYPTED,this._onDcripted.bind(this));let t=this._playlist.getTs();t?(this._playlist.downloading(t.url,!0),this.emitTo("TS_LOADER",u.LADER_START,t.url)):this.retrytimes>0&&(this.retrytimes--,this.emitTo("M3U8_LOADER",u.LADER_START,this.url))}}_onDcripted(){this.emit(f.DEMUX_START)}seek(e){this._lastSeekTime=e,this._tsloader.cancel(),this._presource.sources.video&&(this._presource.sources.video.data=[]),this._presource.sources.audio&&(this._presource.sources.audio.data=[]),this._tracks.audioTrack&&(this._tracks.audioTrack.samples=[]),this._tracks.audioTrack&&(this._tracks.videoTrack.samples=[]),this._compat&&this._compat.reset(),this._tsBuffer&&(this._tsBuffer.array=[],this._tsBuffer.length=0,this._tsBuffer.offset=0),this._playlist.clearDownloaded(),this._preload(e)}load(e){this.baseurl=h.M3U8Parser.parseURL(e),this.url=e,this.emitTo("M3U8_LOADER",u.LADER_START,e)}_preload(e){if(this._tsloader.loading)return;let t=this.mse.container;if(t.buffered.length<1){let e=this._playlist.getTs(0);!e||e.downloading||e.downloaded||(this._playlist.downloading(e.url,!0),this.emitTo("TS_LOADER",u.LADER_START,e.url))}else{let i=-1;e||(e=t.buffered.end(0));for(let s=0;s<t.buffered.length;s++)e>=t.buffered.start(s)&&e<t.buffered.end(s)&&(i=t.buffered.end(s));if(i<0){let t=this._playlist.getTs(1e3*e+1);!t||t.downloading||t.downloaded||(this._playlist.downloading(t.url,!0),this.emitTo("TS_LOADER",u.LADER_START,t.url))}else if(i<e+this.preloadTime){let t=this._playlist.getTs(1e3*i+1),s=t?(t.time+t.duration)/1e3:0;for(;t&&t.downloaded&&s<e+this.preloadTime;)s=(t=this._playlist.getTs(1e3*s+1))?(t.time+t.duration)/1e3:0;!t||t.downloading||t.downloaded||(this._playlist.downloading(t.url,!0),this.emitTo("TS_LOADER",u.LADER_START,t.url))}}}destory(){this.configs={},this.url="",this.baseurl="",this.sequence=0,this._playlist=null,this.retrytimes=3,this.container=void 0,this.preloadTime=5,this._lastSeekTime=0,this.mse=null,this.off(u.LOADER_COMPLETE,this._onLoaderCompete),this.off(c.INIT_SEGMENT,this._onInitSegment),this.off(c.MEDIA_SEGMENT,this._onMediaSegment),this.off(f.METADATA_PARSED,this._onMetadataParsed),this.off(f.DEMUX_COMPLETE,this._onDemuxComplete),this.off("TIME_UPDATE",this._onTimeUpdate),this.off("WAITING",this._onWaiting)}}},"../xgplayer-hls-vod/src/index.js":
/*!**************************!*\
  !*** .-vod/src/index.js ***!
  \**************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HlsVodPlayer=void 0;var s=n(i(/*! xgplayer */"xgplayer")),r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=n(i(/*! ./hls-vod */"../xgplayer-hls-vod/src/hls-vod.js"));function n(e){return e&&e.__esModule?e:{default:e}}const o=r.EVENTS.HlsAllowedEvents,l=r.EVENTS.REMUX_EVENTS,d=r.EVENTS.HLS_EVENTS;class h extends s.default{constructor(e){super(e),this.hlsOps={},this.util=s.default.util,this.util.deepCopy(this.hlsOps,e),this._context=new r.Context(o)}get currentTime(){return super.currentTime}set currentTime(e){e=parseFloat(e),super.currentTime=parseInt(e),this._context&&this.__core__.seek(e)}_initEvents(){this.__core__.once(l.INIT_SEGMENT,()=>{const e=this._context.getInstance("MSE");super.start(e.url)}),this.__core__.once(d.RETRY_TIME_EXCEEDED,()=>{this.emit("error",new s.default.Errors("network",this.config.url))}),this.once("canplay",()=>{this.play()})}_initSrcChangeHandler(){let e=this;Object.defineProperty(this,"src",{get:()=>e.currentSrc,set(t){e.config.url=t,e.paused?e.start(t):(e.pause(),e.once("pause",()=>{e.start(t)}),e.once("canplay",()=>{e.play()})),e.once("canplay",()=>{e.currentTime=0})},configurable:!0})}start(e=this.config.url){e&&(this.__core__=this._context.registry("HLS_LIVE_CONTROLLER",a.default)({player:this,container:this.video}),this._context.init(),this.__core__.load(e),this._initEvents(),this._initSrcChangeHandler())}destroy(){this._context.destroy(),super.destroy()}}t.HlsVodPlayer=h,e.exports=h},"../xgplayer-loader/index.js":
/*!***********************************!*\
  !*** ../xgplayer-loader/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={FetchLoader:i(/*! ./src/fetch-loader */"../xgplayer-loader/src/fetch-loader.js").default}},"../xgplayer-loader/src/fetch-loader.js":
/*!**********************************************!*\
  !*** ../xgplayer-loader/src/fetch-loader.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js").EVENTS.LOADER_EVENTS,r=0,a=1,n=2,o=3;t.default=class{constructor(e){this.configs=Object.assign({},e),this.url=null,this.status=0,this.error=null,this._reader=null,this._canceled=!1,this._destroyed=!1,this.readtype=this.configs.readtype,this.buffer=this.configs.buffer||"LOADER_BUFFER",this._loaderTaskNo=0}init(){this.on(s.LADER_START,this.load.bind(this))}static get type(){return"loader"}load(e,t){let i=this;this.url=e,this._canceled=!1;let r=this.getParams(t);return i.loading=!0,fetch(this.url,r).then((function(e){if(e.ok)return i.status=e.status,i._onFetchResponse(e);i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,new Error("invalid response."))})).catch((function(e){throw i.loading=!1,i.emit(s.LOADER_ERROR,i.TAG,e),new Error(e.message)}))}_onFetchResponse(e){let t=this,i=this._context.getInstance(this.buffer);this._loaderTaskNo++;let l=this._loaderTaskNo;if(!0===e.ok)switch(this.readtype){case n:e.json().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case a:e.text().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(e),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case o:e.arrayBuffer().then(e=>{t.loading=!1,t._canceled||t._destroyed||(i?(i.push(new Uint8Array(e)),t.emit(s.LOADER_COMPLETE,i)):t.emit(s.LOADER_COMPLETE,e))});break;case r:default:return this._onReader(e.body.getReader(),l)}}_onReader(e,t){let i=this._context.getInstance(this.buffer);if(!i&&this._reader||this._destroyed)try{this._reader.cancel()}catch(e){}if(this._reader=e,!1===this.loading)return;let r=this;this._reader&&this._reader.read().then((function(a){if(a.done)return r.loading=!1,r.status=0,void r.emit(s.LOADER_COMPLETE,i);if(!r._canceled&&!r._destroyed)return i.push(a.value),r.emit(s.LOADER_DATALOADED,i),r._onReader(e,t);if(r._reader)try{r._reader.cancel()}catch(e){}})).catch(e=>{r.loading=!1,r.emit(s.LOADER_ERROR,r.TAG,e)})}getParams(e){let t=Object.assign({},e),i=new Headers,s={method:"GET",headers:i,mode:"cors",cache:"default"};if("object"==typeof this.configs.headers){let e=this.configs.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}if("object"==typeof t.headers){let e=t.headers;for(let t in e)e.hasOwnProperty(t)&&i.append(t,e[t])}return!1===t.cors&&(s.mode="same-origin"),t.withCredentials&&(s.credentials="include"),s}cancel(){if(this._reader){try{this._reader.cancel()}catch(e){}this._reader=null,this.loading=!1,this._canceled=!0}}destroy(){this._destroyed=!0,this.cancel()}}},"../xgplayer-remux/src/mp4/fmp4.js":
/*!*****************************************!*\
  !*** ../xgplayer-remux/src/mp4/fmp4.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=i(/*! xgplayer-utils */"../xgplayer-utils/index.js");class r{static size(e){return s.Buffer.writeUint32(e)}static initBox(e,t,...i){const a=new s.Buffer;return a.write(r.size(e),r.type(t),...i),a.buffer}static extension(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}static ftyp(){return r.initBox(24,"ftyp",new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]))}static moov({type:e,meta:t}){let i,s=8,a=r.mvhd(t.duration,t.timescale);i="video"===e?r.videoTrak(t):r.audioTrak(t);let n=r.mvex(t.duration,t.timescale||1e3,t.id);return[a,i,n].forEach(e=>{s+=e.byteLength}),r.initBox(s,"moov",a,i,n)}static mvhd(e,t=1e3){let i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return r.initBox(8+i.length,"mvhd",new Uint8Array(i))}static videoTrak(e){let t=8,i=r.tkhd({id:1,duration:e.duration,timescale:e.timescale||1e3,width:e.presentWidth,height:e.presentHeight,type:"video"}),s=r.mdia({type:"video",timescale:e.timescale||1e3,duration:e.duration,avcc:e.avcc,parRatio:e.parRatio,width:e.presentWidth,height:e.presentHeight});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static audioTrak(e){let t=8,i=r.tkhd({id:2,duration:e.duration,timescale:e.timescale||1e3,width:0,height:0,type:"audio"}),s=r.mdia({type:"audio",timescale:e.timescale||1e3,duration:e.duration,channelCount:e.channelCount,samplerate:e.sampleRate,config:e.config});return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"trak",i,s)}static tkhd(e){let t=e.id,i=e.duration,s=e.width,a=e.height,n=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>>8&255,255&s,0,0,a>>>8&255,255&a,0,0]);return r.initBox(8+n.byteLength,"tkhd",n)}static edts(e){let t=new s.Buffer,i=e.duration,a=e.mediaTime;return t.write(r.size(36),r.type("edts")),t.write(r.size(28),r.type("elst")),t.write(new Uint8Array([0,0,0,1,i>>24&255,i>>16&255,i>>8&255,255&i,a>>24&255,a>>16&255,a>>8&255,255&a,0,0,0,1])),t.buffer}static mdia(e){let t=8,i=r.mdhd(e.timescale,e.duration),s=r.hdlr(e.type),a=r.minf(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"mdia",i,s,a)}static mdhd(e=1e3,t){let i=new Uint8Array([0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,85,196,0,0]);return r.initBox(12+i.byteLength,"mdhd",r.extension(0,0),i)}static hdlr(e){let t=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===e&&(t.splice(8,4,115,111,117,110),t.splice(24,13,83,111,117,110,100,72,97,110,100,108,101,114,0)),r.initBox(8+t.length,"hdlr",new Uint8Array(t))}static minf(e){let t=8,i="video"===e.type?r.vmhd():r.smhd(),s=r.dinf(),a=r.stbl(e);return[i,s,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"minf",i,s,a)}static vmhd(){return r.initBox(20,"vmhd",new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]))}static smhd(){return r.initBox(16,"smhd",new Uint8Array([0,0,0,0,0,0,0,0]))}static dinf(){let e=new s.Buffer;return e.write(r.size(36),r.type("dinf"),r.size(28),r.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),e.buffer}static stbl(e){let t=8,i=r.stsd(e),s=r.stts(),a=r.stsc(),n=r.stsz(),o=r.stco();return[i,s,a,n,o].forEach(e=>{t+=e.byteLength}),r.initBox(t,"stbl",i,s,a,n,o)}static stsd(e){let t;return t="audio"===e.type?r.mp4a(e):r.avc1(e),r.initBox(16+t.byteLength,"stsd",r.extension(0,0),new Uint8Array([0,0,0,1]),t)}static mp4a(e){let t=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,e.samplerate>>8&255,255&e.samplerate,0,0]),i=r.esds(e.config);return r.initBox(8+t.byteLength+i.byteLength,"mp4a",t,i)}static esds(e=[43,146,8,0]){const t=e.length;let i=new s.Buffer,a=new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e).concat([6,1,2]));return i.write(r.size(8+a.byteLength),r.type("esds"),a),i.buffer}static avc1(e){let t=new s.Buffer,i=e.width,a=e.height,n=e.parRatio.height,o=e.parRatio.width,l=e.avcc,d=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,i>>8&255,255&i,a>>8&255,255&a,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),h=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),u=new Uint8Array([n>>24,n>>16&255,n>>8&255,255&n,o>>24,o>>16&255,o>>8&255,255&o]);return t.write(r.size(40+d.byteLength+l.byteLength+h.byteLength),r.type("avc1"),d,r.size(8+l.byteLength),r.type("avcC"),l,r.size(20),r.type("btrt"),h,r.size(16),r.type("pasp"),u),t.buffer}static stts(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stts",e)}static stsc(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stsc",e)}static stco(){let e=new Uint8Array([0,0,0,0,0,0,0,0]);return r.initBox(16,"stco",e)}static stsz(){let e=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return r.initBox(20,"stsz",e)}static mvex(e,t=1e3,i){let a=new s.Buffer,n=s.Buffer.writeUint32(e);return a.write(r.size(56),r.type("mvex"),r.size(16),r.type("mehd"),r.extension(0,0),n,r.trex(i)),a.buffer}static trex(e){let t=new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.initBox(8+t.byteLength,"trex",t)}static moof(e){let t=8,i=r.mfhd(),s=r.traf(e);return[i,s].forEach(e=>{t+=e.byteLength}),r.initBox(t,"moof",i,s)}static mfhd(){let e=s.Buffer.writeUint32(r.sequence);return r.sequence+=1,r.initBox(16,"mfhd",r.extension(0,0),e)}static traf(e){let t=8,i=r.tfhd(e.id),s=r.tfdt(e.time),a=r.sdtp(e),n=r.trun(e,a.byteLength);return[i,s,n,a].forEach(e=>{t+=e.byteLength}),r.initBox(t,"traf",i,s,n,a)}static tfhd(e){let t=s.Buffer.writeUint32(e);return r.initBox(16,"tfhd",r.extension(0,0),t)}static tfdt(e){return r.initBox(16,"tfdt",r.extension(0,0),s.Buffer.writeUint32(e))}static trun(e,t){let i=new s.Buffer,a=s.Buffer.writeUint32(e.samples.length),n=s.Buffer.writeUint32(92+16*e.samples.length+t);return i.write(r.size(20+16*e.samples.length),r.type("trun"),new Uint8Array([0,0,15,1]),a,n),e.samples.forEach(e=>{const t=e.flags;i.write(new Uint8Array([e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,e.size>>>24&255,e.size>>>16&255,e.size>>>8&255,255&e.size,t.isLeading<<2|t.dependsOn,t.isDependedOn<<6|t.hasRedundancy<<4|t.isNonSync,0,0,e.cts>>>24&255,e.cts>>>16&255,e.cts>>>8&255,255&e.cts]))}),i.buffer}static sdtp(e){let t=new s.Buffer;return t.write(r.size(12+e.samples.length),r.type("sdtp"),r.extension(0,0)),e.samples.forEach(e=>{const i=e.flags,s=i.isLeading<<6|i.dependsOn<<4|i.isDependedOn<<2|i.hasRedundancy;t.write(new Uint8Array([s]))}),t.buffer}static mdat(e){let t=new s.Buffer,i=8;e.samples.forEach(e=>{i+=e.size}),t.write(r.size(i),r.type("mdat"));let a=new Uint8Array(i),n=0;return a.set(t.buffer,n),n+=8,e.samples.forEach(e=>{e.buffer.forEach(e=>{a.set(e,n),n+=e.byteLength})}),a}}r.type=e=>new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]),r.sequence=1,t.default=r},"../xgplayer-remux/src/mp4/index.js":
/*!******************************************!*\
  !*** ../xgplayer-remux/src/mp4/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! xgplayer-utils */"../xgplayer-utils/index.js"),a=i(/*! ./fmp4 */"../xgplayer-remux/src/mp4/fmp4.js"),n=(s=a)&&s.__esModule?s:{default:s};const o=r.EVENTS.REMUX_EVENTS;class l{constructor(){this._dtsBase=0,this._isDtsBaseInited=!1,this._audioNextDts=null,this._videoNextDts=null,this._videoSegmentList=new r.MediaSegmentList("video"),this._audioSegmentList=new r.MediaSegmentList("audio");const{browser:e}=r.sniffer;this._fillSilenceFrame="ie"===e,this.videoAllDuration=0,this.audioAllDuration=0}init(){this.on(o.REMUX_MEDIA,this.remux.bind(this)),this.on(o.REMUX_METADATA,this.onMetaDataReady.bind(this))}destroy(){this._dtsBase=-1,this._dtsBaseInited=!1,this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear(),this._videoSegmentList=null,this._audioSegmentList=null}remux(){const{audioTrack:e,videoTrack:t}=this._context.getInstance("TRACKS");!this._isDtsBaseInited&&this.calcDtsBase(e,t),this._remuxVideo(t),this._remuxAudio(e)}resetDtsBase(){this._dtsBase=0}seek(){this._videoNextDts=null,this._audioNextDts=null,this._videoSegmentList.clear(),this._audioSegmentList.clear()}onMetaDataReady(e){let t,i,s=new r.Buffer,a=n.default.ftyp();if("audio"===e){const{audioTrack:e}=this._context.getInstance("TRACKS");i=e}else{const{videoTrack:e}=this._context.getInstance("TRACKS");i=e}t=n.default.moov({type:e,meta:i.meta}),s.write(a,t);let l=this._context.getInstance("PRE_SOURCE_BUFFER"),d=l.getSource(e);d||(d=l.createSource(e)),d.mimetype=i.meta.codec,d.init=s,d.inited=!1,this.resetDtsBase(),this.emit(o.INIT_SEGMENT,e)}calcDtsBase(e,t){if(!e.samples.length&&!t.samples.length)return;let i=1/0,s=1/0;e.samples&&e.samples.length&&(i=e.samples[0].dts),t.samples&&t.samples.length&&(s=t.samples[0].dts),this._dtsBase=Math.min(i,s),this._isDtsBaseInited=!0}_remuxVideo(e){const t=e;if(!e.samples||!e.samples.length)return;let{samples:i}=t,s=-1;const a=[],l={samples:[]};for(;i.length;){const e=i.shift(),{isKeyframe:t}=e;let r,n,o=e.dts-this._dtsBase;-1===s&&(s=o),void 0!==e.pts&&(r=(n=e.pts-this._dtsBase)-o),void 0!==e.cts&&(n=e.cts+o,r=e.cts);let d={buffer:[],size:0};l.samples.push(d),d.buffer.push(e.data),d.size+=e.data.byteLength;let h=0;if(i.length>=1){h=i[0].dts-this._dtsBase-o}else h=a.length>=1?a[a.length-1].duration:this.videoMeta.refSampleDuration;this.videoAllDuration+=h,console.log(`dts ${o}`,`pts ${n}`,`cts: ${r}`,`duration: ${h}`,e),a.push({dts:o,cts:r,pts:n,data:e.data,size:e.data.byteLength,isKeyframe:t,duration:h,flags:{isLeading:0,dependsOn:t?2:1,isDependedOn:t?1:0,hasRedundancy:0,isNonSync:t?0:1},originDts:o,type:"video"})}let d=new r.Buffer;const h=n.default.moof({id:t.meta.id,time:s,samples:a}),u=n.default.mdat(l);d.write(h,u),t.samples=[],t.length=0;let c=this._context.getInstance("PRE_SOURCE_BUFFER"),f=c.getSource("video");f||(f=c.createSource("video")),f.data.push(d),this.emit(o.MEDIA_SEGMENT,"video")}_remuxAudio(e){const{samples:t}=e;let i=-1,s=[];const a={samples:[]};if(!t||!t.length)return;let l=!1;for(;t.length;){let e=t.shift();const{data:r}=e;let n=e.dts-this._dtsBase;const o=n;l||(i=n,l=!0);let d=0;if(this.audioMeta.refSampleDurationFixed)d=this.audioMeta.refSampleDurationFixed;else if(t.length>=1){d=t[0].dts-this._dtsBase-n}else d=s.length>=1?s[s.length-1].duration:this.audioMeta.refSampleDuration;this.audioAllDuration+=d;const h={dts:n,pts:n,cts:0,size:r.byteLength,duration:e.duration?e.duration:d,flags:{isLeading:0,dependsOn:2,isDependedOn:1,hasRedundancy:0,isNonSync:0},isKeyframe:!0,originDts:o,type:"audio"};let u={buffer:[],size:0};u.buffer.push(r),u.size+=r.byteLength,a.samples.push(u),s.push(h)}const d=new r.Buffer,h=n.default.moof({id:e.meta.id,time:i,samples:s}),u=n.default.mdat(a);d.write(h,u),e.samples=[],e.length=0;let c=this._context.getInstance("PRE_SOURCE_BUFFER"),f=c.getSource("audio");f||(f=c.createSource("audio")),f.data.push(d),this.emit(o.MEDIA_SEGMENT,"audio",d)}initSilentAudio(e,t){const i=l.getSilentFrame(this._audioMeta.channelCount);return{dts:e,pts:e,cts:0,duration:t,unit:i,size:i.byteLength,originDts:e,type:"video"}}get videoMeta(){return this._context.getInstance("TRACKS").videoTrack.meta}get audioMeta(){return this._context.getInstance("TRACKS").audioTrack.meta}static getSilentFrame(e){return 1===e?new Uint8Array([0,200,0,128,35,128]):2===e?new Uint8Array([33,0,73,144,2,25,0,35,128]):3===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]):4===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]):5===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]):6===e?new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]):null}}t.default=l},"../xgplayer-utils/index.js":
/*!**********************************!*\
  !*** ../xgplayer-utils/index.js ***!
  \**********************************/
/*! no static exports found */function(e,t,i){"use strict";e.exports={Context:i(/*! ./src/context */"../xgplayer-utils/src/context.js").default,EVENTS:i(/*! ./src/constants/events */"../xgplayer-utils/src/constants/events.js").default,WORKER_COMMANDS:i(/*! ./src/constants/worker-commands */"../xgplayer-utils/src/constants/worker-commands.js").default,sniffer:i(/*! ./src/env/sniffer */"../xgplayer-utils/src/env/sniffer.js").default,isLe:i(/*! ./src/env/isle */"../xgplayer-utils/src/env/isle.js").default,UTF8:i(/*! ./src/env/utf8 */"../xgplayer-utils/src/env/utf8.js").default,MediaInfo:i(/*! ./src/models/media-info */"../xgplayer-utils/src/models/media-info.js").default,MediaSample:i(/*! ./src/models/media-sample */"../xgplayer-utils/src/models/media-sample.js").default,MediaSegment:i(/*! ./src/models/media-segment */"../xgplayer-utils/src/models/media-segment.js").default,MediaSegmentList:i(/*! ./src/models/media-segment-list */"../xgplayer-utils/src/models/media-segment-list.js").default,AudioTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").AudioTrackMeta,VideoTrackMeta:i(/*! ./src/models/track-meta */"../xgplayer-utils/src/models/track-meta.js").VideoTrackMeta,AudioTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").AudioTrackSample,VideoTrackSample:i(/*! ./src/models/track-sample */"../xgplayer-utils/src/models/track-sample.js").VideoTrackSample,Mse:i(/*! ./src/mse/index */"../xgplayer-utils/src/mse/index.js").default,Stream:i(/*! ./src/write/stream */"../xgplayer-utils/src/write/stream.js").default,Buffer:i(/*! ./src/write/buffer */"../xgplayer-utils/src/write/buffer.js").default,Crypto:i(/*! ./src/crypto */"../xgplayer-utils/src/crypto/index.js").default}},"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js":
/*!***********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,i=arguments.length,s=Array(i>1?i-1:0),r=1;r<i;r++)s[r-1]=arguments[r];var a=!0,n=!1,o=void 0;try{for(var l,d=s[Symbol.iterator]();!(a=(l=d.next()).done);a=!0){var h=l.value;t+=h.length}}catch(e){n=!0,o=e}finally{try{!a&&d.return&&d.return()}finally{if(n)throw o}}var u=new e(t),c=0,f=!0,p=!1,_=void 0;try{for(var m,y=s[Symbol.iterator]();!(f=(m=y.next()).done);f=!0){var g=m.value;u.set(g,c),c+=g.length}}catch(e){p=!0,_=e}finally{try{!f&&y.return&&y.return()}finally{if(p)throw _}}return u}},"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js":
/*!**********************************************************************!*\
  !*** ../xgplayer-utils/node_modules/concat-typed-array/lib/index.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,i){"use strict";var s,r=i(/*! ./concat */"../xgplayer-utils/node_modules/concat-typed-array/lib/concat.js"),a=(s=r)&&s.__esModule?s:{default:s};e.exports=a.default},"../xgplayer-utils/src/constants/events.js":
/*!*************************************************!*\
  !*** ../xgplayer-utils/src/constants/events.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s={LADER_START:"LOADER_START",LOADER_DATALOADED:"LOADER_DATALOADED",LOADER_COMPLETE:"LOADER_COMPLETE",LOADER_ERROR:"LOADER_ERROR"},r={DEMUX_START:"DEMUX_START",DEMUX_COMPLETE:"DEMUX_COMPLETE",DEMUX_ERROR:"DEMUX_ERROR",METADATA_PARSED:"METADATA_PARSED",VIDEO_METADATA_CHANGE:"VIDEO_METADATA_CHANGE",AUDIO_METADATA_CHANGE:"AUDIO_METADATA_CHANGE",MEDIA_INFO:"MEDIA_INFO"},a={REMUX_METADATA:"REMUX_METADATA",REMUX_MEDIA:"REMUX_MEDIA",MEDIA_SEGMENT:"MEDIA_SEGMENT",REMUX_ERROR:"REMUX_ERROR",INIT_SEGMENT:"INIT_SEGMENT"},n={SOURCE_UPDATE_END:"SOURCE_UPDATE_END"},o={RETRY_TIME_EXCEEDED:"RETRY_TIME_EXCEEDED"},l=Object.assign({},s,r,a,n,o),d=[],h=[];for(let e in l)l.hasOwnProperty(e)&&d.push(l[e]);for(let e in l)l.hasOwnProperty(e)&&h.push(l[e]);t.default={ALLEVENTS:l,HLS_EVENTS:o,REMUX_EVENTS:a,DEMUX_EVENTS:r,MSE_EVENTS:n,LOADER_EVENTS:s,FlvAllowedEvents:d,HlsAllowedEvents:h,CRYTO_EVENTS:{START_DECRYPT:"START_DECRYPT",DECRYPTED:"DECRYPTED"}}},"../xgplayer-utils/src/constants/worker-commands.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/constants/worker-commands.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CONTEXT_COMOMANDS={ON:"on",ONCE:"once",OFF:"off",EMIT:"emit",DESTROY:"destroy"}},"../xgplayer-utils/src/context.js":
/*!****************************************!*\
  !*** ../xgplayer-utils/src/context.js ***!
  \****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! ./models/media-info */"../xgplayer-utils/src/models/media-info.js"),a=(s=r)&&s.__esModule?s:{default:s},n=i(/*! events */"./node_modules/events/events.js");const o="__TO__";t.default=class{constructor(e=[]){this._emitter=new n.EventEmitter,this._instanceMap={},this._clsMap={},this._inited=!1,this.mediaInfo=new a.default,this.allowedEvents=e,this._hooks={}}getInstance(e){const t=this._instanceMap[e];return t||null}initInstance(e,...t){if(this._clsMap[e]){const i=new this._clsMap[e](...t);return this._instanceMap[e]=i,i.init&&i.init(),i}throw new Error(`${e}未在context中注册`)}init(e){if(!this._inited){for(let t in this._clsMap)this._clsMap.hasOwnProperty(t)&&!this._instanceMap[t]&&this.initInstance(t,e);this._inited=!0}}registry(e,t){const i=this._emitter,s=this._isMessageNameValid.bind(this),r=this;return this._clsMap[e]=class extends t{constructor(...t){super(...t),this.listeners={},this.onceListeners={},this.TAG=e,this._context=r}on(t,r){return s(t),this.listeners[t]?this.listeners[t].push(r):this.listeners[t]=[r],i.on(`${t}${o}${e}`,r),i.on(t,r)}before(e,t){s(e),r._hooks[e]?r._hooks[e].push(t):r._hooks[e]=[t]}once(t,r){return s(t),this.onceListeners[t]?this.onceListeners[t].push(r):this.onceListeners[t]=[r],i.once(`${t}${o}${e}`,r),i.once(t,r)}emit(e,...t){s(e);const a=r._hooks?r._hooks[e]:null;if(a)for(let e=0,t=a.length;e<t;e++){(0,a[e])()}return i.emit(e,...t)}emitTo(e,t,...r){return s(t),i.emit(`${t}${o}${e}`,...r)}off(e,t){return s(e),i.off(e,t)}removeListeners(){const t=Object.prototype.hasOwnProperty.bind(this.listeners);for(let s in this.listeners)if(t(s)){const t=this.listeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${o}${e}`,a)}}for(let s in this.onceListeners)if(t(s)){const t=this.onceListeners[s]||[];for(let r=0;r<t.length;r++){const a=t[r];i.off(s,a),i.off(`${s}${o}${e}`,a)}}}destroy(){if(this.removeListeners(),this.listeners={},delete r._instanceMap[e],super.destroy)return super.destroy()}},(...t)=>this.initInstance(e,...t)}destroyInstances(){Object.keys(this._instanceMap).forEach(e=>{this._instanceMap[e].destroy&&this._instanceMap[e].destroy()})}destroy(){this._emitter=null,this.allowedEvents=[],this._clsMap=null,this._context=null,this._hooks=null,this.destroyInstances()}_isMessageNameValid(e){if(!this.allowedEvents.indexOf(e)<0)throw new Error(`unregistered message name: ${e}`)}}},"../xgplayer-utils/src/crypto/index.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/crypto/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! ../constants/events */"../xgplayer-utils/src/constants/events.js");const a=((s=r)&&s.__esModule?s:{default:s}).default.CRYTO_EVENTS;t.default=class{constructor(e){this.inputBuffer=e.inputbuffer,this.outputBuffer=e.outputbuffer,this.key=e.key,this.iv=e.iv,this.method=e.method,this.crypto=window.crypto||window.msCrypto}init(){this.on(a.START_DECRYPT,this.decript.bind(this))}decript(){if(this.aeskey)this.decriptData();else{this.crypto.subtle.importKey("raw",this.key.buffer,{name:"AES-CBC"},!1,["encrypt","decrypt"]).then(e=>{this.aeskey=e,this.decriptData()})}}decriptData(){let e=this._context.getInstance(this.inputBuffer),t=this._context.getInstance(this.outputBuffer),i=e.shift();i&&this.crypto.subtle.decrypt({name:"AES-CBC",iv:this.iv.buffer},this.aeskey,i).then(e=>{t.push(new Uint8Array(e)),this.emit(a.DECRYPTED),this.decriptData(i)})}}},"../xgplayer-utils/src/env/isle.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/isle.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}();t.default=s},"../xgplayer-utils/src/env/sniffer.js":
/*!********************************************!*\
  !*** ../xgplayer-utils/src/env/sniffer.js ***!
  \********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),r={get device(){let e=r.os;return e.isPc?"pc":e.isTablet?"tablet":"mobile"},get browser(){let e=navigator.userAgent.toLowerCase(),t={ie:/rv:([\d.]+)\) like gecko/,firfox:/firefox\/([\d.]+)/,chrome:/chrome\/([\d.]+)/,opera:/opera.([\d.]+)/,safari:/version\/([\d.]+).*safari/};return[].concat(Object.keys(t).filter(i=>t[i].test(e)))[0]},get os(){let e=navigator.userAgent,t=/(?:Windows Phone)/.test(e),i=/(?:SymbianOS)/.test(e)||t,s=/(?:Android)/.test(e),r=/(?:Firefox)/.test(e),a=/(?:iPad|PlayBook)/.test(e)||s&&!/(?:Mobile)/.test(e)||r&&/(?:Tablet)/.test(e),n=/(?:iPhone)/.test(e)&&!a;return{isTablet:a,isPhone:n,isAndroid:s,isPc:!n&&!s&&!i,isSymbian:i,isWindowsPhone:t,isFireFox:r}},get isLe(){return s}};t.default=r},"../xgplayer-utils/src/env/utf8.js":
/*!*****************************************!*\
  !*** ../xgplayer-utils/src/env/utf8.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{static decode(e){const t=[],i=e;let r=0;const a=e.length;for(;r<a;)if(i[r]<128)t.push(String.fromCharCode(i[r])),++r;else{if(i[r]<192);else if(i[r]<224){if(s._checkContinuation(i,r,1)){const e=(31&i[r])<<6|63&i[r+1];if(e>=128){t.push(String.fromCharCode(65535&e)),r+=2;continue}}}else if(i[r]<240){if(s._checkContinuation(i,r,2)){const e=(15&i[r])<<12|(63&i[r+1])<<6|63&i[r+2];if(e>=2048&&55296!=(63488&e)){t.push(String.fromCharCode(65535&e)),r+=3;continue}}}else if(i[r]<248&&s._checkContinuation(i,r,3)){let e=(7&i[r])<<18|(63&i[r+1])<<12|(63&i[r+2])<<6|63&i[r+3];if(e>65536&&e<1114112){e-=65536,t.push(String.fromCharCode(e>>>10|55296)),t.push(String.fromCharCode(1023&e|56320)),r+=4;continue}}t.push(String.fromCharCode(65533)),++r}return t.join("")}static _checkContinuation(e,t,i){let s=e;if(t+i<s.length){for(;i--;)if(128!=(192&s[++t]))return!1;return!0}return!1}}t.default=s},"../xgplayer-utils/src/models/media-info.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/media-info.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=e=>{for(let t in e)if(e.hasOwnProperty(t)&&null===e[t])return!1;return!0};class r{constructor(){this.mimeType=null,this.duration=null,this.hasVideo=null,this.video={codec:null,width:null,height:null,profile:null,level:null,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},chromaFormat:null,parRatio:{width:1,height:1}},this.hasAudio=null,this.audio={codec:null,sampleRate:null,sampleRateIndex:null,channelCount:null}}isComplete(){return r.isBaseInfoReady(this)&&r.isVideoReady(this)&&r.isAudioReady(this)}static isBaseInfoReady(e){return s(e)}static isVideoReady(e){return!e.hasVideo||s(e.video)}static isAudioReady(e){return!e.hasAudio||s(e.video)}}t.default=r},"../xgplayer-utils/src/models/media-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefaultInf();if(!e||"[object Object]"!==Object.prototype.toString.call(e))return t;let i=Object.assign({},t,e);Object.entries(i).forEach(([e,t])=>{this[e]=t})}static getDefaultInf(){return{dts:null,pts:null,duration:null,position:null,isRAP:!1,originDts:null}}}t.default=s},"../xgplayer-utils/src/models/media-segment-list.js":
/*!**********************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment-list.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._type=e,this._list=[],this._lastAppendLocation=-1}get type(){return this._type}get length(){return this._list.length}isEmpty(){return 0===this._list.length}clear(){this._list=[],this._lastAppendLocation=-1}_searchNearestSegmentBefore(e){let t=this._list;if(0===t.length)return-2;let i=t.length-1,s=0,r=0,a=i,n=0;if(e<t[0].originDts)return n=-1;for(;r<=a;){if((s=r+Math.floor((a-r)/2))===i||e>t[s].lastSample.originDts&&e<t[s+1].originDts){n=s;break}t[s].originDts<e?r=s+1:a=s-1}return n}_searchNearestSegmentAfter(e){return this._searchNearestSegmentBefore(e)+1}append(e){let t=this._list,i=this._lastAppendLocation,s=0;-1!==i&&i<t.length&&e.originStartDts>=t[i].lastSample.originDts&&(i===t.length-1||i<t.length-1&&e.originStartDts<t[i+1].originStartDts)?s=i+1:t.length>0&&(s=this._searchNearestSegmentBefore(e.originStartDts)+1),this._lastAppendLocation=s,this._list.splice(s,0,e)}getLastSegmentBefore(e){let t=this._searchNearestSegmentBefore(e);return t>=0?this._list[t]:null}getLastSampleBefore(e){let t=this.getLastSegmentBefore(e);return null!==t?t.lastSample:null}getLastRAPBefore(e){let t=this._searchNearestSegmentBefore(e),i=this._list[t].randomAccessPoints;for(;0===i.length&&t>0;)t--,i=this._list[t].randomAccessPoints;return i.length>0?i[i.length-1]:null}}},"../xgplayer-utils/src/models/media-segment.js":
/*!*****************************************************!*\
  !*** ../xgplayer-utils/src/models/media-segment.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.startDts=-1,this.endDts=-1,this.startPts=-1,this.endPts=-1,this.originStartDts=-1,this.originEndDts=-1,this.randomAccessPoints=[],this.firstSample=null,this.lastSample=null}addRAP(e){e.isRAP=!0,this.randomAccessPoints.push(e)}}},"../xgplayer-utils/src/models/track-meta.js":
/*!**************************************************!*\
  !*** ../xgplayer-utils/src/models/track-meta.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.AudioTrackMeta=class{constructor(e){const t={sampleRate:48e3,channelCount:2,codec:"mp4a.40.2",config:[41,401,136,0],duration:0,id:2,refSampleDuration:21,sampleRateIndex:3,timescale:1e3,type:"audio"};return e?Object.assign({},t,e):t}destroy(){this.init=null}};t.VideoTrackMeta=class{constructor(e){const t={avcc:null,sps:new Uint8Array(0),pps:new Uint8Array(0),chromaFormat:420,codec:"avc1.640020",codecHeight:720,codecWidth:1280,duration:0,frameRate:{fixed:!0,fps:25,fps_num:25e3,fps_den:1e3},id:1,level:"3.2",presentHeight:720,presentWidth:1280,profile:"High",refSampleDuration:40,parRatio:{height:1,width:1},timescale:1e3,type:"video"};return e?Object.assign({},t,e):t}destroy(){this.init=null,this.sps=null,this.pps=null}}},"../xgplayer-utils/src/models/track-sample.js":
/*!****************************************************!*\
  !*** ../xgplayer-utils/src/models/track-sample.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=s.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,data:new Uint8Array}}}t.AudioTrackSample=s;class r{constructor(e){let t=r.getDefault();return e?Object.assign({},t,e):t}static getDefault(){return{dts:null,pts:null,isKeyframe:!1,originDts:null,data:new Uint8Array}}}t.VideoTrackSample=r},"../xgplayer-utils/src/mse/index.js":
/*!******************************************!*\
  !*** ../xgplayer-utils/src/mse/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){this.configs=Object.assign({},e),this.container=this.configs.container,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=this.configs.preloadTime||1,this.onSourceOpen=this.onSourceOpen.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onUpdateEnd=this.onUpdateEnd.bind(this),this.onWaiting=this.onWaiting.bind(this)}init(){this.mediaSource=new self.MediaSource,this.mediaSource.addEventListener("sourceopen",this.onSourceOpen),this.container.src=URL.createObjectURL(this.mediaSource),this.url=this.container.src,this.container.addEventListener("timeupdate",this.onTimeUpdate),this.container.addEventListener("waiting",this.onWaiting)}onTimeUpdate(){this.emit("TIME_UPDATE",this.container)}onWaiting(){this.emit("WAITING",this.container)}onSourceOpen(){this.addSourceBuffers()}onUpdateEnd(){this.emit("SOURCE_UPDATE_END"),this.doAppend()}addSourceBuffers(){if("open"!==this.mediaSource.readyState)return;let e,t=this._context.getInstance("PRE_SOURCE_BUFFER"),i=this._context.getInstance("TRACKS");t=t.sources;let s=!1;for(let r=0,a=Object.keys(t).length;r<a;r++){let a=Object.keys(t)[r];if("audio"===a?e=i.audioTrack:"video"===a&&(e=i.videoTrack),e){let i="audio"===a?21:40;e.meta&&e.meta.refSampleDuration&&(i=e.meta.refSampleDuration),t[a].data.length>=this.preloadTime/i&&(s=!0)}}if(s){if(Object.keys(this.sourceBuffers).length>0)return;for(let e=0,i=Object.keys(t).length;e<i;e++){let i=Object.keys(t)[e],s=t[i],r="video"===i?"video/mp4;codecs="+s.mimetype:"audio/mp4;codecs="+s.mimetype,a=this.mediaSource.addSourceBuffer(r);this.sourceBuffers[i]=a,a.addEventListener("updateend",this.onUpdateEnd),this.doAppend()}}}doAppend(){let e=this._context.getInstance("PRE_SOURCE_BUFFER");if(e)for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i=Object.keys(this.sourceBuffers)[t],s=this.sourceBuffers[i];if(!s.updating){let t=e.sources[i];if(t&&!t.inited)s.appendBuffer(t.init.buffer.buffer),t.inited=!0;else if(t){let e=t.data.shift();e&&s.appendBuffer(e.buffer.buffer)}}}}endOfStream(){const{readyState:e,activeSourceBuffers:t}=this.mediaSource;if("open"===e&&0===t.length)try{this.mediaSource.endOfStream()}catch(e){}}remove(e,t=0){for(let i=0;i<Object.keys(this.sourceBuffers).length;i++){let s=this.sourceBuffers[Object.keys(this.sourceBuffers)[i]];s.updating||s.remove(t,e)}}removeBuffers(){const e=[];for(let t=0;t<Object.keys(this.sourceBuffers).length;t++){let i,r=this.sourceBuffers[Object.keys(this.sourceBuffers)[t]];r.removeEventListener("updateend",this.onUpdateEnd),r.updating?i=new Promise(e=>{const t=function(){let i=3;const a=()=>{r.updating?i>0?(setTimeout(a,200),i--):e():(s.clearBuffer(r),e())};setTimeout(a,200),r.removeEventListener("updateend",t)};r.addEventListener("updateend",t)}):(s.clearBuffer(r),i=Promise.resolve()),e.push(i)}return Promise.all(e)}destroy(){return this.removeBuffers().then(()=>{for(let e=0;e<Object.keys(this.sourceBuffers).length;e++){let t=this.sourceBuffers[Object.keys(this.sourceBuffers)[e]];this.mediaSource.removeSourceBuffer(t),delete this.sourceBuffers[Object.keys(this.sourceBuffers)[e]]}this.container.removeEventListener("timeupdate",this.onTimeUpdate),this.container.removeEventListener("waiting",this.onWaiting),this.mediaSource.removeEventListener("sourceopen",this.onSourceOpen),this.endOfStream(),window.URL.revokeObjectURL(this.url),this.url=null,this.configs={},this.container=null,this.mediaSource=null,this.sourceBuffers={},this.preloadTime=1})}static clearBuffer(e){const t=e.buffered;let i=.1;for(let e=0,s=t.length;e<s;e++)i=t.end(e);try{e.remove(0,i)}catch(e){}}}t.default=s},"../xgplayer-utils/src/write/buffer.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/buffer.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s,r=i(/*! concat-typed-array */"../xgplayer-utils/node_modules/concat-typed-array/lib/index.js"),a=(s=r)&&s.__esModule?s:{default:s};t.default=class{constructor(e){this.buffer=e||new Uint8Array(0)}write(...e){e.forEach(e=>{this.buffer=(0,a.default)(Uint8Array,this.buffer,e)})}static writeUint32(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}static readAsInt(e){let t="";return e.forEach(e=>{t+=function(e){return e.toString(16).padStart(2,"0")}(e)}),parseInt(t,16)}}},"../xgplayer-utils/src/write/stream.js":
/*!*********************************************!*\
  !*** ../xgplayer-utils/src/write/stream.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){if(!(e instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=e,this.dataview=new DataView(e),this.dataview.position=0}get length(){return this.buffer.byteLength}set position(e){this.dataview.position=e}get position(){return this.dataview.position}back(e){this.position-=e}skip(e){let t=Math.floor(e/4),i=e%4;for(let e=0;e<t;e++)s.readByte(this.dataview,4);i>0&&s.readByte(this.dataview,i)}static readByte(e,t,i){let s;switch(t){case 1:s=i?e.getInt8(e.position):e.getUint8(e.position);break;case 2:s=i?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(i)throw new Error("not supported for readByte 3");s=e.getUint8(e.position)<<16,s|=e.getUint8(e.position+1)<<8,s|=e.getUint8(e.position+2);break;case 4:s=i?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(i)throw new Error("not supported for readBody 8");s=e.getUint32(e.position)<<32,s|=e.getUint32(e.position+4);break;default:s=""}return e.position+=t,s}readUint8(){return s.readByte(this.dataview,1)}readUint16(){return s.readByte(this.dataview,2)}readUint24(){return s.readByte(this.dataview,3)}readUint32(){return s.readByte(this.dataview,4)}readUint64(){return s.readByte(this.dataview,8)}readInt8(){return s.readByte(this.dataview,1,!0)}readInt16(){return s.readByte(this.dataview,2,!0)}readInt32(){return s.readByte(this.dataview,4,!0)}writeUint32(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}}t.default=s},"./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */function(e,t,i){"use strict";var s,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a="object"===("undefined"==typeof Reflect?"undefined":r(Reflect))?Reflect:null,n=a&&"function"==typeof a.apply?a.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)};s=a&&"function"==typeof a.ownKeys?a.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function l(){l.init.call(this)}e.exports=l,l.EventEmitter=l,l.prototype._events=void 0,l.prototype._eventsCount=0,l.prototype._maxListeners=void 0;var d=10;function h(e){return void 0===e._maxListeners?l.defaultMaxListeners:e._maxListeners}function u(e,t,i,s){var a,n,o,l;if("function"!=typeof i)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===i?"undefined":r(i)));if(void 0===(n=e._events)?(n=e._events=Object.create(null),e._eventsCount=0):(void 0!==n.newListener&&(e.emit("newListener",t,i.listener?i.listener:i),n=e._events),o=n[t]),void 0===o)o=n[t]=i,++e._eventsCount;else if("function"==typeof o?o=n[t]=s?[i,o]:[o,i]:s?o.unshift(i):o.push(i),(a=h(e))>0&&o.length>a&&!o.warned){o.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=t,d.count=o.length,l=d,console&&console.warn&&console.warn(l)}return e}function c(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,n(this.listener,this.target,e))}function f(e,t,i){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:i},r=c.bind(s);return r.listener=i,s.wrapFn=r,r}function p(e,t,i){var s=e._events;if(void 0===s)return[];var r=s[t];return void 0===r?[]:"function"==typeof r?i?[r.listener||r]:[r]:i?function(e){for(var t=new Array(e.length),i=0;i<t.length;++i)t[i]=e[i].listener||e[i];return t}(r):m(r,r.length)}function _(e){var t=this._events;if(void 0!==t){var i=t[e];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function m(e,t){for(var i=new Array(t),s=0;s<t;++s)i[s]=e[s];return i}Object.defineProperty(l,"defaultMaxListeners",{enumerable:!0,get:function(){return d},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");d=e}}),l.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},l.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},l.prototype.getMaxListeners=function(){return h(this)},l.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var s="error"===e,r=this._events;if(void 0!==r)s=s&&void 0===r.error;else if(!s)return!1;if(s){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var l=r[e];if(void 0===l)return!1;if("function"==typeof l)n(l,this,t);else{var d=l.length,h=m(l,d);for(i=0;i<d;++i)n(h[i],this,t)}return!0},l.prototype.addListener=function(e,t){return u(this,e,t,!1)},l.prototype.on=l.prototype.addListener,l.prototype.prependListener=function(e,t){return u(this,e,t,!0)},l.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":r(t)));return this.on(e,f(this,e,t)),this},l.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":r(t)));return this.prependListener(e,f(this,e,t)),this},l.prototype.removeListener=function(e,t){var i,s,a,n,o;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+(void 0===t?"undefined":r(t)));if(void 0===(s=this._events))return this;if(void 0===(i=s[e]))return this;if(i===t||i.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,i.listener||t));else if("function"!=typeof i){for(a=-1,n=i.length-1;n>=0;n--)if(i[n]===t||i[n].listener===t){o=i[n].listener,a=n;break}if(a<0)return this;0===a?i.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(i,a),1===i.length&&(s[e]=i[0]),void 0!==s.removeListener&&this.emit("removeListener",e,o||t)}return this},l.prototype.off=l.prototype.removeListener,l.prototype.removeAllListeners=function(e){var t,i,s;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[e]),this;if(0===arguments.length){var r,a=Object.keys(i);for(s=0;s<a.length;++s)"removeListener"!==(r=a[s])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=i[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},l.prototype.listeners=function(e){return p(this,e,!0)},l.prototype.rawListeners=function(e){return p(this,e,!1)},l.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):_.call(e,t)},l.prototype.listenerCount=_,l.prototype.eventNames=function(){return this._eventsCount>0?s(this._events):[]}},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HlsPlayer=void 0;var s=i(/*! xgplayer-hls-live */"../xgplayer-hls-live/index.js"),r=i(/*! xgplayer-hls-vod */"../xgplayer-hls-vod/index.js");var a=t.HlsPlayer=function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t.isLive?new s.HlsLivePlayer(t):new r.HlsVodPlayer(t)};e.exports=a},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,i){e.exports=i(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!*************************!*\
  !*** external "Player" ***!
  \*************************/
/*! no static exports found */function(e,t){e.exports=window.Player}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,