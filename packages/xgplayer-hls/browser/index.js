window.HlsPlayer=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}({"./node_modules/concat-typed-array/lib/concat.js":
/*!*******************************************************!*\
  !*** ./node_modules/concat-typed-array/lib/concat.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];var a=!0,o=!1,s=void 0;try{for(var u,f=r[Symbol.iterator]();!(a=(u=f.next()).done);a=!0){var c=u.value;t+=c.length}}catch(e){o=!0,s=e}finally{try{!a&&f.return&&f.return()}finally{if(o)throw s}}var d=new e(t),l=0,h=!0,p=!1,y=void 0;try{for(var v,b=r[Symbol.iterator]();!(h=(v=b.next()).done);h=!0){var m=v.value;d.set(m,l),l+=m.length}}catch(e){p=!0,y=e}finally{try{!h&&b.return&&b.return()}finally{if(p)throw y}}return d}},"./node_modules/concat-typed-array/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/concat-typed-array/lib/index.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,i=n(/*! ./concat */"./node_modules/concat-typed-array/lib/concat.js"),a=(r=i)&&r.__esModule?r:{default:r};e.exports=a.default},"./node_modules/d/index.js":
/*!*********************************!*\
  !*** ./node_modules/d/index.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! type/value/is */"./node_modules/type/value/is.js"),i=n(/*! type/plain-function/is */"./node_modules/type/plain-function/is.js"),a=n(/*! es5-ext/object/assign */"./node_modules/es5-ext/object/assign/index.js"),o=n(/*! es5-ext/object/normalize-options */"./node_modules/es5-ext/object/normalize-options.js"),s=n(/*! es5-ext/string/#/contains */"./node_modules/es5-ext/string/#/contains/index.js");(e.exports=function(e,t){var n,i,u,f,c;return arguments.length<2||"string"!=typeof e?(f=t,t=e,e=null):f=arguments[2],r(e)?(n=s.call(e,"c"),i=s.call(e,"e"),u=s.call(e,"w")):(n=u=!0,i=!1),c={value:t,configurable:n,enumerable:i,writable:u},f?a(o(f),c):c}).gs=function(e,t,n){var u,f,c,d;return"string"!=typeof e?(c=n,n=t,t=e,e=null):c=arguments[3],r(t)?i(t)?r(n)?i(n)||(c=n,n=void 0):n=void 0:(c=t,t=n=void 0):t=void 0,r(e)?(u=s.call(e,"c"),f=s.call(e,"e")):(u=!0,f=!1),d={get:t,set:n,configurable:u,enumerable:f},c?a(o(c),d):d}},"./node_modules/es5-ext/function/noop.js":
/*!***********************************************!*\
  !*** ./node_modules/es5-ext/function/noop.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){}},"./node_modules/es5-ext/object/assign/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/object/assign/is-implemented.js")()?Object.assign:n(/*! ./shim */"./node_modules/es5-ext/object/assign/shim.js")},"./node_modules/es5-ext/object/assign/is-implemented.js":
/*!**************************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/is-implemented.js ***!
  \**************************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}},"./node_modules/es5-ext/object/assign/shim.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/assign/shim.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../keys */"./node_modules/es5-ext/object/keys/index.js"),i=n(/*! ../valid-value */"./node_modules/es5-ext/object/valid-value.js"),a=Math.max;e.exports=function(e,t){var n,o,s,u=a(arguments.length,2);for(e=Object(i(e)),s=function(r){try{e[r]=t[r]}catch(e){n||(n=e)}},o=1;o<u;++o)t=arguments[o],r(t).forEach(s);if(void 0!==n)throw n;return e}},"./node_modules/es5-ext/object/is-value.js":
/*!*************************************************!*\
  !*** ./node_modules/es5-ext/object/is-value.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../function/noop */"./node_modules/es5-ext/function/noop.js")();e.exports=function(e){return e!==r&&null!==e}},"./node_modules/es5-ext/object/keys/index.js":
/*!***************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/object/keys/is-implemented.js")()?Object.keys:n(/*! ./shim */"./node_modules/es5-ext/object/keys/shim.js")},"./node_modules/es5-ext/object/keys/is-implemented.js":
/*!************************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/is-implemented.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(){try{return Object.keys("primitive"),!0}catch(e){return!1}}},"./node_modules/es5-ext/object/keys/shim.js":
/*!**************************************************!*\
  !*** ./node_modules/es5-ext/object/keys/shim.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../is-value */"./node_modules/es5-ext/object/is-value.js"),i=Object.keys;e.exports=function(e){return i(r(e)?Object(e):e)}},"./node_modules/es5-ext/object/normalize-options.js":
/*!**********************************************************!*\
  !*** ./node_modules/es5-ext/object/normalize-options.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js"),i=Array.prototype.forEach,a=Object.create,o=function(e,t){var n;for(n in e)t[n]=e[n]};e.exports=function(e){var t=a(null);return i.call(arguments,(function(e){r(e)&&o(Object(e),t)})),t}},"./node_modules/es5-ext/object/valid-callable.js":
/*!*******************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-callable.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e}},"./node_modules/es5-ext/object/valid-value.js":
/*!****************************************************!*\
  !*** ./node_modules/es5-ext/object/valid-value.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./is-value */"./node_modules/es5-ext/object/is-value.js");e.exports=function(e){if(!r(e))throw new TypeError("Cannot use null or undefined");return e}},"./node_modules/es5-ext/string/#/contains/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/index.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=n(/*! ./is-implemented */"./node_modules/es5-ext/string/#/contains/is-implemented.js")()?String.prototype.contains:n(/*! ./shim */"./node_modules/es5-ext/string/#/contains/shim.js")},"./node_modules/es5-ext/string/#/contains/is-implemented.js":
/*!******************************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/is-implemented.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r="razdwatrzy";e.exports=function(){return"function"==typeof r.contains&&(!0===r.contains("dwa")&&!1===r.contains("foo"))}},"./node_modules/es5-ext/string/#/contains/shim.js":
/*!********************************************************!*\
  !*** ./node_modules/es5-ext/string/#/contains/shim.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=String.prototype.indexOf;e.exports=function(e){return r.call(this,e,arguments[1])>-1}},"./node_modules/event-emitter/index.js":
/*!*********************************************!*\
  !*** ./node_modules/event-emitter/index.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,i,a,o,s,u,f,c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d=n(/*! d */"./node_modules/d/index.js"),l=n(/*! es5-ext/object/valid-callable */"./node_modules/es5-ext/object/valid-callable.js"),h=Function.prototype.apply,p=Function.prototype.call,y=Object.create,v=Object.defineProperty,b=Object.defineProperties,m=Object.prototype.hasOwnProperty,w={configurable:!0,enumerable:!1,writable:!0};i=function(e,t){var n,i;return l(t),i=this,r.call(this,e,n=function(){a.call(i,e,n),h.call(t,this,arguments)}),n.__eeOnceListener__=t,this},s={on:r=function(e,t){var n;return l(t),m.call(this,"__ee__")?n=this.__ee__:(n=w.value=y(null),v(this,"__ee__",w),w.value=null),n[e]?"object"===c(n[e])?n[e].push(t):n[e]=[n[e],t]:n[e]=t,this},once:i,off:a=function(e,t){var n,r,i,a;if(l(t),!m.call(this,"__ee__"))return this;if(!(n=this.__ee__)[e])return this;if("object"===(void 0===(r=n[e])?"undefined":c(r)))for(a=0;i=r[a];++a)i!==t&&i.__eeOnceListener__!==t||(2===r.length?n[e]=r[a?0:1]:r.splice(a,1));else r!==t&&r.__eeOnceListener__!==t||delete n[e];return this},emit:o=function(e){var t,n,r,i,a;if(m.call(this,"__ee__")&&(i=this.__ee__[e]))if("object"===(void 0===i?"undefined":c(i))){for(n=arguments.length,a=new Array(n-1),t=1;t<n;++t)a[t-1]=arguments[t];for(i=i.slice(),t=0;r=i[t];++t)h.call(r,this,a)}else switch(arguments.length){case 1:p.call(i,this);break;case 2:p.call(i,this,arguments[1]);break;case 3:p.call(i,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,a=new Array(n-1),t=1;t<n;++t)a[t-1]=arguments[t];h.call(i,this,a)}}},u={on:d(r),once:d(i),off:d(a),emit:d(o)},f=b({},u),e.exports=t=function(e){return null==e?y(f):b(Object(e),u)},t.methods=s},"./node_modules/type/function/is.js":
/*!******************************************!*\
  !*** ./node_modules/type/function/is.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../prototype/is */"./node_modules/type/prototype/is.js");e.exports=function(e){if("function"!=typeof e)return!1;if(!hasOwnProperty.call(e,"length"))return!1;try{if("number"!=typeof e.length)return!1;if("function"!=typeof e.call)return!1;if("function"!=typeof e.apply)return!1}catch(e){return!1}return!r(e)}},"./node_modules/type/object/is.js":
/*!****************************************!*\
  !*** ./node_modules/type/object/is.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=n(/*! ../value/is */"./node_modules/type/value/is.js"),a={object:!0,function:!0,undefined:!0};e.exports=function(e){return!!i(e)&&hasOwnProperty.call(a,void 0===e?"undefined":r(e))}},"./node_modules/type/plain-function/is.js":
/*!************************************************!*\
  !*** ./node_modules/type/plain-function/is.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../function/is */"./node_modules/type/function/is.js"),i=/^\s*class[\s{\/}]/,a=Function.prototype.toString;e.exports=function(e){return!!r(e)&&!i.test(a.call(e))}},"./node_modules/type/prototype/is.js":
/*!*******************************************!*\
  !*** ./node_modules/type/prototype/is.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../object/is */"./node_modules/type/object/is.js");e.exports=function(e){if(!r(e))return!1;try{return!!e.constructor&&e.constructor.prototype===e}catch(e){return!1}}},"./node_modules/type/value/is.js":
/*!***************************************!*\
  !*** ./node_modules/type/value/is.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=function(e){return null!=e}},"./src/fmp4/buffer.js":
/*!****************************!*\
  !*** ./src/fmp4/buffer.js ***!
  \****************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(/*! concat-typed-array */"./node_modules/concat-typed-array/lib/index.js"),o=(r=a)&&r.__esModule?r:{default:r};var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.buffer=new Uint8Array(0)}return i(e,[{key:"write",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];n.forEach((function(t){t?e.buffer=(0,o.default)(Uint8Array,e.buffer,t):window.console.error(t)}))}}],[{key:"writeUint32",value:function(e){return new Uint8Array([e>>24,e>>16&255,e>>8&255,255&e])}}]),e}();t.default=s,e.exports=t.default},"./src/fmp4/mp4.js":
/*!*************************!*\
  !*** ./src/fmp4/mp4.js ***!
  \*************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(/*! ./buffer */"./src/fmp4/buffer.js"),o=(r=a)&&r.__esModule?r:{default:r};var s=Math.pow(2,32)-1,u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return i(e,null,[{key:"type",value:function(e){return new Uint8Array([e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)])}},{key:"size",value:function(e){return o.default.writeUint32(e)}},{key:"extension",value:function(e,t){return new Uint8Array([e,t>>16&255,t>>8&255,255&t])}},{key:"ftyp",value:function(){var t=new o.default;return t.write(e.size(24),e.type("ftyp"),new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49])),t.buffer}},{key:"moov",value:function(t){var n=new o.default,r=8,i=e.mvhd(t.duration),a=e.videoTrak(t),s=e.audioTrak(t),u=e.mvex(t.duration);return[i,a,s,u].forEach((function(e){r+=e.byteLength})),n.write(e.size(r),e.type("moov"),i,a,s,u),n.buffer}},{key:"mvhd",value:function(t){var n=new o.default;t*=9e4;var r=Math.floor(t/(s+1)),i=Math.floor(t%(s+1)),a=new Uint8Array([1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,1,95,144,r>>24,r>>16&255,r>>8&255,255&r,i>>24,i>>16&255,i>>8&255,255&i,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return n.write(e.size(8+a.length),e.type("mvhd"),new Uint8Array(a)),n.buffer}},{key:"videoTrak",value:function(t){var n=new o.default,r=8,i=e.tkhd({id:1,duration:t.duration,timescale:9e4,width:t.width,height:t.height,type:"video"}),a=e.mdia({type:"video",timescale:9e4,duration:t.duration,sps:t.sps,pps:t.pps,pixelRatio:t.pixelRatio,width:t.width,height:t.height});return[i,a].forEach((function(e){r+=e.byteLength})),n.write(e.size(r),e.type("trak"),i,a),n.buffer}},{key:"audioTrak",value:function(t){var n=new o.default,r=8,i=e.tkhd({id:2,duration:t.duration,timescale:9e4,width:0,height:0,type:"audio"}),a=e.mdia({type:"audio",timescale:9e4,duration:t.duration,channelCount:t.channelCount,samplerate:t.samplerate,audioConfig:t.audioConfig});return[i,a].forEach((function(e){r+=e.byteLength})),n.write(e.size(r),e.type("trak"),i,a),n.buffer}},{key:"tkhd",value:function(t){var n=new o.default,r=t.id,i=t.duration*t.timescale,a=t.width,u=t.height,f=t.type,c=Math.floor(i/(s+1)),d=Math.floor(i%(s+1)),l=new Uint8Array([1,0,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,r>>24&255,r>>16&255,r>>8&255,255&r,0,0,0,0,c>>24,c>>16&255,c>>8&255,255&c,d>>24,d>>16&255,d>>8&255,255&d,0,0,0,0,0,0,0,0,0,0,0,"video"===f?1:0,"audio"===f?1:0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,a>>8&255,255&a,0,0,u>>8&255,255&u,0,0]);return n.write(e.size(8+l.byteLength),e.type("tkhd"),l),n.buffer}},{key:"edts",value:function(t){var n=new o.default,r=t.duration,i=t.mediaTime;return n.write(e.size(36),e.type("edts")),n.write(e.size(28),e.type("elst")),n.write(new Uint8Array([0,0,0,1,r>>24&255,r>>16&255,r>>8&255,255&r,i>>24&255,i>>16&255,i>>8&255,255&i,0,0,0,1])),n.buffer}},{key:"mdia",value:function(t){var n=new o.default,r=8,i=e.mdhd(t.timescale),a=e.hdlr(t.type),s=e.minf(t);return[i,a,s].forEach((function(e){r+=e.byteLength})),n.write(e.size(r),e.type("mdia"),i,a,s),n.buffer}},{key:"mdhd",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=new o.default;n*=t;var i=Math.floor(n/(s+1)),a=Math.floor(n%(s+1)),u=new Uint8Array([0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,t>>24&255,t>>16&255,t>>8&255,255&t,i>>24,i>>16&255,i>>8&255,255&i,a>>24,a>>16&255,a>>8&255,255&a,85,196,0,0]);return r.write(e.size(12+u.byteLength),e.type("mdhd"),e.extension(1,0),u),r.buffer}},{key:"hdlr",value:function(t){var n=new o.default,r=[0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0];return"audio"===t&&(r.splice.apply(r,[8,4].concat([115,111,117,110])),r.splice.apply(r,[24,13].concat([83,111,117,110,100,72,97,110,100,108,101,114,0]))),n.write(e.size(8+r.length),e.type("hdlr"),new Uint8Array(r)),n.buffer}},{key:"minf",value:function(t){var n=new o.default,r=8,i="video"===t.type?e.vmhd():e.smhd(),a=e.dinf(),s=e.stbl(t);return[i,a,s].forEach((function(e){r+=e.byteLength})),n.write(e.size(r),e.type("minf"),i,a,s),n.buffer}},{key:"vmhd",value:function(){var t=new o.default;return t.write(e.size(20),e.type("vmhd"),new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0])),t.buffer}},{key:"smhd",value:function(){var t=new o.default;return t.write(e.size(16),e.type("smhd"),new Uint8Array([0,0,0,0,0,0,0,0])),t.buffer}},{key:"dinf",value:function(){var t=new o.default;return t.write(e.size(36),e.type("dinf"),e.size(28),e.type("dref"),new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1])),t.buffer}},{key:"stbl",value:function(t){var n=new o.default,r=8,i=e.stsd(t),a=e.stts(),s=e.stsc(),u=e.stsz(),f=e.stco();return[i,a,s,u,f].forEach((function(e){r+=e.byteLength})),n.write(e.size(r),e.type("stbl"),i,a,s,u,f),n.buffer}},{key:"stsd",value:function(t){var n=new o.default,r=void 0;return r="audio"===t.type?e.mp4a(t):e.avc1(t),n.write(e.size(16+r.byteLength),e.type("stsd"),e.extension(0,0),new Uint8Array([0,0,0,1]),r),n.buffer}},{key:"mp4a",value:function(t){var n=new o.default,r=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t.channelCount,0,16,0,0,0,0,t.samplerate>>8&255,255&t.samplerate,0,0]),i=e.esds(t.audioConfig);return n.write(e.size(8+r.byteLength+i.byteLength),e.type("mp4a"),r,i),n.buffer}},{key:"esds",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[43,146,8,0],n=t.length,r=new o.default,i=new Uint8Array([0,0,0,0,3,23+n,0,1,0,4,15+n,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([n]).concat(t).concat([6,1,2]));return r.write(e.size(8+i.byteLength),e.type("esds"),i),r.buffer}},{key:"avc1",value:function(t){var n=new o.default,r=t.sps,i=t.pps,a=t.width,s=t.height,u=t.pixelRatio[0],f=t.pixelRatio[1],c=new Uint8Array([1,r[1],r[2],r[3],255,225].concat([r.length>>>8&255,255&r.length]).concat(r).concat(1).concat([i.length>>>8&255,255&i.length]).concat(i)),d=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a>>8&255,255&a,s>>8&255,255&s,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),l=new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192]),h=new Uint8Array([u>>24,u>>16&255,u>>8&255,255&u,f>>24,f>>16&255,f>>8&255,255&f]);return n.write(e.size(40+d.byteLength+c.byteLength+l.byteLength),e.type("avc1"),d,e.size(8+c.byteLength),e.type("avcC"),c,e.size(20),e.type("btrt"),l,e.size(16),e.type("pasp"),h),n.buffer}},{key:"stts",value:function(){var t=new o.default,n=new Uint8Array([0,0,0,0,0,0,0,0]);return t.write(e.size(16),e.type("stts"),n),t.buffer}},{key:"stsc",value:function(){var t=new o.default,n=new Uint8Array([0,0,0,0,0,0,0,0]);return t.write(e.size(16),e.type("stsc"),n),t.buffer}},{key:"stco",value:function(){var t=new o.default,n=new Uint8Array([0,0,0,0,0,0,0,0]);return t.write(e.size(16),e.type("stco"),n),t.buffer}},{key:"stsz",value:function(){var t=new o.default,n=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]);return t.write(e.size(20),e.type("stsz"),n),t.buffer}},{key:"mvex",value:function(t){var n=new o.default,r=o.default.writeUint32(9e4*t);return n.write(e.size(88),e.type("mvex"),e.size(16),e.type("mehd"),e.extension(0,0),r,e.trex(1),e.trex(2)),n.buffer}},{key:"trex",value:function(t){var n=new o.default,r=new Uint8Array([0,0,0,0,t>>24,t>>16&255,t>>8&255,255&t,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return n.write(e.size(8+r.byteLength),e.type("trex"),r),n.buffer}},{key:"moof",value:function(t){var n=new o.default,r=8,i=e.mfhd(),a=e.traf(t);return[i,a].forEach((function(e){r+=e.byteLength})),n.write(e.size(r),e.type("moof"),i,a),n.buffer}},{key:"mfhd",value:function(){var t=new o.default,n=o.default.writeUint32(e.sequence);return e.sequence+=1,t.write(e.size(16),e.type("mfhd"),e.extension(0,0),n),t.buffer}},{key:"traf",value:function(t){var n=new o.default,r=8,i=e.tfhd(t.id),a=e.tfdt(t.time),s=e.sdtp(t),u=e.trun(t,s.byteLength);return[i,a,s,u].forEach((function(e){r+=e.byteLength})),n.write(e.size(r),e.type("traf"),i,a,s,u),n.buffer}},{key:"tfhd",value:function(t){var n=new o.default,r=o.default.writeUint32(t);return n.write(e.size(16),e.type("tfhd"),e.extension(0,0),r),n.buffer}},{key:"tfdt",value:function(t){var n=new o.default,r=Math.floor(t/(s+1)),i=Math.floor(t%(s+1));return n.write(e.size(20),e.type("tfdt"),e.extension(1,0),o.default.writeUint32(r),o.default.writeUint32(i)),n.buffer}},{key:"trun",value:function(t,n){var r=t.id,i=1===r?16:12,a=new o.default,s=o.default.writeUint32(t.samples.length),u=o.default.writeUint32(96+i*t.samples.length+n);return a.write(e.size(20+i*t.samples.length),e.type("trun"),e.extension(0,t.flags),s,u),t.samples.forEach((function(e,t){a.write(o.default.writeUint32(e.duration)),a.write(o.default.writeUint32(e.size)),1===r?(a.write(o.default.writeUint32(e.key?33554432:16842752)),a.write(o.default.writeUint32(e.offset))):a.write(o.default.writeUint32(16777216))})),a.buffer}},{key:"sdtp",value:function(t){var n=new o.default;return n.write(e.size(12+t.samples.length),e.type("sdtp"),e.extension(0,0)),t.samples.forEach((function(e){n.write(new Uint8Array(1===t.id?[e.key?32:16]:[16]))})),n.buffer}},{key:"mdat",value:function(t){var n=new o.default,r=8;return t.samples.forEach((function(e){r+=e.size})),n.write(e.size(r),e.type("mdat")),t.samples.forEach((function(e){n.write(e.buffer)})),n.buffer}}]),e}();u.sequence=1,t.default=u,e.exports=t.default},"./src/hls.js":
/*!********************!*\
  !*** ./src/hls.js ***!
  \********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=l(n(/*! event-emitter */"./node_modules/event-emitter/index.js")),a=l(n(/*! ./ts/m3u8 */"./src/ts/m3u8.js")),o=l(n(/*! ./ts/parser */"./src/ts/parser.js")),s=l(n(/*! ./ts/ts */"./src/ts/ts.js")),u=l(n(/*! ./fmp4/buffer */"./src/fmp4/buffer.js")),f=l(n(/*! ./fmp4/mp4 */"./src/fmp4/mp4.js")),c=l(n(/*! ./media/task */"./src/media/task.js")),d=l(n(/*! ./media/mse */"./src/media/mse.js"));function l(e){return e&&e.__esModule?e:{default:e}}var h=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),(0,i.default)(this);var n=new d.default;this.mse=n,this.url=t,this.init(t),this.inited=!1,this.cache=new u.default}return r(e,[{key:"init",value:function(e){var t=this,n=new a.default(e),r=this;n.once("ready",(function(){t.type=n.type,"vod"===r.type?r.seek(0):(r.seeker&&clearInterval(r.seeker),t.once("end",(function(){r.seeker&&clearInterval(r.seeker)})),r.seek(),r.seeker=setInterval((function(){r.seek()}),2e3))})),n.once("end",(function(){"live"===t.type&&t.mse.endOfStream()})),this.m3u8=n}},{key:"seek",value:function(e){var t=this,n=this.m3u8.seek(e);if(n.length&&!n[0].downloaded)new c.default(n[0].url,(function(e){var r=new o.default(e);t.parse(r);var i=n[0].url;t.m3u8.segments.every((function(e){return e.url!==i||(e.downloaded=!0,!1)}))}))}},{key:"parse",value:function(e,t){var n=[],r=[],i=[],a=this;e.pes.forEach((function(e){var t=new s.default.PES(e);n.push(t),"video"===t.type&&r.push(t),"audio"===t.type&&i.push(t)})),r.some((function(e){if(e.ES.sps.length){var t=e.ES,n=i[0].ES,r=0;return a.m3u8.segments.forEach((function(e){r+=1*e.duration})),a.meta={sps:t.sps,pps:t.pps,width:t.info.width,height:t.info.height,pixelRatio:t.info.pixelRatio,channelCount:n.channel,timescale:n.frequence,samplerate:n.frequence,profile:n.profile,duration:r,audioConfig:i[0].ES.audioConfig},!1}})),a.videoSamples=r,a.audioSamples=i,a.meta?(void 0===a.startDTS&&(a.startDTS=Math.min(r[0].dts,i[0].pts)),a.initSegment(a.meta)):a.seek()}},{key:"initSegment",value:function(e){if(!this.inited){var t=new u.default;t.write(f.default.ftyp()),t.write(f.default.moov(e)),this.mse.appendBuffer(t.buffer),this.inited=!0,this.cache.write(t.buffer)}this.createVideoFragment(),this.createAudioFragment()}},{key:"addFragment",value:function(e){var t=this,n=new u.default;n.write(f.default.moof(e)),n.write(f.default.mdat(e)),this.mse.appendBuffer(n.buffer),this.cache.write(n.buffer),this.mse.once("updateend",(function(){t.update()}))}},{key:"createVideoFragment",value:function(){var e,t,n=this.videoSamples,r=n.length,i=(n[r-1].dts-n[0].dts)/r;t=this.startDTS,e=n.map((function(e,t){var a=void 0;return a=t+1===r?i:n[t+1].dts-e.dts,{size:e.ES.buffer.byteLength,duration:a,offset:e.pts-e.dts,buffer:e.ES.buffer,key:!!e.ES.pps.length}})),this.addFragment({id:1,time:n[0].dts-t,firstFlags:33554432,flags:3841,samples:e})}},{key:"createAudioFragment",value:function(){var e,t=this.audioSamples,n=t.length,r=this.startDTS||0,i=void 0;e=t.map((function(e,r){return i=r+1===n?(t[n-1].pts-t[0].pts)/n:t[r+1].pts-e.pts,{size:e.ES.buffer.byteLength,duration:i,offset:0,buffer:e.ES.buffer,key:!0}})),this.addFragment({id:2,time:t[0].pts-r,firstFlags:0,flags:1793,samples:e})}},{key:"reset",value:function(){this.init(this.url)}},{key:"update",value:function(){for(var e=this.mse.sourceBuffer,t=this.m3u8.segments,n=e.buffered,r=void 0,i=void 0,a=0,o=n.length;a<o;a++){r=n.start(a),i=n.end(a);for(var s,u=0,f=t.length;u<f;u++)(s=t[a]).start>=r&&s.end<=i&&(s.downloaded=!0)}}}]),e}();t.default=h,e.exports=t.default},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";var r=o(n(/*! xgplayer */"xgplayer")),i=o(n(/*! ./hls */"./src/hls.js")),a=o(n(/*! ./media/mse */"./src/media/mse.js"));function o(e){return e&&e.__esModule?e:{default:e}}r.default.install("hlsplayer",(function(){var e=this,t=r.default.sniffer,n=r.default.util,o=e.config.preloadTime||15;if(["chrome","firfox","safari"].some((function(e){return e===t.browser}))&&a.default.isSupported('video/mp4; codecs="avc1.64001E, mp4a.40.5"')){var s=e.start,u=void 0;Object.defineProperty(e,"src",{get:function(){return e.currentSrc},set:function(t){e.config.url=t,e.paused?e.start(t):(e.pause(),e.once("pause",(function(){e.start(t)})),e.once("canplay",(function(){e.play()}))),e.once("canplay",(function(){e.currentTime=0}))},configurable:!0}),e.start=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.config.url;t&&(u=new i.default(t),e.mse=u.mse,e.hls=u,e.download=function(){u.download()},u.m3u8.once("ready",(function(){if("live"===u.type){n.addClass(e.root,"xgplayer-is-live");var t=n.createDom("xg-live","正在直播",{},"xgplayer-live");e.controls.appendChild(t);var r=setInterval((function(){if(e.paused&&e.buffered.length)for(var t=0,n=e.buffered.length;t<n;t++)if(e.buffered.start(t)>e.currentTime){e.currentTime=e.buffered.start(t),clearInterval(r);break}}),200)}else clearTimeout(u.m3u8.timer)})),s.call(e,u.mse.url))};var f=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.currentTime,n=e.getBufferedRange();t<n[1]?"vod"===u.type&&n[1]-t<o&&u.seek(n[1]+1):u.seek(t)};e.on("timeupdate",(function(){f(e.currentTime+1),function(e,t){if("vod"===t.type&&e.duration-e.currentTime<2){var n=e.getBufferedRange();e.currentTime-n[1]<.1&&e.mse.endOfStream()}}(e,u)})),e.on("seeking",(function(){f()})),e.on("waiting",(function(){if("live"===u.type){for(var t=e.buffered,n=t.length,r=e.currentTime,i=0;i<n;i++)if(t.start(i)>r){e.currentTime=t.start(i)+.1;break}}else u.seek()})),e.once("destroy",(function(){clearTimeout(u.m3u8.timer)}))}}))},"./src/media/mse.js":
/*!**************************!*\
  !*** ./src/media/mse.js ***!
  \**************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(/*! event-emitter */"./node_modules/event-emitter/index.js"),o=(r=a)&&r.__esModule?r:{default:r};var s=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:'video/mp4; codecs="avc1.64001E, mp4a.40.5"';!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=this;(0,o.default)(this),this.codecs=t,this.mediaSource=new window.MediaSource,this.url=window.URL.createObjectURL(this.mediaSource),this.queue=[],this.mediaSource.addEventListener("sourceopen",(function(){n.sourceBuffer=n.mediaSource.addSourceBuffer(n.codecs),n.sourceBuffer.addEventListener("error",(function(e){n.emit("error",{type:"sourceBuffer",error:e})})),n.sourceBuffer.addEventListener("updateend",(function(e){n.emit("updateend");var t=n.queue.shift();t&&n.sourceBuffer.appendBuffer(t)})),n.emit("sourceopen"),n.sourceBuffer.addEventListener("error",(function(e){n.emit("error",{type:"mediaSource",error:e})}))})),this.mediaSource.addEventListener("sourceclose",(function(){n.emit("sourceclose")}))}return i(e,[{key:"appendBuffer",value:function(e){var t=this.sourceBuffer;return!1===t.updating&&"open"===this.state?(t.appendBuffer(e),!0):(this.queue.push(e),!1)}},{key:"removeBuffer",value:function(e,t){this.sourceBuffer.remove(e,t)}},{key:"endOfStream",value:function(){"open"===this.mediaSource.readyState&&this.mediaSource.endOfStream()}},{key:"state",get:function(){return this.mediaSource.readyState}},{key:"duration",get:function(){return this.mediaSource.duration},set:function(e){this.mediaSource.duration=e}}],[{key:"isSupported",value:function(e){return window.MediaSource&&window.MediaSource.isTypeSupported(e)}}]),e}();t.default=s,e.exports=t.default},"./src/media/task.js":
/*!***************************!*\
  !*** ./src/media/task.js ***!
  \***************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.url=t,this.on=!1,!e.queue.some((function(e){return e.url===t}))){var r=new XMLHttpRequest;r.target=this,r.responseType="arraybuffer",r.open("get",t),r.onload=function(){200!==r.status&&206!==r.status||n&&n instanceof Function&&n(r.response),r.target.remove()},r.onerror=function(){r.target.remove()},r.onabort=function(){r.target.remove()},this.xhr=r,e.queue.push(this),this.update()}}return r(e,[{key:"cancel",value:function(){this.xhr.abort()}},{key:"remove",value:function(){var t=this;e.queue.filter((function(n,r){return n.url===t.url&&(e.queue.splice(r,1),!0)})),this.update()}},{key:"update",value:function(){var t=e.queue,n=t.filter((function(e){return e.on})),r=t.filter((function(e){return!e.on})),i=e.limit-n.length;r.forEach((function(e,t){t<i&&e.run()}))}},{key:"run",value:function(){1===this.xhr.readyState?(this.on=!0,this.xhr.send()):this.remove()}}],[{key:"clear",value:function(){e.queue.forEach((function(e){e.on&&e.cancel()})),e.queue.length=0}}]),e}();i.queue=[],i.limit=2,window.Task=i,t.default=i,e.exports=t.default},"./src/ts/expGolomb.js":
/*!*****************************!*\
  !*** ./src/ts/expGolomb.js ***!
  \*****************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.data=t,this.bytesAvailable=t.byteLength,this.word=0,this.bitsAvailable=0}return r(e,[{key:"loadWord",value:function(){var e=this.data,t=this.bytesAvailable,n=e.byteLength-t,r=new Uint8Array(4),i=Math.min(4,t);if(0===i)throw new Error("no bytes available");r.set(e.subarray(n,n+i)),this.word=new DataView(r.buffer).getUint32(0),this.bitsAvailable=8*i,this.bytesAvailable-=i}},{key:"skipBits",value:function(e){var t;this.bitsAvailable>e?(this.word<<=e,this.bitsAvailable-=e):(e-=this.bitsAvailable,e-=(t=e>>3)>>3,this.bytesAvailable-=t,this.loadWord(),this.word<<=e,this.bitsAvailable-=e)}},{key:"readBits",value:function(e){var t=Math.min(this.bitsAvailable,e),n=this.word>>>32-t;return e>32&&window.console.error("Cannot read more than 32 bits at a time"),this.bitsAvailable-=t,this.bitsAvailable>0?this.word<<=t:this.bytesAvailable>0&&this.loadWord(),(t=e-t)>0&&this.bitsAvailable?n<<t|this.readBits(t):n}},{key:"skipLZ",value:function(){var e;for(e=0;e<this.bitsAvailable;++e)if(0!=(this.word&2147483648>>>e))return this.word<<=e,this.bitsAvailable-=e,e;return this.loadWord(),e+this.skipLZ()}},{key:"skipUEG",value:function(){this.skipBits(1+this.skipLZ())}},{key:"skipEG",value:function(){this.skipBits(1+this.skipLZ())}},{key:"readUEG",value:function(){var e=this.skipLZ();return this.readBits(e+1)-1}},{key:"readEG",value:function(){var e=this.readUEG();return 1&e?1+e>>>1:-1*(e>>>1)}},{key:"readBoolean",value:function(){return 1===this.readBits(1)}},{key:"readUByte",value:function(){return this.readBits(8)}},{key:"readUShort",value:function(){return this.readBits(16)}},{key:"readUInt",value:function(){return this.readBits(32)}},{key:"skipScalingList",value:function(e){var t,n=8,r=8;for(t=0;t<e;t++)0!==r&&(r=(n+this.readEG()+256)%256),n=0===r?n:r}},{key:"readSPS",value:function(){var e,t,n,r,i,a,o,s=0,u=0,f=0,c=0,d=this.readUByte.bind(this),l=this.readBits.bind(this),h=this.readUEG.bind(this),p=this.readBoolean.bind(this),y=this.skipBits.bind(this),v=this.skipEG.bind(this),b=this.skipUEG.bind(this),m=this.skipScalingList.bind(this);if(d(),e=d(),l(5),y(3),d(),b(),100===e||110===e||122===e||244===e||44===e||83===e||86===e||118===e||128===e){var w=h();if(3===w&&y(1),b(),b(),y(1),p())for(a=3!==w?8:12,o=0;o<a;o++)p()&&m(o<6?16:64)}b();var g=h();if(0===g)h();else if(1===g)for(y(1),v(),v(),t=h(),o=0;o<t;o++)v();b(),y(1),n=h(),r=h(),0===(i=l(1))&&y(1),y(1),p()&&(s=h(),u=h(),f=h(),c=h());var k=[1,1];if(p()&&p())switch(d()){case 1:k=[1,1];break;case 2:k=[12,11];break;case 3:k=[10,11];break;case 4:k=[16,11];break;case 5:k=[40,33];break;case 6:k=[24,11];break;case 7:k=[20,11];break;case 8:k=[32,11];break;case 9:k=[80,33];break;case 10:k=[18,11];break;case 11:k=[15,11];break;case 12:k=[64,33];break;case 13:k=[160,99];break;case 14:k=[4,3];break;case 15:k=[3,2];break;case 16:k=[2,1];break;case 255:k=[d()<<8|d(),d()<<8|d()]}return{width:Math.ceil(16*(n+1)-2*s-2*u),height:(2-i)*(r+1)*16-(i?2:4)*(f+c),pixelRatio:k}}},{key:"readSliceType",value:function(){return this.readUByte(),this.readUEG(),this.readUEG()}}]),e}();t.default=i,e.exports=t.default},"./src/ts/m3u8.js":
/*!************************!*\
  !*** ./src/ts/m3u8.js ***!
  \************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=o(n(/*! event-emitter */"./node_modules/event-emitter/index.js")),a=o(n(/*! ../util/xhr */"./src/util/xhr.js"));function o(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.url=t,this.segments=[],this.retryMax=10,this.retry=0,this.type="live",this.isEnd=!1,this.timer=null,this.rangeDuration=2e3,this.duration=0,this.init(t),(0,i.default)(this)}return r(e,[{key:"fetch",value:function(t){var n={TYPE:"LIVE",ENDLIST:""},r=[];return new Promise((function(i,o){new a.default({type:"",url:t}).then((function(a){var s=a.responseText;if(s){var u=s.substring(0,s.indexOf("#EXTINF")),f=s.substring(s.lastIndexOf("#EXTINF")),c=e.Tag,d=new RegExp(c.EXTINF.source);Object.keys(c).forEach((function(e){"EXTINF"!==e&&(c[e].test(u)||c[e].test(f))&&(n[e]=RegExp.$2?[RegExp.$1,RegExp.$2]:RegExp.$1||!0)})),s.match(c.EXTINF).forEach((function(n,i){if(d.test(n)){var a=1*RegExp.$1,o=RegExp.$2,s=e.resolve(t,o);r.push({idx:i,duration:a,title:o,downloaded:!1,url:s})}})),1*n.SEQUENCE==0&&n.ENDLIST&&(n.TYPE="VOD"),i({meta:n,segments:r})}else o(new Error("parse error"))})).catch((function(e){o(e)}))}))}},{key:"init",value:function(e){var t=this,n=t.segments;this.fetch(e).then((function(e){t.type=e.meta.TYPE.toLocaleLowerCase(),t.isEnd=e.meta.ENDLIST,e.segments.forEach((function(e){n.push(e)})),t.emit("ready")}),(function(){n.length=0,t.retry++,t.retry<t.retryMax&&t.init(e)}))}},{key:"seek",value:function(e){var t=this.segments,n=void 0;if("vod"===this.type||void 0!==e){if(void 0===t[0].start)for(var r,i=0,a=0,o=t.length;a<o;a++)(r=t[a]).start=i,i+=r.duration,r.end=i;n=t.filter((function(t){return t.start<=e&&e<t.end&&!t.downloaded}))}else n=t.filter((function(e){return!e.downloaded})),"live"===this.type&&t.filter((function(e){return!e.downloaded})).length<3&&this.update(1);return n}},{key:"reset",value:function(){this.segments.length=0,this.isEnd=!1,this.type="live",this.timer&&(clearInterval(this.timer),this.timer=null),this.init(this.url)}},{key:"update",value:function(e){var t=this,n=t.url,r=t.segments;t.timer&&clearTimeout(t.timer),t.timer=setTimeout((function(){var e=0;t.fetch(n).then((function(n){n.segments.forEach((function(t){r.some((function(e){return t.url===e.url}))||(e++,r.push(t))})),e<=0&&t.update()}),(function(){t.retry++,t.retry<t.retryMax?t.update():t.emit("end")}))}),e?0:t.rangeDuration)}}],[{key:"resolve",value:function(e,t){var n=[],r=document.createElement("a");r.href=e;var i=t,a=r.pathname.replace(/^\/+/,"").split("/"),o=i.split("/");a.pop();return function e(){switch(o[0]){case"":n=o.slice(1);break;case".":n=a.concat(o.slice(1));break;case"..":if(o.shift(),!a.length)throw new Error("path in invalid");a.pop(),e();break;default:n=a.concat(o)}}(),n=n.length?r.protocol+"//"+r.host+"/"+n.join("/"):i.href}}]),e}();s.Tag={EXTM3U:/^#EXTM3U/,TYPE:/#EXT-X-PLAYLIST-TYPE:(\w+)/,EXTINF:/#EXTINF:(\d+\.?\d*)(?:,(?:[^\r|\n]*)(?:\r|\n)*)(.*(?!#))/g,DURATION:/#EXT-X-TARGETDURATION:(\d+\.?\d*)/,SEQUENCE:/#EXT-X-MEDIA-SEQUENCE:(\d+)/,ENDLIST:/#EXT-X-ENDLIST/,VERSION:/#EXT-X-VERSION:(\d+)/,STREAM:/#EXT-X-STREAM-INF:(\w+=\w+)+/},t.default=s,e.exports=t.default},"./src/ts/parser.js":
/*!**************************!*\
  !*** ./src/ts/parser.js ***!
  \**************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(/*! ./ts */"./src/ts/ts.js"),o=(r=a)&&r.__esModule?r:{default:r};var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.buffer=t,this.ts=[];for(var n=0,r=this.buffer.byteLength;n<r;)this.ts.push(new o.default(this.buffer.slice(n,n+188),n/188)),n+=188;delete this.buffer}return i(e,[{key:"pat",get:function(){return this.ts.filter((function(e){return 0===e.header.pid}))}},{key:"pmt",get:function(){var e=this.pat,t=[];return e.forEach((function(e){e.body.list.filter((function(e){t.push(e.pid)}))})),this.ts.filter((function(e){return t.some((function(t){return t===e.header.pid}))}))}},{key:"pes",get:function(){var e=this.pmt,t=[],n=[];e.forEach((function(e){t=t.concat(e.body.list.map((function(e){return e.pid})))}));for(var r=this.ts,i=r.length,a=void 0,o=[],s=[],u=0;u<i;u++)a=r[u],t.indexOf(a.header.pid)>-1&&("video"===a.body.type?1===a.header.payload?((o=[]).push(a),n.push(o)):0===o.length?n.push([a]):o.push(a):"audio"===a.body.type&&(1===a.header.payload?((s=[]).push(a),n.push(s)):0===s.length?n.push([a]):s.push(a)));return n}}]),e}();t.default=s,e.exports=t.default},"./src/ts/stream.js":
/*!**************************!*\
  !*** ./src/ts/stream.js ***!
  \**************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!(t instanceof ArrayBuffer))throw new Error("data is invalid");this.buffer=t,this.dataview=new DataView(t),this.dataview.position=0}return r(e,[{key:"back",value:function(e){this.position-=e}},{key:"skip",value:function(t){for(var n=Math.floor(t/4),r=t%4,i=0;i<n;i++)e.readByte(this.dataview,4);r>0&&e.readByte(this.dataview,r)}},{key:"readUint8",value:function(){return e.readByte(this.dataview,1)}},{key:"readUint16",value:function(){return e.readByte(this.dataview,2)}},{key:"readUint24",value:function(){return e.readByte(this.dataview,3)}},{key:"readUint32",value:function(){return e.readByte(this.dataview,4)}},{key:"readUint64",value:function(){return e.readByte(this.dataview,8)}},{key:"readInt8",value:function(){return e.readByte(this.dataview,1,!0)}},{key:"readInt16",value:function(){return e.readByte(this.dataview,2,!0)}},{key:"readInt32",value:function(){return e.readByte(this.dataview,4,!0)}},{key:"writeUint32",value:function(e){return new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e])}},{key:"length",get:function(){return this.buffer.byteLength}},{key:"position",set:function(e){this.dataview.position=e},get:function(){return this.dataview.position}}],[{key:"readByte",value:function(e,t,n){var r=void 0;switch(t){case 1:r=n?e.getInt8(e.position):e.getUint8(e.position);break;case 2:r=n?e.getInt16(e.position):e.getUint16(e.position);break;case 3:if(n)throw"not supported for readByte 3";r=e.getUint8(e.position)<<16,r|=e.getUint8(e.position+1)<<8,r|=e.getUint8(e.position+2);break;case 4:r=n?e.getInt32(e.position):e.getUint32(e.position);break;case 8:if(n)throw"not supported for readBody 8";r=e.getUint32(e.position)<<32,r|=e.getUint32(e.position+4);break;default:r=""}return e.position+=t,r}}]),e}();t.default=i,e.exports=t.default},"./src/ts/ts.js":
/*!**********************!*\
  !*** ./src/ts/ts.js ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(/*! concat-typed-array */"./node_modules/concat-typed-array/lib/index.js")),a=s(n(/*! ./stream */"./src/ts/stream.js")),o=s(n(/*! ./expGolomb */"./src/ts/expGolomb.js"));function s(e){return e&&e.__esModule?e:{default:e}}var u={1:["video","MPEG-1"],2:["video","MPEG-2"],27:["video","AVC.H264"],234:["video","VC-1"],3:["audio","MPEG-1"],4:["audio","MPEG-2"],15:["audio","MPEG-2.AAC"],17:["audio","MPEG-4.AAC"],128:["audio","LPCM"],129:["audio","AC3"],6:["audio","AC3"],130:["audio","DTS"],131:["audio","Dolby TrueHD"],132:["audio","AC3-Plus"],133:["audio","DTS-HD"],134:["audio","DTS-MA"],161:["audio","AC3-Plus-SEC"],162:["audio","DTS-HD-SEC"]},f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=new a.default(t);this.header=new e.Header(n),this.body=new e.Payload(n,this),console.log(this)}return r(e,null,[{key:"Header",value:function(e){this.sync=e.readUint8();var t=e.readUint16();this.error=t>>>15,this.payload=t>>>14&1,this.priority=t>>>13&1,this.pid=8191&t,t=e.readUint8(),this.scrambling=t>>6&3,this.adaptation=t>>4&3,this.continuity=15&t,this.packet=0===this.pid?"PAT":"MEDIA"}},{key:"Payload",value:function(t,n){var r=n.header.pid,i=void 0;switch(r){case 0:i=new e.PAT(t);break;case 1:i=new e.CAT(t);break;case 2:i=new e.TSDT(t);break;case 8191:i=!1;break;default:if(e.PATSpace.some((function(e){return e.pid===r})))i=new e.PMT(t,n);else{var a=e.PMTSpace?e.PMTSpace.filter((function(e){return e.pid===r})):[];i=!!a.length&&new e.Media(t,n,u[a[0].streamType][0])}}return i}},{key:"PAT",value:function(t){var n=t.readUint8();t.skip(n),n=t.readUint8(),this.tabelID=n,n=t.readUint16(),this.error=n>>>7,this.zero=n>>>6&1,this.sectionLength=4095&n,this.streamID=t.readUint16(),this.current=1&t.readUint8(),this.sectionNumber=t.readUint8(),this.lastSectionNumber=t.readUint8();for(var r=(this.sectionLength-9)/4,i=[],a=0;a<r;a++){var o=t.readUint16(),s=8191&t.readUint16();i.push({program:o,pid:s,type:0===o?"network":"mapPID"})}this.list=i,e.PATSpace=e.PATSpace.concat(i),this.program=t.readUint16(),this.pid=8191&t.readUint16(),t.dataview.byteLength-t.position>=4&&(this.crc32=t.readUint32())}},{key:"PMT",value:function(t,n){var r=this;n.header.packet="PMT";var i=t.readUint8();t.skip(i),i=t.readUint8(),this.tableID=i,i=t.readUint16(),this.sectionLength=4095&i,this.program=t.readUint16(),this.current=1&t.readUint8(),this.order=t.readUint8(),this.lastOrder=t.readUint8(),this.PCR_PID=8191&t.readUint16(),this.programLength=4095&t.readUint16();for(var a=(this.sectionLength-13)/5,o=[],s=0;s<a;s++)o.push({streamType:t.readUint8(),pid:8191&t.readUint16(),es:4095&t.readUint16()});this.list=o,e.PMTSpace||(e.PMTSpace=[]),e.PMTSpace=e.PMTSpace.concat(o.map((function(e){return{pid:e.pid,es:e.es,streamType:e.streamType,program:r.program}}))),t.dataview.byteLength-t.position>=4&&(this.crc32=t.readUint32())}},{key:"Media",value:function(e,t,n){var r=t.header;if(this.start=e.position,this.type=n,3===r.adaptation&&(this.adaptationLength=e.readUint8(),this.adaptationLength>0)){var i=e.readUint8();this.discontinue=i>>>7,this.access=i>>>6&1,this.priority=i>>>5&1,this.PCR=i>>>4&1,this.OPCR=i>>>3&1,this.splicePoint=i>>>2&1,this.transportPrivate=i>>>1&1,this.adaptationField=1&i;var o=e.position;if(1===this.PCR&&(this.programClockBase=e.readUint32()<<1,i=e.readUint16(),this.programClockBase|=i>>>15,this.programClockExtension=511&i),1===this.OPCR&&(this.originProgramClockBase=e.readUint32()<<1,i=e.readUint16(),this.originProgramClockBase+=i>>>15,this.originProgramClockExtension=511&i),1===this.splicePoint&&(this.spliceCountdown=e.readUint8()),1===this.transportPrivate)for(var s=e.readUint8(),u=[],f=0;f<s;f++)u.push(e.readUint8());if(1===this.adaptationField){var c=e.readUint8(),d=e.readUint8(),l=e.position,h=d>>>6&1,p=d>>>5&1;1===d>>>7&&(d=e.readUint16(),this.ltwValid=d>>>15,this.ltwOffset=61439&d),1===h&&(d=e.readUint24(),this.piecewiseRate=4194303&d),1===p&&(d=e.readInt8(),this.spliceType=d>>>4,this.dtsNextAU1=d>>>1&7,this.marker1=1&d,d=e.readUint16(),this.dtsNextAU2=d>>>1,this.marker2=1&d,d=e.readUint16(),this.dtsNextAU3=d),e.skip(c-1-(e.position-l))}var y=this.adaptationLength-1-(e.position-o);e.skip(y)}this.buffer=new a.default(e.buffer.slice(e.position))}},{key:"PES",value:function(t){var n=t[0],r=n.body.buffer,i=r.readUint24();if(this.header=n.header,1!==i)throw new Error("this is not pes packet");var a=r.readUint8();a>=224&&a<=239&&(this.type="video"),a>=192&&a<=223&&(this.type="audio");var o=r.readUint16();if(this.packetLength=o,"video"!==this.type&&"audio"!==this.type)throw new Error("format is not supported");var s=r.readUint8();if(2!==s>>>6)throw new Error("error when parse pes header");s=r.readUint8(),this.ptsDTSFlag=s>>>6,this.escrFlag=s>>>5&1,this.esRateFlag=s>>>4&1,this.dsmFlag=s>>>3&1,this.additionalFlag=s>>>2&1,this.crcFlag=s>>>1&1,this.extensionFlag=1&s,this.pesHeaderLength=r.readUint8();var u=this.pesHeaderLength;if(2===this.ptsDTSFlag){var f=[];s=r.readUint8(),f.push(s>>>1&7),s=r.readUint16(),f.push(s>>>1),s=r.readUint16(),f.push(s>>>1),this.pts=f[0]<<30|f[1]<<15|f[2],u-=5,"video"===this.type&&(this.dts=this.pts)}if(3===this.ptsDTSFlag){var c=[];s=r.readUint8(),c.push(s>>>1&7),s=r.readUint16(),c.push(s>>>1),s=r.readUint16(),c.push(s>>>1),this.pts=c[0]<<30|c[1]<<15|c[2];var d=[];s=r.readUint8(),d.push(s>>>1&7),s=r.readUint16(),d.push(s>>>1),s=r.readUint16(),d.push(s>>>1),this.dts=d[0]<<30|d[1]<<15|d[2],u-=10}if(1===this.escrFlag){var l=[],h=[];s=r.readUint8(),l.push(s>>>3&7),l.push(3&s),s=r.readUint16(),l.push(s>>>13),l.push(3&s),s=r.readUint16(),l.push(s>>>13),h.push(3&s),s=r.readUint8(),h.push(s>>>1),this.escr=300*(l[0]<<30|l[1]<<28|l[2]<<15|l[3]<<13|l[4])+(h[0]<<7|h[1]),u-=6}if(1===this.esRateFlag&&(s=r.readUint24(),this.esRate=s>>>1&4194303,u-=3),1===this.dsmFlag)throw new Error("not support DSM_trick_mode");if(1===this.additionalFlag&&(s=r.readUint8(),this.additionalCopyInfo=127&s,u-=1),1===this.crcFlag&&(this.pesCRC=r.readUint16(),u-=2),1===this.extensionFlag)throw new Error("not support extension");u>0&&r.skip(u),this.ES=new e.ES(r,this.type,t.slice(1))}},{key:"ES",value:function(t,n,r){var a=void 0;if("video"===n){if(1!==(a=t.readUint32())&&(t.back(4),1!==(a=t.readUint24())))throw new Error("h264 nal header parse failed");t.skip(2),this.sps=function(e){var t=[],n=void 0,r=!0,i=!1;if(1===e.readUint32())do{if(n=e.readUint8(),!i){if(7!=(31&n)){r=!1,e.back(5);break}i=!0}0!==n?t.push(n):1===(n=e.readUint24())?(r=!1,e.back(4)):(e.back(4),t.push(e.readUint8()))}while(r);else e.back(4);return t}(t),this.pps=function(e){var t=[],n=void 0,r=!0,i=!1;if(1===e.readUint32())do{if(n=e.readUint8(),!i){if(8!=(31&n)){r=!1,e.back(5);break}i=!0}0!==n?t.push(n):1===(n=e.readUint16())?(r=!1,e.back(3)):(e.back(3),t.push(e.readUint8()))}while(r);else e.back(4);return t}(t);var s=void 0;if(this.sps.length?(this.info=new o.default(new Uint8Array(this.sps)).readSPS(),s=t.readUint24()):0===(s=t.readUint24())&&(s=t.readUint8()),1!==s)throw new Error("h264 convert to avcc error");var u=e.Merge(t,r);this.buffer=(0,i.default)(Uint8Array,t.writeUint32(u.byteLength),u)}else{if("audio"!==n)throw"ES "+n+" is not supported";if((a=t.readUint16())>>>4!=4095)throw new Error("aac ES parse Error");this.id=0==(a>>>3&1)?"MPEG-4":"MPEG-2",this.layer=a>>>1&3,this.absent=1&a,a=t.readUint16(),this.audioObjectType=1+(a>>>14&3),this.profile=this.audioObjectType-1,this.frequencyIndex=a>>>10&15,this.frequence=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350][this.frequencyIndex],this.channel=a>>>6&7,this.frameLength=(3&a)<<11|t.readUint16()>>>5,this.audioConfig=e.getAudioConfig(this.audioObjectType,this.channel,this.frequencyIndex),t.skip(1),this.buffer=e.Merge(t,r)}}},{key:"TSDT",value:function(){return{}}},{key:"CAT",value:function(e,t){this.tableID=e.readUint8();var n=e.readUint16();this.sectionIndicator=n>>>7,this.sectionLength=4095&n,e.skip(2),n=e.readUint8(),this.version=n>>>3,this.currentNextIndicator=1&n,this.sectionNumber=e.readUint8(),this.lastSectionNumber=e.readUint8();for(var r=(this.sectionLength-9)/4,i=[],a=0;a<r;a++)i.push({});this.crc32=e.readUint32()}},{key:"Merge",value:function(e,t){var n=e.length-e.position,r=void 0,i=n;return t.forEach((function(e){n+=e.body.buffer.length})),(r=new Uint8Array(n)).set(new Uint8Array(e.buffer,e.position),0),t.forEach((function(t){e=t.body.buffer,r.set(new Uint8Array(e.buffer,e.position),i),i+=e.length-e.position})),r}},{key:"getAudioConfig",value:function(e,t,n){var r=navigator.userAgent.toLowerCase(),i=void 0,a=void 0;return/firefox/i.test(r)?n>=6?(e=5,i=new Array(4),a=n-3):(e=2,i=new Array(2),a=n):-1!==r.indexOf("android")?(e=2,i=new Array(2),a=n):(e=5,i=new Array(4),n>=6?a=n-3:(1===t&&(e=2,i=new Array(2)),a=n)),i[0]=e<<3,i[0]|=(14&n)>>1,i[1]=(1&n)<<7,i[1]|=t<<3,5===e&&(i[1]|=(14&a)>>1,i[2]=(1&a)<<7,i[2]|=8,i[3]=0),i}}]),e}();f.PATSpace=[],t.default=f,e.exports=t.default},"./src/util/xhr.js":
/*!*************************!*\
  !*** ./src/util/xhr.js ***!
  \*************************/
/*! no static exports found */function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.url,i=t.method,a=void 0===i?"GET":i,o=t.type,s=void 0===o?"arraybuffer":o,u=t.data,f=void 0===u?{}:u;return r(this,e),new Promise((function(e,t){var r=new window.XMLHttpRequest,i=a.toUpperCase(),o=[];for(var u in s&&(r.responseType=s),f)o.push("k="+f[u]);if("GET"===i)r.open(i,n+"?"+o.join("&")),r.send();else{if("post"!==i)throw new Error("xhr "+i+" is not supported");r.open(i,n),r.setRequestHeader("Content-type","application/x-www-form-urlencoded"),r.send(o.join("&"))}r.onload=function(){200===r.status||206===r.status?e(r):t(r)},r.onerror=function(){t(r)}}))},e.exports=t.default},0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./src/index.js */"./src/index.js")},xgplayer:
/*!*************************!*\
  !*** external "Player" ***!
  \*************************/
/*! no static exports found */function(e,t){e.exports=window.Player}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,