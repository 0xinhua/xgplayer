{"version":3,"file":"index.js","sources":["../src/raw-264.js","../src/index.js"],"sourcesContent":["import { NalUnit, SpsParser, SEIParser } from 'xgplayer-transmuxer-codec-avc'\nimport XgStream from 'xgplayer-transmuxer-buffer-stream'\nimport { VideoTrackMeta } from 'xgplayer-transmuxer-model-trackmeta';\nimport Events from 'xgplayer-transmuxer-constant-events'\n\nclass H264Demuxer {\n  constructor (options = {}) {\n    this._player = options.player;\n\n    this.videoMeta = new VideoTrackMeta()\n    this.videoTrack = {\n      samples: []\n    }\n    this.fps = options.fps || 30\n    this.currentSampleIdx = 0;\n    this.duration = 0;\n  }\n\n  init () {\n    this.initEvents()\n  }\n\n  initEvents () {\n    this.on(Events.LOADER_EVENTS.LOADER_DATALOADED, this.handleDataLoaded.bind(this))\n    // this.on(Events.LOADER_EVENTS.LOADER_COMPLETE, this.handleDataLoaded.bind(this))\n  }\n\n  load (url) {\n    this.emit(Events.LOADER_EVENTS.LADER_START, url);\n  }\n\n  handleDataLoaded () {\n    const buffer = this.buffer;\n    const data = buffer.shift(buffer.length);\n    buffer.clear();\n    const stream = new XgStream(data.buffer)\n    const units = NalUnit.getNalunits(stream)\n\n    const lastUnit = units.pop();\n    const lastUnitData = new Uint8Array(lastUnit.body.byteLength + 4);\n    lastUnitData.set(new Uint8Array(lastUnit.header), 0)\n    lastUnitData.set(new Uint8Array(lastUnit.body), 4)\n    buffer.push(lastUnitData);\n\n    let sps;\n    let pps;\n    units.forEach((unit) => {\n      const ts = Math.floor(1000 * this.currentSampleIdx++ / this.fps)\n      const currentSample = {\n        dts: ts,\n        pts: ts,\n        data: null,\n        isKeyframe: false\n      }\n      if (unit.sps) {\n        sps = true;\n        this.videoMeta.sps = unit.body\n        this.videoMeta.presentHeight = unit.sps.present_size.height;\n        this.videoMeta.presentWidth = unit.sps.present_size.width;\n      } else if (unit.pps) {\n        pps = true;\n        this.videoMeta.pps = unit.body\n      }\n\n      const data = new Uint8Array(unit.body.byteLength + 4);\n      data.set([0, 0, 0, 1], 0);\n      data.set(unit.body, 4);\n      currentSample.data = data;\n      currentSample.isKeyframe = unit.idr;\n\n      this.videoTrack.samples.push(currentSample);\n    })\n\n    if (sps && pps && !this.videoMetaInited) {\n      this._player.video.setVideoMeta(this.videoMeta);\n      this.videoMetaInited = true\n    }\n    if (!this.intervalId) {\n      this.intervalId = setInterval(() => {\n        if (this.videoTrack.samples.length) {\n          this._player.video.onDemuxComplete(this.videoTrack);\n        } else {\n          clearInterval(this.intervalId)\n        }\n      }, 500)\n    }\n    this.duration = Math.round(Math.floor(this.currentSampleIdx / this.fps))\n    this._player.emit('durationchange')\n  }\n\n  destroy () {\n    this._player = null;\n    this.videoMeta = null\n    this.videoTrack = {\n      samples: []\n    }\n    this.fps = null\n    this.currentSampleIdx = null;\n  }\n\n  get buffer () {\n    return this._context.getInstance('LOADER_BUFFER')\n  }\n}\n\nexport default H264Demuxer;\n","import Player from 'xgplayer';\nimport Context from 'xgplayer-transmuxer-context'\nimport Core from './raw-264'\nimport Events from 'xgplayer-transmuxer-constant-events'\nimport LoaderBuffer from 'xgplayer-transmuxer-buffer-xgbuffer';\nimport FetchLoader from 'xgplayer-transmuxer-loader-fetch';\nimport 'xgplayer-mobilevideo';\n\nclass Raw264Player extends Player {\n  constructor (props) {\n    if (!props.mediaType) {\n      props.mediaType = 'mobile-video'\n    }\n    super(props);\n\n    this.handleTimeupdate = this.handleTimeupdate.bind(this)\n    this.hasPlayed = false;\n  }\n\n  start () {\n\n    this.context = new Context(Events.HlsAllowedEvents);\n    this.context.registry('LOADER_BUFFER', LoaderBuffer);\n    this.core = this.context.registry('RAW_264_CONTROLLER', Core)({ player: this, fps: this.config.fps })\n    if  (!this.config.isLive) {\n      this.context.registry('FETCH_LOADER', FetchLoader);\n      this.core.load(this.config.url)\n    }\n    this.context.init();\n\n    super.start()\n    this.video.setAttribute('noaudio', true)\n    this.video.addEventListener('timeupdate', this.handleTimeupdate, false)\n  }\n\n  replay () {\n    this.video._cleanBuffer()\n    this.currentTime = 0;\n    this.start();\n    this.play();\n  }\n\n  handleTimeupdate () {\n    if (this.config.isLive) {\n      this.video._cleanBuffer();\n    } else {\n      if (this.currentTime >= this.duration) {\n        this.pause();\n        this.emit('ended')\n      }\n    }\n  }\n\n  destroy (isDelDom) {\n    super.destroy(isDelDom);\n    this.core.destroy();\n    this.context.destroy();\n    this.core = null;\n    this.context = null;\n  }\n\n  pushBuffer(arr) {\n    if (this.buffer) {\n      this.buffer.push(arr)\n      this.core.handleDataLoaded()\n    }\n  }\n\n  get buffer () {\n    return this.context.getInstance('LOADER_BUFFER');\n  }\n\n  set currentTime (time) {\n    const oldTime = super.currentTime;\n    const buffered = this.getBufferedRange();\n    if (buffered[0] <= time && buffered[1] >= time) {\n      this.video.currentTime = time;\n    } else {\n      this.video.currentTime = oldTime;\n    }\n  }\n  get currentTime () {\n    return super.currentTime;\n  }\n\n  get duration () {\n    if (this.core && this.core.duration) {\n      return this.core.duration\n    }\n    return this.video.duration;\n  }\n}\n\nexport default Raw264Player;\n"],"names":["H264Demuxer","options","_player","player","videoMeta","VideoTrackMeta","videoTrack","samples","fps","currentSampleIdx","duration","initEvents","on","Events","LOADER_EVENTS","LOADER_DATALOADED","handleDataLoaded","bind","url","emit","LADER_START","buffer","data","shift","length","clear","stream","XgStream","units","NalUnit","getNalunits","lastUnit","pop","lastUnitData","Uint8Array","body","byteLength","set","header","push","sps","pps","forEach","unit","ts","Math","floor","currentSample","dts","pts","isKeyframe","presentHeight","present_size","height","presentWidth","width","idr","videoMetaInited","video","setVideoMeta","intervalId","setInterval","onDemuxComplete","clearInterval","round","_context","getInstance","Raw264Player","props","mediaType","handleTimeupdate","hasPlayed","context","Context","HlsAllowedEvents","registry","LoaderBuffer","core","Core","config","isLive","FetchLoader","load","init","setAttribute","addEventListener","_cleanBuffer","currentTime","start","play","pause","isDelDom","destroy","arr","time","oldTime","buffered","getBufferedRange","Player"],"mappings":";;;;;;;;;;;;;;;;;MAKMA;EACJ,yBAA2B;EAAA,QAAdC,OAAc,uEAAJ,EAAI;;EAAA;;EACzB,SAAKC,OAAL,GAAeD,QAAQE,MAAvB;;EAEA,SAAKC,SAAL,GAAiB,IAAIC,+CAAJ,EAAjB;EACA,SAAKC,UAAL,GAAkB;EAChBC,eAAS;EADO,KAAlB;EAGA,SAAKC,GAAL,GAAWP,QAAQO,GAAR,IAAe,EAA1B;EACA,SAAKC,gBAAL,GAAwB,CAAxB;EACA,SAAKC,QAAL,GAAgB,CAAhB;EACD;;;;6BAEO;EACN,WAAKC,UAAL;EACD;;;mCAEa;EACZ,WAAKC,EAAL,CAAQC,OAAOC,aAAP,CAAqBC,iBAA7B,EAAgD,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAhD;EACA;EACD;;;2BAEKC,KAAK;EACT,WAAKC,IAAL,CAAUN,OAAOC,aAAP,CAAqBM,WAA/B,EAA4CF,GAA5C;EACD;;;yCAEmB;EAAA;;EAClB,UAAMG,SAAS,KAAKA,MAApB;EACA,UAAMC,OAAOD,OAAOE,KAAP,CAAaF,OAAOG,MAApB,CAAb;EACAH,aAAOI,KAAP;EACA,UAAMC,SAAS,IAAIC,QAAJ,CAAaL,KAAKD,MAAlB,CAAf;EACA,UAAMO,QAAQC,mCAAQC,WAAR,CAAoBJ,MAApB,CAAd;;EAEA,UAAMK,WAAWH,MAAMI,GAAN,EAAjB;EACA,UAAMC,eAAe,IAAIC,UAAJ,CAAeH,SAASI,IAAT,CAAcC,UAAd,GAA2B,CAA1C,CAArB;EACAH,mBAAaI,GAAb,CAAiB,IAAIH,UAAJ,CAAeH,SAASO,MAAxB,CAAjB,EAAkD,CAAlD;EACAL,mBAAaI,GAAb,CAAiB,IAAIH,UAAJ,CAAeH,SAASI,IAAxB,CAAjB,EAAgD,CAAhD;EACAd,aAAOkB,IAAP,CAAYN,YAAZ;;EAEA,UAAIO,YAAJ;EACA,UAAIC,YAAJ;EACAb,YAAMc,OAAN,CAAc,UAACC,IAAD,EAAU;EACtB,YAAMC,KAAKC,KAAKC,KAAL,CAAW,OAAO,MAAKrC,gBAAL,EAAP,GAAiC,MAAKD,GAAjD,CAAX;EACA,YAAMuC,gBAAgB;EACpBC,eAAKJ,EADe;EAEpBK,eAAKL,EAFe;EAGpBtB,gBAAM,IAHc;EAIpB4B,sBAAY;EAJQ,SAAtB;EAMA,YAAIP,KAAKH,GAAT,EAAc;EACZA,gBAAM,IAAN;EACA,gBAAKpC,SAAL,CAAeoC,GAAf,GAAqBG,KAAKR,IAA1B;EACA,gBAAK/B,SAAL,CAAe+C,aAAf,GAA+BR,KAAKH,GAAL,CAASY,YAAT,CAAsBC,MAArD;EACA,gBAAKjD,SAAL,CAAekD,YAAf,GAA8BX,KAAKH,GAAL,CAASY,YAAT,CAAsBG,KAApD;EACD,SALD,MAKO,IAAIZ,KAAKF,GAAT,EAAc;EACnBA,gBAAM,IAAN;EACA,gBAAKrC,SAAL,CAAeqC,GAAf,GAAqBE,KAAKR,IAA1B;EACD;;EAED,YAAMb,OAAO,IAAIY,UAAJ,CAAeS,KAAKR,IAAL,CAAUC,UAAV,GAAuB,CAAtC,CAAb;EACAd,aAAKe,GAAL,CAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAT,EAAuB,CAAvB;EACAf,aAAKe,GAAL,CAASM,KAAKR,IAAd,EAAoB,CAApB;EACAY,sBAAczB,IAAd,GAAqBA,IAArB;EACAyB,sBAAcG,UAAd,GAA2BP,KAAKa,GAAhC;;EAEA,cAAKlD,UAAL,CAAgBC,OAAhB,CAAwBgC,IAAxB,CAA6BQ,aAA7B;EACD,OAzBD;;EA2BA,UAAIP,OAAOC,GAAP,IAAc,CAAC,KAAKgB,eAAxB,EAAyC;EACvC,aAAKvD,OAAL,CAAawD,KAAb,CAAmBC,YAAnB,CAAgC,KAAKvD,SAArC;EACA,aAAKqD,eAAL,GAAuB,IAAvB;EACD;EACD,UAAI,CAAC,KAAKG,UAAV,EAAsB;EACpB,aAAKA,UAAL,GAAkBC,YAAY,YAAM;EAClC,cAAI,MAAKvD,UAAL,CAAgBC,OAAhB,CAAwBiB,MAA5B,EAAoC;EAClC,kBAAKtB,OAAL,CAAawD,KAAb,CAAmBI,eAAnB,CAAmC,MAAKxD,UAAxC;EACD,WAFD,MAEO;EACLyD,0BAAc,MAAKH,UAAnB;EACD;EACF,SANiB,EAMf,GANe,CAAlB;EAOD;EACD,WAAKlD,QAAL,GAAgBmC,KAAKmB,KAAL,CAAWnB,KAAKC,KAAL,CAAW,KAAKrC,gBAAL,GAAwB,KAAKD,GAAxC,CAAX,CAAhB;EACA,WAAKN,OAAL,CAAaiB,IAAb,CAAkB,gBAAlB;EACD;;;gCAEU;EACT,WAAKjB,OAAL,GAAe,IAAf;EACA,WAAKE,SAAL,GAAiB,IAAjB;EACA,WAAKE,UAAL,GAAkB;EAChBC,iBAAS;EADO,OAAlB;EAGA,WAAKC,GAAL,GAAW,IAAX;EACA,WAAKC,gBAAL,GAAwB,IAAxB;EACD;;;0BAEa;EACZ,aAAO,KAAKwD,QAAL,CAAcC,WAAd,CAA0B,eAA1B,CAAP;EACD;;;;;;;;;;;;;;;;MC9FGC;;;EACJ,wBAAaC,KAAb,EAAoB;EAAA;;EAClB,QAAI,CAACA,MAAMC,SAAX,EAAsB;EACpBD,YAAMC,SAAN,GAAkB,cAAlB;EACD;;EAHiB,4HAIZD,KAJY;;EAMlB,UAAKE,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBrD,IAAtB,OAAxB;EACA,UAAKsD,SAAL,GAAiB,KAAjB;EAPkB;EAQnB;;;;8BAEQ;;EAEP,WAAKC,OAAL,GAAe,IAAIC,OAAJ,CAAY5D,OAAO6D,gBAAnB,CAAf;EACA,WAAKF,OAAL,CAAaG,QAAb,CAAsB,eAAtB,EAAuCC,YAAvC;EACA,WAAKC,IAAL,GAAY,KAAKL,OAAL,CAAaG,QAAb,CAAsB,oBAAtB,EAA4CG,WAA5C,EAAkD,EAAE3E,QAAQ,IAAV,EAAgBK,KAAK,KAAKuE,MAAL,CAAYvE,GAAjC,EAAlD,CAAZ;EACA,UAAK,CAAC,KAAKuE,MAAL,CAAYC,MAAlB,EAA0B;EACxB,aAAKR,OAAL,CAAaG,QAAb,CAAsB,cAAtB,EAAsCM,WAAtC;EACA,aAAKJ,IAAL,CAAUK,IAAV,CAAe,KAAKH,MAAL,CAAY7D,GAA3B;EACD;EACD,WAAKsD,OAAL,CAAaW,IAAb;;EAEA;EACA,WAAKzB,KAAL,CAAW0B,YAAX,CAAwB,SAAxB,EAAmC,IAAnC;EACA,WAAK1B,KAAL,CAAW2B,gBAAX,CAA4B,YAA5B,EAA0C,KAAKf,gBAA/C,EAAiE,KAAjE;EACD;;;+BAES;EACR,WAAKZ,KAAL,CAAW4B,YAAX;EACA,WAAKC,WAAL,GAAmB,CAAnB;EACA,WAAKC,KAAL;EACA,WAAKC,IAAL;EACD;;;yCAEmB;EAClB,UAAI,KAAKV,MAAL,CAAYC,MAAhB,EAAwB;EACtB,aAAKtB,KAAL,CAAW4B,YAAX;EACD,OAFD,MAEO;EACL,YAAI,KAAKC,WAAL,IAAoB,KAAK7E,QAA7B,EAAuC;EACrC,eAAKgF,KAAL;EACA,eAAKvE,IAAL,CAAU,OAAV;EACD;EACF;EACF;;;8BAEQwE,UAAU;EACjB,0HAAcA,QAAd;EACA,WAAKd,IAAL,CAAUe,OAAV;EACA,WAAKpB,OAAL,CAAaoB,OAAb;EACA,WAAKf,IAAL,GAAY,IAAZ;EACA,WAAKL,OAAL,GAAe,IAAf;EACD;;;iCAEUqB,KAAK;EACd,UAAI,KAAKxE,MAAT,EAAiB;EACf,aAAKA,MAAL,CAAYkB,IAAZ,CAAiBsD,GAAjB;EACA,aAAKhB,IAAL,CAAU7D,gBAAV;EACD;EACF;;;0BAEa;EACZ,aAAO,KAAKwD,OAAL,CAAaN,WAAb,CAAyB,eAAzB,CAAP;EACD;;;wBAEgB4B,MAAM;EACrB,UAAMC,sHAAN;EACA,UAAMC,WAAW,KAAKC,gBAAL,EAAjB;EACA,UAAID,SAAS,CAAT,KAAeF,IAAf,IAAuBE,SAAS,CAAT,KAAeF,IAA1C,EAAgD;EAC9C,aAAKpC,KAAL,CAAW6B,WAAX,GAAyBO,IAAzB;EACD,OAFD,MAEO;EACL,aAAKpC,KAAL,CAAW6B,WAAX,GAAyBQ,OAAzB;EACD;EACF;0BACkB;EACjB;EACD;;;0BAEe;EACd,UAAI,KAAKlB,IAAL,IAAa,KAAKA,IAAL,CAAUnE,QAA3B,EAAqC;EACnC,eAAO,KAAKmE,IAAL,CAAUnE,QAAjB;EACD;EACD,aAAO,KAAKgD,KAAL,CAAWhD,QAAlB;EACD;;;;IAlFwBwF;;;;;;;;"}